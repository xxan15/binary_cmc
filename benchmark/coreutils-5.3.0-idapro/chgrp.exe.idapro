.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : CE2A2488E99A7276FEAB55984F2BDBFA1BE9F3AC36A22D16A0E92574364AAEFF
.text:00401000 ; Input MD5    : CABB8FFEF798EB9E62A6CAD7D303A212
.text:00401000 ; Input CRC32  : 2CD8EEC8
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/chgrp.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A23F (Wed Apr 20 18:41:03 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000122B0 (  74416.)
.text:00401000 ; Section size in file          : 00012400 (  74752.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401BF0+76↓p
.text:00401040                                         ; .text:004124E0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_412480
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_414000
.text:004010A2                 mov     edx, dword_4140A0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_414004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4140C0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4140C0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_412450
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_414000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_414004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401BF0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_412480
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aRecursive      db 'recursive',0        ; DATA XREF: .text:off_4012E0↓o
.text:0040128A aChanges        db 'changes',0          ; DATA XREF: .text:004012F0↓o
.text:00401292 aDereference    db 'dereference',0      ; DATA XREF: .text:00401300↓o
.text:0040129E aNoDereference  db 'no-dereference',0   ; DATA XREF: .text:00401310↓o
.text:004012AD aQuiet          db 'quiet',0            ; DATA XREF: .text:00401320↓o
.text:004012B3 aSilent         db 'silent',0           ; DATA XREF: .text:00401330↓o
.text:004012BA aReference      db 'reference',0        ; DATA XREF: .text:00401340↓o
.text:004012C4 aVerbose        db 'verbose',0          ; DATA XREF: .text:00401350↓o
.text:004012CC aHelp           db 'help',0             ; DATA XREF: .text:00401360↓o
.text:004012D1 aVersion        db 'version',0          ; DATA XREF: .text:00401370↓o
.text:004012D9                 align 10h
.text:004012E0 off_4012E0      dd offset aRecursive    ; DATA XREF: sub_401BF0+98↓o
.text:004012E0                                         ; "recursive"
.text:004012E4                 dd 2 dup(0)
.text:004012EC                 dd 52h
.text:004012F0                 dd offset aChanges      ; "changes"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 63h
.text:00401300                 dd offset aDereference  ; "dereference"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 80h
.text:00401310                 dd offset aNoDereference ; "no-dereference"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 68h
.text:00401320                 dd offset aQuiet        ; "quiet"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 66h
.text:00401330                 dd offset aSilent       ; "silent"
.text:00401334                 dd 2 dup(0)
.text:0040133C                 dd 66h
.text:00401340                 dd offset aReference    ; "reference"
.text:00401344                 dd 1, 0
.text:0040134C                 dd 81h
.text:00401350                 dd offset aVerbose      ; "verbose"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 76h
.text:00401360                 dd offset aHelp         ; "help"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 0FFFFFF7Eh
.text:00401370                 dd offset aVersion      ; "version"
.text:00401374                 dd 2 dup(0)
.text:0040137C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401390 ; const char Locale
.text:00401390 Locale          db 0                    ; DATA XREF: sub_401BF0+33↓o
.text:00401390                                         ; sub_401BF0:loc_402038↓o
.text:00401391                 db 0EBh, 0Dh, 90h
.text:00401394                 align 10h
.text:004013A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004013A0                                         ; DATA XREF: sub_401BF0+4D↓o
.text:004013C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401BF0+55↓o
.text:004013C3                                         ; sub_401BF0+62↓o
.text:004013CD ; const char aHlprcfhv[]
.text:004013CD aHlprcfhv       db 'HLPRcfhv',0         ; DATA XREF: sub_401BF0+A0↓o
.text:004013D6                 align 10h
.text:004013E0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004013E0                                         ; DATA XREF: sub_401BF0:loc_401CE2↓o
.text:004013E0                                         ; .text:0040221C↓o
.text:00401407                 align 20h
.text:00401420 aUsageSOptionGr db 'Usage: %s [OPTION]... GROUP FILE...',0Ah
.text:00401420                                         ; DATA XREF: sub_401BF0+13C↓o
.text:00401420                                         ; .text:loc_402250↓o
.text:00401420                 db '  or:  %s [OPTION]... --reference=RFILE FILE...',0Ah,0
.text:00401475                 align 10h
.text:00401480 aChangeTheGroup db 'Change the group of each FILE to GROUP.',0Ah
.text:00401480                                         ; DATA XREF: sub_401BF0+15F↓o
.text:00401480                                         ; .text:00402273↓o
.text:00401480                 db 'With --reference, change the group of each FILE to that of RFILE.'
.text:00401480                 db 0Ah
.text:00401480                 db 0Ah
.text:00401480                 db '  -c, --changes          like verbose but report only when a chan'
.text:00401480                 db 'ge is made',0Ah
.text:00401480                 db '      --dereference      affect the referent of each symbolic lin'
.text:00401480                 db 'k, rather',0Ah
.text:00401480                 db '                         than the symbolic link itself (this is t'
.text:00401480                 db 'he default)',0Ah,0
.text:004015D0                 align 20h
.text:004015E0 aHNoDereference db '  -h, --no-dereference   affect each symbolic link instead of any'
.text:004015E0                                         ; DATA XREF: sub_401BF0+181↓o
.text:004015E0                                         ; .text:00402295↓o
.text:004015E0                 db ' referenced',0Ah
.text:004015E0                 db '                         file (useful only on systems that can ch'
.text:004015E0                 db 'ange the',0Ah
.text:004015E0                 db '                         ownership of a symlink)',0Ah,0
.text:004016A9                 align 20h
.text:004016C0 aNoPreserveRoot db '      --no-preserve-root do not treat `/',27h,' specially (the de'
.text:004016C0                                         ; DATA XREF: sub_401BF0+1A3↓o
.text:004016C0                                         ; .text:004022B7↓o
.text:004016C0                 db 'fault)',0Ah
.text:004016C0                 db '      --preserve-root    fail to operate recursively on `/',27h,0Ah
.text:004016C0                 db 0
.text:0040173F                 align 10h
.text:00401740 aFSilentQuietSu db '  -f, --silent, --quiet  suppress most error messages',0Ah
.text:00401740                                         ; DATA XREF: sub_401BF0+1C5↓o
.text:00401740                                         ; .text:004022D9↓o
.text:00401740                 db '      --reference=RFILE  use RFILE',27h,'s group rather than the '
.text:00401740                 db 'specifying',0Ah
.text:00401740                 db '                         GROUP value',0Ah
.text:00401740                 db '  -R, --recursive        operate on files and directories recursi'
.text:00401740                 db 'vely',0Ah
.text:00401740                 db '  -v, --verbose          output a diagnostic for every file proce'
.text:00401740                 db 'ssed',0Ah
.text:00401740                 db 0Ah,0
.text:0040186F                 align 20h
.text:00401880 aTheFollowingOp db 'The following options modify how a hierarchy is traversed when th'
.text:00401880                                         ; DATA XREF: sub_401BF0+1E7↓o
.text:00401880                                         ; .text:004022FB↓o
.text:00401880                 db 'e -R',0Ah
.text:00401880                 db 'option is also specified.  If more than one is specified, only th'
.text:00401880                 db 'e final',0Ah
.text:00401880                 db 'one takes effect.',0Ah
.text:00401880                 db 0Ah
.text:00401880                 db '  -H                     if a command line argument is a symbolic'
.text:00401880                 db ' link',0Ah
.text:00401880                 db '                         to a directory, traverse it',0Ah
.text:00401880                 db '  -L                     traverse every symbolic link to a direct'
.text:00401880                 db 'ory',0Ah
.text:00401880                 db '                         encountered',0Ah
.text:00401880                 db '  -P                     do not traverse any symbolic links (defa'
.text:00401880                 db 'ult)',0Ah
.text:00401880                 db 0Ah,0
.text:00401A50                 align 20h
.text:00401A60 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401A60                                         ; DATA XREF: sub_401BF0+209↓o
.text:00401A60                                         ; .text:0040231D↓o
.text:00401A8D                 align 20h
.text:00401AA0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401AA0                                         ; DATA XREF: sub_401BF0+22B↓o
.text:00401AA0                                         ; .text:0040233F↓o
.text:00401AD6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401BF0+24D↓o
.text:00401AD6                                         ; .text:00402361↓o
.text:00401AD6                 db 'Report bugs to <%s>.',0Ah,0
.text:00401AED aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401AED                                         ; DATA XREF: sub_401BF0+25A↓o
.text:00401AED                                         ; .text:0040236E↓o
.text:00401B03 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401BF0+284↓o
.text:00401B10 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401BF0+28C↓o
.text:00401B20 a530            db '5.3.0',0            ; DATA XREF: sub_401BF0+297↓o
.text:00401B26 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401BF0+29F↓o
.text:00401B34 ; const FILE stru_401B34
.text:00401B34 stru_401B34     FILE <72676863h, 6E690070h, 696C6176h, 72672064h, 2070756Fh, \
.text:00401B34                                         ; DATA XREF: sub_401BF0+2A7↓o
.text:00401B34                                         ; sub_401BF0+486↓o
.text:00401B34                       90007325h, 90909090h, 90909090h>
.text:00401B54                 db  90h
.text:00401B55                 db  90h
.text:00401B56                 db  90h
.text:00401B57                 db  90h
.text:00401B58                 db  90h
.text:00401B59                 db  90h
.text:00401B5A                 db  90h
.text:00401B5B                 db  90h
.text:00401B5C                 db  90h
.text:00401B5D                 db  90h
.text:00401B5E                 db  90h
.text:00401B5F                 db  90h
.text:00401B60 aFailedToGetAtt db 'failed to get attributes of %s',0
.text:00401B60                                         ; DATA XREF: sub_401BF0+4F9↓o
.text:00401B7F aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401BF0+533↓o
.text:00401B8F aMissingOperand_0 db 'missing operand after %s',0
.text:00401B8F                                         ; DATA XREF: sub_401BF0+569↓o
.text:00401BA8 aRHRequiresP    db '-R -h requires -P',0
.text:00401BA8                                         ; DATA XREF: sub_401BF0:loc_402192↓o
.text:00401BBA                 align 10h
.text:00401BC0 aRDereferenceRe db '-R --dereference requires either -H or -L',0
.text:00401BC0                                         ; DATA XREF: sub_401BF0:loc_4021CE↓o
.text:00401BEA                 align 10h
.text:00401BF0
.text:00401BF0 ; =============== S U B R O U T I N E =======================================
.text:00401BF0
.text:00401BF0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401BF0
.text:00401BF0 sub_401BF0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401BF0
.text:00401BF0 Category        = dword ptr -0D8h
.text:00401BF0 Locale          = dword ptr -0D4h
.text:00401BF0 var_D0          = dword ptr -0D0h
.text:00401BF0 var_CC          = byte ptr -0CCh
.text:00401BF0 Str             = dword ptr -0C8h
.text:00401BF0 var_C4          = dword ptr -0C4h
.text:00401BF0 var_C0          = dword ptr -0C0h
.text:00401BF0 var_B8          = dword ptr -0B8h
.text:00401BF0 var_B4          = byte ptr -0B4h
.text:00401BF0 var_B0          = dword ptr -0B0h
.text:00401BF0 var_AC          = dword ptr -0ACh
.text:00401BF0 var_A8          = dword ptr -0A8h
.text:00401BF0 var_88          = dword ptr -88h
.text:00401BF0 var_38          = dword ptr -38h
.text:00401BF0 var_34          = byte ptr -34h
.text:00401BF0 var_2C          = byte ptr -2Ch
.text:00401BF0 var_2B          = byte ptr -2Bh
.text:00401BF0 var_24          = dword ptr -24h
.text:00401BF0 arg_0           = dword ptr  8
.text:00401BF0 arg_4           = dword ptr  0Ch
.text:00401BF0
.text:00401BF0                 push    ebp
.text:00401BF1                 xor     eax, eax
.text:00401BF3                 mov     ebp, esp
.text:00401BF5                 push    edi
.text:00401BF6                 push    esi
.text:00401BF7                 mov     esi, 10h
.text:00401BFC                 push    ebx
.text:00401BFD                 sub     esp, 0CCh
.text:00401C03                 mov     edi, [ebp+arg_4]
.text:00401C06                 and     esp, 0FFFFFFF0h
.text:00401C09                 mov     ebx, [ebp+arg_0]
.text:00401C0C                 call    __alloca
.text:00401C11                 call    sub_412520
.text:00401C16                 mov     edx, [edi]
.text:00401C18                 mov     ecx, 0FFFFFFFFh
.text:00401C1D                 mov     [ebp+var_B0], ecx
.text:00401C23                 mov     [esp+0D8h+Locale], offset Locale ; Locale
.text:00401C2B                 mov     ds:dword_415A50, edx
.text:00401C31                 mov     [esp+0D8h+Category], 0 ; Category
.text:00401C38                 call    setlocale
.text:00401C3D                 mov     [esp+0D8h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401C45                 mov     [esp+0D8h+Category], offset aCoreutils ; "coreutils"
.text:00401C4C                 call    ds:__imp_libintl_bindtextdomain
.text:00401C52                 mov     [esp+0D8h+Category], offset aCoreutils ; "coreutils"
.text:00401C59                 call    ds:libintl_textdomain
.text:00401C5F                 mov     [esp+0D8h+Category], offset sub_406400 ; void (__cdecl *)()
.text:00401C66                 call    sub_401040
.text:00401C6B                 lea     edx, [ebp+var_38]
.text:00401C6E                 mov     [esp+0D8h+Category], edx
.text:00401C71                 call    sub_4023A0
.text:00401C76                 lea     esi, [esi+0]
.text:00401C79                 lea     edi, [edi+0]
.text:00401C80
.text:00401C80 loc_401C80:                             ; CODE XREF: sub_401BF0+D7↓j
.text:00401C80                                         ; sub_401BF0+E6↓j ...
.text:00401C80                 mov     [esp+0D8h+Str], 0 ; int
.text:00401C88                 mov     dword ptr [esp+0D8h+var_CC], offset off_4012E0 ; char
.text:00401C90                 mov     [esp+0D8h+var_D0], offset aHlprcfhv ; "HLPRcfhv"
.text:00401C98                 mov     [esp+0D8h+Locale], edi ; int
.text:00401C9C                 mov     [esp+0D8h+Category], ebx ; int
.text:00401C9F                 call    sub_406290
.text:00401CA4                 cmp     eax, 0FFFFFFFFh
.text:00401CA7                 jz      loc_401F49
.text:00401CAD                 cmp     eax, 52h ; 'R'
.text:00401CB0                 jz      loc_401F40
.text:00401CB6                 cmp     eax, 52h ; 'R'
.text:00401CB9                 jg      loc_401EB0
.text:00401CBF                 cmp     eax, 48h ; 'H'
.text:00401CC2                 mov     esi, 11h
.text:00401CC7                 jz      short loc_401C80
.text:00401CC9                 cmp     eax, 48h ; 'H'
.text:00401CCC                 jle     short loc_401D1A
.text:00401CCE                 cmp     eax, 4Ch ; 'L'
.text:00401CD1                 mov     esi, 2
.text:00401CD6                 jz      short loc_401C80
.text:00401CD8                 cmp     eax, 50h ; 'P'
.text:00401CDB                 mov     esi, 10h
.text:00401CE0                 jz      short loc_401C80
.text:00401CE2
.text:00401CE2 loc_401CE2:                             ; CODE XREF: sub_401BF0+13A↓j
.text:00401CE2                                         ; sub_401BF0+2D2↓j ...
.text:00401CE2                 mov     [esp+0D8h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401CE9                 call    ds:libintl_gettext
.text:00401CEF                 mov     ebx, ds:_iob
.text:00401CF5                 mov     edi, ds:dword_415A50
.text:00401CFB                 add     ebx, 40h ; '@'
.text:00401CFE                 mov     [esp+0D8h+var_D0], edi
.text:00401D02                 mov     [esp+0D8h+Locale], eax ; Format
.text:00401D06                 mov     [esp+0D8h+Category], ebx ; Stream
.text:00401D09                 call    fprintf
.text:00401D0E                 mov     [esp+0D8h+Category], 1 ; Code
.text:00401D15
.text:00401D15 loc_401D15:                             ; CODE XREF: sub_401BF0+271↓j
.text:00401D15                                         ; sub_401BF0+421↓j
.text:00401D15                 call    exit
.text:00401D1A ; ---------------------------------------------------------------------------
.text:00401D1A
.text:00401D1A loc_401D1A:                             ; CODE XREF: sub_401BF0+DC↑j
.text:00401D1A                 cmp     eax, 0FFFFFF7Dh
.text:00401D1F                 jz      loc_401E66
.text:00401D25                 cmp     eax, 0FFFFFF7Eh
.text:00401D2A                 jnz     short loc_401CE2
.text:00401D2C                 mov     [esp+0D8h+Category], offset aUsageSOptionGr ; "Usage: %s [OPTION]... GROUP FILE...\n  "...
.text:00401D33                 call    ds:libintl_gettext
.text:00401D39                 mov     ecx, ds:dword_415A50
.text:00401D3F                 mov     [esp+0D8h+Category], eax ; Format
.text:00401D42                 mov     [esp+0D8h+var_D0], ecx
.text:00401D46                 mov     [esp+0D8h+Locale], ecx
.text:00401D4A                 call    printf
.text:00401D4F                 mov     [esp+0D8h+Category], offset aChangeTheGroup ; "Change the group of each FILE to GROUP."...
.text:00401D56                 call    ds:libintl_gettext
.text:00401D5C                 mov     edi, ds:_iob
.text:00401D62                 add     edi, 20h ; ' '
.text:00401D65                 mov     [esp+0D8h+Locale], edi ; Stream
.text:00401D69                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401D6C                 call    fputs
.text:00401D71                 mov     [esp+0D8h+Category], offset aHNoDereference ; "  -h, --no-dereference   affect each sy"...
.text:00401D78                 call    ds:libintl_gettext
.text:00401D7E                 mov     esi, ds:_iob
.text:00401D84                 add     esi, 20h ; ' '
.text:00401D87                 mov     [esp+0D8h+Locale], esi ; Stream
.text:00401D8B                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401D8E                 call    fputs
.text:00401D93                 mov     [esp+0D8h+Category], offset aNoPreserveRoot ; "      --no-preserve-root do not treat `"...
.text:00401D9A                 call    ds:libintl_gettext
.text:00401DA0                 mov     ebx, ds:_iob
.text:00401DA6                 add     ebx, 20h ; ' '
.text:00401DA9                 mov     [esp+0D8h+Locale], ebx ; Stream
.text:00401DAD                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401DB0                 call    fputs
.text:00401DB5                 mov     [esp+0D8h+Category], offset aFSilentQuietSu ; "  -f, --silent, --quiet  suppress most "...
.text:00401DBC                 call    ds:libintl_gettext
.text:00401DC2                 mov     ecx, ds:_iob
.text:00401DC8                 add     ecx, 20h ; ' '
.text:00401DCB                 mov     [esp+0D8h+Locale], ecx ; Stream
.text:00401DCF                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401DD2                 call    fputs
.text:00401DD7                 mov     [esp+0D8h+Category], offset aTheFollowingOp ; "The following options modify how a hier"...
.text:00401DDE                 call    ds:libintl_gettext
.text:00401DE4                 mov     edi, ds:_iob
.text:00401DEA                 add     edi, 20h ; ' '
.text:00401DED                 mov     [esp+0D8h+Locale], edi ; Stream
.text:00401DF1                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401DF4                 call    fputs
.text:00401DF9                 mov     [esp+0D8h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401E00                 call    ds:libintl_gettext
.text:00401E06                 mov     esi, ds:_iob
.text:00401E0C                 add     esi, 20h ; ' '
.text:00401E0F                 mov     [esp+0D8h+Locale], esi ; Stream
.text:00401E13                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401E16                 call    fputs
.text:00401E1B                 mov     [esp+0D8h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401E22                 call    ds:libintl_gettext
.text:00401E28                 mov     ebx, ds:_iob
.text:00401E2E                 add     ebx, 20h ; ' '
.text:00401E31                 mov     [esp+0D8h+Locale], ebx ; Stream
.text:00401E35                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401E38                 call    fputs
.text:00401E3D                 mov     [esp+0D8h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401E44                 call    ds:libintl_gettext
.text:00401E4A                 mov     [esp+0D8h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401E52                 mov     [esp+0D8h+Category], eax ; Format
.text:00401E55                 call    printf
.text:00401E5A
.text:00401E5A loc_401E5A:                             ; CODE XREF: sub_401BF0+2B7↓j
.text:00401E5A                 mov     [esp+0D8h+Category], 0
.text:00401E61                 jmp     loc_401D15
.text:00401E66 ; ---------------------------------------------------------------------------
.text:00401E66
.text:00401E66 loc_401E66:                             ; CODE XREF: sub_401BF0+12F↑j
.text:00401E66                 mov     [esp+0D8h+var_C0], 0
.text:00401E6E                 mov     edx, ds:_iob
.text:00401E74                 mov     [esp+0D8h+var_C4], offset aJimMeyering ; "Jim Meyering"
.text:00401E7C                 mov     [esp+0D8h+Str], offset aDavidMackenzie ; "David MacKenzie"
.text:00401E84                 add     edx, 20h ; ' '
.text:00401E87                 mov     dword ptr [esp+0D8h+var_CC], offset a530 ; "5.3.0"
.text:00401E8F                 mov     [esp+0D8h+var_D0], offset aGnuCoreutils ; "GNU coreutils"
.text:00401E97                 mov     [esp+0D8h+Locale], offset stru_401B34 ; FILE *
.text:00401E9F                 mov     [esp+0D8h+Category], edx ; FILE *
.text:00401EA2                 call    sub_406250
.text:00401EA7                 jmp     short loc_401E5A
.text:00401EA7 ; ---------------------------------------------------------------------------
.text:00401EA9                 align 10h
.text:00401EB0
.text:00401EB0 loc_401EB0:                             ; CODE XREF: sub_401BF0+C9↑j
.text:00401EB0                 cmp     eax, 68h ; 'h'
.text:00401EB3                 jz      short loc_401F30
.text:00401EB5                 cmp     eax, 68h ; 'h'
.text:00401EB8                 jg      short loc_401EE0
.text:00401EBA                 cmp     eax, 63h ; 'c'
.text:00401EBD                 jz      short loc_401ED1
.text:00401EBF                 cmp     eax, 66h ; 'f'
.text:00401EC2                 jnz     loc_401CE2
.text:00401EC8                 mov     [ebp+var_2B], 1
.text:00401ECC                 jmp     loc_401C80
.text:00401ED1 ; ---------------------------------------------------------------------------
.text:00401ED1
.text:00401ED1 loc_401ED1:                             ; CODE XREF: sub_401BF0+2CD↑j
.text:00401ED1                 mov     [ebp+var_38], 1
.text:00401ED8                 jmp     loc_401C80
.text:00401ED8 ; ---------------------------------------------------------------------------
.text:00401EDD                 align 10h
.text:00401EE0
.text:00401EE0 loc_401EE0:                             ; CODE XREF: sub_401BF0+2C8↑j
.text:00401EE0                 cmp     eax, 80h ; '€'
.text:00401EE5                 jz      short loc_401F1F
.text:00401EE7                 cmp     eax, 80h ; '€'
.text:00401EEC                 jg      short loc_401F03
.text:00401EEE                 cmp     eax, 76h ; 'v'
.text:00401EF1                 jnz     loc_401CE2
.text:00401EF7                 mov     [ebp+var_38], 0
.text:00401EFE                 jmp     loc_401C80
.text:00401F03 ; ---------------------------------------------------------------------------
.text:00401F03
.text:00401F03 loc_401F03:                             ; CODE XREF: sub_401BF0+2FC↑j
.text:00401F03                 cmp     eax, 81h
.text:00401F08                 jnz     loc_401CE2
.text:00401F0E                 mov     edx, ds:dword_415A70
.text:00401F14                 mov     ds:dword_415000, edx
.text:00401F1A                 jmp     loc_401C80
.text:00401F1F ; ---------------------------------------------------------------------------
.text:00401F1F
.text:00401F1F loc_401F1F:                             ; CODE XREF: sub_401BF0+2F5↑j
.text:00401F1F                 mov     ecx, 1
.text:00401F24                 mov     [ebp+var_B0], ecx
.text:00401F2A                 jmp     loc_401C80
.text:00401F2A ; ---------------------------------------------------------------------------
.text:00401F2F                 align 10h
.text:00401F30
.text:00401F30 loc_401F30:                             ; CODE XREF: sub_401BF0+2C3↑j
.text:00401F30                 xor     edx, edx
.text:00401F32                 mov     [ebp+var_B0], edx
.text:00401F38                 jmp     loc_401C80
.text:00401F38 ; ---------------------------------------------------------------------------
.text:00401F3D                 align 10h
.text:00401F40
.text:00401F40 loc_401F40:                             ; CODE XREF: sub_401BF0+C0↑j
.text:00401F40                 mov     [ebp+var_34], 1
.text:00401F44                 jmp     loc_401C80
.text:00401F49 ; ---------------------------------------------------------------------------
.text:00401F49
.text:00401F49 loc_401F49:                             ; CODE XREF: sub_401BF0+B7↑j
.text:00401F49                 cmp     [ebp+var_34], 0
.text:00401F4D                 jz      loc_4021F5
.text:00401F53                 cmp     esi, 10h
.text:00401F56                 jz      loc_4021BC
.text:00401F5C                 mov     eax, [ebp+var_B0]
.text:00401F62                 test    eax, eax
.text:00401F64                 jz      loc_402192
.text:00401F6A
.text:00401F6A loc_401F6A:                             ; CODE XREF: sub_401BF0+5C7↓j
.text:00401F6A                 mov     [ebp+var_2C], 1
.text:00401F6E
.text:00401F6E loc_401F6E:                             ; CODE XREF: sub_401BF0+5D9↓j
.text:00401F6E                                         ; sub_401BF0+616↓j
.text:00401F6E                 mov     ecx, dword_414010
.text:00401F74                 mov     edx, ds:dword_415000
.text:00401F7A                 mov     eax, ecx
.text:00401F7C                 mov     ecx, ebx
.text:00401F7E                 sub     ecx, eax
.text:00401F80                 test    edx, edx
.text:00401F82                 jz      loc_402189
.text:00401F88                 test    ecx, ecx
.text:00401F8A                 jle     loc_40211F
.text:00401F90
.text:00401F90 loc_401F90:                             ; CODE XREF: sub_401BF0+59A↓j
.text:00401F90                 test    edx, edx
.text:00401F92                 jnz     loc_4020A3
.text:00401F98                 mov     ebx, [edi+eax*4]
.text:00401F9B                 lea     edx, [eax+1]
.text:00401F9E                 xor     ecx, ecx
.text:00401FA0                 mov     dword_414010, edx
.text:00401FA6                 cmp     byte ptr [ebx], 0
.text:00401FA9                 setz    cl
.text:00401FAC                 dec     ecx
.text:00401FAD                 and     ecx, ebx
.text:00401FAF                 mov     [ebp+var_24], ecx
.text:00401FB2                 mov     ecx, 0FFFFFFFFh
.text:00401FB7                 mov     [ebp+var_B8], ecx
.text:00401FBD                 cmp     byte ptr [ebx], 0
.text:00401FC0                 jnz     short loc_402016
.text:00401FC2
.text:00401FC2 loc_401FC2:                             ; CODE XREF: sub_401BF0+446↓j
.text:00401FC2                 mov     ebx, [ebp+var_B8]
.text:00401FC8
.text:00401FC8 loc_401FC8:                             ; CODE XREF: sub_401BF0+4E0↓j
.text:00401FC8                 mov     [esp+0D8h+Locale], esi
.text:00401FCC                 lea     ecx, [ebp+var_38]
.text:00401FCF                 lea     esi, [edi+edx*4]
.text:00401FD2                 mov     [esp+0D8h+var_C0], ecx
.text:00401FD6                 mov     dword ptr [esp+0D8h+var_CC], ebx
.text:00401FDA                 mov     [esp+0D8h+var_C4], 0FFFFFFFFh
.text:00401FE2                 mov     [esp+0D8h+Str], 0FFFFFFFFh
.text:00401FEA                 mov     [esp+0D8h+var_D0], 0FFFFFFFFh
.text:00401FF2                 mov     [esp+0D8h+Category], esi
.text:00401FF5                 call    sub_402490
.text:00401FFA                 mov     bl, al
.text:00401FFC                 lea     eax, [ebp+var_38]
.text:00401FFF                 mov     [esp+0D8h+Category], eax
.text:00402002                 call    nullsub_1
.text:00402007                 xor     ecx, ecx
.text:00402009                 test    bl, bl
.text:0040200B                 setz    cl
.text:0040200E                 mov     [esp+0D8h+Category], ecx
.text:00402011                 jmp     loc_401D15
.text:00402016 ; ---------------------------------------------------------------------------
.text:00402016
.text:00402016 loc_402016:                             ; CODE XREF: sub_401BF0+3D0↑j
.text:00402016                 mov     [esp+0D8h+Category], ebx
.text:00402019                 call    sub_40CCB0
.text:0040201E                 test    eax, eax
.text:00402020                 jz      short loc_402038
.text:00402022                 mov     eax, [eax+8]
.text:00402025
.text:00402025 loc_402025:                             ; CODE XREF: sub_401BF0+47C↓j
.text:00402025                 mov     [ebp+var_B8], eax
.text:0040202B                 call    nullsub_2
.text:00402030                 mov     edx, dword_414010
.text:00402036                 jmp     short loc_401FC2
.text:00402038 ; ---------------------------------------------------------------------------
.text:00402038
.text:00402038 loc_402038:                             ; CODE XREF: sub_401BF0+430↑j
.text:00402038                 mov     [esp+0D8h+Str], offset Locale ; Str
.text:00402040                 lea     edx, [ebp+var_AC]
.text:00402046                 mov     dword ptr [esp+0D8h+var_CC], edx ; int
.text:0040204A                 mov     [esp+0D8h+var_D0], 0Ah ; int
.text:00402052                 mov     [esp+0D8h+Locale], 0 ; int
.text:0040205A                 mov     [esp+0D8h+Category], ebx ; int
.text:0040205D                 call    sub_4065B0
.text:00402062                 test    eax, eax
.text:00402064                 jnz     short loc_40206E
.text:00402066
.text:00402066 loc_402066:                             ; CODE XREF: sub_401BF0+4B1↓j
.text:00402066                 mov     eax, [ebp+var_AC]
.text:0040206C                 jmp     short loc_402025
.text:0040206E ; ---------------------------------------------------------------------------
.text:0040206E
.text:0040206E loc_40206E:                             ; CODE XREF: sub_401BF0+474↑j
.text:0040206E                 mov     [esp+0D8h+Category], ebx ; char *
.text:00402071                 call    sub_406510
.text:00402076                 mov     [esp+0D8h+Category], (offset stru_401B34._cnt+2)
.text:0040207D                 mov     ebx, eax
.text:0040207F                 call    ds:libintl_gettext
.text:00402085                 mov     dword ptr [esp+0D8h+var_CC], ebx ; char
.text:00402089                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00402091                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402098                 mov     [esp+0D8h+var_D0], eax ; char *
.text:0040209C                 call    sub_409310
.text:004020A1                 jmp     short loc_402066
.text:004020A3 ; ---------------------------------------------------------------------------
.text:004020A3
.text:004020A3 loc_4020A3:                             ; CODE XREF: sub_401BF0+3A2↑j
.text:004020A3                 mov     [esp+0D8h+Category], edx ; char *
.text:004020A6                 lea     ecx, [ebp+var_A8]
.text:004020AC                 mov     [esp+0D8h+Locale], ecx ; int
.text:004020B0                 call    sub_40C330
.text:004020B5                 test    eax, eax
.text:004020B7                 jnz     short loc_4020D5
.text:004020B9
.text:004020B9 loc_4020B9:                             ; CODE XREF: sub_401BF0+52D↓j
.text:004020B9                 mov     ebx, [ebp+var_88]
.text:004020BF                 mov     [esp+0D8h+Category], ebx
.text:004020C2                 call    sub_4023E0
.text:004020C7                 mov     [ebp+var_24], eax
.text:004020CA                 mov     edx, dword_414010
.text:004020D0                 jmp     loc_401FC8
.text:004020D5 ; ---------------------------------------------------------------------------
.text:004020D5
.text:004020D5 loc_4020D5:                             ; CODE XREF: sub_401BF0+4C7↑j
.text:004020D5                 mov     ebx, ds:dword_415000
.text:004020DB                 mov     [esp+0D8h+Category], ebx ; char *
.text:004020DE                 call    sub_406510
.text:004020E3                 mov     dword ptr [ebp+var_B4], eax
.text:004020E9                 mov     [esp+0D8h+Category], offset aFailedToGetAtt ; "failed to get attributes of %s"
.text:004020F0                 call    ds:libintl_gettext
.text:004020F6                 mov     ebx, eax
.text:004020F8                 call    _errno
.text:004020FD                 mov     [esp+0D8h+var_D0], ebx ; char *
.text:00402101                 mov     ecx, dword ptr [ebp+var_B4]
.text:00402107                 mov     dword ptr [esp+0D8h+var_CC], ecx ; char
.text:0040210B                 mov     edx, [eax]
.text:0040210D                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402114                 mov     [esp+0D8h+Locale], edx ; ErrorMessage
.text:00402118                 call    sub_409310
.text:0040211D                 jmp     short loc_4020B9
.text:0040211F ; ---------------------------------------------------------------------------
.text:0040211F
.text:0040211F loc_40211F:                             ; CODE XREF: sub_401BF0+39A↑j
.text:0040211F                                         ; sub_401BF0+5A0↓j
.text:0040211F                 cmp     ebx, eax
.text:00402121                 jg      short loc_40214D
.text:00402123                 mov     [esp+0D8h+Category], offset aMissingOperand ; "missing operand"
.text:0040212A                 call    ds:libintl_gettext
.text:00402130                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00402138                 mov     [esp+0D8h+Category], 0 ; Code
.text:0040213F                 mov     [esp+0D8h+var_D0], eax ; char *
.text:00402143                 call    sub_409310
.text:00402148                 jmp     loc_401CE2
.text:0040214D ; ---------------------------------------------------------------------------
.text:0040214D
.text:0040214D loc_40214D:                             ; CODE XREF: sub_401BF0+531↑j
.text:0040214D                 mov     edx, [edi+ebx*4-4]
.text:00402151                 mov     [esp+0D8h+Category], edx ; char *
.text:00402154                 call    sub_406510
.text:00402159                 mov     [esp+0D8h+Category], offset aMissingOperand_0 ; "missing operand after %s"
.text:00402160                 mov     esi, eax
.text:00402162                 call    ds:libintl_gettext
.text:00402168                 mov     dword ptr [esp+0D8h+var_CC], esi ; char
.text:0040216C                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00402174                 mov     [esp+0D8h+Category], 0 ; Code
.text:0040217B                 mov     [esp+0D8h+var_D0], eax ; char *
.text:0040217F                 call    sub_409310
.text:00402184                 jmp     loc_401CE2
.text:00402189 ; ---------------------------------------------------------------------------
.text:00402189
.text:00402189 loc_402189:                             ; CODE XREF: sub_401BF0+392↑j
.text:00402189                 dec     ecx
.text:0040218A                 jg      loc_401F90
.text:00402190                 jmp     short loc_40211F
.text:00402192 ; ---------------------------------------------------------------------------
.text:00402192
.text:00402192 loc_402192:                             ; CODE XREF: sub_401BF0+374↑j
.text:00402192                 mov     [esp+0D8h+Category], offset aRHRequiresP ; "-R -h requires -P"
.text:00402199                 call    ds:libintl_gettext
.text:0040219F                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:004021A7                 mov     [esp+0D8h+Category], 1 ; Code
.text:004021AE                 mov     [esp+0D8h+var_D0], eax ; char *
.text:004021B2                 call    sub_409310
.text:004021B7                 jmp     loc_401F6A
.text:004021BC ; ---------------------------------------------------------------------------
.text:004021BC
.text:004021BC loc_4021BC:                             ; CODE XREF: sub_401BF0+366↑j
.text:004021BC                 cmp     [ebp+var_B0], 1
.text:004021C3                 jz      short loc_4021CE
.text:004021C5
.text:004021C5 loc_4021C5:                             ; CODE XREF: sub_401BF0+603↓j
.text:004021C5                 mov     [ebp+var_2C], 0
.text:004021C9                 jmp     loc_401F6E
.text:004021CE ; ---------------------------------------------------------------------------
.text:004021CE
.text:004021CE loc_4021CE:                             ; CODE XREF: sub_401BF0+5D3↑j
.text:004021CE                 mov     [esp+0D8h+Category], offset aRDereferenceRe ; "-R --dereference requires either -H or "...
.text:004021D5                 call    ds:libintl_gettext
.text:004021DB                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:004021E3                 mov     [esp+0D8h+Category], 1 ; Code
.text:004021EA                 mov     [esp+0D8h+var_D0], eax ; char *
.text:004021EE                 call    sub_409310
.text:004021F3                 jmp     short loc_4021C5
.text:004021F5 ; ---------------------------------------------------------------------------
.text:004021F5
.text:004021F5 loc_4021F5:                             ; CODE XREF: sub_401BF0+35D↑j
.text:004021F5                 mov     ecx, [ebp+var_B0]
.text:004021FB                 mov     esi, 10h
.text:00402200                 test    ecx, ecx
.text:00402202                 setnz   [ebp+var_2C]
.text:00402206                 jmp     loc_401F6E
.text:00402206 sub_401BF0      endp
.text:00402206
.text:00402206 ; ---------------------------------------------------------------------------
.text:0040220B                 align 10h
.text:00402210                 push    ebx
.text:00402211                 sub     esp, 18h
.text:00402214                 mov     ebx, [esp+20h]
.text:00402218                 test    ebx, ebx
.text:0040221A                 jz      short loc_402250
.text:0040221C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402223                 call    ds:libintl_gettext
.text:00402229                 mov     edx, ds:_iob
.text:0040222F                 mov     ecx, ds:dword_415A50
.text:00402235                 add     edx, 40h ; '@'
.text:00402238                 mov     [esp+8], ecx
.text:0040223C                 mov     [esp+4], eax
.text:00402240                 mov     [esp], edx
.text:00402243                 call    fprintf
.text:00402248
.text:00402248 loc_402248:                             ; CODE XREF: .text:0040237E↓j
.text:00402248                 mov     [esp], ebx
.text:0040224B                 call    exit
.text:00402250 ; ---------------------------------------------------------------------------
.text:00402250
.text:00402250 loc_402250:                             ; CODE XREF: .text:0040221A↑j
.text:00402250                 mov     dword ptr [esp], offset aUsageSOptionGr ; "Usage: %s [OPTION]... GROUP FILE...\n  "...
.text:00402257                 call    ds:libintl_gettext
.text:0040225D                 mov     ecx, ds:dword_415A50
.text:00402263                 mov     [esp], eax
.text:00402266                 mov     [esp+8], ecx
.text:0040226A                 mov     [esp+4], ecx
.text:0040226E                 call    printf
.text:00402273                 mov     dword ptr [esp], offset aChangeTheGroup ; "Change the group of each FILE to GROUP."...
.text:0040227A                 call    ds:libintl_gettext
.text:00402280                 mov     ecx, ds:_iob
.text:00402286                 add     ecx, 20h ; ' '
.text:00402289                 mov     [esp+4], ecx
.text:0040228D                 mov     [esp], eax
.text:00402290                 call    fputs
.text:00402295                 mov     dword ptr [esp], offset aHNoDereference ; "  -h, --no-dereference   affect each sy"...
.text:0040229C                 call    ds:libintl_gettext
.text:004022A2                 mov     ecx, ds:_iob
.text:004022A8                 add     ecx, 20h ; ' '
.text:004022AB                 mov     [esp+4], ecx
.text:004022AF                 mov     [esp], eax
.text:004022B2                 call    fputs
.text:004022B7                 mov     dword ptr [esp], offset aNoPreserveRoot ; "      --no-preserve-root do not treat `"...
.text:004022BE                 call    ds:libintl_gettext
.text:004022C4                 mov     ecx, ds:_iob
.text:004022CA                 add     ecx, 20h ; ' '
.text:004022CD                 mov     [esp+4], ecx
.text:004022D1                 mov     [esp], eax
.text:004022D4                 call    fputs
.text:004022D9                 mov     dword ptr [esp], offset aFSilentQuietSu ; "  -f, --silent, --quiet  suppress most "...
.text:004022E0                 call    ds:libintl_gettext
.text:004022E6                 mov     ecx, ds:_iob
.text:004022EC                 add     ecx, 20h ; ' '
.text:004022EF                 mov     [esp+4], ecx
.text:004022F3                 mov     [esp], eax
.text:004022F6                 call    fputs
.text:004022FB                 mov     dword ptr [esp], offset aTheFollowingOp ; "The following options modify how a hier"...
.text:00402302                 call    ds:libintl_gettext
.text:00402308                 mov     ecx, ds:_iob
.text:0040230E                 add     ecx, 20h ; ' '
.text:00402311                 mov     [esp+4], ecx
.text:00402315                 mov     [esp], eax
.text:00402318                 call    fputs
.text:0040231D                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402324                 call    ds:libintl_gettext
.text:0040232A                 mov     ecx, ds:_iob
.text:00402330                 add     ecx, 20h ; ' '
.text:00402333                 mov     [esp+4], ecx
.text:00402337                 mov     [esp], eax
.text:0040233A                 call    fputs
.text:0040233F                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402346                 call    ds:libintl_gettext
.text:0040234C                 mov     ecx, ds:_iob
.text:00402352                 add     ecx, 20h ; ' '
.text:00402355                 mov     [esp+4], ecx
.text:00402359                 mov     [esp], eax
.text:0040235C                 call    fputs
.text:00402361                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402368                 call    ds:libintl_gettext
.text:0040236E                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402376                 mov     [esp], eax
.text:00402379                 call    printf
.text:0040237E                 jmp     loc_402248
.text:0040237E ; ---------------------------------------------------------------------------
.text:00402383                 align 20h
.text:004023A0
.text:004023A0 ; =============== S U B R O U T I N E =======================================
.text:004023A0
.text:004023A0
.text:004023A0 sub_4023A0      proc near               ; CODE XREF: sub_401BF0+81↑p
.text:004023A0
.text:004023A0 arg_0           = dword ptr  4
.text:004023A0
.text:004023A0                 mov     edx, [esp+arg_0]
.text:004023A4                 mov     dword ptr [edx], 2
.text:004023AA                 mov     dword ptr [edx+8], 0
.text:004023B1                 mov     byte ptr [edx+0Ch], 1
.text:004023B5                 mov     byte ptr [edx+4], 0
.text:004023B9                 mov     byte ptr [edx+0Dh], 0
.text:004023BD                 mov     dword ptr [edx+10h], 0
.text:004023C4                 mov     dword ptr [edx+14h], 0
.text:004023CB                 retn
.text:004023CB sub_4023A0      endp
.text:004023CB
.text:004023CB ; ---------------------------------------------------------------------------
.text:004023CC                 align 10h
.text:004023D0
.text:004023D0 ; =============== S U B R O U T I N E =======================================
.text:004023D0
.text:004023D0
.text:004023D0 nullsub_1       proc near               ; CODE XREF: sub_401BF0+412↑p
.text:004023D0                 retn
.text:004023D0 nullsub_1       endp
.text:004023D0
.text:004023D1 ; ---------------------------------------------------------------------------
.text:004023D1                 jmp     short sub_4023E0
.text:004023D1 ; ---------------------------------------------------------------------------
.text:004023D3                 align 10h
.text:004023E0
.text:004023E0 ; =============== S U B R O U T I N E =======================================
.text:004023E0
.text:004023E0
.text:004023E0 sub_4023E0      proc near               ; CODE XREF: sub_401BF0+4D2↑p
.text:004023E0                                         ; .text:004023D1↑j
.text:004023E0
.text:004023E0 var_3C          = dword ptr -3Ch
.text:004023E0 var_38          = dword ptr -38h
.text:004023E0 var_34          = dword ptr -34h
.text:004023E0 var_2C          = byte ptr -2Ch
.text:004023E0 var_4           = dword ptr -4
.text:004023E0 arg_0           = dword ptr  4
.text:004023E0
.text:004023E0                 sub     esp, 3Ch
.text:004023E3                 mov     [esp+3Ch+var_4], ebx
.text:004023E7                 mov     ebx, [esp+3Ch+arg_0]
.text:004023EB                 mov     [esp+3Ch+var_3C], ebx
.text:004023EE                 call    sub_40CDA0
.text:004023F3                 test    eax, eax
.text:004023F5                 jz      short loc_402409
.text:004023F7                 mov     eax, [eax]
.text:004023F9
.text:004023F9 loc_4023F9:                             ; CODE XREF: sub_4023E0+41↓j
.text:004023F9                 mov     [esp+3Ch+var_3C], eax ; char *
.text:004023FC                 call    sub_406D20
.text:00402401                 mov     ebx, [esp+3Ch+var_4]
.text:00402405                 add     esp, 3Ch
.text:00402408                 retn
.text:00402409 ; ---------------------------------------------------------------------------
.text:00402409
.text:00402409 loc_402409:                             ; CODE XREF: sub_4023E0+15↑j
.text:00402409                 mov     [esp+3Ch+var_3C], ebx
.text:0040240C                 lea     edx, [esp+3Ch+var_2C]
.text:00402410                 mov     [esp+3Ch+var_34], edx
.text:00402414                 mov     [esp+3Ch+var_38], 0
.text:0040241C                 call    sub_406DF0
.text:00402421                 jmp     short loc_4023F9
.text:00402421 sub_4023E0      endp
.text:00402421
.text:00402421 ; ---------------------------------------------------------------------------
.text:00402423                 align 10h
.text:00402430                 sub     esp, 3Ch
.text:00402433                 mov     [esp+38h], ebx
.text:00402437                 mov     ebx, [esp+40h]
.text:0040243B                 mov     [esp], ebx
.text:0040243E                 call    sub_40CD50
.text:00402443                 test    eax, eax
.text:00402445                 jz      short loc_402459
.text:00402447                 mov     eax, [eax]
.text:00402449
.text:00402449 loc_402449:                             ; CODE XREF: .text:00402471↓j
.text:00402449                 mov     [esp], eax
.text:0040244C                 call    sub_406D20
.text:00402451                 mov     ebx, [esp+38h]
.text:00402455                 add     esp, 3Ch
.text:00402458                 retn
.text:00402459 ; ---------------------------------------------------------------------------
.text:00402459
.text:00402459 loc_402459:                             ; CODE XREF: .text:00402445↑j
.text:00402459                 mov     [esp], ebx
.text:0040245C                 lea     edx, [esp+10h]
.text:00402460                 mov     [esp+8], edx
.text:00402464                 mov     dword ptr [esp+4], 0
.text:0040246C                 call    sub_406DF0
.text:00402471                 jmp     short loc_402449
.text:00402471 ; ---------------------------------------------------------------------------
.text:00402473 aFtsReadFailed  db 'fts_read failed',0  ; DATA XREF: sub_402490:loc_402546↓o
.text:00402483                 align 10h
.text:00402490
.text:00402490 ; =============== S U B R O U T I N E =======================================
.text:00402490
.text:00402490
.text:00402490 sub_402490      proc near               ; CODE XREF: sub_401BF0+405↑p
.text:00402490
.text:00402490 Code            = dword ptr -3Ch
.text:00402490 ErrorMessage    = dword ptr -38h
.text:00402490 var_34          = dword ptr -34h
.text:00402490 var_30          = dword ptr -30h
.text:00402490 var_2C          = dword ptr -2Ch
.text:00402490 var_28          = dword ptr -28h
.text:00402490 var_24          = dword ptr -24h
.text:00402490 var_11          = byte ptr -11h
.text:00402490 arg_0           = dword ptr  4
.text:00402490 arg_4           = dword ptr  8
.text:00402490 arg_8           = dword ptr  0Ch
.text:00402490 arg_C           = dword ptr  10h
.text:00402490 arg_10          = dword ptr  14h
.text:00402490 arg_14          = dword ptr  18h
.text:00402490 arg_18          = dword ptr  1Ch
.text:00402490
.text:00402490                 push    ebp
.text:00402491                 push    edi
.text:00402492                 push    esi
.text:00402493                 push    ebx
.text:00402494                 sub     esp, 2Ch
.text:00402497                 mov     ebp, [esp+3Ch+arg_10]
.text:0040249B                 mov     [esp+3Ch+var_11], 1
.text:004024A0                 mov     eax, [esp+3Ch+arg_4]
.text:004024A4                 mov     edi, [esp+3Ch+arg_18]
.text:004024A8                 cmp     ebp, 0FFFFFFFFh
.text:004024AB                 jz      loc_402577
.text:004024B1
.text:004024B1 loc_4024B1:                             ; CODE XREF: sub_402490+EC↓j
.text:004024B1                                         ; sub_402490+F5↓j ...
.text:004024B1                 xor     edx, edx
.text:004024B3
.text:004024B3 loc_4024B3:                             ; CODE XREF: sub_402490+10B↓j
.text:004024B3                 mov     [esp+3Ch+var_34], 0
.text:004024BB                 or      eax, edx
.text:004024BD                 mov     edx, [esp+3Ch+arg_0]
.text:004024C1                 mov     [esp+3Ch+ErrorMessage], eax
.text:004024C5                 mov     [esp+3Ch+Code], edx
.text:004024C8                 call    sub_404BA0
.text:004024CD                 mov     esi, eax
.text:004024CF                 nop
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_402490+94↓j
.text:004024D0                 mov     [esp+3Ch+Code], esi ; void *
.text:004024D3                 call    sub_403600
.text:004024D8                 test    eax, eax
.text:004024DA                 jz      short loc_402526
.text:004024DC                 mov     [esp+3Ch+var_24], edi
.text:004024E0                 mov     ecx, [esp+3Ch+arg_14]
.text:004024E4                 xor     ebx, ebx
.text:004024E6                 mov     [esp+3Ch+var_2C], ebp
.text:004024EA                 mov     [esp+3Ch+ErrorMessage], eax
.text:004024EE                 mov     [esp+3Ch+var_28], ecx
.text:004024F2                 mov     ecx, [esp+3Ch+arg_C]
.text:004024F6                 mov     [esp+3Ch+Code], esi
.text:004024F9                 mov     [esp+3Ch+var_30], ecx
.text:004024FD                 mov     ecx, [esp+3Ch+arg_8]
.text:00402501                 mov     [esp+3Ch+var_34], ecx
.text:00402505                 call    sub_4026E0
.text:0040250A                 test    al, al
.text:0040250C                 jz      short loc_402520
.text:0040250E                 cmp     [esp+3Ch+var_11], 0
.text:00402513                 jz      short loc_402520
.text:00402515                 mov     bl, 1
.text:00402517                 mov     esi, esi
.text:00402519                 lea     edi, [edi+0]
.text:00402520
.text:00402520 loc_402520:                             ; CODE XREF: sub_402490+7C↑j
.text:00402520                                         ; sub_402490+83↑j
.text:00402520                 mov     [esp+3Ch+var_11], bl
.text:00402524                 jmp     short loc_4024D0
.text:00402526 ; ---------------------------------------------------------------------------
.text:00402526
.text:00402526 loc_402526:                             ; CODE XREF: sub_402490+4A↑j
.text:00402526                 call    _errno
.text:0040252B                 mov     ecx, [eax]
.text:0040252D                 test    ecx, ecx
.text:0040252F                 jnz     short loc_402546
.text:00402531
.text:00402531 loc_402531:                             ; CODE XREF: sub_402490+E5↓j
.text:00402531                 mov     [esp+3Ch+Code], esi ; void *
.text:00402534                 call    sub_403500
.text:00402539                 movzx   eax, [esp+3Ch+var_11]
.text:0040253E                 add     esp, 2Ch
.text:00402541                 pop     ebx
.text:00402542                 pop     esi
.text:00402543                 pop     edi
.text:00402544                 pop     ebp
.text:00402545                 retn
.text:00402546 ; ---------------------------------------------------------------------------
.text:00402546
.text:00402546 loc_402546:                             ; CODE XREF: sub_402490+9F↑j
.text:00402546                 mov     [esp+3Ch+Code], offset aFtsReadFailed ; "fts_read failed"
.text:0040254D                 call    ds:libintl_gettext
.text:00402553                 mov     edi, eax
.text:00402555                 call    _errno
.text:0040255A                 mov     [esp+3Ch+var_34], edi ; char *
.text:0040255E                 mov     ebx, [eax]
.text:00402560                 mov     [esp+3Ch+Code], 0 ; Code
.text:00402567                 mov     [esp+3Ch+ErrorMessage], ebx ; ErrorMessage
.text:0040256B                 call    sub_409310
.text:00402570                 mov     [esp+3Ch+var_11], 0
.text:00402575                 jmp     short loc_402531
.text:00402577 ; ---------------------------------------------------------------------------
.text:00402577
.text:00402577 loc_402577:                             ; CODE XREF: sub_402490+1B↑j
.text:00402577                 cmp     [esp+3Ch+arg_14], 0FFFFFFFFh
.text:0040257C                 jnz     loc_4024B1
.text:00402582                 cmp     dword ptr [edi], 2
.text:00402585                 jnz     loc_4024B1
.text:0040258B                 mov     ecx, [edi+8]
.text:0040258E                 test    ecx, ecx
.text:00402590                 jnz     loc_4024B1
.text:00402596                 mov     edx, 8
.text:0040259B                 jmp     loc_4024B3
.text:0040259B sub_402490      endp
.text:0040259B
.text:0040259B ; ---------------------------------------------------------------------------
.text:004025A0 ; const char dword_4025A0[]
.text:004025A0 dword_4025A0    dd 9090002Fh, 7 dup(90909090h)
.text:004025A0                                         ; DATA XREF: sub_4026E0+14E↓o
.text:004025A0                                         ; sub_4026E0:loc_402B74↓o
.text:004025C0 aItIsDangerousT_0 db 'it is dangerous to operate recursively on %s',0
.text:004025C0                                         ; DATA XREF: sub_4026E0+16C↓o
.text:004025ED                 align 20h
.text:00402600 aUseNoPreserveR db 'use --no-preserve-root to override this failsafe',0
.text:00402600                                         ; DATA XREF: sub_4026E0:loc_402877↓o
.text:00402631 aChangingOwners db 'changing ownership of %s',0
.text:00402631                                         ; DATA XREF: sub_4026E0+3BD↓o
.text:0040264A aChangingGroupO db 'changing group of %s',0
.text:0040264A                                         ; DATA XREF: sub_4026E0:loc_402AD0↓o
.text:0040265F                 align 10h
.text:00402660 aItIsDangerousT db 'it is dangerous to operate recursively on %s (same as %s)',0
.text:00402660                                         ; DATA XREF: sub_4026E0+4BE↓o
.text:0040269A aCannotDerefere db 'cannot dereference %s',0
.text:0040269A                                         ; DATA XREF: sub_4026E0+555↓o
.text:004026B0 aCannotReadDire db 'cannot read directory %s',0
.text:004026B0                                         ; DATA XREF: sub_4026E0+5DC↓o
.text:004026C9 aS              db '%s',0               ; DATA XREF: sub_4026E0+63F↓o
.text:004026CC aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: sub_4026E0+654↓o
.text:004026DD                 align 10h
.text:004026E0
.text:004026E0 ; =============== S U B R O U T I N E =======================================
.text:004026E0
.text:004026E0
.text:004026E0 sub_4026E0      proc near               ; CODE XREF: sub_402490+75↑p
.text:004026E0
.text:004026E0 Code            = dword ptr -0BCh
.text:004026E0 ErrorMessage    = dword ptr -0B8h
.text:004026E0 var_B4          = dword ptr -0B4h
.text:004026E0 var_B0          = dword ptr -0B0h
.text:004026E0 var_AC          = dword ptr -0ACh
.text:004026E0 var_A8          = dword ptr -0A8h
.text:004026E0 var_9B          = byte ptr -9Bh
.text:004026E0 var_9A          = byte ptr -9Ah
.text:004026E0 var_99          = byte ptr -99h
.text:004026E0 var_98          = dword ptr -98h
.text:004026E0 var_94          = dword ptr -94h
.text:004026E0 var_90          = dword ptr -90h
.text:004026E0 var_8C          = dword ptr -8Ch
.text:004026E0 arg_0           = dword ptr  4
.text:004026E0 arg_4           = dword ptr  8
.text:004026E0 arg_8           = dword ptr  0Ch
.text:004026E0 arg_C           = dword ptr  10h
.text:004026E0 arg_10          = dword ptr  14h
.text:004026E0 arg_14          = dword ptr  18h
.text:004026E0 arg_18          = dword ptr  1Ch
.text:004026E0
.text:004026E0                 push    ebp
.text:004026E1                 push    edi
.text:004026E2                 push    esi
.text:004026E3                 push    ebx
.text:004026E4                 sub     esp, 0ACh
.text:004026EA                 mov     ebp, [esp+0BCh+arg_4]
.text:004026F1                 mov     [esp+0BCh+var_99], 1
.text:004026F6                 mov     [esp+0BCh+var_9B], 1
.text:004026FB                 mov     eax, [ebp+14h]
.text:004026FE                 mov     edx, [ebp+18h]
.text:00402701                 mov     [esp+0BCh+var_94], eax
.text:00402705                 movzx   eax, word ptr [ebp+44h]
.text:00402709                 mov     [esp+0BCh+var_90], edx
.text:0040270D                 cmp     eax, 0Ah        ; switch 11 cases
.text:00402710                 ja      short def_402712 ; jumptable 00402712 default case, cases 0,2,3,5,8,9
.text:00402712                 jmp     ds:jpt_402712[eax*4] ; switch jump
.text:00402712 ; ---------------------------------------------------------------------------
.text:00402719                 align 4
.text:0040271C jpt_402712      dd offset def_402712    ; DATA XREF: sub_4026E0+32↑r
.text:0040271C                 dd offset loc_402748    ; jump table for switch statement
.text:0040271C                 dd offset def_402712
.text:0040271C                 dd offset def_402712
.text:0040271C                 dd offset loc_402CB0
.text:0040271C                 dd offset def_402712
.text:0040271C                 dd offset loc_402CFD
.text:0040271C                 dd offset loc_402D13
.text:0040271C                 dd offset def_402712
.text:0040271C                 dd offset def_402712
.text:0040271C                 dd offset loc_402D28
.text:00402748 ; ---------------------------------------------------------------------------
.text:00402748
.text:00402748 loc_402748:                             ; CODE XREF: sub_4026E0+32↑j
.text:00402748                                         ; DATA XREF: sub_4026E0:jpt_402712↑o
.text:00402748                 mov     eax, [esp+0BCh+arg_18] ; jumptable 00402712 case 1
.text:0040274F                 cmp     byte ptr [eax+4], 0
.text:00402753                 jz      short def_402712 ; jumptable 00402712 default case, cases 0,2,3,5,8,9
.text:00402755
.text:00402755 loc_402755:                             ; CODE XREF: sub_4026E0+62E↓j
.text:00402755                 mov     eax, 1
.text:0040275A                 lea     esi, [esi+0]
.text:00402760
.text:00402760 loc_402760:                             ; CODE XREF: sub_4026E0+327↓j
.text:00402760                 add     esp, 0ACh
.text:00402766                 pop     ebx
.text:00402767                 pop     esi
.text:00402768                 pop     edi
.text:00402769                 pop     ebp
.text:0040276A                 retn
.text:0040276A ; ---------------------------------------------------------------------------
.text:0040276B                 align 10h
.text:00402770
.text:00402770 def_402712:                             ; CODE XREF: sub_4026E0+30↑j
.text:00402770                                         ; sub_4026E0+32↑j ...
.text:00402770                 cmp     [esp+0BCh+arg_10], 0FFFFFFFFh ; jumptable 00402712 default case, cases 0,2,3,5,8,9
.text:00402778                 jz      loc_402C70
.text:0040277E
.text:0040277E loc_40277E:                             ; CODE XREF: sub_4026E0+598↓j
.text:0040277E                                         ; sub_4026E0+5A8↓j ...
.text:0040277E                 mov     ecx, [ebp+50h]
.text:00402781                 lea     esi, [ebp+50h]
.text:00402784                 mov     [esp+0BCh+var_98], esi
.text:00402788                 and     ecx, 0F000h
.text:0040278E                 cmp     ecx, 0A000h
.text:00402794                 jz      loc_402BF7
.text:0040279A
.text:0040279A loc_40279A:                             ; CODE XREF: sub_4026E0+522↓j
.text:0040279A                                         ; sub_4026E0+544↓j
.text:0040279A                 xor     eax, eax
.text:0040279C                 cmp     [esp+0BCh+var_99], 0
.text:004027A1                 jz      short loc_4027D0
.text:004027A3                 cmp     [esp+0BCh+arg_10], 0FFFFFFFFh
.text:004027AB                 jz      loc_402BD2
.text:004027B1                 mov     esi, [esp+0BCh+var_98]
.text:004027B5                 mov     edi, [esp+0BCh+arg_10]
.text:004027BC                 cmp     edi, [esi+1Ch]
.text:004027BF                 jz      loc_402BD2
.text:004027C5                 lea     esi, [esi+0]
.text:004027C9                 lea     edi, [edi+0]
.text:004027D0
.text:004027D0 loc_4027D0:                             ; CODE XREF: sub_4026E0+C1↑j
.text:004027D0                                         ; sub_4026E0+50A↓j ...
.text:004027D0                 mov     [esp+0BCh+var_9A], al
.text:004027D4                 test    al, al
.text:004027D6                 jz      loc_402940
.text:004027DC
.text:004027DC loc_4027DC:                             ; CODE XREF: sub_4026E0+5C5↓j
.text:004027DC                 mov     ecx, [esp+0BCh+arg_18]
.text:004027E3                 mov     edi, [ecx+8]
.text:004027E6                 test    edi, edi
.text:004027E8                 jz      loc_4028B0
.text:004027EE                 mov     eax, [esp+0BCh+var_98]
.text:004027F2                 mov     edx, [edi+4]
.text:004027F5                 mov     ebx, [eax+0Ch]
.text:004027F8                 mov     ecx, [eax+8]
.text:004027FB                 mov     eax, [edi]
.text:004027FD                 mov     esi, ebx
.text:004027FF                 xor     esi, edx
.text:00402801                 xor     eax, ecx
.text:00402803                 or      esi, eax
.text:00402805                 jnz     loc_4028B0
.text:0040280B                 mov     ebx, [esp+0BCh+var_98]
.text:0040280F                 mov     eax, [edi+8]
.text:00402812                 mov     ecx, [edi+0Ch]
.text:00402815                 mov     edx, [ebx+14h]
.text:00402818                 mov     esi, [ebx+10h]
.text:0040281B                 mov     edi, edx
.text:0040281D                 xor     edi, ecx
.text:0040281F                 xor     eax, esi
.text:00402821                 or      edi, eax
.text:00402823                 jnz     loc_4028B0
.text:00402829                 cld
.text:0040282A                 mov     esi, [esp+0BCh+var_90]
.text:0040282E                 mov     edi, offset dword_4025A0
.text:00402833                 mov     ecx, 2
.text:00402838                 repe cmpsb
.text:0040283A                 jnz     loc_402B74
.text:00402840                 mov     eax, [esp+0BCh+var_90]
.text:00402844                 mov     [esp+0BCh+Code], eax ; char *
.text:00402847                 call    sub_406510
.text:0040284C                 mov     [esp+0BCh+Code], offset aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:00402853                 mov     edi, eax
.text:00402855                 call    ds:libintl_gettext
.text:0040285B                 mov     [esp+0BCh+var_B0], edi ; char
.text:0040285F                 mov     [esp+0BCh+ErrorMessage], 0 ; ErrorMessage
.text:00402867                 mov     [esp+0BCh+Code], 0 ; Code
.text:0040286E                 mov     [esp+0BCh+var_B4], eax ; char *
.text:00402872                 call    sub_409310
.text:00402877
.text:00402877 loc_402877:                             ; CODE XREF: sub_4026E0+4ED↓j
.text:00402877                 mov     [esp+0BCh+Code], offset aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:0040287E                 call    ds:libintl_gettext
.text:00402884                 mov     [esp+0BCh+ErrorMessage], 0 ; ErrorMessage
.text:0040288C                 mov     [esp+0BCh+Code], 0 ; Code
.text:00402893                 mov     [esp+0BCh+var_B4], eax ; char *
.text:00402897                 call    sub_409310
.text:0040289C                 mov     [esp+0BCh+var_9A], 0
.text:004028A1                 mov     [esp+0BCh+var_99], 0
.text:004028A6                 lea     esi, [esi+0]
.text:004028A9                 lea     edi, [edi+0]
.text:004028B0
.text:004028B0 loc_4028B0:                             ; CODE XREF: sub_4026E0+108↑j
.text:004028B0                                         ; sub_4026E0+125↑j ...
.text:004028B0                 cmp     [esp+0BCh+var_9A], 0
.text:004028B5                 jz      loc_402940
.text:004028BB                 mov     ecx, [esp+0BCh+arg_18]
.text:004028C2                 cmp     byte ptr [ecx+0Ch], 0
.text:004028C6                 jz      loc_402B27
.text:004028CC                 cmp     [esp+0BCh+arg_10], 0FFFFFFFFh
.text:004028D4                 jz      loc_402AE0
.text:004028DA
.text:004028DA loc_4028DA:                             ; CODE XREF: sub_4026E0+408↓j
.text:004028DA                 mov     ecx, [esp+0BCh+arg_14]
.text:004028E1                 mov     esi, [esp+0BCh+arg_10]
.text:004028E8                 mov     ebx, [esp+0BCh+arg_C]
.text:004028EF                 mov     [esp+0BCh+var_A8], ecx ; int
.text:004028F3                 mov     edi, [esp+0BCh+arg_8]
.text:004028FA                 mov     eax, [esp+0BCh+var_98]
.text:004028FE                 mov     [esp+0BCh+var_AC], esi ; int
.text:00402902                 mov     edx, [esp+0BCh+var_94]
.text:00402906                 mov     [esp+0BCh+var_B0], ebx ; int
.text:0040290A                 mov     [esp+0BCh+var_B4], edi ; int
.text:0040290E                 mov     [esp+0BCh+ErrorMessage], eax ; int
.text:00402912                 mov     [esp+0BCh+Code], edx ; char *
.text:00402915                 call    sub_403080
.text:0040291A                 cmp     eax, 4
.text:0040291D                 ja      loc_402A66
.text:00402923                 cmp     eax, 3
.text:00402926                 jnb     loc_402A57
.text:0040292C                 cmp     eax, 2
.text:0040292F                 jz      short loc_402936
.text:00402931
.text:00402931 loc_402931:                             ; CODE XREF: sub_4026E0+389↓j
.text:00402931                 call    abort
.text:00402936 ; ---------------------------------------------------------------------------
.text:00402936
.text:00402936 loc_402936:                             ; CODE XREF: sub_4026E0+24F↑j
.text:00402936                 mov     [esp+0BCh+var_99], 1
.text:0040293B                 nop
.text:0040293C                 lea     esi, [esi+0]
.text:00402940
.text:00402940 loc_402940:                             ; CODE XREF: sub_4026E0+F6↑j
.text:00402940                                         ; sub_4026E0+1D5↑j ...
.text:00402940                 mov     ebx, [esp+0BCh+arg_18]
.text:00402947                 mov     ecx, [ebx]
.text:00402949                 cmp     ecx, 2
.text:0040294C                 jz      loc_4029F5
.text:00402952                 xor     ebx, ebx
.text:00402954                 xor     edx, edx
.text:00402956                 cmp     [esp+0BCh+var_99], 0
.text:0040295B                 jz      short loc_402970
.text:0040295D                 cmp     [esp+0BCh+var_9A], 0
.text:00402962                 jz      short loc_402970
.text:00402964                 mov     edx, 1
.text:00402969                 lea     esi, [esi+0]
.text:00402970
.text:00402970 loc_402970:                             ; CODE XREF: sub_4026E0+27B↑j
.text:00402970                                         ; sub_4026E0+282↑j
.text:00402970                 movzx   esi, [esp+0BCh+var_9B]
.text:00402975                 test    esi, edx
.text:00402977                 jz      short loc_40299D
.text:00402979                 cmp     [esp+0BCh+arg_8], 0FFFFFFFFh
.text:00402981                 jz      loc_402A30
.text:00402987                 mov     edi, [esp+0BCh+var_98]
.text:0040298B                 mov     edx, [esp+0BCh+arg_8]
.text:00402992                 cmp     edx, [edi+1Ch]
.text:00402995                 jz      loc_402A30
.text:0040299B
.text:0040299B loc_40299B:                             ; CODE XREF: sub_4026E0+36C↓j
.text:0040299B                 mov     bl, 1
.text:0040299D
.text:0040299D loc_40299D:                             ; CODE XREF: sub_4026E0+297↑j
.text:0040299D                                         ; sub_4026E0+358↓j ...
.text:0040299D                 test    bl, bl
.text:0040299F                 jnz     short loc_4029A5
.text:004029A1                 test    ecx, ecx
.text:004029A3                 jnz     short loc_4029F5
.text:004029A5
.text:004029A5 loc_4029A5:                             ; CODE XREF: sub_4026E0+2BF↑j
.text:004029A5                 cmp     [esp+0BCh+var_99], 0
.text:004029AA                 mov     edx, 3
.text:004029AF                 jz      short loc_4029D0
.text:004029B1                 cmp     [esp+0BCh+var_9B], 0
.text:004029B6                 mov     edx, 1
.text:004029BB                 jz      short loc_4029D0
.text:004029BD                 xor     bl, 1
.text:004029C0                 movzx   ecx, bl
.text:004029C3                 lea     edx, [ecx+ecx+2]
.text:004029C7                 mov     esi, esi
.text:004029C9                 lea     edi, [edi+0]
.text:004029D0
.text:004029D0 loc_4029D0:                             ; CODE XREF: sub_4026E0+2CF↑j
.text:004029D0                                         ; sub_4026E0+2DB↑j
.text:004029D0                 mov     edi, [esp+0BCh+arg_18]
.text:004029D7                 mov     ebx, [esp+0BCh+var_90]
.text:004029DB                 mov     ecx, [edi+14h]
.text:004029DE                 mov     [esp+0BCh+var_B0], ecx ; char *
.text:004029E2                 mov     esi, [edi+10h]
.text:004029E5                 mov     [esp+0BCh+ErrorMessage], edx ; int
.text:004029E9                 mov     [esp+0BCh+Code], ebx ; Block
.text:004029EC                 mov     [esp+0BCh+var_B4], esi ; char *
.text:004029F0                 call    sub_402F00
.text:004029F5
.text:004029F5 loc_4029F5:                             ; CODE XREF: sub_4026E0+26C↑j
.text:004029F5                                         ; sub_4026E0+2C3↑j
.text:004029F5                 mov     eax, [esp+0BCh+arg_18]
.text:004029FC                 cmp     byte ptr [eax+4], 0
.text:00402A00                 jz      short loc_402A10
.text:00402A02
.text:00402A02 loc_402A02:                             ; CODE XREF: sub_4026E0+34B↓j
.text:00402A02                 movzx   eax, [esp+0BCh+var_99]
.text:00402A07                 jmp     loc_402760
.text:00402A07 ; ---------------------------------------------------------------------------
.text:00402A0C                 align 10h
.text:00402A10
.text:00402A10 loc_402A10:                             ; CODE XREF: sub_4026E0+320↑j
.text:00402A10                 mov     [esp+0BCh+ErrorMessage], ebp
.text:00402A14                 mov     ebp, [esp+0BCh+arg_0]
.text:00402A1B                 mov     [esp+0BCh+var_B4], 4
.text:00402A23                 mov     [esp+0BCh+Code], ebp
.text:00402A26                 call    sub_4049B0
.text:00402A2B                 jmp     short loc_402A02
.text:00402A2B ; ---------------------------------------------------------------------------
.text:00402A2D                 align 10h
.text:00402A30
.text:00402A30 loc_402A30:                             ; CODE XREF: sub_4026E0+2A1↑j
.text:00402A30                                         ; sub_4026E0+2B5↑j
.text:00402A30                 cmp     [esp+0BCh+arg_C], 0FFFFFFFFh
.text:00402A38                 jz      loc_40299D
.text:00402A3E                 mov     esi, [esp+0BCh+var_98]
.text:00402A42                 mov     edi, [esp+0BCh+arg_C]
.text:00402A49                 cmp     edi, [esi+20h]
.text:00402A4C                 jnz     loc_40299B
.text:00402A52                 jmp     loc_40299D
.text:00402A57 ; ---------------------------------------------------------------------------
.text:00402A57
.text:00402A57 loc_402A57:                             ; CODE XREF: sub_4026E0+246↑j
.text:00402A57                 mov     [esp+0BCh+var_9A], 0
.text:00402A5C                 mov     [esp+0BCh+var_99], 0
.text:00402A61                 jmp     loc_402940
.text:00402A66 ; ---------------------------------------------------------------------------
.text:00402A66
.text:00402A66 loc_402A66:                             ; CODE XREF: sub_4026E0+23D↑j
.text:00402A66                 cmp     eax, 5
.text:00402A69                 jnz     loc_402931
.text:00402A6F                 mov     [esp+0BCh+var_99], 0
.text:00402A74
.text:00402A74 loc_402A74:                             ; CODE XREF: sub_4026E0+442↓j
.text:00402A74                 mov     eax, [esp+0BCh+arg_18]
.text:00402A7B                 cmp     byte ptr [eax+0Dh], 0
.text:00402A7F                 jnz     loc_402940
.text:00402A85                 mov     edx, [esp+0BCh+var_90]
.text:00402A89                 mov     [esp+0BCh+Code], edx ; char *
.text:00402A8C                 call    sub_406510
.text:00402A91                 cmp     [esp+0BCh+arg_8], 0FFFFFFFFh
.text:00402A99                 mov     esi, eax
.text:00402A9B                 jz      short loc_402AD0
.text:00402A9D                 mov     [esp+0BCh+Code], offset aChangingOwners ; "changing ownership of %s"
.text:00402AA4
.text:00402AA4 loc_402AA4:                             ; CODE XREF: sub_4026E0+3F7↓j
.text:00402AA4                 call    ds:libintl_gettext
.text:00402AAA                 mov     edi, eax
.text:00402AAC                 call    _errno
.text:00402AB1                 mov     [esp+0BCh+var_B0], esi ; char
.text:00402AB5                 mov     [esp+0BCh+var_B4], edi ; char *
.text:00402AB9                 mov     edi, [eax]
.text:00402ABB                 mov     [esp+0BCh+Code], 0 ; Code
.text:00402AC2                 mov     [esp+0BCh+ErrorMessage], edi ; ErrorMessage
.text:00402AC6                 call    sub_409310
.text:00402ACB                 jmp     loc_402940
.text:00402AD0 ; ---------------------------------------------------------------------------
.text:00402AD0
.text:00402AD0 loc_402AD0:                             ; CODE XREF: sub_4026E0+3BB↑j
.text:00402AD0                 mov     [esp+0BCh+Code], offset aChangingGroupO ; "changing group of %s"
.text:00402AD7                 jmp     short loc_402AA4
.text:00402AD7 ; ---------------------------------------------------------------------------
.text:00402AD9                 align 10h
.text:00402AE0
.text:00402AE0 loc_402AE0:                             ; CODE XREF: sub_4026E0+1F4↑j
.text:00402AE0                 cmp     [esp+0BCh+arg_14], 0FFFFFFFFh
.text:00402AE8                 jnz     loc_4028DA
.text:00402AEE                 mov     ecx, [esp+0BCh+arg_C]
.text:00402AF5                 mov     esi, [esp+0BCh+arg_8]
.text:00402AFC                 mov     ebx, [esp+0BCh+var_94]
.text:00402B00                 mov     [esp+0BCh+var_B4], ecx ; int
.text:00402B04                 mov     [esp+0BCh+ErrorMessage], esi ; int
.text:00402B08                 mov     [esp+0BCh+Code], ebx ; char *
.text:00402B0B                 call    sub_404C50
.text:00402B10                 test    eax, eax
.text:00402B12                 setz    [esp+0BCh+var_99]
.text:00402B17
.text:00402B17 loc_402B17:                             ; CODE XREF: sub_4026E0+483↓j
.text:00402B17                 cmp     [esp+0BCh+var_99], 0
.text:00402B1C                 jnz     loc_402940
.text:00402B22                 jmp     loc_402A74
.text:00402B27 ; ---------------------------------------------------------------------------
.text:00402B27
.text:00402B27 loc_402B27:                             ; CODE XREF: sub_4026E0+1E6↑j
.text:00402B27                 mov     edi, [esp+0BCh+arg_C]
.text:00402B2E                 mov     eax, [esp+0BCh+arg_8]
.text:00402B35                 mov     edx, [esp+0BCh+var_94]
.text:00402B39                 mov     [esp+0BCh+var_B4], edi
.text:00402B3D                 mov     [esp+0BCh+ErrorMessage], eax
.text:00402B41                 mov     [esp+0BCh+Code], edx
.text:00402B44                 call    sub_40CCC0
.text:00402B49                 test    eax, eax
.text:00402B4B                 setz    [esp+0BCh+var_99]
.text:00402B50                 cmp     [esp+0BCh+var_99], 0
.text:00402B55                 jnz     loc_402940
.text:00402B5B                 call    _errno
.text:00402B60                 cmp     dword ptr [eax], 2Dh ; '-'
.text:00402B63                 jnz     short loc_402B17
.text:00402B65                 mov     [esp+0BCh+var_99], 1
.text:00402B6A                 mov     [esp+0BCh+var_9B], 0
.text:00402B6F                 jmp     loc_402940
.text:00402B74 ; ---------------------------------------------------------------------------
.text:00402B74
.text:00402B74 loc_402B74:                             ; CODE XREF: sub_4026E0+15A↑j
.text:00402B74                 mov     [esp+0BCh+ErrorMessage], offset dword_4025A0 ; char *
.text:00402B7C                 mov     [esp+0BCh+Code], 1 ; int
.text:00402B83                 call    sub_4064E0
.text:00402B88                 mov     [esp+0BCh+Code], 0 ; int
.text:00402B8F                 mov     esi, [esp+0BCh+var_90]
.text:00402B93                 mov     ebx, eax
.text:00402B95                 mov     [esp+0BCh+ErrorMessage], esi ; char *
.text:00402B99                 call    sub_4064E0
.text:00402B9E                 mov     [esp+0BCh+Code], offset aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:00402BA5                 mov     edi, eax
.text:00402BA7                 call    ds:libintl_gettext
.text:00402BAD                 mov     [esp+0BCh+var_AC], ebx
.text:00402BB1                 mov     [esp+0BCh+var_B0], edi ; char
.text:00402BB5                 mov     [esp+0BCh+ErrorMessage], 0 ; ErrorMessage
.text:00402BBD                 mov     [esp+0BCh+var_B4], eax ; char *
.text:00402BC1                 mov     [esp+0BCh+Code], 0 ; Code
.text:00402BC8                 call    sub_409310
.text:00402BCD                 jmp     loc_402877
.text:00402BD2 ; ---------------------------------------------------------------------------
.text:00402BD2
.text:00402BD2 loc_402BD2:                             ; CODE XREF: sub_4026E0+CB↑j
.text:00402BD2                                         ; sub_4026E0+DF↑j
.text:00402BD2                 cmp     [esp+0BCh+arg_14], 0FFFFFFFFh
.text:00402BDA                 jz      short loc_402BF0
.text:00402BDC                 mov     ebx, [esp+0BCh+var_98]
.text:00402BE0                 mov     edx, [esp+0BCh+arg_14]
.text:00402BE7                 cmp     edx, [ebx+20h]
.text:00402BEA                 jnz     loc_4027D0
.text:00402BF0
.text:00402BF0 loc_402BF0:                             ; CODE XREF: sub_4026E0+4FA↑j
.text:00402BF0                 mov     al, 1
.text:00402BF2                 jmp     loc_4027D0
.text:00402BF7 ; ---------------------------------------------------------------------------
.text:00402BF7
.text:00402BF7 loc_402BF7:                             ; CODE XREF: sub_4026E0+B4↑j
.text:00402BF7                 mov     edi, [esp+0BCh+arg_18]
.text:00402BFE                 cmp     byte ptr [edi+0Ch], 0
.text:00402C02                 jz      loc_40279A
.text:00402C08                 mov     edx, [esp+0BCh+var_94]
.text:00402C0C                 lea     edi, [esp+0BCh+var_8C]
.text:00402C10                 mov     [esp+0BCh+ErrorMessage], edi ; int
.text:00402C14                 mov     [esp+0BCh+Code], edx ; char *
.text:00402C17                 call    sub_40C330
.text:00402C1C                 test    eax, eax
.text:00402C1E                 jnz     short loc_402C29
.text:00402C20
.text:00402C20 loc_402C20:                             ; CODE XREF: sub_4026E0+58A↓j
.text:00402C20                 mov     [esp+0BCh+var_98], edi
.text:00402C24                 jmp     loc_40279A
.text:00402C29 ; ---------------------------------------------------------------------------
.text:00402C29
.text:00402C29 loc_402C29:                             ; CODE XREF: sub_4026E0+53E↑j
.text:00402C29                 mov     ecx, [esp+0BCh+var_90]
.text:00402C2D                 mov     [esp+0BCh+Code], ecx ; char *
.text:00402C30                 call    sub_406510
.text:00402C35                 mov     [esp+0BCh+Code], offset aCannotDerefere ; "cannot dereference %s"
.text:00402C3C                 mov     esi, eax
.text:00402C3E                 call    ds:libintl_gettext
.text:00402C44                 mov     ebx, eax
.text:00402C46                 call    _errno
.text:00402C4B                 mov     [esp+0BCh+var_B0], esi ; char
.text:00402C4F                 mov     [esp+0BCh+var_B4], ebx ; char *
.text:00402C53                 mov     ebx, [eax]
.text:00402C55                 mov     [esp+0BCh+Code], 0 ; Code
.text:00402C5C                 mov     [esp+0BCh+ErrorMessage], ebx ; ErrorMessage
.text:00402C60                 call    sub_409310
.text:00402C65                 mov     [esp+0BCh+var_99], 0
.text:00402C6A                 jmp     short loc_402C20
.text:00402C6A ; ---------------------------------------------------------------------------
.text:00402C6C                 align 10h
.text:00402C70
.text:00402C70 loc_402C70:                             ; CODE XREF: sub_4026E0+98↑j
.text:00402C70                 cmp     [esp+0BCh+arg_14], 0FFFFFFFFh
.text:00402C78                 jnz     loc_40277E
.text:00402C7E                 mov     edx, [esp+0BCh+arg_18]
.text:00402C85                 cmp     dword ptr [edx], 2
.text:00402C88                 jnz     loc_40277E
.text:00402C8E                 mov     eax, [edx+8]
.text:00402C91                 test    eax, eax
.text:00402C93                 jnz     loc_40277E
.text:00402C99                 mov     [esp+0BCh+var_9A], 1
.text:00402C9E                 lea     ebx, [ebp+50h]
.text:00402CA1                 mov     [esp+0BCh+var_98], ebx
.text:00402CA5                 jmp     loc_4027DC
.text:00402CA5 ; ---------------------------------------------------------------------------
.text:00402CAA                 align 10h
.text:00402CB0
.text:00402CB0 loc_402CB0:                             ; CODE XREF: sub_4026E0+32↑j
.text:00402CB0                                         ; DATA XREF: sub_4026E0:jpt_402712↑o
.text:00402CB0                 mov     edi, [esp+0BCh+var_90] ; jumptable 00402712 case 4
.text:00402CB4                 mov     [esp+0BCh+Code], edi ; char *
.text:00402CB7                 call    sub_406510
.text:00402CBC                 mov     [esp+0BCh+Code], offset aCannotReadDire ; "cannot read directory %s"
.text:00402CC3
.text:00402CC3 loc_402CC3:                             ; CODE XREF: sub_4026E0+646↓j
.text:00402CC3                                         ; sub_4026E0+65B↓j
.text:00402CC3                 mov     ebx, eax
.text:00402CC5                 call    ds:libintl_gettext
.text:00402CCB                 mov     [esp+0BCh+var_B0], ebx ; char
.text:00402CCF                 mov     [esp+0BCh+var_B4], eax ; char *
.text:00402CD3                 mov     edx, [ebp+1Ch]
.text:00402CD6                 mov     [esp+0BCh+Code], 0 ; Code
.text:00402CDD                 mov     [esp+0BCh+ErrorMessage], edx ; ErrorMessage
.text:00402CE1                 call    sub_409310
.text:00402CE6                 mov     [esp+0BCh+var_99], 0
.text:00402CEB                 mov     [esp+0BCh+var_9A], 0
.text:00402CF0                 mov     [esp+0BCh+var_98], 0
.text:00402CF8                 jmp     loc_402940
.text:00402CFD ; ---------------------------------------------------------------------------
.text:00402CFD
.text:00402CFD loc_402CFD:                             ; CODE XREF: sub_4026E0+32↑j
.text:00402CFD                                         ; DATA XREF: sub_4026E0:jpt_402712↑o
.text:00402CFD                 mov     ecx, [esp+0BCh+arg_18] ; jumptable 00402712 case 6
.text:00402D04                 cmp     byte ptr [ecx+4], 0
.text:00402D08                 jnz     def_402712      ; jumptable 00402712 default case, cases 0,2,3,5,8,9
.text:00402D0E                 jmp     loc_402755
.text:00402D13 ; ---------------------------------------------------------------------------
.text:00402D13
.text:00402D13 loc_402D13:                             ; CODE XREF: sub_4026E0+32↑j
.text:00402D13                                         ; DATA XREF: sub_4026E0:jpt_402712↑o
.text:00402D13                 mov     esi, [esp+0BCh+var_90] ; jumptable 00402712 case 7
.text:00402D17                 mov     [esp+0BCh+Code], esi ; char *
.text:00402D1A                 call    sub_406510
.text:00402D1F                 mov     [esp+0BCh+Code], offset aS ; "%s"
.text:00402D26                 jmp     short loc_402CC3
.text:00402D28 ; ---------------------------------------------------------------------------
.text:00402D28
.text:00402D28 loc_402D28:                             ; CODE XREF: sub_4026E0+32↑j
.text:00402D28                                         ; DATA XREF: sub_4026E0:jpt_402712↑o
.text:00402D28                 mov     ebx, [esp+0BCh+var_90] ; jumptable 00402712 case 10
.text:00402D2C                 mov     [esp+0BCh+Code], ebx ; char *
.text:00402D2F                 call    sub_406510
.text:00402D34                 mov     [esp+0BCh+Code], offset aCannotAccessS ; "cannot access %s"
.text:00402D3B                 jmp     short loc_402CC3
.text:00402D3B sub_4026E0      endp
.text:00402D3B
.text:00402D3B ; ---------------------------------------------------------------------------
.text:00402D3D byte_402D3D     db 3Ah, 0, 90h          ; DATA XREF: sub_402F00+69↓o
.text:00402D40 aChangedOwnersh db 'changed ownership of %s to %s',0Ah,0
.text:00402D40                                         ; DATA XREF: sub_402F00+A2↓o
.text:00402D5F aChangedGroupOf db 'changed group of %s to %s',0Ah,0
.text:00402D5F                                         ; DATA XREF: sub_402F00+EC↓o
.text:00402D7A aNoChangeToOwne db 'no change to ownership of %s',0Ah,0
.text:00402D7A                                         ; DATA XREF: sub_402F00:loc_402FF5↓o
.text:00402D98                 align 10h
.text:00402DA0 aOwnershipOfSRe db 'ownership of %s retained as %s',0Ah,0
.text:00402DA0                                         ; DATA XREF: sub_402F00+109↓o
.text:00402DC0 aGroupOfSRetain db 'group of %s retained as %s',0Ah,0
.text:00402DC0                                         ; DATA XREF: sub_402F00+116↓o
.text:00402DDC aOwnershipOfSRe_0 db 'ownership of %s retained',0Ah,0
.text:00402DDC                                         ; DATA XREF: sub_402F00:loc_40301F↓o
.text:00402DF6                 align 10h
.text:00402E00 aFailedToChange db 'failed to change ownership of %s to %s',0Ah,0
.text:00402E00                                         ; DATA XREF: sub_402F00+12C↓o
.text:00402E28                 align 20h
.text:00402E40 aFailedToChange_0 db 'failed to change group of %s to %s',0Ah,0
.text:00402E40                                         ; DATA XREF: sub_402F00+13C↓o
.text:00402E64                 align 20h
.text:00402E80 aFailedToChange_1 db 'failed to change ownership of %s',0Ah,0
.text:00402E80                                         ; DATA XREF: sub_402F00:loc_403048↓o
.text:00402EA2                 align 20h
.text:00402EC0 aNeitherSymboli db 'neither symbolic link %s nor referent has been changed',0Ah,0
.text:00402EC0                                         ; DATA XREF: sub_402F00+160↓o
.text:00402EF8                 align 10h
.text:00402F00
.text:00402F00 ; =============== S U B R O U T I N E =======================================
.text:00402F00
.text:00402F00
.text:00402F00 ; int __cdecl sub_402F00(void *Block, int, char *, char *)
.text:00402F00 sub_402F00      proc near               ; CODE XREF: sub_4026E0+310↑p
.text:00402F00
.text:00402F00 Str             = dword ptr -2Ch
.text:00402F00 var_28          = dword ptr -28h
.text:00402F00 var_24          = dword ptr -24h
.text:00402F00 var_18          = dword ptr -18h
.text:00402F00 var_14          = dword ptr -14h
.text:00402F00 Block           = dword ptr  4
.text:00402F00 arg_4           = dword ptr  8
.text:00402F00 arg_8           = dword ptr  0Ch
.text:00402F00 arg_C           = dword ptr  10h
.text:00402F00
.text:00402F00                 push    ebp
.text:00402F01                 push    edi
.text:00402F02                 push    esi
.text:00402F03                 push    ebx
.text:00402F04                 sub     esp, 1Ch
.text:00402F07                 mov     esi, [esp+2Ch+arg_4]
.text:00402F0B                 mov     [esp+2Ch+var_18], 0
.text:00402F13                 mov     eax, [esp+2Ch+Block]
.text:00402F17                 mov     ebx, [esp+2Ch+arg_8]
.text:00402F1B                 cmp     esi, 1
.text:00402F1E                 mov     edi, [esp+2Ch+arg_C]
.text:00402F22                 mov     [esp+2Ch+var_14], eax
.text:00402F26                 jz      loc_403054
.text:00402F2C                 test    ebx, ebx
.text:00402F2E                 mov     ebp, edi
.text:00402F30                 jz      short loc_402F86
.text:00402F32                 test    edi, edi
.text:00402F34                 mov     ebp, ebx
.text:00402F36                 jz      short loc_402F86
.text:00402F38                 mov     [esp+2Ch+Str], ebx ; Str
.text:00402F3B                 call    strlen
.text:00402F40                 mov     [esp+2Ch+Str], edi ; Str
.text:00402F43                 mov     ebp, eax
.text:00402F45                 call    strlen
.text:00402F4A                 lea     edx, [eax+ebp+2]
.text:00402F4E                 mov     [esp+2Ch+Str], edx ; size_t
.text:00402F51                 call    sub_406B60
.text:00402F56                 mov     [esp+2Ch+var_18], eax
.text:00402F5A                 mov     [esp+2Ch+var_28], ebx
.text:00402F5E                 mov     [esp+2Ch+Str], eax
.text:00402F61                 call    sub_40CD20
.text:00402F66                 mov     [esp+2Ch+Str], eax
.text:00402F69                 mov     [esp+2Ch+var_28], offset byte_402D3D
.text:00402F71                 call    sub_40CD20
.text:00402F76                 mov     [esp+2Ch+Str], eax
.text:00402F79                 mov     [esp+2Ch+var_28], edi
.text:00402F7D                 call    sub_40CD20
.text:00402F82                 mov     ebp, [esp+2Ch+var_18]
.text:00402F86
.text:00402F86 loc_402F86:                             ; CODE XREF: sub_402F00+30↑j
.text:00402F86                                         ; sub_402F00+36↑j
.text:00402F86                 cmp     esi, 3
.text:00402F89                 jz      loc_403028
.text:00402F8F                 cmp     esi, 3
.text:00402F92                 ja      short loc_403000
.text:00402F94                 cmp     esi, 2
.text:00402F97                 jz      short loc_402F9E
.text:00402F99
.text:00402F99 loc_402F99:                             ; CODE XREF: sub_402F00+103↓j
.text:00402F99                 call    abort
.text:00402F9E ; ---------------------------------------------------------------------------
.text:00402F9E
.text:00402F9E loc_402F9E:                             ; CODE XREF: sub_402F00+97↑j
.text:00402F9E                 test    ebx, ebx
.text:00402FA0                 jz      short loc_402FE8
.text:00402FA2                 mov     [esp+2Ch+Str], offset aChangedOwnersh ; "changed ownership of %s to %s\n"
.text:00402FA9                 lea     esi, [esi+0]
.text:00402FB0
.text:00402FB0 loc_402FB0:                             ; CODE XREF: sub_402F00+F3↓j
.text:00402FB0                                         ; sub_402F00+FC↓j ...
.text:00402FB0                 call    ds:libintl_gettext
.text:00402FB6                 mov     ecx, [esp+2Ch+var_14]
.text:00402FBA                 mov     esi, eax
.text:00402FBC                 mov     [esp+2Ch+Str], ecx ; char *
.text:00402FBF                 call    sub_406510
.text:00402FC4                 mov     [esp+2Ch+var_28], eax
.text:00402FC8                 mov     [esp+2Ch+var_24], ebp
.text:00402FCC                 mov     [esp+2Ch+Str], esi ; Format
.text:00402FCF                 call    printf
.text:00402FD4                 mov     edx, [esp+2Ch+var_18]
.text:00402FD8                 mov     [esp+2Ch+Block], edx ; Block
.text:00402FDC                 add     esp, 1Ch
.text:00402FDF                 pop     ebx
.text:00402FE0                 pop     esi
.text:00402FE1                 pop     edi
.text:00402FE2                 pop     ebp
.text:00402FE3                 jmp     free
.text:00402FE8 ; ---------------------------------------------------------------------------
.text:00402FE8
.text:00402FE8 loc_402FE8:                             ; CODE XREF: sub_402F00+A0↑j
.text:00402FE8                 test    edi, edi
.text:00402FEA                 jz      short loc_402FF5
.text:00402FEC                 mov     [esp+2Ch+Str], offset aChangedGroupOf ; "changed group of %s to %s\n"
.text:00402FF3                 jmp     short loc_402FB0
.text:00402FF5 ; ---------------------------------------------------------------------------
.text:00402FF5
.text:00402FF5 loc_402FF5:                             ; CODE XREF: sub_402F00+EA↑j
.text:00402FF5                 mov     [esp+2Ch+Str], offset aNoChangeToOwne ; "no change to ownership of %s\n"
.text:00402FFC                 jmp     short loc_402FB0
.text:00402FFC ; ---------------------------------------------------------------------------
.text:00402FFE                 align 10h
.text:00403000
.text:00403000 loc_403000:                             ; CODE XREF: sub_402F00+92↑j
.text:00403000                 cmp     esi, 4
.text:00403003                 jnz     short loc_402F99
.text:00403005                 test    ebx, ebx
.text:00403007                 jz      short loc_403012
.text:00403009                 mov     [esp+2Ch+Str], offset aOwnershipOfSRe ; "ownership of %s retained as %s\n"
.text:00403010                 jmp     short loc_402FB0
.text:00403012 ; ---------------------------------------------------------------------------
.text:00403012
.text:00403012 loc_403012:                             ; CODE XREF: sub_402F00+107↑j
.text:00403012                 test    edi, edi
.text:00403014                 jz      short loc_40301F
.text:00403016                 mov     [esp+2Ch+Str], offset aGroupOfSRetain ; "group of %s retained as %s\n"
.text:0040301D                 jmp     short loc_402FB0
.text:0040301F ; ---------------------------------------------------------------------------
.text:0040301F
.text:0040301F loc_40301F:                             ; CODE XREF: sub_402F00+114↑j
.text:0040301F                 mov     [esp+2Ch+Str], offset aOwnershipOfSRe_0 ; "ownership of %s retained\n"
.text:00403026                 jmp     short loc_402FB0
.text:00403028 ; ---------------------------------------------------------------------------
.text:00403028
.text:00403028 loc_403028:                             ; CODE XREF: sub_402F00+89↑j
.text:00403028                 test    ebx, ebx
.text:0040302A                 jz      short loc_403038
.text:0040302C                 mov     [esp+2Ch+Str], offset aFailedToChange ; "failed to change ownership of %s to %s"...
.text:00403033                 jmp     loc_402FB0
.text:00403038 ; ---------------------------------------------------------------------------
.text:00403038
.text:00403038 loc_403038:                             ; CODE XREF: sub_402F00+12A↑j
.text:00403038                 test    edi, edi
.text:0040303A                 jz      short loc_403048
.text:0040303C                 mov     [esp+2Ch+Str], offset aFailedToChange_0 ; "failed to change group of %s to %s\n"
.text:00403043                 jmp     loc_402FB0
.text:00403048 ; ---------------------------------------------------------------------------
.text:00403048
.text:00403048 loc_403048:                             ; CODE XREF: sub_402F00+13A↑j
.text:00403048                 mov     [esp+2Ch+Str], offset aFailedToChange_1 ; "failed to change ownership of %s\n"
.text:0040304F                 jmp     loc_402FB0
.text:00403054 ; ---------------------------------------------------------------------------
.text:00403054
.text:00403054 loc_403054:                             ; CODE XREF: sub_402F00+26↑j
.text:00403054                 mov     [esp+2Ch+Str], eax ; char *
.text:00403057                 call    sub_406510
.text:0040305C                 mov     [esp+2Ch+arg_4], eax
.text:00403060                 mov     [esp+2Ch+Str], offset aNeitherSymboli ; "neither symbolic link %s nor referent h"...
.text:00403067                 call    ds:libintl_gettext
.text:0040306D                 mov     [esp+2Ch+Block], eax ; Format
.text:00403071                 add     esp, 1Ch
.text:00403074                 pop     ebx
.text:00403075                 pop     esi
.text:00403076                 pop     edi
.text:00403077                 pop     ebp
.text:00403078                 jmp     printf
.text:00403078 sub_402F00      endp
.text:00403078
.text:00403078 ; ---------------------------------------------------------------------------
.text:0040307D                 align 10h
.text:00403080
.text:00403080 ; =============== S U B R O U T I N E =======================================
.text:00403080
.text:00403080
.text:00403080 ; int __cdecl sub_403080(char *, int, int, int, int, int)
.text:00403080 sub_403080      proc near               ; CODE XREF: sub_4026E0+235↑p
.text:00403080
.text:00403080 FileName        = dword ptr -9Ch
.text:00403080 OpenFlag        = dword ptr -98h
.text:00403080 var_94          = dword ptr -94h
.text:00403080 var_8C          = byte ptr -8Ch
.text:00403080 var_84          = dword ptr -84h
.text:00403080 var_80          = dword ptr -80h
.text:00403080 var_7C          = dword ptr -7Ch
.text:00403080 var_78          = dword ptr -78h
.text:00403080 var_70          = dword ptr -70h
.text:00403080 var_6C          = dword ptr -6Ch
.text:00403080 arg_0           = dword ptr  4
.text:00403080 arg_4           = dword ptr  8
.text:00403080 arg_8           = dword ptr  0Ch
.text:00403080 arg_C           = dword ptr  10h
.text:00403080 arg_10          = dword ptr  14h
.text:00403080 arg_14          = dword ptr  18h
.text:00403080
.text:00403080                 push    ebp
.text:00403081                 mov     ebp, 2
.text:00403086                 push    edi
.text:00403087                 push    esi
.text:00403088                 push    ebx
.text:00403089                 sub     esp, 8Ch
.text:0040308F                 mov     ebx, [esp+9Ch+arg_0]
.text:00403096                 mov     [esp+9Ch+OpenFlag], 4 ; OpenFlag
.text:0040309E                 mov     [esp+9Ch+FileName], ebx ; FileName
.text:004030A1                 call    _open
.text:004030A6                 test    eax, eax
.text:004030A8                 mov     edi, eax
.text:004030AA                 js      loc_4031B0
.text:004030B0
.text:004030B0 loc_4030B0:                             ; CODE XREF: sub_403080+149↓j
.text:004030B0                 mov     [esp+9Ch+FileName], edi
.text:004030B3                 lea     edx, [esp+9Ch+var_8C]
.text:004030B7                 mov     [esp+9Ch+OpenFlag], edx
.text:004030BB                 call    sub_4095B0
.text:004030C0                 test    eax, eax
.text:004030C2                 jnz     loc_4031A0
.text:004030C8                 mov     edx, [esp+9Ch+arg_4]
.text:004030CF                 mov     eax, [esp+9Ch+var_84]
.text:004030D3                 mov     ebx, [edx+0Ch]
.text:004030D6                 mov     ecx, [edx+8]
.text:004030D9                 mov     edx, [esp+9Ch+var_80]
.text:004030DD                 mov     esi, ebx
.text:004030DF                 xor     eax, ecx
.text:004030E1                 xor     esi, edx
.text:004030E3                 or      esi, eax
.text:004030E5                 jnz     short loc_403106
.text:004030E7                 mov     esi, [esp+9Ch+arg_4]
.text:004030EE                 mov     eax, [esp+9Ch+var_7C]
.text:004030F2                 mov     edx, [esp+9Ch+var_78]
.text:004030F6                 mov     ebx, [esi+14h]
.text:004030F9                 mov     ecx, [esi+10h]
.text:004030FC                 mov     esi, ebx
.text:004030FE                 xor     esi, edx
.text:00403100                 xor     eax, ecx
.text:00403102                 or      esi, eax
.text:00403104                 jz      short loc_403130
.text:00403106
.text:00403106 loc_403106:                             ; CODE XREF: sub_403080+65↑j
.text:00403106                 mov     ebp, 4
.text:0040310B
.text:0040310B loc_40310B:                             ; CODE XREF: sub_403080+C5↓j
.text:0040310B                                         ; sub_403080+DC↓j ...
.text:0040310B                 call    _errno
.text:00403110                 mov     esi, [eax]
.text:00403112                 mov     [esp+9Ch+FileName], edi ; FileHandle
.text:00403115                 call    _close
.text:0040311A                 call    _errno
.text:0040311F                 mov     [eax], esi
.text:00403121                 mov     eax, ebp
.text:00403123
.text:00403123 loc_403123:                             ; CODE XREF: sub_403080+119↓j
.text:00403123                                         ; sub_403080+14F↓j
.text:00403123                 add     esp, 8Ch
.text:00403129                 pop     ebx
.text:0040312A                 pop     esi
.text:0040312B                 pop     edi
.text:0040312C                 pop     ebp
.text:0040312D                 retn
.text:0040312D ; ---------------------------------------------------------------------------
.text:0040312E                 align 10h
.text:00403130
.text:00403130 loc_403130:                             ; CODE XREF: sub_403080+84↑j
.text:00403130                 cmp     [esp+9Ch+arg_10], 0FFFFFFFFh
.text:00403138                 jz      short loc_403147
.text:0040313A                 mov     ecx, [esp+9Ch+arg_10]
.text:00403141                 cmp     ecx, [esp+9Ch+var_70]
.text:00403145                 jnz     short loc_40310B
.text:00403147
.text:00403147 loc_403147:                             ; CODE XREF: sub_403080+B8↑j
.text:00403147                 cmp     [esp+9Ch+arg_14], 0FFFFFFFFh
.text:0040314F                 jz      short loc_40315E
.text:00403151                 mov     ebx, [esp+9Ch+arg_14]
.text:00403158                 cmp     ebx, [esp+9Ch+var_6C]
.text:0040315C                 jnz     short loc_40310B
.text:0040315E
.text:0040315E loc_40315E:                             ; CODE XREF: sub_403080+CF↑j
.text:0040315E                 mov     [esp+9Ch+FileName], edi
.text:00403161                 mov     ebp, [esp+9Ch+arg_8]
.text:00403168                 mov     edx, [esp+9Ch+arg_C]
.text:0040316F                 mov     [esp+9Ch+OpenFlag], ebp
.text:00403173                 mov     ebp, 5
.text:00403178                 mov     [esp+9Ch+var_94], edx
.text:0040317C                 call    sub_40CCF0
.text:00403181                 test    eax, eax
.text:00403183                 jnz     short loc_40310B
.text:00403185                 mov     [esp+9Ch+FileName], edi ; FileHandle
.text:00403188                 call    _close
.text:0040318D                 test    eax, eax
.text:0040318F                 setnz   cl
.text:00403192                 movzx   edi, cl
.text:00403195                 lea     eax, [edi+edi*2+2]
.text:00403199                 jmp     short loc_403123
.text:00403199 ; ---------------------------------------------------------------------------
.text:0040319B                 align 10h
.text:004031A0
.text:004031A0 loc_4031A0:                             ; CODE XREF: sub_403080+42↑j
.text:004031A0                 mov     ebp, 5
.text:004031A5                 jmp     loc_40310B
.text:004031A5 ; ---------------------------------------------------------------------------
.text:004031AA                 align 10h
.text:004031B0
.text:004031B0 loc_4031B0:                             ; CODE XREF: sub_403080+2A↑j
.text:004031B0                 mov     [esp+9Ch+OpenFlag], 5 ; OpenFlag
.text:004031B8                 mov     [esp+9Ch+FileName], ebx ; FileName
.text:004031BB                 call    _open
.text:004031C0                 mov     edi, eax
.text:004031C2                 test    edi, edi
.text:004031C4                 mov     eax, 5
.text:004031C9                 jns     loc_4030B0
.text:004031CF                 jmp     loc_403123
.text:004031CF sub_403080      endp
.text:004031CF
.text:004031CF ; ---------------------------------------------------------------------------
.text:004031D4                 align 10h
.text:004031E0 byte_4031E0     db 0                    ; DATA XREF: sub_4031F0+92↓o
.text:004031E0                                         ; sub_4031F0+E9↓o
.text:004031E1 ; const char FileName[2]
.text:004031E1 FileName        db '.',0                ; DATA XREF: sub_4031F0+180↓o
.text:004031E1                                         ; sub_4031F0+1A5↓o ...
.text:004031E3                 align 10h
.text:004031F0
.text:004031F0 ; =============== S U B R O U T I N E =======================================
.text:004031F0
.text:004031F0
.text:004031F0 sub_4031F0      proc near               ; CODE XREF: sub_404BA0+22↓p
.text:004031F0
.text:004031F0 Size            = dword ptr -3Ch
.text:004031F0 OpenFlag        = dword ptr -38h
.text:004031F0 var_34          = dword ptr -34h
.text:004031F0 var_30          = dword ptr -30h
.text:004031F0 var_2C          = dword ptr -2Ch
.text:004031F0 var_1C          = dword ptr -1Ch
.text:004031F0 var_18          = dword ptr -18h
.text:004031F0 var_14          = dword ptr -14h
.text:004031F0 arg_0           = dword ptr  4
.text:004031F0 arg_4           = dword ptr  8
.text:004031F0 arg_8           = dword ptr  0Ch
.text:004031F0
.text:004031F0                 push    ebp
.text:004031F1                 push    edi
.text:004031F2                 push    esi
.text:004031F3                 push    ebx
.text:004031F4                 sub     esp, 2Ch
.text:004031F7                 mov     ebx, [esp+3Ch+arg_4]
.text:004031FB                 mov     [esp+3Ch+var_1C], 0
.text:00403203                 mov     ebp, [esp+3Ch+arg_0]
.text:00403207                 test    ebx, 0FFFFFE00h
.text:0040320D                 jnz     loc_4034EF
.text:00403213                 mov     [esp+3Ch+Size], 38h ; '8' ; Size
.text:0040321A                 call    malloc
.text:0040321F                 mov     esi, eax
.text:00403221                 xor     eax, eax
.text:00403223                 test    esi, esi
.text:00403225                 jz      loc_403360
.text:0040322B                 cld
.text:0040322C                 mov     eax, [esp+3Ch+var_1C]
.text:00403230                 mov     ecx, 0Eh
.text:00403235                 mov     edi, esi
.text:00403237                 test    bl, 2
.text:0040323A                 rep stosd
.text:0040323C                 mov     [esi+2Ch], ebx
.text:0040323F                 mov     eax, [esp+3Ch+arg_8]
.text:00403243                 mov     [esi+28h], eax
.text:00403246                 jz      short loc_40324E
.text:00403248                 or      ebx, 4
.text:0040324B                 mov     [esi+2Ch], ebx
.text:0040324E
.text:0040324E loc_40324E:                             ; CODE XREF: sub_4031F0+56↑j
.text:0040324E                 mov     [esp+3Ch+Size], ebp
.text:00403251                 call    sub_404830
.text:00403256                 cmp     eax, 400h
.text:0040325B                 mov     edx, 400h
.text:00403260                 ja      loc_4034E0
.text:00403266
.text:00403266 loc_403266:                             ; CODE XREF: sub_4031F0+2FA↓j
.text:00403266                 mov     [esp+3Ch+OpenFlag], edx
.text:0040326A                 mov     [esp+3Ch+Size], esi
.text:0040326D                 call    sub_404730
.text:00403272                 test    al, al
.text:00403274                 jz      loc_4033C2
.text:0040327A                 mov     [esp+3Ch+var_34], 0 ; size_t
.text:00403282                 mov     [esp+3Ch+OpenFlag], offset byte_4031E0 ; void *
.text:0040328A                 mov     [esp+3Ch+Size], esi ; int
.text:0040328D                 call    sub_404670
.text:00403292                 test    eax, eax
.text:00403294                 mov     ebx, eax
.text:00403296                 jz      loc_4033B7
.text:0040329C                 mov     dword ptr [eax+3Ch], 0FFFFFFFFh
.text:004032A3                 mov     eax, [ebp+0]
.text:004032A6                 mov     [esp+3Ch+var_14], 0
.text:004032AE                 mov     [esp+3Ch+var_18], 0
.text:004032B6                 test    eax, eax
.text:004032B8                 jnz     loc_403418
.text:004032BE
.text:004032BE loc_4032BE:                             ; CODE XREF: sub_4031F0+2B0↓j
.text:004032BE                 mov     edi, [esp+3Ch+arg_8]
.text:004032C2                 test    edi, edi
.text:004032C4                 jz      short loc_4032D1
.text:004032C6                 cmp     [esp+3Ch+var_18], 1
.text:004032CB                 ja      loc_4033F7
.text:004032D1
.text:004032D1 loc_4032D1:                             ; CODE XREF: sub_4031F0+D4↑j
.text:004032D1                                         ; sub_4031F0+223↓j
.text:004032D1                 mov     [esp+3Ch+var_34], 0 ; size_t
.text:004032D9                 mov     [esp+3Ch+OpenFlag], offset byte_4031E0 ; void *
.text:004032E1                 mov     [esp+3Ch+Size], esi ; int
.text:004032E4                 call    sub_404670
.text:004032E9                 mov     [esi], eax
.text:004032EB                 test    eax, eax
.text:004032ED                 jz      loc_4033A3
.text:004032F3                 test    byte ptr [esi+2Dh], 1
.text:004032F7                 mov     edi, [esp+3Ch+var_14]
.text:004032FB                 mov     [eax+8], edi
.text:004032FE                 mov     ecx, [esi]
.text:00403300                 mov     word ptr [ecx+44h], 9
.text:00403306                 jz      loc_4033D0
.text:0040330C                 mov     [esp+3Ch+var_2C], offset free
.text:00403314                 mov     [esp+3Ch+var_30], offset sub_4049F0
.text:0040331C                 mov     [esp+3Ch+var_34], offset sub_404A60
.text:00403324                 mov     [esp+3Ch+OpenFlag], 0
.text:0040332C                 mov     [esp+3Ch+Size], 1Fh
.text:00403333                 call    sub_407010
.text:00403338                 mov     [esi+30h], eax
.text:0040333B                 test    eax, eax
.text:0040333D                 jz      short loc_4033A3
.text:0040333F                 mov     [esp+3Ch+Size], 20h ; ' ' ; Size
.text:00403346                 call    malloc
.text:0040334B                 mov     [esi+34h], eax
.text:0040334E
.text:0040334E loc_40334E:                             ; CODE XREF: sub_4031F0+202↓j
.text:0040334E                 test    byte ptr [esi+2Ch], 4
.text:00403352                 jz      short loc_403368
.text:00403354
.text:00403354 loc_403354:                             ; CODE XREF: sub_4031F0+195↓j
.text:00403354                                         ; sub_4031F0+19B↓j
.text:00403354                 mov     eax, esi
.text:00403356                 lea     esi, [esi+0]
.text:00403359                 lea     edi, [edi+0]
.text:00403360
.text:00403360 loc_403360:                             ; CODE XREF: sub_4031F0+35↑j
.text:00403360                                         ; sub_4031F0+1DC↓j
.text:00403360                 add     esp, 2Ch
.text:00403363                 pop     ebx
.text:00403364                 pop     esi
.text:00403365                 pop     edi
.text:00403366                 pop     ebp
.text:00403367                 retn
.text:00403368 ; ---------------------------------------------------------------------------
.text:00403368
.text:00403368 loc_403368:                             ; CODE XREF: sub_4031F0+162↑j
.text:00403368                 mov     [esp+3Ch+OpenFlag], 0 ; OpenFlag
.text:00403370                 mov     [esp+3Ch+Size], offset FileName ; "."
.text:00403377                 call    _open
.text:0040337C                 test    eax, eax
.text:0040337E                 js      short loc_40338D
.text:00403380
.text:00403380 loc_403380:                             ; CODE XREF: sub_4031F0+1B1↓j
.text:00403380                 mov     [esi+1Ch], eax
.text:00403383                 test    eax, eax
.text:00403385                 jns     short loc_403354
.text:00403387                 or      dword ptr [esi+2Ch], 4
.text:0040338B                 jmp     short loc_403354
.text:0040338D ; ---------------------------------------------------------------------------
.text:0040338D
.text:0040338D loc_40338D:                             ; CODE XREF: sub_4031F0+18E↑j
.text:0040338D                 mov     [esp+3Ch+OpenFlag], 1 ; OpenFlag
.text:00403395                 mov     [esp+3Ch+Size], offset FileName ; "."
.text:0040339C                 call    _open
.text:004033A1                 jmp     short loc_403380
.text:004033A3 ; ---------------------------------------------------------------------------
.text:004033A3
.text:004033A3 loc_4033A3:                             ; CODE XREF: sub_4031F0+FD↑j
.text:004033A3                                         ; sub_4031F0+14D↑j ...
.text:004033A3                 mov     ebp, [esp+3Ch+var_14]
.text:004033A7                 mov     [esp+3Ch+Size], ebp ; void *
.text:004033AA                 call    sub_404700
.text:004033AF                 mov     [esp+3Ch+Size], ebx ; Block
.text:004033B2                 call    free
.text:004033B7
.text:004033B7 loc_4033B7:                             ; CODE XREF: sub_4031F0+A6↑j
.text:004033B7                 mov     ebx, [esi+18h]
.text:004033BA                 mov     [esp+3Ch+Size], ebx ; Block
.text:004033BD                 call    free
.text:004033C2
.text:004033C2 loc_4033C2:                             ; CODE XREF: sub_4031F0+84↑j
.text:004033C2                 mov     [esp+3Ch+Size], esi ; Block
.text:004033C5                 call    free
.text:004033CA
.text:004033CA loc_4033CA:                             ; CODE XREF: sub_4031F0+30A↓j
.text:004033CA                 xor     eax, eax
.text:004033CC                 jmp     short loc_403360
.text:004033CC ; ---------------------------------------------------------------------------
.text:004033CE                 align 10h
.text:004033D0
.text:004033D0 loc_4033D0:                             ; CODE XREF: sub_4031F0+116↑j
.text:004033D0                 mov     [esp+3Ch+Size], 20h ; ' ' ; Size
.text:004033D7                 call    malloc
.text:004033DC                 mov     [esi+34h], eax
.text:004033DF                 test    eax, eax
.text:004033E1                 jz      short loc_4033A3
.text:004033E3                 mov     [esp+3Ch+Size], eax
.text:004033E6                 call    sub_406E80
.text:004033EB                 mov     dword ptr [esi+30h], 0
.text:004033F2                 jmp     loc_40334E
.text:004033F7 ; ---------------------------------------------------------------------------
.text:004033F7
.text:004033F7 loc_4033F7:                             ; CODE XREF: sub_4031F0+DB↑j
.text:004033F7                 mov     [esp+3Ch+Size], esi ; int
.text:004033FA                 mov     edx, [esp+3Ch+var_18]
.text:004033FE                 mov     ebp, [esp+3Ch+var_14]
.text:00403402                 mov     [esp+3Ch+var_34], edx ; void *
.text:00403406                 mov     [esp+3Ch+OpenFlag], ebp ; int
.text:0040340A                 call    sub_404590
.text:0040340F                 mov     [esp+3Ch+var_14], eax
.text:00403413                 jmp     loc_4032D1
.text:00403418 ; ---------------------------------------------------------------------------
.text:00403418
.text:00403418 loc_403418:                             ; CODE XREF: sub_4031F0+C8↑j
.text:00403418                                         ; sub_4031F0+2AA↓j
.text:00403418                 mov     [esp+3Ch+Size], eax ; Str
.text:0040341B                 call    strlen
.text:00403420                 test    eax, eax
.text:00403422                 jz      loc_4034CF
.text:00403428                 mov     [esp+3Ch+var_34], eax ; size_t
.text:0040342C                 mov     edx, [ebp+0]
.text:0040342F                 mov     [esp+3Ch+Size], esi ; int
.text:00403432                 mov     [esp+3Ch+OpenFlag], edx ; void *
.text:00403436                 call    sub_404670
.text:0040343B                 test    eax, eax
.text:0040343D                 mov     edi, eax
.text:0040343F                 jz      loc_4033A3
.text:00403445                 mov     dword ptr [eax+3Ch], 0
.text:0040344C                 lea     ecx, [eax+0B8h]
.text:00403452                 mov     edx, [esi+2Ch]
.text:00403455                 mov     [eax+14h], ecx
.text:00403458                 mov     [eax+4], ebx
.text:0040345B                 and     edx, 1
.text:0040345E                 movzx   ecx, dl
.text:00403461                 mov     [esp+3Ch+var_34], ecx
.text:00403465                 mov     [esp+3Ch+OpenFlag], eax
.text:00403469                 mov     [esp+3Ch+Size], esi
.text:0040346C                 call    sub_404440
.text:00403471                 mov     [edi+44h], ax
.text:00403475                 cmp     ax, 5
.text:00403479                 jz      short loc_4034C7
.text:0040347B
.text:0040347B loc_40347B:                             ; CODE XREF: sub_4031F0+2DD↓j
.text:0040347B                 mov     eax, [esp+3Ch+arg_8]
.text:0040347F                 test    eax, eax
.text:00403481                 jz      short loc_4034A5
.text:00403483                 mov     edx, [esp+3Ch+var_14]
.text:00403487                 mov     [esp+3Ch+var_14], edi
.text:0040348B                 mov     [edi+8], edx
.text:0040348E
.text:0040348E loc_40348E:                             ; CODE XREF: sub_4031F0+2CF↓j
.text:0040348E                 inc     [esp+3Ch+var_18]
.text:00403492                 add     ebp, 4
.text:00403495                 mov     eax, [ebp+0]
.text:00403498                 test    eax, eax
.text:0040349A                 jnz     loc_403418
.text:004034A0                 jmp     loc_4032BE
.text:004034A5 ; ---------------------------------------------------------------------------
.text:004034A5
.text:004034A5 loc_4034A5:                             ; CODE XREF: sub_4031F0+291↑j
.text:004034A5                 mov     dword ptr [edi+8], 0
.text:004034AC                 mov     ecx, [esp+3Ch+var_14]
.text:004034B0                 test    ecx, ecx
.text:004034B2                 jz      short loc_4034C1
.text:004034B4                 mov     eax, [esp+3Ch+var_1C]
.text:004034B8                 mov     [eax+8], edi
.text:004034BB
.text:004034BB loc_4034BB:                             ; CODE XREF: sub_4031F0+2D5↓j
.text:004034BB                 mov     [esp+3Ch+var_1C], edi
.text:004034BF                 jmp     short loc_40348E
.text:004034C1 ; ---------------------------------------------------------------------------
.text:004034C1
.text:004034C1 loc_4034C1:                             ; CODE XREF: sub_4031F0+2C2↑j
.text:004034C1                 mov     [esp+3Ch+var_14], edi
.text:004034C5                 jmp     short loc_4034BB
.text:004034C7 ; ---------------------------------------------------------------------------
.text:004034C7
.text:004034C7 loc_4034C7:                             ; CODE XREF: sub_4031F0+289↑j
.text:004034C7                 mov     word ptr [edi+44h], 1
.text:004034CD                 jmp     short loc_40347B
.text:004034CF ; ---------------------------------------------------------------------------
.text:004034CF
.text:004034CF loc_4034CF:                             ; CODE XREF: sub_4031F0+232↑j
.text:004034CF                 call    _errno
.text:004034D4                 mov     dword ptr [eax], 2
.text:004034DA                 jmp     loc_4033A3
.text:004034DA ; ---------------------------------------------------------------------------
.text:004034DF                 align 10h
.text:004034E0
.text:004034E0 loc_4034E0:                             ; CODE XREF: sub_4031F0+70↑j
.text:004034E0                 mov     [esp+3Ch+Size], ebp
.text:004034E3                 call    sub_404830
.text:004034E8                 mov     edx, eax
.text:004034EA                 jmp     loc_403266
.text:004034EF ; ---------------------------------------------------------------------------
.text:004034EF
.text:004034EF loc_4034EF:                             ; CODE XREF: sub_4031F0+1D↑j
.text:004034EF                 call    _errno
.text:004034F4                 mov     dword ptr [eax], 16h
.text:004034FA                 jmp     loc_4033CA
.text:004034FA sub_4031F0      endp
.text:004034FA
.text:004034FA ; ---------------------------------------------------------------------------
.text:004034FF                 align 10h
.text:00403500
.text:00403500 ; =============== S U B R O U T I N E =======================================
.text:00403500
.text:00403500
.text:00403500 ; int __cdecl sub_403500(void *)
.text:00403500 sub_403500      proc near               ; CODE XREF: sub_402490+A4↑p
.text:00403500
.text:00403500 Block           = dword ptr -1Ch
.text:00403500 arg_0           = dword ptr  4
.text:00403500
.text:00403500                 push    edi
.text:00403501                 xor     edi, edi
.text:00403503                 push    esi
.text:00403504                 push    ebx
.text:00403505                 sub     esp, 10h
.text:00403508                 mov     esi, [esp+1Ch+arg_0]
.text:0040350C                 mov     eax, [esi]
.text:0040350E                 test    eax, eax
.text:00403510                 jz      short loc_403545
.text:00403512                 mov     edx, [eax+3Ch]
.text:00403515                 mov     ebx, eax
.text:00403517                 test    edx, edx
.text:00403519                 js      short loc_40353D
.text:0040351B                 nop
.text:0040351C                 lea     esi, [esi+0]
.text:00403520
.text:00403520 loc_403520:                             ; CODE XREF: sub_403500+3B↓j
.text:00403520                 mov     eax, [ebx+8]
.text:00403523                 mov     edx, ebx
.text:00403525                 test    eax, eax
.text:00403527                 jnz     short loc_40352C
.text:00403529                 mov     eax, [ebx+4]
.text:0040352C
.text:0040352C loc_40352C:                             ; CODE XREF: sub_403500+27↑j
.text:0040352C                 mov     [esp+1Ch+Block], edx ; Block
.text:0040352F                 mov     ebx, eax
.text:00403531                 call    free
.text:00403536                 mov     edx, [ebx+3Ch]
.text:00403539                 test    edx, edx
.text:0040353B                 jns     short loc_403520
.text:0040353D
.text:0040353D loc_40353D:                             ; CODE XREF: sub_403500+19↑j
.text:0040353D                 mov     [esp+1Ch+Block], ebx ; Block
.text:00403540                 call    free
.text:00403545
.text:00403545 loc_403545:                             ; CODE XREF: sub_403500+10↑j
.text:00403545                 mov     eax, [esi+4]
.text:00403548                 test    eax, eax
.text:0040354A                 jnz     loc_4035E6
.text:00403550
.text:00403550 loc_403550:                             ; CODE XREF: sub_403500+EE↓j
.text:00403550                 mov     eax, [esi+8]
.text:00403553                 test    eax, eax
.text:00403555                 jnz     loc_4035D9
.text:0040355B
.text:0040355B loc_40355B:                             ; CODE XREF: sub_403500+E1↓j
.text:0040355B                 mov     ecx, [esi+18h]
.text:0040355E                 mov     [esp+1Ch+Block], ecx ; Block
.text:00403561                 call    free
.text:00403566                 test    byte ptr [esi+2Ch], 4
.text:0040356A                 jz      short loc_4035B4
.text:0040356C
.text:0040356C loc_40356C:                             ; CODE XREF: sub_403500+CE↓j
.text:0040356C                 mov     eax, [esi+30h]
.text:0040356F                 test    eax, eax
.text:00403571                 jnz     short loc_4035AA
.text:00403573
.text:00403573 loc_403573:                             ; CODE XREF: sub_403500+B2↓j
.text:00403573                 mov     eax, [esi+34h]
.text:00403576                 test    eax, eax
.text:00403578                 jnz     short loc_4035A0
.text:0040357A
.text:0040357A loc_40357A:                             ; CODE XREF: sub_403500+A8↓j
.text:0040357A                 mov     [esp+1Ch+Block], esi ; Block
.text:0040357D                 call    free
.text:00403582                 xor     eax, eax
.text:00403584                 test    edi, edi
.text:00403586                 jnz     short loc_40358F
.text:00403588
.text:00403588 loc_403588:                             ; CODE XREF: sub_403500+9B↓j
.text:00403588                 add     esp, 10h
.text:0040358B                 pop     ebx
.text:0040358C                 pop     esi
.text:0040358D                 pop     edi
.text:0040358E                 retn
.text:0040358F ; ---------------------------------------------------------------------------
.text:0040358F
.text:0040358F loc_40358F:                             ; CODE XREF: sub_403500+86↑j
.text:0040358F                 call    _errno
.text:00403594                 mov     [eax], edi
.text:00403596                 mov     eax, 0FFFFFFFFh
.text:0040359B                 jmp     short loc_403588
.text:0040359B ; ---------------------------------------------------------------------------
.text:0040359D                 align 10h
.text:004035A0
.text:004035A0 loc_4035A0:                             ; CODE XREF: sub_403500+78↑j
.text:004035A0                 mov     [esp+1Ch+Block], eax ; Block
.text:004035A3                 call    free
.text:004035A8                 jmp     short loc_40357A
.text:004035AA ; ---------------------------------------------------------------------------
.text:004035AA
.text:004035AA loc_4035AA:                             ; CODE XREF: sub_403500+71↑j
.text:004035AA                 mov     [esp+1Ch+Block], eax ; void *
.text:004035AD                 call    sub_4072F0
.text:004035B2                 jmp     short loc_403573
.text:004035B4 ; ---------------------------------------------------------------------------
.text:004035B4
.text:004035B4 loc_4035B4:                             ; CODE XREF: sub_403500+6A↑j
.text:004035B4                 mov     ebx, [esi+1Ch]
.text:004035B7                 mov     [esp+1Ch+Block], ebx
.text:004035BA                 call    sub_406E60
.text:004035BF                 test    eax, eax
.text:004035C1                 jnz     short loc_4035D0
.text:004035C3
.text:004035C3 loc_4035C3:                             ; CODE XREF: sub_403500+D7↓j
.text:004035C3                 mov     edx, [esi+1Ch]
.text:004035C6                 mov     [esp+1Ch+Block], edx ; FileHandle
.text:004035C9                 call    _close
.text:004035CE                 jmp     short loc_40356C
.text:004035D0 ; ---------------------------------------------------------------------------
.text:004035D0
.text:004035D0 loc_4035D0:                             ; CODE XREF: sub_403500+C1↑j
.text:004035D0                 call    _errno
.text:004035D5                 mov     edi, [eax]
.text:004035D7                 jmp     short loc_4035C3
.text:004035D9 ; ---------------------------------------------------------------------------
.text:004035D9
.text:004035D9 loc_4035D9:                             ; CODE XREF: sub_403500+55↑j
.text:004035D9                 mov     [esp+1Ch+Block], eax ; Block
.text:004035DC                 call    free
.text:004035E1                 jmp     loc_40355B
.text:004035E6 ; ---------------------------------------------------------------------------
.text:004035E6
.text:004035E6 loc_4035E6:                             ; CODE XREF: sub_403500+4A↑j
.text:004035E6                 mov     [esp+1Ch+Block], eax ; void *
.text:004035E9                 call    sub_404700
.text:004035EE                 jmp     loc_403550
.text:004035EE sub_403500      endp
.text:004035EE
.text:004035EE ; ---------------------------------------------------------------------------
.text:004035F3 ; const char byte_4035F3
.text:004035F3 byte_4035F3     db 2Eh                  ; DATA XREF: sub_403600+399↓o
.text:004035F3                                         ; sub_403DE0:loc_404310↓o
.text:004035F4                 dd 768D002Eh, 27BC8D00h, 0
.text:00403600
.text:00403600 ; =============== S U B R O U T I N E =======================================
.text:00403600
.text:00403600
.text:00403600 ; int __cdecl sub_403600(void *)
.text:00403600 sub_403600      proc near               ; CODE XREF: sub_402490+43↑p
.text:00403600
.text:00403600 Block           = dword ptr -4Ch
.text:00403600 Src             = dword ptr -48h
.text:00403600 Size            = dword ptr -44h
.text:00403600 FileName        = dword ptr -40h
.text:00403600 var_3C          = dword ptr -3Ch
.text:00403600 var_38          = dword ptr -38h
.text:00403600 var_34          = dword ptr -34h
.text:00403600 var_30          = dword ptr -30h
.text:00403600 arg_0           = dword ptr  4
.text:00403600
.text:00403600                 push    ebp
.text:00403601                 push    edi
.text:00403602                 push    esi
.text:00403603                 push    ebx
.text:00403604                 sub     esp, 3Ch
.text:00403607                 mov     eax, [esp+4Ch+arg_0]
.text:0040360B                 mov     ebp, [eax]
.text:0040360D                 test    ebp, ebp
.text:0040360F                 jz      loc_403850
.text:00403615                 mov     edi, [eax+2Ch]
.text:00403618                 test    edi, 2000h
.text:0040361E                 jnz     loc_403850
.text:00403624                 movzx   ecx, word ptr [ebp+48h]
.text:00403628                 mov     esi, ebp
.text:0040362A                 mov     word ptr [ebp+48h], 3
.text:00403630                 cmp     cx, 1
.text:00403634                 jz      loc_403C60
.text:0040363A                 cmp     cx, 2
.text:0040363E                 jz      loc_403BAF
.text:00403644                 mov     edx, [ebp+44h]
.text:00403647
.text:00403647 loc_403647:                             ; CODE XREF: sub_403600+5B9↓j
.text:00403647                 dec     dx
.text:00403649                 jz      loc_403A00
.text:0040364F                 nop
.text:00403650
.text:00403650 loc_403650:                             ; CODE XREF: sub_403600+78↓j
.text:00403650                 mov     eax, esi
.text:00403652                 mov     esi, [esi+8]
.text:00403655                 test    esi, esi
.text:00403657                 jz      loc_403857
.text:0040365D                 mov     [esp+4Ch+Block], eax ; Block
.text:00403660                 call    free
.text:00403665                 mov     ebx, [esi+3Ch]
.text:00403668                 test    ebx, ebx
.text:0040366A                 jz      loc_403776
.text:00403670                 movzx   eax, word ptr [esi+48h]
.text:00403674                 cmp     ax, 4
.text:00403678                 jz      short loc_403650
.text:0040367A                 cmp     ax, 2
.text:0040367E                 jz      short loc_4036ED
.text:00403680
.text:00403680 loc_403680:                             ; CODE XREF: sub_403600+113↓j
.text:00403680                                         ; sub_403600+527↓j
.text:00403680                 mov     ebp, [esi+4]
.text:00403683                 mov     eax, [esp+4Ch+arg_0]
.text:00403687                 mov     edi, [ebp+24h]
.text:0040368A                 mov     ecx, [eax+18h]
.text:0040368D                 mov     edx, [ebp+18h]
.text:00403690                 add     ecx, edi
.text:00403692                 cmp     byte ptr [edi+edx-1], 2Fh ; '/'
.text:00403697                 jz      short loc_4036EA
.text:00403699
.text:00403699 loc_403699:                             ; CODE XREF: sub_403600+EB↓j
.text:00403699                 mov     byte ptr [ecx], 2Fh ; '/'
.text:0040369C                 lea     ebx, [esi+0B8h]
.text:004036A2                 mov     edi, [esi+40h]
.text:004036A5                 mov     [esp+4Ch+Src], ebx ; Src
.text:004036A9                 inc     ecx
.text:004036AA                 mov     [esp+4Ch+Block], ecx ; void *
.text:004036AD                 inc     edi
.text:004036AE                 mov     [esp+4Ch+Size], edi ; Size
.text:004036B2                 call    memmove
.text:004036B7                 cmp     word ptr [esi+44h], 1
.text:004036BC                 jz      short loc_4036D8
.text:004036BE
.text:004036BE loc_4036BE:                             ; CODE XREF: sub_403600+E8↓j
.text:004036BE                 mov     ebp, [esp+4Ch+arg_0]
.text:004036C2                 mov     [ebp+0], esi
.text:004036C5
.text:004036C5 loc_4036C5:                             ; CODE XREF: sub_403600+21C↓j
.text:004036C5                                         ; sub_403600+67C↓j
.text:004036C5                 mov     eax, esi
.text:004036C7                 mov     esi, esi
.text:004036C9                 lea     edi, [edi+0]
.text:004036D0
.text:004036D0 loc_4036D0:                             ; CODE XREF: sub_403600+252↓j
.text:004036D0                                         ; sub_403600+2C1↓j ...
.text:004036D0                 add     esp, 3Ch
.text:004036D3                 pop     ebx
.text:004036D4                 pop     esi
.text:004036D5                 pop     edi
.text:004036D6                 pop     ebp
.text:004036D7                 retn
.text:004036D8 ; ---------------------------------------------------------------------------
.text:004036D8
.text:004036D8 loc_4036D8:                             ; CODE XREF: sub_403600+BC↑j
.text:004036D8                 mov     [esp+4Ch+Src], esi ; int
.text:004036DC                 mov     ecx, [esp+4Ch+arg_0]
.text:004036E0                 mov     [esp+4Ch+Block], ecx ; Block
.text:004036E3                 call    sub_404A90
.text:004036E8                 jmp     short loc_4036BE
.text:004036EA ; ---------------------------------------------------------------------------
.text:004036EA
.text:004036EA loc_4036EA:                             ; CODE XREF: sub_403600+97↑j
.text:004036EA                 dec     ecx
.text:004036EB                 jmp     short loc_403699
.text:004036ED ; ---------------------------------------------------------------------------
.text:004036ED
.text:004036ED loc_4036ED:                             ; CODE XREF: sub_403600+7E↑j
.text:004036ED                 mov     [esp+4Ch+Size], 1
.text:004036F5                 mov     ecx, [esp+4Ch+arg_0]
.text:004036F9                 mov     [esp+4Ch+Src], esi
.text:004036FD                 mov     [esp+4Ch+Block], ecx
.text:00403700                 call    sub_404440
.text:00403705                 mov     [esi+44h], ax
.text:00403709                 dec     ax
.text:0040370B                 jz      short loc_403718
.text:0040370D
.text:0040370D loc_40370D:                             ; CODE XREF: sub_403600+120↓j
.text:0040370D                                         ; sub_403600+14C↓j ...
.text:0040370D                 mov     word ptr [esi+48h], 3
.text:00403713                 jmp     loc_403680
.text:00403718 ; ---------------------------------------------------------------------------
.text:00403718
.text:00403718 loc_403718:                             ; CODE XREF: sub_403600+10B↑j
.text:00403718                 mov     ebx, [esp+4Ch+arg_0]
.text:0040371C                 test    byte ptr [ebx+2Ch], 4
.text:00403720                 jnz     short loc_40370D
.text:00403722                 mov     [esp+4Ch+Src], 0 ; OpenFlag
.text:0040372A                 mov     [esp+4Ch+Block], offset FileName ; "."
.text:00403731                 call    _open
.text:00403736                 test    eax, eax
.text:00403738                 js      short loc_403760
.text:0040373A
.text:0040373A loc_40373A:                             ; CODE XREF: sub_403600+174↓j
.text:0040373A                 mov     [esi+20h], eax
.text:0040373D                 test    eax, eax
.text:0040373F                 js      short loc_40374E
.text:00403741                 movzx   ebp, word ptr [esi+46h]
.text:00403745                 or      ebp, 2
.text:00403748                 mov     [esi+46h], bp
.text:0040374C                 jmp     short loc_40370D
.text:0040374E ; ---------------------------------------------------------------------------
.text:0040374E
.text:0040374E loc_40374E:                             ; CODE XREF: sub_403600+13F↑j
.text:0040374E                 call    _errno
.text:00403753                 mov     word ptr [esi+44h], 7
.text:00403759                 mov     edi, [eax]
.text:0040375B                 mov     [esi+1Ch], edi
.text:0040375E                 jmp     short loc_40370D
.text:00403760 ; ---------------------------------------------------------------------------
.text:00403760
.text:00403760 loc_403760:                             ; CODE XREF: sub_403600+138↑j
.text:00403760                 mov     [esp+4Ch+Src], 1 ; OpenFlag
.text:00403768                 mov     [esp+4Ch+Block], offset FileName ; "."
.text:0040376F                 call    _open
.text:00403774                 jmp     short loc_40373A
.text:00403776 ; ---------------------------------------------------------------------------
.text:00403776
.text:00403776 loc_403776:                             ; CODE XREF: sub_403600+6A↑j
.text:00403776                 mov     eax, [esp+4Ch+arg_0]
.text:0040377A                 test    byte ptr [eax+2Ch], 4
.text:0040377E                 jnz     short loc_403793
.text:00403780                 mov     ecx, [eax+1Ch]
.text:00403783                 mov     [esp+4Ch+Block], ecx
.text:00403786                 call    sub_406E60
.text:0040378B                 test    eax, eax
.text:0040378D                 jnz     loc_403837
.text:00403793
.text:00403793 loc_403793:                             ; CODE XREF: sub_403600+17E↑j
.text:00403793                 mov     ebp, [esi+40h]
.text:00403796                 mov     eax, [esp+4Ch+arg_0]
.text:0040379A                 mov     [esi+24h], ebp
.text:0040379D                 inc     ebp
.text:0040379E                 mov     [esp+4Ch+Size], ebp ; Size
.text:004037A2                 lea     ebp, [esi+0B8h]
.text:004037A8                 mov     [esp+4Ch+Src], ebp ; Src
.text:004037AC                 mov     edx, [eax+18h]
.text:004037AF                 mov     [esp+4Ch+Block], edx ; void *
.text:004037B2                 call    memmove
.text:004037B7                 mov     [esp+4Ch+Src], 2Fh ; '/' ; Ch
.text:004037BF                 mov     [esp+4Ch+Block], ebp ; Str
.text:004037C2                 call    strrchr
.text:004037C7                 test    eax, eax
.text:004037C9                 mov     edi, eax
.text:004037CB                 jz      short loc_4037F2
.text:004037CD                 cmp     eax, ebp
.text:004037CF                 jz      short loc_40382F
.text:004037D1
.text:004037D1 loc_4037D1:                             ; CODE XREF: sub_403600+235↓j
.text:004037D1                 inc     edi
.text:004037D2                 mov     [esp+4Ch+Block], edi ; Str
.text:004037D5                 call    strlen
.text:004037DA                 mov     [esp+4Ch+Src], edi ; Src
.text:004037DE                 mov     ebx, eax
.text:004037E0                 lea     ecx, [eax+1]
.text:004037E3                 mov     [esp+4Ch+Size], ecx ; Size
.text:004037E7                 mov     [esp+4Ch+Block], ebp ; void *
.text:004037EA                 call    memmove
.text:004037EF                 mov     [esi+40h], ebx
.text:004037F2
.text:004037F2 loc_4037F2:                             ; CODE XREF: sub_403600+1CB↑j
.text:004037F2                                         ; sub_403600+233↓j
.text:004037F2                 cmp     word ptr [esi+44h], 1
.text:004037F7                 mov     eax, [esp+4Ch+arg_0]
.text:004037FB                 mov     edi, [esi+30h]
.text:004037FE                 mov     ebx, [esi+34h]
.text:00403801                 mov     ebp, [eax+18h]
.text:00403804                 mov     ecx, [esp+4Ch+arg_0]
.text:00403808                 mov     [esi+18h], ebp
.text:0040380B                 mov     [esi+14h], ebp
.text:0040380E                 mov     [ecx+10h], edi
.text:00403811                 mov     [ecx+14h], ebx
.text:00403814                 jz      short loc_403821
.text:00403816
.text:00403816 loc_403816:                             ; CODE XREF: sub_403600+22D↓j
.text:00403816                 mov     edx, [esp+4Ch+arg_0]
.text:0040381A                 mov     [edx], esi
.text:0040381C                 jmp     loc_4036C5
.text:00403821 ; ---------------------------------------------------------------------------
.text:00403821
.text:00403821 loc_403821:                             ; CODE XREF: sub_403600+214↑j
.text:00403821                 mov     [esp+4Ch+Src], esi ; int
.text:00403825                 mov     [esp+4Ch+Block], ecx ; Block
.text:00403828                 call    sub_404A90
.text:0040382D                 jmp     short loc_403816
.text:0040382F ; ---------------------------------------------------------------------------
.text:0040382F
.text:0040382F loc_40382F:                             ; CODE XREF: sub_403600+1CF↑j
.text:0040382F                 cmp     byte ptr [ebp+1], 0
.text:00403833                 jz      short loc_4037F2
.text:00403835                 jmp     short loc_4037D1
.text:00403837 ; ---------------------------------------------------------------------------
.text:00403837
.text:00403837 loc_403837:                             ; CODE XREF: sub_403600+18D↑j
.text:00403837                 mov     esi, [esp+4Ch+arg_0]
.text:0040383B                 or      dword ptr [esi+2Ch], 2000h
.text:00403842                 lea     esi, [esi+0]
.text:00403849                 lea     edi, [edi+0]
.text:00403850
.text:00403850 loc_403850:                             ; CODE XREF: sub_403600+F↑j
.text:00403850                                         ; sub_403600+1E↑j ...
.text:00403850                 xor     eax, eax
.text:00403852                 jmp     loc_4036D0
.text:00403857 ; ---------------------------------------------------------------------------
.text:00403857
.text:00403857 loc_403857:                             ; CODE XREF: sub_403600+57↑j
.text:00403857                 mov     esi, [eax+4]
.text:0040385A                 mov     [esp+4Ch+Block], eax ; Block
.text:0040385D                 call    free
.text:00403862                 cmp     dword ptr [esi+3Ch], 0FFFFFFFFh
.text:00403866                 jz      loc_4039D7
.text:0040386C                 mov     ebx, [esp+4Ch+arg_0]
.text:00403870                 mov     edi, [esi+24h]
.text:00403873                 mov     eax, [ebx+18h]
.text:00403876                 mov     byte ptr [edi+eax], 0
.text:0040387A                 mov     edx, [esi+3Ch]
.text:0040387D                 test    edx, edx
.text:0040387F                 jnz     loc_403930
.text:00403885                 test    byte ptr [ebx+2Ch], 4
.text:00403889                 jz      short loc_403907
.text:0040388B
.text:0040388B loc_40388B:                             ; CODE XREF: sub_403600+314↓j
.text:0040388B                                         ; sub_403600+32B↓j ...
.text:0040388B                 mov     ebp, [esi+1Ch]
.text:0040388E                 xor     eax, eax
.text:00403890                 mov     ebx, 7
.text:00403895                 test    ebp, ebp
.text:00403897                 setz    al
.text:0040389A                 sub     ebx, eax
.text:0040389C                 test    ebp, ebp
.text:0040389E                 mov     [esi+44h], bx
.text:004038A2                 jnz     short loc_4038AF
.text:004038A4                 mov     edx, [esp+4Ch+arg_0]
.text:004038A8                 mov     ebx, [edx+30h]
.text:004038AB                 test    ebx, ebx
.text:004038AD                 jnz     short loc_4038C6
.text:004038AF
.text:004038AF loc_4038AF:                             ; CODE XREF: sub_403600+2A2↑j
.text:004038AF                                         ; sub_403600+305↓j
.text:004038AF                 mov     ebx, [esp+4Ch+arg_0]
.text:004038B3                 xor     eax, eax
.text:004038B5                 test    byte ptr [ebx+2Dh], 20h
.text:004038B9                 mov     [ebx], esi
.text:004038BB                 setnz   al
.text:004038BE                 dec     eax
.text:004038BF                 and     eax, esi
.text:004038C1                 jmp     loc_4036D0
.text:004038C6 ; ---------------------------------------------------------------------------
.text:004038C6
.text:004038C6 loc_4038C6:                             ; CODE XREF: sub_403600+2AD↑j
.text:004038C6                 lea     edi, [esi+50h]
.text:004038C9                 mov     ebp, [edi+10h]
.text:004038CC                 mov     ecx, [edi+14h]
.text:004038CF                 mov     [esp+4Ch+var_3C], ebp
.text:004038D3                 mov     [esp+4Ch+var_38], ecx
.text:004038D7                 mov     edx, [edi+8]
.text:004038DA                 mov     ebp, [edi+0Ch]
.text:004038DD                 mov     [esp+4Ch+Block], ebx
.text:004038E0                 lea     edi, [esp+4Ch+var_3C]
.text:004038E4                 mov     [esp+4Ch+var_34], edx
.text:004038E8                 mov     [esp+4Ch+var_30], ebp
.text:004038EC                 mov     [esp+4Ch+Src], edi
.text:004038F0                 call    sub_407C30
.text:004038F5                 test    eax, eax
.text:004038F7                 jz      loc_403C81
.text:004038FD                 mov     [esp+4Ch+Block], eax ; Block
.text:00403900                 call    free
.text:00403905                 jmp     short loc_4038AF
.text:00403907 ; ---------------------------------------------------------------------------
.text:00403907
.text:00403907 loc_403907:                             ; CODE XREF: sub_403600+289↑j
.text:00403907                 mov     ecx, [ebx+1Ch]
.text:0040390A                 mov     [esp+4Ch+Block], ecx
.text:0040390D                 call    sub_406E60
.text:00403912                 test    eax, eax
.text:00403914                 jz      loc_40388B
.text:0040391A                 call    _errno
.text:0040391F                 mov     ebp, [eax]
.text:00403921                 mov     [esi+1Ch], ebp
.text:00403924
.text:00403924 loc_403924:                             ; CODE XREF: sub_403600+3D2↓j
.text:00403924                 or      dword ptr [ebx+2Ch], 2000h
.text:0040392B                 jmp     loc_40388B
.text:00403930 ; ---------------------------------------------------------------------------
.text:00403930
.text:00403930 loc_403930:                             ; CODE XREF: sub_403600+27F↑j
.text:00403930                 movzx   eax, word ptr [esi+46h]
.text:00403934                 test    al, 2
.text:00403936                 jz      short loc_403991
.text:00403938                 mov     ebx, [esp+4Ch+arg_0]
.text:0040393C                 test    byte ptr [ebx+2Ch], 4
.text:00403940                 jz      short loc_403952
.text:00403942
.text:00403942 loc_403942:                             ; CODE XREF: sub_403600+35F↓j
.text:00403942                                         ; sub_403600+38F↓j
.text:00403942                 mov     edx, [esi+20h]
.text:00403945                 mov     [esp+4Ch+Block], edx ; FileHandle
.text:00403948                 call    _close
.text:0040394D                 jmp     loc_40388B
.text:00403952 ; ---------------------------------------------------------------------------
.text:00403952
.text:00403952 loc_403952:                             ; CODE XREF: sub_403600+340↑j
.text:00403952                 mov     edx, [esi+20h]
.text:00403955                 mov     [esp+4Ch+Block], edx
.text:00403958                 call    sub_406E60
.text:0040395D                 test    eax, eax
.text:0040395F                 jz      short loc_403942
.text:00403961                 call    _errno
.text:00403966                 mov     ebx, [esi+20h]
.text:00403969                 mov     ebp, [eax]
.text:0040396B                 mov     [esp+4Ch+Block], ebx ; FileHandle
.text:0040396E                 call    _close
.text:00403973                 call    _errno
.text:00403978                 mov     [eax], ebp
.text:0040397A                 call    _errno
.text:0040397F                 mov     ecx, [eax]
.text:00403981                 mov     edi, [esp+4Ch+arg_0]
.text:00403985                 mov     [esi+1Ch], ecx
.text:00403988                 or      dword ptr [edi+2Ch], 2000h
.text:0040398F                 jmp     short loc_403942
.text:00403991 ; ---------------------------------------------------------------------------
.text:00403991
.text:00403991 loc_403991:                             ; CODE XREF: sub_403600+336↑j
.text:00403991                 test    al, 1
.text:00403993                 jnz     loc_40388B
.text:00403999                 mov     [esp+4Ch+FileName], offset byte_4035F3 ; FileName
.text:004039A1                 mov     eax, [esp+4Ch+arg_0]
.text:004039A5                 mov     [esp+4Ch+Size], 0FFFFFFFFh ; int
.text:004039AD                 mov     edi, [esi+4]
.text:004039B0                 mov     [esp+4Ch+Block], eax ; int
.text:004039B3                 mov     [esp+4Ch+Src], edi ; int
.text:004039B7                 call    sub_404870
.text:004039BC                 test    eax, eax
.text:004039BE                 jz      loc_40388B
.text:004039C4                 call    _errno
.text:004039C9                 mov     ecx, [eax]
.text:004039CB                 mov     ebx, [esp+4Ch+arg_0]
.text:004039CF                 mov     [esi+1Ch], ecx
.text:004039D2                 jmp     loc_403924
.text:004039D7 ; ---------------------------------------------------------------------------
.text:004039D7
.text:004039D7 loc_4039D7:                             ; CODE XREF: sub_403600+266↑j
.text:004039D7                 mov     [esp+4Ch+Block], esi ; Block
.text:004039DA                 call    free
.text:004039DF                 call    _errno
.text:004039E4                 mov     dword ptr [eax], 0
.text:004039EA                 mov     esi, [esp+4Ch+arg_0]
.text:004039EE                 mov     dword ptr [esi], 0
.text:004039F4                 jmp     loc_403850
.text:004039F4 ; ---------------------------------------------------------------------------
.text:004039F9                 align 10h
.text:00403A00
.text:00403A00 loc_403A00:                             ; CODE XREF: sub_403600+49↑j
.text:00403A00                 cmp     cx, 4
.text:00403A04                 jz      short loc_403A30
.text:00403A06                 test    edi, 40h
.text:00403A0C                 jz      loc_403ABF
.text:00403A12                 mov     esi, [esp+4Ch+arg_0]
.text:00403A16                 mov     ebx, [ebp+34h]
.text:00403A19                 mov     ecx, [ebp+30h]
.text:00403A1C                 mov     eax, [esi+10h]
.text:00403A1F                 mov     edx, [esi+14h]
.text:00403A22                 mov     esi, ebx
.text:00403A24                 xor     eax, ecx
.text:00403A26                 xor     esi, edx
.text:00403A28                 or      esi, eax
.text:00403A2A                 jz      loc_403ABF
.text:00403A30
.text:00403A30 loc_403A30:                             ; CODE XREF: sub_403600+404↑j
.text:00403A30                 test    byte ptr [ebp+46h], 2
.text:00403A34                 jnz     short loc_403AAF
.text:00403A36
.text:00403A36 loc_403A36:                             ; CODE XREF: sub_403600+4BA↓j
.text:00403A36                 mov     ecx, [esp+4Ch+arg_0]
.text:00403A3A                 mov     eax, [ecx+4]
.text:00403A3D                 test    eax, eax
.text:00403A3F                 jnz     short loc_403A9A
.text:00403A41
.text:00403A41 loc_403A41:                             ; CODE XREF: sub_403600+4AD↓j
.text:00403A41                 mov     word ptr [ebp+44h], 6
.text:00403A47                 mov     edx, [esp+4Ch+arg_0]
.text:00403A4B                 mov     ebx, [edx+30h]
.text:00403A4E
.text:00403A4E loc_403A4E:                             ; CODE XREF: sub_403600+515↓j
.text:00403A4E                 test    ebx, ebx
.text:00403A50                 jnz     short loc_403A59
.text:00403A52
.text:00403A52 loc_403A52:                             ; CODE XREF: sub_403600+498↓j
.text:00403A52                                         ; sub_403600+5E4↓j ...
.text:00403A52                 mov     eax, ebp
.text:00403A54                 jmp     loc_4036D0
.text:00403A59 ; ---------------------------------------------------------------------------
.text:00403A59
.text:00403A59 loc_403A59:                             ; CODE XREF: sub_403600+450↑j
.text:00403A59                 lea     ecx, [ebp+50h]
.text:00403A5C                 mov     edx, [ecx+10h]
.text:00403A5F                 mov     edi, [ecx+14h]
.text:00403A62                 mov     [esp+4Ch+var_3C], edx
.text:00403A66                 lea     edx, [esp+4Ch+var_3C]
.text:00403A6A                 mov     [esp+4Ch+var_38], edi
.text:00403A6E                 mov     esi, [ecx+8]
.text:00403A71                 mov     edi, [ecx+0Ch]
.text:00403A74                 mov     [esp+4Ch+Src], edx
.text:00403A78                 mov     [esp+4Ch+var_34], esi
.text:00403A7C                 mov     [esp+4Ch+var_30], edi
.text:00403A80                 mov     [esp+4Ch+Block], ebx
.text:00403A83                 call    sub_407C30
.text:00403A88                 test    eax, eax
.text:00403A8A                 jz      loc_403C81
.text:00403A90                 mov     [esp+4Ch+Block], eax ; Block
.text:00403A93                 call    free
.text:00403A98                 jmp     short loc_403A52
.text:00403A9A ; ---------------------------------------------------------------------------
.text:00403A9A
.text:00403A9A loc_403A9A:                             ; CODE XREF: sub_403600+43F↑j
.text:00403A9A                 mov     [esp+4Ch+Block], eax ; void *
.text:00403A9D                 call    sub_404700
.text:00403AA2                 mov     eax, [esp+4Ch+arg_0]
.text:00403AA6                 mov     dword ptr [eax+4], 0
.text:00403AAD                 jmp     short loc_403A41
.text:00403AAF ; ---------------------------------------------------------------------------
.text:00403AAF
.text:00403AAF loc_403AAF:                             ; CODE XREF: sub_403600+434↑j
.text:00403AAF                 mov     esi, [ebp+20h]
.text:00403AB2                 mov     [esp+4Ch+Block], esi ; FileHandle
.text:00403AB5                 call    _close
.text:00403ABA                 jmp     loc_403A36
.text:00403ABF ; ---------------------------------------------------------------------------
.text:00403ABF
.text:00403ABF loc_403ABF:                             ; CODE XREF: sub_403600+40C↑j
.text:00403ABF                                         ; sub_403600+42A↑j
.text:00403ABF                 mov     eax, [esp+4Ch+arg_0]
.text:00403AC3                 mov     edx, [eax+4]
.text:00403AC6                 test    edx, edx
.text:00403AC8                 jz      short loc_403ADA
.text:00403ACA                 test    edi, 1000h
.text:00403AD0                 jnz     loc_403B8C
.text:00403AD6
.text:00403AD6 loc_403AD6:                             ; CODE XREF: sub_403600+5AA↓j
.text:00403AD6                 test    edx, edx
.text:00403AD8                 jnz     short loc_403B2C
.text:00403ADA
.text:00403ADA loc_403ADA:                             ; CODE XREF: sub_403600+4C8↑j
.text:00403ADA                 mov     [esp+4Ch+Src], 3
.text:00403AE2                 mov     esi, [esp+4Ch+arg_0]
.text:00403AE6                 mov     [esp+4Ch+Block], esi
.text:00403AE9                 call    sub_403DE0
.text:00403AEE                 mov     [esi+4], eax
.text:00403AF1                 test    eax, eax
.text:00403AF3                 mov     edx, eax
.text:00403AF5                 jnz     short loc_403B1A
.text:00403AF7                 test    byte ptr [esi+2Dh], 20h
.text:00403AFB                 jnz     loc_403850
.text:00403B01                 mov     esi, [ebp+1Ch]
.text:00403B04                 test    esi, esi
.text:00403B06                 jz      short loc_403B0E
.text:00403B08                 mov     word ptr [ebp+44h], 7
.text:00403B0E
.text:00403B0E loc_403B0E:                             ; CODE XREF: sub_403600+506↑j
.text:00403B0E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403B12                 mov     ebx, [ecx+30h]
.text:00403B15                 jmp     loc_403A4E
.text:00403B1A ; ---------------------------------------------------------------------------
.text:00403B1A
.text:00403B1A loc_403B1A:                             ; CODE XREF: sub_403600+4F5↑j
.text:00403B1A                                         ; sub_403600+556↓j ...
.text:00403B1A                 mov     ebp, [esp+4Ch+arg_0]
.text:00403B1E                 mov     esi, edx
.text:00403B20                 mov     dword ptr [ebp+4], 0
.text:00403B27                 jmp     loc_403680
.text:00403B2C ; ---------------------------------------------------------------------------
.text:00403B2C
.text:00403B2C loc_403B2C:                             ; CODE XREF: sub_403600+4D8↑j
.text:00403B2C                 mov     esi, [ebp+14h]
.text:00403B2F                 mov     [esp+4Ch+Src], ebp ; int
.text:00403B33                 mov     ebx, [esp+4Ch+arg_0]
.text:00403B37                 mov     [esp+4Ch+Size], 0FFFFFFFFh ; int
.text:00403B3F                 mov     [esp+4Ch+FileName], esi ; FileName
.text:00403B43                 mov     [esp+4Ch+Block], ebx ; int
.text:00403B46                 call    sub_404870
.text:00403B4B                 test    eax, eax
.text:00403B4D                 jnz     short loc_403B58
.text:00403B4F                 mov     eax, [esp+4Ch+arg_0]
.text:00403B53                 mov     edx, [eax+4]
.text:00403B56                 jmp     short loc_403B1A
.text:00403B58 ; ---------------------------------------------------------------------------
.text:00403B58
.text:00403B58 loc_403B58:                             ; CODE XREF: sub_403600+54D↑j
.text:00403B58                 call    _errno
.text:00403B5D                 movzx   ecx, word ptr [ebp+46h]
.text:00403B61                 mov     edx, [eax]
.text:00403B63                 or      ecx, 1
.text:00403B66                 mov     [ebp+1Ch], edx
.text:00403B69                 mov     [ebp+46h], cx
.text:00403B6D                 mov     ebp, [esp+4Ch+arg_0]
.text:00403B71                 mov     esi, [ebp+4]
.text:00403B74                 test    esi, esi
.text:00403B76                 mov     edx, esi
.text:00403B78                 jz      short loc_403B1A
.text:00403B7A
.text:00403B7A loc_403B7A:                             ; CODE XREF: sub_403600+588↓j
.text:00403B7A                 mov     ebx, [esi+4]
.text:00403B7D                 mov     edi, [ebx+14h]
.text:00403B80                 mov     [esi+14h], edi
.text:00403B83                 mov     esi, [esi+8]
.text:00403B86                 test    esi, esi
.text:00403B88                 jnz     short loc_403B7A
.text:00403B8A                 jmp     short loc_403B1A
.text:00403B8C ; ---------------------------------------------------------------------------
.text:00403B8C
.text:00403B8C loc_403B8C:                             ; CODE XREF: sub_403600+4D0↑j
.text:00403B8C                 and     edi, 0FFFFEFFFh
.text:00403B92                 mov     [eax+2Ch], edi
.text:00403B95                 mov     [esp+4Ch+Block], edx ; void *
.text:00403B98                 call    sub_404700
.text:00403B9D                 mov     edi, [esp+4Ch+arg_0]
.text:00403BA1                 xor     edx, edx
.text:00403BA3                 mov     dword ptr [edi+4], 0
.text:00403BAA                 jmp     loc_403AD6
.text:00403BAF ; ---------------------------------------------------------------------------
.text:00403BAF
.text:00403BAF loc_403BAF:                             ; CODE XREF: sub_403600+3E↑j
.text:00403BAF                 mov     edx, [ebp+44h]
.text:00403BB2                 lea     ebx, [edx-0Ch]
.text:00403BB5                 cmp     bx, 1
.text:00403BB9                 ja      loc_403647
.text:00403BBF                 mov     [esp+4Ch+Size], 1
.text:00403BC7                 mov     eax, [esp+4Ch+arg_0]
.text:00403BCB                 mov     [esp+4Ch+Src], ebp
.text:00403BCF                 mov     [esp+4Ch+Block], eax
.text:00403BD2                 call    sub_404440
.text:00403BD7                 mov     [ebp+44h], ax
.text:00403BDB                 dec     ax
.text:00403BDD                 jz      short loc_403BFF
.text:00403BDF
.text:00403BDF loc_403BDF:                             ; CODE XREF: sub_403600+607↓j
.text:00403BDF                                         ; sub_403600+633↓j ...
.text:00403BDF                 cmp     word ptr [ebp+44h], 1
.text:00403BE4                 jnz     loc_403A52
.text:00403BEA                 mov     [esp+4Ch+Src], ebp ; int
.text:00403BEE                 mov     ebx, [esp+4Ch+arg_0]
.text:00403BF2                 mov     [esp+4Ch+Block], ebx ; Block
.text:00403BF5                 call    sub_404A90
.text:00403BFA                 jmp     loc_403A52
.text:00403BFF ; ---------------------------------------------------------------------------
.text:00403BFF
.text:00403BFF loc_403BFF:                             ; CODE XREF: sub_403600+5DD↑j
.text:00403BFF                 mov     edx, [esp+4Ch+arg_0]
.text:00403C03                 test    byte ptr [edx+2Ch], 4
.text:00403C07                 jnz     short loc_403BDF
.text:00403C09                 mov     [esp+4Ch+Src], 0 ; OpenFlag
.text:00403C11                 mov     [esp+4Ch+Block], offset FileName ; "."
.text:00403C18                 call    _open
.text:00403C1D                 test    eax, eax
.text:00403C1F                 js      short loc_403C47
.text:00403C21
.text:00403C21 loc_403C21:                             ; CODE XREF: sub_403600+65B↓j
.text:00403C21                 mov     [esi+20h], eax
.text:00403C24                 test    eax, eax
.text:00403C26                 js      short loc_403C35
.text:00403C28                 movzx   edi, word ptr [esi+46h]
.text:00403C2C                 or      edi, 2
.text:00403C2F                 mov     [esi+46h], di
.text:00403C33                 jmp     short loc_403BDF
.text:00403C35 ; ---------------------------------------------------------------------------
.text:00403C35
.text:00403C35 loc_403C35:                             ; CODE XREF: sub_403600+626↑j
.text:00403C35                 call    _errno
.text:00403C3A                 mov     word ptr [esi+44h], 7
.text:00403C40                 mov     ecx, [eax]
.text:00403C42                 mov     [esi+1Ch], ecx
.text:00403C45                 jmp     short loc_403BDF
.text:00403C47 ; ---------------------------------------------------------------------------
.text:00403C47
.text:00403C47 loc_403C47:                             ; CODE XREF: sub_403600+61F↑j
.text:00403C47                 mov     [esp+4Ch+Src], 1 ; OpenFlag
.text:00403C4F                 mov     [esp+4Ch+Block], offset FileName ; "."
.text:00403C56                 call    _open
.text:00403C5B                 jmp     short loc_403C21
.text:00403C5B ; ---------------------------------------------------------------------------
.text:00403C5D                 align 10h
.text:00403C60
.text:00403C60 loc_403C60:                             ; CODE XREF: sub_403600+34↑j
.text:00403C60                 mov     [esp+4Ch+Size], 0
.text:00403C68                 mov     eax, [esp+4Ch+arg_0]
.text:00403C6C                 mov     [esp+4Ch+Src], ebp
.text:00403C70                 mov     [esp+4Ch+Block], eax
.text:00403C73                 call    sub_404440
.text:00403C78                 mov     [ebp+44h], ax
.text:00403C7C                 jmp     loc_4036C5
.text:00403C81 ; ---------------------------------------------------------------------------
.text:00403C81
.text:00403C81 loc_403C81:                             ; CODE XREF: sub_403600+2F7↑j
.text:00403C81                                         ; sub_403600+48A↑j
.text:00403C81                 call    abort
.text:00403C81 sub_403600      endp
.text:00403C81
.text:00403C81 ; ---------------------------------------------------------------------------
.text:00403C86                 align 10h
.text:00403C90                 sub     esp, 1Ch
.text:00403C93                 mov     [esp+10h], ebx
.text:00403C97                 mov     ebx, [esp+24h]
.text:00403C9B                 mov     [esp+18h], edi
.text:00403C9F                 mov     edi, [esp+20h]
.text:00403CA3                 test    ebx, ebx
.text:00403CA5                 mov     [esp+14h], esi
.text:00403CA9                 jz      short loc_403CB7
.text:00403CAB                 cmp     ebx, 1000h
.text:00403CB1                 jnz     loc_403DCD
.text:00403CB7
.text:00403CB7 loc_403CB7:                             ; CODE XREF: .text:00403CA9↑j
.text:00403CB7                 mov     esi, [edi]
.text:00403CB9                 call    _errno
.text:00403CBE                 mov     dword ptr [eax], 0
.text:00403CC4                 test    byte ptr [edi+2Dh], 20h
.text:00403CC8                 jnz     loc_403D80
.text:00403CCE                 movzx   edx, word ptr [esi+44h]
.text:00403CD2                 cmp     dx, 9
.text:00403CD6                 jz      loc_403DC5
.text:00403CDC                 xor     eax, eax
.text:00403CDE                 dec     dx
.text:00403CE0                 jnz     short loc_403D22
.text:00403CE2                 mov     eax, [edi+4]
.text:00403CE5                 test    eax, eax
.text:00403CE7                 jnz     loc_403DB8
.text:00403CED
.text:00403CED loc_403CED:                             ; CODE XREF: .text:00403DC0↓j
.text:00403CED                 cmp     ebx, 1000h
.text:00403CF3                 jz      loc_403DA7
.text:00403CF9                 mov     ebx, 1
.text:00403CFE
.text:00403CFE loc_403CFE:                             ; CODE XREF: .text:00403DB3↓j
.text:00403CFE                 mov     edx, [esi+3Ch]
.text:00403D01                 test    edx, edx
.text:00403D03                 jnz     short loc_403D13
.text:00403D05                 mov     edx, [esi+14h]
.text:00403D08                 cmp     byte ptr [edx], 2Fh ; '/'
.text:00403D0B                 jz      short loc_403D13
.text:00403D0D                 test    byte ptr [edi+2Ch], 4
.text:00403D11                 jz      short loc_403D32
.text:00403D13
.text:00403D13 loc_403D13:                             ; CODE XREF: .text:00403D03↑j
.text:00403D13                                         ; .text:00403D0B↑j
.text:00403D13                 mov     [esp+4], ebx
.text:00403D17                 mov     [esp], edi
.text:00403D1A                 call    sub_403DE0
.text:00403D1F                 mov     [edi+4], eax
.text:00403D22
.text:00403D22 loc_403D22:                             ; CODE XREF: .text:00403CE0↑j
.text:00403D22                                         ; .text:00403D72↓j ...
.text:00403D22                 mov     ebx, [esp+10h]
.text:00403D26                 mov     esi, [esp+14h]
.text:00403D2A                 mov     edi, [esp+18h]
.text:00403D2E                 add     esp, 1Ch
.text:00403D31                 retn
.text:00403D32 ; ---------------------------------------------------------------------------
.text:00403D32
.text:00403D32 loc_403D32:                             ; CODE XREF: .text:00403D11↑j
.text:00403D32                 mov     dword ptr [esp+4], 0
.text:00403D3A                 mov     dword ptr [esp], offset FileName ; "."
.text:00403D41                 call    _open
.text:00403D46                 test    eax, eax
.text:00403D48                 mov     esi, eax
.text:00403D4A                 js      short loc_403D84
.text:00403D4C
.text:00403D4C loc_403D4C:                             ; CODE XREF: .text:00403D9C↓j
.text:00403D4C                 mov     [esp+4], ebx
.text:00403D50                 mov     [esp], edi
.text:00403D53                 call    sub_403DE0
.text:00403D58                 mov     [edi+4], eax
.text:00403D5B                 mov     [esp], esi
.text:00403D5E                 call    sub_406E60
.text:00403D63                 test    eax, eax
.text:00403D65                 jnz     short loc_403D74
.text:00403D67                 mov     [esp], esi
.text:00403D6A                 call    _close
.text:00403D6F                 mov     eax, [edi+4]
.text:00403D72                 jmp     short loc_403D22
.text:00403D74 ; ---------------------------------------------------------------------------
.text:00403D74
.text:00403D74 loc_403D74:                             ; CODE XREF: .text:00403D65↑j
.text:00403D74                 mov     [esp], esi
.text:00403D77                 call    _close
.text:00403D7C                 lea     esi, [esi+0]
.text:00403D80
.text:00403D80 loc_403D80:                             ; CODE XREF: .text:00403CC8↑j
.text:00403D80                                         ; .text:00403DA5↓j ...
.text:00403D80                 xor     eax, eax
.text:00403D82                 jmp     short loc_403D22
.text:00403D84 ; ---------------------------------------------------------------------------
.text:00403D84
.text:00403D84 loc_403D84:                             ; CODE XREF: .text:00403D4A↑j
.text:00403D84                 mov     dword ptr [esp+4], 1
.text:00403D8C                 mov     dword ptr [esp], offset FileName ; "."
.text:00403D93                 call    _open
.text:00403D98                 test    eax, eax
.text:00403D9A                 mov     esi, eax
.text:00403D9C                 jns     short loc_403D4C
.text:00403D9E                 mov     dword ptr [edi+4], 0
.text:00403DA5                 jmp     short loc_403D80
.text:00403DA7 ; ---------------------------------------------------------------------------
.text:00403DA7
.text:00403DA7 loc_403DA7:                             ; CODE XREF: .text:00403CF3↑j
.text:00403DA7                 or      dword ptr [edi+2Ch], 1000h
.text:00403DAE                 mov     ebx, 2
.text:00403DB3                 jmp     loc_403CFE
.text:00403DB8 ; ---------------------------------------------------------------------------
.text:00403DB8
.text:00403DB8 loc_403DB8:                             ; CODE XREF: .text:00403CE7↑j
.text:00403DB8                 mov     [esp], eax
.text:00403DBB                 call    sub_404700
.text:00403DC0                 jmp     loc_403CED
.text:00403DC5 ; ---------------------------------------------------------------------------
.text:00403DC5
.text:00403DC5 loc_403DC5:                             ; CODE XREF: .text:00403CD6↑j
.text:00403DC5                 mov     eax, [esi+8]
.text:00403DC8                 jmp     loc_403D22
.text:00403DCD ; ---------------------------------------------------------------------------
.text:00403DCD
.text:00403DCD loc_403DCD:                             ; CODE XREF: .text:00403CB1↑j
.text:00403DCD                 call    _errno
.text:00403DD2                 mov     dword ptr [eax], 16h
.text:00403DD8                 jmp     short loc_403D80
.text:00403DD8 ; ---------------------------------------------------------------------------
.text:00403DDA                 align 10h
.text:00403DE0
.text:00403DE0 ; =============== S U B R O U T I N E =======================================
.text:00403DE0
.text:00403DE0
.text:00403DE0 sub_403DE0      proc near               ; CODE XREF: sub_403600+4E9↑p
.text:00403DE0                                         ; .text:00403D1A↑p ...
.text:00403DE0
.text:00403DE0 Block           = dword ptr -5Ch
.text:00403DE0 Src             = dword ptr -58h
.text:00403DE0 Size            = dword ptr -54h
.text:00403DE0 FileName        = dword ptr -50h
.text:00403DE0 var_48          = dword ptr -48h
.text:00403DE0 var_44          = dword ptr -44h
.text:00403DE0 var_40          = dword ptr -40h
.text:00403DE0 var_39          = byte ptr -39h
.text:00403DE0 var_38          = dword ptr -38h
.text:00403DE0 var_34          = dword ptr -34h
.text:00403DE0 var_2E          = byte ptr -2Eh
.text:00403DE0 var_2D          = byte ptr -2Dh
.text:00403DE0 var_2C          = dword ptr -2Ch
.text:00403DE0 var_28          = dword ptr -28h
.text:00403DE0 var_24          = dword ptr -24h
.text:00403DE0 var_20          = dword ptr -20h
.text:00403DE0 var_1C          = dword ptr -1Ch
.text:00403DE0 var_18          = dword ptr -18h
.text:00403DE0 var_14          = dword ptr -14h
.text:00403DE0 arg_0           = dword ptr  4
.text:00403DE0 arg_4           = dword ptr  8
.text:00403DE0
.text:00403DE0                 push    ebp
.text:00403DE1                 push    edi
.text:00403DE2                 push    esi
.text:00403DE3                 push    ebx
.text:00403DE4                 sub     esp, 4Ch
.text:00403DE7                 mov     ebp, [esp+5Ch+arg_0]
.text:00403DEB                 mov     edx, [ebp+0]
.text:00403DEE                 mov     ecx, [edx+14h]
.text:00403DF1                 mov     [esp+5Ch+var_1C], edx
.text:00403DF5                 mov     [esp+5Ch+Block], ecx ; LPCSTR
.text:00403DF8                 call    sub_40D190
.text:00403DFD                 mov     [esp+5Ch+var_24], eax
.text:00403E01                 test    eax, eax
.text:00403E03                 jz      loc_404415
.text:00403E09                 cmp     [esp+5Ch+arg_4], 2
.text:00403E0E                 jz      loc_404408
.text:00403E14                 mov     edx, [ebp+2Ch]
.text:00403E17                 mov     ebx, edx
.text:00403E19                 and     ebx, 18h
.text:00403E1C                 cmp     ebx, 18h
.text:00403E1F                 jz      loc_4043E7
.text:00403E25                 mov     [esp+5Ch+var_38], 0FFFFFFFFh
.text:00403E2D
.text:00403E2D loc_403E2D:                             ; CODE XREF: sub_403DE0+630↓j
.text:00403E2D                 mov     [esp+5Ch+var_39], 0
.text:00403E32
.text:00403E32 loc_403E32:                             ; CODE XREF: sub_403DE0+623↓j
.text:00403E32                 mov     [esp+5Ch+var_2C], 0
.text:00403E3A                 mov     eax, [esp+5Ch+var_38]
.text:00403E3E                 test    eax, eax
.text:00403E40                 jnz     loc_404361
.text:00403E46                 cmp     [esp+5Ch+arg_4], 3
.text:00403E4B                 mov     [esp+5Ch+var_2D], 0
.text:00403E50                 jz      loc_404361
.text:00403E56
.text:00403E56 loc_403E56:                             ; CODE XREF: sub_403DE0+5AA↓j
.text:00403E56                                         ; sub_403DE0+5F2↓j
.text:00403E56                 mov     ecx, [esp+5Ch+var_1C]
.text:00403E5A                 mov     eax, [esp+5Ch+var_1C]
.text:00403E5E                 mov     edi, [ecx+24h]
.text:00403E61                 mov     esi, [eax+18h]
.text:00403E64                 mov     [esp+5Ch+var_40], edi
.text:00403E68                 mov     edx, [esp+5Ch+var_40]
.text:00403E6C                 cmp     byte ptr [edx+esi-1], 2Fh ; '/'
.text:00403E71                 jz      loc_404357
.text:00403E77
.text:00403E77 loc_403E77:                             ; CODE XREF: sub_403DE0+57C↓j
.text:00403E77                 test    byte ptr [ebp+2Ch], 4
.text:00403E7B                 jz      loc_40434A
.text:00403E81                 mov     edx, [esp+5Ch+var_40]
.text:00403E85                 mov     ebx, [ebp+18h]
.text:00403E88                 add     edx, ebx
.text:00403E8A                 mov     byte ptr [edx], 2Fh ; '/'
.text:00403E8D                 inc     edx
.text:00403E8E                 mov     [esp+5Ch+var_48], edx
.text:00403E92
.text:00403E92 loc_403E92:                             ; CODE XREF: sub_403DE0+572↓j
.text:00403E92                 inc     [esp+5Ch+var_40]
.text:00403E96                 mov     eax, [esp+5Ch+var_1C]
.text:00403E9A                 mov     [esp+5Ch+var_2E], 0
.text:00403E9F                 mov     edi, [ebp+20h]
.text:00403EA2                 mov     ecx, [esp+5Ch+var_40]
.text:00403EA6                 mov     [esp+5Ch+var_20], 0
.text:00403EAE                 mov     esi, [eax+3Ch]
.text:00403EB1                 mov     [esp+5Ch+var_14], 0
.text:00403EB9                 sub     edi, ecx
.text:00403EBB                 inc     esi
.text:00403EBC                 mov     [esp+5Ch+var_44], edi
.text:00403EC0                 mov     [esp+5Ch+var_34], esi
.text:00403EC4                 mov     [esp+5Ch+var_18], 0
.text:00403ECC                 lea     esi, [esi+0]
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403DE0+2D1↓j
.text:00403ED0                                         ; sub_403DE0+430↓j ...
.text:00403ED0                 mov     esi, [esp+5Ch+var_24]
.text:00403ED4                 test    esi, esi
.text:00403ED6                 jz      loc_40423C
.text:00403EDC                 mov     edi, [esp+5Ch+var_24]
.text:00403EE0                 mov     [esp+5Ch+Block], edi
.text:00403EE3                 call    sub_40BD00
.text:00403EE8                 test    eax, eax
.text:00403EEA                 mov     edi, eax
.text:00403EEC                 jz      loc_404230
.text:00403EF2                 test    byte ptr [ebp+2Ch], 20h
.text:00403EF6                 jnz     short loc_403F02
.text:00403EF8                 cmp     byte ptr [edi+0Ch], 2Eh ; '.'
.text:00403EFC                 jz      loc_40420C
.text:00403F02
.text:00403F02 loc_403F02:                             ; CODE XREF: sub_403DE0+116↑j
.text:00403F02                                         ; sub_403DE0+445↓j
.text:00403F02                 lea     ebx, [edi+0Ch]
.text:00403F05                 mov     ecx, ebx
.text:00403F07                 mov     esi, ebx
.text:00403F09                 lea     esi, [esi+0]
.text:00403F10
.text:00403F10 loc_403F10:                             ; CODE XREF: sub_403DE0+145↓j
.text:00403F10                 mov     eax, [ecx]
.text:00403F12                 add     ecx, 4
.text:00403F15                 lea     edx, [eax-1010101h]
.text:00403F1B                 not     eax
.text:00403F1D                 and     edx, eax
.text:00403F1F                 and     edx, 80808080h
.text:00403F25                 jz      short loc_403F10
.text:00403F27                 test    edx, 8080h
.text:00403F2D                 jnz     short loc_403F35
.text:00403F2F                 shr     edx, 10h
.text:00403F32                 add     ecx, 2
.text:00403F35
.text:00403F35 loc_403F35:                             ; CODE XREF: sub_403DE0+14D↑j
.text:00403F35                 mov     [esp+5Ch+Src], ebx ; void *
.text:00403F39                 add     dl, dl
.text:00403F3B                 sbb     ecx, 3
.text:00403F3E                 sub     ecx, esi
.text:00403F40                 mov     [esp+5Ch+Size], ecx ; size_t
.text:00403F44                 mov     [esp+5Ch+Block], ebp ; int
.text:00403F47                 call    sub_404670
.text:00403F4C                 test    eax, eax
.text:00403F4E                 mov     esi, eax
.text:00403F50                 jz      loc_4041C7
.text:00403F56                 mov     ecx, ebx
.text:00403F58                 nop
.text:00403F59                 lea     esi, [esi+0]
.text:00403F60
.text:00403F60 loc_403F60:                             ; CODE XREF: sub_403DE0+195↓j
.text:00403F60                 mov     eax, [ecx]
.text:00403F62                 add     ecx, 4
.text:00403F65                 lea     edx, [eax-1010101h]
.text:00403F6B                 not     eax
.text:00403F6D                 and     edx, eax
.text:00403F6F                 and     edx, 80808080h
.text:00403F75                 jz      short loc_403F60
.text:00403F77                 test    edx, 8080h
.text:00403F7D                 jnz     short loc_403F85
.text:00403F7F                 shr     edx, 10h
.text:00403F82                 add     ecx, 2
.text:00403F85
.text:00403F85 loc_403F85:                             ; CODE XREF: sub_403DE0+19D↑j
.text:00403F85                 add     dl, dl
.text:00403F87                 sbb     ecx, 3
.text:00403F8A                 sub     ecx, ebx
.text:00403F8C                 cmp     ecx, [esp+5Ch+var_44]
.text:00403F90                 jb      loc_404013
.text:00403F96                 mov     eax, [ebp+18h]
.text:00403F99                 mov     ecx, ebx
.text:00403F9B                 mov     [esp+5Ch+var_28], eax
.text:00403F9F                 nop
.text:00403FA0
.text:00403FA0 loc_403FA0:                             ; CODE XREF: sub_403DE0+1D5↓j
.text:00403FA0                 mov     eax, [ecx]
.text:00403FA2                 add     ecx, 4
.text:00403FA5                 lea     edx, [eax-1010101h]
.text:00403FAB                 not     eax
.text:00403FAD                 and     edx, eax
.text:00403FAF                 and     edx, 80808080h
.text:00403FB5                 jz      short loc_403FA0
.text:00403FB7                 test    edx, 8080h
.text:00403FBD                 jnz     short loc_403FC5
.text:00403FBF                 shr     edx, 10h
.text:00403FC2                 add     ecx, 2
.text:00403FC5
.text:00403FC5 loc_403FC5:                             ; CODE XREF: sub_403DE0+1DD↑j
.text:00403FC5                 mov     [esp+5Ch+Block], ebp
.text:00403FC8                 add     dl, dl
.text:00403FCA                 mov     edx, [esp+5Ch+var_40]
.text:00403FCE                 sbb     ecx, 3
.text:00403FD1                 sub     ecx, ebx
.text:00403FD3                 lea     eax, [edx+ecx+1]
.text:00403FD7                 mov     [esp+5Ch+Src], eax
.text:00403FDB                 call    sub_404730
.text:00403FE0                 test    al, al
.text:00403FE2                 jz      loc_4041C7
.text:00403FE8                 mov     eax, [ebp+18h]
.text:00403FEB                 cmp     [esp+5Ch+var_28], eax
.text:00403FEF                 jz      short loc_404006
.text:00403FF1                 test    byte ptr [ebp+2Ch], 4
.text:00403FF5                 mov     [esp+5Ch+var_2E], 1
.text:00403FFA                 jz      short loc_404006
.text:00403FFC                 mov     ecx, [esp+5Ch+var_40]
.text:00404000                 add     eax, ecx
.text:00404002                 mov     [esp+5Ch+var_48], eax
.text:00404006
.text:00404006 loc_404006:                             ; CODE XREF: sub_403DE0+20F↑j
.text:00404006                                         ; sub_403DE0+21A↑j
.text:00404006                 mov     ecx, [ebp+20h]
.text:00404009                 mov     edx, [esp+5Ch+var_40]
.text:0040400D                 sub     ecx, edx
.text:0040400F                 mov     [esp+5Ch+var_44], ecx
.text:00404013
.text:00404013 loc_404013:                             ; CODE XREF: sub_403DE0+1B0↑j
.text:00404013                 mov     ecx, ebx
.text:00404015                 lea     esi, [esi+0]
.text:00404019                 lea     edi, [edi+0]
.text:00404020
.text:00404020 loc_404020:                             ; CODE XREF: sub_403DE0+255↓j
.text:00404020                 mov     eax, [ecx]
.text:00404022                 add     ecx, 4
.text:00404025                 lea     edx, [eax-1010101h]
.text:0040402B                 not     eax
.text:0040402D                 and     edx, eax
.text:0040402F                 and     edx, 80808080h
.text:00404035                 jz      short loc_404020
.text:00404037                 test    edx, 8080h
.text:0040403D                 jnz     short loc_404045
.text:0040403F                 shr     edx, 10h
.text:00404042                 add     ecx, 2
.text:00404045
.text:00404045 loc_404045:                             ; CODE XREF: sub_403DE0+25D↑j
.text:00404045                 add     dl, dl
.text:00404047                 mov     edx, [esp+5Ch+var_40]
.text:0040404B                 sbb     ecx, 3
.text:0040404E                 sub     ecx, ebx
.text:00404050                 add     edx, ecx
.text:00404052                 cmp     edx, [esp+5Ch+var_40]
.text:00404056                 jb      loc_404181
.text:0040405C                 mov     [esi+24h], edx
.text:0040405F                 mov     ebx, [esp+5Ch+var_34]
.text:00404063                 mov     ecx, [ebp+0]
.text:00404066                 mov     [esi+3Ch], ebx
.text:00404069                 mov     ebx, [esp+5Ch+var_2C]
.text:0040406D                 mov     [esi+4], ecx
.text:00404070                 test    ebx, ebx
.text:00404072                 jz      short loc_4040C8
.text:00404074                 mov     edi, [esp+5Ch+var_38]
.text:00404078                 test    edi, edi
.text:0040407A                 jz      short loc_4040C0
.text:0040407C                 mov     word ptr [esi+44h], 0Ah
.text:00404082                 mov     eax, [esp+5Ch+var_2C]
.text:00404086                 mov     [esi+1Ch], eax
.text:00404089
.text:00404089 loc_404089:                             ; CODE XREF: sub_403DE0+2E6↓j
.text:00404089                 mov     ebx, [esp+5Ch+var_1C]
.text:0040408D                 mov     ecx, [ebx+14h]
.text:00404090                 mov     [esi+14h], ecx
.text:00404093
.text:00404093 loc_404093:                             ; CODE XREF: sub_403DE0+315↓j
.text:00404093                                         ; sub_403DE0+34E↓j ...
.text:00404093                 mov     dword ptr [esi+8], 0
.text:0040409A                 mov     edx, [esp+5Ch+var_14]
.text:0040409E                 test    edx, edx
.text:004040A0                 jz      short loc_4040B6
.text:004040A2                 mov     eax, [esp+5Ch+var_20]
.text:004040A6                 mov     [esp+5Ch+var_20], esi
.text:004040AA                 mov     [eax+8], esi
.text:004040AD
.text:004040AD loc_4040AD:                             ; CODE XREF: sub_403DE0+2DE↓j
.text:004040AD                 inc     [esp+5Ch+var_18]
.text:004040B1                 jmp     loc_403ED0
.text:004040B6 ; ---------------------------------------------------------------------------
.text:004040B6
.text:004040B6 loc_4040B6:                             ; CODE XREF: sub_403DE0+2C0↑j
.text:004040B6                 mov     [esp+5Ch+var_20], esi
.text:004040BA                 mov     [esp+5Ch+var_14], esi
.text:004040BE                 jmp     short loc_4040AD
.text:004040C0 ; ---------------------------------------------------------------------------
.text:004040C0
.text:004040C0 loc_4040C0:                             ; CODE XREF: sub_403DE0+29A↑j
.text:004040C0                 mov     word ptr [esi+44h], 0Bh
.text:004040C6                 jmp     short loc_404089
.text:004040C8 ; ---------------------------------------------------------------------------
.text:004040C8
.text:004040C8 loc_4040C8:                             ; CODE XREF: sub_403DE0+292↑j
.text:004040C8                 mov     edx, [esp+5Ch+var_38]
.text:004040CC                 test    edx, edx
.text:004040CE                 jz      short loc_4040E3
.text:004040D0                 cmp     [esp+5Ch+var_39], 0
.text:004040D5                 jz      short loc_4040FF
.text:004040D7                 movzx   eax, byte ptr [edi+0Ah]
.text:004040DB                 cmp     al, 4
.text:004040DD                 jz      short loc_4040FF
.text:004040DF                 test    al, al
.text:004040E1                 jz      short loc_4040FF
.text:004040E3
.text:004040E3 loc_4040E3:                             ; CODE XREF: sub_403DE0+2EE↑j
.text:004040E3                 test    byte ptr [ebp+2Ch], 4
.text:004040E7                 jz      short loc_4040F7
.text:004040E9                 mov     eax, [esi+18h]
.text:004040EC
.text:004040EC loc_4040EC:                             ; CODE XREF: sub_403DE0+31D↓j
.text:004040EC                 mov     [esi+14h], eax
.text:004040EF                 mov     word ptr [esi+44h], 0Bh
.text:004040F5                 jmp     short loc_404093
.text:004040F7 ; ---------------------------------------------------------------------------
.text:004040F7
.text:004040F7 loc_4040F7:                             ; CODE XREF: sub_403DE0+307↑j
.text:004040F7                 lea     eax, [esi+0B8h]
.text:004040FD                 jmp     short loc_4040EC
.text:004040FF ; ---------------------------------------------------------------------------
.text:004040FF
.text:004040FF loc_4040FF:                             ; CODE XREF: sub_403DE0+2F5↑j
.text:004040FF                                         ; sub_403DE0+2FD↑j ...
.text:004040FF                 test    byte ptr [ebp+2Ch], 4
.text:00404103                 jnz     short loc_40415B
.text:00404105                 lea     edi, [esi+0B8h]
.text:0040410B                 mov     [esi+14h], edi
.text:0040410E
.text:0040410E loc_40410E:                             ; CODE XREF: sub_403DE0+39F↓j
.text:0040410E                 mov     [esp+5Ch+Size], 0
.text:00404116                 mov     [esp+5Ch+Src], esi
.text:0040411A                 mov     [esp+5Ch+Block], ebp
.text:0040411D                 call    sub_404440
.text:00404122                 mov     [esi+44h], ax
.text:00404126                 mov     ecx, [esp+5Ch+var_38]
.text:0040412A                 mov     edx, eax
.text:0040412C                 test    ecx, ecx
.text:0040412E                 jz      loc_404093
.text:00404134                 cmp     [esp+5Ch+var_39], 0
.text:00404139                 jz      loc_404093
.text:0040413F                 lea     ebx, [edx-1]
.text:00404142                 cmp     bx, 1
.text:00404146                 jbe     short loc_404152
.text:00404148                 cmp     ax, 5
.text:0040414C                 jnz     loc_404093
.text:00404152
.text:00404152 loc_404152:                             ; CODE XREF: sub_403DE0+366↑j
.text:00404152                 dec     [esp+5Ch+var_38]
.text:00404156                 jmp     loc_404093
.text:0040415B ; ---------------------------------------------------------------------------
.text:0040415B
.text:0040415B loc_40415B:                             ; CODE XREF: sub_403DE0+323↑j
.text:0040415B                 mov     edx, [esi+18h]
.text:0040415E                 lea     ecx, [esi+0B8h]
.text:00404164                 mov     ebx, [esi+40h]
.text:00404167                 mov     edi, [esp+5Ch+var_48]
.text:0040416B                 mov     [esi+14h], edx
.text:0040416E                 inc     ebx
.text:0040416F                 mov     [esp+5Ch+Size], ebx ; Size
.text:00404173                 mov     [esp+5Ch+Src], ecx ; Src
.text:00404177                 mov     [esp+5Ch+Block], edi ; void *
.text:0040417A                 call    memmove
.text:0040417F                 jmp     short loc_40410E
.text:00404181 ; ---------------------------------------------------------------------------
.text:00404181
.text:00404181 loc_404181:                             ; CODE XREF: sub_403DE0+276↑j
.text:00404181                 mov     [esp+5Ch+Block], esi ; Block
.text:00404184                 call    free
.text:00404189                 mov     edx, [esp+5Ch+var_14]
.text:0040418D                 mov     [esp+5Ch+Block], edx ; void *
.text:00404190                 call    sub_404700
.text:00404195                 mov     esi, [esp+5Ch+var_24]
.text:00404199                 mov     [esp+5Ch+Block], esi ; void *
.text:0040419C                 call    sub_40D120
.text:004041A1                 or      dword ptr [ebp+2Ch], 2000h
.text:004041A8                 mov     ecx, [esp+5Ch+var_1C]
.text:004041AC                 mov     word ptr [ecx+44h], 7
.text:004041B2                 call    _errno
.text:004041B7                 mov     dword ptr [eax], 26h ; '&'
.text:004041BD
.text:004041BD loc_4041BD:                             ; CODE XREF: sub_403DE0+42A↓j
.text:004041BD                                         ; sub_403DE0+4F6↓j ...
.text:004041BD                 xor     eax, eax
.text:004041BF
.text:004041BF loc_4041BF:                             ; CODE XREF: sub_403DE0+4CE↓j
.text:004041BF                 add     esp, 4Ch
.text:004041C2                 pop     ebx
.text:004041C3                 pop     esi
.text:004041C4                 pop     edi
.text:004041C5                 pop     ebp
.text:004041C6                 retn
.text:004041C7 ; ---------------------------------------------------------------------------
.text:004041C7
.text:004041C7 loc_4041C7:                             ; CODE XREF: sub_403DE0+170↑j
.text:004041C7                                         ; sub_403DE0+202↑j
.text:004041C7                 call    _errno
.text:004041CC                 test    esi, esi
.text:004041CE                 mov     ebx, [eax]
.text:004041D0                 jz      short loc_4041DA
.text:004041D2                 mov     [esp+5Ch+Block], esi ; Block
.text:004041D5                 call    free
.text:004041DA
.text:004041DA loc_4041DA:                             ; CODE XREF: sub_403DE0+3F0↑j
.text:004041DA                 mov     ecx, [esp+5Ch+var_14]
.text:004041DE                 mov     [esp+5Ch+Block], ecx ; void *
.text:004041E1                 call    sub_404700
.text:004041E6                 mov     edi, [esp+5Ch+var_24]
.text:004041EA                 mov     [esp+5Ch+Block], edi ; void *
.text:004041ED                 call    sub_40D120
.text:004041F2                 or      dword ptr [ebp+2Ch], 2000h
.text:004041F9                 mov     esi, [esp+5Ch+var_1C]
.text:004041FD                 mov     word ptr [esi+44h], 7
.text:00404203                 call    _errno
.text:00404208                 mov     [eax], ebx
.text:0040420A                 jmp     short loc_4041BD
.text:0040420C ; ---------------------------------------------------------------------------
.text:0040420C
.text:0040420C loc_40420C:                             ; CODE XREF: sub_403DE0+11C↑j
.text:0040420C                 cmp     byte ptr [edi+0Dh], 0
.text:00404210                 jz      loc_403ED0
.text:00404216                 mov     edx, [edi+0Ch]
.text:00404219                 and     edx, 0FFFF00h
.text:0040421F                 cmp     edx, 2E00h
.text:00404225                 jnz     loc_403F02
.text:0040422B                 jmp     loc_403ED0
.text:00404230 ; ---------------------------------------------------------------------------
.text:00404230
.text:00404230 loc_404230:                             ; CODE XREF: sub_403DE0+10C↑j
.text:00404230                 mov     ecx, [esp+5Ch+var_24]
.text:00404234                 mov     [esp+5Ch+Block], ecx ; void *
.text:00404237                 call    sub_40D120
.text:0040423C
.text:0040423C loc_40423C:                             ; CODE XREF: sub_403DE0+F6↑j
.text:0040423C                 cmp     [esp+5Ch+var_2E], 0
.text:00404241                 jnz     loc_404335
.text:00404247
.text:00404247 loc_404247:                             ; CODE XREF: sub_403DE0+565↓j
.text:00404247                 test    byte ptr [ebp+2Ch], 4
.text:0040424B                 jz      short loc_404269
.text:0040424D                 mov     eax, [esp+5Ch+var_40]
.text:00404251                 cmp     eax, [ebp+20h]
.text:00404254                 jz      short loc_40425E
.text:00404256                 mov     edx, [esp+5Ch+var_18]
.text:0040425A                 test    edx, edx
.text:0040425C                 jnz     short loc_404262
.text:0040425E
.text:0040425E loc_40425E:                             ; CODE XREF: sub_403DE0+474↑j
.text:0040425E                 dec     [esp+5Ch+var_48]
.text:00404262
.text:00404262 loc_404262:                             ; CODE XREF: sub_403DE0+47C↑j
.text:00404262                 mov     esi, [esp+5Ch+var_48]
.text:00404266                 mov     byte ptr [esi], 0
.text:00404269
.text:00404269 loc_404269:                             ; CODE XREF: sub_403DE0+46B↑j
.text:00404269                 cmp     [esp+5Ch+var_2D], 0
.text:0040426E                 jz      short loc_404294
.text:00404270                 cmp     [esp+5Ch+arg_4], 1
.text:00404275                 jz      short loc_40427F
.text:00404277                 mov     edi, [esp+5Ch+var_18]
.text:0040427B                 test    edi, edi
.text:0040427D                 jnz     short loc_40429C
.text:0040427F
.text:0040427F loc_40427F:                             ; CODE XREF: sub_403DE0+495↑j
.text:0040427F                 mov     ebx, [esp+5Ch+var_1C]
.text:00404283                 mov     ecx, [ebx+3Ch]
.text:00404286                 test    ecx, ecx
.text:00404288                 jnz     loc_404310
.text:0040428E                 test    byte ptr [ebp+2Ch], 4
.text:00404292                 jz      short loc_4042EB
.text:00404294
.text:00404294 loc_404294:                             ; CODE XREF: sub_403DE0+48E↑j
.text:00404294                                         ; sub_403DE0+518↓j
.text:00404294                 mov     ebx, [esp+5Ch+var_18]
.text:00404298                 test    ebx, ebx
.text:0040429A                 jz      short loc_4042D1
.text:0040429C
.text:0040429C loc_40429C:                             ; CODE XREF: sub_403DE0+49D↑j
.text:0040429C                 mov     eax, [ebp+28h]
.text:0040429F                 test    eax, eax
.text:004042A1                 jz      short loc_4042AA
.text:004042A3                 cmp     [esp+5Ch+var_18], 1
.text:004042A8                 ja      short loc_4042B3
.text:004042AA
.text:004042AA loc_4042AA:                             ; CODE XREF: sub_403DE0+4C1↑j
.text:004042AA                                         ; sub_403DE0+4EF↓j
.text:004042AA                 mov     eax, [esp+5Ch+var_14]
.text:004042AE                 jmp     loc_4041BF
.text:004042B3 ; ---------------------------------------------------------------------------
.text:004042B3
.text:004042B3 loc_4042B3:                             ; CODE XREF: sub_403DE0+4C8↑j
.text:004042B3                 mov     [esp+5Ch+Block], ebp ; int
.text:004042B6                 mov     ebx, [esp+5Ch+var_18]
.text:004042BA                 mov     edi, [esp+5Ch+var_14]
.text:004042BE                 mov     [esp+5Ch+Size], ebx ; void *
.text:004042C2                 mov     [esp+5Ch+Src], edi ; int
.text:004042C6                 call    sub_404590
.text:004042CB                 mov     [esp+5Ch+var_14], eax
.text:004042CF                 jmp     short loc_4042AA
.text:004042D1 ; ---------------------------------------------------------------------------
.text:004042D1
.text:004042D1 loc_4042D1:                             ; CODE XREF: sub_403DE0+4BA↑j
.text:004042D1                 cmp     [esp+5Ch+arg_4], 3
.text:004042D6                 jnz     loc_4041BD
.text:004042DC                 mov     ebp, [esp+5Ch+var_1C]
.text:004042E0                 mov     word ptr [ebp+44h], 6
.text:004042E6                 jmp     loc_4041BD
.text:004042EB ; ---------------------------------------------------------------------------
.text:004042EB
.text:004042EB loc_4042EB:                             ; CODE XREF: sub_403DE0+4B2↑j
.text:004042EB                 mov     edx, [ebp+1Ch]
.text:004042EE                 mov     [esp+5Ch+Block], edx
.text:004042F1                 call    sub_406E60
.text:004042F6
.text:004042F6 loc_4042F6:                             ; CODE XREF: sub_403DE0+553↓j
.text:004042F6                 test    eax, eax
.text:004042F8                 jz      short loc_404294
.text:004042FA                 or      dword ptr [ebp+2Ch], 2000h
.text:00404301                 mov     edi, [esp+5Ch+var_1C]
.text:00404305                 mov     word ptr [edi+44h], 7
.text:0040430B                 jmp     loc_4041BD
.text:00404310 ; ---------------------------------------------------------------------------
.text:00404310
.text:00404310 loc_404310:                             ; CODE XREF: sub_403DE0+4A8↑j
.text:00404310                 mov     [esp+5Ch+FileName], offset byte_4035F3 ; FileName
.text:00404318                 mov     eax, [esp+5Ch+var_1C]
.text:0040431C                 mov     [esp+5Ch+Size], 0FFFFFFFFh ; int
.text:00404324                 mov     esi, [eax+4]
.text:00404327                 mov     [esp+5Ch+Block], ebp ; int
.text:0040432A                 mov     [esp+5Ch+Src], esi ; int
.text:0040432E                 call    sub_404870
.text:00404333                 jmp     short loc_4042F6
.text:00404335 ; ---------------------------------------------------------------------------
.text:00404335
.text:00404335 loc_404335:                             ; CODE XREF: sub_403DE0+461↑j
.text:00404335                 mov     [esp+5Ch+Block], ebp
.text:00404338                 mov     ebx, [esp+5Ch+var_14]
.text:0040433C                 mov     [esp+5Ch+Src], ebx
.text:00404340                 call    sub_4047C0
.text:00404345                 jmp     loc_404247
.text:0040434A ; ---------------------------------------------------------------------------
.text:0040434A
.text:0040434A loc_40434A:                             ; CODE XREF: sub_403DE0+9B↑j
.text:0040434A                 mov     [esp+5Ch+var_48], 0
.text:00404352                 jmp     loc_403E92
.text:00404357 ; ---------------------------------------------------------------------------
.text:00404357
.text:00404357 loc_404357:                             ; CODE XREF: sub_403DE0+91↑j
.text:00404357                 dec     edx
.text:00404358                 mov     [esp+5Ch+var_40], edx
.text:0040435C                 jmp     loc_403E77
.text:00404361 ; ---------------------------------------------------------------------------
.text:00404361
.text:00404361 loc_404361:                             ; CODE XREF: sub_403DE0+60↑j
.text:00404361                                         ; sub_403DE0+70↑j
.text:00404361                 mov     [esp+5Ch+FileName], 0 ; FileName
.text:00404369                 mov     edi, [esp+5Ch+var_24]
.text:0040436D                 mov     edx, [esp+5Ch+var_1C]
.text:00404371                 mov     esi, [edi]
.text:00404373                 mov     [esp+5Ch+Src], edx ; int
.text:00404377                 mov     [esp+5Ch+Block], ebp ; int
.text:0040437A                 mov     [esp+5Ch+Size], esi ; int
.text:0040437E                 call    sub_404870
.text:00404383                 mov     [esp+5Ch+var_2D], 1
.text:00404388                 test    eax, eax
.text:0040438A                 jz      loc_403E56
.text:00404390                 mov     ecx, [esp+5Ch+var_38]
.text:00404394                 test    ecx, ecx
.text:00404396                 jz      short loc_40439F
.text:00404398                 cmp     [esp+5Ch+arg_4], 3
.text:0040439D                 jz      short loc_4043D7
.text:0040439F
.text:0040439F loc_40439F:                             ; CODE XREF: sub_403DE0+5B6↑j
.text:0040439F                                         ; sub_403DE0+605↓j
.text:0040439F                 mov     [esp+5Ch+var_2D], 0
.text:004043A4                 mov     ecx, [esp+5Ch+var_1C]
.text:004043A8                 movzx   ebx, word ptr [ecx+46h]
.text:004043AC                 or      ebx, 1
.text:004043AF                 mov     [ecx+46h], bx
.text:004043B3                 call    _errno
.text:004043B8                 mov     edi, [eax]
.text:004043BA                 mov     esi, [esp+5Ch+var_24]
.text:004043BE                 mov     [esp+5Ch+var_2C], edi
.text:004043C2                 mov     [esp+5Ch+Block], esi ; void *
.text:004043C5                 call    sub_40D120
.text:004043CA                 mov     [esp+5Ch+var_24], 0
.text:004043D2                 jmp     loc_403E56
.text:004043D7 ; ---------------------------------------------------------------------------
.text:004043D7
.text:004043D7 loc_4043D7:                             ; CODE XREF: sub_403DE0+5BD↑j
.text:004043D7                 call    _errno
.text:004043DC                 mov     edx, [eax]
.text:004043DE                 mov     ebx, [esp+5Ch+var_1C]
.text:004043E2                 mov     [ebx+1Ch], edx
.text:004043E5                 jmp     short loc_40439F
.text:004043E7 ; ---------------------------------------------------------------------------
.text:004043E7
.text:004043E7 loc_4043E7:                             ; CODE XREF: sub_403DE0+3F↑j
.text:004043E7                 mov     ecx, [esp+5Ch+var_1C]
.text:004043EB                 test    dl, 20h
.text:004043EE                 mov     eax, [ecx+38h]
.text:004043F1                 mov     [esp+5Ch+var_38], eax
.text:004043F5                 jnz     short loc_4043FE
.text:004043F7                 sub     eax, 2
.text:004043FA                 mov     [esp+5Ch+var_38], eax
.text:004043FE
.text:004043FE loc_4043FE:                             ; CODE XREF: sub_403DE0+615↑j
.text:004043FE                 mov     [esp+5Ch+var_39], 1
.text:00404403                 jmp     loc_403E32
.text:00404408 ; ---------------------------------------------------------------------------
.text:00404408
.text:00404408 loc_404408:                             ; CODE XREF: sub_403DE0+2E↑j
.text:00404408                 mov     [esp+5Ch+var_38], 0
.text:00404410                 jmp     loc_403E2D
.text:00404415 ; ---------------------------------------------------------------------------
.text:00404415
.text:00404415 loc_404415:                             ; CODE XREF: sub_403DE0+23↑j
.text:00404415                 cmp     [esp+5Ch+arg_4], 3
.text:0040441A                 jnz     loc_4041BD
.text:00404420                 mov     edi, [esp+5Ch+var_1C]
.text:00404424                 mov     word ptr [edi+44h], 4
.text:0040442A                 call    _errno
.text:0040442F                 mov     esi, [eax]
.text:00404431                 mov     ecx, [esp+5Ch+var_1C]
.text:00404435                 mov     [ecx+1Ch], esi
.text:00404438                 jmp     loc_4041BD
.text:00404438 sub_403DE0      endp
.text:00404438
.text:00404438 ; ---------------------------------------------------------------------------
.text:0040443D                 align 10h
.text:00404440
.text:00404440 ; =============== S U B R O U T I N E =======================================
.text:00404440
.text:00404440
.text:00404440 sub_404440      proc near               ; CODE XREF: sub_4031F0+27C↑p
.text:00404440                                         ; sub_403600+100↑p ...
.text:00404440
.text:00404440 var_1C          = dword ptr -1Ch
.text:00404440 var_18          = dword ptr -18h
.text:00404440 var_C           = dword ptr -0Ch
.text:00404440 var_8           = dword ptr -8
.text:00404440 var_4           = dword ptr -4
.text:00404440 arg_0           = dword ptr  4
.text:00404440 arg_4           = dword ptr  8
.text:00404440 arg_8           = byte ptr  0Ch
.text:00404440
.text:00404440                 sub     esp, 1Ch
.text:00404443                 mov     ecx, [esp+1Ch+arg_0]
.text:00404447                 mov     [esp+1Ch+var_C], ebx
.text:0040444B                 mov     [esp+1Ch+var_4], edi
.text:0040444F                 mov     edi, [esp+1Ch+arg_4]
.text:00404453                 mov     [esp+1Ch+var_8], esi
.text:00404457                 test    byte ptr [ecx+2Ch], 2
.text:0040445B                 lea     ebx, [edi+50h]
.text:0040445E                 movzx   edx, [esp+1Ch+arg_8]
.text:00404463                 jnz     short loc_40446D
.text:00404465                 test    dl, dl
.text:00404467                 jz      loc_404560
.text:0040446D
.text:0040446D loc_40446D:                             ; CODE XREF: sub_404440+23↑j
.text:0040446D                 mov     [esp+1Ch+var_18], ebx ; int
.text:00404471                 mov     edx, [edi+14h]
.text:00404474                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00404477                 call    sub_40C330
.text:0040447C                 test    eax, eax
.text:0040447E                 jnz     loc_404512
.text:00404484
.text:00404484 loc_404484:                             ; CODE XREF: sub_404440+131↓j
.text:00404484                 mov     edx, [ebx]
.text:00404486                 and     edx, 0F000h
.text:0040448C                 cmp     edx, 4000h
.text:00404492                 jz      short loc_4044C0
.text:00404494                 cmp     edx, 0A000h
.text:0040449A                 mov     eax, 0Ch
.text:0040449F                 jz      short loc_4044B0
.text:004044A1                 xor     ecx, ecx
.text:004044A3                 cmp     edx, 8000h
.text:004044A9                 setz    cl
.text:004044AC                 lea     eax, [ecx+ecx*4+3]
.text:004044B0
.text:004044B0 loc_4044B0:                             ; CODE XREF: sub_404440+5F↑j
.text:004044B0                                         ; sub_404440+AC↓j ...
.text:004044B0                 mov     ebx, [esp+1Ch+var_C]
.text:004044B4                 mov     esi, [esp+1Ch+var_8]
.text:004044B8                 mov     edi, [esp+1Ch+var_4]
.text:004044BC                 add     esp, 1Ch
.text:004044BF                 retn
.text:004044C0 ; ---------------------------------------------------------------------------
.text:004044C0
.text:004044C0 loc_4044C0:                             ; CODE XREF: sub_404440+52↑j
.text:004044C0                 cmp     byte ptr [edi+0B8h], 2Eh ; '.'
.text:004044C7                 mov     esi, [ebx+10h]
.text:004044CA                 mov     ecx, [ebx+14h]
.text:004044CD                 mov     [edi+30h], esi
.text:004044D0                 mov     [edi+34h], ecx
.text:004044D3                 mov     edx, [ebx+8]
.text:004044D6                 mov     esi, [ebx+0Ch]
.text:004044D9                 mov     ecx, [ebx+18h]
.text:004044DC                 mov     [edi+28h], edx
.text:004044DF                 mov     [edi+2Ch], esi
.text:004044E2                 mov     [edi+38h], ecx
.text:004044E5                 jz      short loc_4044EE
.text:004044E7
.text:004044E7 loc_4044E7:                             ; CODE XREF: sub_404440+C9↓j
.text:004044E7                 mov     eax, 1
.text:004044EC                 jmp     short loc_4044B0
.text:004044EE ; ---------------------------------------------------------------------------
.text:004044EE
.text:004044EE loc_4044EE:                             ; CODE XREF: sub_404440+A5↑j
.text:004044EE                 cmp     byte ptr [edi+0B9h], 0
.text:004044F5                 jz      short loc_40450B
.text:004044F7                 mov     ebx, [edi+0B8h]
.text:004044FD                 and     ebx, 0FFFF00h
.text:00404503                 cmp     ebx, 2E00h
.text:00404509                 jnz     short loc_4044E7
.text:0040450B
.text:0040450B loc_40450B:                             ; CODE XREF: sub_404440+B5↑j
.text:0040450B                 mov     eax, 5
.text:00404510                 jmp     short loc_4044B0
.text:00404512 ; ---------------------------------------------------------------------------
.text:00404512
.text:00404512 loc_404512:                             ; CODE XREF: sub_404440+3E↑j
.text:00404512                 call    _errno
.text:00404517                 mov     esi, [eax]
.text:00404519                 mov     [esp+1Ch+var_18], ebx
.text:0040451D                 mov     ecx, [edi+14h]
.text:00404520                 mov     [esp+1Ch+var_1C], ecx
.text:00404523                 call    sub_40B400
.text:00404528                 test    eax, eax
.text:0040452A                 jz      short loc_404545
.text:0040452C                 mov     [edi+1Ch], esi
.text:0040452F
.text:0040452F loc_40452F:                             ; CODE XREF: sub_404440+141↓j
.text:0040452F                 cld
.text:00404530                 xor     eax, eax
.text:00404532                 mov     ecx, 1Ah
.text:00404537                 mov     edi, ebx
.text:00404539                 rep stosd
.text:0040453B                 mov     eax, 0Ah
.text:00404540                 jmp     loc_4044B0
.text:00404545 ; ---------------------------------------------------------------------------
.text:00404545
.text:00404545 loc_404545:                             ; CODE XREF: sub_404440+EA↑j
.text:00404545                 call    _errno
.text:0040454A                 mov     dword ptr [eax], 0
.text:00404550                 mov     eax, 0Dh
.text:00404555                 jmp     loc_4044B0
.text:00404555 ; ---------------------------------------------------------------------------
.text:0040455A                 align 10h
.text:00404560
.text:00404560 loc_404560:                             ; CODE XREF: sub_404440+27↑j
.text:00404560                 mov     [esp+1Ch+var_18], ebx
.text:00404564                 mov     esi, [edi+14h]
.text:00404567                 mov     [esp+1Ch+var_1C], esi
.text:0040456A                 call    sub_40B400
.text:0040456F                 test    eax, eax
.text:00404571                 jz      loc_404484
.text:00404577                 call    _errno
.text:0040457C                 mov     edx, [eax]
.text:0040457E                 mov     [edi+1Ch], edx
.text:00404581                 jmp     short loc_40452F
.text:00404581 sub_404440      endp
.text:00404581
.text:00404581 ; ---------------------------------------------------------------------------
.text:00404583                 align 10h
.text:00404590
.text:00404590 ; =============== S U B R O U T I N E =======================================
.text:00404590
.text:00404590
.text:00404590 ; int __cdecl sub_404590(int, int, void *)
.text:00404590 sub_404590      proc near               ; CODE XREF: sub_4031F0+21A↑p
.text:00404590                                         ; sub_403DE0+4E6↑p
.text:00404590
.text:00404590 Block           = dword ptr -1Ch
.text:00404590 Size            = dword ptr -18h
.text:00404590 var_14          = dword ptr -14h
.text:00404590 var_10          = dword ptr -10h
.text:00404590 arg_0           = dword ptr  4
.text:00404590 arg_4           = dword ptr  8
.text:00404590 arg_8           = dword ptr  0Ch
.text:00404590
.text:00404590                 push    edi
.text:00404591                 push    esi
.text:00404592                 push    ebx
.text:00404593                 sub     esp, 10h
.text:00404596                 mov     edi, [esp+1Ch+arg_0]
.text:0040459A                 mov     ebx, [esp+1Ch+arg_8]
.text:0040459E                 mov     esi, [esp+1Ch+arg_4]
.text:004045A2                 cmp     ebx, [edi+24h]
.text:004045A5                 jbe     short loc_4045E0
.text:004045A7                 lea     eax, [ebx+28h]
.text:004045AA                 cmp     eax, 3FFFFFFFh
.text:004045AF                 mov     [edi+24h], eax
.text:004045B2                 ja      loc_404652
.text:004045B8                 shl     eax, 2
.text:004045BB                 mov     [esp+1Ch+Size], eax ; Size
.text:004045BF                 mov     edx, [edi+8]
.text:004045C2                 mov     [esp+1Ch+Block], edx ; Block
.text:004045C5                 call    realloc
.text:004045CA                 test    eax, eax
.text:004045CC                 jz      loc_404652
.text:004045D2                 mov     [edi+8], eax
.text:004045D5                 lea     esi, [esi+0]
.text:004045D9                 lea     edi, [edi+0]
.text:004045E0
.text:004045E0 loc_4045E0:                             ; CODE XREF: sub_404590+15↑j
.text:004045E0                 mov     edx, [edi+8]
.text:004045E3                 test    esi, esi
.text:004045E5                 mov     eax, esi
.text:004045E7                 mov     ecx, edx
.text:004045E9                 jz      short loc_4045FC
.text:004045EB                 nop
.text:004045EC                 lea     esi, [esi+0]
.text:004045F0
.text:004045F0 loc_4045F0:                             ; CODE XREF: sub_404590+6A↓j
.text:004045F0                 mov     [edx], eax
.text:004045F2                 mov     eax, [eax+8]
.text:004045F5                 add     edx, 4
.text:004045F8                 test    eax, eax
.text:004045FA                 jnz     short loc_4045F0
.text:004045FC
.text:004045FC loc_4045FC:                             ; CODE XREF: sub_404590+59↑j
.text:004045FC                 mov     esi, [edi+28h]
.text:004045FF                 mov     [esp+1Ch+Size], ebx ; void *
.text:00404603                 mov     [esp+1Ch+Block], ecx ; Block
.text:00404606                 mov     [esp+1Ch+var_10], esi ; int
.text:0040460A                 mov     [esp+1Ch+var_14], 4 ; size_t
.text:00404612                 call    sub_40CFA0
.text:00404617                 mov     edx, [edi+8]
.text:0040461A                 dec     ebx
.text:0040461B                 mov     esi, [edx]
.text:0040461D                 mov     ecx, esi
.text:0040461F                 jz      short loc_404642
.text:00404621                 jmp     short loc_404630
.text:00404621 ; ---------------------------------------------------------------------------
.text:00404623                 align 10h
.text:00404630
.text:00404630 loc_404630:                             ; CODE XREF: sub_404590+91↑j
.text:00404630                                         ; sub_404590+AE↓j
.text:00404630                 mov     edi, [edx+4]
.text:00404633                 add     edx, 4
.text:00404636                 dec     ebx
.text:00404637                 mov     [ecx+8], edi
.text:0040463A                 jz      short loc_404640
.text:0040463C                 mov     ecx, [edx]
.text:0040463E                 jmp     short loc_404630
.text:00404640 ; ---------------------------------------------------------------------------
.text:00404640
.text:00404640 loc_404640:                             ; CODE XREF: sub_404590+AA↑j
.text:00404640                 mov     ecx, [edx]
.text:00404642
.text:00404642 loc_404642:                             ; CODE XREF: sub_404590+8F↑j
.text:00404642                 mov     dword ptr [ecx+8], 0
.text:00404649
.text:00404649 loc_404649:                             ; CODE XREF: sub_404590+DB↓j
.text:00404649                 add     esp, 10h
.text:0040464C                 mov     eax, esi
.text:0040464E                 pop     ebx
.text:0040464F                 pop     esi
.text:00404650                 pop     edi
.text:00404651                 retn
.text:00404652 ; ---------------------------------------------------------------------------
.text:00404652
.text:00404652 loc_404652:                             ; CODE XREF: sub_404590+22↑j
.text:00404652                                         ; sub_404590+3C↑j
.text:00404652                 mov     edx, [edi+8]
.text:00404655                 mov     [esp+1Ch+Block], edx ; Block
.text:00404658                 call    free
.text:0040465D                 mov     dword ptr [edi+8], 0
.text:00404664                 mov     dword ptr [edi+24h], 0
.text:0040466B                 jmp     short loc_404649
.text:0040466B sub_404590      endp
.text:0040466B
.text:0040466B ; ---------------------------------------------------------------------------
.text:0040466D                 align 10h
.text:00404670
.text:00404670 ; =============== S U B R O U T I N E =======================================
.text:00404670
.text:00404670
.text:00404670 ; int __cdecl sub_404670(int, void *, size_t)
.text:00404670 sub_404670      proc near               ; CODE XREF: sub_4031F0+9D↑p
.text:00404670                                         ; sub_4031F0+F4↑p ...
.text:00404670
.text:00404670 Size            = dword ptr -1Ch
.text:00404670 Src             = dword ptr -18h
.text:00404670 var_14          = dword ptr -14h
.text:00404670 var_8           = dword ptr -8
.text:00404670 var_4           = dword ptr -4
.text:00404670 arg_0           = dword ptr  4
.text:00404670 arg_4           = dword ptr  8
.text:00404670 arg_8           = dword ptr  0Ch
.text:00404670
.text:00404670                 sub     esp, 1Ch
.text:00404673                 mov     [esp+1Ch+var_4], esi
.text:00404677                 mov     esi, [esp+1Ch+arg_8]
.text:0040467B                 mov     [esp+1Ch+var_8], ebx
.text:0040467F                 lea     edx, [esi+0C0h]
.text:00404685                 mov     [esp+1Ch+Size], edx ; Size
.text:00404688                 call    malloc
.text:0040468D                 mov     ebx, eax
.text:0040468F                 xor     eax, eax
.text:00404691                 test    ebx, ebx
.text:00404693                 jz      short loc_4046E8
.text:00404695                 mov     [esp+1Ch+var_14], esi ; Size
.text:00404699                 mov     edx, [esp+1Ch+arg_4]
.text:0040469D                 lea     ecx, [ebx+0B8h]
.text:004046A3                 mov     [esp+1Ch+Size], ecx ; void *
.text:004046A6                 mov     [esp+1Ch+Src], edx ; Src
.text:004046AA                 call    memmove
.text:004046AF                 mov     [ebx+40h], esi
.text:004046B2                 mov     ecx, [esp+1Ch+arg_0]
.text:004046B6                 xor     edx, edx
.text:004046B8                 mov     [esi+ebx+0B8h], dl
.text:004046BF                 mov     eax, ebx
.text:004046C1                 mov     dword ptr [ebx+1Ch], 0
.text:004046C8                 mov     edx, [ecx+18h]
.text:004046CB                 mov     word ptr [ebx+46h], 0
.text:004046D1                 mov     word ptr [ebx+48h], 3
.text:004046D7                 mov     [ebx+18h], edx
.text:004046DA                 mov     dword ptr [ebx+0Ch], 0
.text:004046E1                 mov     dword ptr [ebx+10h], 0
.text:004046E8
.text:004046E8 loc_4046E8:                             ; CODE XREF: sub_404670+23↑j
.text:004046E8                 mov     ebx, [esp+1Ch+var_8]
.text:004046EC                 mov     esi, [esp+1Ch+var_4]
.text:004046F0                 add     esp, 1Ch
.text:004046F3                 retn
.text:004046F3 sub_404670      endp
.text:004046F3
.text:004046F3 ; ---------------------------------------------------------------------------
.text:004046F4                 align 10h
.text:00404700
.text:00404700 ; =============== S U B R O U T I N E =======================================
.text:00404700
.text:00404700
.text:00404700 ; int __cdecl sub_404700(void *)
.text:00404700 sub_404700      proc near               ; CODE XREF: sub_4031F0+1BA↑p
.text:00404700                                         ; sub_403500+E9↑p ...
.text:00404700
.text:00404700 Block           = dword ptr -0Ch
.text:00404700 arg_0           = dword ptr  4
.text:00404700
.text:00404700                 push    ebx
.text:00404701                 sub     esp, 8
.text:00404704                 mov     ebx, [esp+0Ch+arg_0]
.text:00404708                 test    ebx, ebx
.text:0040470A                 mov     eax, ebx
.text:0040470C                 jz      short loc_404721
.text:0040470E                 mov     esi, esi
.text:00404710
.text:00404710 loc_404710:                             ; CODE XREF: sub_404700+1F↓j
.text:00404710                 mov     ebx, [ebx+8]
.text:00404713                 mov     [esp+0Ch+Block], eax ; Block
.text:00404716                 call    free
.text:0040471B                 test    ebx, ebx
.text:0040471D                 mov     eax, ebx
.text:0040471F                 jnz     short loc_404710
.text:00404721
.text:00404721 loc_404721:                             ; CODE XREF: sub_404700+C↑j
.text:00404721                 add     esp, 8
.text:00404724                 pop     ebx
.text:00404725                 retn
.text:00404725 sub_404700      endp
.text:00404725
.text:00404725 ; ---------------------------------------------------------------------------
.text:00404726                 align 10h
.text:00404730
.text:00404730 ; =============== S U B R O U T I N E =======================================
.text:00404730
.text:00404730
.text:00404730 sub_404730      proc near               ; CODE XREF: sub_4031F0+7D↑p
.text:00404730                                         ; sub_403DE0+1FB↑p
.text:00404730
.text:00404730 Block           = dword ptr -0Ch
.text:00404730 Size            = dword ptr -8
.text:00404730 var_4           = dword ptr -4
.text:00404730 arg_0           = dword ptr  4
.text:00404730 arg_4           = dword ptr  8
.text:00404730
.text:00404730                 sub     esp, 0Ch
.text:00404733                 mov     ecx, [esp+0Ch+arg_4]
.text:00404737                 mov     [esp+0Ch+var_4], ebx
.text:0040473B                 mov     ebx, [esp+0Ch+arg_0]
.text:0040473F                 mov     edx, [ebx+20h]
.text:00404742                 mov     eax, edx
.text:00404744                 add     eax, ecx
.text:00404746                 add     eax, 100h
.text:0040474B                 cmp     eax, edx
.text:0040474D                 jnb     short loc_404783
.text:0040474F                 mov     eax, [ebx+18h]
.text:00404752                 test    eax, eax
.text:00404754                 jnz     short loc_404772
.text:00404756
.text:00404756 loc_404756:                             ; CODE XREF: sub_404730+51↓j
.text:00404756                 mov     dword ptr [ebx+18h], 0
.text:0040475D                 call    _errno
.text:00404762                 mov     dword ptr [eax], 26h ; '&'
.text:00404768
.text:00404768 loc_404768:                             ; CODE XREF: sub_404730+85↓j
.text:00404768                 xor     eax, eax
.text:0040476A
.text:0040476A loc_40476A:                             ; CODE XREF: sub_404730+71↓j
.text:0040476A                 mov     ebx, [esp+0Ch+var_4]
.text:0040476E                 add     esp, 0Ch
.text:00404771                 retn
.text:00404772 ; ---------------------------------------------------------------------------
.text:00404772
.text:00404772 loc_404772:                             ; CODE XREF: sub_404730+24↑j
.text:00404772                 mov     [esp+0Ch+Block], eax ; Block
.text:00404775                 call    free
.text:0040477A                 mov     dword ptr [ebx+18h], 0
.text:00404781                 jmp     short loc_404756
.text:00404783 ; ---------------------------------------------------------------------------
.text:00404783
.text:00404783 loc_404783:                             ; CODE XREF: sub_404730+1D↑j
.text:00404783                 mov     [ebx+20h], eax
.text:00404786                 mov     [esp+0Ch+Size], eax ; Size
.text:0040478A                 mov     edx, [ebx+18h]
.text:0040478D                 mov     [esp+0Ch+Block], edx ; Block
.text:00404790                 call    realloc
.text:00404795                 test    eax, eax
.text:00404797                 jz      short loc_4047A3
.text:00404799                 mov     [ebx+18h], eax
.text:0040479C                 mov     eax, 1
.text:004047A1                 jmp     short loc_40476A
.text:004047A3 ; ---------------------------------------------------------------------------
.text:004047A3
.text:004047A3 loc_4047A3:                             ; CODE XREF: sub_404730+67↑j
.text:004047A3                 mov     edx, [ebx+18h]
.text:004047A6                 mov     [esp+0Ch+Block], edx ; Block
.text:004047A9                 call    free
.text:004047AE                 mov     dword ptr [ebx+18h], 0
.text:004047B5                 jmp     short loc_404768
.text:004047B5 sub_404730      endp
.text:004047B5
.text:004047B5 ; ---------------------------------------------------------------------------
.text:004047B7                 align 10h
.text:004047C0
.text:004047C0 ; =============== S U B R O U T I N E =======================================
.text:004047C0
.text:004047C0
.text:004047C0 sub_4047C0      proc near               ; CODE XREF: sub_403DE0+560↑p
.text:004047C0
.text:004047C0 arg_0           = dword ptr  4
.text:004047C0 arg_4           = dword ptr  8
.text:004047C0
.text:004047C0                 push    ebx
.text:004047C1                 mov     ecx, [esp+4+arg_0]
.text:004047C5                 mov     edx, [ecx+4]
.text:004047C8                 mov     ebx, [ecx+18h]
.text:004047CB                 test    edx, edx
.text:004047CD                 jz      short loc_4047F2
.text:004047CF                 nop
.text:004047D0
.text:004047D0 loc_4047D0:                             ; CODE XREF: sub_4047C0+30↓j
.text:004047D0                 mov     ecx, [edx+14h]
.text:004047D3                 lea     eax, [edx+0B8h]
.text:004047D9                 cmp     ecx, eax
.text:004047DB                 jz      short loc_4047E8
.text:004047DD                 mov     eax, [edx+18h]
.text:004047E0                 sub     ecx, eax
.text:004047E2                 lea     eax, [ecx+ebx]
.text:004047E5                 mov     [edx+14h], eax
.text:004047E8
.text:004047E8 loc_4047E8:                             ; CODE XREF: sub_4047C0+1B↑j
.text:004047E8                 mov     [edx+18h], ebx
.text:004047EB                 mov     edx, [edx+8]
.text:004047EE                 test    edx, edx
.text:004047F0                 jnz     short loc_4047D0
.text:004047F2
.text:004047F2 loc_4047F2:                             ; CODE XREF: sub_4047C0+D↑j
.text:004047F2                 mov     edx, [esp+4+arg_4]
.text:004047F6                 mov     ecx, [edx+3Ch]
.text:004047F9                 test    ecx, ecx
.text:004047FB                 js      short loc_40482E
.text:004047FD                 lea     esi, [esi+0]
.text:00404800
.text:00404800 loc_404800:                             ; CODE XREF: sub_4047C0+6C↓j
.text:00404800                 mov     ecx, [edx+14h]
.text:00404803                 lea     eax, [edx+0B8h]
.text:00404809                 cmp     ecx, eax
.text:0040480B                 jz      short loc_404818
.text:0040480D                 mov     eax, [edx+18h]
.text:00404810                 sub     ecx, eax
.text:00404812                 lea     eax, [ecx+ebx]
.text:00404815                 mov     [edx+14h], eax
.text:00404818
.text:00404818 loc_404818:                             ; CODE XREF: sub_4047C0+4B↑j
.text:00404818                 mov     [edx+18h], ebx
.text:0040481B                 mov     eax, [edx+8]
.text:0040481E                 test    eax, eax
.text:00404820                 jnz     short loc_404825
.text:00404822                 mov     eax, [edx+4]
.text:00404825
.text:00404825 loc_404825:                             ; CODE XREF: sub_4047C0+60↑j
.text:00404825                 mov     ecx, [eax+3Ch]
.text:00404828                 mov     edx, eax
.text:0040482A                 test    ecx, ecx
.text:0040482C                 jns     short loc_404800
.text:0040482E
.text:0040482E loc_40482E:                             ; CODE XREF: sub_4047C0+3B↑j
.text:0040482E                 pop     ebx
.text:0040482F                 retn
.text:0040482F sub_4047C0      endp
.text:0040482F
.text:00404830
.text:00404830 ; =============== S U B R O U T I N E =======================================
.text:00404830
.text:00404830
.text:00404830 sub_404830      proc near               ; CODE XREF: sub_4031F0+61↑p
.text:00404830                                         ; sub_4031F0+2F3↑p
.text:00404830
.text:00404830 Str             = dword ptr -0Ch
.text:00404830 arg_0           = dword ptr  4
.text:00404830
.text:00404830                 push    esi
.text:00404831                 xor     esi, esi
.text:00404833                 push    ebx
.text:00404834                 sub     esp, 4
.text:00404837                 mov     ebx, [esp+0Ch+arg_0]
.text:0040483B                 mov     eax, [ebx]
.text:0040483D                 test    eax, eax
.text:0040483F                 jnz     short loc_404848
.text:00404841
.text:00404841 loc_404841:                             ; CODE XREF: sub_404830+2F↓j
.text:00404841                 pop     edx
.text:00404842                 lea     eax, [esi+1]
.text:00404845                 pop     ebx
.text:00404846                 pop     esi
.text:00404847                 retn
.text:00404848 ; ---------------------------------------------------------------------------
.text:00404848
.text:00404848 loc_404848:                             ; CODE XREF: sub_404830+F↑j
.text:00404848                                         ; sub_404830+2D↓j
.text:00404848                 mov     [esp+0Ch+Str], eax ; Str
.text:0040484B                 call    strlen
.text:00404850                 cmp     eax, esi
.text:00404852                 jbe     short loc_404856
.text:00404854                 mov     esi, eax
.text:00404856
.text:00404856 loc_404856:                             ; CODE XREF: sub_404830+22↑j
.text:00404856                 add     ebx, 4
.text:00404859                 mov     eax, [ebx]
.text:0040485B                 test    eax, eax
.text:0040485D                 jnz     short loc_404848
.text:0040485F                 jmp     short loc_404841
.text:0040485F sub_404830      endp
.text:0040485F
.text:00404861 ; ---------------------------------------------------------------------------
.text:00404861                 jmp     short sub_404870
.text:00404861 ; ---------------------------------------------------------------------------
.text:00404863                 align 10h
.text:00404870
.text:00404870 ; =============== S U B R O U T I N E =======================================
.text:00404870
.text:00404870
.text:00404870 ; int __cdecl sub_404870(int, int, int, char *FileName)
.text:00404870 sub_404870      proc near               ; CODE XREF: sub_403600+3B7↑p
.text:00404870                                         ; sub_403600+546↑p ...
.text:00404870
.text:00404870 FileHandle      = dword ptr -9Ch
.text:00404870 OpenFlag        = dword ptr -98h
.text:00404870 var_8C          = byte ptr -8Ch
.text:00404870 var_84          = dword ptr -84h
.text:00404870 var_80          = dword ptr -80h
.text:00404870 var_7C          = dword ptr -7Ch
.text:00404870 var_78          = dword ptr -78h
.text:00404870 var_10          = dword ptr -10h
.text:00404870 var_C           = dword ptr -0Ch
.text:00404870 var_8           = dword ptr -8
.text:00404870 var_4           = dword ptr -4
.text:00404870 arg_0           = dword ptr  4
.text:00404870 arg_4           = dword ptr  8
.text:00404870 arg_8           = dword ptr  0Ch
.text:00404870 FileName        = dword ptr  10h
.text:00404870
.text:00404870                 sub     esp, 9Ch
.text:00404876                 mov     edx, [esp+9Ch+arg_0]
.text:0040487D                 mov     [esp+9Ch+var_C], esi
.text:00404884                 mov     esi, [esp+9Ch+FileName]
.text:0040488B                 mov     [esp+9Ch+var_8], edi
.text:00404892                 mov     [esp+9Ch+var_4], ebp
.text:00404899                 mov     ebp, [esp+9Ch+arg_8]
.text:004048A0                 mov     [esp+9Ch+var_10], ebx
.text:004048A7                 test    byte ptr [edx+2Ch], 4
.text:004048AB                 mov     edi, ebp
.text:004048AD                 jz      short loc_4048D4
.text:004048AF                 xor     eax, eax
.text:004048B1
.text:004048B1 loc_4048B1:                             ; CODE XREF: sub_404870+E7↓j
.text:004048B1                                         ; sub_404870+125↓j
.text:004048B1                 mov     ebx, [esp+9Ch+var_10]
.text:004048B8                 mov     esi, [esp+9Ch+var_C]
.text:004048BF                 mov     edi, [esp+9Ch+var_8]
.text:004048C6                 mov     ebp, [esp+9Ch+var_4]
.text:004048CD                 add     esp, 9Ch
.text:004048D3                 retn
.text:004048D4 ; ---------------------------------------------------------------------------
.text:004048D4
.text:004048D4 loc_4048D4:                             ; CODE XREF: sub_404870+3D↑j
.text:004048D4                 test    ebp, ebp
.text:004048D6                 js      loc_404972
.text:004048DC
.text:004048DC loc_4048DC:                             ; CODE XREF: sub_404870+11F↓j
.text:004048DC                 mov     [esp+9Ch+FileHandle], edi
.text:004048DF                 lea     edx, [esp+9Ch+var_8C]
.text:004048E3                 mov     ebx, 0FFFFFFFFh
.text:004048E8                 mov     [esp+9Ch+OpenFlag], edx
.text:004048EC                 call    sub_4095B0
.text:004048F1                 test    eax, eax
.text:004048F3                 jnz     short loc_404943
.text:004048F5                 mov     esi, [esp+9Ch+arg_4]
.text:004048FC                 mov     eax, [esp+9Ch+var_7C]
.text:00404900                 mov     edx, [esp+9Ch+var_78]
.text:00404904                 mov     ebx, [esi+34h]
.text:00404907                 mov     ecx, [esi+30h]
.text:0040490A                 mov     esi, ebx
.text:0040490C                 xor     esi, edx
.text:0040490E                 xor     eax, ecx
.text:00404910                 or      esi, eax
.text:00404912                 jnz     short loc_404933
.text:00404914                 mov     edx, [esp+9Ch+arg_4]
.text:0040491B                 mov     eax, [esp+9Ch+var_84]
.text:0040491F                 mov     ebx, [edx+2Ch]
.text:00404922                 mov     ecx, [edx+28h]
.text:00404925                 mov     edx, [esp+9Ch+var_80]
.text:00404929                 mov     esi, ebx
.text:0040492B                 xor     eax, ecx
.text:0040492D                 xor     esi, edx
.text:0040492F                 or      esi, eax
.text:00404931                 jz      short loc_404966
.text:00404933
.text:00404933 loc_404933:                             ; CODE XREF: sub_404870+A2↑j
.text:00404933                 call    _errno
.text:00404938                 mov     dword ptr [eax], 2
.text:0040493E                 mov     ebx, 0FFFFFFFFh
.text:00404943
.text:00404943 loc_404943:                             ; CODE XREF: sub_404870+83↑j
.text:00404943                                         ; sub_404870+100↓j
.text:00404943                 call    _errno
.text:00404948                 test    ebp, ebp
.text:0040494A                 mov     esi, [eax]
.text:0040494C                 js      short loc_40495C
.text:0040494E
.text:0040494E loc_40494E:                             ; CODE XREF: sub_404870+F4↓j
.text:0040494E                 call    _errno
.text:00404953                 mov     [eax], esi
.text:00404955                 mov     eax, ebx
.text:00404957                 jmp     loc_4048B1
.text:0040495C ; ---------------------------------------------------------------------------
.text:0040495C
.text:0040495C loc_40495C:                             ; CODE XREF: sub_404870+DC↑j
.text:0040495C                 mov     [esp+9Ch+FileHandle], edi ; FileHandle
.text:0040495F                 call    _close
.text:00404964                 jmp     short loc_40494E
.text:00404966 ; ---------------------------------------------------------------------------
.text:00404966
.text:00404966 loc_404966:                             ; CODE XREF: sub_404870+C1↑j
.text:00404966                 mov     [esp+9Ch+FileHandle], edi
.text:00404969                 call    sub_406E60
.text:0040496E                 mov     ebx, eax
.text:00404970                 jmp     short loc_404943
.text:00404972 ; ---------------------------------------------------------------------------
.text:00404972
.text:00404972 loc_404972:                             ; CODE XREF: sub_404870+66↑j
.text:00404972                 mov     [esp+9Ch+OpenFlag], 0 ; OpenFlag
.text:0040497A                 mov     [esp+9Ch+FileHandle], esi ; FileName
.text:0040497D                 call    _open
.text:00404982                 test    eax, eax
.text:00404984                 js      short loc_40499A
.text:00404986
.text:00404986 loc_404986:                             ; CODE XREF: sub_404870+13A↓j
.text:00404986                 mov     edi, eax
.text:00404988                 test    edi, edi
.text:0040498A                 mov     eax, 0FFFFFFFFh
.text:0040498F                 jns     loc_4048DC
.text:00404995                 jmp     loc_4048B1
.text:0040499A ; ---------------------------------------------------------------------------
.text:0040499A
.text:0040499A loc_40499A:                             ; CODE XREF: sub_404870+114↑j
.text:0040499A                 mov     [esp+9Ch+OpenFlag], 1 ; OpenFlag
.text:004049A2                 mov     [esp+9Ch+FileHandle], esi ; FileName
.text:004049A5                 call    _open
.text:004049AA                 jmp     short loc_404986
.text:004049AA sub_404870      endp
.text:004049AA
.text:004049AA ; ---------------------------------------------------------------------------
.text:004049AC                 align 10h
.text:004049B0
.text:004049B0 ; =============== S U B R O U T I N E =======================================
.text:004049B0
.text:004049B0
.text:004049B0 sub_4049B0      proc near               ; CODE XREF: sub_4026E0+346↑p
.text:004049B0
.text:004049B0 arg_4           = dword ptr  8
.text:004049B0 arg_8           = dword ptr  0Ch
.text:004049B0
.text:004049B0                 sub     esp, 0Ch
.text:004049B3                 mov     edx, [esp+0Ch+arg_8]
.text:004049B7                 cmp     edx, 4
.text:004049BA                 ja      short loc_4049D0
.text:004049BC                 mov     ecx, [esp+0Ch+arg_4]
.text:004049C0                 xor     eax, eax
.text:004049C2                 mov     [ecx+48h], dx
.text:004049C6
.text:004049C6 loc_4049C6:                             ; CODE XREF: sub_4049B0+30↓j
.text:004049C6                 add     esp, 0Ch
.text:004049C9                 retn
.text:004049C9 ; ---------------------------------------------------------------------------
.text:004049CA                 align 10h
.text:004049D0
.text:004049D0 loc_4049D0:                             ; CODE XREF: sub_4049B0+A↑j
.text:004049D0                 call    _errno
.text:004049D5                 mov     dword ptr [eax], 16h
.text:004049DB                 mov     eax, 1
.text:004049E0                 jmp     short loc_4049C6
.text:004049E0 sub_4049B0      endp
.text:004049E0
.text:004049E0 ; ---------------------------------------------------------------------------
.text:004049E2                 align 10h
.text:004049F0
.text:004049F0 ; =============== S U B R O U T I N E =======================================
.text:004049F0
.text:004049F0
.text:004049F0 sub_4049F0      proc near               ; DATA XREF: sub_4031F0+124↑o
.text:004049F0
.text:004049F0 var_11          = byte ptr -11h
.text:004049F0 var_10          = dword ptr -10h
.text:004049F0 var_C           = dword ptr -0Ch
.text:004049F0 var_8           = dword ptr -8
.text:004049F0 var_4           = dword ptr -4
.text:004049F0 arg_0           = dword ptr  4
.text:004049F0 arg_4           = dword ptr  8
.text:004049F0
.text:004049F0                 sub     esp, 14h
.text:004049F3                 mov     [esp+14h+var_8], edi
.text:004049F7                 mov     edi, [esp+14h+arg_0]
.text:004049FB                 mov     [esp+14h+var_4], ebp
.text:004049FF                 mov     ebp, [esp+14h+arg_4]
.text:00404A03                 mov     [esp+14h+var_C], esi
.text:00404A07                 mov     [esp+14h+var_10], ebx
.text:00404A0B                 mov     ebx, [edi+0Ch]
.text:00404A0E                 mov     [esp+14h+var_11], 0
.text:00404A13                 mov     ecx, [edi+8]
.text:00404A16                 mov     eax, [ebp+8]
.text:00404A19                 mov     edx, [ebp+0Ch]
.text:00404A1C                 mov     esi, ebx
.text:00404A1E                 xor     eax, ecx
.text:00404A20                 xor     esi, edx
.text:00404A22                 or      esi, eax
.text:00404A24                 jnz     short loc_404A40
.text:00404A26                 mov     edx, [edi+4]
.text:00404A29                 mov     esi, [edi]
.text:00404A2B                 mov     ecx, [ebp+4]
.text:00404A2E                 mov     edi, [ebp+0]
.text:00404A31                 mov     eax, edx
.text:00404A33                 xor     eax, ecx
.text:00404A35                 xor     edi, esi
.text:00404A37                 or      eax, edi
.text:00404A39                 jnz     short loc_404A40
.text:00404A3B                 mov     [esp+14h+var_11], 1
.text:00404A40
.text:00404A40 loc_404A40:                             ; CODE XREF: sub_4049F0+34↑j
.text:00404A40                                         ; sub_4049F0+49↑j
.text:00404A40                 movzx   eax, [esp+14h+var_11]
.text:00404A45                 mov     ebx, [esp+14h+var_10]
.text:00404A49                 mov     esi, [esp+14h+var_C]
.text:00404A4D                 mov     edi, [esp+14h+var_8]
.text:00404A51                 mov     ebp, [esp+14h+var_4]
.text:00404A55                 add     esp, 14h
.text:00404A58                 retn
.text:00404A58 sub_4049F0      endp
.text:00404A58
.text:00404A58 ; ---------------------------------------------------------------------------
.text:00404A59                 align 10h
.text:00404A60
.text:00404A60 ; =============== S U B R O U T I N E =======================================
.text:00404A60
.text:00404A60
.text:00404A60 sub_404A60      proc near               ; DATA XREF: sub_4031F0+12C↑o
.text:00404A60
.text:00404A60 var_1C          = dword ptr -1Ch
.text:00404A60 var_18          = dword ptr -18h
.text:00404A60 var_14          = dword ptr -14h
.text:00404A60 var_10          = dword ptr -10h
.text:00404A60 arg_0           = dword ptr  4
.text:00404A60 arg_4           = dword ptr  8
.text:00404A60
.text:00404A60                 sub     esp, 1Ch
.text:00404A63                 mov     ecx, [esp+1Ch+arg_0]
.text:00404A67                 mov     edx, [ecx+0Ch]
.text:00404A6A                 mov     eax, [ecx+8]
.text:00404A6D                 mov     ecx, [esp+1Ch+arg_4]
.text:00404A71                 mov     [esp+1Ch+var_10], 0
.text:00404A79                 mov     [esp+1Ch+var_1C], eax
.text:00404A7C                 mov     [esp+1Ch+var_14], ecx
.text:00404A80                 mov     [esp+1Ch+var_18], edx
.text:00404A84                 call    sub_4125C0
.text:00404A89                 add     esp, 1Ch
.text:00404A8C                 retn
.text:00404A8C sub_404A60      endp
.text:00404A8C
.text:00404A8C ; ---------------------------------------------------------------------------
.text:00404A8D                 align 10h
.text:00404A90
.text:00404A90 ; =============== S U B R O U T I N E =======================================
.text:00404A90
.text:00404A90
.text:00404A90 ; int __cdecl sub_404A90(void *Block, int)
.text:00404A90 sub_404A90      proc near               ; CODE XREF: sub_403600+E3↑p
.text:00404A90                                         ; sub_403600+228↑p ...
.text:00404A90
.text:00404A90 Size            = dword ptr -1Ch
.text:00404A90 var_18          = dword ptr -18h
.text:00404A90 var_10          = dword ptr -10h
.text:00404A90 var_C           = dword ptr -0Ch
.text:00404A90 var_8           = dword ptr -8
.text:00404A90 var_4           = dword ptr -4
.text:00404A90 Block           = dword ptr  4
.text:00404A90 arg_4           = dword ptr  8
.text:00404A90
.text:00404A90                 sub     esp, 1Ch
.text:00404A93                 mov     [esp+1Ch+var_C], esi
.text:00404A97                 mov     esi, [esp+1Ch+Block]
.text:00404A9B                 mov     [esp+1Ch+var_8], edi
.text:00404A9F                 mov     edi, [esp+1Ch+arg_4]
.text:00404AA3                 mov     [esp+1Ch+var_10], ebx
.text:00404AA7                 mov     [esp+1Ch+var_4], ebp
.text:00404AAB                 mov     eax, [esi+30h]
.text:00404AAE                 test    eax, eax
.text:00404AB0                 jnz     short loc_404AF0
.text:00404AB2                 mov     edx, [esi+34h]
.text:00404AB5                 test    edx, edx
.text:00404AB7                 jnz     short loc_404AD0
.text:00404AB9
.text:00404AB9 loc_404AB9:                             ; CODE XREF: sub_404A90+51↓j
.text:00404AB9                                         ; sub_404A90+5B↓j ...
.text:00404AB9                 mov     ebx, [esp+1Ch+var_10]
.text:00404ABD                 mov     esi, [esp+1Ch+var_C]
.text:00404AC1                 mov     edi, [esp+1Ch+var_8]
.text:00404AC5                 mov     ebp, [esp+1Ch+var_4]
.text:00404AC9                 add     esp, 1Ch
.text:00404ACC                 retn
.text:00404ACC ; ---------------------------------------------------------------------------
.text:00404ACD                 align 10h
.text:00404AD0
.text:00404AD0 loc_404AD0:                             ; CODE XREF: sub_404A90+27↑j
.text:00404AD0                 mov     [esp+1Ch+Size], edx
.text:00404AD3                 lea     ebp, [edi+50h]
.text:00404AD6                 mov     [esp+1Ch+var_18], ebp
.text:00404ADA                 call    sub_406EF0
.text:00404ADF                 test    al, al
.text:00404AE1                 jz      short loc_404AB9
.text:00404AE3                 mov     [edi], edi
.text:00404AE5                 mov     word ptr [edi+44h], 2
.text:00404AEB                 jmp     short loc_404AB9
.text:00404AEB ; ---------------------------------------------------------------------------
.text:00404AED                 align 10h
.text:00404AF0
.text:00404AF0 loc_404AF0:                             ; CODE XREF: sub_404A90+20↑j
.text:00404AF0                 mov     [esp+1Ch+Size], 18h ; Size
.text:00404AF7                 lea     ebp, [edi+50h]
.text:00404AFA                 call    malloc
.text:00404AFF                 test    eax, eax
.text:00404B01                 mov     ebx, eax
.text:00404B03                 jz      short loc_404B5D
.text:00404B05                 mov     [eax+10h], edi
.text:00404B08                 mov     edx, [ebp+10h]
.text:00404B0B                 mov     ecx, [ebp+14h]
.text:00404B0E                 mov     [eax], edx
.text:00404B10                 mov     [eax+4], ecx
.text:00404B13                 mov     edx, [ebp+8]
.text:00404B16                 mov     ecx, [ebp+0Ch]
.text:00404B19                 mov     [eax+8], edx
.text:00404B1C                 mov     [eax+0Ch], ecx
.text:00404B1F                 mov     [esp+1Ch+var_18], eax
.text:00404B23                 mov     edx, [esi+30h]
.text:00404B26                 mov     [esp+1Ch+Size], edx
.text:00404B29                 call    sub_407560
.text:00404B2E                 test    eax, eax
.text:00404B30                 jz      short loc_404B5D
.text:00404B32                 cmp     eax, ebx
.text:00404B34                 jz      short loc_404AB9
.text:00404B36                 mov     word ptr [edi+44h], 2
.text:00404B3C                 mov     esi, [eax+10h]
.text:00404B3F                 mov     [edi], esi
.text:00404B41                 mov     esi, [esp+1Ch+var_C]
.text:00404B45                 mov     [esp+1Ch+Block], ebx ; Block
.text:00404B49                 mov     edi, [esp+1Ch+var_8]
.text:00404B4D                 mov     ebx, [esp+1Ch+var_10]
.text:00404B51                 mov     ebp, [esp+1Ch+var_4]
.text:00404B55                 add     esp, 1Ch
.text:00404B58                 jmp     free
.text:00404B5D ; ---------------------------------------------------------------------------
.text:00404B5D
.text:00404B5D loc_404B5D:                             ; CODE XREF: sub_404A90+73↑j
.text:00404B5D                                         ; sub_404A90+A0↑j
.text:00404B5D                 mov     ebx, [esi+30h]
.text:00404B60                 mov     [esp+1Ch+Size], ebx ; void *
.text:00404B63                 call    sub_4072F0
.text:00404B68                 mov     dword ptr [esi+30h], 0
.text:00404B6F                 jmp     loc_404AB9
.text:00404B6F sub_404A90      endp
.text:00404B6F
.text:00404B6F ; ---------------------------------------------------------------------------
.text:00404B74                 align 10h
.text:00404B80 ; const char byte_404B80
.text:00404B80 byte_404B80     db 0                    ; DATA XREF: sub_404BA0+64↓o
.text:00404B81 aInvalidArgumen db 'invalid argument: %s',0
.text:00404B81                                         ; DATA XREF: sub_404BA0+70↓o
.text:00404B96                 align 10h
.text:00404BA0
.text:00404BA0 ; =============== S U B R O U T I N E =======================================
.text:00404BA0
.text:00404BA0
.text:00404BA0 sub_404BA0      proc near               ; CODE XREF: sub_402490+38↑p
.text:00404BA0
.text:00404BA0 Code            = dword ptr -1Ch
.text:00404BA0 ErrorMessage    = dword ptr -18h
.text:00404BA0 var_14          = dword ptr -14h
.text:00404BA0 var_10          = byte ptr -10h
.text:00404BA0 var_8           = dword ptr -8
.text:00404BA0 var_4           = dword ptr -4
.text:00404BA0 arg_0           = dword ptr  4
.text:00404BA0 arg_4           = dword ptr  8
.text:00404BA0 arg_8           = dword ptr  0Ch
.text:00404BA0
.text:00404BA0                 sub     esp, 1Ch
.text:00404BA3                 mov     edx, [esp+1Ch+arg_8]
.text:00404BA7                 mov     [esp+1Ch+var_8], ebx
.text:00404BAB                 mov     ebx, [esp+1Ch+arg_0]
.text:00404BAF                 mov     [esp+1Ch+var_14], edx
.text:00404BB3                 mov     edx, [esp+1Ch+arg_4]
.text:00404BB7                 mov     [esp+1Ch+var_4], esi
.text:00404BBB                 mov     [esp+1Ch+Code], ebx
.text:00404BBE                 mov     [esp+1Ch+ErrorMessage], edx
.text:00404BC2                 call    sub_4031F0
.text:00404BC7                 test    eax, eax
.text:00404BC9                 mov     esi, eax
.text:00404BCB                 jz      short loc_404BE0
.text:00404BCD
.text:00404BCD loc_404BCD:                             ; CODE XREF: sub_404BA0+9B↓j
.text:00404BCD                 mov     eax, esi
.text:00404BCF                 mov     ebx, [esp+1Ch+var_8]
.text:00404BD3                 mov     esi, [esp+1Ch+var_4]
.text:00404BD7                 add     esp, 1Ch
.text:00404BDA                 retn
.text:00404BDA ; ---------------------------------------------------------------------------
.text:00404BDB                 align 10h
.text:00404BE0
.text:00404BE0 loc_404BE0:                             ; CODE XREF: sub_404BA0+2B↑j
.text:00404BE0                 mov     eax, [ebx]
.text:00404BE2                 xor     edx, edx
.text:00404BE4                 test    eax, eax
.text:00404BE6                 jz      short loc_404C3D
.text:00404BE8                 nop
.text:00404BE9                 lea     esi, [esi+0]
.text:00404BF0
.text:00404BF0 loc_404BF0:                             ; CODE XREF: sub_404BA0+5E↓j
.text:00404BF0                 cmp     byte ptr [eax], 0
.text:00404BF3                 jnz     short loc_404BF7
.text:00404BF5                 mov     dl, 1
.text:00404BF7
.text:00404BF7 loc_404BF7:                             ; CODE XREF: sub_404BA0+53↑j
.text:00404BF7                 add     ebx, 4
.text:00404BFA                 mov     eax, [ebx]
.text:00404BFC                 test    eax, eax
.text:00404BFE                 jnz     short loc_404BF0
.text:00404C00                 test    dl, dl
.text:00404C02                 jz      short loc_404C3D
.text:00404C04                 mov     [esp+1Ch+Code], offset byte_404B80 ; char *
.text:00404C0B                 call    sub_406510
.text:00404C10                 mov     [esp+1Ch+Code], offset aInvalidArgumen ; "invalid argument: %s"
.text:00404C17                 mov     ebx, eax
.text:00404C19                 call    ds:libintl_gettext
.text:00404C1F                 mov     dword ptr [esp+1Ch+var_10], ebx ; char
.text:00404C23                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404C2B                 mov     [esp+1Ch+Code], 1 ; Code
.text:00404C32                 mov     [esp+1Ch+var_14], eax ; char *
.text:00404C36                 call    sub_409310
.text:00404C3B                 jmp     short loc_404BCD
.text:00404C3D ; ---------------------------------------------------------------------------
.text:00404C3D
.text:00404C3D loc_404C3D:                             ; CODE XREF: sub_404BA0+46↑j
.text:00404C3D                                         ; sub_404BA0+62↑j
.text:00404C3D                 call    sub_407EE0
.text:00404C3D sub_404BA0      endp
.text:00404C3D
.text:00404C3D ; ---------------------------------------------------------------------------
.text:00404C42                 align 10h
.text:00404C50
.text:00404C50 ; =============== S U B R O U T I N E =======================================
.text:00404C50
.text:00404C50
.text:00404C50 ; int __cdecl sub_404C50(char *, int, int)
.text:00404C50 sub_404C50      proc near               ; CODE XREF: sub_4026E0+42B↑p
.text:00404C50
.text:00404C50 FileName        = dword ptr -9Ch
.text:00404C50 OpenFlag        = dword ptr -98h
.text:00404C50 var_94          = dword ptr -94h
.text:00404C50 var_8C          = dword ptr -8Ch
.text:00404C50 var_70          = dword ptr -70h
.text:00404C50 var_6C          = dword ptr -6Ch
.text:00404C50 var_10          = dword ptr -10h
.text:00404C50 var_C           = dword ptr -0Ch
.text:00404C50 var_8           = dword ptr -8
.text:00404C50 var_4           = dword ptr -4
.text:00404C50 arg_0           = dword ptr  4
.text:00404C50 arg_4           = dword ptr  8
.text:00404C50 arg_8           = dword ptr  0Ch
.text:00404C50
.text:00404C50                 sub     esp, 9Ch
.text:00404C56                 mov     [esp+9Ch+var_10], ebx
.text:00404C5D                 mov     ebx, [esp+9Ch+arg_8]
.text:00404C64                 mov     [esp+9Ch+var_8], edi
.text:00404C6B                 mov     edi, [esp+9Ch+arg_4]
.text:00404C72                 cmp     ebx, 0FFFFFFFFh
.text:00404C75                 mov     [esp+9Ch+var_4], ebp
.text:00404C7C                 mov     ebp, [esp+9Ch+arg_0]
.text:00404C83                 mov     [esp+9Ch+var_C], esi
.text:00404C8A                 jz      loc_404D30
.text:00404C90                 cmp     edi, 0FFFFFFFFh
.text:00404C93                 jz      loc_404D30
.text:00404C99
.text:00404C99 loc_404C99:                             ; CODE XREF: sub_404C50+101↓j
.text:00404C99                                         ; sub_404C50+10B↓j
.text:00404C99                 mov     [esp+9Ch+OpenFlag], 4 ; OpenFlag
.text:00404CA1                 mov     [esp+9Ch+FileName], ebp ; FileName
.text:00404CA4                 call    _open
.text:00404CA9                 test    eax, eax
.text:00404CAB                 mov     esi, eax
.text:00404CAD                 js      short loc_404D10
.text:00404CAF
.text:00404CAF loc_404CAF:                             ; CODE XREF: sub_404C50+D9↓j
.text:00404CAF                 mov     [esp+9Ch+var_94], ebx
.text:00404CB3                 mov     [esp+9Ch+OpenFlag], edi
.text:00404CB7                 mov     [esp+9Ch+FileName], esi
.text:00404CBA                 call    sub_40CCF0
.text:00404CBF                 test    eax, eax
.text:00404CC1                 jnz     short loc_404CF2
.text:00404CC3                 mov     [esp+9Ch+FileName], esi ; FileHandle
.text:00404CC6                 call    _close
.text:00404CCB                 mov     edx, eax
.text:00404CCD
.text:00404CCD loc_404CCD:                             ; CODE XREF: sub_404C50+BD↓j
.text:00404CCD                                         ; sub_404C50+DB↓j ...
.text:00404CCD                 mov     ebx, [esp+9Ch+var_10]
.text:00404CD4                 mov     eax, edx
.text:00404CD6                 mov     esi, [esp+9Ch+var_C]
.text:00404CDD                 mov     edi, [esp+9Ch+var_8]
.text:00404CE4                 mov     ebp, [esp+9Ch+var_4]
.text:00404CEB                 add     esp, 9Ch
.text:00404CF1                 retn
.text:00404CF2 ; ---------------------------------------------------------------------------
.text:00404CF2
.text:00404CF2 loc_404CF2:                             ; CODE XREF: sub_404C50+71↑j
.text:00404CF2                 call    _errno
.text:00404CF7                 mov     edi, [eax]
.text:00404CF9                 mov     [esp+9Ch+FileName], esi ; FileHandle
.text:00404CFC                 call    _close
.text:00404D01                 call    _errno
.text:00404D06                 mov     [eax], edi
.text:00404D08                 mov     edx, 0FFFFFFFFh
.text:00404D0D                 jmp     short loc_404CCD
.text:00404D0D ; ---------------------------------------------------------------------------
.text:00404D0F                 align 10h
.text:00404D10
.text:00404D10 loc_404D10:                             ; CODE XREF: sub_404C50+5D↑j
.text:00404D10                 mov     [esp+9Ch+OpenFlag], 5 ; OpenFlag
.text:00404D18                 mov     [esp+9Ch+FileName], ebp ; FileName
.text:00404D1B                 call    _open
.text:00404D20                 test    eax, eax
.text:00404D22                 mov     esi, eax
.text:00404D24                 mov     edx, 0FFFFFFFFh
.text:00404D29                 jns     short loc_404CAF
.text:00404D2B                 jmp     short loc_404CCD
.text:00404D2B ; ---------------------------------------------------------------------------
.text:00404D2D                 align 10h
.text:00404D30
.text:00404D30 loc_404D30:                             ; CODE XREF: sub_404C50+3A↑j
.text:00404D30                                         ; sub_404C50+43↑j
.text:00404D30                 mov     [esp+9Ch+FileName], ebp ; char *
.text:00404D33                 lea     edx, [esp+9Ch+var_8C]
.text:00404D37                 mov     [esp+9Ch+OpenFlag], edx ; int
.text:00404D3B                 call    sub_40C330
.text:00404D40                 test    eax, eax
.text:00404D42                 mov     edx, 1
.text:00404D47                 jnz     short loc_404CCD
.text:00404D49                 cmp     ebx, 0FFFFFFFFh
.text:00404D4C                 jz      short loc_404D60
.text:00404D4E
.text:00404D4E loc_404D4E:                             ; CODE XREF: sub_404C50+114↓j
.text:00404D4E                 cmp     edi, 0FFFFFFFFh
.text:00404D51                 jnz     loc_404C99
.text:00404D57                 mov     edi, [esp+9Ch+var_70]
.text:00404D5B                 jmp     loc_404C99
.text:00404D60 ; ---------------------------------------------------------------------------
.text:00404D60
.text:00404D60 loc_404D60:                             ; CODE XREF: sub_404C50+FC↑j
.text:00404D60                 mov     ebx, [esp+9Ch+var_6C]
.text:00404D64                 jmp     short loc_404D4E
.text:00404D64 sub_404C50      endp
.text:00404D64
.text:00404D64 ; ---------------------------------------------------------------------------
.text:00404D66                 align 10h
.text:00404D70 dword_404D70    dd 90002D2Dh, 7 dup(90909090h)
.text:00404D70                                         ; DATA XREF: sub_404FC0+E4↓o
.text:00404D90 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00404D90                                         ; DATA XREF: sub_404FC0+2FC↓o
.text:00404DBD                 db 13h dup(90h)
.text:00404DD0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00404DD0                                         ; DATA XREF: sub_404FC0:loc_405322↓o
.text:00404DFD                 db 13h dup(90h)
.text:00404E10 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00404E10                                         ; DATA XREF: sub_404FC0:loc_4053C0↓o
.text:00404E10                                         ; sub_404FC0:loc_405787↓o
.text:00404E36                 db 1Ah dup(90h)
.text:00404E50 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00404E50                                         ; DATA XREF: sub_404FC0+48E↓o
.text:00404E70 dword_404E70    dd 90909000h, 7 dup(90909090h)
.text:00404E70                                         ; DATA XREF: sub_404FC0:loc_405491↓o
.text:00404E90 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00404E90                                         ; DATA XREF: sub_404FC0:loc_4054AA↓o
.text:00404EB0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00404EB0                                         ; DATA XREF: sub_404FC0:loc_40558F↓o
.text:00404EB0                                         ; sub_404FC0:loc_4058BC↓o
.text:00404ED7                 db 19h dup(90h)
.text:00404EF0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00404EF0                                         ; DATA XREF: sub_404FC0:loc_405703↓o
.text:00404F1E                 db 12h dup(90h)
.text:00404F30 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00404F30                                         ; DATA XREF: sub_404FC0:loc_4057EF↓o
.text:00404F51 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00404F51                                         ; DATA XREF: sub_404FC0+93F↓o
.text:00404F6B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00404F6B                                         ; DATA XREF: sub_404FC0:loc_405937↓o
.text:00404F85 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00404F85                                         ; DATA XREF: sub_404FC0:loc_40595E↓o
.text:00404FA3 ; const char VarName[]
.text:00404FA3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_404FC0:loc_405B10↓o
.text:00404FB3                 align 10h
.text:00404FC0
.text:00404FC0 ; =============== S U B R O U T I N E =======================================
.text:00404FC0
.text:00404FC0
.text:00404FC0 ; int __cdecl sub_404FC0(int, int, char *Str, int, int, int, int, int)
.text:00404FC0 sub_404FC0      proc near               ; CODE XREF: sub_405B50+5A↓p
.text:00404FC0                                         ; .text:00405C3A↓p ...
.text:00404FC0
.text:00404FC0 Str1            = dword ptr -5Ch
.text:00404FC0 Str2            = dword ptr -58h
.text:00404FC0 MaxCount        = dword ptr -54h
.text:00404FC0 var_50          = dword ptr -50h
.text:00404FC0 var_4C          = dword ptr -4Ch
.text:00404FC0 var_3C          = dword ptr -3Ch
.text:00404FC0 var_38          = dword ptr -38h
.text:00404FC0 var_34          = dword ptr -34h
.text:00404FC0 var_30          = dword ptr -30h
.text:00404FC0 var_2C          = dword ptr -2Ch
.text:00404FC0 var_28          = dword ptr -28h
.text:00404FC0 var_24          = dword ptr -24h
.text:00404FC0 var_20          = dword ptr -20h
.text:00404FC0 var_1C          = dword ptr -1Ch
.text:00404FC0 var_18          = dword ptr -18h
.text:00404FC0 var_14          = dword ptr -14h
.text:00404FC0 arg_0           = dword ptr  4
.text:00404FC0 arg_4           = dword ptr  8
.text:00404FC0 Str             = dword ptr  0Ch
.text:00404FC0 arg_C           = dword ptr  10h
.text:00404FC0 arg_10          = dword ptr  14h
.text:00404FC0 arg_14          = dword ptr  18h
.text:00404FC0 arg_18          = dword ptr  1Ch
.text:00404FC0 arg_1C          = dword ptr  20h
.text:00404FC0
.text:00404FC0                 push    ebp
.text:00404FC1                 mov     eax, 0FFFFFFFFh
.text:00404FC6                 push    edi
.text:00404FC7                 push    esi
.text:00404FC8                 push    ebx
.text:00404FC9                 sub     esp, 4Ch
.text:00404FCC                 mov     esi, [esp+5Ch+Str]
.text:00404FD0                 mov     ebp, [esp+5Ch+arg_1C]
.text:00404FD4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00404FD7                 mov     ebx, [ebp+4]
.text:00404FDA                 setz    dl
.text:00404FDD                 movzx   ecx, dl
.text:00404FE0                 dec     ecx
.text:00404FE1                 and     ecx, ebx
.text:00404FE3                 mov     [esp+5Ch+var_14], ecx
.text:00404FE7                 mov     ecx, [esp+5Ch+arg_0]
.text:00404FEB                 test    ecx, ecx
.text:00404FED                 jle     loc_405117
.text:00404FF3                 mov     dword ptr [ebp+0Ch], 0
.text:00404FFA                 mov     ebx, [ebp+0]
.text:00404FFD                 test    ebx, ebx
.text:00404FFF                 jz      loc_405B30
.text:00405005                 mov     edi, [ebp+10h]
.text:00405008                 test    edi, edi
.text:0040500A                 jnz     short loc_405063
.text:0040500C                 lea     esi, [esi+0]
.text:00405010
.text:00405010 loc_405010:                             ; CODE XREF: sub_404FC0+B7C↓j
.text:00405010                 mov     [ebp+24h], ebx
.text:00405013                 mov     esi, [esp+5Ch+Str]
.text:00405017                 mov     [ebp+20h], ebx
.text:0040501A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040501E                 xor     ebx, ebx
.text:00405020                 mov     dword ptr [ebp+14h], 0
.text:00405027                 test    ecx, ecx
.text:00405029                 jz      loc_405B10
.text:0040502F
.text:0040502F loc_40502F:                             ; CODE XREF: sub_404FC0+B64↓j
.text:0040502F                 mov     ebx, 1
.text:00405034
.text:00405034 loc_405034:                             ; CODE XREF: sub_404FC0+B5E↓j
.text:00405034                 mov     [ebp+1Ch], ebx
.text:00405037                 mov     ecx, [esp+5Ch+Str]
.text:0040503B                 movzx   eax, byte ptr [ecx]
.text:0040503E                 cmp     al, 2Dh ; '-'
.text:00405040                 jz      loc_405B00
.text:00405046                 cmp     al, 2Bh ; '+'
.text:00405048                 jz      loc_405AE9
.text:0040504E                 xor     edx, edx
.text:00405050                 test    ebx, ebx
.text:00405052                 setz    dl
.text:00405055                 mov     [ebp+18h], edx
.text:00405058
.text:00405058 loc_405058:                             ; CODE XREF: sub_404FC0+B35↓j
.text:00405058                 mov     [esp+5Ch+Str], esi
.text:0040505C                 mov     dword ptr [ebp+10h], 1
.text:00405063
.text:00405063 loc_405063:                             ; CODE XREF: sub_404FC0+4A↑j
.text:00405063                 mov     eax, [ebp+14h]
.text:00405066                 test    eax, eax
.text:00405068                 jz      short loc_405073
.text:0040506A                 cmp     byte ptr [eax], 0
.text:0040506D                 jnz     loc_405150
.text:00405073
.text:00405073 loc_405073:                             ; CODE XREF: sub_404FC0+A8↑j
.text:00405073                 mov     ebx, [ebp+0]
.text:00405076                 cmp     [ebp+24h], ebx
.text:00405079                 jle     short loc_40507E
.text:0040507B                 mov     [ebp+24h], ebx
.text:0040507E
.text:0040507E loc_40507E:                             ; CODE XREF: sub_404FC0+B9↑j
.text:0040507E                 cmp     [ebp+20h], ebx
.text:00405081                 jle     short loc_405086
.text:00405083                 mov     [ebp+20h], ebx
.text:00405086
.text:00405086 loc_405086:                             ; CODE XREF: sub_404FC0+C1↑j
.text:00405086                 cmp     dword ptr [ebp+18h], 1
.text:0040508A                 jz      loc_405A60
.text:00405090
.text:00405090 loc_405090:                             ; CODE XREF: sub_404FC0+B13↓j
.text:00405090                 cmp     ebx, [esp+5Ch+arg_0]
.text:00405094                 jz      loc_405A44
.text:0040509A                 cld
.text:0040509B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040509F                 mov     edx, 3
.text:004050A4                 mov     edi, offset dword_404D70
.text:004050A9                 mov     esi, [ecx+ebx*4]
.text:004050AC                 mov     ecx, edx
.text:004050AE                 repe cmpsb
.text:004050B0                 jnz     short loc_4050EC
.text:004050B2                 mov     edx, [ebp+24h]
.text:004050B5                 lea     eax, [ebx+1]
.text:004050B8                 cmp     [ebp+20h], edx
.text:004050BB                 mov     [ebp+0], eax
.text:004050BE                 jz      loc_405A58
.text:004050C4                 cmp     edx, eax
.text:004050C6                 jz      short loc_4050E0
.text:004050C8                 mov     [esp+5Ch+Str2], ebp
.text:004050CC                 mov     ebx, [esp+5Ch+arg_4]
.text:004050D0                 mov     [esp+5Ch+Str1], ebx
.text:004050D3                 call    sub_405C70
.text:004050D8                 nop
.text:004050D9                 lea     esi, [esi+0]
.text:004050E0
.text:004050E0 loc_4050E0:                             ; CODE XREF: sub_404FC0+106↑j
.text:004050E0                                         ; sub_404FC0+A9B↓j
.text:004050E0                 mov     eax, [esp+5Ch+arg_0]
.text:004050E4                 mov     ebx, eax
.text:004050E6                 mov     [ebp+24h], eax
.text:004050E9                 mov     [ebp+0], eax
.text:004050EC
.text:004050EC loc_4050EC:                             ; CODE XREF: sub_404FC0+F0↑j
.text:004050EC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004050F0                 jz      loc_405A44
.text:004050F6                 mov     esi, [esp+5Ch+arg_4]
.text:004050FA                 mov     eax, [esi+ebx*4]
.text:004050FD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00405100                 jz      short loc_405127
.text:00405102
.text:00405102 loc_405102:                             ; CODE XREF: sub_404FC0+16D↓j
.text:00405102                 mov     edx, [ebp+18h]
.text:00405105                 test    edx, edx
.text:00405107                 jz      short loc_405120
.text:00405109                 mov     [ebp+0Ch], eax
.text:0040510C                 lea     edi, [ebx+1]
.text:0040510F                 mov     eax, 1
.text:00405114                 mov     [ebp+0], edi
.text:00405117
.text:00405117 loc_405117:                             ; CODE XREF: sub_404FC0+2D↑j
.text:00405117                                         ; sub_404FC0+165↓j ...
.text:00405117                 add     esp, 4Ch
.text:0040511A                 pop     ebx
.text:0040511B                 pop     esi
.text:0040511C                 pop     edi
.text:0040511D                 pop     ebp
.text:0040511E                 retn
.text:0040511E ; ---------------------------------------------------------------------------
.text:0040511F                 align 10h
.text:00405120
.text:00405120 loc_405120:                             ; CODE XREF: sub_404FC0+147↑j
.text:00405120                                         ; sub_404FC0+A8A↓j ...
.text:00405120                 mov     eax, 0FFFFFFFFh
.text:00405125                 jmp     short loc_405117
.text:00405127 ; ---------------------------------------------------------------------------
.text:00405127
.text:00405127 loc_405127:                             ; CODE XREF: sub_404FC0+140↑j
.text:00405127                 movzx   edx, byte ptr [eax+1]
.text:0040512B                 test    dl, dl
.text:0040512D                 jz      short loc_405102
.text:0040512F                 mov     ebx, [esp+5Ch+arg_C]
.text:00405133                 xor     ecx, ecx
.text:00405135                 test    ebx, ebx
.text:00405137                 jz      short loc_405142
.text:00405139                 cmp     dl, 2Dh ; '-'
.text:0040513C                 jz      loc_405A3A
.text:00405142
.text:00405142 loc_405142:                             ; CODE XREF: sub_404FC0+177↑j
.text:00405142                                         ; sub_404FC0+A7F↓j
.text:00405142                 lea     esi, [ecx+eax+1]
.text:00405146                 mov     [ebp+14h], esi
.text:00405149                 lea     esi, [esi+0]
.text:00405150
.text:00405150 loc_405150:                             ; CODE XREF: sub_404FC0+AD↑j
.text:00405150                 mov     ecx, [esp+5Ch+arg_C]
.text:00405154                 test    ecx, ecx
.text:00405156                 jz      loc_4054E0
.text:0040515C                 mov     edx, [ebp+0]
.text:0040515F                 mov     edi, [esp+5Ch+arg_4]
.text:00405163                 mov     eax, [edi+edx*4]
.text:00405166                 movzx   edx, byte ptr [eax+1]
.text:0040516A                 cmp     dl, 2Dh ; '-'
.text:0040516D                 jz      short loc_405185
.text:0040516F                 mov     ebx, [esp+5Ch+arg_14]
.text:00405173                 test    ebx, ebx
.text:00405175                 jz      loc_4054E0
.text:0040517B                 cmp     byte ptr [eax+2], 0
.text:0040517F                 jz      loc_405A1A
.text:00405185
.text:00405185 loc_405185:                             ; CODE XREF: sub_404FC0+1AD↑j
.text:00405185                                         ; sub_404FC0+A75↓j
.text:00405185                 mov     [esp+5Ch+var_18], 0
.text:0040518D                 mov     ecx, [ebp+14h]
.text:00405190                 mov     [esp+5Ch+var_1C], 0
.text:00405198                 mov     [esp+5Ch+var_20], 0
.text:004051A0                 mov     edi, ecx
.text:004051A2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004051AA                 movzx   eax, byte ptr [ecx]
.text:004051AD                 test    al, al
.text:004051AF                 jz      short loc_4051CC
.text:004051B1                 cmp     al, 3Dh ; '='
.text:004051B3                 jz      short loc_4051CC
.text:004051B5                 lea     esi, [esi+0]
.text:004051B9                 lea     edi, [edi+0]
.text:004051C0
.text:004051C0 loc_4051C0:                             ; CODE XREF: sub_404FC0+20A↓j
.text:004051C0                 inc     edi
.text:004051C1                 movzx   eax, byte ptr [edi]
.text:004051C4                 test    al, al
.text:004051C6                 jz      short loc_4051CC
.text:004051C8                 cmp     al, 3Dh ; '='
.text:004051CA                 jnz     short loc_4051C0
.text:004051CC
.text:004051CC loc_4051CC:                             ; CODE XREF: sub_404FC0+1EF↑j
.text:004051CC                                         ; sub_404FC0+1F3↑j ...
.text:004051CC                 mov     [esp+5Ch+var_28], 0
.text:004051D4                 mov     esi, [esp+5Ch+arg_C]
.text:004051D8                 mov     ebx, [esi]
.text:004051DA                 test    ebx, ebx
.text:004051DC                 mov     edx, ebx
.text:004051DE                 jz      loc_405400
.text:004051E4                 lea     esi, [esi+0]
.text:004051EA                 lea     edi, [edi+0]
.text:004051F0
.text:004051F0 loc_4051F0:                             ; CODE XREF: sub_404FC0+25E↓j
.text:004051F0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004051F4                 mov     ebx, edi
.text:004051F6                 sub     ebx, ecx
.text:004051F8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004051FC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004051FF                 call    strncmp
.text:00405204                 test    eax, eax
.text:00405206                 jz      loc_405996
.text:0040520C
.text:0040520C loc_40520C:                             ; CODE XREF: sub_404FC0+A0F↓j
.text:0040520C                                         ; sub_404FC0+A24↓j ...
.text:0040520C                 inc     [esp+5Ch+var_28]
.text:00405210                 add     esi, 10h
.text:00405213                 mov     ecx, [esi]
.text:00405215                 test    ecx, ecx
.text:00405217                 mov     edx, ecx
.text:00405219                 jz      short loc_405220
.text:0040521B                 mov     ecx, [ebp+14h]
.text:0040521E                 jmp     short loc_4051F0
.text:00405220 ; ---------------------------------------------------------------------------
.text:00405220
.text:00405220 loc_405220:                             ; CODE XREF: sub_404FC0+259↑j
.text:00405220                                         ; sub_404FC0+A55↓j
.text:00405220                 mov     esi, [esp+5Ch+var_20]
.text:00405224                 test    esi, esi
.text:00405226                 jz      short loc_405234
.text:00405228                 mov     edx, [esp+5Ch+var_1C]
.text:0040522C                 test    edx, edx
.text:0040522E                 jz      loc_405940
.text:00405234
.text:00405234 loc_405234:                             ; CODE XREF: sub_404FC0+266↑j
.text:00405234                 mov     eax, [esp+5Ch+var_18]
.text:00405238                 test    eax, eax
.text:0040523A                 jz      loc_405400
.text:00405240                 mov     ecx, [ebp+0]
.text:00405243                 lea     eax, [ecx+1]
.text:00405246                 mov     [ebp+0], eax
.text:00405249                 cmp     byte ptr [edi], 0
.text:0040524C                 jz      loc_405360
.text:00405252                 mov     ecx, [esp+5Ch+var_18]
.text:00405256                 mov     esi, [ecx+4]
.text:00405259                 test    esi, esi
.text:0040525B                 jz      short loc_4052A6
.text:0040525D                 lea     ebx, [edi+1]
.text:00405260                 mov     [ebp+0Ch], ebx
.text:00405263
.text:00405263 loc_405263:                             ; CODE XREF: sub_404FC0+3A8↓j
.text:00405263                                         ; sub_404FC0+3C4↓j
.text:00405263                 mov     ebx, [ebp+14h]
.text:00405266                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00405269                 call    strlen
.text:0040526E                 add     [ebp+14h], eax
.text:00405271                 mov     esi, [esp+5Ch+arg_10]
.text:00405275                 test    esi, esi
.text:00405277                 jz      short loc_405283
.text:00405279                 mov     ebp, [esp+5Ch+var_24]
.text:0040527D                 mov     ecx, [esp+5Ch+arg_10]
.text:00405281                 mov     [ecx], ebp
.text:00405283
.text:00405283 loc_405283:                             ; CODE XREF: sub_404FC0+2B7↑j
.text:00405283                 mov     eax, [esp+5Ch+var_18]
.text:00405287                 mov     ecx, [eax+8]
.text:0040528A                 test    ecx, ecx
.text:0040528C                 jnz     short loc_40529A
.text:0040528E                 mov     ecx, [esp+5Ch+var_18]
.text:00405292
.text:00405292 loc_405292:                             ; CODE XREF: sub_404FC0+723↓j
.text:00405292                 mov     eax, [ecx+0Ch]
.text:00405295                 jmp     loc_405117
.text:0040529A ; ---------------------------------------------------------------------------
.text:0040529A
.text:0040529A loc_40529A:                             ; CODE XREF: sub_404FC0+2CC↑j
.text:0040529A                                         ; sub_404FC0+719↓j
.text:0040529A                 mov     esi, [eax+0Ch]
.text:0040529D                 xor     eax, eax
.text:0040529F                 mov     [ecx], esi
.text:004052A1                 jmp     loc_405117
.text:004052A6 ; ---------------------------------------------------------------------------
.text:004052A6
.text:004052A6 loc_4052A6:                             ; CODE XREF: sub_404FC0+29B↑j
.text:004052A6                 mov     edi, [esp+5Ch+var_14]
.text:004052AA                 test    edi, edi
.text:004052AC                 jz      short loc_405300
.text:004052AE                 mov     esi, [esp+5Ch+arg_4]
.text:004052B2                 mov     edx, [esi+eax*4-4]
.text:004052B6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004052BA                 jz      short loc_405322
.text:004052BC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004052C3                 call    ds:libintl_gettext
.text:004052C9                 mov     edx, [esp+5Ch+var_18]
.text:004052CD                 mov     edi, [edx]
.text:004052CF                 mov     [esp+5Ch+var_4C], edi
.text:004052D3                 mov     ebx, [ebp+0]
.text:004052D6                 mov     edi, [esp+5Ch+arg_4]
.text:004052DA                 mov     ecx, [edi+ebx*4-4]
.text:004052DE                 movsx   esi, byte ptr [ecx]
.text:004052E1                 mov     ecx, ds:_iob
.text:004052E7                 add     ecx, 40h ; '@'
.text:004052EA                 mov     [esp+5Ch+var_50], esi
.text:004052EE                 mov     ebx, [edi]
.text:004052F0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004052F4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004052F7                 mov     [esp+5Ch+MaxCount], ebx
.text:004052FB                 call    fprintf
.text:00405300
.text:00405300 loc_405300:                             ; CODE XREF: sub_404FC0+2EC↑j
.text:00405300                                         ; sub_404FC0+398↓j
.text:00405300                 mov     ecx, [ebp+14h]
.text:00405303                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00405306                 call    strlen
.text:0040530B                 add     [ebp+14h], eax
.text:0040530E                 mov     eax, [esp+5Ch+var_18]
.text:00405312                 mov     esi, [eax+0Ch]
.text:00405315                 mov     [ebp+8], esi
.text:00405318
.text:00405318 loc_405318:                             ; CODE XREF: sub_404FC0+4E5↓j
.text:00405318                                         ; sub_404FC0+73E↓j ...
.text:00405318                 mov     eax, 3Fh ; '?'
.text:0040531D                 jmp     loc_405117
.text:00405322 ; ---------------------------------------------------------------------------
.text:00405322
.text:00405322 loc_405322:                             ; CODE XREF: sub_404FC0+2FA↑j
.text:00405322                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00405329                 call    ds:libintl_gettext
.text:0040532F                 mov     edx, [esp+5Ch+var_18]
.text:00405333                 mov     edi, [esp+5Ch+arg_4]
.text:00405337                 mov     ecx, ds:_iob
.text:0040533D                 mov     esi, [edx]
.text:0040533F                 add     ecx, 40h ; '@'
.text:00405342                 mov     [esp+5Ch+var_50], esi
.text:00405346                 mov     ebx, [edi]
.text:00405348                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040534C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040534F                 mov     [esp+5Ch+MaxCount], ebx
.text:00405353                 call    fprintf
.text:00405358                 jmp     short loc_405300
.text:00405358 ; ---------------------------------------------------------------------------
.text:0040535A                 align 10h
.text:00405360
.text:00405360 loc_405360:                             ; CODE XREF: sub_404FC0+28C↑j
.text:00405360                 mov     ebx, [esp+5Ch+var_18]
.text:00405364                 cmp     dword ptr [ebx+4], 1
.text:00405368                 jnz     loc_405263
.text:0040536E                 cmp     eax, [esp+5Ch+arg_0]
.text:00405372                 jge     short loc_405389
.text:00405374                 mov     ebx, [esp+5Ch+arg_4]
.text:00405378                 lea     edi, [ecx+2]
.text:0040537B                 mov     [ebp+0], edi
.text:0040537E                 mov     esi, [ebx+eax*4]
.text:00405381                 mov     [ebp+0Ch], esi
.text:00405384                 jmp     loc_405263
.text:00405389 ; ---------------------------------------------------------------------------
.text:00405389
.text:00405389 loc_405389:                             ; CODE XREF: sub_404FC0+3B2↑j
.text:00405389                 mov     edx, [esp+5Ch+var_14]
.text:0040538D                 test    edx, edx
.text:0040538F                 jnz     short loc_4053C0
.text:00405391
.text:00405391 loc_405391:                             ; CODE XREF: sub_404FC0+437↓j
.text:00405391                 mov     edx, [ebp+14h]
.text:00405394                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405397                 call    strlen
.text:0040539C                 add     [ebp+14h], eax
.text:0040539F                 mov     eax, [esp+5Ch+var_18]
.text:004053A3                 mov     edi, [eax+0Ch]
.text:004053A6                 mov     [ebp+8], edi
.text:004053A9
.text:004053A9 loc_4053A9:                             ; CODE XREF: sub_404FC0+7C2↓j
.text:004053A9                 mov     ebp, [esp+5Ch+Str]
.text:004053AD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004053B1                 setnz   bl
.text:004053B4                 movzx   esi, bl
.text:004053B7                 lea     eax, [esi+esi*4+3Ah]
.text:004053BB                 jmp     loc_405117
.text:004053C0 ; ---------------------------------------------------------------------------
.text:004053C0
.text:004053C0 loc_4053C0:                             ; CODE XREF: sub_404FC0+3CF↑j
.text:004053C0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004053C7                 call    ds:libintl_gettext
.text:004053CD                 mov     ecx, [ebp+0]
.text:004053D0                 mov     esi, [esp+5Ch+arg_4]
.text:004053D4                 mov     ebx, [esi+ecx*4-4]
.text:004053D8                 mov     ecx, ds:_iob
.text:004053DE                 mov     [esp+5Ch+var_50], ebx
.text:004053E2                 mov     edi, [esi]
.text:004053E4                 add     ecx, 40h ; '@'
.text:004053E7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004053EB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004053EE                 mov     [esp+5Ch+MaxCount], edi
.text:004053F2                 call    fprintf
.text:004053F7                 jmp     short loc_405391
.text:004053F7 ; ---------------------------------------------------------------------------
.text:004053F9                 align 10h
.text:00405400
.text:00405400 loc_405400:                             ; CODE XREF: sub_404FC0+21E↑j
.text:00405400                                         ; sub_404FC0+27A↑j
.text:00405400                 mov     eax, [esp+5Ch+arg_14]
.text:00405404                 test    eax, eax
.text:00405406                 jz      short loc_405436
.text:00405408                 mov     ebx, [ebp+0]
.text:0040540B                 mov     esi, [esp+5Ch+arg_4]
.text:0040540F                 mov     edi, [esi+ebx*4]
.text:00405412                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00405416                 jz      short loc_405439
.text:00405418                 mov     ecx, [ebp+14h]
.text:0040541B                 mov     edx, [esp+5Ch+Str]
.text:0040541F                 movsx   ebx, byte ptr [ecx]
.text:00405422                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405425                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00405429                 call    strchr
.text:0040542E                 test    eax, eax
.text:00405430                 jnz     loc_4054E0
.text:00405436
.text:00405436 loc_405436:                             ; CODE XREF: sub_404FC0+446↑j
.text:00405436                 mov     ebx, [ebp+0]
.text:00405439
.text:00405439 loc_405439:                             ; CODE XREF: sub_404FC0+456↑j
.text:00405439                 mov     eax, [esp+5Ch+var_14]
.text:0040543D                 test    eax, eax
.text:0040543F                 jz      short loc_405491
.text:00405441                 mov     esi, [esp+5Ch+arg_4]
.text:00405445                 mov     edi, [esi+ebx*4]
.text:00405448                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040544C                 jz      short loc_4054AA
.text:0040544E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00405455                 call    ds:libintl_gettext
.text:0040545B                 mov     edi, [ebp+14h]
.text:0040545E                 mov     [esp+5Ch+var_4C], edi
.text:00405462                 mov     ebx, [ebp+0]
.text:00405465                 mov     edi, [esp+5Ch+arg_4]
.text:00405469                 mov     esi, [edi+ebx*4]
.text:0040546C                 movsx   ecx, byte ptr [esi]
.text:0040546F                 mov     esi, ds:_iob
.text:00405475                 add     esi, 40h ; '@'
.text:00405478                 mov     [esp+5Ch+var_50], ecx
.text:0040547C                 mov     ebx, [edi]
.text:0040547E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405482                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00405485                 mov     [esp+5Ch+MaxCount], ebx
.text:00405489                 call    fprintf
.text:0040548E
.text:0040548E loc_40548E:                             ; CODE XREF: sub_404FC0+51D↓j
.text:0040548E                 mov     ebx, [ebp+0]
.text:00405491
.text:00405491 loc_405491:                             ; CODE XREF: sub_404FC0+47F↑j
.text:00405491                 mov     dword ptr [ebp+14h], offset dword_404E70
.text:00405498                 lea     edx, [ebx+1]
.text:0040549B                 mov     [ebp+0], edx
.text:0040549E
.text:0040549E loc_40549E:                             ; CODE XREF: sub_404FC0+999↓j
.text:0040549E                 mov     dword ptr [ebp+8], 0
.text:004054A5                 jmp     loc_405318
.text:004054AA ; ---------------------------------------------------------------------------
.text:004054AA
.text:004054AA loc_4054AA:                             ; CODE XREF: sub_404FC0+48C↑j
.text:004054AA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004054B1                 call    ds:libintl_gettext
.text:004054B7                 mov     ecx, [ebp+14h]
.text:004054BA                 mov     edi, [esp+5Ch+arg_4]
.text:004054BE                 mov     edx, ds:_iob
.text:004054C4                 mov     [esp+5Ch+var_50], ecx
.text:004054C8                 mov     ebx, [edi]
.text:004054CA                 add     edx, 40h ; '@'
.text:004054CD                 mov     [esp+5Ch+Str2], eax ; Format
.text:004054D1                 mov     [esp+5Ch+MaxCount], ebx
.text:004054D5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004054D8                 call    fprintf
.text:004054DD                 jmp     short loc_40548E
.text:004054DD ; ---------------------------------------------------------------------------
.text:004054DF                 align 10h
.text:004054E0
.text:004054E0 loc_4054E0:                             ; CODE XREF: sub_404FC0+196↑j
.text:004054E0                                         ; sub_404FC0+1B5↑j ...
.text:004054E0                 mov     esi, [ebp+14h]
.text:004054E3                 movzx   ebx, byte ptr [esi]
.text:004054E6                 inc     esi
.text:004054E7                 mov     [ebp+14h], esi
.text:004054EA                 mov     ecx, [esp+5Ch+Str]
.text:004054EE                 movsx   esi, bl
.text:004054F1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004054F5                 mov     edi, esi
.text:004054F7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004054FA                 call    strchr
.text:004054FF                 mov     ecx, [ebp+14h]
.text:00405502                 cmp     byte ptr [ecx], 0
.text:00405505                 jnz     short loc_40550A
.text:00405507                 inc     dword ptr [ebp+0]
.text:0040550A
.text:0040550A loc_40550A:                             ; CODE XREF: sub_404FC0+545↑j
.text:0040550A                 test    eax, eax
.text:0040550C                 jz      loc_4058F0
.text:00405512                 cmp     bl, 3Ah ; ':'
.text:00405515                 jz      loc_4058F0
.text:0040551B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040551E                 jz      loc_4055D6
.text:00405524                 movzx   edx, byte ptr [eax+1]
.text:00405528
.text:00405528 loc_405528:                             ; CODE XREF: sub_404FC0+61D↓j
.text:00405528                 cmp     dl, 3Ah ; ':'
.text:0040552B                 jz      short loc_405534
.text:0040552D
.text:0040552D loc_40552D:                             ; CODE XREF: sub_404FC0+590↓j
.text:0040552D                 mov     eax, esi
.text:0040552F                 jmp     loc_405117
.text:00405534 ; ---------------------------------------------------------------------------
.text:00405534
.text:00405534 loc_405534:                             ; CODE XREF: sub_404FC0+56B↑j
.text:00405534                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00405538                 jz      loc_4055C1
.text:0040553E                 cmp     byte ptr [ecx], 0
.text:00405541                 jz      short loc_405552
.text:00405543
.text:00405543 loc_405543:                             ; CODE XREF: sub_404FC0+604↓j
.text:00405543                 inc     dword ptr [ebp+0]
.text:00405546                 mov     [ebp+0Ch], ecx
.text:00405549
.text:00405549 loc_405549:                             ; CODE XREF: sub_404FC0+5AB↓j
.text:00405549                                         ; sub_404FC0+5C6↓j ...
.text:00405549                 mov     dword ptr [ebp+14h], 0
.text:00405550                 jmp     short loc_40552D
.text:00405552 ; ---------------------------------------------------------------------------
.text:00405552
.text:00405552 loc_405552:                             ; CODE XREF: sub_404FC0+581↑j
.text:00405552                 mov     ecx, [ebp+0]
.text:00405555                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405559                 jz      short loc_40556D
.text:0040555B                 mov     eax, [esp+5Ch+arg_4]
.text:0040555F                 lea     edx, [ecx+1]
.text:00405562                 mov     [ebp+0], edx
.text:00405565                 mov     ebx, [eax+ecx*4]
.text:00405568                 mov     [ebp+0Ch], ebx
.text:0040556B                 jmp     short loc_405549
.text:0040556D ; ---------------------------------------------------------------------------
.text:0040556D
.text:0040556D loc_40556D:                             ; CODE XREF: sub_404FC0+599↑j
.text:0040556D                 mov     ecx, [esp+5Ch+var_14]
.text:00405571                 test    ecx, ecx
.text:00405573                 jnz     short loc_40558F
.text:00405575
.text:00405575 loc_405575:                             ; CODE XREF: sub_404FC0+5FF↓j
.text:00405575                 mov     [ebp+8], edi
.text:00405578                 mov     edi, [esp+5Ch+Str]
.text:0040557C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040557F                 jz      short loc_405588
.text:00405581                 mov     esi, 3Fh ; '?'
.text:00405586                 jmp     short loc_405549
.text:00405588 ; ---------------------------------------------------------------------------
.text:00405588
.text:00405588 loc_405588:                             ; CODE XREF: sub_404FC0+5BF↑j
.text:00405588                 mov     esi, 3Ah ; ':'
.text:0040558D                 jmp     short loc_405549
.text:0040558F ; ---------------------------------------------------------------------------
.text:0040558F
.text:0040558F loc_40558F:                             ; CODE XREF: sub_404FC0+5B3↑j
.text:0040558F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00405596                 call    ds:libintl_gettext
.text:0040559C                 mov     [esp+5Ch+var_50], edi
.text:004055A0                 mov     ebx, [esp+5Ch+arg_4]
.text:004055A4                 mov     edx, ds:_iob
.text:004055AA                 mov     esi, [ebx]
.text:004055AC                 add     edx, 40h ; '@'
.text:004055AF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004055B3                 mov     [esp+5Ch+MaxCount], esi
.text:004055B7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004055BA                 call    fprintf
.text:004055BF                 jmp     short loc_405575
.text:004055C1 ; ---------------------------------------------------------------------------
.text:004055C1
.text:004055C1 loc_4055C1:                             ; CODE XREF: sub_404FC0+578↑j
.text:004055C1                 cmp     byte ptr [ecx], 0
.text:004055C4                 jnz     loc_405543
.text:004055CA                 mov     dword ptr [ebp+0Ch], 0
.text:004055D1                 jmp     loc_405549
.text:004055D6 ; ---------------------------------------------------------------------------
.text:004055D6
.text:004055D6 loc_4055D6:                             ; CODE XREF: sub_404FC0+55E↑j
.text:004055D6                 movzx   edx, byte ptr [eax+1]
.text:004055DA                 cmp     dl, 3Bh ; ';'
.text:004055DD                 jnz     loc_405528
.text:004055E3                 mov     [esp+5Ch+var_2C], 0
.text:004055EB                 mov     [esp+5Ch+var_30], 0
.text:004055F3                 mov     [esp+5Ch+var_34], 0
.text:004055FB                 mov     [esp+5Ch+var_38], 0
.text:00405603                 cmp     byte ptr [ecx], 0
.text:00405606                 jz      loc_40587B
.text:0040560C                 inc     dword ptr [ebp+0]
.text:0040560F                 mov     [ebp+0Ch], ecx
.text:00405612
.text:00405612 loc_405612:                             ; CODE XREF: sub_404FC0+8D4↓j
.text:00405612                 mov     edi, [ebp+0Ch]
.text:00405615                 mov     [ebp+14h], edi
.text:00405618                 movzx   eax, byte ptr [edi]
.text:0040561B                 test    al, al
.text:0040561D                 jz      short loc_40562F
.text:0040561F                 cmp     al, 3Dh ; '='
.text:00405621                 jz      short loc_40562F
.text:00405623
.text:00405623 loc_405623:                             ; CODE XREF: sub_404FC0+66D↓j
.text:00405623                 inc     edi
.text:00405624                 movzx   eax, byte ptr [edi]
.text:00405627                 test    al, al
.text:00405629                 jz      short loc_40562F
.text:0040562B                 cmp     al, 3Dh ; '='
.text:0040562D                 jnz     short loc_405623
.text:0040562F
.text:0040562F loc_40562F:                             ; CODE XREF: sub_404FC0+65D↑j
.text:0040562F                                         ; sub_404FC0+661↑j ...
.text:0040562F                 mov     [esp+5Ch+var_3C], 0
.text:00405637                 mov     esi, [esp+5Ch+arg_C]
.text:0040563B                 mov     eax, [esi]
.text:0040563D                 test    eax, eax
.text:0040563F                 jz      loc_4057C0
.text:00405645                 mov     ecx, eax
.text:00405647
.text:00405647 loc_405647:                             ; CODE XREF: sub_404FC0+6B3↓j
.text:00405647                 mov     ebx, [ebp+14h]
.text:0040564A                 mov     eax, edi
.text:0040564C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040564F                 sub     eax, ebx
.text:00405651                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00405655                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00405659                 call    strncmp
.text:0040565E                 test    eax, eax
.text:00405660                 jz      loc_405827
.text:00405666
.text:00405666 loc_405666:                             ; CODE XREF: sub_404FC0+88C↓j
.text:00405666                                         ; sub_404FC0+89D↓j
.text:00405666                 inc     [esp+5Ch+var_3C]
.text:0040566A                 add     esi, 10h
.text:0040566D                 mov     edx, [esi]
.text:0040566F                 test    edx, edx
.text:00405671                 mov     ecx, edx
.text:00405673                 jnz     short loc_405647
.text:00405675
.text:00405675 loc_405675:                             ; CODE XREF: sub_404FC0+8B6↓j
.text:00405675                 mov     esi, [esp+5Ch+var_34]
.text:00405679                 test    esi, esi
.text:0040567B                 jz      short loc_405689
.text:0040567D                 mov     ebx, [esp+5Ch+var_30]
.text:00405681                 test    ebx, ebx
.text:00405683                 jz      loc_4057D1
.text:00405689
.text:00405689 loc_405689:                             ; CODE XREF: sub_404FC0+6BB↑j
.text:00405689                 mov     esi, [esp+5Ch+var_2C]
.text:0040568D                 test    esi, esi
.text:0040568F                 jz      loc_4057C0
.text:00405695                 cmp     byte ptr [edi], 0
.text:00405698                 jz      loc_405740
.text:0040569E                 mov     ecx, [esp+5Ch+var_2C]
.text:004056A2                 mov     ebx, [ecx+4]
.text:004056A5                 test    ebx, ebx
.text:004056A7                 jz      short loc_4056E8
.text:004056A9                 lea     edx, [edi+1]
.text:004056AC                 mov     [ebp+0Ch], edx
.text:004056AF
.text:004056AF loc_4056AF:                             ; CODE XREF: sub_404FC0+788↓j
.text:004056AF                                         ; sub_404FC0+7A7↓j
.text:004056AF                 mov     edi, [ebp+14h]
.text:004056B2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004056B5                 call    strlen
.text:004056BA                 add     [ebp+14h], eax
.text:004056BD                 mov     eax, [esp+5Ch+arg_10]
.text:004056C1                 test    eax, eax
.text:004056C3                 jz      short loc_4056D0
.text:004056C5                 mov     edx, [esp+5Ch+var_38]
.text:004056C9                 mov     ebp, [esp+5Ch+arg_10]
.text:004056CD                 mov     [ebp+0], edx
.text:004056D0
.text:004056D0 loc_4056D0:                             ; CODE XREF: sub_404FC0+703↑j
.text:004056D0                 mov     eax, [esp+5Ch+var_2C]
.text:004056D4                 mov     ecx, [eax+8]
.text:004056D7                 test    ecx, ecx
.text:004056D9                 jnz     loc_40529A
.text:004056DF                 mov     ecx, [esp+5Ch+var_2C]
.text:004056E3                 jmp     loc_405292
.text:004056E8 ; ---------------------------------------------------------------------------
.text:004056E8
.text:004056E8 loc_4056E8:                             ; CODE XREF: sub_404FC0+6E7↑j
.text:004056E8                 mov     eax, [esp+5Ch+var_14]
.text:004056EC                 test    eax, eax
.text:004056EE                 jnz     short loc_405703
.text:004056F0
.text:004056F0 loc_4056F0:                             ; CODE XREF: sub_404FC0+779↓j
.text:004056F0                 mov     ecx, [ebp+14h]
.text:004056F3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004056F6                 call    strlen
.text:004056FB                 add     [ebp+14h], eax
.text:004056FE                 jmp     loc_405318
.text:00405703 ; ---------------------------------------------------------------------------
.text:00405703
.text:00405703 loc_405703:                             ; CODE XREF: sub_404FC0+72E↑j
.text:00405703                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040570A                 call    ds:libintl_gettext
.text:00405710                 mov     edx, [esp+5Ch+var_2C]
.text:00405714                 mov     ebx, [esp+5Ch+arg_4]
.text:00405718                 mov     edi, [edx]
.text:0040571A                 mov     [esp+5Ch+var_50], edi
.text:0040571E                 mov     edi, ds:_iob
.text:00405724                 mov     esi, [ebx]
.text:00405726                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040572A                 add     edi, 40h ; '@'
.text:0040572D                 mov     [esp+5Ch+MaxCount], esi
.text:00405731                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00405734                 call    fprintf
.text:00405739                 jmp     short loc_4056F0
.text:00405739 ; ---------------------------------------------------------------------------
.text:0040573B                 align 10h
.text:00405740
.text:00405740 loc_405740:                             ; CODE XREF: sub_404FC0+6D8↑j
.text:00405740                 mov     esi, [esp+5Ch+var_2C]
.text:00405744                 cmp     dword ptr [esi+4], 1
.text:00405748                 jnz     loc_4056AF
.text:0040574E                 mov     ecx, [ebp+0]
.text:00405751                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405755                 jge     short loc_40576C
.text:00405757                 mov     eax, [esp+5Ch+arg_4]
.text:0040575B                 lea     ebx, [ecx+1]
.text:0040575E                 mov     [ebp+0], ebx
.text:00405761                 mov     edi, [eax+ecx*4]
.text:00405764                 mov     [ebp+0Ch], edi
.text:00405767                 jmp     loc_4056AF
.text:0040576C ; ---------------------------------------------------------------------------
.text:0040576C
.text:0040576C loc_40576C:                             ; CODE XREF: sub_404FC0+795↑j
.text:0040576C                 mov     edx, [esp+5Ch+var_14]
.text:00405770                 test    edx, edx
.text:00405772                 jnz     short loc_405787
.text:00405774
.text:00405774 loc_405774:                             ; CODE XREF: sub_404FC0+7FE↓j
.text:00405774                 mov     edx, [ebp+14h]
.text:00405777                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040577A                 call    strlen
.text:0040577F                 add     [ebp+14h], eax
.text:00405782                 jmp     loc_4053A9
.text:00405787 ; ---------------------------------------------------------------------------
.text:00405787
.text:00405787 loc_405787:                             ; CODE XREF: sub_404FC0+7B2↑j
.text:00405787                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040578E                 call    ds:libintl_gettext
.text:00405794                 mov     ecx, [ebp+0]
.text:00405797                 mov     ebx, [esp+5Ch+arg_4]
.text:0040579B                 mov     edi, [ebx+ecx*4-4]
.text:0040579F                 mov     ecx, ds:_iob
.text:004057A5                 mov     [esp+5Ch+var_50], edi
.text:004057A9                 mov     esi, [ebx]
.text:004057AB                 add     ecx, 40h ; '@'
.text:004057AE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004057B2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004057B5                 mov     [esp+5Ch+MaxCount], esi
.text:004057B9                 call    fprintf
.text:004057BE                 jmp     short loc_405774
.text:004057C0 ; ---------------------------------------------------------------------------
.text:004057C0
.text:004057C0 loc_4057C0:                             ; CODE XREF: sub_404FC0+67F↑j
.text:004057C0                                         ; sub_404FC0+6CF↑j
.text:004057C0                 mov     dword ptr [ebp+14h], 0
.text:004057C7                 mov     eax, 57h ; 'W'
.text:004057CC                 jmp     loc_405117
.text:004057D1 ; ---------------------------------------------------------------------------
.text:004057D1
.text:004057D1 loc_4057D1:                             ; CODE XREF: sub_404FC0+6C3↑j
.text:004057D1                 mov     edi, [esp+5Ch+var_14]
.text:004057D5                 test    edi, edi
.text:004057D7                 jnz     short loc_4057EF
.text:004057D9
.text:004057D9 loc_4057D9:                             ; CODE XREF: sub_404FC0+865↓j
.text:004057D9                 mov     edx, [ebp+14h]
.text:004057DC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004057DF                 call    strlen
.text:004057E4                 add     [ebp+14h], eax
.text:004057E7                 inc     dword ptr [ebp+0]
.text:004057EA                 jmp     loc_405318
.text:004057EF ; ---------------------------------------------------------------------------
.text:004057EF
.text:004057EF loc_4057EF:                             ; CODE XREF: sub_404FC0+817↑j
.text:004057EF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004057F6                 call    ds:libintl_gettext
.text:004057FC                 mov     ecx, [ebp+0]
.text:004057FF                 mov     ebx, [esp+5Ch+arg_4]
.text:00405803                 mov     edi, [ebx+ecx*4]
.text:00405806                 mov     ecx, ds:_iob
.text:0040580C                 mov     [esp+5Ch+var_50], edi
.text:00405810                 mov     esi, [ebx]
.text:00405812                 add     ecx, 40h ; '@'
.text:00405815                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405819                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040581C                 mov     [esp+5Ch+MaxCount], esi
.text:00405820                 call    fprintf
.text:00405825                 jmp     short loc_4057D9
.text:00405827 ; ---------------------------------------------------------------------------
.text:00405827
.text:00405827 loc_405827:                             ; CODE XREF: sub_404FC0+6A0↑j
.text:00405827                 mov     edx, [ebp+14h]
.text:0040582A                 mov     ebx, edi
.text:0040582C                 mov     ecx, [esi]
.text:0040582E                 sub     ebx, edx
.text:00405830                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00405833                 call    strlen
.text:00405838                 cmp     ebx, eax
.text:0040583A                 jz      short loc_405862
.text:0040583C                 mov     ebx, [esp+5Ch+var_2C]
.text:00405840                 test    ebx, ebx
.text:00405842                 jz      short loc_405851
.text:00405844                 mov     [esp+5Ch+var_34], 1
.text:0040584C                 jmp     loc_405666
.text:00405851 ; ---------------------------------------------------------------------------
.text:00405851
.text:00405851 loc_405851:                             ; CODE XREF: sub_404FC0+882↑j
.text:00405851                 mov     [esp+5Ch+var_2C], esi
.text:00405855                 mov     ecx, [esp+5Ch+var_3C]
.text:00405859                 mov     [esp+5Ch+var_38], ecx
.text:0040585D                 jmp     loc_405666
.text:00405862 ; ---------------------------------------------------------------------------
.text:00405862
.text:00405862 loc_405862:                             ; CODE XREF: sub_404FC0+87A↑j
.text:00405862                 mov     [esp+5Ch+var_2C], esi
.text:00405866                 mov     eax, [esp+5Ch+var_3C]
.text:0040586A                 mov     [esp+5Ch+var_30], 1
.text:00405872                 mov     [esp+5Ch+var_38], eax
.text:00405876                 jmp     loc_405675
.text:0040587B ; ---------------------------------------------------------------------------
.text:0040587B
.text:0040587B loc_40587B:                             ; CODE XREF: sub_404FC0+646↑j
.text:0040587B                 mov     edx, [ebp+0]
.text:0040587E                 cmp     edx, [esp+5Ch+arg_0]
.text:00405882                 jz      short loc_405899
.text:00405884                 mov     ebx, [esp+5Ch+arg_4]
.text:00405888                 lea     esi, [edx+1]
.text:0040588B                 mov     [ebp+0], esi
.text:0040588E                 mov     edi, [ebx+edx*4]
.text:00405891                 mov     [ebp+0Ch], edi
.text:00405894                 jmp     loc_405612
.text:00405899 ; ---------------------------------------------------------------------------
.text:00405899
.text:00405899 loc_405899:                             ; CODE XREF: sub_404FC0+8C2↑j
.text:00405899                 mov     edi, [esp+5Ch+var_14]
.text:0040589D                 test    edi, edi
.text:0040589F                 jnz     short loc_4058BC
.text:004058A1
.text:004058A1 loc_4058A1:                             ; CODE XREF: sub_404FC0+92C↓j
.text:004058A1                 mov     [ebp+8], esi
.text:004058A4                 mov     ebp, [esp+5Ch+Str]
.text:004058A8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004058AC                 jz      short loc_4058B8
.text:004058AE                 mov     bl, 3Fh ; '?'
.text:004058B0
.text:004058B0 loc_4058B0:                             ; CODE XREF: sub_404FC0+8FA↓j
.text:004058B0                 movsx   eax, bl
.text:004058B3                 jmp     loc_405117
.text:004058B8 ; ---------------------------------------------------------------------------
.text:004058B8
.text:004058B8 loc_4058B8:                             ; CODE XREF: sub_404FC0+8EC↑j
.text:004058B8                 mov     bl, 3Ah ; ':'
.text:004058BA                 jmp     short loc_4058B0
.text:004058BC ; ---------------------------------------------------------------------------
.text:004058BC
.text:004058BC loc_4058BC:                             ; CODE XREF: sub_404FC0+8DF↑j
.text:004058BC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004058C3                 call    ds:libintl_gettext
.text:004058C9                 mov     [esp+5Ch+var_50], esi
.text:004058CD                 mov     edx, [esp+5Ch+arg_4]
.text:004058D1                 mov     ecx, ds:_iob
.text:004058D7                 mov     ebx, [edx]
.text:004058D9                 add     ecx, 40h ; '@'
.text:004058DC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004058E0                 mov     [esp+5Ch+MaxCount], ebx
.text:004058E4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004058E7                 call    fprintf
.text:004058EC                 jmp     short loc_4058A1
.text:004058EC ; ---------------------------------------------------------------------------
.text:004058EE                 align 10h
.text:004058F0
.text:004058F0 loc_4058F0:                             ; CODE XREF: sub_404FC0+54C↑j
.text:004058F0                                         ; sub_404FC0+555↑j
.text:004058F0                 mov     eax, [esp+5Ch+var_14]
.text:004058F4                 test    eax, eax
.text:004058F6                 jz      short loc_40592F
.text:004058F8                 mov     ebx, [ebp+1Ch]
.text:004058FB                 test    ebx, ebx
.text:004058FD                 jz      short loc_405937
.text:004058FF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00405906
.text:00405906 loc_405906:                             ; CODE XREF: sub_404FC0+97E↓j
.text:00405906                 call    ds:libintl_gettext
.text:0040590C                 mov     [esp+5Ch+var_50], esi
.text:00405910                 mov     ebx, [esp+5Ch+arg_4]
.text:00405914                 mov     edx, ds:_iob
.text:0040591A                 mov     esi, [ebx]
.text:0040591C                 add     edx, 40h ; '@'
.text:0040591F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405923                 mov     [esp+5Ch+MaxCount], esi
.text:00405927                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040592A                 call    fprintf
.text:0040592F
.text:0040592F loc_40592F:                             ; CODE XREF: sub_404FC0+936↑j
.text:0040592F                 mov     [ebp+8], edi
.text:00405932                 jmp     loc_405318
.text:00405937 ; ---------------------------------------------------------------------------
.text:00405937
.text:00405937 loc_405937:                             ; CODE XREF: sub_404FC0+93D↑j
.text:00405937                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040593E                 jmp     short loc_405906
.text:00405940 ; ---------------------------------------------------------------------------
.text:00405940
.text:00405940 loc_405940:                             ; CODE XREF: sub_404FC0+26E↑j
.text:00405940                 mov     edi, [esp+5Ch+var_14]
.text:00405944                 test    edi, edi
.text:00405946                 jnz     short loc_40595E
.text:00405948
.text:00405948 loc_405948:                             ; CODE XREF: sub_404FC0+9D4↓j
.text:00405948                 mov     edx, [ebp+14h]
.text:0040594B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040594E                 call    strlen
.text:00405953                 add     [ebp+14h], eax
.text:00405956                 inc     dword ptr [ebp+0]
.text:00405959                 jmp     loc_40549E
.text:0040595E ; ---------------------------------------------------------------------------
.text:0040595E
.text:0040595E loc_40595E:                             ; CODE XREF: sub_404FC0+986↑j
.text:0040595E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00405965                 call    ds:libintl_gettext
.text:0040596B                 mov     ebx, [ebp+0]
.text:0040596E                 mov     edi, [esp+5Ch+arg_4]
.text:00405972                 mov     ecx, [edi+ebx*4]
.text:00405975                 mov     ebx, ds:_iob
.text:0040597B                 mov     [esp+5Ch+var_50], ecx
.text:0040597F                 mov     esi, [edi]
.text:00405981                 add     ebx, 40h ; '@'
.text:00405984                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405988                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040598B                 mov     [esp+5Ch+MaxCount], esi
.text:0040598F                 call    fprintf
.text:00405994                 jmp     short loc_405948
.text:00405996 ; ---------------------------------------------------------------------------
.text:00405996
.text:00405996 loc_405996:                             ; CODE XREF: sub_404FC0+246↑j
.text:00405996                 mov     ecx, [ebp+14h]
.text:00405999                 mov     ebx, edi
.text:0040599B                 mov     edx, [esi]
.text:0040599D                 sub     ebx, ecx
.text:0040599F                 mov     [esp+5Ch+Str1], edx ; Str
.text:004059A2                 call    strlen
.text:004059A7                 cmp     ebx, eax
.text:004059A9                 jz      short loc_405A01
.text:004059AB                 mov     ebx, [esp+5Ch+var_18]
.text:004059AF                 test    ebx, ebx
.text:004059B1                 jz      short loc_4059F0
.text:004059B3                 mov     edx, [esp+5Ch+arg_14]
.text:004059B7                 test    edx, edx
.text:004059B9                 jnz     short loc_4059C7
.text:004059BB                 mov     ecx, [esp+5Ch+var_18]
.text:004059BF                 mov     ebx, [esi+4]
.text:004059C2                 cmp     [ecx+4], ebx
.text:004059C5                 jz      short loc_4059D4
.text:004059C7
.text:004059C7 loc_4059C7:                             ; CODE XREF: sub_404FC0+9F9↑j
.text:004059C7                                         ; sub_404FC0+A1A↓j ...
.text:004059C7                 mov     [esp+5Ch+var_20], 1
.text:004059CF                 jmp     loc_40520C
.text:004059D4 ; ---------------------------------------------------------------------------
.text:004059D4
.text:004059D4 loc_4059D4:                             ; CODE XREF: sub_404FC0+A05↑j
.text:004059D4                 mov     edx, [esi+8]
.text:004059D7                 cmp     [ecx+8], edx
.text:004059DA                 jnz     short loc_4059C7
.text:004059DC                 mov     ebx, [esi+0Ch]
.text:004059DF                 cmp     [ecx+0Ch], ebx
.text:004059E2                 jnz     short loc_4059C7
.text:004059E4                 jmp     loc_40520C
.text:004059E4 ; ---------------------------------------------------------------------------
.text:004059E9                 align 10h
.text:004059F0
.text:004059F0 loc_4059F0:                             ; CODE XREF: sub_404FC0+9F1↑j
.text:004059F0                 mov     [esp+5Ch+var_18], esi
.text:004059F4                 mov     eax, [esp+5Ch+var_28]
.text:004059F8                 mov     [esp+5Ch+var_24], eax
.text:004059FC                 jmp     loc_40520C
.text:00405A01 ; ---------------------------------------------------------------------------
.text:00405A01
.text:00405A01 loc_405A01:                             ; CODE XREF: sub_404FC0+9E9↑j
.text:00405A01                 mov     [esp+5Ch+var_18], esi
.text:00405A05                 mov     ecx, [esp+5Ch+var_28]
.text:00405A09                 mov     [esp+5Ch+var_1C], 1
.text:00405A11                 mov     [esp+5Ch+var_24], ecx
.text:00405A15                 jmp     loc_405220
.text:00405A1A ; ---------------------------------------------------------------------------
.text:00405A1A
.text:00405A1A loc_405A1A:                             ; CODE XREF: sub_404FC0+1BF↑j
.text:00405A1A                 mov     eax, [esp+5Ch+Str]
.text:00405A1E                 movsx   esi, dl
.text:00405A21                 mov     [esp+5Ch+Str2], esi ; Val
.text:00405A25                 mov     [esp+5Ch+Str1], eax ; Str
.text:00405A28                 call    strchr
.text:00405A2D                 test    eax, eax
.text:00405A2F                 jnz     loc_4054E0
.text:00405A35                 jmp     loc_405185
.text:00405A3A ; ---------------------------------------------------------------------------
.text:00405A3A
.text:00405A3A loc_405A3A:                             ; CODE XREF: sub_404FC0+17C↑j
.text:00405A3A                 mov     ecx, 1
.text:00405A3F                 jmp     loc_405142
.text:00405A44 ; ---------------------------------------------------------------------------
.text:00405A44
.text:00405A44 loc_405A44:                             ; CODE XREF: sub_404FC0+D4↑j
.text:00405A44                                         ; sub_404FC0+130↑j
.text:00405A44                 mov     eax, [ebp+20h]
.text:00405A47                 cmp     eax, [ebp+24h]
.text:00405A4A                 jz      loc_405120
.text:00405A50                 mov     [ebp+0], eax
.text:00405A53                 jmp     loc_405120
.text:00405A58 ; ---------------------------------------------------------------------------
.text:00405A58
.text:00405A58 loc_405A58:                             ; CODE XREF: sub_404FC0+FE↑j
.text:00405A58                 mov     [ebp+20h], eax
.text:00405A5B                 jmp     loc_4050E0
.text:00405A60 ; ---------------------------------------------------------------------------
.text:00405A60
.text:00405A60 loc_405A60:                             ; CODE XREF: sub_404FC0+CA↑j
.text:00405A60                 mov     edx, [ebp+20h]
.text:00405A63                 mov     eax, [ebp+24h]
.text:00405A66                 cmp     edx, eax
.text:00405A68                 jz      short loc_405AE0
.text:00405A6A                 cmp     eax, ebx
.text:00405A6C                 jz      short loc_405A81
.text:00405A6E                 mov     [esp+5Ch+Str2], ebp
.text:00405A72                 mov     ebx, [esp+5Ch+arg_4]
.text:00405A76                 mov     [esp+5Ch+Str1], ebx
.text:00405A79                 call    sub_405C70
.text:00405A7E                 mov     ebx, [ebp+0]
.text:00405A81
.text:00405A81 loc_405A81:                             ; CODE XREF: sub_404FC0+AAC↑j
.text:00405A81                                         ; sub_404FC0+B22↓j ...
.text:00405A81                 cmp     ebx, [esp+5Ch+arg_0]
.text:00405A85                 jge     short loc_405AD0
.text:00405A87                 mov     esi, [esp+5Ch+arg_4]
.text:00405A8B                 mov     eax, [esi+ebx*4]
.text:00405A8E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00405A91                 jz      short loc_405AD8
.text:00405A93                 lea     esi, [esi+0]
.text:00405A99                 lea     edi, [edi+0]
.text:00405AA0
.text:00405AA0 loc_405AA0:                             ; CODE XREF: sub_404FC0+AFC↓j
.text:00405AA0                                         ; sub_404FC0+B1C↓j
.text:00405AA0                 lea     eax, [ebx+1]
.text:00405AA3                 mov     ebx, eax
.text:00405AA5                 mov     [ebp+0], eax
.text:00405AA8                 cmp     eax, [esp+5Ch+arg_0]
.text:00405AAC                 jge     short loc_405AD0
.text:00405AAE                 mov     edi, [esp+5Ch+arg_4]
.text:00405AB2                 mov     edx, [edi+eax*4]
.text:00405AB5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00405AB8                 jz      short loc_405AC0
.text:00405ABA
.text:00405ABA loc_405ABA:                             ; CODE XREF: sub_404FC0+B04↓j
.text:00405ABA                 mov     ebx, eax
.text:00405ABC                 jmp     short loc_405AA0
.text:00405ABC ; ---------------------------------------------------------------------------
.text:00405ABE                 align 10h
.text:00405AC0
.text:00405AC0 loc_405AC0:                             ; CODE XREF: sub_404FC0+AF8↑j
.text:00405AC0                 cmp     byte ptr [edx+1], 0
.text:00405AC4                 jz      short loc_405ABA
.text:00405AC6                 lea     esi, [esi+0]
.text:00405AC9                 lea     edi, [edi+0]
.text:00405AD0
.text:00405AD0 loc_405AD0:                             ; CODE XREF: sub_404FC0+AC5↑j
.text:00405AD0                                         ; sub_404FC0+AEC↑j ...
.text:00405AD0                 mov     [ebp+24h], ebx
.text:00405AD3                 jmp     loc_405090
.text:00405AD8 ; ---------------------------------------------------------------------------
.text:00405AD8
.text:00405AD8 loc_405AD8:                             ; CODE XREF: sub_404FC0+AD1↑j
.text:00405AD8                 cmp     byte ptr [eax+1], 0
.text:00405ADC                 jz      short loc_405AA0
.text:00405ADE                 jmp     short loc_405AD0
.text:00405AE0 ; ---------------------------------------------------------------------------
.text:00405AE0
.text:00405AE0 loc_405AE0:                             ; CODE XREF: sub_404FC0+AA8↑j
.text:00405AE0                 cmp     edx, ebx
.text:00405AE2                 jz      short loc_405A81
.text:00405AE4                 mov     [ebp+20h], ebx
.text:00405AE7                 jmp     short loc_405A81
.text:00405AE9 ; ---------------------------------------------------------------------------
.text:00405AE9
.text:00405AE9 loc_405AE9:                             ; CODE XREF: sub_404FC0+88↑j
.text:00405AE9                 mov     dword ptr [ebp+18h], 0
.text:00405AF0                 mov     esi, [esp+5Ch+Str]
.text:00405AF4
.text:00405AF4 loc_405AF4:                             ; CODE XREF: sub_404FC0+B49↓j
.text:00405AF4                 inc     esi
.text:00405AF5                 jmp     loc_405058
.text:00405AF5 ; ---------------------------------------------------------------------------
.text:00405AFA                 align 10h
.text:00405B00
.text:00405B00 loc_405B00:                             ; CODE XREF: sub_404FC0+80↑j
.text:00405B00                 mov     dword ptr [ebp+18h], 2
.text:00405B07                 mov     esi, ecx
.text:00405B09                 jmp     short loc_405AF4
.text:00405B09 ; ---------------------------------------------------------------------------
.text:00405B0B                 align 10h
.text:00405B10
.text:00405B10 loc_405B10:                             ; CODE XREF: sub_404FC0+69↑j
.text:00405B10                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00405B17                 call    getenv
.text:00405B1C                 test    eax, eax
.text:00405B1E                 jz      loc_405034
.text:00405B24                 jmp     loc_40502F
.text:00405B24 ; ---------------------------------------------------------------------------
.text:00405B29                 align 10h
.text:00405B30
.text:00405B30 loc_405B30:                             ; CODE XREF: sub_404FC0+3F↑j
.text:00405B30                 mov     dword ptr [ebp+0], 1
.text:00405B37                 mov     ebx, 1
.text:00405B3C                 jmp     loc_405010
.text:00405B3C sub_404FC0      endp
.text:00405B3C
.text:00405B41 ; ---------------------------------------------------------------------------
.text:00405B41                 jmp     short sub_405B50
.text:00405B41 ; ---------------------------------------------------------------------------
.text:00405B43                 align 10h
.text:00405B50
.text:00405B50 ; =============== S U B R O U T I N E =======================================
.text:00405B50
.text:00405B50
.text:00405B50 ; int __cdecl sub_405B50(int, int, char *, int, int, int, int)
.text:00405B50 sub_405B50      proc near               ; CODE XREF: .text:00405B41↑j
.text:00405B50                                         ; sub_406290+3A↓p ...
.text:00405B50
.text:00405B50 var_2C          = dword ptr -2Ch
.text:00405B50 var_28          = dword ptr -28h
.text:00405B50 Str             = dword ptr -24h
.text:00405B50 var_20          = dword ptr -20h
.text:00405B50 var_1C          = dword ptr -1Ch
.text:00405B50 var_18          = dword ptr -18h
.text:00405B50 var_14          = dword ptr -14h
.text:00405B50 var_10          = dword ptr -10h
.text:00405B50 arg_0           = dword ptr  4
.text:00405B50 arg_4           = dword ptr  8
.text:00405B50 arg_8           = dword ptr  0Ch
.text:00405B50 arg_C           = dword ptr  10h
.text:00405B50 arg_10          = dword ptr  14h
.text:00405B50 arg_14          = dword ptr  18h
.text:00405B50 arg_18          = dword ptr  1Ch
.text:00405B50
.text:00405B50                 sub     esp, 2Ch
.text:00405B53                 mov     edx, dword_414010
.text:00405B59                 mov     [esp+2Ch+var_10], offset dword_415010 ; int
.text:00405B61                 mov     ecx, dword_414014
.text:00405B67                 mov     ds:dword_415010, edx
.text:00405B6D                 mov     edx, [esp+2Ch+arg_18]
.text:00405B71                 mov     ds:dword_415014, ecx
.text:00405B77                 mov     ecx, [esp+2Ch+arg_14]
.text:00405B7B                 mov     [esp+2Ch+var_14], edx ; int
.text:00405B7F                 mov     edx, [esp+2Ch+arg_10]
.text:00405B83                 mov     [esp+2Ch+var_18], ecx ; int
.text:00405B87                 mov     ecx, [esp+2Ch+arg_C]
.text:00405B8B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00405B8F                 mov     edx, [esp+2Ch+arg_8]
.text:00405B93                 mov     [esp+2Ch+var_20], ecx ; int
.text:00405B97                 mov     ecx, [esp+2Ch+arg_4]
.text:00405B9B                 mov     [esp+2Ch+Str], edx ; Str
.text:00405B9F                 mov     edx, [esp+2Ch+arg_0]
.text:00405BA3                 mov     [esp+2Ch+var_28], ecx ; int
.text:00405BA7                 mov     [esp+2Ch+var_2C], edx ; int
.text:00405BAA                 call    sub_404FC0
.text:00405BAF                 mov     ecx, ds:dword_415010
.text:00405BB5                 mov     dword_414010, ecx
.text:00405BBB                 mov     ecx, ds:dword_41501C
.text:00405BC1                 mov     ds:dword_415A70, ecx
.text:00405BC7                 mov     ecx, ds:dword_415018
.text:00405BCD                 mov     dword_414018, ecx
.text:00405BD3                 add     esp, 2Ch
.text:00405BD6                 retn
.text:00405BD6 sub_405B50      endp
.text:00405BD6
.text:00405BD6 ; ---------------------------------------------------------------------------
.text:00405BD7                 align 10h
.text:00405BE0                 sub     esp, 2Ch
.text:00405BE3                 mov     edx, dword_414010
.text:00405BE9                 mov     dword ptr [esp+1Ch], offset dword_415010
.text:00405BF1                 mov     ecx, dword_414014
.text:00405BF7                 mov     dword ptr [esp+18h], 1
.text:00405BFF                 mov     ds:dword_415010, edx
.text:00405C05                 mov     edx, [esp+38h]
.text:00405C09                 mov     ds:dword_415014, ecx
.text:00405C0F                 mov     ecx, [esp+34h]
.text:00405C13                 mov     [esp+8], edx
.text:00405C17                 mov     edx, [esp+30h]
.text:00405C1B                 mov     [esp+4], ecx
.text:00405C1F                 mov     dword ptr [esp+14h], 0
.text:00405C27                 mov     dword ptr [esp+10h], 0
.text:00405C2F                 mov     dword ptr [esp+0Ch], 0
.text:00405C37                 mov     [esp], edx
.text:00405C3A                 call    sub_404FC0
.text:00405C3F                 mov     ecx, ds:dword_415010
.text:00405C45                 mov     dword_414010, ecx
.text:00405C4B                 mov     ecx, ds:dword_41501C
.text:00405C51                 mov     ds:dword_415A70, ecx
.text:00405C57                 mov     ecx, ds:dword_415018
.text:00405C5D                 mov     dword_414018, ecx
.text:00405C63                 add     esp, 2Ch
.text:00405C66                 retn
.text:00405C66 ; ---------------------------------------------------------------------------
.text:00405C67                 align 10h
.text:00405C70
.text:00405C70 ; =============== S U B R O U T I N E =======================================
.text:00405C70
.text:00405C70
.text:00405C70 sub_405C70      proc near               ; CODE XREF: sub_404FC0+113↑p
.text:00405C70                                         ; sub_404FC0+AB9↑p
.text:00405C70
.text:00405C70 var_2C          = dword ptr -2Ch
.text:00405C70 var_28          = dword ptr -28h
.text:00405C70 var_24          = dword ptr -24h
.text:00405C70 var_20          = dword ptr -20h
.text:00405C70 var_1C          = dword ptr -1Ch
.text:00405C70 var_18          = dword ptr -18h
.text:00405C70 var_14          = dword ptr -14h
.text:00405C70 arg_0           = dword ptr  4
.text:00405C70 arg_4           = dword ptr  8
.text:00405C70
.text:00405C70                 push    ebp
.text:00405C71                 push    edi
.text:00405C72                 push    esi
.text:00405C73                 push    ebx
.text:00405C74                 sub     esp, 1Ch
.text:00405C77                 mov     ecx, [esp+2Ch+arg_4]
.text:00405C7B                 mov     eax, [esp+2Ch+arg_4]
.text:00405C7F                 mov     ebx, [esp+2Ch+arg_4]
.text:00405C83                 mov     edx, [ecx+20h]
.text:00405C86                 mov     edi, [esp+2Ch+arg_0]
.text:00405C8A                 mov     ecx, [ebx]
.text:00405C8C                 mov     [esp+2Ch+var_2C], edx
.text:00405C8F                 mov     [esp+2Ch+var_14], edx
.text:00405C93                 mov     edx, [eax+24h]
.text:00405C96                 mov     [esp+2Ch+var_28], ecx
.text:00405C9A                 mov     [esp+2Ch+var_1C], ecx
.text:00405C9E                 cmp     ecx, edx
.text:00405CA0                 mov     [esp+2Ch+var_18], edx
.text:00405CA4                 jle     short loc_405D20
.text:00405CA6                 mov     esi, [esp+2Ch+var_2C]
.text:00405CA9                 cmp     edx, esi
.text:00405CAB                 jle     short loc_405D20
.text:00405CAD                 lea     esi, [esi+0]
.text:00405CB0
.text:00405CB0 loc_405CB0:                             ; CODE XREF: sub_405C70+A1↓j
.text:00405CB0                 mov     ebx, [esp+2Ch+var_1C]
.text:00405CB4                 mov     edx, [esp+2Ch+var_18]
.text:00405CB8                 mov     ebp, [esp+2Ch+var_18]
.text:00405CBC                 mov     eax, [esp+2Ch+var_14]
.text:00405CC0                 sub     ebx, edx
.text:00405CC2                 mov     [esp+2Ch+var_20], ebx
.text:00405CC6                 sub     ebp, eax
.text:00405CC8                 cmp     ebx, ebp
.text:00405CCA                 jle     short loc_405D45
.text:00405CCC                 xor     esi, esi
.text:00405CCE                 cmp     esi, ebp
.text:00405CD0                 jge     short loc_405CFD
.text:00405CD2                 mov     ecx, [esp+2Ch+var_1C]
.text:00405CD6                 sub     ecx, ebp
.text:00405CD8                 mov     [esp+2Ch+var_24], ecx
.text:00405CDC                 lea     esi, [esi+0]
.text:00405CE0
.text:00405CE0 loc_405CE0:                             ; CODE XREF: sub_405C70+8B↓j
.text:00405CE0                 mov     ecx, [esp+2Ch+var_14]
.text:00405CE4                 mov     edx, [esp+2Ch+var_24]
.text:00405CE8                 add     ecx, esi
.text:00405CEA                 add     edx, esi
.text:00405CEC                 mov     ebx, [edi+ecx*4]
.text:00405CEF                 mov     eax, [edi+edx*4]
.text:00405CF2                 inc     esi
.text:00405CF3                 cmp     esi, ebp
.text:00405CF5                 mov     [edi+ecx*4], eax
.text:00405CF8                 mov     [edi+edx*4], ebx
.text:00405CFB                 jl      short loc_405CE0
.text:00405CFD
.text:00405CFD loc_405CFD:                             ; CODE XREF: sub_405C70+60↑j
.text:00405CFD                 sub     [esp+2Ch+var_1C], ebp
.text:00405D01
.text:00405D01 loc_405D01:                             ; CODE XREF: sub_405C70+107↓j
.text:00405D01                 mov     eax, [esp+2Ch+var_18]
.text:00405D05                 cmp     [esp+2Ch+var_1C], eax
.text:00405D09                 jle     short loc_405D20
.text:00405D0B                 mov     ebp, [esp+2Ch+var_14]
.text:00405D0F                 cmp     eax, ebp
.text:00405D11                 jg      short loc_405CB0
.text:00405D13                 lea     esi, [esi+0]
.text:00405D19                 lea     edi, [edi+0]
.text:00405D20
.text:00405D20 loc_405D20:                             ; CODE XREF: sub_405C70+34↑j
.text:00405D20                                         ; sub_405C70+3B↑j ...
.text:00405D20                 mov     esi, [esp+2Ch+var_28]
.text:00405D24                 mov     ecx, [esp+2Ch+var_18]
.text:00405D28                 mov     eax, [esp+2Ch+var_2C]
.text:00405D2B                 mov     edi, [esp+2Ch+arg_4]
.text:00405D2F                 mov     edx, [esp+2Ch+var_28]
.text:00405D33                 sub     esi, ecx
.text:00405D35                 add     esi, eax
.text:00405D37                 mov     [edi+20h], esi
.text:00405D3A                 mov     [edi+24h], edx
.text:00405D3D                 add     esp, 1Ch
.text:00405D40                 pop     ebx
.text:00405D41                 pop     esi
.text:00405D42                 pop     edi
.text:00405D43                 pop     ebp
.text:00405D44                 retn
.text:00405D45 ; ---------------------------------------------------------------------------
.text:00405D45
.text:00405D45 loc_405D45:                             ; CODE XREF: sub_405C70+5A↑j
.text:00405D45                 xor     esi, esi
.text:00405D47                 cmp     esi, [esp+2Ch+var_20]
.text:00405D4B                 jge     short loc_405D6F
.text:00405D4D                 lea     esi, [esi+0]
.text:00405D50
.text:00405D50 loc_405D50:                             ; CODE XREF: sub_405C70+FD↓j
.text:00405D50                 mov     ebx, [esp+2Ch+var_14]
.text:00405D54                 mov     ebp, [esp+2Ch+var_18]
.text:00405D58                 add     ebx, esi
.text:00405D5A                 add     ebp, esi
.text:00405D5C                 mov     edx, [edi+ebx*4]
.text:00405D5F                 inc     esi
.text:00405D60                 cmp     esi, [esp+2Ch+var_20]
.text:00405D64                 mov     ecx, [edi+ebp*4]
.text:00405D67                 mov     [edi+ebx*4], ecx
.text:00405D6A                 mov     [edi+ebp*4], edx
.text:00405D6D                 jl      short loc_405D50
.text:00405D6F
.text:00405D6F loc_405D6F:                             ; CODE XREF: sub_405C70+DB↑j
.text:00405D6F                 mov     esi, [esp+2Ch+var_20]
.text:00405D73                 add     [esp+2Ch+var_14], esi
.text:00405D77                 jmp     short loc_405D01
.text:00405D77 sub_405C70      endp
.text:00405D77
.text:00405D77 ; ---------------------------------------------------------------------------
.text:00405D79                 db 17h dup(90h)
.text:00405D90 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00405D90                                         ; DATA XREF: .data:Buffer↓o
.text:00405DC2 ; const char Format[]
.text:00405DC2 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_406080+50↓o
.text:00405DCE aWrittenByS     db 'Written by %s.',0Ah,0
.text:00405DCE                                         ; DATA XREF: sub_406080:loc_406121↓o
.text:00405DDE                 db 12h dup(90h)
.text:00405DF0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00405DF0                                         ; DATA XREF: sub_406080+100↓o
.text:00405DF0                 db 'ere is NO',0Ah
.text:00405DF0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00405DF0                 db 'R PURPOSE.',0Ah,0
.text:00405E88 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00405E88                                         ; DATA XREF: sub_406080:loc_4061C1↓o
.text:00405E9F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00405E9F                                         ; DATA XREF: sub_406080:loc_4061CD↓o
.text:00405EBB                 db 15h dup(90h)
.text:00405ED0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00405ED0                                         ; DATA XREF: sub_406080:loc_4061D9↓o
.text:00405ED0                 db 'and %s.',0Ah,0
.text:00405EF0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00405EF0                                         ; DATA XREF: sub_406080:loc_4061E5↓o
.text:00405EF0                 db '%s, and %s.',0Ah,0
.text:00405F14                 db 1Ch dup(90h)
.text:00405F30 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00405F30                                         ; DATA XREF: sub_406080:loc_4061F1↓o
.text:00405F30                 db '%s, %s, and %s.',0Ah,0
.text:00405F58                 db 18h dup(90h)
.text:00405F70 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00405F70                                         ; DATA XREF: sub_406080:loc_4061FD↓o
.text:00405F70                 db '%s, %s, %s, and %s.',0Ah,0
.text:00405F9C                 db 14h dup(90h)
.text:00405FB0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00405FB0                                         ; DATA XREF: sub_406080:loc_406209↓o
.text:00405FB0                 db '%s, %s, %s, %s,',0Ah
.text:00405FB0                 db 'and %s.',0Ah,0
.text:00405FE0                 db 10h dup(90h)
.text:00405FF0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00405FF0                                         ; DATA XREF: sub_406080:loc_406215↓o
.text:00405FF0                 db '%s, %s, %s, %s,',0Ah
.text:00405FF0                 db '%s, and %s.',0Ah,0
.text:00406024                 align 10h
.text:00406030 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00406030                                         ; DATA XREF: sub_406080:def_4060ED↓o
.text:00406030                 db '%s, %s, %s, %s,',0Ah
.text:00406030                 db '%s, %s, and others.',0Ah,0
.text:0040606C ; const char aSS[]
.text:0040606C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_406080+1B5↓o
.text:00406073                 align 10h
.text:00406080
.text:00406080 ; =============== S U B R O U T I N E =======================================
.text:00406080
.text:00406080
.text:00406080 ; int __cdecl sub_406080(FILE *, FILE *, int, int, va_list)
.text:00406080 sub_406080      proc near               ; CODE XREF: sub_406250+2A↓p
.text:00406080
.text:00406080 Stream          = dword ptr -2Ch
.text:00406080 Format          = dword ptr -28h
.text:00406080 ArgList         = dword ptr -24h
.text:00406080 var_20          = dword ptr -20h
.text:00406080 var_1C          = dword ptr -1Ch
.text:00406080 var_14          = dword ptr -14h
.text:00406080 arg_0           = dword ptr  4
.text:00406080 arg_4           = dword ptr  8
.text:00406080 arg_8           = dword ptr  0Ch
.text:00406080 arg_C           = dword ptr  10h
.text:00406080 arg_10          = dword ptr  14h
.text:00406080
.text:00406080                 push    ebp
.text:00406081                 push    edi
.text:00406082                 push    esi
.text:00406083                 push    ebx
.text:00406084                 sub     esp, 1Ch
.text:00406087                 xor     ebx, ebx
.text:00406089                 mov     edi, [esp+2Ch+arg_10]
.text:0040608D                 mov     edx, [esp+2Ch+arg_8]
.text:00406091                 mov     esi, [esp+2Ch+arg_0]
.text:00406095                 mov     eax, [edi]
.text:00406097                 mov     ecx, [esp+2Ch+arg_4]
.text:0040609B                 mov     [esp+2Ch+var_14], edx
.text:0040609F                 mov     ebp, [esp+2Ch+arg_C]
.text:004060A3                 lea     edx, [edi+4]
.text:004060A6                 test    eax, eax
.text:004060A8                 jz      short loc_4060BC
.text:004060AA                 lea     esi, [esi+0]
.text:004060B0
.text:004060B0 loc_4060B0:                             ; CODE XREF: sub_406080+3A↓j
.text:004060B0                 mov     eax, edx
.text:004060B2                 inc     ebx
.text:004060B3                 mov     eax, [eax]
.text:004060B5                 add     edx, 4
.text:004060B8                 test    eax, eax
.text:004060BA                 jnz     short loc_4060B0
.text:004060BC
.text:004060BC loc_4060BC:                             ; CODE XREF: sub_406080+28↑j
.text:004060BC                 test    ecx, ecx
.text:004060BE                 jz      loc_40622D
.text:004060C4                 mov     [esp+2Ch+var_1C], ebp
.text:004060C8                 mov     edx, [esp+2Ch+var_14]
.text:004060CC                 mov     [esp+2Ch+ArgList], ecx
.text:004060D0                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:004060D8                 mov     [esp+2Ch+var_20], edx
.text:004060DC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004060DF                 call    fprintf
.text:004060E4
.text:004060E4 loc_4060E4:                             ; CODE XREF: sub_406080+1C9↓j
.text:004060E4                 cmp     ebx, 9          ; switch 10 cases
.text:004060E7                 ja      def_4060ED      ; jumptable 004060ED default case
.text:004060ED                 jmp     ds:jpt_4060ED[ebx*4] ; switch jump
.text:004060ED ; ---------------------------------------------------------------------------
.text:004060F4 jpt_4060ED      dd offset loc_40611C    ; DATA XREF: sub_406080+6D↑r
.text:004060F4                 dd offset loc_406121    ; jump table for switch statement
.text:004060F4                 dd offset loc_4061C1
.text:004060F4                 dd offset loc_4061CD
.text:004060F4                 dd offset loc_4061D9
.text:004060F4                 dd offset loc_4061E5
.text:004060F4                 dd offset loc_4061F1
.text:004060F4                 dd offset loc_4061FD
.text:004060F4                 dd offset loc_406209
.text:004060F4                 dd offset loc_406215
.text:0040611C ; ---------------------------------------------------------------------------
.text:0040611C
.text:0040611C loc_40611C:                             ; CODE XREF: sub_406080+6D↑j
.text:0040611C                                         ; DATA XREF: sub_406080:jpt_4060ED↑o
.text:0040611C                 call    abort           ; jumptable 004060ED case 0
.text:00406121 ; ---------------------------------------------------------------------------
.text:00406121
.text:00406121 loc_406121:                             ; CODE XREF: sub_406080+6D↑j
.text:00406121                                         ; DATA XREF: sub_406080:jpt_4060ED↑o
.text:00406121                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004060ED case 1
.text:00406128                 nop
.text:00406129                 lea     esi, [esi+0]
.text:00406130
.text:00406130 loc_406130:                             ; CODE XREF: sub_406080+148↓j
.text:00406130                                         ; sub_406080+154↓j ...
.text:00406130                 call    ds:libintl_gettext
.text:00406136                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040613A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040613D                 mov     [esp+2Ch+Format], eax ; Format
.text:00406141                 call    vfprintf
.text:00406146                 mov     ebx, [esi+4]
.text:00406149                 dec     ebx
.text:0040614A                 test    ebx, ebx
.text:0040614C                 mov     [esi+4], ebx
.text:0040614F                 js      short loc_4061AF
.text:00406151                 mov     edi, [esi]
.text:00406153                 mov     byte ptr [edi], 0Ah
.text:00406156                 inc     dword ptr [esi]
.text:00406158
.text:00406158 loc_406158:                             ; CODE XREF: sub_406080+13F↓j
.text:00406158                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040615C                 mov     edx, Buffer
.text:00406162                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00406165                 call    fputs
.text:0040616A                 mov     ebp, [esi+4]
.text:0040616D                 dec     ebp
.text:0040616E                 test    ebp, ebp
.text:00406170                 mov     [esi+4], ebp
.text:00406173                 js      short loc_40619D
.text:00406175                 mov     ecx, [esi]
.text:00406177                 mov     byte ptr [ecx], 0Ah
.text:0040617A                 inc     dword ptr [esi]
.text:0040617C
.text:0040617C loc_40617C:                             ; CODE XREF: sub_406080+12D↓j
.text:0040617C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00406180                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00406187                 call    ds:libintl_gettext
.text:0040618D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00406191                 add     esp, 1Ch
.text:00406194                 pop     ebx
.text:00406195                 pop     esi
.text:00406196                 pop     edi
.text:00406197                 pop     ebp
.text:00406198                 jmp     fputs
.text:0040619D ; ---------------------------------------------------------------------------
.text:0040619D
.text:0040619D loc_40619D:                             ; CODE XREF: sub_406080+F3↑j
.text:0040619D                 mov     [esp+2Ch+Format], esi ; File
.text:004061A1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004061A8                 call    _flsbuf
.text:004061AD                 jmp     short loc_40617C
.text:004061AF ; ---------------------------------------------------------------------------
.text:004061AF
.text:004061AF loc_4061AF:                             ; CODE XREF: sub_406080+CF↑j
.text:004061AF                 mov     [esp+2Ch+Format], esi ; File
.text:004061B3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004061BA                 call    _flsbuf
.text:004061BF                 jmp     short loc_406158
.text:004061C1 ; ---------------------------------------------------------------------------
.text:004061C1
.text:004061C1 loc_4061C1:                             ; CODE XREF: sub_406080+6D↑j
.text:004061C1                                         ; DATA XREF: sub_406080:jpt_4060ED↑o
.text:004061C1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004060ED case 2
.text:004061C8                 jmp     loc_406130
.text:004061CD ; ---------------------------------------------------------------------------
.text:004061CD
.text:004061CD loc_4061CD:                             ; CODE XREF: sub_406080+6D↑j
.text:004061CD                                         ; DATA XREF: sub_406080:jpt_4060ED↑o
.text:004061CD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004060ED case 3
.text:004061D4                 jmp     loc_406130
.text:004061D9 ; ---------------------------------------------------------------------------
.text:004061D9
.text:004061D9 loc_4061D9:                             ; CODE XREF: sub_406080+6D↑j
.text:004061D9                                         ; DATA XREF: sub_406080:jpt_4060ED↑o
.text:004061D9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004060ED case 4
.text:004061E0                 jmp     loc_406130
.text:004061E5 ; ---------------------------------------------------------------------------
.text:004061E5
.text:004061E5 loc_4061E5:                             ; CODE XREF: sub_406080+6D↑j
.text:004061E5                                         ; DATA XREF: sub_406080:jpt_4060ED↑o
.text:004061E5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004060ED case 5
.text:004061EC                 jmp     loc_406130
.text:004061F1 ; ---------------------------------------------------------------------------
.text:004061F1
.text:004061F1 loc_4061F1:                             ; CODE XREF: sub_406080+6D↑j
.text:004061F1                                         ; DATA XREF: sub_406080:jpt_4060ED↑o
.text:004061F1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004060ED case 6
.text:004061F8                 jmp     loc_406130
.text:004061FD ; ---------------------------------------------------------------------------
.text:004061FD
.text:004061FD loc_4061FD:                             ; CODE XREF: sub_406080+6D↑j
.text:004061FD                                         ; DATA XREF: sub_406080:jpt_4060ED↑o
.text:004061FD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004060ED case 7
.text:00406204                 jmp     loc_406130
.text:00406209 ; ---------------------------------------------------------------------------
.text:00406209
.text:00406209 loc_406209:                             ; CODE XREF: sub_406080+6D↑j
.text:00406209                                         ; DATA XREF: sub_406080:jpt_4060ED↑o
.text:00406209                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004060ED case 8
.text:00406210                 jmp     loc_406130
.text:00406215 ; ---------------------------------------------------------------------------
.text:00406215
.text:00406215 loc_406215:                             ; CODE XREF: sub_406080+6D↑j
.text:00406215                                         ; DATA XREF: sub_406080:jpt_4060ED↑o
.text:00406215                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004060ED case 9
.text:0040621C                 jmp     loc_406130
.text:00406221 ; ---------------------------------------------------------------------------
.text:00406221
.text:00406221 def_4060ED:                             ; CODE XREF: sub_406080+67↑j
.text:00406221                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004060ED default case
.text:00406228                 jmp     loc_406130
.text:0040622D ; ---------------------------------------------------------------------------
.text:0040622D
.text:0040622D loc_40622D:                             ; CODE XREF: sub_406080+3E↑j
.text:0040622D                 mov     [esp+2Ch+var_20], ebp
.text:00406231                 mov     ecx, [esp+2Ch+var_14]
.text:00406235                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040623D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00406240                 mov     [esp+2Ch+ArgList], ecx
.text:00406244                 call    fprintf
.text:00406249                 jmp     loc_4060E4
.text:00406249 sub_406080      endp
.text:00406249
.text:00406249 ; ---------------------------------------------------------------------------
.text:0040624E                 align 10h
.text:00406250
.text:00406250 ; =============== S U B R O U T I N E =======================================
.text:00406250
.text:00406250
.text:00406250 ; int __cdecl sub_406250(FILE *, FILE *, int, int, char)
.text:00406250 sub_406250      proc near               ; CODE XREF: sub_401BF0+2B2↑p
.text:00406250
.text:00406250 var_1C          = dword ptr -1Ch
.text:00406250 var_18          = dword ptr -18h
.text:00406250 var_14          = dword ptr -14h
.text:00406250 var_10          = dword ptr -10h
.text:00406250 var_C           = dword ptr -0Ch
.text:00406250 arg_0           = dword ptr  4
.text:00406250 arg_4           = dword ptr  8
.text:00406250 arg_8           = dword ptr  0Ch
.text:00406250 arg_C           = dword ptr  10h
.text:00406250 arg_10          = byte ptr  14h
.text:00406250
.text:00406250                 sub     esp, 1Ch
.text:00406253                 mov     edx, [esp+1Ch+arg_C]
.text:00406257                 lea     ecx, [esp+1Ch+arg_10]
.text:0040625B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040625F                 mov     ecx, [esp+1Ch+arg_8]
.text:00406263                 mov     [esp+1Ch+var_10], edx ; int
.text:00406267                 mov     edx, [esp+1Ch+arg_4]
.text:0040626B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040626F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00406273                 mov     edx, [esp+1Ch+arg_0]
.text:00406277                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040627A                 call    sub_406080
.text:0040627F                 add     esp, 1Ch
.text:00406282                 retn
.text:00406282 sub_406250      endp
.text:00406282
.text:00406282 ; ---------------------------------------------------------------------------
.text:00406283                 align 10h
.text:00406290
.text:00406290 ; =============== S U B R O U T I N E =======================================
.text:00406290
.text:00406290
.text:00406290 ; int __cdecl sub_406290(int, int, char *, int, int)
.text:00406290 sub_406290      proc near               ; CODE XREF: sub_401BF0+AF↑p
.text:00406290
.text:00406290 var_1C          = dword ptr -1Ch
.text:00406290 var_18          = dword ptr -18h
.text:00406290 var_14          = dword ptr -14h
.text:00406290 var_10          = dword ptr -10h
.text:00406290 var_C           = dword ptr -0Ch
.text:00406290 var_8           = dword ptr -8
.text:00406290 var_4           = dword ptr -4
.text:00406290 arg_0           = dword ptr  4
.text:00406290 arg_4           = dword ptr  8
.text:00406290 arg_8           = dword ptr  0Ch
.text:00406290 arg_C           = dword ptr  10h
.text:00406290 arg_10          = dword ptr  14h
.text:00406290
.text:00406290                 sub     esp, 1Ch
.text:00406293                 mov     edx, [esp+1Ch+arg_C]
.text:00406297                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040629F                 mov     ecx, [esp+1Ch+arg_10]
.text:004062A3                 mov     [esp+1Ch+var_8], 0 ; int
.text:004062AB                 mov     [esp+1Ch+var_10], edx ; int
.text:004062AF                 mov     edx, [esp+1Ch+arg_4]
.text:004062B3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004062B7                 mov     ecx, [esp+1Ch+arg_8]
.text:004062BB                 mov     [esp+1Ch+var_18], edx ; int
.text:004062BF                 mov     edx, [esp+1Ch+arg_0]
.text:004062C3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004062C7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004062CA                 call    sub_405B50
.text:004062CF                 add     esp, 1Ch
.text:004062D2                 retn
.text:004062D2 sub_406290      endp
.text:004062D2
.text:004062D2 ; ---------------------------------------------------------------------------
.text:004062D3                 align 10h
.text:004062E0                 sub     esp, 2Ch
.text:004062E3                 mov     edx, [esp+44h]
.text:004062E7                 mov     dword ptr [esp+18h], 0
.text:004062EF                 mov     ecx, [esp+40h]
.text:004062F3                 mov     dword ptr [esp+14h], 0
.text:004062FB                 mov     [esp+1Ch], edx
.text:004062FF                 mov     edx, [esp+3Ch]
.text:00406303                 mov     [esp+10h], ecx
.text:00406307                 mov     ecx, [esp+38h]
.text:0040630B                 mov     [esp+0Ch], edx
.text:0040630F                 mov     edx, [esp+34h]
.text:00406313                 mov     [esp+8], ecx
.text:00406317                 mov     [esp+4], edx
.text:0040631B                 mov     edx, [esp+30h]
.text:0040631F                 mov     [esp], edx
.text:00406322                 call    sub_404FC0
.text:00406327                 add     esp, 2Ch
.text:0040632A                 retn
.text:0040632A ; ---------------------------------------------------------------------------
.text:0040632B                 align 10h
.text:00406330                 sub     esp, 1Ch
.text:00406333                 mov     edx, [esp+2Ch]
.text:00406337                 mov     dword ptr [esp+18h], 0
.text:0040633F                 mov     ecx, [esp+30h]
.text:00406343                 mov     dword ptr [esp+14h], 1
.text:0040634B                 mov     [esp+0Ch], edx
.text:0040634F                 mov     edx, [esp+24h]
.text:00406353                 mov     [esp+10h], ecx
.text:00406357                 mov     ecx, [esp+28h]
.text:0040635B                 mov     [esp+4], edx
.text:0040635F                 mov     edx, [esp+20h]
.text:00406363                 mov     [esp+8], ecx
.text:00406367                 mov     [esp], edx
.text:0040636A                 call    sub_405B50
.text:0040636F                 add     esp, 1Ch
.text:00406372                 retn
.text:00406372 ; ---------------------------------------------------------------------------
.text:00406373                 align 10h
.text:00406380                 sub     esp, 2Ch
.text:00406383                 mov     edx, [esp+44h]
.text:00406387                 mov     dword ptr [esp+18h], 0
.text:0040638F                 mov     ecx, [esp+40h]
.text:00406393                 mov     dword ptr [esp+14h], 1
.text:0040639B                 mov     [esp+1Ch], edx
.text:0040639F                 mov     edx, [esp+3Ch]
.text:004063A3                 mov     [esp+10h], ecx
.text:004063A7                 mov     ecx, [esp+38h]
.text:004063AB                 mov     [esp+0Ch], edx
.text:004063AF                 mov     edx, [esp+34h]
.text:004063B3                 mov     [esp+8], ecx
.text:004063B7                 mov     [esp+4], edx
.text:004063BB                 mov     edx, [esp+30h]
.text:004063BF                 mov     [esp], edx
.text:004063C2                 call    sub_404FC0
.text:004063C7                 add     esp, 2Ch
.text:004063CA                 retn
.text:004063CA ; ---------------------------------------------------------------------------
.text:004063CB                 align 10h
.text:004063D0                 mov     edx, [esp+4]
.text:004063D4                 mov     ds:dword_415040, edx
.text:004063DA                 retn
.text:004063DA ; ---------------------------------------------------------------------------
.text:004063DB aWriteError     db 'write error',0      ; DATA XREF: sub_406400:loc_406449↓o
.text:004063E7 ; const char aSS_0[]
.text:004063E7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_406400+77↓o
.text:004063EE ; const char aS_2[]
.text:004063EE aS_2            db '%s',0               ; DATA XREF: sub_406400+A0↓o
.text:004063F1 ; ---------------------------------------------------------------------------
.text:004063F1                 jmp     short sub_406400
.text:004063F1 ; ---------------------------------------------------------------------------
.text:004063F3                 align 10h
.text:00406400
.text:00406400 ; =============== S U B R O U T I N E =======================================
.text:00406400
.text:00406400
.text:00406400 ; void __cdecl sub_406400()
.text:00406400 sub_406400      proc near               ; CODE XREF: .text:004063F1↑j
.text:00406400                                         ; DATA XREF: sub_401BF0+6F↑o
.text:00406400
.text:00406400 Stream          = dword ptr -2Ch
.text:00406400 ErrorMessage    = dword ptr -28h
.text:00406400 var_24          = dword ptr -24h
.text:00406400 var_20          = byte ptr -20h
.text:00406400 var_1C          = dword ptr -1Ch
.text:00406400 var_9           = byte ptr -9
.text:00406400
.text:00406400                 push    esi
.text:00406401                 push    ebx
.text:00406402                 sub     esp, 24h
.text:00406405                 mov     edx, ds:_iob
.text:0040640B                 mov     ecx, [edx+2Ch]
.text:0040640E                 lea     esi, [edx+20h]
.text:00406411                 shr     ecx, 5
.text:00406414                 mov     bl, cl
.text:00406416                 mov     ecx, [edx+20h]
.text:00406419                 and     bl, 1
.text:0040641C                 cmp     ecx, [esi+8]
.text:0040641F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00406422                 setz    [esp+2Ch+var_9]
.text:00406427                 call    fclose
.text:0040642C                 test    eax, eax
.text:0040642E                 setnz   al
.text:00406431                 test    bl, bl
.text:00406433                 jnz     loc_4064C3
.text:00406439                 test    al, al
.text:0040643B                 jz      short loc_406490
.text:0040643D
.text:0040643D loc_40643D:                             ; CODE XREF: sub_406400+CD↓j
.text:0040643D                 call    _errno
.text:00406442                 mov     esi, [eax]
.text:00406444
.text:00406444 loc_406444:                             ; CODE XREF: sub_406400+C7↓j
.text:00406444                 cmp     esi, 9
.text:00406447                 jz      short loc_4064B6
.text:00406449
.text:00406449 loc_406449:                             ; CODE XREF: sub_406400+B8↓j
.text:00406449                                         ; sub_406400+C1↓j
.text:00406449                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00406450                 call    ds:libintl_gettext
.text:00406456                 mov     ebx, eax
.text:00406458                 mov     eax, ds:dword_415040
.text:0040645D                 test    eax, eax
.text:0040645F                 jz      short loc_406496
.text:00406461                 mov     [esp+2Ch+Stream], eax ; char *
.text:00406464                 call    sub_409050
.text:00406469                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040646D                 mov     edx, Code
.text:00406473                 mov     [esp+2Ch+var_1C], ebx
.text:00406477                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040647F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00406483                 mov     [esp+2Ch+Stream], edx ; Code
.text:00406486                 call    sub_409310
.text:0040648B                 nop
.text:0040648C                 lea     esi, [esi+0]
.text:00406490
.text:00406490 loc_406490:                             ; CODE XREF: sub_406400+3B↑j
.text:00406490                                         ; sub_406400+B4↓j ...
.text:00406490                 add     esp, 24h
.text:00406493                 pop     ebx
.text:00406494                 pop     esi
.text:00406495                 retn
.text:00406496 ; ---------------------------------------------------------------------------
.text:00406496
.text:00406496 loc_406496:                             ; CODE XREF: sub_406400+5F↑j
.text:00406496                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040649A                 mov     ebx, Code
.text:004064A0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:004064A8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004064AC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004064AF                 call    sub_409310
.text:004064B4                 jmp     short loc_406490
.text:004064B6 ; ---------------------------------------------------------------------------
.text:004064B6
.text:004064B6 loc_4064B6:                             ; CODE XREF: sub_406400+47↑j
.text:004064B6                 test    bl, bl
.text:004064B8                 jnz     short loc_406449
.text:004064BA                 cmp     [esp+2Ch+var_9], 0
.text:004064BF                 jnz     short loc_406490
.text:004064C1                 jmp     short loc_406449
.text:004064C3 ; ---------------------------------------------------------------------------
.text:004064C3
.text:004064C3 loc_4064C3:                             ; CODE XREF: sub_406400+33↑j
.text:004064C3                 xor     esi, esi
.text:004064C5                 test    al, al
.text:004064C7                 jz      loc_406444
.text:004064CD                 jmp     loc_40643D
.text:004064CD sub_406400      endp
.text:004064CD
.text:004064CD ; ---------------------------------------------------------------------------
.text:004064D2                 align 10h
.text:004064E0
.text:004064E0 ; =============== S U B R O U T I N E =======================================
.text:004064E0
.text:004064E0
.text:004064E0 ; int __cdecl sub_4064E0(int, char *)
.text:004064E0 sub_4064E0      proc near               ; CODE XREF: sub_4026E0+4A3↑p
.text:004064E0                                         ; sub_4026E0+4B9↑p
.text:004064E0
.text:004064E0 var_C           = dword ptr -0Ch
.text:004064E0 var_8           = dword ptr -8
.text:004064E0 var_4           = dword ptr -4
.text:004064E0 arg_0           = dword ptr  4
.text:004064E0 arg_4           = dword ptr  8
.text:004064E0
.text:004064E0                 sub     esp, 0Ch
.text:004064E3                 mov     edx, [esp+0Ch+arg_4]
.text:004064E7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004064EF                 mov     [esp+0Ch+var_4], edx ; char *
.text:004064F3                 mov     edx, [esp+0Ch+arg_0]
.text:004064F7                 mov     [esp+0Ch+var_C], edx ; int
.text:004064FA                 call    sub_408CE0
.text:004064FF                 add     esp, 0Ch
.text:00406502                 retn
.text:00406502 sub_4064E0      endp
.text:00406502
.text:00406502 ; ---------------------------------------------------------------------------
.text:00406503                 align 10h
.text:00406510
.text:00406510 ; =============== S U B R O U T I N E =======================================
.text:00406510
.text:00406510
.text:00406510 ; int __cdecl sub_406510(char *)
.text:00406510 sub_406510      proc near               ; CODE XREF: sub_401BF0+481↑p
.text:00406510                                         ; sub_401BF0+4EE↑p ...
.text:00406510
.text:00406510 var_C           = dword ptr -0Ch
.text:00406510 var_8           = dword ptr -8
.text:00406510 var_4           = dword ptr -4
.text:00406510 arg_0           = dword ptr  4
.text:00406510
.text:00406510                 sub     esp, 0Ch
.text:00406513                 mov     edx, [esp+0Ch+arg_0]
.text:00406517                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040651F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00406526                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040652A                 call    sub_408CE0
.text:0040652F                 add     esp, 0Ch
.text:00406532                 retn
.text:00406532 sub_406510      endp
.text:00406532
.text:00406532 ; ---------------------------------------------------------------------------
.text:00406533                 align 10h
.text:00406540 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00406540                                         ; DATA XREF: sub_4065B0+544↓o
.text:00406568                 align 20h
.text:00406580 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00406580                                         ; DATA XREF: sub_4065B0+54C↓o
.text:004065A6                 align 10h
.text:004065B0
.text:004065B0 ; =============== S U B R O U T I N E =======================================
.text:004065B0
.text:004065B0
.text:004065B0 ; int __cdecl sub_4065B0(int, int, int, int, char *Str)
.text:004065B0 sub_4065B0      proc near               ; CODE XREF: sub_401BF0+46D↑p
.text:004065B0
.text:004065B0 C               = dword ptr -3Ch
.text:004065B0 Type            = dword ptr -38h
.text:004065B0 Radix           = dword ptr -34h
.text:004065B0 var_28          = dword ptr -28h
.text:004065B0 var_24          = dword ptr -24h
.text:004065B0 var_1D          = byte ptr -1Dh
.text:004065B0 var_1C          = dword ptr -1Ch
.text:004065B0 var_18          = dword ptr -18h
.text:004065B0 var_14          = byte ptr -14h
.text:004065B0 arg_0           = dword ptr  4
.text:004065B0 arg_4           = dword ptr  8
.text:004065B0 arg_8           = dword ptr  0Ch
.text:004065B0 arg_C           = dword ptr  10h
.text:004065B0 Str             = dword ptr  14h
.text:004065B0
.text:004065B0                 push    ebp
.text:004065B1                 push    edi
.text:004065B2                 push    esi
.text:004065B3                 push    ebx
.text:004065B4                 sub     esp, 2Ch
.text:004065B7                 mov     ebp, [esp+3Ch+arg_8]
.text:004065BB                 mov     [esp+3Ch+var_1C], 0
.text:004065C3                 mov     esi, [esp+3Ch+arg_0]
.text:004065C7                 cmp     ebp, 24h ; '$'
.text:004065CA                 ja      loc_406AEC
.text:004065D0                 mov     edi, [esp+3Ch+arg_4]
.text:004065D4                 test    edi, edi
.text:004065D6                 jz      loc_406AE3
.text:004065DC
.text:004065DC loc_4065DC:                             ; CODE XREF: sub_4065B0+537↓j
.text:004065DC                 movzx   edx, byte ptr [esi]
.text:004065DF                 mov     ebx, esi
.text:004065E1                 mov     [esp+3Ch+var_1D], dl
.text:004065E5                 lea     esi, [esi+0]
.text:004065E9                 lea     edi, [edi+0]
.text:004065F0
.text:004065F0 loc_4065F0:                             ; CODE XREF: sub_4065B0+70↓j
.text:004065F0                 movzx   edx, [esp+3Ch+var_1D]
.text:004065F5                 mov     ecx, ds:__mb_cur_max
.text:004065FB                 cmp     dword ptr [ecx], 1
.text:004065FE                 jz      loc_406AD0
.text:00406604                 mov     [esp+3Ch+Type], 8 ; Type
.text:0040660C                 mov     [esp+3Ch+C], edx ; C
.text:0040660F                 call    _isctype
.text:00406614
.text:00406614 loc_406614:                             ; CODE XREF: sub_4065B0+52E↓j
.text:00406614                 test    eax, eax
.text:00406616                 jz      short loc_406622
.text:00406618                 inc     ebx
.text:00406619                 movzx   eax, byte ptr [ebx]
.text:0040661C                 mov     [esp+3Ch+var_1D], al
.text:00406620                 jmp     short loc_4065F0
.text:00406622 ; ---------------------------------------------------------------------------
.text:00406622
.text:00406622 loc_406622:                             ; CODE XREF: sub_4065B0+66↑j
.text:00406622                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00406627                 mov     eax, 4
.text:0040662C                 jz      short loc_406685
.text:0040662E                 call    _errno
.text:00406633                 mov     dword ptr [eax], 0
.text:00406639                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:0040663D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00406641                 mov     [esp+3Ch+C], esi ; String
.text:00406644                 call    strtoul
.text:00406649                 mov     [esp+3Ch+var_18], eax
.text:0040664D                 mov     eax, [edi]
.text:0040664F                 cmp     eax, esi
.text:00406651                 jz      loc_406A9C
.text:00406657                 call    _errno
.text:0040665C                 mov     ebp, [eax]
.text:0040665E                 test    ebp, ebp
.text:00406660                 jnz     loc_406A7B
.text:00406666
.text:00406666 loc_406666:                             ; CODE XREF: sub_4065B0+4DD↓j
.text:00406666                                         ; sub_4065B0+51A↓j
.text:00406666                 mov     eax, [esp+3Ch+Str]
.text:0040666A                 test    eax, eax
.text:0040666C                 jz      short loc_406677
.text:0040666E                 mov     ecx, [edi]
.text:00406670                 movzx   eax, byte ptr [ecx]
.text:00406673                 test    al, al
.text:00406675                 jnz     short loc_40668D
.text:00406677
.text:00406677 loc_406677:                             ; CODE XREF: sub_4065B0+BC↑j
.text:00406677                                         ; sub_4065B0+26C↓j ...
.text:00406677                 mov     edx, [esp+3Ch+var_18]
.text:0040667B                 mov     esi, [esp+3Ch+arg_C]
.text:0040667F                 mov     eax, [esp+3Ch+var_1C]
.text:00406683                 mov     [esi], edx
.text:00406685
.text:00406685 loc_406685:                             ; CODE XREF: sub_4065B0+7C↑j
.text:00406685                                         ; sub_4065B0+112↓j ...
.text:00406685                 add     esp, 2Ch
.text:00406688                 pop     ebx
.text:00406689                 pop     esi
.text:0040668A                 pop     edi
.text:0040668B                 pop     ebp
.text:0040668C                 retn
.text:0040668D ; ---------------------------------------------------------------------------
.text:0040668D
.text:0040668D loc_40668D:                             ; CODE XREF: sub_4065B0+C5↑j
.text:0040668D                 mov     [esp+3Ch+var_24], 1
.text:00406695                 mov     edx, [esp+3Ch+Str]
.text:00406699                 movsx   esi, al
.text:0040669C                 mov     [esp+3Ch+Type], esi ; Val
.text:004066A0                 mov     ebx, 400h
.text:004066A5                 mov     [esp+3Ch+C], edx ; Str
.text:004066A8                 call    strchr
.text:004066AD                 test    eax, eax
.text:004066AF                 jnz     short loc_4066C4
.text:004066B1
.text:004066B1 def_406714:                             ; CODE XREF: sub_4065B0+162↓j
.text:004066B1                                         ; sub_4065B0+164↓j
.text:004066B1                                         ; DATA XREF: ...
.text:004066B1                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00406714 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004066B5                 mov     ebx, [esp+3Ch+var_18]
.text:004066B9                 mov     edi, [esp+3Ch+arg_C]
.text:004066BD                 or      eax, 2
.text:004066C0                 mov     [edi], ebx
.text:004066C2                 jmp     short loc_406685
.text:004066C4 ; ---------------------------------------------------------------------------
.text:004066C4
.text:004066C4 loc_4066C4:                             ; CODE XREF: sub_4065B0+FF↑j
.text:004066C4                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:004066CC                 mov     ebp, [esp+3Ch+Str]
.text:004066D0                 mov     [esp+3Ch+C], ebp ; Str
.text:004066D3                 call    strchr
.text:004066D8                 test    eax, eax
.text:004066DA                 jz      loc_406A70
.text:004066E0                 mov     ecx, [edi]
.text:004066E2                 mov     [esp+3Ch+var_28], ecx
.text:004066E6                 movsx   eax, byte ptr [ecx+1]
.text:004066EA                 cmp     eax, 44h ; 'D'
.text:004066ED                 jz      loc_406A39
.text:004066F3                 cmp     eax, 44h ; 'D'
.text:004066F6                 jg      loc_406A4B
.text:004066FC                 cmp     eax, 42h ; 'B'
.text:004066FF                 jz      loc_406A39
.text:00406705
.text:00406705 loc_406705:                             ; CODE XREF: sub_4065B0+496↓j
.text:00406705                                         ; sub_4065B0+49E↓j ...
.text:00406705                 mov     esi, [esp+3Ch+var_28]
.text:00406709                 movsx   eax, byte ptr [esi]
.text:0040670C                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:0040670F                 cmp     eax, 35h
.text:00406712                 ja      short def_406714 ; jumptable 00406714 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00406714                 jmp     ds:jpt_406714[eax*4] ; switch jump
.text:00406714 ; ---------------------------------------------------------------------------
.text:0040671B                 align 4
.text:0040671C jpt_406714      dd offset loc_40683B, offset def_406714, offset def_406714
.text:0040671C                                         ; DATA XREF: sub_4065B0+164↑r
.text:0040671C                 dd offset loc_40684B, offset def_406714, offset loc_40693C ; jump table for switch statement
.text:0040671C                 dd offset def_406714, offset def_406714, offset def_406714
.text:0040671C                 dd offset loc_406979, offset def_406714, offset loc_4069AB
.text:0040671C                 dd offset def_406714, offset def_406714, offset loc_406885
.text:0040671C                 dd offset def_406714, offset def_406714, offset def_406714
.text:0040671C                 dd offset loc_4069E9, offset def_406714, offset def_406714
.text:0040671C                 dd offset def_406714, offset def_406714, offset loc_4068C2
.text:0040671C                 dd offset loc_4068FF, offset def_406714, offset def_406714
.text:0040671C                 dd offset def_406714, offset def_406714, offset def_406714
.text:0040671C                 dd offset def_406714, offset def_406714, offset loc_4067F4
.text:0040671C                 dd offset loc_406806, offset def_406714, offset def_406714
.text:0040671C                 dd offset def_406714, offset loc_40693C, offset def_406714
.text:0040671C                 dd offset def_406714, offset def_406714, offset loc_406979
.text:0040671C                 dd offset def_406714, offset loc_4069AB, offset def_406714
.text:0040671C                 dd offset def_406714, offset def_406714, offset def_406714
.text:0040671C                 dd offset def_406714, offset def_406714, offset loc_4069E9
.text:0040671C                 dd offset def_406714, offset def_406714, offset loc_406A26
.text:004067F4 ; ---------------------------------------------------------------------------
.text:004067F4
.text:004067F4 loc_4067F4:                             ; CODE XREF: sub_4065B0+164↑j
.text:004067F4                                         ; DATA XREF: sub_4065B0:jpt_406714↑o
.text:004067F4                 mov     eax, [esp+3Ch+var_18] ; jumptable 00406714 case 98
.text:004067F8                 cmp     eax, 7FFFFFh
.text:004067FD                 ja      short loc_40682C
.text:004067FF                 shl     eax, 9
.text:00406802
.text:00406802 loc_406802:                             ; CODE XREF: sub_4065B0+299↓j
.text:00406802                                         ; sub_4065B0+484↓j
.text:00406802                 mov     [esp+3Ch+var_18], eax
.text:00406806
.text:00406806 loc_406806:                             ; CODE XREF: sub_4065B0+164↑j
.text:00406806                                         ; DATA XREF: sub_4065B0:jpt_406714↑o
.text:00406806                 xor     eax, eax        ; jumptable 00406714 case 99
.text:00406808
.text:00406808 loc_406808:                             ; CODE XREF: sub_4065B0+289↓j
.text:00406808                                         ; sub_4065B0+2CA↓j ...
.text:00406808                 or      [esp+3Ch+var_1C], eax
.text:0040680C                 mov     ebp, [esp+3Ch+var_28]
.text:00406810                 mov     ecx, [esp+3Ch+var_24]
.text:00406814                 add     ebp, ecx
.text:00406816                 mov     [edi], ebp
.text:00406818                 cmp     byte ptr [ebp+0], 0
.text:0040681C                 jz      loc_406677
.text:00406822                 or      [esp+3Ch+var_1C], 2
.text:00406827                 jmp     loc_406677
.text:0040682C ; ---------------------------------------------------------------------------
.text:0040682C
.text:0040682C loc_40682C:                             ; CODE XREF: sub_4065B0+24D↑j
.text:0040682C                                         ; sub_4065B0+294↓j ...
.text:0040682C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00406834                 mov     eax, 1
.text:00406839                 jmp     short loc_406808
.text:0040683B ; ---------------------------------------------------------------------------
.text:0040683B
.text:0040683B loc_40683B:                             ; CODE XREF: sub_4065B0+164↑j
.text:0040683B                                         ; DATA XREF: sub_4065B0:jpt_406714↑o
.text:0040683B                 mov     eax, [esp+3Ch+var_18] ; jumptable 00406714 case 66
.text:0040683F                 cmp     eax, 3FFFFFh
.text:00406844                 ja      short loc_40682C
.text:00406846                 shl     eax, 0Ah
.text:00406849                 jmp     short loc_406802
.text:0040684B ; ---------------------------------------------------------------------------
.text:0040684B
.text:0040684B loc_40684B:                             ; CODE XREF: sub_4065B0+164↑j
.text:0040684B                                         ; DATA XREF: sub_4065B0:jpt_406714↑o
.text:0040684B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406714 case 69
.text:0040684F                 xor     ebp, ebp
.text:00406851                 mov     esi, 5
.text:00406856
.text:00406856 loc_406856:                             ; CODE XREF: sub_4065B0+2C8↓j
.text:00406856                 xor     edx, edx
.text:00406858                 mov     eax, 0FFFFFFFFh
.text:0040685D                 div     ebx
.text:0040685F                 mov     edx, [ecx]
.text:00406861                 cmp     eax, edx
.text:00406863                 jnb     short loc_40687C
.text:00406865                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040686B                 mov     eax, 1
.text:00406870
.text:00406870 loc_406870:                             ; CODE XREF: sub_4065B0+2D3↓j
.text:00406870                 dec     esi
.text:00406871                 or      ebp, eax
.text:00406873                 cmp     esi, 0FFFFFFFFh
.text:00406876                 mov     eax, ebp
.text:00406878                 jnz     short loc_406856
.text:0040687A                 jmp     short loc_406808
.text:0040687C ; ---------------------------------------------------------------------------
.text:0040687C
.text:0040687C loc_40687C:                             ; CODE XREF: sub_4065B0+2B3↑j
.text:0040687C                 imul    edx, ebx
.text:0040687F                 xor     eax, eax
.text:00406881                 mov     [ecx], edx
.text:00406883                 jmp     short loc_406870
.text:00406885 ; ---------------------------------------------------------------------------
.text:00406885
.text:00406885 loc_406885:                             ; CODE XREF: sub_4065B0+164↑j
.text:00406885                                         ; DATA XREF: sub_4065B0:jpt_406714↑o
.text:00406885                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406714 case 80
.text:00406889                 xor     ebp, ebp
.text:0040688B                 mov     esi, 4
.text:00406890
.text:00406890 loc_406890:                             ; CODE XREF: sub_4065B0+302↓j
.text:00406890                 xor     edx, edx
.text:00406892                 mov     eax, 0FFFFFFFFh
.text:00406897                 div     ebx
.text:00406899                 mov     edx, [ecx]
.text:0040689B                 cmp     eax, edx
.text:0040689D                 jnb     short loc_4068B9
.text:0040689F                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004068A5                 mov     eax, 1
.text:004068AA
.text:004068AA loc_4068AA:                             ; CODE XREF: sub_4065B0+310↓j
.text:004068AA                 dec     esi
.text:004068AB                 or      ebp, eax
.text:004068AD                 cmp     esi, 0FFFFFFFFh
.text:004068B0                 mov     eax, ebp
.text:004068B2                 jnz     short loc_406890
.text:004068B4                 jmp     loc_406808
.text:004068B9 ; ---------------------------------------------------------------------------
.text:004068B9
.text:004068B9 loc_4068B9:                             ; CODE XREF: sub_4065B0+2ED↑j
.text:004068B9                 imul    edx, ebx
.text:004068BC                 xor     eax, eax
.text:004068BE                 mov     [ecx], edx
.text:004068C0                 jmp     short loc_4068AA
.text:004068C2 ; ---------------------------------------------------------------------------
.text:004068C2
.text:004068C2 loc_4068C2:                             ; CODE XREF: sub_4065B0+164↑j
.text:004068C2                                         ; DATA XREF: sub_4065B0:jpt_406714↑o
.text:004068C2                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406714 case 89
.text:004068C6                 xor     ebp, ebp
.text:004068C8                 mov     esi, 7
.text:004068CD
.text:004068CD loc_4068CD:                             ; CODE XREF: sub_4065B0+33F↓j
.text:004068CD                 xor     edx, edx
.text:004068CF                 mov     eax, 0FFFFFFFFh
.text:004068D4                 div     ebx
.text:004068D6                 mov     edx, [ecx]
.text:004068D8                 cmp     eax, edx
.text:004068DA                 jnb     short loc_4068F6
.text:004068DC                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004068E2                 mov     eax, 1
.text:004068E7
.text:004068E7 loc_4068E7:                             ; CODE XREF: sub_4065B0+34D↓j
.text:004068E7                 dec     esi
.text:004068E8                 or      ebp, eax
.text:004068EA                 cmp     esi, 0FFFFFFFFh
.text:004068ED                 mov     eax, ebp
.text:004068EF                 jnz     short loc_4068CD
.text:004068F1                 jmp     loc_406808
.text:004068F6 ; ---------------------------------------------------------------------------
.text:004068F6
.text:004068F6 loc_4068F6:                             ; CODE XREF: sub_4065B0+32A↑j
.text:004068F6                 imul    edx, ebx
.text:004068F9                 xor     eax, eax
.text:004068FB                 mov     [ecx], edx
.text:004068FD                 jmp     short loc_4068E7
.text:004068FF ; ---------------------------------------------------------------------------
.text:004068FF
.text:004068FF loc_4068FF:                             ; CODE XREF: sub_4065B0+164↑j
.text:004068FF                                         ; DATA XREF: sub_4065B0:jpt_406714↑o
.text:004068FF                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406714 case 90
.text:00406903                 xor     ebp, ebp
.text:00406905                 mov     esi, 6
.text:0040690A
.text:0040690A loc_40690A:                             ; CODE XREF: sub_4065B0+37C↓j
.text:0040690A                 xor     edx, edx
.text:0040690C                 mov     eax, 0FFFFFFFFh
.text:00406911                 div     ebx
.text:00406913                 mov     edx, [ecx]
.text:00406915                 cmp     eax, edx
.text:00406917                 jnb     short loc_406933
.text:00406919                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040691F                 mov     eax, 1
.text:00406924
.text:00406924 loc_406924:                             ; CODE XREF: sub_4065B0+38A↓j
.text:00406924                 dec     esi
.text:00406925                 or      ebp, eax
.text:00406927                 cmp     esi, 0FFFFFFFFh
.text:0040692A                 mov     eax, ebp
.text:0040692C                 jnz     short loc_40690A
.text:0040692E                 jmp     loc_406808
.text:00406933 ; ---------------------------------------------------------------------------
.text:00406933
.text:00406933 loc_406933:                             ; CODE XREF: sub_4065B0+367↑j
.text:00406933                 imul    edx, ebx
.text:00406936                 xor     eax, eax
.text:00406938                 mov     [ecx], edx
.text:0040693A                 jmp     short loc_406924
.text:0040693C ; ---------------------------------------------------------------------------
.text:0040693C
.text:0040693C loc_40693C:                             ; CODE XREF: sub_4065B0+164↑j
.text:0040693C                                         ; DATA XREF: sub_4065B0:jpt_406714↑o
.text:0040693C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406714 cases 71,103
.text:00406940                 xor     ebp, ebp
.text:00406942                 mov     esi, 2
.text:00406947
.text:00406947 loc_406947:                             ; CODE XREF: sub_4065B0+3B9↓j
.text:00406947                 xor     edx, edx
.text:00406949                 mov     eax, 0FFFFFFFFh
.text:0040694E                 div     ebx
.text:00406950                 mov     edx, [ecx]
.text:00406952                 cmp     eax, edx
.text:00406954                 jnb     short loc_406970
.text:00406956                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040695C                 mov     eax, 1
.text:00406961
.text:00406961 loc_406961:                             ; CODE XREF: sub_4065B0+3C7↓j
.text:00406961                 dec     esi
.text:00406962                 or      ebp, eax
.text:00406964                 cmp     esi, 0FFFFFFFFh
.text:00406967                 mov     eax, ebp
.text:00406969                 jnz     short loc_406947
.text:0040696B                 jmp     loc_406808
.text:00406970 ; ---------------------------------------------------------------------------
.text:00406970
.text:00406970 loc_406970:                             ; CODE XREF: sub_4065B0+3A4↑j
.text:00406970                 imul    edx, ebx
.text:00406973                 xor     eax, eax
.text:00406975                 mov     [ecx], edx
.text:00406977                 jmp     short loc_406961
.text:00406979 ; ---------------------------------------------------------------------------
.text:00406979
.text:00406979 loc_406979:                             ; CODE XREF: sub_4065B0+164↑j
.text:00406979                                         ; DATA XREF: sub_4065B0:jpt_406714↑o
.text:00406979                 xor     edx, edx        ; jumptable 00406714 cases 75,107
.text:0040697B                 mov     eax, 0FFFFFFFFh
.text:00406980                 div     ebx
.text:00406982                 mov     edx, [esp+3Ch+var_18]
.text:00406986                 cmp     eax, edx
.text:00406988                 jnb     short loc_4069A0
.text:0040698A                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00406992                 mov     edx, 1
.text:00406997
.text:00406997 loc_406997:                             ; CODE XREF: sub_4065B0+3F9↓j
.text:00406997                 xor     eax, eax
.text:00406999                 or      eax, edx
.text:0040699B                 jmp     loc_406808
.text:004069A0 ; ---------------------------------------------------------------------------
.text:004069A0
.text:004069A0 loc_4069A0:                             ; CODE XREF: sub_4065B0+3D8↑j
.text:004069A0                 imul    edx, ebx
.text:004069A3                 mov     [esp+3Ch+var_18], edx
.text:004069A7                 xor     edx, edx
.text:004069A9                 jmp     short loc_406997
.text:004069AB ; ---------------------------------------------------------------------------
.text:004069AB
.text:004069AB loc_4069AB:                             ; CODE XREF: sub_4065B0+164↑j
.text:004069AB                                         ; DATA XREF: sub_4065B0:jpt_406714↑o
.text:004069AB                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406714 cases 77,109
.text:004069AF                 xor     ebp, ebp
.text:004069B1                 mov     esi, 1
.text:004069B6
.text:004069B6 loc_4069B6:                             ; CODE XREF: sub_4065B0+42E↓j
.text:004069B6                 xor     edx, edx
.text:004069B8                 mov     eax, 0FFFFFFFFh
.text:004069BD                 div     ebx
.text:004069BF                 mov     edx, [ecx]
.text:004069C1                 cmp     eax, edx
.text:004069C3                 jnb     short loc_4069E0
.text:004069C5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004069CB                 mov     eax, 1
.text:004069D0
.text:004069D0 loc_4069D0:                             ; CODE XREF: sub_4065B0+437↓j
.text:004069D0                 dec     esi
.text:004069D1                 or      ebp, eax
.text:004069D3                 cmp     esi, 0FFFFFFFFh
.text:004069D6                 mov     eax, ebp
.text:004069D8                 jz      loc_406808
.text:004069DE                 jmp     short loc_4069B6
.text:004069E0 ; ---------------------------------------------------------------------------
.text:004069E0
.text:004069E0 loc_4069E0:                             ; CODE XREF: sub_4065B0+413↑j
.text:004069E0                 imul    edx, ebx
.text:004069E3                 xor     eax, eax
.text:004069E5                 mov     [ecx], edx
.text:004069E7                 jmp     short loc_4069D0
.text:004069E9 ; ---------------------------------------------------------------------------
.text:004069E9
.text:004069E9 loc_4069E9:                             ; CODE XREF: sub_4065B0+164↑j
.text:004069E9                                         ; DATA XREF: sub_4065B0:jpt_406714↑o
.text:004069E9                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406714 cases 84,116
.text:004069ED                 xor     ebp, ebp
.text:004069EF                 mov     esi, 3
.text:004069F4
.text:004069F4 loc_4069F4:                             ; CODE XREF: sub_4065B0+466↓j
.text:004069F4                 xor     edx, edx
.text:004069F6                 mov     eax, 0FFFFFFFFh
.text:004069FB                 div     ebx
.text:004069FD                 mov     edx, [ecx]
.text:004069FF                 cmp     eax, edx
.text:00406A01                 jnb     short loc_406A1D
.text:00406A03                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00406A09                 mov     eax, 1
.text:00406A0E
.text:00406A0E loc_406A0E:                             ; CODE XREF: sub_4065B0+474↓j
.text:00406A0E                 dec     esi
.text:00406A0F                 or      ebp, eax
.text:00406A11                 cmp     esi, 0FFFFFFFFh
.text:00406A14                 mov     eax, ebp
.text:00406A16                 jnz     short loc_4069F4
.text:00406A18                 jmp     loc_406808
.text:00406A1D ; ---------------------------------------------------------------------------
.text:00406A1D
.text:00406A1D loc_406A1D:                             ; CODE XREF: sub_4065B0+451↑j
.text:00406A1D                 imul    edx, ebx
.text:00406A20                 xor     eax, eax
.text:00406A22                 mov     [ecx], edx
.text:00406A24                 jmp     short loc_406A0E
.text:00406A26 ; ---------------------------------------------------------------------------
.text:00406A26
.text:00406A26 loc_406A26:                             ; CODE XREF: sub_4065B0+164↑j
.text:00406A26                                         ; DATA XREF: sub_4065B0:jpt_406714↑o
.text:00406A26                 mov     eax, [esp+3Ch+var_18] ; jumptable 00406714 case 119
.text:00406A2A                 test    eax, eax
.text:00406A2C                 js      loc_40682C
.text:00406A32                 add     eax, eax
.text:00406A34                 jmp     loc_406802
.text:00406A39 ; ---------------------------------------------------------------------------
.text:00406A39
.text:00406A39 loc_406A39:                             ; CODE XREF: sub_4065B0+13D↑j
.text:00406A39                                         ; sub_4065B0+14F↑j
.text:00406A39                 mov     [esp+3Ch+var_24], 2
.text:00406A41                 mov     ebx, 3E8h
.text:00406A46                 jmp     loc_406705
.text:00406A4B ; ---------------------------------------------------------------------------
.text:00406A4B
.text:00406A4B loc_406A4B:                             ; CODE XREF: sub_4065B0+146↑j
.text:00406A4B                 cmp     eax, 69h ; 'i'
.text:00406A4E                 jnz     loc_406705
.text:00406A54                 mov     edx, [esp+3Ch+var_28]
.text:00406A58                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:00406A5C                 jnz     loc_406705
.text:00406A62                 mov     [esp+3Ch+var_24], 3
.text:00406A6A                 jmp     loc_406705
.text:00406A6A ; ---------------------------------------------------------------------------
.text:00406A6F                 align 10h
.text:00406A70
.text:00406A70 loc_406A70:                             ; CODE XREF: sub_4065B0+12A↑j
.text:00406A70                 mov     eax, [edi]
.text:00406A72                 mov     [esp+3Ch+var_28], eax
.text:00406A76                 jmp     loc_406705
.text:00406A7B ; ---------------------------------------------------------------------------
.text:00406A7B
.text:00406A7B loc_406A7B:                             ; CODE XREF: sub_4065B0+B0↑j
.text:00406A7B                 call    _errno
.text:00406A80                 cmp     dword ptr [eax], 22h ; '"'
.text:00406A83                 jnz     short loc_406A92
.text:00406A85                 mov     [esp+3Ch+var_1C], 1
.text:00406A8D                 jmp     loc_406666
.text:00406A92 ; ---------------------------------------------------------------------------
.text:00406A92
.text:00406A92 loc_406A92:                             ; CODE XREF: sub_4065B0+4D3↑j
.text:00406A92                                         ; sub_4065B0+4F2↓j ...
.text:00406A92                 mov     eax, 4
.text:00406A97                 jmp     loc_406685
.text:00406A9C ; ---------------------------------------------------------------------------
.text:00406A9C
.text:00406A9C loc_406A9C:                             ; CODE XREF: sub_4065B0+A1↑j
.text:00406A9C                 mov     edx, [esp+3Ch+Str]
.text:00406AA0                 test    edx, edx
.text:00406AA2                 jz      short loc_406A92
.text:00406AA4                 movzx   eax, byte ptr [eax]
.text:00406AA7                 test    al, al
.text:00406AA9                 jz      short loc_406A92
.text:00406AAB                 mov     ebx, [esp+3Ch+Str]
.text:00406AAF                 movsx   esi, al
.text:00406AB2                 mov     [esp+3Ch+Type], esi ; Val
.text:00406AB6                 mov     [esp+3Ch+C], ebx ; Str
.text:00406AB9                 call    strchr
.text:00406ABE                 test    eax, eax
.text:00406AC0                 jz      short loc_406A92
.text:00406AC2                 mov     [esp+3Ch+var_18], 1
.text:00406ACA                 jmp     loc_406666
.text:00406ACA ; ---------------------------------------------------------------------------
.text:00406ACF                 align 10h
.text:00406AD0
.text:00406AD0 loc_406AD0:                             ; CODE XREF: sub_4065B0+4E↑j
.text:00406AD0                 mov     eax, ds:_pctype
.text:00406AD5                 mov     ecx, [eax]
.text:00406AD7                 movzx   eax, word ptr [ecx+edx*2]
.text:00406ADB                 and     eax, 8
.text:00406ADE                 jmp     loc_406614
.text:00406AE3 ; ---------------------------------------------------------------------------
.text:00406AE3
.text:00406AE3 loc_406AE3:                             ; CODE XREF: sub_4065B0+26↑j
.text:00406AE3                 lea     edi, [esp+3Ch+var_14]
.text:00406AE7                 jmp     loc_4065DC
.text:00406AEC ; ---------------------------------------------------------------------------
.text:00406AEC
.text:00406AEC loc_406AEC:                             ; CODE XREF: sub_4065B0+1A↑j
.text:00406AEC                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:00406AF4                 mov     [esp+3Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00406AFC                 mov     [esp+3Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00406B03                 call    _assert
.text:00406B03 sub_4065B0      endp
.text:00406B03
.text:00406B03 ; ---------------------------------------------------------------------------
.text:00406B08                 align 20h
.text:00406B20
.text:00406B20 ; =============== S U B R O U T I N E =======================================
.text:00406B20
.text:00406B20
.text:00406B20 sub_406B20      proc near
.text:00406B20
.text:00406B20 Size            = dword ptr -0Ch
.text:00406B20 var_4           = dword ptr -4
.text:00406B20 arg_0           = dword ptr  4
.text:00406B20 arg_4           = dword ptr  8
.text:00406B20
.text:00406B20                 sub     esp, 0Ch
.text:00406B23                 xor     edx, edx
.text:00406B25                 mov     ecx, [esp+0Ch+arg_4]
.text:00406B29                 mov     [esp+0Ch+var_4], ebx
.text:00406B2D                 mov     eax, 0FFFFFFFFh
.text:00406B32                 mov     ebx, [esp+0Ch+arg_0]
.text:00406B36                 div     ecx
.text:00406B38                 cmp     eax, ebx
.text:00406B3A                 jb      short loc_406B59
.text:00406B3C                 mov     edx, ebx
.text:00406B3E                 imul    edx, ecx
.text:00406B41                 mov     [esp+0Ch+Size], edx ; Size
.text:00406B44                 call    malloc
.text:00406B49                 test    eax, eax
.text:00406B4B                 jz      short loc_406B55
.text:00406B4D
.text:00406B4D loc_406B4D:                             ; CODE XREF: sub_406B20+37↓j
.text:00406B4D                 mov     ebx, [esp+0Ch+var_4]
.text:00406B51                 add     esp, 0Ch
.text:00406B54                 retn
.text:00406B55 ; ---------------------------------------------------------------------------
.text:00406B55
.text:00406B55 loc_406B55:                             ; CODE XREF: sub_406B20+2B↑j
.text:00406B55                 test    ebx, ebx
.text:00406B57                 jz      short loc_406B4D
.text:00406B59
.text:00406B59 loc_406B59:                             ; CODE XREF: sub_406B20+1A↑j
.text:00406B59                 call    sub_407EE0
.text:00406B59 sub_406B20      endp
.text:00406B59
.text:00406B59 ; ---------------------------------------------------------------------------
.text:00406B5E                 align 10h
.text:00406B60
.text:00406B60 ; =============== S U B R O U T I N E =======================================
.text:00406B60
.text:00406B60
.text:00406B60 ; int __cdecl sub_406B60(size_t)
.text:00406B60 sub_406B60      proc near               ; CODE XREF: sub_402F00+51↑p
.text:00406B60                                         ; .text:00408A29↓p ...
.text:00406B60
.text:00406B60 Size            = dword ptr -0Ch
.text:00406B60 var_4           = dword ptr -4
.text:00406B60 arg_0           = dword ptr  4
.text:00406B60
.text:00406B60                 sub     esp, 0Ch
.text:00406B63                 mov     [esp+0Ch+var_4], ebx
.text:00406B67                 mov     ebx, [esp+0Ch+arg_0]
.text:00406B6B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406B6E                 call    malloc
.text:00406B73                 test    eax, eax
.text:00406B75                 jz      short loc_406B80
.text:00406B77
.text:00406B77 loc_406B77:                             ; CODE XREF: sub_406B60+22↓j
.text:00406B77                 mov     ebx, [esp+0Ch+var_4]
.text:00406B7B                 add     esp, 0Ch
.text:00406B7E                 retn
.text:00406B7E ; ---------------------------------------------------------------------------
.text:00406B7F                 align 10h
.text:00406B80
.text:00406B80 loc_406B80:                             ; CODE XREF: sub_406B60+15↑j
.text:00406B80                 test    ebx, ebx
.text:00406B82                 jz      short loc_406B77
.text:00406B84                 call    sub_407EE0
.text:00406B84 sub_406B60      endp
.text:00406B84
.text:00406B84 ; ---------------------------------------------------------------------------
.text:00406B89                 align 10h
.text:00406B90                 sub     esp, 1Ch
.text:00406B93                 xor     edx, edx
.text:00406B95                 mov     eax, 0FFFFFFFFh
.text:00406B9A                 mov     [esp+14h], ebx
.text:00406B9E                 mov     ecx, [esp+20h]
.text:00406BA2                 mov     ebx, [esp+28h]
.text:00406BA6                 mov     [esp+18h], esi
.text:00406BAA                 mov     esi, [esp+24h]
.text:00406BAE                 div     ebx
.text:00406BB0                 cmp     eax, esi
.text:00406BB2                 jb      short loc_406BE4
.text:00406BB4                 mov     [esp], ecx
.text:00406BB7                 mov     edx, esi
.text:00406BB9                 imul    edx, ebx
.text:00406BBC                 mov     [esp+4], edx
.text:00406BC0                 call    realloc
.text:00406BC5                 test    eax, eax
.text:00406BC7                 mov     ecx, eax
.text:00406BC9                 jz      short loc_406BE0
.text:00406BCB
.text:00406BCB loc_406BCB:                             ; CODE XREF: .text:00406BE2↓j
.text:00406BCB                 mov     ebx, [esp+14h]
.text:00406BCF                 mov     eax, ecx
.text:00406BD1                 mov     esi, [esp+18h]
.text:00406BD5                 add     esp, 1Ch
.text:00406BD8                 retn
.text:00406BD8 ; ---------------------------------------------------------------------------
.text:00406BD9                 align 10h
.text:00406BE0
.text:00406BE0 loc_406BE0:                             ; CODE XREF: .text:00406BC9↑j
.text:00406BE0                 test    esi, esi
.text:00406BE2                 jz      short loc_406BCB
.text:00406BE4
.text:00406BE4 loc_406BE4:                             ; CODE XREF: .text:00406BB2↑j
.text:00406BE4                 call    sub_407EE0
.text:00406BE4 ; ---------------------------------------------------------------------------
.text:00406BE9                 align 10h
.text:00406BF0
.text:00406BF0 ; =============== S U B R O U T I N E =======================================
.text:00406BF0
.text:00406BF0
.text:00406BF0 ; int __cdecl sub_406BF0(void *, size_t)
.text:00406BF0 sub_406BF0      proc near               ; CODE XREF: sub_4090F0+5B↓p
.text:00406BF0
.text:00406BF0 Block           = dword ptr -0Ch
.text:00406BF0 Size            = dword ptr -8
.text:00406BF0 var_4           = dword ptr -4
.text:00406BF0 arg_0           = dword ptr  4
.text:00406BF0 arg_4           = dword ptr  8
.text:00406BF0
.text:00406BF0                 sub     esp, 0Ch
.text:00406BF3                 mov     edx, [esp+0Ch+arg_0]
.text:00406BF7                 mov     [esp+0Ch+var_4], ebx
.text:00406BFB                 mov     ebx, [esp+0Ch+arg_4]
.text:00406BFF                 mov     [esp+0Ch+Block], edx ; Block
.text:00406C02                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406C06                 call    realloc
.text:00406C0B                 test    eax, eax
.text:00406C0D                 jz      short loc_406C17
.text:00406C0F
.text:00406C0F loc_406C0F:                             ; CODE XREF: sub_406BF0+29↓j
.text:00406C0F                 mov     ebx, [esp+0Ch+var_4]
.text:00406C13                 add     esp, 0Ch
.text:00406C16                 retn
.text:00406C17 ; ---------------------------------------------------------------------------
.text:00406C17
.text:00406C17 loc_406C17:                             ; CODE XREF: sub_406BF0+1D↑j
.text:00406C17                 test    ebx, ebx
.text:00406C19                 jz      short loc_406C0F
.text:00406C1B                 call    sub_407EE0
.text:00406C1B sub_406BF0      endp
.text:00406C1B
.text:00406C20 ; ---------------------------------------------------------------------------
.text:00406C20                 jmp     sub_406D70
.text:00406C20 ; ---------------------------------------------------------------------------
.text:00406C25                 align 10h
.text:00406C30                 sub     esp, 0Ch
.text:00406C33                 mov     edx, [esp+14h]
.text:00406C37                 mov     dword ptr [esp+8], 1
.text:00406C3F                 mov     [esp+4], edx
.text:00406C43                 mov     edx, [esp+10h]
.text:00406C47                 mov     [esp], edx
.text:00406C4A                 call    sub_406D70
.text:00406C4F                 add     esp, 0Ch
.text:00406C52                 retn
.text:00406C52 ; ---------------------------------------------------------------------------
.text:00406C53                 align 10h
.text:00406C60                 sub     esp, 1Ch
.text:00406C63                 mov     [esp+18h], ebx
.text:00406C67                 mov     ebx, [esp+20h]
.text:00406C6B                 mov     [esp], ebx
.text:00406C6E                 call    malloc
.text:00406C73                 test    eax, eax
.text:00406C75                 jz      short loc_406C93
.text:00406C77
.text:00406C77 loc_406C77:                             ; CODE XREF: .text:00406C95↓j
.text:00406C77                 mov     [esp+8], ebx
.text:00406C7B                 mov     dword ptr [esp+4], 0
.text:00406C83                 mov     [esp], eax
.text:00406C86                 call    memset
.text:00406C8B                 mov     ebx, [esp+18h]
.text:00406C8F                 add     esp, 1Ch
.text:00406C92                 retn
.text:00406C93 ; ---------------------------------------------------------------------------
.text:00406C93
.text:00406C93 loc_406C93:                             ; CODE XREF: .text:00406C75↑j
.text:00406C93                 test    ebx, ebx
.text:00406C95                 jz      short loc_406C77
.text:00406C97                 call    sub_407EE0
.text:00406C97 ; ---------------------------------------------------------------------------
.text:00406C9C                 align 10h
.text:00406CA0                 sub     esp, 0Ch
.text:00406CA3                 xor     edx, edx
.text:00406CA5                 mov     ecx, [esp+14h]
.text:00406CA9                 mov     [esp+8], ebx
.text:00406CAD                 mov     eax, 0FFFFFFFFh
.text:00406CB2                 mov     ebx, [esp+10h]
.text:00406CB6                 div     ecx
.text:00406CB8                 cmp     eax, ebx
.text:00406CBA                 jb      short loc_406CD8
.text:00406CBC                 mov     [esp+4], ecx
.text:00406CC0                 mov     [esp], ebx
.text:00406CC3                 call    calloc
.text:00406CC8                 test    eax, eax
.text:00406CCA                 jz      short loc_406CD4
.text:00406CCC
.text:00406CCC loc_406CCC:                             ; CODE XREF: .text:00406CD6↓j
.text:00406CCC                 mov     ebx, [esp+8]
.text:00406CD0                 add     esp, 0Ch
.text:00406CD3                 retn
.text:00406CD4 ; ---------------------------------------------------------------------------
.text:00406CD4
.text:00406CD4 loc_406CD4:                             ; CODE XREF: .text:00406CCA↑j
.text:00406CD4                 test    ebx, ebx
.text:00406CD6                 jz      short loc_406CCC
.text:00406CD8
.text:00406CD8 loc_406CD8:                             ; CODE XREF: .text:00406CBA↑j
.text:00406CD8                 call    sub_407EE0
.text:00406CD8 ; ---------------------------------------------------------------------------
.text:00406CDD                 align 10h
.text:00406CE0                 sub     esp, 1Ch
.text:00406CE3                 mov     [esp+18h], ebx
.text:00406CE7                 mov     ebx, [esp+24h]
.text:00406CEB                 mov     [esp], ebx
.text:00406CEE                 call    malloc
.text:00406CF3                 test    eax, eax
.text:00406CF5                 mov     edx, eax
.text:00406CF7                 jz      short loc_406D15
.text:00406CF9
.text:00406CF9 loc_406CF9:                             ; CODE XREF: .text:00406D17↓j
.text:00406CF9                 mov     [esp+8], ebx
.text:00406CFD                 mov     ecx, [esp+20h]
.text:00406D01                 mov     [esp], edx
.text:00406D04                 mov     [esp+4], ecx
.text:00406D08                 call    memcpy
.text:00406D0D                 mov     ebx, [esp+18h]
.text:00406D11                 add     esp, 1Ch
.text:00406D14                 retn
.text:00406D15 ; ---------------------------------------------------------------------------
.text:00406D15
.text:00406D15 loc_406D15:                             ; CODE XREF: .text:00406CF7↑j
.text:00406D15                 test    ebx, ebx
.text:00406D17                 jz      short loc_406CF9
.text:00406D19                 call    sub_407EE0
.text:00406D19 ; ---------------------------------------------------------------------------
.text:00406D1E                 align 10h
.text:00406D20
.text:00406D20 ; =============== S U B R O U T I N E =======================================
.text:00406D20
.text:00406D20
.text:00406D20 ; int __cdecl sub_406D20(char *)
.text:00406D20 sub_406D20      proc near               ; CODE XREF: sub_4023E0+1C↑p
.text:00406D20                                         ; .text:0040244C↑p
.text:00406D20
.text:00406D20 Str             = dword ptr -1Ch
.text:00406D20 Src             = dword ptr -18h
.text:00406D20 Size            = dword ptr -14h
.text:00406D20 var_8           = dword ptr -8
.text:00406D20 var_4           = dword ptr -4
.text:00406D20 arg_0           = dword ptr  4
.text:00406D20
.text:00406D20                 sub     esp, 1Ch
.text:00406D23                 mov     [esp+1Ch+var_4], esi
.text:00406D27                 mov     esi, [esp+1Ch+arg_0]
.text:00406D2B                 mov     [esp+1Ch+var_8], ebx
.text:00406D2F                 mov     [esp+1Ch+Str], esi ; Str
.text:00406D32                 call    strlen
.text:00406D37                 lea     ebx, [eax+1]
.text:00406D3A                 mov     [esp+1Ch+Str], ebx ; Size
.text:00406D3D                 call    malloc
.text:00406D42                 test    eax, eax
.text:00406D44                 jz      short loc_406D62
.text:00406D46
.text:00406D46 loc_406D46:                             ; CODE XREF: sub_406D20+44↓j
.text:00406D46                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406D4A                 mov     [esp+1Ch+Src], esi ; Src
.text:00406D4E                 mov     [esp+1Ch+Str], eax ; void *
.text:00406D51                 call    memcpy
.text:00406D56                 mov     ebx, [esp+1Ch+var_8]
.text:00406D5A                 mov     esi, [esp+1Ch+var_4]
.text:00406D5E                 add     esp, 1Ch
.text:00406D61                 retn
.text:00406D62 ; ---------------------------------------------------------------------------
.text:00406D62
.text:00406D62 loc_406D62:                             ; CODE XREF: sub_406D20+24↑j
.text:00406D62                 test    ebx, ebx
.text:00406D64                 jz      short loc_406D46
.text:00406D66                 call    sub_407EE0
.text:00406D66 sub_406D20      endp
.text:00406D66
.text:00406D66 ; ---------------------------------------------------------------------------
.text:00406D6B                 align 10h
.text:00406D70
.text:00406D70 ; =============== S U B R O U T I N E =======================================
.text:00406D70
.text:00406D70
.text:00406D70 ; int __cdecl sub_406D70(void *, int, int)
.text:00406D70 sub_406D70      proc near               ; CODE XREF: .text:00406C20↑j
.text:00406D70                                         ; .text:00406C4A↑p
.text:00406D70
.text:00406D70 Block           = dword ptr -1Ch
.text:00406D70 Size            = dword ptr -18h
.text:00406D70 var_C           = dword ptr -0Ch
.text:00406D70 var_8           = dword ptr -8
.text:00406D70 var_4           = dword ptr -4
.text:00406D70 arg_0           = dword ptr  4
.text:00406D70 arg_4           = dword ptr  8
.text:00406D70 arg_8           = dword ptr  0Ch
.text:00406D70
.text:00406D70                 sub     esp, 1Ch
.text:00406D73                 mov     [esp+1Ch+var_8], esi
.text:00406D77                 mov     esi, [esp+1Ch+arg_0]
.text:00406D7B                 mov     [esp+1Ch+var_4], edi
.text:00406D7F                 mov     edi, [esp+1Ch+arg_4]
.text:00406D83                 test    esi, esi
.text:00406D85                 mov     [esp+1Ch+var_C], ebx
.text:00406D89                 mov     ecx, [edi]
.text:00406D8B                 mov     ebx, [esp+1Ch+arg_8]
.text:00406D8F                 jz      short loc_406DD0
.text:00406D91                 xor     edx, edx
.text:00406D93                 mov     eax, 7FFFFFFFh
.text:00406D98                 div     ebx
.text:00406D9A                 cmp     eax, ecx
.text:00406D9C                 jb      short loc_406DC9
.text:00406D9E                 add     ecx, ecx
.text:00406DA0
.text:00406DA0 loc_406DA0:                             ; CODE XREF: sub_406D70+62↓j
.text:00406DA0                                         ; sub_406D70+71↓j ...
.text:00406DA0                 mov     [edi], ecx
.text:00406DA2                 imul    ebx, ecx
.text:00406DA5                 mov     [esp+1Ch+Block], esi ; Block
.text:00406DA8                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406DAC                 call    realloc
.text:00406DB1                 test    eax, eax
.text:00406DB3                 jz      short loc_406DC5
.text:00406DB5
.text:00406DB5 loc_406DB5:                             ; CODE XREF: sub_406D70+57↓j
.text:00406DB5                 mov     ebx, [esp+1Ch+var_C]
.text:00406DB9                 mov     esi, [esp+1Ch+var_8]
.text:00406DBD                 mov     edi, [esp+1Ch+var_4]
.text:00406DC1                 add     esp, 1Ch
.text:00406DC4                 retn
.text:00406DC5 ; ---------------------------------------------------------------------------
.text:00406DC5
.text:00406DC5 loc_406DC5:                             ; CODE XREF: sub_406D70+43↑j
.text:00406DC5                 test    ebx, ebx
.text:00406DC7                 jz      short loc_406DB5
.text:00406DC9
.text:00406DC9 loc_406DC9:                             ; CODE XREF: sub_406D70+2C↑j
.text:00406DC9                 call    sub_407EE0
.text:00406DC9 ; ---------------------------------------------------------------------------
.text:00406DCE                 align 10h
.text:00406DD0
.text:00406DD0 loc_406DD0:                             ; CODE XREF: sub_406D70+1F↑j
.text:00406DD0                 test    ecx, ecx
.text:00406DD2                 jnz     short loc_406DA0
.text:00406DD4                 xor     edx, edx
.text:00406DD6                 mov     eax, 40h ; '@'
.text:00406DDB                 div     ebx
.text:00406DDD                 test    eax, eax
.text:00406DDF                 mov     ecx, eax
.text:00406DE1                 jnz     short loc_406DA0
.text:00406DE3                 mov     ecx, 1
.text:00406DE8                 jmp     short loc_406DA0
.text:00406DE8 sub_406D70      endp
.text:00406DE8
.text:00406DE8 ; ---------------------------------------------------------------------------
.text:00406DEA                 align 10h
.text:00406DF0
.text:00406DF0 ; =============== S U B R O U T I N E =======================================
.text:00406DF0
.text:00406DF0
.text:00406DF0 sub_406DF0      proc near               ; CODE XREF: sub_4023E0+3C↑p
.text:00406DF0                                         ; .text:0040246C↑p
.text:00406DF0
.text:00406DF0 var_1C          = dword ptr -1Ch
.text:00406DF0 var_18          = dword ptr -18h
.text:00406DF0 var_14          = dword ptr -14h
.text:00406DF0 var_10          = dword ptr -10h
.text:00406DF0 arg_0           = dword ptr  4
.text:00406DF0 arg_4           = dword ptr  8
.text:00406DF0 arg_8           = dword ptr  0Ch
.text:00406DF0
.text:00406DF0                 push    edi
.text:00406DF1                 push    esi
.text:00406DF2                 push    ebx
.text:00406DF3                 sub     esp, 10h
.text:00406DF6                 mov     edx, [esp+1Ch+arg_8]
.text:00406DFA                 mov     ebx, [esp+1Ch+arg_0]
.text:00406DFE                 mov     esi, [esp+1Ch+arg_4]
.text:00406E02                 lea     edi, [edx+15h]
.text:00406E05                 mov     byte ptr [edx+15h], 0
.text:00406E09                 lea     esi, [esi+0]
.text:00406E10
.text:00406E10 loc_406E10:                             ; CODE XREF: sub_406DF0+63↓j
.text:00406E10                 mov     [esp+1Ch+var_1C], ebx
.text:00406E13                 dec     edi
.text:00406E14                 mov     [esp+1Ch+var_18], esi
.text:00406E18                 mov     [esp+1Ch+var_14], 0Ah
.text:00406E20                 mov     [esp+1Ch+var_10], 0
.text:00406E28                 call    sub_4125C0
.text:00406E2D                 add     al, 30h ; '0'
.text:00406E2F                 mov     [edi], al
.text:00406E31                 mov     [esp+1Ch+var_1C], ebx
.text:00406E34                 mov     [esp+1Ch+var_18], esi
.text:00406E38                 mov     [esp+1Ch+var_14], 0Ah
.text:00406E40                 mov     [esp+1Ch+var_10], 0
.text:00406E48                 call    sub_412740
.text:00406E4D                 mov     ebx, eax
.text:00406E4F                 mov     esi, edx
.text:00406E51                 or      edx, ebx
.text:00406E53                 jnz     short loc_406E10
.text:00406E55                 add     esp, 10h
.text:00406E58                 mov     eax, edi
.text:00406E5A                 pop     ebx
.text:00406E5B                 pop     esi
.text:00406E5C                 pop     edi
.text:00406E5D                 retn
.text:00406E5D sub_406DF0      endp
.text:00406E5D
.text:00406E5D ; ---------------------------------------------------------------------------
.text:00406E5E                 align 10h
.text:00406E60
.text:00406E60 ; =============== S U B R O U T I N E =======================================
.text:00406E60
.text:00406E60
.text:00406E60 sub_406E60      proc near               ; CODE XREF: sub_403500+BA↑p
.text:00406E60                                         ; sub_403600+186↑p ...
.text:00406E60                 sub     esp, 0Ch
.text:00406E63                 call    _errno
.text:00406E68                 mov     dword ptr [eax], 28h ; '('
.text:00406E6E                 mov     eax, 0FFFFFFFFh
.text:00406E73                 add     esp, 0Ch
.text:00406E76                 retn
.text:00406E76 sub_406E60      endp
.text:00406E76
.text:00406E76 ; ---------------------------------------------------------------------------
.text:00406E77                 align 10h
.text:00406E80
.text:00406E80 ; =============== S U B R O U T I N E =======================================
.text:00406E80
.text:00406E80
.text:00406E80 sub_406E80      proc near               ; CODE XREF: sub_4031F0+1F6↑p
.text:00406E80
.text:00406E80 arg_0           = dword ptr  4
.text:00406E80
.text:00406E80                 mov     edx, [esp+arg_0]
.text:00406E84                 mov     dword ptr [edx+10h], 0
.text:00406E8B                 mov     dword ptr [edx+14h], 0
.text:00406E92                 mov     dword ptr [edx+18h], 95F616h
.text:00406E99                 retn
.text:00406E99 sub_406E80      endp
.text:00406E99
.text:00406E99 ; ---------------------------------------------------------------------------
.text:00406E9A                 align 10h
.text:00406EA0 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/lib/cycle-check.c',0
.text:00406EA0                                         ; DATA XREF: sub_406EF0+CE↓o
.text:00406ECC aStateMagicCcMa db 'state->magic == CC_MAGIC',0
.text:00406ECC                                         ; DATA XREF: sub_406EF0+D6↓o
.text:00406EE5                 align 10h
.text:00406EF0
.text:00406EF0 ; =============== S U B R O U T I N E =======================================
.text:00406EF0
.text:00406EF0
.text:00406EF0 sub_406EF0      proc near               ; CODE XREF: sub_404A90+4A↑p
.text:00406EF0
.text:00406EF0 var_1C          = dword ptr -1Ch
.text:00406EF0 var_18          = dword ptr -18h
.text:00406EF0 var_14          = dword ptr -14h
.text:00406EF0 arg_0           = dword ptr  4
.text:00406EF0 arg_4           = dword ptr  8
.text:00406EF0
.text:00406EF0                 push    ebp
.text:00406EF1                 push    edi
.text:00406EF2                 push    esi
.text:00406EF3                 push    ebx
.text:00406EF4                 sub     esp, 0Ch
.text:00406EF7                 mov     edx, [esp+1Ch+arg_0]
.text:00406EFB                 cmp     dword ptr [edx+18h], 95F616h
.text:00406F02                 jnz     loc_406FB6
.text:00406F08                 mov     edx, [esp+1Ch+arg_0]
.text:00406F0C                 mov     ebp, [edx+14h]
.text:00406F0F                 mov     edi, [edx+10h]
.text:00406F12                 mov     eax, ebp
.text:00406F14                 or      eax, edi
.text:00406F16                 jz      short loc_406F60
.text:00406F18                 mov     esi, [esp+1Ch+arg_4]
.text:00406F1C                 mov     ecx, [esi+8]
.text:00406F1F                 mov     ebx, [esi+0Ch]
.text:00406F22                 mov     esi, [esp+1Ch+arg_0]
.text:00406F26                 mov     eax, [esi]
.text:00406F28                 mov     edx, [esi+4]
.text:00406F2B                 mov     esi, ebx
.text:00406F2D                 xor     eax, ecx
.text:00406F2F                 xor     esi, edx
.text:00406F31                 or      esi, eax
.text:00406F33                 jnz     short loc_406F60
.text:00406F35                 mov     edx, [esp+1Ch+arg_4]
.text:00406F39                 mov     esi, [esp+1Ch+arg_0]
.text:00406F3D                 mov     ebx, [edx+14h]
.text:00406F40                 mov     ecx, [edx+10h]
.text:00406F43                 mov     eax, [esi+8]
.text:00406F46                 mov     edx, [esi+0Ch]
.text:00406F49                 mov     esi, ebx
.text:00406F4B                 xor     eax, ecx
.text:00406F4D                 xor     esi, edx
.text:00406F4F                 or      esi, eax
.text:00406F51                 mov     edx, 1
.text:00406F56                 jz      short loc_406FAC
.text:00406F58                 nop
.text:00406F59                 lea     esi, [esi+0]
.text:00406F60
.text:00406F60 loc_406F60:                             ; CODE XREF: sub_406EF0+26↑j
.text:00406F60                                         ; sub_406EF0+43↑j
.text:00406F60                 mov     ecx, edi
.text:00406F62                 mov     ebx, ebp
.text:00406F64                 mov     edx, [esp+1Ch+arg_0]
.text:00406F68                 add     ecx, 1
.text:00406F6B                 mov     esi, ecx
.text:00406F6D                 adc     ebx, 0
.text:00406F70                 and     esi, edi
.text:00406F72                 mov     edi, ebx
.text:00406F74                 mov     [edx+10h], ecx
.text:00406F77                 and     edi, ebp
.text:00406F79                 or      esi, edi
.text:00406F7B                 mov     [edx+14h], ebx
.text:00406F7E                 jnz     short loc_406FAA
.text:00406F80                 mov     ebp, ebx
.text:00406F82                 mov     edx, 1
.text:00406F87                 or      ebp, ecx
.text:00406F89                 jz      short loc_406FAC
.text:00406F8B                 mov     ebp, [esp+1Ch+arg_4]
.text:00406F8F                 mov     ebx, [esp+1Ch+arg_0]
.text:00406F93                 mov     edx, [ebp+10h]
.text:00406F96                 mov     ecx, [ebp+14h]
.text:00406F99                 mov     [ebx+8], edx
.text:00406F9C                 mov     [ebx+0Ch], ecx
.text:00406F9F                 mov     esi, [ebp+8]
.text:00406FA2                 mov     edi, [ebp+0Ch]
.text:00406FA5                 mov     [ebx], esi
.text:00406FA7                 mov     [ebx+4], edi
.text:00406FAA
.text:00406FAA loc_406FAA:                             ; CODE XREF: sub_406EF0+8E↑j
.text:00406FAA                 xor     edx, edx
.text:00406FAC
.text:00406FAC loc_406FAC:                             ; CODE XREF: sub_406EF0+66↑j
.text:00406FAC                                         ; sub_406EF0+99↑j
.text:00406FAC                 add     esp, 0Ch
.text:00406FAF                 mov     eax, edx
.text:00406FB1                 pop     ebx
.text:00406FB2                 pop     esi
.text:00406FB3                 pop     edi
.text:00406FB4                 pop     ebp
.text:00406FB5                 retn
.text:00406FB6 ; ---------------------------------------------------------------------------
.text:00406FB6
.text:00406FB6 loc_406FB6:                             ; CODE XREF: sub_406EF0+12↑j
.text:00406FB6                 mov     [esp+1Ch+var_14], 45h ; 'E'
.text:00406FBE                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/cycle-che"...
.text:00406FC6                 mov     [esp+1Ch+var_1C], offset aStateMagicCcMa ; "state->magic == CC_MAGIC"
.text:00406FCD                 call    _assert
.text:00406FCD sub_406EF0      endp
.text:00406FCD
.text:00406FCD ; ---------------------------------------------------------------------------
.text:00406FD2                 align 10h
.text:00406FE0 dword_406FE0    dd 0                    ; DATA XREF: sub_407010+D2↓o
.text:00406FE0                                         ; sub_407010:loc_407240↓o ...
.text:00406FE4 dword_406FE4    dd 3F800000h, 3F4CCCCDh, 3FB4FDF4h, 0
.text:00406FE4                                         ; DATA XREF: .text:00407BFC↓r
.text:00406FE4                                         ; .text:00407C05↓r ...
.text:00406FF4 flt_406FF4      dd 0.1                  ; DATA XREF: sub_407010:loc_40705F↓r
.text:00406FF8 flt_406FF8      dd 4.2949673e9          ; DATA XREF: sub_407010+101↓r
.text:00406FFC flt_406FFC      dd 0.89999998           ; DATA XREF: sub_407010+66↓r
.text:00407000 flt_407000      dd 1.1                  ; DATA XREF: sub_407010+7A↓r
.text:00407004                 align 10h
.text:00407010
.text:00407010 ; =============== S U B R O U T I N E =======================================
.text:00407010
.text:00407010
.text:00407010 sub_407010      proc near               ; CODE XREF: sub_4031F0+143↑p
.text:00407010                                         ; sub_4073E0+2E↓p
.text:00407010
.text:00407010 var_44          = qword ptr -44h
.text:00407010 Size            = dword ptr -3Ch
.text:00407010 var_38          = dword ptr -38h
.text:00407010 var_28          = dword ptr -28h
.text:00407010 var_24          = qword ptr -24h
.text:00407010 var_18          = word ptr -18h
.text:00407010 var_16          = word ptr -16h
.text:00407010 var_10          = dword ptr -10h
.text:00407010 var_C           = dword ptr -0Ch
.text:00407010 var_8           = dword ptr -8
.text:00407010 var_4           = dword ptr -4
.text:00407010 arg_0           = dword ptr  4
.text:00407010 arg_4           = dword ptr  8
.text:00407010 arg_8           = dword ptr  0Ch
.text:00407010 arg_C           = dword ptr  10h
.text:00407010 arg_10          = dword ptr  14h
.text:00407010
.text:00407010                 sub     esp, 3Ch
.text:00407013                 mov     [esp+3Ch+var_4], ebp
.text:00407017                 mov     ebp, [esp+3Ch+arg_8]
.text:0040701B                 mov     [esp+3Ch+var_10], ebx
.text:0040701F                 mov     ebx, [esp+3Ch+arg_4]
.text:00407023                 test    ebp, ebp
.text:00407025                 mov     [esp+3Ch+var_C], esi
.text:00407029                 mov     [esp+3Ch+var_8], edi
.text:0040702D                 jz      loc_4070F1
.text:00407033                 mov     edx, [esp+3Ch+arg_C]
.text:00407037                 test    edx, edx
.text:00407039                 jz      loc_4070F1
.text:0040703F                 mov     [esp+3Ch+Size], 28h ; '(' ; Size
.text:00407046                 call    malloc
.text:0040704B                 mov     esi, eax
.text:0040704D                 xor     eax, eax
.text:0040704F                 test    esi, esi
.text:00407051                 jz      loc_4070F3
.text:00407057                 test    ebx, ebx
.text:00407059                 jz      loc_407240
.text:0040705F
.text:0040705F loc_40705F:                             ; CODE XREF: sub_407010+235↓j
.text:0040705F                 fld     ds:flt_406FF4
.text:00407065                 fld     dword ptr [ebx+8]
.text:00407068                 mov     [esi+14h], ebx
.text:0040706B                 fucom   st(1)
.text:0040706D                 fnstsw  ax
.text:0040706F                 sahf
.text:00407070                 jbe     loc_407230
.text:00407076                 fld     ds:flt_406FFC
.text:0040707C                 fucomp  st(1)
.text:0040707E                 fnstsw  ax
.text:00407080                 sahf
.text:00407081                 jbe     loc_407230
.text:00407087                 fld     dword ptr [ebx+0Ch]
.text:0040708A                 fld     ds:flt_407000
.text:00407090                 fxch    st(1)
.text:00407092                 fucompp
.text:00407094                 fnstsw  ax
.text:00407096                 sahf
.text:00407097                 jbe     loc_407230
.text:0040709D                 fld     dword ptr [ebx]
.text:0040709F                 fldz
.text:004070A1                 fxch    st(1)
.text:004070A3                 fucom   st(1)
.text:004070A5                 fnstsw  ax
.text:004070A7                 fstp    st(1)
.text:004070A9                 sahf
.text:004070AA                 jb      loc_407237
.text:004070B0                 faddp   st(2), st
.text:004070B2                 fld     dword ptr [ebx+4]
.text:004070B5                 fucom   st(2)
.text:004070B7                 fnstsw  ax
.text:004070B9                 sahf
.text:004070BA                 jbe     loc_407237
.text:004070C0                 fld1
.text:004070C2                 fucompp
.text:004070C4                 fnstsw  ax
.text:004070C6                 sahf
.text:004070C7                 jb      loc_407230
.text:004070CD                 fucom   st(1)
.text:004070CF                 fnstsw  ax
.text:004070D1                 fstp    st(1)
.text:004070D3                 sahf
.text:004070D4                 ja      short loc_407107
.text:004070D6                 lea     esi, [esi+0]
.text:004070D9                 lea     edi, [edi+0]
.text:004070E0
.text:004070E0 loc_4070E0:                             ; CODE XREF: sub_407010+222↓j
.text:004070E0                 fstp    st
.text:004070E2                 mov     dword ptr [esi+14h], offset dword_406FE0
.text:004070E9
.text:004070E9 loc_4070E9:                             ; CODE XREF: sub_407010+155↓j
.text:004070E9                                         ; sub_407010+1BF↓j ...
.text:004070E9                 mov     [esp+3Ch+Size], esi ; Block
.text:004070EC                 call    free
.text:004070F1
.text:004070F1 loc_4070F1:                             ; CODE XREF: sub_407010+1D↑j
.text:004070F1                                         ; sub_407010+29↑j
.text:004070F1                 xor     eax, eax
.text:004070F3
.text:004070F3 loc_4070F3:                             ; CODE XREF: sub_407010+41↑j
.text:004070F3                                         ; sub_407010+208↓j
.text:004070F3                 mov     ebx, [esp+3Ch+var_10]
.text:004070F7                 mov     esi, [esp+3Ch+var_C]
.text:004070FB                 mov     edi, [esp+3Ch+var_8]
.text:004070FF                 mov     ebp, [esp+3Ch+var_4]
.text:00407103                 add     esp, 3Ch
.text:00407106                 retn
.text:00407107 ; ---------------------------------------------------------------------------
.text:00407107
.text:00407107 loc_407107:                             ; CODE XREF: sub_407010+C4↑j
.text:00407107                 cmp     byte ptr [ebx+10h], 0
.text:0040710B                 jnz     loc_407224
.text:00407111                 fld     ds:flt_406FF8
.text:00407117                 xor     eax, eax
.text:00407119                 mov     ecx, [esp+3Ch+arg_0]
.text:0040711D                 push    eax
.text:0040711E                 push    ecx
.text:0040711F                 fild    [esp+44h+var_44]
.text:00407122                 add     esp, 8
.text:00407125                 fdivrp  st(2), st
.text:00407127                 fxch    st(1)
.text:00407129                 fucom   st(1)
.text:0040712B                 fnstsw  ax
.text:0040712D                 fstp    st(1)
.text:0040712F                 sahf
.text:00407130                 jnb     loc_40721D
.text:00407136                 fnstcw  [esp+3Ch+var_16]
.text:0040713A                 movzx   ebx, [esp+3Ch+var_16]
.text:0040713F                 or      bx, 0C00h
.text:00407144                 mov     [esp+3Ch+var_18], bx
.text:00407149                 fldcw   [esp+3Ch+var_18]
.text:0040714D                 fistp   [esp+3Ch+var_24]
.text:00407151                 fldcw   [esp+3Ch+var_16]
.text:00407155                 mov     edx, dword ptr [esp+3Ch+var_24]
.text:00407159                 mov     [esp+3Ch+arg_0], edx
.text:0040715D
.text:0040715D loc_40715D:                             ; CODE XREF: sub_407010+216↓j
.text:0040715D                 cmp     [esp+3Ch+arg_0], 1FFFFFFFh
.text:00407165                 ja      short loc_4070E9
.text:00407167                 mov     ecx, [esp+3Ch+arg_0]
.text:0040716B                 cmp     ecx, 9
.text:0040716E                 ja      short loc_407175
.text:00407170                 mov     ecx, 0Ah
.text:00407175
.text:00407175 loc_407175:                             ; CODE XREF: sub_407010+15E↑j
.text:00407175                 or      ecx, 1
.text:00407178
.text:00407178 loc_407178:                             ; CODE XREF: sub_407010+1B4↓j
.text:00407178                 mov     [esp+3Ch+var_28], 3
.text:00407180                 mov     edi, 9
.text:00407185                 cmp     edi, ecx
.text:00407187                 jnb     short loc_4071B5
.text:00407189                 xor     edx, edx
.text:0040718B                 mov     eax, ecx
.text:0040718D                 div     [esp+3Ch+var_28]
.text:00407191                 test    edx, edx
.text:00407193                 jz      short loc_4071B5
.text:00407195
.text:00407195 loc_407195:                             ; CODE XREF: sub_407010+1A3↓j
.text:00407195                 inc     [esp+3Ch+var_28]
.text:00407199                 mov     edx, [esp+3Ch+var_28]
.text:0040719D                 lea     edi, [edi+edx*4]
.text:004071A0                 inc     edx
.text:004071A1                 cmp     edi, ecx
.text:004071A3                 mov     [esp+3Ch+var_28], edx
.text:004071A7                 jnb     short loc_4071B5
.text:004071A9                 xor     edx, edx
.text:004071AB                 mov     eax, ecx
.text:004071AD                 div     [esp+3Ch+var_28]
.text:004071B1                 test    edx, edx
.text:004071B3                 jnz     short loc_407195
.text:004071B5
.text:004071B5 loc_4071B5:                             ; CODE XREF: sub_407010+177↑j
.text:004071B5                                         ; sub_407010+183↑j ...
.text:004071B5                 xor     edx, edx
.text:004071B7                 mov     eax, ecx
.text:004071B9                 div     [esp+3Ch+var_28]
.text:004071BD                 test    edx, edx
.text:004071BF                 jnz     short loc_4071C6
.text:004071C1                 add     ecx, 2
.text:004071C4                 jmp     short loc_407178
.text:004071C6 ; ---------------------------------------------------------------------------
.text:004071C6
.text:004071C6 loc_4071C6:                             ; CODE XREF: sub_407010+1AF↑j
.text:004071C6                 mov     [esi+8], ecx
.text:004071C9                 cmp     ecx, 1FFFFFFFh
.text:004071CF                 ja      loc_4070E9
.text:004071D5                 mov     [esp+3Ch+Size], ecx ; Count
.text:004071D8                 mov     [esp+3Ch+var_38], 8 ; Size
.text:004071E0                 call    calloc
.text:004071E5                 mov     [esi+18h], ebp
.text:004071E8                 mov     ebx, [esi+8]
.text:004071EB                 mov     ebp, [esp+3Ch+arg_C]
.text:004071EF                 mov     [esi], eax
.text:004071F1                 mov     edi, [esp+3Ch+arg_10]
.text:004071F5                 lea     ecx, [eax+ebx*8]
.text:004071F8                 mov     [esi+4], ecx
.text:004071FB                 mov     eax, esi
.text:004071FD                 mov     dword ptr [esi+0Ch], 0
.text:00407204                 mov     dword ptr [esi+10h], 0
.text:0040720B                 mov     [esi+1Ch], ebp
.text:0040720E                 mov     [esi+20h], edi
.text:00407211                 mov     dword ptr [esi+24h], 0
.text:00407218                 jmp     loc_4070F3
.text:0040721D ; ---------------------------------------------------------------------------
.text:0040721D
.text:0040721D loc_40721D:                             ; CODE XREF: sub_407010+120↑j
.text:0040721D                 fstp    st
.text:0040721F                 jmp     loc_4070E9
.text:00407224 ; ---------------------------------------------------------------------------
.text:00407224
.text:00407224 loc_407224:                             ; CODE XREF: sub_407010+FB↑j
.text:00407224                 fstp    st
.text:00407226                 jmp     loc_40715D
.text:00407226 ; ---------------------------------------------------------------------------
.text:0040722B                 align 10h
.text:00407230
.text:00407230 loc_407230:                             ; CODE XREF: sub_407010+60↑j
.text:00407230                                         ; sub_407010+71↑j ...
.text:00407230                 fstp    st
.text:00407232                 jmp     loc_4070E0
.text:00407237 ; ---------------------------------------------------------------------------
.text:00407237
.text:00407237 loc_407237:                             ; CODE XREF: sub_407010+9A↑j
.text:00407237                                         ; sub_407010+AA↑j
.text:00407237                 fstp    st
.text:00407239                 jmp     short loc_407230
.text:00407239 ; ---------------------------------------------------------------------------
.text:0040723B                 align 10h
.text:00407240
.text:00407240 loc_407240:                             ; CODE XREF: sub_407010+49↑j
.text:00407240                 mov     ebx, offset dword_406FE0
.text:00407245                 jmp     loc_40705F
.text:00407245 sub_407010      endp
.text:00407245
.text:00407245 ; ---------------------------------------------------------------------------
.text:0040724A                 align 10h
.text:00407250                 push    edi
.text:00407251                 push    esi
.text:00407252                 push    ebx
.text:00407253                 sub     esp, 10h
.text:00407256                 mov     edi, [esp+20h]
.text:0040725A                 mov     esi, [edi]
.text:0040725C                 mov     eax, [edi+4]
.text:0040725F                 cmp     esi, eax
.text:00407261                 jnb     short loc_4072B7
.text:00407263                 lea     esi, [esi+0]
.text:00407269                 lea     edi, [edi+0]
.text:00407270
.text:00407270 loc_407270:                             ; CODE XREF: .text:004072B5↓j
.text:00407270                 mov     ecx, [esi]
.text:00407272                 test    ecx, ecx
.text:00407274                 jz      short loc_4072B0
.text:00407276                 mov     ebx, [esi+4]
.text:00407279                 test    ebx, ebx
.text:0040727B                 jz      short loc_4072E1
.text:0040727D                 mov     ecx, [edi+20h]
.text:00407280
.text:00407280 loc_407280:                             ; CODE XREF: .text:0040729A↓j
.text:00407280                 test    ecx, ecx
.text:00407282                 jnz     short loc_4072D5
.text:00407284
.text:00407284 loc_407284:                             ; CODE XREF: .text:004072DF↓j
.text:00407284                 mov     dword ptr [ebx], 0
.text:0040728A                 mov     edx, [ebx+4]
.text:0040728D                 mov     eax, [edi+24h]
.text:00407290                 test    edx, edx
.text:00407292                 mov     [ebx+4], eax
.text:00407295                 mov     [edi+24h], ebx
.text:00407298                 mov     ebx, edx
.text:0040729A                 jnz     short loc_407280
.text:0040729C
.text:0040729C loc_40729C:                             ; CODE XREF: .text:004072E4↓j
.text:0040729C                 test    ecx, ecx
.text:0040729E                 jnz     short loc_4072CC
.text:004072A0
.text:004072A0 loc_4072A0:                             ; CODE XREF: .text:004072D3↓j
.text:004072A0                 mov     dword ptr [esi+4], 0
.text:004072A7                 mov     eax, [edi+4]
.text:004072AA                 mov     dword ptr [esi], 0
.text:004072B0
.text:004072B0 loc_4072B0:                             ; CODE XREF: .text:00407274↑j
.text:004072B0                 add     esi, 8
.text:004072B3                 cmp     esi, eax
.text:004072B5                 jb      short loc_407270
.text:004072B7
.text:004072B7 loc_4072B7:                             ; CODE XREF: .text:00407261↑j
.text:004072B7                 mov     dword ptr [edi+0Ch], 0
.text:004072BE                 mov     dword ptr [edi+10h], 0
.text:004072C5                 add     esp, 10h
.text:004072C8                 pop     ebx
.text:004072C9                 pop     esi
.text:004072CA                 pop     edi
.text:004072CB                 retn
.text:004072CC ; ---------------------------------------------------------------------------
.text:004072CC
.text:004072CC loc_4072CC:                             ; CODE XREF: .text:0040729E↑j
.text:004072CC                 mov     ebx, [esi]
.text:004072CE                 mov     [esp], ebx
.text:004072D1                 call    ecx
.text:004072D3                 jmp     short loc_4072A0
.text:004072D5 ; ---------------------------------------------------------------------------
.text:004072D5
.text:004072D5 loc_4072D5:                             ; CODE XREF: .text:00407282↑j
.text:004072D5                 mov     edx, [ebx]
.text:004072D7                 mov     [esp], edx
.text:004072DA                 call    ecx
.text:004072DC                 mov     ecx, [edi+20h]
.text:004072DF                 jmp     short loc_407284
.text:004072E1 ; ---------------------------------------------------------------------------
.text:004072E1
.text:004072E1 loc_4072E1:                             ; CODE XREF: .text:0040727B↑j
.text:004072E1                 mov     ecx, [edi+20h]
.text:004072E4                 jmp     short loc_40729C
.text:004072E4 ; ---------------------------------------------------------------------------
.text:004072E6                 align 10h
.text:004072F0
.text:004072F0 ; =============== S U B R O U T I N E =======================================
.text:004072F0
.text:004072F0
.text:004072F0 ; int __cdecl sub_4072F0(void *)
.text:004072F0 sub_4072F0      proc near               ; CODE XREF: sub_403500+AD↑p
.text:004072F0                                         ; sub_404A90+D3↑p
.text:004072F0
.text:004072F0 Block           = dword ptr -1Ch
.text:004072F0 arg_0           = dword ptr  4
.text:004072F0
.text:004072F0                 push    ebp
.text:004072F1                 push    edi
.text:004072F2                 push    esi
.text:004072F3                 push    ebx
.text:004072F4                 sub     esp, 0Ch
.text:004072F7                 mov     ebp, [esp+1Ch+arg_0]
.text:004072FB                 mov     eax, [ebp+20h]
.text:004072FE                 test    eax, eax
.text:00407300                 jz      loc_4073CC
.text:00407306                 mov     eax, [ebp+10h]
.text:00407309                 test    eax, eax
.text:0040730B                 jz      loc_4073CC
.text:00407311                 mov     edi, [ebp+0]
.text:00407314                 mov     eax, [ebp+4]
.text:00407317                 cmp     edi, eax
.text:00407319                 jnb     short loc_40738B
.text:0040731B
.text:0040731B loc_40731B:                             ; CODE XREF: sub_4072F0+57↓j
.text:0040731B                 mov     edx, [edi]
.text:0040731D                 test    edx, edx
.text:0040731F                 jz      short loc_407342
.text:00407321                 test    edi, edi
.text:00407323                 mov     ebx, edi
.text:00407325                 jz      short loc_407342
.text:00407327                 mov     esi, esi
.text:00407329                 lea     edi, [edi+0]
.text:00407330
.text:00407330 loc_407330:                             ; CODE XREF: sub_4072F0+4D↓j
.text:00407330                 mov     ecx, [ebx]
.text:00407332                 mov     [esp+1Ch+Block], ecx
.text:00407335                 call    dword ptr [ebp+20h]
.text:00407338                 mov     ebx, [ebx+4]
.text:0040733B                 test    ebx, ebx
.text:0040733D                 jnz     short loc_407330
.text:0040733F                 mov     eax, [ebp+4]
.text:00407342
.text:00407342 loc_407342:                             ; CODE XREF: sub_4072F0+2F↑j
.text:00407342                                         ; sub_4072F0+35↑j
.text:00407342                 add     edi, 8
.text:00407345                 cmp     edi, eax
.text:00407347                 jb      short loc_40731B
.text:00407349                 mov     edx, [ebp+0]
.text:0040734C
.text:0040734C loc_40734C:                             ; CODE XREF: sub_4072F0+E2↓j
.text:0040734C                 cmp     edx, eax
.text:0040734E                 mov     edi, edx
.text:00407350                 jnb     short loc_40738B
.text:00407352                 lea     esi, [esi+0]
.text:00407359                 lea     edi, [edi+0]
.text:00407360
.text:00407360 loc_407360:                             ; CODE XREF: sub_4072F0+99↓j
.text:00407360                 mov     ebx, [edi+4]
.text:00407363                 test    ebx, ebx
.text:00407365                 jz      short loc_407384
.text:00407367                 mov     esi, esi
.text:00407369                 lea     edi, [edi+0]
.text:00407370
.text:00407370 loc_407370:                             ; CODE XREF: sub_4072F0+8F↓j
.text:00407370                 mov     esi, [ebx+4]
.text:00407373                 mov     [esp+1Ch+Block], ebx ; Block
.text:00407376                 call    free
.text:0040737B                 test    esi, esi
.text:0040737D                 mov     ebx, esi
.text:0040737F                 jnz     short loc_407370
.text:00407381                 mov     eax, [ebp+4]
.text:00407384
.text:00407384 loc_407384:                             ; CODE XREF: sub_4072F0+75↑j
.text:00407384                 add     edi, 8
.text:00407387                 cmp     edi, eax
.text:00407389                 jb      short loc_407360
.text:0040738B
.text:0040738B loc_40738B:                             ; CODE XREF: sub_4072F0+29↑j
.text:0040738B                                         ; sub_4072F0+60↑j
.text:0040738B                 mov     ebx, [ebp+24h]
.text:0040738E                 test    ebx, ebx
.text:00407390                 jz      short loc_4073B1
.text:00407392                 lea     esi, [esi+0]
.text:00407399                 lea     edi, [edi+0]
.text:004073A0
.text:004073A0 loc_4073A0:                             ; CODE XREF: sub_4072F0+BF↓j
.text:004073A0                 mov     edi, [ebx+4]
.text:004073A3                 mov     [esp+1Ch+Block], ebx ; Block
.text:004073A6                 call    free
.text:004073AB                 test    edi, edi
.text:004073AD                 mov     ebx, edi
.text:004073AF                 jnz     short loc_4073A0
.text:004073B1
.text:004073B1 loc_4073B1:                             ; CODE XREF: sub_4072F0+A0↑j
.text:004073B1                 mov     ebx, [ebp+0]
.text:004073B4                 mov     [esp+1Ch+Block], ebx ; Block
.text:004073B7                 call    free
.text:004073BC                 mov     [esp+1Ch+arg_0], ebp ; Block
.text:004073C0                 add     esp, 0Ch
.text:004073C3                 pop     ebx
.text:004073C4                 pop     esi
.text:004073C5                 pop     edi
.text:004073C6                 pop     ebp
.text:004073C7                 jmp     free
.text:004073CC ; ---------------------------------------------------------------------------
.text:004073CC
.text:004073CC loc_4073CC:                             ; CODE XREF: sub_4072F0+10↑j
.text:004073CC                                         ; sub_4072F0+1B↑j
.text:004073CC                 mov     edx, [ebp+0]
.text:004073CF                 mov     eax, [ebp+4]
.text:004073D2                 jmp     loc_40734C
.text:004073D2 sub_4072F0      endp
.text:004073D2
.text:004073D2 ; ---------------------------------------------------------------------------
.text:004073D7                 align 10h
.text:004073E0
.text:004073E0 ; =============== S U B R O U T I N E =======================================
.text:004073E0
.text:004073E0
.text:004073E0 sub_4073E0      proc near               ; CODE XREF: sub_407560+1B2↓p
.text:004073E0                                         ; sub_407C30+156↓p
.text:004073E0
.text:004073E0 Block           = dword ptr -2Ch
.text:004073E0 var_28          = dword ptr -28h
.text:004073E0 var_24          = dword ptr -24h
.text:004073E0 var_20          = dword ptr -20h
.text:004073E0 var_1C          = dword ptr -1Ch
.text:004073E0 var_18          = dword ptr -18h
.text:004073E0 var_14          = dword ptr -14h
.text:004073E0 arg_0           = dword ptr  4
.text:004073E0 arg_4           = dword ptr  8
.text:004073E0
.text:004073E0                 push    ebp
.text:004073E1                 push    edi
.text:004073E2                 push    esi
.text:004073E3                 push    ebx
.text:004073E4                 sub     esp, 1Ch
.text:004073E7                 mov     ebx, [esp+2Ch+arg_0]
.text:004073EB                 mov     edi, [ebx+20h]
.text:004073EE                 mov     [esp+2Ch+var_1C], edi
.text:004073F2                 mov     esi, [ebx+1Ch]
.text:004073F5                 mov     [esp+2Ch+var_20], esi
.text:004073F9                 mov     edx, [ebx+18h]
.text:004073FC                 mov     [esp+2Ch+var_24], edx
.text:00407400                 mov     ecx, [ebx+14h]
.text:00407403                 mov     edx, [esp+2Ch+arg_4]
.text:00407407                 mov     [esp+2Ch+var_28], ecx
.text:0040740B                 mov     [esp+2Ch+Block], edx
.text:0040740E                 call    sub_407010
.text:00407413                 mov     edi, eax
.text:00407415                 xor     eax, eax
.text:00407417                 test    edi, edi
.text:00407419                 jz      loc_4074E2
.text:0040741F                 mov     ebp, [esp+2Ch+arg_0]
.text:00407423                 mov     edx, [ebp+0]
.text:00407426                 mov     eax, [ebp+4]
.text:00407429                 mov     ecx, [ebp+24h]
.text:0040742C                 mov     [esp+2Ch+var_14], edx
.text:00407430                 cmp     edx, eax
.text:00407432                 mov     [edi+24h], ecx
.text:00407435                 jnb     short loc_4074AD
.text:00407437                 mov     esi, esi
.text:00407439                 lea     edi, [edi+0]
.text:00407440
.text:00407440 loc_407440:                             ; CODE XREF: sub_4073E0+C5↓j
.text:00407440                 mov     edx, [esp+2Ch+var_14]
.text:00407444                 mov     ebx, [edx]
.text:00407446                 test    ebx, ebx
.text:00407448                 jz      short loc_40749C
.text:0040744A                 mov     ebx, edx
.text:0040744C                 lea     esi, [esi+0]
.text:00407450
.text:00407450 loc_407450:                             ; CODE XREF: sub_4073E0+B3↓j
.text:00407450                 mov     ebp, [ebx]
.text:00407452                 mov     edx, [edi+8]
.text:00407455                 mov     [esp+2Ch+Block], ebp
.text:00407458                 mov     [esp+2Ch+var_28], edx
.text:0040745C                 call    dword ptr [edi+18h]
.text:0040745F                 mov     ecx, [edi]
.text:00407461                 lea     esi, [ecx+eax*8]
.text:00407464                 cmp     esi, [edi+4]
.text:00407467                 jnb     loc_407543
.text:0040746D                 mov     ecx, [esi]
.text:0040746F                 mov     eax, [ebx+4]
.text:00407472                 test    ecx, ecx
.text:00407474                 mov     [esp+2Ch+var_18], eax
.text:00407478                 jz      loc_407520
.text:0040747E                 cmp     ebx, [esp+2Ch+var_14]
.text:00407482                 jz      short loc_4074EA
.text:00407484                 mov     edx, [esi+4]
.text:00407487                 mov     [ebx+4], edx
.text:0040748A                 mov     [esi+4], ebx
.text:0040748D
.text:0040748D loc_40748D:                             ; CODE XREF: sub_4073E0+12A↓j
.text:0040748D                                         ; sub_4073E0+149↓j ...
.text:0040748D                 mov     ebx, [esp+2Ch+var_18]
.text:00407491                 test    ebx, ebx
.text:00407493                 jnz     short loc_407450
.text:00407495                 mov     ecx, [esp+2Ch+arg_0]
.text:00407499                 mov     eax, [ecx+4]
.text:0040749C
.text:0040749C loc_40749C:                             ; CODE XREF: sub_4073E0+68↑j
.text:0040749C                 add     [esp+2Ch+var_14], 8
.text:004074A1                 cmp     [esp+2Ch+var_14], eax
.text:004074A5                 jb      short loc_407440
.text:004074A7                 mov     eax, [esp+2Ch+arg_0]
.text:004074AB                 mov     edx, [eax]
.text:004074AD
.text:004074AD loc_4074AD:                             ; CODE XREF: sub_4073E0+55↑j
.text:004074AD                 mov     [esp+2Ch+Block], edx ; Block
.text:004074B0                 call    free
.text:004074B5                 mov     ebx, [esp+2Ch+arg_0]
.text:004074B9                 mov     ebp, [edi]
.text:004074BB                 mov     ecx, [edi+4]
.text:004074BE                 mov     esi, [edi+8]
.text:004074C1                 mov     edx, [edi+0Ch]
.text:004074C4                 mov     [ebx], ebp
.text:004074C6                 mov     ebp, [edi+24h]
.text:004074C9                 mov     [ebx+4], ecx
.text:004074CC                 mov     [ebx+8], esi
.text:004074CF                 mov     [ebx+0Ch], edx
.text:004074D2                 mov     [ebx+24h], ebp
.text:004074D5                 mov     [esp+2Ch+Block], edi ; Block
.text:004074D8                 call    free
.text:004074DD                 mov     eax, 1
.text:004074E2
.text:004074E2 loc_4074E2:                             ; CODE XREF: sub_4073E0+39↑j
.text:004074E2                                         ; sub_4073E0+11D↓j
.text:004074E2                 add     esp, 1Ch
.text:004074E5                 pop     ebx
.text:004074E6                 pop     esi
.text:004074E7                 pop     edi
.text:004074E8                 pop     ebp
.text:004074E9                 retn
.text:004074EA ; ---------------------------------------------------------------------------
.text:004074EA
.text:004074EA loc_4074EA:                             ; CODE XREF: sub_4073E0+A2↑j
.text:004074EA                 mov     eax, [edi+24h]
.text:004074ED                 test    eax, eax
.text:004074EF                 jz      short loc_40750C
.text:004074F1                 mov     ebx, [eax+4]
.text:004074F4                 mov     edx, eax
.text:004074F6                 mov     [edi+24h], ebx
.text:004074F9
.text:004074F9 loc_4074F9:                             ; CODE XREF: sub_4073E0+13A↓j
.text:004074F9                 xor     eax, eax
.text:004074FB                 test    edx, edx
.text:004074FD                 jz      short loc_4074E2
.text:004074FF                 mov     [edx], ebp
.text:00407501                 mov     ebp, [esi+4]
.text:00407504                 mov     [edx+4], ebp
.text:00407507                 mov     [esi+4], edx
.text:0040750A                 jmp     short loc_40748D
.text:0040750C ; ---------------------------------------------------------------------------
.text:0040750C
.text:0040750C loc_40750C:                             ; CODE XREF: sub_4073E0+10F↑j
.text:0040750C                 mov     [esp+2Ch+Block], 8 ; Size
.text:00407513                 call    malloc
.text:00407518                 mov     edx, eax
.text:0040751A                 jmp     short loc_4074F9
.text:0040751A ; ---------------------------------------------------------------------------
.text:0040751C                 align 10h
.text:00407520
.text:00407520 loc_407520:                             ; CODE XREF: sub_4073E0+98↑j
.text:00407520                 inc     dword ptr [edi+0Ch]
.text:00407523                 cmp     ebx, [esp+2Ch+var_14]
.text:00407527                 mov     [esi], ebp
.text:00407529                 jz      loc_40748D
.text:0040752F                 mov     dword ptr [ebx], 0
.text:00407535                 mov     esi, [edi+24h]
.text:00407538                 mov     [ebx+4], esi
.text:0040753B                 mov     [edi+24h], ebx
.text:0040753E                 jmp     loc_40748D
.text:00407543 ; ---------------------------------------------------------------------------
.text:00407543
.text:00407543 loc_407543:                             ; CODE XREF: sub_4073E0+87↑j
.text:00407543                 call    abort
.text:00407543 sub_4073E0      endp
.text:00407543
.text:00407543 ; ---------------------------------------------------------------------------
.text:00407548 flt_407548      dd 0.1                  ; DATA XREF: sub_407560+C3↓r
.text:0040754C flt_40754C      dd 4.2949673e9          ; DATA XREF: sub_407560:loc_4076D7↓r
.text:00407550 flt_407550      dd 0.89999998           ; DATA XREF: sub_407560+D6↓r
.text:00407554 flt_407554      dd 1.1                  ; DATA XREF: sub_407560+EA↓r
.text:00407558                 align 10h
.text:00407560
.text:00407560 ; =============== S U B R O U T I N E =======================================
.text:00407560
.text:00407560
.text:00407560 sub_407560      proc near               ; CODE XREF: sub_404A90+99↑p
.text:00407560
.text:00407560 var_34          = qword ptr -34h
.text:00407560 Size            = dword ptr -2Ch
.text:00407560 var_28          = dword ptr -28h
.text:00407560 var_24          = dword ptr -24h
.text:00407560 var_20          = dword ptr -20h
.text:00407560 var_1C          = qword ptr -1Ch
.text:00407560 var_14          = word ptr -14h
.text:00407560 var_12          = word ptr -12h
.text:00407560 var_10          = dword ptr -10h
.text:00407560 var_8           = dword ptr -8
.text:00407560 var_4           = dword ptr -4
.text:00407560 arg_0           = dword ptr  4
.text:00407560 arg_4           = dword ptr  8
.text:00407560
.text:00407560                 sub     esp, 2Ch
.text:00407563                 mov     [esp+2Ch+var_8], ebx
.text:00407567                 mov     ebx, [esp+2Ch+arg_4]
.text:0040756B                 mov     [esp+2Ch+var_4], esi
.text:0040756F                 mov     esi, [esp+2Ch+arg_0]
.text:00407573                 test    ebx, ebx
.text:00407575                 jz      loc_40774A
.text:0040757B                 mov     [esp+2Ch+var_20], 0
.text:00407583                 lea     edx, [esp+2Ch+var_10]
.text:00407587                 mov     [esp+2Ch+var_24], edx
.text:0040758B                 mov     [esp+2Ch+var_28], ebx
.text:0040758F                 mov     [esp+2Ch+Size], esi
.text:00407592                 call    sub_407DC0
.text:00407597                 test    eax, eax
.text:00407599                 jz      short loc_4075A7
.text:0040759B
.text:0040759B loc_40759B:                             ; CODE XREF: sub_407560+64↓j
.text:0040759B                                         ; sub_407560+7A↓j ...
.text:0040759B                 mov     ebx, [esp+2Ch+var_8]
.text:0040759F                 mov     esi, [esp+2Ch+var_4]
.text:004075A3                 add     esp, 2Ch
.text:004075A6                 retn
.text:004075A7 ; ---------------------------------------------------------------------------
.text:004075A7
.text:004075A7 loc_4075A7:                             ; CODE XREF: sub_407560+39↑j
.text:004075A7                 mov     eax, [esp+2Ch+var_10]
.text:004075AB                 mov     ecx, [eax]
.text:004075AD                 test    ecx, ecx
.text:004075AF                 jz      short loc_4075EC
.text:004075B1                 mov     eax, [esi+24h]
.text:004075B4                 test    eax, eax
.text:004075B6                 jz      short loc_4075DC
.text:004075B8                 mov     edx, [eax+4]
.text:004075BB                 mov     ecx, eax
.text:004075BD                 mov     [esi+24h], edx
.text:004075C0
.text:004075C0 loc_4075C0:                             ; CODE XREF: sub_407560+8A↓j
.text:004075C0                 xor     eax, eax
.text:004075C2                 test    ecx, ecx
.text:004075C4                 jz      short loc_40759B
.text:004075C6                 inc     dword ptr [esi+10h]
.text:004075C9                 mov     edx, [esp+2Ch+var_10]
.text:004075CD                 mov     [ecx], ebx
.text:004075CF                 mov     eax, [edx+4]
.text:004075D2                 mov     [ecx+4], eax
.text:004075D5                 mov     [edx+4], ecx
.text:004075D8
.text:004075D8 loc_4075D8:                             ; CODE XREF: sub_407560+1C2↓j
.text:004075D8                                         ; sub_407560+1D8↓j
.text:004075D8                 mov     eax, ebx
.text:004075DA                 jmp     short loc_40759B
.text:004075DC ; ---------------------------------------------------------------------------
.text:004075DC
.text:004075DC loc_4075DC:                             ; CODE XREF: sub_407560+56↑j
.text:004075DC                 mov     [esp+2Ch+Size], 8 ; Size
.text:004075E3                 call    malloc
.text:004075E8                 mov     ecx, eax
.text:004075EA                 jmp     short loc_4075C0
.text:004075EC ; ---------------------------------------------------------------------------
.text:004075EC
.text:004075EC loc_4075EC:                             ; CODE XREF: sub_407560+4F↑j
.text:004075EC                 inc     dword ptr [esi+0Ch]
.text:004075EF                 xor     edx, edx
.text:004075F1                 mov     [eax], ebx
.text:004075F3                 xor     eax, eax
.text:004075F5                 mov     ecx, [esi+0Ch]
.text:004075F8                 inc     dword ptr [esi+10h]
.text:004075FB                 push    eax
.text:004075FC                 push    ecx
.text:004075FD                 mov     eax, [esi+8]
.text:00407600                 mov     ecx, [esi+14h]
.text:00407603                 fild    [esp+34h+var_34]
.text:00407606                 add     esp, 8
.text:00407609                 push    edx
.text:0040760A                 push    eax
.text:0040760B                 fild    [esp+34h+var_34]
.text:0040760E                 add     esp, 8
.text:00407611                 fld     dword ptr [ecx+8]
.text:00407614                 fmul    st(1), st
.text:00407616                 fxch    st(2)
.text:00407618                 fucompp
.text:0040761A                 fnstsw  ax
.text:0040761C                 sahf
.text:0040761D                 jbe     loc_407736
.text:00407623                 fld     ds:flt_407548
.text:00407629                 fxch    st(1)
.text:0040762B                 fucom   st(1)
.text:0040762D                 fnstsw  ax
.text:0040762F                 sahf
.text:00407630                 jbe     loc_40773D
.text:00407636                 fld     ds:flt_407550
.text:0040763C                 fucomp  st(1)
.text:0040763E                 fnstsw  ax
.text:00407640                 sahf
.text:00407641                 jbe     loc_40773D
.text:00407647                 fld     dword ptr [ecx+0Ch]
.text:0040764A                 fld     ds:flt_407554
.text:00407650                 fxch    st(1)
.text:00407652                 fucompp
.text:00407654                 fnstsw  ax
.text:00407656                 sahf
.text:00407657                 jbe     loc_40773D
.text:0040765D                 fld     dword ptr [ecx]
.text:0040765F                 fldz
.text:00407661                 fxch    st(1)
.text:00407663                 fucom   st(1)
.text:00407665                 fnstsw  ax
.text:00407667                 fstp    st(1)
.text:00407669                 sahf
.text:0040766A                 jb      loc_407746
.text:00407670                 faddp   st(2), st
.text:00407672                 fld     dword ptr [ecx+4]
.text:00407675                 fucom   st(2)
.text:00407677                 fnstsw  ax
.text:00407679                 sahf
.text:0040767A                 jbe     loc_407746
.text:00407680                 fld1
.text:00407682                 fucompp
.text:00407684                 fnstsw  ax
.text:00407686                 sahf
.text:00407687                 jb      loc_40773D
.text:0040768D                 fucompp
.text:0040768F                 fnstsw  ax
.text:00407691                 sahf
.text:00407692                 ja      short loc_4076A0
.text:00407694
.text:00407694 loc_407694:                             ; CODE XREF: sub_407560+1E1↓j
.text:00407694                 mov     dword ptr [esi+14h], offset dword_406FE0
.text:0040769B                 mov     ecx, offset dword_406FE0
.text:004076A0
.text:004076A0 loc_4076A0:                             ; CODE XREF: sub_407560+132↑j
.text:004076A0                 mov     eax, [esi+0Ch]
.text:004076A3                 xor     edx, edx
.text:004076A5                 push    edx
.text:004076A6                 xor     edx, edx
.text:004076A8                 push    eax
.text:004076A9                 mov     eax, [esi+8]
.text:004076AC                 fild    [esp+34h+var_34]
.text:004076AF                 add     esp, 8
.text:004076B2                 push    edx
.text:004076B3                 push    eax
.text:004076B4                 fild    [esp+34h+var_34]
.text:004076B7                 add     esp, 8
.text:004076BA                 fld     dword ptr [ecx+8]
.text:004076BD                 fld     st
.text:004076BF                 fmul    st, st(2)
.text:004076C1                 fxch    st(3)
.text:004076C3                 fucomp  st(3)
.text:004076C5                 fnstsw  ax
.text:004076C7                 fstp    st(2)
.text:004076C9                 sahf
.text:004076CA                 jbe     short loc_407734
.text:004076CC                 cmp     byte ptr [ecx+10h], 0
.text:004076D0                 fmul    dword ptr [ecx+0Ch]
.text:004076D3                 jnz     short loc_407730
.text:004076D5                 fmulp   st(1), st
.text:004076D7
.text:004076D7 loc_4076D7:                             ; CODE XREF: sub_407560+1D2↓j
.text:004076D7                 fld     ds:flt_40754C
.text:004076DD                 fxch    st(1)
.text:004076DF                 fucom   st(1)
.text:004076E1                 fnstsw  ax
.text:004076E3                 fstp    st(1)
.text:004076E5                 sahf
.text:004076E6                 jnb     short loc_407727
.text:004076E8                 fnstcw  [esp+2Ch+var_12]
.text:004076EC                 movzx   edx, [esp+2Ch+var_12]
.text:004076F1                 mov     [esp+2Ch+Size], esi
.text:004076F4                 or      dx, 0C00h
.text:004076F9                 mov     [esp+2Ch+var_14], dx
.text:004076FE                 fldcw   [esp+2Ch+var_14]
.text:00407702                 fistp   [esp+2Ch+var_1C]
.text:00407706                 fldcw   [esp+2Ch+var_12]
.text:0040770A                 mov     ecx, dword ptr [esp+2Ch+var_1C]
.text:0040770E                 mov     [esp+2Ch+var_28], ecx
.text:00407712                 call    sub_4073E0
.text:00407717                 test    al, al
.text:00407719                 setz    dl
.text:0040771C                 movzx   esi, dl
.text:0040771F                 dec     esi
.text:00407720                 and     ebx, esi
.text:00407722                 jmp     loc_4075D8
.text:00407727 ; ---------------------------------------------------------------------------
.text:00407727
.text:00407727 loc_407727:                             ; CODE XREF: sub_407560+186↑j
.text:00407727                 fstp    st
.text:00407729                 xor     eax, eax
.text:0040772B                 jmp     loc_40759B
.text:00407730 ; ---------------------------------------------------------------------------
.text:00407730
.text:00407730 loc_407730:                             ; CODE XREF: sub_407560+173↑j
.text:00407730                 fstp    st(1)
.text:00407732                 jmp     short loc_4076D7
.text:00407734 ; ---------------------------------------------------------------------------
.text:00407734
.text:00407734 loc_407734:                             ; CODE XREF: sub_407560+16A↑j
.text:00407734                 fstp    st
.text:00407736
.text:00407736 loc_407736:                             ; CODE XREF: sub_407560+BD↑j
.text:00407736                 fstp    st
.text:00407738                 jmp     loc_4075D8
.text:0040773D ; ---------------------------------------------------------------------------
.text:0040773D
.text:0040773D loc_40773D:                             ; CODE XREF: sub_407560+D0↑j
.text:0040773D                                         ; sub_407560+E1↑j ...
.text:0040773D                 fstp    st
.text:0040773F                 fstp    st
.text:00407741                 jmp     loc_407694
.text:00407746 ; ---------------------------------------------------------------------------
.text:00407746
.text:00407746 loc_407746:                             ; CODE XREF: sub_407560+10A↑j
.text:00407746                                         ; sub_407560+11A↑j
.text:00407746                 fstp    st
.text:00407748                 jmp     short loc_40773D
.text:0040774A ; ---------------------------------------------------------------------------
.text:0040774A
.text:0040774A loc_40774A:                             ; CODE XREF: sub_407560+15↑j
.text:0040774A                 call    abort
.text:0040774A sub_407560      endp
.text:0040774A
.text:0040774A ; ---------------------------------------------------------------------------
.text:0040774F                 align 10h
.text:00407750                 mov     edx, [esp+4]
.text:00407754                 mov     eax, [edx+8]
.text:00407757                 retn
.text:00407757 ; ---------------------------------------------------------------------------
.text:00407758                 align 10h
.text:00407760                 mov     edx, [esp+4]
.text:00407764                 mov     eax, [edx+0Ch]
.text:00407767                 retn
.text:00407767 ; ---------------------------------------------------------------------------
.text:00407768                 align 10h
.text:00407770                 mov     edx, [esp+4]
.text:00407774                 mov     eax, [edx+10h]
.text:00407777                 retn
.text:00407777 ; ---------------------------------------------------------------------------
.text:00407778                 align 10h
.text:00407780                 push    esi
.text:00407781                 xor     esi, esi
.text:00407783                 push    ebx
.text:00407784                 mov     edx, [esp+0Ch]
.text:00407788                 mov     ecx, [edx]
.text:0040778A                 mov     ebx, [edx+4]
.text:0040778D                 cmp     ecx, ebx
.text:0040778F                 jnb     short loc_4077D7
.text:00407791                 jmp     short loc_4077A0
.text:00407791 ; ---------------------------------------------------------------------------
.text:00407793                 align 10h
.text:004077A0
.text:004077A0 loc_4077A0:                             ; CODE XREF: .text:00407791↑j
.text:004077A0                                         ; .text:004077D5↓j
.text:004077A0                 mov     edx, [ecx]
.text:004077A2                 test    edx, edx
.text:004077A4                 jz      short loc_4077D0
.text:004077A6                 mov     eax, [ecx+4]
.text:004077A9                 mov     edx, 1
.text:004077AE                 test    eax, eax
.text:004077B0                 jz      short loc_4077C8
.text:004077B2                 lea     esi, [esi+0]
.text:004077B9                 lea     edi, [edi+0]
.text:004077C0
.text:004077C0 loc_4077C0:                             ; CODE XREF: .text:004077C6↓j
.text:004077C0                 mov     eax, [eax+4]
.text:004077C3                 inc     edx
.text:004077C4                 test    eax, eax
.text:004077C6                 jnz     short loc_4077C0
.text:004077C8
.text:004077C8 loc_4077C8:                             ; CODE XREF: .text:004077B0↑j
.text:004077C8                 cmp     edx, esi
.text:004077CA                 jbe     short loc_4077D0
.text:004077CC                 mov     esi, edx
.text:004077CE                 mov     esi, esi
.text:004077D0
.text:004077D0 loc_4077D0:                             ; CODE XREF: .text:004077A4↑j
.text:004077D0                                         ; .text:004077CA↑j
.text:004077D0                 add     ecx, 8
.text:004077D3                 cmp     ecx, ebx
.text:004077D5                 jb      short loc_4077A0
.text:004077D7
.text:004077D7 loc_4077D7:                             ; CODE XREF: .text:0040778F↑j
.text:004077D7                 pop     ebx
.text:004077D8                 mov     eax, esi
.text:004077DA                 pop     esi
.text:004077DB                 retn
.text:004077DB ; ---------------------------------------------------------------------------
.text:004077DC                 align 10h
.text:004077E0                 push    edi
.text:004077E1                 xor     ecx, ecx
.text:004077E3                 push    esi
.text:004077E4                 xor     esi, esi
.text:004077E6                 push    ebx
.text:004077E7                 mov     edi, [esp+10h]
.text:004077EB                 mov     edx, [edi]
.text:004077ED                 mov     ebx, [edi+4]
.text:004077F0                 cmp     edx, ebx
.text:004077F2                 jnb     short loc_40781F
.text:004077F4                 lea     esi, [esi+0]
.text:004077FA                 lea     edi, [edi+0]
.text:00407800
.text:00407800 loc_407800:                             ; CODE XREF: .text:0040781D↓j
.text:00407800                 mov     eax, [edx]
.text:00407802                 test    eax, eax
.text:00407804                 jz      short loc_407818
.text:00407806                 mov     eax, [edx+4]
.text:00407809                 inc     esi
.text:0040780A                 inc     ecx
.text:0040780B                 test    eax, eax
.text:0040780D                 jz      short loc_407818
.text:0040780F                 nop
.text:00407810
.text:00407810 loc_407810:                             ; CODE XREF: .text:00407816↓j
.text:00407810                 mov     eax, [eax+4]
.text:00407813                 inc     ecx
.text:00407814                 test    eax, eax
.text:00407816                 jnz     short loc_407810
.text:00407818
.text:00407818 loc_407818:                             ; CODE XREF: .text:00407804↑j
.text:00407818                                         ; .text:0040780D↑j
.text:00407818                 add     edx, 8
.text:0040781B                 cmp     edx, ebx
.text:0040781D                 jb      short loc_407800
.text:0040781F
.text:0040781F loc_40781F:                             ; CODE XREF: .text:004077F2↑j
.text:0040781F                 cmp     esi, [edi+0Ch]
.text:00407822                 jz      short loc_40782A
.text:00407824
.text:00407824 loc_407824:                             ; CODE XREF: .text:0040782D↓j
.text:00407824                 xor     eax, eax
.text:00407826
.text:00407826 loc_407826:                             ; CODE XREF: .text:00407834↓j
.text:00407826                 pop     ebx
.text:00407827                 pop     esi
.text:00407828                 pop     edi
.text:00407829                 retn
.text:0040782A ; ---------------------------------------------------------------------------
.text:0040782A
.text:0040782A loc_40782A:                             ; CODE XREF: .text:00407822↑j
.text:0040782A                 cmp     ecx, [edi+10h]
.text:0040782D                 jnz     short loc_407824
.text:0040782F                 mov     eax, 1
.text:00407834                 jmp     short loc_407826
.text:00407834 ; ---------------------------------------------------------------------------
.text:00407836 aEntriesLu      db '# entries:         %lu',0Ah,0
.text:00407836                                         ; DATA XREF: .text:0040792E↓o
.text:0040784E aBucketsLu      db '# buckets:         %lu',0Ah,0
.text:0040784E                                         ; DATA XREF: .text:00407946↓o
.text:00407866                 align 20h
.text:00407880 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.text:00407880                                         ; DATA XREF: .text:00407980↓o
.text:004078A1 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.text:004078A1                                         ; DATA XREF: .text:0040799A↓o
.text:004078B9                 db 8Dh, 76h, 0
.text:004078BC flt_4078BC      dd 100.0                ; DATA XREF: .text:00407973↓r
.text:004078C0 ; ---------------------------------------------------------------------------
.text:004078C0                 push    ebp
.text:004078C1                 push    edi
.text:004078C2                 push    esi
.text:004078C3                 xor     esi, esi
.text:004078C5                 push    ebx
.text:004078C6                 sub     esp, 1Ch
.text:004078C9                 mov     ebx, [esp+30h]
.text:004078CD                 mov     edi, [esp+34h]
.text:004078D1                 mov     ecx, [ebx+10h]
.text:004078D4                 mov     eax, [ebx+0Ch]
.text:004078D7                 mov     ebp, [ebx+8]
.text:004078DA                 mov     [esp+18h], ecx
.text:004078DE                 mov     ecx, [ebx]
.text:004078E0                 mov     [esp+14h], eax
.text:004078E4                 mov     eax, [ebx+4]
.text:004078E7                 cmp     ecx, eax
.text:004078E9                 jnb     short loc_407927
.text:004078EB                 mov     ebx, eax
.text:004078ED                 lea     esi, [esi+0]
.text:004078F0
.text:004078F0 loc_4078F0:                             ; CODE XREF: .text:00407925↓j
.text:004078F0                 mov     edx, [ecx]
.text:004078F2                 test    edx, edx
.text:004078F4                 jz      short loc_407920
.text:004078F6                 mov     eax, [ecx+4]
.text:004078F9                 mov     edx, 1
.text:004078FE                 test    eax, eax
.text:00407900                 jz      short loc_407918
.text:00407902                 lea     esi, [esi+0]
.text:00407909                 lea     edi, [edi+0]
.text:00407910
.text:00407910 loc_407910:                             ; CODE XREF: .text:00407916↓j
.text:00407910                 mov     eax, [eax+4]
.text:00407913                 inc     edx
.text:00407914                 test    eax, eax
.text:00407916                 jnz     short loc_407910
.text:00407918
.text:00407918 loc_407918:                             ; CODE XREF: .text:00407900↑j
.text:00407918                 cmp     edx, esi
.text:0040791A                 jbe     short loc_407920
.text:0040791C                 mov     esi, edx
.text:0040791E                 mov     esi, esi
.text:00407920
.text:00407920 loc_407920:                             ; CODE XREF: .text:004078F4↑j
.text:00407920                                         ; .text:0040791A↑j
.text:00407920                 add     ecx, 8
.text:00407923                 cmp     ecx, ebx
.text:00407925                 jb      short loc_4078F0
.text:00407927
.text:00407927 loc_407927:                             ; CODE XREF: .text:004078E9↑j
.text:00407927                 mov     [esp], edi
.text:0040792A                 mov     edx, [esp+18h]
.text:0040792E                 mov     dword ptr [esp+4], offset aEntriesLu ; "# entries:         %lu\n"
.text:00407936                 mov     [esp+8], edx
.text:0040793A                 call    fprintf
.text:0040793F                 mov     [esp+8], ebp
.text:00407943                 mov     [esp], edi
.text:00407946                 mov     dword ptr [esp+4], offset aBucketsLu ; "# buckets:         %lu\n"
.text:0040794E                 call    fprintf
.text:00407953                 mov     ebx, [esp+14h]
.text:00407957                 xor     eax, eax
.text:00407959                 mov     ecx, ebp
.text:0040795B                 push    eax
.text:0040795C                 xor     ebp, ebp
.text:0040795E                 push    ebx
.text:0040795F                 fild    qword ptr [esp]
.text:00407962                 add     esp, 8
.text:00407965                 push    ebp
.text:00407966                 push    ecx
.text:00407967                 fild    qword ptr [esp]
.text:0040796A                 fxch    st(1)
.text:0040796C                 add     esp, 8
.text:0040796F                 mov     ebx, [esp+14h]
.text:00407973                 fmul    ds:flt_4078BC
.text:00407979                 mov     [esp], edi
.text:0040797C                 mov     [esp+8], ebx
.text:00407980                 mov     dword ptr [esp+4], offset aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:00407988                 fdivrp  st(1), st
.text:0040798A                 fstp    qword ptr [esp+0Ch]
.text:0040798E                 call    fprintf
.text:00407993                 mov     [esp+8], esi
.text:00407997                 mov     [esp], edi
.text:0040799A                 mov     dword ptr [esp+4], offset aMaxBucketLengt ; "max bucket length: %lu\n"
.text:004079A2                 call    fprintf
.text:004079A7                 add     esp, 1Ch
.text:004079AA                 pop     ebx
.text:004079AB                 pop     esi
.text:004079AC                 pop     edi
.text:004079AD                 pop     ebp
.text:004079AE                 retn
.text:004079AE ; ---------------------------------------------------------------------------
.text:004079AF                 align 10h
.text:004079B0                 push    edi
.text:004079B1                 push    esi
.text:004079B2                 push    ebx
.text:004079B3                 sub     esp, 10h
.text:004079B6                 mov     esi, [esp+20h]
.text:004079BA                 mov     edi, [esp+24h]
.text:004079BE                 mov     edx, [esi+8]
.text:004079C1                 mov     [esp], edi
.text:004079C4                 mov     [esp+4], edx
.text:004079C8                 call    dword ptr [esi+18h]
.text:004079CB                 mov     ecx, [esi]
.text:004079CD                 lea     eax, [ecx+eax*8]
.text:004079D0                 cmp     eax, [esi+4]
.text:004079D3                 jnb     short loc_407A14
.text:004079D5                 mov     ecx, [eax]
.text:004079D7                 test    ecx, ecx
.text:004079D9                 jz      short loc_407A07
.text:004079DB                 test    eax, eax
.text:004079DD                 mov     ebx, eax
.text:004079DF                 jz      short loc_407A07
.text:004079E1                 jmp     short loc_4079F0
.text:004079E1 ; ---------------------------------------------------------------------------
.text:004079E3                 align 10h
.text:004079F0
.text:004079F0 loc_4079F0:                             ; CODE XREF: .text:004079E1↑j
.text:004079F0                                         ; .text:00407A05↓j
.text:004079F0                 mov     edx, [ebx]
.text:004079F2                 mov     [esp], edi
.text:004079F5                 mov     [esp+4], edx
.text:004079F9                 call    dword ptr [esi+1Ch]
.text:004079FC                 test    al, al
.text:004079FE                 jnz     short loc_407A10
.text:00407A00                 mov     ebx, [ebx+4]
.text:00407A03                 test    ebx, ebx
.text:00407A05                 jnz     short loc_4079F0
.text:00407A07
.text:00407A07 loc_407A07:                             ; CODE XREF: .text:004079D9↑j
.text:00407A07                                         ; .text:004079DF↑j
.text:00407A07                 xor     eax, eax
.text:00407A09
.text:00407A09 loc_407A09:                             ; CODE XREF: .text:00407A12↓j
.text:00407A09                 add     esp, 10h
.text:00407A0C                 pop     ebx
.text:00407A0D                 pop     esi
.text:00407A0E                 pop     edi
.text:00407A0F                 retn
.text:00407A10 ; ---------------------------------------------------------------------------
.text:00407A10
.text:00407A10 loc_407A10:                             ; CODE XREF: .text:004079FE↑j
.text:00407A10                 mov     eax, [ebx]
.text:00407A12                 jmp     short loc_407A09
.text:00407A14 ; ---------------------------------------------------------------------------
.text:00407A14
.text:00407A14 loc_407A14:                             ; CODE XREF: .text:004079D3↑j
.text:00407A14                 call    abort
.text:00407A14 ; ---------------------------------------------------------------------------
.text:00407A19                 align 10h
.text:00407A20                 sub     esp, 0Ch
.text:00407A23                 mov     eax, [esp+10h]
.text:00407A27                 mov     edx, [eax+10h]
.text:00407A2A                 test    edx, edx
.text:00407A2C                 jz      short loc_407A53
.text:00407A2E                 mov     edx, [eax]
.text:00407A30                 mov     ecx, [eax+4]
.text:00407A33                 lea     esi, [esi+0]
.text:00407A39                 lea     edi, [edi+0]
.text:00407A40
.text:00407A40 loc_407A40:                             ; CODE XREF: .text:00407A4D↓j
.text:00407A40                 cmp     edx, ecx
.text:00407A42                 jnb     short loc_407A57
.text:00407A44                 mov     eax, [edx]
.text:00407A46                 test    eax, eax
.text:00407A48                 jnz     short loc_407A4F
.text:00407A4A                 add     edx, 8
.text:00407A4D                 jmp     short loc_407A40
.text:00407A4F ; ---------------------------------------------------------------------------
.text:00407A4F
.text:00407A4F loc_407A4F:                             ; CODE XREF: .text:00407A48↑j
.text:00407A4F                                         ; .text:00407A55↓j
.text:00407A4F                 add     esp, 0Ch
.text:00407A52                 retn
.text:00407A53 ; ---------------------------------------------------------------------------
.text:00407A53
.text:00407A53 loc_407A53:                             ; CODE XREF: .text:00407A2C↑j
.text:00407A53                 xor     eax, eax
.text:00407A55                 jmp     short loc_407A4F
.text:00407A57 ; ---------------------------------------------------------------------------
.text:00407A57
.text:00407A57 loc_407A57:                             ; CODE XREF: .text:00407A42↑j
.text:00407A57                 call    abort
.text:00407A57 ; ---------------------------------------------------------------------------
.text:00407A5C                 align 10h
.text:00407A60                 push    esi
.text:00407A61                 push    ebx
.text:00407A62                 sub     esp, 14h
.text:00407A65                 mov     ebx, [esp+20h]
.text:00407A69                 mov     esi, [esp+24h]
.text:00407A6D                 mov     edx, [ebx+8]
.text:00407A70                 mov     [esp], esi
.text:00407A73                 mov     [esp+4], edx
.text:00407A77                 call    dword ptr [ebx+18h]
.text:00407A7A                 mov     ecx, [ebx]
.text:00407A7C                 lea     edx, [ecx+eax*8]
.text:00407A7F                 mov     ecx, [ebx+4]
.text:00407A82                 cmp     edx, ecx
.text:00407A84                 jnb     short loc_407AD0
.text:00407A86                 test    edx, edx
.text:00407A88                 mov     eax, edx
.text:00407A8A                 jz      short loc_407A9B
.text:00407A8C                 lea     esi, [esi+0]
.text:00407A90
.text:00407A90 loc_407A90:                             ; CODE XREF: .text:00407A99↓j
.text:00407A90                 cmp     [eax], esi
.text:00407A92                 jz      short loc_407AC5
.text:00407A94                 mov     eax, [eax+4]
.text:00407A97
.text:00407A97 loc_407A97:                             ; CODE XREF: .text:00407ACA↓j
.text:00407A97                 test    eax, eax
.text:00407A99                 jnz     short loc_407A90
.text:00407A9B
.text:00407A9B loc_407A9B:                             ; CODE XREF: .text:00407A8A↑j
.text:00407A9B                 add     edx, 8
.text:00407A9E                 cmp     edx, ecx
.text:00407AA0                 jnb     short loc_407ABD
.text:00407AA2                 lea     esi, [esi+0]
.text:00407AA9                 lea     edi, [edi+0]
.text:00407AB0
.text:00407AB0 loc_407AB0:                             ; CODE XREF: .text:00407ABB↓j
.text:00407AB0                 mov     eax, [edx]
.text:00407AB2                 test    eax, eax
.text:00407AB4                 jnz     short loc_407ABF
.text:00407AB6                 add     edx, 8
.text:00407AB9                 cmp     edx, ecx
.text:00407ABB                 jb      short loc_407AB0
.text:00407ABD
.text:00407ABD loc_407ABD:                             ; CODE XREF: .text:00407AA0↑j
.text:00407ABD                 xor     eax, eax
.text:00407ABF
.text:00407ABF loc_407ABF:                             ; CODE XREF: .text:00407AB4↑j
.text:00407ABF                                         ; .text:00407ACE↓j
.text:00407ABF                 add     esp, 14h
.text:00407AC2                 pop     ebx
.text:00407AC3                 pop     esi
.text:00407AC4                 retn
.text:00407AC5 ; ---------------------------------------------------------------------------
.text:00407AC5
.text:00407AC5 loc_407AC5:                             ; CODE XREF: .text:00407A92↑j
.text:00407AC5                 mov     eax, [eax+4]
.text:00407AC8                 test    eax, eax
.text:00407ACA                 jz      short loc_407A97
.text:00407ACC                 mov     eax, [eax]
.text:00407ACE                 jmp     short loc_407ABF
.text:00407AD0 ; ---------------------------------------------------------------------------
.text:00407AD0
.text:00407AD0 loc_407AD0:                             ; CODE XREF: .text:00407A84↑j
.text:00407AD0                 call    abort
.text:00407AD0 ; ---------------------------------------------------------------------------
.text:00407AD5                 align 10h
.text:00407AE0                 push    ebp
.text:00407AE1                 xor     ecx, ecx
.text:00407AE3                 push    edi
.text:00407AE4                 push    esi
.text:00407AE5                 push    ebx
.text:00407AE6                 mov     edx, [esp+14h]
.text:00407AEA                 mov     ebp, [esp+18h]
.text:00407AEE                 mov     edi, [esp+1Ch]
.text:00407AF2                 mov     ebx, [edx]
.text:00407AF4                 mov     esi, [edx+4]
.text:00407AF7                 cmp     ebx, esi
.text:00407AF9                 jnb     short loc_407B30
.text:00407AFB                 nop
.text:00407AFC                 lea     esi, [esi+0]
.text:00407B00
.text:00407B00 loc_407B00:                             ; CODE XREF: .text:00407B27↓j
.text:00407B00                 mov     edx, [ebx]
.text:00407B02                 test    edx, edx
.text:00407B04                 jz      short loc_407B22
.text:00407B06                 mov     edx, ebx
.text:00407B08                 nop
.text:00407B09                 lea     esi, [esi+0]
.text:00407B10
.text:00407B10 loc_407B10:                             ; CODE XREF: .text:00407B20↓j
.text:00407B10                 cmp     ecx, edi
.text:00407B12                 jnb     short loc_407B30
.text:00407B14                 mov     eax, [edx]
.text:00407B16                 mov     edx, [edx+4]
.text:00407B19                 mov     [ebp+ecx*4+0], eax
.text:00407B1D                 inc     ecx
.text:00407B1E                 test    edx, edx
.text:00407B20                 jnz     short loc_407B10
.text:00407B22
.text:00407B22 loc_407B22:                             ; CODE XREF: .text:00407B04↑j
.text:00407B22                 add     ebx, 8
.text:00407B25                 cmp     ebx, esi
.text:00407B27                 jb      short loc_407B00
.text:00407B29                 lea     esi, [esi+0]
.text:00407B30
.text:00407B30 loc_407B30:                             ; CODE XREF: .text:00407AF9↑j
.text:00407B30                                         ; .text:00407B12↑j
.text:00407B30                 pop     ebx
.text:00407B31                 mov     eax, ecx
.text:00407B33                 pop     esi
.text:00407B34                 pop     edi
.text:00407B35                 pop     ebp
.text:00407B36                 retn
.text:00407B36 ; ---------------------------------------------------------------------------
.text:00407B37                 align 10h
.text:00407B40                 push    ebp
.text:00407B41                 push    edi
.text:00407B42                 xor     edi, edi
.text:00407B44                 push    esi
.text:00407B45                 push    ebx
.text:00407B46                 sub     esp, 0Ch
.text:00407B49                 mov     edx, [esp+20h]
.text:00407B4D                 mov     ebp, [esp+28h]
.text:00407B51                 mov     esi, [edx]
.text:00407B53                 mov     eax, [edx+4]
.text:00407B56                 cmp     esi, eax
.text:00407B58                 jnb     short loc_407BA0
.text:00407B5A                 lea     esi, [esi+0]
.text:00407B60
.text:00407B60 loc_407B60:                             ; CODE XREF: .text:00407B95↓j
.text:00407B60                 mov     ecx, [esi]
.text:00407B62                 test    ecx, ecx
.text:00407B64                 jz      short loc_407B90
.text:00407B66                 mov     ebx, esi
.text:00407B68                 nop
.text:00407B69                 lea     esi, [esi+0]
.text:00407B70
.text:00407B70 loc_407B70:                             ; CODE XREF: .text:00407B87↓j
.text:00407B70                 mov     [esp+4], ebp
.text:00407B74                 mov     edx, [ebx]
.text:00407B76                 mov     [esp], edx
.text:00407B79                 call    dword ptr [esp+24h]
.text:00407B7D                 test    al, al
.text:00407B7F                 jz      short loc_407BA0
.text:00407B81                 mov     ebx, [ebx+4]
.text:00407B84                 inc     edi
.text:00407B85                 test    ebx, ebx
.text:00407B87                 jnz     short loc_407B70
.text:00407B89                 mov     ebx, [esp+20h]
.text:00407B8D                 mov     eax, [ebx+4]
.text:00407B90
.text:00407B90 loc_407B90:                             ; CODE XREF: .text:00407B64↑j
.text:00407B90                 add     esi, 8
.text:00407B93                 cmp     esi, eax
.text:00407B95                 jb      short loc_407B60
.text:00407B97                 mov     esi, esi
.text:00407B99                 lea     edi, [edi+0]
.text:00407BA0
.text:00407BA0 loc_407BA0:                             ; CODE XREF: .text:00407B58↑j
.text:00407BA0                                         ; .text:00407B7F↑j
.text:00407BA0                 add     esp, 0Ch
.text:00407BA3                 mov     eax, edi
.text:00407BA5                 pop     ebx
.text:00407BA6                 pop     esi
.text:00407BA7                 pop     edi
.text:00407BA8                 pop     ebp
.text:00407BA9                 retn
.text:00407BA9 ; ---------------------------------------------------------------------------
.text:00407BAA                 align 10h
.text:00407BB0                 push    esi
.text:00407BB1                 push    ebx
.text:00407BB2                 mov     ecx, [esp+0Ch]
.text:00407BB6                 xor     ebx, ebx
.text:00407BB8                 mov     esi, [esp+10h]
.text:00407BBC                 movzx   edx, byte ptr [ecx]
.text:00407BBF                 test    dl, dl
.text:00407BC1                 jz      short loc_407BEA
.text:00407BC3                 lea     esi, [esi+0]
.text:00407BC9                 lea     edi, [edi+0]
.text:00407BD0
.text:00407BD0 loc_407BD0:                             ; CODE XREF: .text:00407BE8↓j
.text:00407BD0                 mov     eax, ebx
.text:00407BD2                 inc     ecx
.text:00407BD3                 shl     eax, 5
.text:00407BD6                 sub     eax, ebx
.text:00407BD8                 movzx   ebx, dl
.text:00407BDB                 add     eax, ebx
.text:00407BDD                 xor     edx, edx
.text:00407BDF                 div     esi
.text:00407BE1                 mov     ebx, edx
.text:00407BE3                 movzx   edx, byte ptr [ecx]
.text:00407BE6                 test    dl, dl
.text:00407BE8                 jnz     short loc_407BD0
.text:00407BEA
.text:00407BEA loc_407BEA:                             ; CODE XREF: .text:00407BC1↑j
.text:00407BEA                 mov     eax, ebx
.text:00407BEC                 pop     ebx
.text:00407BED                 pop     esi
.text:00407BEE                 retn
.text:00407BEE ; ---------------------------------------------------------------------------
.text:00407BEF                 align 10h
.text:00407BF0                 mov     ecx, [esp+4]
.text:00407BF4                 mov     edx, ds:dword_406FE0
.text:00407BFA                 mov     [ecx], edx
.text:00407BFC                 mov     edx, ds:dword_406FE4
.text:00407C02                 mov     [ecx+4], edx
.text:00407C05                 mov     edx, ds:dword_406FE4+4
.text:00407C0B                 mov     [ecx+8], edx
.text:00407C0E                 mov     edx, ds:dword_406FE4+8
.text:00407C14                 mov     [ecx+0Ch], edx
.text:00407C17                 mov     edx, ds:dword_406FE4+0Ch
.text:00407C1D                 mov     [ecx+10h], edx
.text:00407C20                 retn
.text:00407C20 ; ---------------------------------------------------------------------------
.text:00407C21                 align 4
.text:00407C24 flt_407C24      dd 0.1                  ; DATA XREF: sub_407C30+79↓r
.text:00407C28 flt_407C28      dd 0.89999998           ; DATA XREF: sub_407C30+8D↓r
.text:00407C2C flt_407C2C      dd 1.1                  ; DATA XREF: sub_407C30+A1↓r
.text:00407C30
.text:00407C30 ; =============== S U B R O U T I N E =======================================
.text:00407C30
.text:00407C30
.text:00407C30 sub_407C30      proc near               ; CODE XREF: sub_403600+2F0↑p
.text:00407C30                                         ; sub_403600+483↑p
.text:00407C30
.text:00407C30 var_34          = qword ptr -34h
.text:00407C30 var_2C          = dword ptr -2Ch
.text:00407C30 var_28          = dword ptr -28h
.text:00407C30 var_24          = dword ptr -24h
.text:00407C30 var_20          = dword ptr -20h
.text:00407C30 var_1C          = qword ptr -1Ch
.text:00407C30 var_14          = word ptr -14h
.text:00407C30 var_12          = word ptr -12h
.text:00407C30 var_10          = dword ptr -10h
.text:00407C30 arg_0           = dword ptr  4
.text:00407C30 arg_4           = dword ptr  8
.text:00407C30
.text:00407C30                 push    esi
.text:00407C31                 push    ebx
.text:00407C32                 sub     esp, 24h
.text:00407C35                 lea     edx, [esp+2Ch+var_10]
.text:00407C39                 mov     [esp+2Ch+var_24], edx
.text:00407C3D                 mov     ebx, [esp+2Ch+arg_0]
.text:00407C41                 mov     edx, [esp+2Ch+arg_4]
.text:00407C45                 mov     [esp+2Ch+var_20], 1
.text:00407C4D                 mov     [esp+2Ch+var_2C], ebx
.text:00407C50                 mov     [esp+2Ch+var_28], edx
.text:00407C54                 call    sub_407DC0
.text:00407C59                 mov     esi, eax
.text:00407C5B                 xor     eax, eax
.text:00407C5D                 test    esi, esi
.text:00407C5F                 jz      loc_407D92
.text:00407C65                 dec     dword ptr [ebx+10h]
.text:00407C68                 mov     ecx, [esp+2Ch+var_10]
.text:00407C6C                 mov     edx, [ecx]
.text:00407C6E                 test    edx, edx
.text:00407C70                 jnz     loc_407D90
.text:00407C76                 dec     dword ptr [ebx+0Ch]
.text:00407C79                 xor     eax, eax
.text:00407C7B                 xor     edx, edx
.text:00407C7D                 mov     ecx, [ebx+0Ch]
.text:00407C80                 push    eax
.text:00407C81                 push    ecx
.text:00407C82                 mov     eax, [ebx+8]
.text:00407C85                 mov     ecx, [ebx+14h]
.text:00407C88                 fild    [esp+34h+var_34]
.text:00407C8B                 add     esp, 8
.text:00407C8E                 push    edx
.text:00407C8F                 push    eax
.text:00407C90                 fild    [esp+34h+var_34]
.text:00407C93                 add     esp, 8
.text:00407C96                 fld     dword ptr [ecx]
.text:00407C98                 fmul    st(1), st
.text:00407C9A                 fxch    st(1)
.text:00407C9C                 fucomp  st(2)
.text:00407C9E                 fnstsw  ax
.text:00407CA0                 fstp    st(1)
.text:00407CA2                 sahf
.text:00407CA3                 jbe     loc_407DA0
.text:00407CA9                 fld     ds:flt_407C24
.text:00407CAF                 fld     dword ptr [ecx+8]
.text:00407CB2                 fucom   st(1)
.text:00407CB4                 fnstsw  ax
.text:00407CB6                 sahf
.text:00407CB7                 jbe     loc_407DB0
.text:00407CBD                 fld     ds:flt_407C28
.text:00407CC3                 fucomp  st(1)
.text:00407CC5                 fnstsw  ax
.text:00407CC7                 sahf
.text:00407CC8                 jbe     loc_407DB0
.text:00407CCE                 fld     dword ptr [ecx+0Ch]
.text:00407CD1                 fld     ds:flt_407C2C
.text:00407CD7                 fxch    st(1)
.text:00407CD9                 fucompp
.text:00407CDB                 fnstsw  ax
.text:00407CDD                 sahf
.text:00407CDE                 jbe     loc_407DB0
.text:00407CE4                 fldz
.text:00407CE6                 fxch    st(3)
.text:00407CE8                 fucom   st(3)
.text:00407CEA                 fnstsw  ax
.text:00407CEC                 fstp    st(3)
.text:00407CEE                 sahf
.text:00407CEF                 jb      loc_407DB0
.text:00407CF5                 fxch    st(1)
.text:00407CF7                 faddp   st(2), st
.text:00407CF9                 fld     dword ptr [ecx+4]
.text:00407CFC                 fucom   st(2)
.text:00407CFE                 fnstsw  ax
.text:00407D00                 sahf
.text:00407D01                 jbe     loc_407DB0
.text:00407D07                 fld1
.text:00407D09                 fucompp
.text:00407D0B                 fnstsw  ax
.text:00407D0D                 sahf
.text:00407D0E                 jb      loc_407DA4
.text:00407D14                 fucompp
.text:00407D16                 fnstsw  ax
.text:00407D18                 sahf
.text:00407D19                 ja      short loc_407D2C
.text:00407D1B                 nop
.text:00407D1C                 lea     esi, [esi+0]
.text:00407D20
.text:00407D20 loc_407D20:                             ; CODE XREF: sub_407C30+178↓j
.text:00407D20                 mov     dword ptr [ebx+14h], offset dword_406FE0
.text:00407D27                 mov     ecx, offset dword_406FE0
.text:00407D2C
.text:00407D2C loc_407D2C:                             ; CODE XREF: sub_407C30+E9↑j
.text:00407D2C                 mov     eax, [ebx+0Ch]
.text:00407D2F                 xor     edx, edx
.text:00407D31                 push    edx
.text:00407D32                 xor     edx, edx
.text:00407D34                 push    eax
.text:00407D35                 mov     eax, [ebx+8]
.text:00407D38                 fild    [esp+34h+var_34]
.text:00407D3B                 add     esp, 8
.text:00407D3E                 push    edx
.text:00407D3F                 push    eax
.text:00407D40                 fild    [esp+34h+var_34]
.text:00407D43                 add     esp, 8
.text:00407D46                 fld     dword ptr [ecx]
.text:00407D48                 fmul    st, st(1)
.text:00407D4A                 fucomp  st(2)
.text:00407D4C                 fnstsw  ax
.text:00407D4E                 fstp    st(1)
.text:00407D50                 sahf
.text:00407D51                 jbe     short loc_407DA0
.text:00407D53                 cmp     byte ptr [ecx+10h], 0
.text:00407D57                 jz      short loc_407D98
.text:00407D59                 fmul    dword ptr [ecx+4]
.text:00407D5C
.text:00407D5C loc_407D5C:                             ; CODE XREF: sub_407C30+16E↓j
.text:00407D5C                 fnstcw  [esp+2Ch+var_12]
.text:00407D60                 movzx   ecx, [esp+2Ch+var_12]
.text:00407D65                 mov     [esp+2Ch+var_2C], ebx
.text:00407D68                 or      cx, 0C00h
.text:00407D6D                 mov     [esp+2Ch+var_14], cx
.text:00407D72                 fldcw   [esp+2Ch+var_14]
.text:00407D76                 fistp   [esp+2Ch+var_1C]
.text:00407D7A                 fldcw   [esp+2Ch+var_12]
.text:00407D7E                 mov     edx, dword ptr [esp+2Ch+var_1C]
.text:00407D82                 mov     [esp+2Ch+var_28], edx
.text:00407D86                 call    sub_4073E0
.text:00407D8B                 nop
.text:00407D8C                 lea     esi, [esi+0]
.text:00407D90
.text:00407D90 loc_407D90:                             ; CODE XREF: sub_407C30+40↑j
.text:00407D90                                         ; sub_407C30+172↓j
.text:00407D90                 mov     eax, esi
.text:00407D92
.text:00407D92 loc_407D92:                             ; CODE XREF: sub_407C30+2F↑j
.text:00407D92                 add     esp, 24h
.text:00407D95                 pop     ebx
.text:00407D96                 pop     esi
.text:00407D97                 retn
.text:00407D98 ; ---------------------------------------------------------------------------
.text:00407D98
.text:00407D98 loc_407D98:                             ; CODE XREF: sub_407C30+127↑j
.text:00407D98                 fmul    dword ptr [ecx+4]
.text:00407D9B                 fmul    dword ptr [ecx+8]
.text:00407D9E                 jmp     short loc_407D5C
.text:00407DA0 ; ---------------------------------------------------------------------------
.text:00407DA0
.text:00407DA0 loc_407DA0:                             ; CODE XREF: sub_407C30+73↑j
.text:00407DA0                                         ; sub_407C30+121↑j
.text:00407DA0                 fstp    st
.text:00407DA2                 jmp     short loc_407D90
.text:00407DA4 ; ---------------------------------------------------------------------------
.text:00407DA4
.text:00407DA4 loc_407DA4:                             ; CODE XREF: sub_407C30+DE↑j
.text:00407DA4                                         ; sub_407C30+182↓j
.text:00407DA4                 fstp    st
.text:00407DA6                 fstp    st
.text:00407DA8                 jmp     loc_407D20
.text:00407DA8 ; ---------------------------------------------------------------------------
.text:00407DAD                 align 10h
.text:00407DB0
.text:00407DB0 loc_407DB0:                             ; CODE XREF: sub_407C30+87↑j
.text:00407DB0                                         ; sub_407C30+98↑j ...
.text:00407DB0                 fstp    st
.text:00407DB2                 jmp     short loc_407DA4
.text:00407DB2 sub_407C30      endp
.text:00407DB2
.text:00407DB2 ; ---------------------------------------------------------------------------
.text:00407DB4                 align 10h
.text:00407DC0
.text:00407DC0 ; =============== S U B R O U T I N E =======================================
.text:00407DC0
.text:00407DC0
.text:00407DC0 sub_407DC0      proc near               ; CODE XREF: sub_407560+32↑p
.text:00407DC0                                         ; sub_407C30+24↑p
.text:00407DC0
.text:00407DC0 var_1C          = dword ptr -1Ch
.text:00407DC0 var_18          = dword ptr -18h
.text:00407DC0 var_D           = byte ptr -0Dh
.text:00407DC0 arg_0           = dword ptr  4
.text:00407DC0 arg_4           = dword ptr  8
.text:00407DC0 arg_8           = dword ptr  0Ch
.text:00407DC0 arg_C           = byte ptr  10h
.text:00407DC0
.text:00407DC0                 push    edi
.text:00407DC1                 push    esi
.text:00407DC2                 push    ebx
.text:00407DC3                 sub     esp, 10h
.text:00407DC6                 mov     esi, [esp+1Ch+arg_0]
.text:00407DCA                 movzx   ecx, [esp+1Ch+arg_C]
.text:00407DCF                 mov     edi, [esp+1Ch+arg_4]
.text:00407DD3                 mov     edx, [esi+8]
.text:00407DD6                 mov     [esp+1Ch+var_D], cl
.text:00407DDA                 mov     [esp+1Ch+var_18], edx
.text:00407DDE                 mov     [esp+1Ch+var_1C], edi
.text:00407DE1                 call    dword ptr [esi+18h]
.text:00407DE4                 mov     ecx, [esi]
.text:00407DE6                 lea     ebx, [ecx+eax*8]
.text:00407DE9                 cmp     ebx, [esi+4]
.text:00407DEC                 jnb     loc_407EA3
.text:00407DF2                 mov     edx, [esp+1Ch+arg_8]
.text:00407DF6                 xor     eax, eax
.text:00407DF8                 mov     [edx], ebx
.text:00407DFA                 mov     edx, [ebx]
.text:00407DFC                 test    edx, edx
.text:00407DFE                 jz      short loc_407E42
.text:00407E00                 mov     [esp+1Ch+var_18], edx
.text:00407E04                 mov     [esp+1Ch+var_1C], edi
.text:00407E07                 call    dword ptr [esi+1Ch]
.text:00407E0A                 test    al, al
.text:00407E0C                 jz      short loc_407E51
.text:00407E0E                 cmp     [esp+1Ch+var_D], 0
.text:00407E13                 mov     edi, [ebx]
.text:00407E15                 jz      short loc_407E40
.text:00407E17                 mov     ecx, [ebx+4]
.text:00407E1A                 test    ecx, ecx
.text:00407E1C                 jz      short loc_407E49
.text:00407E1E                 mov     eax, [ecx]
.text:00407E20                 mov     edx, [ecx+4]
.text:00407E23                 mov     [ebx], eax
.text:00407E25                 mov     [ebx+4], edx
.text:00407E28                 mov     ebx, [esi+24h]
.text:00407E2B                 mov     dword ptr [ecx], 0
.text:00407E31                 mov     [ecx+4], ebx
.text:00407E34                 mov     [esi+24h], ecx
.text:00407E37                 mov     esi, esi
.text:00407E39                 lea     edi, [edi+0]
.text:00407E40
.text:00407E40 loc_407E40:                             ; CODE XREF: sub_407DC0+55↑j
.text:00407E40                                         ; sub_407DC0+8F↓j
.text:00407E40                 mov     eax, edi
.text:00407E42
.text:00407E42 loc_407E42:                             ; CODE XREF: sub_407DC0+3E↑j
.text:00407E42                                         ; sub_407DC0+BC↓j ...
.text:00407E42                 add     esp, 10h
.text:00407E45                 pop     ebx
.text:00407E46                 pop     esi
.text:00407E47                 pop     edi
.text:00407E48                 retn
.text:00407E49 ; ---------------------------------------------------------------------------
.text:00407E49
.text:00407E49 loc_407E49:                             ; CODE XREF: sub_407DC0+5C↑j
.text:00407E49                 mov     dword ptr [ebx], 0
.text:00407E4F                 jmp     short loc_407E40
.text:00407E51 ; ---------------------------------------------------------------------------
.text:00407E51
.text:00407E51 loc_407E51:                             ; CODE XREF: sub_407DC0+4C↑j
.text:00407E51                 mov     eax, [ebx+4]
.text:00407E54                 test    eax, eax
.text:00407E56                 jz      short loc_407E7A
.text:00407E58                 nop
.text:00407E59                 lea     esi, [esi+0]
.text:00407E60
.text:00407E60 loc_407E60:                             ; CODE XREF: sub_407DC0+B8↓j
.text:00407E60                 mov     ecx, [eax]
.text:00407E62                 mov     [esp+1Ch+var_1C], edi
.text:00407E65                 mov     [esp+1Ch+var_18], ecx
.text:00407E69                 call    dword ptr [esi+1Ch]
.text:00407E6C                 test    al, al
.text:00407E6E                 jnz     short loc_407E7E
.text:00407E70                 mov     ebx, [ebx+4]
.text:00407E73                 mov     eax, [ebx+4]
.text:00407E76                 test    eax, eax
.text:00407E78                 jnz     short loc_407E60
.text:00407E7A
.text:00407E7A loc_407E7A:                             ; CODE XREF: sub_407DC0+96↑j
.text:00407E7A                 xor     eax, eax
.text:00407E7C                 jmp     short loc_407E42
.text:00407E7E ; ---------------------------------------------------------------------------
.text:00407E7E
.text:00407E7E loc_407E7E:                             ; CODE XREF: sub_407DC0+AE↑j
.text:00407E7E                 cmp     [esp+1Ch+var_D], 0
.text:00407E83                 mov     edx, [ebx+4]
.text:00407E86                 mov     ecx, [edx]
.text:00407E88                 jz      short loc_407E9F
.text:00407E8A                 mov     dword ptr [edx], 0
.text:00407E90                 mov     edi, [edx+4]
.text:00407E93                 mov     [ebx+4], edi
.text:00407E96                 mov     edi, [esi+24h]
.text:00407E99                 mov     [edx+4], edi
.text:00407E9C                 mov     [esi+24h], edx
.text:00407E9F
.text:00407E9F loc_407E9F:                             ; CODE XREF: sub_407DC0+C8↑j
.text:00407E9F                 mov     eax, ecx
.text:00407EA1                 jmp     short loc_407E42
.text:00407EA3 ; ---------------------------------------------------------------------------
.text:00407EA3
.text:00407EA3 loc_407EA3:                             ; CODE XREF: sub_407DC0+2C↑j
.text:00407EA3                 call    abort
.text:00407EA3 sub_407DC0      endp
.text:00407EA3
.text:00407EA3 ; ---------------------------------------------------------------------------
.text:00407EA8                 align 20h
.text:00407EC0
.text:00407EC0 loc_407EC0:                             ; DATA XREF: sub_407EE0+3↓o
.text:00407EC0                 insd
.text:00407EC1                 db      65h
.text:00407EC1                 insd
.text:00407EC3                 outsd
.text:00407EC4                 jb      short loc_407F3F
.text:00407EC6                 and     [ebp+78h], ah
.text:00407EC9                 push    74737561h
.text:00407ECE
.text:00407ECE loc_407ECE:                             ; DATA XREF: sub_407EE0+10↓o
.text:00407ECE                 db      65h
.text:00407ECE                 add     fs:0B68D0073h, ah
.text:00407ECE ; ---------------------------------------------------------------------------
.text:00407ED6                 dw 0
.text:00407ED8                 align 10h
.text:00407EE0
.text:00407EE0 ; =============== S U B R O U T I N E =======================================
.text:00407EE0
.text:00407EE0 ; Attributes: noreturn
.text:00407EE0
.text:00407EE0 sub_407EE0      proc near               ; CODE XREF: sub_404BA0:loc_404C3D↑p
.text:00407EE0                                         ; sub_406B20:loc_406B59↑p ...
.text:00407EE0
.text:00407EE0 Code            = dword ptr -1Ch
.text:00407EE0 ErrorMessage    = dword ptr -18h
.text:00407EE0 var_14          = dword ptr -14h
.text:00407EE0 var_10          = byte ptr -10h
.text:00407EE0
.text:00407EE0                 sub     esp, 1Ch
.text:00407EE3                 mov     [esp+1Ch+Code], offset loc_407EC0
.text:00407EEA                 call    ds:libintl_gettext
.text:00407EF0                 mov     [esp+1Ch+var_14], (offset loc_407ECE+3) ; char *
.text:00407EF8                 mov     edx, Code
.text:00407EFE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00407F06                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00407F0A                 mov     [esp+1Ch+Code], edx ; Code
.text:00407F0D                 call    sub_409310
.text:00407F12                 call    abort
.text:00407F12 sub_407EE0      endp
.text:00407F12
.text:00407F12 ; ---------------------------------------------------------------------------
.text:00407F17                 align 10h
.text:00407F20 aLiteral        db 'literal',0          ; DATA XREF: .text:00407F60↓o
.text:00407F28 aShell_0        db 'shell',0            ; DATA XREF: .text:00407F64↓o
.text:00407F2E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00407F68↓o
.text:00407F3B aC_0            db 'c',0                ; DATA XREF: .text:00407F6C↓o
.text:00407F3D byte_407F3D     db 65h, 73h             ; DATA XREF: .text:00407F70↓o
.text:00407F3F ; ---------------------------------------------------------------------------
.text:00407F3F
.text:00407F3F loc_407F3F:                             ; CODE XREF: .text:00407EC4↑j
.text:00407F3F                 arpl    [ecx+70h], sp
.text:00407F42                 add     gs:[edi+ebp*2+63h], ch
.text:00407F47                 popa
.text:00407F48                 insb
.text:00407F49                 add     gs:[ebx+6Ch], ah
.text:00407F4D                 outsd
.text:00407F4E                 arpl    [ecx+6Ch], sp
.text:00407F51                 add     gs:[ebp+0B6h], cl
.text:00407F58                 add     [ebp+27BCh], cl
.text:00407F58 ; ---------------------------------------------------------------------------
.text:00407F5E                 dw 0
.text:00407F60                 dd offset aLiteral      ; "literal"
.text:00407F64                 dd offset aShell_0      ; "shell"
.text:00407F68                 dd offset aShellAlways  ; "shell-always"
.text:00407F6C                 dd offset aC_0          ; "c"
.text:00407F70                 dd offset byte_407F3D
.text:00407F74                 dd 407F44h, 407F4Bh, 2 dup(0)
.text:00407F84                 dd 1, 2, 3, 4, 5, 6
.text:00407F9C asc_407F9C:                             ; DATA XREF: sub_407FB0+7E↓o
.text:00407F9C                                         ; sub_407FB0+A39↓o ...
.text:00407F9C                 text "UTF-16LE", '"',27h,'`'
.text:00407FA2                 align 10h
.text:00407FB0
.text:00407FB0 ; =============== S U B R O U T I N E =======================================
.text:00407FB0
.text:00407FB0
.text:00407FB0 ; int __cdecl sub_407FB0(int, int, char *Str, int, int, int)
.text:00407FB0 sub_407FB0      proc near               ; CODE XREF: sub_407FB0+43A↓p
.text:00407FB0                                         ; .text:00408B73↓p ...
.text:00407FB0
.text:00407FB0 C               = dword ptr -4Ch
.text:00407FB0 Type            = dword ptr -48h
.text:00407FB0 SizeInBytes     = dword ptr -44h
.text:00407FB0 State           = dword ptr -40h
.text:00407FB0 var_3C          = dword ptr -3Ch
.text:00407FB0 var_38          = dword ptr -38h
.text:00407FB0 var_34          = dword ptr -34h
.text:00407FB0 var_30          = dword ptr -30h
.text:00407FB0 var_29          = byte ptr -29h
.text:00407FB0 var_28          = dword ptr -28h
.text:00407FB0 var_22          = byte ptr -22h
.text:00407FB0 var_21          = byte ptr -21h
.text:00407FB0 var_20          = dword ptr -20h
.text:00407FB0 var_1C          = dword ptr -1Ch
.text:00407FB0 var_18          = mbstate_t ptr -18h
.text:00407FB0 arg_0           = dword ptr  4
.text:00407FB0 arg_4           = dword ptr  8
.text:00407FB0 Str             = dword ptr  0Ch
.text:00407FB0 arg_C           = dword ptr  10h
.text:00407FB0 arg_10          = dword ptr  14h
.text:00407FB0 arg_14          = dword ptr  18h
.text:00407FB0
.text:00407FB0                 push    ebp
.text:00407FB1                 push    edi
.text:00407FB2                 push    esi
.text:00407FB3                 push    ebx
.text:00407FB4                 sub     esp, 3Ch
.text:00407FB7                 mov     edx, ds:__mb_cur_max
.text:00407FBD                 mov     [esp+4Ch+var_34], 0
.text:00407FC5                 mov     [esp+4Ch+var_1C], 0
.text:00407FCD                 cmp     dword ptr [edx], 1
.text:00407FD0                 mov     [esp+4Ch+var_20], 0
.text:00407FD8                 mov     [esp+4Ch+var_21], 0
.text:00407FDD                 setz    [esp+4Ch+var_22]
.text:00407FE2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00407FE7                 ja      short def_407FED ; jumptable 00407FED default case, cases 0,1
.text:00407FE9                 mov     edx, [esp+4Ch+arg_10]
.text:00407FED                 jmp     ds:jpt_407FED[edx*4] ; switch jump
.text:00407FED ; ---------------------------------------------------------------------------
.text:00407FF4 jpt_407FED      dd offset def_407FED    ; DATA XREF: sub_407FB0+3D↑r
.text:00407FF4                 dd offset def_407FED    ; jump table for switch statement
.text:00407FF4                 dd offset loc_408935
.text:00407FF4                 dd offset loc_408010
.text:00407FF4                 dd offset loc_40895B
.text:00407FF4                 dd offset loc_408965
.text:00407FF4                 dd offset loc_408965
.text:00408010 ; ---------------------------------------------------------------------------
.text:00408010
.text:00408010 loc_408010:                             ; CODE XREF: sub_407FB0+3D↑j
.text:00408010                                         ; DATA XREF: sub_407FB0:jpt_407FED↑o
.text:00408010                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00407FED case 3
.text:00408014                 cmp     [esp+4Ch+var_34], eax
.text:00408018                 jnb     short loc_408021
.text:0040801A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040801E                 mov     byte ptr [ebx], 22h ; '"'
.text:00408021
.text:00408021 loc_408021:                             ; CODE XREF: sub_407FB0+68↑j
.text:00408021                 mov     [esp+4Ch+var_34], 1
.text:00408029                 mov     [esp+4Ch+var_21], 1
.text:0040802E                 mov     [esp+4Ch+var_1C], offset asc_407F9C ; "\"'`"
.text:00408036
.text:00408036 loc_408036:                             ; CODE XREF: sub_407FB0+9A6↓j
.text:00408036                 mov     [esp+4Ch+var_20], 1
.text:0040803E
.text:0040803E def_407FED:                             ; CODE XREF: sub_407FB0+37↑j
.text:0040803E                                         ; sub_407FB0+3D↑j ...
.text:0040803E                 xor     ebp, ebp        ; jumptable 00407FED default case, cases 0,1
.text:00408040
.text:00408040 loc_408040:                             ; CODE XREF: sub_407FB0+3DB↓j
.text:00408040                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00408045                 jz      loc_408927
.text:0040804B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040804F
.text:0040804F loc_40804F:                             ; CODE XREF: sub_407FB0+980↓j
.text:0040804F                 jz      loc_4088BE
.text:00408055                 cmp     [esp+4Ch+var_21], 0
.text:0040805A                 jz      short loc_4080A0
.text:0040805C                 mov     esi, [esp+4Ch+var_20]
.text:00408060                 test    esi, esi
.text:00408062                 jz      short loc_4080A0
.text:00408064                 mov     ecx, [esp+4Ch+var_20]
.text:00408068                 lea     edi, [ecx+ebp]
.text:0040806B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040806F                 ja      short loc_4080A0
.text:00408071                 cld
.text:00408072                 mov     ebx, [esp+4Ch+Str]
.text:00408076                 mov     edi, [esp+4Ch+var_1C]
.text:0040807A                 add     ebx, ebp
.text:0040807C                 mov     esi, ebx
.text:0040807E                 cmp     ecx, ecx
.text:00408080                 repe cmpsb
.text:00408082                 jnz     short loc_4080A0
.text:00408084                 mov     edx, [esp+4Ch+arg_4]
.text:00408088                 cmp     [esp+4Ch+var_34], edx
.text:0040808C                 jnb     short loc_40809A
.text:0040808E                 mov     ecx, [esp+4Ch+arg_0]
.text:00408092                 mov     eax, [esp+4Ch+var_34]
.text:00408096                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040809A
.text:0040809A loc_40809A:                             ; CODE XREF: sub_407FB0+DC↑j
.text:0040809A                 inc     [esp+4Ch+var_34]
.text:0040809E                 mov     esi, esi
.text:004080A0
.text:004080A0 loc_4080A0:                             ; CODE XREF: sub_407FB0+AA↑j
.text:004080A0                                         ; sub_407FB0+B2↑j ...
.text:004080A0                 mov     edi, [esp+4Ch+Str]
.text:004080A4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004080A9                 movzx   eax, bl
.text:004080AC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004080AF                 ja      def_4080B5      ; jumptable 004080B5 default case, cases 1-6,14-31,64
.text:004080B5                 jmp     ds:jpt_4080B5[eax*4] ; switch jump
.text:004080B5 ; ---------------------------------------------------------------------------
.text:004080BC jpt_4080B5      dd offset loc_4082B8, offset def_4080B5, offset def_4080B5
.text:004080BC                                         ; DATA XREF: sub_407FB0+105↑r
.text:004080BC                 dd offset def_4080B5, offset def_4080B5, offset def_4080B5 ; jump table for switch statement
.text:004080BC                 dd offset def_4080B5, offset loc_408390, offset loc_4083AE
.text:004080BC                 dd offset loc_4083B2, offset loc_4083F7, offset loc_4083FB
.text:004080BC                 dd offset loc_4083FF, offset loc_408403, offset def_4080B5
.text:004080BC                 dd offset def_4080B5, offset def_4080B5, offset def_4080B5
.text:004080BC                 dd offset def_4080B5, offset def_4080B5, offset def_4080B5
.text:004080BC                 dd offset def_4080B5, offset def_4080B5, offset def_4080B5
.text:004080BC                 dd offset def_4080B5, offset def_4080B5, offset def_4080B5
.text:004080BC                 dd offset def_4080B5, offset def_4080B5, offset def_4080B5
.text:004080BC                 dd offset def_4080B5, offset def_4080B5, offset loc_408888
.text:004080BC                 dd offset loc_408888, offset loc_408888, offset loc_4088AA
.text:004080BC                 dd offset loc_408888, offset def_4084B2, offset loc_408888
.text:004080BC                 dd offset loc_408407, offset loc_408888, offset loc_408888
.text:004080BC                 dd offset loc_408888, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset loc_408888
.text:004080BC                 dd offset loc_408888, offset loc_408888, offset loc_408888
.text:004080BC                 dd offset loc_40846C, offset def_4080B5, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset loc_408888, offset loc_408881
.text:004080BC                 dd offset def_4084B2, offset loc_408888, offset def_4084B2
.text:004080BC                 dd offset loc_408888, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset def_4084B2, offset def_4084B2, offset def_4084B2
.text:004080BC                 dd offset loc_408898, offset loc_408888, offset loc_408898
.text:004080BC                 dd offset loc_4088AA
.text:004082B8 ; ---------------------------------------------------------------------------
.text:004082B8
.text:004082B8 loc_4082B8:                             ; CODE XREF: sub_407FB0+105↑j
.text:004082B8                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:004082B8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004080B5 case 0
.text:004082BD                 lea     eax, [ebp+1]
.text:004082C0                 jz      loc_408370
.text:004082C6                 mov     esi, [esp+4Ch+arg_4]
.text:004082CA                 cmp     [esp+4Ch+var_34], esi
.text:004082CE                 jnb     short loc_4082DC
.text:004082D0                 mov     eax, [esp+4Ch+arg_0]
.text:004082D4                 mov     ebx, [esp+4Ch+var_34]
.text:004082D8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004082DC
.text:004082DC loc_4082DC:                             ; CODE XREF: sub_407FB0+31E↑j
.text:004082DC                 inc     [esp+4Ch+var_34]
.text:004082E0                 mov     edx, [esp+4Ch+arg_4]
.text:004082E4                 cmp     [esp+4Ch+var_34], edx
.text:004082E8                 jnb     short loc_4082F6
.text:004082EA                 mov     edi, [esp+4Ch+arg_0]
.text:004082EE                 mov     ecx, [esp+4Ch+var_34]
.text:004082F2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004082F6
.text:004082F6 loc_4082F6:                             ; CODE XREF: sub_407FB0+338↑j
.text:004082F6                 inc     [esp+4Ch+var_34]
.text:004082FA                 mov     esi, [esp+4Ch+arg_4]
.text:004082FE                 cmp     [esp+4Ch+var_34], esi
.text:00408302                 jnb     short loc_408310
.text:00408304                 mov     ebx, [esp+4Ch+arg_0]
.text:00408308                 mov     eax, [esp+4Ch+var_34]
.text:0040830C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00408310
.text:00408310 loc_408310:                             ; CODE XREF: sub_407FB0+352↑j
.text:00408310                 inc     [esp+4Ch+var_34]
.text:00408314                 mov     bl, 30h ; '0'
.text:00408316                 lea     esi, [esi+0]
.text:00408319                 lea     edi, [edi+0]
.text:00408320
.text:00408320 def_4084B2:                             ; CODE XREF: sub_407FB0+105↑j
.text:00408320                                         ; sub_407FB0+463↓j ...
.text:00408320                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004080B5 cases 37,43-58,65-90,93,95,97-122
.text:00408320                                         ; jumptable 004084B2 default case, cases 34-38,42-44,46,48-59
.text:00408325                 lea     eax, [ebp+1]
.text:00408328                 jz      short loc_408370
.text:0040832A                 mov     cl, bl
.text:0040832C                 mov     edi, [esp+4Ch+arg_14]
.text:00408330                 mov     esi, 1
.text:00408335                 shr     cl, 5
.text:00408338                 movzx   edx, cl
.text:0040833B                 mov     ecx, ebx
.text:0040833D                 and     ecx, 1Fh
.text:00408340                 shl     esi, cl
.text:00408342                 test    [edi+edx*4+4], esi
.text:00408346                 jz      short loc_408362
.text:00408348
.text:00408348 loc_408348:                             ; CODE XREF: sub_407FB0+3FC↓j
.text:00408348                 mov     edx, [esp+4Ch+arg_4]
.text:0040834C                 cmp     [esp+4Ch+var_34], edx
.text:00408350                 jnb     short loc_40835E
.text:00408352                 mov     edi, [esp+4Ch+arg_0]
.text:00408356                 mov     esi, [esp+4Ch+var_34]
.text:0040835A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040835E
.text:0040835E loc_40835E:                             ; CODE XREF: sub_407FB0+3A0↑j
.text:0040835E                 inc     [esp+4Ch+var_34]
.text:00408362
.text:00408362 loc_408362:                             ; CODE XREF: sub_407FB0+396↑j
.text:00408362                 lea     eax, [ebp+1]
.text:00408365                 lea     esi, [esi+0]
.text:00408369                 lea     edi, [edi+0]
.text:00408370
.text:00408370 loc_408370:                             ; CODE XREF: sub_407FB0+310↑j
.text:00408370                                         ; sub_407FB0+378↑j ...
.text:00408370                 mov     ebp, [esp+4Ch+arg_4]
.text:00408374                 cmp     [esp+4Ch+var_34], ebp
.text:00408378                 jnb     short loc_408385
.text:0040837A                 mov     edx, [esp+4Ch+arg_0]
.text:0040837E                 mov     ecx, [esp+4Ch+var_34]
.text:00408382                 mov     [ecx+edx], bl
.text:00408385
.text:00408385 loc_408385:                             ; CODE XREF: sub_407FB0+3C8↑j
.text:00408385                 inc     [esp+4Ch+var_34]
.text:00408389                 mov     ebp, eax
.text:0040838B                 jmp     loc_408040
.text:00408390 ; ---------------------------------------------------------------------------
.text:00408390
.text:00408390 loc_408390:                             ; CODE XREF: sub_407FB0+105↑j
.text:00408390                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:00408390                 mov     dl, 61h ; 'a'   ; jumptable 004080B5 case 7
.text:00408392                 lea     esi, [esi+0]
.text:00408399                 lea     edi, [edi+0]
.text:004083A0
.text:004083A0 loc_4083A0:                             ; CODE XREF: sub_407FB0+400↓j
.text:004083A0                                         ; sub_407FB0+409↓j ...
.text:004083A0                 cmp     [esp+4Ch+var_21], 0
.text:004083A5                 lea     eax, [ebp+1]
.text:004083A8                 jz      short loc_408370
.text:004083AA                 mov     bl, dl
.text:004083AC                 jmp     short loc_408348
.text:004083AE ; ---------------------------------------------------------------------------
.text:004083AE
.text:004083AE loc_4083AE:                             ; CODE XREF: sub_407FB0+105↑j
.text:004083AE                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:004083AE                 mov     dl, 62h ; 'b'   ; jumptable 004080B5 case 8
.text:004083B0                 jmp     short loc_4083A0
.text:004083B2 ; ---------------------------------------------------------------------------
.text:004083B2
.text:004083B2 loc_4083B2:                             ; CODE XREF: sub_407FB0+105↑j
.text:004083B2                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:004083B2                 mov     dl, 74h ; 't'   ; jumptable 004080B5 case 9
.text:004083B4
.text:004083B4 loc_4083B4:                             ; CODE XREF: sub_407FB0+449↓j
.text:004083B4                                         ; sub_407FB0+455↓j ...
.text:004083B4                 cmp     [esp+4Ch+arg_10], 1
.text:004083B9                 jnz     short loc_4083A0
.text:004083BB
.text:004083BB loc_4083BB:                             ; CODE XREF: sub_407FB0+45C↓j
.text:004083BB                                         ; sub_407FB0+4C1↓j ...
.text:004083BB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00408782 cases 91,92,94,96,124
.text:004083C3                 mov     eax, [esp+4Ch+arg_14]
.text:004083C7                 mov     edx, [esp+4Ch+arg_C]
.text:004083CB                 mov     ecx, [esp+4Ch+Str]
.text:004083CF                 mov     ebx, [esp+4Ch+arg_4]
.text:004083D3                 mov     [esp+4Ch+var_38], eax ; int
.text:004083D7                 mov     ebp, [esp+4Ch+arg_0]
.text:004083DB                 mov     [esp+4Ch+State], edx ; int
.text:004083DF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004083E3                 mov     [esp+4Ch+Type], ebx ; int
.text:004083E7                 mov     [esp+4Ch+C], ebp ; int
.text:004083EA                 call    sub_407FB0
.text:004083EF
.text:004083EF loc_4083EF:                             ; CODE XREF: sub_407FB0+972↓j
.text:004083EF                 add     esp, 3Ch
.text:004083F2                 pop     ebx
.text:004083F3                 pop     esi
.text:004083F4                 pop     edi
.text:004083F5                 pop     ebp
.text:004083F6                 retn
.text:004083F7 ; ---------------------------------------------------------------------------
.text:004083F7
.text:004083F7 loc_4083F7:                             ; CODE XREF: sub_407FB0+105↑j
.text:004083F7                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:004083F7                 mov     dl, 6Eh ; 'n'   ; jumptable 004080B5 case 10
.text:004083F9                 jmp     short loc_4083B4
.text:004083FB ; ---------------------------------------------------------------------------
.text:004083FB
.text:004083FB loc_4083FB:                             ; CODE XREF: sub_407FB0+105↑j
.text:004083FB                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:004083FB                 mov     dl, 76h ; 'v'   ; jumptable 004080B5 case 11
.text:004083FD                 jmp     short loc_4083A0
.text:004083FF ; ---------------------------------------------------------------------------
.text:004083FF
.text:004083FF loc_4083FF:                             ; CODE XREF: sub_407FB0+105↑j
.text:004083FF                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:004083FF                 mov     dl, 66h ; 'f'   ; jumptable 004080B5 case 12
.text:00408401                 jmp     short loc_4083A0
.text:00408403 ; ---------------------------------------------------------------------------
.text:00408403
.text:00408403 loc_408403:                             ; CODE XREF: sub_407FB0+105↑j
.text:00408403                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:00408403                 mov     dl, 72h ; 'r'   ; jumptable 004080B5 case 13
.text:00408405                 jmp     short loc_4083B4
.text:00408407 ; ---------------------------------------------------------------------------
.text:00408407
.text:00408407 loc_408407:                             ; CODE XREF: sub_407FB0+105↑j
.text:00408407                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:00408407                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004080B5 case 39
.text:0040840C                 jz      short loc_4083BB ; jumptable 00408782 cases 91,92,94,96,124
.text:0040840E                 cmp     [esp+4Ch+arg_10], 2
.text:00408413                 jnz     def_4084B2      ; jumptable 004080B5 cases 37,43-58,65-90,93,95,97-122
.text:00408413                                         ; jumptable 004084B2 default case, cases 34-38,42-44,46,48-59
.text:00408419                 mov     edx, [esp+4Ch+arg_4]
.text:0040841D                 cmp     [esp+4Ch+var_34], edx
.text:00408421                 jnb     short loc_40842F
.text:00408423                 mov     ecx, [esp+4Ch+arg_0]
.text:00408427                 mov     edi, [esp+4Ch+var_34]
.text:0040842B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040842F
.text:0040842F loc_40842F:                             ; CODE XREF: sub_407FB0+471↑j
.text:0040842F                 inc     [esp+4Ch+var_34]
.text:00408433                 mov     eax, [esp+4Ch+arg_4]
.text:00408437                 cmp     [esp+4Ch+var_34], eax
.text:0040843B                 jnb     short loc_408449
.text:0040843D                 mov     esi, [esp+4Ch+arg_0]
.text:00408441                 mov     edx, [esp+4Ch+var_34]
.text:00408445                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00408449
.text:00408449 loc_408449:                             ; CODE XREF: sub_407FB0+48B↑j
.text:00408449                 inc     [esp+4Ch+var_34]
.text:0040844D                 mov     edi, [esp+4Ch+arg_4]
.text:00408451                 cmp     [esp+4Ch+var_34], edi
.text:00408455                 jnb     short loc_408463
.text:00408457                 mov     ecx, [esp+4Ch+arg_0]
.text:0040845B                 mov     eax, [esp+4Ch+var_34]
.text:0040845F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00408463
.text:00408463 loc_408463:                             ; CODE XREF: sub_407FB0+4A5↑j
.text:00408463                                         ; sub_407FB0+5C4↓j ...
.text:00408463                 inc     [esp+4Ch+var_34]
.text:00408467                 jmp     def_4084B2      ; jumptable 004080B5 cases 37,43-58,65-90,93,95,97-122
.text:00408467                                         ; jumptable 004084B2 default case, cases 34-38,42-44,46,48-59
.text:0040846C ; ---------------------------------------------------------------------------
.text:0040846C
.text:0040846C loc_40846C:                             ; CODE XREF: sub_407FB0+105↑j
.text:0040846C                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:0040846C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004080B5 case 63
.text:00408471                 jz      loc_4083BB      ; jumptable 00408782 cases 91,92,94,96,124
.text:00408477                 cmp     [esp+4Ch+arg_10], 3
.text:0040847C                 jnz     def_4084B2      ; jumptable 004080B5 cases 37,43-58,65-90,93,95,97-122
.text:0040847C                                         ; jumptable 004084B2 default case, cases 34-38,42-44,46,48-59
.text:00408482                 lea     edx, [ebp+2]
.text:00408485                 cmp     edx, [esp+4Ch+arg_C]
.text:00408489                 jnb     def_4084B2      ; jumptable 004080B5 cases 37,43-58,65-90,93,95,97-122
.text:00408489                                         ; jumptable 004084B2 default case, cases 34-38,42-44,46,48-59
.text:0040848F                 mov     esi, [esp+4Ch+Str]
.text:00408493                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00408498                 jnz     def_4084B2      ; jumptable 004080B5 cases 37,43-58,65-90,93,95,97-122
.text:00408498                                         ; jumptable 004084B2 default case, cases 34-38,42-44,46,48-59
.text:0040849E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004084A3                 movsx   eax, cl
.text:004084A6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004084A9                 cmp     eax, 1Dh
.text:004084AC                 ja      def_4084B2      ; jumptable 004080B5 cases 37,43-58,65-90,93,95,97-122
.text:004084AC                                         ; jumptable 004084B2 default case, cases 34-38,42-44,46,48-59
.text:004084B2                 jmp     ds:jpt_4084B2[eax*4] ; switch jump
.text:004084B2 ; ---------------------------------------------------------------------------
.text:004084B9                 align 4
.text:004084BC jpt_4084B2      dd offset loc_408534    ; DATA XREF: sub_407FB0+502↑r
.text:004084BC                 dd offset def_4084B2    ; jump table for switch statement
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset loc_408534
.text:004084BC                 dd offset loc_408534
.text:004084BC                 dd offset loc_408534
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset loc_408534
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset loc_408534
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset def_4084B2
.text:004084BC                 dd offset loc_408534
.text:004084BC                 dd offset loc_408534
.text:004084BC                 dd offset loc_408534
.text:00408534 ; ---------------------------------------------------------------------------
.text:00408534
.text:00408534 loc_408534:                             ; CODE XREF: sub_407FB0+502↑j
.text:00408534                                         ; DATA XREF: sub_407FB0:jpt_4084B2↑o
.text:00408534                 mov     ebp, edx        ; jumptable 004084B2 cases 33,39-41,45,47,60-62
.text:00408536                 mov     bl, cl
.text:00408538                 mov     edx, [esp+4Ch+arg_4]
.text:0040853C                 cmp     [esp+4Ch+var_34], edx
.text:00408540                 jnb     short loc_40854E
.text:00408542                 mov     ecx, [esp+4Ch+arg_0]
.text:00408546                 mov     edi, [esp+4Ch+var_34]
.text:0040854A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040854E
.text:0040854E loc_40854E:                             ; CODE XREF: sub_407FB0+590↑j
.text:0040854E                 inc     [esp+4Ch+var_34]
.text:00408552                 mov     eax, [esp+4Ch+arg_4]
.text:00408556                 cmp     [esp+4Ch+var_34], eax
.text:0040855A                 jnb     short loc_408568
.text:0040855C                 mov     edx, [esp+4Ch+arg_0]
.text:00408560                 mov     esi, [esp+4Ch+var_34]
.text:00408564                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00408568
.text:00408568 loc_408568:                             ; CODE XREF: sub_407FB0+5AA↑j
.text:00408568                 inc     [esp+4Ch+var_34]
.text:0040856C                 mov     edi, [esp+4Ch+arg_4]
.text:00408570                 cmp     [esp+4Ch+var_34], edi
.text:00408574                 jnb     loc_408463
.text:0040857A                 mov     eax, [esp+4Ch+arg_0]
.text:0040857E                 mov     ecx, [esp+4Ch+var_34]
.text:00408582                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00408586                 jmp     loc_408463
.text:00408586 ; ---------------------------------------------------------------------------
.text:0040858B                 align 10h
.text:00408590
.text:00408590 def_4080B5:                             ; CODE XREF: sub_407FB0+FF↑j
.text:00408590                                         ; sub_407FB0+105↑j
.text:00408590                                         ; DATA XREF: ...
.text:00408590                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004080B5 default case, cases 1-6,14-31,64
.text:00408595                 jz      loc_4086C0
.text:0040859B                 mov     [esp+4Ch+var_28], 1
.text:004085A3                 mov     esi, ds:__mb_cur_max
.text:004085A9                 movzx   edx, bl
.text:004085AC                 cmp     dword ptr [esi], 1
.text:004085AF                 jz      loc_4086A4
.text:004085B5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004085BD                 mov     [esp+4Ch+C], edx ; C
.text:004085C0                 call    _isctype
.text:004085C5
.text:004085C5 loc_4085C5:                             ; CODE XREF: sub_407FB0+705↓j
.text:004085C5                 test    eax, eax
.text:004085C7                 setnz   [esp+4Ch+var_29]
.text:004085CC
.text:004085CC loc_4085CC:                             ; CODE XREF: sub_407FB0+7A5↓j
.text:004085CC                 cmp     [esp+4Ch+var_21], 0
.text:004085D1                 lea     eax, [ebp+1]
.text:004085D4                 jz      loc_408370
.text:004085DA                 cmp     [esp+4Ch+var_29], 0
.text:004085DF                 jnz     def_4084B2      ; jumptable 004080B5 cases 37,43-58,65-90,93,95,97-122
.text:004085DF                                         ; jumptable 004084B2 default case, cases 34-38,42-44,46,48-59
.text:004085E5
.text:004085E5 loc_4085E5:                             ; CODE XREF: sub_407FB0+7AB↓j
.text:004085E5                 mov     eax, [esp+4Ch+var_28]
.text:004085E9                 lea     edx, [eax+ebp]
.text:004085EC                 lea     esi, [esi+0]
.text:004085F0
.text:004085F0 loc_4085F0:                             ; CODE XREF: sub_407FB0+6EF↓j
.text:004085F0                 cmp     [esp+4Ch+var_21], 0
.text:004085F5                 jz      short loc_408670
.text:004085F7                 cmp     [esp+4Ch+var_29], 0
.text:004085FC                 jnz     short loc_408670
.text:004085FE                 mov     edi, [esp+4Ch+arg_4]
.text:00408602                 cmp     [esp+4Ch+var_34], edi
.text:00408606                 jnb     short loc_408614
.text:00408608                 mov     esi, [esp+4Ch+arg_0]
.text:0040860C                 mov     eax, [esp+4Ch+var_34]
.text:00408610                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00408614
.text:00408614 loc_408614:                             ; CODE XREF: sub_407FB0+656↑j
.text:00408614                 inc     [esp+4Ch+var_34]
.text:00408618                 mov     ecx, [esp+4Ch+arg_4]
.text:0040861C                 cmp     [esp+4Ch+var_34], ecx
.text:00408620                 jnb     short loc_408635
.text:00408622                 mov     cl, bl
.text:00408624                 mov     esi, [esp+4Ch+arg_0]
.text:00408628                 mov     edi, [esp+4Ch+var_34]
.text:0040862C                 shr     cl, 6
.text:0040862F                 add     cl, 30h ; '0'
.text:00408632                 mov     [edi+esi], cl
.text:00408635
.text:00408635 loc_408635:                             ; CODE XREF: sub_407FB0+670↑j
.text:00408635                 inc     [esp+4Ch+var_34]
.text:00408639                 mov     edi, [esp+4Ch+arg_4]
.text:0040863D                 cmp     [esp+4Ch+var_34], edi
.text:00408641                 jnb     short loc_408659
.text:00408643                 mov     cl, bl
.text:00408645                 mov     esi, [esp+4Ch+arg_0]
.text:00408649                 shr     cl, 3
.text:0040864C                 mov     edi, [esp+4Ch+var_34]
.text:00408650                 and     cl, 7
.text:00408653                 add     cl, 30h ; '0'
.text:00408656                 mov     [edi+esi], cl
.text:00408659
.text:00408659 loc_408659:                             ; CODE XREF: sub_407FB0+691↑j
.text:00408659                 inc     [esp+4Ch+var_34]
.text:0040865D                 and     bl, 7
.text:00408660                 add     bl, 30h ; '0'
.text:00408663                 lea     esi, [esi+0]
.text:00408669                 lea     edi, [edi+0]
.text:00408670
.text:00408670 loc_408670:                             ; CODE XREF: sub_407FB0+645↑j
.text:00408670                                         ; sub_407FB0+64C↑j
.text:00408670                 lea     eax, [ebp+1]
.text:00408673                 cmp     edx, eax
.text:00408675                 jbe     loc_408370
.text:0040867B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040867F                 cmp     [esp+4Ch+var_34], ebp
.text:00408683                 jnb     short loc_408690
.text:00408685                 mov     ecx, [esp+4Ch+arg_0]
.text:00408689                 mov     edi, [esp+4Ch+var_34]
.text:0040868D                 mov     [edi+ecx], bl
.text:00408690
.text:00408690 loc_408690:                             ; CODE XREF: sub_407FB0+6D3↑j
.text:00408690                 inc     [esp+4Ch+var_34]
.text:00408694                 mov     ebp, eax
.text:00408696                 mov     eax, [esp+4Ch+Str]
.text:0040869A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040869F                 jmp     loc_4085F0
.text:004086A4 ; ---------------------------------------------------------------------------
.text:004086A4
.text:004086A4 loc_4086A4:                             ; CODE XREF: sub_407FB0+5FF↑j
.text:004086A4                 mov     ecx, ds:_pctype
.text:004086AA                 mov     edi, [ecx]
.text:004086AC                 movzx   eax, word ptr [edi+edx*2]
.text:004086B0                 and     eax, 157h
.text:004086B5                 jmp     loc_4085C5
.text:004086B5 ; ---------------------------------------------------------------------------
.text:004086BA                 align 10h
.text:004086C0
.text:004086C0 loc_4086C0:                             ; CODE XREF: sub_407FB0+5E5↑j
.text:004086C0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004086C5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004086CD                 mov     [esp+4Ch+var_28], 0
.text:004086D5                 mov     [esp+4Ch+var_29], 1
.text:004086DA                 jz      loc_40886C
.text:004086E0
.text:004086E0 loc_4086E0:                             ; CODE XREF: sub_407FB0+8CC↓j
.text:004086E0                 mov     ecx, [esp+4Ch+arg_C]
.text:004086E4                 lea     edx, [esp+4Ch+var_18]
.text:004086E8                 mov     edi, [esp+4Ch+Str]
.text:004086EC                 mov     [esp+4Ch+State], edx ; State
.text:004086F0                 lea     esi, [esp+4Ch+var_18._State]
.text:004086F4                 sub     ecx, ebp
.text:004086F6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004086FA                 add     edi, ebp
.text:004086FC                 mov     [esp+4Ch+var_30], edi
.text:00408700                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00408704                 mov     [esp+4Ch+C], esi ; DstCh
.text:00408707                 call    mbrtowc
.text:0040870C                 test    eax, eax
.text:0040870E                 mov     edi, eax
.text:00408710                 jz      short loc_408750
.text:00408712                 cmp     eax, 0FFFFFFFFh
.text:00408715                 jz      loc_408862
.text:0040871B                 cmp     eax, 0FFFFFFFEh
.text:0040871E                 jz      loc_408822
.text:00408724                 cmp     [esp+4Ch+arg_10], 1
.text:00408729                 jz      short loc_408760
.text:0040872B
.text:0040872B loc_40872B:                             ; CODE XREF: sub_407FB0+7B9↓j
.text:0040872B                                         ; sub_407FB0+86D↓j
.text:0040872B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00408730                 mov     [esp+4Ch+Type], 157h ; Type
.text:00408738                 mov     [esp+4Ch+C], ecx ; C
.text:0040873B                 call    iswctype
.text:00408740                 test    eax, eax
.text:00408742                 jnz     short loc_408749
.text:00408744                 mov     [esp+4Ch+var_29], 0
.text:00408749
.text:00408749 loc_408749:                             ; CODE XREF: sub_407FB0+792↑j
.text:00408749                 mov     [esp+4Ch+var_28], edi
.text:0040874D                 lea     esi, [esi+0]
.text:00408750
.text:00408750 loc_408750:                             ; CODE XREF: sub_407FB0+760↑j
.text:00408750                                         ; sub_407FB0+87B↓j ...
.text:00408750                 cmp     [esp+4Ch+var_28], 1
.text:00408755                 jbe     loc_4085CC
.text:0040875B                 jmp     loc_4085E5
.text:00408760 ; ---------------------------------------------------------------------------
.text:00408760
.text:00408760 loc_408760:                             ; CODE XREF: sub_407FB0+779↑j
.text:00408760                 cmp     [esp+4Ch+arg_10], eax
.text:00408764                 mov     edx, 1
.text:00408769                 jnb     short loc_40872B
.text:0040876B
.text:0040876B loc_40876B:                             ; CODE XREF: sub_407FB0+867↓j
.text:0040876B                 mov     ecx, [esp+4Ch+Str]
.text:0040876F                 lea     esi, [edx+ebp]
.text:00408772                 movsx   eax, byte ptr [esi+ecx]
.text:00408776                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00408779                 cmp     eax, 21h
.text:0040877C                 ja      def_408782      ; jumptable 00408782 default case, cases 93,95,97-123
.text:00408782                 jmp     ds:jpt_408782[eax*4] ; switch jump
.text:00408782 ; ---------------------------------------------------------------------------
.text:00408789                 align 4
.text:0040878C jpt_408782      dd offset loc_4083BB    ; DATA XREF: sub_407FB0+7D2↑r
.text:0040878C                 dd offset loc_4083BB    ; jump table for switch statement
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset loc_4083BB
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset loc_4083BB
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset def_408782
.text:0040878C                 dd offset loc_4083BB
.text:00408814 ; ---------------------------------------------------------------------------
.text:00408814
.text:00408814 def_408782:                             ; CODE XREF: sub_407FB0+7CC↑j
.text:00408814                                         ; sub_407FB0+7D2↑j
.text:00408814                                         ; DATA XREF: ...
.text:00408814                 inc     edx             ; jumptable 00408782 default case, cases 93,95,97-123
.text:00408815                 cmp     edx, edi
.text:00408817                 jb      loc_40876B
.text:0040881D                 jmp     loc_40872B
.text:00408822 ; ---------------------------------------------------------------------------
.text:00408822
.text:00408822 loc_408822:                             ; CODE XREF: sub_407FB0+76E↑j
.text:00408822                 cmp     ebp, [esp+4Ch+arg_C]
.text:00408826                 mov     [esp+4Ch+var_29], 0
.text:0040882B                 jnb     loc_408750
.text:00408831                 mov     eax, [esp+4Ch+var_30]
.text:00408835                 cmp     byte ptr [eax], 0
.text:00408838                 jz      loc_408750
.text:0040883E
.text:0040883E loc_40883E:                             ; CODE XREF: sub_407FB0+8AB↓j
.text:0040883E                 inc     [esp+4Ch+var_28]
.text:00408842                 mov     esi, [esp+4Ch+var_28]
.text:00408846                 lea     eax, [esi+ebp]
.text:00408849                 cmp     eax, [esp+4Ch+arg_C]
.text:0040884D                 jnb     loc_408750
.text:00408853                 mov     edi, [esp+4Ch+Str]
.text:00408857                 cmp     byte ptr [eax+edi], 0
.text:0040885B                 jnz     short loc_40883E
.text:0040885D                 jmp     loc_408750
.text:00408862 ; ---------------------------------------------------------------------------
.text:00408862
.text:00408862 loc_408862:                             ; CODE XREF: sub_407FB0+765↑j
.text:00408862                 mov     [esp+4Ch+var_29], 0
.text:00408867                 jmp     loc_408750
.text:0040886C ; ---------------------------------------------------------------------------
.text:0040886C
.text:0040886C loc_40886C:                             ; CODE XREF: sub_407FB0+72A↑j
.text:0040886C                 mov     edx, [esp+4Ch+Str]
.text:00408870                 mov     [esp+4Ch+C], edx ; Str
.text:00408873                 call    strlen
.text:00408878                 mov     [esp+4Ch+arg_C], eax
.text:0040887C                 jmp     loc_4086E0
.text:00408881 ; ---------------------------------------------------------------------------
.text:00408881
.text:00408881 loc_408881:                             ; CODE XREF: sub_407FB0+105↑j
.text:00408881                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:00408881                 mov     dl, bl          ; jumptable 004080B5 case 92
.text:00408883                 jmp     loc_4083B4
.text:00408888 ; ---------------------------------------------------------------------------
.text:00408888
.text:00408888 loc_408888:                             ; CODE XREF: sub_407FB0+105↑j
.text:00408888                                         ; sub_407FB0+902↓j
.text:00408888                                         ; DATA XREF: ...
.text:00408888                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004080B5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040888D                 jnz     def_4084B2      ; jumptable 004080B5 cases 37,43-58,65-90,93,95,97-122
.text:0040888D                                         ; jumptable 004084B2 default case, cases 34-38,42-44,46,48-59
.text:00408893                 jmp     loc_4083BB      ; jumptable 00408782 cases 91,92,94,96,124
.text:00408898 ; ---------------------------------------------------------------------------
.text:00408898
.text:00408898 loc_408898:                             ; CODE XREF: sub_407FB0+105↑j
.text:00408898                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:00408898                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004080B5 cases 123,125
.text:0040889D                 jz      short loc_4088B4
.text:0040889F                 cmp     [esp+4Ch+arg_C], 1
.text:004088A4
.text:004088A4 loc_4088A4:                             ; CODE XREF: sub_407FB0+90C↓j
.text:004088A4                 jnz     def_4084B2      ; jumptable 004080B5 cases 37,43-58,65-90,93,95,97-122
.text:004088A4                                         ; jumptable 004084B2 default case, cases 34-38,42-44,46,48-59
.text:004088AA
.text:004088AA loc_4088AA:                             ; CODE XREF: sub_407FB0+105↑j
.text:004088AA                                         ; DATA XREF: sub_407FB0:jpt_4080B5↑o
.text:004088AA                 test    ebp, ebp        ; jumptable 004080B5 cases 35,126
.text:004088AC                 jnz     def_4084B2      ; jumptable 004080B5 cases 37,43-58,65-90,93,95,97-122
.text:004088AC                                         ; jumptable 004084B2 default case, cases 34-38,42-44,46,48-59
.text:004088B2                 jmp     short loc_408888 ; jumptable 004080B5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004088B4 ; ---------------------------------------------------------------------------
.text:004088B4
.text:004088B4 loc_4088B4:                             ; CODE XREF: sub_407FB0+8ED↑j
.text:004088B4                 mov     esi, [esp+4Ch+Str]
.text:004088B8                 cmp     byte ptr [esi+1], 0
.text:004088BC                 jmp     short loc_4088A4
.text:004088BE ; ---------------------------------------------------------------------------
.text:004088BE
.text:004088BE loc_4088BE:                             ; CODE XREF: sub_407FB0:loc_40804F↑j
.text:004088BE                 test    ebp, ebp
.text:004088C0                 jnz     short loc_4088CD
.text:004088C2                 cmp     [esp+4Ch+arg_10], 1
.text:004088C7                 jz      loc_4083BB      ; jumptable 00408782 cases 91,92,94,96,124
.text:004088CD
.text:004088CD loc_4088CD:                             ; CODE XREF: sub_407FB0+910↑j
.text:004088CD                 mov     esi, [esp+4Ch+var_1C]
.text:004088D1                 test    esi, esi
.text:004088D3                 jz      short loc_408908
.text:004088D5                 mov     edi, [esp+4Ch+var_1C]
.text:004088D9                 movzx   eax, byte ptr [edi]
.text:004088DC                 test    al, al
.text:004088DE                 jz      short loc_408908
.text:004088E0
.text:004088E0 loc_4088E0:                             ; CODE XREF: sub_407FB0+956↓j
.text:004088E0                 mov     ebp, [esp+4Ch+arg_4]
.text:004088E4                 cmp     [esp+4Ch+var_34], ebp
.text:004088E8                 jnb     short loc_4088F5
.text:004088EA                 mov     ecx, [esp+4Ch+arg_0]
.text:004088EE                 mov     ebx, [esp+4Ch+var_34]
.text:004088F2                 mov     [ebx+ecx], al
.text:004088F5
.text:004088F5 loc_4088F5:                             ; CODE XREF: sub_407FB0+938↑j
.text:004088F5                 inc     [esp+4Ch+var_1C]
.text:004088F9                 inc     [esp+4Ch+var_34]
.text:004088FD                 mov     edx, [esp+4Ch+var_1C]
.text:00408901                 movzx   eax, byte ptr [edx]
.text:00408904                 test    al, al
.text:00408906                 jnz     short loc_4088E0
.text:00408908
.text:00408908 loc_408908:                             ; CODE XREF: sub_407FB0+923↑j
.text:00408908                                         ; sub_407FB0+92E↑j
.text:00408908                 mov     eax, [esp+4Ch+arg_4]
.text:0040890C                 cmp     [esp+4Ch+var_34], eax
.text:00408910                 jnb     short loc_40891E
.text:00408912                 mov     edi, [esp+4Ch+arg_0]
.text:00408916                 mov     esi, [esp+4Ch+var_34]
.text:0040891A                 mov     byte ptr [esi+edi], 0
.text:0040891E
.text:0040891E loc_40891E:                             ; CODE XREF: sub_407FB0+960↑j
.text:0040891E                 mov     eax, [esp+4Ch+var_34]
.text:00408922                 jmp     loc_4083EF
.text:00408927 ; ---------------------------------------------------------------------------
.text:00408927
.text:00408927 loc_408927:                             ; CODE XREF: sub_407FB0+95↑j
.text:00408927                 mov     ebx, [esp+4Ch+Str]
.text:0040892B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00408930                 jmp     loc_40804F
.text:00408935 ; ---------------------------------------------------------------------------
.text:00408935
.text:00408935 loc_408935:                             ; CODE XREF: sub_407FB0+3D↑j
.text:00408935                                         ; DATA XREF: sub_407FB0:jpt_407FED↑o
.text:00408935                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00407FED case 2
.text:00408939                 cmp     [esp+4Ch+var_34], edx
.text:0040893D                 jnb     short loc_408946
.text:0040893F                 mov     ecx, [esp+4Ch+arg_0]
.text:00408943                 mov     byte ptr [ecx], 27h ; '''
.text:00408946
.text:00408946 loc_408946:                             ; CODE XREF: sub_407FB0+98D↑j
.text:00408946                 mov     [esp+4Ch+var_34], 1
.text:0040894E                 mov     [esp+4Ch+var_1C], 407F9Eh
.text:00408956                 jmp     loc_408036
.text:0040895B ; ---------------------------------------------------------------------------
.text:0040895B
.text:0040895B loc_40895B:                             ; CODE XREF: sub_407FB0+3D↑j
.text:0040895B                                         ; DATA XREF: sub_407FB0:jpt_407FED↑o
.text:0040895B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00407FED case 4
.text:00408960                 jmp     def_407FED      ; jumptable 00407FED default case, cases 0,1
.text:00408965 ; ---------------------------------------------------------------------------
.text:00408965
.text:00408965 loc_408965:                             ; CODE XREF: sub_407FB0+3D↑j
.text:00408965                                         ; DATA XREF: sub_407FB0:jpt_407FED↑o
.text:00408965                 mov     [esp+4Ch+C], 407FA0h ; jumptable 00407FED cases 5,6
.text:0040896C                 call    ds:libintl_gettext
.text:00408972                 cmp     eax, 407FA0h
.text:00408977                 mov     edi, eax
.text:00408979                 jz      short loc_4089F0
.text:0040897B
.text:0040897B loc_40897B:                             ; CODE XREF: sub_407FB0+A45↓j
.text:0040897B                                         ; sub_407FB0+A4C↓j
.text:0040897B                 mov     [esp+4Ch+C], 407F9Eh
.text:00408982                 call    ds:libintl_gettext
.text:00408988                 cmp     eax, 407F9Eh
.text:0040898D                 mov     edx, eax
.text:0040898F                 jz      short loc_4089E2
.text:00408991
.text:00408991 loc_408991:                             ; CODE XREF: sub_407FB0+A37↓j
.text:00408991                                         ; sub_407FB0+A3E↓j
.text:00408991                 mov     [esp+4Ch+var_1C], edi
.text:00408995                 cmp     byte ptr [edi], 0
.text:00408998                 jz      short loc_4089C8
.text:0040899A
.text:0040899A loc_40899A:                             ; CODE XREF: sub_407FB0+A16↓j
.text:0040899A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040899E                 cmp     [esp+4Ch+var_34], ecx
.text:004089A2                 jnb     short loc_4089B7
.text:004089A4                 mov     ebp, [esp+4Ch+var_1C]
.text:004089A8                 mov     edi, [esp+4Ch+arg_0]
.text:004089AC                 mov     esi, [esp+4Ch+var_34]
.text:004089B0                 movzx   ebx, byte ptr [ebp+0]
.text:004089B4                 mov     [esi+edi], bl
.text:004089B7
.text:004089B7 loc_4089B7:                             ; CODE XREF: sub_407FB0+9F2↑j
.text:004089B7                 inc     [esp+4Ch+var_1C]
.text:004089BB                 inc     [esp+4Ch+var_34]
.text:004089BF                 mov     eax, [esp+4Ch+var_1C]
.text:004089C3                 cmp     byte ptr [eax], 0
.text:004089C6                 jnz     short loc_40899A
.text:004089C8
.text:004089C8 loc_4089C8:                             ; CODE XREF: sub_407FB0+9E8↑j
.text:004089C8                 mov     [esp+4Ch+var_21], 1
.text:004089CD                 mov     [esp+4Ch+var_1C], edx
.text:004089D1                 mov     [esp+4Ch+C], edx ; Str
.text:004089D4                 call    strlen
.text:004089D9                 mov     [esp+4Ch+var_20], eax
.text:004089DD                 jmp     def_407FED      ; jumptable 00407FED default case, cases 0,1
.text:004089E2 ; ---------------------------------------------------------------------------
.text:004089E2
.text:004089E2 loc_4089E2:                             ; CODE XREF: sub_407FB0+9DF↑j
.text:004089E2                 cmp     [esp+4Ch+arg_10], 6
.text:004089E7                 jnz     short loc_408991
.text:004089E9                 mov     edx, offset asc_407F9C ; "\"'`"
.text:004089EE                 jmp     short loc_408991
.text:004089F0 ; ---------------------------------------------------------------------------
.text:004089F0
.text:004089F0 loc_4089F0:                             ; CODE XREF: sub_407FB0+9C9↑j
.text:004089F0                 cmp     [esp+4Ch+arg_10], 6
.text:004089F5                 jnz     short loc_40897B
.text:004089F7                 mov     edi, offset asc_407F9C ; "\"'`"
.text:004089FC                 jmp     loc_40897B
.text:004089FC sub_407FB0      endp
.text:004089FC
.text:00408A01 ; ---------------------------------------------------------------------------
.text:00408A01                 jmp     short loc_408A10
.text:00408A01 ; ---------------------------------------------------------------------------
.text:00408A03                 align 10h
.text:00408A10
.text:00408A10 loc_408A10:                             ; CODE XREF: .text:00408A01↑j
.text:00408A10                 sub     esp, 0Ch
.text:00408A13                 mov     [esp+4], ebx
.text:00408A17                 mov     [esp+8], esi
.text:00408A1B                 call    _errno
.text:00408A20                 mov     esi, [eax]
.text:00408A22                 mov     dword ptr [esp], 24h ; '$'
.text:00408A29                 call    sub_406B60
.text:00408A2E                 mov     edx, [esp+10h]
.text:00408A32                 mov     ebx, eax
.text:00408A34                 test    edx, edx
.text:00408A36                 jz      short loc_408A81
.text:00408A38
.text:00408A38 loc_408A38:                             ; CODE XREF: .text:00408A86↓j
.text:00408A38                 mov     ecx, [edx]
.text:00408A3A                 mov     [ebx], ecx
.text:00408A3C                 mov     ecx, [edx+4]
.text:00408A3F                 mov     [ebx+4], ecx
.text:00408A42                 mov     ecx, [edx+8]
.text:00408A45                 mov     [ebx+8], ecx
.text:00408A48                 mov     ecx, [edx+0Ch]
.text:00408A4B                 mov     [ebx+0Ch], ecx
.text:00408A4E                 mov     ecx, [edx+10h]
.text:00408A51                 mov     [ebx+10h], ecx
.text:00408A54                 mov     ecx, [edx+14h]
.text:00408A57                 mov     [ebx+14h], ecx
.text:00408A5A                 mov     ecx, [edx+18h]
.text:00408A5D                 mov     [ebx+18h], ecx
.text:00408A60                 mov     ecx, [edx+1Ch]
.text:00408A63                 mov     [ebx+1Ch], ecx
.text:00408A66                 mov     ecx, [edx+20h]
.text:00408A69                 mov     [ebx+20h], ecx
.text:00408A6C                 call    _errno
.text:00408A71                 mov     [eax], esi
.text:00408A73                 mov     esi, [esp+8]
.text:00408A77                 mov     eax, ebx
.text:00408A79                 mov     ebx, [esp+4]
.text:00408A7D                 add     esp, 0Ch
.text:00408A80                 retn
.text:00408A81 ; ---------------------------------------------------------------------------
.text:00408A81
.text:00408A81 loc_408A81:                             ; CODE XREF: .text:00408A36↑j
.text:00408A81                 mov     edx, offset dword_415150
.text:00408A86                 jmp     short loc_408A38
.text:00408A86 ; ---------------------------------------------------------------------------
.text:00408A88                 align 10h
.text:00408A90                 mov     eax, [esp+4]
.text:00408A94                 test    eax, eax
.text:00408A96                 jz      short loc_408AA0
.text:00408A98
.text:00408A98 loc_408A98:                             ; CODE XREF: .text:00408AA5↓j
.text:00408A98                 mov     eax, [eax]
.text:00408A9A                 retn
.text:00408A9A ; ---------------------------------------------------------------------------
.text:00408A9B                 align 10h
.text:00408AA0
.text:00408AA0 loc_408AA0:                             ; CODE XREF: .text:00408A96↑j
.text:00408AA0                 mov     eax, offset dword_415150
.text:00408AA5                 jmp     short loc_408A98
.text:00408AA5 ; ---------------------------------------------------------------------------
.text:00408AA7                 align 10h
.text:00408AB0                 mov     edx, [esp+4]
.text:00408AB4                 test    edx, edx
.text:00408AB6                 jz      short loc_408AC0
.text:00408AB8
.text:00408AB8 loc_408AB8:                             ; CODE XREF: .text:00408AC5↓j
.text:00408AB8                 mov     ecx, [esp+8]
.text:00408ABC                 mov     [edx], ecx
.text:00408ABE                 retn
.text:00408ABE ; ---------------------------------------------------------------------------
.text:00408ABF                 align 10h
.text:00408AC0
.text:00408AC0 loc_408AC0:                             ; CODE XREF: .text:00408AB6↑j
.text:00408AC0                 mov     edx, offset dword_415150
.text:00408AC5                 jmp     short loc_408AB8
.text:00408AC5 ; ---------------------------------------------------------------------------
.text:00408AC7                 align 10h
.text:00408AD0                 sub     esp, 8
.text:00408AD3                 mov     eax, [esp+0Ch]
.text:00408AD7                 movzx   ecx, byte ptr [esp+10h]
.text:00408ADC                 mov     [esp], ebx
.text:00408ADF                 mov     ebx, [esp+14h]
.text:00408AE3                 mov     [esp+4], esi
.text:00408AE7                 mov     dl, cl
.text:00408AE9                 shr     dl, 5
.text:00408AEC                 movzx   edx, dl
.text:00408AEF                 shl     edx, 2
.text:00408AF2                 test    eax, eax
.text:00408AF4                 lea     esi, [edx+eax+4]
.text:00408AF8                 jz      short loc_408B20
.text:00408AFA
.text:00408AFA loc_408AFA:                             ; CODE XREF: .text:00408B26↓j
.text:00408AFA                 mov     edx, [esi]
.text:00408AFC                 and     ecx, 1Fh
.text:00408AFF                 and     ebx, 1
.text:00408B02                 mov     eax, edx
.text:00408B04                 shr     eax, cl
.text:00408B06                 and     eax, 1
.text:00408B09                 xor     ebx, eax
.text:00408B0B                 shl     ebx, cl
.text:00408B0D                 xor     edx, ebx
.text:00408B0F                 mov     [esi], edx
.text:00408B11                 mov     ebx, [esp]
.text:00408B14                 mov     esi, [esp+4]
.text:00408B18                 add     esp, 8
.text:00408B1B                 retn
.text:00408B1B ; ---------------------------------------------------------------------------
.text:00408B1C                 align 10h
.text:00408B20
.text:00408B20 loc_408B20:                             ; CODE XREF: .text:00408AF8↑j
.text:00408B20                 lea     esi, dword_415154[edx]
.text:00408B26                 jmp     short loc_408AFA
.text:00408B26 ; ---------------------------------------------------------------------------
.text:00408B28                 align 10h
.text:00408B30                 sub     esp, 2Ch
.text:00408B33                 mov     [esp+24h], ebx
.text:00408B37                 mov     ebx, [esp+40h]
.text:00408B3B                 mov     [esp+28h], esi
.text:00408B3F                 test    ebx, ebx
.text:00408B41                 jz      short loc_408B90
.text:00408B43
.text:00408B43 loc_408B43:                             ; CODE XREF: .text:00408B95↓j
.text:00408B43                 call    _errno
.text:00408B48                 mov     esi, [eax]
.text:00408B4A                 mov     [esp+14h], ebx
.text:00408B4E                 mov     edx, [ebx]
.text:00408B50                 mov     ecx, [esp+38h]
.text:00408B54                 mov     ebx, [esp+3Ch]
.text:00408B58                 mov     [esp+10h], edx
.text:00408B5C                 mov     edx, [esp+34h]
.text:00408B60                 mov     [esp+0Ch], ebx
.text:00408B64                 mov     [esp+8], ecx
.text:00408B68                 mov     [esp+4], edx
.text:00408B6C                 mov     edx, [esp+30h]
.text:00408B70                 mov     [esp], edx
.text:00408B73                 call    sub_407FB0
.text:00408B78                 mov     ebx, eax
.text:00408B7A                 call    _errno
.text:00408B7F                 mov     [eax], esi
.text:00408B81                 mov     esi, [esp+28h]
.text:00408B85                 mov     eax, ebx
.text:00408B87                 mov     ebx, [esp+24h]
.text:00408B8B                 add     esp, 2Ch
.text:00408B8E                 retn
.text:00408B8E ; ---------------------------------------------------------------------------
.text:00408B8F                 align 10h
.text:00408B90
.text:00408B90 loc_408B90:                             ; CODE XREF: .text:00408B41↑j
.text:00408B90                 mov     ebx, offset dword_415150
.text:00408B95                 jmp     short loc_408B43
.text:00408B95 ; ---------------------------------------------------------------------------
.text:00408B97                 align 10h
.text:00408BA0                 push    ebp
.text:00408BA1                 push    edi
.text:00408BA2                 push    esi
.text:00408BA3                 push    ebx
.text:00408BA4                 sub     esp, 2Ch
.text:00408BA7                 mov     ebp, [esp+48h]
.text:00408BAB                 call    _errno
.text:00408BB0                 mov     edx, [eax]
.text:00408BB2                 test    ebp, ebp
.text:00408BB4                 mov     ebx, ebp
.text:00408BB6                 mov     [esp+28h], edx
.text:00408BBA                 jz      loc_408C70
.text:00408BC0
.text:00408BC0 loc_408BC0:                             ; CODE XREF: .text:00408C75↓j
.text:00408BC0                 call    _errno
.text:00408BC5                 mov     edi, [eax]
.text:00408BC7                 mov     esi, ebp
.text:00408BC9                 mov     [esp+14h], ebx
.text:00408BCD                 mov     ecx, [ebx]
.text:00408BCF                 mov     dword ptr [esp], 0
.text:00408BD6                 mov     edx, [esp+44h]
.text:00408BDA                 mov     dword ptr [esp+4], 0
.text:00408BE2                 mov     eax, [esp+40h]
.text:00408BE6                 mov     [esp+10h], ecx
.text:00408BEA                 mov     [esp+0Ch], edx
.text:00408BEE                 mov     [esp+8], eax
.text:00408BF2                 call    sub_407FB0
.text:00408BF7                 mov     ebx, eax
.text:00408BF9                 call    _errno
.text:00408BFE                 mov     [eax], edi
.text:00408C00                 lea     edi, [ebx+1]
.text:00408C03                 mov     [esp], edi
.text:00408C06                 call    sub_406B60
.text:00408C0B                 mov     [esp+24h], eax
.text:00408C0F                 test    ebp, ebp
.text:00408C11                 jz      short loc_408C62
.text:00408C13
.text:00408C13 loc_408C13:                             ; CODE XREF: .text:00408C67↓j
.text:00408C13                 call    _errno
.text:00408C18                 mov     ebp, [eax]
.text:00408C1A                 mov     [esp+14h], esi
.text:00408C1E                 mov     ecx, [esi]
.text:00408C20                 mov     [esp+4], edi
.text:00408C24                 mov     edx, [esp+44h]
.text:00408C28                 mov     esi, [esp+24h]
.text:00408C2C                 mov     [esp+10h], ecx
.text:00408C30                 mov     eax, [esp+40h]
.text:00408C34                 mov     [esp+0Ch], edx
.text:00408C38                 mov     [esp], esi
.text:00408C3B                 mov     [esp+8], eax
.text:00408C3F                 call    sub_407FB0
.text:00408C44                 call    _errno
.text:00408C49                 mov     [eax], ebp
.text:00408C4B                 call    _errno
.text:00408C50                 mov     ebx, [esp+28h]
.text:00408C54                 mov     [eax], ebx
.text:00408C56                 mov     eax, [esp+24h]
.text:00408C5A                 add     esp, 2Ch
.text:00408C5D                 pop     ebx
.text:00408C5E                 pop     esi
.text:00408C5F                 pop     edi
.text:00408C60                 pop     ebp
.text:00408C61                 retn
.text:00408C62 ; ---------------------------------------------------------------------------
.text:00408C62
.text:00408C62 loc_408C62:                             ; CODE XREF: .text:00408C11↑j
.text:00408C62                 mov     esi, offset dword_415150
.text:00408C67                 jmp     short loc_408C13
.text:00408C67 ; ---------------------------------------------------------------------------
.text:00408C69                 align 10h
.text:00408C70
.text:00408C70 loc_408C70:                             ; CODE XREF: .text:00408BBA↑j
.text:00408C70                 mov     ebx, offset dword_415150
.text:00408C75                 jmp     loc_408BC0
.text:00408C75 ; ---------------------------------------------------------------------------
.text:00408C7A                 align 10h
.text:00408C80                 sub     esp, 1Ch
.text:00408C83                 mov     edx, [esp+24h]
.text:00408C87                 mov     dword ptr [esp+0Ch], offset dword_415150
.text:00408C8F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408C97                 mov     [esp+4], edx
.text:00408C9B                 mov     edx, [esp+20h]
.text:00408C9F                 mov     [esp], edx
.text:00408CA2                 call    sub_4090F0
.text:00408CA7                 add     esp, 1Ch
.text:00408CAA                 retn
.text:00408CAA ; ---------------------------------------------------------------------------
.text:00408CAB                 align 10h
.text:00408CB0                 sub     esp, 1Ch
.text:00408CB3                 mov     edx, [esp+20h]
.text:00408CB7                 mov     dword ptr [esp+0Ch], offset dword_415150
.text:00408CBF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408CC7                 mov     [esp+4], edx
.text:00408CCB                 mov     dword ptr [esp], 0
.text:00408CD2                 call    sub_4090F0
.text:00408CD7                 add     esp, 1Ch
.text:00408CDA                 retn
.text:00408CDA ; ---------------------------------------------------------------------------
.text:00408CDB                 align 10h
.text:00408CE0
.text:00408CE0 ; =============== S U B R O U T I N E =======================================
.text:00408CE0
.text:00408CE0
.text:00408CE0 ; int __cdecl sub_408CE0(int, int, char *)
.text:00408CE0 sub_408CE0      proc near               ; CODE XREF: sub_4064E0+1A↑p
.text:00408CE0                                         ; sub_406510+1A↑p
.text:00408CE0
.text:00408CE0 var_BC          = dword ptr -0BCh
.text:00408CE0 var_B8          = dword ptr -0B8h
.text:00408CE0 var_B4          = dword ptr -0B4h
.text:00408CE0 var_B0          = dword ptr -0B0h
.text:00408CE0 var_AC          = dword ptr -0ACh
.text:00408CE0 var_A8          = dword ptr -0A8h
.text:00408CE0 var_A4          = dword ptr -0A4h
.text:00408CE0 var_A0          = dword ptr -0A0h
.text:00408CE0 var_9C          = dword ptr -9Ch
.text:00408CE0 var_98          = dword ptr -98h
.text:00408CE0 var_94          = dword ptr -94h
.text:00408CE0 var_90          = dword ptr -90h
.text:00408CE0 var_8C          = dword ptr -8Ch
.text:00408CE0 var_7C          = dword ptr -7Ch
.text:00408CE0 var_78          = dword ptr -78h
.text:00408CE0 var_74          = dword ptr -74h
.text:00408CE0 var_70          = dword ptr -70h
.text:00408CE0 var_6C          = dword ptr -6Ch
.text:00408CE0 var_68          = dword ptr -68h
.text:00408CE0 var_64          = dword ptr -64h
.text:00408CE0 var_60          = dword ptr -60h
.text:00408CE0 var_5C          = dword ptr -5Ch
.text:00408CE0 var_4C          = dword ptr -4Ch
.text:00408CE0 var_48          = dword ptr -48h
.text:00408CE0 var_44          = dword ptr -44h
.text:00408CE0 var_40          = dword ptr -40h
.text:00408CE0 var_3C          = dword ptr -3Ch
.text:00408CE0 var_38          = dword ptr -38h
.text:00408CE0 var_34          = dword ptr -34h
.text:00408CE0 var_30          = dword ptr -30h
.text:00408CE0 var_2C          = dword ptr -2Ch
.text:00408CE0 arg_0           = dword ptr  4
.text:00408CE0 arg_4           = dword ptr  8
.text:00408CE0 arg_8           = dword ptr  0Ch
.text:00408CE0
.text:00408CE0                 push    ebp
.text:00408CE1                 xor     eax, eax
.text:00408CE3                 mov     ecx, 8
.text:00408CE8                 push    edi
.text:00408CE9                 push    esi
.text:00408CEA                 push    ebx
.text:00408CEB                 sub     esp, 0ACh
.text:00408CF1                 mov     ebp, [esp+0BCh+arg_4]
.text:00408CF8                 cld
.text:00408CF9                 lea     edi, [esp+0BCh+var_A8]
.text:00408CFD                 mov     [esp+0BCh+var_AC], ebp
.text:00408D01                 rep stosd
.text:00408D03                 mov     eax, [esp+0BCh+var_8C]
.text:00408D07                 mov     edi, [esp+0BCh+var_AC]
.text:00408D0B                 mov     esi, [esp+0BCh+var_A8]
.text:00408D0F                 mov     [esp+0BCh+var_5C], eax
.text:00408D13                 mov     ebp, [esp+0BCh+var_A4]
.text:00408D17                 mov     eax, [esp+0BCh+var_AC]
.text:00408D1B                 mov     [esp+0BCh+var_7C], edi
.text:00408D1F                 mov     ecx, [esp+0BCh+var_94]
.text:00408D23                 mov     edi, [esp+0BCh+var_A0]
.text:00408D27                 mov     [esp+0BCh+var_78], esi
.text:00408D2B                 mov     edx, [esp+0BCh+var_90]
.text:00408D2F                 mov     esi, [esp+0BCh+var_9C]
.text:00408D33                 mov     [esp+0BCh+var_4C], eax
.text:00408D37                 mov     ebx, [esp+0BCh+var_98]
.text:00408D3B                 mov     eax, [esp+0BCh+var_A8]
.text:00408D3F                 mov     [esp+0BCh+var_74], ebp
.text:00408D43                 mov     [esp+0BCh+var_70], edi
.text:00408D47                 mov     [esp+0BCh+var_6C], esi
.text:00408D4B                 mov     [esp+0BCh+var_68], ebx
.text:00408D4F                 mov     [esp+0BCh+var_64], ecx
.text:00408D53                 mov     [esp+0BCh+var_60], edx
.text:00408D57                 mov     [esp+0BCh+var_48], eax
.text:00408D5B                 mov     [esp+0BCh+var_44], ebp
.text:00408D5F                 mov     [esp+0BCh+var_40], edi
.text:00408D63                 mov     [esp+0BCh+var_3C], esi
.text:00408D6A                 mov     [esp+0BCh+var_38], ebx
.text:00408D71                 mov     ebx, [esp+0BCh+var_8C]
.text:00408D75                 mov     [esp+0BCh+var_30], edx
.text:00408D7C                 mov     edx, [esp+0BCh+arg_8]
.text:00408D83                 mov     [esp+0BCh+var_34], ecx
.text:00408D8A                 lea     ecx, [esp+0BCh+var_4C]
.text:00408D8E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00408D92                 mov     edx, [esp+0BCh+arg_0]
.text:00408D99                 mov     [esp+0BCh+var_2C], ebx
.text:00408DA0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00408DA4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00408DAC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00408DAF                 call    sub_4090F0
.text:00408DB4                 add     esp, 0ACh
.text:00408DBA                 pop     ebx
.text:00408DBB                 pop     esi
.text:00408DBC                 pop     edi
.text:00408DBD                 pop     ebp
.text:00408DBE                 retn
.text:00408DBE sub_408CE0      endp
.text:00408DBE
.text:00408DBE ; ---------------------------------------------------------------------------
.text:00408DBF                 align 10h
.text:00408DC0                 push    ebp
.text:00408DC1                 xor     eax, eax
.text:00408DC3                 mov     ecx, 8
.text:00408DC8                 push    edi
.text:00408DC9                 push    esi
.text:00408DCA                 push    ebx
.text:00408DCB                 sub     esp, 0ACh
.text:00408DD1                 mov     edx, [esp+0C4h]
.text:00408DD8                 cld
.text:00408DD9                 lea     edi, [esp+14h]
.text:00408DDD                 mov     [esp+10h], edx
.text:00408DE1                 rep stosd
.text:00408DE3                 mov     eax, [esp+30h]
.text:00408DE7                 mov     ebp, [esp+10h]
.text:00408DEB                 mov     edi, [esp+14h]
.text:00408DEF                 mov     [esp+60h], eax
.text:00408DF3                 mov     esi, [esp+20h]
.text:00408DF7                 mov     eax, [esp+10h]
.text:00408DFB                 mov     [esp+40h], ebp
.text:00408DFF                 mov     ecx, [esp+28h]
.text:00408E03                 mov     ebp, [esp+18h]
.text:00408E07                 mov     [esp+44h], edi
.text:00408E0B                 mov     edx, [esp+2Ch]
.text:00408E0F                 mov     edi, [esp+1Ch]
.text:00408E13                 mov     [esp+70h], eax
.text:00408E17                 mov     ebx, [esp+24h]
.text:00408E1B                 mov     eax, [esp+14h]
.text:00408E1F                 mov     [esp+48h], ebp
.text:00408E23                 mov     [esp+4Ch], edi
.text:00408E27                 mov     [esp+50h], esi
.text:00408E2B                 mov     [esp+54h], ebx
.text:00408E2F                 mov     [esp+58h], ecx
.text:00408E33                 mov     [esp+5Ch], edx
.text:00408E37                 mov     [esp+74h], eax
.text:00408E3B                 mov     [esp+78h], ebp
.text:00408E3F                 mov     [esp+7Ch], edi
.text:00408E43                 mov     [esp+80h], esi
.text:00408E4A                 mov     [esp+84h], ebx
.text:00408E51                 mov     esi, [esp+30h]
.text:00408E55                 lea     ebx, [esp+70h]
.text:00408E59                 mov     [esp+8Ch], edx
.text:00408E60                 mov     edx, [esp+0C8h]
.text:00408E67                 mov     [esp+88h], ecx
.text:00408E6E                 mov     ecx, [esp+0CCh]
.text:00408E75                 mov     [esp+4], edx
.text:00408E79                 mov     edx, [esp+0C0h]
.text:00408E80                 mov     [esp+90h], esi
.text:00408E87                 mov     [esp+0Ch], ebx
.text:00408E8B                 mov     [esp+8], ecx
.text:00408E8F                 mov     [esp], edx
.text:00408E92                 call    sub_4090F0
.text:00408E97                 add     esp, 0ACh
.text:00408E9D                 pop     ebx
.text:00408E9E                 pop     esi
.text:00408E9F                 pop     edi
.text:00408EA0                 pop     ebp
.text:00408EA1                 retn
.text:00408EA1 ; ---------------------------------------------------------------------------
.text:00408EA2                 align 10h
.text:00408EB0                 push    ebp
.text:00408EB1                 xor     eax, eax
.text:00408EB3                 mov     ecx, 8
.text:00408EB8                 push    edi
.text:00408EB9                 push    esi
.text:00408EBA                 push    ebx
.text:00408EBB                 sub     esp, 0ACh
.text:00408EC1                 mov     edi, [esp+0C0h]
.text:00408EC8                 cld
.text:00408EC9                 mov     [esp+10h], edi
.text:00408ECD                 lea     edi, [esp+14h]
.text:00408ED1                 rep stosd
.text:00408ED3                 mov     eax, [esp+30h]
.text:00408ED7                 mov     esi, [esp+10h]
.text:00408EDB                 mov     ebx, [esp+14h]
.text:00408EDF                 mov     [esp+60h], eax
.text:00408EE3                 mov     ebp, [esp+18h]
.text:00408EE7                 mov     eax, [esp+10h]
.text:00408EEB                 mov     [esp+40h], esi
.text:00408EEF                 mov     edi, [esp+1Ch]
.text:00408EF3                 mov     esi, [esp+20h]
.text:00408EF7                 mov     [esp+44h], ebx
.text:00408EFB                 mov     ecx, [esp+28h]
.text:00408EFF                 mov     edx, [esp+2Ch]
.text:00408F03                 mov     [esp+70h], eax
.text:00408F07                 mov     ebx, [esp+24h]
.text:00408F0B                 mov     eax, [esp+14h]
.text:00408F0F                 mov     [esp+48h], ebp
.text:00408F13                 mov     [esp+4Ch], edi
.text:00408F17                 mov     [esp+50h], esi
.text:00408F1B                 mov     [esp+54h], ebx
.text:00408F1F                 mov     [esp+58h], ecx
.text:00408F23                 mov     [esp+5Ch], edx
.text:00408F27                 mov     [esp+74h], eax
.text:00408F2B                 mov     [esp+78h], ebp
.text:00408F2F                 mov     [esp+7Ch], edi
.text:00408F33                 mov     [esp+80h], esi
.text:00408F3A                 mov     [esp+84h], ebx
.text:00408F41                 mov     [esp+8Ch], edx
.text:00408F48                 lea     edx, [esp+70h]
.text:00408F4C                 mov     [esp+88h], ecx
.text:00408F53                 mov     ecx, [esp+30h]
.text:00408F57                 mov     [esp+0Ch], edx
.text:00408F5B                 mov     edx, [esp+0C4h]
.text:00408F62                 mov     [esp+90h], ecx
.text:00408F69                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408F71                 mov     [esp+4], edx
.text:00408F75                 mov     dword ptr [esp], 0
.text:00408F7C                 call    sub_4090F0
.text:00408F81                 add     esp, 0ACh
.text:00408F87                 pop     ebx
.text:00408F88                 pop     esi
.text:00408F89                 pop     edi
.text:00408F8A                 pop     ebp
.text:00408F8B                 retn
.text:00408F8B ; ---------------------------------------------------------------------------
.text:00408F8C                 align 10h
.text:00408F90                 push    edi
.text:00408F91                 push    esi
.text:00408F92                 push    ebx
.text:00408F93                 sub     esp, 40h
.text:00408F96                 mov     edx, ds:dword_41515C
.text:00408F9C                 mov     ebx, ds:dword_415150
.text:00408FA2                 mov     esi, ds:dword_415158
.text:00408FA8                 mov     edi, ds:dword_415154
.text:00408FAE                 mov     [esp+1Ch], edx
.text:00408FB2                 mov     ecx, ds:dword_415160
.text:00408FB8                 mov     edx, ds:dword_415170
.text:00408FBE                 mov     [esp+10h], ebx
.text:00408FC2                 mov     ebx, ds:dword_415164
.text:00408FC8                 mov     [esp+30h], edx
.text:00408FCC                 movzx   edx, byte ptr [esp+54h]
.text:00408FD1                 mov     [esp+18h], esi
.text:00408FD5                 mov     esi, ds:dword_41516C
.text:00408FDB                 mov     [esp+14h], edi
.text:00408FDF                 mov     edi, ds:dword_415168
.text:00408FE5                 mov     [esp+20h], ecx
.text:00408FE9                 mov     cl, dl
.text:00408FEB                 shr     cl, 5
.text:00408FEE                 mov     [esp+24h], ebx
.text:00408FF2                 movzx   ebx, cl
.text:00408FF5                 mov     [esp+2Ch], esi
.text:00408FF9                 lea     esi, [esp+10h]
.text:00408FFD                 mov     [esp+28h], edi
.text:00409001                 lea     edi, [esi+ebx*4]
.text:00409004                 mov     ebx, edx
.text:00409006                 mov     edx, [edi+4]
.text:00409009                 and     ebx, 1Fh
.text:0040900C                 mov     cl, bl
.text:0040900E                 mov     eax, edx
.text:00409010                 shr     eax, cl
.text:00409012                 and     eax, 1
.text:00409015                 xor     eax, 1
.text:00409018                 shl     eax, cl
.text:0040901A                 xor     edx, eax
.text:0040901C                 mov     [edi+4], edx
.text:0040901F                 mov     edx, [esp+50h]
.text:00409023                 mov     [esp+0Ch], esi
.text:00409027                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040902F                 mov     [esp+4], edx
.text:00409033                 mov     dword ptr [esp], 0
.text:0040903A                 call    sub_4090F0
.text:0040903F                 add     esp, 40h
.text:00409042                 pop     ebx
.text:00409043                 pop     esi
.text:00409044                 pop     edi
.text:00409045                 retn
.text:00409045 ; ---------------------------------------------------------------------------
.text:00409046                 align 10h
.text:00409050
.text:00409050 ; =============== S U B R O U T I N E =======================================
.text:00409050
.text:00409050
.text:00409050 ; int __cdecl sub_409050(char *)
.text:00409050 sub_409050      proc near               ; CODE XREF: sub_406400+64↑p
.text:00409050
.text:00409050 var_4C          = dword ptr -4Ch
.text:00409050 var_48          = dword ptr -48h
.text:00409050 var_44          = dword ptr -44h
.text:00409050 var_40          = dword ptr -40h
.text:00409050 var_3C          = dword ptr -3Ch
.text:00409050 var_38          = dword ptr -38h
.text:00409050 var_34          = dword ptr -34h
.text:00409050 var_30          = dword ptr -30h
.text:00409050 var_2C          = dword ptr -2Ch
.text:00409050 var_28          = dword ptr -28h
.text:00409050 var_24          = dword ptr -24h
.text:00409050 var_20          = dword ptr -20h
.text:00409050 var_1C          = dword ptr -1Ch
.text:00409050 arg_0           = dword ptr  4
.text:00409050
.text:00409050                 sub     esp, 4Ch
.text:00409053                 mov     ecx, ds:dword_415150
.text:00409059                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00409061                 mov     edx, ds:dword_415154
.text:00409067                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040906E                 mov     [esp+4Ch+var_3C], ecx
.text:00409072                 mov     ecx, ds:dword_41515C
.text:00409078                 mov     [esp+4Ch+var_38], edx
.text:0040907C                 mov     edx, ds:dword_415158
.text:00409082                 mov     [esp+4Ch+var_30], ecx
.text:00409086                 mov     ecx, ds:dword_415160
.text:0040908C                 mov     eax, edx
.text:0040908E                 shr     eax, 1Ah
.text:00409091                 and     eax, 1
.text:00409094                 xor     eax, 1
.text:00409097                 mov     [esp+4Ch+var_2C], ecx
.text:0040909B                 shl     eax, 1Ah
.text:0040909E                 mov     ecx, ds:dword_415164
.text:004090A4                 xor     edx, eax
.text:004090A6                 mov     [esp+4Ch+var_34], edx
.text:004090AA                 mov     edx, [esp+4Ch+arg_0]
.text:004090AE                 mov     [esp+4Ch+var_28], ecx
.text:004090B2                 mov     ecx, ds:dword_415168
.text:004090B8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004090BC                 mov     [esp+4Ch+var_24], ecx
.text:004090C0                 mov     ecx, ds:dword_41516C
.text:004090C6                 mov     [esp+4Ch+var_20], ecx
.text:004090CA                 mov     ecx, ds:dword_415170
.text:004090D0                 mov     [esp+4Ch+var_1C], ecx
.text:004090D4                 lea     ecx, [esp+4Ch+var_3C]
.text:004090D8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004090DC                 call    sub_4090F0
.text:004090E1                 add     esp, 4Ch
.text:004090E4                 retn
.text:004090E4 sub_409050      endp
.text:004090E4
.text:004090E4 ; ---------------------------------------------------------------------------
.text:004090E5                 align 10h
.text:004090F0
.text:004090F0 ; =============== S U B R O U T I N E =======================================
.text:004090F0
.text:004090F0
.text:004090F0 ; int __cdecl sub_4090F0(int, char *, int, int)
.text:004090F0 sub_4090F0      proc near               ; CODE XREF: .text:00408CA2↑p
.text:004090F0                                         ; .text:00408CD2↑p ...
.text:004090F0
.text:004090F0 Block           = dword ptr -2Ch
.text:004090F0 var_28          = dword ptr -28h
.text:004090F0 Str             = dword ptr -24h
.text:004090F0 var_20          = dword ptr -20h
.text:004090F0 var_1C          = dword ptr -1Ch
.text:004090F0 var_18          = dword ptr -18h
.text:004090F0 var_14          = dword ptr -14h
.text:004090F0 arg_0           = dword ptr  4
.text:004090F0 arg_4           = dword ptr  8
.text:004090F0 arg_8           = dword ptr  0Ch
.text:004090F0 arg_C           = dword ptr  10h
.text:004090F0
.text:004090F0                 push    ebp
.text:004090F1                 push    edi
.text:004090F2                 push    esi
.text:004090F3                 push    ebx
.text:004090F4                 sub     esp, 1Ch
.text:004090F7                 call    _errno
.text:004090FC                 mov     edx, [eax]
.text:004090FE                 mov     eax, [esp+2Ch+arg_0]
.text:00409102                 mov     [esp+2Ch+var_14], edx
.text:00409106                 test    eax, eax
.text:00409108                 js      loc_4092AA
.text:0040910E                 mov     eax, [esp+2Ch+arg_0]
.text:00409112                 cmp     dword_414040, eax
.text:00409118                 ja      short loc_409190
.text:0040911A                 mov     esi, eax
.text:0040911C                 inc     esi
.text:0040911D                 cmp     esi, 1FFFFFFFh
.text:00409123                 ja      loc_4092AF
.text:00409129                 mov     ebx, off_41404C
.text:0040912F                 cmp     ebx, offset dword_414044
.text:00409135                 jz      loc_409281
.text:0040913B
.text:0040913B loc_40913B:                             ; CODE XREF: sub_4090F0+1B5↓j
.text:0040913B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040913E                 lea     ecx, ds:0[esi*8]
.text:00409145                 mov     ebp, esi
.text:00409147                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040914B                 call    sub_406BF0
.text:00409150                 mov     off_41404C, eax
.text:00409155                 mov     ebx, dword_414040
.text:0040915B                 sub     ebp, ebx
.text:0040915D                 lea     edi, [eax+ebx*8]
.text:00409160                 lea     eax, ds:0[ebp*8]
.text:00409167                 cmp     eax, 7
.text:0040916A                 jbe     short loc_409180
.text:0040916C                 test    edi, 4
.text:00409172                 jz      short loc_409180
.text:00409174                 mov     dword ptr [edi], 0
.text:0040917A                 sub     eax, 4
.text:0040917D                 add     edi, 4
.text:00409180
.text:00409180 loc_409180:                             ; CODE XREF: sub_4090F0+7A↑j
.text:00409180                                         ; sub_4090F0+82↑j
.text:00409180                 cld
.text:00409181                 mov     ecx, eax
.text:00409183                 shr     ecx, 2
.text:00409186                 xor     eax, eax
.text:00409188                 rep stosd
.text:0040918A                 mov     dword_414040, esi
.text:00409190
.text:00409190 loc_409190:                             ; CODE XREF: sub_4090F0+28↑j
.text:00409190                 mov     esi, off_41404C
.text:00409196                 mov     eax, [esp+2Ch+arg_0]
.text:0040919A                 mov     ebp, [esi+eax*8]
.text:0040919D                 mov     edi, [esi+eax*8+4]
.text:004091A1                 mov     esi, [esp+2Ch+arg_C]
.text:004091A5                 test    esi, esi
.text:004091A7                 jz      loc_409277
.text:004091AD
.text:004091AD loc_4091AD:                             ; CODE XREF: sub_4090F0+18C↓j
.text:004091AD                 call    _errno
.text:004091B2                 mov     ebx, [eax]
.text:004091B4                 mov     [esp+2Ch+var_18], esi ; int
.text:004091B8                 mov     ecx, [esi]
.text:004091BA                 mov     [esp+2Ch+Block], edi ; int
.text:004091BD                 mov     edx, [esp+2Ch+arg_8]
.text:004091C1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004091C5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004091C9                 mov     ecx, [esp+2Ch+arg_4]
.text:004091CD                 mov     [esp+2Ch+var_20], edx ; int
.text:004091D1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004091D5                 call    sub_407FB0
.text:004091DA                 mov     esi, eax
.text:004091DC                 call    _errno
.text:004091E1                 mov     [eax], ebx
.text:004091E3                 cmp     ebp, esi
.text:004091E5                 ja      short loc_40925B
.text:004091E7                 lea     ebp, [esi+1]
.text:004091EA                 mov     ebx, off_41404C
.text:004091F0                 cmp     edi, offset unk_415050
.text:004091F6                 mov     esi, [esp+2Ch+arg_0]
.text:004091FA                 mov     [ebx+esi*8], ebp
.text:004091FD                 jz      short loc_40920D
.text:004091FF                 mov     [esp+2Ch+Block], edi ; Block
.text:00409202                 call    free
.text:00409207                 mov     ebx, off_41404C
.text:0040920D
.text:0040920D loc_40920D:                             ; CODE XREF: sub_4090F0+10D↑j
.text:0040920D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00409210                 call    sub_406B60
.text:00409215                 mov     esi, [esp+2Ch+arg_C]
.text:00409219                 mov     edi, eax
.text:0040921B                 mov     eax, [esp+2Ch+arg_0]
.text:0040921F                 test    esi, esi
.text:00409221                 mov     [ebx+eax*8+4], edi
.text:00409225                 jz      short loc_409270
.text:00409227
.text:00409227 loc_409227:                             ; CODE XREF: sub_4090F0+185↓j
.text:00409227                 call    _errno
.text:0040922C                 mov     ebx, [eax]
.text:0040922E                 mov     [esp+2Ch+var_18], esi ; int
.text:00409232                 mov     ecx, [esi]
.text:00409234                 mov     [esp+2Ch+Block], edi ; int
.text:00409237                 mov     edx, [esp+2Ch+arg_8]
.text:0040923B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040923F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00409243                 mov     ecx, [esp+2Ch+arg_4]
.text:00409247                 mov     [esp+2Ch+var_20], edx ; int
.text:0040924B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040924F                 call    sub_407FB0
.text:00409254                 call    _errno
.text:00409259                 mov     [eax], ebx
.text:0040925B
.text:0040925B loc_40925B:                             ; CODE XREF: sub_4090F0+F5↑j
.text:0040925B                 call    _errno
.text:00409260                 mov     ebp, [esp+2Ch+var_14]
.text:00409264                 mov     [eax], ebp
.text:00409266                 add     esp, 1Ch
.text:00409269                 mov     eax, edi
.text:0040926B                 pop     ebx
.text:0040926C                 pop     esi
.text:0040926D                 pop     edi
.text:0040926E                 pop     ebp
.text:0040926F                 retn
.text:00409270 ; ---------------------------------------------------------------------------
.text:00409270
.text:00409270 loc_409270:                             ; CODE XREF: sub_4090F0+135↑j
.text:00409270                 mov     esi, offset dword_415150
.text:00409275                 jmp     short loc_409227
.text:00409277 ; ---------------------------------------------------------------------------
.text:00409277
.text:00409277 loc_409277:                             ; CODE XREF: sub_4090F0+B7↑j
.text:00409277                 mov     esi, offset dword_415150
.text:0040927C                 jmp     loc_4091AD
.text:00409281 ; ---------------------------------------------------------------------------
.text:00409281
.text:00409281 loc_409281:                             ; CODE XREF: sub_4090F0+45↑j
.text:00409281                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00409288                 call    sub_406B60
.text:0040928D                 mov     off_41404C, eax
.text:00409292                 mov     edi, dword_414044
.text:00409298                 mov     ebx, eax
.text:0040929A                 mov     ecx, off_414048
.text:004092A0                 mov     [eax], edi
.text:004092A2                 mov     [eax+4], ecx
.text:004092A5                 jmp     loc_40913B
.text:004092AA ; ---------------------------------------------------------------------------
.text:004092AA
.text:004092AA loc_4092AA:                             ; CODE XREF: sub_4090F0+18↑j
.text:004092AA                 call    abort
.text:004092AF ; ---------------------------------------------------------------------------
.text:004092AF
.text:004092AF loc_4092AF:                             ; CODE XREF: sub_4090F0+33↑j
.text:004092AF                 call    sub_407EE0
.text:004092AF sub_4090F0      endp
.text:004092AF
.text:004092AF ; ---------------------------------------------------------------------------
.text:004092B4                 align 10h
.text:004092C0
.text:004092C0 ; =============== S U B R O U T I N E =======================================
.text:004092C0
.text:004092C0 ; Attributes: thunk
.text:004092C0
.text:004092C0 libintl_bindtextdomain proc near
.text:004092C0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004092C0 libintl_bindtextdomain endp
.text:004092C0
.text:004092C0 ; ---------------------------------------------------------------------------
.text:004092C6                 align 10h
.text:004092D0                 jmp     ds:libintl_textdomain
.text:004092D0 ; ---------------------------------------------------------------------------
.text:004092D6                 align 10h
.text:004092E0                 jmp     ds:libintl_gettext
.text:004092E0 ; ---------------------------------------------------------------------------
.text:004092E6                 align 10h
.text:004092F0 ; const char aS_0[]
.text:004092F0 aS_0            db ': %s',0             ; DATA XREF: sub_409310+B8↓o
.text:004092F0                                         ; sub_409414+122↓o
.text:004092F5 aUnknownSystemE db 'Unknown system error',0
.text:004092F5                                         ; DATA XREF: sub_409310:loc_4093DD↓o
.text:004092F5                                         ; sub_409414:loc_40954E↓o
.text:0040930A ; const char aS_1[]
.text:0040930A aS_1            db '%s: ',0             ; DATA XREF: sub_409310:loc_4093E4↓o
.text:0040930F                 align 10h
.text:00409310
.text:00409310 ; =============== S U B R O U T I N E =======================================
.text:00409310
.text:00409310
.text:00409310 ; int __cdecl sub_409310(int Code, int ErrorMessage, char *, char)
.text:00409310 sub_409310      proc near               ; CODE XREF: sub_401BF0+4AC↑p
.text:00409310                                         ; sub_401BF0+528↑p ...
.text:00409310
.text:00409310 Stream          = dword ptr -1Ch
.text:00409310 Format          = dword ptr -18h
.text:00409310 ArgList         = dword ptr -14h
.text:00409310 Code            = dword ptr  4
.text:00409310 ErrorMessage    = dword ptr  8
.text:00409310 arg_8           = dword ptr  0Ch
.text:00409310 arg_C           = byte ptr  10h
.text:00409310
.text:00409310                 push    esi
.text:00409311                 push    ebx
.text:00409312                 sub     esp, 14h
.text:00409315                 mov     edx, ds:_iob
.text:0040931B                 mov     esi, [esp+1Ch+Code]
.text:0040931F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00409323                 add     edx, 20h ; ' '
.text:00409326                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409329                 call    fflush
.text:0040932E                 mov     eax, ds:dword_415A80
.text:00409333                 test    eax, eax
.text:00409335                 jz      loc_4093E4
.text:0040933B                 call    eax ; dword_415A80
.text:0040933D
.text:0040933D loc_40933D:                             ; CODE XREF: sub_409310+F7↓j
.text:0040933D                 lea     edx, [esp+1Ch+arg_C]
.text:00409341                 mov     ecx, [esp+1Ch+arg_8]
.text:00409345                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00409349                 mov     edx, ds:_iob
.text:0040934F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00409353                 add     edx, 40h ; '@'
.text:00409356                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409359                 call    vfprintf
.text:0040935E                 inc     ds:dword_415A90
.text:00409364                 test    ebx, ebx
.text:00409366                 jnz     short loc_4093B2
.text:00409368
.text:00409368 loc_409368:                             ; CODE XREF: sub_409310+CB↓j
.text:00409368                 mov     edx, ds:_iob
.text:0040936E                 lea     ecx, [edx+40h]
.text:00409371                 mov     ebx, [ecx+4]
.text:00409374                 dec     ebx
.text:00409375                 test    ebx, ebx
.text:00409377                 mov     [ecx+4], ebx
.text:0040937A                 js      short loc_4093A0
.text:0040937C                 mov     ecx, [edx+40h]
.text:0040937F                 mov     byte ptr [ecx], 0Ah
.text:00409382                 inc     dword ptr [edx+40h]
.text:00409385
.text:00409385 loc_409385:                             ; CODE XREF: sub_409310+A0↓j
.text:00409385                 mov     edx, ds:_iob
.text:0040938B                 add     edx, 40h ; '@'
.text:0040938E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409391                 call    fflush
.text:00409396                 test    esi, esi
.text:00409398                 jnz     short loc_40940C
.text:0040939A                 add     esp, 14h
.text:0040939D                 pop     ebx
.text:0040939E                 pop     esi
.text:0040939F                 retn
.text:004093A0 ; ---------------------------------------------------------------------------
.text:004093A0
.text:004093A0 loc_4093A0:                             ; CODE XREF: sub_409310+6A↑j
.text:004093A0                 mov     [esp+1Ch+Format], ecx ; File
.text:004093A4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004093AB                 call    _flsbuf
.text:004093B0                 jmp     short loc_409385
.text:004093B2 ; ---------------------------------------------------------------------------
.text:004093B2
.text:004093B2 loc_4093B2:                             ; CODE XREF: sub_409310+56↑j
.text:004093B2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004093B5                 call    strerror
.text:004093BA                 test    eax, eax
.text:004093BC                 jz      short loc_4093DD
.text:004093BE
.text:004093BE loc_4093BE:                             ; CODE XREF: sub_409310+D2↓j
.text:004093BE                 mov     [esp+1Ch+ArgList], eax
.text:004093C2                 mov     ebx, ds:_iob
.text:004093C8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:004093D0                 add     ebx, 40h ; '@'
.text:004093D3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004093D6                 call    fprintf
.text:004093DB                 jmp     short loc_409368
.text:004093DD ; ---------------------------------------------------------------------------
.text:004093DD
.text:004093DD loc_4093DD:                             ; CODE XREF: sub_409310+AC↑j
.text:004093DD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004093E2                 jmp     short loc_4093BE
.text:004093E4 ; ---------------------------------------------------------------------------
.text:004093E4
.text:004093E4 loc_4093E4:                             ; CODE XREF: sub_409310+25↑j
.text:004093E4                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:004093EC                 mov     edx, ds:_iob
.text:004093F2                 mov     ecx, ds:dword_415A50
.text:004093F8                 add     edx, 40h ; '@'
.text:004093FB                 mov     [esp+1Ch+ArgList], ecx
.text:004093FF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409402                 call    fprintf
.text:00409407                 jmp     loc_40933D
.text:0040940C ; ---------------------------------------------------------------------------
.text:0040940C
.text:0040940C loc_40940C:                             ; CODE XREF: sub_409310+88↑j
.text:0040940C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040940F                 call    exit
.text:0040940F sub_409310      endp
.text:0040940F
.text:00409414
.text:00409414 ; =============== S U B R O U T I N E =======================================
.text:00409414
.text:00409414
.text:00409414 ; int __cdecl sub_409414(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00409414 sub_409414      proc near               ; DATA XREF: sub_409414+77↓o
.text:00409414
.text:00409414 Stream          = dword ptr -28h
.text:00409414 Format          = dword ptr -24h
.text:00409414 ArgList         = dword ptr -20h
.text:00409414 var_1C          = dword ptr -1Ch
.text:00409414 Code            = dword ptr  8
.text:00409414 ErrorMessage    = dword ptr  0Ch
.text:00409414 Str2            = dword ptr  10h
.text:00409414 arg_10          = dword ptr  14h
.text:00409414 arg_14          = dword ptr  18h
.text:00409414 arg_18          = byte ptr  1Ch
.text:00409414
.text:00409414                 and     eax, 64253A73h
.text:00409419                 cmp     ah, [eax]
.text:0040941B
.text:0040941B loc_40941B:                             ; DATA XREF: sub_409414:loc_409555↓o
.text:0040941B                 add     ds:55003A73h, ah
.text:00409421                 push    edi
.text:00409422                 push    esi
.text:00409423                 push    ebx
.text:00409424                 sub     esp, 1Ch
.text:00409427                 mov     edx, ds:dword_415AC0
.text:0040942D                 mov     ebp, [esp+28h+Code]
.text:00409431                 mov     edi, [esp+28h+ErrorMessage]
.text:00409435                 test    edx, edx
.text:00409437                 mov     ebx, [esp+28h+Str2]
.text:0040943B                 mov     esi, [esp+28h+arg_10]
.text:0040943F                 jz      short loc_409459
.text:00409441                 cmp     ds:dword_415190, esi
.text:00409447                 jz      loc_409580
.text:0040944D
.text:0040944D loc_40944D:                             ; CODE XREF: sub_409414+18D↓j
.text:0040944D                 mov     ds:Str1, ebx
.text:00409453                 mov     ds:dword_415190, esi
.text:00409459
.text:00409459 loc_409459:                             ; CODE XREF: sub_409414+2B↑j
.text:00409459                 mov     edx, ds:_iob
.text:0040945F                 add     edx, 20h ; ' '
.text:00409462                 mov     [esp+28h+Stream], edx ; Stream
.text:00409465                 call    fflush
.text:0040946A                 mov     eax, ds:dword_415A80
.text:0040946F                 test    eax, eax
.text:00409471                 jz      loc_409555
.text:00409477                 call    eax ; dword_415A80
.text:00409479
.text:00409479 loc_409479:                             ; CODE XREF: sub_409414+164↓j
.text:00409479                 test    ebx, ebx
.text:0040947B                 jz      short loc_40949E
.text:0040947D                 mov     [esp+28h+ArgList], ebx
.text:00409481                 mov     ebx, ds:_iob
.text:00409487                 mov     [esp+28h+var_1C], esi
.text:0040948B                 mov     [esp+28h+Format], offset sub_409414 ; Format
.text:00409493                 add     ebx, 40h ; '@'
.text:00409496                 mov     [esp+28h+Stream], ebx ; Stream
.text:00409499                 call    fprintf
.text:0040949E
.text:0040949E loc_40949E:                             ; CODE XREF: sub_409414+67↑j
.text:0040949E                 mov     esi, ds:_iob
.text:004094A4                 lea     edx, [esp+28h+arg_18]
.text:004094A8                 mov     ecx, [esp+28h+arg_14]
.text:004094AC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004094B0                 add     esi, 40h ; '@'
.text:004094B3                 mov     [esp+28h+Format], ecx ; Format
.text:004094B7                 mov     [esp+28h+Stream], esi ; Stream
.text:004094BA                 call    vfprintf
.text:004094BF                 inc     ds:dword_415A90
.text:004094C5                 test    edi, edi
.text:004094C7                 jnz     short loc_409520
.text:004094C9
.text:004094C9 loc_4094C9:                             ; CODE XREF: sub_409414+135↓j
.text:004094C9                 mov     edx, ds:_iob
.text:004094CF                 lea     ecx, [edx+40h]
.text:004094D2                 mov     ebx, [ecx+4]
.text:004094D5                 dec     ebx
.text:004094D6                 test    ebx, ebx
.text:004094D8                 mov     [ecx+4], ebx
.text:004094DB                 js      short loc_409507
.text:004094DD                 mov     esi, [edx+40h]
.text:004094E0                 mov     byte ptr [esi], 0Ah
.text:004094E3                 inc     dword ptr [edx+40h]
.text:004094E6
.text:004094E6 loc_4094E6:                             ; CODE XREF: sub_409414+103↓j
.text:004094E6                 mov     ecx, ds:_iob
.text:004094EC                 add     ecx, 40h ; '@'
.text:004094EF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004094F2                 call    fflush
.text:004094F7                 test    ebp, ebp
.text:004094F9                 jnz     loc_4095A6
.text:004094FF
.text:004094FF loc_4094FF:                             ; CODE XREF: sub_409414+173↓j
.text:004094FF                                         ; sub_409414+187↓j
.text:004094FF                 add     esp, 1Ch
.text:00409502                 pop     ebx
.text:00409503                 pop     esi
.text:00409504                 pop     edi
.text:00409505                 pop     ebp
.text:00409506                 retn
.text:00409507 ; ---------------------------------------------------------------------------
.text:00409507
.text:00409507 loc_409507:                             ; CODE XREF: sub_409414+C7↑j
.text:00409507                 mov     [esp+28h+Format], ecx ; File
.text:0040950B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00409512                 call    _flsbuf
.text:00409517                 jmp     short loc_4094E6
.text:00409517 ; ---------------------------------------------------------------------------
.text:00409519                 align 10h
.text:00409520
.text:00409520 loc_409520:                             ; CODE XREF: sub_409414+B3↑j
.text:00409520                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00409523                 call    strerror
.text:00409528                 test    eax, eax
.text:0040952A                 jz      short loc_40954E
.text:0040952C
.text:0040952C loc_40952C:                             ; CODE XREF: sub_409414+13F↓j
.text:0040952C                 mov     [esp+28h+ArgList], eax
.text:00409530                 mov     edi, ds:_iob
.text:00409536                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040953E                 add     edi, 40h ; '@'
.text:00409541                 mov     [esp+28h+Stream], edi ; Stream
.text:00409544                 call    fprintf
.text:00409549                 jmp     loc_4094C9
.text:0040954E ; ---------------------------------------------------------------------------
.text:0040954E
.text:0040954E loc_40954E:                             ; CODE XREF: sub_409414+116↑j
.text:0040954E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00409553                 jmp     short loc_40952C
.text:00409555 ; ---------------------------------------------------------------------------
.text:00409555
.text:00409555 loc_409555:                             ; CODE XREF: sub_409414+5D↑j
.text:00409555                 mov     [esp+28h+Format], (offset loc_40941B+1) ; Format
.text:0040955D                 mov     ecx, ds:_iob
.text:00409563                 mov     edx, ds:dword_415A50
.text:00409569                 add     ecx, 40h ; '@'
.text:0040956C                 mov     [esp+28h+ArgList], edx
.text:00409570                 mov     [esp+28h+Stream], ecx ; Stream
.text:00409573                 call    fprintf
.text:00409578                 jmp     loc_409479
.text:00409578 ; ---------------------------------------------------------------------------
.text:0040957D                 align 10h
.text:00409580
.text:00409580 loc_409580:                             ; CODE XREF: sub_409414+33↑j
.text:00409580                 mov     eax, ds:Str1
.text:00409585                 cmp     ebx, eax
.text:00409587                 jz      loc_4094FF
.text:0040958D                 mov     [esp+28h+Format], ebx ; Str2
.text:00409591                 mov     [esp+28h+Stream], eax ; Str1
.text:00409594                 call    strcmp
.text:00409599                 test    eax, eax
.text:0040959B                 jz      loc_4094FF
.text:004095A1                 jmp     loc_40944D
.text:004095A6 ; ---------------------------------------------------------------------------
.text:004095A6
.text:004095A6 loc_4095A6:                             ; CODE XREF: sub_409414+E5↑j
.text:004095A6                 mov     [esp+28h+Stream], ebp ; Code
.text:004095A9                 call    exit
.text:004095A9 sub_409414      endp ; sp-analysis failed
.text:004095A9
.text:004095A9 ; ---------------------------------------------------------------------------
.text:004095AE                 align 10h
.text:004095B0
.text:004095B0 ; =============== S U B R O U T I N E =======================================
.text:004095B0
.text:004095B0
.text:004095B0 sub_4095B0      proc near               ; CODE XREF: sub_403080+3B↑p
.text:004095B0                                         ; sub_404870+7C↑p
.text:004095B0
.text:004095B0 hNamedPipe      = dword ptr -0Ch
.text:004095B0 var_8           = dword ptr -8
.text:004095B0 var_4           = dword ptr -4
.text:004095B0 arg_0           = dword ptr  4
.text:004095B0 arg_4           = dword ptr  8
.text:004095B0
.text:004095B0                 sub     esp, 0Ch
.text:004095B3                 mov     edx, [esp+0Ch+arg_4]
.text:004095B7                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:004095BE                 mov     [esp+0Ch+var_4], edx ; int
.text:004095C2                 mov     edx, [esp+0Ch+arg_0]
.text:004095C6                 mov     [esp+0Ch+var_8], edx ; int
.text:004095CA                 call    sub_409820
.text:004095CF                 add     esp, 0Ch
.text:004095D2                 retn
.text:004095D2 sub_4095B0      endp
.text:004095D2
.text:004095D2 ; ---------------------------------------------------------------------------
.text:004095D3 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:004095D3                                         ; DATA XREF: .text:004096BE↓o
.text:004095E6 aModeO          db 'mode:      %#o',0Ah,0
.text:004095E6                                         ; DATA XREF: .text:004096D4↓o
.text:004095F6 aUidLd          db 'uid:       %ld',0Ah,0
.text:004095F6                                         ; DATA XREF: .text:004096E7↓o
.text:00409606 aGidLd          db 'gid:       %ld',0Ah,0
.text:00409606                                         ; DATA XREF: .text:004096FA↓o
.text:00409616 aDevLu          db 'dev:       %lu',0Ah,0
.text:00409616                                         ; DATA XREF: .text:0040970D↓o
.text:00409626 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:00409626                                         ; DATA XREF: .text:00409720↓o
.text:00409636 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:00409636                                         ; DATA XREF: .text:00409736↓o
.text:00409648 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:00409648                                         ; DATA XREF: .text:0040974D↓o
.text:00409657 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:00409657                                         ; DATA XREF: .text:00409763↓o
.text:00409669 aAtimeLdS       db 'atime:     %ld: %s',0
.text:00409669                                         ; DATA XREF: .text:00409789↓o
.text:0040967C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0040967C                                         ; DATA XREF: .text:004097AB↓o
.text:0040968F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:0040968F                                         ; DATA XREF: .text:004097CD↓o
.text:004096A3                 align 10h
.text:004096B0                 push    ebx
.text:004096B1                 sub     esp, 18h
.text:004096B4                 mov     ebx, [esp+20h]
.text:004096B8                 mov     edx, [ebx+8]
.text:004096BB                 mov     ecx, [ebx+0Ch]
.text:004096BE                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:004096C5                 mov     [esp+4], edx
.text:004096C9                 mov     [esp+8], ecx
.text:004096CD                 call    printf
.text:004096D2                 mov     ecx, [ebx]
.text:004096D4                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:004096DB                 mov     [esp+4], ecx
.text:004096DF                 call    printf
.text:004096E4                 mov     edx, [ebx+1Ch]
.text:004096E7                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:004096EE                 mov     [esp+4], edx
.text:004096F2                 call    printf
.text:004096F7                 mov     ecx, [ebx+20h]
.text:004096FA                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:00409701                 mov     [esp+4], ecx
.text:00409705                 call    printf
.text:0040970A                 mov     edx, [ebx+10h]
.text:0040970D                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:00409714                 mov     [esp+4], edx
.text:00409718                 call    printf
.text:0040971D                 mov     ecx, [ebx+18h]
.text:00409720                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:00409727                 mov     [esp+4], ecx
.text:0040972B                 call    printf
.text:00409730                 mov     edx, [ebx+30h]
.text:00409733                 mov     ecx, [ebx+34h]
.text:00409736                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:0040973D                 mov     [esp+4], edx
.text:00409741                 mov     [esp+8], ecx
.text:00409745                 call    printf
.text:0040974A                 mov     ecx, [ebx+50h]
.text:0040974D                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:00409754                 mov     [esp+4], ecx
.text:00409758                 call    printf
.text:0040975D                 mov     ecx, [ebx+5Ch]
.text:00409760                 mov     edx, [ebx+58h]
.text:00409763                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0040976A                 mov     [esp+8], ecx
.text:0040976E                 mov     [esp+4], edx
.text:00409772                 call    printf
.text:00409777                 lea     edx, [ebx+38h]
.text:0040977A                 mov     [esp], edx
.text:0040977D                 call    ctime
.text:00409782                 mov     [esp+8], eax
.text:00409786                 mov     ecx, [ebx+38h]
.text:00409789                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:00409790                 mov     [esp+4], ecx
.text:00409794                 call    printf
.text:00409799                 lea     edx, [ebx+40h]
.text:0040979C                 mov     [esp], edx
.text:0040979F                 call    ctime
.text:004097A4                 mov     [esp+8], eax
.text:004097A8                 mov     ecx, [ebx+40h]
.text:004097AB                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:004097B2                 mov     [esp+4], ecx
.text:004097B6                 call    printf
.text:004097BB                 lea     edx, [ebx+48h]
.text:004097BE                 mov     [esp], edx
.text:004097C1                 call    ctime
.text:004097C6                 mov     [esp+8], eax
.text:004097CA                 mov     edx, [ebx+48h]
.text:004097CD                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:004097D4                 mov     [esp+4], edx
.text:004097D8                 call    printf
.text:004097DD                 add     esp, 18h
.text:004097E0                 xor     eax, eax
.text:004097E2                 pop     ebx
.text:004097E3                 retn
.text:004097E3 ; ---------------------------------------------------------------------------
.text:004097E4                 align 10h
.text:004097F0 ; const char aFxstat64BadFil[]
.text:004097F0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:004097F0                                         ; DATA XREF: sub_409820+7B↓o
.text:00409814                 align 10h
.text:00409820
.text:00409820 ; =============== S U B R O U T I N E =======================================
.text:00409820
.text:00409820
.text:00409820 ; int __cdecl sub_409820(HANDLE hNamedPipe, int, int)
.text:00409820 sub_409820      proc near               ; CODE XREF: sub_4095B0+1A↑p
.text:00409820                                         ; .text:0040C229↓p
.text:00409820
.text:00409820 FileHandle      = dword ptr -1Ch
.text:00409820 var_18          = dword ptr -18h
.text:00409820 var_C           = dword ptr -0Ch
.text:00409820 var_8           = dword ptr -8
.text:00409820 var_4           = dword ptr -4
.text:00409820 hNamedPipe      = dword ptr  4
.text:00409820 arg_4           = dword ptr  8
.text:00409820 arg_8           = dword ptr  0Ch
.text:00409820
.text:00409820                 sub     esp, 1Ch
.text:00409823                 mov     edx, [esp+1Ch+arg_4]
.text:00409827                 mov     [esp+1Ch+var_C], ebx
.text:0040982B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040982F                 mov     [esp+1Ch+var_8], esi
.text:00409833                 mov     esi, [esp+1Ch+arg_8]
.text:00409837                 test    ebx, ebx
.text:00409839                 mov     [esp+1Ch+var_4], edi
.text:0040983D                 jnz     short loc_409877
.text:0040983F                 test    edx, edx
.text:00409841                 js      short loc_409897
.text:00409843                 test    esi, esi
.text:00409845                 jz      short loc_409877
.text:00409847                 cld
.text:00409848                 mov     eax, ebx
.text:0040984A                 mov     edi, esi
.text:0040984C                 mov     ecx, 18h
.text:00409851                 rep stosd
.text:00409853                 mov     [esp+1Ch+arg_4], esi ; int
.text:00409857                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040985A                 call    _get_osfhandle
.text:0040985F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:00409863                 mov     ebx, [esp+1Ch+var_C]
.text:00409867                 mov     esi, [esp+1Ch+var_8]
.text:0040986B                 mov     edi, [esp+1Ch+var_4]
.text:0040986F                 add     esp, 1Ch
.text:00409872                 jmp     sub_409C00
.text:00409877 ; ---------------------------------------------------------------------------
.text:00409877
.text:00409877 loc_409877:                             ; CODE XREF: sub_409820+1D↑j
.text:00409877                                         ; sub_409820+25↑j
.text:00409877                 call    _errno
.text:0040987C                 mov     dword ptr [eax], 16h
.text:00409882
.text:00409882 loc_409882:                             ; CODE XREF: sub_409820+92↓j
.text:00409882                 mov     ebx, [esp+1Ch+var_C]
.text:00409886                 mov     eax, 0FFFFFFFFh
.text:0040988B                 mov     esi, [esp+1Ch+var_8]
.text:0040988F                 mov     edi, [esp+1Ch+var_4]
.text:00409893                 add     esp, 1Ch
.text:00409896                 retn
.text:00409897 ; ---------------------------------------------------------------------------
.text:00409897
.text:00409897 loc_409897:                             ; CODE XREF: sub_409820+21↑j
.text:00409897                 mov     [esp+1Ch+var_18], edx
.text:0040989B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:004098A2                 call    printf
.text:004098A7                 call    _errno
.text:004098AC                 mov     dword ptr [eax], 9
.text:004098B2                 jmp     short loc_409882
.text:004098B2 sub_409820      endp
.text:004098B2
.text:004098B2 ; ---------------------------------------------------------------------------
.text:004098B4                 db 1Ch dup(90h)
.text:004098D0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:004098D0                                         ; DATA XREF: .data:off_414054↓o
.text:004098E4 ; const CHAR LibFileName[]
.text:004098E4 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_409910+11↓o
.text:004098E4                                         ; sub_409A80+C↓o ...
.text:004098F1 ; const CHAR ProcName[]
.text:004098F1 ProcName        db 'GetFileAttributesExA',0
.text:004098F1                                         ; DATA XREF: sub_409910+28↓o
.text:00409906                 align 10h
.text:00409910
.text:00409910 ; =============== S U B R O U T I N E =======================================
.text:00409910
.text:00409910
.text:00409910 ; int __cdecl sub_409910(LPCSTR lpFileName, int)
.text:00409910 sub_409910      proc near               ; CODE XREF: .text:0040AAB4↓p
.text:00409910                                         ; sub_40AEB0+37↓p
.text:00409910
.text:00409910 lpModuleName    = dword ptr -18Ch
.text:00409910 lpProcName      = dword ptr -188h
.text:00409910 var_184         = dword ptr -184h
.text:00409910 var_170         = dword ptr -170h
.text:00409910 var_164         = dword ptr -164h
.text:00409910 hModule         = dword ptr -160h
.text:00409910 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00409910 lpFileName      = dword ptr  4
.text:00409910 arg_4           = dword ptr  8
.text:00409910
.text:00409910                 push    ebp
.text:00409911                 push    edi
.text:00409912                 push    esi
.text:00409913                 push    ebx
.text:00409914                 sub     esp, 17Ch
.text:0040991A                 mov     ebx, [esp+18Ch+arg_4]
.text:00409921                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:00409928                 call    GetModuleHandleA
.text:0040992D                 sub     esp, 4
.text:00409930                 mov     [esp+18Ch+hModule], eax
.text:00409934                 mov     edx, [esp+18Ch+hModule]
.text:00409938                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00409940                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00409943                 call    GetProcAddress
.text:00409948                 sub     esp, 8
.text:0040994B                 mov     ebp, eax
.text:0040994D                 mov     eax, [esp+18Ch+lpFileName]
.text:00409954                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00409957                 call    GetFileAttributesA
.text:0040995C                 sub     esp, 4
.text:0040995F                 mov     [esp+18Ch+var_164], eax
.text:00409963                 xor     eax, eax
.text:00409965                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040996A                 jz      short loc_4099C1
.text:0040996C                 cld
.text:0040996D                 mov     ecx, 50h ; 'P'
.text:00409972                 lea     esi, [esp+18Ch+FindFileData]
.text:00409976                 mov     edi, esi
.text:00409978                 test    ebp, ebp
.text:0040997A                 rep stosd
.text:0040997C                 mov     [esp+18Ch+var_170], 0
.text:00409984                 jz      short loc_4099A5
.text:00409986                 mov     [esp+18Ch+var_184], ebx
.text:0040998A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00409991                 mov     [esp+18Ch+lpProcName], 0
.text:00409999                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040999C                 call    ebp
.text:0040999E                 sub     esp, 0Ch
.text:004099A1                 mov     [esp+18Ch+var_170], eax
.text:004099A5
.text:004099A5 loc_4099A5:                             ; CODE XREF: sub_409910+74↑j
.text:004099A5                 mov     eax, [esp+18Ch+var_170]
.text:004099A9                 test    eax, eax
.text:004099AB                 jz      short loc_4099D0
.text:004099AD
.text:004099AD loc_4099AD:                             ; CODE XREF: sub_409910+131↓j
.text:004099AD                                         ; sub_409910+14B↓j
.text:004099AD                 mov     ebx, [esp+18Ch+hModule]
.text:004099B1                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:004099B4                 call    FreeLibrary
.text:004099B9                 sub     esp, 4
.text:004099BC                 mov     eax, 1
.text:004099C1
.text:004099C1 loc_4099C1:                             ; CODE XREF: sub_409910+5A↑j
.text:004099C1                 add     esp, 17Ch
.text:004099C7                 pop     ebx
.text:004099C8                 pop     esi
.text:004099C9                 pop     edi
.text:004099CA                 pop     ebp
.text:004099CB                 retn
.text:004099CB ; ---------------------------------------------------------------------------
.text:004099CC                 align 10h
.text:004099D0
.text:004099D0 loc_4099D0:                             ; CODE XREF: sub_409910+9B↑j
.text:004099D0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:004099D4                 mov     edx, [esp+18Ch+lpFileName]
.text:004099DB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:004099DE                 call    FindFirstFileA
.text:004099E3                 sub     esp, 8
.text:004099E6                 xor     ecx, ecx
.text:004099E8                 cmp     eax, 0FFFFFFFFh
.text:004099EB                 setnz   cl
.text:004099EE                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:004099F2                 mov     [ebx], edi
.text:004099F4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:004099F8                 mov     [esp+18Ch+var_170], ecx
.text:004099FC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00409A00                 mov     [ebx+8], esi
.text:00409A03                 mov     [ebx+4], ecx
.text:00409A06                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:00409A0A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:00409A0E                 mov     [ebx+0Ch], ebp
.text:00409A11                 mov     [ebx+10h], edi
.text:00409A14                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00409A18                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:00409A1C                 mov     [ebx+18h], esi
.text:00409A1F                 mov     [ebx+14h], ecx
.text:00409A22                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00409A26                 mov     [ebx+1Ch], ebp
.text:00409A29                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:00409A2D                 mov     [ebx+20h], edi
.text:00409A30                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00409A33                 call    FindClose
.text:00409A38                 sub     esp, 4
.text:00409A3B                 mov     esi, [esp+18Ch+var_170]
.text:00409A3F                 test    esi, esi
.text:00409A41                 jnz     loc_4099AD
.text:00409A47                 cld
.text:00409A48                 mov     eax, [esp+18Ch+var_170]
.text:00409A4C                 mov     ecx, 9
.text:00409A51                 mov     edi, ebx
.text:00409A53                 rep stosd
.text:00409A55                 mov     ebp, [esp+18Ch+var_164]
.text:00409A59                 mov     [ebx], ebp
.text:00409A5B                 jmp     loc_4099AD
.text:00409A5B sub_409910      endp
.text:00409A5B
.text:00409A5B ; ---------------------------------------------------------------------------
.text:00409A60 ; const CHAR aFindfirstfilee[]
.text:00409A60 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_409A80+23↓o
.text:00409A71 ; const char Source[]
.text:00409A71 Source          db '\*',0               ; DATA XREF: sub_409A80:loc_409B0D↓o
.text:00409A74                 align 10h
.text:00409A80
.text:00409A80 ; =============== S U B R O U T I N E =======================================
.text:00409A80
.text:00409A80
.text:00409A80 ; int __cdecl sub_409A80(char *Str)
.text:00409A80 sub_409A80      proc near               ; CODE XREF: .text:0040ABB3↓p
.text:00409A80                                         ; sub_40AEB0+3FA↓p ...
.text:00409A80
.text:00409A80 lpLibFileName   = dword ptr -18Ch
.text:00409A80 lpProcName      = dword ptr -188h
.text:00409A80 var_184         = dword ptr -184h
.text:00409A80 var_180         = dword ptr -180h
.text:00409A80 var_17C         = dword ptr -17Ch
.text:00409A80 var_178         = dword ptr -178h
.text:00409A80 var_164         = dword ptr -164h
.text:00409A80 hModule         = dword ptr -160h
.text:00409A80 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00409A80 Str             = dword ptr  4
.text:00409A80
.text:00409A80                 push    ebp
.text:00409A81                 push    edi
.text:00409A82                 xor     edi, edi
.text:00409A84                 push    esi
.text:00409A85                 push    ebx
.text:00409A86                 sub     esp, 17Ch
.text:00409A8C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00409A93                 call    LoadLibraryA
.text:00409A98                 sub     esp, 4
.text:00409A9B                 mov     [esp+18Ch+hModule], eax
.text:00409A9F                 mov     ecx, [esp+18Ch+hModule]
.text:00409AA3                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:00409AAB                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:00409AAE                 call    GetProcAddress
.text:00409AB3                 sub     esp, 8
.text:00409AB6                 mov     edx, [esp+18Ch+Str]
.text:00409ABD                 mov     [esp+18Ch+var_164], eax
.text:00409AC1                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00409AC4                 call    strlen
.text:00409AC9                 lea     edx, [eax+5]
.text:00409ACC                 mov     ebx, eax
.text:00409ACE                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00409AD1                 call    malloc
.text:00409AD6                 mov     esi, eax
.text:00409AD8                 test    esi, esi
.text:00409ADA                 mov     eax, 1
.text:00409ADF                 jz      loc_409BBD
.text:00409AE5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00409AE8                 mov     ebp, [esp+18Ch+Str]
.text:00409AEF                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00409AF3                 call    strcpy
.text:00409AF8                 movzx   eax, byte ptr [ebx+esi-1]
.text:00409AFD                 cmp     al, 2Fh ; '/'
.text:00409AFF                 jz      loc_409BEB
.text:00409B05                 cmp     al, 5Ch ; '\'
.text:00409B07                 jz      loc_409BEB
.text:00409B0D
.text:00409B0D loc_409B0D:                             ; CODE XREF: sub_409A80+170↓j
.text:00409B0D                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:00409B15                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00409B18                 call    strcat
.text:00409B1D                 mov     eax, [esp+18Ch+var_164]
.text:00409B21                 test    eax, eax
.text:00409B23                 jz      loc_409BE5
.text:00409B29                 mov     [esp+18Ch+var_178], 0
.text:00409B31                 lea     ebp, [esp+18Ch+FindFileData]
.text:00409B35                 mov     [esp+18Ch+var_17C], 0
.text:00409B3D                 mov     [esp+18Ch+var_180], 1
.text:00409B45                 mov     [esp+18Ch+var_184], ebp
.text:00409B49                 mov     [esp+18Ch+lpProcName], 0
.text:00409B51                 mov     [esp+18Ch+lpLibFileName], esi
.text:00409B54                 call    [esp+18Ch+var_164]
.text:00409B58                 sub     esp, 18h
.text:00409B5B                 mov     ebx, eax
.text:00409B5D                 cmp     eax, 0FFFFFFFFh
.text:00409B60                 jz      short loc_409BC8
.text:00409B62                 lea     esi, [esi+0]
.text:00409B69                 lea     edi, [edi+0]
.text:00409B70
.text:00409B70 loc_409B70:                             ; CODE XREF: sub_409A80+109↓j
.text:00409B70                                         ; sub_409A80+161↓j
.text:00409B70                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00409B75                 jz      short loc_409B78
.text:00409B77                 inc     edi
.text:00409B78
.text:00409B78 loc_409B78:                             ; CODE XREF: sub_409A80+F5↑j
.text:00409B78                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00409B7C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00409B7F                 call    FindNextFileA
.text:00409B84                 sub     esp, 8
.text:00409B87                 test    eax, eax
.text:00409B89                 jnz     short loc_409B70
.text:00409B8B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00409B8E                 call    FindClose
.text:00409B93                 sub     esp, 4
.text:00409B96                 mov     esi, [esp+18Ch+hModule]
.text:00409B9A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:00409B9D                 call    FreeLibrary
.text:00409BA2                 sub     esp, 4
.text:00409BA5                 mov     ebx, [esp+18Ch+Str]
.text:00409BAC                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:00409BAF                 call    sub_40C2C0
.text:00409BB4                 test    eax, eax
.text:00409BB6                 jz      short loc_409BBB
.text:00409BB8                 add     edi, 2
.text:00409BBB
.text:00409BBB loc_409BBB:                             ; CODE XREF: sub_409A80+136↑j
.text:00409BBB                 mov     eax, edi
.text:00409BBD
.text:00409BBD loc_409BBD:                             ; CODE XREF: sub_409A80+5F↑j
.text:00409BBD                                         ; sub_409A80+163↓j
.text:00409BBD                 add     esp, 17Ch
.text:00409BC3                 pop     ebx
.text:00409BC4                 pop     esi
.text:00409BC5                 pop     edi
.text:00409BC6                 pop     ebp
.text:00409BC7                 retn
.text:00409BC8 ; ---------------------------------------------------------------------------
.text:00409BC8
.text:00409BC8 loc_409BC8:                             ; CODE XREF: sub_409A80+E0↑j
.text:00409BC8                                         ; sub_409A80+169↓j
.text:00409BC8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00409BCC                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:00409BCF                 call    FindFirstFileA
.text:00409BD4                 mov     ebx, eax
.text:00409BD6                 sub     esp, 8
.text:00409BD9                 cmp     ebx, 0FFFFFFFFh
.text:00409BDC                 mov     eax, 2
.text:00409BE1                 jnz     short loc_409B70
.text:00409BE3                 jmp     short loc_409BBD
.text:00409BE5 ; ---------------------------------------------------------------------------
.text:00409BE5
.text:00409BE5 loc_409BE5:                             ; CODE XREF: sub_409A80+A3↑j
.text:00409BE5                 lea     ebp, [esp+18Ch+FindFileData]
.text:00409BE9                 jmp     short loc_409BC8
.text:00409BEB ; ---------------------------------------------------------------------------
.text:00409BEB
.text:00409BEB loc_409BEB:                             ; CODE XREF: sub_409A80+7F↑j
.text:00409BEB                                         ; sub_409A80+87↑j
.text:00409BEB                 mov     byte ptr [ebx+esi-1], 0
.text:00409BF0                 jmp     loc_409B0D
.text:00409BF0 sub_409A80      endp
.text:00409BF0
.text:00409BF0 ; ---------------------------------------------------------------------------
.text:00409BF5                 align 10h
.text:00409C00
.text:00409C00 ; =============== S U B R O U T I N E =======================================
.text:00409C00
.text:00409C00
.text:00409C00 ; int __cdecl sub_409C00(HANDLE hNamedPipe, int)
.text:00409C00 sub_409C00      proc near               ; CODE XREF: sub_409820+52↑j
.text:00409C00                                         ; sub_40B430-B9↓p
.text:00409C00
.text:00409C00 hFile           = dword ptr -0ECh
.text:00409C00 lpFileInformation= dword ptr -0E8h
.text:00409C00 nBufferSize     = dword ptr -0E4h
.text:00409C00 lpBytesRead     = dword ptr -0E0h
.text:00409C00 lpTotalBytesAvail= dword ptr -0DCh
.text:00409C00 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00409C00 var_C4          = dword ptr -0C4h
.text:00409C00 var_C0          = dword ptr -0C0h
.text:00409C00 var_BC          = dword ptr -0BCh
.text:00409C00 var_B8          = dword ptr -0B8h
.text:00409C00 var_B4          = dword ptr -0B4h
.text:00409C00 var_B0          = dword ptr -0B0h
.text:00409C00 var_AC          = dword ptr -0ACh
.text:00409C00 var_A8          = dword ptr -0A8h
.text:00409C00 TotalBytesAvail = dword ptr -0A0h
.text:00409C00 var_9C          = dword ptr -9Ch
.text:00409C00 var_98          = dword ptr -98h
.text:00409C00 var_94          = dword ptr -94h
.text:00409C00 var_90          = dword ptr -90h
.text:00409C00 var_8C          = dword ptr -8Ch
.text:00409C00 var_88          = dword ptr -88h
.text:00409C00 var_84          = dword ptr -84h
.text:00409C00 var_80          = dword ptr -80h
.text:00409C00 var_7C          = dword ptr -7Ch
.text:00409C00 var_78          = dword ptr -78h
.text:00409C00 var_74          = dword ptr -74h
.text:00409C00 var_70          = dword ptr -70h
.text:00409C00 var_6C          = dword ptr -6Ch
.text:00409C00 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00409C00 hNamedPipe      = dword ptr  4
.text:00409C00 arg_4           = dword ptr  8
.text:00409C00
.text:00409C00                 push    ebp
.text:00409C01                 mov     eax, 0FFFFFFFFh
.text:00409C06                 push    edi
.text:00409C07                 push    esi
.text:00409C08                 push    ebx
.text:00409C09                 sub     esp, 0DCh
.text:00409C0F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00409C16                 mov     ebp, [esp+0ECh+arg_4]
.text:00409C1D                 cmp     esi, 0FFFFFFFFh
.text:00409C20                 jz      loc_409FA1
.text:00409C26                 cld
.text:00409C27                 xor     eax, eax
.text:00409C29                 lea     ebx, [esp+0ECh+FileInformation]
.text:00409C30                 mov     ecx, 0Dh
.text:00409C35                 mov     edi, ebx
.text:00409C37                 rep stosd
.text:00409C39                 mov     dword ptr [ebp+18h], 1
.text:00409C40                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00409C43                 call    GetFileType
.text:00409C48                 sub     esp, 4
.text:00409C4B                 xor     edx, edx
.text:00409C4D                 cmp     eax, 2
.text:00409C50                 jz      loc_40A080
.text:00409C56                 cmp     eax, 3
.text:00409C59                 jz      loc_40A070
.text:00409C5F
.text:00409C5F loc_409C5F:                             ; CODE XREF: sub_409C00+475↓j
.text:00409C5F                                         ; sub_409C00+485↓j
.text:00409C5F                 or      [ebp+0], edx
.text:00409C62                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00409C66                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00409C69                 call    GetFileInformationByHandle
.text:00409C6E                 sub     esp, 8
.text:00409C71                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00409C78                 test    ecx, ecx
.text:00409C7A                 jnz     short loc_409CB0
.text:00409C7C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00409C83                 test    edx, edx
.text:00409C85                 jnz     short loc_409CB0
.text:00409C87                 mov     edx, [ebp+0]
.text:00409C8A                 and     edx, 0F000h
.text:00409C90                 cmp     edx, 1000h
.text:00409C96                 jz      loc_40A006
.text:00409C9C
.text:00409C9C loc_409C9C:                             ; CODE XREF: sub_409C00+459↓j
.text:00409C9C                                         ; sub_409C00+465↓j
.text:00409C9C                 test    ecx, ecx
.text:00409C9E                 jnz     short loc_409CB0
.text:00409CA0                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00409CA7                 test    edx, edx
.text:00409CA9                 jz      loc_409FE4
.text:00409CAF                 nop
.text:00409CB0
.text:00409CB0 loc_409CB0:                             ; CODE XREF: sub_409C00+7A↑j
.text:00409CB0                                         ; sub_409C00+85↑j ...
.text:00409CB0                 cld
.text:00409CB1                 mov     esi, ebx
.text:00409CB3                 mov     dword ptr [ebp+14h], 0
.text:00409CBA                 lea     edi, [esp+0ECh+var_9C]
.text:00409CBE                 mov     ecx, 0Dh
.text:00409CC3                 rep movsd
.text:00409CC5                 xor     ebx, ebx
.text:00409CC7                 xor     edi, edi
.text:00409CC9                 mov     edx, [esp+0ECh+var_6C]
.text:00409CD0                 mov     esi, [esp+0ECh+var_70]
.text:00409CD4                 or      edx, ebx
.text:00409CD6                 mov     ebx, [esp+0ECh+var_9C]
.text:00409CDA                 mov     [ebp+8], edx
.text:00409CDD                 or      edi, esi
.text:00409CDF                 xor     edx, edx
.text:00409CE1                 mov     [ebp+0Ch], edi
.text:00409CE4                 test    bl, 10h
.text:00409CE7                 mov     esi, [esp+0ECh+var_80]
.text:00409CEB                 setz    dl
.text:00409CEE                 mov     [ebp+10h], esi
.text:00409CF1                 dec     edx
.text:00409CF2                 and     edx, 0FFFFC000h
.text:00409CF8                 add     edx, 8000h
.text:00409CFE                 or      edx, 124h
.text:00409D04                 test    bl, 1
.text:00409D07                 movzx   eax, dx
.text:00409D0A                 jnz     short loc_409D11
.text:00409D0C                 or      eax, 92h
.text:00409D11
.text:00409D11 loc_409D11:                             ; CODE XREF: sub_409C00+10A↑j
.text:00409D11                 or      [ebp+0], eax
.text:00409D14                 xor     edx, edx
.text:00409D16                 mov     ebx, [esp+0ECh+var_7C]
.text:00409D1A                 mov     ecx, [esp+0ECh+var_78]
.text:00409D1E                 mov     eax, edx
.text:00409D20                 xor     esi, esi
.text:00409D22                 mov     edx, [esp+0ECh+var_8C]
.text:00409D26                 mov     edi, ebx
.text:00409D28                 or      eax, edi
.text:00409D2A                 mov     [esp+0ECh+var_A8], eax
.text:00409D2E                 mov     ebx, ecx
.text:00409D30                 mov     edi, [esp+0ECh+var_74]
.text:00409D34                 or      ebx, esi
.text:00409D36                 mov     esi, [esp+0ECh+var_A8]
.text:00409D3A                 mov     [esp+0ECh+var_AC], ebx
.text:00409D3E                 xor     ebx, ebx
.text:00409D40                 mov     ecx, [esp+0ECh+var_AC]
.text:00409D44                 mov     [ebp+34h], esi
.text:00409D47                 mov     esi, [esp+0ECh+var_90]
.text:00409D4B                 mov     [ebp+18h], edi
.text:00409D4E                 xor     edi, edi
.text:00409D50                 or      esi, ebx
.text:00409D52                 mov     [ebp+30h], ecx
.text:00409D55                 or      edi, edx
.text:00409D57                 mov     edx, esi
.text:00409D59                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409D61                 sub     edx, 0D53E8000h
.text:00409D67                 mov     ebx, edi
.text:00409D69                 sbb     ebx, 19DB1DEh
.text:00409D6F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00409D73                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409D7B                 mov     [esp+0ECh+hFile], edx
.text:00409D7E                 call    sub_412740
.text:00409D83                 mov     ecx, eax
.text:00409D85                 shr     eax, 1Fh
.text:00409D88                 dec     eax
.text:00409D89                 and     ecx, eax
.text:00409D8B                 mov     [ebp+38h], ecx
.text:00409D8E                 mov     [esp+0ECh+hFile], esi
.text:00409D91                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409D95                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409D9D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409DA5                 call    sub_4125C0
.text:00409DAA                 lea     ebx, [eax+eax*4]
.text:00409DAD                 xor     ecx, ecx
.text:00409DAF                 lea     esi, [ebx+ebx*4]
.text:00409DB2                 shl     esi, 2
.text:00409DB5                 mov     edi, esi
.text:00409DB7                 shr     edi, 1Fh
.text:00409DBA                 dec     edi
.text:00409DBB                 and     edi, esi
.text:00409DBD                 mov     [ebp+3Ch], edi
.text:00409DC0                 mov     esi, [esp+0ECh+var_98]
.text:00409DC4                 xor     edi, edi
.text:00409DC6                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409DCE                 mov     edx, [esp+0ECh+var_94]
.text:00409DD2                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409DDA                 or      esi, ecx
.text:00409DDC                 or      edi, edx
.text:00409DDE                 mov     edx, esi
.text:00409DE0                 mov     ecx, edi
.text:00409DE2                 sub     edx, 0D53E8000h
.text:00409DE8                 sbb     ecx, 19DB1DEh
.text:00409DEE                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00409DF2                 mov     [esp+0ECh+hFile], edx
.text:00409DF5                 call    sub_412740
.text:00409DFA                 mov     ebx, eax
.text:00409DFC                 shr     eax, 1Fh
.text:00409DFF                 dec     eax
.text:00409E00                 and     ebx, eax
.text:00409E02                 mov     [ebp+48h], ebx
.text:00409E05                 xor     ebx, ebx
.text:00409E07                 mov     [esp+0ECh+hFile], esi
.text:00409E0A                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409E0E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409E16                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409E1E                 call    sub_4125C0
.text:00409E23                 lea     ecx, [eax+eax*4]
.text:00409E26                 lea     esi, [ecx+ecx*4]
.text:00409E29                 shl     esi, 2
.text:00409E2C                 mov     edi, esi
.text:00409E2E                 shr     edi, 1Fh
.text:00409E31                 dec     edi
.text:00409E32                 and     edi, esi
.text:00409E34                 mov     [ebp+4Ch], edi
.text:00409E37                 mov     esi, [esp+0ECh+var_88]
.text:00409E3B                 xor     edi, edi
.text:00409E3D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409E45                 mov     edx, [esp+0ECh+var_84]
.text:00409E49                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409E51                 or      esi, ebx
.text:00409E53                 or      edi, edx
.text:00409E55                 mov     edx, esi
.text:00409E57                 mov     ebx, edi
.text:00409E59                 sub     edx, 0D53E8000h
.text:00409E5F                 sbb     ebx, 19DB1DEh
.text:00409E65                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00409E69                 mov     [esp+0ECh+hFile], edx
.text:00409E6C                 call    sub_412740
.text:00409E71                 mov     ecx, eax
.text:00409E73                 shr     eax, 1Fh
.text:00409E76                 dec     eax
.text:00409E77                 and     ecx, eax
.text:00409E79                 mov     [ebp+40h], ecx
.text:00409E7C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409E80                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409E88                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409E90                 mov     [esp+0ECh+hFile], esi
.text:00409E93                 call    sub_4125C0
.text:00409E98                 mov     dword ptr [ebp+50h], 200h
.text:00409E9F                 lea     ebx, [eax+eax*4]
.text:00409EA2                 mov     edi, [esp+0ECh+var_A8]
.text:00409EA6                 lea     edx, [ebx+ebx*4]
.text:00409EA9                 mov     eax, [esp+0ECh+var_AC]
.text:00409EAD                 shl     edx, 2
.text:00409EB0                 mov     ecx, edx
.text:00409EB2                 shr     ecx, 1Fh
.text:00409EB5                 dec     ecx
.text:00409EB6                 and     ecx, edx
.text:00409EB8                 test    edi, edi
.text:00409EBA                 mov     edx, [esp+0ECh+var_A8]
.text:00409EBE                 mov     [ebp+44h], ecx
.text:00409EC1                 js      loc_409FD7
.text:00409EC7
.text:00409EC7 loc_409EC7:                             ; CODE XREF: sub_409C00+3DF↓j
.text:00409EC7                 mov     edi, [esp+0ECh+var_AC]
.text:00409ECB                 xor     esi, esi
.text:00409ECD                 mov     ecx, eax
.text:00409ECF                 shrd    ecx, edx, 9
.text:00409ED3                 mov     ebx, edx
.text:00409ED5                 mov     eax, esi
.text:00409ED7                 and     edi, 1FFh
.text:00409EDD                 sar     ebx, 9
.text:00409EE0                 or      eax, edi
.text:00409EE2                 jz      short loc_409EEA
.text:00409EE4                 add     ecx, 1
.text:00409EE7                 adc     ebx, 0
.text:00409EEA
.text:00409EEA loc_409EEA:                             ; CODE XREF: sub_409C00+2E2↑j
.text:00409EEA                 mov     [ebp+5Ch], ebx
.text:00409EED                 mov     esi, dword_414050
.text:00409EF3                 xor     edi, edi
.text:00409EF5                 mov     [ebp+58h], ecx
.text:00409EF8                 mov     ebx, dword_414050
.text:00409EFE                 mov     ecx, [esp+0ECh+var_A8]
.text:00409F02                 mov     edx, [esp+0ECh+var_AC]
.text:00409F06                 mov     [ebp+50h], ebx
.text:00409F09                 shr     ebx, 9
.text:00409F0C                 mov     [esp+0ECh+lpBytesRead], edi
.text:00409F10                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00409F14                 mov     [esp+0ECh+nBufferSize], esi
.text:00409F18                 mov     [esp+0ECh+hFile], edx
.text:00409F1B                 call    sub_412740
.text:00409F20                 mov     [esp+0ECh+lpBytesRead], edi
.text:00409F24                 mov     ecx, [esp+0ECh+var_AC]
.text:00409F28                 mov     edi, [esp+0ECh+var_A8]
.text:00409F2C                 mov     [esp+0ECh+var_BC], ebx
.text:00409F30                 mov     [esp+0ECh+var_B4], eax
.text:00409F34                 mov     [esp+0ECh+var_B0], edx
.text:00409F38                 mov     [esp+0ECh+var_B8], 0
.text:00409F40                 mov     [esp+0ECh+nBufferSize], esi
.text:00409F44                 mov     [esp+0ECh+hFile], ecx
.text:00409F47                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409F4B                 call    sub_4125C0
.text:00409F50                 mov     ebx, edx
.text:00409F52                 or      ebx, eax
.text:00409F54                 jz      short loc_409FB0
.text:00409F56                 mov     edi, [esp+0ECh+var_B4]
.text:00409F5A                 mov     esi, [esp+0ECh+var_B0]
.text:00409F5E                 mov     eax, [esp+0ECh+var_BC]
.text:00409F62                 mov     [esp+0ECh+var_C4], edi
.text:00409F66                 mov     ecx, [esp+0ECh+var_B8]
.text:00409F6A                 add     [esp+0ECh+var_C4], 1
.text:00409F6F                 mov     [esp+0ECh+var_C0], esi
.text:00409F73                 adc     [esp+0ECh+var_C0], 0
.text:00409F78                 mul     [esp+0ECh+var_C4]
.text:00409F7C                 mov     edi, [esp+0ECh+var_C0]
.text:00409F80                 mov     ebx, edx
.text:00409F82                 mov     edx, [esp+0ECh+var_C4]
.text:00409F86                 mov     esi, eax
.text:00409F88                 mov     eax, ebx
.text:00409F8A                 imul    ecx, edx
.text:00409F8D                 mov     edx, [esp+0ECh+var_BC]
.text:00409F91                 imul    edx, edi
.text:00409F94                 add     eax, ecx
.text:00409F96                 lea     edi, [edx+eax]
.text:00409F99
.text:00409F99 loc_409F99:                             ; CODE XREF: sub_409C00+3D5↓j
.text:00409F99                 mov     [ebp+58h], esi
.text:00409F9C                 xor     eax, eax
.text:00409F9E                 mov     [ebp+5Ch], edi
.text:00409FA1
.text:00409FA1 loc_409FA1:                             ; CODE XREF: sub_409C00+20↑j
.text:00409FA1                 add     esp, 0DCh
.text:00409FA7                 pop     ebx
.text:00409FA8                 pop     esi
.text:00409FA9                 pop     edi
.text:00409FAA                 pop     ebp
.text:00409FAB                 retn
.text:00409FAB ; ---------------------------------------------------------------------------
.text:00409FAC                 align 10h
.text:00409FB0
.text:00409FB0 loc_409FB0:                             ; CODE XREF: sub_409C00+354↑j
.text:00409FB0                 mov     eax, [esp+0ECh+var_B4]
.text:00409FB4                 mov     edi, [esp+0ECh+var_B8]
.text:00409FB8                 mov     ebx, [esp+0ECh+var_B4]
.text:00409FBC                 mul     [esp+0ECh+var_BC]
.text:00409FC0                 mov     ecx, [esp+0ECh+var_BC]
.text:00409FC4                 imul    ebx, edi
.text:00409FC7                 mov     esi, eax
.text:00409FC9                 mov     eax, [esp+0ECh+var_B0]
.text:00409FCD                 add     edx, ebx
.text:00409FCF                 imul    ecx, eax
.text:00409FD2                 lea     edi, [ecx+edx]
.text:00409FD5                 jmp     short loc_409F99
.text:00409FD7 ; ---------------------------------------------------------------------------
.text:00409FD7
.text:00409FD7 loc_409FD7:                             ; CODE XREF: sub_409C00+2C1↑j
.text:00409FD7                 add     eax, 1FFh
.text:00409FDC                 adc     edx, 0
.text:00409FDF                 jmp     loc_409EC7
.text:00409FE4 ; ---------------------------------------------------------------------------
.text:00409FE4
.text:00409FE4 loc_409FE4:                             ; CODE XREF: sub_409C00+A9↑j
.text:00409FE4                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00409FE7                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00409FEE                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00409FF2                 call    GetFileSize
.text:00409FF7                 sub     esp, 8
.text:00409FFA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:0040A001                 jmp     loc_409CB0
.text:0040A006 ; ---------------------------------------------------------------------------
.text:0040A006
.text:0040A006 loc_40A006:                             ; CODE XREF: sub_409C00+96↑j
.text:0040A006                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:0040A00E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040A012                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:0040A01A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:0040A01E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:0040A026                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0040A02E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:0040A036                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:0040A039                 call    PeekNamedPipe
.text:0040A03E                 sub     esp, 18h
.text:0040A041                 test    eax, eax
.text:0040A043                 jz      short loc_40A05E
.text:0040A045                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040A049                 xor     eax, eax
.text:0040A04B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:0040A052                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:0040A059                 jmp     loc_409C9C
.text:0040A05E ; ---------------------------------------------------------------------------
.text:0040A05E
.text:0040A05E loc_40A05E:                             ; CODE XREF: sub_409C00+443↑j
.text:0040A05E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040A065                 jmp     loc_409C9C
.text:0040A065 ; ---------------------------------------------------------------------------
.text:0040A06A                 align 10h
.text:0040A070
.text:0040A070 loc_40A070:                             ; CODE XREF: sub_409C00+59↑j
.text:0040A070                 mov     edx, 1000h
.text:0040A075                 jmp     loc_409C5F
.text:0040A075 ; ---------------------------------------------------------------------------
.text:0040A07A                 align 10h
.text:0040A080
.text:0040A080 loc_40A080:                             ; CODE XREF: sub_409C00+50↑j
.text:0040A080                 mov     edx, 2000h
.text:0040A085                 jmp     loc_409C5F
.text:0040A085 sub_409C00      endp
.text:0040A085
.text:0040A085 ; ---------------------------------------------------------------------------
.text:0040A08A aLnk            db '.lnk',0             ; DATA XREF: sub_40A0D0+E0↓o
.text:0040A08A                                         ; .text:0040A77A↓o ...
.text:0040A08F ; const CHAR aKernel32[]
.text:0040A08F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_40A0D0+12D↓o
.text:0040A08F                                         ; .text:0040AE2B↓o
.text:0040A098 ; const CHAR aGetcompressedf[]
.text:0040A098 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:0040A098                                         ; DATA XREF: sub_40A0D0+13E↓o
.text:0040A098                                         ; .text:0040AE3C↓o
.text:0040A0AF ; const CHAR aGetbinarytypea[]
.text:0040A0AF aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_40A0D0+333↓o
.text:0040A0AF                                         ; .text:0040A7D6↓o ...
.text:0040A0BE ; const char aPathext[]
.text:0040A0BE aPathext        db 'PATHEXT',0          ; DATA XREF: sub_40A0D0:loc_40A4B7↓o
.text:0040A0BE                                         ; .text:loc_40A880↓o ...
.text:0040A0C6                 align 10h
.text:0040A0D0
.text:0040A0D0 ; =============== S U B R O U T I N E =======================================
.text:0040A0D0
.text:0040A0D0
.text:0040A0D0 ; int __cdecl sub_40A0D0(char *String1, int)
.text:0040A0D0 sub_40A0D0      proc near               ; CODE XREF: sub_40AEB0+3CD↓p
.text:0040A0D0                                         ; sub_40B430-9B↓p
.text:0040A0D0
.text:0040A0D0 Str             = dword ptr -6Ch
.text:0040A0D0 lpProcName      = dword ptr -68h
.text:0040A0D0 var_64          = dword ptr -64h
.text:0040A0D0 var_60          = dword ptr -60h
.text:0040A0D0 var_5C          = dword ptr -5Ch
.text:0040A0D0 var_4C          = dword ptr -4Ch
.text:0040A0D0 var_48          = dword ptr -48h
.text:0040A0D0 var_44          = dword ptr -44h
.text:0040A0D0 var_40          = dword ptr -40h
.text:0040A0D0 var_3C          = dword ptr -3Ch
.text:0040A0D0 var_38          = dword ptr -38h
.text:0040A0D0 lpRootPathName  = dword ptr -30h
.text:0040A0D0 var_2C          = byte ptr -2Ch
.text:0040A0D0 var_28          = dword ptr -28h
.text:0040A0D0 var_24          = dword ptr -24h
.text:0040A0D0 var_20          = dword ptr -20h
.text:0040A0D0 var_1C          = dword ptr -1Ch
.text:0040A0D0 var_18          = byte ptr -18h
.text:0040A0D0 String1         = dword ptr  4
.text:0040A0D0 arg_4           = dword ptr  8
.text:0040A0D0
.text:0040A0D0                 push    ebp
.text:0040A0D1                 push    edi
.text:0040A0D2                 push    esi
.text:0040A0D3                 push    ebx
.text:0040A0D4                 sub     esp, 5Ch
.text:0040A0D7                 mov     edx, [esp+6Ch+String1]
.text:0040A0DB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040A0DE                 call    sub_40BEF0
.text:0040A0E3                 mov     [esp+6Ch+Str], eax
.text:0040A0E6                 call    sub_40B8D0
.text:0040A0EB                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040A0EF                 test    eax, eax
.text:0040A0F1                 jz      loc_40A323
.text:0040A0F7                 mov     [esp+6Ch+Str], eax ; Str
.text:0040A0FA                 call    strlen
.text:0040A0FF                 mov     edx, [esp+6Ch+arg_4]
.text:0040A103                 mov     ebx, eax
.text:0040A105                 mov     esi, [edx+0Ch]
.text:0040A108                 mov     edi, [edx+8]
.text:0040A10B                 mov     eax, esi
.text:0040A10D                 or      eax, edi
.text:0040A10F                 jz      loc_40A530
.text:0040A115                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:0040A119                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040A11C                 call    GetDriveTypeA
.text:0040A121                 sub     esp, 4
.text:0040A124                 cmp     eax, 4
.text:0040A127                 jz      loc_40A530
.text:0040A12D
.text:0040A12D loc_40A12D:                             ; CODE XREF: sub_40A0D0+48A↓j
.text:0040A12D                                         ; sub_40A0D0+4B2↓j
.text:0040A12D                 mov     edx, [esp+6Ch+arg_4]
.text:0040A131                 mov     esi, [edx+14h]
.text:0040A134                 mov     edi, [edx+10h]
.text:0040A137                 mov     ecx, esi
.text:0040A139                 or      ecx, edi
.text:0040A13B                 jnz     short loc_40A165
.text:0040A13D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:0040A141                 xor     esi, esi
.text:0040A143                 xor     edi, edi
.text:0040A145                 test    ebp, ebp
.text:0040A147                 jz      short loc_40A157
.text:0040A149                 movzx   ebx, byte ptr [ebp+0]
.text:0040A14D                 test    bl, bl
.text:0040A14F                 mov     cl, bl
.text:0040A151                 jnz     loc_40A4E1
.text:0040A157
.text:0040A157 loc_40A157:                             ; CODE XREF: sub_40A0D0+77↑j
.text:0040A157                 xor     eax, eax
.text:0040A159                 xor     edx, edx
.text:0040A15B
.text:0040A15B loc_40A15B:                             ; CODE XREF: sub_40A0D0+458↓j
.text:0040A15B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040A15F                 mov     [ebp+10h], eax
.text:0040A162                 mov     [ebp+14h], edx
.text:0040A165
.text:0040A165 loc_40A165:                             ; CODE XREF: sub_40A0D0+6B↑j
.text:0040A165                 mov     edi, [esp+6Ch+String1]
.text:0040A169                 xor     ebx, ebx
.text:0040A16B                 test    edi, edi
.text:0040A16D                 jz      loc_40A3E3
.text:0040A173                 mov     esi, [esp+6Ch+String1]
.text:0040A177                 cmp     byte ptr [esi], 0
.text:0040A17A                 jnz     loc_40A3F0
.text:0040A180
.text:0040A180 loc_40A180:                             ; CODE XREF: sub_40A0D0+38C↓j
.text:0040A180                                         ; sub_40A0D0+397↓j
.text:0040A180                 mov     ebp, [esp+6Ch+String1]
.text:0040A184                 test    ebp, ebp
.text:0040A186                 jz      loc_40A3E3
.text:0040A18C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040A194                 mov     edi, [esp+6Ch+String1]
.text:0040A198                 mov     [esp+6Ch+Str], edi ; Str
.text:0040A19B                 call    strrchr
.text:0040A1A0                 test    eax, eax
.text:0040A1A2                 jz      loc_40A3E3
.text:0040A1A8                 cld
.text:0040A1A9                 mov     ecx, 5
.text:0040A1AE                 mov     esi, eax
.text:0040A1B0                 mov     edi, offset aLnk ; ".lnk"
.text:0040A1B5                 repe cmpsb
.text:0040A1B7                 setz    cl
.text:0040A1BA                 movzx   eax, cl
.text:0040A1BD                 lea     esi, [esi+0]
.text:0040A1C0
.text:0040A1C0 loc_40A1C0:                             ; CODE XREF: sub_40A0D0+315↓j
.text:0040A1C0                 test    eax, eax
.text:0040A1C2                 jz      short loc_40A1CA
.text:0040A1C4                 or      ebx, 0A000h
.text:0040A1CA
.text:0040A1CA loc_40A1CA:                             ; CODE XREF: sub_40A0D0+F2↑j
.text:0040A1CA                 mov     esi, [esp+6Ch+arg_4]
.text:0040A1CE                 xor     ecx, ecx
.text:0040A1D0                 mov     edi, ds:dword_4151A0
.text:0040A1D6                 or      [esi], ebx
.text:0040A1D8                 mov     ebx, [esi+14h]
.text:0040A1DB                 mov     ebp, [esi+10h]
.text:0040A1DE                 mov     eax, ebx
.text:0040A1E0                 xor     eax, ecx
.text:0040A1E2                 xor     ebp, edi
.text:0040A1E4                 or      eax, ebp
.text:0040A1E6                 jnz     loc_40A370
.text:0040A1EC
.text:0040A1EC loc_40A1EC:                             ; CODE XREF: sub_40A0D0+30E↓j
.text:0040A1EC                 mov     ecx, dword_414050
.text:0040A1F2                 xor     esi, esi
.text:0040A1F4                 xor     edi, edi
.text:0040A1F6                 mov     edx, [esp+6Ch+arg_4]
.text:0040A1FA                 mov     [edx+50h], ecx
.text:0040A1FD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:0040A204                 call    LoadLibraryA
.text:0040A209                 sub     esp, 4
.text:0040A20C                 mov     ebp, eax
.text:0040A20E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040A216                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040A219                 call    GetProcAddress
.text:0040A21E                 sub     esp, 8
.text:0040A221                 test    eax, eax
.text:0040A223                 jz      short loc_40A258
.text:0040A225                 mov     ebx, [esp+6Ch+String1]
.text:0040A229                 lea     esi, [esp+6Ch+var_2C]
.text:0040A22D                 mov     [esp+6Ch+lpProcName], esi
.text:0040A231                 mov     [esp+6Ch+Str], ebx
.text:0040A234                 call    eax
.text:0040A236                 sub     esp, 8
.text:0040A239                 mov     ebx, eax
.text:0040A23B                 cmp     eax, 0FFFFFFFFh
.text:0040A23E                 jz      loc_40A359
.text:0040A244
.text:0040A244 loc_40A244:                             ; CODE XREF: sub_40A0D0+29A↓j
.text:0040A244                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:0040A248                 mov     ecx, ebx
.text:0040A24A                 xor     edi, edi
.text:0040A24C                 xor     ebx, ebx
.text:0040A24E                 mov     edx, esi
.text:0040A250                 mov     esi, ecx
.text:0040A252                 or      esi, edi
.text:0040A254                 mov     edi, ebx
.text:0040A256                 or      edi, edx
.text:0040A258
.text:0040A258 loc_40A258:                             ; CODE XREF: sub_40A0D0+153↑j
.text:0040A258                                         ; sub_40A0D0+294↓j
.text:0040A258                 test    ebp, ebp
.text:0040A25A                 jz      short loc_40A267
.text:0040A25C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040A25F                 call    FreeLibrary
.text:0040A264                 sub     esp, 4
.text:0040A267
.text:0040A267 loc_40A267:                             ; CODE XREF: sub_40A0D0+18A↑j
.text:0040A267                 mov     ebp, edi
.text:0040A269                 mov     edx, ebp
.text:0040A26B                 mov     edi, esi
.text:0040A26D                 or      edx, esi
.text:0040A26F                 jnz     short loc_40A27B
.text:0040A271                 mov     eax, [esp+6Ch+arg_4]
.text:0040A275                 mov     edi, [eax+30h]
.text:0040A278                 mov     ebp, [eax+34h]
.text:0040A27B
.text:0040A27B loc_40A27B:                             ; CODE XREF: sub_40A0D0+19F↑j
.text:0040A27B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040A27F                 mov     ebx, dword_414050
.text:0040A285                 xor     esi, esi
.text:0040A287                 mov     [esp+6Ch+var_60], esi
.text:0040A28B                 mov     [esp+6Ch+Str], edi
.text:0040A28E                 mov     [esp+6Ch+var_64], ebx
.text:0040A292                 call    sub_412740
.text:0040A297                 mov     [esp+6Ch+var_3C], eax
.text:0040A29B                 mov     ecx, dword_414050
.text:0040A2A1                 mov     [esp+6Ch+lpProcName], ebp
.text:0040A2A5                 mov     [esp+6Ch+var_38], edx
.text:0040A2A9                 shr     ecx, 9
.text:0040A2AC                 mov     [esp+6Ch+var_44], ecx
.text:0040A2B0                 mov     [esp+6Ch+var_40], 0
.text:0040A2B8                 mov     [esp+6Ch+var_64], ebx
.text:0040A2BC                 mov     [esp+6Ch+var_60], esi
.text:0040A2C0                 mov     [esp+6Ch+Str], edi
.text:0040A2C3                 call    sub_4125C0
.text:0040A2C8                 mov     ebp, edx
.text:0040A2CA                 or      ebp, eax
.text:0040A2CC                 jz      short loc_40A330
.text:0040A2CE                 mov     ebp, [esp+6Ch+var_3C]
.text:0040A2D2                 mov     esi, [esp+6Ch+var_38]
.text:0040A2D6                 mov     eax, [esp+6Ch+var_44]
.text:0040A2DA                 mov     [esp+6Ch+var_4C], ebp
.text:0040A2DE                 mov     ecx, [esp+6Ch+var_40]
.text:0040A2E2                 mov     ebx, [esp+6Ch+var_44]
.text:0040A2E6                 add     [esp+6Ch+var_4C], 1
.text:0040A2EB                 mov     [esp+6Ch+var_48], esi
.text:0040A2EF                 mov     edi, [esp+6Ch+var_4C]
.text:0040A2F3                 adc     [esp+6Ch+var_48], 0
.text:0040A2F8                 mul     [esp+6Ch+var_4C]
.text:0040A2FC                 imul    ecx, edi
.text:0040A2FF                 mov     esi, eax
.text:0040A301                 mov     eax, [esp+6Ch+var_48]
.text:0040A305                 add     edx, ecx
.text:0040A307                 imul    ebx, eax
.text:0040A30A                 lea     edi, [ebx+edx]
.text:0040A30D
.text:0040A30D loc_40A30D:                             ; CODE XREF: sub_40A0D0+287↓j
.text:0040A30D                 mov     ebx, [esp+6Ch+arg_4]
.text:0040A311                 mov     [ebx+58h], esi
.text:0040A314                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040A318                 mov     [ebx+5Ch], edi
.text:0040A31B                 mov     [esp+6Ch+Str], esi ; Block
.text:0040A31E                 call    free
.text:0040A323
.text:0040A323 loc_40A323:                             ; CODE XREF: sub_40A0D0+21↑j
.text:0040A323                 add     esp, 5Ch
.text:0040A326                 xor     eax, eax
.text:0040A328                 pop     ebx
.text:0040A329                 pop     esi
.text:0040A32A                 pop     edi
.text:0040A32B                 pop     ebp
.text:0040A32C                 retn
.text:0040A32C ; ---------------------------------------------------------------------------
.text:0040A32D                 align 10h
.text:0040A330
.text:0040A330 loc_40A330:                             ; CODE XREF: sub_40A0D0+1FC↑j
.text:0040A330                 mov     eax, [esp+6Ch+var_3C]
.text:0040A334                 mov     edi, [esp+6Ch+var_40]
.text:0040A338                 mov     ecx, [esp+6Ch+var_3C]
.text:0040A33C                 mul     [esp+6Ch+var_44]
.text:0040A340                 mov     ebx, [esp+6Ch+var_44]
.text:0040A344                 imul    ecx, edi
.text:0040A347                 mov     ebp, edx
.text:0040A349                 mov     esi, eax
.text:0040A34B                 mov     edx, [esp+6Ch+var_38]
.text:0040A34F                 add     ebp, ecx
.text:0040A351                 imul    ebx, edx
.text:0040A354                 lea     edi, [ebx+ebp]
.text:0040A357                 jmp     short loc_40A30D
.text:0040A359 ; ---------------------------------------------------------------------------
.text:0040A359
.text:0040A359 loc_40A359:                             ; CODE XREF: sub_40A0D0+16E↑j
.text:0040A359                 call    GetLastError
.text:0040A35E                 xor     esi, esi
.text:0040A360                 xor     edi, edi
.text:0040A362                 test    eax, eax
.text:0040A364                 jnz     loc_40A258
.text:0040A36A                 jmp     loc_40A244
.text:0040A36A ; ---------------------------------------------------------------------------
.text:0040A36F                 align 10h
.text:0040A370
.text:0040A370 loc_40A370:                             ; CODE XREF: sub_40A0D0+116↑j
.text:0040A370                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040A374                 lea     ecx, [esp+6Ch+var_20]
.text:0040A378                 lea     ebx, [esp+6Ch+var_1C]
.text:0040A37C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040A380                 lea     edi, [esp+6Ch+var_24]
.text:0040A384                 lea     ebp, [esp+6Ch+var_28]
.text:0040A388                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040A38C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040A390                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040A394                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040A397                 call    sub_40C940
.text:0040A39C                 test    eax, eax
.text:0040A39E                 jnz     short loc_40A3C0
.text:0040A3A0                 mov     [esp+6Ch+var_28], 1
.text:0040A3A8                 mov     [esp+6Ch+var_24], 200h
.text:0040A3B0                 mov     [esp+6Ch+var_20], 0
.text:0040A3B8                 mov     [esp+6Ch+var_1C], 0
.text:0040A3C0
.text:0040A3C0 loc_40A3C0:                             ; CODE XREF: sub_40A0D0+2CE↑j
.text:0040A3C0                 mov     ebp, [esp+6Ch+var_24]
.text:0040A3C4                 mov     edi, [esp+6Ch+var_28]
.text:0040A3C8                 mov     eax, [esp+6Ch+arg_4]
.text:0040A3CC                 imul    ebp, edi
.text:0040A3CF                 mov     esi, [eax+10h]
.text:0040A3D2                 mov     dword_414050, ebp
.text:0040A3D8                 mov     ds:dword_4151A0, esi
.text:0040A3DE                 jmp     loc_40A1EC
.text:0040A3E3 ; ---------------------------------------------------------------------------
.text:0040A3E3
.text:0040A3E3 loc_40A3E3:                             ; CODE XREF: sub_40A0D0+9D↑j
.text:0040A3E3                                         ; sub_40A0D0+B6↑j ...
.text:0040A3E3                 xor     eax, eax
.text:0040A3E5                 jmp     loc_40A1C0
.text:0040A3E5 ; ---------------------------------------------------------------------------
.text:0040A3EA                 align 10h
.text:0040A3F0
.text:0040A3F0 loc_40A3F0:                             ; CODE XREF: sub_40A0D0+AA↑j
.text:0040A3F0                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:0040A3F7                 xor     ebp, ebp
.text:0040A3F9                 call    GetModuleHandleA
.text:0040A3FE                 sub     esp, 4
.text:0040A401                 mov     edi, eax
.text:0040A403                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040A40B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040A40E                 call    GetProcAddress
.text:0040A413                 sub     esp, 8
.text:0040A416                 mov     edx, eax
.text:0040A418                 test    eax, eax
.text:0040A41A                 jz      short loc_40A434
.text:0040A41C                 mov     eax, [esp+6Ch+String1]
.text:0040A420                 lea     ecx, [esp+6Ch+var_18]
.text:0040A424                 mov     [esp+6Ch+lpProcName], ecx
.text:0040A428                 mov     [esp+6Ch+Str], eax
.text:0040A42B                 call    edx
.text:0040A42D                 sub     esp, 8
.text:0040A430                 test    eax, eax
.text:0040A432                 jnz     short loc_40A498
.text:0040A434
.text:0040A434 loc_40A434:                             ; CODE XREF: sub_40A0D0+34A↑j
.text:0040A434                 mov     edx, ds:Str
.text:0040A43A                 test    edx, edx
.text:0040A43C                 jz      short loc_40A4B7
.text:0040A43E
.text:0040A43E loc_40A43E:                             ; CODE XREF: sub_40A0D0+3FA↓j
.text:0040A43E                                         ; sub_40A0D0+40C↓j
.text:0040A43E                 mov     eax, [esp+6Ch+String1]
.text:0040A442                 test    eax, eax
.text:0040A444                 jz      short loc_40A44F
.text:0040A446                 mov     esi, [esp+6Ch+String1]
.text:0040A44A                 cmp     byte ptr [esi], 0
.text:0040A44D                 jnz     short loc_40A46C
.text:0040A44F
.text:0040A44F loc_40A44F:                             ; CODE XREF: sub_40A0D0+374↑j
.text:0040A44F                                         ; sub_40A0D0+3B0↓j ...
.text:0040A44F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040A452                 call    FreeLibrary
.text:0040A457                 sub     esp, 4
.text:0040A45A                 test    ebp, ebp
.text:0040A45C                 jz      loc_40A180
.text:0040A462                 mov     ebx, 49h ; 'I'
.text:0040A467                 jmp     loc_40A180
.text:0040A46C ; ---------------------------------------------------------------------------
.text:0040A46C
.text:0040A46C loc_40A46C:                             ; CODE XREF: sub_40A0D0+37D↑j
.text:0040A46C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040A46F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040A477                 call    strrchr
.text:0040A47C                 test    eax, eax
.text:0040A47E                 mov     esi, eax
.text:0040A480                 jz      short loc_40A44F
.text:0040A482                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040A486                 mov     ecx, ds:Str
.text:0040A48C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040A48F                 call    strstr
.text:0040A494                 test    eax, eax
.text:0040A496                 jz      short loc_40A49F
.text:0040A498
.text:0040A498 loc_40A498:                             ; CODE XREF: sub_40A0D0+362↑j
.text:0040A498                                         ; sub_40A0D0+3E5↓j
.text:0040A498                 mov     ebp, 1
.text:0040A49D                 jmp     short loc_40A44F
.text:0040A49F ; ---------------------------------------------------------------------------
.text:0040A49F
.text:0040A49F loc_40A49F:                             ; CODE XREF: sub_40A0D0+3C6↑j
.text:0040A49F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040A4A3                 mov     edx, off_414054 ; ".com;.exe;.bat;.cmd"
.text:0040A4A9                 mov     [esp+6Ch+Str], edx ; Str
.text:0040A4AC                 call    strstr
.text:0040A4B1                 test    eax, eax
.text:0040A4B3                 jz      short loc_40A44F
.text:0040A4B5                 jmp     short loc_40A498
.text:0040A4B7 ; ---------------------------------------------------------------------------
.text:0040A4B7
.text:0040A4B7 loc_40A4B7:                             ; CODE XREF: sub_40A0D0+36C↑j
.text:0040A4B7                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040A4BE                 call    getenv
.text:0040A4C3                 mov     ds:Str, eax
.text:0040A4C8                 test    eax, eax
.text:0040A4CA                 jnz     loc_40A43E
.text:0040A4D0                 mov     esi, off_414054 ; ".com;.exe;.bat;.cmd"
.text:0040A4D6                 mov     ds:Str, esi
.text:0040A4DC                 jmp     loc_40A43E
.text:0040A4E1 ; ---------------------------------------------------------------------------
.text:0040A4E1
.text:0040A4E1 loc_40A4E1:                             ; CODE XREF: sub_40A0D0+81↑j
.text:0040A4E1                                         ; sub_40A0D0+452↓j
.text:0040A4E1                 shld    edi, esi, 8
.text:0040A4E5                 movsx   eax, cl
.text:0040A4E8                 shl     esi, 8
.text:0040A4EB                 cdq
.text:0040A4EC                 add     esi, eax
.text:0040A4EE                 adc     edi, edx
.text:0040A4F0                 mov     edx, edi
.text:0040A4F2                 xor     ebx, ebx
.text:0040A4F4                 and     edx, 0FF000000h
.text:0040A4FA                 mov     eax, edx
.text:0040A4FC                 or      eax, ebx
.text:0040A4FE                 jz      short loc_40A519
.text:0040A500                 mov     ecx, edx
.text:0040A502                 xor     eax, eax
.text:0040A504                 shr     ecx, 10h
.text:0040A507                 mov     edx, esi
.text:0040A509                 xor     edx, ecx
.text:0040A50B                 mov     ecx, edi
.text:0040A50D                 xor     ecx, eax
.text:0040A50F                 mov     esi, edx
.text:0040A511                 mov     edi, ecx
.text:0040A513                 and     edi, 0FFFFFFh
.text:0040A519
.text:0040A519 loc_40A519:                             ; CODE XREF: sub_40A0D0+42E↑j
.text:0040A519                 inc     ebp
.text:0040A51A                 movzx   ebx, byte ptr [ebp+0]
.text:0040A51E                 test    bl, bl
.text:0040A520                 mov     cl, bl
.text:0040A522                 jnz     short loc_40A4E1
.text:0040A524                 mov     eax, esi
.text:0040A526                 mov     edx, edi
.text:0040A528                 jmp     loc_40A15B
.text:0040A528 ; ---------------------------------------------------------------------------
.text:0040A52D                 align 10h
.text:0040A530
.text:0040A530 loc_40A530:                             ; CODE XREF: sub_40A0D0+3F↑j
.text:0040A530                                         ; sub_40A0D0+57↑j
.text:0040A530                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040A534                 mov     ebp, [esp+6Ch+String1]
.text:0040A538                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040A53C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040A53F                 call    _stricmp
.text:0040A544                 test    eax, eax
.text:0040A546                 jnz     short loc_40A560
.text:0040A548                 mov     ebx, [esp+6Ch+arg_4]
.text:0040A54C                 mov     dword ptr [ebx+8], 5
.text:0040A553                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040A55A                 jmp     loc_40A12D
.text:0040A55A ; ---------------------------------------------------------------------------
.text:0040A55F                 align 10h
.text:0040A560
.text:0040A560 loc_40A560:                             ; CODE XREF: sub_40A0D0+476↑j
.text:0040A560                 mov     ebp, [esp+6Ch+String1]
.text:0040A564                 xor     esi, esi
.text:0040A566                 xor     edi, edi
.text:0040A568                 add     ebp, ebx
.text:0040A56A                 jz      short loc_40A574
.text:0040A56C                 movzx   ecx, byte ptr [ebp+0]
.text:0040A570                 test    cl, cl
.text:0040A572                 jnz     short loc_40A587
.text:0040A574
.text:0040A574 loc_40A574:                             ; CODE XREF: sub_40A0D0+49A↑j
.text:0040A574                 xor     eax, eax
.text:0040A576                 xor     edx, edx
.text:0040A578
.text:0040A578 loc_40A578:                             ; CODE XREF: sub_40A0D0+4FE↓j
.text:0040A578                 mov     ebp, [esp+6Ch+arg_4]
.text:0040A57C                 mov     [ebp+8], eax
.text:0040A57F                 mov     [ebp+0Ch], edx
.text:0040A582                 jmp     loc_40A12D
.text:0040A587 ; ---------------------------------------------------------------------------
.text:0040A587
.text:0040A587 loc_40A587:                             ; CODE XREF: sub_40A0D0+4A2↑j
.text:0040A587                                         ; sub_40A0D0+4F8↓j
.text:0040A587                 shld    edi, esi, 8
.text:0040A58B                 movsx   eax, cl
.text:0040A58E                 shl     esi, 8
.text:0040A591                 cdq
.text:0040A592                 add     esi, eax
.text:0040A594                 adc     edi, edx
.text:0040A596                 mov     edx, edi
.text:0040A598                 xor     ebx, ebx
.text:0040A59A                 and     edx, 0FF000000h
.text:0040A5A0                 mov     eax, edx
.text:0040A5A2                 or      eax, ebx
.text:0040A5A4                 jz      short loc_40A5BF
.text:0040A5A6                 mov     ecx, edx
.text:0040A5A8                 xor     eax, eax
.text:0040A5AA                 shr     ecx, 10h
.text:0040A5AD                 mov     edx, esi
.text:0040A5AF                 xor     edx, ecx
.text:0040A5B1                 mov     ecx, edi
.text:0040A5B3                 xor     ecx, eax
.text:0040A5B5                 mov     esi, edx
.text:0040A5B7                 mov     edi, ecx
.text:0040A5B9                 and     edi, 0FFFFFFh
.text:0040A5BF
.text:0040A5BF loc_40A5BF:                             ; CODE XREF: sub_40A0D0+4D4↑j
.text:0040A5BF                 inc     ebp
.text:0040A5C0                 movzx   ebx, byte ptr [ebp+0]
.text:0040A5C4                 test    bl, bl
.text:0040A5C6                 mov     cl, bl
.text:0040A5C8                 jnz     short loc_40A587
.text:0040A5CA                 mov     eax, esi
.text:0040A5CC                 mov     edx, edi
.text:0040A5CE                 jmp     short loc_40A578
.text:0040A5CE sub_40A0D0      endp
.text:0040A5CE
.text:0040A5D0
.text:0040A5D0 ; =============== S U B R O U T I N E =======================================
.text:0040A5D0
.text:0040A5D0
.text:0040A5D0 ; int __cdecl sub_40A5D0(LPCSTR)
.text:0040A5D0 sub_40A5D0      proc near               ; CODE XREF: sub_40C010+CA↓p
.text:0040A5D0
.text:0040A5D0 lpRootPathName  = dword ptr -83Ch
.text:0040A5D0 lpVolumeNameBuffer= dword ptr -838h
.text:0040A5D0 nVolumeNameSize = dword ptr -834h
.text:0040A5D0 lpVolumeSerialNumber= dword ptr -830h
.text:0040A5D0 lpMaximumComponentLength= dword ptr -82Ch
.text:0040A5D0 lpFileSystemFlags= dword ptr -828h
.text:0040A5D0 lpFileSystemNameBuffer= dword ptr -824h
.text:0040A5D0 nFileSystemNameSize= dword ptr -820h
.text:0040A5D0 VolumeSerialNumber= dword ptr -818h
.text:0040A5D0 MaximumComponentLength= dword ptr -814h
.text:0040A5D0 FileSystemFlags = dword ptr -810h
.text:0040A5D0 FileSystemNameBuffer= byte ptr -80Ch
.text:0040A5D0 VolumeNameBuffer= byte ptr -40Ch
.text:0040A5D0 var_4           = dword ptr -4
.text:0040A5D0 arg_0           = dword ptr  4
.text:0040A5D0
.text:0040A5D0                 sub     esp, 83Ch
.text:0040A5D6                 mov     [esp+83Ch+var_4], ebx
.text:0040A5DD                 mov     ebx, [esp+83Ch+arg_0]
.text:0040A5E4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040A5E7                 call    sub_40BEF0
.text:0040A5EC                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040A5EF                 call    sub_40B8D0
.text:0040A5F4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040A5F7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040A5FB                 mov     ebx, eax
.text:0040A5FD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040A601                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040A605                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040A609                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040A60D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040A611                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040A615                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040A61C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040A620                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040A624                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040A62C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040A634                 call    GetVolumeInformationA
.text:0040A639                 sub     esp, 20h
.text:0040A63C                 test    eax, eax
.text:0040A63E                 setz    cl
.text:0040A641                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040A644                 movzx   edx, cl
.text:0040A647                 dec     edx
.text:0040A648                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040A64C                 call    free
.text:0040A651                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040A655                 mov     ebx, [esp+83Ch+var_4]
.text:0040A65C                 add     esp, 83Ch
.text:0040A662                 retn
.text:0040A662 sub_40A5D0      endp
.text:0040A662
.text:0040A662 ; ---------------------------------------------------------------------------
.text:0040A663                 align 10h
.text:0040A670                 push    ebp
.text:0040A671                 push    edi
.text:0040A672                 xor     edi, edi
.text:0040A674                 push    esi
.text:0040A675                 xor     esi, esi
.text:0040A677                 push    ebx
.text:0040A678                 mov     ebp, [esp+14h]
.text:0040A67C                 test    ebp, ebp
.text:0040A67E                 jz      short loc_40A688
.text:0040A680                 movzx   ecx, byte ptr [ebp+0]
.text:0040A684                 test    cl, cl
.text:0040A686                 jnz     short loc_40A691
.text:0040A688
.text:0040A688 loc_40A688:                             ; CODE XREF: .text:0040A67E↑j
.text:0040A688                 xor     eax, eax
.text:0040A68A                 xor     edx, edx
.text:0040A68C
.text:0040A68C loc_40A68C:                             ; CODE XREF: .text:0040A6D8↓j
.text:0040A68C                 pop     ebx
.text:0040A68D                 pop     esi
.text:0040A68E                 pop     edi
.text:0040A68F                 pop     ebp
.text:0040A690                 retn
.text:0040A691 ; ---------------------------------------------------------------------------
.text:0040A691
.text:0040A691 loc_40A691:                             ; CODE XREF: .text:0040A686↑j
.text:0040A691                                         ; .text:0040A6D2↓j
.text:0040A691                 shld    edi, esi, 8
.text:0040A695                 movsx   eax, cl
.text:0040A698                 shl     esi, 8
.text:0040A69B                 cdq
.text:0040A69C                 add     esi, eax
.text:0040A69E                 adc     edi, edx
.text:0040A6A0                 mov     edx, edi
.text:0040A6A2                 xor     ebx, ebx
.text:0040A6A4                 and     edx, 0FF000000h
.text:0040A6AA                 mov     eax, edx
.text:0040A6AC                 or      eax, ebx
.text:0040A6AE                 jz      short loc_40A6C9
.text:0040A6B0                 mov     ecx, edx
.text:0040A6B2                 xor     eax, eax
.text:0040A6B4                 shr     ecx, 10h
.text:0040A6B7                 mov     edx, esi
.text:0040A6B9                 xor     edx, ecx
.text:0040A6BB                 mov     ecx, edi
.text:0040A6BD                 xor     ecx, eax
.text:0040A6BF                 mov     esi, edx
.text:0040A6C1                 mov     edi, ecx
.text:0040A6C3                 and     edi, 0FFFFFFh
.text:0040A6C9
.text:0040A6C9 loc_40A6C9:                             ; CODE XREF: .text:0040A6AE↑j
.text:0040A6C9                 inc     ebp
.text:0040A6CA                 movzx   ebx, byte ptr [ebp+0]
.text:0040A6CE                 test    bl, bl
.text:0040A6D0                 mov     cl, bl
.text:0040A6D2                 jnz     short loc_40A691
.text:0040A6D4                 mov     eax, esi
.text:0040A6D6                 mov     edx, edi
.text:0040A6D8                 jmp     short loc_40A68C
.text:0040A6D8 ; ---------------------------------------------------------------------------
.text:0040A6DA                 align 10h
.text:0040A6E0                 sub     esp, 2Ch
.text:0040A6E3                 lea     edx, [esp+24h]
.text:0040A6E7                 lea     ecx, [esp+28h]
.text:0040A6EB                 mov     [esp+0Ch], edx
.text:0040A6EF                 lea     edx, [esp+1Ch]
.text:0040A6F3                 mov     [esp+4], edx
.text:0040A6F7                 mov     edx, [esp+30h]
.text:0040A6FB                 mov     [esp+10h], ecx
.text:0040A6FF                 lea     ecx, [esp+20h]
.text:0040A703                 mov     [esp+8], ecx
.text:0040A707                 mov     [esp], edx
.text:0040A70A                 call    sub_40C940
.text:0040A70F                 test    eax, eax
.text:0040A711                 jnz     short loc_40A733
.text:0040A713                 mov     dword ptr [esp+1Ch], 1
.text:0040A71B                 mov     dword ptr [esp+20h], 200h
.text:0040A723                 mov     dword ptr [esp+24h], 0
.text:0040A72B                 mov     dword ptr [esp+28h], 0
.text:0040A733
.text:0040A733 loc_40A733:                             ; CODE XREF: .text:0040A711↑j
.text:0040A733                 mov     eax, [esp+20h]
.text:0040A737                 mov     ecx, [esp+1Ch]
.text:0040A73B                 add     esp, 2Ch
.text:0040A73E                 imul    eax, ecx
.text:0040A741                 retn
.text:0040A741 ; ---------------------------------------------------------------------------
.text:0040A742                 align 10h
.text:0040A750                 sub     esp, 1Ch
.text:0040A753                 mov     eax, [esp+20h]
.text:0040A757                 mov     [esp+14h], esi
.text:0040A75B                 mov     [esp+18h], edi
.text:0040A75F                 test    eax, eax
.text:0040A761                 jz      short loc_40A7A0
.text:0040A763                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040A76B                 mov     [esp], eax
.text:0040A76E                 call    strrchr
.text:0040A773                 test    eax, eax
.text:0040A775                 jz      short loc_40A7A0
.text:0040A777                 cld
.text:0040A778                 mov     esi, eax
.text:0040A77A                 mov     edi, offset aLnk ; ".lnk"
.text:0040A77F                 mov     ecx, 5
.text:0040A784                 repe cmpsb
.text:0040A786                 setz    dl
.text:0040A789                 movzx   eax, dl
.text:0040A78C                 lea     esi, [esi+0]
.text:0040A790
.text:0040A790 loc_40A790:                             ; CODE XREF: .text:0040A7A2↓j
.text:0040A790                 mov     esi, [esp+14h]
.text:0040A794                 mov     edi, [esp+18h]
.text:0040A798                 add     esp, 1Ch
.text:0040A79B                 retn
.text:0040A79B ; ---------------------------------------------------------------------------
.text:0040A79C                 align 10h
.text:0040A7A0
.text:0040A7A0 loc_40A7A0:                             ; CODE XREF: .text:0040A761↑j
.text:0040A7A0                                         ; .text:0040A775↑j
.text:0040A7A0                 xor     eax, eax
.text:0040A7A2                 jmp     short loc_40A790
.text:0040A7A2 ; ---------------------------------------------------------------------------
.text:0040A7A4                 align 10h
.text:0040A7B0                 sub     esp, 1Ch
.text:0040A7B3                 mov     [esp+10h], ebx
.text:0040A7B7                 mov     ebx, [esp+20h]
.text:0040A7BB                 mov     [esp+14h], esi
.text:0040A7BF                 mov     [esp+18h], edi
.text:0040A7C3                 xor     edi, edi
.text:0040A7C5                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040A7CC                 call    GetModuleHandleA
.text:0040A7D1                 sub     esp, 4
.text:0040A7D4                 mov     esi, eax
.text:0040A7D6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040A7DE                 mov     [esp], eax
.text:0040A7E1                 call    GetProcAddress
.text:0040A7E6                 sub     esp, 8
.text:0040A7E9                 test    eax, eax
.text:0040A7EB                 jz      short loc_40A801
.text:0040A7ED                 mov     [esp], ebx
.text:0040A7F0                 lea     ecx, [esp+0Ch]
.text:0040A7F4                 mov     [esp+4], ecx
.text:0040A7F8                 call    eax
.text:0040A7FA                 sub     esp, 8
.text:0040A7FD                 test    eax, eax
.text:0040A7FF                 jnz     short loc_40A860
.text:0040A801
.text:0040A801 loc_40A801:                             ; CODE XREF: .text:0040A7EB↑j
.text:0040A801                 mov     eax, ds:Str
.text:0040A806                 test    eax, eax
.text:0040A808                 jz      short loc_40A880
.text:0040A80A
.text:0040A80A loc_40A80A:                             ; CODE XREF: .text:0040A893↓j
.text:0040A80A                                         ; .text:0040A8A5↓j
.text:0040A80A                 test    ebx, ebx
.text:0040A80C                 jz      short loc_40A813
.text:0040A80E                 cmp     byte ptr [ebx], 0
.text:0040A811                 jnz     short loc_40A830
.text:0040A813
.text:0040A813 loc_40A813:                             ; CODE XREF: .text:0040A80C↑j
.text:0040A813                                         ; .text:0040A844↓j ...
.text:0040A813                 mov     [esp], esi
.text:0040A816                 call    FreeLibrary
.text:0040A81B                 sub     esp, 4
.text:0040A81E                 mov     eax, edi
.text:0040A820                 mov     ebx, [esp+10h]
.text:0040A824                 mov     esi, [esp+14h]
.text:0040A828                 mov     edi, [esp+18h]
.text:0040A82C                 add     esp, 1Ch
.text:0040A82F                 retn
.text:0040A830 ; ---------------------------------------------------------------------------
.text:0040A830
.text:0040A830 loc_40A830:                             ; CODE XREF: .text:0040A811↑j
.text:0040A830                 mov     [esp], ebx
.text:0040A833                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040A83B                 call    strrchr
.text:0040A840                 test    eax, eax
.text:0040A842                 mov     ebx, eax
.text:0040A844                 jz      short loc_40A813
.text:0040A846                 mov     [esp+4], eax
.text:0040A84A                 mov     ecx, ds:Str
.text:0040A850                 mov     [esp], ecx
.text:0040A853                 call    strstr
.text:0040A858                 test    eax, eax
.text:0040A85A                 jz      short loc_40A867
.text:0040A85C                 lea     esi, [esi+0]
.text:0040A860
.text:0040A860 loc_40A860:                             ; CODE XREF: .text:0040A7FF↑j
.text:0040A860                                         ; .text:0040A87D↓j
.text:0040A860                 mov     edi, 1
.text:0040A865                 jmp     short loc_40A813
.text:0040A867 ; ---------------------------------------------------------------------------
.text:0040A867
.text:0040A867 loc_40A867:                             ; CODE XREF: .text:0040A85A↑j
.text:0040A867                 mov     [esp+4], ebx
.text:0040A86B                 mov     ebx, off_414054 ; ".com;.exe;.bat;.cmd"
.text:0040A871                 mov     [esp], ebx
.text:0040A874                 call    strstr
.text:0040A879                 test    eax, eax
.text:0040A87B                 jz      short loc_40A813
.text:0040A87D                 jmp     short loc_40A860
.text:0040A87D ; ---------------------------------------------------------------------------
.text:0040A87F                 align 10h
.text:0040A880
.text:0040A880 loc_40A880:                             ; CODE XREF: .text:0040A808↑j
.text:0040A880                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040A887                 call    getenv
.text:0040A88C                 mov     ds:Str, eax
.text:0040A891                 test    eax, eax
.text:0040A893                 jnz     loc_40A80A
.text:0040A899                 mov     edx, off_414054 ; ".com;.exe;.bat;.cmd"
.text:0040A89F                 mov     ds:Str, edx
.text:0040A8A5                 jmp     loc_40A80A
.text:0040A8A5 ; ---------------------------------------------------------------------------
.text:0040A8AA                 align 10h
.text:0040A8B0                 sub     esp, 0Ch
.text:0040A8B3                 mov     edx, [esp+10h]
.text:0040A8B7                 mov     [esp], edx
.text:0040A8BA                 call    GetFileType
.text:0040A8BF                 sub     esp, 4
.text:0040A8C2                 xor     edx, edx
.text:0040A8C4                 cmp     eax, 2
.text:0040A8C7                 jz      short loc_40A8E0
.text:0040A8C9                 cmp     eax, 3
.text:0040A8CC                 jz      short loc_40A8D4
.text:0040A8CE
.text:0040A8CE loc_40A8CE:                             ; CODE XREF: .text:0040A8D9↓j
.text:0040A8CE                                         ; .text:0040A8E5↓j
.text:0040A8CE                 mov     eax, edx
.text:0040A8D0                 add     esp, 0Ch
.text:0040A8D3                 retn
.text:0040A8D4 ; ---------------------------------------------------------------------------
.text:0040A8D4
.text:0040A8D4 loc_40A8D4:                             ; CODE XREF: .text:0040A8CC↑j
.text:0040A8D4                 mov     edx, 1000h
.text:0040A8D9                 jmp     short loc_40A8CE
.text:0040A8D9 ; ---------------------------------------------------------------------------
.text:0040A8DB                 align 10h
.text:0040A8E0
.text:0040A8E0 loc_40A8E0:                             ; CODE XREF: .text:0040A8C7↑j
.text:0040A8E0                 mov     edx, 2000h
.text:0040A8E5                 jmp     short loc_40A8CE
.text:0040A8E5 ; ---------------------------------------------------------------------------
.text:0040A8E7                 align 10h
.text:0040A8F0                 mov     ecx, [esp+4]
.text:0040A8F4                 xor     edx, edx
.text:0040A8F6                 test    cl, 10h
.text:0040A8F9                 setz    dl
.text:0040A8FC                 dec     edx
.text:0040A8FD                 and     edx, 0FFFFC000h
.text:0040A903                 add     edx, 8000h
.text:0040A909                 or      edx, 124h
.text:0040A90F                 test    cl, 1
.text:0040A912                 movzx   eax, dx
.text:0040A915                 jnz     short locret_40A91C
.text:0040A917                 or      eax, 92h
.text:0040A91C
.text:0040A91C locret_40A91C:                          ; CODE XREF: .text:0040A915↑j
.text:0040A91C                 retn
.text:0040A91C ; ---------------------------------------------------------------------------
.text:0040A91D                 align 10h
.text:0040A920                 sub     esp, 2Ch
.text:0040A923                 mov     [esp+20h], esi
.text:0040A927                 mov     esi, [esp+30h]
.text:0040A92B                 mov     [esp+1Ch], ebx
.text:0040A92F                 xor     ebx, ebx
.text:0040A931                 test    esi, esi
.text:0040A933                 mov     [esp+24h], edi
.text:0040A937                 mov     [esp+28h], ebp
.text:0040A93B                 jz      short loc_40A990
.text:0040A93D                 cmp     byte ptr [esi], 0
.text:0040A940                 jnz     short loc_40A994
.text:0040A942
.text:0040A942 loc_40A942:                             ; CODE XREF: .text:0040A9FC↓j
.text:0040A942                                         ; .text:0040AA07↓j
.text:0040A942                 test    esi, esi
.text:0040A944                 jz      short loc_40A990
.text:0040A946                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040A94E                 mov     [esp], esi
.text:0040A951                 call    strrchr
.text:0040A956                 test    eax, eax
.text:0040A958                 jz      short loc_40A990
.text:0040A95A                 cld
.text:0040A95B                 mov     ecx, 5
.text:0040A960                 mov     esi, eax
.text:0040A962                 mov     edi, offset aLnk ; ".lnk"
.text:0040A967                 repe cmpsb
.text:0040A969                 setz    cl
.text:0040A96C                 movzx   eax, cl
.text:0040A96F                 nop
.text:0040A970
.text:0040A970 loc_40A970:                             ; CODE XREF: .text:0040A992↓j
.text:0040A970                 test    eax, eax
.text:0040A972                 jz      short loc_40A97A
.text:0040A974                 or      ebx, 0A000h
.text:0040A97A
.text:0040A97A loc_40A97A:                             ; CODE XREF: .text:0040A972↑j
.text:0040A97A                 mov     eax, ebx
.text:0040A97C                 mov     esi, [esp+20h]
.text:0040A980                 mov     ebx, [esp+1Ch]
.text:0040A984                 mov     edi, [esp+24h]
.text:0040A988                 mov     ebp, [esp+28h]
.text:0040A98C                 add     esp, 2Ch
.text:0040A98F                 retn
.text:0040A990 ; ---------------------------------------------------------------------------
.text:0040A990
.text:0040A990 loc_40A990:                             ; CODE XREF: .text:0040A93B↑j
.text:0040A990                                         ; .text:0040A944↑j ...
.text:0040A990                 xor     eax, eax
.text:0040A992                 jmp     short loc_40A970
.text:0040A994 ; ---------------------------------------------------------------------------
.text:0040A994
.text:0040A994 loc_40A994:                             ; CODE XREF: .text:0040A940↑j
.text:0040A994                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040A99B                 call    GetModuleHandleA
.text:0040A9A0                 sub     esp, 4
.text:0040A9A3                 mov     ebp, eax
.text:0040A9A5                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040A9AD                 mov     [esp], eax
.text:0040A9B0                 call    GetProcAddress
.text:0040A9B5                 sub     esp, 8
.text:0040A9B8                 test    eax, eax
.text:0040A9BA                 mov     dword ptr [esp+14h], 0
.text:0040A9C2                 jz      short loc_40A9D8
.text:0040A9C4                 mov     [esp], esi
.text:0040A9C7                 lea     ecx, [esp+18h]
.text:0040A9CB                 mov     [esp+4], ecx
.text:0040A9CF                 call    eax
.text:0040A9D1                 sub     esp, 8
.text:0040A9D4                 test    eax, eax
.text:0040A9D6                 jnz     short loc_40AA38
.text:0040A9D8
.text:0040A9D8 loc_40A9D8:                             ; CODE XREF: .text:0040A9C2↑j
.text:0040A9D8                 mov     edx, ds:Str
.text:0040A9DE                 test    edx, edx
.text:0040A9E0                 jz      short loc_40AA60
.text:0040A9E2
.text:0040A9E2 loc_40A9E2:                             ; CODE XREF: .text:0040AA73↓j
.text:0040A9E2                                         ; .text:0040AA85↓j
.text:0040A9E2                 test    esi, esi
.text:0040A9E4                 jz      short loc_40A9EB
.text:0040A9E6                 cmp     byte ptr [esi], 0
.text:0040A9E9                 jnz     short loc_40AA0C
.text:0040A9EB
.text:0040A9EB loc_40A9EB:                             ; CODE XREF: .text:0040A9E4↑j
.text:0040A9EB                                         ; .text:0040AA20↓j ...
.text:0040A9EB                 mov     [esp], ebp
.text:0040A9EE                 call    FreeLibrary
.text:0040A9F3                 sub     esp, 4
.text:0040A9F6                 mov     eax, [esp+14h]
.text:0040A9FA                 test    eax, eax
.text:0040A9FC                 jz      loc_40A942
.text:0040AA02                 mov     ebx, 49h ; 'I'
.text:0040AA07                 jmp     loc_40A942
.text:0040AA0C ; ---------------------------------------------------------------------------
.text:0040AA0C
.text:0040AA0C loc_40AA0C:                             ; CODE XREF: .text:0040A9E9↑j
.text:0040AA0C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040AA14                 mov     [esp], esi
.text:0040AA17                 call    strrchr
.text:0040AA1C                 test    eax, eax
.text:0040AA1E                 mov     edi, eax
.text:0040AA20                 jz      short loc_40A9EB
.text:0040AA22                 mov     [esp+4], eax
.text:0040AA26                 mov     edx, ds:Str
.text:0040AA2C                 mov     [esp], edx
.text:0040AA2F                 call    strstr
.text:0040AA34                 test    eax, eax
.text:0040AA36                 jz      short loc_40AA42
.text:0040AA38
.text:0040AA38 loc_40AA38:                             ; CODE XREF: .text:0040A9D6↑j
.text:0040AA38                                         ; .text:0040AA58↓j
.text:0040AA38                 mov     dword ptr [esp+14h], 1
.text:0040AA40                 jmp     short loc_40A9EB
.text:0040AA42 ; ---------------------------------------------------------------------------
.text:0040AA42
.text:0040AA42 loc_40AA42:                             ; CODE XREF: .text:0040AA36↑j
.text:0040AA42                 mov     [esp+4], edi
.text:0040AA46                 mov     edi, off_414054 ; ".com;.exe;.bat;.cmd"
.text:0040AA4C                 mov     [esp], edi
.text:0040AA4F                 call    strstr
.text:0040AA54                 test    eax, eax
.text:0040AA56                 jz      short loc_40A9EB
.text:0040AA58                 jmp     short loc_40AA38
.text:0040AA58 ; ---------------------------------------------------------------------------
.text:0040AA5A                 align 10h
.text:0040AA60
.text:0040AA60 loc_40AA60:                             ; CODE XREF: .text:0040A9E0↑j
.text:0040AA60                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040AA67                 call    getenv
.text:0040AA6C                 mov     ds:Str, eax
.text:0040AA71                 test    eax, eax
.text:0040AA73                 jnz     loc_40A9E2
.text:0040AA79                 mov     ecx, off_414054 ; ".com;.exe;.bat;.cmd"
.text:0040AA7F                 mov     ds:Str, ecx
.text:0040AA85                 jmp     loc_40A9E2
.text:0040AA85 ; ---------------------------------------------------------------------------
.text:0040AA8A                 align 10h
.text:0040AA90                 push    esi
.text:0040AA91                 push    ebx
.text:0040AA92                 sub     esp, 864h
.text:0040AA98                 mov     ebx, [esp+870h]
.text:0040AA9F                 lea     edx, [esp+830h]
.text:0040AAA6                 mov     esi, [esp+874h]
.text:0040AAAD                 mov     [esp+4], edx
.text:0040AAB1                 mov     [esp], ebx
.text:0040AAB4                 call    sub_409910
.text:0040AAB9                 xor     edx, edx
.text:0040AABB                 test    eax, eax
.text:0040AABD                 jz      loc_40ABA5
.text:0040AAC3                 mov     ecx, [esp+830h]
.text:0040AACA                 test    cl, 10h
.text:0040AACD                 mov     [esi], ecx
.text:0040AACF                 mov     eax, [esp+834h]
.text:0040AAD6                 mov     edx, [esp+838h]
.text:0040AADD                 mov     [esi+4], eax
.text:0040AAE0                 mov     [esi+8], edx
.text:0040AAE3                 mov     eax, [esp+83Ch]
.text:0040AAEA                 mov     edx, [esp+840h]
.text:0040AAF1                 mov     [esi+0Ch], eax
.text:0040AAF4                 mov     [esi+10h], edx
.text:0040AAF7                 mov     edx, [esp+848h]
.text:0040AAFE                 mov     eax, [esp+844h]
.text:0040AB05                 mov     [esi+18h], edx
.text:0040AB08                 mov     [esi+14h], eax
.text:0040AB0B                 mov     edx, [esp+84Ch]
.text:0040AB12                 mov     [esi+20h], edx
.text:0040AB15                 mov     edx, [esp+850h]
.text:0040AB1C                 mov     [esi+24h], edx
.text:0040AB1F                 jnz     loc_40ABB0
.text:0040AB25                 mov     dword ptr [esi+28h], 1
.text:0040AB2C
.text:0040AB2C loc_40AB2C:                             ; CODE XREF: .text:0040ABBB↓j
.text:0040AB2C                 mov     [esp], ebx
.text:0040AB2F                 call    sub_40BEF0
.text:0040AB34                 mov     [esp], eax
.text:0040AB37                 call    sub_40B8D0
.text:0040AB3C                 mov     [esp], eax
.text:0040AB3F                 lea     edx, [esp+30h]
.text:0040AB43                 mov     ebx, eax
.text:0040AB45                 mov     [esp+18h], edx
.text:0040AB49                 lea     ecx, [esp+2Ch]
.text:0040AB4D                 lea     edx, [esp+28h]
.text:0040AB51                 mov     [esp+14h], ecx
.text:0040AB55                 lea     ecx, [esp+24h]
.text:0040AB59                 mov     [esp+10h], edx
.text:0040AB5D                 lea     edx, [esp+430h]
.text:0040AB64                 mov     [esp+0Ch], ecx
.text:0040AB68                 mov     [esp+4], edx
.text:0040AB6C                 mov     dword ptr [esp+1Ch], 400h
.text:0040AB74                 mov     dword ptr [esp+8], 400h
.text:0040AB7C                 call    GetVolumeInformationA
.text:0040AB81                 sub     esp, 20h
.text:0040AB84                 test    eax, eax
.text:0040AB86                 setz    cl
.text:0040AB89                 mov     [esp], ebx
.text:0040AB8C                 movzx   edx, cl
.text:0040AB8F                 dec     edx
.text:0040AB90                 and     [esp+24h], edx
.text:0040AB94                 call    free
.text:0040AB99                 mov     ecx, [esp+24h]
.text:0040AB9D                 mov     edx, 1
.text:0040ABA2                 mov     [esi+1Ch], ecx
.text:0040ABA5
.text:0040ABA5 loc_40ABA5:                             ; CODE XREF: .text:0040AABD↑j
.text:0040ABA5                 add     esp, 864h
.text:0040ABAB                 mov     eax, edx
.text:0040ABAD                 pop     ebx
.text:0040ABAE                 pop     esi
.text:0040ABAF                 retn
.text:0040ABB0 ; ---------------------------------------------------------------------------
.text:0040ABB0
.text:0040ABB0 loc_40ABB0:                             ; CODE XREF: .text:0040AB1F↑j
.text:0040ABB0                 mov     [esp], ebx
.text:0040ABB3                 call    sub_409A80
.text:0040ABB8                 mov     [esi+28h], eax
.text:0040ABBB                 jmp     loc_40AB2C
.text:0040ABC0 ; ---------------------------------------------------------------------------
.text:0040ABC0                 push    ebp
.text:0040ABC1                 xor     edx, edx
.text:0040ABC3                 push    edi
.text:0040ABC4                 push    esi
.text:0040ABC5                 xor     esi, esi
.text:0040ABC7                 push    ebx
.text:0040ABC8                 sub     esp, 1Ch
.text:0040ABCB                 mov     ebx, [esp+5Ch]
.text:0040ABCF                 mov     ecx, [esp+30h]
.text:0040ABD3                 mov     edi, [esp+60h]
.text:0040ABD7                 or      esi, ebx
.text:0040ABD9                 mov     eax, [esp+4Ch]
.text:0040ABDD                 or      edi, edx
.text:0040ABDF                 mov     ebx, [esp+64h]
.text:0040ABE3                 xor     edx, edx
.text:0040ABE5                 test    cl, 10h
.text:0040ABE8                 setz    dl
.text:0040ABEB                 mov     [ebx+10h], eax
.text:0040ABEE                 mov     [ebx+8], edi
.text:0040ABF1                 mov     [ebx+0Ch], esi
.text:0040ABF4                 dec     edx
.text:0040ABF5                 and     edx, 0FFFFC000h
.text:0040ABFB                 mov     dword ptr [ebx+14h], 0
.text:0040AC02                 add     edx, 8000h
.text:0040AC08                 or      edx, 124h
.text:0040AC0E                 test    cl, 1
.text:0040AC11                 movzx   eax, dx
.text:0040AC14                 jnz     short loc_40AC1B
.text:0040AC16                 or      eax, 92h
.text:0040AC1B
.text:0040AC1B loc_40AC1B:                             ; CODE XREF: .text:0040AC14↑j
.text:0040AC1B                 mov     ebx, [esp+54h]
.text:0040AC1F                 xor     edx, edx
.text:0040AC21                 xor     ebp, ebp
.text:0040AC23                 mov     edi, [esp+50h]
.text:0040AC27                 mov     ecx, [esp+64h]
.text:0040AC2B                 mov     esi, edi
.text:0040AC2D                 or      [ecx], eax
.text:0040AC2F                 mov     edi, ebx
.text:0040AC31                 or      edi, ebp
.text:0040AC33                 mov     ebp, edx
.text:0040AC35                 mov     ebx, [esp+64h]
.text:0040AC39                 or      ebp, esi
.text:0040AC3B                 mov     esi, [esp+58h]
.text:0040AC3F                 mov     edx, [esp+40h]
.text:0040AC43                 mov     [ebx+30h], edi
.text:0040AC46                 mov     [ebx+18h], esi
.text:0040AC49                 mov     ecx, edx
.text:0040AC4B                 xor     esi, esi
.text:0040AC4D                 mov     [ebx+34h], ebp
.text:0040AC50                 xor     edx, edx
.text:0040AC52                 or      esi, ecx
.text:0040AC54                 mov     dword ptr [esp+8], 989680h
.text:0040AC5C                 mov     ebx, [esp+3Ch]
.text:0040AC60                 mov     ecx, esi
.text:0040AC62                 mov     dword ptr [esp+0Ch], 0
.text:0040AC6A                 or      ebx, edx
.text:0040AC6C                 mov     edx, ebx
.text:0040AC6E                 sub     edx, 0D53E8000h
.text:0040AC74                 sbb     ecx, 19DB1DEh
.text:0040AC7A                 mov     [esp+4], ecx
.text:0040AC7E                 mov     [esp], edx
.text:0040AC81                 call    sub_412740
.text:0040AC86                 mov     edx, eax
.text:0040AC88                 mov     ecx, [esp+64h]
.text:0040AC8C                 shr     eax, 1Fh
.text:0040AC8F                 dec     eax
.text:0040AC90                 and     edx, eax
.text:0040AC92                 mov     [ecx+38h], edx
.text:0040AC95                 mov     [esp], ebx
.text:0040AC98                 mov     [esp+4], esi
.text:0040AC9C                 mov     dword ptr [esp+8], 989680h
.text:0040ACA4                 mov     dword ptr [esp+0Ch], 0
.text:0040ACAC                 call    sub_4125C0
.text:0040ACB1                 lea     ecx, [eax+eax*4]
.text:0040ACB4                 lea     esi, [ecx+ecx*4]
.text:0040ACB7                 mov     eax, [esp+64h]
.text:0040ACBB                 shl     esi, 2
.text:0040ACBE                 mov     ebx, esi
.text:0040ACC0                 shr     ebx, 1Fh
.text:0040ACC3                 dec     ebx
.text:0040ACC4                 and     ebx, esi
.text:0040ACC6                 xor     esi, esi
.text:0040ACC8                 mov     [eax+3Ch], ebx
.text:0040ACCB                 mov     edx, [esp+38h]
.text:0040ACCF                 mov     dword ptr [esp+8], 989680h
.text:0040ACD7                 mov     ebx, [esp+34h]
.text:0040ACDB                 mov     dword ptr [esp+0Ch], 0
.text:0040ACE3                 mov     ecx, edx
.text:0040ACE5                 xor     edx, edx
.text:0040ACE7                 or      ebx, edx
.text:0040ACE9                 or      esi, ecx
.text:0040ACEB                 mov     edx, ebx
.text:0040ACED                 sub     edx, 0D53E8000h
.text:0040ACF3                 mov     ecx, esi
.text:0040ACF5                 sbb     ecx, 19DB1DEh
.text:0040ACFB                 mov     [esp+4], ecx
.text:0040ACFF                 mov     [esp], edx
.text:0040AD02                 call    sub_412740
.text:0040AD07                 mov     edx, eax
.text:0040AD09                 mov     ecx, [esp+64h]
.text:0040AD0D                 shr     eax, 1Fh
.text:0040AD10                 dec     eax
.text:0040AD11                 and     edx, eax
.text:0040AD13                 mov     [ecx+48h], edx
.text:0040AD16                 mov     [esp], ebx
.text:0040AD19                 mov     [esp+4], esi
.text:0040AD1D                 mov     dword ptr [esp+8], 989680h
.text:0040AD25                 mov     dword ptr [esp+0Ch], 0
.text:0040AD2D                 call    sub_4125C0
.text:0040AD32                 lea     edx, [eax+eax*4]
.text:0040AD35                 mov     ebx, [esp+64h]
.text:0040AD39                 lea     ecx, [edx+edx*4]
.text:0040AD3C                 shl     ecx, 2
.text:0040AD3F                 mov     esi, ecx
.text:0040AD41                 shr     esi, 1Fh
.text:0040AD44                 dec     esi
.text:0040AD45                 and     esi, ecx
.text:0040AD47                 mov     [ebx+4Ch], esi
.text:0040AD4A                 mov     edx, [esp+48h]
.text:0040AD4E                 xor     esi, esi
.text:0040AD50                 mov     dword ptr [esp+8], 989680h
.text:0040AD58                 mov     ebx, [esp+44h]
.text:0040AD5C                 mov     dword ptr [esp+0Ch], 0
.text:0040AD64                 mov     ecx, edx
.text:0040AD66                 xor     edx, edx
.text:0040AD68                 or      ebx, edx
.text:0040AD6A                 or      esi, ecx
.text:0040AD6C                 mov     edx, ebx
.text:0040AD6E                 sub     edx, 0D53E8000h
.text:0040AD74                 mov     ecx, esi
.text:0040AD76                 sbb     ecx, 19DB1DEh
.text:0040AD7C                 mov     [esp+4], ecx
.text:0040AD80                 mov     [esp], edx
.text:0040AD83                 call    sub_412740
.text:0040AD88                 mov     edx, eax
.text:0040AD8A                 mov     ecx, [esp+64h]
.text:0040AD8E                 shr     eax, 1Fh
.text:0040AD91                 dec     eax
.text:0040AD92                 and     edx, eax
.text:0040AD94                 mov     [ecx+40h], edx
.text:0040AD97                 mov     [esp+4], esi
.text:0040AD9B                 mov     dword ptr [esp+8], 989680h
.text:0040ADA3                 mov     dword ptr [esp+0Ch], 0
.text:0040ADAB                 mov     [esp], ebx
.text:0040ADAE                 call    sub_4125C0
.text:0040ADB3                 lea     edx, [eax+eax*4]
.text:0040ADB6                 lea     esi, [edx+edx*4]
.text:0040ADB9                 mov     eax, [esp+64h]
.text:0040ADBD                 shl     esi, 2
.text:0040ADC0                 mov     edx, ebp
.text:0040ADC2                 mov     ecx, esi
.text:0040ADC4                 mov     dword ptr [eax+50h], 200h
.text:0040ADCB                 shr     ecx, 1Fh
.text:0040ADCE                 dec     ecx
.text:0040ADCF                 and     ecx, esi
.text:0040ADD1                 test    ebp, ebp
.text:0040ADD3                 mov     [eax+44h], ecx
.text:0040ADD6                 mov     eax, edi
.text:0040ADD8                 js      short loc_40AE12
.text:0040ADDA
.text:0040ADDA loc_40ADDA:                             ; CODE XREF: .text:0040AE1A↓j
.text:0040ADDA                 xor     esi, esi
.text:0040ADDC                 mov     ebp, edi
.text:0040ADDE                 mov     ecx, eax
.text:0040ADE0                 shrd    ecx, edx, 9
.text:0040ADE4                 mov     ebx, edx
.text:0040ADE6                 and     ebp, 1FFh
.text:0040ADEC                 mov     eax, esi
.text:0040ADEE                 sar     ebx, 9
.text:0040ADF1                 or      eax, ebp
.text:0040ADF3                 jz      short loc_40ADFB
.text:0040ADF5                 add     ecx, 1
.text:0040ADF8                 adc     ebx, 0
.text:0040ADFB
.text:0040ADFB loc_40ADFB:                             ; CODE XREF: .text:0040ADF3↑j
.text:0040ADFB                 mov     edx, [esp+64h]
.text:0040ADFF                 mov     eax, 1
.text:0040AE04                 mov     [edx+58h], ecx
.text:0040AE07                 mov     [edx+5Ch], ebx
.text:0040AE0A                 add     esp, 1Ch
.text:0040AE0D                 pop     ebx
.text:0040AE0E                 pop     esi
.text:0040AE0F                 pop     edi
.text:0040AE10                 pop     ebp
.text:0040AE11                 retn
.text:0040AE12 ; ---------------------------------------------------------------------------
.text:0040AE12
.text:0040AE12 loc_40AE12:                             ; CODE XREF: .text:0040ADD8↑j
.text:0040AE12                 add     eax, 1FFh
.text:0040AE17                 adc     edx, 0
.text:0040AE1A                 jmp     short loc_40ADDA
.text:0040AE1A ; ---------------------------------------------------------------------------
.text:0040AE1C                 align 10h
.text:0040AE20                 push    ebp
.text:0040AE21                 push    edi
.text:0040AE22                 xor     edi, edi
.text:0040AE24                 push    esi
.text:0040AE25                 xor     esi, esi
.text:0040AE27                 push    ebx
.text:0040AE28                 sub     esp, 0Ch
.text:0040AE2B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040AE32                 call    LoadLibraryA
.text:0040AE37                 sub     esp, 4
.text:0040AE3A                 mov     ebp, eax
.text:0040AE3C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040AE44                 mov     [esp], eax
.text:0040AE47                 call    GetProcAddress
.text:0040AE4C                 sub     esp, 8
.text:0040AE4F                 test    eax, eax
.text:0040AE51                 jz      short loc_40AE82
.text:0040AE53                 lea     ecx, [esp+8]
.text:0040AE57                 mov     [esp+4], ecx
.text:0040AE5B                 mov     ecx, [esp+20h]
.text:0040AE5F                 mov     [esp], ecx
.text:0040AE62                 call    eax
.text:0040AE64                 sub     esp, 8
.text:0040AE67                 mov     ebx, eax
.text:0040AE69                 cmp     eax, 0FFFFFFFFh
.text:0040AE6C                 jz      short loc_40AE9D
.text:0040AE6E
.text:0040AE6E loc_40AE6E:                             ; CODE XREF: .text:0040AEA6↓j
.text:0040AE6E                 mov     esi, [esp+8]
.text:0040AE72                 mov     ecx, ebx
.text:0040AE74                 xor     edi, edi
.text:0040AE76                 xor     ebx, ebx
.text:0040AE78                 mov     edx, esi
.text:0040AE7A                 mov     esi, ecx
.text:0040AE7C                 or      esi, edi
.text:0040AE7E                 mov     edi, ebx
.text:0040AE80                 or      edi, edx
.text:0040AE82
.text:0040AE82 loc_40AE82:                             ; CODE XREF: .text:0040AE51↑j
.text:0040AE82                                         ; .text:0040AEA4↓j
.text:0040AE82                 test    ebp, ebp
.text:0040AE84                 jz      short loc_40AE91
.text:0040AE86                 mov     [esp], ebp
.text:0040AE89                 call    FreeLibrary
.text:0040AE8E                 sub     esp, 4
.text:0040AE91
.text:0040AE91 loc_40AE91:                             ; CODE XREF: .text:0040AE84↑j
.text:0040AE91                 add     esp, 0Ch
.text:0040AE94                 mov     eax, esi
.text:0040AE96                 mov     edx, edi
.text:0040AE98                 pop     ebx
.text:0040AE99                 pop     esi
.text:0040AE9A                 pop     edi
.text:0040AE9B                 pop     ebp
.text:0040AE9C                 retn
.text:0040AE9D ; ---------------------------------------------------------------------------
.text:0040AE9D
.text:0040AE9D loc_40AE9D:                             ; CODE XREF: .text:0040AE6C↑j
.text:0040AE9D                 call    GetLastError
.text:0040AEA2                 test    eax, eax
.text:0040AEA4                 jnz     short loc_40AE82
.text:0040AEA6                 jmp     short loc_40AE6E
.text:0040AEA6 ; ---------------------------------------------------------------------------
.text:0040AEA8                 align 10h
.text:0040AEB0
.text:0040AEB0 ; =============== S U B R O U T I N E =======================================
.text:0040AEB0
.text:0040AEB0
.text:0040AEB0 ; int __cdecl sub_40AEB0(LPCSTR lpFileName, int)
.text:0040AEB0 sub_40AEB0      proc near               ; CODE XREF: sub_40B430-3F↓p
.text:0040AEB0
.text:0040AEB0 lpRootPathName  = dword ptr -8FCh
.text:0040AEB0 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040AEB0 nVolumeNameSize = dword ptr -8F4h
.text:0040AEB0 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040AEB0 lpMaximumComponentLength= dword ptr -8ECh
.text:0040AEB0 lpFileSystemFlags= dword ptr -8E8h
.text:0040AEB0 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040AEB0 nFileSystemNameSize= dword ptr -8E0h
.text:0040AEB0 VolumeSerialNumber= dword ptr -8D8h
.text:0040AEB0 MaximumComponentLength= dword ptr -8D4h
.text:0040AEB0 FileSystemFlags = dword ptr -8D0h
.text:0040AEB0 var_8CC         = dword ptr -8CCh
.text:0040AEB0 var_8C8         = dword ptr -8C8h
.text:0040AEB0 var_8C4         = dword ptr -8C4h
.text:0040AEB0 var_8C0         = dword ptr -8C0h
.text:0040AEB0 var_8BC         = dword ptr -8BCh
.text:0040AEB0 var_8B8         = dword ptr -8B8h
.text:0040AEB0 var_8B4         = dword ptr -8B4h
.text:0040AEB0 var_8B0         = dword ptr -8B0h
.text:0040AEB0 var_8AC         = dword ptr -8ACh
.text:0040AEB0 var_8A8         = dword ptr -8A8h
.text:0040AEB0 var_8A4         = dword ptr -8A4h
.text:0040AEB0 var_8A0         = dword ptr -8A0h
.text:0040AEB0 var_89C         = dword ptr -89Ch
.text:0040AEB0 FileSystemNameBuffer= byte ptr -88Ch
.text:0040AEB0 VolumeNameBuffer= byte ptr -48Ch
.text:0040AEB0 var_8C          = dword ptr -8Ch
.text:0040AEB0 var_88          = dword ptr -88h
.text:0040AEB0 var_84          = dword ptr -84h
.text:0040AEB0 var_80          = dword ptr -80h
.text:0040AEB0 var_7C          = dword ptr -7Ch
.text:0040AEB0 var_78          = dword ptr -78h
.text:0040AEB0 var_74          = dword ptr -74h
.text:0040AEB0 var_70          = dword ptr -70h
.text:0040AEB0 var_6C          = dword ptr -6Ch
.text:0040AEB0 var_5C          = dword ptr -5Ch
.text:0040AEB0 var_58          = dword ptr -58h
.text:0040AEB0 var_54          = dword ptr -54h
.text:0040AEB0 var_50          = dword ptr -50h
.text:0040AEB0 var_4C          = dword ptr -4Ch
.text:0040AEB0 var_48          = dword ptr -48h
.text:0040AEB0 var_44          = dword ptr -44h
.text:0040AEB0 var_3C          = dword ptr -3Ch
.text:0040AEB0 var_38          = dword ptr -38h
.text:0040AEB0 var_34          = dword ptr -34h
.text:0040AEB0 lpFileName      = dword ptr  4
.text:0040AEB0 arg_4           = dword ptr  8
.text:0040AEB0
.text:0040AEB0                 push    ebp
.text:0040AEB1                 xor     eax, eax
.text:0040AEB3                 mov     ecx, 0Dh
.text:0040AEB8                 push    edi
.text:0040AEB9                 push    esi
.text:0040AEBA                 push    ebx
.text:0040AEBB                 sub     esp, 8ECh
.text:0040AEC1                 lea     edi, [esp+8FCh+var_5C]
.text:0040AEC8                 cld
.text:0040AEC9                 lea     edx, [esp+8FCh+var_8C]
.text:0040AED0                 rep stosd
.text:0040AED2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040AED6                 lea     esi, [esp+8FCh+var_5C]
.text:0040AEDD                 mov     edx, [esp+8FCh+lpFileName]
.text:0040AEE4                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:0040AEE7                 call    sub_409910
.text:0040AEEC                 test    eax, eax
.text:0040AEEE                 mov     edx, 0FFFFFFFFh
.text:0040AEF3                 jz      loc_40B284
.text:0040AEF9                 mov     edx, [esp+8FCh+var_88]
.text:0040AF00                 mov     ebp, [esp+8FCh+var_84]
.text:0040AF07                 mov     edi, [esp+8FCh+var_80]
.text:0040AF0E                 mov     [esp+8FCh+var_58], edx
.text:0040AF15                 mov     ecx, [esp+8FCh+var_7C]
.text:0040AF1C                 mov     ebx, [esp+8FCh+var_8C]
.text:0040AF23                 mov     [esp+8FCh+var_54], ebp
.text:0040AF2A                 mov     edx, [esp+8FCh+var_78]
.text:0040AF31                 mov     ebp, [esp+8FCh+var_74]
.text:0040AF38                 mov     [esp+8FCh+var_50], edi
.text:0040AF3F                 test    bl, 10h
.text:0040AF42                 mov     edi, [esp+8FCh+var_70]
.text:0040AF49                 mov     [esp+8FCh+var_4C], ecx
.text:0040AF50                 mov     ecx, [esp+8FCh+var_6C]
.text:0040AF57                 mov     [esp+8FCh+var_5C], ebx
.text:0040AF5E                 mov     [esp+8FCh+var_48], edx
.text:0040AF65                 mov     [esp+8FCh+var_44], ebp
.text:0040AF6C                 mov     [esp+8FCh+var_3C], edi
.text:0040AF73                 mov     [esp+8FCh+var_38], ecx
.text:0040AF7A                 jnz     loc_40B2A0
.text:0040AF80                 mov     ebx, 1
.text:0040AF85                 mov     [esp+8FCh+var_34], ebx
.text:0040AF8C
.text:0040AF8C loc_40AF8C:                             ; CODE XREF: sub_40AEB0+406↓j
.text:0040AF8C                 mov     eax, [esp+8FCh+lpFileName]
.text:0040AF93                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040AF97                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040AF9B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040AF9E                 call    sub_40BEF0
.text:0040AFA3                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040AFA6                 call    sub_40B8D0
.text:0040AFAB                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040AFAF                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040AFB3                 mov     ebp, eax
.text:0040AFB5                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040AFB9                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040AFBD                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040AFC4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040AFC8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040AFCC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040AFD0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040AFD8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040AFE0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040AFE3                 call    GetVolumeInformationA
.text:0040AFE8                 sub     esp, 20h
.text:0040AFEB                 test    eax, eax
.text:0040AFED                 lea     edi, [esp+8FCh+var_8CC]
.text:0040AFF1                 setz    bl
.text:0040AFF4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040AFF7                 xor     ebp, ebp
.text:0040AFF9                 movzx   edx, bl
.text:0040AFFC                 dec     edx
.text:0040AFFD                 xor     ebx, ebx
.text:0040AFFF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040B003                 call    free
.text:0040B008                 cld
.text:0040B009                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040B00D                 mov     [esi+1Ch], ecx
.text:0040B010                 mov     ecx, 0Dh
.text:0040B015                 rep movsd
.text:0040B017                 mov     edi, [esp+8FCh+var_8A0]
.text:0040B01B                 mov     edx, [esp+8FCh+var_89C]
.text:0040B01F                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040B023                 or      ebp, edi
.text:0040B025                 mov     esi, [esp+8FCh+var_8B0]
.text:0040B029                 mov     edi, [esp+8FCh+arg_4]
.text:0040B030                 or      edx, ebx
.text:0040B032                 mov     [edi+8], edx
.text:0040B035                 xor     edx, edx
.text:0040B037                 test    cl, 10h
.text:0040B03A                 setz    dl
.text:0040B03D                 mov     [edi+0Ch], ebp
.text:0040B040                 mov     [edi+10h], esi
.text:0040B043                 mov     dword ptr [edi+14h], 0
.text:0040B04A                 dec     edx
.text:0040B04B                 and     edx, 0FFFFC000h
.text:0040B051                 add     edx, 8000h
.text:0040B057                 or      edx, 124h
.text:0040B05D                 test    cl, 1
.text:0040B060                 movzx   eax, dx
.text:0040B063                 jnz     short loc_40B06A
.text:0040B065                 or      eax, 92h
.text:0040B06A
.text:0040B06A loc_40B06A:                             ; CODE XREF: sub_40AEB0+1B3↑j
.text:0040B06A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040B06E                 xor     edx, edx
.text:0040B070                 xor     ebp, ebp
.text:0040B072                 mov     edi, [esp+8FCh+var_8AC]
.text:0040B076                 mov     ecx, [esp+8FCh+arg_4]
.text:0040B07D                 mov     esi, edi
.text:0040B07F                 or      [ecx], eax
.text:0040B081                 mov     edi, ebx
.text:0040B083                 or      edi, ebp
.text:0040B085                 mov     ebp, edx
.text:0040B087                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040B08B                 or      ebp, esi
.text:0040B08D                 mov     esi, [esp+8FCh+arg_4]
.text:0040B094                 mov     edx, [esp+8FCh+var_8BC]
.text:0040B098                 mov     [esi+18h], ebx
.text:0040B09B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040B09F                 mov     ecx, edx
.text:0040B0A1                 mov     [esi+30h], edi
.text:0040B0A4                 xor     edx, edx
.text:0040B0A6                 mov     [esi+34h], ebp
.text:0040B0A9                 or      ebx, edx
.text:0040B0AB                 xor     esi, esi
.text:0040B0AD                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040B0B5                 or      esi, ecx
.text:0040B0B7                 mov     edx, ebx
.text:0040B0B9                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040B0C1                 sub     edx, 0D53E8000h
.text:0040B0C7                 mov     ecx, esi
.text:0040B0C9                 sbb     ecx, 19DB1DEh
.text:0040B0CF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040B0D3                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040B0D6                 call    sub_412740
.text:0040B0DB                 mov     edx, eax
.text:0040B0DD                 mov     ecx, [esp+8FCh+arg_4]
.text:0040B0E4                 shr     eax, 1Fh
.text:0040B0E7                 dec     eax
.text:0040B0E8                 and     edx, eax
.text:0040B0EA                 mov     [ecx+38h], edx
.text:0040B0ED                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040B0F0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040B0F4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040B0FC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040B104                 call    sub_4125C0
.text:0040B109                 lea     ecx, [eax+eax*4]
.text:0040B10C                 lea     ebx, [ecx+ecx*4]
.text:0040B10F                 mov     eax, [esp+8FCh+arg_4]
.text:0040B116                 shl     ebx, 2
.text:0040B119                 mov     esi, ebx
.text:0040B11B                 shr     esi, 1Fh
.text:0040B11E                 dec     esi
.text:0040B11F                 and     esi, ebx
.text:0040B121                 mov     [eax+3Ch], esi
.text:0040B124                 mov     edx, [esp+8FCh+var_8C4]
.text:0040B128                 xor     esi, esi
.text:0040B12A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040B132                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040B136                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040B13E                 mov     ecx, edx
.text:0040B140                 xor     edx, edx
.text:0040B142                 or      ebx, edx
.text:0040B144                 or      esi, ecx
.text:0040B146                 mov     edx, ebx
.text:0040B148                 sub     edx, 0D53E8000h
.text:0040B14E                 mov     ecx, esi
.text:0040B150                 sbb     ecx, 19DB1DEh
.text:0040B156                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040B15A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040B15D                 call    sub_412740
.text:0040B162                 mov     edx, eax
.text:0040B164                 mov     ecx, [esp+8FCh+arg_4]
.text:0040B16B                 shr     eax, 1Fh
.text:0040B16E                 dec     eax
.text:0040B16F                 and     edx, eax
.text:0040B171                 mov     [ecx+48h], edx
.text:0040B174                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040B177                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040B17B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040B183                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040B18B                 call    sub_4125C0
.text:0040B190                 lea     ecx, [eax+eax*4]
.text:0040B193                 lea     ebx, [ecx+ecx*4]
.text:0040B196                 mov     eax, [esp+8FCh+arg_4]
.text:0040B19D                 shl     ebx, 2
.text:0040B1A0                 mov     esi, ebx
.text:0040B1A2                 shr     esi, 1Fh
.text:0040B1A5                 dec     esi
.text:0040B1A6                 and     esi, ebx
.text:0040B1A8                 mov     [eax+4Ch], esi
.text:0040B1AB                 mov     edx, [esp+8FCh+var_8B4]
.text:0040B1AF                 xor     esi, esi
.text:0040B1B1                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040B1B9                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040B1BD                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040B1C5                 mov     ecx, edx
.text:0040B1C7                 xor     edx, edx
.text:0040B1C9                 or      ebx, edx
.text:0040B1CB                 or      esi, ecx
.text:0040B1CD                 mov     edx, ebx
.text:0040B1CF                 sub     edx, 0D53E8000h
.text:0040B1D5                 mov     ecx, esi
.text:0040B1D7                 sbb     ecx, 19DB1DEh
.text:0040B1DD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040B1E1                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040B1E4                 call    sub_412740
.text:0040B1E9                 mov     edx, eax
.text:0040B1EB                 mov     ecx, [esp+8FCh+arg_4]
.text:0040B1F2                 shr     eax, 1Fh
.text:0040B1F5                 dec     eax
.text:0040B1F6                 and     edx, eax
.text:0040B1F8                 mov     [ecx+40h], edx
.text:0040B1FB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040B1FE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040B202                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040B20A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040B212                 call    sub_4125C0
.text:0040B217                 lea     ebx, [eax+eax*4]
.text:0040B21A                 mov     esi, [esp+8FCh+arg_4]
.text:0040B221                 lea     edx, [ebx+ebx*4]
.text:0040B224                 shl     edx, 2
.text:0040B227                 mov     eax, edi
.text:0040B229                 mov     ecx, edx
.text:0040B22B                 mov     dword ptr [esi+50h], 200h
.text:0040B232                 shr     ecx, 1Fh
.text:0040B235                 dec     ecx
.text:0040B236                 and     ecx, edx
.text:0040B238                 test    ebp, ebp
.text:0040B23A                 mov     edx, ebp
.text:0040B23C                 mov     [esi+44h], ecx
.text:0040B23F                 js      short loc_40B291
.text:0040B241
.text:0040B241 loc_40B241:                             ; CODE XREF: sub_40AEB0+3E9↓j
.text:0040B241                 xor     esi, esi
.text:0040B243                 mov     ebp, edi
.text:0040B245                 mov     ecx, eax
.text:0040B247                 shrd    ecx, edx, 9
.text:0040B24B                 mov     ebx, edx
.text:0040B24D                 and     ebp, 1FFh
.text:0040B253                 mov     eax, esi
.text:0040B255                 sar     ebx, 9
.text:0040B258                 or      eax, ebp
.text:0040B25A                 jz      short loc_40B262
.text:0040B25C                 add     ecx, 1
.text:0040B25F                 adc     ebx, 0
.text:0040B262
.text:0040B262 loc_40B262:                             ; CODE XREF: sub_40AEB0+3AA↑j
.text:0040B262                 mov     edx, [esp+8FCh+arg_4]
.text:0040B269                 mov     [edx+5Ch], ebx
.text:0040B26C                 mov     ebx, [esp+8FCh+lpFileName]
.text:0040B273                 mov     [edx+58h], ecx
.text:0040B276                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040B27A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040B27D                 call    sub_40A0D0
.text:0040B282                 xor     edx, edx
.text:0040B284
.text:0040B284 loc_40B284:                             ; CODE XREF: sub_40AEB0+43↑j
.text:0040B284                 add     esp, 8ECh
.text:0040B28A                 mov     eax, edx
.text:0040B28C                 pop     ebx
.text:0040B28D                 pop     esi
.text:0040B28E                 pop     edi
.text:0040B28F                 pop     ebp
.text:0040B290                 retn
.text:0040B291 ; ---------------------------------------------------------------------------
.text:0040B291
.text:0040B291 loc_40B291:                             ; CODE XREF: sub_40AEB0+38F↑j
.text:0040B291                 add     eax, 1FFh
.text:0040B296                 adc     edx, 0
.text:0040B299                 jmp     short loc_40B241
.text:0040B299 ; ---------------------------------------------------------------------------
.text:0040B29B                 align 10h
.text:0040B2A0
.text:0040B2A0 loc_40B2A0:                             ; CODE XREF: sub_40AEB0+CA↑j
.text:0040B2A0                 mov     eax, [esp+8FCh+lpFileName]
.text:0040B2A7                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040B2AA                 call    sub_409A80
.text:0040B2AF                 mov     [esp+8FCh+var_34], eax
.text:0040B2B6                 jmp     loc_40AF8C
.text:0040B2B6 sub_40AEB0      endp
.text:0040B2B6
.text:0040B2B6 ; ---------------------------------------------------------------------------
.text:0040B2BB                 align 10h
.text:0040B2C0 ; START OF FUNCTION CHUNK FOR sub_40B430
.text:0040B2C0
.text:0040B2C0 loc_40B2C0:                             ; CODE XREF: sub_40B430+26↓j
.text:0040B2C0                 cld
.text:0040B2C1                 sub     esp, 2Ch
.text:0040B2C4                 xor     eax, eax
.text:0040B2C6                 mov     [esp+2Ch+var_10], ebx
.text:0040B2CA                 mov     ecx, 18h
.text:0040B2CF                 mov     ebx, [esp+2Ch+arg_0]
.text:0040B2D3                 mov     [esp+2Ch+var_C], esi
.text:0040B2D7                 mov     esi, [esp+2Ch+arg_4]
.text:0040B2DB                 test    ebx, ebx
.text:0040B2DD                 mov     [esp+2Ch+var_8], edi
.text:0040B2E1                 mov     edi, esi
.text:0040B2E3                 mov     [esp+2Ch+var_4], ebp
.text:0040B2E7                 rep stosd
.text:0040B2E9                 jz      short loc_40B2F0
.text:0040B2EB                 cmp     byte ptr [ebx], 0
.text:0040B2EE                 jnz     short loc_40B308
.text:0040B2F0
.text:0040B2F0 loc_40B2F0:                             ; CODE XREF: sub_40B430-147↑j
.text:0040B2F0                 xor     edx, edx
.text:0040B2F2
.text:0040B2F2 loc_40B2F2:                             ; CODE XREF: sub_40B430-111↓j
.text:0040B2F2                                         ; sub_40B430-68↓j
.text:0040B2F2                 mov     ebx, [esp+2Ch+var_10]
.text:0040B2F6                 mov     eax, edx
.text:0040B2F8                 mov     esi, [esp+2Ch+var_C]
.text:0040B2FC                 mov     edi, [esp+2Ch+var_8]
.text:0040B300                 mov     ebp, [esp+2Ch+var_4]
.text:0040B304                 add     esp, 2Ch
.text:0040B307                 retn
.text:0040B308 ; ---------------------------------------------------------------------------
.text:0040B308
.text:0040B308 loc_40B308:                             ; CODE XREF: sub_40B430-142↑j
.text:0040B308                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040B310                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040B313                 call    sub_40D720
.text:0040B318                 test    eax, eax
.text:0040B31A                 mov     edx, 0FFFFFFFFh
.text:0040B31F                 jnz     short loc_40B2F2
.text:0040B321                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040B324                 call    sub_40D5D0
.text:0040B329                 mov     [esp+2Ch+lpFileName], eax
.text:0040B32C                 call    sub_40B8D0
.text:0040B331                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040B334                 mov     ebp, eax
.text:0040B336                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040B33E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040B346                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040B34E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040B356                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040B35E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040B366                 call    CreateFileA
.text:0040B36B                 sub     esp, 1Ch
.text:0040B36E                 mov     ebx, eax
.text:0040B370                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040B374                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:0040B377                 call    sub_409C00
.text:0040B37C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040B37F                 mov     edi, eax
.text:0040B381                 call    CloseHandle
.text:0040B386                 sub     esp, 4
.text:0040B389                 cmp     edi, 0FFFFFFFFh
.text:0040B38C                 jz      short loc_40B3EA
.text:0040B38E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040B392                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040B395                 call    sub_40A0D0
.text:0040B39A
.text:0040B39A loc_40B39A:                             ; CODE XREF: sub_40B430-38↓j
.text:0040B39A                 mov     edx, [esi]
.text:0040B39C                 and     edx, 0F000h
.text:0040B3A2                 cmp     edx, 4000h
.text:0040B3A8                 jz      short loc_40B3DD
.text:0040B3AA
.text:0040B3AA loc_40B3AA:                             ; CODE XREF: sub_40B430-48↓j
.text:0040B3AA                 cmp     edi, 0FFFFFFFFh
.text:0040B3AD                 jz      short loc_40B3CD
.text:0040B3AF
.text:0040B3AF loc_40B3AF:                             ; CODE XREF: sub_40B430-55↓j
.text:0040B3AF                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040B3B6                 call    SetErrorMode
.text:0040B3BB                 sub     esp, 4
.text:0040B3BE                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040B3C1                 call    free
.text:0040B3C6                 mov     edx, edi
.text:0040B3C8                 jmp     loc_40B2F2
.text:0040B3CD ; ---------------------------------------------------------------------------
.text:0040B3CD
.text:0040B3CD loc_40B3CD:                             ; CODE XREF: sub_40B430-83↑j
.text:0040B3CD                 call    sub_40D580
.text:0040B3D2                 mov     esi, eax
.text:0040B3D4                 call    _errno
.text:0040B3D9                 mov     [eax], esi
.text:0040B3DB                 jmp     short loc_40B3AF
.text:0040B3DD ; ---------------------------------------------------------------------------
.text:0040B3DD
.text:0040B3DD loc_40B3DD:                             ; CODE XREF: sub_40B430-88↑j
.text:0040B3DD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:0040B3E0                 call    sub_409A80
.text:0040B3E5                 mov     [esi+18h], eax
.text:0040B3E8                 jmp     short loc_40B3AA
.text:0040B3EA ; ---------------------------------------------------------------------------
.text:0040B3EA
.text:0040B3EA loc_40B3EA:                             ; CODE XREF: sub_40B430-A4↑j
.text:0040B3EA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040B3EE                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:0040B3F1                 call    sub_40AEB0
.text:0040B3F6                 mov     edi, eax
.text:0040B3F8                 jmp     short loc_40B39A
.text:0040B3F8 ; END OF FUNCTION CHUNK FOR sub_40B430
.text:0040B3F8 ; ---------------------------------------------------------------------------
.text:0040B3FA                 align 10h
.text:0040B400
.text:0040B400 ; =============== S U B R O U T I N E =======================================
.text:0040B400
.text:0040B400
.text:0040B400 sub_40B400      proc near               ; CODE XREF: sub_404440+E3↑p
.text:0040B400                                         ; sub_404440+12A↑p
.text:0040B400
.text:0040B400 var_C           = dword ptr -0Ch
.text:0040B400 var_8           = dword ptr -8
.text:0040B400 var_4           = dword ptr -4
.text:0040B400 arg_0           = dword ptr  4
.text:0040B400 arg_4           = dword ptr  8
.text:0040B400
.text:0040B400                 sub     esp, 0Ch
.text:0040B403                 mov     edx, [esp+0Ch+arg_4]
.text:0040B407                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040B40E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040B412                 mov     edx, [esp+0Ch+arg_0]
.text:0040B416                 mov     [esp+0Ch+var_8], edx ; int
.text:0040B41A                 call    sub_40B430
.text:0040B41F                 add     esp, 0Ch
.text:0040B422                 retn
.text:0040B422 sub_40B400      endp
.text:0040B422
.text:0040B422 ; ---------------------------------------------------------------------------
.text:0040B423                 align 10h
.text:0040B430
.text:0040B430 ; =============== S U B R O U T I N E =======================================
.text:0040B430
.text:0040B430
.text:0040B430 ; int __cdecl sub_40B430(LPCSTR, int, int)
.text:0040B430 sub_40B430      proc near               ; CODE XREF: sub_40B400+1A↑p
.text:0040B430                                         ; sub_40BD00+90↓p ...
.text:0040B430
.text:0040B430 lpFileName      = dword ptr -2Ch
.text:0040B430 dwDesiredAccess = dword ptr -28h
.text:0040B430 dwShareMode     = dword ptr -24h
.text:0040B430 lpSecurityAttributes= dword ptr -20h
.text:0040B430 dwCreationDisposition= dword ptr -1Ch
.text:0040B430 dwFlagsAndAttributes= dword ptr -18h
.text:0040B430 hTemplateFile   = dword ptr -14h
.text:0040B430 var_10          = dword ptr -10h
.text:0040B430 var_C           = dword ptr -0Ch
.text:0040B430 var_8           = dword ptr -8
.text:0040B430 var_4           = dword ptr -4
.text:0040B430 arg_0           = dword ptr  4
.text:0040B430 arg_4           = dword ptr  8
.text:0040B430 arg_8           = dword ptr  0Ch
.text:0040B430
.text:0040B430 ; FUNCTION CHUNK AT .text:0040B2C0 SIZE 0000013A BYTES
.text:0040B430
.text:0040B430                 sub     esp, 0Ch
.text:0040B433                 mov     ecx, [esp+0Ch+arg_0]
.text:0040B437                 mov     edx, [esp+0Ch+arg_4]
.text:0040B43B                 mov     eax, [esp+0Ch+arg_8]
.text:0040B43F                 test    ecx, ecx
.text:0040B441                 jnz     short loc_40B460
.text:0040B443                 test    edx, edx
.text:0040B445                 jz      short loc_40B460
.text:0040B447                 test    eax, eax
.text:0040B449                 jz      short loc_40B460
.text:0040B44B                 mov     [esp+0Ch+arg_4], eax
.text:0040B44F                 mov     [esp+0Ch+arg_0], edx
.text:0040B453                 add     esp, 0Ch
.text:0040B456                 jmp     loc_40B2C0
.text:0040B456 ; ---------------------------------------------------------------------------
.text:0040B45B                 align 10h
.text:0040B460
.text:0040B460 loc_40B460:                             ; CODE XREF: sub_40B430+11↑j
.text:0040B460                                         ; sub_40B430+15↑j ...
.text:0040B460                 call    _errno
.text:0040B465                 mov     dword ptr [eax], 16h
.text:0040B46B                 mov     eax, 0FFFFFFFFh
.text:0040B470                 add     esp, 0Ch
.text:0040B473                 retn
.text:0040B473 sub_40B430      endp
.text:0040B473
.text:0040B473 ; ---------------------------------------------------------------------------
.text:0040B474                 align 10h
.text:0040B480
.text:0040B480 ; =============== S U B R O U T I N E =======================================
.text:0040B480
.text:0040B480 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040B480
.text:0040B480 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040B480 _win32_longpath proc near               ; CODE XREF: .text:0040BC44↓p
.text:0040B480
.text:0040B480 C               = dword ptr -278h
.text:0040B480 lpFindFileData  = dword ptr -274h
.text:0040B480 Destination     = byte ptr -268h
.text:0040B480 var_267         = byte ptr -267h
.text:0040B480 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040B480 lpFileName      = dword ptr  8
.text:0040B480
.text:0040B480                 push    ebp
.text:0040B481                 xor     eax, eax
.text:0040B483                 push    edi
.text:0040B484                 push    esi
.text:0040B485                 push    ebx
.text:0040B486                 sub     esp, 26Ch
.text:0040B48C                 mov     esi, [esp+278h+lpFileName]
.text:0040B493                 lea     ebp, [esp+278h+Destination]
.text:0040B497                 test    esi, esi
.text:0040B499                 jz      loc_40B5F7
.text:0040B49F                 movsx   edx, byte ptr [esi]
.text:0040B4A2                 mov     [esp+278h+C], edx ; C
.text:0040B4A5                 call    isalpha
.text:0040B4AA                 test    eax, eax
.text:0040B4AC                 jz      short loc_40B4BF
.text:0040B4AE                 mov     eax, [esp+278h+lpFileName]
.text:0040B4B5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040B4B9                 jz      loc_40B7FB
.text:0040B4BF
.text:0040B4BF loc_40B4BF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040B4BF                 mov     edx, [esp+278h+lpFileName]
.text:0040B4C6                 movzx   eax, byte ptr [edx]
.text:0040B4C9                 cmp     al, 2Fh ; '/'
.text:0040B4CB                 jz      loc_40B6DB
.text:0040B4D1                 cmp     al, 5Ch ; '\'
.text:0040B4D3                 jz      loc_40B6DB
.text:0040B4D9
.text:0040B4D9 loc_40B4D9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040B4D9                                         ; _win32_longpath+2B1↓j ...
.text:0040B4D9                 mov     [ebp+268h+Destination], 0
.text:0040B4DD                 movzx   ebx, byte ptr [esi]
.text:0040B4E0                 test    bl, bl
.text:0040B4E2                 jz      loc_40B5D9
.text:0040B4E8                 nop
.text:0040B4E9                 lea     esi, [esi+0]
.text:0040B4F0
.text:0040B4F0 loc_40B4F0:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040B4F0                 cmp     bl, 2Fh ; '/'
.text:0040B4F3                 jz      loc_40B690
.text:0040B4F9                 cmp     bl, 5Ch ; '\'
.text:0040B4FC                 jz      loc_40B690
.text:0040B502
.text:0040B502 loc_40B502:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040B502                                         ; _win32_longpath+22C↓j ...
.text:0040B502                 cmp     bl, 2Eh ; '.'
.text:0040B505                 jz      loc_40B630
.text:0040B50B
.text:0040B50B loc_40B50B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040B50B                                         ; _win32_longpath+203↓j
.text:0040B50B                 test    bl, bl
.text:0040B50D                 jz      loc_40B5D9
.text:0040B513                 cmp     bl, 2Fh ; '/'
.text:0040B516                 jz      short loc_40B532
.text:0040B518                 cmp     bl, 5Ch ; '\'
.text:0040B51B                 jz      short loc_40B532
.text:0040B51D                 lea     esi, [esi+0]
.text:0040B520
.text:0040B520 loc_40B520:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040B520                 inc     esi
.text:0040B521                 movzx   ebx, byte ptr [esi]
.text:0040B524                 test    bl, bl
.text:0040B526                 jz      short loc_40B532
.text:0040B528                 cmp     bl, 2Fh ; '/'
.text:0040B52B                 jz      short loc_40B532
.text:0040B52D                 cmp     bl, 5Ch ; '\'
.text:0040B530                 jnz     short loc_40B520
.text:0040B532
.text:0040B532 loc_40B532:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040B532                                         ; _win32_longpath+9B↑j ...
.text:0040B532                 mov     byte ptr [esi], 0
.text:0040B535                 lea     edx, [esp+278h+FindFileData]
.text:0040B53C                 mov     eax, [esp+278h+lpFileName]
.text:0040B543                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040B547                 mov     [esp+278h+C], eax ; lpFileName
.text:0040B54A                 call    FindFirstFileA
.text:0040B54F                 mov     [esi], bl
.text:0040B551                 sub     esp, 8
.text:0040B554                 mov     edi, eax
.text:0040B556                 cmp     eax, 0FFFFFFFFh
.text:0040B559                 jz      loc_40B61C
.text:0040B55F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040B566                 mov     ecx, ebx
.text:0040B568                 nop
.text:0040B569                 lea     esi, [esi+0]
.text:0040B570
.text:0040B570 loc_40B570:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040B570                 mov     eax, [ebx]
.text:0040B572                 add     ebx, 4
.text:0040B575                 lea     edx, [eax-1010101h]
.text:0040B57B                 not     eax
.text:0040B57D                 and     edx, eax
.text:0040B57F                 and     edx, 80808080h
.text:0040B585                 jz      short loc_40B570
.text:0040B587                 test    edx, 8080h
.text:0040B58D                 jnz     short loc_40B595
.text:0040B58F                 shr     edx, 10h
.text:0040B592                 add     ebx, 2
.text:0040B595
.text:0040B595 loc_40B595:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040B595                 add     dl, dl
.text:0040B597                 sbb     ebx, 3
.text:0040B59A                 sub     ebx, ecx
.text:0040B59C                 lea     ecx, [esp+278h+Destination]
.text:0040B5A0                 sub     ecx, ebp
.text:0040B5A2                 add     ecx, 105h
.text:0040B5A8                 cmp     ecx, ebx
.text:0040B5AA                 jle     short loc_40B602
.text:0040B5AC                 mov     [esp+278h+C], ebp ; Destination
.text:0040B5AF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040B5B6                 add     ebp, ebx
.text:0040B5B8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040B5BC                 call    strcpy
.text:0040B5C1                 mov     [esp+278h+C], edi ; hFindFile
.text:0040B5C4                 call    FindClose
.text:0040B5C9                 sub     esp, 4
.text:0040B5CC
.text:0040B5CC loc_40B5CC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040B5CC                 movzx   ecx, byte ptr [esi]
.text:0040B5CF                 test    cl, cl
.text:0040B5D1                 mov     bl, cl
.text:0040B5D3                 jnz     loc_40B4F0
.text:0040B5D9
.text:0040B5D9 loc_40B5D9:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040B5D9                                         ; _win32_longpath+8D↑j
.text:0040B5D9                 mov     esi, [esp+278h+lpFileName]
.text:0040B5E0                 lea     ebp, [esp+278h+Destination]
.text:0040B5E4                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040B5E8                 mov     [esp+278h+C], esi ; Destination
.text:0040B5EB                 call    strcpy
.text:0040B5F0                 mov     eax, [esp+278h+lpFileName]
.text:0040B5F7
.text:0040B5F7 loc_40B5F7:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040B5F7                                         ; _win32_longpath+19A↓j
.text:0040B5F7                 add     esp, 26Ch
.text:0040B5FD                 pop     ebx
.text:0040B5FE                 pop     esi
.text:0040B5FF                 pop     edi
.text:0040B600                 pop     ebp
.text:0040B601                 retn
.text:0040B602 ; ---------------------------------------------------------------------------
.text:0040B602
.text:0040B602 loc_40B602:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040B602                 mov     [esp+278h+C], edi ; hFindFile
.text:0040B605                 call    FindClose
.text:0040B60A                 sub     esp, 4
.text:0040B60D                 call    _errno
.text:0040B612                 mov     dword ptr [eax], 22h ; '"'
.text:0040B618
.text:0040B618 loc_40B618:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040B618                 xor     eax, eax
.text:0040B61A                 jmp     short loc_40B5F7
.text:0040B61C ; ---------------------------------------------------------------------------
.text:0040B61C
.text:0040B61C loc_40B61C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040B61C                 call    _errno
.text:0040B621                 mov     dword ptr [eax], 16h
.text:0040B627                 jmp     short loc_40B618
.text:0040B627 ; ---------------------------------------------------------------------------
.text:0040B629                 align 10h
.text:0040B630
.text:0040B630 loc_40B630:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040B630                 movzx   eax, byte ptr [esi+1]
.text:0040B634                 test    al, al
.text:0040B636                 jnz     short loc_40B665
.text:0040B638
.text:0040B638 loc_40B638:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040B638                                         ; _win32_longpath+1EB↓j ...
.text:0040B638                 test    bl, bl
.text:0040B63A                 jz      short loc_40B65C
.text:0040B63C                 cmp     bl, 2Fh ; '/'
.text:0040B63F                 jz      short loc_40B65C
.text:0040B641                 cmp     bl, 5Ch ; '\'
.text:0040B644                 jz      short loc_40B65C
.text:0040B646
.text:0040B646 loc_40B646:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040B646                 mov     [ebp+268h+Destination], bl
.text:0040B649                 inc     esi
.text:0040B64A                 inc     ebp
.text:0040B64B                 movzx   ebx, byte ptr [esi]
.text:0040B64E                 test    bl, bl
.text:0040B650                 jz      short loc_40B65C
.text:0040B652                 cmp     bl, 2Fh ; '/'
.text:0040B655                 jz      short loc_40B65C
.text:0040B657                 cmp     bl, 5Ch ; '\'
.text:0040B65A                 jnz     short loc_40B646
.text:0040B65C
.text:0040B65C loc_40B65C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040B65C                                         ; _win32_longpath+1BF↑j ...
.text:0040B65C                 mov     [ebp+268h+Destination], 0
.text:0040B660                 jmp     loc_40B5CC
.text:0040B665 ; ---------------------------------------------------------------------------
.text:0040B665
.text:0040B665 loc_40B665:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040B665                 cmp     al, 2Fh ; '/'
.text:0040B667                 jz      short loc_40B638
.text:0040B669                 cmp     al, 5Ch ; '\'
.text:0040B66B                 jz      short loc_40B638
.text:0040B66D                 cmp     al, 2Eh ; '.'
.text:0040B66F                 jnz     loc_40B50B
.text:0040B675                 movzx   eax, byte ptr [esi+2]
.text:0040B679                 test    al, al
.text:0040B67B                 jz      short loc_40B638
.text:0040B67D                 cmp     al, 2Fh ; '/'
.text:0040B67F                 jz      short loc_40B638
.text:0040B681                 cmp     al, 5Ch ; '\'
.text:0040B683                 jnz     loc_40B50B
.text:0040B689                 jmp     short loc_40B638
.text:0040B689 ; ---------------------------------------------------------------------------
.text:0040B68B                 align 10h
.text:0040B690
.text:0040B690 loc_40B690:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040B690                                         ; _win32_longpath+7C↑j
.text:0040B690                 mov     [ebp+268h+Destination], bl
.text:0040B693                 inc     esi
.text:0040B694                 inc     ebp
.text:0040B695                 mov     [ebp+268h+Destination], 0
.text:0040B699                 movzx   ebx, byte ptr [esi]
.text:0040B69C                 test    bl, bl
.text:0040B69E                 jz      loc_40B502
.text:0040B6A4                 cmp     bl, 2Fh ; '/'
.text:0040B6A7                 jz      short loc_40B6C0
.text:0040B6A9                 cmp     bl, 5Ch ; '\'
.text:0040B6AC                 jnz     loc_40B502
.text:0040B6B2                 lea     esi, [esi+0]
.text:0040B6B9                 lea     edi, [edi+0]
.text:0040B6C0
.text:0040B6C0 loc_40B6C0:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040B6C0                                         ; _win32_longpath+24F↓j ...
.text:0040B6C0                 inc     esi
.text:0040B6C1                 movzx   ebx, byte ptr [esi]
.text:0040B6C4                 test    bl, bl
.text:0040B6C6                 jz      loc_40B502
.text:0040B6CC                 cmp     bl, 2Fh ; '/'
.text:0040B6CF                 jz      short loc_40B6C0
.text:0040B6D1                 cmp     bl, 5Ch ; '\'
.text:0040B6D4                 jz      short loc_40B6C0
.text:0040B6D6                 jmp     loc_40B502
.text:0040B6DB ; ---------------------------------------------------------------------------
.text:0040B6DB
.text:0040B6DB loc_40B6DB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040B6DB                                         ; _win32_longpath+53↑j
.text:0040B6DB                 mov     edi, [esp+278h+lpFileName]
.text:0040B6E2                 movzx   edx, byte ptr [edi+1]
.text:0040B6E6                 cmp     dl, 2Fh ; '/'
.text:0040B6E9                 jz      short loc_40B6F4
.text:0040B6EB                 cmp     dl, 5Ch ; '\'
.text:0040B6EE                 jnz     loc_40B4D9
.text:0040B6F4
.text:0040B6F4 loc_40B6F4:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040B6F4                 mov     esi, [esp+278h+lpFileName]
.text:0040B6FB                 mov     [ebp+268h+Destination], al
.text:0040B6FE                 mov     ecx, [esp+278h+lpFileName]
.text:0040B705                 inc     ebp
.text:0040B706                 add     esi, 2
.text:0040B709                 movzx   ebx, byte ptr [ecx+1]
.text:0040B70D                 mov     [ebp+268h+Destination], bl
.text:0040B710                 inc     ebp
.text:0040B711                 movzx   eax, byte ptr [ecx+2]
.text:0040B715                 test    al, al
.text:0040B717                 jz      loc_40B7F3
.text:0040B71D                 cmp     al, 2Fh ; '/'
.text:0040B71F                 jz      loc_40B7D8
.text:0040B725                 cmp     al, 5Ch ; '\'
.text:0040B727                 mov     bl, al
.text:0040B729                 jz      loc_40B7D8
.text:0040B72F
.text:0040B72F loc_40B72F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040B72F                                         ; _win32_longpath+376↓j
.text:0040B72F                 test    bl, bl
.text:0040B731                 jz      loc_40B4D9
.text:0040B737                 cmp     bl, 2Fh ; '/'
.text:0040B73A                 jz      short loc_40B75B
.text:0040B73C                 cmp     bl, 5Ch ; '\'
.text:0040B73F                 jz      short loc_40B75B
.text:0040B741
.text:0040B741 loc_40B741:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040B741                 mov     [ebp+268h+Destination], bl
.text:0040B744                 inc     esi
.text:0040B745                 inc     ebp
.text:0040B746                 movzx   ebx, byte ptr [esi]
.text:0040B749                 test    bl, bl
.text:0040B74B                 jz      loc_40B4D9
.text:0040B751                 cmp     bl, 2Fh ; '/'
.text:0040B754                 jz      short loc_40B75B
.text:0040B756                 cmp     bl, 5Ch ; '\'
.text:0040B759                 jnz     short loc_40B741
.text:0040B75B
.text:0040B75B loc_40B75B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040B75B                                         ; _win32_longpath+2BF↑j ...
.text:0040B75B                 test    bl, bl
.text:0040B75D                 jz      loc_40B4D9
.text:0040B763                 mov     [ebp+268h+Destination], bl
.text:0040B766                 inc     esi
.text:0040B767                 inc     ebp
.text:0040B768                 movzx   ebx, byte ptr [esi]
.text:0040B76B                 test    bl, bl
.text:0040B76D                 jz      loc_40B4D9
.text:0040B773                 cmp     bl, 2Fh ; '/'
.text:0040B776                 jz      short loc_40B7C0
.text:0040B778                 cmp     bl, 5Ch ; '\'
.text:0040B77B                 jz      short loc_40B7C0
.text:0040B77D
.text:0040B77D loc_40B77D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040B77D                 test    bl, bl
.text:0040B77F                 jz      loc_40B4D9
.text:0040B785                 cmp     bl, 2Fh ; '/'
.text:0040B788                 jz      loc_40B4D9
.text:0040B78E                 cmp     bl, 5Ch ; '\'
.text:0040B791                 jz      loc_40B4D9
.text:0040B797
.text:0040B797 loc_40B797:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040B797                 mov     [ebp+268h+Destination], bl
.text:0040B79A                 inc     esi
.text:0040B79B                 inc     ebp
.text:0040B79C                 movzx   ebx, byte ptr [esi]
.text:0040B79F                 test    bl, bl
.text:0040B7A1                 jz      loc_40B4D9
.text:0040B7A7                 cmp     bl, 2Fh ; '/'
.text:0040B7AA                 jz      loc_40B4D9
.text:0040B7B0                 cmp     bl, 5Ch ; '\'
.text:0040B7B3                 jnz     short loc_40B797
.text:0040B7B5                 jmp     loc_40B4D9
.text:0040B7B5 ; ---------------------------------------------------------------------------
.text:0040B7BA                 align 10h
.text:0040B7C0
.text:0040B7C0 loc_40B7C0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040B7C0                                         ; _win32_longpath+2FB↑j ...
.text:0040B7C0                 inc     esi
.text:0040B7C1                 movzx   ebx, byte ptr [esi]
.text:0040B7C4                 test    bl, bl
.text:0040B7C6                 jz      loc_40B4D9
.text:0040B7CC                 cmp     bl, 2Fh ; '/'
.text:0040B7CF                 jz      short loc_40B7C0
.text:0040B7D1                 cmp     bl, 5Ch ; '\'
.text:0040B7D4                 jz      short loc_40B7C0
.text:0040B7D6                 jmp     short loc_40B77D
.text:0040B7D8 ; ---------------------------------------------------------------------------
.text:0040B7D8
.text:0040B7D8 loc_40B7D8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040B7D8                                         ; _win32_longpath+2A9↑j ...
.text:0040B7D8                 inc     esi
.text:0040B7D9                 movzx   ebx, byte ptr [esi]
.text:0040B7DC                 test    bl, bl
.text:0040B7DE                 jz      loc_40B4D9
.text:0040B7E4                 cmp     bl, 2Fh ; '/'
.text:0040B7E7                 jz      short loc_40B7D8
.text:0040B7E9                 cmp     bl, 5Ch ; '\'
.text:0040B7EC                 jz      short loc_40B7D8
.text:0040B7EE                 jmp     loc_40B72F
.text:0040B7F3 ; ---------------------------------------------------------------------------
.text:0040B7F3
.text:0040B7F3 loc_40B7F3:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040B7F3                 movzx   ebx, byte ptr [esi]
.text:0040B7F6                 jmp     loc_40B72F
.text:0040B7FB ; ---------------------------------------------------------------------------
.text:0040B7FB
.text:0040B7FB loc_40B7FB:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040B7FB                 movzx   ecx, byte ptr [eax]
.text:0040B7FE                 mov     esi, eax
.text:0040B800                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040B805                 add     esi, 2
.text:0040B808                 lea     ebp, [esp+12h]
.text:0040B80C                 mov     [esp+278h+Destination], cl
.text:0040B810                 jmp     loc_40B4D9
.text:0040B810 _win32_longpath endp
.text:0040B810
.text:0040B810 ; ---------------------------------------------------------------------------
.text:0040B815                 align 10h
.text:0040B820                 sub     esp, 0Ch
.text:0040B823                 mov     edx, [esp+10h]
.text:0040B827                 mov     dword ptr [esp+4], 0
.text:0040B82F                 mov     [esp], edx
.text:0040B832                 call    sub_40D720
.text:0040B837                 inc     eax
.text:0040B838                 setnz   dl
.text:0040B83B                 add     esp, 0Ch
.text:0040B83E                 movzx   eax, dl
.text:0040B841                 retn
.text:0040B841 ; ---------------------------------------------------------------------------
.text:0040B842                 align 10h
.text:0040B850
.text:0040B850 ; =============== S U B R O U T I N E =======================================
.text:0040B850
.text:0040B850
.text:0040B850 sub_40B850      proc near               ; CODE XREF: sub_40D5F0+AA↓p
.text:0040B850                                         ; sub_40F1A0+B4↓p
.text:0040B850
.text:0040B850 arg_0           = dword ptr  4
.text:0040B850
.text:0040B850                 mov     ecx, [esp+arg_0]
.text:0040B854                 mov     edx, ecx
.text:0040B856                 movzx   eax, byte ptr [ecx]
.text:0040B859                 test    al, al
.text:0040B85B                 jz      short loc_40B86C
.text:0040B85D                 lea     esi, [esi+0]
.text:0040B860
.text:0040B860 loc_40B860:                             ; CODE XREF: sub_40B850+1A↓j
.text:0040B860                 cmp     al, 5Ch ; '\'
.text:0040B862                 jz      short loc_40B870
.text:0040B864
.text:0040B864 loc_40B864:                             ; CODE XREF: sub_40B850+23↓j
.text:0040B864                 inc     edx
.text:0040B865                 movzx   eax, byte ptr [edx]
.text:0040B868                 test    al, al
.text:0040B86A                 jnz     short loc_40B860
.text:0040B86C
.text:0040B86C loc_40B86C:                             ; CODE XREF: sub_40B850+B↑j
.text:0040B86C                 mov     eax, ecx
.text:0040B86E                 retn
.text:0040B86E ; ---------------------------------------------------------------------------
.text:0040B86F                 align 10h
.text:0040B870
.text:0040B870 loc_40B870:                             ; CODE XREF: sub_40B850+12↑j
.text:0040B870                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B873                 jmp     short loc_40B864
.text:0040B873 sub_40B850      endp
.text:0040B873
.text:0040B873 ; ---------------------------------------------------------------------------
.text:0040B875                 align 10h
.text:0040B880                 push    ebx
.text:0040B881                 sub     esp, 8
.text:0040B884                 mov     ebx, [esp+14h]
.text:0040B888                 mov     edx, [esp+10h]
.text:0040B88C                 mov     [esp], ebx
.text:0040B88F                 mov     [esp+4], edx
.text:0040B893                 call    strcpy
.text:0040B898                 movzx   eax, byte ptr [ebx]
.text:0040B89B                 mov     edx, ebx
.text:0040B89D                 test    al, al
.text:0040B89F                 jz      short loc_40B8BC
.text:0040B8A1                 jmp     short loc_40B8B0
.text:0040B8A1 ; ---------------------------------------------------------------------------
.text:0040B8A3                 align 10h
.text:0040B8B0
.text:0040B8B0 loc_40B8B0:                             ; CODE XREF: .text:0040B8A1↑j
.text:0040B8B0                                         ; .text:0040B8BA↓j
.text:0040B8B0                 cmp     al, 5Ch ; '\'
.text:0040B8B2                 jz      short loc_40B8C3
.text:0040B8B4
.text:0040B8B4 loc_40B8B4:                             ; CODE XREF: .text:0040B8C6↓j
.text:0040B8B4                 inc     edx
.text:0040B8B5                 movzx   eax, byte ptr [edx]
.text:0040B8B8                 test    al, al
.text:0040B8BA                 jnz     short loc_40B8B0
.text:0040B8BC
.text:0040B8BC loc_40B8BC:                             ; CODE XREF: .text:0040B89F↑j
.text:0040B8BC                 add     esp, 8
.text:0040B8BF                 xor     eax, eax
.text:0040B8C1                 pop     ebx
.text:0040B8C2                 retn
.text:0040B8C3 ; ---------------------------------------------------------------------------
.text:0040B8C3
.text:0040B8C3 loc_40B8C3:                             ; CODE XREF: .text:0040B8B2↑j
.text:0040B8C3                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B8C6                 jmp     short loc_40B8B4
.text:0040B8C6 ; ---------------------------------------------------------------------------
.text:0040B8C8                 align 10h
.text:0040B8D0
.text:0040B8D0 ; =============== S U B R O U T I N E =======================================
.text:0040B8D0
.text:0040B8D0
.text:0040B8D0 sub_40B8D0      proc near               ; CODE XREF: sub_40A0D0+16↑p
.text:0040B8D0                                         ; sub_40A5D0+1F↑p ...
.text:0040B8D0
.text:0040B8D0 arg_0           = dword ptr  4
.text:0040B8D0
.text:0040B8D0                 mov     ecx, [esp+arg_0]
.text:0040B8D4                 mov     edx, ecx
.text:0040B8D6                 movzx   eax, byte ptr [ecx]
.text:0040B8D9                 test    al, al
.text:0040B8DB                 jz      short loc_40B8EC
.text:0040B8DD                 lea     esi, [esi+0]
.text:0040B8E0
.text:0040B8E0 loc_40B8E0:                             ; CODE XREF: sub_40B8D0+1A↓j
.text:0040B8E0                 cmp     al, 2Fh ; '/'
.text:0040B8E2                 jz      short loc_40B8F0
.text:0040B8E4
.text:0040B8E4 loc_40B8E4:                             ; CODE XREF: sub_40B8D0+23↓j
.text:0040B8E4                 inc     edx
.text:0040B8E5                 movzx   eax, byte ptr [edx]
.text:0040B8E8                 test    al, al
.text:0040B8EA                 jnz     short loc_40B8E0
.text:0040B8EC
.text:0040B8EC loc_40B8EC:                             ; CODE XREF: sub_40B8D0+B↑j
.text:0040B8EC                 mov     eax, ecx
.text:0040B8EE                 retn
.text:0040B8EE ; ---------------------------------------------------------------------------
.text:0040B8EF                 align 10h
.text:0040B8F0
.text:0040B8F0 loc_40B8F0:                             ; CODE XREF: sub_40B8D0+12↑j
.text:0040B8F0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B8F3                 jmp     short loc_40B8E4
.text:0040B8F3 sub_40B8D0      endp
.text:0040B8F3
.text:0040B8F3 ; ---------------------------------------------------------------------------
.text:0040B8F5                 align 10h
.text:0040B900                 push    ebx
.text:0040B901                 sub     esp, 8
.text:0040B904                 mov     ebx, [esp+14h]
.text:0040B908                 mov     edx, [esp+10h]
.text:0040B90C                 mov     [esp], ebx
.text:0040B90F                 mov     [esp+4], edx
.text:0040B913                 call    strcpy
.text:0040B918                 movzx   eax, byte ptr [ebx]
.text:0040B91B                 mov     edx, ebx
.text:0040B91D                 test    al, al
.text:0040B91F                 jz      short loc_40B93C
.text:0040B921                 jmp     short loc_40B930
.text:0040B921 ; ---------------------------------------------------------------------------
.text:0040B923                 align 10h
.text:0040B930
.text:0040B930 loc_40B930:                             ; CODE XREF: .text:0040B921↑j
.text:0040B930                                         ; .text:0040B93A↓j
.text:0040B930                 cmp     al, 2Fh ; '/'
.text:0040B932                 jz      short loc_40B943
.text:0040B934
.text:0040B934 loc_40B934:                             ; CODE XREF: .text:0040B946↓j
.text:0040B934                 inc     edx
.text:0040B935                 movzx   eax, byte ptr [edx]
.text:0040B938                 test    al, al
.text:0040B93A                 jnz     short loc_40B930
.text:0040B93C
.text:0040B93C loc_40B93C:                             ; CODE XREF: .text:0040B91F↑j
.text:0040B93C                 add     esp, 8
.text:0040B93F                 xor     eax, eax
.text:0040B941                 pop     ebx
.text:0040B942                 retn
.text:0040B943 ; ---------------------------------------------------------------------------
.text:0040B943
.text:0040B943 loc_40B943:                             ; CODE XREF: .text:0040B932↑j
.text:0040B943                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B946                 jmp     short loc_40B934
.text:0040B946 ; ---------------------------------------------------------------------------
.text:0040B948                 align 10h
.text:0040B950                 push    ebx
.text:0040B951                 sub     esp, 8
.text:0040B954                 mov     ebx, [esp+14h]
.text:0040B958                 mov     edx, [esp+10h]
.text:0040B95C                 mov     [esp+4], ebx
.text:0040B960                 mov     [esp], edx
.text:0040B963                 call    sub_40D5A0
.text:0040B968                 movzx   eax, byte ptr [ebx]
.text:0040B96B                 mov     edx, ebx
.text:0040B96D                 test    al, al
.text:0040B96F                 jz      short loc_40B98C
.text:0040B971                 jmp     short loc_40B980
.text:0040B971 ; ---------------------------------------------------------------------------
.text:0040B973                 align 10h
.text:0040B980
.text:0040B980 loc_40B980:                             ; CODE XREF: .text:0040B971↑j
.text:0040B980                                         ; .text:0040B98A↓j
.text:0040B980                 cmp     al, 2Fh ; '/'
.text:0040B982                 jz      short loc_40B993
.text:0040B984
.text:0040B984 loc_40B984:                             ; CODE XREF: .text:0040B996↓j
.text:0040B984                 inc     edx
.text:0040B985                 movzx   eax, byte ptr [edx]
.text:0040B988                 test    al, al
.text:0040B98A                 jnz     short loc_40B980
.text:0040B98C
.text:0040B98C loc_40B98C:                             ; CODE XREF: .text:0040B96F↑j
.text:0040B98C                 add     esp, 8
.text:0040B98F                 xor     eax, eax
.text:0040B991                 pop     ebx
.text:0040B992                 retn
.text:0040B993 ; ---------------------------------------------------------------------------
.text:0040B993
.text:0040B993 loc_40B993:                             ; CODE XREF: .text:0040B982↑j
.text:0040B993                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B996                 jmp     short loc_40B984
.text:0040B996 ; ---------------------------------------------------------------------------
.text:0040B998                 align 10h
.text:0040B9A0                 push    ebx
.text:0040B9A1                 sub     esp, 8
.text:0040B9A4                 mov     ebx, [esp+14h]
.text:0040B9A8                 mov     edx, [esp+10h]
.text:0040B9AC                 mov     [esp], ebx
.text:0040B9AF                 mov     [esp+4], edx
.text:0040B9B3                 call    sub_40D5A0
.text:0040B9B8                 movzx   eax, byte ptr [ebx]
.text:0040B9BB                 mov     edx, ebx
.text:0040B9BD                 test    al, al
.text:0040B9BF                 jz      short loc_40B9DC
.text:0040B9C1                 jmp     short loc_40B9D0
.text:0040B9C1 ; ---------------------------------------------------------------------------
.text:0040B9C3                 align 10h
.text:0040B9D0
.text:0040B9D0 loc_40B9D0:                             ; CODE XREF: .text:0040B9C1↑j
.text:0040B9D0                                         ; .text:0040B9DA↓j
.text:0040B9D0                 cmp     al, 5Ch ; '\'
.text:0040B9D2                 jz      short loc_40B9E1
.text:0040B9D4
.text:0040B9D4 loc_40B9D4:                             ; CODE XREF: .text:0040B9E4↓j
.text:0040B9D4                 inc     edx
.text:0040B9D5                 movzx   eax, byte ptr [edx]
.text:0040B9D8                 test    al, al
.text:0040B9DA                 jnz     short loc_40B9D0
.text:0040B9DC
.text:0040B9DC loc_40B9DC:                             ; CODE XREF: .text:0040B9BF↑j
.text:0040B9DC                 add     esp, 8
.text:0040B9DF                 pop     ebx
.text:0040B9E0                 retn
.text:0040B9E1 ; ---------------------------------------------------------------------------
.text:0040B9E1
.text:0040B9E1 loc_40B9E1:                             ; CODE XREF: .text:0040B9D2↑j
.text:0040B9E1                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B9E4                 jmp     short loc_40B9D4
.text:0040B9E4 ; ---------------------------------------------------------------------------
.text:0040B9E6                 align 10h
.text:0040B9F0
.text:0040B9F0 ; =============== S U B R O U T I N E =======================================
.text:0040B9F0
.text:0040B9F0
.text:0040B9F0 ; int __cdecl sub_40B9F0(LPSTR)
.text:0040B9F0 sub_40B9F0      proc near               ; CODE XREF: .text:0040BA7E↓p
.text:0040B9F0                                         ; .text:0040BABE↓p ...
.text:0040B9F0
.text:0040B9F0 hModule         = dword ptr -1Ch
.text:0040B9F0 lpFilename      = dword ptr -18h
.text:0040B9F0 nSize           = dword ptr -14h
.text:0040B9F0 arg_0           = dword ptr  4
.text:0040B9F0
.text:0040B9F0                 push    esi
.text:0040B9F1                 push    ebx
.text:0040B9F2                 sub     esp, 14h
.text:0040B9F5                 mov     esi, [esp+1Ch+arg_0]
.text:0040B9F9                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040BA01                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040BA08                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040BA0C                 call    GetModuleFileNameA
.text:0040BA11                 sub     esp, 0Ch
.text:0040BA14                 test    eax, eax
.text:0040BA16                 jz      short loc_40BA58
.text:0040BA18                 cmp     eax, 104h
.text:0040BA1D                 jg      short loc_40BA49
.text:0040BA1F
.text:0040BA1F loc_40BA1F:                             ; CODE XREF: sub_40B9F0+66↓j
.text:0040BA1F                                         ; sub_40B9F0+78↓j
.text:0040BA1F                 movzx   eax, byte ptr [esi]
.text:0040BA22                 mov     edx, esi
.text:0040BA24                 test    al, al
.text:0040BA26                 jz      short loc_40BA3C
.text:0040BA28                 nop
.text:0040BA29                 lea     esi, [esi+0]
.text:0040BA30
.text:0040BA30 loc_40BA30:                             ; CODE XREF: sub_40B9F0+4A↓j
.text:0040BA30                 cmp     al, 5Ch ; '\'
.text:0040BA32                 jz      short loc_40BA44
.text:0040BA34
.text:0040BA34 loc_40BA34:                             ; CODE XREF: sub_40B9F0+57↓j
.text:0040BA34                 inc     edx
.text:0040BA35                 movzx   eax, byte ptr [edx]
.text:0040BA38                 test    al, al
.text:0040BA3A                 jnz     short loc_40BA30
.text:0040BA3C
.text:0040BA3C loc_40BA3C:                             ; CODE XREF: sub_40B9F0+36↑j
.text:0040BA3C                 add     esp, 14h
.text:0040BA3F                 mov     eax, esi
.text:0040BA41                 pop     ebx
.text:0040BA42                 pop     esi
.text:0040BA43                 retn
.text:0040BA44 ; ---------------------------------------------------------------------------
.text:0040BA44
.text:0040BA44 loc_40BA44:                             ; CODE XREF: sub_40B9F0+42↑j
.text:0040BA44                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040BA47                 jmp     short loc_40BA34
.text:0040BA49 ; ---------------------------------------------------------------------------
.text:0040BA49
.text:0040BA49 loc_40BA49:                             ; CODE XREF: sub_40B9F0+2D↑j
.text:0040BA49                 call    _errno
.text:0040BA4E                 mov     dword ptr [eax], 26h ; '&'
.text:0040BA54                 xor     esi, esi
.text:0040BA56                 jmp     short loc_40BA1F
.text:0040BA58 ; ---------------------------------------------------------------------------
.text:0040BA58
.text:0040BA58 loc_40BA58:                             ; CODE XREF: sub_40B9F0+26↑j
.text:0040BA58                 call    sub_40D580
.text:0040BA5D                 mov     ebx, eax
.text:0040BA5F                 xor     esi, esi
.text:0040BA61                 call    _errno
.text:0040BA66                 mov     [eax], ebx
.text:0040BA68                 jmp     short loc_40BA1F
.text:0040BA68 sub_40B9F0      endp
.text:0040BA68
.text:0040BA68 ; ---------------------------------------------------------------------------
.text:0040BA6A                 align 10h
.text:0040BA70                 sub     esp, 0Ch
.text:0040BA73                 mov     [esp+8], ebx
.text:0040BA77                 mov     ebx, [esp+10h]
.text:0040BA7B                 mov     [esp], ebx
.text:0040BA7E                 call    sub_40B9F0
.text:0040BA83                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040BA8B                 mov     [esp], ebx
.text:0040BA8E                 call    strrchr
.text:0040BA93                 test    eax, eax
.text:0040BA95                 jz      short loc_40BA9A
.text:0040BA97                 lea     ebx, [eax+1]
.text:0040BA9A
.text:0040BA9A loc_40BA9A:                             ; CODE XREF: .text:0040BA95↑j
.text:0040BA9A                 mov     eax, ebx
.text:0040BA9C                 mov     ebx, [esp+8]
.text:0040BAA0                 add     esp, 0Ch
.text:0040BAA3                 retn
.text:0040BAA3 ; ---------------------------------------------------------------------------
.text:0040BAA4                 align 10h
.text:0040BAB0                 sub     esp, 0Ch
.text:0040BAB3                 mov     [esp+8], ebx
.text:0040BAB7                 mov     ebx, [esp+10h]
.text:0040BABB                 mov     [esp], ebx
.text:0040BABE                 call    sub_40B9F0
.text:0040BAC3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040BACB                 mov     [esp], ebx
.text:0040BACE                 call    strrchr
.text:0040BAD3                 test    eax, eax
.text:0040BAD5                 jz      short loc_40BADA
.text:0040BAD7                 mov     byte ptr [eax], 0
.text:0040BADA
.text:0040BADA loc_40BADA:                             ; CODE XREF: .text:0040BAD5↑j
.text:0040BADA                 mov     eax, ebx
.text:0040BADC                 mov     ebx, [esp+8]
.text:0040BAE0                 add     esp, 0Ch
.text:0040BAE3                 retn
.text:0040BAE3 ; ---------------------------------------------------------------------------
.text:0040BAE4                 align 10h
.text:0040BAF0                 sub     esp, 0Ch
.text:0040BAF3                 mov     [esp+8], ebx
.text:0040BAF7                 mov     ebx, [esp+10h]
.text:0040BAFB                 mov     [esp], ebx
.text:0040BAFE                 call    sub_40B9F0
.text:0040BB03                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040BB0B                 mov     [esp], ebx
.text:0040BB0E                 call    strrchr
.text:0040BB13                 test    eax, eax
.text:0040BB15                 jz      short loc_40BB1A
.text:0040BB17                 mov     byte ptr [eax], 0
.text:0040BB1A
.text:0040BB1A loc_40BB1A:                             ; CODE XREF: .text:0040BB15↑j
.text:0040BB1A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040BB22                 mov     [esp], ebx
.text:0040BB25                 call    strrchr
.text:0040BB2A                 test    eax, eax
.text:0040BB2C                 jz      short loc_40BB31
.text:0040BB2E                 mov     byte ptr [eax], 0
.text:0040BB31
.text:0040BB31 loc_40BB31:                             ; CODE XREF: .text:0040BB2C↑j
.text:0040BB31                 mov     eax, ebx
.text:0040BB33                 mov     ebx, [esp+8]
.text:0040BB37                 add     esp, 0Ch
.text:0040BB3A                 retn
.text:0040BB3A ; ---------------------------------------------------------------------------
.text:0040BB3B                 align 10h
.text:0040BB40                 sub     esp, 1Ch
.text:0040BB43                 mov     edx, [esp+20h]
.text:0040BB47                 mov     [esp+10h], ebx
.text:0040BB4B                 xor     ebx, ebx
.text:0040BB4D                 mov     [esp+14h], esi
.text:0040BB51                 mov     [esp+18h], edi
.text:0040BB55                 mov     [esp], edx
.text:0040BB58                 call    sub_40D5D0
.text:0040BB5D                 mov     edx, [esp+24h]
.text:0040BB61                 mov     edi, eax
.text:0040BB63                 mov     [esp], edx
.text:0040BB66                 call    sub_40D5D0
.text:0040BB6B                 mov     [esp+4], eax
.text:0040BB6F                 mov     esi, eax
.text:0040BB71                 mov     [esp], edi
.text:0040BB74                 call    _stricmp_0
.text:0040BB79                 mov     [esp], edi
.text:0040BB7C                 test    eax, eax
.text:0040BB7E                 setz    bl
.text:0040BB81                 call    free
.text:0040BB86                 mov     [esp], esi
.text:0040BB89                 call    free
.text:0040BB8E                 mov     eax, ebx
.text:0040BB90                 mov     esi, [esp+14h]
.text:0040BB94                 mov     ebx, [esp+10h]
.text:0040BB98                 mov     edi, [esp+18h]
.text:0040BB9C                 add     esp, 1Ch
.text:0040BB9F                 retn
.text:0040BBA0 ; ---------------------------------------------------------------------------
.text:0040BBA0                 xor     eax, eax
.text:0040BBA2                 retn
.text:0040BBA2 ; ---------------------------------------------------------------------------
.text:0040BBA3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040BBD7↓o
.text:0040BBB0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040BBE6↓o
.text:0040BBC0 ; ---------------------------------------------------------------------------
.text:0040BBC0                 sub     esp, 1Ch
.text:0040BBC3                 mov     [esp+10h], ebx
.text:0040BBC7                 mov     ebx, [esp+20h]
.text:0040BBCB                 mov     [esp+18h], edi
.text:0040BBCF                 mov     edi, [esp+24h]
.text:0040BBD3                 mov     [esp+14h], esi
.text:0040BBD7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040BBDE                 call    GetModuleHandleA
.text:0040BBE3                 sub     esp, 4
.text:0040BBE6                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040BBEE                 mov     [esp], eax
.text:0040BBF1                 call    GetProcAddress
.text:0040BBF6                 sub     esp, 8
.text:0040BBF9                 test    eax, eax
.text:0040BBFB                 jz      short loc_40BC13
.text:0040BBFD                 mov     dword ptr [esp+8], 104h
.text:0040BC05                 mov     [esp+4], ebx
.text:0040BC09                 mov     [esp], edi
.text:0040BC0C                 call    eax
.text:0040BC0E                 sub     esp, 0Ch
.text:0040BC11                 mov     esi, eax
.text:0040BC13
.text:0040BC13 loc_40BC13:                             ; CODE XREF: .text:0040BBFB↑j
.text:0040BC13                 test    esi, esi
.text:0040BC15                 jz      short loc_40BC30
.text:0040BC17
.text:0040BC17 loc_40BC17:                             ; CODE XREF: .text:0040BC4B↓j
.text:0040BC17                 mov     eax, ebx
.text:0040BC19                 mov     esi, [esp+14h]
.text:0040BC1D                 mov     ebx, [esp+10h]
.text:0040BC21                 mov     edi, [esp+18h]
.text:0040BC25                 add     esp, 1Ch
.text:0040BC28                 retn
.text:0040BC28 ; ---------------------------------------------------------------------------
.text:0040BC29                 align 10h
.text:0040BC30
.text:0040BC30 loc_40BC30:                             ; CODE XREF: .text:0040BC15↑j
.text:0040BC30                 call    sub_40E060
.text:0040BC35                 mov     [esp], ebx
.text:0040BC38                 mov     [esp+4], edi
.text:0040BC3C                 call    strcpy
.text:0040BC41                 mov     [esp], ebx
.text:0040BC44                 call    _win32_longpath
.text:0040BC49                 mov     ebx, eax
.text:0040BC4B                 jmp     short loc_40BC17
.text:0040BC4B ; ---------------------------------------------------------------------------
.text:0040BC4D                 align 10h
.text:0040BC50                 sub     esp, 1Ch
.text:0040BC53                 mov     [esp+18h], edi
.text:0040BC57                 mov     edi, [esp+20h]
.text:0040BC5B                 mov     [esp+10h], ebx
.text:0040BC5F                 mov     [esp+14h], esi
.text:0040BC63                 mov     dword ptr [esp+8], 0
.text:0040BC6B                 mov     dword ptr [esp+4], 0
.text:0040BC73                 mov     [esp], edi
.text:0040BC76                 call    GetShortPathNameA
.text:0040BC7B                 sub     esp, 0Ch
.text:0040BC7E                 mov     ebx, eax
.text:0040BC80                 test    eax, eax
.text:0040BC82                 jz      short loc_40BCD0
.text:0040BC84                 lea     edx, [eax+1]
.text:0040BC87                 mov     [esp], edx
.text:0040BC8A                 call    malloc
.text:0040BC8F                 test    eax, eax
.text:0040BC91                 mov     esi, eax
.text:0040BC93                 jz      short loc_40BCD0
.text:0040BC95                 mov     [esp+8], ebx
.text:0040BC99                 mov     [esp+4], eax
.text:0040BC9D                 mov     [esp], edi
.text:0040BCA0                 call    GetShortPathNameA
.text:0040BCA5                 sub     esp, 0Ch
.text:0040BCA8                 mov     edx, esi
.text:0040BCAA                 test    eax, eax
.text:0040BCAC                 jz      short loc_40BCC2
.text:0040BCAE                 mov     esi, esi
.text:0040BCB0
.text:0040BCB0 loc_40BCB0:                             ; CODE XREF: .text:0040BCE0↓j
.text:0040BCB0                 mov     ebx, [esp+10h]
.text:0040BCB4                 mov     eax, edx
.text:0040BCB6                 mov     esi, [esp+14h]
.text:0040BCBA                 mov     edi, [esp+18h]
.text:0040BCBE                 add     esp, 1Ch
.text:0040BCC1                 retn
.text:0040BCC2 ; ---------------------------------------------------------------------------
.text:0040BCC2
.text:0040BCC2 loc_40BCC2:                             ; CODE XREF: .text:0040BCAC↑j
.text:0040BCC2                 mov     [esp], esi
.text:0040BCC5                 call    free
.text:0040BCCA                 lea     esi, [esi+0]
.text:0040BCD0
.text:0040BCD0 loc_40BCD0:                             ; CODE XREF: .text:0040BC82↑j
.text:0040BCD0                                         ; .text:0040BC93↑j
.text:0040BCD0                 call    sub_40D580
.text:0040BCD5                 mov     esi, eax
.text:0040BCD7                 call    _errno
.text:0040BCDC                 mov     [eax], esi
.text:0040BCDE                 mov     edx, edi
.text:0040BCE0                 jmp     short loc_40BCB0
.text:0040BCE0 ; ---------------------------------------------------------------------------
.text:0040BCE2                 align 10h
.text:0040BCF0
.text:0040BCF0 ; =============== S U B R O U T I N E =======================================
.text:0040BCF0
.text:0040BCF0
.text:0040BCF0 sub_40BCF0      proc near               ; DATA XREF: sub_40BD00+186↓o
.text:0040BCF0                 sub     al, [eax]
.text:0040BCF2                 lea     esi, [esi+0]
.text:0040BCF9                 lea     edi, [edi+0]
.text:0040BCF9 sub_40BCF0      endp
.text:0040BCF9
.text:0040BD00
.text:0040BD00 ; =============== S U B R O U T I N E =======================================
.text:0040BD00
.text:0040BD00
.text:0040BD00 sub_40BD00      proc near               ; CODE XREF: sub_403DE0+103↑p
.text:0040BD00
.text:0040BD00 hFindFile       = dword ptr -2DCh
.text:0040BD00 lpFindFileData  = dword ptr -2D8h
.text:0040BD00 Count           = dword ptr -2D4h
.text:0040BD00 Destination     = byte ptr -2CCh
.text:0040BD00 var_1BC         = dword ptr -1BCh
.text:0040BD00 var_1B4         = dword ptr -1B4h
.text:0040BD00 var_1B0         = dword ptr -1B0h
.text:0040BD00 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040BD00 arg_0           = dword ptr  4
.text:0040BD00
.text:0040BD00                 push    ebp
.text:0040BD01                 push    edi
.text:0040BD02                 push    esi
.text:0040BD03                 push    ebx
.text:0040BD04                 sub     esp, 2CCh
.text:0040BD0A                 mov     ebp, [esp+2DCh+arg_0]
.text:0040BD11                 test    ebp, ebp
.text:0040BD13                 mov     ebx, [ebp+4]
.text:0040BD16                 jz      loc_40BECD
.text:0040BD1C                 mov     edx, [ebp+0]
.text:0040BD1F                 cmp     edx, 0FFFFFFFFh
.text:0040BD22                 jz      loc_40BE57
.text:0040BD28                 mov     [esp+2DCh+hFindFile], edx ; hFindFile
.text:0040BD2B                 lea     ecx, [esp+2DCh+FindFileData]
.text:0040BD32                 mov     [esp+2DCh+lpFindFileData], ecx ; lpFindFileData
.text:0040BD36                 call    FindNextFileA
.text:0040BD3B                 sub     esp, 8
.text:0040BD3E                 test    eax, eax
.text:0040BD40                 jz      loc_40BE4B
.text:0040BD46
.text:0040BD46 loc_40BD46:                             ; CODE XREF: sub_40BD00+1BC↓j
.text:0040BD46                 mov     [esp+2DCh+Count], 104h ; Count
.text:0040BD4E                 lea     edi, [esp+2DCh+FindFileData.cFileName]
.text:0040BD55                 mov     esi, [ebx]
.text:0040BD57                 mov     [esp+2DCh+lpFindFileData], esi ; Source
.text:0040BD5B                 lea     esi, [ebx+14h]
.text:0040BD5E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040BD61                 call    strncpy
.text:0040BD66                 mov     [esp+2DCh+Count], 104h ; Count
.text:0040BD6E                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:0040BD72                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040BD75                 call    strncat
.text:0040BD7A                 mov     [esp+2DCh+lpFindFileData], esi ; int
.text:0040BD7E                 lea     edx, [esp+2DCh+var_1BC]
.text:0040BD85                 mov     [esp+2DCh+Count], edx ; int
.text:0040BD89                 mov     [esp+2DCh+hFindFile], 0 ; LPCSTR
.text:0040BD90                 call    sub_40B430
.text:0040BD95                 test    eax, eax
.text:0040BD97                 jnz     loc_40BE39
.text:0040BD9D                 mov     ecx, [esp+2DCh+var_1BC]
.text:0040BDA4                 and     ecx, 0F000h
.text:0040BDAA                 shr     ecx, 0Ch
.text:0040BDAD                 mov     [ebx+12h], cl
.text:0040BDB0                 mov     ecx, edi
.text:0040BDB2                 lea     esi, [esi+0]
.text:0040BDB9                 lea     edi, [edi+0]
.text:0040BDC0
.text:0040BDC0 loc_40BDC0:                             ; CODE XREF: sub_40BD00+D5↓j
.text:0040BDC0                 mov     eax, [ecx]
.text:0040BDC2                 add     ecx, 4
.text:0040BDC5                 lea     edx, [eax-1010101h]
.text:0040BDCB                 not     eax
.text:0040BDCD                 and     edx, eax
.text:0040BDCF                 and     edx, 80808080h
.text:0040BDD5                 jz      short loc_40BDC0
.text:0040BDD7                 test    edx, 8080h
.text:0040BDDD                 jnz     short loc_40BDE5
.text:0040BDDF                 shr     edx, 10h
.text:0040BDE2                 add     ecx, 2
.text:0040BDE5
.text:0040BDE5 loc_40BDE5:                             ; CODE XREF: sub_40BD00+DD↑j
.text:0040BDE5                 mov     word ptr [ebx+10h], 110h
.text:0040BDEB                 add     dl, dl
.text:0040BDED                 sbb     ecx, 3
.text:0040BDF0                 sub     ecx, edi
.text:0040BDF2                 mov     [ebx+13h], cl
.text:0040BDF5                 mov     edx, [esp+2DCh+var_1B4]
.text:0040BDFC                 mov     ecx, [esp+2DCh+var_1B0]
.text:0040BE03                 mov     [ebx+8], edx
.text:0040BE06                 mov     [ebx+0Ch], ecx
.text:0040BE09                 mov     [esp+2DCh+Count], 104h ; Count
.text:0040BE11                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:0040BE15                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040BE18                 call    strncpy
.text:0040BE1D                 inc     dword ptr [ebp+14h]
.text:0040BE20                 call    _errno
.text:0040BE25                 mov     dword ptr [eax], 0
.text:0040BE2B                 lea     eax, [ebx+8]
.text:0040BE2E
.text:0040BE2E loc_40BE2E:                             ; CODE XREF: sub_40BD00+149↓j
.text:0040BE2E                 add     esp, 2CCh
.text:0040BE34                 pop     ebx
.text:0040BE35                 pop     esi
.text:0040BE36                 pop     edi
.text:0040BE37                 pop     ebp
.text:0040BE38                 retn
.text:0040BE39 ; ---------------------------------------------------------------------------
.text:0040BE39
.text:0040BE39 loc_40BE39:                             ; CODE XREF: sub_40BD00+97↑j
.text:0040BE39                                         ; sub_40BD00+153↓j ...
.text:0040BE39                 call    sub_40D580
.text:0040BE3E                 mov     ebp, eax
.text:0040BE40                 call    _errno
.text:0040BE45                 mov     [eax], ebp
.text:0040BE47
.text:0040BE47 loc_40BE47:                             ; CODE XREF: sub_40BD00+155↓j
.text:0040BE47                                         ; sub_40BD00+1D8↓j
.text:0040BE47                 xor     eax, eax
.text:0040BE49                 jmp     short loc_40BE2E
.text:0040BE4B ; ---------------------------------------------------------------------------
.text:0040BE4B
.text:0040BE4B loc_40BE4B:                             ; CODE XREF: sub_40BD00+40↑j
.text:0040BE4B                 call    GetLastError
.text:0040BE50                 cmp     eax, 12h
.text:0040BE53                 jnz     short loc_40BE39
.text:0040BE55                 jmp     short loc_40BE47
.text:0040BE57 ; ---------------------------------------------------------------------------
.text:0040BE57
.text:0040BE57 loc_40BE57:                             ; CODE XREF: sub_40BD00+22↑j
.text:0040BE57                 mov     edx, [ebx]
.text:0040BE59                 lea     esi, [esp+2DCh+Destination]
.text:0040BE5D                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040BE60                 mov     [esp+2DCh+lpFindFileData], edx ; Source
.text:0040BE64                 call    strcpy
.text:0040BE69                 mov     ecx, esi
.text:0040BE6B                 nop
.text:0040BE6C                 lea     esi, [esi+0]
.text:0040BE70
.text:0040BE70 loc_40BE70:                             ; CODE XREF: sub_40BD00+184↓j
.text:0040BE70                 mov     edi, [ecx]
.text:0040BE72                 add     ecx, 4
.text:0040BE75                 lea     eax, [edi-1010101h]
.text:0040BE7B                 not     edi
.text:0040BE7D                 and     eax, edi
.text:0040BE7F                 test    eax, 80808080h
.text:0040BE84                 jz      short loc_40BE70
.text:0040BE86                 mov     [esp+2DCh+lpFindFileData], offset sub_40BCF0 ; Source
.text:0040BE8E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040BE91                 call    strcat
.text:0040BE96                 mov     [esp+2DCh+hFindFile], esi
.text:0040BE99                 call    sub_40B8D0
.text:0040BE9E                 mov     [esp+2DCh+hFindFile], esi ; lpFileName
.text:0040BEA1                 lea     edx, [esp+2DCh+FindFileData]
.text:0040BEA8                 mov     [esp+2DCh+lpFindFileData], edx ; lpFindFileData
.text:0040BEAC                 call    FindFirstFileA
.text:0040BEB1                 sub     esp, 8
.text:0040BEB4                 cmp     eax, 0FFFFFFFFh
.text:0040BEB7                 jz      short loc_40BEC1
.text:0040BEB9                 mov     [ebp+0], eax
.text:0040BEBC                 jmp     loc_40BD46
.text:0040BEC1 ; ---------------------------------------------------------------------------
.text:0040BEC1
.text:0040BEC1 loc_40BEC1:                             ; CODE XREF: sub_40BD00+1B7↑j
.text:0040BEC1                 mov     dword ptr [ebp+0], 0FFFFFFFFh
.text:0040BEC8                 jmp     loc_40BE39
.text:0040BECD ; ---------------------------------------------------------------------------
.text:0040BECD
.text:0040BECD loc_40BECD:                             ; CODE XREF: sub_40BD00+16↑j
.text:0040BECD                 call    _errno
.text:0040BED2                 mov     dword ptr [eax], 9
.text:0040BED8                 jmp     loc_40BE47
.text:0040BED8 sub_40BD00      endp
.text:0040BED8
.text:0040BED8 ; ---------------------------------------------------------------------------
.text:0040BEDD                 align 10h
.text:0040BEE0 ; const char String[4]
.text:0040BEE0 String          db ' :/',0              ; DATA XREF: sub_40BEF0+FA↓o
.text:0040BEE4                 align 10h
.text:0040BEF0
.text:0040BEF0 ; =============== S U B R O U T I N E =======================================
.text:0040BEF0
.text:0040BEF0
.text:0040BEF0 ; int __cdecl sub_40BEF0(LPCSTR)
.text:0040BEF0 sub_40BEF0      proc near               ; CODE XREF: sub_40A0D0+E↑p
.text:0040BEF0                                         ; sub_40A5D0+17↑p ...
.text:0040BEF0
.text:0040BEF0 Str             = dword ptr -1Ch
.text:0040BEF0 Val             = dword ptr -18h
.text:0040BEF0 Count           = dword ptr -14h
.text:0040BEF0 var_10          = dword ptr -10h
.text:0040BEF0 var_C           = dword ptr -0Ch
.text:0040BEF0 var_8           = dword ptr -8
.text:0040BEF0 var_4           = dword ptr -4
.text:0040BEF0 arg_0           = dword ptr  4
.text:0040BEF0
.text:0040BEF0                 sub     esp, 1Ch
.text:0040BEF3                 mov     edx, [esp+1Ch+arg_0]
.text:0040BEF7                 mov     [esp+1Ch+var_8], edi
.text:0040BEFB                 mov     [esp+1Ch+var_10], ebx
.text:0040BEFF                 mov     [esp+1Ch+var_C], esi
.text:0040BF03                 mov     [esp+1Ch+var_4], ebp
.text:0040BF07                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040BF0A                 call    sub_40D5D0
.text:0040BF0F                 test    eax, eax
.text:0040BF11                 mov     edi, eax
.text:0040BF13                 jz      short loc_40BF50
.text:0040BF15                 mov     [esp+1Ch+Str], eax ; Str
.text:0040BF18                 call    strlen
.text:0040BF1D                 cmp     eax, 2
.text:0040BF20                 jbe     short loc_40BF2C
.text:0040BF22                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040BF26                 jz      loc_40BFE0
.text:0040BF2C
.text:0040BF2C loc_40BF2C:                             ; CODE XREF: sub_40BEF0+30↑j
.text:0040BF2C                                         ; sub_40BEF0+F4↓j
.text:0040BF2C                 test    edi, edi
.text:0040BF2E                 jz      short loc_40BF50
.text:0040BF30                 mov     [esp+1Ch+Str], edi ; Str
.text:0040BF33                 call    strlen
.text:0040BF38                 cmp     eax, 4
.text:0040BF3B                 mov     ebp, eax
.text:0040BF3D                 jle     short loc_40BF50
.text:0040BF3F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040BF42                 jz      short loc_40BF70
.text:0040BF44                 lea     esi, [esi+0]
.text:0040BF4A                 lea     edi, [edi+0]
.text:0040BF50
.text:0040BF50 loc_40BF50:                             ; CODE XREF: sub_40BEF0+23↑j
.text:0040BF50                                         ; sub_40BEF0+3E↑j ...
.text:0040BF50                 xor     esi, esi
.text:0040BF52
.text:0040BF52 loc_40BF52:                             ; CODE XREF: sub_40BEF0+CD↓j
.text:0040BF52                                         ; sub_40BEF0+115↓j
.text:0040BF52                 mov     [esp+1Ch+Str], edi ; Block
.text:0040BF55                 call    free
.text:0040BF5A                 mov     eax, esi
.text:0040BF5C                 mov     ebx, [esp+1Ch+var_10]
.text:0040BF60                 mov     esi, [esp+1Ch+var_C]
.text:0040BF64                 mov     edi, [esp+1Ch+var_8]
.text:0040BF68                 mov     ebp, [esp+1Ch+var_4]
.text:0040BF6C                 add     esp, 1Ch
.text:0040BF6F                 retn
.text:0040BF70 ; ---------------------------------------------------------------------------
.text:0040BF70
.text:0040BF70 loc_40BF70:                             ; CODE XREF: sub_40BEF0+52↑j
.text:0040BF70                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040BF74                 jnz     short loc_40BF50
.text:0040BF76                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040BF7E                 lea     ecx, [edi+2]
.text:0040BF81                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040BF84                 call    strchr
.text:0040BF89                 test    eax, eax
.text:0040BF8B                 jnz     short loc_40BFBF
.text:0040BF8D
.text:0040BF8D loc_40BF8D:                             ; CODE XREF: sub_40BEF0+E2↓j
.text:0040BF8D                 inc     ebp
.text:0040BF8E
.text:0040BF8E loc_40BF8E:                             ; CODE XREF: sub_40BEF0+E9↓j
.text:0040BF8E                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040BF96                 lea     ebx, [ebp+1]
.text:0040BF99                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040BF9C                 call    calloc
.text:0040BFA1                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040BFA4                 mov     esi, eax
.text:0040BFA6                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040BFAA                 mov     [esp+1Ch+Val], edi ; Source
.text:0040BFAE                 call    strncpy
.text:0040BFB3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040BFB8                 mov     byte ptr [ebp+esi+0], 0
.text:0040BFBD                 jmp     short loc_40BF52
.text:0040BFBF ; ---------------------------------------------------------------------------
.text:0040BFBF
.text:0040BFBF loc_40BFBF:                             ; CODE XREF: sub_40BEF0+9B↑j
.text:0040BFBF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040BFC7                 inc     eax
.text:0040BFC8                 mov     [esp+1Ch+Str], eax ; Str
.text:0040BFCB                 call    strchr
.text:0040BFD0                 test    eax, eax
.text:0040BFD2                 jz      short loc_40BF8D
.text:0040BFD4                 sub     eax, edi
.text:0040BFD6                 lea     ebp, [eax+1]
.text:0040BFD9                 jmp     short loc_40BF8E
.text:0040BFD9 ; ---------------------------------------------------------------------------
.text:0040BFDB                 align 10h
.text:0040BFE0
.text:0040BFE0 loc_40BFE0:                             ; CODE XREF: sub_40BEF0+36↑j
.text:0040BFE0                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040BFE4                 jnz     loc_40BF2C
.text:0040BFEA                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040BFF1                 call    _strdup
.text:0040BFF6                 movsx   edx, byte ptr [edi]
.text:0040BFF9                 mov     esi, eax
.text:0040BFFB                 mov     [esp+1Ch+Str], edx ; C
.text:0040BFFE                 call    toupper
.text:0040C003                 mov     [esi], al
.text:0040C005                 jmp     loc_40BF52
.text:0040C005 sub_40BEF0      endp
.text:0040C005
.text:0040C005 ; ---------------------------------------------------------------------------
.text:0040C00A                 align 10h
.text:0040C010
.text:0040C010 ; =============== S U B R O U T I N E =======================================
.text:0040C010
.text:0040C010
.text:0040C010 sub_40C010      proc near               ; CODE XREF: .text:0040C164↓p
.text:0040C010                                         ; .text:0040C248↓p
.text:0040C010
.text:0040C010 Str             = dword ptr -2Ch
.text:0040C010 Val             = dword ptr -28h
.text:0040C010 var_18          = dword ptr -18h
.text:0040C010 var_11          = byte ptr -11h
.text:0040C010 arg_0           = dword ptr  4
.text:0040C010
.text:0040C010                 push    ebp
.text:0040C011                 push    edi
.text:0040C012                 push    esi
.text:0040C013                 push    ebx
.text:0040C014                 sub     esp, 1Ch
.text:0040C017                 mov     edx, [esp+2Ch+arg_0]
.text:0040C01B                 cmp     edx, ds:dword_4151D0
.text:0040C021                 mov     [esp+2Ch+var_11], 0
.text:0040C026                 jz      loc_40C124
.text:0040C02C                 mov     ebx, ds:dword_4151C0
.text:0040C032                 test    ebx, ebx
.text:0040C034                 jz      short loc_40C0A2
.text:0040C036
.text:0040C036 loc_40C036:                             ; CODE XREF: sub_40C010+10F↓j
.text:0040C036                 mov     ebx, [esp+2Ch+arg_0]
.text:0040C03A                 xor     edi, edi
.text:0040C03C                 xor     esi, esi
.text:0040C03E                 mov     ebp, offset dword_4151E8
.text:0040C043                 lea     esi, [esi+0]
.text:0040C049                 lea     edi, [edi+0]
.text:0040C050
.text:0040C050 loc_40C050:                             ; CODE XREF: sub_40C010+60↓j
.text:0040C050                 mov     edx, [ebp+4]
.text:0040C053                 mov     ecx, edi
.text:0040C055                 mov     eax, [ebp+0]
.text:0040C058                 shl     ecx, 4
.text:0040C05B                 mov     [esp+2Ch+var_18], ecx
.text:0040C05F                 mov     ecx, edx
.text:0040C061                 xor     eax, ebx
.text:0040C063                 xor     ecx, esi
.text:0040C065                 or      ecx, eax
.text:0040C067                 jz      short loc_40C091
.text:0040C069                 inc     edi
.text:0040C06A                 add     ebp, 10h
.text:0040C06D                 cmp     edi, 20h ; ' '
.text:0040C070                 jle     short loc_40C050
.text:0040C072
.text:0040C072 loc_40C072:                             ; CODE XREF: sub_40C010+90↓j
.text:0040C072                 movzx   ebx, [esp+2Ch+var_11]
.text:0040C077                 mov     eax, [esp+2Ch+arg_0]
.text:0040C07B                 mov     byte_414060, bl
.text:0040C081                 mov     ds:dword_4151D0, eax
.text:0040C086                 movsx   eax, bl
.text:0040C089
.text:0040C089 loc_40C089:                             ; CODE XREF: sub_40C010+11B↓j
.text:0040C089                 add     esp, 1Ch
.text:0040C08C                 pop     ebx
.text:0040C08D                 pop     esi
.text:0040C08E                 pop     edi
.text:0040C08F                 pop     ebp
.text:0040C090                 retn
.text:0040C091 ; ---------------------------------------------------------------------------
.text:0040C091
.text:0040C091 loc_40C091:                             ; CODE XREF: sub_40C010+57↑j
.text:0040C091                 mov     edx, [esp+2Ch+var_18]
.text:0040C095                 movzx   eax, byte ptr ds:dword_4151E0[edx]
.text:0040C09C                 mov     [esp+2Ch+var_11], al
.text:0040C0A0                 jmp     short loc_40C072
.text:0040C0A2 ; ---------------------------------------------------------------------------
.text:0040C0A2
.text:0040C0A2 loc_40C0A2:                             ; CODE XREF: sub_40C010+24↑j
.text:0040C0A2                 mov     [esp+2Ch+Str], 0
.text:0040C0A9                 call    sub_40EE40
.text:0040C0AE                 test    eax, eax
.text:0040C0B0                 mov     ebx, eax
.text:0040C0B2                 jz      short loc_40C10C
.text:0040C0B4                 movzx   ecx, byte ptr [eax]
.text:0040C0B7                 mov     esi, 0FFFFFFF0h
.text:0040C0BC                 test    cl, cl
.text:0040C0BE                 jz      short loc_40C10C
.text:0040C0C0
.text:0040C0C0 loc_40C0C0:                             ; CODE XREF: sub_40C010+FA↓j
.text:0040C0C0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040C0C3                 movsx   ebp, cl
.text:0040C0C6                 add     esi, 10h
.text:0040C0C9                 mov     ds:dword_4151E0[esi], ebp
.text:0040C0CF                 mov     edi, ebp
.text:0040C0D1                 sar     edi, 1Fh
.text:0040C0D4                 mov     ds:dword_4151E4[esi], edi
.text:0040C0DA                 call    sub_40A5D0
.text:0040C0DF                 mov     ds:dword_4151E8[esi], eax
.text:0040C0E5                 xor     ecx, ecx
.text:0040C0E7                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040C0EA                 mov     ds:dword_4151EC[esi], ecx
.text:0040C0F0                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040C0F8                 call    strchr
.text:0040C0FD                 mov     ebx, eax
.text:0040C0FF                 inc     ebx
.text:0040C100                 jz      short loc_40C10C
.text:0040C102                 movzx   edx, byte ptr [eax+1]
.text:0040C106                 test    dl, dl
.text:0040C108                 mov     cl, dl
.text:0040C10A                 jnz     short loc_40C0C0
.text:0040C10C
.text:0040C10C loc_40C10C:                             ; CODE XREF: sub_40C010+A2↑j
.text:0040C10C                                         ; sub_40C010+AE↑j ...
.text:0040C10C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040C10F                 mov     esi, 1
.text:0040C114                 mov     ds:dword_4151C0, esi
.text:0040C11A                 call    free
.text:0040C11F                 jmp     loc_40C036
.text:0040C124 ; ---------------------------------------------------------------------------
.text:0040C124
.text:0040C124 loc_40C124:                             ; CODE XREF: sub_40C010+16↑j
.text:0040C124                 movsx   eax, byte_414060
.text:0040C12B                 jmp     loc_40C089
.text:0040C12B sub_40C010      endp
.text:0040C12B
.text:0040C12B ; ---------------------------------------------------------------------------
.text:0040C130 dword_40C130    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040C130                                         ; DATA XREF: .text:0040C153↓o
.text:0040C130                                         ; .text:0040C233↓o
.text:0040C140 ; ---------------------------------------------------------------------------
.text:0040C140                 sub     esp, 1Ch
.text:0040C143                 mov     [esp+14h], esi
.text:0040C147                 mov     esi, [esp+20h]
.text:0040C14B                 mov     [esp+18h], edi
.text:0040C14F                 mov     [esp+10h], ebx
.text:0040C153                 mov     dword ptr [esp], offset dword_40C130
.text:0040C15A                 call    _strdup
.text:0040C15F                 mov     [esp], esi
.text:0040C162                 mov     edi, eax
.text:0040C164                 call    sub_40C010
.text:0040C169                 mov     [edi], al
.text:0040C16B                 test    al, al
.text:0040C16D                 jz      short loc_40C181
.text:0040C16F                 mov     eax, edi
.text:0040C171                 mov     ebx, [esp+10h]
.text:0040C175                 mov     esi, [esp+14h]
.text:0040C179                 mov     edi, [esp+18h]
.text:0040C17D                 add     esp, 1Ch
.text:0040C180                 retn
.text:0040C181 ; ---------------------------------------------------------------------------
.text:0040C181
.text:0040C181 loc_40C181:                             ; CODE XREF: .text:0040C16D↑j
.text:0040C181                 mov     [esp], edi
.text:0040C184                 call    free
.text:0040C189                 mov     dword ptr [esp+4], 0
.text:0040C191                 mov     dword ptr [esp], 0
.text:0040C198                 call    GetCurrentDirectoryA
.text:0040C19D                 sub     esp, 8
.text:0040C1A0                 lea     esi, [eax+1]
.text:0040C1A3                 mov     [esp], esi
.text:0040C1A6                 call    malloc
.text:0040C1AB                 mov     [esp+4], eax
.text:0040C1AF                 mov     edi, eax
.text:0040C1B1                 mov     [esp], esi
.text:0040C1B4                 call    GetCurrentDirectoryA
.text:0040C1B9                 sub     esp, 8
.text:0040C1BC                 test    eax, eax
.text:0040C1BE                 jnz     short loc_40C1E0
.text:0040C1C0                 mov     dword ptr [esp+20h], 40C134h
.text:0040C1C8                 mov     ebx, [esp+10h]
.text:0040C1CC                 mov     esi, [esp+14h]
.text:0040C1D0                 mov     edi, [esp+18h]
.text:0040C1D4                 add     esp, 1Ch
.text:0040C1D7                 jmp     _strdup
.text:0040C1D7 ; ---------------------------------------------------------------------------
.text:0040C1DC                 align 10h
.text:0040C1E0
.text:0040C1E0 loc_40C1E0:                             ; CODE XREF: .text:0040C1BE↑j
.text:0040C1E0                 mov     [esp+20h], edi
.text:0040C1E4                 mov     ebx, [esp+10h]
.text:0040C1E8                 mov     esi, [esp+14h]
.text:0040C1EC                 mov     edi, [esp+18h]
.text:0040C1F0                 add     esp, 1Ch
.text:0040C1F3                 jmp     sub_40BEF0
.text:0040C1F3 ; ---------------------------------------------------------------------------
.text:0040C1F8                 align 10h
.text:0040C200                 sub     esp, 7Ch
.text:0040C203                 lea     edx, [esp+10h]
.text:0040C207                 mov     [esp+8], edx
.text:0040C20B                 mov     edx, [esp+80h]
.text:0040C212                 mov     [esp+70h], ebx
.text:0040C216                 mov     [esp+74h], esi
.text:0040C21A                 mov     [esp+4], edx
.text:0040C21E                 mov     [esp+78h], edi
.text:0040C222                 mov     dword ptr [esp], 0
.text:0040C229                 call    sub_409820
.text:0040C22E                 xor     edx, edx
.text:0040C230                 inc     eax
.text:0040C231                 jz      short loc_40C255
.text:0040C233                 mov     dword ptr [esp], offset dword_40C130
.text:0040C23A                 mov     esi, [esp+20h]
.text:0040C23E                 call    _strdup
.text:0040C243                 mov     edi, eax
.text:0040C245                 mov     [esp], esi
.text:0040C248                 call    sub_40C010
.text:0040C24D                 mov     [edi], al
.text:0040C24F                 test    al, al
.text:0040C251                 mov     edx, edi
.text:0040C253                 jz      short loc_40C267
.text:0040C255
.text:0040C255 loc_40C255:                             ; CODE XREF: .text:0040C231↑j
.text:0040C255                                         ; .text:0040C2B4↓j
.text:0040C255                 mov     ebx, [esp+70h]
.text:0040C259                 mov     eax, edx
.text:0040C25B                 mov     esi, [esp+74h]
.text:0040C25F                 mov     edi, [esp+78h]
.text:0040C263                 add     esp, 7Ch
.text:0040C266                 retn
.text:0040C267 ; ---------------------------------------------------------------------------
.text:0040C267
.text:0040C267 loc_40C267:                             ; CODE XREF: .text:0040C253↑j
.text:0040C267                 mov     [esp], edi
.text:0040C26A                 call    free
.text:0040C26F                 mov     dword ptr [esp+4], 0
.text:0040C277                 mov     dword ptr [esp], 0
.text:0040C27E                 call    GetCurrentDirectoryA
.text:0040C283                 sub     esp, 8
.text:0040C286                 lea     esi, [eax+1]
.text:0040C289                 mov     [esp], esi
.text:0040C28C                 call    malloc
.text:0040C291                 mov     [esp+4], eax
.text:0040C295                 mov     edi, eax
.text:0040C297                 mov     [esp], esi
.text:0040C29A                 call    GetCurrentDirectoryA
.text:0040C29F                 sub     esp, 8
.text:0040C2A2                 test    eax, eax
.text:0040C2A4                 jnz     short loc_40C2B6
.text:0040C2A6                 mov     dword ptr [esp], 40C134h
.text:0040C2AD                 call    _strdup
.text:0040C2B2
.text:0040C2B2 loc_40C2B2:                             ; CODE XREF: .text:0040C2BE↓j
.text:0040C2B2                 mov     edx, eax
.text:0040C2B4                 jmp     short loc_40C255
.text:0040C2B6 ; ---------------------------------------------------------------------------
.text:0040C2B6
.text:0040C2B6 loc_40C2B6:                             ; CODE XREF: .text:0040C2A4↑j
.text:0040C2B6                 mov     [esp], edi
.text:0040C2B9                 call    sub_40BEF0
.text:0040C2BE                 jmp     short loc_40C2B2
.text:0040C2C0
.text:0040C2C0 ; =============== S U B R O U T I N E =======================================
.text:0040C2C0
.text:0040C2C0
.text:0040C2C0 ; int __cdecl sub_40C2C0(LPCSTR)
.text:0040C2C0 sub_40C2C0      proc near               ; CODE XREF: sub_409A80+12F↑p
.text:0040C2C0
.text:0040C2C0 String1         = dword ptr -1Ch
.text:0040C2C0 String2         = dword ptr -18h
.text:0040C2C0 var_C           = dword ptr -0Ch
.text:0040C2C0 var_8           = dword ptr -8
.text:0040C2C0 var_4           = dword ptr -4
.text:0040C2C0 arg_0           = dword ptr  4
.text:0040C2C0
.text:0040C2C0                 sub     esp, 1Ch
.text:0040C2C3                 mov     [esp+1Ch+var_4], edi
.text:0040C2C7                 mov     edi, [esp+1Ch+arg_0]
.text:0040C2CB                 mov     [esp+1Ch+var_C], ebx
.text:0040C2CF                 mov     [esp+1Ch+var_8], esi
.text:0040C2D3                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040C2D6                 call    sub_40D5D0
.text:0040C2DB                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040C2DE                 mov     esi, eax
.text:0040C2E0                 call    sub_40BEF0
.text:0040C2E5                 mov     [esp+1Ch+String2], eax ; String2
.text:0040C2E9                 mov     ebx, eax
.text:0040C2EB                 mov     [esp+1Ch+String1], esi ; String1
.text:0040C2EE                 call    _stricmp
.text:0040C2F3                 test    eax, eax
.text:0040C2F5                 setz    dl
.text:0040C2F8                 test    esi, esi
.text:0040C2FA                 movzx   edi, dl
.text:0040C2FD                 jz      short loc_40C307
.text:0040C2FF                 mov     [esp+1Ch+String1], esi ; Block
.text:0040C302                 call    free
.text:0040C307
.text:0040C307 loc_40C307:                             ; CODE XREF: sub_40C2C0+3D↑j
.text:0040C307                 test    ebx, ebx
.text:0040C309                 jz      short loc_40C313
.text:0040C30B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040C30E                 call    free
.text:0040C313
.text:0040C313 loc_40C313:                             ; CODE XREF: sub_40C2C0+49↑j
.text:0040C313                 mov     eax, edi
.text:0040C315                 mov     ebx, [esp+1Ch+var_C]
.text:0040C319                 mov     esi, [esp+1Ch+var_8]
.text:0040C31D                 mov     edi, [esp+1Ch+var_4]
.text:0040C321                 add     esp, 1Ch
.text:0040C324                 retn
.text:0040C324 sub_40C2C0      endp
.text:0040C324
.text:0040C324 ; ---------------------------------------------------------------------------
.text:0040C325                 align 10h
.text:0040C330
.text:0040C330 ; =============== S U B R O U T I N E =======================================
.text:0040C330
.text:0040C330
.text:0040C330 ; int __cdecl sub_40C330(char *, int)
.text:0040C330 sub_40C330      proc near               ; CODE XREF: sub_401BF0+4C0↑p
.text:0040C330                                         ; sub_4026E0+537↑p ...
.text:0040C330
.text:0040C330 var_C           = dword ptr -0Ch
.text:0040C330 var_8           = dword ptr -8
.text:0040C330 var_4           = dword ptr -4
.text:0040C330 arg_0           = dword ptr  4
.text:0040C330 arg_4           = dword ptr  8
.text:0040C330
.text:0040C330                 sub     esp, 0Ch
.text:0040C333                 mov     edx, [esp+0Ch+arg_4]
.text:0040C337                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040C33E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040C342                 mov     edx, [esp+0Ch+arg_0]
.text:0040C346                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040C34A                 call    sub_40CBE0
.text:0040C34F                 add     esp, 0Ch
.text:0040C352                 retn
.text:0040C352 sub_40C330      endp
.text:0040C352
.text:0040C352 ; ---------------------------------------------------------------------------
.text:0040C353                 align 10h
.text:0040C360 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040C3B1↓o
.text:0040C369 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040C369                                         ; DATA XREF: .text:0040C3C2↓o
.text:0040C37D ; const CHAR aVwin32[]
.text:0040C37D aVwin32         db '\\.\vwin32',0       ; DATA XREF: .text:0040C50C↓o
.text:0040C37D                                         ; sub_40C940+17C↓o
.text:0040C388 ; ---------------------------------------------------------------------------
.text:0040C388
.text:0040C388 loc_40C388:                             ; DATA XREF: .text:0040C622↓o
.text:0040C388                 dec     esi
.text:0040C389                 push    esp
.text:0040C38A                 inc     esi
.text:0040C38B                 push    ebx
.text:0040C38C                 add     [esi+41h], al
.text:0040C38F                 push    esp
.text:0040C390                 xor     esi, [edx]
.text:0040C392                 add     [esi+41h], al
.text:0040C395                 push    esp
.text:0040C396                 add     [ebx+44h], al
.text:0040C399                 inc     esi
.text:0040C39A                 push    ebx
.text:0040C39B
.text:0040C39B loc_40C39B:                             ; CODE XREF: sub_40C940+101↓p
.text:0040C39B                 add     [ebp+55002674h], cl
.text:0040C3A1                 push    edi
.text:0040C3A2                 push    esi
.text:0040C3A3                 push    ebx
.text:0040C3A4                 sub     esp, 8BCh
.text:0040C3AA                 mov     ebp, [esp+8D0h]
.text:0040C3B1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040C3B8                 call    LoadLibraryA
.text:0040C3BD                 sub     esp, 4
.text:0040C3C0                 mov     edi, eax
.text:0040C3C2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040C3CA                 mov     [esp], eax
.text:0040C3CD                 call    GetProcAddress
.text:0040C3D2                 sub     esp, 8
.text:0040C3D5                 mov     esi, eax
.text:0040C3D7                 test    ebp, ebp
.text:0040C3D9                 mov     dword ptr [esp+20h], 0
.text:0040C3E1                 jz      loc_40C921
.text:0040C3E7                 mov     [esp], ebp
.text:0040C3EA                 call    sub_40B8D0
.text:0040C3EF                 mov     [esp], eax
.text:0040C3F2                 mov     ebp, eax
.text:0040C3F4                 call    strlen
.text:0040C3F9                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040C3FE                 mov     ebx, eax
.text:0040C400                 jz      short loc_40C41C
.text:0040C402                 mov     [esp], ebp
.text:0040C405                 lea     edx, [eax+1]
.text:0040C408                 mov     [esp+4], edx
.text:0040C40C                 call    realloc
.text:0040C411                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040C415                 mov     ebp, eax
.text:0040C417                 mov     byte ptr [ebx+eax+1], 0
.text:0040C41C
.text:0040C41C loc_40C41C:                             ; CODE XREF: .text:0040C400↑j
.text:0040C41C                 mov     dword ptr [esp+1Ch], 400h
.text:0040C424                 lea     edx, [esp+0B0h]
.text:0040C42B                 lea     ebx, [esp+5Ch]
.text:0040C42F                 mov     [esp+18h], edx
.text:0040C433                 lea     ecx, [esp+58h]
.text:0040C437                 lea     edx, [esp+54h]
.text:0040C43B                 mov     [esp+14h], ebx
.text:0040C43F                 lea     eax, [esp+4B0h]
.text:0040C446                 mov     [esp+10h], ecx
.text:0040C44A                 mov     [esp+0Ch], edx
.text:0040C44E                 mov     dword ptr [esp+8], 400h
.text:0040C456                 mov     [esp+4], eax
.text:0040C45A                 mov     [esp], ebp
.text:0040C45D                 call    GetVolumeInformationA
.text:0040C462                 sub     esp, 20h
.text:0040C465                 test    eax, eax
.text:0040C467                 jz      loc_40C8FE
.text:0040C46D                 test    esi, esi
.text:0040C46F                 jz      short loc_40C495
.text:0040C471                 mov     [esp], ebp
.text:0040C474                 lea     edx, [esp+48h]
.text:0040C478                 lea     ebx, [esp+40h]
.text:0040C47C                 mov     [esp+0Ch], edx
.text:0040C480                 lea     ecx, [esp+38h]
.text:0040C484                 mov     [esp+8], ebx
.text:0040C488                 mov     [esp+4], ecx
.text:0040C48C                 call    esi
.text:0040C48E                 sub     esp, 10h
.text:0040C491                 mov     [esp+20h], eax
.text:0040C495
.text:0040C495 loc_40C495:                             ; CODE XREF: .text:0040C46F↑j
.text:0040C495                 test    edi, edi
.text:0040C497                 jz      short loc_40C4A4
.text:0040C499                 mov     [esp], edi
.text:0040C49C                 call    FreeLibrary
.text:0040C4A1                 sub     esp, 4
.text:0040C4A4
.text:0040C4A4 loc_40C4A4:                             ; CODE XREF: .text:0040C497↑j
.text:0040C4A4                 call    sub_40E060
.text:0040C4A9                 test    eax, eax
.text:0040C4AB                 lea     esi, [esp+28h]
.text:0040C4AF                 jz      loc_40C8E0
.text:0040C4B5                 call    sub_40E060
.text:0040C4BA                 test    eax, eax
.text:0040C4BC                 jz      short loc_40C4CC
.text:0040C4BE                 call    sub_40DFB0
.text:0040C4C3                 cmp     eax, 0Bh
.text:0040C4C6                 jle     loc_40C8B4
.text:0040C4CC
.text:0040C4CC loc_40C4CC:                             ; CODE XREF: .text:0040C4BC↑j
.text:0040C4CC                 cld
.text:0040C4CD                 xor     eax, eax
.text:0040C4CF                 lea     ebx, [esp+60h]
.text:0040C4D3                 mov     ecx, 7
.text:0040C4D8                 mov     edi, ebx
.text:0040C4DA                 rep stosd
.text:0040C4DC                 mov     dword ptr [esp+18h], 0
.text:0040C4E4                 mov     dword ptr [esp+14h], 4000000h
.text:0040C4EC                 mov     dword ptr [esp+10h], 0
.text:0040C4F4                 mov     dword ptr [esp+0Ch], 0
.text:0040C4FC                 mov     dword ptr [esp+8], 0
.text:0040C504                 mov     dword ptr [esp+4], 0
.text:0040C50C                 mov     dword ptr [esp], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040C513                 call    CreateFileA
.text:0040C518                 sub     esp, 1Ch
.text:0040C51B                 mov     edi, eax
.text:0040C51D                 cmp     eax, 0FFFFFFFFh
.text:0040C520                 jz      short loc_40C5A0
.text:0040C522                 mov     [esp+10h], ebx
.text:0040C526                 lea     edx, [esp+80h]
.text:0040C52D                 lea     ecx, [esp+24h]
.text:0040C531                 mov     [esp+70h], edx
.text:0040C535                 mov     [esp+18h], ecx
.text:0040C539                 mov     [esp+8], ebx
.text:0040C53D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040C545                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040C54D                 mov     [esp+64h], ebp
.text:0040C551                 mov     dword ptr [esp+78h], 1
.text:0040C559                 mov     dword ptr [esp+1Ch], 0
.text:0040C561                 mov     dword ptr [esp+14h], 1Ch
.text:0040C569                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040C571                 mov     dword ptr [esp+4], 6
.text:0040C579                 mov     [esp], eax
.text:0040C57C                 call    DeviceIoControl
.text:0040C581                 sub     esp, 20h
.text:0040C584                 mov     ebx, eax
.text:0040C586                 mov     [esp], edi
.text:0040C589                 call    CloseHandle
.text:0040C58E                 sub     esp, 4
.text:0040C591                 test    ebx, ebx
.text:0040C593                 jz      short loc_40C5A0
.text:0040C595                 test    byte ptr [esp+78h], 1
.text:0040C59A                 jz      loc_40C880
.text:0040C5A0
.text:0040C5A0 loc_40C5A0:                             ; CODE XREF: .text:0040C520↑j
.text:0040C5A0                                         ; .text:0040C593↑j
.text:0040C5A0                 call    sub_40D580
.text:0040C5A5                 mov     edi, eax
.text:0040C5A7                 call    _errno
.text:0040C5AC                 mov     [eax], edi
.text:0040C5AE                 xor     eax, eax
.text:0040C5B0
.text:0040C5B0 loc_40C5B0:                             ; CODE XREF: .text:0040C8AF↓j
.text:0040C5B0                                         ; .text:0040C8DB↓j
.text:0040C5B0                 test    eax, eax
.text:0040C5B2                 jnz     short loc_40C5D4
.text:0040C5B4                 mov     dword ptr [esp+34h], 1
.text:0040C5BC                 mov     dword ptr [esp+30h], 200h
.text:0040C5C4                 mov     dword ptr [esp+2Ch], 0
.text:0040C5CC                 mov     dword ptr [esp+28h], 0
.text:0040C5D4
.text:0040C5D4 loc_40C5D4:                             ; CODE XREF: .text:0040C5B2↑j
.text:0040C5D4                 mov     edx, [esp+30h]
.text:0040C5D8                 mov     edi, [esp+34h]
.text:0040C5DC                 mov     ecx, [esp+20h]
.text:0040C5E0                 imul    edi, edx
.text:0040C5E3                 test    ecx, ecx
.text:0040C5E5                 jnz     short loc_40C60D
.text:0040C5E7                 mov     eax, [esp+28h]
.text:0040C5EB                 mul     edi
.text:0040C5ED                 mov     esi, eax
.text:0040C5EF                 mov     eax, [esp+2Ch]
.text:0040C5F3                 mov     [esp+44h], edx
.text:0040C5F7                 mov     [esp+40h], esi
.text:0040C5FB                 mul     edi
.text:0040C5FD                 mov     [esp+48h], eax
.text:0040C601                 mov     [esp+4Ch], edx
.text:0040C605                 mov     [esp+38h], eax
.text:0040C609                 mov     [esp+3Ch], edx
.text:0040C60D
.text:0040C60D loc_40C60D:                             ; CODE XREF: .text:0040C5E5↑j
.text:0040C60D                 mov     ebx, [esp+5Ch]
.text:0040C611                 lea     edx, [esp+0B0h]
.text:0040C618                 mov     ecx, [esp+8D4h]
.text:0040C61F                 mov     [ecx+48h], ebx
.text:0040C622                 mov     dword ptr [esp+4], offset loc_40C388
.text:0040C62A                 mov     [esp], edx
.text:0040C62D                 call    _stricmp
.text:0040C632                 test    eax, eax
.text:0040C634                 jnz     loc_40C7F0
.text:0040C63A                 mov     esi, [esp+8D4h]
.text:0040C641                 mov     dword ptr [esi], 5346544Eh
.text:0040C647
.text:0040C647 loc_40C647:                             ; CODE XREF: .text:0040C818↓j
.text:0040C647                                         ; .text:0040C845↓j ...
.text:0040C647                 mov     ebx, [esp+30h]
.text:0040C64B                 mov     esi, [esp+8D4h]
.text:0040C652                 mov     [esi+4], ebx
.text:0040C655                 mov     [esi+8], ebx
.text:0040C658                 mov     ebx, [esi+8]
.text:0040C65B                 mov     [esi+0Ch], edi
.text:0040C65E                 mov     ecx, [esp+44h]
.text:0040C662                 xor     esi, esi
.text:0040C664                 mov     [esp+8], ebx
.text:0040C668                 mov     edx, [esp+40h]
.text:0040C66C                 mov     [esp+0Ch], esi
.text:0040C670                 mov     [esp+4], ecx
.text:0040C674                 mov     [esp], edx
.text:0040C677                 call    sub_412740
.text:0040C67C                 mov     ecx, [esp+8D4h]
.text:0040C683                 mov     [ecx+10h], eax
.text:0040C686                 mov     [ecx+14h], edx
.text:0040C689                 mov     ecx, [esp+4Ch]
.text:0040C68D                 mov     [esp+8], ebx
.text:0040C691                 mov     edx, [esp+48h]
.text:0040C695                 mov     [esp+0Ch], esi
.text:0040C699                 mov     [esp+4], ecx
.text:0040C69D                 mov     [esp], edx
.text:0040C6A0                 call    sub_412740
.text:0040C6A5                 mov     ecx, [esp+8D4h]
.text:0040C6AC                 mov     [ecx+18h], eax
.text:0040C6AF                 mov     [ecx+1Ch], edx
.text:0040C6B2                 mov     ecx, [esp+38h]
.text:0040C6B6                 mov     [esp+8], ebx
.text:0040C6BA                 mov     ebx, [esp+3Ch]
.text:0040C6BE                 mov     [esp+0Ch], esi
.text:0040C6C2                 mov     [esp], ecx
.text:0040C6C5                 mov     [esp+4], ebx
.text:0040C6C9                 call    sub_412740
.text:0040C6CE                 mov     esi, [esp+8D4h]
.text:0040C6D5                 mov     [esi+20h], eax
.text:0040C6D8                 mov     [esi+24h], edx
.text:0040C6DB                 mov     ecx, [esp+44h]
.text:0040C6DF                 mov     esi, edi
.text:0040C6E1                 mov     [esp+8], esi
.text:0040C6E5                 mov     edx, [esp+40h]
.text:0040C6E9                 xor     edi, edi
.text:0040C6EB                 mov     [esp+0Ch], edi
.text:0040C6EF                 mov     [esp+4], ecx
.text:0040C6F3                 mov     [esp], edx
.text:0040C6F6                 call    sub_412740
.text:0040C6FB                 mov     ebx, [esp+8D4h]
.text:0040C702                 mov     [ebx+28h], eax
.text:0040C705                 mov     [ebx+2Ch], edx
.text:0040C708                 mov     ecx, [esp+4Ch]
.text:0040C70C                 mov     [esp+8], esi
.text:0040C710                 mov     edx, [esp+48h]
.text:0040C714                 mov     [esp+0Ch], edi
.text:0040C718                 mov     [esp+4], ecx
.text:0040C71C                 mov     [esp], edx
.text:0040C71F                 call    sub_412740
.text:0040C724                 mov     ebx, [esp+8D4h]
.text:0040C72B                 mov     [ebx+30h], eax
.text:0040C72E                 mov     [ebx+34h], edx
.text:0040C731                 mov     ecx, [esp+3Ch]
.text:0040C735                 mov     [esp+8], esi
.text:0040C739                 mov     edx, [esp+38h]
.text:0040C73D                 mov     [esp+0Ch], edi
.text:0040C741                 mov     [esp+4], ecx
.text:0040C745                 mov     [esp], edx
.text:0040C748                 call    sub_412740
.text:0040C74D                 mov     edx, [esp+8D4h]
.text:0040C754                 lea     ecx, [esp+0B0h]
.text:0040C75B                 mov     [edx+38h], eax
.text:0040C75E                 mov     esi, [esp+58h]
.text:0040C762                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040C769                 mov     [edx+110h], esi
.text:0040C76F                 mov     esi, edx
.text:0040C771                 add     esi, 4Ch ; 'L'
.text:0040C774                 movzx   ebx, word ptr [esp+56h]
.text:0040C779                 movzx   edi, word ptr [esp+54h]
.text:0040C77E                 mov     [edx+3Ch], ebx
.text:0040C781                 lea     ebx, [esp+4B0h]
.text:0040C788                 mov     [edx+40h], edi
.text:0040C78B                 mov     [esp+4], ecx
.text:0040C78F                 mov     dword ptr [esp+8], 10h
.text:0040C797                 mov     [esp], esi
.text:0040C79A                 call    strncpy
.text:0040C79F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040C7A7                 mov     edi, [esp+8D4h]
.text:0040C7AE                 mov     [esp+4], ebx
.text:0040C7B2                 add     edi, 5Ch ; '\'
.text:0040C7B5                 mov     [esp], edi
.text:0040C7B8                 call    strncpy
.text:0040C7BD                 mov     [esp+4], ebp
.text:0040C7C1                 mov     ebp, [esp+8D4h]
.text:0040C7C8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040C7D0                 add     ebp, 0B6h ; '¶'
.text:0040C7D6                 mov     [esp], ebp
.text:0040C7D9                 call    strncpy
.text:0040C7DE                 xor     eax, eax
.text:0040C7E0
.text:0040C7E0 loc_40C7E0:                             ; CODE XREF: .text:0040C91C↓j
.text:0040C7E0                 add     esp, 8BCh
.text:0040C7E6                 pop     ebx
.text:0040C7E7                 pop     esi
.text:0040C7E8                 pop     edi
.text:0040C7E9                 pop     ebp
.text:0040C7EA                 retn
.text:0040C7EA ; ---------------------------------------------------------------------------
.text:0040C7EB                 align 10h
.text:0040C7F0
.text:0040C7F0 loc_40C7F0:                             ; CODE XREF: .text:0040C634↑j
.text:0040C7F0                 mov     dword ptr [esp+4], 40C38Dh
.text:0040C7F8                 lea     eax, [esp+0B0h]
.text:0040C7FF                 mov     [esp], eax
.text:0040C802                 call    _stricmp
.text:0040C807                 test    eax, eax
.text:0040C809                 jnz     short loc_40C81D
.text:0040C80B                 mov     edx, [esp+8D4h]
.text:0040C812                 mov     dword ptr [edx], 4008h
.text:0040C818                 jmp     loc_40C647
.text:0040C81D ; ---------------------------------------------------------------------------
.text:0040C81D
.text:0040C81D loc_40C81D:                             ; CODE XREF: .text:0040C809↑j
.text:0040C81D                 mov     dword ptr [esp+4], 40C393h
.text:0040C825                 lea     ecx, [esp+0B0h]
.text:0040C82C                 mov     [esp], ecx
.text:0040C82F                 call    _stricmp
.text:0040C834                 test    eax, eax
.text:0040C836                 jnz     short loc_40C84A
.text:0040C838                 mov     ebx, [esp+8D4h]
.text:0040C83F                 mov     dword ptr [ebx], 4006h
.text:0040C845                 jmp     loc_40C647
.text:0040C84A ; ---------------------------------------------------------------------------
.text:0040C84A
.text:0040C84A loc_40C84A:                             ; CODE XREF: .text:0040C836↑j
.text:0040C84A                 mov     dword ptr [esp+4], 40C397h
.text:0040C852                 lea     eax, [esp+0B0h]
.text:0040C859                 mov     [esp], eax
.text:0040C85C                 call    _stricmp
.text:0040C861                 test    eax, eax
.text:0040C863                 mov     esi, [esp+8D4h]
.text:0040C86A                 setnz   cl
.text:0040C86D                 movzx   edx, cl
.text:0040C870                 dec     edx
.text:0040C871                 and     edx, 4000h
.text:0040C877                 mov     [esi], edx
.text:0040C879                 jmp     loc_40C647
.text:0040C879 ; ---------------------------------------------------------------------------
.text:0040C87E                 align 10h
.text:0040C880
.text:0040C880 loc_40C880:                             ; CODE XREF: .text:0040C59A↑j
.text:0040C880                 mov     edi, [esp+84h]
.text:0040C887                 mov     eax, 1
.text:0040C88C                 mov     edx, [esp+88h]
.text:0040C893                 mov     ecx, [esp+8Ch]
.text:0040C89A                 mov     ebx, [esp+90h]
.text:0040C8A1                 mov     [esp+34h], edi
.text:0040C8A5                 mov     [esp+30h], edx
.text:0040C8A9                 mov     [esp+2Ch], ecx
.text:0040C8AD                 mov     [esi], ebx
.text:0040C8AF                 jmp     loc_40C5B0
.text:0040C8B4 ; ---------------------------------------------------------------------------
.text:0040C8B4
.text:0040C8B4 loc_40C8B4:                             ; CODE XREF: .text:0040C4C6↑j
.text:0040C8B4                 mov     [esp+10h], esi
.text:0040C8B8                 lea     eax, [esp+2Ch]
.text:0040C8BC                 lea     esi, [esp+30h]
.text:0040C8C0                 mov     [esp+0Ch], eax
.text:0040C8C4                 lea     edi, [esp+34h]
.text:0040C8C8                 mov     [esp+8], esi
.text:0040C8CC                 mov     [esp+4], edi
.text:0040C8D0
.text:0040C8D0 loc_40C8D0:                             ; CODE XREF: .text:0040C8FC↓j
.text:0040C8D0                 mov     [esp], ebp
.text:0040C8D3                 call    GetDiskFreeSpaceA
.text:0040C8D8                 sub     esp, 14h
.text:0040C8DB                 jmp     loc_40C5B0
.text:0040C8E0 ; ---------------------------------------------------------------------------
.text:0040C8E0
.text:0040C8E0 loc_40C8E0:                             ; CODE XREF: .text:0040C4AF↑j
.text:0040C8E0                 mov     [esp+10h], esi
.text:0040C8E4                 lea     ebx, [esp+2Ch]
.text:0040C8E8                 lea     eax, [esp+30h]
.text:0040C8EC                 mov     [esp+0Ch], ebx
.text:0040C8F0                 lea     esi, [esp+34h]
.text:0040C8F4                 mov     [esp+8], eax
.text:0040C8F8                 mov     [esp+4], esi
.text:0040C8FC                 jmp     short loc_40C8D0
.text:0040C8FE ; ---------------------------------------------------------------------------
.text:0040C8FE
.text:0040C8FE loc_40C8FE:                             ; CODE XREF: .text:0040C467↑j
.text:0040C8FE                 mov     [esp], edi
.text:0040C901                 call    FreeLibrary
.text:0040C906                 sub     esp, 4
.text:0040C909                 call    sub_40D580
.text:0040C90E                 mov     esi, eax
.text:0040C910                 call    _errno
.text:0040C915                 mov     [eax], esi
.text:0040C917
.text:0040C917 loc_40C917:                             ; CODE XREF: .text:0040C937↓j
.text:0040C917                 mov     eax, 0FFFFFFFFh
.text:0040C91C                 jmp     loc_40C7E0
.text:0040C921 ; ---------------------------------------------------------------------------
.text:0040C921
.text:0040C921 loc_40C921:                             ; CODE XREF: .text:0040C3E1↑j
.text:0040C921                 mov     [esp], edi
.text:0040C924                 call    FreeLibrary
.text:0040C929                 sub     esp, 4
.text:0040C92C                 call    _errno
.text:0040C931                 mov     dword ptr [eax], 2
.text:0040C937                 jmp     short loc_40C917
.text:0040C937 ; ---------------------------------------------------------------------------
.text:0040C939                 align 10h
.text:0040C940
.text:0040C940 ; =============== S U B R O U T I N E =======================================
.text:0040C940
.text:0040C940
.text:0040C940 ; int __cdecl sub_40C940(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040C940 sub_40C940      proc near               ; CODE XREF: sub_40A0D0+2C7↑p
.text:0040C940                                         ; .text:0040A70A↑p
.text:0040C940
.text:0040C940 lpFileName      = dword ptr -9Ch
.text:0040C940 dwDesiredAccess = dword ptr -98h
.text:0040C940 dwShareMode     = dword ptr -94h
.text:0040C940 lpSecurityAttributes= dword ptr -90h
.text:0040C940 dwCreationDisposition= dword ptr -8Ch
.text:0040C940 dwFlagsAndAttributes= dword ptr -88h
.text:0040C940 hTemplateFile   = dword ptr -84h
.text:0040C940 lpOverlapped    = dword ptr -80h
.text:0040C940 BytesReturned   = dword ptr -70h
.text:0040C940 InBuffer        = byte ptr -6Ch
.text:0040C940 var_68          = dword ptr -68h
.text:0040C940 var_64          = dword ptr -64h
.text:0040C940 var_60          = dword ptr -60h
.text:0040C940 var_5C          = dword ptr -5Ch
.text:0040C940 var_54          = dword ptr -54h
.text:0040C940 var_4C          = byte ptr -4Ch
.text:0040C940 var_48          = dword ptr -48h
.text:0040C940 var_44          = dword ptr -44h
.text:0040C940 var_40          = dword ptr -40h
.text:0040C940 var_3C          = dword ptr -3Ch
.text:0040C940 lpRootPathName  = dword ptr -2Ch
.text:0040C940 lpSectorsPerCluster= dword ptr -28h
.text:0040C940 lpBytesPerSector= dword ptr -24h
.text:0040C940 lpNumberOfFreeClusters= dword ptr -20h
.text:0040C940 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040C940 var_18          = dword ptr -18h
.text:0040C940 var_14          = dword ptr -14h
.text:0040C940 var_10          = dword ptr -10h
.text:0040C940 var_C           = dword ptr -0Ch
.text:0040C940 var_8           = dword ptr -8
.text:0040C940 var_4           = dword ptr -4
.text:0040C940 arg_0           = dword ptr  4
.text:0040C940 arg_4           = dword ptr  8
.text:0040C940 arg_8           = dword ptr  0Ch
.text:0040C940 arg_C           = dword ptr  10h
.text:0040C940 arg_10          = dword ptr  14h
.text:0040C940
.text:0040C940                 sub     esp, 2Ch
.text:0040C943                 mov     edx, [esp+2Ch+arg_0]
.text:0040C947                 mov     [esp+2Ch+var_10], ebx
.text:0040C94B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040C94F                 mov     [esp+2Ch+var_C], esi
.text:0040C953                 mov     esi, [esp+2Ch+arg_C]
.text:0040C957                 mov     [esp+2Ch+var_8], edi
.text:0040C95B                 mov     edi, [esp+2Ch+arg_8]
.text:0040C95F                 mov     [esp+2Ch+var_4], ebp
.text:0040C963                 mov     ebp, [esp+2Ch+arg_4]
.text:0040C967                 mov     [esp+2Ch+var_14], edx
.text:0040C96B                 call    sub_40E060
.text:0040C970                 test    eax, eax
.text:0040C972                 jz      short loc_40C9A4
.text:0040C974                 mov     [esp+2Ch+arg_10], ebx
.text:0040C978                 mov     edx, [esp+2Ch+var_14]
.text:0040C97C                 mov     ebx, [esp+2Ch+var_10]
.text:0040C980                 mov     [esp+2Ch+arg_C], esi
.text:0040C984                 mov     esi, [esp+2Ch+var_C]
.text:0040C988                 mov     [esp+2Ch+arg_8], edi
.text:0040C98C                 mov     edi, [esp+2Ch+var_8]
.text:0040C990                 mov     [esp+2Ch+arg_4], ebp
.text:0040C994                 mov     ebp, [esp+2Ch+var_4]
.text:0040C998                 mov     [esp+2Ch+arg_0], edx
.text:0040C99C                 add     esp, 2Ch
.text:0040C99F                 jmp     loc_40CA50
.text:0040C9A4 ; ---------------------------------------------------------------------------
.text:0040C9A4
.text:0040C9A4 loc_40C9A4:                             ; CODE XREF: sub_40C940+32↑j
.text:0040C9A4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040C9A8                 mov     ecx, [esp+2Ch+var_14]
.text:0040C9AC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040C9B0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040C9B4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040C9B8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040C9BB                 call    GetDiskFreeSpaceA
.text:0040C9C0                 sub     esp, 14h
.text:0040C9C3                 mov     ebx, [esp+2Ch+var_10]
.text:0040C9C7                 mov     esi, [esp+2Ch+var_C]
.text:0040C9CB                 mov     edi, [esp+2Ch+var_8]
.text:0040C9CF                 mov     ebp, [esp+2Ch+var_4]
.text:0040C9D3                 add     esp, 2Ch
.text:0040C9D6                 retn
.text:0040C9D6 ; ---------------------------------------------------------------------------
.text:0040C9D7                 align 10h
.text:0040C9E0
.text:0040C9E0 loc_40C9E0:                             ; CODE XREF: .text:0040E37D↓p
.text:0040C9E0                 sub     esp, 1Ch
.text:0040C9E3                 mov     [esp+1Ch+var_4], esi
.text:0040C9E7                 mov     esi, [esp+1Ch+arg_0]
.text:0040C9EB                 mov     [esp+1Ch+var_8], ebx
.text:0040C9EF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040C9F2                 call    sub_40BEF0
.text:0040C9F7                 test    eax, eax
.text:0040C9F9                 mov     ebx, eax
.text:0040C9FB                 jz      short loc_40CA10
.text:0040C9FD                 cmp     byte ptr [eax], 0
.text:0040CA00                 jz      short loc_40CA10
.text:0040CA02                 test    esi, esi
.text:0040CA04                 jz      short loc_40CA10
.text:0040CA06                 cmp     byte ptr [esi], 0
.text:0040CA09                 jnz     short loc_40CA36
.text:0040CA0B                 nop
.text:0040CA0C                 lea     esi, [esi+0]
.text:0040CA10
.text:0040CA10 loc_40CA10:                             ; CODE XREF: sub_40C940+BB↑j
.text:0040CA10                                         ; sub_40C940+C0↑j ...
.text:0040CA10                 call    _errno
.text:0040CA15                 mov     dword ptr [eax], 2
.text:0040CA1B                 mov     esi, 0FFFFFFFFh
.text:0040CA20
.text:0040CA20 loc_40CA20:                             ; CODE XREF: sub_40C940+108↓j
.text:0040CA20                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040CA23                 call    free
.text:0040CA28                 mov     eax, esi
.text:0040CA2A                 mov     ebx, [esp+1Ch+var_8]
.text:0040CA2E                 mov     esi, [esp+1Ch+var_4]
.text:0040CA32                 add     esp, 1Ch
.text:0040CA35                 retn
.text:0040CA36 ; ---------------------------------------------------------------------------
.text:0040CA36
.text:0040CA36 loc_40CA36:                             ; CODE XREF: sub_40C940+C9↑j
.text:0040CA36                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040CA39                 mov     edx, [esp+1Ch+arg_4]
.text:0040CA3D                 mov     [esp+1Ch+var_18], edx
.text:0040CA41                 call    near ptr loc_40C39B+5
.text:0040CA46                 mov     esi, eax
.text:0040CA48                 jmp     short loc_40CA20
.text:0040CA48 ; ---------------------------------------------------------------------------
.text:0040CA4A                 align 10h
.text:0040CA50
.text:0040CA50 loc_40CA50:                             ; CODE XREF: sub_40C940+5F↑j
.text:0040CA50                 push    ebp
.text:0040CA51                 push    edi
.text:0040CA52                 push    esi
.text:0040CA53                 push    ebx
.text:0040CA54                 sub     esp, 8Ch
.text:0040CA5A                 mov     ebp, [esp+9Ch+arg_0]
.text:0040CA61                 call    sub_40E060
.text:0040CA66                 test    eax, eax
.text:0040CA68                 jz      short loc_40CA78
.text:0040CA6A                 call    sub_40DFB0
.text:0040CA6F                 cmp     eax, 0Bh
.text:0040CA72                 jle     loc_40CBA0
.text:0040CA78
.text:0040CA78 loc_40CA78:                             ; CODE XREF: sub_40C940+128↑j
.text:0040CA78                 cld
.text:0040CA79                 xor     eax, eax
.text:0040CA7B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040CA7F                 mov     ecx, 7
.text:0040CA84                 mov     edi, ebx
.text:0040CA86                 lea     esi, [esp+9Ch+var_4C]
.text:0040CA8A                 rep stosd
.text:0040CA8C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040CA94                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040CA9C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040CAA4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040CAAC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040CAB4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040CABC                 mov     [esp+9Ch+lpFileName], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040CAC3                 call    CreateFileA
.text:0040CAC8                 sub     esp, 1Ch
.text:0040CACB                 mov     edi, eax
.text:0040CACD                 cmp     eax, 0FFFFFFFFh
.text:0040CAD0                 jz      short loc_40CB45
.text:0040CAD2                 mov     [esp+9Ch+var_68], ebp
.text:0040CAD6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040CADA                 mov     [esp+9Ch+var_5C], esi
.text:0040CADE                 mov     [esp+9Ch+var_60], 7303h
.text:0040CAE6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040CAEE                 mov     [esp+9Ch+var_54], 1
.text:0040CAF6                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040CAFE                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040CB02                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040CB0A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040CB0E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040CB16                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040CB1A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040CB22                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040CB25                 call    DeviceIoControl
.text:0040CB2A                 sub     esp, 20h
.text:0040CB2D                 mov     esi, eax
.text:0040CB2F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040CB32                 call    CloseHandle
.text:0040CB37                 sub     esp, 4
.text:0040CB3A                 test    esi, esi
.text:0040CB3C                 jz      short loc_40CB45
.text:0040CB3E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040CB43                 jz      short loc_40CB60
.text:0040CB45
.text:0040CB45 loc_40CB45:                             ; CODE XREF: sub_40C940+190↑j
.text:0040CB45                                         ; sub_40C940+1FC↑j
.text:0040CB45                 call    sub_40D580
.text:0040CB4A                 mov     edi, eax
.text:0040CB4C                 call    _errno
.text:0040CB51                 mov     [eax], edi
.text:0040CB53                 xor     eax, eax
.text:0040CB55
.text:0040CB55 loc_40CB55:                             ; CODE XREF: sub_40C940+25A↓j
.text:0040CB55                                         ; sub_40C940+297↓j
.text:0040CB55                 add     esp, 8Ch
.text:0040CB5B                 pop     ebx
.text:0040CB5C                 pop     esi
.text:0040CB5D                 pop     edi
.text:0040CB5E                 pop     ebp
.text:0040CB5F                 retn
.text:0040CB60 ; ---------------------------------------------------------------------------
.text:0040CB60
.text:0040CB60 loc_40CB60:                             ; CODE XREF: sub_40C940+203↑j
.text:0040CB60                 mov     edx, [esp+9Ch+var_48]
.text:0040CB64                 mov     eax, 1
.text:0040CB69                 mov     ebx, [esp+9Ch+arg_4]
.text:0040CB70                 mov     ebp, [esp+9Ch+arg_8]
.text:0040CB77                 mov     ecx, [esp+9Ch+arg_C]
.text:0040CB7E                 mov     [ebx], edx
.text:0040CB80                 mov     edi, [esp+9Ch+var_44]
.text:0040CB84                 mov     ebx, [esp+9Ch+arg_10]
.text:0040CB8B                 mov     [ebp+0], edi
.text:0040CB8E                 mov     esi, [esp+9Ch+var_40]
.text:0040CB92                 mov     [ecx], esi
.text:0040CB94                 mov     edx, [esp+9Ch+var_3C]
.text:0040CB98                 mov     [ebx], edx
.text:0040CB9A                 jmp     short loc_40CB55
.text:0040CB9A ; ---------------------------------------------------------------------------
.text:0040CB9C                 align 10h
.text:0040CBA0
.text:0040CBA0 loc_40CBA0:                             ; CODE XREF: sub_40C940+132↑j
.text:0040CBA0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040CBA3                 mov     eax, [esp+9Ch+arg_C]
.text:0040CBAA                 mov     ecx, [esp+9Ch+arg_10]
.text:0040CBB1                 mov     edx, [esp+9Ch+arg_8]
.text:0040CBB8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040CBBC                 mov     eax, [esp+9Ch+arg_4]
.text:0040CBC3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040CBC7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040CBCB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040CBCF                 call    GetDiskFreeSpaceA
.text:0040CBD4                 sub     esp, 14h
.text:0040CBD7                 jmp     loc_40CB55
.text:0040CBD7 sub_40C940      endp ; sp-analysis failed
.text:0040CBD7
.text:0040CBD7 ; ---------------------------------------------------------------------------
.text:0040CBDC                 align 10h
.text:0040CBE0
.text:0040CBE0 ; =============== S U B R O U T I N E =======================================
.text:0040CBE0
.text:0040CBE0
.text:0040CBE0 ; int __cdecl sub_40CBE0(LPCSTR, char *, int)
.text:0040CBE0 sub_40CBE0      proc near               ; CODE XREF: sub_40C330+1A↑p
.text:0040CBE0                                         ; sub_410570+104↓p ...
.text:0040CBE0
.text:0040CBE0 var_13C         = dword ptr -13Ch
.text:0040CBE0 lpString1       = dword ptr -138h
.text:0040CBE0 var_134         = dword ptr -134h
.text:0040CBE0 String1         = byte ptr -12Ch
.text:0040CBE0 var_10          = dword ptr -10h
.text:0040CBE0 var_C           = dword ptr -0Ch
.text:0040CBE0 var_8           = dword ptr -8
.text:0040CBE0 var_4           = dword ptr -4
.text:0040CBE0 arg_0           = dword ptr  4
.text:0040CBE0 arg_4           = dword ptr  8
.text:0040CBE0 arg_8           = dword ptr  0Ch
.text:0040CBE0
.text:0040CBE0                 sub     esp, 13Ch
.text:0040CBE6                 mov     [esp+13Ch+var_10], ebx
.text:0040CBED                 mov     ebx, [esp+13Ch+arg_8]
.text:0040CBF4                 mov     [esp+13Ch+var_C], esi
.text:0040CBFB                 mov     esi, [esp+13Ch+arg_4]
.text:0040CC02                 mov     [esp+13Ch+var_8], edi
.text:0040CC09                 mov     edi, [esp+13Ch+arg_0]
.text:0040CC10                 mov     [esp+13Ch+var_4], ebp
.text:0040CC17                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040CC1B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040CC1F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040CC22                 call    sub_40B430
.text:0040CC27                 cmp     eax, 0FFFFFFFFh
.text:0040CC2A                 mov     edx, eax
.text:0040CC2C                 jz      short loc_40CC3E
.text:0040CC2E                 mov     ecx, [ebx]
.text:0040CC30                 and     ecx, 0F000h
.text:0040CC36                 cmp     ecx, 0A000h
.text:0040CC3C                 jz      short loc_40CC63
.text:0040CC3E
.text:0040CC3E loc_40CC3E:                             ; CODE XREF: sub_40CBE0+4C↑j
.text:0040CC3E                                         ; sub_40CBE0+A1↓j ...
.text:0040CC3E                 mov     ebx, [esp+13Ch+var_10]
.text:0040CC45                 mov     eax, edx
.text:0040CC47                 mov     esi, [esp+13Ch+var_C]
.text:0040CC4E                 mov     edi, [esp+13Ch+var_8]
.text:0040CC55                 mov     ebp, [esp+13Ch+var_4]
.text:0040CC5C                 add     esp, 13Ch
.text:0040CC62                 retn
.text:0040CC63 ; ---------------------------------------------------------------------------
.text:0040CC63
.text:0040CC63 loc_40CC63:                             ; CODE XREF: sub_40CBE0+5C↑j
.text:0040CC63                 mov     [esp+13Ch+var_134], 104h
.text:0040CC6B                 lea     ebp, [esp+13Ch+String1]
.text:0040CC6F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040CC73                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040CC76                 call    sub_40F1A0
.text:0040CC7B                 inc     eax
.text:0040CC7C                 mov     edx, 0FFFFFFFFh
.text:0040CC81                 jz      short loc_40CC3E
.text:0040CC83                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040CC87                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040CC8B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040CC8E                 call    sub_40B430
.text:0040CC93                 mov     edx, eax
.text:0040CC95                 jmp     short loc_40CC3E
.text:0040CC95 sub_40CBE0      endp
.text:0040CC95
.text:0040CC95 ; ---------------------------------------------------------------------------
.text:0040CC97                 align 10h
.text:0040CCA0
.text:0040CCA0 ; =============== S U B R O U T I N E =======================================
.text:0040CCA0
.text:0040CCA0
.text:0040CCA0 nullsub_2       proc near               ; CODE XREF: sub_401BF0+43B↑p
.text:0040CCA0                 retn
.text:0040CCA0 nullsub_2       endp
.text:0040CCA0
.text:0040CCA0 ; ---------------------------------------------------------------------------
.text:0040CCA1                 align 10h
.text:0040CCB0
.text:0040CCB0 ; =============== S U B R O U T I N E =======================================
.text:0040CCB0
.text:0040CCB0
.text:0040CCB0 sub_40CCB0      proc near               ; CODE XREF: sub_401BF0+429↑p
.text:0040CCB0                 xor     eax, eax
.text:0040CCB2                 retn
.text:0040CCB2 sub_40CCB0      endp
.text:0040CCB2
.text:0040CCB2 ; ---------------------------------------------------------------------------
.text:0040CCB3                 align 10h
.text:0040CCC0
.text:0040CCC0 ; =============== S U B R O U T I N E =======================================
.text:0040CCC0
.text:0040CCC0
.text:0040CCC0 sub_40CCC0      proc near               ; CODE XREF: sub_4026E0+464↑p
.text:0040CCC0
.text:0040CCC0 arg_0           = dword ptr  4
.text:0040CCC0
.text:0040CCC0                 sub     esp, 0Ch
.text:0040CCC3                 mov     edx, [esp+0Ch+arg_0]
.text:0040CCC7                 test    edx, edx
.text:0040CCC9                 jz      short loc_40CCD1
.text:0040CCCB                 xor     eax, eax
.text:0040CCCD
.text:0040CCCD loc_40CCCD:                             ; CODE XREF: sub_40CCC0+21↓j
.text:0040CCCD                 add     esp, 0Ch
.text:0040CCD0                 retn
.text:0040CCD1 ; ---------------------------------------------------------------------------
.text:0040CCD1
.text:0040CCD1 loc_40CCD1:                             ; CODE XREF: sub_40CCC0+9↑j
.text:0040CCD1                 call    _errno
.text:0040CCD6                 mov     dword ptr [eax], 16h
.text:0040CCDC                 mov     eax, 0FFFFFFFFh
.text:0040CCE1                 jmp     short loc_40CCCD
.text:0040CCE1 sub_40CCC0      endp
.text:0040CCE1
.text:0040CCE1 ; ---------------------------------------------------------------------------
.text:0040CCE3                 align 10h
.text:0040CCF0
.text:0040CCF0 ; =============== S U B R O U T I N E =======================================
.text:0040CCF0
.text:0040CCF0
.text:0040CCF0 sub_40CCF0      proc near               ; CODE XREF: sub_403080+FC↑p
.text:0040CCF0                                         ; sub_404C50+6A↑p
.text:0040CCF0
.text:0040CCF0 arg_0           = dword ptr  4
.text:0040CCF0
.text:0040CCF0                 sub     esp, 0Ch
.text:0040CCF3                 mov     edx, [esp+0Ch+arg_0]
.text:0040CCF7                 test    edx, edx
.text:0040CCF9                 js      short loc_40CD01
.text:0040CCFB                 xor     eax, eax
.text:0040CCFD
.text:0040CCFD loc_40CCFD:                             ; CODE XREF: sub_40CCF0+21↓j
.text:0040CCFD                 add     esp, 0Ch
.text:0040CD00                 retn
.text:0040CD01 ; ---------------------------------------------------------------------------
.text:0040CD01
.text:0040CD01 loc_40CD01:                             ; CODE XREF: sub_40CCF0+9↑j
.text:0040CD01                 call    _errno
.text:0040CD06                 mov     dword ptr [eax], 16h
.text:0040CD0C                 mov     eax, 0FFFFFFFFh
.text:0040CD11                 jmp     short loc_40CCFD
.text:0040CD11 sub_40CCF0      endp
.text:0040CD11
.text:0040CD11 ; ---------------------------------------------------------------------------
.text:0040CD13                 align 10h
.text:0040CD20
.text:0040CD20 ; =============== S U B R O U T I N E =======================================
.text:0040CD20
.text:0040CD20
.text:0040CD20 sub_40CD20      proc near               ; CODE XREF: sub_402F00+61↑p
.text:0040CD20                                         ; sub_402F00+71↑p ...
.text:0040CD20
.text:0040CD20 arg_0           = dword ptr  4
.text:0040CD20 arg_4           = dword ptr  8
.text:0040CD20
.text:0040CD20                 mov     ecx, [esp+arg_0]
.text:0040CD24                 mov     edx, [esp+arg_4]
.text:0040CD28                 nop
.text:0040CD29                 lea     esi, [esi+0]
.text:0040CD30
.text:0040CD30 loc_40CD30:                             ; CODE XREF: sub_40CD20+1C↓j
.text:0040CD30                 movzx   eax, byte ptr [edx]
.text:0040CD33                 mov     [ecx], al
.text:0040CD35                 inc     ecx
.text:0040CD36                 movzx   eax, byte ptr [edx]
.text:0040CD39                 inc     edx
.text:0040CD3A                 test    al, al
.text:0040CD3C                 jnz     short loc_40CD30
.text:0040CD3E                 lea     eax, [ecx-1]
.text:0040CD41                 retn
.text:0040CD41 sub_40CD20      endp
.text:0040CD41
.text:0040CD41 ; ---------------------------------------------------------------------------
.text:0040CD42                 align 10h
.text:0040CD50
.text:0040CD50 ; =============== S U B R O U T I N E =======================================
.text:0040CD50
.text:0040CD50
.text:0040CD50 sub_40CD50      proc near               ; CODE XREF: .text:0040243E↑p
.text:0040CD50
.text:0040CD50 var_1C          = dword ptr -1Ch
.text:0040CD50 var_18          = dword ptr -18h
.text:0040CD50 var_14          = dword ptr -14h
.text:0040CD50 var_10          = dword ptr -10h
.text:0040CD50 var_C           = dword ptr -0Ch
.text:0040CD50 var_4           = dword ptr -4
.text:0040CD50 arg_0           = dword ptr  4
.text:0040CD50
.text:0040CD50                 sub     esp, 1Ch
.text:0040CD53                 mov     ecx, [esp+1Ch+arg_0]
.text:0040CD57                 lea     edx, [esp+1Ch+var_4]
.text:0040CD5B                 mov     [esp+1Ch+var_C], edx ; int
.text:0040CD5F                 mov     [esp+1Ch+var_10], 400h ; int
.text:0040CD67                 mov     [esp+1Ch+var_1C], ecx ; int
.text:0040CD6A                 mov     [esp+1Ch+var_14], offset byte_415400 ; char *
.text:0040CD72                 mov     [esp+1Ch+var_18], offset unk_4153E0 ; int
.text:0040CD7A                 call    sub_40F280
.text:0040CD7F                 test    eax, eax
.text:0040CD81                 mov     ecx, [esp+1Ch+var_4]
.text:0040CD85                 setnz   dl
.text:0040CD88                 add     esp, 1Ch
.text:0040CD8B                 movzx   eax, dl
.text:0040CD8E                 dec     eax
.text:0040CD8F                 and     eax, ecx
.text:0040CD91                 retn
.text:0040CD91 sub_40CD50      endp
.text:0040CD91
.text:0040CD91 ; ---------------------------------------------------------------------------
.text:0040CD92                 align 10h
.text:0040CDA0
.text:0040CDA0 ; =============== S U B R O U T I N E =======================================
.text:0040CDA0
.text:0040CDA0
.text:0040CDA0 sub_40CDA0      proc near               ; CODE XREF: sub_4023E0+E↑p
.text:0040CDA0                 xor     eax, eax
.text:0040CDA2                 retn
.text:0040CDA2 sub_40CDA0      endp
.text:0040CDA2
.text:0040CDA2 ; ---------------------------------------------------------------------------
.text:0040CDA3                 align 10h
.text:0040CDB0
.text:0040CDB0 ; =============== S U B R O U T I N E =======================================
.text:0040CDB0
.text:0040CDB0
.text:0040CDB0 ; int __cdecl sub_40CDB0(void *, void *Src, size_t Size, int, int)
.text:0040CDB0 sub_40CDB0      proc near               ; CODE XREF: sub_40CDB0+72↓p
.text:0040CDB0                                         ; sub_40CDB0+96↓p ...
.text:0040CDB0
.text:0040CDB0 var_3C          = dword ptr -3Ch
.text:0040CDB0 var_38          = dword ptr -38h
.text:0040CDB0 var_34          = dword ptr -34h
.text:0040CDB0 var_30          = dword ptr -30h
.text:0040CDB0 var_2C          = dword ptr -2Ch
.text:0040CDB0 var_28          = dword ptr -28h
.text:0040CDB0 var_24          = dword ptr -24h
.text:0040CDB0 var_20          = dword ptr -20h
.text:0040CDB0 var_1C          = dword ptr -1Ch
.text:0040CDB0 var_18          = dword ptr -18h
.text:0040CDB0 var_14          = dword ptr -14h
.text:0040CDB0 arg_0           = dword ptr  4
.text:0040CDB0 Src             = dword ptr  8
.text:0040CDB0 Size            = dword ptr  0Ch
.text:0040CDB0 arg_C           = dword ptr  10h
.text:0040CDB0 arg_10          = dword ptr  14h
.text:0040CDB0
.text:0040CDB0                 push    ebp
.text:0040CDB1                 push    edi
.text:0040CDB2                 push    esi
.text:0040CDB3                 push    ebx
.text:0040CDB4                 sub     esp, 2Ch
.text:0040CDB7                 mov     edx, [esp+3Ch+arg_0]
.text:0040CDBB                 mov     ebx, [esp+3Ch+Src]
.text:0040CDBF                 mov     eax, [esp+3Ch+arg_C]
.text:0040CDC3                 mov     edi, [esp+3Ch+Size]
.text:0040CDC7                 mov     [esp+3Ch+var_14], edx
.text:0040CDCB                 cmp     ebx, 1
.text:0040CDCE                 mov     edx, [esp+3Ch+arg_10]
.text:0040CDD2                 mov     [esp+3Ch+var_18], eax
.text:0040CDD6                 mov     [esp+3Ch+var_1C], edx
.text:0040CDDA                 ja      short loc_40CDE4
.text:0040CDDC                 add     esp, 2Ch
.text:0040CDDF                 pop     ebx
.text:0040CDE0                 pop     esi
.text:0040CDE1                 pop     edi
.text:0040CDE2                 pop     ebp
.text:0040CDE3                 retn
.text:0040CDE4 ; ---------------------------------------------------------------------------
.text:0040CDE4
.text:0040CDE4 loc_40CDE4:                             ; CODE XREF: sub_40CDB0+2A↑j
.text:0040CDE4                 mov     [esp+3Ch+var_34], edi ; Size
.text:0040CDE8                 mov     esi, ebx
.text:0040CDEA                 mov     ebp, [esp+3Ch+var_14]
.text:0040CDEE                 shr     esi, 1
.text:0040CDF0                 mov     eax, ebx
.text:0040CDF2                 mov     ecx, [esp+3Ch+var_1C]
.text:0040CDF6                 mov     [esp+3Ch+var_38], esi ; Src
.text:0040CDFA                 mov     edx, esi
.text:0040CDFC                 sub     eax, esi
.text:0040CDFE                 mov     [esp+3Ch+var_24], ebp
.text:0040CE02                 imul    edx, edi
.text:0040CE05                 mov     ebp, [esp+3Ch+var_14]
.text:0040CE09                 mov     [esp+3Ch+var_28], eax
.text:0040CE0D                 mov     eax, [esp+3Ch+var_14]
.text:0040CE11                 add     ebp, edx
.text:0040CE13                 mov     [esp+3Ch+var_2C], ecx ; int
.text:0040CE17                 mov     edx, [esp+3Ch+var_18]
.text:0040CE1B                 mov     [esp+3Ch+var_3C], eax ; void *
.text:0040CE1E                 mov     [esp+3Ch+var_30], edx ; int
.text:0040CE22                 call    sub_40CDB0
.text:0040CE27                 mov     [esp+3Ch+var_34], edi ; Size
.text:0040CE2B                 mov     ecx, [esp+3Ch+var_1C]
.text:0040CE2F                 mov     eax, [esp+3Ch+var_18]
.text:0040CE33                 mov     [esp+3Ch+var_3C], ebp ; void *
.text:0040CE36                 mov     edx, [esp+3Ch+var_28]
.text:0040CE3A                 mov     [esp+3Ch+var_2C], ecx ; int
.text:0040CE3E                 mov     [esp+3Ch+var_30], eax ; int
.text:0040CE42                 mov     [esp+3Ch+var_38], edx ; Src
.text:0040CE46                 call    sub_40CDB0
.text:0040CE4B                 mov     ecx, [esp+3Ch+var_1C]
.text:0040CE4F                 cmp     edi, 4
.text:0040CE52                 mov     [esp+3Ch+var_20], ecx
.text:0040CE56                 jz      loc_40CF22
.text:0040CE5C
.text:0040CE5C loc_40CE5C:                             ; CODE XREF: sub_40CDB0+177↓j
.text:0040CE5C                 test    esi, esi
.text:0040CE5E                 jnz     short loc_40CE90
.text:0040CE60
.text:0040CE60 loc_40CE60:                             ; CODE XREF: sub_40CDB0+EA↓j
.text:0040CE60                                         ; sub_40CDB0+107↓j ...
.text:0040CE60                 mov     edx, [esp+3Ch+var_28]
.text:0040CE64                 sub     ebx, edx
.text:0040CE66                 imul    ebx, edi
.text:0040CE69                 mov     edi, [esp+3Ch+var_1C]
.text:0040CE6D                 mov     [esp+3Ch+Size], ebx ; Size
.text:0040CE71                 mov     ebx, [esp+3Ch+var_14]
.text:0040CE75                 mov     [esp+3Ch+Src], edi ; Src
.text:0040CE79                 mov     [esp+3Ch+arg_0], ebx ; void *
.text:0040CE7D                 add     esp, 2Ch
.text:0040CE80                 pop     ebx
.text:0040CE81                 pop     esi
.text:0040CE82                 pop     edi
.text:0040CE83                 pop     ebp
.text:0040CE84                 jmp     memcpy
.text:0040CE84 ; ---------------------------------------------------------------------------
.text:0040CE89                 align 10h
.text:0040CE90
.text:0040CE90 loc_40CE90:                             ; CODE XREF: sub_40CDB0+AE↑j
.text:0040CE90                 mov     eax, [esp+3Ch+var_28]
.text:0040CE94                 test    eax, eax
.text:0040CE96                 jnz     short loc_40CEC0
.text:0040CE98
.text:0040CE98 loc_40CE98:                             ; CODE XREF: sub_40CDB0+151↓j
.text:0040CE98                                         ; sub_40CDB0+18B↓j ...
.text:0040CE98                 test    esi, esi
.text:0040CE9A                 jz      short loc_40CE60
.text:0040CE9C                 imul    esi, edi
.text:0040CE9F                 mov     ebp, [esp+3Ch+var_24]
.text:0040CEA3                 mov     [esp+3Ch+var_38], ebp ; Src
.text:0040CEA7                 mov     [esp+3Ch+var_34], esi ; Size
.text:0040CEAB                 mov     esi, [esp+3Ch+var_20]
.text:0040CEAF                 mov     [esp+3Ch+var_3C], esi ; void *
.text:0040CEB2                 call    memcpy
.text:0040CEB7                 jmp     short loc_40CE60
.text:0040CEB7 ; ---------------------------------------------------------------------------
.text:0040CEB9                 align 10h
.text:0040CEC0
.text:0040CEC0 loc_40CEC0:                             ; CODE XREF: sub_40CDB0+E6↑j
.text:0040CEC0                                         ; sub_40CDB0+14F↓j
.text:0040CEC0                 mov     [esp+3Ch+var_38], ebp
.text:0040CEC4                 mov     ecx, [esp+3Ch+var_24]
.text:0040CEC8                 mov     [esp+3Ch+var_3C], ecx
.text:0040CECB                 call    [esp+3Ch+var_18]
.text:0040CECF                 test    eax, eax
.text:0040CED1                 jle     short loc_40CF03
.text:0040CED3                 mov     [esp+3Ch+var_38], ebp
.text:0040CED7                 mov     ecx, [esp+3Ch+var_20]
.text:0040CEDB                 add     ebp, edi
.text:0040CEDD                 mov     [esp+3Ch+var_34], edi
.text:0040CEE1                 mov     [esp+3Ch+var_3C], ecx
.text:0040CEE4                 call    sub_40FA20
.text:0040CEE9                 dec     [esp+3Ch+var_28]
.text:0040CEED
.text:0040CEED loc_40CEED:                             ; CODE XREF: sub_40CDB0+170↓j
.text:0040CEED                 mov     [esp+3Ch+var_20], eax
.text:0040CEF1                 test    esi, esi
.text:0040CEF3                 jz      loc_40CE60
.text:0040CEF9                 mov     eax, [esp+3Ch+var_28]
.text:0040CEFD                 test    eax, eax
.text:0040CEFF                 jnz     short loc_40CEC0
.text:0040CF01                 jmp     short loc_40CE98
.text:0040CF03 ; ---------------------------------------------------------------------------
.text:0040CF03
.text:0040CF03 loc_40CF03:                             ; CODE XREF: sub_40CDB0+121↑j
.text:0040CF03                 mov     [esp+3Ch+var_34], edi
.text:0040CF07                 mov     eax, [esp+3Ch+var_24]
.text:0040CF0B                 dec     esi
.text:0040CF0C                 mov     edx, [esp+3Ch+var_20]
.text:0040CF10                 mov     [esp+3Ch+var_38], eax
.text:0040CF14                 mov     [esp+3Ch+var_3C], edx
.text:0040CF17                 call    sub_40FA20
.text:0040CF1C                 add     [esp+3Ch+var_24], edi
.text:0040CF20                 jmp     short loc_40CEED
.text:0040CF22 ; ---------------------------------------------------------------------------
.text:0040CF22
.text:0040CF22 loc_40CF22:                             ; CODE XREF: sub_40CDB0+A6↑j
.text:0040CF22                 test    byte ptr [esp+3Ch+var_14], 3
.text:0040CF27                 jnz     loc_40CE5C
.text:0040CF2D                 test    esi, esi
.text:0040CF2F                 jz      loc_40CE60
.text:0040CF35                 mov     ecx, [esp+3Ch+var_28]
.text:0040CF39                 test    ecx, ecx
.text:0040CF3B                 jz      loc_40CE98
.text:0040CF41
.text:0040CF41 loc_40CF41:                             ; CODE XREF: sub_40CDB0+1C9↓j
.text:0040CF41                 mov     [esp+3Ch+var_38], ebp
.text:0040CF45                 mov     edx, [esp+3Ch+var_24]
.text:0040CF49                 mov     [esp+3Ch+var_3C], edx
.text:0040CF4C                 call    [esp+3Ch+var_18]
.text:0040CF50                 test    eax, eax
.text:0040CF52                 jle     short loc_40CF80
.text:0040CF54                 dec     [esp+3Ch+var_28]
.text:0040CF58                 mov     ecx, [ebp+0]
.text:0040CF5B                 add     ebp, 4
.text:0040CF5E                 mov     edx, [esp+3Ch+var_20]
.text:0040CF62
.text:0040CF62 loc_40CF62:                             ; CODE XREF: sub_40CDB0+1E0↓j
.text:0040CF62                 mov     [edx], ecx
.text:0040CF64                 add     edx, 4
.text:0040CF67                 test    esi, esi
.text:0040CF69                 mov     [esp+3Ch+var_20], edx
.text:0040CF6D                 jz      loc_40CE60
.text:0040CF73                 mov     edx, [esp+3Ch+var_28]
.text:0040CF77                 test    edx, edx
.text:0040CF79                 jnz     short loc_40CF41
.text:0040CF7B                 jmp     loc_40CE98
.text:0040CF80 ; ---------------------------------------------------------------------------
.text:0040CF80
.text:0040CF80 loc_40CF80:                             ; CODE XREF: sub_40CDB0+1A2↑j
.text:0040CF80                 mov     eax, [esp+3Ch+var_24]
.text:0040CF84                 dec     esi
.text:0040CF85                 mov     edx, [esp+3Ch+var_20]
.text:0040CF89                 add     [esp+3Ch+var_24], 4
.text:0040CF8E                 mov     ecx, [eax]
.text:0040CF90                 jmp     short loc_40CF62
.text:0040CF90 sub_40CDB0      endp
.text:0040CF90
.text:0040CF90 ; ---------------------------------------------------------------------------
.text:0040CF92                 align 10h
.text:0040CFA0
.text:0040CFA0 ; =============== S U B R O U T I N E =======================================
.text:0040CFA0
.text:0040CFA0
.text:0040CFA0 ; int __cdecl sub_40CFA0(void *Block, void *, size_t, int)
.text:0040CFA0 sub_40CFA0      proc near               ; CODE XREF: sub_404590+82↑p
.text:0040CFA0
.text:0040CFA0 Size            = dword ptr -2Ch
.text:0040CFA0 Src             = dword ptr -28h
.text:0040CFA0 var_24          = dword ptr -24h
.text:0040CFA0 var_20          = dword ptr -20h
.text:0040CFA0 var_1C          = dword ptr -1Ch
.text:0040CFA0 var_18          = dword ptr -18h
.text:0040CFA0 var_14          = dword ptr -14h
.text:0040CFA0 var_10          = dword ptr -10h
.text:0040CFA0 var_C           = dword ptr -0Ch
.text:0040CFA0 var_8           = dword ptr -8
.text:0040CFA0 var_4           = dword ptr -4
.text:0040CFA0 Block           = dword ptr  4
.text:0040CFA0 arg_4           = dword ptr  8
.text:0040CFA0 arg_8           = dword ptr  0Ch
.text:0040CFA0 arg_C           = dword ptr  10h
.text:0040CFA0
.text:0040CFA0                 sub     esp, 2Ch
.text:0040CFA3                 mov     edx, [esp+2Ch+Block]
.text:0040CFA7                 mov     [esp+2Ch+var_8], edi
.text:0040CFAB                 mov     edi, [esp+2Ch+arg_4]
.text:0040CFAF                 mov     [esp+2Ch+var_C], esi
.text:0040CFB3                 mov     esi, [esp+2Ch+arg_8]
.text:0040CFB7                 mov     [esp+2Ch+var_10], ebx
.text:0040CFBB                 mov     ebx, edi
.text:0040CFBD                 imul    ebx, esi
.text:0040CFC0                 mov     [esp+2Ch+var_4], ebp
.text:0040CFC4                 mov     ebp, [esp+2Ch+arg_C]
.text:0040CFC8                 mov     [esp+2Ch+var_14], edx
.text:0040CFCC                 cmp     ebx, 3FFh
.text:0040CFD2                 jbe     loc_40D0E5
.text:0040CFD8                 mov     ecx, ds:dword_415800
.text:0040CFDE                 test    ecx, ecx
.text:0040CFE0                 jz      loc_40D090
.text:0040CFE6
.text:0040CFE6 loc_40CFE6:                             ; CODE XREF: sub_40CFA0+12E↓j
.text:0040CFE6                 xor     edx, edx
.text:0040CFE8                 mov     eax, ebx
.text:0040CFEA                 div     ds:dword_415810
.text:0040CFF0                 cmp     eax, ecx
.text:0040CFF2                 jbe     short loc_40D020
.text:0040CFF4
.text:0040CFF4 loc_40CFF4:                             ; CODE XREF: sub_40CFA0+E7↓j
.text:0040CFF4                 mov     [esp+2Ch+arg_8], esi
.text:0040CFF8                 mov     ebx, [esp+2Ch+var_10]
.text:0040CFFC                 mov     esi, [esp+2Ch+var_14]
.text:0040D000                 mov     [esp+2Ch+arg_C], ebp
.text:0040D004                 mov     ebp, [esp+2Ch+var_4]
.text:0040D008                 mov     [esp+2Ch+arg_4], edi
.text:0040D00C                 mov     edi, [esp+2Ch+var_8]
.text:0040D010                 mov     [esp+2Ch+Block], esi
.text:0040D014                 mov     esi, [esp+2Ch+var_C]
.text:0040D018                 add     esp, 2Ch
.text:0040D01B                 jmp     __quicksort
.text:0040D020 ; ---------------------------------------------------------------------------
.text:0040D020
.text:0040D020 loc_40D020:                             ; CODE XREF: sub_40CFA0+52↑j
.text:0040D020                 call    _errno
.text:0040D025                 mov     edx, [eax]
.text:0040D027                 mov     [esp+2Ch+Size], ebx ; Size
.text:0040D02A                 mov     [esp+2Ch+var_18], edx
.text:0040D02E                 call    malloc
.text:0040D033                 test    eax, eax
.text:0040D035                 mov     ebx, eax
.text:0040D037                 jz      short loc_40D07C
.text:0040D039                 call    _errno
.text:0040D03E                 mov     ecx, [esp+2Ch+var_18]
.text:0040D042                 mov     [eax], ecx
.text:0040D044                 mov     [esp+2Ch+Src], edi ; Src
.text:0040D048                 mov     edi, [esp+2Ch+var_14]
.text:0040D04C                 mov     [esp+2Ch+var_1C], ebx ; int
.text:0040D050                 mov     [esp+2Ch+var_20], ebp ; int
.text:0040D054                 mov     [esp+2Ch+var_24], esi ; Size
.text:0040D058                 mov     [esp+2Ch+Size], edi ; void *
.text:0040D05B                 call    sub_40CDB0
.text:0040D060                 mov     [esp+2Ch+Block], ebx ; Block
.text:0040D064                 mov     esi, [esp+2Ch+var_C]
.text:0040D068                 mov     ebx, [esp+2Ch+var_10]
.text:0040D06C                 mov     edi, [esp+2Ch+var_8]
.text:0040D070                 mov     ebp, [esp+2Ch+var_4]
.text:0040D074                 add     esp, 2Ch
.text:0040D077                 jmp     free
.text:0040D07C ; ---------------------------------------------------------------------------
.text:0040D07C
.text:0040D07C loc_40D07C:                             ; CODE XREF: sub_40CFA0+97↑j
.text:0040D07C                 call    _errno
.text:0040D081                 mov     ebx, [esp+2Ch+var_18]
.text:0040D085                 mov     [eax], ebx
.text:0040D087                 jmp     loc_40CFF4
.text:0040D087 ; ---------------------------------------------------------------------------
.text:0040D08C                 align 10h
.text:0040D090
.text:0040D090 loc_40D090:                             ; CODE XREF: sub_40CFA0+40↑j
.text:0040D090                 mov     [esp+2Ch+Size], 55h ; 'U'
.text:0040D097                 call    _sysconf
.text:0040D09C                 mov     ds:dword_415800, eax
.text:0040D0A1                 mov     edx, eax
.text:0040D0A3                 inc     edx
.text:0040D0A4                 jz      short loc_40D0D8
.text:0040D0A6
.text:0040D0A6 loc_40D0A6:                             ; CODE XREF: sub_40CFA0+143↓j
.text:0040D0A6                 mov     eax, ds:dword_415800
.text:0040D0AB                 test    eax, eax
.text:0040D0AD                 js      short loc_40D0D3
.text:0040D0AF
.text:0040D0AF loc_40D0AF:                             ; CODE XREF: sub_40CFA0+136↓j
.text:0040D0AF                 mov     [esp+2Ch+Size], 1Eh
.text:0040D0B6                 sar     eax, 2
.text:0040D0B9                 mov     ds:dword_415800, eax
.text:0040D0BE                 call    _sysconf
.text:0040D0C3                 mov     ds:dword_415810, eax
.text:0040D0C8                 mov     ecx, ds:dword_415800
.text:0040D0CE                 jmp     loc_40CFE6
.text:0040D0D3 ; ---------------------------------------------------------------------------
.text:0040D0D3
.text:0040D0D3 loc_40D0D3:                             ; CODE XREF: sub_40CFA0+10D↑j
.text:0040D0D3                 add     eax, 3
.text:0040D0D6                 jmp     short loc_40D0AF
.text:0040D0D8 ; ---------------------------------------------------------------------------
.text:0040D0D8
.text:0040D0D8 loc_40D0D8:                             ; CODE XREF: sub_40CFA0+104↑j
.text:0040D0D8                 mov     ecx, 7FFFFFFFh
.text:0040D0DD                 mov     ds:dword_415800, ecx
.text:0040D0E3                 jmp     short loc_40D0A6
.text:0040D0E5 ; ---------------------------------------------------------------------------
.text:0040D0E5
.text:0040D0E5 loc_40D0E5:                             ; CODE XREF: sub_40CFA0+32↑j
.text:0040D0E5                 mov     [esp+2Ch+Size], ebx ; Size
.text:0040D0E8                 call    malloc
.text:0040D0ED                 mov     [esp+2Ch+var_1C], eax ; int
.text:0040D0F1                 mov     eax, [esp+2Ch+var_14]
.text:0040D0F5                 mov     [esp+2Ch+var_20], ebp ; int
.text:0040D0F9                 mov     [esp+2Ch+var_24], esi ; Size
.text:0040D0FD                 mov     [esp+2Ch+Src], edi ; Src
.text:0040D101                 mov     [esp+2Ch+Size], eax ; void *
.text:0040D104                 call    sub_40CDB0
.text:0040D109                 mov     ebx, [esp+2Ch+var_10]
.text:0040D10D                 mov     esi, [esp+2Ch+var_C]
.text:0040D111                 mov     edi, [esp+2Ch+var_8]
.text:0040D115                 mov     ebp, [esp+2Ch+var_4]
.text:0040D119                 add     esp, 2Ch
.text:0040D11C                 retn
.text:0040D11C sub_40CFA0      endp
.text:0040D11C
.text:0040D11C ; ---------------------------------------------------------------------------
.text:0040D11D                 align 10h
.text:0040D120
.text:0040D120 ; =============== S U B R O U T I N E =======================================
.text:0040D120
.text:0040D120
.text:0040D120 ; int __cdecl sub_40D120(void *)
.text:0040D120 sub_40D120      proc near               ; CODE XREF: sub_403DE0+3BC↑p
.text:0040D120                                         ; sub_403DE0+40D↑p ...
.text:0040D120
.text:0040D120 Block           = dword ptr -0Ch
.text:0040D120 var_4           = dword ptr -4
.text:0040D120 arg_0           = dword ptr  4
.text:0040D120
.text:0040D120                 sub     esp, 0Ch
.text:0040D123                 mov     [esp+0Ch+var_4], ebx
.text:0040D127                 mov     ebx, [esp+0Ch+arg_0]
.text:0040D12B                 test    ebx, ebx
.text:0040D12D                 jz      short loc_40D16B
.text:0040D12F                 cmp     dword ptr [ebx], 0FFFFFFFFh
.text:0040D132                 jz      short loc_40D159
.text:0040D134                 mov     [esp+0Ch+Block], ebx
.text:0040D137                 call    sub_40FAC0
.text:0040D13C                 mov     edx, [ebx+4]
.text:0040D13F                 mov     [esp+0Ch+Block], edx ; Block
.text:0040D142                 call    free
.text:0040D147                 mov     [esp+0Ch+Block], ebx ; Block
.text:0040D14A                 call    free
.text:0040D14F                 xor     eax, eax
.text:0040D151
.text:0040D151 loc_40D151:                             ; CODE XREF: sub_40D120+49↓j
.text:0040D151                 mov     ebx, [esp+0Ch+var_4]
.text:0040D155                 add     esp, 0Ch
.text:0040D158                 retn
.text:0040D159 ; ---------------------------------------------------------------------------
.text:0040D159
.text:0040D159 loc_40D159:                             ; CODE XREF: sub_40D120+12↑j
.text:0040D159                 call    _errno
.text:0040D15E                 mov     dword ptr [eax], 9
.text:0040D164
.text:0040D164 loc_40D164:                             ; CODE XREF: sub_40D120+56↓j
.text:0040D164                 mov     eax, 0FFFFFFFFh
.text:0040D169                 jmp     short loc_40D151
.text:0040D16B ; ---------------------------------------------------------------------------
.text:0040D16B
.text:0040D16B loc_40D16B:                             ; CODE XREF: sub_40D120+D↑j
.text:0040D16B                 call    _errno
.text:0040D170                 mov     dword ptr [eax], 16h
.text:0040D176                 jmp     short loc_40D164
.text:0040D176 sub_40D120      endp
.text:0040D176
.text:0040D176 ; ---------------------------------------------------------------------------
.text:0040D178                 align 10h
.text:0040D180 ; const char asc_40D180[2]
.text:0040D180 asc_40D180      db '\',0                ; DATA XREF: sub_40D190+D2↓o
.text:0040D182                 align 10h
.text:0040D190
.text:0040D190 ; =============== S U B R O U T I N E =======================================
.text:0040D190
.text:0040D190
.text:0040D190 ; int __cdecl sub_40D190(LPCSTR)
.text:0040D190 sub_40D190      proc near               ; CODE XREF: sub_403DE0+18↑p
.text:0040D190
.text:0040D190 lpFileName      = dword ptr -13Ch
.text:0040D190 Source          = dword ptr -138h
.text:0040D190 Destination     = byte ptr -12Ch
.text:0040D190 var_10          = dword ptr -10h
.text:0040D190 var_C           = dword ptr -0Ch
.text:0040D190 var_8           = dword ptr -8
.text:0040D190 var_4           = dword ptr -4
.text:0040D190 arg_0           = dword ptr  4
.text:0040D190
.text:0040D190                 sub     esp, 13Ch
.text:0040D196                 mov     [esp+13Ch+var_C], esi
.text:0040D19D                 mov     esi, [esp+13Ch+arg_0]
.text:0040D1A4                 mov     [esp+13Ch+var_10], ebx
.text:0040D1AB                 mov     [esp+13Ch+var_8], edi
.text:0040D1B2                 test    esi, esi
.text:0040D1B4                 mov     [esp+13Ch+var_4], ebp
.text:0040D1BB                 jz      short loc_40D1C2
.text:0040D1BD                 cmp     byte ptr [esi], 0
.text:0040D1C0                 jnz     short loc_40D1F2
.text:0040D1C2
.text:0040D1C2 loc_40D1C2:                             ; CODE XREF: sub_40D190+2B↑j
.text:0040D1C2                 call    _errno
.text:0040D1C7                 mov     dword ptr [eax], 2
.text:0040D1CD
.text:0040D1CD loc_40D1CD:                             ; CODE XREF: sub_40D190+139↓j
.text:0040D1CD                                         ; sub_40D190+14C↓j
.text:0040D1CD                 xor     eax, eax
.text:0040D1CF
.text:0040D1CF loc_40D1CF:                             ; CODE XREF: sub_40D190+90↓j
.text:0040D1CF                                         ; sub_40D190+A4↓j ...
.text:0040D1CF                 mov     ebx, [esp+13Ch+var_10]
.text:0040D1D6                 mov     esi, [esp+13Ch+var_C]
.text:0040D1DD                 mov     edi, [esp+13Ch+var_8]
.text:0040D1E4                 mov     ebp, [esp+13Ch+var_4]
.text:0040D1EB                 add     esp, 13Ch
.text:0040D1F1                 retn
.text:0040D1F2 ; ---------------------------------------------------------------------------
.text:0040D1F2
.text:0040D1F2 loc_40D1F2:                             ; CODE XREF: sub_40D190+30↑j
.text:0040D1F2                 mov     [esp+13Ch+lpFileName], esi ; lpFileName
.text:0040D1F5                 call    GetFileAttributesA
.text:0040D1FA                 sub     esp, 4
.text:0040D1FD                 cmp     eax, 0FFFFFFFFh
.text:0040D200                 jz      loc_40D2CE
.text:0040D206                 test    al, 10h
.text:0040D208                 jz      loc_40D2BE
.text:0040D20E                 mov     [esp+13Ch+lpFileName], 18h ; Size
.text:0040D215                 call    malloc
.text:0040D21A                 mov     ebx, eax
.text:0040D21C                 xor     eax, eax
.text:0040D21E                 test    ebx, ebx
.text:0040D220                 jz      short loc_40D1CF
.text:0040D222                 mov     [esp+13Ch+lpFileName], 118h ; Size
.text:0040D229                 call    malloc
.text:0040D22E                 mov     edi, eax
.text:0040D230                 xor     eax, eax
.text:0040D232                 test    edi, edi
.text:0040D234                 jz      short loc_40D1CF
.text:0040D236                 mov     [esp+13Ch+Source], esi ; Source
.text:0040D23A                 lea     ebp, [esp+13Ch+Destination]
.text:0040D23E                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0040D241                 call    strcpy
.text:0040D246                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:0040D249                 call    strlen
.text:0040D24E                 cmp     byte ptr [eax+esi], 2Fh ; '/'
.text:0040D252                 jz      short loc_40D280
.text:0040D254                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:0040D257                 call    strlen
.text:0040D25C                 cmp     byte ptr [eax+esi], 5Ch ; '\'
.text:0040D260                 jz      short loc_40D280
.text:0040D262                 mov     [esp+13Ch+Source], offset asc_40D180 ; "\\"
.text:0040D26A                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0040D26D                 call    strcat
.text:0040D272                 lea     esi, [esi+0]
.text:0040D279                 lea     edi, [edi+0]
.text:0040D280
.text:0040D280 loc_40D280:                             ; CODE XREF: sub_40D190+C2↑j
.text:0040D280                                         ; sub_40D190+D0↑j
.text:0040D280                 mov     [esp+13Ch+lpFileName], esi ; LPCSTR
.text:0040D283                 call    sub_40D5D0
.text:0040D288                 mov     [esp+13Ch+lpFileName], eax
.text:0040D28B                 call    sub_40B8D0
.text:0040D290                 mov     [edi], eax
.text:0040D292                 mov     eax, ebx
.text:0040D294                 mov     [ebx+4], edi
.text:0040D297                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:0040D29D                 mov     dword ptr [ebx+8], 118h
.text:0040D2A4                 mov     dword ptr [ebx+0Ch], 118h
.text:0040D2AB                 mov     dword ptr [ebx+10h], 8
.text:0040D2B2                 mov     dword ptr [ebx+14h], 1
.text:0040D2B9                 jmp     loc_40D1CF
.text:0040D2BE ; ---------------------------------------------------------------------------
.text:0040D2BE
.text:0040D2BE loc_40D2BE:                             ; CODE XREF: sub_40D190+78↑j
.text:0040D2BE                 call    _errno
.text:0040D2C3                 mov     dword ptr [eax], 14h
.text:0040D2C9                 jmp     loc_40D1CD
.text:0040D2CE ; ---------------------------------------------------------------------------
.text:0040D2CE
.text:0040D2CE loc_40D2CE:                             ; CODE XREF: sub_40D190+70↑j
.text:0040D2CE                 call    sub_40D580
.text:0040D2D3                 mov     esi, eax
.text:0040D2D5                 call    _errno
.text:0040D2DA                 mov     [eax], esi
.text:0040D2DC                 jmp     loc_40D1CD
.text:0040D2DC sub_40D190      endp
.text:0040D2DC
.text:0040D2DC ; ---------------------------------------------------------------------------
.text:0040D2E1                 align 10h
.text:0040D2F0
.text:0040D2F0 ; =============== S U B R O U T I N E =======================================
.text:0040D2F0
.text:0040D2F0 ; Attributes: info_from_lumina
.text:0040D2F0
.text:0040D2F0 ___get_errno    proc near               ; CODE XREF: sub_40D580+B↓p
.text:0040D2F0
.text:0040D2F0 arg_0           = dword ptr  4
.text:0040D2F0
.text:0040D2F0                 mov     eax, [esp+arg_0]
.text:0040D2F4                 cmp     eax, 53h ; 'S'
.text:0040D2F7                 jg      loc_40D3F0
.text:0040D2FD                 cmp     eax, 52h ; 'R'
.text:0040D300                 jge     short loc_40D352
.text:0040D302                 cmp     eax, 0Fh
.text:0040D305                 jz      short loc_40D320
.text:0040D307                 cmp     eax, 0Fh
.text:0040D30A                 jg      short loc_40D380
.text:0040D30C                 cmp     eax, 9
.text:0040D30F                 jg      short loc_40D360
.text:0040D311                 cmp     eax, 7
.text:0040D314                 jge     short loc_40D359
.text:0040D316                 cmp     eax, 3
.text:0040D319                 jg      short loc_40D33A
.text:0040D31B                 cmp     eax, 2
.text:0040D31E                 jl      short loc_40D333
.text:0040D320
.text:0040D320 loc_40D320:                             ; CODE XREF: ___get_errno+15↑j
.text:0040D320                                         ; ___get_errno+9D↓j ...
.text:0040D320                 mov     edx, 2
.text:0040D325                 lea     esi, [esi+0]
.text:0040D329                 lea     edi, [edi+0]
.text:0040D330
.text:0040D330 loc_40D330:                             ; CODE XREF: ___get_errno+48↓j
.text:0040D330                                         ; ___get_errno+59↓j ...
.text:0040D330                 mov     eax, edx
.text:0040D332                 retn
.text:0040D333 ; ---------------------------------------------------------------------------
.text:0040D333
.text:0040D333 loc_40D333:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040D333                                         ; ___get_errno+78↓j ...
.text:0040D333                 mov     edx, 16h
.text:0040D338                 jmp     short loc_40D330
.text:0040D33A ; ---------------------------------------------------------------------------
.text:0040D33A
.text:0040D33A loc_40D33A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040D33A                 cmp     eax, 5
.text:0040D33D                 jz      short loc_40D352
.text:0040D33F                 cmp     eax, 5
.text:0040D342                 jg      short loc_40D34B
.text:0040D344                 mov     edx, 18h
.text:0040D349                 jmp     short loc_40D330
.text:0040D34B ; ---------------------------------------------------------------------------
.text:0040D34B
.text:0040D34B loc_40D34B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040D34B                                         ; ___get_errno+180↓j
.text:0040D34B                 mov     edx, 9
.text:0040D350                 jmp     short loc_40D330
.text:0040D352 ; ---------------------------------------------------------------------------
.text:0040D352
.text:0040D352 loc_40D352:                             ; CODE XREF: ___get_errno+10↑j
.text:0040D352                                         ; ___get_errno+4D↑j ...
.text:0040D352                 mov     edx, 0Dh
.text:0040D357                 jmp     short loc_40D330
.text:0040D359 ; ---------------------------------------------------------------------------
.text:0040D359
.text:0040D359 loc_40D359:                             ; CODE XREF: ___get_errno+24↑j
.text:0040D359                                         ; ___get_errno+73↓j ...
.text:0040D359                 mov     edx, 0Ch
.text:0040D35E                 jmp     short loc_40D330
.text:0040D360 ; ---------------------------------------------------------------------------
.text:0040D360
.text:0040D360 loc_40D360:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040D360                 cmp     eax, 0Dh
.text:0040D363                 jg      short loc_40D359
.text:0040D365                 cmp     eax, 0Ch
.text:0040D368                 jge     short loc_40D333
.text:0040D36A                 cmp     eax, 0Ah
.text:0040D36D                 mov     edx, 7
.text:0040D372                 jz      short loc_40D330
.text:0040D374                 cmp     eax, 0Bh
.text:0040D377                 jnz     short loc_40D333
.text:0040D379
.text:0040D379 loc_40D379:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040D379                 mov     edx, 8
.text:0040D37E                 jmp     short loc_40D330
.text:0040D380 ; ---------------------------------------------------------------------------
.text:0040D380
.text:0040D380 loc_40D380:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040D380                 cmp     eax, 22h ; '"'
.text:0040D383                 jg      short loc_40D3B4
.text:0040D385                 cmp     eax, 16h
.text:0040D388                 jge     short loc_40D352
.text:0040D38A                 cmp     eax, 12h
.text:0040D38D                 jz      short loc_40D320
.text:0040D38F                 cmp     eax, 12h
.text:0040D392                 jg      short loc_40D3A5
.text:0040D394                 cmp     eax, 10h
.text:0040D397                 jz      short loc_40D352
.text:0040D399                 mov     edx, 12h
.text:0040D39E                 cmp     eax, 11h
.text:0040D3A1
.text:0040D3A1 loc_40D3A1:                             ; CODE XREF: ___get_errno+172↓j
.text:0040D3A1                                         ; ___get_errno+24C↓j ...
.text:0040D3A1                 jnz     short loc_40D333
.text:0040D3A3                 jmp     short loc_40D330
.text:0040D3A5 ; ---------------------------------------------------------------------------
.text:0040D3A5
.text:0040D3A5 loc_40D3A5:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040D3A5                 cmp     eax, 14h
.text:0040D3A8                 jle     short loc_40D352
.text:0040D3AA
.text:0040D3AA loc_40D3AA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040D3AA                 mov     edx, 10h
.text:0040D3AF                 jmp     loc_40D330
.text:0040D3B4 ; ---------------------------------------------------------------------------
.text:0040D3B4
.text:0040D3B4 loc_40D3B4:                             ; CODE XREF: ___get_errno+93↑j
.text:0040D3B4                 cmp     eax, 41h ; 'A'
.text:0040D3B7                 jz      short loc_40D352
.text:0040D3B9                 cmp     eax, 41h ; 'A'
.text:0040D3BC                 jg      short loc_40D3D1
.text:0040D3BE                 cmp     eax, 24h ; '$'
.text:0040D3C1                 jz      short loc_40D352
.text:0040D3C3                 cmp     eax, 35h ; '5'
.text:0040D3C6                 jnz     loc_40D333
.text:0040D3CC                 jmp     loc_40D320
.text:0040D3D1 ; ---------------------------------------------------------------------------
.text:0040D3D1
.text:0040D3D1 loc_40D3D1:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040D3D1                 cmp     eax, 43h ; 'C'
.text:0040D3D4                 jz      loc_40D320
.text:0040D3DA                 cmp     eax, 50h ; 'P'
.text:0040D3DD                 jnz     loc_40D333
.text:0040D3E3
.text:0040D3E3 loc_40D3E3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040D3E3                 mov     edx, 11h
.text:0040D3E8                 jmp     loc_40D330
.text:0040D3E8 ; ---------------------------------------------------------------------------
.text:0040D3ED                 align 10h
.text:0040D3F0
.text:0040D3F0 loc_40D3F0:                             ; CODE XREF: ___get_errno+7↑j
.text:0040D3F0                 cmp     eax, 0A1h ; '¡'
.text:0040D3F5                 jz      loc_40D320
.text:0040D3FB                 cmp     eax, 0A1h ; '¡'
.text:0040D400                 jg      loc_40D4B0
.text:0040D406                 cmp     eax, 81h
.text:0040D40B                 jg      short loc_40D475
.text:0040D40D                 cmp     eax, 80h ; '€'
.text:0040D412                 mov     edx, 0Ah
.text:0040D417                 jge     loc_40D330
.text:0040D41D                 cmp     eax, 6Ch ; 'l'
.text:0040D420                 jz      loc_40D352
.text:0040D426                 cmp     eax, 6Ch ; 'l'
.text:0040D429                 jg      short loc_40D447
.text:0040D42B                 cmp     eax, 57h ; 'W'
.text:0040D42E                 jz      loc_40D333
.text:0040D434                 cmp     eax, 59h ; 'Y'
.text:0040D437                 jnz     loc_40D333
.text:0040D43D
.text:0040D43D loc_40D43D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040D43D                                         ; ___get_errno+23C↓j
.text:0040D43D                 mov     edx, 0Bh
.text:0040D442                 jmp     loc_40D330
.text:0040D447 ; ---------------------------------------------------------------------------
.text:0040D447
.text:0040D447 loc_40D447:                             ; CODE XREF: ___get_errno+139↑j
.text:0040D447                 cmp     eax, 70h ; 'p'
.text:0040D44A                 mov     edx, 1Ch
.text:0040D44F                 jz      loc_40D330
.text:0040D455                 cmp     eax, 70h ; 'p'
.text:0040D458                 jg      short loc_40D467
.text:0040D45A                 mov     edx, 20h ; ' '
.text:0040D45F                 cmp     eax, 6Dh ; 'm'
.text:0040D462                 jmp     loc_40D3A1
.text:0040D467 ; ---------------------------------------------------------------------------
.text:0040D467
.text:0040D467 loc_40D467:                             ; CODE XREF: ___get_errno+168↑j
.text:0040D467                 cmp     eax, 72h ; 'r'
.text:0040D46A
.text:0040D46A loc_40D46A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040D46A                 jnz     loc_40D333
.text:0040D470                 jmp     loc_40D34B
.text:0040D475 ; ---------------------------------------------------------------------------
.text:0040D475
.text:0040D475 loc_40D475:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040D475                 cmp     eax, 84h ; '„'
.text:0040D47A                 jz      loc_40D352
.text:0040D480                 cmp     eax, 84h ; '„'
.text:0040D485                 jg      short loc_40D48E
.text:0040D487                 cmp     eax, 82h ; '‚'
.text:0040D48C                 jmp     short loc_40D46A
.text:0040D48E ; ---------------------------------------------------------------------------
.text:0040D48E
.text:0040D48E loc_40D48E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040D48E                 cmp     eax, 91h ; '‘'
.text:0040D493                 mov     edx, 29h ; ')'
.text:0040D498                 jz      loc_40D330
.text:0040D49E                 cmp     eax, 9Eh ; 'ž'
.text:0040D4A3
.text:0040D4A3 loc_40D4A3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040D4A3                 jnz     loc_40D333
.text:0040D4A9                 jmp     loc_40D352
.text:0040D4A9 ; ---------------------------------------------------------------------------
.text:0040D4AE                 align 10h
.text:0040D4B0
.text:0040D4B0 loc_40D4B0:                             ; CODE XREF: ___get_errno+110↑j
.text:0040D4B0                 cmp     eax, 0CEh ; 'Î'
.text:0040D4B5                 jz      loc_40D320
.text:0040D4BB                 cmp     eax, 0CEh ; 'Î'
.text:0040D4C0                 jg      short loc_40D510
.text:0040D4C2                 cmp     eax, 0AAh ; 'ª'
.text:0040D4C7                 jz      loc_40D3AA
.text:0040D4CD                 cmp     eax, 0AAh ; 'ª'
.text:0040D4D2                 jg      short loc_40D4E6
.text:0040D4D4                 cmp     eax, 0A4h ; '¤'
.text:0040D4D9                 jz      loc_40D43D
.text:0040D4DF                 cmp     eax, 0A7h ; '§'
.text:0040D4E4                 jmp     short loc_40D4A3
.text:0040D4E6 ; ---------------------------------------------------------------------------
.text:0040D4E6
.text:0040D4E6 loc_40D4E6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040D4E6                 cmp     eax, 0B7h ; '·'
.text:0040D4EB                 jz      loc_40D3E3
.text:0040D4F1                 cmp     eax, 0B7h ; '·'
.text:0040D4F6                 jl      loc_40D333
.text:0040D4FC                 sub     eax, 0BCh ; '¼'
.text:0040D501                 cmp     eax, 0Eh
.text:0040D504                 ja      loc_40D333
.text:0040D50A                 jmp     loc_40D379
.text:0040D50A ; ---------------------------------------------------------------------------
.text:0040D50F                 align 10h
.text:0040D510
.text:0040D510 loc_40D510:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040D510                 cmp     eax, 46Bh
.text:0040D515                 mov     edx, 24h ; '$'
.text:0040D51A                 jz      loc_40D330
.text:0040D520                 cmp     eax, 46Bh
.text:0040D525                 jg      short loc_40D541
.text:0040D527                 cmp     eax, 0D7h ; '×'
.text:0040D52C                 jz      loc_40D43D
.text:0040D532                 mov     edx, 5
.text:0040D537                 cmp     eax, 45Dh
.text:0040D53C                 jmp     loc_40D3A1
.text:0040D541 ; ---------------------------------------------------------------------------
.text:0040D541
.text:0040D541 loc_40D541:                             ; CODE XREF: ___get_errno+235↑j
.text:0040D541                 cmp     eax, 4D5h
.text:0040D546                 mov     edx, 4
.text:0040D54B                 jz      loc_40D330
.text:0040D551                 cmp     eax, 4D5h
.text:0040D556                 jg      short loc_40D567
.text:0040D558                 mov     edx, 13h
.text:0040D55D                 cmp     eax, 4B0h
.text:0040D562                 jmp     loc_40D3A1
.text:0040D567 ; ---------------------------------------------------------------------------
.text:0040D567
.text:0040D567 loc_40D567:                             ; CODE XREF: ___get_errno+266↑j
.text:0040D567                 cmp     eax, 718h
.text:0040D56C                 jnz     loc_40D333
.text:0040D572                 jmp     loc_40D359
.text:0040D572 ___get_errno    endp
.text:0040D572
.text:0040D572 ; ---------------------------------------------------------------------------
.text:0040D577                 align 10h
.text:0040D580
.text:0040D580 ; =============== S U B R O U T I N E =======================================
.text:0040D580
.text:0040D580
.text:0040D580 sub_40D580      proc near               ; CODE XREF: sub_40B430:loc_40B3CD↑p
.text:0040D580                                         ; sub_40B9F0:loc_40BA58↑p ...
.text:0040D580
.text:0040D580 var_C           = dword ptr -0Ch
.text:0040D580
.text:0040D580                 sub     esp, 0Ch
.text:0040D583                 call    GetLastError
.text:0040D588                 mov     [esp+0Ch+var_C], eax
.text:0040D58B                 call    ___get_errno
.text:0040D590                 add     esp, 0Ch
.text:0040D593                 retn
.text:0040D593 sub_40D580      endp
.text:0040D593
.text:0040D593 ; ---------------------------------------------------------------------------
.text:0040D594                 align 10h
.text:0040D5A0
.text:0040D5A0 ; =============== S U B R O U T I N E =======================================
.text:0040D5A0
.text:0040D5A0
.text:0040D5A0 sub_40D5A0      proc near               ; CODE XREF: .text:0040B963↑p
.text:0040D5A0                                         ; .text:0040B9B3↑p
.text:0040D5A0
.text:0040D5A0 arg_4           = dword ptr  8
.text:0040D5A0
.text:0040D5A0                 sub     esp, 0Ch
.text:0040D5A3                 mov     edx, [esp+0Ch+arg_4]
.text:0040D5A7                 test    edx, edx
.text:0040D5A9                 jz      short loc_40D5B0
.text:0040D5AB                 add     esp, 0Ch
.text:0040D5AE                 jmp     short sub_40D5F0
.text:0040D5B0 ; ---------------------------------------------------------------------------
.text:0040D5B0
.text:0040D5B0 loc_40D5B0:                             ; CODE XREF: sub_40D5A0+9↑j
.text:0040D5B0                 call    _errno
.text:0040D5B5                 mov     dword ptr [eax], 16h
.text:0040D5BB                 xor     eax, eax
.text:0040D5BD                 add     esp, 0Ch
.text:0040D5C0                 retn
.text:0040D5C0 sub_40D5A0      endp
.text:0040D5C0
.text:0040D5C1 ; ---------------------------------------------------------------------------
.text:0040D5C1                 jmp     short sub_40D5D0
.text:0040D5C1 ; ---------------------------------------------------------------------------
.text:0040D5C3                 align 10h
.text:0040D5D0
.text:0040D5D0 ; =============== S U B R O U T I N E =======================================
.text:0040D5D0
.text:0040D5D0
.text:0040D5D0 ; int __cdecl sub_40D5D0(LPCSTR)
.text:0040D5D0 sub_40D5D0      proc near               ; CODE XREF: sub_40B430-10C↑p
.text:0040D5D0                                         ; .text:0040BB58↑p ...
.text:0040D5D0
.text:0040D5D0 lpFileName      = dword ptr -0Ch
.text:0040D5D0 Destination     = dword ptr -8
.text:0040D5D0 arg_0           = dword ptr  4
.text:0040D5D0
.text:0040D5D0                 sub     esp, 0Ch
.text:0040D5D3                 mov     edx, [esp+0Ch+arg_0]
.text:0040D5D7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040D5DF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040D5E2                 call    sub_40D5F0
.text:0040D5E7                 add     esp, 0Ch
.text:0040D5EA                 retn
.text:0040D5EA sub_40D5D0      endp
.text:0040D5EA
.text:0040D5EA ; ---------------------------------------------------------------------------
.text:0040D5EB                 align 10h
.text:0040D5F0
.text:0040D5F0 ; =============== S U B R O U T I N E =======================================
.text:0040D5F0
.text:0040D5F0
.text:0040D5F0 ; int __cdecl sub_40D5F0(LPCSTR lpFileName, char *Destination)
.text:0040D5F0 sub_40D5F0      proc near               ; CODE XREF: sub_40D5A0+E↑j
.text:0040D5F0                                         ; sub_40D5D0+12↑p
.text:0040D5F0
.text:0040D5F0 Size            = dword ptr -2Ch
.text:0040D5F0 nBufferLength   = dword ptr -28h
.text:0040D5F0 lpBuffer        = dword ptr -24h
.text:0040D5F0 lpFilePart      = dword ptr -20h
.text:0040D5F0 FilePart        = dword ptr -14h
.text:0040D5F0 lpFileName      = dword ptr  4
.text:0040D5F0 Destination     = dword ptr  8
.text:0040D5F0
.text:0040D5F0                 push    ebp
.text:0040D5F1                 push    edi
.text:0040D5F2                 push    esi
.text:0040D5F3                 push    ebx
.text:0040D5F4                 sub     esp, 1Ch
.text:0040D5F7                 mov     edi, [esp+2Ch+lpFileName]
.text:0040D5FB                 mov     ebp, [esp+2Ch+Destination]
.text:0040D5FF                 test    edi, edi
.text:0040D601                 jz      loc_40D709
.text:0040D607                 cmp     byte ptr [edi], 0
.text:0040D60A                 jz      loc_40D6FC
.text:0040D610                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040D617                 call    malloc
.text:0040D61C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040D620                 lea     edx, [esp+2Ch+FilePart]
.text:0040D624                 mov     ebx, eax
.text:0040D626                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040D62A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040D632                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040D635                 call    GetFullPathNameA
.text:0040D63A                 sub     esp, 10h
.text:0040D63D                 mov     esi, eax
.text:0040D63F                 test    eax, eax
.text:0040D641                 jz      loc_40D6EA
.text:0040D647                 cmp     eax, 104h
.text:0040D64C                 jle     short loc_40D65D
.text:0040D64E                 test    ebp, ebp
.text:0040D650                 jz      short loc_40D6B9
.text:0040D652                 call    _errno
.text:0040D657                 mov     dword ptr [eax], 26h ; '&'
.text:0040D65D
.text:0040D65D loc_40D65D:                             ; CODE XREF: sub_40D5F0+5C↑j
.text:0040D65D                                         ; sub_40D5F0+F5↓j
.text:0040D65D                 call    _errno
.text:0040D662                 mov     edi, [eax]
.text:0040D664                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040D66C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040D66F                 call    sub_40D720
.text:0040D674                 test    eax, eax
.text:0040D676                 jnz     short loc_40D690
.text:0040D678                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040D67D                 cmp     al, 2Fh ; '/'
.text:0040D67F                 jz      short loc_40D690
.text:0040D681                 cmp     al, 5Ch ; '\'
.text:0040D683                 jz      short loc_40D690
.text:0040D685                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040D689                 mov     byte ptr [esi+ebx+1], 0
.text:0040D68E                 mov     esi, esi
.text:0040D690
.text:0040D690 loc_40D690:                             ; CODE XREF: sub_40D5F0+86↑j
.text:0040D690                                         ; sub_40D5F0+8F↑j ...
.text:0040D690                 call    _errno
.text:0040D695                 mov     [eax], edi
.text:0040D697                 mov     [esp+2Ch+Size], ebx
.text:0040D69A                 call    sub_40B850
.text:0040D69F                 test    ebp, ebp
.text:0040D6A1                 mov     eax, ebx
.text:0040D6A3                 jz      short loc_40D6B1
.text:0040D6A5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040D6A9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040D6AC                 call    strcpy
.text:0040D6B1
.text:0040D6B1 loc_40D6B1:                             ; CODE XREF: sub_40D5F0+B3↑j
.text:0040D6B1                                         ; sub_40D5F0+10A↓j
.text:0040D6B1                 add     esp, 1Ch
.text:0040D6B4                 pop     ebx
.text:0040D6B5                 pop     esi
.text:0040D6B6                 pop     edi
.text:0040D6B7                 pop     ebp
.text:0040D6B8                 retn
.text:0040D6B9 ; ---------------------------------------------------------------------------
.text:0040D6B9
.text:0040D6B9 loc_40D6B9:                             ; CODE XREF: sub_40D5F0+60↑j
.text:0040D6B9                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040D6BC                 lea     ecx, [eax+2]
.text:0040D6BF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040D6C3                 call    realloc
.text:0040D6C8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040D6CC                 lea     edx, [esp+2Ch+FilePart]
.text:0040D6D0                 mov     ebx, eax
.text:0040D6D2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040D6D6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040D6DA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040D6DD                 call    GetFullPathNameA
.text:0040D6E2                 sub     esp, 10h
.text:0040D6E5                 jmp     loc_40D65D
.text:0040D6EA ; ---------------------------------------------------------------------------
.text:0040D6EA
.text:0040D6EA loc_40D6EA:                             ; CODE XREF: sub_40D5F0+51↑j
.text:0040D6EA                 call    sub_40D580
.text:0040D6EF                 mov     esi, eax
.text:0040D6F1                 call    _errno
.text:0040D6F6                 mov     [eax], esi
.text:0040D6F8
.text:0040D6F8 loc_40D6F8:                             ; CODE XREF: sub_40D5F0+117↓j
.text:0040D6F8                                         ; sub_40D5F0+124↓j
.text:0040D6F8                 xor     eax, eax
.text:0040D6FA                 jmp     short loc_40D6B1
.text:0040D6FC ; ---------------------------------------------------------------------------
.text:0040D6FC
.text:0040D6FC loc_40D6FC:                             ; CODE XREF: sub_40D5F0+1A↑j
.text:0040D6FC                 call    _errno
.text:0040D701                 mov     dword ptr [eax], 2
.text:0040D707                 jmp     short loc_40D6F8
.text:0040D709 ; ---------------------------------------------------------------------------
.text:0040D709
.text:0040D709 loc_40D709:                             ; CODE XREF: sub_40D5F0+11↑j
.text:0040D709                 call    _errno
.text:0040D70E                 mov     dword ptr [eax], 16h
.text:0040D714                 jmp     short loc_40D6F8
.text:0040D714 sub_40D5F0      endp
.text:0040D714
.text:0040D714 ; ---------------------------------------------------------------------------
.text:0040D716                 align 10h
.text:0040D720
.text:0040D720 ; =============== S U B R O U T I N E =======================================
.text:0040D720
.text:0040D720
.text:0040D720 ; int __cdecl sub_40D720(LPCSTR lpFileName, int)
.text:0040D720 sub_40D720      proc near               ; CODE XREF: sub_40B430-11D↑p
.text:0040D720                                         ; .text:0040B832↑p ...
.text:0040D720
.text:0040D720 uMode           = dword ptr -1Ch
.text:0040D720 var_10          = dword ptr -10h
.text:0040D720 var_C           = dword ptr -0Ch
.text:0040D720 var_8           = dword ptr -8
.text:0040D720 var_4           = dword ptr -4
.text:0040D720 lpFileName      = dword ptr  4
.text:0040D720 arg_4           = dword ptr  8
.text:0040D720
.text:0040D720                 sub     esp, 1Ch
.text:0040D723                 mov     [esp+1Ch+var_10], ebx
.text:0040D727                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040D72B                 mov     [esp+1Ch+var_4], ebp
.text:0040D72F                 xor     ebp, ebp
.text:0040D731                 test    ebx, ebx
.text:0040D733                 mov     [esp+1Ch+var_C], esi
.text:0040D737                 mov     esi, [esp+1Ch+arg_4]
.text:0040D73B                 mov     [esp+1Ch+var_8], edi
.text:0040D73F                 jz      short loc_40D749
.text:0040D741                 test    esi, 0FFFFFFE8h
.text:0040D747                 jz      short loc_40D770
.text:0040D749
.text:0040D749 loc_40D749:                             ; CODE XREF: sub_40D720+1F↑j
.text:0040D749                 call    _errno
.text:0040D74E                 mov     dword ptr [eax], 16h
.text:0040D754
.text:0040D754 loc_40D754:                             ; CODE XREF: sub_40D720+B1↓j
.text:0040D754                 mov     eax, 0FFFFFFFFh
.text:0040D759
.text:0040D759 loc_40D759:                             ; CODE XREF: sub_40D720+86↓j
.text:0040D759                                         ; sub_40D720+A4↓j
.text:0040D759                 mov     ebx, [esp+1Ch+var_10]
.text:0040D75D                 mov     esi, [esp+1Ch+var_C]
.text:0040D761                 mov     edi, [esp+1Ch+var_8]
.text:0040D765                 mov     ebp, [esp+1Ch+var_4]
.text:0040D769                 add     esp, 1Ch
.text:0040D76C                 retn
.text:0040D76C ; ---------------------------------------------------------------------------
.text:0040D76D                 align 10h
.text:0040D770
.text:0040D770 loc_40D770:                             ; CODE XREF: sub_40D720+27↑j
.text:0040D770                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040D777                 call    SetErrorMode
.text:0040D77C                 sub     esp, 4
.text:0040D77F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040D782                 call    GetFileAttributesA
.text:0040D787                 sub     esp, 4
.text:0040D78A                 mov     edi, eax
.text:0040D78C                 cmp     eax, 0FFFFFFFFh
.text:0040D78F                 jz      short loc_40D7D3
.text:0040D791
.text:0040D791 loc_40D791:                             ; CODE XREF: sub_40D720+C6↓j
.text:0040D791                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040D798                 call    SetErrorMode
.text:0040D79D                 sub     esp, 4
.text:0040D7A0                 mov     eax, 0FFFFFFFFh
.text:0040D7A5                 inc     ebp
.text:0040D7A6                 jz      short loc_40D759
.text:0040D7A8                 test    esi, 10h
.text:0040D7AE                 jz      short loc_40D7B8
.text:0040D7B0                 test    edi, 10h
.text:0040D7B6                 jz      short loc_40D7C6
.text:0040D7B8
.text:0040D7B8 loc_40D7B8:                             ; CODE XREF: sub_40D720+8E↑j
.text:0040D7B8                 and     esi, 2
.text:0040D7BB                 jz      short loc_40D7C2
.text:0040D7BD                 and     edi, 1
.text:0040D7C0                 jnz     short loc_40D7C6
.text:0040D7C2
.text:0040D7C2 loc_40D7C2:                             ; CODE XREF: sub_40D720+9B↑j
.text:0040D7C2                 xor     eax, eax
.text:0040D7C4                 jmp     short loc_40D759
.text:0040D7C6 ; ---------------------------------------------------------------------------
.text:0040D7C6
.text:0040D7C6 loc_40D7C6:                             ; CODE XREF: sub_40D720+96↑j
.text:0040D7C6                                         ; sub_40D720+A0↑j
.text:0040D7C6                 call    _errno
.text:0040D7CB                 mov     dword ptr [eax], 0Dh
.text:0040D7D1                 jmp     short loc_40D754
.text:0040D7D3 ; ---------------------------------------------------------------------------
.text:0040D7D3
.text:0040D7D3 loc_40D7D3:                             ; CODE XREF: sub_40D720+6F↑j
.text:0040D7D3                 call    sub_40D580
.text:0040D7D8                 mov     ebp, eax
.text:0040D7DA                 call    _errno
.text:0040D7DF                 mov     [eax], ebp
.text:0040D7E1                 mov     ebp, 0FFFFFFFFh
.text:0040D7E6                 jmp     short loc_40D791
.text:0040D7E6 sub_40D720      endp
.text:0040D7E6
.text:0040D7E6 ; ---------------------------------------------------------------------------
.text:0040D7E8                 align 10h
.text:0040D7F0 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040DA0F↓o
.text:0040D7FC aLu             db '%lu',0              ; DATA XREF: .text:0040DA1F↓o
.text:0040D800 asc_40D800      db ' ',0                ; DATA XREF: .text:loc_40DB08↓o
.text:0040D802                 align 10h
.text:0040D810 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040D810                                         ; DATA XREF: .text:0040DB3F↓o
.text:0040D830 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40DB4D↓o
.text:0040D83C aServer         db ' Server',0          ; DATA XREF: .text:0040DB76↓o
.text:0040D83C                                         ; .text:loc_40DCEE↓o
.text:0040D844 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40DB88↓o
.text:0040D855 aDatacenterServ db ' Datacenter Server',0
.text:0040D855                                         ; DATA XREF: .text:loc_40DB92↓o
.text:0040D868 aStandardEditio db ' Standard Edition',0
.text:0040D868                                         ; DATA XREF: .text:0040DBBA↓o
.text:0040D87A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40DBC4↓o
.text:0040D887 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040D887                                         ; DATA XREF: .text:loc_40DBCE↓o
.text:0040D89B aDatacenterEdit db ' Datacenter Edition',0
.text:0040D89B                                         ; DATA XREF: .text:loc_40DBD8↓o
.text:0040D8AF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040DBEB↓o
.text:0040D8BD aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40DBF5↓o
.text:0040D8BD                                         ; .text:loc_40DD00↓o
.text:0040D8CB                 align 10h
.text:0040D8D0 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040D8D0                                         ; DATA XREF: .text:0040DC22↓o
.text:0040D900 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040DC69↓o
.text:0040D90C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040DCA4↓o
.text:0040D912 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040DCBB↓o
.text:0040D91B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040DCD2↓o
.text:0040D924                 align 10h
.text:0040D930 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040D930                                         ; DATA XREF: .text:0040DE47↓o
.text:0040D953                 db 1Dh dup(90h)
.text:0040D970 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040D970                                         ; DATA XREF: .text:0040DEA6↓o
.text:0040D996 ; ---------------------------------------------------------------------------
.text:0040D996
.text:0040D996 loc_40D996:                             ; DATA XREF: .text:loc_40DF11↓o
.text:0040D996                 and     [ebx+45h], dl
.text:0040D999                 add     [eax], ah
.text:0040D99B                 push    ebx
.text:0040D99C                 push    eax
.text:0040D99D                 xor     [eax], eax
.text:0040D99F
.text:0040D99F loc_40D99F:                             ; DATA XREF: .text:loc_40DF8B↓o
.text:0040D99F                 and     [edi+53h], cl
.text:0040D9A2                 push    edx
.text:0040D9A3                 xor     al, [eax]
.text:0040D9A5                 lea     esi, [esi+0]
.text:0040D9A9                 lea     edi, [edi+0]
.text:0040D9B0                 push    edi
.text:0040D9B1                 push    esi
.text:0040D9B2                 push    ebx
.text:0040D9B3                 sub     esp, 130h
.text:0040D9B9                 mov     ebx, [esp+140h]
.text:0040D9C0                 call    sub_40E0C0
.text:0040D9C5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040D9CA                 cmp     eax, 1
.text:0040D9CD                 jz      loc_40DE70
.text:0040D9D3                 cmp     eax, 1
.text:0040D9D6                 jb      loc_40DE46
.text:0040D9DC                 cmp     eax, 2
.text:0040D9DF                 jz      loc_40DA90
.text:0040D9E5                 cmp     eax, 3
.text:0040D9E8                 jz      short loc_40DA4F
.text:0040D9EA                 lea     esi, [esi+0]
.text:0040D9F0
.text:0040D9F0 loc_40D9F0:                             ; CODE XREF: .text:0040DA85↓j
.text:0040D9F0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040D9F6                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040D9FC
.text:0040D9FC loc_40D9FC:                             ; CODE XREF: .text:0040DE8F↓j
.text:0040D9FC                 mov     [esp+10h], edx
.text:0040DA00                 mov     ebx, [esp+144h]
.text:0040DA07                 mov     [esp+0Ch], ecx
.text:0040DA0B                 mov     [esp+8], eax
.text:0040DA0F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040DA17                 mov     [esp], ebx
.text:0040DA1A                 call    sprintf
.text:0040DA1F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040DA27                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040DA2D                 mov     ecx, [esp+148h]
.text:0040DA34                 mov     [esp+8], edi
.text:0040DA38                 mov     [esp], ecx
.text:0040DA3B                 call    sprintf
.text:0040DA40                 mov     eax, 1
.text:0040DA45
.text:0040DA45 loc_40DA45:                             ; CODE XREF: .text:0040DC3F↓j
.text:0040DA45                                         ; .text:0040DC8C↓j
.text:0040DA45                 add     esp, 130h
.text:0040DA4B                 pop     ebx
.text:0040DA4C                 pop     esi
.text:0040DA4D                 pop     edi
.text:0040DA4E                 retn
.text:0040DA4F ; ---------------------------------------------------------------------------
.text:0040DA4F
.text:0040DA4F loc_40DA4F:                             ; CODE XREF: .text:0040D9E8↑j
.text:0040DA4F                 mov     dword ptr [ebx], 7263694Dh
.text:0040DA55                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040DA5C                 mov     dword ptr [ebx+8], 69572074h
.text:0040DA63                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040DA6A                 mov     dword ptr [ebx+10h], 45432073h
.text:0040DA71                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040DA77                 mov     esi, esi
.text:0040DA79                 lea     edi, [edi+0]
.text:0040DA80
.text:0040DA80 loc_40DA80:                             ; CODE XREF: .text:0040DB28↓j
.text:0040DA80                                         ; .text:0040DE69↓j ...
.text:0040DA80                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040DA85                 jmp     loc_40D9F0
.text:0040DA85 ; ---------------------------------------------------------------------------
.text:0040DA8A                 align 10h
.text:0040DA90
.text:0040DA90 loc_40DA90:                             ; CODE XREF: .text:0040D9DF↑j
.text:0040DA90                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040DA96                 cmp     edx, 3
.text:0040DA99                 mov     eax, edx
.text:0040DA9B                 jz      loc_40DE05
.text:0040DAA1
.text:0040DAA1 loc_40DAA1:                             ; CODE XREF: .text:0040DE0C↓j
.text:0040DAA1                 cmp     eax, 4
.text:0040DAA4                 jz      loc_40DDC5
.text:0040DAAA
.text:0040DAAA loc_40DAAA:                             ; CODE XREF: .text:0040DDCD↓j
.text:0040DAAA                 cmp     eax, 4
.text:0040DAAD                 ja      loc_40DD12
.text:0040DAB3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040DAB9                 test    ecx, ecx
.text:0040DABB                 jnz     loc_40DD12
.text:0040DAC1                 mov     dword ptr [ebx], 7263694Dh
.text:0040DAC7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040DACE                 mov     dword ptr [ebx+8], 69572074h
.text:0040DAD5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040DADC                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040DAE3
.text:0040DAE3 loc_40DAE3:                             ; CODE XREF: .text:0040DD85↓j
.text:0040DAE3                 mov     byte ptr [ebx+14h], 0
.text:0040DAE7
.text:0040DAE7 loc_40DAE7:                             ; CODE XREF: .text:0040DD15↓j
.text:0040DAE7                                         ; .text:0040DD2C↓j ...
.text:0040DAE7                 mov     esi, dword_414070
.text:0040DAED                 test    esi, esi
.text:0040DAEF                 jz      loc_40DC02
.text:0040DAF5                 movzx   eax, ds:byte_4158CA
.text:0040DAFC                 cmp     al, 1
.text:0040DAFE                 jz      loc_40DBE2
.text:0040DB04                 cmp     al, 3
.text:0040DB06                 jz      short loc_40DB2D
.text:0040DB08
.text:0040DB08 loc_40DB08:                             ; CODE XREF: .text:0040DB4B↓j
.text:0040DB08                                         ; .text:0040DB86↓j ...
.text:0040DB08                 mov     dword ptr [esp+4], offset asc_40D800 ; " "
.text:0040DB10                 mov     [esp], ebx
.text:0040DB13                 call    strcat
.text:0040DB18                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040DB20                 mov     [esp], ebx
.text:0040DB23                 call    strcat
.text:0040DB28                 jmp     loc_40DA80
.text:0040DB2D ; ---------------------------------------------------------------------------
.text:0040DB2D
.text:0040DB2D loc_40DB2D:                             ; CODE XREF: .text:0040DB06↑j
.text:0040DB2D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040DB34                 jz      short loc_40DB56
.text:0040DB36
.text:0040DB36 loc_40DB36:                             ; CODE XREF: .text:0040DB62↓j
.text:0040DB36                 test    byte ptr ds:word_4158C8, 2
.text:0040DB3D                 jz      short loc_40DB4D
.text:0040DB3F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040DB46
.text:0040DB46 loc_40DB46:                             ; CODE XREF: .text:0040DB54↓j
.text:0040DB46                 call    printf
.text:0040DB4B                 jmp     short loc_40DB08
.text:0040DB4D ; ---------------------------------------------------------------------------
.text:0040DB4D
.text:0040DB4D loc_40DB4D:                             ; CODE XREF: .text:0040DB3D↑j
.text:0040DB4D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040DB54                 jmp     short loc_40DB46
.text:0040DB56 ; ---------------------------------------------------------------------------
.text:0040DB56
.text:0040DB56 loc_40DB56:                             ; CODE XREF: .text:0040DB34↑j
.text:0040DB56                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040DB5B                 cmp     eax, 2
.text:0040DB5E                 jz      short loc_40DBA0
.text:0040DB60                 test    eax, eax
.text:0040DB62                 jnz     short loc_40DB36
.text:0040DB64                 cmp     byte ptr ds:word_4158C8, 0
.text:0040DB6B                 js      short loc_40DB92
.text:0040DB6D                 test    byte ptr ds:word_4158C8, 2
.text:0040DB74                 jnz     short loc_40DB88
.text:0040DB76                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040DB7E
.text:0040DB7E loc_40DB7E:                             ; CODE XREF: .text:0040DB90↓j
.text:0040DB7E                                         ; .text:0040DB9A↓j ...
.text:0040DB7E                 mov     [esp], ebx
.text:0040DB81                 call    strcat
.text:0040DB86                 jmp     short loc_40DB08
.text:0040DB88 ; ---------------------------------------------------------------------------
.text:0040DB88
.text:0040DB88 loc_40DB88:                             ; CODE XREF: .text:0040DB74↑j
.text:0040DB88                                         ; .text:0040DCE9↓j
.text:0040DB88                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040DB90                 jmp     short loc_40DB7E
.text:0040DB92 ; ---------------------------------------------------------------------------
.text:0040DB92
.text:0040DB92 loc_40DB92:                             ; CODE XREF: .text:0040DB6B↑j
.text:0040DB92                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040DB9A                 jmp     short loc_40DB7E
.text:0040DB9A ; ---------------------------------------------------------------------------
.text:0040DB9C                 align 10h
.text:0040DBA0
.text:0040DBA0 loc_40DBA0:                             ; CODE XREF: .text:0040DB5E↑j
.text:0040DBA0                 cmp     byte ptr ds:word_4158C8, 0
.text:0040DBA7                 js      short loc_40DBD8
.text:0040DBA9                 movzx   eax, ds:word_4158C8
.text:0040DBB0                 test    al, 2
.text:0040DBB2                 jnz     short loc_40DBCE
.text:0040DBB4                 cmp     ax, 400h
.text:0040DBB8                 jz      short loc_40DBC4
.text:0040DBBA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040DBC2                 jmp     short loc_40DB7E
.text:0040DBC4 ; ---------------------------------------------------------------------------
.text:0040DBC4
.text:0040DBC4 loc_40DBC4:                             ; CODE XREF: .text:0040DBB8↑j
.text:0040DBC4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040DBCC                 jmp     short loc_40DB7E
.text:0040DBCE ; ---------------------------------------------------------------------------
.text:0040DBCE
.text:0040DBCE loc_40DBCE:                             ; CODE XREF: .text:0040DBB2↑j
.text:0040DBCE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040DBD6                 jmp     short loc_40DB7E
.text:0040DBD8 ; ---------------------------------------------------------------------------
.text:0040DBD8
.text:0040DBD8 loc_40DBD8:                             ; CODE XREF: .text:0040DBA7↑j
.text:0040DBD8                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040DBE0                 jmp     short loc_40DB7E
.text:0040DBE2 ; ---------------------------------------------------------------------------
.text:0040DBE2
.text:0040DBE2 loc_40DBE2:                             ; CODE XREF: .text:0040DAFE↑j
.text:0040DBE2                 test    byte ptr ds:word_4158C8+1, 2
.text:0040DBE9                 jz      short loc_40DBF5
.text:0040DBEB                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040DBF3                 jmp     short loc_40DB7E
.text:0040DBF5 ; ---------------------------------------------------------------------------
.text:0040DBF5
.text:0040DBF5 loc_40DBF5:                             ; CODE XREF: .text:0040DBE9↑j
.text:0040DBF5                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040DBFD                 jmp     loc_40DB7E
.text:0040DC02 ; ---------------------------------------------------------------------------
.text:0040DC02
.text:0040DC02 loc_40DC02:                             ; CODE XREF: .text:0040DAEF↑j
.text:0040DC02                 mov     dword ptr [esp+28h], 0FFh
.text:0040DC0A                 lea     edx, [esp+2Ch]
.text:0040DC0E                 mov     [esp+10h], edx
.text:0040DC12                 mov     dword ptr [esp+0Ch], 1
.text:0040DC1A                 mov     dword ptr [esp+8], 0
.text:0040DC22                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040DC2A                 mov     dword ptr [esp], 80000002h
.text:0040DC31                 call    RegOpenKeyExA
.text:0040DC36                 mov     edi, eax
.text:0040DC38                 sub     esp, 14h
.text:0040DC3B                 xor     eax, eax
.text:0040DC3D                 test    edi, edi
.text:0040DC3F                 jnz     loc_40DA45
.text:0040DC45                 mov     dword ptr [esp+0Ch], 0
.text:0040DC4D                 mov     edi, [esp+2Ch]
.text:0040DC51                 lea     esi, [esp+28h]
.text:0040DC55                 mov     [esp+14h], esi
.text:0040DC59                 lea     esi, [esp+30h]
.text:0040DC5D                 mov     [esp+10h], esi
.text:0040DC61                 mov     dword ptr [esp+8], 0
.text:0040DC69                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040DC71                 mov     [esp], edi
.text:0040DC74                 call    RegQueryValueExA
.text:0040DC79                 sub     esp, 18h
.text:0040DC7C                 test    eax, eax
.text:0040DC7E                 jnz     short loc_40DC8A
.text:0040DC80                 cmp     dword ptr [esp+28h], 0FFh
.text:0040DC88                 jbe     short loc_40DC91
.text:0040DC8A
.text:0040DC8A loc_40DC8A:                             ; CODE XREF: .text:0040DC7E↑j
.text:0040DC8A                 xor     eax, eax
.text:0040DC8C                 jmp     loc_40DA45
.text:0040DC91 ; ---------------------------------------------------------------------------
.text:0040DC91
.text:0040DC91 loc_40DC91:                             ; CODE XREF: .text:0040DC88↑j
.text:0040DC91                 mov     edx, [esp+2Ch]
.text:0040DC95                 mov     [esp], edx
.text:0040DC98                 call    RegCloseKey
.text:0040DC9D                 sub     esp, 4
.text:0040DCA0                 mov     [esp+4], esi
.text:0040DCA4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040DCAB                 call    lstrcmpiA
.text:0040DCB0                 sub     esp, 8
.text:0040DCB3                 test    eax, eax
.text:0040DCB5                 jz      short loc_40DD00
.text:0040DCB7
.text:0040DCB7 loc_40DCB7:                             ; CODE XREF: .text:0040DD10↓j
.text:0040DCB7                 mov     [esp+4], esi
.text:0040DCBB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040DCC2                 call    lstrcmpiA
.text:0040DCC7                 sub     esp, 8
.text:0040DCCA                 test    eax, eax
.text:0040DCCC                 jz      short loc_40DCEE
.text:0040DCCE
.text:0040DCCE loc_40DCCE:                             ; CODE XREF: .text:0040DCFE↓j
.text:0040DCCE                 mov     [esp+4], esi
.text:0040DCD2                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040DCD9                 call    lstrcmpiA
.text:0040DCDE                 sub     esp, 8
.text:0040DCE1                 test    eax, eax
.text:0040DCE3                 jnz     loc_40DB08
.text:0040DCE9                 jmp     loc_40DB88
.text:0040DCEE ; ---------------------------------------------------------------------------
.text:0040DCEE
.text:0040DCEE loc_40DCEE:                             ; CODE XREF: .text:0040DCCC↑j
.text:0040DCEE                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040DCF6                 mov     [esp], ebx
.text:0040DCF9                 call    strcat
.text:0040DCFE                 jmp     short loc_40DCCE
.text:0040DD00 ; ---------------------------------------------------------------------------
.text:0040DD00
.text:0040DD00 loc_40DD00:                             ; CODE XREF: .text:0040DCB5↑j
.text:0040DD00                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040DD08                 mov     [esp], ebx
.text:0040DD0B                 call    strcat
.text:0040DD10                 jmp     short loc_40DCB7
.text:0040DD12 ; ---------------------------------------------------------------------------
.text:0040DD12
.text:0040DD12 loc_40DD12:                             ; CODE XREF: .text:0040DAAD↑j
.text:0040DD12                                         ; .text:0040DABB↑j
.text:0040DD12                 cmp     eax, 5
.text:0040DD15                 jnz     loc_40DAE7
.text:0040DD1B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040DD20                 cmp     eax, 2
.text:0040DD23                 jz      short loc_40DD8A
.text:0040DD25                 cmp     eax, 1
.text:0040DD28                 jz      short loc_40DD63
.text:0040DD2A                 test    eax, eax
.text:0040DD2C                 jnz     loc_40DAE7
.text:0040DD32                 mov     dword ptr [ebx], 7263694Dh
.text:0040DD38                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040DD3F                 mov     dword ptr [ebx+8], 69572074h
.text:0040DD46                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040DD4D                 mov     dword ptr [ebx+10h], 30322073h
.text:0040DD54                 mov     word ptr [ebx+14h], 3030h
.text:0040DD5A                 mov     byte ptr [ebx+16h], 0
.text:0040DD5E                 jmp     loc_40DAE7
.text:0040DD63 ; ---------------------------------------------------------------------------
.text:0040DD63
.text:0040DD63 loc_40DD63:                             ; CODE XREF: .text:0040DD28↑j
.text:0040DD63                 mov     dword ptr [ebx], 7263694Dh
.text:0040DD69                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040DD70                 mov     dword ptr [ebx+8], 69572074h
.text:0040DD77                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040DD7E                 mov     dword ptr [ebx+10h], 50582073h
.text:0040DD85                 jmp     loc_40DAE3
.text:0040DD8A ; ---------------------------------------------------------------------------
.text:0040DD8A
.text:0040DD8A loc_40DD8A:                             ; CODE XREF: .text:0040DD23↑j
.text:0040DD8A                 mov     dword ptr [ebx], 7263694Dh
.text:0040DD90                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040DD97                 mov     dword ptr [ebx+8], 69572074h
.text:0040DD9E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040DDA5                 mov     dword ptr [ebx+10h], 65532073h
.text:0040DDAC                 mov     dword ptr [ebx+14h], 72657672h
.text:0040DDB3                 mov     dword ptr [ebx+18h], 30303220h
.text:0040DDBA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040DDC0                 jmp     loc_40DAE7
.text:0040DDC5 ; ---------------------------------------------------------------------------
.text:0040DDC5
.text:0040DDC5 loc_40DDC5:                             ; CODE XREF: .text:0040DAA4↑j
.text:0040DDC5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040DDCB                 test    edx, edx
.text:0040DDCD                 jnz     loc_40DAAA
.text:0040DDD3                 mov     dword ptr [ebx], 7263694Dh
.text:0040DDD9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040DDE0                 mov     dword ptr [ebx+8], 69572074h
.text:0040DDE7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040DDEE                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040DDF5                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040DDFC                 mov     byte ptr [ebx+18h], 0
.text:0040DE00                 jmp     loc_40DAE7
.text:0040DE05 ; ---------------------------------------------------------------------------
.text:0040DE05
.text:0040DE05 loc_40DE05:                             ; CODE XREF: .text:0040DA9B↑j
.text:0040DE05                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040DE0C                 jnz     loc_40DAA1
.text:0040DE12                 mov     dword ptr [ebx], 7263694Dh
.text:0040DE18                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040DE1F                 mov     dword ptr [ebx+8], 69572074h
.text:0040DE26                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040DE2D                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040DE34                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040DE3B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040DE41                 jmp     loc_40DAE7
.text:0040DE46 ; ---------------------------------------------------------------------------
.text:0040DE46
.text:0040DE46 loc_40DE46:                             ; CODE XREF: .text:0040D9D6↑j
.text:0040DE46                 cld
.text:0040DE47                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040DE4C                 mov     ecx, 8
.text:0040DE51                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040DE58                 mov     edi, ebx
.text:0040DE5A                 rep movsd
.text:0040DE5C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040DE63                 mov     [edi+2], dl
.text:0040DE66                 mov     [edi], si
.text:0040DE69                 jmp     loc_40DA80
.text:0040DE69 ; ---------------------------------------------------------------------------
.text:0040DE6E                 align 10h
.text:0040DE70
.text:0040DE70 loc_40DE70:                             ; CODE XREF: .text:0040D9CD↑j
.text:0040DE70                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040DE76                 cmp     ecx, 4
.text:0040DE79                 jz      loc_40DF30
.text:0040DE7F
.text:0040DE7F loc_40DE7F:                             ; CODE XREF: .text:0040DF86↓j
.text:0040DE7F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040DE85
.text:0040DE85 loc_40DE85:                             ; CODE XREF: .text:0040DF38↓j
.text:0040DE85                 cmp     ecx, 4
.text:0040DE88                 jz      short loc_40DE94
.text:0040DE8A
.text:0040DE8A loc_40DE8A:                             ; CODE XREF: .text:0040DE9C↓j
.text:0040DE8A                                         ; .text:0040DEA1↓j
.text:0040DE8A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040DE8F                 jmp     loc_40D9FC
.text:0040DE94 ; ---------------------------------------------------------------------------
.text:0040DE94
.text:0040DE94 loc_40DE94:                             ; CODE XREF: .text:0040DE88↑j
.text:0040DE94                 cmp     edx, 0Ah
.text:0040DE97                 jz      short loc_40DEC1
.text:0040DE99
.text:0040DE99 loc_40DE99:                             ; CODE XREF: .text:0040DF0F↓j
.text:0040DE99                 cmp     ecx, 4
.text:0040DE9C                 jnz     short loc_40DE8A
.text:0040DE9E                 cmp     edx, 5Ah ; 'Z'
.text:0040DEA1                 jnz     short loc_40DE8A
.text:0040DEA3                 cld
.text:0040DEA4                 mov     edi, ebx
.text:0040DEA6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040DEAB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040DEB2                 mov     ecx, 9
.text:0040DEB7                 rep movsd
.text:0040DEB9                 mov     [edi], bx
.text:0040DEBC                 jmp     loc_40DA80
.text:0040DEC1 ; ---------------------------------------------------------------------------
.text:0040DEC1
.text:0040DEC1 loc_40DEC1:                             ; CODE XREF: .text:0040DE97↑j
.text:0040DEC1                 mov     dword ptr [ebx], 7263694Dh
.text:0040DEC7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040DECE                 mov     dword ptr [ebx+8], 69572074h
.text:0040DED5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040DEDC                 mov     dword ptr [ebx+10h], 38392073h
.text:0040DEE3                 mov     byte ptr [ebx+14h], 0
.text:0040DEE7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040DEED                 lea     edi, [edx-7CFh]
.text:0040DEF3                 cmp     edi, 0B7h ; '·'
.text:0040DEF9                 jbe     short loc_40DF23
.text:0040DEFB                 cmp     edx, 886h
.text:0040DF01                 ja      short loc_40DF11
.text:0040DF03
.text:0040DF03 loc_40DF03:                             ; CODE XREF: .text:0040DF21↓j
.text:0040DF03                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040DF09                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040DF0F                 jmp     short loc_40DE99
.text:0040DF11 ; ---------------------------------------------------------------------------
.text:0040DF11
.text:0040DF11 loc_40DF11:                             ; CODE XREF: .text:0040DF01↑j
.text:0040DF11                 mov     dword ptr [esp+4], offset loc_40D996
.text:0040DF19
.text:0040DF19 loc_40DF19:                             ; CODE XREF: .text:0040DF2B↓j
.text:0040DF19                 mov     [esp], ebx
.text:0040DF1C                 call    strcat
.text:0040DF21                 jmp     short loc_40DF03
.text:0040DF23 ; ---------------------------------------------------------------------------
.text:0040DF23
.text:0040DF23 loc_40DF23:                             ; CODE XREF: .text:0040DEF9↑j
.text:0040DF23                 mov     dword ptr [esp+4], 40D99Ah
.text:0040DF2B                 jmp     short loc_40DF19
.text:0040DF2B ; ---------------------------------------------------------------------------
.text:0040DF2D                 align 10h
.text:0040DF30
.text:0040DF30 loc_40DF30:                             ; CODE XREF: .text:0040DE79↑j
.text:0040DF30                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040DF36                 test    edx, edx
.text:0040DF38                 jnz     loc_40DE85
.text:0040DF3E                 mov     dword ptr [ebx], 7263694Dh
.text:0040DF44                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040DF4B                 mov     dword ptr [ebx+8], 69572074h
.text:0040DF52                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040DF59                 mov     dword ptr [ebx+10h], 35392073h
.text:0040DF60                 mov     byte ptr [ebx+14h], 0
.text:0040DF64                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040DF6A                 lea     ecx, [edx-3B7h]
.text:0040DF70                 cmp     ecx, 81h
.text:0040DF76                 jbe     short loc_40DF9D
.text:0040DF78                 cmp     edx, 438h
.text:0040DF7E                 ja      short loc_40DF8B
.text:0040DF80
.text:0040DF80 loc_40DF80:                             ; CODE XREF: .text:0040DF9B↓j
.text:0040DF80                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040DF86                 jmp     loc_40DE7F
.text:0040DF8B ; ---------------------------------------------------------------------------
.text:0040DF8B
.text:0040DF8B loc_40DF8B:                             ; CODE XREF: .text:0040DF7E↑j
.text:0040DF8B                 mov     dword ptr [esp+4], offset loc_40D99F
.text:0040DF93
.text:0040DF93 loc_40DF93:                             ; CODE XREF: .text:0040DFA5↓j
.text:0040DF93                 mov     [esp], ebx
.text:0040DF96                 call    strcat
.text:0040DF9B                 jmp     short loc_40DF80
.text:0040DF9D ; ---------------------------------------------------------------------------
.text:0040DF9D
.text:0040DF9D loc_40DF9D:                             ; CODE XREF: .text:0040DF76↑j
.text:0040DF9D                 mov     dword ptr [esp+4], 40D99Ah
.text:0040DFA5                 jmp     short loc_40DF93
.text:0040DFA5 ; ---------------------------------------------------------------------------
.text:0040DFA7                 align 10h
.text:0040DFB0
.text:0040DFB0 ; =============== S U B R O U T I N E =======================================
.text:0040DFB0
.text:0040DFB0
.text:0040DFB0 sub_40DFB0      proc near               ; CODE XREF: .text:0040C4BE↑p
.text:0040DFB0                                         ; sub_40C940+12A↑p
.text:0040DFB0                 sub     esp, 0Ch
.text:0040DFB3                 call    sub_40E0C0
.text:0040DFB8                 mov     eax, ds:dword_415820
.text:0040DFBD                 add     esp, 0Ch
.text:0040DFC0                 retn
.text:0040DFC0 sub_40DFB0      endp
.text:0040DFC0
.text:0040DFC1 ; ---------------------------------------------------------------------------
.text:0040DFC1                 jmp     short loc_40DFD0
.text:0040DFC1 ; ---------------------------------------------------------------------------
.text:0040DFC3                 align 10h
.text:0040DFD0
.text:0040DFD0 loc_40DFD0:                             ; CODE XREF: .text:0040DFC1↑j
.text:0040DFD0                 sub     esp, 0Ch
.text:0040DFD3                 call    sub_40E0C0
.text:0040DFD8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040DFDD                 add     esp, 0Ch
.text:0040DFE0                 retn
.text:0040DFE1 ; ---------------------------------------------------------------------------
.text:0040DFE1                 jmp     short loc_40DFF0
.text:0040DFE1 ; ---------------------------------------------------------------------------
.text:0040DFE3                 align 10h
.text:0040DFF0
.text:0040DFF0 loc_40DFF0:                             ; CODE XREF: .text:0040DFE1↑j
.text:0040DFF0                 sub     esp, 0Ch
.text:0040DFF3                 call    sub_40E0C0
.text:0040DFF8                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040DFFD                 add     esp, 0Ch
.text:0040E000                 retn
.text:0040E001 ; ---------------------------------------------------------------------------
.text:0040E001                 jmp     short loc_40E010
.text:0040E001 ; ---------------------------------------------------------------------------
.text:0040E003                 align 10h
.text:0040E010
.text:0040E010 loc_40E010:                             ; CODE XREF: .text:0040E001↑j
.text:0040E010                 sub     esp, 0Ch
.text:0040E013                 call    sub_40E0C0
.text:0040E018                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040E01D                 add     esp, 0Ch
.text:0040E020                 retn
.text:0040E021 ; ---------------------------------------------------------------------------
.text:0040E021                 jmp     short loc_40E030
.text:0040E021 ; ---------------------------------------------------------------------------
.text:0040E023                 align 10h
.text:0040E030
.text:0040E030 loc_40E030:                             ; CODE XREF: .text:0040E021↑j
.text:0040E030                 sub     esp, 0Ch
.text:0040E033                 call    GetVersion
.text:0040E038                 shr     eax, 10h
.text:0040E03B                 add     esp, 0Ch
.text:0040E03E                 retn
.text:0040E03E ; ---------------------------------------------------------------------------
.text:0040E03F                 align 10h
.text:0040E040                 sub     esp, 0Ch
.text:0040E043                 call    sub_40E0C0
.text:0040E048                 xor     eax, eax
.text:0040E04A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040E051                 setz    al
.text:0040E054                 add     esp, 0Ch
.text:0040E057                 retn
.text:0040E057 ; ---------------------------------------------------------------------------
.text:0040E058                 align 10h
.text:0040E060
.text:0040E060 ; =============== S U B R O U T I N E =======================================
.text:0040E060
.text:0040E060
.text:0040E060 sub_40E060      proc near               ; CODE XREF: .text:loc_40BC30↑p
.text:0040E060                                         ; .text:loc_40C4A4↑p ...
.text:0040E060                 sub     esp, 0Ch
.text:0040E063                 call    sub_40E0C0
.text:0040E068                 xor     eax, eax
.text:0040E06A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040E071                 setz    al
.text:0040E074                 add     esp, 0Ch
.text:0040E077                 retn
.text:0040E077 sub_40E060      endp
.text:0040E077
.text:0040E077 ; ---------------------------------------------------------------------------
.text:0040E078                 align 10h
.text:0040E080                 sub     esp, 0Ch
.text:0040E083                 call    sub_40E0C0
.text:0040E088                 xor     eax, eax
.text:0040E08A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040E091                 setz    al
.text:0040E094                 add     esp, 0Ch
.text:0040E097                 retn
.text:0040E097 ; ---------------------------------------------------------------------------
.text:0040E098                 align 10h
.text:0040E0A0                 sub     esp, 0Ch
.text:0040E0A3                 call    sub_40E0C0
.text:0040E0A8                 xor     eax, eax
.text:0040E0AA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040E0B1                 setz    al
.text:0040E0B4                 add     esp, 0Ch
.text:0040E0B7                 retn
.text:0040E0B7 ; ---------------------------------------------------------------------------
.text:0040E0B8                 align 10h
.text:0040E0C0
.text:0040E0C0 ; =============== S U B R O U T I N E =======================================
.text:0040E0C0
.text:0040E0C0
.text:0040E0C0 sub_40E0C0      proc near               ; CODE XREF: .text:0040D9C0↑p
.text:0040E0C0                                         ; sub_40DFB0+3↑p ...
.text:0040E0C0
.text:0040E0C0 lpVersionInformation= dword ptr -0BCh
.text:0040E0C0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040E0C0
.text:0040E0C0                 sub     esp, 0BCh
.text:0040E0C6                 mov     edx, ds:dword_4158D0
.text:0040E0CC                 test    edx, edx
.text:0040E0CE                 jz      short loc_40E0E0
.text:0040E0D0
.text:0040E0D0 loc_40E0D0:                             ; CODE XREF: sub_40E0C0+7B↓j
.text:0040E0D0                 mov     edx, 1
.text:0040E0D5
.text:0040E0D5 loc_40E0D5:                             ; CODE XREF: sub_40E0C0+217↓j
.text:0040E0D5                 mov     eax, edx
.text:0040E0D7                 add     esp, 0BCh
.text:0040E0DD                 retn
.text:0040E0DD ; ---------------------------------------------------------------------------
.text:0040E0DE                 align 10h
.text:0040E0E0
.text:0040E0E0 loc_40E0E0:                             ; CODE XREF: sub_40E0C0+E↑j
.text:0040E0E0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040E0E7                 mov     edx, 9Ch ; 'œ'
.text:0040E0EC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040E0F2                 call    GetVersionExA
.text:0040E0F7                 sub     esp, 4
.text:0040E0FA                 test    eax, eax
.text:0040E0FC                 jz      loc_40E2B4
.text:0040E102
.text:0040E102 loc_40E102:                             ; CODE XREF: sub_40E0C0+245↓j
.text:0040E102                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040E109                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040E10E                 cmp     eax, 1
.text:0040E111                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040E117                 jz      loc_40E200
.text:0040E11D                 cmp     eax, 1
.text:0040E120                 jb      loc_40E1F0
.text:0040E126                 cmp     eax, 2
.text:0040E129                 jz      short loc_40E14A
.text:0040E12B                 cmp     eax, 3
.text:0040E12E                 jz      short loc_40E13D
.text:0040E130
.text:0040E130 loc_40E130:                             ; CODE XREF: sub_40E0C0+88↓j
.text:0040E130                                         ; sub_40E0C0+C0↓j ...
.text:0040E130                 mov     edx, 1
.text:0040E135                 mov     ds:dword_4158D0, edx
.text:0040E13B                 jmp     short loc_40E0D0
.text:0040E13D ; ---------------------------------------------------------------------------
.text:0040E13D
.text:0040E13D loc_40E13D:                             ; CODE XREF: sub_40E0C0+6E↑j
.text:0040E13D                 mov     ecx, 17h
.text:0040E142
.text:0040E142 loc_40E142:                             ; CODE XREF: sub_40E0C0+1A7↓j
.text:0040E142                 mov     ds:dword_415820, ecx
.text:0040E148                 jmp     short loc_40E130
.text:0040E14A ; ---------------------------------------------------------------------------
.text:0040E14A
.text:0040E14A loc_40E14A:                             ; CODE XREF: sub_40E0C0+69↑j
.text:0040E14A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040E14F                 cmp     eax, 3
.text:0040E152                 jz      short loc_40E1CB
.text:0040E154                 cmp     eax, 4
.text:0040E157                 jz      short loc_40E1BA
.text:0040E159
.text:0040E159 loc_40E159:                             ; CODE XREF: sub_40E0C0+102↓j
.text:0040E159                 cmp     eax, 4
.text:0040E15C                 ja      short loc_40E182
.text:0040E15E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040E164                 test    ecx, ecx
.text:0040E166                 jnz     short loc_40E182
.text:0040E168                 mov     edx, 1Eh
.text:0040E16D
.text:0040E16D loc_40E16D:                             ; CODE XREF: sub_40E0C0+DF↓j
.text:0040E16D                 mov     ds:dword_415820, edx
.text:0040E173
.text:0040E173 loc_40E173:                             ; CODE XREF: sub_40E0C0+C5↓j
.text:0040E173                                         ; sub_40E0C0+D8↓j ...
.text:0040E173                 movzx   ecx, ds:word_4158C4
.text:0040E17A                 add     ds:dword_415820, ecx
.text:0040E180                 jmp     short loc_40E130
.text:0040E182 ; ---------------------------------------------------------------------------
.text:0040E182
.text:0040E182 loc_40E182:                             ; CODE XREF: sub_40E0C0+9C↑j
.text:0040E182                                         ; sub_40E0C0+A6↑j
.text:0040E182                 cmp     eax, 5
.text:0040E185                 jnz     short loc_40E173
.text:0040E187                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040E18C                 cmp     eax, 2
.text:0040E18F                 jz      short loc_40E1AE
.text:0040E191                 cmp     eax, 1
.text:0040E194                 jz      short loc_40E1A1
.text:0040E196                 test    eax, eax
.text:0040E198                 jnz     short loc_40E173
.text:0040E19A                 mov     edx, 32h ; '2'
.text:0040E19F                 jmp     short loc_40E16D
.text:0040E1A1 ; ---------------------------------------------------------------------------
.text:0040E1A1
.text:0040E1A1 loc_40E1A1:                             ; CODE XREF: sub_40E0C0+D4↑j
.text:0040E1A1                 mov     ecx, 3Ch ; '<'
.text:0040E1A6
.text:0040E1A6 loc_40E1A6:                             ; CODE XREF: sub_40E0C0+122↓j
.text:0040E1A6                 mov     ds:dword_415820, ecx
.text:0040E1AC                 jmp     short loc_40E173
.text:0040E1AE ; ---------------------------------------------------------------------------
.text:0040E1AE
.text:0040E1AE loc_40E1AE:                             ; CODE XREF: sub_40E0C0+CF↑j
.text:0040E1AE                 mov     eax, 46h ; 'F'
.text:0040E1B3
.text:0040E1B3 loc_40E1B3:                             ; CODE XREF: sub_40E0C0+109↓j
.text:0040E1B3                                         ; sub_40E0C0+129↓j
.text:0040E1B3                 mov     ds:dword_415820, eax
.text:0040E1B8                 jmp     short loc_40E173
.text:0040E1BA ; ---------------------------------------------------------------------------
.text:0040E1BA
.text:0040E1BA loc_40E1BA:                             ; CODE XREF: sub_40E0C0+97↑j
.text:0040E1BA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040E1C0                 test    ecx, ecx
.text:0040E1C2                 jnz     short loc_40E159
.text:0040E1C4                 mov     eax, 28h ; '('
.text:0040E1C9                 jmp     short loc_40E1B3
.text:0040E1CB ; ---------------------------------------------------------------------------
.text:0040E1CB
.text:0040E1CB loc_40E1CB:                             ; CODE XREF: sub_40E0C0+92↑j
.text:0040E1CB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040E1D0                 cmp     eax, 33h ; '3'
.text:0040E1D3                 jz      short loc_40E1E4
.text:0040E1D5                 cmp     eax, 5
.text:0040E1D8                 setz    cl
.text:0040E1DB                 movzx   edx, cl
.text:0040E1DE                 lea     ecx, [edx+edx*4+1Eh]
.text:0040E1E2                 jmp     short loc_40E1A6
.text:0040E1E4 ; ---------------------------------------------------------------------------
.text:0040E1E4
.text:0040E1E4 loc_40E1E4:                             ; CODE XREF: sub_40E0C0+113↑j
.text:0040E1E4                 mov     eax, 24h ; '$'
.text:0040E1E9                 jmp     short loc_40E1B3
.text:0040E1E9 ; ---------------------------------------------------------------------------
.text:0040E1EB                 align 10h
.text:0040E1F0
.text:0040E1F0 loc_40E1F0:                             ; CODE XREF: sub_40E0C0+60↑j
.text:0040E1F0                 mov     edx, 2
.text:0040E1F5                 mov     ds:dword_415820, edx
.text:0040E1FB                 jmp     loc_40E130
.text:0040E200 ; ---------------------------------------------------------------------------
.text:0040E200
.text:0040E200 loc_40E200:                             ; CODE XREF: sub_40E0C0+57↑j
.text:0040E200                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040E206                 cmp     ecx, 4
.text:0040E209                 jnz     loc_40E130
.text:0040E20F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040E214                 test    eax, eax
.text:0040E216                 jnz     short loc_40E23A
.text:0040E218                 mov     eax, 0Ah
.text:0040E21D                 mov     ds:dword_415820, eax
.text:0040E222                 lea     eax, [edx-3B7h]
.text:0040E228                 cmp     eax, 81h
.text:0040E22D                 ja      short loc_40E2A5
.text:0040E22F                 mov     edx, 0Bh
.text:0040E234
.text:0040E234 loc_40E234:                             ; CODE XREF: sub_40E0C0+1F2↓j
.text:0040E234                 mov     ds:dword_415820, edx
.text:0040E23A
.text:0040E23A loc_40E23A:                             ; CODE XREF: sub_40E0C0+156↑j
.text:0040E23A                                         ; sub_40E0C0+1EB↓j
.text:0040E23A                 cmp     ecx, 4
.text:0040E23D                 jnz     loc_40E130
.text:0040E243                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040E24A                 jz      short loc_40E26C
.text:0040E24C
.text:0040E24C loc_40E24C:                             ; CODE XREF: sub_40E0C0+1D4↓j
.text:0040E24C                                         ; sub_40E0C0+1DC↓j
.text:0040E24C                 cmp     ecx, 4
.text:0040E24F                 jnz     loc_40E130
.text:0040E255                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040E25C                 jnz     loc_40E130
.text:0040E262                 mov     ecx, 12h
.text:0040E267                 jmp     loc_40E142
.text:0040E26C ; ---------------------------------------------------------------------------
.text:0040E26C
.text:0040E26C loc_40E26C:                             ; CODE XREF: sub_40E0C0+18A↑j
.text:0040E26C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040E272                 mov     eax, 0Eh
.text:0040E277                 mov     ds:dword_415820, eax
.text:0040E27C                 lea     eax, [edx-7CFh]
.text:0040E282                 cmp     eax, 0B7h ; '·'
.text:0040E287                 ja      short loc_40E296
.text:0040E289                 mov     edx, 0Fh
.text:0040E28E
.text:0040E28E loc_40E28E:                             ; CODE XREF: sub_40E0C0+1E3↓j
.text:0040E28E                 mov     ds:dword_415820, edx
.text:0040E294                 jmp     short loc_40E24C
.text:0040E296 ; ---------------------------------------------------------------------------
.text:0040E296
.text:0040E296 loc_40E296:                             ; CODE XREF: sub_40E0C0+1C7↑j
.text:0040E296                 cmp     edx, 886h
.text:0040E29C                 jbe     short loc_40E24C
.text:0040E29E                 mov     edx, 10h
.text:0040E2A3                 jmp     short loc_40E28E
.text:0040E2A5 ; ---------------------------------------------------------------------------
.text:0040E2A5
.text:0040E2A5 loc_40E2A5:                             ; CODE XREF: sub_40E0C0+16D↑j
.text:0040E2A5                 cmp     edx, 438h
.text:0040E2AB                 jbe     short loc_40E23A
.text:0040E2AD                 mov     edx, 0Ch
.text:0040E2B2                 jmp     short loc_40E234
.text:0040E2B4 ; ---------------------------------------------------------------------------
.text:0040E2B4
.text:0040E2B4 loc_40E2B4:                             ; CODE XREF: sub_40E0C0+3C↑j
.text:0040E2B4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040E2BC                 xor     edx, edx
.text:0040E2BE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040E2C2                 mov     dword_414070, edx
.text:0040E2C8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040E2CB                 call    GetVersionExA
.text:0040E2D0                 sub     esp, 4
.text:0040E2D3                 xor     edx, edx
.text:0040E2D5                 test    eax, eax
.text:0040E2D7                 jz      loc_40E0D5
.text:0040E2DD                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040E2E1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040E2E5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040E2EB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040E2EF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040E2F5                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040E2F9                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040E2FF                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040E305                 jmp     loc_40E102
.text:0040E305 sub_40E0C0      endp
.text:0040E305
.text:0040E305 ; ---------------------------------------------------------------------------
.text:0040E30A                 align 10h
.text:0040E310 aNotset         db 'notset',0           ; DATA XREF: .data:off_414080↓o
.text:0040E310                                         ; .data:off_414084↓o
.text:0040E317 ; ---------------------------------------------------------------------------
.text:0040E317
.text:0040E317 loc_40E317:                             ; DATA XREF: .text:loc_40E3B5↓o
.text:0040E317                 jb      short loc_40E390
.text:0040E319                 add     [eax], ah
.text:0040E31B                 or      [eax], eax
.text:0040E31D
.text:0040E31D loc_40E31D:                             ; DATA XREF: .text:0040E408↓o
.text:0040E31D                                         ; .text:0040E46E↓o ...
.text:0040E31D                 add     [eax], ah
.text:0040E31F                 and     eax, 64252064h
.text:0040E324                 and     [eax], al
.text:0040E326                 lea     esi, [esi+0]
.text:0040E329                 lea     edi, [edi+0]
.text:0040E330                 push    ebp
.text:0040E331                 push    edi
.text:0040E332                 push    esi
.text:0040E333                 push    ebx
.text:0040E334                 sub     esp, 14Ch
.text:0040E33A                 mov     edx, off_414080 ; "notset"
.text:0040E340                 mov     edi, [esp+164h]
.text:0040E347                 mov     ebp, [esp+168h]
.text:0040E34E                 mov     [esp+4], edx
.text:0040E352                 mov     edx, off_414084 ; "notset"
.text:0040E358                 mov     [esp], edx
.text:0040E35B                 call    strcmp
.text:0040E360                 test    eax, eax
.text:0040E362                 jz      loc_40E750
.text:0040E368
.text:0040E368 loc_40E368:                             ; CODE XREF: .text:0040E79C↓j
.text:0040E368                 lea     ebx, [esp+20h]
.text:0040E36C                 lea     esi, [esi+0]
.text:0040E370
.text:0040E370 loc_40E370:                             ; CODE XREF: .text:0040E3A6↓j
.text:0040E370                 mov     [esp+4], ebx
.text:0040E374                 mov     ecx, off_414084 ; "notset"
.text:0040E37A                 mov     [esp], ecx
.text:0040E37D                 call    loc_40C9E0
.text:0040E382                 test    eax, eax
.text:0040E384                 jns     short loc_40E3B5
.text:0040E386                 mov     eax, off_414084 ; "notset"
.text:0040E38B                 cmp     byte ptr [eax], 0
.text:0040E38E                 jz      short loc_40E3A8
.text:0040E390
.text:0040E390 loc_40E390:                             ; CODE XREF: .text:loc_40E317↑j
.text:0040E390                 mov     dword ptr [esp+4], 0
.text:0040E398                 mov     [esp], eax
.text:0040E39B                 call    strchr
.text:0040E3A0                 inc     eax
.text:0040E3A1                 mov     off_414084, eax ; "notset"
.text:0040E3A6                 jmp     short loc_40E370
.text:0040E3A8 ; ---------------------------------------------------------------------------
.text:0040E3A8
.text:0040E3A8 loc_40E3A8:                             ; CODE XREF: .text:0040E38E↑j
.text:0040E3A8                 xor     eax, eax
.text:0040E3AA
.text:0040E3AA loc_40E3AA:                             ; CODE XREF: .text:0040E56C↓j
.text:0040E3AA                 add     esp, 14Ch
.text:0040E3B0                 pop     ebx
.text:0040E3B1                 pop     esi
.text:0040E3B2                 pop     edi
.text:0040E3B3                 pop     ebp
.text:0040E3B4                 retn
.text:0040E3B5 ; ---------------------------------------------------------------------------
.text:0040E3B5
.text:0040E3B5 loc_40E3B5:                             ; CODE XREF: .text:0040E384↑j
.text:0040E3B5                 mov     dword ptr [edi+0Ch], offset loc_40E317
.text:0040E3BC                 lea     ecx, [esp+0D6h]
.text:0040E3C3                 lea     edx, [esp+6Ch]
.text:0040E3C7                 mov     [edi+4], ecx
.text:0040E3CA                 lea     ebx, [esp+7Ch]
.text:0040E3CE                 mov     [edi+8], edx
.text:0040E3D1                 mov     [edi], ebx
.text:0040E3D3                 mov     [esp], ebp
.text:0040E3D6                 mov     [esp+4], edi
.text:0040E3DA                 call    ___addmntentstr
.text:0040E3DF                 mov     [esp], ebp
.text:0040E3E2                 mov     dword ptr [esp+4], 40E31Ah
.text:0040E3EA                 call    strspn
.text:0040E3EF                 mov     dword ptr [esp+4], 0
.text:0040E3F7                 mov     ebx, off_414084 ; "notset"
.text:0040E3FD                 lea     esi, [eax+ebp]
.text:0040E400                 mov     [esp+1Ch], esi
.text:0040E404                 lea     ebp, [esp+1Ch]
.text:0040E408                 mov     esi, offset loc_40E31D
.text:0040E40D                 mov     [esp], ebx
.text:0040E410                 call    strchr
.text:0040E415                 mov     dword ptr [esp+4], 40E31Ah
.text:0040E41D                 inc     eax
.text:0040E41E                 mov     off_414084, eax ; "notset"
.text:0040E423                 mov     [esp], ebp
.text:0040E426                 call    sub_40FB90
.text:0040E42B                 test    eax, eax
.text:0040E42D                 mov     ebx, eax
.text:0040E42F                 jz      short loc_40E458
.text:0040E431                 mov     edx, eax
.text:0040E433                 mov     ecx, eax
.text:0040E435                 lea     esi, [esi+0]
.text:0040E439                 lea     edi, [edi+0]
.text:0040E440
.text:0040E440 loc_40E440:                             ; CODE XREF: .text:0040E456↓j
.text:0040E440                 movzx   eax, byte ptr [edx]
.text:0040E443                 cmp     al, 5Ch ; '\'
.text:0040E445                 jz      loc_40E6F4
.text:0040E44B
.text:0040E44B loc_40E44B:                             ; CODE XREF: .text:0040E6FC↓j
.text:0040E44B                                         ; .text:0040E70A↓j ...
.text:0040E44B                 mov     [ecx], al
.text:0040E44D
.text:0040E44D loc_40E44D:                             ; CODE XREF: .text:0040E71E↓j
.text:0040E44D                 inc     ecx
.text:0040E44E
.text:0040E44E loc_40E44E:                             ; CODE XREF: .text:0040E736↓j
.text:0040E44E                 movzx   eax, byte ptr [edx]
.text:0040E451                 mov     esi, ebx
.text:0040E453                 inc     edx
.text:0040E454                 test    al, al
.text:0040E456                 jnz     short loc_40E440
.text:0040E458
.text:0040E458 loc_40E458:                             ; CODE XREF: .text:0040E42F↑j
.text:0040E458                 mov     [edi], esi
.text:0040E45A                 mov     eax, [esp+1Ch]
.text:0040E45E                 test    eax, eax
.text:0040E460                 jnz     loc_40E6DB
.text:0040E466
.text:0040E466 loc_40E466:                             ; CODE XREF: .text:0040E6EF↓j
.text:0040E466                 mov     dword ptr [esp+4], 40E31Ah
.text:0040E46E                 mov     esi, offset loc_40E31D
.text:0040E473                 mov     [esp], ebp
.text:0040E476                 call    sub_40FB90
.text:0040E47B                 test    eax, eax
.text:0040E47D                 mov     ebx, eax
.text:0040E47F                 jz      short loc_40E4A8
.text:0040E481                 mov     edx, eax
.text:0040E483                 mov     ecx, eax
.text:0040E485                 lea     esi, [esi+0]
.text:0040E489                 lea     edi, [edi+0]
.text:0040E490
.text:0040E490 loc_40E490:                             ; CODE XREF: .text:0040E4A6↓j
.text:0040E490                 movzx   eax, byte ptr [edx]
.text:0040E493                 cmp     al, 5Ch ; '\'
.text:0040E495                 jz      loc_40E683
.text:0040E49B
.text:0040E49B loc_40E49B:                             ; CODE XREF: .text:0040E68B↓j
.text:0040E49B                                         ; .text:0040E699↓j ...
.text:0040E49B                 mov     [ecx], al
.text:0040E49D
.text:0040E49D loc_40E49D:                             ; CODE XREF: .text:0040E6AD↓j
.text:0040E49D                 inc     ecx
.text:0040E49E
.text:0040E49E loc_40E49E:                             ; CODE XREF: .text:0040E6C5↓j
.text:0040E49E                 movzx   eax, byte ptr [edx]
.text:0040E4A1                 mov     esi, ebx
.text:0040E4A3                 inc     edx
.text:0040E4A4                 test    al, al
.text:0040E4A6                 jnz     short loc_40E490
.text:0040E4A8
.text:0040E4A8 loc_40E4A8:                             ; CODE XREF: .text:0040E47F↑j
.text:0040E4A8                 mov     [edi+4], esi
.text:0040E4AB                 mov     eax, [esp+1Ch]
.text:0040E4AF                 test    eax, eax
.text:0040E4B1                 jnz     loc_40E66A
.text:0040E4B7
.text:0040E4B7 loc_40E4B7:                             ; CODE XREF: .text:0040E67E↓j
.text:0040E4B7                 mov     dword ptr [esp+4], 40E31Ah
.text:0040E4BF                 mov     esi, offset loc_40E31D
.text:0040E4C4                 mov     [esp], ebp
.text:0040E4C7                 call    sub_40FB90
.text:0040E4CC                 test    eax, eax
.text:0040E4CE                 mov     ebx, eax
.text:0040E4D0                 jz      short loc_40E4F8
.text:0040E4D2                 mov     edx, eax
.text:0040E4D4                 mov     ecx, eax
.text:0040E4D6                 lea     esi, [esi+0]
.text:0040E4D9                 lea     edi, [edi+0]
.text:0040E4E0
.text:0040E4E0 loc_40E4E0:                             ; CODE XREF: .text:0040E4F6↓j
.text:0040E4E0                 movzx   eax, byte ptr [edx]
.text:0040E4E3                 cmp     al, 5Ch ; '\'
.text:0040E4E5                 jz      loc_40E612
.text:0040E4EB
.text:0040E4EB loc_40E4EB:                             ; CODE XREF: .text:0040E61A↓j
.text:0040E4EB                                         ; .text:0040E628↓j ...
.text:0040E4EB                 mov     [ecx], al
.text:0040E4ED
.text:0040E4ED loc_40E4ED:                             ; CODE XREF: .text:0040E63C↓j
.text:0040E4ED                 inc     ecx
.text:0040E4EE
.text:0040E4EE loc_40E4EE:                             ; CODE XREF: .text:0040E654↓j
.text:0040E4EE                 movzx   eax, byte ptr [edx]
.text:0040E4F1                 mov     esi, ebx
.text:0040E4F3                 inc     edx
.text:0040E4F4                 test    al, al
.text:0040E4F6                 jnz     short loc_40E4E0
.text:0040E4F8
.text:0040E4F8 loc_40E4F8:                             ; CODE XREF: .text:0040E4D0↑j
.text:0040E4F8                 mov     [edi+8], esi
.text:0040E4FB                 mov     eax, [esp+1Ch]
.text:0040E4FF                 test    eax, eax
.text:0040E501                 jnz     loc_40E5F9
.text:0040E507
.text:0040E507 loc_40E507:                             ; CODE XREF: .text:0040E60D↓j
.text:0040E507                 mov     dword ptr [esp+4], 40E31Ah
.text:0040E50F                 mov     esi, offset loc_40E31D
.text:0040E514                 mov     [esp], ebp
.text:0040E517                 call    sub_40FB90
.text:0040E51C                 test    eax, eax
.text:0040E51E                 mov     ebx, eax
.text:0040E520                 jz      short loc_40E544
.text:0040E522                 mov     edx, eax
.text:0040E524                 mov     ecx, eax
.text:0040E526                 lea     esi, [esi+0]
.text:0040E529                 lea     edi, [edi+0]
.text:0040E530
.text:0040E530 loc_40E530:                             ; CODE XREF: .text:0040E542↓j
.text:0040E530                 movzx   eax, byte ptr [edx]
.text:0040E533                 cmp     al, 5Ch ; '\'
.text:0040E535                 jz      short loc_40E5A5
.text:0040E537
.text:0040E537 loc_40E537:                             ; CODE XREF: .text:0040E5AD↓j
.text:0040E537                                         ; .text:0040E5B7↓j ...
.text:0040E537                 mov     [ecx], al
.text:0040E539
.text:0040E539 loc_40E539:                             ; CODE XREF: .text:0040E5CB↓j
.text:0040E539                 inc     ecx
.text:0040E53A
.text:0040E53A loc_40E53A:                             ; CODE XREF: .text:0040E5E3↓j
.text:0040E53A                 movzx   eax, byte ptr [edx]
.text:0040E53D                 mov     esi, ebx
.text:0040E53F                 inc     edx
.text:0040E540                 test    al, al
.text:0040E542                 jnz     short loc_40E530
.text:0040E544
.text:0040E544 loc_40E544:                             ; CODE XREF: .text:0040E520↑j
.text:0040E544                 mov     [edi+0Ch], esi
.text:0040E547                 xor     eax, eax
.text:0040E549                 mov     edx, [esp+1Ch]
.text:0040E54D                 test    edx, edx
.text:0040E54F                 jnz     short loc_40E585
.text:0040E551
.text:0040E551 loc_40E551:                             ; CODE XREF: .text:0040E5A3↓j
.text:0040E551                 cmp     eax, 1
.text:0040E554                 jz      short loc_40E57C
.text:0040E556                 cmp     eax, 1
.text:0040E559                 jle     short loc_40E571
.text:0040E55B
.text:0040E55B loc_40E55B:                             ; CODE XREF: .text:0040E573↓j
.text:0040E55B                                         ; .text:0040E583↓j
.text:0040E55B                 mov     edx, [esp+160h]
.text:0040E562                 mov     [esp], edx
.text:0040E565                 call    sub_40FB30
.text:0040E56A                 mov     eax, edi
.text:0040E56C                 jmp     loc_40E3AA
.text:0040E571 ; ---------------------------------------------------------------------------
.text:0040E571
.text:0040E571 loc_40E571:                             ; CODE XREF: .text:0040E559↑j
.text:0040E571                 test    eax, eax
.text:0040E573                 jnz     short loc_40E55B
.text:0040E575                 mov     dword ptr [edi+10h], 0
.text:0040E57C
.text:0040E57C loc_40E57C:                             ; CODE XREF: .text:0040E554↑j
.text:0040E57C                 mov     dword ptr [edi+14h], 0
.text:0040E583                 jmp     short loc_40E55B
.text:0040E585 ; ---------------------------------------------------------------------------
.text:0040E585
.text:0040E585 loc_40E585:                             ; CODE XREF: .text:0040E54F↑j
.text:0040E585                 mov     dword ptr [esp+4], 40E31Eh
.text:0040E58D                 lea     esi, [edi+14h]
.text:0040E590                 lea     ebp, [edi+10h]
.text:0040E593                 mov     [esp+0Ch], esi
.text:0040E597                 mov     [esp+8], ebp
.text:0040E59B                 mov     [esp], edx
.text:0040E59E                 call    sscanf
.text:0040E5A3                 jmp     short loc_40E551
.text:0040E5A5 ; ---------------------------------------------------------------------------
.text:0040E5A5
.text:0040E5A5 loc_40E5A5:                             ; CODE XREF: .text:0040E535↑j
.text:0040E5A5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E5A9                 jz      short loc_40E5E8
.text:0040E5AB
.text:0040E5AB loc_40E5AB:                             ; CODE XREF: .text:0040E5EC↓j
.text:0040E5AB                                         ; .text:0040E5F2↓j
.text:0040E5AB                 cmp     al, 5Ch ; '\'
.text:0040E5AD                 jnz     short loc_40E537
.text:0040E5AF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E5B3                 jz      short loc_40E5D0
.text:0040E5B5
.text:0040E5B5 loc_40E5B5:                             ; CODE XREF: .text:0040E5D4↓j
.text:0040E5B5                                         ; .text:0040E5DA↓j
.text:0040E5B5                 cmp     al, 5Ch ; '\'
.text:0040E5B7                 jnz     loc_40E537
.text:0040E5BD                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040E5C1                 jnz     loc_40E537
.text:0040E5C7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040E5CA                 inc     edx
.text:0040E5CB                 jmp     loc_40E539
.text:0040E5D0 ; ---------------------------------------------------------------------------
.text:0040E5D0
.text:0040E5D0 loc_40E5D0:                             ; CODE XREF: .text:0040E5B3↑j
.text:0040E5D0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040E5D4                 jnz     short loc_40E5B5
.text:0040E5D6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040E5DA                 jnz     short loc_40E5B5
.text:0040E5DC                 mov     byte ptr [ecx], 9
.text:0040E5DF
.text:0040E5DF loc_40E5DF:                             ; CODE XREF: .text:0040E5F7↓j
.text:0040E5DF                 inc     ecx
.text:0040E5E0                 add     edx, 3
.text:0040E5E3                 jmp     loc_40E53A
.text:0040E5E8 ; ---------------------------------------------------------------------------
.text:0040E5E8
.text:0040E5E8 loc_40E5E8:                             ; CODE XREF: .text:0040E5A9↑j
.text:0040E5E8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040E5EC                 jnz     short loc_40E5AB
.text:0040E5EE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040E5F2                 jnz     short loc_40E5AB
.text:0040E5F4                 mov     byte ptr [ecx], 20h ; ' '
.text:0040E5F7                 jmp     short loc_40E5DF
.text:0040E5F9 ; ---------------------------------------------------------------------------
.text:0040E5F9
.text:0040E5F9 loc_40E5F9:                             ; CODE XREF: .text:0040E501↑j
.text:0040E5F9                 mov     dword ptr [esp+4], 40E31Ah
.text:0040E601                 mov     [esp], eax
.text:0040E604                 call    strspn
.text:0040E609                 add     [esp+1Ch], eax
.text:0040E60D                 jmp     loc_40E507
.text:0040E612 ; ---------------------------------------------------------------------------
.text:0040E612
.text:0040E612 loc_40E612:                             ; CODE XREF: .text:0040E4E5↑j
.text:0040E612                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E616                 jz      short loc_40E659
.text:0040E618
.text:0040E618 loc_40E618:                             ; CODE XREF: .text:0040E65D↓j
.text:0040E618                                         ; .text:0040E663↓j
.text:0040E618                 cmp     al, 5Ch ; '\'
.text:0040E61A                 jnz     loc_40E4EB
.text:0040E620                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E624                 jz      short loc_40E641
.text:0040E626
.text:0040E626 loc_40E626:                             ; CODE XREF: .text:0040E645↓j
.text:0040E626                                         ; .text:0040E64B↓j
.text:0040E626                 cmp     al, 5Ch ; '\'
.text:0040E628                 jnz     loc_40E4EB
.text:0040E62E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040E632                 jnz     loc_40E4EB
.text:0040E638                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040E63B                 inc     edx
.text:0040E63C                 jmp     loc_40E4ED
.text:0040E641 ; ---------------------------------------------------------------------------
.text:0040E641
.text:0040E641 loc_40E641:                             ; CODE XREF: .text:0040E624↑j
.text:0040E641                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040E645                 jnz     short loc_40E626
.text:0040E647                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040E64B                 jnz     short loc_40E626
.text:0040E64D                 mov     byte ptr [ecx], 9
.text:0040E650
.text:0040E650 loc_40E650:                             ; CODE XREF: .text:0040E668↓j
.text:0040E650                 inc     ecx
.text:0040E651                 add     edx, 3
.text:0040E654                 jmp     loc_40E4EE
.text:0040E659 ; ---------------------------------------------------------------------------
.text:0040E659
.text:0040E659 loc_40E659:                             ; CODE XREF: .text:0040E616↑j
.text:0040E659                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040E65D                 jnz     short loc_40E618
.text:0040E65F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040E663                 jnz     short loc_40E618
.text:0040E665                 mov     byte ptr [ecx], 20h ; ' '
.text:0040E668                 jmp     short loc_40E650
.text:0040E66A ; ---------------------------------------------------------------------------
.text:0040E66A
.text:0040E66A loc_40E66A:                             ; CODE XREF: .text:0040E4B1↑j
.text:0040E66A                 mov     dword ptr [esp+4], 40E31Ah
.text:0040E672                 mov     [esp], eax
.text:0040E675                 call    strspn
.text:0040E67A                 add     [esp+1Ch], eax
.text:0040E67E                 jmp     loc_40E4B7
.text:0040E683 ; ---------------------------------------------------------------------------
.text:0040E683
.text:0040E683 loc_40E683:                             ; CODE XREF: .text:0040E495↑j
.text:0040E683                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E687                 jz      short loc_40E6CA
.text:0040E689
.text:0040E689 loc_40E689:                             ; CODE XREF: .text:0040E6CE↓j
.text:0040E689                                         ; .text:0040E6D4↓j
.text:0040E689                 cmp     al, 5Ch ; '\'
.text:0040E68B                 jnz     loc_40E49B
.text:0040E691                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E695                 jz      short loc_40E6B2
.text:0040E697
.text:0040E697 loc_40E697:                             ; CODE XREF: .text:0040E6B6↓j
.text:0040E697                                         ; .text:0040E6BC↓j
.text:0040E697                 cmp     al, 5Ch ; '\'
.text:0040E699                 jnz     loc_40E49B
.text:0040E69F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040E6A3                 jnz     loc_40E49B
.text:0040E6A9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040E6AC                 inc     edx
.text:0040E6AD                 jmp     loc_40E49D
.text:0040E6B2 ; ---------------------------------------------------------------------------
.text:0040E6B2
.text:0040E6B2 loc_40E6B2:                             ; CODE XREF: .text:0040E695↑j
.text:0040E6B2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040E6B6                 jnz     short loc_40E697
.text:0040E6B8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040E6BC                 jnz     short loc_40E697
.text:0040E6BE                 mov     byte ptr [ecx], 9
.text:0040E6C1
.text:0040E6C1 loc_40E6C1:                             ; CODE XREF: .text:0040E6D9↓j
.text:0040E6C1                 inc     ecx
.text:0040E6C2                 add     edx, 3
.text:0040E6C5                 jmp     loc_40E49E
.text:0040E6CA ; ---------------------------------------------------------------------------
.text:0040E6CA
.text:0040E6CA loc_40E6CA:                             ; CODE XREF: .text:0040E687↑j
.text:0040E6CA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040E6CE                 jnz     short loc_40E689
.text:0040E6D0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040E6D4                 jnz     short loc_40E689
.text:0040E6D6                 mov     byte ptr [ecx], 20h ; ' '
.text:0040E6D9                 jmp     short loc_40E6C1
.text:0040E6DB ; ---------------------------------------------------------------------------
.text:0040E6DB
.text:0040E6DB loc_40E6DB:                             ; CODE XREF: .text:0040E460↑j
.text:0040E6DB                 mov     dword ptr [esp+4], 40E31Ah
.text:0040E6E3                 mov     [esp], eax
.text:0040E6E6                 call    strspn
.text:0040E6EB                 add     [esp+1Ch], eax
.text:0040E6EF                 jmp     loc_40E466
.text:0040E6F4 ; ---------------------------------------------------------------------------
.text:0040E6F4
.text:0040E6F4 loc_40E6F4:                             ; CODE XREF: .text:0040E445↑j
.text:0040E6F4                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E6F8                 jz      short loc_40E73B
.text:0040E6FA
.text:0040E6FA loc_40E6FA:                             ; CODE XREF: .text:0040E73F↓j
.text:0040E6FA                                         ; .text:0040E745↓j
.text:0040E6FA                 cmp     al, 5Ch ; '\'
.text:0040E6FC                 jnz     loc_40E44B
.text:0040E702                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040E706                 jz      short loc_40E723
.text:0040E708
.text:0040E708 loc_40E708:                             ; CODE XREF: .text:0040E727↓j
.text:0040E708                                         ; .text:0040E72D↓j
.text:0040E708                 cmp     al, 5Ch ; '\'
.text:0040E70A                 jnz     loc_40E44B
.text:0040E710                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040E714                 jnz     loc_40E44B
.text:0040E71A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040E71D                 inc     edx
.text:0040E71E                 jmp     loc_40E44D
.text:0040E723 ; ---------------------------------------------------------------------------
.text:0040E723
.text:0040E723 loc_40E723:                             ; CODE XREF: .text:0040E706↑j
.text:0040E723                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040E727                 jnz     short loc_40E708
.text:0040E729                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040E72D                 jnz     short loc_40E708
.text:0040E72F                 mov     byte ptr [ecx], 9
.text:0040E732
.text:0040E732 loc_40E732:                             ; CODE XREF: .text:0040E74A↓j
.text:0040E732                 inc     ecx
.text:0040E733                 add     edx, 3
.text:0040E736                 jmp     loc_40E44E
.text:0040E73B ; ---------------------------------------------------------------------------
.text:0040E73B
.text:0040E73B loc_40E73B:                             ; CODE XREF: .text:0040E6F8↑j
.text:0040E73B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040E73F                 jnz     short loc_40E6FA
.text:0040E741                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040E745                 jnz     short loc_40E6FA
.text:0040E747                 mov     byte ptr [ecx], 20h ; ' '
.text:0040E74A                 jmp     short loc_40E732
.text:0040E74A ; ---------------------------------------------------------------------------
.text:0040E74C                 align 10h
.text:0040E750
.text:0040E750 loc_40E750:                             ; CODE XREF: .text:0040E362↑j
.text:0040E750                 mov     dword ptr [esp+4], 0
.text:0040E758                 mov     dword ptr [esp], 0
.text:0040E75F                 call    GetLogicalDriveStringsA
.text:0040E764                 sub     esp, 8
.text:0040E767                 mov     ebx, eax
.text:0040E769                 call    GetProcessHeap
.text:0040E76E                 mov     [esp], eax
.text:0040E771                 mov     [esp+8], ebx
.text:0040E775                 mov     dword ptr [esp+4], 0
.text:0040E77D                 call    HeapAlloc
.text:0040E782                 sub     esp, 0Ch
.text:0040E785                 mov     esi, eax
.text:0040E787                 mov     [esp+4], eax
.text:0040E78B                 mov     [esp], ebx
.text:0040E78E                 call    GetLogicalDriveStringsA
.text:0040E793                 mov     off_414084, esi ; "notset"
.text:0040E799                 sub     esp, 8
.text:0040E79C                 jmp     loc_40E368
.text:0040E79C ; ---------------------------------------------------------------------------
.text:0040E7A1 ; const char aSSSSDD[]
.text:0040E7A1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040E7A1                                         ; DATA XREF: .text:0040E8E0↓o
.text:0040E7A1                                         ; ___addmntentstr+F0↓o
.text:0040E7B4                 align 10h
.text:0040E7C0                 push    esi
.text:0040E7C1                 push    ebx
.text:0040E7C2                 sub     esp, 44h
.text:0040E7C5                 mov     ebx, [esp+54h]
.text:0040E7C9                 mov     esi, [esp+50h]
.text:0040E7CD                 mov     edx, [ebx]
.text:0040E7CF                 mov     [esp+20h], edx
.text:0040E7D3                 mov     ecx, [ebx+4]
.text:0040E7D6                 mov     [esp+24h], ecx
.text:0040E7DA                 mov     edx, [ebx+8]
.text:0040E7DD                 mov     [esp+28h], edx
.text:0040E7E1                 mov     ecx, [ebx+0Ch]
.text:0040E7E4                 mov     [esp+2Ch], ecx
.text:0040E7E8                 mov     edx, [ebx+10h]
.text:0040E7EB                 mov     [esp+30h], edx
.text:0040E7EF                 mov     ecx, [ebx+14h]
.text:0040E7F2                 mov     dword ptr [esp+8], 2
.text:0040E7FA                 mov     dword ptr [esp+4], 0
.text:0040E802                 mov     [esp+34h], ecx
.text:0040E806                 mov     [esp], esi
.text:0040E809                 call    sub_40FB20
.text:0040E80E ; ---------------------------------------------------------------------------
.text:0040E80E                 test    eax, eax
.text:0040E810                 mov     edx, 1
.text:0040E815                 jnz     loc_40E915
.text:0040E81B                 mov     ebx, [esp+20h]
.text:0040E81F                 mov     edx, ebx
.text:0040E821                 movzx   eax, byte ptr [ebx]
.text:0040E824                 test    al, al
.text:0040E826                 jz      short loc_40E850
.text:0040E828                 nop
.text:0040E829                 lea     esi, [esi+0]
.text:0040E830
.text:0040E830 loc_40E830:                             ; CODE XREF: .text:0040E84E↓j
.text:0040E830                 cmp     al, 20h ; ' '
.text:0040E832                 jz      loc_40EA8A
.text:0040E838                 cmp     al, 9
.text:0040E83A                 jz      loc_40EA8A
.text:0040E840                 cmp     al, 5Ch ; '\'
.text:0040E842                 jz      loc_40EA8A
.text:0040E848                 inc     ebx
.text:0040E849                 movzx   eax, byte ptr [ebx]
.text:0040E84C                 test    al, al
.text:0040E84E                 jnz     short loc_40E830
.text:0040E850
.text:0040E850 loc_40E850:                             ; CODE XREF: .text:0040E826↑j
.text:0040E850                                         ; .text:0040EA8C↓j ...
.text:0040E850                 mov     ebx, [esp+24h]
.text:0040E854                 mov     edx, ebx
.text:0040E856                 movzx   eax, byte ptr [ebx]
.text:0040E859                 test    al, al
.text:0040E85B                 jz      short loc_40E880
.text:0040E85D                 lea     esi, [esi+0]
.text:0040E860
.text:0040E860 loc_40E860:                             ; CODE XREF: .text:0040E87E↓j
.text:0040E860                 cmp     al, 20h ; ' '
.text:0040E862                 jz      loc_40EA0A
.text:0040E868                 cmp     al, 9
.text:0040E86A                 jz      loc_40EA0A
.text:0040E870                 cmp     al, 5Ch ; '\'
.text:0040E872                 jz      loc_40EA0A
.text:0040E878                 inc     ebx
.text:0040E879                 movzx   eax, byte ptr [ebx]
.text:0040E87C                 test    al, al
.text:0040E87E                 jnz     short loc_40E860
.text:0040E880
.text:0040E880 loc_40E880:                             ; CODE XREF: .text:0040E85B↑j
.text:0040E880                                         ; .text:0040EA0C↓j ...
.text:0040E880                 mov     ebx, [esp+28h]
.text:0040E884                 mov     edx, ebx
.text:0040E886                 movzx   eax, byte ptr [ebx]
.text:0040E889                 test    al, al
.text:0040E88B                 jz      short loc_40E8B0
.text:0040E88D                 lea     esi, [esi+0]
.text:0040E890
.text:0040E890 loc_40E890:                             ; CODE XREF: .text:0040E8AE↓j
.text:0040E890                 cmp     al, 20h ; ' '
.text:0040E892                 jz      loc_40E98E
.text:0040E898                 cmp     al, 9
.text:0040E89A                 jz      loc_40E98E
.text:0040E8A0                 cmp     al, 5Ch ; '\'
.text:0040E8A2                 jz      loc_40E98E
.text:0040E8A8                 inc     ebx
.text:0040E8A9                 movzx   eax, byte ptr [ebx]
.text:0040E8AC                 test    al, al
.text:0040E8AE                 jnz     short loc_40E890
.text:0040E8B0
.text:0040E8B0 loc_40E8B0:                             ; CODE XREF: .text:0040E88B↑j
.text:0040E8B0                                         ; .text:0040E990↓j ...
.text:0040E8B0                 mov     edx, [esp+2Ch]
.text:0040E8B4                 mov     ebx, edx
.text:0040E8B6                 movzx   eax, byte ptr [edx]
.text:0040E8B9                 test    al, al
.text:0040E8BB                 jz      short loc_40E8D4
.text:0040E8BD                 lea     esi, [esi+0]
.text:0040E8C0
.text:0040E8C0 loc_40E8C0:                             ; CODE XREF: .text:0040E8D2↓j
.text:0040E8C0                 cmp     al, 20h ; ' '
.text:0040E8C2                 jz      short loc_40E91D
.text:0040E8C4                 cmp     al, 9
.text:0040E8C6                 jz      short loc_40E91D
.text:0040E8C8                 cmp     al, 5Ch ; '\'
.text:0040E8CA                 jz      short loc_40E91D
.text:0040E8CC                 inc     ebx
.text:0040E8CD                 movzx   eax, byte ptr [ebx]
.text:0040E8D0                 test    al, al
.text:0040E8D2                 jnz     short loc_40E8C0
.text:0040E8D4
.text:0040E8D4 loc_40E8D4:                             ; CODE XREF: .text:0040E8BB↑j
.text:0040E8D4                                         ; .text:0040E91F↓j ...
.text:0040E8D4                 mov     [esp+14h], edx
.text:0040E8D8                 mov     ecx, [esp+34h]
.text:0040E8DC                 mov     ebx, [esp+30h]
.text:0040E8E0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040E8E8                 mov     edx, [esp+24h]
.text:0040E8EC                 mov     [esp+1Ch], ecx
.text:0040E8F0                 mov     ecx, [esp+28h]
.text:0040E8F4                 mov     [esp+18h], ebx
.text:0040E8F8                 mov     ebx, [esp+20h]
.text:0040E8FC                 mov     [esp+0Ch], edx
.text:0040E900                 mov     [esp+10h], ecx
.text:0040E904                 mov     [esp+8], ebx
.text:0040E908                 mov     [esp], esi
.text:0040E90B                 call    fprintf
.text:0040E910                 mov     edx, eax
.text:0040E912                 shr     edx, 1Fh
.text:0040E915
.text:0040E915 loc_40E915:                             ; CODE XREF: .text:0040E815↑j
.text:0040E915                 add     esp, 44h
.text:0040E918                 mov     eax, edx
.text:0040E91A                 pop     ebx
.text:0040E91B                 pop     esi
.text:0040E91C                 retn
.text:0040E91D ; ---------------------------------------------------------------------------
.text:0040E91D
.text:0040E91D loc_40E91D:                             ; CODE XREF: .text:0040E8C2↑j
.text:0040E91D                                         ; .text:0040E8C6↑j ...
.text:0040E91D                 test    al, al
.text:0040E91F                 jz      short loc_40E8D4
.text:0040E921                 mov     [esp], edx
.text:0040E924                 mov     ebx, edx
.text:0040E926                 call    strlen
.text:0040E92B                 lea     edx, ds:1[eax*4]
.text:0040E932                 mov     [esp], edx
.text:0040E935                 call    malloc
.text:0040E93A                 mov     [esp+2Ch], eax
.text:0040E93E                 mov     edx, eax
.text:0040E940
.text:0040E940 loc_40E940:                             ; CODE XREF: .text:0040E958↓j
.text:0040E940                 movzx   eax, byte ptr [ebx]
.text:0040E943                 cmp     al, 20h ; ' '
.text:0040E945                 jz      short loc_40E97D
.text:0040E947                 cmp     al, 9
.text:0040E949                 jz      short loc_40E96C
.text:0040E94B                 cmp     al, 5Ch ; '\'
.text:0040E94D                 jz      short loc_40E963
.text:0040E94F                 mov     [edx], al
.text:0040E951
.text:0040E951 loc_40E951:                             ; CODE XREF: .text:0040E96A↓j
.text:0040E951                                         ; .text:0040E97B↓j ...
.text:0040E951                 movzx   ecx, byte ptr [ebx]
.text:0040E954                 inc     edx
.text:0040E955                 inc     ebx
.text:0040E956                 test    cl, cl
.text:0040E958                 jnz     short loc_40E940
.text:0040E95A                 mov     edx, [esp+2Ch]
.text:0040E95E                 jmp     loc_40E8D4
.text:0040E963 ; ---------------------------------------------------------------------------
.text:0040E963
.text:0040E963 loc_40E963:                             ; CODE XREF: .text:0040E94D↑j
.text:0040E963                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E966                 inc     edx
.text:0040E967                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E96A                 jmp     short loc_40E951
.text:0040E96C ; ---------------------------------------------------------------------------
.text:0040E96C
.text:0040E96C loc_40E96C:                             ; CODE XREF: .text:0040E949↑j
.text:0040E96C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E96F                 inc     edx
.text:0040E970                 mov     byte ptr [edx], 30h ; '0'
.text:0040E973                 inc     edx
.text:0040E974                 mov     byte ptr [edx], 31h ; '1'
.text:0040E977                 inc     edx
.text:0040E978                 mov     byte ptr [edx], 32h ; '2'
.text:0040E97B                 jmp     short loc_40E951
.text:0040E97D ; ---------------------------------------------------------------------------
.text:0040E97D
.text:0040E97D loc_40E97D:                             ; CODE XREF: .text:0040E945↑j
.text:0040E97D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E980                 inc     edx
.text:0040E981                 mov     byte ptr [edx], 30h ; '0'
.text:0040E984                 inc     edx
.text:0040E985                 mov     byte ptr [edx], 34h ; '4'
.text:0040E988                 inc     edx
.text:0040E989                 mov     byte ptr [edx], 30h ; '0'
.text:0040E98C                 jmp     short loc_40E951
.text:0040E98E ; ---------------------------------------------------------------------------
.text:0040E98E
.text:0040E98E loc_40E98E:                             ; CODE XREF: .text:0040E892↑j
.text:0040E98E                                         ; .text:0040E89A↑j ...
.text:0040E98E                 test    al, al
.text:0040E990                 jz      loc_40E8B0
.text:0040E996                 mov     [esp], edx
.text:0040E999                 mov     ebx, edx
.text:0040E99B                 call    strlen
.text:0040E9A0                 lea     edx, ds:1[eax*4]
.text:0040E9A7                 mov     [esp], edx
.text:0040E9AA                 call    malloc
.text:0040E9AF                 mov     [esp+28h], eax
.text:0040E9B3                 mov     edx, eax
.text:0040E9B5                 lea     esi, [esi+0]
.text:0040E9B9                 lea     edi, [edi+0]
.text:0040E9C0
.text:0040E9C0 loc_40E9C0:                             ; CODE XREF: .text:0040E9D8↓j
.text:0040E9C0                 movzx   eax, byte ptr [ebx]
.text:0040E9C3                 cmp     al, 20h ; ' '
.text:0040E9C5                 jz      short loc_40E9F9
.text:0040E9C7                 cmp     al, 9
.text:0040E9C9                 jz      short loc_40E9E8
.text:0040E9CB                 cmp     al, 5Ch ; '\'
.text:0040E9CD                 jz      short loc_40E9DF
.text:0040E9CF                 mov     [edx], al
.text:0040E9D1
.text:0040E9D1 loc_40E9D1:                             ; CODE XREF: .text:0040E9E6↓j
.text:0040E9D1                                         ; .text:0040E9F7↓j ...
.text:0040E9D1                 movzx   ecx, byte ptr [ebx]
.text:0040E9D4                 inc     edx
.text:0040E9D5                 inc     ebx
.text:0040E9D6                 test    cl, cl
.text:0040E9D8                 jnz     short loc_40E9C0
.text:0040E9DA                 jmp     loc_40E8B0
.text:0040E9DF ; ---------------------------------------------------------------------------
.text:0040E9DF
.text:0040E9DF loc_40E9DF:                             ; CODE XREF: .text:0040E9CD↑j
.text:0040E9DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E9E2                 inc     edx
.text:0040E9E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E9E6                 jmp     short loc_40E9D1
.text:0040E9E8 ; ---------------------------------------------------------------------------
.text:0040E9E8
.text:0040E9E8 loc_40E9E8:                             ; CODE XREF: .text:0040E9C9↑j
.text:0040E9E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E9EB                 inc     edx
.text:0040E9EC                 mov     byte ptr [edx], 30h ; '0'
.text:0040E9EF                 inc     edx
.text:0040E9F0                 mov     byte ptr [edx], 31h ; '1'
.text:0040E9F3                 inc     edx
.text:0040E9F4                 mov     byte ptr [edx], 32h ; '2'
.text:0040E9F7                 jmp     short loc_40E9D1
.text:0040E9F9 ; ---------------------------------------------------------------------------
.text:0040E9F9
.text:0040E9F9 loc_40E9F9:                             ; CODE XREF: .text:0040E9C5↑j
.text:0040E9F9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E9FC                 inc     edx
.text:0040E9FD                 mov     byte ptr [edx], 30h ; '0'
.text:0040EA00                 inc     edx
.text:0040EA01                 mov     byte ptr [edx], 34h ; '4'
.text:0040EA04                 inc     edx
.text:0040EA05                 mov     byte ptr [edx], 30h ; '0'
.text:0040EA08                 jmp     short loc_40E9D1
.text:0040EA0A ; ---------------------------------------------------------------------------
.text:0040EA0A
.text:0040EA0A loc_40EA0A:                             ; CODE XREF: .text:0040E862↑j
.text:0040EA0A                                         ; .text:0040E86A↑j ...
.text:0040EA0A                 test    al, al
.text:0040EA0C                 jz      loc_40E880
.text:0040EA12                 mov     [esp], edx
.text:0040EA15                 mov     ebx, edx
.text:0040EA17                 call    strlen
.text:0040EA1C                 lea     edx, ds:1[eax*4]
.text:0040EA23                 mov     [esp], edx
.text:0040EA26                 call    malloc
.text:0040EA2B                 mov     [esp+24h], eax
.text:0040EA2F                 mov     edx, eax
.text:0040EA31                 jmp     short loc_40EA40
.text:0040EA31 ; ---------------------------------------------------------------------------
.text:0040EA33                 align 10h
.text:0040EA40
.text:0040EA40 loc_40EA40:                             ; CODE XREF: .text:0040EA31↑j
.text:0040EA40                                         ; .text:0040EA58↓j
.text:0040EA40                 movzx   eax, byte ptr [ebx]
.text:0040EA43                 cmp     al, 20h ; ' '
.text:0040EA45                 jz      short loc_40EA79
.text:0040EA47                 cmp     al, 9
.text:0040EA49                 jz      short loc_40EA68
.text:0040EA4B                 cmp     al, 5Ch ; '\'
.text:0040EA4D                 jz      short loc_40EA5F
.text:0040EA4F                 mov     [edx], al
.text:0040EA51
.text:0040EA51 loc_40EA51:                             ; CODE XREF: .text:0040EA66↓j
.text:0040EA51                                         ; .text:0040EA77↓j ...
.text:0040EA51                 movzx   ecx, byte ptr [ebx]
.text:0040EA54                 inc     edx
.text:0040EA55                 inc     ebx
.text:0040EA56                 test    cl, cl
.text:0040EA58                 jnz     short loc_40EA40
.text:0040EA5A                 jmp     loc_40E880
.text:0040EA5F ; ---------------------------------------------------------------------------
.text:0040EA5F
.text:0040EA5F loc_40EA5F:                             ; CODE XREF: .text:0040EA4D↑j
.text:0040EA5F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EA62                 inc     edx
.text:0040EA63                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EA66                 jmp     short loc_40EA51
.text:0040EA68 ; ---------------------------------------------------------------------------
.text:0040EA68
.text:0040EA68 loc_40EA68:                             ; CODE XREF: .text:0040EA49↑j
.text:0040EA68                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EA6B                 inc     edx
.text:0040EA6C                 mov     byte ptr [edx], 30h ; '0'
.text:0040EA6F                 inc     edx
.text:0040EA70                 mov     byte ptr [edx], 31h ; '1'
.text:0040EA73                 inc     edx
.text:0040EA74                 mov     byte ptr [edx], 32h ; '2'
.text:0040EA77                 jmp     short loc_40EA51
.text:0040EA79 ; ---------------------------------------------------------------------------
.text:0040EA79
.text:0040EA79 loc_40EA79:                             ; CODE XREF: .text:0040EA45↑j
.text:0040EA79                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EA7C                 inc     edx
.text:0040EA7D                 mov     byte ptr [edx], 30h ; '0'
.text:0040EA80                 inc     edx
.text:0040EA81                 mov     byte ptr [edx], 34h ; '4'
.text:0040EA84                 inc     edx
.text:0040EA85                 mov     byte ptr [edx], 30h ; '0'
.text:0040EA88                 jmp     short loc_40EA51
.text:0040EA8A ; ---------------------------------------------------------------------------
.text:0040EA8A
.text:0040EA8A loc_40EA8A:                             ; CODE XREF: .text:0040E832↑j
.text:0040EA8A                                         ; .text:0040E83A↑j ...
.text:0040EA8A                 test    al, al
.text:0040EA8C                 jz      loc_40E850
.text:0040EA92                 mov     [esp], edx
.text:0040EA95                 mov     ebx, edx
.text:0040EA97                 call    strlen
.text:0040EA9C                 lea     ecx, ds:1[eax*4]
.text:0040EAA3                 mov     [esp], ecx
.text:0040EAA6                 call    malloc
.text:0040EAAB                 mov     [esp+20h], eax
.text:0040EAAF                 mov     edx, eax
.text:0040EAB1                 jmp     short loc_40EAC0
.text:0040EAB1 ; ---------------------------------------------------------------------------
.text:0040EAB3                 align 10h
.text:0040EAC0
.text:0040EAC0 loc_40EAC0:                             ; CODE XREF: .text:0040EAB1↑j
.text:0040EAC0                                         ; .text:0040EAD8↓j
.text:0040EAC0                 movzx   eax, byte ptr [ebx]
.text:0040EAC3                 cmp     al, 20h ; ' '
.text:0040EAC5                 jz      short loc_40EAF9
.text:0040EAC7                 cmp     al, 9
.text:0040EAC9                 jz      short loc_40EAE8
.text:0040EACB                 cmp     al, 5Ch ; '\'
.text:0040EACD                 jz      short loc_40EADF
.text:0040EACF                 mov     [edx], al
.text:0040EAD1
.text:0040EAD1 loc_40EAD1:                             ; CODE XREF: .text:0040EAE6↓j
.text:0040EAD1                                         ; .text:0040EAF7↓j ...
.text:0040EAD1                 movzx   ecx, byte ptr [ebx]
.text:0040EAD4                 inc     edx
.text:0040EAD5                 inc     ebx
.text:0040EAD6                 test    cl, cl
.text:0040EAD8                 jnz     short loc_40EAC0
.text:0040EADA                 jmp     loc_40E850
.text:0040EADF ; ---------------------------------------------------------------------------
.text:0040EADF
.text:0040EADF loc_40EADF:                             ; CODE XREF: .text:0040EACD↑j
.text:0040EADF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EAE2                 inc     edx
.text:0040EAE3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EAE6                 jmp     short loc_40EAD1
.text:0040EAE8 ; ---------------------------------------------------------------------------
.text:0040EAE8
.text:0040EAE8 loc_40EAE8:                             ; CODE XREF: .text:0040EAC9↑j
.text:0040EAE8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EAEB                 inc     edx
.text:0040EAEC                 mov     byte ptr [edx], 30h ; '0'
.text:0040EAEF                 inc     edx
.text:0040EAF0                 mov     byte ptr [edx], 31h ; '1'
.text:0040EAF3                 inc     edx
.text:0040EAF4                 mov     byte ptr [edx], 32h ; '2'
.text:0040EAF7                 jmp     short loc_40EAD1
.text:0040EAF9 ; ---------------------------------------------------------------------------
.text:0040EAF9
.text:0040EAF9 loc_40EAF9:                             ; CODE XREF: .text:0040EAC5↑j
.text:0040EAF9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EAFC                 inc     edx
.text:0040EAFD                 mov     byte ptr [edx], 30h ; '0'
.text:0040EB00                 inc     edx
.text:0040EB01                 mov     byte ptr [edx], 34h ; '4'
.text:0040EB04                 inc     edx
.text:0040EB05                 mov     byte ptr [edx], 30h ; '0'
.text:0040EB08                 jmp     short loc_40EAD1
.text:0040EB08 ; ---------------------------------------------------------------------------
.text:0040EB0A                 align 10h
.text:0040EB10
.text:0040EB10 ; =============== S U B R O U T I N E =======================================
.text:0040EB10
.text:0040EB10 ; Attributes: info_from_lumina
.text:0040EB10
.text:0040EB10 ; int __cdecl __addmntentstr(char *, int)
.text:0040EB10 ___addmntentstr proc near               ; CODE XREF: .text:0040E3DA↑p
.text:0040EB10
.text:0040EB10 Buffer          = dword ptr -4Ch
.text:0040EB10 Format          = dword ptr -48h
.text:0040EB10 var_44          = dword ptr -44h
.text:0040EB10 var_40          = dword ptr -40h
.text:0040EB10 var_3C          = dword ptr -3Ch
.text:0040EB10 var_38          = dword ptr -38h
.text:0040EB10 var_34          = dword ptr -34h
.text:0040EB10 var_30          = dword ptr -30h
.text:0040EB10 var_2C          = dword ptr -2Ch
.text:0040EB10 var_28          = dword ptr -28h
.text:0040EB10 var_24          = dword ptr -24h
.text:0040EB10 Str             = dword ptr -20h
.text:0040EB10 var_1C          = dword ptr -1Ch
.text:0040EB10 var_18          = dword ptr -18h
.text:0040EB10 arg_0           = dword ptr  4
.text:0040EB10 arg_4           = dword ptr  8
.text:0040EB10
.text:0040EB10                 push    ebx
.text:0040EB11                 sub     esp, 48h
.text:0040EB14                 mov     edx, [esp+4Ch+arg_4]
.text:0040EB18                 mov     ecx, [edx]
.text:0040EB1A                 mov     [esp+4Ch+var_2C], ecx
.text:0040EB1E                 mov     ebx, [edx+4]
.text:0040EB21                 mov     [esp+4Ch+var_28], ebx
.text:0040EB25                 mov     ebx, [edx+8]
.text:0040EB28                 mov     [esp+4Ch+var_24], ebx
.text:0040EB2C                 mov     ebx, [edx+0Ch]
.text:0040EB2F                 mov     [esp+4Ch+Str], ebx
.text:0040EB33                 mov     ebx, [edx+10h]
.text:0040EB36                 mov     [esp+4Ch+var_1C], ebx
.text:0040EB3A                 mov     ebx, [edx+14h]
.text:0040EB3D                 mov     [esp+4Ch+var_18], ebx
.text:0040EB41                 mov     ebx, ecx
.text:0040EB43                 movzx   eax, byte ptr [ecx]
.text:0040EB46                 test    al, al
.text:0040EB48                 jz      loc_40EE31
.text:0040EB4E                 mov     esi, esi
.text:0040EB50
.text:0040EB50 loc_40EB50:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040EB50                 cmp     al, 20h ; ' '
.text:0040EB52                 jz      loc_40EDB0
.text:0040EB58                 cmp     al, 9
.text:0040EB5A                 jz      loc_40EDB0
.text:0040EB60                 cmp     al, 5Ch ; '\'
.text:0040EB62                 jz      loc_40EDB0
.text:0040EB68                 inc     ebx
.text:0040EB69                 movzx   eax, byte ptr [ebx]
.text:0040EB6C                 test    al, al
.text:0040EB6E                 jnz     short loc_40EB50
.text:0040EB70
.text:0040EB70 loc_40EB70:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040EB70                                         ; ___addmntentstr+2EA↓j
.text:0040EB70                 mov     ebx, [esp+4Ch+var_28]
.text:0040EB74                 mov     edx, ebx
.text:0040EB76                 movzx   eax, byte ptr [ebx]
.text:0040EB79                 test    al, al
.text:0040EB7B                 jz      short loc_40EBA0
.text:0040EB7D                 lea     esi, [esi+0]
.text:0040EB80
.text:0040EB80 loc_40EB80:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040EB80                 cmp     al, 20h ; ' '
.text:0040EB82                 jz      loc_40ED2A
.text:0040EB88                 cmp     al, 9
.text:0040EB8A                 jz      loc_40ED2A
.text:0040EB90                 cmp     al, 5Ch ; '\'
.text:0040EB92                 jz      loc_40ED2A
.text:0040EB98                 inc     ebx
.text:0040EB99                 movzx   eax, byte ptr [ebx]
.text:0040EB9C                 test    al, al
.text:0040EB9E                 jnz     short loc_40EB80
.text:0040EBA0
.text:0040EBA0 loc_40EBA0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040EBA0                                         ; ___addmntentstr+21C↓j ...
.text:0040EBA0                 mov     ebx, [esp+4Ch+var_24]
.text:0040EBA4                 mov     edx, ebx
.text:0040EBA6                 movzx   eax, byte ptr [ebx]
.text:0040EBA9                 test    al, al
.text:0040EBAB                 jz      short loc_40EBD0
.text:0040EBAD                 lea     esi, [esi+0]
.text:0040EBB0
.text:0040EBB0 loc_40EBB0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040EBB0                 cmp     al, 20h ; ' '
.text:0040EBB2                 jz      loc_40ECAE
.text:0040EBB8                 cmp     al, 9
.text:0040EBBA                 jz      loc_40ECAE
.text:0040EBC0                 cmp     al, 5Ch ; '\'
.text:0040EBC2                 jz      loc_40ECAE
.text:0040EBC8                 inc     ebx
.text:0040EBC9                 movzx   eax, byte ptr [ebx]
.text:0040EBCC                 test    al, al
.text:0040EBCE                 jnz     short loc_40EBB0
.text:0040EBD0
.text:0040EBD0 loc_40EBD0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040EBD0                                         ; ___addmntentstr+1A0↓j ...
.text:0040EBD0                 mov     edx, [esp+4Ch+Str]
.text:0040EBD4                 mov     ebx, edx
.text:0040EBD6                 movzx   eax, byte ptr [edx]
.text:0040EBD9                 test    al, al
.text:0040EBDB                 jz      short loc_40EBF4
.text:0040EBDD                 lea     esi, [esi+0]
.text:0040EBE0
.text:0040EBE0 loc_40EBE0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040EBE0                 cmp     al, 20h ; ' '
.text:0040EBE2                 jz      short loc_40EC3C
.text:0040EBE4                 cmp     al, 9
.text:0040EBE6                 jz      short loc_40EC3C
.text:0040EBE8                 cmp     al, 5Ch ; '\'
.text:0040EBEA                 jz      short loc_40EC3C
.text:0040EBEC                 inc     ebx
.text:0040EBED                 movzx   eax, byte ptr [ebx]
.text:0040EBF0                 test    al, al
.text:0040EBF2                 jnz     short loc_40EBE0
.text:0040EBF4
.text:0040EBF4 loc_40EBF4:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040EBF4                                         ; ___addmntentstr+12E↓j ...
.text:0040EBF4                 mov     [esp+4Ch+var_38], edx
.text:0040EBF8                 mov     ebx, [esp+4Ch+var_18]
.text:0040EBFC                 mov     ecx, [esp+4Ch+var_1C]
.text:0040EC00                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040EC08                 mov     edx, [esp+4Ch+var_2C]
.text:0040EC0C                 mov     [esp+4Ch+var_30], ebx
.text:0040EC10                 mov     ebx, [esp+4Ch+var_24]
.text:0040EC14                 mov     [esp+4Ch+var_34], ecx
.text:0040EC18                 mov     ecx, [esp+4Ch+var_28]
.text:0040EC1C                 mov     [esp+4Ch+var_3C], ebx
.text:0040EC20                 mov     ebx, [esp+4Ch+arg_0]
.text:0040EC24                 mov     [esp+4Ch+var_40], ecx
.text:0040EC28                 mov     [esp+4Ch+var_44], edx
.text:0040EC2C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040EC2F                 call    sprintf
.text:0040EC34                 add     esp, 48h
.text:0040EC37                 shr     eax, 1Fh
.text:0040EC3A                 pop     ebx
.text:0040EC3B                 retn
.text:0040EC3C ; ---------------------------------------------------------------------------
.text:0040EC3C
.text:0040EC3C loc_40EC3C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040EC3C                                         ; ___addmntentstr+D6↑j ...
.text:0040EC3C                 test    al, al
.text:0040EC3E                 jz      short loc_40EBF4
.text:0040EC40                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040EC43                 mov     ebx, edx
.text:0040EC45                 call    strlen
.text:0040EC4A                 lea     edx, ds:1[eax*4]
.text:0040EC51                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040EC54                 call    malloc
.text:0040EC59                 mov     [esp+4Ch+Str], eax
.text:0040EC5D                 mov     edx, eax
.text:0040EC5F                 nop
.text:0040EC60
.text:0040EC60 loc_40EC60:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040EC60                 movzx   eax, byte ptr [ebx]
.text:0040EC63                 cmp     al, 20h ; ' '
.text:0040EC65                 jz      short loc_40EC9D
.text:0040EC67                 cmp     al, 9
.text:0040EC69                 jz      short loc_40EC8C
.text:0040EC6B                 cmp     al, 5Ch ; '\'
.text:0040EC6D                 jz      short loc_40EC83
.text:0040EC6F                 mov     [edx], al
.text:0040EC71
.text:0040EC71 loc_40EC71:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040EC71                                         ; ___addmntentstr+18B↓j ...
.text:0040EC71                 movzx   ecx, byte ptr [ebx]
.text:0040EC74                 inc     edx
.text:0040EC75                 inc     ebx
.text:0040EC76                 test    cl, cl
.text:0040EC78                 jnz     short loc_40EC60
.text:0040EC7A                 mov     edx, [esp+4Ch+Str]
.text:0040EC7E                 jmp     loc_40EBF4
.text:0040EC83 ; ---------------------------------------------------------------------------
.text:0040EC83
.text:0040EC83 loc_40EC83:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040EC83                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EC86                 inc     edx
.text:0040EC87                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EC8A                 jmp     short loc_40EC71
.text:0040EC8C ; ---------------------------------------------------------------------------
.text:0040EC8C
.text:0040EC8C loc_40EC8C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040EC8C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EC8F                 inc     edx
.text:0040EC90                 mov     byte ptr [edx], 30h ; '0'
.text:0040EC93                 inc     edx
.text:0040EC94                 mov     byte ptr [edx], 31h ; '1'
.text:0040EC97                 inc     edx
.text:0040EC98                 mov     byte ptr [edx], 32h ; '2'
.text:0040EC9B                 jmp     short loc_40EC71
.text:0040EC9D ; ---------------------------------------------------------------------------
.text:0040EC9D
.text:0040EC9D loc_40EC9D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040EC9D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ECA0                 inc     edx
.text:0040ECA1                 mov     byte ptr [edx], 30h ; '0'
.text:0040ECA4                 inc     edx
.text:0040ECA5                 mov     byte ptr [edx], 34h ; '4'
.text:0040ECA8                 inc     edx
.text:0040ECA9                 mov     byte ptr [edx], 30h ; '0'
.text:0040ECAC                 jmp     short loc_40EC71
.text:0040ECAE ; ---------------------------------------------------------------------------
.text:0040ECAE
.text:0040ECAE loc_40ECAE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040ECAE                                         ; ___addmntentstr+AA↑j ...
.text:0040ECAE                 test    al, al
.text:0040ECB0                 jz      loc_40EBD0
.text:0040ECB6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040ECB9                 mov     ebx, edx
.text:0040ECBB                 call    strlen
.text:0040ECC0                 lea     edx, ds:1[eax*4]
.text:0040ECC7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040ECCA                 call    malloc
.text:0040ECCF                 mov     [esp+4Ch+var_24], eax
.text:0040ECD3                 mov     edx, eax
.text:0040ECD5                 lea     esi, [esi+0]
.text:0040ECD9                 lea     edi, [edi+0]
.text:0040ECE0
.text:0040ECE0 loc_40ECE0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040ECE0                 movzx   eax, byte ptr [ebx]
.text:0040ECE3                 cmp     al, 20h ; ' '
.text:0040ECE5                 jz      short loc_40ED19
.text:0040ECE7                 cmp     al, 9
.text:0040ECE9                 jz      short loc_40ED08
.text:0040ECEB                 cmp     al, 5Ch ; '\'
.text:0040ECED                 jz      short loc_40ECFF
.text:0040ECEF                 mov     [edx], al
.text:0040ECF1
.text:0040ECF1 loc_40ECF1:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040ECF1                                         ; ___addmntentstr+207↓j ...
.text:0040ECF1                 movzx   ecx, byte ptr [ebx]
.text:0040ECF4                 inc     edx
.text:0040ECF5                 inc     ebx
.text:0040ECF6                 test    cl, cl
.text:0040ECF8                 jnz     short loc_40ECE0
.text:0040ECFA                 jmp     loc_40EBD0
.text:0040ECFF ; ---------------------------------------------------------------------------
.text:0040ECFF
.text:0040ECFF loc_40ECFF:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040ECFF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ED02                 inc     edx
.text:0040ED03                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ED06                 jmp     short loc_40ECF1
.text:0040ED08 ; ---------------------------------------------------------------------------
.text:0040ED08
.text:0040ED08 loc_40ED08:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040ED08                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ED0B                 inc     edx
.text:0040ED0C                 mov     byte ptr [edx], 30h ; '0'
.text:0040ED0F                 inc     edx
.text:0040ED10                 mov     byte ptr [edx], 31h ; '1'
.text:0040ED13                 inc     edx
.text:0040ED14                 mov     byte ptr [edx], 32h ; '2'
.text:0040ED17                 jmp     short loc_40ECF1
.text:0040ED19 ; ---------------------------------------------------------------------------
.text:0040ED19
.text:0040ED19 loc_40ED19:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040ED19                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ED1C                 inc     edx
.text:0040ED1D                 mov     byte ptr [edx], 30h ; '0'
.text:0040ED20                 inc     edx
.text:0040ED21                 mov     byte ptr [edx], 34h ; '4'
.text:0040ED24                 inc     edx
.text:0040ED25                 mov     byte ptr [edx], 30h ; '0'
.text:0040ED28                 jmp     short loc_40ECF1
.text:0040ED2A ; ---------------------------------------------------------------------------
.text:0040ED2A
.text:0040ED2A loc_40ED2A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040ED2A                                         ; ___addmntentstr+7A↑j ...
.text:0040ED2A                 test    al, al
.text:0040ED2C                 jz      loc_40EBA0
.text:0040ED32                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040ED35                 mov     ebx, edx
.text:0040ED37                 call    strlen
.text:0040ED3C                 lea     edx, ds:1[eax*4]
.text:0040ED43                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040ED46                 call    malloc
.text:0040ED4B                 mov     [esp+4Ch+var_28], eax
.text:0040ED4F                 mov     edx, eax
.text:0040ED51                 jmp     short loc_40ED60
.text:0040ED51 ; ---------------------------------------------------------------------------
.text:0040ED53                 align 10h
.text:0040ED60
.text:0040ED60 loc_40ED60:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040ED60                                         ; ___addmntentstr+268↓j
.text:0040ED60                 movzx   eax, byte ptr [ebx]
.text:0040ED63                 cmp     al, 20h ; ' '
.text:0040ED65                 jz      short loc_40ED99
.text:0040ED67                 cmp     al, 9
.text:0040ED69                 jz      short loc_40ED88
.text:0040ED6B                 cmp     al, 5Ch ; '\'
.text:0040ED6D                 jz      short loc_40ED7F
.text:0040ED6F                 mov     [edx], al
.text:0040ED71
.text:0040ED71 loc_40ED71:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040ED71                                         ; ___addmntentstr+287↓j ...
.text:0040ED71                 movzx   ecx, byte ptr [ebx]
.text:0040ED74                 inc     edx
.text:0040ED75                 inc     ebx
.text:0040ED76                 test    cl, cl
.text:0040ED78                 jnz     short loc_40ED60
.text:0040ED7A                 jmp     loc_40EBA0
.text:0040ED7F ; ---------------------------------------------------------------------------
.text:0040ED7F
.text:0040ED7F loc_40ED7F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040ED7F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ED82                 inc     edx
.text:0040ED83                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ED86                 jmp     short loc_40ED71
.text:0040ED88 ; ---------------------------------------------------------------------------
.text:0040ED88
.text:0040ED88 loc_40ED88:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040ED88                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ED8B                 inc     edx
.text:0040ED8C                 mov     byte ptr [edx], 30h ; '0'
.text:0040ED8F                 inc     edx
.text:0040ED90                 mov     byte ptr [edx], 31h ; '1'
.text:0040ED93                 inc     edx
.text:0040ED94                 mov     byte ptr [edx], 32h ; '2'
.text:0040ED97                 jmp     short loc_40ED71
.text:0040ED99 ; ---------------------------------------------------------------------------
.text:0040ED99
.text:0040ED99 loc_40ED99:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040ED99                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ED9C                 inc     edx
.text:0040ED9D                 mov     byte ptr [edx], 30h ; '0'
.text:0040EDA0                 inc     edx
.text:0040EDA1                 mov     byte ptr [edx], 34h ; '4'
.text:0040EDA4                 inc     edx
.text:0040EDA5                 mov     byte ptr [edx], 30h ; '0'
.text:0040EDA8                 jmp     short loc_40ED71
.text:0040EDA8 ; ---------------------------------------------------------------------------
.text:0040EDAA                 align 10h
.text:0040EDB0
.text:0040EDB0 loc_40EDB0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040EDB0                                         ; ___addmntentstr+4A↑j ...
.text:0040EDB0                 test    al, al
.text:0040EDB2                 jz      loc_40EB70
.text:0040EDB8                 mov     ebx, [esp+4Ch+var_2C]
.text:0040EDBC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040EDBF                 call    strlen
.text:0040EDC4                 lea     edx, ds:1[eax*4]
.text:0040EDCB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040EDCE                 call    malloc
.text:0040EDD3                 mov     [esp+4Ch+var_2C], eax
.text:0040EDD7                 mov     edx, eax
.text:0040EDD9                 lea     esi, [esi+0]
.text:0040EDE0
.text:0040EDE0 loc_40EDE0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040EDE0                 movzx   eax, byte ptr [ebx]
.text:0040EDE3                 cmp     al, 20h ; ' '
.text:0040EDE5                 jz      short loc_40EE20
.text:0040EDE7                 cmp     al, 9
.text:0040EDE9                 jz      short loc_40EE08
.text:0040EDEB                 cmp     al, 5Ch ; '\'
.text:0040EDED                 jz      short loc_40EDFF
.text:0040EDEF                 mov     [edx], al
.text:0040EDF1
.text:0040EDF1 loc_40EDF1:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040EDF1                                         ; ___addmntentstr+307↓j ...
.text:0040EDF1                 movzx   ecx, byte ptr [ebx]
.text:0040EDF4                 inc     edx
.text:0040EDF5                 inc     ebx
.text:0040EDF6                 test    cl, cl
.text:0040EDF8                 jnz     short loc_40EDE0
.text:0040EDFA                 jmp     loc_40EB70
.text:0040EDFF ; ---------------------------------------------------------------------------
.text:0040EDFF
.text:0040EDFF loc_40EDFF:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040EDFF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EE02                 inc     edx
.text:0040EE03                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EE06                 jmp     short loc_40EDF1
.text:0040EE08 ; ---------------------------------------------------------------------------
.text:0040EE08
.text:0040EE08 loc_40EE08:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040EE08                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EE0B                 inc     edx
.text:0040EE0C                 mov     byte ptr [edx], 30h ; '0'
.text:0040EE0F                 inc     edx
.text:0040EE10                 mov     byte ptr [edx], 31h ; '1'
.text:0040EE13                 inc     edx
.text:0040EE14                 mov     byte ptr [edx], 32h ; '2'
.text:0040EE17                 jmp     short loc_40EDF1
.text:0040EE17 ; ---------------------------------------------------------------------------
.text:0040EE19                 align 10h
.text:0040EE20
.text:0040EE20 loc_40EE20:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040EE20                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EE23                 inc     edx
.text:0040EE24                 mov     byte ptr [edx], 30h ; '0'
.text:0040EE27                 inc     edx
.text:0040EE28                 mov     byte ptr [edx], 34h ; '4'
.text:0040EE2B                 inc     edx
.text:0040EE2C                 mov     byte ptr [edx], 30h ; '0'
.text:0040EE2F                 jmp     short loc_40EDF1
.text:0040EE31 ; ---------------------------------------------------------------------------
.text:0040EE31
.text:0040EE31 loc_40EE31:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040EE31                 movzx   eax, byte ptr [ecx]
.text:0040EE34                 jmp     loc_40EDB0
.text:0040EE34 ___addmntentstr endp
.text:0040EE34
.text:0040EE34 ; ---------------------------------------------------------------------------
.text:0040EE39                 align 10h
.text:0040EE40
.text:0040EE40 ; =============== S U B R O U T I N E =======================================
.text:0040EE40
.text:0040EE40
.text:0040EE40 sub_40EE40      proc near               ; CODE XREF: sub_40C010+99↑p
.text:0040EE40
.text:0040EE40 nBufferLength   = dword ptr -1Ch
.text:0040EE40 lpBuffer        = dword ptr -18h
.text:0040EE40 dwBytes         = dword ptr -14h
.text:0040EE40 var_8           = dword ptr -8
.text:0040EE40 var_4           = dword ptr -4
.text:0040EE40
.text:0040EE40                 sub     esp, 1Ch
.text:0040EE43                 mov     [esp+1Ch+var_8], ebx
.text:0040EE47                 mov     [esp+1Ch+var_4], esi
.text:0040EE4B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040EE53                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040EE5A                 call    GetLogicalDriveStringsA
.text:0040EE5F                 sub     esp, 8
.text:0040EE62                 mov     ebx, eax
.text:0040EE64                 call    GetProcessHeap
.text:0040EE69                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040EE6C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040EE70                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040EE78                 call    HeapAlloc
.text:0040EE7D                 sub     esp, 0Ch
.text:0040EE80                 mov     esi, eax
.text:0040EE82                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040EE85                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040EE89                 call    GetLogicalDriveStringsA
.text:0040EE8E                 sub     esp, 8
.text:0040EE91                 mov     eax, esi
.text:0040EE93                 mov     ebx, [esp+1Ch+var_8]
.text:0040EE97                 mov     esi, [esp+1Ch+var_4]
.text:0040EE9B                 add     esp, 1Ch
.text:0040EE9E                 retn
.text:0040EE9E sub_40EE40      endp
.text:0040EE9E
.text:0040EE9F
.text:0040EE9F ; =============== S U B R O U T I N E =======================================
.text:0040EE9F
.text:0040EE9F
.text:0040EE9F ; int __cdecl sub_40EE9F(char *, char *)
.text:0040EE9F sub_40EE9F      proc near               ; DATA XREF: sub_40EE9F:loc_40EF2D↓o
.text:0040EE9F
.text:0040EE9F FileName        = dword ptr -1Ch
.text:0040EE9F Mode            = dword ptr -18h
.text:0040EE9F dwBytes         = dword ptr -14h
.text:0040EE9F arg_0           = dword ptr  4
.text:0040EE9F arg_4           = dword ptr  8
.text:0040EE9F
.text:0040EE9F                 ja      short $+2
.text:0040EEA1
.text:0040EEA1 loc_40EEA1:                             ; CODE XREF: sub_40EE9F↑j
.text:0040EEA1                 jmp     short loc_40EEB0
.text:0040EEA1 ; ---------------------------------------------------------------------------
.text:0040EEA3                 align 10h
.text:0040EEB0
.text:0040EEB0 loc_40EEB0:                             ; CODE XREF: sub_40EE9F:loc_40EEA1↑j
.text:0040EEB0                 push    edi
.text:0040EEB1                 push    esi
.text:0040EEB2                 push    ebx
.text:0040EEB3                 sub     esp, 10h
.text:0040EEB6                 mov     ebx, [esp+1Ch+arg_0]
.text:0040EEBA                 mov     edx, [esp+1Ch+arg_4]
.text:0040EEBE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040EEC1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040EEC5                 call    fopen
.text:0040EECA                 test    eax, eax
.text:0040EECC                 mov     edi, eax
.text:0040EECE                 jz      short loc_40EF2D
.text:0040EED0
.text:0040EED0 loc_40EED0:                             ; CODE XREF: sub_40EE9F+A2↓j
.text:0040EED0                                         ; sub_40EE9F+AB↓j
.text:0040EED0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040EED8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040EEDF                 call    GetLogicalDriveStringsA
.text:0040EEE4                 sub     esp, 8
.text:0040EEE7                 mov     esi, eax
.text:0040EEE9                 call    GetProcessHeap
.text:0040EEEE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040EEF1                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040EEF5                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040EEFD                 call    HeapAlloc
.text:0040EF02                 sub     esp, 0Ch
.text:0040EF05                 mov     ebx, eax
.text:0040EF07                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040EF0A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040EF0E                 call    GetLogicalDriveStringsA
.text:0040EF13                 mov     off_414084, ebx ; "notset"
.text:0040EF19                 sub     esp, 8
.text:0040EF1C                 xor     eax, eax
.text:0040EF1E                 test    ebx, ebx
.text:0040EF20                 setz    al
.text:0040EF23                 add     esp, 10h
.text:0040EF26                 pop     ebx
.text:0040EF27                 dec     eax
.text:0040EF28                 and     eax, edi
.text:0040EF2A                 pop     esi
.text:0040EF2B                 pop     edi
.text:0040EF2C                 retn
.text:0040EF2D ; ---------------------------------------------------------------------------
.text:0040EF2D
.text:0040EF2D loc_40EF2D:                             ; CODE XREF: sub_40EE9F+2F↑j
.text:0040EF2D                 mov     [esp+1Ch+Mode], offset sub_40EE9F ; Mode
.text:0040EF35                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040EF38                 call    fopen
.text:0040EF3D                 test    eax, eax
.text:0040EF3F                 mov     edi, eax
.text:0040EF41                 jnz     short loc_40EED0
.text:0040EF43                 call    sub_40FC30
.text:0040EF48                 mov     edi, eax
.text:0040EF4A                 jmp     short loc_40EED0
.text:0040EF4A sub_40EE9F      endp
.text:0040EF4A
.text:0040EF4A ; ---------------------------------------------------------------------------
.text:0040EF4C                 align 10h
.text:0040EF50                 sub     esp, 0Ch
.text:0040EF53                 mov     eax, [esp+10h]
.text:0040EF57                 test    eax, eax
.text:0040EF59                 jz      short loc_40EF63
.text:0040EF5B                 mov     [esp], eax
.text:0040EF5E                 call    fclose
.text:0040EF63
.text:0040EF63 loc_40EF63:                             ; CODE XREF: .text:0040EF59↑j
.text:0040EF63                 call    GetProcessHeap
.text:0040EF68                 mov     [esp], eax
.text:0040EF6B                 mov     ecx, off_414084 ; "notset"
.text:0040EF71                 mov     dword ptr [esp+4], 0
.text:0040EF79                 mov     [esp+8], ecx
.text:0040EF7D                 call    HeapFree
.text:0040EF82                 mov     edx, off_414080 ; "notset"
.text:0040EF88                 sub     esp, 0Ch
.text:0040EF8B                 mov     eax, 1
.text:0040EF90                 mov     off_414084, edx ; "notset"
.text:0040EF96                 add     esp, 0Ch
.text:0040EF99                 retn
.text:0040EF99 ; ---------------------------------------------------------------------------
.text:0040EF9A                 align 10h
.text:0040EFA0                 push    edi
.text:0040EFA1                 push    esi
.text:0040EFA2                 push    ebx
.text:0040EFA3                 sub     esp, 10h
.text:0040EFA6                 mov     edi, [esp+24h]
.text:0040EFAA                 mov     [esp], edi
.text:0040EFAD                 call    strlen
.text:0040EFB2                 mov     edx, [esp+20h]
.text:0040EFB6                 mov     esi, eax
.text:0040EFB8                 mov     ebx, [edx+0Ch]
.text:0040EFBB                 nop
.text:0040EFBC                 lea     esi, [esi+0]
.text:0040EFC0
.text:0040EFC0 loc_40EFC0:                             ; CODE XREF: .text:0040EFF1↓j
.text:0040EFC0                 mov     [esp+4], edi
.text:0040EFC4                 mov     [esp], ebx
.text:0040EFC7                 call    strstr
.text:0040EFCC                 test    eax, eax
.text:0040EFCE                 jz      short loc_40EFF3
.text:0040EFD0                 cmp     eax, ebx
.text:0040EFD2                 jz      short loc_40EFF5
.text:0040EFD4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040EFD8                 jz      short loc_40F000
.text:0040EFDA
.text:0040EFDA loc_40EFDA:                             ; CODE XREF: .text:0040F010↓j
.text:0040EFDA                 mov     [esp], ebx
.text:0040EFDD                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040EFE5                 call    strchr
.text:0040EFEA                 test    eax, eax
.text:0040EFEC                 mov     ebx, eax
.text:0040EFEE                 jz      short loc_40EFF3
.text:0040EFF0                 inc     ebx
.text:0040EFF1                 jmp     short loc_40EFC0
.text:0040EFF3 ; ---------------------------------------------------------------------------
.text:0040EFF3
.text:0040EFF3 loc_40EFF3:                             ; CODE XREF: .text:0040EFCE↑j
.text:0040EFF3                                         ; .text:0040EFEE↑j
.text:0040EFF3                 xor     eax, eax
.text:0040EFF5
.text:0040EFF5 loc_40EFF5:                             ; CODE XREF: .text:0040EFD2↑j
.text:0040EFF5                                         ; .text:0040F006↓j ...
.text:0040EFF5                 add     esp, 10h
.text:0040EFF8                 pop     ebx
.text:0040EFF9                 pop     esi
.text:0040EFFA                 pop     edi
.text:0040EFFB                 retn
.text:0040EFFB ; ---------------------------------------------------------------------------
.text:0040EFFC                 align 10h
.text:0040F000
.text:0040F000 loc_40F000:                             ; CODE XREF: .text:0040EFD8↑j
.text:0040F000                 movzx   edx, byte ptr [esi+eax]
.text:0040F004                 test    dl, dl
.text:0040F006                 jz      short loc_40EFF5
.text:0040F008                 cmp     dl, 3Dh ; '='
.text:0040F00B                 jz      short loc_40EFF5
.text:0040F00D                 cmp     dl, 2Ch ; ','
.text:0040F010                 jnz     short loc_40EFDA
.text:0040F012                 jmp     short loc_40EFF5
.text:0040F012 ; ---------------------------------------------------------------------------
.text:0040F014                 align 10h
.text:0040F020
.text:0040F020 ; =============== S U B R O U T I N E =======================================
.text:0040F020
.text:0040F020
.text:0040F020 ; int __cdecl sub_40F020(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040F020 sub_40F020      proc near               ; CODE XREF: sub_40F1A0+93↓p
.text:0040F020
.text:0040F020 pvReserved      = dword ptr -35Ch
.text:0040F020 pUnkOuter       = dword ptr -358h
.text:0040F020 dwClsContext    = dword ptr -354h
.text:0040F020 riid            = dword ptr -350h
.text:0040F020 ppv             = dword ptr -34Ch
.text:0040F020 cchWideChar     = dword ptr -348h
.text:0040F020 var_334         = byte ptr -334h
.text:0040F020 var_330         = dword ptr -330h
.text:0040F020 String2         = byte ptr -32Ch
.text:0040F020 WideCharStr     = word ptr -21Ch
.text:0040F020 lpMultiByteStr  = dword ptr  4
.text:0040F020 lpString1       = dword ptr  8
.text:0040F020
.text:0040F020                 push    edi
.text:0040F021                 push    esi
.text:0040F022                 push    ebx
.text:0040F023                 sub     esp, 350h
.text:0040F029                 mov     edi, [esp+35Ch+lpString1]
.text:0040F030                 mov     byte ptr [edi], 0
.text:0040F033                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040F03A                 call    OleInitialize
.text:0040F03F                 sub     esp, 4
.text:0040F042                 cmp     eax, 1
.text:0040F045                 ja      loc_40F17F
.text:0040F04B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040F053                 lea     ecx, [esp+35Ch+var_330]
.text:0040F057                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040F05B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040F063                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040F06B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040F072                 call    CoCreateInstance
.text:0040F077                 sub     esp, 14h
.text:0040F07A                 test    eax, eax
.text:0040F07C                 js      loc_40F17F
.text:0040F082                 mov     ebx, [esp+35Ch+var_330]
.text:0040F086                 lea     edx, [esp+35Ch+var_334]
.text:0040F08A                 mov     esi, [ebx]
.text:0040F08C                 mov     [esp+35Ch+dwClsContext], edx
.text:0040F090                 mov     [esp+35Ch+pvReserved], ebx
.text:0040F093                 xor     ebx, ebx
.text:0040F095                 mov     [esp+35Ch+pUnkOuter], offset dword_411D70
.text:0040F09D                 call    dword ptr [esi]
.text:0040F09F                 sub     esp, 0Ch
.text:0040F0A2                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040F0A9                 call    AreFileApisANSI
.text:0040F0AE                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040F0B6                 test    eax, eax
.text:0040F0B8                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040F0BF                 setz    bl
.text:0040F0C2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040F0C6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040F0CE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040F0D2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040F0DA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040F0DD                 call    MultiByteToWideChar
.text:0040F0E2                 sub     esp, 18h
.text:0040F0E5                 test    eax, eax
.text:0040F0E7                 js      loc_40F17F
.text:0040F0ED                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040F0F1                 mov     ebx, [edx]
.text:0040F0F3                 mov     [esp+35Ch+dwClsContext], 0
.text:0040F0FB                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040F0FF                 mov     [esp+35Ch+pvReserved], edx
.text:0040F102                 call    dword ptr [ebx+14h]
.text:0040F105                 sub     esp, 0Ch
.text:0040F108                 test    eax, eax
.text:0040F10A                 js      short loc_40F17F
.text:0040F10C                 mov     ebx, [esp+35Ch+var_330]
.text:0040F110                 lea     esi, [esp+35Ch+String2]
.text:0040F114                 mov     ecx, [ebx]
.text:0040F116                 mov     [esp+35Ch+pvReserved], ebx
.text:0040F119                 mov     [esp+35Ch+ppv], 0
.text:0040F121                 mov     [esp+35Ch+riid], 0
.text:0040F129                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040F131                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040F135                 call    dword ptr [ecx+0Ch]
.text:0040F138                 sub     esp, 14h
.text:0040F13B                 mov     ebx, eax
.text:0040F13D                 test    eax, eax
.text:0040F13F                 js      short loc_40F17F
.text:0040F141                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040F145                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040F148                 call    lstrcpyA
.text:0040F14D                 sub     esp, 8
.text:0040F150                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040F154                 mov     ecx, [edi]
.text:0040F156                 mov     [esp+35Ch+pvReserved], edi
.text:0040F159                 call    dword ptr [ecx+8]
.text:0040F15C                 sub     esp, 4
.text:0040F15F                 mov     edx, [esp+35Ch+var_330]
.text:0040F163                 mov     esi, [edx]
.text:0040F165                 mov     [esp+35Ch+pvReserved], edx
.text:0040F168                 call    dword ptr [esi+8]
.text:0040F16B                 sub     esp, 4
.text:0040F16E                 call    CoUninitialize
.text:0040F173                 mov     eax, ebx
.text:0040F175
.text:0040F175 loc_40F175:                             ; CODE XREF: sub_40F020+177↓j
.text:0040F175                 add     esp, 350h
.text:0040F17B                 pop     ebx
.text:0040F17C                 pop     esi
.text:0040F17D                 pop     edi
.text:0040F17E                 retn
.text:0040F17F ; ---------------------------------------------------------------------------
.text:0040F17F
.text:0040F17F loc_40F17F:                             ; CODE XREF: sub_40F020+25↑j
.text:0040F17F                                         ; sub_40F020+5C↑j ...
.text:0040F17F                 call    sub_40D580
.text:0040F184                 mov     edi, eax
.text:0040F186                 call    _errno
.text:0040F18B                 mov     [eax], edi
.text:0040F18D                 call    CoUninitialize
.text:0040F192                 mov     eax, 0FFFFFFFFh
.text:0040F197                 jmp     short loc_40F175
.text:0040F197 sub_40F020      endp
.text:0040F197
.text:0040F197 ; ---------------------------------------------------------------------------
.text:0040F199 ; const char aLnk_0[]
.text:0040F199 aLnk_0          db '.lnk',0             ; DATA XREF: sub_40F1A0+53↓o
.text:0040F199                                         ; sub_40F1A0:loc_40F205↓o
.text:0040F19E                 align 10h
.text:0040F1A0
.text:0040F1A0 ; =============== S U B R O U T I N E =======================================
.text:0040F1A0
.text:0040F1A0
.text:0040F1A0 ; int __cdecl sub_40F1A0(char *, LPSTR lpString1)
.text:0040F1A0 sub_40F1A0      proc near               ; CODE XREF: sub_40CBE0+96↑p
.text:0040F1A0
.text:0040F1A0 Str             = dword ptr -1Ch
.text:0040F1A0 Source          = dword ptr -18h
.text:0040F1A0 Destination     = dword ptr -14h
.text:0040F1A0 arg_0           = dword ptr  4
.text:0040F1A0 lpString1       = dword ptr  8
.text:0040F1A0
.text:0040F1A0                 push    ebp
.text:0040F1A1                 push    edi
.text:0040F1A2                 push    esi
.text:0040F1A3                 push    ebx
.text:0040F1A4                 sub     esp, 0Ch
.text:0040F1A7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040F1AB                 mov     ebp, [esp+1Ch+lpString1]
.text:0040F1AF                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040F1B2                 call    strlen
.text:0040F1B7                 add     eax, 5
.text:0040F1BA                 mov     [esp+1Ch+Str], eax ; Size
.text:0040F1BD                 call    malloc
.text:0040F1C2                 mov     [esp+1Ch+Destination], eax
.text:0040F1C6                 test    eax, eax
.text:0040F1C8                 jz      loc_40F270
.text:0040F1CE                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040F1D2                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040F1D5                 call    strcpy
.text:0040F1DA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040F1E2                 mov     eax, [esp+1Ch+Destination]
.text:0040F1E6                 mov     [esp+1Ch+Str], eax ; Str
.text:0040F1E9                 call    strrchr
.text:0040F1EE                 test    eax, eax
.text:0040F1F0                 jz      short loc_40F205
.text:0040F1F2                 cld
.text:0040F1F3                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:0040F1F8                 mov     ecx, 5
.text:0040F1FD                 mov     esi, eax
.text:0040F1FF                 mov     edi, ebx
.text:0040F201                 repe cmpsb
.text:0040F203                 jz      short loc_40F219
.text:0040F205
.text:0040F205 loc_40F205:                             ; CODE XREF: sub_40F1A0+50↑j
.text:0040F205                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0040F20D                 mov     edx, [esp+1Ch+Destination]
.text:0040F211                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040F214                 call    strcat
.text:0040F219
.text:0040F219 loc_40F219:                             ; CODE XREF: sub_40F1A0+63↑j
.text:0040F219                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040F220                 call    SetErrorMode
.text:0040F225                 sub     esp, 4
.text:0040F228                 mov     ebx, [esp+1Ch+Destination]
.text:0040F22C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040F230                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040F233                 call    sub_40F020
.text:0040F238                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040F23B                 mov     esi, eax
.text:0040F23D                 call    free
.text:0040F242                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040F249                 call    SetErrorMode
.text:0040F24E                 sub     esp, 4
.text:0040F251                 mov     [esp+1Ch+Str], ebp
.text:0040F254                 call    sub_40B850
.text:0040F259                 inc     esi
.text:0040F25A                 jz      short loc_40F270
.text:0040F25C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:0040F260                 add     esp, 0Ch
.text:0040F263                 pop     ebx
.text:0040F264                 pop     esi
.text:0040F265                 pop     edi
.text:0040F266                 pop     ebp
.text:0040F267                 jmp     strlen
.text:0040F267 ; ---------------------------------------------------------------------------
.text:0040F26C                 align 10h
.text:0040F270
.text:0040F270 loc_40F270:                             ; CODE XREF: sub_40F1A0+28↑j
.text:0040F270                                         ; sub_40F1A0+BA↑j
.text:0040F270                 add     esp, 0Ch
.text:0040F273                 mov     eax, 0FFFFFFFFh
.text:0040F278                 pop     ebx
.text:0040F279                 pop     esi
.text:0040F27A                 pop     edi
.text:0040F27B                 pop     ebp
.text:0040F27C                 retn
.text:0040F27C sub_40F1A0      endp
.text:0040F27C
.text:0040F27C ; ---------------------------------------------------------------------------
.text:0040F27D                 align 10h
.text:0040F280
.text:0040F280 ; =============== S U B R O U T I N E =======================================
.text:0040F280
.text:0040F280
.text:0040F280 ; int __cdecl sub_40F280(int, int, char *, int, int)
.text:0040F280 sub_40F280      proc near               ; CODE XREF: sub_40CD50+2A↑p
.text:0040F280
.text:0040F280 var_1C          = dword ptr -1Ch
.text:0040F280 var_18          = dword ptr -18h
.text:0040F280 var_14          = dword ptr -14h
.text:0040F280 var_10          = dword ptr -10h
.text:0040F280 var_C           = dword ptr -0Ch
.text:0040F280 var_4           = dword ptr -4
.text:0040F280 arg_0           = dword ptr  4
.text:0040F280 arg_4           = dword ptr  8
.text:0040F280 arg_8           = dword ptr  0Ch
.text:0040F280 arg_C           = dword ptr  10h
.text:0040F280 arg_10          = dword ptr  14h
.text:0040F280
.text:0040F280                 sub     esp, 1Ch
.text:0040F283                 mov     [esp+1Ch+var_4], ebx
.text:0040F287                 mov     ebx, [esp+1Ch+arg_4]
.text:0040F28B                 call    sub_40FEE0
.text:0040F290                 mov     [esp+1Ch+var_1C], eax ; char *
.text:0040F293                 mov     ecx, [esp+1Ch+arg_10]
.text:0040F297                 mov     [esp+1Ch+var_18], ebx ; int
.text:0040F29B                 mov     [esp+1Ch+var_C], ecx ; int
.text:0040F29F                 mov     ecx, [esp+1Ch+arg_C]
.text:0040F2A3                 mov     [esp+1Ch+var_10], ecx ; int
.text:0040F2A7                 mov     ecx, [esp+1Ch+arg_8]
.text:0040F2AB                 mov     [esp+1Ch+var_14], ecx ; char *
.text:0040F2AF                 call    sub_40FCF0
.text:0040F2B4                 mov     ecx, [esp+1Ch+arg_0]
.text:0040F2B8                 mov     [ebx+8], ecx
.text:0040F2BB                 mov     ebx, [esp+1Ch+var_4]
.text:0040F2BF                 add     esp, 1Ch
.text:0040F2C2                 retn
.text:0040F2C2 sub_40F280      endp
.text:0040F2C2
.text:0040F2C2 ; ---------------------------------------------------------------------------
.text:0040F2C3                 align 10h
.text:0040F2D0
.text:0040F2D0 ; =============== S U B R O U T I N E =======================================
.text:0040F2D0
.text:0040F2D0 ; Attributes: info_from_lumina
.text:0040F2D0
.text:0040F2D0 __quicksort     proc near               ; CODE XREF: sub_40CFA0+7B↑j
.text:0040F2D0
.text:0040F2D0 var_14C         = dword ptr -14Ch
.text:0040F2D0 var_148         = dword ptr -148h
.text:0040F2D0 var_13C         = dword ptr -13Ch
.text:0040F2D0 var_135         = byte ptr -135h
.text:0040F2D0 var_134         = dword ptr -134h
.text:0040F2D0 var_130         = dword ptr -130h
.text:0040F2D0 var_12C         = dword ptr -12Ch
.text:0040F2D0 var_128         = dword ptr -128h
.text:0040F2D0 var_124         = dword ptr -124h
.text:0040F2D0 var_120         = dword ptr -120h
.text:0040F2D0 var_11C         = byte ptr -11Ch
.text:0040F2D0 var_114         = byte ptr -114h
.text:0040F2D0 arg_0           = dword ptr  4
.text:0040F2D0 arg_4           = dword ptr  8
.text:0040F2D0 arg_8           = dword ptr  0Ch
.text:0040F2D0 arg_C           = dword ptr  10h
.text:0040F2D0
.text:0040F2D0                 push    ebp
.text:0040F2D1                 push    edi
.text:0040F2D2                 push    esi
.text:0040F2D3                 push    ebx
.text:0040F2D4                 sub     esp, 13Ch
.text:0040F2DA                 mov     eax, [esp+14Ch+arg_4]
.text:0040F2E1                 mov     ecx, [esp+14Ch+arg_8]
.text:0040F2E8                 shl     ecx, 2
.text:0040F2EB                 test    eax, eax
.text:0040F2ED                 mov     [esp+14Ch+var_120], ecx
.text:0040F2F1                 jz      loc_40F44C
.text:0040F2F7                 lea     ecx, [eax-1]
.text:0040F2FA                 cmp     eax, 4
.text:0040F2FD                 mov     [esp+14Ch+var_13C], ecx
.text:0040F301                 jbe     short loc_40F336
.text:0040F303                 mov     edi, [esp+14Ch+arg_8]
.text:0040F30A                 lea     ebx, [esp+14Ch+var_114]
.text:0040F30E                 mov     edx, [esp+14Ch+var_13C]
.text:0040F312                 mov     [esp+14Ch+var_12C], ebx
.text:0040F316                 mov     ebp, [esp+14Ch+arg_0]
.text:0040F31D                 lea     eax, [esp+14Ch+var_11C]
.text:0040F321                 imul    edi, edx
.text:0040F324                 mov     [esp+14Ch+var_124], ebp
.text:0040F328                 add     edi, ebp
.text:0040F32A                 cmp     eax, ebx
.text:0040F32C                 mov     [esp+14Ch+var_128], edi
.text:0040F330                 jb      loc_40F47F
.text:0040F336
.text:0040F336 loc_40F336:                             ; CODE XREF: __quicksort+31↑j
.text:0040F336                                         ; __quicksort+313↓j
.text:0040F336                 mov     ebx, [esp+14Ch+arg_8]
.text:0040F33D                 mov     edx, [esp+14Ch+var_13C]
.text:0040F341                 mov     ecx, [esp+14Ch+arg_0]
.text:0040F348                 mov     esi, [esp+14Ch+arg_0]
.text:0040F34F                 imul    ebx, edx
.text:0040F352                 mov     edi, [esp+14Ch+var_120]
.text:0040F356                 add     ebx, ecx
.text:0040F358                 mov     [esp+14Ch+var_134], ebx
.text:0040F35C                 lea     ebx, [edi+esi]
.text:0040F35F                 cmp     ebx, [esp+14Ch+var_134]
.text:0040F363                 jbe     short loc_40F369
.text:0040F365                 mov     ebx, [esp+14Ch+var_134]
.text:0040F369
.text:0040F369 loc_40F369:                             ; CODE XREF: __quicksort+93↑j
.text:0040F369                 mov     ebp, [esp+14Ch+arg_8]
.text:0040F370                 lea     edi, [ebp+esi+0]
.text:0040F374                 cmp     edi, ebx
.text:0040F376                 mov     ebp, edi
.text:0040F378                 jbe     loc_40F457
.text:0040F37E
.text:0040F37E loc_40F37E:                             ; CODE XREF: __quicksort+1A6↓j
.text:0040F37E                 cmp     esi, [esp+14Ch+arg_0]
.text:0040F385                 jz      short loc_40F3A6
.text:0040F387                 mov     edi, [esp+14Ch+arg_8]
.text:0040F38E                 mov     ebx, esi
.text:0040F390                 mov     ecx, [esp+14Ch+arg_0]
.text:0040F397
.text:0040F397 loc_40F397:                             ; CODE XREF: __quicksort+D4↓j
.text:0040F397                 movzx   edx, byte ptr [ebx]
.text:0040F39A                 movzx   eax, byte ptr [ecx]
.text:0040F39D                 mov     [ebx], al
.text:0040F39F                 inc     ebx
.text:0040F3A0                 mov     [ecx], dl
.text:0040F3A2                 inc     ecx
.text:0040F3A3                 dec     edi
.text:0040F3A4                 jnz     short loc_40F397
.text:0040F3A6
.text:0040F3A6 loc_40F3A6:                             ; CODE XREF: __quicksort+B5↑j
.text:0040F3A6                 mov     esi, [esp+14Ch+arg_8]
.text:0040F3AD                 lea     edi, [esi+ebp]
.text:0040F3B0                 cmp     edi, [esp+14Ch+var_134]
.text:0040F3B4                 ja      loc_40F44C
.text:0040F3BA
.text:0040F3BA loc_40F3BA:                             ; CODE XREF: __quicksort+176↓j
.text:0040F3BA                 mov     esi, edi
.text:0040F3BC                 lea     esi, [esi+0]
.text:0040F3C0
.text:0040F3C0 loc_40F3C0:                             ; CODE XREF: __quicksort+109↓j
.text:0040F3C0                 mov     [esp+14Ch+var_14C], edi
.text:0040F3C3                 mov     ebx, [esp+14Ch+arg_8]
.text:0040F3CA                 sub     esi, ebx
.text:0040F3CC                 mov     [esp+14Ch+var_148], esi
.text:0040F3D0                 call    [esp+14Ch+arg_C]
.text:0040F3D7                 test    eax, eax
.text:0040F3D9                 js      short loc_40F3C0
.text:0040F3DB                 mov     edx, [esp+14Ch+arg_8]
.text:0040F3E2                 mov     eax, [esp+14Ch+arg_8]
.text:0040F3E9                 add     esi, edx
.text:0040F3EB                 cmp     esi, edi
.text:0040F3ED                 lea     ebp, [eax+edi]
.text:0040F3F0                 jz      short loc_40F440
.text:0040F3F2                 lea     ebx, [ebp-1]
.text:0040F3F5                 cmp     ebx, edi
.text:0040F3F7                 jb      short loc_40F440
.text:0040F3F9                 lea     esi, [esi+0]
.text:0040F400
.text:0040F400 loc_40F400:                             ; CODE XREF: __quicksort+16E↓j
.text:0040F400                 movzx   ecx, byte ptr [ebx]
.text:0040F403                 mov     edx, ebx
.text:0040F405                 mov     eax, [esp+14Ch+arg_8]
.text:0040F40C                 mov     [esp+14Ch+var_135], cl
.text:0040F410                 sub     edx, eax
.text:0040F412                 cmp     edx, esi
.text:0040F414                 mov     ecx, ebx
.text:0040F416                 jb      short loc_40F434
.text:0040F418                 nop
.text:0040F419                 lea     esi, [esi+0]
.text:0040F420
.text:0040F420 loc_40F420:                             ; CODE XREF: __quicksort+162↓j
.text:0040F420                 movzx   eax, byte ptr [edx]
.text:0040F423                 mov     [ecx], al
.text:0040F425                 mov     eax, [esp+14Ch+arg_8]
.text:0040F42C                 mov     ecx, edx
.text:0040F42E                 sub     edx, eax
.text:0040F430                 cmp     edx, esi
.text:0040F432                 jnb     short loc_40F420
.text:0040F434
.text:0040F434 loc_40F434:                             ; CODE XREF: __quicksort+146↑j
.text:0040F434                 movzx   eax, [esp+14Ch+var_135]
.text:0040F439                 dec     ebx
.text:0040F43A                 cmp     ebx, edi
.text:0040F43C                 mov     [ecx], al
.text:0040F43E                 jnb     short loc_40F400
.text:0040F440
.text:0040F440 loc_40F440:                             ; CODE XREF: __quicksort+120↑j
.text:0040F440                                         ; __quicksort+127↑j
.text:0040F440                 cmp     ebp, [esp+14Ch+var_134]
.text:0040F444                 mov     edi, ebp
.text:0040F446                 jbe     loc_40F3BA
.text:0040F44C
.text:0040F44C loc_40F44C:                             ; CODE XREF: __quicksort+21↑j
.text:0040F44C                                         ; __quicksort+E4↑j
.text:0040F44C                 add     esp, 13Ch
.text:0040F452                 pop     ebx
.text:0040F453                 pop     esi
.text:0040F454                 pop     edi
.text:0040F455                 pop     ebp
.text:0040F456                 retn
.text:0040F457 ; ---------------------------------------------------------------------------
.text:0040F457
.text:0040F457 loc_40F457:                             ; CODE XREF: __quicksort+A8↑j
.text:0040F457                                         ; __quicksort+1A4↓j
.text:0040F457                 mov     [esp+14Ch+var_148], esi
.text:0040F45B                 mov     [esp+14Ch+var_14C], edi
.text:0040F45E                 call    [esp+14Ch+arg_C]
.text:0040F465                 test    eax, eax
.text:0040F467                 js      short loc_40F47B
.text:0040F469
.text:0040F469 loc_40F469:                             ; CODE XREF: __quicksort+1AD↓j
.text:0040F469                 mov     ecx, [esp+14Ch+arg_8]
.text:0040F470                 add     edi, ecx
.text:0040F472                 cmp     edi, ebx
.text:0040F474                 jbe     short loc_40F457
.text:0040F476                 jmp     loc_40F37E
.text:0040F47B ; ---------------------------------------------------------------------------
.text:0040F47B
.text:0040F47B loc_40F47B:                             ; CODE XREF: __quicksort+197↑j
.text:0040F47B                 mov     esi, edi
.text:0040F47D                 jmp     short loc_40F469
.text:0040F47F ; ---------------------------------------------------------------------------
.text:0040F47F
.text:0040F47F loc_40F47F:                             ; CODE XREF: __quicksort+60↑j
.text:0040F47F                                         ; __quicksort+30D↓j
.text:0040F47F                 mov     eax, [esp+14Ch+var_128]
.text:0040F483                 xor     edx, edx
.text:0040F485                 mov     ebp, [esp+14Ch+var_124]
.text:0040F489                 mov     edi, [esp+14Ch+arg_8]
.text:0040F490                 mov     ebx, [esp+14Ch+var_124]
.text:0040F494                 sub     eax, ebp
.text:0040F496                 div     [esp+14Ch+arg_8]
.text:0040F49D                 mov     ecx, [esp+14Ch+var_124]
.text:0040F4A1                 mov     [esp+14Ch+var_148], ecx
.text:0040F4A5                 shr     eax, 1
.text:0040F4A7                 imul    eax, edi
.text:0040F4AA                 add     eax, ebx
.text:0040F4AC                 mov     [esp+14Ch+var_130], eax
.text:0040F4B0                 mov     esi, [esp+14Ch+var_130]
.text:0040F4B4                 mov     [esp+14Ch+var_14C], esi
.text:0040F4B7                 call    [esp+14Ch+arg_C]
.text:0040F4BE                 test    eax, eax
.text:0040F4C0                 js      loc_40F6C4
.text:0040F4C6
.text:0040F4C6 loc_40F4C6:                             ; CODE XREF: __quicksort+412↓j
.text:0040F4C6                 mov     edx, [esp+14Ch+var_130]
.text:0040F4CA                 mov     eax, [esp+14Ch+var_128]
.text:0040F4CE                 mov     [esp+14Ch+var_148], edx
.text:0040F4D2                 mov     [esp+14Ch+var_14C], eax
.text:0040F4D5                 call    [esp+14Ch+arg_C]
.text:0040F4DC                 test    eax, eax
.text:0040F4DE                 js      loc_40F665
.text:0040F4E4
.text:0040F4E4 loc_40F4E4:                             ; CODE XREF: __quicksort+3CB↓j
.text:0040F4E4                                         ; __quicksort+3EF↓j
.text:0040F4E4                 mov     edi, [esp+14Ch+arg_8]
.text:0040F4EB                 mov     ebp, [esp+14Ch+var_124]
.text:0040F4EF                 mov     ebx, [esp+14Ch+arg_8]
.text:0040F4F6                 add     ebp, edi
.text:0040F4F8                 mov     edi, [esp+14Ch+var_128]
.text:0040F4FC                 sub     edi, ebx
.text:0040F4FE                 mov     esi, esi
.text:0040F500
.text:0040F500 loc_40F500:                             ; CODE XREF: __quicksort+2C7↓j
.text:0040F500                                         ; __quicksort+390↓j
.text:0040F500                 mov     [esp+14Ch+var_14C], ebp
.text:0040F503                 mov     esi, [esp+14Ch+var_130]
.text:0040F507                 mov     [esp+14Ch+var_148], esi
.text:0040F50B                 call    [esp+14Ch+arg_C]
.text:0040F512                 test    eax, eax
.text:0040F514                 js      loc_40F657
.text:0040F51A                 lea     esi, [esi+0]
.text:0040F520
.text:0040F520 loc_40F520:                             ; CODE XREF: __quicksort+26F↓j
.text:0040F520                 mov     [esp+14Ch+var_148], edi
.text:0040F524                 mov     eax, [esp+14Ch+var_130]
.text:0040F528                 mov     [esp+14Ch+var_14C], eax
.text:0040F52B                 call    [esp+14Ch+arg_C]
.text:0040F532                 test    eax, eax
.text:0040F534                 jns     short loc_40F541
.text:0040F536                 mov     ecx, [esp+14Ch+arg_8]
.text:0040F53D                 sub     edi, ecx
.text:0040F53F                 jmp     short loc_40F520
.text:0040F541 ; ---------------------------------------------------------------------------
.text:0040F541
.text:0040F541 loc_40F541:                             ; CODE XREF: __quicksort+264↑j
.text:0040F541                 cmp     ebp, edi
.text:0040F543                 jnb     loc_40F63E
.text:0040F549                 mov     esi, [esp+14Ch+arg_8]
.text:0040F550                 mov     ebx, ebp
.text:0040F552                 mov     ecx, edi
.text:0040F554                 lea     esi, [esi+0]
.text:0040F55A                 lea     edi, [edi+0]
.text:0040F560
.text:0040F560 loc_40F560:                             ; CODE XREF: __quicksort+29D↓j
.text:0040F560                 movzx   edx, byte ptr [ebx]
.text:0040F563                 movzx   eax, byte ptr [ecx]
.text:0040F566                 mov     [ebx], al
.text:0040F568                 inc     ebx
.text:0040F569                 mov     [ecx], dl
.text:0040F56B                 inc     ecx
.text:0040F56C                 dec     esi
.text:0040F56D                 jnz     short loc_40F560
.text:0040F56F                 cmp     [esp+14Ch+var_130], ebp
.text:0040F573                 jz      loc_40F635
.text:0040F579                 cmp     [esp+14Ch+var_130], edi
.text:0040F57D                 jz      loc_40F62C
.text:0040F583
.text:0040F583 loc_40F583:                             ; CODE XREF: __quicksort+360↓j
.text:0040F583                                         ; __quicksort+369↓j
.text:0040F583                 mov     edx, [esp+14Ch+arg_8]
.text:0040F58A                 mov     ebx, [esp+14Ch+arg_8]
.text:0040F591                 add     ebp, edx
.text:0040F593                 sub     edi, ebx
.text:0040F595
.text:0040F595 loc_40F595:                             ; CODE XREF: __quicksort+370↓j
.text:0040F595                 cmp     ebp, edi
.text:0040F597                 jbe     loc_40F500
.text:0040F59D
.text:0040F59D loc_40F59D:                             ; CODE XREF: __quicksort+382↓j
.text:0040F59D                 mov     esi, [esp+14Ch+var_124]
.text:0040F5A1                 mov     eax, edi
.text:0040F5A3                 sub     eax, esi
.text:0040F5A5                 cmp     eax, [esp+14Ch+var_120]
.text:0040F5A9                 ja      short loc_40F5E8
.text:0040F5AB                 mov     [esp+14Ch+var_124], ebp
.text:0040F5AF                 mov     edi, [esp+14Ch+var_128]
.text:0040F5B3                 sub     edi, ebp
.text:0040F5B5                 cmp     edi, [esp+14Ch+var_120]
.text:0040F5B9                 ja      short loc_40F5D5
.text:0040F5BB                 sub     [esp+14Ch+var_12C], 8
.text:0040F5C0                 mov     edx, [esp+14Ch+var_12C]
.text:0040F5C4                 mov     ecx, [esp+14Ch+var_12C]
.text:0040F5C8                 mov     ebx, [edx]
.text:0040F5CA                 mov     ebp, [ecx+4]
.text:0040F5CD                 mov     [esp+14Ch+var_124], ebx
.text:0040F5D1                 mov     [esp+14Ch+var_128], ebp
.text:0040F5D5
.text:0040F5D5 loc_40F5D5:                             ; CODE XREF: __quicksort+2E9↑j
.text:0040F5D5                                         ; __quicksort+340↓j ...
.text:0040F5D5                 lea     eax, [esp+14Ch+var_11C]
.text:0040F5D9                 cmp     eax, [esp+14Ch+var_12C]
.text:0040F5DD                 jb      loc_40F47F
.text:0040F5E3                 jmp     loc_40F336
.text:0040F5E8 ; ---------------------------------------------------------------------------
.text:0040F5E8
.text:0040F5E8 loc_40F5E8:                             ; CODE XREF: __quicksort+2D9↑j
.text:0040F5E8                 mov     edx, [esp+14Ch+var_128]
.text:0040F5EC                 sub     edx, ebp
.text:0040F5EE                 cmp     edx, [esp+14Ch+var_120]
.text:0040F5F2                 jbe     short loc_40F626
.text:0040F5F4                 cmp     eax, edx
.text:0040F5F6                 jle     short loc_40F612
.text:0040F5F8                 mov     ecx, [esp+14Ch+var_12C]
.text:0040F5FC                 mov     ebx, [esp+14Ch+var_124]
.text:0040F600                 mov     [esp+14Ch+var_124], ebp
.text:0040F604                 mov     [ecx+4], edi
.text:0040F607                 mov     [ecx], ebx
.text:0040F609                 add     ecx, 8
.text:0040F60C                 mov     [esp+14Ch+var_12C], ecx
.text:0040F610                 jmp     short loc_40F5D5
.text:0040F612 ; ---------------------------------------------------------------------------
.text:0040F612
.text:0040F612 loc_40F612:                             ; CODE XREF: __quicksort+326↑j
.text:0040F612                 mov     esi, [esp+14Ch+var_12C]
.text:0040F616                 mov     [esi], ebp
.text:0040F618                 mov     ebp, [esp+14Ch+var_128]
.text:0040F61C                 mov     [esi+4], ebp
.text:0040F61F                 add     esi, 8
.text:0040F622                 mov     [esp+14Ch+var_12C], esi
.text:0040F626
.text:0040F626 loc_40F626:                             ; CODE XREF: __quicksort+322↑j
.text:0040F626                 mov     [esp+14Ch+var_128], edi
.text:0040F62A                 jmp     short loc_40F5D5
.text:0040F62C ; ---------------------------------------------------------------------------
.text:0040F62C
.text:0040F62C loc_40F62C:                             ; CODE XREF: __quicksort+2AD↑j
.text:0040F62C                 mov     [esp+14Ch+var_130], ebp
.text:0040F630                 jmp     loc_40F583
.text:0040F635 ; ---------------------------------------------------------------------------
.text:0040F635
.text:0040F635 loc_40F635:                             ; CODE XREF: __quicksort+2A3↑j
.text:0040F635                 mov     [esp+14Ch+var_130], edi
.text:0040F639                 jmp     loc_40F583
.text:0040F63E ; ---------------------------------------------------------------------------
.text:0040F63E
.text:0040F63E loc_40F63E:                             ; CODE XREF: __quicksort+273↑j
.text:0040F63E                 cmp     ebp, edi
.text:0040F640                 jnz     loc_40F595
.text:0040F646                 mov     esi, [esp+14Ch+arg_8]
.text:0040F64D                 lea     ebp, [esi+edi]
.text:0040F650                 sub     edi, esi
.text:0040F652                 jmp     loc_40F59D
.text:0040F657 ; ---------------------------------------------------------------------------
.text:0040F657
.text:0040F657 loc_40F657:                             ; CODE XREF: __quicksort+244↑j
.text:0040F657                 mov     edx, [esp+14Ch+arg_8]
.text:0040F65E                 add     ebp, edx
.text:0040F660                 jmp     loc_40F500
.text:0040F665 ; ---------------------------------------------------------------------------
.text:0040F665
.text:0040F665 loc_40F665:                             ; CODE XREF: __quicksort+20E↑j
.text:0040F665                 mov     esi, [esp+14Ch+arg_8]
.text:0040F66C                 mov     ebx, [esp+14Ch+var_130]
.text:0040F670                 mov     ecx, [esp+14Ch+var_128]
.text:0040F674
.text:0040F674 loc_40F674:                             ; CODE XREF: __quicksort+3B1↓j
.text:0040F674                 movzx   edx, byte ptr [ebx]
.text:0040F677                 movzx   eax, byte ptr [ecx]
.text:0040F67A                 mov     [ebx], al
.text:0040F67C                 inc     ebx
.text:0040F67D                 mov     [ecx], dl
.text:0040F67F                 inc     ecx
.text:0040F680                 dec     esi
.text:0040F681                 jnz     short loc_40F674
.text:0040F683                 mov     ecx, [esp+14Ch+var_124]
.text:0040F687                 mov     esi, [esp+14Ch+var_130]
.text:0040F68B                 mov     [esp+14Ch+var_148], ecx
.text:0040F68F                 mov     [esp+14Ch+var_14C], esi
.text:0040F692                 call    [esp+14Ch+arg_C]
.text:0040F699                 test    eax, eax
.text:0040F69B                 jns     loc_40F4E4
.text:0040F6A1                 mov     esi, [esp+14Ch+arg_8]
.text:0040F6A8                 mov     ebx, [esp+14Ch+var_130]
.text:0040F6AC                 mov     ecx, [esp+14Ch+var_124]
.text:0040F6B0
.text:0040F6B0 loc_40F6B0:                             ; CODE XREF: __quicksort+3ED↓j
.text:0040F6B0                 movzx   edx, byte ptr [ebx]
.text:0040F6B3                 movzx   eax, byte ptr [ecx]
.text:0040F6B6                 mov     [ebx], al
.text:0040F6B8                 inc     ebx
.text:0040F6B9                 mov     [ecx], dl
.text:0040F6BB                 inc     ecx
.text:0040F6BC                 dec     esi
.text:0040F6BD                 jnz     short loc_40F6B0
.text:0040F6BF                 jmp     loc_40F4E4
.text:0040F6C4 ; ---------------------------------------------------------------------------
.text:0040F6C4
.text:0040F6C4 loc_40F6C4:                             ; CODE XREF: __quicksort+1F0↑j
.text:0040F6C4                 mov     esi, [esp+14Ch+arg_8]
.text:0040F6CB                 mov     ebx, [esp+14Ch+var_130]
.text:0040F6CF                 mov     ecx, [esp+14Ch+var_124]
.text:0040F6D3
.text:0040F6D3 loc_40F6D3:                             ; CODE XREF: __quicksort+410↓j
.text:0040F6D3                 movzx   edx, byte ptr [ebx]
.text:0040F6D6                 movzx   eax, byte ptr [ecx]
.text:0040F6D9                 mov     [ebx], al
.text:0040F6DB                 inc     ebx
.text:0040F6DC                 mov     [ecx], dl
.text:0040F6DE                 inc     ecx
.text:0040F6DF                 dec     esi
.text:0040F6E0                 jnz     short loc_40F6D3
.text:0040F6E2                 jmp     loc_40F4C6
.text:0040F6E2 __quicksort     endp
.text:0040F6E2
.text:0040F6E2 ; ---------------------------------------------------------------------------
.text:0040F6E7                 align 10h
.text:0040F6F0
.text:0040F6F0 ; =============== S U B R O U T I N E =======================================
.text:0040F6F0
.text:0040F6F0 ; Attributes: info_from_lumina
.text:0040F6F0
.text:0040F6F0 _sysconf        proc near               ; CODE XREF: sub_40CFA0+F7↑p
.text:0040F6F0                                         ; sub_40CFA0+11E↑p
.text:0040F6F0
.text:0040F6F0 arg_0           = dword ptr  4
.text:0040F6F0
.text:0040F6F0                 sub     esp, 0Ch
.text:0040F6F3                 mov     eax, [esp+0Ch+arg_0]
.text:0040F6F7                 cmp     eax, 83h        ; switch 132 cases
.text:0040F6FC                 ja      def_40F702      ; jumptable 67026652 default case, cases 50,56
.text:0040F6FC                                         ; jumptable 0040F702 default case, cases 50,56
.text:0040F702                 jmp     ds:jpt_40F702[eax*4] ; switch jump
.text:0040F702 ; ---------------------------------------------------------------------------
.text:0040F709                 align 4
.text:0040F70C jpt_40F702      dd offset loc_40F944, offset loc_40F944, offset loc_40F944
.text:0040F70C                                         ; DATA XREF: _sysconf+12↑r
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C ; jump table for switch statement
.text:0040F70C                 dd offset loc_40F94B, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40F9F8, offset loc_40F930
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40F967, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset def_40F702
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40F96E, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset def_40F702
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40F975, offset loc_40F975, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40F97C
.text:0040F70C                 dd offset loc_40F984, offset loc_40F98C, offset loc_40F994
.text:0040F70C                 dd offset loc_40F9AA, offset loc_40F99C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40F9A3
.text:0040F70C                 dd offset loc_40F9D0, offset loc_40F9DA, offset loc_40F9AA
.text:0040F70C                 dd offset loc_40F9B1, offset loc_40F9B8, offset loc_40F9B8
.text:0040F70C                 dd offset loc_40F9BF, offset loc_40F9C9, offset loc_40F9E4
.text:0040F70C                 dd offset loc_40F9D0, offset loc_40F9DA, offset loc_40F9E4
.text:0040F70C                 dd offset loc_40F9EE, offset loc_40F9F8, offset loc_40F930
.text:0040F70C                 dd offset loc_40F930, offset loc_40FA02, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F70C                 dd offset loc_40FA0C, offset loc_40FA0C, offset loc_40FA0C
.text:0040F91C ; ---------------------------------------------------------------------------
.text:0040F91C
.text:0040F91C def_40F702:                             ; CODE XREF: _sysconf+C↑j
.text:0040F91C                                         ; _sysconf+12↑j
.text:0040F91C                                         ; DATA XREF: ...
.text:0040F91C                 call    _errno          ; jumptable 67026652 default case, cases 50,56
.text:0040F91C                                         ; jumptable 0040F702 default case, cases 50,56
.text:0040F921                 mov     dword ptr [eax], 16h
.text:0040F927                 mov     esi, esi
.text:0040F929                 lea     edi, [edi+0]
.text:0040F930
.text:0040F930 loc_40F930:                             ; CODE XREF: _sysconf+12↑j
.text:0040F930                                         ; _sysconf+327↓j
.text:0040F930                                         ; DATA XREF: ...
.text:0040F930                 mov     eax, 0FFFFFFFFh ; jumptable 67026652 cases 41,116,117
.text:0040F930                                         ; jumptable 0040F702 cases 41,116,117
.text:0040F935                 lea     esi, [esi+0]
.text:0040F939                 lea     edi, [edi+0]
.text:0040F940
.text:0040F940 loc_40F940:                             ; CODE XREF: _sysconf+259↓j
.text:0040F940                                         ; _sysconf+26C↓j ...
.text:0040F940                 add     esp, 0Ch
.text:0040F943                 retn
.text:0040F944 ; ---------------------------------------------------------------------------
.text:0040F944
.text:0040F944 loc_40F944:                             ; CODE XREF: _sysconf+12↑j
.text:0040F944                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F944                 mov     eax, 989680h    ; jumptable 67026652 cases 0-2
.text:0040F944                                         ; jumptable 0040F702 cases 0-2
.text:0040F949                 jmp     short loc_40F940
.text:0040F94B ; ---------------------------------------------------------------------------
.text:0040F94B
.text:0040F94B loc_40F94B:                             ; CODE XREF: _sysconf+12↑j
.text:0040F94B                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F94B                 call    sub_410090      ; jumptable 67026652 case 6
.text:0040F94B                                         ; jumptable 0040F702 case 6
.text:0040F950                 cmp     eax, 6
.text:0040F953                 mov     edx, 6
.text:0040F958                 jg      short loc_40F95E
.text:0040F95A
.text:0040F95A loc_40F95A:                             ; CODE XREF: _sysconf+275↓j
.text:0040F95A                 mov     eax, edx
.text:0040F95C                 jmp     short loc_40F940
.text:0040F95E ; ---------------------------------------------------------------------------
.text:0040F95E
.text:0040F95E loc_40F95E:                             ; CODE XREF: _sysconf+268↑j
.text:0040F95E                 call    sub_410090
.text:0040F963                 mov     edx, eax
.text:0040F965                 jmp     short loc_40F95A
.text:0040F967 ; ---------------------------------------------------------------------------
.text:0040F967
.text:0040F967 loc_40F967:                             ; CODE XREF: _sysconf+12↑j
.text:0040F967                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F967                 mov     eax, 800h       ; jumptable 67026652 case 45
.text:0040F967                                         ; jumptable 0040F702 case 45
.text:0040F96C                 jmp     short loc_40F940
.text:0040F96E ; ---------------------------------------------------------------------------
.text:0040F96E
.text:0040F96E loc_40F96E:                             ; CODE XREF: _sysconf+12↑j
.text:0040F96E                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F96E                 mov     eax, 1          ; jumptable 67026652 case 52
.text:0040F96E                                         ; jumptable 0040F702 case 52
.text:0040F973                 jmp     short loc_40F940
.text:0040F975 ; ---------------------------------------------------------------------------
.text:0040F975
.text:0040F975 loc_40F975:                             ; CODE XREF: _sysconf+12↑j
.text:0040F975                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F975                 mov     eax, 400h       ; jumptable 67026652 cases 69,70
.text:0040F975                                         ; jumptable 0040F702 cases 69,70
.text:0040F97A                 jmp     short loc_40F940
.text:0040F97C ; ---------------------------------------------------------------------------
.text:0040F97C
.text:0040F97C loc_40F97C:                             ; CODE XREF: _sysconf+12↑j
.text:0040F97C                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F97C                 add     esp, 0Ch        ; jumptable 67026652 case 83
.text:0040F97C                                         ; jumptable 0040F702 case 83
.text:0040F97F                 jmp     sub_40FF80
.text:0040F984 ; ---------------------------------------------------------------------------
.text:0040F984
.text:0040F984 loc_40F984:                             ; CODE XREF: _sysconf+12↑j
.text:0040F984                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F984                 add     esp, 0Ch        ; jumptable 67026652 case 84
.text:0040F984                                         ; jumptable 0040F702 case 84
.text:0040F987                 jmp     sub_40FF30
.text:0040F98C ; ---------------------------------------------------------------------------
.text:0040F98C
.text:0040F98C loc_40F98C:                             ; CODE XREF: _sysconf+12↑j
.text:0040F98C                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F98C                 add     esp, 0Ch        ; jumptable 67026652 case 85
.text:0040F98C                                         ; jumptable 0040F702 case 85
.text:0040F98F                 jmp     sub_40FFD0
.text:0040F994 ; ---------------------------------------------------------------------------
.text:0040F994
.text:0040F994 loc_40F994:                             ; CODE XREF: _sysconf+12↑j
.text:0040F994                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F994                 add     esp, 0Ch        ; jumptable 67026652 case 86
.text:0040F994                                         ; jumptable 0040F702 case 86
.text:0040F997                 jmp     sub_410030
.text:0040F99C ; ---------------------------------------------------------------------------
.text:0040F99C
.text:0040F99C loc_40F99C:                             ; CODE XREF: _sysconf+12↑j
.text:0040F99C                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F99C                 mov     eax, 200h       ; jumptable 67026652 case 88
.text:0040F99C                                         ; jumptable 0040F702 case 88
.text:0040F9A1                 jmp     short loc_40F940
.text:0040F9A3 ; ---------------------------------------------------------------------------
.text:0040F9A3
.text:0040F9A3 loc_40F9A3:                             ; CODE XREF: _sysconf+12↑j
.text:0040F9A3                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F9A3                 mov     eax, 8          ; jumptable 67026652 case 101
.text:0040F9A3                                         ; jumptable 0040F702 case 101
.text:0040F9A8                 jmp     short loc_40F940
.text:0040F9AA ; ---------------------------------------------------------------------------
.text:0040F9AA
.text:0040F9AA loc_40F9AA:                             ; CODE XREF: _sysconf+12↑j
.text:0040F9AA                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F9AA                 mov     eax, 7FFFFFFFh  ; jumptable 67026652 cases 87,104
.text:0040F9AA                                         ; jumptable 0040F702 cases 87,104
.text:0040F9AF                 jmp     short loc_40F940
.text:0040F9B1 ; ---------------------------------------------------------------------------
.text:0040F9B1
.text:0040F9B1 loc_40F9B1:                             ; CODE XREF: _sysconf+12↑j
.text:0040F9B1                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F9B1                 mov     eax, 80000000h  ; jumptable 67026652 case 105
.text:0040F9B1                                         ; jumptable 0040F702 case 105
.text:0040F9B6                 jmp     short loc_40F940
.text:0040F9B8 ; ---------------------------------------------------------------------------
.text:0040F9B8
.text:0040F9B8 loc_40F9B8:                             ; CODE XREF: _sysconf+12↑j
.text:0040F9B8                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F9B8                 mov     eax, 20h ; ' '  ; jumptable 67026652 cases 106,107
.text:0040F9B8                                         ; jumptable 0040F702 cases 106,107
.text:0040F9BD                 jmp     short loc_40F940
.text:0040F9BF ; ---------------------------------------------------------------------------
.text:0040F9BF
.text:0040F9BF loc_40F9BF:                             ; CODE XREF: _sysconf+12↑j
.text:0040F9BF                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F9BF                 mov     eax, 2          ; jumptable 67026652 case 108
.text:0040F9BF                                         ; jumptable 0040F702 case 108
.text:0040F9C4                 jmp     loc_40F940
.text:0040F9C9 ; ---------------------------------------------------------------------------
.text:0040F9C9
.text:0040F9C9 loc_40F9C9:                             ; CODE XREF: _sysconf+12↑j
.text:0040F9C9                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F9C9                 xor     eax, eax        ; jumptable 67026652 case 109
.text:0040F9C9                                         ; jumptable 0040F702 case 109
.text:0040F9CB                 jmp     loc_40F940
.text:0040F9D0 ; ---------------------------------------------------------------------------
.text:0040F9D0
.text:0040F9D0 loc_40F9D0:                             ; CODE XREF: _sysconf+12↑j
.text:0040F9D0                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F9D0                 mov     eax, 7Fh        ; jumptable 67026652 cases 102,111
.text:0040F9D0                                         ; jumptable 0040F702 cases 102,111
.text:0040F9D5                 jmp     loc_40F940
.text:0040F9DA ; ---------------------------------------------------------------------------
.text:0040F9DA
.text:0040F9DA loc_40F9DA:                             ; CODE XREF: _sysconf+12↑j
.text:0040F9DA                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F9DA                 mov     eax, 0FFFFFF80h ; jumptable 67026652 cases 103,112
.text:0040F9DA                                         ; jumptable 0040F702 cases 103,112
.text:0040F9DF                 jmp     loc_40F940
.text:0040F9E4 ; ---------------------------------------------------------------------------
.text:0040F9E4
.text:0040F9E4 loc_40F9E4:                             ; CODE XREF: _sysconf+12↑j
.text:0040F9E4                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F9E4                 mov     eax, 7FFFh      ; jumptable 67026652 cases 110,113
.text:0040F9E4                                         ; jumptable 0040F702 cases 110,113
.text:0040F9E9                 jmp     loc_40F940
.text:0040F9EE ; ---------------------------------------------------------------------------
.text:0040F9EE
.text:0040F9EE loc_40F9EE:                             ; CODE XREF: _sysconf+12↑j
.text:0040F9EE                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F9EE                 mov     eax, 0FFFF8000h ; jumptable 67026652 case 114
.text:0040F9EE                                         ; jumptable 0040F702 case 114
.text:0040F9F3                 jmp     loc_40F940
.text:0040F9F8 ; ---------------------------------------------------------------------------
.text:0040F9F8
.text:0040F9F8 loc_40F9F8:                             ; CODE XREF: _sysconf+12↑j
.text:0040F9F8                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040F9F8                 mov     eax, 0FFh       ; jumptable 67026652 cases 40,115
.text:0040F9F8                                         ; jumptable 0040F702 cases 40,115
.text:0040F9FD                 jmp     loc_40F940
.text:0040FA02 ; ---------------------------------------------------------------------------
.text:0040FA02
.text:0040FA02 loc_40FA02:                             ; CODE XREF: _sysconf+12↑j
.text:0040FA02                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040FA02                 mov     eax, 0FFFFh     ; jumptable 67026652 case 118
.text:0040FA02                                         ; jumptable 0040F702 case 118
.text:0040FA07                 jmp     loc_40F940
.text:0040FA0C ; ---------------------------------------------------------------------------
.text:0040FA0C
.text:0040FA0C loc_40FA0C:                             ; CODE XREF: _sysconf+12↑j
.text:0040FA0C                                         ; DATA XREF: _sysconf:jpt_40F702↑o
.text:0040FA0C                 call    _errno          ; jumptable 67026652 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:0040FA0C                                         ; jumptable 0040F702 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:0040FA11                 mov     dword ptr [eax], 28h ; '('
.text:0040FA17                 jmp     loc_40F930      ; jumptable 67026652 cases 41,116,117
.text:0040FA17 _sysconf        endp                    ; jumptable 0040F702 cases 41,116,117
.text:0040FA17
.text:0040FA17 ; ---------------------------------------------------------------------------
.text:0040FA1C                 align 10h
.text:0040FA20
.text:0040FA20 ; =============== S U B R O U T I N E =======================================
.text:0040FA20
.text:0040FA20
.text:0040FA20 sub_40FA20      proc near               ; CODE XREF: sub_40CDB0+134↑p
.text:0040FA20                                         ; sub_40CDB0+167↑p
.text:0040FA20
.text:0040FA20 var_1C          = dword ptr -1Ch
.text:0040FA20 var_18          = dword ptr -18h
.text:0040FA20 var_14          = dword ptr -14h
.text:0040FA20 arg_0           = dword ptr  4
.text:0040FA20 arg_4           = dword ptr  8
.text:0040FA20 arg_8           = dword ptr  0Ch
.text:0040FA20
.text:0040FA20                 push    edi
.text:0040FA21                 push    esi
.text:0040FA22                 push    ebx
.text:0040FA23                 sub     esp, 10h
.text:0040FA26                 mov     edi, [esp+1Ch+arg_8]
.text:0040FA2A                 mov     esi, [esp+1Ch+arg_0]
.text:0040FA2E                 mov     ebx, [esp+1Ch+arg_4]
.text:0040FA32                 cmp     edi, 0Fh
.text:0040FA35                 jbe     short loc_40FA80
.text:0040FA37                 mov     ecx, esi
.text:0040FA39                 neg     ecx
.text:0040FA3B                 and     ecx, 3
.text:0040FA3E                 sub     edi, ecx
.text:0040FA40                 mov     edx, ecx
.text:0040FA42                 test    ecx, ecx
.text:0040FA44                 jz      short loc_40FA5A
.text:0040FA46                 lea     esi, [esi+0]
.text:0040FA49                 lea     edi, [edi+0]
.text:0040FA50
.text:0040FA50 loc_40FA50:                             ; CODE XREF: sub_40FA20+38↓j
.text:0040FA50                 movzx   ecx, byte ptr [ebx]
.text:0040FA53                 inc     ebx
.text:0040FA54                 mov     [esi], cl
.text:0040FA56                 inc     esi
.text:0040FA57                 dec     edx
.text:0040FA58                 jnz     short loc_40FA50
.text:0040FA5A
.text:0040FA5A loc_40FA5A:                             ; CODE XREF: sub_40FA20+24↑j
.text:0040FA5A                 test    bl, 3
.text:0040FA5D                 jnz     short loc_40FAA3
.text:0040FA5F                 mov     [esp+1Ch+var_18], ebx
.text:0040FA63                 mov     edx, edi
.text:0040FA65                 shr     edx, 2
.text:0040FA68                 mov     [esp+1Ch+var_14], edx
.text:0040FA6C                 mov     [esp+1Ch+var_1C], esi
.text:0040FA6F                 call    sub_4100B0
.text:0040FA74
.text:0040FA74 loc_40FA74:                             ; CODE XREF: sub_40FA20+98↓j
.text:0040FA74                 mov     edx, edi
.text:0040FA76                 and     edx, 0FFFFFFFCh
.text:0040FA79                 and     edi, 3
.text:0040FA7C                 add     ebx, edx
.text:0040FA7E                 add     esi, edx
.text:0040FA80
.text:0040FA80 loc_40FA80:                             ; CODE XREF: sub_40FA20+15↑j
.text:0040FA80                 test    edi, edi
.text:0040FA82                 mov     edx, edi
.text:0040FA84                 jz      short loc_40FA9A
.text:0040FA86                 lea     esi, [esi+0]
.text:0040FA89                 lea     edi, [edi+0]
.text:0040FA90
.text:0040FA90 loc_40FA90:                             ; CODE XREF: sub_40FA20+78↓j
.text:0040FA90                 movzx   ecx, byte ptr [ebx]
.text:0040FA93                 inc     ebx
.text:0040FA94                 mov     [esi], cl
.text:0040FA96                 inc     esi
.text:0040FA97                 dec     edx
.text:0040FA98                 jnz     short loc_40FA90
.text:0040FA9A
.text:0040FA9A loc_40FA9A:                             ; CODE XREF: sub_40FA20+64↑j
.text:0040FA9A                 add     esp, 10h
.text:0040FA9D                 mov     eax, esi
.text:0040FA9F                 pop     ebx
.text:0040FAA0                 pop     esi
.text:0040FAA1                 pop     edi
.text:0040FAA2                 retn
.text:0040FAA3 ; ---------------------------------------------------------------------------
.text:0040FAA3
.text:0040FAA3 loc_40FAA3:                             ; CODE XREF: sub_40FA20+3D↑j
.text:0040FAA3                 mov     [esp+1Ch+var_18], ebx
.text:0040FAA7                 mov     ecx, edi
.text:0040FAA9                 shr     ecx, 2
.text:0040FAAC                 mov     [esp+1Ch+var_14], ecx
.text:0040FAB0                 mov     [esp+1Ch+var_1C], esi
.text:0040FAB3                 call    sub_4101B0
.text:0040FAB8                 jmp     short loc_40FA74
.text:0040FAB8 sub_40FA20      endp
.text:0040FAB8
.text:0040FAB8 ; ---------------------------------------------------------------------------
.text:0040FABA                 align 10h
.text:0040FAC0
.text:0040FAC0 ; =============== S U B R O U T I N E =======================================
.text:0040FAC0
.text:0040FAC0
.text:0040FAC0 sub_40FAC0      proc near               ; CODE XREF: sub_40D120+17↑p
.text:0040FAC0
.text:0040FAC0 hFindFile       = dword ptr -0Ch
.text:0040FAC0 var_8           = dword ptr -8
.text:0040FAC0 var_4           = dword ptr -4
.text:0040FAC0 arg_0           = dword ptr  4
.text:0040FAC0
.text:0040FAC0                 sub     esp, 0Ch
.text:0040FAC3                 mov     [esp+0Ch+var_4], esi
.text:0040FAC7                 mov     esi, [esp+0Ch+arg_0]
.text:0040FACB                 mov     [esp+0Ch+var_8], ebx
.text:0040FACF                 test    esi, esi
.text:0040FAD1                 jz      short loc_40FB12
.text:0040FAD3                 mov     eax, [esi]
.text:0040FAD5                 cmp     eax, 0FFFFFFFFh
.text:0040FAD8                 jz      short loc_40FAEF
.text:0040FADA                 mov     [esp+0Ch+hFindFile], eax ; hFindFile
.text:0040FADD                 call    FindClose
.text:0040FAE2                 sub     esp, 4
.text:0040FAE5                 test    eax, eax
.text:0040FAE7                 jz      short loc_40FB02
.text:0040FAE9
.text:0040FAE9 loc_40FAE9:                             ; CODE XREF: sub_40FAC0+50↓j
.text:0040FAE9                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040FAEF
.text:0040FAEF loc_40FAEF:                             ; CODE XREF: sub_40FAC0+18↑j
.text:0040FAEF                 mov     dword ptr [esi+14h], 1
.text:0040FAF6
.text:0040FAF6 loc_40FAF6:                             ; CODE XREF: sub_40FAC0+5D↓j
.text:0040FAF6                 mov     ebx, [esp+0Ch+var_8]
.text:0040FAFA                 mov     esi, [esp+0Ch+var_4]
.text:0040FAFE                 add     esp, 0Ch
.text:0040FB01                 retn
.text:0040FB02 ; ---------------------------------------------------------------------------
.text:0040FB02
.text:0040FB02 loc_40FB02:                             ; CODE XREF: sub_40FAC0+27↑j
.text:0040FB02                 call    sub_40D580
.text:0040FB07                 mov     ebx, eax
.text:0040FB09                 call    _errno
.text:0040FB0E                 mov     [eax], ebx
.text:0040FB10                 jmp     short loc_40FAE9
.text:0040FB12 ; ---------------------------------------------------------------------------
.text:0040FB12
.text:0040FB12 loc_40FB12:                             ; CODE XREF: sub_40FAC0+11↑j
.text:0040FB12                 call    _errno
.text:0040FB17                 mov     dword ptr [eax], 16h
.text:0040FB1D                 jmp     short loc_40FAF6
.text:0040FB1D sub_40FAC0      endp
.text:0040FB1D
.text:0040FB1D ; ---------------------------------------------------------------------------
.text:0040FB1F                 align 10h
.text:0040FB20
.text:0040FB20 ; =============== S U B R O U T I N E =======================================
.text:0040FB20
.text:0040FB20 ; Attributes: noreturn
.text:0040FB20
.text:0040FB20 sub_40FB20      proc near               ; CODE XREF: .text:0040E809↑p
.text:0040FB20                                         ; sub_40FB20↓j
.text:0040FB20                 jmp     short sub_40FB20
.text:0040FB20 sub_40FB20      endp
.text:0040FB20
.text:0040FB20 ; ---------------------------------------------------------------------------
.text:0040FB22                 align 10h
.text:0040FB30
.text:0040FB30 ; =============== S U B R O U T I N E =======================================
.text:0040FB30
.text:0040FB30
.text:0040FB30 sub_40FB30      proc near               ; CODE XREF: .text:0040E565↑p
.text:0040FB30
.text:0040FB30 FileHandle      = dword ptr -1Ch
.text:0040FB30 dwFileOffsetLow = dword ptr -18h
.text:0040FB30 dwFileOffsetHigh= dword ptr -14h
.text:0040FB30 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040FB30 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040FB30 var_8           = dword ptr -8
.text:0040FB30 var_4           = dword ptr -4
.text:0040FB30 arg_0           = dword ptr  4
.text:0040FB30
.text:0040FB30                 sub     esp, 1Ch
.text:0040FB33                 mov     edx, [esp+1Ch+arg_0]
.text:0040FB37                 mov     [esp+1Ch+var_4], esi
.text:0040FB3B                 mov     [esp+1Ch+var_8], ebx
.text:0040FB3F                 mov     ebx, [edx+10h]
.text:0040FB42                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040FB45                 call    _get_osfhandle
.text:0040FB4A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040FB4D                 mov     esi, eax
.text:0040FB4F                 call    _filelengthi64
.text:0040FB54                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040FB58                 cdq
.text:0040FB59                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040FB5C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040FB60                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040FB68                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040FB70                 call    UnlockFile
.text:0040FB75                 sub     esp, 14h
.text:0040FB78                 mov     ebx, [esp+1Ch+var_8]
.text:0040FB7C                 mov     esi, [esp+1Ch+var_4]
.text:0040FB80                 add     esp, 1Ch
.text:0040FB83                 retn
.text:0040FB83 sub_40FB30      endp
.text:0040FB83
.text:0040FB83 ; ---------------------------------------------------------------------------
.text:0040FB84                 align 10h
.text:0040FB90
.text:0040FB90 ; =============== S U B R O U T I N E =======================================
.text:0040FB90
.text:0040FB90
.text:0040FB90 ; int __cdecl sub_40FB90(int, char *Control)
.text:0040FB90 sub_40FB90      proc near               ; CODE XREF: .text:0040E426↑p
.text:0040FB90                                         ; .text:0040E476↑p ...
.text:0040FB90
.text:0040FB90 Str             = dword ptr -1Ch
.text:0040FB90 Val             = dword ptr -18h
.text:0040FB90 var_8           = dword ptr -8
.text:0040FB90 var_4           = dword ptr -4
.text:0040FB90 arg_0           = dword ptr  4
.text:0040FB90 Control         = dword ptr  8
.text:0040FB90
.text:0040FB90                 sub     esp, 1Ch
.text:0040FB93                 xor     eax, eax
.text:0040FB95                 mov     edx, [esp+1Ch+Control]
.text:0040FB99                 mov     [esp+1Ch+var_4], esi
.text:0040FB9D                 mov     esi, [esp+1Ch+arg_0]
.text:0040FBA1                 mov     [esp+1Ch+var_8], ebx
.text:0040FBA5                 mov     ebx, [esi]
.text:0040FBA7                 test    ebx, ebx
.text:0040FBA9                 jz      short loc_40FBD8
.text:0040FBAB                 movzx   eax, byte ptr [edx]
.text:0040FBAE                 test    al, al
.text:0040FBB0                 jz      short loc_40FBD0
.text:0040FBB2                 cmp     byte ptr [edx+1], 0
.text:0040FBB6                 jnz     short loc_40FC10
.text:0040FBB8                 movzx   ecx, byte ptr [ebx]
.text:0040FBBB                 mov     edx, ebx
.text:0040FBBD                 cmp     cl, al
.text:0040FBBF                 jz      short loc_40FC02
.text:0040FBC1                 test    cl, cl
.text:0040FBC3                 jnz     short loc_40FBE4
.text:0040FBC5                 lea     esi, [esi+0]
.text:0040FBC9                 lea     edi, [edi+0]
.text:0040FBD0
.text:0040FBD0 loc_40FBD0:                             ; CODE XREF: sub_40FB90+20↑j
.text:0040FBD0                                         ; sub_40FB90+74↓j
.text:0040FBD0                 mov     dword ptr [esi], 0
.text:0040FBD6
.text:0040FBD6 loc_40FBD6:                             ; CODE XREF: sub_40FB90+7C↓j
.text:0040FBD6                 mov     eax, ebx
.text:0040FBD8
.text:0040FBD8 loc_40FBD8:                             ; CODE XREF: sub_40FB90+19↑j
.text:0040FBD8                 mov     ebx, [esp+1Ch+var_8]
.text:0040FBDC                 mov     esi, [esp+1Ch+var_4]
.text:0040FBE0                 add     esp, 1Ch
.text:0040FBE3                 retn
.text:0040FBE4 ; ---------------------------------------------------------------------------
.text:0040FBE4
.text:0040FBE4 loc_40FBE4:                             ; CODE XREF: sub_40FB90+33↑j
.text:0040FBE4                 movsx   edx, al
.text:0040FBE7                 mov     [esp+1Ch+Val], edx ; Val
.text:0040FBEB                 lea     edx, [ebx+1]
.text:0040FBEE                 mov     [esp+1Ch+Str], edx ; Str
.text:0040FBF1                 call    strchr
.text:0040FBF6                 lea     esi, [esi+0]
.text:0040FBF9                 lea     edi, [edi+0]
.text:0040FC00
.text:0040FC00 loc_40FC00:                             ; CODE XREF: sub_40FB90+8C↓j
.text:0040FC00                 mov     edx, eax
.text:0040FC02
.text:0040FC02 loc_40FC02:                             ; CODE XREF: sub_40FB90+2F↑j
.text:0040FC02                 test    edx, edx
.text:0040FC04                 jz      short loc_40FBD0
.text:0040FC06                 mov     byte ptr [edx], 0
.text:0040FC09                 inc     edx
.text:0040FC0A                 mov     [esi], edx
.text:0040FC0C                 jmp     short loc_40FBD6
.text:0040FC0C ; ---------------------------------------------------------------------------
.text:0040FC0E                 align 10h
.text:0040FC10
.text:0040FC10 loc_40FC10:                             ; CODE XREF: sub_40FB90+26↑j
.text:0040FC10                 mov     [esp+1Ch+Val], edx ; Control
.text:0040FC14                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040FC17                 call    strpbrk
.text:0040FC1C                 jmp     short loc_40FC00
.text:0040FC1C sub_40FB90      endp
.text:0040FC1C
.text:0040FC1C ; ---------------------------------------------------------------------------
.text:0040FC1E                 align 10h
.text:0040FC20 ; const char aTmpf[]
.text:0040FC20 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40FC30+20↓o
.text:0040FC25 ; const char aWBd[]
.text:0040FC25 aWBd            db 'w+bD',0             ; DATA XREF: sub_40FC30+5E↓o
.text:0040FC2A                 align 10h
.text:0040FC30
.text:0040FC30 ; =============== S U B R O U T I N E =======================================
.text:0040FC30
.text:0040FC30
.text:0040FC30 sub_40FC30      proc near               ; CODE XREF: sub_40EE9F+A4↑p
.text:0040FC30
.text:0040FC30 FileHandle      = dword ptr -13Ch
.text:0040FC30 Format          = dword ptr -138h
.text:0040FC30 var_134         = dword ptr -134h
.text:0040FC30 var_130         = dword ptr -130h
.text:0040FC30 var_12C         = dword ptr -12Ch
.text:0040FC30 Buffer          = byte ptr -11Ch
.text:0040FC30 var_8           = dword ptr -8
.text:0040FC30 var_4           = dword ptr -4
.text:0040FC30
.text:0040FC30                 sub     esp, 13Ch
.text:0040FC36                 mov     [esp+13Ch+var_8], ebx
.text:0040FC3D                 lea     ebx, [esp+13Ch+Buffer]
.text:0040FC41                 mov     [esp+13Ch+var_4], esi
.text:0040FC48                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040FC50                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040FC58                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040FC60                 mov     [esp+13Ch+Format], 104h ; int
.text:0040FC68                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040FC6B                 call    sub_410570
.text:0040FC70                 xor     edx, edx
.text:0040FC72                 test    eax, eax
.text:0040FC74                 jnz     short loc_40FCA6
.text:0040FC76                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040FC79                 mov     [esp+13Ch+Format], 0 ; int
.text:0040FC81                 call    sub_4108F0
.text:0040FC86                 xor     edx, edx
.text:0040FC88                 mov     ebx, eax
.text:0040FC8A                 test    eax, eax
.text:0040FC8C                 js      short loc_40FCA6
.text:0040FC8E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040FC96                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040FC99                 call    _fdopen
.text:0040FC9E                 test    eax, eax
.text:0040FCA0                 mov     esi, eax
.text:0040FCA2                 jz      short loc_40FCBD
.text:0040FCA4
.text:0040FCA4 loc_40FCA4:                             ; CODE XREF: sub_40FC30+95↓j
.text:0040FCA4                 mov     edx, esi
.text:0040FCA6
.text:0040FCA6 loc_40FCA6:                             ; CODE XREF: sub_40FC30+44↑j
.text:0040FCA6                                         ; sub_40FC30+5C↑j
.text:0040FCA6                 mov     ebx, [esp+13Ch+var_8]
.text:0040FCAD                 mov     eax, edx
.text:0040FCAF                 mov     esi, [esp+13Ch+var_4]
.text:0040FCB6                 add     esp, 13Ch
.text:0040FCBC                 retn
.text:0040FCBD ; ---------------------------------------------------------------------------
.text:0040FCBD
.text:0040FCBD loc_40FCBD:                             ; CODE XREF: sub_40FC30+72↑j
.text:0040FCBD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040FCC0                 call    _close_0
.text:0040FCC5                 jmp     short loc_40FCA4
.text:0040FCC5 sub_40FC30      endp
.text:0040FCC5
.text:0040FCC5 ; ---------------------------------------------------------------------------
.text:0040FCC7                 align 10h
.text:0040FCD0 byte_40FCD0     db 0                    ; DATA XREF: .data:Src↓o
.text:0040FCD1 byte_40FCD1     db 73h, 68h, 0          ; DATA XREF: .data:off_414094↓o
.text:0040FCD4 ; const char aHome[]
.text:0040FCD4 aHome           db 'HOME',0             ; DATA XREF: sub_40FCF0+96↓o
.text:0040FCD9 ; const char aShell[]
.text:0040FCD9 aShell          db 'SHELL',0            ; DATA XREF: sub_40FCF0+E2↓o
.text:0040FCDF ; const char aComspec[]
.text:0040FCDF aComspec        db 'COMSPEC',0          ; DATA XREF: sub_40FCF0:loc_40FEB4↓o
.text:0040FCE7 aC              db 'C:/',0              ; DATA XREF: sub_40FCF0:loc_40FED5↓o
.text:0040FCEB                 align 10h
.text:0040FCF0
.text:0040FCF0 ; =============== S U B R O U T I N E =======================================
.text:0040FCF0
.text:0040FCF0
.text:0040FCF0 ; int __cdecl sub_40FCF0(char *, int, char *, int, int)
.text:0040FCF0 sub_40FCF0      proc near               ; CODE XREF: sub_40F280+2F↑p
.text:0040FCF0
.text:0040FCF0 Str             = dword ptr -1Ch
.text:0040FCF0 Src             = dword ptr -18h
.text:0040FCF0 Size            = dword ptr -14h
.text:0040FCF0 var_10          = dword ptr -10h
.text:0040FCF0 var_C           = dword ptr -0Ch
.text:0040FCF0 var_8           = dword ptr -8
.text:0040FCF0 var_4           = dword ptr -4
.text:0040FCF0 arg_0           = dword ptr  4
.text:0040FCF0 arg_4           = dword ptr  8
.text:0040FCF0 arg_8           = dword ptr  0Ch
.text:0040FCF0 arg_C           = dword ptr  10h
.text:0040FCF0 arg_10          = dword ptr  14h
.text:0040FCF0
.text:0040FCF0                 sub     esp, 1Ch
.text:0040FCF3                 mov     eax, [esp+1Ch+arg_0]
.text:0040FCF7                 mov     [esp+1Ch+var_10], ebx
.text:0040FCFB                 mov     [esp+1Ch+var_C], esi
.text:0040FCFF                 test    eax, eax
.text:0040FD01                 mov     [esp+1Ch+var_8], edi
.text:0040FD05                 mov     [esp+1Ch+var_4], ebp
.text:0040FD09                 jz      short loc_40FD18
.text:0040FD0B                 cmp     byte ptr [eax], 0
.text:0040FD0E                 jz      short loc_40FD18
.text:0040FD10                 mov     ecx, [esp+1Ch+arg_C]
.text:0040FD14                 test    ecx, ecx
.text:0040FD16                 jnz     short loc_40FD40
.text:0040FD18
.text:0040FD18 loc_40FD18:                             ; CODE XREF: sub_40FCF0+19↑j
.text:0040FD18                                         ; sub_40FCF0+1E↑j ...
.text:0040FD18                 call    _errno
.text:0040FD1D                 mov     dword ptr [eax], 22h ; '"'
.text:0040FD23                 mov     eax, 0FFFFFFFFh
.text:0040FD28
.text:0040FD28 loc_40FD28:                             ; CODE XREF: sub_40FCF0+1BF↓j
.text:0040FD28                 mov     ebx, [esp+1Ch+var_10]
.text:0040FD2C                 mov     esi, [esp+1Ch+var_C]
.text:0040FD30                 mov     edi, [esp+1Ch+var_8]
.text:0040FD34                 mov     ebp, [esp+1Ch+var_4]
.text:0040FD38                 add     esp, 1Ch
.text:0040FD3B                 retn
.text:0040FD3B ; ---------------------------------------------------------------------------
.text:0040FD3C                 align 10h
.text:0040FD40
.text:0040FD40 loc_40FD40:                             ; CODE XREF: sub_40FCF0+26↑j
.text:0040FD40                 mov     [esp+1Ch+Str], eax ; Str
.text:0040FD43                 mov     ebx, eax
.text:0040FD45                 call    strlen
.text:0040FD4A                 lea     esi, [eax+1]
.text:0040FD4D                 cmp     esi, [esp+1Ch+arg_C]
.text:0040FD51                 ja      short loc_40FD18
.text:0040FD53                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040FD57                 mov     edx, [esp+1Ch+arg_8]
.text:0040FD5B                 mov     [esp+1Ch+Size], esi ; Size
.text:0040FD5F                 mov     [esp+1Ch+Str], edx ; void *
.text:0040FD62                 call    memcpy
.text:0040FD67                 mov     ebp, [esp+1Ch+arg_4]
.text:0040FD6B                 mov     [ebp+0], eax
.text:0040FD6E                 call    sub_410D30
.text:0040FD73                 mov     edi, [esp+1Ch+arg_4]
.text:0040FD77                 mov     [edi+8], eax
.text:0040FD7A                 call    sub_410D20
.text:0040FD7F                 mov     ebx, [esp+1Ch+arg_4]
.text:0040FD83                 mov     [ebx+0Ch], eax
.text:0040FD86                 mov     [esp+1Ch+Str], offset aHome ; "HOME"
.text:0040FD8D                 call    getenv
.text:0040FD92                 test    eax, eax
.text:0040FD94                 mov     ebx, eax
.text:0040FD96                 jz      loc_40FED5
.text:0040FD9C
.text:0040FD9C loc_40FD9C:                             ; CODE XREF: sub_40FCF0+1EA↓j
.text:0040FD9C                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040FD9F                 call    strlen
.text:0040FDA4                 lea     ebp, [eax+esi+1]
.text:0040FDA8                 cmp     ebp, [esp+1Ch+arg_C]
.text:0040FDAC                 ja      loc_40FD18
.text:0040FDB2                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040FDB6                 mov     ecx, [esp+1Ch+arg_8]
.text:0040FDBA                 lea     edi, [eax+1]
.text:0040FDBD                 mov     [esp+1Ch+Size], edi ; Size
.text:0040FDC1                 add     ecx, esi
.text:0040FDC3                 mov     [esp+1Ch+Str], ecx ; void *
.text:0040FDC6                 call    memcpy
.text:0040FDCB                 mov     esi, [esp+1Ch+arg_4]
.text:0040FDCF                 mov     [esi+14h], eax
.text:0040FDD2                 mov     [esp+1Ch+Str], offset aShell ; "SHELL"
.text:0040FDD9                 call    getenv
.text:0040FDDE                 test    eax, eax
.text:0040FDE0                 mov     ebx, eax
.text:0040FDE2                 jz      loc_40FEB4
.text:0040FDE8
.text:0040FDE8 loc_40FDE8:                             ; CODE XREF: sub_40FCF0+1D4↓j
.text:0040FDE8                                         ; sub_40FCF0+1E0↓j
.text:0040FDE8                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040FDEB                 call    strlen
.text:0040FDF0                 lea     edi, [eax+ebp+1]
.text:0040FDF4                 cmp     edi, [esp+1Ch+arg_C]
.text:0040FDF8                 ja      loc_40FD18
.text:0040FDFE                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040FE02                 mov     esi, [esp+1Ch+arg_8]
.text:0040FE06                 lea     ecx, [eax+1]
.text:0040FE09                 mov     [esp+1Ch+Size], ecx ; Size
.text:0040FE0D                 add     esi, ebp
.text:0040FE0F                 mov     [esp+1Ch+Str], esi ; void *
.text:0040FE12                 call    memcpy
.text:0040FE17                 mov     ebx, [esp+1Ch+arg_4]
.text:0040FE1B                 mov     [ebx+18h], eax
.text:0040FE1E                 call    sub_40FEE0
.text:0040FE23                 mov     [esp+1Ch+Str], eax ; Str
.text:0040FE26                 mov     ebx, eax
.text:0040FE28                 call    strlen
.text:0040FE2D                 lea     esi, [eax+edi+1]
.text:0040FE31                 cmp     esi, [esp+1Ch+arg_C]
.text:0040FE35                 ja      loc_40FD18
.text:0040FE3B                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040FE3F                 mov     ecx, [esp+1Ch+arg_8]
.text:0040FE43                 lea     ebp, [eax+1]
.text:0040FE46                 mov     [esp+1Ch+Size], ebp ; Size
.text:0040FE4A                 add     ecx, edi
.text:0040FE4C                 mov     [esp+1Ch+Str], ecx ; void *
.text:0040FE4F                 call    memcpy
.text:0040FE54                 mov     edi, [esp+1Ch+arg_4]
.text:0040FE58                 mov     ebx, Src
.text:0040FE5E                 mov     [edi+10h], eax
.text:0040FE61                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040FE64                 call    strlen
.text:0040FE69                 lea     ebp, [eax+esi+1]
.text:0040FE6D                 cmp     ebp, [esp+1Ch+arg_C]
.text:0040FE71                 ja      loc_40FD18
.text:0040FE77                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040FE7B                 mov     edi, [esp+1Ch+arg_8]
.text:0040FE7F                 lea     ecx, [eax+1]
.text:0040FE82                 mov     [esp+1Ch+Size], ecx ; Size
.text:0040FE86                 add     edi, esi
.text:0040FE88                 mov     [esp+1Ch+Str], edi ; void *
.text:0040FE8B                 call    memcpy
.text:0040FE90                 mov     esi, [esp+1Ch+arg_4]
.text:0040FE94                 mov     [esi+4], eax
.text:0040FE97                 mov     edx, [esp+1Ch+arg_8]
.text:0040FE9B                 mov     [esp+1Ch+Str], edx ; Str
.text:0040FE9E                 call    strlen
.text:0040FEA3                 mov     eax, [esp+1Ch+arg_4]
.text:0040FEA7                 mov     ebx, [esp+1Ch+arg_10]
.text:0040FEAB                 mov     [ebx], eax
.text:0040FEAD                 xor     eax, eax
.text:0040FEAF                 jmp     loc_40FD28
.text:0040FEB4 ; ---------------------------------------------------------------------------
.text:0040FEB4
.text:0040FEB4 loc_40FEB4:                             ; CODE XREF: sub_40FCF0+F2↑j
.text:0040FEB4                 mov     [esp+1Ch+Str], offset aComspec ; "COMSPEC"
.text:0040FEBB                 call    getenv
.text:0040FEC0                 test    eax, eax
.text:0040FEC2                 mov     ebx, eax
.text:0040FEC4                 jnz     loc_40FDE8
.text:0040FECA                 mov     ebx, off_414094
.text:0040FED0                 jmp     loc_40FDE8
.text:0040FED5 ; ---------------------------------------------------------------------------
.text:0040FED5
.text:0040FED5 loc_40FED5:                             ; CODE XREF: sub_40FCF0+A6↑j
.text:0040FED5                 mov     ebx, offset aC  ; "C:/"
.text:0040FEDA                 jmp     loc_40FD9C
.text:0040FEDA sub_40FCF0      endp
.text:0040FEDA
.text:0040FEDA ; ---------------------------------------------------------------------------
.text:0040FEDF                 align 10h
.text:0040FEE0
.text:0040FEE0 ; =============== S U B R O U T I N E =======================================
.text:0040FEE0
.text:0040FEE0
.text:0040FEE0 sub_40FEE0      proc near               ; CODE XREF: sub_40F280+B↑p
.text:0040FEE0                                         ; sub_40FCF0+12E↑p
.text:0040FEE0
.text:0040FEE0 lpBuffer        = dword ptr -1Ch
.text:0040FEE0 pcbBuffer       = dword ptr -18h
.text:0040FEE0 var_8           = dword ptr -8
.text:0040FEE0 var_4           = dword ptr -4
.text:0040FEE0
.text:0040FEE0                 sub     esp, 1Ch
.text:0040FEE3                 lea     edx, [esp+1Ch+var_8]
.text:0040FEE7                 mov     [esp+1Ch+pcbBuffer], edx ; pcbBuffer
.text:0040FEEB                 mov     [esp+1Ch+var_4], ebx
.text:0040FEEF                 mov     [esp+1Ch+var_8], 101h
.text:0040FEF7                 mov     [esp+1Ch+lpBuffer], offset byte_4158E0 ; lpBuffer
.text:0040FEFE                 call    GetUserNameA
.text:0040FF03                 sub     esp, 8
.text:0040FF06                 mov     edx, offset byte_4158E0
.text:0040FF0B                 test    eax, eax
.text:0040FF0D                 jz      short loc_40FF19
.text:0040FF0F
.text:0040FF0F loc_40FF0F:                             ; CODE XREF: sub_40FEE0+49↓j
.text:0040FF0F                 mov     ebx, [esp+1Ch+var_4]
.text:0040FF13                 mov     eax, edx
.text:0040FF15                 add     esp, 1Ch
.text:0040FF18                 retn
.text:0040FF19 ; ---------------------------------------------------------------------------
.text:0040FF19
.text:0040FF19 loc_40FF19:                             ; CODE XREF: sub_40FEE0+2D↑j
.text:0040FF19                 call    sub_40D580
.text:0040FF1E                 mov     ebx, eax
.text:0040FF20                 call    _errno
.text:0040FF25                 mov     [eax], ebx
.text:0040FF27                 xor     edx, edx
.text:0040FF29                 jmp     short loc_40FF0F
.text:0040FF29 sub_40FEE0      endp
.text:0040FF29
.text:0040FF29 ; ---------------------------------------------------------------------------
.text:0040FF2B                 align 10h
.text:0040FF30
.text:0040FF30 ; =============== S U B R O U T I N E =======================================
.text:0040FF30
.text:0040FF30
.text:0040FF30 sub_40FF30      proc near               ; CODE XREF: _sysconf+297↑j
.text:0040FF30
.text:0040FF30 lpSystemInfo    = dword ptr -0Ch
.text:0040FF30 var_4           = dword ptr -4
.text:0040FF30
.text:0040FF30                 sub     esp, 0Ch
.text:0040FF33                 mov     [esp+0Ch+var_4], edi
.text:0040FF37                 mov     edi, ds:dword_4159F0
.text:0040FF3D                 test    edi, edi
.text:0040FF3F                 mov     eax, edi
.text:0040FF41                 jz      short loc_40FF50
.text:0040FF43
.text:0040FF43 loc_40FF43:                             ; CODE XREF: sub_40FF30+48↓j
.text:0040FF43                 mov     eax, [edi+14h]
.text:0040FF46                 mov     edi, [esp+0Ch+var_4]
.text:0040FF4A                 add     esp, 0Ch
.text:0040FF4D                 retn
.text:0040FF4D ; ---------------------------------------------------------------------------
.text:0040FF4E                 align 10h
.text:0040FF50
.text:0040FF50 loc_40FF50:                             ; CODE XREF: sub_40FF30+11↑j
.text:0040FF50                 cld
.text:0040FF51                 mov     edi, offset SystemInfo
.text:0040FF56                 mov     ecx, 9
.text:0040FF5B                 mov     ds:dword_4159F0, edi
.text:0040FF61                 rep stosd
.text:0040FF63                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0040FF6A                 call    GetSystemInfo
.text:0040FF6F                 mov     edi, ds:dword_4159F0
.text:0040FF75                 sub     esp, 4
.text:0040FF78                 jmp     short loc_40FF43
.text:0040FF78 sub_40FF30      endp
.text:0040FF78
.text:0040FF78 ; ---------------------------------------------------------------------------
.text:0040FF7A                 align 10h
.text:0040FF80
.text:0040FF80 ; =============== S U B R O U T I N E =======================================
.text:0040FF80
.text:0040FF80
.text:0040FF80 sub_40FF80      proc near               ; CODE XREF: _sysconf+28F↑j
.text:0040FF80
.text:0040FF80 lpSystemInfo    = dword ptr -0Ch
.text:0040FF80 var_4           = dword ptr -4
.text:0040FF80
.text:0040FF80                 sub     esp, 0Ch
.text:0040FF83                 mov     [esp+0Ch+var_4], edi
.text:0040FF87                 mov     edi, ds:dword_4159F0
.text:0040FF8D                 test    edi, edi
.text:0040FF8F                 mov     eax, edi
.text:0040FF91                 jz      short loc_40FFA0
.text:0040FF93
.text:0040FF93 loc_40FF93:                             ; CODE XREF: sub_40FF80+48↓j
.text:0040FF93                 mov     eax, [edi+14h]
.text:0040FF96                 mov     edi, [esp+0Ch+var_4]
.text:0040FF9A                 add     esp, 0Ch
.text:0040FF9D                 retn
.text:0040FF9D ; ---------------------------------------------------------------------------
.text:0040FF9E                 align 10h
.text:0040FFA0
.text:0040FFA0 loc_40FFA0:                             ; CODE XREF: sub_40FF80+11↑j
.text:0040FFA0                 cld
.text:0040FFA1                 mov     edi, offset SystemInfo
.text:0040FFA6                 mov     ecx, 9
.text:0040FFAB                 mov     ds:dword_4159F0, edi
.text:0040FFB1                 rep stosd
.text:0040FFB3                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0040FFBA                 call    GetSystemInfo
.text:0040FFBF                 mov     edi, ds:dword_4159F0
.text:0040FFC5                 sub     esp, 4
.text:0040FFC8                 jmp     short loc_40FF93
.text:0040FFC8 sub_40FF80      endp
.text:0040FFC8
.text:0040FFC8 ; ---------------------------------------------------------------------------
.text:0040FFCA                 align 10h
.text:0040FFD0
.text:0040FFD0 ; =============== S U B R O U T I N E =======================================
.text:0040FFD0
.text:0040FFD0
.text:0040FFD0 sub_40FFD0      proc near               ; CODE XREF: _sysconf+29F↑j
.text:0040FFD0
.text:0040FFD0 lpSystemInfo    = dword ptr -0Ch
.text:0040FFD0 var_4           = dword ptr -4
.text:0040FFD0
.text:0040FFD0                 sub     esp, 0Ch
.text:0040FFD3                 mov     [esp+0Ch+var_4], edi
.text:0040FFD7                 mov     edi, ds:dword_4159F0
.text:0040FFDD                 test    edi, edi
.text:0040FFDF                 mov     eax, edi
.text:0040FFE1                 jz      short loc_40FFF8
.text:0040FFE3
.text:0040FFE3 loc_40FFE3:                             ; CODE XREF: sub_40FFD0+50↓j
.text:0040FFE3                 mov     eax, [edi+0Ch]
.text:0040FFE6                 xor     edx, edx
.text:0040FFE8                 mov     ecx, [edi+8]
.text:0040FFEB                 sub     eax, ecx
.text:0040FFED                 div     dword ptr [edi+4]
.text:0040FFF0                 mov     edi, [esp+0Ch+var_4]
.text:0040FFF4                 add     esp, 0Ch
.text:0040FFF7                 retn
.text:0040FFF8 ; ---------------------------------------------------------------------------
.text:0040FFF8
.text:0040FFF8 loc_40FFF8:                             ; CODE XREF: sub_40FFD0+11↑j
.text:0040FFF8                 cld
.text:0040FFF9                 mov     edi, offset SystemInfo
.text:0040FFFE                 mov     ecx, 9
.text:00410003                 mov     ds:dword_4159F0, edi
.text:00410009                 rep stosd
.text:0041000B                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00410012                 call    GetSystemInfo
.text:00410017                 mov     edi, ds:dword_4159F0
.text:0041001D                 sub     esp, 4
.text:00410020                 jmp     short loc_40FFE3
.text:00410020 sub_40FFD0      endp
.text:00410020
.text:00410020 ; ---------------------------------------------------------------------------
.text:00410022                 align 10h
.text:00410030
.text:00410030 ; =============== S U B R O U T I N E =======================================
.text:00410030
.text:00410030
.text:00410030 sub_410030      proc near               ; CODE XREF: _sysconf+2A7↑j
.text:00410030
.text:00410030 lpSystemInfo    = dword ptr -0Ch
.text:00410030 var_4           = dword ptr -4
.text:00410030
.text:00410030                 sub     esp, 0Ch
.text:00410033                 mov     [esp+0Ch+var_4], edi
.text:00410037                 mov     edi, ds:dword_4159F0
.text:0041003D                 test    edi, edi
.text:0041003F                 mov     eax, edi
.text:00410041                 jz      short loc_410058
.text:00410043
.text:00410043 loc_410043:                             ; CODE XREF: sub_410030+50↓j
.text:00410043                 mov     edx, [edi+8]
.text:00410046                 mov     eax, [edi+0Ch]
.text:00410049                 sub     eax, edx
.text:0041004B                 xor     edx, edx
.text:0041004D                 div     dword ptr [edi+4]
.text:00410050                 mov     edi, [esp+0Ch+var_4]
.text:00410054                 add     esp, 0Ch
.text:00410057                 retn
.text:00410058 ; ---------------------------------------------------------------------------
.text:00410058
.text:00410058 loc_410058:                             ; CODE XREF: sub_410030+11↑j
.text:00410058                 cld
.text:00410059                 mov     edi, offset SystemInfo
.text:0041005E                 mov     ecx, 9
.text:00410063                 mov     ds:dword_4159F0, edi
.text:00410069                 rep stosd
.text:0041006B                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00410072                 call    GetSystemInfo
.text:00410077                 mov     edi, ds:dword_4159F0
.text:0041007D                 sub     esp, 4
.text:00410080                 jmp     short loc_410043
.text:00410080 sub_410030      endp
.text:00410080
.text:00410080 ; ---------------------------------------------------------------------------
.text:00410082                 align 10h
.text:00410090
.text:00410090 ; =============== S U B R O U T I N E =======================================
.text:00410090
.text:00410090
.text:00410090 sub_410090      proc near               ; CODE XREF: _sysconf:loc_40F94B↑p
.text:00410090                                         ; _sysconf:loc_40F95E↑p
.text:00410090                 mov     edx, 40h ; '@'
.text:00410095                 mov     eax, 40h ; '@'
.text:0041009A                 mov     ds:dword_415AD0, edx
.text:004100A0                 retn
.text:004100A0 sub_410090      endp
.text:004100A0
.text:004100A0 ; ---------------------------------------------------------------------------
.text:004100A1                 align 10h
.text:004100B0
.text:004100B0 ; =============== S U B R O U T I N E =======================================
.text:004100B0
.text:004100B0
.text:004100B0 sub_4100B0      proc near               ; CODE XREF: sub_40FA20+4F↑p
.text:004100B0
.text:004100B0 var_8           = dword ptr -8
.text:004100B0 var_4           = dword ptr -4
.text:004100B0 arg_0           = dword ptr  4
.text:004100B0 arg_4           = dword ptr  8
.text:004100B0 arg_8           = dword ptr  0Ch
.text:004100B0
.text:004100B0                 sub     esp, 8
.text:004100B3                 mov     ecx, [esp+8+arg_0]
.text:004100B7                 mov     [esp+8+var_8], ebx
.text:004100BA                 mov     ebx, [esp+8+arg_8]
.text:004100BE                 mov     [esp+8+var_4], esi
.text:004100C2                 mov     edx, [esp+8+arg_4]
.text:004100C6                 mov     eax, ebx
.text:004100C8                 and     eax, 7
.text:004100CB                 cmp     eax, 7          ; switch 8 cases
.text:004100CE                 ja      short def_4100D0 ; jumptable 004100D0 default case
.text:004100D0                 jmp     ds:jpt_4100D0[eax*4] ; switch jump
.text:004100D0 ; ---------------------------------------------------------------------------
.text:004100D7                 align 4
.text:004100D8 jpt_4100D0      dd offset loc_41015A    ; DATA XREF: sub_4100B0+20↑r
.text:004100D8                 dd offset loc_410161    ; jump table for switch statement
.text:004100D8                 dd offset loc_4100F8
.text:004100D8                 dd offset loc_410169
.text:004100D8                 dd offset loc_410176
.text:004100D8                 dd offset loc_410183
.text:004100D8                 dd offset loc_410190
.text:004100D8                 dd offset loc_41019D
.text:004100F8 ; ---------------------------------------------------------------------------
.text:004100F8
.text:004100F8 loc_4100F8:                             ; CODE XREF: sub_4100B0+20↑j
.text:004100F8                                         ; DATA XREF: sub_4100B0:jpt_4100D0↑o
.text:004100F8                 mov     eax, [edx]      ; jumptable 004100D0 case 2
.text:004100FA                 sub     ecx, 1Ch
.text:004100FD                 add     ebx, 6
.text:00410100                 sub     edx, 18h
.text:00410103                 lea     esi, [esi+0]
.text:00410109                 lea     edi, [edi+0]
.text:00410110
.text:00410110 loc_410110:                             ; CODE XREF: sub_4100B0+A8↓j
.text:00410110                 mov     esi, [edx+1Ch]
.text:00410113                 add     edx, 20h ; ' '
.text:00410116                 mov     [ecx+1Ch], eax
.text:00410119                 add     ecx, 20h ; ' '
.text:0041011C                 sub     ebx, 8
.text:0041011F                 jnz     short def_4100D0 ; jumptable 004100D0 default case
.text:00410121                 mov     [ecx], esi
.text:00410123                 mov     ebx, [esp+8+var_8]
.text:00410126                 mov     esi, [esp+8+var_4]
.text:0041012A                 add     esp, 8
.text:0041012D                 retn
.text:0041012D ; ---------------------------------------------------------------------------
.text:0041012E                 align 10h
.text:00410130
.text:00410130 def_4100D0:                             ; CODE XREF: sub_4100B0+1E↑j
.text:00410130                                         ; sub_4100B0+6F↑j ...
.text:00410130                 mov     eax, [edx]      ; jumptable 004100D0 default case
.text:00410132                 mov     [ecx], esi
.text:00410134
.text:00410134 loc_410134:                             ; CODE XREF: sub_4100B0+AF↓j
.text:00410134                 mov     esi, [edx+4]
.text:00410137                 mov     [ecx+4], eax
.text:0041013A
.text:0041013A loc_41013A:                             ; CODE XREF: sub_4100B0+F6↓j
.text:0041013A                 mov     eax, [edx+8]
.text:0041013D                 mov     [ecx+8], esi
.text:00410140
.text:00410140 loc_410140:                             ; CODE XREF: sub_4100B0+EB↓j
.text:00410140                 mov     esi, [edx+0Ch]
.text:00410143                 mov     [ecx+0Ch], eax
.text:00410146
.text:00410146 loc_410146:                             ; CODE XREF: sub_4100B0+DE↓j
.text:00410146                 mov     eax, [edx+10h]
.text:00410149                 mov     [ecx+10h], esi
.text:0041014C
.text:0041014C loc_41014C:                             ; CODE XREF: sub_4100B0+D1↓j
.text:0041014C                 mov     esi, [edx+14h]
.text:0041014F                 mov     [ecx+14h], eax
.text:00410152
.text:00410152 loc_410152:                             ; CODE XREF: sub_4100B0+C4↓j
.text:00410152                 mov     eax, [edx+18h]
.text:00410155                 mov     [ecx+18h], esi
.text:00410158                 jmp     short loc_410110
.text:0041015A ; ---------------------------------------------------------------------------
.text:0041015A
.text:0041015A loc_41015A:                             ; CODE XREF: sub_4100B0+20↑j
.text:0041015A                                         ; DATA XREF: sub_4100B0:jpt_4100D0↑o
.text:0041015A                 mov     eax, [edx]      ; jumptable 004100D0 case 0
.text:0041015C                 sub     ecx, 4
.text:0041015F                 jmp     short loc_410134
.text:00410161 ; ---------------------------------------------------------------------------
.text:00410161
.text:00410161 loc_410161:                             ; CODE XREF: sub_4100B0+20↑j
.text:00410161                                         ; DATA XREF: sub_4100B0:jpt_4100D0↑o
.text:00410161                 mov     esi, [edx]      ; jumptable 004100D0 case 1
.text:00410163                 dec     ebx
.text:00410164                 add     edx, 4
.text:00410167                 jmp     short def_4100D0 ; jumptable 004100D0 default case
.text:00410169 ; ---------------------------------------------------------------------------
.text:00410169
.text:00410169 loc_410169:                             ; CODE XREF: sub_4100B0+20↑j
.text:00410169                                         ; DATA XREF: sub_4100B0:jpt_4100D0↑o
.text:00410169                 mov     esi, [edx]      ; jumptable 004100D0 case 3
.text:0041016B                 sub     ecx, 18h
.text:0041016E                 add     ebx, 5
.text:00410171                 sub     edx, 14h
.text:00410174                 jmp     short loc_410152
.text:00410176 ; ---------------------------------------------------------------------------
.text:00410176
.text:00410176 loc_410176:                             ; CODE XREF: sub_4100B0+20↑j
.text:00410176                                         ; DATA XREF: sub_4100B0:jpt_4100D0↑o
.text:00410176                 mov     eax, [edx]      ; jumptable 004100D0 case 4
.text:00410178                 sub     ecx, 14h
.text:0041017B                 add     ebx, 4
.text:0041017E                 sub     edx, 10h
.text:00410181                 jmp     short loc_41014C
.text:00410183 ; ---------------------------------------------------------------------------
.text:00410183
.text:00410183 loc_410183:                             ; CODE XREF: sub_4100B0+20↑j
.text:00410183                                         ; DATA XREF: sub_4100B0:jpt_4100D0↑o
.text:00410183                 mov     esi, [edx]      ; jumptable 004100D0 case 5
.text:00410185                 sub     ecx, 10h
.text:00410188                 add     ebx, 3
.text:0041018B                 sub     edx, 0Ch
.text:0041018E                 jmp     short loc_410146
.text:00410190 ; ---------------------------------------------------------------------------
.text:00410190
.text:00410190 loc_410190:                             ; CODE XREF: sub_4100B0+20↑j
.text:00410190                                         ; DATA XREF: sub_4100B0:jpt_4100D0↑o
.text:00410190                 mov     eax, [edx]      ; jumptable 004100D0 case 6
.text:00410192                 sub     ecx, 0Ch
.text:00410195                 add     ebx, 2
.text:00410198                 sub     edx, 8
.text:0041019B                 jmp     short loc_410140
.text:0041019D ; ---------------------------------------------------------------------------
.text:0041019D
.text:0041019D loc_41019D:                             ; CODE XREF: sub_4100B0+20↑j
.text:0041019D                                         ; DATA XREF: sub_4100B0:jpt_4100D0↑o
.text:0041019D                 mov     esi, [edx]      ; jumptable 004100D0 case 7
.text:0041019F                 sub     ecx, 8
.text:004101A2                 inc     ebx
.text:004101A3                 sub     edx, 4
.text:004101A6                 jmp     short loc_41013A
.text:004101A6 sub_4100B0      endp
.text:004101A6
.text:004101A6 ; ---------------------------------------------------------------------------
.text:004101A8                 align 10h
.text:004101B0
.text:004101B0 ; =============== S U B R O U T I N E =======================================
.text:004101B0
.text:004101B0
.text:004101B0 sub_4101B0      proc near               ; CODE XREF: sub_40FA20+93↑p
.text:004101B0
.text:004101B0 var_1C          = dword ptr -1Ch
.text:004101B0 var_18          = dword ptr -18h
.text:004101B0 var_14          = dword ptr -14h
.text:004101B0 arg_0           = dword ptr  4
.text:004101B0 arg_4           = dword ptr  8
.text:004101B0 arg_8           = dword ptr  0Ch
.text:004101B0
.text:004101B0                 push    ebp
.text:004101B1                 push    edi
.text:004101B2                 push    esi
.text:004101B3                 push    ebx
.text:004101B4                 sub     esp, 0Ch
.text:004101B7                 mov     edx, [esp+1Ch+arg_4]
.text:004101BB                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:004101C3                 mov     eax, [esp+1Ch+arg_8]
.text:004101C7                 mov     esi, [esp+1Ch+arg_0]
.text:004101CB                 mov     ecx, edx
.text:004101CD                 and     ecx, 3
.text:004101D0                 and     eax, 3
.text:004101D3                 shl     ecx, 3
.text:004101D6                 and     edx, 0FFFFFFFCh
.text:004101D9                 sub     [esp+1Ch+var_14], ecx
.text:004101DD                 cmp     eax, 1
.text:004101E0                 mov     [esp+1Ch+var_18], ecx
.text:004101E4                 jz      loc_4102D0
.text:004101EA                 cmp     eax, 1
.text:004101ED                 jb      loc_4102C0
.text:004101F3                 cmp     eax, 2
.text:004101F6                 jz      loc_4102A4
.text:004101FC                 cmp     eax, 3
.text:004101FF                 jz      loc_410293
.text:00410205
.text:00410205 loc_410205:                             ; CODE XREF: sub_4101B0+C7↓j
.text:00410205                                         ; sub_4101B0+12C↓j
.text:00410205                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041020A                 mov     eax, edi
.text:0041020C                 mov     ebx, [edx]
.text:0041020E                 shr     ebp, cl
.text:00410210                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00410215                 shl     eax, cl
.text:00410217                 or      ebp, eax
.text:00410219                 mov     [esi], ebp
.text:0041021B
.text:0041021B loc_41021B:                             ; CODE XREF: sub_4101B0+11B↓j
.text:0041021B                 mov     ecx, [edx+4]
.text:0041021E                 mov     ebp, ebx
.text:00410220                 mov     [esp+1Ch+var_1C], ecx
.text:00410223                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00410228                 shr     edi, cl
.text:0041022A                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041022F                 shl     ebp, cl
.text:00410231                 or      edi, ebp
.text:00410233                 mov     [esi+4], edi
.text:00410236
.text:00410236 loc_410236:                             ; CODE XREF: sub_4101B0+F2↓j
.text:00410236                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041023B                 mov     edi, [esp+1Ch+var_1C]
.text:0041023E                 mov     ebp, [edx+8]
.text:00410241                 shr     ebx, cl
.text:00410243                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00410248                 shl     edi, cl
.text:0041024A                 or      ebx, edi
.text:0041024C                 mov     [esi+8], ebx
.text:0041024F
.text:0041024F loc_41024F:                             ; CODE XREF: sub_4101B0+107↓j
.text:0041024F                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00410254                 mov     ebx, ebp
.text:00410256                 mov     edi, [edx+0Ch]
.text:00410259                 add     edx, 10h
.text:0041025C                 shr     [esp+1Ch+var_1C], cl
.text:0041025F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00410264                 shl     ebx, cl
.text:00410266                 or      [esp+1Ch+var_1C], ebx
.text:00410269                 mov     ebx, [esp+1Ch+var_1C]
.text:0041026C                 mov     [esi+0Ch], ebx
.text:0041026F                 add     esi, 10h
.text:00410272                 sub     [esp+1Ch+arg_8], 4
.text:00410277                 jnz     short loc_410205
.text:00410279                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041027E                 shr     ebp, cl
.text:00410280                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00410285                 shl     edi, cl
.text:00410287                 or      ebp, edi
.text:00410289                 mov     [esi], ebp
.text:0041028B                 add     esp, 0Ch
.text:0041028E                 pop     ebx
.text:0041028F                 pop     esi
.text:00410290                 pop     edi
.text:00410291                 pop     ebp
.text:00410292                 retn
.text:00410293 ; ---------------------------------------------------------------------------
.text:00410293
.text:00410293 loc_410293:                             ; CODE XREF: sub_4101B0+4F↑j
.text:00410293                 inc     [esp+1Ch+arg_8]
.text:00410297                 sub     esi, 8
.text:0041029A                 mov     eax, [edx+4]
.text:0041029D                 mov     ebx, [edx]
.text:0041029F                 mov     [esp+1Ch+var_1C], eax
.text:004102A2                 jmp     short loc_410236
.text:004102A4 ; ---------------------------------------------------------------------------
.text:004102A4
.text:004102A4 loc_4102A4:                             ; CODE XREF: sub_4101B0+46↑j
.text:004102A4                 add     [esp+1Ch+arg_8], 2
.text:004102A9                 sub     esi, 0Ch
.text:004102AC                 mov     ecx, [edx]
.text:004102AE                 mov     ebp, [edx+4]
.text:004102B1                 sub     edx, 4
.text:004102B4                 mov     [esp+1Ch+var_1C], ecx
.text:004102B7                 jmp     short loc_41024F
.text:004102B7 ; ---------------------------------------------------------------------------
.text:004102B9                 align 10h
.text:004102C0
.text:004102C0 loc_4102C0:                             ; CODE XREF: sub_4101B0+3D↑j
.text:004102C0                 mov     edi, [edx]
.text:004102C2                 sub     esi, 4
.text:004102C5                 mov     ebx, [edx+4]
.text:004102C8                 add     edx, 4
.text:004102CB                 jmp     loc_41021B
.text:004102D0 ; ---------------------------------------------------------------------------
.text:004102D0
.text:004102D0 loc_4102D0:                             ; CODE XREF: sub_4101B0+34↑j
.text:004102D0                 dec     [esp+1Ch+arg_8]
.text:004102D4                 mov     ebp, [edx]
.text:004102D6                 mov     edi, [edx+4]
.text:004102D9                 add     edx, 8
.text:004102DC                 jmp     loc_410205
.text:004102DC sub_4101B0      endp
.text:004102DC
.text:004102E1 ; ---------------------------------------------------------------------------
.text:004102E1                 jmp     short loc_4102F0
.text:004102E1 ; ---------------------------------------------------------------------------
.text:004102E3                 align 10h
.text:004102F0
.text:004102F0 loc_4102F0:                             ; CODE XREF: .text:004102E1↑j
.text:004102F0                 sub     esp, 8
.text:004102F3                 mov     ecx, [esp+0Ch]
.text:004102F7                 mov     [esp+4], esi
.text:004102FB                 mov     esi, [esp+14h]
.text:004102FF                 mov     [esp], ebx
.text:00410302                 mov     edx, [esp+10h]
.text:00410306                 mov     eax, esi
.text:00410308                 and     eax, 7
.text:0041030B                 cmp     eax, 7          ; switch 8 cases
.text:0041030E                 ja      short def_410310 ; jumptable 00410310 default case
.text:00410310                 jmp     ds:jpt_410310[eax*4] ; switch jump
.text:00410310 ; ---------------------------------------------------------------------------
.text:00410317                 align 4
.text:00410318 jpt_410310      dd offset loc_41039C    ; DATA XREF: .text:00410310↑r
.text:00410318                 dd offset loc_4103A7    ; jump table for switch statement
.text:00410318                 dd offset loc_410338
.text:00410318                 dd offset loc_4103B3
.text:00410318                 dd offset loc_4103C1
.text:00410318                 dd offset loc_4103CF
.text:00410318                 dd offset loc_4103DD
.text:00410318                 dd offset loc_4103EB
.text:00410338 ; ---------------------------------------------------------------------------
.text:00410338
.text:00410338 loc_410338:                             ; CODE XREF: .text:00410310↑j
.text:00410338                                         ; DATA XREF: .text:jpt_410310↑o
.text:00410338                 sub     edx, 8          ; jumptable 00410310 case 2
.text:0041033B                 sub     ecx, 4
.text:0041033E                 mov     eax, [edx+4]
.text:00410341                 add     esi, 6
.text:00410344                 lea     esi, [esi+0]
.text:0041034A                 lea     edi, [edi+0]
.text:00410350
.text:00410350 loc_410350:                             ; CODE XREF: .text:0041039A↓j
.text:00410350                 mov     ebx, [edx]
.text:00410352                 sub     edx, 20h ; ' '
.text:00410355                 mov     [ecx], eax
.text:00410357                 sub     ecx, 20h ; ' '
.text:0041035A                 sub     esi, 8
.text:0041035D                 jnz     short def_410310 ; jumptable 00410310 default case
.text:0041035F                 mov     [ecx+1Ch], ebx
.text:00410362                 mov     ebx, [esp]
.text:00410365                 mov     esi, [esp+4]
.text:00410369                 add     esp, 8
.text:0041036C                 retn
.text:0041036C ; ---------------------------------------------------------------------------
.text:0041036D                 align 10h
.text:00410370
.text:00410370 def_410310:                             ; CODE XREF: .text:0041030E↑j
.text:00410370                                         ; .text:0041035D↑j ...
.text:00410370                 mov     eax, [edx+1Ch]  ; jumptable 00410310 default case
.text:00410373                 mov     [ecx+1Ch], ebx
.text:00410376
.text:00410376 loc_410376:                             ; CODE XREF: .text:004103A5↓j
.text:00410376                 mov     ebx, [edx+18h]
.text:00410379                 mov     [ecx+18h], eax
.text:0041037C
.text:0041037C loc_41037C:                             ; CODE XREF: .text:004103F5↓j
.text:0041037C                 mov     eax, [edx+14h]
.text:0041037F                 mov     [ecx+14h], ebx
.text:00410382
.text:00410382 loc_410382:                             ; CODE XREF: .text:004103E9↓j
.text:00410382                 mov     ebx, [edx+10h]
.text:00410385                 mov     [ecx+10h], eax
.text:00410388
.text:00410388 loc_410388:                             ; CODE XREF: .text:004103DB↓j
.text:00410388                 mov     eax, [edx+0Ch]
.text:0041038B                 mov     [ecx+0Ch], ebx
.text:0041038E
.text:0041038E loc_41038E:                             ; CODE XREF: .text:004103CD↓j
.text:0041038E                 mov     ebx, [edx+8]
.text:00410391                 mov     [ecx+8], eax
.text:00410394
.text:00410394 loc_410394:                             ; CODE XREF: .text:004103BF↓j
.text:00410394                 mov     eax, [edx+4]
.text:00410397                 mov     [ecx+4], ebx
.text:0041039A                 jmp     short loc_410350
.text:0041039C ; ---------------------------------------------------------------------------
.text:0041039C
.text:0041039C loc_41039C:                             ; CODE XREF: .text:00410310↑j
.text:0041039C                                         ; DATA XREF: .text:jpt_410310↑o
.text:0041039C                 sub     edx, 20h ; ' '  ; jumptable 00410310 case 0
.text:0041039F                 sub     ecx, 1Ch
.text:004103A2                 mov     eax, [edx+1Ch]
.text:004103A5                 jmp     short loc_410376
.text:004103A7 ; ---------------------------------------------------------------------------
.text:004103A7
.text:004103A7 loc_4103A7:                             ; CODE XREF: .text:00410310↑j
.text:004103A7                                         ; DATA XREF: .text:jpt_410310↑o
.text:004103A7                 sub     edx, 24h ; '$'  ; jumptable 00410310 case 1
.text:004103AA                 sub     ecx, 20h ; ' '
.text:004103AD                 mov     ebx, [edx+20h]
.text:004103B0                 dec     esi
.text:004103B1                 jmp     short def_410310 ; jumptable 00410310 default case
.text:004103B3 ; ---------------------------------------------------------------------------
.text:004103B3
.text:004103B3 loc_4103B3:                             ; CODE XREF: .text:00410310↑j
.text:004103B3                                         ; DATA XREF: .text:jpt_410310↑o
.text:004103B3                 sub     edx, 0Ch        ; jumptable 00410310 case 3
.text:004103B6                 sub     ecx, 8
.text:004103B9                 mov     ebx, [edx+8]
.text:004103BC                 add     esi, 5
.text:004103BF                 jmp     short loc_410394
.text:004103C1 ; ---------------------------------------------------------------------------
.text:004103C1
.text:004103C1 loc_4103C1:                             ; CODE XREF: .text:00410310↑j
.text:004103C1                                         ; DATA XREF: .text:jpt_410310↑o
.text:004103C1                 sub     edx, 10h        ; jumptable 00410310 case 4
.text:004103C4                 sub     ecx, 0Ch
.text:004103C7                 mov     eax, [edx+0Ch]
.text:004103CA                 add     esi, 4
.text:004103CD                 jmp     short loc_41038E
.text:004103CF ; ---------------------------------------------------------------------------
.text:004103CF
.text:004103CF loc_4103CF:                             ; CODE XREF: .text:00410310↑j
.text:004103CF                                         ; DATA XREF: .text:jpt_410310↑o
.text:004103CF                 sub     edx, 14h        ; jumptable 00410310 case 5
.text:004103D2                 sub     ecx, 10h
.text:004103D5                 mov     ebx, [edx+10h]
.text:004103D8                 add     esi, 3
.text:004103DB                 jmp     short loc_410388
.text:004103DD ; ---------------------------------------------------------------------------
.text:004103DD
.text:004103DD loc_4103DD:                             ; CODE XREF: .text:00410310↑j
.text:004103DD                                         ; DATA XREF: .text:jpt_410310↑o
.text:004103DD                 sub     edx, 18h        ; jumptable 00410310 case 6
.text:004103E0                 sub     ecx, 14h
.text:004103E3                 mov     eax, [edx+14h]
.text:004103E6                 add     esi, 2
.text:004103E9                 jmp     short loc_410382
.text:004103EB ; ---------------------------------------------------------------------------
.text:004103EB
.text:004103EB loc_4103EB:                             ; CODE XREF: .text:00410310↑j
.text:004103EB                                         ; DATA XREF: .text:jpt_410310↑o
.text:004103EB                 sub     edx, 1Ch        ; jumptable 00410310 case 7
.text:004103EE                 sub     ecx, 18h
.text:004103F1                 mov     ebx, [edx+18h]
.text:004103F4                 inc     esi
.text:004103F5                 jmp     short loc_41037C
.text:004103F5 ; ---------------------------------------------------------------------------
.text:004103F7                 align 10h
.text:00410400                 push    ebp
.text:00410401                 push    edi
.text:00410402                 push    esi
.text:00410403                 push    ebx
.text:00410404                 sub     esp, 8
.text:00410407                 mov     edx, [esp+20h]
.text:0041040B                 mov     dword ptr [esp+4], 20h ; ' '
.text:00410413                 mov     eax, [esp+24h]
.text:00410417                 mov     ecx, edx
.text:00410419                 and     ecx, 3
.text:0041041C                 and     eax, 3
.text:0041041F                 shl     ecx, 3
.text:00410422                 sub     [esp+4], ecx
.text:00410426                 and     edx, 0FFFFFFFCh
.text:00410429                 add     edx, 4
.text:0041042C                 mov     [esp], ecx
.text:0041042F                 cmp     eax, 1
.text:00410432                 jz      loc_410528
.text:00410438                 cmp     eax, 1
.text:0041043B                 jb      loc_410515
.text:00410441                 cmp     eax, 2
.text:00410444                 jz      loc_410500
.text:0041044A                 cmp     eax, 3
.text:0041044D                 jz      loc_4104EC
.text:00410453
.text:00410453 loc_410453:                             ; CODE XREF: .text:004104CC↓j
.text:00410453                                         ; .text:0041053A↓j
.text:00410453                 movzx   ecx, byte ptr [esp]
.text:00410457                 mov     eax, edi
.text:00410459                 mov     ebx, [esp+1Ch]
.text:0041045D                 mov     esi, [edx+0Ch]
.text:00410460                 shr     eax, cl
.text:00410462                 movzx   ecx, byte ptr [esp+4]
.text:00410467                 shl     ebp, cl
.text:00410469                 or      eax, ebp
.text:0041046B                 mov     [ebx+0Ch], eax
.text:0041046E
.text:0041046E loc_41046E:                             ; CODE XREF: .text:00410523↓j
.text:0041046E                 movzx   ecx, byte ptr [esp]
.text:00410472                 mov     ebp, esi
.text:00410474                 mov     ebx, [edx+8]
.text:00410477                 shr     ebp, cl
.text:00410479                 movzx   ecx, byte ptr [esp+4]
.text:0041047E                 shl     edi, cl
.text:00410480                 or      ebp, edi
.text:00410482                 mov     edi, [esp+1Ch]
.text:00410486                 mov     [edi+8], ebp
.text:00410489
.text:00410489 loc_410489:                             ; CODE XREF: .text:004104FE↓j
.text:00410489                 movzx   ecx, byte ptr [esp]
.text:0041048D                 mov     edi, ebx
.text:0041048F                 mov     ebp, [edx+4]
.text:00410492                 shr     edi, cl
.text:00410494                 movzx   ecx, byte ptr [esp+4]
.text:00410499                 shl     esi, cl
.text:0041049B                 or      edi, esi
.text:0041049D                 mov     esi, [esp+1Ch]
.text:004104A1                 mov     [esi+4], edi
.text:004104A4
.text:004104A4 loc_4104A4:                             ; CODE XREF: .text:00410513↓j
.text:004104A4                 movzx   ecx, byte ptr [esp]
.text:004104A8                 mov     esi, ebp
.text:004104AA                 mov     edi, [edx]
.text:004104AC                 sub     edx, 10h
.text:004104AF                 shr     esi, cl
.text:004104B1                 movzx   ecx, byte ptr [esp+4]
.text:004104B6                 shl     ebx, cl
.text:004104B8                 or      esi, ebx
.text:004104BA                 mov     ebx, [esp+1Ch]
.text:004104BE                 mov     [ebx], esi
.text:004104C0                 sub     ebx, 10h
.text:004104C3                 sub     dword ptr [esp+24h], 4
.text:004104C8                 mov     [esp+1Ch], ebx
.text:004104CC                 jnz     short loc_410453
.text:004104CE                 movzx   ecx, byte ptr [esp]
.text:004104D2                 mov     edx, [esp+1Ch]
.text:004104D6                 shr     edi, cl
.text:004104D8                 movzx   ecx, byte ptr [esp+4]
.text:004104DD                 shl     ebp, cl
.text:004104DF                 or      edi, ebp
.text:004104E1                 mov     [edx+0Ch], edi
.text:004104E4                 add     esp, 8
.text:004104E7                 pop     ebx
.text:004104E8                 pop     esi
.text:004104E9                 pop     edi
.text:004104EA                 pop     ebp
.text:004104EB                 retn
.text:004104EC ; ---------------------------------------------------------------------------
.text:004104EC
.text:004104EC loc_4104EC:                             ; CODE XREF: .text:0041044D↑j
.text:004104EC                 sub     dword ptr [esp+1Ch], 8
.text:004104F1                 sub     edx, 10h
.text:004104F4                 inc     dword ptr [esp+24h]
.text:004104F8                 mov     esi, [edx+0Ch]
.text:004104FB                 mov     ebx, [edx+8]
.text:004104FE                 jmp     short loc_410489
.text:00410500 ; ---------------------------------------------------------------------------
.text:00410500
.text:00410500 loc_410500:                             ; CODE XREF: .text:00410444↑j
.text:00410500                 sub     dword ptr [esp+1Ch], 4
.text:00410505                 sub     edx, 0Ch
.text:00410508                 add     dword ptr [esp+24h], 2
.text:0041050D                 mov     ebx, [edx+8]
.text:00410510                 mov     ebp, [edx+4]
.text:00410513                 jmp     short loc_4104A4
.text:00410515 ; ---------------------------------------------------------------------------
.text:00410515
.text:00410515 loc_410515:                             ; CODE XREF: .text:0041043B↑j
.text:00410515                 sub     dword ptr [esp+1Ch], 0Ch
.text:0041051A                 sub     edx, 14h
.text:0041051D                 mov     edi, [edx+10h]
.text:00410520                 mov     esi, [edx+0Ch]
.text:00410523                 jmp     loc_41046E
.text:00410528 ; ---------------------------------------------------------------------------
.text:00410528
.text:00410528 loc_410528:                             ; CODE XREF: .text:00410432↑j
.text:00410528                 sub     dword ptr [esp+1Ch], 10h
.text:0041052D                 sub     edx, 18h
.text:00410530                 dec     dword ptr [esp+24h]
.text:00410534                 mov     ebp, [edx+14h]
.text:00410537                 mov     edi, [edx+10h]
.text:0041053A                 jmp     loc_410453
.text:0041053A ; ---------------------------------------------------------------------------
.text:0041053F                 align 10h
.text:00410540 aFile           db 'file',0             ; DATA XREF: sub_410570:loc_41059C↓o
.text:00410545 ; const char aSSxxxxxx[]
.text:00410545 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_410570+9B↓o
.text:00410555 ; const char aTemp[]
.text:00410555 aTemp           db 'TEMP',0             ; DATA XREF: sub_410570:loc_410652↓o
.text:00410555                                         ; sub_410570:loc_410692↓o ...
.text:0041055A ; const char aTmp[]
.text:0041055A aTmp            db '/tmp',0             ; DATA XREF: sub_410570+12F↓o
.text:0041055A                                         ; sub_410570+141↓o ...
.text:0041055F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_410570:loc_410710↓o
.text:00410566 aTmp_0          db 'TMP',0              ; DATA XREF: sub_410570:loc_4107A0↓o
.text:0041056A                 align 10h
.text:00410570
.text:00410570 ; =============== S U B R O U T I N E =======================================
.text:00410570
.text:00410570
.text:00410570 ; int __cdecl sub_410570(char *Buffer, int, char *, char *, int)
.text:00410570 sub_410570      proc near               ; CODE XREF: sub_40FC30+3B↑p
.text:00410570
.text:00410570 Str             = dword ptr -1BCh
.text:00410570 Format          = dword ptr -1B8h
.text:00410570 var_1B4         = dword ptr -1B4h
.text:00410570 var_1B0         = dword ptr -1B0h
.text:00410570 var_1AC         = dword ptr -1ACh
.text:00410570 var_1A8         = dword ptr -1A8h
.text:00410570 var_19C         = dword ptr -19Ch
.text:00410570 var_13C         = dword ptr -13Ch
.text:00410570 var_DC          = dword ptr -0DCh
.text:00410570 var_7C          = dword ptr -7Ch
.text:00410570 Buffer          = dword ptr  4
.text:00410570 arg_4           = dword ptr  8
.text:00410570 arg_8           = dword ptr  0Ch
.text:00410570 arg_C           = dword ptr  10h
.text:00410570 arg_10          = dword ptr  14h
.text:00410570
.text:00410570                 push    ebp
.text:00410571                 push    edi
.text:00410572                 push    esi
.text:00410573                 push    ebx
.text:00410574                 sub     esp, 1ACh
.text:0041057A                 mov     eax, [esp+1BCh+arg_C]
.text:00410581                 mov     esi, [esp+1BCh+arg_8]
.text:00410588                 test    eax, eax
.text:0041058A                 jz      short loc_41059C
.text:0041058C                 mov     edx, [esp+1BCh+arg_C]
.text:00410593                 cmp     byte ptr [edx], 0
.text:00410596                 jnz     loc_4107D0
.text:0041059C
.text:0041059C loc_41059C:                             ; CODE XREF: sub_410570+1A↑j
.text:0041059C                 mov     eax, offset aFile ; "file"
.text:004105A1                 mov     ebp, 4
.text:004105A6                 mov     [esp+1BCh+arg_C], eax
.text:004105AD
.text:004105AD loc_4105AD:                             ; CODE XREF: sub_410570+274↓j
.text:004105AD                                         ; sub_410570+27F↓j
.text:004105AD                 mov     ebx, [esp+1BCh+arg_10]
.text:004105B4                 test    ebx, ebx
.text:004105B6                 jnz     loc_410710
.text:004105BC
.text:004105BC loc_4105BC:                             ; CODE XREF: sub_410570+21C↓j
.text:004105BC                                         ; sub_410570+224↓j ...
.text:004105BC                 test    esi, esi
.text:004105BE                 jz      loc_410652
.text:004105C4
.text:004105C4 loc_4105C4:                             ; CODE XREF: sub_410570+176↓j
.text:004105C4                                         ; sub_410570+19A↓j
.text:004105C4                 mov     [esp+1BCh+Str], esi ; Str
.text:004105C7                 call    strlen
.text:004105CC                 test    eax, eax
.text:004105CE                 mov     edx, eax
.text:004105D0                 jz      short loc_4105E0
.text:004105D2                 movzx   eax, byte ptr [eax+esi-1]
.text:004105D7                 cmp     al, 2Fh ; '/'
.text:004105D9                 jz      short loc_410640
.text:004105DB                 cmp     al, 5Ch ; '\'
.text:004105DD                 jz      short loc_410640
.text:004105DF                 nop
.text:004105E0
.text:004105E0 loc_4105E0:                             ; CODE XREF: sub_410570+60↑j
.text:004105E0                                         ; sub_410570+D1↓j ...
.text:004105E0                 lea     edi, [ebp+edx+8]
.text:004105E4                 cmp     [esp+1BCh+arg_4], edi
.text:004105EB                 jb      short loc_410628
.text:004105ED                 mov     [esp+1BCh+var_1AC], ebp
.text:004105F1                 mov     ecx, [esp+1BCh+arg_C]
.text:004105F8                 mov     ebp, [esp+1BCh+Buffer]
.text:004105FF                 mov     [esp+1BCh+var_1B0], esi
.text:00410603                 mov     [esp+1BCh+var_1A8], ecx
.text:00410607                 mov     [esp+1BCh+var_1B4], edx
.text:0041060B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00410613                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00410616                 call    sprintf
.text:0041061B                 xor     eax, eax
.text:0041061D
.text:0041061D loc_41061D:                             ; CODE XREF: sub_410570+C8↓j
.text:0041061D                 add     esp, 1ACh
.text:00410623                 pop     ebx
.text:00410624                 pop     esi
.text:00410625                 pop     edi
.text:00410626                 pop     ebp
.text:00410627                 retn
.text:00410628 ; ---------------------------------------------------------------------------
.text:00410628
.text:00410628 loc_410628:                             ; CODE XREF: sub_410570+7B↑j
.text:00410628                 call    _errno
.text:0041062D                 mov     dword ptr [eax], 16h
.text:00410633
.text:00410633 loc_410633:                             ; CODE XREF: sub_410570+187↓j
.text:00410633                 mov     eax, 0FFFFFFFFh
.text:00410638                 jmp     short loc_41061D
.text:00410638 ; ---------------------------------------------------------------------------
.text:0041063A                 align 10h
.text:00410640
.text:00410640 loc_410640:                             ; CODE XREF: sub_410570+69↑j
.text:00410640                                         ; sub_410570+6D↑j ...
.text:00410640                 dec     edx
.text:00410641                 jz      short loc_4105E0
.text:00410643                 movzx   eax, byte ptr [edx+esi-1]
.text:00410648                 cmp     al, 2Fh ; '/'
.text:0041064A                 jz      short loc_410640
.text:0041064C                 cmp     al, 5Ch ; '\'
.text:0041064E                 jz      short loc_410640
.text:00410650                 jmp     short loc_4105E0
.text:00410652 ; ---------------------------------------------------------------------------
.text:00410652
.text:00410652 loc_410652:                             ; CODE XREF: sub_410570+4E↑j
.text:00410652                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410659                 lea     esi, [esp+1BCh+var_13C]
.text:00410660                 call    getenv
.text:00410665                 mov     [esp+1BCh+Format], eax ; char *
.text:00410669                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0041066D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410674                 call    sub_40CBE0
.text:00410679                 test    eax, eax
.text:0041067B                 jnz     short loc_410692
.text:0041067D                 mov     edi, [esp+1BCh+var_13C]
.text:00410684                 and     edi, 0F000h
.text:0041068A                 cmp     edi, 4000h
.text:00410690                 jz      short loc_4106FC
.text:00410692
.text:00410692 loc_410692:                             ; CODE XREF: sub_410570+10B↑j
.text:00410692                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410699                 call    getenv
.text:0041069E                 cld
.text:0041069F                 mov     edx, offset aTmp ; "/tmp"
.text:004106A4                 mov     esi, eax
.text:004106A6                 mov     ecx, 5
.text:004106AB                 mov     edi, edx
.text:004106AD                 repe cmpsb
.text:004106AF                 jz      short loc_4106EC
.text:004106B1                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:004106B9                 lea     ecx, [esp+1BCh+var_19C]
.text:004106BD                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:004106C1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:004106C8                 call    sub_40CBE0
.text:004106CD                 test    eax, eax
.text:004106CF                 jnz     short loc_4106EC
.text:004106D1                 mov     ebx, [esp+1BCh+var_19C]
.text:004106D5                 mov     esi, offset aTmp ; "/tmp"
.text:004106DA                 and     ebx, 0F000h
.text:004106E0                 cmp     ebx, 4000h
.text:004106E6                 jz      loc_4105C4
.text:004106EC
.text:004106EC loc_4106EC:                             ; CODE XREF: sub_410570+13F↑j
.text:004106EC                                         ; sub_410570+15F↑j
.text:004106EC                 call    _errno
.text:004106F1                 mov     dword ptr [eax], 2
.text:004106F7                 jmp     loc_410633
.text:004106FC ; ---------------------------------------------------------------------------
.text:004106FC
.text:004106FC loc_4106FC:                             ; CODE XREF: sub_410570+120↑j
.text:004106FC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410703                 call    getenv
.text:00410708                 mov     esi, eax
.text:0041070A                 jmp     loc_4105C4
.text:0041070A ; ---------------------------------------------------------------------------
.text:0041070F                 align 10h
.text:00410710
.text:00410710 loc_410710:                             ; CODE XREF: sub_410570+46↑j
.text:00410710                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:00410717                 call    sub_410E20
.text:0041071C                 test    eax, eax
.text:0041071E                 mov     ebx, eax
.text:00410720                 jz      short loc_4107A0
.text:00410722
.text:00410722 loc_410722:                             ; CODE XREF: sub_410570+240↓j
.text:00410722                                         ; sub_410570+256↓j
.text:00410722                 mov     [esp+1BCh+Format], ebx ; char *
.text:00410726                 lea     edi, [esp+1BCh+var_7C]
.text:0041072D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00410731                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410738                 call    sub_40CBE0
.text:0041073D                 test    eax, eax
.text:0041073F                 jnz     short loc_410756
.text:00410741                 mov     edx, [esp+1BCh+var_7C]
.text:00410748                 and     edx, 0F000h
.text:0041074E                 cmp     edx, 4000h
.text:00410754                 jz      short loc_410799
.text:00410756
.text:00410756 loc_410756:                             ; CODE XREF: sub_410570+1CF↑j
.text:00410756                                         ; sub_410570+25C↓j
.text:00410756                 test    esi, esi
.text:00410758                 jz      short loc_410792
.text:0041075A                 mov     [esp+1BCh+Format], esi ; char *
.text:0041075E                 lea     ecx, [esp+1BCh+var_DC]
.text:00410765                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00410769                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410770                 call    sub_40CBE0
.text:00410775                 test    eax, eax
.text:00410777                 jnz     short loc_410792
.text:00410779                 mov     ebx, [esp+1BCh+var_DC]
.text:00410780                 and     ebx, 0F000h
.text:00410786                 cmp     ebx, 4000h
.text:0041078C                 jz      loc_4105BC
.text:00410792
.text:00410792 loc_410792:                             ; CODE XREF: sub_410570+1E8↑j
.text:00410792                                         ; sub_410570+207↑j
.text:00410792                 xor     esi, esi
.text:00410794                 jmp     loc_4105BC
.text:00410799 ; ---------------------------------------------------------------------------
.text:00410799
.text:00410799 loc_410799:                             ; CODE XREF: sub_410570+1E4↑j
.text:00410799                 mov     esi, ebx
.text:0041079B                 jmp     loc_4105BC
.text:004107A0 ; ---------------------------------------------------------------------------
.text:004107A0
.text:004107A0 loc_4107A0:                             ; CODE XREF: sub_410570+1B0↑j
.text:004107A0                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:004107A7                 call    sub_410E20
.text:004107AC                 test    eax, eax
.text:004107AE                 mov     ebx, eax
.text:004107B0                 jnz     loc_410722
.text:004107B6                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004107BD                 call    sub_410E20
.text:004107C2                 test    eax, eax
.text:004107C4                 mov     ebx, eax
.text:004107C6                 jnz     loc_410722
.text:004107CC                 jmp     short loc_410756
.text:004107CC ; ---------------------------------------------------------------------------
.text:004107CE                 align 10h
.text:004107D0
.text:004107D0 loc_4107D0:                             ; CODE XREF: sub_410570+26↑j
.text:004107D0                 mov     ecx, [esp+1BCh+arg_C]
.text:004107D7                 mov     [esp+1BCh+Str], ecx ; Str
.text:004107DA                 call    strlen
.text:004107DF                 cmp     eax, 5
.text:004107E2                 mov     ebp, eax
.text:004107E4                 jbe     loc_4105AD
.text:004107EA                 mov     ebp, 5
.text:004107EF                 jmp     loc_4105AD
.text:004107EF sub_410570      endp
.text:004107EF
.text:004107EF ; ---------------------------------------------------------------------------
.text:004107F4                 align 10h
.text:00410800 byte_410800     db 61h                  ; DATA XREF: sub_4108F0+DC↓r
.text:00410800                                         ; sub_4108F0+122↓r ...
.text:00410801 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0041083F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_4108F0+39↓o
.text:00410846                 align 20h
.text:00410860 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00410860                                         ; DATA XREF: sub_4108F0:loc_410B68↓o
.text:0041087F                 align 10h
.text:00410880 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:00410880                                         ; DATA XREF: sub_4108F0+405↓o
.text:004108AB                 align 20h
.text:004108C0 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:004108C0                                         ; DATA XREF: sub_4108F0+40D↓o
.text:004108E3                 align 10h
.text:004108F0
.text:004108F0 ; =============== S U B R O U T I N E =======================================
.text:004108F0
.text:004108F0
.text:004108F0 ; int __cdecl sub_4108F0(char *FileName, int)
.text:004108F0 sub_4108F0      proc near               ; CODE XREF: sub_40FC30+51↑p
.text:004108F0
.text:004108F0 Str             = dword ptr -9Ch
.text:004108F0 OpenFlag        = dword ptr -98h
.text:004108F0 var_94          = dword ptr -94h
.text:004108F0 var_90          = dword ptr -90h
.text:004108F0 var_8C          = dword ptr -8Ch
.text:004108F0 var_88          = dword ptr -88h
.text:004108F0 var_84          = dword ptr -84h
.text:004108F0 var_80          = dword ptr -80h
.text:004108F0 var_7C          = dword ptr -7Ch
.text:004108F0 FileName        = dword ptr  4
.text:004108F0 arg_4           = dword ptr  8
.text:004108F0
.text:004108F0                 push    ebp
.text:004108F1                 push    edi
.text:004108F2                 push    esi
.text:004108F3                 push    ebx
.text:004108F4                 sub     esp, 8Ch
.text:004108FA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:00410902                 call    _errno
.text:00410907                 mov     edx, [eax]
.text:00410909                 mov     [esp+9Ch+var_8C], edx
.text:0041090D                 mov     edx, [esp+9Ch+FileName]
.text:00410914                 mov     [esp+9Ch+Str], edx ; Str
.text:00410917                 call    strlen
.text:0041091C                 cmp     eax, 5
.text:0041091F                 jle     short loc_41093D
.text:00410921                 cld
.text:00410922                 mov     ecx, [esp+9Ch+FileName]
.text:00410929                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0041092E                 lea     esi, [eax+ecx-6]
.text:00410932                 mov     ecx, 7
.text:00410937                 mov     ebp, esi
.text:00410939                 repe cmpsb
.text:0041093B                 jz      short loc_410958
.text:0041093D
.text:0041093D loc_41093D:                             ; CODE XREF: sub_4108F0+2F↑j
.text:0041093D                 call    _errno
.text:00410942                 mov     dword ptr [eax], 16h
.text:00410948
.text:00410948 loc_410948:                             ; CODE XREF: sub_4108F0+295↓j
.text:00410948                                         ; sub_4108F0+2D8↓j ...
.text:00410948                 mov     eax, 0FFFFFFFFh
.text:0041094D
.text:0041094D loc_41094D:                             ; CODE XREF: sub_4108F0+2EF↓j
.text:0041094D                                         ; sub_4108F0+332↓j
.text:0041094D                 add     esp, 8Ch
.text:00410953                 pop     ebx
.text:00410954                 pop     esi
.text:00410955                 pop     edi
.text:00410956                 pop     ebp
.text:00410957                 retn
.text:00410958 ; ---------------------------------------------------------------------------
.text:00410958
.text:00410958 loc_410958:                             ; CODE XREF: sub_4108F0+4B↑j
.text:00410958                 mov     ecx, ds:dword_415A34
.text:0041095E                 mov     edi, ds:dword_415A30
.text:00410964                 mov     eax, ecx
.text:00410966                 or      eax, edi
.text:00410968                 jz      loc_410CA3
.text:0041096E
.text:0041096E loc_41096E:                             ; CODE XREF: sub_4108F0+3F8↓j
.text:0041096E                 rdtsc
.text:00410970                 mov     edi, edx
.text:00410972                 mov     esi, eax
.text:00410974                 call    _getpid
.text:00410979                 mov     ebx, eax
.text:0041097B                 mov     edx, esi
.text:0041097D                 sar     ebx, 1Fh
.text:00410980                 xor     edx, eax
.text:00410982                 mov     ecx, edi
.text:00410984                 xor     ecx, ebx
.text:00410986                 mov     ebx, edx
.text:00410988                 mov     esi, ecx
.text:0041098A                 add     ebx, ds:dword_415A30
.text:00410990                 adc     esi, ds:dword_415A34
.text:00410996                 xor     edi, edi
.text:00410998                 mov     ds:dword_415A30, ebx
.text:0041099E                 mov     ds:dword_415A34, esi
.text:004109A4                 lea     esi, [esi+0]
.text:004109AA                 lea     edi, [edi+0]
.text:004109B0
.text:004109B0 loc_4109B0:                             ; CODE XREF: sub_4108F0+2C7↓j
.text:004109B0                 mov     [esp+9Ch+Str], ebx
.text:004109B3                 mov     [esp+9Ch+OpenFlag], esi
.text:004109B7                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004109BF                 mov     [esp+9Ch+var_90], 0
.text:004109C7                 call    sub_4125C0
.text:004109CC                 movzx   ecx, ds:byte_410800[eax]
.text:004109D3                 mov     [ebp+0], cl
.text:004109D6                 mov     [esp+9Ch+Str], ebx
.text:004109D9                 mov     [esp+9Ch+OpenFlag], esi
.text:004109DD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004109E5                 mov     [esp+9Ch+var_90], 0
.text:004109ED                 call    sub_412740
.text:004109F2                 mov     [esp+9Ch+Str], eax
.text:004109F5                 mov     ebx, eax
.text:004109F7                 mov     esi, edx
.text:004109F9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410A01                 mov     [esp+9Ch+var_90], 0
.text:00410A09                 mov     [esp+9Ch+OpenFlag], edx
.text:00410A0D                 call    sub_4125C0
.text:00410A12                 movzx   edx, ds:byte_410800[eax]
.text:00410A19                 mov     [ebp+1], dl
.text:00410A1C                 mov     [esp+9Ch+Str], ebx
.text:00410A1F                 mov     [esp+9Ch+OpenFlag], esi
.text:00410A23                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410A2B                 mov     [esp+9Ch+var_90], 0
.text:00410A33                 call    sub_412740
.text:00410A38                 mov     [esp+9Ch+Str], eax
.text:00410A3B                 mov     ebx, eax
.text:00410A3D                 mov     esi, edx
.text:00410A3F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410A47                 mov     [esp+9Ch+var_90], 0
.text:00410A4F                 mov     [esp+9Ch+OpenFlag], edx
.text:00410A53                 call    sub_4125C0
.text:00410A58                 movzx   ecx, ds:byte_410800[eax]
.text:00410A5F                 mov     [ebp+2], cl
.text:00410A62                 mov     [esp+9Ch+Str], ebx
.text:00410A65                 mov     [esp+9Ch+OpenFlag], esi
.text:00410A69                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410A71                 mov     [esp+9Ch+var_90], 0
.text:00410A79                 call    sub_412740
.text:00410A7E                 mov     [esp+9Ch+Str], eax
.text:00410A81                 mov     ebx, eax
.text:00410A83                 mov     esi, edx
.text:00410A85                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410A8D                 mov     [esp+9Ch+var_90], 0
.text:00410A95                 mov     [esp+9Ch+OpenFlag], edx
.text:00410A99                 call    sub_4125C0
.text:00410A9E                 movzx   edx, ds:byte_410800[eax]
.text:00410AA5                 mov     [ebp+3], dl
.text:00410AA8                 mov     [esp+9Ch+Str], ebx
.text:00410AAB                 mov     [esp+9Ch+OpenFlag], esi
.text:00410AAF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410AB7                 mov     [esp+9Ch+var_90], 0
.text:00410ABF                 call    sub_412740
.text:00410AC4                 mov     [esp+9Ch+Str], eax
.text:00410AC7                 mov     ebx, eax
.text:00410AC9                 mov     esi, edx
.text:00410ACB                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410AD3                 mov     [esp+9Ch+var_90], 0
.text:00410ADB                 mov     [esp+9Ch+OpenFlag], edx
.text:00410ADF                 call    sub_4125C0
.text:00410AE4                 movzx   ecx, ds:byte_410800[eax]
.text:00410AEB                 mov     [ebp+4], cl
.text:00410AEE                 mov     [esp+9Ch+Str], ebx
.text:00410AF1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410AF9                 mov     [esp+9Ch+var_90], 0
.text:00410B01                 mov     [esp+9Ch+OpenFlag], esi
.text:00410B05                 call    sub_412740
.text:00410B0A                 mov     [esp+9Ch+Str], eax
.text:00410B0D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410B15                 mov     [esp+9Ch+var_90], 0
.text:00410B1D                 mov     [esp+9Ch+OpenFlag], edx
.text:00410B21                 call    sub_4125C0
.text:00410B26                 movzx   ebx, ds:byte_410800[eax]
.text:00410B2D                 mov     [ebp+5], bl
.text:00410B30                 cmp     [esp+9Ch+arg_4], 1
.text:00410B38                 jz      loc_410C87
.text:00410B3E                 cmp     [esp+9Ch+arg_4], 1
.text:00410B46                 jle     loc_410C50
.text:00410B4C                 cmp     [esp+9Ch+arg_4], 2
.text:00410B54                 jz      loc_410C27
.text:00410B5A                 cmp     [esp+9Ch+arg_4], 3
.text:00410B62                 jz      loc_410BE4
.text:00410B68
.text:00410B68 loc_410B68:                             ; CODE XREF: sub_4108F0+369↓j
.text:00410B68                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:00410B6D                 test    ebx, ebx
.text:00410B6F                 jnz     loc_410CED
.text:00410B75
.text:00410B75 loc_410B75:                             ; CODE XREF: sub_4108F0+354↓j
.text:00410B75                 mov     eax, [esp+9Ch+var_88]
.text:00410B79                 test    eax, eax
.text:00410B7B                 jns     short loc_410BD0
.text:00410B7D                 call    _errno
.text:00410B82                 cmp     dword ptr [eax], 11h
.text:00410B85                 jnz     loc_410948
.text:00410B8B
.text:00410B8B loc_410B8B:                             ; CODE XREF: sub_4108F0+315↓j
.text:00410B8B                 mov     edx, ds:dword_415A30
.text:00410B91                 mov     ecx, ds:dword_415A34
.text:00410B97                 add     edx, 1E61h
.text:00410B9D                 adc     ecx, 0
.text:00410BA0                 mov     ebx, edx
.text:00410BA2                 inc     edi
.text:00410BA3                 mov     ds:dword_415A30, edx
.text:00410BA9                 cmp     edi, 3A2F8h
.text:00410BAF                 mov     esi, ecx
.text:00410BB1                 mov     ds:dword_415A34, ecx
.text:00410BB7                 jb      loc_4109B0
.text:00410BBD                 call    _errno
.text:00410BC2                 mov     dword ptr [eax], 11h
.text:00410BC8                 jmp     loc_410948
.text:00410BC8 ; ---------------------------------------------------------------------------
.text:00410BCD                 align 10h
.text:00410BD0
.text:00410BD0 loc_410BD0:                             ; CODE XREF: sub_4108F0+28B↑j
.text:00410BD0                 call    _errno
.text:00410BD5                 mov     esi, [esp+9Ch+var_8C]
.text:00410BD9                 mov     [eax], esi
.text:00410BDB                 mov     eax, [esp+9Ch+var_88]
.text:00410BDF                 jmp     loc_41094D
.text:00410BE4 ; ---------------------------------------------------------------------------
.text:00410BE4
.text:00410BE4 loc_410BE4:                             ; CODE XREF: sub_4108F0+272↑j
.text:00410BE4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:00410BEB                 mov     ecx, [esp+9Ch+FileName]
.text:00410BF2                 lea     esi, [esp+9Ch+var_7C]
.text:00410BF6                 mov     [esp+9Ch+var_94], esi ; int
.text:00410BFA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:00410BFE                 call    sub_40B430
.text:00410C03                 test    eax, eax
.text:00410C05                 jns     short loc_410B8B
.text:00410C07                 call    _errno
.text:00410C0C                 cmp     dword ptr [eax], 2
.text:00410C0F                 jnz     loc_410948
.text:00410C15                 call    _errno
.text:00410C1A                 mov     ebx, [esp+9Ch+var_8C]
.text:00410C1E                 mov     [eax], ebx
.text:00410C20                 xor     eax, eax
.text:00410C22                 jmp     loc_41094D
.text:00410C27 ; ---------------------------------------------------------------------------
.text:00410C27
.text:00410C27 loc_410C27:                             ; CODE XREF: sub_4108F0+264↑j
.text:00410C27                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:00410C2F                 mov     edx, [esp+9Ch+FileName]
.text:00410C36                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:00410C39                 call    sub_410D40
.text:00410C3E                 mov     esi, esi
.text:00410C40
.text:00410C40 loc_410C40:                             ; CODE XREF: sub_4108F0+395↓j
.text:00410C40                 mov     [esp+9Ch+var_88], eax
.text:00410C44                 jmp     loc_410B75
.text:00410C44 ; ---------------------------------------------------------------------------
.text:00410C49                 align 10h
.text:00410C50
.text:00410C50 loc_410C50:                             ; CODE XREF: sub_4108F0+256↑j
.text:00410C50                 mov     eax, [esp+9Ch+arg_4]
.text:00410C57                 test    eax, eax
.text:00410C59                 jnz     loc_410B68
.text:00410C5F                 mov     [esp+9Ch+var_94], 180h
.text:00410C67                 mov     esi, [esp+9Ch+FileName]
.text:00410C6E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00410C76                 mov     [esp+9Ch+Str], esi ; FileName
.text:00410C79                 lea     esi, [esi+0]
.text:00410C80
.text:00410C80 loc_410C80:                             ; CODE XREF: sub_4108F0+3B1↓j
.text:00410C80                 call    _open_0
.text:00410C85                 jmp     short loc_410C40
.text:00410C87 ; ---------------------------------------------------------------------------
.text:00410C87
.text:00410C87 loc_410C87:                             ; CODE XREF: sub_4108F0+248↑j
.text:00410C87                 mov     [esp+9Ch+var_94], 180h
.text:00410C8F                 mov     ebx, [esp+9Ch+FileName]
.text:00410C96                 mov     [esp+9Ch+OpenFlag], 8502h
.text:00410C9E                 mov     [esp+9Ch+Str], ebx
.text:00410CA1                 jmp     short loc_410C80
.text:00410CA3 ; ---------------------------------------------------------------------------
.text:00410CA3
.text:00410CA3 loc_410CA3:                             ; CODE XREF: sub_4108F0+78↑j
.text:00410CA3                 mov     [esp+9Ch+OpenFlag], 0
.text:00410CAB                 lea     ebx, [esp+9Ch+var_84]
.text:00410CAF                 mov     [esp+9Ch+Str], ebx
.text:00410CB2                 call    sub_410DC0
.text:00410CB7                 mov     edi, [esp+9Ch+var_80]
.text:00410CBB                 mov     edx, [esp+9Ch+var_84]
.text:00410CBF                 mov     ecx, edi
.text:00410CC1                 mov     ebx, edi
.text:00410CC3                 shl     ecx, 10h
.text:00410CC6                 sar     ebx, 1Fh
.text:00410CC9                 shld    ebx, edi, 10h
.text:00410CCD                 mov     esi, edx
.text:00410CCF                 mov     edi, edx
.text:00410CD1                 mov     edx, ecx
.text:00410CD3                 sar     edi, 1Fh
.text:00410CD6                 xor     edx, esi
.text:00410CD8                 mov     ds:dword_415A30, edx
.text:00410CDE                 mov     esi, ebx
.text:00410CE0                 xor     esi, edi
.text:00410CE2                 mov     ds:dword_415A34, esi
.text:00410CE8                 jmp     loc_41096E
.text:00410CED ; ---------------------------------------------------------------------------
.text:00410CED
.text:00410CED loc_410CED:                             ; CODE XREF: sub_4108F0+27F↑j
.text:00410CED                 mov     [esp+9Ch+var_94], 151h
.text:00410CF5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:00410CFD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:00410D04                 call    _assert
.text:00410D04 sub_4108F0      endp
.text:00410D04
.text:00410D04 ; ---------------------------------------------------------------------------
.text:00410D09                 align 20h
.text:00410D20
.text:00410D20 ; =============== S U B R O U T I N E =======================================
.text:00410D20
.text:00410D20
.text:00410D20 sub_410D20      proc near               ; CODE XREF: sub_40FCF0+8A↑p
.text:00410D20                                         ; .text:00410F6B↓p
.text:00410D20                 xor     eax, eax
.text:00410D22                 retn
.text:00410D22 sub_410D20      endp
.text:00410D22
.text:00410D22 ; ---------------------------------------------------------------------------
.text:00410D23                 align 10h
.text:00410D30
.text:00410D30 ; =============== S U B R O U T I N E =======================================
.text:00410D30
.text:00410D30
.text:00410D30 sub_410D30      proc near               ; CODE XREF: sub_40FCF0+7E↑p
.text:00410D30                                         ; .text:00410F44↓p
.text:00410D30                 xor     eax, eax
.text:00410D32                 retn
.text:00410D32 sub_410D30      endp
.text:00410D32
.text:00410D32 ; ---------------------------------------------------------------------------
.text:00410D33                 align 10h
.text:00410D40
.text:00410D40 ; =============== S U B R O U T I N E =======================================
.text:00410D40
.text:00410D40
.text:00410D40 ; int __cdecl sub_410D40(LPCSTR, int AccessMode)
.text:00410D40 sub_410D40      proc near               ; CODE XREF: sub_4108F0+349↑p
.text:00410D40
.text:00410D40 lpPathName      = dword ptr -1Ch
.text:00410D40 lpSecurityAttributes= dword ptr -18h
.text:00410D40 var_8           = dword ptr -8
.text:00410D40 var_4           = dword ptr -4
.text:00410D40 arg_0           = dword ptr  4
.text:00410D40 AccessMode      = dword ptr  8
.text:00410D40
.text:00410D40                 sub     esp, 1Ch
.text:00410D43                 mov     [esp+1Ch+var_8], ebx
.text:00410D47                 mov     ebx, [esp+1Ch+arg_0]
.text:00410D4B                 mov     [esp+1Ch+var_4], esi
.text:00410D4F                 mov     esi, [esp+1Ch+AccessMode]
.text:00410D53                 test    ebx, ebx
.text:00410D55                 jz      short loc_410DA5
.text:00410D57                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00410D5F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00410D62                 call    CreateDirectoryA
.text:00410D67                 sub     esp, 8
.text:00410D6A                 test    eax, eax
.text:00410D6C                 jz      short loc_410D86
.text:00410D6E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00410D72                 mov     esi, [esp+1Ch+var_4]
.text:00410D76                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:00410D7A                 mov     ebx, [esp+1Ch+var_8]
.text:00410D7E                 add     esp, 1Ch
.text:00410D81                 jmp     _chmod
.text:00410D86 ; ---------------------------------------------------------------------------
.text:00410D86
.text:00410D86 loc_410D86:                             ; CODE XREF: sub_410D40+2C↑j
.text:00410D86                 call    sub_40D580
.text:00410D8B                 mov     esi, eax
.text:00410D8D                 call    _errno
.text:00410D92                 mov     [eax], esi
.text:00410D94
.text:00410D94 loc_410D94:                             ; CODE XREF: sub_410D40+70↓j
.text:00410D94                 mov     ebx, [esp+1Ch+var_8]
.text:00410D98                 mov     eax, 0FFFFFFFFh
.text:00410D9D                 mov     esi, [esp+1Ch+var_4]
.text:00410DA1                 add     esp, 1Ch
.text:00410DA4                 retn
.text:00410DA5 ; ---------------------------------------------------------------------------
.text:00410DA5
.text:00410DA5 loc_410DA5:                             ; CODE XREF: sub_410D40+15↑j
.text:00410DA5                 call    _errno
.text:00410DAA                 mov     dword ptr [eax], 16h
.text:00410DB0                 jmp     short loc_410D94
.text:00410DB0 sub_410D40      endp
.text:00410DB0
.text:00410DB0 ; ---------------------------------------------------------------------------
.text:00410DB2                 align 10h
.text:00410DC0
.text:00410DC0 ; =============== S U B R O U T I N E =======================================
.text:00410DC0
.text:00410DC0
.text:00410DC0 sub_410DC0      proc near               ; CODE XREF: sub_4108F0+3C2↑p
.text:00410DC0
.text:00410DC0 var_1C          = dword ptr -1Ch
.text:00410DC0 var_18          = dword ptr -18h
.text:00410DC0 var_C           = dword ptr -0Ch
.text:00410DC0 var_8           = dword ptr -8
.text:00410DC0 var_4           = dword ptr -4
.text:00410DC0 arg_0           = dword ptr  4
.text:00410DC0 arg_4           = dword ptr  8
.text:00410DC0
.text:00410DC0                 sub     esp, 1Ch
.text:00410DC3                 mov     edx, [esp+1Ch+arg_4]
.text:00410DC7                 mov     [esp+1Ch+var_4], ebx
.text:00410DCB                 mov     ebx, [esp+1Ch+arg_0]
.text:00410DCF                 mov     [esp+1Ch+var_18], edx
.text:00410DD3                 lea     edx, [esp+1Ch+var_C]
.text:00410DD7                 mov     [esp+1Ch+var_1C], edx
.text:00410DDA                 call    sub_410E40
.text:00410DDF                 test    eax, eax
.text:00410DE1                 mov     edx, 0FFFFFFFFh
.text:00410DE6                 jnz     short loc_410E0A
.text:00410DE8                 mov     ecx, [esp+1Ch+var_C]
.text:00410DEC                 mov     edx, 10624DD3h
.text:00410DF1                 mov     [ebx], ecx
.text:00410DF3                 mov     ecx, [esp+1Ch+var_8]
.text:00410DF7                 mov     eax, ecx
.text:00410DF9                 imul    edx
.text:00410DFB                 mov     eax, ecx
.text:00410DFD                 sar     eax, 1Fh
.text:00410E00                 sar     edx, 6
.text:00410E03                 sub     edx, eax
.text:00410E05                 mov     [ebx+4], edx
.text:00410E08                 xor     edx, edx
.text:00410E0A
.text:00410E0A loc_410E0A:                             ; CODE XREF: sub_410DC0+26↑j
.text:00410E0A                 mov     ebx, [esp+1Ch+var_4]
.text:00410E0E                 mov     eax, edx
.text:00410E10                 add     esp, 1Ch
.text:00410E13                 retn
.text:00410E13 sub_410DC0      endp
.text:00410E13
.text:00410E13 ; ---------------------------------------------------------------------------
.text:00410E14                 align 10h
.text:00410E20
.text:00410E20 ; =============== S U B R O U T I N E =======================================
.text:00410E20
.text:00410E20
.text:00410E20 sub_410E20      proc near               ; CODE XREF: sub_410570+1A7↑p
.text:00410E20                                         ; sub_410570+237↑p ...
.text:00410E20                 mov     edx, ds:dword_415A40
.text:00410E26                 test    edx, edx
.text:00410E28                 jnz     short loc_410E30
.text:00410E2A                 jmp     getenv
.text:00410E2A ; ---------------------------------------------------------------------------
.text:00410E2F                 align 10h
.text:00410E30
.text:00410E30 loc_410E30:                             ; CODE XREF: sub_410E20+8↑j
.text:00410E30                 xor     eax, eax
.text:00410E32                 retn
.text:00410E32 sub_410E20      endp
.text:00410E32
.text:00410E32 ; ---------------------------------------------------------------------------
.text:00410E33                 align 10h
.text:00410E40
.text:00410E40 ; =============== S U B R O U T I N E =======================================
.text:00410E40
.text:00410E40
.text:00410E40 sub_410E40      proc near               ; CODE XREF: sub_410DC0+1A↑p
.text:00410E40
.text:00410E40 lpTimeZoneInformation= dword ptr -0DCh
.text:00410E40 var_D8          = dword ptr -0D8h
.text:00410E40 var_D4          = dword ptr -0D4h
.text:00410E40 var_D0          = dword ptr -0D0h
.text:00410E40 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:00410E40 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:00410E40 arg_0           = dword ptr  4
.text:00410E40 arg_4           = dword ptr  8
.text:00410E40
.text:00410E40                 push    edi
.text:00410E41                 push    esi
.text:00410E42                 push    ebx
.text:00410E43                 sub     esp, 0D0h
.text:00410E49                 mov     ebx, [esp+0DCh+arg_4]
.text:00410E50                 mov     edi, [esp+0DCh+arg_0]
.text:00410E57                 test    ebx, ebx
.text:00410E59                 jz      short loc_410E84
.text:00410E5B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:00410E5F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:00410E62                 call    GetTimeZoneInformation
.text:00410E67                 sub     esp, 4
.text:00410E6A                 cmp     eax, 0FFFFFFFFh
.text:00410E6D                 jz      loc_410F05
.text:00410E73                 xor     ecx, ecx
.text:00410E75                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:00410E79                 cmp     eax, 2
.text:00410E7C                 setz    cl
.text:00410E7F                 mov     [ebx], esi
.text:00410E81                 mov     [ebx+4], ecx
.text:00410E84
.text:00410E84 loc_410E84:                             ; CODE XREF: sub_410E40+19↑j
.text:00410E84                                         ; sub_410E40+E0↓j
.text:00410E84                 test    edi, edi
.text:00410E86                 jz      short loc_410EF9
.text:00410E88                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:00410E8C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:00410E8F                 call    GetSystemTimeAsFileTime
.text:00410E94                 sub     esp, 4
.text:00410E97                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:00410E9B                 mov     [esp+0DCh+var_D4], 989680h
.text:00410EA3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:00410EA7                 mov     [esp+0DCh+var_D0], 0
.text:00410EAF                 add     ebx, 2AC18000h
.text:00410EB5                 adc     esi, 0FE624E21h
.text:00410EBB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:00410EBF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00410EC2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:00410EC6                 mov     [esp+0DCh+var_D8], esi
.text:00410ECA                 call    sub_412740
.text:00410ECF                 mov     [edi], eax
.text:00410ED1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00410ED4                 mov     [esp+0DCh+var_D4], 989680h
.text:00410EDC                 mov     [esp+0DCh+var_D0], 0
.text:00410EE4                 mov     [esp+0DCh+var_D8], esi
.text:00410EE8                 call    sub_4125C0
.text:00410EED                 lea     ebx, [eax+eax*4]
.text:00410EF0                 lea     edx, [ebx+ebx*4]
.text:00410EF3                 shl     edx, 2
.text:00410EF6                 mov     [edi+4], edx
.text:00410EF9
.text:00410EF9 loc_410EF9:                             ; CODE XREF: sub_410E40+46↑j
.text:00410EF9                 add     esp, 0D0h
.text:00410EFF                 xor     eax, eax
.text:00410F01                 pop     ebx
.text:00410F02                 pop     esi
.text:00410F03                 pop     edi
.text:00410F04                 retn
.text:00410F05 ; ---------------------------------------------------------------------------
.text:00410F05
.text:00410F05 loc_410F05:                             ; CODE XREF: sub_410E40+2D↑j
.text:00410F05                 mov     dword ptr [ebx], 0
.text:00410F0B                 mov     dword ptr [ebx+4], 0
.text:00410F12                 call    sub_40D580
.text:00410F17                 mov     esi, eax
.text:00410F19                 call    _errno
.text:00410F1E                 mov     [eax], esi
.text:00410F20                 jmp     loc_410E84
.text:00410F20 sub_410E40      endp
.text:00410F20
.text:00410F20 ; ---------------------------------------------------------------------------
.text:00410F25                 align 10h
.text:00410F30                 sub     esp, 0Ch
.text:00410F33                 mov     [esp+4], ebx
.text:00410F37                 mov     [esp+8], esi
.text:00410F3B                 xor     esi, esi
.text:00410F3D                 call    sub_410F90
.text:00410F42                 mov     ebx, eax
.text:00410F44                 call    sub_410D30
.text:00410F49                 cmp     ebx, eax
.text:00410F4B                 jz      short loc_410F64
.text:00410F4D
.text:00410F4D loc_410F4D:                             ; CODE XREF: .text:00410F72↓j
.text:00410F4D                 mov     esi, 1
.text:00410F52
.text:00410F52 loc_410F52:                             ; CODE XREF: .text:00410F74↓j
.text:00410F52                 mov     ds:dword_415A40, esi
.text:00410F58                 mov     ebx, [esp+4]
.text:00410F5C                 mov     esi, [esp+8]
.text:00410F60                 add     esp, 0Ch
.text:00410F63                 retn
.text:00410F64 ; ---------------------------------------------------------------------------
.text:00410F64
.text:00410F64 loc_410F64:                             ; CODE XREF: .text:00410F4B↑j
.text:00410F64                 call    sub_410F80
.text:00410F69                 mov     ebx, eax
.text:00410F6B                 call    sub_410D20
.text:00410F70                 cmp     ebx, eax
.text:00410F72                 jnz     short loc_410F4D
.text:00410F74                 jmp     short loc_410F52
.text:00410F74 ; ---------------------------------------------------------------------------
.text:00410F76                 align 10h
.text:00410F80
.text:00410F80 ; =============== S U B R O U T I N E =======================================
.text:00410F80
.text:00410F80
.text:00410F80 sub_410F80      proc near               ; CODE XREF: .text:loc_410F64↑p
.text:00410F80                 xor     eax, eax
.text:00410F82                 retn
.text:00410F82 sub_410F80      endp
.text:00410F82
.text:00410F82 ; ---------------------------------------------------------------------------
.text:00410F83                 align 10h
.text:00410F90
.text:00410F90 ; =============== S U B R O U T I N E =======================================
.text:00410F90
.text:00410F90
.text:00410F90 sub_410F90      proc near               ; CODE XREF: .text:00410F3D↑p
.text:00410F90                 xor     eax, eax
.text:00410F92                 retn
.text:00410F92 sub_410F90      endp
.text:00410F92
.text:00410F92 ; ---------------------------------------------------------------------------
.text:00410F93                 align 10h
.text:00410FA0
.text:00410FA0 ; =============== S U B R O U T I N E =======================================
.text:00410FA0
.text:00410FA0 ; Attributes: thunk
.text:00410FA0
.text:00410FA0 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00410FA0 OleInitialize   proc near               ; CODE XREF: sub_40F020+1A↑p
.text:00410FA0
.text:00410FA0 pvReserved      = dword ptr  4
.text:00410FA0
.text:00410FA0                 jmp     ds:__imp_OleInitialize
.text:00410FA0 OleInitialize   endp
.text:00410FA0
.text:00410FA0 ; ---------------------------------------------------------------------------
.text:00410FA6                 align 10h
.text:00410FB0
.text:00410FB0 ; =============== S U B R O U T I N E =======================================
.text:00410FB0
.text:00410FB0 ; Attributes: thunk
.text:00410FB0
.text:00410FB0 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00410FB0 CoCreateInstance proc near              ; CODE XREF: sub_40F020+52↑p
.text:00410FB0
.text:00410FB0 rclsid          = dword ptr  4
.text:00410FB0 pUnkOuter       = dword ptr  8
.text:00410FB0 dwClsContext    = dword ptr  0Ch
.text:00410FB0 riid            = dword ptr  10h
.text:00410FB0 ppv             = dword ptr  14h
.text:00410FB0
.text:00410FB0                 jmp     ds:__imp_CoCreateInstance
.text:00410FB0 CoCreateInstance endp
.text:00410FB0
.text:00410FB0 ; ---------------------------------------------------------------------------
.text:00410FB6                 align 10h
.text:00410FC0
.text:00410FC0 ; =============== S U B R O U T I N E =======================================
.text:00410FC0
.text:00410FC0 ; Attributes: thunk
.text:00410FC0
.text:00410FC0 ; void __stdcall CoUninitialize()
.text:00410FC0 CoUninitialize  proc near               ; CODE XREF: sub_40F020+14E↑p
.text:00410FC0                                         ; sub_40F020+16D↑p
.text:00410FC0                 jmp     ds:__imp_CoUninitialize
.text:00410FC0 CoUninitialize  endp
.text:00410FC0
.text:00410FC0 ; ---------------------------------------------------------------------------
.text:00410FC6                 align 10h
.text:00410FD0                 add     al, 0BAh ; 'º'
.text:00410FD2                 retf
.text:00410FD2 ; ---------------------------------------------------------------------------
.text:00410FD3                 db 7Eh
.text:00410FD4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:00410FD4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:00410FD4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:00410FD4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:00410FD4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:00410FD4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:00410FD4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:00410FD4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:00410FD4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:00410FD4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:00410FD4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:00410FD4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:00410FD4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:00410FD4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:00410FD4                 dd 0C4426C00h, 330h, 0
.text:00411108                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00411108                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:00411108                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:00411108                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:00411158                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411158                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:00411158                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:00411158                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:00411158                 dd 0BA94B00h, 1Bh, 0
.text:004111B8                 dd 0C0h, 46000000h, 1Ch, 0
.text:004111C8                 dd 0C0h, 46000000h, 331h, 0
.text:004111D8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004111D8                 dd 312h, 0
.text:004111F8                 dd 0C0h, 46000000h, 30Eh, 0
.text:00411208                 dd 0C0h, 46000000h, 30Dh, 0
.text:00411218                 dd 0C0h, 46000000h, 311h, 0
.text:00411228                 dd 0C0h, 46000000h, 313h, 0
.text:00411238                 dd 0C0h, 46000000h, 30Ch, 0
.text:00411248                 dd 0C0h, 46000000h, 30Fh, 0
.text:00411258                 dd 0C0h, 46000000h, 310h, 0
.text:00411268                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411268                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00411298                 dd 0C0h, 46000000h, 319h, 0
.text:004112A8                 dd 0C0h, 46000000h, 315h, 0
.text:004112B8                 dd 0C0h, 46000000h, 316h, 0
.text:004112C8                 dd 0C0h, 46000000h, 315h, 0
.text:004112D8                 dd 0C0h, 46000000h, 2E005h, 0
.text:004112E8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004112E8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:004112E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:00411328                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00411328                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:00411328                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:00411328                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:00411328                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:00411328                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:00411328                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:00411328                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:00411328                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:00411328                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:00411328                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:00411328                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411328                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:00411328                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:00411328                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:00411328                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411328                 dd 2DE81h, 0
.text:00411478                 dd 0C0h, 46000000h, 4 dup(0)
.text:00411490                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00411490                 dd 0
.text:004114A8                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:004114A8                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:004114A8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:004114A8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:004114A8                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:004114A8                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:004114A8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:004114A8                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:004114A8                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:004114A8                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:004114A8                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:004114A8                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:004114A8                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:004114A8                 dd 10Fh, 0
.text:004115B8                 dd 0C0h, 46000000h, 125h, 0
.text:004115C8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:004115C8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:004115C8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00411608                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00411608                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411608                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00411608                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00411608                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:00411668                 dd 0C0h, 46000000h, 2E012h, 0
.text:00411678                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00411678                 dd 140h, 0
.text:00411698                 dd 0C0h, 46000000h, 1, 0
.text:004116A8                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:004116A8                 dd 71D3400h, 13Dh, 0
.text:004116C8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004116C8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:004116C8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:004116C8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00411718                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00411718                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00411718                 dd 20405h, 0
.text:00411748                 dd 0C0h, 46000000h, 2040Eh, 0
.text:00411758                 dd 0C0h, 46000000h, 20406h, 0
.text:00411768                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00411778                 dd 0C0h, 46000000h, 110h, 0
.text:00411788                 dd 0C0h, 46000000h, 10Eh, 0
.text:00411798                 dd 0C0h, 46000000h, 123h, 0
.text:004117A8                 dd 0C0h, 46000000h, 124h, 0
.text:004117B8                 dd 0C0h, 46000000h, 13h, 0
.text:004117C8                 dd 0C0h, 46000000h, 14h, 0
.text:004117D8                 dd 0C0h, 46000000h, 15h, 0
.text:004117E8                 dd 0C0h, 46000000h, 20400h, 0
.text:004117F8                 dd 0C0h, 46000000h, 121h, 0
.text:00411808                 dd 0C0h, 46000000h, 122h, 0
.text:00411818                 dd 0C0h, 46000000h, 2E011h, 0
.text:00411828                 dd 0C0h, 46000000h, 108h, 0
.text:00411838                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:00411838                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411838                 dd 103h, 0
.text:00411868                 dd 0C0h, 46000000h, 2E000h, 0
.text:00411878                 dd 0C0h, 46000000h, 106h, 0
.text:00411888                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411888                 dd 107h, 0
.text:004118A8                 dd 0C0h, 46000000h, 102h, 0
.text:004118B8                 dd 0C0h, 46000000h, 104h, 0
.text:004118C8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:004118C8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:004118C8                 dd 105h, 0
.text:004118F8                 dd 0C0h, 46000000h, 13Bh, 0
.text:00411908                 dd 0C0h, 46000000h, 139h, 0
.text:00411918                 dd 0C0h, 46000000h, 0Dh, 0
.text:00411928                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00411928                 dd 101h, 0
.text:00411948                 dd 0C0h, 46000000h, 100h, 0
.text:00411958                 dd 0C0h, 46000000h, 20404h, 0
.text:00411968                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00411968                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00411998                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00411998                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00411998                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00411998                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:004119E8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004119E8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:004119E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:004119E8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:004119E8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004119E8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:00411A68                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:00411A68                 dd 0Ah, 0
.text:00411A88                 dd 0C0h, 46000000h, 2, 0
.text:00411A98                 dd 0C0h, 46000000h, 1Dh, 0
.text:00411AA8                 dd 0C0h, 46000000h, 3, 0
.text:00411AB8                 dd 0C0h, 46000000h, 16h, 0
.text:00411AC8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00411AC8                 dd 1608D74Fh, 0Fh, 0
.text:00411AE8                 dd 0C0h, 46000000h, 20h, 0
.text:00411AF8                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00411AF8                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00411AF8                 dd 0
.text:00411B28                 dd 0C0h, 46000000h, 11Eh, 0
.text:00411B38                 dd 0C0h, 46000000h, 128h, 0
.text:00411B48                 dd 0C0h, 46000000h, 129h, 0
.text:00411B58                 dd 0C0h, 46000000h, 118h, 0
.text:00411B68                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:00411B68                 dd 70474000h, 11Bh, 0
.text:00411B88                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00411B88                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411B88                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00411B88                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00411B88                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00411BE8                 dd 0C0h, 46000000h, 116h, 0
.text:00411BF8                 dd 0C0h, 46000000h, 113h, 0
.text:00411C08                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00411C08                 dd 119h, 0
.text:00411C28                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:00411C28                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:00411C28                 dd 0
.text:00411C58                 dd 0C0h, 46000000h, 11Ch, 0
.text:00411C68                 dd 0C0h, 46000000h, 11Dh, 0
.text:00411C78                 dd 0C0h, 46000000h, 11Fh, 0
.text:00411C88                 dd 0C0h, 46000000h, 112h, 0
.text:00411C98                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00411C98                 dd 18E6000h, 120h, 0
.text:00411CB8                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00411CB8                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00411CB8                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00411CF8                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00411CF8                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:00411D28                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411D28                 dd 11Ah, 0
.text:00411D48                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:00411D48                 dd 10Ch, 0
.text:00411D68                 dd 0C0h, 46000000h
.text:00411D70 dword_411D70    dd 10Bh, 0              ; DATA XREF: sub_40F020+75↑o
.text:00411D78                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00411D78                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00411D78                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00411D78                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00411DC8                 dd 0C0h, 46000000h, 109h, 0
.text:00411DD8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00411DD8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00411DD8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00411DD8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00411DD8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00411DD8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00411DD8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00411DD8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00411DD8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411DD8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00411DD8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00411EB8                 dd 0C0h, 46000000h, 138h, 0
.text:00411EC8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00411EC8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00411EC8                 dd 27h, 0
.text:00411EF8                 dd 0C0h, 46000000h, 8, 0
.text:00411F08                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00411F08                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00411F08                 dd 20D00h, 0
.text:00411F38                 dd 0C0h, 46000000h, 20D03h, 0
.text:00411F48                 dd 0C0h, 46000000h, 12h, 0
.text:00411F58                 dd 0C0h, 46000000h, 4, 0
.text:00411F68                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411F68                 dd 7, 0
.text:00411F88                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411F88                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00411FB8                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411FB8                 dd 126h, 0
.text:00411FD8                 dd 0C0h, 46000000h, 10h, 0
.text:00411FE8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00411FE8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:00412018                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:00412018                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:00412018                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:00412058                 dd 0C0h, 46000000h, 0Bh, 0
.text:00412068                 dd 0C0h, 46000000h, 0Ch, 0
.text:00412078                 dd 0C0h, 46000000h, 26h, 0
.text:00412088                 dd 0C0h, 46000000h, 6, 0
.text:00412098                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00412098                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00412098                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:004120D8                 dd 0C0h, 46000000h, 20403h, 0
.text:004120E8                 dd 0C0h, 46000000h, 20401h, 0
.text:004120F8                 dd 0C0h, 46000000h, 20412h, 0
.text:00412108                 dd 0C0h, 46000000h, 20402h, 0
.text:00412118                 dd 0C0h, 46000000h, 20411h, 0
.text:00412128                 dd 0C0h, 46000000h, 2 dup(0)
.text:00412138                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00412138                 dd 10Dh, 0
.text:00412158                 dd 0C0h, 46000000h, 127h, 0
.text:00412168                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00412168                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:00412168                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:004121A8                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:004121A8                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:004121A8                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:004121E8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:004121F8                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00412208                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:00412218                 dd 0C0h, 46000000h, 2DE19h, 0
.text:00412228                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:00412238                 dd 0C0h, 46000000h, 2DE12h, 0
.text:00412248                 dd 0C0h, 46000000h, 2DE21h, 0
.text:00412258                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00412268                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00412278                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00412288                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00412298                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:004122A8                 dd 0C0h, 46000000h, 2DE04h, 0
.text:004122B8                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:004122C8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:004122D8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:004122E8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:004122F8                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00412308                 dd 0C0h, 46000000h, 2DE10h, 0
.text:00412318                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00412328                 dd 0C0h, 46000000h, 2DE09h, 0
.text:00412338                 dd 0C0h, 46000000h, 2DE23h, 0
.text:00412348                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:00412358                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00412368                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00412378                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00412388                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00412398                 dd 0C0h, 46000000h, 2DE16h, 0
.text:004123A8                 dd 0C0h, 46000000h, 2DE20h, 0
.text:004123B8                 dd 0C0h, 46000000h, 2DE07h, 0
.text:004123C8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:004123D8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:004123E8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:004123F8                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00412408                 dd 0C0h, 46000000h, 2DE08h, 0
.text:00412418                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:00412418                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:00412440
.text:00412440 ; =============== S U B R O U T I N E =======================================
.text:00412440
.text:00412440 ; Attributes: thunk
.text:00412440
.text:00412440 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00412440 mbrtowc         proc near               ; CODE XREF: sub_407FB0+757↑p
.text:00412440
.text:00412440 DstCh           = dword ptr  4
.text:00412440 SrcCh           = dword ptr  8
.text:00412440 SizeInBytes     = dword ptr  0Ch
.text:00412440 State           = dword ptr  10h
.text:00412440
.text:00412440                 jmp     ds:__imp_mbrtowc
.text:00412440 mbrtowc         endp
.text:00412440
.text:00412440 ; ---------------------------------------------------------------------------
.text:00412446                 align 10h
.text:00412450
.text:00412450 ; =============== S U B R O U T I N E =======================================
.text:00412450
.text:00412450 ; Attributes: bp-based frame
.text:00412450
.text:00412450 sub_412450      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00412450                 push    ebp
.text:00412451                 mov     ecx, offset dword_415000
.text:00412456                 cmp     ecx, offset dword_415000
.text:0041245C                 mov     ebp, esp
.text:0041245E                 jnb     short loc_412476
.text:00412460
.text:00412460 loc_412460:                             ; CODE XREF: sub_412450+24↓j
.text:00412460                 mov     edx, [ecx+4]
.text:00412463                 mov     eax, [ecx]
.text:00412465                 add     ecx, 8
.text:00412468                 add     [edx+400000h], eax
.text:0041246E                 cmp     ecx, offset dword_415000
.text:00412474                 jb      short loc_412460
.text:00412476
.text:00412476 loc_412476:                             ; CODE XREF: sub_412450+E↑j
.text:00412476                 pop     ebp
.text:00412477                 retn
.text:00412477 sub_412450      endp
.text:00412477
.text:00412477 ; ---------------------------------------------------------------------------
.text:00412478                 align 10h
.text:00412480
.text:00412480 ; =============== S U B R O U T I N E =======================================
.text:00412480
.text:00412480 ; Attributes: bp-based frame
.text:00412480
.text:00412480 sub_412480      proc near               ; CODE XREF: sub_401080+16↑p
.text:00412480                                         ; TopLevelExceptionFilter+D7↑p
.text:00412480                 push    ebp
.text:00412481                 mov     ebp, esp
.text:00412483                 fninit
.text:00412485                 pop     ebp
.text:00412486                 retn
.text:00412486 sub_412480      endp
.text:00412486
.text:00412486 ; ---------------------------------------------------------------------------
.text:00412487                 align 10h
.text:00412490
.text:00412490 ; =============== S U B R O U T I N E =======================================
.text:00412490
.text:00412490 ; Attributes: bp-based frame
.text:00412490
.text:00412490 ; void __cdecl sub_412490()
.text:00412490 sub_412490      proc near               ; DATA XREF: .text:loc_4124D9↓o
.text:00412490                                         ; sub_412520:loc_41254E↓o
.text:00412490                 push    ebp
.text:00412491                 mov     ebp, esp
.text:00412493                 sub     esp, 8
.text:00412496                 mov     eax, off_4140D4
.text:0041249B                 mov     edx, [eax]
.text:0041249D                 test    edx, edx
.text:0041249F                 jnz     short loc_4124A5
.text:004124A1
.text:004124A1 loc_4124A1:                             ; CODE XREF: sub_412490+2C↓j
.text:004124A1                 mov     esp, ebp
.text:004124A3                 pop     ebp
.text:004124A4                 retn
.text:004124A5 ; ---------------------------------------------------------------------------
.text:004124A5
.text:004124A5 loc_4124A5:                             ; CODE XREF: sub_412490+F↑j
.text:004124A5                                         ; sub_412490+2A↓j
.text:004124A5                 call    dword ptr [eax]
.text:004124A7                 mov     edx, off_4140D4
.text:004124AD                 mov     ecx, [edx+4]
.text:004124B0                 lea     eax, [edx+4]
.text:004124B3                 mov     off_4140D4, eax
.text:004124B8                 test    ecx, ecx
.text:004124BA                 jnz     short loc_4124A5
.text:004124BC                 jmp     short loc_4124A1
.text:004124BC sub_412490      endp
.text:004124BC
.text:004124BC ; ---------------------------------------------------------------------------
.text:004124BE                 align 10h
.text:004124C0                 push    ebp
.text:004124C1                 mov     ebp, esp
.text:004124C3                 sub     esp, 8
.text:004124C6                 mov     [ebp-4], ebx
.text:004124C9                 mov     eax, ds:dword_4132A0
.text:004124CE                 cmp     eax, 0FFFFFFFFh
.text:004124D1                 jz      short loc_4124FC
.text:004124D3
.text:004124D3 loc_4124D3:                             ; CODE XREF: .text:00412506↓j
.text:004124D3                                         ; .text:00412519↓j
.text:004124D3                 test    eax, eax
.text:004124D5                 mov     ebx, eax
.text:004124D7                 jnz     short loc_4124F0
.text:004124D9
.text:004124D9 loc_4124D9:                             ; CODE XREF: .text:004124FA↓j
.text:004124D9                 mov     dword ptr [esp], offset sub_412490
.text:004124E0                 call    sub_401040
.text:004124E5                 mov     ebx, [ebp-4]
.text:004124E8                 mov     esp, ebp
.text:004124EA                 pop     ebp
.text:004124EB                 retn
.text:004124EB ; ---------------------------------------------------------------------------
.text:004124EC                 align 10h
.text:004124F0
.text:004124F0 loc_4124F0:                             ; CODE XREF: .text:004124D7↑j
.text:004124F0                                         ; .text:004124F8↓j
.text:004124F0                 call    ds:dword_4132A0[ebx*4]
.text:004124F7                 dec     ebx
.text:004124F8                 jnz     short loc_4124F0
.text:004124FA                 jmp     short loc_4124D9
.text:004124FC ; ---------------------------------------------------------------------------
.text:004124FC
.text:004124FC loc_4124FC:                             ; CODE XREF: .text:004124D1↑j
.text:004124FC                 mov     ecx, ds:dword_4132A4
.text:00412502                 xor     eax, eax
.text:00412504                 test    ecx, ecx
.text:00412506                 jz      short loc_4124D3
.text:00412508                 mov     edx, offset dword_4132A0
.text:0041250D                 lea     esi, [esi+0]
.text:00412510
.text:00412510 loc_412510:                             ; CODE XREF: .text:00412517↓j
.text:00412510                 inc     eax
.text:00412511                 mov     ecx, [edx+eax*4+4]
.text:00412515                 test    ecx, ecx
.text:00412517                 jnz     short loc_412510
.text:00412519                 jmp     short loc_4124D3
.text:00412519 ; ---------------------------------------------------------------------------
.text:0041251B                 align 10h
.text:00412520
.text:00412520 ; =============== S U B R O U T I N E =======================================
.text:00412520
.text:00412520 ; Attributes: bp-based frame
.text:00412520
.text:00412520 sub_412520      proc near               ; CODE XREF: sub_401BF0+21↑p
.text:00412520
.text:00412520 var_8           = dword ptr -8
.text:00412520 var_4           = dword ptr -4
.text:00412520
.text:00412520                 push    ebp
.text:00412521                 mov     ebp, esp
.text:00412523                 sub     esp, 8
.text:00412526                 mov     [ebp+var_4], ebx
.text:00412529                 mov     edx, dword_4140D0
.text:0041252F                 test    edx, edx
.text:00412531                 jnz     short loc_41255A
.text:00412533                 mov     eax, ds:dword_4132A0
.text:00412538                 mov     edx, 1
.text:0041253D                 mov     dword_4140D0, edx
.text:00412543                 cmp     eax, 0FFFFFFFFh
.text:00412546                 jz      short loc_41256D
.text:00412548
.text:00412548 loc_412548:                             ; CODE XREF: sub_412520+57↓j
.text:00412548                                         ; sub_412520+69↓j
.text:00412548                 test    eax, eax
.text:0041254A                 mov     ebx, eax
.text:0041254C                 jnz     short loc_412561
.text:0041254E
.text:0041254E loc_41254E:                             ; CODE XREF: sub_412520+4B↓j
.text:0041254E                 mov     [esp+8+var_8], offset sub_412490 ; void (__cdecl *)()
.text:00412555                 call    sub_401040
.text:0041255A
.text:0041255A loc_41255A:                             ; CODE XREF: sub_412520+11↑j
.text:0041255A                 mov     ebx, [ebp+var_4]
.text:0041255D                 mov     esp, ebp
.text:0041255F                 pop     ebp
.text:00412560                 retn
.text:00412561 ; ---------------------------------------------------------------------------
.text:00412561
.text:00412561 loc_412561:                             ; CODE XREF: sub_412520+2C↑j
.text:00412561                                         ; sub_412520+49↓j
.text:00412561                 call    ds:dword_4132A0[ebx*4]
.text:00412568                 dec     ebx
.text:00412569                 jnz     short loc_412561
.text:0041256B                 jmp     short loc_41254E
.text:0041256D ; ---------------------------------------------------------------------------
.text:0041256D
.text:0041256D loc_41256D:                             ; CODE XREF: sub_412520+26↑j
.text:0041256D                 mov     ecx, ds:dword_4132A4
.text:00412573                 xor     eax, eax
.text:00412575                 test    ecx, ecx
.text:00412577                 jz      short loc_412548
.text:00412579                 mov     edx, offset dword_4132A0
.text:0041257E                 mov     esi, esi
.text:00412580
.text:00412580 loc_412580:                             ; CODE XREF: sub_412520+67↓j
.text:00412580                 inc     eax
.text:00412581                 mov     ebx, [edx+eax*4+4]
.text:00412585                 test    ebx, ebx
.text:00412587                 jnz     short loc_412580
.text:00412589                 jmp     short loc_412548
.text:00412589 sub_412520      endp
.text:00412589
.text:00412589 ; ---------------------------------------------------------------------------
.text:0041258B                 align 10h
.text:00412590
.text:00412590 ; =============== S U B R O U T I N E =======================================
.text:00412590
.text:00412590 ; Attributes: info_from_lumina
.text:00412590
.text:00412590 ; void *__cdecl _alloca(size_t Size)
.text:00412590 __alloca        proc near               ; CODE XREF: sub_401BF0+1C↑p
.text:00412590                 push    ecx
.text:00412591                 mov     ecx, esp
.text:00412593                 add     ecx, 8
.text:00412596
.text:00412596 loc_412596:                             ; CODE XREF: __alloca+1B↓j
.text:00412596                 cmp     eax, 1000h
.text:0041259B                 jb      short loc_4125AD
.text:0041259D                 sub     ecx, 1000h
.text:004125A3                 or      dword ptr [ecx], 0
.text:004125A6                 sub     eax, 1000h
.text:004125AB                 jmp     short loc_412596
.text:004125AD ; ---------------------------------------------------------------------------
.text:004125AD
.text:004125AD loc_4125AD:                             ; CODE XREF: __alloca+B↑j
.text:004125AD                 sub     ecx, eax
.text:004125AF                 or      dword ptr [ecx], 0
.text:004125B2                 mov     eax, esp
.text:004125B4                 mov     esp, ecx
.text:004125B6                 mov     ecx, [eax]
.text:004125B8                 mov     eax, [eax+4]
.text:004125BB                 jmp     eax
.text:004125BB __alloca        endp
.text:004125BB
.text:004125BB ; ---------------------------------------------------------------------------
.text:004125BD                 align 10h
.text:004125C0
.text:004125C0 ; =============== S U B R O U T I N E =======================================
.text:004125C0
.text:004125C0 ; Attributes: bp-based frame
.text:004125C0
.text:004125C0 sub_4125C0      proc near               ; CODE XREF: sub_404A60+24↑p
.text:004125C0                                         ; sub_406DF0+38↑p ...
.text:004125C0
.text:004125C0 var_34          = dword ptr -34h
.text:004125C0 var_2C          = dword ptr -2Ch
.text:004125C0 var_28          = dword ptr -28h
.text:004125C0 var_24          = dword ptr -24h
.text:004125C0 var_20          = dword ptr -20h
.text:004125C0 var_1C          = dword ptr -1Ch
.text:004125C0 var_18          = dword ptr -18h
.text:004125C0 var_14          = dword ptr -14h
.text:004125C0 arg_0           = dword ptr  8
.text:004125C0 arg_4           = dword ptr  0Ch
.text:004125C0 arg_8           = dword ptr  10h
.text:004125C0 arg_C           = dword ptr  14h
.text:004125C0
.text:004125C0                 push    ebp
.text:004125C1                 mov     ebp, esp
.text:004125C3                 push    edi
.text:004125C4                 push    esi
.text:004125C5                 push    ebx
.text:004125C6                 sub     esp, 2Ch
.text:004125C9                 mov     edx, [ebp+arg_C]
.text:004125CC                 mov     [ebp+var_20], 0
.text:004125D3                 mov     ecx, [ebp+arg_0]
.text:004125D6                 mov     ebx, [ebp+arg_4]
.text:004125D9                 mov     [ebp+var_1C], 0
.text:004125E0                 mov     eax, [ebp+arg_8]
.text:004125E3                 test    edx, edx
.text:004125E5                 mov     [ebp+var_24], edx
.text:004125E8                 mov     edi, ebx
.text:004125EA                 mov     esi, eax
.text:004125EC                 mov     [ebp+var_28], ecx
.text:004125EF                 jnz     short loc_412650
.text:004125F1                 cmp     eax, ebx
.text:004125F3                 jbe     short loc_412630
.text:004125F5                 mov     eax, ecx
.text:004125F7                 mov     edx, ebx
.text:004125F9                 div     esi
.text:004125FB
.text:004125FB loc_4125FB:                             ; CODE XREF: sub_4125C0+8B↓j
.text:004125FB                 mov     [ebp+var_28], edx
.text:004125FE                 lea     ecx, [ebp+var_18]
.text:00412601                 test    ecx, ecx
.text:00412603                 jz      short loc_41261E
.text:00412605                 mov     [ebp+var_1C], 0
.text:0041260C
.text:0041260C loc_41260C:                             ; CODE XREF: sub_4125C0+DA↓j
.text:0041260C                 mov     eax, [ebp+var_28]
.text:0041260F                 mov     [ebp+var_20], eax
.text:00412612                 mov     edx, [ebp+var_20]
.text:00412615                 mov     ecx, [ebp+var_1C]
.text:00412618                 mov     [ebp+var_18], edx
.text:0041261B                 mov     [ebp+var_14], ecx
.text:0041261E
.text:0041261E loc_41261E:                             ; CODE XREF: sub_4125C0+43↑j
.text:0041261E                                         ; sub_4125C0+A7↓j ...
.text:0041261E                 mov     eax, [ebp+var_18]
.text:00412621                 mov     edx, [ebp+var_14]
.text:00412624                 add     esp, 2Ch
.text:00412627                 pop     ebx
.text:00412628                 pop     esi
.text:00412629                 pop     edi
.text:0041262A                 pop     ebp
.text:0041262B                 retn
.text:0041262B ; ---------------------------------------------------------------------------
.text:0041262C                 align 10h
.text:00412630
.text:00412630 loc_412630:                             ; CODE XREF: sub_4125C0+33↑j
.text:00412630                 test    eax, eax
.text:00412632                 jnz     short loc_41263F
.text:00412634                 mov     eax, 1
.text:00412639                 xor     edx, edx
.text:0041263B                 div     esi
.text:0041263D                 mov     esi, eax
.text:0041263F
.text:0041263F loc_41263F:                             ; CODE XREF: sub_4125C0+72↑j
.text:0041263F                 mov     eax, edi
.text:00412641                 mov     edx, [ebp+var_24]
.text:00412644                 div     esi
.text:00412646                 mov     eax, [ebp+var_28]
.text:00412649                 div     esi
.text:0041264B                 jmp     short loc_4125FB
.text:0041264B ; ---------------------------------------------------------------------------
.text:0041264D                 align 10h
.text:00412650
.text:00412650 loc_412650:                             ; CODE XREF: sub_4125C0+2F↑j
.text:00412650                 cmp     [ebp+var_24], ebx
.text:00412653                 jbe     short loc_412670
.text:00412655                 mov     [ebp+var_20], ecx
.text:00412658
.text:00412658 loc_412658:                             ; CODE XREF: sub_4125C0+15B↓j
.text:00412658                 mov     [ebp+var_1C], edi
.text:0041265B                 mov     eax, [ebp+var_20]
.text:0041265E                 mov     edx, [ebp+var_1C]
.text:00412661                 mov     [ebp+var_18], eax
.text:00412664                 mov     [ebp+var_14], edx
.text:00412667                 jmp     short loc_41261E
.text:00412667 ; ---------------------------------------------------------------------------
.text:00412669                 align 10h
.text:00412670
.text:00412670 loc_412670:                             ; CODE XREF: sub_4125C0+93↑j
.text:00412670                 bsr     eax, [ebp+var_24]
.text:00412674                 mov     ebx, eax
.text:00412676                 xor     ebx, 1Fh
.text:00412679                 jnz     short loc_4126A0
.text:0041267B                 cmp     edi, [ebp+var_24]
.text:0041267E                 ja      short loc_412685
.text:00412680                 cmp     [ebp+var_28], esi
.text:00412683                 jb      short loc_412690
.text:00412685
.text:00412685 loc_412685:                             ; CODE XREF: sub_4125C0+BE↑j
.text:00412685                 mov     edx, [ebp+var_28]
.text:00412688                 sub     edx, esi
.text:0041268A                 sbb     edi, [ebp+var_24]
.text:0041268D                 mov     [ebp+var_28], edx
.text:00412690
.text:00412690 loc_412690:                             ; CODE XREF: sub_4125C0+C3↑j
.text:00412690                 lea     ecx, [ebp+var_18]
.text:00412693                 test    ecx, ecx
.text:00412695                 jz      short loc_41261E
.text:00412697                 mov     [ebp+var_1C], edi
.text:0041269A                 jmp     loc_41260C
.text:0041269A ; ---------------------------------------------------------------------------
.text:0041269F                 align 10h
.text:004126A0
.text:004126A0 loc_4126A0:                             ; CODE XREF: sub_4125C0+B9↑j
.text:004126A0                 mov     edx, [ebp+var_24]
.text:004126A3                 mov     eax, 20h ; ' '
.text:004126A8                 mov     cl, bl
.text:004126AA                 sub     eax, ebx
.text:004126AC                 mov     [ebp+var_2C], eax
.text:004126AF                 shl     edx, cl
.text:004126B1                 mov     eax, esi
.text:004126B3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004126B7                 shr     eax, cl
.text:004126B9                 mov     cl, bl
.text:004126BB                 shl     esi, cl
.text:004126BD                 or      edx, eax
.text:004126BF                 mov     eax, [ebp+var_28]
.text:004126C2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004126C6                 mov     [ebp+var_24], edx
.text:004126C9                 mov     edx, edi
.text:004126CB                 shr     edx, cl
.text:004126CD                 mov     cl, bl
.text:004126CF                 shl     edi, cl
.text:004126D1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004126D5                 shr     eax, cl
.text:004126D7                 or      edi, eax
.text:004126D9                 mov     eax, edi
.text:004126DB                 mov     cl, bl
.text:004126DD                 div     [ebp+var_24]
.text:004126E0                 shl     [ebp+var_28], cl
.text:004126E3                 mov     edi, edx
.text:004126E5                 mul     esi
.text:004126E7                 mov     [ebp+var_34], eax
.text:004126EA                 cmp     edx, edi
.text:004126EC                 ja      short loc_412728
.text:004126EE                 cmp     edx, edi
.text:004126F0                 jz      short loc_412720
.text:004126F2
.text:004126F2 loc_4126F2:                             ; CODE XREF: sub_4125C0+166↓j
.text:004126F2                                         ; sub_4125C0+173↓j
.text:004126F2                 lea     eax, [ebp+var_18]
.text:004126F5                 test    eax, eax
.text:004126F7                 jz      loc_41261E
.text:004126FD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412701                 mov     eax, [ebp+var_28]
.text:00412704                 sub     eax, [ebp+var_34]
.text:00412707                 sbb     edi, edx
.text:00412709                 mov     [ebp+var_28], eax
.text:0041270C                 mov     edx, edi
.text:0041270E                 shl     edx, cl
.text:00412710                 mov     cl, bl
.text:00412712                 shr     eax, cl
.text:00412714                 or      edx, eax
.text:00412716                 mov     [ebp+var_20], edx
.text:00412719                 shr     edi, cl
.text:0041271B                 jmp     loc_412658
.text:00412720 ; ---------------------------------------------------------------------------
.text:00412720
.text:00412720 loc_412720:                             ; CODE XREF: sub_4125C0+130↑j
.text:00412720                 mov     eax, [ebp+var_28]
.text:00412723                 cmp     [ebp+var_34], eax
.text:00412726                 jbe     short loc_4126F2
.text:00412728
.text:00412728 loc_412728:                             ; CODE XREF: sub_4125C0+12C↑j
.text:00412728                 mov     ecx, [ebp+var_34]
.text:0041272B                 sub     ecx, esi
.text:0041272D                 sbb     edx, [ebp+var_24]
.text:00412730                 mov     [ebp+var_34], ecx
.text:00412733                 jmp     short loc_4126F2
.text:00412733 sub_4125C0      endp
.text:00412733
.text:00412733 ; ---------------------------------------------------------------------------
.text:00412735                 align 10h
.text:00412740
.text:00412740 ; =============== S U B R O U T I N E =======================================
.text:00412740
.text:00412740 ; Attributes: bp-based frame
.text:00412740
.text:00412740 sub_412740      proc near               ; CODE XREF: sub_406DF0+58↑p
.text:00412740                                         ; sub_409C00+17E↑p ...
.text:00412740
.text:00412740 var_24          = dword ptr -24h
.text:00412740 var_20          = dword ptr -20h
.text:00412740 var_1C          = dword ptr -1Ch
.text:00412740 var_18          = dword ptr -18h
.text:00412740 var_14          = dword ptr -14h
.text:00412740 var_C           = dword ptr -0Ch
.text:00412740 var_8           = dword ptr -8
.text:00412740 var_4           = dword ptr -4
.text:00412740 arg_0           = dword ptr  8
.text:00412740 arg_4           = dword ptr  0Ch
.text:00412740 arg_8           = dword ptr  10h
.text:00412740 arg_C           = dword ptr  14h
.text:00412740
.text:00412740                 push    ebp
.text:00412741                 mov     ebp, esp
.text:00412743                 sub     esp, 28h
.text:00412746                 mov     [ebp+var_C], ebx
.text:00412749                 mov     edx, [ebp+arg_C]
.text:0041274C                 mov     ecx, [ebp+arg_0]
.text:0041274F                 mov     [ebp+var_8], esi
.text:00412752                 mov     eax, [ebp+arg_8]
.text:00412755                 test    edx, edx
.text:00412757                 mov     [ebp+var_4], edi
.text:0041275A                 mov     ebx, [ebp+arg_4]
.text:0041275D                 mov     esi, eax
.text:0041275F                 mov     [ebp+var_18], 0
.text:00412766                 mov     [ebp+var_14], 0
.text:0041276D                 mov     [ebp+var_1C], ecx
.text:00412770                 jnz     short loc_4127C2
.text:00412772                 cmp     eax, ebx
.text:00412774                 jbe     short loc_4127A0
.text:00412776                 mov     eax, ecx
.text:00412778                 mov     edx, ebx
.text:0041277A                 div     esi
.text:0041277C                 mov     edi, eax
.text:0041277E                 mov     esi, esi
.text:00412780
.text:00412780 loc_412780:                             ; CODE XREF: sub_412740+88↓j
.text:00412780                                         ; sub_412740+A4↓j ...
.text:00412780                 xor     ecx, ecx
.text:00412782
.text:00412782 loc_412782:                             ; CODE XREF: sub_412740+80↓j
.text:00412782                 mov     [ebp+var_18], edi
.text:00412785                 mov     ebx, [ebp+var_C]
.text:00412788                 mov     eax, [ebp+var_18]
.text:0041278B                 mov     [ebp+var_14], ecx
.text:0041278E                 mov     esi, [ebp+var_8]
.text:00412791                 mov     edx, [ebp+var_14]
.text:00412794                 mov     edi, [ebp+var_4]
.text:00412797                 mov     esp, ebp
.text:00412799                 pop     ebp
.text:0041279A                 retn
.text:0041279A ; ---------------------------------------------------------------------------
.text:0041279B                 align 10h
.text:004127A0
.text:004127A0 loc_4127A0:                             ; CODE XREF: sub_412740+34↑j
.text:004127A0                 test    eax, eax
.text:004127A2                 jnz     short loc_4127B1
.text:004127A4                 mov     eax, 1
.text:004127A9                 xor     ecx, ecx
.text:004127AB                 xor     edx, edx
.text:004127AD                 div     ecx
.text:004127AF                 mov     esi, eax
.text:004127B1
.text:004127B1 loc_4127B1:                             ; CODE XREF: sub_412740+62↑j
.text:004127B1                 mov     eax, ebx
.text:004127B3                 xor     edx, edx
.text:004127B5                 div     esi
.text:004127B7                 mov     ecx, eax
.text:004127B9                 mov     eax, [ebp+var_1C]
.text:004127BC                 div     esi
.text:004127BE                 mov     edi, eax
.text:004127C0                 jmp     short loc_412782
.text:004127C2 ; ---------------------------------------------------------------------------
.text:004127C2
.text:004127C2 loc_4127C2:                             ; CODE XREF: sub_412740+30↑j
.text:004127C2                 cmp     edx, ebx
.text:004127C4                 jbe     short loc_4127D0
.text:004127C6                 xor     edi, edi
.text:004127C8                 jmp     short loc_412780
.text:004127C8 ; ---------------------------------------------------------------------------
.text:004127CA                 align 10h
.text:004127D0
.text:004127D0 loc_4127D0:                             ; CODE XREF: sub_412740+84↑j
.text:004127D0                 bsr     eax, edx
.text:004127D3                 xor     eax, 1Fh
.text:004127D6                 mov     [ebp+var_20], eax
.text:004127D9                 jnz     short loc_4127F0
.text:004127DB                 cmp     ebx, edx
.text:004127DD                 ja      short loc_4127E6
.text:004127DF                 xor     edi, edi
.text:004127E1                 cmp     [ebp+var_1C], esi
.text:004127E4                 jb      short loc_412780
.text:004127E6
.text:004127E6 loc_4127E6:                             ; CODE XREF: sub_412740+9D↑j
.text:004127E6                 mov     edi, 1
.text:004127EB                 jmp     short loc_412780
.text:004127EB ; ---------------------------------------------------------------------------
.text:004127ED                 align 10h
.text:004127F0
.text:004127F0 loc_4127F0:                             ; CODE XREF: sub_412740+99↑j
.text:004127F0                 mov     eax, [ebp+var_20]
.text:004127F3                 mov     ecx, 20h ; ' '
.text:004127F8                 sub     ecx, eax
.text:004127FA                 mov     [ebp+var_24], ecx
.text:004127FD                 mov     eax, esi
.text:004127FF                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412803                 shl     edx, cl
.text:00412805                 mov     edi, edx
.text:00412807                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041280B                 mov     edx, ebx
.text:0041280D                 shr     eax, cl
.text:0041280F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412813                 or      edi, eax
.text:00412815                 mov     eax, [ebp+var_1C]
.text:00412818                 shl     esi, cl
.text:0041281A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041281E                 shr     edx, cl
.text:00412820                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412824                 shl     ebx, cl
.text:00412826                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041282A                 shr     eax, cl
.text:0041282C                 or      ebx, eax
.text:0041282E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412832                 mov     eax, ebx
.text:00412834                 div     edi
.text:00412836                 mov     ebx, edx
.text:00412838                 mov     edi, eax
.text:0041283A                 shl     [ebp+var_1C], cl
.text:0041283D                 mul     esi
.text:0041283F                 cmp     edx, ebx
.text:00412841                 ja      short loc_412854
.text:00412843                 cmp     edx, ebx
.text:00412845                 jnz     loc_412780
.text:0041284B                 cmp     eax, [ebp+var_1C]
.text:0041284E                 jbe     loc_412780
.text:00412854
.text:00412854 loc_412854:                             ; CODE XREF: sub_412740+101↑j
.text:00412854                 dec     edi
.text:00412855                 jmp     loc_412780
.text:00412855 sub_412740      endp
.text:00412855
.text:00412855 ; ---------------------------------------------------------------------------
.text:0041285A                 align 10h
.text:00412860
.text:00412860 ; =============== S U B R O U T I N E =======================================
.text:00412860
.text:00412860 ; Attributes: thunk
.text:00412860
.text:00412860 ; int __cdecl close(int FileHandle)
.text:00412860 _close          proc near               ; CODE XREF: sub_403080+95↑p
.text:00412860                                         ; sub_403080+108↑p ...
.text:00412860
.text:00412860 FileHandle      = dword ptr  4
.text:00412860
.text:00412860                 jmp     ds:__imp__close
.text:00412860 _close          endp
.text:00412860
.text:00412860 ; ---------------------------------------------------------------------------
.text:00412866                 align 10h
.text:00412870
.text:00412870 ; =============== S U B R O U T I N E =======================================
.text:00412870
.text:00412870 ; Attributes: thunk
.text:00412870
.text:00412870 ; int open(const char *FileName, int OpenFlag, ...)
.text:00412870 _open           proc near               ; CODE XREF: sub_403080+21↑p
.text:00412870                                         ; sub_403080+13B↑p ...
.text:00412870
.text:00412870 FileName        = dword ptr  4
.text:00412870 OpenFlag        = dword ptr  8
.text:00412870
.text:00412870                 jmp     ds:__imp__open
.text:00412870 _open           endp
.text:00412870
.text:00412870 ; ---------------------------------------------------------------------------
.text:00412876                 align 10h
.text:00412880
.text:00412880 ; =============== S U B R O U T I N E =======================================
.text:00412880
.text:00412880 ; Attributes: thunk
.text:00412880
.text:00412880 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00412880 _stricmp        proc near               ; CODE XREF: sub_40A0D0+46F↑p
.text:00412880                                         ; sub_40C2C0+2E↑p ...
.text:00412880
.text:00412880 String1         = dword ptr  4
.text:00412880 String2         = dword ptr  8
.text:00412880
.text:00412880                 jmp     ds:__imp__stricmp
.text:00412880 _stricmp        endp
.text:00412880
.text:00412880 ; ---------------------------------------------------------------------------
.text:00412886                 align 10h
.text:00412890
.text:00412890 ; =============== S U B R O U T I N E =======================================
.text:00412890
.text:00412890 ; Attributes: thunk
.text:00412890
.text:00412890 ; char *__cdecl strdup(const char *String)
.text:00412890 _strdup         proc near               ; CODE XREF: sub_40BEF0+101↑p
.text:00412890                                         ; .text:0040C15A↑p ...
.text:00412890
.text:00412890 String          = dword ptr  4
.text:00412890
.text:00412890                 jmp     ds:__imp__strdup
.text:00412890 _strdup         endp
.text:00412890
.text:00412890 ; ---------------------------------------------------------------------------
.text:00412896                 align 10h
.text:004128A0
.text:004128A0 ; =============== S U B R O U T I N E =======================================
.text:004128A0
.text:004128A0 ; Attributes: thunk
.text:004128A0
.text:004128A0 ; int __cdecl getpid()
.text:004128A0 _getpid         proc near               ; CODE XREF: sub_4108F0+84↑p
.text:004128A0                 jmp     ds:__imp__getpid
.text:004128A0 _getpid         endp
.text:004128A0
.text:004128A0 ; ---------------------------------------------------------------------------
.text:004128A6                 align 10h
.text:004128B0
.text:004128B0 ; =============== S U B R O U T I N E =======================================
.text:004128B0
.text:004128B0 ; Attributes: thunk
.text:004128B0
.text:004128B0 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:004128B0 _chmod          proc near               ; CODE XREF: sub_410D40+41↑j
.text:004128B0
.text:004128B0 FileName        = dword ptr  4
.text:004128B0 AccessMode      = dword ptr  8
.text:004128B0
.text:004128B0                 jmp     ds:__imp__chmod
.text:004128B0 _chmod          endp
.text:004128B0
.text:004128B0 ; ---------------------------------------------------------------------------
.text:004128B6                 align 10h
.text:004128C0                 jmp     ds:__set_app_type
.text:004128C0 ; ---------------------------------------------------------------------------
.text:004128C6                 align 10h
.text:004128D0
.text:004128D0 ; =============== S U B R O U T I N E =======================================
.text:004128D0
.text:004128D0 ; Attributes: thunk
.text:004128D0
.text:004128D0 ; void __cdecl cexit()
.text:004128D0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:004128D0                 jmp     ds:__imp__cexit
.text:004128D0 _cexit          endp
.text:004128D0
.text:004128D0 ; ---------------------------------------------------------------------------
.text:004128D6                 align 10h
.text:004128E0
.text:004128E0 ; =============== S U B R O U T I N E =======================================
.text:004128E0
.text:004128E0 ; Attributes: thunk
.text:004128E0
.text:004128E0 ; char ***__cdecl _p__environ()
.text:004128E0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004128E0                 jmp     ds:__imp___p__environ
.text:004128E0 __p__environ    endp
.text:004128E0
.text:004128E0 ; ---------------------------------------------------------------------------
.text:004128E6                 align 10h
.text:004128F0
.text:004128F0 ; =============== S U B R O U T I N E =======================================
.text:004128F0
.text:004128F0 ; Attributes: thunk
.text:004128F0
.text:004128F0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004128F0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004128F0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004128F0
.text:004128F0 Signal          = dword ptr  4
.text:004128F0 Function        = dword ptr  8
.text:004128F0
.text:004128F0                 jmp     ds:__imp_signal
.text:004128F0 signal          endp
.text:004128F0
.text:004128F0 ; ---------------------------------------------------------------------------
.text:004128F6                 align 10h
.text:00412900
.text:00412900 ; =============== S U B R O U T I N E =======================================
.text:00412900
.text:00412900 ; Attributes: thunk
.text:00412900
.text:00412900 ; int *__cdecl _p__fmode()
.text:00412900 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00412900                 jmp     ds:__imp___p__fmode
.text:00412900 __p__fmode      endp
.text:00412900
.text:00412900 ; ---------------------------------------------------------------------------
.text:00412906                 align 10h
.text:00412910
.text:00412910 ; =============== S U B R O U T I N E =======================================
.text:00412910
.text:00412910 ; Attributes: thunk
.text:00412910
.text:00412910 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00412910 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00412910                                         ; sub_401080+90↑p ...
.text:00412910
.text:00412910 FileHandle      = dword ptr  4
.text:00412910 Mode            = dword ptr  8
.text:00412910
.text:00412910                 jmp     ds:__imp__setmode
.text:00412910 _setmode        endp
.text:00412910
.text:00412910 ; ---------------------------------------------------------------------------
.text:00412916                 align 10h
.text:00412920
.text:00412920 ; =============== S U B R O U T I N E =======================================
.text:00412920
.text:00412920 ; Attributes: thunk
.text:00412920
.text:00412920 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00412920                 jmp     ds:__imp___getmainargs
.text:00412920 __getmainargs   endp
.text:00412920
.text:00412920 ; ---------------------------------------------------------------------------
.text:00412926                 align 10h
.text:00412930
.text:00412930 ; =============== S U B R O U T I N E =======================================
.text:00412930
.text:00412930 ; Attributes: thunk
.text:00412930
.text:00412930 ; int *__cdecl errno()
.text:00412930 _errno          proc near               ; CODE XREF: sub_401BF0+508↑p
.text:00412930                                         ; sub_402490:loc_402526↑p ...
.text:00412930                 jmp     ds:__imp__errno
.text:00412930 _errno          endp
.text:00412930
.text:00412930 ; ---------------------------------------------------------------------------
.text:00412936                 align 10h
.text:00412940
.text:00412940 ; =============== S U B R O U T I N E =======================================
.text:00412940
.text:00412940 ; Attributes: thunk
.text:00412940
.text:00412940 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00412940 setlocale       proc near               ; CODE XREF: sub_401BF0+48↑p
.text:00412940
.text:00412940 Category        = dword ptr  4
.text:00412940 Locale          = dword ptr  8
.text:00412940
.text:00412940                 jmp     ds:__imp_setlocale
.text:00412940 setlocale       endp
.text:00412940
.text:00412940 ; ---------------------------------------------------------------------------
.text:00412946                 align 10h
.text:00412950
.text:00412950 ; =============== S U B R O U T I N E =======================================
.text:00412950
.text:00412950 ; Attributes: noreturn thunk
.text:00412950
.text:00412950 ; void __cdecl __noreturn exit(int Code)
.text:00412950 exit            proc near               ; CODE XREF: sub_401BF0:loc_401D15↑p
.text:00412950                                         ; .text:0040224B↑p ...
.text:00412950
.text:00412950 Code            = dword ptr  4
.text:00412950
.text:00412950                 jmp     ds:__imp_exit
.text:00412950 exit            endp
.text:00412950
.text:00412950 ; ---------------------------------------------------------------------------
.text:00412956                 align 10h
.text:00412960
.text:00412960 ; =============== S U B R O U T I N E =======================================
.text:00412960
.text:00412960 ; Attributes: thunk
.text:00412960
.text:00412960 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00412960 fputs           proc near               ; CODE XREF: sub_401BF0+17C↑p
.text:00412960                                         ; sub_401BF0+19E↑p ...
.text:00412960
.text:00412960 Buffer          = dword ptr  4
.text:00412960 Stream          = dword ptr  8
.text:00412960
.text:00412960                 jmp     ds:__imp_fputs
.text:00412960 fputs           endp
.text:00412960
.text:00412960 ; ---------------------------------------------------------------------------
.text:00412966                 align 10h
.text:00412970
.text:00412970 ; =============== S U B R O U T I N E =======================================
.text:00412970
.text:00412970 ; Attributes: thunk
.text:00412970
.text:00412970 ; int printf(const char *const Format, ...)
.text:00412970 printf          proc near               ; CODE XREF: sub_401BF0+15A↑p
.text:00412970                                         ; sub_401BF0+265↑p ...
.text:00412970
.text:00412970 Format          = dword ptr  4
.text:00412970
.text:00412970                 jmp     ds:__imp_printf
.text:00412970 printf          endp
.text:00412970
.text:00412970 ; ---------------------------------------------------------------------------
.text:00412976                 align 10h
.text:00412980
.text:00412980 ; =============== S U B R O U T I N E =======================================
.text:00412980
.text:00412980 ; Attributes: thunk
.text:00412980
.text:00412980 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00412980 fprintf         proc near               ; CODE XREF: sub_401BF0+119↑p
.text:00412980                                         ; .text:00402243↑p ...
.text:00412980
.text:00412980 Stream          = dword ptr  4
.text:00412980 Format          = dword ptr  8
.text:00412980
.text:00412980                 jmp     ds:__imp_fprintf
.text:00412980 fprintf         endp
.text:00412980
.text:00412980 ; ---------------------------------------------------------------------------
.text:00412986                 align 10h
.text:00412990
.text:00412990 ; =============== S U B R O U T I N E =======================================
.text:00412990
.text:00412990 ; Attributes: thunk
.text:00412990
.text:00412990 ; void __cdecl free(void *Block)
.text:00412990 free            proc near               ; CODE XREF: sub_402F00+E3↑j
.text:00412990                                         ; sub_4031F0+1C2↑p ...
.text:00412990
.text:00412990 Block           = dword ptr  4
.text:00412990
.text:00412990                 jmp     ds:__imp_free
.text:00412990 free            endp
.text:00412990
.text:00412990 ; ---------------------------------------------------------------------------
.text:00412996                 align 10h
.text:004129A0
.text:004129A0 ; =============== S U B R O U T I N E =======================================
.text:004129A0
.text:004129A0 ; Attributes: noreturn thunk
.text:004129A0
.text:004129A0 ; void __cdecl __noreturn abort()
.text:004129A0 abort           proc near               ; CODE XREF: sub_4026E0:loc_402931↑p
.text:004129A0                                         ; sub_402F00:loc_402F99↑p ...
.text:004129A0                 jmp     ds:__imp_abort
.text:004129A0 abort           endp
.text:004129A0
.text:004129A0 ; ---------------------------------------------------------------------------
.text:004129A6                 align 10h
.text:004129B0
.text:004129B0 ; =============== S U B R O U T I N E =======================================
.text:004129B0
.text:004129B0 ; Attributes: thunk
.text:004129B0
.text:004129B0 ; size_t __cdecl strlen(const char *Str)
.text:004129B0 strlen          proc near               ; CODE XREF: sub_402F00+3B↑p
.text:004129B0                                         ; sub_402F00+45↑p ...
.text:004129B0
.text:004129B0 Str             = dword ptr  4
.text:004129B0
.text:004129B0                 jmp     ds:__imp_strlen
.text:004129B0 strlen          endp
.text:004129B0
.text:004129B0 ; ---------------------------------------------------------------------------
.text:004129B6                 align 10h
.text:004129C0
.text:004129C0 ; =============== S U B R O U T I N E =======================================
.text:004129C0
.text:004129C0 ; Attributes: thunk
.text:004129C0
.text:004129C0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004129C0 realloc         proc near               ; CODE XREF: sub_404590+35↑p
.text:004129C0                                         ; sub_404730+60↑p ...
.text:004129C0
.text:004129C0 Block           = dword ptr  4
.text:004129C0 Size            = dword ptr  8
.text:004129C0
.text:004129C0                 jmp     ds:__imp_realloc
.text:004129C0 realloc         endp
.text:004129C0
.text:004129C0 ; ---------------------------------------------------------------------------
.text:004129C6                 align 10h
.text:004129D0
.text:004129D0 ; =============== S U B R O U T I N E =======================================
.text:004129D0
.text:004129D0 ; Attributes: thunk
.text:004129D0
.text:004129D0 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:004129D0 memmove         proc near               ; CODE XREF: sub_403600+B2↑p
.text:004129D0                                         ; sub_403600+1B2↑p ...
.text:004129D0
.text:004129D0 Src             = dword ptr  8
.text:004129D0 Size            = dword ptr  0Ch
.text:004129D0
.text:004129D0                 jmp     ds:__imp_memmove
.text:004129D0 memmove         endp
.text:004129D0
.text:004129D0 ; ---------------------------------------------------------------------------
.text:004129D6                 align 10h
.text:004129E0
.text:004129E0 ; =============== S U B R O U T I N E =======================================
.text:004129E0
.text:004129E0 ; Attributes: thunk
.text:004129E0
.text:004129E0 ; void *__cdecl malloc(size_t Size)
.text:004129E0 malloc          proc near               ; CODE XREF: sub_4031F0+2A↑p
.text:004129E0                                         ; sub_4031F0+156↑p ...
.text:004129E0
.text:004129E0 Size            = dword ptr  4
.text:004129E0
.text:004129E0                 jmp     ds:__imp_malloc
.text:004129E0 malloc          endp
.text:004129E0
.text:004129E0 ; ---------------------------------------------------------------------------
.text:004129E6                 align 10h
.text:004129F0
.text:004129F0 ; =============== S U B R O U T I N E =======================================
.text:004129F0
.text:004129F0 ; Attributes: thunk
.text:004129F0
.text:004129F0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:004129F0 strrchr         proc near               ; CODE XREF: sub_403600+1C2↑p
.text:004129F0                                         ; sub_40A0D0+CB↑p ...
.text:004129F0
.text:004129F0 Str             = dword ptr  4
.text:004129F0
.text:004129F0                 jmp     ds:__imp_strrchr
.text:004129F0 strrchr         endp
.text:004129F0
.text:004129F0 ; ---------------------------------------------------------------------------
.text:004129F6                 align 10h
.text:00412A00
.text:00412A00 ; =============== S U B R O U T I N E =======================================
.text:00412A00
.text:00412A00 ; Attributes: thunk
.text:00412A00
.text:00412A00 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00412A00 strncmp         proc near               ; CODE XREF: sub_404FC0+23F↑p
.text:00412A00                                         ; sub_404FC0+699↑p
.text:00412A00
.text:00412A00 Str1            = dword ptr  4
.text:00412A00 Str2            = dword ptr  8
.text:00412A00 MaxCount        = dword ptr  0Ch
.text:00412A00
.text:00412A00                 jmp     ds:__imp_strncmp
.text:00412A00 strncmp         endp
.text:00412A00
.text:00412A00 ; ---------------------------------------------------------------------------
.text:00412A06                 align 10h
.text:00412A10
.text:00412A10 ; =============== S U B R O U T I N E =======================================
.text:00412A10
.text:00412A10 ; Attributes: thunk
.text:00412A10
.text:00412A10 ; char *__cdecl getenv(const char *VarName)
.text:00412A10 getenv          proc near               ; CODE XREF: sub_404FC0+B57↑p
.text:00412A10                                         ; sub_40A0D0+3EE↑p ...
.text:00412A10
.text:00412A10 VarName         = dword ptr  4
.text:00412A10
.text:00412A10                 jmp     ds:__imp_getenv
.text:00412A10 getenv          endp
.text:00412A10
.text:00412A10 ; ---------------------------------------------------------------------------
.text:00412A16                 align 10h
.text:00412A20
.text:00412A20 ; =============== S U B R O U T I N E =======================================
.text:00412A20
.text:00412A20 ; Attributes: thunk
.text:00412A20
.text:00412A20 ; char *__cdecl strchr(const char *Str, int Val)
.text:00412A20 strchr          proc near               ; CODE XREF: sub_404FC0+469↑p
.text:00412A20                                         ; sub_404FC0+53A↑p ...
.text:00412A20
.text:00412A20 Str             = dword ptr  4
.text:00412A20 Val             = dword ptr  8
.text:00412A20
.text:00412A20                 jmp     ds:__imp_strchr
.text:00412A20 strchr          endp
.text:00412A20
.text:00412A20 ; ---------------------------------------------------------------------------
.text:00412A26                 align 10h
.text:00412A30
.text:00412A30 ; =============== S U B R O U T I N E =======================================
.text:00412A30
.text:00412A30 ; Attributes: thunk
.text:00412A30
.text:00412A30 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00412A30 vfprintf        proc near               ; CODE XREF: sub_406080+C1↑p
.text:00412A30                                         ; sub_409310+49↑p ...
.text:00412A30
.text:00412A30 Stream          = dword ptr  4
.text:00412A30 Format          = dword ptr  8
.text:00412A30 ArgList         = dword ptr  0Ch
.text:00412A30
.text:00412A30                 jmp     ds:__imp_vfprintf
.text:00412A30 vfprintf        endp
.text:00412A30
.text:00412A30 ; ---------------------------------------------------------------------------
.text:00412A36                 align 10h
.text:00412A40
.text:00412A40 ; =============== S U B R O U T I N E =======================================
.text:00412A40
.text:00412A40 ; Attributes: thunk
.text:00412A40
.text:00412A40 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00412A40 _flsbuf         proc near               ; CODE XREF: sub_406080+128↑p
.text:00412A40                                         ; sub_406080+13A↑p ...
.text:00412A40
.text:00412A40 File            = dword ptr  8
.text:00412A40
.text:00412A40                 jmp     ds:__imp__flsbuf
.text:00412A40 _flsbuf         endp
.text:00412A40
.text:00412A40 ; ---------------------------------------------------------------------------
.text:00412A46                 align 10h
.text:00412A50
.text:00412A50 ; =============== S U B R O U T I N E =======================================
.text:00412A50
.text:00412A50 ; Attributes: thunk
.text:00412A50
.text:00412A50 ; int __cdecl fclose(FILE *Stream)
.text:00412A50 fclose          proc near               ; CODE XREF: sub_406400+27↑p
.text:00412A50                                         ; .text:0040EF5E↑p
.text:00412A50
.text:00412A50 Stream          = dword ptr  4
.text:00412A50
.text:00412A50                 jmp     ds:__imp_fclose
.text:00412A50 fclose          endp
.text:00412A50
.text:00412A50 ; ---------------------------------------------------------------------------
.text:00412A56                 align 10h
.text:00412A60
.text:00412A60 ; =============== S U B R O U T I N E =======================================
.text:00412A60
.text:00412A60 ; Attributes: thunk
.text:00412A60
.text:00412A60 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:00412A60 strtoul         proc near               ; CODE XREF: sub_4065B0+94↑p
.text:00412A60
.text:00412A60 String          = dword ptr  4
.text:00412A60 EndPtr          = dword ptr  8
.text:00412A60 Radix           = dword ptr  0Ch
.text:00412A60
.text:00412A60                 jmp     ds:__imp_strtoul
.text:00412A60 strtoul         endp
.text:00412A60
.text:00412A60 ; ---------------------------------------------------------------------------
.text:00412A66                 align 10h
.text:00412A70
.text:00412A70 ; =============== S U B R O U T I N E =======================================
.text:00412A70
.text:00412A70 ; Attributes: noreturn thunk
.text:00412A70
.text:00412A70 _assert         proc near               ; CODE XREF: sub_4065B0+553↑p
.text:00412A70                                         ; sub_406EF0+DD↑p ...
.text:00412A70                 jmp     ds:__imp__assert
.text:00412A70 _assert         endp
.text:00412A70
.text:00412A70 ; ---------------------------------------------------------------------------
.text:00412A76                 align 10h
.text:00412A80
.text:00412A80 ; =============== S U B R O U T I N E =======================================
.text:00412A80
.text:00412A80 ; Attributes: thunk
.text:00412A80
.text:00412A80 ; int __cdecl isctype(int C, int Type)
.text:00412A80 _isctype        proc near               ; CODE XREF: sub_4065B0+5F↑p
.text:00412A80                                         ; sub_407FB0+610↑p
.text:00412A80
.text:00412A80 C               = dword ptr  4
.text:00412A80 Type            = dword ptr  8
.text:00412A80
.text:00412A80                 jmp     ds:__imp__isctype
.text:00412A80 _isctype        endp
.text:00412A80
.text:00412A80 ; ---------------------------------------------------------------------------
.text:00412A86                 align 10h
.text:00412A90
.text:00412A90 ; =============== S U B R O U T I N E =======================================
.text:00412A90
.text:00412A90 ; Attributes: thunk
.text:00412A90
.text:00412A90 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00412A90 memcpy          proc near               ; CODE XREF: .text:00406D08↑p
.text:00412A90                                         ; sub_406D20+31↑p ...
.text:00412A90
.text:00412A90 Src             = dword ptr  8
.text:00412A90 Size            = dword ptr  0Ch
.text:00412A90
.text:00412A90                 jmp     ds:__imp_memcpy
.text:00412A90 memcpy          endp
.text:00412A90
.text:00412A90 ; ---------------------------------------------------------------------------
.text:00412A96                 align 10h
.text:00412AA0
.text:00412AA0 ; =============== S U B R O U T I N E =======================================
.text:00412AA0
.text:00412AA0 ; Attributes: thunk
.text:00412AA0
.text:00412AA0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00412AA0 memset          proc near               ; CODE XREF: .text:00406C86↑p
.text:00412AA0
.text:00412AA0 Val             = dword ptr  8
.text:00412AA0 Size            = dword ptr  0Ch
.text:00412AA0
.text:00412AA0                 jmp     ds:__imp_memset
.text:00412AA0 memset          endp
.text:00412AA0
.text:00412AA0 ; ---------------------------------------------------------------------------
.text:00412AA6                 align 10h
.text:00412AB0
.text:00412AB0 ; =============== S U B R O U T I N E =======================================
.text:00412AB0
.text:00412AB0 ; Attributes: thunk
.text:00412AB0
.text:00412AB0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00412AB0 calloc          proc near               ; CODE XREF: .text:00406CC3↑p
.text:00412AB0                                         ; sub_407010+1D0↑p ...
.text:00412AB0
.text:00412AB0 Count           = dword ptr  4
.text:00412AB0 Size            = dword ptr  8
.text:00412AB0
.text:00412AB0                 jmp     ds:__imp_calloc
.text:00412AB0 calloc          endp
.text:00412AB0
.text:00412AB0 ; ---------------------------------------------------------------------------
.text:00412AB6                 align 10h
.text:00412AC0
.text:00412AC0 ; =============== S U B R O U T I N E =======================================
.text:00412AC0
.text:00412AC0 ; Attributes: thunk
.text:00412AC0
.text:00412AC0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00412AC0 iswctype        proc near               ; CODE XREF: sub_407FB0+78B↑p
.text:00412AC0
.text:00412AC0 C               = word ptr  4
.text:00412AC0 Type            = word ptr  8
.text:00412AC0
.text:00412AC0                 jmp     ds:__imp_iswctype
.text:00412AC0 iswctype        endp
.text:00412AC0
.text:00412AC0 ; ---------------------------------------------------------------------------
.text:00412AC6                 align 10h
.text:00412AD0
.text:00412AD0 ; =============== S U B R O U T I N E =======================================
.text:00412AD0
.text:00412AD0 ; Attributes: thunk
.text:00412AD0
.text:00412AD0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00412AD0 strcmp          proc near               ; CODE XREF: sub_409414+180↑p
.text:00412AD0                                         ; .text:0040E35B↑p
.text:00412AD0
.text:00412AD0 Str1            = dword ptr  4
.text:00412AD0 Str2            = dword ptr  8
.text:00412AD0
.text:00412AD0                 jmp     ds:__imp_strcmp
.text:00412AD0 strcmp          endp
.text:00412AD0
.text:00412AD0 ; ---------------------------------------------------------------------------
.text:00412AD6                 align 10h
.text:00412AE0
.text:00412AE0 ; =============== S U B R O U T I N E =======================================
.text:00412AE0
.text:00412AE0 ; Attributes: thunk
.text:00412AE0
.text:00412AE0 ; int __cdecl fflush(FILE *Stream)
.text:00412AE0 fflush          proc near               ; CODE XREF: sub_409310+19↑p
.text:00412AE0                                         ; sub_409310+81↑p ...
.text:00412AE0
.text:00412AE0 Stream          = dword ptr  4
.text:00412AE0
.text:00412AE0                 jmp     ds:__imp_fflush
.text:00412AE0 fflush          endp
.text:00412AE0
.text:00412AE0 ; ---------------------------------------------------------------------------
.text:00412AE6                 align 10h
.text:00412AF0
.text:00412AF0 ; =============== S U B R O U T I N E =======================================
.text:00412AF0
.text:00412AF0 ; Attributes: thunk
.text:00412AF0
.text:00412AF0 ; char *__cdecl strerror(int ErrorMessage)
.text:00412AF0 strerror        proc near               ; CODE XREF: sub_409310+A5↑p
.text:00412AF0                                         ; sub_409414+10F↑p
.text:00412AF0
.text:00412AF0 ErrorMessage    = dword ptr  4
.text:00412AF0
.text:00412AF0                 jmp     ds:__imp_strerror
.text:00412AF0 strerror        endp
.text:00412AF0
.text:00412AF0 ; ---------------------------------------------------------------------------
.text:00412AF6                 align 10h
.text:00412B00
.text:00412B00 ; =============== S U B R O U T I N E =======================================
.text:00412B00
.text:00412B00 ; Attributes: thunk
.text:00412B00
.text:00412B00 ; char *__cdecl ctime(const __time32_t *const Time)
.text:00412B00 ctime           proc near               ; CODE XREF: .text:0040977D↑p
.text:00412B00                                         ; .text:0040979F↑p ...
.text:00412B00
.text:00412B00 Time            = dword ptr  4
.text:00412B00
.text:00412B00                 jmp     ds:__imp_ctime
.text:00412B00 ctime           endp
.text:00412B00
.text:00412B00 ; ---------------------------------------------------------------------------
.text:00412B06                 align 10h
.text:00412B10
.text:00412B10 ; =============== S U B R O U T I N E =======================================
.text:00412B10
.text:00412B10 ; Attributes: thunk
.text:00412B10
.text:00412B10 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00412B10 _get_osfhandle  proc near               ; CODE XREF: sub_409820+3A↑p
.text:00412B10                                         ; sub_40FB30+15↑p
.text:00412B10
.text:00412B10 FileHandle      = dword ptr  4
.text:00412B10
.text:00412B10                 jmp     ds:__imp__get_osfhandle
.text:00412B10 _get_osfhandle  endp
.text:00412B10
.text:00412B10 ; ---------------------------------------------------------------------------
.text:00412B16                 align 10h
.text:00412B20
.text:00412B20 ; =============== S U B R O U T I N E =======================================
.text:00412B20
.text:00412B20 ; Attributes: thunk
.text:00412B20
.text:00412B20 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00412B20 strcat          proc near               ; CODE XREF: sub_409A80+98↑p
.text:00412B20                                         ; sub_40BD00+191↑p ...
.text:00412B20
.text:00412B20 Destination     = dword ptr  4
.text:00412B20 Source          = dword ptr  8
.text:00412B20
.text:00412B20                 jmp     ds:__imp_strcat
.text:00412B20 strcat          endp
.text:00412B20
.text:00412B20 ; ---------------------------------------------------------------------------
.text:00412B26                 align 10h
.text:00412B30
.text:00412B30 ; =============== S U B R O U T I N E =======================================
.text:00412B30
.text:00412B30 ; Attributes: thunk
.text:00412B30
.text:00412B30 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:00412B30 strcpy          proc near               ; CODE XREF: sub_409A80+73↑p
.text:00412B30                                         ; _win32_longpath+13C↑p ...
.text:00412B30
.text:00412B30 Destination     = dword ptr  4
.text:00412B30 Source          = dword ptr  8
.text:00412B30
.text:00412B30                 jmp     ds:__imp_strcpy
.text:00412B30 strcpy          endp
.text:00412B30
.text:00412B30 ; ---------------------------------------------------------------------------
.text:00412B36                 align 10h
.text:00412B40
.text:00412B40 ; =============== S U B R O U T I N E =======================================
.text:00412B40
.text:00412B40 ; Attributes: thunk
.text:00412B40
.text:00412B40 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:00412B40 strstr          proc near               ; CODE XREF: sub_40A0D0+3BF↑p
.text:00412B40                                         ; sub_40A0D0+3DC↑p ...
.text:00412B40
.text:00412B40 Str             = dword ptr  4
.text:00412B40 SubStr          = dword ptr  8
.text:00412B40
.text:00412B40                 jmp     ds:__imp_strstr
.text:00412B40 strstr          endp
.text:00412B40
.text:00412B40 ; ---------------------------------------------------------------------------
.text:00412B46                 align 10h
.text:00412B50
.text:00412B50 ; =============== S U B R O U T I N E =======================================
.text:00412B50
.text:00412B50 ; Attributes: thunk
.text:00412B50
.text:00412B50 ; int __cdecl isalpha(int C)
.text:00412B50 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00412B50
.text:00412B50 C               = dword ptr  4
.text:00412B50
.text:00412B50                 jmp     ds:__imp_isalpha
.text:00412B50 isalpha         endp
.text:00412B50
.text:00412B50 ; ---------------------------------------------------------------------------
.text:00412B56                 align 10h
.text:00412B60
.text:00412B60 ; =============== S U B R O U T I N E =======================================
.text:00412B60
.text:00412B60 ; Attributes: thunk
.text:00412B60
.text:00412B60 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00412B60 _stricmp_0      proc near               ; CODE XREF: .text:0040BB74↑p
.text:00412B60
.text:00412B60 String1         = dword ptr  4
.text:00412B60 String2         = dword ptr  8
.text:00412B60
.text:00412B60                 jmp     ds:__imp__stricmp_0
.text:00412B60 _stricmp_0      endp
.text:00412B60
.text:00412B60 ; ---------------------------------------------------------------------------
.text:00412B66                 align 10h
.text:00412B70
.text:00412B70 ; =============== S U B R O U T I N E =======================================
.text:00412B70
.text:00412B70 ; Attributes: thunk
.text:00412B70
.text:00412B70 ; char *__cdecl strncat(char *Destination, const char *Source, size_t Count)
.text:00412B70 strncat         proc near               ; CODE XREF: sub_40BD00+75↑p
.text:00412B70
.text:00412B70 Destination     = dword ptr  4
.text:00412B70 Source          = dword ptr  8
.text:00412B70 Count           = dword ptr  0Ch
.text:00412B70
.text:00412B70                 jmp     ds:__imp_strncat
.text:00412B70 strncat         endp
.text:00412B70
.text:00412B70 ; ---------------------------------------------------------------------------
.text:00412B76                 align 10h
.text:00412B80
.text:00412B80 ; =============== S U B R O U T I N E =======================================
.text:00412B80
.text:00412B80 ; Attributes: thunk
.text:00412B80
.text:00412B80 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00412B80 strncpy         proc near               ; CODE XREF: sub_40BD00+61↑p
.text:00412B80                                         ; sub_40BD00+118↑p ...
.text:00412B80
.text:00412B80 Destination     = dword ptr  4
.text:00412B80 Source          = dword ptr  8
.text:00412B80 Count           = dword ptr  0Ch
.text:00412B80
.text:00412B80                 jmp     ds:__imp_strncpy
.text:00412B80 strncpy         endp
.text:00412B80
.text:00412B80 ; ---------------------------------------------------------------------------
.text:00412B86                 align 10h
.text:00412B90
.text:00412B90 ; =============== S U B R O U T I N E =======================================
.text:00412B90
.text:00412B90 ; Attributes: thunk
.text:00412B90
.text:00412B90 ; int __cdecl toupper(int C)
.text:00412B90 toupper         proc near               ; CODE XREF: sub_40BEF0+10E↑p
.text:00412B90
.text:00412B90 C               = dword ptr  4
.text:00412B90
.text:00412B90                 jmp     ds:__imp_toupper
.text:00412B90 toupper         endp
.text:00412B90
.text:00412B90 ; ---------------------------------------------------------------------------
.text:00412B96                 align 10h
.text:00412BA0
.text:00412BA0 ; =============== S U B R O U T I N E =======================================
.text:00412BA0
.text:00412BA0 ; Attributes: thunk
.text:00412BA0
.text:00412BA0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00412BA0 sprintf         proc near               ; CODE XREF: .text:0040DA1A↑p
.text:00412BA0                                         ; .text:0040DA3B↑p ...
.text:00412BA0
.text:00412BA0 Buffer          = dword ptr  4
.text:00412BA0 Format          = dword ptr  8
.text:00412BA0
.text:00412BA0                 jmp     ds:__imp_sprintf
.text:00412BA0 sprintf         endp
.text:00412BA0
.text:00412BA0 ; ---------------------------------------------------------------------------
.text:00412BA6                 align 10h
.text:00412BB0
.text:00412BB0 ; =============== S U B R O U T I N E =======================================
.text:00412BB0
.text:00412BB0 ; Attributes: thunk
.text:00412BB0
.text:00412BB0 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00412BB0 sscanf          proc near               ; CODE XREF: .text:0040E59E↑p
.text:00412BB0
.text:00412BB0 Buffer          = dword ptr  4
.text:00412BB0 Format          = dword ptr  8
.text:00412BB0
.text:00412BB0                 jmp     ds:__imp_sscanf
.text:00412BB0 sscanf          endp
.text:00412BB0
.text:00412BB0 ; ---------------------------------------------------------------------------
.text:00412BB6                 align 10h
.text:00412BC0
.text:00412BC0 ; =============== S U B R O U T I N E =======================================
.text:00412BC0
.text:00412BC0 ; Attributes: thunk
.text:00412BC0
.text:00412BC0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00412BC0 strspn          proc near               ; CODE XREF: .text:0040E3EA↑p
.text:00412BC0                                         ; .text:0040E604↑p ...
.text:00412BC0
.text:00412BC0 Str             = dword ptr  4
.text:00412BC0 Control         = dword ptr  8
.text:00412BC0
.text:00412BC0                 jmp     ds:__imp_strspn
.text:00412BC0 strspn          endp
.text:00412BC0
.text:00412BC0 ; ---------------------------------------------------------------------------
.text:00412BC6                 align 10h
.text:00412BD0
.text:00412BD0 ; =============== S U B R O U T I N E =======================================
.text:00412BD0
.text:00412BD0 ; Attributes: thunk
.text:00412BD0
.text:00412BD0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00412BD0 fopen           proc near               ; CODE XREF: sub_40EE9F+26↑p
.text:00412BD0                                         ; sub_40EE9F+99↑p
.text:00412BD0
.text:00412BD0 FileName        = dword ptr  4
.text:00412BD0 Mode            = dword ptr  8
.text:00412BD0
.text:00412BD0                 jmp     ds:__imp_fopen
.text:00412BD0 fopen           endp
.text:00412BD0
.text:00412BD0 ; ---------------------------------------------------------------------------
.text:00412BD6                 align 10h
.text:00412BE0
.text:00412BE0 ; =============== S U B R O U T I N E =======================================
.text:00412BE0
.text:00412BE0 ; Attributes: thunk
.text:00412BE0
.text:00412BE0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00412BE0 _filelengthi64  proc near               ; CODE XREF: sub_40FB30+1F↑p
.text:00412BE0
.text:00412BE0 FileHandle      = dword ptr  4
.text:00412BE0
.text:00412BE0                 jmp     ds:__imp__filelengthi64
.text:00412BE0 _filelengthi64  endp
.text:00412BE0
.text:00412BE0 ; ---------------------------------------------------------------------------
.text:00412BE6                 align 10h
.text:00412BF0
.text:00412BF0 ; =============== S U B R O U T I N E =======================================
.text:00412BF0
.text:00412BF0 ; Attributes: thunk
.text:00412BF0
.text:00412BF0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00412BF0 strpbrk         proc near               ; CODE XREF: sub_40FB90+87↑p
.text:00412BF0
.text:00412BF0 Str             = dword ptr  4
.text:00412BF0 Control         = dword ptr  8
.text:00412BF0
.text:00412BF0                 jmp     ds:__imp_strpbrk
.text:00412BF0 strpbrk         endp
.text:00412BF0
.text:00412BF0 ; ---------------------------------------------------------------------------
.text:00412BF6                 align 10h
.text:00412C00
.text:00412C00 ; =============== S U B R O U T I N E =======================================
.text:00412C00
.text:00412C00 ; Attributes: thunk
.text:00412C00
.text:00412C00 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:00412C00 _fdopen         proc near               ; CODE XREF: sub_40FC30+69↑p
.text:00412C00
.text:00412C00 FileHandle      = dword ptr  4
.text:00412C00 Format          = dword ptr  8
.text:00412C00
.text:00412C00                 jmp     ds:__imp__fdopen
.text:00412C00 _fdopen         endp
.text:00412C00
.text:00412C00 ; ---------------------------------------------------------------------------
.text:00412C06                 align 10h
.text:00412C10
.text:00412C10 ; =============== S U B R O U T I N E =======================================
.text:00412C10
.text:00412C10 ; Attributes: thunk
.text:00412C10
.text:00412C10 ; int __cdecl close_0(int FileHandle)
.text:00412C10 _close_0        proc near               ; CODE XREF: sub_40FC30+90↑p
.text:00412C10
.text:00412C10 FileHandle      = dword ptr  4
.text:00412C10
.text:00412C10                 jmp     ds:__imp__close_0
.text:00412C10 _close_0        endp
.text:00412C10
.text:00412C10 ; ---------------------------------------------------------------------------
.text:00412C16                 align 10h
.text:00412C20
.text:00412C20 ; =============== S U B R O U T I N E =======================================
.text:00412C20
.text:00412C20 ; Attributes: thunk
.text:00412C20
.text:00412C20 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:00412C20 _open_0         proc near               ; CODE XREF: sub_4108F0:loc_410C80↑p
.text:00412C20
.text:00412C20 FileName        = dword ptr  4
.text:00412C20 OpenFlag        = dword ptr  8
.text:00412C20
.text:00412C20                 jmp     ds:__imp__open_0
.text:00412C20 _open_0         endp
.text:00412C20
.text:00412C20 ; ---------------------------------------------------------------------------
.text:00412C26                 align 10h
.text:00412C30
.text:00412C30 ; =============== S U B R O U T I N E =======================================
.text:00412C30
.text:00412C30 ; Attributes: thunk
.text:00412C30
.text:00412C30 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00412C30 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00412C30
.text:00412C30 lpTopLevelExceptionFilter= dword ptr  4
.text:00412C30
.text:00412C30                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00412C30 SetUnhandledExceptionFilter endp
.text:00412C30
.text:00412C30 ; ---------------------------------------------------------------------------
.text:00412C36                 align 10h
.text:00412C40
.text:00412C40 ; =============== S U B R O U T I N E =======================================
.text:00412C40
.text:00412C40 ; Attributes: noreturn thunk
.text:00412C40
.text:00412C40 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00412C40 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00412C40
.text:00412C40 uExitCode       = dword ptr  4
.text:00412C40
.text:00412C40                 jmp     ds:__imp_ExitProcess
.text:00412C40 ExitProcess     endp
.text:00412C40
.text:00412C40 ; ---------------------------------------------------------------------------
.text:00412C46                 align 10h
.text:00412C50
.text:00412C50 ; =============== S U B R O U T I N E =======================================
.text:00412C50
.text:00412C50 ; Attributes: thunk
.text:00412C50
.text:00412C50 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00412C50 GetModuleHandleA proc near              ; CODE XREF: sub_409910+18↑p
.text:00412C50                                         ; sub_40A0D0+329↑p ...
.text:00412C50
.text:00412C50 lpModuleName    = dword ptr  4
.text:00412C50
.text:00412C50                 jmp     ds:__imp_GetModuleHandleA
.text:00412C50 GetModuleHandleA endp
.text:00412C50
.text:00412C50 ; ---------------------------------------------------------------------------
.text:00412C56                 align 10h
.text:00412C60
.text:00412C60 ; =============== S U B R O U T I N E =======================================
.text:00412C60
.text:00412C60 ; Attributes: thunk
.text:00412C60
.text:00412C60 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00412C60 GetProcAddress  proc near               ; CODE XREF: sub_409910+33↑p
.text:00412C60                                         ; sub_409A80+2E↑p ...
.text:00412C60
.text:00412C60 hModule         = dword ptr  4
.text:00412C60 lpProcName      = dword ptr  8
.text:00412C60
.text:00412C60                 jmp     ds:__imp_GetProcAddress
.text:00412C60 GetProcAddress  endp
.text:00412C60
.text:00412C60 ; ---------------------------------------------------------------------------
.text:00412C66                 align 10h
.text:00412C70
.text:00412C70 ; =============== S U B R O U T I N E =======================================
.text:00412C70
.text:00412C70 ; Attributes: thunk
.text:00412C70
.text:00412C70 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00412C70 GetFileAttributesA proc near            ; CODE XREF: sub_409910+47↑p
.text:00412C70                                         ; sub_40D190+65↑p ...
.text:00412C70
.text:00412C70 lpFileName      = dword ptr  4
.text:00412C70
.text:00412C70                 jmp     ds:__imp_GetFileAttributesA
.text:00412C70 GetFileAttributesA endp
.text:00412C70
.text:00412C70 ; ---------------------------------------------------------------------------
.text:00412C76                 align 10h
.text:00412C80
.text:00412C80 ; =============== S U B R O U T I N E =======================================
.text:00412C80
.text:00412C80 ; Attributes: thunk
.text:00412C80
.text:00412C80 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00412C80 FreeLibrary     proc near               ; CODE XREF: sub_409910+A4↑p
.text:00412C80                                         ; sub_409A80+11D↑p ...
.text:00412C80
.text:00412C80 hLibModule      = dword ptr  4
.text:00412C80
.text:00412C80                 jmp     ds:__imp_FreeLibrary
.text:00412C80 FreeLibrary     endp
.text:00412C80
.text:00412C80 ; ---------------------------------------------------------------------------
.text:00412C86                 align 10h
.text:00412C90
.text:00412C90 ; =============== S U B R O U T I N E =======================================
.text:00412C90
.text:00412C90 ; Attributes: thunk
.text:00412C90
.text:00412C90 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00412C90 FindFirstFileA  proc near               ; CODE XREF: sub_409910+CE↑p
.text:00412C90                                         ; sub_409A80+14F↑p ...
.text:00412C90
.text:00412C90 lpFileName      = dword ptr  4
.text:00412C90 lpFindFileData  = dword ptr  8
.text:00412C90
.text:00412C90                 jmp     ds:__imp_FindFirstFileA
.text:00412C90 FindFirstFileA  endp
.text:00412C90
.text:00412C90 ; ---------------------------------------------------------------------------
.text:00412C96                 align 10h
.text:00412CA0
.text:00412CA0 ; =============== S U B R O U T I N E =======================================
.text:00412CA0
.text:00412CA0 ; Attributes: thunk
.text:00412CA0
.text:00412CA0 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00412CA0 FindClose       proc near               ; CODE XREF: sub_409910+123↑p
.text:00412CA0                                         ; sub_409A80+10E↑p ...
.text:00412CA0
.text:00412CA0 hFindFile       = dword ptr  4
.text:00412CA0
.text:00412CA0                 jmp     ds:__imp_FindClose
.text:00412CA0 FindClose       endp
.text:00412CA0
.text:00412CA0 ; ---------------------------------------------------------------------------
.text:00412CA6                 align 10h
.text:00412CB0
.text:00412CB0 ; =============== S U B R O U T I N E =======================================
.text:00412CB0
.text:00412CB0 ; Attributes: thunk
.text:00412CB0
.text:00412CB0 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00412CB0 LoadLibraryA    proc near               ; CODE XREF: sub_409A80+13↑p
.text:00412CB0                                         ; sub_40A0D0+134↑p ...
.text:00412CB0
.text:00412CB0 lpLibFileName   = dword ptr  4
.text:00412CB0
.text:00412CB0                 jmp     ds:__imp_LoadLibraryA
.text:00412CB0 LoadLibraryA    endp
.text:00412CB0
.text:00412CB0 ; ---------------------------------------------------------------------------
.text:00412CB6                 align 10h
.text:00412CC0
.text:00412CC0 ; =============== S U B R O U T I N E =======================================
.text:00412CC0
.text:00412CC0 ; Attributes: thunk
.text:00412CC0
.text:00412CC0 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00412CC0 FindNextFileA   proc near               ; CODE XREF: sub_409A80+FF↑p
.text:00412CC0                                         ; sub_40BD00+36↑p
.text:00412CC0
.text:00412CC0 hFindFile       = dword ptr  4
.text:00412CC0 lpFindFileData  = dword ptr  8
.text:00412CC0
.text:00412CC0                 jmp     ds:__imp_FindNextFileA
.text:00412CC0 FindNextFileA   endp
.text:00412CC0
.text:00412CC0 ; ---------------------------------------------------------------------------
.text:00412CC6                 align 10h
.text:00412CD0
.text:00412CD0 ; =============== S U B R O U T I N E =======================================
.text:00412CD0
.text:00412CD0 ; Attributes: thunk
.text:00412CD0
.text:00412CD0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00412CD0 GetFileType     proc near               ; CODE XREF: sub_409C00+43↑p
.text:00412CD0                                         ; .text:0040A8BA↑p
.text:00412CD0
.text:00412CD0 hFile           = dword ptr  4
.text:00412CD0
.text:00412CD0                 jmp     ds:__imp_GetFileType
.text:00412CD0 GetFileType     endp
.text:00412CD0
.text:00412CD0 ; ---------------------------------------------------------------------------
.text:00412CD6                 align 10h
.text:00412CE0
.text:00412CE0 ; =============== S U B R O U T I N E =======================================
.text:00412CE0
.text:00412CE0 ; Attributes: thunk
.text:00412CE0
.text:00412CE0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00412CE0 GetFileInformationByHandle proc near    ; CODE XREF: sub_409C00+69↑p
.text:00412CE0
.text:00412CE0 hFile           = dword ptr  4
.text:00412CE0 lpFileInformation= dword ptr  8
.text:00412CE0
.text:00412CE0                 jmp     ds:__imp_GetFileInformationByHandle
.text:00412CE0 GetFileInformationByHandle endp
.text:00412CE0
.text:00412CE0 ; ---------------------------------------------------------------------------
.text:00412CE6                 align 10h
.text:00412CF0
.text:00412CF0 ; =============== S U B R O U T I N E =======================================
.text:00412CF0
.text:00412CF0 ; Attributes: thunk
.text:00412CF0
.text:00412CF0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00412CF0 GetFileSize     proc near               ; CODE XREF: sub_409C00+3F2↑p
.text:00412CF0
.text:00412CF0 hFile           = dword ptr  4
.text:00412CF0 lpFileSizeHigh  = dword ptr  8
.text:00412CF0
.text:00412CF0                 jmp     ds:__imp_GetFileSize
.text:00412CF0 GetFileSize     endp
.text:00412CF0
.text:00412CF0 ; ---------------------------------------------------------------------------
.text:00412CF6                 align 10h
.text:00412D00
.text:00412D00 ; =============== S U B R O U T I N E =======================================
.text:00412D00
.text:00412D00 ; Attributes: thunk
.text:00412D00
.text:00412D00 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00412D00 PeekNamedPipe   proc near               ; CODE XREF: sub_409C00+439↑p
.text:00412D00
.text:00412D00 hNamedPipe      = dword ptr  4
.text:00412D00 lpBuffer        = dword ptr  8
.text:00412D00 nBufferSize     = dword ptr  0Ch
.text:00412D00 lpBytesRead     = dword ptr  10h
.text:00412D00 lpTotalBytesAvail= dword ptr  14h
.text:00412D00 lpBytesLeftThisMessage= dword ptr  18h
.text:00412D00
.text:00412D00                 jmp     ds:__imp_PeekNamedPipe
.text:00412D00 PeekNamedPipe   endp
.text:00412D00
.text:00412D00 ; ---------------------------------------------------------------------------
.text:00412D06                 align 10h
.text:00412D10
.text:00412D10 ; =============== S U B R O U T I N E =======================================
.text:00412D10
.text:00412D10 ; Attributes: thunk
.text:00412D10
.text:00412D10 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00412D10 GetDriveTypeA   proc near               ; CODE XREF: sub_40A0D0+4C↑p
.text:00412D10
.text:00412D10 lpRootPathName  = dword ptr  4
.text:00412D10
.text:00412D10                 jmp     ds:__imp_GetDriveTypeA
.text:00412D10 GetDriveTypeA   endp
.text:00412D10
.text:00412D10 ; ---------------------------------------------------------------------------
.text:00412D16                 align 10h
.text:00412D20
.text:00412D20 ; =============== S U B R O U T I N E =======================================
.text:00412D20
.text:00412D20 ; Attributes: thunk
.text:00412D20
.text:00412D20 ; DWORD __stdcall GetLastError()
.text:00412D20 GetLastError    proc near               ; CODE XREF: sub_40A0D0:loc_40A359↑p
.text:00412D20                                         ; .text:loc_40AE9D↑p ...
.text:00412D20                 jmp     ds:__imp_GetLastError
.text:00412D20 GetLastError    endp
.text:00412D20
.text:00412D20 ; ---------------------------------------------------------------------------
.text:00412D26                 align 10h
.text:00412D30
.text:00412D30 ; =============== S U B R O U T I N E =======================================
.text:00412D30
.text:00412D30 ; Attributes: thunk
.text:00412D30
.text:00412D30 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00412D30 GetVolumeInformationA proc near         ; CODE XREF: sub_40A5D0+64↑p
.text:00412D30                                         ; .text:0040AB7C↑p ...
.text:00412D30
.text:00412D30 lpRootPathName  = dword ptr  4
.text:00412D30 lpVolumeNameBuffer= dword ptr  8
.text:00412D30 nVolumeNameSize = dword ptr  0Ch
.text:00412D30 lpVolumeSerialNumber= dword ptr  10h
.text:00412D30 lpMaximumComponentLength= dword ptr  14h
.text:00412D30 lpFileSystemFlags= dword ptr  18h
.text:00412D30 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00412D30 nFileSystemNameSize= dword ptr  20h
.text:00412D30
.text:00412D30                 jmp     ds:__imp_GetVolumeInformationA
.text:00412D30 GetVolumeInformationA endp
.text:00412D30
.text:00412D30 ; ---------------------------------------------------------------------------
.text:00412D36                 align 10h
.text:00412D40
.text:00412D40 ; =============== S U B R O U T I N E =======================================
.text:00412D40
.text:00412D40 ; Attributes: thunk
.text:00412D40
.text:00412D40 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00412D40 CreateFileA     proc near               ; CODE XREF: sub_40B430-CA↑p
.text:00412D40                                         ; .text:0040C513↑p ...
.text:00412D40
.text:00412D40 lpFileName      = dword ptr  4
.text:00412D40 dwDesiredAccess = dword ptr  8
.text:00412D40 dwShareMode     = dword ptr  0Ch
.text:00412D40 lpSecurityAttributes= dword ptr  10h
.text:00412D40 dwCreationDisposition= dword ptr  14h
.text:00412D40 dwFlagsAndAttributes= dword ptr  18h
.text:00412D40 hTemplateFile   = dword ptr  1Ch
.text:00412D40
.text:00412D40                 jmp     ds:__imp_CreateFileA
.text:00412D40 CreateFileA     endp
.text:00412D40
.text:00412D40 ; ---------------------------------------------------------------------------
.text:00412D46                 align 10h
.text:00412D50
.text:00412D50 ; =============== S U B R O U T I N E =======================================
.text:00412D50
.text:00412D50 ; Attributes: thunk
.text:00412D50
.text:00412D50 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00412D50 CloseHandle     proc near               ; CODE XREF: sub_40B430-AF↑p
.text:00412D50                                         ; .text:0040C589↑p ...
.text:00412D50
.text:00412D50 hObject         = dword ptr  4
.text:00412D50
.text:00412D50                 jmp     ds:__imp_CloseHandle
.text:00412D50 CloseHandle     endp
.text:00412D50
.text:00412D50 ; ---------------------------------------------------------------------------
.text:00412D56                 align 10h
.text:00412D60
.text:00412D60 ; =============== S U B R O U T I N E =======================================
.text:00412D60
.text:00412D60 ; Attributes: thunk
.text:00412D60
.text:00412D60 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00412D60 SetErrorMode    proc near               ; CODE XREF: sub_40B430-7A↑p
.text:00412D60                                         ; sub_40D720+57↑p ...
.text:00412D60
.text:00412D60 uMode           = dword ptr  4
.text:00412D60
.text:00412D60                 jmp     ds:__imp_SetErrorMode
.text:00412D60 SetErrorMode    endp
.text:00412D60
.text:00412D60 ; ---------------------------------------------------------------------------
.text:00412D66                 align 10h
.text:00412D70
.text:00412D70 ; =============== S U B R O U T I N E =======================================
.text:00412D70
.text:00412D70 ; Attributes: thunk
.text:00412D70
.text:00412D70 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00412D70 GetModuleFileNameA proc near            ; CODE XREF: sub_40B9F0+1C↑p
.text:00412D70
.text:00412D70 hModule         = dword ptr  4
.text:00412D70 lpFilename      = dword ptr  8
.text:00412D70 nSize           = dword ptr  0Ch
.text:00412D70
.text:00412D70                 jmp     ds:__imp_GetModuleFileNameA
.text:00412D70 GetModuleFileNameA endp
.text:00412D70
.text:00412D70 ; ---------------------------------------------------------------------------
.text:00412D76                 align 10h
.text:00412D80
.text:00412D80 ; =============== S U B R O U T I N E =======================================
.text:00412D80
.text:00412D80 ; Attributes: thunk
.text:00412D80
.text:00412D80 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00412D80 GetShortPathNameA proc near             ; CODE XREF: .text:0040BC76↑p
.text:00412D80                                         ; .text:0040BCA0↑p
.text:00412D80
.text:00412D80 lpszLongPath    = dword ptr  4
.text:00412D80 lpszShortPath   = dword ptr  8
.text:00412D80 cchBuffer       = dword ptr  0Ch
.text:00412D80
.text:00412D80                 jmp     ds:__imp_GetShortPathNameA
.text:00412D80 GetShortPathNameA endp
.text:00412D80
.text:00412D80 ; ---------------------------------------------------------------------------
.text:00412D86                 align 10h
.text:00412D90
.text:00412D90 ; =============== S U B R O U T I N E =======================================
.text:00412D90
.text:00412D90 ; Attributes: thunk
.text:00412D90
.text:00412D90 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00412D90 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040C198↑p
.text:00412D90                                         ; .text:0040C1B4↑p ...
.text:00412D90
.text:00412D90 nBufferLength   = dword ptr  4
.text:00412D90 lpBuffer        = dword ptr  8
.text:00412D90
.text:00412D90                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00412D90 GetCurrentDirectoryA endp
.text:00412D90
.text:00412D90 ; ---------------------------------------------------------------------------
.text:00412D96                 align 10h
.text:00412DA0
.text:00412DA0 ; =============== S U B R O U T I N E =======================================
.text:00412DA0
.text:00412DA0 ; Attributes: thunk
.text:00412DA0
.text:00412DA0 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00412DA0 DeviceIoControl proc near               ; CODE XREF: .text:0040C57C↑p
.text:00412DA0                                         ; sub_40C940+1E5↑p
.text:00412DA0
.text:00412DA0 hDevice         = dword ptr  4
.text:00412DA0 dwIoControlCode = dword ptr  8
.text:00412DA0 lpInBuffer      = dword ptr  0Ch
.text:00412DA0 nInBufferSize   = dword ptr  10h
.text:00412DA0 lpOutBuffer     = dword ptr  14h
.text:00412DA0 nOutBufferSize  = dword ptr  18h
.text:00412DA0 lpBytesReturned = dword ptr  1Ch
.text:00412DA0 lpOverlapped    = dword ptr  20h
.text:00412DA0
.text:00412DA0                 jmp     ds:__imp_DeviceIoControl
.text:00412DA0 DeviceIoControl endp
.text:00412DA0
.text:00412DA0 ; ---------------------------------------------------------------------------
.text:00412DA6                 align 10h
.text:00412DB0
.text:00412DB0 ; =============== S U B R O U T I N E =======================================
.text:00412DB0
.text:00412DB0 ; Attributes: thunk
.text:00412DB0
.text:00412DB0 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00412DB0 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040C8D3↑p
.text:00412DB0                                         ; sub_40C940+7B↑p ...
.text:00412DB0
.text:00412DB0 lpRootPathName  = dword ptr  4
.text:00412DB0 lpSectorsPerCluster= dword ptr  8
.text:00412DB0 lpBytesPerSector= dword ptr  0Ch
.text:00412DB0 lpNumberOfFreeClusters= dword ptr  10h
.text:00412DB0 lpTotalNumberOfClusters= dword ptr  14h
.text:00412DB0
.text:00412DB0                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00412DB0 GetDiskFreeSpaceA endp
.text:00412DB0
.text:00412DB0 ; ---------------------------------------------------------------------------
.text:00412DB6                 align 10h
.text:00412DC0
.text:00412DC0 ; =============== S U B R O U T I N E =======================================
.text:00412DC0
.text:00412DC0 ; Attributes: thunk
.text:00412DC0
.text:00412DC0 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00412DC0 GetFullPathNameA proc near              ; CODE XREF: sub_40D5F0+45↑p
.text:00412DC0                                         ; sub_40D5F0+ED↑p
.text:00412DC0
.text:00412DC0 lpFileName      = dword ptr  4
.text:00412DC0 nBufferLength   = dword ptr  8
.text:00412DC0 lpBuffer        = dword ptr  0Ch
.text:00412DC0 lpFilePart      = dword ptr  10h
.text:00412DC0
.text:00412DC0                 jmp     ds:__imp_GetFullPathNameA
.text:00412DC0 GetFullPathNameA endp
.text:00412DC0
.text:00412DC0 ; ---------------------------------------------------------------------------
.text:00412DC6                 align 10h
.text:00412DD0
.text:00412DD0 ; =============== S U B R O U T I N E =======================================
.text:00412DD0
.text:00412DD0 ; Attributes: thunk
.text:00412DD0
.text:00412DD0 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00412DD0 lstrcmpiA       proc near               ; CODE XREF: .text:0040DCAB↑p
.text:00412DD0                                         ; .text:0040DCC2↑p ...
.text:00412DD0
.text:00412DD0 lpString1       = dword ptr  4
.text:00412DD0 lpString2       = dword ptr  8
.text:00412DD0
.text:00412DD0                 jmp     ds:__imp_lstrcmpiA
.text:00412DD0 lstrcmpiA       endp
.text:00412DD0
.text:00412DD0 ; ---------------------------------------------------------------------------
.text:00412DD6                 align 10h
.text:00412DE0
.text:00412DE0 ; =============== S U B R O U T I N E =======================================
.text:00412DE0
.text:00412DE0 ; Attributes: thunk
.text:00412DE0
.text:00412DE0 ; DWORD __stdcall GetVersion()
.text:00412DE0 GetVersion      proc near               ; CODE XREF: .text:0040E033↑p
.text:00412DE0                 jmp     ds:__imp_GetVersion
.text:00412DE0 GetVersion      endp
.text:00412DE0
.text:00412DE0 ; ---------------------------------------------------------------------------
.text:00412DE6                 align 10h
.text:00412DF0
.text:00412DF0 ; =============== S U B R O U T I N E =======================================
.text:00412DF0
.text:00412DF0 ; Attributes: thunk
.text:00412DF0
.text:00412DF0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00412DF0 GetVersionExA   proc near               ; CODE XREF: sub_40E0C0+32↑p
.text:00412DF0                                         ; sub_40E0C0+20B↑p
.text:00412DF0
.text:00412DF0 lpVersionInformation= dword ptr  4
.text:00412DF0
.text:00412DF0                 jmp     ds:__imp_GetVersionExA
.text:00412DF0 GetVersionExA   endp
.text:00412DF0
.text:00412DF0 ; ---------------------------------------------------------------------------
.text:00412DF6                 align 10h
.text:00412E00
.text:00412E00 ; =============== S U B R O U T I N E =======================================
.text:00412E00
.text:00412E00 ; Attributes: thunk
.text:00412E00
.text:00412E00 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00412E00 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040E75F↑p
.text:00412E00                                         ; .text:0040E78E↑p ...
.text:00412E00
.text:00412E00 nBufferLength   = dword ptr  4
.text:00412E00 lpBuffer        = dword ptr  8
.text:00412E00
.text:00412E00                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00412E00 GetLogicalDriveStringsA endp
.text:00412E00
.text:00412E00 ; ---------------------------------------------------------------------------
.text:00412E06                 align 10h
.text:00412E10
.text:00412E10 ; =============== S U B R O U T I N E =======================================
.text:00412E10
.text:00412E10 ; Attributes: thunk
.text:00412E10
.text:00412E10 ; HANDLE __stdcall GetProcessHeap()
.text:00412E10 GetProcessHeap  proc near               ; CODE XREF: .text:0040E769↑p
.text:00412E10                                         ; sub_40EE40+24↑p ...
.text:00412E10                 jmp     ds:__imp_GetProcessHeap
.text:00412E10 GetProcessHeap  endp
.text:00412E10
.text:00412E10 ; ---------------------------------------------------------------------------
.text:00412E16                 align 10h
.text:00412E20
.text:00412E20 ; =============== S U B R O U T I N E =======================================
.text:00412E20
.text:00412E20 ; Attributes: thunk
.text:00412E20
.text:00412E20 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00412E20 HeapAlloc       proc near               ; CODE XREF: .text:0040E77D↑p
.text:00412E20                                         ; sub_40EE40+38↑p ...
.text:00412E20
.text:00412E20 hHeap           = dword ptr  4
.text:00412E20 dwFlags         = dword ptr  8
.text:00412E20 dwBytes         = dword ptr  0Ch
.text:00412E20
.text:00412E20                 jmp     ds:__imp_HeapAlloc
.text:00412E20 HeapAlloc       endp
.text:00412E20
.text:00412E20 ; ---------------------------------------------------------------------------
.text:00412E26                 align 10h
.text:00412E30
.text:00412E30 ; =============== S U B R O U T I N E =======================================
.text:00412E30
.text:00412E30 ; Attributes: thunk
.text:00412E30
.text:00412E30 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00412E30 HeapFree        proc near               ; CODE XREF: .text:0040EF7D↑p
.text:00412E30
.text:00412E30 hHeap           = dword ptr  4
.text:00412E30 dwFlags         = dword ptr  8
.text:00412E30 lpMem           = dword ptr  0Ch
.text:00412E30
.text:00412E30                 jmp     ds:__imp_HeapFree
.text:00412E30 HeapFree        endp
.text:00412E30
.text:00412E30 ; ---------------------------------------------------------------------------
.text:00412E36                 align 10h
.text:00412E40
.text:00412E40 ; =============== S U B R O U T I N E =======================================
.text:00412E40
.text:00412E40 ; Attributes: thunk
.text:00412E40
.text:00412E40 ; BOOL __stdcall AreFileApisANSI()
.text:00412E40 AreFileApisANSI proc near               ; CODE XREF: sub_40F020+89↑p
.text:00412E40                 jmp     ds:__imp_AreFileApisANSI
.text:00412E40 AreFileApisANSI endp
.text:00412E40
.text:00412E40 ; ---------------------------------------------------------------------------
.text:00412E46                 align 10h
.text:00412E50
.text:00412E50 ; =============== S U B R O U T I N E =======================================
.text:00412E50
.text:00412E50 ; Attributes: thunk
.text:00412E50
.text:00412E50 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00412E50 MultiByteToWideChar proc near           ; CODE XREF: sub_40F020+BD↑p
.text:00412E50
.text:00412E50 CodePage        = dword ptr  4
.text:00412E50 dwFlags         = dword ptr  8
.text:00412E50 lpMultiByteStr  = dword ptr  0Ch
.text:00412E50 cbMultiByte     = dword ptr  10h
.text:00412E50 lpWideCharStr   = dword ptr  14h
.text:00412E50 cchWideChar     = dword ptr  18h
.text:00412E50
.text:00412E50                 jmp     ds:__imp_MultiByteToWideChar
.text:00412E50 MultiByteToWideChar endp
.text:00412E50
.text:00412E50 ; ---------------------------------------------------------------------------
.text:00412E56                 align 10h
.text:00412E60
.text:00412E60 ; =============== S U B R O U T I N E =======================================
.text:00412E60
.text:00412E60 ; Attributes: thunk
.text:00412E60
.text:00412E60 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00412E60 lstrcpyA        proc near               ; CODE XREF: sub_40F020+128↑p
.text:00412E60
.text:00412E60 lpString1       = dword ptr  4
.text:00412E60 lpString2       = dword ptr  8
.text:00412E60
.text:00412E60                 jmp     ds:__imp_lstrcpyA
.text:00412E60 lstrcpyA        endp
.text:00412E60
.text:00412E60 ; ---------------------------------------------------------------------------
.text:00412E66                 align 10h
.text:00412E70
.text:00412E70 ; =============== S U B R O U T I N E =======================================
.text:00412E70
.text:00412E70 ; Attributes: thunk
.text:00412E70
.text:00412E70 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00412E70 UnlockFile      proc near               ; CODE XREF: sub_40FB30+40↑p
.text:00412E70
.text:00412E70 hFile           = dword ptr  4
.text:00412E70 dwFileOffsetLow = dword ptr  8
.text:00412E70 dwFileOffsetHigh= dword ptr  0Ch
.text:00412E70 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00412E70 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00412E70
.text:00412E70                 jmp     ds:__imp_UnlockFile
.text:00412E70 UnlockFile      endp
.text:00412E70
.text:00412E70 ; ---------------------------------------------------------------------------
.text:00412E76                 align 10h
.text:00412E80
.text:00412E80 ; =============== S U B R O U T I N E =======================================
.text:00412E80
.text:00412E80 ; Attributes: thunk
.text:00412E80
.text:00412E80 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:00412E80 GetSystemInfo   proc near               ; CODE XREF: sub_40FF30+3A↑p
.text:00412E80                                         ; sub_40FF80+3A↑p ...
.text:00412E80
.text:00412E80 lpSystemInfo    = dword ptr  4
.text:00412E80
.text:00412E80                 jmp     ds:__imp_GetSystemInfo
.text:00412E80 GetSystemInfo   endp
.text:00412E80
.text:00412E80 ; ---------------------------------------------------------------------------
.text:00412E86                 align 10h
.text:00412E90
.text:00412E90 ; =============== S U B R O U T I N E =======================================
.text:00412E90
.text:00412E90 ; Attributes: thunk
.text:00412E90
.text:00412E90 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00412E90 CreateDirectoryA proc near              ; CODE XREF: sub_410D40+22↑p
.text:00412E90
.text:00412E90 lpPathName      = dword ptr  4
.text:00412E90 lpSecurityAttributes= dword ptr  8
.text:00412E90
.text:00412E90                 jmp     ds:__imp_CreateDirectoryA
.text:00412E90 CreateDirectoryA endp
.text:00412E90
.text:00412E90 ; ---------------------------------------------------------------------------
.text:00412E96                 align 10h
.text:00412EA0
.text:00412EA0 ; =============== S U B R O U T I N E =======================================
.text:00412EA0
.text:00412EA0 ; Attributes: thunk
.text:00412EA0
.text:00412EA0 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00412EA0 GetTimeZoneInformation proc near        ; CODE XREF: sub_410E40+22↑p
.text:00412EA0
.text:00412EA0 lpTimeZoneInformation= dword ptr  4
.text:00412EA0
.text:00412EA0                 jmp     ds:__imp_GetTimeZoneInformation
.text:00412EA0 GetTimeZoneInformation endp
.text:00412EA0
.text:00412EA0 ; ---------------------------------------------------------------------------
.text:00412EA6                 align 10h
.text:00412EB0
.text:00412EB0 ; =============== S U B R O U T I N E =======================================
.text:00412EB0
.text:00412EB0 ; Attributes: thunk
.text:00412EB0
.text:00412EB0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00412EB0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_410E40+4F↑p
.text:00412EB0
.text:00412EB0 lpSystemTimeAsFileTime= dword ptr  4
.text:00412EB0
.text:00412EB0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00412EB0 GetSystemTimeAsFileTime endp
.text:00412EB0
.text:00412EB0 ; ---------------------------------------------------------------------------
.text:00412EB6                 align 10h
.text:00412EC0
.text:00412EC0 ; =============== S U B R O U T I N E =======================================
.text:00412EC0
.text:00412EC0 ; Attributes: thunk
.text:00412EC0
.text:00412EC0 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00412EC0 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040DC31↑p
.text:00412EC0
.text:00412EC0 hKey            = dword ptr  4
.text:00412EC0 lpSubKey        = dword ptr  8
.text:00412EC0 ulOptions       = dword ptr  0Ch
.text:00412EC0 samDesired      = dword ptr  10h
.text:00412EC0 phkResult       = dword ptr  14h
.text:00412EC0
.text:00412EC0                 jmp     ds:__imp_RegOpenKeyExA
.text:00412EC0 RegOpenKeyExA   endp
.text:00412EC0
.text:00412EC0 ; ---------------------------------------------------------------------------
.text:00412EC6                 align 10h
.text:00412ED0
.text:00412ED0 ; =============== S U B R O U T I N E =======================================
.text:00412ED0
.text:00412ED0 ; Attributes: thunk
.text:00412ED0
.text:00412ED0 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00412ED0 RegQueryValueExA proc near              ; CODE XREF: .text:0040DC74↑p
.text:00412ED0
.text:00412ED0 hKey            = dword ptr  4
.text:00412ED0 lpValueName     = dword ptr  8
.text:00412ED0 lpReserved      = dword ptr  0Ch
.text:00412ED0 lpType          = dword ptr  10h
.text:00412ED0 lpData          = dword ptr  14h
.text:00412ED0 lpcbData        = dword ptr  18h
.text:00412ED0
.text:00412ED0                 jmp     ds:__imp_RegQueryValueExA
.text:00412ED0 RegQueryValueExA endp
.text:00412ED0
.text:00412ED0 ; ---------------------------------------------------------------------------
.text:00412ED6                 align 10h
.text:00412EE0
.text:00412EE0 ; =============== S U B R O U T I N E =======================================
.text:00412EE0
.text:00412EE0 ; Attributes: thunk
.text:00412EE0
.text:00412EE0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00412EE0 RegCloseKey     proc near               ; CODE XREF: .text:0040DC98↑p
.text:00412EE0
.text:00412EE0 hKey            = dword ptr  4
.text:00412EE0
.text:00412EE0                 jmp     ds:__imp_RegCloseKey
.text:00412EE0 RegCloseKey     endp
.text:00412EE0
.text:00412EE0 ; ---------------------------------------------------------------------------
.text:00412EE6                 align 10h
.text:00412EF0
.text:00412EF0 ; =============== S U B R O U T I N E =======================================
.text:00412EF0
.text:00412EF0 ; Attributes: thunk
.text:00412EF0
.text:00412EF0 ; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
.text:00412EF0 GetUserNameA    proc near               ; CODE XREF: sub_40FEE0+1E↑p
.text:00412EF0
.text:00412EF0 lpBuffer        = dword ptr  4
.text:00412EF0 pcbBuffer       = dword ptr  8
.text:00412EF0
.text:00412EF0                 jmp     ds:__imp_GetUserNameA
.text:00412EF0 GetUserNameA    endp
.text:00412EF0
.text:00412EF0 ; ---------------------------------------------------------------------------
.text:00412EF6                 db 2 dup(90h)
.text:00412EF8                 dd 2 dup(0)
.text:00412F00                 dd 21400h, 0
.text:00412F08                 dd 0C0h, 46000000h
.text:00412F10 ; const IID rclsid
.text:00412F10 rclsid          dd 21401h               ; Data1
.text:00412F10                                         ; DATA XREF: sub_40F020+4B↑o
.text:00412F10                 dw 0                    ; Data2
.text:00412F10                 dw 0                    ; Data3
.text:00412F10                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00412F20                 dd 214A0h, 0
.text:00412F28                 dd 0C0h, 46000000h, 214A1h, 0
.text:00412F38                 dd 0C0h, 46000000h, 214D0h, 0
.text:00412F48                 dd 0C0h, 46000000h, 214D1h, 0
.text:00412F58                 dd 0C0h, 46000000h, 214D2h, 0
.text:00412F68                 dd 0C0h, 46000000h, 214E1h, 0
.text:00412F78                 dd 0C0h, 46000000h, 214E2h, 0
.text:00412F88                 dd 0C0h, 46000000h, 214E3h, 0
.text:00412F98                 dd 0C0h, 46000000h, 214E4h, 0
.text:00412FA8                 dd 0C0h, 46000000h, 21500h, 0
.text:00412FB8                 dd 0C0h, 46000000h, 214E5h, 0
.text:00412FC8                 dd 0C0h, 46000000h, 214E6h, 0
.text:00412FD8                 dd 0C0h, 46000000h, 214E8h, 0
.text:00412FE8                 dd 0C0h, 46000000h, 214E9h, 0
.text:00412FF8                 dd 0C0h, 46000000h, 214EAh, 0
.text:00413008                 dd 0C0h, 46000000h, 214EBh, 0
.text:00413018                 dd 0C0h, 46000000h
.text:00413020 ; const IID riid
.text:00413020 riid            dd 214EEh               ; Data1
.text:00413020                                         ; DATA XREF: sub_40F020+2B↑o
.text:00413020                 dw 0                    ; Data2
.text:00413020                 dw 0                    ; Data3
.text:00413020                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00413030                 dd 214EFh, 0
.text:00413038                 dd 0C0h, 46000000h, 214F0h, 0
.text:00413048                 dd 0C0h, 46000000h, 214F1h, 0
.text:00413058                 dd 0C0h, 46000000h, 214F2h, 0
.text:00413068                 dd 0C0h, 46000000h, 214F3h, 0
.text:00413078                 dd 0C0h, 46000000h, 214F4h, 0
.text:00413088                 dd 0C0h, 46000000h, 214F5h, 0
.text:00413098                 dd 0C0h, 46000000h, 214F6h, 0
.text:004130A8                 dd 0C0h, 46000000h, 214F7h, 0
.text:004130B8                 dd 0C0h, 46000000h, 214F8h, 0
.text:004130C8                 dd 0C0h, 46000000h, 214F9h, 0
.text:004130D8                 dd 0C0h, 46000000h, 214FAh, 0
.text:004130E8                 dd 0C0h, 46000000h, 214FBh, 0
.text:004130F8                 dd 0C0h, 46000000h, 214FCh, 0
.text:00413108                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00413108                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00413108                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00413108                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00413108                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00413108                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00413108                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00413108                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00413108                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00413108                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:004131D8                 dd 0C0h, 46000000h, 2DF05h, 0
.text:004131E8                 dd 0C0h, 46000000h, 2DF06h, 0
.text:004131F8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00413208                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00413218                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00413218                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00413218                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00413218                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00413218                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00413218                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00413218                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:004132A0 dword_4132A0    dd 0FFFFFFFFh           ; DATA XREF: .text:004124C9↑r
.text:004132A0                                         ; .text:loc_4124F0↑r ...
.text:004132A4 dword_4132A4    dd 0                    ; DATA XREF: .text:loc_4124FC↑r
.text:004132A4                                         ; sub_412520:loc_41256D↑r
.text:004132A8                 dd 0FFFFFFFFh
.text:004132AC dword_4132AC    dd 55h dup(0)           ; DATA XREF: .data:off_4140D4↓o
.text:00413400                 dd 300h dup(?)
.text:00413400 _text           ends
.text:00413400
.data:00414000 ; Section 2. (virtual address 00014000)
.data:00414000 ; Virtual size                  : 000000F0 (    240.)
.data:00414000 ; Section size in file          : 00000200 (    512.)
.data:00414000 ; Offset to raw data for section: 00012800
.data:00414000 ; Flags C0000040: Data Readable Writable
.data:00414000 ; Alignment     : default
.data:00414000 ; ===========================================================================
.data:00414000
.data:00414000 ; Segment type: Pure data
.data:00414000 ; Segment permissions: Read/Write
.data:00414000 _data           segment para public 'DATA' use32
.data:00414000                 assume cs:_data
.data:00414000                 ;org 414000h
.data:00414000 dword_414000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00414000                                         ; sub_401080+CC↑r
.data:00414004 dword_414004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00414004                                         ; sub_401080+D4↑r
.data:00414008                 align 10h
.data:00414010 dword_414010    dd 1                    ; DATA XREF: sub_401BF0:loc_401F6E↑r
.data:00414010                                         ; sub_401BF0+3B0↑w ...
.data:00414014 dword_414014    dd 1                    ; DATA XREF: sub_405B50+11↑r
.data:00414014                                         ; .text:00405BF1↑r
.data:00414018 dword_414018    dd 3Fh                  ; DATA XREF: sub_405B50+7D↑w
.data:00414018                                         ; .text:00405C5D↑w
.data:0041401C                 align 10h
.data:00414020 ; char *Buffer
.data:00414020 Buffer          dd offset aCopyrightC2005
.data:00414020                                         ; DATA XREF: sub_406080+DC↑r
.data:00414020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00414024                 align 10h
.data:00414030 ; int Code
.data:00414030 Code            dd 1                    ; DATA XREF: sub_406400+6D↑r
.data:00414030                                         ; sub_406400+9A↑r ...
.data:00414034                 align 10h
.data:00414040 dword_414040    dd 1                    ; DATA XREF: sub_4090F0+22↑r
.data:00414040                                         ; sub_4090F0+65↑r ...
.data:00414044 dword_414044    dd 100h                 ; DATA XREF: sub_4090F0+3F↑o
.data:00414044                                         ; sub_4090F0+1A2↑r ...
.data:00414048 off_414048      dd offset unk_415050    ; DATA XREF: sub_4090F0+1AA↑r
.data:0041404C ; void *off_41404C
.data:0041404C off_41404C      dd offset dword_414044  ; DATA XREF: sub_4090F0+39↑r
.data:0041404C                                         ; sub_4090F0+60↑w ...
.data:00414050 dword_414050    dd 200h                 ; DATA XREF: sub_409C00+2ED↑r
.data:00414050                                         ; sub_409C00+2F8↑r ...
.data:00414054 ; char *off_414054
.data:00414054 off_414054      dd offset aComExeBatCmd ; DATA XREF: sub_40A0D0+3D3↑r
.data:00414054                                         ; sub_40A0D0+400↑r ...
.data:00414054                                         ; ".com;.exe;.bat;.cmd"
.data:00414058                 align 10h
.data:00414060 byte_414060     db 41h                  ; DATA XREF: sub_40C010+6B↑w
.data:00414060                                         ; sub_40C010:loc_40C124↑r
.data:00414061                 align 10h
.data:00414070 dword_414070    dd 1                    ; DATA XREF: .text:loc_40DAE7↑r
.data:00414070                                         ; sub_40E0C0+202↑w
.data:00414074                 align 10h
.data:00414080 off_414080      dd offset aNotset       ; DATA XREF: .text:0040E33A↑r
.data:00414080                                         ; .text:0040EF82↑r
.data:00414080                                         ; "notset"
.data:00414084 off_414084      dd offset aNotset       ; DATA XREF: .text:0040E352↑r
.data:00414084                                         ; .text:0040E374↑r ...
.data:00414084                                         ; "notset"
.data:00414088                 align 10h
.data:00414090 ; char *Src
.data:00414090 Src             dd offset byte_40FCD0   ; DATA XREF: sub_40FCF0+168↑r
.data:00414094 off_414094      dd offset byte_40FCD1   ; DATA XREF: sub_40FCF0+1DA↑r
.data:00414098                 align 10h
.data:004140A0 dword_4140A0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004140A4                 align 10h
.data:004140B0 ; int Mode
.data:004140B0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004140B0                                         ; sub_401080+80↑r ...
.data:004140B4                 align 10h
.data:004140C0 dword_4140C0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004140C0                                         ; sub_401080+BA↑r
.data:004140C4                 align 10h
.data:004140D0 dword_4140D0    dd 0                    ; DATA XREF: sub_412520+9↑r
.data:004140D0                                         ; sub_412520+1D↑w
.data:004140D4 off_4140D4      dd offset dword_4132AC  ; DATA XREF: sub_412490+6↑r
.data:004140D4                                         ; sub_412490+17↑r ...
.data:004140D8                 align 1000h
.data:004140D8 _data           ends
.data:004140D8
.bss:00415000 ; Section 3. (virtual address 00015000)
.bss:00415000 ; Virtual size                  : 00000B00 (   2816.)
.bss:00415000 ; Section size in file          : 00000000 (      0.)
.bss:00415000 ; Offset to raw data for section: 00000000
.bss:00415000 ; Flags C0000080: Bss Readable Writable
.bss:00415000 ; Alignment     : default
.bss:00415000 ; ===========================================================================
.bss:00415000
.bss:00415000 ; Segment type: Uninitialized
.bss:00415000 ; Segment permissions: Read/Write
.bss:00415000 _bss            segment para public 'BSS' use32
.bss:00415000                 assume cs:_bss
.bss:00415000                 ;org 415000h
.bss:00415000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00415000 ; char *dword_415000
.bss:00415000 dword_415000    dd ?                    ; DATA XREF: sub_401BF0+324↑w
.bss:00415000                                         ; sub_401BF0+384↑r ...
.bss:00415004                 align 10h
.bss:00415010 dword_415010    dd ?                    ; DATA XREF: sub_405B50+9↑o
.bss:00415010                                         ; sub_405B50+17↑w ...
.bss:00415014 dword_415014    dd ?                    ; DATA XREF: sub_405B50+21↑w
.bss:00415014                                         ; .text:00405C09↑w
.bss:00415018 dword_415018    dd ?                    ; DATA XREF: sub_405B50+77↑r
.bss:00415018                                         ; .text:00405C57↑r
.bss:0041501C dword_41501C    dd ?                    ; DATA XREF: sub_405B50+6B↑r
.bss:0041501C                                         ; .text:00405C4B↑r
.bss:00415020                 align 40h
.bss:00415040 ; char *dword_415040
.bss:00415040 dword_415040    dd ?                    ; DATA XREF: .text:004063D4↑w
.bss:00415040                                         ; sub_406400+58↑r
.bss:00415044                 align 10h
.bss:00415050 unk_415050      db    ? ;               ; DATA XREF: sub_4090F0+100↑o
.bss:00415050                                         ; .data:off_414048↑o
.bss:00415051                 db    ? ;
.bss:00415052                 db    ? ;
.bss:00415053                 db    ? ;
.bss:00415054                 db    ? ;
.bss:00415055                 db    ? ;
.bss:00415056                 db    ? ;
.bss:00415057                 db    ? ;
.bss:00415058                 db    ? ;
.bss:00415059                 db    ? ;
.bss:0041505A                 db    ? ;
.bss:0041505B                 db    ? ;
.bss:0041505C                 db    ? ;
.bss:0041505D                 db    ? ;
.bss:0041505E                 db    ? ;
.bss:0041505F                 db    ? ;
.bss:00415060                 db    ? ;
.bss:00415061                 db    ? ;
.bss:00415062                 db    ? ;
.bss:00415063                 db    ? ;
.bss:00415064                 db    ? ;
.bss:00415065                 db    ? ;
.bss:00415066                 db    ? ;
.bss:00415067                 db    ? ;
.bss:00415068                 db    ? ;
.bss:00415069                 db    ? ;
.bss:0041506A                 db    ? ;
.bss:0041506B                 db    ? ;
.bss:0041506C                 db    ? ;
.bss:0041506D                 db    ? ;
.bss:0041506E                 db    ? ;
.bss:0041506F                 db    ? ;
.bss:00415070                 db    ? ;
.bss:00415071                 db    ? ;
.bss:00415072                 db    ? ;
.bss:00415073                 db    ? ;
.bss:00415074                 db    ? ;
.bss:00415075                 db    ? ;
.bss:00415076                 db    ? ;
.bss:00415077                 db    ? ;
.bss:00415078                 db    ? ;
.bss:00415079                 db    ? ;
.bss:0041507A                 db    ? ;
.bss:0041507B                 db    ? ;
.bss:0041507C                 db    ? ;
.bss:0041507D                 db    ? ;
.bss:0041507E                 db    ? ;
.bss:0041507F                 db    ? ;
.bss:00415080                 db    ? ;
.bss:00415081                 db    ? ;
.bss:00415082                 db    ? ;
.bss:00415083                 db    ? ;
.bss:00415084                 db    ? ;
.bss:00415085                 db    ? ;
.bss:00415086                 db    ? ;
.bss:00415087                 db    ? ;
.bss:00415088                 db    ? ;
.bss:00415089                 db    ? ;
.bss:0041508A                 db    ? ;
.bss:0041508B                 db    ? ;
.bss:0041508C                 db    ? ;
.bss:0041508D                 db    ? ;
.bss:0041508E                 db    ? ;
.bss:0041508F                 db    ? ;
.bss:00415090                 db    ? ;
.bss:00415091                 db    ? ;
.bss:00415092                 db    ? ;
.bss:00415093                 db    ? ;
.bss:00415094                 db    ? ;
.bss:00415095                 db    ? ;
.bss:00415096                 db    ? ;
.bss:00415097                 db    ? ;
.bss:00415098                 db    ? ;
.bss:00415099                 db    ? ;
.bss:0041509A                 db    ? ;
.bss:0041509B                 db    ? ;
.bss:0041509C                 db    ? ;
.bss:0041509D                 db    ? ;
.bss:0041509E                 db    ? ;
.bss:0041509F                 db    ? ;
.bss:004150A0                 db    ? ;
.bss:004150A1                 db    ? ;
.bss:004150A2                 db    ? ;
.bss:004150A3                 db    ? ;
.bss:004150A4                 db    ? ;
.bss:004150A5                 db    ? ;
.bss:004150A6                 db    ? ;
.bss:004150A7                 db    ? ;
.bss:004150A8                 db    ? ;
.bss:004150A9                 db    ? ;
.bss:004150AA                 db    ? ;
.bss:004150AB                 db    ? ;
.bss:004150AC                 db    ? ;
.bss:004150AD                 db    ? ;
.bss:004150AE                 db    ? ;
.bss:004150AF                 db    ? ;
.bss:004150B0                 db    ? ;
.bss:004150B1                 db    ? ;
.bss:004150B2                 db    ? ;
.bss:004150B3                 db    ? ;
.bss:004150B4                 db    ? ;
.bss:004150B5                 db    ? ;
.bss:004150B6                 db    ? ;
.bss:004150B7                 db    ? ;
.bss:004150B8                 db    ? ;
.bss:004150B9                 db    ? ;
.bss:004150BA                 db    ? ;
.bss:004150BB                 db    ? ;
.bss:004150BC                 db    ? ;
.bss:004150BD                 db    ? ;
.bss:004150BE                 db    ? ;
.bss:004150BF                 db    ? ;
.bss:004150C0                 db    ? ;
.bss:004150C1                 db    ? ;
.bss:004150C2                 db    ? ;
.bss:004150C3                 db    ? ;
.bss:004150C4                 db    ? ;
.bss:004150C5                 db    ? ;
.bss:004150C6                 db    ? ;
.bss:004150C7                 db    ? ;
.bss:004150C8                 db    ? ;
.bss:004150C9                 db    ? ;
.bss:004150CA                 db    ? ;
.bss:004150CB                 db    ? ;
.bss:004150CC                 db    ? ;
.bss:004150CD                 db    ? ;
.bss:004150CE                 db    ? ;
.bss:004150CF                 db    ? ;
.bss:004150D0                 db    ? ;
.bss:004150D1                 db    ? ;
.bss:004150D2                 db    ? ;
.bss:004150D3                 db    ? ;
.bss:004150D4                 db    ? ;
.bss:004150D5                 db    ? ;
.bss:004150D6                 db    ? ;
.bss:004150D7                 db    ? ;
.bss:004150D8                 db    ? ;
.bss:004150D9                 db    ? ;
.bss:004150DA                 db    ? ;
.bss:004150DB                 db    ? ;
.bss:004150DC                 db    ? ;
.bss:004150DD                 db    ? ;
.bss:004150DE                 db    ? ;
.bss:004150DF                 db    ? ;
.bss:004150E0                 db    ? ;
.bss:004150E1                 db    ? ;
.bss:004150E2                 db    ? ;
.bss:004150E3                 db    ? ;
.bss:004150E4                 db    ? ;
.bss:004150E5                 db    ? ;
.bss:004150E6                 db    ? ;
.bss:004150E7                 db    ? ;
.bss:004150E8                 db    ? ;
.bss:004150E9                 db    ? ;
.bss:004150EA                 db    ? ;
.bss:004150EB                 db    ? ;
.bss:004150EC                 db    ? ;
.bss:004150ED                 db    ? ;
.bss:004150EE                 db    ? ;
.bss:004150EF                 db    ? ;
.bss:004150F0                 db    ? ;
.bss:004150F1                 db    ? ;
.bss:004150F2                 db    ? ;
.bss:004150F3                 db    ? ;
.bss:004150F4                 db    ? ;
.bss:004150F5                 db    ? ;
.bss:004150F6                 db    ? ;
.bss:004150F7                 db    ? ;
.bss:004150F8                 db    ? ;
.bss:004150F9                 db    ? ;
.bss:004150FA                 db    ? ;
.bss:004150FB                 db    ? ;
.bss:004150FC                 db    ? ;
.bss:004150FD                 db    ? ;
.bss:004150FE                 db    ? ;
.bss:004150FF                 db    ? ;
.bss:00415100                 db    ? ;
.bss:00415101                 db    ? ;
.bss:00415102                 db    ? ;
.bss:00415103                 db    ? ;
.bss:00415104                 db    ? ;
.bss:00415105                 db    ? ;
.bss:00415106                 db    ? ;
.bss:00415107                 db    ? ;
.bss:00415108                 db    ? ;
.bss:00415109                 db    ? ;
.bss:0041510A                 db    ? ;
.bss:0041510B                 db    ? ;
.bss:0041510C                 db    ? ;
.bss:0041510D                 db    ? ;
.bss:0041510E                 db    ? ;
.bss:0041510F                 db    ? ;
.bss:00415110                 db    ? ;
.bss:00415111                 db    ? ;
.bss:00415112                 db    ? ;
.bss:00415113                 db    ? ;
.bss:00415114                 db    ? ;
.bss:00415115                 db    ? ;
.bss:00415116                 db    ? ;
.bss:00415117                 db    ? ;
.bss:00415118                 db    ? ;
.bss:00415119                 db    ? ;
.bss:0041511A                 db    ? ;
.bss:0041511B                 db    ? ;
.bss:0041511C                 db    ? ;
.bss:0041511D                 db    ? ;
.bss:0041511E                 db    ? ;
.bss:0041511F                 db    ? ;
.bss:00415120                 db    ? ;
.bss:00415121                 db    ? ;
.bss:00415122                 db    ? ;
.bss:00415123                 db    ? ;
.bss:00415124                 db    ? ;
.bss:00415125                 db    ? ;
.bss:00415126                 db    ? ;
.bss:00415127                 db    ? ;
.bss:00415128                 db    ? ;
.bss:00415129                 db    ? ;
.bss:0041512A                 db    ? ;
.bss:0041512B                 db    ? ;
.bss:0041512C                 db    ? ;
.bss:0041512D                 db    ? ;
.bss:0041512E                 db    ? ;
.bss:0041512F                 db    ? ;
.bss:00415130                 db    ? ;
.bss:00415131                 db    ? ;
.bss:00415132                 db    ? ;
.bss:00415133                 db    ? ;
.bss:00415134                 db    ? ;
.bss:00415135                 db    ? ;
.bss:00415136                 db    ? ;
.bss:00415137                 db    ? ;
.bss:00415138                 db    ? ;
.bss:00415139                 db    ? ;
.bss:0041513A                 db    ? ;
.bss:0041513B                 db    ? ;
.bss:0041513C                 db    ? ;
.bss:0041513D                 db    ? ;
.bss:0041513E                 db    ? ;
.bss:0041513F                 db    ? ;
.bss:00415140                 db    ? ;
.bss:00415141                 db    ? ;
.bss:00415142                 db    ? ;
.bss:00415143                 db    ? ;
.bss:00415144                 db    ? ;
.bss:00415145                 db    ? ;
.bss:00415146                 db    ? ;
.bss:00415147                 db    ? ;
.bss:00415148                 db    ? ;
.bss:00415149                 db    ? ;
.bss:0041514A                 db    ? ;
.bss:0041514B                 db    ? ;
.bss:0041514C                 db    ? ;
.bss:0041514D                 db    ? ;
.bss:0041514E                 db    ? ;
.bss:0041514F                 db    ? ;
.bss:00415150 dword_415150    dd ?                    ; DATA XREF: .text:loc_408A81↑o
.bss:00415150                                         ; .text:loc_408AA0↑o ...
.bss:00415154 dword_415154    dd ?                    ; DATA XREF: .text:loc_408B20↑o
.bss:00415154                                         ; .text:00408FA8↑r ...
.bss:00415158 dword_415158    dd ?                    ; DATA XREF: .text:00408FA2↑r
.bss:00415158                                         ; sub_409050+2C↑r
.bss:0041515C dword_41515C    dd ?                    ; DATA XREF: .text:00408F96↑r
.bss:0041515C                                         ; sub_409050+22↑r
.bss:00415160 dword_415160    dd ?                    ; DATA XREF: .text:00408FB2↑r
.bss:00415160                                         ; sub_409050+36↑r
.bss:00415164 dword_415164    dd ?                    ; DATA XREF: .text:00408FC2↑r
.bss:00415164                                         ; sub_409050+4E↑r
.bss:00415168 dword_415168    dd ?                    ; DATA XREF: .text:00408FDF↑r
.bss:00415168                                         ; sub_409050+62↑r
.bss:0041516C dword_41516C    dd ?                    ; DATA XREF: .text:00408FD5↑r
.bss:0041516C                                         ; sub_409050+70↑r
.bss:00415170 dword_415170    dd ?                    ; DATA XREF: .text:00408FB8↑r
.bss:00415170                                         ; sub_409050+7A↑r
.bss:00415174                 align 10h
.bss:00415180 ; char *Str1
.bss:00415180 Str1            dd ?                    ; DATA XREF: sub_409414:loc_40944D↑w
.bss:00415180                                         ; sub_409414:loc_409580↑r
.bss:00415184                 align 10h
.bss:00415190 dword_415190    dd ?                    ; DATA XREF: sub_409414+2D↑r
.bss:00415190                                         ; sub_409414+3F↑w
.bss:00415194                 align 10h
.bss:004151A0 dword_4151A0    dd ?                    ; DATA XREF: sub_40A0D0+100↑r
.bss:004151A0                                         ; sub_40A0D0+308↑w
.bss:004151A4                 align 10h
.bss:004151B0 ; char *Str
.bss:004151B0 Str             dd ?                    ; DATA XREF: sub_40A0D0:loc_40A434↑r
.bss:004151B0                                         ; sub_40A0D0+3B6↑r ...
.bss:004151B4                 align 10h
.bss:004151C0 dword_4151C0    dd ?                    ; DATA XREF: sub_40C010+1C↑r
.bss:004151C0                                         ; sub_40C010+104↑w
.bss:004151C4                 align 10h
.bss:004151D0 dword_4151D0    dd ?                    ; DATA XREF: sub_40C010+B↑r
.bss:004151D0                                         ; sub_40C010+71↑w
.bss:004151D4                 align 10h
.bss:004151E0 dword_4151E0    dd ?                    ; DATA XREF: sub_40C010+85↑r
.bss:004151E0                                         ; sub_40C010+B9↑w
.bss:004151E4 dword_4151E4    dd ?                    ; DATA XREF: sub_40C010+C4↑w
.bss:004151E8 dword_4151E8    dd ?                    ; DATA XREF: sub_40C010+2E↑o
.bss:004151E8                                         ; sub_40C010+CF↑w
.bss:004151EC dword_4151EC    dd ?                    ; DATA XREF: sub_40C010+DA↑w
.bss:004151F0                 db    ? ;
.bss:004151F1                 db    ? ;
.bss:004151F2                 db    ? ;
.bss:004151F3                 db    ? ;
.bss:004151F4                 db    ? ;
.bss:004151F5                 db    ? ;
.bss:004151F6                 db    ? ;
.bss:004151F7                 db    ? ;
.bss:004151F8                 db    ? ;
.bss:004151F9                 db    ? ;
.bss:004151FA                 db    ? ;
.bss:004151FB                 db    ? ;
.bss:004151FC                 db    ? ;
.bss:004151FD                 db    ? ;
.bss:004151FE                 db    ? ;
.bss:004151FF                 db    ? ;
.bss:00415200                 db    ? ;
.bss:00415201                 db    ? ;
.bss:00415202                 db    ? ;
.bss:00415203                 db    ? ;
.bss:00415204                 db    ? ;
.bss:00415205                 db    ? ;
.bss:00415206                 db    ? ;
.bss:00415207                 db    ? ;
.bss:00415208                 db    ? ;
.bss:00415209                 db    ? ;
.bss:0041520A                 db    ? ;
.bss:0041520B                 db    ? ;
.bss:0041520C                 db    ? ;
.bss:0041520D                 db    ? ;
.bss:0041520E                 db    ? ;
.bss:0041520F                 db    ? ;
.bss:00415210                 db    ? ;
.bss:00415211                 db    ? ;
.bss:00415212                 db    ? ;
.bss:00415213                 db    ? ;
.bss:00415214                 db    ? ;
.bss:00415215                 db    ? ;
.bss:00415216                 db    ? ;
.bss:00415217                 db    ? ;
.bss:00415218                 db    ? ;
.bss:00415219                 db    ? ;
.bss:0041521A                 db    ? ;
.bss:0041521B                 db    ? ;
.bss:0041521C                 db    ? ;
.bss:0041521D                 db    ? ;
.bss:0041521E                 db    ? ;
.bss:0041521F                 db    ? ;
.bss:00415220                 db    ? ;
.bss:00415221                 db    ? ;
.bss:00415222                 db    ? ;
.bss:00415223                 db    ? ;
.bss:00415224                 db    ? ;
.bss:00415225                 db    ? ;
.bss:00415226                 db    ? ;
.bss:00415227                 db    ? ;
.bss:00415228                 db    ? ;
.bss:00415229                 db    ? ;
.bss:0041522A                 db    ? ;
.bss:0041522B                 db    ? ;
.bss:0041522C                 db    ? ;
.bss:0041522D                 db    ? ;
.bss:0041522E                 db    ? ;
.bss:0041522F                 db    ? ;
.bss:00415230                 db    ? ;
.bss:00415231                 db    ? ;
.bss:00415232                 db    ? ;
.bss:00415233                 db    ? ;
.bss:00415234                 db    ? ;
.bss:00415235                 db    ? ;
.bss:00415236                 db    ? ;
.bss:00415237                 db    ? ;
.bss:00415238                 db    ? ;
.bss:00415239                 db    ? ;
.bss:0041523A                 db    ? ;
.bss:0041523B                 db    ? ;
.bss:0041523C                 db    ? ;
.bss:0041523D                 db    ? ;
.bss:0041523E                 db    ? ;
.bss:0041523F                 db    ? ;
.bss:00415240                 db    ? ;
.bss:00415241                 db    ? ;
.bss:00415242                 db    ? ;
.bss:00415243                 db    ? ;
.bss:00415244                 db    ? ;
.bss:00415245                 db    ? ;
.bss:00415246                 db    ? ;
.bss:00415247                 db    ? ;
.bss:00415248                 db    ? ;
.bss:00415249                 db    ? ;
.bss:0041524A                 db    ? ;
.bss:0041524B                 db    ? ;
.bss:0041524C                 db    ? ;
.bss:0041524D                 db    ? ;
.bss:0041524E                 db    ? ;
.bss:0041524F                 db    ? ;
.bss:00415250                 db    ? ;
.bss:00415251                 db    ? ;
.bss:00415252                 db    ? ;
.bss:00415253                 db    ? ;
.bss:00415254                 db    ? ;
.bss:00415255                 db    ? ;
.bss:00415256                 db    ? ;
.bss:00415257                 db    ? ;
.bss:00415258                 db    ? ;
.bss:00415259                 db    ? ;
.bss:0041525A                 db    ? ;
.bss:0041525B                 db    ? ;
.bss:0041525C                 db    ? ;
.bss:0041525D                 db    ? ;
.bss:0041525E                 db    ? ;
.bss:0041525F                 db    ? ;
.bss:00415260                 db    ? ;
.bss:00415261                 db    ? ;
.bss:00415262                 db    ? ;
.bss:00415263                 db    ? ;
.bss:00415264                 db    ? ;
.bss:00415265                 db    ? ;
.bss:00415266                 db    ? ;
.bss:00415267                 db    ? ;
.bss:00415268                 db    ? ;
.bss:00415269                 db    ? ;
.bss:0041526A                 db    ? ;
.bss:0041526B                 db    ? ;
.bss:0041526C                 db    ? ;
.bss:0041526D                 db    ? ;
.bss:0041526E                 db    ? ;
.bss:0041526F                 db    ? ;
.bss:00415270                 db    ? ;
.bss:00415271                 db    ? ;
.bss:00415272                 db    ? ;
.bss:00415273                 db    ? ;
.bss:00415274                 db    ? ;
.bss:00415275                 db    ? ;
.bss:00415276                 db    ? ;
.bss:00415277                 db    ? ;
.bss:00415278                 db    ? ;
.bss:00415279                 db    ? ;
.bss:0041527A                 db    ? ;
.bss:0041527B                 db    ? ;
.bss:0041527C                 db    ? ;
.bss:0041527D                 db    ? ;
.bss:0041527E                 db    ? ;
.bss:0041527F                 db    ? ;
.bss:00415280                 db    ? ;
.bss:00415281                 db    ? ;
.bss:00415282                 db    ? ;
.bss:00415283                 db    ? ;
.bss:00415284                 db    ? ;
.bss:00415285                 db    ? ;
.bss:00415286                 db    ? ;
.bss:00415287                 db    ? ;
.bss:00415288                 db    ? ;
.bss:00415289                 db    ? ;
.bss:0041528A                 db    ? ;
.bss:0041528B                 db    ? ;
.bss:0041528C                 db    ? ;
.bss:0041528D                 db    ? ;
.bss:0041528E                 db    ? ;
.bss:0041528F                 db    ? ;
.bss:00415290                 db    ? ;
.bss:00415291                 db    ? ;
.bss:00415292                 db    ? ;
.bss:00415293                 db    ? ;
.bss:00415294                 db    ? ;
.bss:00415295                 db    ? ;
.bss:00415296                 db    ? ;
.bss:00415297                 db    ? ;
.bss:00415298                 db    ? ;
.bss:00415299                 db    ? ;
.bss:0041529A                 db    ? ;
.bss:0041529B                 db    ? ;
.bss:0041529C                 db    ? ;
.bss:0041529D                 db    ? ;
.bss:0041529E                 db    ? ;
.bss:0041529F                 db    ? ;
.bss:004152A0                 db    ? ;
.bss:004152A1                 db    ? ;
.bss:004152A2                 db    ? ;
.bss:004152A3                 db    ? ;
.bss:004152A4                 db    ? ;
.bss:004152A5                 db    ? ;
.bss:004152A6                 db    ? ;
.bss:004152A7                 db    ? ;
.bss:004152A8                 db    ? ;
.bss:004152A9                 db    ? ;
.bss:004152AA                 db    ? ;
.bss:004152AB                 db    ? ;
.bss:004152AC                 db    ? ;
.bss:004152AD                 db    ? ;
.bss:004152AE                 db    ? ;
.bss:004152AF                 db    ? ;
.bss:004152B0                 db    ? ;
.bss:004152B1                 db    ? ;
.bss:004152B2                 db    ? ;
.bss:004152B3                 db    ? ;
.bss:004152B4                 db    ? ;
.bss:004152B5                 db    ? ;
.bss:004152B6                 db    ? ;
.bss:004152B7                 db    ? ;
.bss:004152B8                 db    ? ;
.bss:004152B9                 db    ? ;
.bss:004152BA                 db    ? ;
.bss:004152BB                 db    ? ;
.bss:004152BC                 db    ? ;
.bss:004152BD                 db    ? ;
.bss:004152BE                 db    ? ;
.bss:004152BF                 db    ? ;
.bss:004152C0                 db    ? ;
.bss:004152C1                 db    ? ;
.bss:004152C2                 db    ? ;
.bss:004152C3                 db    ? ;
.bss:004152C4                 db    ? ;
.bss:004152C5                 db    ? ;
.bss:004152C6                 db    ? ;
.bss:004152C7                 db    ? ;
.bss:004152C8                 db    ? ;
.bss:004152C9                 db    ? ;
.bss:004152CA                 db    ? ;
.bss:004152CB                 db    ? ;
.bss:004152CC                 db    ? ;
.bss:004152CD                 db    ? ;
.bss:004152CE                 db    ? ;
.bss:004152CF                 db    ? ;
.bss:004152D0                 db    ? ;
.bss:004152D1                 db    ? ;
.bss:004152D2                 db    ? ;
.bss:004152D3                 db    ? ;
.bss:004152D4                 db    ? ;
.bss:004152D5                 db    ? ;
.bss:004152D6                 db    ? ;
.bss:004152D7                 db    ? ;
.bss:004152D8                 db    ? ;
.bss:004152D9                 db    ? ;
.bss:004152DA                 db    ? ;
.bss:004152DB                 db    ? ;
.bss:004152DC                 db    ? ;
.bss:004152DD                 db    ? ;
.bss:004152DE                 db    ? ;
.bss:004152DF                 db    ? ;
.bss:004152E0                 db    ? ;
.bss:004152E1                 db    ? ;
.bss:004152E2                 db    ? ;
.bss:004152E3                 db    ? ;
.bss:004152E4                 db    ? ;
.bss:004152E5                 db    ? ;
.bss:004152E6                 db    ? ;
.bss:004152E7                 db    ? ;
.bss:004152E8                 db    ? ;
.bss:004152E9                 db    ? ;
.bss:004152EA                 db    ? ;
.bss:004152EB                 db    ? ;
.bss:004152EC                 db    ? ;
.bss:004152ED                 db    ? ;
.bss:004152EE                 db    ? ;
.bss:004152EF                 db    ? ;
.bss:004152F0                 db    ? ;
.bss:004152F1                 db    ? ;
.bss:004152F2                 db    ? ;
.bss:004152F3                 db    ? ;
.bss:004152F4                 db    ? ;
.bss:004152F5                 db    ? ;
.bss:004152F6                 db    ? ;
.bss:004152F7                 db    ? ;
.bss:004152F8                 db    ? ;
.bss:004152F9                 db    ? ;
.bss:004152FA                 db    ? ;
.bss:004152FB                 db    ? ;
.bss:004152FC                 db    ? ;
.bss:004152FD                 db    ? ;
.bss:004152FE                 db    ? ;
.bss:004152FF                 db    ? ;
.bss:00415300                 db    ? ;
.bss:00415301                 db    ? ;
.bss:00415302                 db    ? ;
.bss:00415303                 db    ? ;
.bss:00415304                 db    ? ;
.bss:00415305                 db    ? ;
.bss:00415306                 db    ? ;
.bss:00415307                 db    ? ;
.bss:00415308                 db    ? ;
.bss:00415309                 db    ? ;
.bss:0041530A                 db    ? ;
.bss:0041530B                 db    ? ;
.bss:0041530C                 db    ? ;
.bss:0041530D                 db    ? ;
.bss:0041530E                 db    ? ;
.bss:0041530F                 db    ? ;
.bss:00415310                 db    ? ;
.bss:00415311                 db    ? ;
.bss:00415312                 db    ? ;
.bss:00415313                 db    ? ;
.bss:00415314                 db    ? ;
.bss:00415315                 db    ? ;
.bss:00415316                 db    ? ;
.bss:00415317                 db    ? ;
.bss:00415318                 db    ? ;
.bss:00415319                 db    ? ;
.bss:0041531A                 db    ? ;
.bss:0041531B                 db    ? ;
.bss:0041531C                 db    ? ;
.bss:0041531D                 db    ? ;
.bss:0041531E                 db    ? ;
.bss:0041531F                 db    ? ;
.bss:00415320                 db    ? ;
.bss:00415321                 db    ? ;
.bss:00415322                 db    ? ;
.bss:00415323                 db    ? ;
.bss:00415324                 db    ? ;
.bss:00415325                 db    ? ;
.bss:00415326                 db    ? ;
.bss:00415327                 db    ? ;
.bss:00415328                 db    ? ;
.bss:00415329                 db    ? ;
.bss:0041532A                 db    ? ;
.bss:0041532B                 db    ? ;
.bss:0041532C                 db    ? ;
.bss:0041532D                 db    ? ;
.bss:0041532E                 db    ? ;
.bss:0041532F                 db    ? ;
.bss:00415330                 db    ? ;
.bss:00415331                 db    ? ;
.bss:00415332                 db    ? ;
.bss:00415333                 db    ? ;
.bss:00415334                 db    ? ;
.bss:00415335                 db    ? ;
.bss:00415336                 db    ? ;
.bss:00415337                 db    ? ;
.bss:00415338                 db    ? ;
.bss:00415339                 db    ? ;
.bss:0041533A                 db    ? ;
.bss:0041533B                 db    ? ;
.bss:0041533C                 db    ? ;
.bss:0041533D                 db    ? ;
.bss:0041533E                 db    ? ;
.bss:0041533F                 db    ? ;
.bss:00415340                 db    ? ;
.bss:00415341                 db    ? ;
.bss:00415342                 db    ? ;
.bss:00415343                 db    ? ;
.bss:00415344                 db    ? ;
.bss:00415345                 db    ? ;
.bss:00415346                 db    ? ;
.bss:00415347                 db    ? ;
.bss:00415348                 db    ? ;
.bss:00415349                 db    ? ;
.bss:0041534A                 db    ? ;
.bss:0041534B                 db    ? ;
.bss:0041534C                 db    ? ;
.bss:0041534D                 db    ? ;
.bss:0041534E                 db    ? ;
.bss:0041534F                 db    ? ;
.bss:00415350                 db    ? ;
.bss:00415351                 db    ? ;
.bss:00415352                 db    ? ;
.bss:00415353                 db    ? ;
.bss:00415354                 db    ? ;
.bss:00415355                 db    ? ;
.bss:00415356                 db    ? ;
.bss:00415357                 db    ? ;
.bss:00415358                 db    ? ;
.bss:00415359                 db    ? ;
.bss:0041535A                 db    ? ;
.bss:0041535B                 db    ? ;
.bss:0041535C                 db    ? ;
.bss:0041535D                 db    ? ;
.bss:0041535E                 db    ? ;
.bss:0041535F                 db    ? ;
.bss:00415360                 db    ? ;
.bss:00415361                 db    ? ;
.bss:00415362                 db    ? ;
.bss:00415363                 db    ? ;
.bss:00415364                 db    ? ;
.bss:00415365                 db    ? ;
.bss:00415366                 db    ? ;
.bss:00415367                 db    ? ;
.bss:00415368                 db    ? ;
.bss:00415369                 db    ? ;
.bss:0041536A                 db    ? ;
.bss:0041536B                 db    ? ;
.bss:0041536C                 db    ? ;
.bss:0041536D                 db    ? ;
.bss:0041536E                 db    ? ;
.bss:0041536F                 db    ? ;
.bss:00415370                 db    ? ;
.bss:00415371                 db    ? ;
.bss:00415372                 db    ? ;
.bss:00415373                 db    ? ;
.bss:00415374                 db    ? ;
.bss:00415375                 db    ? ;
.bss:00415376                 db    ? ;
.bss:00415377                 db    ? ;
.bss:00415378                 db    ? ;
.bss:00415379                 db    ? ;
.bss:0041537A                 db    ? ;
.bss:0041537B                 db    ? ;
.bss:0041537C                 db    ? ;
.bss:0041537D                 db    ? ;
.bss:0041537E                 db    ? ;
.bss:0041537F                 db    ? ;
.bss:00415380                 db    ? ;
.bss:00415381                 db    ? ;
.bss:00415382                 db    ? ;
.bss:00415383                 db    ? ;
.bss:00415384                 db    ? ;
.bss:00415385                 db    ? ;
.bss:00415386                 db    ? ;
.bss:00415387                 db    ? ;
.bss:00415388                 db    ? ;
.bss:00415389                 db    ? ;
.bss:0041538A                 db    ? ;
.bss:0041538B                 db    ? ;
.bss:0041538C                 db    ? ;
.bss:0041538D                 db    ? ;
.bss:0041538E                 db    ? ;
.bss:0041538F                 db    ? ;
.bss:00415390                 db    ? ;
.bss:00415391                 db    ? ;
.bss:00415392                 db    ? ;
.bss:00415393                 db    ? ;
.bss:00415394                 db    ? ;
.bss:00415395                 db    ? ;
.bss:00415396                 db    ? ;
.bss:00415397                 db    ? ;
.bss:00415398                 db    ? ;
.bss:00415399                 db    ? ;
.bss:0041539A                 db    ? ;
.bss:0041539B                 db    ? ;
.bss:0041539C                 db    ? ;
.bss:0041539D                 db    ? ;
.bss:0041539E                 db    ? ;
.bss:0041539F                 db    ? ;
.bss:004153A0                 db    ? ;
.bss:004153A1                 db    ? ;
.bss:004153A2                 db    ? ;
.bss:004153A3                 db    ? ;
.bss:004153A4                 db    ? ;
.bss:004153A5                 db    ? ;
.bss:004153A6                 db    ? ;
.bss:004153A7                 db    ? ;
.bss:004153A8                 db    ? ;
.bss:004153A9                 db    ? ;
.bss:004153AA                 db    ? ;
.bss:004153AB                 db    ? ;
.bss:004153AC                 db    ? ;
.bss:004153AD                 db    ? ;
.bss:004153AE                 db    ? ;
.bss:004153AF                 db    ? ;
.bss:004153B0                 db    ? ;
.bss:004153B1                 db    ? ;
.bss:004153B2                 db    ? ;
.bss:004153B3                 db    ? ;
.bss:004153B4                 db    ? ;
.bss:004153B5                 db    ? ;
.bss:004153B6                 db    ? ;
.bss:004153B7                 db    ? ;
.bss:004153B8                 db    ? ;
.bss:004153B9                 db    ? ;
.bss:004153BA                 db    ? ;
.bss:004153BB                 db    ? ;
.bss:004153BC                 db    ? ;
.bss:004153BD                 db    ? ;
.bss:004153BE                 db    ? ;
.bss:004153BF                 db    ? ;
.bss:004153C0                 db    ? ;
.bss:004153C1                 db    ? ;
.bss:004153C2                 db    ? ;
.bss:004153C3                 db    ? ;
.bss:004153C4                 db    ? ;
.bss:004153C5                 db    ? ;
.bss:004153C6                 db    ? ;
.bss:004153C7                 db    ? ;
.bss:004153C8                 db    ? ;
.bss:004153C9                 db    ? ;
.bss:004153CA                 db    ? ;
.bss:004153CB                 db    ? ;
.bss:004153CC                 db    ? ;
.bss:004153CD                 db    ? ;
.bss:004153CE                 db    ? ;
.bss:004153CF                 db    ? ;
.bss:004153D0                 db    ? ;
.bss:004153D1                 db    ? ;
.bss:004153D2                 db    ? ;
.bss:004153D3                 db    ? ;
.bss:004153D4                 db    ? ;
.bss:004153D5                 db    ? ;
.bss:004153D6                 db    ? ;
.bss:004153D7                 db    ? ;
.bss:004153D8                 db    ? ;
.bss:004153D9                 db    ? ;
.bss:004153DA                 db    ? ;
.bss:004153DB                 db    ? ;
.bss:004153DC                 db    ? ;
.bss:004153DD                 db    ? ;
.bss:004153DE                 db    ? ;
.bss:004153DF                 db    ? ;
.bss:004153E0 unk_4153E0      db    ? ;               ; DATA XREF: sub_40CD50+22↑o
.bss:004153E1                 db    ? ;
.bss:004153E2                 db    ? ;
.bss:004153E3                 db    ? ;
.bss:004153E4                 db    ? ;
.bss:004153E5                 db    ? ;
.bss:004153E6                 db    ? ;
.bss:004153E7                 db    ? ;
.bss:004153E8                 db    ? ;
.bss:004153E9                 db    ? ;
.bss:004153EA                 db    ? ;
.bss:004153EB                 db    ? ;
.bss:004153EC                 db    ? ;
.bss:004153ED                 db    ? ;
.bss:004153EE                 db    ? ;
.bss:004153EF                 db    ? ;
.bss:004153F0                 db    ? ;
.bss:004153F1                 db    ? ;
.bss:004153F2                 db    ? ;
.bss:004153F3                 db    ? ;
.bss:004153F4                 db    ? ;
.bss:004153F5                 db    ? ;
.bss:004153F6                 db    ? ;
.bss:004153F7                 db    ? ;
.bss:004153F8                 db    ? ;
.bss:004153F9                 db    ? ;
.bss:004153FA                 db    ? ;
.bss:004153FB                 db    ? ;
.bss:004153FC                 db    ? ;
.bss:004153FD                 db    ? ;
.bss:004153FE                 db    ? ;
.bss:004153FF                 db    ? ;
.bss:00415400 ; char byte_415400[1024]
.bss:00415400 byte_415400     db 400h dup(?)          ; DATA XREF: sub_40CD50+1A↑o
.bss:00415800 dword_415800    dd ?                    ; DATA XREF: sub_40CFA0+38↑r
.bss:00415800                                         ; sub_40CFA0+FC↑w ...
.bss:00415804                 align 10h
.bss:00415810 dword_415810    dd ?                    ; DATA XREF: sub_40CFA0+4A↑r
.bss:00415810                                         ; sub_40CFA0+123↑w
.bss:00415814                 align 10h
.bss:00415820 dword_415820    dd ?                    ; DATA XREF: sub_40DFB0+8↑r
.bss:00415820                                         ; sub_40E0C0:loc_40E142↑w ...
.bss:00415824                 align 10h
.bss:00415830 ; struct _OSVERSIONINFOA VersionInformation
.bss:00415830 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40E0C0:loc_40E0E0↑o
.bss:00415830                                         ; sub_40E0C0+2C↑w ...
.bss:004158C4 word_4158C4     dw ?                    ; DATA XREF: sub_40E0C0:loc_40E173↑r
.bss:004158C6                 align 4
.bss:004158C8 word_4158C8     dw ?                    ; DATA XREF: .text:loc_40DB36↑r
.bss:004158C8                                         ; .text:0040DB64↑r ...
.bss:004158CA byte_4158CA     db ?                    ; DATA XREF: .text:0040DAF5↑r
.bss:004158CB                 align 10h
.bss:004158D0 dword_4158D0    dd ?                    ; DATA XREF: sub_40E0C0+6↑r
.bss:004158D0                                         ; sub_40E0C0+75↑w
.bss:004158D4                 align 10h
.bss:004158E0 ; CHAR byte_4158E0[272]
.bss:004158E0 byte_4158E0     db 110h dup(?)          ; DATA XREF: sub_40FEE0+17↑o
.bss:004158E0                                         ; sub_40FEE0+26↑o
.bss:004159F0 dword_4159F0    dd ?                    ; DATA XREF: sub_40FF30+7↑r
.bss:004159F0                                         ; sub_40FF30+2B↑w ...
.bss:004159F4                 align 10h
.bss:00415A00 ; struct _SYSTEM_INFO SystemInfo
.bss:00415A00 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_40FF30+21↑o
.bss:00415A00                                         ; sub_40FF30+33↑o ...
.bss:00415A24                 align 10h
.bss:00415A30 dword_415A30    dd ?                    ; DATA XREF: sub_4108F0+6E↑r
.bss:00415A30                                         ; sub_4108F0+9A↑r ...
.bss:00415A34 dword_415A34    dd ?                    ; DATA XREF: sub_4108F0:loc_410958↑r
.bss:00415A34                                         ; sub_4108F0+A0↑r ...
.bss:00415A38                 align 10h
.bss:00415A40 dword_415A40    dd ?                    ; DATA XREF: sub_410E20↑r
.bss:00415A40                                         ; .text:loc_410F52↑w
.bss:00415A44                 align 10h
.bss:00415A50 dword_415A50    dd ?                    ; DATA XREF: sub_401BF0+3B↑w
.bss:00415A50                                         ; sub_401BF0+105↑r ...
.bss:00415A54                 db    ? ;
.bss:00415A55                 db    ? ;
.bss:00415A56                 db    ? ;
.bss:00415A57                 db    ? ;
.bss:00415A58                 db    ? ;
.bss:00415A59                 db    ? ;
.bss:00415A5A                 db    ? ;
.bss:00415A5B                 db    ? ;
.bss:00415A5C                 db    ? ;
.bss:00415A5D                 db    ? ;
.bss:00415A5E                 db    ? ;
.bss:00415A5F                 db    ? ;
.bss:00415A60                 db    ? ;
.bss:00415A61                 db    ? ;
.bss:00415A62                 db    ? ;
.bss:00415A63                 db    ? ;
.bss:00415A64                 db    ? ;
.bss:00415A65                 db    ? ;
.bss:00415A66                 db    ? ;
.bss:00415A67                 db    ? ;
.bss:00415A68                 db    ? ;
.bss:00415A69                 db    ? ;
.bss:00415A6A                 db    ? ;
.bss:00415A6B                 db    ? ;
.bss:00415A6C                 db    ? ;
.bss:00415A6D                 db    ? ;
.bss:00415A6E                 db    ? ;
.bss:00415A6F                 db    ? ;
.bss:00415A70 dword_415A70    dd ?                    ; DATA XREF: sub_401BF0+31E↑r
.bss:00415A70                                         ; sub_405B50+71↑w ...
.bss:00415A74                 align 10h
.bss:00415A80 dword_415A80    dd ?                    ; CODE XREF: sub_409414+63↑p
.bss:00415A80                                         ; DATA XREF: sub_409310+1E↑r ...
.bss:00415A84                 align 10h
.bss:00415A90 dword_415A90    dd ?                    ; DATA XREF: sub_409310+4E↑w
.bss:00415A90                                         ; sub_409414+AB↑w
.bss:00415A94                 align 40h
.bss:00415AC0 dword_415AC0    dd ?                    ; DATA XREF: sub_409414+13↑r
.bss:00415AC4                 align 10h
.bss:00415AD0 dword_415AD0    dd ?                    ; DATA XREF: sub_410090+A↑w
.bss:00415AD4                 align 800h
.bss:00415AD4 _bss            ends
.bss:00415AD4
.idata:00416000 ; Section 4. (virtual address 00016000)
.idata:00416000 ; Virtual size                  : 00000DF4 (   3572.)
.idata:00416000 ; Section size in file          : 00000E00 (   3584.)
.idata:00416000 ; Offset to raw data for section: 00012A00
.idata:00416000 ; Flags C0000040: Data Readable Writable
.idata:00416000 ; Alignment     : default
.idata:00416000 ; ===========================================================================
.idata:00416000
.idata:00416000 ; Segment type: Externs
.idata:00416000 ; _idata
.idata:00416000
.idata:00416001
.idata:004162B4 ;
.idata:004162B4 ; Imports from libintl3.dll
.idata:004162B4 ;
.idata:004162B4                 extrn __imp_libintl_bindtextdomain:dword
.idata:004162B4                                         ; CODE XREF: sub_401BF0+5C↑p
.idata:004162B4                                         ; DATA XREF: sub_401BF0+5C↑r ...
.idata:004162B8                 extrn libintl_gettext:dword
.idata:004162B8                                         ; CODE XREF: sub_401BF0+F9↑p
.idata:004162B8                                         ; sub_401BF0+143↑p ...
.idata:004162BC                 extrn libintl_textdomain:dword
.idata:004162BC                                         ; CODE XREF: sub_401BF0+69↑p
.idata:004162BC                                         ; DATA XREF: sub_401BF0+69↑r ...
.idata:004162C0
.idata:004162C8 ;
.idata:004162C8 ; Imports from ADVAPI32.DLL
.idata:004162C8 ;
.idata:004162C8 ; BOOL (__stdcall *GetUserNameA)(LPSTR lpBuffer, LPDWORD pcbBuffer)
.idata:004162C8                 extrn __imp_GetUserNameA:dword
.idata:004162C8                                         ; DATA XREF: GetUserNameA↑r
.idata:004162CC ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004162CC                 extrn __imp_RegCloseKey:dword
.idata:004162CC                                         ; DATA XREF: RegCloseKey↑r
.idata:004162D0 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004162D0                 extrn __imp_RegOpenKeyExA:dword
.idata:004162D0                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004162D4 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004162D4                 extrn __imp_RegQueryValueExA:dword
.idata:004162D4                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004162D8
.idata:004162E0 ;
.idata:004162E0 ; Imports from KERNEL32.dll
.idata:004162E0 ;
.idata:004162E0 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004162E0                 extrn __imp_AreFileApisANSI:dword
.idata:004162E0                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004162E4 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004162E4                 extrn __imp_CloseHandle:dword
.idata:004162E4                                         ; DATA XREF: CloseHandle↑r
.idata:004162E8 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004162E8                 extrn __imp_CreateDirectoryA:dword
.idata:004162E8                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004162EC ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004162EC                 extrn __imp_CreateFileA:dword
.idata:004162EC                                         ; DATA XREF: CreateFileA↑r
.idata:004162F0 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004162F0                 extrn __imp_DeviceIoControl:dword
.idata:004162F0                                         ; DATA XREF: DeviceIoControl↑r
.idata:004162F4 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004162F4                 extrn __imp_ExitProcess:dword
.idata:004162F4                                         ; DATA XREF: ExitProcess↑r
.idata:004162F8 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004162F8                 extrn __imp_FindClose:dword
.idata:004162F8                                         ; DATA XREF: FindClose↑r
.idata:004162FC ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004162FC                 extrn __imp_FindFirstFileA:dword
.idata:004162FC                                         ; DATA XREF: FindFirstFileA↑r
.idata:00416300 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00416300                 extrn __imp_FindNextFileA:dword
.idata:00416300                                         ; DATA XREF: FindNextFileA↑r
.idata:00416304 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00416304                 extrn __imp_FreeLibrary:dword
.idata:00416304                                         ; DATA XREF: FreeLibrary↑r
.idata:00416308 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00416308                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00416308                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0041630C ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0041630C                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0041630C                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00416310 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00416310                 extrn __imp_GetDriveTypeA:dword
.idata:00416310                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00416314 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00416314                 extrn __imp_GetFileAttributesA:dword
.idata:00416314                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00416318 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00416318                 extrn __imp_GetFileInformationByHandle:dword
.idata:00416318                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041631C ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041631C                 extrn __imp_GetFileSize:dword
.idata:0041631C                                         ; DATA XREF: GetFileSize↑r
.idata:00416320 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00416320                 extrn __imp_GetFileType:dword
.idata:00416320                                         ; DATA XREF: GetFileType↑r
.idata:00416324 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00416324                 extrn __imp_GetFullPathNameA:dword
.idata:00416324                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00416328 ; DWORD (__stdcall *GetLastError)()
.idata:00416328                 extrn __imp_GetLastError:dword
.idata:00416328                                         ; DATA XREF: GetLastError↑r
.idata:0041632C ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041632C                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041632C                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00416330 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00416330                 extrn __imp_GetModuleFileNameA:dword
.idata:00416330                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00416334 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00416334                 extrn __imp_GetModuleHandleA:dword
.idata:00416334                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00416338 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00416338                 extrn __imp_GetProcAddress:dword
.idata:00416338                                         ; DATA XREF: GetProcAddress↑r
.idata:0041633C ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041633C                 extrn __imp_GetProcessHeap:dword
.idata:0041633C                                         ; DATA XREF: GetProcessHeap↑r
.idata:00416340 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00416340                 extrn __imp_GetShortPathNameA:dword
.idata:00416340                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00416344 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:00416344                 extrn __imp_GetSystemInfo:dword
.idata:00416344                                         ; DATA XREF: GetSystemInfo↑r
.idata:00416348 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00416348                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00416348                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0041634C ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0041634C                 extrn __imp_GetTimeZoneInformation:dword
.idata:0041634C                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00416350 ; DWORD (__stdcall *GetVersion)()
.idata:00416350                 extrn __imp_GetVersion:dword
.idata:00416350                                         ; DATA XREF: GetVersion↑r
.idata:00416354 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00416354                 extrn __imp_GetVersionExA:dword
.idata:00416354                                         ; DATA XREF: GetVersionExA↑r
.idata:00416358 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00416358                 extrn __imp_GetVolumeInformationA:dword
.idata:00416358                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0041635C ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041635C                 extrn __imp_HeapAlloc:dword
.idata:0041635C                                         ; DATA XREF: HeapAlloc↑r
.idata:00416360 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00416360                 extrn __imp_HeapFree:dword
.idata:00416360                                         ; DATA XREF: HeapFree↑r
.idata:00416364 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00416364                 extrn __imp_LoadLibraryA:dword
.idata:00416364                                         ; DATA XREF: LoadLibraryA↑r
.idata:00416368 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00416368                 extrn __imp_MultiByteToWideChar:dword
.idata:00416368                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0041636C ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0041636C                 extrn __imp_PeekNamedPipe:dword
.idata:0041636C                                         ; DATA XREF: PeekNamedPipe↑r
.idata:00416370 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:00416370                 extrn __imp_SetErrorMode:dword
.idata:00416370                                         ; DATA XREF: SetErrorMode↑r
.idata:00416374 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00416374                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00416374                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00416378 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00416378                 extrn __imp_UnlockFile:dword
.idata:00416378                                         ; DATA XREF: UnlockFile↑r
.idata:0041637C ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041637C                 extrn __imp_lstrcmpiA:dword
.idata:0041637C                                         ; DATA XREF: lstrcmpiA↑r
.idata:00416380 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:00416380                 extrn __imp_lstrcpyA:dword
.idata:00416380                                         ; DATA XREF: lstrcpyA↑r
.idata:00416384
.idata:0041638C ;
.idata:0041638C ; Imports from msvcrt.dll
.idata:0041638C ;
.idata:0041638C ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041638C                 extrn __imp__chmod:dword
.idata:0041638C                                         ; DATA XREF: _chmod↑r
.idata:00416390 ; int (__cdecl *_close)(int FileHandle)
.idata:00416390                 extrn __imp__close:dword
.idata:00416390                                         ; DATA XREF: _close↑r
.idata:00416394 ; int (__cdecl *_getpid)()
.idata:00416394                 extrn __imp__getpid:dword
.idata:00416394                                         ; DATA XREF: _getpid↑r
.idata:00416398 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:00416398                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0041639C ; char *(__cdecl *_strdup)(const char *String)
.idata:0041639C                 extrn __imp__strdup:dword
.idata:0041639C                                         ; DATA XREF: _strdup↑r
.idata:004163A0 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004163A0                 extrn __imp__stricmp:dword
.idata:004163A0                                         ; DATA XREF: _stricmp↑r
.idata:004163A4
.idata:004163AC ;
.idata:004163AC ; Imports from MSVCP60.DLL
.idata:004163AC ;
.idata:004163AC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004163AC                 extrn __imp_mbrtowc:dword
.idata:004163AC                                         ; DATA XREF: mbrtowc↑r
.idata:004163B0
.idata:004163B8 ;
.idata:004163B8 ; Imports from msvcrt.dll
.idata:004163B8 ;
.idata:004163B8                 extrn __imp___getmainargs:dword
.idata:004163B8                                         ; DATA XREF: __getmainargs↑r
.idata:004163BC ; int _mb_cur_max
.idata:004163BC                 extrn __mb_cur_max:dword
.idata:004163BC                                         ; DATA XREF: sub_4065B0+45↑r
.idata:004163BC                                         ; sub_407FB0+7↑r ...
.idata:004163C0 ; char ***(__cdecl *__p__environ)()
.idata:004163C0                 extrn __imp___p__environ:dword
.idata:004163C0                                         ; DATA XREF: __p__environ↑r
.idata:004163C4 ; int *(__cdecl *__p__fmode)()
.idata:004163C4                 extrn __imp___p__fmode:dword
.idata:004163C4                                         ; DATA XREF: __p__fmode↑r
.idata:004163C8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004163C8                 extrn __set_app_type:dword
.idata:004163C8                                         ; CODE XREF: start+D↑p
.idata:004163C8                                         ; .text:0040102D↑p
.idata:004163C8                                         ; DATA XREF: ...
.idata:004163CC                 extrn __imp__assert:dword
.idata:004163CC                                         ; DATA XREF: _assert↑r
.idata:004163D0 ; void (__cdecl *_cexit)()
.idata:004163D0                 extrn __imp__cexit:dword
.idata:004163D0                                         ; DATA XREF: _cexit↑r
.idata:004163D4 ; int (__cdecl *_close_0)(int FileHandle)
.idata:004163D4                 extrn __imp__close_0:dword
.idata:004163D4                                         ; DATA XREF: _close_0↑r
.idata:004163D8 ; int *(__cdecl *_errno)()
.idata:004163D8                 extrn __imp__errno:dword
.idata:004163D8                                         ; DATA XREF: _errno↑r
.idata:004163DC ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004163DC                 extrn __imp__fdopen:dword
.idata:004163DC                                         ; DATA XREF: _fdopen↑r
.idata:004163E0 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004163E0                 extrn __imp__filelengthi64:dword
.idata:004163E0                                         ; DATA XREF: _filelengthi64↑r
.idata:004163E4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004163E4                 extrn __imp__flsbuf:dword
.idata:004163E4                                         ; DATA XREF: _flsbuf↑r
.idata:004163E8 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004163E8                 extrn __imp__get_osfhandle:dword
.idata:004163E8                                         ; DATA XREF: _get_osfhandle↑r
.idata:004163EC ; FILE iob[]
.idata:004163EC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004163EC                                         ; sub_401080+75↑r ...
.idata:004163F0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004163F0                 extrn __imp__isctype:dword
.idata:004163F0                                         ; DATA XREF: _isctype↑r
.idata:004163F4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004163F4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004163F4                                         ; DATA XREF: .text:0040106C↑r
.idata:004163F8 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:004163F8                 extrn __imp__open_0:dword
.idata:004163F8                                         ; DATA XREF: _open_0↑r
.idata:004163FC ; const unsigned __int16 *pctype
.idata:004163FC                 extrn _pctype:dword     ; DATA XREF: sub_4065B0:loc_406AD0↑r
.idata:004163FC                                         ; sub_407FB0:loc_4086A4↑r
.idata:00416400 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00416400                 extrn __imp__setmode:dword
.idata:00416400                                         ; DATA XREF: _setmode↑r
.idata:00416404 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00416404                 extrn __imp__stricmp_0:dword
.idata:00416404                                         ; DATA XREF: _stricmp_0↑r
.idata:00416408 ; void (__cdecl __noreturn *abort)()
.idata:00416408                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0041640C ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0041640C                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0041640C                                         ; DATA XREF: sub_401040+C↑r
.idata:00416410 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00416410                 extrn __imp_calloc:dword
.idata:00416410                                         ; DATA XREF: calloc↑r
.idata:00416414 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:00416414                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00416418 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00416418                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041641C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041641C                 extrn __imp_fclose:dword
.idata:0041641C                                         ; DATA XREF: fclose↑r
.idata:00416420 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00416420                 extrn __imp_fflush:dword
.idata:00416420                                         ; DATA XREF: fflush↑r
.idata:00416424 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00416424                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00416428 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00416428                 extrn __imp_fprintf:dword
.idata:00416428                                         ; DATA XREF: fprintf↑r
.idata:0041642C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041642C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00416430 ; void (__cdecl *free)(void *Block)
.idata:00416430                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00416434 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00416434                 extrn __imp_getenv:dword
.idata:00416434                                         ; DATA XREF: getenv↑r
.idata:00416438 ; int (__cdecl *isalpha)(int C)
.idata:00416438                 extrn __imp_isalpha:dword
.idata:00416438                                         ; DATA XREF: isalpha↑r
.idata:0041643C ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041643C                 extrn __imp_iswctype:dword
.idata:0041643C                                         ; DATA XREF: iswctype↑r
.idata:00416440 ; void *(__cdecl *malloc)(size_t Size)
.idata:00416440                 extrn __imp_malloc:dword
.idata:00416440                                         ; DATA XREF: malloc↑r
.idata:00416444 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00416444                 extrn __imp_memcpy:dword
.idata:00416444                                         ; DATA XREF: memcpy↑r
.idata:00416448 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:00416448                 extrn __imp_memmove:dword
.idata:00416448                                         ; DATA XREF: memmove↑r
.idata:0041644C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041644C                 extrn __imp_memset:dword
.idata:0041644C                                         ; DATA XREF: memset↑r
.idata:00416450 ; int (*printf)(const char *const Format, ...)
.idata:00416450                 extrn __imp_printf:dword
.idata:00416450                                         ; DATA XREF: printf↑r
.idata:00416454 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00416454                 extrn __imp_realloc:dword
.idata:00416454                                         ; DATA XREF: realloc↑r
.idata:00416458 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00416458                 extrn __imp_setlocale:dword
.idata:00416458                                         ; DATA XREF: setlocale↑r
.idata:0041645C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041645C                 extrn __imp_signal:dword
.idata:0041645C                                         ; DATA XREF: signal↑r
.idata:00416460 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00416460                 extrn __imp_sprintf:dword
.idata:00416460                                         ; DATA XREF: sprintf↑r
.idata:00416464 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00416464                 extrn __imp_sscanf:dword
.idata:00416464                                         ; DATA XREF: sscanf↑r
.idata:00416468 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00416468                 extrn __imp_strcat:dword
.idata:00416468                                         ; DATA XREF: strcat↑r
.idata:0041646C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041646C                 extrn __imp_strchr:dword
.idata:0041646C                                         ; DATA XREF: strchr↑r
.idata:00416470 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00416470                 extrn __imp_strcmp:dword
.idata:00416470                                         ; DATA XREF: strcmp↑r
.idata:00416474 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00416474                 extrn __imp_strcpy:dword
.idata:00416474                                         ; DATA XREF: strcpy↑r
.idata:00416478 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00416478                 extrn __imp_strerror:dword
.idata:00416478                                         ; DATA XREF: strerror↑r
.idata:0041647C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041647C                 extrn __imp_strlen:dword
.idata:0041647C                                         ; DATA XREF: strlen↑r
.idata:00416480 ; char *(__cdecl *strncat)(char *Destination, const char *Source, size_t Count)
.idata:00416480                 extrn __imp_strncat:dword
.idata:00416480                                         ; DATA XREF: strncat↑r
.idata:00416484 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00416484                 extrn __imp_strncmp:dword
.idata:00416484                                         ; DATA XREF: strncmp↑r
.idata:00416488 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00416488                 extrn __imp_strncpy:dword
.idata:00416488                                         ; DATA XREF: strncpy↑r
.idata:0041648C ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041648C                 extrn __imp_strpbrk:dword
.idata:0041648C                                         ; DATA XREF: strpbrk↑r
.idata:00416490 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00416490                 extrn __imp_strrchr:dword
.idata:00416490                                         ; DATA XREF: strrchr↑r
.idata:00416494 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00416494                 extrn __imp_strspn:dword
.idata:00416494                                         ; DATA XREF: strspn↑r
.idata:00416498 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:00416498                 extrn __imp_strstr:dword
.idata:00416498                                         ; DATA XREF: strstr↑r
.idata:0041649C ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:0041649C                 extrn __imp_strtoul:dword
.idata:0041649C                                         ; DATA XREF: strtoul↑r
.idata:004164A0 ; int (__cdecl *toupper)(int C)
.idata:004164A0                 extrn __imp_toupper:dword
.idata:004164A0                                         ; DATA XREF: toupper↑r
.idata:004164A4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004164A4                 extrn __imp_vfprintf:dword
.idata:004164A4                                         ; DATA XREF: vfprintf↑r
.idata:004164A8
.idata:004164B0 ;
.idata:004164B0 ; Imports from OLE32.dll
.idata:004164B0 ;
.idata:004164B0 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:004164B0                 extrn __imp_CoCreateInstance:dword
.idata:004164B0                                         ; DATA XREF: CoCreateInstance↑r
.idata:004164B4 ; void (__stdcall *CoUninitialize)()
.idata:004164B4                 extrn __imp_CoUninitialize:dword
.idata:004164B4                                         ; DATA XREF: CoUninitialize↑r
.idata:004164B8 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:004164B8                 extrn __imp_OleInitialize:dword
.idata:004164B8                                         ; DATA XREF: OleInitialize↑r
.idata:004164BC
.idata:004164BC
.idata:004164BC
.idata:004164BC                 end start
