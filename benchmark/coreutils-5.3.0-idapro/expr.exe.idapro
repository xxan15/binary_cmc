.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : B7EEE6A57435F9A254BABE81A134F502E33099228937E3B48935D424B4CA514D
.text:00401000 ; Input MD5    : FD9BCA0239F248EA8149B49694D6FD47
.text:00401000 ; Input CRC32  : EC7A8A32
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/expr.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A267 (Wed Apr 20 18:41:43 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000D740 (  55104.)
.text:00401000 ; Section size in file          : 0000D800 (  55296.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401360+6E↓p
.text:00401040                                         ; .text:0040E0C0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40E060
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_40F000
.text:004010A2                 mov     edx, dword_40F060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_40F004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_40F080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_40F080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40E030
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_40F000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_40F004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401360
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40E060
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401360+20↓o
.text:00401280                                         ; sub_401610+364↓o ...
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401360+3A↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401360+42↓o
.text:004012C3                                         ; sub_401360+4F↓o
.text:004012CD aMikeParker     db 'Mike Parker',0      ; DATA XREF: sub_401360+7E↓o
.text:004012D9 a530            db '5.3.0',0            ; DATA XREF: sub_401360+8E↓o
.text:004012DF aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401360+96↓o
.text:004012ED ; const FILE stru_4012ED
.text:004012ED stru_4012ED     FILE <72707865h, 2D2D00h, 7373696Dh, 20676E69h, 7265706Fh, 646E61h, \
.text:004012ED                                         ; DATA XREF: sub_401360+9E↓o
.text:004012ED                                         ; sub_401360+C3↓o ...
.text:004012ED                       90909090h, 90909090h>
.text:0040130D                 db  90h
.text:0040130E                 db  90h
.text:0040130F                 db  90h
.text:00401310                 db  90h
.text:00401311                 db  90h
.text:00401312                 db  90h
.text:00401313                 db  90h
.text:00401314                 db  90h
.text:00401315                 db  90h
.text:00401316                 db  90h
.text:00401317                 db  90h
.text:00401318                 db  90h
.text:00401319                 db  90h
.text:0040131A                 db  90h
.text:0040131B                 db  90h
.text:0040131C                 db  90h
.text:0040131D                 db  90h
.text:0040131E                 db  90h
.text:0040131F                 db  90h
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_401360+F9↓o
.text:00401320                                         ; sub_402870+C↓o
.text:00401347 aSyntaxError    db 'syntax error',0     ; DATA XREF: sub_401360:loc_4014CC↓o
.text:00401347                                         ; sub_401610+CB↓o ...
.text:00401354                 align 10h
.text:00401360
.text:00401360 ; =============== S U B R O U T I N E =======================================
.text:00401360
.text:00401360 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401360
.text:00401360 sub_401360      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401360
.text:00401360 Category        = dword ptr -38h
.text:00401360 Locale          = dword ptr -34h
.text:00401360 var_30          = dword ptr -30h
.text:00401360 var_2C          = byte ptr -2Ch
.text:00401360 var_28          = dword ptr -28h
.text:00401360 var_24          = dword ptr -24h
.text:00401360 var_20          = byte ptr -20h
.text:00401360 var_1C          = dword ptr -1Ch
.text:00401360 arg_0           = dword ptr  8
.text:00401360 arg_4           = dword ptr  0Ch
.text:00401360
.text:00401360                 push    ebp
.text:00401361                 xor     eax, eax
.text:00401363                 mov     ebp, esp
.text:00401365                 push    edi
.text:00401366                 push    esi
.text:00401367                 push    ebx
.text:00401368                 sub     esp, 2Ch
.text:0040136B                 and     esp, 0FFFFFFF0h
.text:0040136E                 call    __alloca
.text:00401373                 mov     ebx, [ebp+arg_0]
.text:00401376                 call    sub_40E100
.text:0040137B                 mov     eax, [ebp+arg_4]
.text:0040137E                 mov     ecx, [eax]
.text:00401380                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:00401388                 mov     [esp+38h+Category], 0 ; Category
.text:0040138F                 mov     ds:dword_4102C0, ecx
.text:00401395                 call    setlocale
.text:0040139A                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004013A2                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004013A9                 call    ds:libintl_bindtextdomain
.text:004013AF                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004013B6                 call    ds:libintl_textdomain
.text:004013BC                 mov     [esp+38h+Category], offset sub_40C0A0 ; void (__cdecl *)()
.text:004013C3                 mov     edx, 3
.text:004013C8                 mov     Code, edx
.text:004013CE                 call    sub_401040
.text:004013D3                 mov     [esp+38h+var_1C], 0
.text:004013DB                 mov     edx, [ebp+arg_4]
.text:004013DE                 mov     dword ptr [esp+38h+var_20], offset aMikeParker ; "Mike Parker"
.text:004013E6                 mov     [esp+38h+var_24], offset sub_402870 ; int
.text:004013EE                 mov     [esp+38h+var_28], offset a530 ; "5.3.0"
.text:004013F6                 mov     dword ptr [esp+38h+var_2C], offset aGnuCoreutils ; "GNU coreutils"
.text:004013FE                 mov     [esp+38h+var_30], offset stru_4012ED ; FILE *
.text:00401406                 mov     [esp+38h+Locale], edx ; int
.text:0040140A                 mov     [esp+38h+Category], ebx ; int
.text:0040140D                 call    sub_40BFB0
.text:00401412                 cmp     ebx, 1
.text:00401415                 jle     short loc_401434
.text:00401417                 cld
.text:00401418                 mov     edi, [ebp+arg_4]
.text:0040141B                 mov     ecx, 3
.text:00401420                 mov     esi, [edi+4]
.text:00401423                 mov     edi, (offset stru_4012ED._cnt+1)
.text:00401428                 repe cmpsb
.text:0040142A                 jnz     short loc_401431
.text:0040142C                 add     [ebp+arg_4], 4
.text:00401430                 dec     ebx
.text:00401431
.text:00401431 loc_401431:                             ; CODE XREF: sub_401360+CA↑j
.text:00401431                 dec     ebx
.text:00401432                 jg      short loc_401491
.text:00401434
.text:00401434 loc_401434:                             ; CODE XREF: sub_401360+B5↑j
.text:00401434                 mov     [esp+38h+Category], offset stru_4012ED._base
.text:0040143B                 call    ds:libintl_gettext
.text:00401441                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401449                 mov     [esp+38h+Category], 0 ; Code
.text:00401450                 mov     [esp+38h+var_30], eax ; char *
.text:00401454                 call    sub_40D830
.text:00401459                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401460                 call    ds:libintl_gettext
.text:00401466                 mov     ebx, ds:_iob
.text:0040146C                 mov     esi, ds:dword_4102C0
.text:00401472                 add     ebx, 40h ; '@'
.text:00401475                 mov     [esp+38h+var_30], esi
.text:00401479                 mov     [esp+38h+Locale], eax ; Format
.text:0040147D                 mov     [esp+38h+Category], ebx ; Stream
.text:00401480                 call    fprintf
.text:00401485                 mov     [esp+38h+Category], 2 ; Code
.text:0040148C
.text:0040148C loc_40148C:                             ; CODE XREF: sub_401360+16A↓j
.text:0040148C                 call    exit
.text:00401491 ; ---------------------------------------------------------------------------
.text:00401491
.text:00401491 loc_401491:                             ; CODE XREF: sub_401360+D2↑j
.text:00401491                 mov     [esp+38h+Category], 1
.text:00401498                 mov     edx, [ebp+arg_4]
.text:0040149B                 add     edx, 4
.text:0040149E                 mov     ds:dword_410000, edx
.text:004014A4                 call    sub_401CC0
.text:004014A9                 mov     ebx, eax
.text:004014AB                 call    sub_4015D0
.text:004014B0                 test    al, al
.text:004014B2                 jz      short loc_4014CC
.text:004014B4
.text:004014B4 loc_4014B4:                             ; CODE XREF: sub_401360+191↓j
.text:004014B4                 mov     [esp+38h+Category], ebx
.text:004014B7                 call    sub_401500
.text:004014BC                 mov     [esp+38h+Category], ebx
.text:004014BF                 call    sub_401550
.text:004014C4                 movzx   ecx, al
.text:004014C7                 mov     [esp+38h+Category], ecx
.text:004014CA                 jmp     short loc_40148C
.text:004014CC ; ---------------------------------------------------------------------------
.text:004014CC
.text:004014CC loc_4014CC:                             ; CODE XREF: sub_401360+152↑j
.text:004014CC                 mov     [esp+38h+Category], offset aSyntaxError ; "syntax error"
.text:004014D3                 call    ds:libintl_gettext
.text:004014D9                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:004014E1                 mov     [esp+38h+Category], 2 ; Code
.text:004014E8                 mov     [esp+38h+var_30], eax ; char *
.text:004014EC                 call    sub_40D830
.text:004014F1                 jmp     short loc_4014B4
.text:004014F1 sub_401360      endp
.text:004014F1
.text:004014F1 ; ---------------------------------------------------------------------------
.text:004014F3                 align 10h
.text:00401500
.text:00401500 ; =============== S U B R O U T I N E =======================================
.text:00401500
.text:00401500
.text:00401500 sub_401500      proc near               ; CODE XREF: sub_401360+157↑p
.text:00401500
.text:00401500 Buffer          = dword ptr -3Ch
.text:00401500 var_38          = dword ptr -38h
.text:00401500 var_34          = dword ptr -34h
.text:00401500 var_2C          = byte ptr -2Ch
.text:00401500 arg_0           = dword ptr  4
.text:00401500
.text:00401500                 sub     esp, 3Ch
.text:00401503                 mov     edx, [esp+3Ch+arg_0]
.text:00401507                 mov     eax, [edx]
.text:00401509                 test    eax, eax
.text:0040150B                 jz      short loc_401520
.text:0040150D                 dec     eax
.text:0040150E                 jnz     short loc_40153C
.text:00401510                 mov     eax, [edx+8]
.text:00401513
.text:00401513 loc_401513:                             ; CODE XREF: sub_401500+3A↓j
.text:00401513                 mov     [esp+3Ch+Buffer], eax ; Buffer
.text:00401516                 call    puts
.text:0040151B                 add     esp, 3Ch
.text:0040151E                 retn
.text:0040151E ; ---------------------------------------------------------------------------
.text:0040151F                 align 10h
.text:00401520
.text:00401520 loc_401520:                             ; CODE XREF: sub_401500+B↑j
.text:00401520                 lea     ecx, [esp+3Ch+var_2C]
.text:00401524                 mov     [esp+3Ch+var_34], ecx
.text:00401528                 mov     eax, [edx+8]
.text:0040152B                 mov     ecx, [edx+0Ch]
.text:0040152E                 mov     [esp+3Ch+Buffer], eax
.text:00401531                 mov     [esp+3Ch+var_38], ecx
.text:00401535                 call    sub_40BBC0
.text:0040153A                 jmp     short loc_401513
.text:0040153C ; ---------------------------------------------------------------------------
.text:0040153C
.text:0040153C loc_40153C:                             ; CODE XREF: sub_401500+E↑j
.text:0040153C                 call    abort
.text:0040153C sub_401500      endp
.text:0040153C
.text:00401541 ; ---------------------------------------------------------------------------
.text:00401541                 jmp     short sub_401550
.text:00401541 ; ---------------------------------------------------------------------------
.text:00401543                 align 10h
.text:00401550
.text:00401550 ; =============== S U B R O U T I N E =======================================
.text:00401550
.text:00401550
.text:00401550 sub_401550      proc near               ; CODE XREF: sub_401360+15F↑p
.text:00401550                                         ; .text:00401541↑j ...
.text:00401550
.text:00401550 arg_0           = dword ptr  4
.text:00401550
.text:00401550                 sub     esp, 0Ch
.text:00401553                 mov     edx, [esp+0Ch+arg_0]
.text:00401557                 mov     eax, [edx]
.text:00401559                 test    eax, eax
.text:0040155B                 jz      short loc_4015B0
.text:0040155D                 dec     eax
.text:0040155E                 jnz     short loc_4015BE
.text:00401560                 mov     edx, [edx+8]
.text:00401563                 mov     ecx, 1
.text:00401568                 movzx   eax, byte ptr [edx]
.text:0040156B                 test    al, al
.text:0040156D                 jz      short loc_4015A0
.text:0040156F                 cmp     al, 2Dh ; '-'
.text:00401571                 jz      short loc_4015A6
.text:00401573                 lea     esi, [esi+0]
.text:00401579                 lea     edi, [edi+0]
.text:00401580
.text:00401580 loc_401580:                             ; CODE XREF: sub_401550+41↓j
.text:00401580                                         ; sub_401550+5A↓j
.text:00401580                 xor     ecx, ecx
.text:00401582                 cmp     al, 30h ; '0'
.text:00401584                 jnz     short loc_4015A0
.text:00401586                 inc     edx
.text:00401587                 mov     ecx, 1
.text:0040158C                 movzx   eax, byte ptr [edx]
.text:0040158F                 test    al, al
.text:00401591                 jnz     short loc_401580
.text:00401593                 lea     esi, [esi+0]
.text:00401599                 lea     edi, [edi+0]
.text:004015A0
.text:004015A0 loc_4015A0:                             ; CODE XREF: sub_401550+1D↑j
.text:004015A0                                         ; sub_401550+34↑j ...
.text:004015A0                 mov     eax, ecx
.text:004015A2                 add     esp, 0Ch
.text:004015A5                 retn
.text:004015A6 ; ---------------------------------------------------------------------------
.text:004015A6
.text:004015A6 loc_4015A6:                             ; CODE XREF: sub_401550+21↑j
.text:004015A6                 inc     edx
.text:004015A7                 movzx   eax, byte ptr [edx]
.text:004015AA                 jmp     short loc_401580
.text:004015AA ; ---------------------------------------------------------------------------
.text:004015AC                 align 10h
.text:004015B0
.text:004015B0 loc_4015B0:                             ; CODE XREF: sub_401550+B↑j
.text:004015B0                 mov     ecx, [edx+0Ch]
.text:004015B3                 or      ecx, [edx+8]
.text:004015B6                 setz    dl
.text:004015B9                 movzx   ecx, dl
.text:004015BC                 jmp     short loc_4015A0
.text:004015BE ; ---------------------------------------------------------------------------
.text:004015BE
.text:004015BE loc_4015BE:                             ; CODE XREF: sub_401550+E↑j
.text:004015BE                 call    abort
.text:004015BE sub_401550      endp
.text:004015BE
.text:004015BE ; ---------------------------------------------------------------------------
.text:004015C3                 align 10h
.text:004015D0
.text:004015D0 ; =============== S U B R O U T I N E =======================================
.text:004015D0
.text:004015D0
.text:004015D0 sub_4015D0      proc near               ; CODE XREF: sub_401360+14B↑p
.text:004015D0                                         ; sub_401610:loc_401630↓p ...
.text:004015D0                 mov     edx, ds:dword_410000
.text:004015D6                 mov     ecx, [edx]
.text:004015D8                 test    ecx, ecx
.text:004015DA                 setz    dl
.text:004015DD                 movzx   eax, dl
.text:004015E0                 retn
.text:004015E0 sub_4015D0      endp
.text:004015E0
.text:004015E0 ; ---------------------------------------------------------------------------
.text:004015E1 ; const char Str2[2]
.text:004015E1 Str2            db '(',0                ; DATA XREF: sub_401610:loc_401677↓o
.text:004015E3 ; const char asc_4015E3[2]
.text:004015E3 asc_4015E3      db ')',0                ; DATA XREF: sub_401610+9A↓o
.text:004015E3                                         ; sub_401610:loc_401751↓o
.text:004015E5 ; const char asc_4015E5[2]
.text:004015E5 asc_4015E5      db '+',0                ; DATA XREF: sub_401610:loc_4017B0↓o
.text:004015E5                                         ; sub_402F90:loc_403452↓o ...
.text:004015E7 ; const char aLength[]
.text:004015E7 aLength         db 'length',0           ; DATA XREF: sub_401610+21D↓o
.text:004015EE ; const char aMatch[]
.text:004015EE aMatch          db 'match',0            ; DATA XREF: sub_401610+258↓o
.text:004015F4 ; const char aIndex[]
.text:004015F4 aIndex          db 'index',0            ; DATA XREF: sub_401610+293↓o
.text:004015FA ; const char aSubstr[]
.text:004015FA aSubstr         db 'substr',0           ; DATA XREF: sub_401610+2CE↓o
.text:00401601 ; ---------------------------------------------------------------------------
.text:00401601                 jmp     short sub_401610
.text:00401601 ; ---------------------------------------------------------------------------
.text:00401603                 align 10h
.text:00401610
.text:00401610 ; =============== S U B R O U T I N E =======================================
.text:00401610
.text:00401610
.text:00401610 sub_401610      proc near               ; CODE XREF: .text:00401601↑j
.text:00401610                                         ; sub_401610+307↓p ...
.text:00401610
.text:00401610 Str1            = dword ptr -5Ch
.text:00401610 Str2            = dword ptr -58h
.text:00401610 Count           = dword ptr -54h
.text:00401610 var_44          = dword ptr -44h
.text:00401610 var_3D          = byte ptr -3Dh
.text:00401610 var_3C          = byte ptr -3Ch
.text:00401610 arg_0           = byte ptr  4
.text:00401610
.text:00401610                 push    ebp
.text:00401611                 push    edi
.text:00401612                 push    esi
.text:00401613                 push    ebx
.text:00401614                 sub     esp, 4Ch
.text:00401617                 mov     ebx, ds:dword_410000
.text:0040161D                 movzx   edx, [esp+5Ch+arg_0]
.text:00401622                 mov     [esp+5Ch+var_3D], dl
.text:00401626                 mov     edx, [ebx]
.text:00401628                 test    edx, edx
.text:0040162A                 jnz     loc_4017B0
.text:00401630
.text:00401630 loc_401630:                             ; CODE XREF: sub_401610+217↓j
.text:00401630                                         ; sub_401610+252↓j ...
.text:00401630                 call    sub_4015D0
.text:00401635                 test    al, al
.text:00401637                 jnz     loc_401780
.text:0040163D
.text:0040163D loc_40163D:                             ; CODE XREF: sub_401610+19B↓j
.text:0040163D                 mov     eax, [ebx]
.text:0040163F                 test    eax, eax
.text:00401641                 jnz     short loc_401677
.text:00401643
.text:00401643 loc_401643:                             ; CODE XREF: sub_401610+98↓j
.text:00401643                                         ; sub_401610+C5↓j ...
.text:00401643                 mov     esi, [ebx]
.text:00401645                 lea     ebp, [ebx+4]
.text:00401648                 mov     ds:dword_410000, ebp
.text:0040164E
.text:0040164E loc_40164E:                             ; CODE XREF: sub_401610+1E1↓j
.text:0040164E                 mov     [esp+5Ch+Str1], 10h ; size_t
.text:00401655                 call    sub_40BCC0
.text:0040165A                 mov     dword ptr [eax], 1
.text:00401660                 mov     edi, eax
.text:00401662                 mov     [esp+5Ch+Str1], esi ; char *
.text:00401665                 call    sub_40BE80
.text:0040166A                 mov     [edi+8], eax
.text:0040166D                 mov     eax, edi
.text:0040166F
.text:0040166F loc_40166F:                             ; CODE XREF: sub_401610+13C↓j
.text:0040166F                                         ; sub_401610+3A9↓j
.text:0040166F                 add     esp, 4Ch
.text:00401672                 pop     ebx
.text:00401673                 pop     esi
.text:00401674                 pop     edi
.text:00401675                 pop     ebp
.text:00401676                 retn
.text:00401677 ; ---------------------------------------------------------------------------
.text:00401677
.text:00401677 loc_401677:                             ; CODE XREF: sub_401610+31↑j
.text:00401677                 mov     [esp+5Ch+Str2], offset Str2 ; "("
.text:0040167F                 mov     edx, [ebx]
.text:00401681                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401684                 call    strcmp
.text:00401689                 test    eax, eax
.text:0040168B                 mov     ecx, ds:dword_410000
.text:00401691                 setz    bl
.text:00401694                 movzx   esi, bl
.text:00401697                 lea     ebx, [ecx+esi*4]
.text:0040169A                 mov     ds:dword_410000, ebx
.text:004016A0                 test    esi, esi
.text:004016A2                 jnz     short loc_40170B
.text:004016A4                 mov     eax, [ebx]
.text:004016A6                 test    eax, eax
.text:004016A8                 jz      short loc_401643
.text:004016AA                 mov     [esp+5Ch+Str2], offset asc_4015E3 ; ")"
.text:004016B2                 mov     edx, [ebx]
.text:004016B4                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004016B7                 call    strcmp
.text:004016BC                 test    eax, eax
.text:004016BE                 mov     edi, ds:dword_410000
.text:004016C4                 setz    cl
.text:004016C7                 movzx   esi, cl
.text:004016CA                 lea     ebx, [edi+esi*4]
.text:004016CD                 mov     ds:dword_410000, ebx
.text:004016D3                 test    esi, esi
.text:004016D5                 jz      loc_401643
.text:004016DB                 mov     [esp+5Ch+Str1], offset aSyntaxError ; "syntax error"
.text:004016E2                 call    ds:libintl_gettext
.text:004016E8                 mov     [esp+5Ch+Str2], 0 ; ErrorMessage
.text:004016F0                 mov     [esp+5Ch+Str1], 2 ; Code
.text:004016F7                 mov     [esp+5Ch+Count], eax ; char *
.text:004016FB                 call    sub_40D830
.text:00401700                 mov     ebx, ds:dword_410000
.text:00401706                 jmp     loc_401643
.text:0040170B ; ---------------------------------------------------------------------------
.text:0040170B
.text:0040170B loc_40170B:                             ; CODE XREF: sub_401610+92↑j
.text:0040170B                 movzx   edi, [esp+5Ch+var_3D]
.text:00401710                 mov     [esp+5Ch+Str1], edi
.text:00401713                 call    sub_401CC0
.text:00401718                 mov     esi, eax
.text:0040171A                 mov     eax, ds:dword_410000
.text:0040171F                 mov     ebp, [eax]
.text:00401721                 test    ebp, ebp
.text:00401723                 jnz     short loc_401751
.text:00401725
.text:00401725 loc_401725:                             ; CODE XREF: sub_401610+16C↓j
.text:00401725                 mov     [esp+5Ch+Str1], offset aSyntaxError ; "syntax error"
.text:0040172C                 call    ds:libintl_gettext
.text:00401732                 mov     [esp+5Ch+Str2], 0 ; ErrorMessage
.text:0040173A                 mov     [esp+5Ch+Str1], 2 ; Code
.text:00401741                 mov     [esp+5Ch+Count], eax ; char *
.text:00401745                 call    sub_40D830
.text:0040174A
.text:0040174A loc_40174A:                             ; CODE XREF: sub_401610+16A↓j
.text:0040174A                 mov     eax, esi
.text:0040174C                 jmp     loc_40166F
.text:00401751 ; ---------------------------------------------------------------------------
.text:00401751
.text:00401751 loc_401751:                             ; CODE XREF: sub_401610+113↑j
.text:00401751                 mov     [esp+5Ch+Str2], offset asc_4015E3 ; ")"
.text:00401759                 mov     ebp, [eax]
.text:0040175B                 mov     [esp+5Ch+Str1], ebp ; Str1
.text:0040175E                 call    strcmp
.text:00401763                 test    eax, eax
.text:00401765                 setz    bl
.text:00401768                 movzx   ecx, bl
.text:0040176B                 lea     edx, ds:0[ecx*4]
.text:00401772                 add     ds:dword_410000, edx
.text:00401778                 test    ecx, ecx
.text:0040177A                 jnz     short loc_40174A
.text:0040177C                 jmp     short loc_401725
.text:0040177C ; ---------------------------------------------------------------------------
.text:0040177E                 align 10h
.text:00401780
.text:00401780 loc_401780:                             ; CODE XREF: sub_401610+27↑j
.text:00401780                 mov     [esp+5Ch+Str1], offset aSyntaxError ; "syntax error"
.text:00401787                 call    ds:libintl_gettext
.text:0040178D                 mov     [esp+5Ch+Str2], 0 ; ErrorMessage
.text:00401795                 mov     [esp+5Ch+Str1], 2 ; Code
.text:0040179C                 mov     [esp+5Ch+Count], eax ; char *
.text:004017A0                 call    sub_40D830
.text:004017A5                 mov     ebx, ds:dword_410000
.text:004017AB                 jmp     loc_40163D
.text:004017B0 ; ---------------------------------------------------------------------------
.text:004017B0
.text:004017B0 loc_4017B0:                             ; CODE XREF: sub_401610+1A↑j
.text:004017B0                 mov     [esp+5Ch+Str2], offset asc_4015E5 ; "+"
.text:004017B8                 mov     edi, [ebx]
.text:004017BA                 mov     [esp+5Ch+Str1], edi ; Str1
.text:004017BD                 call    strcmp
.text:004017C2                 test    eax, eax
.text:004017C4                 mov     esi, ds:dword_410000
.text:004017CA                 setz    bl
.text:004017CD                 movzx   ecx, bl
.text:004017D0                 lea     ebx, [esi+ecx*4]
.text:004017D3                 mov     ds:dword_410000, ebx
.text:004017D9                 test    ecx, ecx
.text:004017DB                 jz      short loc_401823
.text:004017DD                 call    sub_4015D0
.text:004017E2                 test    al, al
.text:004017E4                 jnz     short loc_4017F6
.text:004017E6
.text:004017E6 loc_4017E6:                             ; CODE XREF: sub_401610+211↓j
.text:004017E6                 mov     esi, [ebx]
.text:004017E8                 add     ebx, 4
.text:004017EB                 mov     ds:dword_410000, ebx
.text:004017F1                 jmp     loc_40164E
.text:004017F6 ; ---------------------------------------------------------------------------
.text:004017F6
.text:004017F6 loc_4017F6:                             ; CODE XREF: sub_401610+1D4↑j
.text:004017F6                 mov     [esp+5Ch+Str1], offset aSyntaxError ; "syntax error"
.text:004017FD                 call    ds:libintl_gettext
.text:00401803                 mov     [esp+5Ch+Str2], 0 ; ErrorMessage
.text:0040180B                 mov     [esp+5Ch+Str1], 2 ; Code
.text:00401812                 mov     [esp+5Ch+Count], eax ; char *
.text:00401816                 call    sub_40D830
.text:0040181B                 mov     ebx, ds:dword_410000
.text:00401821                 jmp     short loc_4017E6
.text:00401823 ; ---------------------------------------------------------------------------
.text:00401823
.text:00401823 loc_401823:                             ; CODE XREF: sub_401610+1CB↑j
.text:00401823                 mov     ebp, [ebx]
.text:00401825                 test    ebp, ebp
.text:00401827                 jz      loc_401630
.text:0040182D                 mov     [esp+5Ch+Str2], offset aLength ; "length"
.text:00401835                 mov     esi, [ebx]
.text:00401837                 mov     [esp+5Ch+Str1], esi ; Str1
.text:0040183A                 call    strcmp
.text:0040183F                 test    eax, eax
.text:00401841                 mov     ecx, ds:dword_410000
.text:00401847                 setz    bl
.text:0040184A                 movzx   edx, bl
.text:0040184D                 lea     ebx, [ecx+edx*4]
.text:00401850                 mov     ds:dword_410000, ebx
.text:00401856                 test    edx, edx
.text:00401858                 jnz     loc_401C39
.text:0040185E                 mov     eax, [ebx]
.text:00401860                 test    eax, eax
.text:00401862                 jz      loc_401630
.text:00401868                 mov     [esp+5Ch+Str2], offset aMatch ; "match"
.text:00401870                 mov     ebp, [ebx]
.text:00401872                 mov     [esp+5Ch+Str1], ebp ; Str1
.text:00401875                 call    strcmp
.text:0040187A                 test    eax, eax
.text:0040187C                 mov     edx, ds:dword_410000
.text:00401882                 setz    cl
.text:00401885                 movzx   edi, cl
.text:00401888                 lea     ebx, [edx+edi*4]
.text:0040188B                 mov     ds:dword_410000, ebx
.text:00401891                 test    edi, edi
.text:00401893                 jnz     loc_401BFC
.text:00401899                 mov     eax, [ebx]
.text:0040189B                 test    eax, eax
.text:0040189D                 jz      loc_401630
.text:004018A3                 mov     [esp+5Ch+Str2], offset aIndex ; "index"
.text:004018AB                 mov     ecx, [ebx]
.text:004018AD                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:004018B0                 call    strcmp
.text:004018B5                 test    eax, eax
.text:004018B7                 mov     edx, ds:dword_410000
.text:004018BD                 setz    bl
.text:004018C0                 movzx   edi, bl
.text:004018C3                 lea     ebx, [edx+edi*4]
.text:004018C6                 mov     ds:dword_410000, ebx
.text:004018CC                 test    edi, edi
.text:004018CE                 jnz     loc_401AC1
.text:004018D4                 mov     eax, [ebx]
.text:004018D6                 test    eax, eax
.text:004018D8                 jz      loc_401630
.text:004018DE                 mov     [esp+5Ch+Str2], offset aSubstr ; "substr"
.text:004018E6                 mov     edx, [ebx]
.text:004018E8                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004018EB                 call    strcmp
.text:004018F0                 test    eax, eax
.text:004018F2                 mov     esi, ds:dword_410000
.text:004018F8                 setz    bl
.text:004018FB                 movzx   edi, bl
.text:004018FE                 lea     ebx, [esi+edi*4]
.text:00401901                 mov     ds:dword_410000, ebx
.text:00401907                 test    edi, edi
.text:00401909                 jz      loc_401630
.text:0040190F                 movzx   esi, [esp+5Ch+var_3D]
.text:00401914                 mov     [esp+5Ch+Str1], esi
.text:00401917                 call    sub_401610
.text:0040191C                 mov     [esp+5Ch+Str1], esi
.text:0040191F                 mov     ebp, eax
.text:00401921                 call    sub_401610
.text:00401926                 mov     [esp+5Ch+Str1], esi
.text:00401929                 mov     edi, eax
.text:0040192B                 call    sub_401610
.text:00401930                 mov     esi, eax
.text:00401932                 mov     eax, [ebp+0]
.text:00401935                 test    eax, eax
.text:00401937                 jz      loc_401A90
.text:0040193D                 dec     eax
.text:0040193E                 jnz     loc_401CAE
.text:00401944
.text:00401944 loc_401944:                             ; CODE XREF: sub_401610+4AC↓j
.text:00401944                 mov     [esp+5Ch+Str1], edi
.text:00401947                 call    sub_402A90
.text:0040194C                 test    al, al
.text:0040194E                 jz      short loc_401960
.text:00401950                 mov     [esp+5Ch+Str1], esi
.text:00401953                 call    sub_402A90
.text:00401958                 test    al, al
.text:0040195A                 jnz     loc_4019E5
.text:00401960
.text:00401960 loc_401960:                             ; CODE XREF: sub_401610+33E↑j
.text:00401960                                         ; sub_401610+3EA↓j ...
.text:00401960                 mov     [esp+5Ch+Str1], 10h ; size_t
.text:00401967                 call    sub_40BCC0
.text:0040196C                 mov     dword ptr [eax], 1
.text:00401972                 mov     ebx, eax
.text:00401974                 mov     [esp+5Ch+Str1], offset Locale ; char *
.text:0040197B                 call    sub_40BE80
.text:00401980                 mov     [ebx+8], eax
.text:00401983                 mov     [esp+5Ch+var_44], ebx
.text:00401987
.text:00401987 loc_401987:                             ; CODE XREF: sub_401610+464↓j
.text:00401987                 cmp     dword ptr [ebp+0], 1
.text:0040198B                 jz      short loc_4019D8
.text:0040198D
.text:0040198D loc_40198D:                             ; CODE XREF: sub_401610+3D3↓j
.text:0040198D                 mov     [esp+5Ch+Str1], ebp ; Block
.text:00401990                 call    free
.text:00401995                 cmp     dword ptr [edi], 1
.text:00401998                 jz      short loc_4019CB
.text:0040199A
.text:0040199A loc_40199A:                             ; CODE XREF: sub_401610+3C6↓j
.text:0040199A                 mov     [esp+5Ch+Str1], edi ; Block
.text:0040199D                 call    free
.text:004019A2                 cmp     dword ptr [esi], 1
.text:004019A5                 jz      short loc_4019BE
.text:004019A7
.text:004019A7 loc_4019A7:                             ; CODE XREF: sub_401610+3B9↓j
.text:004019A7                 mov     [esp+5Ch+Str1], esi ; Block
.text:004019AA                 lea     esi, [esi+0]
.text:004019B0
.text:004019B0 loc_4019B0:                             ; CODE XREF: sub_401610+56C↓j
.text:004019B0                 call    free
.text:004019B5                 mov     eax, [esp+5Ch+var_44]
.text:004019B9                 jmp     loc_40166F
.text:004019BE ; ---------------------------------------------------------------------------
.text:004019BE
.text:004019BE loc_4019BE:                             ; CODE XREF: sub_401610+395↑j
.text:004019BE                 mov     edi, [esi+8]
.text:004019C1                 mov     [esp+5Ch+Str1], edi ; Block
.text:004019C4                 call    free
.text:004019C9                 jmp     short loc_4019A7
.text:004019CB ; ---------------------------------------------------------------------------
.text:004019CB
.text:004019CB loc_4019CB:                             ; CODE XREF: sub_401610+388↑j
.text:004019CB                 mov     ebp, [edi+8]
.text:004019CE                 mov     [esp+5Ch+Str1], ebp ; Block
.text:004019D1                 call    free
.text:004019D6                 jmp     short loc_40199A
.text:004019D8 ; ---------------------------------------------------------------------------
.text:004019D8
.text:004019D8 loc_4019D8:                             ; CODE XREF: sub_401610+37B↑j
.text:004019D8                 mov     edx, [ebp+8]
.text:004019DB                 mov     [esp+5Ch+Str1], edx ; Block
.text:004019DE                 call    free
.text:004019E3                 jmp     short loc_40198D
.text:004019E5 ; ---------------------------------------------------------------------------
.text:004019E5
.text:004019E5 loc_4019E5:                             ; CODE XREF: sub_401610+34A↑j
.text:004019E5                 mov     ecx, [ebp+8]
.text:004019E8                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004019EB                 call    strlen
.text:004019F0                 mov     ebx, [edi+0Ch]
.text:004019F3                 xor     edx, edx
.text:004019F5                 mov     ecx, [edi+8]
.text:004019F8                 cmp     edx, ebx
.text:004019FA                 jl      loc_401960
.text:00401A00                 jg      short loc_401A0A
.text:00401A02                 cmp     eax, ecx
.text:00401A04                 jb      loc_401960
.text:00401A0A
.text:00401A0A loc_401A0A:                             ; CODE XREF: sub_401610+3F0↑j
.text:00401A0A                 test    ebx, ebx
.text:00401A0C                 js      loc_401960
.text:00401A12                 test    ebx, ebx
.text:00401A14                 jle     short loc_401A83
.text:00401A16
.text:00401A16 loc_401A16:                             ; CODE XREF: sub_401610+47C↓j
.text:00401A16                 mov     edx, [esi+0Ch]
.text:00401A19                 mov     eax, [esi+8]
.text:00401A1C                 test    edx, edx
.text:00401A1E                 js      loc_401960
.text:00401A24                 test    edx, edx
.text:00401A26                 jle     short loc_401A79
.text:00401A28
.text:00401A28 loc_401A28:                             ; CODE XREF: sub_401610+46C↓j
.text:00401A28                 mov     [esp+5Ch+Str1], 10h ; size_t
.text:00401A2F                 call    sub_40BCC0
.text:00401A34                 mov     [esp+5Ch+var_44], eax
.text:00401A38                 mov     ebx, [esi+8]
.text:00401A3B                 mov     dword ptr [eax], 1
.text:00401A41                 inc     ebx
.text:00401A42                 mov     [esp+5Ch+Str1], ebx ; size_t
.text:00401A45                 call    sub_40BCC0
.text:00401A4A                 mov     ecx, [esi+8]
.text:00401A4D                 mov     [esp+5Ch+Count], ecx ; Count
.text:00401A51                 mov     ebx, [edi+8]
.text:00401A54                 mov     edx, [ebp+8]
.text:00401A57                 mov     [esp+5Ch+Str1], eax ; Destination
.text:00401A5A                 add     ebx, edx
.text:00401A5C                 dec     ebx
.text:00401A5D                 mov     [esp+5Ch+Str2], ebx ; Source
.text:00401A61                 call    strncpy
.text:00401A66                 mov     ecx, [esp+5Ch+var_44]
.text:00401A6A                 mov     [ecx+8], eax
.text:00401A6D                 mov     ebx, [esi+8]
.text:00401A70                 mov     byte ptr [ebx+eax], 0
.text:00401A74                 jmp     loc_401987
.text:00401A79 ; ---------------------------------------------------------------------------
.text:00401A79
.text:00401A79 loc_401A79:                             ; CODE XREF: sub_401610+416↑j
.text:00401A79                 cmp     eax, 0
.text:00401A7C                 ja      short loc_401A28
.text:00401A7E                 jmp     loc_401960
.text:00401A83 ; ---------------------------------------------------------------------------
.text:00401A83
.text:00401A83 loc_401A83:                             ; CODE XREF: sub_401610+404↑j
.text:00401A83                 cmp     ecx, 0
.text:00401A86                 jbe     loc_401960
.text:00401A8C                 jmp     short loc_401A16
.text:00401A8C ; ---------------------------------------------------------------------------
.text:00401A8E                 align 10h
.text:00401A90
.text:00401A90 loc_401A90:                             ; CODE XREF: sub_401610+327↑j
.text:00401A90                 lea     edx, [esp+5Ch+var_3C]
.text:00401A94                 mov     [esp+5Ch+Count], edx
.text:00401A98                 mov     ecx, [ebp+0Ch]
.text:00401A9B                 mov     ebx, [ebp+8]
.text:00401A9E                 mov     [esp+5Ch+Str2], ecx
.text:00401AA2                 mov     [esp+5Ch+Str1], ebx
.text:00401AA5                 call    sub_40BBC0
.text:00401AAA                 mov     [esp+5Ch+Str1], eax ; char *
.text:00401AAD                 call    sub_40BE80
.text:00401AB2                 mov     [ebp+8], eax
.text:00401AB5                 mov     dword ptr [ebp+0], 1
.text:00401ABC                 jmp     loc_401944
.text:00401AC1 ; ---------------------------------------------------------------------------
.text:00401AC1
.text:00401AC1 loc_401AC1:                             ; CODE XREF: sub_401610+2BE↑j
.text:00401AC1                 movzx   esi, [esp+5Ch+var_3D]
.text:00401AC6                 mov     [esp+5Ch+Str1], esi
.text:00401AC9                 call    sub_401610
.text:00401ACE                 mov     [esp+5Ch+Str1], esi
.text:00401AD1                 mov     ebp, eax
.text:00401AD3                 call    sub_401610
.text:00401AD8                 mov     edi, eax
.text:00401ADA                 mov     eax, [ebp+0]
.text:00401ADD                 test    eax, eax
.text:00401ADF                 jz      loc_401BCB
.text:00401AE5                 dec     eax
.text:00401AE6                 jnz     loc_401CAE
.text:00401AEC
.text:00401AEC loc_401AEC:                             ; CODE XREF: sub_401610+5E7↓j
.text:00401AEC                 mov     eax, [edi]
.text:00401AEE                 test    eax, eax
.text:00401AF0                 jz      loc_401B9B
.text:00401AF6                 dec     eax
.text:00401AF7                 jnz     loc_401CAE
.text:00401AFD
.text:00401AFD loc_401AFD:                             ; CODE XREF: sub_401610+5B6↓j
.text:00401AFD                 mov     ebx, [edi+8]
.text:00401B00                 mov     [esp+5Ch+Str2], ebx ; Control
.text:00401B04                 mov     esi, [ebp+8]
.text:00401B07                 mov     [esp+5Ch+Str1], esi ; Str
.text:00401B0A                 xor     esi, esi
.text:00401B0C                 call    strcspn
.text:00401B11                 mov     [esp+5Ch+Str1], 10h ; size_t
.text:00401B18                 inc     eax
.text:00401B19                 mov     ebx, eax
.text:00401B1B                 call    sub_40BCC0
.text:00401B20                 mov     [eax+8], ebx
.text:00401B23                 xor     ebx, ebx
.text:00401B25                 mov     [eax+0Ch], esi
.text:00401B28                 mov     [esp+5Ch+var_44], eax
.text:00401B2C                 mov     ecx, [ebp+8]
.text:00401B2F                 mov     dword ptr [eax], 0
.text:00401B35                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401B38                 call    strlen
.text:00401B3D                 mov     esi, [esp+5Ch+var_44]
.text:00401B41                 inc     eax
.text:00401B42                 mov     ecx, eax
.text:00401B44                 mov     edx, [esi+0Ch]
.text:00401B47                 mov     eax, [esi+8]
.text:00401B4A                 mov     esi, edx
.text:00401B4C                 xor     esi, ebx
.text:00401B4E                 xor     eax, ecx
.text:00401B50                 or      esi, eax
.text:00401B52                 jnz     short loc_401B66
.text:00401B54                 mov     edx, [esp+5Ch+var_44]
.text:00401B58                 mov     dword ptr [edx+8], 0
.text:00401B5F                 mov     dword ptr [edx+0Ch], 0
.text:00401B66
.text:00401B66 loc_401B66:                             ; CODE XREF: sub_401610+542↑j
.text:00401B66                                         ; sub_401610+624↓j
.text:00401B66                 cmp     dword ptr [ebp+0], 1
.text:00401B6A                 jz      short loc_401B8E
.text:00401B6C
.text:00401B6C loc_401B6C:                             ; CODE XREF: sub_401610+589↓j
.text:00401B6C                 mov     [esp+5Ch+Str1], ebp ; Block
.text:00401B6F                 call    free
.text:00401B74
.text:00401B74 loc_401B74:                             ; CODE XREF: sub_401610+60E↓j
.text:00401B74                                         ; sub_401610+66C↓j
.text:00401B74                 cmp     dword ptr [edi], 1
.text:00401B77                 jz      short loc_401B81
.text:00401B79
.text:00401B79 loc_401B79:                             ; CODE XREF: sub_401610+57C↓j
.text:00401B79                 mov     [esp+5Ch+Str1], edi
.text:00401B7C                 jmp     loc_4019B0
.text:00401B81 ; ---------------------------------------------------------------------------
.text:00401B81
.text:00401B81 loc_401B81:                             ; CODE XREF: sub_401610+567↑j
.text:00401B81                 mov     ebp, [edi+8]
.text:00401B84                 mov     [esp+5Ch+Str1], ebp ; Block
.text:00401B87                 call    free
.text:00401B8C                 jmp     short loc_401B79
.text:00401B8E ; ---------------------------------------------------------------------------
.text:00401B8E
.text:00401B8E loc_401B8E:                             ; CODE XREF: sub_401610+55A↑j
.text:00401B8E                 mov     ecx, [ebp+8]
.text:00401B91                 mov     [esp+5Ch+Str1], ecx ; Block
.text:00401B94                 call    free
.text:00401B99                 jmp     short loc_401B6C
.text:00401B9B ; ---------------------------------------------------------------------------
.text:00401B9B
.text:00401B9B loc_401B9B:                             ; CODE XREF: sub_401610+4E0↑j
.text:00401B9B                 lea     edx, [esp+5Ch+var_3C]
.text:00401B9F                 mov     [esp+5Ch+Count], edx
.text:00401BA3                 mov     ebx, [edi+8]
.text:00401BA6                 mov     esi, [edi+0Ch]
.text:00401BA9                 mov     [esp+5Ch+Str1], ebx
.text:00401BAC                 mov     [esp+5Ch+Str2], esi
.text:00401BB0                 call    sub_40BBC0
.text:00401BB5                 mov     [esp+5Ch+Str1], eax ; char *
.text:00401BB8                 call    sub_40BE80
.text:00401BBD                 mov     [edi+8], eax
.text:00401BC0                 mov     dword ptr [edi], 1
.text:00401BC6                 jmp     loc_401AFD
.text:00401BCB ; ---------------------------------------------------------------------------
.text:00401BCB
.text:00401BCB loc_401BCB:                             ; CODE XREF: sub_401610+4CF↑j
.text:00401BCB                 lea     ecx, [esp+5Ch+var_3C]
.text:00401BCF                 mov     [esp+5Ch+Count], ecx
.text:00401BD3                 mov     edx, [ebp+8]
.text:00401BD6                 mov     ebx, [ebp+0Ch]
.text:00401BD9                 mov     [esp+5Ch+Str1], edx
.text:00401BDC                 mov     [esp+5Ch+Str2], ebx
.text:00401BE0                 call    sub_40BBC0
.text:00401BE5                 mov     [esp+5Ch+Str1], eax ; char *
.text:00401BE8                 call    sub_40BE80
.text:00401BED                 mov     [ebp+8], eax
.text:00401BF0                 mov     dword ptr [ebp+0], 1
.text:00401BF7                 jmp     loc_401AEC
.text:00401BFC ; ---------------------------------------------------------------------------
.text:00401BFC
.text:00401BFC loc_401BFC:                             ; CODE XREF: sub_401610+283↑j
.text:00401BFC                 movzx   esi, [esp+5Ch+var_3D]
.text:00401C01                 mov     [esp+5Ch+Str1], esi
.text:00401C04                 call    sub_401610
.text:00401C09                 mov     [esp+5Ch+Str1], esi
.text:00401C0C                 mov     ebp, eax
.text:00401C0E                 call    sub_401610
.text:00401C13                 cmp     [esp+5Ch+var_3D], 0
.text:00401C18                 mov     edi, eax
.text:00401C1A                 mov     [esp+5Ch+var_44], ebp
.text:00401C1E                 jz      loc_401B74
.text:00401C24                 mov     [esp+5Ch+Str2], eax
.text:00401C28                 mov     [esp+5Ch+Str1], ebp
.text:00401C2B                 call    near ptr loc_402C0F+1
.text:00401C30                 mov     [esp+5Ch+var_44], eax
.text:00401C34                 jmp     loc_401B66
.text:00401C39 ; ---------------------------------------------------------------------------
.text:00401C39
.text:00401C39 loc_401C39:                             ; CODE XREF: sub_401610+248↑j
.text:00401C39                 movzx   edi, [esp+5Ch+var_3D]
.text:00401C3E                 mov     [esp+5Ch+Str1], edi
.text:00401C41                 call    sub_401610
.text:00401C46                 mov     edi, eax
.text:00401C48                 mov     eax, [eax]
.text:00401C4A                 test    eax, eax
.text:00401C4C                 jz      short loc_401C81
.text:00401C4E                 dec     eax
.text:00401C4F                 jnz     short loc_401CAE
.text:00401C51
.text:00401C51 loc_401C51:                             ; CODE XREF: sub_401610+69C↓j
.text:00401C51                 mov     ebx, [edi+8]
.text:00401C54                 xor     ebp, ebp
.text:00401C56                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401C59                 call    strlen
.text:00401C5E                 mov     [esp+5Ch+Str1], 10h ; size_t
.text:00401C65                 mov     esi, eax
.text:00401C67                 call    sub_40BCC0
.text:00401C6C                 mov     [eax+8], esi
.text:00401C6F                 mov     [eax+0Ch], ebp
.text:00401C72                 mov     dword ptr [eax], 0
.text:00401C78                 mov     [esp+5Ch+var_44], eax
.text:00401C7C                 jmp     loc_401B74
.text:00401C81 ; ---------------------------------------------------------------------------
.text:00401C81
.text:00401C81 loc_401C81:                             ; CODE XREF: sub_401610+63C↑j
.text:00401C81                 lea     ecx, [esp+5Ch+var_3C]
.text:00401C85                 mov     [esp+5Ch+Count], ecx
.text:00401C89                 mov     edx, [edi+8]
.text:00401C8C                 mov     ebp, [edi+0Ch]
.text:00401C8F                 mov     [esp+5Ch+Str1], edx
.text:00401C92                 mov     [esp+5Ch+Str2], ebp
.text:00401C96                 call    sub_40BBC0
.text:00401C9B                 mov     [esp+5Ch+Str1], eax ; char *
.text:00401C9E                 call    sub_40BE80
.text:00401CA3                 mov     [edi+8], eax
.text:00401CA6                 mov     dword ptr [edi], 1
.text:00401CAC                 jmp     short loc_401C51
.text:00401CAE ; ---------------------------------------------------------------------------
.text:00401CAE
.text:00401CAE loc_401CAE:                             ; CODE XREF: sub_401610+32E↑j
.text:00401CAE                                         ; sub_401610+4D6↑j ...
.text:00401CAE                 call    abort
.text:00401CAE sub_401610      endp
.text:00401CAE
.text:00401CAE ; ---------------------------------------------------------------------------
.text:00401CB3 ; const char asc_401CB3[2]
.text:00401CB3 asc_401CB3      db '&',0                ; DATA XREF: sub_401CC0+2D↓o
.text:00401CB3                                         ; sub_401CC0+17F↓o
.text:00401CB5 ; const char asc_401CB5[2]
.text:00401CB5 asc_401CB5      db '|',0                ; DATA XREF: sub_401CC0+11A↓o
.text:00401CB7                 align 10h
.text:00401CC0
.text:00401CC0 ; =============== S U B R O U T I N E =======================================
.text:00401CC0
.text:00401CC0
.text:00401CC0 sub_401CC0      proc near               ; CODE XREF: sub_401360+144↑p
.text:00401CC0                                         ; sub_401610+103↑p
.text:00401CC0
.text:00401CC0 Str1            = dword ptr -1Ch
.text:00401CC0 Str2            = dword ptr -18h
.text:00401CC0 var_11          = byte ptr -11h
.text:00401CC0 arg_0           = byte ptr  4
.text:00401CC0
.text:00401CC0                 push    ebp
.text:00401CC1                 push    edi
.text:00401CC2                 push    esi
.text:00401CC3                 push    ebx
.text:00401CC4                 sub     esp, 0Ch
.text:00401CC7                 movzx   edx, [esp+1Ch+arg_0]
.text:00401CCC                 movzx   ebx, dl
.text:00401CCF                 mov     [esp+1Ch+var_11], dl
.text:00401CD3                 mov     [esp+1Ch+Str1], ebx
.text:00401CD6                 call    sub_402F90
.text:00401CDB
.text:00401CDB loc_401CDB:                             ; CODE XREF: sub_401CC0+C3↓j
.text:00401CDB                 mov     edi, eax
.text:00401CDD
.text:00401CDD loc_401CDD:                             ; CODE XREF: sub_401CC0+FB↓j
.text:00401CDD                 mov     edx, ds:dword_410000
.text:00401CE3                 mov     eax, [edx]
.text:00401CE5                 test    eax, eax
.text:00401CE7                 jz      loc_401DCD
.text:00401CED                 mov     [esp+1Ch+Str2], offset asc_401CB3 ; "&"
.text:00401CF5                 mov     ebp, [edx]
.text:00401CF7                 mov     [esp+1Ch+Str1], ebp ; Str1
.text:00401CFA                 call    strcmp
.text:00401CFF                 test    eax, eax
.text:00401D01                 mov     esi, ds:dword_410000
.text:00401D07                 setz    dl
.text:00401D0A                 movzx   ecx, dl
.text:00401D0D                 lea     edx, [esi+ecx*4]
.text:00401D10                 mov     ds:dword_410000, edx
.text:00401D16                 test    ecx, ecx
.text:00401D18                 jz      loc_401DCD
.text:00401D1E                 mov     [esp+1Ch+Str1], edi
.text:00401D21                 call    sub_401550
.text:00401D26                 movzx   esi, al
.text:00401D29                 not     esi
.text:00401D2B                 test    esi, ebx
.text:00401D2D                 setnz   dl
.text:00401D30                 movzx   ecx, dl
.text:00401D33                 mov     [esp+1Ch+Str1], ecx
.text:00401D36                 call    sub_402F90
.text:00401D3B                 mov     [esp+1Ch+Str1], edi
.text:00401D3E                 mov     esi, eax
.text:00401D40                 call    sub_401550
.text:00401D45                 test    al, al
.text:00401D47                 jz      short loc_401DA2
.text:00401D49
.text:00401D49 loc_401D49:                             ; CODE XREF: sub_401CC0+EC↓j
.text:00401D49                 cmp     dword ptr [edi], 1
.text:00401D4C                 jz      short loc_401D95
.text:00401D4E
.text:00401D4E loc_401D4E:                             ; CODE XREF: sub_401CC0+E0↓j
.text:00401D4E                 mov     [esp+1Ch+Str1], edi ; Block
.text:00401D51                 call    free
.text:00401D56                 cmp     dword ptr [esi], 1
.text:00401D59                 jz      short loc_401D88
.text:00401D5B
.text:00401D5B loc_401D5B:                             ; CODE XREF: sub_401CC0+D3↓j
.text:00401D5B                 mov     [esp+1Ch+Str1], esi ; Block
.text:00401D5E                 call    free
.text:00401D63                 mov     [esp+1Ch+Str1], 10h ; size_t
.text:00401D6A                 call    sub_40BCC0
.text:00401D6F                 mov     dword ptr [eax], 0
.text:00401D75                 mov     dword ptr [eax+8], 0
.text:00401D7C                 mov     dword ptr [eax+0Ch], 0
.text:00401D83                 jmp     loc_401CDB
.text:00401D88 ; ---------------------------------------------------------------------------
.text:00401D88
.text:00401D88 loc_401D88:                             ; CODE XREF: sub_401CC0+99↑j
.text:00401D88                 mov     edi, [esi+8]
.text:00401D8B                 mov     [esp+1Ch+Str1], edi ; Block
.text:00401D8E                 call    free
.text:00401D93                 jmp     short loc_401D5B
.text:00401D95 ; ---------------------------------------------------------------------------
.text:00401D95
.text:00401D95 loc_401D95:                             ; CODE XREF: sub_401CC0+8C↑j
.text:00401D95                 mov     ebp, [edi+8]
.text:00401D98                 mov     [esp+1Ch+Str1], ebp ; Block
.text:00401D9B                 call    free
.text:00401DA0                 jmp     short loc_401D4E
.text:00401DA2 ; ---------------------------------------------------------------------------
.text:00401DA2
.text:00401DA2 loc_401DA2:                             ; CODE XREF: sub_401CC0+87↑j
.text:00401DA2                 mov     [esp+1Ch+Str1], esi
.text:00401DA5                 call    sub_401550
.text:00401DAA                 test    al, al
.text:00401DAC                 jnz     short loc_401D49
.text:00401DAE                 cmp     dword ptr [esi], 1
.text:00401DB1                 jz      short loc_401DC0
.text:00401DB3
.text:00401DB3 loc_401DB3:                             ; CODE XREF: sub_401CC0+10B↓j
.text:00401DB3                 mov     [esp+1Ch+Str1], esi ; Block
.text:00401DB6                 call    free
.text:00401DBB                 jmp     loc_401CDD
.text:00401DC0 ; ---------------------------------------------------------------------------
.text:00401DC0
.text:00401DC0 loc_401DC0:                             ; CODE XREF: sub_401CC0+F1↑j
.text:00401DC0                 mov     ecx, [esi+8]
.text:00401DC3                 mov     [esp+1Ch+Str1], ecx ; Block
.text:00401DC6                 call    free
.text:00401DCB                 jmp     short loc_401DB3
.text:00401DCD ; ---------------------------------------------------------------------------
.text:00401DCD
.text:00401DCD loc_401DCD:                             ; CODE XREF: sub_401CC0+27↑j
.text:00401DCD                                         ; sub_401CC0+58↑j
.text:00401DCD                 mov     ebp, edi
.text:00401DCF                 nop
.text:00401DD0
.text:00401DD0 loc_401DD0:                             ; CODE XREF: sub_401CC0+2C8↓j
.text:00401DD0                 mov     ebx, [edx]
.text:00401DD2                 test    ebx, ebx
.text:00401DD4                 jz      loc_401FC3
.text:00401DDA                 mov     [esp+1Ch+Str2], offset asc_401CB5 ; "|"
.text:00401DE2                 mov     ecx, [edx]
.text:00401DE4                 mov     [esp+1Ch+Str1], ecx ; Str1
.text:00401DE7                 call    strcmp
.text:00401DEC                 test    eax, eax
.text:00401DEE                 setz    dl
.text:00401DF1                 movzx   esi, dl
.text:00401DF4                 lea     edi, ds:0[esi*4]
.text:00401DFB                 add     ds:dword_410000, edi
.text:00401E01                 test    esi, esi
.text:00401E03                 jz      loc_401FC3
.text:00401E09                 mov     [esp+1Ch+Str1], ebp
.text:00401E0C                 xor     ebx, ebx
.text:00401E0E                 call    sub_401550
.text:00401E13                 test    al, al
.text:00401E15                 jz      short loc_401E20
.text:00401E17                 cmp     [esp+1Ch+var_11], 0
.text:00401E1C                 jz      short loc_401E20
.text:00401E1E                 mov     bl, 1
.text:00401E20
.text:00401E20 loc_401E20:                             ; CODE XREF: sub_401CC0+155↑j
.text:00401E20                                         ; sub_401CC0+15C↑j
.text:00401E20                 movzx   ebx, bl
.text:00401E23                 mov     edi, ebx
.text:00401E25                 mov     [esp+1Ch+Str1], ebx
.text:00401E28                 call    sub_402F90
.text:00401E2D                 mov     esi, eax
.text:00401E2F                 nop
.text:00401E30
.text:00401E30 loc_401E30:                             ; CODE XREF: sub_401CC0+215↓j
.text:00401E30                                         ; sub_401CC0+259↓j
.text:00401E30                 mov     eax, ds:dword_410000
.text:00401E35                 mov     ebx, [eax]
.text:00401E37                 test    ebx, ebx
.text:00401E39                 jz      loc_401F2B
.text:00401E3F                 mov     [esp+1Ch+Str2], offset asc_401CB3 ; "&"
.text:00401E47                 mov     ecx, [eax]
.text:00401E49                 mov     [esp+1Ch+Str1], ecx ; Str1
.text:00401E4C                 call    strcmp
.text:00401E51                 test    eax, eax
.text:00401E53                 setz    dl
.text:00401E56                 movzx   ecx, dl
.text:00401E59                 lea     ebx, ds:0[ecx*4]
.text:00401E60                 add     ds:dword_410000, ebx
.text:00401E66                 test    ecx, ecx
.text:00401E68                 jz      loc_401F2B
.text:00401E6E                 mov     [esp+1Ch+Str1], esi
.text:00401E71                 call    sub_401550
.text:00401E76                 movzx   ecx, al
.text:00401E79                 not     ecx
.text:00401E7B                 test    ecx, edi
.text:00401E7D                 setnz   dl
.text:00401E80                 movzx   ebx, dl
.text:00401E83                 mov     [esp+1Ch+Str1], ebx
.text:00401E86                 call    sub_402F90
.text:00401E8B                 mov     [esp+1Ch+Str1], esi
.text:00401E8E                 mov     ebx, eax
.text:00401E90                 call    sub_401550
.text:00401E95                 test    al, al
.text:00401E97                 jz      short loc_401F00
.text:00401E99
.text:00401E99 loc_401E99:                             ; CODE XREF: sub_401CC0+24A↓j
.text:00401E99                 cmp     dword ptr [esi], 1
.text:00401E9C                 jz      short loc_401EF0
.text:00401E9E
.text:00401E9E loc_401E9E:                             ; CODE XREF: sub_401CC0+23B↓j
.text:00401E9E                 mov     [esp+1Ch+Str1], esi ; Block
.text:00401EA1                 call    free
.text:00401EA6                 cmp     dword ptr [ebx], 1
.text:00401EA9                 jz      short loc_401EE0
.text:00401EAB
.text:00401EAB loc_401EAB:                             ; CODE XREF: sub_401CC0+22B↓j
.text:00401EAB                 mov     [esp+1Ch+Str1], ebx ; Block
.text:00401EAE                 call    free
.text:00401EB3                 mov     [esp+1Ch+Str1], 10h ; size_t
.text:00401EBA                 call    sub_40BCC0
.text:00401EBF                 mov     dword ptr [eax], 0
.text:00401EC5                 mov     esi, eax
.text:00401EC7                 mov     dword ptr [eax+8], 0
.text:00401ECE                 mov     dword ptr [eax+0Ch], 0
.text:00401ED5                 jmp     loc_401E30
.text:00401ED5 ; ---------------------------------------------------------------------------
.text:00401EDA                 align 10h
.text:00401EE0
.text:00401EE0 loc_401EE0:                             ; CODE XREF: sub_401CC0+1E9↑j
.text:00401EE0                 mov     esi, [ebx+8]
.text:00401EE3                 mov     [esp+1Ch+Str1], esi ; Block
.text:00401EE6                 call    free
.text:00401EEB                 jmp     short loc_401EAB
.text:00401EEB ; ---------------------------------------------------------------------------
.text:00401EED                 align 10h
.text:00401EF0
.text:00401EF0 loc_401EF0:                             ; CODE XREF: sub_401CC0+1DC↑j
.text:00401EF0                 mov     edx, [esi+8]
.text:00401EF3                 mov     [esp+1Ch+Str1], edx ; Block
.text:00401EF6                 call    free
.text:00401EFB                 jmp     short loc_401E9E
.text:00401EFB ; ---------------------------------------------------------------------------
.text:00401EFD                 align 10h
.text:00401F00
.text:00401F00 loc_401F00:                             ; CODE XREF: sub_401CC0+1D7↑j
.text:00401F00                 mov     [esp+1Ch+Str1], ebx
.text:00401F03                 call    sub_401550
.text:00401F08                 test    al, al
.text:00401F0A                 jnz     short loc_401E99
.text:00401F0C                 cmp     dword ptr [ebx], 1
.text:00401F0F                 jz      short loc_401F1E
.text:00401F11
.text:00401F11 loc_401F11:                             ; CODE XREF: sub_401CC0+269↓j
.text:00401F11                 mov     [esp+1Ch+Str1], ebx ; Block
.text:00401F14                 call    free
.text:00401F19                 jmp     loc_401E30
.text:00401F1E ; ---------------------------------------------------------------------------
.text:00401F1E
.text:00401F1E loc_401F1E:                             ; CODE XREF: sub_401CC0+24F↑j
.text:00401F1E                 mov     ecx, [ebx+8]
.text:00401F21                 mov     [esp+1Ch+Str1], ecx ; Block
.text:00401F24                 call    free
.text:00401F29                 jmp     short loc_401F11
.text:00401F2B ; ---------------------------------------------------------------------------
.text:00401F2B
.text:00401F2B loc_401F2B:                             ; CODE XREF: sub_401CC0+179↑j
.text:00401F2B                                         ; sub_401CC0+1A8↑j
.text:00401F2B                 mov     [esp+1Ch+Str1], ebp
.text:00401F2E                 call    sub_401550
.text:00401F33                 test    al, al
.text:00401F35                 jz      short loc_401FA7
.text:00401F37                 cmp     dword ptr [ebp+0], 1
.text:00401F3B                 jz      short loc_401F9A
.text:00401F3D
.text:00401F3D loc_401F3D:                             ; CODE XREF: sub_401CC0+2E5↓j
.text:00401F3D                 mov     [esp+1Ch+Str1], ebp ; Block
.text:00401F40                 mov     ebp, esi
.text:00401F42                 call    free
.text:00401F47                 mov     [esp+1Ch+Str1], esi
.text:00401F4A                 call    sub_401550
.text:00401F4F                 test    al, al
.text:00401F51                 jz      short loc_401F82
.text:00401F53                 cmp     dword ptr [esi], 1
.text:00401F56                 jz      short loc_401F8D
.text:00401F58
.text:00401F58 loc_401F58:                             ; CODE XREF: sub_401CC0+2D8↓j
.text:00401F58                 mov     [esp+1Ch+Str1], ebp ; Block
.text:00401F5B                 call    free
.text:00401F60                 mov     [esp+1Ch+Str1], 10h ; size_t
.text:00401F67                 call    sub_40BCC0
.text:00401F6C                 mov     dword ptr [eax], 0
.text:00401F72                 mov     ebp, eax
.text:00401F74                 mov     dword ptr [eax+8], 0
.text:00401F7B                 mov     dword ptr [eax+0Ch], 0
.text:00401F82
.text:00401F82 loc_401F82:                             ; CODE XREF: sub_401CC0+291↑j
.text:00401F82                                         ; sub_401CC0+2F4↓j
.text:00401F82                 mov     edx, ds:dword_410000
.text:00401F88                 jmp     loc_401DD0
.text:00401F8D ; ---------------------------------------------------------------------------
.text:00401F8D
.text:00401F8D loc_401F8D:                             ; CODE XREF: sub_401CC0+296↑j
.text:00401F8D                 mov     ebx, [esi+8]
.text:00401F90                 mov     [esp+1Ch+Str1], ebx ; Block
.text:00401F93                 call    free
.text:00401F98                 jmp     short loc_401F58
.text:00401F9A ; ---------------------------------------------------------------------------
.text:00401F9A
.text:00401F9A loc_401F9A:                             ; CODE XREF: sub_401CC0+27B↑j
.text:00401F9A                 mov     edi, [ebp+8]
.text:00401F9D                 mov     [esp+1Ch+Str1], edi ; Block
.text:00401FA0                 call    free
.text:00401FA5                 jmp     short loc_401F3D
.text:00401FA7 ; ---------------------------------------------------------------------------
.text:00401FA7
.text:00401FA7 loc_401FA7:                             ; CODE XREF: sub_401CC0+275↑j
.text:00401FA7                 cmp     dword ptr [esi], 1
.text:00401FAA                 jz      short loc_401FB6
.text:00401FAC
.text:00401FAC loc_401FAC:                             ; CODE XREF: sub_401CC0+301↓j
.text:00401FAC                 mov     [esp+1Ch+Str1], esi ; Block
.text:00401FAF                 call    free
.text:00401FB4                 jmp     short loc_401F82
.text:00401FB6 ; ---------------------------------------------------------------------------
.text:00401FB6
.text:00401FB6 loc_401FB6:                             ; CODE XREF: sub_401CC0+2EA↑j
.text:00401FB6                 mov     edx, [esi+8]
.text:00401FB9                 mov     [esp+1Ch+Str1], edx ; Block
.text:00401FBC                 call    free
.text:00401FC1                 jmp     short loc_401FAC
.text:00401FC3 ; ---------------------------------------------------------------------------
.text:00401FC3
.text:00401FC3 loc_401FC3:                             ; CODE XREF: sub_401CC0+114↑j
.text:00401FC3                                         ; sub_401CC0+143↑j
.text:00401FC3                 add     esp, 0Ch
.text:00401FC6                 mov     eax, ebp
.text:00401FC8                 pop     ebx
.text:00401FC9                 pop     esi
.text:00401FCA                 pop     edi
.text:00401FCB                 pop     ebp
.text:00401FCC                 retn
.text:00401FCC sub_401CC0      endp
.text:00401FCC
.text:00401FCC ; ---------------------------------------------------------------------------
.text:00401FCD                 align 20h
.text:00401FE0 aUsageSExpressi db 'Usage: %s EXPRESSION',0Ah
.text:00401FE0                                         ; DATA XREF: sub_402870:loc_4028B0↓o
.text:00401FE0                 db '  or:  %s OPTION',0Ah,0
.text:00402007                 align 20h
.text:00402020 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00402020                                         ; DATA XREF: sub_402870:loc_4028F7↓o
.text:0040204D                 align 20h
.text:00402060 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00402060                                         ; DATA XREF: sub_402870+A9↓o
.text:00402096                 align 10h
.text:004020A0 aPrintTheValueO db 0Ah                  ; DATA XREF: sub_402870+CB↓o
.text:004020A0                 db 'Print the value of EXPRESSION to standard output.  A blank line b'
.text:004020A0                 db 'elow',0Ah
.text:004020A0                 db 'separates increasing precedence groups.  EXPRESSION may be:',0Ah
.text:004020A0                 db 0Ah
.text:004020A0                 db '  ARG1 | ARG2       ARG1 if it is neither null nor 0, otherwise A'
.text:004020A0                 db 'RG2',0Ah
.text:004020A0                 db 0Ah
.text:004020A0                 db '  ARG1 & ARG2       ARG1 if neither argument is null or 0, otherw'
.text:004020A0                 db 'ise 0',0Ah,0
.text:004021B2                 align 10h
.text:004021C0 aArg1Arg2Arg1Is db 0Ah                  ; DATA XREF: sub_402870+ED↓o
.text:004021C0                 db '  ARG1 < ARG2       ARG1 is less than ARG2',0Ah
.text:004021C0                 db '  ARG1 <= ARG2      ARG1 is less than or equal to ARG2',0Ah
.text:004021C0                 db '  ARG1 = ARG2       ARG1 is equal to ARG2',0Ah
.text:004021C0                 db '  ARG1 != ARG2      ARG1 is unequal to ARG2',0Ah
.text:004021C0                 db '  ARG1 >= ARG2      ARG1 is greater than or equal to ARG2',0Ah
.text:004021C0                 db '  ARG1 > ARG2       ARG1 is greater than ARG2',0Ah,0
.text:004022E2                 align 20h
.text:00402300 aArg1Arg2Arithm db 0Ah                  ; DATA XREF: sub_402870+10F↓o
.text:00402300                 db '  ARG1 + ARG2       arithmetic sum of ARG1 and ARG2',0Ah
.text:00402300                 db '  ARG1 - ARG2       arithmetic difference of ARG1 and ARG2',0Ah,0
.text:00402371                 db 0EBh, 0Dh, 90h
.text:00402374                 align 10h
.text:00402380 aArg1Arg2Arithm_0 db 0Ah                ; DATA XREF: sub_402870+131↓o
.text:00402380                 db '  ARG1 * ARG2       arithmetic product of ARG1 and ARG2',0Ah
.text:00402380                 db '  ARG1 / ARG2       arithmetic quotient of ARG1 divided by ARG2',0Ah
.text:00402380                 db '  ARG1 % ARG2       arithmetic remainder of ARG1 divided by ARG2',0Ah
.text:00402380                 db 0
.text:0040243B                 align 10h
.text:00402440 aStringRegexpAn db 0Ah                  ; DATA XREF: sub_402870+153↓o
.text:00402440                 db '  STRING : REGEXP   anchored pattern match of REGEXP in STRING',0Ah
.text:00402440                 db 0Ah
.text:00402440                 db '  match STRING REGEXP        same as STRING : REGEXP',0Ah
.text:00402440                 db '  substr STRING POS LENGTH   substring of STRING, POS counted fro'
.text:00402440                 db 'm 1',0Ah
.text:00402440                 db '  index STRING CHARS         index in STRING where any CHARS is f'
.text:00402440                 db 'ound, or 0',0Ah
.text:00402440                 db '  length STRING              length of STRING',0Ah,0
.text:00402576                 align 10h
.text:00402580 aTokenInterpret db '  + TOKEN                    interpret TOKEN as a string, even if'
.text:00402580                                         ; DATA XREF: sub_402870+175↓o
.text:00402580                 db ' it is a',0Ah
.text:00402580                 db '                               keyword like `match',27h,' or an o'
.text:00402580                 db 'perator like `/',27h,0Ah
.text:00402580                 db 0Ah
.text:00402580                 db '  ( EXPRESSION )             value of EXPRESSION',0Ah,0
.text:00402649                 align 20h
.text:00402660 aBewareThatMany db 0Ah                  ; DATA XREF: sub_402870+197↓o
.text:00402660                 db 'Beware that many operators need to be escaped or quoted for shell'
.text:00402660                 db 's.',0Ah
.text:00402660                 db 'Comparisons are arithmetic if both ARGs are numbers, else lexicog'
.text:00402660                 db 'raphical.',0Ah
.text:00402660                 db 'Pattern matches return the string matched between \( and \) or nu'
.text:00402660                 db 'll; if',0Ah
.text:00402660                 db '\( and \) are not used, they return the number of characters matc'
.text:00402660                 db 'hed or 0.',0Ah,0
.text:00402784                 align 20h
.text:004027A0 aExitStatusIs0I db 0Ah                  ; DATA XREF: sub_402870+1B9↓o
.text:004027A0                 db 'Exit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRES'
.text:004027A0                 db 'SION is null',0Ah
.text:004027A0                 db 'or 0, 2 if EXPRESSION is syntactically invalid, and 3 if an error'
.text:004027A0                 db ' occurred.',0Ah,0
.text:0040283C aReportBugsToS  db 0Ah                  ; DATA XREF: sub_402870+1DB↓o
.text:0040283C                 db 'Report bugs to <%s>.',0Ah,0
.text:00402853 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00402853                                         ; DATA XREF: sub_402870+1E8↓o
.text:00402869                 align 10h
.text:00402870
.text:00402870 ; =============== S U B R O U T I N E =======================================
.text:00402870
.text:00402870 ; Attributes: noreturn
.text:00402870
.text:00402870 ; void __cdecl __noreturn sub_402870(int Code)
.text:00402870 sub_402870      proc near               ; DATA XREF: sub_401360+86↑o
.text:00402870
.text:00402870 Stream          = dword ptr -1Ch
.text:00402870 Format          = dword ptr -18h
.text:00402870 var_14          = dword ptr -14h
.text:00402870 Code            = dword ptr  4
.text:00402870
.text:00402870                 push    ebx
.text:00402871                 sub     esp, 18h
.text:00402874                 mov     ebx, [esp+1Ch+Code]
.text:00402878                 test    ebx, ebx
.text:0040287A                 jz      short loc_4028B0
.text:0040287C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402883                 call    ds:libintl_gettext
.text:00402889                 mov     edx, ds:_iob
.text:0040288F                 mov     ecx, ds:dword_4102C0
.text:00402895                 add     edx, 40h ; '@'
.text:00402898                 mov     [esp+1Ch+var_14], ecx
.text:0040289C                 mov     [esp+1Ch+Format], eax ; Format
.text:004028A0                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004028A3                 call    fprintf
.text:004028A8
.text:004028A8 loc_4028A8:                             ; CODE XREF: sub_402870+1F8↓j
.text:004028A8                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004028AB                 call    exit
.text:004028B0 ; ---------------------------------------------------------------------------
.text:004028B0
.text:004028B0 loc_4028B0:                             ; CODE XREF: sub_402870+A↑j
.text:004028B0                 mov     [esp+1Ch+Stream], offset aUsageSExpressi ; "Usage: %s EXPRESSION\n  or:  %s OPTION"...
.text:004028B7                 call    ds:libintl_gettext
.text:004028BD                 mov     ecx, ds:dword_4102C0
.text:004028C3                 mov     [esp+1Ch+Stream], eax ; Format
.text:004028C6                 mov     [esp+1Ch+var_14], ecx
.text:004028CA                 mov     [esp+1Ch+Format], ecx
.text:004028CE                 call    printf
.text:004028D3                 mov     edx, ds:_iob
.text:004028D9                 mov     ecx, [edx+24h]
.text:004028DC                 dec     ecx
.text:004028DD                 mov     [edx+24h], ecx
.text:004028E0                 test    ecx, ecx
.text:004028E2                 js      loc_402A6D
.text:004028E8                 mov     ecx, ds:_iob
.text:004028EE                 mov     eax, [ecx+20h]
.text:004028F1                 mov     byte ptr [eax], 0Ah
.text:004028F4                 inc     dword ptr [ecx+20h]
.text:004028F7
.text:004028F7 loc_4028F7:                             ; CODE XREF: sub_402870+216↓j
.text:004028F7                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004028FE                 call    ds:libintl_gettext
.text:00402904                 mov     ecx, ds:_iob
.text:0040290A                 add     ecx, 20h ; ' '
.text:0040290D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402911                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402914                 call    fputs
.text:00402919                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402920                 call    ds:libintl_gettext
.text:00402926                 mov     ecx, ds:_iob
.text:0040292C                 add     ecx, 20h ; ' '
.text:0040292F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402933                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402936                 call    fputs
.text:0040293B                 mov     [esp+1Ch+Stream], offset aPrintTheValueO ; "\nPrint the value of EXPRESSION to stan"...
.text:00402942                 call    ds:libintl_gettext
.text:00402948                 mov     ecx, ds:_iob
.text:0040294E                 add     ecx, 20h ; ' '
.text:00402951                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402955                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402958                 call    fputs
.text:0040295D                 mov     [esp+1Ch+Stream], offset aArg1Arg2Arg1Is ; "\n  ARG1 < ARG2       ARG1 is less than"...
.text:00402964                 call    ds:libintl_gettext
.text:0040296A                 mov     ecx, ds:_iob
.text:00402970                 add     ecx, 20h ; ' '
.text:00402973                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402977                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040297A                 call    fputs
.text:0040297F                 mov     [esp+1Ch+Stream], offset aArg1Arg2Arithm ; "\n  ARG1 + ARG2       arithmetic sum of"...
.text:00402986                 call    ds:libintl_gettext
.text:0040298C                 mov     ecx, ds:_iob
.text:00402992                 add     ecx, 20h ; ' '
.text:00402995                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402999                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040299C                 call    fputs
.text:004029A1                 mov     [esp+1Ch+Stream], offset aArg1Arg2Arithm_0 ; "\n  ARG1 * ARG2       arithmetic produc"...
.text:004029A8                 call    ds:libintl_gettext
.text:004029AE                 mov     ecx, ds:_iob
.text:004029B4                 add     ecx, 20h ; ' '
.text:004029B7                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004029BB                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004029BE                 call    fputs
.text:004029C3                 mov     [esp+1Ch+Stream], offset aStringRegexpAn ; "\n  STRING : REGEXP   anchored pattern "...
.text:004029CA                 call    ds:libintl_gettext
.text:004029D0                 mov     ecx, ds:_iob
.text:004029D6                 add     ecx, 20h ; ' '
.text:004029D9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004029DD                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004029E0                 call    fputs
.text:004029E5                 mov     [esp+1Ch+Stream], offset aTokenInterpret ; "  + TOKEN                    interpret "...
.text:004029EC                 call    ds:libintl_gettext
.text:004029F2                 mov     ecx, ds:_iob
.text:004029F8                 add     ecx, 20h ; ' '
.text:004029FB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004029FF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A02                 call    fputs
.text:00402A07                 mov     [esp+1Ch+Stream], offset aBewareThatMany ; "\nBeware that many operators need to be"...
.text:00402A0E                 call    ds:libintl_gettext
.text:00402A14                 mov     ecx, ds:_iob
.text:00402A1A                 add     ecx, 20h ; ' '
.text:00402A1D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402A21                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A24                 call    fputs
.text:00402A29                 mov     [esp+1Ch+Stream], offset aExitStatusIs0I ; "\nExit status is 0 if EXPRESSION is nei"...
.text:00402A30                 call    ds:libintl_gettext
.text:00402A36                 mov     ecx, ds:_iob
.text:00402A3C                 add     ecx, 20h ; ' '
.text:00402A3F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402A43                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A46                 call    fputs
.text:00402A4B                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402A52                 call    ds:libintl_gettext
.text:00402A58                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402A60                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402A63                 call    printf
.text:00402A68                 jmp     loc_4028A8
.text:00402A6D ; ---------------------------------------------------------------------------
.text:00402A6D
.text:00402A6D loc_402A6D:                             ; CODE XREF: sub_402870+72↑j
.text:00402A6D                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00402A74                 mov     edx, ds:_iob
.text:00402A7A                 add     edx, 20h ; ' '
.text:00402A7D                 mov     [esp+1Ch+Format], edx ; File
.text:00402A81                 call    _flsbuf
.text:00402A86                 jmp     loc_4028F7
.text:00402A86 sub_402870      endp
.text:00402A86
.text:00402A86 ; ---------------------------------------------------------------------------
.text:00402A8B                 align 10h
.text:00402A90
.text:00402A90 ; =============== S U B R O U T I N E =======================================
.text:00402A90
.text:00402A90
.text:00402A90 sub_402A90      proc near               ; CODE XREF: sub_401610+337↑p
.text:00402A90                                         ; sub_401610+343↑p ...
.text:00402A90
.text:00402A90 Block           = dword ptr -1Ch
.text:00402A90 var_11          = byte ptr -11h
.text:00402A90 arg_0           = dword ptr  4
.text:00402A90
.text:00402A90                 push    ebp
.text:00402A91                 mov     edx, 1
.text:00402A96                 push    edi
.text:00402A97                 push    esi
.text:00402A98                 push    ebx
.text:00402A99                 sub     esp, 0Ch
.text:00402A9C                 mov     ecx, [esp+1Ch+arg_0]
.text:00402AA0                 mov     eax, [ecx]
.text:00402AA2                 test    eax, eax
.text:00402AA4                 jz      loc_402B4E
.text:00402AAA                 dec     eax
.text:00402AAB                 jnz     loc_402B64
.text:00402AB1                 mov     edx, [esp+1Ch+arg_0]
.text:00402AB5                 xor     ebx, ebx
.text:00402AB7                 xor     esi, esi
.text:00402AB9                 mov     ebp, [edx+8]
.text:00402ABC                 mov     edi, ebp
.text:00402ABE                 movzx   eax, byte ptr [ebp+0]
.text:00402AC2                 cmp     al, 2Dh ; '-'
.text:00402AC4                 setz    [esp+1Ch+var_11]
.text:00402AC9                 cmp     [esp+1Ch+var_11], 0
.text:00402ACE                 jnz     loc_402B58
.text:00402AD4                 lea     esi, [esi+0]
.text:00402ADA                 lea     edi, [edi+0]
.text:00402AE0
.text:00402AE0 loc_402AE0:                             ; CODE XREF: sub_402A90+85↓j
.text:00402AE0                                         ; sub_402A90+CF↓j
.text:00402AE0                 movsx   ecx, al
.text:00402AE3                 xor     edx, edx
.text:00402AE5                 lea     eax, [ecx-30h]
.text:00402AE8                 cmp     eax, 9
.text:00402AEB                 ja      short loc_402B4E
.text:00402AED                 mov     eax, ebx
.text:00402AEF                 mov     edx, esi
.text:00402AF1                 shl     eax, 2
.text:00402AF4                 shld    edx, ebx, 2
.text:00402AF8                 add     ebx, eax
.text:00402AFA                 mov     eax, ecx
.text:00402AFC                 adc     esi, edx
.text:00402AFE                 cdq
.text:00402AFF                 shld    esi, ebx, 1
.text:00402B03                 add     ebx, ebx
.text:00402B05                 add     ebx, ecx
.text:00402B07                 adc     esi, edx
.text:00402B09                 add     ebx, 0FFFFFFD0h
.text:00402B0C                 adc     esi, 0FFFFFFFFh
.text:00402B0F                 inc     edi
.text:00402B10                 movzx   eax, byte ptr [edi]
.text:00402B13                 test    al, al
.text:00402B15                 jnz     short loc_402AE0
.text:00402B17                 mov     [esp+1Ch+Block], ebp ; Block
.text:00402B1A                 call    free
.text:00402B1F                 cmp     [esp+1Ch+var_11], 0
.text:00402B24                 jz      short loc_402B39
.text:00402B26                 mov     eax, 0FFFFFFFFh
.text:00402B2B                 mul     ebx
.text:00402B2D                 mov     ebp, edx
.text:00402B2F                 sub     ebp, ebx
.text:00402B31                 mov     edi, ebp
.text:00402B33                 mov     ebx, eax
.text:00402B35                 sub     edi, esi
.text:00402B37                 mov     esi, edi
.text:00402B39
.text:00402B39 loc_402B39:                             ; CODE XREF: sub_402A90+94↑j
.text:00402B39                 mov     eax, [esp+1Ch+arg_0]
.text:00402B3D                 mov     edx, 1
.text:00402B42                 mov     [eax+8], ebx
.text:00402B45                 mov     [eax+0Ch], esi
.text:00402B48                 mov     dword ptr [eax], 0
.text:00402B4E
.text:00402B4E loc_402B4E:                             ; CODE XREF: sub_402A90+14↑j
.text:00402B4E                                         ; sub_402A90+5B↑j
.text:00402B4E                 add     esp, 0Ch
.text:00402B51                 mov     eax, edx
.text:00402B53                 pop     ebx
.text:00402B54                 pop     esi
.text:00402B55                 pop     edi
.text:00402B56                 pop     ebp
.text:00402B57                 retn
.text:00402B58 ; ---------------------------------------------------------------------------
.text:00402B58
.text:00402B58 loc_402B58:                             ; CODE XREF: sub_402A90+3E↑j
.text:00402B58                 movzx   eax, byte ptr [ebp+1]
.text:00402B5C                 lea     edi, [ebp+1]
.text:00402B5F                 jmp     loc_402AE0
.text:00402B64 ; ---------------------------------------------------------------------------
.text:00402B64
.text:00402B64 loc_402B64:                             ; CODE XREF: sub_402A90+1B↑j
.text:00402B64                 call    abort
.text:00402B64 sub_402A90      endp
.text:00402B64
.text:00402B69
.text:00402B69 ; =============== S U B R O U T I N E =======================================
.text:00402B69
.text:00402B69
.text:00402B69 sub_402B69      proc near               ; DATA XREF: sub_402C14+BD↓o
.text:00402B69                 and     eax, 90900073h
.text:00402B6E                 nop
.text:00402B6F                 nop
.text:00402B70                 nop
.text:00402B71                 nop
.text:00402B72                 nop
.text:00402B73                 nop
.text:00402B74                 nop
.text:00402B75                 nop
.text:00402B76                 nop
.text:00402B77                 nop
.text:00402B78                 nop
.text:00402B79                 nop
.text:00402B7A                 nop
.text:00402B7B                 nop
.text:00402B7C                 nop
.text:00402B7D                 nop
.text:00402B7E                 nop
.text:00402B7F                 nop
.text:00402B7F sub_402B69      endp
.text:00402B7F
.text:00402B80
.text:00402B80 ; =============== S U B R O U T I N E =======================================
.text:00402B80
.text:00402B80
.text:00402B80 sub_402B80      proc near               ; DATA XREF: sub_402C14:loc_402E02↓o
.text:00402B80                 ja      short loc_402BE3
.text:00402B82                 jb      short near ptr loc_402BF0+2
.text:00402B84                 imul    ebp, [esi+67h], 6E75203Ah
.text:00402B8B                 jo      short near ptr loc_402BF9+3
.text:00402B8D                 jb      short loc_402C03
.text:00402B8F                 popa
.text:00402B90                 bound   ebp, [ebp+20h]
.text:00402B94                 inc     edx
.text:00402B95                 push    edx
.text:00402B96                 inc     ebp
.text:00402B97                 cmp     ah, [eax]
.text:00402B99                 pusha
.text:00402B9A                 and     eax, 203A2773h
.text:00402B9F                 jnz     short sub_402C14
.text:00402BA1                 imul    ebp, [esi+67h], 275E6020h
.text:00402BA8                 and     [ecx+73h], ah
.text:00402BAB                 and     [eax+ebp*2+65h], dh
.text:00402BAF                 and     [esi+69h], ah
.text:00402BB2                 jb      short near ptr loc_402C22+5
.text:00402BB4                 jz      short near ptr loc_402BD5+1
.text:00402BB6                 arpl    [eax+61h], bp
.text:00402BB9                 jb      short near ptr loc_402C17+5
.text:00402BBB                 arpl    [ebp+72h], si
.text:00402BBF                 or      ch, [edi+66h]
.text:00402BC2                 and     [eax+ebp*2+65h], dh
.text:00402BC6                 and     [edx+61h], ah
.text:00402BC9                 jnb     short near ptr loc_402C2F+5
.text:00402BCB                 arpl    [eax], sp
.text:00402BCD                 jb      short near ptr loc_402C2F+5
.text:00402BCF                 db      67h
.text:00402BCF                 jnz     near ptr loc_402C3A+4
.text:00402BD2                 popa
.text:00402BD3                 jb      short near ptr loc_402BF3+2
.text:00402BD5
.text:00402BD5 loc_402BD5:                             ; CODE XREF: sub_402B80+34↑j
.text:00402BD5                 db      65h
.text:00402BD5                 js      short near ptr loc_402C47+1
.text:00402BD8                 jb      short near ptr loc_402C3A+5
.text:00402BDA                 jnb     short near ptr loc_402C4E+1
.text:00402BDC                 imul    ebp, [edi+6Eh], 20736920h
.text:00402BE3
.text:00402BE3 loc_402BE3:                             ; CODE XREF: sub_402B80↑j
.text:00402BE3                 outsb
.text:00402BE4                 outsd
.text:00402BE5                 jz      short near ptr loc_402C03+4
.text:00402BE7                 jo      short near ptr loc_402C54+4
.text:00402BE9                 jb      short near ptr loc_402C5D+2
.text:00402BEB                 popa
.text:00402BEC                 bound   ebp, [ebp+3Bh]
.text:00402BF0
.text:00402BF0 loc_402BF0:                             ; CODE XREF: sub_402B80+2↑j
.text:00402BF0                 and     [ecx+74h], ch
.text:00402BF3
.text:00402BF3 loc_402BF3:                             ; CODE XREF: sub_402B80+53↑j
.text:00402BF3                 and     [ecx+73h], ch
.text:00402BF6                 and     [edx+65h], ah
.text:00402BF9
.text:00402BF9 loc_402BF9:                             ; CODE XREF: sub_402B80+B↑j
.text:00402BF9                 imul    ebp, [esi+67h], 6E676920h
.text:00402C00                 outsd
.text:00402C01                 jb      short near ptr loc_402C67+1
.text:00402C03
.text:00402C03 loc_402C03:                             ; CODE XREF: sub_402B80+D↑j
.text:00402C03                                         ; sub_402B80+65↑j
.text:00402C03                 add     fs:[ebp-72FFD98Ch], cl
.text:00402C0A                 mov     esp, 27h ; '''
.text:00402C0F
.text:00402C0F loc_402C0F:                             ; CODE XREF: sub_401610+61B↑p
.text:00402C0F                                         ; sub_4037F0+A6↓p ...
.text:00402C0F                 add     [ebp+57h], dl
.text:00402C0F sub_402B80      endp ; sp-analysis failed
.text:00402C0F
.text:00402C12                 push    esi
.text:00402C13                 push    ebx
.text:00402C14
.text:00402C14 ; =============== S U B R O U T I N E =======================================
.text:00402C14
.text:00402C14
.text:00402C14 sub_402C14      proc near               ; CODE XREF: sub_402B80+1F↑j
.text:00402C14
.text:00402C14 Str             = dword ptr -7Ch
.text:00402C14 ErrorMessage    = dword ptr -78h
.text:00402C14 var_74          = dword ptr -74h
.text:00402C14 var_70          = byte ptr -70h
.text:00402C14 var_6C          = dword ptr -6Ch
.text:00402C14 var_5C          = byte ptr -5Ch
.text:00402C14 var_3C          = byte ptr -3Ch
.text:00402C14 var_38          = dword ptr -38h
.text:00402C14 var_34          = dword ptr -34h
.text:00402C14 Block           = dword ptr -2Ch
.text:00402C14 var_28          = dword ptr -28h
.text:00402C14 var_18          = dword ptr -18h
.text:00402C14 var_14          = dword ptr -14h
.text:00402C14 arg_10          = dword ptr  14h
.text:00402C14 arg_14          = dword ptr  18h
.text:00402C14
.text:00402C14                 sub     esp, 7Ch
.text:00402C17
.text:00402C17 loc_402C17:                             ; CODE XREF: sub_402B80+39↑j
.text:00402C17                 mov     ecx, [esp+7Ch+arg_10]
.text:00402C1E                 mov     eax, [ecx]
.text:00402C20                 test    eax, eax
.text:00402C22
.text:00402C22 loc_402C22:                             ; CODE XREF: sub_402B80+32↑j
.text:00402C22                 jz      loc_402E83
.text:00402C28                 dec     eax
.text:00402C29                 jnz     loc_402EC1
.text:00402C2F
.text:00402C2F loc_402C2F:                             ; CODE XREF: sub_402C14+2A8↓j
.text:00402C2F                                         ; sub_402B80+49↑j ...
.text:00402C2F                 mov     edi, [esp+7Ch+arg_14]
.text:00402C36                 mov     eax, [edi]
.text:00402C38                 test    eax, eax
.text:00402C3A
.text:00402C3A loc_402C3A:                             ; CODE XREF: sub_402B80+4F↑j
.text:00402C3A                                         ; sub_402B80+58↑j
.text:00402C3A                 jz      loc_402E44
.text:00402C40                 dec     eax
.text:00402C41                 jnz     loc_402EC1
.text:00402C47
.text:00402C47 loc_402C47:                             ; CODE XREF: sub_402C14+26A↓j
.text:00402C47                                         ; sub_402B80:loc_402BD5↑j
.text:00402C47                 mov     esi, [esp+7Ch+arg_14]
.text:00402C4E
.text:00402C4E loc_402C4E:                             ; CODE XREF: sub_402B80+5A↑j
.text:00402C4E                 mov     eax, [esi+8]
.text:00402C51                 cmp     byte ptr [eax], 5Eh ; '^'
.text:00402C54
.text:00402C54 loc_402C54:                             ; CODE XREF: sub_402B80+67↑j
.text:00402C54                 jz      loc_402E02
.text:00402C5A
.text:00402C5A loc_402C5A:                             ; CODE XREF: sub_402C14+22B↓j
.text:00402C5A                 mov     [esp+7Ch+Str], eax ; Str
.text:00402C5D
.text:00402C5D loc_402C5D:                             ; CODE XREF: sub_402B80+69↑j
.text:00402C5D                 lea     ebp, [esp+7Ch+Block]
.text:00402C61                 call    strlen
.text:00402C66                 cld
.text:00402C67
.text:00402C67 loc_402C67:                             ; CODE XREF: sub_402B80+81↑j
.text:00402C67                 mov     ebx, eax
.text:00402C69                 mov     ecx, 8
.text:00402C6E                 xor     eax, eax
.text:00402C70                 mov     edi, ebp
.text:00402C72                 lea     esi, [esp+7Ch+var_3C]
.text:00402C76                 rep stosd
.text:00402C78                 mov     ecx, 3
.text:00402C7D                 mov     edi, esi
.text:00402C7F                 rep stosd
.text:00402C81                 lea     eax, [ebx+ebx]
.text:00402C84                 cmp     eax, ebx
.text:00402C86                 mov     [esp+7Ch+var_28], eax
.text:00402C8A                 jb      loc_402EC6
.text:00402C90                 mov     [esp+7Ch+Str], eax ; size_t
.text:00402C93                 mov     edi, 102C6h
.text:00402C98                 call    sub_40BCC0
.text:00402C9D                 mov     [esp+7Ch+Block], eax
.text:00402CA1                 mov     eax, [esp+7Ch+arg_14]
.text:00402CA8                 mov     [esp+7Ch+var_18], 0
.text:00402CB0                 mov     [esp+7Ch+var_74], ebp
.text:00402CB4                 mov     [esp+7Ch+ErrorMessage], ebx
.text:00402CB8                 mov     edx, [eax+8]
.text:00402CBB                 mov     ds:dword_4102E0, edi
.text:00402CC1                 mov     [esp+7Ch+Str], edx
.text:00402CC4                 call    sub_407FE0
.text:00402CC9                 test    eax, eax
.text:00402CCB                 jz      short loc_402CED
.text:00402CCD                 mov     dword ptr [esp+7Ch+var_70], eax ; char
.text:00402CD1                 mov     [esp+7Ch+var_74], offset sub_402B69 ; char *
.text:00402CD9                 mov     [esp+7Ch+ErrorMessage], 0 ; ErrorMessage
.text:00402CE1                 mov     [esp+7Ch+Str], 3 ; Code
.text:00402CE8                 call    sub_40D830
.text:00402CED
.text:00402CED loc_402CED:                             ; CODE XREF: sub_402C14+B7↑j
.text:00402CED                 mov     eax, [esp+7Ch+arg_10]
.text:00402CF4                 mov     ecx, [eax+8]
.text:00402CF7                 mov     [esp+7Ch+Str], ecx ; Str
.text:00402CFA                 call    strlen
.text:00402CFF                 mov     [esp+7Ch+var_74], eax
.text:00402D03                 mov     ebx, [esp+7Ch+arg_10]
.text:00402D0A                 mov     [esp+7Ch+var_6C], esi
.text:00402D0E                 mov     dword ptr [esp+7Ch+var_70], 0
.text:00402D16                 mov     esi, [ebx+8]
.text:00402D19                 mov     [esp+7Ch+Str], ebp
.text:00402D1C                 mov     [esp+7Ch+ErrorMessage], esi
.text:00402D20                 call    sub_407F80
.text:00402D25                 test    eax, eax
.text:00402D27                 js      loc_402DB5
.text:00402D2D                 mov     ebp, [esp+7Ch+var_14]
.text:00402D31                 test    ebp, ebp
.text:00402D33                 jz      short loc_402D92
.text:00402D35                 mov     esi, [esp+7Ch+arg_10]
.text:00402D3C                 mov     edi, [esp+7Ch+var_34]
.text:00402D40                 mov     ebp, [esi+8]
.text:00402D43                 mov     ecx, [edi+4]
.text:00402D46                 mov     byte ptr [ecx+ebp], 0
.text:00402D4A                 mov     ebx, [esp+7Ch+arg_10]
.text:00402D51                 mov     edx, [esp+7Ch+var_38]
.text:00402D55                 mov     esi, [ebx+8]
.text:00402D58                 mov     edi, [edx+4]
.text:00402D5B                 mov     [esp+7Ch+Str], 10h ; size_t
.text:00402D62                 call    sub_40BCC0
.text:00402D67                 mov     dword ptr [eax], 1
.text:00402D6D                 add     edi, esi
.text:00402D6F                 mov     ebx, eax
.text:00402D71                 mov     [esp+7Ch+Str], edi ; char *
.text:00402D74
.text:00402D74 loc_402D74:                             ; CODE XREF: sub_402C14+1C4↓j
.text:00402D74                 call    sub_40BE80
.text:00402D79                 mov     [ebx+8], eax
.text:00402D7C
.text:00402D7C loc_402D7C:                             ; CODE XREF: sub_402C14+19F↓j
.text:00402D7C                 mov     edx, [esp+7Ch+Block]
.text:00402D80                 mov     [esp+7Ch+Str], edx ; Block
.text:00402D83                 call    free
.text:00402D88                 add     esp, 7Ch
.text:00402D8B                 mov     eax, ebx
.text:00402D8D                 pop     ebx
.text:00402D8E                 pop     esi
.text:00402D8F                 pop     edi
.text:00402D90                 pop     ebp
.text:00402D91                 retn
.text:00402D92 ; ---------------------------------------------------------------------------
.text:00402D92
.text:00402D92 loc_402D92:                             ; CODE XREF: sub_402C14+11F↑j
.text:00402D92                 mov     [esp+7Ch+Str], 10h ; size_t
.text:00402D99                 mov     ebp, eax
.text:00402D9B                 mov     edi, eax
.text:00402D9D                 sar     ebp, 1Fh
.text:00402DA0                 call    sub_40BCC0
.text:00402DA5                 mov     dword ptr [eax], 0
.text:00402DAB                 mov     [eax+8], edi
.text:00402DAE                 mov     [eax+0Ch], ebp
.text:00402DB1
.text:00402DB1 loc_402DB1:                             ; CODE XREF: sub_402C14+1EC↓j
.text:00402DB1                 mov     ebx, eax
.text:00402DB3                 jmp     short loc_402D7C
.text:00402DB5 ; ---------------------------------------------------------------------------
.text:00402DB5
.text:00402DB5 loc_402DB5:                             ; CODE XREF: sub_402C14+113↑j
.text:00402DB5                 mov     eax, [esp+7Ch+var_14]
.text:00402DB9                 test    eax, eax
.text:00402DBB                 jz      short loc_402DE0
.text:00402DBD                 mov     [esp+7Ch+Str], 10h ; size_t
.text:00402DC4                 call    sub_40BCC0
.text:00402DC9                 mov     dword ptr [eax], 1
.text:00402DCF                 mov     ebx, eax
.text:00402DD1                 mov     [esp+7Ch+Str], offset Locale
.text:00402DD8                 jmp     short loc_402D74
.text:00402DD8 ; ---------------------------------------------------------------------------
.text:00402DDA                 align 10h
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402C14+1A7↑j
.text:00402DE0                 mov     [esp+7Ch+Str], 10h ; size_t
.text:00402DE7                 call    sub_40BCC0
.text:00402DEC                 mov     dword ptr [eax], 0
.text:00402DF2                 mov     dword ptr [eax+8], 0
.text:00402DF9                 mov     dword ptr [eax+0Ch], 0
.text:00402E00                 jmp     short loc_402DB1
.text:00402E02 ; ---------------------------------------------------------------------------
.text:00402E02
.text:00402E02 loc_402E02:                             ; CODE XREF: sub_402C14:loc_402C54↑j
.text:00402E02                 mov     [esp+7Ch+Str], offset sub_402B80
.text:00402E09                 call    ds:libintl_gettext
.text:00402E0F                 mov     ebx, [esp+7Ch+arg_14]
.text:00402E16                 mov     ebp, [ebx+8]
.text:00402E19                 mov     [esp+7Ch+var_74], eax ; char *
.text:00402E1D                 mov     [esp+7Ch+ErrorMessage], 0 ; ErrorMessage
.text:00402E25                 mov     dword ptr [esp+7Ch+var_70], ebp ; char
.text:00402E29                 mov     [esp+7Ch+Str], 0 ; Code
.text:00402E30                 call    sub_40D830
.text:00402E35                 mov     edi, [esp+7Ch+arg_14]
.text:00402E3C                 mov     eax, [edi+8]
.text:00402E3F                 jmp     loc_402C5A
.text:00402E44 ; ---------------------------------------------------------------------------
.text:00402E44
.text:00402E44 loc_402E44:                             ; CODE XREF: sub_402C14:loc_402C3A↑j
.text:00402E44                 mov     eax, [esp+7Ch+arg_14]
.text:00402E4B                 lea     ecx, [esp+7Ch+var_5C]
.text:00402E4F                 mov     [esp+7Ch+var_74], ecx
.text:00402E53                 mov     edx, [eax+8]
.text:00402E56                 mov     ebx, [eax+0Ch]
.text:00402E59                 mov     [esp+7Ch+Str], edx
.text:00402E5C                 mov     [esp+7Ch+ErrorMessage], ebx
.text:00402E60                 call    sub_40BBC0
.text:00402E65                 mov     [esp+7Ch+Str], eax ; char *
.text:00402E68                 call    sub_40BE80
.text:00402E6D                 mov     ebp, [esp+7Ch+arg_14]
.text:00402E74                 mov     [ebp+8], eax
.text:00402E77                 mov     dword ptr [ebp+0], 1
.text:00402E7E                 jmp     loc_402C47
.text:00402E83 ; ---------------------------------------------------------------------------
.text:00402E83
.text:00402E83 loc_402E83:                             ; CODE XREF: sub_402C14:loc_402C22↑j
.text:00402E83                 mov     eax, [esp+7Ch+arg_10]
.text:00402E8A                 lea     esi, [esp+7Ch+var_5C]
.text:00402E8E                 mov     [esp+7Ch+var_74], esi
.text:00402E92                 mov     edx, [eax+8]
.text:00402E95                 mov     ebx, [eax+0Ch]
.text:00402E98                 mov     [esp+7Ch+Str], edx
.text:00402E9B                 mov     [esp+7Ch+ErrorMessage], ebx
.text:00402E9F                 call    sub_40BBC0
.text:00402EA4                 mov     [esp+7Ch+Str], eax ; char *
.text:00402EA7                 call    sub_40BE80
.text:00402EAC                 mov     ecx, [esp+7Ch+arg_10]
.text:00402EB3                 mov     [ecx+8], eax
.text:00402EB6                 mov     dword ptr [ecx], 1
.text:00402EBC                 jmp     loc_402C2F
.text:00402EC1 ; ---------------------------------------------------------------------------
.text:00402EC1
.text:00402EC1 loc_402EC1:                             ; CODE XREF: sub_402C14+15↑j
.text:00402EC1                                         ; sub_402C14+2D↑j
.text:00402EC1                 call    abort
.text:00402EC6 ; ---------------------------------------------------------------------------
.text:00402EC6
.text:00402EC6 loc_402EC6:                             ; CODE XREF: sub_402C14+76↑j
.text:00402EC6                 call    sub_40BB80
.text:00402EC6 sub_402C14      endp ; sp-analysis failed
.text:00402EC6
.text:00402EC6 ; ---------------------------------------------------------------------------
.text:00402ECB ; const char asc_402ECB[2]
.text:00402ECB asc_402ECB      db '<',0                ; DATA XREF: sub_402F90:loc_402FE0↓o
.text:00402ECD ; const char asc_402ECD[3]
.text:00402ECD asc_402ECD      db '<=',0               ; DATA XREF: sub_402F90+8F↓o
.text:00402ED0 ; const char asc_402ED0[2]
.text:00402ED0 asc_402ED0      db '=',0                ; DATA XREF: sub_402F90+CE↓o
.text:00402ED2 ; const char asc_402ED2[3]
.text:00402ED2 asc_402ED2      db '==',0               ; DATA XREF: sub_402F90+105↓o
.text:00402ED5 aStringComparis db 'string comparison failed',0
.text:00402ED5                                         ; DATA XREF: sub_402F90:loc_40330D↓o
.text:00402EEE                 align 20h
.text:00402F00
.text:00402F00 ; =============== S U B R O U T I N E =======================================
.text:00402F00
.text:00402F00
.text:00402F00 sub_402F00      proc near               ; DATA XREF: sub_402F90+39E↓o
.text:00402F00                 push    ebx
.text:00402F01                 db      65h
.text:00402F01                 jz      short loc_402F24
.text:00402F04                 dec     esp
.text:00402F05                 inc     ebx
.text:00402F06                 pop     edi
.text:00402F07                 inc     ecx
.text:00402F08                 dec     esp
.text:00402F09                 dec     esp
.text:00402F0A                 cmp     eax, 20274327h
.text:00402F0F                 jz      short near ptr loc_402F7C+4
.text:00402F11                 and     [edi+6Fh], dh
.text:00402F14                 jb      short near ptr loc_402F7C+5
.text:00402F16                 and     [ecx+72h], ah
.text:00402F19                 outsd
.text:00402F1A                 jnz     short near ptr loc_402F89+1
.text:00402F1C                 and     fs:[eax+ebp*2+65h], dh
.text:00402F21                 and     [eax+72h], dh
.text:00402F24
.text:00402F24 loc_402F24:                             ; CODE XREF: sub_402F00+1↑j
.text:00402F24                 outsd
.text:00402F25                 bound   ebp, [ebp+6Dh]
.text:00402F29                 add     cs:[eax-6F6F6F70h], dl
.text:00402F30                 nop
.text:00402F31                 nop
.text:00402F32                 nop
.text:00402F33                 nop
.text:00402F34                 nop
.text:00402F35                 nop
.text:00402F36                 nop
.text:00402F37                 nop
.text:00402F38                 nop
.text:00402F39                 nop
.text:00402F3A                 nop
.text:00402F3B                 nop
.text:00402F3C                 nop
.text:00402F3D                 nop
.text:00402F3E                 nop
.text:00402F3F                 nop
.text:00402F3F sub_402F00      endp ; sp-analysis failed
.text:00402F3F
.text:00402F40
.text:00402F40 loc_402F40:                             ; DATA XREF: sub_402F90+3FC↓o
.text:00402F40                 push    esp
.text:00402F41                 push    74732065h
.text:00402F46                 jb      short near ptr loc_402FB0+1
.text:00402F48                 outsb
.text:00402F49                 db      67h
.text:00402F49                 jnb     near ptr loc_402F6A+2
.text:00402F4C                 arpl    [edi+6Dh], bp
.text:00402F4F                 jo      short near ptr loc_402FB0+2
.text:00402F51                 jb      short loc_402FB8
.text:00402F53                 and     fs:[edi+65h], dh
.text:00402F57                 jb      short near ptr loc_402FBA+4
.text:00402F59                 and     ds:6E612073h, ah
.text:00402F5F
.text:00402F5F loc_402F5F:                             ; DATA XREF: sub_402F90+4FB↓o
.text:00402F5F                                         ; sub_402F90+72E↓o
.text:00402F5F                 and     fs:2D002E73h, ah
.text:00402F66                 add     [esi+6Fh], ch
.text:00402F69                 outsb
.text:00402F6A
.text:00402F6A loc_402F6A:                             ; CODE XREF: .text:00402F49↑j
.text:00402F6A                 sub     eax, 656D756Eh
.text:00402F6F                 jb      short loc_402FDA
.text:00402F71                 arpl    [eax], sp
.text:00402F73                 popa
.text:00402F74                 jb      short loc_402FDD
.text:00402F76                 jnz     short near ptr loc_402FE0+5
.text:00402F78                 outs    dx, byte ptr gs:[esi]
.text:00402F7A                 jz      short $+2
.text:00402F7C
.text:00402F7C loc_402F7C:                             ; CODE XREF: .text:00402F7A↑j
.text:00402F7C                                         ; sub_402F00+F↑j ...
.text:00402F7C                 and     ds:3D3E00h, edi
.text:00402F82
.text:00402F82 loc_402F82:                             ; DATA XREF: sub_402F90+6B3↓o
.text:00402F82                 add     ds:[ebp+0B6h], cl
.text:00402F89
.text:00402F89 loc_402F89:                             ; CODE XREF: sub_402F00+1A↑j
.text:00402F89                 add     [ebp+0BFh], cl
.text:00402F89 ; ---------------------------------------------------------------------------
.text:00402F8F                 db 0
.text:00402F90
.text:00402F90 ; =============== S U B R O U T I N E =======================================
.text:00402F90
.text:00402F90
.text:00402F90 sub_402F90      proc near               ; CODE XREF: sub_401CC0+16↑p
.text:00402F90                                         ; sub_401CC0+76↑p ...
.text:00402F90
.text:00402F90 Str1            = dword ptr -9Ch
.text:00402F90 Str2            = dword ptr -98h
.text:00402F90 var_94          = dword ptr -94h
.text:00402F90 var_90          = byte ptr -90h
.text:00402F90 var_8C          = dword ptr -8Ch
.text:00402F90 var_74          = dword ptr -74h
.text:00402F90 var_70          = dword ptr -70h
.text:00402F90 var_68          = dword ptr -68h
.text:00402F90 var_61          = byte ptr -61h
.text:00402F90 String1         = dword ptr -60h
.text:00402F90 var_5C          = dword ptr -5Ch
.text:00402F90 var_58          = dword ptr -58h
.text:00402F90 var_54          = dword ptr -54h
.text:00402F90 var_50          = dword ptr -50h
.text:00402F90 var_45          = byte ptr -45h
.text:00402F90 var_44          = dword ptr -44h
.text:00402F90 var_3D          = byte ptr -3Dh
.text:00402F90 var_3C          = byte ptr -3Ch
.text:00402F90 arg_0           = dword ptr  4
.text:00402F90
.text:00402F90                 push    ebp
.text:00402F91                 xor     ebp, ebp
.text:00402F93                 push    edi
.text:00402F94                 xor     edi, edi
.text:00402F96                 push    esi
.text:00402F97                 push    ebx
.text:00402F98                 sub     esp, 8Ch
.text:00402F9E                 mov     ecx, [esp+9Ch+arg_0]
.text:00402FA5                 mov     [esp+9Ch+var_3D], cl
.text:00402FA9                 movzx   edx, cl
.text:00402FAC                 mov     [esp+9Ch+var_61], cl
.text:00402FB0
.text:00402FB0 loc_402FB0:                             ; CODE XREF: .text:00402F46↑j
.text:00402FB0                                         ; .text:00402F4F↑j
.text:00402FB0                 mov     [esp+9Ch+Str1], edx
.text:00402FB3                 call    sub_4037F0
.text:00402FB8
.text:00402FB8 loc_402FB8:                             ; CODE XREF: .text:00402F51↑j
.text:00402FB8                                         ; sub_402F90+7AF↓j
.text:00402FB8                 mov     esi, eax
.text:00402FBA
.text:00402FBA loc_402FBA:                             ; CODE XREF: .text:00402F57↑j
.text:00402FBA                 mov     edx, ds:dword_410000
.text:00402FC0                 mov     ebx, [edx]
.text:00402FC2                 test    ebx, ebx
.text:00402FC4                 jnz     loc_40367F
.text:00402FCA
.text:00402FCA loc_402FCA:                             ; CODE XREF: sub_402F90+728↓j
.text:00402FCA                                         ; sub_402F90+759↓j
.text:00402FCA                 mov     ebp, esi
.text:00402FCC
.text:00402FCC loc_402FCC:                             ; CODE XREF: sub_402F90+29E↓j
.text:00402FCC                 mov     edi, [edx]
.text:00402FCE                 test    edi, edi
.text:00402FD0                 jnz     short loc_402FE0
.text:00402FD2
.text:00402FD2 loc_402FD2:                             ; CODE XREF: sub_402F90+8D↓j
.text:00402FD2                                         ; sub_402F90+C8↓j ...
.text:00402FD2                 add     esp, 8Ch
.text:00402FD8                 mov     eax, ebp
.text:00402FDA
.text:00402FDA loc_402FDA:                             ; CODE XREF: .text:00402F6F↑j
.text:00402FDA                 pop     ebx
.text:00402FDB                 pop     esi
.text:00402FDC                 pop     edi
.text:00402FDD
.text:00402FDD loc_402FDD:                             ; CODE XREF: .text:00402F74↑j
.text:00402FDD                 pop     ebp
.text:00402FDE                 retn
.text:00402FDE ; ---------------------------------------------------------------------------
.text:00402FDF                 align 10h
.text:00402FE0
.text:00402FE0 loc_402FE0:                             ; CODE XREF: sub_402F90+40↑j
.text:00402FE0                                         ; .text:00402F76↑j
.text:00402FE0                 mov     [esp+9Ch+Str2], offset asc_402ECB ; "<"
.text:00402FE8                 mov     esi, [edx]
.text:00402FEA                 mov     [esp+9Ch+Str1], esi ; Str1
.text:00402FED                 call    strcmp
.text:00402FF2                 mov     [esp+9Ch+var_44], 0
.text:00402FFA                 test    eax, eax
.text:00402FFC                 mov     ebx, ds:dword_410000
.text:00403002                 setz    dl
.text:00403005                 movzx   ecx, dl
.text:00403008                 lea     edx, [ebx+ecx*4]
.text:0040300B                 mov     ds:dword_410000, edx
.text:00403011                 test    ecx, ecx
.text:00403013                 jnz     loc_4030CE
.text:00403019                 mov     eax, [edx]
.text:0040301B                 test    eax, eax
.text:0040301D                 jz      short loc_402FD2
.text:0040301F                 mov     [esp+9Ch+Str2], offset asc_402ECD ; "<="
.text:00403027                 mov     esi, [edx]
.text:00403029                 mov     [esp+9Ch+Str1], esi ; Str1
.text:0040302C                 call    strcmp
.text:00403031                 mov     [esp+9Ch+var_44], 1
.text:00403039                 test    eax, eax
.text:0040303B                 mov     ecx, ds:dword_410000
.text:00403041                 setz    bl
.text:00403044                 movzx   edi, bl
.text:00403047                 lea     edx, [ecx+edi*4]
.text:0040304A                 mov     ds:dword_410000, edx
.text:00403050                 test    edi, edi
.text:00403052                 jnz     short loc_4030CE
.text:00403054                 mov     edi, [edx]
.text:00403056                 test    edi, edi
.text:00403058                 jz      loc_402FD2
.text:0040305E                 mov     [esp+9Ch+Str2], offset asc_402ED0 ; "="
.text:00403066                 mov     esi, [edx]
.text:00403068                 mov     [esp+9Ch+Str1], esi ; Str1
.text:0040306B                 call    strcmp
.text:00403070                 test    eax, eax
.text:00403072                 mov     ebx, ds:dword_410000
.text:00403078                 setz    dl
.text:0040307B                 movzx   ecx, dl
.text:0040307E                 lea     edx, [ebx+ecx*4]
.text:00403081                 mov     ds:dword_410000, edx
.text:00403087                 test    ecx, ecx
.text:00403089                 jnz     short loc_4030C6
.text:0040308B                 mov     edi, [edx]
.text:0040308D                 test    edi, edi
.text:0040308F                 jz      loc_402FD2
.text:00403095                 mov     [esp+9Ch+Str2], offset asc_402ED2 ; "=="
.text:0040309D                 mov     esi, [edx]
.text:0040309F                 mov     [esp+9Ch+Str1], esi ; Str1
.text:004030A2                 call    strcmp
.text:004030A7                 test    eax, eax
.text:004030A9                 mov     ebx, ds:dword_410000
.text:004030AF                 setz    dl
.text:004030B2                 movzx   ecx, dl
.text:004030B5                 lea     edx, [ebx+ecx*4]
.text:004030B8                 mov     ds:dword_410000, edx
.text:004030BE                 test    ecx, ecx
.text:004030C0                 jz      loc_4035B3
.text:004030C6
.text:004030C6 loc_4030C6:                             ; CODE XREF: sub_402F90+F9↑j
.text:004030C6                 mov     [esp+9Ch+var_44], 2
.text:004030CE
.text:004030CE loc_4030CE:                             ; CODE XREF: sub_402F90+83↑j
.text:004030CE                                         ; sub_402F90+C2↑j ...
.text:004030CE                 movzx   edi, [esp+9Ch+var_3D]
.text:004030D3                 mov     [esp+9Ch+var_74], 0
.text:004030DB                 mov     [esp+9Ch+var_70], 0
.text:004030E3                 mov     [esp+9Ch+Str1], edi
.text:004030E6                 call    sub_4037F0
.text:004030EB                 nop
.text:004030EC                 lea     esi, [esi+0]
.text:004030F0
.text:004030F0 loc_4030F0:                             ; CODE XREF: sub_402F90+57F↓j
.text:004030F0                 mov     edi, eax
.text:004030F2                 mov     edx, ds:dword_410000
.text:004030F8                 mov     ecx, [edx]
.text:004030FA                 test    ecx, ecx
.text:004030FC                 jnz     loc_403452
.text:00403102
.text:00403102 loc_403102:                             ; CODE XREF: sub_402F90+4F5↓j
.text:00403102                                         ; sub_402F90+524↓j
.text:00403102                 mov     eax, [ebp+0]
.text:00403105                 test    eax, eax
.text:00403107                 jz      loc_403421
.text:0040310D                 dec     eax
.text:0040310E                 jnz     def_4031A0      ; jumptable 004031A0 default case
.text:00403114
.text:00403114 loc_403114:                             ; CODE XREF: sub_402F90+4BD↓j
.text:00403114                 mov     eax, [edi]
.text:00403116                 test    eax, eax
.text:00403118                 jz      loc_4033F1
.text:0040311E                 dec     eax
.text:0040311F                 jnz     def_4031A0      ; jumptable 004031A0 default case
.text:00403125
.text:00403125 loc_403125:                             ; CODE XREF: sub_402F90+48C↓j
.text:00403125                 mov     ecx, [ebp+8]
.text:00403128                 mov     [esp+9Ch+Str1], ecx ; char *
.text:0040312B                 call    sub_40BE80
.text:00403130                 mov     [esp+9Ch+String1], eax
.text:00403134                 call    _errno
.text:00403139                 mov     dword ptr [eax], 0
.text:0040313F                 mov     ebx, [edi+8]
.text:00403142                 mov     eax, [esp+9Ch+String1]
.text:00403146                 mov     [esp+9Ch+Str2], ebx ; String2
.text:0040314A                 mov     [esp+9Ch+Str1], eax ; String1
.text:0040314D                 call    strcoll
.text:00403152                 mov     [esp+9Ch+var_54], eax
.text:00403156                 cdq
.text:00403157                 mov     [esp+9Ch+var_50], edx
.text:0040315B                 call    _errno
.text:00403160                 mov     [esp+9Ch+var_5C], 0
.text:00403168                 mov     ebx, [eax]
.text:0040316A                 mov     [esp+9Ch+var_58], 0
.text:00403172                 mov     [esp+9Ch+Str1], ebp
.text:00403175                 call    sub_402A90
.text:0040317A                 test    al, al
.text:0040317C                 jnz     loc_4033C0
.text:00403182
.text:00403182 loc_403182:                             ; CODE XREF: sub_402F90+43A↓j
.text:00403182                 test    ebx, ebx
.text:00403184                 jz      short loc_403191
.text:00403186                 cmp     [esp+9Ch+var_3D], 0
.text:0040318B                 jnz     loc_40330D
.text:00403191
.text:00403191 loc_403191:                             ; CODE XREF: sub_402F90+1F4↑j
.text:00403191                                         ; sub_402F90+42B↓j ...
.text:00403191                 cmp     [esp+9Ch+var_44], 5 ; switch 6 cases
.text:00403196                 ja      def_4031A0      ; jumptable 004031A0 default case
.text:0040319C                 mov     esi, [esp+9Ch+var_44]
.text:004031A0                 jmp     ds:jpt_4031A0[esi*4] ; switch jump
.text:004031A0 ; ---------------------------------------------------------------------------
.text:004031A7                 align 4
.text:004031A8 jpt_4031A0      dd offset loc_4031C0    ; DATA XREF: sub_402F90+210↑r
.text:004031A8                 dd offset loc_40324D    ; jump table for switch statement
.text:004031A8                 dd offset loc_403275
.text:004031A8                 dd offset loc_403295
.text:004031A8                 dd offset loc_4032B5
.text:004031A8                 dd offset loc_4032E1
.text:004031C0 ; ---------------------------------------------------------------------------
.text:004031C0
.text:004031C0 loc_4031C0:                             ; CODE XREF: sub_402F90+210↑j
.text:004031C0                                         ; DATA XREF: sub_402F90:jpt_4031A0↑o
.text:004031C0                 mov     [esp+9Ch+var_45], 1 ; jumptable 004031A0 case 0
.text:004031C5                 mov     ebx, [esp+9Ch+var_58]
.text:004031C9                 cmp     [esp+9Ch+var_50], ebx
.text:004031CD                 jl      short loc_4031E0
.text:004031CF                 jg      short loc_4031DB
.text:004031D1                 mov     edx, [esp+9Ch+var_5C]
.text:004031D5                 cmp     [esp+9Ch+var_54], edx
.text:004031D9                 jb      short loc_4031E0
.text:004031DB
.text:004031DB loc_4031DB:                             ; CODE XREF: sub_402F90+23F↑j
.text:004031DB                                         ; sub_402F90+2CC↓j ...
.text:004031DB                 mov     [esp+9Ch+var_45], 0
.text:004031E0
.text:004031E0 loc_4031E0:                             ; CODE XREF: sub_402F90+23D↑j
.text:004031E0                                         ; sub_402F90+249↑j ...
.text:004031E0                 cmp     dword ptr [ebp+0], 1
.text:004031E4                 jz      short loc_403240
.text:004031E6
.text:004031E6 loc_4031E6:                             ; CODE XREF: sub_402F90+2BB↓j
.text:004031E6                 mov     [esp+9Ch+Str1], ebp ; Block
.text:004031E9                 call    free
.text:004031EE                 cmp     dword ptr [edi], 1
.text:004031F1                 jz      short loc_403233
.text:004031F3
.text:004031F3 loc_4031F3:                             ; CODE XREF: sub_402F90+2AE↓j
.text:004031F3                 mov     [esp+9Ch+Str1], edi ; Block
.text:004031F6                 xor     edi, edi
.text:004031F8                 call    free
.text:004031FD                 mov     eax, [esp+9Ch+String1]
.text:00403201                 mov     [esp+9Ch+Str1], eax ; Block
.text:00403204                 call    free
.text:00403209                 movzx   esi, [esp+9Ch+var_45]
.text:0040320E                 mov     [esp+9Ch+Str1], 10h ; size_t
.text:00403215                 call    sub_40BCC0
.text:0040321A                 mov     dword ptr [eax], 0
.text:00403220                 mov     edx, ds:dword_410000
.text:00403226                 mov     ebp, eax
.text:00403228                 mov     [eax+8], esi
.text:0040322B                 mov     [eax+0Ch], edi
.text:0040322E                 jmp     loc_402FCC
.text:00403233 ; ---------------------------------------------------------------------------
.text:00403233
.text:00403233 loc_403233:                             ; CODE XREF: sub_402F90+261↑j
.text:00403233                 mov     ebp, [edi+8]
.text:00403236                 mov     [esp+9Ch+Str1], ebp ; Block
.text:00403239                 call    free
.text:0040323E                 jmp     short loc_4031F3
.text:00403240 ; ---------------------------------------------------------------------------
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_402F90+254↑j
.text:00403240                 mov     ebx, [ebp+8]
.text:00403243                 mov     [esp+9Ch+Str1], ebx ; Block
.text:00403246                 call    free
.text:0040324B                 jmp     short loc_4031E6
.text:0040324D ; ---------------------------------------------------------------------------
.text:0040324D
.text:0040324D loc_40324D:                             ; CODE XREF: sub_402F90+210↑j
.text:0040324D                                         ; DATA XREF: sub_402F90:jpt_4031A0↑o
.text:0040324D                 mov     [esp+9Ch+var_45], 1 ; jumptable 004031A0 case 1
.text:00403252                 mov     eax, [esp+9Ch+var_58]
.text:00403256                 cmp     [esp+9Ch+var_50], eax
.text:0040325A                 jl      short loc_4031E0
.text:0040325C                 jg      loc_4031DB
.text:00403262                 mov     ecx, [esp+9Ch+var_5C]
.text:00403266                 cmp     [esp+9Ch+var_54], ecx
.text:0040326A                 jbe     loc_4031E0
.text:00403270                 jmp     loc_4031DB
.text:00403275 ; ---------------------------------------------------------------------------
.text:00403275
.text:00403275 loc_403275:                             ; CODE XREF: sub_402F90+210↑j
.text:00403275                                         ; DATA XREF: sub_402F90:jpt_4031A0↑o
.text:00403275                 mov     edx, [esp+9Ch+var_54] ; jumptable 004031A0 case 2
.text:00403279                 mov     eax, [esp+9Ch+var_5C]
.text:0040327D                 mov     esi, [esp+9Ch+var_50]
.text:00403281                 mov     ebx, [esp+9Ch+var_58]
.text:00403285                 xor     edx, eax
.text:00403287                 xor     esi, ebx
.text:00403289                 or      edx, esi
.text:0040328B                 setz    [esp+9Ch+var_45]
.text:00403290                 jmp     loc_4031E0
.text:00403295 ; ---------------------------------------------------------------------------
.text:00403295
.text:00403295 loc_403295:                             ; CODE XREF: sub_402F90+210↑j
.text:00403295                                         ; DATA XREF: sub_402F90:jpt_4031A0↑o
.text:00403295                 mov     edx, [esp+9Ch+var_54] ; jumptable 004031A0 case 3
.text:00403299                 mov     ebx, [esp+9Ch+var_5C]
.text:0040329D                 mov     ecx, [esp+9Ch+var_50]
.text:004032A1                 mov     esi, [esp+9Ch+var_58]
.text:004032A5                 xor     edx, ebx
.text:004032A7                 xor     ecx, esi
.text:004032A9                 or      edx, ecx
.text:004032AB                 setnz   [esp+9Ch+var_45]
.text:004032B0                 jmp     loc_4031E0
.text:004032B5 ; ---------------------------------------------------------------------------
.text:004032B5
.text:004032B5 loc_4032B5:                             ; CODE XREF: sub_402F90+210↑j
.text:004032B5                                         ; DATA XREF: sub_402F90:jpt_4031A0↑o
.text:004032B5                 mov     [esp+9Ch+var_45], 1 ; jumptable 004031A0 case 4
.text:004032BA                 mov     eax, [esp+9Ch+var_58]
.text:004032BE                 cmp     [esp+9Ch+var_50], eax
.text:004032C2                 jg      loc_4031E0
.text:004032C8                 jl      loc_4031DB
.text:004032CE                 mov     ecx, [esp+9Ch+var_5C]
.text:004032D2                 cmp     [esp+9Ch+var_54], ecx
.text:004032D6                 jnb     loc_4031E0
.text:004032DC                 jmp     loc_4031DB
.text:004032E1 ; ---------------------------------------------------------------------------
.text:004032E1
.text:004032E1 loc_4032E1:                             ; CODE XREF: sub_402F90+210↑j
.text:004032E1                                         ; DATA XREF: sub_402F90:jpt_4031A0↑o
.text:004032E1                 mov     [esp+9Ch+var_45], 1 ; jumptable 004031A0 case 5
.text:004032E6                 mov     esi, [esp+9Ch+var_58]
.text:004032EA                 cmp     [esp+9Ch+var_50], esi
.text:004032EE                 jg      loc_4031E0
.text:004032F4                 jl      loc_4031DB
.text:004032FA                 mov     edx, [esp+9Ch+var_5C]
.text:004032FE                 cmp     [esp+9Ch+var_54], edx
.text:00403302                 ja      loc_4031E0
.text:00403308                 jmp     loc_4031DB
.text:0040330D ; ---------------------------------------------------------------------------
.text:0040330D
.text:0040330D loc_40330D:                             ; CODE XREF: sub_402F90+1FB↑j
.text:0040330D                 mov     [esp+9Ch+Str1], offset aStringComparis ; "string comparison failed"
.text:00403314                 call    ds:libintl_gettext
.text:0040331A                 mov     [esp+9Ch+Str2], ebx ; ErrorMessage
.text:0040331E                 mov     [esp+9Ch+Str1], 0 ; Code
.text:00403325                 mov     [esp+9Ch+var_94], eax ; char *
.text:00403329                 call    sub_40D830
.text:0040332E                 mov     [esp+9Ch+Str1], offset sub_402F00
.text:00403335                 call    ds:libintl_gettext
.text:0040333B                 mov     [esp+9Ch+Str2], 0 ; ErrorMessage
.text:00403343                 mov     [esp+9Ch+Str1], 0 ; Code
.text:0040334A                 mov     [esp+9Ch+var_94], eax ; char *
.text:0040334E                 call    sub_40D830
.text:00403353                 mov     ecx, [edi+8]
.text:00403356                 mov     [esp+9Ch+Str2], 5 ; int
.text:0040335E                 mov     [esp+9Ch+Str1], 1 ; int
.text:00403365                 mov     [esp+9Ch+var_94], ecx ; char *
.text:00403369                 call    sub_404960
.text:0040336E                 mov     [esp+9Ch+Str2], 5 ; int
.text:00403376                 mov     esi, eax
.text:00403378                 mov     eax, [esp+9Ch+String1]
.text:0040337C                 mov     [esp+9Ch+Str1], 0 ; int
.text:00403383                 mov     [esp+9Ch+var_94], eax ; char *
.text:00403387                 call    sub_404960
.text:0040338C                 mov     [esp+9Ch+Str1], offset loc_402F40
.text:00403393                 mov     ebx, eax
.text:00403395                 call    ds:libintl_gettext
.text:0040339B                 mov     [esp+9Ch+var_8C], esi
.text:0040339F                 mov     dword ptr [esp+9Ch+var_90], ebx ; char
.text:004033A3                 mov     [esp+9Ch+Str2], 0 ; ErrorMessage
.text:004033AB                 mov     [esp+9Ch+var_94], eax ; char *
.text:004033AF                 mov     [esp+9Ch+Str1], 3 ; Code
.text:004033B6                 call    sub_40D830
.text:004033BB                 jmp     loc_403191
.text:004033C0 ; ---------------------------------------------------------------------------
.text:004033C0
.text:004033C0 loc_4033C0:                             ; CODE XREF: sub_402F90+1EC↑j
.text:004033C0                 mov     [esp+9Ch+Str1], edi
.text:004033C3                 call    sub_402A90
.text:004033C8                 test    al, al
.text:004033CA                 jz      loc_403182
.text:004033D0                 mov     edx, [ebp+8]
.text:004033D3                 mov     ebx, [ebp+0Ch]
.text:004033D6                 mov     [esp+9Ch+var_54], edx
.text:004033DA                 mov     [esp+9Ch+var_50], ebx
.text:004033DE                 mov     eax, [edi+8]
.text:004033E1                 mov     esi, [edi+0Ch]
.text:004033E4                 mov     [esp+9Ch+var_5C], eax
.text:004033E8                 mov     [esp+9Ch+var_58], esi
.text:004033EC                 jmp     loc_403191
.text:004033F1 ; ---------------------------------------------------------------------------
.text:004033F1
.text:004033F1 loc_4033F1:                             ; CODE XREF: sub_402F90+188↑j
.text:004033F1                 lea     edx, [esp+9Ch+var_3C]
.text:004033F5                 mov     [esp+9Ch+var_94], edx
.text:004033F9                 mov     ecx, [edi+0Ch]
.text:004033FC                 mov     esi, [edi+8]
.text:004033FF                 mov     [esp+9Ch+Str2], ecx
.text:00403403                 mov     [esp+9Ch+Str1], esi
.text:00403406                 call    sub_40BBC0
.text:0040340B                 mov     [esp+9Ch+Str1], eax ; char *
.text:0040340E                 call    sub_40BE80
.text:00403413                 mov     [edi+8], eax
.text:00403416                 mov     dword ptr [edi], 1
.text:0040341C                 jmp     loc_403125
.text:00403421 ; ---------------------------------------------------------------------------
.text:00403421
.text:00403421 loc_403421:                             ; CODE XREF: sub_402F90+177↑j
.text:00403421                 lea     ebx, [esp+9Ch+var_3C]
.text:00403425                 mov     [esp+9Ch+var_94], ebx
.text:00403429                 mov     edx, [ebp+8]
.text:0040342C                 mov     esi, [ebp+0Ch]
.text:0040342F                 mov     [esp+9Ch+Str1], edx
.text:00403432                 mov     [esp+9Ch+Str2], esi
.text:00403436                 call    sub_40BBC0
.text:0040343B                 mov     [esp+9Ch+Str1], eax ; char *
.text:0040343E                 call    sub_40BE80
.text:00403443                 mov     [ebp+8], eax
.text:00403446                 mov     dword ptr [ebp+0], 1
.text:0040344D                 jmp     loc_403114
.text:00403452 ; ---------------------------------------------------------------------------
.text:00403452
.text:00403452 loc_403452:                             ; CODE XREF: sub_402F90+16C↑j
.text:00403452                 mov     [esp+9Ch+Str2], offset asc_4015E5 ; "+"
.text:0040345A                 mov     ecx, [edx]
.text:0040345C                 mov     [esp+9Ch+Str1], ecx ; Str1
.text:0040345F                 call    strcmp
.text:00403464                 test    eax, eax
.text:00403466                 mov     esi, ds:dword_410000
.text:0040346C                 setz    dl
.text:0040346F                 movzx   ebx, dl
.text:00403472                 lea     edx, [esi+ebx*4]
.text:00403475                 mov     ds:dword_410000, edx
.text:0040347B                 xor     esi, esi
.text:0040347D                 test    ebx, ebx
.text:0040347F                 jnz     short loc_4034BF
.text:00403481                 mov     eax, [edx]
.text:00403483                 test    eax, eax
.text:00403485                 jz      loc_403102
.text:0040348B                 mov     [esp+9Ch+Str2], (offset loc_402F5F+6) ; Str2
.text:00403493                 mov     ecx, [edx]
.text:00403495                 mov     [esp+9Ch+Str1], ecx ; Str1
.text:00403498                 call    strcmp
.text:0040349D                 test    eax, eax
.text:0040349F                 setz    dl
.text:004034A2                 movzx   ebx, dl
.text:004034A5                 lea     esi, ds:0[ebx*4]
.text:004034AC                 add     ds:dword_410000, esi
.text:004034B2                 test    ebx, ebx
.text:004034B4                 jz      loc_403102
.text:004034BA                 mov     esi, 1
.text:004034BF
.text:004034BF loc_4034BF:                             ; CODE XREF: sub_402F90+4EF↑j
.text:004034BF                 movzx   ebx, [esp+9Ch+var_3D]
.text:004034C4                 mov     [esp+9Ch+Str1], ebx
.text:004034C7                 call    sub_4037F0
.text:004034CC                 cmp     [esp+9Ch+var_3D], 0
.text:004034D1                 mov     ebx, eax
.text:004034D3                 jnz     short loc_403530
.text:004034D5
.text:004034D5 loc_4034D5:                             ; CODE XREF: sub_402F90+5FD↓j
.text:004034D5                                         ; sub_402F90+61E↓j
.text:004034D5                 cmp     dword ptr [edi], 1
.text:004034D8                 jz      short loc_403521
.text:004034DA
.text:004034DA loc_4034DA:                             ; CODE XREF: sub_402F90+59C↓j
.text:004034DA                 mov     [esp+9Ch+Str1], edi ; Block
.text:004034DD                 call    free
.text:004034E2                 cmp     dword ptr [ebx], 1
.text:004034E5                 jz      short loc_403514
.text:004034E7
.text:004034E7 loc_4034E7:                             ; CODE XREF: sub_402F90+58F↓j
.text:004034E7                 mov     [esp+9Ch+Str1], ebx ; Block
.text:004034EA                 call    free
.text:004034EF                 mov     [esp+9Ch+Str1], 10h ; size_t
.text:004034F6                 call    sub_40BCC0
.text:004034FB                 mov     dword ptr [eax], 0
.text:00403501                 mov     ecx, [esp+9Ch+var_74]
.text:00403505                 mov     ebx, [esp+9Ch+var_70]
.text:00403509                 mov     [eax+8], ecx
.text:0040350C                 mov     [eax+0Ch], ebx
.text:0040350F                 jmp     loc_4030F0
.text:00403514 ; ---------------------------------------------------------------------------
.text:00403514
.text:00403514 loc_403514:                             ; CODE XREF: sub_402F90+555↑j
.text:00403514                 mov     edi, [ebx+8]
.text:00403517                 mov     [esp+9Ch+Str1], edi ; Block
.text:0040351A                 call    free
.text:0040351F                 jmp     short loc_4034E7
.text:00403521 ; ---------------------------------------------------------------------------
.text:00403521
.text:00403521 loc_403521:                             ; CODE XREF: sub_402F90+548↑j
.text:00403521                 mov     esi, [edi+8]
.text:00403524                 mov     [esp+9Ch+Str1], esi ; Block
.text:00403527                 call    free
.text:0040352C                 jmp     short loc_4034DA
.text:0040352C ; ---------------------------------------------------------------------------
.text:0040352E                 align 10h
.text:00403530
.text:00403530 loc_403530:                             ; CODE XREF: sub_402F90+543↑j
.text:00403530                 mov     [esp+9Ch+Str1], edi
.text:00403533                 call    sub_402A90
.text:00403538                 test    al, al
.text:0040353A                 jz      short loc_403548
.text:0040353C                 mov     [esp+9Ch+Str1], ebx
.text:0040353F                 call    sub_402A90
.text:00403544                 test    al, al
.text:00403546                 jnz     short loc_40356D
.text:00403548
.text:00403548 loc_403548:                             ; CODE XREF: sub_402F90+5AA↑j
.text:00403548                 mov     [esp+9Ch+Str1], 402F67h
.text:0040354F                 call    ds:libintl_gettext
.text:00403555                 mov     [esp+9Ch+Str2], 0 ; ErrorMessage
.text:0040355D                 mov     [esp+9Ch+Str1], 3 ; Code
.text:00403564                 mov     [esp+9Ch+var_94], eax ; char *
.text:00403568                 call    sub_40D830
.text:0040356D
.text:0040356D loc_40356D:                             ; CODE XREF: sub_402F90+5B6↑j
.text:0040356D                 test    esi, esi
.text:0040356F                 jnz     short loc_403592
.text:00403571                 mov     edx, [ebx+8]
.text:00403574                 mov     ecx, [ebx+0Ch]
.text:00403577                 mov     [esp+9Ch+var_74], edx
.text:0040357B                 mov     [esp+9Ch+var_70], ecx
.text:0040357F                 mov     esi, [edi+8]
.text:00403582                 mov     eax, [edi+0Ch]
.text:00403585                 add     [esp+9Ch+var_74], esi
.text:00403589                 adc     [esp+9Ch+var_70], eax
.text:0040358D                 jmp     loc_4034D5
.text:00403592 ; ---------------------------------------------------------------------------
.text:00403592
.text:00403592 loc_403592:                             ; CODE XREF: sub_402F90+5DF↑j
.text:00403592                 mov     edx, [edi+8]
.text:00403595                 mov     ecx, [edi+0Ch]
.text:00403598                 mov     [esp+9Ch+var_74], edx
.text:0040359C                 mov     [esp+9Ch+var_70], ecx
.text:004035A0                 mov     esi, [ebx+8]
.text:004035A3                 mov     eax, [ebx+0Ch]
.text:004035A6                 sub     [esp+9Ch+var_74], esi
.text:004035AA                 sbb     [esp+9Ch+var_70], eax
.text:004035AE                 jmp     loc_4034D5
.text:004035B3 ; ---------------------------------------------------------------------------
.text:004035B3
.text:004035B3 loc_4035B3:                             ; CODE XREF: sub_402F90+130↑j
.text:004035B3                 mov     edi, [edx]
.text:004035B5                 test    edi, edi
.text:004035B7                 jz      loc_402FD2
.text:004035BD                 mov     [esp+9Ch+Str2], offset loc_402F7C ; Str2
.text:004035C5                 mov     esi, [edx]
.text:004035C7                 mov     [esp+9Ch+Str1], esi ; Str1
.text:004035CA                 call    strcmp
.text:004035CF                 mov     [esp+9Ch+var_44], 3
.text:004035D7                 test    eax, eax
.text:004035D9                 mov     ebx, ds:dword_410000
.text:004035DF                 setz    dl
.text:004035E2                 movzx   ecx, dl
.text:004035E5                 lea     edx, [ebx+ecx*4]
.text:004035E8                 mov     ds:dword_410000, edx
.text:004035EE                 test    ecx, ecx
.text:004035F0                 jnz     loc_4030CE
.text:004035F6                 mov     edi, [edx]
.text:004035F8                 test    edi, edi
.text:004035FA                 jz      loc_402FD2
.text:00403600                 mov     [esp+9Ch+Str2], (offset loc_402F7C+3) ; Str2
.text:00403608                 mov     esi, [edx]
.text:0040360A                 mov     [esp+9Ch+Str1], esi ; Str1
.text:0040360D                 call    strcmp
.text:00403612                 mov     [esp+9Ch+var_44], 4
.text:0040361A                 test    eax, eax
.text:0040361C                 mov     ebx, ds:dword_410000
.text:00403622                 setz    dl
.text:00403625                 movzx   ecx, dl
.text:00403628                 lea     edx, [ebx+ecx*4]
.text:0040362B                 mov     ds:dword_410000, edx
.text:00403631                 test    ecx, ecx
.text:00403633                 jnz     loc_4030CE
.text:00403639                 mov     edi, [edx]
.text:0040363B                 test    edi, edi
.text:0040363D                 jz      loc_402FD2
.text:00403643                 mov     [esp+9Ch+Str2], offset loc_402F82 ; Str2
.text:0040364B                 mov     esi, [edx]
.text:0040364D                 mov     [esp+9Ch+Str1], esi ; Str1
.text:00403650                 call    strcmp
.text:00403655                 test    eax, eax
.text:00403657                 setz    dl
.text:0040365A                 movzx   ecx, dl
.text:0040365D                 lea     ebx, ds:0[ecx*4]
.text:00403664                 add     ds:dword_410000, ebx
.text:0040366A                 test    ecx, ecx
.text:0040366C                 jz      loc_402FD2
.text:00403672                 mov     [esp+9Ch+var_44], 5
.text:0040367A                 jmp     loc_4030CE
.text:0040367F ; ---------------------------------------------------------------------------
.text:0040367F
.text:0040367F loc_40367F:                             ; CODE XREF: sub_402F90+34↑j
.text:0040367F                 mov     [esp+9Ch+Str2], offset asc_4015E5 ; "+"
.text:00403687                 mov     ecx, [edx]
.text:00403689                 mov     [esp+9Ch+Str1], ecx ; Str1
.text:0040368C                 call    strcmp
.text:00403691                 mov     [esp+9Ch+var_68], 0
.text:00403699                 test    eax, eax
.text:0040369B                 mov     ebx, ds:dword_410000
.text:004036A1                 setz    dl
.text:004036A4                 movzx   ecx, dl
.text:004036A7                 lea     edx, [ebx+ecx*4]
.text:004036AA                 mov     ds:dword_410000, edx
.text:004036B0                 test    ecx, ecx
.text:004036B2                 jnz     short loc_4036F7
.text:004036B4                 mov     ebx, [edx]
.text:004036B6                 test    ebx, ebx
.text:004036B8                 jz      loc_402FCA
.text:004036BE                 mov     [esp+9Ch+Str2], (offset loc_402F5F+6) ; Str2
.text:004036C6                 mov     ecx, [edx]
.text:004036C8                 mov     [esp+9Ch+Str1], ecx ; Str1
.text:004036CB                 call    strcmp
.text:004036D0                 test    eax, eax
.text:004036D2                 mov     ebx, ds:dword_410000
.text:004036D8                 setz    dl
.text:004036DB                 movzx   ecx, dl
.text:004036DE                 lea     edx, [ebx+ecx*4]
.text:004036E1                 mov     ds:dword_410000, edx
.text:004036E7                 test    ecx, ecx
.text:004036E9                 jz      loc_402FCA
.text:004036EF                 mov     [esp+9Ch+var_68], 1
.text:004036F7
.text:004036F7 loc_4036F7:                             ; CODE XREF: sub_402F90+722↑j
.text:004036F7                 movzx   ebx, [esp+9Ch+var_61]
.text:004036FC                 mov     [esp+9Ch+Str1], ebx
.text:004036FF                 call    sub_4037F0
.text:00403704                 cmp     [esp+9Ch+var_61], 0
.text:00403709                 mov     ebx, eax
.text:0040370B                 jnz     short loc_40375E
.text:0040370D
.text:0040370D loc_40370D:                             ; CODE XREF: sub_402F90+81F↓j
.text:0040370D                                         ; sub_402F90+830↓j
.text:0040370D                 cmp     dword ptr [esi], 1
.text:00403710                 jz      short loc_403751
.text:00403712
.text:00403712 loc_403712:                             ; CODE XREF: sub_402F90+7CC↓j
.text:00403712                 mov     [esp+9Ch+Str1], esi ; Block
.text:00403715                 call    free
.text:0040371A                 cmp     dword ptr [ebx], 1
.text:0040371D                 jz      short loc_403744
.text:0040371F
.text:0040371F loc_40371F:                             ; CODE XREF: sub_402F90+7BF↓j
.text:0040371F                 mov     [esp+9Ch+Str1], ebx ; Block
.text:00403722                 call    free
.text:00403727                 mov     [esp+9Ch+Str1], 10h ; size_t
.text:0040372E                 call    sub_40BCC0
.text:00403733                 mov     dword ptr [eax], 0
.text:00403739                 mov     [eax+8], edi
.text:0040373C                 mov     [eax+0Ch], ebp
.text:0040373F                 jmp     loc_402FB8
.text:00403744 ; ---------------------------------------------------------------------------
.text:00403744
.text:00403744 loc_403744:                             ; CODE XREF: sub_402F90+78D↑j
.text:00403744                 mov     esi, [ebx+8]
.text:00403747                 mov     [esp+9Ch+Str1], esi ; Block
.text:0040374A                 call    free
.text:0040374F                 jmp     short loc_40371F
.text:00403751 ; ---------------------------------------------------------------------------
.text:00403751
.text:00403751 loc_403751:                             ; CODE XREF: sub_402F90+780↑j
.text:00403751                 mov     edx, [esi+8]
.text:00403754                 mov     [esp+9Ch+Str1], edx ; Block
.text:00403757                 call    free
.text:0040375C                 jmp     short loc_403712
.text:0040375E ; ---------------------------------------------------------------------------
.text:0040375E
.text:0040375E loc_40375E:                             ; CODE XREF: sub_402F90+77B↑j
.text:0040375E                 mov     [esp+9Ch+Str1], esi
.text:00403761                 call    sub_402A90
.text:00403766                 test    al, al
.text:00403768                 jz      short loc_403776
.text:0040376A                 mov     [esp+9Ch+Str1], ebx
.text:0040376D                 call    sub_402A90
.text:00403772                 test    al, al
.text:00403774                 jnz     short loc_40379B
.text:00403776
.text:00403776 loc_403776:                             ; CODE XREF: sub_402F90+7D8↑j
.text:00403776                 mov     [esp+9Ch+Str1], 402F67h
.text:0040377D                 call    ds:libintl_gettext
.text:00403783                 mov     [esp+9Ch+Str2], 0 ; ErrorMessage
.text:0040378B                 mov     [esp+9Ch+Str1], 3 ; Code
.text:00403792                 mov     [esp+9Ch+var_94], eax ; char *
.text:00403796                 call    sub_40D830
.text:0040379B
.text:0040379B loc_40379B:                             ; CODE XREF: sub_402F90+7E4↑j
.text:0040379B                 mov     eax, [esp+9Ch+var_68]
.text:0040379F                 test    eax, eax
.text:004037A1                 jnz     short loc_4037B4
.text:004037A3                 mov     edi, [ebx+8]
.text:004037A6                 mov     ebp, [ebx+0Ch]
.text:004037A9                 add     edi, [esi+8]
.text:004037AC                 adc     ebp, [esi+0Ch]
.text:004037AF                 jmp     loc_40370D
.text:004037B4 ; ---------------------------------------------------------------------------
.text:004037B4
.text:004037B4 loc_4037B4:                             ; CODE XREF: sub_402F90+811↑j
.text:004037B4                 mov     edi, [esi+8]
.text:004037B7                 mov     ebp, [esi+0Ch]
.text:004037BA                 sub     edi, [ebx+8]
.text:004037BD                 sbb     ebp, [ebx+0Ch]
.text:004037C0                 jmp     loc_40370D
.text:004037C5 ; ---------------------------------------------------------------------------
.text:004037C5
.text:004037C5 def_4031A0:                             ; CODE XREF: sub_402F90+17E↑j
.text:004037C5                                         ; sub_402F90+18F↑j ...
.text:004037C5                 call    abort           ; jumptable 004031A0 default case
.text:004037C5 sub_402F90      endp ; sp-analysis failed
.text:004037C5
.text:004037C5 ; ---------------------------------------------------------------------------
.text:004037CA ; const char asc_4037CA[2]
.text:004037CA asc_4037CA      db ':',0                ; DATA XREF: sub_4037F0+40↓o
.text:004037CA                                         ; sub_4037F0+1AF↓o
.text:004037CC ; const char asc_4037CC[]
.text:004037CC asc_4037CC:                             ; DATA XREF: sub_4037F0:loc_4038D2↓o
.text:004037CC                                         ; sub_4037F0+118↓o ...
.text:004037CC                 text "UTF-16LE", '*/%'
.text:004037D2 aDivisionByZero db 'division by zero',0
.text:004037E3                 align 10h
.text:004037F0
.text:004037F0 ; =============== S U B R O U T I N E =======================================
.text:004037F0
.text:004037F0
.text:004037F0 sub_4037F0      proc near               ; CODE XREF: sub_402F90+23↑p
.text:004037F0                                         ; sub_402F90+156↑p ...
.text:004037F0
.text:004037F0 Str1            = dword ptr -3Ch
.text:004037F0 Str2            = dword ptr -38h
.text:004037F0 var_34          = dword ptr -34h
.text:004037F0 var_30          = dword ptr -30h
.text:004037F0 var_25          = byte ptr -25h
.text:004037F0 var_24          = dword ptr -24h
.text:004037F0 var_20          = dword ptr -20h
.text:004037F0 Block           = dword ptr -1Ch
.text:004037F0 var_15          = byte ptr -15h
.text:004037F0 arg_0           = dword ptr  4
.text:004037F0
.text:004037F0                 push    ebp
.text:004037F1                 push    edi
.text:004037F2                 push    esi
.text:004037F3                 push    ebx
.text:004037F4                 sub     esp, 2Ch
.text:004037F7                 mov     ecx, [esp+3Ch+arg_0]
.text:004037FB                 mov     [esp+3Ch+var_24], 0
.text:00403803                 mov     [esp+3Ch+var_20], 0
.text:0040380B                 movzx   edx, cl
.text:0040380E                 mov     [esp+3Ch+var_15], cl
.text:00403812                 mov     [esp+3Ch+var_25], cl
.text:00403816                 mov     [esp+3Ch+Str1], edx
.text:00403819                 call    sub_401610
.text:0040381E                 mov     edi, eax
.text:00403820
.text:00403820 loc_403820:                             ; CODE XREF: sub_4037F0+90↓j
.text:00403820                 mov     edx, ds:dword_410000
.text:00403826                 mov     eax, [edx]
.text:00403828                 test    eax, eax
.text:0040382A                 jz      loc_4038BB
.text:00403830                 mov     [esp+3Ch+Str2], offset asc_4037CA ; ":"
.text:00403838                 mov     ebp, [edx]
.text:0040383A                 mov     [esp+3Ch+Str1], ebp ; Str1
.text:0040383D                 call    strcmp
.text:00403842                 test    eax, eax
.text:00403844                 mov     esi, ds:dword_410000
.text:0040384A                 setz    dl
.text:0040384D                 movzx   ebx, dl
.text:00403850                 lea     edx, [esi+ebx*4]
.text:00403853                 mov     ds:dword_410000, edx
.text:00403859                 test    ebx, ebx
.text:0040385B                 jz      short loc_4038BB
.text:0040385D                 movzx   ecx, [esp+3Ch+var_25]
.text:00403862                 mov     [esp+3Ch+Str1], ecx
.text:00403865                 call    sub_401610
.text:0040386A                 cmp     [esp+3Ch+var_25], 0
.text:0040386F                 mov     ebx, eax
.text:00403871                 jnz     short loc_40388F
.text:00403873
.text:00403873 loc_403873:                             ; CODE XREF: sub_4037F0+BC↓j
.text:00403873                 cmp     dword ptr [ebx], 1
.text:00403876                 jz      short loc_403882
.text:00403878
.text:00403878 loc_403878:                             ; CODE XREF: sub_4037F0+9D↓j
.text:00403878                 mov     [esp+3Ch+Str1], ebx ; Block
.text:0040387B                 call    free
.text:00403880                 jmp     short loc_403820
.text:00403882 ; ---------------------------------------------------------------------------
.text:00403882
.text:00403882 loc_403882:                             ; CODE XREF: sub_4037F0+86↑j
.text:00403882                 mov     edx, [ebx+8]
.text:00403885                 mov     [esp+3Ch+Str1], edx ; Block
.text:00403888                 call    free
.text:0040388D                 jmp     short loc_403878
.text:0040388F ; ---------------------------------------------------------------------------
.text:0040388F
.text:0040388F loc_40388F:                             ; CODE XREF: sub_4037F0+81↑j
.text:0040388F                 mov     [esp+3Ch+Str2], eax
.text:00403893                 mov     [esp+3Ch+Str1], edi
.text:00403896                 call    near ptr loc_402C0F+1
.text:0040389B                 cmp     dword ptr [edi], 1
.text:0040389E                 mov     ebp, eax
.text:004038A0                 jz      short loc_4038AE
.text:004038A2
.text:004038A2 loc_4038A2:                             ; CODE XREF: sub_4037F0+C9↓j
.text:004038A2                 mov     [esp+3Ch+Str1], edi ; Block
.text:004038A5                 mov     edi, ebp
.text:004038A7                 call    free
.text:004038AC                 jmp     short loc_403873
.text:004038AE ; ---------------------------------------------------------------------------
.text:004038AE
.text:004038AE loc_4038AE:                             ; CODE XREF: sub_4037F0+B0↑j
.text:004038AE                 mov     esi, [edi+8]
.text:004038B1                 mov     [esp+3Ch+Str1], esi ; Block
.text:004038B4                 call    free
.text:004038B9                 jmp     short loc_4038A2
.text:004038BB ; ---------------------------------------------------------------------------
.text:004038BB
.text:004038BB loc_4038BB:                             ; CODE XREF: sub_4037F0+3A↑j
.text:004038BB                                         ; sub_4037F0+6B↑j
.text:004038BB                 mov     [esp+3Ch+Block], edi
.text:004038BF                 nop
.text:004038C0
.text:004038C0 loc_4038C0:                             ; CODE XREF: sub_4037F0+291↓j
.text:004038C0                 mov     edi, [edx]
.text:004038C2                 test    edi, edi
.text:004038C4                 jnz     short loc_4038D2
.text:004038C6
.text:004038C6 loc_4038C6:                             ; CODE XREF: sub_4037F0+116↓j
.text:004038C6                                         ; sub_4037F0+14E↓j ...
.text:004038C6                 mov     eax, [esp+3Ch+Block]
.text:004038CA                 add     esp, 2Ch
.text:004038CD                 pop     ebx
.text:004038CE                 pop     esi
.text:004038CF                 pop     edi
.text:004038D0                 pop     ebp
.text:004038D1                 retn
.text:004038D2 ; ---------------------------------------------------------------------------
.text:004038D2
.text:004038D2 loc_4038D2:                             ; CODE XREF: sub_4037F0+D4↑j
.text:004038D2                 mov     [esp+3Ch+Str2], offset asc_4037CC ; "*/%"
.text:004038DA                 mov     esi, [edx]
.text:004038DC                 mov     [esp+3Ch+Str1], esi ; Str1
.text:004038DF                 call    strcmp
.text:004038E4                 test    eax, eax
.text:004038E6                 mov     ebp, ds:dword_410000
.text:004038EC                 setz    cl
.text:004038EF                 xor     esi, esi
.text:004038F1                 movzx   ebx, cl
.text:004038F4                 lea     edx, [ebp+ebx*4+0]
.text:004038F8                 test    ebx, ebx
.text:004038FA                 mov     ds:dword_410000, edx
.text:00403900                 jnz     short loc_403974
.text:00403902                 mov     eax, [edx]
.text:00403904                 test    eax, eax
.text:00403906                 jz      short loc_4038C6
.text:00403908                 mov     [esp+3Ch+Str2], (offset asc_4037CC+2) ; Str2
.text:00403910                 mov     esi, 1
.text:00403915                 mov     ebp, [edx]
.text:00403917                 mov     [esp+3Ch+Str1], ebp ; Str1
.text:0040391A                 call    strcmp
.text:0040391F                 test    eax, eax
.text:00403921                 mov     ebx, ds:dword_410000
.text:00403927                 setz    dl
.text:0040392A                 movzx   edi, dl
.text:0040392D                 lea     edx, [ebx+edi*4]
.text:00403930                 mov     ds:dword_410000, edx
.text:00403936                 test    edi, edi
.text:00403938                 jnz     short loc_403974
.text:0040393A                 mov     esi, [edx]
.text:0040393C                 test    esi, esi
.text:0040393E                 jz      short loc_4038C6
.text:00403940                 mov     [esp+3Ch+Str2], (offset asc_4037CC+4) ; Str2
.text:00403948                 mov     ebp, [edx]
.text:0040394A                 mov     [esp+3Ch+Str1], ebp ; Str1
.text:0040394D                 call    strcmp
.text:00403952                 test    eax, eax
.text:00403954                 setz    bl
.text:00403957                 movzx   ecx, bl
.text:0040395A                 lea     edi, ds:0[ecx*4]
.text:00403961                 add     ds:dword_410000, edi
.text:00403967                 test    ecx, ecx
.text:00403969                 jz      loc_4038C6
.text:0040396F                 mov     esi, 2
.text:00403974
.text:00403974 loc_403974:                             ; CODE XREF: sub_4037F0+110↑j
.text:00403974                                         ; sub_4037F0+148↑j
.text:00403974                 movzx   edx, [esp+3Ch+var_15]
.text:00403979                 mov     [esp+3Ch+Str1], edx
.text:0040397C                 call    sub_401610
.text:00403981                 mov     ebp, eax
.text:00403983                 lea     esi, [esi+0]
.text:00403989                 lea     edi, [edi+0]
.text:00403990
.text:00403990 loc_403990:                             ; CODE XREF: sub_4037F0+1FD↓j
.text:00403990                 mov     eax, ds:dword_410000
.text:00403995                 mov     ecx, [eax]
.text:00403997                 test    ecx, ecx
.text:00403999                 jz      loc_403A2D
.text:0040399F                 mov     [esp+3Ch+Str2], offset asc_4037CA ; ":"
.text:004039A7                 mov     ecx, [eax]
.text:004039A9                 mov     [esp+3Ch+Str1], ecx ; Str1
.text:004039AC                 call    strcmp
.text:004039B1                 test    eax, eax
.text:004039B3                 setz    dl
.text:004039B6                 movzx   edi, dl
.text:004039B9                 lea     ebx, ds:0[edi*4]
.text:004039C0                 add     ds:dword_410000, ebx
.text:004039C6                 test    edi, edi
.text:004039C8                 jz      short loc_403A2D
.text:004039CA                 movzx   edi, [esp+3Ch+var_15]
.text:004039CF                 mov     [esp+3Ch+Str1], edi
.text:004039D2                 call    sub_401610
.text:004039D7                 cmp     [esp+3Ch+var_15], 0
.text:004039DC                 mov     ebx, eax
.text:004039DE                 jnz     short loc_403A00
.text:004039E0
.text:004039E0 loc_4039E0:                             ; CODE XREF: sub_4037F0+22E↓j
.text:004039E0                 cmp     dword ptr [ebx], 1
.text:004039E3                 jz      short loc_4039F0
.text:004039E5
.text:004039E5 loc_4039E5:                             ; CODE XREF: sub_4037F0+20B↓j
.text:004039E5                 mov     [esp+3Ch+Str1], ebx ; Block
.text:004039E8                 call    free
.text:004039ED                 jmp     short loc_403990
.text:004039ED ; ---------------------------------------------------------------------------
.text:004039EF                 align 10h
.text:004039F0
.text:004039F0 loc_4039F0:                             ; CODE XREF: sub_4037F0+1F3↑j
.text:004039F0                 mov     ecx, [ebx+8]
.text:004039F3                 mov     [esp+3Ch+Str1], ecx ; Block
.text:004039F6                 call    free
.text:004039FB                 jmp     short loc_4039E5
.text:004039FB ; ---------------------------------------------------------------------------
.text:004039FD                 align 10h
.text:00403A00
.text:00403A00 loc_403A00:                             ; CODE XREF: sub_4037F0+1EE↑j
.text:00403A00                 mov     [esp+3Ch+Str2], eax
.text:00403A04                 mov     [esp+3Ch+Str1], ebp
.text:00403A07                 call    near ptr loc_402C0F+1
.text:00403A0C                 cmp     dword ptr [ebp+0], 1
.text:00403A10                 mov     edi, eax
.text:00403A12                 jz      short loc_403A20
.text:00403A14
.text:00403A14 loc_403A14:                             ; CODE XREF: sub_4037F0+23B↓j
.text:00403A14                 mov     [esp+3Ch+Str1], ebp ; Block
.text:00403A17                 mov     ebp, edi
.text:00403A19                 call    free
.text:00403A1E                 jmp     short loc_4039E0
.text:00403A20 ; ---------------------------------------------------------------------------
.text:00403A20
.text:00403A20 loc_403A20:                             ; CODE XREF: sub_4037F0+222↑j
.text:00403A20                 mov     edx, [ebp+8]
.text:00403A23                 mov     [esp+3Ch+Str1], edx ; Block
.text:00403A26                 call    free
.text:00403A2B                 jmp     short loc_403A14
.text:00403A2D ; ---------------------------------------------------------------------------
.text:00403A2D
.text:00403A2D loc_403A2D:                             ; CODE XREF: sub_4037F0+1A9↑j
.text:00403A2D                                         ; sub_4037F0+1D8↑j
.text:00403A2D                 cmp     [esp+3Ch+var_15], 0
.text:00403A32                 jnz     short loc_403AA0
.text:00403A34
.text:00403A34 loc_403A34:                             ; CODE XREF: sub_4037F0+322↓j
.text:00403A34                                         ; sub_4037F0+35C↓j
.text:00403A34                 mov     eax, [esp+3Ch+Block]
.text:00403A38                 cmp     dword ptr [eax], 1
.text:00403A3B                 jz      short loc_403A93
.text:00403A3D
.text:00403A3D loc_403A3D:                             ; CODE XREF: sub_4037F0+2AE↓j
.text:00403A3D                 mov     ebx, [esp+3Ch+Block]
.text:00403A41                 mov     [esp+3Ch+Str1], ebx ; Block
.text:00403A44                 call    free
.text:00403A49                 cmp     dword ptr [ebp+0], 1
.text:00403A4D                 jz      short loc_403A86
.text:00403A4F
.text:00403A4F loc_403A4F:                             ; CODE XREF: sub_4037F0+2A1↓j
.text:00403A4F                 mov     [esp+3Ch+Str1], ebp ; Block
.text:00403A52                 call    free
.text:00403A57                 mov     [esp+3Ch+Str1], 10h ; size_t
.text:00403A5E                 call    sub_40BCC0
.text:00403A63                 mov     dword ptr [eax], 0
.text:00403A69                 mov     esi, [esp+3Ch+var_24]
.text:00403A6D                 mov     ebp, [esp+3Ch+var_20]
.text:00403A71                 mov     edx, ds:dword_410000
.text:00403A77                 mov     [eax+8], esi
.text:00403A7A                 mov     [eax+0Ch], ebp
.text:00403A7D                 mov     [esp+3Ch+Block], eax
.text:00403A81                 jmp     loc_4038C0
.text:00403A86 ; ---------------------------------------------------------------------------
.text:00403A86
.text:00403A86 loc_403A86:                             ; CODE XREF: sub_4037F0+25D↑j
.text:00403A86                 mov     edi, [ebp+8]
.text:00403A89                 mov     [esp+3Ch+Str1], edi ; Block
.text:00403A8C                 call    free
.text:00403A91                 jmp     short loc_403A4F
.text:00403A93 ; ---------------------------------------------------------------------------
.text:00403A93
.text:00403A93 loc_403A93:                             ; CODE XREF: sub_4037F0+24B↑j
.text:00403A93                 mov     esi, [eax+8]
.text:00403A96                 mov     [esp+3Ch+Str1], esi ; Block
.text:00403A99                 call    free
.text:00403A9E                 jmp     short loc_403A3D
.text:00403AA0 ; ---------------------------------------------------------------------------
.text:00403AA0
.text:00403AA0 loc_403AA0:                             ; CODE XREF: sub_4037F0+242↑j
.text:00403AA0                 mov     ebx, [esp+3Ch+Block]
.text:00403AA4                 mov     [esp+3Ch+Str1], ebx
.text:00403AA7                 call    sub_402A90
.text:00403AAC                 test    al, al
.text:00403AAE                 jz      short loc_403ABC
.text:00403AB0                 mov     [esp+3Ch+Str1], ebp
.text:00403AB3                 call    sub_402A90
.text:00403AB8                 test    al, al
.text:00403ABA                 jnz     short loc_403AE1
.text:00403ABC
.text:00403ABC loc_403ABC:                             ; CODE XREF: sub_4037F0+2BE↑j
.text:00403ABC                 mov     [esp+3Ch+Str1], 402F67h
.text:00403AC3                 call    ds:libintl_gettext
.text:00403AC9                 mov     [esp+3Ch+Str2], 0 ; ErrorMessage
.text:00403AD1                 mov     [esp+3Ch+Str1], 3 ; Code
.text:00403AD8                 mov     [esp+3Ch+var_34], eax ; char *
.text:00403ADC                 call    sub_40D830
.text:00403AE1
.text:00403AE1 loc_403AE1:                             ; CODE XREF: sub_4037F0+2CA↑j
.text:00403AE1                 test    esi, esi
.text:00403AE3                 jnz     short loc_403B17
.text:00403AE5                 mov     ebx, [esp+3Ch+Block]
.text:00403AE9                 mov     eax, [ebp+8]
.text:00403AEC                 mov     edi, [ebx+8]
.text:00403AEF                 mov     esi, [ebx+0Ch]
.text:00403AF2                 mul     edi
.text:00403AF4                 mov     ecx, edx
.text:00403AF6                 mov     [esp+3Ch+var_20], edx
.text:00403AFA                 mov     [esp+3Ch+var_24], eax
.text:00403AFE                 mov     eax, [ebp+0Ch]
.text:00403B01                 imul    eax, edi
.text:00403B04                 add     ecx, eax
.text:00403B06                 mov     eax, [ebp+8]
.text:00403B09                 imul    eax, esi
.text:00403B0C                 add     ecx, eax
.text:00403B0E                 mov     [esp+3Ch+var_20], ecx
.text:00403B12                 jmp     loc_403A34
.text:00403B17 ; ---------------------------------------------------------------------------
.text:00403B17
.text:00403B17 loc_403B17:                             ; CODE XREF: sub_4037F0+2F3↑j
.text:00403B17                 mov     ebx, [ebp+0Ch]
.text:00403B1A                 mov     ecx, [ebp+8]
.text:00403B1D                 mov     eax, ebx
.text:00403B1F                 or      eax, ecx
.text:00403B21                 jz      short loc_403B71
.text:00403B23
.text:00403B23 loc_403B23:                             ; CODE XREF: sub_4037F0+3AC↓j
.text:00403B23                 dec     esi
.text:00403B24                 jz      short loc_403B51
.text:00403B26                 mov     eax, [esp+3Ch+Block]
.text:00403B2A                 mov     edx, [eax+8]
.text:00403B2D                 mov     edi, [eax+0Ch]
.text:00403B30                 mov     [esp+3Ch+var_34], ecx
.text:00403B34                 mov     [esp+3Ch+var_30], ebx
.text:00403B38                 mov     [esp+3Ch+Str1], edx
.text:00403B3B                 mov     [esp+3Ch+Str2], edi
.text:00403B3F                 call    sub_40E300
.text:00403B44
.text:00403B44 loc_403B44:                             ; CODE XREF: sub_4037F0+37F↓j
.text:00403B44                 mov     [esp+3Ch+var_24], eax
.text:00403B48                 mov     [esp+3Ch+var_20], edx
.text:00403B4C                 jmp     loc_403A34
.text:00403B51 ; ---------------------------------------------------------------------------
.text:00403B51
.text:00403B51 loc_403B51:                             ; CODE XREF: sub_4037F0+334↑j
.text:00403B51                 mov     eax, [esp+3Ch+Block]
.text:00403B55                 mov     edx, [eax+8]
.text:00403B58                 mov     edi, [eax+0Ch]
.text:00403B5B                 mov     [esp+3Ch+var_34], ecx
.text:00403B5F                 mov     [esp+3Ch+var_30], ebx
.text:00403B63                 mov     [esp+3Ch+Str1], edx
.text:00403B66                 mov     [esp+3Ch+Str2], edi
.text:00403B6A                 call    sub_40E1A0
.text:00403B6F                 jmp     short loc_403B44
.text:00403B71 ; ---------------------------------------------------------------------------
.text:00403B71
.text:00403B71 loc_403B71:                             ; CODE XREF: sub_4037F0+331↑j
.text:00403B71                 mov     [esp+3Ch+Str1], 4037D2h
.text:00403B78                 call    ds:libintl_gettext
.text:00403B7E                 mov     [esp+3Ch+Str2], 0 ; ErrorMessage
.text:00403B86                 mov     [esp+3Ch+Str1], 3 ; Code
.text:00403B8D                 mov     [esp+3Ch+var_34], eax ; char *
.text:00403B91                 call    sub_40D830
.text:00403B96                 mov     ecx, [ebp+8]
.text:00403B99                 mov     ebx, [ebp+0Ch]
.text:00403B9C                 jmp     short loc_403B23
.text:00403B9C sub_4037F0      endp
.text:00403B9C
.text:00403B9C ; ---------------------------------------------------------------------------
.text:00403B9E                 align 10h
.text:00403BA0 aLiteral        db 'literal',0          ; DATA XREF: .text:00403BE0↓o
.text:00403BA8 aShell          db 'shell',0
.text:00403BAE aShellAlways    db 'shell-always',0
.text:00403BBB aC              db 'c',0
.text:00403BBD aEscape         db 'escape',0
.text:00403BC4 aLocale         db 'locale',0
.text:00403BCB aClocale        db 'clocale',0
.text:00403BD3                 align 10h
.text:00403BE0                 dd offset aLiteral      ; "literal"
.text:00403BE4 ; ---------------------------------------------------------------------------
.text:00403BE4                 test    al, 3Bh
.text:00403BE6                 inc     eax
.text:00403BE7                 add     [esi-44FFBFC5h], ch
.text:00403BED                 cmp     eax, [eax+0]
.text:00403BF0                 mov     ebp, 0C400403Bh
.text:00403BF5                 cmp     eax, [eax+0]
.text:00403BF8                 retf
.text:00403BF8 ; ---------------------------------------------------------------------------
.text:00403BF9                 db 3Bh, 40h, 0
.text:00403BFC                 dd 2 dup(0)
.text:00403C04                 dd 1, 2, 3, 4, 5, 6
.text:00403C1C asc_403C1C:                             ; DATA XREF: sub_403C30+7E↓o
.text:00403C1C                                         ; sub_403C30+A39↓o ...
.text:00403C1C                 text "UTF-16LE", '"',27h,'`'
.text:00403C22                 align 10h
.text:00403C30
.text:00403C30 ; =============== S U B R O U T I N E =======================================
.text:00403C30
.text:00403C30
.text:00403C30 ; int __cdecl sub_403C30(int, int, char *Str, int, int, int)
.text:00403C30 sub_403C30      proc near               ; CODE XREF: sub_403C30+43A↓p
.text:00403C30                                         ; .text:004047F3↓p ...
.text:00403C30
.text:00403C30 C               = dword ptr -4Ch
.text:00403C30 Type            = dword ptr -48h
.text:00403C30 SizeInBytes     = dword ptr -44h
.text:00403C30 State           = dword ptr -40h
.text:00403C30 var_3C          = dword ptr -3Ch
.text:00403C30 var_38          = dword ptr -38h
.text:00403C30 var_34          = dword ptr -34h
.text:00403C30 var_30          = dword ptr -30h
.text:00403C30 var_29          = byte ptr -29h
.text:00403C30 var_28          = dword ptr -28h
.text:00403C30 var_22          = byte ptr -22h
.text:00403C30 var_21          = byte ptr -21h
.text:00403C30 var_20          = dword ptr -20h
.text:00403C30 var_1C          = dword ptr -1Ch
.text:00403C30 var_18          = mbstate_t ptr -18h
.text:00403C30 arg_0           = dword ptr  4
.text:00403C30 arg_4           = dword ptr  8
.text:00403C30 Str             = dword ptr  0Ch
.text:00403C30 arg_C           = dword ptr  10h
.text:00403C30 arg_10          = dword ptr  14h
.text:00403C30 arg_14          = dword ptr  18h
.text:00403C30
.text:00403C30                 push    ebp
.text:00403C31                 push    edi
.text:00403C32                 push    esi
.text:00403C33                 push    ebx
.text:00403C34                 sub     esp, 3Ch
.text:00403C37                 mov     edx, ds:__mb_cur_max
.text:00403C3D                 mov     [esp+4Ch+var_34], 0
.text:00403C45                 mov     [esp+4Ch+var_1C], 0
.text:00403C4D                 cmp     dword ptr [edx], 1
.text:00403C50                 mov     [esp+4Ch+var_20], 0
.text:00403C58                 mov     [esp+4Ch+var_21], 0
.text:00403C5D                 setz    [esp+4Ch+var_22]
.text:00403C62                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403C67                 ja      short def_403C6D ; jumptable 00403C6D default case, cases 0,1
.text:00403C69                 mov     edx, [esp+4Ch+arg_10]
.text:00403C6D                 jmp     ds:jpt_403C6D[edx*4] ; switch jump
.text:00403C6D ; ---------------------------------------------------------------------------
.text:00403C74 jpt_403C6D      dd offset def_403C6D    ; DATA XREF: sub_403C30+3D↑r
.text:00403C74                 dd offset def_403C6D    ; jump table for switch statement
.text:00403C74                 dd offset loc_4045B5
.text:00403C74                 dd offset loc_403C90
.text:00403C74                 dd offset loc_4045DB
.text:00403C74                 dd offset loc_4045E5
.text:00403C74                 dd offset loc_4045E5
.text:00403C90 ; ---------------------------------------------------------------------------
.text:00403C90
.text:00403C90 loc_403C90:                             ; CODE XREF: sub_403C30+3D↑j
.text:00403C90                                         ; DATA XREF: sub_403C30:jpt_403C6D↑o
.text:00403C90                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00403C6D case 3
.text:00403C94                 cmp     [esp+4Ch+var_34], eax
.text:00403C98                 jnb     short loc_403CA1
.text:00403C9A                 mov     ebx, [esp+4Ch+arg_0]
.text:00403C9E                 mov     byte ptr [ebx], 22h ; '"'
.text:00403CA1
.text:00403CA1 loc_403CA1:                             ; CODE XREF: sub_403C30+68↑j
.text:00403CA1                 mov     [esp+4Ch+var_34], 1
.text:00403CA9                 mov     [esp+4Ch+var_21], 1
.text:00403CAE                 mov     [esp+4Ch+var_1C], offset asc_403C1C ; "\"'`"
.text:00403CB6
.text:00403CB6 loc_403CB6:                             ; CODE XREF: sub_403C30+9A6↓j
.text:00403CB6                 mov     [esp+4Ch+var_20], 1
.text:00403CBE
.text:00403CBE def_403C6D:                             ; CODE XREF: sub_403C30+37↑j
.text:00403CBE                                         ; sub_403C30+3D↑j ...
.text:00403CBE                 xor     ebp, ebp        ; jumptable 00403C6D default case, cases 0,1
.text:00403CC0
.text:00403CC0 loc_403CC0:                             ; CODE XREF: sub_403C30+3DB↓j
.text:00403CC0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403CC5                 jz      loc_4045A7
.text:00403CCB                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403CCF
.text:00403CCF loc_403CCF:                             ; CODE XREF: sub_403C30+980↓j
.text:00403CCF                 jz      loc_40453E
.text:00403CD5                 cmp     [esp+4Ch+var_21], 0
.text:00403CDA                 jz      short loc_403D20
.text:00403CDC                 mov     esi, [esp+4Ch+var_20]
.text:00403CE0                 test    esi, esi
.text:00403CE2                 jz      short loc_403D20
.text:00403CE4                 mov     ecx, [esp+4Ch+var_20]
.text:00403CE8                 lea     edi, [ecx+ebp]
.text:00403CEB                 cmp     edi, [esp+4Ch+arg_C]
.text:00403CEF                 ja      short loc_403D20
.text:00403CF1                 cld
.text:00403CF2                 mov     ebx, [esp+4Ch+Str]
.text:00403CF6                 mov     edi, [esp+4Ch+var_1C]
.text:00403CFA                 add     ebx, ebp
.text:00403CFC                 mov     esi, ebx
.text:00403CFE                 cmp     ecx, ecx
.text:00403D00                 repe cmpsb
.text:00403D02                 jnz     short loc_403D20
.text:00403D04                 mov     edx, [esp+4Ch+arg_4]
.text:00403D08                 cmp     [esp+4Ch+var_34], edx
.text:00403D0C                 jnb     short loc_403D1A
.text:00403D0E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403D12                 mov     eax, [esp+4Ch+var_34]
.text:00403D16                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00403D1A
.text:00403D1A loc_403D1A:                             ; CODE XREF: sub_403C30+DC↑j
.text:00403D1A                 inc     [esp+4Ch+var_34]
.text:00403D1E                 mov     esi, esi
.text:00403D20
.text:00403D20 loc_403D20:                             ; CODE XREF: sub_403C30+AA↑j
.text:00403D20                                         ; sub_403C30+B2↑j ...
.text:00403D20                 mov     edi, [esp+4Ch+Str]
.text:00403D24                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00403D29                 movzx   eax, bl
.text:00403D2C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00403D2F                 ja      def_403D35      ; jumptable 00403D35 default case, cases 1-6,14-31,64
.text:00403D35                 jmp     ds:jpt_403D35[eax*4] ; switch jump
.text:00403D35 ; ---------------------------------------------------------------------------
.text:00403D3C jpt_403D35      dd offset loc_403F38, offset def_403D35, offset def_403D35
.text:00403D3C                                         ; DATA XREF: sub_403C30+105↑r
.text:00403D3C                 dd offset def_403D35, offset def_403D35, offset def_403D35 ; jump table for switch statement
.text:00403D3C                 dd offset def_403D35, offset loc_404010, offset loc_40402E
.text:00403D3C                 dd offset loc_404032, offset loc_404077, offset loc_40407B
.text:00403D3C                 dd offset loc_40407F, offset loc_404083, offset def_403D35
.text:00403D3C                 dd offset def_403D35, offset def_403D35, offset def_403D35
.text:00403D3C                 dd offset def_403D35, offset def_403D35, offset def_403D35
.text:00403D3C                 dd offset def_403D35, offset def_403D35, offset def_403D35
.text:00403D3C                 dd offset def_403D35, offset def_403D35, offset def_403D35
.text:00403D3C                 dd offset def_403D35, offset def_403D35, offset def_403D35
.text:00403D3C                 dd offset def_403D35, offset def_403D35, offset loc_404508
.text:00403D3C                 dd offset loc_404508, offset loc_404508, offset loc_40452A
.text:00403D3C                 dd offset loc_404508, offset def_404132, offset loc_404508
.text:00403D3C                 dd offset loc_404087, offset loc_404508, offset loc_404508
.text:00403D3C                 dd offset loc_404508, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset loc_404508
.text:00403D3C                 dd offset loc_404508, offset loc_404508, offset loc_404508
.text:00403D3C                 dd offset loc_4040EC, offset def_403D35, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset loc_404508, offset loc_404501
.text:00403D3C                 dd offset def_404132, offset loc_404508, offset def_404132
.text:00403D3C                 dd offset loc_404508, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset def_404132, offset def_404132, offset def_404132
.text:00403D3C                 dd offset loc_404518, offset loc_404508, offset loc_404518
.text:00403D3C                 dd offset loc_40452A
.text:00403F38 ; ---------------------------------------------------------------------------
.text:00403F38
.text:00403F38 loc_403F38:                             ; CODE XREF: sub_403C30+105↑j
.text:00403F38                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:00403F38                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403D35 case 0
.text:00403F3D                 lea     eax, [ebp+1]
.text:00403F40                 jz      loc_403FF0
.text:00403F46                 mov     esi, [esp+4Ch+arg_4]
.text:00403F4A                 cmp     [esp+4Ch+var_34], esi
.text:00403F4E                 jnb     short loc_403F5C
.text:00403F50                 mov     eax, [esp+4Ch+arg_0]
.text:00403F54                 mov     ebx, [esp+4Ch+var_34]
.text:00403F58                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00403F5C
.text:00403F5C loc_403F5C:                             ; CODE XREF: sub_403C30+31E↑j
.text:00403F5C                 inc     [esp+4Ch+var_34]
.text:00403F60                 mov     edx, [esp+4Ch+arg_4]
.text:00403F64                 cmp     [esp+4Ch+var_34], edx
.text:00403F68                 jnb     short loc_403F76
.text:00403F6A                 mov     edi, [esp+4Ch+arg_0]
.text:00403F6E                 mov     ecx, [esp+4Ch+var_34]
.text:00403F72                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403F76
.text:00403F76 loc_403F76:                             ; CODE XREF: sub_403C30+338↑j
.text:00403F76                 inc     [esp+4Ch+var_34]
.text:00403F7A                 mov     esi, [esp+4Ch+arg_4]
.text:00403F7E                 cmp     [esp+4Ch+var_34], esi
.text:00403F82                 jnb     short loc_403F90
.text:00403F84                 mov     ebx, [esp+4Ch+arg_0]
.text:00403F88                 mov     eax, [esp+4Ch+var_34]
.text:00403F8C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403F90
.text:00403F90 loc_403F90:                             ; CODE XREF: sub_403C30+352↑j
.text:00403F90                 inc     [esp+4Ch+var_34]
.text:00403F94                 mov     bl, 30h ; '0'
.text:00403F96                 lea     esi, [esi+0]
.text:00403F99                 lea     edi, [edi+0]
.text:00403FA0
.text:00403FA0 def_404132:                             ; CODE XREF: sub_403C30+105↑j
.text:00403FA0                                         ; sub_403C30+463↓j ...
.text:00403FA0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403D35 cases 37,43-58,65-90,93,95,97-122
.text:00403FA0                                         ; jumptable 00404132 default case, cases 34-38,42-44,46,48-59
.text:00403FA5                 lea     eax, [ebp+1]
.text:00403FA8                 jz      short loc_403FF0
.text:00403FAA                 mov     cl, bl
.text:00403FAC                 mov     edi, [esp+4Ch+arg_14]
.text:00403FB0                 mov     esi, 1
.text:00403FB5                 shr     cl, 5
.text:00403FB8                 movzx   edx, cl
.text:00403FBB                 mov     ecx, ebx
.text:00403FBD                 and     ecx, 1Fh
.text:00403FC0                 shl     esi, cl
.text:00403FC2                 test    [edi+edx*4+4], esi
.text:00403FC6                 jz      short loc_403FE2
.text:00403FC8
.text:00403FC8 loc_403FC8:                             ; CODE XREF: sub_403C30+3FC↓j
.text:00403FC8                 mov     edx, [esp+4Ch+arg_4]
.text:00403FCC                 cmp     [esp+4Ch+var_34], edx
.text:00403FD0                 jnb     short loc_403FDE
.text:00403FD2                 mov     edi, [esp+4Ch+arg_0]
.text:00403FD6                 mov     esi, [esp+4Ch+var_34]
.text:00403FDA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00403FDE
.text:00403FDE loc_403FDE:                             ; CODE XREF: sub_403C30+3A0↑j
.text:00403FDE                 inc     [esp+4Ch+var_34]
.text:00403FE2
.text:00403FE2 loc_403FE2:                             ; CODE XREF: sub_403C30+396↑j
.text:00403FE2                 lea     eax, [ebp+1]
.text:00403FE5                 lea     esi, [esi+0]
.text:00403FE9                 lea     edi, [edi+0]
.text:00403FF0
.text:00403FF0 loc_403FF0:                             ; CODE XREF: sub_403C30+310↑j
.text:00403FF0                                         ; sub_403C30+378↑j ...
.text:00403FF0                 mov     ebp, [esp+4Ch+arg_4]
.text:00403FF4                 cmp     [esp+4Ch+var_34], ebp
.text:00403FF8                 jnb     short loc_404005
.text:00403FFA                 mov     edx, [esp+4Ch+arg_0]
.text:00403FFE                 mov     ecx, [esp+4Ch+var_34]
.text:00404002                 mov     [ecx+edx], bl
.text:00404005
.text:00404005 loc_404005:                             ; CODE XREF: sub_403C30+3C8↑j
.text:00404005                 inc     [esp+4Ch+var_34]
.text:00404009                 mov     ebp, eax
.text:0040400B                 jmp     loc_403CC0
.text:00404010 ; ---------------------------------------------------------------------------
.text:00404010
.text:00404010 loc_404010:                             ; CODE XREF: sub_403C30+105↑j
.text:00404010                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:00404010                 mov     dl, 61h ; 'a'   ; jumptable 00403D35 case 7
.text:00404012                 lea     esi, [esi+0]
.text:00404019                 lea     edi, [edi+0]
.text:00404020
.text:00404020 loc_404020:                             ; CODE XREF: sub_403C30+400↓j
.text:00404020                                         ; sub_403C30+409↓j ...
.text:00404020                 cmp     [esp+4Ch+var_21], 0
.text:00404025                 lea     eax, [ebp+1]
.text:00404028                 jz      short loc_403FF0
.text:0040402A                 mov     bl, dl
.text:0040402C                 jmp     short loc_403FC8
.text:0040402E ; ---------------------------------------------------------------------------
.text:0040402E
.text:0040402E loc_40402E:                             ; CODE XREF: sub_403C30+105↑j
.text:0040402E                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:0040402E                 mov     dl, 62h ; 'b'   ; jumptable 00403D35 case 8
.text:00404030                 jmp     short loc_404020
.text:00404032 ; ---------------------------------------------------------------------------
.text:00404032
.text:00404032 loc_404032:                             ; CODE XREF: sub_403C30+105↑j
.text:00404032                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:00404032                 mov     dl, 74h ; 't'   ; jumptable 00403D35 case 9
.text:00404034
.text:00404034 loc_404034:                             ; CODE XREF: sub_403C30+449↓j
.text:00404034                                         ; sub_403C30+455↓j ...
.text:00404034                 cmp     [esp+4Ch+arg_10], 1
.text:00404039                 jnz     short loc_404020
.text:0040403B
.text:0040403B loc_40403B:                             ; CODE XREF: sub_403C30+45C↓j
.text:0040403B                                         ; sub_403C30+4C1↓j ...
.text:0040403B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404402 cases 91,92,94,96,124
.text:00404043                 mov     eax, [esp+4Ch+arg_14]
.text:00404047                 mov     edx, [esp+4Ch+arg_C]
.text:0040404B                 mov     ecx, [esp+4Ch+Str]
.text:0040404F                 mov     ebx, [esp+4Ch+arg_4]
.text:00404053                 mov     [esp+4Ch+var_38], eax ; int
.text:00404057                 mov     ebp, [esp+4Ch+arg_0]
.text:0040405B                 mov     [esp+4Ch+State], edx ; int
.text:0040405F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00404063                 mov     [esp+4Ch+Type], ebx ; int
.text:00404067                 mov     [esp+4Ch+C], ebp ; int
.text:0040406A                 call    sub_403C30
.text:0040406F
.text:0040406F loc_40406F:                             ; CODE XREF: sub_403C30+972↓j
.text:0040406F                 add     esp, 3Ch
.text:00404072                 pop     ebx
.text:00404073                 pop     esi
.text:00404074                 pop     edi
.text:00404075                 pop     ebp
.text:00404076                 retn
.text:00404077 ; ---------------------------------------------------------------------------
.text:00404077
.text:00404077 loc_404077:                             ; CODE XREF: sub_403C30+105↑j
.text:00404077                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:00404077                 mov     dl, 6Eh ; 'n'   ; jumptable 00403D35 case 10
.text:00404079                 jmp     short loc_404034
.text:0040407B ; ---------------------------------------------------------------------------
.text:0040407B
.text:0040407B loc_40407B:                             ; CODE XREF: sub_403C30+105↑j
.text:0040407B                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:0040407B                 mov     dl, 76h ; 'v'   ; jumptable 00403D35 case 11
.text:0040407D                 jmp     short loc_404020
.text:0040407F ; ---------------------------------------------------------------------------
.text:0040407F
.text:0040407F loc_40407F:                             ; CODE XREF: sub_403C30+105↑j
.text:0040407F                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:0040407F                 mov     dl, 66h ; 'f'   ; jumptable 00403D35 case 12
.text:00404081                 jmp     short loc_404020
.text:00404083 ; ---------------------------------------------------------------------------
.text:00404083
.text:00404083 loc_404083:                             ; CODE XREF: sub_403C30+105↑j
.text:00404083                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:00404083                 mov     dl, 72h ; 'r'   ; jumptable 00403D35 case 13
.text:00404085                 jmp     short loc_404034
.text:00404087 ; ---------------------------------------------------------------------------
.text:00404087
.text:00404087 loc_404087:                             ; CODE XREF: sub_403C30+105↑j
.text:00404087                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:00404087                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403D35 case 39
.text:0040408C                 jz      short loc_40403B ; jumptable 00404402 cases 91,92,94,96,124
.text:0040408E                 cmp     [esp+4Ch+arg_10], 2
.text:00404093                 jnz     def_404132      ; jumptable 00403D35 cases 37,43-58,65-90,93,95,97-122
.text:00404093                                         ; jumptable 00404132 default case, cases 34-38,42-44,46,48-59
.text:00404099                 mov     edx, [esp+4Ch+arg_4]
.text:0040409D                 cmp     [esp+4Ch+var_34], edx
.text:004040A1                 jnb     short loc_4040AF
.text:004040A3                 mov     ecx, [esp+4Ch+arg_0]
.text:004040A7                 mov     edi, [esp+4Ch+var_34]
.text:004040AB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004040AF
.text:004040AF loc_4040AF:                             ; CODE XREF: sub_403C30+471↑j
.text:004040AF                 inc     [esp+4Ch+var_34]
.text:004040B3                 mov     eax, [esp+4Ch+arg_4]
.text:004040B7                 cmp     [esp+4Ch+var_34], eax
.text:004040BB                 jnb     short loc_4040C9
.text:004040BD                 mov     esi, [esp+4Ch+arg_0]
.text:004040C1                 mov     edx, [esp+4Ch+var_34]
.text:004040C5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004040C9
.text:004040C9 loc_4040C9:                             ; CODE XREF: sub_403C30+48B↑j
.text:004040C9                 inc     [esp+4Ch+var_34]
.text:004040CD                 mov     edi, [esp+4Ch+arg_4]
.text:004040D1                 cmp     [esp+4Ch+var_34], edi
.text:004040D5                 jnb     short loc_4040E3
.text:004040D7                 mov     ecx, [esp+4Ch+arg_0]
.text:004040DB                 mov     eax, [esp+4Ch+var_34]
.text:004040DF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004040E3
.text:004040E3 loc_4040E3:                             ; CODE XREF: sub_403C30+4A5↑j
.text:004040E3                                         ; sub_403C30+5C4↓j ...
.text:004040E3                 inc     [esp+4Ch+var_34]
.text:004040E7                 jmp     def_404132      ; jumptable 00403D35 cases 37,43-58,65-90,93,95,97-122
.text:004040E7                                         ; jumptable 00404132 default case, cases 34-38,42-44,46,48-59
.text:004040EC ; ---------------------------------------------------------------------------
.text:004040EC
.text:004040EC loc_4040EC:                             ; CODE XREF: sub_403C30+105↑j
.text:004040EC                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:004040EC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403D35 case 63
.text:004040F1                 jz      loc_40403B      ; jumptable 00404402 cases 91,92,94,96,124
.text:004040F7                 cmp     [esp+4Ch+arg_10], 3
.text:004040FC                 jnz     def_404132      ; jumptable 00403D35 cases 37,43-58,65-90,93,95,97-122
.text:004040FC                                         ; jumptable 00404132 default case, cases 34-38,42-44,46,48-59
.text:00404102                 lea     edx, [ebp+2]
.text:00404105                 cmp     edx, [esp+4Ch+arg_C]
.text:00404109                 jnb     def_404132      ; jumptable 00403D35 cases 37,43-58,65-90,93,95,97-122
.text:00404109                                         ; jumptable 00404132 default case, cases 34-38,42-44,46,48-59
.text:0040410F                 mov     esi, [esp+4Ch+Str]
.text:00404113                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404118                 jnz     def_404132      ; jumptable 00403D35 cases 37,43-58,65-90,93,95,97-122
.text:00404118                                         ; jumptable 00404132 default case, cases 34-38,42-44,46,48-59
.text:0040411E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404123                 movsx   eax, cl
.text:00404126                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404129                 cmp     eax, 1Dh
.text:0040412C                 ja      def_404132      ; jumptable 00403D35 cases 37,43-58,65-90,93,95,97-122
.text:0040412C                                         ; jumptable 00404132 default case, cases 34-38,42-44,46,48-59
.text:00404132                 jmp     ds:jpt_404132[eax*4] ; switch jump
.text:00404132 ; ---------------------------------------------------------------------------
.text:00404139                 align 4
.text:0040413C jpt_404132      dd offset loc_4041B4    ; DATA XREF: sub_403C30+502↑r
.text:0040413C                 dd offset def_404132    ; jump table for switch statement
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset loc_4041B4
.text:0040413C                 dd offset loc_4041B4
.text:0040413C                 dd offset loc_4041B4
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset loc_4041B4
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset loc_4041B4
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset def_404132
.text:0040413C                 dd offset loc_4041B4
.text:0040413C                 dd offset loc_4041B4
.text:0040413C                 dd offset loc_4041B4
.text:004041B4 ; ---------------------------------------------------------------------------
.text:004041B4
.text:004041B4 loc_4041B4:                             ; CODE XREF: sub_403C30+502↑j
.text:004041B4                                         ; DATA XREF: sub_403C30:jpt_404132↑o
.text:004041B4                 mov     ebp, edx        ; jumptable 00404132 cases 33,39-41,45,47,60-62
.text:004041B6                 mov     bl, cl
.text:004041B8                 mov     edx, [esp+4Ch+arg_4]
.text:004041BC                 cmp     [esp+4Ch+var_34], edx
.text:004041C0                 jnb     short loc_4041CE
.text:004041C2                 mov     ecx, [esp+4Ch+arg_0]
.text:004041C6                 mov     edi, [esp+4Ch+var_34]
.text:004041CA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004041CE
.text:004041CE loc_4041CE:                             ; CODE XREF: sub_403C30+590↑j
.text:004041CE                 inc     [esp+4Ch+var_34]
.text:004041D2                 mov     eax, [esp+4Ch+arg_4]
.text:004041D6                 cmp     [esp+4Ch+var_34], eax
.text:004041DA                 jnb     short loc_4041E8
.text:004041DC                 mov     edx, [esp+4Ch+arg_0]
.text:004041E0                 mov     esi, [esp+4Ch+var_34]
.text:004041E4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004041E8
.text:004041E8 loc_4041E8:                             ; CODE XREF: sub_403C30+5AA↑j
.text:004041E8                 inc     [esp+4Ch+var_34]
.text:004041EC                 mov     edi, [esp+4Ch+arg_4]
.text:004041F0                 cmp     [esp+4Ch+var_34], edi
.text:004041F4                 jnb     loc_4040E3
.text:004041FA                 mov     eax, [esp+4Ch+arg_0]
.text:004041FE                 mov     ecx, [esp+4Ch+var_34]
.text:00404202                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404206                 jmp     loc_4040E3
.text:00404206 ; ---------------------------------------------------------------------------
.text:0040420B                 align 10h
.text:00404210
.text:00404210 def_403D35:                             ; CODE XREF: sub_403C30+FF↑j
.text:00404210                                         ; sub_403C30+105↑j
.text:00404210                                         ; DATA XREF: ...
.text:00404210                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403D35 default case, cases 1-6,14-31,64
.text:00404215                 jz      loc_404340
.text:0040421B                 mov     [esp+4Ch+var_28], 1
.text:00404223                 mov     esi, ds:__mb_cur_max
.text:00404229                 movzx   edx, bl
.text:0040422C                 cmp     dword ptr [esi], 1
.text:0040422F                 jz      loc_404324
.text:00404235                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040423D                 mov     [esp+4Ch+C], edx ; C
.text:00404240                 call    _isctype
.text:00404245
.text:00404245 loc_404245:                             ; CODE XREF: sub_403C30+705↓j
.text:00404245                 test    eax, eax
.text:00404247                 setnz   [esp+4Ch+var_29]
.text:0040424C
.text:0040424C loc_40424C:                             ; CODE XREF: sub_403C30+7A5↓j
.text:0040424C                 cmp     [esp+4Ch+var_21], 0
.text:00404251                 lea     eax, [ebp+1]
.text:00404254                 jz      loc_403FF0
.text:0040425A                 cmp     [esp+4Ch+var_29], 0
.text:0040425F                 jnz     def_404132      ; jumptable 00403D35 cases 37,43-58,65-90,93,95,97-122
.text:0040425F                                         ; jumptable 00404132 default case, cases 34-38,42-44,46,48-59
.text:00404265
.text:00404265 loc_404265:                             ; CODE XREF: sub_403C30+7AB↓j
.text:00404265                 mov     eax, [esp+4Ch+var_28]
.text:00404269                 lea     edx, [eax+ebp]
.text:0040426C                 lea     esi, [esi+0]
.text:00404270
.text:00404270 loc_404270:                             ; CODE XREF: sub_403C30+6EF↓j
.text:00404270                 cmp     [esp+4Ch+var_21], 0
.text:00404275                 jz      short loc_4042F0
.text:00404277                 cmp     [esp+4Ch+var_29], 0
.text:0040427C                 jnz     short loc_4042F0
.text:0040427E                 mov     edi, [esp+4Ch+arg_4]
.text:00404282                 cmp     [esp+4Ch+var_34], edi
.text:00404286                 jnb     short loc_404294
.text:00404288                 mov     esi, [esp+4Ch+arg_0]
.text:0040428C                 mov     eax, [esp+4Ch+var_34]
.text:00404290                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404294
.text:00404294 loc_404294:                             ; CODE XREF: sub_403C30+656↑j
.text:00404294                 inc     [esp+4Ch+var_34]
.text:00404298                 mov     ecx, [esp+4Ch+arg_4]
.text:0040429C                 cmp     [esp+4Ch+var_34], ecx
.text:004042A0                 jnb     short loc_4042B5
.text:004042A2                 mov     cl, bl
.text:004042A4                 mov     esi, [esp+4Ch+arg_0]
.text:004042A8                 mov     edi, [esp+4Ch+var_34]
.text:004042AC                 shr     cl, 6
.text:004042AF                 add     cl, 30h ; '0'
.text:004042B2                 mov     [edi+esi], cl
.text:004042B5
.text:004042B5 loc_4042B5:                             ; CODE XREF: sub_403C30+670↑j
.text:004042B5                 inc     [esp+4Ch+var_34]
.text:004042B9                 mov     edi, [esp+4Ch+arg_4]
.text:004042BD                 cmp     [esp+4Ch+var_34], edi
.text:004042C1                 jnb     short loc_4042D9
.text:004042C3                 mov     cl, bl
.text:004042C5                 mov     esi, [esp+4Ch+arg_0]
.text:004042C9                 shr     cl, 3
.text:004042CC                 mov     edi, [esp+4Ch+var_34]
.text:004042D0                 and     cl, 7
.text:004042D3                 add     cl, 30h ; '0'
.text:004042D6                 mov     [edi+esi], cl
.text:004042D9
.text:004042D9 loc_4042D9:                             ; CODE XREF: sub_403C30+691↑j
.text:004042D9                 inc     [esp+4Ch+var_34]
.text:004042DD                 and     bl, 7
.text:004042E0                 add     bl, 30h ; '0'
.text:004042E3                 lea     esi, [esi+0]
.text:004042E9                 lea     edi, [edi+0]
.text:004042F0
.text:004042F0 loc_4042F0:                             ; CODE XREF: sub_403C30+645↑j
.text:004042F0                                         ; sub_403C30+64C↑j
.text:004042F0                 lea     eax, [ebp+1]
.text:004042F3                 cmp     edx, eax
.text:004042F5                 jbe     loc_403FF0
.text:004042FB                 mov     ebp, [esp+4Ch+arg_4]
.text:004042FF                 cmp     [esp+4Ch+var_34], ebp
.text:00404303                 jnb     short loc_404310
.text:00404305                 mov     ecx, [esp+4Ch+arg_0]
.text:00404309                 mov     edi, [esp+4Ch+var_34]
.text:0040430D                 mov     [edi+ecx], bl
.text:00404310
.text:00404310 loc_404310:                             ; CODE XREF: sub_403C30+6D3↑j
.text:00404310                 inc     [esp+4Ch+var_34]
.text:00404314                 mov     ebp, eax
.text:00404316                 mov     eax, [esp+4Ch+Str]
.text:0040431A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040431F                 jmp     loc_404270
.text:00404324 ; ---------------------------------------------------------------------------
.text:00404324
.text:00404324 loc_404324:                             ; CODE XREF: sub_403C30+5FF↑j
.text:00404324                 mov     ecx, ds:_pctype
.text:0040432A                 mov     edi, [ecx]
.text:0040432C                 movzx   eax, word ptr [edi+edx*2]
.text:00404330                 and     eax, 157h
.text:00404335                 jmp     loc_404245
.text:00404335 ; ---------------------------------------------------------------------------
.text:0040433A                 align 10h
.text:00404340
.text:00404340 loc_404340:                             ; CODE XREF: sub_403C30+5E5↑j
.text:00404340                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404345                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040434D                 mov     [esp+4Ch+var_28], 0
.text:00404355                 mov     [esp+4Ch+var_29], 1
.text:0040435A                 jz      loc_4044EC
.text:00404360
.text:00404360 loc_404360:                             ; CODE XREF: sub_403C30+8CC↓j
.text:00404360                 mov     ecx, [esp+4Ch+arg_C]
.text:00404364                 lea     edx, [esp+4Ch+var_18]
.text:00404368                 mov     edi, [esp+4Ch+Str]
.text:0040436C                 mov     [esp+4Ch+State], edx ; State
.text:00404370                 lea     esi, [esp+4Ch+var_18._State]
.text:00404374                 sub     ecx, ebp
.text:00404376                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040437A                 add     edi, ebp
.text:0040437C                 mov     [esp+4Ch+var_30], edi
.text:00404380                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404384                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404387                 call    mbrtowc
.text:0040438C                 test    eax, eax
.text:0040438E                 mov     edi, eax
.text:00404390                 jz      short loc_4043D0
.text:00404392                 cmp     eax, 0FFFFFFFFh
.text:00404395                 jz      loc_4044E2
.text:0040439B                 cmp     eax, 0FFFFFFFEh
.text:0040439E                 jz      loc_4044A2
.text:004043A4                 cmp     [esp+4Ch+arg_10], 1
.text:004043A9                 jz      short loc_4043E0
.text:004043AB
.text:004043AB loc_4043AB:                             ; CODE XREF: sub_403C30+7B9↓j
.text:004043AB                                         ; sub_403C30+86D↓j
.text:004043AB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004043B0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004043B8                 mov     [esp+4Ch+C], ecx ; C
.text:004043BB                 call    iswctype
.text:004043C0                 test    eax, eax
.text:004043C2                 jnz     short loc_4043C9
.text:004043C4                 mov     [esp+4Ch+var_29], 0
.text:004043C9
.text:004043C9 loc_4043C9:                             ; CODE XREF: sub_403C30+792↑j
.text:004043C9                 mov     [esp+4Ch+var_28], edi
.text:004043CD                 lea     esi, [esi+0]
.text:004043D0
.text:004043D0 loc_4043D0:                             ; CODE XREF: sub_403C30+760↑j
.text:004043D0                                         ; sub_403C30+87B↓j ...
.text:004043D0                 cmp     [esp+4Ch+var_28], 1
.text:004043D5                 jbe     loc_40424C
.text:004043DB                 jmp     loc_404265
.text:004043E0 ; ---------------------------------------------------------------------------
.text:004043E0
.text:004043E0 loc_4043E0:                             ; CODE XREF: sub_403C30+779↑j
.text:004043E0                 cmp     [esp+4Ch+arg_10], eax
.text:004043E4                 mov     edx, 1
.text:004043E9                 jnb     short loc_4043AB
.text:004043EB
.text:004043EB loc_4043EB:                             ; CODE XREF: sub_403C30+867↓j
.text:004043EB                 mov     ecx, [esp+4Ch+Str]
.text:004043EF                 lea     esi, [edx+ebp]
.text:004043F2                 movsx   eax, byte ptr [esi+ecx]
.text:004043F6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004043F9                 cmp     eax, 21h
.text:004043FC                 ja      def_404402      ; jumptable 00404402 default case, cases 93,95,97-123
.text:00404402                 jmp     ds:jpt_404402[eax*4] ; switch jump
.text:00404402 ; ---------------------------------------------------------------------------
.text:00404409                 align 4
.text:0040440C jpt_404402      dd offset loc_40403B    ; DATA XREF: sub_403C30+7D2↑r
.text:0040440C                 dd offset loc_40403B    ; jump table for switch statement
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset loc_40403B
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset loc_40403B
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset def_404402
.text:0040440C                 dd offset loc_40403B
.text:00404494 ; ---------------------------------------------------------------------------
.text:00404494
.text:00404494 def_404402:                             ; CODE XREF: sub_403C30+7CC↑j
.text:00404494                                         ; sub_403C30+7D2↑j
.text:00404494                                         ; DATA XREF: ...
.text:00404494                 inc     edx             ; jumptable 00404402 default case, cases 93,95,97-123
.text:00404495                 cmp     edx, edi
.text:00404497                 jb      loc_4043EB
.text:0040449D                 jmp     loc_4043AB
.text:004044A2 ; ---------------------------------------------------------------------------
.text:004044A2
.text:004044A2 loc_4044A2:                             ; CODE XREF: sub_403C30+76E↑j
.text:004044A2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004044A6                 mov     [esp+4Ch+var_29], 0
.text:004044AB                 jnb     loc_4043D0
.text:004044B1                 mov     eax, [esp+4Ch+var_30]
.text:004044B5                 cmp     byte ptr [eax], 0
.text:004044B8                 jz      loc_4043D0
.text:004044BE
.text:004044BE loc_4044BE:                             ; CODE XREF: sub_403C30+8AB↓j
.text:004044BE                 inc     [esp+4Ch+var_28]
.text:004044C2                 mov     esi, [esp+4Ch+var_28]
.text:004044C6                 lea     eax, [esi+ebp]
.text:004044C9                 cmp     eax, [esp+4Ch+arg_C]
.text:004044CD                 jnb     loc_4043D0
.text:004044D3                 mov     edi, [esp+4Ch+Str]
.text:004044D7                 cmp     byte ptr [eax+edi], 0
.text:004044DB                 jnz     short loc_4044BE
.text:004044DD                 jmp     loc_4043D0
.text:004044E2 ; ---------------------------------------------------------------------------
.text:004044E2
.text:004044E2 loc_4044E2:                             ; CODE XREF: sub_403C30+765↑j
.text:004044E2                 mov     [esp+4Ch+var_29], 0
.text:004044E7                 jmp     loc_4043D0
.text:004044EC ; ---------------------------------------------------------------------------
.text:004044EC
.text:004044EC loc_4044EC:                             ; CODE XREF: sub_403C30+72A↑j
.text:004044EC                 mov     edx, [esp+4Ch+Str]
.text:004044F0                 mov     [esp+4Ch+C], edx ; Str
.text:004044F3                 call    strlen
.text:004044F8                 mov     [esp+4Ch+arg_C], eax
.text:004044FC                 jmp     loc_404360
.text:00404501 ; ---------------------------------------------------------------------------
.text:00404501
.text:00404501 loc_404501:                             ; CODE XREF: sub_403C30+105↑j
.text:00404501                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:00404501                 mov     dl, bl          ; jumptable 00403D35 case 92
.text:00404503                 jmp     loc_404034
.text:00404508 ; ---------------------------------------------------------------------------
.text:00404508
.text:00404508 loc_404508:                             ; CODE XREF: sub_403C30+105↑j
.text:00404508                                         ; sub_403C30+902↓j
.text:00404508                                         ; DATA XREF: ...
.text:00404508                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403D35 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040450D                 jnz     def_404132      ; jumptable 00403D35 cases 37,43-58,65-90,93,95,97-122
.text:0040450D                                         ; jumptable 00404132 default case, cases 34-38,42-44,46,48-59
.text:00404513                 jmp     loc_40403B      ; jumptable 00404402 cases 91,92,94,96,124
.text:00404518 ; ---------------------------------------------------------------------------
.text:00404518
.text:00404518 loc_404518:                             ; CODE XREF: sub_403C30+105↑j
.text:00404518                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:00404518                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403D35 cases 123,125
.text:0040451D                 jz      short loc_404534
.text:0040451F                 cmp     [esp+4Ch+arg_C], 1
.text:00404524
.text:00404524 loc_404524:                             ; CODE XREF: sub_403C30+90C↓j
.text:00404524                 jnz     def_404132      ; jumptable 00403D35 cases 37,43-58,65-90,93,95,97-122
.text:00404524                                         ; jumptable 00404132 default case, cases 34-38,42-44,46,48-59
.text:0040452A
.text:0040452A loc_40452A:                             ; CODE XREF: sub_403C30+105↑j
.text:0040452A                                         ; DATA XREF: sub_403C30:jpt_403D35↑o
.text:0040452A                 test    ebp, ebp        ; jumptable 00403D35 cases 35,126
.text:0040452C                 jnz     def_404132      ; jumptable 00403D35 cases 37,43-58,65-90,93,95,97-122
.text:0040452C                                         ; jumptable 00404132 default case, cases 34-38,42-44,46,48-59
.text:00404532                 jmp     short loc_404508 ; jumptable 00403D35 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404534 ; ---------------------------------------------------------------------------
.text:00404534
.text:00404534 loc_404534:                             ; CODE XREF: sub_403C30+8ED↑j
.text:00404534                 mov     esi, [esp+4Ch+Str]
.text:00404538                 cmp     byte ptr [esi+1], 0
.text:0040453C                 jmp     short loc_404524
.text:0040453E ; ---------------------------------------------------------------------------
.text:0040453E
.text:0040453E loc_40453E:                             ; CODE XREF: sub_403C30:loc_403CCF↑j
.text:0040453E                 test    ebp, ebp
.text:00404540                 jnz     short loc_40454D
.text:00404542                 cmp     [esp+4Ch+arg_10], 1
.text:00404547                 jz      loc_40403B      ; jumptable 00404402 cases 91,92,94,96,124
.text:0040454D
.text:0040454D loc_40454D:                             ; CODE XREF: sub_403C30+910↑j
.text:0040454D                 mov     esi, [esp+4Ch+var_1C]
.text:00404551                 test    esi, esi
.text:00404553                 jz      short loc_404588
.text:00404555                 mov     edi, [esp+4Ch+var_1C]
.text:00404559                 movzx   eax, byte ptr [edi]
.text:0040455C                 test    al, al
.text:0040455E                 jz      short loc_404588
.text:00404560
.text:00404560 loc_404560:                             ; CODE XREF: sub_403C30+956↓j
.text:00404560                 mov     ebp, [esp+4Ch+arg_4]
.text:00404564                 cmp     [esp+4Ch+var_34], ebp
.text:00404568                 jnb     short loc_404575
.text:0040456A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040456E                 mov     ebx, [esp+4Ch+var_34]
.text:00404572                 mov     [ebx+ecx], al
.text:00404575
.text:00404575 loc_404575:                             ; CODE XREF: sub_403C30+938↑j
.text:00404575                 inc     [esp+4Ch+var_1C]
.text:00404579                 inc     [esp+4Ch+var_34]
.text:0040457D                 mov     edx, [esp+4Ch+var_1C]
.text:00404581                 movzx   eax, byte ptr [edx]
.text:00404584                 test    al, al
.text:00404586                 jnz     short loc_404560
.text:00404588
.text:00404588 loc_404588:                             ; CODE XREF: sub_403C30+923↑j
.text:00404588                                         ; sub_403C30+92E↑j
.text:00404588                 mov     eax, [esp+4Ch+arg_4]
.text:0040458C                 cmp     [esp+4Ch+var_34], eax
.text:00404590                 jnb     short loc_40459E
.text:00404592                 mov     edi, [esp+4Ch+arg_0]
.text:00404596                 mov     esi, [esp+4Ch+var_34]
.text:0040459A                 mov     byte ptr [esi+edi], 0
.text:0040459E
.text:0040459E loc_40459E:                             ; CODE XREF: sub_403C30+960↑j
.text:0040459E                 mov     eax, [esp+4Ch+var_34]
.text:004045A2                 jmp     loc_40406F
.text:004045A7 ; ---------------------------------------------------------------------------
.text:004045A7
.text:004045A7 loc_4045A7:                             ; CODE XREF: sub_403C30+95↑j
.text:004045A7                 mov     ebx, [esp+4Ch+Str]
.text:004045AB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004045B0                 jmp     loc_403CCF
.text:004045B5 ; ---------------------------------------------------------------------------
.text:004045B5
.text:004045B5 loc_4045B5:                             ; CODE XREF: sub_403C30+3D↑j
.text:004045B5                                         ; DATA XREF: sub_403C30:jpt_403C6D↑o
.text:004045B5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00403C6D case 2
.text:004045B9                 cmp     [esp+4Ch+var_34], edx
.text:004045BD                 jnb     short loc_4045C6
.text:004045BF                 mov     ecx, [esp+4Ch+arg_0]
.text:004045C3                 mov     byte ptr [ecx], 27h ; '''
.text:004045C6
.text:004045C6 loc_4045C6:                             ; CODE XREF: sub_403C30+98D↑j
.text:004045C6                 mov     [esp+4Ch+var_34], 1
.text:004045CE                 mov     [esp+4Ch+var_1C], 403C1Eh
.text:004045D6                 jmp     loc_403CB6
.text:004045DB ; ---------------------------------------------------------------------------
.text:004045DB
.text:004045DB loc_4045DB:                             ; CODE XREF: sub_403C30+3D↑j
.text:004045DB                                         ; DATA XREF: sub_403C30:jpt_403C6D↑o
.text:004045DB                 mov     [esp+4Ch+var_21], 1 ; jumptable 00403C6D case 4
.text:004045E0                 jmp     def_403C6D      ; jumptable 00403C6D default case, cases 0,1
.text:004045E5 ; ---------------------------------------------------------------------------
.text:004045E5
.text:004045E5 loc_4045E5:                             ; CODE XREF: sub_403C30+3D↑j
.text:004045E5                                         ; DATA XREF: sub_403C30:jpt_403C6D↑o
.text:004045E5                 mov     [esp+4Ch+C], 403C20h ; jumptable 00403C6D cases 5,6
.text:004045EC                 call    ds:libintl_gettext
.text:004045F2                 cmp     eax, 403C20h
.text:004045F7                 mov     edi, eax
.text:004045F9                 jz      short loc_404670
.text:004045FB
.text:004045FB loc_4045FB:                             ; CODE XREF: sub_403C30+A45↓j
.text:004045FB                                         ; sub_403C30+A4C↓j
.text:004045FB                 mov     [esp+4Ch+C], 403C1Eh
.text:00404602                 call    ds:libintl_gettext
.text:00404608                 cmp     eax, 403C1Eh
.text:0040460D                 mov     edx, eax
.text:0040460F                 jz      short loc_404662
.text:00404611
.text:00404611 loc_404611:                             ; CODE XREF: sub_403C30+A37↓j
.text:00404611                                         ; sub_403C30+A3E↓j
.text:00404611                 mov     [esp+4Ch+var_1C], edi
.text:00404615                 cmp     byte ptr [edi], 0
.text:00404618                 jz      short loc_404648
.text:0040461A
.text:0040461A loc_40461A:                             ; CODE XREF: sub_403C30+A16↓j
.text:0040461A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040461E                 cmp     [esp+4Ch+var_34], ecx
.text:00404622                 jnb     short loc_404637
.text:00404624                 mov     ebp, [esp+4Ch+var_1C]
.text:00404628                 mov     edi, [esp+4Ch+arg_0]
.text:0040462C                 mov     esi, [esp+4Ch+var_34]
.text:00404630                 movzx   ebx, byte ptr [ebp+0]
.text:00404634                 mov     [esi+edi], bl
.text:00404637
.text:00404637 loc_404637:                             ; CODE XREF: sub_403C30+9F2↑j
.text:00404637                 inc     [esp+4Ch+var_1C]
.text:0040463B                 inc     [esp+4Ch+var_34]
.text:0040463F                 mov     eax, [esp+4Ch+var_1C]
.text:00404643                 cmp     byte ptr [eax], 0
.text:00404646                 jnz     short loc_40461A
.text:00404648
.text:00404648 loc_404648:                             ; CODE XREF: sub_403C30+9E8↑j
.text:00404648                 mov     [esp+4Ch+var_21], 1
.text:0040464D                 mov     [esp+4Ch+var_1C], edx
.text:00404651                 mov     [esp+4Ch+C], edx ; Str
.text:00404654                 call    strlen
.text:00404659                 mov     [esp+4Ch+var_20], eax
.text:0040465D                 jmp     def_403C6D      ; jumptable 00403C6D default case, cases 0,1
.text:00404662 ; ---------------------------------------------------------------------------
.text:00404662
.text:00404662 loc_404662:                             ; CODE XREF: sub_403C30+9DF↑j
.text:00404662                 cmp     [esp+4Ch+arg_10], 6
.text:00404667                 jnz     short loc_404611
.text:00404669                 mov     edx, offset asc_403C1C ; "\"'`"
.text:0040466E                 jmp     short loc_404611
.text:00404670 ; ---------------------------------------------------------------------------
.text:00404670
.text:00404670 loc_404670:                             ; CODE XREF: sub_403C30+9C9↑j
.text:00404670                 cmp     [esp+4Ch+arg_10], 6
.text:00404675                 jnz     short loc_4045FB
.text:00404677                 mov     edi, offset asc_403C1C ; "\"'`"
.text:0040467C                 jmp     loc_4045FB
.text:0040467C sub_403C30      endp
.text:0040467C
.text:00404681 ; ---------------------------------------------------------------------------
.text:00404681                 jmp     short loc_404690
.text:00404681 ; ---------------------------------------------------------------------------
.text:00404683                 align 10h
.text:00404690
.text:00404690 loc_404690:                             ; CODE XREF: .text:00404681↑j
.text:00404690                 sub     esp, 0Ch
.text:00404693                 mov     [esp+4], ebx
.text:00404697                 mov     [esp+8], esi
.text:0040469B                 call    _errno
.text:004046A0                 mov     esi, [eax]
.text:004046A2                 mov     dword ptr [esp], 24h ; '$'
.text:004046A9                 call    sub_40BCC0
.text:004046AE                 mov     edx, [esp+10h]
.text:004046B2                 mov     ebx, eax
.text:004046B4                 test    edx, edx
.text:004046B6                 jz      short loc_404701
.text:004046B8
.text:004046B8 loc_4046B8:                             ; CODE XREF: .text:00404706↓j
.text:004046B8                 mov     ecx, [edx]
.text:004046BA                 mov     [ebx], ecx
.text:004046BC                 mov     ecx, [edx+4]
.text:004046BF                 mov     [ebx+4], ecx
.text:004046C2                 mov     ecx, [edx+8]
.text:004046C5                 mov     [ebx+8], ecx
.text:004046C8                 mov     ecx, [edx+0Ch]
.text:004046CB                 mov     [ebx+0Ch], ecx
.text:004046CE                 mov     ecx, [edx+10h]
.text:004046D1                 mov     [ebx+10h], ecx
.text:004046D4                 mov     ecx, [edx+14h]
.text:004046D7                 mov     [ebx+14h], ecx
.text:004046DA                 mov     ecx, [edx+18h]
.text:004046DD                 mov     [ebx+18h], ecx
.text:004046E0                 mov     ecx, [edx+1Ch]
.text:004046E3                 mov     [ebx+1Ch], ecx
.text:004046E6                 mov     ecx, [edx+20h]
.text:004046E9                 mov     [ebx+20h], ecx
.text:004046EC                 call    _errno
.text:004046F1                 mov     [eax], esi
.text:004046F3                 mov     esi, [esp+8]
.text:004046F7                 mov     eax, ebx
.text:004046F9                 mov     ebx, [esp+4]
.text:004046FD                 add     esp, 0Ch
.text:00404700                 retn
.text:00404701 ; ---------------------------------------------------------------------------
.text:00404701
.text:00404701 loc_404701:                             ; CODE XREF: .text:004046B6↑j
.text:00404701                 mov     edx, offset dword_410110
.text:00404706                 jmp     short loc_4046B8
.text:00404706 ; ---------------------------------------------------------------------------
.text:00404708                 align 10h
.text:00404710                 mov     eax, [esp+4]
.text:00404714                 test    eax, eax
.text:00404716                 jz      short loc_404720
.text:00404718
.text:00404718 loc_404718:                             ; CODE XREF: .text:00404725↓j
.text:00404718                 mov     eax, [eax]
.text:0040471A                 retn
.text:0040471A ; ---------------------------------------------------------------------------
.text:0040471B                 align 10h
.text:00404720
.text:00404720 loc_404720:                             ; CODE XREF: .text:00404716↑j
.text:00404720                 mov     eax, offset dword_410110
.text:00404725                 jmp     short loc_404718
.text:00404725 ; ---------------------------------------------------------------------------
.text:00404727                 align 10h
.text:00404730                 mov     edx, [esp+4]
.text:00404734                 test    edx, edx
.text:00404736                 jz      short loc_404740
.text:00404738
.text:00404738 loc_404738:                             ; CODE XREF: .text:00404745↓j
.text:00404738                 mov     ecx, [esp+8]
.text:0040473C                 mov     [edx], ecx
.text:0040473E                 retn
.text:0040473E ; ---------------------------------------------------------------------------
.text:0040473F                 align 10h
.text:00404740
.text:00404740 loc_404740:                             ; CODE XREF: .text:00404736↑j
.text:00404740                 mov     edx, offset dword_410110
.text:00404745                 jmp     short loc_404738
.text:00404745 ; ---------------------------------------------------------------------------
.text:00404747                 align 10h
.text:00404750                 sub     esp, 8
.text:00404753                 mov     eax, [esp+0Ch]
.text:00404757                 movzx   ecx, byte ptr [esp+10h]
.text:0040475C                 mov     [esp], ebx
.text:0040475F                 mov     ebx, [esp+14h]
.text:00404763                 mov     [esp+4], esi
.text:00404767                 mov     dl, cl
.text:00404769                 shr     dl, 5
.text:0040476C                 movzx   edx, dl
.text:0040476F                 shl     edx, 2
.text:00404772                 test    eax, eax
.text:00404774                 lea     esi, [edx+eax+4]
.text:00404778                 jz      short loc_4047A0
.text:0040477A
.text:0040477A loc_40477A:                             ; CODE XREF: .text:004047A6↓j
.text:0040477A                 mov     edx, [esi]
.text:0040477C                 and     ecx, 1Fh
.text:0040477F                 and     ebx, 1
.text:00404782                 mov     eax, edx
.text:00404784                 shr     eax, cl
.text:00404786                 and     eax, 1
.text:00404789                 xor     ebx, eax
.text:0040478B                 shl     ebx, cl
.text:0040478D                 xor     edx, ebx
.text:0040478F                 mov     [esi], edx
.text:00404791                 mov     ebx, [esp]
.text:00404794                 mov     esi, [esp+4]
.text:00404798                 add     esp, 8
.text:0040479B                 retn
.text:0040479B ; ---------------------------------------------------------------------------
.text:0040479C                 align 10h
.text:004047A0
.text:004047A0 loc_4047A0:                             ; CODE XREF: .text:00404778↑j
.text:004047A0                 lea     esi, dword_410114[edx]
.text:004047A6                 jmp     short loc_40477A
.text:004047A6 ; ---------------------------------------------------------------------------
.text:004047A8                 align 10h
.text:004047B0                 sub     esp, 2Ch
.text:004047B3                 mov     [esp+24h], ebx
.text:004047B7                 mov     ebx, [esp+40h]
.text:004047BB                 mov     [esp+28h], esi
.text:004047BF                 test    ebx, ebx
.text:004047C1                 jz      short loc_404810
.text:004047C3
.text:004047C3 loc_4047C3:                             ; CODE XREF: .text:00404815↓j
.text:004047C3                 call    _errno
.text:004047C8                 mov     esi, [eax]
.text:004047CA                 mov     [esp+14h], ebx
.text:004047CE                 mov     edx, [ebx]
.text:004047D0                 mov     ecx, [esp+38h]
.text:004047D4                 mov     ebx, [esp+3Ch]
.text:004047D8                 mov     [esp+10h], edx
.text:004047DC                 mov     edx, [esp+34h]
.text:004047E0                 mov     [esp+0Ch], ebx
.text:004047E4                 mov     [esp+8], ecx
.text:004047E8                 mov     [esp+4], edx
.text:004047EC                 mov     edx, [esp+30h]
.text:004047F0                 mov     [esp], edx
.text:004047F3                 call    sub_403C30
.text:004047F8                 mov     ebx, eax
.text:004047FA                 call    _errno
.text:004047FF                 mov     [eax], esi
.text:00404801                 mov     esi, [esp+28h]
.text:00404805                 mov     eax, ebx
.text:00404807                 mov     ebx, [esp+24h]
.text:0040480B                 add     esp, 2Ch
.text:0040480E                 retn
.text:0040480E ; ---------------------------------------------------------------------------
.text:0040480F                 align 10h
.text:00404810
.text:00404810 loc_404810:                             ; CODE XREF: .text:004047C1↑j
.text:00404810                 mov     ebx, offset dword_410110
.text:00404815                 jmp     short loc_4047C3
.text:00404815 ; ---------------------------------------------------------------------------
.text:00404817                 align 10h
.text:00404820                 push    ebp
.text:00404821                 push    edi
.text:00404822                 push    esi
.text:00404823                 push    ebx
.text:00404824                 sub     esp, 2Ch
.text:00404827                 mov     ebp, [esp+48h]
.text:0040482B                 call    _errno
.text:00404830                 mov     edx, [eax]
.text:00404832                 test    ebp, ebp
.text:00404834                 mov     ebx, ebp
.text:00404836                 mov     [esp+28h], edx
.text:0040483A                 jz      loc_4048F0
.text:00404840
.text:00404840 loc_404840:                             ; CODE XREF: .text:004048F5↓j
.text:00404840                 call    _errno
.text:00404845                 mov     edi, [eax]
.text:00404847                 mov     esi, ebp
.text:00404849                 mov     [esp+14h], ebx
.text:0040484D                 mov     ecx, [ebx]
.text:0040484F                 mov     dword ptr [esp], 0
.text:00404856                 mov     edx, [esp+44h]
.text:0040485A                 mov     dword ptr [esp+4], 0
.text:00404862                 mov     eax, [esp+40h]
.text:00404866                 mov     [esp+10h], ecx
.text:0040486A                 mov     [esp+0Ch], edx
.text:0040486E                 mov     [esp+8], eax
.text:00404872                 call    sub_403C30
.text:00404877                 mov     ebx, eax
.text:00404879                 call    _errno
.text:0040487E                 mov     [eax], edi
.text:00404880                 lea     edi, [ebx+1]
.text:00404883                 mov     [esp], edi
.text:00404886                 call    sub_40BCC0
.text:0040488B                 mov     [esp+24h], eax
.text:0040488F                 test    ebp, ebp
.text:00404891                 jz      short loc_4048E2
.text:00404893
.text:00404893 loc_404893:                             ; CODE XREF: .text:004048E7↓j
.text:00404893                 call    _errno
.text:00404898                 mov     ebp, [eax]
.text:0040489A                 mov     [esp+14h], esi
.text:0040489E                 mov     ecx, [esi]
.text:004048A0                 mov     [esp+4], edi
.text:004048A4                 mov     edx, [esp+44h]
.text:004048A8                 mov     esi, [esp+24h]
.text:004048AC                 mov     [esp+10h], ecx
.text:004048B0                 mov     eax, [esp+40h]
.text:004048B4                 mov     [esp+0Ch], edx
.text:004048B8                 mov     [esp], esi
.text:004048BB                 mov     [esp+8], eax
.text:004048BF                 call    sub_403C30
.text:004048C4                 call    _errno
.text:004048C9                 mov     [eax], ebp
.text:004048CB                 call    _errno
.text:004048D0                 mov     ebx, [esp+28h]
.text:004048D4                 mov     [eax], ebx
.text:004048D6                 mov     eax, [esp+24h]
.text:004048DA                 add     esp, 2Ch
.text:004048DD                 pop     ebx
.text:004048DE                 pop     esi
.text:004048DF                 pop     edi
.text:004048E0                 pop     ebp
.text:004048E1                 retn
.text:004048E2 ; ---------------------------------------------------------------------------
.text:004048E2
.text:004048E2 loc_4048E2:                             ; CODE XREF: .text:00404891↑j
.text:004048E2                 mov     esi, offset dword_410110
.text:004048E7                 jmp     short loc_404893
.text:004048E7 ; ---------------------------------------------------------------------------
.text:004048E9                 align 10h
.text:004048F0
.text:004048F0 loc_4048F0:                             ; CODE XREF: .text:0040483A↑j
.text:004048F0                 mov     ebx, offset dword_410110
.text:004048F5                 jmp     loc_404840
.text:004048F5 ; ---------------------------------------------------------------------------
.text:004048FA                 align 10h
.text:00404900                 sub     esp, 1Ch
.text:00404903                 mov     edx, [esp+24h]
.text:00404907                 mov     dword ptr [esp+0Ch], offset dword_410110
.text:0040490F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404917                 mov     [esp+4], edx
.text:0040491B                 mov     edx, [esp+20h]
.text:0040491F                 mov     [esp], edx
.text:00404922                 call    sub_404D70
.text:00404927                 add     esp, 1Ch
.text:0040492A                 retn
.text:0040492A ; ---------------------------------------------------------------------------
.text:0040492B                 align 10h
.text:00404930                 sub     esp, 1Ch
.text:00404933                 mov     edx, [esp+20h]
.text:00404937                 mov     dword ptr [esp+0Ch], offset dword_410110
.text:0040493F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404947                 mov     [esp+4], edx
.text:0040494B                 mov     dword ptr [esp], 0
.text:00404952                 call    sub_404D70
.text:00404957                 add     esp, 1Ch
.text:0040495A                 retn
.text:0040495A ; ---------------------------------------------------------------------------
.text:0040495B                 align 10h
.text:00404960
.text:00404960 ; =============== S U B R O U T I N E =======================================
.text:00404960
.text:00404960
.text:00404960 ; int __cdecl sub_404960(int, int, char *)
.text:00404960 sub_404960      proc near               ; CODE XREF: sub_402F90+3D9↑p
.text:00404960                                         ; sub_402F90+3F7↑p
.text:00404960
.text:00404960 var_BC          = dword ptr -0BCh
.text:00404960 var_B8          = dword ptr -0B8h
.text:00404960 var_B4          = dword ptr -0B4h
.text:00404960 var_B0          = dword ptr -0B0h
.text:00404960 var_AC          = dword ptr -0ACh
.text:00404960 var_A8          = dword ptr -0A8h
.text:00404960 var_A4          = dword ptr -0A4h
.text:00404960 var_A0          = dword ptr -0A0h
.text:00404960 var_9C          = dword ptr -9Ch
.text:00404960 var_98          = dword ptr -98h
.text:00404960 var_94          = dword ptr -94h
.text:00404960 var_90          = dword ptr -90h
.text:00404960 var_8C          = dword ptr -8Ch
.text:00404960 var_7C          = dword ptr -7Ch
.text:00404960 var_78          = dword ptr -78h
.text:00404960 var_74          = dword ptr -74h
.text:00404960 var_70          = dword ptr -70h
.text:00404960 var_6C          = dword ptr -6Ch
.text:00404960 var_68          = dword ptr -68h
.text:00404960 var_64          = dword ptr -64h
.text:00404960 var_60          = dword ptr -60h
.text:00404960 var_5C          = dword ptr -5Ch
.text:00404960 var_4C          = dword ptr -4Ch
.text:00404960 var_48          = dword ptr -48h
.text:00404960 var_44          = dword ptr -44h
.text:00404960 var_40          = dword ptr -40h
.text:00404960 var_3C          = dword ptr -3Ch
.text:00404960 var_38          = dword ptr -38h
.text:00404960 var_34          = dword ptr -34h
.text:00404960 var_30          = dword ptr -30h
.text:00404960 var_2C          = dword ptr -2Ch
.text:00404960 arg_0           = dword ptr  4
.text:00404960 arg_4           = dword ptr  8
.text:00404960 arg_8           = dword ptr  0Ch
.text:00404960
.text:00404960                 push    ebp
.text:00404961                 xor     eax, eax
.text:00404963                 mov     ecx, 8
.text:00404968                 push    edi
.text:00404969                 push    esi
.text:0040496A                 push    ebx
.text:0040496B                 sub     esp, 0ACh
.text:00404971                 mov     ebp, [esp+0BCh+arg_4]
.text:00404978                 cld
.text:00404979                 lea     edi, [esp+0BCh+var_A8]
.text:0040497D                 mov     [esp+0BCh+var_AC], ebp
.text:00404981                 rep stosd
.text:00404983                 mov     eax, [esp+0BCh+var_8C]
.text:00404987                 mov     edi, [esp+0BCh+var_AC]
.text:0040498B                 mov     esi, [esp+0BCh+var_A8]
.text:0040498F                 mov     [esp+0BCh+var_5C], eax
.text:00404993                 mov     ebp, [esp+0BCh+var_A4]
.text:00404997                 mov     eax, [esp+0BCh+var_AC]
.text:0040499B                 mov     [esp+0BCh+var_7C], edi
.text:0040499F                 mov     ecx, [esp+0BCh+var_94]
.text:004049A3                 mov     edi, [esp+0BCh+var_A0]
.text:004049A7                 mov     [esp+0BCh+var_78], esi
.text:004049AB                 mov     edx, [esp+0BCh+var_90]
.text:004049AF                 mov     esi, [esp+0BCh+var_9C]
.text:004049B3                 mov     [esp+0BCh+var_4C], eax
.text:004049B7                 mov     ebx, [esp+0BCh+var_98]
.text:004049BB                 mov     eax, [esp+0BCh+var_A8]
.text:004049BF                 mov     [esp+0BCh+var_74], ebp
.text:004049C3                 mov     [esp+0BCh+var_70], edi
.text:004049C7                 mov     [esp+0BCh+var_6C], esi
.text:004049CB                 mov     [esp+0BCh+var_68], ebx
.text:004049CF                 mov     [esp+0BCh+var_64], ecx
.text:004049D3                 mov     [esp+0BCh+var_60], edx
.text:004049D7                 mov     [esp+0BCh+var_48], eax
.text:004049DB                 mov     [esp+0BCh+var_44], ebp
.text:004049DF                 mov     [esp+0BCh+var_40], edi
.text:004049E3                 mov     [esp+0BCh+var_3C], esi
.text:004049EA                 mov     [esp+0BCh+var_38], ebx
.text:004049F1                 mov     ebx, [esp+0BCh+var_8C]
.text:004049F5                 mov     [esp+0BCh+var_30], edx
.text:004049FC                 mov     edx, [esp+0BCh+arg_8]
.text:00404A03                 mov     [esp+0BCh+var_34], ecx
.text:00404A0A                 lea     ecx, [esp+0BCh+var_4C]
.text:00404A0E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00404A12                 mov     edx, [esp+0BCh+arg_0]
.text:00404A19                 mov     [esp+0BCh+var_2C], ebx
.text:00404A20                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00404A24                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00404A2C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00404A2F                 call    sub_404D70
.text:00404A34                 add     esp, 0ACh
.text:00404A3A                 pop     ebx
.text:00404A3B                 pop     esi
.text:00404A3C                 pop     edi
.text:00404A3D                 pop     ebp
.text:00404A3E                 retn
.text:00404A3E sub_404960      endp
.text:00404A3E
.text:00404A3E ; ---------------------------------------------------------------------------
.text:00404A3F                 align 10h
.text:00404A40                 push    ebp
.text:00404A41                 xor     eax, eax
.text:00404A43                 mov     ecx, 8
.text:00404A48                 push    edi
.text:00404A49                 push    esi
.text:00404A4A                 push    ebx
.text:00404A4B                 sub     esp, 0ACh
.text:00404A51                 mov     edx, [esp+0C4h]
.text:00404A58                 cld
.text:00404A59                 lea     edi, [esp+14h]
.text:00404A5D                 mov     [esp+10h], edx
.text:00404A61                 rep stosd
.text:00404A63                 mov     eax, [esp+30h]
.text:00404A67                 mov     ebp, [esp+10h]
.text:00404A6B                 mov     edi, [esp+14h]
.text:00404A6F                 mov     [esp+60h], eax
.text:00404A73                 mov     esi, [esp+20h]
.text:00404A77                 mov     eax, [esp+10h]
.text:00404A7B                 mov     [esp+40h], ebp
.text:00404A7F                 mov     ecx, [esp+28h]
.text:00404A83                 mov     ebp, [esp+18h]
.text:00404A87                 mov     [esp+44h], edi
.text:00404A8B                 mov     edx, [esp+2Ch]
.text:00404A8F                 mov     edi, [esp+1Ch]
.text:00404A93                 mov     [esp+70h], eax
.text:00404A97                 mov     ebx, [esp+24h]
.text:00404A9B                 mov     eax, [esp+14h]
.text:00404A9F                 mov     [esp+48h], ebp
.text:00404AA3                 mov     [esp+4Ch], edi
.text:00404AA7                 mov     [esp+50h], esi
.text:00404AAB                 mov     [esp+54h], ebx
.text:00404AAF                 mov     [esp+58h], ecx
.text:00404AB3                 mov     [esp+5Ch], edx
.text:00404AB7                 mov     [esp+74h], eax
.text:00404ABB                 mov     [esp+78h], ebp
.text:00404ABF                 mov     [esp+7Ch], edi
.text:00404AC3                 mov     [esp+80h], esi
.text:00404ACA                 mov     [esp+84h], ebx
.text:00404AD1                 mov     esi, [esp+30h]
.text:00404AD5                 lea     ebx, [esp+70h]
.text:00404AD9                 mov     [esp+8Ch], edx
.text:00404AE0                 mov     edx, [esp+0C8h]
.text:00404AE7                 mov     [esp+88h], ecx
.text:00404AEE                 mov     ecx, [esp+0CCh]
.text:00404AF5                 mov     [esp+4], edx
.text:00404AF9                 mov     edx, [esp+0C0h]
.text:00404B00                 mov     [esp+90h], esi
.text:00404B07                 mov     [esp+0Ch], ebx
.text:00404B0B                 mov     [esp+8], ecx
.text:00404B0F                 mov     [esp], edx
.text:00404B12                 call    sub_404D70
.text:00404B17                 add     esp, 0ACh
.text:00404B1D                 pop     ebx
.text:00404B1E                 pop     esi
.text:00404B1F                 pop     edi
.text:00404B20                 pop     ebp
.text:00404B21                 retn
.text:00404B21 ; ---------------------------------------------------------------------------
.text:00404B22                 align 10h
.text:00404B30                 push    ebp
.text:00404B31                 xor     eax, eax
.text:00404B33                 mov     ecx, 8
.text:00404B38                 push    edi
.text:00404B39                 push    esi
.text:00404B3A                 push    ebx
.text:00404B3B                 sub     esp, 0ACh
.text:00404B41                 mov     edi, [esp+0C0h]
.text:00404B48                 cld
.text:00404B49                 mov     [esp+10h], edi
.text:00404B4D                 lea     edi, [esp+14h]
.text:00404B51                 rep stosd
.text:00404B53                 mov     eax, [esp+30h]
.text:00404B57                 mov     esi, [esp+10h]
.text:00404B5B                 mov     ebx, [esp+14h]
.text:00404B5F                 mov     [esp+60h], eax
.text:00404B63                 mov     ebp, [esp+18h]
.text:00404B67                 mov     eax, [esp+10h]
.text:00404B6B                 mov     [esp+40h], esi
.text:00404B6F                 mov     edi, [esp+1Ch]
.text:00404B73                 mov     esi, [esp+20h]
.text:00404B77                 mov     [esp+44h], ebx
.text:00404B7B                 mov     ecx, [esp+28h]
.text:00404B7F                 mov     edx, [esp+2Ch]
.text:00404B83                 mov     [esp+70h], eax
.text:00404B87                 mov     ebx, [esp+24h]
.text:00404B8B                 mov     eax, [esp+14h]
.text:00404B8F                 mov     [esp+48h], ebp
.text:00404B93                 mov     [esp+4Ch], edi
.text:00404B97                 mov     [esp+50h], esi
.text:00404B9B                 mov     [esp+54h], ebx
.text:00404B9F                 mov     [esp+58h], ecx
.text:00404BA3                 mov     [esp+5Ch], edx
.text:00404BA7                 mov     [esp+74h], eax
.text:00404BAB                 mov     [esp+78h], ebp
.text:00404BAF                 mov     [esp+7Ch], edi
.text:00404BB3                 mov     [esp+80h], esi
.text:00404BBA                 mov     [esp+84h], ebx
.text:00404BC1                 mov     [esp+8Ch], edx
.text:00404BC8                 lea     edx, [esp+70h]
.text:00404BCC                 mov     [esp+88h], ecx
.text:00404BD3                 mov     ecx, [esp+30h]
.text:00404BD7                 mov     [esp+0Ch], edx
.text:00404BDB                 mov     edx, [esp+0C4h]
.text:00404BE2                 mov     [esp+90h], ecx
.text:00404BE9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404BF1                 mov     [esp+4], edx
.text:00404BF5                 mov     dword ptr [esp], 0
.text:00404BFC                 call    sub_404D70
.text:00404C01                 add     esp, 0ACh
.text:00404C07                 pop     ebx
.text:00404C08                 pop     esi
.text:00404C09                 pop     edi
.text:00404C0A                 pop     ebp
.text:00404C0B                 retn
.text:00404C0B ; ---------------------------------------------------------------------------
.text:00404C0C                 align 10h
.text:00404C10                 push    edi
.text:00404C11                 push    esi
.text:00404C12                 push    ebx
.text:00404C13                 sub     esp, 40h
.text:00404C16                 mov     edx, ds:dword_41011C
.text:00404C1C                 mov     ebx, ds:dword_410110
.text:00404C22                 mov     esi, ds:dword_410118
.text:00404C28                 mov     edi, ds:dword_410114
.text:00404C2E                 mov     [esp+1Ch], edx
.text:00404C32                 mov     ecx, ds:dword_410120
.text:00404C38                 mov     edx, ds:dword_410130
.text:00404C3E                 mov     [esp+10h], ebx
.text:00404C42                 mov     ebx, ds:dword_410124
.text:00404C48                 mov     [esp+30h], edx
.text:00404C4C                 movzx   edx, byte ptr [esp+54h]
.text:00404C51                 mov     [esp+18h], esi
.text:00404C55                 mov     esi, ds:dword_41012C
.text:00404C5B                 mov     [esp+14h], edi
.text:00404C5F                 mov     edi, ds:dword_410128
.text:00404C65                 mov     [esp+20h], ecx
.text:00404C69                 mov     cl, dl
.text:00404C6B                 shr     cl, 5
.text:00404C6E                 mov     [esp+24h], ebx
.text:00404C72                 movzx   ebx, cl
.text:00404C75                 mov     [esp+2Ch], esi
.text:00404C79                 lea     esi, [esp+10h]
.text:00404C7D                 mov     [esp+28h], edi
.text:00404C81                 lea     edi, [esi+ebx*4]
.text:00404C84                 mov     ebx, edx
.text:00404C86                 mov     edx, [edi+4]
.text:00404C89                 and     ebx, 1Fh
.text:00404C8C                 mov     cl, bl
.text:00404C8E                 mov     eax, edx
.text:00404C90                 shr     eax, cl
.text:00404C92                 and     eax, 1
.text:00404C95                 xor     eax, 1
.text:00404C98                 shl     eax, cl
.text:00404C9A                 xor     edx, eax
.text:00404C9C                 mov     [edi+4], edx
.text:00404C9F                 mov     edx, [esp+50h]
.text:00404CA3                 mov     [esp+0Ch], esi
.text:00404CA7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404CAF                 mov     [esp+4], edx
.text:00404CB3                 mov     dword ptr [esp], 0
.text:00404CBA                 call    sub_404D70
.text:00404CBF                 add     esp, 40h
.text:00404CC2                 pop     ebx
.text:00404CC3                 pop     esi
.text:00404CC4                 pop     edi
.text:00404CC5                 retn
.text:00404CC5 ; ---------------------------------------------------------------------------
.text:00404CC6                 align 10h
.text:00404CD0
.text:00404CD0 ; =============== S U B R O U T I N E =======================================
.text:00404CD0
.text:00404CD0
.text:00404CD0 ; int __cdecl sub_404CD0(char *)
.text:00404CD0 sub_404CD0      proc near               ; CODE XREF: sub_40C0A0+64↓p
.text:00404CD0
.text:00404CD0 var_4C          = dword ptr -4Ch
.text:00404CD0 var_48          = dword ptr -48h
.text:00404CD0 var_44          = dword ptr -44h
.text:00404CD0 var_40          = dword ptr -40h
.text:00404CD0 var_3C          = dword ptr -3Ch
.text:00404CD0 var_38          = dword ptr -38h
.text:00404CD0 var_34          = dword ptr -34h
.text:00404CD0 var_30          = dword ptr -30h
.text:00404CD0 var_2C          = dword ptr -2Ch
.text:00404CD0 var_28          = dword ptr -28h
.text:00404CD0 var_24          = dword ptr -24h
.text:00404CD0 var_20          = dword ptr -20h
.text:00404CD0 var_1C          = dword ptr -1Ch
.text:00404CD0 arg_0           = dword ptr  4
.text:00404CD0
.text:00404CD0                 sub     esp, 4Ch
.text:00404CD3                 mov     ecx, ds:dword_410110
.text:00404CD9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404CE1                 mov     edx, ds:dword_410114
.text:00404CE7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00404CEE                 mov     [esp+4Ch+var_3C], ecx
.text:00404CF2                 mov     ecx, ds:dword_41011C
.text:00404CF8                 mov     [esp+4Ch+var_38], edx
.text:00404CFC                 mov     edx, ds:dword_410118
.text:00404D02                 mov     [esp+4Ch+var_30], ecx
.text:00404D06                 mov     ecx, ds:dword_410120
.text:00404D0C                 mov     eax, edx
.text:00404D0E                 shr     eax, 1Ah
.text:00404D11                 and     eax, 1
.text:00404D14                 xor     eax, 1
.text:00404D17                 mov     [esp+4Ch+var_2C], ecx
.text:00404D1B                 shl     eax, 1Ah
.text:00404D1E                 mov     ecx, ds:dword_410124
.text:00404D24                 xor     edx, eax
.text:00404D26                 mov     [esp+4Ch+var_34], edx
.text:00404D2A                 mov     edx, [esp+4Ch+arg_0]
.text:00404D2E                 mov     [esp+4Ch+var_28], ecx
.text:00404D32                 mov     ecx, ds:dword_410128
.text:00404D38                 mov     [esp+4Ch+var_48], edx ; char *
.text:00404D3C                 mov     [esp+4Ch+var_24], ecx
.text:00404D40                 mov     ecx, ds:dword_41012C
.text:00404D46                 mov     [esp+4Ch+var_20], ecx
.text:00404D4A                 mov     ecx, ds:dword_410130
.text:00404D50                 mov     [esp+4Ch+var_1C], ecx
.text:00404D54                 lea     ecx, [esp+4Ch+var_3C]
.text:00404D58                 mov     [esp+4Ch+var_40], ecx ; int
.text:00404D5C                 call    sub_404D70
.text:00404D61                 add     esp, 4Ch
.text:00404D64                 retn
.text:00404D64 sub_404CD0      endp
.text:00404D64
.text:00404D64 ; ---------------------------------------------------------------------------
.text:00404D65                 align 10h
.text:00404D70
.text:00404D70 ; =============== S U B R O U T I N E =======================================
.text:00404D70
.text:00404D70
.text:00404D70 ; int __cdecl sub_404D70(int, char *, int, int)
.text:00404D70 sub_404D70      proc near               ; CODE XREF: .text:00404922↑p
.text:00404D70                                         ; .text:00404952↑p ...
.text:00404D70
.text:00404D70 Block           = dword ptr -2Ch
.text:00404D70 var_28          = dword ptr -28h
.text:00404D70 Str             = dword ptr -24h
.text:00404D70 var_20          = dword ptr -20h
.text:00404D70 var_1C          = dword ptr -1Ch
.text:00404D70 var_18          = dword ptr -18h
.text:00404D70 var_14          = dword ptr -14h
.text:00404D70 arg_0           = dword ptr  4
.text:00404D70 arg_4           = dword ptr  8
.text:00404D70 arg_8           = dword ptr  0Ch
.text:00404D70 arg_C           = dword ptr  10h
.text:00404D70
.text:00404D70                 push    ebp
.text:00404D71                 push    edi
.text:00404D72                 push    esi
.text:00404D73                 push    ebx
.text:00404D74                 sub     esp, 1Ch
.text:00404D77                 call    _errno
.text:00404D7C                 mov     edx, [eax]
.text:00404D7E                 mov     eax, [esp+2Ch+arg_0]
.text:00404D82                 mov     [esp+2Ch+var_14], edx
.text:00404D86                 test    eax, eax
.text:00404D88                 js      loc_404F2A
.text:00404D8E                 mov     eax, [esp+2Ch+arg_0]
.text:00404D92                 cmp     dword_40F010, eax
.text:00404D98                 ja      short loc_404E10
.text:00404D9A                 mov     esi, eax
.text:00404D9C                 inc     esi
.text:00404D9D                 cmp     esi, 1FFFFFFFh
.text:00404DA3                 ja      loc_404F2F
.text:00404DA9                 mov     ebx, off_40F01C
.text:00404DAF                 cmp     ebx, offset dword_40F014
.text:00404DB5                 jz      loc_404F01
.text:00404DBB
.text:00404DBB loc_404DBB:                             ; CODE XREF: sub_404D70+1B5↓j
.text:00404DBB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00404DBE                 lea     ecx, ds:0[esi*8]
.text:00404DC5                 mov     ebp, esi
.text:00404DC7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00404DCB                 call    sub_40BD50
.text:00404DD0                 mov     off_40F01C, eax
.text:00404DD5                 mov     ebx, dword_40F010
.text:00404DDB                 sub     ebp, ebx
.text:00404DDD                 lea     edi, [eax+ebx*8]
.text:00404DE0                 lea     eax, ds:0[ebp*8]
.text:00404DE7                 cmp     eax, 7
.text:00404DEA                 jbe     short loc_404E00
.text:00404DEC                 test    edi, 4
.text:00404DF2                 jz      short loc_404E00
.text:00404DF4                 mov     dword ptr [edi], 0
.text:00404DFA                 sub     eax, 4
.text:00404DFD                 add     edi, 4
.text:00404E00
.text:00404E00 loc_404E00:                             ; CODE XREF: sub_404D70+7A↑j
.text:00404E00                                         ; sub_404D70+82↑j
.text:00404E00                 cld
.text:00404E01                 mov     ecx, eax
.text:00404E03                 shr     ecx, 2
.text:00404E06                 xor     eax, eax
.text:00404E08                 rep stosd
.text:00404E0A                 mov     dword_40F010, esi
.text:00404E10
.text:00404E10 loc_404E10:                             ; CODE XREF: sub_404D70+28↑j
.text:00404E10                 mov     esi, off_40F01C
.text:00404E16                 mov     eax, [esp+2Ch+arg_0]
.text:00404E1A                 mov     ebp, [esi+eax*8]
.text:00404E1D                 mov     edi, [esi+eax*8+4]
.text:00404E21                 mov     esi, [esp+2Ch+arg_C]
.text:00404E25                 test    esi, esi
.text:00404E27                 jz      loc_404EF7
.text:00404E2D
.text:00404E2D loc_404E2D:                             ; CODE XREF: sub_404D70+18C↓j
.text:00404E2D                 call    _errno
.text:00404E32                 mov     ebx, [eax]
.text:00404E34                 mov     [esp+2Ch+var_18], esi ; int
.text:00404E38                 mov     ecx, [esi]
.text:00404E3A                 mov     [esp+2Ch+Block], edi ; int
.text:00404E3D                 mov     edx, [esp+2Ch+arg_8]
.text:00404E41                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404E45                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404E49                 mov     ecx, [esp+2Ch+arg_4]
.text:00404E4D                 mov     [esp+2Ch+var_20], edx ; int
.text:00404E51                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404E55                 call    sub_403C30
.text:00404E5A                 mov     esi, eax
.text:00404E5C                 call    _errno
.text:00404E61                 mov     [eax], ebx
.text:00404E63                 cmp     ebp, esi
.text:00404E65                 ja      short loc_404EDB
.text:00404E67                 lea     ebp, [esi+1]
.text:00404E6A                 mov     ebx, off_40F01C
.text:00404E70                 cmp     edi, offset unk_410010
.text:00404E76                 mov     esi, [esp+2Ch+arg_0]
.text:00404E7A                 mov     [ebx+esi*8], ebp
.text:00404E7D                 jz      short loc_404E8D
.text:00404E7F                 mov     [esp+2Ch+Block], edi ; Block
.text:00404E82                 call    free
.text:00404E87                 mov     ebx, off_40F01C
.text:00404E8D
.text:00404E8D loc_404E8D:                             ; CODE XREF: sub_404D70+10D↑j
.text:00404E8D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404E90                 call    sub_40BCC0
.text:00404E95                 mov     esi, [esp+2Ch+arg_C]
.text:00404E99                 mov     edi, eax
.text:00404E9B                 mov     eax, [esp+2Ch+arg_0]
.text:00404E9F                 test    esi, esi
.text:00404EA1                 mov     [ebx+eax*8+4], edi
.text:00404EA5                 jz      short loc_404EF0
.text:00404EA7
.text:00404EA7 loc_404EA7:                             ; CODE XREF: sub_404D70+185↓j
.text:00404EA7                 call    _errno
.text:00404EAC                 mov     ebx, [eax]
.text:00404EAE                 mov     [esp+2Ch+var_18], esi ; int
.text:00404EB2                 mov     ecx, [esi]
.text:00404EB4                 mov     [esp+2Ch+Block], edi ; int
.text:00404EB7                 mov     edx, [esp+2Ch+arg_8]
.text:00404EBB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404EBF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404EC3                 mov     ecx, [esp+2Ch+arg_4]
.text:00404EC7                 mov     [esp+2Ch+var_20], edx ; int
.text:00404ECB                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404ECF                 call    sub_403C30
.text:00404ED4                 call    _errno
.text:00404ED9                 mov     [eax], ebx
.text:00404EDB
.text:00404EDB loc_404EDB:                             ; CODE XREF: sub_404D70+F5↑j
.text:00404EDB                 call    _errno
.text:00404EE0                 mov     ebp, [esp+2Ch+var_14]
.text:00404EE4                 mov     [eax], ebp
.text:00404EE6                 add     esp, 1Ch
.text:00404EE9                 mov     eax, edi
.text:00404EEB                 pop     ebx
.text:00404EEC                 pop     esi
.text:00404EED                 pop     edi
.text:00404EEE                 pop     ebp
.text:00404EEF                 retn
.text:00404EF0 ; ---------------------------------------------------------------------------
.text:00404EF0
.text:00404EF0 loc_404EF0:                             ; CODE XREF: sub_404D70+135↑j
.text:00404EF0                 mov     esi, offset dword_410110
.text:00404EF5                 jmp     short loc_404EA7
.text:00404EF7 ; ---------------------------------------------------------------------------
.text:00404EF7
.text:00404EF7 loc_404EF7:                             ; CODE XREF: sub_404D70+B7↑j
.text:00404EF7                 mov     esi, offset dword_410110
.text:00404EFC                 jmp     loc_404E2D
.text:00404F01 ; ---------------------------------------------------------------------------
.text:00404F01
.text:00404F01 loc_404F01:                             ; CODE XREF: sub_404D70+45↑j
.text:00404F01                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404F08                 call    sub_40BCC0
.text:00404F0D                 mov     off_40F01C, eax
.text:00404F12                 mov     edi, dword_40F014
.text:00404F18                 mov     ebx, eax
.text:00404F1A                 mov     ecx, off_40F018
.text:00404F20                 mov     [eax], edi
.text:00404F22                 mov     [eax+4], ecx
.text:00404F25                 jmp     loc_404DBB
.text:00404F2A ; ---------------------------------------------------------------------------
.text:00404F2A
.text:00404F2A loc_404F2A:                             ; CODE XREF: sub_404D70+18↑j
.text:00404F2A                 call    abort
.text:00404F2F ; ---------------------------------------------------------------------------
.text:00404F2F
.text:00404F2F loc_404F2F:                             ; CODE XREF: sub_404D70+33↑j
.text:00404F2F                 call    sub_40BB80
.text:00404F2F sub_404D70      endp
.text:00404F2F
.text:00404F2F ; ---------------------------------------------------------------------------
.text:00404F34                 align 10h
.text:00404F40
.text:00404F40 ; =============== S U B R O U T I N E =======================================
.text:00404F40
.text:00404F40
.text:00404F40 sub_404F40      proc near               ; CODE XREF: sub_404F90+3A↓j
.text:00404F40                                         ; sub_408170+46B↓p ...
.text:00404F40
.text:00404F40 arg_0           = dword ptr  4
.text:00404F40 arg_4           = dword ptr  8
.text:00404F40 arg_8           = dword ptr  0Ch
.text:00404F40
.text:00404F40                 mov     edx, [esp+arg_8]
.text:00404F44                 mov     ecx, [esp+arg_4]
.text:00404F48                 mov     eax, [esp+arg_0]
.text:00404F4C                 mov     [ecx+1], dl
.text:00404F4F                 sar     edx, 8
.text:00404F52                 mov     [ecx], al
.text:00404F54                 mov     [ecx+2], dl
.text:00404F57                 retn
.text:00404F57 sub_404F40      endp
.text:00404F57
.text:00404F57 ; ---------------------------------------------------------------------------
.text:00404F58                 align 10h
.text:00404F60
.text:00404F60 ; =============== S U B R O U T I N E =======================================
.text:00404F60
.text:00404F60
.text:00404F60 sub_404F60      proc near               ; CODE XREF: sub_404FD0+3F↓j
.text:00404F60                                         ; sub_408170+313B↓p
.text:00404F60
.text:00404F60 arg_0           = dword ptr  4
.text:00404F60 arg_4           = dword ptr  8
.text:00404F60 arg_8           = dword ptr  0Ch
.text:00404F60 arg_C           = dword ptr  10h
.text:00404F60
.text:00404F60                 push    ebx
.text:00404F61                 mov     edx, [esp+4+arg_8]
.text:00404F65                 mov     ebx, [esp+4+arg_C]
.text:00404F69                 mov     ecx, [esp+4+arg_4]
.text:00404F6D                 mov     eax, [esp+4+arg_0]
.text:00404F71                 mov     [ecx+1], dl
.text:00404F74                 sar     edx, 8
.text:00404F77                 mov     [ecx+3], bl
.text:00404F7A                 sar     ebx, 8
.text:00404F7D                 mov     [ecx], al
.text:00404F7F                 mov     [ecx+2], dl
.text:00404F82                 mov     [ecx+4], bl
.text:00404F85                 pop     ebx
.text:00404F86                 retn
.text:00404F86 sub_404F60      endp
.text:00404F86
.text:00404F86 ; ---------------------------------------------------------------------------
.text:00404F87                 align 10h
.text:00404F90
.text:00404F90 ; =============== S U B R O U T I N E =======================================
.text:00404F90
.text:00404F90
.text:00404F90 sub_404F90      proc near               ; CODE XREF: sub_408170+967↓p
.text:00404F90                                         ; sub_408170+137C↓p ...
.text:00404F90
.text:00404F90 arg_0           = dword ptr  4
.text:00404F90 arg_4           = dword ptr  8
.text:00404F90 arg_8           = dword ptr  0Ch
.text:00404F90 arg_C           = dword ptr  10h
.text:00404F90
.text:00404F90                 push    edi
.text:00404F91                 push    esi
.text:00404F92                 push    ebx
.text:00404F93                 mov     edx, [esp+0Ch+arg_C]
.text:00404F97                 mov     ebx, [esp+0Ch+arg_4]
.text:00404F9B                 mov     edi, [esp+0Ch+arg_0]
.text:00404F9F                 mov     esi, [esp+0Ch+arg_8]
.text:00404FA3                 lea     ecx, [edx+3]
.text:00404FA6                 cmp     edx, ebx
.text:00404FA8                 jz      short loc_404FBB
.text:00404FAA                 lea     esi, [esi+0]
.text:00404FB0
.text:00404FB0 loc_404FB0:                             ; CODE XREF: sub_404F90+29↓j
.text:00404FB0                 dec     edx
.text:00404FB1                 dec     ecx
.text:00404FB2                 cmp     edx, ebx
.text:00404FB4                 movzx   eax, byte ptr [edx]
.text:00404FB7                 mov     [ecx], al
.text:00404FB9                 jnz     short loc_404FB0
.text:00404FBB
.text:00404FBB loc_404FBB:                             ; CODE XREF: sub_404F90+18↑j
.text:00404FBB                 mov     [esp+0Ch+arg_8], esi
.text:00404FBF                 mov     [esp+0Ch+arg_0], edi
.text:00404FC3                 mov     [esp+0Ch+arg_4], ebx
.text:00404FC7                 pop     ebx
.text:00404FC8                 pop     esi
.text:00404FC9                 pop     edi
.text:00404FCA                 jmp     sub_404F40
.text:00404FCA sub_404F90      endp
.text:00404FCA
.text:00404FCA ; ---------------------------------------------------------------------------
.text:00404FCF                 align 10h
.text:00404FD0
.text:00404FD0 ; =============== S U B R O U T I N E =======================================
.text:00404FD0
.text:00404FD0
.text:00404FD0 sub_404FD0      proc near               ; CODE XREF: sub_408170+30CC↓p
.text:00404FD0                                         ; sub_408170+30F8↓p ...
.text:00404FD0
.text:00404FD0 arg_0           = dword ptr  4
.text:00404FD0 arg_4           = dword ptr  8
.text:00404FD0 arg_8           = dword ptr  0Ch
.text:00404FD0 arg_C           = dword ptr  10h
.text:00404FD0 arg_10          = dword ptr  14h
.text:00404FD0
.text:00404FD0                 push    ebp
.text:00404FD1                 push    edi
.text:00404FD2                 push    esi
.text:00404FD3                 push    ebx
.text:00404FD4                 mov     edx, [esp+10h+arg_10]
.text:00404FD8                 mov     ebx, [esp+10h+arg_4]
.text:00404FDC                 mov     ebp, [esp+10h+arg_0]
.text:00404FE0                 mov     edi, [esp+10h+arg_8]
.text:00404FE4                 lea     ecx, [edx+5]
.text:00404FE7                 cmp     edx, ebx
.text:00404FE9                 mov     esi, [esp+10h+arg_C]
.text:00404FED                 jz      short loc_404FFB
.text:00404FEF                 nop
.text:00404FF0
.text:00404FF0 loc_404FF0:                             ; CODE XREF: sub_404FD0+29↓j
.text:00404FF0                 dec     edx
.text:00404FF1                 dec     ecx
.text:00404FF2                 cmp     edx, ebx
.text:00404FF4                 movzx   eax, byte ptr [edx]
.text:00404FF7                 mov     [ecx], al
.text:00404FF9                 jnz     short loc_404FF0
.text:00404FFB
.text:00404FFB loc_404FFB:                             ; CODE XREF: sub_404FD0+1D↑j
.text:00404FFB                 mov     [esp+10h+arg_C], esi
.text:00404FFF                 mov     [esp+10h+arg_8], edi
.text:00405003                 mov     [esp+10h+arg_0], ebp
.text:00405007                 mov     [esp+10h+arg_4], ebx
.text:0040500B                 pop     ebx
.text:0040500C                 pop     esi
.text:0040500D                 pop     edi
.text:0040500E                 pop     ebp
.text:0040500F                 jmp     sub_404F60
.text:0040500F sub_404FD0      endp
.text:0040500F
.text:0040500F ; ---------------------------------------------------------------------------
.text:00405014                 align 10h
.text:00405020
.text:00405020 ; =============== S U B R O U T I N E =======================================
.text:00405020
.text:00405020
.text:00405020 sub_405020      proc near               ; CODE XREF: sub_408170+5C6↓p
.text:00405020
.text:00405020 arg_0           = dword ptr  4
.text:00405020 arg_4           = dword ptr  8
.text:00405020 arg_8           = dword ptr  0Ch
.text:00405020
.text:00405020                 push    ebx
.text:00405021                 mov     edx, [esp+4+arg_4]
.text:00405025                 xor     ebx, ebx
.text:00405027                 mov     ecx, [esp+4+arg_8]
.text:0040502B                 sub     edx, 2
.text:0040502E                 cmp     edx, [esp+4+arg_0]
.text:00405032                 jbe     short loc_40503A
.text:00405034                 cmp     byte ptr [edx-1], 5Ch ; '\'
.text:00405038                 jz      short loc_405072
.text:0040503A
.text:0040503A loc_40503A:                             ; CODE XREF: sub_405020+12↑j
.text:0040503A                                         ; sub_405020+54↓j
.text:0040503A                 movzx   edx, byte ptr [edx]
.text:0040503D                 xor     eax, eax
.text:0040503F                 cmp     dl, 28h ; '('
.text:00405042                 jz      short loc_405067
.text:00405044
.text:00405044 loc_405044:                             ; CODE XREF: sub_405020+50↓j
.text:00405044                 cmp     dl, 7Ch ; '|'
.text:00405047                 jz      short loc_405050
.text:00405049
.text:00405049 loc_405049:                             ; CODE XREF: sub_405020+3D↓j
.text:00405049                                         ; sub_405020+45↓j
.text:00405049                 pop     ebx
.text:0040504A                 retn
.text:0040504A ; ---------------------------------------------------------------------------
.text:0040504B                 align 10h
.text:00405050
.text:00405050 loc_405050:                             ; CODE XREF: sub_405020+27↑j
.text:00405050                 and     ecx, 0FFFF8000h
.text:00405056                 test    cx, cx
.text:00405059                 jnz     short loc_405060
.text:0040505B                 test    bl, bl
.text:0040505D                 jz      short loc_405049
.text:0040505F                 nop
.text:00405060
.text:00405060 loc_405060:                             ; CODE XREF: sub_405020+39↑j
.text:00405060                                         ; sub_405020+4A↓j ...
.text:00405060                 mov     eax, 1
.text:00405065                 jmp     short loc_405049
.text:00405067 ; ---------------------------------------------------------------------------
.text:00405067
.text:00405067 loc_405067:                             ; CODE XREF: sub_405020+22↑j
.text:00405067                 test    ch, 20h
.text:0040506A                 jnz     short loc_405060
.text:0040506C                 test    bl, bl
.text:0040506E                 jnz     short loc_405060
.text:00405070                 jmp     short loc_405044
.text:00405072 ; ---------------------------------------------------------------------------
.text:00405072
.text:00405072 loc_405072:                             ; CODE XREF: sub_405020+18↑j
.text:00405072                 mov     bl, 1
.text:00405074                 jmp     short loc_40503A
.text:00405074 sub_405020      endp
.text:00405074
.text:00405074 ; ---------------------------------------------------------------------------
.text:00405076                 align 10h
.text:00405080
.text:00405080 ; =============== S U B R O U T I N E =======================================
.text:00405080
.text:00405080
.text:00405080 sub_405080      proc near               ; CODE XREF: sub_408170+B9A↓p
.text:00405080
.text:00405080 var_9           = byte ptr -9
.text:00405080 var_8           = dword ptr -8
.text:00405080 var_4           = dword ptr -4
.text:00405080 arg_0           = dword ptr  4
.text:00405080 arg_4           = dword ptr  8
.text:00405080 arg_8           = dword ptr  0Ch
.text:00405080
.text:00405080                 sub     esp, 0Ch
.text:00405083                 mov     edx, [esp+0Ch+arg_8]
.text:00405087                 mov     [esp+0Ch+var_4], esi
.text:0040508B                 mov     esi, [esp+0Ch+arg_0]
.text:0040508F                 mov     [esp+0Ch+var_8], ebx
.text:00405093                 lea     eax, [esi+1]
.text:00405096                 movzx   ebx, byte ptr [esi]
.text:00405099                 cmp     bl, 5Ch ; '\'
.text:0040509C                 setz    [esp+0Ch+var_9]
.text:004050A1                 cmp     eax, [esp+0Ch+arg_4]
.text:004050A5                 sbb     ecx, ecx
.text:004050A7                 and     ecx, eax
.text:004050A9                 xor     eax, eax
.text:004050AB                 test    dh, 20h
.text:004050AE                 jz      short loc_4050E8
.text:004050B0                 cmp     bl, 29h ; ')'
.text:004050B3
.text:004050B3 loc_4050B3:                             ; CODE XREF: sub_405080+76↓j
.text:004050B3                 jz      short loc_4050D1
.text:004050B5
.text:004050B5 loc_4050B5:                             ; CODE XREF: sub_405080+6D↓j
.text:004050B5                                         ; sub_405080+71↓j
.text:004050B5                 and     edx, 0FFFF8000h
.text:004050BB                 test    dx, dx
.text:004050BE                 jz      short loc_4050D8
.text:004050C0                 cmp     byte ptr [esi], 7Ch ; '|'
.text:004050C3
.text:004050C3 loc_4050C3:                             ; CODE XREF: sub_405080+66↓j
.text:004050C3                 jz      short loc_4050D1
.text:004050C5
.text:004050C5 loc_4050C5:                             ; CODE XREF: sub_405080+56↓j
.text:004050C5                                         ; sub_405080+5D↓j ...
.text:004050C5                 mov     ebx, [esp+0Ch+var_8]
.text:004050C9                 mov     esi, [esp+0Ch+var_4]
.text:004050CD                 add     esp, 0Ch
.text:004050D0                 retn
.text:004050D1 ; ---------------------------------------------------------------------------
.text:004050D1
.text:004050D1 loc_4050D1:                             ; CODE XREF: sub_405080:loc_4050B3↑j
.text:004050D1                                         ; sub_405080:loc_4050C3↑j
.text:004050D1                 mov     eax, 1
.text:004050D6                 jmp     short loc_4050C5
.text:004050D8 ; ---------------------------------------------------------------------------
.text:004050D8
.text:004050D8 loc_4050D8:                             ; CODE XREF: sub_405080+3E↑j
.text:004050D8                 cmp     [esp+0Ch+var_9], 0
.text:004050DD                 jz      short loc_4050C5
.text:004050DF                 test    ecx, ecx
.text:004050E1                 jz      short loc_4050C5
.text:004050E3                 cmp     byte ptr [ecx], 7Ch ; '|'
.text:004050E6                 jmp     short loc_4050C3
.text:004050E8 ; ---------------------------------------------------------------------------
.text:004050E8
.text:004050E8 loc_4050E8:                             ; CODE XREF: sub_405080+2E↑j
.text:004050E8                 cmp     [esp+0Ch+var_9], 0
.text:004050ED                 jz      short loc_4050B5
.text:004050EF                 test    ecx, ecx
.text:004050F1                 jz      short loc_4050B5
.text:004050F3                 cmp     byte ptr [ecx], 29h ; ')'
.text:004050F6                 jmp     short loc_4050B3
.text:004050F6 sub_405080      endp
.text:004050F6
.text:004050F6 ; ---------------------------------------------------------------------------
.text:004050F8                 align 10h
.text:00405100
.text:00405100 ; =============== S U B R O U T I N E =======================================
.text:00405100
.text:00405100
.text:00405100 sub_405100      proc near               ; CODE XREF: sub_408170:loc_40A253↓p
.text:00405100
.text:00405100 arg_0           = dword ptr  4
.text:00405100 arg_4           = dword ptr  8
.text:00405100 arg_8           = dword ptr  0Ch
.text:00405100 arg_C           = dword ptr  10h
.text:00405100 arg_10          = dword ptr  14h
.text:00405100 arg_14          = dword ptr  18h
.text:00405100
.text:00405100                 push    ebp
.text:00405101                 push    edi
.text:00405102                 push    esi
.text:00405103                 push    ebx
.text:00405104                 mov     ecx, [esp+10h+arg_4]
.text:00405108                 mov     esi, [esp+10h+arg_0]
.text:0040510C                 mov     ebx, [esp+10h+arg_C]
.text:00405110                 mov     edx, [ecx]
.text:00405112                 cmp     edx, [esp+10h+arg_8]
.text:00405116                 jz      loc_4051CA
.text:0040511C                 lea     edi, [edx+1]
.text:0040511F                 mov     [ecx], edi
.text:00405121                 xor     ecx, ecx
.text:00405123                 test    [esp+10h+arg_10], 10000h
.text:0040512B                 setz    cl
.text:0040512E                 dec     ecx
.text:0040512F                 and     ecx, 0Bh
.text:00405132                 test    ebx, ebx
.text:00405134                 jz      loc_4051C5
.text:0040513A                 movzx   edi, byte ptr [edx]
.text:0040513D                 and     esi, 0FFh
.text:00405143                 movsx   esi, byte ptr [esi+ebx]
.text:00405147                 movzx   ebp, byte ptr [edi+ebx]
.text:0040514B
.text:0040514B loc_40514B:                             ; CODE XREF: sub_405100+C8↓j
.text:0040514B                 cmp     esi, ebp
.text:0040514D                 mov     edx, esi
.text:0040514F                 ja      short loc_4051BE
.text:00405151                 jmp     short loc_405160
.text:00405151 ; ---------------------------------------------------------------------------
.text:00405153                 align 10h
.text:00405160
.text:00405160 loc_405160:                             ; CODE XREF: sub_405100+51↑j
.text:00405160                                         ; sub_405100+BC↓j
.text:00405160                 test    ebx, ebx
.text:00405162                 movzx   eax, dl
.text:00405165                 jz      short loc_40516E
.text:00405167                 movzx   ecx, dl
.text:0040516A                 movzx   eax, byte ptr [ecx+ebx]
.text:0040516E
.text:0040516E loc_40516E:                             ; CODE XREF: sub_405100+65↑j
.text:0040516E                 mov     edi, [esp+10h+arg_14]
.text:00405172                 sar     eax, 3
.text:00405175                 add     edi, eax
.text:00405177                 test    ebx, ebx
.text:00405179                 movzx   eax, dl
.text:0040517C                 jz      short loc_405185
.text:0040517E                 movzx   esi, dl
.text:00405181                 movzx   eax, byte ptr [esi+ebx]
.text:00405185
.text:00405185 loc_405185:                             ; CODE XREF: sub_405100+7C↑j
.text:00405185                 mov     esi, [esp+10h+arg_14]
.text:00405189                 sar     eax, 3
.text:0040518C                 movzx   ecx, dl
.text:0040518F                 add     eax, esi
.text:00405191                 test    ebx, ebx
.text:00405193                 movzx   esi, byte ptr [eax]
.text:00405196                 jz      short loc_40519F
.text:00405198                 movzx   eax, dl
.text:0040519B                 movzx   ecx, byte ptr [eax+ebx]
.text:0040519F
.text:0040519F loc_40519F:                             ; CODE XREF: sub_405100+96↑j
.text:0040519F                 mov     eax, ecx
.text:004051A1                 inc     edx
.text:004051A2                 and     eax, 1F8h
.text:004051A7                 sub     ecx, eax
.text:004051A9                 mov     eax, 1
.text:004051AE                 shl     eax, cl
.text:004051B0                 mov     ecx, eax
.text:004051B2                 mov     eax, esi
.text:004051B4                 or      al, cl
.text:004051B6                 mov     [edi], al
.text:004051B8                 xor     ecx, ecx
.text:004051BA                 cmp     edx, ebp
.text:004051BC                 jbe     short loc_405160
.text:004051BE
.text:004051BE loc_4051BE:                             ; CODE XREF: sub_405100+4F↑j
.text:004051BE                 mov     eax, ecx
.text:004051C0
.text:004051C0 loc_4051C0:                             ; CODE XREF: sub_405100+CF↓j
.text:004051C0                 pop     ebx
.text:004051C1                 pop     esi
.text:004051C2                 pop     edi
.text:004051C3                 pop     ebp
.text:004051C4                 retn
.text:004051C5 ; ---------------------------------------------------------------------------
.text:004051C5
.text:004051C5 loc_4051C5:                             ; CODE XREF: sub_405100+34↑j
.text:004051C5                 movzx   ebp, byte ptr [edx]
.text:004051C8                 jmp     short loc_40514B
.text:004051CA ; ---------------------------------------------------------------------------
.text:004051CA
.text:004051CA loc_4051CA:                             ; CODE XREF: sub_405100+16↑j
.text:004051CA                 mov     eax, 0Bh
.text:004051CF                 jmp     short loc_4051C0
.text:004051CF sub_405100      endp
.text:004051CF
.text:004051CF ; ---------------------------------------------------------------------------
.text:004051D1                 db 0EBh, 0Dh, 90h
.text:004051D4                 align 10h
.text:004051E0 jpt_4054D7      dd offset loc_405A8B    ; DATA XREF: sub_405260:loc_4054D0↓r
.text:004051E0                                         ; sub_405260+BEF↓r ...
.text:004051E0                 dd offset loc_405AA3    ; jump table for switch statement
.text:004051E0                 dd offset loc_405AA8
.text:004051E0                 dd offset loc_405BA3
.text:004051E0                 dd offset loc_407406
.text:004051E0                 dd offset loc_407310
.text:004051F8 jpt_405C64      dd offset loc_407224    ; DATA XREF: sub_405260+9FD↓r
.text:004051F8                 dd offset loc_406E20    ; jump table for switch statement
.text:00405200                 dd offset loc_406C83
.text:00405204                 dd offset loc_406C39
.text:00405208                 dd offset loc_406BDD
.text:0040520C                 dd offset loc_406BA0
.text:00405210                 dd offset loc_406B86
.text:00405214                 dd offset loc_4061FA
.text:00405218                 dd offset loc_406B81
.text:0040521C                 dd offset loc_406B7C
.text:00405220                 dd offset loc_406A01
.text:00405224                 dd offset loc_406805
.text:00405228                 dd offset loc_40676C
.text:0040522C                 dd offset loc_4065E6
.text:00405230                 dd offset loc_406460
.text:00405234                 dd offset loc_406218
.text:00405238                 dd offset loc_4061CF
.text:0040523C                 dd offset loc_406177
.text:00405240                 dd offset loc_4060C7
.text:00405244                 dd offset loc_406016
.text:00405248                 dd offset loc_405F2A
.text:0040524C                 dd offset loc_405E58
.text:00405250                 dd offset loc_405D52
.text:00405254                 dd offset loc_405C66
.text:00405258                 align 10h
.text:00405260
.text:00405260 ; =============== S U B R O U T I N E =======================================
.text:00405260
.text:00405260
.text:00405260 sub_405260      proc near               ; CODE XREF: sub_407F80+3E↓p
.text:00405260                                         ; .text:00407FD0↓j ...
.text:00405260
.text:00405260 Size            = dword ptr -0BCh
.text:00405260 var_B8          = dword ptr -0B8h
.text:00405260 var_B4          = dword ptr -0B4h
.text:00405260 var_B0          = dword ptr -0B0h
.text:00405260 var_A5          = byte ptr -0A5h
.text:00405260 var_A4          = dword ptr -0A4h
.text:00405260 var_A0          = dword ptr -0A0h
.text:00405260 var_9C          = dword ptr -9Ch
.text:00405260 var_97          = byte ptr -97h
.text:00405260 var_96          = byte ptr -96h
.text:00405260 var_95          = byte ptr -95h
.text:00405260 var_94          = dword ptr -94h
.text:00405260 var_90          = dword ptr -90h
.text:00405260 var_8C          = dword ptr -8Ch
.text:00405260 var_88          = dword ptr -88h
.text:00405260 var_84          = dword ptr -84h
.text:00405260 var_80          = dword ptr -80h
.text:00405260 var_7C          = dword ptr -7Ch
.text:00405260 var_78          = dword ptr -78h
.text:00405260 var_74          = dword ptr -74h
.text:00405260 var_70          = dword ptr -70h
.text:00405260 var_6C          = dword ptr -6Ch
.text:00405260 var_68          = dword ptr -68h
.text:00405260 var_64          = dword ptr -64h
.text:00405260 var_60          = dword ptr -60h
.text:00405260 var_5C          = dword ptr -5Ch
.text:00405260 var_58          = dword ptr -58h
.text:00405260 var_54          = dword ptr -54h
.text:00405260 var_50          = dword ptr -50h
.text:00405260 var_4C          = dword ptr -4Ch
.text:00405260 var_48          = dword ptr -48h
.text:00405260 var_44          = dword ptr -44h
.text:00405260 var_40          = dword ptr -40h
.text:00405260 var_3C          = dword ptr -3Ch
.text:00405260 var_38          = dword ptr -38h
.text:00405260 var_34          = dword ptr -34h
.text:00405260 var_30          = dword ptr -30h
.text:00405260 Src             = dword ptr -2Ch
.text:00405260 var_28          = dword ptr -28h
.text:00405260 var_24          = dword ptr -24h
.text:00405260 arg_0           = dword ptr  4
.text:00405260 arg_4           = dword ptr  8
.text:00405260 arg_8           = dword ptr  0Ch
.text:00405260 arg_C           = dword ptr  10h
.text:00405260 arg_10          = dword ptr  14h
.text:00405260 arg_14          = dword ptr  18h
.text:00405260 arg_18          = dword ptr  1Ch
.text:00405260 arg_1C          = dword ptr  20h
.text:00405260
.text:00405260                 push    ebp
.text:00405261                 push    edi
.text:00405262                 push    esi
.text:00405263                 push    ebx
.text:00405264                 sub     esp, 0ACh
.text:0040526A                 mov     ebx, [esp+0BCh+arg_0]
.text:00405271                 mov     [esp+0BCh+var_54], 0
.text:00405279                 mov     ecx, [esp+0BCh+arg_0]
.text:00405280                 mov     esi, [esp+0BCh+arg_1C]
.text:00405287                 mov     [esp+0BCh+var_60], 101h
.text:0040528F                 mov     ebp, [ebx+8]
.text:00405292                 mov     edi, [ecx]
.text:00405294                 mov     [esp+0BCh+var_64], 100h
.text:0040529C                 mov     eax, [ebx+18h]
.text:0040529F                 mov     edx, [ebx+14h]
.text:004052A2                 mov     [esp+0BCh+var_4C], edi
.text:004052A6                 inc     eax
.text:004052A7                 add     edi, ebp
.text:004052A9                 mov     [esp+0BCh+var_58], edx
.text:004052AD                 mov     [esp+0BCh+var_50], edi
.text:004052B1                 mov     [esp+0BCh+var_5C], eax
.text:004052B5                 mov     [esp+0BCh+var_7C], 0
.text:004052BD                 mov     [esp+0BCh+var_88], 0
.text:004052C5                 mov     [esp+0BCh+var_8C], 0
.text:004052CD                 mov     [esp+0BCh+Size], 14h ; Size
.text:004052D4                 call    malloc
.text:004052D9                 mov     [esp+0BCh+Src], eax
.text:004052E0                 mov     edx, eax
.text:004052E2                 test    edx, edx
.text:004052E4                 mov     eax, 0FFFFFFFEh
.text:004052E9                 jz      loc_4059B7
.text:004052EF                 mov     edx, [esp+0BCh+arg_0]
.text:004052F6                 xor     edi, edi
.text:004052F8                 mov     ebp, 5
.text:004052FD                 mov     [esp+0BCh+var_28], ebp
.text:00405304                 mov     [esp+0BCh+var_24], edi
.text:0040530B                 mov     ebx, [edx+18h]
.text:0040530E                 test    ebx, ebx
.text:00405310                 jnz     loc_4074F7
.text:00405316                 mov     [esp+0BCh+var_90], 0
.text:0040531E                 mov     [esp+0BCh+var_84], 0
.text:00405326                 mov     [esp+0BCh+var_80], 0
.text:0040532E                 mov     [esp+0BCh+var_74], 0
.text:00405336                 mov     [esp+0BCh+var_70], 0
.text:0040533E                 mov     [esp+0BCh+var_6C], 0
.text:00405346                 mov     [esp+0BCh+var_68], 0
.text:0040534E                 mov     [esp+0BCh+var_94], 0
.text:00405356                 mov     [esp+0BCh+var_78], 0
.text:0040535E
.text:0040535E loc_40535E:                             ; CODE XREF: sub_405260+236C↓j
.text:0040535E                 mov     eax, [esp+0BCh+arg_14]
.text:00405365                 test    eax, eax
.text:00405367                 js      loc_405A55
.text:0040536D                 mov     ebp, [esp+0BCh+arg_8]
.text:00405374                 mov     ecx, [esp+0BCh+arg_10]
.text:0040537B                 add     ebp, ecx
.text:0040537D                 cmp     [esp+0BCh+arg_14], ebp
.text:00405384                 jg      loc_405A55
.text:0040538A                 mov     ebp, 1
.text:0040538F                 cmp     ebp, [esp+0BCh+var_5C]
.text:00405393                 jnb     short loc_4053D8
.text:00405395                 mov     eax, [esp+0BCh+var_78]
.text:00405399                 add     eax, 4
.text:0040539C
.text:0040539C loc_40539C:                             ; CODE XREF: sub_405260+176↓j
.text:0040539C                 mov     ecx, [esp+0BCh+var_74]
.text:004053A0                 mov     ebx, [esp+0BCh+var_70]
.text:004053A4                 mov     edx, [esp+0BCh+var_6C]
.text:004053A8                 mov     dword ptr [ecx+ebp*4], offset unk_410250
.text:004053AF                 mov     edi, [esp+0BCh+var_68]
.text:004053B3                 mov     dword ptr [ebx+ebp*4], offset unk_410250
.text:004053BA                 mov     dword ptr [edx+ebp*4], offset unk_410250
.text:004053C1                 mov     dword ptr [edi+ebp*4], offset unk_410250
.text:004053C8                 inc     ebp
.text:004053C9                 or      dword ptr [eax], 3
.text:004053CC                 and     byte ptr [eax], 0E3h
.text:004053CF                 add     eax, 4
.text:004053D2                 cmp     ebp, [esp+0BCh+var_5C]
.text:004053D6                 jb      short loc_40539C
.text:004053D8
.text:004053D8 loc_4053D8:                             ; CODE XREF: sub_405260+133↑j
.text:004053D8                 mov     eax, [esp+0BCh+arg_10]
.text:004053DF                 test    eax, eax
.text:004053E1                 jnz     short loc_40541C
.text:004053E3                 mov     ebp, [esp+0BCh+arg_4]
.text:004053EA                 test    ebp, ebp
.text:004053EC                 jz      short loc_40541C
.text:004053EE                 mov     ebx, [esp+0BCh+arg_4]
.text:004053F5                 xor     edx, edx
.text:004053F7                 xor     edi, edi
.text:004053F9                 mov     [esp+0BCh+arg_4], edx
.text:00405400                 mov     ecx, [esp+0BCh+arg_8]
.text:00405407                 mov     [esp+0BCh+arg_8], edi
.text:0040540E                 mov     [esp+0BCh+arg_C], ebx
.text:00405415                 mov     [esp+0BCh+arg_10], ecx
.text:0040541C
.text:0040541C loc_40541C:                             ; CODE XREF: sub_405260+181↑j
.text:0040541C                                         ; sub_405260+18C↑j
.text:0040541C                 mov     ecx, [esp+0BCh+arg_4]
.text:00405423                 mov     eax, [esp+0BCh+arg_8]
.text:0040542A                 mov     ebp, [esp+0BCh+arg_C]
.text:00405431                 mov     edi, [esp+0BCh+arg_10]
.text:00405438                 add     ecx, eax
.text:0040543A                 mov     [esp+0BCh+var_34], ecx
.text:00405441                 add     ebp, edi
.text:00405443                 cmp     esi, [esp+0BCh+arg_8]
.text:0040544A                 mov     [esp+0BCh+var_38], ebp
.text:00405451                 jg      loc_4074D2
.text:00405457                 mov     edx, [esp+0BCh+arg_4]
.text:0040545E                 add     esi, edx
.text:00405460                 mov     [esp+0BCh+var_3C], esi
.text:00405467                 mov     esi, [esp+0BCh+arg_C]
.text:0040546E
.text:0040546E loc_40546E:                             ; CODE XREF: sub_405260+2292↓j
.text:0040546E                 mov     [esp+0BCh+var_40], esi
.text:00405472                 mov     ecx, [esp+0BCh+arg_8]
.text:00405479                 test    ecx, ecx
.text:0040547B                 jle     loc_4074A8
.text:00405481                 mov     eax, [esp+0BCh+arg_8]
.text:00405488                 cmp     [esp+0BCh+arg_14], eax
.text:0040548F                 jg      loc_4074A8
.text:00405495                 mov     edx, [esp+0BCh+arg_4]
.text:0040549C                 mov     ebx, [esp+0BCh+arg_14]
.text:004054A3                 mov     esi, [esp+0BCh+var_3C]
.text:004054AA                 add     edx, ebx
.text:004054AC                 mov     [esp+0BCh+var_44], edx
.text:004054B0                 mov     [esp+0BCh+var_48], esi
.text:004054B4
.text:004054B4 loc_4054B4:                             ; CODE XREF: sub_405260+469↓j
.text:004054B4                                         ; sub_405260+47A↓j ...
.text:004054B4                 mov     edx, [esp+0BCh+var_50]
.text:004054B8                 mov     eax, offset loc_4054D9
.text:004054BD                 cmp     [esp+0BCh+var_4C], edx
.text:004054C1                 jz      short loc_4054D7
.text:004054C3
.text:004054C3 loc_4054C3:                             ; CODE XREF: sub_405260+838↓j
.text:004054C3                 mov     ebp, [esp+0BCh+var_4C]
.text:004054C7                 movzx   ebx, byte ptr [ebp+0]
.text:004054CB                 inc     ebp
.text:004054CC                 mov     [esp+0BCh+var_4C], ebp
.text:004054D0
.text:004054D0 loc_4054D0:                             ; CODE XREF: sub_405260+1CA0↓j
.text:004054D0                 mov     eax, ds:jpt_4054D7[ebx*4] ; switch 6 cases
.text:004054D7
.text:004054D7 loc_4054D7:                             ; CODE XREF: sub_405260+261↑j
.text:004054D7                                         ; sub_405260+83E↓j ...
.text:004054D7                 jmp     eax             ; switch jump
.text:004054D9 ; ---------------------------------------------------------------------------
.text:004054D9
.text:004054D9 loc_4054D9:                             ; DATA XREF: sub_405260+258↑o
.text:004054D9                                         ; sub_405260+82F↓o ...
.text:004054D9                 mov     eax, [esp+0BCh+var_40]
.text:004054DD                 cmp     [esp+0BCh+var_44], eax
.text:004054E1                 jz      loc_405769
.text:004054E7                 mov     edi, [esp+0BCh+arg_8]
.text:004054EE                 xor     edx, edx
.text:004054F0                 test    edi, edi
.text:004054F2                 jz      short loc_40550C
.text:004054F4                 mov     eax, [esp+0BCh+var_88]
.text:004054F8                 cmp     [esp+0BCh+arg_4], eax
.text:004054FF                 ja      short loc_40550C
.text:00405501                 mov     esi, [esp+0BCh+var_34]
.text:00405508                 cmp     eax, esi
.text:0040550A                 jbe     short loc_40550E
.text:0040550C
.text:0040550C loc_40550C:                             ; CODE XREF: sub_405260+292↑j
.text:0040550C                                         ; sub_405260+29F↑j
.text:0040550C                 mov     dl, 1
.text:0040550E
.text:0040550E loc_40550E:                             ; CODE XREF: sub_405260+2AA↑j
.text:0040550E                 mov     ebp, [esp+0BCh+var_3C]
.text:00405515                 cmp     [esp+0BCh+var_48], ebp
.text:00405519                 setz    cl
.text:0040551C                 cmp     dl, cl
.text:0040551E                 jz      loc_405A78
.text:00405524                 mov     edx, [esp+0BCh+var_88]
.text:00405528                 cmp     [esp+0BCh+var_44], edx
.text:0040552C                 setnbe  al
.text:0040552F
.text:0040552F loc_40552F:                             ; CODE XREF: sub_405260+826↓j
.text:0040552F                 mov     esi, [esp+0BCh+var_24]
.text:00405536                 test    esi, esi
.text:00405538                 jz      loc_405A5F
.text:0040553E                 mov     ecx, [esp+0BCh+var_7C]
.text:00405542                 test    ecx, ecx
.text:00405544                 jz      short loc_40554A
.text:00405546                 test    al, al
.text:00405548                 jz      short loc_405590
.text:0040554A
.text:0040554A loc_40554A:                             ; CODE XREF: sub_405260+2E4↑j
.text:0040554A                 mov     [esp+0BCh+var_7C], 1
.text:00405552                 mov     eax, [esp+0BCh+var_5C]
.text:00405556                 mov     ebp, 1
.text:0040555B                 mov     edi, [esp+0BCh+var_44]
.text:0040555F                 cmp     ebp, eax
.text:00405561                 mov     [esp+0BCh+var_88], edi
.text:00405565                 jnb     short loc_405590
.text:00405567
.text:00405567 loc_405567:                             ; CODE XREF: sub_405260+328↓j
.text:00405567                 mov     edx, [esp+0BCh+var_68]
.text:0040556B                 mov     ecx, [esp+0BCh+var_80]
.text:0040556F                 mov     eax, [esp+0BCh+var_6C]
.text:00405573                 mov     edi, [edx+ebp*4]
.text:00405576                 mov     edx, [esp+0BCh+var_84]
.text:0040557A                 mov     [ecx+ebp*4], edi
.text:0040557D                 mov     ebx, [eax+ebp*4]
.text:00405580                 mov     [edx+ebp*4], ebx
.text:00405583                 inc     ebp
.text:00405584                 cmp     ebp, [esp+0BCh+var_5C]
.text:00405588                 jb      short loc_405567
.text:0040558A                 lea     esi, [esi+0]
.text:00405590
.text:00405590 loc_405590:                             ; CODE XREF: sub_405260+2E8↑j
.text:00405590                                         ; sub_405260+305↑j ...
.text:00405590                 test    esi, esi
.text:00405592                 mov     eax, esi
.text:00405594                 jz      loc_4056FE
.text:0040559A                 mov     ebx, [esp+0BCh+Src]
.text:004055A1                 dec     esi
.text:004055A2                 mov     [esp+0BCh+var_24], esi
.text:004055A9                 mov     esi, [ebx+esi*4]
.text:004055AC                 test    esi, esi
.text:004055AE                 jz      short loc_4055B4
.text:004055B0                 mov     [esp+0BCh+var_44], esi
.text:004055B4
.text:004055B4 loc_4055B4:                             ; CODE XREF: sub_405260+34E↑j
.text:004055B4                 lea     ecx, [eax-2]
.text:004055B7                 lea     edx, [eax-3]
.text:004055BA                 mov     [esp+0BCh+var_24], ecx
.text:004055C1                 mov     ebp, [ebx+ecx*4]
.text:004055C4                 lea     ecx, [eax-4]
.text:004055C7                 mov     [esp+0BCh+var_24], edx
.text:004055CE                 mov     [esp+0BCh+var_4C], ebp
.text:004055D2                 mov     edi, [ebx+edx*4]
.text:004055D5                 mov     [esp+0BCh+var_24], ecx
.text:004055DC                 mov     [esp+0BCh+var_64], edi
.text:004055E0                 mov     ebp, [ebx+ecx*4]
.text:004055E3                 mov     ecx, [esp+0BCh+var_64]
.text:004055E7                 mov     [esp+0BCh+var_60], ebp
.text:004055EB                 cmp     ecx, ebp
.text:004055ED                 jb      short loc_405649
.text:004055EF                 nop
.text:004055F0
.text:004055F0 loc_4055F0:                             ; CODE XREF: sub_405260+3E7↓j
.text:004055F0                 mov     eax, [esp+0BCh+var_24]
.text:004055F7                 mov     ebp, [esp+0BCh+var_78]
.text:004055FB                 dec     eax
.text:004055FC                 mov     [esp+0BCh+var_24], eax
.text:00405603                 mov     edi, [ebx+eax*4]
.text:00405606                 mov     [ebp+ecx*4+0], edi
.text:0040560A                 mov     ebp, [esp+0BCh+var_24]
.text:00405611                 mov     esi, [esp+0BCh+Src]
.text:00405618                 lea     edx, [ebp-1]
.text:0040561B                 sub     ebp, 2
.text:0040561E                 mov     ebx, esi
.text:00405620                 mov     [esp+0BCh+var_24], edx
.text:00405627                 mov     edi, [esi+edx*4]
.text:0040562A                 mov     edx, [esp+0BCh+var_6C]
.text:0040562E                 mov     [esp+0BCh+var_24], ebp
.text:00405635                 mov     [edx+ecx*4], edi
.text:00405638                 mov     edi, [esi+ebp*4]
.text:0040563B                 mov     esi, [esp+0BCh+var_68]
.text:0040563F                 mov     [esi+ecx*4], edi
.text:00405642                 dec     ecx
.text:00405643                 cmp     ecx, [esp+0BCh+var_60]
.text:00405647                 jnb     short loc_4055F0
.text:00405649
.text:00405649 loc_405649:                             ; CODE XREF: sub_405260+38D↑j
.text:00405649                 mov     [esp+0BCh+var_8C], 0
.text:00405651                 mov     ebx, [esp+0BCh+var_4C]
.text:00405655                 test    ebx, ebx
.text:00405657                 jz      short loc_4056B2
.text:00405659                 mov     edx, [esp+0BCh+var_50]
.text:0040565D                 cmp     [esp+0BCh+var_4C], edx
.text:00405661                 jnb     short loc_4056BE
.text:00405663                 mov     ecx, [esp+0BCh+var_4C]
.text:00405667                 xor     edx, edx
.text:00405669                 movzx   eax, byte ptr [ecx]
.text:0040566C                 cmp     eax, 12h
.text:0040566F                 ja      loc_4056F5
.text:00405675                 cmp     eax, 11h
.text:00405678                 jnb     short loc_405680
.text:0040567A                 cmp     eax, 0Dh
.text:0040567D                 jnz     short loc_4056BE
.text:0040567F                 nop
.text:00405680
.text:00405680 loc_405680:                             ; CODE XREF: sub_405260+418↑j
.text:00405680                                         ; sub_405260+49C↓j
.text:00405680                 mov     ebp, [esp+0BCh+var_4C]
.text:00405684                 mov     ecx, [esp+0BCh+var_4C]
.text:00405688                 inc     ebp
.text:00405689                 mov     [esp+0BCh+var_30], ebp
.text:00405690                 movsx   esi, byte ptr [ebp+1]
.text:00405694                 movzx   eax, byte ptr [ecx+1]
.text:00405698                 shl     esi, 8
.text:0040569B                 lea     edi, [esi+eax]
.text:0040569E                 lea     eax, [edi+ecx+3]
.text:004056A2                 test    dl, dl
.text:004056A4                 mov     [esp+0BCh+var_30], eax
.text:004056AB                 jz      short loc_4056F0
.text:004056AD                 cmp     byte ptr [eax], 15h
.text:004056B0
.text:004056B0 loc_4056B0:                             ; CODE XREF: sub_405260+493↓j
.text:004056B0                 jnz     short loc_4056BE
.text:004056B2
.text:004056B2 loc_4056B2:                             ; CODE XREF: sub_405260+3F7↑j
.text:004056B2                                         ; sub_405260+889↓j ...
.text:004056B2                 mov     esi, [esp+0BCh+var_24]
.text:004056B9                 jmp     loc_405590
.text:004056BE ; ---------------------------------------------------------------------------
.text:004056BE
.text:004056BE loc_4056BE:                             ; CODE XREF: sub_405260+401↑j
.text:004056BE                                         ; sub_405260+41D↑j ...
.text:004056BE                 mov     ebx, [esp+0BCh+arg_4]
.text:004056C5                 cmp     [esp+0BCh+var_44], ebx
.text:004056C9                 jb      loc_4054B4
.text:004056CF                 mov     edi, [esp+0BCh+var_34]
.text:004056D6                 cmp     [esp+0BCh+var_44], edi
.text:004056DA                 ja      loc_4054B4
.text:004056E0                 mov     edx, [esp+0BCh+var_3C]
.text:004056E7                 mov     [esp+0BCh+var_48], edx
.text:004056EB                 jmp     loc_4054B4
.text:004056F0 ; ---------------------------------------------------------------------------
.text:004056F0
.text:004056F0 loc_4056F0:                             ; CODE XREF: sub_405260+44B↑j
.text:004056F0                 cmp     byte ptr [eax], 0Fh
.text:004056F3                 jmp     short loc_4056B0
.text:004056F5 ; ---------------------------------------------------------------------------
.text:004056F5
.text:004056F5 loc_4056F5:                             ; CODE XREF: sub_405260+40F↑j
.text:004056F5                 cmp     eax, 16h
.text:004056F8                 jnz     short loc_4056BE
.text:004056FA                 mov     dl, 1
.text:004056FC                 jmp     short loc_405680
.text:004056FE ; ---------------------------------------------------------------------------
.text:004056FE
.text:004056FE loc_4056FE:                             ; CODE XREF: sub_405260+334↑j
.text:004056FE                 mov     ecx, [esp+0BCh+var_7C]
.text:00405702                 test    ecx, ecx
.text:00405704                 jz      loc_405A55
.text:0040570A
.text:0040570A loc_40570A:                             ; CODE XREF: sub_405260+813↓j
.text:0040570A                 mov     esi, [esp+0BCh+var_88]
.text:0040570E                 mov     ebx, [esp+0BCh+arg_4]
.text:00405715                 mov     [esp+0BCh+var_44], esi
.text:00405719                 cmp     esi, ebx
.text:0040571B                 jb      short loc_405733
.text:0040571D                 mov     eax, [esp+0BCh+var_34]
.text:00405724                 mov     ecx, [esp+0BCh+var_3C]
.text:0040572B                 cmp     esi, eax
.text:0040572D                 mov     [esp+0BCh+var_48], ecx
.text:00405731                 jbe     short loc_40573B
.text:00405733
.text:00405733 loc_405733:                             ; CODE XREF: sub_405260+4BB↑j
.text:00405733                 mov     esi, [esp+0BCh+var_40]
.text:00405737                 mov     [esp+0BCh+var_48], esi
.text:0040573B
.text:0040573B loc_40573B:                             ; CODE XREF: sub_405260+4D1↑j
.text:0040573B                 mov     ebp, 1
.text:00405740                 cmp     ebp, [esp+0BCh+var_5C]
.text:00405744                 jnb     short loc_405769
.text:00405746
.text:00405746 loc_405746:                             ; CODE XREF: sub_405260+507↓j
.text:00405746                 mov     eax, [esp+0BCh+var_80]
.text:0040574A                 mov     ecx, [esp+0BCh+var_68]
.text:0040574E                 mov     ebx, [esp+0BCh+var_84]
.text:00405752                 mov     edi, [eax+ebp*4]
.text:00405755                 mov     [ecx+ebp*4], edi
.text:00405758                 mov     edx, [ebx+ebp*4]
.text:0040575B                 mov     edi, [esp+0BCh+var_6C]
.text:0040575F                 mov     [edi+ebp*4], edx
.text:00405762                 inc     ebp
.text:00405763                 cmp     ebp, [esp+0BCh+var_5C]
.text:00405767                 jb      short loc_405746
.text:00405769
.text:00405769 loc_405769:                             ; CODE XREF: sub_405260+281↑j
.text:00405769                                         ; sub_405260+4E4↑j ...
.text:00405769                 mov     ebp, [esp+0BCh+arg_18]
.text:00405770                 test    ebp, ebp
.text:00405772                 jz      loc_405982
.text:00405778                 mov     edx, [esp+0BCh+arg_0]
.text:0040577F                 movzx   eax, byte ptr [edx+1Ch]
.text:00405783                 test    al, 10h
.text:00405785                 jnz     loc_405982
.text:0040578B                 shr     al, 1
.text:0040578D                 and     eax, 3
.text:00405790                 jnz     loc_4059E8
.text:00405796                 mov     eax, [esp+0BCh+var_5C]
.text:0040579A                 inc     eax
.text:0040579B                 cmp     eax, 1Eh
.text:0040579E                 jnb     short loc_4057A5
.text:004057A0                 mov     eax, 1Eh
.text:004057A5
.text:004057A5 loc_4057A5:                             ; CODE XREF: sub_405260+53E↑j
.text:004057A5                 mov     ebp, [esp+0BCh+arg_18]
.text:004057AC                 mov     [ebp+0], eax
.text:004057AF                 shl     eax, 2
.text:004057B2                 mov     [esp+0BCh+Size], eax ; Size
.text:004057B5                 call    malloc
.text:004057BA                 mov     edi, [esp+0BCh+arg_18]
.text:004057C1                 mov     ebx, [edi]
.text:004057C3                 mov     [edi+4], eax
.text:004057C6                 shl     ebx, 2
.text:004057C9                 mov     [esp+0BCh+Size], ebx ; Size
.text:004057CC                 call    malloc
.text:004057D1                 mov     ecx, [esp+0BCh+arg_18]
.text:004057D8                 mov     esi, [ecx+4]
.text:004057DB                 mov     [ecx+8], eax
.text:004057DE                 test    esi, esi
.text:004057E0                 jz      loc_4059E1
.text:004057E6                 test    eax, eax
.text:004057E8                 jz      loc_4059E1
.text:004057EE                 mov     edx, [esp+0BCh+arg_0]
.text:004057F5                 movzx   ecx, byte ptr [edx+1Ch]
.text:004057F9                 and     cl, 0F9h
.text:004057FC                 or      cl, 2
.text:004057FF                 mov     [edx+1Ch], cl
.text:00405802
.text:00405802 loc_405802:                             ; CODE XREF: sub_405260+7ED↓j
.text:00405802                 mov     ecx, [esp+0BCh+arg_18]
.text:00405809                 mov     edx, [ecx]
.text:0040580B
.text:0040580B loc_40580B:                             ; CODE XREF: sub_405260+794↓j
.text:0040580B                                         ; sub_405260+7A9↓j
.text:0040580B                 test    edx, edx
.text:0040580D                 jz      short loc_405858
.text:0040580F                 mov     esi, [esp+0BCh+arg_18]
.text:00405816                 mov     edi, [esp+0BCh+var_3C]
.text:0040581D                 mov     edx, [esp+0BCh+arg_14]
.text:00405824                 cmp     [esp+0BCh+var_48], edi
.text:00405828                 mov     ebp, [esi+4]
.text:0040582B                 mov     [ebp+0], edx
.text:0040582E                 mov     edx, [esi+8]
.text:00405831                 jz      loc_4059CF
.text:00405837                 mov     eax, [esp+0BCh+var_44]
.text:0040583B                 mov     esi, [esp+0BCh+arg_C]
.text:00405842                 mov     ecx, [esp+0BCh+arg_8]
.text:00405849                 sub     eax, esi
.text:0040584B                 add     eax, ecx
.text:0040584D
.text:0040584D loc_40584D:                             ; CODE XREF: sub_405260+77C↓j
.text:0040584D                 mov     [edx], eax
.text:0040584F                 mov     edi, [esp+0BCh+arg_18]
.text:00405856                 mov     edx, [edi]
.text:00405858
.text:00405858 loc_405858:                             ; CODE XREF: sub_405260+5AD↑j
.text:00405858                 mov     ebp, 1
.text:0040585D
.text:0040585D loc_40585D:                             ; CODE XREF: sub_405260+6A8↓j
.text:0040585D                 cmp     edx, [esp+0BCh+var_5C]
.text:00405861                 mov     eax, edx
.text:00405863                 jbe     short loc_405869
.text:00405865                 mov     eax, [esp+0BCh+var_5C]
.text:00405869
.text:00405869 loc_405869:                             ; CODE XREF: sub_405260+603↑j
.text:00405869                 cmp     ebp, eax
.text:0040586B                 jnb     loc_405953
.text:00405871                 mov     ebx, [esp+0BCh+var_68]
.text:00405875                 mov     eax, [ebx+ebp*4]
.text:00405878                 cmp     eax, offset unk_410250
.text:0040587D                 jz      loc_405936
.text:00405883                 mov     esi, [esp+0BCh+var_6C]
.text:00405887                 mov     edx, [esi+ebp*4]
.text:0040588A                 cmp     edx, offset unk_410250
.text:00405890                 jz      loc_405936
.text:00405896                 mov     edi, [esp+0BCh+arg_8]
.text:0040589D                 mov     ebx, [esp+0BCh+arg_18]
.text:004058A4                 test    edi, edi
.text:004058A6                 mov     ecx, [ebx+4]
.text:004058A9                 jz      short loc_405922
.text:004058AB                 cmp     [esp+0BCh+arg_4], eax
.text:004058B2                 ja      short loc_405922
.text:004058B4                 cmp     eax, [esp+0BCh+var_34]
.text:004058BB                 ja      short loc_405922
.text:004058BD                 mov     esi, [esp+0BCh+arg_4]
.text:004058C4                 sub     eax, esi
.text:004058C6
.text:004058C6 loc_4058C6:                             ; CODE XREF: sub_405260+6D4↓j
.text:004058C6                 mov     [ecx+ebp*4], eax
.text:004058C9                 mov     esi, [esp+0BCh+arg_18]
.text:004058D0                 mov     eax, [esp+0BCh+arg_8]
.text:004058D7                 mov     ecx, [esi+8]
.text:004058DA                 test    eax, eax
.text:004058DC                 jz      short loc_40590D
.text:004058DE                 cmp     [esp+0BCh+arg_4], edx
.text:004058E5                 ja      short loc_40590D
.text:004058E7                 cmp     edx, [esp+0BCh+var_34]
.text:004058EE                 ja      short loc_40590D
.text:004058F0                 mov     eax, edx
.text:004058F2                 mov     edx, [esp+0BCh+arg_4]
.text:004058F9                 sub     eax, edx
.text:004058FB
.text:004058FB loc_4058FB:                             ; CODE XREF: sub_405260+6C0↓j
.text:004058FB                 mov     [ecx+ebp*4], eax
.text:004058FE
.text:004058FE loc_4058FE:                             ; CODE XREF: sub_405260+6F1↓j
.text:004058FE                 mov     ecx, [esp+0BCh+arg_18]
.text:00405905                 inc     ebp
.text:00405906                 mov     edx, [ecx]
.text:00405908                 jmp     loc_40585D
.text:0040590D ; ---------------------------------------------------------------------------
.text:0040590D
.text:0040590D loc_40590D:                             ; CODE XREF: sub_405260+67C↑j
.text:0040590D                                         ; sub_405260+685↑j ...
.text:0040590D                 mov     eax, [esp+0BCh+arg_C]
.text:00405914                 mov     edi, [esp+0BCh+arg_8]
.text:0040591B                 sub     edx, eax
.text:0040591D                 lea     eax, [edi+edx]
.text:00405920                 jmp     short loc_4058FB
.text:00405922 ; ---------------------------------------------------------------------------
.text:00405922
.text:00405922 loc_405922:                             ; CODE XREF: sub_405260+649↑j
.text:00405922                                         ; sub_405260+652↑j ...
.text:00405922                 mov     ebx, [esp+0BCh+arg_C]
.text:00405929                 mov     edi, [esp+0BCh+arg_8]
.text:00405930                 sub     eax, ebx
.text:00405932                 add     eax, edi
.text:00405934                 jmp     short loc_4058C6
.text:00405936 ; ---------------------------------------------------------------------------
.text:00405936
.text:00405936 loc_405936:                             ; CODE XREF: sub_405260+61D↑j
.text:00405936                                         ; sub_405260+630↑j
.text:00405936                 mov     eax, [esp+0BCh+arg_18]
.text:0040593D                 mov     ecx, [eax+4]
.text:00405940                 mov     edx, [eax+8]
.text:00405943                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:0040594A                 mov     dword ptr [ecx+ebp*4], 0FFFFFFFFh
.text:00405951                 jmp     short loc_4058FE
.text:00405953 ; ---------------------------------------------------------------------------
.text:00405953
.text:00405953 loc_405953:                             ; CODE XREF: sub_405260+60B↑j
.text:00405953                 mov     ebp, [esp+0BCh+var_5C]
.text:00405957                 cmp     ebp, edx
.text:00405959                 jnb     short loc_405982
.text:0040595B                 mov     esi, [esp+0BCh+arg_18]
.text:00405962                 mov     edx, [esi+4]
.text:00405965                 mov     eax, [esi+8]
.text:00405968
.text:00405968 loc_405968:                             ; CODE XREF: sub_405260+720↓j
.text:00405968                 mov     dword ptr [eax+ebp*4], 0FFFFFFFFh
.text:0040596F                 mov     edi, [esp+0BCh+arg_18]
.text:00405976                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:0040597D                 inc     ebp
.text:0040597E                 cmp     ebp, [edi]
.text:00405980                 jb      short loc_405968
.text:00405982
.text:00405982 loc_405982:                             ; CODE XREF: sub_405260+512↑j
.text:00405982                                         ; sub_405260+525↑j ...
.text:00405982                 mov     eax, [esp+0BCh+var_44]
.text:00405986                 mov     ecx, [esp+0BCh+arg_14]
.text:0040598D                 mov     ebp, [esp+0BCh+var_3C]
.text:00405994                 sub     eax, ecx
.text:00405996                 cmp     [esp+0BCh+var_48], ebp
.text:0040599A                 jz      short loc_4059C2
.text:0040599C                 mov     ebx, [esp+0BCh+arg_8]
.text:004059A3                 mov     ebp, eax
.text:004059A5                 sub     [esp+0BCh+arg_C], ebx
.text:004059AC                 mov     edx, [esp+0BCh+arg_C]
.text:004059B3                 sub     ebp, edx
.text:004059B5
.text:004059B5 loc_4059B5:                             ; CODE XREF: sub_405260+76D↓j
.text:004059B5                 mov     eax, ebp
.text:004059B7
.text:004059B7 loc_4059B7:                             ; CODE XREF: sub_405260+89↑j
.text:004059B7                                         ; sub_405260+786↓j ...
.text:004059B7                 add     esp, 0ACh
.text:004059BD                 pop     ebx
.text:004059BE                 pop     esi
.text:004059BF                 pop     edi
.text:004059C0                 pop     ebp
.text:004059C1                 retn
.text:004059C2 ; ---------------------------------------------------------------------------
.text:004059C2
.text:004059C2 loc_4059C2:                             ; CODE XREF: sub_405260+73A↑j
.text:004059C2                 mov     esi, [esp+0BCh+arg_4]
.text:004059C9                 mov     ebp, eax
.text:004059CB                 sub     ebp, esi
.text:004059CD                 jmp     short loc_4059B5
.text:004059CF ; ---------------------------------------------------------------------------
.text:004059CF
.text:004059CF loc_4059CF:                             ; CODE XREF: sub_405260+5D1↑j
.text:004059CF                 mov     eax, [esp+0BCh+var_44]
.text:004059D3                 mov     ebx, [esp+0BCh+arg_4]
.text:004059DA                 sub     eax, ebx
.text:004059DC                 jmp     loc_40584D
.text:004059E1 ; ---------------------------------------------------------------------------
.text:004059E1
.text:004059E1 loc_4059E1:                             ; CODE XREF: sub_405260+580↑j
.text:004059E1                                         ; sub_405260+588↑j ...
.text:004059E1                 mov     eax, 0FFFFFFFEh
.text:004059E6                 jmp     short loc_4059B7
.text:004059E8 ; ---------------------------------------------------------------------------
.text:004059E8
.text:004059E8 loc_4059E8:                             ; CODE XREF: sub_405260+530↑j
.text:004059E8                 dec     eax
.text:004059E9                 jz      short loc_4059F9
.text:004059EB                 mov     eax, [esp+0BCh+arg_18]
.text:004059F2                 mov     edx, [eax]
.text:004059F4                 jmp     loc_40580B
.text:004059F9 ; ---------------------------------------------------------------------------
.text:004059F9
.text:004059F9 loc_4059F9:                             ; CODE XREF: sub_405260+789↑j
.text:004059F9                 mov     ecx, [esp+0BCh+arg_18]
.text:00405A00                 mov     eax, [esp+0BCh+var_5C]
.text:00405A04                 mov     edx, [ecx]
.text:00405A06                 inc     eax
.text:00405A07                 cmp     edx, eax
.text:00405A09                 jnb     loc_40580B
.text:00405A0F                 mov     [ecx], eax
.text:00405A11                 shl     eax, 2
.text:00405A14                 mov     [esp+0BCh+var_B8], eax ; Size
.text:00405A18                 mov     edx, [ecx+4]
.text:00405A1B                 mov     [esp+0BCh+Size], edx ; Block
.text:00405A1E                 call    realloc
.text:00405A23                 mov     edi, [esp+0BCh+arg_18]
.text:00405A2A                 mov     ebp, [edi]
.text:00405A2C                 mov     [edi+4], eax
.text:00405A2F                 shl     ebp, 2
.text:00405A32                 mov     [esp+0BCh+var_B8], ebp ; Size
.text:00405A36                 mov     ebx, [edi+8]
.text:00405A39                 mov     [esp+0BCh+Size], ebx ; Block
.text:00405A3C                 call    realloc
.text:00405A41                 mov     [edi+8], eax
.text:00405A44                 mov     esi, [edi+4]
.text:00405A47                 test    esi, esi
.text:00405A49                 jz      short loc_4059E1
.text:00405A4B                 test    eax, eax
.text:00405A4D                 jnz     loc_405802
.text:00405A53                 jmp     short loc_4059E1
.text:00405A55 ; ---------------------------------------------------------------------------
.text:00405A55
.text:00405A55 loc_405A55:                             ; CODE XREF: sub_405260+107↑j
.text:00405A55                                         ; sub_405260+124↑j ...
.text:00405A55                 mov     eax, 0FFFFFFFFh
.text:00405A5A                 jmp     loc_4059B7
.text:00405A5F ; ---------------------------------------------------------------------------
.text:00405A5F
.text:00405A5F loc_405A5F:                             ; CODE XREF: sub_405260+2D8↑j
.text:00405A5F                 mov     ebp, [esp+0BCh+var_7C]
.text:00405A63                 test    ebp, ebp
.text:00405A65                 jz      loc_405769
.text:00405A6B                 test    al, al
.text:00405A6D                 jnz     loc_405769
.text:00405A73                 jmp     loc_40570A
.text:00405A78 ; ---------------------------------------------------------------------------
.text:00405A78
.text:00405A78 loc_405A78:                             ; CODE XREF: sub_405260+2BE↑j
.text:00405A78                 mov     ebx, [esp+0BCh+var_3C]
.text:00405A7F                 cmp     [esp+0BCh+var_48], ebx
.text:00405A83                 setnz   al
.text:00405A86                 jmp     loc_40552F
.text:00405A8B ; ---------------------------------------------------------------------------
.text:00405A8B
.text:00405A8B loc_405A8B:                             ; CODE XREF: sub_405260:loc_4054D7↑j
.text:00405A8B                                         ; sub_405260+898↓j ...
.text:00405A8B                 mov     edx, [esp+0BCh+var_50] ; jumptable 004054D7 case 0
.text:00405A8B                                         ; jumptable 00405E56 case 0
.text:00405A8B                                         ; jumptable 00405F28 case 0
.text:00405A8F                 mov     eax, offset loc_4054D9
.text:00405A94                 cmp     [esp+0BCh+var_4C], edx
.text:00405A98                 jnz     loc_4054C3
.text:00405A9E                 jmp     loc_4054D7
.text:00405AA3 ; ---------------------------------------------------------------------------
.text:00405AA3
.text:00405AA3 loc_405AA3:                             ; CODE XREF: sub_405260:loc_4054D7↑j
.text:00405AA3                                         ; sub_405260+BF6↓j ...
.text:00405AA3                 jmp     loc_405769      ; jumptable 004054D7 case 1
.text:00405AA3                                         ; jumptable 00405E56 case 1
.text:00405AA3                                         ; jumptable 00405F28 case 1
.text:00405AA8 ; ---------------------------------------------------------------------------
.text:00405AA8
.text:00405AA8 loc_405AA8:                             ; CODE XREF: sub_405260:loc_4054D7↑j
.text:00405AA8                                         ; sub_405260+BF6↓j ...
.text:00405AA8                 mov     eax, [esp+0BCh+var_4C] ; jumptable 004054D7 case 2
.text:00405AA8                                         ; jumptable 00405E56 case 2
.text:00405AA8                                         ; jumptable 00405F28 case 2
.text:00405AAC                 mov     edi, [esp+0BCh+var_58]
.text:00405AB0                 movzx   ebp, byte ptr [eax]
.text:00405AB3                 inc     eax
.text:00405AB4                 test    edi, edi
.text:00405AB6                 mov     [esp+0BCh+var_4C], eax
.text:00405ABA                 jz      loc_405B49
.text:00405AC0
.text:00405AC0 loc_405AC0:                             ; CODE XREF: sub_405260+890↓j
.text:00405AC0                 mov     ecx, [esp+0BCh+var_48]
.text:00405AC4                 cmp     [esp+0BCh+var_44], ecx
.text:00405AC8                 jz      short loc_405B26
.text:00405ACA
.text:00405ACA loc_405ACA:                             ; CODE XREF: sub_405260+8E7↓j
.text:00405ACA                 mov     ecx, [esp+0BCh+var_44]
.text:00405ACE                 mov     ebx, [esp+0BCh+var_4C]
.text:00405AD2                 mov     edx, [esp+0BCh+var_58]
.text:00405AD6                 movzx   edi, byte ptr [ecx]
.text:00405AD9                 inc     ecx
.text:00405ADA                 movzx   eax, byte ptr [ebx]
.text:00405ADD                 inc     ebx
.text:00405ADE                 mov     [esp+0BCh+var_4C], ebx
.text:00405AE2                 mov     [esp+0BCh+var_44], ecx
.text:00405AE6                 cmp     [edi+edx], al
.text:00405AE9                 jnz     loc_4056B2
.text:00405AEF                 dec     ebp
.text:00405AF0                 jnz     short loc_405AC0
.text:00405AF2
.text:00405AF2 loc_405AF2:                             ; CODE XREF: sub_405260+916↓j
.text:00405AF2                 mov     ebp, [esp+0BCh+var_8C]
.text:00405AF6                 test    ebp, ebp
.text:00405AF8                 jnz     short loc_405A8B ; jumptable 004054D7 case 0
.text:00405AF8                                         ; jumptable 00405E56 case 0
.text:00405AF8                                         ; jumptable 00405F28 case 0
.text:00405AFA                 mov     [esp+0BCh+var_8C], 1
.text:00405B02                 mov     eax, [esp+0BCh+var_60]
.text:00405B06                 mov     edx, [esp+0BCh+var_64]
.text:00405B0A                 cmp     eax, edx
.text:00405B0C                 ja      loc_405A8B      ; jumptable 004054D7 case 0
.text:00405B0C                                         ; jumptable 00405E56 case 0
.text:00405B0C                                         ; jumptable 00405F28 case 0
.text:00405B12
.text:00405B12 loc_405B12:                             ; CODE XREF: sub_405260+8BF↓j
.text:00405B12                 mov     esi, [esp+0BCh+var_78]
.text:00405B16                 or      byte ptr [esi+eax*4], 18h
.text:00405B1A                 inc     eax
.text:00405B1B                 cmp     eax, [esp+0BCh+var_64]
.text:00405B1F                 jbe     short loc_405B12
.text:00405B21                 jmp     loc_405A8B      ; jumptable 004054D7 case 0
.text:00405B21                                         ; jumptable 00405E56 case 0
.text:00405B21                                         ; jumptable 00405F28 case 0
.text:00405B26 ; ---------------------------------------------------------------------------
.text:00405B26
.text:00405B26 loc_405B26:                             ; CODE XREF: sub_405260+868↑j
.text:00405B26                                         ; sub_405260+8E5↓j
.text:00405B26                 mov     edx, [esp+0BCh+var_40]
.text:00405B2A                 cmp     [esp+0BCh+var_48], edx
.text:00405B2E                 jz      loc_4056B2
.text:00405B34                 mov     [esp+0BCh+var_48], edx
.text:00405B38                 mov     ebx, [esp+0BCh+arg_C]
.text:00405B3F                 cmp     ebx, edx
.text:00405B41                 mov     [esp+0BCh+var_44], ebx
.text:00405B45                 jz      short loc_405B26
.text:00405B47                 jmp     short loc_405ACA
.text:00405B49 ; ---------------------------------------------------------------------------
.text:00405B49
.text:00405B49 loc_405B49:                             ; CODE XREF: sub_405260+85A↑j
.text:00405B49                                         ; sub_405260+914↓j
.text:00405B49                 mov     esi, [esp+0BCh+var_48]
.text:00405B4D                 cmp     [esp+0BCh+var_44], esi
.text:00405B51                 jz      short loc_405B80
.text:00405B53
.text:00405B53 loc_405B53:                             ; CODE XREF: sub_405260+941↓j
.text:00405B53                 mov     ebx, [esp+0BCh+var_4C]
.text:00405B57                 mov     eax, [esp+0BCh+var_44]
.text:00405B5B                 movzx   edx, byte ptr [ebx]
.text:00405B5E                 inc     ebx
.text:00405B5F                 mov     [esp+0BCh+var_4C], ebx
.text:00405B63                 movzx   ecx, byte ptr [eax]
.text:00405B66                 inc     eax
.text:00405B67                 mov     [esp+0BCh+var_44], eax
.text:00405B6B                 cmp     cl, dl
.text:00405B6D                 jnz     loc_4056B2
.text:00405B73                 dec     ebp
.text:00405B74                 jnz     short loc_405B49
.text:00405B76                 jmp     loc_405AF2
.text:00405B76 ; ---------------------------------------------------------------------------
.text:00405B7B                 align 10h
.text:00405B80
.text:00405B80 loc_405B80:                             ; CODE XREF: sub_405260+8F1↑j
.text:00405B80                                         ; sub_405260+93F↓j
.text:00405B80                 mov     esi, [esp+0BCh+var_40]
.text:00405B84                 cmp     [esp+0BCh+var_48], esi
.text:00405B88                 jz      loc_4056B2
.text:00405B8E                 mov     [esp+0BCh+var_48], esi
.text:00405B92                 mov     edi, [esp+0BCh+arg_C]
.text:00405B99                 cmp     edi, esi
.text:00405B9B                 mov     [esp+0BCh+var_44], edi
.text:00405B9F                 jz      short loc_405B80
.text:00405BA1                 jmp     short loc_405B53
.text:00405BA3 ; ---------------------------------------------------------------------------
.text:00405BA3
.text:00405BA3 loc_405BA3:                             ; CODE XREF: sub_405260:loc_4054D7↑j
.text:00405BA3                                         ; sub_405260+BF6↓j ...
.text:00405BA3                 mov     edi, [esp+0BCh+var_48] ; jumptable 004054D7 case 3
.text:00405BA3                                         ; jumptable 00405E56 case 3
.text:00405BA3                                         ; jumptable 00405F28 case 3
.text:00405BA7                 cmp     [esp+0BCh+var_44], edi
.text:00405BAB                 jz      loc_407482
.text:00405BB1
.text:00405BB1 loc_405BB1:                             ; CODE XREF: sub_405260+2243↓j
.text:00405BB1                 mov     eax, [esp+0BCh+arg_0]
.text:00405BB8                 test    byte ptr [eax+0Ch], 40h
.text:00405BBC                 jnz     short loc_405BE0
.text:00405BBE                 mov     ebx, [esp+0BCh+var_58]
.text:00405BC2                 test    ebx, ebx
.text:00405BC4                 jz      loc_407476
.text:00405BCA                 mov     esi, [esp+0BCh+var_44]
.text:00405BCE                 mov     edx, [esp+0BCh+var_58]
.text:00405BD2                 movzx   ebp, byte ptr [esi]
.text:00405BD5                 cmp     byte ptr [ebp+edx+0], 0Ah
.text:00405BDA
.text:00405BDA loc_405BDA:                             ; CODE XREF: sub_405260+221D↓j
.text:00405BDA                 jz      loc_4056B2
.text:00405BE0
.text:00405BE0 loc_405BE0:                             ; CODE XREF: sub_405260+95C↑j
.text:00405BE0                 mov     ecx, [esp+0BCh+arg_0]
.text:00405BE7                 cmp     byte ptr [ecx+0Ch], 0
.text:00405BEB                 jns     short loc_405C0F
.text:00405BED                 mov     ebx, [esp+0BCh+var_58]
.text:00405BF1                 test    ebx, ebx
.text:00405BF3                 jz      loc_40746A
.text:00405BF9                 mov     edx, [esp+0BCh+var_44]
.text:00405BFD                 mov     eax, [esp+0BCh+var_58]
.text:00405C01                 movzx   ebp, byte ptr [edx]
.text:00405C04                 cmp     byte ptr [ebp+eax+0], 0
.text:00405C09
.text:00405C09 loc_405C09:                             ; CODE XREF: sub_405260+2211↓j
.text:00405C09                 jz      loc_4056B2
.text:00405C0F
.text:00405C0F loc_405C0F:                             ; CODE XREF: sub_405260+98B↑j
.text:00405C0F                 mov     esi, [esp+0BCh+var_8C]
.text:00405C13                 test    esi, esi
.text:00405C15                 jnz     short loc_405C3A
.text:00405C17                 mov     [esp+0BCh+var_8C], 1
.text:00405C1F                 mov     eax, [esp+0BCh+var_60]
.text:00405C23                 mov     ecx, [esp+0BCh+var_64]
.text:00405C27                 cmp     eax, ecx
.text:00405C29                 ja      short loc_405C3A
.text:00405C2B
.text:00405C2B loc_405C2B:                             ; CODE XREF: sub_405260+9D8↓j
.text:00405C2B                 mov     ebx, [esp+0BCh+var_78]
.text:00405C2F                 or      byte ptr [ebx+eax*4], 18h
.text:00405C33                 inc     eax
.text:00405C34                 cmp     eax, [esp+0BCh+var_64]
.text:00405C38                 jbe     short loc_405C2B
.text:00405C3A
.text:00405C3A loc_405C3A:                             ; CODE XREF: sub_405260+9B5↑j
.text:00405C3A                                         ; sub_405260+9C9↑j
.text:00405C3A                 inc     [esp+0BCh+var_44]
.text:00405C3E
.text:00405C3E loc_405C3E:                             ; CODE XREF: sub_405260:loc_405D04↓j
.text:00405C3E                                         ; sub_405260+B8C↓j ...
.text:00405C3E                 mov     edx, [esp+0BCh+var_50]
.text:00405C42                 mov     eax, offset loc_4054D9
.text:00405C47                 cmp     [esp+0BCh+var_4C], edx
.text:00405C4B                 jz      loc_4054D7
.text:00405C51                 mov     esi, [esp+0BCh+var_4C]
.text:00405C55
.text:00405C55 loc_405C55:                             ; CODE XREF: sub_405260+F64↓j
.text:00405C55                 movzx   edi, byte ptr [esi]
.text:00405C58                 inc     esi
.text:00405C59                 mov     [esp+0BCh+var_4C], esi
.text:00405C5D                 mov     eax, ds:(jpt_405C64-18h)[edi*4] ; switch 2 cases
.text:00405C64                 jmp     eax             ; switch jump
.text:00405C66 ; ---------------------------------------------------------------------------
.text:00405C66
.text:00405C66 loc_405C66:                             ; DATA XREF: .text:00405254↑o
.text:00405C66                 mov     edx, [esp+0BCh+arg_8]
.text:00405C6D                 test    edx, edx
.text:00405C6F                 jz      loc_405D42
.text:00405C75                 mov     edi, [esp+0BCh+arg_4]
.text:00405C7C                 cmp     [esp+0BCh+var_44], edi
.text:00405C80
.text:00405C80 loc_405C80:                             ; CODE XREF: sub_405260+AED↓j
.text:00405C80                 jz      loc_4056B2
.text:00405C86                 mov     ecx, [esp+0BCh+arg_10]
.text:00405C8D                 test    ecx, ecx
.text:00405C8F                 jz      loc_4056B2
.text:00405C95                 mov     ebp, [esp+0BCh+var_38]
.text:00405C9C                 cmp     [esp+0BCh+var_44], ebp
.text:00405CA0                 jz      loc_4056B2
.text:00405CA6                 mov     edx, [esp+0BCh+var_44]
.text:00405CAA                 dec     edx
.text:00405CAB                 cmp     edx, [esp+0BCh+var_34]
.text:00405CB2                 jz      loc_405D36
.text:00405CB8                 mov     ebx, [esp+0BCh+arg_C]
.text:00405CBF                 dec     ebx
.text:00405CC0                 cmp     edx, ebx
.text:00405CC2                 jz      short loc_405D29
.text:00405CC4                 mov     edi, [esp+0BCh+var_44]
.text:00405CC8                 movzx   eax, byte ptr [edi-1]
.text:00405CCC
.text:00405CCC loc_405CCC:                             ; CODE XREF: sub_405260+AD4↓j
.text:00405CCC                                         ; sub_405260+AE0↓j
.text:00405CCC                 cmp     ds:byte_410150[eax], 1
.text:00405CD3                 mov     eax, [esp+0BCh+var_34]
.text:00405CDA                 setz    dl
.text:00405CDD                 cmp     [esp+0BCh+var_44], eax
.text:00405CE1                 jz      short loc_405D1D
.text:00405CE3                 mov     ebp, [esp+0BCh+arg_C]
.text:00405CEA                 dec     ebp
.text:00405CEB                 cmp     [esp+0BCh+var_44], ebp
.text:00405CEF                 jz      short loc_405D10
.text:00405CF1                 mov     esi, [esp+0BCh+var_44]
.text:00405CF5                 movzx   eax, byte ptr [esi]
.text:00405CF8
.text:00405CF8 loc_405CF8:                             ; CODE XREF: sub_405260+ABB↓j
.text:00405CF8                                         ; sub_405260+AC7↓j
.text:00405CF8                 cmp     ds:byte_410150[eax], 1
.text:00405CFF                 setz    cl
.text:00405D02                 cmp     dl, cl
.text:00405D04
.text:00405D04 loc_405D04:                             ; CODE XREF: sub_405260+1A07↓j
.text:00405D04                 jz      loc_405C3E
.text:00405D0A                 jmp     loc_4056B2
.text:00405D0A ; ---------------------------------------------------------------------------
.text:00405D0F                 align 10h
.text:00405D10
.text:00405D10 loc_405D10:                             ; CODE XREF: sub_405260+A8F↑j
.text:00405D10                 mov     ebx, [esp+0BCh+var_34]
.text:00405D17                 movzx   eax, byte ptr [ebx-1]
.text:00405D1B                 jmp     short loc_405CF8
.text:00405D1D ; ---------------------------------------------------------------------------
.text:00405D1D
.text:00405D1D loc_405D1D:                             ; CODE XREF: sub_405260+A81↑j
.text:00405D1D                 mov     ecx, [esp+0BCh+arg_C]
.text:00405D24                 movzx   eax, byte ptr [ecx]
.text:00405D27                 jmp     short loc_405CF8
.text:00405D29 ; ---------------------------------------------------------------------------
.text:00405D29
.text:00405D29 loc_405D29:                             ; CODE XREF: sub_405260+A62↑j
.text:00405D29                 mov     edx, [esp+0BCh+var_34]
.text:00405D30                 movzx   eax, byte ptr [edx-1]
.text:00405D34                 jmp     short loc_405CCC
.text:00405D36 ; ---------------------------------------------------------------------------
.text:00405D36
.text:00405D36 loc_405D36:                             ; CODE XREF: sub_405260+A52↑j
.text:00405D36                 mov     esi, [esp+0BCh+arg_C]
.text:00405D3D                 movzx   eax, byte ptr [esi]
.text:00405D40                 jmp     short loc_405CCC
.text:00405D42 ; ---------------------------------------------------------------------------
.text:00405D42
.text:00405D42 loc_405D42:                             ; CODE XREF: sub_405260+A0F↑j
.text:00405D42                 mov     eax, [esp+0BCh+arg_C]
.text:00405D49                 cmp     [esp+0BCh+var_44], eax
.text:00405D4D                 jmp     loc_405C80
.text:00405D52 ; ---------------------------------------------------------------------------
.text:00405D52
.text:00405D52 loc_405D52:                             ; DATA XREF: .text:00405250↑o
.text:00405D52                 mov     esi, [esp+0BCh+arg_8]
.text:00405D59                 test    esi, esi
.text:00405D5B                 jz      loc_40745A
.text:00405D61                 mov     ebp, [esp+0BCh+arg_4]
.text:00405D68                 cmp     [esp+0BCh+var_44], ebp
.text:00405D6C
.text:00405D6C loc_405D6C:                             ; CODE XREF: sub_405260+2205↓j
.text:00405D6C                 jz      loc_405E30
.text:00405D72                 mov     edi, [esp+0BCh+arg_10]
.text:00405D79                 test    edi, edi
.text:00405D7B                 jz      loc_405E30
.text:00405D81                 mov     edx, [esp+0BCh+var_38]
.text:00405D88                 cmp     [esp+0BCh+var_44], edx
.text:00405D8C                 jz      loc_405E30
.text:00405D92                 mov     edx, [esp+0BCh+var_44]
.text:00405D96                 dec     edx
.text:00405D97                 cmp     edx, [esp+0BCh+var_34]
.text:00405D9E                 jz      short loc_405E1D
.text:00405DA0                 mov     esi, [esp+0BCh+arg_C]
.text:00405DA7                 dec     esi
.text:00405DA8                 cmp     edx, esi
.text:00405DAA                 jz      short loc_405E10
.text:00405DAC                 mov     ebx, [esp+0BCh+var_44]
.text:00405DB0                 movzx   eax, byte ptr [ebx-1]
.text:00405DB4
.text:00405DB4 loc_405DB4:                             ; CODE XREF: sub_405260+BBB↓j
.text:00405DB4                                         ; sub_405260+BC7↓j
.text:00405DB4                 cmp     ds:byte_410150[eax], 1
.text:00405DBB                 mov     eax, [esp+0BCh+var_34]
.text:00405DC2                 setz    dl
.text:00405DC5                 cmp     [esp+0BCh+var_44], eax
.text:00405DC9                 jz      short loc_405E04
.text:00405DCB                 mov     ecx, [esp+0BCh+arg_C]
.text:00405DD2                 dec     ecx
.text:00405DD3                 cmp     [esp+0BCh+var_44], ecx
.text:00405DD7                 jz      short loc_405DF7
.text:00405DD9                 mov     esi, [esp+0BCh+var_44]
.text:00405DDD                 movzx   eax, byte ptr [esi]
.text:00405DE0
.text:00405DE0 loc_405DE0:                             ; CODE XREF: sub_405260+BA2↓j
.text:00405DE0                                         ; sub_405260+BAE↓j
.text:00405DE0                 cmp     ds:byte_410150[eax], 1
.text:00405DE7                 setz    bl
.text:00405DEA                 cmp     dl, bl
.text:00405DEC                 jnz     loc_405C3E
.text:00405DF2                 jmp     loc_4056B2
.text:00405DF7 ; ---------------------------------------------------------------------------
.text:00405DF7
.text:00405DF7 loc_405DF7:                             ; CODE XREF: sub_405260+B77↑j
.text:00405DF7                 mov     ebp, [esp+0BCh+var_34]
.text:00405DFE                 movzx   eax, byte ptr [ebp-1]
.text:00405E02                 jmp     short loc_405DE0
.text:00405E04 ; ---------------------------------------------------------------------------
.text:00405E04
.text:00405E04 loc_405E04:                             ; CODE XREF: sub_405260+B69↑j
.text:00405E04                 mov     edi, [esp+0BCh+arg_C]
.text:00405E0B                 movzx   eax, byte ptr [edi]
.text:00405E0E                 jmp     short loc_405DE0
.text:00405E10 ; ---------------------------------------------------------------------------
.text:00405E10
.text:00405E10 loc_405E10:                             ; CODE XREF: sub_405260+B4A↑j
.text:00405E10                 mov     ebp, [esp+0BCh+var_34]
.text:00405E17                 movzx   eax, byte ptr [ebp-1]
.text:00405E1B                 jmp     short loc_405DB4
.text:00405E1D ; ---------------------------------------------------------------------------
.text:00405E1D
.text:00405E1D loc_405E1D:                             ; CODE XREF: sub_405260+B3E↑j
.text:00405E1D                 mov     ecx, [esp+0BCh+arg_C]
.text:00405E24                 movzx   eax, byte ptr [ecx]
.text:00405E27                 jmp     short loc_405DB4
.text:00405E27 ; ---------------------------------------------------------------------------
.text:00405E29                 align 10h
.text:00405E30
.text:00405E30 loc_405E30:                             ; CODE XREF: sub_405260:loc_405D6C↑j
.text:00405E30                                         ; sub_405260+B1B↑j ...
.text:00405E30                 mov     ebp, [esp+0BCh+var_50]
.text:00405E34                 mov     eax, offset loc_4054D9
.text:00405E39                 cmp     [esp+0BCh+var_4C], ebp
.text:00405E3D                 jz      loc_4054D7
.text:00405E43                 mov     ebx, [esp+0BCh+var_4C]
.text:00405E47                 movzx   esi, byte ptr [ebx]
.text:00405E4A                 inc     ebx
.text:00405E4B                 mov     [esp+0BCh+var_4C], ebx
.text:00405E4F                 mov     eax, ds:jpt_4054D7[esi*4] ; switch 6 cases
.text:00405E56                 jmp     eax             ; switch jump
.text:00405E58 ; ---------------------------------------------------------------------------
.text:00405E58
.text:00405E58 loc_405E58:                             ; DATA XREF: .text:0040524C↑o
.text:00405E58                 mov     ecx, [esp+0BCh+arg_8]
.text:00405E5F                 test    ecx, ecx
.text:00405E61                 jz      loc_40744A
.text:00405E67                 mov     eax, [esp+0BCh+arg_4]
.text:00405E6E                 cmp     [esp+0BCh+var_44], eax
.text:00405E72
.text:00405E72 loc_405E72:                             ; CODE XREF: sub_405260+21F5↓j
.text:00405E72                 jz      loc_4056B2
.text:00405E78                 mov     edi, [esp+0BCh+arg_10]
.text:00405E7F                 test    edi, edi
.text:00405E81                 jz      loc_4056B2
.text:00405E87                 mov     edx, [esp+0BCh+var_44]
.text:00405E8B                 dec     edx
.text:00405E8C                 cmp     edx, [esp+0BCh+var_34]
.text:00405E93                 jz      loc_40743A
.text:00405E99                 mov     ebx, [esp+0BCh+arg_C]
.text:00405EA0                 dec     ebx
.text:00405EA1                 cmp     edx, ebx
.text:00405EA3                 jz      loc_40742A
.text:00405EA9                 mov     ecx, [esp+0BCh+var_44]
.text:00405EAD                 movzx   eax, byte ptr [ecx-1]
.text:00405EB1
.text:00405EB1 loc_405EB1:                             ; CODE XREF: sub_405260+21D5↓j
.text:00405EB1                                         ; sub_405260+21E5↓j
.text:00405EB1                 cmp     ds:byte_410150[eax], 1
.text:00405EB8                 jnz     loc_4056B2
.text:00405EBE                 mov     eax, [esp+0BCh+var_38]
.text:00405EC5                 cmp     [esp+0BCh+var_44], eax
.text:00405EC9                 jz      short loc_405F02
.text:00405ECB                 mov     edx, [esp+0BCh+var_34]
.text:00405ED2                 cmp     [esp+0BCh+var_44], edx
.text:00405ED6                 jz      loc_40741B
.text:00405EDC                 mov     ebp, [esp+0BCh+arg_C]
.text:00405EE3                 dec     ebp
.text:00405EE4                 cmp     [esp+0BCh+var_44], ebp
.text:00405EE8                 jz      loc_40740B
.text:00405EEE                 mov     esi, [esp+0BCh+var_44]
.text:00405EF2                 movzx   eax, byte ptr [esi]
.text:00405EF5
.text:00405EF5 loc_405EF5:                             ; CODE XREF: sub_405260+21B6↓j
.text:00405EF5                                         ; sub_405260+21C5↓j
.text:00405EF5                 cmp     ds:byte_410150[eax], 1
.text:00405EFC                 jz      loc_4056B2
.text:00405F02
.text:00405F02 loc_405F02:                             ; CODE XREF: sub_405260+C69↑j
.text:00405F02                                         ; sub_405260+E23↓j ...
.text:00405F02                 mov     ecx, [esp+0BCh+var_50]
.text:00405F06                 mov     eax, offset loc_4054D9
.text:00405F0B                 cmp     [esp+0BCh+var_4C], ecx
.text:00405F0F                 jz      loc_4054D7
.text:00405F15                 mov     edi, [esp+0BCh+var_4C]
.text:00405F19                 movzx   edx, byte ptr [edi]
.text:00405F1C                 inc     edi
.text:00405F1D                 mov     [esp+0BCh+var_4C], edi
.text:00405F21                 mov     eax, ds:jpt_4054D7[edx*4] ; switch 6 cases
.text:00405F28                 jmp     eax             ; switch jump
.text:00405F2A ; ---------------------------------------------------------------------------
.text:00405F2A
.text:00405F2A loc_405F2A:                             ; DATA XREF: .text:00405248↑o
.text:00405F2A                 mov     ebp, [esp+0BCh+var_38]
.text:00405F31                 cmp     [esp+0BCh+var_44], ebp
.text:00405F35                 jz      loc_4056B2
.text:00405F3B                 mov     eax, [esp+0BCh+var_34]
.text:00405F42                 cmp     [esp+0BCh+var_44], eax
.text:00405F46                 jz      loc_406007
.text:00405F4C                 mov     esi, [esp+0BCh+arg_C]
.text:00405F53                 dec     esi
.text:00405F54                 cmp     [esp+0BCh+var_44], esi
.text:00405F58                 jz      loc_405FF7
.text:00405F5E                 mov     edx, [esp+0BCh+var_44]
.text:00405F62                 movzx   eax, byte ptr [edx]
.text:00405F65
.text:00405F65 loc_405F65:                             ; CODE XREF: sub_405260+DA2↓j
.text:00405F65                                         ; sub_405260+DB1↓j
.text:00405F65                 cmp     ds:byte_410150[eax], 1
.text:00405F6C                 jnz     loc_4056B2
.text:00405F72                 mov     edi, [esp+0BCh+arg_8]
.text:00405F79                 test    edi, edi
.text:00405F7B                 jz      short loc_405FEA
.text:00405F7D                 mov     ebp, [esp+0BCh+arg_4]
.text:00405F84                 cmp     [esp+0BCh+var_44], ebp
.text:00405F88
.text:00405F88 loc_405F88:                             ; CODE XREF: sub_405260+D95↓j
.text:00405F88                 jz      loc_405E30
.text:00405F8E                 mov     ebx, [esp+0BCh+arg_10]
.text:00405F95                 test    ebx, ebx
.text:00405F97                 jz      loc_405E30
.text:00405F9D                 mov     edx, [esp+0BCh+var_44]
.text:00405FA1                 dec     edx
.text:00405FA2                 cmp     edx, [esp+0BCh+var_34]
.text:00405FA9                 jz      short loc_405FDE
.text:00405FAB                 mov     ecx, [esp+0BCh+arg_C]
.text:00405FB2                 dec     ecx
.text:00405FB3                 cmp     edx, ecx
.text:00405FB5                 jz      short loc_405FD1
.text:00405FB7                 mov     edi, [esp+0BCh+var_44]
.text:00405FBB                 movzx   eax, byte ptr [edi-1]
.text:00405FBF
.text:00405FBF loc_405FBF:                             ; CODE XREF: sub_405260+D7C↓j
.text:00405FBF                                         ; sub_405260+D88↓j
.text:00405FBF                 cmp     ds:byte_410150[eax], 1
.text:00405FC6                 jnz     loc_405E30
.text:00405FCC                 jmp     loc_4056B2
.text:00405FD1 ; ---------------------------------------------------------------------------
.text:00405FD1
.text:00405FD1 loc_405FD1:                             ; CODE XREF: sub_405260+D55↑j
.text:00405FD1                 mov     edx, [esp+0BCh+var_34]
.text:00405FD8                 movzx   eax, byte ptr [edx-1]
.text:00405FDC                 jmp     short loc_405FBF
.text:00405FDE ; ---------------------------------------------------------------------------
.text:00405FDE
.text:00405FDE loc_405FDE:                             ; CODE XREF: sub_405260+D49↑j
.text:00405FDE                 mov     esi, [esp+0BCh+arg_C]
.text:00405FE5                 movzx   eax, byte ptr [esi]
.text:00405FE8                 jmp     short loc_405FBF
.text:00405FEA ; ---------------------------------------------------------------------------
.text:00405FEA
.text:00405FEA loc_405FEA:                             ; CODE XREF: sub_405260+D1B↑j
.text:00405FEA                 mov     eax, [esp+0BCh+arg_C]
.text:00405FF1                 cmp     [esp+0BCh+var_44], eax
.text:00405FF5                 jmp     short loc_405F88
.text:00405FF7 ; ---------------------------------------------------------------------------
.text:00405FF7
.text:00405FF7 loc_405FF7:                             ; CODE XREF: sub_405260+CF8↑j
.text:00405FF7                 mov     ecx, [esp+0BCh+var_34]
.text:00405FFE                 movzx   eax, byte ptr [ecx-1]
.text:00406002                 jmp     loc_405F65
.text:00406007 ; ---------------------------------------------------------------------------
.text:00406007
.text:00406007 loc_406007:                             ; CODE XREF: sub_405260+CE6↑j
.text:00406007                 mov     ebx, [esp+0BCh+arg_C]
.text:0040600E                 movzx   eax, byte ptr [ebx]
.text:00406011                 jmp     loc_405F65
.text:00406016 ; ---------------------------------------------------------------------------
.text:00406016
.text:00406016 loc_406016:                             ; DATA XREF: .text:00405244↑o
.text:00406016                 mov     ebp, [esp+0BCh+var_48]
.text:0040601A                 cmp     [esp+0BCh+var_44], ebp
.text:0040601E                 jz      loc_4060A1
.text:00406024
.text:00406024 loc_406024:                             ; CODE XREF: sub_405260+E62↓j
.text:00406024                 mov     esi, [esp+0BCh+var_34]
.text:0040602B                 cmp     [esp+0BCh+var_44], esi
.text:0040602F                 jz      short loc_406095
.text:00406031                 mov     edi, [esp+0BCh+arg_C]
.text:00406038                 dec     edi
.text:00406039                 cmp     [esp+0BCh+var_44], edi
.text:0040603D                 jz      short loc_406088
.text:0040603F                 mov     ebp, [esp+0BCh+var_44]
.text:00406043                 movzx   eax, byte ptr [ebp+0]
.text:00406047
.text:00406047 loc_406047:                             ; CODE XREF: sub_405260+E33↓j
.text:00406047                                         ; sub_405260+E3F↓j
.text:00406047                 cmp     ds:byte_410150[eax], 1
.text:0040604E                 jz      loc_4056B2
.text:00406054                 mov     eax, [esp+0BCh+var_8C]
.text:00406058                 test    eax, eax
.text:0040605A                 jnz     short loc_40607F
.text:0040605C                 mov     [esp+0BCh+var_8C], 1
.text:00406064                 mov     eax, [esp+0BCh+var_60]
.text:00406068                 mov     ebx, [esp+0BCh+var_64]
.text:0040606C                 cmp     eax, ebx
.text:0040606E                 ja      short loc_40607F
.text:00406070
.text:00406070 loc_406070:                             ; CODE XREF: sub_405260+E1D↓j
.text:00406070                 mov     esi, [esp+0BCh+var_78]
.text:00406074                 or      byte ptr [esi+eax*4], 18h
.text:00406078                 inc     eax
.text:00406079                 cmp     eax, [esp+0BCh+var_64]
.text:0040607D                 jbe     short loc_406070
.text:0040607F
.text:0040607F loc_40607F:                             ; CODE XREF: sub_405260+DFA↑j
.text:0040607F                                         ; sub_405260+E0E↑j ...
.text:0040607F                 inc     [esp+0BCh+var_44]
.text:00406083                 jmp     loc_405F02
.text:00406088 ; ---------------------------------------------------------------------------
.text:00406088
.text:00406088 loc_406088:                             ; CODE XREF: sub_405260+DDD↑j
.text:00406088                 mov     edx, [esp+0BCh+var_34]
.text:0040608F                 movzx   eax, byte ptr [edx-1]
.text:00406093                 jmp     short loc_406047
.text:00406095 ; ---------------------------------------------------------------------------
.text:00406095
.text:00406095 loc_406095:                             ; CODE XREF: sub_405260+DCF↑j
.text:00406095                 mov     ecx, [esp+0BCh+arg_C]
.text:0040609C                 movzx   eax, byte ptr [ecx]
.text:0040609F                 jmp     short loc_406047
.text:004060A1 ; ---------------------------------------------------------------------------
.text:004060A1
.text:004060A1 loc_4060A1:                             ; CODE XREF: sub_405260+DBE↑j
.text:004060A1                                         ; sub_405260+E60↓j
.text:004060A1                 mov     eax, [esp+0BCh+var_40]
.text:004060A5                 cmp     [esp+0BCh+var_48], eax
.text:004060A9                 jz      loc_4056B2
.text:004060AF                 mov     [esp+0BCh+var_48], eax
.text:004060B3                 mov     ebx, [esp+0BCh+arg_C]
.text:004060BA                 cmp     ebx, eax
.text:004060BC                 mov     [esp+0BCh+var_44], ebx
.text:004060C0                 jz      short loc_4060A1
.text:004060C2                 jmp     loc_406024
.text:004060C7 ; ---------------------------------------------------------------------------
.text:004060C7
.text:004060C7 loc_4060C7:                             ; DATA XREF: .text:00405240↑o
.text:004060C7                 mov     eax, [esp+0BCh+var_48]
.text:004060CB                 cmp     [esp+0BCh+var_44], eax
.text:004060CF                 jz      loc_406151
.text:004060D5
.text:004060D5 loc_4060D5:                             ; CODE XREF: sub_405260+F12↓j
.text:004060D5                 mov     edx, [esp+0BCh+var_34]
.text:004060DC                 cmp     [esp+0BCh+var_44], edx
.text:004060E0                 jz      short loc_406145
.text:004060E2                 mov     ebp, [esp+0BCh+arg_C]
.text:004060E9                 dec     ebp
.text:004060EA                 cmp     [esp+0BCh+var_44], ebp
.text:004060EE                 jz      short loc_406138
.text:004060F0                 mov     esi, [esp+0BCh+var_44]
.text:004060F4                 movzx   eax, byte ptr [esi]
.text:004060F7
.text:004060F7 loc_4060F7:                             ; CODE XREF: sub_405260+EE3↓j
.text:004060F7                                         ; sub_405260+EEF↓j
.text:004060F7                 cmp     ds:byte_410150[eax], 1
.text:004060FE                 jnz     loc_4056B2
.text:00406104                 mov     eax, [esp+0BCh+var_8C]
.text:00406108                 test    eax, eax
.text:0040610A                 jnz     short loc_40612F
.text:0040610C                 mov     [esp+0BCh+var_8C], 1
.text:00406114                 mov     eax, [esp+0BCh+var_60]
.text:00406118                 mov     ecx, [esp+0BCh+var_64]
.text:0040611C                 cmp     eax, ecx
.text:0040611E                 ja      short loc_40612F
.text:00406120
.text:00406120 loc_406120:                             ; CODE XREF: sub_405260+ECD↓j
.text:00406120                 mov     edi, [esp+0BCh+var_78]
.text:00406124                 or      byte ptr [edi+eax*4], 18h
.text:00406128                 inc     eax
.text:00406129                 cmp     eax, [esp+0BCh+var_64]
.text:0040612D                 jbe     short loc_406120
.text:0040612F
.text:0040612F loc_40612F:                             ; CODE XREF: sub_405260+EAA↑j
.text:0040612F                                         ; sub_405260+EBE↑j
.text:0040612F                 inc     [esp+0BCh+var_44]
.text:00406133                 jmp     loc_405A8B      ; jumptable 004054D7 case 0
.text:00406133                                         ; jumptable 00405E56 case 0
.text:00406133                                         ; jumptable 00405F28 case 0
.text:00406138 ; ---------------------------------------------------------------------------
.text:00406138
.text:00406138 loc_406138:                             ; CODE XREF: sub_405260+E8E↑j
.text:00406138                 mov     ebx, [esp+0BCh+var_34]
.text:0040613F                 movzx   eax, byte ptr [ebx-1]
.text:00406143                 jmp     short loc_4060F7
.text:00406145 ; ---------------------------------------------------------------------------
.text:00406145
.text:00406145 loc_406145:                             ; CODE XREF: sub_405260+E80↑j
.text:00406145                 mov     edi, [esp+0BCh+arg_C]
.text:0040614C                 movzx   eax, byte ptr [edi]
.text:0040614F                 jmp     short loc_4060F7
.text:00406151 ; ---------------------------------------------------------------------------
.text:00406151
.text:00406151 loc_406151:                             ; CODE XREF: sub_405260+E6F↑j
.text:00406151                                         ; sub_405260+F10↓j
.text:00406151                 mov     ebx, [esp+0BCh+var_40]
.text:00406155                 cmp     [esp+0BCh+var_48], ebx
.text:00406159                 jz      loc_4056B2
.text:0040615F                 mov     [esp+0BCh+var_48], ebx
.text:00406163                 mov     ecx, [esp+0BCh+arg_C]
.text:0040616A                 cmp     ecx, ebx
.text:0040616C                 mov     [esp+0BCh+var_44], ecx
.text:00406170                 jz      short loc_406151
.text:00406172                 jmp     loc_4060D5
.text:00406177 ; ---------------------------------------------------------------------------
.text:00406177
.text:00406177 loc_406177:                             ; DATA XREF: .text:0040523C↑o
.text:00406177                 mov     esi, [esp+0BCh+var_4C]
.text:0040617B                 movsx   ecx, byte ptr [esi+1]
.text:0040617F                 movzx   eax, byte ptr [esi]
.text:00406182                 add     esi, 2
.text:00406185                 mov     ebp, esi
.text:00406187                 shl     ecx, 8
.text:0040618A                 lea     edi, [ecx+eax]
.text:0040618D                 add     ebp, edi
.text:0040618F                 mov     [esp+0BCh+var_30], ebp
.text:00406196                 mov     eax, offset loc_4054D9
.text:0040619B                 movsx   edx, byte ptr [esi+1]
.text:0040619F                 movzx   ecx, byte ptr [esi]
.text:004061A2                 add     esi, 2
.text:004061A5                 mov     [esp+0BCh+var_4C], esi
.text:004061A9                 shl     edx, 8
.text:004061AC                 add     ecx, edx
.text:004061AE                 mov     [ebp+0], cl
.text:004061B1                 mov     edi, [esp+0BCh+var_30]
.text:004061B8                 sar     ecx, 8
.text:004061BB                 mov     [edi+1], cl
.text:004061BE                 mov     edx, [esp+0BCh+var_50]
.text:004061C2                 cmp     esi, edx
.text:004061C4                 jnz     loc_405C55
.text:004061CA                 jmp     loc_4054D7
.text:004061CF ; ---------------------------------------------------------------------------
.text:004061CF
.text:004061CF loc_4061CF:                             ; DATA XREF: .text:00405238↑o
.text:004061CF                 mov     esi, [esp+0BCh+var_4C]
.text:004061D3                 movsx   edi, byte ptr [esi+3]
.text:004061D7                 movzx   ebp, byte ptr [esi+2]
.text:004061DB                 shl     edi, 8
.text:004061DE                 add     ebp, edi
.text:004061E0                 jnz     short loc_4061EC
.text:004061E2                 add     [esp+0BCh+var_4C], 4
.text:004061E7                 jmp     loc_405A8B      ; jumptable 004054D7 case 0
.text:004061E7                                         ; jumptable 00405E56 case 0
.text:004061E7                                         ; jumptable 00405F28 case 0
.text:004061EC ; ---------------------------------------------------------------------------
.text:004061EC
.text:004061EC loc_4061EC:                             ; CODE XREF: sub_405260+F80↑j
.text:004061EC                 dec     ebp
.text:004061ED                 mov     ebx, ebp
.text:004061EF                 sar     ebp, 8
.text:004061F2                 mov     [esi+2], bl
.text:004061F5                 mov     ecx, ebp
.text:004061F7                 mov     [esi+3], cl
.text:004061FA
.text:004061FA loc_4061FA:                             ; CODE XREF: sub_405260+14FE↓j
.text:004061FA                                         ; sub_405260+15A0↓j ...
.text:004061FA                 mov     ebx, [esp+0BCh+var_4C]
.text:004061FE                 movsx   ecx, byte ptr [ebx+1]
.text:00406202                 movzx   edx, byte ptr [ebx]
.text:00406205                 shl     ecx, 8
.text:00406208                 lea     esi, [ecx+edx]
.text:0040620B                 lea     edi, [esi+ebx+2]
.text:0040620F                 mov     [esp+0BCh+var_4C], edi
.text:00406213                 jmp     loc_405C3E
.text:00406218 ; ---------------------------------------------------------------------------
.text:00406218
.text:00406218 loc_406218:                             ; DATA XREF: .text:00405234↑o
.text:00406218                 mov     ecx, [esp+0BCh+var_4C]
.text:0040621C                 movsx   ebx, byte ptr [ecx+3]
.text:00406220                 movzx   ebp, byte ptr [ecx+2]
.text:00406224                 shl     ebx, 8
.text:00406227                 add     ebp, ebx
.text:00406229                 test    ebp, ebp
.text:0040622B                 jle     short loc_406249
.text:0040622D                 dec     ebp
.text:0040622E                 add     ecx, 2
.text:00406231                 mov     eax, ebp
.text:00406233                 mov     [ecx], al
.text:00406235                 sar     ebp, 8
.text:00406238                 mov     edx, ebp
.text:0040623A                 mov     [ecx+1], dl
.text:0040623D                 add     ecx, 2
.text:00406240                 mov     [esp+0BCh+var_4C], ecx
.text:00406244                 jmp     loc_405A8B      ; jumptable 004054D7 case 0
.text:00406244                                         ; jumptable 00405E56 case 0
.text:00406244                                         ; jumptable 00405F28 case 0
.text:00406249 ; ---------------------------------------------------------------------------
.text:00406249
.text:00406249 loc_406249:                             ; CODE XREF: sub_405260+FCB↑j
.text:00406249                 test    ebp, ebp
.text:0040624B                 jnz     loc_405A8B      ; jumptable 004054D7 case 0
.text:0040624B                                         ; jumptable 00405E56 case 0
.text:0040624B                                         ; jumptable 00405F28 case 0
.text:00406251                 mov     ebp, [esp+0BCh+var_4C]
.text:00406255                 mov     byte ptr [ebp+2], 0
.text:00406259                 mov     byte ptr [ebp+3], 0
.text:0040625D
.text:0040625D loc_40625D:                             ; CODE XREF: sub_405260:loc_406B7C↓j
.text:0040625D                 mov     edx, [esp+0BCh+var_4C]
.text:00406261                 movsx   ecx, byte ptr [edx+1]
.text:00406265                 movzx   ebp, byte ptr [edx]
.text:00406268                 add     edx, 2
.text:0040626B                 mov     ebx, edx
.text:0040626D                 mov     [esp+0BCh+var_4C], edx
.text:00406271                 shl     ecx, 8
.text:00406274                 add     ebp, ecx
.text:00406276                 cmp     edx, [esp+0BCh+var_50]
.text:0040627A                 mov     [esp+0BCh+var_30], edx
.text:00406281                 jnb     short loc_4062B2
.text:00406283                 cmp     byte ptr [edx], 0
.text:00406286                 jnz     short loc_4062A3
.text:00406288                 lea     eax, [edx+1]
.text:0040628B
.text:0040628B loc_40628B:                             ; CODE XREF: sub_405260+1041↓j
.text:0040628B                 mov     [esp+0BCh+var_30], eax
.text:00406292                 mov     ebx, eax
.text:00406294                 lea     eax, [eax+1]
.text:00406297                 cmp     ebx, [esp+0BCh+var_50]
.text:0040629B                 jnb     short loc_4062B2
.text:0040629D                 cmp     byte ptr [eax-1], 0
.text:004062A1                 jz      short loc_40628B
.text:004062A3
.text:004062A3 loc_4062A3:                             ; CODE XREF: sub_405260+1026↑j
.text:004062A3                 cmp     ebx, [esp+0BCh+var_50]
.text:004062A7                 jnb     short loc_4062B2
.text:004062A9                 cmp     byte ptr [ebx], 6
.text:004062AC                 jz      loc_40643A
.text:004062B2
.text:004062B2 loc_4062B2:                             ; CODE XREF: sub_405260+1021↑j
.text:004062B2                                         ; sub_405260+103B↑j ...
.text:004062B2                 mov     edi, [esp+0BCh+var_60]
.text:004062B6                 mov     ebx, [esp+0BCh+var_64]
.text:004062BA                 mov     ecx, [esp+0BCh+var_28]
.text:004062C1                 mov     esi, [esp+0BCh+var_24]
.text:004062C8                 sub     ebx, edi
.text:004062CA                 mov     edx, ecx
.text:004062CC                 lea     edi, [ebx+ebx]
.text:004062CF                 sub     edx, esi
.text:004062D1                 lea     eax, [ebx+edi+7]
.text:004062D5                 cmp     edx, eax
.text:004062D7                 jnb     short loc_40634D
.text:004062D9                 mov     edi, eax
.text:004062DB
.text:004062DB loc_4062DB:                             ; CODE XREF: sub_405260+10EB↓j
.text:004062DB                 mov     edx, dword_40F020
.text:004062E1                 lea     ebx, [edx+edx*8]
.text:004062E4                 lea     esi, [edx+ebx*2]
.text:004062E7                 cmp     ecx, esi
.text:004062E9                 ja      loc_4059E1
.text:004062EF                 lea     edx, ds:0[ecx*8]
.text:004062F6                 mov     [esp+0BCh+Size], edx ; Size
.text:004062F9                 call    malloc
.text:004062FE                 mov     [esp+0BCh+Size], eax ; void *
.text:00406301                 mov     ebx, [esp+0BCh+var_28]
.text:00406308                 mov     esi, [esp+0BCh+Src]
.text:0040630F                 shl     ebx, 2
.text:00406312                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:00406316                 mov     [esp+0BCh+var_B8], esi ; Src
.text:0040631A                 call    memcpy
.text:0040631F                 mov     [esp+0BCh+Src], eax
.text:00406326                 test    eax, eax
.text:00406328                 jz      loc_4059E1
.text:0040632E                 mov     ebx, [esp+0BCh+var_28]
.text:00406335                 mov     esi, [esp+0BCh+var_24]
.text:0040633C                 add     ebx, ebx
.text:0040633E                 mov     [esp+0BCh+var_28], ebx
.text:00406345                 mov     ecx, ebx
.text:00406347                 sub     ebx, esi
.text:00406349                 cmp     ebx, edi
.text:0040634B                 jb      short loc_4062DB
.text:0040634D
.text:0040634D loc_40634D:                             ; CODE XREF: sub_405260+1077↑j
.text:0040634D                 mov     ecx, [esp+0BCh+var_60]
.text:00406351                 mov     eax, [esp+0BCh+var_64]
.text:00406355                 cmp     ecx, eax
.text:00406357                 ja      loc_406431
.text:0040635D                 mov     ebx, [esp+0BCh+Src]
.text:00406364
.text:00406364 loc_406364:                             ; CODE XREF: sub_405260+1162↓j
.text:00406364                 mov     eax, [esp+0BCh+var_68]
.text:00406368                 mov     edi, [eax+ecx*4]
.text:0040636B                 mov     [ebx+esi*4], edi
.text:0040636E                 mov     edx, [esp+0BCh+var_6C]
.text:00406372                 mov     edi, [esp+0BCh+var_24]
.text:00406379                 mov     ebx, [esp+0BCh+Src]
.text:00406380                 mov     esi, [edx+ecx*4]
.text:00406383                 inc     edi
.text:00406384                 mov     [esp+0BCh+var_24], edi
.text:0040638B                 mov     [ebx+edi*4], esi
.text:0040638E                 mov     edi, [esp+0BCh+var_24]
.text:00406395                 mov     eax, [esp+0BCh+var_78]
.text:00406399                 mov     ebx, [esp+0BCh+Src]
.text:004063A0                 inc     edi
.text:004063A1                 mov     [esp+0BCh+var_24], edi
.text:004063A8                 mov     esi, [eax+ecx*4]
.text:004063AB                 inc     ecx
.text:004063AC                 mov     [ebx+edi*4], esi
.text:004063AF                 mov     esi, [esp+0BCh+var_24]
.text:004063B6                 inc     esi
.text:004063B7                 cmp     ecx, [esp+0BCh+var_64]
.text:004063BB                 mov     [esp+0BCh+var_24], esi
.text:004063C2                 jbe     short loc_406364
.text:004063C4
.text:004063C4 loc_4063C4:                             ; CODE XREF: sub_405260+11D8↓j
.text:004063C4                 mov     eax, [esp+0BCh+var_60]
.text:004063C8                 mov     [ebx+esi*4], eax
.text:004063CB                 mov     ecx, [esp+0BCh+var_24]
.text:004063D2                 mov     edi, [esp+0BCh+var_64]
.text:004063D6                 mov     edx, [esp+0BCh+Src]
.text:004063DD                 inc     ecx
.text:004063DE                 mov     [esp+0BCh+var_24], ecx
.text:004063E5                 mov     [edx+ecx*4], edi
.text:004063E8                 mov     eax, [esp+0BCh+var_24]
.text:004063EF                 mov     esi, [esp+0BCh+var_4C]
.text:004063F3                 mov     edi, [esp+0BCh+Src]
.text:004063FA                 inc     eax
.text:004063FB                 add     esi, ebp
.text:004063FD                 mov     [esp+0BCh+var_24], eax
.text:00406404                 mov     [edi+eax*4], esi
.text:00406407                 mov     ecx, [esp+0BCh+var_24]
.text:0040640E                 mov     ebp, [esp+0BCh+Src]
.text:00406415                 mov     ebx, [esp+0BCh+var_44]
.text:00406419                 inc     ecx
.text:0040641A                 mov     [esp+0BCh+var_24], ecx
.text:00406421                 mov     [ebp+ecx*4+0], ebx
.text:00406425                 inc     [esp+0BCh+var_24]
.text:0040642C                 jmp     loc_405A8B      ; jumptable 004054D7 case 0
.text:0040642C                                         ; jumptable 00405E56 case 0
.text:0040642C                                         ; jumptable 00405F28 case 0
.text:00406431 ; ---------------------------------------------------------------------------
.text:00406431
.text:00406431 loc_406431:                             ; CODE XREF: sub_405260+10F7↑j
.text:00406431                 mov     ebx, [esp+0BCh+Src]
.text:00406438                 jmp     short loc_4063C4
.text:0040643A ; ---------------------------------------------------------------------------
.text:0040643A
.text:0040643A loc_40643A:                             ; CODE XREF: sub_405260+104C↑j
.text:0040643A                 movzx   edx, byte ptr [ebx+1]
.text:0040643E                 movzx   edi, byte ptr [ebx+2]
.text:00406442                 cmp     [esp+0BCh+var_60], 101h
.text:0040644A                 lea     ebx, [edi+edx]
.text:0040644D                 mov     [esp+0BCh+var_64], ebx
.text:00406451                 jnz     loc_4062B2
.text:00406457                 mov     [esp+0BCh+var_60], edx
.text:0040645B                 jmp     loc_4062B2
.text:00406460 ; ---------------------------------------------------------------------------
.text:00406460
.text:00406460 loc_406460:                             ; DATA XREF: .text:00405230↑o
.text:00406460                 mov     eax, [esp+0BCh+var_60]
.text:00406464                 mov     edx, [esp+0BCh+var_64]
.text:00406468                 mov     ecx, [esp+0BCh+var_28]
.text:0040646F                 mov     esi, [esp+0BCh+var_24]
.text:00406476                 sub     edx, eax
.text:00406478                 mov     ebp, ecx
.text:0040647A                 lea     ebx, [edx+edx]
.text:0040647D                 sub     ebp, esi
.text:0040647F                 lea     eax, [edx+ebx+7]
.text:00406483                 cmp     ebp, eax
.text:00406485                 jnb     short loc_4064FB
.text:00406487                 mov     edi, eax
.text:00406489
.text:00406489 loc_406489:                             ; CODE XREF: sub_405260+1299↓j
.text:00406489                 mov     edx, dword_40F020
.text:0040648F                 lea     ebp, [edx+edx*8]
.text:00406492                 lea     esi, [edx+ebp*2]
.text:00406495                 cmp     ecx, esi
.text:00406497                 ja      loc_4059E1
.text:0040649D                 lea     ebp, ds:0[ecx*8]
.text:004064A4                 mov     [esp+0BCh+Size], ebp ; Size
.text:004064A7                 call    malloc
.text:004064AC                 mov     [esp+0BCh+Size], eax ; void *
.text:004064AF                 mov     esi, [esp+0BCh+var_28]
.text:004064B6                 mov     ebx, [esp+0BCh+Src]
.text:004064BD                 shl     esi, 2
.text:004064C0                 mov     [esp+0BCh+var_B4], esi ; Size
.text:004064C4                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:004064C8                 call    memcpy
.text:004064CD                 mov     [esp+0BCh+Src], eax
.text:004064D4                 test    eax, eax
.text:004064D6                 jz      loc_4059E1
.text:004064DC                 mov     edx, [esp+0BCh+var_28]
.text:004064E3                 mov     esi, [esp+0BCh+var_24]
.text:004064EA                 add     edx, edx
.text:004064EC                 mov     [esp+0BCh+var_28], edx
.text:004064F3                 mov     ecx, edx
.text:004064F5                 sub     edx, esi
.text:004064F7                 cmp     edx, edi
.text:004064F9                 jb      short loc_406489
.text:004064FB
.text:004064FB loc_4064FB:                             ; CODE XREF: sub_405260+1225↑j
.text:004064FB                 mov     ecx, [esp+0BCh+var_60]
.text:004064FF                 mov     edi, [esp+0BCh+var_64]
.text:00406503                 cmp     ecx, edi
.text:00406505                 ja      loc_4065DD
.text:0040650B                 mov     ebx, [esp+0BCh+Src]
.text:00406512
.text:00406512 loc_406512:                             ; CODE XREF: sub_405260+1310↓j
.text:00406512                 mov     eax, [esp+0BCh+var_68]
.text:00406516                 mov     edi, [eax+ecx*4]
.text:00406519                 mov     [ebx+esi*4], edi
.text:0040651C                 mov     edx, [esp+0BCh+var_6C]
.text:00406520                 mov     edi, [esp+0BCh+var_24]
.text:00406527                 mov     ebx, [esp+0BCh+Src]
.text:0040652E                 mov     ebp, [edx+ecx*4]
.text:00406531                 inc     edi
.text:00406532                 mov     [esp+0BCh+var_24], edi
.text:00406539                 mov     [ebx+edi*4], ebp
.text:0040653C                 mov     ebp, [esp+0BCh+var_24]
.text:00406543                 mov     eax, [esp+0BCh+var_78]
.text:00406547                 mov     ebx, [esp+0BCh+Src]
.text:0040654E                 inc     ebp
.text:0040654F                 mov     [esp+0BCh+var_24], ebp
.text:00406556                 mov     esi, [eax+ecx*4]
.text:00406559                 inc     ecx
.text:0040655A                 mov     [ebx+ebp*4], esi
.text:0040655D                 mov     esi, [esp+0BCh+var_24]
.text:00406564                 inc     esi
.text:00406565                 cmp     ecx, [esp+0BCh+var_64]
.text:00406569                 mov     [esp+0BCh+var_24], esi
.text:00406570                 jbe     short loc_406512
.text:00406572
.text:00406572 loc_406572:                             ; CODE XREF: sub_405260+1384↓j
.text:00406572                 mov     edi, [esp+0BCh+var_60]
.text:00406576                 mov     [ebx+esi*4], edi
.text:00406579                 mov     edx, [esp+0BCh+var_24]
.text:00406580                 mov     ebp, [esp+0BCh+Src]
.text:00406587                 mov     esi, [esp+0BCh+var_64]
.text:0040658B                 inc     edx
.text:0040658C                 mov     [esp+0BCh+var_24], edx
.text:00406593                 mov     [ebp+edx*4+0], esi
.text:00406597                 mov     ebx, [esp+0BCh+var_24]
.text:0040659E                 mov     ecx, [esp+0BCh+Src]
.text:004065A5                 inc     ebx
.text:004065A6                 mov     [esp+0BCh+var_24], ebx
.text:004065AD                 mov     dword ptr [ecx+ebx*4], 0
.text:004065B4
.text:004065B4 loc_4065B4:                             ; CODE XREF: sub_405260+190E↓j
.text:004065B4                 mov     eax, [esp+0BCh+var_24]
.text:004065BB                 mov     ecx, [esp+0BCh+Src]
.text:004065C2                 inc     eax
.text:004065C3                 mov     [esp+0BCh+var_24], eax
.text:004065CA                 mov     dword ptr [ecx+eax*4], 0
.text:004065D1                 inc     [esp+0BCh+var_24]
.text:004065D8                 jmp     loc_405F02
.text:004065DD ; ---------------------------------------------------------------------------
.text:004065DD
.text:004065DD loc_4065DD:                             ; CODE XREF: sub_405260+12A5↑j
.text:004065DD                 mov     ebx, [esp+0BCh+Src]
.text:004065E4                 jmp     short loc_406572
.text:004065E6 ; ---------------------------------------------------------------------------
.text:004065E6
.text:004065E6 loc_4065E6:                             ; DATA XREF: .text:0040522C↑o
.text:004065E6                 mov     eax, [esp+0BCh+var_60]
.text:004065EA                 mov     ebx, [esp+0BCh+var_64]
.text:004065EE                 mov     ecx, [esp+0BCh+var_28]
.text:004065F5                 mov     esi, [esp+0BCh+var_24]
.text:004065FC                 sub     ebx, eax
.text:004065FE                 mov     edx, ecx
.text:00406600                 lea     ebp, [ebx+ebx]
.text:00406603                 sub     edx, esi
.text:00406605                 lea     eax, [ebx+ebp+7]
.text:00406609                 cmp     edx, eax
.text:0040660B                 jnb     short loc_406681
.text:0040660D                 mov     edi, eax
.text:0040660F
.text:0040660F loc_40660F:                             ; CODE XREF: sub_405260+141F↓j
.text:0040660F                 mov     edx, dword_40F020
.text:00406615                 lea     ebx, [edx+edx*8]
.text:00406618                 lea     esi, [edx+ebx*2]
.text:0040661B                 cmp     ecx, esi
.text:0040661D                 ja      loc_4059E1
.text:00406623                 lea     ebx, ds:0[ecx*8]
.text:0040662A                 mov     [esp+0BCh+Size], ebx ; Size
.text:0040662D                 call    malloc
.text:00406632                 mov     [esp+0BCh+Size], eax ; void *
.text:00406635                 mov     esi, [esp+0BCh+var_28]
.text:0040663C                 mov     ebp, [esp+0BCh+Src]
.text:00406643                 shl     esi, 2
.text:00406646                 mov     [esp+0BCh+var_B4], esi ; Size
.text:0040664A                 mov     [esp+0BCh+var_B8], ebp ; Src
.text:0040664E                 call    memcpy
.text:00406653                 mov     [esp+0BCh+Src], eax
.text:0040665A                 test    eax, eax
.text:0040665C                 jz      loc_4059E1
.text:00406662                 mov     edx, [esp+0BCh+var_28]
.text:00406669                 mov     esi, [esp+0BCh+var_24]
.text:00406670                 add     edx, edx
.text:00406672                 mov     [esp+0BCh+var_28], edx
.text:00406679                 mov     ecx, edx
.text:0040667B                 sub     edx, esi
.text:0040667D                 cmp     edx, edi
.text:0040667F                 jb      short loc_40660F
.text:00406681
.text:00406681 loc_406681:                             ; CODE XREF: sub_405260+13AB↑j
.text:00406681                 mov     ecx, [esp+0BCh+var_60]
.text:00406685                 mov     edi, [esp+0BCh+var_64]
.text:00406689                 cmp     ecx, edi
.text:0040668B                 ja      loc_406763
.text:00406691                 mov     ebx, [esp+0BCh+Src]
.text:00406698
.text:00406698 loc_406698:                             ; CODE XREF: sub_405260+1496↓j
.text:00406698                 mov     eax, [esp+0BCh+var_68]
.text:0040669C                 mov     edi, [eax+ecx*4]
.text:0040669F                 mov     [ebx+esi*4], edi
.text:004066A2                 mov     edx, [esp+0BCh+var_6C]
.text:004066A6                 mov     edi, [esp+0BCh+var_24]
.text:004066AD                 mov     ebx, [esp+0BCh+Src]
.text:004066B4                 mov     ebp, [edx+ecx*4]
.text:004066B7                 inc     edi
.text:004066B8                 mov     [esp+0BCh+var_24], edi
.text:004066BF                 mov     [ebx+edi*4], ebp
.text:004066C2                 mov     ebp, [esp+0BCh+var_24]
.text:004066C9                 mov     eax, [esp+0BCh+var_78]
.text:004066CD                 mov     ebx, [esp+0BCh+Src]
.text:004066D4                 inc     ebp
.text:004066D5                 mov     [esp+0BCh+var_24], ebp
.text:004066DC                 mov     esi, [eax+ecx*4]
.text:004066DF                 inc     ecx
.text:004066E0                 mov     [ebx+ebp*4], esi
.text:004066E3                 mov     esi, [esp+0BCh+var_24]
.text:004066EA                 inc     esi
.text:004066EB                 cmp     ecx, [esp+0BCh+var_64]
.text:004066EF                 mov     [esp+0BCh+var_24], esi
.text:004066F6                 jbe     short loc_406698
.text:004066F8
.text:004066F8 loc_4066F8:                             ; CODE XREF: sub_405260+150A↓j
.text:004066F8                 mov     ebp, [esp+0BCh+var_60]
.text:004066FC                 mov     [ebx+esi*4], ebp
.text:004066FF                 mov     eax, [esp+0BCh+var_24]
.text:00406706                 mov     edi, [esp+0BCh+Src]
.text:0040670D                 mov     esi, [esp+0BCh+var_64]
.text:00406711                 inc     eax
.text:00406712                 mov     [esp+0BCh+var_24], eax
.text:00406719                 mov     [edi+eax*4], esi
.text:0040671C                 mov     edx, [esp+0BCh+var_24]
.text:00406723                 mov     ebp, [esp+0BCh+Src]
.text:0040672A                 inc     edx
.text:0040672B                 mov     [esp+0BCh+var_24], edx
.text:00406732                 mov     dword ptr [ebp+edx*4+0], 0
.text:0040673A                 mov     ebx, [esp+0BCh+var_24]
.text:00406741                 mov     ecx, [esp+0BCh+Src]
.text:00406748                 inc     ebx
.text:00406749                 mov     [esp+0BCh+var_24], ebx
.text:00406750                 mov     dword ptr [ecx+ebx*4], 0
.text:00406757                 inc     [esp+0BCh+var_24]
.text:0040675E                 jmp     loc_4061FA
.text:00406763 ; ---------------------------------------------------------------------------
.text:00406763
.text:00406763 loc_406763:                             ; CODE XREF: sub_405260+142B↑j
.text:00406763                 mov     ebx, [esp+0BCh+Src]
.text:0040676A                 jmp     short loc_4066F8
.text:0040676C ; ---------------------------------------------------------------------------
.text:0040676C
.text:0040676C loc_40676C:                             ; DATA XREF: .text:00405228↑o
.text:0040676C                 mov     esi, [esp+0BCh+var_4C]
.text:00406770                 movsx   ebx, byte ptr [esi+1]
.text:00406774                 movzx   ebp, byte ptr [esi]
.text:00406777                 add     esi, 2
.text:0040677A                 mov     [esp+0BCh+var_4C], esi
.text:0040677E                 shl     ebx, 8
.text:00406781                 add     ebp, ebx
.text:00406783
.text:00406783 loc_406783:                             ; CODE XREF: sub_405260+153A↓j
.text:00406783                                         ; sub_405260+154C↓j
.text:00406783                 lea     edx, [esi+2]
.text:00406786                 cmp     edx, [esp+0BCh+var_50]
.text:0040678A                 jnb     short def_405C64 ; jumptable 00405C64 default case
.text:0040678C                 movzx   ecx, byte ptr [esi]
.text:0040678F                 sub     cl, 6
.text:00406792                 cmp     cl, 1
.text:00406795                 ja      short def_405C64 ; jumptable 00405C64 default case
.text:00406797                 add     esi, 3
.text:0040679A                 jmp     short loc_406783
.text:0040679C ; ---------------------------------------------------------------------------
.text:0040679C
.text:0040679C def_405C64:                             ; CODE XREF: sub_405260+152A↑j
.text:0040679C                                         ; sub_405260+1535↑j
.text:0040679C                 lea     eax, [esi+6]    ; jumptable 00405C64 default case
.text:0040679F                 cmp     eax, [esp+0BCh+var_50]
.text:004067A3                 jnb     short loc_4067AE
.text:004067A5                 cmp     byte ptr [esi], 13h
.text:004067A8                 jnz     short loc_4067AE
.text:004067AA                 mov     esi, eax
.text:004067AC                 jmp     short loc_406783
.text:004067AE ; ---------------------------------------------------------------------------
.text:004067AE
.text:004067AE loc_4067AE:                             ; CODE XREF: sub_405260+1543↑j
.text:004067AE                                         ; sub_405260+1548↑j
.text:004067AE                 mov     edi, [esp+0BCh+var_4C]
.text:004067B2                 add     edi, ebp
.text:004067B4                 cmp     esi, [esp+0BCh+var_50]
.text:004067B8                 mov     [esp+0BCh+var_30], edi
.text:004067BF                 jz      loc_406945
.text:004067C5                 movzx   eax, byte ptr [esi]
.text:004067C8                 cmp     al, 2
.text:004067CA                 jz      loc_4069FB
.text:004067D0                 mov     ebp, [esp+0BCh+arg_0]
.text:004067D7                 test    byte ptr [ebp+1Ch], 80h
.text:004067DB                 jz      short loc_4067E5
.text:004067DD                 cmp     al, 0Ah
.text:004067DF                 jz      loc_40698B
.text:004067E5
.text:004067E5 loc_4067E5:                             ; CODE XREF: sub_405260+157B↑j
.text:004067E5                 cmp     al, 4
.text:004067E7                 jz      loc_406895
.text:004067ED
.text:004067ED loc_4067ED:                             ; CODE XREF: sub_405260+1652↓j
.text:004067ED                                         ; sub_405260:loc_4068F4↓j ...
.text:004067ED                 sub     [esp+0BCh+var_4C], 2
.text:004067F2                 mov     esi, [esp+0BCh+var_4C]
.text:004067F6                 cmp     byte ptr [esi-1], 11h
.text:004067FA                 jz      short loc_406805
.text:004067FC                 mov     byte ptr [esi-1], 0Dh
.text:00406800                 jmp     loc_4061FA
.text:00406805 ; ---------------------------------------------------------------------------
.text:00406805
.text:00406805 loc_406805:                             ; CODE XREF: sub_405260+159A↑j
.text:00406805                                         ; DATA XREF: .text:00405224↑o
.text:00406805                 mov     edi, [esp+0BCh+var_24]
.text:0040680C                 mov     ebx, [esp+0BCh+Src]
.text:00406813                 lea     eax, [edi-3]
.text:00406816                 mov     [esp+0BCh+var_24], eax
.text:0040681D                 lea     ecx, [edi-4]
.text:00406820                 mov     ebp, [ebx+eax*4]
.text:00406823                 mov     [esp+0BCh+var_24], ecx
.text:0040682A                 mov     edi, [ebx+ecx*4]
.text:0040682D                 mov     ecx, ebp
.text:0040682F                 cmp     ebp, edi
.text:00406831                 jb      short loc_406888
.text:00406833
.text:00406833 loc_406833:                             ; CODE XREF: sub_405260+1626↓j
.text:00406833                 mov     eax, [esp+0BCh+var_24]
.text:0040683A                 dec     eax
.text:0040683B                 mov     [esp+0BCh+var_24], eax
.text:00406842                 mov     edx, [ebx+eax*4]
.text:00406845                 mov     ebx, [esp+0BCh+var_94]
.text:00406849                 mov     [ebx+ecx*4], edx
.text:0040684C                 mov     edx, [esp+0BCh+var_24]
.text:00406853                 mov     ebx, [esp+0BCh+Src]
.text:0040685A                 mov     esi, [esp+0BCh+var_90]
.text:0040685E                 lea     ebp, [edx-1]
.text:00406861                 mov     [esp+0BCh+var_24], ebp
.text:00406868                 mov     eax, [ebx+ebp*4]
.text:0040686B                 mov     ebp, [esp+0BCh+var_90]
.text:0040686F                 mov     [ebp+ecx*4+0], eax
.text:00406873                 lea     ebp, [edx-2]
.text:00406876                 mov     [esp+0BCh+var_24], ebp
.text:0040687D                 mov     edx, [ebx+ebp*4]
.text:00406880                 mov     [esi+ecx*4], edx
.text:00406883                 dec     ecx
.text:00406884                 cmp     ecx, edi
.text:00406886                 jnb     short loc_406833
.text:00406888
.text:00406888 loc_406888:                             ; CODE XREF: sub_405260+15D1↑j
.text:00406888                 mov     [esp+0BCh+var_8C], 0
.text:00406890                 jmp     loc_4061FA
.text:00406895 ; ---------------------------------------------------------------------------
.text:00406895
.text:00406895 loc_406895:                             ; CODE XREF: sub_405260+1587↑j
.text:00406895                 mov     ebx, [esp+0BCh+var_30]
.text:0040689C                 mov     edi, ebx
.text:0040689E                 cmp     byte ptr [ebx+3], 2
.text:004068A2                 jz      loc_406952
.text:004068A8
.text:004068A8 loc_4068A8:                             ; CODE XREF: sub_405260+1718↓j
.text:004068A8                 movzx   eax, byte ptr [edi+3]
.text:004068AC                 cmp     al, 5
.text:004068AE                 jz      short loc_406907
.text:004068B0                 cmp     al, 4
.text:004068B2                 jnz     loc_4067ED
.text:004068B8                 movzx   eax, byte ptr [esi+1]
.text:004068BC                 xor     edx, edx
.text:004068BE                 movzx   ebx, al
.text:004068C1                 mov     [esp+0BCh+var_A5], al
.text:004068C5                 cmp     edx, ebx
.text:004068C7                 jge     short loc_4068E5
.text:004068C9                 movzx   ecx, byte ptr [edi+4]
.text:004068CD                 cmp     edx, ecx
.text:004068CF                 jge     short loc_4068E5
.text:004068D1
.text:004068D1 loc_4068D1:                             ; CODE XREF: sub_405260+1683↓j
.text:004068D1                 movzx   eax, byte ptr [edx+edi+5]
.text:004068D6                 test    [edx+esi+2], al
.text:004068DA                 jnz     short loc_4068E5
.text:004068DC                 inc     edx
.text:004068DD                 cmp     edx, ebx
.text:004068DF                 jge     short loc_4068E5
.text:004068E1                 cmp     edx, ecx
.text:004068E3                 jl      short loc_4068D1
.text:004068E5
.text:004068E5 loc_4068E5:                             ; CODE XREF: sub_405260+1667↑j
.text:004068E5                                         ; sub_405260+166F↑j ...
.text:004068E5                 movzx   ebp, [esp+0BCh+var_A5]
.text:004068EA                 cmp     edx, ebp
.text:004068EC                 jz      short loc_4068FA
.text:004068EE                 movzx   ebx, byte ptr [edi+4]
.text:004068F2                 cmp     edx, ebx
.text:004068F4
.text:004068F4 loc_4068F4:                             ; CODE XREF: sub_405260+1784↓j
.text:004068F4                 jnz     loc_4067ED
.text:004068FA
.text:004068FA loc_4068FA:                             ; CODE XREF: sub_405260+168C↑j
.text:004068FA                 mov     edx, [esp+0BCh+var_4C]
.text:004068FE                 mov     byte ptr [edx-3], 11h
.text:00406902                 jmp     loc_4067ED
.text:00406907 ; ---------------------------------------------------------------------------
.text:00406907
.text:00406907 loc_406907:                             ; CODE XREF: sub_405260+164E↑j
.text:00406907                 movzx   ebx, byte ptr [esi+1]
.text:0040690B                 xor     ecx, ecx
.text:0040690D                 movzx   eax, bl
.text:00406910                 cmp     ecx, eax
.text:00406912                 jge     short loc_40693A
.text:00406914                 mov     ebp, eax
.text:00406916
.text:00406916 loc_406916:                             ; CODE XREF: sub_405260+16D8↓j
.text:00406916                 movzx   edx, byte ptr [ecx+esi+2]
.text:0040691B                 test    dl, dl
.text:0040691D                 jz      short loc_406935
.text:0040691F                 movzx   eax, byte ptr [edi+4]
.text:00406923                 cmp     ecx, eax
.text:00406925                 jge     short loc_40693A
.text:00406927                 movzx   eax, byte ptr [ecx+edi+5]
.text:0040692C                 movzx   edx, dl
.text:0040692F                 not     eax
.text:00406931                 test    eax, edx
.text:00406933                 jnz     short loc_40693A
.text:00406935
.text:00406935 loc_406935:                             ; CODE XREF: sub_405260+16BD↑j
.text:00406935                 inc     ecx
.text:00406936                 cmp     ecx, ebp
.text:00406938                 jl      short loc_406916
.text:0040693A
.text:0040693A loc_40693A:                             ; CODE XREF: sub_405260+16B2↑j
.text:0040693A                                         ; sub_405260+16C5↑j ...
.text:0040693A                 movzx   esi, bl
.text:0040693D                 cmp     ecx, esi
.text:0040693F                 jnz     loc_4067ED
.text:00406945
.text:00406945 loc_406945:                             ; CODE XREF: sub_405260+155F↑j
.text:00406945                 mov     ecx, [esp+0BCh+var_4C]
.text:00406949                 mov     byte ptr [ecx-3], 11h
.text:0040694D                 jmp     loc_4067ED
.text:00406952 ; ---------------------------------------------------------------------------
.text:00406952
.text:00406952 loc_406952:                             ; CODE XREF: sub_405260+1642↑j
.text:00406952                 movzx   edx, byte ptr [esi+1]
.text:00406956                 movzx   ecx, byte ptr [ebx+5]
.text:0040695A                 shl     edx, 3
.text:0040695D                 movzx   ebp, cl
.text:00406960                 cmp     edx, ebp
.text:00406962                 jle     short loc_40697E
.text:00406964                 mov     dl, cl
.text:00406966                 shr     dl, 3
.text:00406969                 and     ecx, 7
.text:0040696C                 movzx   ebx, dl
.text:0040696F                 movzx   eax, byte ptr [ebx+esi+2]
.text:00406974                 sar     eax, cl
.text:00406976                 test    al, 1
.text:00406978                 jnz     loc_4068A8
.text:0040697E
.text:0040697E loc_40697E:                             ; CODE XREF: sub_405260+1702↑j
.text:0040697E                 mov     edi, [esp+0BCh+var_4C]
.text:00406982                 mov     byte ptr [edi-3], 11h
.text:00406986                 jmp     loc_4067ED
.text:0040698B ; ---------------------------------------------------------------------------
.text:0040698B
.text:0040698B loc_40698B:                             ; CODE XREF: sub_405260+157F↑j
.text:0040698B                 mov     cl, 0Ah
.text:0040698D
.text:0040698D loc_40698D:                             ; CODE XREF: sub_405260+179F↓j
.text:0040698D                 mov     ebx, [esp+0BCh+var_30]
.text:00406994                 mov     esi, ebx
.text:00406996                 cmp     byte ptr [ebx+3], 2
.text:0040699A                 jz      short loc_4069E9
.text:0040699C
.text:0040699C loc_40699C:                             ; CODE XREF: sub_405260+178C↓j
.text:0040699C                 movzx   edx, byte ptr [esi+3]
.text:004069A0                 mov     bl, dl
.text:004069A2                 sub     bl, 4
.text:004069A5                 cmp     bl, 1
.text:004069A8                 ja      loc_4067ED
.text:004069AE                 movzx   edi, byte ptr [esi+4]
.text:004069B2                 xor     ebx, ebx
.text:004069B4                 cmp     dl, 5
.text:004069B7                 setz    bl
.text:004069BA                 movzx   eax, cl
.text:004069BD                 shl     edi, 3
.text:004069C0                 cmp     eax, edi
.text:004069C2                 jnb     short loc_4069E2
.text:004069C4                 mov     al, cl
.text:004069C6                 shr     al, 3
.text:004069C9                 and     ecx, 7
.text:004069CC                 movzx   edx, al
.text:004069CF                 movzx   eax, byte ptr [edx+esi+5]
.text:004069D4                 sar     eax, cl
.text:004069D6                 test    al, 1
.text:004069D8                 jz      short loc_4069E2
.text:004069DA                 test    ebx, ebx
.text:004069DC                 setz    cl
.text:004069DF                 movzx   ebx, cl
.text:004069E2
.text:004069E2 loc_4069E2:                             ; CODE XREF: sub_405260+1762↑j
.text:004069E2                                         ; sub_405260+1778↑j
.text:004069E2                 test    ebx, ebx
.text:004069E4                 jmp     loc_4068F4
.text:004069E9 ; ---------------------------------------------------------------------------
.text:004069E9
.text:004069E9 loc_4069E9:                             ; CODE XREF: sub_405260+173A↑j
.text:004069E9                 cmp     [ebx+5], cl
.text:004069EC                 jz      short loc_40699C
.text:004069EE                 mov     esi, [esp+0BCh+var_4C]
.text:004069F2                 mov     byte ptr [esi-3], 11h
.text:004069F6                 jmp     loc_4067ED
.text:004069FB ; ---------------------------------------------------------------------------
.text:004069FB
.text:004069FB loc_4069FB:                             ; CODE XREF: sub_405260+156A↑j
.text:004069FB                 movzx   ecx, byte ptr [esi+2]
.text:004069FF                 jmp     short loc_40698D
.text:00406A01 ; ---------------------------------------------------------------------------
.text:00406A01
.text:00406A01 loc_406A01:                             ; DATA XREF: .text:00405220↑o
.text:00406A01                 mov     edx, [esp+0BCh+var_4C]
.text:00406A05                 mov     edi, [esp+0BCh+var_60]
.text:00406A09                 mov     ebx, [esp+0BCh+var_64]
.text:00406A0D                 movsx   ecx, byte ptr [edx+1]
.text:00406A11                 mov     esi, [esp+0BCh+var_24]
.text:00406A18                 sub     ebx, edi
.text:00406A1A                 movzx   ebp, byte ptr [edx]
.text:00406A1D                 lea     edi, [ebx+ebx]
.text:00406A20                 shl     ecx, 8
.text:00406A23                 add     edx, 2
.text:00406A26                 lea     eax, [ebx+edi+7]
.text:00406A2A                 mov     [esp+0BCh+var_4C], edx
.text:00406A2E                 add     ebp, ecx
.text:00406A30                 mov     ecx, [esp+0BCh+var_28]
.text:00406A37                 mov     edx, ecx
.text:00406A39                 sub     edx, esi
.text:00406A3B                 cmp     edx, eax
.text:00406A3D                 jnb     short loc_406AB3
.text:00406A3F                 mov     edi, eax
.text:00406A41
.text:00406A41 loc_406A41:                             ; CODE XREF: sub_405260+1851↓j
.text:00406A41                 mov     edx, dword_40F020
.text:00406A47                 lea     esi, [edx+edx*8]
.text:00406A4A                 lea     ebx, [edx+esi*2]
.text:00406A4D                 cmp     ecx, ebx
.text:00406A4F                 ja      loc_4059E1
.text:00406A55                 lea     edx, ds:0[ecx*8]
.text:00406A5C                 mov     [esp+0BCh+Size], edx ; Size
.text:00406A5F                 call    malloc
.text:00406A64                 mov     [esp+0BCh+Size], eax ; void *
.text:00406A67                 mov     esi, [esp+0BCh+var_28]
.text:00406A6E                 mov     ebx, [esp+0BCh+Src]
.text:00406A75                 shl     esi, 2
.text:00406A78                 mov     [esp+0BCh+var_B4], esi ; Size
.text:00406A7C                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:00406A80                 call    memcpy
.text:00406A85                 mov     [esp+0BCh+Src], eax
.text:00406A8C                 test    eax, eax
.text:00406A8E                 jz      loc_4059E1
.text:00406A94                 mov     ebx, [esp+0BCh+var_28]
.text:00406A9B                 mov     esi, [esp+0BCh+var_24]
.text:00406AA2                 add     ebx, ebx
.text:00406AA4                 mov     [esp+0BCh+var_28], ebx
.text:00406AAB                 mov     ecx, ebx
.text:00406AAD                 sub     ebx, esi
.text:00406AAF                 cmp     ebx, edi
.text:00406AB1                 jb      short loc_406A41
.text:00406AB3
.text:00406AB3 loc_406AB3:                             ; CODE XREF: sub_405260+17DD↑j
.text:00406AB3                 mov     ecx, [esp+0BCh+var_60]
.text:00406AB7                 mov     eax, [esp+0BCh+var_64]
.text:00406ABB                 cmp     ecx, eax
.text:00406ABD                 ja      loc_406B73
.text:00406AC3                 mov     ebx, [esp+0BCh+Src]
.text:00406ACA
.text:00406ACA loc_406ACA:                             ; CODE XREF: sub_405260+18C8↓j
.text:00406ACA                 mov     eax, [esp+0BCh+var_68]
.text:00406ACE                 mov     edi, [eax+ecx*4]
.text:00406AD1                 mov     [ebx+esi*4], edi
.text:00406AD4                 mov     edx, [esp+0BCh+var_6C]
.text:00406AD8                 mov     edi, [esp+0BCh+var_24]
.text:00406ADF                 mov     ebx, [esp+0BCh+Src]
.text:00406AE6                 mov     esi, [edx+ecx*4]
.text:00406AE9                 inc     edi
.text:00406AEA                 mov     [esp+0BCh+var_24], edi
.text:00406AF1                 mov     [ebx+edi*4], esi
.text:00406AF4                 mov     edi, [esp+0BCh+var_24]
.text:00406AFB                 mov     eax, [esp+0BCh+var_78]
.text:00406AFF                 mov     ebx, [esp+0BCh+Src]
.text:00406B06                 inc     edi
.text:00406B07                 mov     [esp+0BCh+var_24], edi
.text:00406B0E                 mov     esi, [eax+ecx*4]
.text:00406B11                 inc     ecx
.text:00406B12                 mov     [ebx+edi*4], esi
.text:00406B15                 mov     esi, [esp+0BCh+var_24]
.text:00406B1C                 inc     esi
.text:00406B1D                 cmp     ecx, [esp+0BCh+var_64]
.text:00406B21                 mov     [esp+0BCh+var_24], esi
.text:00406B28                 jbe     short loc_406ACA
.text:00406B2A
.text:00406B2A loc_406B2A:                             ; CODE XREF: sub_405260+191A↓j
.text:00406B2A                 mov     eax, [esp+0BCh+var_60]
.text:00406B2E                 mov     [ebx+esi*4], eax
.text:00406B31                 mov     edi, [esp+0BCh+var_24]
.text:00406B38                 mov     edx, [esp+0BCh+Src]
.text:00406B3F                 mov     esi, [esp+0BCh+var_64]
.text:00406B43                 inc     edi
.text:00406B44                 mov     [esp+0BCh+var_24], edi
.text:00406B4B                 mov     [edx+edi*4], esi
.text:00406B4E                 mov     ebx, [esp+0BCh+var_4C]
.text:00406B52                 mov     ecx, [esp+0BCh+var_24]
.text:00406B59                 add     ebx, ebp
.text:00406B5B                 mov     ebp, [esp+0BCh+Src]
.text:00406B62                 inc     ecx
.text:00406B63                 mov     [esp+0BCh+var_24], ecx
.text:00406B6A                 mov     [ebp+ecx*4+0], ebx
.text:00406B6E                 jmp     loc_4065B4
.text:00406B73 ; ---------------------------------------------------------------------------
.text:00406B73
.text:00406B73 loc_406B73:                             ; CODE XREF: sub_405260+185D↑j
.text:00406B73                 mov     ebx, [esp+0BCh+Src]
.text:00406B7A                 jmp     short loc_406B2A
.text:00406B7C ; ---------------------------------------------------------------------------
.text:00406B7C
.text:00406B7C loc_406B7C:                             ; DATA XREF: .text:0040521C↑o
.text:00406B7C                 jmp     loc_40625D
.text:00406B81 ; ---------------------------------------------------------------------------
.text:00406B81
.text:00406B81 loc_406B81:                             ; DATA XREF: .text:00405218↑o
.text:00406B81                 jmp     loc_4061FA
.text:00406B86 ; ---------------------------------------------------------------------------
.text:00406B86
.text:00406B86 loc_406B86:                             ; DATA XREF: .text:00405210↑o
.text:00406B86                 mov     eax, [esp+0BCh+var_38]
.text:00406B8D                 cmp     [esp+0BCh+var_44], eax
.text:00406B91                 jz      loc_405F02
.text:00406B97                 jmp     loc_4056B2
.text:00406B97 ; ---------------------------------------------------------------------------
.text:00406B9C                 align 10h
.text:00406BA0
.text:00406BA0 loc_406BA0:                             ; DATA XREF: .text:0040520C↑o
.text:00406BA0                 mov     ecx, [esp+0BCh+arg_8]
.text:00406BA7                 test    ecx, ecx
.text:00406BA9                 jz      short loc_406BD0
.text:00406BAB                 mov     ebx, [esp+0BCh+arg_4]
.text:00406BB2                 cmp     [esp+0BCh+var_44], ebx
.text:00406BB6
.text:00406BB6 loc_406BB6:                             ; CODE XREF: sub_405260+197B↓j
.text:00406BB6                 jz      loc_405E30
.text:00406BBC                 mov     edi, [esp+0BCh+arg_10]
.text:00406BC3                 test    edi, edi
.text:00406BC5
.text:00406BC5 loc_406BC5:                             ; CODE XREF: sub_405260+19D7↓j
.text:00406BC5                 jz      loc_405E30
.text:00406BCB                 jmp     loc_4056B2
.text:00406BD0 ; ---------------------------------------------------------------------------
.text:00406BD0
.text:00406BD0 loc_406BD0:                             ; CODE XREF: sub_405260+1949↑j
.text:00406BD0                 mov     esi, [esp+0BCh+arg_C]
.text:00406BD7                 cmp     [esp+0BCh+var_44], esi
.text:00406BDB                 jmp     short loc_406BB6
.text:00406BDD ; ---------------------------------------------------------------------------
.text:00406BDD
.text:00406BDD loc_406BDD:                             ; DATA XREF: .text:00405208↑o
.text:00406BDD                 mov     ebx, [esp+0BCh+var_38]
.text:00406BE4                 cmp     [esp+0BCh+var_44], ebx
.text:00406BE8                 jz      short loc_406C2C
.text:00406BEA                 mov     edi, [esp+0BCh+var_34]
.text:00406BF1                 cmp     [esp+0BCh+var_44], edi
.text:00406BF5                 jz      short loc_406C20
.text:00406BF7                 mov     edx, [esp+0BCh+var_44]
.text:00406BFB                 cmp     byte ptr [edx], 0Ah
.text:00406BFE
.text:00406BFE loc_406BFE:                             ; CODE XREF: sub_405260+19CA↓j
.text:00406BFE                                         ; sub_405260+1A14↓j
.text:00406BFE                 jnz     loc_4056B2
.text:00406C04                 mov     ebp, [esp+0BCh+arg_0]
.text:00406C0B                 test    byte ptr [ebp+1Ch], 80h
.text:00406C0F                 jnz     loc_405A8B      ; jumptable 004054D7 case 0
.text:00406C0F                                         ; jumptable 00405E56 case 0
.text:00406C0F                                         ; jumptable 00405F28 case 0
.text:00406C15                 jmp     loc_4056B2
.text:00406C15 ; ---------------------------------------------------------------------------
.text:00406C1A                 align 10h
.text:00406C20
.text:00406C20 loc_406C20:                             ; CODE XREF: sub_405260+1995↑j
.text:00406C20                 mov     eax, [esp+0BCh+arg_C]
.text:00406C27                 cmp     byte ptr [eax], 0Ah
.text:00406C2A                 jmp     short loc_406BFE
.text:00406C2C ; ---------------------------------------------------------------------------
.text:00406C2C
.text:00406C2C loc_406C2C:                             ; CODE XREF: sub_405260+1988↑j
.text:00406C2C                 mov     esi, [esp+0BCh+arg_0]
.text:00406C33                 test    byte ptr [esi+1Ch], 40h
.text:00406C37                 jmp     short loc_406BC5
.text:00406C39 ; ---------------------------------------------------------------------------
.text:00406C39
.text:00406C39 loc_406C39:                             ; DATA XREF: .text:00405204↑o
.text:00406C39                 mov     ebx, [esp+0BCh+arg_8]
.text:00406C40                 test    ebx, ebx
.text:00406C42                 jz      short loc_406C76
.text:00406C44                 mov     edi, [esp+0BCh+arg_4]
.text:00406C4B                 cmp     [esp+0BCh+var_44], edi
.text:00406C4F
.text:00406C4F loc_406C4F:                             ; CODE XREF: sub_405260+1A21↓j
.text:00406C4F                 jz      short loc_406C5C
.text:00406C51                 mov     edx, [esp+0BCh+arg_10]
.text:00406C58                 test    edx, edx
.text:00406C5A                 jnz     short loc_406C6C
.text:00406C5C
.text:00406C5C loc_406C5C:                             ; CODE XREF: sub_405260:loc_406C4F↑j
.text:00406C5C                 mov     ebp, [esp+0BCh+arg_0]
.text:00406C63                 test    byte ptr [ebp+1Ch], 20h
.text:00406C67                 jmp     loc_405D04
.text:00406C6C ; ---------------------------------------------------------------------------
.text:00406C6C
.text:00406C6C loc_406C6C:                             ; CODE XREF: sub_405260+19FA↑j
.text:00406C6C                 mov     ecx, [esp+0BCh+var_44]
.text:00406C70                 cmp     byte ptr [ecx-1], 0Ah
.text:00406C74                 jmp     short loc_406BFE
.text:00406C76 ; ---------------------------------------------------------------------------
.text:00406C76
.text:00406C76 loc_406C76:                             ; CODE XREF: sub_405260+19E2↑j
.text:00406C76                 mov     eax, [esp+0BCh+arg_C]
.text:00406C7D                 cmp     [esp+0BCh+var_44], eax
.text:00406C81                 jmp     short loc_406C4F
.text:00406C83 ; ---------------------------------------------------------------------------
.text:00406C83
.text:00406C83 loc_406C83:                             ; DATA XREF: .text:00405200↑o
.text:00406C83                 mov     eax, [esp+0BCh+var_4C]
.text:00406C87                 mov     ecx, [esp+0BCh+var_68]
.text:00406C8B                 movzx   esi, byte ptr [eax]
.text:00406C8E                 inc     [esp+0BCh+var_4C]
.text:00406C92                 mov     edi, [ecx+esi*4]
.text:00406C95                 mov     [esp+0BCh+var_A4], esi
.text:00406C99                 cmp     edi, offset unk_410250
.text:00406C9F                 jz      loc_4056B2
.text:00406CA5                 mov     ebp, [esp+0BCh+var_6C]
.text:00406CA9                 mov     eax, [ebp+esi*4+0]
.text:00406CAD                 cmp     eax, offset unk_410250
.text:00406CB2                 jz      loc_4056B2
.text:00406CB8                 mov     [esp+0BCh+var_A0], edi
.text:00406CBC                 mov     esi, [esp+0BCh+arg_8]
.text:00406CC3                 xor     ecx, ecx
.text:00406CC5                 test    esi, esi
.text:00406CC7                 jz      short loc_406CDD
.text:00406CC9                 cmp     [esp+0BCh+arg_4], edi
.text:00406CD0                 ja      short loc_406CDD
.text:00406CD2                 mov     edx, [esp+0BCh+var_34]
.text:00406CD9                 cmp     edi, edx
.text:00406CDB                 jbe     short loc_406CE2
.text:00406CDD
.text:00406CDD loc_406CDD:                             ; CODE XREF: sub_405260+1A67↑j
.text:00406CDD                                         ; sub_405260+1A70↑j
.text:00406CDD                 mov     ecx, 1
.text:00406CE2
.text:00406CE2 loc_406CE2:                             ; CODE XREF: sub_405260+1A7B↑j
.text:00406CE2                 mov     edi, [esp+0BCh+arg_8]
.text:00406CE9                 xor     edx, edx
.text:00406CEB                 test    edi, edi
.text:00406CED                 jz      short loc_406D06
.text:00406CEF                 cmp     [esp+0BCh+arg_4], eax
.text:00406CF6                 ja      short loc_406D06
.text:00406CF8                 cmp     eax, [esp+0BCh+var_34]
.text:00406CFF                 ja      short loc_406D06
.text:00406D01                 mov     edx, 1
.text:00406D06
.text:00406D06 loc_406D06:                             ; CODE XREF: sub_405260+1A8D↑j
.text:00406D06                                         ; sub_405260+1A96↑j ...
.text:00406D06                 cmp     ecx, edx
.text:00406D08                 mov     ebx, eax
.text:00406D0A                 jnz     short loc_406D13
.text:00406D0C                 mov     ebx, [esp+0BCh+var_3C]
.text:00406D13
.text:00406D13 loc_406D13:                             ; CODE XREF: sub_405260+1AAA↑j
.text:00406D13                                         ; sub_405260+1B21↓j ...
.text:00406D13                 cmp     [esp+0BCh+var_A0], ebx
.text:00406D17                 jz      loc_406DE6
.text:00406D1D
.text:00406D1D loc_406D1D:                             ; CODE XREF: sub_405260+1BAC↓j
.text:00406D1D                                         ; sub_405260+1BB5↓j
.text:00406D1D                 mov     eax, [esp+0BCh+var_48]
.text:00406D21                 cmp     [esp+0BCh+var_44], eax
.text:00406D25                 jz      loc_406DC0
.text:00406D2B
.text:00406D2B loc_406D2B:                             ; CODE XREF: sub_405260+1B81↓j
.text:00406D2B                 mov     ecx, [esp+0BCh+var_44]
.text:00406D2F                 mov     ebp, [esp+0BCh+var_48]
.text:00406D33                 mov     edx, [esp+0BCh+var_A0]
.text:00406D37                 sub     ebp, ecx
.text:00406D39                 mov     ecx, ebx
.text:00406D3B                 sub     ecx, edx
.text:00406D3D                 cmp     ebp, ecx
.text:00406D3F                 jle     short loc_406D43
.text:00406D41                 mov     ebp, ecx
.text:00406D43
.text:00406D43 loc_406D43:                             ; CODE XREF: sub_405260+1ADF↑j
.text:00406D43                 mov     esi, [esp+0BCh+var_58]
.text:00406D47                 test    esi, esi
.text:00406D49                 jz      short loc_406DAF
.text:00406D4B                 mov     [esp+0BCh+var_B4], ebp
.text:00406D4F                 mov     edx, [esp+0BCh+var_58]
.text:00406D53                 mov     eax, [esp+0BCh+var_A0]
.text:00406D57                 mov     edi, [esp+0BCh+var_44]
.text:00406D5B                 mov     [esp+0BCh+var_B0], edx
.text:00406D5F                 mov     [esp+0BCh+var_B8], eax
.text:00406D63                 mov     [esp+0BCh+Size], edi
.text:00406D66                 call    sub_407920
.text:00406D6B                 test    eax, eax
.text:00406D6D
.text:00406D6D loc_406D6D:                             ; CODE XREF: sub_405260+1B5E↓j
.text:00406D6D                 jnz     loc_4056B2
.text:00406D73                 add     [esp+0BCh+var_44], ebp
.text:00406D77                 add     [esp+0BCh+var_A0], ebp
.text:00406D7B                 mov     ebp, [esp+0BCh+var_8C]
.text:00406D7F                 test    ebp, ebp
.text:00406D81                 jnz     short loc_406D13
.text:00406D83                 mov     [esp+0BCh+var_8C], 1
.text:00406D8B                 mov     eax, [esp+0BCh+var_60]
.text:00406D8F                 mov     ecx, [esp+0BCh+var_64]
.text:00406D93                 cmp     eax, ecx
.text:00406D95                 ja      loc_406D13
.text:00406D9B
.text:00406D9B loc_406D9B:                             ; CODE XREF: sub_405260+1B48↓j
.text:00406D9B                 mov     esi, [esp+0BCh+var_78]
.text:00406D9F                 or      byte ptr [esi+eax*4], 18h
.text:00406DA3                 inc     eax
.text:00406DA4                 cmp     eax, [esp+0BCh+var_64]
.text:00406DA8                 jbe     short loc_406D9B
.text:00406DAA                 jmp     loc_406D13
.text:00406DAF ; ---------------------------------------------------------------------------
.text:00406DAF
.text:00406DAF loc_406DAF:                             ; CODE XREF: sub_405260+1AE9↑j
.text:00406DAF                 cld
.text:00406DB0                 mov     esi, [esp+0BCh+var_44]
.text:00406DB4                 cmp     ebp, ebp
.text:00406DB6                 mov     edi, [esp+0BCh+var_A0]
.text:00406DBA                 mov     ecx, ebp
.text:00406DBC                 repe cmpsb
.text:00406DBE                 jmp     short loc_406D6D
.text:00406DC0 ; ---------------------------------------------------------------------------
.text:00406DC0
.text:00406DC0 loc_406DC0:                             ; CODE XREF: sub_405260+1AC5↑j
.text:00406DC0                                         ; sub_405260+1B7F↓j
.text:00406DC0                 mov     eax, [esp+0BCh+var_40]
.text:00406DC4                 cmp     [esp+0BCh+var_48], eax
.text:00406DC8                 jz      loc_4056B2
.text:00406DCE                 mov     [esp+0BCh+var_48], eax
.text:00406DD2                 mov     edi, [esp+0BCh+arg_C]
.text:00406DD9                 cmp     edi, eax
.text:00406DDB                 mov     [esp+0BCh+var_44], edi
.text:00406DDF                 jz      short loc_406DC0
.text:00406DE1                 jmp     loc_406D2B
.text:00406DE6 ; ---------------------------------------------------------------------------
.text:00406DE6
.text:00406DE6 loc_406DE6:                             ; CODE XREF: sub_405260+1AB7↑j
.text:00406DE6                                         ; sub_405260+1BAA↓j
.text:00406DE6                 cmp     ebx, [esp+0BCh+var_40]
.text:00406DEA                 jz      short loc_406E11
.text:00406DEC                 mov     ebp, [esp+0BCh+var_A4]
.text:00406DF0                 mov     ecx, [esp+0BCh+var_6C]
.text:00406DF4                 mov     eax, [ecx+ebp*4]
.text:00406DF7                 cmp     ebx, eax
.text:00406DF9                 jz      short loc_406E11
.text:00406DFB                 mov     esi, [esp+0BCh+arg_C]
.text:00406E02                 mov     ebx, eax
.text:00406E04                 cmp     esi, eax
.text:00406E06                 mov     [esp+0BCh+var_A0], esi
.text:00406E0A                 jz      short loc_406DE6
.text:00406E0C                 jmp     loc_406D1D
.text:00406E11 ; ---------------------------------------------------------------------------
.text:00406E11
.text:00406E11 loc_406E11:                             ; CODE XREF: sub_405260+1B8A↑j
.text:00406E11                                         ; sub_405260+1B99↑j
.text:00406E11                 cmp     [esp+0BCh+var_A0], ebx
.text:00406E15                 jnz     loc_406D1D
.text:00406E1B                 jmp     loc_405C3E
.text:00406E20 ; ---------------------------------------------------------------------------
.text:00406E20
.text:00406E20 loc_406E20:                             ; CODE XREF: sub_405260+A04↑j
.text:00406E20                                         ; DATA XREF: .text:jpt_405C64↑o
.text:00406E20                 mov     esi, [esp+0BCh+var_4C] ; jumptable 00405C64 case 7
.text:00406E24                 mov     ebx, [esp+0BCh+var_78]
.text:00406E28                 movzx   edx, byte ptr [esi]
.text:00406E2B                 test    byte ptr [ebx+edx*4], 3
.text:00406E2F                 jz      loc_407217
.text:00406E35                 mov     edi, [esp+0BCh+var_6C]
.text:00406E39                 mov     eax, [edi+edx*4]
.text:00406E3C                 cmp     eax, offset unk_410250
.text:00406E41                 jz      loc_40720E
.text:00406E47
.text:00406E47 loc_406E47:                             ; CODE XREF: sub_405260+1FB2↓j
.text:00406E47                                         ; sub_405260+1FBF↓j
.text:00406E47                 mov     ecx, [esp+0BCh+var_74]
.text:00406E4B                 mov     edi, [esp+0BCh+var_6C]
.text:00406E4F                 mov     ebx, [esp+0BCh+var_78]
.text:00406E53                 mov     [ecx+edx*4], eax
.text:00406E56                 mov     edx, [esp+0BCh+var_4C]
.text:00406E5A                 mov     eax, [esp+0BCh+var_44]
.text:00406E5E                 movzx   ebp, byte ptr [edx]
.text:00406E61                 mov     [edi+ebp*4], eax
.text:00406E64                 movzx   esi, byte ptr [edx]
.text:00406E67                 and     byte ptr [ebx+esi*4], 0FBh
.text:00406E6B                 mov     [esp+0BCh+var_8C], 0
.text:00406E73                 mov     ecx, [esp+0BCh+var_64]
.text:00406E77                 cmp     [esp+0BCh+var_60], ecx
.text:00406E7B                 jz      loc_4071F6
.text:00406E81                 mov     ebx, [esp+0BCh+var_4C]
.text:00406E85                 movzx   ecx, byte ptr [ebx]
.text:00406E88                 mov     dl, cl
.text:00406E8A                 dec     dl
.text:00406E8C                 jz      short loc_406EB5
.text:00406E8E                 mov     esi, [esp+0BCh+var_78]
.text:00406E92                 movzx   edi, dl
.text:00406E95                 test    byte ptr [esi+edi*4], 4
.text:00406E99                 jnz     short loc_406EAD
.text:00406E9B
.text:00406E9B loc_406E9B:                             ; CODE XREF: sub_405260+1C4B↓j
.text:00406E9B                 dec     dl
.text:00406E9D                 jz      short loc_406EB5
.text:00406E9F                 mov     ebp, [esp+0BCh+var_78]
.text:00406EA3                 movzx   ebx, dl
.text:00406EA6                 test    byte ptr [ebp+ebx*4+0], 4
.text:00406EAB                 jz      short loc_406E9B
.text:00406EAD
.text:00406EAD loc_406EAD:                             ; CODE XREF: sub_405260+1C39↑j
.text:00406EAD                 test    dl, dl
.text:00406EAF                 jnz     loc_4071EA
.text:00406EB5
.text:00406EB5 loc_406EB5:                             ; CODE XREF: sub_405260+1C2C↑j
.text:00406EB5                                         ; sub_405260+1C3D↑j
.text:00406EB5                 mov     [esp+0BCh+var_60], 101h
.text:00406EBD                 mov     [esp+0BCh+var_64], 100h
.text:00406EC5
.text:00406EC5 loc_406EC5:                             ; CODE XREF: sub_405260+1F91↓j
.text:00406EC5                                         ; sub_405260+1FA9↓j
.text:00406EC5                 movzx   edx, cl
.text:00406EC8                 mov     ecx, [esp+0BCh+var_78]
.text:00406ECC                 test    byte ptr [ecx+edx*4], 8
.text:00406ED0                 jz      short loc_406F05
.text:00406ED2                 mov     esi, [esp+0BCh+var_4C]
.text:00406ED6                 mov     edi, [esp+0BCh+var_4C]
.text:00406EDA                 dec     esi
.text:00406EDB                 cmp     [esp+0BCh+var_54], esi
.text:00406EDF                 lea     ecx, [edi+2]
.text:00406EE2                 jz      short loc_406F05
.text:00406EE4
.text:00406EE4 loc_406EE4:                             ; CODE XREF: sub_405260+1CB0↓j
.text:00406EE4                                         ; sub_405260+1D01↓j ...
.text:00406EE4                 mov     [esp+0BCh+var_4C], ecx
.text:00406EE8                 mov     ebp, [esp+0BCh+var_50]
.text:00406EEC                 mov     eax, offset loc_4054D9
.text:00406EF1                 cmp     ecx, ebp
.text:00406EF3                 jz      loc_4054D7
.text:00406EF9                 movzx   ebx, byte ptr [ecx]
.text:00406EFC                 inc     [esp+0BCh+var_4C]
.text:00406F00                 jmp     loc_4054D0
.text:00406F05 ; ---------------------------------------------------------------------------
.text:00406F05
.text:00406F05 loc_406F05:                             ; CODE XREF: sub_405260+1C70↑j
.text:00406F05                                         ; sub_405260+1C82↑j
.text:00406F05                 mov     ecx, [esp+0BCh+var_4C]
.text:00406F09                 add     ecx, 2
.text:00406F0C                 cmp     ecx, [esp+0BCh+var_50]
.text:00406F10                 jnb     short loc_406EE4
.text:00406F12                 mov     [esp+0BCh+var_30], ecx
.text:00406F19                 mov     ebx, [esp+0BCh+var_4C]
.text:00406F1D                 xor     ebp, ebp
.text:00406F1F                 mov     [esp+0BCh+var_97], 0
.text:00406F24                 mov     edx, ebx
.text:00406F26                 add     edx, 3
.text:00406F29                 movzx   eax, byte ptr [ebx+2]
.text:00406F2D                 mov     [esp+0BCh+var_30], edx
.text:00406F34                 cmp     eax, 13h
.text:00406F37                 ja      loc_4071DA
.text:00406F3D                 cmp     eax, 11h
.text:00406F40                 jnb     loc_4071A3
.text:00406F46                 cmp     eax, 0Dh
.text:00406F49                 jz      loc_4071A3
.text:00406F4F
.text:00406F4F loc_406F4F:                             ; CODE XREF: sub_405260+1F65↓j
.text:00406F4F                                         ; sub_405260+1F75↓j ...
.text:00406F4F                 mov     ebx, [esp+0BCh+var_30]
.text:00406F56                 add     ebx, ebp
.text:00406F58                 test    ebp, ebp
.text:00406F5A                 mov     [esp+0BCh+var_30], ebx
.text:00406F61                 jns     short loc_406EE4
.text:00406F63                 cmp     byte ptr [ebx], 0Fh
.text:00406F66                 jnz     loc_406EE4
.text:00406F6C                 cmp     byte ptr [ebx+3], 6
.text:00406F70                 jnz     loc_406EE4
.text:00406F76                 movzx   eax, byte ptr [ebx+4]
.text:00406F7A                 mov     ebp, [esp+0BCh+var_4C]
.text:00406F7E                 cmp     al, [ebp+0]
.text:00406F81                 jnz     loc_406EE4
.text:00406F87                 mov     ecx, [esp+0BCh+var_78]
.text:00406F8B                 movzx   edx, al
.text:00406F8E                 movzx   eax, byte ptr [ecx+edx*4]
.text:00406F92                 test    al, 10h
.text:00406F94                 jz      short loc_406FE8
.text:00406F96                 and     al, 0EFh
.text:00406F98                 mov     [ecx+edx*4], al
.text:00406F9B                 mov     eax, [esp+0BCh+var_4C]
.text:00406F9F                 movzx   ecx, byte ptr [eax]
.text:00406FA2                 movzx   esi, byte ptr [eax+1]
.text:00406FA6                 lea     edx, [esi+ecx]
.text:00406FA9                 cmp     ecx, edx
.text:00406FAB                 jnb     short loc_406FE1
.text:00406FAD
.text:00406FAD loc_406FAD:                             ; CODE XREF: sub_405260+1D7F↓j
.text:00406FAD                 mov     edx, [esp+0BCh+var_70]
.text:00406FB1                 mov     ebx, [esp+0BCh+var_68]
.text:00406FB5                 mov     ebp, [esp+0BCh+var_74]
.text:00406FB9                 mov     edi, [edx+ecx*4]
.text:00406FBC                 mov     [ebx+ecx*4], edi
.text:00406FBF                 mov     edx, [ebp+ecx*4+0]
.text:00406FC3                 cmp     edx, edi
.text:00406FC5                 jb      short loc_406FCE
.text:00406FC7                 mov     eax, [esp+0BCh+var_6C]
.text:00406FCB                 mov     [eax+ecx*4], edx
.text:00406FCE
.text:00406FCE loc_406FCE:                             ; CODE XREF: sub_405260+1D65↑j
.text:00406FCE                 mov     ebp, [esp+0BCh+var_4C]
.text:00406FD2                 inc     ecx
.text:00406FD3                 movzx   esi, byte ptr [ebp+0]
.text:00406FD7                 movzx   edi, byte ptr [ebp+1]
.text:00406FDB                 add     esi, edi
.text:00406FDD                 cmp     ecx, esi
.text:00406FDF                 jb      short loc_406FAD
.text:00406FE1
.text:00406FE1 loc_406FE1:                             ; CODE XREF: sub_405260+1D4B↑j
.text:00406FE1                 mov     ebx, [esp+0BCh+var_30]
.text:00406FE8
.text:00406FE8 loc_406FE8:                             ; CODE XREF: sub_405260+1D34↑j
.text:00406FE8                 mov     esi, ebx
.text:00406FEA                 mov     eax, [esp+0BCh+var_60]
.text:00406FEE                 inc     ebx
.text:00406FEF                 mov     [esp+0BCh+var_30], ebx
.text:00406FF6                 lea     ecx, [esi+3]
.text:00406FF9                 mov     edi, [esp+0BCh+var_28]
.text:00407000                 movsx   edx, byte ptr [ebx+1]
.text:00407004                 movzx   ebp, byte ptr [esi+1]
.text:00407008                 mov     esi, [esp+0BCh+var_24]
.text:0040700F                 mov     [esp+0BCh+var_30], ecx
.text:00407016                 mov     ecx, [esp+0BCh+var_64]
.text:0040701A                 shl     edx, 8
.text:0040701D                 add     ebp, edx
.text:0040701F                 mov     edx, edi
.text:00407021                 sub     ecx, eax
.text:00407023                 lea     ebx, [ecx+ecx]
.text:00407026                 sub     edx, esi
.text:00407028                 lea     eax, [ecx+ebx+7]
.text:0040702C                 cmp     edx, eax
.text:0040702E                 jnb     short loc_4070A8
.text:00407030                 mov     [esp+0BCh+var_9C], eax
.text:00407034
.text:00407034 loc_407034:                             ; CODE XREF: sub_405260+1E46↓j
.text:00407034                 mov     edx, dword_40F020
.text:0040703A                 lea     esi, [edx+edx*8]
.text:0040703D                 lea     ebx, [edx+esi*2]
.text:00407040                 cmp     edi, ebx
.text:00407042                 ja      loc_4059E1
.text:00407048                 lea     esi, ds:0[edi*8]
.text:0040704F                 mov     [esp+0BCh+Size], esi ; Size
.text:00407052                 call    malloc
.text:00407057                 mov     [esp+0BCh+Size], eax ; void *
.text:0040705A                 mov     ebx, [esp+0BCh+var_28]
.text:00407061                 mov     ecx, [esp+0BCh+Src]
.text:00407068                 shl     ebx, 2
.text:0040706B                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:0040706F                 mov     [esp+0BCh+var_B8], ecx ; Src
.text:00407073                 call    memcpy
.text:00407078                 mov     [esp+0BCh+Src], eax
.text:0040707F                 test    eax, eax
.text:00407081                 jz      loc_4059E1
.text:00407087                 mov     edx, [esp+0BCh+var_28]
.text:0040708E                 mov     esi, [esp+0BCh+var_24]
.text:00407095                 add     edx, edx
.text:00407097                 mov     [esp+0BCh+var_28], edx
.text:0040709E                 mov     edi, edx
.text:004070A0                 sub     edx, esi
.text:004070A2                 cmp     edx, [esp+0BCh+var_9C]
.text:004070A6                 jb      short loc_407034
.text:004070A8
.text:004070A8 loc_4070A8:                             ; CODE XREF: sub_405260+1DCE↑j
.text:004070A8                 mov     ecx, [esp+0BCh+var_60]
.text:004070AC                 mov     eax, [esp+0BCh+var_64]
.text:004070B0                 cmp     ecx, eax
.text:004070B2                 ja      loc_407197
.text:004070B8                 mov     ebx, [esp+0BCh+Src]
.text:004070BF
.text:004070BF loc_4070BF:                             ; CODE XREF: sub_405260+1EBD↓j
.text:004070BF                 mov     eax, [esp+0BCh+var_68]
.text:004070C3                 mov     edi, [eax+ecx*4]
.text:004070C6                 mov     [ebx+esi*4], edi
.text:004070C9                 mov     edx, [esp+0BCh+var_6C]
.text:004070CD                 mov     edi, [esp+0BCh+var_24]
.text:004070D4                 mov     ebx, [esp+0BCh+Src]
.text:004070DB                 mov     esi, [edx+ecx*4]
.text:004070DE                 inc     edi
.text:004070DF                 mov     [esp+0BCh+var_24], edi
.text:004070E6                 mov     [ebx+edi*4], esi
.text:004070E9                 mov     edi, [esp+0BCh+var_24]
.text:004070F0                 mov     eax, [esp+0BCh+var_78]
.text:004070F4                 mov     ebx, [esp+0BCh+Src]
.text:004070FB                 inc     edi
.text:004070FC                 mov     [esp+0BCh+var_24], edi
.text:00407103                 mov     esi, [eax+ecx*4]
.text:00407106                 inc     ecx
.text:00407107                 mov     [ebx+edi*4], esi
.text:0040710A                 mov     esi, [esp+0BCh+var_24]
.text:00407111                 inc     esi
.text:00407112                 cmp     ecx, [esp+0BCh+var_64]
.text:00407116                 mov     [esp+0BCh+var_24], esi
.text:0040711D                 jbe     short loc_4070BF
.text:0040711F
.text:0040711F loc_40711F:                             ; CODE XREF: sub_405260+1F3E↓j
.text:0040711F                 mov     edi, [esp+0BCh+var_60]
.text:00407123                 mov     [ebx+esi*4], edi
.text:00407126                 mov     eax, [esp+0BCh+var_24]
.text:0040712D                 mov     ecx, [esp+0BCh+Src]
.text:00407134                 mov     edx, [esp+0BCh+var_64]
.text:00407138                 inc     eax
.text:00407139                 mov     [esp+0BCh+var_24], eax
.text:00407140                 mov     [ecx+eax*4], edx
.text:00407143                 mov     edi, [esp+0BCh+var_24]
.text:0040714A                 mov     esi, [esp+0BCh+var_30]
.text:00407151                 mov     edx, [esp+0BCh+Src]
.text:00407158                 inc     edi
.text:00407159                 add     ebp, esi
.text:0040715B                 mov     [esp+0BCh+var_24], edi
.text:00407162                 mov     [edx+edi*4], ebp
.text:00407165                 mov     ecx, [esp+0BCh+var_24]
.text:0040716C                 mov     ebp, [esp+0BCh+Src]
.text:00407173                 mov     ebx, [esp+0BCh+var_44]
.text:00407177                 inc     ecx
.text:00407178                 mov     [esp+0BCh+var_24], ecx
.text:0040717F                 mov     [ebp+ecx*4+0], ebx
.text:00407183                 mov     esi, [esp+0BCh+var_24]
.text:0040718A                 inc     esi
.text:0040718B                 mov     [esp+0BCh+var_24], esi
.text:00407192                 jmp     loc_405590
.text:00407197 ; ---------------------------------------------------------------------------
.text:00407197
.text:00407197 loc_407197:                             ; CODE XREF: sub_405260+1E52↑j
.text:00407197                 mov     ebx, [esp+0BCh+Src]
.text:0040719E                 jmp     loc_40711F
.text:004071A3 ; ---------------------------------------------------------------------------
.text:004071A3
.text:004071A3 loc_4071A3:                             ; CODE XREF: sub_405260+1CE0↑j
.text:004071A3                                         ; sub_405260+1CE9↑j ...
.text:004071A3                 mov     edx, [esp+0BCh+var_30]
.text:004071AA                 lea     eax, [edx+2]
.text:004071AD                 movsx   esi, byte ptr [edx+1]
.text:004071B1                 movzx   ebp, byte ptr [edx]
.text:004071B4                 mov     [esp+0BCh+var_30], eax
.text:004071BB                 shl     esi, 8
.text:004071BE                 add     ebp, esi
.text:004071C0                 cmp     [esp+0BCh+var_97], 0
.text:004071C5                 jz      loc_406F4F
.text:004071CB                 lea     edi, [edx+4]
.text:004071CE                 mov     [esp+0BCh+var_30], edi
.text:004071D5                 jmp     loc_406F4F
.text:004071DA ; ---------------------------------------------------------------------------
.text:004071DA
.text:004071DA loc_4071DA:                             ; CODE XREF: sub_405260+1CD7↑j
.text:004071DA                 cmp     eax, 16h
.text:004071DD                 jnz     loc_406F4F
.text:004071E3                 mov     [esp+0BCh+var_97], 1
.text:004071E8                 jmp     short loc_4071A3
.text:004071EA ; ---------------------------------------------------------------------------
.text:004071EA
.text:004071EA loc_4071EA:                             ; CODE XREF: sub_405260+1C4F↑j
.text:004071EA                 movzx   eax, dl
.text:004071ED                 mov     [esp+0BCh+var_64], eax
.text:004071F1                 jmp     loc_406EC5
.text:004071F6 ; ---------------------------------------------------------------------------
.text:004071F6
.text:004071F6 loc_4071F6:                             ; CODE XREF: sub_405260+1C1B↑j
.text:004071F6                 mov     [esp+0BCh+var_60], 101h
.text:004071FE                 mov     [esp+0BCh+var_64], 100h
.text:00407206                 movzx   ecx, byte ptr [edx]
.text:00407209                 jmp     loc_406EC5
.text:0040720E ; ---------------------------------------------------------------------------
.text:0040720E
.text:0040720E loc_40720E:                             ; CODE XREF: sub_405260+1BE1↑j
.text:0040720E                 mov     eax, [esp+0BCh+var_44]
.text:00407212                 jmp     loc_406E47
.text:00407217 ; ---------------------------------------------------------------------------
.text:00407217
.text:00407217 loc_407217:                             ; CODE XREF: sub_405260+1BCF↑j
.text:00407217                 mov     ebp, [esp+0BCh+var_6C]
.text:0040721B                 mov     eax, [ebp+edx*4+0]
.text:0040721F                 jmp     loc_406E47
.text:00407224 ; ---------------------------------------------------------------------------
.text:00407224
.text:00407224 loc_407224:                             ; CODE XREF: sub_405260+A04↑j
.text:00407224                                         ; DATA XREF: .text:jpt_405C64↑o
.text:00407224                 mov     ebx, [esp+0BCh+var_4C] ; jumptable 00405C64 case 6
.text:00407228                 mov     edx, [esp+0BCh+var_78]
.text:0040722C                 mov     [esp+0BCh+var_30], ebx
.text:00407233                 movzx   ecx, byte ptr [ebx]
.text:00407236                 movzx   esi, cl
.text:00407239                 movzx   ebp, byte ptr [edx+esi*4]
.text:0040723D                 and     ebp, 3
.text:00407240                 cmp     ebp, 3
.text:00407243                 jz      loc_4072D4
.text:00407249
.text:00407249 loc_407249:                             ; CODE XREF: sub_405260+20A6↓j
.text:00407249                 mov     esi, [esp+0BCh+var_78]
.text:0040724D                 movzx   edx, cl
.text:00407250                 test    byte ptr [esi+edx*4], 3
.text:00407254                 jz      short loc_4072CB
.text:00407256                 mov     ebx, [esp+0BCh+var_68]
.text:0040725A                 mov     eax, [ebx+edx*4]
.text:0040725D                 cmp     eax, offset unk_410250
.text:00407262                 jz      short loc_4072C5
.text:00407264
.text:00407264 loc_407264:                             ; CODE XREF: sub_405260+2069↓j
.text:00407264                                         ; sub_405260+2072↓j
.text:00407264                 mov     ebp, [esp+0BCh+var_70]
.text:00407268                 mov     ebx, [esp+0BCh+var_68]
.text:0040726C                 mov     ecx, [esp+0BCh+var_78]
.text:00407270                 mov     [ebp+edx*4+0], eax
.text:00407274                 mov     ebp, [esp+0BCh+var_4C]
.text:00407278                 mov     eax, [esp+0BCh+var_44]
.text:0040727C                 movzx   edi, byte ptr [ebp+0]
.text:00407280                 mov     [ebx+edi*4], eax
.text:00407283                 movzx   esi, byte ptr [ebp+0]
.text:00407287                 or      byte ptr [ecx+esi*4], 4
.text:0040728B                 movzx   edx, byte ptr [ebp+0]
.text:0040728F                 and     byte ptr [ecx+edx*4], 0F7h
.text:00407293                 mov     [esp+0BCh+var_8C], 0
.text:0040729B                 movzx   esi, byte ptr [ebp+0]
.text:0040729F                 cmp     [esp+0BCh+var_60], 101h
.text:004072A7                 mov     [esp+0BCh+var_64], esi
.text:004072AB                 jz      short loc_4072BF
.text:004072AD
.text:004072AD loc_4072AD:                             ; CODE XREF: sub_405260+2063↓j
.text:004072AD                 add     [esp+0BCh+var_4C], 2
.text:004072B2                 mov     ecx, [esp+0BCh+var_4C]
.text:004072B6                 mov     [esp+0BCh+var_54], ecx
.text:004072BA                 jmp     loc_405E30
.text:004072BF ; ---------------------------------------------------------------------------
.text:004072BF
.text:004072BF loc_4072BF:                             ; CODE XREF: sub_405260+204B↑j
.text:004072BF                 mov     [esp+0BCh+var_60], esi
.text:004072C3                 jmp     short loc_4072AD
.text:004072C5 ; ---------------------------------------------------------------------------
.text:004072C5
.text:004072C5 loc_4072C5:                             ; CODE XREF: sub_405260+2002↑j
.text:004072C5                 mov     eax, [esp+0BCh+var_44]
.text:004072C9                 jmp     short loc_407264
.text:004072CB ; ---------------------------------------------------------------------------
.text:004072CB
.text:004072CB loc_4072CB:                             ; CODE XREF: sub_405260+1FF4↑j
.text:004072CB                 mov     edi, [esp+0BCh+var_68]
.text:004072CF                 mov     eax, [edi+edx*4]
.text:004072D2                 jmp     short loc_407264
.text:004072D4 ; ---------------------------------------------------------------------------
.text:004072D4
.text:004072D4 loc_4072D4:                             ; CODE XREF: sub_405260+1FE3↑j
.text:004072D4                 mov     [esp+0BCh+var_B4], edx
.text:004072D8                 mov     eax, [esp+0BCh+var_50]
.text:004072DC                 lea     edx, [esp+0BCh+var_30]
.text:004072E3                 mov     [esp+0BCh+Size], edx
.text:004072E6                 mov     [esp+0BCh+var_B8], eax
.text:004072EA                 call    sub_4075E0
.text:004072EF                 mov     edi, [esp+0BCh+var_78]
.text:004072F3                 mov     ebp, eax
.text:004072F5                 and     ebp, 3
.text:004072F8                 mov     ecx, [edi+esi*4]
.text:004072FB                 and     ecx, 0FFFFFFFCh
.text:004072FE                 or      ecx, ebp
.text:00407300                 mov     [edi+esi*4], ecx
.text:00407303                 movzx   ecx, byte ptr [ebx]
.text:00407306                 jmp     loc_407249
.text:00407306 ; ---------------------------------------------------------------------------
.text:0040730B                 align 10h
.text:00407310
.text:00407310 loc_407310:                             ; CODE XREF: sub_405260:loc_4054D7↑j
.text:00407310                                         ; sub_405260+BF6↑j ...
.text:00407310                 mov     edx, [esp+0BCh+var_4C] ; jumptable 004054D7 case 5
.text:00407310                                         ; jumptable 00405E56 case 5
.text:00407310                                         ; jumptable 00405F28 case 5
.text:00407314                 mov     ebp, [esp+0BCh+var_48]
.text:00407318                 cmp     byte ptr [edx-1], 5
.text:0040731C                 setz    [esp+0BCh+var_95]
.text:00407321                 cmp     [esp+0BCh+var_44], ebp
.text:00407325                 jz      loc_4073E0
.text:0040732B
.text:0040732B loc_40732B:                             ; CODE XREF: sub_405260+21A1↓j
.text:0040732B                 mov     esi, [esp+0BCh+var_58]
.text:0040732F                 test    esi, esi
.text:00407331                 jz      loc_4073CF
.text:00407337                 mov     ebx, [esp+0BCh+var_44]
.text:0040733B                 mov     ecx, [esp+0BCh+var_58]
.text:0040733F                 movzx   edi, byte ptr [ebx]
.text:00407342                 movzx   ebx, byte ptr [edi+ecx]
.text:00407346
.text:00407346 loc_407346:                             ; CODE XREF: sub_405260+2177↓j
.text:00407346                 mov     esi, [esp+0BCh+var_4C]
.text:0040734A                 movzx   eax, bl
.text:0040734D                 movzx   edx, byte ptr [esi]
.text:00407350                 movzx   edi, dl
.text:00407353                 shl     edi, 3
.text:00407356                 mov     [esp+0BCh+var_96], dl
.text:0040735A                 cmp     eax, edi
.text:0040735C                 jnb     short loc_40737B
.text:0040735E                 mov     dl, bl
.text:00407360                 shr     dl, 3
.text:00407363                 movzx   ecx, dl
.text:00407366                 movzx   eax, byte ptr [ecx+esi+1]
.text:0040736B                 mov     ecx, ebx
.text:0040736D                 and     ecx, 7
.text:00407370                 sar     eax, cl
.text:00407372                 test    al, 1
.text:00407374                 jz      short loc_40737B
.text:00407376                 xor     [esp+0BCh+var_95], 1
.text:0040737B
.text:0040737B loc_40737B:                             ; CODE XREF: sub_405260+20FC↑j
.text:0040737B                                         ; sub_405260+2114↑j
.text:0040737B                 movzx   ebx, [esp+0BCh+var_96]
.text:00407380                 mov     ebp, [esp+0BCh+var_4C]
.text:00407384                 cmp     [esp+0BCh+var_95], 0
.text:00407389                 lea     esi, [ebx+ebp+1]
.text:0040738D                 mov     [esp+0BCh+var_4C], esi
.text:00407391                 jz      loc_4056B2
.text:00407397                 mov     edi, [esp+0BCh+var_8C]
.text:0040739B                 test    edi, edi
.text:0040739D                 jnz     loc_40607F
.text:004073A3                 mov     [esp+0BCh+var_8C], 1
.text:004073AB                 mov     eax, [esp+0BCh+var_60]
.text:004073AF                 mov     edx, [esp+0BCh+var_64]
.text:004073B3                 cmp     eax, edx
.text:004073B5                 ja      loc_40607F
.text:004073BB
.text:004073BB loc_4073BB:                             ; CODE XREF: sub_405260+2168↓j
.text:004073BB                 mov     ecx, [esp+0BCh+var_78]
.text:004073BF                 or      byte ptr [ecx+eax*4], 18h
.text:004073C3                 inc     eax
.text:004073C4                 cmp     eax, [esp+0BCh+var_64]
.text:004073C8                 jbe     short loc_4073BB
.text:004073CA                 jmp     loc_40607F
.text:004073CF ; ---------------------------------------------------------------------------
.text:004073CF
.text:004073CF loc_4073CF:                             ; CODE XREF: sub_405260+20D1↑j
.text:004073CF                 mov     ebp, [esp+0BCh+var_44]
.text:004073D3                 movzx   ebx, byte ptr [ebp+0]
.text:004073D7                 jmp     loc_407346
.text:004073D7 ; ---------------------------------------------------------------------------
.text:004073DC                 align 10h
.text:004073E0
.text:004073E0 loc_4073E0:                             ; CODE XREF: sub_405260+20C5↑j
.text:004073E0                                         ; sub_405260+219F↓j
.text:004073E0                 mov     ecx, [esp+0BCh+var_40]
.text:004073E4                 cmp     [esp+0BCh+var_48], ecx
.text:004073E8                 jz      loc_4056B2
.text:004073EE                 mov     [esp+0BCh+var_48], ecx
.text:004073F2                 mov     eax, [esp+0BCh+arg_C]
.text:004073F9                 cmp     eax, ecx
.text:004073FB                 mov     [esp+0BCh+var_44], eax
.text:004073FF                 jz      short loc_4073E0
.text:00407401                 jmp     loc_40732B
.text:00407406 ; ---------------------------------------------------------------------------
.text:00407406
.text:00407406 loc_407406:                             ; CODE XREF: sub_405260:loc_4054D7↑j
.text:00407406                                         ; sub_405260+BF6↑j ...
.text:00407406                 jmp     loc_407310      ; jumptable 004054D7 case 4
.text:00407406                                         ; jumptable 00405E56 case 4
.text:00407406                                         ; jumptable 00405F28 case 4
.text:0040740B ; ---------------------------------------------------------------------------
.text:0040740B
.text:0040740B loc_40740B:                             ; CODE XREF: sub_405260+C88↑j
.text:0040740B                 mov     ebx, [esp+0BCh+var_34]
.text:00407412                 movzx   eax, byte ptr [ebx-1]
.text:00407416                 jmp     loc_405EF5
.text:0040741B ; ---------------------------------------------------------------------------
.text:0040741B
.text:0040741B loc_40741B:                             ; CODE XREF: sub_405260+C76↑j
.text:0040741B                 mov     edi, [esp+0BCh+arg_C]
.text:00407422                 movzx   eax, byte ptr [edi]
.text:00407425                 jmp     loc_405EF5
.text:0040742A ; ---------------------------------------------------------------------------
.text:0040742A
.text:0040742A loc_40742A:                             ; CODE XREF: sub_405260+C43↑j
.text:0040742A                 mov     esi, [esp+0BCh+var_34]
.text:00407431                 movzx   eax, byte ptr [esi-1]
.text:00407435                 jmp     loc_405EB1
.text:0040743A ; ---------------------------------------------------------------------------
.text:0040743A
.text:0040743A loc_40743A:                             ; CODE XREF: sub_405260+C33↑j
.text:0040743A                 mov     ebp, [esp+0BCh+arg_C]
.text:00407441                 movzx   eax, byte ptr [ebp+0]
.text:00407445                 jmp     loc_405EB1
.text:0040744A ; ---------------------------------------------------------------------------
.text:0040744A
.text:0040744A loc_40744A:                             ; CODE XREF: sub_405260+C01↑j
.text:0040744A                 mov     edx, [esp+0BCh+arg_C]
.text:00407451                 cmp     [esp+0BCh+var_44], edx
.text:00407455                 jmp     loc_405E72
.text:0040745A ; ---------------------------------------------------------------------------
.text:0040745A
.text:0040745A loc_40745A:                             ; CODE XREF: sub_405260+AFB↑j
.text:0040745A                 mov     ebx, [esp+0BCh+arg_C]
.text:00407461                 cmp     [esp+0BCh+var_44], ebx
.text:00407465                 jmp     loc_405D6C
.text:0040746A ; ---------------------------------------------------------------------------
.text:0040746A
.text:0040746A loc_40746A:                             ; CODE XREF: sub_405260+993↑j
.text:0040746A                 mov     edi, [esp+0BCh+var_44]
.text:0040746E                 cmp     byte ptr [edi], 0
.text:00407471                 jmp     loc_405C09
.text:00407476 ; ---------------------------------------------------------------------------
.text:00407476
.text:00407476 loc_407476:                             ; CODE XREF: sub_405260+964↑j
.text:00407476                 mov     edi, [esp+0BCh+var_44]
.text:0040747A                 cmp     byte ptr [edi], 0Ah
.text:0040747D                 jmp     loc_405BDA
.text:00407482 ; ---------------------------------------------------------------------------
.text:00407482
.text:00407482 loc_407482:                             ; CODE XREF: sub_405260+94B↑j
.text:00407482                                         ; sub_405260+2241↓j
.text:00407482                 mov     eax, [esp+0BCh+var_40]
.text:00407486                 cmp     [esp+0BCh+var_48], eax
.text:0040748A                 jz      loc_4056B2
.text:00407490                 mov     [esp+0BCh+var_48], eax
.text:00407494                 mov     ecx, [esp+0BCh+arg_C]
.text:0040749B                 cmp     ecx, eax
.text:0040749D                 mov     [esp+0BCh+var_44], ecx
.text:004074A1                 jz      short loc_407482
.text:004074A3                 jmp     loc_405BB1
.text:004074A8 ; ---------------------------------------------------------------------------
.text:004074A8
.text:004074A8 loc_4074A8:                             ; CODE XREF: sub_405260+21B↑j
.text:004074A8                                         ; sub_405260+22F↑j
.text:004074A8                 mov     edi, [esp+0BCh+arg_C]
.text:004074AF                 mov     esi, [esp+0BCh+arg_14]
.text:004074B6                 mov     ecx, [esp+0BCh+arg_8]
.text:004074BD                 mov     ebp, [esp+0BCh+var_40]
.text:004074C1                 add     edi, esi
.text:004074C3                 sub     edi, ecx
.text:004074C5                 mov     [esp+0BCh+var_44], edi
.text:004074C9                 mov     [esp+0BCh+var_48], ebp
.text:004074CD                 jmp     loc_4054B4
.text:004074D2 ; ---------------------------------------------------------------------------
.text:004074D2
.text:004074D2 loc_4074D2:                             ; CODE XREF: sub_405260+1F1↑j
.text:004074D2                 mov     ebp, [esp+0BCh+arg_C]
.text:004074D9                 mov     ebx, [esp+0BCh+arg_8]
.text:004074E0                 mov     edi, [esp+0BCh+var_34]
.text:004074E7                 add     esi, ebp
.text:004074E9                 sub     esi, ebx
.text:004074EB                 mov     [esp+0BCh+var_3C], edi
.text:004074F2                 jmp     loc_40546E
.text:004074F7 ; ---------------------------------------------------------------------------
.text:004074F7
.text:004074F7 loc_4074F7:                             ; CODE XREF: sub_405260+B0↑j
.text:004074F7                 mov     edi, [esp+0BCh+var_5C]
.text:004074FB                 shl     edi, 2
.text:004074FE                 mov     [esp+0BCh+Size], edi ; Size
.text:00407501                 call    malloc
.text:00407506                 mov     [esp+0BCh+var_68], eax
.text:0040750A                 mov     [esp+0BCh+Size], edi ; Size
.text:0040750D                 call    malloc
.text:00407512                 mov     [esp+0BCh+var_6C], eax
.text:00407516                 mov     [esp+0BCh+Size], edi ; Size
.text:00407519                 call    malloc
.text:0040751E                 mov     [esp+0BCh+var_70], eax
.text:00407522                 mov     [esp+0BCh+Size], edi ; Size
.text:00407525                 call    malloc
.text:0040752A                 mov     [esp+0BCh+var_74], eax
.text:0040752E                 mov     [esp+0BCh+Size], edi ; Size
.text:00407531                 call    malloc
.text:00407536                 mov     [esp+0BCh+var_80], eax
.text:0040753A                 mov     [esp+0BCh+Size], edi ; Size
.text:0040753D                 call    malloc
.text:00407542                 mov     [esp+0BCh+var_84], eax
.text:00407546                 mov     [esp+0BCh+Size], edi ; Size
.text:00407549                 call    malloc
.text:0040754E                 mov     [esp+0BCh+var_78], eax
.text:00407552                 mov     [esp+0BCh+Size], edi ; Size
.text:00407555                 call    malloc
.text:0040755A                 mov     [esp+0BCh+var_90], eax
.text:0040755E                 mov     [esp+0BCh+Size], edi ; Size
.text:00407561                 call    malloc
.text:00407566                 mov     [esp+0BCh+var_94], eax
.text:0040756A                 mov     ecx, [esp+0BCh+var_68]
.text:0040756E                 test    ecx, ecx
.text:00407570                 jz      loc_4059E1
.text:00407576                 mov     ebx, [esp+0BCh+var_6C]
.text:0040757A                 test    ebx, ebx
.text:0040757C                 jz      loc_4059E1
.text:00407582                 mov     edx, [esp+0BCh+var_70]
.text:00407586                 test    edx, edx
.text:00407588                 jz      loc_4059E1
.text:0040758E                 mov     ebp, [esp+0BCh+var_74]
.text:00407592                 test    ebp, ebp
.text:00407594                 jz      loc_4059E1
.text:0040759A                 mov     ecx, [esp+0BCh+var_78]
.text:0040759E                 test    ecx, ecx
.text:004075A0                 jz      loc_4059E1
.text:004075A6                 mov     edi, [esp+0BCh+var_80]
.text:004075AA                 test    edi, edi
.text:004075AC                 jz      loc_4059E1
.text:004075B2                 mov     ebx, [esp+0BCh+var_84]
.text:004075B6                 test    ebx, ebx
.text:004075B8                 jz      loc_4059E1
.text:004075BE                 mov     edx, [esp+0BCh+var_90]
.text:004075C2                 test    edx, edx
.text:004075C4                 jz      loc_4059E1
.text:004075CA                 test    eax, eax
.text:004075CC                 jnz     loc_40535E
.text:004075D2                 jmp     loc_4059E1
.text:004075D2 sub_405260      endp
.text:004075D2
.text:004075D2 ; ---------------------------------------------------------------------------
.text:004075D7                 align 10h
.text:004075E0
.text:004075E0 ; =============== S U B R O U T I N E =======================================
.text:004075E0
.text:004075E0
.text:004075E0 sub_4075E0      proc near               ; CODE XREF: sub_405260+208A↑p
.text:004075E0                                         ; sub_407790+CA↓p
.text:004075E0
.text:004075E0 var_2C          = dword ptr -2Ch
.text:004075E0 var_28          = dword ptr -28h
.text:004075E0 var_24          = dword ptr -24h
.text:004075E0 var_14          = dword ptr -14h
.text:004075E0 arg_0           = dword ptr  4
.text:004075E0 arg_4           = dword ptr  8
.text:004075E0 arg_8           = dword ptr  0Ch
.text:004075E0
.text:004075E0                 push    ebp
.text:004075E1                 push    edi
.text:004075E2                 push    esi
.text:004075E3                 push    ebx
.text:004075E4                 sub     esp, 1Ch
.text:004075E7                 mov     ebp, [esp+2Ch+arg_0]
.text:004075EB                 mov     edi, [esp+2Ch+arg_4]
.text:004075EF                 mov     esi, [esp+2Ch+arg_8]
.text:004075F3                 mov     eax, [ebp+0]
.text:004075F6                 add     eax, 2
.text:004075F9                 cmp     eax, edi
.text:004075FB                 mov     ecx, eax
.text:004075FD                 mov     [esp+2Ch+var_14], eax
.text:00407601                 jnb     short loc_407643
.text:00407603                 lea     esi, [esi+0]
.text:00407609                 lea     edi, [edi+0]
.text:00407610
.text:00407610 loc_407610:                             ; CODE XREF: sub_4075E0+61↓j
.text:00407610                 movzx   eax, byte ptr [ecx]
.text:00407613                 cmp     eax, 7
.text:00407616                 jz      loc_4076F3
.text:0040761C                 cmp     eax, 0Fh
.text:0040761F                 jz      short loc_407650
.text:00407621                 mov     [esp+2Ch+var_24], esi
.text:00407625                 lea     ebx, [esp+2Ch+var_14]
.text:00407629                 mov     [esp+2Ch+var_28], edi
.text:0040762D                 mov     [esp+2Ch+var_2C], ebx
.text:00407630                 call    sub_407790
.text:00407635                 xor     edx, edx
.text:00407637                 test    al, al
.text:00407639                 jz      short loc_407645
.text:0040763B
.text:0040763B loc_40763B:                             ; CODE XREF: sub_4075E0+8B↓j
.text:0040763B                                         ; sub_4075E0+BE↓j
.text:0040763B                 mov     ecx, [esp+2Ch+var_14]
.text:0040763F                 cmp     ecx, edi
.text:00407641                 jb      short loc_407610
.text:00407643
.text:00407643 loc_407643:                             ; CODE XREF: sub_4075E0+21↑j
.text:00407643                 xor     edx, edx
.text:00407645
.text:00407645 loc_407645:                             ; CODE XREF: sub_4075E0+59↑j
.text:00407645                                         ; sub_4075E0+B8↓j ...
.text:00407645                 add     esp, 1Ch
.text:00407648                 mov     eax, edx
.text:0040764A                 pop     ebx
.text:0040764B                 pop     esi
.text:0040764C                 pop     edi
.text:0040764D                 pop     ebp
.text:0040764E                 retn
.text:0040764E ; ---------------------------------------------------------------------------
.text:0040764F                 align 10h
.text:00407650
.text:00407650 loc_407650:                             ; CODE XREF: sub_4075E0+3F↑j
.text:00407650                 lea     edx, [ecx+1]
.text:00407653                 mov     [esp+2Ch+var_14], edx
.text:00407657                 movsx   eax, byte ptr [edx+1]
.text:0040765B                 lea     edx, [ecx+3]
.text:0040765E                 movzx   ebx, byte ptr [ecx+1]
.text:00407662                 mov     [esp+2Ch+var_14], edx
.text:00407666                 shl     eax, 8
.text:00407669                 add     ebx, eax
.text:0040766B                 js      short loc_40763B
.text:0040766D                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:00407672                 jz      short loc_4076A0
.text:00407674
.text:00407674 loc_407674:                             ; CODE XREF: sub_4075E0+E9↓j
.text:00407674                                         ; sub_4075E0+111↓j
.text:00407674                 movsx   ecx, byte ptr [edx-1]
.text:00407678                 movzx   ebx, byte ptr [edx-2]
.text:0040767C                 mov     [esp+2Ch+var_2C], edx
.text:0040767F                 mov     [esp+2Ch+var_24], esi
.text:00407683                 shl     ecx, 8
.text:00407686                 add     ebx, ecx
.text:00407688                 lea     ecx, [ebx+edx]
.text:0040768B                 mov     [esp+2Ch+var_28], ecx
.text:0040768F                 call    sub_407710
.text:00407694                 xor     edx, edx
.text:00407696                 test    al, al
.text:00407698                 jz      short loc_407645
.text:0040769A                 add     [esp+2Ch+var_14], ebx
.text:0040769E                 jmp     short loc_40763B
.text:004076A0 ; ---------------------------------------------------------------------------
.text:004076A0
.text:004076A0 loc_4076A0:                             ; CODE XREF: sub_4075E0+92↑j
.text:004076A0                                         ; sub_4075E0+109↓j
.text:004076A0                 mov     [esp+2Ch+var_2C], edx
.text:004076A3                 lea     ecx, [ebx+edx-3]
.text:004076A7                 mov     [esp+2Ch+var_24], esi
.text:004076AB                 mov     [esp+2Ch+var_28], ecx
.text:004076AF                 call    sub_407710
.text:004076B4                 xor     edx, edx
.text:004076B6                 test    al, al
.text:004076B8                 jz      short loc_407645
.text:004076BA                 mov     ecx, [esp+2Ch+var_14]
.text:004076BE                 add     ecx, ebx
.text:004076C0                 mov     edx, ecx
.text:004076C2                 mov     [esp+2Ch+var_14], ecx
.text:004076C6                 cmp     byte ptr [ecx], 0Fh
.text:004076C9                 jnz     short loc_407674
.text:004076CB                 inc     edx
.text:004076CC                 mov     [esp+2Ch+var_14], edx
.text:004076D0                 movsx   eax, byte ptr [edx+1]
.text:004076D4                 lea     edx, [ecx+3]
.text:004076D7                 movzx   ebx, byte ptr [ecx+1]
.text:004076DB                 mov     [esp+2Ch+var_14], edx
.text:004076DF                 shl     eax, 8
.text:004076E2                 add     ebx, eax
.text:004076E4                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:004076E9                 jz      short loc_4076A0
.text:004076EB                 mov     [esp+2Ch+var_14], ecx
.text:004076EF                 mov     edx, ecx
.text:004076F1                 jmp     short loc_407674
.text:004076F3 ; ---------------------------------------------------------------------------
.text:004076F3
.text:004076F3 loc_4076F3:                             ; CODE XREF: sub_4075E0+36↑j
.text:004076F3                 lea     edx, [ecx+2]
.text:004076F6                 mov     [ebp+0], edx
.text:004076F9                 mov     edx, 1
.text:004076FE                 jmp     loc_407645
.text:004076FE sub_4075E0      endp
.text:004076FE
.text:004076FE ; ---------------------------------------------------------------------------
.text:00407703                 align 10h
.text:00407710
.text:00407710 ; =============== S U B R O U T I N E =======================================
.text:00407710
.text:00407710
.text:00407710 sub_407710      proc near               ; CODE XREF: sub_4075E0+AF↑p
.text:00407710                                         ; sub_4075E0+CF↑p
.text:00407710
.text:00407710 var_1C          = dword ptr -1Ch
.text:00407710 var_18          = dword ptr -18h
.text:00407710 var_14          = dword ptr -14h
.text:00407710 var_C           = dword ptr -0Ch
.text:00407710 arg_0           = dword ptr  4
.text:00407710 arg_4           = dword ptr  8
.text:00407710 arg_8           = dword ptr  0Ch
.text:00407710
.text:00407710                 push    esi
.text:00407711                 push    ebx
.text:00407712                 sub     esp, 14h
.text:00407715                 mov     edx, [esp+1Ch+arg_0]
.text:00407719                 mov     ebx, [esp+1Ch+arg_4]
.text:0040771D                 mov     esi, [esp+1Ch+arg_8]
.text:00407721                 mov     ecx, edx
.text:00407723                 mov     [esp+1Ch+var_C], edx
.text:00407727                 cmp     edx, ebx
.text:00407729                 jnb     short loc_407757
.text:0040772B                 nop
.text:0040772C                 lea     esi, [esi+0]
.text:00407730
.text:00407730 loc_407730:                             ; CODE XREF: sub_407710+45↓j
.text:00407730                 cmp     byte ptr [ecx], 0Fh
.text:00407733                 jz      short loc_407764
.text:00407735                 mov     [esp+1Ch+var_14], esi
.text:00407739                 lea     edx, [esp+1Ch+var_C]
.text:0040773D                 mov     [esp+1Ch+var_1C], edx
.text:00407740                 mov     [esp+1Ch+var_18], ebx
.text:00407744                 call    sub_407790
.text:00407749                 xor     edx, edx
.text:0040774B                 test    al, al
.text:0040774D                 jz      short loc_40775C
.text:0040774F
.text:0040774F loc_40774F:                             ; CODE XREF: sub_407710+70↓j
.text:0040774F                 mov     ecx, [esp+1Ch+var_C]
.text:00407753                 cmp     ecx, ebx
.text:00407755                 jb      short loc_407730
.text:00407757
.text:00407757 loc_407757:                             ; CODE XREF: sub_407710+19↑j
.text:00407757                 mov     edx, 1
.text:0040775C
.text:0040775C loc_40775C:                             ; CODE XREF: sub_407710+3D↑j
.text:0040775C                 add     esp, 14h
.text:0040775F                 mov     eax, edx
.text:00407761                 pop     ebx
.text:00407762                 pop     esi
.text:00407763                 retn
.text:00407764 ; ---------------------------------------------------------------------------
.text:00407764
.text:00407764 loc_407764:                             ; CODE XREF: sub_407710+23↑j
.text:00407764                 lea     eax, [ecx+1]
.text:00407767                 mov     [esp+1Ch+var_C], eax
.text:0040776B                 movsx   eax, byte ptr [eax+1]
.text:0040776F                 movzx   edx, byte ptr [ecx+1]
.text:00407773                 shl     eax, 8
.text:00407776                 add     edx, eax
.text:00407778                 lea     eax, [edx+ecx+3]
.text:0040777C                 mov     [esp+1Ch+var_C], eax
.text:00407780                 jmp     short loc_40774F
.text:00407780 sub_407710      endp
.text:00407780
.text:00407780 ; ---------------------------------------------------------------------------
.text:00407782                 align 10h
.text:00407790
.text:00407790 ; =============== S U B R O U T I N E =======================================
.text:00407790
.text:00407790
.text:00407790 sub_407790      proc near               ; CODE XREF: sub_4075E0+50↑p
.text:00407790                                         ; sub_407710+34↑p
.text:00407790
.text:00407790 var_1C          = dword ptr -1Ch
.text:00407790 var_18          = dword ptr -18h
.text:00407790 var_14          = dword ptr -14h
.text:00407790 var_10          = dword ptr -10h
.text:00407790 var_C           = dword ptr -0Ch
.text:00407790 var_8           = dword ptr -8
.text:00407790 var_4           = dword ptr -4
.text:00407790 arg_0           = dword ptr  4
.text:00407790 arg_4           = dword ptr  8
.text:00407790 arg_8           = dword ptr  0Ch
.text:00407790
.text:00407790                 sub     esp, 1Ch
.text:00407793                 mov     [esp+1Ch+var_4], edi
.text:00407797                 mov     edi, [esp+1Ch+arg_0]
.text:0040779B                 mov     [esp+1Ch+var_C], ebx
.text:0040779F                 mov     ebx, [esp+1Ch+arg_8]
.text:004077A3                 mov     [esp+1Ch+var_8], esi
.text:004077A7                 mov     edx, [edi]
.text:004077A9                 mov     [esp+1Ch+var_10], edx
.text:004077AD                 movzx   eax, byte ptr [edx]
.text:004077B0                 inc     edx
.text:004077B1                 mov     [esp+1Ch+var_10], edx
.text:004077B5                 cmp     eax, 1Dh        ; switch 30 cases
.text:004077B8                 ja      def_4077BE      ; jumptable 004077BE default case, cases 1-5,7,14-20,22,24,25
.text:004077BE                 jmp     ds:jpt_4077BE[eax*4] ; switch jump
.text:004077BE ; ---------------------------------------------------------------------------
.text:004077C5                 align 4
.text:004077C8 jpt_4077BE      dd offset loc_407873    ; DATA XREF: sub_407790+2E↑r
.text:004077C8                 dd offset def_4077BE    ; jump table for switch statement
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset loc_407840
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset loc_4078A2
.text:004077C8                 dd offset loc_407873
.text:004077C8                 dd offset loc_407873
.text:004077C8                 dd offset loc_407873
.text:004077C8                 dd offset loc_407873
.text:004077C8                 dd offset loc_4078B4
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset loc_4078D5
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset loc_407911
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset def_4077BE
.text:004077C8                 dd offset loc_407873
.text:004077C8                 dd offset loc_407873
.text:004077C8                 dd offset loc_407873
.text:004077C8                 dd offset loc_407873
.text:00407840 ; ---------------------------------------------------------------------------
.text:00407840
.text:00407840 loc_407840:                             ; CODE XREF: sub_407790+2E↑j
.text:00407840                                         ; DATA XREF: sub_407790:jpt_4077BE↑o
.text:00407840                 mov     ecx, [esp+1Ch+var_10] ; jumptable 004077BE case 6
.text:00407844                 mov     edx, [esp+1Ch+arg_4]
.text:00407848                 movzx   esi, byte ptr [ecx]
.text:0040784B                 lea     ecx, [esp+1Ch+var_10]
.text:0040784F                 mov     [esp+1Ch+var_18], edx
.text:00407853                 mov     [esp+1Ch+var_1C], ecx
.text:00407856                 mov     [esp+1Ch+var_14], ebx
.text:0040785A                 call    sub_4075E0
.text:0040785F                 movzx   edx, byte ptr [ebx+esi*4]
.text:00407863                 mov     cl, al
.text:00407865                 and     edx, 3
.text:00407868                 cmp     edx, 3
.text:0040786B                 jz      short loc_407890
.text:0040786D
.text:0040786D loc_40786D:                             ; CODE XREF: sub_407790+110↓j
.text:0040786D                 xor     eax, eax
.text:0040786F                 test    cl, cl
.text:00407871                 jz      short loc_407880
.text:00407873
.text:00407873 loc_407873:                             ; CODE XREF: sub_407790+2E↑j
.text:00407873                                         ; DATA XREF: sub_407790:jpt_4077BE↑o
.text:00407873                 mov     ecx, [esp+1Ch+var_10] ; jumptable 004077BE cases 0,9-12,26-29
.text:00407877
.text:00407877 loc_407877:                             ; CODE XREF: sub_407790+11D↓j
.text:00407877                                         ; sub_407790+143↓j
.text:00407877                 mov     [edi], ecx
.text:00407879                 mov     eax, 1
.text:0040787E                 mov     esi, esi
.text:00407880
.text:00407880 loc_407880:                             ; CODE XREF: sub_407790+E1↑j
.text:00407880                                         ; sub_407790+122↓j ...
.text:00407880                 mov     ebx, [esp+1Ch+var_C]
.text:00407884                 mov     esi, [esp+1Ch+var_8]
.text:00407888                 mov     edi, [esp+1Ch+var_4]
.text:0040788C                 add     esp, 1Ch
.text:0040788F                 retn
.text:00407890 ; ---------------------------------------------------------------------------
.text:00407890
.text:00407890 loc_407890:                             ; CODE XREF: sub_407790+DB↑j
.text:00407890                 mov     eax, [ebx+esi*4]
.text:00407893                 mov     edx, ecx
.text:00407895                 and     edx, 3
.text:00407898                 and     eax, 0FFFFFFFCh
.text:0040789B                 or      eax, edx
.text:0040789D                 mov     [ebx+esi*4], eax
.text:004078A0                 jmp     short loc_40786D
.text:004078A2 ; ---------------------------------------------------------------------------
.text:004078A2
.text:004078A2 loc_4078A2:                             ; CODE XREF: sub_407790+2E↑j
.text:004078A2                                         ; DATA XREF: sub_407790:jpt_4077BE↑o
.text:004078A2                 mov     ecx, [esp+1Ch+var_10] ; jumptable 004077BE case 8
.text:004078A6                 movzx   esi, byte ptr [ecx]
.text:004078A9                 test    byte ptr [ebx+esi*4], 3
.text:004078AD                 jnz     short loc_407877
.text:004078AF                 nop
.text:004078B0
.text:004078B0 def_4077BE:                             ; CODE XREF: sub_407790+28↑j
.text:004078B0                                         ; sub_407790+2E↑j ...
.text:004078B0                 xor     eax, eax        ; jumptable 004077BE default case, cases 1-5,7,14-20,22,24,25
.text:004078B2                 jmp     short loc_407880
.text:004078B4 ; ---------------------------------------------------------------------------
.text:004078B4
.text:004078B4 loc_4078B4:                             ; CODE XREF: sub_407790+2E↑j
.text:004078B4                                         ; DATA XREF: sub_407790:jpt_4077BE↑o
.text:004078B4                 mov     edx, [esp+1Ch+var_10] ; jumptable 004077BE case 13
.text:004078B8                 lea     ecx, [edx+2]
.text:004078BB                 movsx   esi, byte ptr [edx+1]
.text:004078BF                 movzx   ebx, byte ptr [edx]
.text:004078C2                 mov     [esp+1Ch+var_10], ecx
.text:004078C6                 shl     esi, 8
.text:004078C9                 add     ebx, esi
.text:004078CB                 js      short def_4077BE ; jumptable 004077BE default case, cases 1-5,7,14-20,22,24,25
.text:004078CD                 add     ecx, ebx
.text:004078CF
.text:004078CF loc_4078CF:                             ; CODE XREF: sub_407790+17F↓j
.text:004078CF                 mov     [esp+1Ch+var_10], ecx
.text:004078D3                 jmp     short loc_407877
.text:004078D5 ; ---------------------------------------------------------------------------
.text:004078D5
.text:004078D5 loc_4078D5:                             ; CODE XREF: sub_407790+2E↑j
.text:004078D5                                         ; DATA XREF: sub_407790:jpt_4077BE↑o
.text:004078D5                 mov     edx, [esp+1Ch+var_10] ; jumptable 004077BE case 21
.text:004078D9                 lea     esi, [edx+2]
.text:004078DC                 mov     [esp+1Ch+var_10], esi
.text:004078E0                 movsx   eax, byte ptr [esi+1]
.text:004078E4                 movzx   ebx, byte ptr [edx+2]
.text:004078E8                 shl     eax, 8
.text:004078EB                 add     ebx, eax
.text:004078ED                 lea     eax, [edx+4]
.text:004078F0                 mov     [esp+1Ch+var_10], eax
.text:004078F4                 xor     eax, eax
.text:004078F6                 test    ebx, ebx
.text:004078F8                 jnz     short loc_407880
.text:004078FA                 mov     [esp+1Ch+var_10], edx
.text:004078FE                 mov     eax, edx
.text:00407900                 movsx   ebx, byte ptr [eax+1]
.text:00407904                 movzx   edx, byte ptr [edx]
.text:00407907                 shl     ebx, 8
.text:0040790A                 add     edx, ebx
.text:0040790C                 lea     ecx, [edx+esi]
.text:0040790F                 jmp     short loc_4078CF
.text:00407911 ; ---------------------------------------------------------------------------
.text:00407911
.text:00407911 loc_407911:                             ; CODE XREF: sub_407790+2E↑j
.text:00407911                                         ; DATA XREF: sub_407790:jpt_4077BE↑o
.text:00407911                 add     [esp+1Ch+var_10], 4 ; jumptable 004077BE case 23
.text:00407916                 jmp     short def_4077BE ; jumptable 004077BE default case, cases 1-5,7,14-20,22,24,25
.text:00407916 sub_407790      endp
.text:00407916
.text:00407916 ; ---------------------------------------------------------------------------
.text:00407918                 align 10h
.text:00407920
.text:00407920 ; =============== S U B R O U T I N E =======================================
.text:00407920
.text:00407920
.text:00407920 sub_407920      proc near               ; CODE XREF: sub_405260+1B06↑p
.text:00407920
.text:00407920 arg_0           = dword ptr  4
.text:00407920 arg_4           = dword ptr  8
.text:00407920 arg_8           = dword ptr  0Ch
.text:00407920 arg_C           = dword ptr  10h
.text:00407920
.text:00407920                 push    edi
.text:00407921                 push    esi
.text:00407922                 push    ebx
.text:00407923                 mov     esi, [esp+0Ch+arg_8]
.text:00407927                 mov     edi, [esp+0Ch+arg_C]
.text:0040792B                 mov     ebx, [esp+0Ch+arg_0]
.text:0040792F                 test    esi, esi
.text:00407931                 mov     ecx, [esp+0Ch+arg_4]
.text:00407935                 jz      short loc_407954
.text:00407937                 mov     esi, esi
.text:00407939                 lea     edi, [edi+0]
.text:00407940
.text:00407940 loc_407940:                             ; CODE XREF: sub_407920+32↓j
.text:00407940                 movzx   eax, byte ptr [ecx]
.text:00407943                 inc     ecx
.text:00407944                 movzx   edx, byte ptr [ebx]
.text:00407947                 inc     ebx
.text:00407948                 movzx   eax, byte ptr [eax+edi]
.text:0040794C                 cmp     [edx+edi], al
.text:0040794F                 jnz     short loc_40795A
.text:00407951                 dec     esi
.text:00407952                 jnz     short loc_407940
.text:00407954
.text:00407954 loc_407954:                             ; CODE XREF: sub_407920+15↑j
.text:00407954                 xor     eax, eax
.text:00407956
.text:00407956 loc_407956:                             ; CODE XREF: sub_407920+3F↓j
.text:00407956                 pop     ebx
.text:00407957                 pop     esi
.text:00407958                 pop     edi
.text:00407959                 retn
.text:0040795A ; ---------------------------------------------------------------------------
.text:0040795A
.text:0040795A loc_40795A:                             ; CODE XREF: sub_407920+2F↑j
.text:0040795A                 mov     eax, 1
.text:0040795F                 jmp     short loc_407956
.text:0040795F sub_407920      endp
.text:0040795F
.text:0040795F ; ---------------------------------------------------------------------------
.text:00407961                 align 20h
.text:00407980 aSuccess        db 'Success',0          ; DATA XREF: sub_407FE0+41↓o
.text:00407980                                         ; .text:0040806B↓o
.text:00407988 aNoMatch        db 'No match',0
.text:00407991 aInvalidRegular db 'Invalid regular expression',0
.text:004079AC aInvalidCollati db 'Invalid collation character',0
.text:004079C8 aInvalidCharact db 'Invalid character class name',0
.text:004079E5 aTrailingBacksl db 'Trailing backslash',0
.text:004079F8 aInvalidBackRef db 'Invalid back reference',0
.text:00407A0F aUnmatchedOr    db 'Unmatched [ or [^',0
.text:00407A21 aUnmatchedOr_0  db 'Unmatched ( or \(',0
.text:00407A33 aUnmatched      db 'Unmatched \{',0
.text:00407A40 aInvalidContent db 'Invalid content of \{\}',0
.text:00407A58 aInvalidRangeEn db 'Invalid range end',0
.text:00407A6A aMemoryExhauste_0 db 'Memory exhausted',0
.text:00407A7B aInvalidPrecedi db 'Invalid preceding regular expression',0
.text:00407AA0 aPrematureEndOf db 'Premature end of regular expression',0
.text:00407AC4 aRegularExpress db 'Regular expression too big',0
.text:00407ADF aUnmatchedOr_1  db 'Unmatched ) or \)',0
.text:00407AF1                 db 0EBh, 0Dh, 90h
.text:00407AF4                 align 10h
.text:00407B00 dword_407B00    dd 0                    ; DATA XREF: sub_407FE0+3A↓r
.text:00407B00                                         ; .text:00408064↓r
.text:00407B04                 dd 8, 11h, 2Ch, 48h, 65h, 78h, 8Fh, 0A1h, 0B3h, 0C0h, 0D8h
.text:00407B04                 dd 0EAh, 0FBh, 120h, 144h, 15Fh, 0B68Dh, 0BF8D0000h, 0
.text:00407B50
.text:00407B50 ; =============== S U B R O U T I N E =======================================
.text:00407B50
.text:00407B50
.text:00407B50 sub_407B50      proc near               ; CODE XREF: sub_408170+25A0↓p
.text:00407B50
.text:00407B50 arg_0           = dword ptr  4
.text:00407B50 arg_8           = dword ptr  0Ch
.text:00407B50 arg_C           = dword ptr  10h
.text:00407B50
.text:00407B50                 mov     edx, [esp+arg_8]
.text:00407B54                 mov     ecx, [esp+arg_C]
.text:00407B58                 dec     edx
.text:00407B59                 js      short loc_407B7A
.text:00407B5B                 lea     eax, [edx+edx*4]
.text:00407B5E                 shl     eax, 2
.text:00407B61                 add     eax, [esp+arg_0]
.text:00407B65                 add     eax, 10h
.text:00407B68                 nop
.text:00407B69                 lea     esi, [esi+0]
.text:00407B70
.text:00407B70 loc_407B70:                             ; CODE XREF: sub_407B50+28↓j
.text:00407B70                 cmp     [eax], ecx
.text:00407B72                 jz      short loc_407B7D
.text:00407B74                 sub     eax, 14h
.text:00407B77                 dec     edx
.text:00407B78                 jns     short loc_407B70
.text:00407B7A
.text:00407B7A loc_407B7A:                             ; CODE XREF: sub_407B50+9↑j
.text:00407B7A                 xor     eax, eax
.text:00407B7C                 retn
.text:00407B7D ; ---------------------------------------------------------------------------
.text:00407B7D
.text:00407B7D loc_407B7D:                             ; CODE XREF: sub_407B50+22↑j
.text:00407B7D                 mov     eax, 1
.text:00407B82                 retn
.text:00407B82 sub_407B50      endp
.text:00407B82
.text:00407B82 ; ---------------------------------------------------------------------------
.text:00407B83                 align 10h
.text:00407B90
.text:00407B90 ; =============== S U B R O U T I N E =======================================
.text:00407B90
.text:00407B90 ; Attributes: thunk
.text:00407B90
.text:00407B90 sub_407B90      proc near               ; CODE XREF: .text:00407C71↓p
.text:00407B90                                         ; sub_40B4E0+258↓p
.text:00407B90                 jmp     sub_40B780
.text:00407B90 sub_407B90      endp
.text:00407B90
.text:00407B90 ; ---------------------------------------------------------------------------
.text:00407B95                 align 10h
.text:00407BA0                 push    ebp
.text:00407BA1                 push    edi
.text:00407BA2                 push    esi
.text:00407BA3                 push    ebx
.text:00407BA4                 sub     esp, 1Ch
.text:00407BA7                 mov     edi, [esp+30h]
.text:00407BAB                 test    byte ptr [esp+38h], 1
.text:00407BB0                 mov     dword ptr [edi], 0
.text:00407BB6                 setnz   dl
.text:00407BB9                 mov     dword ptr [edi+4], 0
.text:00407BC0                 mov     dword ptr [edi+8], 0
.text:00407BC7                 mov     dword ptr [esp], 100h
.text:00407BCE                 movzx   ebp, dl
.text:00407BD1                 dec     ebp
.text:00407BD2                 and     ebp, 0FFFD4FCAh
.text:00407BD8                 add     ebp, 3B2FCh
.text:00407BDE                 call    malloc
.text:00407BE3                 test    byte ptr [esp+38h], 2
.text:00407BE8                 mov     [edi+10h], eax
.text:00407BEB                 jnz     loc_407CA0
.text:00407BF1                 mov     dword ptr [edi+14h], 0
.text:00407BF8
.text:00407BF8 loc_407BF8:                             ; CODE XREF: .text:00407CF0↓j
.text:00407BF8                 test    byte ptr [esp+38h], 4
.text:00407BFD                 jz      loc_407C97
.text:00407C03                 or      byte ptr [edi+1Ch], 80h
.text:00407C07                 and     ebp, 0FFFFFFBFh
.text:00407C0A                 or      ebp, 100h
.text:00407C10
.text:00407C10 loc_407C10:                             ; CODE XREF: .text:00407C9B↓j
.text:00407C10                 shr     dword ptr [esp+38h], 3
.text:00407C15                 movzx   edx, byte ptr [esp+38h]
.text:00407C1A                 movzx   ecx, byte ptr [edi+1Ch]
.text:00407C1E                 and     dl, 1
.text:00407C21                 shl     dl, 4
.text:00407C24                 and     cl, 0EFh
.text:00407C27                 or      cl, dl
.text:00407C29                 mov     [edi+1Ch], cl
.text:00407C2C                 mov     esi, [esp+34h]
.text:00407C30                 mov     [esp], esi
.text:00407C33                 call    strlen
.text:00407C38                 mov     [esp+4], eax
.text:00407C3C                 mov     ebx, [esp+34h]
.text:00407C40                 mov     [esp+0Ch], edi
.text:00407C44                 mov     [esp+8], ebp
.text:00407C48                 mov     [esp], ebx
.text:00407C4B                 call    sub_408170
.text:00407C50                 cmp     eax, 10h
.text:00407C53                 mov     ebx, eax
.text:00407C55                 jz      short loc_407C90
.text:00407C57
.text:00407C57 loc_407C57:                             ; CODE XREF: .text:00407C95↓j
.text:00407C57                 test    ebx, ebx
.text:00407C59                 jnz     short loc_407C62
.text:00407C5B                 mov     ebp, [edi+10h]
.text:00407C5E                 test    ebp, ebp
.text:00407C60                 jnz     short loc_407C6E
.text:00407C62
.text:00407C62 loc_407C62:                             ; CODE XREF: .text:00407C59↑j
.text:00407C62                                         ; .text:00407C79↓j ...
.text:00407C62                 mov     edx, ebx
.text:00407C64
.text:00407C64 loc_407C64:                             ; CODE XREF: .text:00407CB6↓j
.text:00407C64                 add     esp, 1Ch
.text:00407C67                 mov     eax, edx
.text:00407C69                 pop     ebx
.text:00407C6A                 pop     esi
.text:00407C6B                 pop     edi
.text:00407C6C                 pop     ebp
.text:00407C6D                 retn
.text:00407C6E ; ---------------------------------------------------------------------------
.text:00407C6E
.text:00407C6E loc_407C6E:                             ; CODE XREF: .text:00407C60↑j
.text:00407C6E                 mov     [esp], edi
.text:00407C71                 call    sub_407B90
.text:00407C76                 cmp     eax, 0FFFFFFFEh
.text:00407C79                 jnz     short loc_407C62
.text:00407C7B                 mov     esi, [edi+10h]
.text:00407C7E                 mov     [esp], esi
.text:00407C81                 call    free
.text:00407C86                 mov     dword ptr [edi+10h], 0
.text:00407C8D                 jmp     short loc_407C62
.text:00407C8D ; ---------------------------------------------------------------------------
.text:00407C8F                 align 10h
.text:00407C90
.text:00407C90 loc_407C90:                             ; CODE XREF: .text:00407C55↑j
.text:00407C90                 mov     ebx, 8
.text:00407C95                 jmp     short loc_407C57
.text:00407C97 ; ---------------------------------------------------------------------------
.text:00407C97
.text:00407C97 loc_407C97:                             ; CODE XREF: .text:00407BFD↑j
.text:00407C97                 and     byte ptr [edi+1Ch], 7Fh
.text:00407C9B                 jmp     loc_407C10
.text:00407CA0 ; ---------------------------------------------------------------------------
.text:00407CA0
.text:00407CA0 loc_407CA0:                             ; CODE XREF: .text:00407BEB↑j
.text:00407CA0                 mov     dword ptr [esp], 100h
.text:00407CA7                 call    malloc
.text:00407CAC                 mov     [edi+14h], eax
.text:00407CAF                 test    eax, eax
.text:00407CB1                 mov     edx, 0Ch
.text:00407CB6                 jz      short loc_407C64
.text:00407CB8                 xor     ebx, ebx
.text:00407CBA                 lea     esi, [esi+0]
.text:00407CC0
.text:00407CC0 loc_407CC0:                             ; CODE XREF: .text:00407CEE↓j
.text:00407CC0                 mov     edx, ds:__mb_cur_max
.text:00407CC6                 mov     esi, [edi+14h]
.text:00407CC9                 cmp     dword ptr [edx], 1
.text:00407CCC                 jz      short loc_407D01
.text:00407CCE                 mov     dword ptr [esp+4], 1
.text:00407CD6                 mov     [esp], ebx
.text:00407CD9                 call    _isctype
.text:00407CDE
.text:00407CDE loc_407CDE:                             ; CODE XREF: .text:00407D10↓j
.text:00407CDE                 test    eax, eax
.text:00407CE0                 mov     dl, bl
.text:00407CE2                 jnz     short loc_407CF5
.text:00407CE4
.text:00407CE4 loc_407CE4:                             ; CODE XREF: .text:00407CFF↓j
.text:00407CE4                 mov     [ebx+esi], dl
.text:00407CE7                 inc     ebx
.text:00407CE8                 cmp     ebx, 0FFh
.text:00407CEE                 jbe     short loc_407CC0
.text:00407CF0                 jmp     loc_407BF8
.text:00407CF5 ; ---------------------------------------------------------------------------
.text:00407CF5
.text:00407CF5 loc_407CF5:                             ; CODE XREF: .text:00407CE2↑j
.text:00407CF5                 mov     [esp], ebx
.text:00407CF8                 call    tolower
.text:00407CFD                 mov     dl, al
.text:00407CFF                 jmp     short loc_407CE4
.text:00407D01 ; ---------------------------------------------------------------------------
.text:00407D01
.text:00407D01 loc_407D01:                             ; CODE XREF: .text:00407CCC↑j
.text:00407D01                 mov     edx, ds:_pctype
.text:00407D07                 mov     ecx, [edx]
.text:00407D09                 movzx   eax, word ptr [ecx+ebx*2]
.text:00407D0D                 and     eax, 1
.text:00407D10                 jmp     short loc_407CDE
.text:00407D10 ; ---------------------------------------------------------------------------
.text:00407D12                 align 10h
.text:00407D20                 push    ebp
.text:00407D21                 push    edi
.text:00407D22                 push    esi
.text:00407D23                 push    ebx
.text:00407D24                 sub     esp, 7Ch
.text:00407D27                 mov     ebx, [esp+90h]
.text:00407D2E                 mov     edx, [esp+94h]
.text:00407D35                 mov     ebp, [esp+98h]
.text:00407D3C                 mov     esi, [esp+0A0h]
.text:00407D43                 mov     [esp], edx
.text:00407D46                 call    strlen
.text:00407D4B                 test    byte ptr [ebx+1Ch], 10h
.text:00407D4F                 mov     edi, eax
.text:00407D51                 mov     byte ptr [esp+3Fh], 0
.text:00407D56                 jnz     short loc_407D70
.text:00407D58                 test    ebp, ebp
.text:00407D5A                 jz      short loc_407D70
.text:00407D5C                 mov     byte ptr [esp+3Fh], 1
.text:00407D61                 jmp     short loc_407D70
.text:00407D61 ; ---------------------------------------------------------------------------
.text:00407D63                 align 10h
.text:00407D70
.text:00407D70 loc_407D70:                             ; CODE XREF: .text:00407D56↑j
.text:00407D70                                         ; .text:00407D5A↑j ...
.text:00407D70                 mov     edx, [ebx]
.text:00407D72                 mov     [esp+40h], edx
.text:00407D76                 mov     ecx, [ebx+4]
.text:00407D79                 mov     [esp+44h], ecx
.text:00407D7D                 mov     edx, [ebx+8]
.text:00407D80                 mov     [esp+48h], edx
.text:00407D84                 mov     ecx, [ebx+0Ch]
.text:00407D87                 mov     [esp+4Ch], ecx
.text:00407D8B                 mov     edx, [ebx+10h]
.text:00407D8E                 mov     [esp+50h], edx
.text:00407D92                 mov     ecx, [ebx+14h]
.text:00407D95                 mov     [esp+54h], ecx
.text:00407D99                 mov     edx, [ebx+18h]
.text:00407D9C                 mov     [esp+58h], edx
.text:00407DA0                 mov     ecx, [ebx+1Ch]
.text:00407DA3                 mov     edx, esi
.text:00407DA5                 shr     esi, 1
.text:00407DA7                 and     dl, 1
.text:00407DAA                 mov     eax, esi
.text:00407DAC                 mov     [esp+5Ch], ecx
.text:00407DB0                 shl     dl, 5
.text:00407DB3                 and     al, 1
.text:00407DB5                 movzx   ebx, byte ptr [esp+5Ch]
.text:00407DBA                 shl     al, 6
.text:00407DBD                 and     bl, 9Fh
.text:00407DC0                 or      bl, dl
.text:00407DC2                 or      bl, al
.text:00407DC4                 and     bl, 0F9h
.text:00407DC7                 or      bl, 4
.text:00407DCA                 cmp     byte ptr [esp+3Fh], 0
.text:00407DCF                 mov     [esp+5Ch], bl
.text:00407DD3                 jnz     loc_407E86
.text:00407DD9
.text:00407DD9 loc_407DD9:                             ; CODE XREF: .text:00407EAF↓j
.text:00407DD9                 movzx   ecx, byte ptr [esp+3Fh]
.text:00407DDE                 lea     esi, [esp+60h]
.text:00407DE2                 mov     [esp+20h], edi
.text:00407DE6                 lea     ebx, [esp+40h]
.text:00407DEA                 mov     [esp+18h], edi
.text:00407DEE                 mov     dword ptr [esp+14h], 0
.text:00407DF6                 xor     cl, 1
.text:00407DF9                 movzx   edx, cl
.text:00407DFC                 mov     [esp+10h], edi
.text:00407E00                 mov     ecx, [esp+94h]
.text:00407E07                 dec     edx
.text:00407E08                 mov     dword ptr [esp+8], 0
.text:00407E10                 and     esi, edx
.text:00407E12                 mov     [esp+1Ch], esi
.text:00407E16                 mov     [esp+0Ch], ecx
.text:00407E1A                 mov     dword ptr [esp+4], 0
.text:00407E22                 mov     [esp], ebx
.text:00407E25                 call    sub_40B4E0
.text:00407E2A                 cmp     byte ptr [esp+3Fh], 0
.text:00407E2F                 mov     esi, eax
.text:00407E31                 jz      short loc_407E71
.text:00407E33                 test    eax, eax
.text:00407E35                 js      short loc_407E80
.text:00407E37                 xor     edx, edx
.text:00407E39                 cmp     edx, ebp
.text:00407E3B                 jnb     short loc_407E80
.text:00407E3D                 mov     ecx, [esp+64h]
.text:00407E41                 mov     ebx, [esp+68h]
.text:00407E45                 lea     esi, [esi+0]
.text:00407E49                 lea     edi, [edi+0]
.text:00407E50
.text:00407E50 loc_407E50:                             ; CODE XREF: .text:00407E67↓j
.text:00407E50                 mov     eax, [ecx+edx*4]
.text:00407E53                 mov     edi, [esp+9Ch]
.text:00407E5A                 mov     [edi+edx*8], eax
.text:00407E5D                 mov     eax, [ebx+edx*4]
.text:00407E60                 mov     [edi+edx*8+4], eax
.text:00407E64                 inc     edx
.text:00407E65                 cmp     edx, ebp
.text:00407E67                 jb      short loc_407E50
.text:00407E69
.text:00407E69 loc_407E69:                             ; CODE XREF: .text:00407E84↓j
.text:00407E69                 mov     [esp], ecx
.text:00407E6C                 call    free
.text:00407E71
.text:00407E71 loc_407E71:                             ; CODE XREF: .text:00407E31↑j
.text:00407E71                 mov     eax, esi
.text:00407E73                 shr     eax, 1Fh
.text:00407E76
.text:00407E76 loc_407E76:                             ; CODE XREF: .text:00407EA6↓j
.text:00407E76                 add     esp, 7Ch
.text:00407E79                 pop     ebx
.text:00407E7A                 pop     esi
.text:00407E7B                 pop     edi
.text:00407E7C                 pop     ebp
.text:00407E7D                 retn
.text:00407E7D ; ---------------------------------------------------------------------------
.text:00407E7E                 align 10h
.text:00407E80
.text:00407E80 loc_407E80:                             ; CODE XREF: .text:00407E35↑j
.text:00407E80                                         ; .text:00407E3B↑j
.text:00407E80                 mov     ecx, [esp+64h]
.text:00407E84                 jmp     short loc_407E69
.text:00407E86 ; ---------------------------------------------------------------------------
.text:00407E86
.text:00407E86 loc_407E86:                             ; CODE XREF: .text:00407DD3↑j
.text:00407E86                 mov     [esp+60h], ebp
.text:00407E8A                 lea     esi, ds:0[ebp*8]
.text:00407E91                 mov     [esp], esi
.text:00407E94                 call    malloc
.text:00407E99                 mov     [esp+64h], eax
.text:00407E9D                 mov     ecx, eax
.text:00407E9F                 test    ecx, ecx
.text:00407EA1                 mov     eax, 1
.text:00407EA6                 jz      short loc_407E76
.text:00407EA8                 lea     eax, [ecx+ebp*4]
.text:00407EAB                 mov     [esp+68h], eax
.text:00407EAF                 jmp     loc_407DD9
.text:00407EAF ; ---------------------------------------------------------------------------
.text:00407EB4                 align 10h
.text:00407EC0                 mov     eax, ds:dword_4102E0
.text:00407EC5                 mov     ecx, [esp+4]
.text:00407EC9                 mov     ds:dword_4102E0, ecx
.text:00407ECF                 retn
.text:00407ED0 ; ---------------------------------------------------------------------------
.text:00407ED0                 push    ebx
.text:00407ED1                 mov     ebx, [esp+10h]
.text:00407ED5                 mov     edx, [esp+8]
.text:00407ED9                 mov     ecx, [esp+0Ch]
.text:00407EDD                 test    ebx, ebx
.text:00407EDF                 jz      short loc_407F00
.text:00407EE1                 movzx   eax, byte ptr [edx+1Ch]
.text:00407EE5                 and     al, 0F9h
.text:00407EE7                 or      al, 2
.text:00407EE9                 mov     [edx+1Ch], al
.text:00407EEC                 mov     edx, [esp+14h]
.text:00407EF0                 mov     [ecx], ebx
.text:00407EF2                 mov     [ecx+4], edx
.text:00407EF5                 mov     edx, [esp+18h]
.text:00407EF9                 mov     [ecx+8], edx
.text:00407EFC
.text:00407EFC loc_407EFC:                             ; CODE XREF: .text:00407F18↓j
.text:00407EFC                 pop     ebx
.text:00407EFD                 retn
.text:00407EFD ; ---------------------------------------------------------------------------
.text:00407EFE                 align 10h
.text:00407F00
.text:00407F00 loc_407F00:                             ; CODE XREF: .text:00407EDF↑j
.text:00407F00                 and     byte ptr [edx+1Ch], 0F9h
.text:00407F04                 mov     dword ptr [ecx], 0
.text:00407F0A                 mov     dword ptr [ecx+8], 0
.text:00407F11                 mov     dword ptr [ecx+4], 0
.text:00407F18                 jmp     short loc_407EFC
.text:00407F18 ; ---------------------------------------------------------------------------
.text:00407F1A                 align 10h
.text:00407F20                 sub     esp, 2Ch
.text:00407F23                 mov     edx, [esp+44h]
.text:00407F27                 mov     dword ptr [esp+8], 0
.text:00407F2F                 mov     ecx, [esp+38h]
.text:00407F33                 mov     dword ptr [esp+4], 0
.text:00407F3B                 mov     [esp+1Ch], edx
.text:00407F3F                 mov     edx, [esp+40h]
.text:00407F43                 mov     [esp+20h], ecx
.text:00407F47                 mov     [esp+10h], ecx
.text:00407F4B                 mov     [esp+18h], edx
.text:00407F4F                 mov     edx, [esp+3Ch]
.text:00407F53                 mov     [esp+14h], edx
.text:00407F57                 mov     edx, [esp+34h]
.text:00407F5B                 mov     [esp+0Ch], edx
.text:00407F5F                 mov     edx, [esp+30h]
.text:00407F63                 mov     [esp], edx
.text:00407F66                 call    sub_40B4E0
.text:00407F6B                 add     esp, 2Ch
.text:00407F6E                 retn
.text:00407F6E ; ---------------------------------------------------------------------------
.text:00407F6F                 align 10h
.text:00407F70                 jmp     sub_40B4E0
.text:00407F70 ; ---------------------------------------------------------------------------
.text:00407F75                 align 10h
.text:00407F80
.text:00407F80 ; =============== S U B R O U T I N E =======================================
.text:00407F80
.text:00407F80
.text:00407F80 sub_407F80      proc near               ; CODE XREF: sub_402C14+10C↑p
.text:00407F80
.text:00407F80 var_2C          = dword ptr -2Ch
.text:00407F80 var_28          = dword ptr -28h
.text:00407F80 var_24          = dword ptr -24h
.text:00407F80 var_20          = dword ptr -20h
.text:00407F80 var_1C          = dword ptr -1Ch
.text:00407F80 var_18          = dword ptr -18h
.text:00407F80 var_14          = dword ptr -14h
.text:00407F80 var_10          = dword ptr -10h
.text:00407F80 arg_0           = dword ptr  4
.text:00407F80 arg_4           = dword ptr  8
.text:00407F80 arg_8           = dword ptr  0Ch
.text:00407F80 arg_C           = dword ptr  10h
.text:00407F80 arg_10          = dword ptr  14h
.text:00407F80
.text:00407F80                 sub     esp, 2Ch
.text:00407F83                 mov     edx, [esp+2Ch+arg_10]
.text:00407F87                 mov     [esp+2Ch+var_24], 0
.text:00407F8F                 mov     ecx, [esp+2Ch+arg_8]
.text:00407F93                 mov     [esp+2Ch+var_28], 0
.text:00407F9B                 mov     [esp+2Ch+var_14], edx
.text:00407F9F                 mov     edx, [esp+2Ch+arg_C]
.text:00407FA3                 mov     [esp+2Ch+var_10], ecx
.text:00407FA7                 mov     [esp+2Ch+var_1C], ecx
.text:00407FAB                 mov     [esp+2Ch+var_18], edx
.text:00407FAF                 mov     edx, [esp+2Ch+arg_4]
.text:00407FB3                 mov     [esp+2Ch+var_20], edx
.text:00407FB7                 mov     edx, [esp+2Ch+arg_0]
.text:00407FBB                 mov     [esp+2Ch+var_2C], edx
.text:00407FBE                 call    sub_405260
.text:00407FC3                 add     esp, 2Ch
.text:00407FC6                 retn
.text:00407FC6 sub_407F80      endp
.text:00407FC6
.text:00407FC6 ; ---------------------------------------------------------------------------
.text:00407FC7                 align 10h
.text:00407FD0                 jmp     sub_405260
.text:00407FD0 ; ---------------------------------------------------------------------------
.text:00407FD5                 align 10h
.text:00407FE0
.text:00407FE0 ; =============== S U B R O U T I N E =======================================
.text:00407FE0
.text:00407FE0
.text:00407FE0 sub_407FE0      proc near               ; CODE XREF: sub_402C14+B0↑p
.text:00407FE0
.text:00407FE0 var_1C          = dword ptr -1Ch
.text:00407FE0 var_18          = dword ptr -18h
.text:00407FE0 var_14          = dword ptr -14h
.text:00407FE0 var_10          = dword ptr -10h
.text:00407FE0 arg_0           = dword ptr  4
.text:00407FE0 arg_4           = dword ptr  8
.text:00407FE0 arg_8           = dword ptr  0Ch
.text:00407FE0
.text:00407FE0                 sub     esp, 1Ch
.text:00407FE3                 mov     ecx, [esp+1Ch+arg_8]
.text:00407FE7                 movzx   edx, byte ptr [ecx+1Ch]
.text:00407FEB                 and     dl, 0E9h
.text:00407FEE                 or      dl, 80h
.text:00407FF1                 mov     [ecx+1Ch], dl
.text:00407FF4                 mov     edx, [esp+1Ch+arg_4]
.text:00407FF8                 mov     [esp+1Ch+var_10], ecx
.text:00407FFC                 mov     ecx, ds:dword_4102E0
.text:00408002                 mov     [esp+1Ch+var_18], edx
.text:00408006                 mov     edx, [esp+1Ch+arg_0]
.text:0040800A                 mov     [esp+1Ch+var_14], ecx
.text:0040800E                 mov     [esp+1Ch+var_1C], edx
.text:00408011                 call    sub_408170
.text:00408016                 test    eax, eax
.text:00408018                 jz      short loc_408034
.text:0040801A                 mov     ecx, ds:dword_407B00[eax*4]
.text:00408021                 add     ecx, offset aSuccess ; "Success"
.text:00408027                 mov     [esp+1Ch+arg_0], ecx
.text:0040802B                 add     esp, 1Ch
.text:0040802E                 jmp     ds:libintl_gettext
.text:00408034 ; ---------------------------------------------------------------------------
.text:00408034
.text:00408034 loc_408034:                             ; CODE XREF: sub_407FE0+38↑j
.text:00408034                 xor     eax, eax
.text:00408036                 add     esp, 1Ch
.text:00408039                 retn
.text:00408039 sub_407FE0      endp
.text:00408039
.text:00408039 ; ---------------------------------------------------------------------------
.text:0040803A                 align 10h
.text:00408040                 sub     esp, 1Ch
.text:00408043                 mov     eax, [esp+20h]
.text:00408047                 mov     [esp+14h], edi
.text:0040804B                 mov     edi, [esp+2Ch]
.text:0040804F                 cmp     eax, 10h
.text:00408052                 mov     [esp+18h], ebp
.text:00408056                 mov     ebp, [esp+28h]
.text:0040805A                 mov     [esp+0Ch], ebx
.text:0040805E                 mov     [esp+10h], esi
.text:00408062                 ja      short loc_4080D8
.text:00408064                 mov     edx, ds:dword_407B00[eax*4]
.text:0040806B                 add     edx, offset aSuccess ; "Success"
.text:00408071                 mov     [esp], edx
.text:00408074                 call    ds:libintl_gettext
.text:0040807A                 mov     [esp], eax
.text:0040807D                 mov     ebx, eax
.text:0040807F                 call    strlen
.text:00408084                 test    edi, edi
.text:00408086                 lea     esi, [eax+1]
.text:00408089                 jz      short loc_4080B0
.text:0040808B                 cmp     esi, edi
.text:0040808D                 jbe     short loc_4080C6
.text:0040808F                 mov     [esp+4], ebx
.text:00408093                 lea     edx, [edi-1]
.text:00408096                 mov     [esp+8], edx
.text:0040809A                 mov     [esp], ebp
.text:0040809D                 call    sub_40DAD0
.text:004080A2                 mov     byte ptr [eax], 0
.text:004080A5                 lea     esi, [esi+0]
.text:004080A9                 lea     edi, [edi+0]
.text:004080B0
.text:004080B0 loc_4080B0:                             ; CODE XREF: .text:00408089↑j
.text:004080B0                                         ; .text:004080D6↓j
.text:004080B0                 mov     eax, esi
.text:004080B2                 mov     ebx, [esp+0Ch]
.text:004080B6                 mov     esi, [esp+10h]
.text:004080BA                 mov     edi, [esp+14h]
.text:004080BE                 mov     ebp, [esp+18h]
.text:004080C2                 add     esp, 1Ch
.text:004080C5                 retn
.text:004080C6 ; ---------------------------------------------------------------------------
.text:004080C6
.text:004080C6 loc_4080C6:                             ; CODE XREF: .text:0040808D↑j
.text:004080C6                 mov     [esp+8], esi
.text:004080CA                 mov     [esp+4], ebx
.text:004080CE                 mov     [esp], ebp
.text:004080D1                 call    memcpy
.text:004080D6                 jmp     short loc_4080B0
.text:004080D8 ; ---------------------------------------------------------------------------
.text:004080D8
.text:004080D8 loc_4080D8:                             ; CODE XREF: .text:00408062↑j
.text:004080D8                 call    abort
.text:004080D8 ; ---------------------------------------------------------------------------
.text:004080DD                 align 10h
.text:004080E0                 sub     esp, 0Ch
.text:004080E3                 mov     [esp+8], ebx
.text:004080E7                 mov     ebx, [esp+10h]
.text:004080EB                 mov     eax, [ebx]
.text:004080ED                 test    eax, eax
.text:004080EF                 jnz     short loc_408150
.text:004080F1
.text:004080F1 loc_4080F1:                             ; CODE XREF: .text:00408158↓j
.text:004080F1                 mov     dword ptr [ebx], 0
.text:004080F7                 mov     eax, [ebx+10h]
.text:004080FA                 mov     dword ptr [ebx+4], 0
.text:00408101                 mov     dword ptr [ebx+8], 0
.text:00408108                 test    eax, eax
.text:0040810A                 jnz     short loc_408140
.text:0040810C
.text:0040810C loc_40810C:                             ; CODE XREF: .text:00408148↓j
.text:0040810C                 and     byte ptr [ebx+1Ch], 0F7h
.text:00408110                 mov     eax, [ebx+14h]
.text:00408113                 mov     dword ptr [ebx+10h], 0
.text:0040811A                 test    eax, eax
.text:0040811C                 jnz     short loc_408130
.text:0040811E
.text:0040811E loc_40811E:                             ; CODE XREF: .text:00408138↓j
.text:0040811E                 mov     dword ptr [ebx+14h], 0
.text:00408125                 mov     ebx, [esp+8]
.text:00408129                 add     esp, 0Ch
.text:0040812C                 retn
.text:0040812C ; ---------------------------------------------------------------------------
.text:0040812D                 align 10h
.text:00408130
.text:00408130 loc_408130:                             ; CODE XREF: .text:0040811C↑j
.text:00408130                 mov     [esp], eax
.text:00408133                 call    free
.text:00408138                 jmp     short loc_40811E
.text:00408138 ; ---------------------------------------------------------------------------
.text:0040813A                 align 10h
.text:00408140
.text:00408140 loc_408140:                             ; CODE XREF: .text:0040810A↑j
.text:00408140                 mov     [esp], eax
.text:00408143                 call    free
.text:00408148                 jmp     short loc_40810C
.text:00408148 ; ---------------------------------------------------------------------------
.text:0040814A                 align 10h
.text:00408150
.text:00408150 loc_408150:                             ; CODE XREF: .text:004080EF↑j
.text:00408150                 mov     [esp], eax
.text:00408153                 call    free
.text:00408158                 jmp     short loc_4080F1
.text:00408158 ; ---------------------------------------------------------------------------
.text:0040815A aLower          db 'lower',0            ; DATA XREF: sub_408170+1EEB↓o
.text:00408160 aUpper          db 'upper',0            ; DATA XREF: sub_408170+1F11↓o
.text:00408166                 align 10h
.text:00408170
.text:00408170 ; =============== S U B R O U T I N E =======================================
.text:00408170
.text:00408170
.text:00408170 sub_408170      proc near               ; CODE XREF: .text:00407C4B↑p
.text:00408170                                         ; sub_407FE0+31↑p
.text:00408170
.text:00408170 Size            = dword ptr -97Ch
.text:00408170 var_978         = dword ptr -978h
.text:00408170 var_974         = dword ptr -974h
.text:00408170 var_970         = dword ptr -970h
.text:00408170 var_96C         = dword ptr -96Ch
.text:00408170 var_968         = dword ptr -968h
.text:00408170 var_950         = dword ptr -950h
.text:00408170 var_940         = dword ptr -940h
.text:00408170 var_93C         = dword ptr -93Ch
.text:00408170 var_938         = dword ptr -938h
.text:00408170 var_934         = dword ptr -934h
.text:00408170 var_930         = dword ptr -930h
.text:00408170 Type            = word ptr -92Ch
.text:00408170 var_926         = byte ptr -926h
.text:00408170 var_925         = byte ptr -925h
.text:00408170 var_924         = dword ptr -924h
.text:00408170 var_91E         = byte ptr -91Eh
.text:00408170 var_91D         = byte ptr -91Dh
.text:00408170 var_91C         = byte ptr -91Ch
.text:00408170 var_90C         = dword ptr -90Ch
.text:00408170 var_908         = dword ptr -908h
.text:00408170 var_904         = dword ptr -904h
.text:00408170 var_900         = dword ptr -900h
.text:00408170 var_8FC         = dword ptr -8FCh
.text:00408170 var_8F8         = dword ptr -8F8h
.text:00408170 var_8F4         = dword ptr -8F4h
.text:00408170 var_8F0         = dword ptr -8F0h
.text:00408170 var_8EC         = byte ptr -8ECh
.text:00408170 var_8D0         = dword ptr -8D0h
.text:00408170 var_8CC         = byte ptr -8CCh
.text:00408170 var_84C         = byte ptr -84Ch
.text:00408170 name            = byte ptr -83Ch
.text:00408170 Block           = dword ptr -2Ch
.text:00408170 var_28          = dword ptr -28h
.text:00408170 var_24          = dword ptr -24h
.text:00408170 arg_0           = dword ptr  4
.text:00408170 arg_4           = dword ptr  8
.text:00408170 arg_8           = dword ptr  0Ch
.text:00408170 arg_C           = dword ptr  10h
.text:00408170
.text:00408170                 push    ebp
.text:00408171                 mov     ebp, 0Ch
.text:00408176                 push    edi
.text:00408177                 push    esi
.text:00408178                 push    ebx
.text:00408179                 sub     esp, 96Ch
.text:0040817F                 mov     eax, [esp+97Ch+arg_0]
.text:00408186                 mov     [esp+97Ch+var_900], 0
.text:0040818E                 mov     ecx, [esp+97Ch+arg_C]
.text:00408195                 mov     ebx, [esp+97Ch+arg_4]
.text:0040819C                 mov     [esp+97Ch+var_8D0], eax
.text:004081A3                 mov     edx, [ecx+14h]
.text:004081A6                 add     eax, ebx
.text:004081A8                 mov     [esp+97Ch+var_8F4], eax
.text:004081AF                 xor     eax, eax
.text:004081B1                 mov     [esp+97Ch+var_8F8], edx
.text:004081B8                 mov     [esp+97Ch+var_8FC], eax
.text:004081BF                 mov     [esp+97Ch+var_908], 0
.text:004081C7                 mov     [esp+97Ch+var_90C], 0
.text:004081CF                 mov     [esp+97Ch+Size], 280h ; Size
.text:004081D6                 call    malloc
.text:004081DB                 mov     [esp+97Ch+Block], eax
.text:004081E2                 test    eax, eax
.text:004081E4                 jz      loc_408586
.text:004081EA                 mov     edi, [esp+97Ch+arg_C]
.text:004081F1                 xor     edx, edx
.text:004081F3                 mov     ecx, 20h ; ' '
.text:004081F8                 mov     [esp+97Ch+var_28], ecx
.text:004081FF                 mov     ebp, [esp+97Ch+arg_8]
.text:00408206                 mov     [esp+97Ch+var_24], edx
.text:0040820D                 and     byte ptr [edi+1Ch], 97h
.text:00408211                 mov     [edi+0Ch], ebp
.text:00408214                 mov     dword ptr [edi+8], 0
.text:0040821B                 mov     esi, ds:dword_410140
.text:00408221                 mov     dword ptr [edi+18h], 0
.text:00408228                 test    esi, esi
.text:0040822A                 jz      loc_40B461
.text:00408230
.text:00408230 loc_408230:                             ; CODE XREF: sub_408170+3351↓j
.text:00408230                 mov     ebx, [esp+97Ch+arg_C]
.text:00408237                 mov     edx, [ebx+4]
.text:0040823A                 test    edx, edx
.text:0040823C                 jnz     loc_40B452
.text:00408242                 mov     eax, [ebx]
.text:00408244                 test    eax, eax
.text:00408246                 jz      loc_40B438
.text:0040824C                 mov     [esp+97Ch+var_978], 20h ; ' ' ; Size
.text:00408254                 mov     [esp+97Ch+Size], eax ; Block
.text:00408257                 call    realloc
.text:0040825C                 mov     [ebx], eax
.text:0040825E
.text:0040825E loc_40825E:                             ; CODE XREF: sub_408170+32DD↓j
.text:0040825E                 mov     esi, [esp+97Ch+arg_C]
.text:00408265                 mov     edi, [esi]
.text:00408267                 test    edi, edi
.text:00408269                 jz      loc_40B427
.text:0040826F                 mov     eax, [esp+97Ch+arg_C]
.text:00408276                 mov     dword ptr [eax+4], 20h ; ' '
.text:0040827D
.text:0040827D loc_40827D:                             ; CODE XREF: sub_408170+32EC↓j
.text:0040827D                 mov     [esp+97Ch+var_950], edi
.text:00408281                 mov     [esp+97Ch+var_904], edi
.text:00408285                 mov     edi, [esp+97Ch+var_8D0]
.text:0040828C                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408293                 jz      loc_4085E0
.text:00408299
.text:00408299 loc_408299:                             ; CODE XREF: sub_408170+43D↓j
.text:00408299                 movzx   ebx, byte ptr [edi]
.text:0040829C                 inc     edi
.text:0040829D                 mov     edx, [esp+97Ch+var_8F8]
.text:004082A4                 mov     [esp+97Ch+var_8D0], edi
.text:004082AB                 test    edx, edx
.text:004082AD                 mov     [esp+97Ch+var_8EC], bl
.text:004082B4                 jz      short loc_4082CB
.text:004082B6                 mov     edi, [esp+97Ch+var_8F8]
.text:004082BD                 movzx   ecx, bl
.text:004082C0                 movzx   ebx, byte ptr [ecx+edi]
.text:004082C4                 mov     [esp+97Ch+var_8EC], bl
.text:004082CB
.text:004082CB loc_4082CB:                             ; CODE XREF: sub_408170+144↑j
.text:004082CB                 movzx   eax, [esp+97Ch+var_8EC]
.text:004082D3                 sub     eax, 0Ah        ; switch 115 cases
.text:004082D6                 cmp     eax, 72h
.text:004082D9                 ja      def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004082DF                 jmp     ds:jpt_4082DF[eax*4] ; switch jump
.text:004082DF ; ---------------------------------------------------------------------------
.text:004082E6                 align 4
.text:004082E8 jpt_4082DF      dd offset loc_4089D5, offset def_4082DF, offset def_4082DF
.text:004082E8                                         ; DATA XREF: sub_408170+16F↑r
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF ; jump table for switch statement
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset loc_408C0D
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset loc_408D1C, offset loc_408F06, offset loc_4091D0
.text:004082E8                 dd offset loc_409844, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset loc_409760, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset loc_409844
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset loc_40985A, offset loc_40A3E6, offset def_4082DF
.text:004082E8                 dd offset loc_4084B4, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset def_4082DF
.text:004082E8                 dd offset def_4082DF, offset def_4082DF, offset loc_40B3F4
.text:004082E8                 dd offset loc_40B412
.text:004084B4 ; ---------------------------------------------------------------------------
.text:004084B4
.text:004084B4 loc_4084B4:                             ; CODE XREF: sub_408170+16F↑j
.text:004084B4                                         ; DATA XREF: sub_408170:jpt_4082DF↑o
.text:004084B4                 mov     esi, [esp+97Ch+arg_0] ; jumptable 004082DF case 94
.text:004084BB                 mov     edx, [esp+97Ch+var_8D0]
.text:004084C2                 inc     esi
.text:004084C3                 cmp     edx, esi
.text:004084C5                 jz      short loc_4084D5
.text:004084C7                 test    byte ptr [esp+97Ch+arg_8], 8
.text:004084CF                 jz      loc_40871D
.text:004084D5
.text:004084D5 loc_4084D5:                             ; CODE XREF: sub_408170+355↑j
.text:004084D5                                         ; sub_408170+3D7↓j ...
.text:004084D5                 mov     eax, [esp+97Ch+arg_C]
.text:004084DC                 mov     ebp, [esp+97Ch+var_950]
.text:004084E0                 mov     edi, [eax]
.text:004084E2                 mov     edx, [eax+4]
.text:004084E5                 sub     ebp, edi
.text:004084E7                 inc     ebp
.text:004084E8                 cmp     ebp, edx
.text:004084EA                 jbe     loc_408593
.text:004084F0                 cmp     edx, 10000h
.text:004084F6                 mov     ebp, 0Fh
.text:004084FB                 jz      loc_408586
.text:00408501                 lea     ebx, [edx+edx]
.text:00408504                 mov     edx, [esp+97Ch+arg_C]
.text:0040850B                 cmp     ebx, 10000h
.text:00408511                 mov     [edx+4], ebx
.text:00408514                 jbe     short loc_40851D
.text:00408516                 mov     dword ptr [edx+4], 10000h
.text:0040851D
.text:0040851D loc_40851D:                             ; CODE XREF: sub_408170+3A4↑j
.text:0040851D                 mov     ebp, [esp+97Ch+arg_C]
.text:00408524                 mov     esi, [ebp+4]
.text:00408527                 mov     ebp, 0Ch
.text:0040852C                 mov     [esp+97Ch+Size], edi ; Block
.text:0040852F                 mov     [esp+97Ch+var_978], esi ; Size
.text:00408533                 call    realloc
.text:00408538                 mov     edx, [esp+97Ch+arg_C]
.text:0040853F                 test    eax, eax
.text:00408541                 mov     [edx], eax
.text:00408543                 jz      short loc_408586
.text:00408545                 cmp     edi, eax
.text:00408547                 jz      short loc_4084D5
.text:00408549                 mov     ecx, [esp+97Ch+var_908]
.text:0040854D                 sub     eax, edi
.text:0040854F                 add     [esp+97Ch+var_950], eax
.text:00408553                 add     [esp+97Ch+var_904], eax
.text:00408557                 test    ecx, ecx
.text:00408559                 jz      short loc_40855F
.text:0040855B                 add     [esp+97Ch+var_908], eax
.text:0040855F
.text:0040855F loc_40855F:                             ; CODE XREF: sub_408170+3E9↑j
.text:0040855F                 mov     ebx, [esp+97Ch+var_900]
.text:00408563                 test    ebx, ebx
.text:00408565                 jz      short loc_40856B
.text:00408567                 add     [esp+97Ch+var_900], eax
.text:0040856B
.text:0040856B loc_40856B:                             ; CODE XREF: sub_408170+3F5↑j
.text:0040856B                 mov     edi, [esp+97Ch+var_8FC]
.text:00408572                 test    edi, edi
.text:00408574                 jz      loc_4084D5
.text:0040857A                 add     [esp+97Ch+var_8FC], eax
.text:00408581                 jmp     loc_4084D5
.text:00408586 ; ---------------------------------------------------------------------------
.text:00408586
.text:00408586 loc_408586:                             ; CODE XREF: sub_408170+74↑j
.text:00408586                                         ; sub_408170+38B↑j ...
.text:00408586                 add     esp, 96Ch
.text:0040858C                 mov     eax, ebp
.text:0040858E                 pop     ebx
.text:0040858F                 pop     esi
.text:00408590                 pop     edi
.text:00408591                 pop     ebp
.text:00408592                 retn
.text:00408593 ; ---------------------------------------------------------------------------
.text:00408593
.text:00408593 loc_408593:                             ; CODE XREF: sub_408170+37A↑j
.text:00408593                 mov     edi, [esp+97Ch+var_950]
.text:00408597                 mov     byte ptr [edi], 9
.text:0040859A
.text:0040859A loc_40859A:                             ; CODE XREF: sub_408170+16CF↓j
.text:0040859A                                         ; sub_408170+2518↓j ...
.text:0040859A                 inc     edi
.text:0040859B
.text:0040859B loc_40859B:                             ; CODE XREF: sub_408170+1496↓j
.text:0040859B                 mov     [esp+97Ch+var_950], edi
.text:0040859F
.text:0040859F loc_40859F:                             ; CODE XREF: sub_408170+7DA↓j
.text:0040859F                                         ; sub_408170+A98↓j ...
.text:0040859F                 mov     edi, [esp+97Ch+var_8D0]
.text:004085A6                 cmp     edi, [esp+97Ch+var_8F4]
.text:004085AD                 jnz     loc_408299
.text:004085B3                 mov     ebx, [esp+97Ch+var_908]
.text:004085B7                 test    ebx, ebx
.text:004085B9                 jz      short loc_4085E0
.text:004085BB                 mov     [esp+97Ch+Size], 0Eh
.text:004085C2                 mov     ebp, [esp+97Ch+var_950]
.text:004085C6                 mov     edx, [esp+97Ch+var_908]
.text:004085CA                 mov     esi, [esp+97Ch+var_908]
.text:004085CE                 sub     ebp, edx
.text:004085D0                 sub     ebp, 3
.text:004085D3                 mov     [esp+97Ch+var_974], ebp
.text:004085D7                 mov     [esp+97Ch+var_978], esi
.text:004085DB                 call    sub_404F40
.text:004085E0
.text:004085E0 loc_4085E0:                             ; CODE XREF: sub_408170+123↑j
.text:004085E0                                         ; sub_408170+449↑j
.text:004085E0                 mov     eax, [esp+97Ch+var_24]
.text:004085E7                 test    eax, eax
.text:004085E9                 jnz     loc_408704
.text:004085EF                 test    [esp+97Ch+arg_8], 40000h
.text:004085FA                 jz      loc_4086D3
.text:00408600                 mov     ecx, [esp+97Ch+arg_C]
.text:00408607                 mov     ebp, [esp+97Ch+var_950]
.text:0040860B                 mov     ebx, [ecx]
.text:0040860D                 mov     edx, [ecx+4]
.text:00408610                 sub     ebp, ebx
.text:00408612                 mov     edi, ebx
.text:00408614                 inc     ebp
.text:00408615                 cmp     ebp, edx
.text:00408617                 jbe     loc_4086C7
.text:0040861D
.text:0040861D loc_40861D:                             ; CODE XREF: sub_408170+551↓j
.text:0040861D                 cmp     edx, 10000h
.text:00408623                 mov     ebp, 0Fh
.text:00408628                 jz      loc_408586
.text:0040862E                 mov     esi, [esp+97Ch+arg_C]
.text:00408635                 lea     ebp, [edx+edx]
.text:00408638                 cmp     ebp, 10000h
.text:0040863E                 mov     [esi+4], ebp
.text:00408641                 jbe     short loc_40864A
.text:00408643                 mov     dword ptr [esi+4], 10000h
.text:0040864A
.text:0040864A loc_40864A:                             ; CODE XREF: sub_408170+4D1↑j
.text:0040864A                 mov     eax, [esp+97Ch+arg_C]
.text:00408651                 mov     ebp, 0Ch
.text:00408656                 mov     esi, [eax+4]
.text:00408659                 mov     [esp+97Ch+Size], edi ; Block
.text:0040865C                 mov     [esp+97Ch+var_978], esi ; Size
.text:00408660                 call    realloc
.text:00408665                 mov     edx, [esp+97Ch+arg_C]
.text:0040866C                 test    eax, eax
.text:0040866E                 mov     [edx], eax
.text:00408670                 jz      loc_408586
.text:00408676                 cmp     ebx, eax
.text:00408678                 jz      short loc_4086AA
.text:0040867A                 mov     edi, [esp+97Ch+var_908]
.text:0040867E                 sub     eax, ebx
.text:00408680                 add     [esp+97Ch+var_950], eax
.text:00408684                 test    edi, edi
.text:00408686                 jz      short loc_40868C
.text:00408688                 add     [esp+97Ch+var_908], eax
.text:0040868C
.text:0040868C loc_40868C:                             ; CODE XREF: sub_408170+516↑j
.text:0040868C                 mov     ebx, [esp+97Ch+var_900]
.text:00408690                 test    ebx, ebx
.text:00408692                 jz      short loc_408698
.text:00408694                 add     [esp+97Ch+var_900], eax
.text:00408698
.text:00408698 loc_408698:                             ; CODE XREF: sub_408170+522↑j
.text:00408698                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040869F                 test    ecx, ecx
.text:004086A1                 jz      short loc_4086AA
.text:004086A3                 add     [esp+97Ch+var_8FC], eax
.text:004086AA
.text:004086AA loc_4086AA:                             ; CODE XREF: sub_408170+508↑j
.text:004086AA                                         ; sub_408170+531↑j
.text:004086AA                 mov     eax, [esp+97Ch+arg_C]
.text:004086B1                 mov     ebp, [esp+97Ch+var_950]
.text:004086B5                 mov     ebx, [eax]
.text:004086B7                 mov     edx, [eax+4]
.text:004086BA                 sub     ebp, ebx
.text:004086BC                 mov     edi, ebx
.text:004086BE                 inc     ebp
.text:004086BF                 cmp     ebp, edx
.text:004086C1                 ja      loc_40861D
.text:004086C7
.text:004086C7 loc_4086C7:                             ; CODE XREF: sub_408170+4A7↑j
.text:004086C7                 mov     edx, [esp+97Ch+var_950]
.text:004086CB                 mov     byte ptr [edx], 1
.text:004086CE                 inc     edx
.text:004086CF                 mov     [esp+97Ch+var_950], edx
.text:004086D3
.text:004086D3 loc_4086D3:                             ; CODE XREF: sub_408170+48A↑j
.text:004086D3                 mov     ebp, [esp+97Ch+Block]
.text:004086DA                 mov     [esp+97Ch+Size], ebp ; Block
.text:004086DD                 xor     ebp, ebp
.text:004086DF                 call    free
.text:004086E4                 mov     ecx, [esp+97Ch+arg_C]
.text:004086EB                 mov     esi, [esp+97Ch+arg_C]
.text:004086F2                 mov     ebx, [ecx]
.text:004086F4                 sub     [esp+97Ch+var_950], ebx
.text:004086F8                 mov     edi, [esp+97Ch+var_950]
.text:004086FC                 mov     [esi+8], edi
.text:004086FF                 jmp     loc_408586
.text:00408704 ; ---------------------------------------------------------------------------
.text:00408704
.text:00408704 loc_408704:                             ; CODE XREF: sub_408170+479↑j
.text:00408704                 mov     edi, [esp+97Ch+Block]
.text:0040870B                 mov     ebp, 8
.text:00408710
.text:00408710 loc_408710:                             ; CODE XREF: sub_408170+15BC↓j
.text:00408710                                         ; sub_408170+32C3↓j
.text:00408710                 mov     [esp+97Ch+Size], edi ; Block
.text:00408713
.text:00408713 loc_408713:                             ; CODE XREF: sub_408170+EDF↓j
.text:00408713                                         ; sub_408170+1C4C↓j ...
.text:00408713                 call    free
.text:00408718                 jmp     loc_408586
.text:0040871D ; ---------------------------------------------------------------------------
.text:0040871D
.text:0040871D loc_40871D:                             ; CODE XREF: sub_408170+35F↑j
.text:0040871D                 mov     [esp+97Ch+var_978], edx
.text:00408721                 mov     eax, [esp+97Ch+arg_8]
.text:00408728                 mov     ebp, [esp+97Ch+arg_0]
.text:0040872F                 mov     [esp+97Ch+var_974], eax
.text:00408733                 mov     [esp+97Ch+Size], ebp
.text:00408736                 call    sub_405020
.text:0040873B                 test    al, al
.text:0040873D                 jnz     loc_4084D5
.text:00408743
.text:00408743 def_4082DF:                             ; CODE XREF: sub_408170+169↑j
.text:00408743                                         ; sub_408170+16F↑j ...
.text:00408743                 mov     edx, [esp+97Ch+var_8FC] ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040874A                 test    edx, edx
.text:0040874C                 jz      short loc_408769
.text:0040874E                 mov     eax, [esp+97Ch+var_8FC]
.text:00408755                 movzx   edx, byte ptr [eax]
.text:00408758                 movzx   ebx, dl
.text:0040875B                 lea     ebp, [ebx+eax+1]
.text:0040875F                 cmp     ebp, [esp+97Ch+var_950]
.text:00408763                 jz      loc_40894F
.text:00408769
.text:00408769 loc_408769:                             ; CODE XREF: sub_408170+5DC↑j
.text:00408769                                         ; sub_408170+7E1↓j ...
.text:00408769                 mov     edi, [esp+97Ch+var_950]
.text:0040876D                 mov     ebp, [esp+97Ch+arg_C]
.text:00408774                 mov     ecx, [esp+97Ch+var_950]
.text:00408778                 mov     [esp+97Ch+var_900], edi
.text:0040877C                 mov     edi, [ebp+0]
.text:0040877F                 mov     edx, [ebp+4]
.text:00408782                 sub     ecx, edi
.text:00408784                 mov     ebx, edi
.text:00408786                 add     ecx, 2
.text:00408789                 cmp     ecx, edx
.text:0040878B                 jbe     loc_408848
.text:00408791
.text:00408791 loc_408791:                             ; CODE XREF: sub_408170+6D2↓j
.text:00408791                 cmp     edx, 10000h
.text:00408797                 mov     ebp, 0Fh
.text:0040879C                 jz      loc_408586
.text:004087A2                 lea     esi, [edx+edx]
.text:004087A5                 mov     edx, [esp+97Ch+arg_C]
.text:004087AC                 cmp     esi, 10000h
.text:004087B2                 mov     [edx+4], esi
.text:004087B5                 jbe     short loc_4087BE
.text:004087B7                 mov     dword ptr [edx+4], 10000h
.text:004087BE
.text:004087BE loc_4087BE:                             ; CODE XREF: sub_408170+645↑j
.text:004087BE                 mov     eax, [esp+97Ch+arg_C]
.text:004087C5                 mov     ebp, [eax+4]
.text:004087C8                 mov     [esp+97Ch+Size], edi ; Block
.text:004087CB                 mov     [esp+97Ch+var_978], ebp ; Size
.text:004087CF                 mov     ebp, 0Ch
.text:004087D4                 call    realloc
.text:004087D9                 mov     edx, [esp+97Ch+arg_C]
.text:004087E0                 test    eax, eax
.text:004087E2                 mov     [edx], eax
.text:004087E4                 jz      loc_408586
.text:004087EA                 cmp     ebx, eax
.text:004087EC                 jz      short loc_408822
.text:004087EE                 sub     eax, ebx
.text:004087F0                 mov     ebx, [esp+97Ch+var_908]
.text:004087F4                 add     [esp+97Ch+var_950], eax
.text:004087F8                 add     [esp+97Ch+var_904], eax
.text:004087FC                 test    ebx, ebx
.text:004087FE                 jz      short loc_408804
.text:00408800                 add     [esp+97Ch+var_908], eax
.text:00408804
.text:00408804 loc_408804:                             ; CODE XREF: sub_408170+68E↑j
.text:00408804                 mov     ecx, [esp+97Ch+var_900]
.text:00408808                 test    ecx, ecx
.text:0040880A                 jz      short loc_408810
.text:0040880C                 add     [esp+97Ch+var_900], eax
.text:00408810
.text:00408810 loc_408810:                             ; CODE XREF: sub_408170+69A↑j
.text:00408810                 mov     edi, [esp+97Ch+var_8FC]
.text:00408817                 test    edi, edi
.text:00408819                 jz      short loc_408822
.text:0040881B                 add     [esp+97Ch+var_8FC], eax
.text:00408822
.text:00408822 loc_408822:                             ; CODE XREF: sub_408170+67C↑j
.text:00408822                                         ; sub_408170+6A9↑j
.text:00408822                 mov     edx, [esp+97Ch+arg_C]
.text:00408829                 mov     ebp, [esp+97Ch+arg_C]
.text:00408830                 mov     esi, [esp+97Ch+var_950]
.text:00408834                 mov     edi, [edx]
.text:00408836                 mov     edx, [ebp+4]
.text:00408839                 sub     esi, edi
.text:0040883B                 add     esi, 2
.text:0040883E                 mov     ebx, edi
.text:00408840                 cmp     esi, edx
.text:00408842                 ja      loc_408791
.text:00408848
.text:00408848 loc_408848:                             ; CODE XREF: sub_408170+61B↑j
.text:00408848                 mov     eax, [esp+97Ch+var_950]
.text:0040884C                 mov     byte ptr [eax], 2
.text:0040884F                 inc     eax
.text:00408850                 mov     byte ptr [eax], 0
.text:00408853                 mov     ecx, [esp+97Ch+arg_C]
.text:0040885A                 inc     eax
.text:0040885B                 mov     [esp+97Ch+var_950], eax
.text:0040885F                 dec     eax
.text:00408860                 mov     edi, [ecx]
.text:00408862                 mov     [esp+97Ch+var_8FC], eax
.text:00408869                 mov     edx, [ecx+4]
.text:0040886C                 mov     eax, [esp+97Ch+var_950]
.text:00408870                 mov     ebx, edi
.text:00408872                 sub     eax, edi
.text:00408874
.text:00408874 loc_408874:                             ; CODE XREF: sub_408170+7B9↓j
.text:00408874                 inc     eax
.text:00408875                 cmp     eax, edx
.text:00408877                 jbe     loc_40892E
.text:0040887D                 cmp     edx, 10000h
.text:00408883                 mov     ebp, 0Fh
.text:00408888                 jz      loc_408586
.text:0040888E                 lea     esi, [edx+edx]
.text:00408891                 mov     edx, [esp+97Ch+arg_C]
.text:00408898                 cmp     esi, 10000h
.text:0040889E                 mov     [edx+4], esi
.text:004088A1                 jbe     short loc_4088AA
.text:004088A3                 mov     dword ptr [edx+4], 10000h
.text:004088AA
.text:004088AA loc_4088AA:                             ; CODE XREF: sub_408170+731↑j
.text:004088AA                 mov     edx, [esp+97Ch+arg_C]
.text:004088B1                 mov     ebp, [edx+4]
.text:004088B4                 mov     [esp+97Ch+Size], edi ; Block
.text:004088B7                 mov     [esp+97Ch+var_978], ebp ; Size
.text:004088BB                 mov     ebp, 0Ch
.text:004088C0                 call    realloc
.text:004088C5                 mov     edi, [esp+97Ch+arg_C]
.text:004088CC                 test    eax, eax
.text:004088CE                 mov     [edi], eax
.text:004088D0                 jz      loc_408586
.text:004088D6                 cmp     ebx, eax
.text:004088D8                 jz      short loc_40890E
.text:004088DA                 mov     ecx, [esp+97Ch+var_908]
.text:004088DE                 sub     eax, ebx
.text:004088E0                 add     [esp+97Ch+var_950], eax
.text:004088E4                 add     [esp+97Ch+var_904], eax
.text:004088E8                 test    ecx, ecx
.text:004088EA                 jz      short loc_4088F0
.text:004088EC                 add     [esp+97Ch+var_908], eax
.text:004088F0
.text:004088F0 loc_4088F0:                             ; CODE XREF: sub_408170+77A↑j
.text:004088F0                 mov     ebx, [esp+97Ch+var_900]
.text:004088F4                 test    ebx, ebx
.text:004088F6                 jz      short loc_4088FC
.text:004088F8                 add     [esp+97Ch+var_900], eax
.text:004088FC
.text:004088FC loc_4088FC:                             ; CODE XREF: sub_408170+786↑j
.text:004088FC                 mov     esi, [esp+97Ch+var_8FC]
.text:00408903                 test    esi, esi
.text:00408905                 jz      short loc_40890E
.text:00408907                 add     [esp+97Ch+var_8FC], eax
.text:0040890E
.text:0040890E loc_40890E:                             ; CODE XREF: sub_408170+768↑j
.text:0040890E                                         ; sub_408170+795↑j ...
.text:0040890E                 mov     edx, [esp+97Ch+arg_C]
.text:00408915                 mov     ebp, [esp+97Ch+arg_C]
.text:0040891C                 mov     eax, [esp+97Ch+var_950]
.text:00408920                 mov     edi, [edx]
.text:00408922                 mov     edx, [ebp+4]
.text:00408925                 sub     eax, edi
.text:00408927                 mov     ebx, edi
.text:00408929                 jmp     loc_408874
.text:0040892E ; ---------------------------------------------------------------------------
.text:0040892E
.text:0040892E loc_40892E:                             ; CODE XREF: sub_408170+707↑j
.text:0040892E                 movzx   ecx, [esp+97Ch+var_8EC]
.text:00408936                 mov     edi, [esp+97Ch+var_950]
.text:0040893A                 mov     [edi], cl
.text:0040893C                 mov     eax, [esp+97Ch+var_8FC]
.text:00408943                 inc     edi
.text:00408944                 mov     [esp+97Ch+var_950], edi
.text:00408948                 inc     byte ptr [eax]
.text:0040894A                 jmp     loc_40859F
.text:0040894F ; ---------------------------------------------------------------------------
.text:0040894F
.text:0040894F loc_40894F:                             ; CODE XREF: sub_408170+5F3↑j
.text:0040894F                 inc     dl
.text:00408951                 jz      loc_408769
.text:00408957                 mov     edi, [esp+97Ch+var_8D0]
.text:0040895E                 mov     edx, edi
.text:00408960                 movzx   eax, byte ptr [edi]
.text:00408963                 cmp     al, 2Ah ; '*'
.text:00408965                 jz      loc_408769
.text:0040896B                 cmp     al, 5Eh ; '^'
.text:0040896D                 jz      loc_408769
.text:00408973                 test    byte ptr [esp+97Ch+arg_8], 2
.text:0040897B                 jz      short loc_4089C4
.text:0040897D                 cmp     al, 5Ch ; '\'
.text:0040897F                 jz      short loc_4089C0
.text:00408981
.text:00408981 loc_408981:                             ; CODE XREF: sub_408170+85E↓j
.text:00408981                 test    [esp+97Ch+arg_8], 200h
.text:0040898C                 jz      short loc_40890E
.text:0040898E                 test    [esp+97Ch+arg_8], 1000h
.text:00408999                 jz      short loc_4089B0
.text:0040899B                 cmp     byte ptr [edx], 7Bh ; '{'
.text:0040899E
.text:0040899E loc_40899E:                             ; CODE XREF: sub_408170+84D↓j
.text:0040899E                 jnz     loc_40890E
.text:004089A4                 jmp     loc_408769
.text:004089A4 ; ---------------------------------------------------------------------------
.text:004089A9                 align 10h
.text:004089B0
.text:004089B0 loc_4089B0:                             ; CODE XREF: sub_408170+829↑j
.text:004089B0                 cmp     byte ptr [edx], 5Ch ; '\'
.text:004089B3                 jnz     loc_40890E
.text:004089B9                 cmp     byte ptr [edx+1], 7Bh ; '{'
.text:004089BD                 jmp     short loc_40899E
.text:004089BD ; ---------------------------------------------------------------------------
.text:004089BF                 align 10h
.text:004089C0
.text:004089C0 loc_4089C0:                             ; CODE XREF: sub_408170+80F↑j
.text:004089C0                 movzx   eax, byte ptr [edi+1]
.text:004089C4
.text:004089C4 loc_4089C4:                             ; CODE XREF: sub_408170+80B↑j
.text:004089C4                 cmp     al, 2Bh ; '+'
.text:004089C6                 jz      loc_408769
.text:004089CC                 cmp     al, 3Fh ; '?'
.text:004089CE                 jnz     short loc_408981
.text:004089D0                 jmp     loc_408769
.text:004089D5 ; ---------------------------------------------------------------------------
.text:004089D5
.text:004089D5 loc_4089D5:                             ; CODE XREF: sub_408170+16F↑j
.text:004089D5                                         ; DATA XREF: sub_408170:jpt_4082DF↑o
.text:004089D5                 test    [esp+97Ch+arg_8], 800h ; jumptable 004082DF case 10
.text:004089E0
.text:004089E0 loc_4089E0:                             ; CODE XREF: sub_408170+32B2↓j
.text:004089E0                 jz      def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004089E6
.text:004089E6 loc_4089E6:                             ; CODE XREF: sub_408170+3279↓j
.text:004089E6                 test    [esp+97Ch+arg_8], 400h
.text:004089F1                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004089F7
.text:004089F7 loc_4089F7:                             ; CODE XREF: sub_408170+8FF↓j
.text:004089F7                                         ; sub_408170+92C↓j ...
.text:004089F7                 mov     eax, [esp+97Ch+arg_C]
.text:004089FE                 mov     ebp, [esp+97Ch+var_950]
.text:00408A02                 mov     edi, [eax]
.text:00408A04                 mov     edx, [eax+4]
.text:00408A07                 sub     ebp, edi
.text:00408A09                 add     ebp, 3
.text:00408A0C                 cmp     ebp, edx
.text:00408A0E                 jbe     loc_408AAE
.text:00408A14                 cmp     edx, 10000h
.text:00408A1A                 mov     ebp, 0Fh
.text:00408A1F                 jz      loc_408586
.text:00408A25                 lea     ebx, [edx+edx]
.text:00408A28                 mov     edx, [esp+97Ch+arg_C]
.text:00408A2F                 cmp     ebx, 10000h
.text:00408A35                 mov     [edx+4], ebx
.text:00408A38                 jbe     short loc_408A41
.text:00408A3A                 mov     dword ptr [edx+4], 10000h
.text:00408A41
.text:00408A41 loc_408A41:                             ; CODE XREF: sub_408170+8C8↑j
.text:00408A41                 mov     eax, [esp+97Ch+arg_C]
.text:00408A48                 mov     ebp, [eax+4]
.text:00408A4B                 mov     [esp+97Ch+Size], edi ; Block
.text:00408A4E                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00408A52                 mov     ebp, 0Ch
.text:00408A57                 call    realloc
.text:00408A5C                 mov     esi, [esp+97Ch+arg_C]
.text:00408A63                 test    eax, eax
.text:00408A65                 mov     [esi], eax
.text:00408A67                 jz      loc_408586
.text:00408A6D                 cmp     edi, eax
.text:00408A6F                 jz      short loc_4089F7
.text:00408A71                 mov     ecx, [esp+97Ch+var_908]
.text:00408A75                 sub     eax, edi
.text:00408A77                 add     [esp+97Ch+var_950], eax
.text:00408A7B                 add     [esp+97Ch+var_904], eax
.text:00408A7F                 test    ecx, ecx
.text:00408A81                 jz      short loc_408A87
.text:00408A83                 add     [esp+97Ch+var_908], eax
.text:00408A87
.text:00408A87 loc_408A87:                             ; CODE XREF: sub_408170+911↑j
.text:00408A87                 mov     edx, [esp+97Ch+var_900]
.text:00408A8B                 test    edx, edx
.text:00408A8D                 jz      short loc_408A93
.text:00408A8F                 add     [esp+97Ch+var_900], eax
.text:00408A93
.text:00408A93 loc_408A93:                             ; CODE XREF: sub_408170+91D↑j
.text:00408A93                 mov     ebx, [esp+97Ch+var_8FC]
.text:00408A9A                 test    ebx, ebx
.text:00408A9C                 jz      loc_4089F7
.text:00408AA2                 add     [esp+97Ch+var_8FC], eax
.text:00408AA9                 jmp     loc_4089F7
.text:00408AAE ; ---------------------------------------------------------------------------
.text:00408AAE
.text:00408AAE loc_408AAE:                             ; CODE XREF: sub_408170+89E↑j
.text:00408AAE                 mov     [esp+97Ch+Size], 0Fh
.text:00408AB5                 mov     edi, [esp+97Ch+var_950]
.text:00408AB9                 mov     ebp, [esp+97Ch+var_904]
.text:00408ABD                 mov     edx, [esp+97Ch+var_904]
.text:00408AC1                 mov     ebx, edi
.text:00408AC3                 sub     ebx, ebp
.text:00408AC5                 mov     [esp+97Ch+var_970], edi
.text:00408AC9                 add     ebx, 3
.text:00408ACC                 add     edi, 3
.text:00408ACF                 mov     [esp+97Ch+var_974], ebx
.text:00408AD3                 mov     [esp+97Ch+var_978], edx
.text:00408AD7                 call    sub_404F90
.text:00408ADC                 mov     [esp+97Ch+var_950], edi
.text:00408AE0                 mov     esi, [esp+97Ch+var_908]
.text:00408AE4                 xor     ecx, ecx
.text:00408AE6                 mov     [esp+97Ch+var_8FC], ecx
.text:00408AED                 test    esi, esi
.text:00408AEF                 jz      short loc_408B14
.text:00408AF1                 mov     [esp+97Ch+Size], 0Eh
.text:00408AF8                 mov     eax, [esp+97Ch+var_908]
.text:00408AFC                 mov     esi, edi
.text:00408AFE                 mov     edi, [esp+97Ch+var_908]
.text:00408B02                 sub     esi, eax
.text:00408B04                 sub     esi, 3
.text:00408B07                 mov     [esp+97Ch+var_974], esi
.text:00408B0B                 mov     [esp+97Ch+var_978], edi
.text:00408B0F                 call    sub_404F40
.text:00408B14
.text:00408B14 loc_408B14:                             ; CODE XREF: sub_408170+97F↑j
.text:00408B14                 mov     esi, [esp+97Ch+arg_C]
.text:00408B1B                 mov     edx, [esp+97Ch+var_950]
.text:00408B1F                 mov     ecx, [esp+97Ch+arg_C]
.text:00408B26                 mov     edi, [esi]
.text:00408B28                 mov     ebp, edx
.text:00408B2A                 mov     [esp+97Ch+var_908], edx
.text:00408B2E                 mov     edx, [ecx+4]
.text:00408B31                 sub     ebp, edi
.text:00408B33                 add     ebp, 3
.text:00408B36                 mov     ebx, edi
.text:00408B38                 cmp     ebp, edx
.text:00408B3A                 jbe     loc_408BF3
.text:00408B40
.text:00408B40 loc_408B40:                             ; CODE XREF: sub_408170+A7D↓j
.text:00408B40                 cmp     edx, 10000h
.text:00408B46                 mov     ebp, 0Fh
.text:00408B4B                 jz      loc_408586
.text:00408B51                 lea     ebp, [edx+edx]
.text:00408B54                 mov     edx, [esp+97Ch+arg_C]
.text:00408B5B                 cmp     ebp, 10000h
.text:00408B61                 mov     [edx+4], ebp
.text:00408B64                 jbe     short loc_408B6D
.text:00408B66                 mov     dword ptr [edx+4], 10000h
.text:00408B6D
.text:00408B6D loc_408B6D:                             ; CODE XREF: sub_408170+9F4↑j
.text:00408B6D                 mov     eax, [esp+97Ch+arg_C]
.text:00408B74                 mov     ebp, 0Ch
.text:00408B79                 mov     edx, [eax+4]
.text:00408B7C                 mov     [esp+97Ch+Size], edi ; Block
.text:00408B7F                 mov     [esp+97Ch+var_978], edx ; Size
.text:00408B83                 call    realloc
.text:00408B88                 mov     edi, [esp+97Ch+arg_C]
.text:00408B8F                 test    eax, eax
.text:00408B91                 mov     [edi], eax
.text:00408B93                 jz      loc_408586
.text:00408B99                 cmp     ebx, eax
.text:00408B9B                 jz      short loc_408BCD
.text:00408B9D                 sub     eax, ebx
.text:00408B9F                 mov     ebx, [esp+97Ch+var_908]
.text:00408BA3                 add     [esp+97Ch+var_950], eax
.text:00408BA7                 test    ebx, ebx
.text:00408BA9                 jz      short loc_408BAF
.text:00408BAB                 add     [esp+97Ch+var_908], eax
.text:00408BAF
.text:00408BAF loc_408BAF:                             ; CODE XREF: sub_408170+A39↑j
.text:00408BAF                 mov     ecx, [esp+97Ch+var_900]
.text:00408BB3                 test    ecx, ecx
.text:00408BB5                 jz      short loc_408BBB
.text:00408BB7                 add     [esp+97Ch+var_900], eax
.text:00408BBB
.text:00408BBB loc_408BBB:                             ; CODE XREF: sub_408170+A45↑j
.text:00408BBB                 mov     ebp, [esp+97Ch+var_8FC]
.text:00408BC2                 test    ebp, ebp
.text:00408BC4                 jz      short loc_408BCD
.text:00408BC6                 add     [esp+97Ch+var_8FC], eax
.text:00408BCD
.text:00408BCD loc_408BCD:                             ; CODE XREF: sub_408170+A2B↑j
.text:00408BCD                                         ; sub_408170+A54↑j
.text:00408BCD                 mov     edx, [esp+97Ch+arg_C]
.text:00408BD4                 mov     eax, [esp+97Ch+arg_C]
.text:00408BDB                 mov     esi, [esp+97Ch+var_950]
.text:00408BDF                 mov     edi, [edx]
.text:00408BE1                 mov     edx, [eax+4]
.text:00408BE4                 sub     esi, edi
.text:00408BE6                 add     esi, 3
.text:00408BE9                 mov     ebx, edi
.text:00408BEB                 cmp     esi, edx
.text:00408BED                 ja      loc_408B40
.text:00408BF3
.text:00408BF3 loc_408BF3:                             ; CODE XREF: sub_408170+9CA↑j
.text:00408BF3                 add     [esp+97Ch+var_950], 3
.text:00408BF8                 mov     [esp+97Ch+var_900], 0
.text:00408C00                 mov     edi, [esp+97Ch+var_950]
.text:00408C04                 mov     [esp+97Ch+var_904], edi
.text:00408C08                 jmp     loc_40859F
.text:00408C0D ; ---------------------------------------------------------------------------
.text:00408C0D
.text:00408C0D loc_408C0D:                             ; CODE XREF: sub_408170+16F↑j
.text:00408C0D                                         ; DATA XREF: sub_408170:jpt_4082DF↑o
.text:00408C0D                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 004082DF case 36
.text:00408C14                 cmp     eax, [esp+97Ch+var_8F4]
.text:00408C1B                 jz      short loc_408C2B
.text:00408C1D                 test    byte ptr [esp+97Ch+arg_8], 8
.text:00408C25                 jz      loc_408CF1
.text:00408C2B
.text:00408C2B loc_408C2B:                             ; CODE XREF: sub_408170+AAB↑j
.text:00408C2B                                         ; sub_408170+B31↓j ...
.text:00408C2B                 mov     ecx, [esp+97Ch+arg_C]
.text:00408C32                 mov     eax, [esp+97Ch+arg_C]
.text:00408C39                 mov     ebx, [esp+97Ch+var_950]
.text:00408C3D                 mov     edi, [ecx]
.text:00408C3F                 mov     edx, [eax+4]
.text:00408C42                 sub     ebx, edi
.text:00408C44                 inc     ebx
.text:00408C45                 cmp     ebx, edx
.text:00408C47                 jbe     loc_408CE0
.text:00408C4D                 cmp     edx, 10000h
.text:00408C53                 mov     ebp, 0Fh
.text:00408C58                 jz      loc_408586
.text:00408C5E                 mov     ebx, [esp+97Ch+arg_C]
.text:00408C65                 lea     ecx, [edx+edx]
.text:00408C68                 cmp     ecx, 10000h
.text:00408C6E                 mov     [ebx+4], ecx
.text:00408C71                 jbe     short loc_408C7A
.text:00408C73                 mov     dword ptr [ebx+4], 10000h
.text:00408C7A
.text:00408C7A loc_408C7A:                             ; CODE XREF: sub_408170+B01↑j
.text:00408C7A                 mov     ebx, [esp+97Ch+arg_C]
.text:00408C81                 mov     ebp, [ebx+4]
.text:00408C84                 mov     [esp+97Ch+Size], edi ; Block
.text:00408C87                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00408C8B                 mov     ebp, 0Ch
.text:00408C90                 call    realloc
.text:00408C95                 mov     [ebx], eax
.text:00408C97                 test    eax, eax
.text:00408C99                 jz      loc_408586
.text:00408C9F                 cmp     edi, eax
.text:00408CA1                 jz      short loc_408C2B
.text:00408CA3                 sub     eax, edi
.text:00408CA5                 mov     edi, [esp+97Ch+var_908]
.text:00408CA9                 add     [esp+97Ch+var_950], eax
.text:00408CAD                 add     [esp+97Ch+var_904], eax
.text:00408CB1                 test    edi, edi
.text:00408CB3                 jz      short loc_408CB9
.text:00408CB5                 add     [esp+97Ch+var_908], eax
.text:00408CB9
.text:00408CB9 loc_408CB9:                             ; CODE XREF: sub_408170+B43↑j
.text:00408CB9                 mov     edx, [esp+97Ch+var_900]
.text:00408CBD                 test    edx, edx
.text:00408CBF                 jz      short loc_408CC5
.text:00408CC1                 add     [esp+97Ch+var_900], eax
.text:00408CC5
.text:00408CC5 loc_408CC5:                             ; CODE XREF: sub_408170+B4F↑j
.text:00408CC5                 mov     esi, [esp+97Ch+var_8FC]
.text:00408CCC                 test    esi, esi
.text:00408CCE                 jz      loc_408C2B
.text:00408CD4                 add     [esp+97Ch+var_8FC], eax
.text:00408CDB                 jmp     loc_408C2B
.text:00408CE0 ; ---------------------------------------------------------------------------
.text:00408CE0
.text:00408CE0 loc_408CE0:                             ; CODE XREF: sub_408170+AD7↑j
.text:00408CE0                 mov     ebx, [esp+97Ch+var_950]
.text:00408CE4                 mov     byte ptr [ebx], 0Ah
.text:00408CE7
.text:00408CE7 loc_408CE7:                             ; CODE XREF: sub_408170+1059↓j
.text:00408CE7                 inc     ebx
.text:00408CE8                 mov     [esp+97Ch+var_950], ebx
.text:00408CEC                 jmp     loc_40859F
.text:00408CF1 ; ---------------------------------------------------------------------------
.text:00408CF1
.text:00408CF1 loc_408CF1:                             ; CODE XREF: sub_408170+AB5↑j
.text:00408CF1                 mov     [esp+97Ch+Size], eax
.text:00408CF4                 mov     esi, [esp+97Ch+arg_8]
.text:00408CFB                 mov     edx, [esp+97Ch+var_8F4]
.text:00408D02                 mov     [esp+97Ch+var_974], esi
.text:00408D06                 mov     [esp+97Ch+var_978], edx
.text:00408D0A                 call    sub_405080
.text:00408D0F                 test    al, al
.text:00408D11                 jnz     loc_408C2B
.text:00408D17                 jmp     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00408D1C ; ---------------------------------------------------------------------------
.text:00408D1C
.text:00408D1C loc_408D1C:                             ; CODE XREF: sub_408170+16F↑j
.text:00408D1C                                         ; DATA XREF: sub_408170:jpt_4082DF↑o
.text:00408D1C                 test    [esp+97Ch+arg_8], 2000h ; jumptable 004082DF case 40
.text:00408D27                 jz      def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00408D2D
.text:00408D2D loc_408D2D:                             ; CODE XREF: sub_408170+2417↓j
.text:00408D2D                 inc     [esp+97Ch+var_90C]
.text:00408D31                 mov     eax, [esp+97Ch+arg_C]
.text:00408D38                 inc     dword ptr [eax+18h]
.text:00408D3B                 mov     ecx, [esp+97Ch+var_24]
.text:00408D42                 cmp     ecx, [esp+97Ch+var_28]
.text:00408D49                 jz      loc_408EC6
.text:00408D4F
.text:00408D4F loc_408D4F:                             ; CODE XREF: sub_408170+D91↓j
.text:00408D4F                 mov     edx, [esp+97Ch+arg_C]
.text:00408D56                 lea     edi, [ecx+ecx*4]
.text:00408D59                 xor     eax, eax
.text:00408D5B                 lea     ebp, ds:0[edi*4]
.text:00408D62                 mov     ebx, [esp+97Ch+Block]
.text:00408D69                 mov     edi, [edx]
.text:00408D6B                 sub     [esp+97Ch+var_904], edi
.text:00408D6F                 mov     edx, edi
.text:00408D71                 mov     esi, [esp+97Ch+var_904]
.text:00408D75                 mov     [ebx+ebp], esi
.text:00408D78                 mov     esi, [esp+97Ch+var_908]
.text:00408D7C                 test    esi, esi
.text:00408D7E                 jz      short loc_408D87
.text:00408D80                 mov     eax, [esp+97Ch+var_908]
.text:00408D84                 sub     eax, edi
.text:00408D86                 inc     eax
.text:00408D87
.text:00408D87 loc_408D87:                             ; CODE XREF: sub_408170+C0E↑j
.text:00408D87                 mov     [ebx+ebp+4], eax
.text:00408D8B                 lea     esi, [ecx+ecx*4]
.text:00408D8E                 mov     ebp, [esp+97Ch+var_90C]
.text:00408D92                 mov     ecx, [esp+97Ch+var_950]
.text:00408D96                 shl     esi, 2
.text:00408D99                 mov     [ebx+esi+10h], ebp
.text:00408D9D                 sub     ecx, edx
.text:00408D9F                 cmp     ebp, 0FFh
.text:00408DA5                 mov     [ebx+esi+0Ch], ecx
.text:00408DA9                 ja      loc_408E99
.text:00408DAF                 mov     edx, [esp+97Ch+var_24]
.text:00408DB6                 lea     esi, [ecx+2]
.text:00408DB9                 mov     eax, [esp+97Ch+arg_C]
.text:00408DC0                 lea     ebp, [edx+edx*4]
.text:00408DC3                 lea     edx, [ecx+3]
.text:00408DC6                 mov     [ebx+ebp*4+8], esi
.text:00408DCA                 mov     ecx, [eax+4]
.text:00408DCD                 cmp     edx, ecx
.text:00408DCF                 jbe     loc_408E81
.text:00408DD5
.text:00408DD5 loc_408DD5:                             ; CODE XREF: sub_408170+D0B↓j
.text:00408DD5                 cmp     ecx, 10000h
.text:00408DDB                 mov     ebp, 0Fh
.text:00408DE0                 jz      loc_408586
.text:00408DE6                 mov     esi, [esp+97Ch+arg_C]
.text:00408DED                 lea     ebx, [ecx+ecx]
.text:00408DF0                 cmp     ebx, 10000h
.text:00408DF6                 mov     [esi+4], ebx
.text:00408DF9                 jbe     short loc_408E02
.text:00408DFB                 mov     dword ptr [esi+4], 10000h
.text:00408E02
.text:00408E02 loc_408E02:                             ; CODE XREF: sub_408170+C89↑j
.text:00408E02                 mov     eax, [esp+97Ch+arg_C]
.text:00408E09                 mov     ecx, [eax+4]
.text:00408E0C                 mov     [esp+97Ch+Size], edi ; Block
.text:00408E0F                 mov     [esp+97Ch+var_978], ecx ; Size
.text:00408E13                 call    realloc
.text:00408E18                 mov     ebp, [esp+97Ch+arg_C]
.text:00408E1F                 test    eax, eax
.text:00408E21                 mov     [ebp+0], eax
.text:00408E24                 mov     ebp, 0Ch
.text:00408E29                 jz      loc_408586
.text:00408E2F                 cmp     edi, eax
.text:00408E31                 jz      short loc_408E63
.text:00408E33                 sub     eax, edi
.text:00408E35                 mov     edi, [esp+97Ch+var_908]
.text:00408E39                 add     [esp+97Ch+var_950], eax
.text:00408E3D                 test    edi, edi
.text:00408E3F                 jz      short loc_408E45
.text:00408E41                 add     [esp+97Ch+var_908], eax
.text:00408E45
.text:00408E45 loc_408E45:                             ; CODE XREF: sub_408170+CCF↑j
.text:00408E45                 mov     esi, [esp+97Ch+var_900]
.text:00408E49                 test    esi, esi
.text:00408E4B                 jz      short loc_408E51
.text:00408E4D                 add     [esp+97Ch+var_900], eax
.text:00408E51
.text:00408E51 loc_408E51:                             ; CODE XREF: sub_408170+CDB↑j
.text:00408E51                 mov     ebx, [esp+97Ch+var_8FC]
.text:00408E58                 test    ebx, ebx
.text:00408E5A                 jz      short loc_408E63
.text:00408E5C                 add     [esp+97Ch+var_8FC], eax
.text:00408E63
.text:00408E63 loc_408E63:                             ; CODE XREF: sub_408170+CC1↑j
.text:00408E63                                         ; sub_408170+CEA↑j
.text:00408E63                 mov     ebp, [esp+97Ch+arg_C]
.text:00408E6A                 mov     edx, [esp+97Ch+var_950]
.text:00408E6E                 mov     edi, [ebp+0]
.text:00408E71                 mov     ecx, [ebp+4]
.text:00408E74                 sub     edx, edi
.text:00408E76                 add     edx, 3
.text:00408E79                 cmp     edx, ecx
.text:00408E7B                 ja      loc_408DD5
.text:00408E81
.text:00408E81 loc_408E81:                             ; CODE XREF: sub_408170+C5F↑j
.text:00408E81                 mov     ecx, [esp+97Ch+var_950]
.text:00408E85                 mov     byte ptr [ecx], 6
.text:00408E88                 inc     ecx
.text:00408E89                 movzx   ebx, byte ptr [esp+97Ch+var_90C]
.text:00408E8E                 mov     [ecx], bl
.text:00408E90                 inc     ecx
.text:00408E91                 mov     byte ptr [ecx], 0
.text:00408E94                 inc     ecx
.text:00408E95                 mov     [esp+97Ch+var_950], ecx
.text:00408E99
.text:00408E99 loc_408E99:                             ; CODE XREF: sub_408170+C39↑j
.text:00408E99                 inc     [esp+97Ch+var_24]
.text:00408EA0                 mov     eax, [esp+97Ch+var_950]
.text:00408EA4                 mov     [esp+97Ch+var_908], 0
.text:00408EAC                 mov     [esp+97Ch+var_900], 0
.text:00408EB4                 mov     [esp+97Ch+var_904], eax
.text:00408EB8
.text:00408EB8 loc_408EB8:                             ; CODE XREF: sub_408170+2F9A↓j
.text:00408EB8                                         ; sub_408170+3107↓j ...
.text:00408EB8                 xor     eax, eax
.text:00408EBA                 mov     [esp+97Ch+var_8FC], eax
.text:00408EC1                 jmp     loc_40859F
.text:00408EC6 ; ---------------------------------------------------------------------------
.text:00408EC6
.text:00408EC6 loc_408EC6:                             ; CODE XREF: sub_408170+BD9↑j
.text:00408EC6                 mov     ebp, [esp+97Ch+Block]
.text:00408ECD                 lea     edi, [ecx+ecx*4]
.text:00408ED0                 shl     edi, 3
.text:00408ED3                 mov     [esp+97Ch+var_978], edi ; Size
.text:00408ED7                 mov     [esp+97Ch+Size], ebp ; Block
.text:00408EDA                 mov     ebp, 0Ch
.text:00408EDF                 call    realloc
.text:00408EE4                 mov     [esp+97Ch+Block], eax
.text:00408EEB                 test    eax, eax
.text:00408EED                 jz      loc_408586
.text:00408EF3                 shl     [esp+97Ch+var_28], 1
.text:00408EFA                 mov     ecx, [esp+97Ch+var_24]
.text:00408F01                 jmp     loc_408D4F
.text:00408F06 ; ---------------------------------------------------------------------------
.text:00408F06
.text:00408F06 loc_408F06:                             ; CODE XREF: sub_408170+16F↑j
.text:00408F06                                         ; DATA XREF: sub_408170:jpt_4082DF↑o
.text:00408F06                 test    [esp+97Ch+arg_8], 2000h ; jumptable 004082DF case 41
.text:00408F11                 jz      def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00408F17
.text:00408F17 loc_408F17:                             ; CODE XREF: sub_408170+2537↓j
.text:00408F17                 mov     esi, [esp+97Ch+var_908]
.text:00408F1B                 test    esi, esi
.text:00408F1D                 jz      loc_409024
.text:00408F23                 mov     eax, [esp+97Ch+arg_C]
.text:00408F2A                 mov     ebp, [esp+97Ch+var_950]
.text:00408F2E                 mov     edi, [eax]
.text:00408F30                 mov     edx, [eax+4]
.text:00408F33                 sub     ebp, edi
.text:00408F35                 mov     ebx, edi
.text:00408F37                 inc     ebp
.text:00408F38                 cmp     ebp, edx
.text:00408F3A                 jbe     loc_408FF5
.text:00408F40
.text:00408F40 loc_408F40:                             ; CODE XREF: sub_408170+E7F↓j
.text:00408F40                 cmp     edx, 10000h
.text:00408F46                 mov     ebp, 0Fh
.text:00408F4B                 jz      loc_408586
.text:00408F51                 mov     esi, [esp+97Ch+arg_C]
.text:00408F58                 lea     ecx, [edx+edx]
.text:00408F5B                 cmp     ecx, 10000h
.text:00408F61                 mov     [esi+4], ecx
.text:00408F64                 jbe     short loc_408F6D
.text:00408F66                 mov     dword ptr [esi+4], 10000h
.text:00408F6D
.text:00408F6D loc_408F6D:                             ; CODE XREF: sub_408170+DF4↑j
.text:00408F6D                 mov     ebp, [esp+97Ch+arg_C]
.text:00408F74                 mov     esi, [ebp+4]
.text:00408F77                 mov     ebp, 0Ch
.text:00408F7C                 mov     [esp+97Ch+Size], edi ; Block
.text:00408F7F                 mov     [esp+97Ch+var_978], esi ; Size
.text:00408F83                 call    realloc
.text:00408F88                 mov     edx, [esp+97Ch+arg_C]
.text:00408F8F                 test    eax, eax
.text:00408F91                 mov     [edx], eax
.text:00408F93                 jz      loc_408586
.text:00408F99                 cmp     ebx, eax
.text:00408F9B                 jz      short loc_408FD1
.text:00408F9D                 sub     eax, ebx
.text:00408F9F                 mov     ebx, [esp+97Ch+var_908]
.text:00408FA3                 add     [esp+97Ch+var_950], eax
.text:00408FA7                 add     [esp+97Ch+var_904], eax
.text:00408FAB                 test    ebx, ebx
.text:00408FAD                 jz      short loc_408FB3
.text:00408FAF                 add     [esp+97Ch+var_908], eax
.text:00408FB3
.text:00408FB3 loc_408FB3:                             ; CODE XREF: sub_408170+E3D↑j
.text:00408FB3                 mov     edi, [esp+97Ch+var_900]
.text:00408FB7                 test    edi, edi
.text:00408FB9                 jz      short loc_408FBF
.text:00408FBB                 add     [esp+97Ch+var_900], eax
.text:00408FBF
.text:00408FBF loc_408FBF:                             ; CODE XREF: sub_408170+E49↑j
.text:00408FBF                 mov     edx, [esp+97Ch+var_8FC]
.text:00408FC6                 test    edx, edx
.text:00408FC8                 jz      short loc_408FD1
.text:00408FCA                 add     [esp+97Ch+var_8FC], eax
.text:00408FD1
.text:00408FD1 loc_408FD1:                             ; CODE XREF: sub_408170+E2B↑j
.text:00408FD1                                         ; sub_408170+E58↑j
.text:00408FD1                 mov     esi, [esp+97Ch+arg_C]
.text:00408FD8                 mov     eax, [esp+97Ch+arg_C]
.text:00408FDF                 mov     ecx, [esp+97Ch+var_950]
.text:00408FE3                 mov     edi, [esi]
.text:00408FE5                 mov     edx, [eax+4]
.text:00408FE8                 sub     ecx, edi
.text:00408FEA                 inc     ecx
.text:00408FEB                 mov     ebx, edi
.text:00408FED                 cmp     ecx, edx
.text:00408FEF                 ja      loc_408F40
.text:00408FF5
.text:00408FF5 loc_408FF5:                             ; CODE XREF: sub_408170+DCA↑j
.text:00408FF5                 mov     edx, [esp+97Ch+var_950]
.text:00408FF9                 mov     byte ptr [edx], 14h
.text:00408FFC                 mov     edi, [esp+97Ch+var_908]
.text:00409000                 inc     edx
.text:00409001                 mov     [esp+97Ch+var_950], edx
.text:00409005                 mov     ebx, edx
.text:00409007                 mov     ebp, [esp+97Ch+var_908]
.text:0040900B                 mov     [esp+97Ch+Size], 0Eh
.text:00409012                 sub     ebx, edi
.text:00409014                 sub     ebx, 4
.text:00409017                 mov     [esp+97Ch+var_974], ebx
.text:0040901B                 mov     [esp+97Ch+var_978], ebp
.text:0040901F                 call    sub_404F40
.text:00409024
.text:00409024 loc_409024:                             ; CODE XREF: sub_408170+DAD↑j
.text:00409024                 mov     eax, [esp+97Ch+var_24]
.text:0040902B                 test    eax, eax
.text:0040902D                 jnz     short loc_409054
.text:0040902F                 test    [esp+97Ch+arg_8], 20000h
.text:0040903A                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00409040
.text:00409040 loc_409040:                             ; CODE XREF: sub_408170+254E↓j
.text:00409040                 mov     ecx, [esp+97Ch+Block]
.text:00409047                 mov     ebp, 10h
.text:0040904C
.text:0040904C loc_40904C:                             ; CODE XREF: sub_408170+15EA↓j
.text:0040904C                                         ; sub_408170+21AF↓j
.text:0040904C                 mov     [esp+97Ch+Size], ecx
.text:0040904F                 jmp     loc_408713
.text:00409054 ; ---------------------------------------------------------------------------
.text:00409054
.text:00409054 loc_409054:                             ; CODE XREF: sub_408170+EBD↑j
.text:00409054                 dec     eax
.text:00409055                 mov     edx, [esp+97Ch+Block]
.text:0040905C                 mov     ebp, [esp+97Ch+arg_C]
.text:00409063                 mov     [esp+97Ch+var_24], eax
.text:0040906A                 lea     esi, [eax+eax*4]
.text:0040906D                 shl     esi, 2
.text:00409070                 mov     ebx, [ebp+0]
.text:00409073                 mov     edi, [edx+esi]
.text:00409076                 mov     ebp, [edx+esi+4]
.text:0040907A                 mov     ecx, ebx
.text:0040907C                 add     edi, ebx
.text:0040907E                 test    ebp, ebp
.text:00409080                 mov     [esp+97Ch+var_904], edi
.text:00409084                 lea     edi, [ebp+ebx-1]
.text:00409088                 setz    bl
.text:0040908B                 movzx   esi, bl
.text:0040908E                 mov     ebx, [esp+97Ch+var_24]
.text:00409095                 dec     esi
.text:00409096                 and     edi, esi
.text:00409098                 lea     eax, [ebx+ebx*4]
.text:0040909B                 mov     [esp+97Ch+var_908], edi
.text:0040909F                 shl     eax, 2
.text:004090A2                 xor     esi, esi
.text:004090A4                 mov     [esp+97Ch+var_8FC], esi
.text:004090AB                 mov     ebx, [edx+eax+10h]
.text:004090AF                 mov     ebp, [edx+eax+0Ch]
.text:004090B3                 mov     [esp+97Ch+var_930], ebx
.text:004090B7                 add     ebp, ecx
.text:004090B9                 cmp     ebx, 0FFh
.text:004090BF                 mov     [esp+97Ch+var_900], ebp
.text:004090C3                 ja      loc_40859F
.text:004090C9                 mov     esi, [edx+eax+8]
.text:004090CD                 movzx   edx, byte ptr [esp+97Ch+var_90C]
.text:004090D2                 add     ecx, esi
.text:004090D4                 sub     dl, bl
.text:004090D6                 mov     [ecx], dl
.text:004090D8                 mov     eax, [esp+97Ch+arg_C]
.text:004090DF                 mov     ecx, [esp+97Ch+var_950]
.text:004090E3                 mov     edi, [eax]
.text:004090E5                 mov     edx, [eax+4]
.text:004090E8                 sub     ecx, edi
.text:004090EA                 add     ecx, 3
.text:004090ED                 mov     ebx, edi
.text:004090EF                 cmp     ecx, edx
.text:004090F1                 jbe     loc_4091AE
.text:004090F7
.text:004090F7 loc_4090F7:                             ; CODE XREF: sub_408170+1038↓j
.text:004090F7                 cmp     edx, 10000h
.text:004090FD                 mov     ebp, 0Fh
.text:00409102                 jz      loc_408586
.text:00409108                 lea     ebp, [edx+edx]
.text:0040910B                 mov     edx, [esp+97Ch+arg_C]
.text:00409112                 cmp     ebp, 10000h
.text:00409118                 mov     [edx+4], ebp
.text:0040911B                 jbe     short loc_409124
.text:0040911D                 mov     dword ptr [edx+4], 10000h
.text:00409124
.text:00409124 loc_409124:                             ; CODE XREF: sub_408170+FAB↑j
.text:00409124                 mov     eax, [esp+97Ch+arg_C]
.text:0040912B                 mov     ebp, 0Ch
.text:00409130                 mov     edx, [eax+4]
.text:00409133                 mov     [esp+97Ch+Size], edi ; Block
.text:00409136                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040913A                 call    realloc
.text:0040913F                 mov     edi, [esp+97Ch+arg_C]
.text:00409146                 test    eax, eax
.text:00409148                 mov     [edi], eax
.text:0040914A                 jz      loc_408586
.text:00409150                 cmp     ebx, eax
.text:00409152                 jz      short loc_409188
.text:00409154                 sub     eax, ebx
.text:00409156                 mov     ebx, [esp+97Ch+var_908]
.text:0040915A                 add     [esp+97Ch+var_950], eax
.text:0040915E                 add     [esp+97Ch+var_904], eax
.text:00409162                 test    ebx, ebx
.text:00409164                 jz      short loc_40916A
.text:00409166                 add     [esp+97Ch+var_908], eax
.text:0040916A
.text:0040916A loc_40916A:                             ; CODE XREF: sub_408170+FF4↑j
.text:0040916A                 mov     ecx, [esp+97Ch+var_900]
.text:0040916E                 test    ecx, ecx
.text:00409170                 jz      short loc_409176
.text:00409172                 add     [esp+97Ch+var_900], eax
.text:00409176
.text:00409176 loc_409176:                             ; CODE XREF: sub_408170+1000↑j
.text:00409176                 mov     esi, [esp+97Ch+var_8FC]
.text:0040917D                 test    esi, esi
.text:0040917F                 jz      short loc_409188
.text:00409181                 add     [esp+97Ch+var_8FC], eax
.text:00409188
.text:00409188 loc_409188:                             ; CODE XREF: sub_408170+FE2↑j
.text:00409188                                         ; sub_408170+100F↑j
.text:00409188                 mov     edx, [esp+97Ch+arg_C]
.text:0040918F                 mov     eax, [esp+97Ch+arg_C]
.text:00409196                 mov     ebp, [esp+97Ch+var_950]
.text:0040919A                 mov     edi, [edx]
.text:0040919C                 mov     edx, [eax+4]
.text:0040919F                 sub     ebp, edi
.text:004091A1                 add     ebp, 3
.text:004091A4                 mov     ebx, edi
.text:004091A6                 cmp     ebp, edx
.text:004091A8                 ja      loc_4090F7
.text:004091AE
.text:004091AE loc_4091AE:                             ; CODE XREF: sub_408170+F81↑j
.text:004091AE                 mov     ebx, [esp+97Ch+var_950]
.text:004091B2                 mov     byte ptr [ebx], 7
.text:004091B5                 inc     ebx
.text:004091B6                 movzx   edx, byte ptr [esp+97Ch+var_930]
.text:004091BB                 mov     [ebx], dl
.text:004091BD                 inc     ebx
.text:004091BE                 movzx   ecx, byte ptr [esp+97Ch+var_90C]
.text:004091C3                 sub     cl, byte ptr [esp+97Ch+var_930]
.text:004091C7                 mov     [ebx], cl
.text:004091C9                 jmp     loc_408CE7
.text:004091C9 ; ---------------------------------------------------------------------------
.text:004091CE                 align 10h
.text:004091D0
.text:004091D0 loc_4091D0:                             ; CODE XREF: sub_408170+16F↑j
.text:004091D0                                         ; sub_408170+16DF↓j ...
.text:004091D0                 mov     ebp, [esp+97Ch+var_900] ; jumptable 004082DF case 42
.text:004091D4                 test    ebp, ebp
.text:004091D6                 jz      loc_409731
.text:004091DC
.text:004091DC loc_4091DC:                             ; CODE XREF: sub_408170+15D3↓j
.text:004091DC                 mov     [esp+97Ch+var_91C], 0
.text:004091E1                 xor     ecx, ecx
.text:004091E3                 mov     [esp+97Ch+var_91D], 0
.text:004091E8
.text:004091E8 loc_4091E8:                             ; CODE XREF: sub_408170+10ED↓j
.text:004091E8                                         ; sub_408170+1105↓j ...
.text:004091E8                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:004091F0                 movsx   eax, [esp+97Ch+var_91D]
.text:004091F5                 jz      short loc_4091FA
.text:004091F7                 or      eax, 1
.text:004091FA
.text:004091FA loc_4091FA:                             ; CODE XREF: sub_408170+1085↑j
.text:004091FA                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:00409202                 mov     [esp+97Ch+var_91D], al
.text:00409206                 movsx   eax, cl
.text:00409209                 jz      short loc_40920E
.text:0040920B                 or      eax, 1
.text:0040920E
.text:0040920E loc_40920E:                             ; CODE XREF: sub_408170+1099↑j
.text:0040920E                 mov     edx, [esp+97Ch+var_8D0]
.text:00409215                 mov     cl, al
.text:00409217                 cmp     edx, [esp+97Ch+var_8F4]
.text:0040921E                 jz      short loc_409290
.text:00409220                 movzx   eax, byte ptr [edx]
.text:00409223                 lea     edi, [edx+1]
.text:00409226                 mov     esi, [esp+97Ch+var_8F8]
.text:0040922D                 mov     [esp+97Ch+var_8D0], edi
.text:00409234                 test    esi, esi
.text:00409236                 mov     [esp+97Ch+var_8EC], al
.text:0040923D                 jz      short loc_409255
.text:0040923F                 mov     esi, [esp+97Ch+var_8F8]
.text:00409246                 movzx   ebp, al
.text:00409249                 movzx   eax, byte ptr [ebp+esi+0]
.text:0040924E                 mov     [esp+97Ch+var_8EC], al
.text:00409255
.text:00409255 loc_409255:                             ; CODE XREF: sub_408170+10CD↑j
.text:00409255                 cmp     [esp+97Ch+var_8EC], 2Ah ; '*'
.text:0040925D                 jz      short loc_4091E8
.text:0040925F                 test    byte ptr [esp+97Ch+arg_8], 2
.text:00409267                 jnz     loc_4096C0
.text:0040926D                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:00409275                 jz      loc_4091E8
.text:0040927B                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:00409283                 jz      loc_4091E8
.text:00409289
.text:00409289 loc_409289:                             ; CODE XREF: sub_408170+1558↓j
.text:00409289                 dec     [esp+97Ch+var_8D0]
.text:00409290
.text:00409290 loc_409290:                             ; CODE XREF: sub_408170+10AE↑j
.text:00409290                                         ; sub_408170+15AB↓j
.text:00409290                 mov     edx, [esp+97Ch+var_900]
.text:00409294                 test    edx, edx
.text:00409296                 jz      loc_40859F
.text:0040929C                 test    cl, cl
.text:0040929E                 jz      loc_4094A3
.text:004092A4                 mov     ebx, [esp+97Ch+arg_C]
.text:004092AB                 mov     ebp, [esp+97Ch+arg_C]
.text:004092B2                 mov     esi, [esp+97Ch+var_950]
.text:004092B6                 mov     edi, [ebx]
.text:004092B8                 mov     edx, [ebp+4]
.text:004092BB                 sub     esi, edi
.text:004092BD                 add     esi, 3
.text:004092C0                 mov     ebx, edi
.text:004092C2                 cmp     esi, edx
.text:004092C4                 jbe     loc_409381
.text:004092CA
.text:004092CA loc_4092CA:                             ; CODE XREF: sub_408170+120B↓j
.text:004092CA                 cmp     edx, 10000h
.text:004092D0                 mov     ebp, 0Fh
.text:004092D5                 jz      loc_408586
.text:004092DB                 mov     esi, [esp+97Ch+arg_C]
.text:004092E2                 lea     ecx, [edx+edx]
.text:004092E5                 cmp     ecx, 10000h
.text:004092EB                 mov     [esi+4], ecx
.text:004092EE                 jbe     short loc_4092F7
.text:004092F0                 mov     dword ptr [esi+4], 10000h
.text:004092F7
.text:004092F7 loc_4092F7:                             ; CODE XREF: sub_408170+117E↑j
.text:004092F7                 mov     eax, [esp+97Ch+arg_C]
.text:004092FE                 mov     ebp, 0Ch
.text:00409303                 mov     esi, [eax+4]
.text:00409306                 mov     [esp+97Ch+Size], edi ; Block
.text:00409309                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040930D                 call    realloc
.text:00409312                 mov     edi, [esp+97Ch+arg_C]
.text:00409319                 test    eax, eax
.text:0040931B                 mov     [edi], eax
.text:0040931D                 jz      loc_408586
.text:00409323                 cmp     ebx, eax
.text:00409325                 jz      short loc_40935B
.text:00409327                 mov     edx, [esp+97Ch+var_908]
.text:0040932B                 sub     eax, ebx
.text:0040932D                 add     [esp+97Ch+var_950], eax
.text:00409331                 add     [esp+97Ch+var_904], eax
.text:00409335                 test    edx, edx
.text:00409337                 jz      short loc_40933D
.text:00409339                 add     [esp+97Ch+var_908], eax
.text:0040933D
.text:0040933D loc_40933D:                             ; CODE XREF: sub_408170+11C7↑j
.text:0040933D                 mov     ebp, [esp+97Ch+var_900]
.text:00409341                 test    ebp, ebp
.text:00409343                 jz      short loc_409349
.text:00409345                 add     [esp+97Ch+var_900], eax
.text:00409349
.text:00409349 loc_409349:                             ; CODE XREF: sub_408170+11D3↑j
.text:00409349                 mov     ebx, [esp+97Ch+var_8FC]
.text:00409350                 test    ebx, ebx
.text:00409352                 jz      short loc_40935B
.text:00409354                 add     [esp+97Ch+var_8FC], eax
.text:0040935B
.text:0040935B loc_40935B:                             ; CODE XREF: sub_408170+11B5↑j
.text:0040935B                                         ; sub_408170+11E2↑j
.text:0040935B                 mov     esi, [esp+97Ch+arg_C]
.text:00409362                 mov     eax, [esp+97Ch+arg_C]
.text:00409369                 mov     ecx, [esp+97Ch+var_950]
.text:0040936D                 mov     edi, [esi]
.text:0040936F                 mov     edx, [eax+4]
.text:00409372                 sub     ecx, edi
.text:00409374                 add     ecx, 3
.text:00409377                 mov     ebx, edi
.text:00409379                 cmp     ecx, edx
.text:0040937B                 ja      loc_4092CA
.text:00409381
.text:00409381 loc_409381:                             ; CODE XREF: sub_408170+1154↑j
.text:00409381                 mov     edi, [esp+97Ch+var_8F8]
.text:00409388                 test    edi, edi
.text:0040938A                 jz      loc_4096AA
.text:00409390                 mov     edi, [esp+97Ch+var_8D0]
.text:00409397                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040939E                 movzx   ebp, byte ptr [edi-2]
.text:004093A2                 movsx   edx, byte ptr [ebp+ebx+0]
.text:004093A7
.text:004093A7 loc_4093A7:                             ; CODE XREF: sub_408170+1545↓j
.text:004093A7                 mov     ecx, [esp+97Ch+var_8F8]
.text:004093AE                 test    ecx, ecx
.text:004093B0                 jz      loc_4096A2
.text:004093B6                 mov     eax, [esp+97Ch+var_8F8]
.text:004093BD                 movsx   esi, byte ptr [eax+2Eh]
.text:004093C1                 cmp     edx, esi
.text:004093C3
.text:004093C3 loc_4093C3:                             ; CODE XREF: sub_408170+1535↓j
.text:004093C3                 jz      loc_40960B
.text:004093C9
.text:004093C9 loc_4093C9:                             ; CODE XREF: sub_408170+14A0↓j
.text:004093C9                                         ; sub_408170+14AD↓j ...
.text:004093C9                 mov     [esp+97Ch+Size], 12h
.text:004093D0                 mov     ebx, [esp+97Ch+var_900]
.text:004093D4                 mov     ecx, [esp+97Ch+var_950]
.text:004093D8                 mov     edi, [esp+97Ch+var_950]
.text:004093DC                 sub     ebx, ecx
.text:004093DE                 sub     ebx, 6
.text:004093E1                 mov     [esp+97Ch+var_974], ebx
.text:004093E5                 mov     [esp+97Ch+var_978], edi
.text:004093E9                 call    sub_404F40
.text:004093EE
.text:004093EE loc_4093EE:                             ; CODE XREF: sub_408170+1523↓j
.text:004093EE                 add     [esp+97Ch+var_950], 3
.text:004093F3                 mov     esi, [esp+97Ch+arg_C]
.text:004093FA                 mov     eax, [esp+97Ch+var_950]
.text:004093FE                 mov     edi, [esi]
.text:00409400                 mov     edx, [esi+4]
.text:00409403
.text:00409403 loc_409403:                             ; CODE XREF: sub_408170+134A↓j
.text:00409403                 sub     eax, edi
.text:00409405                 mov     ebx, edi
.text:00409407                 add     eax, 3
.text:0040940A                 cmp     eax, edx
.text:0040940C                 jbe     loc_4094BF
.text:00409412                 cmp     edx, 10000h
.text:00409418                 mov     ebp, 0Fh
.text:0040941D                 jz      loc_408586
.text:00409423                 mov     esi, [esp+97Ch+arg_C]
.text:0040942A                 lea     ebp, [edx+edx]
.text:0040942D                 cmp     ebp, 10000h
.text:00409433                 mov     [esi+4], ebp
.text:00409436                 jbe     short loc_40943F
.text:00409438                 mov     dword ptr [esi+4], 10000h
.text:0040943F
.text:0040943F loc_40943F:                             ; CODE XREF: sub_408170+12C6↑j
.text:0040943F                 mov     eax, [esp+97Ch+arg_C]
.text:00409446                 mov     ebp, 0Ch
.text:0040944B                 mov     ecx, [eax+4]
.text:0040944E                 mov     [esp+97Ch+Size], edi ; Block
.text:00409451                 mov     [esp+97Ch+var_978], ecx ; Size
.text:00409455                 call    realloc
.text:0040945A                 mov     edx, [esp+97Ch+arg_C]
.text:00409461                 test    eax, eax
.text:00409463                 mov     [edx], eax
.text:00409465                 jz      loc_408586
.text:0040946B                 cmp     ebx, eax
.text:0040946D                 jz      short loc_4094A3
.text:0040946F                 mov     edi, [esp+97Ch+var_908]
.text:00409473                 sub     eax, ebx
.text:00409475                 add     [esp+97Ch+var_950], eax
.text:00409479                 add     [esp+97Ch+var_904], eax
.text:0040947D                 test    edi, edi
.text:0040947F                 jz      short loc_409485
.text:00409481                 add     [esp+97Ch+var_908], eax
.text:00409485
.text:00409485 loc_409485:                             ; CODE XREF: sub_408170+130F↑j
.text:00409485                 mov     ebx, [esp+97Ch+var_900]
.text:00409489                 test    ebx, ebx
.text:0040948B                 jz      short loc_409491
.text:0040948D                 add     [esp+97Ch+var_900], eax
.text:00409491
.text:00409491 loc_409491:                             ; CODE XREF: sub_408170+131B↑j
.text:00409491                 mov     esi, [esp+97Ch+var_8FC]
.text:00409498                 test    esi, esi
.text:0040949A                 jz      short loc_4094A3
.text:0040949C                 add     [esp+97Ch+var_8FC], eax
.text:004094A3
.text:004094A3 loc_4094A3:                             ; CODE XREF: sub_408170+112E↑j
.text:004094A3                                         ; sub_408170+12FD↑j ...
.text:004094A3                 mov     edx, [esp+97Ch+arg_C]
.text:004094AA                 mov     ebp, [esp+97Ch+arg_C]
.text:004094B1                 mov     eax, [esp+97Ch+var_950]
.text:004094B5                 mov     edi, [edx]
.text:004094B7                 mov     edx, [ebp+4]
.text:004094BA                 jmp     loc_409403
.text:004094BF ; ---------------------------------------------------------------------------
.text:004094BF
.text:004094BF loc_4094BF:                             ; CODE XREF: sub_408170+129C↑j
.text:004094BF                 movzx   edx, [esp+97Ch+var_91C]
.text:004094C4                 mov     ebx, [esp+97Ch+var_950]
.text:004094C8                 mov     eax, [esp+97Ch+var_900]
.text:004094CC                 mov     edi, [esp+97Ch+var_900]
.text:004094D0                 mov     esi, ebx
.text:004094D2                 and     edx, 1
.text:004094D5                 mov     [esp+97Ch+var_970], ebx
.text:004094D9                 sub     esi, eax
.text:004094DB                 add     edx, 0Fh
.text:004094DE                 mov     [esp+97Ch+var_974], esi
.text:004094E2                 add     ebx, 3
.text:004094E5                 mov     [esp+97Ch+var_978], edi
.text:004094E9                 mov     [esp+97Ch+Size], edx
.text:004094EC                 call    sub_404F90
.text:004094F1                 mov     [esp+97Ch+var_950], ebx
.text:004094F5                 xor     ecx, ecx
.text:004094F7                 cmp     [esp+97Ch+var_91D], 0
.text:004094FC                 mov     [esp+97Ch+var_8FC], ecx
.text:00409503                 jnz     loc_40859F
.text:00409509                 mov     ecx, [esp+97Ch+arg_C]
.text:00409510                 mov     ebp, [esp+97Ch+var_950]
.text:00409514                 mov     edi, [ecx]
.text:00409516                 mov     edx, [ecx+4]
.text:00409519                 sub     ebp, edi
.text:0040951B                 mov     ebx, edi
.text:0040951D                 add     ebp, 3
.text:00409520                 cmp     ebp, edx
.text:00409522                 jbe     loc_4095DF
.text:00409528
.text:00409528 loc_409528:                             ; CODE XREF: sub_408170+1469↓j
.text:00409528                 cmp     edx, 10000h
.text:0040952E                 mov     ebp, 0Fh
.text:00409533                 jz      loc_408586
.text:00409539                 mov     esi, [esp+97Ch+arg_C]
.text:00409540                 lea     ebp, [edx+edx]
.text:00409543                 cmp     ebp, 10000h
.text:00409549                 mov     [esi+4], ebp
.text:0040954C                 jbe     short loc_409555
.text:0040954E                 mov     dword ptr [esi+4], 10000h
.text:00409555
.text:00409555 loc_409555:                             ; CODE XREF: sub_408170+13DC↑j
.text:00409555                 mov     eax, [esp+97Ch+arg_C]
.text:0040955C                 mov     ebp, 0Ch
.text:00409561                 mov     esi, [eax+4]
.text:00409564                 mov     [esp+97Ch+Size], edi ; Block
.text:00409567                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040956B                 call    realloc
.text:00409570                 mov     edx, [esp+97Ch+arg_C]
.text:00409577                 test    eax, eax
.text:00409579                 mov     [edx], eax
.text:0040957B                 jz      loc_408586
.text:00409581                 cmp     ebx, eax
.text:00409583                 jz      short loc_4095B9
.text:00409585                 mov     edi, [esp+97Ch+var_908]
.text:00409589                 sub     eax, ebx
.text:0040958B                 add     [esp+97Ch+var_950], eax
.text:0040958F                 add     [esp+97Ch+var_904], eax
.text:00409593                 test    edi, edi
.text:00409595                 jz      short loc_40959B
.text:00409597                 add     [esp+97Ch+var_908], eax
.text:0040959B
.text:0040959B loc_40959B:                             ; CODE XREF: sub_408170+1425↑j
.text:0040959B                 mov     ebx, [esp+97Ch+var_900]
.text:0040959F                 test    ebx, ebx
.text:004095A1                 jz      short loc_4095A7
.text:004095A3                 add     [esp+97Ch+var_900], eax
.text:004095A7
.text:004095A7 loc_4095A7:                             ; CODE XREF: sub_408170+1431↑j
.text:004095A7                 mov     ecx, [esp+97Ch+var_8FC]
.text:004095AE                 test    ecx, ecx
.text:004095B0                 jz      short loc_4095B9
.text:004095B2                 add     [esp+97Ch+var_8FC], eax
.text:004095B9
.text:004095B9 loc_4095B9:                             ; CODE XREF: sub_408170+1413↑j
.text:004095B9                                         ; sub_408170+1440↑j
.text:004095B9                 mov     edx, [esp+97Ch+arg_C]
.text:004095C0                 mov     eax, [esp+97Ch+arg_C]
.text:004095C7                 mov     ebp, [esp+97Ch+var_950]
.text:004095CB                 mov     edi, [edx]
.text:004095CD                 mov     edx, [eax+4]
.text:004095D0                 sub     ebp, edi
.text:004095D2                 add     ebp, 3
.text:004095D5                 mov     ebx, edi
.text:004095D7                 cmp     ebp, edx
.text:004095D9                 ja      loc_409528
.text:004095DF
.text:004095DF loc_4095DF:                             ; CODE XREF: sub_408170+13B2↑j
.text:004095DF                 mov     [esp+97Ch+var_974], 3
.text:004095E7                 mov     edi, [esp+97Ch+var_950]
.text:004095EB                 mov     esi, [esp+97Ch+var_900]
.text:004095EF                 mov     [esp+97Ch+Size], 13h
.text:004095F6                 mov     [esp+97Ch+var_970], edi
.text:004095FA                 add     edi, 3
.text:004095FD                 mov     [esp+97Ch+var_978], esi
.text:00409601                 call    sub_404F90
.text:00409606                 jmp     loc_40859B
.text:0040960B ; ---------------------------------------------------------------------------
.text:0040960B
.text:0040960B loc_40960B:                             ; CODE XREF: sub_408170:loc_4093C3↑j
.text:0040960B                 cmp     [esp+97Ch+var_91D], 0
.text:00409610                 jz      loc_4093C9
.text:00409616                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040961D                 jnb     loc_4093C9
.text:00409623                 mov     edx, [esp+97Ch+var_8F8]
.text:0040962A                 test    edx, edx
.text:0040962C                 jz      short loc_40969D
.text:0040962E                 movzx   ebp, byte ptr [edi]
.text:00409631                 mov     edi, [esp+97Ch+var_8F8]
.text:00409638                 movsx   edx, byte ptr [ebp+edi+0]
.text:0040963D
.text:0040963D loc_40963D:                             ; CODE XREF: sub_408170+1530↓j
.text:0040963D                 mov     ebx, [esp+97Ch+var_8F8]
.text:00409644                 test    ebx, ebx
.text:00409646                 jz      short loc_409698
.text:00409648                 mov     esi, [esp+97Ch+var_8F8]
.text:0040964F                 movsx   ecx, byte ptr [esi+0Ah]
.text:00409653                 cmp     edx, ecx
.text:00409655
.text:00409655 loc_409655:                             ; CODE XREF: sub_408170+152B↓j
.text:00409655                 jnz     loc_4093C9
.text:0040965B                 test    byte ptr [esp+97Ch+arg_8], 40h
.text:00409663                 jnz     loc_4093C9
.text:00409669                 mov     [esp+97Ch+Size], 0Dh
.text:00409670                 mov     ebp, [esp+97Ch+var_900]
.text:00409674                 mov     eax, [esp+97Ch+var_950]
.text:00409678                 mov     edx, [esp+97Ch+var_950]
.text:0040967C                 sub     ebp, eax
.text:0040967E                 sub     ebp, 3
.text:00409681                 mov     [esp+97Ch+var_974], ebp
.text:00409685                 mov     [esp+97Ch+var_978], edx
.text:00409689                 call    sub_404F40
.text:0040968E                 mov     [esp+97Ch+var_91C], 1
.text:00409693                 jmp     loc_4093EE
.text:00409698 ; ---------------------------------------------------------------------------
.text:00409698
.text:00409698 loc_409698:                             ; CODE XREF: sub_408170+14D6↑j
.text:00409698                 cmp     edx, 0Ah
.text:0040969B                 jmp     short loc_409655
.text:0040969D ; ---------------------------------------------------------------------------
.text:0040969D
.text:0040969D loc_40969D:                             ; CODE XREF: sub_408170+14BC↑j
.text:0040969D                 movsx   edx, byte ptr [edi]
.text:004096A0                 jmp     short loc_40963D
.text:004096A2 ; ---------------------------------------------------------------------------
.text:004096A2
.text:004096A2 loc_4096A2:                             ; CODE XREF: sub_408170+1240↑j
.text:004096A2                 cmp     edx, 2Eh ; '.'
.text:004096A5                 jmp     loc_4093C3
.text:004096AA ; ---------------------------------------------------------------------------
.text:004096AA
.text:004096AA loc_4096AA:                             ; CODE XREF: sub_408170+121A↑j
.text:004096AA                 mov     edi, [esp+97Ch+var_8D0]
.text:004096B1                 movsx   edx, byte ptr [edi-2]
.text:004096B5                 jmp     loc_4093A7
.text:004096B5 ; ---------------------------------------------------------------------------
.text:004096BA                 align 10h
.text:004096C0
.text:004096C0 loc_4096C0:                             ; CODE XREF: sub_408170+10F7↑j
.text:004096C0                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:004096C8                 jnz     loc_409289
.text:004096CE                 cmp     edi, [esp+97Ch+var_8F4]
.text:004096D5                 jz      short loc_409720
.text:004096D7                 movzx   ebx, byte ptr [edx+1]
.text:004096DB                 lea     ebp, [edx+2]
.text:004096DE                 mov     eax, [esp+97Ch+var_8F8]
.text:004096E5                 mov     [esp+97Ch+var_8D0], ebp
.text:004096EC                 test    eax, eax
.text:004096EE                 jz      short loc_4096FE
.text:004096F0                 mov     eax, [esp+97Ch+var_8F8]
.text:004096F7                 movzx   edi, bl
.text:004096FA                 movzx   ebx, byte ptr [edi+eax]
.text:004096FE
.text:004096FE loc_4096FE:                             ; CODE XREF: sub_408170+157E↑j
.text:004096FE                 cmp     bl, 2Bh ; '+'
.text:00409701                 jz      short loc_409708
.text:00409703                 cmp     bl, 3Fh ; '?'
.text:00409706                 jnz     short loc_409714
.text:00409708
.text:00409708 loc_409708:                             ; CODE XREF: sub_408170+1591↑j
.text:00409708                 mov     [esp+97Ch+var_8EC], bl
.text:0040970F                 jmp     loc_4091E8
.text:00409714 ; ---------------------------------------------------------------------------
.text:00409714
.text:00409714 loc_409714:                             ; CODE XREF: sub_408170+1596↑j
.text:00409714                 mov     [esp+97Ch+var_8D0], edx
.text:0040971B                 jmp     loc_409290
.text:00409720 ; ---------------------------------------------------------------------------
.text:00409720
.text:00409720 loc_409720:                             ; CODE XREF: sub_408170+1565↑j
.text:00409720                                         ; sub_408170+21FF↓j ...
.text:00409720                 mov     edi, [esp+97Ch+Block]
.text:00409727                 mov     ebp, 5
.text:0040972C                 jmp     loc_408710
.text:00409731 ; ---------------------------------------------------------------------------
.text:00409731
.text:00409731 loc_409731:                             ; CODE XREF: sub_408170+1066↑j
.text:00409731                 test    byte ptr [esp+97Ch+arg_8], 20h
.text:00409739                 jnz     short loc_40974E
.text:0040973B                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:00409743                 jnz     loc_4091DC
.text:00409749                 jmp     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040974E ; ---------------------------------------------------------------------------
.text:0040974E
.text:0040974E loc_40974E:                             ; CODE XREF: sub_408170+15C9↑j
.text:0040974E                                         ; sub_408170+31A3↓j
.text:0040974E                 mov     ecx, [esp+97Ch+Block]
.text:00409755                 mov     ebp, 0Dh
.text:0040975A                 jmp     loc_40904C
.text:0040975A ; ---------------------------------------------------------------------------
.text:0040975F                 align 10h
.text:00409760
.text:00409760 loc_409760:                             ; CODE XREF: sub_408170+16F↑j
.text:00409760                                         ; DATA XREF: sub_408170:jpt_4082DF↑o
.text:00409760                 mov     eax, [esp+97Ch+arg_C] ; jumptable 004082DF case 46
.text:00409767                 mov     ecx, [esp+97Ch+var_950]
.text:0040976B                 mov     edi, [eax]
.text:0040976D                 mov     [esp+97Ch+var_900], ecx
.text:00409771                 mov     ebp, ecx
.text:00409773                 mov     edx, [eax+4]
.text:00409776                 sub     ebp, edi
.text:00409778                 mov     ebx, edi
.text:0040977A                 inc     ebp
.text:0040977B                 cmp     ebp, edx
.text:0040977D                 jbe     loc_409838
.text:00409783
.text:00409783 loc_409783:                             ; CODE XREF: sub_408170+16C2↓j
.text:00409783                 cmp     edx, 10000h
.text:00409789                 mov     ebp, 0Fh
.text:0040978E                 jz      loc_408586
.text:00409794                 mov     esi, [esp+97Ch+arg_C]
.text:0040979B                 lea     ebp, [edx+edx]
.text:0040979E                 cmp     ebp, 10000h
.text:004097A4                 mov     [esi+4], ebp
.text:004097A7                 jbe     short loc_4097B0
.text:004097A9                 mov     dword ptr [esi+4], 10000h
.text:004097B0
.text:004097B0 loc_4097B0:                             ; CODE XREF: sub_408170+1637↑j
.text:004097B0                 mov     eax, [esp+97Ch+arg_C]
.text:004097B7                 mov     ebp, 0Ch
.text:004097BC                 mov     esi, [eax+4]
.text:004097BF                 mov     [esp+97Ch+Size], edi ; Block
.text:004097C2                 mov     [esp+97Ch+var_978], esi ; Size
.text:004097C6                 call    realloc
.text:004097CB                 mov     edi, [esp+97Ch+arg_C]
.text:004097D2                 test    eax, eax
.text:004097D4                 mov     [edi], eax
.text:004097D6                 jz      loc_408586
.text:004097DC                 cmp     ebx, eax
.text:004097DE                 jz      short loc_409814
.text:004097E0                 sub     eax, ebx
.text:004097E2                 mov     ebx, [esp+97Ch+var_908]
.text:004097E6                 add     [esp+97Ch+var_950], eax
.text:004097EA                 add     [esp+97Ch+var_904], eax
.text:004097EE                 test    ebx, ebx
.text:004097F0                 jz      short loc_4097F6
.text:004097F2                 add     [esp+97Ch+var_908], eax
.text:004097F6
.text:004097F6 loc_4097F6:                             ; CODE XREF: sub_408170+1680↑j
.text:004097F6                 mov     edx, [esp+97Ch+var_900]
.text:004097FA                 test    edx, edx
.text:004097FC                 jz      short loc_409802
.text:004097FE                 add     [esp+97Ch+var_900], eax
.text:00409802
.text:00409802 loc_409802:                             ; CODE XREF: sub_408170+168C↑j
.text:00409802                 mov     ecx, [esp+97Ch+var_8FC]
.text:00409809                 test    ecx, ecx
.text:0040980B                 jz      short loc_409814
.text:0040980D                 add     [esp+97Ch+var_8FC], eax
.text:00409814
.text:00409814 loc_409814:                             ; CODE XREF: sub_408170+166E↑j
.text:00409814                                         ; sub_408170+169B↑j
.text:00409814                 mov     esi, [esp+97Ch+arg_C]
.text:0040981B                 mov     eax, [esp+97Ch+arg_C]
.text:00409822                 mov     ebp, [esp+97Ch+var_950]
.text:00409826                 mov     edi, [esi]
.text:00409828                 mov     edx, [eax+4]
.text:0040982B                 sub     ebp, edi
.text:0040982D                 inc     ebp
.text:0040982E                 mov     ebx, edi
.text:00409830                 cmp     ebp, edx
.text:00409832                 ja      loc_409783
.text:00409838
.text:00409838 loc_409838:                             ; CODE XREF: sub_408170+160D↑j
.text:00409838                 mov     edi, [esp+97Ch+var_950]
.text:0040983C                 mov     byte ptr [edi], 3
.text:0040983F                 jmp     loc_40859A
.text:00409844 ; ---------------------------------------------------------------------------
.text:00409844
.text:00409844 loc_409844:                             ; CODE XREF: sub_408170+16F↑j
.text:00409844                                         ; DATA XREF: sub_408170:jpt_4082DF↑o
.text:00409844                 test    [esp+97Ch+arg_8], 402h ; jumptable 004082DF cases 43,63
.text:0040984F                 jz      loc_4091D0      ; jumptable 004082DF case 42
.text:00409855                 jmp     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040985A ; ---------------------------------------------------------------------------
.text:0040985A
.text:0040985A loc_40985A:                             ; CODE XREF: sub_408170+16F↑j
.text:0040985A                                         ; DATA XREF: sub_408170:jpt_4082DF↑o
.text:0040985A                 mov     [esp+97Ch+var_91E], 0 ; jumptable 004082DF case 91
.text:0040985F                 mov     edi, [esp+97Ch+var_8F4]
.text:00409866                 cmp     [esp+97Ch+var_8D0], edi
.text:0040986D                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:00409875                 jz      loc_409DCF
.text:0040987B
.text:0040987B loc_40987B:                             ; CODE XREF: sub_408170+1784↓j
.text:0040987B                                         ; sub_408170+17B1↓j ...
.text:0040987B                 mov     ebp, [esp+97Ch+arg_C]
.text:00409882                 mov     ecx, [esp+97Ch+var_950]
.text:00409886                 mov     edi, [ebp+0]
.text:00409889                 mov     edx, [ebp+4]
.text:0040988C                 sub     ecx, edi
.text:0040988E                 lea     ebx, [ecx+22h]
.text:00409891                 cmp     ebx, edx
.text:00409893                 jbe     loc_409933
.text:00409899                 cmp     edx, 10000h
.text:0040989F                 mov     ebp, 0Fh
.text:004098A4                 jz      loc_408586
.text:004098AA                 lea     ebx, [edx+edx]
.text:004098AD                 mov     edx, [esp+97Ch+arg_C]
.text:004098B4                 cmp     ebx, 10000h
.text:004098BA                 mov     [edx+4], ebx
.text:004098BD                 jbe     short loc_4098C6
.text:004098BF                 mov     dword ptr [edx+4], 10000h
.text:004098C6
.text:004098C6 loc_4098C6:                             ; CODE XREF: sub_408170+174D↑j
.text:004098C6                 mov     eax, [esp+97Ch+arg_C]
.text:004098CD                 mov     ebp, [eax+4]
.text:004098D0                 mov     [esp+97Ch+Size], edi ; Block
.text:004098D3                 mov     [esp+97Ch+var_978], ebp ; Size
.text:004098D7                 mov     ebp, 0Ch
.text:004098DC                 call    realloc
.text:004098E1                 mov     edx, [esp+97Ch+arg_C]
.text:004098E8                 test    eax, eax
.text:004098EA                 mov     [edx], eax
.text:004098EC                 jz      loc_408586
.text:004098F2                 cmp     edi, eax
.text:004098F4                 jz      short loc_40987B
.text:004098F6                 mov     ecx, [esp+97Ch+var_908]
.text:004098FA                 sub     eax, edi
.text:004098FC                 add     [esp+97Ch+var_950], eax
.text:00409900                 add     [esp+97Ch+var_904], eax
.text:00409904                 test    ecx, ecx
.text:00409906                 jz      short loc_40990C
.text:00409908                 add     [esp+97Ch+var_908], eax
.text:0040990C
.text:0040990C loc_40990C:                             ; CODE XREF: sub_408170+1796↑j
.text:0040990C                 mov     esi, [esp+97Ch+var_900]
.text:00409910                 test    esi, esi
.text:00409912                 jz      short loc_409918
.text:00409914                 add     [esp+97Ch+var_900], eax
.text:00409918
.text:00409918 loc_409918:                             ; CODE XREF: sub_408170+17A2↑j
.text:00409918                 mov     edi, [esp+97Ch+var_8FC]
.text:0040991F                 test    edi, edi
.text:00409921                 jz      loc_40987B
.text:00409927                 add     [esp+97Ch+var_8FC], eax
.text:0040992E                 jmp     loc_40987B
.text:00409933 ; ---------------------------------------------------------------------------
.text:00409933
.text:00409933 loc_409933:                             ; CODE XREF: sub_408170+1723↑j
.text:00409933                 mov     ebx, [esp+97Ch+var_950]
.text:00409937                 lea     esi, [ecx+1]
.text:0040993A                 cmp     esi, edx
.text:0040993C                 mov     [esp+97Ch+var_900], ebx
.text:00409940                 mov     ebx, edi
.text:00409942                 jbe     loc_4099FD
.text:00409948
.text:00409948 loc_409948:                             ; CODE XREF: sub_408170+1887↓j
.text:00409948                 cmp     edx, 10000h
.text:0040994E                 mov     ebp, 0Fh
.text:00409953                 jz      loc_408586
.text:00409959                 lea     ecx, [edx+edx]
.text:0040995C                 mov     edx, [esp+97Ch+arg_C]
.text:00409963                 cmp     ecx, 10000h
.text:00409969                 mov     [edx+4], ecx
.text:0040996C                 jbe     short loc_409975
.text:0040996E                 mov     dword ptr [edx+4], 10000h
.text:00409975
.text:00409975 loc_409975:                             ; CODE XREF: sub_408170+17FC↑j
.text:00409975                 mov     eax, [esp+97Ch+arg_C]
.text:0040997C                 mov     ebp, [eax+4]
.text:0040997F                 mov     [esp+97Ch+Size], edi ; Block
.text:00409982                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00409986                 mov     ebp, 0Ch
.text:0040998B                 call    realloc
.text:00409990                 mov     edx, [esp+97Ch+arg_C]
.text:00409997                 test    eax, eax
.text:00409999                 mov     [edx], eax
.text:0040999B                 jz      loc_408586
.text:004099A1                 cmp     ebx, eax
.text:004099A3                 jz      short loc_4099D9
.text:004099A5                 mov     edi, [esp+97Ch+var_908]
.text:004099A9                 sub     eax, ebx
.text:004099AB                 add     [esp+97Ch+var_950], eax
.text:004099AF                 add     [esp+97Ch+var_904], eax
.text:004099B3                 test    edi, edi
.text:004099B5                 jz      short loc_4099BB
.text:004099B7                 add     [esp+97Ch+var_908], eax
.text:004099BB
.text:004099BB loc_4099BB:                             ; CODE XREF: sub_408170+1845↑j
.text:004099BB                 mov     esi, [esp+97Ch+var_900]
.text:004099BF                 test    esi, esi
.text:004099C1                 jz      short loc_4099C7
.text:004099C3                 add     [esp+97Ch+var_900], eax
.text:004099C7
.text:004099C7 loc_4099C7:                             ; CODE XREF: sub_408170+1851↑j
.text:004099C7                 mov     ebx, [esp+97Ch+var_8FC]
.text:004099CE                 test    ebx, ebx
.text:004099D0                 jz      short loc_4099D9
.text:004099D2                 add     [esp+97Ch+var_8FC], eax
.text:004099D9
.text:004099D9 loc_4099D9:                             ; CODE XREF: sub_408170+1833↑j
.text:004099D9                                         ; sub_408170+1860↑j
.text:004099D9                 mov     ecx, [esp+97Ch+arg_C]
.text:004099E0                 mov     eax, [esp+97Ch+arg_C]
.text:004099E7                 mov     ebp, [esp+97Ch+var_950]
.text:004099EB                 mov     edi, [ecx]
.text:004099ED                 mov     edx, [eax+4]
.text:004099F0                 sub     ebp, edi
.text:004099F2                 inc     ebp
.text:004099F3                 mov     ebx, edi
.text:004099F5                 cmp     ebp, edx
.text:004099F7                 ja      loc_409948
.text:004099FD
.text:004099FD loc_4099FD:                             ; CODE XREF: sub_408170+17D2↑j
.text:004099FD                 mov     edi, [esp+97Ch+var_950]
.text:00409A01                 mov     bl, 5
.text:00409A03                 mov     edx, [esp+97Ch+var_8D0]
.text:00409A0A                 inc     [esp+97Ch+var_950]
.text:00409A0E                 cmp     byte ptr [edx], 5Eh ; '^'
.text:00409A11                 setnz   al
.text:00409A14                 sub     bl, al
.text:00409A16                 mov     [edi], bl
.text:00409A18                 mov     edi, [esp+97Ch+var_8D0]
.text:00409A1F                 cmp     byte ptr [edi], 5Eh ; '^'
.text:00409A22                 jz      loc_40A3D9
.text:00409A28
.text:00409A28 loc_409A28:                             ; CODE XREF: sub_408170+2271↓j
.text:00409A28                 mov     [esp+97Ch+var_8F0], edi
.text:00409A2F                 mov     esi, [esp+97Ch+arg_C]
.text:00409A36                 mov     ecx, [esp+97Ch+arg_C]
.text:00409A3D                 mov     ebp, [esp+97Ch+var_950]
.text:00409A41                 mov     edi, [esi]
.text:00409A43                 mov     edx, [ecx+4]
.text:00409A46                 sub     ebp, edi
.text:00409A48                 mov     ebx, edi
.text:00409A4A                 inc     ebp
.text:00409A4B                 cmp     ebp, edx
.text:00409A4D                 jbe     loc_409B08
.text:00409A53
.text:00409A53 loc_409A53:                             ; CODE XREF: sub_408170+1992↓j
.text:00409A53                 cmp     edx, 10000h
.text:00409A59                 mov     ebp, 0Fh
.text:00409A5E                 jz      loc_408586
.text:00409A64                 lea     ebp, [edx+edx]
.text:00409A67                 mov     edx, [esp+97Ch+arg_C]
.text:00409A6E                 cmp     ebp, 10000h
.text:00409A74                 mov     [edx+4], ebp
.text:00409A77                 jbe     short loc_409A80
.text:00409A79                 mov     dword ptr [edx+4], 10000h
.text:00409A80
.text:00409A80 loc_409A80:                             ; CODE XREF: sub_408170+1907↑j
.text:00409A80                 mov     eax, [esp+97Ch+arg_C]
.text:00409A87                 mov     ebp, 0Ch
.text:00409A8C                 mov     edx, [eax+4]
.text:00409A8F                 mov     [esp+97Ch+Size], edi ; Block
.text:00409A92                 mov     [esp+97Ch+var_978], edx ; Size
.text:00409A96                 call    realloc
.text:00409A9B                 mov     edi, [esp+97Ch+arg_C]
.text:00409AA2                 test    eax, eax
.text:00409AA4                 mov     [edi], eax
.text:00409AA6                 jz      loc_408586
.text:00409AAC                 cmp     ebx, eax
.text:00409AAE                 jz      short loc_409AE4
.text:00409AB0                 mov     ecx, [esp+97Ch+var_908]
.text:00409AB4                 sub     eax, ebx
.text:00409AB6                 add     [esp+97Ch+var_950], eax
.text:00409ABA                 add     [esp+97Ch+var_904], eax
.text:00409ABE                 test    ecx, ecx
.text:00409AC0                 jz      short loc_409AC6
.text:00409AC2                 add     [esp+97Ch+var_908], eax
.text:00409AC6
.text:00409AC6 loc_409AC6:                             ; CODE XREF: sub_408170+1950↑j
.text:00409AC6                 mov     ebx, [esp+97Ch+var_900]
.text:00409ACA                 test    ebx, ebx
.text:00409ACC                 jz      short loc_409AD2
.text:00409ACE                 add     [esp+97Ch+var_900], eax
.text:00409AD2
.text:00409AD2 loc_409AD2:                             ; CODE XREF: sub_408170+195C↑j
.text:00409AD2                 mov     esi, [esp+97Ch+var_8FC]
.text:00409AD9                 test    esi, esi
.text:00409ADB                 jz      short loc_409AE4
.text:00409ADD                 add     [esp+97Ch+var_8FC], eax
.text:00409AE4
.text:00409AE4 loc_409AE4:                             ; CODE XREF: sub_408170+193E↑j
.text:00409AE4                                         ; sub_408170+196B↑j
.text:00409AE4                 mov     edx, [esp+97Ch+arg_C]
.text:00409AEB                 mov     eax, [esp+97Ch+arg_C]
.text:00409AF2                 mov     ebp, [esp+97Ch+var_950]
.text:00409AF6                 mov     edi, [edx]
.text:00409AF8                 mov     edx, [eax+4]
.text:00409AFB                 sub     ebp, edi
.text:00409AFD                 inc     ebp
.text:00409AFE                 mov     ebx, edi
.text:00409B00                 cmp     ebp, edx
.text:00409B02                 ja      loc_409A53
.text:00409B08
.text:00409B08 loc_409B08:                             ; CODE XREF: sub_408170+18DD↑j
.text:00409B08                 cld
.text:00409B09                 mov     ebx, [esp+97Ch+var_950]
.text:00409B0D                 xor     eax, eax
.text:00409B0F                 mov     ecx, 8
.text:00409B14                 mov     byte ptr [ebx], 20h ; ' '
.text:00409B17                 inc     ebx
.text:00409B18                 mov     edi, ebx
.text:00409B1A                 mov     [esp+97Ch+var_950], ebx
.text:00409B1E                 rep stosd
.text:00409B20                 cmp     byte ptr [ebx-2], 5
.text:00409B24                 jz      loc_40A3BF
.text:00409B2A
.text:00409B2A loc_409B2A:                             ; CODE XREF: sub_408170+1ACD↓j
.text:00409B2A                                         ; sub_408170+1BD8↓j ...
.text:00409B2A                 mov     edx, [esp+97Ch+var_8D0]
.text:00409B31                 cmp     edx, [esp+97Ch+var_8F4]
.text:00409B38                 jz      loc_409DCF
.text:00409B3E                 movzx   eax, byte ptr [edx]
.text:00409B41                 lea     edi, [edx+1]
.text:00409B44                 mov     ecx, [esp+97Ch+var_8F8]
.text:00409B4B                 mov     [esp+97Ch+var_8D0], edi
.text:00409B52                 test    ecx, ecx
.text:00409B54                 mov     [esp+97Ch+var_8EC], al
.text:00409B5B                 jz      short loc_409B72
.text:00409B5D                 mov     ebp, [esp+97Ch+var_8F8]
.text:00409B64                 movzx   esi, al
.text:00409B67                 movzx   ebx, byte ptr [esi+ebp]
.text:00409B6B                 mov     [esp+97Ch+var_8EC], bl
.text:00409B72
.text:00409B72 loc_409B72:                             ; CODE XREF: sub_408170+19EB↑j
.text:00409B72                 test    byte ptr [esp+97Ch+arg_8], 1
.text:00409B7A                 jz      short loc_409B8A
.text:00409B7C                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:00409B84                 jz      loc_40A368
.text:00409B8A
.text:00409B8A loc_409B8A:                             ; CODE XREF: sub_408170+1A0A↑j
.text:00409B8A                 cmp     [esp+97Ch+var_8EC], 5Dh ; ']'
.text:00409B92                 jz      loc_40A324
.text:00409B98                 mov     edi, [esp+97Ch+var_8D0]
.text:00409B9F
.text:00409B9F loc_409B9F:                             ; CODE XREF: sub_408170+21C5↓j
.text:00409B9F                 cmp     [esp+97Ch+var_91E], 0
.text:00409BA4                 jz      loc_40A289
.text:00409BAA                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:00409BB2                 jz      loc_40A280
.text:00409BB8
.text:00409BB8 loc_409BB8:                             ; CODE XREF: sub_408170+2121↓j
.text:00409BB8                                         ; sub_408170+2137↓j ...
.text:00409BB8                 cmp     byte ptr [edi], 2Dh ; '-'
.text:00409BBB                 jz      loc_40A1F0
.text:00409BC1
.text:00409BC1 loc_409BC1:                             ; CODE XREF: sub_408170+2084↓j
.text:00409BC1                 test    byte ptr [esp+97Ch+arg_8], 4
.text:00409BC9                 jz      short loc_409BD9
.text:00409BCB                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:00409BD3                 jz      loc_409F56
.text:00409BD9
.text:00409BD9 loc_409BD9:                             ; CODE XREF: sub_408170+1A59↑j
.text:00409BD9                                         ; sub_408170+1DE9↓j
.text:00409BD9                 test    byte ptr [esp+97Ch+arg_8], 4
.text:00409BE1                 jz      short loc_409BF1
.text:00409BE3                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:00409BEB                 jz      loc_409DE3
.text:00409BF1
.text:00409BF1 loc_409BF1:                             ; CODE XREF: sub_408170+1A71↑j
.text:00409BF1                                         ; sub_408170+1C76↓j
.text:00409BF1                 test    byte ptr [esp+97Ch+arg_8], 4
.text:00409BF9                 jz      short loc_409C05
.text:00409BFB                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:00409C03                 jz      short loc_409C42
.text:00409C05
.text:00409C05 loc_409C05:                             ; CODE XREF: sub_408170+1A89↑j
.text:00409C05                                         ; sub_408170+1AD5↓j
.text:00409C05                 movzx   ecx, [esp+97Ch+var_8EC]
.text:00409C0D                 mov     edx, 1
.text:00409C12                 mov     [esp+97Ch+var_91E], 0
.text:00409C17                 mov     esi, [esp+97Ch+var_950]
.text:00409C1B                 shr     cl, 3
.text:00409C1E                 movzx   edi, cl
.text:00409C21                 movzx   ecx, [esp+97Ch+var_8EC]
.text:00409C29                 and     ecx, 7
.text:00409C2C                 shl     edx, cl
.text:00409C2E                 or      [edi+esi], dl
.text:00409C31                 movzx   ebx, [esp+97Ch+var_8EC]
.text:00409C39
.text:00409C39 loc_409C39:                             ; CODE XREF: sub_408170+224A↓j
.text:00409C39                 mov     [esp+97Ch+var_924], ebx
.text:00409C3D                 jmp     loc_409B2A
.text:00409C42 ; ---------------------------------------------------------------------------
.text:00409C42
.text:00409C42 loc_409C42:                             ; CODE XREF: sub_408170+1A93↑j
.text:00409C42                 cmp     byte ptr [edi], 2Eh ; '.'
.text:00409C45                 jnz     short loc_409C05
.text:00409C47                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409C4E                 mov     ebp, 0Eh
.text:00409C53                 jz      loc_408586
.text:00409C59                 inc     edi
.text:00409C5A                 xor     ebx, ebx
.text:00409C5C                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409C63                 mov     [esp+97Ch+var_8D0], edi
.text:00409C6A                 jz      loc_409DCF
.text:00409C70
.text:00409C70 loc_409C70:                             ; CODE XREF: sub_408170+1B75↓j
.text:00409C70                 movzx   eax, byte ptr [edi]
.text:00409C73                 inc     edi
.text:00409C74                 mov     esi, [esp+97Ch+var_8F8]
.text:00409C7B                 mov     [esp+97Ch+var_8D0], edi
.text:00409C82                 test    esi, esi
.text:00409C84                 mov     [esp+97Ch+var_8EC], al
.text:00409C8B                 jz      short loc_409CA3
.text:00409C8D                 mov     esi, [esp+97Ch+var_8F8]
.text:00409C94                 movzx   ebp, al
.text:00409C97                 movzx   ecx, byte ptr [ebp+esi+0]
.text:00409C9C                 mov     [esp+97Ch+var_8EC], cl
.text:00409CA3
.text:00409CA3 loc_409CA3:                             ; CODE XREF: sub_408170+1B1B↑j
.text:00409CA3                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:00409CAB                 jz      loc_409DC1
.text:00409CB1
.text:00409CB1 loc_409CB1:                             ; CODE XREF: sub_408170+1C54↓j
.text:00409CB1                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409CB8                 jz      short loc_409CFA
.text:00409CBA                 test    bl, bl
.text:00409CBC                 js      short loc_409CF0
.text:00409CBE                 movzx   eax, [esp+97Ch+var_8EC]
.text:00409CC6                 movzx   edx, bl
.text:00409CC9                 inc     bl
.text:00409CCB                 mov     [esp+edx+97Ch+var_8CC], al
.text:00409CD2                 mov     edi, [esp+97Ch+var_8D0]
.text:00409CD9
.text:00409CD9 loc_409CD9:                             ; CODE XREF: sub_408170+1B88↓j
.text:00409CD9                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409CE0                 mov     ebp, 0Eh
.text:00409CE5                 jnz     short loc_409C70
.text:00409CE7                 jmp     loc_408586
.text:00409CE7 ; ---------------------------------------------------------------------------
.text:00409CEC                 align 10h
.text:00409CF0
.text:00409CF0 loc_409CF0:                             ; CODE XREF: sub_408170+1B4C↑j
.text:00409CF0                 mov     [esp+97Ch+var_8CC], 0
.text:00409CF8                 jmp     short loc_409CD9
.text:00409CFA ; ---------------------------------------------------------------------------
.text:00409CFA
.text:00409CFA loc_409CFA:                             ; CODE XREF: sub_408170+1B48↑j
.text:00409CFA                                         ; sub_408170+1C5A↓j
.text:00409CFA                 xor     ecx, ecx
.text:00409CFC                 movzx   edi, bl
.text:00409CFF                 mov     [esp+edi+97Ch+var_8CC], cl
.text:00409D06                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:00409D0E                 jz      short loc_409D4D
.text:00409D10
.text:00409D10 loc_409D10:                             ; CODE XREF: sub_408170+1BE7↓j
.text:00409D10                                         ; sub_408170+1BF3↓j
.text:00409D10                 cmp     bl, 0FFh
.text:00409D13                 jz      short loc_409D2F
.text:00409D15                 mov     eax, [esp+97Ch+var_8D0]
.text:00409D1C
.text:00409D1C loc_409D1C:                             ; CODE XREF: sub_408170+1BB6↓j
.text:00409D1C                 dec     bl
.text:00409D1E                 lea     edi, [eax-1]
.text:00409D21                 cmp     bl, 0FFh
.text:00409D24                 mov     eax, edi
.text:00409D26                 jnz     short loc_409D1C
.text:00409D28                 mov     [esp+97Ch+var_8D0], edi
.text:00409D2F
.text:00409D2F loc_409D2F:                             ; CODE XREF: sub_408170+1BA3↑j
.text:00409D2F                 mov     eax, [esp+97Ch+var_950]
.text:00409D33                 or      byte ptr [eax+0Bh], 8
.text:00409D37                 or      byte ptr [eax+5], 40h
.text:00409D3B                 mov     [esp+97Ch+var_924], 2Eh ; '.'
.text:00409D43
.text:00409D43 loc_409D43:                             ; CODE XREF: sub_408170+1C3B↓j
.text:00409D43                                         ; sub_408170+1D73↓j ...
.text:00409D43                 mov     [esp+97Ch+var_91E], 0
.text:00409D48                 jmp     loc_409B2A
.text:00409D4D ; ---------------------------------------------------------------------------
.text:00409D4D
.text:00409D4D loc_409D4D:                             ; CODE XREF: sub_408170+1B9E↑j
.text:00409D4D                 mov     eax, [esp+97Ch+var_8D0]
.text:00409D54                 cmp     byte ptr [eax], 5Dh ; ']'
.text:00409D57                 jnz     short loc_409D10
.text:00409D59                 movzx   ecx, [esp+97Ch+var_8CC]
.text:00409D61                 test    cl, cl
.text:00409D63                 jz      short loc_409D10
.text:00409D65                 dec     bl
.text:00409D67                 jnz     short loc_409DAD
.text:00409D69                 cmp     eax, [esp+97Ch+var_8F4]
.text:00409D70                 mov     ebp, 0Eh
.text:00409D75                 jz      loc_408586
.text:00409D7B                 mov     bl, cl
.text:00409D7D                 mov     esi, [esp+97Ch+var_950]
.text:00409D81                 lea     ebp, [eax+1]
.text:00409D84                 mov     [esp+97Ch+var_8D0], ebp
.text:00409D8B                 shr     bl, 3
.text:00409D8E                 and     ecx, 7
.text:00409D91                 mov     edx, 1
.text:00409D96                 movzx   ebp, bl
.text:00409D99                 shl     edx, cl
.text:00409D9B                 or      [ebp+esi+0], dl
.text:00409D9F                 movzx   ebx, [esp+97Ch+var_8CC]
.text:00409DA7                 mov     [esp+97Ch+var_924], ebx
.text:00409DAB                 jmp     short loc_409D43
.text:00409DAD ; ---------------------------------------------------------------------------
.text:00409DAD
.text:00409DAD loc_409DAD:                             ; CODE XREF: sub_408170+1BF7↑j
.text:00409DAD                                         ; sub_408170+1D92↓j
.text:00409DAD                 mov     edx, [esp+97Ch+Block]
.text:00409DB4                 mov     ebp, 3
.text:00409DB9                 mov     [esp+97Ch+Size], edx
.text:00409DBC                 jmp     loc_408713
.text:00409DC1 ; ---------------------------------------------------------------------------
.text:00409DC1
.text:00409DC1 loc_409DC1:                             ; CODE XREF: sub_408170+1B3B↑j
.text:00409DC1                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00409DC4                 jnz     loc_409CB1
.text:00409DCA                 jmp     loc_409CFA
.text:00409DCF ; ---------------------------------------------------------------------------
.text:00409DCF
.text:00409DCF loc_409DCF:                             ; CODE XREF: sub_408170+1705↑j
.text:00409DCF                                         ; sub_408170+19C8↑j ...
.text:00409DCF                 mov     ebp, [esp+97Ch+Block]
.text:00409DD6                 mov     [esp+97Ch+Size], ebp
.text:00409DD9                 mov     ebp, 7
.text:00409DDE                 jmp     loc_408713
.text:00409DE3 ; ---------------------------------------------------------------------------
.text:00409DE3
.text:00409DE3 loc_409DE3:                             ; CODE XREF: sub_408170+1A7B↑j
.text:00409DE3                 cmp     byte ptr [edi], 3Dh ; '='
.text:00409DE6                 jnz     loc_409BF1
.text:00409DEC                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409DF3                 mov     ebp, 0Eh
.text:00409DF8                 jz      loc_408586
.text:00409DFE                 inc     edi
.text:00409DFF                 xor     ebx, ebx
.text:00409E01                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409E08                 mov     [esp+97Ch+var_8D0], edi
.text:00409E0F                 jz      short loc_409DCF
.text:00409E11
.text:00409E11 loc_409E11:                             ; CODE XREF: sub_408170+1D17↓j
.text:00409E11                 movzx   eax, byte ptr [edi]
.text:00409E14                 inc     edi
.text:00409E15                 mov     esi, [esp+97Ch+var_8F8]
.text:00409E1C                 mov     [esp+97Ch+var_8D0], edi
.text:00409E23                 test    esi, esi
.text:00409E25                 mov     [esp+97Ch+var_8EC], al
.text:00409E2C                 jz      short loc_409E44
.text:00409E2E                 mov     esi, [esp+97Ch+var_8F8]
.text:00409E35                 movzx   ebp, al
.text:00409E38                 movzx   ecx, byte ptr [ebp+esi+0]
.text:00409E3D                 mov     [esp+97Ch+var_8EC], cl
.text:00409E44
.text:00409E44 loc_409E44:                             ; CODE XREF: sub_408170+1CBC↑j
.text:00409E44                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:00409E4C                 jz      loc_409F48
.text:00409E52
.text:00409E52 loc_409E52:                             ; CODE XREF: sub_408170+1DDB↓j
.text:00409E52                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409E59                 jz      short loc_409E9A
.text:00409E5B                 cmp     bl, 1
.text:00409E5E                 ja      short loc_409E90
.text:00409E60                 movzx   edx, [esp+97Ch+var_8EC]
.text:00409E68                 movzx   edi, bl
.text:00409E6B                 inc     bl
.text:00409E6D                 mov     [esp+edi+97Ch+var_84C], dl
.text:00409E74                 mov     edi, [esp+97Ch+var_8D0]
.text:00409E7B
.text:00409E7B loc_409E7B:                             ; CODE XREF: sub_408170+1D28↓j
.text:00409E7B                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409E82                 mov     ebp, 0Eh
.text:00409E87                 jnz     short loc_409E11
.text:00409E89                 jmp     loc_408586
.text:00409E89 ; ---------------------------------------------------------------------------
.text:00409E8E                 align 10h
.text:00409E90
.text:00409E90 loc_409E90:                             ; CODE XREF: sub_408170+1CEE↑j
.text:00409E90                 mov     [esp+97Ch+var_84C], 0
.text:00409E98                 jmp     short loc_409E7B
.text:00409E9A ; ---------------------------------------------------------------------------
.text:00409E9A
.text:00409E9A loc_409E9A:                             ; CODE XREF: sub_408170+1CE9↑j
.text:00409E9A                                         ; sub_408170+1DE1↓j
.text:00409E9A                 xor     eax, eax
.text:00409E9C                 movzx   ecx, bl
.text:00409E9F                 mov     [esp+ecx+97Ch+var_84C], al
.text:00409EA6                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:00409EAE                 jz      short loc_409EE8
.text:00409EB0
.text:00409EB0 loc_409EB0:                             ; CODE XREF: sub_408170+1D82↓j
.text:00409EB0                                         ; sub_408170+1D8E↓j
.text:00409EB0                 cmp     bl, 0FFh
.text:00409EB3                 jz      short loc_409ECF
.text:00409EB5                 mov     eax, [esp+97Ch+var_8D0]
.text:00409EBC
.text:00409EBC loc_409EBC:                             ; CODE XREF: sub_408170+1D56↓j
.text:00409EBC                 dec     bl
.text:00409EBE                 lea     edi, [eax-1]
.text:00409EC1                 cmp     bl, 0FFh
.text:00409EC4                 mov     eax, edi
.text:00409EC6                 jnz     short loc_409EBC
.text:00409EC8                 mov     [esp+97Ch+var_8D0], edi
.text:00409ECF
.text:00409ECF loc_409ECF:                             ; CODE XREF: sub_408170+1D43↑j
.text:00409ECF                 mov     edi, [esp+97Ch+var_950]
.text:00409ED3                 or      byte ptr [edi+0Bh], 8
.text:00409ED7                 or      byte ptr [edi+7], 20h
.text:00409EDB                 mov     [esp+97Ch+var_924], 3Dh ; '='
.text:00409EE3                 jmp     loc_409D43
.text:00409EE8 ; ---------------------------------------------------------------------------
.text:00409EE8
.text:00409EE8 loc_409EE8:                             ; CODE XREF: sub_408170+1D3E↑j
.text:00409EE8                 mov     eax, [esp+97Ch+var_8D0]
.text:00409EEF                 cmp     byte ptr [eax], 5Dh ; ']'
.text:00409EF2                 jnz     short loc_409EB0
.text:00409EF4                 movzx   ecx, [esp+97Ch+var_84C]
.text:00409EFC                 test    cl, cl
.text:00409EFE                 jz      short loc_409EB0
.text:00409F00                 dec     bl
.text:00409F02                 jnz     loc_409DAD
.text:00409F08                 cmp     eax, [esp+97Ch+var_8F4]
.text:00409F0F                 mov     ebp, 0Eh
.text:00409F14                 jz      loc_408586
.text:00409F1A                 mov     dl, cl
.text:00409F1C                 mov     esi, [esp+97Ch+var_950]
.text:00409F20                 lea     ebp, [eax+1]
.text:00409F23                 mov     [esp+97Ch+var_8D0], ebp
.text:00409F2A                 shr     dl, 3
.text:00409F2D                 and     ecx, 7
.text:00409F30                 mov     ebx, 1
.text:00409F35                 movzx   ebp, dl
.text:00409F38                 shl     ebx, cl
.text:00409F3A                 or      [ebp+esi+0], bl
.text:00409F3E                 mov     [esp+97Ch+var_91E], 1
.text:00409F43                 jmp     loc_409B2A
.text:00409F48 ; ---------------------------------------------------------------------------
.text:00409F48
.text:00409F48 loc_409F48:                             ; CODE XREF: sub_408170+1CDC↑j
.text:00409F48                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00409F4B                 jnz     loc_409E52
.text:00409F51                 jmp     loc_409E9A
.text:00409F56 ; ---------------------------------------------------------------------------
.text:00409F56
.text:00409F56 loc_409F56:                             ; CODE XREF: sub_408170+1A63↑j
.text:00409F56                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00409F59                 jnz     loc_409BD9
.text:00409F5F                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409F66                 mov     ebp, 0Eh
.text:00409F6B                 jz      loc_408586
.text:00409F71                 inc     edi
.text:00409F72                 xor     ebx, ebx
.text:00409F74                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409F7B                 mov     [esp+97Ch+var_8D0], edi
.text:00409F82                 jz      loc_409DCF
.text:00409F88
.text:00409F88 loc_409F88:                             ; CODE XREF: sub_408170+1E89↓j
.text:00409F88                 movzx   ecx, byte ptr [edi]
.text:00409F8B                 inc     edi
.text:00409F8C                 mov     ebp, [esp+97Ch+var_8F8]
.text:00409F93                 mov     [esp+97Ch+var_8D0], edi
.text:00409F9A                 test    ebp, ebp
.text:00409F9C                 mov     [esp+97Ch+var_8EC], cl
.text:00409FA3                 jz      short loc_409FBB
.text:00409FA5                 movzx   ebp, cl
.text:00409FA8                 mov     ecx, [esp+97Ch+var_8F8]
.text:00409FAF                 movzx   edx, byte ptr [ebp+ecx+0]
.text:00409FB4                 mov     [esp+97Ch+var_8EC], dl
.text:00409FBB
.text:00409FBB loc_409FBB:                             ; CODE XREF: sub_408170+1E33↑j
.text:00409FBB                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:00409FC3                 jz      loc_40A1E0
.text:00409FC9
.text:00409FC9 loc_409FC9:                             ; CODE XREF: sub_408170+2073↓j
.text:00409FC9                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409FD0                 jz      short loc_40A000
.text:00409FD2                 movzx   eax, [esp+97Ch+var_8EC]
.text:00409FDA                 movzx   esi, bl
.text:00409FDD                 inc     bl
.text:00409FDF                 mov     ebp, 0Eh
.text:00409FE4                 mov     [esp+esi+97Ch+name], al
.text:00409FEB                 mov     edi, [esp+97Ch+var_8D0]
.text:00409FF2                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409FF9                 jnz     short loc_409F88
.text:00409FFB                 jmp     loc_408586
.text:0040A000 ; ---------------------------------------------------------------------------
.text:0040A000
.text:0040A000 loc_40A000:                             ; CODE XREF: sub_408170+1E60↑j
.text:0040A000                                         ; sub_408170+2079↓j
.text:0040A000                 xor     eax, eax
.text:0040A002                 movzx   edi, bl
.text:0040A005                 mov     [esp+edi+97Ch+name], al
.text:0040A00C                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:0040A014                 jz      short loc_40A04E
.text:0040A016
.text:0040A016 loc_40A016:                             ; CODE XREF: sub_408170+1EE8↓j
.text:0040A016                 cmp     bl, 0FFh
.text:0040A019                 jz      short loc_40A035
.text:0040A01B                 mov     eax, [esp+97Ch+var_8D0]
.text:0040A022
.text:0040A022 loc_40A022:                             ; CODE XREF: sub_408170+1EBC↓j
.text:0040A022                 dec     bl
.text:0040A024                 lea     edi, [eax-1]
.text:0040A027                 cmp     bl, 0FFh
.text:0040A02A                 mov     eax, edi
.text:0040A02C                 jnz     short loc_40A022
.text:0040A02E                 mov     [esp+97Ch+var_8D0], edi
.text:0040A035
.text:0040A035 loc_40A035:                             ; CODE XREF: sub_408170+1EA9↑j
.text:0040A035                 mov     eax, [esp+97Ch+var_950]
.text:0040A039                 or      byte ptr [eax+0Bh], 8
.text:0040A03D                 or      byte ptr [eax+7], 4
.text:0040A041                 mov     [esp+97Ch+var_924], 3Ah ; ':'
.text:0040A049                 jmp     loc_409D43
.text:0040A04E ; ---------------------------------------------------------------------------
.text:0040A04E
.text:0040A04E loc_40A04E:                             ; CODE XREF: sub_408170+1EA4↑j
.text:0040A04E                 mov     esi, [esp+97Ch+var_8D0]
.text:0040A055                 cmp     byte ptr [esi], 5Dh ; ']'
.text:0040A058                 jnz     short loc_40A016
.text:0040A05A                 cld
.text:0040A05B                 mov     edi, offset aLower ; "lower"
.text:0040A060                 lea     ebx, [esp+97Ch+name]
.text:0040A067                 mov     esi, ebx
.text:0040A069                 mov     ecx, 6
.text:0040A06E                 lea     ebp, [esp+97Ch+name]
.text:0040A075                 repe cmpsb
.text:0040A077                 setz    [esp+97Ch+var_925]
.text:0040A07C                 mov     ecx, 6
.text:0040A081                 mov     edi, offset aUpper ; "upper"
.text:0040A086                 mov     esi, ebp
.text:0040A088                 lea     edx, [esp+97Ch+name]
.text:0040A08F                 repe cmpsb
.text:0040A091                 setz    [esp+97Ch+var_926]
.text:0040A096                 mov     [esp+97Ch+Size], edx ; name
.text:0040A099                 call    wctype
.text:0040A09E                 movzx   ebx, ax
.text:0040A0A1                 test    bx, bx
.text:0040A0A4                 mov     dword ptr [esp+97Ch+Type], ebx
.text:0040A0A8                 jz      loc_40A1CC
.text:0040A0AE                 mov     eax, [esp+97Ch+var_8D0]
.text:0040A0B5                 mov     ebp, 0Eh
.text:0040A0BA                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040A0C1                 jz      loc_408586
.text:0040A0C7                 lea     ecx, [eax+1]
.text:0040A0CA                 cmp     ecx, [esp+97Ch+var_8F4]
.text:0040A0D1                 mov     [esp+97Ch+var_8D0], ecx
.text:0040A0D8                 jz      loc_409DCF
.text:0040A0DE                 xor     edi, edi
.text:0040A0E0
.text:0040A0E0 loc_40A0E0:                             ; CODE XREF: sub_408170+202E↓j
.text:0040A0E0                 mov     [esp+97Ch+Size], edi ; Ch
.text:0040A0E3                 call    btowc
.text:0040A0E8                 mov     ebp, dword ptr [esp+97Ch+Type]
.text:0040A0EC                 movzx   esi, ax
.text:0040A0EF                 mov     [esp+97Ch+Size], esi ; C
.text:0040A0F2                 mov     [esp+97Ch+var_978], ebp ; Type
.text:0040A0F6                 call    iswctype
.text:0040A0FB                 test    eax, eax
.text:0040A0FD                 jz      short loc_40A11C
.text:0040A0FF                 mov     ecx, edi
.text:0040A101                 mov     ebx, edi
.text:0040A103                 mov     edx, [esp+97Ch+var_950]
.text:0040A107                 shr     cl, 3
.text:0040A10A                 movzx   esi, cl
.text:0040A10D                 mov     ecx, ebx
.text:0040A10F                 and     ecx, 7
.text:0040A112                 mov     ebx, 1
.text:0040A117                 shl     ebx, cl
.text:0040A119                 or      [esi+edx], bl
.text:0040A11C
.text:0040A11C loc_40A11C:                             ; CODE XREF: sub_408170+1F8D↑j
.text:0040A11C                 mov     eax, [esp+97Ch+var_8F8]
.text:0040A123                 test    eax, eax
.text:0040A125                 jz      short loc_40A192
.text:0040A127                 cmp     [esp+97Ch+var_926], 0
.text:0040A12C                 jnz     short loc_40A135
.text:0040A12E                 cmp     [esp+97Ch+var_925], 0
.text:0040A133                 jz      short loc_40A192
.text:0040A135
.text:0040A135 loc_40A135:                             ; CODE XREF: sub_408170+1FBC↑j
.text:0040A135                 mov     ebp, ds:__mb_cur_max
.text:0040A13B                 cmp     dword ptr [ebp+0], 1
.text:0040A13F                 jz      short loc_40A1BB
.text:0040A141                 mov     [esp+97Ch+var_978], 1 ; Type
.text:0040A149                 mov     [esp+97Ch+Size], edi ; C
.text:0040A14C                 call    _isctype
.text:0040A151
.text:0040A151 loc_40A151:                             ; CODE XREF: sub_408170+205A↓j
.text:0040A151                 test    eax, eax
.text:0040A153                 jnz     short loc_40A174
.text:0040A155                 mov     ebx, ds:__mb_cur_max
.text:0040A15B                 cmp     dword ptr [ebx], 1
.text:0040A15E                 jz      short loc_40A1A9
.text:0040A160                 mov     [esp+97Ch+var_978], 2 ; Type
.text:0040A168                 mov     [esp+97Ch+Size], edi ; C
.text:0040A16B                 call    _isctype
.text:0040A170
.text:0040A170 loc_40A170:                             ; CODE XREF: sub_408170+2049↓j
.text:0040A170                 test    eax, eax
.text:0040A172                 jz      short loc_40A192
.text:0040A174
.text:0040A174 loc_40A174:                             ; CODE XREF: sub_408170+1FE3↑j
.text:0040A174                 mov     ecx, edi
.text:0040A176                 mov     ebx, edi
.text:0040A178                 mov     edx, [esp+97Ch+var_950]
.text:0040A17C                 shr     cl, 3
.text:0040A17F                 movzx   ebp, cl
.text:0040A182                 mov     ecx, ebx
.text:0040A184                 and     ecx, 7
.text:0040A187                 mov     ebx, 1
.text:0040A18C                 shl     ebx, cl
.text:0040A18E                 or      [ebp+edx+0], bl
.text:0040A192
.text:0040A192 loc_40A192:                             ; CODE XREF: sub_408170+1FB5↑j
.text:0040A192                                         ; sub_408170+1FC3↑j ...
.text:0040A192                 mov     [esp+97Ch+var_91E], 1
.text:0040A197                 inc     edi
.text:0040A198                 cmp     edi, 0FFh
.text:0040A19E                 jle     loc_40A0E0
.text:0040A1A4                 jmp     loc_409B2A
.text:0040A1A9 ; ---------------------------------------------------------------------------
.text:0040A1A9
.text:0040A1A9 loc_40A1A9:                             ; CODE XREF: sub_408170+1FEE↑j
.text:0040A1A9                 mov     ebp, ds:_pctype
.text:0040A1AF                 mov     ecx, [ebp+0]
.text:0040A1B2                 movzx   eax, word ptr [ecx+edi*2]
.text:0040A1B6                 and     eax, 2
.text:0040A1B9                 jmp     short loc_40A170
.text:0040A1BB ; ---------------------------------------------------------------------------
.text:0040A1BB
.text:0040A1BB loc_40A1BB:                             ; CODE XREF: sub_408170+1FCF↑j
.text:0040A1BB                 mov     edx, ds:_pctype
.text:0040A1C1                 mov     esi, [edx]
.text:0040A1C3                 movzx   eax, word ptr [esi+edi*2]
.text:0040A1C7                 and     eax, 1
.text:0040A1CA                 jmp     short loc_40A151
.text:0040A1CC ; ---------------------------------------------------------------------------
.text:0040A1CC
.text:0040A1CC loc_40A1CC:                             ; CODE XREF: sub_408170+1F38↑j
.text:0040A1CC                 mov     ebx, [esp+97Ch+Block]
.text:0040A1D3                 mov     ebp, 4
.text:0040A1D8
.text:0040A1D8 loc_40A1D8:                             ; CODE XREF: sub_408170+26A5↓j
.text:0040A1D8                 mov     [esp+97Ch+Size], ebx
.text:0040A1DB                 jmp     loc_408713
.text:0040A1E0 ; ---------------------------------------------------------------------------
.text:0040A1E0
.text:0040A1E0 loc_40A1E0:                             ; CODE XREF: sub_408170+1E53↑j
.text:0040A1E0                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040A1E3                 jnz     loc_409FC9
.text:0040A1E9                 jmp     loc_40A000
.text:0040A1E9 ; ---------------------------------------------------------------------------
.text:0040A1EE                 align 10h
.text:0040A1F0
.text:0040A1F0 loc_40A1F0:                             ; CODE XREF: sub_408170+1A4B↑j
.text:0040A1F0                 cmp     byte ptr [edi+1], 5Dh ; ']'
.text:0040A1F4                 jz      loc_409BC1
.text:0040A1FA                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040A201                 mov     ebp, 0Eh
.text:0040A206                 jz      loc_408586
.text:0040A20C                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040A214                 inc     edi
.text:0040A215                 mov     ecx, [esp+97Ch+var_950]
.text:0040A219                 mov     [esp+97Ch+var_8D0], edi
.text:0040A220                 mov     edx, [esp+97Ch+arg_8]
.text:0040A227                 lea     edi, [esp+97Ch+var_8D0]
.text:0040A22E                 mov     [esp+97Ch+var_978], edi
.text:0040A232                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040A239                 mov     eax, [esp+97Ch+var_8F4]
.text:0040A240                 mov     [esp+97Ch+var_968], ecx
.text:0040A244                 mov     [esp+97Ch+var_96C], edx
.text:0040A248                 mov     [esp+97Ch+var_970], ebx
.text:0040A24C                 mov     [esp+97Ch+var_974], eax
.text:0040A250                 mov     [esp+97Ch+Size], ebp
.text:0040A253
.text:0040A253 loc_40A253:                             ; CODE XREF: sub_408170+2193↓j
.text:0040A253                 call    sub_405100
.text:0040A258                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:0040A260                 test    eax, eax
.text:0040A262                 mov     ebx, eax
.text:0040A264                 jz      loc_409B2A
.text:0040A26A                 mov     esi, [esp+97Ch+Block]
.text:0040A271                 mov     ebp, ebx
.text:0040A273
.text:0040A273 loc_40A273:                             ; CODE XREF: sub_408170+318E↓j
.text:0040A273                 mov     [esp+97Ch+Size], esi
.text:0040A276                 jmp     loc_408713
.text:0040A276 ; ---------------------------------------------------------------------------
.text:0040A27B                 align 10h
.text:0040A280
.text:0040A280 loc_40A280:                             ; CODE XREF: sub_408170+1A42↑j
.text:0040A280                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040A283                 jnz     loc_40A313
.text:0040A289
.text:0040A289 loc_40A289:                             ; CODE XREF: sub_408170+1A34↑j
.text:0040A289                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:0040A291                 jnz     loc_409BB8
.text:0040A297                 lea     esi, [edi-2]
.text:0040A29A                 cmp     esi, [esp+97Ch+arg_0]
.text:0040A2A1                 jb      short loc_40A2AD
.text:0040A2A3                 cmp     byte ptr [edi-2], 5Bh ; '['
.text:0040A2A7                 jz      loc_409BB8
.text:0040A2AD
.text:0040A2AD loc_40A2AD:                             ; CODE XREF: sub_408170+2131↑j
.text:0040A2AD                 lea     ebp, [edi-3]
.text:0040A2B0                 cmp     ebp, [esp+97Ch+arg_0]
.text:0040A2B7                 jb      short loc_40A2BF
.text:0040A2B9                 cmp     byte ptr [edi-3], 5Bh ; '['
.text:0040A2BD                 jz      short loc_40A308
.text:0040A2BF
.text:0040A2BF loc_40A2BF:                             ; CODE XREF: sub_408170+2147↑j
.text:0040A2BF                                         ; sub_408170+219C↓j
.text:0040A2BF                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040A2C2                 jz      loc_409BB8
.text:0040A2C8                 mov     esi, [esp+97Ch+var_950]
.text:0040A2CC                 lea     edi, [esp+97Ch+var_8D0]
.text:0040A2D3                 mov     ecx, [esp+97Ch+arg_8]
.text:0040A2DA                 mov     [esp+97Ch+var_978], edi
.text:0040A2DE                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040A2E5                 mov     edx, [esp+97Ch+var_8F4]
.text:0040A2EC                 mov     [esp+97Ch+var_968], esi
.text:0040A2F0                 mov     eax, [esp+97Ch+var_924]
.text:0040A2F4                 mov     [esp+97Ch+var_96C], ecx
.text:0040A2F8                 mov     [esp+97Ch+var_970], ebx
.text:0040A2FC                 mov     [esp+97Ch+var_974], edx
.text:0040A300                 mov     [esp+97Ch+Size], eax
.text:0040A303                 jmp     loc_40A253
.text:0040A308 ; ---------------------------------------------------------------------------
.text:0040A308
.text:0040A308 loc_40A308:                             ; CODE XREF: sub_408170+214D↑j
.text:0040A308                 cmp     byte ptr [edi-2], 5Eh ; '^'
.text:0040A30C                 jnz     short loc_40A2BF
.text:0040A30E                 jmp     loc_409BB8
.text:0040A313 ; ---------------------------------------------------------------------------
.text:0040A313
.text:0040A313 loc_40A313:                             ; CODE XREF: sub_408170+2113↑j
.text:0040A313                 mov     ecx, [esp+97Ch+Block]
.text:0040A31A                 mov     ebp, 0Bh
.text:0040A31F                 jmp     loc_40904C
.text:0040A324 ; ---------------------------------------------------------------------------
.text:0040A324
.text:0040A324 loc_40A324:                             ; CODE XREF: sub_408170+1A22↑j
.text:0040A324                 mov     ebx, [esp+97Ch+var_8F0]
.text:0040A32B                 mov     edi, [esp+97Ch+var_8D0]
.text:0040A332                 inc     ebx
.text:0040A333                 cmp     edi, ebx
.text:0040A335                 jz      loc_409B9F
.text:0040A33B
.text:0040A33B loc_40A33B:                             ; CODE XREF: sub_408170+21EA↓j
.text:0040A33B                 mov     edi, [esp+97Ch+var_950]
.text:0040A33F                 movzx   edx, byte ptr [edi-1]
.text:0040A343                 test    dl, dl
.text:0040A345                 jz      short loc_40A35C
.text:0040A347                 movzx   ebp, dl
.text:0040A34A                 cmp     byte ptr [ebp+edi-1], 0
.text:0040A34F                 jnz     short loc_40A35C
.text:0040A351                 mov     ebx, [esp+97Ch+var_950]
.text:0040A355                 dec     dl
.text:0040A357                 mov     [ebx-1], dl
.text:0040A35A                 jmp     short loc_40A33B
.text:0040A35C ; ---------------------------------------------------------------------------
.text:0040A35C
.text:0040A35C loc_40A35C:                             ; CODE XREF: sub_408170+21D5↑j
.text:0040A35C                                         ; sub_408170+21DF↑j
.text:0040A35C                 movzx   edi, dl
.text:0040A35F                 add     [esp+97Ch+var_950], edi
.text:0040A363                 jmp     loc_40859F
.text:0040A368 ; ---------------------------------------------------------------------------
.text:0040A368
.text:0040A368 loc_40A368:                             ; CODE XREF: sub_408170+1A14↑j
.text:0040A368                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040A36F                 jz      loc_409720
.text:0040A375                 movzx   ebx, byte ptr [edx+1]
.text:0040A379                 lea     ecx, [edx+2]
.text:0040A37C                 mov     eax, [esp+97Ch+var_8F8]
.text:0040A383                 mov     [esp+97Ch+var_8D0], ecx
.text:0040A38A                 test    eax, eax
.text:0040A38C                 jz      short loc_40A39C
.text:0040A38E                 mov     edx, [esp+97Ch+var_8F8]
.text:0040A395                 movzx   edi, bl
.text:0040A398                 movzx   ebx, byte ptr [edi+edx]
.text:0040A39C
.text:0040A39C loc_40A39C:                             ; CODE XREF: sub_408170+221C↑j
.text:0040A39C                 mov     cl, bl
.text:0040A39E                 mov     ebp, [esp+97Ch+var_950]
.text:0040A3A2                 mov     edx, 1
.text:0040A3A7                 shr     cl, 3
.text:0040A3AA                 movzx   esi, cl
.text:0040A3AD                 mov     ecx, ebx
.text:0040A3AF                 and     ecx, 7
.text:0040A3B2                 movzx   ebx, bl
.text:0040A3B5                 shl     edx, cl
.text:0040A3B7                 or      [esi+ebp], dl
.text:0040A3BA                 jmp     loc_409C39
.text:0040A3BF ; ---------------------------------------------------------------------------
.text:0040A3BF
.text:0040A3BF loc_40A3BF:                             ; CODE XREF: sub_408170+19B4↑j
.text:0040A3BF                 test    [esp+97Ch+arg_8], 100h
.text:0040A3CA                 jz      loc_409B2A
.text:0040A3D0                 or      byte ptr [ebx+1], 4
.text:0040A3D4                 jmp     loc_409B2A
.text:0040A3D9 ; ---------------------------------------------------------------------------
.text:0040A3D9
.text:0040A3D9 loc_40A3D9:                             ; CODE XREF: sub_408170+18B2↑j
.text:0040A3D9                 inc     edi
.text:0040A3DA                 mov     [esp+97Ch+var_8D0], edi
.text:0040A3E1                 jmp     loc_409A28
.text:0040A3E6 ; ---------------------------------------------------------------------------
.text:0040A3E6
.text:0040A3E6 loc_40A3E6:                             ; CODE XREF: sub_408170+16F↑j
.text:0040A3E6                                         ; DATA XREF: sub_408170:jpt_4082DF↑o
.text:0040A3E6                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 004082DF case 92
.text:0040A3ED                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040A3F4                 jz      loc_409720
.text:0040A3FA                 movzx   ecx, byte ptr [eax]
.text:0040A3FD                 lea     ebx, [eax+1]
.text:0040A400                 mov     [esp+97Ch+var_8D0], ebx
.text:0040A407                 movzx   eax, cl
.text:0040A40A                 sub     eax, 27h ; '''  ; switch 86 cases
.text:0040A40D                 mov     [esp+97Ch+var_8EC], cl
.text:0040A414                 cmp     eax, 55h
.text:0040A417                 ja      def_40A41D      ; jumptable 0040A41D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040A41D                 jmp     ds:jpt_40A41D[eax*4] ; switch jump
.text:0040A41D ; ---------------------------------------------------------------------------
.text:0040A424 jpt_40A41D      dd offset loc_40A5BB, offset loc_40A57C, offset loc_40A68D
.text:0040A424                                         ; DATA XREF: sub_408170+22AD↑r
.text:0040A424                 dd offset def_40A41D, offset loc_40A9BE, offset def_40A41D ; jump table for switch statement
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset loc_40A6C3, offset loc_40A6C3
.text:0040A424                 dd offset loc_40A6C3, offset loc_40A6C3, offset loc_40A6C3
.text:0040A424                 dd offset loc_40A6C3, offset loc_40A6C3, offset loc_40A6C3
.text:0040A424                 dd offset loc_40A6C3, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset loc_40A81A, offset def_40A41D, offset loc_40A8EC
.text:0040A424                 dd offset loc_40A9BE, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset loc_40A9D1, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset loc_40AAA3, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset loc_40AB96, offset def_40A41D, offset loc_40AC68
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset loc_40AD3A
.text:0040A424                 dd offset def_40A41D, offset def_40A41D, offset def_40A41D
.text:0040A424                 dd offset loc_40AE2F, offset loc_40B3D9
.text:0040A57C ; ---------------------------------------------------------------------------
.text:0040A57C
.text:0040A57C loc_40A57C:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040A57C                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040A57C                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040A41D case 40
.text:0040A587                 jz      loc_408D2D
.text:0040A58D
.text:0040A58D def_40A41D:                             ; CODE XREF: sub_408170+22A7↑j
.text:0040A58D                                         ; sub_408170+22AD↑j ...
.text:0040A58D                 mov     ebx, [esp+97Ch+var_8F8] ; jumptable 0040A41D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040A594                 test    ebx, ebx
.text:0040A596                 jz      def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A59C                 movzx   edi, [esp+97Ch+var_8EC]
.text:0040A5A4                 mov     esi, [esp+97Ch+var_8F8]
.text:0040A5AB                 movzx   ecx, byte ptr [edi+esi]
.text:0040A5AF                 mov     [esp+97Ch+var_8EC], cl
.text:0040A5B6                 jmp     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A5BB ; ---------------------------------------------------------------------------
.text:0040A5BB
.text:0040A5BB loc_40A5BB:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040A5BB                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040A5BB                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040A41D case 39
.text:0040A5C6                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A5CC
.text:0040A5CC loc_40A5CC:                             ; CODE XREF: sub_408170+24D2↓j
.text:0040A5CC                                         ; sub_408170+24FF↓j ...
.text:0040A5CC                 mov     eax, [esp+97Ch+arg_C]
.text:0040A5D3                 mov     ebp, [esp+97Ch+var_950]
.text:0040A5D7                 mov     edi, [eax]
.text:0040A5D9                 mov     edx, [eax+4]
.text:0040A5DC                 sub     ebp, edi
.text:0040A5DE                 inc     ebp
.text:0040A5DF                 cmp     ebp, edx
.text:0040A5E1                 jbe     loc_40A681
.text:0040A5E7                 cmp     edx, 10000h
.text:0040A5ED                 mov     ebp, 0Fh
.text:0040A5F2                 jz      loc_408586
.text:0040A5F8                 lea     ebp, [edx+edx]
.text:0040A5FB                 mov     edx, [esp+97Ch+arg_C]
.text:0040A602                 cmp     ebp, 10000h
.text:0040A608                 mov     [edx+4], ebp
.text:0040A60B                 jbe     short loc_40A614
.text:0040A60D                 mov     dword ptr [edx+4], 10000h
.text:0040A614
.text:0040A614 loc_40A614:                             ; CODE XREF: sub_408170+249B↑j
.text:0040A614                 mov     ebx, [esp+97Ch+arg_C]
.text:0040A61B                 mov     ebp, 0Ch
.text:0040A620                 mov     esi, [ebx+4]
.text:0040A623                 mov     [esp+97Ch+Size], edi ; Block
.text:0040A626                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040A62A                 call    realloc
.text:0040A62F                 mov     edx, [esp+97Ch+arg_C]
.text:0040A636                 test    eax, eax
.text:0040A638                 mov     [edx], eax
.text:0040A63A                 jz      loc_408586
.text:0040A640                 cmp     edi, eax
.text:0040A642                 jz      short loc_40A5CC
.text:0040A644                 sub     eax, edi
.text:0040A646                 mov     edi, [esp+97Ch+var_908]
.text:0040A64A                 add     [esp+97Ch+var_950], eax
.text:0040A64E                 add     [esp+97Ch+var_904], eax
.text:0040A652                 test    edi, edi
.text:0040A654                 jz      short loc_40A65A
.text:0040A656                 add     [esp+97Ch+var_908], eax
.text:0040A65A
.text:0040A65A loc_40A65A:                             ; CODE XREF: sub_408170+24E4↑j
.text:0040A65A                 mov     ecx, [esp+97Ch+var_900]
.text:0040A65E                 test    ecx, ecx
.text:0040A660                 jz      short loc_40A666
.text:0040A662                 add     [esp+97Ch+var_900], eax
.text:0040A666
.text:0040A666 loc_40A666:                             ; CODE XREF: sub_408170+24F0↑j
.text:0040A666                 mov     edx, [esp+97Ch+var_8FC]
.text:0040A66D                 test    edx, edx
.text:0040A66F                 jz      loc_40A5CC
.text:0040A675                 add     [esp+97Ch+var_8FC], eax
.text:0040A67C                 jmp     loc_40A5CC
.text:0040A681 ; ---------------------------------------------------------------------------
.text:0040A681
.text:0040A681 loc_40A681:                             ; CODE XREF: sub_408170+2471↑j
.text:0040A681                 mov     edi, [esp+97Ch+var_950]
.text:0040A685                 mov     byte ptr [edi], 0Ch
.text:0040A688                 jmp     loc_40859A
.text:0040A68D ; ---------------------------------------------------------------------------
.text:0040A68D
.text:0040A68D loc_40A68D:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040A68D                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040A68D                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040A41D case 41
.text:0040A698                 jnz     def_40A41D      ; jumptable 0040A41D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040A69E                 mov     edi, [esp+97Ch+var_24]
.text:0040A6A5                 test    edi, edi
.text:0040A6A7                 jnz     loc_408F17
.text:0040A6AD                 test    [esp+97Ch+arg_8], 20000h
.text:0040A6B8                 jnz     def_40A41D      ; jumptable 0040A41D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040A6BE                 jmp     loc_409040
.text:0040A6C3 ; ---------------------------------------------------------------------------
.text:0040A6C3
.text:0040A6C3 loc_40A6C3:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040A6C3                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040A6C3                 test    [esp+97Ch+arg_8], 4000h ; jumptable 0040A41D cases 49-57
.text:0040A6CE                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A6D4                 movzx   ebx, [esp+97Ch+var_8EC]
.text:0040A6DC                 sub     bl, 30h ; '0'
.text:0040A6DF                 movzx   eax, bl
.text:0040A6E2                 cmp     eax, [esp+97Ch+var_90C]
.text:0040A6E6                 ja      loc_40A809
.text:0040A6EC                 mov     [esp+97Ch+var_970], eax
.text:0040A6F0                 mov     ecx, [esp+97Ch+Block]
.text:0040A6F7                 mov     edi, [esp+97Ch+var_28]
.text:0040A6FE                 mov     esi, [esp+97Ch+var_24]
.text:0040A705                 mov     [esp+97Ch+Size], ecx
.text:0040A708                 mov     [esp+97Ch+var_978], edi
.text:0040A70C                 mov     [esp+97Ch+var_974], esi
.text:0040A710                 call    sub_407B50
.text:0040A715                 test    al, al
.text:0040A717                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A71D                 mov     esi, [esp+97Ch+arg_C]
.text:0040A724                 mov     ebp, [esp+97Ch+var_950]
.text:0040A728                 mov     edi, [esi]
.text:0040A72A                 mov     [esp+97Ch+var_900], ebp
.text:0040A72E                 mov     edx, [esi+4]
.text:0040A731                 sub     ebp, edi
.text:0040A733                 mov     [esp+97Ch+var_940], edi
.text:0040A737                 add     ebp, 2
.text:0040A73A                 cmp     ebp, edx
.text:0040A73C                 jbe     loc_40A7FA
.text:0040A742
.text:0040A742 loc_40A742:                             ; CODE XREF: sub_408170+2684↓j
.text:0040A742                 cmp     edx, 10000h
.text:0040A748                 mov     ebp, 0Fh
.text:0040A74D                 jz      loc_408586
.text:0040A753                 mov     esi, [esp+97Ch+arg_C]
.text:0040A75A                 lea     ecx, [edx+edx]
.text:0040A75D                 cmp     ecx, 10000h
.text:0040A763                 mov     [esi+4], ecx
.text:0040A766                 jbe     short loc_40A76F
.text:0040A768                 mov     dword ptr [esi+4], 10000h
.text:0040A76F
.text:0040A76F loc_40A76F:                             ; CODE XREF: sub_408170+25F6↑j
.text:0040A76F                 mov     eax, [esp+97Ch+arg_C]
.text:0040A776                 mov     ebp, [eax+4]
.text:0040A779                 mov     [esp+97Ch+Size], edi ; Block
.text:0040A77C                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040A780                 mov     ebp, 0Ch
.text:0040A785                 call    realloc
.text:0040A78A                 mov     edx, [esp+97Ch+arg_C]
.text:0040A791                 test    eax, eax
.text:0040A793                 mov     [edx], eax
.text:0040A795                 jz      loc_408586
.text:0040A79B                 cmp     [esp+97Ch+var_940], eax
.text:0040A79F                 jz      short loc_40A7D9
.text:0040A7A1                 mov     esi, [esp+97Ch+var_940]
.text:0040A7A5                 mov     edi, [esp+97Ch+var_908]
.text:0040A7A9                 sub     eax, esi
.text:0040A7AB                 add     [esp+97Ch+var_950], eax
.text:0040A7AF                 add     [esp+97Ch+var_904], eax
.text:0040A7B3                 test    edi, edi
.text:0040A7B5                 jz      short loc_40A7BB
.text:0040A7B7                 add     [esp+97Ch+var_908], eax
.text:0040A7BB
.text:0040A7BB loc_40A7BB:                             ; CODE XREF: sub_408170+2645↑j
.text:0040A7BB                 mov     edx, [esp+97Ch+var_900]
.text:0040A7BF                 test    edx, edx
.text:0040A7C1                 jz      short loc_40A7C7
.text:0040A7C3                 add     [esp+97Ch+var_900], eax
.text:0040A7C7
.text:0040A7C7 loc_40A7C7:                             ; CODE XREF: sub_408170+2651↑j
.text:0040A7C7                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040A7CE                 test    ecx, ecx
.text:0040A7D0                 jz      short loc_40A7D9
.text:0040A7D2                 add     [esp+97Ch+var_8FC], eax
.text:0040A7D9
.text:0040A7D9 loc_40A7D9:                             ; CODE XREF: sub_408170+262F↑j
.text:0040A7D9                                         ; sub_408170+2660↑j
.text:0040A7D9                 mov     eax, [esp+97Ch+arg_C]
.text:0040A7E0                 mov     ebp, [esp+97Ch+var_950]
.text:0040A7E4                 mov     edi, [eax]
.text:0040A7E6                 mov     edx, [eax+4]
.text:0040A7E9                 sub     ebp, edi
.text:0040A7EB                 add     ebp, 2
.text:0040A7EE                 mov     [esp+97Ch+var_940], edi
.text:0040A7F2                 cmp     ebp, edx
.text:0040A7F4                 ja      loc_40A742
.text:0040A7FA
.text:0040A7FA loc_40A7FA:                             ; CODE XREF: sub_408170+25CC↑j
.text:0040A7FA                 mov     edi, [esp+97Ch+var_950]
.text:0040A7FE                 mov     byte ptr [edi], 8
.text:0040A801                 inc     edi
.text:0040A802                 mov     [edi], bl
.text:0040A804                 jmp     loc_40859A
.text:0040A809 ; ---------------------------------------------------------------------------
.text:0040A809
.text:0040A809 loc_40A809:                             ; CODE XREF: sub_408170+2576↑j
.text:0040A809                 mov     ebx, [esp+97Ch+Block]
.text:0040A810                 mov     ebp, 6
.text:0040A815                 jmp     loc_40A1D8
.text:0040A81A ; ---------------------------------------------------------------------------
.text:0040A81A
.text:0040A81A loc_40A81A:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040A81A                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040A81A                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040A41D case 60
.text:0040A825                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A82B
.text:0040A82B loc_40A82B:                             ; CODE XREF: sub_408170+2731↓j
.text:0040A82B                                         ; sub_408170+275E↓j ...
.text:0040A82B                 mov     eax, [esp+97Ch+arg_C]
.text:0040A832                 mov     ebx, [esp+97Ch+var_950]
.text:0040A836                 mov     edi, [eax]
.text:0040A838                 mov     edx, [eax+4]
.text:0040A83B                 sub     ebx, edi
.text:0040A83D                 inc     ebx
.text:0040A83E                 cmp     ebx, edx
.text:0040A840                 jbe     loc_40A8E0
.text:0040A846                 cmp     edx, 10000h
.text:0040A84C                 mov     ebp, 0Fh
.text:0040A851                 jz      loc_408586
.text:0040A857                 lea     ebx, [edx+edx]
.text:0040A85A                 mov     edx, [esp+97Ch+arg_C]
.text:0040A861                 cmp     ebx, 10000h
.text:0040A867                 mov     [edx+4], ebx
.text:0040A86A                 jbe     short loc_40A873
.text:0040A86C                 mov     dword ptr [edx+4], 10000h
.text:0040A873
.text:0040A873 loc_40A873:                             ; CODE XREF: sub_408170+26FA↑j
.text:0040A873                 mov     ebp, [esp+97Ch+arg_C]
.text:0040A87A                 mov     edx, [ebp+4]
.text:0040A87D                 mov     ebp, 0Ch
.text:0040A882                 mov     [esp+97Ch+Size], edi ; Block
.text:0040A885                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040A889                 call    realloc
.text:0040A88E                 mov     ecx, [esp+97Ch+arg_C]
.text:0040A895                 test    eax, eax
.text:0040A897                 mov     [ecx], eax
.text:0040A899                 jz      loc_408586
.text:0040A89F                 cmp     edi, eax
.text:0040A8A1                 jz      short loc_40A82B
.text:0040A8A3                 mov     esi, [esp+97Ch+var_908]
.text:0040A8A7                 sub     eax, edi
.text:0040A8A9                 add     [esp+97Ch+var_950], eax
.text:0040A8AD                 add     [esp+97Ch+var_904], eax
.text:0040A8B1                 test    esi, esi
.text:0040A8B3                 jz      short loc_40A8B9
.text:0040A8B5                 add     [esp+97Ch+var_908], eax
.text:0040A8B9
.text:0040A8B9 loc_40A8B9:                             ; CODE XREF: sub_408170+2743↑j
.text:0040A8B9                 mov     edi, [esp+97Ch+var_900]
.text:0040A8BD                 test    edi, edi
.text:0040A8BF                 jz      short loc_40A8C5
.text:0040A8C1                 add     [esp+97Ch+var_900], eax
.text:0040A8C5
.text:0040A8C5 loc_40A8C5:                             ; CODE XREF: sub_408170+274F↑j
.text:0040A8C5                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040A8CC                 test    ecx, ecx
.text:0040A8CE                 jz      loc_40A82B
.text:0040A8D4                 add     [esp+97Ch+var_8FC], eax
.text:0040A8DB                 jmp     loc_40A82B
.text:0040A8E0 ; ---------------------------------------------------------------------------
.text:0040A8E0
.text:0040A8E0 loc_40A8E0:                             ; CODE XREF: sub_408170+26D0↑j
.text:0040A8E0                 mov     edi, [esp+97Ch+var_950]
.text:0040A8E4                 mov     byte ptr [edi], 1Ah
.text:0040A8E7                 jmp     loc_40859A
.text:0040A8EC ; ---------------------------------------------------------------------------
.text:0040A8EC
.text:0040A8EC loc_40A8EC:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040A8EC                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040A8EC                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040A41D case 62
.text:0040A8F7                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A8FD
.text:0040A8FD loc_40A8FD:                             ; CODE XREF: sub_408170+2803↓j
.text:0040A8FD                                         ; sub_408170+2830↓j ...
.text:0040A8FD                 mov     eax, [esp+97Ch+arg_C]
.text:0040A904                 mov     ebp, [esp+97Ch+var_950]
.text:0040A908                 mov     edi, [eax]
.text:0040A90A                 mov     edx, [eax+4]
.text:0040A90D                 sub     ebp, edi
.text:0040A90F                 inc     ebp
.text:0040A910                 cmp     ebp, edx
.text:0040A912                 jbe     loc_40A9B2
.text:0040A918                 cmp     edx, 10000h
.text:0040A91E                 mov     ebp, 0Fh
.text:0040A923                 jz      loc_408586
.text:0040A929                 lea     ebp, [edx+edx]
.text:0040A92C                 mov     edx, [esp+97Ch+arg_C]
.text:0040A933                 cmp     ebp, 10000h
.text:0040A939                 mov     [edx+4], ebp
.text:0040A93C                 jbe     short loc_40A945
.text:0040A93E                 mov     dword ptr [edx+4], 10000h
.text:0040A945
.text:0040A945 loc_40A945:                             ; CODE XREF: sub_408170+27CC↑j
.text:0040A945                 mov     ebx, [esp+97Ch+arg_C]
.text:0040A94C                 mov     ebp, 0Ch
.text:0040A951                 mov     esi, [ebx+4]
.text:0040A954                 mov     [esp+97Ch+Size], edi ; Block
.text:0040A957                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040A95B                 call    realloc
.text:0040A960                 mov     edx, [esp+97Ch+arg_C]
.text:0040A967                 test    eax, eax
.text:0040A969                 mov     [edx], eax
.text:0040A96B                 jz      loc_408586
.text:0040A971                 cmp     edi, eax
.text:0040A973                 jz      short loc_40A8FD
.text:0040A975                 sub     eax, edi
.text:0040A977                 mov     edi, [esp+97Ch+var_908]
.text:0040A97B                 add     [esp+97Ch+var_950], eax
.text:0040A97F                 add     [esp+97Ch+var_904], eax
.text:0040A983                 test    edi, edi
.text:0040A985                 jz      short loc_40A98B
.text:0040A987                 add     [esp+97Ch+var_908], eax
.text:0040A98B
.text:0040A98B loc_40A98B:                             ; CODE XREF: sub_408170+2815↑j
.text:0040A98B                 mov     ecx, [esp+97Ch+var_900]
.text:0040A98F                 test    ecx, ecx
.text:0040A991                 jz      short loc_40A997
.text:0040A993                 add     [esp+97Ch+var_900], eax
.text:0040A997
.text:0040A997 loc_40A997:                             ; CODE XREF: sub_408170+2821↑j
.text:0040A997                 mov     edx, [esp+97Ch+var_8FC]
.text:0040A99E                 test    edx, edx
.text:0040A9A0                 jz      loc_40A8FD
.text:0040A9A6                 add     [esp+97Ch+var_8FC], eax
.text:0040A9AD                 jmp     loc_40A8FD
.text:0040A9B2 ; ---------------------------------------------------------------------------
.text:0040A9B2
.text:0040A9B2 loc_40A9B2:                             ; CODE XREF: sub_408170+27A2↑j
.text:0040A9B2                 mov     edi, [esp+97Ch+var_950]
.text:0040A9B6                 mov     byte ptr [edi], 1Bh
.text:0040A9B9                 jmp     loc_40859A
.text:0040A9BE ; ---------------------------------------------------------------------------
.text:0040A9BE
.text:0040A9BE loc_40A9BE:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040A9BE                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040A9BE                 test    byte ptr [esp+97Ch+arg_8], 2 ; jumptable 0040A41D cases 43,63
.text:0040A9C6                 jz      def_40A41D      ; jumptable 0040A41D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040A9CC                 jmp     loc_4091D0      ; jumptable 004082DF case 42
.text:0040A9D1 ; ---------------------------------------------------------------------------
.text:0040A9D1
.text:0040A9D1 loc_40A9D1:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040A9D1                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040A9D1                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040A41D case 66
.text:0040A9DC                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A9E2
.text:0040A9E2 loc_40A9E2:                             ; CODE XREF: sub_408170+28E8↓j
.text:0040A9E2                                         ; sub_408170+2915↓j ...
.text:0040A9E2                 mov     eax, [esp+97Ch+arg_C]
.text:0040A9E9                 mov     ebp, [esp+97Ch+var_950]
.text:0040A9ED                 mov     edi, [eax]
.text:0040A9EF                 mov     edx, [eax+4]
.text:0040A9F2                 sub     ebp, edi
.text:0040A9F4                 inc     ebp
.text:0040A9F5                 cmp     ebp, edx
.text:0040A9F7                 jbe     loc_40AA97
.text:0040A9FD                 cmp     edx, 10000h
.text:0040AA03                 mov     ebp, 0Fh
.text:0040AA08                 jz      loc_408586
.text:0040AA0E                 lea     ebx, [edx+edx]
.text:0040AA11                 mov     edx, [esp+97Ch+arg_C]
.text:0040AA18                 cmp     ebx, 10000h
.text:0040AA1E                 mov     [edx+4], ebx
.text:0040AA21                 jbe     short loc_40AA2A
.text:0040AA23                 mov     dword ptr [edx+4], 10000h
.text:0040AA2A
.text:0040AA2A loc_40AA2A:                             ; CODE XREF: sub_408170+28B1↑j
.text:0040AA2A                 mov     esi, [esp+97Ch+arg_C]
.text:0040AA31                 mov     ebp, [esi+4]
.text:0040AA34                 mov     [esp+97Ch+Size], edi ; Block
.text:0040AA37                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040AA3B                 mov     ebp, 0Ch
.text:0040AA40                 call    realloc
.text:0040AA45                 mov     edx, [esp+97Ch+arg_C]
.text:0040AA4C                 test    eax, eax
.text:0040AA4E                 mov     [edx], eax
.text:0040AA50                 jz      loc_408586
.text:0040AA56                 cmp     edi, eax
.text:0040AA58                 jz      short loc_40A9E2
.text:0040AA5A                 sub     eax, edi
.text:0040AA5C                 mov     edi, [esp+97Ch+var_908]
.text:0040AA60                 add     [esp+97Ch+var_950], eax
.text:0040AA64                 add     [esp+97Ch+var_904], eax
.text:0040AA68                 test    edi, edi
.text:0040AA6A                 jz      short loc_40AA70
.text:0040AA6C                 add     [esp+97Ch+var_908], eax
.text:0040AA70
.text:0040AA70 loc_40AA70:                             ; CODE XREF: sub_408170+28FA↑j
.text:0040AA70                 mov     ecx, [esp+97Ch+var_900]
.text:0040AA74                 test    ecx, ecx
.text:0040AA76                 jz      short loc_40AA7C
.text:0040AA78                 add     [esp+97Ch+var_900], eax
.text:0040AA7C
.text:0040AA7C loc_40AA7C:                             ; CODE XREF: sub_408170+2906↑j
.text:0040AA7C                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040AA83                 test    ebx, ebx
.text:0040AA85                 jz      loc_40A9E2
.text:0040AA8B                 add     [esp+97Ch+var_8FC], eax
.text:0040AA92                 jmp     loc_40A9E2
.text:0040AA97 ; ---------------------------------------------------------------------------
.text:0040AA97
.text:0040AA97 loc_40AA97:                             ; CODE XREF: sub_408170+2887↑j
.text:0040AA97                 mov     edi, [esp+97Ch+var_950]
.text:0040AA9B                 mov     byte ptr [edi], 1Dh
.text:0040AA9E                 jmp     loc_40859A
.text:0040AAA3 ; ---------------------------------------------------------------------------
.text:0040AAA3
.text:0040AAA3 loc_40AAA3:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040AAA3                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040AAA3                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040A41D case 87
.text:0040AAAE                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040AAB4                 mov     ecx, [esp+97Ch+arg_C]
.text:0040AABB                 mov     esi, [esp+97Ch+var_950]
.text:0040AABF                 mov     edi, [ecx]
.text:0040AAC1                 mov     [esp+97Ch+var_900], esi
.text:0040AAC5                 mov     edx, [ecx+4]
.text:0040AAC8                 sub     esi, edi
.text:0040AACA                 inc     esi
.text:0040AACB                 mov     ebx, edi
.text:0040AACD                 cmp     esi, edx
.text:0040AACF                 jbe     loc_40AB8A
.text:0040AAD5
.text:0040AAD5 loc_40AAD5:                             ; CODE XREF: sub_408170+2A14↓j
.text:0040AAD5                 cmp     edx, 10000h
.text:0040AADB                 mov     ebp, 0Fh
.text:0040AAE0                 jz      loc_408586
.text:0040AAE6                 mov     esi, [esp+97Ch+arg_C]
.text:0040AAED                 lea     ebp, [edx+edx]
.text:0040AAF0                 cmp     ebp, 10000h
.text:0040AAF6                 mov     [esi+4], ebp
.text:0040AAF9                 jbe     short loc_40AB02
.text:0040AAFB                 mov     dword ptr [esi+4], 10000h
.text:0040AB02
.text:0040AB02 loc_40AB02:                             ; CODE XREF: sub_408170+2989↑j
.text:0040AB02                 mov     eax, [esp+97Ch+arg_C]
.text:0040AB09                 mov     ebp, 0Ch
.text:0040AB0E                 mov     esi, [eax+4]
.text:0040AB11                 mov     [esp+97Ch+Size], edi ; Block
.text:0040AB14                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040AB18                 call    realloc
.text:0040AB1D                 mov     edi, [esp+97Ch+arg_C]
.text:0040AB24                 test    eax, eax
.text:0040AB26                 mov     [edi], eax
.text:0040AB28                 jz      loc_408586
.text:0040AB2E                 cmp     ebx, eax
.text:0040AB30                 jz      short loc_40AB66
.text:0040AB32                 sub     eax, ebx
.text:0040AB34                 mov     ebx, [esp+97Ch+var_908]
.text:0040AB38                 add     [esp+97Ch+var_950], eax
.text:0040AB3C                 add     [esp+97Ch+var_904], eax
.text:0040AB40                 test    ebx, ebx
.text:0040AB42                 jz      short loc_40AB48
.text:0040AB44                 add     [esp+97Ch+var_908], eax
.text:0040AB48
.text:0040AB48 loc_40AB48:                             ; CODE XREF: sub_408170+29D2↑j
.text:0040AB48                 mov     ecx, [esp+97Ch+var_900]
.text:0040AB4C                 test    ecx, ecx
.text:0040AB4E                 jz      short loc_40AB54
.text:0040AB50                 add     [esp+97Ch+var_900], eax
.text:0040AB54
.text:0040AB54 loc_40AB54:                             ; CODE XREF: sub_408170+29DE↑j
.text:0040AB54                 mov     edx, [esp+97Ch+var_8FC]
.text:0040AB5B                 test    edx, edx
.text:0040AB5D                 jz      short loc_40AB66
.text:0040AB5F                 add     [esp+97Ch+var_8FC], eax
.text:0040AB66
.text:0040AB66 loc_40AB66:                             ; CODE XREF: sub_408170+29C0↑j
.text:0040AB66                                         ; sub_408170+29ED↑j
.text:0040AB66                 mov     esi, [esp+97Ch+arg_C]
.text:0040AB6D                 mov     eax, [esp+97Ch+arg_C]
.text:0040AB74                 mov     ebp, [esp+97Ch+var_950]
.text:0040AB78                 mov     edi, [esi]
.text:0040AB7A                 mov     edx, [eax+4]
.text:0040AB7D                 sub     ebp, edi
.text:0040AB7F                 inc     ebp
.text:0040AB80                 mov     ebx, edi
.text:0040AB82                 cmp     ebp, edx
.text:0040AB84                 ja      loc_40AAD5
.text:0040AB8A
.text:0040AB8A loc_40AB8A:                             ; CODE XREF: sub_408170+295F↑j
.text:0040AB8A                 mov     edi, [esp+97Ch+var_950]
.text:0040AB8E                 mov     byte ptr [edi], 19h
.text:0040AB91                 jmp     loc_40859A
.text:0040AB96 ; ---------------------------------------------------------------------------
.text:0040AB96
.text:0040AB96 loc_40AB96:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040AB96                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040AB96                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040A41D case 96
.text:0040ABA1                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040ABA7
.text:0040ABA7 loc_40ABA7:                             ; CODE XREF: sub_408170+2AAD↓j
.text:0040ABA7                                         ; sub_408170+2ADA↓j ...
.text:0040ABA7                 mov     eax, [esp+97Ch+arg_C]
.text:0040ABAE                 mov     ebx, [esp+97Ch+var_950]
.text:0040ABB2                 mov     edi, [eax]
.text:0040ABB4                 mov     edx, [eax+4]
.text:0040ABB7                 sub     ebx, edi
.text:0040ABB9                 inc     ebx
.text:0040ABBA                 cmp     ebx, edx
.text:0040ABBC                 jbe     loc_40AC5C
.text:0040ABC2                 cmp     edx, 10000h
.text:0040ABC8                 mov     ebp, 0Fh
.text:0040ABCD                 jz      loc_408586
.text:0040ABD3                 lea     esi, [edx+edx]
.text:0040ABD6                 mov     edx, [esp+97Ch+arg_C]
.text:0040ABDD                 cmp     esi, 10000h
.text:0040ABE3                 mov     [edx+4], esi
.text:0040ABE6                 jbe     short loc_40ABEF
.text:0040ABE8                 mov     dword ptr [edx+4], 10000h
.text:0040ABEF
.text:0040ABEF loc_40ABEF:                             ; CODE XREF: sub_408170+2A76↑j
.text:0040ABEF                 mov     ebp, [esp+97Ch+arg_C]
.text:0040ABF6                 mov     ebx, [ebp+4]
.text:0040ABF9                 mov     ebp, 0Ch
.text:0040ABFE                 mov     [esp+97Ch+Size], edi ; Block
.text:0040AC01                 mov     [esp+97Ch+var_978], ebx ; Size
.text:0040AC05                 call    realloc
.text:0040AC0A                 mov     edx, [esp+97Ch+arg_C]
.text:0040AC11                 test    eax, eax
.text:0040AC13                 mov     [edx], eax
.text:0040AC15                 jz      loc_408586
.text:0040AC1B                 cmp     edi, eax
.text:0040AC1D                 jz      short loc_40ABA7
.text:0040AC1F                 mov     ecx, [esp+97Ch+var_908]
.text:0040AC23                 sub     eax, edi
.text:0040AC25                 add     [esp+97Ch+var_950], eax
.text:0040AC29                 add     [esp+97Ch+var_904], eax
.text:0040AC2D                 test    ecx, ecx
.text:0040AC2F                 jz      short loc_40AC35
.text:0040AC31                 add     [esp+97Ch+var_908], eax
.text:0040AC35
.text:0040AC35 loc_40AC35:                             ; CODE XREF: sub_408170+2ABF↑j
.text:0040AC35                 mov     edi, [esp+97Ch+var_900]
.text:0040AC39                 test    edi, edi
.text:0040AC3B                 jz      short loc_40AC41
.text:0040AC3D                 add     [esp+97Ch+var_900], eax
.text:0040AC41
.text:0040AC41 loc_40AC41:                             ; CODE XREF: sub_408170+2ACB↑j
.text:0040AC41                 mov     esi, [esp+97Ch+var_8FC]
.text:0040AC48                 test    esi, esi
.text:0040AC4A                 jz      loc_40ABA7
.text:0040AC50                 add     [esp+97Ch+var_8FC], eax
.text:0040AC57                 jmp     loc_40ABA7
.text:0040AC5C ; ---------------------------------------------------------------------------
.text:0040AC5C
.text:0040AC5C loc_40AC5C:                             ; CODE XREF: sub_408170+2A4C↑j
.text:0040AC5C                 mov     edi, [esp+97Ch+var_950]
.text:0040AC60                 mov     byte ptr [edi], 0Bh
.text:0040AC63                 jmp     loc_40859A
.text:0040AC68 ; ---------------------------------------------------------------------------
.text:0040AC68
.text:0040AC68 loc_40AC68:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040AC68                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040AC68                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040A41D case 98
.text:0040AC73                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040AC79
.text:0040AC79 loc_40AC79:                             ; CODE XREF: sub_408170+2B7F↓j
.text:0040AC79                                         ; sub_408170+2BAC↓j ...
.text:0040AC79                 mov     eax, [esp+97Ch+arg_C]
.text:0040AC80                 mov     ecx, [esp+97Ch+var_950]
.text:0040AC84                 mov     edi, [eax]
.text:0040AC86                 mov     edx, [eax+4]
.text:0040AC89                 sub     ecx, edi
.text:0040AC8B                 inc     ecx
.text:0040AC8C                 cmp     ecx, edx
.text:0040AC8E                 jbe     loc_40AD2E
.text:0040AC94                 cmp     edx, 10000h
.text:0040AC9A                 mov     ebp, 0Fh
.text:0040AC9F                 jz      loc_408586
.text:0040ACA5                 lea     esi, [edx+edx]
.text:0040ACA8                 mov     edx, [esp+97Ch+arg_C]
.text:0040ACAF                 cmp     esi, 10000h
.text:0040ACB5                 mov     [edx+4], esi
.text:0040ACB8                 jbe     short loc_40ACC1
.text:0040ACBA                 mov     dword ptr [edx+4], 10000h
.text:0040ACC1
.text:0040ACC1 loc_40ACC1:                             ; CODE XREF: sub_408170+2B48↑j
.text:0040ACC1                 mov     edx, [esp+97Ch+arg_C]
.text:0040ACC8                 mov     ebp, 0Ch
.text:0040ACCD                 mov     ebx, [edx+4]
.text:0040ACD0                 mov     [esp+97Ch+Size], edi ; Block
.text:0040ACD3                 mov     [esp+97Ch+var_978], ebx ; Size
.text:0040ACD7                 call    realloc
.text:0040ACDC                 mov     ecx, [esp+97Ch+arg_C]
.text:0040ACE3                 test    eax, eax
.text:0040ACE5                 mov     [ecx], eax
.text:0040ACE7                 jz      loc_408586
.text:0040ACED                 cmp     edi, eax
.text:0040ACEF                 jz      short loc_40AC79
.text:0040ACF1                 mov     ebp, [esp+97Ch+var_908]
.text:0040ACF5                 sub     eax, edi
.text:0040ACF7                 add     [esp+97Ch+var_950], eax
.text:0040ACFB                 add     [esp+97Ch+var_904], eax
.text:0040ACFF                 test    ebp, ebp
.text:0040AD01                 jz      short loc_40AD07
.text:0040AD03                 add     [esp+97Ch+var_908], eax
.text:0040AD07
.text:0040AD07 loc_40AD07:                             ; CODE XREF: sub_408170+2B91↑j
.text:0040AD07                 mov     edi, [esp+97Ch+var_900]
.text:0040AD0B                 test    edi, edi
.text:0040AD0D                 jz      short loc_40AD13
.text:0040AD0F                 add     [esp+97Ch+var_900], eax
.text:0040AD13
.text:0040AD13 loc_40AD13:                             ; CODE XREF: sub_408170+2B9D↑j
.text:0040AD13                 mov     esi, [esp+97Ch+var_8FC]
.text:0040AD1A                 test    esi, esi
.text:0040AD1C                 jz      loc_40AC79
.text:0040AD22                 add     [esp+97Ch+var_8FC], eax
.text:0040AD29                 jmp     loc_40AC79
.text:0040AD2E ; ---------------------------------------------------------------------------
.text:0040AD2E
.text:0040AD2E loc_40AD2E:                             ; CODE XREF: sub_408170+2B1E↑j
.text:0040AD2E                 mov     edi, [esp+97Ch+var_950]
.text:0040AD32                 mov     byte ptr [edi], 1Ch
.text:0040AD35                 jmp     loc_40859A
.text:0040AD3A ; ---------------------------------------------------------------------------
.text:0040AD3A
.text:0040AD3A loc_40AD3A:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040AD3A                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040AD3A                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040A41D case 119
.text:0040AD45                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040AD4B                 mov     eax, [esp+97Ch+arg_C]
.text:0040AD52                 mov     ecx, [esp+97Ch+var_950]
.text:0040AD56                 mov     edi, [eax]
.text:0040AD58                 mov     [esp+97Ch+var_900], ecx
.text:0040AD5C                 mov     esi, ecx
.text:0040AD5E                 mov     edx, [eax+4]
.text:0040AD61                 sub     esi, edi
.text:0040AD63                 mov     ebx, edi
.text:0040AD65                 inc     esi
.text:0040AD66                 cmp     esi, edx
.text:0040AD68                 jbe     loc_40AE23
.text:0040AD6E
.text:0040AD6E loc_40AD6E:                             ; CODE XREF: sub_408170+2CAD↓j
.text:0040AD6E                 cmp     edx, 10000h
.text:0040AD74                 mov     ebp, 0Fh
.text:0040AD79                 jz      loc_408586
.text:0040AD7F                 mov     esi, [esp+97Ch+arg_C]
.text:0040AD86                 lea     ebp, [edx+edx]
.text:0040AD89                 cmp     ebp, 10000h
.text:0040AD8F                 mov     [esi+4], ebp
.text:0040AD92                 jbe     short loc_40AD9B
.text:0040AD94                 mov     dword ptr [esi+4], 10000h
.text:0040AD9B
.text:0040AD9B loc_40AD9B:                             ; CODE XREF: sub_408170+2C22↑j
.text:0040AD9B                 mov     eax, [esp+97Ch+arg_C]
.text:0040ADA2                 mov     ebp, 0Ch
.text:0040ADA7                 mov     esi, [eax+4]
.text:0040ADAA                 mov     [esp+97Ch+Size], edi ; Block
.text:0040ADAD                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040ADB1                 call    realloc
.text:0040ADB6                 mov     edx, [esp+97Ch+arg_C]
.text:0040ADBD                 test    eax, eax
.text:0040ADBF                 mov     [edx], eax
.text:0040ADC1                 jz      loc_408586
.text:0040ADC7                 cmp     ebx, eax
.text:0040ADC9                 jz      short loc_40ADFF
.text:0040ADCB                 sub     eax, ebx
.text:0040ADCD                 mov     ebx, [esp+97Ch+var_908]
.text:0040ADD1                 add     [esp+97Ch+var_950], eax
.text:0040ADD5                 add     [esp+97Ch+var_904], eax
.text:0040ADD9                 test    ebx, ebx
.text:0040ADDB                 jz      short loc_40ADE1
.text:0040ADDD                 add     [esp+97Ch+var_908], eax
.text:0040ADE1
.text:0040ADE1 loc_40ADE1:                             ; CODE XREF: sub_408170+2C6B↑j
.text:0040ADE1                 mov     edi, [esp+97Ch+var_900]
.text:0040ADE5                 test    edi, edi
.text:0040ADE7                 jz      short loc_40ADED
.text:0040ADE9                 add     [esp+97Ch+var_900], eax
.text:0040ADED
.text:0040ADED loc_40ADED:                             ; CODE XREF: sub_408170+2C77↑j
.text:0040ADED                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040ADF4                 test    ecx, ecx
.text:0040ADF6                 jz      short loc_40ADFF
.text:0040ADF8                 add     [esp+97Ch+var_8FC], eax
.text:0040ADFF
.text:0040ADFF loc_40ADFF:                             ; CODE XREF: sub_408170+2C59↑j
.text:0040ADFF                                         ; sub_408170+2C86↑j
.text:0040ADFF                 mov     edx, [esp+97Ch+arg_C]
.text:0040AE06                 mov     eax, [esp+97Ch+arg_C]
.text:0040AE0D                 mov     ebp, [esp+97Ch+var_950]
.text:0040AE11                 mov     edi, [edx]
.text:0040AE13                 mov     edx, [eax+4]
.text:0040AE16                 sub     ebp, edi
.text:0040AE18                 inc     ebp
.text:0040AE19                 mov     ebx, edi
.text:0040AE1B                 cmp     ebp, edx
.text:0040AE1D                 ja      loc_40AD6E
.text:0040AE23
.text:0040AE23 loc_40AE23:                             ; CODE XREF: sub_408170+2BF8↑j
.text:0040AE23                 mov     edi, [esp+97Ch+var_950]
.text:0040AE27                 mov     byte ptr [edi], 18h
.text:0040AE2A                 jmp     loc_40859A
.text:0040AE2F ; ---------------------------------------------------------------------------
.text:0040AE2F
.text:0040AE2F loc_40AE2F:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040AE2F                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040AE2F                 mov     ebx, [esp+97Ch+arg_8] ; jumptable 0040A41D case 123
.text:0040AE36                 and     ebx, 1200h
.text:0040AE3C                 cmp     ebx, 200h
.text:0040AE42                 jnz     def_40A41D      ; jumptable 0040A41D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040AE48
.text:0040AE48 loc_40AE48:                             ; CODE XREF: sub_408170+329D↓j
.text:0040AE48                 mov     [esp+97Ch+var_934], 0FFFFFFFFh
.text:0040AE50                 mov     edi, [esp+97Ch+var_8D0]
.text:0040AE57                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040AE5E                 mov     [esp+97Ch+var_938], 0FFFFFFFFh
.text:0040AE66                 mov     ecx, edi
.text:0040AE68                 jz      loc_40AF29
.text:0040AE6E
.text:0040AE6E loc_40AE6E:                             ; CODE XREF: sub_408170+2D74↓j
.text:0040AE6E                 movzx   eax, byte ptr [edi]
.text:0040AE71                 inc     edi
.text:0040AE72                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040AE79                 mov     [esp+97Ch+var_8D0], edi
.text:0040AE80                 test    ebp, ebp
.text:0040AE82                 mov     [esp+97Ch+var_8EC], al
.text:0040AE89                 jz      short loc_40AEA0
.text:0040AE8B                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040AE92                 movzx   esi, al
.text:0040AE95                 movzx   ebx, byte ptr [esi+ebp]
.text:0040AE99                 mov     [esp+97Ch+var_8EC], bl
.text:0040AEA0
.text:0040AEA0 loc_40AEA0:                             ; CODE XREF: sub_408170+2D19↑j
.text:0040AEA0                 movzx   edx, [esp+97Ch+var_8EC]
.text:0040AEA8                 sub     dl, 30h ; '0'
.text:0040AEAB                 cmp     dl, 9
.text:0040AEAE                 ja      short loc_40AEE6
.text:0040AEB0                 cmp     [esp+97Ch+var_934], 7FFFh
.text:0040AEB8                 jg      short loc_40AEDD
.text:0040AEBA                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040AEC2                 mov     edx, [esp+97Ch+var_934]
.text:0040AEC6                 shr     edx, 1Fh
.text:0040AEC9                 dec     edx
.text:0040AECA                 and     [esp+97Ch+var_934], edx
.text:0040AECE                 mov     eax, [esp+97Ch+var_934]
.text:0040AED2                 lea     esi, [eax+eax*4]
.text:0040AED5                 lea     ebx, [ebp+esi*2-30h]
.text:0040AED9                 mov     [esp+97Ch+var_934], ebx
.text:0040AEDD
.text:0040AEDD loc_40AEDD:                             ; CODE XREF: sub_408170+2D48↑j
.text:0040AEDD                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040AEE4                 jnz     short loc_40AE6E
.text:0040AEE6
.text:0040AEE6 loc_40AEE6:                             ; CODE XREF: sub_408170+2D3E↑j
.text:0040AEE6                 cmp     [esp+97Ch+var_8EC], 2Ch ; ','
.text:0040AEEE                 jz      loc_40B334
.text:0040AEF4                 mov     ebx, [esp+97Ch+var_934]
.text:0040AEF8                 mov     [esp+97Ch+var_938], ebx
.text:0040AEFC
.text:0040AEFC loc_40AEFC:                             ; CODE XREF: sub_408170+3256↓j
.text:0040AEFC                                         ; sub_408170+3264↓j
.text:0040AEFC                 mov     esi, [esp+97Ch+var_934]
.text:0040AF00                 test    esi, esi
.text:0040AF02                 js      short loc_40AF29
.text:0040AF04                 mov     ebp, [esp+97Ch+var_938]
.text:0040AF08                 cmp     [esp+97Ch+var_934], ebp
.text:0040AF0C                 jg      short loc_40AF29
.text:0040AF0E                 test    [esp+97Ch+arg_8], 1000h
.text:0040AF19                 jnz     loc_40AFCA
.text:0040AF1F                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:0040AF27                 jz      short loc_40AF86
.text:0040AF29
.text:0040AF29 loc_40AF29:                             ; CODE XREF: sub_408170+2CF8↑j
.text:0040AF29                                         ; sub_408170+2D92↑j ...
.text:0040AF29                 test    [esp+97Ch+arg_8], 200000h
.text:0040AF34                 jz      short loc_40AF5B
.text:0040AF36
.text:0040AF36 loc_40AF36:                             ; CODE XREF: sub_408170+31B1↓j
.text:0040AF36                 test    [esp+97Ch+arg_8], 1000h
.text:0040AF41                 mov     [esp+97Ch+var_8D0], ecx
.text:0040AF48                 mov     [esp+97Ch+var_8EC], 7Bh ; '{'
.text:0040AF50                 jz      def_40A41D      ; jumptable 0040A41D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040AF56                 jmp     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040AF5B ; ---------------------------------------------------------------------------
.text:0040AF5B
.text:0040AF5B loc_40AF5B:                             ; CODE XREF: sub_408170+2DC4↑j
.text:0040AF5B                 mov     edi, [esp+97Ch+Block]
.text:0040AF62                 mov     [esp+97Ch+Size], edi ; Block
.text:0040AF65                 call    free
.text:0040AF6A                 mov     ebp, [esp+97Ch+var_8F4]
.text:0040AF71                 cmp     [esp+97Ch+var_8D0], ebp
.text:0040AF78                 setnz   cl
.text:0040AF7B                 movzx   ebx, cl
.text:0040AF7E                 lea     ebp, [ebx+9]
.text:0040AF81                 jmp     loc_408586
.text:0040AF86 ; ---------------------------------------------------------------------------
.text:0040AF86
.text:0040AF86 loc_40AF86:                             ; CODE XREF: sub_408170+2DB7↑j
.text:0040AF86                 mov     eax, [esp+97Ch+var_8D0]
.text:0040AF8D                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040AF94                 jz      short loc_40AF29
.text:0040AF96                 movzx   edx, byte ptr [eax]
.text:0040AF99                 lea     ebx, [eax+1]
.text:0040AF9C                 mov     eax, [esp+97Ch+var_8F8]
.text:0040AFA3                 mov     [esp+97Ch+var_8D0], ebx
.text:0040AFAA                 test    eax, eax
.text:0040AFAC                 mov     [esp+97Ch+var_8EC], dl
.text:0040AFB3                 jz      short loc_40AFCA
.text:0040AFB5                 mov     esi, [esp+97Ch+var_8F8]
.text:0040AFBC                 movzx   edi, dl
.text:0040AFBF                 movzx   edx, byte ptr [edi+esi]
.text:0040AFC3                 mov     [esp+97Ch+var_8EC], dl
.text:0040AFCA
.text:0040AFCA loc_40AFCA:                             ; CODE XREF: sub_408170+2DA9↑j
.text:0040AFCA                                         ; sub_408170+2E43↑j
.text:0040AFCA                 cmp     [esp+97Ch+var_8EC], 7Dh ; '}'
.text:0040AFD2                 jnz     loc_40AF29
.text:0040AFD8                 mov     ebp, [esp+97Ch+var_900]
.text:0040AFDC                 test    ebp, ebp
.text:0040AFDE                 jz      loc_40B303
.text:0040AFE4
.text:0040AFE4 loc_40AFE4:                             ; CODE XREF: sub_408170+31BF↓j
.text:0040AFE4                 cmp     [esp+97Ch+var_938], 7FFFh
.text:0040AFEC                 jg      loc_40B2F2
.text:0040AFF2                 mov     eax, [esp+97Ch+var_938]
.text:0040AFF6                 test    eax, eax
.text:0040AFF8                 jnz     loc_40B10F
.text:0040AFFE                 mov     edx, [esp+97Ch+arg_C]
.text:0040B005                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B00C                 mov     esi, [esp+97Ch+var_950]
.text:0040B010                 mov     edi, [edx]
.text:0040B012                 mov     edx, [ebp+4]
.text:0040B015                 sub     esi, edi
.text:0040B017                 add     esi, 3
.text:0040B01A                 mov     ebx, edi
.text:0040B01C                 cmp     esi, edx
.text:0040B01E                 jbe     loc_40B0DB
.text:0040B024
.text:0040B024 loc_40B024:                             ; CODE XREF: sub_408170+2F65↓j
.text:0040B024                 cmp     edx, 10000h
.text:0040B02A                 mov     ebp, 0Fh
.text:0040B02F                 jz      loc_408586
.text:0040B035                 mov     esi, [esp+97Ch+arg_C]
.text:0040B03C                 lea     ecx, [edx+edx]
.text:0040B03F                 cmp     ecx, 10000h
.text:0040B045                 mov     [esi+4], ecx
.text:0040B048                 jbe     short loc_40B051
.text:0040B04A                 mov     dword ptr [esi+4], 10000h
.text:0040B051
.text:0040B051 loc_40B051:                             ; CODE XREF: sub_408170+2ED8↑j
.text:0040B051                 mov     eax, [esp+97Ch+arg_C]
.text:0040B058                 mov     ebp, 0Ch
.text:0040B05D                 mov     esi, [eax+4]
.text:0040B060                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B063                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040B067                 call    realloc
.text:0040B06C                 mov     edi, [esp+97Ch+arg_C]
.text:0040B073                 test    eax, eax
.text:0040B075                 mov     [edi], eax
.text:0040B077                 jz      loc_408586
.text:0040B07D                 cmp     ebx, eax
.text:0040B07F                 jz      short loc_40B0B5
.text:0040B081                 sub     eax, ebx
.text:0040B083                 mov     ebx, [esp+97Ch+var_908]
.text:0040B087                 add     [esp+97Ch+var_950], eax
.text:0040B08B                 add     [esp+97Ch+var_904], eax
.text:0040B08F                 test    ebx, ebx
.text:0040B091                 jz      short loc_40B097
.text:0040B093                 add     [esp+97Ch+var_908], eax
.text:0040B097
.text:0040B097 loc_40B097:                             ; CODE XREF: sub_408170+2F21↑j
.text:0040B097                 mov     edx, [esp+97Ch+var_900]
.text:0040B09B                 test    edx, edx
.text:0040B09D                 jz      short loc_40B0A3
.text:0040B09F                 add     [esp+97Ch+var_900], eax
.text:0040B0A3
.text:0040B0A3 loc_40B0A3:                             ; CODE XREF: sub_408170+2F2D↑j
.text:0040B0A3                 mov     ebp, [esp+97Ch+var_8FC]
.text:0040B0AA                 test    ebp, ebp
.text:0040B0AC                 jz      short loc_40B0B5
.text:0040B0AE                 add     [esp+97Ch+var_8FC], eax
.text:0040B0B5
.text:0040B0B5 loc_40B0B5:                             ; CODE XREF: sub_408170+2F0F↑j
.text:0040B0B5                                         ; sub_408170+2F3C↑j
.text:0040B0B5                 mov     esi, [esp+97Ch+arg_C]
.text:0040B0BC                 mov     eax, [esp+97Ch+arg_C]
.text:0040B0C3                 mov     ecx, [esp+97Ch+var_950]
.text:0040B0C7                 mov     edi, [esi]
.text:0040B0C9                 mov     edx, [eax+4]
.text:0040B0CC                 sub     ecx, edi
.text:0040B0CE                 add     ecx, 3
.text:0040B0D1                 mov     ebx, edi
.text:0040B0D3                 cmp     ecx, edx
.text:0040B0D5                 ja      loc_40B024
.text:0040B0DB
.text:0040B0DB loc_40B0DB:                             ; CODE XREF: sub_408170+2EAE↑j
.text:0040B0DB                 mov     [esp+97Ch+Size], 0Dh
.text:0040B0E2                 mov     ebx, [esp+97Ch+var_950]
.text:0040B0E6                 mov     ebp, [esp+97Ch+var_900]
.text:0040B0EA                 mov     edi, [esp+97Ch+var_900]
.text:0040B0EE                 mov     edx, ebx
.text:0040B0F0                 sub     edx, ebp
.text:0040B0F2                 mov     [esp+97Ch+var_970], ebx
.text:0040B0F6                 add     ebx, 3
.text:0040B0F9                 mov     [esp+97Ch+var_974], edx
.text:0040B0FD                 mov     [esp+97Ch+var_978], edi
.text:0040B101                 call    sub_404F90
.text:0040B106                 mov     [esp+97Ch+var_950], ebx
.text:0040B10A                 jmp     loc_408EB8
.text:0040B10F ; ---------------------------------------------------------------------------
.text:0040B10F
.text:0040B10F loc_40B10F:                             ; CODE XREF: sub_408170+2E88↑j
.text:0040B10F                 cmp     [esp+97Ch+var_938], 1
.text:0040B114                 mov     [esp+97Ch+var_93C], 14h
.text:0040B11C                 jg      loc_40B1DA
.text:0040B122                 mov     [esp+97Ch+var_93C], 0Ah
.text:0040B12A                 mov     ecx, [esp+97Ch+arg_C]
.text:0040B131                 mov     eax, [esp+97Ch+var_950]
.text:0040B135                 mov     edi, [ecx]
.text:0040B137                 mov     edx, [ecx+4]
.text:0040B13A                 sub     eax, edi
.text:0040B13C                 mov     ebx, edi
.text:0040B13E                 add     eax, 0Ah
.text:0040B141
.text:0040B141 loc_40B141:                             ; CODE XREF: sub_408170+308B↓j
.text:0040B141                 cmp     eax, edx
.text:0040B143                 jbe     loc_40B200
.text:0040B149                 cmp     edx, 10000h
.text:0040B14F                 mov     ebp, 0Fh
.text:0040B154                 jz      loc_408586
.text:0040B15A                 mov     esi, [esp+97Ch+arg_C]
.text:0040B161                 lea     ebp, [edx+edx]
.text:0040B164                 cmp     ebp, 10000h
.text:0040B16A                 mov     [esi+4], ebp
.text:0040B16D                 jbe     short loc_40B176
.text:0040B16F                 mov     dword ptr [esi+4], 10000h
.text:0040B176
.text:0040B176 loc_40B176:                             ; CODE XREF: sub_408170+2FFD↑j
.text:0040B176                 mov     eax, [esp+97Ch+arg_C]
.text:0040B17D                 mov     ebp, 0Ch
.text:0040B182                 mov     esi, [eax+4]
.text:0040B185                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B188                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040B18C                 call    realloc
.text:0040B191                 mov     edi, [esp+97Ch+arg_C]
.text:0040B198                 test    eax, eax
.text:0040B19A                 mov     [edi], eax
.text:0040B19C                 jz      loc_408586
.text:0040B1A2                 cmp     ebx, eax
.text:0040B1A4                 jz      short loc_40B1DA
.text:0040B1A6                 mov     edx, [esp+97Ch+var_908]
.text:0040B1AA                 sub     eax, ebx
.text:0040B1AC                 add     [esp+97Ch+var_950], eax
.text:0040B1B0                 add     [esp+97Ch+var_904], eax
.text:0040B1B4                 test    edx, edx
.text:0040B1B6                 jz      short loc_40B1BC
.text:0040B1B8                 add     [esp+97Ch+var_908], eax
.text:0040B1BC
.text:0040B1BC loc_40B1BC:                             ; CODE XREF: sub_408170+3046↑j
.text:0040B1BC                 mov     ebx, [esp+97Ch+var_900]
.text:0040B1C0                 test    ebx, ebx
.text:0040B1C2                 jz      short loc_40B1C8
.text:0040B1C4                 add     [esp+97Ch+var_900], eax
.text:0040B1C8
.text:0040B1C8 loc_40B1C8:                             ; CODE XREF: sub_408170+3052↑j
.text:0040B1C8                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040B1CF                 test    ecx, ecx
.text:0040B1D1                 jz      short loc_40B1DA
.text:0040B1D3                 add     [esp+97Ch+var_8FC], eax
.text:0040B1DA
.text:0040B1DA loc_40B1DA:                             ; CODE XREF: sub_408170+2FAC↑j
.text:0040B1DA                                         ; sub_408170+3034↑j ...
.text:0040B1DA                 mov     eax, [esp+97Ch+arg_C]
.text:0040B1E1                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B1E8                 mov     esi, [esp+97Ch+var_93C]
.text:0040B1EC                 mov     edi, [eax]
.text:0040B1EE                 mov     eax, [esp+97Ch+var_950]
.text:0040B1F2                 mov     edx, [ebp+4]
.text:0040B1F5                 mov     ebx, edi
.text:0040B1F7                 sub     eax, edi
.text:0040B1F9                 add     eax, esi
.text:0040B1FB                 jmp     loc_40B141
.text:0040B200 ; ---------------------------------------------------------------------------
.text:0040B200
.text:0040B200 loc_40B200:                             ; CODE XREF: sub_408170+2FD3↑j
.text:0040B200                 mov     edi, [esp+97Ch+var_950]
.text:0040B204                 mov     edx, [esp+97Ch+var_934]
.text:0040B208                 mov     [esp+97Ch+var_96C], edi
.text:0040B20C                 add     edi, 5
.text:0040B20F                 cmp     [esp+97Ch+var_938], 1
.text:0040B214                 mov     [esp+97Ch+var_970], edx
.text:0040B218                 jle     loc_40B2E2
.text:0040B21E                 mov     ebx, [esp+97Ch+var_900]
.text:0040B222                 mov     eax, edi
.text:0040B224                 sub     eax, ebx
.text:0040B226                 add     eax, 2
.text:0040B229
.text:0040B229 loc_40B229:                             ; CODE XREF: sub_408170+317D↓j
.text:0040B229                 mov     [esp+97Ch+var_974], eax
.text:0040B22D                 mov     esi, [esp+97Ch+var_900]
.text:0040B231                 mov     [esp+97Ch+Size], 15h
.text:0040B238                 mov     [esp+97Ch+var_978], esi
.text:0040B23C                 call    sub_404FD0
.text:0040B241                 mov     [esp+97Ch+var_950], edi
.text:0040B245                 mov     ebp, [esp+97Ch+var_934]
.text:0040B249                 mov     [esp+97Ch+var_96C], edi
.text:0040B24D                 mov     edi, [esp+97Ch+var_900]
.text:0040B251                 mov     [esp+97Ch+var_970], ebp
.text:0040B255                 mov     [esp+97Ch+var_974], 5
.text:0040B25D                 mov     [esp+97Ch+var_978], edi
.text:0040B261                 mov     [esp+97Ch+Size], 17h
.text:0040B268                 call    sub_404FD0
.text:0040B26D                 add     [esp+97Ch+var_950], 5
.text:0040B272                 cmp     [esp+97Ch+var_938], 1
.text:0040B277                 jle     loc_408EB8
.text:0040B27D                 mov     [esp+97Ch+Size], 16h
.text:0040B284                 mov     edx, [esp+97Ch+var_900]
.text:0040B288                 mov     esi, [esp+97Ch+var_950]
.text:0040B28C                 mov     edi, [esp+97Ch+var_938]
.text:0040B290                 mov     ebp, [esp+97Ch+var_950]
.text:0040B294                 sub     edx, esi
.text:0040B296                 add     edx, 2
.text:0040B299                 dec     edi
.text:0040B29A                 mov     [esp+97Ch+var_974], edx
.text:0040B29E                 mov     [esp+97Ch+var_978], ebp
.text:0040B2A2                 add     ebp, 5
.text:0040B2A5                 mov     ebx, ebp
.text:0040B2A7                 mov     [esp+97Ch+var_970], edi
.text:0040B2AB                 call    sub_404F60
.text:0040B2B0                 mov     [esp+97Ch+var_96C], ebp
.text:0040B2B4                 mov     ecx, [esp+97Ch+var_900]
.text:0040B2B8                 add     ebp, 5
.text:0040B2BB                 mov     [esp+97Ch+var_970], edi
.text:0040B2BF                 mov     eax, [esp+97Ch+var_900]
.text:0040B2C3                 mov     [esp+97Ch+Size], 17h
.text:0040B2CA                 sub     ebx, ecx
.text:0040B2CC                 mov     [esp+97Ch+var_974], ebx
.text:0040B2D0                 mov     [esp+97Ch+var_978], eax
.text:0040B2D4                 call    sub_404FD0
.text:0040B2D9                 mov     [esp+97Ch+var_950], ebp
.text:0040B2DD                 jmp     loc_408EB8
.text:0040B2E2 ; ---------------------------------------------------------------------------
.text:0040B2E2
.text:0040B2E2 loc_40B2E2:                             ; CODE XREF: sub_408170+30A8↑j
.text:0040B2E2                 mov     ecx, [esp+97Ch+var_900]
.text:0040B2E6                 mov     eax, edi
.text:0040B2E8                 sub     eax, ecx
.text:0040B2EA                 sub     eax, 3
.text:0040B2ED                 jmp     loc_40B229
.text:0040B2F2 ; ---------------------------------------------------------------------------
.text:0040B2F2
.text:0040B2F2 loc_40B2F2:                             ; CODE XREF: sub_408170+2E7C↑j
.text:0040B2F2                 mov     esi, [esp+97Ch+Block]
.text:0040B2F9                 mov     ebp, 0Ah
.text:0040B2FE                 jmp     loc_40A273
.text:0040B303 ; ---------------------------------------------------------------------------
.text:0040B303
.text:0040B303 loc_40B303:                             ; CODE XREF: sub_408170+2E6E↑j
.text:0040B303                 mov     ebx, [esp+97Ch+arg_8]
.text:0040B30A                 and     ebx, 200020h
.text:0040B310                 cmp     ebx, 20h ; ' '
.text:0040B313                 jz      loc_40974E
.text:0040B319                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:0040B321                 jz      loc_40AF36
.text:0040B327                 mov     ecx, [esp+97Ch+var_950]
.text:0040B32B                 mov     [esp+97Ch+var_900], ecx
.text:0040B32F                 jmp     loc_40AFE4
.text:0040B334 ; ---------------------------------------------------------------------------
.text:0040B334
.text:0040B334 loc_40B334:                             ; CODE XREF: sub_408170+2D7E↑j
.text:0040B334                 mov     edi, [esp+97Ch+var_8D0]
.text:0040B33B                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040B342                 jz      loc_40B3CC
.text:0040B348
.text:0040B348 loc_40B348:                             ; CODE XREF: sub_408170+324E↓j
.text:0040B348                 movzx   eax, byte ptr [edi]
.text:0040B34B                 inc     edi
.text:0040B34C                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040B353                 mov     [esp+97Ch+var_8D0], edi
.text:0040B35A                 test    ebx, ebx
.text:0040B35C                 mov     [esp+97Ch+var_8EC], al
.text:0040B363                 jz      short loc_40B37A
.text:0040B365                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040B36C                 movzx   esi, al
.text:0040B36F                 movzx   ebx, byte ptr [esi+ebp]
.text:0040B373                 mov     [esp+97Ch+var_8EC], bl
.text:0040B37A
.text:0040B37A loc_40B37A:                             ; CODE XREF: sub_408170+31F3↑j
.text:0040B37A                 movzx   edx, [esp+97Ch+var_8EC]
.text:0040B382                 sub     dl, 30h ; '0'
.text:0040B385                 cmp     dl, 9
.text:0040B388                 ja      short loc_40B3C0
.text:0040B38A                 cmp     [esp+97Ch+var_938], 7FFFh
.text:0040B392                 jg      short loc_40B3B7
.text:0040B394                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040B39C                 mov     edx, [esp+97Ch+var_938]
.text:0040B3A0                 shr     edx, 1Fh
.text:0040B3A3                 dec     edx
.text:0040B3A4                 and     [esp+97Ch+var_938], edx
.text:0040B3A8                 mov     eax, [esp+97Ch+var_938]
.text:0040B3AC                 lea     esi, [eax+eax*4]
.text:0040B3AF                 lea     ebx, [ebp+esi*2-30h]
.text:0040B3B3                 mov     [esp+97Ch+var_938], ebx
.text:0040B3B7
.text:0040B3B7 loc_40B3B7:                             ; CODE XREF: sub_408170+3222↑j
.text:0040B3B7                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040B3BE                 jnz     short loc_40B348
.text:0040B3C0
.text:0040B3C0 loc_40B3C0:                             ; CODE XREF: sub_408170+3218↑j
.text:0040B3C0                 mov     edi, [esp+97Ch+var_938]
.text:0040B3C4                 test    edi, edi
.text:0040B3C6                 jns     loc_40AEFC
.text:0040B3CC
.text:0040B3CC loc_40B3CC:                             ; CODE XREF: sub_408170+31D2↑j
.text:0040B3CC                 mov     [esp+97Ch+var_938], 7FFFh
.text:0040B3D4                 jmp     loc_40AEFC
.text:0040B3D9 ; ---------------------------------------------------------------------------
.text:0040B3D9
.text:0040B3D9 loc_40B3D9:                             ; CODE XREF: sub_408170+22AD↑j
.text:0040B3D9                                         ; DATA XREF: sub_408170:jpt_40A41D↑o
.text:0040B3D9                 mov     edi, [esp+97Ch+arg_8] ; jumptable 0040A41D case 124
.text:0040B3E0                 and     edi, 0FFFF8400h
.text:0040B3E6                 test    di, di
.text:0040B3E9                 jz      loc_4089E6
.text:0040B3EF                 jmp     def_40A41D      ; jumptable 0040A41D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040B3F4 ; ---------------------------------------------------------------------------
.text:0040B3F4
.text:0040B3F4 loc_40B3F4:                             ; CODE XREF: sub_408170+16F↑j
.text:0040B3F4                                         ; DATA XREF: sub_408170:jpt_4082DF↑o
.text:0040B3F4                 mov     edx, [esp+97Ch+arg_8] ; jumptable 004082DF case 123
.text:0040B3FB                 and     edx, 1200h
.text:0040B401                 cmp     edx, 1200h
.text:0040B407                 jnz     def_4082DF      ; jumptable 004082DF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040B40D                 jmp     loc_40AE48
.text:0040B412 ; ---------------------------------------------------------------------------
.text:0040B412
.text:0040B412 loc_40B412:                             ; CODE XREF: sub_408170+16F↑j
.text:0040B412                                         ; DATA XREF: sub_408170:jpt_4082DF↑o
.text:0040B412                 mov     esi, [esp+97Ch+arg_8] ; jumptable 004082DF case 124
.text:0040B419                 and     esi, 0FFFF8000h
.text:0040B41F                 test    si, si
.text:0040B422                 jmp     loc_4089E0
.text:0040B427 ; ---------------------------------------------------------------------------
.text:0040B427
.text:0040B427 loc_40B427:                             ; CODE XREF: sub_408170+F9↑j
.text:0040B427                 mov     edi, [esp+97Ch+Block]
.text:0040B42E                 mov     ebp, 0Ch
.text:0040B433                 jmp     loc_408710
.text:0040B438 ; ---------------------------------------------------------------------------
.text:0040B438
.text:0040B438 loc_40B438:                             ; CODE XREF: sub_408170+D6↑j
.text:0040B438                 mov     [esp+97Ch+Size], 20h ; ' ' ; Size
.text:0040B43F                 call    malloc
.text:0040B444                 mov     ecx, [esp+97Ch+arg_C]
.text:0040B44B                 mov     [ecx], eax
.text:0040B44D                 jmp     loc_40825E
.text:0040B452 ; ---------------------------------------------------------------------------
.text:0040B452
.text:0040B452 loc_40B452:                             ; CODE XREF: sub_408170+CC↑j
.text:0040B452                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B459                 mov     edi, [ebp+0]
.text:0040B45C                 jmp     loc_40827D
.text:0040B461 ; ---------------------------------------------------------------------------
.text:0040B461
.text:0040B461 loc_40B461:                             ; CODE XREF: sub_408170+BA↑j
.text:0040B461                 mov     [esp+97Ch+var_974], 100h ; Size
.text:0040B469                 xor     ebx, ebx
.text:0040B46B                 mov     [esp+97Ch+var_978], 0 ; Val
.text:0040B473                 mov     [esp+97Ch+Size], offset byte_410150 ; void *
.text:0040B47A                 call    memset
.text:0040B47F                 nop
.text:0040B480
.text:0040B480 loc_40B480:                             ; CODE XREF: sub_408170+333D↓j
.text:0040B480                 mov     esi, ds:__mb_cur_max
.text:0040B486                 cmp     dword ptr [esi], 1
.text:0040B489                 jz      short loc_40B4C6
.text:0040B48B                 mov     [esp+97Ch+var_978], 107h ; Type
.text:0040B493                 mov     [esp+97Ch+Size], ebx ; C
.text:0040B496                 call    _isctype
.text:0040B49B
.text:0040B49B loc_40B49B:                             ; CODE XREF: sub_408170+3368↓j
.text:0040B49B                 test    eax, eax
.text:0040B49D                 jz      short loc_40B4A6
.text:0040B49F                 mov     ds:byte_410150[ebx], 1
.text:0040B4A6
.text:0040B4A6 loc_40B4A6:                             ; CODE XREF: sub_408170+332D↑j
.text:0040B4A6                 inc     ebx
.text:0040B4A7                 cmp     ebx, 0FFh
.text:0040B4AD                 jle     short loc_40B480
.text:0040B4AF                 mov     ds:byte_4101AF, 1
.text:0040B4B6                 mov     ebx, 1
.text:0040B4BB                 mov     ds:dword_410140, ebx
.text:0040B4C1                 jmp     loc_408230
.text:0040B4C6 ; ---------------------------------------------------------------------------
.text:0040B4C6
.text:0040B4C6 loc_40B4C6:                             ; CODE XREF: sub_408170+3319↑j
.text:0040B4C6                 mov     ebp, ds:_pctype
.text:0040B4CC                 mov     edi, [ebp+0]
.text:0040B4CF                 movzx   eax, word ptr [edi+ebx*2]
.text:0040B4D3                 and     eax, 107h
.text:0040B4D8                 jmp     short loc_40B49B
.text:0040B4D8 sub_408170      endp
.text:0040B4D8
.text:0040B4D8 ; ---------------------------------------------------------------------------
.text:0040B4DA                 align 10h
.text:0040B4E0
.text:0040B4E0 ; =============== S U B R O U T I N E =======================================
.text:0040B4E0
.text:0040B4E0
.text:0040B4E0 sub_40B4E0      proc near               ; CODE XREF: .text:00407E25↑p
.text:0040B4E0                                         ; .text:00407F66↑p ...
.text:0040B4E0
.text:0040B4E0 var_4C          = dword ptr -4Ch
.text:0040B4E0 var_48          = dword ptr -48h
.text:0040B4E0 var_44          = dword ptr -44h
.text:0040B4E0 var_40          = dword ptr -40h
.text:0040B4E0 var_3C          = dword ptr -3Ch
.text:0040B4E0 var_38          = dword ptr -38h
.text:0040B4E0 var_34          = dword ptr -34h
.text:0040B4E0 var_30          = dword ptr -30h
.text:0040B4E0 var_20          = dword ptr -20h
.text:0040B4E0 var_1C          = dword ptr -1Ch
.text:0040B4E0 var_18          = dword ptr -18h
.text:0040B4E0 var_14          = dword ptr -14h
.text:0040B4E0 arg_0           = dword ptr  4
.text:0040B4E0 arg_4           = dword ptr  8
.text:0040B4E0 arg_8           = dword ptr  0Ch
.text:0040B4E0 arg_C           = dword ptr  10h
.text:0040B4E0 arg_10          = dword ptr  14h
.text:0040B4E0 arg_14          = dword ptr  18h
.text:0040B4E0 arg_18          = dword ptr  1Ch
.text:0040B4E0 arg_1C          = dword ptr  20h
.text:0040B4E0 arg_20          = dword ptr  24h
.text:0040B4E0
.text:0040B4E0                 push    ebp
.text:0040B4E1                 push    edi
.text:0040B4E2                 push    esi
.text:0040B4E3                 push    ebx
.text:0040B4E4                 sub     esp, 3Ch
.text:0040B4E7                 mov     edi, [esp+4Ch+arg_0]
.text:0040B4EB                 mov     ebx, [esp+4Ch+arg_14]
.text:0040B4EF                 mov     ecx, [esp+4Ch+arg_10]
.text:0040B4F3                 mov     edx, [edi+14h]
.text:0040B4F6                 mov     esi, [esp+4Ch+arg_18]
.text:0040B4FA                 mov     ebp, [edi+10h]
.text:0040B4FD                 mov     [esp+4Ch+var_14], edx
.text:0040B501                 mov     edx, [esp+4Ch+arg_8]
.text:0040B505                 lea     eax, [esi+ebx]
.text:0040B508                 add     edx, ecx
.text:0040B50A                 test    ebx, ebx
.text:0040B50C                 mov     [esp+4Ch+var_18], edx
.text:0040B510                 js      loc_40B6B0
.text:0040B516                 cmp     ebx, edx
.text:0040B518                 jg      loc_40B6B0
.text:0040B51E                 test    eax, eax
.text:0040B520                 js      loc_40B771
.text:0040B526                 cmp     eax, [esp+4Ch+var_18]
.text:0040B52A                 jle     short loc_40B532
.text:0040B52C                 mov     esi, [esp+4Ch+var_18]
.text:0040B530                 sub     esi, ebx
.text:0040B532
.text:0040B532 loc_40B532:                             ; CODE XREF: sub_40B4E0+4A↑j
.text:0040B532                                         ; sub_40B4E0+295↓j
.text:0040B532                 mov     eax, [edi+8]
.text:0040B535                 test    eax, eax
.text:0040B537                 jz      short loc_40B560
.text:0040B539                 test    esi, esi
.text:0040B53B                 jle     short loc_40B560
.text:0040B53D                 mov     ecx, [edi]
.text:0040B53F                 movzx   eax, byte ptr [ecx]
.text:0040B542                 cmp     al, 0Bh
.text:0040B544                 jz      loc_40B75A
.text:0040B54A                 cmp     al, 9
.text:0040B54C                 jz      loc_40B750
.text:0040B552                 lea     esi, [esi+0]
.text:0040B559                 lea     edi, [edi+0]
.text:0040B560
.text:0040B560 loc_40B560:                             ; CODE XREF: sub_40B4E0+57↑j
.text:0040B560                                         ; sub_40B4E0+5B↑j ...
.text:0040B560                 test    ebp, ebp
.text:0040B562                 jz      loc_40B620
.text:0040B568                 test    byte ptr [edi+1Ch], 8
.text:0040B56C                 jz      loc_40B735
.text:0040B572
.text:0040B572 loc_40B572:                             ; CODE XREF: sub_40B4E0+1AF↓j
.text:0040B572                                         ; sub_40B4E0+1B6↓j ...
.text:0040B572                 test    ebp, ebp
.text:0040B574                 jz      loc_40B620
.text:0040B57A                 cmp     ebx, [esp+4Ch+var_18]
.text:0040B57E                 jge     loc_40B620
.text:0040B584                 test    byte ptr [edi+1Ch], 1
.text:0040B588                 jnz     loc_40B620
.text:0040B58E                 test    esi, esi
.text:0040B590                 jle     loc_40B6E4
.text:0040B596                 cmp     ebx, [esp+4Ch+arg_8]
.text:0040B59A                 mov     [esp+4Ch+var_20], 0
.text:0040B5A2                 mov     [esp+4Ch+var_1C], esi
.text:0040B5A6                 jge     loc_40B6D2
.text:0040B5AC                 lea     edx, [esi+ebx]
.text:0040B5AF                 cmp     edx, [esp+4Ch+arg_8]
.text:0040B5B3                 jl      short loc_40B5C3
.text:0040B5B5                 mov     ecx, [esp+4Ch+arg_8]
.text:0040B5B9                 mov     edx, esi
.text:0040B5BB                 sub     ecx, ebx
.text:0040B5BD                 sub     edx, ecx
.text:0040B5BF                 mov     [esp+4Ch+var_20], edx
.text:0040B5C3
.text:0040B5C3 loc_40B5C3:                             ; CODE XREF: sub_40B4E0+D3↑j
.text:0040B5C3                 mov     edx, [esp+4Ch+arg_4]
.text:0040B5C7                 add     edx, ebx
.text:0040B5C9
.text:0040B5C9 loc_40B5C9:                             ; CODE XREF: sub_40B4E0+1FF↓j
.text:0040B5C9                 mov     ecx, [esp+4Ch+var_14]
.text:0040B5CD                 test    ecx, ecx
.text:0040B5CF                 jz      loc_40B6B7
.text:0040B5D5                 cmp     esi, [esp+4Ch+var_20]
.text:0040B5D9                 jle     short loc_40B609
.text:0040B5DB                 movzx   eax, byte ptr [edx]
.text:0040B5DE                 inc     edx
.text:0040B5DF                 mov     ecx, [esp+4Ch+var_14]
.text:0040B5E3                 movzx   ecx, byte ptr [eax+ecx]
.text:0040B5E7                 cmp     byte ptr [ecx+ebp], 0
.text:0040B5EB                 jnz     short loc_40B609
.text:0040B5ED                 lea     esi, [esi+0]
.text:0040B5F0
.text:0040B5F0 loc_40B5F0:                             ; CODE XREF: sub_40B4E0+127↓j
.text:0040B5F0                 dec     esi
.text:0040B5F1                 cmp     esi, [esp+4Ch+var_20]
.text:0040B5F5                 jle     short loc_40B609
.text:0040B5F7                 movzx   eax, byte ptr [edx]
.text:0040B5FA                 inc     edx
.text:0040B5FB                 mov     ecx, [esp+4Ch+var_14]
.text:0040B5FF                 movzx   eax, byte ptr [eax+ecx]
.text:0040B603                 cmp     byte ptr [eax+ebp], 0
.text:0040B607                 jz      short loc_40B5F0
.text:0040B609
.text:0040B609 loc_40B609:                             ; CODE XREF: sub_40B4E0+F9↑j
.text:0040B609                                         ; sub_40B4E0+10B↑j ...
.text:0040B609                 sub     [esp+4Ch+var_1C], esi
.text:0040B60D                 mov     edx, [esp+4Ch+var_1C]
.text:0040B611                 add     ebx, edx
.text:0040B613                 lea     esi, [esi+0]
.text:0040B619                 lea     edi, [edi+0]
.text:0040B620
.text:0040B620 loc_40B620:                             ; CODE XREF: sub_40B4E0+82↑j
.text:0040B620                                         ; sub_40B4E0+94↑j ...
.text:0040B620                 test    esi, esi
.text:0040B622                 js      short loc_40B62A
.text:0040B624                 cmp     ebx, [esp+4Ch+var_18]
.text:0040B628                 jz      short loc_40B6A0
.text:0040B62A
.text:0040B62A loc_40B62A:                             ; CODE XREF: sub_40B4E0+142↑j
.text:0040B62A                                         ; sub_40B4E0+1C2↓j ...
.text:0040B62A                 mov     [esp+4Ch+var_38], ebx
.text:0040B62E                 mov     edx, [esp+4Ch+arg_20]
.text:0040B632                 mov     ecx, [esp+4Ch+arg_1C]
.text:0040B636                 mov     [esp+4Ch+var_4C], edi
.text:0040B639                 mov     eax, [esp+4Ch+arg_10]
.text:0040B63D                 mov     [esp+4Ch+var_30], edx
.text:0040B641                 mov     edx, [esp+4Ch+arg_C]
.text:0040B645                 mov     [esp+4Ch+var_34], ecx
.text:0040B649                 mov     ecx, [esp+4Ch+arg_8]
.text:0040B64D                 mov     [esp+4Ch+var_3C], eax
.text:0040B651                 mov     eax, [esp+4Ch+arg_4]
.text:0040B655                 mov     [esp+4Ch+var_40], edx
.text:0040B659                 mov     [esp+4Ch+var_44], ecx
.text:0040B65D                 mov     [esp+4Ch+var_48], eax
.text:0040B661                 call    sub_405260
.text:0040B666                 test    eax, eax
.text:0040B668                 mov     edx, ebx
.text:0040B66A                 js      short loc_40B676
.text:0040B66C
.text:0040B66C loc_40B66C:                             ; CODE XREF: sub_40B4E0+19E↓j
.text:0040B66C                                         ; sub_40B4E0+1A7↓j ...
.text:0040B66C                 add     esp, 3Ch
.text:0040B66F                 mov     eax, edx
.text:0040B671                 pop     ebx
.text:0040B672                 pop     esi
.text:0040B673                 pop     edi
.text:0040B674                 pop     ebp
.text:0040B675                 retn
.text:0040B676 ; ---------------------------------------------------------------------------
.text:0040B676
.text:0040B676 loc_40B676:                             ; CODE XREF: sub_40B4E0+18A↑j
.text:0040B676                 cmp     eax, 0FFFFFFFEh
.text:0040B679                 mov     edx, 0FFFFFFFEh
.text:0040B67E                 jz      short loc_40B66C
.text:0040B680
.text:0040B680 loc_40B680:                             ; CODE XREF: sub_40B4E0+241↓j
.text:0040B680                 test    esi, esi
.text:0040B682                 mov     edx, 0FFFFFFFFh
.text:0040B687                 jz      short loc_40B66C
.text:0040B689                 test    esi, esi
.text:0040B68B                 jle     short loc_40B694
.text:0040B68D                 dec     esi
.text:0040B68E                 inc     ebx
.text:0040B68F                 jmp     loc_40B572
.text:0040B694 ; ---------------------------------------------------------------------------
.text:0040B694
.text:0040B694 loc_40B694:                             ; CODE XREF: sub_40B4E0+1AB↑j
.text:0040B694                 inc     esi
.text:0040B695                 dec     ebx
.text:0040B696                 jmp     loc_40B572
.text:0040B696 ; ---------------------------------------------------------------------------
.text:0040B69B                 align 10h
.text:0040B6A0
.text:0040B6A0 loc_40B6A0:                             ; CODE XREF: sub_40B4E0+148↑j
.text:0040B6A0                 test    ebp, ebp
.text:0040B6A2                 jz      short loc_40B62A
.text:0040B6A4                 test    byte ptr [edi+1Ch], 1
.text:0040B6A8                 jnz     short loc_40B62A
.text:0040B6AA                 lea     esi, [esi+0]
.text:0040B6B0
.text:0040B6B0 loc_40B6B0:                             ; CODE XREF: sub_40B4E0+30↑j
.text:0040B6B0                                         ; sub_40B4E0+38↑j
.text:0040B6B0                 mov     edx, 0FFFFFFFFh
.text:0040B6B5                 jmp     short loc_40B66C
.text:0040B6B7 ; ---------------------------------------------------------------------------
.text:0040B6B7
.text:0040B6B7 loc_40B6B7:                             ; CODE XREF: sub_40B4E0+EF↑j
.text:0040B6B7                                         ; sub_40B4E0+1F0↓j
.text:0040B6B7                 cmp     esi, [esp+4Ch+var_20]
.text:0040B6BB                 jle     loc_40B609
.text:0040B6C1                 movzx   ecx, byte ptr [edx]
.text:0040B6C4                 inc     edx
.text:0040B6C5                 cmp     byte ptr [ecx+ebp], 0
.text:0040B6C9                 jnz     loc_40B609
.text:0040B6CF                 dec     esi
.text:0040B6D0                 jmp     short loc_40B6B7
.text:0040B6D2 ; ---------------------------------------------------------------------------
.text:0040B6D2
.text:0040B6D2 loc_40B6D2:                             ; CODE XREF: sub_40B4E0+C6↑j
.text:0040B6D2                 mov     ecx, [esp+4Ch+arg_C]
.text:0040B6D6                 mov     eax, [esp+4Ch+arg_8]
.text:0040B6DA                 sub     ecx, eax
.text:0040B6DC                 lea     edx, [ebx+ecx]
.text:0040B6DF                 jmp     loc_40B5C9
.text:0040B6E4 ; ---------------------------------------------------------------------------
.text:0040B6E4
.text:0040B6E4 loc_40B6E4:                             ; CODE XREF: sub_40B4E0+B0↑j
.text:0040B6E4                 mov     ecx, [esp+4Ch+arg_8]
.text:0040B6E8                 test    ecx, ecx
.text:0040B6EA                 jz      short loc_40B6F2
.text:0040B6EC                 cmp     ebx, [esp+4Ch+arg_8]
.text:0040B6F0                 jl      short loc_40B72B
.text:0040B6F2
.text:0040B6F2 loc_40B6F2:                             ; CODE XREF: sub_40B4E0+20A↑j
.text:0040B6F2                 mov     edx, [esp+4Ch+arg_8]
.text:0040B6F6                 mov     eax, ebx
.text:0040B6F8                 mov     ecx, [esp+4Ch+arg_C]
.text:0040B6FC                 sub     eax, edx
.text:0040B6FE                 movzx   eax, byte ptr [eax+ecx]
.text:0040B702
.text:0040B702 loc_40B702:                             ; CODE XREF: sub_40B4E0+253↓j
.text:0040B702                 mov     ecx, [esp+4Ch+var_14]
.text:0040B706                 test    ecx, ecx
.text:0040B708                 jz      short loc_40B726
.text:0040B70A                 mov     edx, [esp+4Ch+var_14]
.text:0040B70E                 movzx   ecx, al
.text:0040B711                 movzx   eax, byte ptr [ecx+edx]
.text:0040B715
.text:0040B715 loc_40B715:                             ; CODE XREF: sub_40B4E0+249↓j
.text:0040B715                 lea     edx, [eax+ebp]
.text:0040B718                 cmp     byte ptr [edx], 0
.text:0040B71B                 jnz     loc_40B620
.text:0040B721                 jmp     loc_40B680
.text:0040B726 ; ---------------------------------------------------------------------------
.text:0040B726
.text:0040B726 loc_40B726:                             ; CODE XREF: sub_40B4E0+228↑j
.text:0040B726                 movzx   eax, al
.text:0040B729                 jmp     short loc_40B715
.text:0040B72B ; ---------------------------------------------------------------------------
.text:0040B72B
.text:0040B72B loc_40B72B:                             ; CODE XREF: sub_40B4E0+210↑j
.text:0040B72B                 mov     edx, [esp+4Ch+arg_4]
.text:0040B72F                 movzx   eax, byte ptr [ebx+edx]
.text:0040B733                 jmp     short loc_40B702
.text:0040B735 ; ---------------------------------------------------------------------------
.text:0040B735
.text:0040B735 loc_40B735:                             ; CODE XREF: sub_40B4E0+8C↑j
.text:0040B735                 mov     [esp+4Ch+var_4C], edi
.text:0040B738                 call    sub_407B90
.text:0040B73D                 cmp     eax, 0FFFFFFFEh
.text:0040B740                 mov     edx, 0FFFFFFFEh
.text:0040B745                 jnz     loc_40B572
.text:0040B74B                 jmp     loc_40B66C
.text:0040B750 ; ---------------------------------------------------------------------------
.text:0040B750
.text:0040B750 loc_40B750:                             ; CODE XREF: sub_40B4E0+6C↑j
.text:0040B750                 test    byte ptr [edi+1Ch], 80h
.text:0040B754                 jnz     loc_40B560
.text:0040B75A
.text:0040B75A loc_40B75A:                             ; CODE XREF: sub_40B4E0+64↑j
.text:0040B75A                 test    ebx, ebx
.text:0040B75C                 mov     edx, 0FFFFFFFFh
.text:0040B761                 jg      loc_40B66C
.text:0040B767                 mov     esi, 1
.text:0040B76C                 jmp     loc_40B560
.text:0040B771 ; ---------------------------------------------------------------------------
.text:0040B771
.text:0040B771 loc_40B771:                             ; CODE XREF: sub_40B4E0+40↑j
.text:0040B771                 mov     esi, ebx
.text:0040B773                 neg     esi
.text:0040B775                 jmp     loc_40B532
.text:0040B775 sub_40B4E0      endp
.text:0040B775
.text:0040B775 ; ---------------------------------------------------------------------------
.text:0040B77A                 align 10h
.text:0040B780
.text:0040B780 ; =============== S U B R O U T I N E =======================================
.text:0040B780
.text:0040B780
.text:0040B780 sub_40B780      proc near               ; CODE XREF: sub_407B90↑j
.text:0040B780
.text:0040B780 Size            = dword ptr -6Ch
.text:0040B780 Val             = dword ptr -68h
.text:0040B780 var_64          = dword ptr -64h
.text:0040B780 var_4D          = byte ptr -4Dh
.text:0040B780 var_4C          = byte ptr -4Ch
.text:0040B780 var_30          = dword ptr -30h
.text:0040B780 Src             = dword ptr -2Ch
.text:0040B780 var_28          = dword ptr -28h
.text:0040B780 var_24          = dword ptr -24h
.text:0040B780 arg_0           = dword ptr  4
.text:0040B780
.text:0040B780                 push    ebp
.text:0040B781                 push    edi
.text:0040B782                 push    esi
.text:0040B783                 push    ebx
.text:0040B784                 sub     esp, 5Ch
.text:0040B787                 mov     ebp, [esp+6Ch+arg_0]
.text:0040B78B                 mov     [esp+6Ch+var_4C], 1
.text:0040B790                 mov     [esp+6Ch+var_4D], 0
.text:0040B795                 mov     ecx, [ebp+0]
.text:0040B798                 mov     eax, [ebp+8]
.text:0040B79B                 mov     esi, [ebp+10h]
.text:0040B79E                 mov     edi, ecx
.text:0040B7A0                 add     eax, ecx
.text:0040B7A2                 mov     [esp+6Ch+var_30], eax
.text:0040B7A6                 mov     [esp+6Ch+Size], 14h ; Size
.text:0040B7AD                 call    malloc
.text:0040B7B2                 mov     [esp+6Ch+Src], eax
.text:0040B7B6                 test    eax, eax
.text:0040B7B8                 mov     edx, 0FFFFFFFEh
.text:0040B7BD                 jz      loc_40B8A2
.text:0040B7C3                 mov     [esp+6Ch+var_28], 5
.text:0040B7CB                 mov     [esp+6Ch+var_24], 0
.text:0040B7D3                 mov     [esp+6Ch+var_64], 100h ; Size
.text:0040B7DB                 mov     [esp+6Ch+Val], 0 ; Val
.text:0040B7E3                 mov     [esp+6Ch+Size], esi ; void *
.text:0040B7E6                 call    memset
.text:0040B7EB                 movzx   edx, byte ptr [ebp+1Ch]
.text:0040B7EF                 or      dl, 8
.text:0040B7F2                 and     dl, 0FEh
.text:0040B7F5                 mov     [ebp+1Ch], dl
.text:0040B7F8
.text:0040B7F8 loc_40B7F8:                             ; CODE XREF: sub_40B780+9A↓j
.text:0040B7F8                                         ; sub_40B780+13D↓j ...
.text:0040B7F8                 cmp     edi, [esp+6Ch+var_30] ; jumptable 0040B81A cases 0,9-12,20,26-29
.text:0040B7FC                 jz      loc_40BB00
.text:0040B802                 movzx   eax, byte ptr [edi]
.text:0040B805                 cmp     al, 1
.text:0040B807                 jz      loc_40BB00
.text:0040B80D                 movzx   eax, al
.text:0040B810                 inc     edi
.text:0040B811                 cmp     eax, 1Dh        ; switch 30 cases
.text:0040B814                 ja      def_40B81A      ; jumptable 0040B81A default case, case 1
.text:0040B81A                 jmp     ds:jpt_40B81A[eax*4] ; switch jump
.text:0040B81A ; ---------------------------------------------------------------------------
.text:0040B821                 align 4
.text:0040B824 jpt_40B81A      dd offset loc_40B7F8    ; DATA XREF: sub_40B780+9A↑r
.text:0040B824                 dd offset def_40B81A    ; jump table for switch statement
.text:0040B824                 dd offset loc_40B8AC
.text:0040B824                 dd offset loc_40B8C2
.text:0040B824                 dd offset loc_40B8F0
.text:0040B824                 dd offset loc_40B928
.text:0040B824                 dd offset loc_40B98C
.text:0040B824                 dd offset loc_40B98C
.text:0040B824                 dd offset loc_40B89C
.text:0040B824                 dd offset loc_40B7F8
.text:0040B824                 dd offset loc_40B7F8
.text:0040B824                 dd offset loc_40B7F8
.text:0040B824                 dd offset loc_40B7F8
.text:0040B824                 dd offset loc_40BA55
.text:0040B824                 dd offset loc_40BA55
.text:0040B824                 dd offset loc_40B994
.text:0040B824                 dd offset loc_40B994
.text:0040B824                 dd offset loc_40BA55
.text:0040B824                 dd offset loc_40BA55
.text:0040B824                 dd offset loc_40BA55
.text:0040B824                 dd offset loc_40B7F8
.text:0040B824                 dd offset loc_40BA2E
.text:0040B824                 dd offset loc_40BA55
.text:0040B824                 dd offset loc_40BAB3
.text:0040B824                 dd offset loc_40BABB
.text:0040B824                 dd offset loc_40BADD
.text:0040B824                 dd offset loc_40B7F8
.text:0040B824                 dd offset loc_40B7F8
.text:0040B824                 dd offset loc_40B7F8
.text:0040B824                 dd offset loc_40B7F8
.text:0040B89C ; ---------------------------------------------------------------------------
.text:0040B89C
.text:0040B89C loc_40B89C:                             ; CODE XREF: sub_40B780+9A↑j
.text:0040B89C                                         ; DATA XREF: sub_40B780:jpt_40B81A↑o
.text:0040B89C                 or      byte ptr [ebp+1Ch], 1 ; jumptable 0040B81A case 8
.text:0040B8A0
.text:0040B8A0 loc_40B8A0:                             ; CODE XREF: sub_40B780+16E↓j
.text:0040B8A0                                         ; sub_40B780+3C8↓j
.text:0040B8A0                 xor     edx, edx
.text:0040B8A2
.text:0040B8A2 loc_40B8A2:                             ; CODE XREF: sub_40B780+3D↑j
.text:0040B8A2                                         ; sub_40B780+2A3↓j
.text:0040B8A2                 add     esp, 5Ch
.text:0040B8A5                 mov     eax, edx
.text:0040B8A7                 pop     ebx
.text:0040B8A8                 pop     esi
.text:0040B8A9                 pop     edi
.text:0040B8AA                 pop     ebp
.text:0040B8AB                 retn
.text:0040B8AC ; ---------------------------------------------------------------------------
.text:0040B8AC
.text:0040B8AC loc_40B8AC:                             ; CODE XREF: sub_40B780+9A↑j
.text:0040B8AC                                         ; DATA XREF: sub_40B780:jpt_40B81A↑o
.text:0040B8AC                 movzx   ecx, byte ptr [edi+1] ; jumptable 0040B81A case 2
.text:0040B8B0                 mov     byte ptr [ecx+esi], 1
.text:0040B8B4
.text:0040B8B4 loc_40B8B4:                             ; CODE XREF: sub_40B780+166↓j
.text:0040B8B4                                         ; sub_40B780+16C↓j ...
.text:0040B8B4                 mov     [esp+6Ch+var_4C], 0
.text:0040B8B9                 mov     edi, [esp+6Ch+var_30]
.text:0040B8BD                 jmp     loc_40B7F8      ; jumptable 0040B81A cases 0,9-12,20,26-29
.text:0040B8C2 ; ---------------------------------------------------------------------------
.text:0040B8C2
.text:0040B8C2 loc_40B8C2:                             ; CODE XREF: sub_40B780+9A↑j
.text:0040B8C2                                         ; DATA XREF: sub_40B780:jpt_40B81A↑o
.text:0040B8C2                 movsx   eax, byte ptr [esi+0Ah] ; jumptable 0040B81A case 3
.text:0040B8C6                 xor     ebx, ebx
.text:0040B8C8                 nop
.text:0040B8C9                 lea     esi, [esi+0]
.text:0040B8D0
.text:0040B8D0 loc_40B8D0:                             ; CODE XREF: sub_40B780+15B↓j
.text:0040B8D0                 mov     byte ptr [ebx+esi], 1
.text:0040B8D4                 inc     ebx
.text:0040B8D5                 cmp     ebx, 0FFh
.text:0040B8DB                 jle     short loc_40B8D0
.text:0040B8DD                 test    byte ptr [ebp+0Ch], 40h
.text:0040B8E1                 jnz     short loc_40B8E8
.text:0040B8E3                 mov     [esi+0Ah], al
.text:0040B8E6                 jmp     short loc_40B8B4
.text:0040B8E8 ; ---------------------------------------------------------------------------
.text:0040B8E8
.text:0040B8E8 loc_40B8E8:                             ; CODE XREF: sub_40B780+161↑j
.text:0040B8E8                 test    byte ptr [ebp+1Ch], 1
.text:0040B8EC                 jz      short loc_40B8B4
.text:0040B8EE                 jmp     short loc_40B8A0
.text:0040B8F0 ; ---------------------------------------------------------------------------
.text:0040B8F0
.text:0040B8F0 loc_40B8F0:                             ; CODE XREF: sub_40B780+9A↑j
.text:0040B8F0                                         ; DATA XREF: sub_40B780:jpt_40B81A↑o
.text:0040B8F0                 movzx   edx, byte ptr [edi] ; jumptable 0040B81A case 4
.text:0040B8F3                 inc     edi
.text:0040B8F4                 lea     ebx, ds:0FFFFFFFFh[edx*8]
.text:0040B8FB                 test    ebx, ebx
.text:0040B8FD                 js      short loc_40B8B4
.text:0040B8FF
.text:0040B8FF loc_40B8FF:                             ; CODE XREF: sub_40B780+19F↓j
.text:0040B8FF                 test    ebx, ebx
.text:0040B901                 mov     eax, ebx
.text:0040B903                 js      short loc_40B923
.text:0040B905
.text:0040B905 loc_40B905:                             ; CODE XREF: sub_40B780+1A6↓j
.text:0040B905                 sar     eax, 3
.text:0040B908                 mov     ecx, ebx
.text:0040B90A                 movzx   edx, byte ptr [eax+edi]
.text:0040B90E                 shl     eax, 3
.text:0040B911                 sub     ecx, eax
.text:0040B913                 sar     edx, cl
.text:0040B915                 test    dl, 1
.text:0040B918                 jz      short loc_40B91E
.text:0040B91A                 mov     byte ptr [ebx+esi], 1
.text:0040B91E
.text:0040B91E loc_40B91E:                             ; CODE XREF: sub_40B780+198↑j
.text:0040B91E                 dec     ebx
.text:0040B91F                 jns     short loc_40B8FF
.text:0040B921                 jmp     short loc_40B8B4
.text:0040B923 ; ---------------------------------------------------------------------------
.text:0040B923
.text:0040B923 loc_40B923:                             ; CODE XREF: sub_40B780+183↑j
.text:0040B923                 lea     eax, [ebx+7]
.text:0040B926                 jmp     short loc_40B905
.text:0040B928 ; ---------------------------------------------------------------------------
.text:0040B928
.text:0040B928 loc_40B928:                             ; CODE XREF: sub_40B780+9A↑j
.text:0040B928                                         ; DATA XREF: sub_40B780:jpt_40B81A↑o
.text:0040B928                 movzx   edx, byte ptr [edi] ; jumptable 0040B81A case 5
.text:0040B92B                 movzx   ecx, dl
.text:0040B92E                 lea     ebx, ds:0[ecx*8]
.text:0040B935                 cmp     ebx, 0FFh
.text:0040B93B                 jg      short loc_40B94D
.text:0040B93D
.text:0040B93D loc_40B93D:                             ; CODE XREF: sub_40B780+1C8↓j
.text:0040B93D                 mov     byte ptr [ebx+esi], 1
.text:0040B941                 inc     ebx
.text:0040B942                 cmp     ebx, 0FFh
.text:0040B948                 jle     short loc_40B93D
.text:0040B94A                 movzx   edx, byte ptr [edi]
.text:0040B94D
.text:0040B94D loc_40B94D:                             ; CODE XREF: sub_40B780+1BB↑j
.text:0040B94D                 movzx   ecx, dl
.text:0040B950                 inc     edi
.text:0040B951                 lea     ebx, ds:0FFFFFFFFh[ecx*8]
.text:0040B958                 test    ebx, ebx
.text:0040B95A                 js      loc_40B8B4
.text:0040B960
.text:0040B960 loc_40B960:                             ; CODE XREF: sub_40B780+200↓j
.text:0040B960                 test    ebx, ebx
.text:0040B962                 mov     eax, ebx
.text:0040B964                 js      short loc_40B987
.text:0040B966
.text:0040B966 loc_40B966:                             ; CODE XREF: sub_40B780+20A↓j
.text:0040B966                 sar     eax, 3
.text:0040B969                 mov     ecx, ebx
.text:0040B96B                 movzx   edx, byte ptr [eax+edi]
.text:0040B96F                 shl     eax, 3
.text:0040B972                 sub     ecx, eax
.text:0040B974                 sar     edx, cl
.text:0040B976                 test    dl, 1
.text:0040B979                 jnz     short loc_40B97F
.text:0040B97B                 mov     byte ptr [ebx+esi], 1
.text:0040B97F
.text:0040B97F loc_40B97F:                             ; CODE XREF: sub_40B780+1F9↑j
.text:0040B97F                 dec     ebx
.text:0040B980                 jns     short loc_40B960
.text:0040B982                 jmp     loc_40B8B4
.text:0040B987 ; ---------------------------------------------------------------------------
.text:0040B987
.text:0040B987 loc_40B987:                             ; CODE XREF: sub_40B780+1E4↑j
.text:0040B987                 lea     eax, [ebx+7]
.text:0040B98A                 jmp     short loc_40B966
.text:0040B98C ; ---------------------------------------------------------------------------
.text:0040B98C
.text:0040B98C loc_40B98C:                             ; CODE XREF: sub_40B780+9A↑j
.text:0040B98C                                         ; sub_40B780+251↓j
.text:0040B98C                                         ; DATA XREF: ...
.text:0040B98C                 add     edi, 2          ; jumptable 0040B81A cases 6,7
.text:0040B98F                 jmp     loc_40B7F8      ; jumptable 0040B81A cases 0,9-12,20,26-29
.text:0040B994 ; ---------------------------------------------------------------------------
.text:0040B994
.text:0040B994 loc_40B994:                             ; CODE XREF: sub_40B780+9A↑j
.text:0040B994                                         ; sub_40B780+2D0↓j
.text:0040B994                                         ; DATA XREF: ...
.text:0040B994                 movsx   ecx, byte ptr [edi+1] ; jumptable 0040B81A cases 15,16
.text:0040B998                 movzx   edx, byte ptr [edi]
.text:0040B99B                 add     edi, 2
.text:0040B99E                 shl     ecx, 8
.text:0040B9A1                 add     edx, ecx
.text:0040B9A3                 lea     ebx, [edx+edi]
.text:0040B9A6                 cmp     ebx, [esp+6Ch+var_30]
.text:0040B9AA                 jnb     short loc_40BA28
.text:0040B9AC                 mov     ecx, [esp+6Ch+var_24]
.text:0040B9B0                 cmp     ecx, [esp+6Ch+var_28]
.text:0040B9B4                 jz      short loc_40B9D3
.text:0040B9B6
.text:0040B9B6 loc_40B9B6:                             ; CODE XREF: sub_40B780+29C↓j
.text:0040B9B6                 mov     edx, [esp+6Ch+Src]
.text:0040B9BA                 mov     [edx+ecx*4], ebx
.text:0040B9BD                 inc     [esp+6Ch+var_24]
.text:0040B9C1
.text:0040B9C1 loc_40B9C1:                             ; CODE XREF: sub_40B780+2AC↓j
.text:0040B9C1                 cmp     [esp+6Ch+var_4D], 0
.text:0040B9C6                 jz      loc_40B7F8      ; jumptable 0040B81A cases 0,9-12,20,26-29
.text:0040B9CC                 mov     [esp+6Ch+var_4D], 0
.text:0040B9D1                 jmp     short loc_40B98C ; jumptable 0040B81A cases 6,7
.text:0040B9D3 ; ---------------------------------------------------------------------------
.text:0040B9D3
.text:0040B9D3 loc_40B9D3:                             ; CODE XREF: sub_40B780+234↑j
.text:0040B9D3                 mov     eax, dword_40F020
.text:0040B9D8                 lea     edx, [eax+eax*8]
.text:0040B9DB                 lea     edx, [eax+edx*2]
.text:0040B9DE                 cmp     ecx, edx
.text:0040B9E0                 ja      short loc_40BA1E
.text:0040B9E2                 lea     edx, ds:0[ecx*8]
.text:0040B9E9                 mov     [esp+6Ch+Size], edx ; Size
.text:0040B9EC                 call    malloc
.text:0040B9F1                 mov     [esp+6Ch+Size], eax ; void *
.text:0040B9F4                 mov     ecx, [esp+6Ch+var_28]
.text:0040B9F8                 shl     ecx, 2
.text:0040B9FB                 mov     [esp+6Ch+var_64], ecx ; Size
.text:0040B9FF                 mov     ecx, [esp+6Ch+Src]
.text:0040BA03                 mov     [esp+6Ch+Val], ecx ; Src
.text:0040BA07                 call    memcpy
.text:0040BA0C                 mov     [esp+6Ch+Src], eax
.text:0040BA10                 test    eax, eax
.text:0040BA12                 jz      short loc_40BA1E
.text:0040BA14                 shl     [esp+6Ch+var_28], 1
.text:0040BA18                 mov     ecx, [esp+6Ch+var_24]
.text:0040BA1C                 jmp     short loc_40B9B6
.text:0040BA1E ; ---------------------------------------------------------------------------
.text:0040BA1E
.text:0040BA1E loc_40BA1E:                             ; CODE XREF: sub_40B780+260↑j
.text:0040BA1E                                         ; sub_40B780+292↑j
.text:0040BA1E                 mov     edx, 0FFFFFFFEh
.text:0040BA23                 jmp     loc_40B8A2
.text:0040BA28 ; ---------------------------------------------------------------------------
.text:0040BA28
.text:0040BA28 loc_40BA28:                             ; CODE XREF: sub_40B780+22A↑j
.text:0040BA28                 or      byte ptr [ebp+1Ch], 1
.text:0040BA2C                 jmp     short loc_40B9C1
.text:0040BA2E ; ---------------------------------------------------------------------------
.text:0040BA2E
.text:0040BA2E loc_40BA2E:                             ; CODE XREF: sub_40B780+9A↑j
.text:0040BA2E                                         ; DATA XREF: sub_40B780:jpt_40B81A↑o
.text:0040BA2E                 add     edi, 2          ; jumptable 0040B81A case 21
.text:0040BA31                 movsx   ecx, byte ptr [edi+1]
.text:0040BA35                 movzx   ebx, byte ptr [edi]
.text:0040BA38                 add     edi, 2
.text:0040BA3B                 shl     ecx, 8
.text:0040BA3E                 add     ebx, ecx
.text:0040BA40                 test    ebx, ebx
.text:0040BA42                 jnz     loc_40B7F8      ; jumptable 0040B81A cases 0,9-12,20,26-29
.text:0040BA48                 mov     [esp+6Ch+var_4D], 1
.text:0040BA4D                 sub     edi, 4
.text:0040BA50                 jmp     loc_40B994      ; jumptable 0040B81A cases 15,16
.text:0040BA55 ; ---------------------------------------------------------------------------
.text:0040BA55
.text:0040BA55 loc_40BA55:                             ; CODE XREF: sub_40B780+9A↑j
.text:0040BA55                                         ; DATA XREF: sub_40B780:jpt_40B81A↑o
.text:0040BA55                 movsx   ebx, byte ptr [edi+1] ; jumptable 0040B81A cases 13,14,17-19,22
.text:0040BA59                 movzx   ecx, byte ptr [edi]
.text:0040BA5C                 shl     ebx, 8
.text:0040BA5F                 add     ecx, ebx
.text:0040BA61                 test    ecx, ecx
.text:0040BA63                 lea     edi, [ecx+edi+2]
.text:0040BA67                 jg      loc_40B7F8      ; jumptable 0040B81A cases 0,9-12,20,26-29
.text:0040BA6D                 movzx   eax, byte ptr [edi]
.text:0040BA70                 cmp     al, 0Fh
.text:0040BA72                 jz      short loc_40BA7C
.text:0040BA74                 cmp     al, 15h
.text:0040BA76                 jnz     loc_40B7F8      ; jumptable 0040B81A cases 0,9-12,20,26-29
.text:0040BA7C
.text:0040BA7C loc_40BA7C:                             ; CODE XREF: sub_40B780+2F2↑j
.text:0040BA7C                 inc     edi
.text:0040BA7D                 movsx   ecx, byte ptr [edi+1]
.text:0040BA81                 movzx   edx, byte ptr [edi]
.text:0040BA84                 shl     ecx, 8
.text:0040BA87                 add     edx, ecx
.text:0040BA89                 lea     edi, [edx+edi+2]
.text:0040BA8D                 mov     edx, [esp+6Ch+var_24]
.text:0040BA91                 test    edx, edx
.text:0040BA93                 jz      loc_40B7F8      ; jumptable 0040B81A cases 0,9-12,20,26-29
.text:0040BA99                 mov     ebx, [esp+6Ch+Src]
.text:0040BA9D                 cmp     [ebx+edx*4-4], edi
.text:0040BAA1                 jnz     loc_40B7F8      ; jumptable 0040B81A cases 0,9-12,20,26-29
.text:0040BAA7                 lea     eax, [edx-1]
.text:0040BAAA                 mov     [esp+6Ch+var_24], eax
.text:0040BAAE                 jmp     loc_40B7F8      ; jumptable 0040B81A cases 0,9-12,20,26-29
.text:0040BAB3 ; ---------------------------------------------------------------------------
.text:0040BAB3
.text:0040BAB3 loc_40BAB3:                             ; CODE XREF: sub_40B780+9A↑j
.text:0040BAB3                                         ; DATA XREF: sub_40B780:jpt_40B81A↑o
.text:0040BAB3                 add     edi, 4          ; jumptable 0040B81A case 23
.text:0040BAB6                 jmp     loc_40B7F8      ; jumptable 0040B81A cases 0,9-12,20,26-29
.text:0040BABB ; ---------------------------------------------------------------------------
.text:0040BABB
.text:0040BABB loc_40BABB:                             ; CODE XREF: sub_40B780+9A↑j
.text:0040BABB                                         ; DATA XREF: sub_40B780:jpt_40B81A↑o
.text:0040BABB                 xor     ebx, ebx        ; jumptable 0040B81A case 24
.text:0040BABD
.text:0040BABD loc_40BABD:                             ; CODE XREF: sub_40B780+350↓j
.text:0040BABD                 movzx   edi, bl
.text:0040BAC0                 cmp     ds:byte_410150[edi], 1
.text:0040BAC7                 jz      short loc_40BAD7
.text:0040BAC9
.text:0040BAC9 loc_40BAC9:                             ; CODE XREF: sub_40B780+35B↓j
.text:0040BAC9                 inc     ebx
.text:0040BACA                 cmp     ebx, 0FFh
.text:0040BAD0                 jle     short loc_40BABD
.text:0040BAD2                 jmp     loc_40B8B4
.text:0040BAD7 ; ---------------------------------------------------------------------------
.text:0040BAD7
.text:0040BAD7 loc_40BAD7:                             ; CODE XREF: sub_40B780+347↑j
.text:0040BAD7                 mov     byte ptr [ebx+esi], 1
.text:0040BADB                 jmp     short loc_40BAC9
.text:0040BADD ; ---------------------------------------------------------------------------
.text:0040BADD
.text:0040BADD loc_40BADD:                             ; CODE XREF: sub_40B780+9A↑j
.text:0040BADD                                         ; DATA XREF: sub_40B780:jpt_40B81A↑o
.text:0040BADD                 xor     ebx, ebx        ; jumptable 0040B81A case 25
.text:0040BADF
.text:0040BADF loc_40BADF:                             ; CODE XREF: sub_40B780+376↓j
.text:0040BADF                 movzx   edx, bl
.text:0040BAE2                 cmp     ds:byte_410150[edx], 1
.text:0040BAE9                 jz      short loc_40BAEF
.text:0040BAEB                 mov     byte ptr [ebx+esi], 1
.text:0040BAEF
.text:0040BAEF loc_40BAEF:                             ; CODE XREF: sub_40B780+369↑j
.text:0040BAEF                 inc     ebx
.text:0040BAF0                 cmp     ebx, 0FFh
.text:0040BAF6                 jle     short loc_40BADF
.text:0040BAF8                 jmp     loc_40B8B4
.text:0040BAF8 ; ---------------------------------------------------------------------------
.text:0040BAFD                 align 10h
.text:0040BB00
.text:0040BB00 loc_40BB00:                             ; CODE XREF: sub_40B780+7C↑j
.text:0040BB00                                         ; sub_40B780+87↑j
.text:0040BB00                 mov     ecx, [esp+6Ch+var_24]
.text:0040BB04                 test    ecx, ecx
.text:0040BB06                 jz      short loc_40BB33
.text:0040BB08                 movzx   ebx, byte ptr [ebp+1Ch]
.text:0040BB0C                 dec     ecx
.text:0040BB0D                 movzx   eax, [esp+6Ch+var_4C]
.text:0040BB12                 or      eax, ebx
.text:0040BB14                 and     al, 1
.text:0040BB16                 and     bl, 0FEh
.text:0040BB19                 or      bl, al
.text:0040BB1B                 mov     [ebp+1Ch], bl
.text:0040BB1E                 mov     ebx, [esp+6Ch+Src]
.text:0040BB22                 mov     [esp+6Ch+var_4C], 1
.text:0040BB27                 mov     [esp+6Ch+var_24], ecx
.text:0040BB2B                 mov     edi, [ebx+ecx*4]
.text:0040BB2E                 jmp     loc_40B7F8      ; jumptable 0040B81A cases 0,9-12,20,26-29
.text:0040BB33 ; ---------------------------------------------------------------------------
.text:0040BB33
.text:0040BB33 loc_40BB33:                             ; CODE XREF: sub_40B780+386↑j
.text:0040BB33                 movzx   ebx, byte ptr [ebp+1Ch]
.text:0040BB37                 movzx   eax, [esp+6Ch+var_4C]
.text:0040BB3C                 or      eax, ebx
.text:0040BB3E                 and     al, 1
.text:0040BB40                 and     bl, 0FEh
.text:0040BB43                 or      bl, al
.text:0040BB45                 mov     [ebp+1Ch], bl
.text:0040BB48                 jmp     loc_40B8A0
.text:0040BB4D ; ---------------------------------------------------------------------------
.text:0040BB4D
.text:0040BB4D def_40B81A:                             ; CODE XREF: sub_40B780+94↑j
.text:0040BB4D                                         ; sub_40B780+9A↑j
.text:0040BB4D                                         ; DATA XREF: ...
.text:0040BB4D                 call    abort           ; jumptable 0040B81A default case, case 1
.text:0040BB4D sub_40B780      endp
.text:0040BB4D
.text:0040BB4D ; ---------------------------------------------------------------------------
.text:0040BB52                 align 10h
.text:0040BB60 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_40BB80+3↓o
.text:0040BB71 ; const char aS[]
.text:0040BB71 aS              db '%s',0               ; DATA XREF: sub_40BB80+10↓o
.text:0040BB74                 align 10h
.text:0040BB80
.text:0040BB80 ; =============== S U B R O U T I N E =======================================
.text:0040BB80
.text:0040BB80 ; Attributes: noreturn
.text:0040BB80
.text:0040BB80 sub_40BB80      proc near               ; CODE XREF: sub_402C14:loc_402EC6↑p
.text:0040BB80                                         ; sub_404D70:loc_404F2F↑p ...
.text:0040BB80
.text:0040BB80 Code            = dword ptr -1Ch
.text:0040BB80 ErrorMessage    = dword ptr -18h
.text:0040BB80 var_14          = dword ptr -14h
.text:0040BB80 var_10          = byte ptr -10h
.text:0040BB80
.text:0040BB80                 sub     esp, 1Ch
.text:0040BB83                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040BB8A                 call    ds:libintl_gettext
.text:0040BB90                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:0040BB98                 mov     edx, Code
.text:0040BB9E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040BBA6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040BBAA                 mov     [esp+1Ch+Code], edx ; Code
.text:0040BBAD                 call    sub_40D830
.text:0040BBB2                 call    abort
.text:0040BBB2 sub_40BB80      endp
.text:0040BBB2
.text:0040BBB2 ; ---------------------------------------------------------------------------
.text:0040BBB7                 align 10h
.text:0040BBC0
.text:0040BBC0 ; =============== S U B R O U T I N E =======================================
.text:0040BBC0
.text:0040BBC0
.text:0040BBC0 sub_40BBC0      proc near               ; CODE XREF: sub_401500+35↑p
.text:0040BBC0                                         ; sub_401610+495↑p ...
.text:0040BBC0
.text:0040BBC0 var_1C          = dword ptr -1Ch
.text:0040BBC0 var_18          = dword ptr -18h
.text:0040BBC0 var_14          = dword ptr -14h
.text:0040BBC0 var_10          = dword ptr -10h
.text:0040BBC0 arg_0           = dword ptr  4
.text:0040BBC0 arg_4           = dword ptr  8
.text:0040BBC0 arg_8           = dword ptr  0Ch
.text:0040BBC0
.text:0040BBC0                 push    edi
.text:0040BBC1                 push    esi
.text:0040BBC2                 push    ebx
.text:0040BBC3                 sub     esp, 10h
.text:0040BBC6                 mov     esi, [esp+1Ch+arg_4]
.text:0040BBCA                 mov     edx, [esp+1Ch+arg_8]
.text:0040BBCE                 mov     ebx, [esp+1Ch+arg_0]
.text:0040BBD2                 test    esi, esi
.text:0040BBD4                 mov     byte ptr [edx+15h], 0
.text:0040BBD8                 lea     edi, [edx+15h]
.text:0040BBDB                 js      short loc_40BC30
.text:0040BBDD                 lea     esi, [esi+0]
.text:0040BBE0
.text:0040BBE0 loc_40BBE0:                             ; CODE XREF: sub_40BBC0+65↓j
.text:0040BBE0                 mov     [esp+1Ch+var_1C], ebx
.text:0040BBE3                 dec     edi
.text:0040BBE4                 mov     [esp+1Ch+var_18], esi
.text:0040BBE8                 mov     [esp+1Ch+var_14], 0Ah
.text:0040BBF0                 mov     [esp+1Ch+var_10], 0
.text:0040BBF8                 call    sub_40E300
.text:0040BBFD                 add     al, 30h ; '0'
.text:0040BBFF                 mov     [edi], al
.text:0040BC01                 mov     [esp+1Ch+var_1C], ebx
.text:0040BC04                 mov     [esp+1Ch+var_18], esi
.text:0040BC08                 mov     [esp+1Ch+var_14], 0Ah
.text:0040BC10                 mov     [esp+1Ch+var_10], 0
.text:0040BC18                 call    sub_40E1A0
.text:0040BC1D                 mov     ebx, eax
.text:0040BC1F                 mov     esi, edx
.text:0040BC21                 mov     eax, edx
.text:0040BC23                 or      eax, ebx
.text:0040BC25                 jnz     short loc_40BBE0
.text:0040BC27
.text:0040BC27 loc_40BC27:                             ; CODE XREF: sub_40BBC0+BB↓j
.text:0040BC27                 add     esp, 10h
.text:0040BC2A                 mov     eax, edi
.text:0040BC2C                 pop     ebx
.text:0040BC2D                 pop     esi
.text:0040BC2E                 pop     edi
.text:0040BC2F                 retn
.text:0040BC30 ; ---------------------------------------------------------------------------
.text:0040BC30
.text:0040BC30 loc_40BC30:                             ; CODE XREF: sub_40BBC0+1B↑j
.text:0040BC30                                         ; sub_40BBC0+B5↓j
.text:0040BC30                 mov     [esp+1Ch+var_1C], ebx
.text:0040BC33                 dec     edi
.text:0040BC34                 mov     [esp+1Ch+var_18], esi
.text:0040BC38                 mov     [esp+1Ch+var_14], 0Ah
.text:0040BC40                 mov     [esp+1Ch+var_10], 0
.text:0040BC48                 call    sub_40E300
.text:0040BC4D                 mov     cl, 30h ; '0'
.text:0040BC4F                 sub     cl, al
.text:0040BC51                 mov     [edi], cl
.text:0040BC53                 mov     [esp+1Ch+var_1C], ebx
.text:0040BC56                 mov     [esp+1Ch+var_18], esi
.text:0040BC5A                 mov     [esp+1Ch+var_14], 0Ah
.text:0040BC62                 mov     [esp+1Ch+var_10], 0
.text:0040BC6A                 call    sub_40E1A0
.text:0040BC6F                 mov     ebx, eax
.text:0040BC71                 mov     esi, edx
.text:0040BC73                 or      edx, ebx
.text:0040BC75                 jnz     short loc_40BC30
.text:0040BC77                 dec     edi
.text:0040BC78                 mov     byte ptr [edi], 2Dh ; '-'
.text:0040BC7B                 jmp     short loc_40BC27
.text:0040BC7B sub_40BBC0      endp
.text:0040BC7B
.text:0040BC7B ; ---------------------------------------------------------------------------
.text:0040BC7D                 align 10h
.text:0040BC80                 sub     esp, 0Ch
.text:0040BC83                 xor     edx, edx
.text:0040BC85                 mov     ecx, [esp+14h]
.text:0040BC89                 mov     [esp+8], ebx
.text:0040BC8D                 mov     eax, 0FFFFFFFFh
.text:0040BC92                 mov     ebx, [esp+10h]
.text:0040BC96                 div     ecx
.text:0040BC98                 cmp     eax, ebx
.text:0040BC9A                 jb      short loc_40BCB9
.text:0040BC9C                 mov     edx, ebx
.text:0040BC9E                 imul    edx, ecx
.text:0040BCA1                 mov     [esp], edx
.text:0040BCA4                 call    malloc
.text:0040BCA9                 test    eax, eax
.text:0040BCAB                 jz      short loc_40BCB5
.text:0040BCAD
.text:0040BCAD loc_40BCAD:                             ; CODE XREF: .text:0040BCB7↓j
.text:0040BCAD                 mov     ebx, [esp+8]
.text:0040BCB1                 add     esp, 0Ch
.text:0040BCB4                 retn
.text:0040BCB5 ; ---------------------------------------------------------------------------
.text:0040BCB5
.text:0040BCB5 loc_40BCB5:                             ; CODE XREF: .text:0040BCAB↑j
.text:0040BCB5                 test    ebx, ebx
.text:0040BCB7                 jz      short loc_40BCAD
.text:0040BCB9
.text:0040BCB9 loc_40BCB9:                             ; CODE XREF: .text:0040BC9A↑j
.text:0040BCB9                 call    sub_40BB80
.text:0040BCB9 ; ---------------------------------------------------------------------------
.text:0040BCBE                 align 10h
.text:0040BCC0
.text:0040BCC0 ; =============== S U B R O U T I N E =======================================
.text:0040BCC0
.text:0040BCC0
.text:0040BCC0 ; int __cdecl sub_40BCC0(size_t)
.text:0040BCC0 sub_40BCC0      proc near               ; CODE XREF: sub_401610+45↑p
.text:0040BCC0                                         ; sub_401610+357↑p ...
.text:0040BCC0
.text:0040BCC0 Size            = dword ptr -0Ch
.text:0040BCC0 var_4           = dword ptr -4
.text:0040BCC0 arg_0           = dword ptr  4
.text:0040BCC0
.text:0040BCC0                 sub     esp, 0Ch
.text:0040BCC3                 mov     [esp+0Ch+var_4], ebx
.text:0040BCC7                 mov     ebx, [esp+0Ch+arg_0]
.text:0040BCCB                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040BCCE                 call    malloc
.text:0040BCD3                 test    eax, eax
.text:0040BCD5                 jz      short loc_40BCE0
.text:0040BCD7
.text:0040BCD7 loc_40BCD7:                             ; CODE XREF: sub_40BCC0+22↓j
.text:0040BCD7                 mov     ebx, [esp+0Ch+var_4]
.text:0040BCDB                 add     esp, 0Ch
.text:0040BCDE                 retn
.text:0040BCDE ; ---------------------------------------------------------------------------
.text:0040BCDF                 align 10h
.text:0040BCE0
.text:0040BCE0 loc_40BCE0:                             ; CODE XREF: sub_40BCC0+15↑j
.text:0040BCE0                 test    ebx, ebx
.text:0040BCE2                 jz      short loc_40BCD7
.text:0040BCE4                 call    sub_40BB80
.text:0040BCE4 sub_40BCC0      endp
.text:0040BCE4
.text:0040BCE4 ; ---------------------------------------------------------------------------
.text:0040BCE9                 align 10h
.text:0040BCF0                 sub     esp, 1Ch
.text:0040BCF3                 xor     edx, edx
.text:0040BCF5                 mov     eax, 0FFFFFFFFh
.text:0040BCFA                 mov     [esp+14h], ebx
.text:0040BCFE                 mov     ecx, [esp+20h]
.text:0040BD02                 mov     ebx, [esp+28h]
.text:0040BD06                 mov     [esp+18h], esi
.text:0040BD0A                 mov     esi, [esp+24h]
.text:0040BD0E                 div     ebx
.text:0040BD10                 cmp     eax, esi
.text:0040BD12                 jb      short loc_40BD44
.text:0040BD14                 mov     [esp], ecx
.text:0040BD17                 mov     edx, esi
.text:0040BD19                 imul    edx, ebx
.text:0040BD1C                 mov     [esp+4], edx
.text:0040BD20                 call    realloc
.text:0040BD25                 test    eax, eax
.text:0040BD27                 mov     ecx, eax
.text:0040BD29                 jz      short loc_40BD40
.text:0040BD2B
.text:0040BD2B loc_40BD2B:                             ; CODE XREF: .text:0040BD42↓j
.text:0040BD2B                 mov     ebx, [esp+14h]
.text:0040BD2F                 mov     eax, ecx
.text:0040BD31                 mov     esi, [esp+18h]
.text:0040BD35                 add     esp, 1Ch
.text:0040BD38                 retn
.text:0040BD38 ; ---------------------------------------------------------------------------
.text:0040BD39                 align 10h
.text:0040BD40
.text:0040BD40 loc_40BD40:                             ; CODE XREF: .text:0040BD29↑j
.text:0040BD40                 test    esi, esi
.text:0040BD42                 jz      short loc_40BD2B
.text:0040BD44
.text:0040BD44 loc_40BD44:                             ; CODE XREF: .text:0040BD12↑j
.text:0040BD44                 call    sub_40BB80
.text:0040BD44 ; ---------------------------------------------------------------------------
.text:0040BD49                 align 10h
.text:0040BD50
.text:0040BD50 ; =============== S U B R O U T I N E =======================================
.text:0040BD50
.text:0040BD50
.text:0040BD50 ; int __cdecl sub_40BD50(void *, size_t)
.text:0040BD50 sub_40BD50      proc near               ; CODE XREF: sub_404D70+5B↑p
.text:0040BD50
.text:0040BD50 Block           = dword ptr -0Ch
.text:0040BD50 Size            = dword ptr -8
.text:0040BD50 var_4           = dword ptr -4
.text:0040BD50 arg_0           = dword ptr  4
.text:0040BD50 arg_4           = dword ptr  8
.text:0040BD50
.text:0040BD50                 sub     esp, 0Ch
.text:0040BD53                 mov     edx, [esp+0Ch+arg_0]
.text:0040BD57                 mov     [esp+0Ch+var_4], ebx
.text:0040BD5B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040BD5F                 mov     [esp+0Ch+Block], edx ; Block
.text:0040BD62                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040BD66                 call    realloc
.text:0040BD6B                 test    eax, eax
.text:0040BD6D                 jz      short loc_40BD77
.text:0040BD6F
.text:0040BD6F loc_40BD6F:                             ; CODE XREF: sub_40BD50+29↓j
.text:0040BD6F                 mov     ebx, [esp+0Ch+var_4]
.text:0040BD73                 add     esp, 0Ch
.text:0040BD76                 retn
.text:0040BD77 ; ---------------------------------------------------------------------------
.text:0040BD77
.text:0040BD77 loc_40BD77:                             ; CODE XREF: sub_40BD50+1D↑j
.text:0040BD77                 test    ebx, ebx
.text:0040BD79                 jz      short loc_40BD6F
.text:0040BD7B                 call    sub_40BB80
.text:0040BD7B sub_40BD50      endp
.text:0040BD7B
.text:0040BD80 ; ---------------------------------------------------------------------------
.text:0040BD80                 jmp     sub_40BED0
.text:0040BD80 ; ---------------------------------------------------------------------------
.text:0040BD85                 align 10h
.text:0040BD90                 sub     esp, 0Ch
.text:0040BD93                 mov     edx, [esp+14h]
.text:0040BD97                 mov     dword ptr [esp+8], 1
.text:0040BD9F                 mov     [esp+4], edx
.text:0040BDA3                 mov     edx, [esp+10h]
.text:0040BDA7                 mov     [esp], edx
.text:0040BDAA                 call    sub_40BED0
.text:0040BDAF                 add     esp, 0Ch
.text:0040BDB2                 retn
.text:0040BDB2 ; ---------------------------------------------------------------------------
.text:0040BDB3                 align 10h
.text:0040BDC0                 sub     esp, 1Ch
.text:0040BDC3                 mov     [esp+18h], ebx
.text:0040BDC7                 mov     ebx, [esp+20h]
.text:0040BDCB                 mov     [esp], ebx
.text:0040BDCE                 call    malloc
.text:0040BDD3                 test    eax, eax
.text:0040BDD5                 jz      short loc_40BDF3
.text:0040BDD7
.text:0040BDD7 loc_40BDD7:                             ; CODE XREF: .text:0040BDF5↓j
.text:0040BDD7                 mov     [esp+8], ebx
.text:0040BDDB                 mov     dword ptr [esp+4], 0
.text:0040BDE3                 mov     [esp], eax
.text:0040BDE6                 call    memset
.text:0040BDEB                 mov     ebx, [esp+18h]
.text:0040BDEF                 add     esp, 1Ch
.text:0040BDF2                 retn
.text:0040BDF3 ; ---------------------------------------------------------------------------
.text:0040BDF3
.text:0040BDF3 loc_40BDF3:                             ; CODE XREF: .text:0040BDD5↑j
.text:0040BDF3                 test    ebx, ebx
.text:0040BDF5                 jz      short loc_40BDD7
.text:0040BDF7                 call    sub_40BB80
.text:0040BDF7 ; ---------------------------------------------------------------------------
.text:0040BDFC                 align 10h
.text:0040BE00                 sub     esp, 0Ch
.text:0040BE03                 xor     edx, edx
.text:0040BE05                 mov     ecx, [esp+14h]
.text:0040BE09                 mov     [esp+8], ebx
.text:0040BE0D                 mov     eax, 0FFFFFFFFh
.text:0040BE12                 mov     ebx, [esp+10h]
.text:0040BE16                 div     ecx
.text:0040BE18                 cmp     eax, ebx
.text:0040BE1A                 jb      short loc_40BE38
.text:0040BE1C                 mov     [esp+4], ecx
.text:0040BE20                 mov     [esp], ebx
.text:0040BE23                 call    calloc
.text:0040BE28                 test    eax, eax
.text:0040BE2A                 jz      short loc_40BE34
.text:0040BE2C
.text:0040BE2C loc_40BE2C:                             ; CODE XREF: .text:0040BE36↓j
.text:0040BE2C                 mov     ebx, [esp+8]
.text:0040BE30                 add     esp, 0Ch
.text:0040BE33                 retn
.text:0040BE34 ; ---------------------------------------------------------------------------
.text:0040BE34
.text:0040BE34 loc_40BE34:                             ; CODE XREF: .text:0040BE2A↑j
.text:0040BE34                 test    ebx, ebx
.text:0040BE36                 jz      short loc_40BE2C
.text:0040BE38
.text:0040BE38 loc_40BE38:                             ; CODE XREF: .text:0040BE1A↑j
.text:0040BE38                 call    sub_40BB80
.text:0040BE38 ; ---------------------------------------------------------------------------
.text:0040BE3D                 align 10h
.text:0040BE40                 sub     esp, 1Ch
.text:0040BE43                 mov     [esp+18h], ebx
.text:0040BE47                 mov     ebx, [esp+24h]
.text:0040BE4B                 mov     [esp], ebx
.text:0040BE4E                 call    malloc
.text:0040BE53                 test    eax, eax
.text:0040BE55                 mov     edx, eax
.text:0040BE57                 jz      short loc_40BE75
.text:0040BE59
.text:0040BE59 loc_40BE59:                             ; CODE XREF: .text:0040BE77↓j
.text:0040BE59                 mov     [esp+8], ebx
.text:0040BE5D                 mov     ecx, [esp+20h]
.text:0040BE61                 mov     [esp], edx
.text:0040BE64                 mov     [esp+4], ecx
.text:0040BE68                 call    memcpy
.text:0040BE6D                 mov     ebx, [esp+18h]
.text:0040BE71                 add     esp, 1Ch
.text:0040BE74                 retn
.text:0040BE75 ; ---------------------------------------------------------------------------
.text:0040BE75
.text:0040BE75 loc_40BE75:                             ; CODE XREF: .text:0040BE57↑j
.text:0040BE75                 test    ebx, ebx
.text:0040BE77                 jz      short loc_40BE59
.text:0040BE79                 call    sub_40BB80
.text:0040BE79 ; ---------------------------------------------------------------------------
.text:0040BE7E                 align 10h
.text:0040BE80
.text:0040BE80 ; =============== S U B R O U T I N E =======================================
.text:0040BE80
.text:0040BE80
.text:0040BE80 ; int __cdecl sub_40BE80(char *)
.text:0040BE80 sub_40BE80      proc near               ; CODE XREF: sub_401610+55↑p
.text:0040BE80                                         ; sub_401610+36B↑p ...
.text:0040BE80
.text:0040BE80 Str             = dword ptr -1Ch
.text:0040BE80 Src             = dword ptr -18h
.text:0040BE80 Size            = dword ptr -14h
.text:0040BE80 var_8           = dword ptr -8
.text:0040BE80 var_4           = dword ptr -4
.text:0040BE80 arg_0           = dword ptr  4
.text:0040BE80
.text:0040BE80                 sub     esp, 1Ch
.text:0040BE83                 mov     [esp+1Ch+var_4], esi
.text:0040BE87                 mov     esi, [esp+1Ch+arg_0]
.text:0040BE8B                 mov     [esp+1Ch+var_8], ebx
.text:0040BE8F                 mov     [esp+1Ch+Str], esi ; Str
.text:0040BE92                 call    strlen
.text:0040BE97                 lea     ebx, [eax+1]
.text:0040BE9A                 mov     [esp+1Ch+Str], ebx ; Size
.text:0040BE9D                 call    malloc
.text:0040BEA2                 test    eax, eax
.text:0040BEA4                 jz      short loc_40BEC2
.text:0040BEA6
.text:0040BEA6 loc_40BEA6:                             ; CODE XREF: sub_40BE80+44↓j
.text:0040BEA6                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040BEAA                 mov     [esp+1Ch+Src], esi ; Src
.text:0040BEAE                 mov     [esp+1Ch+Str], eax ; void *
.text:0040BEB1                 call    memcpy
.text:0040BEB6                 mov     ebx, [esp+1Ch+var_8]
.text:0040BEBA                 mov     esi, [esp+1Ch+var_4]
.text:0040BEBE                 add     esp, 1Ch
.text:0040BEC1                 retn
.text:0040BEC2 ; ---------------------------------------------------------------------------
.text:0040BEC2
.text:0040BEC2 loc_40BEC2:                             ; CODE XREF: sub_40BE80+24↑j
.text:0040BEC2                 test    ebx, ebx
.text:0040BEC4                 jz      short loc_40BEA6
.text:0040BEC6                 call    sub_40BB80
.text:0040BEC6 sub_40BE80      endp
.text:0040BEC6
.text:0040BEC6 ; ---------------------------------------------------------------------------
.text:0040BECB                 align 10h
.text:0040BED0
.text:0040BED0 ; =============== S U B R O U T I N E =======================================
.text:0040BED0
.text:0040BED0
.text:0040BED0 ; int __cdecl sub_40BED0(void *, int, int)
.text:0040BED0 sub_40BED0      proc near               ; CODE XREF: .text:0040BD80↑j
.text:0040BED0                                         ; .text:0040BDAA↑p
.text:0040BED0
.text:0040BED0 Block           = dword ptr -1Ch
.text:0040BED0 Size            = dword ptr -18h
.text:0040BED0 var_C           = dword ptr -0Ch
.text:0040BED0 var_8           = dword ptr -8
.text:0040BED0 var_4           = dword ptr -4
.text:0040BED0 arg_0           = dword ptr  4
.text:0040BED0 arg_4           = dword ptr  8
.text:0040BED0 arg_8           = dword ptr  0Ch
.text:0040BED0
.text:0040BED0                 sub     esp, 1Ch
.text:0040BED3                 mov     [esp+1Ch+var_8], esi
.text:0040BED7                 mov     esi, [esp+1Ch+arg_0]
.text:0040BEDB                 mov     [esp+1Ch+var_4], edi
.text:0040BEDF                 mov     edi, [esp+1Ch+arg_4]
.text:0040BEE3                 test    esi, esi
.text:0040BEE5                 mov     [esp+1Ch+var_C], ebx
.text:0040BEE9                 mov     ecx, [edi]
.text:0040BEEB                 mov     ebx, [esp+1Ch+arg_8]
.text:0040BEEF                 jz      short loc_40BF30
.text:0040BEF1                 xor     edx, edx
.text:0040BEF3                 mov     eax, 7FFFFFFFh
.text:0040BEF8                 div     ebx
.text:0040BEFA                 cmp     eax, ecx
.text:0040BEFC                 jb      short loc_40BF29
.text:0040BEFE                 add     ecx, ecx
.text:0040BF00
.text:0040BF00 loc_40BF00:                             ; CODE XREF: sub_40BED0+62↓j
.text:0040BF00                                         ; sub_40BED0+71↓j ...
.text:0040BF00                 mov     [edi], ecx
.text:0040BF02                 imul    ebx, ecx
.text:0040BF05                 mov     [esp+1Ch+Block], esi ; Block
.text:0040BF08                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040BF0C                 call    realloc
.text:0040BF11                 test    eax, eax
.text:0040BF13                 jz      short loc_40BF25
.text:0040BF15
.text:0040BF15 loc_40BF15:                             ; CODE XREF: sub_40BED0+57↓j
.text:0040BF15                 mov     ebx, [esp+1Ch+var_C]
.text:0040BF19                 mov     esi, [esp+1Ch+var_8]
.text:0040BF1D                 mov     edi, [esp+1Ch+var_4]
.text:0040BF21                 add     esp, 1Ch
.text:0040BF24                 retn
.text:0040BF25 ; ---------------------------------------------------------------------------
.text:0040BF25
.text:0040BF25 loc_40BF25:                             ; CODE XREF: sub_40BED0+43↑j
.text:0040BF25                 test    ebx, ebx
.text:0040BF27                 jz      short loc_40BF15
.text:0040BF29
.text:0040BF29 loc_40BF29:                             ; CODE XREF: sub_40BED0+2C↑j
.text:0040BF29                 call    sub_40BB80
.text:0040BF29 ; ---------------------------------------------------------------------------
.text:0040BF2E                 align 10h
.text:0040BF30
.text:0040BF30 loc_40BF30:                             ; CODE XREF: sub_40BED0+1F↑j
.text:0040BF30                 test    ecx, ecx
.text:0040BF32                 jnz     short loc_40BF00
.text:0040BF34                 xor     edx, edx
.text:0040BF36                 mov     eax, 40h ; '@'
.text:0040BF3B                 div     ebx
.text:0040BF3D                 test    eax, eax
.text:0040BF3F                 mov     ecx, eax
.text:0040BF41                 jnz     short loc_40BF00
.text:0040BF43                 mov     ecx, 1
.text:0040BF48                 jmp     short loc_40BF00
.text:0040BF48 sub_40BED0      endp
.text:0040BF48
.text:0040BF48 ; ---------------------------------------------------------------------------
.text:0040BF4A                 align 10h
.text:0040BF50 aHelp           db 'help',0             ; DATA XREF: .text:off_40BF70↓o
.text:0040BF55 aVersion        db 'version',0          ; DATA XREF: .text:0040BF80↓o
.text:0040BF5D                 db 13h dup(90h)
.text:0040BF70 off_40BF70      dd offset aHelp         ; DATA XREF: sub_40BFB0+3D↓o
.text:0040BF70                                         ; "help"
.text:0040BF74                 dd 2 dup(0)
.text:0040BF7C                 dd 68h
.text:0040BF80                 dd offset aVersion      ; "version"
.text:0040BF84                 dd 2 dup(0)
.text:0040BF8C                 dd 76h, 4 dup(0)
.text:0040BFA0 ; ---------------------------------------------------------------------------
.text:0040BFA0
.text:0040BFA0 loc_40BFA0:                             ; DATA XREF: sub_40BFB0+45↓o
.text:0040BFA0                 sub     eax, [eax]
.text:0040BFA2                 lea     esi, [esi+0]
.text:0040BFA9                 lea     edi, [edi+0]
.text:0040BFB0
.text:0040BFB0 ; =============== S U B R O U T I N E =======================================
.text:0040BFB0
.text:0040BFB0
.text:0040BFB0 ; int __cdecl sub_40BFB0(int, int, FILE *, int, int, int, char)
.text:0040BFB0 sub_40BFB0      proc near               ; CODE XREF: sub_401360+AD↑p
.text:0040BFB0
.text:0040BFB0 Code            = dword ptr -1Ch
.text:0040BFB0 var_18          = dword ptr -18h
.text:0040BFB0 var_14          = dword ptr -14h
.text:0040BFB0 var_10          = dword ptr -10h
.text:0040BFB0 var_C           = dword ptr -0Ch
.text:0040BFB0 var_4           = dword ptr -4
.text:0040BFB0 arg_0           = dword ptr  4
.text:0040BFB0 arg_4           = dword ptr  8
.text:0040BFB0 arg_8           = dword ptr  0Ch
.text:0040BFB0 arg_C           = dword ptr  10h
.text:0040BFB0 arg_10          = dword ptr  14h
.text:0040BFB0 arg_14          = dword ptr  18h
.text:0040BFB0 arg_18          = byte ptr  1Ch
.text:0040BFB0
.text:0040BFB0                 sub     esp, 1Ch
.text:0040BFB3                 xor     eax, eax
.text:0040BFB5                 cmp     [esp+1Ch+arg_0], 2
.text:0040BFBA                 mov     [esp+1Ch+var_4], ebx
.text:0040BFBE                 mov     ebx, dword_40F044
.text:0040BFC4                 mov     dword_40F044, eax
.text:0040BFC9                 jz      short loc_40BFE1
.text:0040BFCB
.text:0040BFCB loc_40BFCB:                             ; CODE XREF: sub_40BFB0+60↓j
.text:0040BFCB                                         ; sub_40BFB0+6A↓j
.text:0040BFCB                 mov     dword_40F044, ebx
.text:0040BFD1                 xor     edx, edx
.text:0040BFD3                 mov     ebx, [esp+1Ch+var_4]
.text:0040BFD7                 mov     dword_40F040, edx
.text:0040BFDD                 add     esp, 1Ch
.text:0040BFE0                 retn
.text:0040BFE1 ; ---------------------------------------------------------------------------
.text:0040BFE1
.text:0040BFE1 loc_40BFE1:                             ; CODE XREF: sub_40BFB0+19↑j
.text:0040BFE1                 mov     [esp+1Ch+var_C], 0 ; int
.text:0040BFE9                 mov     edx, [esp+1Ch+arg_4]
.text:0040BFED                 mov     [esp+1Ch+var_10], offset off_40BF70 ; int
.text:0040BFF5                 mov     [esp+1Ch+var_14], offset loc_40BFA0 ; char *
.text:0040BFFD                 mov     [esp+1Ch+var_18], edx ; int
.text:0040C001                 mov     [esp+1Ch+Code], 2 ; int
.text:0040C008                 call    sub_40D6A0
.text:0040C00D                 cmp     eax, 0FFFFFFFFh
.text:0040C010                 jz      short loc_40BFCB
.text:0040C012                 cmp     eax, 68h ; 'h'
.text:0040C015                 jz      short loc_40C01E
.text:0040C017                 cmp     eax, 76h ; 'v'
.text:0040C01A                 jnz     short loc_40BFCB
.text:0040C01C                 jmp     short loc_40C029
.text:0040C01E ; ---------------------------------------------------------------------------
.text:0040C01E
.text:0040C01E loc_40C01E:                             ; CODE XREF: sub_40BFB0+65↑j
.text:0040C01E                 mov     [esp+1Ch+Code], 0
.text:0040C025                 call    [esp+1Ch+arg_14]
.text:0040C029
.text:0040C029 loc_40C029:                             ; CODE XREF: sub_40BFB0+6C↑j
.text:0040C029                 mov     ecx, [esp+1Ch+arg_10]
.text:0040C02D                 lea     ebx, [esp+1Ch+arg_18]
.text:0040C031                 mov     edx, [esp+1Ch+arg_C]
.text:0040C035                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:0040C039                 mov     ebx, [esp+1Ch+arg_8]
.text:0040C03D                 mov     [esp+1Ch+var_10], ecx ; int
.text:0040C041                 mov     ecx, ds:_iob
.text:0040C047                 mov     [esp+1Ch+var_14], edx ; int
.text:0040C04B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:0040C04F                 add     ecx, 20h ; ' '
.text:0040C052                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:0040C055                 call    sub_40D490
.text:0040C05A                 mov     [esp+1Ch+Code], 0 ; Code
.text:0040C061                 call    exit
.text:0040C061 sub_40BFB0      endp
.text:0040C061
.text:0040C061 ; ---------------------------------------------------------------------------
.text:0040C066                 align 10h
.text:0040C070                 mov     edx, [esp+4]
.text:0040C074                 mov     ds:dword_410260, edx
.text:0040C07A                 retn
.text:0040C07A ; ---------------------------------------------------------------------------
.text:0040C07B aWriteError     db 'write error',0      ; DATA XREF: sub_40C0A0:loc_40C0E9↓o
.text:0040C087 ; const char aSS_0[]
.text:0040C087 aSS_0           db '%s: %s',0           ; DATA XREF: sub_40C0A0+77↓o
.text:0040C08E ; const char aS_2[]
.text:0040C08E aS_2            db '%s',0               ; DATA XREF: sub_40C0A0+A0↓o
.text:0040C091 ; ---------------------------------------------------------------------------
.text:0040C091                 jmp     short sub_40C0A0
.text:0040C091 ; ---------------------------------------------------------------------------
.text:0040C093                 align 10h
.text:0040C0A0
.text:0040C0A0 ; =============== S U B R O U T I N E =======================================
.text:0040C0A0
.text:0040C0A0
.text:0040C0A0 ; void __cdecl sub_40C0A0()
.text:0040C0A0 sub_40C0A0      proc near               ; CODE XREF: .text:0040C091↑j
.text:0040C0A0                                         ; DATA XREF: sub_401360+5C↑o
.text:0040C0A0
.text:0040C0A0 Stream          = dword ptr -2Ch
.text:0040C0A0 ErrorMessage    = dword ptr -28h
.text:0040C0A0 var_24          = dword ptr -24h
.text:0040C0A0 var_20          = byte ptr -20h
.text:0040C0A0 var_1C          = dword ptr -1Ch
.text:0040C0A0 var_9           = byte ptr -9
.text:0040C0A0
.text:0040C0A0                 push    esi
.text:0040C0A1                 push    ebx
.text:0040C0A2                 sub     esp, 24h
.text:0040C0A5                 mov     edx, ds:_iob
.text:0040C0AB                 mov     ecx, [edx+2Ch]
.text:0040C0AE                 lea     esi, [edx+20h]
.text:0040C0B1                 shr     ecx, 5
.text:0040C0B4                 mov     bl, cl
.text:0040C0B6                 mov     ecx, [edx+20h]
.text:0040C0B9                 and     bl, 1
.text:0040C0BC                 cmp     ecx, [esi+8]
.text:0040C0BF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040C0C2                 setz    [esp+2Ch+var_9]
.text:0040C0C7                 call    fclose
.text:0040C0CC                 test    eax, eax
.text:0040C0CE                 setnz   al
.text:0040C0D1                 test    bl, bl
.text:0040C0D3                 jnz     loc_40C163
.text:0040C0D9                 test    al, al
.text:0040C0DB                 jz      short loc_40C130
.text:0040C0DD
.text:0040C0DD loc_40C0DD:                             ; CODE XREF: sub_40C0A0+CD↓j
.text:0040C0DD                 call    _errno
.text:0040C0E2                 mov     esi, [eax]
.text:0040C0E4
.text:0040C0E4 loc_40C0E4:                             ; CODE XREF: sub_40C0A0+C7↓j
.text:0040C0E4                 cmp     esi, 9
.text:0040C0E7                 jz      short loc_40C156
.text:0040C0E9
.text:0040C0E9 loc_40C0E9:                             ; CODE XREF: sub_40C0A0+B8↓j
.text:0040C0E9                                         ; sub_40C0A0+C1↓j
.text:0040C0E9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:0040C0F0                 call    ds:libintl_gettext
.text:0040C0F6                 mov     ebx, eax
.text:0040C0F8                 mov     eax, ds:dword_410260
.text:0040C0FD                 test    eax, eax
.text:0040C0FF                 jz      short loc_40C136
.text:0040C101                 mov     [esp+2Ch+Stream], eax ; char *
.text:0040C104                 call    sub_404CD0
.text:0040C109                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040C10D                 mov     edx, Code
.text:0040C113                 mov     [esp+2Ch+var_1C], ebx
.text:0040C117                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040C11F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040C123                 mov     [esp+2Ch+Stream], edx ; Code
.text:0040C126                 call    sub_40D830
.text:0040C12B                 nop
.text:0040C12C                 lea     esi, [esi+0]
.text:0040C130
.text:0040C130 loc_40C130:                             ; CODE XREF: sub_40C0A0+3B↑j
.text:0040C130                                         ; sub_40C0A0+B4↓j ...
.text:0040C130                 add     esp, 24h
.text:0040C133                 pop     ebx
.text:0040C134                 pop     esi
.text:0040C135                 retn
.text:0040C136 ; ---------------------------------------------------------------------------
.text:0040C136
.text:0040C136 loc_40C136:                             ; CODE XREF: sub_40C0A0+5F↑j
.text:0040C136                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040C13A                 mov     ebx, Code
.text:0040C140                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:0040C148                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040C14C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040C14F                 call    sub_40D830
.text:0040C154                 jmp     short loc_40C130
.text:0040C156 ; ---------------------------------------------------------------------------
.text:0040C156
.text:0040C156 loc_40C156:                             ; CODE XREF: sub_40C0A0+47↑j
.text:0040C156                 test    bl, bl
.text:0040C158                 jnz     short loc_40C0E9
.text:0040C15A                 cmp     [esp+2Ch+var_9], 0
.text:0040C15F                 jnz     short loc_40C130
.text:0040C161                 jmp     short loc_40C0E9
.text:0040C163 ; ---------------------------------------------------------------------------
.text:0040C163
.text:0040C163 loc_40C163:                             ; CODE XREF: sub_40C0A0+33↑j
.text:0040C163                 xor     esi, esi
.text:0040C165                 test    al, al
.text:0040C167                 jz      loc_40C0E4
.text:0040C16D                 jmp     loc_40C0DD
.text:0040C16D sub_40C0A0      endp
.text:0040C16D
.text:0040C16D ; ---------------------------------------------------------------------------
.text:0040C172                 align 10h
.text:0040C180 dword_40C180    dd 90002D2Dh, 7 dup(90909090h)
.text:0040C180                                         ; DATA XREF: sub_40C3D0+E4↓o
.text:0040C1A0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:0040C1A0                                         ; DATA XREF: sub_40C3D0+2FC↓o
.text:0040C1CD                 align 20h
.text:0040C1E0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:0040C1E0                                         ; DATA XREF: sub_40C3D0:loc_40C732↓o
.text:0040C20D                 align 20h
.text:0040C220 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:0040C220                                         ; DATA XREF: sub_40C3D0:loc_40C7D0↓o
.text:0040C220                                         ; sub_40C3D0:loc_40CB97↓o
.text:0040C246                 align 20h
.text:0040C260 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:0040C260                                         ; DATA XREF: sub_40C3D0+48E↓o
.text:0040C280 dword_40C280    dd 90909000h, 7 dup(90909090h)
.text:0040C280                                         ; DATA XREF: sub_40C3D0:loc_40C8A1↓o
.text:0040C2A0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:0040C2A0                                         ; DATA XREF: sub_40C3D0:loc_40C8BA↓o
.text:0040C2C0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:0040C2C0                                         ; DATA XREF: sub_40C3D0:loc_40C99F↓o
.text:0040C2C0                                         ; sub_40C3D0:loc_40CCCC↓o
.text:0040C2E7                 align 20h
.text:0040C300 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:0040C300                                         ; DATA XREF: sub_40C3D0:loc_40CB13↓o
.text:0040C32E                 align 20h
.text:0040C340 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:0040C340                                         ; DATA XREF: sub_40C3D0:loc_40CBFF↓o
.text:0040C361 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:0040C361                                         ; DATA XREF: sub_40C3D0+93F↓o
.text:0040C37B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040C37B                                         ; DATA XREF: sub_40C3D0:loc_40CD47↓o
.text:0040C395 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:0040C395                                         ; DATA XREF: sub_40C3D0:loc_40CD6E↓o
.text:0040C3B3 ; const char VarName[]
.text:0040C3B3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_40C3D0:loc_40CF20↓o
.text:0040C3C3                 align 10h
.text:0040C3D0
.text:0040C3D0 ; =============== S U B R O U T I N E =======================================
.text:0040C3D0
.text:0040C3D0
.text:0040C3D0 ; int __cdecl sub_40C3D0(int, int, char *Str, int, int, int, int, int)
.text:0040C3D0 sub_40C3D0      proc near               ; CODE XREF: sub_40CF60+5A↓p
.text:0040C3D0                                         ; .text:0040D04A↓p ...
.text:0040C3D0
.text:0040C3D0 Str1            = dword ptr -5Ch
.text:0040C3D0 Str2            = dword ptr -58h
.text:0040C3D0 MaxCount        = dword ptr -54h
.text:0040C3D0 var_50          = dword ptr -50h
.text:0040C3D0 var_4C          = dword ptr -4Ch
.text:0040C3D0 var_3C          = dword ptr -3Ch
.text:0040C3D0 var_38          = dword ptr -38h
.text:0040C3D0 var_34          = dword ptr -34h
.text:0040C3D0 var_30          = dword ptr -30h
.text:0040C3D0 var_2C          = dword ptr -2Ch
.text:0040C3D0 var_28          = dword ptr -28h
.text:0040C3D0 var_24          = dword ptr -24h
.text:0040C3D0 var_20          = dword ptr -20h
.text:0040C3D0 var_1C          = dword ptr -1Ch
.text:0040C3D0 var_18          = dword ptr -18h
.text:0040C3D0 var_14          = dword ptr -14h
.text:0040C3D0 arg_0           = dword ptr  4
.text:0040C3D0 arg_4           = dword ptr  8
.text:0040C3D0 Str             = dword ptr  0Ch
.text:0040C3D0 arg_C           = dword ptr  10h
.text:0040C3D0 arg_10          = dword ptr  14h
.text:0040C3D0 arg_14          = dword ptr  18h
.text:0040C3D0 arg_18          = dword ptr  1Ch
.text:0040C3D0 arg_1C          = dword ptr  20h
.text:0040C3D0
.text:0040C3D0                 push    ebp
.text:0040C3D1                 mov     eax, 0FFFFFFFFh
.text:0040C3D6                 push    edi
.text:0040C3D7                 push    esi
.text:0040C3D8                 push    ebx
.text:0040C3D9                 sub     esp, 4Ch
.text:0040C3DC                 mov     esi, [esp+5Ch+Str]
.text:0040C3E0                 mov     ebp, [esp+5Ch+arg_1C]
.text:0040C3E4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:0040C3E7                 mov     ebx, [ebp+4]
.text:0040C3EA                 setz    dl
.text:0040C3ED                 movzx   ecx, dl
.text:0040C3F0                 dec     ecx
.text:0040C3F1                 and     ecx, ebx
.text:0040C3F3                 mov     [esp+5Ch+var_14], ecx
.text:0040C3F7                 mov     ecx, [esp+5Ch+arg_0]
.text:0040C3FB                 test    ecx, ecx
.text:0040C3FD                 jle     loc_40C527
.text:0040C403                 mov     dword ptr [ebp+0Ch], 0
.text:0040C40A                 mov     ebx, [ebp+0]
.text:0040C40D                 test    ebx, ebx
.text:0040C40F                 jz      loc_40CF40
.text:0040C415                 mov     edi, [ebp+10h]
.text:0040C418                 test    edi, edi
.text:0040C41A                 jnz     short loc_40C473
.text:0040C41C                 lea     esi, [esi+0]
.text:0040C420
.text:0040C420 loc_40C420:                             ; CODE XREF: sub_40C3D0+B7C↓j
.text:0040C420                 mov     [ebp+24h], ebx
.text:0040C423                 mov     esi, [esp+5Ch+Str]
.text:0040C427                 mov     [ebp+20h], ebx
.text:0040C42A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040C42E                 xor     ebx, ebx
.text:0040C430                 mov     dword ptr [ebp+14h], 0
.text:0040C437                 test    ecx, ecx
.text:0040C439                 jz      loc_40CF20
.text:0040C43F
.text:0040C43F loc_40C43F:                             ; CODE XREF: sub_40C3D0+B64↓j
.text:0040C43F                 mov     ebx, 1
.text:0040C444
.text:0040C444 loc_40C444:                             ; CODE XREF: sub_40C3D0+B5E↓j
.text:0040C444                 mov     [ebp+1Ch], ebx
.text:0040C447                 mov     ecx, [esp+5Ch+Str]
.text:0040C44B                 movzx   eax, byte ptr [ecx]
.text:0040C44E                 cmp     al, 2Dh ; '-'
.text:0040C450                 jz      loc_40CF10
.text:0040C456                 cmp     al, 2Bh ; '+'
.text:0040C458                 jz      loc_40CEF9
.text:0040C45E                 xor     edx, edx
.text:0040C460                 test    ebx, ebx
.text:0040C462                 setz    dl
.text:0040C465                 mov     [ebp+18h], edx
.text:0040C468
.text:0040C468 loc_40C468:                             ; CODE XREF: sub_40C3D0+B35↓j
.text:0040C468                 mov     [esp+5Ch+Str], esi
.text:0040C46C                 mov     dword ptr [ebp+10h], 1
.text:0040C473
.text:0040C473 loc_40C473:                             ; CODE XREF: sub_40C3D0+4A↑j
.text:0040C473                 mov     eax, [ebp+14h]
.text:0040C476                 test    eax, eax
.text:0040C478                 jz      short loc_40C483
.text:0040C47A                 cmp     byte ptr [eax], 0
.text:0040C47D                 jnz     loc_40C560
.text:0040C483
.text:0040C483 loc_40C483:                             ; CODE XREF: sub_40C3D0+A8↑j
.text:0040C483                 mov     ebx, [ebp+0]
.text:0040C486                 cmp     [ebp+24h], ebx
.text:0040C489                 jle     short loc_40C48E
.text:0040C48B                 mov     [ebp+24h], ebx
.text:0040C48E
.text:0040C48E loc_40C48E:                             ; CODE XREF: sub_40C3D0+B9↑j
.text:0040C48E                 cmp     [ebp+20h], ebx
.text:0040C491                 jle     short loc_40C496
.text:0040C493                 mov     [ebp+20h], ebx
.text:0040C496
.text:0040C496 loc_40C496:                             ; CODE XREF: sub_40C3D0+C1↑j
.text:0040C496                 cmp     dword ptr [ebp+18h], 1
.text:0040C49A                 jz      loc_40CE70
.text:0040C4A0
.text:0040C4A0 loc_40C4A0:                             ; CODE XREF: sub_40C3D0+B13↓j
.text:0040C4A0                 cmp     ebx, [esp+5Ch+arg_0]
.text:0040C4A4                 jz      loc_40CE54
.text:0040C4AA                 cld
.text:0040C4AB                 mov     ecx, [esp+5Ch+arg_4]
.text:0040C4AF                 mov     edx, 3
.text:0040C4B4                 mov     edi, offset dword_40C180
.text:0040C4B9                 mov     esi, [ecx+ebx*4]
.text:0040C4BC                 mov     ecx, edx
.text:0040C4BE                 repe cmpsb
.text:0040C4C0                 jnz     short loc_40C4FC
.text:0040C4C2                 mov     edx, [ebp+24h]
.text:0040C4C5                 lea     eax, [ebx+1]
.text:0040C4C8                 cmp     [ebp+20h], edx
.text:0040C4CB                 mov     [ebp+0], eax
.text:0040C4CE                 jz      loc_40CE68
.text:0040C4D4                 cmp     edx, eax
.text:0040C4D6                 jz      short loc_40C4F0
.text:0040C4D8                 mov     [esp+5Ch+Str2], ebp
.text:0040C4DC                 mov     ebx, [esp+5Ch+arg_4]
.text:0040C4E0                 mov     [esp+5Ch+Str1], ebx
.text:0040C4E3                 call    sub_40D080
.text:0040C4E8                 nop
.text:0040C4E9                 lea     esi, [esi+0]
.text:0040C4F0
.text:0040C4F0 loc_40C4F0:                             ; CODE XREF: sub_40C3D0+106↑j
.text:0040C4F0                                         ; sub_40C3D0+A9B↓j
.text:0040C4F0                 mov     eax, [esp+5Ch+arg_0]
.text:0040C4F4                 mov     ebx, eax
.text:0040C4F6                 mov     [ebp+24h], eax
.text:0040C4F9                 mov     [ebp+0], eax
.text:0040C4FC
.text:0040C4FC loc_40C4FC:                             ; CODE XREF: sub_40C3D0+F0↑j
.text:0040C4FC                 cmp     ebx, [esp+5Ch+arg_0]
.text:0040C500                 jz      loc_40CE54
.text:0040C506                 mov     esi, [esp+5Ch+arg_4]
.text:0040C50A                 mov     eax, [esi+ebx*4]
.text:0040C50D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:0040C510                 jz      short loc_40C537
.text:0040C512
.text:0040C512 loc_40C512:                             ; CODE XREF: sub_40C3D0+16D↓j
.text:0040C512                 mov     edx, [ebp+18h]
.text:0040C515                 test    edx, edx
.text:0040C517                 jz      short loc_40C530
.text:0040C519                 mov     [ebp+0Ch], eax
.text:0040C51C                 lea     edi, [ebx+1]
.text:0040C51F                 mov     eax, 1
.text:0040C524                 mov     [ebp+0], edi
.text:0040C527
.text:0040C527 loc_40C527:                             ; CODE XREF: sub_40C3D0+2D↑j
.text:0040C527                                         ; sub_40C3D0+165↓j ...
.text:0040C527                 add     esp, 4Ch
.text:0040C52A                 pop     ebx
.text:0040C52B                 pop     esi
.text:0040C52C                 pop     edi
.text:0040C52D                 pop     ebp
.text:0040C52E                 retn
.text:0040C52E ; ---------------------------------------------------------------------------
.text:0040C52F                 align 10h
.text:0040C530
.text:0040C530 loc_40C530:                             ; CODE XREF: sub_40C3D0+147↑j
.text:0040C530                                         ; sub_40C3D0+A8A↓j ...
.text:0040C530                 mov     eax, 0FFFFFFFFh
.text:0040C535                 jmp     short loc_40C527
.text:0040C537 ; ---------------------------------------------------------------------------
.text:0040C537
.text:0040C537 loc_40C537:                             ; CODE XREF: sub_40C3D0+140↑j
.text:0040C537                 movzx   edx, byte ptr [eax+1]
.text:0040C53B                 test    dl, dl
.text:0040C53D                 jz      short loc_40C512
.text:0040C53F                 mov     ebx, [esp+5Ch+arg_C]
.text:0040C543                 xor     ecx, ecx
.text:0040C545                 test    ebx, ebx
.text:0040C547                 jz      short loc_40C552
.text:0040C549                 cmp     dl, 2Dh ; '-'
.text:0040C54C                 jz      loc_40CE4A
.text:0040C552
.text:0040C552 loc_40C552:                             ; CODE XREF: sub_40C3D0+177↑j
.text:0040C552                                         ; sub_40C3D0+A7F↓j
.text:0040C552                 lea     esi, [ecx+eax+1]
.text:0040C556                 mov     [ebp+14h], esi
.text:0040C559                 lea     esi, [esi+0]
.text:0040C560
.text:0040C560 loc_40C560:                             ; CODE XREF: sub_40C3D0+AD↑j
.text:0040C560                 mov     ecx, [esp+5Ch+arg_C]
.text:0040C564                 test    ecx, ecx
.text:0040C566                 jz      loc_40C8F0
.text:0040C56C                 mov     edx, [ebp+0]
.text:0040C56F                 mov     edi, [esp+5Ch+arg_4]
.text:0040C573                 mov     eax, [edi+edx*4]
.text:0040C576                 movzx   edx, byte ptr [eax+1]
.text:0040C57A                 cmp     dl, 2Dh ; '-'
.text:0040C57D                 jz      short loc_40C595
.text:0040C57F                 mov     ebx, [esp+5Ch+arg_14]
.text:0040C583                 test    ebx, ebx
.text:0040C585                 jz      loc_40C8F0
.text:0040C58B                 cmp     byte ptr [eax+2], 0
.text:0040C58F                 jz      loc_40CE2A
.text:0040C595
.text:0040C595 loc_40C595:                             ; CODE XREF: sub_40C3D0+1AD↑j
.text:0040C595                                         ; sub_40C3D0+A75↓j
.text:0040C595                 mov     [esp+5Ch+var_18], 0
.text:0040C59D                 mov     ecx, [ebp+14h]
.text:0040C5A0                 mov     [esp+5Ch+var_1C], 0
.text:0040C5A8                 mov     [esp+5Ch+var_20], 0
.text:0040C5B0                 mov     edi, ecx
.text:0040C5B2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040C5BA                 movzx   eax, byte ptr [ecx]
.text:0040C5BD                 test    al, al
.text:0040C5BF                 jz      short loc_40C5DC
.text:0040C5C1                 cmp     al, 3Dh ; '='
.text:0040C5C3                 jz      short loc_40C5DC
.text:0040C5C5                 lea     esi, [esi+0]
.text:0040C5C9                 lea     edi, [edi+0]
.text:0040C5D0
.text:0040C5D0 loc_40C5D0:                             ; CODE XREF: sub_40C3D0+20A↓j
.text:0040C5D0                 inc     edi
.text:0040C5D1                 movzx   eax, byte ptr [edi]
.text:0040C5D4                 test    al, al
.text:0040C5D6                 jz      short loc_40C5DC
.text:0040C5D8                 cmp     al, 3Dh ; '='
.text:0040C5DA                 jnz     short loc_40C5D0
.text:0040C5DC
.text:0040C5DC loc_40C5DC:                             ; CODE XREF: sub_40C3D0+1EF↑j
.text:0040C5DC                                         ; sub_40C3D0+1F3↑j ...
.text:0040C5DC                 mov     [esp+5Ch+var_28], 0
.text:0040C5E4                 mov     esi, [esp+5Ch+arg_C]
.text:0040C5E8                 mov     ebx, [esi]
.text:0040C5EA                 test    ebx, ebx
.text:0040C5EC                 mov     edx, ebx
.text:0040C5EE                 jz      loc_40C810
.text:0040C5F4                 lea     esi, [esi+0]
.text:0040C5FA                 lea     edi, [edi+0]
.text:0040C600
.text:0040C600 loc_40C600:                             ; CODE XREF: sub_40C3D0+25E↓j
.text:0040C600                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:0040C604                 mov     ebx, edi
.text:0040C606                 sub     ebx, ecx
.text:0040C608                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040C60C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040C60F                 call    strncmp
.text:0040C614                 test    eax, eax
.text:0040C616                 jz      loc_40CDA6
.text:0040C61C
.text:0040C61C loc_40C61C:                             ; CODE XREF: sub_40C3D0+A0F↓j
.text:0040C61C                                         ; sub_40C3D0+A24↓j ...
.text:0040C61C                 inc     [esp+5Ch+var_28]
.text:0040C620                 add     esi, 10h
.text:0040C623                 mov     ecx, [esi]
.text:0040C625                 test    ecx, ecx
.text:0040C627                 mov     edx, ecx
.text:0040C629                 jz      short loc_40C630
.text:0040C62B                 mov     ecx, [ebp+14h]
.text:0040C62E                 jmp     short loc_40C600
.text:0040C630 ; ---------------------------------------------------------------------------
.text:0040C630
.text:0040C630 loc_40C630:                             ; CODE XREF: sub_40C3D0+259↑j
.text:0040C630                                         ; sub_40C3D0+A55↓j
.text:0040C630                 mov     esi, [esp+5Ch+var_20]
.text:0040C634                 test    esi, esi
.text:0040C636                 jz      short loc_40C644
.text:0040C638                 mov     edx, [esp+5Ch+var_1C]
.text:0040C63C                 test    edx, edx
.text:0040C63E                 jz      loc_40CD50
.text:0040C644
.text:0040C644 loc_40C644:                             ; CODE XREF: sub_40C3D0+266↑j
.text:0040C644                 mov     eax, [esp+5Ch+var_18]
.text:0040C648                 test    eax, eax
.text:0040C64A                 jz      loc_40C810
.text:0040C650                 mov     ecx, [ebp+0]
.text:0040C653                 lea     eax, [ecx+1]
.text:0040C656                 mov     [ebp+0], eax
.text:0040C659                 cmp     byte ptr [edi], 0
.text:0040C65C                 jz      loc_40C770
.text:0040C662                 mov     ecx, [esp+5Ch+var_18]
.text:0040C666                 mov     esi, [ecx+4]
.text:0040C669                 test    esi, esi
.text:0040C66B                 jz      short loc_40C6B6
.text:0040C66D                 lea     ebx, [edi+1]
.text:0040C670                 mov     [ebp+0Ch], ebx
.text:0040C673
.text:0040C673 loc_40C673:                             ; CODE XREF: sub_40C3D0+3A8↓j
.text:0040C673                                         ; sub_40C3D0+3C4↓j
.text:0040C673                 mov     ebx, [ebp+14h]
.text:0040C676                 mov     [esp+5Ch+Str1], ebx ; Str
.text:0040C679                 call    strlen
.text:0040C67E                 add     [ebp+14h], eax
.text:0040C681                 mov     esi, [esp+5Ch+arg_10]
.text:0040C685                 test    esi, esi
.text:0040C687                 jz      short loc_40C693
.text:0040C689                 mov     ebp, [esp+5Ch+var_24]
.text:0040C68D                 mov     ecx, [esp+5Ch+arg_10]
.text:0040C691                 mov     [ecx], ebp
.text:0040C693
.text:0040C693 loc_40C693:                             ; CODE XREF: sub_40C3D0+2B7↑j
.text:0040C693                 mov     eax, [esp+5Ch+var_18]
.text:0040C697                 mov     ecx, [eax+8]
.text:0040C69A                 test    ecx, ecx
.text:0040C69C                 jnz     short loc_40C6AA
.text:0040C69E                 mov     ecx, [esp+5Ch+var_18]
.text:0040C6A2
.text:0040C6A2 loc_40C6A2:                             ; CODE XREF: sub_40C3D0+723↓j
.text:0040C6A2                 mov     eax, [ecx+0Ch]
.text:0040C6A5                 jmp     loc_40C527
.text:0040C6AA ; ---------------------------------------------------------------------------
.text:0040C6AA
.text:0040C6AA loc_40C6AA:                             ; CODE XREF: sub_40C3D0+2CC↑j
.text:0040C6AA                                         ; sub_40C3D0+719↓j
.text:0040C6AA                 mov     esi, [eax+0Ch]
.text:0040C6AD                 xor     eax, eax
.text:0040C6AF                 mov     [ecx], esi
.text:0040C6B1                 jmp     loc_40C527
.text:0040C6B6 ; ---------------------------------------------------------------------------
.text:0040C6B6
.text:0040C6B6 loc_40C6B6:                             ; CODE XREF: sub_40C3D0+29B↑j
.text:0040C6B6                 mov     edi, [esp+5Ch+var_14]
.text:0040C6BA                 test    edi, edi
.text:0040C6BC                 jz      short loc_40C710
.text:0040C6BE                 mov     esi, [esp+5Ch+arg_4]
.text:0040C6C2                 mov     edx, [esi+eax*4-4]
.text:0040C6C6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040C6CA                 jz      short loc_40C732
.text:0040C6CC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:0040C6D3                 call    ds:libintl_gettext
.text:0040C6D9                 mov     edx, [esp+5Ch+var_18]
.text:0040C6DD                 mov     edi, [edx]
.text:0040C6DF                 mov     [esp+5Ch+var_4C], edi
.text:0040C6E3                 mov     ebx, [ebp+0]
.text:0040C6E6                 mov     edi, [esp+5Ch+arg_4]
.text:0040C6EA                 mov     ecx, [edi+ebx*4-4]
.text:0040C6EE                 movsx   esi, byte ptr [ecx]
.text:0040C6F1                 mov     ecx, ds:_iob
.text:0040C6F7                 add     ecx, 40h ; '@'
.text:0040C6FA                 mov     [esp+5Ch+var_50], esi
.text:0040C6FE                 mov     ebx, [edi]
.text:0040C700                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040C704                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040C707                 mov     [esp+5Ch+MaxCount], ebx
.text:0040C70B                 call    fprintf
.text:0040C710
.text:0040C710 loc_40C710:                             ; CODE XREF: sub_40C3D0+2EC↑j
.text:0040C710                                         ; sub_40C3D0+398↓j
.text:0040C710                 mov     ecx, [ebp+14h]
.text:0040C713                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040C716                 call    strlen
.text:0040C71B                 add     [ebp+14h], eax
.text:0040C71E                 mov     eax, [esp+5Ch+var_18]
.text:0040C722                 mov     esi, [eax+0Ch]
.text:0040C725                 mov     [ebp+8], esi
.text:0040C728
.text:0040C728 loc_40C728:                             ; CODE XREF: sub_40C3D0+4E5↓j
.text:0040C728                                         ; sub_40C3D0+73E↓j ...
.text:0040C728                 mov     eax, 3Fh ; '?'
.text:0040C72D                 jmp     loc_40C527
.text:0040C732 ; ---------------------------------------------------------------------------
.text:0040C732
.text:0040C732 loc_40C732:                             ; CODE XREF: sub_40C3D0+2FA↑j
.text:0040C732                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:0040C739                 call    ds:libintl_gettext
.text:0040C73F                 mov     edx, [esp+5Ch+var_18]
.text:0040C743                 mov     edi, [esp+5Ch+arg_4]
.text:0040C747                 mov     ecx, ds:_iob
.text:0040C74D                 mov     esi, [edx]
.text:0040C74F                 add     ecx, 40h ; '@'
.text:0040C752                 mov     [esp+5Ch+var_50], esi
.text:0040C756                 mov     ebx, [edi]
.text:0040C758                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040C75C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040C75F                 mov     [esp+5Ch+MaxCount], ebx
.text:0040C763                 call    fprintf
.text:0040C768                 jmp     short loc_40C710
.text:0040C768 ; ---------------------------------------------------------------------------
.text:0040C76A                 align 10h
.text:0040C770
.text:0040C770 loc_40C770:                             ; CODE XREF: sub_40C3D0+28C↑j
.text:0040C770                 mov     ebx, [esp+5Ch+var_18]
.text:0040C774                 cmp     dword ptr [ebx+4], 1
.text:0040C778                 jnz     loc_40C673
.text:0040C77E                 cmp     eax, [esp+5Ch+arg_0]
.text:0040C782                 jge     short loc_40C799
.text:0040C784                 mov     ebx, [esp+5Ch+arg_4]
.text:0040C788                 lea     edi, [ecx+2]
.text:0040C78B                 mov     [ebp+0], edi
.text:0040C78E                 mov     esi, [ebx+eax*4]
.text:0040C791                 mov     [ebp+0Ch], esi
.text:0040C794                 jmp     loc_40C673
.text:0040C799 ; ---------------------------------------------------------------------------
.text:0040C799
.text:0040C799 loc_40C799:                             ; CODE XREF: sub_40C3D0+3B2↑j
.text:0040C799                 mov     edx, [esp+5Ch+var_14]
.text:0040C79D                 test    edx, edx
.text:0040C79F                 jnz     short loc_40C7D0
.text:0040C7A1
.text:0040C7A1 loc_40C7A1:                             ; CODE XREF: sub_40C3D0+437↓j
.text:0040C7A1                 mov     edx, [ebp+14h]
.text:0040C7A4                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040C7A7                 call    strlen
.text:0040C7AC                 add     [ebp+14h], eax
.text:0040C7AF                 mov     eax, [esp+5Ch+var_18]
.text:0040C7B3                 mov     edi, [eax+0Ch]
.text:0040C7B6                 mov     [ebp+8], edi
.text:0040C7B9
.text:0040C7B9 loc_40C7B9:                             ; CODE XREF: sub_40C3D0+7C2↓j
.text:0040C7B9                 mov     ebp, [esp+5Ch+Str]
.text:0040C7BD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040C7C1                 setnz   bl
.text:0040C7C4                 movzx   esi, bl
.text:0040C7C7                 lea     eax, [esi+esi*4+3Ah]
.text:0040C7CB                 jmp     loc_40C527
.text:0040C7D0 ; ---------------------------------------------------------------------------
.text:0040C7D0
.text:0040C7D0 loc_40C7D0:                             ; CODE XREF: sub_40C3D0+3CF↑j
.text:0040C7D0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040C7D7                 call    ds:libintl_gettext
.text:0040C7DD                 mov     ecx, [ebp+0]
.text:0040C7E0                 mov     esi, [esp+5Ch+arg_4]
.text:0040C7E4                 mov     ebx, [esi+ecx*4-4]
.text:0040C7E8                 mov     ecx, ds:_iob
.text:0040C7EE                 mov     [esp+5Ch+var_50], ebx
.text:0040C7F2                 mov     edi, [esi]
.text:0040C7F4                 add     ecx, 40h ; '@'
.text:0040C7F7                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040C7FB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040C7FE                 mov     [esp+5Ch+MaxCount], edi
.text:0040C802                 call    fprintf
.text:0040C807                 jmp     short loc_40C7A1
.text:0040C807 ; ---------------------------------------------------------------------------
.text:0040C809                 align 10h
.text:0040C810
.text:0040C810 loc_40C810:                             ; CODE XREF: sub_40C3D0+21E↑j
.text:0040C810                                         ; sub_40C3D0+27A↑j
.text:0040C810                 mov     eax, [esp+5Ch+arg_14]
.text:0040C814                 test    eax, eax
.text:0040C816                 jz      short loc_40C846
.text:0040C818                 mov     ebx, [ebp+0]
.text:0040C81B                 mov     esi, [esp+5Ch+arg_4]
.text:0040C81F                 mov     edi, [esi+ebx*4]
.text:0040C822                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040C826                 jz      short loc_40C849
.text:0040C828                 mov     ecx, [ebp+14h]
.text:0040C82B                 mov     edx, [esp+5Ch+Str]
.text:0040C82F                 movsx   ebx, byte ptr [ecx]
.text:0040C832                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040C835                 mov     [esp+5Ch+Str2], ebx ; Val
.text:0040C839                 call    strchr
.text:0040C83E                 test    eax, eax
.text:0040C840                 jnz     loc_40C8F0
.text:0040C846
.text:0040C846 loc_40C846:                             ; CODE XREF: sub_40C3D0+446↑j
.text:0040C846                 mov     ebx, [ebp+0]
.text:0040C849
.text:0040C849 loc_40C849:                             ; CODE XREF: sub_40C3D0+456↑j
.text:0040C849                 mov     eax, [esp+5Ch+var_14]
.text:0040C84D                 test    eax, eax
.text:0040C84F                 jz      short loc_40C8A1
.text:0040C851                 mov     esi, [esp+5Ch+arg_4]
.text:0040C855                 mov     edi, [esi+ebx*4]
.text:0040C858                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040C85C                 jz      short loc_40C8BA
.text:0040C85E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:0040C865                 call    ds:libintl_gettext
.text:0040C86B                 mov     edi, [ebp+14h]
.text:0040C86E                 mov     [esp+5Ch+var_4C], edi
.text:0040C872                 mov     ebx, [ebp+0]
.text:0040C875                 mov     edi, [esp+5Ch+arg_4]
.text:0040C879                 mov     esi, [edi+ebx*4]
.text:0040C87C                 movsx   ecx, byte ptr [esi]
.text:0040C87F                 mov     esi, ds:_iob
.text:0040C885                 add     esi, 40h ; '@'
.text:0040C888                 mov     [esp+5Ch+var_50], ecx
.text:0040C88C                 mov     ebx, [edi]
.text:0040C88E                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040C892                 mov     [esp+5Ch+Str1], esi ; Stream
.text:0040C895                 mov     [esp+5Ch+MaxCount], ebx
.text:0040C899                 call    fprintf
.text:0040C89E
.text:0040C89E loc_40C89E:                             ; CODE XREF: sub_40C3D0+51D↓j
.text:0040C89E                 mov     ebx, [ebp+0]
.text:0040C8A1
.text:0040C8A1 loc_40C8A1:                             ; CODE XREF: sub_40C3D0+47F↑j
.text:0040C8A1                 mov     dword ptr [ebp+14h], offset dword_40C280
.text:0040C8A8                 lea     edx, [ebx+1]
.text:0040C8AB                 mov     [ebp+0], edx
.text:0040C8AE
.text:0040C8AE loc_40C8AE:                             ; CODE XREF: sub_40C3D0+999↓j
.text:0040C8AE                 mov     dword ptr [ebp+8], 0
.text:0040C8B5                 jmp     loc_40C728
.text:0040C8BA ; ---------------------------------------------------------------------------
.text:0040C8BA
.text:0040C8BA loc_40C8BA:                             ; CODE XREF: sub_40C3D0+48C↑j
.text:0040C8BA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:0040C8C1                 call    ds:libintl_gettext
.text:0040C8C7                 mov     ecx, [ebp+14h]
.text:0040C8CA                 mov     edi, [esp+5Ch+arg_4]
.text:0040C8CE                 mov     edx, ds:_iob
.text:0040C8D4                 mov     [esp+5Ch+var_50], ecx
.text:0040C8D8                 mov     ebx, [edi]
.text:0040C8DA                 add     edx, 40h ; '@'
.text:0040C8DD                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040C8E1                 mov     [esp+5Ch+MaxCount], ebx
.text:0040C8E5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040C8E8                 call    fprintf
.text:0040C8ED                 jmp     short loc_40C89E
.text:0040C8ED ; ---------------------------------------------------------------------------
.text:0040C8EF                 align 10h
.text:0040C8F0
.text:0040C8F0 loc_40C8F0:                             ; CODE XREF: sub_40C3D0+196↑j
.text:0040C8F0                                         ; sub_40C3D0+1B5↑j ...
.text:0040C8F0                 mov     esi, [ebp+14h]
.text:0040C8F3                 movzx   ebx, byte ptr [esi]
.text:0040C8F6                 inc     esi
.text:0040C8F7                 mov     [ebp+14h], esi
.text:0040C8FA                 mov     ecx, [esp+5Ch+Str]
.text:0040C8FE                 movsx   esi, bl
.text:0040C901                 mov     [esp+5Ch+Str2], esi ; Val
.text:0040C905                 mov     edi, esi
.text:0040C907                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040C90A                 call    strchr
.text:0040C90F                 mov     ecx, [ebp+14h]
.text:0040C912                 cmp     byte ptr [ecx], 0
.text:0040C915                 jnz     short loc_40C91A
.text:0040C917                 inc     dword ptr [ebp+0]
.text:0040C91A
.text:0040C91A loc_40C91A:                             ; CODE XREF: sub_40C3D0+545↑j
.text:0040C91A                 test    eax, eax
.text:0040C91C                 jz      loc_40CD00
.text:0040C922                 cmp     bl, 3Ah ; ':'
.text:0040C925                 jz      loc_40CD00
.text:0040C92B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040C92E                 jz      loc_40C9E6
.text:0040C934                 movzx   edx, byte ptr [eax+1]
.text:0040C938
.text:0040C938 loc_40C938:                             ; CODE XREF: sub_40C3D0+61D↓j
.text:0040C938                 cmp     dl, 3Ah ; ':'
.text:0040C93B                 jz      short loc_40C944
.text:0040C93D
.text:0040C93D loc_40C93D:                             ; CODE XREF: sub_40C3D0+590↓j
.text:0040C93D                 mov     eax, esi
.text:0040C93F                 jmp     loc_40C527
.text:0040C944 ; ---------------------------------------------------------------------------
.text:0040C944
.text:0040C944 loc_40C944:                             ; CODE XREF: sub_40C3D0+56B↑j
.text:0040C944                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:0040C948                 jz      loc_40C9D1
.text:0040C94E                 cmp     byte ptr [ecx], 0
.text:0040C951                 jz      short loc_40C962
.text:0040C953
.text:0040C953 loc_40C953:                             ; CODE XREF: sub_40C3D0+604↓j
.text:0040C953                 inc     dword ptr [ebp+0]
.text:0040C956                 mov     [ebp+0Ch], ecx
.text:0040C959
.text:0040C959 loc_40C959:                             ; CODE XREF: sub_40C3D0+5AB↓j
.text:0040C959                                         ; sub_40C3D0+5C6↓j ...
.text:0040C959                 mov     dword ptr [ebp+14h], 0
.text:0040C960                 jmp     short loc_40C93D
.text:0040C962 ; ---------------------------------------------------------------------------
.text:0040C962
.text:0040C962 loc_40C962:                             ; CODE XREF: sub_40C3D0+581↑j
.text:0040C962                 mov     ecx, [ebp+0]
.text:0040C965                 cmp     ecx, [esp+5Ch+arg_0]
.text:0040C969                 jz      short loc_40C97D
.text:0040C96B                 mov     eax, [esp+5Ch+arg_4]
.text:0040C96F                 lea     edx, [ecx+1]
.text:0040C972                 mov     [ebp+0], edx
.text:0040C975                 mov     ebx, [eax+ecx*4]
.text:0040C978                 mov     [ebp+0Ch], ebx
.text:0040C97B                 jmp     short loc_40C959
.text:0040C97D ; ---------------------------------------------------------------------------
.text:0040C97D
.text:0040C97D loc_40C97D:                             ; CODE XREF: sub_40C3D0+599↑j
.text:0040C97D                 mov     ecx, [esp+5Ch+var_14]
.text:0040C981                 test    ecx, ecx
.text:0040C983                 jnz     short loc_40C99F
.text:0040C985
.text:0040C985 loc_40C985:                             ; CODE XREF: sub_40C3D0+5FF↓j
.text:0040C985                 mov     [ebp+8], edi
.text:0040C988                 mov     edi, [esp+5Ch+Str]
.text:0040C98C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040C98F                 jz      short loc_40C998
.text:0040C991                 mov     esi, 3Fh ; '?'
.text:0040C996                 jmp     short loc_40C959
.text:0040C998 ; ---------------------------------------------------------------------------
.text:0040C998
.text:0040C998 loc_40C998:                             ; CODE XREF: sub_40C3D0+5BF↑j
.text:0040C998                 mov     esi, 3Ah ; ':'
.text:0040C99D                 jmp     short loc_40C959
.text:0040C99F ; ---------------------------------------------------------------------------
.text:0040C99F
.text:0040C99F loc_40C99F:                             ; CODE XREF: sub_40C3D0+5B3↑j
.text:0040C99F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:0040C9A6                 call    ds:libintl_gettext
.text:0040C9AC                 mov     [esp+5Ch+var_50], edi
.text:0040C9B0                 mov     ebx, [esp+5Ch+arg_4]
.text:0040C9B4                 mov     edx, ds:_iob
.text:0040C9BA                 mov     esi, [ebx]
.text:0040C9BC                 add     edx, 40h ; '@'
.text:0040C9BF                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040C9C3                 mov     [esp+5Ch+MaxCount], esi
.text:0040C9C7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040C9CA                 call    fprintf
.text:0040C9CF                 jmp     short loc_40C985
.text:0040C9D1 ; ---------------------------------------------------------------------------
.text:0040C9D1
.text:0040C9D1 loc_40C9D1:                             ; CODE XREF: sub_40C3D0+578↑j
.text:0040C9D1                 cmp     byte ptr [ecx], 0
.text:0040C9D4                 jnz     loc_40C953
.text:0040C9DA                 mov     dword ptr [ebp+0Ch], 0
.text:0040C9E1                 jmp     loc_40C959
.text:0040C9E6 ; ---------------------------------------------------------------------------
.text:0040C9E6
.text:0040C9E6 loc_40C9E6:                             ; CODE XREF: sub_40C3D0+55E↑j
.text:0040C9E6                 movzx   edx, byte ptr [eax+1]
.text:0040C9EA                 cmp     dl, 3Bh ; ';'
.text:0040C9ED                 jnz     loc_40C938
.text:0040C9F3                 mov     [esp+5Ch+var_2C], 0
.text:0040C9FB                 mov     [esp+5Ch+var_30], 0
.text:0040CA03                 mov     [esp+5Ch+var_34], 0
.text:0040CA0B                 mov     [esp+5Ch+var_38], 0
.text:0040CA13                 cmp     byte ptr [ecx], 0
.text:0040CA16                 jz      loc_40CC8B
.text:0040CA1C                 inc     dword ptr [ebp+0]
.text:0040CA1F                 mov     [ebp+0Ch], ecx
.text:0040CA22
.text:0040CA22 loc_40CA22:                             ; CODE XREF: sub_40C3D0+8D4↓j
.text:0040CA22                 mov     edi, [ebp+0Ch]
.text:0040CA25                 mov     [ebp+14h], edi
.text:0040CA28                 movzx   eax, byte ptr [edi]
.text:0040CA2B                 test    al, al
.text:0040CA2D                 jz      short loc_40CA3F
.text:0040CA2F                 cmp     al, 3Dh ; '='
.text:0040CA31                 jz      short loc_40CA3F
.text:0040CA33
.text:0040CA33 loc_40CA33:                             ; CODE XREF: sub_40C3D0+66D↓j
.text:0040CA33                 inc     edi
.text:0040CA34                 movzx   eax, byte ptr [edi]
.text:0040CA37                 test    al, al
.text:0040CA39                 jz      short loc_40CA3F
.text:0040CA3B                 cmp     al, 3Dh ; '='
.text:0040CA3D                 jnz     short loc_40CA33
.text:0040CA3F
.text:0040CA3F loc_40CA3F:                             ; CODE XREF: sub_40C3D0+65D↑j
.text:0040CA3F                                         ; sub_40C3D0+661↑j ...
.text:0040CA3F                 mov     [esp+5Ch+var_3C], 0
.text:0040CA47                 mov     esi, [esp+5Ch+arg_C]
.text:0040CA4B                 mov     eax, [esi]
.text:0040CA4D                 test    eax, eax
.text:0040CA4F                 jz      loc_40CBD0
.text:0040CA55                 mov     ecx, eax
.text:0040CA57
.text:0040CA57 loc_40CA57:                             ; CODE XREF: sub_40C3D0+6B3↓j
.text:0040CA57                 mov     ebx, [ebp+14h]
.text:0040CA5A                 mov     eax, edi
.text:0040CA5C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040CA5F                 sub     eax, ebx
.text:0040CA61                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:0040CA65                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:0040CA69                 call    strncmp
.text:0040CA6E                 test    eax, eax
.text:0040CA70                 jz      loc_40CC37
.text:0040CA76
.text:0040CA76 loc_40CA76:                             ; CODE XREF: sub_40C3D0+88C↓j
.text:0040CA76                                         ; sub_40C3D0+89D↓j
.text:0040CA76                 inc     [esp+5Ch+var_3C]
.text:0040CA7A                 add     esi, 10h
.text:0040CA7D                 mov     edx, [esi]
.text:0040CA7F                 test    edx, edx
.text:0040CA81                 mov     ecx, edx
.text:0040CA83                 jnz     short loc_40CA57
.text:0040CA85
.text:0040CA85 loc_40CA85:                             ; CODE XREF: sub_40C3D0+8B6↓j
.text:0040CA85                 mov     esi, [esp+5Ch+var_34]
.text:0040CA89                 test    esi, esi
.text:0040CA8B                 jz      short loc_40CA99
.text:0040CA8D                 mov     ebx, [esp+5Ch+var_30]
.text:0040CA91                 test    ebx, ebx
.text:0040CA93                 jz      loc_40CBE1
.text:0040CA99
.text:0040CA99 loc_40CA99:                             ; CODE XREF: sub_40C3D0+6BB↑j
.text:0040CA99                 mov     esi, [esp+5Ch+var_2C]
.text:0040CA9D                 test    esi, esi
.text:0040CA9F                 jz      loc_40CBD0
.text:0040CAA5                 cmp     byte ptr [edi], 0
.text:0040CAA8                 jz      loc_40CB50
.text:0040CAAE                 mov     ecx, [esp+5Ch+var_2C]
.text:0040CAB2                 mov     ebx, [ecx+4]
.text:0040CAB5                 test    ebx, ebx
.text:0040CAB7                 jz      short loc_40CAF8
.text:0040CAB9                 lea     edx, [edi+1]
.text:0040CABC                 mov     [ebp+0Ch], edx
.text:0040CABF
.text:0040CABF loc_40CABF:                             ; CODE XREF: sub_40C3D0+788↓j
.text:0040CABF                                         ; sub_40C3D0+7A7↓j
.text:0040CABF                 mov     edi, [ebp+14h]
.text:0040CAC2                 mov     [esp+5Ch+Str1], edi ; Str
.text:0040CAC5                 call    strlen
.text:0040CACA                 add     [ebp+14h], eax
.text:0040CACD                 mov     eax, [esp+5Ch+arg_10]
.text:0040CAD1                 test    eax, eax
.text:0040CAD3                 jz      short loc_40CAE0
.text:0040CAD5                 mov     edx, [esp+5Ch+var_38]
.text:0040CAD9                 mov     ebp, [esp+5Ch+arg_10]
.text:0040CADD                 mov     [ebp+0], edx
.text:0040CAE0
.text:0040CAE0 loc_40CAE0:                             ; CODE XREF: sub_40C3D0+703↑j
.text:0040CAE0                 mov     eax, [esp+5Ch+var_2C]
.text:0040CAE4                 mov     ecx, [eax+8]
.text:0040CAE7                 test    ecx, ecx
.text:0040CAE9                 jnz     loc_40C6AA
.text:0040CAEF                 mov     ecx, [esp+5Ch+var_2C]
.text:0040CAF3                 jmp     loc_40C6A2
.text:0040CAF8 ; ---------------------------------------------------------------------------
.text:0040CAF8
.text:0040CAF8 loc_40CAF8:                             ; CODE XREF: sub_40C3D0+6E7↑j
.text:0040CAF8                 mov     eax, [esp+5Ch+var_14]
.text:0040CAFC                 test    eax, eax
.text:0040CAFE                 jnz     short loc_40CB13
.text:0040CB00
.text:0040CB00 loc_40CB00:                             ; CODE XREF: sub_40C3D0+779↓j
.text:0040CB00                 mov     ecx, [ebp+14h]
.text:0040CB03                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040CB06                 call    strlen
.text:0040CB0B                 add     [ebp+14h], eax
.text:0040CB0E                 jmp     loc_40C728
.text:0040CB13 ; ---------------------------------------------------------------------------
.text:0040CB13
.text:0040CB13 loc_40CB13:                             ; CODE XREF: sub_40C3D0+72E↑j
.text:0040CB13                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040CB1A                 call    ds:libintl_gettext
.text:0040CB20                 mov     edx, [esp+5Ch+var_2C]
.text:0040CB24                 mov     ebx, [esp+5Ch+arg_4]
.text:0040CB28                 mov     edi, [edx]
.text:0040CB2A                 mov     [esp+5Ch+var_50], edi
.text:0040CB2E                 mov     edi, ds:_iob
.text:0040CB34                 mov     esi, [ebx]
.text:0040CB36                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040CB3A                 add     edi, 40h ; '@'
.text:0040CB3D                 mov     [esp+5Ch+MaxCount], esi
.text:0040CB41                 mov     [esp+5Ch+Str1], edi ; Stream
.text:0040CB44                 call    fprintf
.text:0040CB49                 jmp     short loc_40CB00
.text:0040CB49 ; ---------------------------------------------------------------------------
.text:0040CB4B                 align 10h
.text:0040CB50
.text:0040CB50 loc_40CB50:                             ; CODE XREF: sub_40C3D0+6D8↑j
.text:0040CB50                 mov     esi, [esp+5Ch+var_2C]
.text:0040CB54                 cmp     dword ptr [esi+4], 1
.text:0040CB58                 jnz     loc_40CABF
.text:0040CB5E                 mov     ecx, [ebp+0]
.text:0040CB61                 cmp     ecx, [esp+5Ch+arg_0]
.text:0040CB65                 jge     short loc_40CB7C
.text:0040CB67                 mov     eax, [esp+5Ch+arg_4]
.text:0040CB6B                 lea     ebx, [ecx+1]
.text:0040CB6E                 mov     [ebp+0], ebx
.text:0040CB71                 mov     edi, [eax+ecx*4]
.text:0040CB74                 mov     [ebp+0Ch], edi
.text:0040CB77                 jmp     loc_40CABF
.text:0040CB7C ; ---------------------------------------------------------------------------
.text:0040CB7C
.text:0040CB7C loc_40CB7C:                             ; CODE XREF: sub_40C3D0+795↑j
.text:0040CB7C                 mov     edx, [esp+5Ch+var_14]
.text:0040CB80                 test    edx, edx
.text:0040CB82                 jnz     short loc_40CB97
.text:0040CB84
.text:0040CB84 loc_40CB84:                             ; CODE XREF: sub_40C3D0+7FE↓j
.text:0040CB84                 mov     edx, [ebp+14h]
.text:0040CB87                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040CB8A                 call    strlen
.text:0040CB8F                 add     [ebp+14h], eax
.text:0040CB92                 jmp     loc_40C7B9
.text:0040CB97 ; ---------------------------------------------------------------------------
.text:0040CB97
.text:0040CB97 loc_40CB97:                             ; CODE XREF: sub_40C3D0+7B2↑j
.text:0040CB97                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040CB9E                 call    ds:libintl_gettext
.text:0040CBA4                 mov     ecx, [ebp+0]
.text:0040CBA7                 mov     ebx, [esp+5Ch+arg_4]
.text:0040CBAB                 mov     edi, [ebx+ecx*4-4]
.text:0040CBAF                 mov     ecx, ds:_iob
.text:0040CBB5                 mov     [esp+5Ch+var_50], edi
.text:0040CBB9                 mov     esi, [ebx]
.text:0040CBBB                 add     ecx, 40h ; '@'
.text:0040CBBE                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040CBC2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040CBC5                 mov     [esp+5Ch+MaxCount], esi
.text:0040CBC9                 call    fprintf
.text:0040CBCE                 jmp     short loc_40CB84
.text:0040CBD0 ; ---------------------------------------------------------------------------
.text:0040CBD0
.text:0040CBD0 loc_40CBD0:                             ; CODE XREF: sub_40C3D0+67F↑j
.text:0040CBD0                                         ; sub_40C3D0+6CF↑j
.text:0040CBD0                 mov     dword ptr [ebp+14h], 0
.text:0040CBD7                 mov     eax, 57h ; 'W'
.text:0040CBDC                 jmp     loc_40C527
.text:0040CBE1 ; ---------------------------------------------------------------------------
.text:0040CBE1
.text:0040CBE1 loc_40CBE1:                             ; CODE XREF: sub_40C3D0+6C3↑j
.text:0040CBE1                 mov     edi, [esp+5Ch+var_14]
.text:0040CBE5                 test    edi, edi
.text:0040CBE7                 jnz     short loc_40CBFF
.text:0040CBE9
.text:0040CBE9 loc_40CBE9:                             ; CODE XREF: sub_40C3D0+865↓j
.text:0040CBE9                 mov     edx, [ebp+14h]
.text:0040CBEC                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040CBEF                 call    strlen
.text:0040CBF4                 add     [ebp+14h], eax
.text:0040CBF7                 inc     dword ptr [ebp+0]
.text:0040CBFA                 jmp     loc_40C728
.text:0040CBFF ; ---------------------------------------------------------------------------
.text:0040CBFF
.text:0040CBFF loc_40CBFF:                             ; CODE XREF: sub_40C3D0+817↑j
.text:0040CBFF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:0040CC06                 call    ds:libintl_gettext
.text:0040CC0C                 mov     ecx, [ebp+0]
.text:0040CC0F                 mov     ebx, [esp+5Ch+arg_4]
.text:0040CC13                 mov     edi, [ebx+ecx*4]
.text:0040CC16                 mov     ecx, ds:_iob
.text:0040CC1C                 mov     [esp+5Ch+var_50], edi
.text:0040CC20                 mov     esi, [ebx]
.text:0040CC22                 add     ecx, 40h ; '@'
.text:0040CC25                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040CC29                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040CC2C                 mov     [esp+5Ch+MaxCount], esi
.text:0040CC30                 call    fprintf
.text:0040CC35                 jmp     short loc_40CBE9
.text:0040CC37 ; ---------------------------------------------------------------------------
.text:0040CC37
.text:0040CC37 loc_40CC37:                             ; CODE XREF: sub_40C3D0+6A0↑j
.text:0040CC37                 mov     edx, [ebp+14h]
.text:0040CC3A                 mov     ebx, edi
.text:0040CC3C                 mov     ecx, [esi]
.text:0040CC3E                 sub     ebx, edx
.text:0040CC40                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040CC43                 call    strlen
.text:0040CC48                 cmp     ebx, eax
.text:0040CC4A                 jz      short loc_40CC72
.text:0040CC4C                 mov     ebx, [esp+5Ch+var_2C]
.text:0040CC50                 test    ebx, ebx
.text:0040CC52                 jz      short loc_40CC61
.text:0040CC54                 mov     [esp+5Ch+var_34], 1
.text:0040CC5C                 jmp     loc_40CA76
.text:0040CC61 ; ---------------------------------------------------------------------------
.text:0040CC61
.text:0040CC61 loc_40CC61:                             ; CODE XREF: sub_40C3D0+882↑j
.text:0040CC61                 mov     [esp+5Ch+var_2C], esi
.text:0040CC65                 mov     ecx, [esp+5Ch+var_3C]
.text:0040CC69                 mov     [esp+5Ch+var_38], ecx
.text:0040CC6D                 jmp     loc_40CA76
.text:0040CC72 ; ---------------------------------------------------------------------------
.text:0040CC72
.text:0040CC72 loc_40CC72:                             ; CODE XREF: sub_40C3D0+87A↑j
.text:0040CC72                 mov     [esp+5Ch+var_2C], esi
.text:0040CC76                 mov     eax, [esp+5Ch+var_3C]
.text:0040CC7A                 mov     [esp+5Ch+var_30], 1
.text:0040CC82                 mov     [esp+5Ch+var_38], eax
.text:0040CC86                 jmp     loc_40CA85
.text:0040CC8B ; ---------------------------------------------------------------------------
.text:0040CC8B
.text:0040CC8B loc_40CC8B:                             ; CODE XREF: sub_40C3D0+646↑j
.text:0040CC8B                 mov     edx, [ebp+0]
.text:0040CC8E                 cmp     edx, [esp+5Ch+arg_0]
.text:0040CC92                 jz      short loc_40CCA9
.text:0040CC94                 mov     ebx, [esp+5Ch+arg_4]
.text:0040CC98                 lea     esi, [edx+1]
.text:0040CC9B                 mov     [ebp+0], esi
.text:0040CC9E                 mov     edi, [ebx+edx*4]
.text:0040CCA1                 mov     [ebp+0Ch], edi
.text:0040CCA4                 jmp     loc_40CA22
.text:0040CCA9 ; ---------------------------------------------------------------------------
.text:0040CCA9
.text:0040CCA9 loc_40CCA9:                             ; CODE XREF: sub_40C3D0+8C2↑j
.text:0040CCA9                 mov     edi, [esp+5Ch+var_14]
.text:0040CCAD                 test    edi, edi
.text:0040CCAF                 jnz     short loc_40CCCC
.text:0040CCB1
.text:0040CCB1 loc_40CCB1:                             ; CODE XREF: sub_40C3D0+92C↓j
.text:0040CCB1                 mov     [ebp+8], esi
.text:0040CCB4                 mov     ebp, [esp+5Ch+Str]
.text:0040CCB8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040CCBC                 jz      short loc_40CCC8
.text:0040CCBE                 mov     bl, 3Fh ; '?'
.text:0040CCC0
.text:0040CCC0 loc_40CCC0:                             ; CODE XREF: sub_40C3D0+8FA↓j
.text:0040CCC0                 movsx   eax, bl
.text:0040CCC3                 jmp     loc_40C527
.text:0040CCC8 ; ---------------------------------------------------------------------------
.text:0040CCC8
.text:0040CCC8 loc_40CCC8:                             ; CODE XREF: sub_40C3D0+8EC↑j
.text:0040CCC8                 mov     bl, 3Ah ; ':'
.text:0040CCCA                 jmp     short loc_40CCC0
.text:0040CCCC ; ---------------------------------------------------------------------------
.text:0040CCCC
.text:0040CCCC loc_40CCCC:                             ; CODE XREF: sub_40C3D0+8DF↑j
.text:0040CCCC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:0040CCD3                 call    ds:libintl_gettext
.text:0040CCD9                 mov     [esp+5Ch+var_50], esi
.text:0040CCDD                 mov     edx, [esp+5Ch+arg_4]
.text:0040CCE1                 mov     ecx, ds:_iob
.text:0040CCE7                 mov     ebx, [edx]
.text:0040CCE9                 add     ecx, 40h ; '@'
.text:0040CCEC                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040CCF0                 mov     [esp+5Ch+MaxCount], ebx
.text:0040CCF4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040CCF7                 call    fprintf
.text:0040CCFC                 jmp     short loc_40CCB1
.text:0040CCFC ; ---------------------------------------------------------------------------
.text:0040CCFE                 align 10h
.text:0040CD00
.text:0040CD00 loc_40CD00:                             ; CODE XREF: sub_40C3D0+54C↑j
.text:0040CD00                                         ; sub_40C3D0+555↑j
.text:0040CD00                 mov     eax, [esp+5Ch+var_14]
.text:0040CD04                 test    eax, eax
.text:0040CD06                 jz      short loc_40CD3F
.text:0040CD08                 mov     ebx, [ebp+1Ch]
.text:0040CD0B                 test    ebx, ebx
.text:0040CD0D                 jz      short loc_40CD47
.text:0040CD0F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:0040CD16
.text:0040CD16 loc_40CD16:                             ; CODE XREF: sub_40C3D0+97E↓j
.text:0040CD16                 call    ds:libintl_gettext
.text:0040CD1C                 mov     [esp+5Ch+var_50], esi
.text:0040CD20                 mov     ebx, [esp+5Ch+arg_4]
.text:0040CD24                 mov     edx, ds:_iob
.text:0040CD2A                 mov     esi, [ebx]
.text:0040CD2C                 add     edx, 40h ; '@'
.text:0040CD2F                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040CD33                 mov     [esp+5Ch+MaxCount], esi
.text:0040CD37                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040CD3A                 call    fprintf
.text:0040CD3F
.text:0040CD3F loc_40CD3F:                             ; CODE XREF: sub_40C3D0+936↑j
.text:0040CD3F                 mov     [ebp+8], edi
.text:0040CD42                 jmp     loc_40C728
.text:0040CD47 ; ---------------------------------------------------------------------------
.text:0040CD47
.text:0040CD47 loc_40CD47:                             ; CODE XREF: sub_40C3D0+93D↑j
.text:0040CD47                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040CD4E                 jmp     short loc_40CD16
.text:0040CD50 ; ---------------------------------------------------------------------------
.text:0040CD50
.text:0040CD50 loc_40CD50:                             ; CODE XREF: sub_40C3D0+26E↑j
.text:0040CD50                 mov     edi, [esp+5Ch+var_14]
.text:0040CD54                 test    edi, edi
.text:0040CD56                 jnz     short loc_40CD6E
.text:0040CD58
.text:0040CD58 loc_40CD58:                             ; CODE XREF: sub_40C3D0+9D4↓j
.text:0040CD58                 mov     edx, [ebp+14h]
.text:0040CD5B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040CD5E                 call    strlen
.text:0040CD63                 add     [ebp+14h], eax
.text:0040CD66                 inc     dword ptr [ebp+0]
.text:0040CD69                 jmp     loc_40C8AE
.text:0040CD6E ; ---------------------------------------------------------------------------
.text:0040CD6E
.text:0040CD6E loc_40CD6E:                             ; CODE XREF: sub_40C3D0+986↑j
.text:0040CD6E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:0040CD75                 call    ds:libintl_gettext
.text:0040CD7B                 mov     ebx, [ebp+0]
.text:0040CD7E                 mov     edi, [esp+5Ch+arg_4]
.text:0040CD82                 mov     ecx, [edi+ebx*4]
.text:0040CD85                 mov     ebx, ds:_iob
.text:0040CD8B                 mov     [esp+5Ch+var_50], ecx
.text:0040CD8F                 mov     esi, [edi]
.text:0040CD91                 add     ebx, 40h ; '@'
.text:0040CD94                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040CD98                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040CD9B                 mov     [esp+5Ch+MaxCount], esi
.text:0040CD9F                 call    fprintf
.text:0040CDA4                 jmp     short loc_40CD58
.text:0040CDA6 ; ---------------------------------------------------------------------------
.text:0040CDA6
.text:0040CDA6 loc_40CDA6:                             ; CODE XREF: sub_40C3D0+246↑j
.text:0040CDA6                 mov     ecx, [ebp+14h]
.text:0040CDA9                 mov     ebx, edi
.text:0040CDAB                 mov     edx, [esi]
.text:0040CDAD                 sub     ebx, ecx
.text:0040CDAF                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040CDB2                 call    strlen
.text:0040CDB7                 cmp     ebx, eax
.text:0040CDB9                 jz      short loc_40CE11
.text:0040CDBB                 mov     ebx, [esp+5Ch+var_18]
.text:0040CDBF                 test    ebx, ebx
.text:0040CDC1                 jz      short loc_40CE00
.text:0040CDC3                 mov     edx, [esp+5Ch+arg_14]
.text:0040CDC7                 test    edx, edx
.text:0040CDC9                 jnz     short loc_40CDD7
.text:0040CDCB                 mov     ecx, [esp+5Ch+var_18]
.text:0040CDCF                 mov     ebx, [esi+4]
.text:0040CDD2                 cmp     [ecx+4], ebx
.text:0040CDD5                 jz      short loc_40CDE4
.text:0040CDD7
.text:0040CDD7 loc_40CDD7:                             ; CODE XREF: sub_40C3D0+9F9↑j
.text:0040CDD7                                         ; sub_40C3D0+A1A↓j ...
.text:0040CDD7                 mov     [esp+5Ch+var_20], 1
.text:0040CDDF                 jmp     loc_40C61C
.text:0040CDE4 ; ---------------------------------------------------------------------------
.text:0040CDE4
.text:0040CDE4 loc_40CDE4:                             ; CODE XREF: sub_40C3D0+A05↑j
.text:0040CDE4                 mov     edx, [esi+8]
.text:0040CDE7                 cmp     [ecx+8], edx
.text:0040CDEA                 jnz     short loc_40CDD7
.text:0040CDEC                 mov     ebx, [esi+0Ch]
.text:0040CDEF                 cmp     [ecx+0Ch], ebx
.text:0040CDF2                 jnz     short loc_40CDD7
.text:0040CDF4                 jmp     loc_40C61C
.text:0040CDF4 ; ---------------------------------------------------------------------------
.text:0040CDF9                 align 10h
.text:0040CE00
.text:0040CE00 loc_40CE00:                             ; CODE XREF: sub_40C3D0+9F1↑j
.text:0040CE00                 mov     [esp+5Ch+var_18], esi
.text:0040CE04                 mov     eax, [esp+5Ch+var_28]
.text:0040CE08                 mov     [esp+5Ch+var_24], eax
.text:0040CE0C                 jmp     loc_40C61C
.text:0040CE11 ; ---------------------------------------------------------------------------
.text:0040CE11
.text:0040CE11 loc_40CE11:                             ; CODE XREF: sub_40C3D0+9E9↑j
.text:0040CE11                 mov     [esp+5Ch+var_18], esi
.text:0040CE15                 mov     ecx, [esp+5Ch+var_28]
.text:0040CE19                 mov     [esp+5Ch+var_1C], 1
.text:0040CE21                 mov     [esp+5Ch+var_24], ecx
.text:0040CE25                 jmp     loc_40C630
.text:0040CE2A ; ---------------------------------------------------------------------------
.text:0040CE2A
.text:0040CE2A loc_40CE2A:                             ; CODE XREF: sub_40C3D0+1BF↑j
.text:0040CE2A                 mov     eax, [esp+5Ch+Str]
.text:0040CE2E                 movsx   esi, dl
.text:0040CE31                 mov     [esp+5Ch+Str2], esi ; Val
.text:0040CE35                 mov     [esp+5Ch+Str1], eax ; Str
.text:0040CE38                 call    strchr
.text:0040CE3D                 test    eax, eax
.text:0040CE3F                 jnz     loc_40C8F0
.text:0040CE45                 jmp     loc_40C595
.text:0040CE4A ; ---------------------------------------------------------------------------
.text:0040CE4A
.text:0040CE4A loc_40CE4A:                             ; CODE XREF: sub_40C3D0+17C↑j
.text:0040CE4A                 mov     ecx, 1
.text:0040CE4F                 jmp     loc_40C552
.text:0040CE54 ; ---------------------------------------------------------------------------
.text:0040CE54
.text:0040CE54 loc_40CE54:                             ; CODE XREF: sub_40C3D0+D4↑j
.text:0040CE54                                         ; sub_40C3D0+130↑j
.text:0040CE54                 mov     eax, [ebp+20h]
.text:0040CE57                 cmp     eax, [ebp+24h]
.text:0040CE5A                 jz      loc_40C530
.text:0040CE60                 mov     [ebp+0], eax
.text:0040CE63                 jmp     loc_40C530
.text:0040CE68 ; ---------------------------------------------------------------------------
.text:0040CE68
.text:0040CE68 loc_40CE68:                             ; CODE XREF: sub_40C3D0+FE↑j
.text:0040CE68                 mov     [ebp+20h], eax
.text:0040CE6B                 jmp     loc_40C4F0
.text:0040CE70 ; ---------------------------------------------------------------------------
.text:0040CE70
.text:0040CE70 loc_40CE70:                             ; CODE XREF: sub_40C3D0+CA↑j
.text:0040CE70                 mov     edx, [ebp+20h]
.text:0040CE73                 mov     eax, [ebp+24h]
.text:0040CE76                 cmp     edx, eax
.text:0040CE78                 jz      short loc_40CEF0
.text:0040CE7A                 cmp     eax, ebx
.text:0040CE7C                 jz      short loc_40CE91
.text:0040CE7E                 mov     [esp+5Ch+Str2], ebp
.text:0040CE82                 mov     ebx, [esp+5Ch+arg_4]
.text:0040CE86                 mov     [esp+5Ch+Str1], ebx
.text:0040CE89                 call    sub_40D080
.text:0040CE8E                 mov     ebx, [ebp+0]
.text:0040CE91
.text:0040CE91 loc_40CE91:                             ; CODE XREF: sub_40C3D0+AAC↑j
.text:0040CE91                                         ; sub_40C3D0+B22↓j ...
.text:0040CE91                 cmp     ebx, [esp+5Ch+arg_0]
.text:0040CE95                 jge     short loc_40CEE0
.text:0040CE97                 mov     esi, [esp+5Ch+arg_4]
.text:0040CE9B                 mov     eax, [esi+ebx*4]
.text:0040CE9E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:0040CEA1                 jz      short loc_40CEE8
.text:0040CEA3                 lea     esi, [esi+0]
.text:0040CEA9                 lea     edi, [edi+0]
.text:0040CEB0
.text:0040CEB0 loc_40CEB0:                             ; CODE XREF: sub_40C3D0+AFC↓j
.text:0040CEB0                                         ; sub_40C3D0+B1C↓j
.text:0040CEB0                 lea     eax, [ebx+1]
.text:0040CEB3                 mov     ebx, eax
.text:0040CEB5                 mov     [ebp+0], eax
.text:0040CEB8                 cmp     eax, [esp+5Ch+arg_0]
.text:0040CEBC                 jge     short loc_40CEE0
.text:0040CEBE                 mov     edi, [esp+5Ch+arg_4]
.text:0040CEC2                 mov     edx, [edi+eax*4]
.text:0040CEC5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:0040CEC8                 jz      short loc_40CED0
.text:0040CECA
.text:0040CECA loc_40CECA:                             ; CODE XREF: sub_40C3D0+B04↓j
.text:0040CECA                 mov     ebx, eax
.text:0040CECC                 jmp     short loc_40CEB0
.text:0040CECC ; ---------------------------------------------------------------------------
.text:0040CECE                 align 10h
.text:0040CED0
.text:0040CED0 loc_40CED0:                             ; CODE XREF: sub_40C3D0+AF8↑j
.text:0040CED0                 cmp     byte ptr [edx+1], 0
.text:0040CED4                 jz      short loc_40CECA
.text:0040CED6                 lea     esi, [esi+0]
.text:0040CED9                 lea     edi, [edi+0]
.text:0040CEE0
.text:0040CEE0 loc_40CEE0:                             ; CODE XREF: sub_40C3D0+AC5↑j
.text:0040CEE0                                         ; sub_40C3D0+AEC↑j ...
.text:0040CEE0                 mov     [ebp+24h], ebx
.text:0040CEE3                 jmp     loc_40C4A0
.text:0040CEE8 ; ---------------------------------------------------------------------------
.text:0040CEE8
.text:0040CEE8 loc_40CEE8:                             ; CODE XREF: sub_40C3D0+AD1↑j
.text:0040CEE8                 cmp     byte ptr [eax+1], 0
.text:0040CEEC                 jz      short loc_40CEB0
.text:0040CEEE                 jmp     short loc_40CEE0
.text:0040CEF0 ; ---------------------------------------------------------------------------
.text:0040CEF0
.text:0040CEF0 loc_40CEF0:                             ; CODE XREF: sub_40C3D0+AA8↑j
.text:0040CEF0                 cmp     edx, ebx
.text:0040CEF2                 jz      short loc_40CE91
.text:0040CEF4                 mov     [ebp+20h], ebx
.text:0040CEF7                 jmp     short loc_40CE91
.text:0040CEF9 ; ---------------------------------------------------------------------------
.text:0040CEF9
.text:0040CEF9 loc_40CEF9:                             ; CODE XREF: sub_40C3D0+88↑j
.text:0040CEF9                 mov     dword ptr [ebp+18h], 0
.text:0040CF00                 mov     esi, [esp+5Ch+Str]
.text:0040CF04
.text:0040CF04 loc_40CF04:                             ; CODE XREF: sub_40C3D0+B49↓j
.text:0040CF04                 inc     esi
.text:0040CF05                 jmp     loc_40C468
.text:0040CF05 ; ---------------------------------------------------------------------------
.text:0040CF0A                 align 10h
.text:0040CF10
.text:0040CF10 loc_40CF10:                             ; CODE XREF: sub_40C3D0+80↑j
.text:0040CF10                 mov     dword ptr [ebp+18h], 2
.text:0040CF17                 mov     esi, ecx
.text:0040CF19                 jmp     short loc_40CF04
.text:0040CF19 ; ---------------------------------------------------------------------------
.text:0040CF1B                 align 10h
.text:0040CF20
.text:0040CF20 loc_40CF20:                             ; CODE XREF: sub_40C3D0+69↑j
.text:0040CF20                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:0040CF27                 call    getenv
.text:0040CF2C                 test    eax, eax
.text:0040CF2E                 jz      loc_40C444
.text:0040CF34                 jmp     loc_40C43F
.text:0040CF34 ; ---------------------------------------------------------------------------
.text:0040CF39                 align 10h
.text:0040CF40
.text:0040CF40 loc_40CF40:                             ; CODE XREF: sub_40C3D0+3F↑j
.text:0040CF40                 mov     dword ptr [ebp+0], 1
.text:0040CF47                 mov     ebx, 1
.text:0040CF4C                 jmp     loc_40C420
.text:0040CF4C sub_40C3D0      endp
.text:0040CF4C
.text:0040CF51 ; ---------------------------------------------------------------------------
.text:0040CF51                 jmp     short sub_40CF60
.text:0040CF51 ; ---------------------------------------------------------------------------
.text:0040CF53                 align 10h
.text:0040CF60
.text:0040CF60 ; =============== S U B R O U T I N E =======================================
.text:0040CF60
.text:0040CF60
.text:0040CF60 ; int __cdecl sub_40CF60(int, int, char *, int, int, int, int)
.text:0040CF60 sub_40CF60      proc near               ; CODE XREF: .text:0040CF51↑j
.text:0040CF60                                         ; sub_40D6A0+3A↓p ...
.text:0040CF60
.text:0040CF60 var_2C          = dword ptr -2Ch
.text:0040CF60 var_28          = dword ptr -28h
.text:0040CF60 Str             = dword ptr -24h
.text:0040CF60 var_20          = dword ptr -20h
.text:0040CF60 var_1C          = dword ptr -1Ch
.text:0040CF60 var_18          = dword ptr -18h
.text:0040CF60 var_14          = dword ptr -14h
.text:0040CF60 var_10          = dword ptr -10h
.text:0040CF60 arg_0           = dword ptr  4
.text:0040CF60 arg_4           = dword ptr  8
.text:0040CF60 arg_8           = dword ptr  0Ch
.text:0040CF60 arg_C           = dword ptr  10h
.text:0040CF60 arg_10          = dword ptr  14h
.text:0040CF60 arg_14          = dword ptr  18h
.text:0040CF60 arg_18          = dword ptr  1Ch
.text:0040CF60
.text:0040CF60                 sub     esp, 2Ch
.text:0040CF63                 mov     edx, dword_40F040
.text:0040CF69                 mov     [esp+2Ch+var_10], offset dword_410270 ; int
.text:0040CF71                 mov     ecx, dword_40F044
.text:0040CF77                 mov     ds:dword_410270, edx
.text:0040CF7D                 mov     edx, [esp+2Ch+arg_18]
.text:0040CF81                 mov     ds:dword_410274, ecx
.text:0040CF87                 mov     ecx, [esp+2Ch+arg_14]
.text:0040CF8B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040CF8F                 mov     edx, [esp+2Ch+arg_10]
.text:0040CF93                 mov     [esp+2Ch+var_18], ecx ; int
.text:0040CF97                 mov     ecx, [esp+2Ch+arg_C]
.text:0040CF9B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040CF9F                 mov     edx, [esp+2Ch+arg_8]
.text:0040CFA3                 mov     [esp+2Ch+var_20], ecx ; int
.text:0040CFA7                 mov     ecx, [esp+2Ch+arg_4]
.text:0040CFAB                 mov     [esp+2Ch+Str], edx ; Str
.text:0040CFAF                 mov     edx, [esp+2Ch+arg_0]
.text:0040CFB3                 mov     [esp+2Ch+var_28], ecx ; int
.text:0040CFB7                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040CFBA                 call    sub_40C3D0
.text:0040CFBF                 mov     ecx, ds:dword_410270
.text:0040CFC5                 mov     dword_40F040, ecx
.text:0040CFCB                 mov     ecx, ds:dword_41027C
.text:0040CFD1                 mov     ds:dword_4102F0, ecx
.text:0040CFD7                 mov     ecx, ds:dword_410278
.text:0040CFDD                 mov     dword_40F048, ecx
.text:0040CFE3                 add     esp, 2Ch
.text:0040CFE6                 retn
.text:0040CFE6 sub_40CF60      endp
.text:0040CFE6
.text:0040CFE6 ; ---------------------------------------------------------------------------
.text:0040CFE7                 align 10h
.text:0040CFF0                 sub     esp, 2Ch
.text:0040CFF3                 mov     edx, dword_40F040
.text:0040CFF9                 mov     dword ptr [esp+1Ch], offset dword_410270
.text:0040D001                 mov     ecx, dword_40F044
.text:0040D007                 mov     dword ptr [esp+18h], 1
.text:0040D00F                 mov     ds:dword_410270, edx
.text:0040D015                 mov     edx, [esp+38h]
.text:0040D019                 mov     ds:dword_410274, ecx
.text:0040D01F                 mov     ecx, [esp+34h]
.text:0040D023                 mov     [esp+8], edx
.text:0040D027                 mov     edx, [esp+30h]
.text:0040D02B                 mov     [esp+4], ecx
.text:0040D02F                 mov     dword ptr [esp+14h], 0
.text:0040D037                 mov     dword ptr [esp+10h], 0
.text:0040D03F                 mov     dword ptr [esp+0Ch], 0
.text:0040D047                 mov     [esp], edx
.text:0040D04A                 call    sub_40C3D0
.text:0040D04F                 mov     ecx, ds:dword_410270
.text:0040D055                 mov     dword_40F040, ecx
.text:0040D05B                 mov     ecx, ds:dword_41027C
.text:0040D061                 mov     ds:dword_4102F0, ecx
.text:0040D067                 mov     ecx, ds:dword_410278
.text:0040D06D                 mov     dword_40F048, ecx
.text:0040D073                 add     esp, 2Ch
.text:0040D076                 retn
.text:0040D076 ; ---------------------------------------------------------------------------
.text:0040D077                 align 10h
.text:0040D080
.text:0040D080 ; =============== S U B R O U T I N E =======================================
.text:0040D080
.text:0040D080
.text:0040D080 sub_40D080      proc near               ; CODE XREF: sub_40C3D0+113↑p
.text:0040D080                                         ; sub_40C3D0+AB9↑p
.text:0040D080
.text:0040D080 var_2C          = dword ptr -2Ch
.text:0040D080 var_28          = dword ptr -28h
.text:0040D080 var_24          = dword ptr -24h
.text:0040D080 var_20          = dword ptr -20h
.text:0040D080 var_1C          = dword ptr -1Ch
.text:0040D080 var_18          = dword ptr -18h
.text:0040D080 var_14          = dword ptr -14h
.text:0040D080 arg_0           = dword ptr  4
.text:0040D080 arg_4           = dword ptr  8
.text:0040D080
.text:0040D080                 push    ebp
.text:0040D081                 push    edi
.text:0040D082                 push    esi
.text:0040D083                 push    ebx
.text:0040D084                 sub     esp, 1Ch
.text:0040D087                 mov     ecx, [esp+2Ch+arg_4]
.text:0040D08B                 mov     eax, [esp+2Ch+arg_4]
.text:0040D08F                 mov     ebx, [esp+2Ch+arg_4]
.text:0040D093                 mov     edx, [ecx+20h]
.text:0040D096                 mov     edi, [esp+2Ch+arg_0]
.text:0040D09A                 mov     ecx, [ebx]
.text:0040D09C                 mov     [esp+2Ch+var_2C], edx
.text:0040D09F                 mov     [esp+2Ch+var_14], edx
.text:0040D0A3                 mov     edx, [eax+24h]
.text:0040D0A6                 mov     [esp+2Ch+var_28], ecx
.text:0040D0AA                 mov     [esp+2Ch+var_1C], ecx
.text:0040D0AE                 cmp     ecx, edx
.text:0040D0B0                 mov     [esp+2Ch+var_18], edx
.text:0040D0B4                 jle     short loc_40D130
.text:0040D0B6                 mov     esi, [esp+2Ch+var_2C]
.text:0040D0B9                 cmp     edx, esi
.text:0040D0BB                 jle     short loc_40D130
.text:0040D0BD                 lea     esi, [esi+0]
.text:0040D0C0
.text:0040D0C0 loc_40D0C0:                             ; CODE XREF: sub_40D080+A1↓j
.text:0040D0C0                 mov     ebx, [esp+2Ch+var_1C]
.text:0040D0C4                 mov     edx, [esp+2Ch+var_18]
.text:0040D0C8                 mov     ebp, [esp+2Ch+var_18]
.text:0040D0CC                 mov     eax, [esp+2Ch+var_14]
.text:0040D0D0                 sub     ebx, edx
.text:0040D0D2                 mov     [esp+2Ch+var_20], ebx
.text:0040D0D6                 sub     ebp, eax
.text:0040D0D8                 cmp     ebx, ebp
.text:0040D0DA                 jle     short loc_40D155
.text:0040D0DC                 xor     esi, esi
.text:0040D0DE                 cmp     esi, ebp
.text:0040D0E0                 jge     short loc_40D10D
.text:0040D0E2                 mov     ecx, [esp+2Ch+var_1C]
.text:0040D0E6                 sub     ecx, ebp
.text:0040D0E8                 mov     [esp+2Ch+var_24], ecx
.text:0040D0EC                 lea     esi, [esi+0]
.text:0040D0F0
.text:0040D0F0 loc_40D0F0:                             ; CODE XREF: sub_40D080+8B↓j
.text:0040D0F0                 mov     ecx, [esp+2Ch+var_14]
.text:0040D0F4                 mov     edx, [esp+2Ch+var_24]
.text:0040D0F8                 add     ecx, esi
.text:0040D0FA                 add     edx, esi
.text:0040D0FC                 mov     ebx, [edi+ecx*4]
.text:0040D0FF                 mov     eax, [edi+edx*4]
.text:0040D102                 inc     esi
.text:0040D103                 cmp     esi, ebp
.text:0040D105                 mov     [edi+ecx*4], eax
.text:0040D108                 mov     [edi+edx*4], ebx
.text:0040D10B                 jl      short loc_40D0F0
.text:0040D10D
.text:0040D10D loc_40D10D:                             ; CODE XREF: sub_40D080+60↑j
.text:0040D10D                 sub     [esp+2Ch+var_1C], ebp
.text:0040D111
.text:0040D111 loc_40D111:                             ; CODE XREF: sub_40D080+107↓j
.text:0040D111                 mov     eax, [esp+2Ch+var_18]
.text:0040D115                 cmp     [esp+2Ch+var_1C], eax
.text:0040D119                 jle     short loc_40D130
.text:0040D11B                 mov     ebp, [esp+2Ch+var_14]
.text:0040D11F                 cmp     eax, ebp
.text:0040D121                 jg      short loc_40D0C0
.text:0040D123                 lea     esi, [esi+0]
.text:0040D129                 lea     edi, [edi+0]
.text:0040D130
.text:0040D130 loc_40D130:                             ; CODE XREF: sub_40D080+34↑j
.text:0040D130                                         ; sub_40D080+3B↑j ...
.text:0040D130                 mov     esi, [esp+2Ch+var_28]
.text:0040D134                 mov     ecx, [esp+2Ch+var_18]
.text:0040D138                 mov     eax, [esp+2Ch+var_2C]
.text:0040D13B                 mov     edi, [esp+2Ch+arg_4]
.text:0040D13F                 mov     edx, [esp+2Ch+var_28]
.text:0040D143                 sub     esi, ecx
.text:0040D145                 add     esi, eax
.text:0040D147                 mov     [edi+20h], esi
.text:0040D14A                 mov     [edi+24h], edx
.text:0040D14D                 add     esp, 1Ch
.text:0040D150                 pop     ebx
.text:0040D151                 pop     esi
.text:0040D152                 pop     edi
.text:0040D153                 pop     ebp
.text:0040D154                 retn
.text:0040D155 ; ---------------------------------------------------------------------------
.text:0040D155
.text:0040D155 loc_40D155:                             ; CODE XREF: sub_40D080+5A↑j
.text:0040D155                 xor     esi, esi
.text:0040D157                 cmp     esi, [esp+2Ch+var_20]
.text:0040D15B                 jge     short loc_40D17F
.text:0040D15D                 lea     esi, [esi+0]
.text:0040D160
.text:0040D160 loc_40D160:                             ; CODE XREF: sub_40D080+FD↓j
.text:0040D160                 mov     ebx, [esp+2Ch+var_14]
.text:0040D164                 mov     ebp, [esp+2Ch+var_18]
.text:0040D168                 add     ebx, esi
.text:0040D16A                 add     ebp, esi
.text:0040D16C                 mov     edx, [edi+ebx*4]
.text:0040D16F                 inc     esi
.text:0040D170                 cmp     esi, [esp+2Ch+var_20]
.text:0040D174                 mov     ecx, [edi+ebp*4]
.text:0040D177                 mov     [edi+ebx*4], ecx
.text:0040D17A                 mov     [edi+ebp*4], edx
.text:0040D17D                 jl      short loc_40D160
.text:0040D17F
.text:0040D17F loc_40D17F:                             ; CODE XREF: sub_40D080+DB↑j
.text:0040D17F                 mov     esi, [esp+2Ch+var_20]
.text:0040D183                 add     [esp+2Ch+var_14], esi
.text:0040D187                 jmp     short loc_40D111
.text:0040D187 sub_40D080      endp
.text:0040D187
.text:0040D187 ; ---------------------------------------------------------------------------
.text:0040D189                 align 20h
.text:0040D1A0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:0040D1A0                                         ; DATA XREF: .data:Buffer↓o
.text:0040D1D2 ; const char Format[]
.text:0040D1D2 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_40D490+50↓o
.text:0040D1DE aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040D1DE                                         ; DATA XREF: sub_40D490:loc_40D531↓o
.text:0040D1EE                 align 20h
.text:0040D200 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:0040D200                                         ; DATA XREF: sub_40D490+100↓o
.text:0040D200                 db 'ere is NO',0Ah
.text:0040D200                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:0040D200                 db 'R PURPOSE.',0Ah,0
.text:0040D298 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:0040D298                                         ; DATA XREF: sub_40D490:loc_40D5D1↓o
.text:0040D2AF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040D2AF                                         ; DATA XREF: sub_40D490:loc_40D5DD↓o
.text:0040D2CB                 align 20h
.text:0040D2E0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:0040D2E0                                         ; DATA XREF: sub_40D490:loc_40D5E9↓o
.text:0040D2E0                 db 'and %s.',0Ah,0
.text:0040D300 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:0040D300                                         ; DATA XREF: sub_40D490:loc_40D5F5↓o
.text:0040D300                 db '%s, and %s.',0Ah,0
.text:0040D324                 align 20h
.text:0040D340 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:0040D340                                         ; DATA XREF: sub_40D490:loc_40D601↓o
.text:0040D340                 db '%s, %s, and %s.',0Ah,0
.text:0040D368                 align 20h
.text:0040D380 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:0040D380                                         ; DATA XREF: sub_40D490:loc_40D60D↓o
.text:0040D380                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040D3AC                 align 20h
.text:0040D3C0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:0040D3C0                                         ; DATA XREF: sub_40D490:loc_40D619↓o
.text:0040D3C0                 db '%s, %s, %s, %s,',0Ah
.text:0040D3C0                 db 'and %s.',0Ah,0
.text:0040D3F0                 align 20h
.text:0040D400 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:0040D400                                         ; DATA XREF: sub_40D490:loc_40D625↓o
.text:0040D400                 db '%s, %s, %s, %s,',0Ah
.text:0040D400                 db '%s, and %s.',0Ah,0
.text:0040D434                 align 10h
.text:0040D440 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:0040D440                                         ; DATA XREF: sub_40D490:def_40D4FD↓o
.text:0040D440                 db '%s, %s, %s, %s,',0Ah
.text:0040D440                 db '%s, %s, and others.',0Ah,0
.text:0040D47C ; const char aSS[]
.text:0040D47C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_40D490+1B5↓o
.text:0040D483                 align 10h
.text:0040D490
.text:0040D490 ; =============== S U B R O U T I N E =======================================
.text:0040D490
.text:0040D490
.text:0040D490 ; int __cdecl sub_40D490(FILE *, FILE *, int, int, va_list)
.text:0040D490 sub_40D490      proc near               ; CODE XREF: sub_40BFB0+A5↑p
.text:0040D490                                         ; .text:0040D68A↓p
.text:0040D490
.text:0040D490 Stream          = dword ptr -2Ch
.text:0040D490 Format          = dword ptr -28h
.text:0040D490 ArgList         = dword ptr -24h
.text:0040D490 var_20          = dword ptr -20h
.text:0040D490 var_1C          = dword ptr -1Ch
.text:0040D490 var_14          = dword ptr -14h
.text:0040D490 arg_0           = dword ptr  4
.text:0040D490 arg_4           = dword ptr  8
.text:0040D490 arg_8           = dword ptr  0Ch
.text:0040D490 arg_C           = dword ptr  10h
.text:0040D490 arg_10          = dword ptr  14h
.text:0040D490
.text:0040D490                 push    ebp
.text:0040D491                 push    edi
.text:0040D492                 push    esi
.text:0040D493                 push    ebx
.text:0040D494                 sub     esp, 1Ch
.text:0040D497                 xor     ebx, ebx
.text:0040D499                 mov     edi, [esp+2Ch+arg_10]
.text:0040D49D                 mov     edx, [esp+2Ch+arg_8]
.text:0040D4A1                 mov     esi, [esp+2Ch+arg_0]
.text:0040D4A5                 mov     eax, [edi]
.text:0040D4A7                 mov     ecx, [esp+2Ch+arg_4]
.text:0040D4AB                 mov     [esp+2Ch+var_14], edx
.text:0040D4AF                 mov     ebp, [esp+2Ch+arg_C]
.text:0040D4B3                 lea     edx, [edi+4]
.text:0040D4B6                 test    eax, eax
.text:0040D4B8                 jz      short loc_40D4CC
.text:0040D4BA                 lea     esi, [esi+0]
.text:0040D4C0
.text:0040D4C0 loc_40D4C0:                             ; CODE XREF: sub_40D490+3A↓j
.text:0040D4C0                 mov     eax, edx
.text:0040D4C2                 inc     ebx
.text:0040D4C3                 mov     eax, [eax]
.text:0040D4C5                 add     edx, 4
.text:0040D4C8                 test    eax, eax
.text:0040D4CA                 jnz     short loc_40D4C0
.text:0040D4CC
.text:0040D4CC loc_40D4CC:                             ; CODE XREF: sub_40D490+28↑j
.text:0040D4CC                 test    ecx, ecx
.text:0040D4CE                 jz      loc_40D63D
.text:0040D4D4                 mov     [esp+2Ch+var_1C], ebp
.text:0040D4D8                 mov     edx, [esp+2Ch+var_14]
.text:0040D4DC                 mov     [esp+2Ch+ArgList], ecx
.text:0040D4E0                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:0040D4E8                 mov     [esp+2Ch+var_20], edx
.text:0040D4EC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040D4EF                 call    fprintf
.text:0040D4F4
.text:0040D4F4 loc_40D4F4:                             ; CODE XREF: sub_40D490+1C9↓j
.text:0040D4F4                 cmp     ebx, 9          ; switch 10 cases
.text:0040D4F7                 ja      def_40D4FD      ; jumptable 0040D4FD default case
.text:0040D4FD                 jmp     ds:jpt_40D4FD[ebx*4] ; switch jump
.text:0040D4FD ; ---------------------------------------------------------------------------
.text:0040D504 jpt_40D4FD      dd offset loc_40D52C    ; DATA XREF: sub_40D490+6D↑r
.text:0040D504                 dd offset loc_40D531    ; jump table for switch statement
.text:0040D504                 dd offset loc_40D5D1
.text:0040D504                 dd offset loc_40D5DD
.text:0040D504                 dd offset loc_40D5E9
.text:0040D504                 dd offset loc_40D5F5
.text:0040D504                 dd offset loc_40D601
.text:0040D504                 dd offset loc_40D60D
.text:0040D504                 dd offset loc_40D619
.text:0040D504                 dd offset loc_40D625
.text:0040D52C ; ---------------------------------------------------------------------------
.text:0040D52C
.text:0040D52C loc_40D52C:                             ; CODE XREF: sub_40D490+6D↑j
.text:0040D52C                                         ; DATA XREF: sub_40D490:jpt_40D4FD↑o
.text:0040D52C                 call    abort           ; jumptable 0040D4FD case 0
.text:0040D531 ; ---------------------------------------------------------------------------
.text:0040D531
.text:0040D531 loc_40D531:                             ; CODE XREF: sub_40D490+6D↑j
.text:0040D531                                         ; DATA XREF: sub_40D490:jpt_40D4FD↑o
.text:0040D531                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040D4FD case 1
.text:0040D538                 nop
.text:0040D539                 lea     esi, [esi+0]
.text:0040D540
.text:0040D540 loc_40D540:                             ; CODE XREF: sub_40D490+148↓j
.text:0040D540                                         ; sub_40D490+154↓j ...
.text:0040D540                 call    ds:libintl_gettext
.text:0040D546                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040D54A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040D54D                 mov     [esp+2Ch+Format], eax ; Format
.text:0040D551                 call    vfprintf
.text:0040D556                 mov     ebx, [esi+4]
.text:0040D559                 dec     ebx
.text:0040D55A                 test    ebx, ebx
.text:0040D55C                 mov     [esi+4], ebx
.text:0040D55F                 js      short loc_40D5BF
.text:0040D561                 mov     edi, [esi]
.text:0040D563                 mov     byte ptr [edi], 0Ah
.text:0040D566                 inc     dword ptr [esi]
.text:0040D568
.text:0040D568 loc_40D568:                             ; CODE XREF: sub_40D490+13F↓j
.text:0040D568                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040D56C                 mov     edx, Buffer
.text:0040D572                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:0040D575                 call    fputs
.text:0040D57A                 mov     ebp, [esi+4]
.text:0040D57D                 dec     ebp
.text:0040D57E                 test    ebp, ebp
.text:0040D580                 mov     [esi+4], ebp
.text:0040D583                 js      short loc_40D5AD
.text:0040D585                 mov     ecx, [esi]
.text:0040D587                 mov     byte ptr [ecx], 0Ah
.text:0040D58A                 inc     dword ptr [esi]
.text:0040D58C
.text:0040D58C loc_40D58C:                             ; CODE XREF: sub_40D490+12D↓j
.text:0040D58C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:0040D590                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:0040D597                 call    ds:libintl_gettext
.text:0040D59D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:0040D5A1                 add     esp, 1Ch
.text:0040D5A4                 pop     ebx
.text:0040D5A5                 pop     esi
.text:0040D5A6                 pop     edi
.text:0040D5A7                 pop     ebp
.text:0040D5A8                 jmp     fputs
.text:0040D5AD ; ---------------------------------------------------------------------------
.text:0040D5AD
.text:0040D5AD loc_40D5AD:                             ; CODE XREF: sub_40D490+F3↑j
.text:0040D5AD                 mov     [esp+2Ch+Format], esi ; File
.text:0040D5B1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040D5B8                 call    _flsbuf
.text:0040D5BD                 jmp     short loc_40D58C
.text:0040D5BF ; ---------------------------------------------------------------------------
.text:0040D5BF
.text:0040D5BF loc_40D5BF:                             ; CODE XREF: sub_40D490+CF↑j
.text:0040D5BF                 mov     [esp+2Ch+Format], esi ; File
.text:0040D5C3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040D5CA                 call    _flsbuf
.text:0040D5CF                 jmp     short loc_40D568
.text:0040D5D1 ; ---------------------------------------------------------------------------
.text:0040D5D1
.text:0040D5D1 loc_40D5D1:                             ; CODE XREF: sub_40D490+6D↑j
.text:0040D5D1                                         ; DATA XREF: sub_40D490:jpt_40D4FD↑o
.text:0040D5D1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040D4FD case 2
.text:0040D5D8                 jmp     loc_40D540
.text:0040D5DD ; ---------------------------------------------------------------------------
.text:0040D5DD
.text:0040D5DD loc_40D5DD:                             ; CODE XREF: sub_40D490+6D↑j
.text:0040D5DD                                         ; DATA XREF: sub_40D490:jpt_40D4FD↑o
.text:0040D5DD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040D4FD case 3
.text:0040D5E4                 jmp     loc_40D540
.text:0040D5E9 ; ---------------------------------------------------------------------------
.text:0040D5E9
.text:0040D5E9 loc_40D5E9:                             ; CODE XREF: sub_40D490+6D↑j
.text:0040D5E9                                         ; DATA XREF: sub_40D490:jpt_40D4FD↑o
.text:0040D5E9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040D4FD case 4
.text:0040D5F0                 jmp     loc_40D540
.text:0040D5F5 ; ---------------------------------------------------------------------------
.text:0040D5F5
.text:0040D5F5 loc_40D5F5:                             ; CODE XREF: sub_40D490+6D↑j
.text:0040D5F5                                         ; DATA XREF: sub_40D490:jpt_40D4FD↑o
.text:0040D5F5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040D4FD case 5
.text:0040D5FC                 jmp     loc_40D540
.text:0040D601 ; ---------------------------------------------------------------------------
.text:0040D601
.text:0040D601 loc_40D601:                             ; CODE XREF: sub_40D490+6D↑j
.text:0040D601                                         ; DATA XREF: sub_40D490:jpt_40D4FD↑o
.text:0040D601                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040D4FD case 6
.text:0040D608                 jmp     loc_40D540
.text:0040D60D ; ---------------------------------------------------------------------------
.text:0040D60D
.text:0040D60D loc_40D60D:                             ; CODE XREF: sub_40D490+6D↑j
.text:0040D60D                                         ; DATA XREF: sub_40D490:jpt_40D4FD↑o
.text:0040D60D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040D4FD case 7
.text:0040D614                 jmp     loc_40D540
.text:0040D619 ; ---------------------------------------------------------------------------
.text:0040D619
.text:0040D619 loc_40D619:                             ; CODE XREF: sub_40D490+6D↑j
.text:0040D619                                         ; DATA XREF: sub_40D490:jpt_40D4FD↑o
.text:0040D619                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040D4FD case 8
.text:0040D620                 jmp     loc_40D540
.text:0040D625 ; ---------------------------------------------------------------------------
.text:0040D625
.text:0040D625 loc_40D625:                             ; CODE XREF: sub_40D490+6D↑j
.text:0040D625                                         ; DATA XREF: sub_40D490:jpt_40D4FD↑o
.text:0040D625                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040D4FD case 9
.text:0040D62C                 jmp     loc_40D540
.text:0040D631 ; ---------------------------------------------------------------------------
.text:0040D631
.text:0040D631 def_40D4FD:                             ; CODE XREF: sub_40D490+67↑j
.text:0040D631                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040D4FD default case
.text:0040D638                 jmp     loc_40D540
.text:0040D63D ; ---------------------------------------------------------------------------
.text:0040D63D
.text:0040D63D loc_40D63D:                             ; CODE XREF: sub_40D490+3E↑j
.text:0040D63D                 mov     [esp+2Ch+var_20], ebp
.text:0040D641                 mov     ecx, [esp+2Ch+var_14]
.text:0040D645                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040D64D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040D650                 mov     [esp+2Ch+ArgList], ecx
.text:0040D654                 call    fprintf
.text:0040D659                 jmp     loc_40D4F4
.text:0040D659 sub_40D490      endp
.text:0040D659
.text:0040D659 ; ---------------------------------------------------------------------------
.text:0040D65E                 align 10h
.text:0040D660                 sub     esp, 1Ch
.text:0040D663                 mov     edx, [esp+2Ch]
.text:0040D667                 lea     ecx, [esp+30h]
.text:0040D66B                 mov     [esp+10h], ecx
.text:0040D66F                 mov     ecx, [esp+28h]
.text:0040D673                 mov     [esp+0Ch], edx
.text:0040D677                 mov     edx, [esp+24h]
.text:0040D67B                 mov     [esp+8], ecx
.text:0040D67F                 mov     [esp+4], edx
.text:0040D683                 mov     edx, [esp+20h]
.text:0040D687                 mov     [esp], edx
.text:0040D68A                 call    sub_40D490
.text:0040D68F                 add     esp, 1Ch
.text:0040D692                 retn
.text:0040D692 ; ---------------------------------------------------------------------------
.text:0040D693                 align 10h
.text:0040D6A0
.text:0040D6A0 ; =============== S U B R O U T I N E =======================================
.text:0040D6A0
.text:0040D6A0
.text:0040D6A0 ; int __cdecl sub_40D6A0(int, int, char *, int, int)
.text:0040D6A0 sub_40D6A0      proc near               ; CODE XREF: sub_40BFB0+58↑p
.text:0040D6A0
.text:0040D6A0 var_1C          = dword ptr -1Ch
.text:0040D6A0 var_18          = dword ptr -18h
.text:0040D6A0 var_14          = dword ptr -14h
.text:0040D6A0 var_10          = dword ptr -10h
.text:0040D6A0 var_C           = dword ptr -0Ch
.text:0040D6A0 var_8           = dword ptr -8
.text:0040D6A0 var_4           = dword ptr -4
.text:0040D6A0 arg_0           = dword ptr  4
.text:0040D6A0 arg_4           = dword ptr  8
.text:0040D6A0 arg_8           = dword ptr  0Ch
.text:0040D6A0 arg_C           = dword ptr  10h
.text:0040D6A0 arg_10          = dword ptr  14h
.text:0040D6A0
.text:0040D6A0                 sub     esp, 1Ch
.text:0040D6A3                 mov     edx, [esp+1Ch+arg_C]
.text:0040D6A7                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040D6AF                 mov     ecx, [esp+1Ch+arg_10]
.text:0040D6B3                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040D6BB                 mov     [esp+1Ch+var_10], edx ; int
.text:0040D6BF                 mov     edx, [esp+1Ch+arg_4]
.text:0040D6C3                 mov     [esp+1Ch+var_C], ecx ; int
.text:0040D6C7                 mov     ecx, [esp+1Ch+arg_8]
.text:0040D6CB                 mov     [esp+1Ch+var_18], edx ; int
.text:0040D6CF                 mov     edx, [esp+1Ch+arg_0]
.text:0040D6D3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:0040D6D7                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040D6DA                 call    sub_40CF60
.text:0040D6DF                 add     esp, 1Ch
.text:0040D6E2                 retn
.text:0040D6E2 sub_40D6A0      endp
.text:0040D6E2
.text:0040D6E2 ; ---------------------------------------------------------------------------
.text:0040D6E3                 align 10h
.text:0040D6F0                 sub     esp, 2Ch
.text:0040D6F3                 mov     edx, [esp+44h]
.text:0040D6F7                 mov     dword ptr [esp+18h], 0
.text:0040D6FF                 mov     ecx, [esp+40h]
.text:0040D703                 mov     dword ptr [esp+14h], 0
.text:0040D70B                 mov     [esp+1Ch], edx
.text:0040D70F                 mov     edx, [esp+3Ch]
.text:0040D713                 mov     [esp+10h], ecx
.text:0040D717                 mov     ecx, [esp+38h]
.text:0040D71B                 mov     [esp+0Ch], edx
.text:0040D71F                 mov     edx, [esp+34h]
.text:0040D723                 mov     [esp+8], ecx
.text:0040D727                 mov     [esp+4], edx
.text:0040D72B                 mov     edx, [esp+30h]
.text:0040D72F                 mov     [esp], edx
.text:0040D732                 call    sub_40C3D0
.text:0040D737                 add     esp, 2Ch
.text:0040D73A                 retn
.text:0040D73A ; ---------------------------------------------------------------------------
.text:0040D73B                 align 10h
.text:0040D740                 sub     esp, 1Ch
.text:0040D743                 mov     edx, [esp+2Ch]
.text:0040D747                 mov     dword ptr [esp+18h], 0
.text:0040D74F                 mov     ecx, [esp+30h]
.text:0040D753                 mov     dword ptr [esp+14h], 1
.text:0040D75B                 mov     [esp+0Ch], edx
.text:0040D75F                 mov     edx, [esp+24h]
.text:0040D763                 mov     [esp+10h], ecx
.text:0040D767                 mov     ecx, [esp+28h]
.text:0040D76B                 mov     [esp+4], edx
.text:0040D76F                 mov     edx, [esp+20h]
.text:0040D773                 mov     [esp+8], ecx
.text:0040D777                 mov     [esp], edx
.text:0040D77A                 call    sub_40CF60
.text:0040D77F                 add     esp, 1Ch
.text:0040D782                 retn
.text:0040D782 ; ---------------------------------------------------------------------------
.text:0040D783                 align 10h
.text:0040D790                 sub     esp, 2Ch
.text:0040D793                 mov     edx, [esp+44h]
.text:0040D797                 mov     dword ptr [esp+18h], 0
.text:0040D79F                 mov     ecx, [esp+40h]
.text:0040D7A3                 mov     dword ptr [esp+14h], 1
.text:0040D7AB                 mov     [esp+1Ch], edx
.text:0040D7AF                 mov     edx, [esp+3Ch]
.text:0040D7B3                 mov     [esp+10h], ecx
.text:0040D7B7                 mov     ecx, [esp+38h]
.text:0040D7BB                 mov     [esp+0Ch], edx
.text:0040D7BF                 mov     edx, [esp+34h]
.text:0040D7C3                 mov     [esp+8], ecx
.text:0040D7C7                 mov     [esp+4], edx
.text:0040D7CB                 mov     edx, [esp+30h]
.text:0040D7CF                 mov     [esp], edx
.text:0040D7D2                 call    sub_40C3D0
.text:0040D7D7                 add     esp, 2Ch
.text:0040D7DA                 retn
.text:0040D7DA ; ---------------------------------------------------------------------------
.text:0040D7DB                 align 10h
.text:0040D7E0                 jmp     ds:libintl_bindtextdomain
.text:0040D7E0 ; ---------------------------------------------------------------------------
.text:0040D7E6                 align 10h
.text:0040D7F0                 jmp     ds:libintl_textdomain
.text:0040D7F0 ; ---------------------------------------------------------------------------
.text:0040D7F6                 align 10h
.text:0040D800                 jmp     ds:libintl_gettext
.text:0040D800 ; ---------------------------------------------------------------------------
.text:0040D806                 align 10h
.text:0040D810 ; const char aS_0[]
.text:0040D810 aS_0            db ': %s',0             ; DATA XREF: sub_40D830+B8↓o
.text:0040D810                                         ; sub_40D934+122↓o
.text:0040D815 aUnknownSystemE db 'Unknown system error',0
.text:0040D815                                         ; DATA XREF: sub_40D830:loc_40D8FD↓o
.text:0040D815                                         ; sub_40D934:loc_40DA6E↓o
.text:0040D82A ; const char aS_1[]
.text:0040D82A aS_1            db '%s: ',0             ; DATA XREF: sub_40D830:loc_40D904↓o
.text:0040D82F                 align 10h
.text:0040D830
.text:0040D830 ; =============== S U B R O U T I N E =======================================
.text:0040D830
.text:0040D830
.text:0040D830 ; int __cdecl sub_40D830(int Code, int ErrorMessage, char *, char)
.text:0040D830 sub_40D830      proc near               ; CODE XREF: sub_401360+F4↑p
.text:0040D830                                         ; sub_401360+18C↑p ...
.text:0040D830
.text:0040D830 Stream          = dword ptr -1Ch
.text:0040D830 Format          = dword ptr -18h
.text:0040D830 ArgList         = dword ptr -14h
.text:0040D830 Code            = dword ptr  4
.text:0040D830 ErrorMessage    = dword ptr  8
.text:0040D830 arg_8           = dword ptr  0Ch
.text:0040D830 arg_C           = byte ptr  10h
.text:0040D830
.text:0040D830                 push    esi
.text:0040D831                 push    ebx
.text:0040D832                 sub     esp, 14h
.text:0040D835                 mov     edx, ds:_iob
.text:0040D83B                 mov     esi, [esp+1Ch+Code]
.text:0040D83F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:0040D843                 add     edx, 20h ; ' '
.text:0040D846                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040D849                 call    fflush
.text:0040D84E                 mov     eax, ds:dword_410300
.text:0040D853                 test    eax, eax
.text:0040D855                 jz      loc_40D904
.text:0040D85B                 call    eax ; dword_410300
.text:0040D85D
.text:0040D85D loc_40D85D:                             ; CODE XREF: sub_40D830+F7↓j
.text:0040D85D                 lea     edx, [esp+1Ch+arg_C]
.text:0040D861                 mov     ecx, [esp+1Ch+arg_8]
.text:0040D865                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:0040D869                 mov     edx, ds:_iob
.text:0040D86F                 mov     [esp+1Ch+Format], ecx ; Format
.text:0040D873                 add     edx, 40h ; '@'
.text:0040D876                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040D879                 call    vfprintf
.text:0040D87E                 inc     ds:dword_410310
.text:0040D884                 test    ebx, ebx
.text:0040D886                 jnz     short loc_40D8D2
.text:0040D888
.text:0040D888 loc_40D888:                             ; CODE XREF: sub_40D830+CB↓j
.text:0040D888                 mov     edx, ds:_iob
.text:0040D88E                 lea     ecx, [edx+40h]
.text:0040D891                 mov     ebx, [ecx+4]
.text:0040D894                 dec     ebx
.text:0040D895                 test    ebx, ebx
.text:0040D897                 mov     [ecx+4], ebx
.text:0040D89A                 js      short loc_40D8C0
.text:0040D89C                 mov     ecx, [edx+40h]
.text:0040D89F                 mov     byte ptr [ecx], 0Ah
.text:0040D8A2                 inc     dword ptr [edx+40h]
.text:0040D8A5
.text:0040D8A5 loc_40D8A5:                             ; CODE XREF: sub_40D830+A0↓j
.text:0040D8A5                 mov     edx, ds:_iob
.text:0040D8AB                 add     edx, 40h ; '@'
.text:0040D8AE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040D8B1                 call    fflush
.text:0040D8B6                 test    esi, esi
.text:0040D8B8                 jnz     short loc_40D92C
.text:0040D8BA                 add     esp, 14h
.text:0040D8BD                 pop     ebx
.text:0040D8BE                 pop     esi
.text:0040D8BF                 retn
.text:0040D8C0 ; ---------------------------------------------------------------------------
.text:0040D8C0
.text:0040D8C0 loc_40D8C0:                             ; CODE XREF: sub_40D830+6A↑j
.text:0040D8C0                 mov     [esp+1Ch+Format], ecx ; File
.text:0040D8C4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040D8CB                 call    _flsbuf
.text:0040D8D0                 jmp     short loc_40D8A5
.text:0040D8D2 ; ---------------------------------------------------------------------------
.text:0040D8D2
.text:0040D8D2 loc_40D8D2:                             ; CODE XREF: sub_40D830+56↑j
.text:0040D8D2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:0040D8D5                 call    strerror
.text:0040D8DA                 test    eax, eax
.text:0040D8DC                 jz      short loc_40D8FD
.text:0040D8DE
.text:0040D8DE loc_40D8DE:                             ; CODE XREF: sub_40D830+D2↓j
.text:0040D8DE                 mov     [esp+1Ch+ArgList], eax
.text:0040D8E2                 mov     ebx, ds:_iob
.text:0040D8E8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:0040D8F0                 add     ebx, 40h ; '@'
.text:0040D8F3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:0040D8F6                 call    fprintf
.text:0040D8FB                 jmp     short loc_40D888
.text:0040D8FD ; ---------------------------------------------------------------------------
.text:0040D8FD
.text:0040D8FD loc_40D8FD:                             ; CODE XREF: sub_40D830+AC↑j
.text:0040D8FD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040D902                 jmp     short loc_40D8DE
.text:0040D904 ; ---------------------------------------------------------------------------
.text:0040D904
.text:0040D904 loc_40D904:                             ; CODE XREF: sub_40D830+25↑j
.text:0040D904                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040D90C                 mov     edx, ds:_iob
.text:0040D912                 mov     ecx, ds:dword_4102C0
.text:0040D918                 add     edx, 40h ; '@'
.text:0040D91B                 mov     [esp+1Ch+ArgList], ecx
.text:0040D91F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040D922                 call    fprintf
.text:0040D927                 jmp     loc_40D85D
.text:0040D92C ; ---------------------------------------------------------------------------
.text:0040D92C
.text:0040D92C loc_40D92C:                             ; CODE XREF: sub_40D830+88↑j
.text:0040D92C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040D92F                 call    exit
.text:0040D92F sub_40D830      endp
.text:0040D92F
.text:0040D934
.text:0040D934 ; =============== S U B R O U T I N E =======================================
.text:0040D934
.text:0040D934
.text:0040D934 ; int __cdecl sub_40D934(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:0040D934 sub_40D934      proc near               ; DATA XREF: sub_40D934+77↓o
.text:0040D934
.text:0040D934 Stream          = dword ptr -28h
.text:0040D934 Format          = dword ptr -24h
.text:0040D934 ArgList         = dword ptr -20h
.text:0040D934 var_1C          = dword ptr -1Ch
.text:0040D934 Code            = dword ptr  8
.text:0040D934 ErrorMessage    = dword ptr  0Ch
.text:0040D934 Str2            = dword ptr  10h
.text:0040D934 arg_10          = dword ptr  14h
.text:0040D934 arg_14          = dword ptr  18h
.text:0040D934 arg_18          = byte ptr  1Ch
.text:0040D934
.text:0040D934                 and     eax, 64253A73h
.text:0040D939                 cmp     ah, [eax]
.text:0040D93B
.text:0040D93B loc_40D93B:                             ; DATA XREF: sub_40D934:loc_40DA75↓o
.text:0040D93B                 add     ds:55003A73h, ah
.text:0040D941                 push    edi
.text:0040D942                 push    esi
.text:0040D943                 push    ebx
.text:0040D944                 sub     esp, 1Ch
.text:0040D947                 mov     edx, ds:dword_410340
.text:0040D94D                 mov     ebp, [esp+28h+Code]
.text:0040D951                 mov     edi, [esp+28h+ErrorMessage]
.text:0040D955                 test    edx, edx
.text:0040D957                 mov     ebx, [esp+28h+Str2]
.text:0040D95B                 mov     esi, [esp+28h+arg_10]
.text:0040D95F                 jz      short loc_40D979
.text:0040D961                 cmp     ds:dword_4102B0, esi
.text:0040D967                 jz      loc_40DAA0
.text:0040D96D
.text:0040D96D loc_40D96D:                             ; CODE XREF: sub_40D934+18D↓j
.text:0040D96D                 mov     ds:Str1, ebx
.text:0040D973                 mov     ds:dword_4102B0, esi
.text:0040D979
.text:0040D979 loc_40D979:                             ; CODE XREF: sub_40D934+2B↑j
.text:0040D979                 mov     edx, ds:_iob
.text:0040D97F                 add     edx, 20h ; ' '
.text:0040D982                 mov     [esp+28h+Stream], edx ; Stream
.text:0040D985                 call    fflush
.text:0040D98A                 mov     eax, ds:dword_410300
.text:0040D98F                 test    eax, eax
.text:0040D991                 jz      loc_40DA75
.text:0040D997                 call    eax ; dword_410300
.text:0040D999
.text:0040D999 loc_40D999:                             ; CODE XREF: sub_40D934+164↓j
.text:0040D999                 test    ebx, ebx
.text:0040D99B                 jz      short loc_40D9BE
.text:0040D99D                 mov     [esp+28h+ArgList], ebx
.text:0040D9A1                 mov     ebx, ds:_iob
.text:0040D9A7                 mov     [esp+28h+var_1C], esi
.text:0040D9AB                 mov     [esp+28h+Format], offset sub_40D934 ; Format
.text:0040D9B3                 add     ebx, 40h ; '@'
.text:0040D9B6                 mov     [esp+28h+Stream], ebx ; Stream
.text:0040D9B9                 call    fprintf
.text:0040D9BE
.text:0040D9BE loc_40D9BE:                             ; CODE XREF: sub_40D934+67↑j
.text:0040D9BE                 mov     esi, ds:_iob
.text:0040D9C4                 lea     edx, [esp+28h+arg_18]
.text:0040D9C8                 mov     ecx, [esp+28h+arg_14]
.text:0040D9CC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:0040D9D0                 add     esi, 40h ; '@'
.text:0040D9D3                 mov     [esp+28h+Format], ecx ; Format
.text:0040D9D7                 mov     [esp+28h+Stream], esi ; Stream
.text:0040D9DA                 call    vfprintf
.text:0040D9DF                 inc     ds:dword_410310
.text:0040D9E5                 test    edi, edi
.text:0040D9E7                 jnz     short loc_40DA40
.text:0040D9E9
.text:0040D9E9 loc_40D9E9:                             ; CODE XREF: sub_40D934+135↓j
.text:0040D9E9                 mov     edx, ds:_iob
.text:0040D9EF                 lea     ecx, [edx+40h]
.text:0040D9F2                 mov     ebx, [ecx+4]
.text:0040D9F5                 dec     ebx
.text:0040D9F6                 test    ebx, ebx
.text:0040D9F8                 mov     [ecx+4], ebx
.text:0040D9FB                 js      short loc_40DA27
.text:0040D9FD                 mov     esi, [edx+40h]
.text:0040DA00                 mov     byte ptr [esi], 0Ah
.text:0040DA03                 inc     dword ptr [edx+40h]
.text:0040DA06
.text:0040DA06 loc_40DA06:                             ; CODE XREF: sub_40D934+103↓j
.text:0040DA06                 mov     ecx, ds:_iob
.text:0040DA0C                 add     ecx, 40h ; '@'
.text:0040DA0F                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040DA12                 call    fflush
.text:0040DA17                 test    ebp, ebp
.text:0040DA19                 jnz     loc_40DAC6
.text:0040DA1F
.text:0040DA1F loc_40DA1F:                             ; CODE XREF: sub_40D934+173↓j
.text:0040DA1F                                         ; sub_40D934+187↓j
.text:0040DA1F                 add     esp, 1Ch
.text:0040DA22                 pop     ebx
.text:0040DA23                 pop     esi
.text:0040DA24                 pop     edi
.text:0040DA25                 pop     ebp
.text:0040DA26                 retn
.text:0040DA27 ; ---------------------------------------------------------------------------
.text:0040DA27
.text:0040DA27 loc_40DA27:                             ; CODE XREF: sub_40D934+C7↑j
.text:0040DA27                 mov     [esp+28h+Format], ecx ; File
.text:0040DA2B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:0040DA32                 call    _flsbuf
.text:0040DA37                 jmp     short loc_40DA06
.text:0040DA37 ; ---------------------------------------------------------------------------
.text:0040DA39                 align 10h
.text:0040DA40
.text:0040DA40 loc_40DA40:                             ; CODE XREF: sub_40D934+B3↑j
.text:0040DA40                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:0040DA43                 call    strerror
.text:0040DA48                 test    eax, eax
.text:0040DA4A                 jz      short loc_40DA6E
.text:0040DA4C
.text:0040DA4C loc_40DA4C:                             ; CODE XREF: sub_40D934+13F↓j
.text:0040DA4C                 mov     [esp+28h+ArgList], eax
.text:0040DA50                 mov     edi, ds:_iob
.text:0040DA56                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040DA5E                 add     edi, 40h ; '@'
.text:0040DA61                 mov     [esp+28h+Stream], edi ; Stream
.text:0040DA64                 call    fprintf
.text:0040DA69                 jmp     loc_40D9E9
.text:0040DA6E ; ---------------------------------------------------------------------------
.text:0040DA6E
.text:0040DA6E loc_40DA6E:                             ; CODE XREF: sub_40D934+116↑j
.text:0040DA6E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040DA73                 jmp     short loc_40DA4C
.text:0040DA75 ; ---------------------------------------------------------------------------
.text:0040DA75
.text:0040DA75 loc_40DA75:                             ; CODE XREF: sub_40D934+5D↑j
.text:0040DA75                 mov     [esp+28h+Format], (offset loc_40D93B+1) ; Format
.text:0040DA7D                 mov     ecx, ds:_iob
.text:0040DA83                 mov     edx, ds:dword_4102C0
.text:0040DA89                 add     ecx, 40h ; '@'
.text:0040DA8C                 mov     [esp+28h+ArgList], edx
.text:0040DA90                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040DA93                 call    fprintf
.text:0040DA98                 jmp     loc_40D999
.text:0040DA98 ; ---------------------------------------------------------------------------
.text:0040DA9D                 align 10h
.text:0040DAA0
.text:0040DAA0 loc_40DAA0:                             ; CODE XREF: sub_40D934+33↑j
.text:0040DAA0                 mov     eax, ds:Str1
.text:0040DAA5                 cmp     ebx, eax
.text:0040DAA7                 jz      loc_40DA1F
.text:0040DAAD                 mov     [esp+28h+Format], ebx ; Str2
.text:0040DAB1                 mov     [esp+28h+Stream], eax ; Str1
.text:0040DAB4                 call    strcmp
.text:0040DAB9                 test    eax, eax
.text:0040DABB                 jz      loc_40DA1F
.text:0040DAC1                 jmp     loc_40D96D
.text:0040DAC6 ; ---------------------------------------------------------------------------
.text:0040DAC6
.text:0040DAC6 loc_40DAC6:                             ; CODE XREF: sub_40D934+E5↑j
.text:0040DAC6                 mov     [esp+28h+Stream], ebp ; Code
.text:0040DAC9                 call    exit
.text:0040DAC9 sub_40D934      endp ; sp-analysis failed
.text:0040DAC9
.text:0040DAC9 ; ---------------------------------------------------------------------------
.text:0040DACE                 align 10h
.text:0040DAD0
.text:0040DAD0 ; =============== S U B R O U T I N E =======================================
.text:0040DAD0
.text:0040DAD0
.text:0040DAD0 sub_40DAD0      proc near               ; CODE XREF: .text:0040809D↑p
.text:0040DAD0
.text:0040DAD0 var_1C          = dword ptr -1Ch
.text:0040DAD0 var_18          = dword ptr -18h
.text:0040DAD0 var_14          = dword ptr -14h
.text:0040DAD0 arg_0           = dword ptr  4
.text:0040DAD0 arg_4           = dword ptr  8
.text:0040DAD0 arg_8           = dword ptr  0Ch
.text:0040DAD0
.text:0040DAD0                 push    edi
.text:0040DAD1                 push    esi
.text:0040DAD2                 push    ebx
.text:0040DAD3                 sub     esp, 10h
.text:0040DAD6                 mov     edi, [esp+1Ch+arg_8]
.text:0040DADA                 mov     esi, [esp+1Ch+arg_0]
.text:0040DADE                 mov     ebx, [esp+1Ch+arg_4]
.text:0040DAE2                 cmp     edi, 0Fh
.text:0040DAE5                 jbe     short loc_40DB30
.text:0040DAE7                 mov     ecx, esi
.text:0040DAE9                 neg     ecx
.text:0040DAEB                 and     ecx, 3
.text:0040DAEE                 sub     edi, ecx
.text:0040DAF0                 mov     edx, ecx
.text:0040DAF2                 test    ecx, ecx
.text:0040DAF4                 jz      short loc_40DB0A
.text:0040DAF6                 lea     esi, [esi+0]
.text:0040DAF9                 lea     edi, [edi+0]
.text:0040DB00
.text:0040DB00 loc_40DB00:                             ; CODE XREF: sub_40DAD0+38↓j
.text:0040DB00                 movzx   ecx, byte ptr [ebx]
.text:0040DB03                 inc     ebx
.text:0040DB04                 mov     [esi], cl
.text:0040DB06                 inc     esi
.text:0040DB07                 dec     edx
.text:0040DB08                 jnz     short loc_40DB00
.text:0040DB0A
.text:0040DB0A loc_40DB0A:                             ; CODE XREF: sub_40DAD0+24↑j
.text:0040DB0A                 test    bl, 3
.text:0040DB0D                 jnz     short loc_40DB53
.text:0040DB0F                 mov     [esp+1Ch+var_18], ebx
.text:0040DB13                 mov     edx, edi
.text:0040DB15                 shr     edx, 2
.text:0040DB18                 mov     [esp+1Ch+var_14], edx
.text:0040DB1C                 mov     [esp+1Ch+var_1C], esi
.text:0040DB1F                 call    sub_40DB70
.text:0040DB24
.text:0040DB24 loc_40DB24:                             ; CODE XREF: sub_40DAD0+98↓j
.text:0040DB24                 mov     edx, edi
.text:0040DB26                 and     edx, 0FFFFFFFCh
.text:0040DB29                 and     edi, 3
.text:0040DB2C                 add     ebx, edx
.text:0040DB2E                 add     esi, edx
.text:0040DB30
.text:0040DB30 loc_40DB30:                             ; CODE XREF: sub_40DAD0+15↑j
.text:0040DB30                 test    edi, edi
.text:0040DB32                 mov     edx, edi
.text:0040DB34                 jz      short loc_40DB4A
.text:0040DB36                 lea     esi, [esi+0]
.text:0040DB39                 lea     edi, [edi+0]
.text:0040DB40
.text:0040DB40 loc_40DB40:                             ; CODE XREF: sub_40DAD0+78↓j
.text:0040DB40                 movzx   ecx, byte ptr [ebx]
.text:0040DB43                 inc     ebx
.text:0040DB44                 mov     [esi], cl
.text:0040DB46                 inc     esi
.text:0040DB47                 dec     edx
.text:0040DB48                 jnz     short loc_40DB40
.text:0040DB4A
.text:0040DB4A loc_40DB4A:                             ; CODE XREF: sub_40DAD0+64↑j
.text:0040DB4A                 add     esp, 10h
.text:0040DB4D                 mov     eax, esi
.text:0040DB4F                 pop     ebx
.text:0040DB50                 pop     esi
.text:0040DB51                 pop     edi
.text:0040DB52                 retn
.text:0040DB53 ; ---------------------------------------------------------------------------
.text:0040DB53
.text:0040DB53 loc_40DB53:                             ; CODE XREF: sub_40DAD0+3D↑j
.text:0040DB53                 mov     [esp+1Ch+var_18], ebx
.text:0040DB57                 mov     ecx, edi
.text:0040DB59                 shr     ecx, 2
.text:0040DB5C                 mov     [esp+1Ch+var_14], ecx
.text:0040DB60                 mov     [esp+1Ch+var_1C], esi
.text:0040DB63                 call    sub_40DC70
.text:0040DB68                 jmp     short loc_40DB24
.text:0040DB68 sub_40DAD0      endp
.text:0040DB68
.text:0040DB68 ; ---------------------------------------------------------------------------
.text:0040DB6A                 align 10h
.text:0040DB70
.text:0040DB70 ; =============== S U B R O U T I N E =======================================
.text:0040DB70
.text:0040DB70
.text:0040DB70 sub_40DB70      proc near               ; CODE XREF: sub_40DAD0+4F↑p
.text:0040DB70
.text:0040DB70 var_8           = dword ptr -8
.text:0040DB70 var_4           = dword ptr -4
.text:0040DB70 arg_0           = dword ptr  4
.text:0040DB70 arg_4           = dword ptr  8
.text:0040DB70 arg_8           = dword ptr  0Ch
.text:0040DB70
.text:0040DB70                 sub     esp, 8
.text:0040DB73                 mov     ecx, [esp+8+arg_0]
.text:0040DB77                 mov     [esp+8+var_8], ebx
.text:0040DB7A                 mov     ebx, [esp+8+arg_8]
.text:0040DB7E                 mov     [esp+8+var_4], esi
.text:0040DB82                 mov     edx, [esp+8+arg_4]
.text:0040DB86                 mov     eax, ebx
.text:0040DB88                 and     eax, 7
.text:0040DB8B                 cmp     eax, 7          ; switch 8 cases
.text:0040DB8E                 ja      short def_40DB90 ; jumptable 0040DB90 default case
.text:0040DB90                 jmp     ds:jpt_40DB90[eax*4] ; switch jump
.text:0040DB90 ; ---------------------------------------------------------------------------
.text:0040DB97                 align 4
.text:0040DB98 jpt_40DB90      dd offset loc_40DC1A    ; DATA XREF: sub_40DB70+20↑r
.text:0040DB98                 dd offset loc_40DC21    ; jump table for switch statement
.text:0040DB98                 dd offset loc_40DBB8
.text:0040DB98                 dd offset loc_40DC29
.text:0040DB98                 dd offset loc_40DC36
.text:0040DB98                 dd offset loc_40DC43
.text:0040DB98                 dd offset loc_40DC50
.text:0040DB98                 dd offset loc_40DC5D
.text:0040DBB8 ; ---------------------------------------------------------------------------
.text:0040DBB8
.text:0040DBB8 loc_40DBB8:                             ; CODE XREF: sub_40DB70+20↑j
.text:0040DBB8                                         ; DATA XREF: sub_40DB70:jpt_40DB90↑o
.text:0040DBB8                 mov     eax, [edx]      ; jumptable 0040DB90 case 2
.text:0040DBBA                 sub     ecx, 1Ch
.text:0040DBBD                 add     ebx, 6
.text:0040DBC0                 sub     edx, 18h
.text:0040DBC3                 lea     esi, [esi+0]
.text:0040DBC9                 lea     edi, [edi+0]
.text:0040DBD0
.text:0040DBD0 loc_40DBD0:                             ; CODE XREF: sub_40DB70+A8↓j
.text:0040DBD0                 mov     esi, [edx+1Ch]
.text:0040DBD3                 add     edx, 20h ; ' '
.text:0040DBD6                 mov     [ecx+1Ch], eax
.text:0040DBD9                 add     ecx, 20h ; ' '
.text:0040DBDC                 sub     ebx, 8
.text:0040DBDF                 jnz     short def_40DB90 ; jumptable 0040DB90 default case
.text:0040DBE1                 mov     [ecx], esi
.text:0040DBE3                 mov     ebx, [esp+8+var_8]
.text:0040DBE6                 mov     esi, [esp+8+var_4]
.text:0040DBEA                 add     esp, 8
.text:0040DBED                 retn
.text:0040DBED ; ---------------------------------------------------------------------------
.text:0040DBEE                 align 10h
.text:0040DBF0
.text:0040DBF0 def_40DB90:                             ; CODE XREF: sub_40DB70+1E↑j
.text:0040DBF0                                         ; sub_40DB70+6F↑j ...
.text:0040DBF0                 mov     eax, [edx]      ; jumptable 0040DB90 default case
.text:0040DBF2                 mov     [ecx], esi
.text:0040DBF4
.text:0040DBF4 loc_40DBF4:                             ; CODE XREF: sub_40DB70+AF↓j
.text:0040DBF4                 mov     esi, [edx+4]
.text:0040DBF7                 mov     [ecx+4], eax
.text:0040DBFA
.text:0040DBFA loc_40DBFA:                             ; CODE XREF: sub_40DB70+F6↓j
.text:0040DBFA                 mov     eax, [edx+8]
.text:0040DBFD                 mov     [ecx+8], esi
.text:0040DC00
.text:0040DC00 loc_40DC00:                             ; CODE XREF: sub_40DB70+EB↓j
.text:0040DC00                 mov     esi, [edx+0Ch]
.text:0040DC03                 mov     [ecx+0Ch], eax
.text:0040DC06
.text:0040DC06 loc_40DC06:                             ; CODE XREF: sub_40DB70+DE↓j
.text:0040DC06                 mov     eax, [edx+10h]
.text:0040DC09                 mov     [ecx+10h], esi
.text:0040DC0C
.text:0040DC0C loc_40DC0C:                             ; CODE XREF: sub_40DB70+D1↓j
.text:0040DC0C                 mov     esi, [edx+14h]
.text:0040DC0F                 mov     [ecx+14h], eax
.text:0040DC12
.text:0040DC12 loc_40DC12:                             ; CODE XREF: sub_40DB70+C4↓j
.text:0040DC12                 mov     eax, [edx+18h]
.text:0040DC15                 mov     [ecx+18h], esi
.text:0040DC18                 jmp     short loc_40DBD0
.text:0040DC1A ; ---------------------------------------------------------------------------
.text:0040DC1A
.text:0040DC1A loc_40DC1A:                             ; CODE XREF: sub_40DB70+20↑j
.text:0040DC1A                                         ; DATA XREF: sub_40DB70:jpt_40DB90↑o
.text:0040DC1A                 mov     eax, [edx]      ; jumptable 0040DB90 case 0
.text:0040DC1C                 sub     ecx, 4
.text:0040DC1F                 jmp     short loc_40DBF4
.text:0040DC21 ; ---------------------------------------------------------------------------
.text:0040DC21
.text:0040DC21 loc_40DC21:                             ; CODE XREF: sub_40DB70+20↑j
.text:0040DC21                                         ; DATA XREF: sub_40DB70:jpt_40DB90↑o
.text:0040DC21                 mov     esi, [edx]      ; jumptable 0040DB90 case 1
.text:0040DC23                 dec     ebx
.text:0040DC24                 add     edx, 4
.text:0040DC27                 jmp     short def_40DB90 ; jumptable 0040DB90 default case
.text:0040DC29 ; ---------------------------------------------------------------------------
.text:0040DC29
.text:0040DC29 loc_40DC29:                             ; CODE XREF: sub_40DB70+20↑j
.text:0040DC29                                         ; DATA XREF: sub_40DB70:jpt_40DB90↑o
.text:0040DC29                 mov     esi, [edx]      ; jumptable 0040DB90 case 3
.text:0040DC2B                 sub     ecx, 18h
.text:0040DC2E                 add     ebx, 5
.text:0040DC31                 sub     edx, 14h
.text:0040DC34                 jmp     short loc_40DC12
.text:0040DC36 ; ---------------------------------------------------------------------------
.text:0040DC36
.text:0040DC36 loc_40DC36:                             ; CODE XREF: sub_40DB70+20↑j
.text:0040DC36                                         ; DATA XREF: sub_40DB70:jpt_40DB90↑o
.text:0040DC36                 mov     eax, [edx]      ; jumptable 0040DB90 case 4
.text:0040DC38                 sub     ecx, 14h
.text:0040DC3B                 add     ebx, 4
.text:0040DC3E                 sub     edx, 10h
.text:0040DC41                 jmp     short loc_40DC0C
.text:0040DC43 ; ---------------------------------------------------------------------------
.text:0040DC43
.text:0040DC43 loc_40DC43:                             ; CODE XREF: sub_40DB70+20↑j
.text:0040DC43                                         ; DATA XREF: sub_40DB70:jpt_40DB90↑o
.text:0040DC43                 mov     esi, [edx]      ; jumptable 0040DB90 case 5
.text:0040DC45                 sub     ecx, 10h
.text:0040DC48                 add     ebx, 3
.text:0040DC4B                 sub     edx, 0Ch
.text:0040DC4E                 jmp     short loc_40DC06
.text:0040DC50 ; ---------------------------------------------------------------------------
.text:0040DC50
.text:0040DC50 loc_40DC50:                             ; CODE XREF: sub_40DB70+20↑j
.text:0040DC50                                         ; DATA XREF: sub_40DB70:jpt_40DB90↑o
.text:0040DC50                 mov     eax, [edx]      ; jumptable 0040DB90 case 6
.text:0040DC52                 sub     ecx, 0Ch
.text:0040DC55                 add     ebx, 2
.text:0040DC58                 sub     edx, 8
.text:0040DC5B                 jmp     short loc_40DC00
.text:0040DC5D ; ---------------------------------------------------------------------------
.text:0040DC5D
.text:0040DC5D loc_40DC5D:                             ; CODE XREF: sub_40DB70+20↑j
.text:0040DC5D                                         ; DATA XREF: sub_40DB70:jpt_40DB90↑o
.text:0040DC5D                 mov     esi, [edx]      ; jumptable 0040DB90 case 7
.text:0040DC5F                 sub     ecx, 8
.text:0040DC62                 inc     ebx
.text:0040DC63                 sub     edx, 4
.text:0040DC66                 jmp     short loc_40DBFA
.text:0040DC66 sub_40DB70      endp
.text:0040DC66
.text:0040DC66 ; ---------------------------------------------------------------------------
.text:0040DC68                 align 10h
.text:0040DC70
.text:0040DC70 ; =============== S U B R O U T I N E =======================================
.text:0040DC70
.text:0040DC70
.text:0040DC70 sub_40DC70      proc near               ; CODE XREF: sub_40DAD0+93↑p
.text:0040DC70
.text:0040DC70 var_1C          = dword ptr -1Ch
.text:0040DC70 var_18          = dword ptr -18h
.text:0040DC70 var_14          = dword ptr -14h
.text:0040DC70 arg_0           = dword ptr  4
.text:0040DC70 arg_4           = dword ptr  8
.text:0040DC70 arg_8           = dword ptr  0Ch
.text:0040DC70
.text:0040DC70                 push    ebp
.text:0040DC71                 push    edi
.text:0040DC72                 push    esi
.text:0040DC73                 push    ebx
.text:0040DC74                 sub     esp, 0Ch
.text:0040DC77                 mov     edx, [esp+1Ch+arg_4]
.text:0040DC7B                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:0040DC83                 mov     eax, [esp+1Ch+arg_8]
.text:0040DC87                 mov     esi, [esp+1Ch+arg_0]
.text:0040DC8B                 mov     ecx, edx
.text:0040DC8D                 and     ecx, 3
.text:0040DC90                 and     eax, 3
.text:0040DC93                 shl     ecx, 3
.text:0040DC96                 and     edx, 0FFFFFFFCh
.text:0040DC99                 sub     [esp+1Ch+var_14], ecx
.text:0040DC9D                 cmp     eax, 1
.text:0040DCA0                 mov     [esp+1Ch+var_18], ecx
.text:0040DCA4                 jz      loc_40DD90
.text:0040DCAA                 cmp     eax, 1
.text:0040DCAD                 jb      loc_40DD80
.text:0040DCB3                 cmp     eax, 2
.text:0040DCB6                 jz      loc_40DD64
.text:0040DCBC                 cmp     eax, 3
.text:0040DCBF                 jz      loc_40DD53
.text:0040DCC5
.text:0040DCC5 loc_40DCC5:                             ; CODE XREF: sub_40DC70+C7↓j
.text:0040DCC5                                         ; sub_40DC70+12C↓j
.text:0040DCC5                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040DCCA                 mov     eax, edi
.text:0040DCCC                 mov     ebx, [edx]
.text:0040DCCE                 shr     ebp, cl
.text:0040DCD0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040DCD5                 shl     eax, cl
.text:0040DCD7                 or      ebp, eax
.text:0040DCD9                 mov     [esi], ebp
.text:0040DCDB
.text:0040DCDB loc_40DCDB:                             ; CODE XREF: sub_40DC70+11B↓j
.text:0040DCDB                 mov     ecx, [edx+4]
.text:0040DCDE                 mov     ebp, ebx
.text:0040DCE0                 mov     [esp+1Ch+var_1C], ecx
.text:0040DCE3                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040DCE8                 shr     edi, cl
.text:0040DCEA                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040DCEF                 shl     ebp, cl
.text:0040DCF1                 or      edi, ebp
.text:0040DCF3                 mov     [esi+4], edi
.text:0040DCF6
.text:0040DCF6 loc_40DCF6:                             ; CODE XREF: sub_40DC70+F2↓j
.text:0040DCF6                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040DCFB                 mov     edi, [esp+1Ch+var_1C]
.text:0040DCFE                 mov     ebp, [edx+8]
.text:0040DD01                 shr     ebx, cl
.text:0040DD03                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040DD08                 shl     edi, cl
.text:0040DD0A                 or      ebx, edi
.text:0040DD0C                 mov     [esi+8], ebx
.text:0040DD0F
.text:0040DD0F loc_40DD0F:                             ; CODE XREF: sub_40DC70+107↓j
.text:0040DD0F                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040DD14                 mov     ebx, ebp
.text:0040DD16                 mov     edi, [edx+0Ch]
.text:0040DD19                 add     edx, 10h
.text:0040DD1C                 shr     [esp+1Ch+var_1C], cl
.text:0040DD1F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040DD24                 shl     ebx, cl
.text:0040DD26                 or      [esp+1Ch+var_1C], ebx
.text:0040DD29                 mov     ebx, [esp+1Ch+var_1C]
.text:0040DD2C                 mov     [esi+0Ch], ebx
.text:0040DD2F                 add     esi, 10h
.text:0040DD32                 sub     [esp+1Ch+arg_8], 4
.text:0040DD37                 jnz     short loc_40DCC5
.text:0040DD39                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040DD3E                 shr     ebp, cl
.text:0040DD40                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040DD45                 shl     edi, cl
.text:0040DD47                 or      ebp, edi
.text:0040DD49                 mov     [esi], ebp
.text:0040DD4B                 add     esp, 0Ch
.text:0040DD4E                 pop     ebx
.text:0040DD4F                 pop     esi
.text:0040DD50                 pop     edi
.text:0040DD51                 pop     ebp
.text:0040DD52                 retn
.text:0040DD53 ; ---------------------------------------------------------------------------
.text:0040DD53
.text:0040DD53 loc_40DD53:                             ; CODE XREF: sub_40DC70+4F↑j
.text:0040DD53                 inc     [esp+1Ch+arg_8]
.text:0040DD57                 sub     esi, 8
.text:0040DD5A                 mov     eax, [edx+4]
.text:0040DD5D                 mov     ebx, [edx]
.text:0040DD5F                 mov     [esp+1Ch+var_1C], eax
.text:0040DD62                 jmp     short loc_40DCF6
.text:0040DD64 ; ---------------------------------------------------------------------------
.text:0040DD64
.text:0040DD64 loc_40DD64:                             ; CODE XREF: sub_40DC70+46↑j
.text:0040DD64                 add     [esp+1Ch+arg_8], 2
.text:0040DD69                 sub     esi, 0Ch
.text:0040DD6C                 mov     ecx, [edx]
.text:0040DD6E                 mov     ebp, [edx+4]
.text:0040DD71                 sub     edx, 4
.text:0040DD74                 mov     [esp+1Ch+var_1C], ecx
.text:0040DD77                 jmp     short loc_40DD0F
.text:0040DD77 ; ---------------------------------------------------------------------------
.text:0040DD79                 align 10h
.text:0040DD80
.text:0040DD80 loc_40DD80:                             ; CODE XREF: sub_40DC70+3D↑j
.text:0040DD80                 mov     edi, [edx]
.text:0040DD82                 sub     esi, 4
.text:0040DD85                 mov     ebx, [edx+4]
.text:0040DD88                 add     edx, 4
.text:0040DD8B                 jmp     loc_40DCDB
.text:0040DD90 ; ---------------------------------------------------------------------------
.text:0040DD90
.text:0040DD90 loc_40DD90:                             ; CODE XREF: sub_40DC70+34↑j
.text:0040DD90                 dec     [esp+1Ch+arg_8]
.text:0040DD94                 mov     ebp, [edx]
.text:0040DD96                 mov     edi, [edx+4]
.text:0040DD99                 add     edx, 8
.text:0040DD9C                 jmp     loc_40DCC5
.text:0040DD9C sub_40DC70      endp
.text:0040DD9C
.text:0040DDA1 ; ---------------------------------------------------------------------------
.text:0040DDA1                 jmp     short loc_40DDB0
.text:0040DDA1 ; ---------------------------------------------------------------------------
.text:0040DDA3                 align 10h
.text:0040DDB0
.text:0040DDB0 loc_40DDB0:                             ; CODE XREF: .text:0040DDA1↑j
.text:0040DDB0                 sub     esp, 8
.text:0040DDB3                 mov     ecx, [esp+0Ch]
.text:0040DDB7                 mov     [esp+4], esi
.text:0040DDBB                 mov     esi, [esp+14h]
.text:0040DDBF                 mov     [esp], ebx
.text:0040DDC2                 mov     edx, [esp+10h]
.text:0040DDC6                 mov     eax, esi
.text:0040DDC8                 and     eax, 7
.text:0040DDCB                 cmp     eax, 7          ; switch 8 cases
.text:0040DDCE                 ja      short def_40DDD0 ; jumptable 0040DDD0 default case
.text:0040DDD0                 jmp     ds:jpt_40DDD0[eax*4] ; switch jump
.text:0040DDD0 ; ---------------------------------------------------------------------------
.text:0040DDD7                 align 4
.text:0040DDD8 jpt_40DDD0      dd offset loc_40DE5C    ; DATA XREF: .text:0040DDD0↑r
.text:0040DDD8                 dd offset loc_40DE67    ; jump table for switch statement
.text:0040DDD8                 dd offset loc_40DDF8
.text:0040DDD8                 dd offset loc_40DE73
.text:0040DDD8                 dd offset loc_40DE81
.text:0040DDD8                 dd offset loc_40DE8F
.text:0040DDD8                 dd offset loc_40DE9D
.text:0040DDD8                 dd offset loc_40DEAB
.text:0040DDF8 ; ---------------------------------------------------------------------------
.text:0040DDF8
.text:0040DDF8 loc_40DDF8:                             ; CODE XREF: .text:0040DDD0↑j
.text:0040DDF8                                         ; DATA XREF: .text:jpt_40DDD0↑o
.text:0040DDF8                 sub     edx, 8          ; jumptable 0040DDD0 case 2
.text:0040DDFB                 sub     ecx, 4
.text:0040DDFE                 mov     eax, [edx+4]
.text:0040DE01                 add     esi, 6
.text:0040DE04                 lea     esi, [esi+0]
.text:0040DE0A                 lea     edi, [edi+0]
.text:0040DE10
.text:0040DE10 loc_40DE10:                             ; CODE XREF: .text:0040DE5A↓j
.text:0040DE10                 mov     ebx, [edx]
.text:0040DE12                 sub     edx, 20h ; ' '
.text:0040DE15                 mov     [ecx], eax
.text:0040DE17                 sub     ecx, 20h ; ' '
.text:0040DE1A                 sub     esi, 8
.text:0040DE1D                 jnz     short def_40DDD0 ; jumptable 0040DDD0 default case
.text:0040DE1F                 mov     [ecx+1Ch], ebx
.text:0040DE22                 mov     ebx, [esp]
.text:0040DE25                 mov     esi, [esp+4]
.text:0040DE29                 add     esp, 8
.text:0040DE2C                 retn
.text:0040DE2C ; ---------------------------------------------------------------------------
.text:0040DE2D                 align 10h
.text:0040DE30
.text:0040DE30 def_40DDD0:                             ; CODE XREF: .text:0040DDCE↑j
.text:0040DE30                                         ; .text:0040DE1D↑j ...
.text:0040DE30                 mov     eax, [edx+1Ch]  ; jumptable 0040DDD0 default case
.text:0040DE33                 mov     [ecx+1Ch], ebx
.text:0040DE36
.text:0040DE36 loc_40DE36:                             ; CODE XREF: .text:0040DE65↓j
.text:0040DE36                 mov     ebx, [edx+18h]
.text:0040DE39                 mov     [ecx+18h], eax
.text:0040DE3C
.text:0040DE3C loc_40DE3C:                             ; CODE XREF: .text:0040DEB5↓j
.text:0040DE3C                 mov     eax, [edx+14h]
.text:0040DE3F                 mov     [ecx+14h], ebx
.text:0040DE42
.text:0040DE42 loc_40DE42:                             ; CODE XREF: .text:0040DEA9↓j
.text:0040DE42                 mov     ebx, [edx+10h]
.text:0040DE45                 mov     [ecx+10h], eax
.text:0040DE48
.text:0040DE48 loc_40DE48:                             ; CODE XREF: .text:0040DE9B↓j
.text:0040DE48                 mov     eax, [edx+0Ch]
.text:0040DE4B                 mov     [ecx+0Ch], ebx
.text:0040DE4E
.text:0040DE4E loc_40DE4E:                             ; CODE XREF: .text:0040DE8D↓j
.text:0040DE4E                 mov     ebx, [edx+8]
.text:0040DE51                 mov     [ecx+8], eax
.text:0040DE54
.text:0040DE54 loc_40DE54:                             ; CODE XREF: .text:0040DE7F↓j
.text:0040DE54                 mov     eax, [edx+4]
.text:0040DE57                 mov     [ecx+4], ebx
.text:0040DE5A                 jmp     short loc_40DE10
.text:0040DE5C ; ---------------------------------------------------------------------------
.text:0040DE5C
.text:0040DE5C loc_40DE5C:                             ; CODE XREF: .text:0040DDD0↑j
.text:0040DE5C                                         ; DATA XREF: .text:jpt_40DDD0↑o
.text:0040DE5C                 sub     edx, 20h ; ' '  ; jumptable 0040DDD0 case 0
.text:0040DE5F                 sub     ecx, 1Ch
.text:0040DE62                 mov     eax, [edx+1Ch]
.text:0040DE65                 jmp     short loc_40DE36
.text:0040DE67 ; ---------------------------------------------------------------------------
.text:0040DE67
.text:0040DE67 loc_40DE67:                             ; CODE XREF: .text:0040DDD0↑j
.text:0040DE67                                         ; DATA XREF: .text:jpt_40DDD0↑o
.text:0040DE67                 sub     edx, 24h ; '$'  ; jumptable 0040DDD0 case 1
.text:0040DE6A                 sub     ecx, 20h ; ' '
.text:0040DE6D                 mov     ebx, [edx+20h]
.text:0040DE70                 dec     esi
.text:0040DE71                 jmp     short def_40DDD0 ; jumptable 0040DDD0 default case
.text:0040DE73 ; ---------------------------------------------------------------------------
.text:0040DE73
.text:0040DE73 loc_40DE73:                             ; CODE XREF: .text:0040DDD0↑j
.text:0040DE73                                         ; DATA XREF: .text:jpt_40DDD0↑o
.text:0040DE73                 sub     edx, 0Ch        ; jumptable 0040DDD0 case 3
.text:0040DE76                 sub     ecx, 8
.text:0040DE79                 mov     ebx, [edx+8]
.text:0040DE7C                 add     esi, 5
.text:0040DE7F                 jmp     short loc_40DE54
.text:0040DE81 ; ---------------------------------------------------------------------------
.text:0040DE81
.text:0040DE81 loc_40DE81:                             ; CODE XREF: .text:0040DDD0↑j
.text:0040DE81                                         ; DATA XREF: .text:jpt_40DDD0↑o
.text:0040DE81                 sub     edx, 10h        ; jumptable 0040DDD0 case 4
.text:0040DE84                 sub     ecx, 0Ch
.text:0040DE87                 mov     eax, [edx+0Ch]
.text:0040DE8A                 add     esi, 4
.text:0040DE8D                 jmp     short loc_40DE4E
.text:0040DE8F ; ---------------------------------------------------------------------------
.text:0040DE8F
.text:0040DE8F loc_40DE8F:                             ; CODE XREF: .text:0040DDD0↑j
.text:0040DE8F                                         ; DATA XREF: .text:jpt_40DDD0↑o
.text:0040DE8F                 sub     edx, 14h        ; jumptable 0040DDD0 case 5
.text:0040DE92                 sub     ecx, 10h
.text:0040DE95                 mov     ebx, [edx+10h]
.text:0040DE98                 add     esi, 3
.text:0040DE9B                 jmp     short loc_40DE48
.text:0040DE9D ; ---------------------------------------------------------------------------
.text:0040DE9D
.text:0040DE9D loc_40DE9D:                             ; CODE XREF: .text:0040DDD0↑j
.text:0040DE9D                                         ; DATA XREF: .text:jpt_40DDD0↑o
.text:0040DE9D                 sub     edx, 18h        ; jumptable 0040DDD0 case 6
.text:0040DEA0                 sub     ecx, 14h
.text:0040DEA3                 mov     eax, [edx+14h]
.text:0040DEA6                 add     esi, 2
.text:0040DEA9                 jmp     short loc_40DE42
.text:0040DEAB ; ---------------------------------------------------------------------------
.text:0040DEAB
.text:0040DEAB loc_40DEAB:                             ; CODE XREF: .text:0040DDD0↑j
.text:0040DEAB                                         ; DATA XREF: .text:jpt_40DDD0↑o
.text:0040DEAB                 sub     edx, 1Ch        ; jumptable 0040DDD0 case 7
.text:0040DEAE                 sub     ecx, 18h
.text:0040DEB1                 mov     ebx, [edx+18h]
.text:0040DEB4                 inc     esi
.text:0040DEB5                 jmp     short loc_40DE3C
.text:0040DEB5 ; ---------------------------------------------------------------------------
.text:0040DEB7                 align 10h
.text:0040DEC0                 push    ebp
.text:0040DEC1                 push    edi
.text:0040DEC2                 push    esi
.text:0040DEC3                 push    ebx
.text:0040DEC4                 sub     esp, 8
.text:0040DEC7                 mov     edx, [esp+20h]
.text:0040DECB                 mov     dword ptr [esp+4], 20h ; ' '
.text:0040DED3                 mov     eax, [esp+24h]
.text:0040DED7                 mov     ecx, edx
.text:0040DED9                 and     ecx, 3
.text:0040DEDC                 and     eax, 3
.text:0040DEDF                 shl     ecx, 3
.text:0040DEE2                 sub     [esp+4], ecx
.text:0040DEE6                 and     edx, 0FFFFFFFCh
.text:0040DEE9                 add     edx, 4
.text:0040DEEC                 mov     [esp], ecx
.text:0040DEEF                 cmp     eax, 1
.text:0040DEF2                 jz      loc_40DFE8
.text:0040DEF8                 cmp     eax, 1
.text:0040DEFB                 jb      loc_40DFD5
.text:0040DF01                 cmp     eax, 2
.text:0040DF04                 jz      loc_40DFC0
.text:0040DF0A                 cmp     eax, 3
.text:0040DF0D                 jz      loc_40DFAC
.text:0040DF13
.text:0040DF13 loc_40DF13:                             ; CODE XREF: .text:0040DF8C↓j
.text:0040DF13                                         ; .text:0040DFFA↓j
.text:0040DF13                 movzx   ecx, byte ptr [esp]
.text:0040DF17                 mov     eax, edi
.text:0040DF19                 mov     ebx, [esp+1Ch]
.text:0040DF1D                 mov     esi, [edx+0Ch]
.text:0040DF20                 shr     eax, cl
.text:0040DF22                 movzx   ecx, byte ptr [esp+4]
.text:0040DF27                 shl     ebp, cl
.text:0040DF29                 or      eax, ebp
.text:0040DF2B                 mov     [ebx+0Ch], eax
.text:0040DF2E
.text:0040DF2E loc_40DF2E:                             ; CODE XREF: .text:0040DFE3↓j
.text:0040DF2E                 movzx   ecx, byte ptr [esp]
.text:0040DF32                 mov     ebp, esi
.text:0040DF34                 mov     ebx, [edx+8]
.text:0040DF37                 shr     ebp, cl
.text:0040DF39                 movzx   ecx, byte ptr [esp+4]
.text:0040DF3E                 shl     edi, cl
.text:0040DF40                 or      ebp, edi
.text:0040DF42                 mov     edi, [esp+1Ch]
.text:0040DF46                 mov     [edi+8], ebp
.text:0040DF49
.text:0040DF49 loc_40DF49:                             ; CODE XREF: .text:0040DFBE↓j
.text:0040DF49                 movzx   ecx, byte ptr [esp]
.text:0040DF4D                 mov     edi, ebx
.text:0040DF4F                 mov     ebp, [edx+4]
.text:0040DF52                 shr     edi, cl
.text:0040DF54                 movzx   ecx, byte ptr [esp+4]
.text:0040DF59                 shl     esi, cl
.text:0040DF5B                 or      edi, esi
.text:0040DF5D                 mov     esi, [esp+1Ch]
.text:0040DF61                 mov     [esi+4], edi
.text:0040DF64
.text:0040DF64 loc_40DF64:                             ; CODE XREF: .text:0040DFD3↓j
.text:0040DF64                 movzx   ecx, byte ptr [esp]
.text:0040DF68                 mov     esi, ebp
.text:0040DF6A                 mov     edi, [edx]
.text:0040DF6C                 sub     edx, 10h
.text:0040DF6F                 shr     esi, cl
.text:0040DF71                 movzx   ecx, byte ptr [esp+4]
.text:0040DF76                 shl     ebx, cl
.text:0040DF78                 or      esi, ebx
.text:0040DF7A                 mov     ebx, [esp+1Ch]
.text:0040DF7E                 mov     [ebx], esi
.text:0040DF80                 sub     ebx, 10h
.text:0040DF83                 sub     dword ptr [esp+24h], 4
.text:0040DF88                 mov     [esp+1Ch], ebx
.text:0040DF8C                 jnz     short loc_40DF13
.text:0040DF8E                 movzx   ecx, byte ptr [esp]
.text:0040DF92                 mov     edx, [esp+1Ch]
.text:0040DF96                 shr     edi, cl
.text:0040DF98                 movzx   ecx, byte ptr [esp+4]
.text:0040DF9D                 shl     ebp, cl
.text:0040DF9F                 or      edi, ebp
.text:0040DFA1                 mov     [edx+0Ch], edi
.text:0040DFA4                 add     esp, 8
.text:0040DFA7                 pop     ebx
.text:0040DFA8                 pop     esi
.text:0040DFA9                 pop     edi
.text:0040DFAA                 pop     ebp
.text:0040DFAB                 retn
.text:0040DFAC ; ---------------------------------------------------------------------------
.text:0040DFAC
.text:0040DFAC loc_40DFAC:                             ; CODE XREF: .text:0040DF0D↑j
.text:0040DFAC                 sub     dword ptr [esp+1Ch], 8
.text:0040DFB1                 sub     edx, 10h
.text:0040DFB4                 inc     dword ptr [esp+24h]
.text:0040DFB8                 mov     esi, [edx+0Ch]
.text:0040DFBB                 mov     ebx, [edx+8]
.text:0040DFBE                 jmp     short loc_40DF49
.text:0040DFC0 ; ---------------------------------------------------------------------------
.text:0040DFC0
.text:0040DFC0 loc_40DFC0:                             ; CODE XREF: .text:0040DF04↑j
.text:0040DFC0                 sub     dword ptr [esp+1Ch], 4
.text:0040DFC5                 sub     edx, 0Ch
.text:0040DFC8                 add     dword ptr [esp+24h], 2
.text:0040DFCD                 mov     ebx, [edx+8]
.text:0040DFD0                 mov     ebp, [edx+4]
.text:0040DFD3                 jmp     short loc_40DF64
.text:0040DFD5 ; ---------------------------------------------------------------------------
.text:0040DFD5
.text:0040DFD5 loc_40DFD5:                             ; CODE XREF: .text:0040DEFB↑j
.text:0040DFD5                 sub     dword ptr [esp+1Ch], 0Ch
.text:0040DFDA                 sub     edx, 14h
.text:0040DFDD                 mov     edi, [edx+10h]
.text:0040DFE0                 mov     esi, [edx+0Ch]
.text:0040DFE3                 jmp     loc_40DF2E
.text:0040DFE8 ; ---------------------------------------------------------------------------
.text:0040DFE8
.text:0040DFE8 loc_40DFE8:                             ; CODE XREF: .text:0040DEF2↑j
.text:0040DFE8                 sub     dword ptr [esp+1Ch], 10h
.text:0040DFED                 sub     edx, 18h
.text:0040DFF0                 dec     dword ptr [esp+24h]
.text:0040DFF4                 mov     ebp, [edx+14h]
.text:0040DFF7                 mov     edi, [edx+10h]
.text:0040DFFA                 jmp     loc_40DF13
.text:0040DFFA ; ---------------------------------------------------------------------------
.text:0040DFFF                 align 10h
.text:0040E000
.text:0040E000 ; =============== S U B R O U T I N E =======================================
.text:0040E000
.text:0040E000 ; Attributes: thunk
.text:0040E000
.text:0040E000 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040E000 mbrtowc         proc near               ; CODE XREF: sub_403C30+757↑p
.text:0040E000
.text:0040E000 DstCh           = dword ptr  4
.text:0040E000 SrcCh           = dword ptr  8
.text:0040E000 SizeInBytes     = dword ptr  0Ch
.text:0040E000 State           = dword ptr  10h
.text:0040E000
.text:0040E000                 jmp     ds:__imp_mbrtowc
.text:0040E000 mbrtowc         endp
.text:0040E000
.text:0040E000 ; ---------------------------------------------------------------------------
.text:0040E006                 align 10h
.text:0040E010
.text:0040E010 ; =============== S U B R O U T I N E =======================================
.text:0040E010
.text:0040E010 ; Attributes: thunk
.text:0040E010
.text:0040E010 ; wint_t __cdecl btowc(int Ch)
.text:0040E010 btowc           proc near               ; CODE XREF: sub_408170+1F73↑p
.text:0040E010                 jmp     ds:__imp_btowc
.text:0040E010 btowc           endp
.text:0040E010
.text:0040E010 ; ---------------------------------------------------------------------------
.text:0040E016                 align 10h
.text:0040E020
.text:0040E020 ; =============== S U B R O U T I N E =======================================
.text:0040E020
.text:0040E020 ; Attributes: thunk
.text:0040E020
.text:0040E020 ; wctype_t __cdecl wctype(const char *name)
.text:0040E020 wctype          proc near               ; CODE XREF: sub_408170+1F29↑p
.text:0040E020
.text:0040E020 name            = dword ptr  4
.text:0040E020
.text:0040E020                 jmp     ds:__imp_wctype
.text:0040E020 wctype          endp
.text:0040E020
.text:0040E020 ; ---------------------------------------------------------------------------
.text:0040E026                 align 10h
.text:0040E030
.text:0040E030 ; =============== S U B R O U T I N E =======================================
.text:0040E030
.text:0040E030 ; Attributes: bp-based frame
.text:0040E030
.text:0040E030 sub_40E030      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040E030                 push    ebp
.text:0040E031                 mov     ecx, offset dword_410000
.text:0040E036                 cmp     ecx, offset dword_410000
.text:0040E03C                 mov     ebp, esp
.text:0040E03E                 jnb     short loc_40E056
.text:0040E040
.text:0040E040 loc_40E040:                             ; CODE XREF: sub_40E030+24↓j
.text:0040E040                 mov     edx, [ecx+4]
.text:0040E043                 mov     eax, [ecx]
.text:0040E045                 add     ecx, 8
.text:0040E048                 add     [edx+400000h], eax
.text:0040E04E                 cmp     ecx, offset dword_410000
.text:0040E054                 jb      short loc_40E040
.text:0040E056
.text:0040E056 loc_40E056:                             ; CODE XREF: sub_40E030+E↑j
.text:0040E056                 pop     ebp
.text:0040E057                 retn
.text:0040E057 sub_40E030      endp
.text:0040E057
.text:0040E057 ; ---------------------------------------------------------------------------
.text:0040E058                 align 10h
.text:0040E060
.text:0040E060 ; =============== S U B R O U T I N E =======================================
.text:0040E060
.text:0040E060 ; Attributes: bp-based frame
.text:0040E060
.text:0040E060 sub_40E060      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040E060                                         ; TopLevelExceptionFilter+D7↑p
.text:0040E060                 push    ebp
.text:0040E061                 mov     ebp, esp
.text:0040E063                 fninit
.text:0040E065                 pop     ebp
.text:0040E066                 retn
.text:0040E066 sub_40E060      endp
.text:0040E066
.text:0040E066 ; ---------------------------------------------------------------------------
.text:0040E067                 align 10h
.text:0040E070
.text:0040E070 ; =============== S U B R O U T I N E =======================================
.text:0040E070
.text:0040E070 ; Attributes: bp-based frame
.text:0040E070
.text:0040E070 ; void __cdecl sub_40E070()
.text:0040E070 sub_40E070      proc near               ; DATA XREF: .text:loc_40E0B9↓o
.text:0040E070                                         ; sub_40E100:loc_40E12E↓o
.text:0040E070                 push    ebp
.text:0040E071                 mov     ebp, esp
.text:0040E073                 sub     esp, 8
.text:0040E076                 mov     eax, off_40F094
.text:0040E07B                 mov     edx, [eax]
.text:0040E07D                 test    edx, edx
.text:0040E07F                 jnz     short loc_40E085
.text:0040E081
.text:0040E081 loc_40E081:                             ; CODE XREF: sub_40E070+2C↓j
.text:0040E081                 mov     esp, ebp
.text:0040E083                 pop     ebp
.text:0040E084                 retn
.text:0040E085 ; ---------------------------------------------------------------------------
.text:0040E085
.text:0040E085 loc_40E085:                             ; CODE XREF: sub_40E070+F↑j
.text:0040E085                                         ; sub_40E070+2A↓j
.text:0040E085                 call    dword ptr [eax]
.text:0040E087                 mov     edx, off_40F094
.text:0040E08D                 mov     ecx, [edx+4]
.text:0040E090                 lea     eax, [edx+4]
.text:0040E093                 mov     off_40F094, eax
.text:0040E098                 test    ecx, ecx
.text:0040E09A                 jnz     short loc_40E085
.text:0040E09C                 jmp     short loc_40E081
.text:0040E09C sub_40E070      endp
.text:0040E09C
.text:0040E09C ; ---------------------------------------------------------------------------
.text:0040E09E                 align 10h
.text:0040E0A0                 push    ebp
.text:0040E0A1                 mov     ebp, esp
.text:0040E0A3                 sub     esp, 8
.text:0040E0A6                 mov     [ebp-4], ebx
.text:0040E0A9                 mov     eax, ds:dword_40E730
.text:0040E0AE                 cmp     eax, 0FFFFFFFFh
.text:0040E0B1                 jz      short loc_40E0DC
.text:0040E0B3
.text:0040E0B3 loc_40E0B3:                             ; CODE XREF: .text:0040E0E6↓j
.text:0040E0B3                                         ; .text:0040E0F9↓j
.text:0040E0B3                 test    eax, eax
.text:0040E0B5                 mov     ebx, eax
.text:0040E0B7                 jnz     short loc_40E0D0
.text:0040E0B9
.text:0040E0B9 loc_40E0B9:                             ; CODE XREF: .text:0040E0DA↓j
.text:0040E0B9                 mov     dword ptr [esp], offset sub_40E070
.text:0040E0C0                 call    sub_401040
.text:0040E0C5                 mov     ebx, [ebp-4]
.text:0040E0C8                 mov     esp, ebp
.text:0040E0CA                 pop     ebp
.text:0040E0CB                 retn
.text:0040E0CB ; ---------------------------------------------------------------------------
.text:0040E0CC                 align 10h
.text:0040E0D0
.text:0040E0D0 loc_40E0D0:                             ; CODE XREF: .text:0040E0B7↑j
.text:0040E0D0                                         ; .text:0040E0D8↓j
.text:0040E0D0                 call    ds:dword_40E730[ebx*4]
.text:0040E0D7                 dec     ebx
.text:0040E0D8                 jnz     short loc_40E0D0
.text:0040E0DA                 jmp     short loc_40E0B9
.text:0040E0DC ; ---------------------------------------------------------------------------
.text:0040E0DC
.text:0040E0DC loc_40E0DC:                             ; CODE XREF: .text:0040E0B1↑j
.text:0040E0DC                 mov     ecx, ds:dword_40E734
.text:0040E0E2                 xor     eax, eax
.text:0040E0E4                 test    ecx, ecx
.text:0040E0E6                 jz      short loc_40E0B3
.text:0040E0E8                 mov     edx, offset dword_40E730
.text:0040E0ED                 lea     esi, [esi+0]
.text:0040E0F0
.text:0040E0F0 loc_40E0F0:                             ; CODE XREF: .text:0040E0F7↓j
.text:0040E0F0                 inc     eax
.text:0040E0F1                 mov     ecx, [edx+eax*4+4]
.text:0040E0F5                 test    ecx, ecx
.text:0040E0F7                 jnz     short loc_40E0F0
.text:0040E0F9                 jmp     short loc_40E0B3
.text:0040E0F9 ; ---------------------------------------------------------------------------
.text:0040E0FB                 align 10h
.text:0040E100
.text:0040E100 ; =============== S U B R O U T I N E =======================================
.text:0040E100
.text:0040E100 ; Attributes: bp-based frame
.text:0040E100
.text:0040E100 sub_40E100      proc near               ; CODE XREF: sub_401360+16↑p
.text:0040E100
.text:0040E100 var_8           = dword ptr -8
.text:0040E100 var_4           = dword ptr -4
.text:0040E100
.text:0040E100                 push    ebp
.text:0040E101                 mov     ebp, esp
.text:0040E103                 sub     esp, 8
.text:0040E106                 mov     [ebp+var_4], ebx
.text:0040E109                 mov     edx, dword_40F090
.text:0040E10F                 test    edx, edx
.text:0040E111                 jnz     short loc_40E13A
.text:0040E113                 mov     eax, ds:dword_40E730
.text:0040E118                 mov     edx, 1
.text:0040E11D                 mov     dword_40F090, edx
.text:0040E123                 cmp     eax, 0FFFFFFFFh
.text:0040E126                 jz      short loc_40E14D
.text:0040E128
.text:0040E128 loc_40E128:                             ; CODE XREF: sub_40E100+57↓j
.text:0040E128                                         ; sub_40E100+69↓j
.text:0040E128                 test    eax, eax
.text:0040E12A                 mov     ebx, eax
.text:0040E12C                 jnz     short loc_40E141
.text:0040E12E
.text:0040E12E loc_40E12E:                             ; CODE XREF: sub_40E100+4B↓j
.text:0040E12E                 mov     [esp+8+var_8], offset sub_40E070 ; void (__cdecl *)()
.text:0040E135                 call    sub_401040
.text:0040E13A
.text:0040E13A loc_40E13A:                             ; CODE XREF: sub_40E100+11↑j
.text:0040E13A                 mov     ebx, [ebp+var_4]
.text:0040E13D                 mov     esp, ebp
.text:0040E13F                 pop     ebp
.text:0040E140                 retn
.text:0040E141 ; ---------------------------------------------------------------------------
.text:0040E141
.text:0040E141 loc_40E141:                             ; CODE XREF: sub_40E100+2C↑j
.text:0040E141                                         ; sub_40E100+49↓j
.text:0040E141                 call    ds:dword_40E730[ebx*4]
.text:0040E148                 dec     ebx
.text:0040E149                 jnz     short loc_40E141
.text:0040E14B                 jmp     short loc_40E12E
.text:0040E14D ; ---------------------------------------------------------------------------
.text:0040E14D
.text:0040E14D loc_40E14D:                             ; CODE XREF: sub_40E100+26↑j
.text:0040E14D                 mov     ecx, ds:dword_40E734
.text:0040E153                 xor     eax, eax
.text:0040E155                 test    ecx, ecx
.text:0040E157                 jz      short loc_40E128
.text:0040E159                 mov     edx, offset dword_40E730
.text:0040E15E                 mov     esi, esi
.text:0040E160
.text:0040E160 loc_40E160:                             ; CODE XREF: sub_40E100+67↓j
.text:0040E160                 inc     eax
.text:0040E161                 mov     ebx, [edx+eax*4+4]
.text:0040E165                 test    ebx, ebx
.text:0040E167                 jnz     short loc_40E160
.text:0040E169                 jmp     short loc_40E128
.text:0040E169 sub_40E100      endp
.text:0040E169
.text:0040E169 ; ---------------------------------------------------------------------------
.text:0040E16B                 align 10h
.text:0040E170
.text:0040E170 ; =============== S U B R O U T I N E =======================================
.text:0040E170
.text:0040E170 ; Attributes: info_from_lumina
.text:0040E170
.text:0040E170 ; void *__cdecl _alloca(size_t Size)
.text:0040E170 __alloca        proc near               ; CODE XREF: sub_401360+E↑p
.text:0040E170                 push    ecx
.text:0040E171                 mov     ecx, esp
.text:0040E173                 add     ecx, 8
.text:0040E176
.text:0040E176 loc_40E176:                             ; CODE XREF: __alloca+1B↓j
.text:0040E176                 cmp     eax, 1000h
.text:0040E17B                 jb      short loc_40E18D
.text:0040E17D                 sub     ecx, 1000h
.text:0040E183                 or      dword ptr [ecx], 0
.text:0040E186                 sub     eax, 1000h
.text:0040E18B                 jmp     short loc_40E176
.text:0040E18D ; ---------------------------------------------------------------------------
.text:0040E18D
.text:0040E18D loc_40E18D:                             ; CODE XREF: __alloca+B↑j
.text:0040E18D                 sub     ecx, eax
.text:0040E18F                 or      dword ptr [ecx], 0
.text:0040E192                 mov     eax, esp
.text:0040E194                 mov     esp, ecx
.text:0040E196                 mov     ecx, [eax]
.text:0040E198                 mov     eax, [eax+4]
.text:0040E19B                 jmp     eax
.text:0040E19B __alloca        endp
.text:0040E19B
.text:0040E19B ; ---------------------------------------------------------------------------
.text:0040E19D                 align 10h
.text:0040E1A0
.text:0040E1A0 ; =============== S U B R O U T I N E =======================================
.text:0040E1A0
.text:0040E1A0 ; Attributes: bp-based frame
.text:0040E1A0
.text:0040E1A0 sub_40E1A0      proc near               ; CODE XREF: sub_4037F0+37A↑p
.text:0040E1A0                                         ; sub_40BBC0+58↑p ...
.text:0040E1A0
.text:0040E1A0 var_2C          = dword ptr -2Ch
.text:0040E1A0 var_28          = dword ptr -28h
.text:0040E1A0 var_24          = dword ptr -24h
.text:0040E1A0 var_20          = dword ptr -20h
.text:0040E1A0 var_1C          = dword ptr -1Ch
.text:0040E1A0 var_14          = dword ptr -14h
.text:0040E1A0 arg_0           = dword ptr  8
.text:0040E1A0 arg_4           = dword ptr  0Ch
.text:0040E1A0 arg_8           = dword ptr  10h
.text:0040E1A0 arg_C           = dword ptr  14h
.text:0040E1A0
.text:0040E1A0                 push    ebp
.text:0040E1A1                 mov     ebp, esp
.text:0040E1A3                 push    edi
.text:0040E1A4                 push    esi
.text:0040E1A5                 push    ebx
.text:0040E1A6                 sub     esp, 24h
.text:0040E1A9                 mov     ebx, [ebp+arg_4]
.text:0040E1AC                 mov     [ebp+var_20], 0
.text:0040E1B3                 mov     ecx, [ebp+arg_0]
.text:0040E1B6                 mov     eax, [ebp+arg_8]
.text:0040E1B9                 mov     [ebp+var_1C], 0
.text:0040E1C0                 test    ebx, ebx
.text:0040E1C2                 mov     edx, [ebp+arg_C]
.text:0040E1C5                 mov     [ebp+var_14], 0
.text:0040E1CC                 js      loc_40E2E0
.text:0040E1D2
.text:0040E1D2 loc_40E1D2:                             ; CODE XREF: sub_40E1A0+14E↓j
.text:0040E1D2                 test    edx, edx
.text:0040E1D4                 js      loc_40E2D0
.text:0040E1DA
.text:0040E1DA loc_40E1DA:                             ; CODE XREF: sub_40E1A0+13A↓j
.text:0040E1DA                 mov     [ebp+var_24], ecx
.text:0040E1DD                 test    edx, edx
.text:0040E1DF                 mov     esi, eax
.text:0040E1E1                 jnz     short loc_40E236
.text:0040E1E3                 cmp     eax, ebx
.text:0040E1E5                 jbe     short loc_40E214
.text:0040E1E7                 mov     eax, ecx
.text:0040E1E9                 mov     edx, ebx
.text:0040E1EB                 div     esi
.text:0040E1ED                 mov     edi, eax
.text:0040E1EF                 nop
.text:0040E1F0
.text:0040E1F0 loc_40E1F0:                             ; CODE XREF: sub_40E1A0+9C↓j
.text:0040E1F0                                         ; sub_40E1A0+B4↓j ...
.text:0040E1F0                 xor     ecx, ecx
.text:0040E1F2
.text:0040E1F2 loc_40E1F2:                             ; CODE XREF: sub_40E1A0+94↓j
.text:0040E1F2                 mov     [ebp+var_1C], ecx
.text:0040E1F5                 mov     ecx, [ebp+var_14]
.text:0040E1F8                 mov     [ebp+var_20], edi
.text:0040E1FB                 mov     eax, [ebp+var_20]
.text:0040E1FE                 mov     edx, [ebp+var_1C]
.text:0040E201                 test    ecx, ecx
.text:0040E203                 jz      short loc_40E20C
.text:0040E205                 neg     eax
.text:0040E207                 adc     edx, 0
.text:0040E20A                 neg     edx
.text:0040E20C
.text:0040E20C loc_40E20C:                             ; CODE XREF: sub_40E1A0+63↑j
.text:0040E20C                 add     esp, 24h
.text:0040E20F                 pop     ebx
.text:0040E210                 pop     esi
.text:0040E211                 pop     edi
.text:0040E212                 pop     ebp
.text:0040E213                 retn
.text:0040E214 ; ---------------------------------------------------------------------------
.text:0040E214
.text:0040E214 loc_40E214:                             ; CODE XREF: sub_40E1A0+45↑j
.text:0040E214                 test    eax, eax
.text:0040E216                 jnz     short loc_40E225
.text:0040E218                 mov     eax, 1
.text:0040E21D                 xor     ecx, ecx
.text:0040E21F                 xor     edx, edx
.text:0040E221                 div     ecx
.text:0040E223                 mov     esi, eax
.text:0040E225
.text:0040E225 loc_40E225:                             ; CODE XREF: sub_40E1A0+76↑j
.text:0040E225                 mov     eax, ebx
.text:0040E227                 xor     edx, edx
.text:0040E229                 div     esi
.text:0040E22B                 mov     ecx, eax
.text:0040E22D                 mov     eax, [ebp+var_24]
.text:0040E230                 div     esi
.text:0040E232                 mov     edi, eax
.text:0040E234                 jmp     short loc_40E1F2
.text:0040E236 ; ---------------------------------------------------------------------------
.text:0040E236
.text:0040E236 loc_40E236:                             ; CODE XREF: sub_40E1A0+41↑j
.text:0040E236                 cmp     edx, ebx
.text:0040E238                 jbe     short loc_40E240
.text:0040E23A                 xor     edi, edi
.text:0040E23C                 jmp     short loc_40E1F0
.text:0040E23C ; ---------------------------------------------------------------------------
.text:0040E23E                 align 10h
.text:0040E240
.text:0040E240 loc_40E240:                             ; CODE XREF: sub_40E1A0+98↑j
.text:0040E240                 bsr     eax, edx
.text:0040E243                 xor     eax, 1Fh
.text:0040E246                 mov     [ebp+var_28], eax
.text:0040E249                 jnz     short loc_40E260
.text:0040E24B                 cmp     ebx, edx
.text:0040E24D                 ja      short loc_40E256
.text:0040E24F                 xor     edi, edi
.text:0040E251                 cmp     [ebp+var_24], esi
.text:0040E254                 jb      short loc_40E1F0
.text:0040E256
.text:0040E256 loc_40E256:                             ; CODE XREF: sub_40E1A0+AD↑j
.text:0040E256                 mov     edi, 1
.text:0040E25B                 jmp     short loc_40E1F0
.text:0040E25B ; ---------------------------------------------------------------------------
.text:0040E25D                 align 10h
.text:0040E260
.text:0040E260 loc_40E260:                             ; CODE XREF: sub_40E1A0+A9↑j
.text:0040E260                 mov     eax, [ebp+var_28]
.text:0040E263                 mov     ecx, 20h ; ' '
.text:0040E268                 sub     ecx, eax
.text:0040E26A                 mov     [ebp+var_2C], ecx
.text:0040E26D                 mov     eax, esi
.text:0040E26F                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040E273                 shl     edx, cl
.text:0040E275                 mov     edi, edx
.text:0040E277                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040E27B                 mov     edx, ebx
.text:0040E27D                 shr     eax, cl
.text:0040E27F                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040E283                 or      edi, eax
.text:0040E285                 mov     eax, [ebp+var_24]
.text:0040E288                 shl     esi, cl
.text:0040E28A                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040E28E                 shr     edx, cl
.text:0040E290                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040E294                 shl     ebx, cl
.text:0040E296                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040E29A                 shr     eax, cl
.text:0040E29C                 or      ebx, eax
.text:0040E29E                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040E2A2                 mov     eax, ebx
.text:0040E2A4                 div     edi
.text:0040E2A6                 mov     ebx, edx
.text:0040E2A8                 mov     edi, eax
.text:0040E2AA                 shl     [ebp+var_24], cl
.text:0040E2AD                 mul     esi
.text:0040E2AF                 cmp     edx, ebx
.text:0040E2B1                 ja      short loc_40E2C4
.text:0040E2B3                 cmp     edx, ebx
.text:0040E2B5                 jnz     loc_40E1F0
.text:0040E2BB                 cmp     eax, [ebp+var_24]
.text:0040E2BE                 jbe     loc_40E1F0
.text:0040E2C4
.text:0040E2C4 loc_40E2C4:                             ; CODE XREF: sub_40E1A0+111↑j
.text:0040E2C4                 dec     edi
.text:0040E2C5                 jmp     loc_40E1F0
.text:0040E2C5 ; ---------------------------------------------------------------------------
.text:0040E2CA                 align 10h
.text:0040E2D0
.text:0040E2D0 loc_40E2D0:                             ; CODE XREF: sub_40E1A0+34↑j
.text:0040E2D0                 not     [ebp+var_14]
.text:0040E2D3                 neg     eax
.text:0040E2D5                 adc     edx, 0
.text:0040E2D8                 neg     edx
.text:0040E2DA                 jmp     loc_40E1DA
.text:0040E2DA ; ---------------------------------------------------------------------------
.text:0040E2DF                 align 10h
.text:0040E2E0
.text:0040E2E0 loc_40E2E0:                             ; CODE XREF: sub_40E1A0+2C↑j
.text:0040E2E0                 mov     [ebp+var_14], 0FFFFFFFFh
.text:0040E2E7                 neg     ecx
.text:0040E2E9                 adc     ebx, 0
.text:0040E2EC                 neg     ebx
.text:0040E2EE                 jmp     loc_40E1D2
.text:0040E2EE sub_40E1A0      endp
.text:0040E2EE
.text:0040E2EE ; ---------------------------------------------------------------------------
.text:0040E2F3                 align 10h
.text:0040E300
.text:0040E300 ; =============== S U B R O U T I N E =======================================
.text:0040E300
.text:0040E300 ; Attributes: bp-based frame
.text:0040E300
.text:0040E300 sub_40E300      proc near               ; CODE XREF: sub_4037F0+34F↑p
.text:0040E300                                         ; sub_40BBC0+38↑p ...
.text:0040E300
.text:0040E300 var_3C          = dword ptr -3Ch
.text:0040E300 var_34          = dword ptr -34h
.text:0040E300 var_30          = dword ptr -30h
.text:0040E300 var_2C          = dword ptr -2Ch
.text:0040E300 var_28          = dword ptr -28h
.text:0040E300 var_24          = dword ptr -24h
.text:0040E300 var_1C          = dword ptr -1Ch
.text:0040E300 var_18          = dword ptr -18h
.text:0040E300 var_14          = dword ptr -14h
.text:0040E300 arg_0           = dword ptr  8
.text:0040E300 arg_4           = dword ptr  0Ch
.text:0040E300 arg_8           = dword ptr  10h
.text:0040E300 arg_C           = dword ptr  14h
.text:0040E300
.text:0040E300                 push    ebp
.text:0040E301                 mov     ebp, esp
.text:0040E303                 push    edi
.text:0040E304                 push    esi
.text:0040E305                 push    ebx
.text:0040E306                 sub     esp, 34h
.text:0040E309                 mov     ebx, [ebp+arg_4]
.text:0040E30C                 mov     [ebp+var_28], 0
.text:0040E313                 mov     ecx, [ebp+arg_0]
.text:0040E316                 mov     eax, [ebp+arg_8]
.text:0040E319                 mov     [ebp+var_24], 0
.text:0040E320                 test    ebx, ebx
.text:0040E322                 mov     edx, [ebp+arg_C]
.text:0040E325                 mov     [ebp+var_1C], 0
.text:0040E32C                 js      loc_40E4A4
.text:0040E332
.text:0040E332 loc_40E332:                             ; CODE XREF: sub_40E300+1B2↓j
.text:0040E332                 test    edx, edx
.text:0040E334                 js      loc_40E498
.text:0040E33A
.text:0040E33A loc_40E33A:                             ; CODE XREF: sub_40E300+19F↓j
.text:0040E33A                 mov     [ebp+var_2C], edx
.text:0040E33D                 test    edx, edx
.text:0040E33F                 mov     esi, eax
.text:0040E341                 mov     [ebp+var_30], ecx
.text:0040E344                 mov     edi, ebx
.text:0040E346                 jnz     short loc_40E3B1
.text:0040E348                 cmp     eax, ebx
.text:0040E34A                 jbe     short loc_40E394
.text:0040E34C                 mov     eax, ecx
.text:0040E34E                 mov     edx, ebx
.text:0040E350                 div     esi
.text:0040E352
.text:0040E352 loc_40E352:                             ; CODE XREF: sub_40E300+AF↓j
.text:0040E352                 mov     [ebp+var_30], edx
.text:0040E355                 lea     ecx, [ebp+var_18]
.text:0040E358                 test    ecx, ecx
.text:0040E35A                 jz      short loc_40E375
.text:0040E35C                 mov     [ebp+var_24], 0
.text:0040E363
.text:0040E363 loc_40E363:                             ; CODE XREF: sub_40E300+FE↓j
.text:0040E363                 mov     eax, [ebp+var_30]
.text:0040E366                 mov     [ebp+var_28], eax
.text:0040E369                 mov     edx, [ebp+var_28]
.text:0040E36C                 mov     ecx, [ebp+var_24]
.text:0040E36F                 mov     [ebp+var_18], edx
.text:0040E372                 mov     [ebp+var_14], ecx
.text:0040E375
.text:0040E375 loc_40E375:                             ; CODE XREF: sub_40E300+5A↑j
.text:0040E375                                         ; sub_40E300+C8↓j ...
.text:0040E375                 mov     eax, [ebp+var_1C]
.text:0040E378                 test    eax, eax
.text:0040E37A                 jz      short loc_40E386
.text:0040E37C                 neg     [ebp+var_18]
.text:0040E37F                 adc     [ebp+var_14], 0
.text:0040E383                 neg     [ebp+var_14]
.text:0040E386
.text:0040E386 loc_40E386:                             ; CODE XREF: sub_40E300+7A↑j
.text:0040E386                 mov     eax, [ebp+var_18]
.text:0040E389                 mov     edx, [ebp+var_14]
.text:0040E38C                 add     esp, 34h
.text:0040E38F                 pop     ebx
.text:0040E390                 pop     esi
.text:0040E391                 pop     edi
.text:0040E392                 pop     ebp
.text:0040E393                 retn
.text:0040E394 ; ---------------------------------------------------------------------------
.text:0040E394
.text:0040E394 loc_40E394:                             ; CODE XREF: sub_40E300+4A↑j
.text:0040E394                 test    eax, eax
.text:0040E396                 jnz     short loc_40E3A3
.text:0040E398                 mov     eax, 1
.text:0040E39D                 xor     edx, edx
.text:0040E39F                 div     esi
.text:0040E3A1                 mov     esi, eax
.text:0040E3A3
.text:0040E3A3 loc_40E3A3:                             ; CODE XREF: sub_40E300+96↑j
.text:0040E3A3                 mov     eax, edi
.text:0040E3A5                 mov     edx, [ebp+var_2C]
.text:0040E3A8                 div     esi
.text:0040E3AA                 mov     eax, [ebp+var_30]
.text:0040E3AD                 div     esi
.text:0040E3AF                 jmp     short loc_40E352
.text:0040E3B1 ; ---------------------------------------------------------------------------
.text:0040E3B1
.text:0040E3B1 loc_40E3B1:                             ; CODE XREF: sub_40E300+46↑j
.text:0040E3B1                 cmp     [ebp+var_2C], ebx
.text:0040E3B4                 jbe     short loc_40E3D0
.text:0040E3B6                 mov     [ebp+var_28], ecx
.text:0040E3B9
.text:0040E3B9 loc_40E3B9:                             ; CODE XREF: sub_40E300+17E↓j
.text:0040E3B9                 mov     [ebp+var_24], edi
.text:0040E3BC                 mov     eax, [ebp+var_28]
.text:0040E3BF                 mov     edx, [ebp+var_24]
.text:0040E3C2                 mov     [ebp+var_18], eax
.text:0040E3C5                 mov     [ebp+var_14], edx
.text:0040E3C8                 jmp     short loc_40E375
.text:0040E3C8 ; ---------------------------------------------------------------------------
.text:0040E3CA                 align 10h
.text:0040E3D0
.text:0040E3D0 loc_40E3D0:                             ; CODE XREF: sub_40E300+B4↑j
.text:0040E3D0                 bsr     eax, [ebp+var_2C]
.text:0040E3D4                 mov     ebx, eax
.text:0040E3D6                 xor     ebx, 1Fh
.text:0040E3D9                 jnz     short loc_40E403
.text:0040E3DB                 cmp     edi, [ebp+var_2C]
.text:0040E3DE                 ja      short loc_40E3E5
.text:0040E3E0                 cmp     [ebp+var_30], esi
.text:0040E3E3                 jb      short loc_40E3F0
.text:0040E3E5
.text:0040E3E5 loc_40E3E5:                             ; CODE XREF: sub_40E300+DE↑j
.text:0040E3E5                 mov     edx, [ebp+var_30]
.text:0040E3E8                 sub     edx, esi
.text:0040E3EA                 sbb     edi, [ebp+var_2C]
.text:0040E3ED                 mov     [ebp+var_30], edx
.text:0040E3F0
.text:0040E3F0 loc_40E3F0:                             ; CODE XREF: sub_40E300+E3↑j
.text:0040E3F0                 lea     ecx, [ebp+var_18]
.text:0040E3F3                 test    ecx, ecx
.text:0040E3F5                 jz      loc_40E375
.text:0040E3FB                 mov     [ebp+var_24], edi
.text:0040E3FE                 jmp     loc_40E363
.text:0040E403 ; ---------------------------------------------------------------------------
.text:0040E403
.text:0040E403 loc_40E403:                             ; CODE XREF: sub_40E300+D9↑j
.text:0040E403                 mov     edx, [ebp+var_2C]
.text:0040E406                 mov     eax, 20h ; ' '
.text:0040E40B                 mov     cl, bl
.text:0040E40D                 sub     eax, ebx
.text:0040E40F                 mov     [ebp+var_34], eax
.text:0040E412                 shl     edx, cl
.text:0040E414                 mov     eax, esi
.text:0040E416                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040E41A                 shr     eax, cl
.text:0040E41C                 mov     cl, bl
.text:0040E41E                 shl     esi, cl
.text:0040E420                 or      edx, eax
.text:0040E422                 mov     eax, [ebp+var_30]
.text:0040E425                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040E429                 mov     [ebp+var_2C], edx
.text:0040E42C                 mov     edx, edi
.text:0040E42E                 shr     edx, cl
.text:0040E430                 mov     cl, bl
.text:0040E432                 shl     edi, cl
.text:0040E434                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040E438                 shr     eax, cl
.text:0040E43A                 or      edi, eax
.text:0040E43C                 mov     eax, edi
.text:0040E43E                 mov     cl, bl
.text:0040E440                 div     [ebp+var_2C]
.text:0040E443                 shl     [ebp+var_30], cl
.text:0040E446                 mov     edi, edx
.text:0040E448                 mul     esi
.text:0040E44A                 mov     [ebp+var_3C], eax
.text:0040E44D                 cmp     edx, edi
.text:0040E44F                 ja      short loc_40E48B
.text:0040E451                 cmp     edx, edi
.text:0040E453                 jz      short loc_40E483
.text:0040E455
.text:0040E455 loc_40E455:                             ; CODE XREF: sub_40E300+189↓j
.text:0040E455                                         ; sub_40E300+196↓j
.text:0040E455                 lea     eax, [ebp+var_18]
.text:0040E458                 test    eax, eax
.text:0040E45A                 jz      loc_40E375
.text:0040E460                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040E464                 mov     eax, [ebp+var_30]
.text:0040E467                 sub     eax, [ebp+var_3C]
.text:0040E46A                 sbb     edi, edx
.text:0040E46C                 mov     [ebp+var_30], eax
.text:0040E46F                 mov     edx, edi
.text:0040E471                 shl     edx, cl
.text:0040E473                 mov     cl, bl
.text:0040E475                 shr     eax, cl
.text:0040E477                 or      edx, eax
.text:0040E479                 mov     [ebp+var_28], edx
.text:0040E47C                 shr     edi, cl
.text:0040E47E                 jmp     loc_40E3B9
.text:0040E483 ; ---------------------------------------------------------------------------
.text:0040E483
.text:0040E483 loc_40E483:                             ; CODE XREF: sub_40E300+153↑j
.text:0040E483                 mov     eax, [ebp+var_30]
.text:0040E486                 cmp     [ebp+var_3C], eax
.text:0040E489                 jbe     short loc_40E455
.text:0040E48B
.text:0040E48B loc_40E48B:                             ; CODE XREF: sub_40E300+14F↑j
.text:0040E48B                 mov     ecx, [ebp+var_3C]
.text:0040E48E                 sub     ecx, esi
.text:0040E490                 sbb     edx, [ebp+var_2C]
.text:0040E493                 mov     [ebp+var_3C], ecx
.text:0040E496                 jmp     short loc_40E455
.text:0040E498 ; ---------------------------------------------------------------------------
.text:0040E498
.text:0040E498 loc_40E498:                             ; CODE XREF: sub_40E300+34↑j
.text:0040E498                 neg     eax
.text:0040E49A                 adc     edx, 0
.text:0040E49D                 neg     edx
.text:0040E49F                 jmp     loc_40E33A
.text:0040E4A4 ; ---------------------------------------------------------------------------
.text:0040E4A4
.text:0040E4A4 loc_40E4A4:                             ; CODE XREF: sub_40E300+2C↑j
.text:0040E4A4                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:0040E4AB                 neg     ecx
.text:0040E4AD                 adc     ebx, 0
.text:0040E4B0                 neg     ebx
.text:0040E4B2                 jmp     loc_40E332
.text:0040E4B2 sub_40E300      endp
.text:0040E4B2
.text:0040E4B2 ; ---------------------------------------------------------------------------
.text:0040E4B7                 align 10h
.text:0040E4C0                 jmp     ds:__set_app_type
.text:0040E4C0 ; ---------------------------------------------------------------------------
.text:0040E4C6                 align 10h
.text:0040E4D0
.text:0040E4D0 ; =============== S U B R O U T I N E =======================================
.text:0040E4D0
.text:0040E4D0 ; Attributes: thunk
.text:0040E4D0
.text:0040E4D0 ; void __cdecl cexit()
.text:0040E4D0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040E4D0                 jmp     ds:__imp__cexit
.text:0040E4D0 _cexit          endp
.text:0040E4D0
.text:0040E4D0 ; ---------------------------------------------------------------------------
.text:0040E4D6                 align 10h
.text:0040E4E0
.text:0040E4E0 ; =============== S U B R O U T I N E =======================================
.text:0040E4E0
.text:0040E4E0 ; Attributes: thunk
.text:0040E4E0
.text:0040E4E0 ; char ***__cdecl _p__environ()
.text:0040E4E0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040E4E0                 jmp     ds:__imp___p__environ
.text:0040E4E0 __p__environ    endp
.text:0040E4E0
.text:0040E4E0 ; ---------------------------------------------------------------------------
.text:0040E4E6                 align 10h
.text:0040E4F0
.text:0040E4F0 ; =============== S U B R O U T I N E =======================================
.text:0040E4F0
.text:0040E4F0 ; Attributes: thunk
.text:0040E4F0
.text:0040E4F0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040E4F0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040E4F0                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040E4F0
.text:0040E4F0 Signal          = dword ptr  4
.text:0040E4F0 Function        = dword ptr  8
.text:0040E4F0
.text:0040E4F0                 jmp     ds:__imp_signal
.text:0040E4F0 signal          endp
.text:0040E4F0
.text:0040E4F0 ; ---------------------------------------------------------------------------
.text:0040E4F6                 align 10h
.text:0040E500
.text:0040E500 ; =============== S U B R O U T I N E =======================================
.text:0040E500
.text:0040E500 ; Attributes: thunk
.text:0040E500
.text:0040E500 ; int *__cdecl _p__fmode()
.text:0040E500 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040E500                 jmp     ds:__imp___p__fmode
.text:0040E500 __p__fmode      endp
.text:0040E500
.text:0040E500 ; ---------------------------------------------------------------------------
.text:0040E506                 align 10h
.text:0040E510
.text:0040E510 ; =============== S U B R O U T I N E =======================================
.text:0040E510
.text:0040E510 ; Attributes: thunk
.text:0040E510
.text:0040E510 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040E510 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040E510                                         ; sub_401080+90↑p ...
.text:0040E510
.text:0040E510 FileHandle      = dword ptr  4
.text:0040E510 Mode            = dword ptr  8
.text:0040E510
.text:0040E510                 jmp     ds:__imp__setmode
.text:0040E510 _setmode        endp
.text:0040E510
.text:0040E510 ; ---------------------------------------------------------------------------
.text:0040E516                 align 10h
.text:0040E520
.text:0040E520 ; =============== S U B R O U T I N E =======================================
.text:0040E520
.text:0040E520 ; Attributes: thunk
.text:0040E520
.text:0040E520 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040E520                 jmp     ds:__imp___getmainargs
.text:0040E520 __getmainargs   endp
.text:0040E520
.text:0040E520 ; ---------------------------------------------------------------------------
.text:0040E526                 align 10h
.text:0040E530
.text:0040E530 ; =============== S U B R O U T I N E =======================================
.text:0040E530
.text:0040E530 ; Attributes: thunk
.text:0040E530
.text:0040E530 ; int __cdecl strcoll(const char *String1, const char *String2)
.text:0040E530 strcoll         proc near               ; CODE XREF: sub_402F90+1BD↑p
.text:0040E530
.text:0040E530 String1         = dword ptr  4
.text:0040E530 String2         = dword ptr  8
.text:0040E530
.text:0040E530                 jmp     ds:__imp_strcoll
.text:0040E530 strcoll         endp
.text:0040E530
.text:0040E530 ; ---------------------------------------------------------------------------
.text:0040E536                 align 10h
.text:0040E540
.text:0040E540 ; =============== S U B R O U T I N E =======================================
.text:0040E540
.text:0040E540 ; Attributes: thunk
.text:0040E540
.text:0040E540 ; int *__cdecl errno()
.text:0040E540 _errno          proc near               ; CODE XREF: sub_402F90+1A4↑p
.text:0040E540                                         ; sub_402F90+1CB↑p ...
.text:0040E540                 jmp     ds:__imp__errno
.text:0040E540 _errno          endp
.text:0040E540
.text:0040E540 ; ---------------------------------------------------------------------------
.text:0040E546                 align 10h
.text:0040E550
.text:0040E550 ; =============== S U B R O U T I N E =======================================
.text:0040E550
.text:0040E550 ; Attributes: thunk
.text:0040E550
.text:0040E550 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040E550 strncpy         proc near               ; CODE XREF: sub_401610+451↑p
.text:0040E550
.text:0040E550 Destination     = dword ptr  4
.text:0040E550 Source          = dword ptr  8
.text:0040E550 Count           = dword ptr  0Ch
.text:0040E550
.text:0040E550                 jmp     ds:__imp_strncpy
.text:0040E550 strncpy         endp
.text:0040E550
.text:0040E550 ; ---------------------------------------------------------------------------
.text:0040E556                 align 10h
.text:0040E560
.text:0040E560 ; =============== S U B R O U T I N E =======================================
.text:0040E560
.text:0040E560 ; Attributes: thunk
.text:0040E560
.text:0040E560 ; size_t __cdecl strcspn(const char *Str, const char *Control)
.text:0040E560 strcspn         proc near               ; CODE XREF: sub_401610+4FC↑p
.text:0040E560
.text:0040E560 Str             = dword ptr  4
.text:0040E560 Control         = dword ptr  8
.text:0040E560
.text:0040E560                 jmp     ds:__imp_strcspn
.text:0040E560 strcspn         endp
.text:0040E560
.text:0040E560 ; ---------------------------------------------------------------------------
.text:0040E566                 align 10h
.text:0040E570
.text:0040E570 ; =============== S U B R O U T I N E =======================================
.text:0040E570
.text:0040E570 ; Attributes: thunk
.text:0040E570
.text:0040E570 ; size_t __cdecl strlen(const char *Str)
.text:0040E570 strlen          proc near               ; CODE XREF: sub_401610+3DB↑p
.text:0040E570                                         ; sub_401610+528↑p ...
.text:0040E570
.text:0040E570 Str             = dword ptr  4
.text:0040E570
.text:0040E570                 jmp     ds:__imp_strlen
.text:0040E570 strlen          endp
.text:0040E570
.text:0040E570 ; ---------------------------------------------------------------------------
.text:0040E576                 align 10h
.text:0040E580
.text:0040E580 ; =============== S U B R O U T I N E =======================================
.text:0040E580
.text:0040E580 ; Attributes: thunk
.text:0040E580
.text:0040E580 ; int __cdecl puts(const char *Buffer)
.text:0040E580 puts            proc near               ; CODE XREF: sub_401500+16↑p
.text:0040E580
.text:0040E580 Buffer          = dword ptr  4
.text:0040E580
.text:0040E580                 jmp     ds:__imp_puts
.text:0040E580 puts            endp
.text:0040E580
.text:0040E580 ; ---------------------------------------------------------------------------
.text:0040E586                 align 10h
.text:0040E590
.text:0040E590 ; =============== S U B R O U T I N E =======================================
.text:0040E590
.text:0040E590 ; Attributes: noreturn thunk
.text:0040E590
.text:0040E590 ; void __cdecl __noreturn abort()
.text:0040E590 abort           proc near               ; CODE XREF: sub_401500:loc_40153C↑p
.text:0040E590                                         ; sub_401550:loc_4015BE↑p ...
.text:0040E590                 jmp     ds:__imp_abort
.text:0040E590 abort           endp
.text:0040E590
.text:0040E590 ; ---------------------------------------------------------------------------
.text:0040E596                 align 10h
.text:0040E5A0
.text:0040E5A0 ; =============== S U B R O U T I N E =======================================
.text:0040E5A0
.text:0040E5A0 ; Attributes: thunk
.text:0040E5A0
.text:0040E5A0 ; void __cdecl free(void *Block)
.text:0040E5A0 free            proc near               ; CODE XREF: sub_401610+380↑p
.text:0040E5A0                                         ; sub_401610+38D↑p ...
.text:0040E5A0
.text:0040E5A0 Block           = dword ptr  4
.text:0040E5A0
.text:0040E5A0                 jmp     ds:__imp_free
.text:0040E5A0 free            endp
.text:0040E5A0
.text:0040E5A0 ; ---------------------------------------------------------------------------
.text:0040E5A6                 align 10h
.text:0040E5B0
.text:0040E5B0 ; =============== S U B R O U T I N E =======================================
.text:0040E5B0
.text:0040E5B0 ; Attributes: thunk
.text:0040E5B0
.text:0040E5B0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040E5B0 strcmp          proc near               ; CODE XREF: sub_401610+74↑p
.text:0040E5B0                                         ; sub_401610+A7↑p ...
.text:0040E5B0
.text:0040E5B0 Str1            = dword ptr  4
.text:0040E5B0 Str2            = dword ptr  8
.text:0040E5B0
.text:0040E5B0                 jmp     ds:__imp_strcmp
.text:0040E5B0 strcmp          endp
.text:0040E5B0
.text:0040E5B0 ; ---------------------------------------------------------------------------
.text:0040E5B6                 align 10h
.text:0040E5C0
.text:0040E5C0 ; =============== S U B R O U T I N E =======================================
.text:0040E5C0
.text:0040E5C0 ; Attributes: thunk
.text:0040E5C0
.text:0040E5C0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040E5C0 setlocale       proc near               ; CODE XREF: sub_401360+35↑p
.text:0040E5C0
.text:0040E5C0 Category        = dword ptr  4
.text:0040E5C0 Locale          = dword ptr  8
.text:0040E5C0
.text:0040E5C0                 jmp     ds:__imp_setlocale
.text:0040E5C0 setlocale       endp
.text:0040E5C0
.text:0040E5C0 ; ---------------------------------------------------------------------------
.text:0040E5C6                 align 10h
.text:0040E5D0
.text:0040E5D0 ; =============== S U B R O U T I N E =======================================
.text:0040E5D0
.text:0040E5D0 ; Attributes: noreturn thunk
.text:0040E5D0
.text:0040E5D0 ; void __cdecl __noreturn exit(int Code)
.text:0040E5D0 exit            proc near               ; CODE XREF: sub_401360:loc_40148C↑p
.text:0040E5D0                                         ; sub_402870+3B↑p ...
.text:0040E5D0
.text:0040E5D0 Code            = dword ptr  4
.text:0040E5D0
.text:0040E5D0                 jmp     ds:__imp_exit
.text:0040E5D0 exit            endp
.text:0040E5D0
.text:0040E5D0 ; ---------------------------------------------------------------------------
.text:0040E5D6                 align 10h
.text:0040E5E0
.text:0040E5E0 ; =============== S U B R O U T I N E =======================================
.text:0040E5E0
.text:0040E5E0 ; Attributes: thunk
.text:0040E5E0
.text:0040E5E0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040E5E0 fputs           proc near               ; CODE XREF: sub_402870+A4↑p
.text:0040E5E0                                         ; sub_402870+C6↑p ...
.text:0040E5E0
.text:0040E5E0 Buffer          = dword ptr  4
.text:0040E5E0 Stream          = dword ptr  8
.text:0040E5E0
.text:0040E5E0                 jmp     ds:__imp_fputs
.text:0040E5E0 fputs           endp
.text:0040E5E0
.text:0040E5E0 ; ---------------------------------------------------------------------------
.text:0040E5E6                 align 10h
.text:0040E5F0
.text:0040E5F0 ; =============== S U B R O U T I N E =======================================
.text:0040E5F0
.text:0040E5F0 ; Attributes: thunk
.text:0040E5F0
.text:0040E5F0 ; int printf(const char *const Format, ...)
.text:0040E5F0 printf          proc near               ; CODE XREF: sub_402870+5E↑p
.text:0040E5F0                                         ; sub_402870+1F3↑p
.text:0040E5F0
.text:0040E5F0 Format          = dword ptr  4
.text:0040E5F0
.text:0040E5F0                 jmp     ds:__imp_printf
.text:0040E5F0 printf          endp
.text:0040E5F0
.text:0040E5F0 ; ---------------------------------------------------------------------------
.text:0040E5F6                 align 10h
.text:0040E600
.text:0040E600 ; =============== S U B R O U T I N E =======================================
.text:0040E600
.text:0040E600 ; Attributes: thunk
.text:0040E600
.text:0040E600 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040E600 fprintf         proc near               ; CODE XREF: sub_401360+120↑p
.text:0040E600                                         ; sub_402870+33↑p ...
.text:0040E600
.text:0040E600 Stream          = dword ptr  4
.text:0040E600 Format          = dword ptr  8
.text:0040E600
.text:0040E600                 jmp     ds:__imp_fprintf
.text:0040E600 fprintf         endp
.text:0040E600
.text:0040E600 ; ---------------------------------------------------------------------------
.text:0040E606                 align 10h
.text:0040E610
.text:0040E610 ; =============== S U B R O U T I N E =======================================
.text:0040E610
.text:0040E610 ; Attributes: thunk
.text:0040E610
.text:0040E610 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040E610 _flsbuf         proc near               ; CODE XREF: sub_402870+211↑p
.text:0040E610                                         ; sub_40D490+128↑p ...
.text:0040E610
.text:0040E610 File            = dword ptr  8
.text:0040E610
.text:0040E610                 jmp     ds:__imp__flsbuf
.text:0040E610 _flsbuf         endp
.text:0040E610
.text:0040E610 ; ---------------------------------------------------------------------------
.text:0040E616                 align 10h
.text:0040E620
.text:0040E620 ; =============== S U B R O U T I N E =======================================
.text:0040E620
.text:0040E620 ; Attributes: thunk
.text:0040E620
.text:0040E620 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040E620 iswctype        proc near               ; CODE XREF: sub_403C30+78B↑p
.text:0040E620                                         ; sub_408170+1F86↑p
.text:0040E620
.text:0040E620 C               = word ptr  4
.text:0040E620 Type            = word ptr  8
.text:0040E620
.text:0040E620                 jmp     ds:__imp_iswctype
.text:0040E620 iswctype        endp
.text:0040E620
.text:0040E620 ; ---------------------------------------------------------------------------
.text:0040E626                 align 10h
.text:0040E630
.text:0040E630 ; =============== S U B R O U T I N E =======================================
.text:0040E630
.text:0040E630 ; Attributes: thunk
.text:0040E630
.text:0040E630 ; int __cdecl isctype(int C, int Type)
.text:0040E630 _isctype        proc near               ; CODE XREF: sub_403C30+610↑p
.text:0040E630                                         ; .text:00407CD9↑p ...
.text:0040E630
.text:0040E630 C               = dword ptr  4
.text:0040E630 Type            = dword ptr  8
.text:0040E630
.text:0040E630                 jmp     ds:__imp__isctype
.text:0040E630 _isctype        endp
.text:0040E630
.text:0040E630 ; ---------------------------------------------------------------------------
.text:0040E636                 align 10h
.text:0040E640
.text:0040E640 ; =============== S U B R O U T I N E =======================================
.text:0040E640
.text:0040E640 ; Attributes: thunk
.text:0040E640
.text:0040E640 ; int __cdecl tolower(int C)
.text:0040E640 tolower         proc near               ; CODE XREF: .text:00407CF8↑p
.text:0040E640
.text:0040E640 C               = dword ptr  4
.text:0040E640
.text:0040E640                 jmp     ds:__imp_tolower
.text:0040E640 tolower         endp
.text:0040E640
.text:0040E640 ; ---------------------------------------------------------------------------
.text:0040E646                 align 10h
.text:0040E650
.text:0040E650 ; =============== S U B R O U T I N E =======================================
.text:0040E650
.text:0040E650 ; Attributes: thunk
.text:0040E650
.text:0040E650 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040E650 memcpy          proc near               ; CODE XREF: sub_405260+10BA↑p
.text:0040E650                                         ; sub_405260+1268↑p ...
.text:0040E650
.text:0040E650 Src             = dword ptr  8
.text:0040E650 Size            = dword ptr  0Ch
.text:0040E650
.text:0040E650                 jmp     ds:__imp_memcpy
.text:0040E650 memcpy          endp
.text:0040E650
.text:0040E650 ; ---------------------------------------------------------------------------
.text:0040E656                 align 10h
.text:0040E660
.text:0040E660 ; =============== S U B R O U T I N E =======================================
.text:0040E660
.text:0040E660 ; Attributes: thunk
.text:0040E660
.text:0040E660 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040E660 memset          proc near               ; CODE XREF: sub_408170+330A↑p
.text:0040E660                                         ; sub_40B780+66↑p ...
.text:0040E660
.text:0040E660 Val             = dword ptr  8
.text:0040E660 Size            = dword ptr  0Ch
.text:0040E660
.text:0040E660                 jmp     ds:__imp_memset
.text:0040E660 memset          endp
.text:0040E660
.text:0040E660 ; ---------------------------------------------------------------------------
.text:0040E666                 align 10h
.text:0040E670
.text:0040E670 ; =============== S U B R O U T I N E =======================================
.text:0040E670
.text:0040E670 ; Attributes: thunk
.text:0040E670
.text:0040E670 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040E670 realloc         proc near               ; CODE XREF: sub_405260+7BE↑p
.text:0040E670                                         ; sub_405260+7DC↑p ...
.text:0040E670
.text:0040E670 Block           = dword ptr  4
.text:0040E670 Size            = dword ptr  8
.text:0040E670
.text:0040E670                 jmp     ds:__imp_realloc
.text:0040E670 realloc         endp
.text:0040E670
.text:0040E670 ; ---------------------------------------------------------------------------
.text:0040E676                 align 10h
.text:0040E680
.text:0040E680 ; =============== S U B R O U T I N E =======================================
.text:0040E680
.text:0040E680 ; Attributes: thunk
.text:0040E680
.text:0040E680 ; void *__cdecl malloc(size_t Size)
.text:0040E680 malloc          proc near               ; CODE XREF: sub_405260+74↑p
.text:0040E680                                         ; sub_405260+555↑p ...
.text:0040E680
.text:0040E680 Size            = dword ptr  4
.text:0040E680
.text:0040E680                 jmp     ds:__imp_malloc
.text:0040E680 malloc          endp
.text:0040E680
.text:0040E680 ; ---------------------------------------------------------------------------
.text:0040E686                 align 10h
.text:0040E690
.text:0040E690 ; =============== S U B R O U T I N E =======================================
.text:0040E690
.text:0040E690 ; Attributes: thunk
.text:0040E690
.text:0040E690 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040E690 calloc          proc near               ; CODE XREF: .text:0040BE23↑p
.text:0040E690
.text:0040E690 Count           = dword ptr  4
.text:0040E690 Size            = dword ptr  8
.text:0040E690
.text:0040E690                 jmp     ds:__imp_calloc
.text:0040E690 calloc          endp
.text:0040E690
.text:0040E690 ; ---------------------------------------------------------------------------
.text:0040E696                 align 10h
.text:0040E6A0
.text:0040E6A0 ; =============== S U B R O U T I N E =======================================
.text:0040E6A0
.text:0040E6A0 ; Attributes: thunk
.text:0040E6A0
.text:0040E6A0 ; int __cdecl fclose(FILE *Stream)
.text:0040E6A0 fclose          proc near               ; CODE XREF: sub_40C0A0+27↑p
.text:0040E6A0
.text:0040E6A0 Stream          = dword ptr  4
.text:0040E6A0
.text:0040E6A0                 jmp     ds:__imp_fclose
.text:0040E6A0 fclose          endp
.text:0040E6A0
.text:0040E6A0 ; ---------------------------------------------------------------------------
.text:0040E6A6                 align 10h
.text:0040E6B0
.text:0040E6B0 ; =============== S U B R O U T I N E =======================================
.text:0040E6B0
.text:0040E6B0 ; Attributes: thunk
.text:0040E6B0
.text:0040E6B0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040E6B0 strncmp         proc near               ; CODE XREF: sub_40C3D0+23F↑p
.text:0040E6B0                                         ; sub_40C3D0+699↑p
.text:0040E6B0
.text:0040E6B0 Str1            = dword ptr  4
.text:0040E6B0 Str2            = dword ptr  8
.text:0040E6B0 MaxCount        = dword ptr  0Ch
.text:0040E6B0
.text:0040E6B0                 jmp     ds:__imp_strncmp
.text:0040E6B0 strncmp         endp
.text:0040E6B0
.text:0040E6B0 ; ---------------------------------------------------------------------------
.text:0040E6B6                 align 10h
.text:0040E6C0
.text:0040E6C0 ; =============== S U B R O U T I N E =======================================
.text:0040E6C0
.text:0040E6C0 ; Attributes: thunk
.text:0040E6C0
.text:0040E6C0 ; char *__cdecl getenv(const char *VarName)
.text:0040E6C0 getenv          proc near               ; CODE XREF: sub_40C3D0+B57↑p
.text:0040E6C0
.text:0040E6C0 VarName         = dword ptr  4
.text:0040E6C0
.text:0040E6C0                 jmp     ds:__imp_getenv
.text:0040E6C0 getenv          endp
.text:0040E6C0
.text:0040E6C0 ; ---------------------------------------------------------------------------
.text:0040E6C6                 align 10h
.text:0040E6D0
.text:0040E6D0 ; =============== S U B R O U T I N E =======================================
.text:0040E6D0
.text:0040E6D0 ; Attributes: thunk
.text:0040E6D0
.text:0040E6D0 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040E6D0 strchr          proc near               ; CODE XREF: sub_40C3D0+469↑p
.text:0040E6D0                                         ; sub_40C3D0+53A↑p ...
.text:0040E6D0
.text:0040E6D0 Str             = dword ptr  4
.text:0040E6D0 Val             = dword ptr  8
.text:0040E6D0
.text:0040E6D0                 jmp     ds:__imp_strchr
.text:0040E6D0 strchr          endp
.text:0040E6D0
.text:0040E6D0 ; ---------------------------------------------------------------------------
.text:0040E6D6                 align 10h
.text:0040E6E0
.text:0040E6E0 ; =============== S U B R O U T I N E =======================================
.text:0040E6E0
.text:0040E6E0 ; Attributes: thunk
.text:0040E6E0
.text:0040E6E0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040E6E0 vfprintf        proc near               ; CODE XREF: sub_40D490+C1↑p
.text:0040E6E0                                         ; sub_40D830+49↑p ...
.text:0040E6E0
.text:0040E6E0 Stream          = dword ptr  4
.text:0040E6E0 Format          = dword ptr  8
.text:0040E6E0 ArgList         = dword ptr  0Ch
.text:0040E6E0
.text:0040E6E0                 jmp     ds:__imp_vfprintf
.text:0040E6E0 vfprintf        endp
.text:0040E6E0
.text:0040E6E0 ; ---------------------------------------------------------------------------
.text:0040E6E6                 align 10h
.text:0040E6F0
.text:0040E6F0 ; =============== S U B R O U T I N E =======================================
.text:0040E6F0
.text:0040E6F0 ; Attributes: thunk
.text:0040E6F0
.text:0040E6F0 ; int __cdecl fflush(FILE *Stream)
.text:0040E6F0 fflush          proc near               ; CODE XREF: sub_40D830+19↑p
.text:0040E6F0                                         ; sub_40D830+81↑p ...
.text:0040E6F0
.text:0040E6F0 Stream          = dword ptr  4
.text:0040E6F0
.text:0040E6F0                 jmp     ds:__imp_fflush
.text:0040E6F0 fflush          endp
.text:0040E6F0
.text:0040E6F0 ; ---------------------------------------------------------------------------
.text:0040E6F6                 align 10h
.text:0040E700
.text:0040E700 ; =============== S U B R O U T I N E =======================================
.text:0040E700
.text:0040E700 ; Attributes: thunk
.text:0040E700
.text:0040E700 ; char *__cdecl strerror(int ErrorMessage)
.text:0040E700 strerror        proc near               ; CODE XREF: sub_40D830+A5↑p
.text:0040E700                                         ; sub_40D934+10F↑p
.text:0040E700
.text:0040E700 ErrorMessage    = dword ptr  4
.text:0040E700
.text:0040E700                 jmp     ds:__imp_strerror
.text:0040E700 strerror        endp
.text:0040E700
.text:0040E700 ; ---------------------------------------------------------------------------
.text:0040E706                 align 10h
.text:0040E710
.text:0040E710 ; =============== S U B R O U T I N E =======================================
.text:0040E710
.text:0040E710 ; Attributes: thunk
.text:0040E710
.text:0040E710 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040E710 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040E710
.text:0040E710 lpTopLevelExceptionFilter= dword ptr  4
.text:0040E710
.text:0040E710                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040E710 SetUnhandledExceptionFilter endp
.text:0040E710
.text:0040E710 ; ---------------------------------------------------------------------------
.text:0040E716                 align 10h
.text:0040E720
.text:0040E720 ; =============== S U B R O U T I N E =======================================
.text:0040E720
.text:0040E720 ; Attributes: noreturn thunk
.text:0040E720
.text:0040E720 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040E720 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040E720
.text:0040E720 uExitCode       = dword ptr  4
.text:0040E720
.text:0040E720                 jmp     ds:__imp_ExitProcess
.text:0040E720 ExitProcess     endp
.text:0040E720
.text:0040E720 ; ---------------------------------------------------------------------------
.text:0040E726                 align 10h
.text:0040E730 dword_40E730    dd 0FFFFFFFFh           ; DATA XREF: .text:0040E0A9↑r
.text:0040E730                                         ; .text:loc_40E0D0↑r ...
.text:0040E734 dword_40E734    dd 0                    ; DATA XREF: .text:loc_40E0DC↑r
.text:0040E734                                         ; sub_40E100:loc_40E14D↑r
.text:0040E738                 dd 0FFFFFFFFh
.text:0040E73C dword_40E73C    dd 31h dup(0)           ; DATA XREF: .data:off_40F094↓o
.text:0040E800                 dd 200h dup(?)
.text:0040E800 _text           ends
.text:0040E800
.data:0040F000 ; Section 2. (virtual address 0000F000)
.data:0040F000 ; Virtual size                  : 000000B0 (    176.)
.data:0040F000 ; Section size in file          : 00000200 (    512.)
.data:0040F000 ; Offset to raw data for section: 0000DC00
.data:0040F000 ; Flags C0000040: Data Readable Writable
.data:0040F000 ; Alignment     : default
.data:0040F000 ; ===========================================================================
.data:0040F000
.data:0040F000 ; Segment type: Pure data
.data:0040F000 ; Segment permissions: Read/Write
.data:0040F000 _data           segment para public 'DATA' use32
.data:0040F000                 assume cs:_data
.data:0040F000                 ;org 40F000h
.data:0040F000 dword_40F000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0040F000                                         ; sub_401080+CC↑r
.data:0040F004 dword_40F004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0040F004                                         ; sub_401080+D4↑r
.data:0040F008                 align 10h
.data:0040F010 dword_40F010    dd 1                    ; DATA XREF: sub_404D70+22↑r
.data:0040F010                                         ; sub_404D70+65↑r ...
.data:0040F014 dword_40F014    dd 100h                 ; DATA XREF: sub_404D70+3F↑o
.data:0040F014                                         ; sub_404D70+1A2↑r ...
.data:0040F018 off_40F018      dd offset unk_410010    ; DATA XREF: sub_404D70+1AA↑r
.data:0040F01C ; void *off_40F01C
.data:0040F01C off_40F01C      dd offset dword_40F014  ; DATA XREF: sub_404D70+39↑r
.data:0040F01C                                         ; sub_404D70+60↑w ...
.data:0040F020 dword_40F020    dd 0FA0h                ; DATA XREF: sub_405260:loc_4062DB↑r
.data:0040F020                                         ; sub_405260:loc_406489↑r ...
.data:0040F024                 align 10h
.data:0040F030 ; int Code
.data:0040F030 Code            dd 1                    ; DATA XREF: sub_401360+68↑w
.data:0040F030                                         ; sub_40BB80+18↑r ...
.data:0040F034                 align 10h
.data:0040F040 dword_40F040    dd 1                    ; DATA XREF: sub_40BFB0+27↑w
.data:0040F040                                         ; sub_40CF60+3↑r ...
.data:0040F044 dword_40F044    dd 1                    ; DATA XREF: sub_40BFB0+E↑r
.data:0040F044                                         ; sub_40BFB0+14↑w ...
.data:0040F048 dword_40F048    dd 3Fh                  ; DATA XREF: sub_40CF60+7D↑w
.data:0040F048                                         ; .text:0040D06D↑w
.data:0040F04C                 align 10h
.data:0040F050 ; char *Buffer
.data:0040F050 Buffer          dd offset aCopyrightC2005
.data:0040F050                                         ; DATA XREF: sub_40D490+DC↑r
.data:0040F050                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0040F054                 align 10h
.data:0040F060 dword_40F060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0040F064                 align 10h
.data:0040F070 ; int Mode
.data:0040F070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0040F070                                         ; sub_401080+80↑r ...
.data:0040F074                 align 10h
.data:0040F080 dword_40F080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0040F080                                         ; sub_401080+BA↑r
.data:0040F084                 align 10h
.data:0040F090 dword_40F090    dd 0                    ; DATA XREF: sub_40E100+9↑r
.data:0040F090                                         ; sub_40E100+1D↑w
.data:0040F094 off_40F094      dd offset dword_40E73C  ; DATA XREF: sub_40E070+6↑r
.data:0040F094                                         ; sub_40E070+17↑r ...
.data:0040F098                 align 1000h
.data:0040F098 _data           ends
.data:0040F098
.bss:00410000 ; Section 3. (virtual address 00010000)
.bss:00410000 ; Virtual size                  : 00000370 (    880.)
.bss:00410000 ; Section size in file          : 00000000 (      0.)
.bss:00410000 ; Offset to raw data for section: 00000000
.bss:00410000 ; Flags C0000080: Bss Readable Writable
.bss:00410000 ; Alignment     : default
.bss:00410000 ; ===========================================================================
.bss:00410000
.bss:00410000 ; Segment type: Uninitialized
.bss:00410000 ; Segment permissions: Read/Write
.bss:00410000 _bss            segment para public 'BSS' use32
.bss:00410000                 assume cs:_bss
.bss:00410000                 ;org 410000h
.bss:00410000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00410000 dword_410000    dd ?                    ; DATA XREF: sub_401360+13E↑w
.bss:00410000                                         ; sub_4015D0↑r ...
.bss:00410004                 align 10h
.bss:00410010 unk_410010      db    ? ;               ; DATA XREF: sub_404D70+100↑o
.bss:00410010                                         ; .data:off_40F018↑o
.bss:00410011                 db    ? ;
.bss:00410012                 db    ? ;
.bss:00410013                 db    ? ;
.bss:00410014                 db    ? ;
.bss:00410015                 db    ? ;
.bss:00410016                 db    ? ;
.bss:00410017                 db    ? ;
.bss:00410018                 db    ? ;
.bss:00410019                 db    ? ;
.bss:0041001A                 db    ? ;
.bss:0041001B                 db    ? ;
.bss:0041001C                 db    ? ;
.bss:0041001D                 db    ? ;
.bss:0041001E                 db    ? ;
.bss:0041001F                 db    ? ;
.bss:00410020                 db    ? ;
.bss:00410021                 db    ? ;
.bss:00410022                 db    ? ;
.bss:00410023                 db    ? ;
.bss:00410024                 db    ? ;
.bss:00410025                 db    ? ;
.bss:00410026                 db    ? ;
.bss:00410027                 db    ? ;
.bss:00410028                 db    ? ;
.bss:00410029                 db    ? ;
.bss:0041002A                 db    ? ;
.bss:0041002B                 db    ? ;
.bss:0041002C                 db    ? ;
.bss:0041002D                 db    ? ;
.bss:0041002E                 db    ? ;
.bss:0041002F                 db    ? ;
.bss:00410030                 db    ? ;
.bss:00410031                 db    ? ;
.bss:00410032                 db    ? ;
.bss:00410033                 db    ? ;
.bss:00410034                 db    ? ;
.bss:00410035                 db    ? ;
.bss:00410036                 db    ? ;
.bss:00410037                 db    ? ;
.bss:00410038                 db    ? ;
.bss:00410039                 db    ? ;
.bss:0041003A                 db    ? ;
.bss:0041003B                 db    ? ;
.bss:0041003C                 db    ? ;
.bss:0041003D                 db    ? ;
.bss:0041003E                 db    ? ;
.bss:0041003F                 db    ? ;
.bss:00410040                 db    ? ;
.bss:00410041                 db    ? ;
.bss:00410042                 db    ? ;
.bss:00410043                 db    ? ;
.bss:00410044                 db    ? ;
.bss:00410045                 db    ? ;
.bss:00410046                 db    ? ;
.bss:00410047                 db    ? ;
.bss:00410048                 db    ? ;
.bss:00410049                 db    ? ;
.bss:0041004A                 db    ? ;
.bss:0041004B                 db    ? ;
.bss:0041004C                 db    ? ;
.bss:0041004D                 db    ? ;
.bss:0041004E                 db    ? ;
.bss:0041004F                 db    ? ;
.bss:00410050                 db    ? ;
.bss:00410051                 db    ? ;
.bss:00410052                 db    ? ;
.bss:00410053                 db    ? ;
.bss:00410054                 db    ? ;
.bss:00410055                 db    ? ;
.bss:00410056                 db    ? ;
.bss:00410057                 db    ? ;
.bss:00410058                 db    ? ;
.bss:00410059                 db    ? ;
.bss:0041005A                 db    ? ;
.bss:0041005B                 db    ? ;
.bss:0041005C                 db    ? ;
.bss:0041005D                 db    ? ;
.bss:0041005E                 db    ? ;
.bss:0041005F                 db    ? ;
.bss:00410060                 db    ? ;
.bss:00410061                 db    ? ;
.bss:00410062                 db    ? ;
.bss:00410063                 db    ? ;
.bss:00410064                 db    ? ;
.bss:00410065                 db    ? ;
.bss:00410066                 db    ? ;
.bss:00410067                 db    ? ;
.bss:00410068                 db    ? ;
.bss:00410069                 db    ? ;
.bss:0041006A                 db    ? ;
.bss:0041006B                 db    ? ;
.bss:0041006C                 db    ? ;
.bss:0041006D                 db    ? ;
.bss:0041006E                 db    ? ;
.bss:0041006F                 db    ? ;
.bss:00410070                 db    ? ;
.bss:00410071                 db    ? ;
.bss:00410072                 db    ? ;
.bss:00410073                 db    ? ;
.bss:00410074                 db    ? ;
.bss:00410075                 db    ? ;
.bss:00410076                 db    ? ;
.bss:00410077                 db    ? ;
.bss:00410078                 db    ? ;
.bss:00410079                 db    ? ;
.bss:0041007A                 db    ? ;
.bss:0041007B                 db    ? ;
.bss:0041007C                 db    ? ;
.bss:0041007D                 db    ? ;
.bss:0041007E                 db    ? ;
.bss:0041007F                 db    ? ;
.bss:00410080                 db    ? ;
.bss:00410081                 db    ? ;
.bss:00410082                 db    ? ;
.bss:00410083                 db    ? ;
.bss:00410084                 db    ? ;
.bss:00410085                 db    ? ;
.bss:00410086                 db    ? ;
.bss:00410087                 db    ? ;
.bss:00410088                 db    ? ;
.bss:00410089                 db    ? ;
.bss:0041008A                 db    ? ;
.bss:0041008B                 db    ? ;
.bss:0041008C                 db    ? ;
.bss:0041008D                 db    ? ;
.bss:0041008E                 db    ? ;
.bss:0041008F                 db    ? ;
.bss:00410090                 db    ? ;
.bss:00410091                 db    ? ;
.bss:00410092                 db    ? ;
.bss:00410093                 db    ? ;
.bss:00410094                 db    ? ;
.bss:00410095                 db    ? ;
.bss:00410096                 db    ? ;
.bss:00410097                 db    ? ;
.bss:00410098                 db    ? ;
.bss:00410099                 db    ? ;
.bss:0041009A                 db    ? ;
.bss:0041009B                 db    ? ;
.bss:0041009C                 db    ? ;
.bss:0041009D                 db    ? ;
.bss:0041009E                 db    ? ;
.bss:0041009F                 db    ? ;
.bss:004100A0                 db    ? ;
.bss:004100A1                 db    ? ;
.bss:004100A2                 db    ? ;
.bss:004100A3                 db    ? ;
.bss:004100A4                 db    ? ;
.bss:004100A5                 db    ? ;
.bss:004100A6                 db    ? ;
.bss:004100A7                 db    ? ;
.bss:004100A8                 db    ? ;
.bss:004100A9                 db    ? ;
.bss:004100AA                 db    ? ;
.bss:004100AB                 db    ? ;
.bss:004100AC                 db    ? ;
.bss:004100AD                 db    ? ;
.bss:004100AE                 db    ? ;
.bss:004100AF                 db    ? ;
.bss:004100B0                 db    ? ;
.bss:004100B1                 db    ? ;
.bss:004100B2                 db    ? ;
.bss:004100B3                 db    ? ;
.bss:004100B4                 db    ? ;
.bss:004100B5                 db    ? ;
.bss:004100B6                 db    ? ;
.bss:004100B7                 db    ? ;
.bss:004100B8                 db    ? ;
.bss:004100B9                 db    ? ;
.bss:004100BA                 db    ? ;
.bss:004100BB                 db    ? ;
.bss:004100BC                 db    ? ;
.bss:004100BD                 db    ? ;
.bss:004100BE                 db    ? ;
.bss:004100BF                 db    ? ;
.bss:004100C0                 db    ? ;
.bss:004100C1                 db    ? ;
.bss:004100C2                 db    ? ;
.bss:004100C3                 db    ? ;
.bss:004100C4                 db    ? ;
.bss:004100C5                 db    ? ;
.bss:004100C6                 db    ? ;
.bss:004100C7                 db    ? ;
.bss:004100C8                 db    ? ;
.bss:004100C9                 db    ? ;
.bss:004100CA                 db    ? ;
.bss:004100CB                 db    ? ;
.bss:004100CC                 db    ? ;
.bss:004100CD                 db    ? ;
.bss:004100CE                 db    ? ;
.bss:004100CF                 db    ? ;
.bss:004100D0                 db    ? ;
.bss:004100D1                 db    ? ;
.bss:004100D2                 db    ? ;
.bss:004100D3                 db    ? ;
.bss:004100D4                 db    ? ;
.bss:004100D5                 db    ? ;
.bss:004100D6                 db    ? ;
.bss:004100D7                 db    ? ;
.bss:004100D8                 db    ? ;
.bss:004100D9                 db    ? ;
.bss:004100DA                 db    ? ;
.bss:004100DB                 db    ? ;
.bss:004100DC                 db    ? ;
.bss:004100DD                 db    ? ;
.bss:004100DE                 db    ? ;
.bss:004100DF                 db    ? ;
.bss:004100E0                 db    ? ;
.bss:004100E1                 db    ? ;
.bss:004100E2                 db    ? ;
.bss:004100E3                 db    ? ;
.bss:004100E4                 db    ? ;
.bss:004100E5                 db    ? ;
.bss:004100E6                 db    ? ;
.bss:004100E7                 db    ? ;
.bss:004100E8                 db    ? ;
.bss:004100E9                 db    ? ;
.bss:004100EA                 db    ? ;
.bss:004100EB                 db    ? ;
.bss:004100EC                 db    ? ;
.bss:004100ED                 db    ? ;
.bss:004100EE                 db    ? ;
.bss:004100EF                 db    ? ;
.bss:004100F0                 db    ? ;
.bss:004100F1                 db    ? ;
.bss:004100F2                 db    ? ;
.bss:004100F3                 db    ? ;
.bss:004100F4                 db    ? ;
.bss:004100F5                 db    ? ;
.bss:004100F6                 db    ? ;
.bss:004100F7                 db    ? ;
.bss:004100F8                 db    ? ;
.bss:004100F9                 db    ? ;
.bss:004100FA                 db    ? ;
.bss:004100FB                 db    ? ;
.bss:004100FC                 db    ? ;
.bss:004100FD                 db    ? ;
.bss:004100FE                 db    ? ;
.bss:004100FF                 db    ? ;
.bss:00410100                 db    ? ;
.bss:00410101                 db    ? ;
.bss:00410102                 db    ? ;
.bss:00410103                 db    ? ;
.bss:00410104                 db    ? ;
.bss:00410105                 db    ? ;
.bss:00410106                 db    ? ;
.bss:00410107                 db    ? ;
.bss:00410108                 db    ? ;
.bss:00410109                 db    ? ;
.bss:0041010A                 db    ? ;
.bss:0041010B                 db    ? ;
.bss:0041010C                 db    ? ;
.bss:0041010D                 db    ? ;
.bss:0041010E                 db    ? ;
.bss:0041010F                 db    ? ;
.bss:00410110 dword_410110    dd ?                    ; DATA XREF: .text:loc_404701↑o
.bss:00410110                                         ; .text:loc_404720↑o ...
.bss:00410114 dword_410114    dd ?                    ; DATA XREF: .text:loc_4047A0↑o
.bss:00410114                                         ; .text:00404C28↑r ...
.bss:00410118 dword_410118    dd ?                    ; DATA XREF: .text:00404C22↑r
.bss:00410118                                         ; sub_404CD0+2C↑r
.bss:0041011C dword_41011C    dd ?                    ; DATA XREF: .text:00404C16↑r
.bss:0041011C                                         ; sub_404CD0+22↑r
.bss:00410120 dword_410120    dd ?                    ; DATA XREF: .text:00404C32↑r
.bss:00410120                                         ; sub_404CD0+36↑r
.bss:00410124 dword_410124    dd ?                    ; DATA XREF: .text:00404C42↑r
.bss:00410124                                         ; sub_404CD0+4E↑r
.bss:00410128 dword_410128    dd ?                    ; DATA XREF: .text:00404C5F↑r
.bss:00410128                                         ; sub_404CD0+62↑r
.bss:0041012C dword_41012C    dd ?                    ; DATA XREF: .text:00404C55↑r
.bss:0041012C                                         ; sub_404CD0+70↑r
.bss:00410130 dword_410130    dd ?                    ; DATA XREF: .text:00404C38↑r
.bss:00410130                                         ; sub_404CD0+7A↑r
.bss:00410134                 align 10h
.bss:00410140 dword_410140    dd ?                    ; DATA XREF: sub_408170+AB↑r
.bss:00410140                                         ; sub_408170+334B↑w
.bss:00410144                 align 10h
.bss:00410150 byte_410150     db ?                    ; DATA XREF: sub_405260:loc_405CCC↑r
.bss:00410150                                         ; sub_405260:loc_405CF8↑r ...
.bss:00410151                 db    ? ;
.bss:00410152                 db    ? ;
.bss:00410153                 db    ? ;
.bss:00410154                 db    ? ;
.bss:00410155                 db    ? ;
.bss:00410156                 db    ? ;
.bss:00410157                 db    ? ;
.bss:00410158                 db    ? ;
.bss:00410159                 db    ? ;
.bss:0041015A                 db    ? ;
.bss:0041015B                 db    ? ;
.bss:0041015C                 db    ? ;
.bss:0041015D                 db    ? ;
.bss:0041015E                 db    ? ;
.bss:0041015F                 db    ? ;
.bss:00410160                 db    ? ;
.bss:00410161                 db    ? ;
.bss:00410162                 db    ? ;
.bss:00410163                 db    ? ;
.bss:00410164                 db    ? ;
.bss:00410165                 db    ? ;
.bss:00410166                 db    ? ;
.bss:00410167                 db    ? ;
.bss:00410168                 db    ? ;
.bss:00410169                 db    ? ;
.bss:0041016A                 db    ? ;
.bss:0041016B                 db    ? ;
.bss:0041016C                 db    ? ;
.bss:0041016D                 db    ? ;
.bss:0041016E                 db    ? ;
.bss:0041016F                 db    ? ;
.bss:00410170                 db    ? ;
.bss:00410171                 db    ? ;
.bss:00410172                 db    ? ;
.bss:00410173                 db    ? ;
.bss:00410174                 db    ? ;
.bss:00410175                 db    ? ;
.bss:00410176                 db    ? ;
.bss:00410177                 db    ? ;
.bss:00410178                 db    ? ;
.bss:00410179                 db    ? ;
.bss:0041017A                 db    ? ;
.bss:0041017B                 db    ? ;
.bss:0041017C                 db    ? ;
.bss:0041017D                 db    ? ;
.bss:0041017E                 db    ? ;
.bss:0041017F                 db    ? ;
.bss:00410180                 db    ? ;
.bss:00410181                 db    ? ;
.bss:00410182                 db    ? ;
.bss:00410183                 db    ? ;
.bss:00410184                 db    ? ;
.bss:00410185                 db    ? ;
.bss:00410186                 db    ? ;
.bss:00410187                 db    ? ;
.bss:00410188                 db    ? ;
.bss:00410189                 db    ? ;
.bss:0041018A                 db    ? ;
.bss:0041018B                 db    ? ;
.bss:0041018C                 db    ? ;
.bss:0041018D                 db    ? ;
.bss:0041018E                 db    ? ;
.bss:0041018F                 db    ? ;
.bss:00410190                 db    ? ;
.bss:00410191                 db    ? ;
.bss:00410192                 db    ? ;
.bss:00410193                 db    ? ;
.bss:00410194                 db    ? ;
.bss:00410195                 db    ? ;
.bss:00410196                 db    ? ;
.bss:00410197                 db    ? ;
.bss:00410198                 db    ? ;
.bss:00410199                 db    ? ;
.bss:0041019A                 db    ? ;
.bss:0041019B                 db    ? ;
.bss:0041019C                 db    ? ;
.bss:0041019D                 db    ? ;
.bss:0041019E                 db    ? ;
.bss:0041019F                 db    ? ;
.bss:004101A0                 db    ? ;
.bss:004101A1                 db    ? ;
.bss:004101A2                 db    ? ;
.bss:004101A3                 db    ? ;
.bss:004101A4                 db    ? ;
.bss:004101A5                 db    ? ;
.bss:004101A6                 db    ? ;
.bss:004101A7                 db    ? ;
.bss:004101A8                 db    ? ;
.bss:004101A9                 db    ? ;
.bss:004101AA                 db    ? ;
.bss:004101AB                 db    ? ;
.bss:004101AC                 db    ? ;
.bss:004101AD                 db    ? ;
.bss:004101AE                 db    ? ;
.bss:004101AF byte_4101AF     db ?                    ; DATA XREF: sub_408170+333F↑w
.bss:004101B0                 db    ? ;
.bss:004101B1                 db    ? ;
.bss:004101B2                 db    ? ;
.bss:004101B3                 db    ? ;
.bss:004101B4                 db    ? ;
.bss:004101B5                 db    ? ;
.bss:004101B6                 db    ? ;
.bss:004101B7                 db    ? ;
.bss:004101B8                 db    ? ;
.bss:004101B9                 db    ? ;
.bss:004101BA                 db    ? ;
.bss:004101BB                 db    ? ;
.bss:004101BC                 db    ? ;
.bss:004101BD                 db    ? ;
.bss:004101BE                 db    ? ;
.bss:004101BF                 db    ? ;
.bss:004101C0                 db    ? ;
.bss:004101C1                 db    ? ;
.bss:004101C2                 db    ? ;
.bss:004101C3                 db    ? ;
.bss:004101C4                 db    ? ;
.bss:004101C5                 db    ? ;
.bss:004101C6                 db    ? ;
.bss:004101C7                 db    ? ;
.bss:004101C8                 db    ? ;
.bss:004101C9                 db    ? ;
.bss:004101CA                 db    ? ;
.bss:004101CB                 db    ? ;
.bss:004101CC                 db    ? ;
.bss:004101CD                 db    ? ;
.bss:004101CE                 db    ? ;
.bss:004101CF                 db    ? ;
.bss:004101D0                 db    ? ;
.bss:004101D1                 db    ? ;
.bss:004101D2                 db    ? ;
.bss:004101D3                 db    ? ;
.bss:004101D4                 db    ? ;
.bss:004101D5                 db    ? ;
.bss:004101D6                 db    ? ;
.bss:004101D7                 db    ? ;
.bss:004101D8                 db    ? ;
.bss:004101D9                 db    ? ;
.bss:004101DA                 db    ? ;
.bss:004101DB                 db    ? ;
.bss:004101DC                 db    ? ;
.bss:004101DD                 db    ? ;
.bss:004101DE                 db    ? ;
.bss:004101DF                 db    ? ;
.bss:004101E0                 db    ? ;
.bss:004101E1                 db    ? ;
.bss:004101E2                 db    ? ;
.bss:004101E3                 db    ? ;
.bss:004101E4                 db    ? ;
.bss:004101E5                 db    ? ;
.bss:004101E6                 db    ? ;
.bss:004101E7                 db    ? ;
.bss:004101E8                 db    ? ;
.bss:004101E9                 db    ? ;
.bss:004101EA                 db    ? ;
.bss:004101EB                 db    ? ;
.bss:004101EC                 db    ? ;
.bss:004101ED                 db    ? ;
.bss:004101EE                 db    ? ;
.bss:004101EF                 db    ? ;
.bss:004101F0                 db    ? ;
.bss:004101F1                 db    ? ;
.bss:004101F2                 db    ? ;
.bss:004101F3                 db    ? ;
.bss:004101F4                 db    ? ;
.bss:004101F5                 db    ? ;
.bss:004101F6                 db    ? ;
.bss:004101F7                 db    ? ;
.bss:004101F8                 db    ? ;
.bss:004101F9                 db    ? ;
.bss:004101FA                 db    ? ;
.bss:004101FB                 db    ? ;
.bss:004101FC                 db    ? ;
.bss:004101FD                 db    ? ;
.bss:004101FE                 db    ? ;
.bss:004101FF                 db    ? ;
.bss:00410200                 db    ? ;
.bss:00410201                 db    ? ;
.bss:00410202                 db    ? ;
.bss:00410203                 db    ? ;
.bss:00410204                 db    ? ;
.bss:00410205                 db    ? ;
.bss:00410206                 db    ? ;
.bss:00410207                 db    ? ;
.bss:00410208                 db    ? ;
.bss:00410209                 db    ? ;
.bss:0041020A                 db    ? ;
.bss:0041020B                 db    ? ;
.bss:0041020C                 db    ? ;
.bss:0041020D                 db    ? ;
.bss:0041020E                 db    ? ;
.bss:0041020F                 db    ? ;
.bss:00410210                 db    ? ;
.bss:00410211                 db    ? ;
.bss:00410212                 db    ? ;
.bss:00410213                 db    ? ;
.bss:00410214                 db    ? ;
.bss:00410215                 db    ? ;
.bss:00410216                 db    ? ;
.bss:00410217                 db    ? ;
.bss:00410218                 db    ? ;
.bss:00410219                 db    ? ;
.bss:0041021A                 db    ? ;
.bss:0041021B                 db    ? ;
.bss:0041021C                 db    ? ;
.bss:0041021D                 db    ? ;
.bss:0041021E                 db    ? ;
.bss:0041021F                 db    ? ;
.bss:00410220                 db    ? ;
.bss:00410221                 db    ? ;
.bss:00410222                 db    ? ;
.bss:00410223                 db    ? ;
.bss:00410224                 db    ? ;
.bss:00410225                 db    ? ;
.bss:00410226                 db    ? ;
.bss:00410227                 db    ? ;
.bss:00410228                 db    ? ;
.bss:00410229                 db    ? ;
.bss:0041022A                 db    ? ;
.bss:0041022B                 db    ? ;
.bss:0041022C                 db    ? ;
.bss:0041022D                 db    ? ;
.bss:0041022E                 db    ? ;
.bss:0041022F                 db    ? ;
.bss:00410230                 db    ? ;
.bss:00410231                 db    ? ;
.bss:00410232                 db    ? ;
.bss:00410233                 db    ? ;
.bss:00410234                 db    ? ;
.bss:00410235                 db    ? ;
.bss:00410236                 db    ? ;
.bss:00410237                 db    ? ;
.bss:00410238                 db    ? ;
.bss:00410239                 db    ? ;
.bss:0041023A                 db    ? ;
.bss:0041023B                 db    ? ;
.bss:0041023C                 db    ? ;
.bss:0041023D                 db    ? ;
.bss:0041023E                 db    ? ;
.bss:0041023F                 db    ? ;
.bss:00410240                 db    ? ;
.bss:00410241                 db    ? ;
.bss:00410242                 db    ? ;
.bss:00410243                 db    ? ;
.bss:00410244                 db    ? ;
.bss:00410245                 db    ? ;
.bss:00410246                 db    ? ;
.bss:00410247                 db    ? ;
.bss:00410248                 db    ? ;
.bss:00410249                 db    ? ;
.bss:0041024A                 db    ? ;
.bss:0041024B                 db    ? ;
.bss:0041024C                 db    ? ;
.bss:0041024D                 db    ? ;
.bss:0041024E                 db    ? ;
.bss:0041024F                 db    ? ;
.bss:00410250 unk_410250      db    ? ;               ; DATA XREF: sub_405260+148↑o
.bss:00410250                                         ; sub_405260+153↑o ...
.bss:00410251                 db    ? ;
.bss:00410252                 db    ? ;
.bss:00410253                 db    ? ;
.bss:00410254                 db    ? ;
.bss:00410255                 db    ? ;
.bss:00410256                 db    ? ;
.bss:00410257                 db    ? ;
.bss:00410258                 db    ? ;
.bss:00410259                 db    ? ;
.bss:0041025A                 db    ? ;
.bss:0041025B                 db    ? ;
.bss:0041025C                 db    ? ;
.bss:0041025D                 db    ? ;
.bss:0041025E                 db    ? ;
.bss:0041025F                 db    ? ;
.bss:00410260 ; char *dword_410260
.bss:00410260 dword_410260    dd ?                    ; DATA XREF: .text:0040C074↑w
.bss:00410260                                         ; sub_40C0A0+58↑r
.bss:00410264                 align 10h
.bss:00410270 dword_410270    dd ?                    ; DATA XREF: sub_40CF60+9↑o
.bss:00410270                                         ; sub_40CF60+17↑w ...
.bss:00410274 dword_410274    dd ?                    ; DATA XREF: sub_40CF60+21↑w
.bss:00410274                                         ; .text:0040D019↑w
.bss:00410278 dword_410278    dd ?                    ; DATA XREF: sub_40CF60+77↑r
.bss:00410278                                         ; .text:0040D067↑r
.bss:0041027C dword_41027C    dd ?                    ; DATA XREF: sub_40CF60+6B↑r
.bss:0041027C                                         ; .text:0040D05B↑r
.bss:00410280                 db    ? ;
.bss:00410281                 db    ? ;
.bss:00410282                 db    ? ;
.bss:00410283                 db    ? ;
.bss:00410284                 db    ? ;
.bss:00410285                 db    ? ;
.bss:00410286                 db    ? ;
.bss:00410287                 db    ? ;
.bss:00410288                 db    ? ;
.bss:00410289                 db    ? ;
.bss:0041028A                 db    ? ;
.bss:0041028B                 db    ? ;
.bss:0041028C                 db    ? ;
.bss:0041028D                 db    ? ;
.bss:0041028E                 db    ? ;
.bss:0041028F                 db    ? ;
.bss:00410290                 db    ? ;
.bss:00410291                 db    ? ;
.bss:00410292                 db    ? ;
.bss:00410293                 db    ? ;
.bss:00410294                 db    ? ;
.bss:00410295                 db    ? ;
.bss:00410296                 db    ? ;
.bss:00410297                 db    ? ;
.bss:00410298                 db    ? ;
.bss:00410299                 db    ? ;
.bss:0041029A                 db    ? ;
.bss:0041029B                 db    ? ;
.bss:0041029C                 db    ? ;
.bss:0041029D                 db    ? ;
.bss:0041029E                 db    ? ;
.bss:0041029F                 db    ? ;
.bss:004102A0 ; char *Str1
.bss:004102A0 Str1            dd ?                    ; DATA XREF: sub_40D934:loc_40D96D↑w
.bss:004102A0                                         ; sub_40D934:loc_40DAA0↑r
.bss:004102A4                 align 10h
.bss:004102B0 dword_4102B0    dd ?                    ; DATA XREF: sub_40D934+2D↑r
.bss:004102B0                                         ; sub_40D934+3F↑w
.bss:004102B4                 align 10h
.bss:004102C0 dword_4102C0    dd ?                    ; DATA XREF: sub_401360+2F↑w
.bss:004102C0                                         ; sub_401360+10C↑r ...
.bss:004102C4                 align 20h
.bss:004102E0 dword_4102E0    dd ?                    ; DATA XREF: sub_402C14+A7↑w
.bss:004102E0                                         ; .text:00407EC0↑r ...
.bss:004102E4                 align 10h
.bss:004102F0 dword_4102F0    dd ?                    ; DATA XREF: sub_40CF60+71↑w
.bss:004102F0                                         ; .text:0040D061↑w
.bss:004102F4                 align 10h
.bss:00410300 dword_410300    dd ?                    ; CODE XREF: sub_40D934+63↑p
.bss:00410300                                         ; DATA XREF: sub_40D830+1E↑r ...
.bss:00410304                 align 10h
.bss:00410310 dword_410310    dd ?                    ; DATA XREF: sub_40D830+4E↑w
.bss:00410310                                         ; sub_40D934+AB↑w
.bss:00410314                 align 40h
.bss:00410340 dword_410340    dd ?                    ; DATA XREF: sub_40D934+13↑r
.bss:00410344                 align 1000h
.bss:00410344 _bss            ends
.bss:00410344
.idata:00411000 ; Section 4. (virtual address 00011000)
.idata:00411000 ; Virtual size                  : 000005C4 (   1476.)
.idata:00411000 ; Section size in file          : 00000600 (   1536.)
.idata:00411000 ; Offset to raw data for section: 0000DE00
.idata:00411000 ; Flags C0000040: Data Readable Writable
.idata:00411000 ; Alignment     : default
.idata:00411000 ; ===========================================================================
.idata:00411000
.idata:00411000 ; Segment type: Externs
.idata:00411000 ; _idata
.idata:00411000
.idata:00411001
.idata:00411150 ;
.idata:00411150 ; Imports from libintl3.dll
.idata:00411150 ;
.idata:00411150                 extrn libintl_bindtextdomain:dword
.idata:00411150                                         ; CODE XREF: sub_401360+49↑p
.idata:00411150                                         ; DATA XREF: sub_401360+49↑r ...
.idata:00411154                 extrn libintl_gettext:dword
.idata:00411154                                         ; CODE XREF: sub_401360+DB↑p
.idata:00411154                                         ; sub_401360+100↑p ...
.idata:00411158                 extrn libintl_textdomain:dword
.idata:00411158                                         ; CODE XREF: sub_401360+56↑p
.idata:00411158                                         ; DATA XREF: sub_401360+56↑r ...
.idata:0041115C
.idata:00411164 ;
.idata:00411164 ; Imports from KERNEL32.dll
.idata:00411164 ;
.idata:00411164 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00411164                 extrn __imp_ExitProcess:dword
.idata:00411164                                         ; DATA XREF: ExitProcess↑r
.idata:00411168 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00411168                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00411168                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0041116C
.idata:00411174 ;
.idata:00411174 ; Imports from MSVCP60.DLL
.idata:00411174 ;
.idata:00411174 ; wint_t (__cdecl *btowc)(int Ch)
.idata:00411174                 extrn __imp_btowc:dword ; DATA XREF: btowc↑r
.idata:00411178 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00411178                 extrn __imp_mbrtowc:dword
.idata:00411178                                         ; DATA XREF: mbrtowc↑r
.idata:0041117C ; wctype_t (__cdecl *wctype)(const char *name)
.idata:0041117C                 extrn __imp_wctype:dword
.idata:0041117C                                         ; DATA XREF: wctype↑r
.idata:00411180
.idata:00411188 ;
.idata:00411188 ; Imports from msvcrt.dll
.idata:00411188 ;
.idata:00411188                 extrn __imp___getmainargs:dword
.idata:00411188                                         ; DATA XREF: __getmainargs↑r
.idata:0041118C ; int _mb_cur_max
.idata:0041118C                 extrn __mb_cur_max:dword
.idata:0041118C                                         ; DATA XREF: sub_403C30+7↑r
.idata:0041118C                                         ; sub_403C30+5F3↑r ...
.idata:00411190 ; char ***(__cdecl *__p__environ)()
.idata:00411190                 extrn __imp___p__environ:dword
.idata:00411190                                         ; DATA XREF: __p__environ↑r
.idata:00411194 ; int *(__cdecl *__p__fmode)()
.idata:00411194                 extrn __imp___p__fmode:dword
.idata:00411194                                         ; DATA XREF: __p__fmode↑r
.idata:00411198 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00411198                 extrn __set_app_type:dword
.idata:00411198                                         ; CODE XREF: start+D↑p
.idata:00411198                                         ; .text:0040102D↑p
.idata:00411198                                         ; DATA XREF: ...
.idata:0041119C ; void (__cdecl *_cexit)()
.idata:0041119C                 extrn __imp__cexit:dword
.idata:0041119C                                         ; DATA XREF: _cexit↑r
.idata:004111A0 ; int *(__cdecl *_errno)()
.idata:004111A0                 extrn __imp__errno:dword
.idata:004111A0                                         ; DATA XREF: _errno↑r
.idata:004111A4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004111A4                 extrn __imp__flsbuf:dword
.idata:004111A4                                         ; DATA XREF: _flsbuf↑r
.idata:004111A8 ; FILE iob[]
.idata:004111A8                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004111A8                                         ; sub_401080+75↑r ...
.idata:004111AC ; int (__cdecl *_isctype)(int C, int Type)
.idata:004111AC                 extrn __imp__isctype:dword
.idata:004111AC                                         ; DATA XREF: _isctype↑r
.idata:004111B0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004111B0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004111B0                                         ; DATA XREF: .text:0040106C↑r
.idata:004111B4 ; const unsigned __int16 *pctype
.idata:004111B4                 extrn _pctype:dword     ; DATA XREF: sub_403C30:loc_404324↑r
.idata:004111B4                                         ; .text:loc_407D01↑r ...
.idata:004111B8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004111B8                 extrn __imp__setmode:dword
.idata:004111B8                                         ; DATA XREF: _setmode↑r
.idata:004111BC ; void (__cdecl __noreturn *abort)()
.idata:004111BC                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004111C0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004111C0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004111C0                                         ; DATA XREF: sub_401040+C↑r
.idata:004111C4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004111C4                 extrn __imp_calloc:dword
.idata:004111C4                                         ; DATA XREF: calloc↑r
.idata:004111C8 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004111C8                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004111CC ; int (__cdecl *fclose)(FILE *Stream)
.idata:004111CC                 extrn __imp_fclose:dword
.idata:004111CC                                         ; DATA XREF: fclose↑r
.idata:004111D0 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004111D0                 extrn __imp_fflush:dword
.idata:004111D0                                         ; DATA XREF: fflush↑r
.idata:004111D4 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004111D4                 extrn __imp_fprintf:dword
.idata:004111D4                                         ; DATA XREF: fprintf↑r
.idata:004111D8 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004111D8                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004111DC ; void (__cdecl *free)(void *Block)
.idata:004111DC                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004111E0 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004111E0                 extrn __imp_getenv:dword
.idata:004111E0                                         ; DATA XREF: getenv↑r
.idata:004111E4 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004111E4                 extrn __imp_iswctype:dword
.idata:004111E4                                         ; DATA XREF: iswctype↑r
.idata:004111E8 ; void *(__cdecl *malloc)(size_t Size)
.idata:004111E8                 extrn __imp_malloc:dword
.idata:004111E8                                         ; DATA XREF: malloc↑r
.idata:004111EC ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004111EC                 extrn __imp_memcpy:dword
.idata:004111EC                                         ; DATA XREF: memcpy↑r
.idata:004111F0 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004111F0                 extrn __imp_memset:dword
.idata:004111F0                                         ; DATA XREF: memset↑r
.idata:004111F4 ; int (*printf)(const char *const Format, ...)
.idata:004111F4                 extrn __imp_printf:dword
.idata:004111F4                                         ; DATA XREF: printf↑r
.idata:004111F8 ; int (__cdecl *puts)(const char *Buffer)
.idata:004111F8                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:004111FC ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004111FC                 extrn __imp_realloc:dword
.idata:004111FC                                         ; DATA XREF: realloc↑r
.idata:00411200 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00411200                 extrn __imp_setlocale:dword
.idata:00411200                                         ; DATA XREF: setlocale↑r
.idata:00411204 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00411204                 extrn __imp_signal:dword
.idata:00411204                                         ; DATA XREF: signal↑r
.idata:00411208 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00411208                 extrn __imp_strchr:dword
.idata:00411208                                         ; DATA XREF: strchr↑r
.idata:0041120C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0041120C                 extrn __imp_strcmp:dword
.idata:0041120C                                         ; DATA XREF: strcmp↑r
.idata:00411210 ; int (__cdecl *strcoll)(const char *String1, const char *String2)
.idata:00411210                 extrn __imp_strcoll:dword
.idata:00411210                                         ; DATA XREF: strcoll↑r
.idata:00411214 ; size_t (__cdecl *strcspn)(const char *Str, const char *Control)
.idata:00411214                 extrn __imp_strcspn:dword
.idata:00411214                                         ; DATA XREF: strcspn↑r
.idata:00411218 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00411218                 extrn __imp_strerror:dword
.idata:00411218                                         ; DATA XREF: strerror↑r
.idata:0041121C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041121C                 extrn __imp_strlen:dword
.idata:0041121C                                         ; DATA XREF: strlen↑r
.idata:00411220 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00411220                 extrn __imp_strncmp:dword
.idata:00411220                                         ; DATA XREF: strncmp↑r
.idata:00411224 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00411224                 extrn __imp_strncpy:dword
.idata:00411224                                         ; DATA XREF: strncpy↑r
.idata:00411228 ; int (__cdecl *tolower)(int C)
.idata:00411228                 extrn __imp_tolower:dword
.idata:00411228                                         ; DATA XREF: tolower↑r
.idata:0041122C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041122C                 extrn __imp_vfprintf:dword
.idata:0041122C                                         ; DATA XREF: vfprintf↑r
.idata:00411230
.idata:00411230
.idata:00411230
.idata:00411230                 end start
