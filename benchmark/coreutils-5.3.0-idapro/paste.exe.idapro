.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : B337F2AD56DC693820E240C71A16F7CA879FE60922432CDCEA2CAFAEFF9472F2
.text:00401000 ; Input MD5    : 55CBCBBEDE01E7B61DEF14EE727148BD
.text:00401000 ; Input CRC32  : D195CCE4
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/paste.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A25A (Wed Apr 20 18:41:30 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004A00 (  18944.)
.text:00401000 ; Section size in file          : 00004A00 (  18944.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401670+68↓p
.text:00401040                                         ; .text:004056B0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_405650
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_405620
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401670
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_405650
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aSerial         db 'serial',0           ; DATA XREF: .text:off_4012A0↓o
.text:00401287 aDelimiters     db 'delimiters',0       ; DATA XREF: .text:004012B0↓o
.text:00401292 aHelp           db 'help',0             ; DATA XREF: .text:004012C0↓o
.text:00401297 aVersion        db 'version',0          ; DATA XREF: .text:004012D0↓o
.text:0040129F                 align 10h
.text:004012A0 off_4012A0      dd offset aSerial       ; DATA XREF: sub_401670+88↓o
.text:004012A0                                         ; "serial"
.text:004012A4                 dd 2 dup(0)
.text:004012AC                 dd 73h
.text:004012B0                 dd offset aDelimiters   ; "delimiters"
.text:004012B4                 dd 1, 0
.text:004012BC                 dd 64h
.text:004012C0                 dd offset aHelp         ; "help"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 0FFFFFF7Eh
.text:004012D0                 dd offset aVersion      ; "version"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004012F0 ; const char byte_4012F0[]
.text:004012F0 byte_4012F0     db 9, 0                 ; DATA XREF: sub_401670+6↓o
.text:004012F2 ; const char Locale
.text:004012F2 Locale          db 0                    ; DATA XREF: sub_401670+25↓o
.text:004012F3                 align 10h
.text:00401300 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401300                                         ; DATA XREF: sub_401670+3F↓o
.text:00401323 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401670+47↓o
.text:00401323                                         ; sub_401670+54↓o
.text:0040132D aDS             db 'd:s',0              ; DATA XREF: sub_401670+90↓o
.text:00401331                 db 0EBh, 0Dh, 90h
.text:00401334                 align 10h
.text:00401340 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401340                                         ; DATA XREF: sub_401670:loc_401742↓o
.text:00401340                                         ; .text:0040199C↓o
.text:00401367 a0              db '\0',0               ; DATA XREF: sub_401670+11A↓o
.text:0040136A aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401670+140↓o
.text:0040137A aDavidMIhnat    db 'David M. Ihnat',0   ; DATA XREF: sub_401670+148↓o
.text:00401389 a530            db '5.3.0',0            ; DATA XREF: sub_401670+153↓o
.text:0040138F aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401670+15B↓o
.text:0040139D ; const FILE stru_40139D
.text:0040139D stru_40139D     FILE <74736170h, 90900065h, 90909090h, 90909090h, 90909090h, \
.text:0040139D                                         ; DATA XREF: sub_401670+163↓o
.text:0040139D                       90909090h, 90909090h, 90909090h>
.text:004013BD                 db  90h
.text:004013BE                 db  90h
.text:004013BF                 db  90h
.text:004013C0 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.text:004013C0                                         ; DATA XREF: sub_401670:loc_4017EC↓o
.text:004013C0                                         ; .text:loc_4019D0↓o
.text:004013E1                 align 20h
.text:00401400 aWriteLinesCons db 'Write lines consisting of the sequentially corresponding lines fr'
.text:00401400                                         ; DATA XREF: sub_401670+19B↓o
.text:00401400                                         ; .text:004019EF↓o
.text:00401400                 db 'om',0Ah
.text:00401400                 db 'each FILE, separated by TABs, to standard output.',0Ah
.text:00401400                 db 'With no FILE, or when FILE is -, read standard input.',0Ah
.text:00401400                 db 0Ah,0
.text:004014AE                 align 20h
.text:004014C0 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:004014C0                                         ; DATA XREF: sub_401670+1BD↓o
.text:004014C0                                         ; .text:00401A11↓o
.text:004014C0                 db 'ns too.',0Ah,0
.text:0040150A                 align 20h
.text:00401520 aDDelimitersLis db '  -d, --delimiters=LIST   reuse characters from LIST instead of T'
.text:00401520                                         ; DATA XREF: sub_401670+1DF↓o
.text:00401520                                         ; .text:00401A33↓o
.text:00401520                 db 'ABs',0Ah
.text:00401520                 db '  -s, --serial            paste one file at a time instead of in '
.text:00401520                 db 'parallel',0Ah,0
.text:004015B0                 align 20h
.text:004015C0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004015C0                                         ; DATA XREF: sub_401670+201↓o
.text:004015C0                                         ; .text:00401A55↓o
.text:004015ED                 align 20h
.text:00401600 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401600                                         ; DATA XREF: sub_401670+223↓o
.text:00401600                                         ; .text:00401A77↓o
.text:00401636 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401670+245↓o
.text:00401636                                         ; .text:00401A99↓o
.text:00401636                 db 'Report bugs to <%s>.',0Ah,0
.text:0040164D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040164D                                         ; DATA XREF: sub_401670+252↓o
.text:0040164D                                         ; .text:00401AA6↓o
.text:00401663 ; const char asc_401663[]
.text:00401663 asc_401663      db '-',0                ; DATA XREF: sub_401670+2D9↓o
.text:00401663                                         ; sub_401670:loc_40197E↓o ...
.text:00401665                 align 10h
.text:00401670
.text:00401670 ; =============== S U B R O U T I N E =======================================
.text:00401670
.text:00401670 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401670
.text:00401670 sub_401670      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401670
.text:00401670 Category        = dword ptr -28h
.text:00401670 Locale          = dword ptr -24h
.text:00401670 var_20          = dword ptr -20h
.text:00401670 var_1C          = byte ptr -1Ch
.text:00401670 var_18          = byte ptr -18h
.text:00401670 var_14          = dword ptr -14h
.text:00401670 var_10          = dword ptr -10h
.text:00401670 arg_0           = dword ptr  8
.text:00401670 arg_4           = dword ptr  0Ch
.text:00401670
.text:00401670                 push    ebp
.text:00401671                 xor     eax, eax
.text:00401673                 mov     ebp, esp
.text:00401675                 push    edi
.text:00401676                 mov     edi, offset byte_4012F0
.text:0040167B                 push    esi
.text:0040167C                 push    ebx
.text:0040167D                 sub     esp, 1Ch
.text:00401680                 mov     esi, [ebp+arg_4]
.text:00401683                 and     esp, 0FFFFFFF0h
.text:00401686                 mov     ebx, [ebp+arg_0]
.text:00401689                 call    __alloca
.text:0040168E                 call    sub_4056F0
.text:00401693                 mov     edx, [esi]
.text:00401695                 mov     [esp+28h+Locale], offset Locale ; Locale
.text:0040169D                 mov     [esp+28h+Category], 0 ; Category
.text:004016A4                 mov     ds:dword_4071D0, edx
.text:004016AA                 call    setlocale
.text:004016AF                 mov     [esp+28h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004016B7                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:004016BE                 call    ds:__imp_libintl_bindtextdomain
.text:004016C4                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:004016CB                 call    ds:libintl_textdomain
.text:004016D1                 mov     [esp+28h+Category], offset sub_403B70 ; void (__cdecl *)()
.text:004016D8                 call    sub_401040
.text:004016DD                 mov     ds:byte_407000, 0
.text:004016E4                 mov     ds:byte_407010, 0
.text:004016EB                 nop
.text:004016EC                 lea     esi, [esi+0]
.text:004016F0
.text:004016F0 loc_4016F0:                             ; CODE XREF: sub_401670+D0↓j
.text:004016F0                                         ; sub_401670+126↓j
.text:004016F0                 mov     dword ptr [esp+28h+var_18], 0
.text:004016F8                 mov     dword ptr [esp+28h+var_1C], offset off_4012A0 ; char
.text:00401700                 mov     [esp+28h+var_20], offset aDS ; "d:s"
.text:00401708                 mov     [esp+28h+Locale], esi
.text:0040170C                 mov     [esp+28h+Category], ebx
.text:0040170F                 call    sub_403A00
.text:00401714                 cmp     eax, 0FFFFFFFFh
.text:00401717                 jz      loc_4018D7
.text:0040171D                 cmp     eax, 0FFFFFF7Eh
.text:00401722                 jz      loc_4017EC
.text:00401728                 cmp     eax, 0FFFFFF7Eh
.text:0040172D                 jle     short loc_40179B
.text:0040172F                 cmp     eax, 64h ; 'd'
.text:00401732                 jz      short loc_401780
.text:00401734                 cmp     eax, 73h ; 's'
.text:00401737                 jnz     short loc_401742
.text:00401739                 mov     ds:byte_407010, 1
.text:00401740                 jmp     short loc_4016F0
.text:00401742 ; ---------------------------------------------------------------------------
.text:00401742
.text:00401742 loc_401742:                             ; CODE XREF: sub_401670+C7↑j
.text:00401742                                         ; sub_401670+130↓j
.text:00401742                 mov     [esp+28h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401749                 call    ds:libintl_gettext
.text:0040174F                 mov     esi, ds:_iob
.text:00401755                 mov     edi, ds:dword_4071D0
.text:0040175B                 add     esi, 40h ; '@'
.text:0040175E                 mov     [esp+28h+var_20], edi
.text:00401762                 mov     [esp+28h+Locale], eax ; Format
.text:00401766                 mov     [esp+28h+Category], esi ; Stream
.text:00401769                 call    fprintf
.text:0040176E                 mov     [esp+28h+Category], 1 ; Code
.text:00401775
.text:00401775 loc_401775:                             ; CODE XREF: sub_401670+17A↓j
.text:00401775                                         ; sub_401670+2BE↓j
.text:00401775                 call    exit
.text:00401775 ; ---------------------------------------------------------------------------
.text:0040177A                 align 10h
.text:00401780
.text:00401780 loc_401780:                             ; CODE XREF: sub_401670+C2↑j
.text:00401780                 mov     eax, ds:dword_4071F0
.text:00401785                 cmp     byte ptr [eax], 0
.text:00401788                 jnz     short loc_401794
.text:0040178A                 mov     eax, offset a0  ; "\\0"
.text:0040178F                 mov     ds:dword_4071F0, eax
.text:00401794
.text:00401794 loc_401794:                             ; CODE XREF: sub_401670+118↑j
.text:00401794                 mov     edi, eax
.text:00401796                 jmp     loc_4016F0
.text:0040179B ; ---------------------------------------------------------------------------
.text:0040179B
.text:0040179B loc_40179B:                             ; CODE XREF: sub_401670+BD↑j
.text:0040179B                 cmp     eax, 0FFFFFF7Dh
.text:004017A0                 jnz     short loc_401742
.text:004017A2                 mov     [esp+28h+var_10], 0
.text:004017AA                 mov     edx, ds:_iob
.text:004017B0                 mov     [esp+28h+var_14], offset aDavidMackenzie ; "David MacKenzie"
.text:004017B8                 mov     dword ptr [esp+28h+var_18], offset aDavidMIhnat ; "David M. Ihnat"
.text:004017C0                 add     edx, 20h ; ' '
.text:004017C3                 mov     dword ptr [esp+28h+var_1C], offset a530 ; "5.3.0"
.text:004017CB                 mov     [esp+28h+var_20], offset aGnuCoreutils ; "GNU coreutils"
.text:004017D3                 mov     [esp+28h+Locale], offset stru_40139D ; FILE *
.text:004017DB                 mov     [esp+28h+Category], edx ; FILE *
.text:004017DE                 call    sub_4039C0
.text:004017E3
.text:004017E3 loc_4017E3:                             ; CODE XREF: sub_401670+262↓j
.text:004017E3                 mov     [esp+28h+Category], 0
.text:004017EA                 jmp     short loc_401775
.text:004017EC ; ---------------------------------------------------------------------------
.text:004017EC
.text:004017EC loc_4017EC:                             ; CODE XREF: sub_401670+B2↑j
.text:004017EC                 mov     [esp+28h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:004017F3                 call    ds:libintl_gettext
.text:004017F9                 mov     ebx, ds:dword_4071D0
.text:004017FF                 mov     [esp+28h+Category], eax ; Format
.text:00401802                 mov     [esp+28h+Locale], ebx
.text:00401806                 call    printf
.text:0040180B                 mov     [esp+28h+Category], offset aWriteLinesCons ; "Write lines consisting of the sequentia"...
.text:00401812                 call    ds:libintl_gettext
.text:00401818                 mov     ecx, ds:_iob
.text:0040181E                 add     ecx, 20h ; ' '
.text:00401821                 mov     [esp+28h+Locale], ecx ; Stream
.text:00401825                 mov     [esp+28h+Category], eax ; Buffer
.text:00401828                 call    fputs
.text:0040182D                 mov     [esp+28h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401834                 call    ds:libintl_gettext
.text:0040183A                 mov     edi, ds:_iob
.text:00401840                 add     edi, 20h ; ' '
.text:00401843                 mov     [esp+28h+Locale], edi ; Stream
.text:00401847                 mov     [esp+28h+Category], eax ; Buffer
.text:0040184A                 call    fputs
.text:0040184F                 mov     [esp+28h+Category], offset aDDelimitersLis ; "  -d, --delimiters=LIST   reuse charact"...
.text:00401856                 call    ds:libintl_gettext
.text:0040185C                 mov     esi, ds:_iob
.text:00401862                 add     esi, 20h ; ' '
.text:00401865                 mov     [esp+28h+Locale], esi ; Stream
.text:00401869                 mov     [esp+28h+Category], eax ; Buffer
.text:0040186C                 call    fputs
.text:00401871                 mov     [esp+28h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401878                 call    ds:libintl_gettext
.text:0040187E                 mov     ebx, ds:_iob
.text:00401884                 add     ebx, 20h ; ' '
.text:00401887                 mov     [esp+28h+Locale], ebx ; Stream
.text:0040188B                 mov     [esp+28h+Category], eax ; Buffer
.text:0040188E                 call    fputs
.text:00401893                 mov     [esp+28h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040189A                 call    ds:libintl_gettext
.text:004018A0                 mov     ecx, ds:_iob
.text:004018A6                 add     ecx, 20h ; ' '
.text:004018A9                 mov     [esp+28h+Locale], ecx ; Stream
.text:004018AD                 mov     [esp+28h+Category], eax ; Buffer
.text:004018B0                 call    fputs
.text:004018B5                 mov     [esp+28h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004018BC                 call    ds:libintl_gettext
.text:004018C2                 mov     [esp+28h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004018CA                 mov     [esp+28h+Category], eax ; Format
.text:004018CD                 call    printf
.text:004018D2                 jmp     loc_4017E3
.text:004018D7 ; ---------------------------------------------------------------------------
.text:004018D7
.text:004018D7 loc_4018D7:                             ; CODE XREF: sub_401670+A7↑j
.text:004018D7                 cmp     dword_406010, ebx
.text:004018DD                 jz      loc_40197E
.text:004018E3
.text:004018E3 loc_4018E3:                             ; CODE XREF: sub_401670+316↓j
.text:004018E3                 mov     [esp+28h+Category], edi ; char *
.text:004018E6                 call    sub_401AC0
.text:004018EB                 cmp     ds:byte_407010, 0
.text:004018F2                 jnz     short loc_401965
.text:004018F4                 mov     ecx, dword_406010
.text:004018FA                 lea     edx, [esi+ecx*4]
.text:004018FD                 sub     ebx, ecx
.text:004018FF                 mov     [esp+28h+Locale], edx
.text:00401903                 mov     [esp+28h+Category], ebx
.text:00401906                 call    sub_401CA0
.text:0040190B
.text:0040190B loc_40190B:                             ; CODE XREF: sub_401670+30C↓j
.text:0040190B                 mov     esi, ds:Block
.text:00401911                 mov     bl, al
.text:00401913                 mov     [esp+28h+Category], esi ; Block
.text:00401916                 call    free
.text:0040191B                 cmp     ds:byte_407000, 0
.text:00401922                 jnz     short loc_401933
.text:00401924
.text:00401924 loc_401924:                             ; CODE XREF: sub_401670+2D2↓j
.text:00401924                                         ; sub_401670+2F3↓j
.text:00401924                 xor     ecx, ecx
.text:00401926                 test    bl, bl
.text:00401928                 setz    cl
.text:0040192B                 mov     [esp+28h+Category], ecx
.text:0040192E                 jmp     loc_401775
.text:00401933 ; ---------------------------------------------------------------------------
.text:00401933
.text:00401933 loc_401933:                             ; CODE XREF: sub_401670+2B2↑j
.text:00401933                 mov     edx, ds:_iob
.text:00401939                 mov     [esp+28h+Category], edx ; Stream
.text:0040193C                 call    fclose
.text:00401941                 inc     eax
.text:00401942                 jnz     short loc_401924
.text:00401944                 call    _errno
.text:00401949                 mov     [esp+28h+var_20], offset asc_401663 ; "-"
.text:00401951                 mov     edi, [eax]
.text:00401953                 mov     [esp+28h+Category], 1 ; Code
.text:0040195A                 mov     [esp+28h+Locale], edi ; ErrorMessage
.text:0040195E                 call    sub_405370
.text:00401963                 jmp     short loc_401924
.text:00401965 ; ---------------------------------------------------------------------------
.text:00401965
.text:00401965 loc_401965:                             ; CODE XREF: sub_401670+282↑j
.text:00401965                 mov     edi, dword_406010
.text:0040196B                 lea     ecx, [esi+edi*4]
.text:0040196E                 sub     ebx, edi
.text:00401970                 mov     [esp+28h+Locale], ecx
.text:00401974                 mov     [esp+28h+Category], ebx
.text:00401977                 call    sub_402200
.text:0040197C                 jmp     short loc_40190B
.text:0040197E ; ---------------------------------------------------------------------------
.text:0040197E
.text:0040197E loc_40197E:                             ; CODE XREF: sub_401670+26D↑j
.text:0040197E                 mov     dword ptr [esi+ebx*4], offset asc_401663 ; "-"
.text:00401985                 inc     ebx
.text:00401986                 jmp     loc_4018E3
.text:00401986 sub_401670      endp
.text:00401986
.text:00401986 ; ---------------------------------------------------------------------------
.text:0040198B                 align 10h
.text:00401990                 push    ebx
.text:00401991                 sub     esp, 18h
.text:00401994                 mov     ebx, [esp+20h]
.text:00401998                 test    ebx, ebx
.text:0040199A                 jz      short loc_4019D0
.text:0040199C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004019A3                 call    ds:libintl_gettext
.text:004019A9                 mov     edx, ds:_iob
.text:004019AF                 mov     ecx, ds:dword_4071D0
.text:004019B5                 add     edx, 40h ; '@'
.text:004019B8                 mov     [esp+8], ecx
.text:004019BC                 mov     [esp+4], eax
.text:004019C0                 mov     [esp], edx
.text:004019C3                 call    fprintf
.text:004019C8
.text:004019C8 loc_4019C8:                             ; CODE XREF: .text:00401AB6↓j
.text:004019C8                 mov     [esp], ebx
.text:004019CB                 call    exit
.text:004019D0 ; ---------------------------------------------------------------------------
.text:004019D0
.text:004019D0 loc_4019D0:                             ; CODE XREF: .text:0040199A↑j
.text:004019D0                 mov     dword ptr [esp], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:004019D7                 call    ds:libintl_gettext
.text:004019DD                 mov     ecx, ds:dword_4071D0
.text:004019E3                 mov     [esp], eax
.text:004019E6                 mov     [esp+4], ecx
.text:004019EA                 call    printf
.text:004019EF                 mov     dword ptr [esp], offset aWriteLinesCons ; "Write lines consisting of the sequentia"...
.text:004019F6                 call    ds:libintl_gettext
.text:004019FC                 mov     ecx, ds:_iob
.text:00401A02                 add     ecx, 20h ; ' '
.text:00401A05                 mov     [esp+4], ecx
.text:00401A09                 mov     [esp], eax
.text:00401A0C                 call    fputs
.text:00401A11                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401A18                 call    ds:libintl_gettext
.text:00401A1E                 mov     ecx, ds:_iob
.text:00401A24                 add     ecx, 20h ; ' '
.text:00401A27                 mov     [esp+4], ecx
.text:00401A2B                 mov     [esp], eax
.text:00401A2E                 call    fputs
.text:00401A33                 mov     dword ptr [esp], offset aDDelimitersLis ; "  -d, --delimiters=LIST   reuse charact"...
.text:00401A3A                 call    ds:libintl_gettext
.text:00401A40                 mov     ecx, ds:_iob
.text:00401A46                 add     ecx, 20h ; ' '
.text:00401A49                 mov     [esp+4], ecx
.text:00401A4D                 mov     [esp], eax
.text:00401A50                 call    fputs
.text:00401A55                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401A5C                 call    ds:libintl_gettext
.text:00401A62                 mov     ecx, ds:_iob
.text:00401A68                 add     ecx, 20h ; ' '
.text:00401A6B                 mov     [esp+4], ecx
.text:00401A6F                 mov     [esp], eax
.text:00401A72                 call    fputs
.text:00401A77                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401A7E                 call    ds:libintl_gettext
.text:00401A84                 mov     ecx, ds:_iob
.text:00401A8A                 add     ecx, 20h ; ' '
.text:00401A8D                 mov     [esp+4], ecx
.text:00401A91                 mov     [esp], eax
.text:00401A94                 call    fputs
.text:00401A99                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401AA0                 call    ds:libintl_gettext
.text:00401AA6                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401AAE                 mov     [esp], eax
.text:00401AB1                 call    printf
.text:00401AB6                 jmp     loc_4019C8
.text:00401AB6 ; ---------------------------------------------------------------------------
.text:00401ABB                 align 10h
.text:00401AC0
.text:00401AC0 ; =============== S U B R O U T I N E =======================================
.text:00401AC0
.text:00401AC0
.text:00401AC0 ; int __cdecl sub_401AC0(char *)
.text:00401AC0 sub_401AC0      proc near               ; CODE XREF: sub_401670+276↑p
.text:00401AC0
.text:00401AC0 var_C           = dword ptr -0Ch
.text:00401AC0 arg_0           = dword ptr  4
.text:00401AC0
.text:00401AC0                 push    ebx
.text:00401AC1                 sub     esp, 8
.text:00401AC4                 mov     ebx, [esp+0Ch+arg_0]
.text:00401AC8                 mov     [esp+0Ch+var_C], ebx ; char *
.text:00401ACB                 call    sub_403E50
.text:00401AD0                 mov     ds:Block, eax
.text:00401AD5                 mov     edx, eax
.text:00401AD7                 movzx   eax, byte ptr [ebx]
.text:00401ADA                 test    al, al
.text:00401ADC                 jz      short loc_401AEF
.text:00401ADE                 mov     esi, esi
.text:00401AE0
.text:00401AE0 loc_401AE0:                             ; CODE XREF: sub_401AC0+2D↓j
.text:00401AE0                 cmp     al, 5Ch ; '\'
.text:00401AE2                 jz      short loc_401B00
.text:00401AE4                 mov     [edx], al
.text:00401AE6                 inc     ebx
.text:00401AE7                 inc     edx
.text:00401AE8
.text:00401AE8 loc_401AE8:                             ; CODE XREF: sub_401AC0+182↓j
.text:00401AE8                 movzx   eax, byte ptr [ebx]
.text:00401AEB                 test    al, al
.text:00401AED                 jnz     short loc_401AE0
.text:00401AEF
.text:00401AEF loc_401AEF:                             ; CODE XREF: sub_401AC0+1C↑j
.text:00401AEF                 mov     ds:dword_407030, edx
.text:00401AF5                 add     esp, 8
.text:00401AF8                 pop     ebx
.text:00401AF9                 retn
.text:00401AF9 ; ---------------------------------------------------------------------------
.text:00401AFA                 align 10h
.text:00401B00
.text:00401B00 loc_401B00:                             ; CODE XREF: sub_401AC0+22↑j
.text:00401B00                 inc     ebx
.text:00401B01                 movzx   eax, byte ptr [ebx]
.text:00401B04                 mov     cl, al
.text:00401B06                 movsx   eax, al
.text:00401B09                 sub     eax, 30h ; '0'  ; switch 71 cases
.text:00401B0C                 cmp     eax, 46h
.text:00401B0F                 ja      def_401B15      ; jumptable 00401B15 default case, cases 49-97,99-101,103-109,111-113,115,117
.text:00401B15                 jmp     ds:jpt_401B15[eax*4] ; switch jump
.text:00401B15 ; ---------------------------------------------------------------------------
.text:00401B1C jpt_401B15      dd offset loc_401C38, offset def_401B15, offset def_401B15
.text:00401B1C                                         ; DATA XREF: sub_401AC0+55↑r
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15 ; jump table for switch statement
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset loc_401C47
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset loc_401C4C, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset loc_401C51
.text:00401B1C                 dd offset def_401B15, offset def_401B15, offset def_401B15
.text:00401B1C                 dd offset loc_401C56, offset def_401B15, offset loc_401C5B
.text:00401B1C                 dd offset def_401B15, offset loc_401C64
.text:00401C38 ; ---------------------------------------------------------------------------
.text:00401C38
.text:00401C38 loc_401C38:                             ; CODE XREF: sub_401AC0+55↑j
.text:00401C38                                         ; DATA XREF: sub_401AC0:jpt_401B15↑o
.text:00401C38                 mov     byte ptr [edx], 0 ; jumptable 00401B15 case 48
.text:00401C3B                 nop
.text:00401C3C                 lea     esi, [esi+0]
.text:00401C40
.text:00401C40 loc_401C40:                             ; CODE XREF: sub_401AC0+18A↓j
.text:00401C40                                         ; sub_401AC0+18F↓j ...
.text:00401C40                 inc     edx
.text:00401C41                 inc     ebx
.text:00401C42                 jmp     loc_401AE8
.text:00401C47 ; ---------------------------------------------------------------------------
.text:00401C47
.text:00401C47 loc_401C47:                             ; CODE XREF: sub_401AC0+55↑j
.text:00401C47                                         ; DATA XREF: sub_401AC0:jpt_401B15↑o
.text:00401C47                 mov     byte ptr [edx], 8 ; jumptable 00401B15 case 98
.text:00401C4A                 jmp     short loc_401C40
.text:00401C4C ; ---------------------------------------------------------------------------
.text:00401C4C
.text:00401C4C loc_401C4C:                             ; CODE XREF: sub_401AC0+55↑j
.text:00401C4C                                         ; DATA XREF: sub_401AC0:jpt_401B15↑o
.text:00401C4C                 mov     byte ptr [edx], 0Ch ; jumptable 00401B15 case 102
.text:00401C4F                 jmp     short loc_401C40
.text:00401C51 ; ---------------------------------------------------------------------------
.text:00401C51
.text:00401C51 loc_401C51:                             ; CODE XREF: sub_401AC0+55↑j
.text:00401C51                                         ; DATA XREF: sub_401AC0:jpt_401B15↑o
.text:00401C51                 mov     byte ptr [edx], 0Ah ; jumptable 00401B15 case 110
.text:00401C54                 jmp     short loc_401C40
.text:00401C56 ; ---------------------------------------------------------------------------
.text:00401C56
.text:00401C56 loc_401C56:                             ; CODE XREF: sub_401AC0+55↑j
.text:00401C56                                         ; DATA XREF: sub_401AC0:jpt_401B15↑o
.text:00401C56                 mov     byte ptr [edx], 0Dh ; jumptable 00401B15 case 114
.text:00401C59                 jmp     short loc_401C40
.text:00401C5B ; ---------------------------------------------------------------------------
.text:00401C5B
.text:00401C5B loc_401C5B:                             ; CODE XREF: sub_401AC0+55↑j
.text:00401C5B                                         ; DATA XREF: sub_401AC0:jpt_401B15↑o
.text:00401C5B                 mov     byte ptr [edx], 9 ; jumptable 00401B15 case 116
.text:00401C5E                 jmp     short loc_401C40
.text:00401C60 ; ---------------------------------------------------------------------------
.text:00401C60
.text:00401C60 def_401B15:                             ; CODE XREF: sub_401AC0+4F↑j
.text:00401C60                                         ; sub_401AC0+55↑j
.text:00401C60                                         ; DATA XREF: ...
.text:00401C60                 mov     [edx], cl       ; jumptable 00401B15 default case, cases 49-97,99-101,103-109,111-113,115,117
.text:00401C62                 jmp     short loc_401C40
.text:00401C64 ; ---------------------------------------------------------------------------
.text:00401C64
.text:00401C64 loc_401C64:                             ; CODE XREF: sub_401AC0+55↑j
.text:00401C64                                         ; DATA XREF: sub_401AC0:jpt_401B15↑o
.text:00401C64                 mov     byte ptr [edx], 0Bh ; jumptable 00401B15 case 118
.text:00401C67                 jmp     short loc_401C40
.text:00401C67 sub_401AC0      endp
.text:00401C67
.text:00401C67 ; ---------------------------------------------------------------------------
.text:00401C69 ; const char byte_401C69[]
.text:00401C69 byte_401C69     db 25h, 73h, 0          ; DATA XREF: sub_401CA0+2EF↓o
.text:00401C69                                         ; sub_401CA0+32F↓o ...
.text:00401C6C aStandardInputI db 'standard input is closed',0
.text:00401C6C                                         ; DATA XREF: sub_401CA0:loc_402143↓o
.text:00401C85 ; const char aR[]
.text:00401C85 aR              db 'r',0                ; DATA XREF: sub_401CA0:loc_402170↓o
.text:00401C85                                         ; sub_402200:loc_402491↓o
.text:00401C87 aWriteError     db 'write error',0      ; DATA XREF: sub_401CA0:loc_4021CF↓o
.text:00401C87                                         ; sub_402200:loc_4024B0↓o
.text:00401C93                 align 10h
.text:00401CA0
.text:00401CA0 ; =============== S U B R O U T I N E =======================================
.text:00401CA0
.text:00401CA0
.text:00401CA0 sub_401CA0      proc near               ; CODE XREF: sub_401670+296↑p
.text:00401CA0
.text:00401CA0 File            = dword ptr -3Ch
.text:00401CA0 ElementSize     = dword ptr -38h
.text:00401CA0 ElementCount    = dword ptr -34h
.text:00401CA0 Stream          = dword ptr -30h
.text:00401CA0 var_2C          = dword ptr -2Ch
.text:00401CA0 ErrorMessage    = dword ptr -28h
.text:00401CA0 var_24          = dword ptr -24h
.text:00401CA0 var_1E          = byte ptr -1Eh
.text:00401CA0 var_1D          = byte ptr -1Dh
.text:00401CA0 Block           = dword ptr -1Ch
.text:00401CA0 Buffer          = dword ptr -18h
.text:00401CA0 var_11          = byte ptr -11h
.text:00401CA0 arg_0           = dword ptr  4
.text:00401CA0 arg_4           = dword ptr  8
.text:00401CA0
.text:00401CA0                 push    ebp
.text:00401CA1                 xor     ebp, ebp
.text:00401CA3                 push    edi
.text:00401CA4                 push    esi
.text:00401CA5                 push    ebx
.text:00401CA6                 sub     esp, 2Ch
.text:00401CA9                 mov     edx, [esp+3Ch+arg_0]
.text:00401CAD                 mov     [esp+3Ch+var_11], 1
.text:00401CB2                 add     edx, 2
.text:00401CB5                 mov     [esp+3Ch+File], edx ; size_t
.text:00401CB8                 call    sub_403C90
.text:00401CBD                 mov     [esp+3Ch+Buffer], eax
.text:00401CC1                 mov     edx, [esp+3Ch+arg_0]
.text:00401CC5                 mov     [esp+3Ch+ElementSize], 4
.text:00401CCD                 inc     edx
.text:00401CCE                 mov     [esp+3Ch+File], edx
.text:00401CD1                 call    sub_403C50
.text:00401CD6                 cmp     ebp, [esp+3Ch+arg_0]
.text:00401CDA                 mov     [esp+3Ch+Block], eax
.text:00401CDE                 mov     [esp+3Ch+var_1D], 0
.text:00401CE3                 jnb     loc_401EC0
.text:00401CE9                 lea     esi, [esi+0]
.text:00401CF0
.text:00401CF0 loc_401CF0:                             ; CODE XREF: sub_401CA0+85↓j
.text:00401CF0                 cld
.text:00401CF1                 mov     ecx, [esp+3Ch+arg_4]
.text:00401CF5                 mov     edi, offset asc_401663 ; "-"
.text:00401CFA                 mov     ebx, [ecx+ebp*4]
.text:00401CFD                 mov     ecx, 2
.text:00401D02                 mov     esi, ebx
.text:00401D04                 repe cmpsb
.text:00401D06                 jnz     loc_402170
.text:00401D0C                 mov     ds:byte_407000, 1
.text:00401D13                 mov     esi, ds:_iob
.text:00401D19                 mov     ebx, [esp+3Ch+Block]
.text:00401D1D                 mov     [ebx+ebp*4], esi
.text:00401D20
.text:00401D20 loc_401D20:                             ; CODE XREF: sub_401CA0+4F0↓j
.text:00401D20                                         ; sub_401CA0+4FB↓j ...
.text:00401D20                 inc     ebp
.text:00401D21                 cmp     ebp, [esp+3Ch+arg_0]
.text:00401D25                 jb      short loc_401CF0
.text:00401D27                 cmp     [esp+3Ch+var_1D], 0
.text:00401D2C                 jz      short loc_401D3B
.text:00401D2E                 cmp     ds:byte_407000, 0
.text:00401D35                 jnz     loc_402143
.text:00401D3B
.text:00401D3B loc_401D3B:                             ; CODE XREF: sub_401CA0+8C↑j
.text:00401D3B                                         ; sub_401CA0+BC↓j ...
.text:00401D3B                 test    ebp, ebp
.text:00401D3D                 jz      loc_401EC0
.text:00401D43                 mov     [esp+3Ch+var_1E], 0
.text:00401D48                 xor     esi, esi
.text:00401D4A                 mov     edi, ds:Block
.text:00401D50                 cmp     esi, [esp+3Ch+arg_0]
.text:00401D54                 mov     [esp+3Ch+var_24], 0
.text:00401D5C                 jnb     short loc_401D3B
.text:00401D5E                 test    ebp, ebp
.text:00401D60                 jz      loc_401EC0
.text:00401D66
.text:00401D66 loc_401D66:                             ; CODE XREF: sub_401CA0+20F↓j
.text:00401D66                 mov     [esp+3Ch+var_2C], 0
.text:00401D6E                 mov     ebx, [esp+3Ch+Block]
.text:00401D72                 mov     edx, [ebx+esi*4]
.text:00401D75                 test    edx, edx
.text:00401D77                 jz      loc_401E40
.text:00401D7D                 mov     ecx, [edx+4]
.text:00401D80                 dec     ecx
.text:00401D81                 test    ecx, ecx
.text:00401D83                 mov     [edx+4], ecx
.text:00401D86                 js      loc_402134
.text:00401D8C                 mov     ecx, [edx]
.text:00401D8E                 movzx   ebx, byte ptr [ecx]
.text:00401D91                 inc     ecx
.text:00401D92                 mov     [edx], ecx
.text:00401D94
.text:00401D94 loc_401D94:                             ; CODE XREF: sub_401CA0+49E↓j
.text:00401D94                 call    _errno
.text:00401D99                 mov     edx, [eax]
.text:00401D9B                 cmp     ebx, 0FFFFFFFFh
.text:00401D9E                 mov     [esp+3Ch+ErrorMessage], edx
.text:00401DA2                 jz      loc_401E40
.text:00401DA8                 mov     eax, [esp+3Ch+var_24]
.text:00401DAC                 test    eax, eax
.text:00401DAE                 jnz     loc_4020F4
.text:00401DB4
.text:00401DB4 loc_401DB4:                             ; CODE XREF: sub_401CA0+165↓j
.text:00401DB4                 cmp     ebx, 0FFFFFFFFh
.text:00401DB7                 jz      short loc_401E34
.text:00401DB9
.text:00401DB9 loc_401DB9:                             ; CODE XREF: sub_401CA0+48F↓j
.text:00401DB9                 inc     [esp+3Ch+var_2C]
.text:00401DBD                 cmp     ebx, 0Ah
.text:00401DC0                 jz      short loc_401E34
.text:00401DC2                 mov     eax, ds:_iob
.text:00401DC7                 mov     edx, [eax+24h]
.text:00401DCA                 dec     edx
.text:00401DCB                 mov     [eax+24h], edx
.text:00401DCE                 test    edx, edx
.text:00401DD0                 js      short loc_401E13
.text:00401DD2                 mov     ecx, ds:_iob
.text:00401DD8                 mov     eax, [ecx+20h]
.text:00401DDB                 mov     [eax], bl
.text:00401DDD                 inc     dword ptr [ecx+20h]
.text:00401DE0
.text:00401DE0 loc_401DE0:                             ; CODE XREF: sub_401CA0+18D↓j
.text:00401DE0                 mov     ebx, [esp+3Ch+Block]
.text:00401DE4                 mov     edx, [ebx+esi*4]
.text:00401DE7                 mov     ecx, [edx+4]
.text:00401DEA                 dec     ecx
.text:00401DEB                 test    ecx, ecx
.text:00401DED                 mov     [edx+4], ecx
.text:00401DF0                 js      short loc_401E07
.text:00401DF2                 mov     ecx, [edx]
.text:00401DF4                 movzx   ebx, byte ptr [ecx]
.text:00401DF7                 inc     ecx
.text:00401DF8                 mov     [edx], ecx
.text:00401DFA
.text:00401DFA loc_401DFA:                             ; CODE XREF: sub_401CA0+171↓j
.text:00401DFA                 call    _errno
.text:00401DFF                 mov     edx, [eax]
.text:00401E01                 mov     [esp+3Ch+ErrorMessage], edx
.text:00401E05                 jmp     short loc_401DB4
.text:00401E07 ; ---------------------------------------------------------------------------
.text:00401E07
.text:00401E07 loc_401E07:                             ; CODE XREF: sub_401CA0+150↑j
.text:00401E07                 mov     [esp+3Ch+File], edx ; File
.text:00401E0A                 call    _filbuf
.text:00401E0F                 mov     ebx, eax
.text:00401E11                 jmp     short loc_401DFA
.text:00401E13 ; ---------------------------------------------------------------------------
.text:00401E13
.text:00401E13 loc_401E13:                             ; CODE XREF: sub_401CA0+130↑j
.text:00401E13                 mov     edx, ds:_iob
.text:00401E19                 movsx   ebx, bl
.text:00401E1C                 mov     [esp+3Ch+File], ebx ; Ch
.text:00401E1F                 add     edx, 20h ; ' '
.text:00401E22                 mov     [esp+3Ch+ElementSize], edx ; File
.text:00401E26                 call    _flsbuf
.text:00401E2B                 test    eax, eax
.text:00401E2D                 jns     short loc_401DE0
.text:00401E2F                 jmp     loc_4021CF
.text:00401E34 ; ---------------------------------------------------------------------------
.text:00401E34
.text:00401E34 loc_401E34:                             ; CODE XREF: sub_401CA0+117↑j
.text:00401E34                                         ; sub_401CA0+120↑j
.text:00401E34                 mov     eax, [esp+3Ch+var_2C]
.text:00401E38                 test    eax, eax
.text:00401E3A                 jnz     loc_401FFC
.text:00401E40
.text:00401E40 loc_401E40:                             ; CODE XREF: sub_401CA0+D7↑j
.text:00401E40                                         ; sub_401CA0+102↑j
.text:00401E40                 mov     ebx, [esp+3Ch+Block]
.text:00401E44                 mov     eax, [ebx+esi*4]
.text:00401E47                 test    eax, eax
.text:00401E49                 jz      short loc_401E7C
.text:00401E4B                 test    byte ptr [eax+0Ch], 20h
.text:00401E4F                 jnz     loc_401FC4
.text:00401E55
.text:00401E55 loc_401E55:                             ; CODE XREF: sub_401CA0+357↓j
.text:00401E55                 cmp     eax, ds:_iob
.text:00401E5B                 jz      loc_401FB7
.text:00401E61                 mov     [esp+3Ch+File], eax ; Stream
.text:00401E64                 call    fclose
.text:00401E69                 inc     eax
.text:00401E6A                 jz      loc_401F83
.text:00401E70
.text:00401E70 loc_401E70:                             ; CODE XREF: sub_401CA0+312↓j
.text:00401E70                                         ; sub_401CA0+31F↓j
.text:00401E70                 mov     ecx, [esp+3Ch+Block]
.text:00401E74                 dec     ebp
.text:00401E75                 mov     dword ptr [ecx+esi*4], 0
.text:00401E7C
.text:00401E7C loc_401E7C:                             ; CODE XREF: sub_401CA0+1A9↑j
.text:00401E7C                 inc     esi
.text:00401E7D                 cmp     esi, [esp+3Ch+arg_0]
.text:00401E81                 jz      short loc_401EED
.text:00401E83                 movzx   eax, byte ptr [edi]
.text:00401E86                 test    al, al
.text:00401E88                 jz      short loc_401E9A
.text:00401E8A                 mov     ebx, [esp+3Ch+var_24]
.text:00401E8E                 mov     ecx, [esp+3Ch+Buffer]
.text:00401E92                 mov     [ebx+ecx], al
.text:00401E95                 inc     ebx
.text:00401E96                 mov     [esp+3Ch+var_24], ebx
.text:00401E9A
.text:00401E9A loc_401E9A:                             ; CODE XREF: sub_401CA0+1E8↑j
.text:00401E9A                                         ; sub_401CA0+39B↓j ...
.text:00401E9A                 inc     edi
.text:00401E9B                 cmp     edi, ds:dword_407030
.text:00401EA1                 jz      short loc_401EE5
.text:00401EA3
.text:00401EA3 loc_401EA3:                             ; CODE XREF: sub_401CA0+24B↓j
.text:00401EA3                                         ; sub_401CA0+252↓j ...
.text:00401EA3                 cmp     esi, [esp+3Ch+arg_0]
.text:00401EA7                 jnb     loc_401D3B
.text:00401EAD                 test    ebp, ebp
.text:00401EAF                 jnz     loc_401D66
.text:00401EB5                 lea     esi, [esi+0]
.text:00401EB9                 lea     edi, [edi+0]
.text:00401EC0
.text:00401EC0 loc_401EC0:                             ; CODE XREF: sub_401CA0+43↑j
.text:00401EC0                                         ; sub_401CA0+9D↑j ...
.text:00401EC0                 mov     ecx, [esp+3Ch+Block]
.text:00401EC4                 mov     [esp+3Ch+File], ecx ; Block
.text:00401EC7                 call    free
.text:00401ECC                 mov     esi, [esp+3Ch+Buffer]
.text:00401ED0                 mov     [esp+3Ch+File], esi ; Block
.text:00401ED3                 call    free
.text:00401ED8                 movzx   eax, [esp+3Ch+var_11]
.text:00401EDD                 add     esp, 2Ch
.text:00401EE0                 pop     ebx
.text:00401EE1                 pop     esi
.text:00401EE2                 pop     edi
.text:00401EE3                 pop     ebp
.text:00401EE4                 retn
.text:00401EE5 ; ---------------------------------------------------------------------------
.text:00401EE5
.text:00401EE5 loc_401EE5:                             ; CODE XREF: sub_401CA0+201↑j
.text:00401EE5                 mov     edi, ds:Block
.text:00401EEB                 jmp     short loc_401EA3
.text:00401EED ; ---------------------------------------------------------------------------
.text:00401EED
.text:00401EED loc_401EED:                             ; CODE XREF: sub_401CA0+1E1↑j
.text:00401EED                 cmp     [esp+3Ch+var_1E], 0
.text:00401EF2                 jz      short loc_401EA3
.text:00401EF4                 mov     ebx, [esp+3Ch+var_24]
.text:00401EF8                 test    ebx, ebx
.text:00401EFA                 jnz     short loc_401F43
.text:00401EFC
.text:00401EFC loc_401EFC:                             ; CODE XREF: sub_401CA0+2DE↓j
.text:00401EFC                 mov     ecx, ds:_iob
.text:00401F02                 mov     ebx, [ecx+24h]
.text:00401F05                 dec     ebx
.text:00401F06                 mov     [ecx+24h], ebx
.text:00401F09                 test    ebx, ebx
.text:00401F0B                 js      short loc_401F1D
.text:00401F0D                 mov     eax, ds:_iob
.text:00401F12                 mov     ebx, [eax+20h]
.text:00401F15                 mov     byte ptr [ebx], 0Ah
.text:00401F18
.text:00401F18 loc_401F18:                             ; CODE XREF: sub_401CA0+430↓j
.text:00401F18                 inc     dword ptr [eax+20h]
.text:00401F1B                 jmp     short loc_401EA3
.text:00401F1D ; ---------------------------------------------------------------------------
.text:00401F1D
.text:00401F1D loc_401F1D:                             ; CODE XREF: sub_401CA0+26B↑j
.text:00401F1D                 mov     [esp+3Ch+File], 0Ah ; Ch
.text:00401F24                 mov     edx, ds:_iob
.text:00401F2A                 add     edx, 20h ; ' '
.text:00401F2D                 mov     [esp+3Ch+ElementSize], edx ; File
.text:00401F31
.text:00401F31 loc_401F31:                             ; CODE XREF: sub_401CA0+448↓j
.text:00401F31                 call    _flsbuf
.text:00401F36                 test    eax, eax
.text:00401F38                 jns     loc_401EA3
.text:00401F3E                 jmp     loc_4021CF
.text:00401F43 ; ---------------------------------------------------------------------------
.text:00401F43
.text:00401F43 loc_401F43:                             ; CODE XREF: sub_401CA0+25A↑j
.text:00401F43                 mov     [esp+3Ch+ElementSize], 1 ; ElementSize
.text:00401F4B                 mov     edx, ds:_iob
.text:00401F51                 mov     ecx, [esp+3Ch+var_24]
.text:00401F55                 mov     eax, [esp+3Ch+Buffer]
.text:00401F59                 add     edx, 20h ; ' '
.text:00401F5C                 mov     [esp+3Ch+Stream], edx ; Stream
.text:00401F60                 mov     [esp+3Ch+ElementCount], ecx ; ElementCount
.text:00401F64                 mov     [esp+3Ch+File], eax ; Buffer
.text:00401F67                 call    fwrite
.text:00401F6C                 cmp     eax, [esp+3Ch+var_24]
.text:00401F70                 jnz     loc_4021CF
.text:00401F76                 mov     [esp+3Ch+var_24], 0
.text:00401F7E                 jmp     loc_401EFC
.text:00401F83 ; ---------------------------------------------------------------------------
.text:00401F83
.text:00401F83 loc_401F83:                             ; CODE XREF: sub_401CA0+1CA↑j
.text:00401F83                 call    _errno
.text:00401F88                 mov     edx, [esp+3Ch+arg_4]
.text:00401F8C                 mov     ebx, [edx+esi*4]
.text:00401F8F                 mov     [esp+3Ch+ElementCount], offset byte_401C69 ; char *
.text:00401F97                 mov     [esp+3Ch+Stream], ebx ; char
.text:00401F9B                 mov     ecx, [eax]
.text:00401F9D                 mov     [esp+3Ch+File], 0 ; Code
.text:00401FA4                 mov     [esp+3Ch+ElementSize], ecx ; ErrorMessage
.text:00401FA8                 call    sub_405370
.text:00401FAD                 mov     [esp+3Ch+var_11], 0
.text:00401FB2                 jmp     loc_401E70
.text:00401FB7 ; ---------------------------------------------------------------------------
.text:00401FB7
.text:00401FB7 loc_401FB7:                             ; CODE XREF: sub_401CA0+1BB↑j
.text:00401FB7                 mov     [esp+3Ch+File], eax ; Stream
.text:00401FBA                 call    clearerr
.text:00401FBF                 jmp     loc_401E70
.text:00401FC4 ; ---------------------------------------------------------------------------
.text:00401FC4
.text:00401FC4 loc_401FC4:                             ; CODE XREF: sub_401CA0+1AF↑j
.text:00401FC4                 mov     eax, [esp+3Ch+arg_4]
.text:00401FC8                 mov     edx, [esp+3Ch+ErrorMessage]
.text:00401FCC                 mov     ebx, [eax+esi*4]
.text:00401FCF                 mov     [esp+3Ch+ElementCount], offset byte_401C69 ; char *
.text:00401FD7                 mov     [esp+3Ch+ElementSize], edx ; ErrorMessage
.text:00401FDB                 mov     [esp+3Ch+Stream], ebx ; char
.text:00401FDF                 mov     [esp+3Ch+File], 0 ; Code
.text:00401FE6                 call    sub_405370
.text:00401FEB                 mov     [esp+3Ch+var_11], 0
.text:00401FF0                 mov     ecx, [esp+3Ch+Block]
.text:00401FF4                 mov     eax, [ecx+esi*4]
.text:00401FF7                 jmp     loc_401E55
.text:00401FFC ; ---------------------------------------------------------------------------
.text:00401FFC
.text:00401FFC loc_401FFC:                             ; CODE XREF: sub_401CA0+19A↑j
.text:00401FFC                 mov     [esp+3Ch+var_1E], 1
.text:00402001                 inc     esi
.text:00402002                 cmp     esi, [esp+3Ch+arg_0]
.text:00402006                 jz      loc_4020B0
.text:0040200C                 cmp     ebx, 0Ah
.text:0040200F                 jz      short loc_402036
.text:00402011                 cmp     ebx, 0FFFFFFFFh
.text:00402014                 jz      short loc_402036
.text:00402016                 mov     eax, ds:_iob
.text:0040201B                 mov     cl, bl
.text:0040201D                 mov     edx, [eax+24h]
.text:00402020                 dec     edx
.text:00402021                 test    edx, edx
.text:00402023                 mov     [eax+24h], edx
.text:00402026                 js      short loc_40208A
.text:00402028                 mov     ecx, ds:_iob
.text:0040202E                 mov     eax, [ecx+20h]
.text:00402031                 mov     [eax], bl
.text:00402033                 inc     dword ptr [ecx+20h]
.text:00402036
.text:00402036 loc_402036:                             ; CODE XREF: sub_401CA0+36F↑j
.text:00402036                                         ; sub_401CA0+374↑j ...
.text:00402036                 movzx   ecx, byte ptr [edi]
.text:00402039                 test    cl, cl
.text:0040203B                 jz      loc_401E9A
.text:00402041                 mov     edx, ds:_iob
.text:00402047                 mov     ebx, [edx+24h]
.text:0040204A                 dec     ebx
.text:0040204B                 mov     [edx+24h], ebx
.text:0040204E                 test    ebx, ebx
.text:00402050                 js      short loc_402065
.text:00402052                 mov     ebx, ds:_iob
.text:00402058                 mov     eax, [ebx+20h]
.text:0040205B                 mov     [eax], cl
.text:0040205D                 inc     dword ptr [ebx+20h]
.text:00402060                 jmp     loc_401E9A
.text:00402065 ; ---------------------------------------------------------------------------
.text:00402065
.text:00402065 loc_402065:                             ; CODE XREF: sub_401CA0+3B0↑j
.text:00402065                 mov     ebx, ds:_iob
.text:0040206B                 movsx   edx, cl
.text:0040206E                 mov     [esp+3Ch+File], edx ; Ch
.text:00402071                 add     ebx, 20h ; ' '
.text:00402074                 mov     [esp+3Ch+ElementSize], ebx ; File
.text:00402078                 call    _flsbuf
.text:0040207D                 test    eax, eax
.text:0040207F                 jns     loc_401E9A
.text:00402085                 jmp     loc_4021CF
.text:0040208A ; ---------------------------------------------------------------------------
.text:0040208A
.text:0040208A loc_40208A:                             ; CODE XREF: sub_401CA0+386↑j
.text:0040208A                 mov     ebx, ds:_iob
.text:00402090                 movsx   edx, cl
.text:00402093                 mov     [esp+3Ch+File], edx ; Ch
.text:00402096                 add     ebx, 20h ; ' '
.text:00402099                 mov     [esp+3Ch+ElementSize], ebx ; File
.text:0040209D                 call    _flsbuf
.text:004020A2                 test    eax, eax
.text:004020A4                 jns     short loc_402036
.text:004020A6                 jmp     loc_4021CF
.text:004020A6 ; ---------------------------------------------------------------------------
.text:004020AB                 align 10h
.text:004020B0
.text:004020B0 loc_4020B0:                             ; CODE XREF: sub_401CA0+366↑j
.text:004020B0                 mov     cl, bl
.text:004020B2                 inc     ebx
.text:004020B3                 jz      short loc_4020F0
.text:004020B5
.text:004020B5 loc_4020B5:                             ; CODE XREF: sub_401CA0+452↓j
.text:004020B5                 mov     edx, ds:_iob
.text:004020BB                 mov     ebx, [edx+24h]
.text:004020BE                 dec     ebx
.text:004020BF                 mov     [edx+24h], ebx
.text:004020C2                 test    ebx, ebx
.text:004020C4                 js      short loc_4020D5
.text:004020C6                 mov     eax, ds:_iob
.text:004020CB                 mov     ebx, [eax+20h]
.text:004020CE                 mov     [ebx], cl
.text:004020D0                 jmp     loc_401F18
.text:004020D5 ; ---------------------------------------------------------------------------
.text:004020D5
.text:004020D5 loc_4020D5:                             ; CODE XREF: sub_401CA0+424↑j
.text:004020D5                 mov     ebx, ds:_iob
.text:004020DB                 movsx   edx, cl
.text:004020DE                 mov     [esp+3Ch+File], edx
.text:004020E1                 add     ebx, 20h ; ' '
.text:004020E4                 mov     [esp+3Ch+ElementSize], ebx
.text:004020E8                 jmp     loc_401F31
.text:004020E8 ; ---------------------------------------------------------------------------
.text:004020ED                 align 10h
.text:004020F0
.text:004020F0 loc_4020F0:                             ; CODE XREF: sub_401CA0+413↑j
.text:004020F0                 mov     cl, 0Ah
.text:004020F2                 jmp     short loc_4020B5
.text:004020F4 ; ---------------------------------------------------------------------------
.text:004020F4
.text:004020F4 loc_4020F4:                             ; CODE XREF: sub_401CA0+10E↑j
.text:004020F4                 mov     [esp+3Ch+ElementSize], 1 ; ElementSize
.text:004020FC                 mov     edx, ds:_iob
.text:00402102                 mov     ecx, [esp+3Ch+var_24]
.text:00402106                 add     edx, 20h ; ' '
.text:00402109                 mov     [esp+3Ch+Stream], edx ; Stream
.text:0040210D                 mov     edx, [esp+3Ch+Buffer]
.text:00402111                 mov     [esp+3Ch+ElementCount], ecx ; ElementCount
.text:00402115                 mov     [esp+3Ch+File], edx ; Buffer
.text:00402118                 call    fwrite
.text:0040211D                 cmp     eax, [esp+3Ch+var_24]
.text:00402121                 jnz     loc_4021CF
.text:00402127                 mov     [esp+3Ch+var_24], 0
.text:0040212F                 jmp     loc_401DB9
.text:00402134 ; ---------------------------------------------------------------------------
.text:00402134
.text:00402134 loc_402134:                             ; CODE XREF: sub_401CA0+E6↑j
.text:00402134                 mov     [esp+3Ch+File], edx ; File
.text:00402137                 call    _filbuf
.text:0040213C                 mov     ebx, eax
.text:0040213E                 jmp     loc_401D94
.text:00402143 ; ---------------------------------------------------------------------------
.text:00402143
.text:00402143 loc_402143:                             ; CODE XREF: sub_401CA0+95↑j
.text:00402143                 mov     [esp+3Ch+File], offset aStandardInputI ; "standard input is closed"
.text:0040214A                 call    ds:libintl_gettext
.text:00402150                 mov     [esp+3Ch+ElementSize], 0 ; ErrorMessage
.text:00402158                 mov     [esp+3Ch+File], 1 ; Code
.text:0040215F                 mov     [esp+3Ch+ElementCount], eax ; char *
.text:00402163                 call    sub_405370
.text:00402168                 jmp     loc_401D3B
.text:00402168 ; ---------------------------------------------------------------------------
.text:0040216D                 align 10h
.text:00402170
.text:00402170 loc_402170:                             ; CODE XREF: sub_401CA0+66↑j
.text:00402170                 mov     [esp+3Ch+ElementSize], offset aR ; "r"
.text:00402178                 mov     [esp+3Ch+File], ebx ; FileName
.text:0040217B                 call    fopen
.text:00402180                 mov     edi, [esp+3Ch+Block]
.text:00402184                 test    eax, eax
.text:00402186                 mov     [edi+ebp*4], eax
.text:00402189                 jz      short loc_4021A0
.text:0040218B                 mov     ecx, [eax+10h]
.text:0040218E                 test    ecx, ecx
.text:00402190                 jnz     loc_401D20
.text:00402196                 mov     [esp+3Ch+var_1D], 1
.text:0040219B                 jmp     loc_401D20
.text:004021A0 ; ---------------------------------------------------------------------------
.text:004021A0
.text:004021A0 loc_4021A0:                             ; CODE XREF: sub_401CA0+4E9↑j
.text:004021A0                 call    _errno
.text:004021A5                 mov     esi, [esp+3Ch+arg_4]
.text:004021A9                 mov     ebx, [esi+ebp*4]
.text:004021AC                 mov     [esp+3Ch+ElementCount], offset byte_401C69 ; char *
.text:004021B4                 mov     [esp+3Ch+Stream], ebx ; char
.text:004021B8                 mov     edx, [eax]
.text:004021BA                 mov     [esp+3Ch+File], 1 ; Code
.text:004021C1                 mov     [esp+3Ch+ElementSize], edx ; ErrorMessage
.text:004021C5                 call    sub_405370
.text:004021CA                 jmp     loc_401D20
.text:004021CF ; ---------------------------------------------------------------------------
.text:004021CF
.text:004021CF loc_4021CF:                             ; CODE XREF: sub_401CA0+18F↑j
.text:004021CF                                         ; sub_401CA0+29E↑j ...
.text:004021CF                 mov     [esp+3Ch+File], offset aWriteError ; "write error"
.text:004021D6                 call    ds:libintl_gettext
.text:004021DC                 mov     edi, eax
.text:004021DE                 call    _errno
.text:004021E3                 mov     [esp+3Ch+ElementCount], edi ; char *
.text:004021E7                 mov     ebp, [eax]
.text:004021E9                 mov     [esp+3Ch+File], 1 ; Code
.text:004021F0                 mov     [esp+3Ch+ElementSize], ebp ; ErrorMessage
.text:004021F4                 call    sub_405370
.text:004021F9                 call    abort
.text:004021F9 sub_401CA0      endp
.text:004021F9
.text:004021F9 ; ---------------------------------------------------------------------------
.text:004021FE                 align 10h
.text:00402200
.text:00402200 ; =============== S U B R O U T I N E =======================================
.text:00402200
.text:00402200
.text:00402200 sub_402200      proc near               ; CODE XREF: sub_401670+307↑p
.text:00402200
.text:00402200 Stream          = dword ptr -2Ch
.text:00402200 File            = dword ptr -28h
.text:00402200 var_24          = dword ptr -24h
.text:00402200 var_20          = byte ptr -20h
.text:00402200 var_11          = byte ptr -11h
.text:00402200 arg_0           = dword ptr  4
.text:00402200 arg_4           = dword ptr  8
.text:00402200
.text:00402200                 push    ebp
.text:00402201                 push    edi
.text:00402202                 push    esi
.text:00402203                 push    ebx
.text:00402204                 sub     esp, 1Ch
.text:00402207                 mov     eax, [esp+2Ch+arg_0]
.text:0040220B                 mov     [esp+2Ch+var_11], 1
.text:00402210                 test    eax, eax
.text:00402212                 jz      loc_4023BB
.text:00402218
.text:00402218 loc_402218:                             ; CODE XREF: sub_402200+1B5↓j
.text:00402218                 cld
.text:00402219                 mov     edx, [esp+2Ch+arg_4]
.text:0040221D                 mov     ecx, 2
.text:00402222                 mov     edi, offset asc_401663 ; "-"
.text:00402227                 mov     ebx, [edx]
.text:00402229                 mov     esi, ebx
.text:0040222B                 repe cmpsb
.text:0040222D                 jnz     loc_402491
.text:00402233                 mov     ds:byte_407000, 1
.text:0040223A                 mov     esi, ds:_iob
.text:00402240
.text:00402240 loc_402240:                             ; CODE XREF: sub_402200+2A5↓j
.text:00402240                 mov     ecx, [esi+4]
.text:00402243                 mov     ebp, ds:Block
.text:00402249                 dec     ecx
.text:0040224A                 mov     [esi+4], ecx
.text:0040224D                 test    ecx, ecx
.text:0040224F                 js      loc_402482
.text:00402255                 mov     edi, [esi]
.text:00402257                 movzx   ebx, byte ptr [edi]
.text:0040225A                 inc     edi
.text:0040225B                 mov     [esi], edi
.text:0040225D
.text:0040225D loc_40225D:                             ; CODE XREF: sub_402200+28C↓j
.text:0040225D                 call    _errno
.text:00402262                 cmp     ebx, 0FFFFFFFFh
.text:00402265                 mov     edi, [eax]
.text:00402267                 jz      loc_40236A
.text:0040226D                 lea     esi, [esi+0]
.text:00402270
.text:00402270 loc_402270:                             ; CODE XREF: sub_402200+B7↓j
.text:00402270                 mov     edi, [esi+4]
.text:00402273                 dec     edi
.text:00402274                 test    edi, edi
.text:00402276                 mov     [esi+4], edi
.text:00402279                 js      loc_402473
.text:0040227F                 mov     ecx, [esi]
.text:00402281                 movzx   edi, byte ptr [ecx]
.text:00402284                 inc     ecx
.text:00402285                 mov     [esi], ecx
.text:00402287
.text:00402287 loc_402287:                             ; CODE XREF: sub_402200+27D↓j
.text:00402287                 cmp     edi, 0FFFFFFFFh
.text:0040228A                 jz      loc_402340
.text:00402290                 cmp     ebx, 0Ah
.text:00402293                 jz      short loc_4022E0
.text:00402295                 mov     eax, ds:_iob
.text:0040229A                 mov     cl, bl
.text:0040229C                 mov     edx, [eax+24h]
.text:0040229F                 dec     edx
.text:004022A0                 test    edx, edx
.text:004022A2                 mov     [eax+24h], edx
.text:004022A5                 js      short loc_4022B9
.text:004022A7                 mov     ecx, ds:_iob
.text:004022AD                 mov     eax, [ecx+20h]
.text:004022B0                 mov     [eax], bl
.text:004022B2                 inc     dword ptr [ecx+20h]
.text:004022B5
.text:004022B5 loc_4022B5:                             ; CODE XREF: sub_402200+D3↓j
.text:004022B5                                         ; sub_402200+10E↓j ...
.text:004022B5                 mov     ebx, edi
.text:004022B7                 jmp     short loc_402270
.text:004022B9 ; ---------------------------------------------------------------------------
.text:004022B9
.text:004022B9 loc_4022B9:                             ; CODE XREF: sub_402200+A5↑j
.text:004022B9                 mov     ebx, ds:_iob
.text:004022BF                 movsx   edx, cl
.text:004022C2                 mov     [esp+2Ch+Stream], edx ; Ch
.text:004022C5                 add     ebx, 20h ; ' '
.text:004022C8                 mov     [esp+2Ch+File], ebx ; File
.text:004022CC                 call    _flsbuf
.text:004022D1                 test    eax, eax
.text:004022D3                 jns     short loc_4022B5
.text:004022D5                 jmp     loc_4024B0
.text:004022D5 ; ---------------------------------------------------------------------------
.text:004022DA                 align 10h
.text:004022E0
.text:004022E0 loc_4022E0:                             ; CODE XREF: sub_402200+93↑j
.text:004022E0                 movzx   ecx, byte ptr [ebp+0]
.text:004022E4                 test    cl, cl
.text:004022E6                 jz      short loc_402307
.text:004022E8                 mov     edx, ds:_iob
.text:004022EE                 mov     ebx, [edx+24h]
.text:004022F1                 dec     ebx
.text:004022F2                 mov     [edx+24h], ebx
.text:004022F5                 test    ebx, ebx
.text:004022F7                 js      short loc_402318
.text:004022F9                 mov     ebx, ds:_iob
.text:004022FF                 mov     eax, [ebx+20h]
.text:00402302                 mov     [eax], cl
.text:00402304                 inc     dword ptr [ebx+20h]
.text:00402307
.text:00402307 loc_402307:                             ; CODE XREF: sub_402200+E6↑j
.text:00402307                                         ; sub_402200+132↓j
.text:00402307                 inc     ebp
.text:00402308                 cmp     ebp, ds:dword_407030
.text:0040230E                 jnz     short loc_4022B5
.text:00402310                 mov     ebp, ds:Block
.text:00402316                 jmp     short loc_4022B5
.text:00402318 ; ---------------------------------------------------------------------------
.text:00402318
.text:00402318 loc_402318:                             ; CODE XREF: sub_402200+F7↑j
.text:00402318                 mov     ebx, ds:_iob
.text:0040231E                 movsx   edx, cl
.text:00402321                 mov     [esp+2Ch+Stream], edx ; Ch
.text:00402324                 add     ebx, 20h ; ' '
.text:00402327                 mov     [esp+2Ch+File], ebx ; File
.text:0040232B                 call    _flsbuf
.text:00402330                 test    eax, eax
.text:00402332                 jns     short loc_402307
.text:00402334                 jmp     loc_4024B0
.text:00402334 ; ---------------------------------------------------------------------------
.text:00402339                 align 10h
.text:00402340
.text:00402340 loc_402340:                             ; CODE XREF: sub_402200+8A↑j
.text:00402340                 call    _errno
.text:00402345                 mov     edx, ds:_iob
.text:0040234B                 mov     edi, [eax]
.text:0040234D                 mov     ebp, [edx+24h]
.text:00402350                 dec     ebp
.text:00402351                 test    ebp, ebp
.text:00402353                 mov     [edx+24h], ebp
.text:00402356                 js      loc_402451
.text:0040235C                 mov     ecx, ds:_iob
.text:00402362                 mov     eax, [ecx+20h]
.text:00402365                 mov     [eax], bl
.text:00402367                 inc     dword ptr [ecx+20h]
.text:0040236A
.text:0040236A loc_40236A:                             ; CODE XREF: sub_402200+67↑j
.text:0040236A                                         ; sub_402200+26B↓j
.text:0040236A                 cmp     ebx, 0Ah
.text:0040236D                 jz      short loc_402393
.text:0040236F                 mov     ecx, ds:_iob
.text:00402375                 mov     ebx, [ecx+24h]
.text:00402378                 dec     ebx
.text:00402379                 mov     [ecx+24h], ebx
.text:0040237C                 test    ebx, ebx
.text:0040237E                 js      loc_40242E
.text:00402384                 mov     ebp, ds:_iob
.text:0040238A                 mov     eax, [ebp+20h]
.text:0040238D                 mov     byte ptr [eax], 0Ah
.text:00402390                 inc     dword ptr [ebp+20h]
.text:00402393
.text:00402393 loc_402393:                             ; CODE XREF: sub_402200+16D↑j
.text:00402393                                         ; sub_402200+249↓j
.text:00402393                 test    byte ptr [esi+0Ch], 20h
.text:00402397                 jnz     short loc_402402
.text:00402399
.text:00402399 loc_402399:                             ; CODE XREF: sub_402200+229↓j
.text:00402399                 cmp     esi, ds:_iob
.text:0040239F                 jz      short loc_4023F8
.text:004023A1                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004023A4                 call    fclose
.text:004023A9                 inc     eax
.text:004023AA                 jz      short loc_4023C8
.text:004023AC
.text:004023AC loc_4023AC:                             ; CODE XREF: sub_402200+1F6↓j
.text:004023AC                                         ; sub_402200+200↓j
.text:004023AC                 add     [esp+2Ch+arg_4], 4
.text:004023B1                 dec     [esp+2Ch+arg_0]
.text:004023B5                 jnz     loc_402218
.text:004023BB
.text:004023BB loc_4023BB:                             ; CODE XREF: sub_402200+12↑j
.text:004023BB                 movzx   eax, [esp+2Ch+var_11]
.text:004023C0                 add     esp, 1Ch
.text:004023C3                 pop     ebx
.text:004023C4                 pop     esi
.text:004023C5                 pop     edi
.text:004023C6                 pop     ebp
.text:004023C7                 retn
.text:004023C8 ; ---------------------------------------------------------------------------
.text:004023C8
.text:004023C8 loc_4023C8:                             ; CODE XREF: sub_402200+1AA↑j
.text:004023C8                                         ; sub_402200+2AB↓j
.text:004023C8                 call    _errno
.text:004023CD                 mov     edx, [esp+2Ch+arg_4]
.text:004023D1                 mov     esi, [edx]
.text:004023D3                 mov     [esp+2Ch+var_24], offset byte_401C69 ; char *
.text:004023DB                 mov     dword ptr [esp+2Ch+var_20], esi ; char
.text:004023DF                 mov     ebp, [eax]
.text:004023E1                 mov     [esp+2Ch+Stream], 0 ; Code
.text:004023E8                 mov     [esp+2Ch+File], ebp ; ErrorMessage
.text:004023EC                 call    sub_405370
.text:004023F1                 mov     [esp+2Ch+var_11], 0
.text:004023F6                 jmp     short loc_4023AC
.text:004023F8 ; ---------------------------------------------------------------------------
.text:004023F8
.text:004023F8 loc_4023F8:                             ; CODE XREF: sub_402200+19F↑j
.text:004023F8                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004023FB                 call    clearerr
.text:00402400                 jmp     short loc_4023AC
.text:00402402 ; ---------------------------------------------------------------------------
.text:00402402
.text:00402402 loc_402402:                             ; CODE XREF: sub_402200+197↑j
.text:00402402                 mov     ecx, [esp+2Ch+arg_4]
.text:00402406                 mov     ebx, [ecx]
.text:00402408                 mov     [esp+2Ch+var_24], offset byte_401C69 ; char *
.text:00402410                 mov     [esp+2Ch+File], edi ; ErrorMessage
.text:00402414                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402418                 mov     [esp+2Ch+Stream], 0 ; Code
.text:0040241F                 call    sub_405370
.text:00402424                 mov     [esp+2Ch+var_11], 0
.text:00402429                 jmp     loc_402399
.text:0040242E ; ---------------------------------------------------------------------------
.text:0040242E
.text:0040242E loc_40242E:                             ; CODE XREF: sub_402200+17E↑j
.text:0040242E                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00402435                 mov     edx, ds:_iob
.text:0040243B                 add     edx, 20h ; ' '
.text:0040243E                 mov     [esp+2Ch+File], edx ; File
.text:00402442                 call    _flsbuf
.text:00402447                 test    eax, eax
.text:00402449                 jns     loc_402393
.text:0040244F                 jmp     short loc_4024B0
.text:00402451 ; ---------------------------------------------------------------------------
.text:00402451
.text:00402451 loc_402451:                             ; CODE XREF: sub_402200+156↑j
.text:00402451                 mov     edx, ds:_iob
.text:00402457                 movsx   ebp, bl
.text:0040245A                 mov     [esp+2Ch+Stream], ebp ; Ch
.text:0040245D                 add     edx, 20h ; ' '
.text:00402460                 mov     [esp+2Ch+File], edx ; File
.text:00402464                 call    _flsbuf
.text:00402469                 test    eax, eax
.text:0040246B                 jns     loc_40236A
.text:00402471                 jmp     short loc_4024B0
.text:00402473 ; ---------------------------------------------------------------------------
.text:00402473
.text:00402473 loc_402473:                             ; CODE XREF: sub_402200+79↑j
.text:00402473                 mov     [esp+2Ch+Stream], esi ; File
.text:00402476                 call    _filbuf
.text:0040247B                 mov     edi, eax
.text:0040247D                 jmp     loc_402287
.text:00402482 ; ---------------------------------------------------------------------------
.text:00402482
.text:00402482 loc_402482:                             ; CODE XREF: sub_402200+4F↑j
.text:00402482                 mov     [esp+2Ch+Stream], esi ; File
.text:00402485                 call    _filbuf
.text:0040248A                 mov     ebx, eax
.text:0040248C                 jmp     loc_40225D
.text:00402491 ; ---------------------------------------------------------------------------
.text:00402491
.text:00402491 loc_402491:                             ; CODE XREF: sub_402200+2D↑j
.text:00402491                 mov     [esp+2Ch+File], offset aR ; "r"
.text:00402499                 mov     [esp+2Ch+Stream], ebx ; FileName
.text:0040249C                 call    fopen
.text:004024A1                 test    eax, eax
.text:004024A3                 mov     esi, eax
.text:004024A5                 jnz     loc_402240
.text:004024AB                 jmp     loc_4023C8
.text:004024B0 ; ---------------------------------------------------------------------------
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: sub_402200+D5↑j
.text:004024B0                                         ; sub_402200+134↑j ...
.text:004024B0                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:004024B7                 call    ds:libintl_gettext
.text:004024BD                 mov     edi, eax
.text:004024BF                 call    _errno
.text:004024C4                 mov     [esp+2Ch+var_24], edi ; char *
.text:004024C8                 mov     esi, [eax]
.text:004024CA                 mov     [esp+2Ch+Stream], 1 ; Code
.text:004024D1                 mov     [esp+2Ch+File], esi ; ErrorMessage
.text:004024D5                 call    sub_405370
.text:004024DA                 call    abort
.text:004024DA sub_402200      endp
.text:004024DA
.text:004024DA ; ---------------------------------------------------------------------------
.text:004024DF                 align 10h
.text:004024E0
.text:004024E0 ; =============== S U B R O U T I N E =======================================
.text:004024E0
.text:004024E0
.text:004024E0 sub_4024E0      proc near               ; DATA XREF: sub_402660+1B4↓o
.text:004024E0                 sub     eax, 9090002Dh
.text:004024E5                 nop
.text:004024E6                 nop
.text:004024E7                 nop
.text:004024E8                 nop
.text:004024E9                 nop
.text:004024EA                 nop
.text:004024EB                 nop
.text:004024EC                 nop
.text:004024ED                 nop
.text:004024EE                 nop
.text:004024EF                 nop
.text:004024F0                 nop
.text:004024F1                 nop
.text:004024F2                 nop
.text:004024F3                 nop
.text:004024F4                 nop
.text:004024F5                 nop
.text:004024F6                 nop
.text:004024F7                 nop
.text:004024F8                 nop
.text:004024F9                 nop
.text:004024FA                 nop
.text:004024FB                 nop
.text:004024FC                 nop
.text:004024FD                 nop
.text:004024FE                 nop
.text:004024FF                 nop
.text:004024FF sub_4024E0      endp
.text:004024FF
.text:00402500
.text:00402500 ; =============== S U B R O U T I N E =======================================
.text:00402500
.text:00402500
.text:00402500 sub_402500      proc near               ; DATA XREF: sub_402660+3CC↓o
.text:00402500                 and     eax, 6F203A73h
.text:00402505                 jo      short loc_40257B
.text:00402507                 imul    ebp, [edi+6Eh], 63256020h
.text:0040250E                 and     eax, 64202773h
.text:00402513                 outsd
.text:00402514                 db      65h
.text:00402514                 jnb     short loc_402585
.text:00402517                 daa
.text:00402518                 jz      short loc_40253A
.text:0040251A                 popa
.text:0040251B                 insb
.text:0040251C                 insb
.text:0040251D                 outsd
.text:0040251E                 ja      short sub_402540
.text:00402520                 popa
.text:00402521                 outsb
.text:00402522                 and     [ecx+72h], ah
.text:00402525                 db      67h
.text:00402525                 jnz     near ptr loc_402594+1
.text:00402528                 outs    dx, byte ptr gs:[esi]
.text:0040252A                 jz      short loc_402536
.text:0040252C                 add     [eax-6F6F6F70h], dl
.text:00402532                 nop
.text:00402533                 nop
.text:00402534                 nop
.text:00402535                 nop
.text:00402536
.text:00402536 loc_402536:                             ; CODE XREF: sub_402500+2A↑j
.text:00402536                 nop
.text:00402537                 nop
.text:00402538                 nop
.text:00402539                 nop
.text:0040253A
.text:0040253A loc_40253A:                             ; CODE XREF: sub_402500+18↑j
.text:0040253A                 nop
.text:0040253B                 nop
.text:0040253C                 nop
.text:0040253D                 nop
.text:0040253E                 nop
.text:0040253F                 nop
.text:0040253F sub_402500      endp ; sp-analysis failed
.text:0040253F
.text:00402540
.text:00402540 ; =============== S U B R O U T I N E =======================================
.text:00402540
.text:00402540
.text:00402540 sub_402540      proc near               ; CODE XREF: sub_402500+1E↑j
.text:00402540                                         ; DATA XREF: sub_402660:loc_402A92↓o
.text:00402540                 and     eax, 6F203A73h
.text:00402545                 jo      short loc_4025BB
.text:00402547                 imul    ebp, [edi+6Eh], 2D2D6020h
.text:0040254E                 and     eax, 64202773h
.text:00402553                 outsd
.text:00402554                 db      65h
.text:00402554                 jnb     short loc_4025C5
.text:00402557                 daa
.text:00402558                 jz      short loc_40257A
.text:0040255A                 popa
.text:0040255B                 insb
.text:0040255C                 insb
.text:0040255D                 outsd
.text:0040255E                 ja      short sub_402580
.text:00402560                 popa
.text:00402561                 outsb
.text:00402562                 and     [ecx+72h], ah
.text:00402565                 db      67h
.text:00402565                 jnz     loc_4025D5
.text:00402568                 outs    dx, byte ptr gs:[esi]
.text:0040256A                 jz      short loc_402576
.text:0040256C                 add     [eax-6F6F6F70h], dl
.text:00402572                 nop
.text:00402573                 nop
.text:00402574                 nop
.text:00402575                 nop
.text:00402576
.text:00402576 loc_402576:                             ; CODE XREF: sub_402540+2A↑j
.text:00402576                 nop
.text:00402577                 nop
.text:00402578                 nop
.text:00402579                 nop
.text:0040257A
.text:0040257A loc_40257A:                             ; CODE XREF: sub_402540+18↑j
.text:0040257A                 nop
.text:0040257B
.text:0040257B loc_40257B:                             ; CODE XREF: sub_402500+5↑j
.text:0040257B                 nop
.text:0040257C                 nop
.text:0040257D                 nop
.text:0040257E                 nop
.text:0040257F                 nop
.text:0040257F sub_402540      endp ; sp-analysis failed
.text:0040257F
.text:00402580
.text:00402580 ; =============== S U B R O U T I N E =======================================
.text:00402580
.text:00402580
.text:00402580 sub_402580      proc near               ; CODE XREF: sub_402540+1E↑j
.text:00402580                                         ; DATA XREF: sub_402660:loc_402B30↓o ...
.text:00402580                 and     eax, 6F203A73h
.text:00402585
.text:00402585 loc_402585:                             ; CODE XREF: sub_402500+14↑j
.text:00402585                 jo      short loc_4025FB
.text:00402587                 imul    ebp, [edi+6Eh], 73256020h
.text:0040258E                 daa
.text:0040258F                 and     [edx+65h], dh
.text:00402592                 jno     short near ptr loc_402608+1
.text:00402594
.text:00402594 loc_402594:                             ; CODE XREF: sub_402500+25↑j
.text:00402594                 imul    esi, [edx+65h], 6E612073h
.text:0040259B                 and     [ecx+72h], ah
.text:0040259E                 db      67h
.text:0040259E                 jnz     near ptr loc_40260C+2
.text:004025A1                 outs    dx, byte ptr gs:[esi]
.text:004025A3                 jz      short loc_4025AF
.text:004025A5                 add     [eax-6F6F6F70h], dl
.text:004025AB                 nop
.text:004025AC                 nop
.text:004025AD                 nop
.text:004025AE                 nop
.text:004025AF
.text:004025AF loc_4025AF:                             ; CODE XREF: sub_402580+23↑j
.text:004025AF                 nop
.text:004025B0                 nop
.text:004025B1                 nop
.text:004025B2                 nop
.text:004025B3                 nop
.text:004025B4                 nop
.text:004025B5                 nop
.text:004025B6                 nop
.text:004025B7                 nop
.text:004025B8                 nop
.text:004025B9                 nop
.text:004025BA                 nop
.text:004025BB
.text:004025BB loc_4025BB:                             ; CODE XREF: sub_402540+5↑j
.text:004025BB                 nop
.text:004025BC                 nop
.text:004025BD                 nop
.text:004025BE                 nop
.text:004025BF                 nop
.text:004025BF sub_402580      endp
.text:004025BF
.text:004025C0
.text:004025C0 ; =============== S U B R O U T I N E =======================================
.text:004025C0
.text:004025C0
.text:004025C0 sub_4025C0      proc near               ; DATA XREF: sub_402660+55E↓o
.text:004025C0                 and     eax, 75203A73h
.text:004025C5
.text:004025C5 loc_4025C5:                             ; CODE XREF: sub_402540+14↑j
.text:004025C5                 outsb
.text:004025C6                 jb      short near ptr loc_402627+6
.text:004025C8                 arpl    [edi+67h], bp
.text:004025CB                 outsb
.text:004025CC                 imul    edi, [edx+65h], 706F2064h
.text:004025D3                 jz      short loc_40263E
.text:004025D5
.text:004025D5 loc_4025D5:                             ; CODE XREF: sub_402540+25↑j
.text:004025D5                 outsd
.text:004025D6                 outsb
.text:004025D7                 and     [eax+25h], ah
.text:004025DA                 arpl    ds:0A2773h, sp
.text:004025E0
.text:004025E0 loc_4025E0:                             ; DATA XREF: sub_402660:loc_402C01↓o
.text:004025E0                 add     [eax-6F6F6F70h], dl
.text:004025E6                 nop
.text:004025E7                 nop
.text:004025E8                 nop
.text:004025E9                 nop
.text:004025EA                 nop
.text:004025EB                 nop
.text:004025EC                 nop
.text:004025ED                 nop
.text:004025EE                 nop
.text:004025EF                 nop
.text:004025F0                 nop
.text:004025F1                 nop
.text:004025F2                 nop
.text:004025F3                 nop
.text:004025F4                 nop
.text:004025F5                 nop
.text:004025F6                 nop
.text:004025F7                 nop
.text:004025F8                 nop
.text:004025F9                 nop
.text:004025FA                 nop
.text:004025FB
.text:004025FB loc_4025FB:                             ; CODE XREF: sub_402580:loc_402585↑j
.text:004025FB                 nop
.text:004025FC                 nop
.text:004025FD                 nop
.text:004025FE                 nop
.text:004025FF                 nop
.text:004025FF sub_4025C0      endp
.text:004025FF
.text:00402600
.text:00402600 ; =============== S U B R O U T I N E =======================================
.text:00402600
.text:00402600
.text:00402600 sub_402600      proc near               ; DATA XREF: sub_402660:loc_402C1A↓o
.text:00402600                 and     eax, 75203A73h
.text:00402605                 outsb
.text:00402606                 jb      short near ptr loc_402667+6
.text:00402608
.text:00402608 loc_402608:                             ; CODE XREF: sub_402580+12↑j
.text:00402608                 arpl    [edi+67h], bp
.text:0040260B                 outsb
.text:0040260C
.text:0040260C loc_40260C:                             ; CODE XREF: sub_402580+1E↑j
.text:0040260C                 imul    edi, [edx+65h], 706F2064h
.text:00402613                 jz      short loc_40267E
.text:00402615                 outsd
.text:00402616                 outsb
.text:00402617                 and     [eax+2Dh], ah
.text:0040261A                 sub     eax, 0A277325h
.text:0040261F                 add     ds:6F203A73h, ah
.text:00402625                 jo      short loc_40269B
.text:00402627
.text:00402627 loc_402627:                             ; CODE XREF: sub_4025C0+6↑j
.text:00402627                 imul    ebp, [edi+6Eh], 71657220h
.text:0040262E                 jnz     short loc_402699
.text:00402630                 jb      short loc_402697
.text:00402632                 jnb     short loc_402654
.text:00402634                 popa
.text:00402635                 outsb
.text:00402636                 and     [ecx+72h], ah
.text:00402639                 db      67h
.text:00402639                 jnz     near ptr loc_4026A7+2
.text:0040263C                 outs    dx, byte ptr gs:[esi]
.text:0040263E
.text:0040263E loc_40263E:                             ; CODE XREF: sub_4025C0+13↑j
.text:0040263E                 jz      short sub_402660
.text:00402640                 sub     eax, 6325202Dh
.text:00402645                 or      al, [eax]
.text:00402647                 nop
.text:00402648                 nop
.text:00402649                 nop
.text:0040264A                 nop
.text:0040264B                 nop
.text:0040264C                 nop
.text:0040264D                 nop
.text:0040264E                 nop
.text:0040264F                 nop
.text:00402650                 nop
.text:00402651                 nop
.text:00402652                 nop
.text:00402653                 nop
.text:00402654
.text:00402654 loc_402654:                             ; CODE XREF: sub_402600+32↑j
.text:00402654                 nop
.text:00402655                 nop
.text:00402656                 nop
.text:00402657                 nop
.text:00402658                 nop
.text:00402659                 nop
.text:0040265A                 nop
.text:0040265B                 nop
.text:0040265C                 nop
.text:0040265D                 nop
.text:0040265E                 nop
.text:0040265F                 nop
.text:0040265F sub_402600      endp ; sp-analysis failed
.text:0040265F
.text:00402660
.text:00402660 ; =============== S U B R O U T I N E =======================================
.text:00402660
.text:00402660
.text:00402660 ; int __cdecl sub_402660(char *Str2, size_t MaxCount, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char *Str, int, int, int, int)
.text:00402660 sub_402660      proc near               ; CODE XREF: sub_402600:loc_40263E↑j
.text:00402660                                         ; DATA XREF: sub_402660:loc_402E73↓o
.text:00402660
.text:00402660 Str2            = dword ptr  4
.text:00402660 MaxCount        = dword ptr  8
.text:00402660 arg_8           = dword ptr  0Ch
.text:00402660 arg_C           = dword ptr  10h
.text:00402660 arg_1C          = dword ptr  20h
.text:00402660 arg_20          = dword ptr  24h
.text:00402660 arg_24          = dword ptr  28h
.text:00402660 arg_28          = dword ptr  2Ch
.text:00402660 arg_2C          = dword ptr  30h
.text:00402660 arg_30          = dword ptr  34h
.text:00402660 arg_34          = dword ptr  38h
.text:00402660 arg_38          = dword ptr  3Ch
.text:00402660 arg_3C          = dword ptr  40h
.text:00402660 arg_40          = dword ptr  44h
.text:00402660 arg_44          = dword ptr  48h
.text:00402660 arg_5C          = dword ptr  60h
.text:00402660 arg_60          = dword ptr  64h
.text:00402660 Str             = dword ptr  68h
.text:00402660 arg_68          = dword ptr  6Ch
.text:00402660 arg_6C          = dword ptr  70h
.text:00402660 arg_70          = dword ptr  74h
.text:00402660 arg_74          = dword ptr  78h
.text:00402660
.text:00402660 ; FUNCTION CHUNK AT .text:004026DB SIZE 00000053 BYTES
.text:00402660 ; FUNCTION CHUNK AT .text:00402744 SIZE 0000014B BYTES
.text:00402660 ; FUNCTION CHUNK AT .text:00402890 SIZE 0000023A BYTES
.text:00402660 ; FUNCTION CHUNK AT .text:00402AD0 SIZE 00000099 BYTES
.text:00402660 ; FUNCTION CHUNK AT .text:00402B70 SIZE 000000DF BYTES
.text:00402660 ; FUNCTION CHUNK AT .text:00402C50 SIZE 0000025B BYTES
.text:00402660 ; FUNCTION CHUNK AT .text:00402EB0 SIZE 000001AE BYTES
.text:00402660 ; FUNCTION CHUNK AT .text:00403060 SIZE 000000F9 BYTES
.text:00402660 ; FUNCTION CHUNK AT .text:00403160 SIZE 000000CE BYTES
.text:00402660 ; FUNCTION CHUNK AT .text:00403230 SIZE 0000003A BYTES
.text:00402660 ; FUNCTION CHUNK AT .text:00403270 SIZE 0000000B BYTES
.text:00402660 ; FUNCTION CHUNK AT .text:00403280 SIZE 00000019 BYTES
.text:00402660 ; FUNCTION CHUNK AT .text:004032A0 SIZE 00000011 BYTES
.text:00402660
.text:00402660                 and     eax, 6F203A73h
.text:00402665                 jo      short loc_4026DB
.text:00402667
.text:00402667 loc_402667:                             ; CODE XREF: sub_402600+6↑j
.text:00402667                 imul    ebp, [edi+6Eh], 572D6020h
.text:0040266E                 and     ds:64202773h, ah
.text:00402674                 outsd
.text:00402675                 db      65h
.text:00402675                 jnb     short near ptr loc_4026E4+2
.text:00402678                 daa
.text:00402679                 jz      short loc_40269B
.text:0040267B                 popa
.text:0040267C                 insb
.text:0040267D                 insb
.text:0040267E
.text:0040267E loc_40267E:                             ; CODE XREF: sub_402600+13↑j
.text:0040267E                 outsd
.text:0040267F                 ja      short near ptr sub_4026A0+1
.text:00402681                 popa
.text:00402682                 outsb
.text:00402683                 and     [ecx+72h], ah
.text:00402686                 db      67h
.text:00402686                 jnz     near ptr loc_4026F5+1
.text:00402689                 outs    dx, byte ptr gs:[esi]
.text:0040268B                 jz      short loc_402697
.text:0040268D                 add     [eax-6F6F6F70h], dl
.text:00402693                 nop
.text:00402694                 nop
.text:00402695                 nop
.text:00402696                 nop
.text:00402697
.text:00402697 loc_402697:                             ; CODE XREF: sub_402600+30↑j
.text:00402697                                         ; sub_402660+2B↑j
.text:00402697                 nop
.text:00402698                 nop
.text:00402699
.text:00402699 loc_402699:                             ; CODE XREF: sub_402600+2E↑j
.text:00402699                 nop
.text:0040269A                 nop
.text:0040269B
.text:0040269B loc_40269B:                             ; CODE XREF: sub_402600+25↑j
.text:0040269B                                         ; sub_402660+19↑j
.text:0040269B                 nop
.text:0040269C                 nop
.text:0040269D                 nop
.text:0040269E                 nop
.text:0040269F                 nop
.text:0040269F sub_402660      endp ; sp-analysis failed
.text:0040269F
.text:004026A0
.text:004026A0 ; =============== S U B R O U T I N E =======================================
.text:004026A0
.text:004026A0
.text:004026A0 sub_4026A0      proc near               ; CODE XREF: sub_402660+1F↑j
.text:004026A0                                         ; DATA XREF: sub_402660:loc_402F5F↓o
.text:004026A0
.text:004026A0 arg_A4          = dword ptr  0A8h
.text:004026A0 arg_B8          = dword ptr  0BCh
.text:004026A0
.text:004026A0 ; FUNCTION CHUNK AT .text:0040273A SIZE 0000000A BYTES
.text:004026A0
.text:004026A0                 and     eax, 6F203A73h
.text:004026A5                 jo      short loc_40271B
.text:004026A7
.text:004026A7 loc_4026A7:                             ; CODE XREF: sub_402600+39↑j
.text:004026A7                 imul    ebp, [edi+6Eh], 572D6020h
.text:004026AE                 and     ds:69202773h, ah
.text:004026B4                 jnb     short near ptr loc_4026D3+3
.text:004026B6                 popa
.text:004026B7                 insd
.text:004026B8                 bound   ebp, [ecx+67h]
.text:004026BB                 jnz     short near ptr loc_402728+4
.text:004026BD                 jnz     short near ptr loc_402731+1
.text:004026BF                 or      al, [eax]
.text:004026C1
.text:004026C1 loc_4026C1:                             ; DATA XREF: sub_402660+A0F↓o
.text:004026C1                 and     eax, 69203A73h
.text:004026C6                 insb
.text:004026C7                 insb
.text:004026C8                 db      65h, 67h
.text:004026C8                 popa
.text:004026CB                 insb
.text:004026CC                 and     [edi+70h], ch
.text:004026CF                 jz      short loc_40273A
.text:004026D1                 outsd
.text:004026D2                 outsb
.text:004026D3
.text:004026D3 loc_4026D3:                             ; CODE XREF: sub_4026A0+14↑j
.text:004026D3                 and     ds:6325202Dh, ch
.text:004026D9                 or      al, [eax]
.text:004026D9 sub_4026A0      endp ; sp-analysis failed
.text:004026D9
.text:004026DB ; START OF FUNCTION CHUNK FOR sub_402660
.text:004026DB
.text:004026DB loc_4026DB:                             ; CODE XREF: sub_402660+5↑j
.text:004026DB                                         ; DATA XREF: sub_402660:loc_4030A7↓o
.text:004026DB                 and     eax, 69203A73h
.text:004026E0                 outsb
.text:004026E1                 jbe     short loc_402744
.text:004026E3                 insb
.text:004026E4
.text:004026E4 loc_4026E4:                             ; CODE XREF: sub_402660+15↑j
.text:004026E4                 imul    esp, [eax+6Fh], 6F697470h
.text:004026EC                 outsb
.text:004026ED                 and     ds:6325202Dh, ch
.text:004026F3                 or      al, [eax]
.text:004026F5
.text:004026F5 loc_4026F5:                             ; CODE XREF: sub_402660+26↑j
.text:004026F5                                         ; DATA XREF: sub_402660:loc_4030CE↓o
.text:004026F5                 and     eax, 6F203A73h
.text:004026FA                 jo      short near ptr loc_40276F+1
.text:004026FC                 imul    ebp, [edi+6Eh], 73256020h
.text:00402703                 daa
.text:00402704                 and     [ecx+73h], ch
.text:00402707                 and     [ecx+6Dh], ah
.text:0040270A                 bound   ebp, [ecx+67h]
.text:0040270D                 jnz     short near ptr loc_40277C+2
.text:0040270F                 jnz     short near ptr loc_402783+1
.text:00402711                 or      al, [eax]
.text:00402713
.text:00402713 loc_402713:                             ; DATA XREF: sub_402660:loc_403280↓o
.text:00402713                 push    eax
.text:00402714                 dec     edi
.text:00402715                 push    ebx
.text:00402716                 dec     ecx
.text:00402717                 pop     eax
.text:00402718                 dec     esp
.text:00402719                 pop     ecx
.text:0040271A                 pop     edi
.text:0040271B
.text:0040271B loc_40271B:                             ; CODE XREF: sub_4026A0+5↑j
.text:0040271B                 inc     ebx
.text:0040271C                 dec     edi
.text:0040271D                 push    edx
.text:0040271E                 push    edx
.text:0040271F                 inc     ebp
.text:00402720                 inc     ebx
.text:00402721                 push    esp
.text:00402722                 add     [ebp+0B6h], cl
.text:00402728
.text:00402728 loc_402728:                             ; CODE XREF: sub_4026A0+1B↑j
.text:00402728                 add     [ebp+27BCh], cl
.text:00402728 ; END OF FUNCTION CHUNK FOR sub_402660
.text:00402728 ; ---------------------------------------------------------------------------
.text:0040272E                 dw 0
.text:00402730 ; ---------------------------------------------------------------------------
.text:00402730
.text:00402730 loc_402730:                             ; CODE XREF: sub_4032C0+5A↓p
.text:00402730                                         ; .text:004033AA↓p ...
.text:00402730                 push    ebp
.text:00402731
.text:00402731 loc_402731:                             ; CODE XREF: sub_4026A0+1D↑j
.text:00402731                 mov     eax, 0FFFFFFFFh
.text:00402736                 push    edi
.text:00402737                 push    esi
.text:00402738                 push    ebx
.text:00402738 ; ---------------------------------------------------------------------------
.text:00402739                 db 83h
.text:0040273A ; ---------------------------------------------------------------------------
.text:0040273A ; START OF FUNCTION CHUNK FOR sub_4026A0
.text:0040273A
.text:0040273A loc_40273A:                             ; CODE XREF: sub_4026A0+2F↑j
.text:0040273A                 in      al, dx
.text:0040273B                 dec     esp
.text:0040273C                 mov     esi, [esp-40h+arg_A4]
.text:00402740                 mov     ebp, [esp-40h+arg_B8]
.text:00402740 ; END OF FUNCTION CHUNK FOR sub_4026A0
.text:00402744 ; START OF FUNCTION CHUNK FOR sub_402660
.text:00402744
.text:00402744 loc_402744:                             ; CODE XREF: sub_402660+81↑j
.text:00402744                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402747                 mov     ebx, [ebp+4]
.text:0040274A                 setz    dl
.text:0040274D                 movzx   ecx, dl
.text:00402750                 dec     ecx
.text:00402751                 and     ecx, ebx
.text:00402753                 mov     [esp+arg_44], ecx
.text:00402757                 mov     ecx, [esp+arg_5C]
.text:0040275B                 test    ecx, ecx
.text:0040275D                 jle     loc_402887
.text:00402763                 mov     dword ptr [ebp+0Ch], 0
.text:0040276A                 mov     ebx, [ebp+0]
.text:0040276D                 test    ebx, ebx
.text:0040276F
.text:0040276F loc_40276F:                             ; CODE XREF: sub_402660+9A↑j
.text:0040276F                 jz      loc_4032A0
.text:00402775                 mov     edi, [ebp+10h]
.text:00402778                 test    edi, edi
.text:0040277A                 jnz     short loc_4027D3
.text:0040277C
.text:0040277C loc_40277C:                             ; CODE XREF: sub_402660+AD↑j
.text:0040277C                 lea     esi, [esi+0]
.text:00402780
.text:00402780 loc_402780:                             ; CODE XREF: sub_402660+C4C↓j
.text:00402780                 mov     [ebp+24h], ebx
.text:00402783
.text:00402783 loc_402783:                             ; CODE XREF: sub_402660+AF↑j
.text:00402783                 mov     esi, [esp+Str]
.text:00402787                 mov     [ebp+20h], ebx
.text:0040278A                 mov     ecx, [esp+arg_74]
.text:0040278E                 xor     ebx, ebx
.text:00402790                 mov     dword ptr [ebp+14h], 0
.text:00402797                 test    ecx, ecx
.text:00402799                 jz      loc_403280
.text:0040279F
.text:0040279F loc_40279F:                             ; CODE XREF: sub_402660+C34↓j
.text:0040279F                 mov     ebx, 1
.text:004027A4
.text:004027A4 loc_4027A4:                             ; CODE XREF: sub_402660+C2E↓j
.text:004027A4                 mov     [ebp+1Ch], ebx
.text:004027A7                 mov     ecx, [esp+Str]
.text:004027AB                 movzx   eax, byte ptr [ecx]
.text:004027AE                 cmp     al, 2Dh ; '-'
.text:004027B0                 jz      loc_403270
.text:004027B6                 cmp     al, 2Bh ; '+'
.text:004027B8                 jz      loc_403259
.text:004027BE                 xor     edx, edx
.text:004027C0                 test    ebx, ebx
.text:004027C2                 setz    dl
.text:004027C5                 mov     [ebp+18h], edx
.text:004027C8
.text:004027C8 loc_4027C8:                             ; CODE XREF: sub_402660+C05↓j
.text:004027C8                 mov     [esp+Str], esi
.text:004027CC                 mov     dword ptr [ebp+10h], 1
.text:004027D3
.text:004027D3 loc_4027D3:                             ; CODE XREF: sub_402660+11A↑j
.text:004027D3                 mov     eax, [ebp+14h]
.text:004027D6                 test    eax, eax
.text:004027D8                 jz      short loc_4027E3
.text:004027DA                 cmp     byte ptr [eax], 0
.text:004027DD                 jnz     loc_4028C0
.text:004027E3
.text:004027E3 loc_4027E3:                             ; CODE XREF: sub_402660+178↑j
.text:004027E3                 mov     ebx, [ebp+0]
.text:004027E6                 cmp     [ebp+24h], ebx
.text:004027E9                 jle     short loc_4027EE
.text:004027EB                 mov     [ebp+24h], ebx
.text:004027EE
.text:004027EE loc_4027EE:                             ; CODE XREF: sub_402660+189↑j
.text:004027EE                 cmp     [ebp+20h], ebx
.text:004027F1                 jle     short loc_4027F6
.text:004027F3                 mov     [ebp+20h], ebx
.text:004027F6
.text:004027F6 loc_4027F6:                             ; CODE XREF: sub_402660+191↑j
.text:004027F6                 cmp     dword ptr [ebp+18h], 1
.text:004027FA                 jz      loc_4031D0
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_402660+BE3↓j
.text:00402800                 cmp     ebx, [esp+arg_5C]
.text:00402804                 jz      loc_4031B4
.text:0040280A                 cld
.text:0040280B                 mov     ecx, [esp+arg_60]
.text:0040280F                 mov     edx, 3
.text:00402814                 mov     edi, offset sub_4024E0
.text:00402819                 mov     esi, [ecx+ebx*4]
.text:0040281C                 mov     ecx, edx
.text:0040281E                 repe cmpsb
.text:00402820                 jnz     short loc_40285C
.text:00402822                 mov     edx, [ebp+24h]
.text:00402825                 lea     eax, [ebx+1]
.text:00402828                 cmp     [ebp+20h], edx
.text:0040282B                 mov     [ebp+0], eax
.text:0040282E                 jz      loc_4031C8
.text:00402834                 cmp     edx, eax
.text:00402836                 jz      short loc_402850
.text:00402838                 mov     [esp+Str2], ebp
.text:0040283C                 mov     ebx, [esp+arg_60]
.text:00402840                 mov     [esp+0], ebx
.text:00402843                 call    sub_4033E0
.text:00402848                 nop
.text:00402849                 lea     esi, [esi+0]
.text:00402850
.text:00402850 loc_402850:                             ; CODE XREF: sub_402660+1D6↑j
.text:00402850                                         ; sub_402660+B6B↓j
.text:00402850                 mov     eax, [esp+arg_5C]
.text:00402854                 mov     ebx, eax
.text:00402856                 mov     [ebp+24h], eax
.text:00402859                 mov     [ebp+0], eax
.text:0040285C
.text:0040285C loc_40285C:                             ; CODE XREF: sub_402660+1C0↑j
.text:0040285C                 cmp     ebx, [esp+arg_5C]
.text:00402860                 jz      loc_4031B4
.text:00402866                 mov     esi, [esp+arg_60]
.text:0040286A                 mov     eax, [esi+ebx*4]
.text:0040286D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402870                 jz      short loc_402897
.text:00402872
.text:00402872 loc_402872:                             ; CODE XREF: sub_402660+23D↓j
.text:00402872                 mov     edx, [ebp+18h]
.text:00402875                 test    edx, edx
.text:00402877                 jz      short loc_402890
.text:00402879                 mov     [ebp+0Ch], eax
.text:0040287C                 lea     edi, [ebx+1]
.text:0040287F                 mov     eax, 1
.text:00402884                 mov     [ebp+0], edi
.text:00402887
.text:00402887 loc_402887:                             ; CODE XREF: sub_402660+FD↑j
.text:00402887                                         ; sub_402660+235↓j ...
.text:00402887                 add     esp, 4Ch
.text:0040288A                 pop     ebx
.text:0040288B                 pop     esi
.text:0040288C                 pop     edi
.text:0040288D                 pop     ebp
.text:0040288E                 retn
.text:0040288E ; END OF FUNCTION CHUNK FOR sub_402660
.text:0040288E ; ---------------------------------------------------------------------------
.text:0040288F                 align 10h
.text:00402890 ; START OF FUNCTION CHUNK FOR sub_402660
.text:00402890
.text:00402890 loc_402890:                             ; CODE XREF: sub_402660+217↑j
.text:00402890                                         ; sub_402660+B5A↓j ...
.text:00402890                 mov     eax, 0FFFFFFFFh
.text:00402895                 jmp     short loc_402887
.text:00402897 ; ---------------------------------------------------------------------------
.text:00402897
.text:00402897 loc_402897:                             ; CODE XREF: sub_402660+210↑j
.text:00402897                 movzx   edx, byte ptr [eax+1]
.text:0040289B                 test    dl, dl
.text:0040289D                 jz      short loc_402872
.text:0040289F                 mov     ebx, [esp+arg_68]
.text:004028A3                 xor     ecx, ecx
.text:004028A5                 test    ebx, ebx
.text:004028A7                 jz      short loc_4028B2
.text:004028A9                 cmp     dl, 2Dh ; '-'
.text:004028AC                 jz      loc_4031AA
.text:004028B2
.text:004028B2 loc_4028B2:                             ; CODE XREF: sub_402660+247↑j
.text:004028B2                                         ; sub_402660+B4F↓j
.text:004028B2                 lea     esi, [ecx+eax+1]
.text:004028B6                 mov     [ebp+14h], esi
.text:004028B9                 lea     esi, [esi+0]
.text:004028C0
.text:004028C0 loc_4028C0:                             ; CODE XREF: sub_402660+17D↑j
.text:004028C0                 mov     ecx, [esp+arg_68]
.text:004028C4                 test    ecx, ecx
.text:004028C6                 jz      loc_402C50
.text:004028CC                 mov     edx, [ebp+0]
.text:004028CF                 mov     edi, [esp+arg_60]
.text:004028D3                 mov     eax, [edi+edx*4]
.text:004028D6                 movzx   edx, byte ptr [eax+1]
.text:004028DA                 cmp     dl, 2Dh ; '-'
.text:004028DD                 jz      short loc_4028F5
.text:004028DF                 mov     ebx, [esp+arg_70]
.text:004028E3                 test    ebx, ebx
.text:004028E5                 jz      loc_402C50
.text:004028EB                 cmp     byte ptr [eax+2], 0
.text:004028EF                 jz      loc_40318A
.text:004028F5
.text:004028F5 loc_4028F5:                             ; CODE XREF: sub_402660+27D↑j
.text:004028F5                                         ; sub_402660+B45↓j
.text:004028F5                 mov     [esp+arg_40], 0
.text:004028FD                 mov     ecx, [ebp+14h]
.text:00402900                 mov     [esp+arg_3C], 0
.text:00402908                 mov     [esp+arg_38], 0
.text:00402910                 mov     edi, ecx
.text:00402912                 mov     [esp+arg_34], 0FFFFFFFFh
.text:0040291A                 movzx   eax, byte ptr [ecx]
.text:0040291D                 test    al, al
.text:0040291F                 jz      short loc_40293C
.text:00402921                 cmp     al, 3Dh ; '='
.text:00402923                 jz      short loc_40293C
.text:00402925                 lea     esi, [esi+0]
.text:00402929                 lea     edi, [edi+0]
.text:00402930
.text:00402930 loc_402930:                             ; CODE XREF: sub_402660+2DA↓j
.text:00402930                 inc     edi
.text:00402931                 movzx   eax, byte ptr [edi]
.text:00402934                 test    al, al
.text:00402936                 jz      short loc_40293C
.text:00402938                 cmp     al, 3Dh ; '='
.text:0040293A                 jnz     short loc_402930
.text:0040293C
.text:0040293C loc_40293C:                             ; CODE XREF: sub_402660+2BF↑j
.text:0040293C                                         ; sub_402660+2C3↑j ...
.text:0040293C                 mov     [esp+arg_30], 0
.text:00402944                 mov     esi, [esp+arg_68]
.text:00402948                 mov     ebx, [esi]
.text:0040294A                 test    ebx, ebx
.text:0040294C                 mov     edx, ebx
.text:0040294E                 jz      loc_402B70
.text:00402954                 lea     esi, [esi+0]
.text:0040295A                 lea     edi, [edi+0]
.text:00402960
.text:00402960 loc_402960:                             ; CODE XREF: sub_402660+32E↓j
.text:00402960                 mov     [esp+Str2], ecx ; Str2
.text:00402964                 mov     ebx, edi
.text:00402966                 sub     ebx, ecx
.text:00402968                 mov     [esp+MaxCount], ebx ; MaxCount
.text:0040296C                 mov     [esp+0], edx    ; Str1
.text:0040296F                 call    strncmp
.text:00402974                 test    eax, eax
.text:00402976                 jz      loc_403106
.text:0040297C
.text:0040297C loc_40297C:                             ; CODE XREF: sub_402660+ADF↓j
.text:0040297C                                         ; sub_402660+AF4↓j ...
.text:0040297C                 inc     [esp+arg_30]
.text:00402980                 add     esi, 10h
.text:00402983                 mov     ecx, [esi]
.text:00402985                 test    ecx, ecx
.text:00402987                 mov     edx, ecx
.text:00402989                 jz      short loc_402990
.text:0040298B                 mov     ecx, [ebp+14h]
.text:0040298E                 jmp     short loc_402960
.text:00402990 ; ---------------------------------------------------------------------------
.text:00402990
.text:00402990 loc_402990:                             ; CODE XREF: sub_402660+329↑j
.text:00402990                                         ; sub_402660+B25↓j
.text:00402990                 mov     esi, [esp+arg_38]
.text:00402994                 test    esi, esi
.text:00402996                 jz      short loc_4029A4
.text:00402998                 mov     edx, [esp+arg_3C]
.text:0040299C                 test    edx, edx
.text:0040299E                 jz      loc_4030B0
.text:004029A4
.text:004029A4 loc_4029A4:                             ; CODE XREF: sub_402660+336↑j
.text:004029A4                 mov     eax, [esp+arg_40]
.text:004029A8                 test    eax, eax
.text:004029AA                 jz      loc_402B70
.text:004029B0                 mov     ecx, [ebp+0]
.text:004029B3                 lea     eax, [ecx+1]
.text:004029B6                 mov     [ebp+0], eax
.text:004029B9                 cmp     byte ptr [edi], 0
.text:004029BC                 jz      loc_402AD0
.text:004029C2                 mov     ecx, [esp+arg_40]
.text:004029C6                 mov     esi, [ecx+4]
.text:004029C9                 test    esi, esi
.text:004029CB                 jz      short loc_402A16
.text:004029CD                 lea     ebx, [edi+1]
.text:004029D0                 mov     [ebp+0Ch], ebx
.text:004029D3
.text:004029D3 loc_4029D3:                             ; CODE XREF: sub_402660+478↓j
.text:004029D3                                         ; sub_402660+494↓j
.text:004029D3                 mov     ebx, [ebp+14h]
.text:004029D6                 mov     [esp+0], ebx    ; Str
.text:004029D9                 call    strlen
.text:004029DE                 add     [ebp+14h], eax
.text:004029E1                 mov     esi, [esp+arg_6C]
.text:004029E5                 test    esi, esi
.text:004029E7                 jz      short loc_4029F3
.text:004029E9                 mov     ebp, [esp+arg_34]
.text:004029ED                 mov     ecx, [esp+arg_6C]
.text:004029F1                 mov     [ecx], ebp
.text:004029F3
.text:004029F3 loc_4029F3:                             ; CODE XREF: sub_402660+387↑j
.text:004029F3                 mov     eax, [esp+arg_40]
.text:004029F7                 mov     ecx, [eax+8]
.text:004029FA                 test    ecx, ecx
.text:004029FC                 jnz     short loc_402A0A
.text:004029FE                 mov     ecx, [esp+arg_40]
.text:00402A02
.text:00402A02 loc_402A02:                             ; CODE XREF: sub_402660+7F3↓j
.text:00402A02                 mov     eax, [ecx+0Ch]
.text:00402A05                 jmp     loc_402887
.text:00402A0A ; ---------------------------------------------------------------------------
.text:00402A0A
.text:00402A0A loc_402A0A:                             ; CODE XREF: sub_402660+39C↑j
.text:00402A0A                                         ; sub_402660+7E9↓j
.text:00402A0A                 mov     esi, [eax+0Ch]
.text:00402A0D                 xor     eax, eax
.text:00402A0F                 mov     [ecx], esi
.text:00402A11                 jmp     loc_402887
.text:00402A16 ; ---------------------------------------------------------------------------
.text:00402A16
.text:00402A16 loc_402A16:                             ; CODE XREF: sub_402660+36B↑j
.text:00402A16                 mov     edi, [esp+arg_44]
.text:00402A1A                 test    edi, edi
.text:00402A1C                 jz      short loc_402A70
.text:00402A1E                 mov     esi, [esp+arg_60]
.text:00402A22                 mov     edx, [esi+eax*4-4]
.text:00402A26                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00402A2A                 jz      short loc_402A92
.text:00402A2C                 mov     dword ptr [esp+0], offset sub_402500
.text:00402A33                 call    ds:libintl_gettext
.text:00402A39                 mov     edx, [esp+arg_40]
.text:00402A3D                 mov     edi, [edx]
.text:00402A3F                 mov     [esp+arg_C], edi
.text:00402A43                 mov     ebx, [ebp+0]
.text:00402A46                 mov     edi, [esp+arg_60]
.text:00402A4A                 mov     ecx, [edi+ebx*4-4]
.text:00402A4E                 movsx   esi, byte ptr [ecx]
.text:00402A51                 mov     ecx, ds:_iob
.text:00402A57                 add     ecx, 40h ; '@'
.text:00402A5A                 mov     [esp+arg_8], esi
.text:00402A5E                 mov     ebx, [edi]
.text:00402A60                 mov     [esp+Str2], eax ; Format
.text:00402A64                 mov     [esp+0], ecx    ; Stream
.text:00402A67                 mov     [esp+MaxCount], ebx
.text:00402A6B                 call    fprintf
.text:00402A70
.text:00402A70 loc_402A70:                             ; CODE XREF: sub_402660+3BC↑j
.text:00402A70                                         ; sub_402660+468↓j
.text:00402A70                 mov     ecx, [ebp+14h]
.text:00402A73                 mov     [esp+0], ecx    ; Str
.text:00402A76                 call    strlen
.text:00402A7B                 add     [ebp+14h], eax
.text:00402A7E                 mov     eax, [esp+arg_40]
.text:00402A82                 mov     esi, [eax+0Ch]
.text:00402A85                 mov     [ebp+8], esi
.text:00402A88
.text:00402A88 loc_402A88:                             ; CODE XREF: sub_402660+5B5↓j
.text:00402A88                                         ; sub_402660+80E↓j ...
.text:00402A88                 mov     eax, 3Fh ; '?'
.text:00402A8D                 jmp     loc_402887
.text:00402A92 ; ---------------------------------------------------------------------------
.text:00402A92
.text:00402A92 loc_402A92:                             ; CODE XREF: sub_402660+3CA↑j
.text:00402A92                 mov     dword ptr [esp+0], offset sub_402540
.text:00402A99                 call    ds:libintl_gettext
.text:00402A9F                 mov     edx, [esp+arg_40]
.text:00402AA3                 mov     edi, [esp+arg_60]
.text:00402AA7                 mov     ecx, ds:_iob
.text:00402AAD                 mov     esi, [edx]
.text:00402AAF                 add     ecx, 40h ; '@'
.text:00402AB2                 mov     [esp+arg_8], esi
.text:00402AB6                 mov     ebx, [edi]
.text:00402AB8                 mov     [esp+Str2], eax ; Format
.text:00402ABC                 mov     [esp+0], ecx    ; Stream
.text:00402ABF                 mov     [esp+MaxCount], ebx
.text:00402AC3                 call    fprintf
.text:00402AC8                 jmp     short loc_402A70
.text:00402AC8 ; END OF FUNCTION CHUNK FOR sub_402660
.text:00402AC8 ; ---------------------------------------------------------------------------
.text:00402ACA                 align 10h
.text:00402AD0 ; START OF FUNCTION CHUNK FOR sub_402660
.text:00402AD0
.text:00402AD0 loc_402AD0:                             ; CODE XREF: sub_402660+35C↑j
.text:00402AD0                 mov     ebx, [esp+arg_40]
.text:00402AD4                 cmp     dword ptr [ebx+4], 1
.text:00402AD8                 jnz     loc_4029D3
.text:00402ADE                 cmp     eax, [esp+arg_5C]
.text:00402AE2                 jge     short loc_402AF9
.text:00402AE4                 mov     ebx, [esp+arg_60]
.text:00402AE8                 lea     edi, [ecx+2]
.text:00402AEB                 mov     [ebp+0], edi
.text:00402AEE                 mov     esi, [ebx+eax*4]
.text:00402AF1                 mov     [ebp+0Ch], esi
.text:00402AF4                 jmp     loc_4029D3
.text:00402AF9 ; ---------------------------------------------------------------------------
.text:00402AF9
.text:00402AF9 loc_402AF9:                             ; CODE XREF: sub_402660+482↑j
.text:00402AF9                 mov     edx, [esp+arg_44]
.text:00402AFD                 test    edx, edx
.text:00402AFF                 jnz     short loc_402B30
.text:00402B01
.text:00402B01 loc_402B01:                             ; CODE XREF: sub_402660+507↓j
.text:00402B01                 mov     edx, [ebp+14h]
.text:00402B04                 mov     [esp+0], edx    ; Str
.text:00402B07                 call    strlen
.text:00402B0C                 add     [ebp+14h], eax
.text:00402B0F                 mov     eax, [esp+arg_40]
.text:00402B13                 mov     edi, [eax+0Ch]
.text:00402B16                 mov     [ebp+8], edi
.text:00402B19
.text:00402B19 loc_402B19:                             ; CODE XREF: sub_402660+892↓j
.text:00402B19                 mov     ebp, [esp+Str]
.text:00402B1D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402B21                 setnz   bl
.text:00402B24                 movzx   esi, bl
.text:00402B27                 lea     eax, [esi+esi*4+3Ah]
.text:00402B2B                 jmp     loc_402887
.text:00402B30 ; ---------------------------------------------------------------------------
.text:00402B30
.text:00402B30 loc_402B30:                             ; CODE XREF: sub_402660+49F↑j
.text:00402B30                 mov     dword ptr [esp+0], offset sub_402580
.text:00402B37                 call    ds:libintl_gettext
.text:00402B3D                 mov     ecx, [ebp+0]
.text:00402B40                 mov     esi, [esp+arg_60]
.text:00402B44                 mov     ebx, [esi+ecx*4-4]
.text:00402B48                 mov     ecx, ds:_iob
.text:00402B4E                 mov     [esp+arg_8], ebx
.text:00402B52                 mov     edi, [esi]
.text:00402B54                 add     ecx, 40h ; '@'
.text:00402B57                 mov     [esp+Str2], eax ; Format
.text:00402B5B                 mov     [esp+0], ecx    ; Stream
.text:00402B5E                 mov     [esp+MaxCount], edi
.text:00402B62                 call    fprintf
.text:00402B67                 jmp     short loc_402B01
.text:00402B67 ; END OF FUNCTION CHUNK FOR sub_402660
.text:00402B67 ; ---------------------------------------------------------------------------
.text:00402B69                 align 10h
.text:00402B70 ; START OF FUNCTION CHUNK FOR sub_402660
.text:00402B70
.text:00402B70 loc_402B70:                             ; CODE XREF: sub_402660+2EE↑j
.text:00402B70                                         ; sub_402660+34A↑j
.text:00402B70                 mov     eax, [esp+arg_70]
.text:00402B74                 test    eax, eax
.text:00402B76                 jz      short loc_402BA6
.text:00402B78                 mov     ebx, [ebp+0]
.text:00402B7B                 mov     esi, [esp+arg_60]
.text:00402B7F                 mov     edi, [esi+ebx*4]
.text:00402B82                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402B86                 jz      short loc_402BA9
.text:00402B88                 mov     ecx, [ebp+14h]
.text:00402B8B                 mov     edx, [esp+Str]
.text:00402B8F                 movsx   ebx, byte ptr [ecx]
.text:00402B92                 mov     [esp+0], edx    ; Str
.text:00402B95                 mov     [esp+Str2], ebx ; Val
.text:00402B99                 call    strchr
.text:00402B9E                 test    eax, eax
.text:00402BA0                 jnz     loc_402C50
.text:00402BA6
.text:00402BA6 loc_402BA6:                             ; CODE XREF: sub_402660+516↑j
.text:00402BA6                 mov     ebx, [ebp+0]
.text:00402BA9
.text:00402BA9 loc_402BA9:                             ; CODE XREF: sub_402660+526↑j
.text:00402BA9                 mov     eax, [esp+arg_44]
.text:00402BAD                 test    eax, eax
.text:00402BAF                 jz      short loc_402C01
.text:00402BB1                 mov     esi, [esp+arg_60]
.text:00402BB5                 mov     edi, [esi+ebx*4]
.text:00402BB8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402BBC                 jz      short loc_402C1A
.text:00402BBE                 mov     dword ptr [esp+0], offset sub_4025C0
.text:00402BC5                 call    ds:libintl_gettext
.text:00402BCB                 mov     edi, [ebp+14h]
.text:00402BCE                 mov     [esp+arg_C], edi
.text:00402BD2                 mov     ebx, [ebp+0]
.text:00402BD5                 mov     edi, [esp+arg_60]
.text:00402BD9                 mov     esi, [edi+ebx*4]
.text:00402BDC                 movsx   ecx, byte ptr [esi]
.text:00402BDF                 mov     esi, ds:_iob
.text:00402BE5                 add     esi, 40h ; '@'
.text:00402BE8                 mov     [esp+arg_8], ecx
.text:00402BEC                 mov     ebx, [edi]
.text:00402BEE                 mov     [esp+Str2], eax ; Format
.text:00402BF2                 mov     [esp+0], esi    ; Stream
.text:00402BF5                 mov     [esp+MaxCount], ebx
.text:00402BF9                 call    fprintf
.text:00402BFE
.text:00402BFE loc_402BFE:                             ; CODE XREF: sub_402660+5ED↓j
.text:00402BFE                 mov     ebx, [ebp+0]
.text:00402C01
.text:00402C01 loc_402C01:                             ; CODE XREF: sub_402660+54F↑j
.text:00402C01                 mov     dword ptr [ebp+14h], offset loc_4025E0
.text:00402C08                 lea     edx, [ebx+1]
.text:00402C0B                 mov     [ebp+0], edx
.text:00402C0E
.text:00402C0E loc_402C0E:                             ; CODE XREF: sub_402660+A69↓j
.text:00402C0E                 mov     dword ptr [ebp+8], 0
.text:00402C15                 jmp     loc_402A88
.text:00402C1A ; ---------------------------------------------------------------------------
.text:00402C1A
.text:00402C1A loc_402C1A:                             ; CODE XREF: sub_402660+55C↑j
.text:00402C1A                 mov     dword ptr [esp+0], offset sub_402600
.text:00402C21                 call    ds:libintl_gettext
.text:00402C27                 mov     ecx, [ebp+14h]
.text:00402C2A                 mov     edi, [esp+arg_60]
.text:00402C2E                 mov     edx, ds:_iob
.text:00402C34                 mov     [esp+arg_8], ecx
.text:00402C38                 mov     ebx, [edi]
.text:00402C3A                 add     edx, 40h ; '@'
.text:00402C3D                 mov     [esp+Str2], eax ; Format
.text:00402C41                 mov     [esp+MaxCount], ebx
.text:00402C45                 mov     [esp+0], edx    ; Stream
.text:00402C48                 call    fprintf
.text:00402C4D                 jmp     short loc_402BFE
.text:00402C4D ; END OF FUNCTION CHUNK FOR sub_402660
.text:00402C4D ; ---------------------------------------------------------------------------
.text:00402C4F                 align 10h
.text:00402C50 ; START OF FUNCTION CHUNK FOR sub_402660
.text:00402C50
.text:00402C50 loc_402C50:                             ; CODE XREF: sub_402660+266↑j
.text:00402C50                                         ; sub_402660+285↑j ...
.text:00402C50                 mov     esi, [ebp+14h]
.text:00402C53                 movzx   ebx, byte ptr [esi]
.text:00402C56                 inc     esi
.text:00402C57                 mov     [ebp+14h], esi
.text:00402C5A                 mov     ecx, [esp+Str]
.text:00402C5E                 movsx   esi, bl
.text:00402C61                 mov     [esp+Str2], esi ; Val
.text:00402C65                 mov     edi, esi
.text:00402C67                 mov     [esp+0], ecx    ; Str
.text:00402C6A                 call    strchr
.text:00402C6F                 mov     ecx, [ebp+14h]
.text:00402C72                 cmp     byte ptr [ecx], 0
.text:00402C75                 jnz     short loc_402C7A
.text:00402C77                 inc     dword ptr [ebp+0]
.text:00402C7A
.text:00402C7A loc_402C7A:                             ; CODE XREF: sub_402660+615↑j
.text:00402C7A                 test    eax, eax
.text:00402C7C                 jz      loc_403060
.text:00402C82                 cmp     bl, 3Ah ; ':'
.text:00402C85                 jz      loc_403060
.text:00402C8B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00402C8E                 jz      loc_402D46
.text:00402C94                 movzx   edx, byte ptr [eax+1]
.text:00402C98
.text:00402C98 loc_402C98:                             ; CODE XREF: sub_402660+6ED↓j
.text:00402C98                 cmp     dl, 3Ah ; ':'
.text:00402C9B                 jz      short loc_402CA4
.text:00402C9D
.text:00402C9D loc_402C9D:                             ; CODE XREF: sub_402660+660↓j
.text:00402C9D                 mov     eax, esi
.text:00402C9F                 jmp     loc_402887
.text:00402CA4 ; ---------------------------------------------------------------------------
.text:00402CA4
.text:00402CA4 loc_402CA4:                             ; CODE XREF: sub_402660+63B↑j
.text:00402CA4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402CA8                 jz      loc_402D31
.text:00402CAE                 cmp     byte ptr [ecx], 0
.text:00402CB1                 jz      short loc_402CC2
.text:00402CB3
.text:00402CB3 loc_402CB3:                             ; CODE XREF: sub_402660+6D4↓j
.text:00402CB3                 inc     dword ptr [ebp+0]
.text:00402CB6                 mov     [ebp+0Ch], ecx
.text:00402CB9
.text:00402CB9 loc_402CB9:                             ; CODE XREF: sub_402660+67B↓j
.text:00402CB9                                         ; sub_402660+696↓j ...
.text:00402CB9                 mov     dword ptr [ebp+14h], 0
.text:00402CC0                 jmp     short loc_402C9D
.text:00402CC2 ; ---------------------------------------------------------------------------
.text:00402CC2
.text:00402CC2 loc_402CC2:                             ; CODE XREF: sub_402660+651↑j
.text:00402CC2                 mov     ecx, [ebp+0]
.text:00402CC5                 cmp     ecx, [esp+arg_5C]
.text:00402CC9                 jz      short loc_402CDD
.text:00402CCB                 mov     eax, [esp+arg_60]
.text:00402CCF                 lea     edx, [ecx+1]
.text:00402CD2                 mov     [ebp+0], edx
.text:00402CD5                 mov     ebx, [eax+ecx*4]
.text:00402CD8                 mov     [ebp+0Ch], ebx
.text:00402CDB                 jmp     short loc_402CB9
.text:00402CDD ; ---------------------------------------------------------------------------
.text:00402CDD
.text:00402CDD loc_402CDD:                             ; CODE XREF: sub_402660+669↑j
.text:00402CDD                 mov     ecx, [esp+arg_44]
.text:00402CE1                 test    ecx, ecx
.text:00402CE3                 jnz     short loc_402CFF
.text:00402CE5
.text:00402CE5 loc_402CE5:                             ; CODE XREF: sub_402660+6CF↓j
.text:00402CE5                 mov     [ebp+8], edi
.text:00402CE8                 mov     edi, [esp+Str]
.text:00402CEC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00402CEF                 jz      short loc_402CF8
.text:00402CF1                 mov     esi, 3Fh ; '?'
.text:00402CF6                 jmp     short loc_402CB9
.text:00402CF8 ; ---------------------------------------------------------------------------
.text:00402CF8
.text:00402CF8 loc_402CF8:                             ; CODE XREF: sub_402660+68F↑j
.text:00402CF8                 mov     esi, 3Ah ; ':'
.text:00402CFD                 jmp     short loc_402CB9
.text:00402CFF ; ---------------------------------------------------------------------------
.text:00402CFF
.text:00402CFF loc_402CFF:                             ; CODE XREF: sub_402660+683↑j
.text:00402CFF                 mov     dword ptr [esp+0], 402620h
.text:00402D06                 call    ds:libintl_gettext
.text:00402D0C                 mov     [esp+arg_8], edi
.text:00402D10                 mov     ebx, [esp+arg_60]
.text:00402D14                 mov     edx, ds:_iob
.text:00402D1A                 mov     esi, [ebx]
.text:00402D1C                 add     edx, 40h ; '@'
.text:00402D1F                 mov     [esp+Str2], eax ; Format
.text:00402D23                 mov     [esp+MaxCount], esi
.text:00402D27                 mov     [esp+0], edx    ; Stream
.text:00402D2A                 call    fprintf
.text:00402D2F                 jmp     short loc_402CE5
.text:00402D31 ; ---------------------------------------------------------------------------
.text:00402D31
.text:00402D31 loc_402D31:                             ; CODE XREF: sub_402660+648↑j
.text:00402D31                 cmp     byte ptr [ecx], 0
.text:00402D34                 jnz     loc_402CB3
.text:00402D3A                 mov     dword ptr [ebp+0Ch], 0
.text:00402D41                 jmp     loc_402CB9
.text:00402D46 ; ---------------------------------------------------------------------------
.text:00402D46
.text:00402D46 loc_402D46:                             ; CODE XREF: sub_402660+62E↑j
.text:00402D46                 movzx   edx, byte ptr [eax+1]
.text:00402D4A                 cmp     dl, 3Bh ; ';'
.text:00402D4D                 jnz     loc_402C98
.text:00402D53                 mov     [esp+arg_2C], 0
.text:00402D5B                 mov     [esp+arg_28], 0
.text:00402D63                 mov     [esp+arg_24], 0
.text:00402D6B                 mov     [esp+arg_20], 0
.text:00402D73                 cmp     byte ptr [ecx], 0
.text:00402D76                 jz      loc_402FEB
.text:00402D7C                 inc     dword ptr [ebp+0]
.text:00402D7F                 mov     [ebp+0Ch], ecx
.text:00402D82
.text:00402D82 loc_402D82:                             ; CODE XREF: sub_402660+9A4↓j
.text:00402D82                 mov     edi, [ebp+0Ch]
.text:00402D85                 mov     [ebp+14h], edi
.text:00402D88                 movzx   eax, byte ptr [edi]
.text:00402D8B                 test    al, al
.text:00402D8D                 jz      short loc_402D9F
.text:00402D8F                 cmp     al, 3Dh ; '='
.text:00402D91                 jz      short loc_402D9F
.text:00402D93
.text:00402D93 loc_402D93:                             ; CODE XREF: sub_402660+73D↓j
.text:00402D93                 inc     edi
.text:00402D94                 movzx   eax, byte ptr [edi]
.text:00402D97                 test    al, al
.text:00402D99                 jz      short loc_402D9F
.text:00402D9B                 cmp     al, 3Dh ; '='
.text:00402D9D                 jnz     short loc_402D93
.text:00402D9F
.text:00402D9F loc_402D9F:                             ; CODE XREF: sub_402660+72D↑j
.text:00402D9F                                         ; sub_402660+731↑j ...
.text:00402D9F                 mov     [esp+arg_1C], 0
.text:00402DA7                 mov     esi, [esp+arg_68]
.text:00402DAB                 mov     eax, [esi]
.text:00402DAD                 test    eax, eax
.text:00402DAF                 jz      loc_402F30
.text:00402DB5                 mov     ecx, eax
.text:00402DB7
.text:00402DB7 loc_402DB7:                             ; CODE XREF: sub_402660+783↓j
.text:00402DB7                 mov     ebx, [ebp+14h]
.text:00402DBA                 mov     eax, edi
.text:00402DBC                 mov     [esp+0], ecx    ; Str1
.text:00402DBF                 sub     eax, ebx
.text:00402DC1                 mov     [esp+MaxCount], eax ; MaxCount
.text:00402DC5                 mov     [esp+Str2], ebx ; Str2
.text:00402DC9                 call    strncmp
.text:00402DCE                 test    eax, eax
.text:00402DD0                 jz      loc_402F97
.text:00402DD6
.text:00402DD6 loc_402DD6:                             ; CODE XREF: sub_402660+95C↓j
.text:00402DD6                                         ; sub_402660+96D↓j
.text:00402DD6                 inc     [esp+arg_1C]
.text:00402DDA                 add     esi, 10h
.text:00402DDD                 mov     edx, [esi]
.text:00402DDF                 test    edx, edx
.text:00402DE1                 mov     ecx, edx
.text:00402DE3                 jnz     short loc_402DB7
.text:00402DE5
.text:00402DE5 loc_402DE5:                             ; CODE XREF: sub_402660+986↓j
.text:00402DE5                 mov     esi, [esp+arg_24]
.text:00402DE9                 test    esi, esi
.text:00402DEB                 jz      short loc_402DF9
.text:00402DED                 mov     ebx, [esp+arg_28]
.text:00402DF1                 test    ebx, ebx
.text:00402DF3                 jz      loc_402F41
.text:00402DF9
.text:00402DF9 loc_402DF9:                             ; CODE XREF: sub_402660+78B↑j
.text:00402DF9                 mov     esi, [esp+arg_2C]
.text:00402DFD                 test    esi, esi
.text:00402DFF                 jz      loc_402F30
.text:00402E05                 cmp     byte ptr [edi], 0
.text:00402E08                 jz      loc_402EB0
.text:00402E0E                 mov     ecx, [esp+arg_2C]
.text:00402E12                 mov     ebx, [ecx+4]
.text:00402E15                 test    ebx, ebx
.text:00402E17                 jz      short loc_402E58
.text:00402E19                 lea     edx, [edi+1]
.text:00402E1C                 mov     [ebp+0Ch], edx
.text:00402E1F
.text:00402E1F loc_402E1F:                             ; CODE XREF: sub_402660+858↓j
.text:00402E1F                                         ; sub_402660+877↓j
.text:00402E1F                 mov     edi, [ebp+14h]
.text:00402E22                 mov     [esp+0], edi    ; Str
.text:00402E25                 call    strlen
.text:00402E2A                 add     [ebp+14h], eax
.text:00402E2D                 mov     eax, [esp+arg_6C]
.text:00402E31                 test    eax, eax
.text:00402E33                 jz      short loc_402E40
.text:00402E35                 mov     edx, [esp+arg_20]
.text:00402E39                 mov     ebp, [esp+arg_6C]
.text:00402E3D                 mov     [ebp+0], edx
.text:00402E40
.text:00402E40 loc_402E40:                             ; CODE XREF: sub_402660+7D3↑j
.text:00402E40                 mov     eax, [esp+arg_2C]
.text:00402E44                 mov     ecx, [eax+8]
.text:00402E47                 test    ecx, ecx
.text:00402E49                 jnz     loc_402A0A
.text:00402E4F                 mov     ecx, [esp+arg_2C]
.text:00402E53                 jmp     loc_402A02
.text:00402E58 ; ---------------------------------------------------------------------------
.text:00402E58
.text:00402E58 loc_402E58:                             ; CODE XREF: sub_402660+7B7↑j
.text:00402E58                 mov     eax, [esp+arg_44]
.text:00402E5C                 test    eax, eax
.text:00402E5E                 jnz     short loc_402E73
.text:00402E60
.text:00402E60 loc_402E60:                             ; CODE XREF: sub_402660+849↓j
.text:00402E60                 mov     ecx, [ebp+14h]
.text:00402E63                 mov     [esp+0], ecx    ; Str
.text:00402E66                 call    strlen
.text:00402E6B                 add     [ebp+14h], eax
.text:00402E6E                 jmp     loc_402A88
.text:00402E73 ; ---------------------------------------------------------------------------
.text:00402E73
.text:00402E73 loc_402E73:                             ; CODE XREF: sub_402660+7FE↑j
.text:00402E73                 mov     dword ptr [esp+0], offset sub_402660
.text:00402E7A                 call    ds:libintl_gettext
.text:00402E80                 mov     edx, [esp+arg_2C]
.text:00402E84                 mov     ebx, [esp+arg_60]
.text:00402E88                 mov     edi, [edx]
.text:00402E8A                 mov     [esp+arg_8], edi
.text:00402E8E                 mov     edi, ds:_iob
.text:00402E94                 mov     esi, [ebx]
.text:00402E96                 mov     [esp+Str2], eax ; Format
.text:00402E9A                 add     edi, 40h ; '@'
.text:00402E9D                 mov     [esp+MaxCount], esi
.text:00402EA1                 mov     [esp+0], edi    ; Stream
.text:00402EA4                 call    fprintf
.text:00402EA9                 jmp     short loc_402E60
.text:00402EA9 ; END OF FUNCTION CHUNK FOR sub_402660
.text:00402EA9 ; ---------------------------------------------------------------------------
.text:00402EAB                 align 10h
.text:00402EB0 ; START OF FUNCTION CHUNK FOR sub_402660
.text:00402EB0
.text:00402EB0 loc_402EB0:                             ; CODE XREF: sub_402660+7A8↑j
.text:00402EB0                 mov     esi, [esp+arg_2C]
.text:00402EB4                 cmp     dword ptr [esi+4], 1
.text:00402EB8                 jnz     loc_402E1F
.text:00402EBE                 mov     ecx, [ebp+0]
.text:00402EC1                 cmp     ecx, [esp+arg_5C]
.text:00402EC5                 jge     short loc_402EDC
.text:00402EC7                 mov     eax, [esp+arg_60]
.text:00402ECB                 lea     ebx, [ecx+1]
.text:00402ECE                 mov     [ebp+0], ebx
.text:00402ED1                 mov     edi, [eax+ecx*4]
.text:00402ED4                 mov     [ebp+0Ch], edi
.text:00402ED7                 jmp     loc_402E1F
.text:00402EDC ; ---------------------------------------------------------------------------
.text:00402EDC
.text:00402EDC loc_402EDC:                             ; CODE XREF: sub_402660+865↑j
.text:00402EDC                 mov     edx, [esp+arg_44]
.text:00402EE0                 test    edx, edx
.text:00402EE2                 jnz     short loc_402EF7
.text:00402EE4
.text:00402EE4 loc_402EE4:                             ; CODE XREF: sub_402660+8CE↓j
.text:00402EE4                 mov     edx, [ebp+14h]
.text:00402EE7                 mov     [esp+0], edx    ; Str
.text:00402EEA                 call    strlen
.text:00402EEF                 add     [ebp+14h], eax
.text:00402EF2                 jmp     loc_402B19
.text:00402EF7 ; ---------------------------------------------------------------------------
.text:00402EF7
.text:00402EF7 loc_402EF7:                             ; CODE XREF: sub_402660+882↑j
.text:00402EF7                 mov     dword ptr [esp+0], offset sub_402580
.text:00402EFE                 call    ds:libintl_gettext
.text:00402F04                 mov     ecx, [ebp+0]
.text:00402F07                 mov     ebx, [esp+arg_60]
.text:00402F0B                 mov     edi, [ebx+ecx*4-4]
.text:00402F0F                 mov     ecx, ds:_iob
.text:00402F15                 mov     [esp+arg_8], edi
.text:00402F19                 mov     esi, [ebx]
.text:00402F1B                 add     ecx, 40h ; '@'
.text:00402F1E                 mov     [esp+Str2], eax ; Format
.text:00402F22                 mov     [esp+0], ecx    ; Stream
.text:00402F25                 mov     [esp+MaxCount], esi
.text:00402F29                 call    fprintf
.text:00402F2E                 jmp     short loc_402EE4
.text:00402F30 ; ---------------------------------------------------------------------------
.text:00402F30
.text:00402F30 loc_402F30:                             ; CODE XREF: sub_402660+74F↑j
.text:00402F30                                         ; sub_402660+79F↑j
.text:00402F30                 mov     dword ptr [ebp+14h], 0
.text:00402F37                 mov     eax, 57h ; 'W'
.text:00402F3C                 jmp     loc_402887
.text:00402F41 ; ---------------------------------------------------------------------------
.text:00402F41
.text:00402F41 loc_402F41:                             ; CODE XREF: sub_402660+793↑j
.text:00402F41                 mov     edi, [esp+arg_44]
.text:00402F45                 test    edi, edi
.text:00402F47                 jnz     short loc_402F5F
.text:00402F49
.text:00402F49 loc_402F49:                             ; CODE XREF: sub_402660+935↓j
.text:00402F49                 mov     edx, [ebp+14h]
.text:00402F4C                 mov     [esp+0], edx    ; Str
.text:00402F4F                 call    strlen
.text:00402F54                 add     [ebp+14h], eax
.text:00402F57                 inc     dword ptr [ebp+0]
.text:00402F5A                 jmp     loc_402A88
.text:00402F5F ; ---------------------------------------------------------------------------
.text:00402F5F
.text:00402F5F loc_402F5F:                             ; CODE XREF: sub_402660+8E7↑j
.text:00402F5F                 mov     dword ptr [esp+0], offset sub_4026A0
.text:00402F66                 call    ds:libintl_gettext
.text:00402F6C                 mov     ecx, [ebp+0]
.text:00402F6F                 mov     ebx, [esp+arg_60]
.text:00402F73                 mov     edi, [ebx+ecx*4]
.text:00402F76                 mov     ecx, ds:_iob
.text:00402F7C                 mov     [esp+arg_8], edi
.text:00402F80                 mov     esi, [ebx]
.text:00402F82                 add     ecx, 40h ; '@'
.text:00402F85                 mov     [esp+Str2], eax ; Format
.text:00402F89                 mov     [esp+0], ecx    ; Stream
.text:00402F8C                 mov     [esp+MaxCount], esi
.text:00402F90                 call    fprintf
.text:00402F95                 jmp     short loc_402F49
.text:00402F97 ; ---------------------------------------------------------------------------
.text:00402F97
.text:00402F97 loc_402F97:                             ; CODE XREF: sub_402660+770↑j
.text:00402F97                 mov     edx, [ebp+14h]
.text:00402F9A                 mov     ebx, edi
.text:00402F9C                 mov     ecx, [esi]
.text:00402F9E                 sub     ebx, edx
.text:00402FA0                 mov     [esp+0], ecx    ; Str
.text:00402FA3                 call    strlen
.text:00402FA8                 cmp     ebx, eax
.text:00402FAA                 jz      short loc_402FD2
.text:00402FAC                 mov     ebx, [esp+arg_2C]
.text:00402FB0                 test    ebx, ebx
.text:00402FB2                 jz      short loc_402FC1
.text:00402FB4                 mov     [esp+arg_24], 1
.text:00402FBC                 jmp     loc_402DD6
.text:00402FC1 ; ---------------------------------------------------------------------------
.text:00402FC1
.text:00402FC1 loc_402FC1:                             ; CODE XREF: sub_402660+952↑j
.text:00402FC1                 mov     [esp+arg_2C], esi
.text:00402FC5                 mov     ecx, [esp+arg_1C]
.text:00402FC9                 mov     [esp+arg_20], ecx
.text:00402FCD                 jmp     loc_402DD6
.text:00402FD2 ; ---------------------------------------------------------------------------
.text:00402FD2
.text:00402FD2 loc_402FD2:                             ; CODE XREF: sub_402660+94A↑j
.text:00402FD2                 mov     [esp+arg_2C], esi
.text:00402FD6                 mov     eax, [esp+arg_1C]
.text:00402FDA                 mov     [esp+arg_28], 1
.text:00402FE2                 mov     [esp+arg_20], eax
.text:00402FE6                 jmp     loc_402DE5
.text:00402FEB ; ---------------------------------------------------------------------------
.text:00402FEB
.text:00402FEB loc_402FEB:                             ; CODE XREF: sub_402660+716↑j
.text:00402FEB                 mov     edx, [ebp+0]
.text:00402FEE                 cmp     edx, [esp+arg_5C]
.text:00402FF2                 jz      short loc_403009
.text:00402FF4                 mov     ebx, [esp+arg_60]
.text:00402FF8                 lea     esi, [edx+1]
.text:00402FFB                 mov     [ebp+0], esi
.text:00402FFE                 mov     edi, [ebx+edx*4]
.text:00403001                 mov     [ebp+0Ch], edi
.text:00403004                 jmp     loc_402D82
.text:00403009 ; ---------------------------------------------------------------------------
.text:00403009
.text:00403009 loc_403009:                             ; CODE XREF: sub_402660+992↑j
.text:00403009                 mov     edi, [esp+arg_44]
.text:0040300D                 test    edi, edi
.text:0040300F                 jnz     short loc_40302C
.text:00403011
.text:00403011 loc_403011:                             ; CODE XREF: sub_402660+9FC↓j
.text:00403011                 mov     [ebp+8], esi
.text:00403014                 mov     ebp, [esp+Str]
.text:00403018                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040301C                 jz      short loc_403028
.text:0040301E                 mov     bl, 3Fh ; '?'
.text:00403020
.text:00403020 loc_403020:                             ; CODE XREF: sub_402660+9CA↓j
.text:00403020                 movsx   eax, bl
.text:00403023                 jmp     loc_402887
.text:00403028 ; ---------------------------------------------------------------------------
.text:00403028
.text:00403028 loc_403028:                             ; CODE XREF: sub_402660+9BC↑j
.text:00403028                 mov     bl, 3Ah ; ':'
.text:0040302A                 jmp     short loc_403020
.text:0040302C ; ---------------------------------------------------------------------------
.text:0040302C
.text:0040302C loc_40302C:                             ; CODE XREF: sub_402660+9AF↑j
.text:0040302C                 mov     dword ptr [esp+0], 402620h
.text:00403033                 call    ds:libintl_gettext
.text:00403039                 mov     [esp+arg_8], esi
.text:0040303D                 mov     edx, [esp+arg_60]
.text:00403041                 mov     ecx, ds:_iob
.text:00403047                 mov     ebx, [edx]
.text:00403049                 add     ecx, 40h ; '@'
.text:0040304C                 mov     [esp+Str2], eax ; Format
.text:00403050                 mov     [esp+MaxCount], ebx
.text:00403054                 mov     [esp+0], ecx    ; Stream
.text:00403057                 call    fprintf
.text:0040305C                 jmp     short loc_403011
.text:0040305C ; END OF FUNCTION CHUNK FOR sub_402660
.text:0040305C ; ---------------------------------------------------------------------------
.text:0040305E                 align 10h
.text:00403060 ; START OF FUNCTION CHUNK FOR sub_402660
.text:00403060
.text:00403060 loc_403060:                             ; CODE XREF: sub_402660+61C↑j
.text:00403060                                         ; sub_402660+625↑j
.text:00403060                 mov     eax, [esp+arg_44]
.text:00403064                 test    eax, eax
.text:00403066                 jz      short loc_40309F
.text:00403068                 mov     ebx, [ebp+1Ch]
.text:0040306B                 test    ebx, ebx
.text:0040306D                 jz      short loc_4030A7
.text:0040306F                 mov     dword ptr [esp+0], offset loc_4026C1
.text:00403076
.text:00403076 loc_403076:                             ; CODE XREF: sub_402660+A4E↓j
.text:00403076                 call    ds:libintl_gettext
.text:0040307C                 mov     [esp+arg_8], esi
.text:00403080                 mov     ebx, [esp+arg_60]
.text:00403084                 mov     edx, ds:_iob
.text:0040308A                 mov     esi, [ebx]
.text:0040308C                 add     edx, 40h ; '@'
.text:0040308F                 mov     [esp+Str2], eax ; Format
.text:00403093                 mov     [esp+MaxCount], esi
.text:00403097                 mov     [esp+0], edx    ; Stream
.text:0040309A                 call    fprintf
.text:0040309F
.text:0040309F loc_40309F:                             ; CODE XREF: sub_402660+A06↑j
.text:0040309F                 mov     [ebp+8], edi
.text:004030A2                 jmp     loc_402A88
.text:004030A7 ; ---------------------------------------------------------------------------
.text:004030A7
.text:004030A7 loc_4030A7:                             ; CODE XREF: sub_402660+A0D↑j
.text:004030A7                 mov     dword ptr [esp+0], offset loc_4026DB
.text:004030AE                 jmp     short loc_403076
.text:004030B0 ; ---------------------------------------------------------------------------
.text:004030B0
.text:004030B0 loc_4030B0:                             ; CODE XREF: sub_402660+33E↑j
.text:004030B0                 mov     edi, [esp+arg_44]
.text:004030B4                 test    edi, edi
.text:004030B6                 jnz     short loc_4030CE
.text:004030B8
.text:004030B8 loc_4030B8:                             ; CODE XREF: sub_402660+AA4↓j
.text:004030B8                 mov     edx, [ebp+14h]
.text:004030BB                 mov     [esp+0], edx    ; Str
.text:004030BE                 call    strlen
.text:004030C3                 add     [ebp+14h], eax
.text:004030C6                 inc     dword ptr [ebp+0]
.text:004030C9                 jmp     loc_402C0E
.text:004030CE ; ---------------------------------------------------------------------------
.text:004030CE
.text:004030CE loc_4030CE:                             ; CODE XREF: sub_402660+A56↑j
.text:004030CE                 mov     dword ptr [esp+0], offset loc_4026F5
.text:004030D5                 call    ds:libintl_gettext
.text:004030DB                 mov     ebx, [ebp+0]
.text:004030DE                 mov     edi, [esp+arg_60]
.text:004030E2                 mov     ecx, [edi+ebx*4]
.text:004030E5                 mov     ebx, ds:_iob
.text:004030EB                 mov     [esp+arg_8], ecx
.text:004030EF                 mov     esi, [edi]
.text:004030F1                 add     ebx, 40h ; '@'
.text:004030F4                 mov     [esp+Str2], eax ; Format
.text:004030F8                 mov     [esp+0], ebx    ; Stream
.text:004030FB                 mov     [esp+MaxCount], esi
.text:004030FF                 call    fprintf
.text:00403104                 jmp     short loc_4030B8
.text:00403106 ; ---------------------------------------------------------------------------
.text:00403106
.text:00403106 loc_403106:                             ; CODE XREF: sub_402660+316↑j
.text:00403106                 mov     ecx, [ebp+14h]
.text:00403109                 mov     ebx, edi
.text:0040310B                 mov     edx, [esi]
.text:0040310D                 sub     ebx, ecx
.text:0040310F                 mov     [esp+0], edx    ; Str
.text:00403112                 call    strlen
.text:00403117                 cmp     ebx, eax
.text:00403119                 jz      short loc_403171
.text:0040311B                 mov     ebx, [esp+arg_40]
.text:0040311F                 test    ebx, ebx
.text:00403121                 jz      short loc_403160
.text:00403123                 mov     edx, [esp+arg_70]
.text:00403127                 test    edx, edx
.text:00403129                 jnz     short loc_403137
.text:0040312B                 mov     ecx, [esp+arg_40]
.text:0040312F                 mov     ebx, [esi+4]
.text:00403132                 cmp     [ecx+4], ebx
.text:00403135                 jz      short loc_403144
.text:00403137
.text:00403137 loc_403137:                             ; CODE XREF: sub_402660+AC9↑j
.text:00403137                                         ; sub_402660+AEA↓j ...
.text:00403137                 mov     [esp+arg_38], 1
.text:0040313F                 jmp     loc_40297C
.text:00403144 ; ---------------------------------------------------------------------------
.text:00403144
.text:00403144 loc_403144:                             ; CODE XREF: sub_402660+AD5↑j
.text:00403144                 mov     edx, [esi+8]
.text:00403147                 cmp     [ecx+8], edx
.text:0040314A                 jnz     short loc_403137
.text:0040314C                 mov     ebx, [esi+0Ch]
.text:0040314F                 cmp     [ecx+0Ch], ebx
.text:00403152                 jnz     short loc_403137
.text:00403154                 jmp     loc_40297C
.text:00403154 ; END OF FUNCTION CHUNK FOR sub_402660
.text:00403154 ; ---------------------------------------------------------------------------
.text:00403159                 align 10h
.text:00403160 ; START OF FUNCTION CHUNK FOR sub_402660
.text:00403160
.text:00403160 loc_403160:                             ; CODE XREF: sub_402660+AC1↑j
.text:00403160                 mov     [esp+arg_40], esi
.text:00403164                 mov     eax, [esp+arg_30]
.text:00403168                 mov     [esp+arg_34], eax
.text:0040316C                 jmp     loc_40297C
.text:00403171 ; ---------------------------------------------------------------------------
.text:00403171
.text:00403171 loc_403171:                             ; CODE XREF: sub_402660+AB9↑j
.text:00403171                 mov     [esp+arg_40], esi
.text:00403175                 mov     ecx, [esp+arg_30]
.text:00403179                 mov     [esp+arg_3C], 1
.text:00403181                 mov     [esp+arg_34], ecx
.text:00403185                 jmp     loc_402990
.text:0040318A ; ---------------------------------------------------------------------------
.text:0040318A
.text:0040318A loc_40318A:                             ; CODE XREF: sub_402660+28F↑j
.text:0040318A                 mov     eax, [esp+Str]
.text:0040318E                 movsx   esi, dl
.text:00403191                 mov     [esp+Str2], esi ; Val
.text:00403195                 mov     [esp+0], eax    ; Str
.text:00403198                 call    strchr
.text:0040319D                 test    eax, eax
.text:0040319F                 jnz     loc_402C50
.text:004031A5                 jmp     loc_4028F5
.text:004031AA ; ---------------------------------------------------------------------------
.text:004031AA
.text:004031AA loc_4031AA:                             ; CODE XREF: sub_402660+24C↑j
.text:004031AA                 mov     ecx, 1
.text:004031AF                 jmp     loc_4028B2
.text:004031B4 ; ---------------------------------------------------------------------------
.text:004031B4
.text:004031B4 loc_4031B4:                             ; CODE XREF: sub_402660+1A4↑j
.text:004031B4                                         ; sub_402660+200↑j
.text:004031B4                 mov     eax, [ebp+20h]
.text:004031B7                 cmp     eax, [ebp+24h]
.text:004031BA                 jz      loc_402890
.text:004031C0                 mov     [ebp+0], eax
.text:004031C3                 jmp     loc_402890
.text:004031C8 ; ---------------------------------------------------------------------------
.text:004031C8
.text:004031C8 loc_4031C8:                             ; CODE XREF: sub_402660+1CE↑j
.text:004031C8                 mov     [ebp+20h], eax
.text:004031CB                 jmp     loc_402850
.text:004031D0 ; ---------------------------------------------------------------------------
.text:004031D0
.text:004031D0 loc_4031D0:                             ; CODE XREF: sub_402660+19A↑j
.text:004031D0                 mov     edx, [ebp+20h]
.text:004031D3                 mov     eax, [ebp+24h]
.text:004031D6                 cmp     edx, eax
.text:004031D8                 jz      short loc_403250
.text:004031DA                 cmp     eax, ebx
.text:004031DC                 jz      short loc_4031F1
.text:004031DE                 mov     [esp+Str2], ebp
.text:004031E2                 mov     ebx, [esp+arg_60]
.text:004031E6                 mov     [esp+0], ebx
.text:004031E9                 call    sub_4033E0
.text:004031EE                 mov     ebx, [ebp+0]
.text:004031F1
.text:004031F1 loc_4031F1:                             ; CODE XREF: sub_402660+B7C↑j
.text:004031F1                                         ; sub_402660+BF2↓j ...
.text:004031F1                 cmp     ebx, [esp+arg_5C]
.text:004031F5                 jge     short loc_403240
.text:004031F7                 mov     esi, [esp+arg_60]
.text:004031FB                 mov     eax, [esi+ebx*4]
.text:004031FE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403201                 jz      short loc_403248
.text:00403203                 lea     esi, [esi+0]
.text:00403209                 lea     edi, [edi+0]
.text:00403210
.text:00403210 loc_403210:                             ; CODE XREF: sub_402660+BCC↓j
.text:00403210                                         ; sub_402660+BEC↓j
.text:00403210                 lea     eax, [ebx+1]
.text:00403213                 mov     ebx, eax
.text:00403215                 mov     [ebp+0], eax
.text:00403218                 cmp     eax, [esp+arg_5C]
.text:0040321C                 jge     short loc_403240
.text:0040321E                 mov     edi, [esp+arg_60]
.text:00403222                 mov     edx, [edi+eax*4]
.text:00403225                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00403228                 jz      short loc_403230
.text:0040322A
.text:0040322A loc_40322A:                             ; CODE XREF: sub_402660+BD4↓j
.text:0040322A                 mov     ebx, eax
.text:0040322C                 jmp     short loc_403210
.text:0040322C ; END OF FUNCTION CHUNK FOR sub_402660
.text:0040322C ; ---------------------------------------------------------------------------
.text:0040322E                 align 10h
.text:00403230 ; START OF FUNCTION CHUNK FOR sub_402660
.text:00403230
.text:00403230 loc_403230:                             ; CODE XREF: sub_402660+BC8↑j
.text:00403230                 cmp     byte ptr [edx+1], 0
.text:00403234                 jz      short loc_40322A
.text:00403236                 lea     esi, [esi+0]
.text:00403239                 lea     edi, [edi+0]
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_402660+B95↑j
.text:00403240                                         ; sub_402660+BBC↑j ...
.text:00403240                 mov     [ebp+24h], ebx
.text:00403243                 jmp     loc_402800
.text:00403248 ; ---------------------------------------------------------------------------
.text:00403248
.text:00403248 loc_403248:                             ; CODE XREF: sub_402660+BA1↑j
.text:00403248                 cmp     byte ptr [eax+1], 0
.text:0040324C                 jz      short loc_403210
.text:0040324E                 jmp     short loc_403240
.text:00403250 ; ---------------------------------------------------------------------------
.text:00403250
.text:00403250 loc_403250:                             ; CODE XREF: sub_402660+B78↑j
.text:00403250                 cmp     edx, ebx
.text:00403252                 jz      short loc_4031F1
.text:00403254                 mov     [ebp+20h], ebx
.text:00403257                 jmp     short loc_4031F1
.text:00403259 ; ---------------------------------------------------------------------------
.text:00403259
.text:00403259 loc_403259:                             ; CODE XREF: sub_402660+158↑j
.text:00403259                 mov     dword ptr [ebp+18h], 0
.text:00403260                 mov     esi, [esp+Str]
.text:00403264
.text:00403264 loc_403264:                             ; CODE XREF: sub_402660+C19↓j
.text:00403264                 inc     esi
.text:00403265                 jmp     loc_4027C8
.text:00403265 ; END OF FUNCTION CHUNK FOR sub_402660
.text:00403265 ; ---------------------------------------------------------------------------
.text:0040326A                 align 10h
.text:00403270 ; START OF FUNCTION CHUNK FOR sub_402660
.text:00403270
.text:00403270 loc_403270:                             ; CODE XREF: sub_402660+150↑j
.text:00403270                 mov     dword ptr [ebp+18h], 2
.text:00403277                 mov     esi, ecx
.text:00403279                 jmp     short loc_403264
.text:00403279 ; END OF FUNCTION CHUNK FOR sub_402660
.text:00403279 ; ---------------------------------------------------------------------------
.text:0040327B                 align 10h
.text:00403280 ; START OF FUNCTION CHUNK FOR sub_402660
.text:00403280
.text:00403280 loc_403280:                             ; CODE XREF: sub_402660+139↑j
.text:00403280                 mov     dword ptr [esp+0], offset loc_402713 ; VarName
.text:00403287                 call    getenv
.text:0040328C                 test    eax, eax
.text:0040328E                 jz      loc_4027A4
.text:00403294                 jmp     loc_40279F
.text:00403294 ; END OF FUNCTION CHUNK FOR sub_402660
.text:00403294 ; ---------------------------------------------------------------------------
.text:00403299                 align 10h
.text:004032A0 ; START OF FUNCTION CHUNK FOR sub_402660
.text:004032A0
.text:004032A0 loc_4032A0:                             ; CODE XREF: sub_402660:loc_40276F↑j
.text:004032A0                 mov     dword ptr [ebp+0], 1
.text:004032A7                 mov     ebx, 1
.text:004032AC                 jmp     loc_402780
.text:004032AC ; END OF FUNCTION CHUNK FOR sub_402660
.text:004032B1 ; ---------------------------------------------------------------------------
.text:004032B1                 jmp     short sub_4032C0
.text:004032B1 ; ---------------------------------------------------------------------------
.text:004032B3                 align 10h
.text:004032C0
.text:004032C0 ; =============== S U B R O U T I N E =======================================
.text:004032C0
.text:004032C0
.text:004032C0 sub_4032C0      proc near               ; CODE XREF: .text:004032B1↑j
.text:004032C0                                         ; sub_403A00+3A↓p ...
.text:004032C0
.text:004032C0 var_2C          = dword ptr -2Ch
.text:004032C0 var_28          = dword ptr -28h
.text:004032C0 var_24          = dword ptr -24h
.text:004032C0 var_20          = dword ptr -20h
.text:004032C0 var_1C          = dword ptr -1Ch
.text:004032C0 var_18          = dword ptr -18h
.text:004032C0 var_14          = dword ptr -14h
.text:004032C0 var_10          = dword ptr -10h
.text:004032C0 arg_0           = dword ptr  4
.text:004032C0 arg_4           = dword ptr  8
.text:004032C0 arg_8           = dword ptr  0Ch
.text:004032C0 arg_C           = dword ptr  10h
.text:004032C0 arg_10          = dword ptr  14h
.text:004032C0 arg_14          = dword ptr  18h
.text:004032C0 arg_18          = dword ptr  1Ch
.text:004032C0
.text:004032C0                 sub     esp, 2Ch
.text:004032C3                 mov     edx, dword_406010
.text:004032C9                 mov     [esp+2Ch+var_10], offset dword_407040
.text:004032D1                 mov     ecx, dword_406014
.text:004032D7                 mov     ds:dword_407040, edx
.text:004032DD                 mov     edx, [esp+2Ch+arg_18]
.text:004032E1                 mov     ds:dword_407044, ecx
.text:004032E7                 mov     ecx, [esp+2Ch+arg_14]
.text:004032EB                 mov     [esp+2Ch+var_14], edx
.text:004032EF                 mov     edx, [esp+2Ch+arg_10]
.text:004032F3                 mov     [esp+2Ch+var_18], ecx
.text:004032F7                 mov     ecx, [esp+2Ch+arg_C]
.text:004032FB                 mov     [esp+2Ch+var_1C], edx
.text:004032FF                 mov     edx, [esp+2Ch+arg_8]
.text:00403303                 mov     [esp+2Ch+var_20], ecx
.text:00403307                 mov     ecx, [esp+2Ch+arg_4]
.text:0040330B                 mov     [esp+2Ch+var_24], edx
.text:0040330F                 mov     edx, [esp+2Ch+arg_0]
.text:00403313                 mov     [esp+2Ch+var_28], ecx
.text:00403317                 mov     [esp+2Ch+var_2C], edx
.text:0040331A                 call    loc_402730
.text:0040331F                 mov     ecx, ds:dword_407040
.text:00403325                 mov     dword_406010, ecx
.text:0040332B                 mov     ecx, ds:dword_40704C
.text:00403331                 mov     ds:dword_4071F0, ecx
.text:00403337                 mov     ecx, ds:dword_407048
.text:0040333D                 mov     dword_406018, ecx
.text:00403343                 add     esp, 2Ch
.text:00403346                 retn
.text:00403346 sub_4032C0      endp
.text:00403346
.text:00403346 ; ---------------------------------------------------------------------------
.text:00403347                 align 10h
.text:00403350                 sub     esp, 2Ch
.text:00403353                 mov     edx, dword_406010
.text:00403359                 mov     dword ptr [esp+1Ch], offset dword_407040
.text:00403361                 mov     ecx, dword_406014
.text:00403367                 mov     dword ptr [esp+18h], 1
.text:0040336F                 mov     ds:dword_407040, edx
.text:00403375                 mov     edx, [esp+38h]
.text:00403379                 mov     ds:dword_407044, ecx
.text:0040337F                 mov     ecx, [esp+34h]
.text:00403383                 mov     [esp+8], edx
.text:00403387                 mov     edx, [esp+30h]
.text:0040338B                 mov     [esp+4], ecx
.text:0040338F                 mov     dword ptr [esp+14h], 0
.text:00403397                 mov     dword ptr [esp+10h], 0
.text:0040339F                 mov     dword ptr [esp+0Ch], 0
.text:004033A7                 mov     [esp], edx
.text:004033AA                 call    loc_402730
.text:004033AF                 mov     ecx, ds:dword_407040
.text:004033B5                 mov     dword_406010, ecx
.text:004033BB                 mov     ecx, ds:dword_40704C
.text:004033C1                 mov     ds:dword_4071F0, ecx
.text:004033C7                 mov     ecx, ds:dword_407048
.text:004033CD                 mov     dword_406018, ecx
.text:004033D3                 add     esp, 2Ch
.text:004033D6                 retn
.text:004033D6 ; ---------------------------------------------------------------------------
.text:004033D7                 align 10h
.text:004033E0
.text:004033E0 ; =============== S U B R O U T I N E =======================================
.text:004033E0
.text:004033E0
.text:004033E0 sub_4033E0      proc near               ; CODE XREF: sub_402660+1E3↑p
.text:004033E0                                         ; sub_402660+B89↑p
.text:004033E0
.text:004033E0 var_2C          = dword ptr -2Ch
.text:004033E0 var_28          = dword ptr -28h
.text:004033E0 var_24          = dword ptr -24h
.text:004033E0 var_20          = dword ptr -20h
.text:004033E0 var_1C          = dword ptr -1Ch
.text:004033E0 var_18          = dword ptr -18h
.text:004033E0 var_14          = dword ptr -14h
.text:004033E0 arg_0           = dword ptr  4
.text:004033E0 arg_4           = dword ptr  8
.text:004033E0
.text:004033E0                 push    ebp
.text:004033E1                 push    edi
.text:004033E2                 push    esi
.text:004033E3                 push    ebx
.text:004033E4                 sub     esp, 1Ch
.text:004033E7                 mov     ecx, [esp+2Ch+arg_4]
.text:004033EB                 mov     eax, [esp+2Ch+arg_4]
.text:004033EF                 mov     ebx, [esp+2Ch+arg_4]
.text:004033F3                 mov     edx, [ecx+20h]
.text:004033F6                 mov     edi, [esp+2Ch+arg_0]
.text:004033FA                 mov     ecx, [ebx]
.text:004033FC                 mov     [esp+2Ch+var_2C], edx
.text:004033FF                 mov     [esp+2Ch+var_14], edx
.text:00403403                 mov     edx, [eax+24h]
.text:00403406                 mov     [esp+2Ch+var_28], ecx
.text:0040340A                 mov     [esp+2Ch+var_1C], ecx
.text:0040340E                 cmp     ecx, edx
.text:00403410                 mov     [esp+2Ch+var_18], edx
.text:00403414                 jle     short loc_403490
.text:00403416                 mov     esi, [esp+2Ch+var_2C]
.text:00403419                 cmp     edx, esi
.text:0040341B                 jle     short loc_403490
.text:0040341D                 lea     esi, [esi+0]
.text:00403420
.text:00403420 loc_403420:                             ; CODE XREF: sub_4033E0+A1↓j
.text:00403420                 mov     ebx, [esp+2Ch+var_1C]
.text:00403424                 mov     edx, [esp+2Ch+var_18]
.text:00403428                 mov     ebp, [esp+2Ch+var_18]
.text:0040342C                 mov     eax, [esp+2Ch+var_14]
.text:00403430                 sub     ebx, edx
.text:00403432                 mov     [esp+2Ch+var_20], ebx
.text:00403436                 sub     ebp, eax
.text:00403438                 cmp     ebx, ebp
.text:0040343A                 jle     short loc_4034B5
.text:0040343C                 xor     esi, esi
.text:0040343E                 cmp     esi, ebp
.text:00403440                 jge     short loc_40346D
.text:00403442                 mov     ecx, [esp+2Ch+var_1C]
.text:00403446                 sub     ecx, ebp
.text:00403448                 mov     [esp+2Ch+var_24], ecx
.text:0040344C                 lea     esi, [esi+0]
.text:00403450
.text:00403450 loc_403450:                             ; CODE XREF: sub_4033E0+8B↓j
.text:00403450                 mov     ecx, [esp+2Ch+var_14]
.text:00403454                 mov     edx, [esp+2Ch+var_24]
.text:00403458                 add     ecx, esi
.text:0040345A                 add     edx, esi
.text:0040345C                 mov     ebx, [edi+ecx*4]
.text:0040345F                 mov     eax, [edi+edx*4]
.text:00403462                 inc     esi
.text:00403463                 cmp     esi, ebp
.text:00403465                 mov     [edi+ecx*4], eax
.text:00403468                 mov     [edi+edx*4], ebx
.text:0040346B                 jl      short loc_403450
.text:0040346D
.text:0040346D loc_40346D:                             ; CODE XREF: sub_4033E0+60↑j
.text:0040346D                 sub     [esp+2Ch+var_1C], ebp
.text:00403471
.text:00403471 loc_403471:                             ; CODE XREF: sub_4033E0+107↓j
.text:00403471                 mov     eax, [esp+2Ch+var_18]
.text:00403475                 cmp     [esp+2Ch+var_1C], eax
.text:00403479                 jle     short loc_403490
.text:0040347B                 mov     ebp, [esp+2Ch+var_14]
.text:0040347F                 cmp     eax, ebp
.text:00403481                 jg      short loc_403420
.text:00403483                 lea     esi, [esi+0]
.text:00403489                 lea     edi, [edi+0]
.text:00403490
.text:00403490 loc_403490:                             ; CODE XREF: sub_4033E0+34↑j
.text:00403490                                         ; sub_4033E0+3B↑j ...
.text:00403490                 mov     esi, [esp+2Ch+var_28]
.text:00403494                 mov     ecx, [esp+2Ch+var_18]
.text:00403498                 mov     eax, [esp+2Ch+var_2C]
.text:0040349B                 mov     edi, [esp+2Ch+arg_4]
.text:0040349F                 mov     edx, [esp+2Ch+var_28]
.text:004034A3                 sub     esi, ecx
.text:004034A5                 add     esi, eax
.text:004034A7                 mov     [edi+20h], esi
.text:004034AA                 mov     [edi+24h], edx
.text:004034AD                 add     esp, 1Ch
.text:004034B0                 pop     ebx
.text:004034B1                 pop     esi
.text:004034B2                 pop     edi
.text:004034B3                 pop     ebp
.text:004034B4                 retn
.text:004034B5 ; ---------------------------------------------------------------------------
.text:004034B5
.text:004034B5 loc_4034B5:                             ; CODE XREF: sub_4033E0+5A↑j
.text:004034B5                 xor     esi, esi
.text:004034B7                 cmp     esi, [esp+2Ch+var_20]
.text:004034BB                 jge     short loc_4034DF
.text:004034BD                 lea     esi, [esi+0]
.text:004034C0
.text:004034C0 loc_4034C0:                             ; CODE XREF: sub_4033E0+FD↓j
.text:004034C0                 mov     ebx, [esp+2Ch+var_14]
.text:004034C4                 mov     ebp, [esp+2Ch+var_18]
.text:004034C8                 add     ebx, esi
.text:004034CA                 add     ebp, esi
.text:004034CC                 mov     edx, [edi+ebx*4]
.text:004034CF                 inc     esi
.text:004034D0                 cmp     esi, [esp+2Ch+var_20]
.text:004034D4                 mov     ecx, [edi+ebp*4]
.text:004034D7                 mov     [edi+ebx*4], ecx
.text:004034DA                 mov     [edi+ebp*4], edx
.text:004034DD                 jl      short loc_4034C0
.text:004034DF
.text:004034DF loc_4034DF:                             ; CODE XREF: sub_4033E0+DB↑j
.text:004034DF                 mov     esi, [esp+2Ch+var_20]
.text:004034E3                 add     [esp+2Ch+var_14], esi
.text:004034E7                 jmp     short loc_403471
.text:004034E7 sub_4033E0      endp
.text:004034E7
.text:004034E7 ; ---------------------------------------------------------------------------
.text:004034E9                 align 20h
.text:00403500 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403500                                         ; DATA XREF: .data:Buffer↓o
.text:00403532 ; const char Format[]
.text:00403532 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4037F0+50↓o
.text:0040353E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040353E                                         ; DATA XREF: sub_4037F0:loc_403891↓o
.text:0040354E                 align 20h
.text:00403560 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403560                                         ; DATA XREF: sub_4037F0+100↓o
.text:00403560                 db 'ere is NO',0Ah
.text:00403560                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403560                 db 'R PURPOSE.',0Ah,0
.text:004035F8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:004035F8                                         ; DATA XREF: sub_4037F0:loc_403931↓o
.text:0040360F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040360F                                         ; DATA XREF: sub_4037F0:loc_40393D↓o
.text:0040362B                 align 20h
.text:00403640 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403640                                         ; DATA XREF: sub_4037F0:loc_403949↓o
.text:00403640                 db 'and %s.',0Ah,0
.text:00403660 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403660                                         ; DATA XREF: sub_4037F0:loc_403955↓o
.text:00403660                 db '%s, and %s.',0Ah,0
.text:00403684                 align 20h
.text:004036A0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004036A0                                         ; DATA XREF: sub_4037F0:loc_403961↓o
.text:004036A0                 db '%s, %s, and %s.',0Ah,0
.text:004036C8                 align 20h
.text:004036E0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:004036E0                                         ; DATA XREF: sub_4037F0:loc_40396D↓o
.text:004036E0                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040370C                 align 20h
.text:00403720 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403720                                         ; DATA XREF: sub_4037F0:loc_403979↓o
.text:00403720                 db '%s, %s, %s, %s,',0Ah
.text:00403720                 db 'and %s.',0Ah,0
.text:00403750                 align 20h
.text:00403760 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403760                                         ; DATA XREF: sub_4037F0:loc_403985↓o
.text:00403760                 db '%s, %s, %s, %s,',0Ah
.text:00403760                 db '%s, and %s.',0Ah,0
.text:00403794                 align 10h
.text:004037A0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004037A0                                         ; DATA XREF: sub_4037F0:def_40385D↓o
.text:004037A0                 db '%s, %s, %s, %s,',0Ah
.text:004037A0                 db '%s, %s, and others.',0Ah,0
.text:004037DC ; const char aSS[]
.text:004037DC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_4037F0+1B5↓o
.text:004037E3                 align 10h
.text:004037F0
.text:004037F0 ; =============== S U B R O U T I N E =======================================
.text:004037F0
.text:004037F0
.text:004037F0 ; int __cdecl sub_4037F0(FILE *, FILE *, int, int, va_list)
.text:004037F0 sub_4037F0      proc near               ; CODE XREF: sub_4039C0+2A↓p
.text:004037F0
.text:004037F0 Stream          = dword ptr -2Ch
.text:004037F0 Format          = dword ptr -28h
.text:004037F0 ArgList         = dword ptr -24h
.text:004037F0 var_20          = dword ptr -20h
.text:004037F0 var_1C          = dword ptr -1Ch
.text:004037F0 var_14          = dword ptr -14h
.text:004037F0 arg_0           = dword ptr  4
.text:004037F0 arg_4           = dword ptr  8
.text:004037F0 arg_8           = dword ptr  0Ch
.text:004037F0 arg_C           = dword ptr  10h
.text:004037F0 arg_10          = dword ptr  14h
.text:004037F0
.text:004037F0                 push    ebp
.text:004037F1                 push    edi
.text:004037F2                 push    esi
.text:004037F3                 push    ebx
.text:004037F4                 sub     esp, 1Ch
.text:004037F7                 xor     ebx, ebx
.text:004037F9                 mov     edi, [esp+2Ch+arg_10]
.text:004037FD                 mov     edx, [esp+2Ch+arg_8]
.text:00403801                 mov     esi, [esp+2Ch+arg_0]
.text:00403805                 mov     eax, [edi]
.text:00403807                 mov     ecx, [esp+2Ch+arg_4]
.text:0040380B                 mov     [esp+2Ch+var_14], edx
.text:0040380F                 mov     ebp, [esp+2Ch+arg_C]
.text:00403813                 lea     edx, [edi+4]
.text:00403816                 test    eax, eax
.text:00403818                 jz      short loc_40382C
.text:0040381A                 lea     esi, [esi+0]
.text:00403820
.text:00403820 loc_403820:                             ; CODE XREF: sub_4037F0+3A↓j
.text:00403820                 mov     eax, edx
.text:00403822                 inc     ebx
.text:00403823                 mov     eax, [eax]
.text:00403825                 add     edx, 4
.text:00403828                 test    eax, eax
.text:0040382A                 jnz     short loc_403820
.text:0040382C
.text:0040382C loc_40382C:                             ; CODE XREF: sub_4037F0+28↑j
.text:0040382C                 test    ecx, ecx
.text:0040382E                 jz      loc_40399D
.text:00403834                 mov     [esp+2Ch+var_1C], ebp
.text:00403838                 mov     edx, [esp+2Ch+var_14]
.text:0040383C                 mov     [esp+2Ch+ArgList], ecx
.text:00403840                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00403848                 mov     [esp+2Ch+var_20], edx
.text:0040384C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040384F                 call    fprintf
.text:00403854
.text:00403854 loc_403854:                             ; CODE XREF: sub_4037F0+1C9↓j
.text:00403854                 cmp     ebx, 9          ; switch 10 cases
.text:00403857                 ja      def_40385D      ; jumptable 0040385D default case
.text:0040385D                 jmp     ds:jpt_40385D[ebx*4] ; switch jump
.text:0040385D ; ---------------------------------------------------------------------------
.text:00403864 jpt_40385D      dd offset loc_40388C    ; DATA XREF: sub_4037F0+6D↑r
.text:00403864                 dd offset loc_403891    ; jump table for switch statement
.text:00403864                 dd offset loc_403931
.text:00403864                 dd offset loc_40393D
.text:00403864                 dd offset loc_403949
.text:00403864                 dd offset loc_403955
.text:00403864                 dd offset loc_403961
.text:00403864                 dd offset loc_40396D
.text:00403864                 dd offset loc_403979
.text:00403864                 dd offset loc_403985
.text:0040388C ; ---------------------------------------------------------------------------
.text:0040388C
.text:0040388C loc_40388C:                             ; CODE XREF: sub_4037F0+6D↑j
.text:0040388C                                         ; DATA XREF: sub_4037F0:jpt_40385D↑o
.text:0040388C                 call    abort           ; jumptable 0040385D case 0
.text:00403891 ; ---------------------------------------------------------------------------
.text:00403891
.text:00403891 loc_403891:                             ; CODE XREF: sub_4037F0+6D↑j
.text:00403891                                         ; DATA XREF: sub_4037F0:jpt_40385D↑o
.text:00403891                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040385D case 1
.text:00403898                 nop
.text:00403899                 lea     esi, [esi+0]
.text:004038A0
.text:004038A0 loc_4038A0:                             ; CODE XREF: sub_4037F0+148↓j
.text:004038A0                                         ; sub_4037F0+154↓j ...
.text:004038A0                 call    ds:libintl_gettext
.text:004038A6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004038AA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004038AD                 mov     [esp+2Ch+Format], eax ; Format
.text:004038B1                 call    vfprintf
.text:004038B6                 mov     ebx, [esi+4]
.text:004038B9                 dec     ebx
.text:004038BA                 test    ebx, ebx
.text:004038BC                 mov     [esi+4], ebx
.text:004038BF                 js      short loc_40391F
.text:004038C1                 mov     edi, [esi]
.text:004038C3                 mov     byte ptr [edi], 0Ah
.text:004038C6                 inc     dword ptr [esi]
.text:004038C8
.text:004038C8 loc_4038C8:                             ; CODE XREF: sub_4037F0+13F↓j
.text:004038C8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004038CC                 mov     edx, Buffer
.text:004038D2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004038D5                 call    fputs
.text:004038DA                 mov     ebp, [esi+4]
.text:004038DD                 dec     ebp
.text:004038DE                 test    ebp, ebp
.text:004038E0                 mov     [esi+4], ebp
.text:004038E3                 js      short loc_40390D
.text:004038E5                 mov     ecx, [esi]
.text:004038E7                 mov     byte ptr [ecx], 0Ah
.text:004038EA                 inc     dword ptr [esi]
.text:004038EC
.text:004038EC loc_4038EC:                             ; CODE XREF: sub_4037F0+12D↓j
.text:004038EC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004038F0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:004038F7                 call    ds:libintl_gettext
.text:004038FD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403901                 add     esp, 1Ch
.text:00403904                 pop     ebx
.text:00403905                 pop     esi
.text:00403906                 pop     edi
.text:00403907                 pop     ebp
.text:00403908                 jmp     fputs
.text:0040390D ; ---------------------------------------------------------------------------
.text:0040390D
.text:0040390D loc_40390D:                             ; CODE XREF: sub_4037F0+F3↑j
.text:0040390D                 mov     [esp+2Ch+Format], esi ; File
.text:00403911                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403918                 call    _flsbuf
.text:0040391D                 jmp     short loc_4038EC
.text:0040391F ; ---------------------------------------------------------------------------
.text:0040391F
.text:0040391F loc_40391F:                             ; CODE XREF: sub_4037F0+CF↑j
.text:0040391F                 mov     [esp+2Ch+Format], esi ; File
.text:00403923                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040392A                 call    _flsbuf
.text:0040392F                 jmp     short loc_4038C8
.text:00403931 ; ---------------------------------------------------------------------------
.text:00403931
.text:00403931 loc_403931:                             ; CODE XREF: sub_4037F0+6D↑j
.text:00403931                                         ; DATA XREF: sub_4037F0:jpt_40385D↑o
.text:00403931                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040385D case 2
.text:00403938                 jmp     loc_4038A0
.text:0040393D ; ---------------------------------------------------------------------------
.text:0040393D
.text:0040393D loc_40393D:                             ; CODE XREF: sub_4037F0+6D↑j
.text:0040393D                                         ; DATA XREF: sub_4037F0:jpt_40385D↑o
.text:0040393D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040385D case 3
.text:00403944                 jmp     loc_4038A0
.text:00403949 ; ---------------------------------------------------------------------------
.text:00403949
.text:00403949 loc_403949:                             ; CODE XREF: sub_4037F0+6D↑j
.text:00403949                                         ; DATA XREF: sub_4037F0:jpt_40385D↑o
.text:00403949                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040385D case 4
.text:00403950                 jmp     loc_4038A0
.text:00403955 ; ---------------------------------------------------------------------------
.text:00403955
.text:00403955 loc_403955:                             ; CODE XREF: sub_4037F0+6D↑j
.text:00403955                                         ; DATA XREF: sub_4037F0:jpt_40385D↑o
.text:00403955                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040385D case 5
.text:0040395C                 jmp     loc_4038A0
.text:00403961 ; ---------------------------------------------------------------------------
.text:00403961
.text:00403961 loc_403961:                             ; CODE XREF: sub_4037F0+6D↑j
.text:00403961                                         ; DATA XREF: sub_4037F0:jpt_40385D↑o
.text:00403961                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040385D case 6
.text:00403968                 jmp     loc_4038A0
.text:0040396D ; ---------------------------------------------------------------------------
.text:0040396D
.text:0040396D loc_40396D:                             ; CODE XREF: sub_4037F0+6D↑j
.text:0040396D                                         ; DATA XREF: sub_4037F0:jpt_40385D↑o
.text:0040396D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040385D case 7
.text:00403974                 jmp     loc_4038A0
.text:00403979 ; ---------------------------------------------------------------------------
.text:00403979
.text:00403979 loc_403979:                             ; CODE XREF: sub_4037F0+6D↑j
.text:00403979                                         ; DATA XREF: sub_4037F0:jpt_40385D↑o
.text:00403979                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040385D case 8
.text:00403980                 jmp     loc_4038A0
.text:00403985 ; ---------------------------------------------------------------------------
.text:00403985
.text:00403985 loc_403985:                             ; CODE XREF: sub_4037F0+6D↑j
.text:00403985                                         ; DATA XREF: sub_4037F0:jpt_40385D↑o
.text:00403985                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040385D case 9
.text:0040398C                 jmp     loc_4038A0
.text:00403991 ; ---------------------------------------------------------------------------
.text:00403991
.text:00403991 def_40385D:                             ; CODE XREF: sub_4037F0+67↑j
.text:00403991                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040385D default case
.text:00403998                 jmp     loc_4038A0
.text:0040399D ; ---------------------------------------------------------------------------
.text:0040399D
.text:0040399D loc_40399D:                             ; CODE XREF: sub_4037F0+3E↑j
.text:0040399D                 mov     [esp+2Ch+var_20], ebp
.text:004039A1                 mov     ecx, [esp+2Ch+var_14]
.text:004039A5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:004039AD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004039B0                 mov     [esp+2Ch+ArgList], ecx
.text:004039B4                 call    fprintf
.text:004039B9                 jmp     loc_403854
.text:004039B9 sub_4037F0      endp
.text:004039B9
.text:004039B9 ; ---------------------------------------------------------------------------
.text:004039BE                 align 10h
.text:004039C0
.text:004039C0 ; =============== S U B R O U T I N E =======================================
.text:004039C0
.text:004039C0
.text:004039C0 ; int __cdecl sub_4039C0(FILE *, FILE *, int, int, char)
.text:004039C0 sub_4039C0      proc near               ; CODE XREF: sub_401670+16E↑p
.text:004039C0
.text:004039C0 var_1C          = dword ptr -1Ch
.text:004039C0 var_18          = dword ptr -18h
.text:004039C0 var_14          = dword ptr -14h
.text:004039C0 var_10          = dword ptr -10h
.text:004039C0 var_C           = dword ptr -0Ch
.text:004039C0 arg_0           = dword ptr  4
.text:004039C0 arg_4           = dword ptr  8
.text:004039C0 arg_8           = dword ptr  0Ch
.text:004039C0 arg_C           = dword ptr  10h
.text:004039C0 arg_10          = byte ptr  14h
.text:004039C0
.text:004039C0                 sub     esp, 1Ch
.text:004039C3                 mov     edx, [esp+1Ch+arg_C]
.text:004039C7                 lea     ecx, [esp+1Ch+arg_10]
.text:004039CB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:004039CF                 mov     ecx, [esp+1Ch+arg_8]
.text:004039D3                 mov     [esp+1Ch+var_10], edx ; int
.text:004039D7                 mov     edx, [esp+1Ch+arg_4]
.text:004039DB                 mov     [esp+1Ch+var_14], ecx ; int
.text:004039DF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:004039E3                 mov     edx, [esp+1Ch+arg_0]
.text:004039E7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:004039EA                 call    sub_4037F0
.text:004039EF                 add     esp, 1Ch
.text:004039F2                 retn
.text:004039F2 sub_4039C0      endp
.text:004039F2
.text:004039F2 ; ---------------------------------------------------------------------------
.text:004039F3                 align 10h
.text:00403A00
.text:00403A00 ; =============== S U B R O U T I N E =======================================
.text:00403A00
.text:00403A00
.text:00403A00 sub_403A00      proc near               ; CODE XREF: sub_401670+9F↑p
.text:00403A00
.text:00403A00 var_1C          = dword ptr -1Ch
.text:00403A00 var_18          = dword ptr -18h
.text:00403A00 var_14          = dword ptr -14h
.text:00403A00 var_10          = dword ptr -10h
.text:00403A00 var_C           = dword ptr -0Ch
.text:00403A00 var_8           = dword ptr -8
.text:00403A00 var_4           = dword ptr -4
.text:00403A00 arg_0           = dword ptr  4
.text:00403A00 arg_4           = dword ptr  8
.text:00403A00 arg_8           = dword ptr  0Ch
.text:00403A00 arg_C           = dword ptr  10h
.text:00403A00 arg_10          = dword ptr  14h
.text:00403A00
.text:00403A00                 sub     esp, 1Ch
.text:00403A03                 mov     edx, [esp+1Ch+arg_C]
.text:00403A07                 mov     [esp+1Ch+var_4], 0
.text:00403A0F                 mov     ecx, [esp+1Ch+arg_10]
.text:00403A13                 mov     [esp+1Ch+var_8], 0
.text:00403A1B                 mov     [esp+1Ch+var_10], edx
.text:00403A1F                 mov     edx, [esp+1Ch+arg_4]
.text:00403A23                 mov     [esp+1Ch+var_C], ecx
.text:00403A27                 mov     ecx, [esp+1Ch+arg_8]
.text:00403A2B                 mov     [esp+1Ch+var_18], edx
.text:00403A2F                 mov     edx, [esp+1Ch+arg_0]
.text:00403A33                 mov     [esp+1Ch+var_14], ecx
.text:00403A37                 mov     [esp+1Ch+var_1C], edx
.text:00403A3A                 call    sub_4032C0
.text:00403A3F                 add     esp, 1Ch
.text:00403A42                 retn
.text:00403A42 sub_403A00      endp
.text:00403A42
.text:00403A42 ; ---------------------------------------------------------------------------
.text:00403A43                 align 10h
.text:00403A50                 sub     esp, 2Ch
.text:00403A53                 mov     edx, [esp+44h]
.text:00403A57                 mov     dword ptr [esp+18h], 0
.text:00403A5F                 mov     ecx, [esp+40h]
.text:00403A63                 mov     dword ptr [esp+14h], 0
.text:00403A6B                 mov     [esp+1Ch], edx
.text:00403A6F                 mov     edx, [esp+3Ch]
.text:00403A73                 mov     [esp+10h], ecx
.text:00403A77                 mov     ecx, [esp+38h]
.text:00403A7B                 mov     [esp+0Ch], edx
.text:00403A7F                 mov     edx, [esp+34h]
.text:00403A83                 mov     [esp+8], ecx
.text:00403A87                 mov     [esp+4], edx
.text:00403A8B                 mov     edx, [esp+30h]
.text:00403A8F                 mov     [esp], edx
.text:00403A92                 call    loc_402730
.text:00403A97                 add     esp, 2Ch
.text:00403A9A                 retn
.text:00403A9A ; ---------------------------------------------------------------------------
.text:00403A9B                 align 10h
.text:00403AA0                 sub     esp, 1Ch
.text:00403AA3                 mov     edx, [esp+2Ch]
.text:00403AA7                 mov     dword ptr [esp+18h], 0
.text:00403AAF                 mov     ecx, [esp+30h]
.text:00403AB3                 mov     dword ptr [esp+14h], 1
.text:00403ABB                 mov     [esp+0Ch], edx
.text:00403ABF                 mov     edx, [esp+24h]
.text:00403AC3                 mov     [esp+10h], ecx
.text:00403AC7                 mov     ecx, [esp+28h]
.text:00403ACB                 mov     [esp+4], edx
.text:00403ACF                 mov     edx, [esp+20h]
.text:00403AD3                 mov     [esp+8], ecx
.text:00403AD7                 mov     [esp], edx
.text:00403ADA                 call    sub_4032C0
.text:00403ADF                 add     esp, 1Ch
.text:00403AE2                 retn
.text:00403AE2 ; ---------------------------------------------------------------------------
.text:00403AE3                 align 10h
.text:00403AF0                 sub     esp, 2Ch
.text:00403AF3                 mov     edx, [esp+44h]
.text:00403AF7                 mov     dword ptr [esp+18h], 0
.text:00403AFF                 mov     ecx, [esp+40h]
.text:00403B03                 mov     dword ptr [esp+14h], 1
.text:00403B0B                 mov     [esp+1Ch], edx
.text:00403B0F                 mov     edx, [esp+3Ch]
.text:00403B13                 mov     [esp+10h], ecx
.text:00403B17                 mov     ecx, [esp+38h]
.text:00403B1B                 mov     [esp+0Ch], edx
.text:00403B1F                 mov     edx, [esp+34h]
.text:00403B23                 mov     [esp+8], ecx
.text:00403B27                 mov     [esp+4], edx
.text:00403B2B                 mov     edx, [esp+30h]
.text:00403B2F                 mov     [esp], edx
.text:00403B32                 call    loc_402730
.text:00403B37                 add     esp, 2Ch
.text:00403B3A                 retn
.text:00403B3A ; ---------------------------------------------------------------------------
.text:00403B3B                 align 10h
.text:00403B40                 mov     edx, [esp+4]
.text:00403B44                 mov     ds:dword_407070, edx
.text:00403B4A                 retn
.text:00403B4A ; ---------------------------------------------------------------------------
.text:00403B4B aWriteError_0   db 'write error',0      ; DATA XREF: sub_403B70:loc_403BB9↓o
.text:00403B57 ; const char aSS_0[]
.text:00403B57 aSS_0           db '%s: %s',0           ; DATA XREF: sub_403B70+77↓o
.text:00403B5E ; const char aS_2[]
.text:00403B5E aS_2            db '%s',0               ; DATA XREF: sub_403B70+A0↓o
.text:00403B61 ; ---------------------------------------------------------------------------
.text:00403B61                 jmp     short sub_403B70
.text:00403B61 ; ---------------------------------------------------------------------------
.text:00403B63                 align 10h
.text:00403B70
.text:00403B70 ; =============== S U B R O U T I N E =======================================
.text:00403B70
.text:00403B70
.text:00403B70 ; void __cdecl sub_403B70()
.text:00403B70 sub_403B70      proc near               ; CODE XREF: .text:00403B61↑j
.text:00403B70                                         ; DATA XREF: sub_401670+61↑o
.text:00403B70
.text:00403B70 Stream          = dword ptr -2Ch
.text:00403B70 ErrorMessage    = dword ptr -28h
.text:00403B70 var_24          = dword ptr -24h
.text:00403B70 var_20          = byte ptr -20h
.text:00403B70 var_1C          = dword ptr -1Ch
.text:00403B70 var_9           = byte ptr -9
.text:00403B70
.text:00403B70                 push    esi
.text:00403B71                 push    ebx
.text:00403B72                 sub     esp, 24h
.text:00403B75                 mov     edx, ds:_iob
.text:00403B7B                 mov     ecx, [edx+2Ch]
.text:00403B7E                 lea     esi, [edx+20h]
.text:00403B81                 shr     ecx, 5
.text:00403B84                 mov     bl, cl
.text:00403B86                 mov     ecx, [edx+20h]
.text:00403B89                 and     bl, 1
.text:00403B8C                 cmp     ecx, [esi+8]
.text:00403B8F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403B92                 setz    [esp+2Ch+var_9]
.text:00403B97                 call    fclose
.text:00403B9C                 test    eax, eax
.text:00403B9E                 setnz   al
.text:00403BA1                 test    bl, bl
.text:00403BA3                 jnz     loc_403C33
.text:00403BA9                 test    al, al
.text:00403BAB                 jz      short loc_403C00
.text:00403BAD
.text:00403BAD loc_403BAD:                             ; CODE XREF: sub_403B70+CD↓j
.text:00403BAD                 call    _errno
.text:00403BB2                 mov     esi, [eax]
.text:00403BB4
.text:00403BB4 loc_403BB4:                             ; CODE XREF: sub_403B70+C7↓j
.text:00403BB4                 cmp     esi, 9
.text:00403BB7                 jz      short loc_403C26
.text:00403BB9
.text:00403BB9 loc_403BB9:                             ; CODE XREF: sub_403B70+B8↓j
.text:00403BB9                                         ; sub_403B70+C1↓j
.text:00403BB9                 mov     [esp+2Ch+Stream], offset aWriteError_0 ; "write error"
.text:00403BC0                 call    ds:libintl_gettext
.text:00403BC6                 mov     ebx, eax
.text:00403BC8                 mov     eax, ds:dword_407070
.text:00403BCD                 test    eax, eax
.text:00403BCF                 jz      short loc_403C06
.text:00403BD1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403BD4                 call    sub_405050
.text:00403BD9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00403BDD                 mov     edx, Code
.text:00403BE3                 mov     [esp+2Ch+var_1C], ebx
.text:00403BE7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00403BEF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403BF3                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403BF6                 call    sub_405370
.text:00403BFB                 nop
.text:00403BFC                 lea     esi, [esi+0]
.text:00403C00
.text:00403C00 loc_403C00:                             ; CODE XREF: sub_403B70+3B↑j
.text:00403C00                                         ; sub_403B70+B4↓j ...
.text:00403C00                 add     esp, 24h
.text:00403C03                 pop     ebx
.text:00403C04                 pop     esi
.text:00403C05                 retn
.text:00403C06 ; ---------------------------------------------------------------------------
.text:00403C06
.text:00403C06 loc_403C06:                             ; CODE XREF: sub_403B70+5F↑j
.text:00403C06                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00403C0A                 mov     ebx, Code
.text:00403C10                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00403C18                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403C1C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00403C1F                 call    sub_405370
.text:00403C24                 jmp     short loc_403C00
.text:00403C26 ; ---------------------------------------------------------------------------
.text:00403C26
.text:00403C26 loc_403C26:                             ; CODE XREF: sub_403B70+47↑j
.text:00403C26                 test    bl, bl
.text:00403C28                 jnz     short loc_403BB9
.text:00403C2A                 cmp     [esp+2Ch+var_9], 0
.text:00403C2F                 jnz     short loc_403C00
.text:00403C31                 jmp     short loc_403BB9
.text:00403C33 ; ---------------------------------------------------------------------------
.text:00403C33
.text:00403C33 loc_403C33:                             ; CODE XREF: sub_403B70+33↑j
.text:00403C33                 xor     esi, esi
.text:00403C35                 test    al, al
.text:00403C37                 jz      loc_403BB4
.text:00403C3D                 jmp     loc_403BAD
.text:00403C3D sub_403B70      endp
.text:00403C3D
.text:00403C3D ; ---------------------------------------------------------------------------
.text:00403C42                 align 10h
.text:00403C50
.text:00403C50 ; =============== S U B R O U T I N E =======================================
.text:00403C50
.text:00403C50
.text:00403C50 sub_403C50      proc near               ; CODE XREF: sub_401CA0+31↑p
.text:00403C50
.text:00403C50 Size            = dword ptr -0Ch
.text:00403C50 var_4           = dword ptr -4
.text:00403C50 arg_0           = dword ptr  4
.text:00403C50 arg_4           = dword ptr  8
.text:00403C50
.text:00403C50                 sub     esp, 0Ch
.text:00403C53                 xor     edx, edx
.text:00403C55                 mov     ecx, [esp+0Ch+arg_4]
.text:00403C59                 mov     [esp+0Ch+var_4], ebx
.text:00403C5D                 mov     eax, 0FFFFFFFFh
.text:00403C62                 mov     ebx, [esp+0Ch+arg_0]
.text:00403C66                 div     ecx
.text:00403C68                 cmp     eax, ebx
.text:00403C6A                 jb      short loc_403C89
.text:00403C6C                 mov     edx, ebx
.text:00403C6E                 imul    edx, ecx
.text:00403C71                 mov     [esp+0Ch+Size], edx ; Size
.text:00403C74                 call    malloc
.text:00403C79                 test    eax, eax
.text:00403C7B                 jz      short loc_403C85
.text:00403C7D
.text:00403C7D loc_403C7D:                             ; CODE XREF: sub_403C50+37↓j
.text:00403C7D                 mov     ebx, [esp+0Ch+var_4]
.text:00403C81                 add     esp, 0Ch
.text:00403C84                 retn
.text:00403C85 ; ---------------------------------------------------------------------------
.text:00403C85
.text:00403C85 loc_403C85:                             ; CODE XREF: sub_403C50+2B↑j
.text:00403C85                 test    ebx, ebx
.text:00403C87                 jz      short loc_403C7D
.text:00403C89
.text:00403C89 loc_403C89:                             ; CODE XREF: sub_403C50+1A↑j
.text:00403C89                 call    sub_4052E0
.text:00403C89 sub_403C50      endp
.text:00403C89
.text:00403C89 ; ---------------------------------------------------------------------------
.text:00403C8E                 align 10h
.text:00403C90
.text:00403C90 ; =============== S U B R O U T I N E =======================================
.text:00403C90
.text:00403C90
.text:00403C90 ; int __cdecl sub_403C90(size_t)
.text:00403C90 sub_403C90      proc near               ; CODE XREF: sub_401CA0+18↑p
.text:00403C90                                         ; .text:00404A29↓p ...
.text:00403C90
.text:00403C90 Size            = dword ptr -0Ch
.text:00403C90 var_4           = dword ptr -4
.text:00403C90 arg_0           = dword ptr  4
.text:00403C90
.text:00403C90                 sub     esp, 0Ch
.text:00403C93                 mov     [esp+0Ch+var_4], ebx
.text:00403C97                 mov     ebx, [esp+0Ch+arg_0]
.text:00403C9B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403C9E                 call    malloc
.text:00403CA3                 test    eax, eax
.text:00403CA5                 jz      short loc_403CB0
.text:00403CA7
.text:00403CA7 loc_403CA7:                             ; CODE XREF: sub_403C90+22↓j
.text:00403CA7                 mov     ebx, [esp+0Ch+var_4]
.text:00403CAB                 add     esp, 0Ch
.text:00403CAE                 retn
.text:00403CAE ; ---------------------------------------------------------------------------
.text:00403CAF                 align 10h
.text:00403CB0
.text:00403CB0 loc_403CB0:                             ; CODE XREF: sub_403C90+15↑j
.text:00403CB0                 test    ebx, ebx
.text:00403CB2                 jz      short loc_403CA7
.text:00403CB4                 call    sub_4052E0
.text:00403CB4 sub_403C90      endp
.text:00403CB4
.text:00403CB4 ; ---------------------------------------------------------------------------
.text:00403CB9                 align 10h
.text:00403CC0                 sub     esp, 1Ch
.text:00403CC3                 xor     edx, edx
.text:00403CC5                 mov     eax, 0FFFFFFFFh
.text:00403CCA                 mov     [esp+14h], ebx
.text:00403CCE                 mov     ecx, [esp+20h]
.text:00403CD2                 mov     ebx, [esp+28h]
.text:00403CD6                 mov     [esp+18h], esi
.text:00403CDA                 mov     esi, [esp+24h]
.text:00403CDE                 div     ebx
.text:00403CE0                 cmp     eax, esi
.text:00403CE2                 jb      short loc_403D14
.text:00403CE4                 mov     [esp], ecx
.text:00403CE7                 mov     edx, esi
.text:00403CE9                 imul    edx, ebx
.text:00403CEC                 mov     [esp+4], edx
.text:00403CF0                 call    realloc
.text:00403CF5                 test    eax, eax
.text:00403CF7                 mov     ecx, eax
.text:00403CF9                 jz      short loc_403D10
.text:00403CFB
.text:00403CFB loc_403CFB:                             ; CODE XREF: .text:00403D12↓j
.text:00403CFB                 mov     ebx, [esp+14h]
.text:00403CFF                 mov     eax, ecx
.text:00403D01                 mov     esi, [esp+18h]
.text:00403D05                 add     esp, 1Ch
.text:00403D08                 retn
.text:00403D08 ; ---------------------------------------------------------------------------
.text:00403D09                 align 10h
.text:00403D10
.text:00403D10 loc_403D10:                             ; CODE XREF: .text:00403CF9↑j
.text:00403D10                 test    esi, esi
.text:00403D12                 jz      short loc_403CFB
.text:00403D14
.text:00403D14 loc_403D14:                             ; CODE XREF: .text:00403CE2↑j
.text:00403D14                 call    sub_4052E0
.text:00403D14 ; ---------------------------------------------------------------------------
.text:00403D19                 align 10h
.text:00403D20
.text:00403D20 ; =============== S U B R O U T I N E =======================================
.text:00403D20
.text:00403D20
.text:00403D20 ; int __cdecl sub_403D20(void *, size_t)
.text:00403D20 sub_403D20      proc near               ; CODE XREF: sub_4050F0+5B↓p
.text:00403D20
.text:00403D20 Block           = dword ptr -0Ch
.text:00403D20 Size            = dword ptr -8
.text:00403D20 var_4           = dword ptr -4
.text:00403D20 arg_0           = dword ptr  4
.text:00403D20 arg_4           = dword ptr  8
.text:00403D20
.text:00403D20                 sub     esp, 0Ch
.text:00403D23                 mov     edx, [esp+0Ch+arg_0]
.text:00403D27                 mov     [esp+0Ch+var_4], ebx
.text:00403D2B                 mov     ebx, [esp+0Ch+arg_4]
.text:00403D2F                 mov     [esp+0Ch+Block], edx ; Block
.text:00403D32                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403D36                 call    realloc
.text:00403D3B                 test    eax, eax
.text:00403D3D                 jz      short loc_403D47
.text:00403D3F
.text:00403D3F loc_403D3F:                             ; CODE XREF: sub_403D20+29↓j
.text:00403D3F                 mov     ebx, [esp+0Ch+var_4]
.text:00403D43                 add     esp, 0Ch
.text:00403D46                 retn
.text:00403D47 ; ---------------------------------------------------------------------------
.text:00403D47
.text:00403D47 loc_403D47:                             ; CODE XREF: sub_403D20+1D↑j
.text:00403D47                 test    ebx, ebx
.text:00403D49                 jz      short loc_403D3F
.text:00403D4B                 call    sub_4052E0
.text:00403D4B sub_403D20      endp
.text:00403D4B
.text:00403D50 ; ---------------------------------------------------------------------------
.text:00403D50                 jmp     sub_403EA0
.text:00403D50 ; ---------------------------------------------------------------------------
.text:00403D55                 align 10h
.text:00403D60                 sub     esp, 0Ch
.text:00403D63                 mov     edx, [esp+14h]
.text:00403D67                 mov     dword ptr [esp+8], 1
.text:00403D6F                 mov     [esp+4], edx
.text:00403D73                 mov     edx, [esp+10h]
.text:00403D77                 mov     [esp], edx
.text:00403D7A                 call    sub_403EA0
.text:00403D7F                 add     esp, 0Ch
.text:00403D82                 retn
.text:00403D82 ; ---------------------------------------------------------------------------
.text:00403D83                 align 10h
.text:00403D90                 sub     esp, 1Ch
.text:00403D93                 mov     [esp+18h], ebx
.text:00403D97                 mov     ebx, [esp+20h]
.text:00403D9B                 mov     [esp], ebx
.text:00403D9E                 call    malloc
.text:00403DA3                 test    eax, eax
.text:00403DA5                 jz      short loc_403DC3
.text:00403DA7
.text:00403DA7 loc_403DA7:                             ; CODE XREF: .text:00403DC5↓j
.text:00403DA7                 mov     [esp+8], ebx
.text:00403DAB                 mov     dword ptr [esp+4], 0
.text:00403DB3                 mov     [esp], eax
.text:00403DB6                 call    memset
.text:00403DBB                 mov     ebx, [esp+18h]
.text:00403DBF                 add     esp, 1Ch
.text:00403DC2                 retn
.text:00403DC3 ; ---------------------------------------------------------------------------
.text:00403DC3
.text:00403DC3 loc_403DC3:                             ; CODE XREF: .text:00403DA5↑j
.text:00403DC3                 test    ebx, ebx
.text:00403DC5                 jz      short loc_403DA7
.text:00403DC7                 call    sub_4052E0
.text:00403DC7 ; ---------------------------------------------------------------------------
.text:00403DCC                 align 10h
.text:00403DD0                 sub     esp, 0Ch
.text:00403DD3                 xor     edx, edx
.text:00403DD5                 mov     ecx, [esp+14h]
.text:00403DD9                 mov     [esp+8], ebx
.text:00403DDD                 mov     eax, 0FFFFFFFFh
.text:00403DE2                 mov     ebx, [esp+10h]
.text:00403DE6                 div     ecx
.text:00403DE8                 cmp     eax, ebx
.text:00403DEA                 jb      short loc_403E08
.text:00403DEC                 mov     [esp+4], ecx
.text:00403DF0                 mov     [esp], ebx
.text:00403DF3                 call    calloc
.text:00403DF8                 test    eax, eax
.text:00403DFA                 jz      short loc_403E04
.text:00403DFC
.text:00403DFC loc_403DFC:                             ; CODE XREF: .text:00403E06↓j
.text:00403DFC                 mov     ebx, [esp+8]
.text:00403E00                 add     esp, 0Ch
.text:00403E03                 retn
.text:00403E04 ; ---------------------------------------------------------------------------
.text:00403E04
.text:00403E04 loc_403E04:                             ; CODE XREF: .text:00403DFA↑j
.text:00403E04                 test    ebx, ebx
.text:00403E06                 jz      short loc_403DFC
.text:00403E08
.text:00403E08 loc_403E08:                             ; CODE XREF: .text:00403DEA↑j
.text:00403E08                 call    sub_4052E0
.text:00403E08 ; ---------------------------------------------------------------------------
.text:00403E0D                 align 10h
.text:00403E10                 sub     esp, 1Ch
.text:00403E13                 mov     [esp+18h], ebx
.text:00403E17                 mov     ebx, [esp+24h]
.text:00403E1B                 mov     [esp], ebx
.text:00403E1E                 call    malloc
.text:00403E23                 test    eax, eax
.text:00403E25                 mov     edx, eax
.text:00403E27                 jz      short loc_403E45
.text:00403E29
.text:00403E29 loc_403E29:                             ; CODE XREF: .text:00403E47↓j
.text:00403E29                 mov     [esp+8], ebx
.text:00403E2D                 mov     ecx, [esp+20h]
.text:00403E31                 mov     [esp], edx
.text:00403E34                 mov     [esp+4], ecx
.text:00403E38                 call    memcpy
.text:00403E3D                 mov     ebx, [esp+18h]
.text:00403E41                 add     esp, 1Ch
.text:00403E44                 retn
.text:00403E45 ; ---------------------------------------------------------------------------
.text:00403E45
.text:00403E45 loc_403E45:                             ; CODE XREF: .text:00403E27↑j
.text:00403E45                 test    ebx, ebx
.text:00403E47                 jz      short loc_403E29
.text:00403E49                 call    sub_4052E0
.text:00403E49 ; ---------------------------------------------------------------------------
.text:00403E4E                 align 10h
.text:00403E50
.text:00403E50 ; =============== S U B R O U T I N E =======================================
.text:00403E50
.text:00403E50
.text:00403E50 ; int __cdecl sub_403E50(char *)
.text:00403E50 sub_403E50      proc near               ; CODE XREF: sub_401AC0+B↑p
.text:00403E50
.text:00403E50 Str             = dword ptr -1Ch
.text:00403E50 Src             = dword ptr -18h
.text:00403E50 Size            = dword ptr -14h
.text:00403E50 var_8           = dword ptr -8
.text:00403E50 var_4           = dword ptr -4
.text:00403E50 arg_0           = dword ptr  4
.text:00403E50
.text:00403E50                 sub     esp, 1Ch
.text:00403E53                 mov     [esp+1Ch+var_4], esi
.text:00403E57                 mov     esi, [esp+1Ch+arg_0]
.text:00403E5B                 mov     [esp+1Ch+var_8], ebx
.text:00403E5F                 mov     [esp+1Ch+Str], esi ; Str
.text:00403E62                 call    strlen
.text:00403E67                 lea     ebx, [eax+1]
.text:00403E6A                 mov     [esp+1Ch+Str], ebx ; Size
.text:00403E6D                 call    malloc
.text:00403E72                 test    eax, eax
.text:00403E74                 jz      short loc_403E92
.text:00403E76
.text:00403E76 loc_403E76:                             ; CODE XREF: sub_403E50+44↓j
.text:00403E76                 mov     [esp+1Ch+Size], ebx ; Size
.text:00403E7A                 mov     [esp+1Ch+Src], esi ; Src
.text:00403E7E                 mov     [esp+1Ch+Str], eax ; void *
.text:00403E81                 call    memcpy
.text:00403E86                 mov     ebx, [esp+1Ch+var_8]
.text:00403E8A                 mov     esi, [esp+1Ch+var_4]
.text:00403E8E                 add     esp, 1Ch
.text:00403E91                 retn
.text:00403E92 ; ---------------------------------------------------------------------------
.text:00403E92
.text:00403E92 loc_403E92:                             ; CODE XREF: sub_403E50+24↑j
.text:00403E92                 test    ebx, ebx
.text:00403E94                 jz      short loc_403E76
.text:00403E96                 call    sub_4052E0
.text:00403E96 sub_403E50      endp
.text:00403E96
.text:00403E96 ; ---------------------------------------------------------------------------
.text:00403E9B                 align 10h
.text:00403EA0
.text:00403EA0 ; =============== S U B R O U T I N E =======================================
.text:00403EA0
.text:00403EA0
.text:00403EA0 ; int __cdecl sub_403EA0(void *, int, int)
.text:00403EA0 sub_403EA0      proc near               ; CODE XREF: .text:00403D50↑j
.text:00403EA0                                         ; .text:00403D7A↑p
.text:00403EA0
.text:00403EA0 Block           = dword ptr -1Ch
.text:00403EA0 Size            = dword ptr -18h
.text:00403EA0 var_C           = dword ptr -0Ch
.text:00403EA0 var_8           = dword ptr -8
.text:00403EA0 var_4           = dword ptr -4
.text:00403EA0 arg_0           = dword ptr  4
.text:00403EA0 arg_4           = dword ptr  8
.text:00403EA0 arg_8           = dword ptr  0Ch
.text:00403EA0
.text:00403EA0                 sub     esp, 1Ch
.text:00403EA3                 mov     [esp+1Ch+var_8], esi
.text:00403EA7                 mov     esi, [esp+1Ch+arg_0]
.text:00403EAB                 mov     [esp+1Ch+var_4], edi
.text:00403EAF                 mov     edi, [esp+1Ch+arg_4]
.text:00403EB3                 test    esi, esi
.text:00403EB5                 mov     [esp+1Ch+var_C], ebx
.text:00403EB9                 mov     ecx, [edi]
.text:00403EBB                 mov     ebx, [esp+1Ch+arg_8]
.text:00403EBF                 jz      short loc_403F00
.text:00403EC1                 xor     edx, edx
.text:00403EC3                 mov     eax, 7FFFFFFFh
.text:00403EC8                 div     ebx
.text:00403ECA                 cmp     eax, ecx
.text:00403ECC                 jb      short loc_403EF9
.text:00403ECE                 add     ecx, ecx
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403EA0+62↓j
.text:00403ED0                                         ; sub_403EA0+71↓j ...
.text:00403ED0                 mov     [edi], ecx
.text:00403ED2                 imul    ebx, ecx
.text:00403ED5                 mov     [esp+1Ch+Block], esi ; Block
.text:00403ED8                 mov     [esp+1Ch+Size], ebx ; Size
.text:00403EDC                 call    realloc
.text:00403EE1                 test    eax, eax
.text:00403EE3                 jz      short loc_403EF5
.text:00403EE5
.text:00403EE5 loc_403EE5:                             ; CODE XREF: sub_403EA0+57↓j
.text:00403EE5                 mov     ebx, [esp+1Ch+var_C]
.text:00403EE9                 mov     esi, [esp+1Ch+var_8]
.text:00403EED                 mov     edi, [esp+1Ch+var_4]
.text:00403EF1                 add     esp, 1Ch
.text:00403EF4                 retn
.text:00403EF5 ; ---------------------------------------------------------------------------
.text:00403EF5
.text:00403EF5 loc_403EF5:                             ; CODE XREF: sub_403EA0+43↑j
.text:00403EF5                 test    ebx, ebx
.text:00403EF7                 jz      short loc_403EE5
.text:00403EF9
.text:00403EF9 loc_403EF9:                             ; CODE XREF: sub_403EA0+2C↑j
.text:00403EF9                 call    sub_4052E0
.text:00403EF9 ; ---------------------------------------------------------------------------
.text:00403EFE                 align 10h
.text:00403F00
.text:00403F00 loc_403F00:                             ; CODE XREF: sub_403EA0+1F↑j
.text:00403F00                 test    ecx, ecx
.text:00403F02                 jnz     short loc_403ED0
.text:00403F04                 xor     edx, edx
.text:00403F06                 mov     eax, 40h ; '@'
.text:00403F0B                 div     ebx
.text:00403F0D                 test    eax, eax
.text:00403F0F                 mov     ecx, eax
.text:00403F11                 jnz     short loc_403ED0
.text:00403F13                 mov     ecx, 1
.text:00403F18                 jmp     short loc_403ED0
.text:00403F18 sub_403EA0      endp
.text:00403F18
.text:00403F18 ; ---------------------------------------------------------------------------
.text:00403F1A                 align 10h
.text:00403F20 aLiteral        db 'literal',0          ; DATA XREF: .text:00403F60↓o
.text:00403F28 aShell          db 'shell',0            ; DATA XREF: .text:00403F64↓o
.text:00403F2E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403F68↓o
.text:00403F3B aC              db 'c',0                ; DATA XREF: .text:00403F6C↓o
.text:00403F3D aEscape         db 'escape',0           ; DATA XREF: .text:00403F70↓o
.text:00403F44 aLocale         db 'locale',0           ; DATA XREF: .text:00403F74↓o
.text:00403F4B aClocale        db 'clocale',0          ; DATA XREF: .text:00403F78↓o
.text:00403F53                 align 10h
.text:00403F60                 dd offset aLiteral      ; "literal"
.text:00403F64                 dd offset aShell        ; "shell"
.text:00403F68                 dd offset aShellAlways  ; "shell-always"
.text:00403F6C                 dd offset aC            ; "c"
.text:00403F70                 dd offset aEscape       ; "escape"
.text:00403F74                 dd offset aLocale       ; "locale"
.text:00403F78                 dd offset aClocale      ; "clocale"
.text:00403F7C                 dd 2 dup(0)
.text:00403F84                 dd 1, 2, 3, 4, 5, 6
.text:00403F9C asc_403F9C:                             ; DATA XREF: sub_403FB0+7E↓o
.text:00403F9C                                         ; sub_403FB0+A39↓o ...
.text:00403F9C                 text "UTF-16LE", '"',27h,'`'
.text:00403FA2                 align 10h
.text:00403FB0
.text:00403FB0 ; =============== S U B R O U T I N E =======================================
.text:00403FB0
.text:00403FB0
.text:00403FB0 ; int __cdecl sub_403FB0(int, int, char *Str, int, int, int)
.text:00403FB0 sub_403FB0      proc near               ; CODE XREF: sub_403FB0+43A↓p
.text:00403FB0                                         ; .text:00404B73↓p ...
.text:00403FB0
.text:00403FB0 C               = dword ptr -4Ch
.text:00403FB0 Type            = dword ptr -48h
.text:00403FB0 SizeInBytes     = dword ptr -44h
.text:00403FB0 State           = dword ptr -40h
.text:00403FB0 var_3C          = dword ptr -3Ch
.text:00403FB0 var_38          = dword ptr -38h
.text:00403FB0 var_34          = dword ptr -34h
.text:00403FB0 var_30          = dword ptr -30h
.text:00403FB0 var_29          = byte ptr -29h
.text:00403FB0 var_28          = dword ptr -28h
.text:00403FB0 var_22          = byte ptr -22h
.text:00403FB0 var_21          = byte ptr -21h
.text:00403FB0 var_20          = dword ptr -20h
.text:00403FB0 var_1C          = dword ptr -1Ch
.text:00403FB0 var_18          = mbstate_t ptr -18h
.text:00403FB0 arg_0           = dword ptr  4
.text:00403FB0 arg_4           = dword ptr  8
.text:00403FB0 Str             = dword ptr  0Ch
.text:00403FB0 arg_C           = dword ptr  10h
.text:00403FB0 arg_10          = dword ptr  14h
.text:00403FB0 arg_14          = dword ptr  18h
.text:00403FB0
.text:00403FB0                 push    ebp
.text:00403FB1                 push    edi
.text:00403FB2                 push    esi
.text:00403FB3                 push    ebx
.text:00403FB4                 sub     esp, 3Ch
.text:00403FB7                 mov     edx, ds:__mb_cur_max
.text:00403FBD                 mov     [esp+4Ch+var_34], 0
.text:00403FC5                 mov     [esp+4Ch+var_1C], 0
.text:00403FCD                 cmp     dword ptr [edx], 1
.text:00403FD0                 mov     [esp+4Ch+var_20], 0
.text:00403FD8                 mov     [esp+4Ch+var_21], 0
.text:00403FDD                 setz    [esp+4Ch+var_22]
.text:00403FE2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403FE7                 ja      short def_403FED ; jumptable 00403FED default case, cases 0,1
.text:00403FE9                 mov     edx, [esp+4Ch+arg_10]
.text:00403FED                 jmp     ds:jpt_403FED[edx*4] ; switch jump
.text:00403FED ; ---------------------------------------------------------------------------
.text:00403FF4 jpt_403FED      dd offset def_403FED    ; DATA XREF: sub_403FB0+3D↑r
.text:00403FF4                 dd offset def_403FED    ; jump table for switch statement
.text:00403FF4                 dd offset loc_404935
.text:00403FF4                 dd offset loc_404010
.text:00403FF4                 dd offset loc_40495B
.text:00403FF4                 dd offset loc_404965
.text:00403FF4                 dd offset loc_404965
.text:00404010 ; ---------------------------------------------------------------------------
.text:00404010
.text:00404010 loc_404010:                             ; CODE XREF: sub_403FB0+3D↑j
.text:00404010                                         ; DATA XREF: sub_403FB0:jpt_403FED↑o
.text:00404010                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00403FED case 3
.text:00404014                 cmp     [esp+4Ch+var_34], eax
.text:00404018                 jnb     short loc_404021
.text:0040401A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040401E                 mov     byte ptr [ebx], 22h ; '"'
.text:00404021
.text:00404021 loc_404021:                             ; CODE XREF: sub_403FB0+68↑j
.text:00404021                 mov     [esp+4Ch+var_34], 1
.text:00404029                 mov     [esp+4Ch+var_21], 1
.text:0040402E                 mov     [esp+4Ch+var_1C], offset asc_403F9C ; "\"'`"
.text:00404036
.text:00404036 loc_404036:                             ; CODE XREF: sub_403FB0+9A6↓j
.text:00404036                 mov     [esp+4Ch+var_20], 1
.text:0040403E
.text:0040403E def_403FED:                             ; CODE XREF: sub_403FB0+37↑j
.text:0040403E                                         ; sub_403FB0+3D↑j ...
.text:0040403E                 xor     ebp, ebp        ; jumptable 00403FED default case, cases 0,1
.text:00404040
.text:00404040 loc_404040:                             ; CODE XREF: sub_403FB0+3DB↓j
.text:00404040                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404045                 jz      loc_404927
.text:0040404B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040404F
.text:0040404F loc_40404F:                             ; CODE XREF: sub_403FB0+980↓j
.text:0040404F                 jz      loc_4048BE
.text:00404055                 cmp     [esp+4Ch+var_21], 0
.text:0040405A                 jz      short loc_4040A0
.text:0040405C                 mov     esi, [esp+4Ch+var_20]
.text:00404060                 test    esi, esi
.text:00404062                 jz      short loc_4040A0
.text:00404064                 mov     ecx, [esp+4Ch+var_20]
.text:00404068                 lea     edi, [ecx+ebp]
.text:0040406B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040406F                 ja      short loc_4040A0
.text:00404071                 cld
.text:00404072                 mov     ebx, [esp+4Ch+Str]
.text:00404076                 mov     edi, [esp+4Ch+var_1C]
.text:0040407A                 add     ebx, ebp
.text:0040407C                 mov     esi, ebx
.text:0040407E                 cmp     ecx, ecx
.text:00404080                 repe cmpsb
.text:00404082                 jnz     short loc_4040A0
.text:00404084                 mov     edx, [esp+4Ch+arg_4]
.text:00404088                 cmp     [esp+4Ch+var_34], edx
.text:0040408C                 jnb     short loc_40409A
.text:0040408E                 mov     ecx, [esp+4Ch+arg_0]
.text:00404092                 mov     eax, [esp+4Ch+var_34]
.text:00404096                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040409A
.text:0040409A loc_40409A:                             ; CODE XREF: sub_403FB0+DC↑j
.text:0040409A                 inc     [esp+4Ch+var_34]
.text:0040409E                 mov     esi, esi
.text:004040A0
.text:004040A0 loc_4040A0:                             ; CODE XREF: sub_403FB0+AA↑j
.text:004040A0                                         ; sub_403FB0+B2↑j ...
.text:004040A0                 mov     edi, [esp+4Ch+Str]
.text:004040A4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004040A9                 movzx   eax, bl
.text:004040AC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004040AF                 ja      def_4040B5      ; jumptable 004040B5 default case, cases 1-6,14-31,64
.text:004040B5                 jmp     ds:jpt_4040B5[eax*4] ; switch jump
.text:004040B5 ; ---------------------------------------------------------------------------
.text:004040BC jpt_4040B5      dd offset loc_4042B8, offset def_4040B5, offset def_4040B5
.text:004040BC                                         ; DATA XREF: sub_403FB0+105↑r
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset def_4040B5 ; jump table for switch statement
.text:004040BC                 dd offset def_4040B5, offset loc_404390, offset loc_4043AE
.text:004040BC                 dd offset loc_4043B2, offset loc_4043F7, offset loc_4043FB
.text:004040BC                 dd offset loc_4043FF, offset loc_404403, offset def_4040B5
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset def_4040B5
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset def_4040B5
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset def_4040B5
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset def_4040B5
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset def_4040B5
.text:004040BC                 dd offset def_4040B5, offset def_4040B5, offset loc_404888
.text:004040BC                 dd offset loc_404888, offset loc_404888, offset loc_4048AA
.text:004040BC                 dd offset loc_404888, offset def_4044B2, offset loc_404888
.text:004040BC                 dd offset loc_404407, offset loc_404888, offset loc_404888
.text:004040BC                 dd offset loc_404888, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset loc_404888
.text:004040BC                 dd offset loc_404888, offset loc_404888, offset loc_404888
.text:004040BC                 dd offset loc_40446C, offset def_4040B5, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset loc_404888, offset loc_404881
.text:004040BC                 dd offset def_4044B2, offset loc_404888, offset def_4044B2
.text:004040BC                 dd offset loc_404888, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset def_4044B2, offset def_4044B2, offset def_4044B2
.text:004040BC                 dd offset loc_404898, offset loc_404888, offset loc_404898
.text:004040BC                 dd offset loc_4048AA
.text:004042B8 ; ---------------------------------------------------------------------------
.text:004042B8
.text:004042B8 loc_4042B8:                             ; CODE XREF: sub_403FB0+105↑j
.text:004042B8                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004042B8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004040B5 case 0
.text:004042BD                 lea     eax, [ebp+1]
.text:004042C0                 jz      loc_404370
.text:004042C6                 mov     esi, [esp+4Ch+arg_4]
.text:004042CA                 cmp     [esp+4Ch+var_34], esi
.text:004042CE                 jnb     short loc_4042DC
.text:004042D0                 mov     eax, [esp+4Ch+arg_0]
.text:004042D4                 mov     ebx, [esp+4Ch+var_34]
.text:004042D8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004042DC
.text:004042DC loc_4042DC:                             ; CODE XREF: sub_403FB0+31E↑j
.text:004042DC                 inc     [esp+4Ch+var_34]
.text:004042E0                 mov     edx, [esp+4Ch+arg_4]
.text:004042E4                 cmp     [esp+4Ch+var_34], edx
.text:004042E8                 jnb     short loc_4042F6
.text:004042EA                 mov     edi, [esp+4Ch+arg_0]
.text:004042EE                 mov     ecx, [esp+4Ch+var_34]
.text:004042F2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004042F6
.text:004042F6 loc_4042F6:                             ; CODE XREF: sub_403FB0+338↑j
.text:004042F6                 inc     [esp+4Ch+var_34]
.text:004042FA                 mov     esi, [esp+4Ch+arg_4]
.text:004042FE                 cmp     [esp+4Ch+var_34], esi
.text:00404302                 jnb     short loc_404310
.text:00404304                 mov     ebx, [esp+4Ch+arg_0]
.text:00404308                 mov     eax, [esp+4Ch+var_34]
.text:0040430C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00404310
.text:00404310 loc_404310:                             ; CODE XREF: sub_403FB0+352↑j
.text:00404310                 inc     [esp+4Ch+var_34]
.text:00404314                 mov     bl, 30h ; '0'
.text:00404316                 lea     esi, [esi+0]
.text:00404319                 lea     edi, [edi+0]
.text:00404320
.text:00404320 def_4044B2:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404320                                         ; sub_403FB0+463↓j ...
.text:00404320                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:00404320                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:00404325                 lea     eax, [ebp+1]
.text:00404328                 jz      short loc_404370
.text:0040432A                 mov     cl, bl
.text:0040432C                 mov     edi, [esp+4Ch+arg_14]
.text:00404330                 mov     esi, 1
.text:00404335                 shr     cl, 5
.text:00404338                 movzx   edx, cl
.text:0040433B                 mov     ecx, ebx
.text:0040433D                 and     ecx, 1Fh
.text:00404340                 shl     esi, cl
.text:00404342                 test    [edi+edx*4+4], esi
.text:00404346                 jz      short loc_404362
.text:00404348
.text:00404348 loc_404348:                             ; CODE XREF: sub_403FB0+3FC↓j
.text:00404348                 mov     edx, [esp+4Ch+arg_4]
.text:0040434C                 cmp     [esp+4Ch+var_34], edx
.text:00404350                 jnb     short loc_40435E
.text:00404352                 mov     edi, [esp+4Ch+arg_0]
.text:00404356                 mov     esi, [esp+4Ch+var_34]
.text:0040435A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040435E
.text:0040435E loc_40435E:                             ; CODE XREF: sub_403FB0+3A0↑j
.text:0040435E                 inc     [esp+4Ch+var_34]
.text:00404362
.text:00404362 loc_404362:                             ; CODE XREF: sub_403FB0+396↑j
.text:00404362                 lea     eax, [ebp+1]
.text:00404365                 lea     esi, [esi+0]
.text:00404369                 lea     edi, [edi+0]
.text:00404370
.text:00404370 loc_404370:                             ; CODE XREF: sub_403FB0+310↑j
.text:00404370                                         ; sub_403FB0+378↑j ...
.text:00404370                 mov     ebp, [esp+4Ch+arg_4]
.text:00404374                 cmp     [esp+4Ch+var_34], ebp
.text:00404378                 jnb     short loc_404385
.text:0040437A                 mov     edx, [esp+4Ch+arg_0]
.text:0040437E                 mov     ecx, [esp+4Ch+var_34]
.text:00404382                 mov     [ecx+edx], bl
.text:00404385
.text:00404385 loc_404385:                             ; CODE XREF: sub_403FB0+3C8↑j
.text:00404385                 inc     [esp+4Ch+var_34]
.text:00404389                 mov     ebp, eax
.text:0040438B                 jmp     loc_404040
.text:00404390 ; ---------------------------------------------------------------------------
.text:00404390
.text:00404390 loc_404390:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404390                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:00404390                 mov     dl, 61h ; 'a'   ; jumptable 004040B5 case 7
.text:00404392                 lea     esi, [esi+0]
.text:00404399                 lea     edi, [edi+0]
.text:004043A0
.text:004043A0 loc_4043A0:                             ; CODE XREF: sub_403FB0+400↓j
.text:004043A0                                         ; sub_403FB0+409↓j ...
.text:004043A0                 cmp     [esp+4Ch+var_21], 0
.text:004043A5                 lea     eax, [ebp+1]
.text:004043A8                 jz      short loc_404370
.text:004043AA                 mov     bl, dl
.text:004043AC                 jmp     short loc_404348
.text:004043AE ; ---------------------------------------------------------------------------
.text:004043AE
.text:004043AE loc_4043AE:                             ; CODE XREF: sub_403FB0+105↑j
.text:004043AE                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004043AE                 mov     dl, 62h ; 'b'   ; jumptable 004040B5 case 8
.text:004043B0                 jmp     short loc_4043A0
.text:004043B2 ; ---------------------------------------------------------------------------
.text:004043B2
.text:004043B2 loc_4043B2:                             ; CODE XREF: sub_403FB0+105↑j
.text:004043B2                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004043B2                 mov     dl, 74h ; 't'   ; jumptable 004040B5 case 9
.text:004043B4
.text:004043B4 loc_4043B4:                             ; CODE XREF: sub_403FB0+449↓j
.text:004043B4                                         ; sub_403FB0+455↓j ...
.text:004043B4                 cmp     [esp+4Ch+arg_10], 1
.text:004043B9                 jnz     short loc_4043A0
.text:004043BB
.text:004043BB loc_4043BB:                             ; CODE XREF: sub_403FB0+45C↓j
.text:004043BB                                         ; sub_403FB0+4C1↓j ...
.text:004043BB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404782 cases 91,92,94,96,124
.text:004043C3                 mov     eax, [esp+4Ch+arg_14]
.text:004043C7                 mov     edx, [esp+4Ch+arg_C]
.text:004043CB                 mov     ecx, [esp+4Ch+Str]
.text:004043CF                 mov     ebx, [esp+4Ch+arg_4]
.text:004043D3                 mov     [esp+4Ch+var_38], eax ; int
.text:004043D7                 mov     ebp, [esp+4Ch+arg_0]
.text:004043DB                 mov     [esp+4Ch+State], edx ; int
.text:004043DF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004043E3                 mov     [esp+4Ch+Type], ebx ; int
.text:004043E7                 mov     [esp+4Ch+C], ebp ; int
.text:004043EA                 call    sub_403FB0
.text:004043EF
.text:004043EF loc_4043EF:                             ; CODE XREF: sub_403FB0+972↓j
.text:004043EF                 add     esp, 3Ch
.text:004043F2                 pop     ebx
.text:004043F3                 pop     esi
.text:004043F4                 pop     edi
.text:004043F5                 pop     ebp
.text:004043F6                 retn
.text:004043F7 ; ---------------------------------------------------------------------------
.text:004043F7
.text:004043F7 loc_4043F7:                             ; CODE XREF: sub_403FB0+105↑j
.text:004043F7                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004043F7                 mov     dl, 6Eh ; 'n'   ; jumptable 004040B5 case 10
.text:004043F9                 jmp     short loc_4043B4
.text:004043FB ; ---------------------------------------------------------------------------
.text:004043FB
.text:004043FB loc_4043FB:                             ; CODE XREF: sub_403FB0+105↑j
.text:004043FB                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004043FB                 mov     dl, 76h ; 'v'   ; jumptable 004040B5 case 11
.text:004043FD                 jmp     short loc_4043A0
.text:004043FF ; ---------------------------------------------------------------------------
.text:004043FF
.text:004043FF loc_4043FF:                             ; CODE XREF: sub_403FB0+105↑j
.text:004043FF                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004043FF                 mov     dl, 66h ; 'f'   ; jumptable 004040B5 case 12
.text:00404401                 jmp     short loc_4043A0
.text:00404403 ; ---------------------------------------------------------------------------
.text:00404403
.text:00404403 loc_404403:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404403                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:00404403                 mov     dl, 72h ; 'r'   ; jumptable 004040B5 case 13
.text:00404405                 jmp     short loc_4043B4
.text:00404407 ; ---------------------------------------------------------------------------
.text:00404407
.text:00404407 loc_404407:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404407                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:00404407                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004040B5 case 39
.text:0040440C                 jz      short loc_4043BB ; jumptable 00404782 cases 91,92,94,96,124
.text:0040440E                 cmp     [esp+4Ch+arg_10], 2
.text:00404413                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:00404413                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:00404419                 mov     edx, [esp+4Ch+arg_4]
.text:0040441D                 cmp     [esp+4Ch+var_34], edx
.text:00404421                 jnb     short loc_40442F
.text:00404423                 mov     ecx, [esp+4Ch+arg_0]
.text:00404427                 mov     edi, [esp+4Ch+var_34]
.text:0040442B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040442F
.text:0040442F loc_40442F:                             ; CODE XREF: sub_403FB0+471↑j
.text:0040442F                 inc     [esp+4Ch+var_34]
.text:00404433                 mov     eax, [esp+4Ch+arg_4]
.text:00404437                 cmp     [esp+4Ch+var_34], eax
.text:0040443B                 jnb     short loc_404449
.text:0040443D                 mov     esi, [esp+4Ch+arg_0]
.text:00404441                 mov     edx, [esp+4Ch+var_34]
.text:00404445                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404449
.text:00404449 loc_404449:                             ; CODE XREF: sub_403FB0+48B↑j
.text:00404449                 inc     [esp+4Ch+var_34]
.text:0040444D                 mov     edi, [esp+4Ch+arg_4]
.text:00404451                 cmp     [esp+4Ch+var_34], edi
.text:00404455                 jnb     short loc_404463
.text:00404457                 mov     ecx, [esp+4Ch+arg_0]
.text:0040445B                 mov     eax, [esp+4Ch+var_34]
.text:0040445F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404463
.text:00404463 loc_404463:                             ; CODE XREF: sub_403FB0+4A5↑j
.text:00404463                                         ; sub_403FB0+5C4↓j ...
.text:00404463                 inc     [esp+4Ch+var_34]
.text:00404467                 jmp     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:00404467                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:0040446C ; ---------------------------------------------------------------------------
.text:0040446C
.text:0040446C loc_40446C:                             ; CODE XREF: sub_403FB0+105↑j
.text:0040446C                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:0040446C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004040B5 case 63
.text:00404471                 jz      loc_4043BB      ; jumptable 00404782 cases 91,92,94,96,124
.text:00404477                 cmp     [esp+4Ch+arg_10], 3
.text:0040447C                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:0040447C                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:00404482                 lea     edx, [ebp+2]
.text:00404485                 cmp     edx, [esp+4Ch+arg_C]
.text:00404489                 jnb     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:00404489                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:0040448F                 mov     esi, [esp+4Ch+Str]
.text:00404493                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404498                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:00404498                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:0040449E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004044A3                 movsx   eax, cl
.text:004044A6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004044A9                 cmp     eax, 1Dh
.text:004044AC                 ja      def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:004044AC                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:004044B2                 jmp     ds:jpt_4044B2[eax*4] ; switch jump
.text:004044B2 ; ---------------------------------------------------------------------------
.text:004044B9                 align 4
.text:004044BC jpt_4044B2      dd offset loc_404534    ; DATA XREF: sub_403FB0+502↑r
.text:004044BC                 dd offset def_4044B2    ; jump table for switch statement
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset def_4044B2
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset loc_404534
.text:004044BC                 dd offset loc_404534
.text:00404534 ; ---------------------------------------------------------------------------
.text:00404534
.text:00404534 loc_404534:                             ; CODE XREF: sub_403FB0+502↑j
.text:00404534                                         ; DATA XREF: sub_403FB0:jpt_4044B2↑o
.text:00404534                 mov     ebp, edx        ; jumptable 004044B2 cases 33,39-41,45,47,60-62
.text:00404536                 mov     bl, cl
.text:00404538                 mov     edx, [esp+4Ch+arg_4]
.text:0040453C                 cmp     [esp+4Ch+var_34], edx
.text:00404540                 jnb     short loc_40454E
.text:00404542                 mov     ecx, [esp+4Ch+arg_0]
.text:00404546                 mov     edi, [esp+4Ch+var_34]
.text:0040454A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040454E
.text:0040454E loc_40454E:                             ; CODE XREF: sub_403FB0+590↑j
.text:0040454E                 inc     [esp+4Ch+var_34]
.text:00404552                 mov     eax, [esp+4Ch+arg_4]
.text:00404556                 cmp     [esp+4Ch+var_34], eax
.text:0040455A                 jnb     short loc_404568
.text:0040455C                 mov     edx, [esp+4Ch+arg_0]
.text:00404560                 mov     esi, [esp+4Ch+var_34]
.text:00404564                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404568
.text:00404568 loc_404568:                             ; CODE XREF: sub_403FB0+5AA↑j
.text:00404568                 inc     [esp+4Ch+var_34]
.text:0040456C                 mov     edi, [esp+4Ch+arg_4]
.text:00404570                 cmp     [esp+4Ch+var_34], edi
.text:00404574                 jnb     loc_404463
.text:0040457A                 mov     eax, [esp+4Ch+arg_0]
.text:0040457E                 mov     ecx, [esp+4Ch+var_34]
.text:00404582                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404586                 jmp     loc_404463
.text:00404586 ; ---------------------------------------------------------------------------
.text:0040458B                 align 10h
.text:00404590
.text:00404590 def_4040B5:                             ; CODE XREF: sub_403FB0+FF↑j
.text:00404590                                         ; sub_403FB0+105↑j
.text:00404590                                         ; DATA XREF: ...
.text:00404590                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004040B5 default case, cases 1-6,14-31,64
.text:00404595                 jz      loc_4046C0
.text:0040459B                 mov     [esp+4Ch+var_28], 1
.text:004045A3                 mov     esi, ds:__mb_cur_max
.text:004045A9                 movzx   edx, bl
.text:004045AC                 cmp     dword ptr [esi], 1
.text:004045AF                 jz      loc_4046A4
.text:004045B5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004045BD                 mov     [esp+4Ch+C], edx ; C
.text:004045C0                 call    _isctype
.text:004045C5
.text:004045C5 loc_4045C5:                             ; CODE XREF: sub_403FB0+705↓j
.text:004045C5                 test    eax, eax
.text:004045C7                 setnz   [esp+4Ch+var_29]
.text:004045CC
.text:004045CC loc_4045CC:                             ; CODE XREF: sub_403FB0+7A5↓j
.text:004045CC                 cmp     [esp+4Ch+var_21], 0
.text:004045D1                 lea     eax, [ebp+1]
.text:004045D4                 jz      loc_404370
.text:004045DA                 cmp     [esp+4Ch+var_29], 0
.text:004045DF                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:004045DF                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:004045E5
.text:004045E5 loc_4045E5:                             ; CODE XREF: sub_403FB0+7AB↓j
.text:004045E5                 mov     eax, [esp+4Ch+var_28]
.text:004045E9                 lea     edx, [eax+ebp]
.text:004045EC                 lea     esi, [esi+0]
.text:004045F0
.text:004045F0 loc_4045F0:                             ; CODE XREF: sub_403FB0+6EF↓j
.text:004045F0                 cmp     [esp+4Ch+var_21], 0
.text:004045F5                 jz      short loc_404670
.text:004045F7                 cmp     [esp+4Ch+var_29], 0
.text:004045FC                 jnz     short loc_404670
.text:004045FE                 mov     edi, [esp+4Ch+arg_4]
.text:00404602                 cmp     [esp+4Ch+var_34], edi
.text:00404606                 jnb     short loc_404614
.text:00404608                 mov     esi, [esp+4Ch+arg_0]
.text:0040460C                 mov     eax, [esp+4Ch+var_34]
.text:00404610                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404614
.text:00404614 loc_404614:                             ; CODE XREF: sub_403FB0+656↑j
.text:00404614                 inc     [esp+4Ch+var_34]
.text:00404618                 mov     ecx, [esp+4Ch+arg_4]
.text:0040461C                 cmp     [esp+4Ch+var_34], ecx
.text:00404620                 jnb     short loc_404635
.text:00404622                 mov     cl, bl
.text:00404624                 mov     esi, [esp+4Ch+arg_0]
.text:00404628                 mov     edi, [esp+4Ch+var_34]
.text:0040462C                 shr     cl, 6
.text:0040462F                 add     cl, 30h ; '0'
.text:00404632                 mov     [edi+esi], cl
.text:00404635
.text:00404635 loc_404635:                             ; CODE XREF: sub_403FB0+670↑j
.text:00404635                 inc     [esp+4Ch+var_34]
.text:00404639                 mov     edi, [esp+4Ch+arg_4]
.text:0040463D                 cmp     [esp+4Ch+var_34], edi
.text:00404641                 jnb     short loc_404659
.text:00404643                 mov     cl, bl
.text:00404645                 mov     esi, [esp+4Ch+arg_0]
.text:00404649                 shr     cl, 3
.text:0040464C                 mov     edi, [esp+4Ch+var_34]
.text:00404650                 and     cl, 7
.text:00404653                 add     cl, 30h ; '0'
.text:00404656                 mov     [edi+esi], cl
.text:00404659
.text:00404659 loc_404659:                             ; CODE XREF: sub_403FB0+691↑j
.text:00404659                 inc     [esp+4Ch+var_34]
.text:0040465D                 and     bl, 7
.text:00404660                 add     bl, 30h ; '0'
.text:00404663                 lea     esi, [esi+0]
.text:00404669                 lea     edi, [edi+0]
.text:00404670
.text:00404670 loc_404670:                             ; CODE XREF: sub_403FB0+645↑j
.text:00404670                                         ; sub_403FB0+64C↑j
.text:00404670                 lea     eax, [ebp+1]
.text:00404673                 cmp     edx, eax
.text:00404675                 jbe     loc_404370
.text:0040467B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040467F                 cmp     [esp+4Ch+var_34], ebp
.text:00404683                 jnb     short loc_404690
.text:00404685                 mov     ecx, [esp+4Ch+arg_0]
.text:00404689                 mov     edi, [esp+4Ch+var_34]
.text:0040468D                 mov     [edi+ecx], bl
.text:00404690
.text:00404690 loc_404690:                             ; CODE XREF: sub_403FB0+6D3↑j
.text:00404690                 inc     [esp+4Ch+var_34]
.text:00404694                 mov     ebp, eax
.text:00404696                 mov     eax, [esp+4Ch+Str]
.text:0040469A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040469F                 jmp     loc_4045F0
.text:004046A4 ; ---------------------------------------------------------------------------
.text:004046A4
.text:004046A4 loc_4046A4:                             ; CODE XREF: sub_403FB0+5FF↑j
.text:004046A4                 mov     ecx, ds:_pctype
.text:004046AA                 mov     edi, [ecx]
.text:004046AC                 movzx   eax, word ptr [edi+edx*2]
.text:004046B0                 and     eax, 157h
.text:004046B5                 jmp     loc_4045C5
.text:004046B5 ; ---------------------------------------------------------------------------
.text:004046BA                 align 10h
.text:004046C0
.text:004046C0 loc_4046C0:                             ; CODE XREF: sub_403FB0+5E5↑j
.text:004046C0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004046C5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004046CD                 mov     [esp+4Ch+var_28], 0
.text:004046D5                 mov     [esp+4Ch+var_29], 1
.text:004046DA                 jz      loc_40486C
.text:004046E0
.text:004046E0 loc_4046E0:                             ; CODE XREF: sub_403FB0+8CC↓j
.text:004046E0                 mov     ecx, [esp+4Ch+arg_C]
.text:004046E4                 lea     edx, [esp+4Ch+var_18]
.text:004046E8                 mov     edi, [esp+4Ch+Str]
.text:004046EC                 mov     [esp+4Ch+State], edx ; State
.text:004046F0                 lea     esi, [esp+4Ch+var_18._State]
.text:004046F4                 sub     ecx, ebp
.text:004046F6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004046FA                 add     edi, ebp
.text:004046FC                 mov     [esp+4Ch+var_30], edi
.text:00404700                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404704                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404707                 call    mbrtowc
.text:0040470C                 test    eax, eax
.text:0040470E                 mov     edi, eax
.text:00404710                 jz      short loc_404750
.text:00404712                 cmp     eax, 0FFFFFFFFh
.text:00404715                 jz      loc_404862
.text:0040471B                 cmp     eax, 0FFFFFFFEh
.text:0040471E                 jz      loc_404822
.text:00404724                 cmp     [esp+4Ch+arg_10], 1
.text:00404729                 jz      short loc_404760
.text:0040472B
.text:0040472B loc_40472B:                             ; CODE XREF: sub_403FB0+7B9↓j
.text:0040472B                                         ; sub_403FB0+86D↓j
.text:0040472B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404730                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404738                 mov     [esp+4Ch+C], ecx ; C
.text:0040473B                 call    iswctype
.text:00404740                 test    eax, eax
.text:00404742                 jnz     short loc_404749
.text:00404744                 mov     [esp+4Ch+var_29], 0
.text:00404749
.text:00404749 loc_404749:                             ; CODE XREF: sub_403FB0+792↑j
.text:00404749                 mov     [esp+4Ch+var_28], edi
.text:0040474D                 lea     esi, [esi+0]
.text:00404750
.text:00404750 loc_404750:                             ; CODE XREF: sub_403FB0+760↑j
.text:00404750                                         ; sub_403FB0+87B↓j ...
.text:00404750                 cmp     [esp+4Ch+var_28], 1
.text:00404755                 jbe     loc_4045CC
.text:0040475B                 jmp     loc_4045E5
.text:00404760 ; ---------------------------------------------------------------------------
.text:00404760
.text:00404760 loc_404760:                             ; CODE XREF: sub_403FB0+779↑j
.text:00404760                 cmp     [esp+4Ch+arg_10], eax
.text:00404764                 mov     edx, 1
.text:00404769                 jnb     short loc_40472B
.text:0040476B
.text:0040476B loc_40476B:                             ; CODE XREF: sub_403FB0+867↓j
.text:0040476B                 mov     ecx, [esp+4Ch+Str]
.text:0040476F                 lea     esi, [edx+ebp]
.text:00404772                 movsx   eax, byte ptr [esi+ecx]
.text:00404776                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404779                 cmp     eax, 21h
.text:0040477C                 ja      def_404782      ; jumptable 00404782 default case, cases 93,95,97-123
.text:00404782                 jmp     ds:jpt_404782[eax*4] ; switch jump
.text:00404782 ; ---------------------------------------------------------------------------
.text:00404789                 align 4
.text:0040478C jpt_404782      dd offset loc_4043BB    ; DATA XREF: sub_403FB0+7D2↑r
.text:0040478C                 dd offset loc_4043BB    ; jump table for switch statement
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset loc_4043BB
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset loc_4043BB
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset def_404782
.text:0040478C                 dd offset loc_4043BB
.text:00404814 ; ---------------------------------------------------------------------------
.text:00404814
.text:00404814 def_404782:                             ; CODE XREF: sub_403FB0+7CC↑j
.text:00404814                                         ; sub_403FB0+7D2↑j
.text:00404814                                         ; DATA XREF: ...
.text:00404814                 inc     edx             ; jumptable 00404782 default case, cases 93,95,97-123
.text:00404815                 cmp     edx, edi
.text:00404817                 jb      loc_40476B
.text:0040481D                 jmp     loc_40472B
.text:00404822 ; ---------------------------------------------------------------------------
.text:00404822
.text:00404822 loc_404822:                             ; CODE XREF: sub_403FB0+76E↑j
.text:00404822                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404826                 mov     [esp+4Ch+var_29], 0
.text:0040482B                 jnb     loc_404750
.text:00404831                 mov     eax, [esp+4Ch+var_30]
.text:00404835                 cmp     byte ptr [eax], 0
.text:00404838                 jz      loc_404750
.text:0040483E
.text:0040483E loc_40483E:                             ; CODE XREF: sub_403FB0+8AB↓j
.text:0040483E                 inc     [esp+4Ch+var_28]
.text:00404842                 mov     esi, [esp+4Ch+var_28]
.text:00404846                 lea     eax, [esi+ebp]
.text:00404849                 cmp     eax, [esp+4Ch+arg_C]
.text:0040484D                 jnb     loc_404750
.text:00404853                 mov     edi, [esp+4Ch+Str]
.text:00404857                 cmp     byte ptr [eax+edi], 0
.text:0040485B                 jnz     short loc_40483E
.text:0040485D                 jmp     loc_404750
.text:00404862 ; ---------------------------------------------------------------------------
.text:00404862
.text:00404862 loc_404862:                             ; CODE XREF: sub_403FB0+765↑j
.text:00404862                 mov     [esp+4Ch+var_29], 0
.text:00404867                 jmp     loc_404750
.text:0040486C ; ---------------------------------------------------------------------------
.text:0040486C
.text:0040486C loc_40486C:                             ; CODE XREF: sub_403FB0+72A↑j
.text:0040486C                 mov     edx, [esp+4Ch+Str]
.text:00404870                 mov     [esp+4Ch+C], edx ; Str
.text:00404873                 call    strlen
.text:00404878                 mov     [esp+4Ch+arg_C], eax
.text:0040487C                 jmp     loc_4046E0
.text:00404881 ; ---------------------------------------------------------------------------
.text:00404881
.text:00404881 loc_404881:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404881                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:00404881                 mov     dl, bl          ; jumptable 004040B5 case 92
.text:00404883                 jmp     loc_4043B4
.text:00404888 ; ---------------------------------------------------------------------------
.text:00404888
.text:00404888 loc_404888:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404888                                         ; sub_403FB0+902↓j
.text:00404888                                         ; DATA XREF: ...
.text:00404888                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004040B5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040488D                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:0040488D                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:00404893                 jmp     loc_4043BB      ; jumptable 00404782 cases 91,92,94,96,124
.text:00404898 ; ---------------------------------------------------------------------------
.text:00404898
.text:00404898 loc_404898:                             ; CODE XREF: sub_403FB0+105↑j
.text:00404898                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:00404898                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004040B5 cases 123,125
.text:0040489D                 jz      short loc_4048B4
.text:0040489F                 cmp     [esp+4Ch+arg_C], 1
.text:004048A4
.text:004048A4 loc_4048A4:                             ; CODE XREF: sub_403FB0+90C↓j
.text:004048A4                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:004048A4                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:004048AA
.text:004048AA loc_4048AA:                             ; CODE XREF: sub_403FB0+105↑j
.text:004048AA                                         ; DATA XREF: sub_403FB0:jpt_4040B5↑o
.text:004048AA                 test    ebp, ebp        ; jumptable 004040B5 cases 35,126
.text:004048AC                 jnz     def_4044B2      ; jumptable 004040B5 cases 37,43-58,65-90,93,95,97-122
.text:004048AC                                         ; jumptable 004044B2 default case, cases 34-38,42-44,46,48-59
.text:004048B2                 jmp     short loc_404888 ; jumptable 004040B5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004048B4 ; ---------------------------------------------------------------------------
.text:004048B4
.text:004048B4 loc_4048B4:                             ; CODE XREF: sub_403FB0+8ED↑j
.text:004048B4                 mov     esi, [esp+4Ch+Str]
.text:004048B8                 cmp     byte ptr [esi+1], 0
.text:004048BC                 jmp     short loc_4048A4
.text:004048BE ; ---------------------------------------------------------------------------
.text:004048BE
.text:004048BE loc_4048BE:                             ; CODE XREF: sub_403FB0:loc_40404F↑j
.text:004048BE                 test    ebp, ebp
.text:004048C0                 jnz     short loc_4048CD
.text:004048C2                 cmp     [esp+4Ch+arg_10], 1
.text:004048C7                 jz      loc_4043BB      ; jumptable 00404782 cases 91,92,94,96,124
.text:004048CD
.text:004048CD loc_4048CD:                             ; CODE XREF: sub_403FB0+910↑j
.text:004048CD                 mov     esi, [esp+4Ch+var_1C]
.text:004048D1                 test    esi, esi
.text:004048D3                 jz      short loc_404908
.text:004048D5                 mov     edi, [esp+4Ch+var_1C]
.text:004048D9                 movzx   eax, byte ptr [edi]
.text:004048DC                 test    al, al
.text:004048DE                 jz      short loc_404908
.text:004048E0
.text:004048E0 loc_4048E0:                             ; CODE XREF: sub_403FB0+956↓j
.text:004048E0                 mov     ebp, [esp+4Ch+arg_4]
.text:004048E4                 cmp     [esp+4Ch+var_34], ebp
.text:004048E8                 jnb     short loc_4048F5
.text:004048EA                 mov     ecx, [esp+4Ch+arg_0]
.text:004048EE                 mov     ebx, [esp+4Ch+var_34]
.text:004048F2                 mov     [ebx+ecx], al
.text:004048F5
.text:004048F5 loc_4048F5:                             ; CODE XREF: sub_403FB0+938↑j
.text:004048F5                 inc     [esp+4Ch+var_1C]
.text:004048F9                 inc     [esp+4Ch+var_34]
.text:004048FD                 mov     edx, [esp+4Ch+var_1C]
.text:00404901                 movzx   eax, byte ptr [edx]
.text:00404904                 test    al, al
.text:00404906                 jnz     short loc_4048E0
.text:00404908
.text:00404908 loc_404908:                             ; CODE XREF: sub_403FB0+923↑j
.text:00404908                                         ; sub_403FB0+92E↑j
.text:00404908                 mov     eax, [esp+4Ch+arg_4]
.text:0040490C                 cmp     [esp+4Ch+var_34], eax
.text:00404910                 jnb     short loc_40491E
.text:00404912                 mov     edi, [esp+4Ch+arg_0]
.text:00404916                 mov     esi, [esp+4Ch+var_34]
.text:0040491A                 mov     byte ptr [esi+edi], 0
.text:0040491E
.text:0040491E loc_40491E:                             ; CODE XREF: sub_403FB0+960↑j
.text:0040491E                 mov     eax, [esp+4Ch+var_34]
.text:00404922                 jmp     loc_4043EF
.text:00404927 ; ---------------------------------------------------------------------------
.text:00404927
.text:00404927 loc_404927:                             ; CODE XREF: sub_403FB0+95↑j
.text:00404927                 mov     ebx, [esp+4Ch+Str]
.text:0040492B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404930                 jmp     loc_40404F
.text:00404935 ; ---------------------------------------------------------------------------
.text:00404935
.text:00404935 loc_404935:                             ; CODE XREF: sub_403FB0+3D↑j
.text:00404935                                         ; DATA XREF: sub_403FB0:jpt_403FED↑o
.text:00404935                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00403FED case 2
.text:00404939                 cmp     [esp+4Ch+var_34], edx
.text:0040493D                 jnb     short loc_404946
.text:0040493F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404943                 mov     byte ptr [ecx], 27h ; '''
.text:00404946
.text:00404946 loc_404946:                             ; CODE XREF: sub_403FB0+98D↑j
.text:00404946                 mov     [esp+4Ch+var_34], 1
.text:0040494E                 mov     [esp+4Ch+var_1C], 403F9Eh
.text:00404956                 jmp     loc_404036
.text:0040495B ; ---------------------------------------------------------------------------
.text:0040495B
.text:0040495B loc_40495B:                             ; CODE XREF: sub_403FB0+3D↑j
.text:0040495B                                         ; DATA XREF: sub_403FB0:jpt_403FED↑o
.text:0040495B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00403FED case 4
.text:00404960                 jmp     def_403FED      ; jumptable 00403FED default case, cases 0,1
.text:00404965 ; ---------------------------------------------------------------------------
.text:00404965
.text:00404965 loc_404965:                             ; CODE XREF: sub_403FB0+3D↑j
.text:00404965                                         ; DATA XREF: sub_403FB0:jpt_403FED↑o
.text:00404965                 mov     [esp+4Ch+C], 403FA0h ; jumptable 00403FED cases 5,6
.text:0040496C                 call    ds:libintl_gettext
.text:00404972                 cmp     eax, 403FA0h
.text:00404977                 mov     edi, eax
.text:00404979                 jz      short loc_4049F0
.text:0040497B
.text:0040497B loc_40497B:                             ; CODE XREF: sub_403FB0+A45↓j
.text:0040497B                                         ; sub_403FB0+A4C↓j
.text:0040497B                 mov     [esp+4Ch+C], 403F9Eh
.text:00404982                 call    ds:libintl_gettext
.text:00404988                 cmp     eax, 403F9Eh
.text:0040498D                 mov     edx, eax
.text:0040498F                 jz      short loc_4049E2
.text:00404991
.text:00404991 loc_404991:                             ; CODE XREF: sub_403FB0+A37↓j
.text:00404991                                         ; sub_403FB0+A3E↓j
.text:00404991                 mov     [esp+4Ch+var_1C], edi
.text:00404995                 cmp     byte ptr [edi], 0
.text:00404998                 jz      short loc_4049C8
.text:0040499A
.text:0040499A loc_40499A:                             ; CODE XREF: sub_403FB0+A16↓j
.text:0040499A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040499E                 cmp     [esp+4Ch+var_34], ecx
.text:004049A2                 jnb     short loc_4049B7
.text:004049A4                 mov     ebp, [esp+4Ch+var_1C]
.text:004049A8                 mov     edi, [esp+4Ch+arg_0]
.text:004049AC                 mov     esi, [esp+4Ch+var_34]
.text:004049B0                 movzx   ebx, byte ptr [ebp+0]
.text:004049B4                 mov     [esi+edi], bl
.text:004049B7
.text:004049B7 loc_4049B7:                             ; CODE XREF: sub_403FB0+9F2↑j
.text:004049B7                 inc     [esp+4Ch+var_1C]
.text:004049BB                 inc     [esp+4Ch+var_34]
.text:004049BF                 mov     eax, [esp+4Ch+var_1C]
.text:004049C3                 cmp     byte ptr [eax], 0
.text:004049C6                 jnz     short loc_40499A
.text:004049C8
.text:004049C8 loc_4049C8:                             ; CODE XREF: sub_403FB0+9E8↑j
.text:004049C8                 mov     [esp+4Ch+var_21], 1
.text:004049CD                 mov     [esp+4Ch+var_1C], edx
.text:004049D1                 mov     [esp+4Ch+C], edx ; Str
.text:004049D4                 call    strlen
.text:004049D9                 mov     [esp+4Ch+var_20], eax
.text:004049DD                 jmp     def_403FED      ; jumptable 00403FED default case, cases 0,1
.text:004049E2 ; ---------------------------------------------------------------------------
.text:004049E2
.text:004049E2 loc_4049E2:                             ; CODE XREF: sub_403FB0+9DF↑j
.text:004049E2                 cmp     [esp+4Ch+arg_10], 6
.text:004049E7                 jnz     short loc_404991
.text:004049E9                 mov     edx, offset asc_403F9C ; "\"'`"
.text:004049EE                 jmp     short loc_404991
.text:004049F0 ; ---------------------------------------------------------------------------
.text:004049F0
.text:004049F0 loc_4049F0:                             ; CODE XREF: sub_403FB0+9C9↑j
.text:004049F0                 cmp     [esp+4Ch+arg_10], 6
.text:004049F5                 jnz     short loc_40497B
.text:004049F7                 mov     edi, offset asc_403F9C ; "\"'`"
.text:004049FC                 jmp     loc_40497B
.text:004049FC sub_403FB0      endp
.text:004049FC
.text:00404A01 ; ---------------------------------------------------------------------------
.text:00404A01                 jmp     short loc_404A10
.text:00404A01 ; ---------------------------------------------------------------------------
.text:00404A03                 align 10h
.text:00404A10
.text:00404A10 loc_404A10:                             ; CODE XREF: .text:00404A01↑j
.text:00404A10                 sub     esp, 0Ch
.text:00404A13                 mov     [esp+4], ebx
.text:00404A17                 mov     [esp+8], esi
.text:00404A1B                 call    _errno
.text:00404A20                 mov     esi, [eax]
.text:00404A22                 mov     dword ptr [esp], 24h ; '$'
.text:00404A29                 call    sub_403C90
.text:00404A2E                 mov     edx, [esp+10h]
.text:00404A32                 mov     ebx, eax
.text:00404A34                 test    edx, edx
.text:00404A36                 jz      short loc_404A81
.text:00404A38
.text:00404A38 loc_404A38:                             ; CODE XREF: .text:00404A86↓j
.text:00404A38                 mov     ecx, [edx]
.text:00404A3A                 mov     [ebx], ecx
.text:00404A3C                 mov     ecx, [edx+4]
.text:00404A3F                 mov     [ebx+4], ecx
.text:00404A42                 mov     ecx, [edx+8]
.text:00404A45                 mov     [ebx+8], ecx
.text:00404A48                 mov     ecx, [edx+0Ch]
.text:00404A4B                 mov     [ebx+0Ch], ecx
.text:00404A4E                 mov     ecx, [edx+10h]
.text:00404A51                 mov     [ebx+10h], ecx
.text:00404A54                 mov     ecx, [edx+14h]
.text:00404A57                 mov     [ebx+14h], ecx
.text:00404A5A                 mov     ecx, [edx+18h]
.text:00404A5D                 mov     [ebx+18h], ecx
.text:00404A60                 mov     ecx, [edx+1Ch]
.text:00404A63                 mov     [ebx+1Ch], ecx
.text:00404A66                 mov     ecx, [edx+20h]
.text:00404A69                 mov     [ebx+20h], ecx
.text:00404A6C                 call    _errno
.text:00404A71                 mov     [eax], esi
.text:00404A73                 mov     esi, [esp+8]
.text:00404A77                 mov     eax, ebx
.text:00404A79                 mov     ebx, [esp+4]
.text:00404A7D                 add     esp, 0Ch
.text:00404A80                 retn
.text:00404A81 ; ---------------------------------------------------------------------------
.text:00404A81
.text:00404A81 loc_404A81:                             ; CODE XREF: .text:00404A36↑j
.text:00404A81                 mov     edx, offset dword_407180
.text:00404A86                 jmp     short loc_404A38
.text:00404A86 ; ---------------------------------------------------------------------------
.text:00404A88                 align 10h
.text:00404A90                 mov     eax, [esp+4]
.text:00404A94                 test    eax, eax
.text:00404A96                 jz      short loc_404AA0
.text:00404A98
.text:00404A98 loc_404A98:                             ; CODE XREF: .text:00404AA5↓j
.text:00404A98                 mov     eax, [eax]
.text:00404A9A                 retn
.text:00404A9A ; ---------------------------------------------------------------------------
.text:00404A9B                 align 10h
.text:00404AA0
.text:00404AA0 loc_404AA0:                             ; CODE XREF: .text:00404A96↑j
.text:00404AA0                 mov     eax, offset dword_407180
.text:00404AA5                 jmp     short loc_404A98
.text:00404AA5 ; ---------------------------------------------------------------------------
.text:00404AA7                 align 10h
.text:00404AB0                 mov     edx, [esp+4]
.text:00404AB4                 test    edx, edx
.text:00404AB6                 jz      short loc_404AC0
.text:00404AB8
.text:00404AB8 loc_404AB8:                             ; CODE XREF: .text:00404AC5↓j
.text:00404AB8                 mov     ecx, [esp+8]
.text:00404ABC                 mov     [edx], ecx
.text:00404ABE                 retn
.text:00404ABE ; ---------------------------------------------------------------------------
.text:00404ABF                 align 10h
.text:00404AC0
.text:00404AC0 loc_404AC0:                             ; CODE XREF: .text:00404AB6↑j
.text:00404AC0                 mov     edx, offset dword_407180
.text:00404AC5                 jmp     short loc_404AB8
.text:00404AC5 ; ---------------------------------------------------------------------------
.text:00404AC7                 align 10h
.text:00404AD0                 sub     esp, 8
.text:00404AD3                 mov     eax, [esp+0Ch]
.text:00404AD7                 movzx   ecx, byte ptr [esp+10h]
.text:00404ADC                 mov     [esp], ebx
.text:00404ADF                 mov     ebx, [esp+14h]
.text:00404AE3                 mov     [esp+4], esi
.text:00404AE7                 mov     dl, cl
.text:00404AE9                 shr     dl, 5
.text:00404AEC                 movzx   edx, dl
.text:00404AEF                 shl     edx, 2
.text:00404AF2                 test    eax, eax
.text:00404AF4                 lea     esi, [edx+eax+4]
.text:00404AF8                 jz      short loc_404B20
.text:00404AFA
.text:00404AFA loc_404AFA:                             ; CODE XREF: .text:00404B26↓j
.text:00404AFA                 mov     edx, [esi]
.text:00404AFC                 and     ecx, 1Fh
.text:00404AFF                 and     ebx, 1
.text:00404B02                 mov     eax, edx
.text:00404B04                 shr     eax, cl
.text:00404B06                 and     eax, 1
.text:00404B09                 xor     ebx, eax
.text:00404B0B                 shl     ebx, cl
.text:00404B0D                 xor     edx, ebx
.text:00404B0F                 mov     [esi], edx
.text:00404B11                 mov     ebx, [esp]
.text:00404B14                 mov     esi, [esp+4]
.text:00404B18                 add     esp, 8
.text:00404B1B                 retn
.text:00404B1B ; ---------------------------------------------------------------------------
.text:00404B1C                 align 10h
.text:00404B20
.text:00404B20 loc_404B20:                             ; CODE XREF: .text:00404AF8↑j
.text:00404B20                 lea     esi, dword_407184[edx]
.text:00404B26                 jmp     short loc_404AFA
.text:00404B26 ; ---------------------------------------------------------------------------
.text:00404B28                 align 10h
.text:00404B30                 sub     esp, 2Ch
.text:00404B33                 mov     [esp+24h], ebx
.text:00404B37                 mov     ebx, [esp+40h]
.text:00404B3B                 mov     [esp+28h], esi
.text:00404B3F                 test    ebx, ebx
.text:00404B41                 jz      short loc_404B90
.text:00404B43
.text:00404B43 loc_404B43:                             ; CODE XREF: .text:00404B95↓j
.text:00404B43                 call    _errno
.text:00404B48                 mov     esi, [eax]
.text:00404B4A                 mov     [esp+14h], ebx
.text:00404B4E                 mov     edx, [ebx]
.text:00404B50                 mov     ecx, [esp+38h]
.text:00404B54                 mov     ebx, [esp+3Ch]
.text:00404B58                 mov     [esp+10h], edx
.text:00404B5C                 mov     edx, [esp+34h]
.text:00404B60                 mov     [esp+0Ch], ebx
.text:00404B64                 mov     [esp+8], ecx
.text:00404B68                 mov     [esp+4], edx
.text:00404B6C                 mov     edx, [esp+30h]
.text:00404B70                 mov     [esp], edx
.text:00404B73                 call    sub_403FB0
.text:00404B78                 mov     ebx, eax
.text:00404B7A                 call    _errno
.text:00404B7F                 mov     [eax], esi
.text:00404B81                 mov     esi, [esp+28h]
.text:00404B85                 mov     eax, ebx
.text:00404B87                 mov     ebx, [esp+24h]
.text:00404B8B                 add     esp, 2Ch
.text:00404B8E                 retn
.text:00404B8E ; ---------------------------------------------------------------------------
.text:00404B8F                 align 10h
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: .text:00404B41↑j
.text:00404B90                 mov     ebx, offset dword_407180
.text:00404B95                 jmp     short loc_404B43
.text:00404B95 ; ---------------------------------------------------------------------------
.text:00404B97                 align 10h
.text:00404BA0                 push    ebp
.text:00404BA1                 push    edi
.text:00404BA2                 push    esi
.text:00404BA3                 push    ebx
.text:00404BA4                 sub     esp, 2Ch
.text:00404BA7                 mov     ebp, [esp+48h]
.text:00404BAB                 call    _errno
.text:00404BB0                 mov     edx, [eax]
.text:00404BB2                 test    ebp, ebp
.text:00404BB4                 mov     ebx, ebp
.text:00404BB6                 mov     [esp+28h], edx
.text:00404BBA                 jz      loc_404C70
.text:00404BC0
.text:00404BC0 loc_404BC0:                             ; CODE XREF: .text:00404C75↓j
.text:00404BC0                 call    _errno
.text:00404BC5                 mov     edi, [eax]
.text:00404BC7                 mov     esi, ebp
.text:00404BC9                 mov     [esp+14h], ebx
.text:00404BCD                 mov     ecx, [ebx]
.text:00404BCF                 mov     dword ptr [esp], 0
.text:00404BD6                 mov     edx, [esp+44h]
.text:00404BDA                 mov     dword ptr [esp+4], 0
.text:00404BE2                 mov     eax, [esp+40h]
.text:00404BE6                 mov     [esp+10h], ecx
.text:00404BEA                 mov     [esp+0Ch], edx
.text:00404BEE                 mov     [esp+8], eax
.text:00404BF2                 call    sub_403FB0
.text:00404BF7                 mov     ebx, eax
.text:00404BF9                 call    _errno
.text:00404BFE                 mov     [eax], edi
.text:00404C00                 lea     edi, [ebx+1]
.text:00404C03                 mov     [esp], edi
.text:00404C06                 call    sub_403C90
.text:00404C0B                 mov     [esp+24h], eax
.text:00404C0F                 test    ebp, ebp
.text:00404C11                 jz      short loc_404C62
.text:00404C13
.text:00404C13 loc_404C13:                             ; CODE XREF: .text:00404C67↓j
.text:00404C13                 call    _errno
.text:00404C18                 mov     ebp, [eax]
.text:00404C1A                 mov     [esp+14h], esi
.text:00404C1E                 mov     ecx, [esi]
.text:00404C20                 mov     [esp+4], edi
.text:00404C24                 mov     edx, [esp+44h]
.text:00404C28                 mov     esi, [esp+24h]
.text:00404C2C                 mov     [esp+10h], ecx
.text:00404C30                 mov     eax, [esp+40h]
.text:00404C34                 mov     [esp+0Ch], edx
.text:00404C38                 mov     [esp], esi
.text:00404C3B                 mov     [esp+8], eax
.text:00404C3F                 call    sub_403FB0
.text:00404C44                 call    _errno
.text:00404C49                 mov     [eax], ebp
.text:00404C4B                 call    _errno
.text:00404C50                 mov     ebx, [esp+28h]
.text:00404C54                 mov     [eax], ebx
.text:00404C56                 mov     eax, [esp+24h]
.text:00404C5A                 add     esp, 2Ch
.text:00404C5D                 pop     ebx
.text:00404C5E                 pop     esi
.text:00404C5F                 pop     edi
.text:00404C60                 pop     ebp
.text:00404C61                 retn
.text:00404C62 ; ---------------------------------------------------------------------------
.text:00404C62
.text:00404C62 loc_404C62:                             ; CODE XREF: .text:00404C11↑j
.text:00404C62                 mov     esi, offset dword_407180
.text:00404C67                 jmp     short loc_404C13
.text:00404C67 ; ---------------------------------------------------------------------------
.text:00404C69                 align 10h
.text:00404C70
.text:00404C70 loc_404C70:                             ; CODE XREF: .text:00404BBA↑j
.text:00404C70                 mov     ebx, offset dword_407180
.text:00404C75                 jmp     loc_404BC0
.text:00404C75 ; ---------------------------------------------------------------------------
.text:00404C7A                 align 10h
.text:00404C80                 sub     esp, 1Ch
.text:00404C83                 mov     edx, [esp+24h]
.text:00404C87                 mov     dword ptr [esp+0Ch], offset dword_407180
.text:00404C8F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404C97                 mov     [esp+4], edx
.text:00404C9B                 mov     edx, [esp+20h]
.text:00404C9F                 mov     [esp], edx
.text:00404CA2                 call    sub_4050F0
.text:00404CA7                 add     esp, 1Ch
.text:00404CAA                 retn
.text:00404CAA ; ---------------------------------------------------------------------------
.text:00404CAB                 align 10h
.text:00404CB0                 sub     esp, 1Ch
.text:00404CB3                 mov     edx, [esp+20h]
.text:00404CB7                 mov     dword ptr [esp+0Ch], offset dword_407180
.text:00404CBF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404CC7                 mov     [esp+4], edx
.text:00404CCB                 mov     dword ptr [esp], 0
.text:00404CD2                 call    sub_4050F0
.text:00404CD7                 add     esp, 1Ch
.text:00404CDA                 retn
.text:00404CDA ; ---------------------------------------------------------------------------
.text:00404CDB                 align 10h
.text:00404CE0                 push    ebp
.text:00404CE1                 xor     eax, eax
.text:00404CE3                 mov     ecx, 8
.text:00404CE8                 push    edi
.text:00404CE9                 push    esi
.text:00404CEA                 push    ebx
.text:00404CEB                 sub     esp, 0ACh
.text:00404CF1                 mov     ebp, [esp+0C4h]
.text:00404CF8                 cld
.text:00404CF9                 lea     edi, [esp+14h]
.text:00404CFD                 mov     [esp+10h], ebp
.text:00404D01                 rep stosd
.text:00404D03                 mov     eax, [esp+30h]
.text:00404D07                 mov     edi, [esp+10h]
.text:00404D0B                 mov     esi, [esp+14h]
.text:00404D0F                 mov     [esp+60h], eax
.text:00404D13                 mov     ebp, [esp+18h]
.text:00404D17                 mov     eax, [esp+10h]
.text:00404D1B                 mov     [esp+40h], edi
.text:00404D1F                 mov     ecx, [esp+28h]
.text:00404D23                 mov     edi, [esp+1Ch]
.text:00404D27                 mov     [esp+44h], esi
.text:00404D2B                 mov     edx, [esp+2Ch]
.text:00404D2F                 mov     esi, [esp+20h]
.text:00404D33                 mov     [esp+70h], eax
.text:00404D37                 mov     ebx, [esp+24h]
.text:00404D3B                 mov     eax, [esp+14h]
.text:00404D3F                 mov     [esp+48h], ebp
.text:00404D43                 mov     [esp+4Ch], edi
.text:00404D47                 mov     [esp+50h], esi
.text:00404D4B                 mov     [esp+54h], ebx
.text:00404D4F                 mov     [esp+58h], ecx
.text:00404D53                 mov     [esp+5Ch], edx
.text:00404D57                 mov     [esp+74h], eax
.text:00404D5B                 mov     [esp+78h], ebp
.text:00404D5F                 mov     [esp+7Ch], edi
.text:00404D63                 mov     [esp+80h], esi
.text:00404D6A                 mov     [esp+84h], ebx
.text:00404D71                 mov     ebx, [esp+30h]
.text:00404D75                 mov     [esp+8Ch], edx
.text:00404D7C                 mov     edx, [esp+0C8h]
.text:00404D83                 mov     [esp+88h], ecx
.text:00404D8A                 lea     ecx, [esp+70h]
.text:00404D8E                 mov     [esp+4], edx
.text:00404D92                 mov     edx, [esp+0C0h]
.text:00404D99                 mov     [esp+90h], ebx
.text:00404DA0                 mov     [esp+0Ch], ecx
.text:00404DA4                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404DAC                 mov     [esp], edx
.text:00404DAF                 call    sub_4050F0
.text:00404DB4                 add     esp, 0ACh
.text:00404DBA                 pop     ebx
.text:00404DBB                 pop     esi
.text:00404DBC                 pop     edi
.text:00404DBD                 pop     ebp
.text:00404DBE                 retn
.text:00404DBE ; ---------------------------------------------------------------------------
.text:00404DBF                 align 10h
.text:00404DC0                 push    ebp
.text:00404DC1                 xor     eax, eax
.text:00404DC3                 mov     ecx, 8
.text:00404DC8                 push    edi
.text:00404DC9                 push    esi
.text:00404DCA                 push    ebx
.text:00404DCB                 sub     esp, 0ACh
.text:00404DD1                 mov     edx, [esp+0C4h]
.text:00404DD8                 cld
.text:00404DD9                 lea     edi, [esp+14h]
.text:00404DDD                 mov     [esp+10h], edx
.text:00404DE1                 rep stosd
.text:00404DE3                 mov     eax, [esp+30h]
.text:00404DE7                 mov     ebp, [esp+10h]
.text:00404DEB                 mov     edi, [esp+14h]
.text:00404DEF                 mov     [esp+60h], eax
.text:00404DF3                 mov     esi, [esp+20h]
.text:00404DF7                 mov     eax, [esp+10h]
.text:00404DFB                 mov     [esp+40h], ebp
.text:00404DFF                 mov     ecx, [esp+28h]
.text:00404E03                 mov     ebp, [esp+18h]
.text:00404E07                 mov     [esp+44h], edi
.text:00404E0B                 mov     edx, [esp+2Ch]
.text:00404E0F                 mov     edi, [esp+1Ch]
.text:00404E13                 mov     [esp+70h], eax
.text:00404E17                 mov     ebx, [esp+24h]
.text:00404E1B                 mov     eax, [esp+14h]
.text:00404E1F                 mov     [esp+48h], ebp
.text:00404E23                 mov     [esp+4Ch], edi
.text:00404E27                 mov     [esp+50h], esi
.text:00404E2B                 mov     [esp+54h], ebx
.text:00404E2F                 mov     [esp+58h], ecx
.text:00404E33                 mov     [esp+5Ch], edx
.text:00404E37                 mov     [esp+74h], eax
.text:00404E3B                 mov     [esp+78h], ebp
.text:00404E3F                 mov     [esp+7Ch], edi
.text:00404E43                 mov     [esp+80h], esi
.text:00404E4A                 mov     [esp+84h], ebx
.text:00404E51                 mov     esi, [esp+30h]
.text:00404E55                 lea     ebx, [esp+70h]
.text:00404E59                 mov     [esp+8Ch], edx
.text:00404E60                 mov     edx, [esp+0C8h]
.text:00404E67                 mov     [esp+88h], ecx
.text:00404E6E                 mov     ecx, [esp+0CCh]
.text:00404E75                 mov     [esp+4], edx
.text:00404E79                 mov     edx, [esp+0C0h]
.text:00404E80                 mov     [esp+90h], esi
.text:00404E87                 mov     [esp+0Ch], ebx
.text:00404E8B                 mov     [esp+8], ecx
.text:00404E8F                 mov     [esp], edx
.text:00404E92                 call    sub_4050F0
.text:00404E97                 add     esp, 0ACh
.text:00404E9D                 pop     ebx
.text:00404E9E                 pop     esi
.text:00404E9F                 pop     edi
.text:00404EA0                 pop     ebp
.text:00404EA1                 retn
.text:00404EA1 ; ---------------------------------------------------------------------------
.text:00404EA2                 align 10h
.text:00404EB0                 push    ebp
.text:00404EB1                 xor     eax, eax
.text:00404EB3                 mov     ecx, 8
.text:00404EB8                 push    edi
.text:00404EB9                 push    esi
.text:00404EBA                 push    ebx
.text:00404EBB                 sub     esp, 0ACh
.text:00404EC1                 mov     edi, [esp+0C0h]
.text:00404EC8                 cld
.text:00404EC9                 mov     [esp+10h], edi
.text:00404ECD                 lea     edi, [esp+14h]
.text:00404ED1                 rep stosd
.text:00404ED3                 mov     eax, [esp+30h]
.text:00404ED7                 mov     esi, [esp+10h]
.text:00404EDB                 mov     ebx, [esp+14h]
.text:00404EDF                 mov     [esp+60h], eax
.text:00404EE3                 mov     ebp, [esp+18h]
.text:00404EE7                 mov     eax, [esp+10h]
.text:00404EEB                 mov     [esp+40h], esi
.text:00404EEF                 mov     edi, [esp+1Ch]
.text:00404EF3                 mov     esi, [esp+20h]
.text:00404EF7                 mov     [esp+44h], ebx
.text:00404EFB                 mov     ecx, [esp+28h]
.text:00404EFF                 mov     edx, [esp+2Ch]
.text:00404F03                 mov     [esp+70h], eax
.text:00404F07                 mov     ebx, [esp+24h]
.text:00404F0B                 mov     eax, [esp+14h]
.text:00404F0F                 mov     [esp+48h], ebp
.text:00404F13                 mov     [esp+4Ch], edi
.text:00404F17                 mov     [esp+50h], esi
.text:00404F1B                 mov     [esp+54h], ebx
.text:00404F1F                 mov     [esp+58h], ecx
.text:00404F23                 mov     [esp+5Ch], edx
.text:00404F27                 mov     [esp+74h], eax
.text:00404F2B                 mov     [esp+78h], ebp
.text:00404F2F                 mov     [esp+7Ch], edi
.text:00404F33                 mov     [esp+80h], esi
.text:00404F3A                 mov     [esp+84h], ebx
.text:00404F41                 mov     [esp+8Ch], edx
.text:00404F48                 lea     edx, [esp+70h]
.text:00404F4C                 mov     [esp+88h], ecx
.text:00404F53                 mov     ecx, [esp+30h]
.text:00404F57                 mov     [esp+0Ch], edx
.text:00404F5B                 mov     edx, [esp+0C4h]
.text:00404F62                 mov     [esp+90h], ecx
.text:00404F69                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404F71                 mov     [esp+4], edx
.text:00404F75                 mov     dword ptr [esp], 0
.text:00404F7C                 call    sub_4050F0
.text:00404F81                 add     esp, 0ACh
.text:00404F87                 pop     ebx
.text:00404F88                 pop     esi
.text:00404F89                 pop     edi
.text:00404F8A                 pop     ebp
.text:00404F8B                 retn
.text:00404F8B ; ---------------------------------------------------------------------------
.text:00404F8C                 align 10h
.text:00404F90                 push    edi
.text:00404F91                 push    esi
.text:00404F92                 push    ebx
.text:00404F93                 sub     esp, 40h
.text:00404F96                 mov     edx, ds:dword_40718C
.text:00404F9C                 mov     ebx, ds:dword_407180
.text:00404FA2                 mov     esi, ds:dword_407188
.text:00404FA8                 mov     edi, ds:dword_407184
.text:00404FAE                 mov     [esp+1Ch], edx
.text:00404FB2                 mov     ecx, ds:dword_407190
.text:00404FB8                 mov     edx, ds:dword_4071A0
.text:00404FBE                 mov     [esp+10h], ebx
.text:00404FC2                 mov     ebx, ds:dword_407194
.text:00404FC8                 mov     [esp+30h], edx
.text:00404FCC                 movzx   edx, byte ptr [esp+54h]
.text:00404FD1                 mov     [esp+18h], esi
.text:00404FD5                 mov     esi, ds:dword_40719C
.text:00404FDB                 mov     [esp+14h], edi
.text:00404FDF                 mov     edi, ds:dword_407198
.text:00404FE5                 mov     [esp+20h], ecx
.text:00404FE9                 mov     cl, dl
.text:00404FEB                 shr     cl, 5
.text:00404FEE                 mov     [esp+24h], ebx
.text:00404FF2                 movzx   ebx, cl
.text:00404FF5                 mov     [esp+2Ch], esi
.text:00404FF9                 lea     esi, [esp+10h]
.text:00404FFD                 mov     [esp+28h], edi
.text:00405001                 lea     edi, [esi+ebx*4]
.text:00405004                 mov     ebx, edx
.text:00405006                 mov     edx, [edi+4]
.text:00405009                 and     ebx, 1Fh
.text:0040500C                 mov     cl, bl
.text:0040500E                 mov     eax, edx
.text:00405010                 shr     eax, cl
.text:00405012                 and     eax, 1
.text:00405015                 xor     eax, 1
.text:00405018                 shl     eax, cl
.text:0040501A                 xor     edx, eax
.text:0040501C                 mov     [edi+4], edx
.text:0040501F                 mov     edx, [esp+50h]
.text:00405023                 mov     [esp+0Ch], esi
.text:00405027                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040502F                 mov     [esp+4], edx
.text:00405033                 mov     dword ptr [esp], 0
.text:0040503A                 call    sub_4050F0
.text:0040503F                 add     esp, 40h
.text:00405042                 pop     ebx
.text:00405043                 pop     esi
.text:00405044                 pop     edi
.text:00405045                 retn
.text:00405045 ; ---------------------------------------------------------------------------
.text:00405046                 align 10h
.text:00405050
.text:00405050 ; =============== S U B R O U T I N E =======================================
.text:00405050
.text:00405050
.text:00405050 ; int __cdecl sub_405050(char *)
.text:00405050 sub_405050      proc near               ; CODE XREF: sub_403B70+64↑p
.text:00405050
.text:00405050 var_4C          = dword ptr -4Ch
.text:00405050 var_48          = dword ptr -48h
.text:00405050 var_44          = dword ptr -44h
.text:00405050 var_40          = dword ptr -40h
.text:00405050 var_3C          = dword ptr -3Ch
.text:00405050 var_38          = dword ptr -38h
.text:00405050 var_34          = dword ptr -34h
.text:00405050 var_30          = dword ptr -30h
.text:00405050 var_2C          = dword ptr -2Ch
.text:00405050 var_28          = dword ptr -28h
.text:00405050 var_24          = dword ptr -24h
.text:00405050 var_20          = dword ptr -20h
.text:00405050 var_1C          = dword ptr -1Ch
.text:00405050 arg_0           = dword ptr  4
.text:00405050
.text:00405050                 sub     esp, 4Ch
.text:00405053                 mov     ecx, ds:dword_407180
.text:00405059                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405061                 mov     edx, ds:dword_407184
.text:00405067                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040506E                 mov     [esp+4Ch+var_3C], ecx
.text:00405072                 mov     ecx, ds:dword_40718C
.text:00405078                 mov     [esp+4Ch+var_38], edx
.text:0040507C                 mov     edx, ds:dword_407188
.text:00405082                 mov     [esp+4Ch+var_30], ecx
.text:00405086                 mov     ecx, ds:dword_407190
.text:0040508C                 mov     eax, edx
.text:0040508E                 shr     eax, 1Ah
.text:00405091                 and     eax, 1
.text:00405094                 xor     eax, 1
.text:00405097                 mov     [esp+4Ch+var_2C], ecx
.text:0040509B                 shl     eax, 1Ah
.text:0040509E                 mov     ecx, ds:dword_407194
.text:004050A4                 xor     edx, eax
.text:004050A6                 mov     [esp+4Ch+var_34], edx
.text:004050AA                 mov     edx, [esp+4Ch+arg_0]
.text:004050AE                 mov     [esp+4Ch+var_28], ecx
.text:004050B2                 mov     ecx, ds:dword_407198
.text:004050B8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004050BC                 mov     [esp+4Ch+var_24], ecx
.text:004050C0                 mov     ecx, ds:dword_40719C
.text:004050C6                 mov     [esp+4Ch+var_20], ecx
.text:004050CA                 mov     ecx, ds:dword_4071A0
.text:004050D0                 mov     [esp+4Ch+var_1C], ecx
.text:004050D4                 lea     ecx, [esp+4Ch+var_3C]
.text:004050D8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004050DC                 call    sub_4050F0
.text:004050E1                 add     esp, 4Ch
.text:004050E4                 retn
.text:004050E4 sub_405050      endp
.text:004050E4
.text:004050E4 ; ---------------------------------------------------------------------------
.text:004050E5                 align 10h
.text:004050F0
.text:004050F0 ; =============== S U B R O U T I N E =======================================
.text:004050F0
.text:004050F0
.text:004050F0 ; int __cdecl sub_4050F0(int, char *, int, int)
.text:004050F0 sub_4050F0      proc near               ; CODE XREF: .text:00404CA2↑p
.text:004050F0                                         ; .text:00404CD2↑p ...
.text:004050F0
.text:004050F0 Block           = dword ptr -2Ch
.text:004050F0 var_28          = dword ptr -28h
.text:004050F0 Str             = dword ptr -24h
.text:004050F0 var_20          = dword ptr -20h
.text:004050F0 var_1C          = dword ptr -1Ch
.text:004050F0 var_18          = dword ptr -18h
.text:004050F0 var_14          = dword ptr -14h
.text:004050F0 arg_0           = dword ptr  4
.text:004050F0 arg_4           = dword ptr  8
.text:004050F0 arg_8           = dword ptr  0Ch
.text:004050F0 arg_C           = dword ptr  10h
.text:004050F0
.text:004050F0                 push    ebp
.text:004050F1                 push    edi
.text:004050F2                 push    esi
.text:004050F3                 push    ebx
.text:004050F4                 sub     esp, 1Ch
.text:004050F7                 call    _errno
.text:004050FC                 mov     edx, [eax]
.text:004050FE                 mov     eax, [esp+2Ch+arg_0]
.text:00405102                 mov     [esp+2Ch+var_14], edx
.text:00405106                 test    eax, eax
.text:00405108                 js      loc_4052AA
.text:0040510E                 mov     eax, [esp+2Ch+arg_0]
.text:00405112                 cmp     dword_406040, eax
.text:00405118                 ja      short loc_405190
.text:0040511A                 mov     esi, eax
.text:0040511C                 inc     esi
.text:0040511D                 cmp     esi, 1FFFFFFFh
.text:00405123                 ja      loc_4052AF
.text:00405129                 mov     ebx, off_40604C
.text:0040512F                 cmp     ebx, offset dword_406044
.text:00405135                 jz      loc_405281
.text:0040513B
.text:0040513B loc_40513B:                             ; CODE XREF: sub_4050F0+1B5↓j
.text:0040513B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040513E                 lea     ecx, ds:0[esi*8]
.text:00405145                 mov     ebp, esi
.text:00405147                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040514B                 call    sub_403D20
.text:00405150                 mov     off_40604C, eax
.text:00405155                 mov     ebx, dword_406040
.text:0040515B                 sub     ebp, ebx
.text:0040515D                 lea     edi, [eax+ebx*8]
.text:00405160                 lea     eax, ds:0[ebp*8]
.text:00405167                 cmp     eax, 7
.text:0040516A                 jbe     short loc_405180
.text:0040516C                 test    edi, 4
.text:00405172                 jz      short loc_405180
.text:00405174                 mov     dword ptr [edi], 0
.text:0040517A                 sub     eax, 4
.text:0040517D                 add     edi, 4
.text:00405180
.text:00405180 loc_405180:                             ; CODE XREF: sub_4050F0+7A↑j
.text:00405180                                         ; sub_4050F0+82↑j
.text:00405180                 cld
.text:00405181                 mov     ecx, eax
.text:00405183                 shr     ecx, 2
.text:00405186                 xor     eax, eax
.text:00405188                 rep stosd
.text:0040518A                 mov     dword_406040, esi
.text:00405190
.text:00405190 loc_405190:                             ; CODE XREF: sub_4050F0+28↑j
.text:00405190                 mov     esi, off_40604C
.text:00405196                 mov     eax, [esp+2Ch+arg_0]
.text:0040519A                 mov     ebp, [esi+eax*8]
.text:0040519D                 mov     edi, [esi+eax*8+4]
.text:004051A1                 mov     esi, [esp+2Ch+arg_C]
.text:004051A5                 test    esi, esi
.text:004051A7                 jz      loc_405277
.text:004051AD
.text:004051AD loc_4051AD:                             ; CODE XREF: sub_4050F0+18C↓j
.text:004051AD                 call    _errno
.text:004051B2                 mov     ebx, [eax]
.text:004051B4                 mov     [esp+2Ch+var_18], esi ; int
.text:004051B8                 mov     ecx, [esi]
.text:004051BA                 mov     [esp+2Ch+Block], edi ; int
.text:004051BD                 mov     edx, [esp+2Ch+arg_8]
.text:004051C1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004051C5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004051C9                 mov     ecx, [esp+2Ch+arg_4]
.text:004051CD                 mov     [esp+2Ch+var_20], edx ; int
.text:004051D1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004051D5                 call    sub_403FB0
.text:004051DA                 mov     esi, eax
.text:004051DC                 call    _errno
.text:004051E1                 mov     [eax], ebx
.text:004051E3                 cmp     ebp, esi
.text:004051E5                 ja      short loc_40525B
.text:004051E7                 lea     ebp, [esi+1]
.text:004051EA                 mov     ebx, off_40604C
.text:004051F0                 cmp     edi, offset unk_407080
.text:004051F6                 mov     esi, [esp+2Ch+arg_0]
.text:004051FA                 mov     [ebx+esi*8], ebp
.text:004051FD                 jz      short loc_40520D
.text:004051FF                 mov     [esp+2Ch+Block], edi ; Block
.text:00405202                 call    free
.text:00405207                 mov     ebx, off_40604C
.text:0040520D
.text:0040520D loc_40520D:                             ; CODE XREF: sub_4050F0+10D↑j
.text:0040520D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00405210                 call    sub_403C90
.text:00405215                 mov     esi, [esp+2Ch+arg_C]
.text:00405219                 mov     edi, eax
.text:0040521B                 mov     eax, [esp+2Ch+arg_0]
.text:0040521F                 test    esi, esi
.text:00405221                 mov     [ebx+eax*8+4], edi
.text:00405225                 jz      short loc_405270
.text:00405227
.text:00405227 loc_405227:                             ; CODE XREF: sub_4050F0+185↓j
.text:00405227                 call    _errno
.text:0040522C                 mov     ebx, [eax]
.text:0040522E                 mov     [esp+2Ch+var_18], esi ; int
.text:00405232                 mov     ecx, [esi]
.text:00405234                 mov     [esp+2Ch+Block], edi ; int
.text:00405237                 mov     edx, [esp+2Ch+arg_8]
.text:0040523B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040523F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405243                 mov     ecx, [esp+2Ch+arg_4]
.text:00405247                 mov     [esp+2Ch+var_20], edx ; int
.text:0040524B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040524F                 call    sub_403FB0
.text:00405254                 call    _errno
.text:00405259                 mov     [eax], ebx
.text:0040525B
.text:0040525B loc_40525B:                             ; CODE XREF: sub_4050F0+F5↑j
.text:0040525B                 call    _errno
.text:00405260                 mov     ebp, [esp+2Ch+var_14]
.text:00405264                 mov     [eax], ebp
.text:00405266                 add     esp, 1Ch
.text:00405269                 mov     eax, edi
.text:0040526B                 pop     ebx
.text:0040526C                 pop     esi
.text:0040526D                 pop     edi
.text:0040526E                 pop     ebp
.text:0040526F                 retn
.text:00405270 ; ---------------------------------------------------------------------------
.text:00405270
.text:00405270 loc_405270:                             ; CODE XREF: sub_4050F0+135↑j
.text:00405270                 mov     esi, offset dword_407180
.text:00405275                 jmp     short loc_405227
.text:00405277 ; ---------------------------------------------------------------------------
.text:00405277
.text:00405277 loc_405277:                             ; CODE XREF: sub_4050F0+B7↑j
.text:00405277                 mov     esi, offset dword_407180
.text:0040527C                 jmp     loc_4051AD
.text:00405281 ; ---------------------------------------------------------------------------
.text:00405281
.text:00405281 loc_405281:                             ; CODE XREF: sub_4050F0+45↑j
.text:00405281                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00405288                 call    sub_403C90
.text:0040528D                 mov     off_40604C, eax
.text:00405292                 mov     edi, dword_406044
.text:00405298                 mov     ebx, eax
.text:0040529A                 mov     ecx, off_406048
.text:004052A0                 mov     [eax], edi
.text:004052A2                 mov     [eax+4], ecx
.text:004052A5                 jmp     loc_40513B
.text:004052AA ; ---------------------------------------------------------------------------
.text:004052AA
.text:004052AA loc_4052AA:                             ; CODE XREF: sub_4050F0+18↑j
.text:004052AA                 call    abort
.text:004052AF ; ---------------------------------------------------------------------------
.text:004052AF
.text:004052AF loc_4052AF:                             ; CODE XREF: sub_4050F0+33↑j
.text:004052AF                 call    sub_4052E0
.text:004052AF sub_4050F0      endp
.text:004052AF
.text:004052AF ; ---------------------------------------------------------------------------
.text:004052B4                 align 10h
.text:004052C0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4052E0+3↓o
.text:004052D1 ; const char aS[]
.text:004052D1 aS              db '%s',0               ; DATA XREF: sub_4052E0+10↓o
.text:004052D4                 align 10h
.text:004052E0
.text:004052E0 ; =============== S U B R O U T I N E =======================================
.text:004052E0
.text:004052E0 ; Attributes: noreturn
.text:004052E0
.text:004052E0 sub_4052E0      proc near               ; CODE XREF: sub_403C50:loc_403C89↑p
.text:004052E0                                         ; sub_403C90+24↑p ...
.text:004052E0
.text:004052E0 Code            = dword ptr -1Ch
.text:004052E0 ErrorMessage    = dword ptr -18h
.text:004052E0 var_14          = dword ptr -14h
.text:004052E0 var_10          = byte ptr -10h
.text:004052E0
.text:004052E0                 sub     esp, 1Ch
.text:004052E3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004052EA                 call    ds:libintl_gettext
.text:004052F0                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:004052F8                 mov     edx, Code
.text:004052FE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405306                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040530A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040530D                 call    sub_405370
.text:00405312                 call    abort
.text:00405312 sub_4052E0      endp
.text:00405312
.text:00405312 ; ---------------------------------------------------------------------------
.text:00405317                 align 10h
.text:00405320
.text:00405320 ; =============== S U B R O U T I N E =======================================
.text:00405320
.text:00405320 ; Attributes: thunk
.text:00405320
.text:00405320 libintl_bindtextdomain proc near
.text:00405320                 jmp     ds:__imp_libintl_bindtextdomain
.text:00405320 libintl_bindtextdomain endp
.text:00405320
.text:00405320 ; ---------------------------------------------------------------------------
.text:00405326                 align 10h
.text:00405330                 jmp     ds:libintl_textdomain
.text:00405330 ; ---------------------------------------------------------------------------
.text:00405336                 align 10h
.text:00405340                 jmp     ds:libintl_gettext
.text:00405340 ; ---------------------------------------------------------------------------
.text:00405346                 align 10h
.text:00405350 ; const char aS_0[]
.text:00405350 aS_0            db ': %s',0             ; DATA XREF: sub_405370+B8↓o
.text:00405350                                         ; sub_405474+122↓o
.text:00405355 aUnknownSystemE db 'Unknown system error',0
.text:00405355                                         ; DATA XREF: sub_405370:loc_40543D↓o
.text:00405355                                         ; sub_405474:loc_4055AE↓o
.text:0040536A ; const char aS_1[]
.text:0040536A aS_1            db '%s: ',0             ; DATA XREF: sub_405370:loc_405444↓o
.text:0040536F                 align 10h
.text:00405370
.text:00405370 ; =============== S U B R O U T I N E =======================================
.text:00405370
.text:00405370
.text:00405370 ; int __cdecl sub_405370(int Code, int ErrorMessage, char *, char)
.text:00405370 sub_405370      proc near               ; CODE XREF: sub_401670+2EE↑p
.text:00405370                                         ; sub_401CA0+308↑p ...
.text:00405370
.text:00405370 Stream          = dword ptr -1Ch
.text:00405370 Format          = dword ptr -18h
.text:00405370 ArgList         = dword ptr -14h
.text:00405370 Code            = dword ptr  4
.text:00405370 ErrorMessage    = dword ptr  8
.text:00405370 arg_8           = dword ptr  0Ch
.text:00405370 arg_C           = byte ptr  10h
.text:00405370
.text:00405370                 push    esi
.text:00405371                 push    ebx
.text:00405372                 sub     esp, 14h
.text:00405375                 mov     edx, ds:_iob
.text:0040537B                 mov     esi, [esp+1Ch+Code]
.text:0040537F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405383                 add     edx, 20h ; ' '
.text:00405386                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405389                 call    fflush
.text:0040538E                 mov     eax, ds:dword_407200
.text:00405393                 test    eax, eax
.text:00405395                 jz      loc_405444
.text:0040539B                 call    eax ; dword_407200
.text:0040539D
.text:0040539D loc_40539D:                             ; CODE XREF: sub_405370+F7↓j
.text:0040539D                 lea     edx, [esp+1Ch+arg_C]
.text:004053A1                 mov     ecx, [esp+1Ch+arg_8]
.text:004053A5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004053A9                 mov     edx, ds:_iob
.text:004053AF                 mov     [esp+1Ch+Format], ecx ; Format
.text:004053B3                 add     edx, 40h ; '@'
.text:004053B6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004053B9                 call    vfprintf
.text:004053BE                 inc     ds:dword_407210
.text:004053C4                 test    ebx, ebx
.text:004053C6                 jnz     short loc_405412
.text:004053C8
.text:004053C8 loc_4053C8:                             ; CODE XREF: sub_405370+CB↓j
.text:004053C8                 mov     edx, ds:_iob
.text:004053CE                 lea     ecx, [edx+40h]
.text:004053D1                 mov     ebx, [ecx+4]
.text:004053D4                 dec     ebx
.text:004053D5                 test    ebx, ebx
.text:004053D7                 mov     [ecx+4], ebx
.text:004053DA                 js      short loc_405400
.text:004053DC                 mov     ecx, [edx+40h]
.text:004053DF                 mov     byte ptr [ecx], 0Ah
.text:004053E2                 inc     dword ptr [edx+40h]
.text:004053E5
.text:004053E5 loc_4053E5:                             ; CODE XREF: sub_405370+A0↓j
.text:004053E5                 mov     edx, ds:_iob
.text:004053EB                 add     edx, 40h ; '@'
.text:004053EE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004053F1                 call    fflush
.text:004053F6                 test    esi, esi
.text:004053F8                 jnz     short loc_40546C
.text:004053FA                 add     esp, 14h
.text:004053FD                 pop     ebx
.text:004053FE                 pop     esi
.text:004053FF                 retn
.text:00405400 ; ---------------------------------------------------------------------------
.text:00405400
.text:00405400 loc_405400:                             ; CODE XREF: sub_405370+6A↑j
.text:00405400                 mov     [esp+1Ch+Format], ecx ; File
.text:00405404                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040540B                 call    _flsbuf
.text:00405410                 jmp     short loc_4053E5
.text:00405412 ; ---------------------------------------------------------------------------
.text:00405412
.text:00405412 loc_405412:                             ; CODE XREF: sub_405370+56↑j
.text:00405412                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00405415                 call    strerror
.text:0040541A                 test    eax, eax
.text:0040541C                 jz      short loc_40543D
.text:0040541E
.text:0040541E loc_40541E:                             ; CODE XREF: sub_405370+D2↓j
.text:0040541E                 mov     [esp+1Ch+ArgList], eax
.text:00405422                 mov     ebx, ds:_iob
.text:00405428                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00405430                 add     ebx, 40h ; '@'
.text:00405433                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405436                 call    fprintf
.text:0040543B                 jmp     short loc_4053C8
.text:0040543D ; ---------------------------------------------------------------------------
.text:0040543D
.text:0040543D loc_40543D:                             ; CODE XREF: sub_405370+AC↑j
.text:0040543D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405442                 jmp     short loc_40541E
.text:00405444 ; ---------------------------------------------------------------------------
.text:00405444
.text:00405444 loc_405444:                             ; CODE XREF: sub_405370+25↑j
.text:00405444                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040544C                 mov     edx, ds:_iob
.text:00405452                 mov     ecx, ds:dword_4071D0
.text:00405458                 add     edx, 40h ; '@'
.text:0040545B                 mov     [esp+1Ch+ArgList], ecx
.text:0040545F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405462                 call    fprintf
.text:00405467                 jmp     loc_40539D
.text:0040546C ; ---------------------------------------------------------------------------
.text:0040546C
.text:0040546C loc_40546C:                             ; CODE XREF: sub_405370+88↑j
.text:0040546C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040546F                 call    exit
.text:0040546F sub_405370      endp
.text:0040546F
.text:00405474
.text:00405474 ; =============== S U B R O U T I N E =======================================
.text:00405474
.text:00405474
.text:00405474 ; int __cdecl sub_405474(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405474 sub_405474      proc near               ; DATA XREF: sub_405474+77↓o
.text:00405474
.text:00405474 Stream          = dword ptr -28h
.text:00405474 Format          = dword ptr -24h
.text:00405474 ArgList         = dword ptr -20h
.text:00405474 var_1C          = dword ptr -1Ch
.text:00405474 Code            = dword ptr  8
.text:00405474 ErrorMessage    = dword ptr  0Ch
.text:00405474 Str2            = dword ptr  10h
.text:00405474 arg_10          = dword ptr  14h
.text:00405474 arg_14          = dword ptr  18h
.text:00405474 arg_18          = byte ptr  1Ch
.text:00405474
.text:00405474                 and     eax, 64253A73h
.text:00405479                 cmp     ah, [eax]
.text:0040547B
.text:0040547B loc_40547B:                             ; DATA XREF: sub_405474:loc_4055B5↓o
.text:0040547B                 add     ds:55003A73h, ah
.text:00405481                 push    edi
.text:00405482                 push    esi
.text:00405483                 push    ebx
.text:00405484                 sub     esp, 1Ch
.text:00405487                 mov     edx, ds:dword_407240
.text:0040548D                 mov     ebp, [esp+28h+Code]
.text:00405491                 mov     edi, [esp+28h+ErrorMessage]
.text:00405495                 test    edx, edx
.text:00405497                 mov     ebx, [esp+28h+Str2]
.text:0040549B                 mov     esi, [esp+28h+arg_10]
.text:0040549F                 jz      short loc_4054B9
.text:004054A1                 cmp     ds:dword_4071C0, esi
.text:004054A7                 jz      loc_4055E0
.text:004054AD
.text:004054AD loc_4054AD:                             ; CODE XREF: sub_405474+18D↓j
.text:004054AD                 mov     ds:Str1, ebx
.text:004054B3                 mov     ds:dword_4071C0, esi
.text:004054B9
.text:004054B9 loc_4054B9:                             ; CODE XREF: sub_405474+2B↑j
.text:004054B9                 mov     edx, ds:_iob
.text:004054BF                 add     edx, 20h ; ' '
.text:004054C2                 mov     [esp+28h+Stream], edx ; Stream
.text:004054C5                 call    fflush
.text:004054CA                 mov     eax, ds:dword_407200
.text:004054CF                 test    eax, eax
.text:004054D1                 jz      loc_4055B5
.text:004054D7                 call    eax ; dword_407200
.text:004054D9
.text:004054D9 loc_4054D9:                             ; CODE XREF: sub_405474+164↓j
.text:004054D9                 test    ebx, ebx
.text:004054DB                 jz      short loc_4054FE
.text:004054DD                 mov     [esp+28h+ArgList], ebx
.text:004054E1                 mov     ebx, ds:_iob
.text:004054E7                 mov     [esp+28h+var_1C], esi
.text:004054EB                 mov     [esp+28h+Format], offset sub_405474 ; Format
.text:004054F3                 add     ebx, 40h ; '@'
.text:004054F6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004054F9                 call    fprintf
.text:004054FE
.text:004054FE loc_4054FE:                             ; CODE XREF: sub_405474+67↑j
.text:004054FE                 mov     esi, ds:_iob
.text:00405504                 lea     edx, [esp+28h+arg_18]
.text:00405508                 mov     ecx, [esp+28h+arg_14]
.text:0040550C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00405510                 add     esi, 40h ; '@'
.text:00405513                 mov     [esp+28h+Format], ecx ; Format
.text:00405517                 mov     [esp+28h+Stream], esi ; Stream
.text:0040551A                 call    vfprintf
.text:0040551F                 inc     ds:dword_407210
.text:00405525                 test    edi, edi
.text:00405527                 jnz     short loc_405580
.text:00405529
.text:00405529 loc_405529:                             ; CODE XREF: sub_405474+135↓j
.text:00405529                 mov     edx, ds:_iob
.text:0040552F                 lea     ecx, [edx+40h]
.text:00405532                 mov     ebx, [ecx+4]
.text:00405535                 dec     ebx
.text:00405536                 test    ebx, ebx
.text:00405538                 mov     [ecx+4], ebx
.text:0040553B                 js      short loc_405567
.text:0040553D                 mov     esi, [edx+40h]
.text:00405540                 mov     byte ptr [esi], 0Ah
.text:00405543                 inc     dword ptr [edx+40h]
.text:00405546
.text:00405546 loc_405546:                             ; CODE XREF: sub_405474+103↓j
.text:00405546                 mov     ecx, ds:_iob
.text:0040554C                 add     ecx, 40h ; '@'
.text:0040554F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405552                 call    fflush
.text:00405557                 test    ebp, ebp
.text:00405559                 jnz     loc_405606
.text:0040555F
.text:0040555F loc_40555F:                             ; CODE XREF: sub_405474+173↓j
.text:0040555F                                         ; sub_405474+187↓j
.text:0040555F                 add     esp, 1Ch
.text:00405562                 pop     ebx
.text:00405563                 pop     esi
.text:00405564                 pop     edi
.text:00405565                 pop     ebp
.text:00405566                 retn
.text:00405567 ; ---------------------------------------------------------------------------
.text:00405567
.text:00405567 loc_405567:                             ; CODE XREF: sub_405474+C7↑j
.text:00405567                 mov     [esp+28h+Format], ecx ; File
.text:0040556B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405572                 call    _flsbuf
.text:00405577                 jmp     short loc_405546
.text:00405577 ; ---------------------------------------------------------------------------
.text:00405579                 align 10h
.text:00405580
.text:00405580 loc_405580:                             ; CODE XREF: sub_405474+B3↑j
.text:00405580                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405583                 call    strerror
.text:00405588                 test    eax, eax
.text:0040558A                 jz      short loc_4055AE
.text:0040558C
.text:0040558C loc_40558C:                             ; CODE XREF: sub_405474+13F↓j
.text:0040558C                 mov     [esp+28h+ArgList], eax
.text:00405590                 mov     edi, ds:_iob
.text:00405596                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040559E                 add     edi, 40h ; '@'
.text:004055A1                 mov     [esp+28h+Stream], edi ; Stream
.text:004055A4                 call    fprintf
.text:004055A9                 jmp     loc_405529
.text:004055AE ; ---------------------------------------------------------------------------
.text:004055AE
.text:004055AE loc_4055AE:                             ; CODE XREF: sub_405474+116↑j
.text:004055AE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004055B3                 jmp     short loc_40558C
.text:004055B5 ; ---------------------------------------------------------------------------
.text:004055B5
.text:004055B5 loc_4055B5:                             ; CODE XREF: sub_405474+5D↑j
.text:004055B5                 mov     [esp+28h+Format], (offset loc_40547B+1) ; Format
.text:004055BD                 mov     ecx, ds:_iob
.text:004055C3                 mov     edx, ds:dword_4071D0
.text:004055C9                 add     ecx, 40h ; '@'
.text:004055CC                 mov     [esp+28h+ArgList], edx
.text:004055D0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004055D3                 call    fprintf
.text:004055D8                 jmp     loc_4054D9
.text:004055D8 ; ---------------------------------------------------------------------------
.text:004055DD                 align 10h
.text:004055E0
.text:004055E0 loc_4055E0:                             ; CODE XREF: sub_405474+33↑j
.text:004055E0                 mov     eax, ds:Str1
.text:004055E5                 cmp     ebx, eax
.text:004055E7                 jz      loc_40555F
.text:004055ED                 mov     [esp+28h+Format], ebx ; Str2
.text:004055F1                 mov     [esp+28h+Stream], eax ; Str1
.text:004055F4                 call    strcmp
.text:004055F9                 test    eax, eax
.text:004055FB                 jz      loc_40555F
.text:00405601                 jmp     loc_4054AD
.text:00405606 ; ---------------------------------------------------------------------------
.text:00405606
.text:00405606 loc_405606:                             ; CODE XREF: sub_405474+E5↑j
.text:00405606                 mov     [esp+28h+Stream], ebp ; Code
.text:00405609                 call    exit
.text:00405609 sub_405474      endp ; sp-analysis failed
.text:00405609
.text:00405609 ; ---------------------------------------------------------------------------
.text:0040560E                 align 10h
.text:00405610
.text:00405610 ; =============== S U B R O U T I N E =======================================
.text:00405610
.text:00405610 ; Attributes: thunk
.text:00405610
.text:00405610 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00405610 mbrtowc         proc near               ; CODE XREF: sub_403FB0+757↑p
.text:00405610                 jmp     ds:__imp_mbrtowc
.text:00405610 mbrtowc         endp
.text:00405610
.text:00405610 ; ---------------------------------------------------------------------------
.text:00405616                 align 10h
.text:00405620
.text:00405620 ; =============== S U B R O U T I N E =======================================
.text:00405620
.text:00405620 ; Attributes: bp-based frame
.text:00405620
.text:00405620 sub_405620      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00405620                 push    ebp
.text:00405621                 mov     ecx, offset byte_407000
.text:00405626                 cmp     ecx, offset byte_407000
.text:0040562C                 mov     ebp, esp
.text:0040562E                 jnb     short loc_405646
.text:00405630
.text:00405630 loc_405630:                             ; CODE XREF: sub_405620+24↓j
.text:00405630                 mov     edx, [ecx+4]
.text:00405633                 mov     eax, [ecx]
.text:00405635                 add     ecx, 8
.text:00405638                 add     [edx+400000h], eax
.text:0040563E                 cmp     ecx, offset byte_407000
.text:00405644                 jb      short loc_405630
.text:00405646
.text:00405646 loc_405646:                             ; CODE XREF: sub_405620+E↑j
.text:00405646                 pop     ebp
.text:00405647                 retn
.text:00405647 sub_405620      endp
.text:00405647
.text:00405647 ; ---------------------------------------------------------------------------
.text:00405648                 align 10h
.text:00405650
.text:00405650 ; =============== S U B R O U T I N E =======================================
.text:00405650
.text:00405650 ; Attributes: bp-based frame
.text:00405650
.text:00405650 sub_405650      proc near               ; CODE XREF: sub_401080+16↑p
.text:00405650                                         ; TopLevelExceptionFilter+D7↑p
.text:00405650                 push    ebp
.text:00405651                 mov     ebp, esp
.text:00405653                 fninit
.text:00405655                 pop     ebp
.text:00405656                 retn
.text:00405656 sub_405650      endp
.text:00405656
.text:00405656 ; ---------------------------------------------------------------------------
.text:00405657                 align 10h
.text:00405660
.text:00405660 ; =============== S U B R O U T I N E =======================================
.text:00405660
.text:00405660 ; Attributes: bp-based frame
.text:00405660
.text:00405660 ; void __cdecl sub_405660()
.text:00405660 sub_405660      proc near               ; DATA XREF: .text:loc_4056A9↓o
.text:00405660                                         ; sub_4056F0:loc_40571E↓o
.text:00405660                 push    ebp
.text:00405661                 mov     ebp, esp
.text:00405663                 sub     esp, 8
.text:00405666                 mov     eax, off_406084
.text:0040566B                 mov     edx, [eax]
.text:0040566D                 test    edx, edx
.text:0040566F                 jnz     short loc_405675
.text:00405671
.text:00405671 loc_405671:                             ; CODE XREF: sub_405660+2C↓j
.text:00405671                 mov     esp, ebp
.text:00405673                 pop     ebp
.text:00405674                 retn
.text:00405675 ; ---------------------------------------------------------------------------
.text:00405675
.text:00405675 loc_405675:                             ; CODE XREF: sub_405660+F↑j
.text:00405675                                         ; sub_405660+2A↓j
.text:00405675                 call    dword ptr [eax]
.text:00405677                 mov     edx, off_406084
.text:0040567D                 mov     ecx, [edx+4]
.text:00405680                 lea     eax, [edx+4]
.text:00405683                 mov     off_406084, eax
.text:00405688                 test    ecx, ecx
.text:0040568A                 jnz     short loc_405675
.text:0040568C                 jmp     short loc_405671
.text:0040568C sub_405660      endp
.text:0040568C
.text:0040568C ; ---------------------------------------------------------------------------
.text:0040568E                 align 10h
.text:00405690                 push    ebp
.text:00405691                 mov     ebp, esp
.text:00405693                 sub     esp, 8
.text:00405696                 mov     [ebp-4], ebx
.text:00405699                 mov     eax, ds:dword_4059F0
.text:0040569E                 cmp     eax, 0FFFFFFFFh
.text:004056A1                 jz      short loc_4056CC
.text:004056A3
.text:004056A3 loc_4056A3:                             ; CODE XREF: .text:004056D6↓j
.text:004056A3                                         ; .text:004056E9↓j
.text:004056A3                 test    eax, eax
.text:004056A5                 mov     ebx, eax
.text:004056A7                 jnz     short loc_4056C0
.text:004056A9
.text:004056A9 loc_4056A9:                             ; CODE XREF: .text:004056CA↓j
.text:004056A9                 mov     dword ptr [esp], offset sub_405660
.text:004056B0                 call    sub_401040
.text:004056B5                 mov     ebx, [ebp-4]
.text:004056B8                 mov     esp, ebp
.text:004056BA                 pop     ebp
.text:004056BB                 retn
.text:004056BB ; ---------------------------------------------------------------------------
.text:004056BC                 align 10h
.text:004056C0
.text:004056C0 loc_4056C0:                             ; CODE XREF: .text:004056A7↑j
.text:004056C0                                         ; .text:004056C8↓j
.text:004056C0                 call    ds:dword_4059F0[ebx*4]
.text:004056C7                 dec     ebx
.text:004056C8                 jnz     short loc_4056C0
.text:004056CA                 jmp     short loc_4056A9
.text:004056CC ; ---------------------------------------------------------------------------
.text:004056CC
.text:004056CC loc_4056CC:                             ; CODE XREF: .text:004056A1↑j
.text:004056CC                 mov     ecx, ds:dword_4059F4
.text:004056D2                 xor     eax, eax
.text:004056D4                 test    ecx, ecx
.text:004056D6                 jz      short loc_4056A3
.text:004056D8                 mov     edx, offset dword_4059F0
.text:004056DD                 lea     esi, [esi+0]
.text:004056E0
.text:004056E0 loc_4056E0:                             ; CODE XREF: .text:004056E7↓j
.text:004056E0                 inc     eax
.text:004056E1                 mov     ecx, [edx+eax*4+4]
.text:004056E5                 test    ecx, ecx
.text:004056E7                 jnz     short loc_4056E0
.text:004056E9                 jmp     short loc_4056A3
.text:004056E9 ; ---------------------------------------------------------------------------
.text:004056EB                 align 10h
.text:004056F0
.text:004056F0 ; =============== S U B R O U T I N E =======================================
.text:004056F0
.text:004056F0 ; Attributes: bp-based frame
.text:004056F0
.text:004056F0 sub_4056F0      proc near               ; CODE XREF: sub_401670+1E↑p
.text:004056F0
.text:004056F0 var_8           = dword ptr -8
.text:004056F0 var_4           = dword ptr -4
.text:004056F0
.text:004056F0                 push    ebp
.text:004056F1                 mov     ebp, esp
.text:004056F3                 sub     esp, 8
.text:004056F6                 mov     [ebp+var_4], ebx
.text:004056F9                 mov     edx, dword_406080
.text:004056FF                 test    edx, edx
.text:00405701                 jnz     short loc_40572A
.text:00405703                 mov     eax, ds:dword_4059F0
.text:00405708                 mov     edx, 1
.text:0040570D                 mov     dword_406080, edx
.text:00405713                 cmp     eax, 0FFFFFFFFh
.text:00405716                 jz      short loc_40573D
.text:00405718
.text:00405718 loc_405718:                             ; CODE XREF: sub_4056F0+57↓j
.text:00405718                                         ; sub_4056F0+69↓j
.text:00405718                 test    eax, eax
.text:0040571A                 mov     ebx, eax
.text:0040571C                 jnz     short loc_405731
.text:0040571E
.text:0040571E loc_40571E:                             ; CODE XREF: sub_4056F0+4B↓j
.text:0040571E                 mov     [esp+8+var_8], offset sub_405660 ; void (__cdecl *)()
.text:00405725                 call    sub_401040
.text:0040572A
.text:0040572A loc_40572A:                             ; CODE XREF: sub_4056F0+11↑j
.text:0040572A                 mov     ebx, [ebp+var_4]
.text:0040572D                 mov     esp, ebp
.text:0040572F                 pop     ebp
.text:00405730                 retn
.text:00405731 ; ---------------------------------------------------------------------------
.text:00405731
.text:00405731 loc_405731:                             ; CODE XREF: sub_4056F0+2C↑j
.text:00405731                                         ; sub_4056F0+49↓j
.text:00405731                 call    ds:dword_4059F0[ebx*4]
.text:00405738                 dec     ebx
.text:00405739                 jnz     short loc_405731
.text:0040573B                 jmp     short loc_40571E
.text:0040573D ; ---------------------------------------------------------------------------
.text:0040573D
.text:0040573D loc_40573D:                             ; CODE XREF: sub_4056F0+26↑j
.text:0040573D                 mov     ecx, ds:dword_4059F4
.text:00405743                 xor     eax, eax
.text:00405745                 test    ecx, ecx
.text:00405747                 jz      short loc_405718
.text:00405749                 mov     edx, offset dword_4059F0
.text:0040574E                 mov     esi, esi
.text:00405750
.text:00405750 loc_405750:                             ; CODE XREF: sub_4056F0+67↓j
.text:00405750                 inc     eax
.text:00405751                 mov     ebx, [edx+eax*4+4]
.text:00405755                 test    ebx, ebx
.text:00405757                 jnz     short loc_405750
.text:00405759                 jmp     short loc_405718
.text:00405759 sub_4056F0      endp
.text:00405759
.text:00405759 ; ---------------------------------------------------------------------------
.text:0040575B                 align 10h
.text:00405760
.text:00405760 ; =============== S U B R O U T I N E =======================================
.text:00405760
.text:00405760 ; Attributes: info_from_lumina
.text:00405760
.text:00405760 ; void *__cdecl _alloca(size_t Size)
.text:00405760 __alloca        proc near               ; CODE XREF: sub_401670+19↑p
.text:00405760                 push    ecx
.text:00405761                 mov     ecx, esp
.text:00405763                 add     ecx, 8
.text:00405766
.text:00405766 loc_405766:                             ; CODE XREF: __alloca+1B↓j
.text:00405766                 cmp     eax, 1000h
.text:0040576B                 jb      short loc_40577D
.text:0040576D                 sub     ecx, 1000h
.text:00405773                 or      dword ptr [ecx], 0
.text:00405776                 sub     eax, 1000h
.text:0040577B                 jmp     short loc_405766
.text:0040577D ; ---------------------------------------------------------------------------
.text:0040577D
.text:0040577D loc_40577D:                             ; CODE XREF: __alloca+B↑j
.text:0040577D                 sub     ecx, eax
.text:0040577F                 or      dword ptr [ecx], 0
.text:00405782                 mov     eax, esp
.text:00405784                 mov     esp, ecx
.text:00405786                 mov     ecx, [eax]
.text:00405788                 mov     eax, [eax+4]
.text:0040578B                 jmp     eax
.text:0040578B __alloca        endp
.text:0040578B
.text:0040578B ; ---------------------------------------------------------------------------
.text:0040578D                 align 10h
.text:00405790                 jmp     ds:__set_app_type
.text:00405790 ; ---------------------------------------------------------------------------
.text:00405796                 align 10h
.text:004057A0
.text:004057A0 ; =============== S U B R O U T I N E =======================================
.text:004057A0
.text:004057A0 ; Attributes: thunk
.text:004057A0
.text:004057A0 ; void __cdecl cexit()
.text:004057A0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:004057A0                 jmp     ds:__imp__cexit
.text:004057A0 _cexit          endp
.text:004057A0
.text:004057A0 ; ---------------------------------------------------------------------------
.text:004057A6                 align 10h
.text:004057B0
.text:004057B0 ; =============== S U B R O U T I N E =======================================
.text:004057B0
.text:004057B0 ; Attributes: thunk
.text:004057B0
.text:004057B0 ; char ***__cdecl _p__environ()
.text:004057B0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004057B0                 jmp     ds:__imp___p__environ
.text:004057B0 __p__environ    endp
.text:004057B0
.text:004057B0 ; ---------------------------------------------------------------------------
.text:004057B6                 align 10h
.text:004057C0
.text:004057C0 ; =============== S U B R O U T I N E =======================================
.text:004057C0
.text:004057C0 ; Attributes: thunk
.text:004057C0
.text:004057C0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004057C0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004057C0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004057C0
.text:004057C0 Signal          = dword ptr  4
.text:004057C0 Function        = dword ptr  8
.text:004057C0
.text:004057C0                 jmp     ds:__imp_signal
.text:004057C0 signal          endp
.text:004057C0
.text:004057C0 ; ---------------------------------------------------------------------------
.text:004057C6                 align 10h
.text:004057D0
.text:004057D0 ; =============== S U B R O U T I N E =======================================
.text:004057D0
.text:004057D0 ; Attributes: thunk
.text:004057D0
.text:004057D0 ; int *__cdecl _p__fmode()
.text:004057D0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004057D0                 jmp     ds:__imp___p__fmode
.text:004057D0 __p__fmode      endp
.text:004057D0
.text:004057D0 ; ---------------------------------------------------------------------------
.text:004057D6                 align 10h
.text:004057E0
.text:004057E0 ; =============== S U B R O U T I N E =======================================
.text:004057E0
.text:004057E0 ; Attributes: thunk
.text:004057E0
.text:004057E0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004057E0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004057E0                                         ; sub_401080+90↑p ...
.text:004057E0
.text:004057E0 FileHandle      = dword ptr  4
.text:004057E0 Mode            = dword ptr  8
.text:004057E0
.text:004057E0                 jmp     ds:__imp__setmode
.text:004057E0 _setmode        endp
.text:004057E0
.text:004057E0 ; ---------------------------------------------------------------------------
.text:004057E6                 align 10h
.text:004057F0
.text:004057F0 ; =============== S U B R O U T I N E =======================================
.text:004057F0
.text:004057F0 ; Attributes: thunk
.text:004057F0
.text:004057F0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004057F0                 jmp     ds:__imp___getmainargs
.text:004057F0 __getmainargs   endp
.text:004057F0
.text:004057F0 ; ---------------------------------------------------------------------------
.text:004057F6                 align 10h
.text:00405800
.text:00405800 ; =============== S U B R O U T I N E =======================================
.text:00405800
.text:00405800 ; Attributes: thunk
.text:00405800
.text:00405800 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00405800 setlocale       proc near               ; CODE XREF: sub_401670+3A↑p
.text:00405800
.text:00405800 Category        = dword ptr  4
.text:00405800 Locale          = dword ptr  8
.text:00405800
.text:00405800                 jmp     ds:__imp_setlocale
.text:00405800 setlocale       endp
.text:00405800
.text:00405800 ; ---------------------------------------------------------------------------
.text:00405806                 align 10h
.text:00405810
.text:00405810 ; =============== S U B R O U T I N E =======================================
.text:00405810
.text:00405810 ; Attributes: noreturn thunk
.text:00405810
.text:00405810 ; void __cdecl __noreturn exit(int Code)
.text:00405810 exit            proc near               ; CODE XREF: sub_401670:loc_401775↑p
.text:00405810                                         ; .text:004019CB↑p ...
.text:00405810
.text:00405810 Code            = dword ptr  4
.text:00405810
.text:00405810                 jmp     ds:__imp_exit
.text:00405810 exit            endp
.text:00405810
.text:00405810 ; ---------------------------------------------------------------------------
.text:00405816                 align 10h
.text:00405820
.text:00405820 ; =============== S U B R O U T I N E =======================================
.text:00405820
.text:00405820 ; Attributes: thunk
.text:00405820
.text:00405820 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405820 fputs           proc near               ; CODE XREF: sub_401670+1B8↑p
.text:00405820                                         ; sub_401670+1DA↑p ...
.text:00405820
.text:00405820 Buffer          = dword ptr  4
.text:00405820 Stream          = dword ptr  8
.text:00405820
.text:00405820                 jmp     ds:__imp_fputs
.text:00405820 fputs           endp
.text:00405820
.text:00405820 ; ---------------------------------------------------------------------------
.text:00405826                 align 10h
.text:00405830
.text:00405830 ; =============== S U B R O U T I N E =======================================
.text:00405830
.text:00405830 ; Attributes: thunk
.text:00405830
.text:00405830 ; int printf(const char *const Format, ...)
.text:00405830 printf          proc near               ; CODE XREF: sub_401670+196↑p
.text:00405830                                         ; sub_401670+25D↑p ...
.text:00405830
.text:00405830 Format          = dword ptr  4
.text:00405830
.text:00405830                 jmp     ds:__imp_printf
.text:00405830 printf          endp
.text:00405830
.text:00405830 ; ---------------------------------------------------------------------------
.text:00405836                 align 10h
.text:00405840
.text:00405840 ; =============== S U B R O U T I N E =======================================
.text:00405840
.text:00405840 ; Attributes: thunk
.text:00405840
.text:00405840 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405840 fprintf         proc near               ; CODE XREF: sub_401670+F9↑p
.text:00405840                                         ; .text:004019C3↑p ...
.text:00405840
.text:00405840 Stream          = dword ptr  4
.text:00405840 Format          = dword ptr  8
.text:00405840
.text:00405840                 jmp     ds:__imp_fprintf
.text:00405840 fprintf         endp
.text:00405840
.text:00405840 ; ---------------------------------------------------------------------------
.text:00405846                 align 10h
.text:00405850
.text:00405850 ; =============== S U B R O U T I N E =======================================
.text:00405850
.text:00405850 ; Attributes: thunk
.text:00405850
.text:00405850 ; void __cdecl free(void *Block)
.text:00405850 free            proc near               ; CODE XREF: sub_401670+2A6↑p
.text:00405850                                         ; sub_401CA0+227↑p ...
.text:00405850
.text:00405850 Block           = dword ptr  4
.text:00405850
.text:00405850                 jmp     ds:__imp_free
.text:00405850 free            endp
.text:00405850
.text:00405850 ; ---------------------------------------------------------------------------
.text:00405856                 align 10h
.text:00405860
.text:00405860 ; =============== S U B R O U T I N E =======================================
.text:00405860
.text:00405860 ; Attributes: thunk
.text:00405860
.text:00405860 ; int __cdecl fclose(FILE *Stream)
.text:00405860 fclose          proc near               ; CODE XREF: sub_401670+2CC↑p
.text:00405860                                         ; sub_401CA0+1C4↑p ...
.text:00405860
.text:00405860 Stream          = dword ptr  4
.text:00405860
.text:00405860                 jmp     ds:__imp_fclose
.text:00405860 fclose          endp
.text:00405860
.text:00405860 ; ---------------------------------------------------------------------------
.text:00405866                 align 10h
.text:00405870
.text:00405870 ; =============== S U B R O U T I N E =======================================
.text:00405870
.text:00405870 ; Attributes: thunk
.text:00405870
.text:00405870 ; void __cdecl clearerr(FILE *Stream)
.text:00405870 clearerr        proc near               ; CODE XREF: sub_401CA0+31A↑p
.text:00405870                                         ; sub_402200+1FB↑p
.text:00405870
.text:00405870 Stream          = dword ptr  4
.text:00405870
.text:00405870                 jmp     ds:__imp_clearerr
.text:00405870 clearerr        endp
.text:00405870
.text:00405870 ; ---------------------------------------------------------------------------
.text:00405876                 align 10h
.text:00405880
.text:00405880 ; =============== S U B R O U T I N E =======================================
.text:00405880
.text:00405880 ; Attributes: thunk
.text:00405880
.text:00405880 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00405880 fwrite          proc near               ; CODE XREF: sub_401CA0+2C7↑p
.text:00405880                                         ; sub_401CA0+478↑p
.text:00405880
.text:00405880 Buffer          = dword ptr  4
.text:00405880 ElementSize     = dword ptr  8
.text:00405880 ElementCount    = dword ptr  0Ch
.text:00405880 Stream          = dword ptr  10h
.text:00405880
.text:00405880                 jmp     ds:__imp_fwrite
.text:00405880 fwrite          endp
.text:00405880
.text:00405880 ; ---------------------------------------------------------------------------
.text:00405886                 align 10h
.text:00405890
.text:00405890 ; =============== S U B R O U T I N E =======================================
.text:00405890
.text:00405890 ; Attributes: noreturn thunk
.text:00405890
.text:00405890 ; void __cdecl __noreturn abort()
.text:00405890 abort           proc near               ; CODE XREF: sub_401CA0+559↑p
.text:00405890                                         ; sub_402200+2DA↑p ...
.text:00405890                 jmp     ds:__imp_abort
.text:00405890 abort           endp
.text:00405890
.text:00405890 ; ---------------------------------------------------------------------------
.text:00405896                 align 10h
.text:004058A0
.text:004058A0 ; =============== S U B R O U T I N E =======================================
.text:004058A0
.text:004058A0 ; Attributes: thunk
.text:004058A0
.text:004058A0 ; int *__cdecl errno()
.text:004058A0 _errno          proc near               ; CODE XREF: sub_401670+2D4↑p
.text:004058A0                                         ; sub_401CA0:loc_401D94↑p ...
.text:004058A0                 jmp     ds:__imp__errno
.text:004058A0 _errno          endp
.text:004058A0
.text:004058A0 ; ---------------------------------------------------------------------------
.text:004058A6                 align 10h
.text:004058B0
.text:004058B0 ; =============== S U B R O U T I N E =======================================
.text:004058B0
.text:004058B0 ; Attributes: thunk
.text:004058B0
.text:004058B0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:004058B0 fopen           proc near               ; CODE XREF: sub_401CA0+4DB↑p
.text:004058B0                                         ; sub_402200+29C↑p
.text:004058B0
.text:004058B0 FileName        = dword ptr  4
.text:004058B0 Mode            = dword ptr  8
.text:004058B0
.text:004058B0                 jmp     ds:__imp_fopen
.text:004058B0 fopen           endp
.text:004058B0
.text:004058B0 ; ---------------------------------------------------------------------------
.text:004058B6                 align 10h
.text:004058C0
.text:004058C0 ; =============== S U B R O U T I N E =======================================
.text:004058C0
.text:004058C0 ; Attributes: thunk
.text:004058C0
.text:004058C0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004058C0 _flsbuf         proc near               ; CODE XREF: sub_401CA0+186↑p
.text:004058C0                                         ; sub_401CA0:loc_401F31↑p ...
.text:004058C0
.text:004058C0 File            = dword ptr  8
.text:004058C0
.text:004058C0                 jmp     ds:__imp__flsbuf
.text:004058C0 _flsbuf         endp
.text:004058C0
.text:004058C0 ; ---------------------------------------------------------------------------
.text:004058C6                 align 10h
.text:004058D0
.text:004058D0 ; =============== S U B R O U T I N E =======================================
.text:004058D0
.text:004058D0 ; Attributes: thunk
.text:004058D0
.text:004058D0 ; int __cdecl filbuf(FILE *File)
.text:004058D0 _filbuf         proc near               ; CODE XREF: sub_401CA0+16A↑p
.text:004058D0                                         ; sub_401CA0+497↑p ...
.text:004058D0
.text:004058D0 File            = dword ptr  4
.text:004058D0
.text:004058D0                 jmp     ds:__imp__filbuf
.text:004058D0 _filbuf         endp
.text:004058D0
.text:004058D0 ; ---------------------------------------------------------------------------
.text:004058D6                 align 10h
.text:004058E0
.text:004058E0 ; =============== S U B R O U T I N E =======================================
.text:004058E0
.text:004058E0 ; Attributes: thunk
.text:004058E0
.text:004058E0 ; size_t __cdecl strlen(const char *Str)
.text:004058E0 strlen          proc near               ; CODE XREF: sub_402660+379↑p
.text:004058E0                                         ; sub_402660+416↑p ...
.text:004058E0
.text:004058E0 Str             = dword ptr  4
.text:004058E0
.text:004058E0                 jmp     ds:__imp_strlen
.text:004058E0 strlen          endp
.text:004058E0
.text:004058E0 ; ---------------------------------------------------------------------------
.text:004058E6                 align 10h
.text:004058F0
.text:004058F0 ; =============== S U B R O U T I N E =======================================
.text:004058F0
.text:004058F0 ; Attributes: thunk
.text:004058F0
.text:004058F0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:004058F0 strncmp         proc near               ; CODE XREF: sub_402660+30F↑p
.text:004058F0                                         ; sub_402660+769↑p
.text:004058F0
.text:004058F0 Str1            = dword ptr  4
.text:004058F0 Str2            = dword ptr  8
.text:004058F0 MaxCount        = dword ptr  0Ch
.text:004058F0
.text:004058F0                 jmp     ds:__imp_strncmp
.text:004058F0 strncmp         endp
.text:004058F0
.text:004058F0 ; ---------------------------------------------------------------------------
.text:004058F6                 align 10h
.text:00405900
.text:00405900 ; =============== S U B R O U T I N E =======================================
.text:00405900
.text:00405900 ; Attributes: thunk
.text:00405900
.text:00405900 ; char *__cdecl getenv(const char *VarName)
.text:00405900 getenv          proc near               ; CODE XREF: sub_402660+C27↑p
.text:00405900
.text:00405900 VarName         = dword ptr  4
.text:00405900
.text:00405900                 jmp     ds:__imp_getenv
.text:00405900 getenv          endp
.text:00405900
.text:00405900 ; ---------------------------------------------------------------------------
.text:00405906                 align 10h
.text:00405910
.text:00405910 ; =============== S U B R O U T I N E =======================================
.text:00405910
.text:00405910 ; Attributes: thunk
.text:00405910
.text:00405910 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405910 strchr          proc near               ; CODE XREF: sub_402660+539↑p
.text:00405910                                         ; sub_402660+60A↑p ...
.text:00405910
.text:00405910 Str             = dword ptr  4
.text:00405910 Val             = dword ptr  8
.text:00405910
.text:00405910                 jmp     ds:__imp_strchr
.text:00405910 strchr          endp
.text:00405910
.text:00405910 ; ---------------------------------------------------------------------------
.text:00405916                 align 10h
.text:00405920
.text:00405920 ; =============== S U B R O U T I N E =======================================
.text:00405920
.text:00405920 ; Attributes: thunk
.text:00405920
.text:00405920 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00405920 vfprintf        proc near               ; CODE XREF: sub_4037F0+C1↑p
.text:00405920                                         ; sub_405370+49↑p ...
.text:00405920
.text:00405920 Stream          = dword ptr  4
.text:00405920 Format          = dword ptr  8
.text:00405920 ArgList         = dword ptr  0Ch
.text:00405920
.text:00405920                 jmp     ds:__imp_vfprintf
.text:00405920 vfprintf        endp
.text:00405920
.text:00405920 ; ---------------------------------------------------------------------------
.text:00405926                 align 10h
.text:00405930
.text:00405930 ; =============== S U B R O U T I N E =======================================
.text:00405930
.text:00405930 ; Attributes: thunk
.text:00405930
.text:00405930 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405930 memcpy          proc near               ; CODE XREF: .text:00403E38↑p
.text:00405930                                         ; sub_403E50+31↑p
.text:00405930
.text:00405930 Src             = dword ptr  8
.text:00405930 Size            = dword ptr  0Ch
.text:00405930
.text:00405930                 jmp     ds:__imp_memcpy
.text:00405930 memcpy          endp
.text:00405930
.text:00405930 ; ---------------------------------------------------------------------------
.text:00405936                 align 10h
.text:00405940
.text:00405940 ; =============== S U B R O U T I N E =======================================
.text:00405940
.text:00405940 ; Attributes: thunk
.text:00405940
.text:00405940 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405940 memset          proc near               ; CODE XREF: .text:00403DB6↑p
.text:00405940
.text:00405940 Val             = dword ptr  8
.text:00405940 Size            = dword ptr  0Ch
.text:00405940
.text:00405940                 jmp     ds:__imp_memset
.text:00405940 memset          endp
.text:00405940
.text:00405940 ; ---------------------------------------------------------------------------
.text:00405946                 align 10h
.text:00405950
.text:00405950 ; =============== S U B R O U T I N E =======================================
.text:00405950
.text:00405950 ; Attributes: thunk
.text:00405950
.text:00405950 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405950 calloc          proc near               ; CODE XREF: .text:00403DF3↑p
.text:00405950
.text:00405950 Count           = dword ptr  4
.text:00405950 Size            = dword ptr  8
.text:00405950
.text:00405950                 jmp     ds:__imp_calloc
.text:00405950 calloc          endp
.text:00405950
.text:00405950 ; ---------------------------------------------------------------------------
.text:00405956                 align 10h
.text:00405960
.text:00405960 ; =============== S U B R O U T I N E =======================================
.text:00405960
.text:00405960 ; Attributes: thunk
.text:00405960
.text:00405960 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405960 realloc         proc near               ; CODE XREF: .text:00403CF0↑p
.text:00405960                                         ; sub_403D20+16↑p ...
.text:00405960
.text:00405960 Block           = dword ptr  4
.text:00405960 Size            = dword ptr  8
.text:00405960
.text:00405960                 jmp     ds:__imp_realloc
.text:00405960 realloc         endp
.text:00405960
.text:00405960 ; ---------------------------------------------------------------------------
.text:00405966                 align 10h
.text:00405970
.text:00405970 ; =============== S U B R O U T I N E =======================================
.text:00405970
.text:00405970 ; Attributes: thunk
.text:00405970
.text:00405970 ; void *__cdecl malloc(size_t Size)
.text:00405970 malloc          proc near               ; CODE XREF: sub_403C50+24↑p
.text:00405970                                         ; sub_403C90+E↑p ...
.text:00405970
.text:00405970 Size            = dword ptr  4
.text:00405970
.text:00405970                 jmp     ds:__imp_malloc
.text:00405970 malloc          endp
.text:00405970
.text:00405970 ; ---------------------------------------------------------------------------
.text:00405976                 align 10h
.text:00405980
.text:00405980 ; =============== S U B R O U T I N E =======================================
.text:00405980
.text:00405980 ; Attributes: thunk
.text:00405980
.text:00405980 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405980 iswctype        proc near               ; CODE XREF: sub_403FB0+78B↑p
.text:00405980
.text:00405980 C               = word ptr  4
.text:00405980 Type            = word ptr  8
.text:00405980
.text:00405980                 jmp     ds:__imp_iswctype
.text:00405980 iswctype        endp
.text:00405980
.text:00405980 ; ---------------------------------------------------------------------------
.text:00405986                 align 10h
.text:00405990
.text:00405990 ; =============== S U B R O U T I N E =======================================
.text:00405990
.text:00405990 ; Attributes: thunk
.text:00405990
.text:00405990 ; int __cdecl isctype(int C, int Type)
.text:00405990 _isctype        proc near               ; CODE XREF: sub_403FB0+610↑p
.text:00405990
.text:00405990 C               = dword ptr  4
.text:00405990 Type            = dword ptr  8
.text:00405990
.text:00405990                 jmp     ds:__imp__isctype
.text:00405990 _isctype        endp
.text:00405990
.text:00405990 ; ---------------------------------------------------------------------------
.text:00405996                 align 10h
.text:004059A0
.text:004059A0 ; =============== S U B R O U T I N E =======================================
.text:004059A0
.text:004059A0 ; Attributes: thunk
.text:004059A0
.text:004059A0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004059A0 strcmp          proc near               ; CODE XREF: sub_405474+180↑p
.text:004059A0
.text:004059A0 Str1            = dword ptr  4
.text:004059A0 Str2            = dword ptr  8
.text:004059A0
.text:004059A0                 jmp     ds:__imp_strcmp
.text:004059A0 strcmp          endp
.text:004059A0
.text:004059A0 ; ---------------------------------------------------------------------------
.text:004059A6                 align 10h
.text:004059B0
.text:004059B0 ; =============== S U B R O U T I N E =======================================
.text:004059B0
.text:004059B0 ; Attributes: thunk
.text:004059B0
.text:004059B0 ; int __cdecl fflush(FILE *Stream)
.text:004059B0 fflush          proc near               ; CODE XREF: sub_405370+19↑p
.text:004059B0                                         ; sub_405370+81↑p ...
.text:004059B0
.text:004059B0 Stream          = dword ptr  4
.text:004059B0
.text:004059B0                 jmp     ds:__imp_fflush
.text:004059B0 fflush          endp
.text:004059B0
.text:004059B0 ; ---------------------------------------------------------------------------
.text:004059B6                 align 10h
.text:004059C0
.text:004059C0 ; =============== S U B R O U T I N E =======================================
.text:004059C0
.text:004059C0 ; Attributes: thunk
.text:004059C0
.text:004059C0 ; char *__cdecl strerror(int ErrorMessage)
.text:004059C0 strerror        proc near               ; CODE XREF: sub_405370+A5↑p
.text:004059C0                                         ; sub_405474+10F↑p
.text:004059C0
.text:004059C0 ErrorMessage    = dword ptr  4
.text:004059C0
.text:004059C0                 jmp     ds:__imp_strerror
.text:004059C0 strerror        endp
.text:004059C0
.text:004059C0 ; ---------------------------------------------------------------------------
.text:004059C6                 align 10h
.text:004059D0
.text:004059D0 ; =============== S U B R O U T I N E =======================================
.text:004059D0
.text:004059D0 ; Attributes: thunk
.text:004059D0
.text:004059D0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004059D0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004059D0
.text:004059D0 lpTopLevelExceptionFilter= dword ptr  4
.text:004059D0
.text:004059D0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004059D0 SetUnhandledExceptionFilter endp
.text:004059D0
.text:004059D0 ; ---------------------------------------------------------------------------
.text:004059D6                 align 10h
.text:004059E0
.text:004059E0 ; =============== S U B R O U T I N E =======================================
.text:004059E0
.text:004059E0 ; Attributes: noreturn thunk
.text:004059E0
.text:004059E0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004059E0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004059E0
.text:004059E0 uExitCode       = dword ptr  4
.text:004059E0
.text:004059E0                 jmp     ds:__imp_ExitProcess
.text:004059E0 ExitProcess     endp
.text:004059E0
.text:004059E0 ; ---------------------------------------------------------------------------
.text:004059E6                 align 10h
.text:004059F0 dword_4059F0    dd 0FFFFFFFFh           ; DATA XREF: .text:00405699↑r
.text:004059F0                                         ; .text:loc_4056C0↑r ...
.text:004059F4 dword_4059F4    dd 0                    ; DATA XREF: .text:loc_4056CC↑r
.text:004059F4                                         ; sub_4056F0:loc_40573D↑r
.text:004059F8                 dd 0FFFFFFFFh
.text:004059FC dword_4059FC    dd 0                    ; DATA XREF: .data:off_406084↓o
.text:00405A00                 dd 180h dup(?)
.text:00405A00 _text           ends
.text:00405A00
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004E00
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_401670:loc_4018D7↑r
.data:00406010                                         ; sub_401670+284↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_4032C0+11↑r
.data:00406014                                         ; .text:00403361↑r
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_4032C0+7D↑w
.data:00406018                                         ; .text:004033CD↑w
.data:0040601C                 align 10h
.data:00406020 ; char *Buffer
.data:00406020 Buffer          dd offset aCopyrightC2005
.data:00406020                                         ; DATA XREF: sub_4037F0+DC↑r
.data:00406020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406024                 align 10h
.data:00406030 ; int Code
.data:00406030 Code            dd 1                    ; DATA XREF: sub_403B70+6D↑r
.data:00406030                                         ; sub_403B70+9A↑r ...
.data:00406034                 align 10h
.data:00406040 dword_406040    dd 1                    ; DATA XREF: sub_4050F0+22↑r
.data:00406040                                         ; sub_4050F0+65↑r ...
.data:00406044 dword_406044    dd 100h                 ; DATA XREF: sub_4050F0+3F↑o
.data:00406044                                         ; sub_4050F0+1A2↑r ...
.data:00406048 off_406048      dd offset unk_407080    ; DATA XREF: sub_4050F0+1AA↑r
.data:0040604C ; void *off_40604C
.data:0040604C off_40604C      dd offset dword_406044  ; DATA XREF: sub_4050F0+39↑r
.data:0040604C                                         ; sub_4050F0+60↑w ...
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_4056F0+9↑r
.data:00406080                                         ; sub_4056F0+1D↑w
.data:00406084 off_406084      dd offset dword_4059FC  ; DATA XREF: sub_405660+6↑r
.data:00406084                                         ; sub_405660+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000270 (    624.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 byte_407000     db ?                    ; DATA XREF: sub_401670+6D↑w
.bss:00407000                                         ; sub_401670+2AB↑r ...
.bss:00407001                 align 10h
.bss:00407010 byte_407010     db ?                    ; DATA XREF: sub_401670+74↑w
.bss:00407010                                         ; sub_401670+C9↑w ...
.bss:00407011                 align 10h
.bss:00407020 ; void *Block
.bss:00407020 Block           dd ?                    ; DATA XREF: sub_401670:loc_40190B↑r
.bss:00407020                                         ; sub_401AC0+10↑w ...
.bss:00407024                 align 10h
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: sub_401AC0:loc_401AEF↑w
.bss:00407030                                         ; sub_401CA0+1FB↑r ...
.bss:00407034                 align 10h
.bss:00407040 dword_407040    dd ?                    ; DATA XREF: sub_4032C0+9↑o
.bss:00407040                                         ; sub_4032C0+17↑w ...
.bss:00407044 dword_407044    dd ?                    ; DATA XREF: sub_4032C0+21↑w
.bss:00407044                                         ; .text:00403379↑w
.bss:00407048 dword_407048    dd ?                    ; DATA XREF: sub_4032C0+77↑r
.bss:00407048                                         ; .text:004033C7↑r
.bss:0040704C dword_40704C    dd ?                    ; DATA XREF: sub_4032C0+6B↑r
.bss:0040704C                                         ; .text:004033BB↑r
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070 ; char *dword_407070
.bss:00407070 dword_407070    dd ?                    ; DATA XREF: .text:00403B44↑w
.bss:00407070                                         ; sub_403B70+58↑r
.bss:00407074                 align 10h
.bss:00407080 unk_407080      db    ? ;               ; DATA XREF: sub_4050F0+100↑o
.bss:00407080                                         ; .data:off_406048↑o
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140                 db    ? ;
.bss:00407141                 db    ? ;
.bss:00407142                 db    ? ;
.bss:00407143                 db    ? ;
.bss:00407144                 db    ? ;
.bss:00407145                 db    ? ;
.bss:00407146                 db    ? ;
.bss:00407147                 db    ? ;
.bss:00407148                 db    ? ;
.bss:00407149                 db    ? ;
.bss:0040714A                 db    ? ;
.bss:0040714B                 db    ? ;
.bss:0040714C                 db    ? ;
.bss:0040714D                 db    ? ;
.bss:0040714E                 db    ? ;
.bss:0040714F                 db    ? ;
.bss:00407150                 db    ? ;
.bss:00407151                 db    ? ;
.bss:00407152                 db    ? ;
.bss:00407153                 db    ? ;
.bss:00407154                 db    ? ;
.bss:00407155                 db    ? ;
.bss:00407156                 db    ? ;
.bss:00407157                 db    ? ;
.bss:00407158                 db    ? ;
.bss:00407159                 db    ? ;
.bss:0040715A                 db    ? ;
.bss:0040715B                 db    ? ;
.bss:0040715C                 db    ? ;
.bss:0040715D                 db    ? ;
.bss:0040715E                 db    ? ;
.bss:0040715F                 db    ? ;
.bss:00407160                 db    ? ;
.bss:00407161                 db    ? ;
.bss:00407162                 db    ? ;
.bss:00407163                 db    ? ;
.bss:00407164                 db    ? ;
.bss:00407165                 db    ? ;
.bss:00407166                 db    ? ;
.bss:00407167                 db    ? ;
.bss:00407168                 db    ? ;
.bss:00407169                 db    ? ;
.bss:0040716A                 db    ? ;
.bss:0040716B                 db    ? ;
.bss:0040716C                 db    ? ;
.bss:0040716D                 db    ? ;
.bss:0040716E                 db    ? ;
.bss:0040716F                 db    ? ;
.bss:00407170                 db    ? ;
.bss:00407171                 db    ? ;
.bss:00407172                 db    ? ;
.bss:00407173                 db    ? ;
.bss:00407174                 db    ? ;
.bss:00407175                 db    ? ;
.bss:00407176                 db    ? ;
.bss:00407177                 db    ? ;
.bss:00407178                 db    ? ;
.bss:00407179                 db    ? ;
.bss:0040717A                 db    ? ;
.bss:0040717B                 db    ? ;
.bss:0040717C                 db    ? ;
.bss:0040717D                 db    ? ;
.bss:0040717E                 db    ? ;
.bss:0040717F                 db    ? ;
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: .text:loc_404A81↑o
.bss:00407180                                         ; .text:loc_404AA0↑o ...
.bss:00407184 dword_407184    dd ?                    ; DATA XREF: .text:loc_404B20↑o
.bss:00407184                                         ; .text:00404FA8↑r ...
.bss:00407188 dword_407188    dd ?                    ; DATA XREF: .text:00404FA2↑r
.bss:00407188                                         ; sub_405050+2C↑r
.bss:0040718C dword_40718C    dd ?                    ; DATA XREF: .text:00404F96↑r
.bss:0040718C                                         ; sub_405050+22↑r
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: .text:00404FB2↑r
.bss:00407190                                         ; sub_405050+36↑r
.bss:00407194 dword_407194    dd ?                    ; DATA XREF: .text:00404FC2↑r
.bss:00407194                                         ; sub_405050+4E↑r
.bss:00407198 dword_407198    dd ?                    ; DATA XREF: .text:00404FDF↑r
.bss:00407198                                         ; sub_405050+62↑r
.bss:0040719C dword_40719C    dd ?                    ; DATA XREF: .text:00404FD5↑r
.bss:0040719C                                         ; sub_405050+70↑r
.bss:004071A0 dword_4071A0    dd ?                    ; DATA XREF: .text:00404FB8↑r
.bss:004071A0                                         ; sub_405050+7A↑r
.bss:004071A4                 align 10h
.bss:004071B0 ; char *Str1
.bss:004071B0 Str1            dd ?                    ; DATA XREF: sub_405474:loc_4054AD↑w
.bss:004071B0                                         ; sub_405474:loc_4055E0↑r
.bss:004071B4                 align 10h
.bss:004071C0 dword_4071C0    dd ?                    ; DATA XREF: sub_405474+2D↑r
.bss:004071C0                                         ; sub_405474+3F↑w
.bss:004071C4                 align 10h
.bss:004071D0 dword_4071D0    dd ?                    ; DATA XREF: sub_401670+34↑w
.bss:004071D0                                         ; sub_401670+E5↑r ...
.bss:004071D4                 db    ? ;
.bss:004071D5                 db    ? ;
.bss:004071D6                 db    ? ;
.bss:004071D7                 db    ? ;
.bss:004071D8                 db    ? ;
.bss:004071D9                 db    ? ;
.bss:004071DA                 db    ? ;
.bss:004071DB                 db    ? ;
.bss:004071DC                 db    ? ;
.bss:004071DD                 db    ? ;
.bss:004071DE                 db    ? ;
.bss:004071DF                 db    ? ;
.bss:004071E0                 db    ? ;
.bss:004071E1                 db    ? ;
.bss:004071E2                 db    ? ;
.bss:004071E3                 db    ? ;
.bss:004071E4                 db    ? ;
.bss:004071E5                 db    ? ;
.bss:004071E6                 db    ? ;
.bss:004071E7                 db    ? ;
.bss:004071E8                 db    ? ;
.bss:004071E9                 db    ? ;
.bss:004071EA                 db    ? ;
.bss:004071EB                 db    ? ;
.bss:004071EC                 db    ? ;
.bss:004071ED                 db    ? ;
.bss:004071EE                 db    ? ;
.bss:004071EF                 db    ? ;
.bss:004071F0 dword_4071F0    dd ?                    ; DATA XREF: sub_401670:loc_401780↑r
.bss:004071F0                                         ; sub_401670+11F↑w ...
.bss:004071F4                 align 10h
.bss:00407200 dword_407200    dd ?                    ; CODE XREF: sub_405474+63↑p
.bss:00407200                                         ; DATA XREF: sub_405370+1E↑r ...
.bss:00407204                 align 10h
.bss:00407210 dword_407210    dd ?                    ; DATA XREF: sub_405370+4E↑w
.bss:00407210                                         ; sub_405474+AB↑w
.bss:00407214                 align 40h
.bss:00407240 dword_407240    dd ?                    ; DATA XREF: sub_405474+13↑r
.bss:00407244                 align 1000h
.bss:00407244 _bss            ends
.bss:00407244
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 00000580 (   1408.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00005000
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408144 ;
.idata:00408144 ; Imports from libintl3.dll
.idata:00408144 ;
.idata:00408144                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408144                                         ; CODE XREF: sub_401670+4E↑p
.idata:00408144                                         ; DATA XREF: sub_401670+4E↑r ...
.idata:00408148                 extrn libintl_gettext:dword
.idata:00408148                                         ; CODE XREF: sub_401670+D9↑p
.idata:00408148                                         ; sub_401670+183↑p ...
.idata:0040814C                 extrn libintl_textdomain:dword
.idata:0040814C                                         ; CODE XREF: sub_401670+5B↑p
.idata:0040814C                                         ; DATA XREF: sub_401670+5B↑r ...
.idata:00408150
.idata:00408158 ;
.idata:00408158 ; Imports from KERNEL32.dll
.idata:00408158 ;
.idata:00408158 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408158                 extrn __imp_ExitProcess:dword
.idata:00408158                                         ; DATA XREF: ExitProcess↑r
.idata:0040815C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040815C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040815C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408160
.idata:00408168 ;
.idata:00408168 ; Imports from MSVCP60.DLL
.idata:00408168 ;
.idata:00408168 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00408168                 extrn __imp_mbrtowc:dword
.idata:00408168                                         ; DATA XREF: mbrtowc↑r
.idata:0040816C
.idata:00408174 ;
.idata:00408174 ; Imports from msvcrt.dll
.idata:00408174 ;
.idata:00408174                 extrn __imp___getmainargs:dword
.idata:00408174                                         ; DATA XREF: __getmainargs↑r
.idata:00408178 ; int _mb_cur_max
.idata:00408178                 extrn __mb_cur_max:dword
.idata:00408178                                         ; DATA XREF: sub_403FB0+7↑r
.idata:00408178                                         ; sub_403FB0+5F3↑r
.idata:0040817C ; char ***(__cdecl *__p__environ)()
.idata:0040817C                 extrn __imp___p__environ:dword
.idata:0040817C                                         ; DATA XREF: __p__environ↑r
.idata:00408180 ; int *(__cdecl *__p__fmode)()
.idata:00408180                 extrn __imp___p__fmode:dword
.idata:00408180                                         ; DATA XREF: __p__fmode↑r
.idata:00408184 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00408184                 extrn __set_app_type:dword
.idata:00408184                                         ; CODE XREF: start+D↑p
.idata:00408184                                         ; .text:0040102D↑p
.idata:00408184                                         ; DATA XREF: ...
.idata:00408188 ; void (__cdecl *_cexit)()
.idata:00408188                 extrn __imp__cexit:dword
.idata:00408188                                         ; DATA XREF: _cexit↑r
.idata:0040818C ; int *(__cdecl *_errno)()
.idata:0040818C                 extrn __imp__errno:dword
.idata:0040818C                                         ; DATA XREF: _errno↑r
.idata:00408190 ; int (__cdecl *_filbuf)(FILE *File)
.idata:00408190                 extrn __imp__filbuf:dword
.idata:00408190                                         ; DATA XREF: _filbuf↑r
.idata:00408194 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00408194                 extrn __imp__flsbuf:dword
.idata:00408194                                         ; DATA XREF: _flsbuf↑r
.idata:00408198 ; FILE iob[]
.idata:00408198                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00408198                                         ; sub_401080+75↑r ...
.idata:0040819C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040819C                 extrn __imp__isctype:dword
.idata:0040819C                                         ; DATA XREF: _isctype↑r
.idata:004081A0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081A0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081A0                                         ; DATA XREF: .text:0040106C↑r
.idata:004081A4 ; const unsigned __int16 *pctype
.idata:004081A4                 extrn _pctype:dword     ; DATA XREF: sub_403FB0:loc_4046A4↑r
.idata:004081A8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081A8                 extrn __imp__setmode:dword
.idata:004081A8                                         ; DATA XREF: _setmode↑r
.idata:004081AC ; void (__cdecl __noreturn *abort)()
.idata:004081AC                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081B0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081B0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081B0                                         ; DATA XREF: sub_401040+C↑r
.idata:004081B4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081B4                 extrn __imp_calloc:dword
.idata:004081B4                                         ; DATA XREF: calloc↑r
.idata:004081B8 ; void (__cdecl *clearerr)(FILE *Stream)
.idata:004081B8                 extrn __imp_clearerr:dword
.idata:004081B8                                         ; DATA XREF: clearerr↑r
.idata:004081BC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081BC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081C0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081C0                 extrn __imp_fclose:dword
.idata:004081C0                                         ; DATA XREF: fclose↑r
.idata:004081C4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081C4                 extrn __imp_fflush:dword
.idata:004081C4                                         ; DATA XREF: fflush↑r
.idata:004081C8 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004081C8                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004081CC ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081CC                 extrn __imp_fprintf:dword
.idata:004081CC                                         ; DATA XREF: fprintf↑r
.idata:004081D0 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081D0                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081D4 ; void (__cdecl *free)(void *Block)
.idata:004081D4                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081D8 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:004081D8                 extrn __imp_fwrite:dword
.idata:004081D8                                         ; DATA XREF: fwrite↑r
.idata:004081DC ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081DC                 extrn __imp_getenv:dword
.idata:004081DC                                         ; DATA XREF: getenv↑r
.idata:004081E0 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081E0                 extrn __imp_iswctype:dword
.idata:004081E0                                         ; DATA XREF: iswctype↑r
.idata:004081E4 ; void *(__cdecl *malloc)(size_t Size)
.idata:004081E4                 extrn __imp_malloc:dword
.idata:004081E4                                         ; DATA XREF: malloc↑r
.idata:004081E8 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004081E8                 extrn __imp_memcpy:dword
.idata:004081E8                                         ; DATA XREF: memcpy↑r
.idata:004081EC ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004081EC                 extrn __imp_memset:dword
.idata:004081EC                                         ; DATA XREF: memset↑r
.idata:004081F0 ; int (*printf)(const char *const Format, ...)
.idata:004081F0                 extrn __imp_printf:dword
.idata:004081F0                                         ; DATA XREF: printf↑r
.idata:004081F4 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004081F4                 extrn __imp_realloc:dword
.idata:004081F4                                         ; DATA XREF: realloc↑r
.idata:004081F8 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004081F8                 extrn __imp_setlocale:dword
.idata:004081F8                                         ; DATA XREF: setlocale↑r
.idata:004081FC ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004081FC                 extrn __imp_signal:dword
.idata:004081FC                                         ; DATA XREF: signal↑r
.idata:00408200 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00408200                 extrn __imp_strchr:dword
.idata:00408200                                         ; DATA XREF: strchr↑r
.idata:00408204 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00408204                 extrn __imp_strcmp:dword
.idata:00408204                                         ; DATA XREF: strcmp↑r
.idata:00408208 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408208                 extrn __imp_strerror:dword
.idata:00408208                                         ; DATA XREF: strerror↑r
.idata:0040820C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040820C                 extrn __imp_strlen:dword
.idata:0040820C                                         ; DATA XREF: strlen↑r
.idata:00408210 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408210                 extrn __imp_strncmp:dword
.idata:00408210                                         ; DATA XREF: strncmp↑r
.idata:00408214 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408214                 extrn __imp_vfprintf:dword
.idata:00408214                                         ; DATA XREF: vfprintf↑r
.idata:00408218
.idata:00408218
.idata:00408218
.idata:00408218                 end start
