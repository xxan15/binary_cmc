.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 5994AC6175DF8BAC9EE7141F60D2967D34952598EF1CFA1ED8D36933246255A6
.text:00401000 ; Input MD5    : A76F9A005E4A8FEED10DA156D6E8AE3E
.text:00401000 ; Input CRC32  : F06A38DE
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/unlink.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A251 (Wed Apr 20 18:41:21 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004260 (  16992.)
.text:00401000 ; Section size in file          : 00004400 (  17408.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401370+62↓p
.text:00401040                                         ; .text:00404F00↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_404EA0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_404E70
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401370
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_404EA0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401370+1F↓o
.text:00401280                                         ; sub_401370+B3↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401370+39↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401370+41↓o
.text:004012C3                                         ; sub_401370+4E↓o
.text:004012CD aMichaelStone   db 'Michael Stone',0    ; DATA XREF: sub_401370+6F↓o
.text:004012DB a530            db '5.3.0',0            ; DATA XREF: sub_401370+7F↓o
.text:004012E1 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401370+87↓o
.text:004012EF ; const FILE stru_4012EF
.text:004012EF stru_4012EF     FILE <696C6E75h, 65006B6Eh, 61727478h, 65706F20h, 646E6172h, 732520h, \
.text:004012EF                                         ; DATA XREF: sub_401370+8F↓o
.text:004012EF                                         ; sub_401370+EB↓o
.text:004012EF                       90909090h, 90909090h>
.text:0040130F                 db  90h
.text:00401310                 db  90h
.text:00401311                 db  90h
.text:00401312                 db  90h
.text:00401313                 db  90h
.text:00401314                 db  90h
.text:00401315                 db  90h
.text:00401316                 db  90h
.text:00401317                 db  90h
.text:00401318                 db  90h
.text:00401319                 db  90h
.text:0040131A                 db  90h
.text:0040131B                 db  90h
.text:0040131C                 db  90h
.text:0040131D                 db  90h
.text:0040131E                 db  90h
.text:0040131F                 db  90h
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_401370:loc_401486↓o
.text:00401320                                         ; sub_401690+F↓o
.text:00401347 aCannotUnlinkS  db 'cannot unlink %s',0 ; DATA XREF: sub_401370+177↓o
.text:00401358 aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401370:loc_401519↓o
.text:00401368                 align 10h
.text:00401370
.text:00401370 ; =============== S U B R O U T I N E =======================================
.text:00401370
.text:00401370 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401370
.text:00401370 sub_401370      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401370
.text:00401370 Category        = dword ptr -28h
.text:00401370 Locale          = dword ptr -24h
.text:00401370 var_20          = dword ptr -20h
.text:00401370 var_1C          = byte ptr -1Ch
.text:00401370 var_18          = dword ptr -18h
.text:00401370 var_14          = dword ptr -14h
.text:00401370 var_10          = byte ptr -10h
.text:00401370 var_C           = dword ptr -0Ch
.text:00401370 arg_0           = dword ptr  8
.text:00401370 arg_4           = dword ptr  0Ch
.text:00401370
.text:00401370                 push    ebp
.text:00401371                 xor     eax, eax
.text:00401373                 mov     ebp, esp
.text:00401375                 push    esi
.text:00401376                 push    ebx
.text:00401377                 sub     esp, 20h
.text:0040137A                 mov     esi, [ebp+arg_4]
.text:0040137D                 and     esp, 0FFFFFFF0h
.text:00401380                 mov     ebx, [ebp+arg_0]
.text:00401383                 call    __alloca
.text:00401388                 call    sub_404F40
.text:0040138D                 mov     edx, [esi]
.text:0040138F                 mov     [esp+28h+Locale], offset Locale ; Locale
.text:00401397                 mov     [esp+28h+Category], 0 ; Category
.text:0040139E                 mov     ds:dword_407190, edx
.text:004013A4                 call    setlocale
.text:004013A9                 mov     [esp+28h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004013B1                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:004013B8                 call    ds:__imp_libintl_bindtextdomain
.text:004013BE                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:004013C5                 call    ds:libintl_textdomain
.text:004013CB                 mov     [esp+28h+Category], offset sub_402A90 ; void (__cdecl *)()
.text:004013D2                 call    sub_401040
.text:004013D7                 mov     [esp+28h+var_C], 0
.text:004013DF                 mov     dword ptr [esp+28h+var_10], offset aMichaelStone ; "Michael Stone"
.text:004013E7                 mov     [esp+28h+var_14], offset sub_401690 ; int
.text:004013EF                 mov     [esp+28h+var_18], offset a530 ; "5.3.0"
.text:004013F7                 mov     dword ptr [esp+28h+var_1C], offset aGnuCoreutils ; "GNU coreutils"
.text:004013FF                 mov     [esp+28h+var_20], offset stru_4012EF ; FILE *
.text:00401407                 mov     [esp+28h+Locale], esi ; int
.text:0040140B                 mov     [esp+28h+Category], ebx ; int
.text:0040140E                 call    sub_4029A0
.text:00401413                 mov     [esp+28h+var_18], 0 ; int
.text:0040141B                 mov     dword ptr [esp+28h+var_1C], 0 ; char
.text:00401423                 mov     [esp+28h+var_20], offset Locale ; char *
.text:0040142B                 mov     [esp+28h+Locale], esi ; int
.text:0040142F                 mov     [esp+28h+Category], ebx ; int
.text:00401432                 call    sub_402800
.text:00401437                 inc     eax
.text:00401438                 jnz     short loc_401486
.text:0040143A                 mov     edx, dword_406010
.text:00401440                 lea     eax, [edx+1]
.text:00401443                 cmp     ebx, eax
.text:00401445                 jl      loc_401519
.text:0040144B                 cmp     eax, ebx
.text:0040144D                 jge     short loc_4014BE
.text:0040144F                 mov     ebx, [esi+edx*4+4]
.text:00401453                 mov     [esp+28h+Category], ebx ; char *
.text:00401456                 call    sub_4027D0
.text:0040145B                 mov     [esp+28h+Category], (offset stru_4012EF._cnt+3)
.text:00401462                 mov     esi, eax
.text:00401464                 call    ds:libintl_gettext
.text:0040146A                 mov     dword ptr [esp+28h+var_1C], esi ; char
.text:0040146E                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:00401476                 mov     [esp+28h+Category], 0 ; Code
.text:0040147D                 mov     [esp+28h+var_20], eax ; char *
.text:00401481                 call    sub_404790
.text:00401486
.text:00401486 loc_401486:                             ; CODE XREF: sub_401370+C8↑j
.text:00401486                                         ; sub_401370+1CE↓j
.text:00401486                 mov     [esp+28h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:0040148D                 call    ds:libintl_gettext
.text:00401493                 mov     edx, ds:_iob
.text:00401499                 mov     ecx, ds:dword_407190
.text:0040149F                 add     edx, 40h ; '@'
.text:004014A2                 mov     [esp+28h+var_20], ecx
.text:004014A6                 mov     [esp+28h+Locale], eax ; Format
.text:004014AA                 mov     [esp+28h+Category], edx ; Stream
.text:004014AD                 call    fprintf
.text:004014B2                 mov     [esp+28h+Category], 1 ; Code
.text:004014B9
.text:004014B9 loc_4014B9:                             ; CODE XREF: sub_401370+164↓j
.text:004014B9                 call    exit
.text:004014BE ; ---------------------------------------------------------------------------
.text:004014BE
.text:004014BE loc_4014BE:                             ; CODE XREF: sub_401370+DD↑j
.text:004014BE                 mov     ecx, [esi+edx*4]
.text:004014C1                 mov     [esp+28h+Category], ecx ; LPCSTR
.text:004014C4                 call    sub_404A30
.text:004014C9                 test    eax, eax
.text:004014CB                 jnz     short loc_4014D6
.text:004014CD
.text:004014CD loc_4014CD:                             ; CODE XREF: sub_401370+1A7↓j
.text:004014CD                 mov     [esp+28h+Category], 0
.text:004014D4                 jmp     short loc_4014B9
.text:004014D6 ; ---------------------------------------------------------------------------
.text:004014D6
.text:004014D6 loc_4014D6:                             ; CODE XREF: sub_401370+15B↑j
.text:004014D6                 mov     ecx, dword_406010
.text:004014DC                 mov     ebx, [esi+ecx*4]
.text:004014DF                 mov     [esp+28h+Category], ebx ; char *
.text:004014E2                 call    sub_4027D0
.text:004014E7                 mov     [esp+28h+Category], offset aCannotUnlinkS ; "cannot unlink %s"
.text:004014EE                 mov     esi, eax
.text:004014F0                 call    ds:libintl_gettext
.text:004014F6                 mov     ebx, eax
.text:004014F8                 call    _errno
.text:004014FD                 mov     dword ptr [esp+28h+var_1C], esi ; char
.text:00401501                 mov     [esp+28h+var_20], ebx ; char *
.text:00401505                 mov     edx, [eax]
.text:00401507                 mov     [esp+28h+Category], 1 ; Code
.text:0040150E                 mov     [esp+28h+Locale], edx ; ErrorMessage
.text:00401512                 call    sub_404790
.text:00401517                 jmp     short loc_4014CD
.text:00401519 ; ---------------------------------------------------------------------------
.text:00401519
.text:00401519 loc_401519:                             ; CODE XREF: sub_401370+D5↑j
.text:00401519                 mov     [esp+28h+Category], offset aMissingOperand ; "missing operand"
.text:00401520                 call    ds:libintl_gettext
.text:00401526                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:0040152E                 mov     [esp+28h+Category], 0 ; Code
.text:00401535                 mov     [esp+28h+var_20], eax ; char *
.text:00401539                 call    sub_404790
.text:0040153E                 jmp     loc_401486
.text:0040153E sub_401370      endp
.text:0040153E
.text:0040153E ; ---------------------------------------------------------------------------
.text:00401543                 align 20h
.text:00401560 aUsageSFileOrSO db 'Usage: %s FILE',0Ah ; DATA XREF: sub_401690:loc_4016D3↓o
.text:00401560                 db '  or:  %s OPTION',0Ah,0
.text:00401581                 align 20h
.text:004015A0 aCallTheUnlinkF db 'Call the unlink function to remove the specified FILE.',0Ah
.text:004015A0                                         ; DATA XREF: sub_401690+66↓o
.text:004015A0                 db 0Ah,0
.text:004015D9                 align 10h
.text:004015E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004015E0                                         ; DATA XREF: sub_401690+88↓o
.text:0040160D                 align 20h
.text:00401620 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401620                                         ; DATA XREF: sub_401690+AA↓o
.text:00401656 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401690+CC↓o
.text:00401656                 db 'Report bugs to <%s>.',0Ah,0
.text:0040166D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040166D                                         ; DATA XREF: sub_401690+D9↓o
.text:00401683                 align 10h
.text:00401690
.text:00401690 ; =============== S U B R O U T I N E =======================================
.text:00401690
.text:00401690 ; Attributes: noreturn
.text:00401690
.text:00401690 ; void __cdecl __noreturn sub_401690(int Code)
.text:00401690 sub_401690      proc near               ; DATA XREF: sub_401370+77↑o
.text:00401690
.text:00401690 Stream          = dword ptr -1Ch
.text:00401690 Format          = dword ptr -18h
.text:00401690 var_14          = dword ptr -14h
.text:00401690 var_4           = dword ptr -4
.text:00401690 Code            = dword ptr  4
.text:00401690
.text:00401690                 sub     esp, 1Ch
.text:00401693                 mov     [esp+1Ch+var_4], ebx
.text:00401697                 mov     ebx, [esp+1Ch+Code]
.text:0040169B                 test    ebx, ebx
.text:0040169D                 jz      short loc_4016D3
.text:0040169F                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004016A6                 call    ds:libintl_gettext
.text:004016AC                 mov     edx, ds:_iob
.text:004016B2                 mov     ecx, ds:dword_407190
.text:004016B8                 add     edx, 40h ; '@'
.text:004016BB                 mov     [esp+1Ch+var_14], ecx
.text:004016BF                 mov     [esp+1Ch+Format], eax ; Format
.text:004016C3                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004016C6                 call    fprintf
.text:004016CB
.text:004016CB loc_4016CB:                             ; CODE XREF: sub_401690+E9↓j
.text:004016CB                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004016CE                 call    exit
.text:004016D3 ; ---------------------------------------------------------------------------
.text:004016D3
.text:004016D3 loc_4016D3:                             ; CODE XREF: sub_401690+D↑j
.text:004016D3                 mov     [esp+1Ch+Stream], offset aUsageSFileOrSO ; "Usage: %s FILE\n  or:  %s OPTION\n"
.text:004016DA                 call    ds:libintl_gettext
.text:004016E0                 mov     ecx, ds:dword_407190
.text:004016E6                 mov     [esp+1Ch+Stream], eax ; Format
.text:004016E9                 mov     [esp+1Ch+var_14], ecx
.text:004016ED                 mov     [esp+1Ch+Format], ecx
.text:004016F1                 call    printf
.text:004016F6                 mov     [esp+1Ch+Stream], offset aCallTheUnlinkF ; "Call the unlink function to remove the "...
.text:004016FD                 call    ds:libintl_gettext
.text:00401703                 mov     ecx, ds:_iob
.text:00401709                 add     ecx, 20h ; ' '
.text:0040170C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401710                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401713                 call    fputs
.text:00401718                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040171F                 call    ds:libintl_gettext
.text:00401725                 mov     ecx, ds:_iob
.text:0040172B                 add     ecx, 20h ; ' '
.text:0040172E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401732                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401735                 call    fputs
.text:0040173A                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401741                 call    ds:libintl_gettext
.text:00401747                 mov     ecx, ds:_iob
.text:0040174D                 add     ecx, 20h ; ' '
.text:00401750                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401754                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401757                 call    fputs
.text:0040175C                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401763                 call    ds:libintl_gettext
.text:00401769                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401771                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401774                 call    printf
.text:00401779                 jmp     loc_4016CB
.text:00401779 sub_401690      endp
.text:00401779
.text:00401779 ; ---------------------------------------------------------------------------
.text:0040177E                 align 10h
.text:00401780 dword_401780    dd 90002D2Dh, 7 dup(90909090h)
.text:00401780                                         ; DATA XREF: sub_4019D0+E4↓o
.text:004017A0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004017A0                                         ; DATA XREF: sub_4019D0+2FC↓o
.text:004017CD                 align 20h
.text:004017E0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004017E0                                         ; DATA XREF: sub_4019D0:loc_401D32↓o
.text:0040180D                 align 20h
.text:00401820 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401820                                         ; DATA XREF: sub_4019D0:loc_401DD0↓o
.text:00401820                                         ; sub_4019D0:loc_402197↓o
.text:00401846                 align 20h
.text:00401860 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401860                                         ; DATA XREF: sub_4019D0+48E↓o
.text:00401880 dword_401880    dd 90909000h, 7 dup(90909090h)
.text:00401880                                         ; DATA XREF: sub_4019D0:loc_401EA1↓o
.text:004018A0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004018A0                                         ; DATA XREF: sub_4019D0:loc_401EBA↓o
.text:004018C0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004018C0                                         ; DATA XREF: sub_4019D0:loc_401F9F↓o
.text:004018C0                                         ; sub_4019D0:loc_4022CC↓o
.text:004018E7                 align 20h
.text:00401900 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401900                                         ; DATA XREF: sub_4019D0:loc_402113↓o
.text:0040192E                 align 20h
.text:00401940 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401940                                         ; DATA XREF: sub_4019D0:loc_4021FF↓o
.text:00401961 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401961                                         ; DATA XREF: sub_4019D0+93F↓o
.text:0040197B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040197B                                         ; DATA XREF: sub_4019D0:loc_402347↓o
.text:00401995 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401995                                         ; DATA XREF: sub_4019D0:loc_40236E↓o
.text:004019B3 ; const char VarName[]
.text:004019B3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4019D0:loc_402520↓o
.text:004019C3                 align 10h
.text:004019D0
.text:004019D0 ; =============== S U B R O U T I N E =======================================
.text:004019D0
.text:004019D0
.text:004019D0 ; int __cdecl sub_4019D0(int, int, char *Str, int, int, int, int, int)
.text:004019D0 sub_4019D0      proc near               ; CODE XREF: sub_402560+5A↓p
.text:004019D0                                         ; .text:0040264A↓p ...
.text:004019D0
.text:004019D0 Str1            = dword ptr -5Ch
.text:004019D0 Str2            = dword ptr -58h
.text:004019D0 MaxCount        = dword ptr -54h
.text:004019D0 var_50          = dword ptr -50h
.text:004019D0 var_4C          = dword ptr -4Ch
.text:004019D0 var_3C          = dword ptr -3Ch
.text:004019D0 var_38          = dword ptr -38h
.text:004019D0 var_34          = dword ptr -34h
.text:004019D0 var_30          = dword ptr -30h
.text:004019D0 var_2C          = dword ptr -2Ch
.text:004019D0 var_28          = dword ptr -28h
.text:004019D0 var_24          = dword ptr -24h
.text:004019D0 var_20          = dword ptr -20h
.text:004019D0 var_1C          = dword ptr -1Ch
.text:004019D0 var_18          = dword ptr -18h
.text:004019D0 var_14          = dword ptr -14h
.text:004019D0 arg_0           = dword ptr  4
.text:004019D0 arg_4           = dword ptr  8
.text:004019D0 Str             = dword ptr  0Ch
.text:004019D0 arg_C           = dword ptr  10h
.text:004019D0 arg_10          = dword ptr  14h
.text:004019D0 arg_14          = dword ptr  18h
.text:004019D0 arg_18          = dword ptr  1Ch
.text:004019D0 arg_1C          = dword ptr  20h
.text:004019D0
.text:004019D0                 push    ebp
.text:004019D1                 mov     eax, 0FFFFFFFFh
.text:004019D6                 push    edi
.text:004019D7                 push    esi
.text:004019D8                 push    ebx
.text:004019D9                 sub     esp, 4Ch
.text:004019DC                 mov     esi, [esp+5Ch+Str]
.text:004019E0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004019E4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004019E7                 mov     ebx, [ebp+4]
.text:004019EA                 setz    dl
.text:004019ED                 movzx   ecx, dl
.text:004019F0                 dec     ecx
.text:004019F1                 and     ecx, ebx
.text:004019F3                 mov     [esp+5Ch+var_14], ecx
.text:004019F7                 mov     ecx, [esp+5Ch+arg_0]
.text:004019FB                 test    ecx, ecx
.text:004019FD                 jle     loc_401B27
.text:00401A03                 mov     dword ptr [ebp+0Ch], 0
.text:00401A0A                 mov     ebx, [ebp+0]
.text:00401A0D                 test    ebx, ebx
.text:00401A0F                 jz      loc_402540
.text:00401A15                 mov     edi, [ebp+10h]
.text:00401A18                 test    edi, edi
.text:00401A1A                 jnz     short loc_401A73
.text:00401A1C                 lea     esi, [esi+0]
.text:00401A20
.text:00401A20 loc_401A20:                             ; CODE XREF: sub_4019D0+B7C↓j
.text:00401A20                 mov     [ebp+24h], ebx
.text:00401A23                 mov     esi, [esp+5Ch+Str]
.text:00401A27                 mov     [ebp+20h], ebx
.text:00401A2A                 mov     ecx, [esp+5Ch+arg_18]
.text:00401A2E                 xor     ebx, ebx
.text:00401A30                 mov     dword ptr [ebp+14h], 0
.text:00401A37                 test    ecx, ecx
.text:00401A39                 jz      loc_402520
.text:00401A3F
.text:00401A3F loc_401A3F:                             ; CODE XREF: sub_4019D0+B64↓j
.text:00401A3F                 mov     ebx, 1
.text:00401A44
.text:00401A44 loc_401A44:                             ; CODE XREF: sub_4019D0+B5E↓j
.text:00401A44                 mov     [ebp+1Ch], ebx
.text:00401A47                 mov     ecx, [esp+5Ch+Str]
.text:00401A4B                 movzx   eax, byte ptr [ecx]
.text:00401A4E                 cmp     al, 2Dh ; '-'
.text:00401A50                 jz      loc_402510
.text:00401A56                 cmp     al, 2Bh ; '+'
.text:00401A58                 jz      loc_4024F9
.text:00401A5E                 xor     edx, edx
.text:00401A60                 test    ebx, ebx
.text:00401A62                 setz    dl
.text:00401A65                 mov     [ebp+18h], edx
.text:00401A68
.text:00401A68 loc_401A68:                             ; CODE XREF: sub_4019D0+B35↓j
.text:00401A68                 mov     [esp+5Ch+Str], esi
.text:00401A6C                 mov     dword ptr [ebp+10h], 1
.text:00401A73
.text:00401A73 loc_401A73:                             ; CODE XREF: sub_4019D0+4A↑j
.text:00401A73                 mov     eax, [ebp+14h]
.text:00401A76                 test    eax, eax
.text:00401A78                 jz      short loc_401A83
.text:00401A7A                 cmp     byte ptr [eax], 0
.text:00401A7D                 jnz     loc_401B60
.text:00401A83
.text:00401A83 loc_401A83:                             ; CODE XREF: sub_4019D0+A8↑j
.text:00401A83                 mov     ebx, [ebp+0]
.text:00401A86                 cmp     [ebp+24h], ebx
.text:00401A89                 jle     short loc_401A8E
.text:00401A8B                 mov     [ebp+24h], ebx
.text:00401A8E
.text:00401A8E loc_401A8E:                             ; CODE XREF: sub_4019D0+B9↑j
.text:00401A8E                 cmp     [ebp+20h], ebx
.text:00401A91                 jle     short loc_401A96
.text:00401A93                 mov     [ebp+20h], ebx
.text:00401A96
.text:00401A96 loc_401A96:                             ; CODE XREF: sub_4019D0+C1↑j
.text:00401A96                 cmp     dword ptr [ebp+18h], 1
.text:00401A9A                 jz      loc_402470
.text:00401AA0
.text:00401AA0 loc_401AA0:                             ; CODE XREF: sub_4019D0+B13↓j
.text:00401AA0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401AA4                 jz      loc_402454
.text:00401AAA                 cld
.text:00401AAB                 mov     ecx, [esp+5Ch+arg_4]
.text:00401AAF                 mov     edx, 3
.text:00401AB4                 mov     edi, offset dword_401780
.text:00401AB9                 mov     esi, [ecx+ebx*4]
.text:00401ABC                 mov     ecx, edx
.text:00401ABE                 repe cmpsb
.text:00401AC0                 jnz     short loc_401AFC
.text:00401AC2                 mov     edx, [ebp+24h]
.text:00401AC5                 lea     eax, [ebx+1]
.text:00401AC8                 cmp     [ebp+20h], edx
.text:00401ACB                 mov     [ebp+0], eax
.text:00401ACE                 jz      loc_402468
.text:00401AD4                 cmp     edx, eax
.text:00401AD6                 jz      short loc_401AF0
.text:00401AD8                 mov     [esp+5Ch+Str2], ebp
.text:00401ADC                 mov     ebx, [esp+5Ch+arg_4]
.text:00401AE0                 mov     [esp+5Ch+Str1], ebx
.text:00401AE3                 call    sub_402680
.text:00401AE8                 nop
.text:00401AE9                 lea     esi, [esi+0]
.text:00401AF0
.text:00401AF0 loc_401AF0:                             ; CODE XREF: sub_4019D0+106↑j
.text:00401AF0                                         ; sub_4019D0+A9B↓j
.text:00401AF0                 mov     eax, [esp+5Ch+arg_0]
.text:00401AF4                 mov     ebx, eax
.text:00401AF6                 mov     [ebp+24h], eax
.text:00401AF9                 mov     [ebp+0], eax
.text:00401AFC
.text:00401AFC loc_401AFC:                             ; CODE XREF: sub_4019D0+F0↑j
.text:00401AFC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401B00                 jz      loc_402454
.text:00401B06                 mov     esi, [esp+5Ch+arg_4]
.text:00401B0A                 mov     eax, [esi+ebx*4]
.text:00401B0D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401B10                 jz      short loc_401B37
.text:00401B12
.text:00401B12 loc_401B12:                             ; CODE XREF: sub_4019D0+16D↓j
.text:00401B12                 mov     edx, [ebp+18h]
.text:00401B15                 test    edx, edx
.text:00401B17                 jz      short loc_401B30
.text:00401B19                 mov     [ebp+0Ch], eax
.text:00401B1C                 lea     edi, [ebx+1]
.text:00401B1F                 mov     eax, 1
.text:00401B24                 mov     [ebp+0], edi
.text:00401B27
.text:00401B27 loc_401B27:                             ; CODE XREF: sub_4019D0+2D↑j
.text:00401B27                                         ; sub_4019D0+165↓j ...
.text:00401B27                 add     esp, 4Ch
.text:00401B2A                 pop     ebx
.text:00401B2B                 pop     esi
.text:00401B2C                 pop     edi
.text:00401B2D                 pop     ebp
.text:00401B2E                 retn
.text:00401B2E ; ---------------------------------------------------------------------------
.text:00401B2F                 align 10h
.text:00401B30
.text:00401B30 loc_401B30:                             ; CODE XREF: sub_4019D0+147↑j
.text:00401B30                                         ; sub_4019D0+A8A↓j ...
.text:00401B30                 mov     eax, 0FFFFFFFFh
.text:00401B35                 jmp     short loc_401B27
.text:00401B37 ; ---------------------------------------------------------------------------
.text:00401B37
.text:00401B37 loc_401B37:                             ; CODE XREF: sub_4019D0+140↑j
.text:00401B37                 movzx   edx, byte ptr [eax+1]
.text:00401B3B                 test    dl, dl
.text:00401B3D                 jz      short loc_401B12
.text:00401B3F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401B43                 xor     ecx, ecx
.text:00401B45                 test    ebx, ebx
.text:00401B47                 jz      short loc_401B52
.text:00401B49                 cmp     dl, 2Dh ; '-'
.text:00401B4C                 jz      loc_40244A
.text:00401B52
.text:00401B52 loc_401B52:                             ; CODE XREF: sub_4019D0+177↑j
.text:00401B52                                         ; sub_4019D0+A7F↓j
.text:00401B52                 lea     esi, [ecx+eax+1]
.text:00401B56                 mov     [ebp+14h], esi
.text:00401B59                 lea     esi, [esi+0]
.text:00401B60
.text:00401B60 loc_401B60:                             ; CODE XREF: sub_4019D0+AD↑j
.text:00401B60                 mov     ecx, [esp+5Ch+arg_C]
.text:00401B64                 test    ecx, ecx
.text:00401B66                 jz      loc_401EF0
.text:00401B6C                 mov     edx, [ebp+0]
.text:00401B6F                 mov     edi, [esp+5Ch+arg_4]
.text:00401B73                 mov     eax, [edi+edx*4]
.text:00401B76                 movzx   edx, byte ptr [eax+1]
.text:00401B7A                 cmp     dl, 2Dh ; '-'
.text:00401B7D                 jz      short loc_401B95
.text:00401B7F                 mov     ebx, [esp+5Ch+arg_14]
.text:00401B83                 test    ebx, ebx
.text:00401B85                 jz      loc_401EF0
.text:00401B8B                 cmp     byte ptr [eax+2], 0
.text:00401B8F                 jz      loc_40242A
.text:00401B95
.text:00401B95 loc_401B95:                             ; CODE XREF: sub_4019D0+1AD↑j
.text:00401B95                                         ; sub_4019D0+A75↓j
.text:00401B95                 mov     [esp+5Ch+var_18], 0
.text:00401B9D                 mov     ecx, [ebp+14h]
.text:00401BA0                 mov     [esp+5Ch+var_1C], 0
.text:00401BA8                 mov     [esp+5Ch+var_20], 0
.text:00401BB0                 mov     edi, ecx
.text:00401BB2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401BBA                 movzx   eax, byte ptr [ecx]
.text:00401BBD                 test    al, al
.text:00401BBF                 jz      short loc_401BDC
.text:00401BC1                 cmp     al, 3Dh ; '='
.text:00401BC3                 jz      short loc_401BDC
.text:00401BC5                 lea     esi, [esi+0]
.text:00401BC9                 lea     edi, [edi+0]
.text:00401BD0
.text:00401BD0 loc_401BD0:                             ; CODE XREF: sub_4019D0+20A↓j
.text:00401BD0                 inc     edi
.text:00401BD1                 movzx   eax, byte ptr [edi]
.text:00401BD4                 test    al, al
.text:00401BD6                 jz      short loc_401BDC
.text:00401BD8                 cmp     al, 3Dh ; '='
.text:00401BDA                 jnz     short loc_401BD0
.text:00401BDC
.text:00401BDC loc_401BDC:                             ; CODE XREF: sub_4019D0+1EF↑j
.text:00401BDC                                         ; sub_4019D0+1F3↑j ...
.text:00401BDC                 mov     [esp+5Ch+var_28], 0
.text:00401BE4                 mov     esi, [esp+5Ch+arg_C]
.text:00401BE8                 mov     ebx, [esi]
.text:00401BEA                 test    ebx, ebx
.text:00401BEC                 mov     edx, ebx
.text:00401BEE                 jz      loc_401E10
.text:00401BF4                 lea     esi, [esi+0]
.text:00401BFA                 lea     edi, [edi+0]
.text:00401C00
.text:00401C00 loc_401C00:                             ; CODE XREF: sub_4019D0+25E↓j
.text:00401C00                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401C04                 mov     ebx, edi
.text:00401C06                 sub     ebx, ecx
.text:00401C08                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401C0C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401C0F                 call    strncmp
.text:00401C14                 test    eax, eax
.text:00401C16                 jz      loc_4023A6
.text:00401C1C
.text:00401C1C loc_401C1C:                             ; CODE XREF: sub_4019D0+A0F↓j
.text:00401C1C                                         ; sub_4019D0+A24↓j ...
.text:00401C1C                 inc     [esp+5Ch+var_28]
.text:00401C20                 add     esi, 10h
.text:00401C23                 mov     ecx, [esi]
.text:00401C25                 test    ecx, ecx
.text:00401C27                 mov     edx, ecx
.text:00401C29                 jz      short loc_401C30
.text:00401C2B                 mov     ecx, [ebp+14h]
.text:00401C2E                 jmp     short loc_401C00
.text:00401C30 ; ---------------------------------------------------------------------------
.text:00401C30
.text:00401C30 loc_401C30:                             ; CODE XREF: sub_4019D0+259↑j
.text:00401C30                                         ; sub_4019D0+A55↓j
.text:00401C30                 mov     esi, [esp+5Ch+var_20]
.text:00401C34                 test    esi, esi
.text:00401C36                 jz      short loc_401C44
.text:00401C38                 mov     edx, [esp+5Ch+var_1C]
.text:00401C3C                 test    edx, edx
.text:00401C3E                 jz      loc_402350
.text:00401C44
.text:00401C44 loc_401C44:                             ; CODE XREF: sub_4019D0+266↑j
.text:00401C44                 mov     eax, [esp+5Ch+var_18]
.text:00401C48                 test    eax, eax
.text:00401C4A                 jz      loc_401E10
.text:00401C50                 mov     ecx, [ebp+0]
.text:00401C53                 lea     eax, [ecx+1]
.text:00401C56                 mov     [ebp+0], eax
.text:00401C59                 cmp     byte ptr [edi], 0
.text:00401C5C                 jz      loc_401D70
.text:00401C62                 mov     ecx, [esp+5Ch+var_18]
.text:00401C66                 mov     esi, [ecx+4]
.text:00401C69                 test    esi, esi
.text:00401C6B                 jz      short loc_401CB6
.text:00401C6D                 lea     ebx, [edi+1]
.text:00401C70                 mov     [ebp+0Ch], ebx
.text:00401C73
.text:00401C73 loc_401C73:                             ; CODE XREF: sub_4019D0+3A8↓j
.text:00401C73                                         ; sub_4019D0+3C4↓j
.text:00401C73                 mov     ebx, [ebp+14h]
.text:00401C76                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401C79                 call    strlen
.text:00401C7E                 add     [ebp+14h], eax
.text:00401C81                 mov     esi, [esp+5Ch+arg_10]
.text:00401C85                 test    esi, esi
.text:00401C87                 jz      short loc_401C93
.text:00401C89                 mov     ebp, [esp+5Ch+var_24]
.text:00401C8D                 mov     ecx, [esp+5Ch+arg_10]
.text:00401C91                 mov     [ecx], ebp
.text:00401C93
.text:00401C93 loc_401C93:                             ; CODE XREF: sub_4019D0+2B7↑j
.text:00401C93                 mov     eax, [esp+5Ch+var_18]
.text:00401C97                 mov     ecx, [eax+8]
.text:00401C9A                 test    ecx, ecx
.text:00401C9C                 jnz     short loc_401CAA
.text:00401C9E                 mov     ecx, [esp+5Ch+var_18]
.text:00401CA2
.text:00401CA2 loc_401CA2:                             ; CODE XREF: sub_4019D0+723↓j
.text:00401CA2                 mov     eax, [ecx+0Ch]
.text:00401CA5                 jmp     loc_401B27
.text:00401CAA ; ---------------------------------------------------------------------------
.text:00401CAA
.text:00401CAA loc_401CAA:                             ; CODE XREF: sub_4019D0+2CC↑j
.text:00401CAA                                         ; sub_4019D0+719↓j
.text:00401CAA                 mov     esi, [eax+0Ch]
.text:00401CAD                 xor     eax, eax
.text:00401CAF                 mov     [ecx], esi
.text:00401CB1                 jmp     loc_401B27
.text:00401CB6 ; ---------------------------------------------------------------------------
.text:00401CB6
.text:00401CB6 loc_401CB6:                             ; CODE XREF: sub_4019D0+29B↑j
.text:00401CB6                 mov     edi, [esp+5Ch+var_14]
.text:00401CBA                 test    edi, edi
.text:00401CBC                 jz      short loc_401D10
.text:00401CBE                 mov     esi, [esp+5Ch+arg_4]
.text:00401CC2                 mov     edx, [esi+eax*4-4]
.text:00401CC6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401CCA                 jz      short loc_401D32
.text:00401CCC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401CD3                 call    ds:libintl_gettext
.text:00401CD9                 mov     edx, [esp+5Ch+var_18]
.text:00401CDD                 mov     edi, [edx]
.text:00401CDF                 mov     [esp+5Ch+var_4C], edi
.text:00401CE3                 mov     ebx, [ebp+0]
.text:00401CE6                 mov     edi, [esp+5Ch+arg_4]
.text:00401CEA                 mov     ecx, [edi+ebx*4-4]
.text:00401CEE                 movsx   esi, byte ptr [ecx]
.text:00401CF1                 mov     ecx, ds:_iob
.text:00401CF7                 add     ecx, 40h ; '@'
.text:00401CFA                 mov     [esp+5Ch+var_50], esi
.text:00401CFE                 mov     ebx, [edi]
.text:00401D00                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D04                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D07                 mov     [esp+5Ch+MaxCount], ebx
.text:00401D0B                 call    fprintf
.text:00401D10
.text:00401D10 loc_401D10:                             ; CODE XREF: sub_4019D0+2EC↑j
.text:00401D10                                         ; sub_4019D0+398↓j
.text:00401D10                 mov     ecx, [ebp+14h]
.text:00401D13                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401D16                 call    strlen
.text:00401D1B                 add     [ebp+14h], eax
.text:00401D1E                 mov     eax, [esp+5Ch+var_18]
.text:00401D22                 mov     esi, [eax+0Ch]
.text:00401D25                 mov     [ebp+8], esi
.text:00401D28
.text:00401D28 loc_401D28:                             ; CODE XREF: sub_4019D0+4E5↓j
.text:00401D28                                         ; sub_4019D0+73E↓j ...
.text:00401D28                 mov     eax, 3Fh ; '?'
.text:00401D2D                 jmp     loc_401B27
.text:00401D32 ; ---------------------------------------------------------------------------
.text:00401D32
.text:00401D32 loc_401D32:                             ; CODE XREF: sub_4019D0+2FA↑j
.text:00401D32                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401D39                 call    ds:libintl_gettext
.text:00401D3F                 mov     edx, [esp+5Ch+var_18]
.text:00401D43                 mov     edi, [esp+5Ch+arg_4]
.text:00401D47                 mov     ecx, ds:_iob
.text:00401D4D                 mov     esi, [edx]
.text:00401D4F                 add     ecx, 40h ; '@'
.text:00401D52                 mov     [esp+5Ch+var_50], esi
.text:00401D56                 mov     ebx, [edi]
.text:00401D58                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D5C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D5F                 mov     [esp+5Ch+MaxCount], ebx
.text:00401D63                 call    fprintf
.text:00401D68                 jmp     short loc_401D10
.text:00401D68 ; ---------------------------------------------------------------------------
.text:00401D6A                 align 10h
.text:00401D70
.text:00401D70 loc_401D70:                             ; CODE XREF: sub_4019D0+28C↑j
.text:00401D70                 mov     ebx, [esp+5Ch+var_18]
.text:00401D74                 cmp     dword ptr [ebx+4], 1
.text:00401D78                 jnz     loc_401C73
.text:00401D7E                 cmp     eax, [esp+5Ch+arg_0]
.text:00401D82                 jge     short loc_401D99
.text:00401D84                 mov     ebx, [esp+5Ch+arg_4]
.text:00401D88                 lea     edi, [ecx+2]
.text:00401D8B                 mov     [ebp+0], edi
.text:00401D8E                 mov     esi, [ebx+eax*4]
.text:00401D91                 mov     [ebp+0Ch], esi
.text:00401D94                 jmp     loc_401C73
.text:00401D99 ; ---------------------------------------------------------------------------
.text:00401D99
.text:00401D99 loc_401D99:                             ; CODE XREF: sub_4019D0+3B2↑j
.text:00401D99                 mov     edx, [esp+5Ch+var_14]
.text:00401D9D                 test    edx, edx
.text:00401D9F                 jnz     short loc_401DD0
.text:00401DA1
.text:00401DA1 loc_401DA1:                             ; CODE XREF: sub_4019D0+437↓j
.text:00401DA1                 mov     edx, [ebp+14h]
.text:00401DA4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401DA7                 call    strlen
.text:00401DAC                 add     [ebp+14h], eax
.text:00401DAF                 mov     eax, [esp+5Ch+var_18]
.text:00401DB3                 mov     edi, [eax+0Ch]
.text:00401DB6                 mov     [ebp+8], edi
.text:00401DB9
.text:00401DB9 loc_401DB9:                             ; CODE XREF: sub_4019D0+7C2↓j
.text:00401DB9                 mov     ebp, [esp+5Ch+Str]
.text:00401DBD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401DC1                 setnz   bl
.text:00401DC4                 movzx   esi, bl
.text:00401DC7                 lea     eax, [esi+esi*4+3Ah]
.text:00401DCB                 jmp     loc_401B27
.text:00401DD0 ; ---------------------------------------------------------------------------
.text:00401DD0
.text:00401DD0 loc_401DD0:                             ; CODE XREF: sub_4019D0+3CF↑j
.text:00401DD0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401DD7                 call    ds:libintl_gettext
.text:00401DDD                 mov     ecx, [ebp+0]
.text:00401DE0                 mov     esi, [esp+5Ch+arg_4]
.text:00401DE4                 mov     ebx, [esi+ecx*4-4]
.text:00401DE8                 mov     ecx, ds:_iob
.text:00401DEE                 mov     [esp+5Ch+var_50], ebx
.text:00401DF2                 mov     edi, [esi]
.text:00401DF4                 add     ecx, 40h ; '@'
.text:00401DF7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401DFB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401DFE                 mov     [esp+5Ch+MaxCount], edi
.text:00401E02                 call    fprintf
.text:00401E07                 jmp     short loc_401DA1
.text:00401E07 ; ---------------------------------------------------------------------------
.text:00401E09                 align 10h
.text:00401E10
.text:00401E10 loc_401E10:                             ; CODE XREF: sub_4019D0+21E↑j
.text:00401E10                                         ; sub_4019D0+27A↑j
.text:00401E10                 mov     eax, [esp+5Ch+arg_14]
.text:00401E14                 test    eax, eax
.text:00401E16                 jz      short loc_401E46
.text:00401E18                 mov     ebx, [ebp+0]
.text:00401E1B                 mov     esi, [esp+5Ch+arg_4]
.text:00401E1F                 mov     edi, [esi+ebx*4]
.text:00401E22                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401E26                 jz      short loc_401E49
.text:00401E28                 mov     ecx, [ebp+14h]
.text:00401E2B                 mov     edx, [esp+5Ch+Str]
.text:00401E2F                 movsx   ebx, byte ptr [ecx]
.text:00401E32                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401E35                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401E39                 call    strchr
.text:00401E3E                 test    eax, eax
.text:00401E40                 jnz     loc_401EF0
.text:00401E46
.text:00401E46 loc_401E46:                             ; CODE XREF: sub_4019D0+446↑j
.text:00401E46                 mov     ebx, [ebp+0]
.text:00401E49
.text:00401E49 loc_401E49:                             ; CODE XREF: sub_4019D0+456↑j
.text:00401E49                 mov     eax, [esp+5Ch+var_14]
.text:00401E4D                 test    eax, eax
.text:00401E4F                 jz      short loc_401EA1
.text:00401E51                 mov     esi, [esp+5Ch+arg_4]
.text:00401E55                 mov     edi, [esi+ebx*4]
.text:00401E58                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401E5C                 jz      short loc_401EBA
.text:00401E5E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401E65                 call    ds:libintl_gettext
.text:00401E6B                 mov     edi, [ebp+14h]
.text:00401E6E                 mov     [esp+5Ch+var_4C], edi
.text:00401E72                 mov     ebx, [ebp+0]
.text:00401E75                 mov     edi, [esp+5Ch+arg_4]
.text:00401E79                 mov     esi, [edi+ebx*4]
.text:00401E7C                 movsx   ecx, byte ptr [esi]
.text:00401E7F                 mov     esi, ds:_iob
.text:00401E85                 add     esi, 40h ; '@'
.text:00401E88                 mov     [esp+5Ch+var_50], ecx
.text:00401E8C                 mov     ebx, [edi]
.text:00401E8E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E92                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401E95                 mov     [esp+5Ch+MaxCount], ebx
.text:00401E99                 call    fprintf
.text:00401E9E
.text:00401E9E loc_401E9E:                             ; CODE XREF: sub_4019D0+51D↓j
.text:00401E9E                 mov     ebx, [ebp+0]
.text:00401EA1
.text:00401EA1 loc_401EA1:                             ; CODE XREF: sub_4019D0+47F↑j
.text:00401EA1                 mov     dword ptr [ebp+14h], offset dword_401880
.text:00401EA8                 lea     edx, [ebx+1]
.text:00401EAB                 mov     [ebp+0], edx
.text:00401EAE
.text:00401EAE loc_401EAE:                             ; CODE XREF: sub_4019D0+999↓j
.text:00401EAE                 mov     dword ptr [ebp+8], 0
.text:00401EB5                 jmp     loc_401D28
.text:00401EBA ; ---------------------------------------------------------------------------
.text:00401EBA
.text:00401EBA loc_401EBA:                             ; CODE XREF: sub_4019D0+48C↑j
.text:00401EBA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00401EC1                 call    ds:libintl_gettext
.text:00401EC7                 mov     ecx, [ebp+14h]
.text:00401ECA                 mov     edi, [esp+5Ch+arg_4]
.text:00401ECE                 mov     edx, ds:_iob
.text:00401ED4                 mov     [esp+5Ch+var_50], ecx
.text:00401ED8                 mov     ebx, [edi]
.text:00401EDA                 add     edx, 40h ; '@'
.text:00401EDD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401EE1                 mov     [esp+5Ch+MaxCount], ebx
.text:00401EE5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401EE8                 call    fprintf
.text:00401EED                 jmp     short loc_401E9E
.text:00401EED ; ---------------------------------------------------------------------------
.text:00401EEF                 align 10h
.text:00401EF0
.text:00401EF0 loc_401EF0:                             ; CODE XREF: sub_4019D0+196↑j
.text:00401EF0                                         ; sub_4019D0+1B5↑j ...
.text:00401EF0                 mov     esi, [ebp+14h]
.text:00401EF3                 movzx   ebx, byte ptr [esi]
.text:00401EF6                 inc     esi
.text:00401EF7                 mov     [ebp+14h], esi
.text:00401EFA                 mov     ecx, [esp+5Ch+Str]
.text:00401EFE                 movsx   esi, bl
.text:00401F01                 mov     [esp+5Ch+Str2], esi ; Val
.text:00401F05                 mov     edi, esi
.text:00401F07                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401F0A                 call    strchr
.text:00401F0F                 mov     ecx, [ebp+14h]
.text:00401F12                 cmp     byte ptr [ecx], 0
.text:00401F15                 jnz     short loc_401F1A
.text:00401F17                 inc     dword ptr [ebp+0]
.text:00401F1A
.text:00401F1A loc_401F1A:                             ; CODE XREF: sub_4019D0+545↑j
.text:00401F1A                 test    eax, eax
.text:00401F1C                 jz      loc_402300
.text:00401F22                 cmp     bl, 3Ah ; ':'
.text:00401F25                 jz      loc_402300
.text:00401F2B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00401F2E                 jz      loc_401FE6
.text:00401F34                 movzx   edx, byte ptr [eax+1]
.text:00401F38
.text:00401F38 loc_401F38:                             ; CODE XREF: sub_4019D0+61D↓j
.text:00401F38                 cmp     dl, 3Ah ; ':'
.text:00401F3B                 jz      short loc_401F44
.text:00401F3D
.text:00401F3D loc_401F3D:                             ; CODE XREF: sub_4019D0+590↓j
.text:00401F3D                 mov     eax, esi
.text:00401F3F                 jmp     loc_401B27
.text:00401F44 ; ---------------------------------------------------------------------------
.text:00401F44
.text:00401F44 loc_401F44:                             ; CODE XREF: sub_4019D0+56B↑j
.text:00401F44                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00401F48                 jz      loc_401FD1
.text:00401F4E                 cmp     byte ptr [ecx], 0
.text:00401F51                 jz      short loc_401F62
.text:00401F53
.text:00401F53 loc_401F53:                             ; CODE XREF: sub_4019D0+604↓j
.text:00401F53                 inc     dword ptr [ebp+0]
.text:00401F56                 mov     [ebp+0Ch], ecx
.text:00401F59
.text:00401F59 loc_401F59:                             ; CODE XREF: sub_4019D0+5AB↓j
.text:00401F59                                         ; sub_4019D0+5C6↓j ...
.text:00401F59                 mov     dword ptr [ebp+14h], 0
.text:00401F60                 jmp     short loc_401F3D
.text:00401F62 ; ---------------------------------------------------------------------------
.text:00401F62
.text:00401F62 loc_401F62:                             ; CODE XREF: sub_4019D0+581↑j
.text:00401F62                 mov     ecx, [ebp+0]
.text:00401F65                 cmp     ecx, [esp+5Ch+arg_0]
.text:00401F69                 jz      short loc_401F7D
.text:00401F6B                 mov     eax, [esp+5Ch+arg_4]
.text:00401F6F                 lea     edx, [ecx+1]
.text:00401F72                 mov     [ebp+0], edx
.text:00401F75                 mov     ebx, [eax+ecx*4]
.text:00401F78                 mov     [ebp+0Ch], ebx
.text:00401F7B                 jmp     short loc_401F59
.text:00401F7D ; ---------------------------------------------------------------------------
.text:00401F7D
.text:00401F7D loc_401F7D:                             ; CODE XREF: sub_4019D0+599↑j
.text:00401F7D                 mov     ecx, [esp+5Ch+var_14]
.text:00401F81                 test    ecx, ecx
.text:00401F83                 jnz     short loc_401F9F
.text:00401F85
.text:00401F85 loc_401F85:                             ; CODE XREF: sub_4019D0+5FF↓j
.text:00401F85                 mov     [ebp+8], edi
.text:00401F88                 mov     edi, [esp+5Ch+Str]
.text:00401F8C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00401F8F                 jz      short loc_401F98
.text:00401F91                 mov     esi, 3Fh ; '?'
.text:00401F96                 jmp     short loc_401F59
.text:00401F98 ; ---------------------------------------------------------------------------
.text:00401F98
.text:00401F98 loc_401F98:                             ; CODE XREF: sub_4019D0+5BF↑j
.text:00401F98                 mov     esi, 3Ah ; ':'
.text:00401F9D                 jmp     short loc_401F59
.text:00401F9F ; ---------------------------------------------------------------------------
.text:00401F9F
.text:00401F9F loc_401F9F:                             ; CODE XREF: sub_4019D0+5B3↑j
.text:00401F9F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00401FA6                 call    ds:libintl_gettext
.text:00401FAC                 mov     [esp+5Ch+var_50], edi
.text:00401FB0                 mov     ebx, [esp+5Ch+arg_4]
.text:00401FB4                 mov     edx, ds:_iob
.text:00401FBA                 mov     esi, [ebx]
.text:00401FBC                 add     edx, 40h ; '@'
.text:00401FBF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401FC3                 mov     [esp+5Ch+MaxCount], esi
.text:00401FC7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401FCA                 call    fprintf
.text:00401FCF                 jmp     short loc_401F85
.text:00401FD1 ; ---------------------------------------------------------------------------
.text:00401FD1
.text:00401FD1 loc_401FD1:                             ; CODE XREF: sub_4019D0+578↑j
.text:00401FD1                 cmp     byte ptr [ecx], 0
.text:00401FD4                 jnz     loc_401F53
.text:00401FDA                 mov     dword ptr [ebp+0Ch], 0
.text:00401FE1                 jmp     loc_401F59
.text:00401FE6 ; ---------------------------------------------------------------------------
.text:00401FE6
.text:00401FE6 loc_401FE6:                             ; CODE XREF: sub_4019D0+55E↑j
.text:00401FE6                 movzx   edx, byte ptr [eax+1]
.text:00401FEA                 cmp     dl, 3Bh ; ';'
.text:00401FED                 jnz     loc_401F38
.text:00401FF3                 mov     [esp+5Ch+var_2C], 0
.text:00401FFB                 mov     [esp+5Ch+var_30], 0
.text:00402003                 mov     [esp+5Ch+var_34], 0
.text:0040200B                 mov     [esp+5Ch+var_38], 0
.text:00402013                 cmp     byte ptr [ecx], 0
.text:00402016                 jz      loc_40228B
.text:0040201C                 inc     dword ptr [ebp+0]
.text:0040201F                 mov     [ebp+0Ch], ecx
.text:00402022
.text:00402022 loc_402022:                             ; CODE XREF: sub_4019D0+8D4↓j
.text:00402022                 mov     edi, [ebp+0Ch]
.text:00402025                 mov     [ebp+14h], edi
.text:00402028                 movzx   eax, byte ptr [edi]
.text:0040202B                 test    al, al
.text:0040202D                 jz      short loc_40203F
.text:0040202F                 cmp     al, 3Dh ; '='
.text:00402031                 jz      short loc_40203F
.text:00402033
.text:00402033 loc_402033:                             ; CODE XREF: sub_4019D0+66D↓j
.text:00402033                 inc     edi
.text:00402034                 movzx   eax, byte ptr [edi]
.text:00402037                 test    al, al
.text:00402039                 jz      short loc_40203F
.text:0040203B                 cmp     al, 3Dh ; '='
.text:0040203D                 jnz     short loc_402033
.text:0040203F
.text:0040203F loc_40203F:                             ; CODE XREF: sub_4019D0+65D↑j
.text:0040203F                                         ; sub_4019D0+661↑j ...
.text:0040203F                 mov     [esp+5Ch+var_3C], 0
.text:00402047                 mov     esi, [esp+5Ch+arg_C]
.text:0040204B                 mov     eax, [esi]
.text:0040204D                 test    eax, eax
.text:0040204F                 jz      loc_4021D0
.text:00402055                 mov     ecx, eax
.text:00402057
.text:00402057 loc_402057:                             ; CODE XREF: sub_4019D0+6B3↓j
.text:00402057                 mov     ebx, [ebp+14h]
.text:0040205A                 mov     eax, edi
.text:0040205C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040205F                 sub     eax, ebx
.text:00402061                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402065                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402069                 call    strncmp
.text:0040206E                 test    eax, eax
.text:00402070                 jz      loc_402237
.text:00402076
.text:00402076 loc_402076:                             ; CODE XREF: sub_4019D0+88C↓j
.text:00402076                                         ; sub_4019D0+89D↓j
.text:00402076                 inc     [esp+5Ch+var_3C]
.text:0040207A                 add     esi, 10h
.text:0040207D                 mov     edx, [esi]
.text:0040207F                 test    edx, edx
.text:00402081                 mov     ecx, edx
.text:00402083                 jnz     short loc_402057
.text:00402085
.text:00402085 loc_402085:                             ; CODE XREF: sub_4019D0+8B6↓j
.text:00402085                 mov     esi, [esp+5Ch+var_34]
.text:00402089                 test    esi, esi
.text:0040208B                 jz      short loc_402099
.text:0040208D                 mov     ebx, [esp+5Ch+var_30]
.text:00402091                 test    ebx, ebx
.text:00402093                 jz      loc_4021E1
.text:00402099
.text:00402099 loc_402099:                             ; CODE XREF: sub_4019D0+6BB↑j
.text:00402099                 mov     esi, [esp+5Ch+var_2C]
.text:0040209D                 test    esi, esi
.text:0040209F                 jz      loc_4021D0
.text:004020A5                 cmp     byte ptr [edi], 0
.text:004020A8                 jz      loc_402150
.text:004020AE                 mov     ecx, [esp+5Ch+var_2C]
.text:004020B2                 mov     ebx, [ecx+4]
.text:004020B5                 test    ebx, ebx
.text:004020B7                 jz      short loc_4020F8
.text:004020B9                 lea     edx, [edi+1]
.text:004020BC                 mov     [ebp+0Ch], edx
.text:004020BF
.text:004020BF loc_4020BF:                             ; CODE XREF: sub_4019D0+788↓j
.text:004020BF                                         ; sub_4019D0+7A7↓j
.text:004020BF                 mov     edi, [ebp+14h]
.text:004020C2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004020C5                 call    strlen
.text:004020CA                 add     [ebp+14h], eax
.text:004020CD                 mov     eax, [esp+5Ch+arg_10]
.text:004020D1                 test    eax, eax
.text:004020D3                 jz      short loc_4020E0
.text:004020D5                 mov     edx, [esp+5Ch+var_38]
.text:004020D9                 mov     ebp, [esp+5Ch+arg_10]
.text:004020DD                 mov     [ebp+0], edx
.text:004020E0
.text:004020E0 loc_4020E0:                             ; CODE XREF: sub_4019D0+703↑j
.text:004020E0                 mov     eax, [esp+5Ch+var_2C]
.text:004020E4                 mov     ecx, [eax+8]
.text:004020E7                 test    ecx, ecx
.text:004020E9                 jnz     loc_401CAA
.text:004020EF                 mov     ecx, [esp+5Ch+var_2C]
.text:004020F3                 jmp     loc_401CA2
.text:004020F8 ; ---------------------------------------------------------------------------
.text:004020F8
.text:004020F8 loc_4020F8:                             ; CODE XREF: sub_4019D0+6E7↑j
.text:004020F8                 mov     eax, [esp+5Ch+var_14]
.text:004020FC                 test    eax, eax
.text:004020FE                 jnz     short loc_402113
.text:00402100
.text:00402100 loc_402100:                             ; CODE XREF: sub_4019D0+779↓j
.text:00402100                 mov     ecx, [ebp+14h]
.text:00402103                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402106                 call    strlen
.text:0040210B                 add     [ebp+14h], eax
.text:0040210E                 jmp     loc_401D28
.text:00402113 ; ---------------------------------------------------------------------------
.text:00402113
.text:00402113 loc_402113:                             ; CODE XREF: sub_4019D0+72E↑j
.text:00402113                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040211A                 call    ds:libintl_gettext
.text:00402120                 mov     edx, [esp+5Ch+var_2C]
.text:00402124                 mov     ebx, [esp+5Ch+arg_4]
.text:00402128                 mov     edi, [edx]
.text:0040212A                 mov     [esp+5Ch+var_50], edi
.text:0040212E                 mov     edi, ds:_iob
.text:00402134                 mov     esi, [ebx]
.text:00402136                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040213A                 add     edi, 40h ; '@'
.text:0040213D                 mov     [esp+5Ch+MaxCount], esi
.text:00402141                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402144                 call    fprintf
.text:00402149                 jmp     short loc_402100
.text:00402149 ; ---------------------------------------------------------------------------
.text:0040214B                 align 10h
.text:00402150
.text:00402150 loc_402150:                             ; CODE XREF: sub_4019D0+6D8↑j
.text:00402150                 mov     esi, [esp+5Ch+var_2C]
.text:00402154                 cmp     dword ptr [esi+4], 1
.text:00402158                 jnz     loc_4020BF
.text:0040215E                 mov     ecx, [ebp+0]
.text:00402161                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402165                 jge     short loc_40217C
.text:00402167                 mov     eax, [esp+5Ch+arg_4]
.text:0040216B                 lea     ebx, [ecx+1]
.text:0040216E                 mov     [ebp+0], ebx
.text:00402171                 mov     edi, [eax+ecx*4]
.text:00402174                 mov     [ebp+0Ch], edi
.text:00402177                 jmp     loc_4020BF
.text:0040217C ; ---------------------------------------------------------------------------
.text:0040217C
.text:0040217C loc_40217C:                             ; CODE XREF: sub_4019D0+795↑j
.text:0040217C                 mov     edx, [esp+5Ch+var_14]
.text:00402180                 test    edx, edx
.text:00402182                 jnz     short loc_402197
.text:00402184
.text:00402184 loc_402184:                             ; CODE XREF: sub_4019D0+7FE↓j
.text:00402184                 mov     edx, [ebp+14h]
.text:00402187                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040218A                 call    strlen
.text:0040218F                 add     [ebp+14h], eax
.text:00402192                 jmp     loc_401DB9
.text:00402197 ; ---------------------------------------------------------------------------
.text:00402197
.text:00402197 loc_402197:                             ; CODE XREF: sub_4019D0+7B2↑j
.text:00402197                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040219E                 call    ds:libintl_gettext
.text:004021A4                 mov     ecx, [ebp+0]
.text:004021A7                 mov     ebx, [esp+5Ch+arg_4]
.text:004021AB                 mov     edi, [ebx+ecx*4-4]
.text:004021AF                 mov     ecx, ds:_iob
.text:004021B5                 mov     [esp+5Ch+var_50], edi
.text:004021B9                 mov     esi, [ebx]
.text:004021BB                 add     ecx, 40h ; '@'
.text:004021BE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004021C2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004021C5                 mov     [esp+5Ch+MaxCount], esi
.text:004021C9                 call    fprintf
.text:004021CE                 jmp     short loc_402184
.text:004021D0 ; ---------------------------------------------------------------------------
.text:004021D0
.text:004021D0 loc_4021D0:                             ; CODE XREF: sub_4019D0+67F↑j
.text:004021D0                                         ; sub_4019D0+6CF↑j
.text:004021D0                 mov     dword ptr [ebp+14h], 0
.text:004021D7                 mov     eax, 57h ; 'W'
.text:004021DC                 jmp     loc_401B27
.text:004021E1 ; ---------------------------------------------------------------------------
.text:004021E1
.text:004021E1 loc_4021E1:                             ; CODE XREF: sub_4019D0+6C3↑j
.text:004021E1                 mov     edi, [esp+5Ch+var_14]
.text:004021E5                 test    edi, edi
.text:004021E7                 jnz     short loc_4021FF
.text:004021E9
.text:004021E9 loc_4021E9:                             ; CODE XREF: sub_4019D0+865↓j
.text:004021E9                 mov     edx, [ebp+14h]
.text:004021EC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004021EF                 call    strlen
.text:004021F4                 add     [ebp+14h], eax
.text:004021F7                 inc     dword ptr [ebp+0]
.text:004021FA                 jmp     loc_401D28
.text:004021FF ; ---------------------------------------------------------------------------
.text:004021FF
.text:004021FF loc_4021FF:                             ; CODE XREF: sub_4019D0+817↑j
.text:004021FF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402206                 call    ds:libintl_gettext
.text:0040220C                 mov     ecx, [ebp+0]
.text:0040220F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402213                 mov     edi, [ebx+ecx*4]
.text:00402216                 mov     ecx, ds:_iob
.text:0040221C                 mov     [esp+5Ch+var_50], edi
.text:00402220                 mov     esi, [ebx]
.text:00402222                 add     ecx, 40h ; '@'
.text:00402225                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402229                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040222C                 mov     [esp+5Ch+MaxCount], esi
.text:00402230                 call    fprintf
.text:00402235                 jmp     short loc_4021E9
.text:00402237 ; ---------------------------------------------------------------------------
.text:00402237
.text:00402237 loc_402237:                             ; CODE XREF: sub_4019D0+6A0↑j
.text:00402237                 mov     edx, [ebp+14h]
.text:0040223A                 mov     ebx, edi
.text:0040223C                 mov     ecx, [esi]
.text:0040223E                 sub     ebx, edx
.text:00402240                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402243                 call    strlen
.text:00402248                 cmp     ebx, eax
.text:0040224A                 jz      short loc_402272
.text:0040224C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402250                 test    ebx, ebx
.text:00402252                 jz      short loc_402261
.text:00402254                 mov     [esp+5Ch+var_34], 1
.text:0040225C                 jmp     loc_402076
.text:00402261 ; ---------------------------------------------------------------------------
.text:00402261
.text:00402261 loc_402261:                             ; CODE XREF: sub_4019D0+882↑j
.text:00402261                 mov     [esp+5Ch+var_2C], esi
.text:00402265                 mov     ecx, [esp+5Ch+var_3C]
.text:00402269                 mov     [esp+5Ch+var_38], ecx
.text:0040226D                 jmp     loc_402076
.text:00402272 ; ---------------------------------------------------------------------------
.text:00402272
.text:00402272 loc_402272:                             ; CODE XREF: sub_4019D0+87A↑j
.text:00402272                 mov     [esp+5Ch+var_2C], esi
.text:00402276                 mov     eax, [esp+5Ch+var_3C]
.text:0040227A                 mov     [esp+5Ch+var_30], 1
.text:00402282                 mov     [esp+5Ch+var_38], eax
.text:00402286                 jmp     loc_402085
.text:0040228B ; ---------------------------------------------------------------------------
.text:0040228B
.text:0040228B loc_40228B:                             ; CODE XREF: sub_4019D0+646↑j
.text:0040228B                 mov     edx, [ebp+0]
.text:0040228E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402292                 jz      short loc_4022A9
.text:00402294                 mov     ebx, [esp+5Ch+arg_4]
.text:00402298                 lea     esi, [edx+1]
.text:0040229B                 mov     [ebp+0], esi
.text:0040229E                 mov     edi, [ebx+edx*4]
.text:004022A1                 mov     [ebp+0Ch], edi
.text:004022A4                 jmp     loc_402022
.text:004022A9 ; ---------------------------------------------------------------------------
.text:004022A9
.text:004022A9 loc_4022A9:                             ; CODE XREF: sub_4019D0+8C2↑j
.text:004022A9                 mov     edi, [esp+5Ch+var_14]
.text:004022AD                 test    edi, edi
.text:004022AF                 jnz     short loc_4022CC
.text:004022B1
.text:004022B1 loc_4022B1:                             ; CODE XREF: sub_4019D0+92C↓j
.text:004022B1                 mov     [ebp+8], esi
.text:004022B4                 mov     ebp, [esp+5Ch+Str]
.text:004022B8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004022BC                 jz      short loc_4022C8
.text:004022BE                 mov     bl, 3Fh ; '?'
.text:004022C0
.text:004022C0 loc_4022C0:                             ; CODE XREF: sub_4019D0+8FA↓j
.text:004022C0                 movsx   eax, bl
.text:004022C3                 jmp     loc_401B27
.text:004022C8 ; ---------------------------------------------------------------------------
.text:004022C8
.text:004022C8 loc_4022C8:                             ; CODE XREF: sub_4019D0+8EC↑j
.text:004022C8                 mov     bl, 3Ah ; ':'
.text:004022CA                 jmp     short loc_4022C0
.text:004022CC ; ---------------------------------------------------------------------------
.text:004022CC
.text:004022CC loc_4022CC:                             ; CODE XREF: sub_4019D0+8DF↑j
.text:004022CC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004022D3                 call    ds:libintl_gettext
.text:004022D9                 mov     [esp+5Ch+var_50], esi
.text:004022DD                 mov     edx, [esp+5Ch+arg_4]
.text:004022E1                 mov     ecx, ds:_iob
.text:004022E7                 mov     ebx, [edx]
.text:004022E9                 add     ecx, 40h ; '@'
.text:004022EC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022F0                 mov     [esp+5Ch+MaxCount], ebx
.text:004022F4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004022F7                 call    fprintf
.text:004022FC                 jmp     short loc_4022B1
.text:004022FC ; ---------------------------------------------------------------------------
.text:004022FE                 align 10h
.text:00402300
.text:00402300 loc_402300:                             ; CODE XREF: sub_4019D0+54C↑j
.text:00402300                                         ; sub_4019D0+555↑j
.text:00402300                 mov     eax, [esp+5Ch+var_14]
.text:00402304                 test    eax, eax
.text:00402306                 jz      short loc_40233F
.text:00402308                 mov     ebx, [ebp+1Ch]
.text:0040230B                 test    ebx, ebx
.text:0040230D                 jz      short loc_402347
.text:0040230F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402316
.text:00402316 loc_402316:                             ; CODE XREF: sub_4019D0+97E↓j
.text:00402316                 call    ds:libintl_gettext
.text:0040231C                 mov     [esp+5Ch+var_50], esi
.text:00402320                 mov     ebx, [esp+5Ch+arg_4]
.text:00402324                 mov     edx, ds:_iob
.text:0040232A                 mov     esi, [ebx]
.text:0040232C                 add     edx, 40h ; '@'
.text:0040232F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402333                 mov     [esp+5Ch+MaxCount], esi
.text:00402337                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040233A                 call    fprintf
.text:0040233F
.text:0040233F loc_40233F:                             ; CODE XREF: sub_4019D0+936↑j
.text:0040233F                 mov     [ebp+8], edi
.text:00402342                 jmp     loc_401D28
.text:00402347 ; ---------------------------------------------------------------------------
.text:00402347
.text:00402347 loc_402347:                             ; CODE XREF: sub_4019D0+93D↑j
.text:00402347                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040234E                 jmp     short loc_402316
.text:00402350 ; ---------------------------------------------------------------------------
.text:00402350
.text:00402350 loc_402350:                             ; CODE XREF: sub_4019D0+26E↑j
.text:00402350                 mov     edi, [esp+5Ch+var_14]
.text:00402354                 test    edi, edi
.text:00402356                 jnz     short loc_40236E
.text:00402358
.text:00402358 loc_402358:                             ; CODE XREF: sub_4019D0+9D4↓j
.text:00402358                 mov     edx, [ebp+14h]
.text:0040235B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040235E                 call    strlen
.text:00402363                 add     [ebp+14h], eax
.text:00402366                 inc     dword ptr [ebp+0]
.text:00402369                 jmp     loc_401EAE
.text:0040236E ; ---------------------------------------------------------------------------
.text:0040236E
.text:0040236E loc_40236E:                             ; CODE XREF: sub_4019D0+986↑j
.text:0040236E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402375                 call    ds:libintl_gettext
.text:0040237B                 mov     ebx, [ebp+0]
.text:0040237E                 mov     edi, [esp+5Ch+arg_4]
.text:00402382                 mov     ecx, [edi+ebx*4]
.text:00402385                 mov     ebx, ds:_iob
.text:0040238B                 mov     [esp+5Ch+var_50], ecx
.text:0040238F                 mov     esi, [edi]
.text:00402391                 add     ebx, 40h ; '@'
.text:00402394                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402398                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040239B                 mov     [esp+5Ch+MaxCount], esi
.text:0040239F                 call    fprintf
.text:004023A4                 jmp     short loc_402358
.text:004023A6 ; ---------------------------------------------------------------------------
.text:004023A6
.text:004023A6 loc_4023A6:                             ; CODE XREF: sub_4019D0+246↑j
.text:004023A6                 mov     ecx, [ebp+14h]
.text:004023A9                 mov     ebx, edi
.text:004023AB                 mov     edx, [esi]
.text:004023AD                 sub     ebx, ecx
.text:004023AF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004023B2                 call    strlen
.text:004023B7                 cmp     ebx, eax
.text:004023B9                 jz      short loc_402411
.text:004023BB                 mov     ebx, [esp+5Ch+var_18]
.text:004023BF                 test    ebx, ebx
.text:004023C1                 jz      short loc_402400
.text:004023C3                 mov     edx, [esp+5Ch+arg_14]
.text:004023C7                 test    edx, edx
.text:004023C9                 jnz     short loc_4023D7
.text:004023CB                 mov     ecx, [esp+5Ch+var_18]
.text:004023CF                 mov     ebx, [esi+4]
.text:004023D2                 cmp     [ecx+4], ebx
.text:004023D5                 jz      short loc_4023E4
.text:004023D7
.text:004023D7 loc_4023D7:                             ; CODE XREF: sub_4019D0+9F9↑j
.text:004023D7                                         ; sub_4019D0+A1A↓j ...
.text:004023D7                 mov     [esp+5Ch+var_20], 1
.text:004023DF                 jmp     loc_401C1C
.text:004023E4 ; ---------------------------------------------------------------------------
.text:004023E4
.text:004023E4 loc_4023E4:                             ; CODE XREF: sub_4019D0+A05↑j
.text:004023E4                 mov     edx, [esi+8]
.text:004023E7                 cmp     [ecx+8], edx
.text:004023EA                 jnz     short loc_4023D7
.text:004023EC                 mov     ebx, [esi+0Ch]
.text:004023EF                 cmp     [ecx+0Ch], ebx
.text:004023F2                 jnz     short loc_4023D7
.text:004023F4                 jmp     loc_401C1C
.text:004023F4 ; ---------------------------------------------------------------------------
.text:004023F9                 align 10h
.text:00402400
.text:00402400 loc_402400:                             ; CODE XREF: sub_4019D0+9F1↑j
.text:00402400                 mov     [esp+5Ch+var_18], esi
.text:00402404                 mov     eax, [esp+5Ch+var_28]
.text:00402408                 mov     [esp+5Ch+var_24], eax
.text:0040240C                 jmp     loc_401C1C
.text:00402411 ; ---------------------------------------------------------------------------
.text:00402411
.text:00402411 loc_402411:                             ; CODE XREF: sub_4019D0+9E9↑j
.text:00402411                 mov     [esp+5Ch+var_18], esi
.text:00402415                 mov     ecx, [esp+5Ch+var_28]
.text:00402419                 mov     [esp+5Ch+var_1C], 1
.text:00402421                 mov     [esp+5Ch+var_24], ecx
.text:00402425                 jmp     loc_401C30
.text:0040242A ; ---------------------------------------------------------------------------
.text:0040242A
.text:0040242A loc_40242A:                             ; CODE XREF: sub_4019D0+1BF↑j
.text:0040242A                 mov     eax, [esp+5Ch+Str]
.text:0040242E                 movsx   esi, dl
.text:00402431                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402435                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402438                 call    strchr
.text:0040243D                 test    eax, eax
.text:0040243F                 jnz     loc_401EF0
.text:00402445                 jmp     loc_401B95
.text:0040244A ; ---------------------------------------------------------------------------
.text:0040244A
.text:0040244A loc_40244A:                             ; CODE XREF: sub_4019D0+17C↑j
.text:0040244A                 mov     ecx, 1
.text:0040244F                 jmp     loc_401B52
.text:00402454 ; ---------------------------------------------------------------------------
.text:00402454
.text:00402454 loc_402454:                             ; CODE XREF: sub_4019D0+D4↑j
.text:00402454                                         ; sub_4019D0+130↑j
.text:00402454                 mov     eax, [ebp+20h]
.text:00402457                 cmp     eax, [ebp+24h]
.text:0040245A                 jz      loc_401B30
.text:00402460                 mov     [ebp+0], eax
.text:00402463                 jmp     loc_401B30
.text:00402468 ; ---------------------------------------------------------------------------
.text:00402468
.text:00402468 loc_402468:                             ; CODE XREF: sub_4019D0+FE↑j
.text:00402468                 mov     [ebp+20h], eax
.text:0040246B                 jmp     loc_401AF0
.text:00402470 ; ---------------------------------------------------------------------------
.text:00402470
.text:00402470 loc_402470:                             ; CODE XREF: sub_4019D0+CA↑j
.text:00402470                 mov     edx, [ebp+20h]
.text:00402473                 mov     eax, [ebp+24h]
.text:00402476                 cmp     edx, eax
.text:00402478                 jz      short loc_4024F0
.text:0040247A                 cmp     eax, ebx
.text:0040247C                 jz      short loc_402491
.text:0040247E                 mov     [esp+5Ch+Str2], ebp
.text:00402482                 mov     ebx, [esp+5Ch+arg_4]
.text:00402486                 mov     [esp+5Ch+Str1], ebx
.text:00402489                 call    sub_402680
.text:0040248E                 mov     ebx, [ebp+0]
.text:00402491
.text:00402491 loc_402491:                             ; CODE XREF: sub_4019D0+AAC↑j
.text:00402491                                         ; sub_4019D0+B22↓j ...
.text:00402491                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402495                 jge     short loc_4024E0
.text:00402497                 mov     esi, [esp+5Ch+arg_4]
.text:0040249B                 mov     eax, [esi+ebx*4]
.text:0040249E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004024A1                 jz      short loc_4024E8
.text:004024A3                 lea     esi, [esi+0]
.text:004024A9                 lea     edi, [edi+0]
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: sub_4019D0+AFC↓j
.text:004024B0                                         ; sub_4019D0+B1C↓j
.text:004024B0                 lea     eax, [ebx+1]
.text:004024B3                 mov     ebx, eax
.text:004024B5                 mov     [ebp+0], eax
.text:004024B8                 cmp     eax, [esp+5Ch+arg_0]
.text:004024BC                 jge     short loc_4024E0
.text:004024BE                 mov     edi, [esp+5Ch+arg_4]
.text:004024C2                 mov     edx, [edi+eax*4]
.text:004024C5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004024C8                 jz      short loc_4024D0
.text:004024CA
.text:004024CA loc_4024CA:                             ; CODE XREF: sub_4019D0+B04↓j
.text:004024CA                 mov     ebx, eax
.text:004024CC                 jmp     short loc_4024B0
.text:004024CC ; ---------------------------------------------------------------------------
.text:004024CE                 align 10h
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_4019D0+AF8↑j
.text:004024D0                 cmp     byte ptr [edx+1], 0
.text:004024D4                 jz      short loc_4024CA
.text:004024D6                 lea     esi, [esi+0]
.text:004024D9                 lea     edi, [edi+0]
.text:004024E0
.text:004024E0 loc_4024E0:                             ; CODE XREF: sub_4019D0+AC5↑j
.text:004024E0                                         ; sub_4019D0+AEC↑j ...
.text:004024E0                 mov     [ebp+24h], ebx
.text:004024E3                 jmp     loc_401AA0
.text:004024E8 ; ---------------------------------------------------------------------------
.text:004024E8
.text:004024E8 loc_4024E8:                             ; CODE XREF: sub_4019D0+AD1↑j
.text:004024E8                 cmp     byte ptr [eax+1], 0
.text:004024EC                 jz      short loc_4024B0
.text:004024EE                 jmp     short loc_4024E0
.text:004024F0 ; ---------------------------------------------------------------------------
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_4019D0+AA8↑j
.text:004024F0                 cmp     edx, ebx
.text:004024F2                 jz      short loc_402491
.text:004024F4                 mov     [ebp+20h], ebx
.text:004024F7                 jmp     short loc_402491
.text:004024F9 ; ---------------------------------------------------------------------------
.text:004024F9
.text:004024F9 loc_4024F9:                             ; CODE XREF: sub_4019D0+88↑j
.text:004024F9                 mov     dword ptr [ebp+18h], 0
.text:00402500                 mov     esi, [esp+5Ch+Str]
.text:00402504
.text:00402504 loc_402504:                             ; CODE XREF: sub_4019D0+B49↓j
.text:00402504                 inc     esi
.text:00402505                 jmp     loc_401A68
.text:00402505 ; ---------------------------------------------------------------------------
.text:0040250A                 align 10h
.text:00402510
.text:00402510 loc_402510:                             ; CODE XREF: sub_4019D0+80↑j
.text:00402510                 mov     dword ptr [ebp+18h], 2
.text:00402517                 mov     esi, ecx
.text:00402519                 jmp     short loc_402504
.text:00402519 ; ---------------------------------------------------------------------------
.text:0040251B                 align 10h
.text:00402520
.text:00402520 loc_402520:                             ; CODE XREF: sub_4019D0+69↑j
.text:00402520                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402527                 call    getenv
.text:0040252C                 test    eax, eax
.text:0040252E                 jz      loc_401A44
.text:00402534                 jmp     loc_401A3F
.text:00402534 ; ---------------------------------------------------------------------------
.text:00402539                 align 10h
.text:00402540
.text:00402540 loc_402540:                             ; CODE XREF: sub_4019D0+3F↑j
.text:00402540                 mov     dword ptr [ebp+0], 1
.text:00402547                 mov     ebx, 1
.text:0040254C                 jmp     loc_401A20
.text:0040254C sub_4019D0      endp
.text:0040254C
.text:00402551 ; ---------------------------------------------------------------------------
.text:00402551                 jmp     short sub_402560
.text:00402551 ; ---------------------------------------------------------------------------
.text:00402553                 align 10h
.text:00402560
.text:00402560 ; =============== S U B R O U T I N E =======================================
.text:00402560
.text:00402560
.text:00402560 ; int __cdecl sub_402560(int, int, char *, int, int, int, int)
.text:00402560 sub_402560      proc near               ; CODE XREF: .text:00402551↑j
.text:00402560                                         ; sub_402800+3A↓p ...
.text:00402560
.text:00402560 var_2C          = dword ptr -2Ch
.text:00402560 var_28          = dword ptr -28h
.text:00402560 Str             = dword ptr -24h
.text:00402560 var_20          = dword ptr -20h
.text:00402560 var_1C          = dword ptr -1Ch
.text:00402560 var_18          = dword ptr -18h
.text:00402560 var_14          = dword ptr -14h
.text:00402560 var_10          = dword ptr -10h
.text:00402560 arg_0           = dword ptr  4
.text:00402560 arg_4           = dword ptr  8
.text:00402560 arg_8           = dword ptr  0Ch
.text:00402560 arg_C           = dword ptr  10h
.text:00402560 arg_10          = dword ptr  14h
.text:00402560 arg_14          = dword ptr  18h
.text:00402560 arg_18          = dword ptr  1Ch
.text:00402560
.text:00402560                 sub     esp, 2Ch
.text:00402563                 mov     edx, dword_406010
.text:00402569                 mov     [esp+2Ch+var_10], offset dword_407000 ; int
.text:00402571                 mov     ecx, dword_406014
.text:00402577                 mov     ds:dword_407000, edx
.text:0040257D                 mov     edx, [esp+2Ch+arg_18]
.text:00402581                 mov     ds:dword_407004, ecx
.text:00402587                 mov     ecx, [esp+2Ch+arg_14]
.text:0040258B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040258F                 mov     edx, [esp+2Ch+arg_10]
.text:00402593                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402597                 mov     ecx, [esp+2Ch+arg_C]
.text:0040259B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040259F                 mov     edx, [esp+2Ch+arg_8]
.text:004025A3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004025A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004025AB                 mov     [esp+2Ch+Str], edx ; Str
.text:004025AF                 mov     edx, [esp+2Ch+arg_0]
.text:004025B3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004025B7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004025BA                 call    sub_4019D0
.text:004025BF                 mov     ecx, ds:dword_407000
.text:004025C5                 mov     dword_406010, ecx
.text:004025CB                 mov     ecx, ds:dword_40700C
.text:004025D1                 mov     ds:dword_4071B0, ecx
.text:004025D7                 mov     ecx, ds:dword_407008
.text:004025DD                 mov     dword_406018, ecx
.text:004025E3                 add     esp, 2Ch
.text:004025E6                 retn
.text:004025E6 sub_402560      endp
.text:004025E6
.text:004025E6 ; ---------------------------------------------------------------------------
.text:004025E7                 align 10h
.text:004025F0                 sub     esp, 2Ch
.text:004025F3                 mov     edx, dword_406010
.text:004025F9                 mov     dword ptr [esp+1Ch], offset dword_407000
.text:00402601                 mov     ecx, dword_406014
.text:00402607                 mov     dword ptr [esp+18h], 1
.text:0040260F                 mov     ds:dword_407000, edx
.text:00402615                 mov     edx, [esp+38h]
.text:00402619                 mov     ds:dword_407004, ecx
.text:0040261F                 mov     ecx, [esp+34h]
.text:00402623                 mov     [esp+8], edx
.text:00402627                 mov     edx, [esp+30h]
.text:0040262B                 mov     [esp+4], ecx
.text:0040262F                 mov     dword ptr [esp+14h], 0
.text:00402637                 mov     dword ptr [esp+10h], 0
.text:0040263F                 mov     dword ptr [esp+0Ch], 0
.text:00402647                 mov     [esp], edx
.text:0040264A                 call    sub_4019D0
.text:0040264F                 mov     ecx, ds:dword_407000
.text:00402655                 mov     dword_406010, ecx
.text:0040265B                 mov     ecx, ds:dword_40700C
.text:00402661                 mov     ds:dword_4071B0, ecx
.text:00402667                 mov     ecx, ds:dword_407008
.text:0040266D                 mov     dword_406018, ecx
.text:00402673                 add     esp, 2Ch
.text:00402676                 retn
.text:00402676 ; ---------------------------------------------------------------------------
.text:00402677                 align 10h
.text:00402680
.text:00402680 ; =============== S U B R O U T I N E =======================================
.text:00402680
.text:00402680
.text:00402680 sub_402680      proc near               ; CODE XREF: sub_4019D0+113↑p
.text:00402680                                         ; sub_4019D0+AB9↑p
.text:00402680
.text:00402680 var_2C          = dword ptr -2Ch
.text:00402680 var_28          = dword ptr -28h
.text:00402680 var_24          = dword ptr -24h
.text:00402680 var_20          = dword ptr -20h
.text:00402680 var_1C          = dword ptr -1Ch
.text:00402680 var_18          = dword ptr -18h
.text:00402680 var_14          = dword ptr -14h
.text:00402680 arg_0           = dword ptr  4
.text:00402680 arg_4           = dword ptr  8
.text:00402680
.text:00402680                 push    ebp
.text:00402681                 push    edi
.text:00402682                 push    esi
.text:00402683                 push    ebx
.text:00402684                 sub     esp, 1Ch
.text:00402687                 mov     ecx, [esp+2Ch+arg_4]
.text:0040268B                 mov     eax, [esp+2Ch+arg_4]
.text:0040268F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402693                 mov     edx, [ecx+20h]
.text:00402696                 mov     edi, [esp+2Ch+arg_0]
.text:0040269A                 mov     ecx, [ebx]
.text:0040269C                 mov     [esp+2Ch+var_2C], edx
.text:0040269F                 mov     [esp+2Ch+var_14], edx
.text:004026A3                 mov     edx, [eax+24h]
.text:004026A6                 mov     [esp+2Ch+var_28], ecx
.text:004026AA                 mov     [esp+2Ch+var_1C], ecx
.text:004026AE                 cmp     ecx, edx
.text:004026B0                 mov     [esp+2Ch+var_18], edx
.text:004026B4                 jle     short loc_402730
.text:004026B6                 mov     esi, [esp+2Ch+var_2C]
.text:004026B9                 cmp     edx, esi
.text:004026BB                 jle     short loc_402730
.text:004026BD                 lea     esi, [esi+0]
.text:004026C0
.text:004026C0 loc_4026C0:                             ; CODE XREF: sub_402680+A1↓j
.text:004026C0                 mov     ebx, [esp+2Ch+var_1C]
.text:004026C4                 mov     edx, [esp+2Ch+var_18]
.text:004026C8                 mov     ebp, [esp+2Ch+var_18]
.text:004026CC                 mov     eax, [esp+2Ch+var_14]
.text:004026D0                 sub     ebx, edx
.text:004026D2                 mov     [esp+2Ch+var_20], ebx
.text:004026D6                 sub     ebp, eax
.text:004026D8                 cmp     ebx, ebp
.text:004026DA                 jle     short loc_402755
.text:004026DC                 xor     esi, esi
.text:004026DE                 cmp     esi, ebp
.text:004026E0                 jge     short loc_40270D
.text:004026E2                 mov     ecx, [esp+2Ch+var_1C]
.text:004026E6                 sub     ecx, ebp
.text:004026E8                 mov     [esp+2Ch+var_24], ecx
.text:004026EC                 lea     esi, [esi+0]
.text:004026F0
.text:004026F0 loc_4026F0:                             ; CODE XREF: sub_402680+8B↓j
.text:004026F0                 mov     ecx, [esp+2Ch+var_14]
.text:004026F4                 mov     edx, [esp+2Ch+var_24]
.text:004026F8                 add     ecx, esi
.text:004026FA                 add     edx, esi
.text:004026FC                 mov     ebx, [edi+ecx*4]
.text:004026FF                 mov     eax, [edi+edx*4]
.text:00402702                 inc     esi
.text:00402703                 cmp     esi, ebp
.text:00402705                 mov     [edi+ecx*4], eax
.text:00402708                 mov     [edi+edx*4], ebx
.text:0040270B                 jl      short loc_4026F0
.text:0040270D
.text:0040270D loc_40270D:                             ; CODE XREF: sub_402680+60↑j
.text:0040270D                 sub     [esp+2Ch+var_1C], ebp
.text:00402711
.text:00402711 loc_402711:                             ; CODE XREF: sub_402680+107↓j
.text:00402711                 mov     eax, [esp+2Ch+var_18]
.text:00402715                 cmp     [esp+2Ch+var_1C], eax
.text:00402719                 jle     short loc_402730
.text:0040271B                 mov     ebp, [esp+2Ch+var_14]
.text:0040271F                 cmp     eax, ebp
.text:00402721                 jg      short loc_4026C0
.text:00402723                 lea     esi, [esi+0]
.text:00402729                 lea     edi, [edi+0]
.text:00402730
.text:00402730 loc_402730:                             ; CODE XREF: sub_402680+34↑j
.text:00402730                                         ; sub_402680+3B↑j ...
.text:00402730                 mov     esi, [esp+2Ch+var_28]
.text:00402734                 mov     ecx, [esp+2Ch+var_18]
.text:00402738                 mov     eax, [esp+2Ch+var_2C]
.text:0040273B                 mov     edi, [esp+2Ch+arg_4]
.text:0040273F                 mov     edx, [esp+2Ch+var_28]
.text:00402743                 sub     esi, ecx
.text:00402745                 add     esi, eax
.text:00402747                 mov     [edi+20h], esi
.text:0040274A                 mov     [edi+24h], edx
.text:0040274D                 add     esp, 1Ch
.text:00402750                 pop     ebx
.text:00402751                 pop     esi
.text:00402752                 pop     edi
.text:00402753                 pop     ebp
.text:00402754                 retn
.text:00402755 ; ---------------------------------------------------------------------------
.text:00402755
.text:00402755 loc_402755:                             ; CODE XREF: sub_402680+5A↑j
.text:00402755                 xor     esi, esi
.text:00402757                 cmp     esi, [esp+2Ch+var_20]
.text:0040275B                 jge     short loc_40277F
.text:0040275D                 lea     esi, [esi+0]
.text:00402760
.text:00402760 loc_402760:                             ; CODE XREF: sub_402680+FD↓j
.text:00402760                 mov     ebx, [esp+2Ch+var_14]
.text:00402764                 mov     ebp, [esp+2Ch+var_18]
.text:00402768                 add     ebx, esi
.text:0040276A                 add     ebp, esi
.text:0040276C                 mov     edx, [edi+ebx*4]
.text:0040276F                 inc     esi
.text:00402770                 cmp     esi, [esp+2Ch+var_20]
.text:00402774                 mov     ecx, [edi+ebp*4]
.text:00402777                 mov     [edi+ebx*4], ecx
.text:0040277A                 mov     [edi+ebp*4], edx
.text:0040277D                 jl      short loc_402760
.text:0040277F
.text:0040277F loc_40277F:                             ; CODE XREF: sub_402680+DB↑j
.text:0040277F                 mov     esi, [esp+2Ch+var_20]
.text:00402783                 add     [esp+2Ch+var_14], esi
.text:00402787                 jmp     short loc_402711
.text:00402787 sub_402680      endp
.text:00402787
.text:00402787 ; ---------------------------------------------------------------------------
.text:00402789                 align 20h
.text:004027A0                 sub     esp, 0Ch
.text:004027A3                 mov     edx, [esp+14h]
.text:004027A7                 mov     dword ptr [esp+4], 5
.text:004027AF                 mov     [esp+8], edx
.text:004027B3                 mov     edx, [esp+10h]
.text:004027B7                 mov     [esp], edx
.text:004027BA                 call    sub_403930
.text:004027BF                 add     esp, 0Ch
.text:004027C2                 retn
.text:004027C2 ; ---------------------------------------------------------------------------
.text:004027C3                 align 10h
.text:004027D0
.text:004027D0 ; =============== S U B R O U T I N E =======================================
.text:004027D0
.text:004027D0
.text:004027D0 ; int __cdecl sub_4027D0(char *)
.text:004027D0 sub_4027D0      proc near               ; CODE XREF: sub_401370+E6↑p
.text:004027D0                                         ; sub_401370+172↑p
.text:004027D0
.text:004027D0 var_C           = dword ptr -0Ch
.text:004027D0 var_8           = dword ptr -8
.text:004027D0 var_4           = dword ptr -4
.text:004027D0 arg_0           = dword ptr  4
.text:004027D0
.text:004027D0                 sub     esp, 0Ch
.text:004027D3                 mov     edx, [esp+0Ch+arg_0]
.text:004027D7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004027DF                 mov     [esp+0Ch+var_C], 0 ; int
.text:004027E6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004027EA                 call    sub_403930
.text:004027EF                 add     esp, 0Ch
.text:004027F2                 retn
.text:004027F2 sub_4027D0      endp
.text:004027F2
.text:004027F2 ; ---------------------------------------------------------------------------
.text:004027F3                 align 10h
.text:00402800
.text:00402800 ; =============== S U B R O U T I N E =======================================
.text:00402800
.text:00402800
.text:00402800 ; int __cdecl sub_402800(int, int, char *, int, int)
.text:00402800 sub_402800      proc near               ; CODE XREF: sub_401370+C2↑p
.text:00402800                                         ; sub_4029A0+58↓p
.text:00402800
.text:00402800 var_1C          = dword ptr -1Ch
.text:00402800 var_18          = dword ptr -18h
.text:00402800 var_14          = dword ptr -14h
.text:00402800 var_10          = dword ptr -10h
.text:00402800 var_C           = dword ptr -0Ch
.text:00402800 var_8           = dword ptr -8
.text:00402800 var_4           = dword ptr -4
.text:00402800 arg_0           = dword ptr  4
.text:00402800 arg_4           = dword ptr  8
.text:00402800 arg_8           = dword ptr  0Ch
.text:00402800 arg_C           = dword ptr  10h
.text:00402800 arg_10          = dword ptr  14h
.text:00402800
.text:00402800                 sub     esp, 1Ch
.text:00402803                 mov     edx, [esp+1Ch+arg_C]
.text:00402807                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040280F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402813                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040281B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040281F                 mov     edx, [esp+1Ch+arg_4]
.text:00402823                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402827                 mov     ecx, [esp+1Ch+arg_8]
.text:0040282B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040282F                 mov     edx, [esp+1Ch+arg_0]
.text:00402833                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402837                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040283A                 call    sub_402560
.text:0040283F                 add     esp, 1Ch
.text:00402842                 retn
.text:00402842 sub_402800      endp
.text:00402842
.text:00402842 ; ---------------------------------------------------------------------------
.text:00402843                 align 10h
.text:00402850                 sub     esp, 2Ch
.text:00402853                 mov     edx, [esp+44h]
.text:00402857                 mov     dword ptr [esp+18h], 0
.text:0040285F                 mov     ecx, [esp+40h]
.text:00402863                 mov     dword ptr [esp+14h], 0
.text:0040286B                 mov     [esp+1Ch], edx
.text:0040286F                 mov     edx, [esp+3Ch]
.text:00402873                 mov     [esp+10h], ecx
.text:00402877                 mov     ecx, [esp+38h]
.text:0040287B                 mov     [esp+0Ch], edx
.text:0040287F                 mov     edx, [esp+34h]
.text:00402883                 mov     [esp+8], ecx
.text:00402887                 mov     [esp+4], edx
.text:0040288B                 mov     edx, [esp+30h]
.text:0040288F                 mov     [esp], edx
.text:00402892                 call    sub_4019D0
.text:00402897                 add     esp, 2Ch
.text:0040289A                 retn
.text:0040289A ; ---------------------------------------------------------------------------
.text:0040289B                 align 10h
.text:004028A0                 sub     esp, 1Ch
.text:004028A3                 mov     edx, [esp+2Ch]
.text:004028A7                 mov     dword ptr [esp+18h], 0
.text:004028AF                 mov     ecx, [esp+30h]
.text:004028B3                 mov     dword ptr [esp+14h], 1
.text:004028BB                 mov     [esp+0Ch], edx
.text:004028BF                 mov     edx, [esp+24h]
.text:004028C3                 mov     [esp+10h], ecx
.text:004028C7                 mov     ecx, [esp+28h]
.text:004028CB                 mov     [esp+4], edx
.text:004028CF                 mov     edx, [esp+20h]
.text:004028D3                 mov     [esp+8], ecx
.text:004028D7                 mov     [esp], edx
.text:004028DA                 call    sub_402560
.text:004028DF                 add     esp, 1Ch
.text:004028E2                 retn
.text:004028E2 ; ---------------------------------------------------------------------------
.text:004028E3                 align 10h
.text:004028F0                 sub     esp, 2Ch
.text:004028F3                 mov     edx, [esp+44h]
.text:004028F7                 mov     dword ptr [esp+18h], 0
.text:004028FF                 mov     ecx, [esp+40h]
.text:00402903                 mov     dword ptr [esp+14h], 1
.text:0040290B                 mov     [esp+1Ch], edx
.text:0040290F                 mov     edx, [esp+3Ch]
.text:00402913                 mov     [esp+10h], ecx
.text:00402917                 mov     ecx, [esp+38h]
.text:0040291B                 mov     [esp+0Ch], edx
.text:0040291F                 mov     edx, [esp+34h]
.text:00402923                 mov     [esp+8], ecx
.text:00402927                 mov     [esp+4], edx
.text:0040292B                 mov     edx, [esp+30h]
.text:0040292F                 mov     [esp], edx
.text:00402932                 call    sub_4019D0
.text:00402937                 add     esp, 2Ch
.text:0040293A                 retn
.text:0040293A ; ---------------------------------------------------------------------------
.text:0040293B                 align 10h
.text:00402940 aHelp           db 'help',0             ; DATA XREF: .text:off_402960↓o
.text:00402945 aVersion        db 'version',0          ; DATA XREF: .text:00402970↓o
.text:0040294D                 align 20h
.text:00402960 off_402960      dd offset aHelp         ; DATA XREF: sub_4029A0+3D↓o
.text:00402960                                         ; "help"
.text:00402964                 dd 2 dup(0)
.text:0040296C                 dd 68h
.text:00402970                 dd offset aVersion      ; "version"
.text:00402974                 dd 2 dup(0)
.text:0040297C                 dd 76h, 4 dup(0)
.text:00402990 ; ---------------------------------------------------------------------------
.text:00402990
.text:00402990 loc_402990:                             ; DATA XREF: sub_4029A0+45↓o
.text:00402990                 sub     eax, [eax]
.text:00402992                 lea     esi, [esi+0]
.text:00402999                 lea     edi, [edi+0]
.text:004029A0
.text:004029A0 ; =============== S U B R O U T I N E =======================================
.text:004029A0
.text:004029A0
.text:004029A0 ; int __cdecl sub_4029A0(int, int, FILE *, int, int, int, char)
.text:004029A0 sub_4029A0      proc near               ; CODE XREF: sub_401370+9E↑p
.text:004029A0
.text:004029A0 Code            = dword ptr -1Ch
.text:004029A0 var_18          = dword ptr -18h
.text:004029A0 var_14          = dword ptr -14h
.text:004029A0 var_10          = dword ptr -10h
.text:004029A0 var_C           = dword ptr -0Ch
.text:004029A0 var_4           = dword ptr -4
.text:004029A0 arg_0           = dword ptr  4
.text:004029A0 arg_4           = dword ptr  8
.text:004029A0 arg_8           = dword ptr  0Ch
.text:004029A0 arg_C           = dword ptr  10h
.text:004029A0 arg_10          = dword ptr  14h
.text:004029A0 arg_14          = dword ptr  18h
.text:004029A0 arg_18          = byte ptr  1Ch
.text:004029A0
.text:004029A0                 sub     esp, 1Ch
.text:004029A3                 xor     eax, eax
.text:004029A5                 cmp     [esp+1Ch+arg_0], 2
.text:004029AA                 mov     [esp+1Ch+var_4], ebx
.text:004029AE                 mov     ebx, dword_406014
.text:004029B4                 mov     dword_406014, eax
.text:004029B9                 jz      short loc_4029D1
.text:004029BB
.text:004029BB loc_4029BB:                             ; CODE XREF: sub_4029A0+60↓j
.text:004029BB                                         ; sub_4029A0+6A↓j
.text:004029BB                 mov     dword_406014, ebx
.text:004029C1                 xor     edx, edx
.text:004029C3                 mov     ebx, [esp+1Ch+var_4]
.text:004029C7                 mov     dword_406010, edx
.text:004029CD                 add     esp, 1Ch
.text:004029D0                 retn
.text:004029D1 ; ---------------------------------------------------------------------------
.text:004029D1
.text:004029D1 loc_4029D1:                             ; CODE XREF: sub_4029A0+19↑j
.text:004029D1                 mov     [esp+1Ch+var_C], 0 ; int
.text:004029D9                 mov     edx, [esp+1Ch+arg_4]
.text:004029DD                 mov     [esp+1Ch+var_10], offset off_402960 ; int
.text:004029E5                 mov     [esp+1Ch+var_14], offset loc_402990 ; char *
.text:004029ED                 mov     [esp+1Ch+var_18], edx ; int
.text:004029F1                 mov     [esp+1Ch+Code], 2 ; int
.text:004029F8                 call    sub_402800
.text:004029FD                 cmp     eax, 0FFFFFFFFh
.text:00402A00                 jz      short loc_4029BB
.text:00402A02                 cmp     eax, 68h ; 'h'
.text:00402A05                 jz      short loc_402A0E
.text:00402A07                 cmp     eax, 76h ; 'v'
.text:00402A0A                 jnz     short loc_4029BB
.text:00402A0C                 jmp     short loc_402A19
.text:00402A0E ; ---------------------------------------------------------------------------
.text:00402A0E
.text:00402A0E loc_402A0E:                             ; CODE XREF: sub_4029A0+65↑j
.text:00402A0E                 mov     [esp+1Ch+Code], 0
.text:00402A15                 call    [esp+1Ch+arg_14]
.text:00402A19
.text:00402A19 loc_402A19:                             ; CODE XREF: sub_4029A0+6C↑j
.text:00402A19                 mov     ecx, [esp+1Ch+arg_10]
.text:00402A1D                 lea     ebx, [esp+1Ch+arg_18]
.text:00402A21                 mov     edx, [esp+1Ch+arg_C]
.text:00402A25                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00402A29                 mov     ebx, [esp+1Ch+arg_8]
.text:00402A2D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00402A31                 mov     ecx, ds:_iob
.text:00402A37                 mov     [esp+1Ch+var_14], edx ; int
.text:00402A3B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:00402A3F                 add     ecx, 20h ; ' '
.text:00402A42                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00402A45                 call    sub_404200
.text:00402A4A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402A51                 call    exit
.text:00402A51 sub_4029A0      endp
.text:00402A51
.text:00402A51 ; ---------------------------------------------------------------------------
.text:00402A56                 align 10h
.text:00402A60                 mov     edx, [esp+4]
.text:00402A64                 mov     ds:dword_407030, edx
.text:00402A6A                 retn
.text:00402A6A ; ---------------------------------------------------------------------------
.text:00402A6B aWriteError     db 'write error',0      ; DATA XREF: sub_402A90:loc_402AD9↓o
.text:00402A77 ; const char aSS[]
.text:00402A77 aSS             db '%s: %s',0           ; DATA XREF: sub_402A90+77↓o
.text:00402A7E ; const char aS_2[]
.text:00402A7E aS_2            db '%s',0               ; DATA XREF: sub_402A90+A0↓o
.text:00402A81 ; ---------------------------------------------------------------------------
.text:00402A81                 jmp     short sub_402A90
.text:00402A81 ; ---------------------------------------------------------------------------
.text:00402A83                 align 10h
.text:00402A90
.text:00402A90 ; =============== S U B R O U T I N E =======================================
.text:00402A90
.text:00402A90
.text:00402A90 ; void __cdecl sub_402A90()
.text:00402A90 sub_402A90      proc near               ; CODE XREF: .text:00402A81↑j
.text:00402A90                                         ; DATA XREF: sub_401370+5B↑o
.text:00402A90
.text:00402A90 Stream          = dword ptr -2Ch
.text:00402A90 ErrorMessage    = dword ptr -28h
.text:00402A90 var_24          = dword ptr -24h
.text:00402A90 var_20          = byte ptr -20h
.text:00402A90 var_1C          = dword ptr -1Ch
.text:00402A90 var_9           = byte ptr -9
.text:00402A90
.text:00402A90                 push    esi
.text:00402A91                 push    ebx
.text:00402A92                 sub     esp, 24h
.text:00402A95                 mov     edx, ds:_iob
.text:00402A9B                 mov     ecx, [edx+2Ch]
.text:00402A9E                 lea     esi, [edx+20h]
.text:00402AA1                 shr     ecx, 5
.text:00402AA4                 mov     bl, cl
.text:00402AA6                 mov     ecx, [edx+20h]
.text:00402AA9                 and     bl, 1
.text:00402AAC                 cmp     ecx, [esi+8]
.text:00402AAF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402AB2                 setz    [esp+2Ch+var_9]
.text:00402AB7                 call    fclose
.text:00402ABC                 test    eax, eax
.text:00402ABE                 setnz   al
.text:00402AC1                 test    bl, bl
.text:00402AC3                 jnz     loc_402B53
.text:00402AC9                 test    al, al
.text:00402ACB                 jz      short loc_402B20
.text:00402ACD
.text:00402ACD loc_402ACD:                             ; CODE XREF: sub_402A90+CD↓j
.text:00402ACD                 call    _errno
.text:00402AD2                 mov     esi, [eax]
.text:00402AD4
.text:00402AD4 loc_402AD4:                             ; CODE XREF: sub_402A90+C7↓j
.text:00402AD4                 cmp     esi, 9
.text:00402AD7                 jz      short loc_402B46
.text:00402AD9
.text:00402AD9 loc_402AD9:                             ; CODE XREF: sub_402A90+B8↓j
.text:00402AD9                                         ; sub_402A90+C1↓j
.text:00402AD9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402AE0                 call    ds:libintl_gettext
.text:00402AE6                 mov     ebx, eax
.text:00402AE8                 mov     eax, ds:dword_407030
.text:00402AED                 test    eax, eax
.text:00402AEF                 jz      short loc_402B26
.text:00402AF1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402AF4                 call    sub_403CA0
.text:00402AF9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402AFD                 mov     edx, Code
.text:00402B03                 mov     [esp+2Ch+var_1C], ebx
.text:00402B07                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:00402B0F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402B13                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402B16                 call    sub_404790
.text:00402B1B                 nop
.text:00402B1C                 lea     esi, [esi+0]
.text:00402B20
.text:00402B20 loc_402B20:                             ; CODE XREF: sub_402A90+3B↑j
.text:00402B20                                         ; sub_402A90+B4↓j ...
.text:00402B20                 add     esp, 24h
.text:00402B23                 pop     ebx
.text:00402B24                 pop     esi
.text:00402B25                 retn
.text:00402B26 ; ---------------------------------------------------------------------------
.text:00402B26
.text:00402B26 loc_402B26:                             ; CODE XREF: sub_402A90+5F↑j
.text:00402B26                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402B2A                 mov     ebx, Code
.text:00402B30                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00402B38                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402B3C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402B3F                 call    sub_404790
.text:00402B44                 jmp     short loc_402B20
.text:00402B46 ; ---------------------------------------------------------------------------
.text:00402B46
.text:00402B46 loc_402B46:                             ; CODE XREF: sub_402A90+47↑j
.text:00402B46                 test    bl, bl
.text:00402B48                 jnz     short loc_402AD9
.text:00402B4A                 cmp     [esp+2Ch+var_9], 0
.text:00402B4F                 jnz     short loc_402B20
.text:00402B51                 jmp     short loc_402AD9
.text:00402B53 ; ---------------------------------------------------------------------------
.text:00402B53
.text:00402B53 loc_402B53:                             ; CODE XREF: sub_402A90+33↑j
.text:00402B53                 xor     esi, esi
.text:00402B55                 test    al, al
.text:00402B57                 jz      loc_402AD4
.text:00402B5D                 jmp     loc_402ACD
.text:00402B5D sub_402A90      endp
.text:00402B5D
.text:00402B5D ; ---------------------------------------------------------------------------
.text:00402B62                 align 10h
.text:00402B70 aLiteral        db 'literal',0          ; DATA XREF: .text:00402BB0↓o
.text:00402B78 aShell          db 'shell',0            ; DATA XREF: .text:00402BB4↓o
.text:00402B7E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00402BB8↓o
.text:00402B8B aC              db 'c',0                ; DATA XREF: .text:00402BBC↓o
.text:00402B8D aEscape         db 'escape',0           ; DATA XREF: .text:00402BC0↓o
.text:00402B94 aLocale         db 'locale',0           ; DATA XREF: .text:00402BC4↓o
.text:00402B9B aClocale        db 'clocale',0          ; DATA XREF: .text:00402BC8↓o
.text:00402BA3                 align 10h
.text:00402BB0                 dd offset aLiteral      ; "literal"
.text:00402BB4                 dd offset aShell        ; "shell"
.text:00402BB8                 dd offset aShellAlways  ; "shell-always"
.text:00402BBC                 dd offset aC            ; "c"
.text:00402BC0                 dd offset aEscape       ; "escape"
.text:00402BC4                 dd offset aLocale       ; "locale"
.text:00402BC8                 dd offset aClocale      ; "clocale"
.text:00402BCC                 dd 2 dup(0)
.text:00402BD4                 dd 1, 2, 3, 4, 5, 6
.text:00402BEC asc_402BEC:                             ; DATA XREF: sub_402C00+7E↓o
.text:00402BEC                                         ; sub_402C00+A39↓o ...
.text:00402BEC                 text "UTF-16LE", '"',27h,'`'
.text:00402BF2                 align 10h
.text:00402C00
.text:00402C00 ; =============== S U B R O U T I N E =======================================
.text:00402C00
.text:00402C00
.text:00402C00 ; int __cdecl sub_402C00(int, int, char *Str, int, int, int)
.text:00402C00 sub_402C00      proc near               ; CODE XREF: sub_402C00+43A↓p
.text:00402C00                                         ; .text:004037C3↓p ...
.text:00402C00
.text:00402C00 C               = dword ptr -4Ch
.text:00402C00 Type            = dword ptr -48h
.text:00402C00 SizeInBytes     = dword ptr -44h
.text:00402C00 State           = dword ptr -40h
.text:00402C00 var_3C          = dword ptr -3Ch
.text:00402C00 var_38          = dword ptr -38h
.text:00402C00 var_34          = dword ptr -34h
.text:00402C00 var_30          = dword ptr -30h
.text:00402C00 var_29          = byte ptr -29h
.text:00402C00 var_28          = dword ptr -28h
.text:00402C00 var_22          = byte ptr -22h
.text:00402C00 var_21          = byte ptr -21h
.text:00402C00 var_20          = dword ptr -20h
.text:00402C00 var_1C          = dword ptr -1Ch
.text:00402C00 var_18          = mbstate_t ptr -18h
.text:00402C00 arg_0           = dword ptr  4
.text:00402C00 arg_4           = dword ptr  8
.text:00402C00 Str             = dword ptr  0Ch
.text:00402C00 arg_C           = dword ptr  10h
.text:00402C00 arg_10          = dword ptr  14h
.text:00402C00 arg_14          = dword ptr  18h
.text:00402C00
.text:00402C00                 push    ebp
.text:00402C01                 push    edi
.text:00402C02                 push    esi
.text:00402C03                 push    ebx
.text:00402C04                 sub     esp, 3Ch
.text:00402C07                 mov     edx, ds:__mb_cur_max
.text:00402C0D                 mov     [esp+4Ch+var_34], 0
.text:00402C15                 mov     [esp+4Ch+var_1C], 0
.text:00402C1D                 cmp     dword ptr [edx], 1
.text:00402C20                 mov     [esp+4Ch+var_20], 0
.text:00402C28                 mov     [esp+4Ch+var_21], 0
.text:00402C2D                 setz    [esp+4Ch+var_22]
.text:00402C32                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00402C37                 ja      short def_402C3D ; jumptable 00402C3D default case, cases 0,1
.text:00402C39                 mov     edx, [esp+4Ch+arg_10]
.text:00402C3D                 jmp     ds:jpt_402C3D[edx*4] ; switch jump
.text:00402C3D ; ---------------------------------------------------------------------------
.text:00402C44 jpt_402C3D      dd offset def_402C3D    ; DATA XREF: sub_402C00+3D↑r
.text:00402C44                 dd offset def_402C3D    ; jump table for switch statement
.text:00402C44                 dd offset loc_403585
.text:00402C44                 dd offset loc_402C60
.text:00402C44                 dd offset loc_4035AB
.text:00402C44                 dd offset loc_4035B5
.text:00402C44                 dd offset loc_4035B5
.text:00402C60 ; ---------------------------------------------------------------------------
.text:00402C60
.text:00402C60 loc_402C60:                             ; CODE XREF: sub_402C00+3D↑j
.text:00402C60                                         ; DATA XREF: sub_402C00:jpt_402C3D↑o
.text:00402C60                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00402C3D case 3
.text:00402C64                 cmp     [esp+4Ch+var_34], eax
.text:00402C68                 jnb     short loc_402C71
.text:00402C6A                 mov     ebx, [esp+4Ch+arg_0]
.text:00402C6E                 mov     byte ptr [ebx], 22h ; '"'
.text:00402C71
.text:00402C71 loc_402C71:                             ; CODE XREF: sub_402C00+68↑j
.text:00402C71                 mov     [esp+4Ch+var_34], 1
.text:00402C79                 mov     [esp+4Ch+var_21], 1
.text:00402C7E                 mov     [esp+4Ch+var_1C], offset asc_402BEC ; "\"'`"
.text:00402C86
.text:00402C86 loc_402C86:                             ; CODE XREF: sub_402C00+9A6↓j
.text:00402C86                 mov     [esp+4Ch+var_20], 1
.text:00402C8E
.text:00402C8E def_402C3D:                             ; CODE XREF: sub_402C00+37↑j
.text:00402C8E                                         ; sub_402C00+3D↑j ...
.text:00402C8E                 xor     ebp, ebp        ; jumptable 00402C3D default case, cases 0,1
.text:00402C90
.text:00402C90 loc_402C90:                             ; CODE XREF: sub_402C00+3DB↓j
.text:00402C90                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00402C95                 jz      loc_403577
.text:00402C9B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00402C9F
.text:00402C9F loc_402C9F:                             ; CODE XREF: sub_402C00+980↓j
.text:00402C9F                 jz      loc_40350E
.text:00402CA5                 cmp     [esp+4Ch+var_21], 0
.text:00402CAA                 jz      short loc_402CF0
.text:00402CAC                 mov     esi, [esp+4Ch+var_20]
.text:00402CB0                 test    esi, esi
.text:00402CB2                 jz      short loc_402CF0
.text:00402CB4                 mov     ecx, [esp+4Ch+var_20]
.text:00402CB8                 lea     edi, [ecx+ebp]
.text:00402CBB                 cmp     edi, [esp+4Ch+arg_C]
.text:00402CBF                 ja      short loc_402CF0
.text:00402CC1                 cld
.text:00402CC2                 mov     ebx, [esp+4Ch+Str]
.text:00402CC6                 mov     edi, [esp+4Ch+var_1C]
.text:00402CCA                 add     ebx, ebp
.text:00402CCC                 mov     esi, ebx
.text:00402CCE                 cmp     ecx, ecx
.text:00402CD0                 repe cmpsb
.text:00402CD2                 jnz     short loc_402CF0
.text:00402CD4                 mov     edx, [esp+4Ch+arg_4]
.text:00402CD8                 cmp     [esp+4Ch+var_34], edx
.text:00402CDC                 jnb     short loc_402CEA
.text:00402CDE                 mov     ecx, [esp+4Ch+arg_0]
.text:00402CE2                 mov     eax, [esp+4Ch+var_34]
.text:00402CE6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00402CEA
.text:00402CEA loc_402CEA:                             ; CODE XREF: sub_402C00+DC↑j
.text:00402CEA                 inc     [esp+4Ch+var_34]
.text:00402CEE                 mov     esi, esi
.text:00402CF0
.text:00402CF0 loc_402CF0:                             ; CODE XREF: sub_402C00+AA↑j
.text:00402CF0                                         ; sub_402C00+B2↑j ...
.text:00402CF0                 mov     edi, [esp+4Ch+Str]
.text:00402CF4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00402CF9                 movzx   eax, bl
.text:00402CFC                 cmp     eax, 7Eh        ; switch 127 cases
.text:00402CFF                 ja      def_402D05      ; jumptable 00402D05 default case, cases 1-6,14-31,64
.text:00402D05                 jmp     ds:jpt_402D05[eax*4] ; switch jump
.text:00402D05 ; ---------------------------------------------------------------------------
.text:00402D0C jpt_402D05      dd offset loc_402F08, offset def_402D05, offset def_402D05
.text:00402D0C                                         ; DATA XREF: sub_402C00+105↑r
.text:00402D0C                 dd offset def_402D05, offset def_402D05, offset def_402D05 ; jump table for switch statement
.text:00402D0C                 dd offset def_402D05, offset loc_402FE0, offset loc_402FFE
.text:00402D0C                 dd offset loc_403002, offset loc_403047, offset loc_40304B
.text:00402D0C                 dd offset loc_40304F, offset loc_403053, offset def_402D05
.text:00402D0C                 dd offset def_402D05, offset def_402D05, offset def_402D05
.text:00402D0C                 dd offset def_402D05, offset def_402D05, offset def_402D05
.text:00402D0C                 dd offset def_402D05, offset def_402D05, offset def_402D05
.text:00402D0C                 dd offset def_402D05, offset def_402D05, offset def_402D05
.text:00402D0C                 dd offset def_402D05, offset def_402D05, offset def_402D05
.text:00402D0C                 dd offset def_402D05, offset def_402D05, offset loc_4034D8
.text:00402D0C                 dd offset loc_4034D8, offset loc_4034D8, offset loc_4034FA
.text:00402D0C                 dd offset loc_4034D8, offset def_403102, offset loc_4034D8
.text:00402D0C                 dd offset loc_403057, offset loc_4034D8, offset loc_4034D8
.text:00402D0C                 dd offset loc_4034D8, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset loc_4034D8
.text:00402D0C                 dd offset loc_4034D8, offset loc_4034D8, offset loc_4034D8
.text:00402D0C                 dd offset loc_4030BC, offset def_402D05, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset loc_4034D8, offset loc_4034D1
.text:00402D0C                 dd offset def_403102, offset loc_4034D8, offset def_403102
.text:00402D0C                 dd offset loc_4034D8, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset def_403102, offset def_403102, offset def_403102
.text:00402D0C                 dd offset loc_4034E8, offset loc_4034D8, offset loc_4034E8
.text:00402D0C                 dd offset loc_4034FA
.text:00402F08 ; ---------------------------------------------------------------------------
.text:00402F08
.text:00402F08 loc_402F08:                             ; CODE XREF: sub_402C00+105↑j
.text:00402F08                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:00402F08                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402D05 case 0
.text:00402F0D                 lea     eax, [ebp+1]
.text:00402F10                 jz      loc_402FC0
.text:00402F16                 mov     esi, [esp+4Ch+arg_4]
.text:00402F1A                 cmp     [esp+4Ch+var_34], esi
.text:00402F1E                 jnb     short loc_402F2C
.text:00402F20                 mov     eax, [esp+4Ch+arg_0]
.text:00402F24                 mov     ebx, [esp+4Ch+var_34]
.text:00402F28                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00402F2C
.text:00402F2C loc_402F2C:                             ; CODE XREF: sub_402C00+31E↑j
.text:00402F2C                 inc     [esp+4Ch+var_34]
.text:00402F30                 mov     edx, [esp+4Ch+arg_4]
.text:00402F34                 cmp     [esp+4Ch+var_34], edx
.text:00402F38                 jnb     short loc_402F46
.text:00402F3A                 mov     edi, [esp+4Ch+arg_0]
.text:00402F3E                 mov     ecx, [esp+4Ch+var_34]
.text:00402F42                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00402F46
.text:00402F46 loc_402F46:                             ; CODE XREF: sub_402C00+338↑j
.text:00402F46                 inc     [esp+4Ch+var_34]
.text:00402F4A                 mov     esi, [esp+4Ch+arg_4]
.text:00402F4E                 cmp     [esp+4Ch+var_34], esi
.text:00402F52                 jnb     short loc_402F60
.text:00402F54                 mov     ebx, [esp+4Ch+arg_0]
.text:00402F58                 mov     eax, [esp+4Ch+var_34]
.text:00402F5C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00402F60
.text:00402F60 loc_402F60:                             ; CODE XREF: sub_402C00+352↑j
.text:00402F60                 inc     [esp+4Ch+var_34]
.text:00402F64                 mov     bl, 30h ; '0'
.text:00402F66                 lea     esi, [esi+0]
.text:00402F69                 lea     edi, [edi+0]
.text:00402F70
.text:00402F70 def_403102:                             ; CODE XREF: sub_402C00+105↑j
.text:00402F70                                         ; sub_402C00+463↓j ...
.text:00402F70                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402D05 cases 37,43-58,65-90,93,95,97-122
.text:00402F70                                         ; jumptable 00403102 default case, cases 34-38,42-44,46,48-59
.text:00402F75                 lea     eax, [ebp+1]
.text:00402F78                 jz      short loc_402FC0
.text:00402F7A                 mov     cl, bl
.text:00402F7C                 mov     edi, [esp+4Ch+arg_14]
.text:00402F80                 mov     esi, 1
.text:00402F85                 shr     cl, 5
.text:00402F88                 movzx   edx, cl
.text:00402F8B                 mov     ecx, ebx
.text:00402F8D                 and     ecx, 1Fh
.text:00402F90                 shl     esi, cl
.text:00402F92                 test    [edi+edx*4+4], esi
.text:00402F96                 jz      short loc_402FB2
.text:00402F98
.text:00402F98 loc_402F98:                             ; CODE XREF: sub_402C00+3FC↓j
.text:00402F98                 mov     edx, [esp+4Ch+arg_4]
.text:00402F9C                 cmp     [esp+4Ch+var_34], edx
.text:00402FA0                 jnb     short loc_402FAE
.text:00402FA2                 mov     edi, [esp+4Ch+arg_0]
.text:00402FA6                 mov     esi, [esp+4Ch+var_34]
.text:00402FAA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00402FAE
.text:00402FAE loc_402FAE:                             ; CODE XREF: sub_402C00+3A0↑j
.text:00402FAE                 inc     [esp+4Ch+var_34]
.text:00402FB2
.text:00402FB2 loc_402FB2:                             ; CODE XREF: sub_402C00+396↑j
.text:00402FB2                 lea     eax, [ebp+1]
.text:00402FB5                 lea     esi, [esi+0]
.text:00402FB9                 lea     edi, [edi+0]
.text:00402FC0
.text:00402FC0 loc_402FC0:                             ; CODE XREF: sub_402C00+310↑j
.text:00402FC0                                         ; sub_402C00+378↑j ...
.text:00402FC0                 mov     ebp, [esp+4Ch+arg_4]
.text:00402FC4                 cmp     [esp+4Ch+var_34], ebp
.text:00402FC8                 jnb     short loc_402FD5
.text:00402FCA                 mov     edx, [esp+4Ch+arg_0]
.text:00402FCE                 mov     ecx, [esp+4Ch+var_34]
.text:00402FD2                 mov     [ecx+edx], bl
.text:00402FD5
.text:00402FD5 loc_402FD5:                             ; CODE XREF: sub_402C00+3C8↑j
.text:00402FD5                 inc     [esp+4Ch+var_34]
.text:00402FD9                 mov     ebp, eax
.text:00402FDB                 jmp     loc_402C90
.text:00402FE0 ; ---------------------------------------------------------------------------
.text:00402FE0
.text:00402FE0 loc_402FE0:                             ; CODE XREF: sub_402C00+105↑j
.text:00402FE0                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:00402FE0                 mov     dl, 61h ; 'a'   ; jumptable 00402D05 case 7
.text:00402FE2                 lea     esi, [esi+0]
.text:00402FE9                 lea     edi, [edi+0]
.text:00402FF0
.text:00402FF0 loc_402FF0:                             ; CODE XREF: sub_402C00+400↓j
.text:00402FF0                                         ; sub_402C00+409↓j ...
.text:00402FF0                 cmp     [esp+4Ch+var_21], 0
.text:00402FF5                 lea     eax, [ebp+1]
.text:00402FF8                 jz      short loc_402FC0
.text:00402FFA                 mov     bl, dl
.text:00402FFC                 jmp     short loc_402F98
.text:00402FFE ; ---------------------------------------------------------------------------
.text:00402FFE
.text:00402FFE loc_402FFE:                             ; CODE XREF: sub_402C00+105↑j
.text:00402FFE                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:00402FFE                 mov     dl, 62h ; 'b'   ; jumptable 00402D05 case 8
.text:00403000                 jmp     short loc_402FF0
.text:00403002 ; ---------------------------------------------------------------------------
.text:00403002
.text:00403002 loc_403002:                             ; CODE XREF: sub_402C00+105↑j
.text:00403002                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:00403002                 mov     dl, 74h ; 't'   ; jumptable 00402D05 case 9
.text:00403004
.text:00403004 loc_403004:                             ; CODE XREF: sub_402C00+449↓j
.text:00403004                                         ; sub_402C00+455↓j ...
.text:00403004                 cmp     [esp+4Ch+arg_10], 1
.text:00403009                 jnz     short loc_402FF0
.text:0040300B
.text:0040300B loc_40300B:                             ; CODE XREF: sub_402C00+45C↓j
.text:0040300B                                         ; sub_402C00+4C1↓j ...
.text:0040300B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004033D2 cases 91,92,94,96,124
.text:00403013                 mov     eax, [esp+4Ch+arg_14]
.text:00403017                 mov     edx, [esp+4Ch+arg_C]
.text:0040301B                 mov     ecx, [esp+4Ch+Str]
.text:0040301F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403023                 mov     [esp+4Ch+var_38], eax ; int
.text:00403027                 mov     ebp, [esp+4Ch+arg_0]
.text:0040302B                 mov     [esp+4Ch+State], edx ; int
.text:0040302F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403033                 mov     [esp+4Ch+Type], ebx ; int
.text:00403037                 mov     [esp+4Ch+C], ebp ; int
.text:0040303A                 call    sub_402C00
.text:0040303F
.text:0040303F loc_40303F:                             ; CODE XREF: sub_402C00+972↓j
.text:0040303F                 add     esp, 3Ch
.text:00403042                 pop     ebx
.text:00403043                 pop     esi
.text:00403044                 pop     edi
.text:00403045                 pop     ebp
.text:00403046                 retn
.text:00403047 ; ---------------------------------------------------------------------------
.text:00403047
.text:00403047 loc_403047:                             ; CODE XREF: sub_402C00+105↑j
.text:00403047                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:00403047                 mov     dl, 6Eh ; 'n'   ; jumptable 00402D05 case 10
.text:00403049                 jmp     short loc_403004
.text:0040304B ; ---------------------------------------------------------------------------
.text:0040304B
.text:0040304B loc_40304B:                             ; CODE XREF: sub_402C00+105↑j
.text:0040304B                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:0040304B                 mov     dl, 76h ; 'v'   ; jumptable 00402D05 case 11
.text:0040304D                 jmp     short loc_402FF0
.text:0040304F ; ---------------------------------------------------------------------------
.text:0040304F
.text:0040304F loc_40304F:                             ; CODE XREF: sub_402C00+105↑j
.text:0040304F                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:0040304F                 mov     dl, 66h ; 'f'   ; jumptable 00402D05 case 12
.text:00403051                 jmp     short loc_402FF0
.text:00403053 ; ---------------------------------------------------------------------------
.text:00403053
.text:00403053 loc_403053:                             ; CODE XREF: sub_402C00+105↑j
.text:00403053                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:00403053                 mov     dl, 72h ; 'r'   ; jumptable 00402D05 case 13
.text:00403055                 jmp     short loc_403004
.text:00403057 ; ---------------------------------------------------------------------------
.text:00403057
.text:00403057 loc_403057:                             ; CODE XREF: sub_402C00+105↑j
.text:00403057                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:00403057                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402D05 case 39
.text:0040305C                 jz      short loc_40300B ; jumptable 004033D2 cases 91,92,94,96,124
.text:0040305E                 cmp     [esp+4Ch+arg_10], 2
.text:00403063                 jnz     def_403102      ; jumptable 00402D05 cases 37,43-58,65-90,93,95,97-122
.text:00403063                                         ; jumptable 00403102 default case, cases 34-38,42-44,46,48-59
.text:00403069                 mov     edx, [esp+4Ch+arg_4]
.text:0040306D                 cmp     [esp+4Ch+var_34], edx
.text:00403071                 jnb     short loc_40307F
.text:00403073                 mov     ecx, [esp+4Ch+arg_0]
.text:00403077                 mov     edi, [esp+4Ch+var_34]
.text:0040307B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040307F
.text:0040307F loc_40307F:                             ; CODE XREF: sub_402C00+471↑j
.text:0040307F                 inc     [esp+4Ch+var_34]
.text:00403083                 mov     eax, [esp+4Ch+arg_4]
.text:00403087                 cmp     [esp+4Ch+var_34], eax
.text:0040308B                 jnb     short loc_403099
.text:0040308D                 mov     esi, [esp+4Ch+arg_0]
.text:00403091                 mov     edx, [esp+4Ch+var_34]
.text:00403095                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403099
.text:00403099 loc_403099:                             ; CODE XREF: sub_402C00+48B↑j
.text:00403099                 inc     [esp+4Ch+var_34]
.text:0040309D                 mov     edi, [esp+4Ch+arg_4]
.text:004030A1                 cmp     [esp+4Ch+var_34], edi
.text:004030A5                 jnb     short loc_4030B3
.text:004030A7                 mov     ecx, [esp+4Ch+arg_0]
.text:004030AB                 mov     eax, [esp+4Ch+var_34]
.text:004030AF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004030B3
.text:004030B3 loc_4030B3:                             ; CODE XREF: sub_402C00+4A5↑j
.text:004030B3                                         ; sub_402C00+5C4↓j ...
.text:004030B3                 inc     [esp+4Ch+var_34]
.text:004030B7                 jmp     def_403102      ; jumptable 00402D05 cases 37,43-58,65-90,93,95,97-122
.text:004030B7                                         ; jumptable 00403102 default case, cases 34-38,42-44,46,48-59
.text:004030BC ; ---------------------------------------------------------------------------
.text:004030BC
.text:004030BC loc_4030BC:                             ; CODE XREF: sub_402C00+105↑j
.text:004030BC                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:004030BC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402D05 case 63
.text:004030C1                 jz      loc_40300B      ; jumptable 004033D2 cases 91,92,94,96,124
.text:004030C7                 cmp     [esp+4Ch+arg_10], 3
.text:004030CC                 jnz     def_403102      ; jumptable 00402D05 cases 37,43-58,65-90,93,95,97-122
.text:004030CC                                         ; jumptable 00403102 default case, cases 34-38,42-44,46,48-59
.text:004030D2                 lea     edx, [ebp+2]
.text:004030D5                 cmp     edx, [esp+4Ch+arg_C]
.text:004030D9                 jnb     def_403102      ; jumptable 00402D05 cases 37,43-58,65-90,93,95,97-122
.text:004030D9                                         ; jumptable 00403102 default case, cases 34-38,42-44,46,48-59
.text:004030DF                 mov     esi, [esp+4Ch+Str]
.text:004030E3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004030E8                 jnz     def_403102      ; jumptable 00402D05 cases 37,43-58,65-90,93,95,97-122
.text:004030E8                                         ; jumptable 00403102 default case, cases 34-38,42-44,46,48-59
.text:004030EE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004030F3                 movsx   eax, cl
.text:004030F6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004030F9                 cmp     eax, 1Dh
.text:004030FC                 ja      def_403102      ; jumptable 00402D05 cases 37,43-58,65-90,93,95,97-122
.text:004030FC                                         ; jumptable 00403102 default case, cases 34-38,42-44,46,48-59
.text:00403102                 jmp     ds:jpt_403102[eax*4] ; switch jump
.text:00403102 ; ---------------------------------------------------------------------------
.text:00403109                 align 4
.text:0040310C jpt_403102      dd offset loc_403184    ; DATA XREF: sub_402C00+502↑r
.text:0040310C                 dd offset def_403102    ; jump table for switch statement
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset loc_403184
.text:0040310C                 dd offset loc_403184
.text:0040310C                 dd offset loc_403184
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset loc_403184
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset loc_403184
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset def_403102
.text:0040310C                 dd offset loc_403184
.text:0040310C                 dd offset loc_403184
.text:0040310C                 dd offset loc_403184
.text:00403184 ; ---------------------------------------------------------------------------
.text:00403184
.text:00403184 loc_403184:                             ; CODE XREF: sub_402C00+502↑j
.text:00403184                                         ; DATA XREF: sub_402C00:jpt_403102↑o
.text:00403184                 mov     ebp, edx        ; jumptable 00403102 cases 33,39-41,45,47,60-62
.text:00403186                 mov     bl, cl
.text:00403188                 mov     edx, [esp+4Ch+arg_4]
.text:0040318C                 cmp     [esp+4Ch+var_34], edx
.text:00403190                 jnb     short loc_40319E
.text:00403192                 mov     ecx, [esp+4Ch+arg_0]
.text:00403196                 mov     edi, [esp+4Ch+var_34]
.text:0040319A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040319E
.text:0040319E loc_40319E:                             ; CODE XREF: sub_402C00+590↑j
.text:0040319E                 inc     [esp+4Ch+var_34]
.text:004031A2                 mov     eax, [esp+4Ch+arg_4]
.text:004031A6                 cmp     [esp+4Ch+var_34], eax
.text:004031AA                 jnb     short loc_4031B8
.text:004031AC                 mov     edx, [esp+4Ch+arg_0]
.text:004031B0                 mov     esi, [esp+4Ch+var_34]
.text:004031B4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004031B8
.text:004031B8 loc_4031B8:                             ; CODE XREF: sub_402C00+5AA↑j
.text:004031B8                 inc     [esp+4Ch+var_34]
.text:004031BC                 mov     edi, [esp+4Ch+arg_4]
.text:004031C0                 cmp     [esp+4Ch+var_34], edi
.text:004031C4                 jnb     loc_4030B3
.text:004031CA                 mov     eax, [esp+4Ch+arg_0]
.text:004031CE                 mov     ecx, [esp+4Ch+var_34]
.text:004031D2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004031D6                 jmp     loc_4030B3
.text:004031D6 ; ---------------------------------------------------------------------------
.text:004031DB                 align 10h
.text:004031E0
.text:004031E0 def_402D05:                             ; CODE XREF: sub_402C00+FF↑j
.text:004031E0                                         ; sub_402C00+105↑j
.text:004031E0                                         ; DATA XREF: ...
.text:004031E0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00402D05 default case, cases 1-6,14-31,64
.text:004031E5                 jz      loc_403310
.text:004031EB                 mov     [esp+4Ch+var_28], 1
.text:004031F3                 mov     esi, ds:__mb_cur_max
.text:004031F9                 movzx   edx, bl
.text:004031FC                 cmp     dword ptr [esi], 1
.text:004031FF                 jz      loc_4032F4
.text:00403205                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040320D                 mov     [esp+4Ch+C], edx ; C
.text:00403210                 call    _isctype
.text:00403215
.text:00403215 loc_403215:                             ; CODE XREF: sub_402C00+705↓j
.text:00403215                 test    eax, eax
.text:00403217                 setnz   [esp+4Ch+var_29]
.text:0040321C
.text:0040321C loc_40321C:                             ; CODE XREF: sub_402C00+7A5↓j
.text:0040321C                 cmp     [esp+4Ch+var_21], 0
.text:00403221                 lea     eax, [ebp+1]
.text:00403224                 jz      loc_402FC0
.text:0040322A                 cmp     [esp+4Ch+var_29], 0
.text:0040322F                 jnz     def_403102      ; jumptable 00402D05 cases 37,43-58,65-90,93,95,97-122
.text:0040322F                                         ; jumptable 00403102 default case, cases 34-38,42-44,46,48-59
.text:00403235
.text:00403235 loc_403235:                             ; CODE XREF: sub_402C00+7AB↓j
.text:00403235                 mov     eax, [esp+4Ch+var_28]
.text:00403239                 lea     edx, [eax+ebp]
.text:0040323C                 lea     esi, [esi+0]
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_402C00+6EF↓j
.text:00403240                 cmp     [esp+4Ch+var_21], 0
.text:00403245                 jz      short loc_4032C0
.text:00403247                 cmp     [esp+4Ch+var_29], 0
.text:0040324C                 jnz     short loc_4032C0
.text:0040324E                 mov     edi, [esp+4Ch+arg_4]
.text:00403252                 cmp     [esp+4Ch+var_34], edi
.text:00403256                 jnb     short loc_403264
.text:00403258                 mov     esi, [esp+4Ch+arg_0]
.text:0040325C                 mov     eax, [esp+4Ch+var_34]
.text:00403260                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403264
.text:00403264 loc_403264:                             ; CODE XREF: sub_402C00+656↑j
.text:00403264                 inc     [esp+4Ch+var_34]
.text:00403268                 mov     ecx, [esp+4Ch+arg_4]
.text:0040326C                 cmp     [esp+4Ch+var_34], ecx
.text:00403270                 jnb     short loc_403285
.text:00403272                 mov     cl, bl
.text:00403274                 mov     esi, [esp+4Ch+arg_0]
.text:00403278                 mov     edi, [esp+4Ch+var_34]
.text:0040327C                 shr     cl, 6
.text:0040327F                 add     cl, 30h ; '0'
.text:00403282                 mov     [edi+esi], cl
.text:00403285
.text:00403285 loc_403285:                             ; CODE XREF: sub_402C00+670↑j
.text:00403285                 inc     [esp+4Ch+var_34]
.text:00403289                 mov     edi, [esp+4Ch+arg_4]
.text:0040328D                 cmp     [esp+4Ch+var_34], edi
.text:00403291                 jnb     short loc_4032A9
.text:00403293                 mov     cl, bl
.text:00403295                 mov     esi, [esp+4Ch+arg_0]
.text:00403299                 shr     cl, 3
.text:0040329C                 mov     edi, [esp+4Ch+var_34]
.text:004032A0                 and     cl, 7
.text:004032A3                 add     cl, 30h ; '0'
.text:004032A6                 mov     [edi+esi], cl
.text:004032A9
.text:004032A9 loc_4032A9:                             ; CODE XREF: sub_402C00+691↑j
.text:004032A9                 inc     [esp+4Ch+var_34]
.text:004032AD                 and     bl, 7
.text:004032B0                 add     bl, 30h ; '0'
.text:004032B3                 lea     esi, [esi+0]
.text:004032B9                 lea     edi, [edi+0]
.text:004032C0
.text:004032C0 loc_4032C0:                             ; CODE XREF: sub_402C00+645↑j
.text:004032C0                                         ; sub_402C00+64C↑j
.text:004032C0                 lea     eax, [ebp+1]
.text:004032C3                 cmp     edx, eax
.text:004032C5                 jbe     loc_402FC0
.text:004032CB                 mov     ebp, [esp+4Ch+arg_4]
.text:004032CF                 cmp     [esp+4Ch+var_34], ebp
.text:004032D3                 jnb     short loc_4032E0
.text:004032D5                 mov     ecx, [esp+4Ch+arg_0]
.text:004032D9                 mov     edi, [esp+4Ch+var_34]
.text:004032DD                 mov     [edi+ecx], bl
.text:004032E0
.text:004032E0 loc_4032E0:                             ; CODE XREF: sub_402C00+6D3↑j
.text:004032E0                 inc     [esp+4Ch+var_34]
.text:004032E4                 mov     ebp, eax
.text:004032E6                 mov     eax, [esp+4Ch+Str]
.text:004032EA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004032EF                 jmp     loc_403240
.text:004032F4 ; ---------------------------------------------------------------------------
.text:004032F4
.text:004032F4 loc_4032F4:                             ; CODE XREF: sub_402C00+5FF↑j
.text:004032F4                 mov     ecx, ds:_pctype
.text:004032FA                 mov     edi, [ecx]
.text:004032FC                 movzx   eax, word ptr [edi+edx*2]
.text:00403300                 and     eax, 157h
.text:00403305                 jmp     loc_403215
.text:00403305 ; ---------------------------------------------------------------------------
.text:0040330A                 align 10h
.text:00403310
.text:00403310 loc_403310:                             ; CODE XREF: sub_402C00+5E5↑j
.text:00403310                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403315                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040331D                 mov     [esp+4Ch+var_28], 0
.text:00403325                 mov     [esp+4Ch+var_29], 1
.text:0040332A                 jz      loc_4034BC
.text:00403330
.text:00403330 loc_403330:                             ; CODE XREF: sub_402C00+8CC↓j
.text:00403330                 mov     ecx, [esp+4Ch+arg_C]
.text:00403334                 lea     edx, [esp+4Ch+var_18]
.text:00403338                 mov     edi, [esp+4Ch+Str]
.text:0040333C                 mov     [esp+4Ch+State], edx ; State
.text:00403340                 lea     esi, [esp+4Ch+var_18._State]
.text:00403344                 sub     ecx, ebp
.text:00403346                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040334A                 add     edi, ebp
.text:0040334C                 mov     [esp+4Ch+var_30], edi
.text:00403350                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403354                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403357                 call    mbrtowc
.text:0040335C                 test    eax, eax
.text:0040335E                 mov     edi, eax
.text:00403360                 jz      short loc_4033A0
.text:00403362                 cmp     eax, 0FFFFFFFFh
.text:00403365                 jz      loc_4034B2
.text:0040336B                 cmp     eax, 0FFFFFFFEh
.text:0040336E                 jz      loc_403472
.text:00403374                 cmp     [esp+4Ch+arg_10], 1
.text:00403379                 jz      short loc_4033B0
.text:0040337B
.text:0040337B loc_40337B:                             ; CODE XREF: sub_402C00+7B9↓j
.text:0040337B                                         ; sub_402C00+86D↓j
.text:0040337B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403380                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403388                 mov     [esp+4Ch+C], ecx ; C
.text:0040338B                 call    iswctype
.text:00403390                 test    eax, eax
.text:00403392                 jnz     short loc_403399
.text:00403394                 mov     [esp+4Ch+var_29], 0
.text:00403399
.text:00403399 loc_403399:                             ; CODE XREF: sub_402C00+792↑j
.text:00403399                 mov     [esp+4Ch+var_28], edi
.text:0040339D                 lea     esi, [esi+0]
.text:004033A0
.text:004033A0 loc_4033A0:                             ; CODE XREF: sub_402C00+760↑j
.text:004033A0                                         ; sub_402C00+87B↓j ...
.text:004033A0                 cmp     [esp+4Ch+var_28], 1
.text:004033A5                 jbe     loc_40321C
.text:004033AB                 jmp     loc_403235
.text:004033B0 ; ---------------------------------------------------------------------------
.text:004033B0
.text:004033B0 loc_4033B0:                             ; CODE XREF: sub_402C00+779↑j
.text:004033B0                 cmp     [esp+4Ch+arg_10], eax
.text:004033B4                 mov     edx, 1
.text:004033B9                 jnb     short loc_40337B
.text:004033BB
.text:004033BB loc_4033BB:                             ; CODE XREF: sub_402C00+867↓j
.text:004033BB                 mov     ecx, [esp+4Ch+Str]
.text:004033BF                 lea     esi, [edx+ebp]
.text:004033C2                 movsx   eax, byte ptr [esi+ecx]
.text:004033C6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004033C9                 cmp     eax, 21h
.text:004033CC                 ja      def_4033D2      ; jumptable 004033D2 default case, cases 93,95,97-123
.text:004033D2                 jmp     ds:jpt_4033D2[eax*4] ; switch jump
.text:004033D2 ; ---------------------------------------------------------------------------
.text:004033D9                 align 4
.text:004033DC jpt_4033D2      dd offset loc_40300B    ; DATA XREF: sub_402C00+7D2↑r
.text:004033DC                 dd offset loc_40300B    ; jump table for switch statement
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset loc_40300B
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset loc_40300B
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset def_4033D2
.text:004033DC                 dd offset loc_40300B
.text:00403464 ; ---------------------------------------------------------------------------
.text:00403464
.text:00403464 def_4033D2:                             ; CODE XREF: sub_402C00+7CC↑j
.text:00403464                                         ; sub_402C00+7D2↑j
.text:00403464                                         ; DATA XREF: ...
.text:00403464                 inc     edx             ; jumptable 004033D2 default case, cases 93,95,97-123
.text:00403465                 cmp     edx, edi
.text:00403467                 jb      loc_4033BB
.text:0040346D                 jmp     loc_40337B
.text:00403472 ; ---------------------------------------------------------------------------
.text:00403472
.text:00403472 loc_403472:                             ; CODE XREF: sub_402C00+76E↑j
.text:00403472                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403476                 mov     [esp+4Ch+var_29], 0
.text:0040347B                 jnb     loc_4033A0
.text:00403481                 mov     eax, [esp+4Ch+var_30]
.text:00403485                 cmp     byte ptr [eax], 0
.text:00403488                 jz      loc_4033A0
.text:0040348E
.text:0040348E loc_40348E:                             ; CODE XREF: sub_402C00+8AB↓j
.text:0040348E                 inc     [esp+4Ch+var_28]
.text:00403492                 mov     esi, [esp+4Ch+var_28]
.text:00403496                 lea     eax, [esi+ebp]
.text:00403499                 cmp     eax, [esp+4Ch+arg_C]
.text:0040349D                 jnb     loc_4033A0
.text:004034A3                 mov     edi, [esp+4Ch+Str]
.text:004034A7                 cmp     byte ptr [eax+edi], 0
.text:004034AB                 jnz     short loc_40348E
.text:004034AD                 jmp     loc_4033A0
.text:004034B2 ; ---------------------------------------------------------------------------
.text:004034B2
.text:004034B2 loc_4034B2:                             ; CODE XREF: sub_402C00+765↑j
.text:004034B2                 mov     [esp+4Ch+var_29], 0
.text:004034B7                 jmp     loc_4033A0
.text:004034BC ; ---------------------------------------------------------------------------
.text:004034BC
.text:004034BC loc_4034BC:                             ; CODE XREF: sub_402C00+72A↑j
.text:004034BC                 mov     edx, [esp+4Ch+Str]
.text:004034C0                 mov     [esp+4Ch+C], edx ; Str
.text:004034C3                 call    strlen
.text:004034C8                 mov     [esp+4Ch+arg_C], eax
.text:004034CC                 jmp     loc_403330
.text:004034D1 ; ---------------------------------------------------------------------------
.text:004034D1
.text:004034D1 loc_4034D1:                             ; CODE XREF: sub_402C00+105↑j
.text:004034D1                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:004034D1                 mov     dl, bl          ; jumptable 00402D05 case 92
.text:004034D3                 jmp     loc_403004
.text:004034D8 ; ---------------------------------------------------------------------------
.text:004034D8
.text:004034D8 loc_4034D8:                             ; CODE XREF: sub_402C00+105↑j
.text:004034D8                                         ; sub_402C00+902↓j
.text:004034D8                                         ; DATA XREF: ...
.text:004034D8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402D05 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004034DD                 jnz     def_403102      ; jumptable 00402D05 cases 37,43-58,65-90,93,95,97-122
.text:004034DD                                         ; jumptable 00403102 default case, cases 34-38,42-44,46,48-59
.text:004034E3                 jmp     loc_40300B      ; jumptable 004033D2 cases 91,92,94,96,124
.text:004034E8 ; ---------------------------------------------------------------------------
.text:004034E8
.text:004034E8 loc_4034E8:                             ; CODE XREF: sub_402C00+105↑j
.text:004034E8                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:004034E8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00402D05 cases 123,125
.text:004034ED                 jz      short loc_403504
.text:004034EF                 cmp     [esp+4Ch+arg_C], 1
.text:004034F4
.text:004034F4 loc_4034F4:                             ; CODE XREF: sub_402C00+90C↓j
.text:004034F4                 jnz     def_403102      ; jumptable 00402D05 cases 37,43-58,65-90,93,95,97-122
.text:004034F4                                         ; jumptable 00403102 default case, cases 34-38,42-44,46,48-59
.text:004034FA
.text:004034FA loc_4034FA:                             ; CODE XREF: sub_402C00+105↑j
.text:004034FA                                         ; DATA XREF: sub_402C00:jpt_402D05↑o
.text:004034FA                 test    ebp, ebp        ; jumptable 00402D05 cases 35,126
.text:004034FC                 jnz     def_403102      ; jumptable 00402D05 cases 37,43-58,65-90,93,95,97-122
.text:004034FC                                         ; jumptable 00403102 default case, cases 34-38,42-44,46,48-59
.text:00403502                 jmp     short loc_4034D8 ; jumptable 00402D05 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403504 ; ---------------------------------------------------------------------------
.text:00403504
.text:00403504 loc_403504:                             ; CODE XREF: sub_402C00+8ED↑j
.text:00403504                 mov     esi, [esp+4Ch+Str]
.text:00403508                 cmp     byte ptr [esi+1], 0
.text:0040350C                 jmp     short loc_4034F4
.text:0040350E ; ---------------------------------------------------------------------------
.text:0040350E
.text:0040350E loc_40350E:                             ; CODE XREF: sub_402C00:loc_402C9F↑j
.text:0040350E                 test    ebp, ebp
.text:00403510                 jnz     short loc_40351D
.text:00403512                 cmp     [esp+4Ch+arg_10], 1
.text:00403517                 jz      loc_40300B      ; jumptable 004033D2 cases 91,92,94,96,124
.text:0040351D
.text:0040351D loc_40351D:                             ; CODE XREF: sub_402C00+910↑j
.text:0040351D                 mov     esi, [esp+4Ch+var_1C]
.text:00403521                 test    esi, esi
.text:00403523                 jz      short loc_403558
.text:00403525                 mov     edi, [esp+4Ch+var_1C]
.text:00403529                 movzx   eax, byte ptr [edi]
.text:0040352C                 test    al, al
.text:0040352E                 jz      short loc_403558
.text:00403530
.text:00403530 loc_403530:                             ; CODE XREF: sub_402C00+956↓j
.text:00403530                 mov     ebp, [esp+4Ch+arg_4]
.text:00403534                 cmp     [esp+4Ch+var_34], ebp
.text:00403538                 jnb     short loc_403545
.text:0040353A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040353E                 mov     ebx, [esp+4Ch+var_34]
.text:00403542                 mov     [ebx+ecx], al
.text:00403545
.text:00403545 loc_403545:                             ; CODE XREF: sub_402C00+938↑j
.text:00403545                 inc     [esp+4Ch+var_1C]
.text:00403549                 inc     [esp+4Ch+var_34]
.text:0040354D                 mov     edx, [esp+4Ch+var_1C]
.text:00403551                 movzx   eax, byte ptr [edx]
.text:00403554                 test    al, al
.text:00403556                 jnz     short loc_403530
.text:00403558
.text:00403558 loc_403558:                             ; CODE XREF: sub_402C00+923↑j
.text:00403558                                         ; sub_402C00+92E↑j
.text:00403558                 mov     eax, [esp+4Ch+arg_4]
.text:0040355C                 cmp     [esp+4Ch+var_34], eax
.text:00403560                 jnb     short loc_40356E
.text:00403562                 mov     edi, [esp+4Ch+arg_0]
.text:00403566                 mov     esi, [esp+4Ch+var_34]
.text:0040356A                 mov     byte ptr [esi+edi], 0
.text:0040356E
.text:0040356E loc_40356E:                             ; CODE XREF: sub_402C00+960↑j
.text:0040356E                 mov     eax, [esp+4Ch+var_34]
.text:00403572                 jmp     loc_40303F
.text:00403577 ; ---------------------------------------------------------------------------
.text:00403577
.text:00403577 loc_403577:                             ; CODE XREF: sub_402C00+95↑j
.text:00403577                 mov     ebx, [esp+4Ch+Str]
.text:0040357B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403580                 jmp     loc_402C9F
.text:00403585 ; ---------------------------------------------------------------------------
.text:00403585
.text:00403585 loc_403585:                             ; CODE XREF: sub_402C00+3D↑j
.text:00403585                                         ; DATA XREF: sub_402C00:jpt_402C3D↑o
.text:00403585                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00402C3D case 2
.text:00403589                 cmp     [esp+4Ch+var_34], edx
.text:0040358D                 jnb     short loc_403596
.text:0040358F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403593                 mov     byte ptr [ecx], 27h ; '''
.text:00403596
.text:00403596 loc_403596:                             ; CODE XREF: sub_402C00+98D↑j
.text:00403596                 mov     [esp+4Ch+var_34], 1
.text:0040359E                 mov     [esp+4Ch+var_1C], 402BEEh
.text:004035A6                 jmp     loc_402C86
.text:004035AB ; ---------------------------------------------------------------------------
.text:004035AB
.text:004035AB loc_4035AB:                             ; CODE XREF: sub_402C00+3D↑j
.text:004035AB                                         ; DATA XREF: sub_402C00:jpt_402C3D↑o
.text:004035AB                 mov     [esp+4Ch+var_21], 1 ; jumptable 00402C3D case 4
.text:004035B0                 jmp     def_402C3D      ; jumptable 00402C3D default case, cases 0,1
.text:004035B5 ; ---------------------------------------------------------------------------
.text:004035B5
.text:004035B5 loc_4035B5:                             ; CODE XREF: sub_402C00+3D↑j
.text:004035B5                                         ; DATA XREF: sub_402C00:jpt_402C3D↑o
.text:004035B5                 mov     [esp+4Ch+C], 402BF0h ; jumptable 00402C3D cases 5,6
.text:004035BC                 call    ds:libintl_gettext
.text:004035C2                 cmp     eax, 402BF0h
.text:004035C7                 mov     edi, eax
.text:004035C9                 jz      short loc_403640
.text:004035CB
.text:004035CB loc_4035CB:                             ; CODE XREF: sub_402C00+A45↓j
.text:004035CB                                         ; sub_402C00+A4C↓j
.text:004035CB                 mov     [esp+4Ch+C], 402BEEh
.text:004035D2                 call    ds:libintl_gettext
.text:004035D8                 cmp     eax, 402BEEh
.text:004035DD                 mov     edx, eax
.text:004035DF                 jz      short loc_403632
.text:004035E1
.text:004035E1 loc_4035E1:                             ; CODE XREF: sub_402C00+A37↓j
.text:004035E1                                         ; sub_402C00+A3E↓j
.text:004035E1                 mov     [esp+4Ch+var_1C], edi
.text:004035E5                 cmp     byte ptr [edi], 0
.text:004035E8                 jz      short loc_403618
.text:004035EA
.text:004035EA loc_4035EA:                             ; CODE XREF: sub_402C00+A16↓j
.text:004035EA                 mov     ecx, [esp+4Ch+arg_4]
.text:004035EE                 cmp     [esp+4Ch+var_34], ecx
.text:004035F2                 jnb     short loc_403607
.text:004035F4                 mov     ebp, [esp+4Ch+var_1C]
.text:004035F8                 mov     edi, [esp+4Ch+arg_0]
.text:004035FC                 mov     esi, [esp+4Ch+var_34]
.text:00403600                 movzx   ebx, byte ptr [ebp+0]
.text:00403604                 mov     [esi+edi], bl
.text:00403607
.text:00403607 loc_403607:                             ; CODE XREF: sub_402C00+9F2↑j
.text:00403607                 inc     [esp+4Ch+var_1C]
.text:0040360B                 inc     [esp+4Ch+var_34]
.text:0040360F                 mov     eax, [esp+4Ch+var_1C]
.text:00403613                 cmp     byte ptr [eax], 0
.text:00403616                 jnz     short loc_4035EA
.text:00403618
.text:00403618 loc_403618:                             ; CODE XREF: sub_402C00+9E8↑j
.text:00403618                 mov     [esp+4Ch+var_21], 1
.text:0040361D                 mov     [esp+4Ch+var_1C], edx
.text:00403621                 mov     [esp+4Ch+C], edx ; Str
.text:00403624                 call    strlen
.text:00403629                 mov     [esp+4Ch+var_20], eax
.text:0040362D                 jmp     def_402C3D      ; jumptable 00402C3D default case, cases 0,1
.text:00403632 ; ---------------------------------------------------------------------------
.text:00403632
.text:00403632 loc_403632:                             ; CODE XREF: sub_402C00+9DF↑j
.text:00403632                 cmp     [esp+4Ch+arg_10], 6
.text:00403637                 jnz     short loc_4035E1
.text:00403639                 mov     edx, offset asc_402BEC ; "\"'`"
.text:0040363E                 jmp     short loc_4035E1
.text:00403640 ; ---------------------------------------------------------------------------
.text:00403640
.text:00403640 loc_403640:                             ; CODE XREF: sub_402C00+9C9↑j
.text:00403640                 cmp     [esp+4Ch+arg_10], 6
.text:00403645                 jnz     short loc_4035CB
.text:00403647                 mov     edi, offset asc_402BEC ; "\"'`"
.text:0040364C                 jmp     loc_4035CB
.text:0040364C sub_402C00      endp
.text:0040364C
.text:00403651 ; ---------------------------------------------------------------------------
.text:00403651                 jmp     short loc_403660
.text:00403651 ; ---------------------------------------------------------------------------
.text:00403653                 align 10h
.text:00403660
.text:00403660 loc_403660:                             ; CODE XREF: .text:00403651↑j
.text:00403660                 sub     esp, 0Ch
.text:00403663                 mov     [esp+4], ebx
.text:00403667                 mov     [esp+8], esi
.text:0040366B                 call    _errno
.text:00403670                 mov     esi, [eax]
.text:00403672                 mov     dword ptr [esp], 24h ; '$'
.text:00403679                 call    sub_404450
.text:0040367E                 mov     edx, [esp+10h]
.text:00403682                 mov     ebx, eax
.text:00403684                 test    edx, edx
.text:00403686                 jz      short loc_4036D1
.text:00403688
.text:00403688 loc_403688:                             ; CODE XREF: .text:004036D6↓j
.text:00403688                 mov     ecx, [edx]
.text:0040368A                 mov     [ebx], ecx
.text:0040368C                 mov     ecx, [edx+4]
.text:0040368F                 mov     [ebx+4], ecx
.text:00403692                 mov     ecx, [edx+8]
.text:00403695                 mov     [ebx+8], ecx
.text:00403698                 mov     ecx, [edx+0Ch]
.text:0040369B                 mov     [ebx+0Ch], ecx
.text:0040369E                 mov     ecx, [edx+10h]
.text:004036A1                 mov     [ebx+10h], ecx
.text:004036A4                 mov     ecx, [edx+14h]
.text:004036A7                 mov     [ebx+14h], ecx
.text:004036AA                 mov     ecx, [edx+18h]
.text:004036AD                 mov     [ebx+18h], ecx
.text:004036B0                 mov     ecx, [edx+1Ch]
.text:004036B3                 mov     [ebx+1Ch], ecx
.text:004036B6                 mov     ecx, [edx+20h]
.text:004036B9                 mov     [ebx+20h], ecx
.text:004036BC                 call    _errno
.text:004036C1                 mov     [eax], esi
.text:004036C3                 mov     esi, [esp+8]
.text:004036C7                 mov     eax, ebx
.text:004036C9                 mov     ebx, [esp+4]
.text:004036CD                 add     esp, 0Ch
.text:004036D0                 retn
.text:004036D1 ; ---------------------------------------------------------------------------
.text:004036D1
.text:004036D1 loc_4036D1:                             ; CODE XREF: .text:00403686↑j
.text:004036D1                 mov     edx, offset dword_407140
.text:004036D6                 jmp     short loc_403688
.text:004036D6 ; ---------------------------------------------------------------------------
.text:004036D8                 align 10h
.text:004036E0                 mov     eax, [esp+4]
.text:004036E4                 test    eax, eax
.text:004036E6                 jz      short loc_4036F0
.text:004036E8
.text:004036E8 loc_4036E8:                             ; CODE XREF: .text:004036F5↓j
.text:004036E8                 mov     eax, [eax]
.text:004036EA                 retn
.text:004036EA ; ---------------------------------------------------------------------------
.text:004036EB                 align 10h
.text:004036F0
.text:004036F0 loc_4036F0:                             ; CODE XREF: .text:004036E6↑j
.text:004036F0                 mov     eax, offset dword_407140
.text:004036F5                 jmp     short loc_4036E8
.text:004036F5 ; ---------------------------------------------------------------------------
.text:004036F7                 align 10h
.text:00403700                 mov     edx, [esp+4]
.text:00403704                 test    edx, edx
.text:00403706                 jz      short loc_403710
.text:00403708
.text:00403708 loc_403708:                             ; CODE XREF: .text:00403715↓j
.text:00403708                 mov     ecx, [esp+8]
.text:0040370C                 mov     [edx], ecx
.text:0040370E                 retn
.text:0040370E ; ---------------------------------------------------------------------------
.text:0040370F                 align 10h
.text:00403710
.text:00403710 loc_403710:                             ; CODE XREF: .text:00403706↑j
.text:00403710                 mov     edx, offset dword_407140
.text:00403715                 jmp     short loc_403708
.text:00403715 ; ---------------------------------------------------------------------------
.text:00403717                 align 10h
.text:00403720                 sub     esp, 8
.text:00403723                 mov     eax, [esp+0Ch]
.text:00403727                 movzx   ecx, byte ptr [esp+10h]
.text:0040372C                 mov     [esp], ebx
.text:0040372F                 mov     ebx, [esp+14h]
.text:00403733                 mov     [esp+4], esi
.text:00403737                 mov     dl, cl
.text:00403739                 shr     dl, 5
.text:0040373C                 movzx   edx, dl
.text:0040373F                 shl     edx, 2
.text:00403742                 test    eax, eax
.text:00403744                 lea     esi, [edx+eax+4]
.text:00403748                 jz      short loc_403770
.text:0040374A
.text:0040374A loc_40374A:                             ; CODE XREF: .text:00403776↓j
.text:0040374A                 mov     edx, [esi]
.text:0040374C                 and     ecx, 1Fh
.text:0040374F                 and     ebx, 1
.text:00403752                 mov     eax, edx
.text:00403754                 shr     eax, cl
.text:00403756                 and     eax, 1
.text:00403759                 xor     ebx, eax
.text:0040375B                 shl     ebx, cl
.text:0040375D                 xor     edx, ebx
.text:0040375F                 mov     [esi], edx
.text:00403761                 mov     ebx, [esp]
.text:00403764                 mov     esi, [esp+4]
.text:00403768                 add     esp, 8
.text:0040376B                 retn
.text:0040376B ; ---------------------------------------------------------------------------
.text:0040376C                 align 10h
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: .text:00403748↑j
.text:00403770                 lea     esi, dword_407144[edx]
.text:00403776                 jmp     short loc_40374A
.text:00403776 ; ---------------------------------------------------------------------------
.text:00403778                 align 10h
.text:00403780                 sub     esp, 2Ch
.text:00403783                 mov     [esp+24h], ebx
.text:00403787                 mov     ebx, [esp+40h]
.text:0040378B                 mov     [esp+28h], esi
.text:0040378F                 test    ebx, ebx
.text:00403791                 jz      short loc_4037E0
.text:00403793
.text:00403793 loc_403793:                             ; CODE XREF: .text:004037E5↓j
.text:00403793                 call    _errno
.text:00403798                 mov     esi, [eax]
.text:0040379A                 mov     [esp+14h], ebx
.text:0040379E                 mov     edx, [ebx]
.text:004037A0                 mov     ecx, [esp+38h]
.text:004037A4                 mov     ebx, [esp+3Ch]
.text:004037A8                 mov     [esp+10h], edx
.text:004037AC                 mov     edx, [esp+34h]
.text:004037B0                 mov     [esp+0Ch], ebx
.text:004037B4                 mov     [esp+8], ecx
.text:004037B8                 mov     [esp+4], edx
.text:004037BC                 mov     edx, [esp+30h]
.text:004037C0                 mov     [esp], edx
.text:004037C3                 call    sub_402C00
.text:004037C8                 mov     ebx, eax
.text:004037CA                 call    _errno
.text:004037CF                 mov     [eax], esi
.text:004037D1                 mov     esi, [esp+28h]
.text:004037D5                 mov     eax, ebx
.text:004037D7                 mov     ebx, [esp+24h]
.text:004037DB                 add     esp, 2Ch
.text:004037DE                 retn
.text:004037DE ; ---------------------------------------------------------------------------
.text:004037DF                 align 10h
.text:004037E0
.text:004037E0 loc_4037E0:                             ; CODE XREF: .text:00403791↑j
.text:004037E0                 mov     ebx, offset dword_407140
.text:004037E5                 jmp     short loc_403793
.text:004037E5 ; ---------------------------------------------------------------------------
.text:004037E7                 align 10h
.text:004037F0                 push    ebp
.text:004037F1                 push    edi
.text:004037F2                 push    esi
.text:004037F3                 push    ebx
.text:004037F4                 sub     esp, 2Ch
.text:004037F7                 mov     ebp, [esp+48h]
.text:004037FB                 call    _errno
.text:00403800                 mov     edx, [eax]
.text:00403802                 test    ebp, ebp
.text:00403804                 mov     ebx, ebp
.text:00403806                 mov     [esp+28h], edx
.text:0040380A                 jz      loc_4038C0
.text:00403810
.text:00403810 loc_403810:                             ; CODE XREF: .text:004038C5↓j
.text:00403810                 call    _errno
.text:00403815                 mov     edi, [eax]
.text:00403817                 mov     esi, ebp
.text:00403819                 mov     [esp+14h], ebx
.text:0040381D                 mov     ecx, [ebx]
.text:0040381F                 mov     dword ptr [esp], 0
.text:00403826                 mov     edx, [esp+44h]
.text:0040382A                 mov     dword ptr [esp+4], 0
.text:00403832                 mov     eax, [esp+40h]
.text:00403836                 mov     [esp+10h], ecx
.text:0040383A                 mov     [esp+0Ch], edx
.text:0040383E                 mov     [esp+8], eax
.text:00403842                 call    sub_402C00
.text:00403847                 mov     ebx, eax
.text:00403849                 call    _errno
.text:0040384E                 mov     [eax], edi
.text:00403850                 lea     edi, [ebx+1]
.text:00403853                 mov     [esp], edi
.text:00403856                 call    sub_404450
.text:0040385B                 mov     [esp+24h], eax
.text:0040385F                 test    ebp, ebp
.text:00403861                 jz      short loc_4038B2
.text:00403863
.text:00403863 loc_403863:                             ; CODE XREF: .text:004038B7↓j
.text:00403863                 call    _errno
.text:00403868                 mov     ebp, [eax]
.text:0040386A                 mov     [esp+14h], esi
.text:0040386E                 mov     ecx, [esi]
.text:00403870                 mov     [esp+4], edi
.text:00403874                 mov     edx, [esp+44h]
.text:00403878                 mov     esi, [esp+24h]
.text:0040387C                 mov     [esp+10h], ecx
.text:00403880                 mov     eax, [esp+40h]
.text:00403884                 mov     [esp+0Ch], edx
.text:00403888                 mov     [esp], esi
.text:0040388B                 mov     [esp+8], eax
.text:0040388F                 call    sub_402C00
.text:00403894                 call    _errno
.text:00403899                 mov     [eax], ebp
.text:0040389B                 call    _errno
.text:004038A0                 mov     ebx, [esp+28h]
.text:004038A4                 mov     [eax], ebx
.text:004038A6                 mov     eax, [esp+24h]
.text:004038AA                 add     esp, 2Ch
.text:004038AD                 pop     ebx
.text:004038AE                 pop     esi
.text:004038AF                 pop     edi
.text:004038B0                 pop     ebp
.text:004038B1                 retn
.text:004038B2 ; ---------------------------------------------------------------------------
.text:004038B2
.text:004038B2 loc_4038B2:                             ; CODE XREF: .text:00403861↑j
.text:004038B2                 mov     esi, offset dword_407140
.text:004038B7                 jmp     short loc_403863
.text:004038B7 ; ---------------------------------------------------------------------------
.text:004038B9                 align 10h
.text:004038C0
.text:004038C0 loc_4038C0:                             ; CODE XREF: .text:0040380A↑j
.text:004038C0                 mov     ebx, offset dword_407140
.text:004038C5                 jmp     loc_403810
.text:004038C5 ; ---------------------------------------------------------------------------
.text:004038CA                 align 10h
.text:004038D0                 sub     esp, 1Ch
.text:004038D3                 mov     edx, [esp+24h]
.text:004038D7                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:004038DF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004038E7                 mov     [esp+4], edx
.text:004038EB                 mov     edx, [esp+20h]
.text:004038EF                 mov     [esp], edx
.text:004038F2                 call    sub_403D40
.text:004038F7                 add     esp, 1Ch
.text:004038FA                 retn
.text:004038FA ; ---------------------------------------------------------------------------
.text:004038FB                 align 10h
.text:00403900                 sub     esp, 1Ch
.text:00403903                 mov     edx, [esp+20h]
.text:00403907                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:0040390F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403917                 mov     [esp+4], edx
.text:0040391B                 mov     dword ptr [esp], 0
.text:00403922                 call    sub_403D40
.text:00403927                 add     esp, 1Ch
.text:0040392A                 retn
.text:0040392A ; ---------------------------------------------------------------------------
.text:0040392B                 align 10h
.text:00403930
.text:00403930 ; =============== S U B R O U T I N E =======================================
.text:00403930
.text:00403930
.text:00403930 ; int __cdecl sub_403930(int, int, char *)
.text:00403930 sub_403930      proc near               ; CODE XREF: .text:004027BA↑p
.text:00403930                                         ; sub_4027D0+1A↑p
.text:00403930
.text:00403930 var_BC          = dword ptr -0BCh
.text:00403930 var_B8          = dword ptr -0B8h
.text:00403930 var_B4          = dword ptr -0B4h
.text:00403930 var_B0          = dword ptr -0B0h
.text:00403930 var_AC          = dword ptr -0ACh
.text:00403930 var_A8          = dword ptr -0A8h
.text:00403930 var_A4          = dword ptr -0A4h
.text:00403930 var_A0          = dword ptr -0A0h
.text:00403930 var_9C          = dword ptr -9Ch
.text:00403930 var_98          = dword ptr -98h
.text:00403930 var_94          = dword ptr -94h
.text:00403930 var_90          = dword ptr -90h
.text:00403930 var_8C          = dword ptr -8Ch
.text:00403930 var_7C          = dword ptr -7Ch
.text:00403930 var_78          = dword ptr -78h
.text:00403930 var_74          = dword ptr -74h
.text:00403930 var_70          = dword ptr -70h
.text:00403930 var_6C          = dword ptr -6Ch
.text:00403930 var_68          = dword ptr -68h
.text:00403930 var_64          = dword ptr -64h
.text:00403930 var_60          = dword ptr -60h
.text:00403930 var_5C          = dword ptr -5Ch
.text:00403930 var_4C          = dword ptr -4Ch
.text:00403930 var_48          = dword ptr -48h
.text:00403930 var_44          = dword ptr -44h
.text:00403930 var_40          = dword ptr -40h
.text:00403930 var_3C          = dword ptr -3Ch
.text:00403930 var_38          = dword ptr -38h
.text:00403930 var_34          = dword ptr -34h
.text:00403930 var_30          = dword ptr -30h
.text:00403930 var_2C          = dword ptr -2Ch
.text:00403930 arg_0           = dword ptr  4
.text:00403930 arg_4           = dword ptr  8
.text:00403930 arg_8           = dword ptr  0Ch
.text:00403930
.text:00403930                 push    ebp
.text:00403931                 xor     eax, eax
.text:00403933                 mov     ecx, 8
.text:00403938                 push    edi
.text:00403939                 push    esi
.text:0040393A                 push    ebx
.text:0040393B                 sub     esp, 0ACh
.text:00403941                 mov     ebp, [esp+0BCh+arg_4]
.text:00403948                 cld
.text:00403949                 lea     edi, [esp+0BCh+var_A8]
.text:0040394D                 mov     [esp+0BCh+var_AC], ebp
.text:00403951                 rep stosd
.text:00403953                 mov     eax, [esp+0BCh+var_8C]
.text:00403957                 mov     edi, [esp+0BCh+var_AC]
.text:0040395B                 mov     esi, [esp+0BCh+var_A8]
.text:0040395F                 mov     [esp+0BCh+var_5C], eax
.text:00403963                 mov     ebp, [esp+0BCh+var_A4]
.text:00403967                 mov     eax, [esp+0BCh+var_AC]
.text:0040396B                 mov     [esp+0BCh+var_7C], edi
.text:0040396F                 mov     ecx, [esp+0BCh+var_94]
.text:00403973                 mov     edi, [esp+0BCh+var_A0]
.text:00403977                 mov     [esp+0BCh+var_78], esi
.text:0040397B                 mov     edx, [esp+0BCh+var_90]
.text:0040397F                 mov     esi, [esp+0BCh+var_9C]
.text:00403983                 mov     [esp+0BCh+var_4C], eax
.text:00403987                 mov     ebx, [esp+0BCh+var_98]
.text:0040398B                 mov     eax, [esp+0BCh+var_A8]
.text:0040398F                 mov     [esp+0BCh+var_74], ebp
.text:00403993                 mov     [esp+0BCh+var_70], edi
.text:00403997                 mov     [esp+0BCh+var_6C], esi
.text:0040399B                 mov     [esp+0BCh+var_68], ebx
.text:0040399F                 mov     [esp+0BCh+var_64], ecx
.text:004039A3                 mov     [esp+0BCh+var_60], edx
.text:004039A7                 mov     [esp+0BCh+var_48], eax
.text:004039AB                 mov     [esp+0BCh+var_44], ebp
.text:004039AF                 mov     [esp+0BCh+var_40], edi
.text:004039B3                 mov     [esp+0BCh+var_3C], esi
.text:004039BA                 mov     [esp+0BCh+var_38], ebx
.text:004039C1                 mov     ebx, [esp+0BCh+var_8C]
.text:004039C5                 mov     [esp+0BCh+var_30], edx
.text:004039CC                 mov     edx, [esp+0BCh+arg_8]
.text:004039D3                 mov     [esp+0BCh+var_34], ecx
.text:004039DA                 lea     ecx, [esp+0BCh+var_4C]
.text:004039DE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:004039E2                 mov     edx, [esp+0BCh+arg_0]
.text:004039E9                 mov     [esp+0BCh+var_2C], ebx
.text:004039F0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:004039F4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:004039FC                 mov     [esp+0BCh+var_BC], edx ; int
.text:004039FF                 call    sub_403D40
.text:00403A04                 add     esp, 0ACh
.text:00403A0A                 pop     ebx
.text:00403A0B                 pop     esi
.text:00403A0C                 pop     edi
.text:00403A0D                 pop     ebp
.text:00403A0E                 retn
.text:00403A0E sub_403930      endp
.text:00403A0E
.text:00403A0E ; ---------------------------------------------------------------------------
.text:00403A0F                 align 10h
.text:00403A10                 push    ebp
.text:00403A11                 xor     eax, eax
.text:00403A13                 mov     ecx, 8
.text:00403A18                 push    edi
.text:00403A19                 push    esi
.text:00403A1A                 push    ebx
.text:00403A1B                 sub     esp, 0ACh
.text:00403A21                 mov     edx, [esp+0C4h]
.text:00403A28                 cld
.text:00403A29                 lea     edi, [esp+14h]
.text:00403A2D                 mov     [esp+10h], edx
.text:00403A31                 rep stosd
.text:00403A33                 mov     eax, [esp+30h]
.text:00403A37                 mov     ebp, [esp+10h]
.text:00403A3B                 mov     edi, [esp+14h]
.text:00403A3F                 mov     [esp+60h], eax
.text:00403A43                 mov     esi, [esp+20h]
.text:00403A47                 mov     eax, [esp+10h]
.text:00403A4B                 mov     [esp+40h], ebp
.text:00403A4F                 mov     ecx, [esp+28h]
.text:00403A53                 mov     ebp, [esp+18h]
.text:00403A57                 mov     [esp+44h], edi
.text:00403A5B                 mov     edx, [esp+2Ch]
.text:00403A5F                 mov     edi, [esp+1Ch]
.text:00403A63                 mov     [esp+70h], eax
.text:00403A67                 mov     ebx, [esp+24h]
.text:00403A6B                 mov     eax, [esp+14h]
.text:00403A6F                 mov     [esp+48h], ebp
.text:00403A73                 mov     [esp+4Ch], edi
.text:00403A77                 mov     [esp+50h], esi
.text:00403A7B                 mov     [esp+54h], ebx
.text:00403A7F                 mov     [esp+58h], ecx
.text:00403A83                 mov     [esp+5Ch], edx
.text:00403A87                 mov     [esp+74h], eax
.text:00403A8B                 mov     [esp+78h], ebp
.text:00403A8F                 mov     [esp+7Ch], edi
.text:00403A93                 mov     [esp+80h], esi
.text:00403A9A                 mov     [esp+84h], ebx
.text:00403AA1                 mov     esi, [esp+30h]
.text:00403AA5                 lea     ebx, [esp+70h]
.text:00403AA9                 mov     [esp+8Ch], edx
.text:00403AB0                 mov     edx, [esp+0C8h]
.text:00403AB7                 mov     [esp+88h], ecx
.text:00403ABE                 mov     ecx, [esp+0CCh]
.text:00403AC5                 mov     [esp+4], edx
.text:00403AC9                 mov     edx, [esp+0C0h]
.text:00403AD0                 mov     [esp+90h], esi
.text:00403AD7                 mov     [esp+0Ch], ebx
.text:00403ADB                 mov     [esp+8], ecx
.text:00403ADF                 mov     [esp], edx
.text:00403AE2                 call    sub_403D40
.text:00403AE7                 add     esp, 0ACh
.text:00403AED                 pop     ebx
.text:00403AEE                 pop     esi
.text:00403AEF                 pop     edi
.text:00403AF0                 pop     ebp
.text:00403AF1                 retn
.text:00403AF1 ; ---------------------------------------------------------------------------
.text:00403AF2                 align 10h
.text:00403B00                 push    ebp
.text:00403B01                 xor     eax, eax
.text:00403B03                 mov     ecx, 8
.text:00403B08                 push    edi
.text:00403B09                 push    esi
.text:00403B0A                 push    ebx
.text:00403B0B                 sub     esp, 0ACh
.text:00403B11                 mov     edi, [esp+0C0h]
.text:00403B18                 cld
.text:00403B19                 mov     [esp+10h], edi
.text:00403B1D                 lea     edi, [esp+14h]
.text:00403B21                 rep stosd
.text:00403B23                 mov     eax, [esp+30h]
.text:00403B27                 mov     esi, [esp+10h]
.text:00403B2B                 mov     ebx, [esp+14h]
.text:00403B2F                 mov     [esp+60h], eax
.text:00403B33                 mov     ebp, [esp+18h]
.text:00403B37                 mov     eax, [esp+10h]
.text:00403B3B                 mov     [esp+40h], esi
.text:00403B3F                 mov     edi, [esp+1Ch]
.text:00403B43                 mov     esi, [esp+20h]
.text:00403B47                 mov     [esp+44h], ebx
.text:00403B4B                 mov     ecx, [esp+28h]
.text:00403B4F                 mov     edx, [esp+2Ch]
.text:00403B53                 mov     [esp+70h], eax
.text:00403B57                 mov     ebx, [esp+24h]
.text:00403B5B                 mov     eax, [esp+14h]
.text:00403B5F                 mov     [esp+48h], ebp
.text:00403B63                 mov     [esp+4Ch], edi
.text:00403B67                 mov     [esp+50h], esi
.text:00403B6B                 mov     [esp+54h], ebx
.text:00403B6F                 mov     [esp+58h], ecx
.text:00403B73                 mov     [esp+5Ch], edx
.text:00403B77                 mov     [esp+74h], eax
.text:00403B7B                 mov     [esp+78h], ebp
.text:00403B7F                 mov     [esp+7Ch], edi
.text:00403B83                 mov     [esp+80h], esi
.text:00403B8A                 mov     [esp+84h], ebx
.text:00403B91                 mov     [esp+8Ch], edx
.text:00403B98                 lea     edx, [esp+70h]
.text:00403B9C                 mov     [esp+88h], ecx
.text:00403BA3                 mov     ecx, [esp+30h]
.text:00403BA7                 mov     [esp+0Ch], edx
.text:00403BAB                 mov     edx, [esp+0C4h]
.text:00403BB2                 mov     [esp+90h], ecx
.text:00403BB9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403BC1                 mov     [esp+4], edx
.text:00403BC5                 mov     dword ptr [esp], 0
.text:00403BCC                 call    sub_403D40
.text:00403BD1                 add     esp, 0ACh
.text:00403BD7                 pop     ebx
.text:00403BD8                 pop     esi
.text:00403BD9                 pop     edi
.text:00403BDA                 pop     ebp
.text:00403BDB                 retn
.text:00403BDB ; ---------------------------------------------------------------------------
.text:00403BDC                 align 10h
.text:00403BE0                 push    edi
.text:00403BE1                 push    esi
.text:00403BE2                 push    ebx
.text:00403BE3                 sub     esp, 40h
.text:00403BE6                 mov     edx, ds:dword_40714C
.text:00403BEC                 mov     ebx, ds:dword_407140
.text:00403BF2                 mov     esi, ds:dword_407148
.text:00403BF8                 mov     edi, ds:dword_407144
.text:00403BFE                 mov     [esp+1Ch], edx
.text:00403C02                 mov     ecx, ds:dword_407150
.text:00403C08                 mov     edx, ds:dword_407160
.text:00403C0E                 mov     [esp+10h], ebx
.text:00403C12                 mov     ebx, ds:dword_407154
.text:00403C18                 mov     [esp+30h], edx
.text:00403C1C                 movzx   edx, byte ptr [esp+54h]
.text:00403C21                 mov     [esp+18h], esi
.text:00403C25                 mov     esi, ds:dword_40715C
.text:00403C2B                 mov     [esp+14h], edi
.text:00403C2F                 mov     edi, ds:dword_407158
.text:00403C35                 mov     [esp+20h], ecx
.text:00403C39                 mov     cl, dl
.text:00403C3B                 shr     cl, 5
.text:00403C3E                 mov     [esp+24h], ebx
.text:00403C42                 movzx   ebx, cl
.text:00403C45                 mov     [esp+2Ch], esi
.text:00403C49                 lea     esi, [esp+10h]
.text:00403C4D                 mov     [esp+28h], edi
.text:00403C51                 lea     edi, [esi+ebx*4]
.text:00403C54                 mov     ebx, edx
.text:00403C56                 mov     edx, [edi+4]
.text:00403C59                 and     ebx, 1Fh
.text:00403C5C                 mov     cl, bl
.text:00403C5E                 mov     eax, edx
.text:00403C60                 shr     eax, cl
.text:00403C62                 and     eax, 1
.text:00403C65                 xor     eax, 1
.text:00403C68                 shl     eax, cl
.text:00403C6A                 xor     edx, eax
.text:00403C6C                 mov     [edi+4], edx
.text:00403C6F                 mov     edx, [esp+50h]
.text:00403C73                 mov     [esp+0Ch], esi
.text:00403C77                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403C7F                 mov     [esp+4], edx
.text:00403C83                 mov     dword ptr [esp], 0
.text:00403C8A                 call    sub_403D40
.text:00403C8F                 add     esp, 40h
.text:00403C92                 pop     ebx
.text:00403C93                 pop     esi
.text:00403C94                 pop     edi
.text:00403C95                 retn
.text:00403C95 ; ---------------------------------------------------------------------------
.text:00403C96                 align 10h
.text:00403CA0
.text:00403CA0 ; =============== S U B R O U T I N E =======================================
.text:00403CA0
.text:00403CA0
.text:00403CA0 ; int __cdecl sub_403CA0(char *)
.text:00403CA0 sub_403CA0      proc near               ; CODE XREF: sub_402A90+64↑p
.text:00403CA0
.text:00403CA0 var_4C          = dword ptr -4Ch
.text:00403CA0 var_48          = dword ptr -48h
.text:00403CA0 var_44          = dword ptr -44h
.text:00403CA0 var_40          = dword ptr -40h
.text:00403CA0 var_3C          = dword ptr -3Ch
.text:00403CA0 var_38          = dword ptr -38h
.text:00403CA0 var_34          = dword ptr -34h
.text:00403CA0 var_30          = dword ptr -30h
.text:00403CA0 var_2C          = dword ptr -2Ch
.text:00403CA0 var_28          = dword ptr -28h
.text:00403CA0 var_24          = dword ptr -24h
.text:00403CA0 var_20          = dword ptr -20h
.text:00403CA0 var_1C          = dword ptr -1Ch
.text:00403CA0 arg_0           = dword ptr  4
.text:00403CA0
.text:00403CA0                 sub     esp, 4Ch
.text:00403CA3                 mov     ecx, ds:dword_407140
.text:00403CA9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00403CB1                 mov     edx, ds:dword_407144
.text:00403CB7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00403CBE                 mov     [esp+4Ch+var_3C], ecx
.text:00403CC2                 mov     ecx, ds:dword_40714C
.text:00403CC8                 mov     [esp+4Ch+var_38], edx
.text:00403CCC                 mov     edx, ds:dword_407148
.text:00403CD2                 mov     [esp+4Ch+var_30], ecx
.text:00403CD6                 mov     ecx, ds:dword_407150
.text:00403CDC                 mov     eax, edx
.text:00403CDE                 shr     eax, 1Ah
.text:00403CE1                 and     eax, 1
.text:00403CE4                 xor     eax, 1
.text:00403CE7                 mov     [esp+4Ch+var_2C], ecx
.text:00403CEB                 shl     eax, 1Ah
.text:00403CEE                 mov     ecx, ds:dword_407154
.text:00403CF4                 xor     edx, eax
.text:00403CF6                 mov     [esp+4Ch+var_34], edx
.text:00403CFA                 mov     edx, [esp+4Ch+arg_0]
.text:00403CFE                 mov     [esp+4Ch+var_28], ecx
.text:00403D02                 mov     ecx, ds:dword_407158
.text:00403D08                 mov     [esp+4Ch+var_48], edx ; char *
.text:00403D0C                 mov     [esp+4Ch+var_24], ecx
.text:00403D10                 mov     ecx, ds:dword_40715C
.text:00403D16                 mov     [esp+4Ch+var_20], ecx
.text:00403D1A                 mov     ecx, ds:dword_407160
.text:00403D20                 mov     [esp+4Ch+var_1C], ecx
.text:00403D24                 lea     ecx, [esp+4Ch+var_3C]
.text:00403D28                 mov     [esp+4Ch+var_40], ecx ; int
.text:00403D2C                 call    sub_403D40
.text:00403D31                 add     esp, 4Ch
.text:00403D34                 retn
.text:00403D34 sub_403CA0      endp
.text:00403D34
.text:00403D34 ; ---------------------------------------------------------------------------
.text:00403D35                 align 10h
.text:00403D40
.text:00403D40 ; =============== S U B R O U T I N E =======================================
.text:00403D40
.text:00403D40
.text:00403D40 ; int __cdecl sub_403D40(int, char *, int, int)
.text:00403D40 sub_403D40      proc near               ; CODE XREF: .text:004038F2↑p
.text:00403D40                                         ; .text:00403922↑p ...
.text:00403D40
.text:00403D40 Block           = dword ptr -2Ch
.text:00403D40 var_28          = dword ptr -28h
.text:00403D40 Str             = dword ptr -24h
.text:00403D40 var_20          = dword ptr -20h
.text:00403D40 var_1C          = dword ptr -1Ch
.text:00403D40 var_18          = dword ptr -18h
.text:00403D40 var_14          = dword ptr -14h
.text:00403D40 arg_0           = dword ptr  4
.text:00403D40 arg_4           = dword ptr  8
.text:00403D40 arg_8           = dword ptr  0Ch
.text:00403D40 arg_C           = dword ptr  10h
.text:00403D40
.text:00403D40                 push    ebp
.text:00403D41                 push    edi
.text:00403D42                 push    esi
.text:00403D43                 push    ebx
.text:00403D44                 sub     esp, 1Ch
.text:00403D47                 call    _errno
.text:00403D4C                 mov     edx, [eax]
.text:00403D4E                 mov     eax, [esp+2Ch+arg_0]
.text:00403D52                 mov     [esp+2Ch+var_14], edx
.text:00403D56                 test    eax, eax
.text:00403D58                 js      loc_403EFA
.text:00403D5E                 mov     eax, [esp+2Ch+arg_0]
.text:00403D62                 cmp     dword_406020, eax
.text:00403D68                 ja      short loc_403DE0
.text:00403D6A                 mov     esi, eax
.text:00403D6C                 inc     esi
.text:00403D6D                 cmp     esi, 1FFFFFFFh
.text:00403D73                 ja      loc_403EFF
.text:00403D79                 mov     ebx, off_40602C
.text:00403D7F                 cmp     ebx, offset dword_406024
.text:00403D85                 jz      loc_403ED1
.text:00403D8B
.text:00403D8B loc_403D8B:                             ; CODE XREF: sub_403D40+1B5↓j
.text:00403D8B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00403D8E                 lea     ecx, ds:0[esi*8]
.text:00403D95                 mov     ebp, esi
.text:00403D97                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00403D9B                 call    sub_4044E0
.text:00403DA0                 mov     off_40602C, eax
.text:00403DA5                 mov     ebx, dword_406020
.text:00403DAB                 sub     ebp, ebx
.text:00403DAD                 lea     edi, [eax+ebx*8]
.text:00403DB0                 lea     eax, ds:0[ebp*8]
.text:00403DB7                 cmp     eax, 7
.text:00403DBA                 jbe     short loc_403DD0
.text:00403DBC                 test    edi, 4
.text:00403DC2                 jz      short loc_403DD0
.text:00403DC4                 mov     dword ptr [edi], 0
.text:00403DCA                 sub     eax, 4
.text:00403DCD                 add     edi, 4
.text:00403DD0
.text:00403DD0 loc_403DD0:                             ; CODE XREF: sub_403D40+7A↑j
.text:00403DD0                                         ; sub_403D40+82↑j
.text:00403DD0                 cld
.text:00403DD1                 mov     ecx, eax
.text:00403DD3                 shr     ecx, 2
.text:00403DD6                 xor     eax, eax
.text:00403DD8                 rep stosd
.text:00403DDA                 mov     dword_406020, esi
.text:00403DE0
.text:00403DE0 loc_403DE0:                             ; CODE XREF: sub_403D40+28↑j
.text:00403DE0                 mov     esi, off_40602C
.text:00403DE6                 mov     eax, [esp+2Ch+arg_0]
.text:00403DEA                 mov     ebp, [esi+eax*8]
.text:00403DED                 mov     edi, [esi+eax*8+4]
.text:00403DF1                 mov     esi, [esp+2Ch+arg_C]
.text:00403DF5                 test    esi, esi
.text:00403DF7                 jz      loc_403EC7
.text:00403DFD
.text:00403DFD loc_403DFD:                             ; CODE XREF: sub_403D40+18C↓j
.text:00403DFD                 call    _errno
.text:00403E02                 mov     ebx, [eax]
.text:00403E04                 mov     [esp+2Ch+var_18], esi ; int
.text:00403E08                 mov     ecx, [esi]
.text:00403E0A                 mov     [esp+2Ch+Block], edi ; int
.text:00403E0D                 mov     edx, [esp+2Ch+arg_8]
.text:00403E11                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403E15                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403E19                 mov     ecx, [esp+2Ch+arg_4]
.text:00403E1D                 mov     [esp+2Ch+var_20], edx ; int
.text:00403E21                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403E25                 call    sub_402C00
.text:00403E2A                 mov     esi, eax
.text:00403E2C                 call    _errno
.text:00403E31                 mov     [eax], ebx
.text:00403E33                 cmp     ebp, esi
.text:00403E35                 ja      short loc_403EAB
.text:00403E37                 lea     ebp, [esi+1]
.text:00403E3A                 mov     ebx, off_40602C
.text:00403E40                 cmp     edi, offset unk_407040
.text:00403E46                 mov     esi, [esp+2Ch+arg_0]
.text:00403E4A                 mov     [ebx+esi*8], ebp
.text:00403E4D                 jz      short loc_403E5D
.text:00403E4F                 mov     [esp+2Ch+Block], edi ; Block
.text:00403E52                 call    free
.text:00403E57                 mov     ebx, off_40602C
.text:00403E5D
.text:00403E5D loc_403E5D:                             ; CODE XREF: sub_403D40+10D↑j
.text:00403E5D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00403E60                 call    sub_404450
.text:00403E65                 mov     esi, [esp+2Ch+arg_C]
.text:00403E69                 mov     edi, eax
.text:00403E6B                 mov     eax, [esp+2Ch+arg_0]
.text:00403E6F                 test    esi, esi
.text:00403E71                 mov     [ebx+eax*8+4], edi
.text:00403E75                 jz      short loc_403EC0
.text:00403E77
.text:00403E77 loc_403E77:                             ; CODE XREF: sub_403D40+185↓j
.text:00403E77                 call    _errno
.text:00403E7C                 mov     ebx, [eax]
.text:00403E7E                 mov     [esp+2Ch+var_18], esi ; int
.text:00403E82                 mov     ecx, [esi]
.text:00403E84                 mov     [esp+2Ch+Block], edi ; int
.text:00403E87                 mov     edx, [esp+2Ch+arg_8]
.text:00403E8B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403E8F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403E93                 mov     ecx, [esp+2Ch+arg_4]
.text:00403E97                 mov     [esp+2Ch+var_20], edx ; int
.text:00403E9B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403E9F                 call    sub_402C00
.text:00403EA4                 call    _errno
.text:00403EA9                 mov     [eax], ebx
.text:00403EAB
.text:00403EAB loc_403EAB:                             ; CODE XREF: sub_403D40+F5↑j
.text:00403EAB                 call    _errno
.text:00403EB0                 mov     ebp, [esp+2Ch+var_14]
.text:00403EB4                 mov     [eax], ebp
.text:00403EB6                 add     esp, 1Ch
.text:00403EB9                 mov     eax, edi
.text:00403EBB                 pop     ebx
.text:00403EBC                 pop     esi
.text:00403EBD                 pop     edi
.text:00403EBE                 pop     ebp
.text:00403EBF                 retn
.text:00403EC0 ; ---------------------------------------------------------------------------
.text:00403EC0
.text:00403EC0 loc_403EC0:                             ; CODE XREF: sub_403D40+135↑j
.text:00403EC0                 mov     esi, offset dword_407140
.text:00403EC5                 jmp     short loc_403E77
.text:00403EC7 ; ---------------------------------------------------------------------------
.text:00403EC7
.text:00403EC7 loc_403EC7:                             ; CODE XREF: sub_403D40+B7↑j
.text:00403EC7                 mov     esi, offset dword_407140
.text:00403ECC                 jmp     loc_403DFD
.text:00403ED1 ; ---------------------------------------------------------------------------
.text:00403ED1
.text:00403ED1 loc_403ED1:                             ; CODE XREF: sub_403D40+45↑j
.text:00403ED1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00403ED8                 call    sub_404450
.text:00403EDD                 mov     off_40602C, eax
.text:00403EE2                 mov     edi, dword_406024
.text:00403EE8                 mov     ebx, eax
.text:00403EEA                 mov     ecx, off_406028
.text:00403EF0                 mov     [eax], edi
.text:00403EF2                 mov     [eax+4], ecx
.text:00403EF5                 jmp     loc_403D8B
.text:00403EFA ; ---------------------------------------------------------------------------
.text:00403EFA
.text:00403EFA loc_403EFA:                             ; CODE XREF: sub_403D40+18↑j
.text:00403EFA                 call    abort
.text:00403EFF ; ---------------------------------------------------------------------------
.text:00403EFF
.text:00403EFF loc_403EFF:                             ; CODE XREF: sub_403D40+33↑j
.text:00403EFF                 call    sub_404700
.text:00403EFF sub_403D40      endp
.text:00403EFF
.text:00403EFF ; ---------------------------------------------------------------------------
.text:00403F04                 align 10h
.text:00403F10 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403F10                                         ; DATA XREF: .data:Buffer↓o
.text:00403F42 ; const char Format[12]
.text:00403F42 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404200+50↓o
.text:00403F4E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00403F5E                 db 12h dup(90h)
.text:00403F70
.text:00403F70 ; =============== S U B R O U T I N E =======================================
.text:00403F70
.text:00403F70
.text:00403F70 sub_403F70      proc near               ; DATA XREF: sub_404200+100↓o
.text:00403F70                 push    esp
.text:00403F71                 push    69207369h
.text:00403F76                 jnb     short loc_403F98
.text:00403F78                 db      66h
.text:00403F78                 jb      short near ptr 3FE0h
.text:00403F7B                 and     gs:[ebx+6Fh], dh
.text:00403F7F                 db      66h
.text:00403F7F                 jz      short near ptr 3FF9h
.text:00403F82                 popa
.text:00403F83                 jb      short loc_403FEA
.text:00403F85                 cmp     esp, [eax]
.text:00403F87                 jnb     short near ptr loc_403FEC+2
.text:00403F89                 and     gs:[eax+ebp*2+65h], dh
.text:00403F8E                 and     [ebx+6Fh], dh
.text:00403F91                 jnz     short loc_404005
.text:00403F93                 arpl    [ebp+20h], sp
.text:00403F96                 outsw
.text:00403F98
.text:00403F98 loc_403F98:                             ; CODE XREF: sub_403F70+6↑j
.text:00403F98                 jb      short loc_403FBA
.text:00403F9A                 arpl    [edi+70h], bp
.text:00403F9D                 jns     short loc_404008
.text:00403F9F                 outsb
.text:00403FA0                 and     [bp+di+6Fh], ah
.text:00403FA4                 outsb
.text:00403FA5                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:00403FAE                 and     [eax+ebp*2+65h], dl
.text:00403FB2                 jb      short near ptr loc_404018+1
.text:00403FB4                 and     [ecx+73h], ch
.text:00403FB7                 and     [esi+4Fh], cl
.text:00403FBA
.text:00403FBA loc_403FBA:                             ; CODE XREF: sub_403F70:loc_403F98↑j
.text:00403FBA                 or      dh, [edi+61h]
.text:00403FBD                 jb      short loc_404031
.text:00403FBF                 popa
.text:00403FC0                 outsb
.text:00403FC1                 jz      short loc_40403C
.text:00403FC3                 cmp     esp, [eax]
.text:00403FC5                 outsb
.text:00403FC6                 outsd
.text:00403FC7                 jz      short loc_403FE9
.text:00403FC9                 db      65h
.text:00403FC9                 jbe     short loc_404031
.text:00403FCC                 outsb
.text:00403FCD                 and     [esi+6Fh], ah
.text:00403FD0                 jb      short near ptr loc_403FF0+2
.text:00403FD2                 dec     ebp
.text:00403FD3                 inc     ebp
.text:00403FD4                 push    edx
.text:00403FD5                 inc     ebx
.text:00403FD6                 dec     eax
.text:00403FD7                 inc     ecx
.text:00403FD8                 dec     esi
.text:00403FD9                 push    esp
.text:00403FDA                 inc     ecx
.text:00403FDB                 inc     edx
.text:00403FDC                 dec     ecx
.text:00403FDD                 dec     esp
.text:00403FDE                 dec     ecx
.text:00403FDF                 push    esp
.text:00403FE0                 pop     ecx
.text:00403FE1                 and     [edi+72h], ch
.text:00403FE4                 and     [esi+49h], al
.text:00403FE7                 push    esp
.text:00403FE8                 dec     esi
.text:00403FE9
.text:00403FE9 loc_403FE9:                             ; CODE XREF: sub_403F70+57↑j
.text:00403FE9                 inc     ebp
.text:00403FEA
.text:00403FEA loc_403FEA:                             ; CODE XREF: sub_403F70+13↑j
.text:00403FEA                 push    ebx
.text:00403FEB                 push    ebx
.text:00403FEC
.text:00403FEC loc_403FEC:                             ; CODE XREF: sub_403F70+17↑j
.text:00403FEC                 and     [esi+4Fh], al
.text:00403FEF                 push    edx
.text:00403FF0
.text:00403FF0 loc_403FF0:                             ; CODE XREF: sub_403F70+60↑j
.text:00403FF0                 and     [ecx+20h], al
.text:00403FF3                 push    eax
.text:00403FF4                 inc     ecx
.text:00403FF5                 push    edx
.text:00403FF6                 push    esp
.text:00403FF7                 dec     ecx
.text:00403FF8                 inc     ebx
.text:00403FF9                 push    ebp
.text:00403FFA                 dec     esp
.text:00403FFB                 inc     ecx
.text:00403FFC                 push    edx
.text:00403FFD                 and     [eax+55h], dl
.text:00404000                 push    edx
.text:00404001                 push    eax
.text:00404002                 dec     edi
.text:00404003                 push    ebx
.text:00404004                 inc     ebp
.text:00404005
.text:00404005 loc_404005:                             ; CODE XREF: sub_403F70+21↑j
.text:00404005                 or      al, cs:[eax]
.text:00404008
.text:00404008 loc_404008:                             ; CODE XREF: sub_403F70+2D↑j
.text:00404008                                         ; DATA XREF: sub_404200:loc_404341↓o
.text:00404008                 push    edi
.text:00404009                 jb      short near ptr loc_404073+1
.text:0040400B                 jz      short near ptr loc_404080+1
.text:0040400D                 outs    dx, byte ptr gs:[esi]
.text:0040400F                 and     [edx+79h], ah
.text:00404012                 and     ds:6E612073h, ah
.text:00404018
.text:00404018 loc_404018:                             ; CODE XREF: sub_403F70+42↑j
.text:00404018                 and     fs:0A2E73h, ah
.text:0040401F
.text:0040401F loc_40401F:                             ; DATA XREF: sub_404200:loc_40434D↓o
.text:0040401F                 push    edi
.text:00404020                 jb      short near ptr loc_40408A+1
.text:00404022                 jz      short loc_404098
.text:00404024                 outs    dx, byte ptr gs:[esi]
.text:00404026                 and     [edx+79h], ah
.text:00404029                 and     ds:25202C73h, ah
.text:0040402F                 jnb     short near ptr loc_40405A+3
.text:00404031
.text:00404031 loc_404031:                             ; CODE XREF: sub_403F70+4D↑j
.text:00404031                                         ; sub_403F70+59↑j
.text:00404031                 and     [ecx+6Eh], ah
.text:00404034                 and     fs:0A2E73h, ah
.text:0040403B                 nop
.text:0040403C
.text:0040403C loc_40403C:                             ; CODE XREF: sub_403F70+51↑j
.text:0040403C                 nop
.text:0040403D                 nop
.text:0040403E                 nop
.text:0040403F                 nop
.text:00404040                 nop
.text:00404041                 nop
.text:00404042                 nop
.text:00404043                 nop
.text:00404044                 nop
.text:00404045                 nop
.text:00404046                 nop
.text:00404047                 nop
.text:00404048                 nop
.text:00404049                 nop
.text:0040404A                 nop
.text:0040404B                 nop
.text:0040404C                 nop
.text:0040404D                 nop
.text:0040404E                 nop
.text:0040404F                 nop
.text:0040404F sub_403F70      endp ; sp-analysis failed
.text:0040404F
.text:00404050
.text:00404050 ; =============== S U B R O U T I N E =======================================
.text:00404050
.text:00404050
.text:00404050 sub_404050      proc near               ; DATA XREF: sub_404200:loc_404359↓o
.text:00404050                 push    edi
.text:00404051                 jb      short near ptr loc_4040BA+2
.text:00404053                 jz      short near ptr loc_4040C8+1
.text:00404055                 outs    dx, byte ptr gs:[esi]
.text:00404057                 and     [edx+79h], ah
.text:0040405A
.text:0040405A loc_40405A:                             ; CODE XREF: sub_403F70+BF↑j
.text:0040405A                 and     ds:25202C73h, ah
.text:00404060                 jnb     short near ptr loc_40408D+1
.text:00404062                 and     ds:610A2C73h, ah
.text:00404068                 outsb
.text:00404069                 and     fs:0A2E73h, ah
.text:00404070
.text:00404070 loc_404070:                             ; DATA XREF: sub_404200:loc_404365↓o
.text:00404070                 push    edi
.text:00404071                 jb      short loc_4040DC
.text:00404073
.text:00404073 loc_404073:                             ; CODE XREF: sub_403F70+99↑j
.text:00404073                 jz      short loc_4040E9
.text:00404075                 outs    dx, byte ptr gs:[esi]
.text:00404077                 and     [edx+79h], ah
.text:0040407A                 and     ds:25202C73h, ah
.text:00404080
.text:00404080 loc_404080:                             ; CODE XREF: sub_403F70+9B↑j
.text:00404080                 jnb     short loc_4040AE
.text:00404082                 and     ds:250A2C73h, ah
.text:00404088                 jnb     short near ptr loc_4040B5+1
.text:0040408A
.text:0040408A loc_40408A:                             ; CODE XREF: sub_403F70+B0↑j
.text:0040408A                 and     [ecx+6Eh], ah
.text:0040408D
.text:0040408D loc_40408D:                             ; CODE XREF: sub_404050+10↑j
.text:0040408D                 and     fs:0A2E73h, ah
.text:00404094                 nop
.text:00404095                 nop
.text:00404096                 nop
.text:00404097                 nop
.text:00404098
.text:00404098 loc_404098:                             ; CODE XREF: sub_403F70+B2↑j
.text:00404098                 nop
.text:00404099                 nop
.text:0040409A                 nop
.text:0040409B                 nop
.text:0040409C                 nop
.text:0040409D                 nop
.text:0040409E                 nop
.text:0040409F                 nop
.text:004040A0                 nop
.text:004040A1                 nop
.text:004040A2                 nop
.text:004040A3                 nop
.text:004040A4                 nop
.text:004040A5                 nop
.text:004040A6                 nop
.text:004040A7                 nop
.text:004040A8                 nop
.text:004040A9                 nop
.text:004040AA                 nop
.text:004040AB                 nop
.text:004040AC                 nop
.text:004040AD                 nop
.text:004040AE
.text:004040AE loc_4040AE:                             ; CODE XREF: sub_404050:loc_404080↑j
.text:004040AE                 nop
.text:004040AF                 nop
.text:004040AF sub_404050      endp ; sp-analysis failed
.text:004040AF
.text:004040B0
.text:004040B0 ; =============== S U B R O U T I N E =======================================
.text:004040B0
.text:004040B0
.text:004040B0 sub_4040B0      proc near               ; DATA XREF: sub_404200:loc_404371↓o
.text:004040B0                 push    edi
.text:004040B1                 jb      short loc_40411C
.text:004040B3                 jz      short loc_404129
.text:004040B5
.text:004040B5 loc_4040B5:                             ; CODE XREF: sub_404050+38↑j
.text:004040B5                 outs    dx, byte ptr gs:[esi]
.text:004040B7                 and     [edx+79h], ah
.text:004040BA
.text:004040BA loc_4040BA:                             ; CODE XREF: sub_404050+1↑j
.text:004040BA                 and     ds:25202C73h, ah
.text:004040C0                 jnb     short loc_4040EE
.text:004040C2                 and     ds:250A2C73h, ah
.text:004040C8
.text:004040C8 loc_4040C8:                             ; CODE XREF: sub_404050+3↑j
.text:004040C8                 jnb     short near ptr loc_4040F5+1
.text:004040CA                 and     ds:61202C73h, ah
.text:004040D0                 outsb
.text:004040D1                 and     fs:0A2E73h, ah
.text:004040D8                 nop
.text:004040D9                 nop
.text:004040DA                 nop
.text:004040DB                 nop
.text:004040DC
.text:004040DC loc_4040DC:                             ; CODE XREF: sub_404050+21↑j
.text:004040DC                 nop
.text:004040DD                 nop
.text:004040DE                 nop
.text:004040DF                 nop
.text:004040E0                 nop
.text:004040E1                 nop
.text:004040E2                 nop
.text:004040E3                 nop
.text:004040E4                 nop
.text:004040E5                 nop
.text:004040E6                 nop
.text:004040E7                 nop
.text:004040E8                 nop
.text:004040E9
.text:004040E9 loc_4040E9:                             ; CODE XREF: sub_404050:loc_404073↑j
.text:004040E9                 nop
.text:004040EA                 nop
.text:004040EB                 nop
.text:004040EC                 nop
.text:004040ED                 nop
.text:004040EE
.text:004040EE loc_4040EE:                             ; CODE XREF: sub_4040B0+10↑j
.text:004040EE                 nop
.text:004040EF                 nop
.text:004040EF sub_4040B0      endp ; sp-analysis failed
.text:004040EF
.text:004040F0
.text:004040F0 ; =============== S U B R O U T I N E =======================================
.text:004040F0
.text:004040F0
.text:004040F0 sub_4040F0      proc near               ; DATA XREF: sub_404200:loc_40437D↓o
.text:004040F0                 push    edi
.text:004040F1                 jb      short near ptr loc_404159+3
.text:004040F3                 jz      short loc_404169
.text:004040F5
.text:004040F5 loc_4040F5:                             ; CODE XREF: sub_4040B0:loc_4040C8↑j
.text:004040F5                 outs    dx, byte ptr gs:[esi]
.text:004040F7                 and     [edx+79h], ah
.text:004040FA                 and     ds:25202C73h, ah
.text:00404100                 jnb     short loc_40412E
.text:00404102                 and     ds:250A2C73h, ah
.text:00404108                 jnb     short near ptr loc_404135+1
.text:0040410A                 and     ds:25202C73h, ah
.text:00404110                 jnb     short near ptr loc_40413A+4
.text:00404112                 and     [ecx+6Eh], ah
.text:00404115                 and     fs:0A2E73h, ah
.text:0040411C
.text:0040411C loc_40411C:                             ; CODE XREF: sub_4040B0+1↑j
.text:0040411C                 nop
.text:0040411D                 nop
.text:0040411E                 nop
.text:0040411F                 nop
.text:00404120                 nop
.text:00404121                 nop
.text:00404122                 nop
.text:00404123                 nop
.text:00404124                 nop
.text:00404125                 nop
.text:00404126                 nop
.text:00404127                 nop
.text:00404128                 nop
.text:00404129
.text:00404129 loc_404129:                             ; CODE XREF: sub_4040B0+3↑j
.text:00404129                 nop
.text:0040412A                 nop
.text:0040412B                 nop
.text:0040412C                 nop
.text:0040412D                 nop
.text:0040412E
.text:0040412E loc_40412E:                             ; CODE XREF: sub_4040F0+10↑j
.text:0040412E                 nop
.text:0040412F                 nop
.text:0040412F sub_4040F0      endp ; sp-analysis failed
.text:0040412F
.text:00404130
.text:00404130 ; =============== S U B R O U T I N E =======================================
.text:00404130
.text:00404130
.text:00404130 sub_404130      proc near               ; DATA XREF: sub_404200:loc_404389↓o
.text:00404130                 push    edi
.text:00404131                 jb      short near ptr loc_40419A+2
.text:00404133                 jz      short near ptr loc_4041A4+5
.text:00404135
.text:00404135 loc_404135:                             ; CODE XREF: sub_4040F0+18↑j
.text:00404135                 outs    dx, byte ptr gs:[esi]
.text:00404137                 and     [edx+79h], ah
.text:0040413A
.text:0040413A loc_40413A:                             ; CODE XREF: sub_4040F0+20↑j
.text:0040413A                 and     ds:25202C73h, ah
.text:00404140                 jnb     short loc_40416E
.text:00404142                 and     ds:250A2C73h, ah
.text:00404148                 jnb     short near ptr loc_404175+1
.text:0040414A                 and     ds:25202C73h, ah
.text:00404150                 jnb     short near ptr loc_40417A+4
.text:00404152                 and     ds:610A2C73h, ah
.text:00404158                 outsb
.text:00404159
.text:00404159 loc_404159:                             ; CODE XREF: sub_4040F0+1↑j
.text:00404159                 and     fs:0A2E73h, ah
.text:00404160                 nop
.text:00404161                 nop
.text:00404162                 nop
.text:00404163                 nop
.text:00404164                 nop
.text:00404165                 nop
.text:00404166                 nop
.text:00404167                 nop
.text:00404168                 nop
.text:00404169
.text:00404169 loc_404169:                             ; CODE XREF: sub_4040F0+3↑j
.text:00404169                 nop
.text:0040416A                 nop
.text:0040416B                 nop
.text:0040416C                 nop
.text:0040416D                 nop
.text:0040416E
.text:0040416E loc_40416E:                             ; CODE XREF: sub_404130+10↑j
.text:0040416E                 nop
.text:0040416F                 nop
.text:0040416F sub_404130      endp ; sp-analysis failed
.text:0040416F
.text:00404170
.text:00404170 ; =============== S U B R O U T I N E =======================================
.text:00404170
.text:00404170
.text:00404170 sub_404170      proc near               ; DATA XREF: sub_404200:loc_404395↓o
.text:00404170                 push    edi
.text:00404171                 jb      short near ptr loc_4041DA+2
.text:00404173                 jz      short near ptr loc_4041E5+4
.text:00404175
.text:00404175 loc_404175:                             ; CODE XREF: sub_404130+18↑j
.text:00404175                 outs    dx, byte ptr gs:[esi]
.text:00404177                 and     [edx+79h], ah
.text:0040417A
.text:0040417A loc_40417A:                             ; CODE XREF: sub_404130+20↑j
.text:0040417A                 and     ds:25202C73h, ah
.text:00404180                 jnb     short near ptr loc_4041AA+4
.text:00404182                 and     ds:250A2C73h, ah
.text:00404188                 jnb     short near ptr loc_4041B5+1
.text:0040418A                 and     ds:25202C73h, ah
.text:00404190                 jnb     short near ptr loc_4041BA+4
.text:00404192                 and     ds:250A2C73h, ah
.text:00404198                 jnb     short near ptr loc_4041C2+4
.text:0040419A
.text:0040419A loc_40419A:                             ; CODE XREF: sub_404130+1↑j
.text:0040419A                 and     [ecx+6Eh], ah
.text:0040419D                 and     fs:0A2E73h, ah
.text:004041A4
.text:004041A4 loc_4041A4:                             ; CODE XREF: sub_404130+3↑j
.text:004041A4                 lea     esi, [esi+0]
.text:004041AA
.text:004041AA loc_4041AA:                             ; CODE XREF: sub_404170+10↑j
.text:004041AA                 lea     edi, [edi+0]
.text:004041B0
.text:004041B0 loc_4041B0:                             ; DATA XREF: sub_404200:def_40426D↓o
.text:004041B0                 push    edi
.text:004041B1                 jb      short near ptr loc_40421B+1
.text:004041B3                 jz      short near ptr loc_404228+1
.text:004041B5
.text:004041B5 loc_4041B5:                             ; CODE XREF: sub_404170+18↑j
.text:004041B5                 outs    dx, byte ptr gs:[esi]
.text:004041B7                 and     [edx+79h], ah
.text:004041BA
.text:004041BA loc_4041BA:                             ; CODE XREF: sub_404170+20↑j
.text:004041BA                 and     ds:25202C73h, ah
.text:004041C0                 jnb     short near ptr loc_4041EC+2
.text:004041C2
.text:004041C2 loc_4041C2:                             ; CODE XREF: sub_404170+28↑j
.text:004041C2                 and     ds:250A2C73h, ah
.text:004041C8                 jnb     short near ptr loc_4041F3+3
.text:004041CA                 and     ds:25202C73h, ah
.text:004041D0                 jnb     short near ptr loc_4041F9+5
.text:004041D2                 and     ds:250A2C73h, ah
.text:004041D8                 jnb     short near ptr loc_404204+2
.text:004041DA
.text:004041DA loc_4041DA:                             ; CODE XREF: sub_404170+1↑j
.text:004041DA                 and     ds:61202C73h, ah
.text:004041E0                 outsb
.text:004041E1                 and     fs:[edi+74h], ch
.text:004041E5
.text:004041E5 loc_4041E5:                             ; CODE XREF: sub_404170+3↑j
.text:004041E5                 push    2E737265h
.text:004041EA                 or      al, [eax]
.text:004041EC
.text:004041EC loc_4041EC:                             ; CODE XREF: sub_404170+50↑j
.text:004041EC                                         ; DATA XREF: sub_404200+1B5↓o
.text:004041EC                 and     eax, 73252073h
.text:004041F1                 or      al, [eax]
.text:004041F3
.text:004041F3 loc_4041F3:                             ; CODE XREF: sub_404170+58↑j
.text:004041F3                 lea     esi, [esi+0]
.text:004041F9
.text:004041F9 loc_4041F9:                             ; CODE XREF: sub_404170+60↑j
.text:004041F9                 lea     edi, [edi+0]
.text:004041F9 sub_404170      endp ; sp-analysis failed
.text:004041F9
.text:00404200
.text:00404200 ; =============== S U B R O U T I N E =======================================
.text:00404200
.text:00404200
.text:00404200 ; int __cdecl sub_404200(FILE *, FILE *, int, int, va_list)
.text:00404200 sub_404200      proc near               ; CODE XREF: sub_4029A0+A5↑p
.text:00404200                                         ; .text:004043FA↓p
.text:00404200
.text:00404200 Stream          = dword ptr -2Ch
.text:00404200 Format          = dword ptr -28h
.text:00404200 ArgList         = dword ptr -24h
.text:00404200 var_20          = dword ptr -20h
.text:00404200 var_1C          = dword ptr -1Ch
.text:00404200 var_14          = dword ptr -14h
.text:00404200 arg_0           = dword ptr  4
.text:00404200 arg_4           = dword ptr  8
.text:00404200 arg_8           = dword ptr  0Ch
.text:00404200 arg_C           = dword ptr  10h
.text:00404200 arg_10          = dword ptr  14h
.text:00404200
.text:00404200                 push    ebp
.text:00404201                 push    edi
.text:00404202                 push    esi
.text:00404203                 push    ebx
.text:00404204
.text:00404204 loc_404204:                             ; CODE XREF: sub_404170+68↑j
.text:00404204                 sub     esp, 1Ch
.text:00404207                 xor     ebx, ebx
.text:00404209                 mov     edi, [esp+2Ch+arg_10]
.text:0040420D                 mov     edx, [esp+2Ch+arg_8]
.text:00404211                 mov     esi, [esp+2Ch+arg_0]
.text:00404215                 mov     eax, [edi]
.text:00404217                 mov     ecx, [esp+2Ch+arg_4]
.text:0040421B
.text:0040421B loc_40421B:                             ; CODE XREF: sub_404170+41↑j
.text:0040421B                 mov     [esp+2Ch+var_14], edx
.text:0040421F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404223                 lea     edx, [edi+4]
.text:00404226                 test    eax, eax
.text:00404228
.text:00404228 loc_404228:                             ; CODE XREF: sub_404170+43↑j
.text:00404228                 jz      short loc_40423C
.text:0040422A                 lea     esi, [esi+0]
.text:00404230
.text:00404230 loc_404230:                             ; CODE XREF: sub_404200+3A↓j
.text:00404230                 mov     eax, edx
.text:00404232                 inc     ebx
.text:00404233                 mov     eax, [eax]
.text:00404235                 add     edx, 4
.text:00404238                 test    eax, eax
.text:0040423A                 jnz     short loc_404230
.text:0040423C
.text:0040423C loc_40423C:                             ; CODE XREF: sub_404200:loc_404228↑j
.text:0040423C                 test    ecx, ecx
.text:0040423E                 jz      loc_4043AD
.text:00404244                 mov     [esp+2Ch+var_1C], ebp
.text:00404248                 mov     edx, [esp+2Ch+var_14]
.text:0040424C                 mov     [esp+2Ch+ArgList], ecx
.text:00404250                 mov     [esp+2Ch+Format], offset Format ; Format
.text:00404258                 mov     [esp+2Ch+var_20], edx
.text:0040425C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040425F                 call    fprintf
.text:00404264
.text:00404264 loc_404264:                             ; CODE XREF: sub_404200+1C9↓j
.text:00404264                 cmp     ebx, 9          ; switch 10 cases
.text:00404267                 ja      def_40426D      ; jumptable 0040426D default case
.text:0040426D                 jmp     ds:jpt_40426D[ebx*4] ; switch jump
.text:0040426D ; ---------------------------------------------------------------------------
.text:00404274 jpt_40426D      dd offset loc_40429C    ; DATA XREF: sub_404200+6D↑r
.text:00404274                 dd offset loc_4042A1    ; jump table for switch statement
.text:00404274                 dd offset loc_404341
.text:00404274                 dd offset loc_40434D
.text:00404274                 dd offset loc_404359
.text:00404274                 dd offset loc_404365
.text:00404274                 dd offset loc_404371
.text:00404274                 dd offset loc_40437D
.text:00404274                 dd offset loc_404389
.text:00404274                 dd offset loc_404395
.text:0040429C ; ---------------------------------------------------------------------------
.text:0040429C
.text:0040429C loc_40429C:                             ; CODE XREF: sub_404200+6D↑j
.text:0040429C                                         ; DATA XREF: sub_404200:jpt_40426D↑o
.text:0040429C                 call    abort           ; jumptable 0040426D case 0
.text:004042A1 ; ---------------------------------------------------------------------------
.text:004042A1
.text:004042A1 loc_4042A1:                             ; CODE XREF: sub_404200+6D↑j
.text:004042A1                                         ; DATA XREF: sub_404200:jpt_40426D↑o
.text:004042A1                 mov     [esp+2Ch+Stream], 403F4Eh ; jumptable 0040426D case 1
.text:004042A8                 nop
.text:004042A9                 lea     esi, [esi+0]
.text:004042B0
.text:004042B0 loc_4042B0:                             ; CODE XREF: sub_404200+148↓j
.text:004042B0                                         ; sub_404200+154↓j ...
.text:004042B0                 call    ds:libintl_gettext
.text:004042B6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004042BA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004042BD                 mov     [esp+2Ch+Format], eax ; Format
.text:004042C1                 call    vfprintf
.text:004042C6                 mov     ebx, [esi+4]
.text:004042C9                 dec     ebx
.text:004042CA                 test    ebx, ebx
.text:004042CC                 mov     [esi+4], ebx
.text:004042CF                 js      short loc_40432F
.text:004042D1                 mov     edi, [esi]
.text:004042D3                 mov     byte ptr [edi], 0Ah
.text:004042D6                 inc     dword ptr [esi]
.text:004042D8
.text:004042D8 loc_4042D8:                             ; CODE XREF: sub_404200+13F↓j
.text:004042D8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004042DC                 mov     edx, Buffer
.text:004042E2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004042E5                 call    fputs
.text:004042EA                 mov     ebp, [esi+4]
.text:004042ED                 dec     ebp
.text:004042EE                 test    ebp, ebp
.text:004042F0                 mov     [esi+4], ebp
.text:004042F3                 js      short loc_40431D
.text:004042F5                 mov     ecx, [esi]
.text:004042F7                 mov     byte ptr [ecx], 0Ah
.text:004042FA                 inc     dword ptr [esi]
.text:004042FC
.text:004042FC loc_4042FC:                             ; CODE XREF: sub_404200+12D↓j
.text:004042FC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404300                 mov     [esp+2Ch+Stream], offset sub_403F70
.text:00404307                 call    ds:libintl_gettext
.text:0040430D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404311                 add     esp, 1Ch
.text:00404314                 pop     ebx
.text:00404315                 pop     esi
.text:00404316                 pop     edi
.text:00404317                 pop     ebp
.text:00404318                 jmp     fputs
.text:0040431D ; ---------------------------------------------------------------------------
.text:0040431D
.text:0040431D loc_40431D:                             ; CODE XREF: sub_404200+F3↑j
.text:0040431D                 mov     [esp+2Ch+Format], esi ; File
.text:00404321                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404328                 call    _flsbuf
.text:0040432D                 jmp     short loc_4042FC
.text:0040432F ; ---------------------------------------------------------------------------
.text:0040432F
.text:0040432F loc_40432F:                             ; CODE XREF: sub_404200+CF↑j
.text:0040432F                 mov     [esp+2Ch+Format], esi ; File
.text:00404333                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040433A                 call    _flsbuf
.text:0040433F                 jmp     short loc_4042D8
.text:00404341 ; ---------------------------------------------------------------------------
.text:00404341
.text:00404341 loc_404341:                             ; CODE XREF: sub_404200+6D↑j
.text:00404341                                         ; DATA XREF: sub_404200:jpt_40426D↑o
.text:00404341                 mov     [esp+2Ch+Stream], offset loc_404008 ; jumptable 0040426D case 2
.text:00404348                 jmp     loc_4042B0
.text:0040434D ; ---------------------------------------------------------------------------
.text:0040434D
.text:0040434D loc_40434D:                             ; CODE XREF: sub_404200+6D↑j
.text:0040434D                                         ; DATA XREF: sub_404200:jpt_40426D↑o
.text:0040434D                 mov     [esp+2Ch+Stream], offset loc_40401F ; jumptable 0040426D case 3
.text:00404354                 jmp     loc_4042B0
.text:00404359 ; ---------------------------------------------------------------------------
.text:00404359
.text:00404359 loc_404359:                             ; CODE XREF: sub_404200+6D↑j
.text:00404359                                         ; DATA XREF: sub_404200:jpt_40426D↑o
.text:00404359                 mov     [esp+2Ch+Stream], offset sub_404050 ; jumptable 0040426D case 4
.text:00404360                 jmp     loc_4042B0
.text:00404365 ; ---------------------------------------------------------------------------
.text:00404365
.text:00404365 loc_404365:                             ; CODE XREF: sub_404200+6D↑j
.text:00404365                                         ; DATA XREF: sub_404200:jpt_40426D↑o
.text:00404365                 mov     [esp+2Ch+Stream], offset loc_404070 ; jumptable 0040426D case 5
.text:0040436C                 jmp     loc_4042B0
.text:00404371 ; ---------------------------------------------------------------------------
.text:00404371
.text:00404371 loc_404371:                             ; CODE XREF: sub_404200+6D↑j
.text:00404371                                         ; DATA XREF: sub_404200:jpt_40426D↑o
.text:00404371                 mov     [esp+2Ch+Stream], offset sub_4040B0 ; jumptable 0040426D case 6
.text:00404378                 jmp     loc_4042B0
.text:0040437D ; ---------------------------------------------------------------------------
.text:0040437D
.text:0040437D loc_40437D:                             ; CODE XREF: sub_404200+6D↑j
.text:0040437D                                         ; DATA XREF: sub_404200:jpt_40426D↑o
.text:0040437D                 mov     [esp+2Ch+Stream], offset sub_4040F0 ; jumptable 0040426D case 7
.text:00404384                 jmp     loc_4042B0
.text:00404389 ; ---------------------------------------------------------------------------
.text:00404389
.text:00404389 loc_404389:                             ; CODE XREF: sub_404200+6D↑j
.text:00404389                                         ; DATA XREF: sub_404200:jpt_40426D↑o
.text:00404389                 mov     [esp+2Ch+Stream], offset sub_404130 ; jumptable 0040426D case 8
.text:00404390                 jmp     loc_4042B0
.text:00404395 ; ---------------------------------------------------------------------------
.text:00404395
.text:00404395 loc_404395:                             ; CODE XREF: sub_404200+6D↑j
.text:00404395                                         ; DATA XREF: sub_404200:jpt_40426D↑o
.text:00404395                 mov     [esp+2Ch+Stream], offset sub_404170 ; jumptable 0040426D case 9
.text:0040439C                 jmp     loc_4042B0
.text:004043A1 ; ---------------------------------------------------------------------------
.text:004043A1
.text:004043A1 def_40426D:                             ; CODE XREF: sub_404200+67↑j
.text:004043A1                 mov     [esp+2Ch+Stream], offset loc_4041B0 ; jumptable 0040426D default case
.text:004043A8                 jmp     loc_4042B0
.text:004043AD ; ---------------------------------------------------------------------------
.text:004043AD
.text:004043AD loc_4043AD:                             ; CODE XREF: sub_404200+3E↑j
.text:004043AD                 mov     [esp+2Ch+var_20], ebp
.text:004043B1                 mov     ecx, [esp+2Ch+var_14]
.text:004043B5                 mov     [esp+2Ch+Format], offset loc_4041EC ; Format
.text:004043BD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004043C0                 mov     [esp+2Ch+ArgList], ecx
.text:004043C4                 call    fprintf
.text:004043C9                 jmp     loc_404264
.text:004043C9 sub_404200      endp
.text:004043C9
.text:004043C9 ; ---------------------------------------------------------------------------
.text:004043CE                 align 10h
.text:004043D0                 sub     esp, 1Ch
.text:004043D3                 mov     edx, [esp+2Ch]
.text:004043D7                 lea     ecx, [esp+30h]
.text:004043DB                 mov     [esp+10h], ecx
.text:004043DF                 mov     ecx, [esp+28h]
.text:004043E3                 mov     [esp+0Ch], edx
.text:004043E7                 mov     edx, [esp+24h]
.text:004043EB                 mov     [esp+8], ecx
.text:004043EF                 mov     [esp+4], edx
.text:004043F3                 mov     edx, [esp+20h]
.text:004043F7                 mov     [esp], edx
.text:004043FA                 call    sub_404200
.text:004043FF                 add     esp, 1Ch
.text:00404402                 retn
.text:00404402 ; ---------------------------------------------------------------------------
.text:00404403                 align 10h
.text:00404410                 sub     esp, 0Ch
.text:00404413                 xor     edx, edx
.text:00404415                 mov     ecx, [esp+14h]
.text:00404419                 mov     [esp+8], ebx
.text:0040441D                 mov     eax, 0FFFFFFFFh
.text:00404422                 mov     ebx, [esp+10h]
.text:00404426                 div     ecx
.text:00404428                 cmp     eax, ebx
.text:0040442A                 jb      short loc_404449
.text:0040442C                 mov     edx, ebx
.text:0040442E                 imul    edx, ecx
.text:00404431                 mov     [esp], edx
.text:00404434                 call    malloc
.text:00404439                 test    eax, eax
.text:0040443B                 jz      short loc_404445
.text:0040443D
.text:0040443D loc_40443D:                             ; CODE XREF: .text:00404447↓j
.text:0040443D                 mov     ebx, [esp+8]
.text:00404441                 add     esp, 0Ch
.text:00404444                 retn
.text:00404445 ; ---------------------------------------------------------------------------
.text:00404445
.text:00404445 loc_404445:                             ; CODE XREF: .text:0040443B↑j
.text:00404445                 test    ebx, ebx
.text:00404447                 jz      short loc_40443D
.text:00404449
.text:00404449 loc_404449:                             ; CODE XREF: .text:0040442A↑j
.text:00404449                 call    sub_404700
.text:00404449 ; ---------------------------------------------------------------------------
.text:0040444E                 align 10h
.text:00404450
.text:00404450 ; =============== S U B R O U T I N E =======================================
.text:00404450
.text:00404450
.text:00404450 ; int __cdecl sub_404450(size_t)
.text:00404450 sub_404450      proc near               ; CODE XREF: .text:00403679↑p
.text:00404450                                         ; .text:00403856↑p ...
.text:00404450
.text:00404450 Size            = dword ptr -0Ch
.text:00404450 var_4           = dword ptr -4
.text:00404450 arg_0           = dword ptr  4
.text:00404450
.text:00404450                 sub     esp, 0Ch
.text:00404453                 mov     [esp+0Ch+var_4], ebx
.text:00404457                 mov     ebx, [esp+0Ch+arg_0]
.text:0040445B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040445E                 call    malloc
.text:00404463                 test    eax, eax
.text:00404465                 jz      short loc_404470
.text:00404467
.text:00404467 loc_404467:                             ; CODE XREF: sub_404450+22↓j
.text:00404467                 mov     ebx, [esp+0Ch+var_4]
.text:0040446B                 add     esp, 0Ch
.text:0040446E                 retn
.text:0040446E ; ---------------------------------------------------------------------------
.text:0040446F                 align 10h
.text:00404470
.text:00404470 loc_404470:                             ; CODE XREF: sub_404450+15↑j
.text:00404470                 test    ebx, ebx
.text:00404472                 jz      short loc_404467
.text:00404474                 call    sub_404700
.text:00404474 sub_404450      endp
.text:00404474
.text:00404474 ; ---------------------------------------------------------------------------
.text:00404479                 align 10h
.text:00404480                 sub     esp, 1Ch
.text:00404483                 xor     edx, edx
.text:00404485                 mov     eax, 0FFFFFFFFh
.text:0040448A                 mov     [esp+14h], ebx
.text:0040448E                 mov     ecx, [esp+20h]
.text:00404492                 mov     ebx, [esp+28h]
.text:00404496                 mov     [esp+18h], esi
.text:0040449A                 mov     esi, [esp+24h]
.text:0040449E                 div     ebx
.text:004044A0                 cmp     eax, esi
.text:004044A2                 jb      short loc_4044D4
.text:004044A4                 mov     [esp], ecx
.text:004044A7                 mov     edx, esi
.text:004044A9                 imul    edx, ebx
.text:004044AC                 mov     [esp+4], edx
.text:004044B0                 call    realloc
.text:004044B5                 test    eax, eax
.text:004044B7                 mov     ecx, eax
.text:004044B9                 jz      short loc_4044D0
.text:004044BB
.text:004044BB loc_4044BB:                             ; CODE XREF: .text:004044D2↓j
.text:004044BB                 mov     ebx, [esp+14h]
.text:004044BF                 mov     eax, ecx
.text:004044C1                 mov     esi, [esp+18h]
.text:004044C5                 add     esp, 1Ch
.text:004044C8                 retn
.text:004044C8 ; ---------------------------------------------------------------------------
.text:004044C9                 align 10h
.text:004044D0
.text:004044D0 loc_4044D0:                             ; CODE XREF: .text:004044B9↑j
.text:004044D0                 test    esi, esi
.text:004044D2                 jz      short loc_4044BB
.text:004044D4
.text:004044D4 loc_4044D4:                             ; CODE XREF: .text:004044A2↑j
.text:004044D4                 call    sub_404700
.text:004044D4 ; ---------------------------------------------------------------------------
.text:004044D9                 align 10h
.text:004044E0
.text:004044E0 ; =============== S U B R O U T I N E =======================================
.text:004044E0
.text:004044E0
.text:004044E0 ; int __cdecl sub_4044E0(void *, size_t)
.text:004044E0 sub_4044E0      proc near               ; CODE XREF: sub_403D40+5B↑p
.text:004044E0
.text:004044E0 Block           = dword ptr -0Ch
.text:004044E0 Size            = dword ptr -8
.text:004044E0 var_4           = dword ptr -4
.text:004044E0 arg_0           = dword ptr  4
.text:004044E0 arg_4           = dword ptr  8
.text:004044E0
.text:004044E0                 sub     esp, 0Ch
.text:004044E3                 mov     edx, [esp+0Ch+arg_0]
.text:004044E7                 mov     [esp+0Ch+var_4], ebx
.text:004044EB                 mov     ebx, [esp+0Ch+arg_4]
.text:004044EF                 mov     [esp+0Ch+Block], edx ; Block
.text:004044F2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004044F6                 call    realloc
.text:004044FB                 test    eax, eax
.text:004044FD                 jz      short loc_404507
.text:004044FF
.text:004044FF loc_4044FF:                             ; CODE XREF: sub_4044E0+29↓j
.text:004044FF                 mov     ebx, [esp+0Ch+var_4]
.text:00404503                 add     esp, 0Ch
.text:00404506                 retn
.text:00404507 ; ---------------------------------------------------------------------------
.text:00404507
.text:00404507 loc_404507:                             ; CODE XREF: sub_4044E0+1D↑j
.text:00404507                 test    ebx, ebx
.text:00404509                 jz      short loc_4044FF
.text:0040450B                 call    sub_404700
.text:0040450B sub_4044E0      endp
.text:0040450B
.text:00404510 ; ---------------------------------------------------------------------------
.text:00404510                 jmp     sub_404660
.text:00404510 ; ---------------------------------------------------------------------------
.text:00404515                 align 10h
.text:00404520                 sub     esp, 0Ch
.text:00404523                 mov     edx, [esp+14h]
.text:00404527                 mov     dword ptr [esp+8], 1
.text:0040452F                 mov     [esp+4], edx
.text:00404533                 mov     edx, [esp+10h]
.text:00404537                 mov     [esp], edx
.text:0040453A                 call    sub_404660
.text:0040453F                 add     esp, 0Ch
.text:00404542                 retn
.text:00404542 ; ---------------------------------------------------------------------------
.text:00404543                 align 10h
.text:00404550                 sub     esp, 1Ch
.text:00404553                 mov     [esp+18h], ebx
.text:00404557                 mov     ebx, [esp+20h]
.text:0040455B                 mov     [esp], ebx
.text:0040455E                 call    malloc
.text:00404563                 test    eax, eax
.text:00404565                 jz      short loc_404583
.text:00404567
.text:00404567 loc_404567:                             ; CODE XREF: .text:00404585↓j
.text:00404567                 mov     [esp+8], ebx
.text:0040456B                 mov     dword ptr [esp+4], 0
.text:00404573                 mov     [esp], eax
.text:00404576                 call    memset
.text:0040457B                 mov     ebx, [esp+18h]
.text:0040457F                 add     esp, 1Ch
.text:00404582                 retn
.text:00404583 ; ---------------------------------------------------------------------------
.text:00404583
.text:00404583 loc_404583:                             ; CODE XREF: .text:00404565↑j
.text:00404583                 test    ebx, ebx
.text:00404585                 jz      short loc_404567
.text:00404587                 call    sub_404700
.text:00404587 ; ---------------------------------------------------------------------------
.text:0040458C                 align 10h
.text:00404590                 sub     esp, 0Ch
.text:00404593                 xor     edx, edx
.text:00404595                 mov     ecx, [esp+14h]
.text:00404599                 mov     [esp+8], ebx
.text:0040459D                 mov     eax, 0FFFFFFFFh
.text:004045A2                 mov     ebx, [esp+10h]
.text:004045A6                 div     ecx
.text:004045A8                 cmp     eax, ebx
.text:004045AA                 jb      short loc_4045C8
.text:004045AC                 mov     [esp+4], ecx
.text:004045B0                 mov     [esp], ebx
.text:004045B3                 call    calloc
.text:004045B8                 test    eax, eax
.text:004045BA                 jz      short loc_4045C4
.text:004045BC
.text:004045BC loc_4045BC:                             ; CODE XREF: .text:004045C6↓j
.text:004045BC                 mov     ebx, [esp+8]
.text:004045C0                 add     esp, 0Ch
.text:004045C3                 retn
.text:004045C4 ; ---------------------------------------------------------------------------
.text:004045C4
.text:004045C4 loc_4045C4:                             ; CODE XREF: .text:004045BA↑j
.text:004045C4                 test    ebx, ebx
.text:004045C6                 jz      short loc_4045BC
.text:004045C8
.text:004045C8 loc_4045C8:                             ; CODE XREF: .text:004045AA↑j
.text:004045C8                 call    sub_404700
.text:004045C8 ; ---------------------------------------------------------------------------
.text:004045CD                 align 10h
.text:004045D0                 sub     esp, 1Ch
.text:004045D3                 mov     [esp+18h], ebx
.text:004045D7                 mov     ebx, [esp+24h]
.text:004045DB                 mov     [esp], ebx
.text:004045DE                 call    malloc
.text:004045E3                 test    eax, eax
.text:004045E5                 mov     edx, eax
.text:004045E7                 jz      short loc_404605
.text:004045E9
.text:004045E9 loc_4045E9:                             ; CODE XREF: .text:00404607↓j
.text:004045E9                 mov     [esp+8], ebx
.text:004045ED                 mov     ecx, [esp+20h]
.text:004045F1                 mov     [esp], edx
.text:004045F4                 mov     [esp+4], ecx
.text:004045F8                 call    memcpy
.text:004045FD                 mov     ebx, [esp+18h]
.text:00404601                 add     esp, 1Ch
.text:00404604                 retn
.text:00404605 ; ---------------------------------------------------------------------------
.text:00404605
.text:00404605 loc_404605:                             ; CODE XREF: .text:004045E7↑j
.text:00404605                 test    ebx, ebx
.text:00404607                 jz      short loc_4045E9
.text:00404609                 call    sub_404700
.text:00404609 ; ---------------------------------------------------------------------------
.text:0040460E                 align 10h
.text:00404610                 sub     esp, 1Ch
.text:00404613                 mov     [esp+18h], esi
.text:00404617                 mov     esi, [esp+20h]
.text:0040461B                 mov     [esp+14h], ebx
.text:0040461F                 mov     [esp], esi
.text:00404622                 call    strlen
.text:00404627                 lea     ebx, [eax+1]
.text:0040462A                 mov     [esp], ebx
.text:0040462D                 call    malloc
.text:00404632                 test    eax, eax
.text:00404634                 jz      short loc_404652
.text:00404636
.text:00404636 loc_404636:                             ; CODE XREF: .text:00404654↓j
.text:00404636                 mov     [esp+8], ebx
.text:0040463A                 mov     [esp+4], esi
.text:0040463E                 mov     [esp], eax
.text:00404641                 call    memcpy
.text:00404646                 mov     ebx, [esp+14h]
.text:0040464A                 mov     esi, [esp+18h]
.text:0040464E                 add     esp, 1Ch
.text:00404651                 retn
.text:00404652 ; ---------------------------------------------------------------------------
.text:00404652
.text:00404652 loc_404652:                             ; CODE XREF: .text:00404634↑j
.text:00404652                 test    ebx, ebx
.text:00404654                 jz      short loc_404636
.text:00404656                 call    sub_404700
.text:00404656 ; ---------------------------------------------------------------------------
.text:0040465B                 align 10h
.text:00404660
.text:00404660 ; =============== S U B R O U T I N E =======================================
.text:00404660
.text:00404660
.text:00404660 ; int __cdecl sub_404660(void *, int, int)
.text:00404660 sub_404660      proc near               ; CODE XREF: .text:00404510↑j
.text:00404660                                         ; .text:0040453A↑p
.text:00404660
.text:00404660 Block           = dword ptr -1Ch
.text:00404660 Size            = dword ptr -18h
.text:00404660 var_C           = dword ptr -0Ch
.text:00404660 var_8           = dword ptr -8
.text:00404660 var_4           = dword ptr -4
.text:00404660 arg_0           = dword ptr  4
.text:00404660 arg_4           = dword ptr  8
.text:00404660 arg_8           = dword ptr  0Ch
.text:00404660
.text:00404660                 sub     esp, 1Ch
.text:00404663                 mov     [esp+1Ch+var_8], esi
.text:00404667                 mov     esi, [esp+1Ch+arg_0]
.text:0040466B                 mov     [esp+1Ch+var_4], edi
.text:0040466F                 mov     edi, [esp+1Ch+arg_4]
.text:00404673                 test    esi, esi
.text:00404675                 mov     [esp+1Ch+var_C], ebx
.text:00404679                 mov     ecx, [edi]
.text:0040467B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040467F                 jz      short loc_4046C0
.text:00404681                 xor     edx, edx
.text:00404683                 mov     eax, 7FFFFFFFh
.text:00404688                 div     ebx
.text:0040468A                 cmp     eax, ecx
.text:0040468C                 jb      short loc_4046B9
.text:0040468E                 add     ecx, ecx
.text:00404690
.text:00404690 loc_404690:                             ; CODE XREF: sub_404660+62↓j
.text:00404690                                         ; sub_404660+71↓j ...
.text:00404690                 mov     [edi], ecx
.text:00404692                 imul    ebx, ecx
.text:00404695                 mov     [esp+1Ch+Block], esi ; Block
.text:00404698                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040469C                 call    realloc
.text:004046A1                 test    eax, eax
.text:004046A3                 jz      short loc_4046B5
.text:004046A5
.text:004046A5 loc_4046A5:                             ; CODE XREF: sub_404660+57↓j
.text:004046A5                 mov     ebx, [esp+1Ch+var_C]
.text:004046A9                 mov     esi, [esp+1Ch+var_8]
.text:004046AD                 mov     edi, [esp+1Ch+var_4]
.text:004046B1                 add     esp, 1Ch
.text:004046B4                 retn
.text:004046B5 ; ---------------------------------------------------------------------------
.text:004046B5
.text:004046B5 loc_4046B5:                             ; CODE XREF: sub_404660+43↑j
.text:004046B5                 test    ebx, ebx
.text:004046B7                 jz      short loc_4046A5
.text:004046B9
.text:004046B9 loc_4046B9:                             ; CODE XREF: sub_404660+2C↑j
.text:004046B9                 call    sub_404700
.text:004046B9 ; ---------------------------------------------------------------------------
.text:004046BE                 align 10h
.text:004046C0
.text:004046C0 loc_4046C0:                             ; CODE XREF: sub_404660+1F↑j
.text:004046C0                 test    ecx, ecx
.text:004046C2                 jnz     short loc_404690
.text:004046C4                 xor     edx, edx
.text:004046C6                 mov     eax, 40h ; '@'
.text:004046CB                 div     ebx
.text:004046CD                 test    eax, eax
.text:004046CF                 mov     ecx, eax
.text:004046D1                 jnz     short loc_404690
.text:004046D3                 mov     ecx, 1
.text:004046D8                 jmp     short loc_404690
.text:004046D8 sub_404660      endp
.text:004046D8
.text:004046D8 ; ---------------------------------------------------------------------------
.text:004046DA                 align 10h
.text:004046E0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404700+3↓o
.text:004046F1 ; const char aS[]
.text:004046F1 aS              db '%s',0               ; DATA XREF: sub_404700+10↓o
.text:004046F4                 align 10h
.text:00404700
.text:00404700 ; =============== S U B R O U T I N E =======================================
.text:00404700
.text:00404700 ; Attributes: noreturn
.text:00404700
.text:00404700 sub_404700      proc near               ; CODE XREF: sub_403D40:loc_403EFF↑p
.text:00404700                                         ; .text:loc_404449↑p ...
.text:00404700
.text:00404700 Code            = dword ptr -1Ch
.text:00404700 ErrorMessage    = dword ptr -18h
.text:00404700 var_14          = dword ptr -14h
.text:00404700 var_10          = byte ptr -10h
.text:00404700
.text:00404700                 sub     esp, 1Ch
.text:00404703                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040470A                 call    ds:libintl_gettext
.text:00404710                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00404718                 mov     edx, Code
.text:0040471E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404726                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040472A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040472D                 call    sub_404790
.text:00404732                 call    abort
.text:00404732 sub_404700      endp
.text:00404732
.text:00404732 ; ---------------------------------------------------------------------------
.text:00404737                 align 10h
.text:00404740
.text:00404740 ; =============== S U B R O U T I N E =======================================
.text:00404740
.text:00404740 ; Attributes: thunk
.text:00404740
.text:00404740 libintl_bindtextdomain proc near
.text:00404740                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404740 libintl_bindtextdomain endp
.text:00404740
.text:00404740 ; ---------------------------------------------------------------------------
.text:00404746                 align 10h
.text:00404750                 jmp     ds:libintl_textdomain
.text:00404750 ; ---------------------------------------------------------------------------
.text:00404756                 align 10h
.text:00404760                 jmp     ds:libintl_gettext
.text:00404760 ; ---------------------------------------------------------------------------
.text:00404766                 align 10h
.text:00404770 ; const char aS_0[]
.text:00404770 aS_0            db ': %s',0             ; DATA XREF: sub_404790+B8↓o
.text:00404770                                         ; sub_404894+122↓o
.text:00404775 aUnknownSystemE db 'Unknown system error',0
.text:00404775                                         ; DATA XREF: sub_404790:loc_40485D↓o
.text:00404775                                         ; sub_404894:loc_4049CE↓o
.text:0040478A ; const char aS_1[]
.text:0040478A aS_1            db '%s: ',0             ; DATA XREF: sub_404790:loc_404864↓o
.text:0040478F                 align 10h
.text:00404790
.text:00404790 ; =============== S U B R O U T I N E =======================================
.text:00404790
.text:00404790
.text:00404790 ; int __cdecl sub_404790(int Code, int ErrorMessage, char *, char)
.text:00404790 sub_404790      proc near               ; CODE XREF: sub_401370+111↑p
.text:00404790                                         ; sub_401370+1A2↑p ...
.text:00404790
.text:00404790 Stream          = dword ptr -1Ch
.text:00404790 Format          = dword ptr -18h
.text:00404790 ArgList         = dword ptr -14h
.text:00404790 Code            = dword ptr  4
.text:00404790 ErrorMessage    = dword ptr  8
.text:00404790 arg_8           = dword ptr  0Ch
.text:00404790 arg_C           = byte ptr  10h
.text:00404790
.text:00404790                 push    esi
.text:00404791                 push    ebx
.text:00404792                 sub     esp, 14h
.text:00404795                 mov     edx, ds:_iob
.text:0040479B                 mov     esi, [esp+1Ch+Code]
.text:0040479F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004047A3                 add     edx, 20h ; ' '
.text:004047A6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004047A9                 call    fflush
.text:004047AE                 mov     eax, ds:dword_4071C0
.text:004047B3                 test    eax, eax
.text:004047B5                 jz      loc_404864
.text:004047BB                 call    eax ; dword_4071C0
.text:004047BD
.text:004047BD loc_4047BD:                             ; CODE XREF: sub_404790+F7↓j
.text:004047BD                 lea     edx, [esp+1Ch+arg_C]
.text:004047C1                 mov     ecx, [esp+1Ch+arg_8]
.text:004047C5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004047C9                 mov     edx, ds:_iob
.text:004047CF                 mov     [esp+1Ch+Format], ecx ; Format
.text:004047D3                 add     edx, 40h ; '@'
.text:004047D6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004047D9                 call    vfprintf
.text:004047DE                 inc     ds:dword_4071D0
.text:004047E4                 test    ebx, ebx
.text:004047E6                 jnz     short loc_404832
.text:004047E8
.text:004047E8 loc_4047E8:                             ; CODE XREF: sub_404790+CB↓j
.text:004047E8                 mov     edx, ds:_iob
.text:004047EE                 lea     ecx, [edx+40h]
.text:004047F1                 mov     ebx, [ecx+4]
.text:004047F4                 dec     ebx
.text:004047F5                 test    ebx, ebx
.text:004047F7                 mov     [ecx+4], ebx
.text:004047FA                 js      short loc_404820
.text:004047FC                 mov     ecx, [edx+40h]
.text:004047FF                 mov     byte ptr [ecx], 0Ah
.text:00404802                 inc     dword ptr [edx+40h]
.text:00404805
.text:00404805 loc_404805:                             ; CODE XREF: sub_404790+A0↓j
.text:00404805                 mov     edx, ds:_iob
.text:0040480B                 add     edx, 40h ; '@'
.text:0040480E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404811                 call    fflush
.text:00404816                 test    esi, esi
.text:00404818                 jnz     short loc_40488C
.text:0040481A                 add     esp, 14h
.text:0040481D                 pop     ebx
.text:0040481E                 pop     esi
.text:0040481F                 retn
.text:00404820 ; ---------------------------------------------------------------------------
.text:00404820
.text:00404820 loc_404820:                             ; CODE XREF: sub_404790+6A↑j
.text:00404820                 mov     [esp+1Ch+Format], ecx ; File
.text:00404824                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040482B                 call    _flsbuf
.text:00404830                 jmp     short loc_404805
.text:00404832 ; ---------------------------------------------------------------------------
.text:00404832
.text:00404832 loc_404832:                             ; CODE XREF: sub_404790+56↑j
.text:00404832                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404835                 call    strerror
.text:0040483A                 test    eax, eax
.text:0040483C                 jz      short loc_40485D
.text:0040483E
.text:0040483E loc_40483E:                             ; CODE XREF: sub_404790+D2↓j
.text:0040483E                 mov     [esp+1Ch+ArgList], eax
.text:00404842                 mov     ebx, ds:_iob
.text:00404848                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00404850                 add     ebx, 40h ; '@'
.text:00404853                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404856                 call    fprintf
.text:0040485B                 jmp     short loc_4047E8
.text:0040485D ; ---------------------------------------------------------------------------
.text:0040485D
.text:0040485D loc_40485D:                             ; CODE XREF: sub_404790+AC↑j
.text:0040485D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404862                 jmp     short loc_40483E
.text:00404864 ; ---------------------------------------------------------------------------
.text:00404864
.text:00404864 loc_404864:                             ; CODE XREF: sub_404790+25↑j
.text:00404864                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040486C                 mov     edx, ds:_iob
.text:00404872                 mov     ecx, ds:dword_407190
.text:00404878                 add     edx, 40h ; '@'
.text:0040487B                 mov     [esp+1Ch+ArgList], ecx
.text:0040487F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404882                 call    fprintf
.text:00404887                 jmp     loc_4047BD
.text:0040488C ; ---------------------------------------------------------------------------
.text:0040488C
.text:0040488C loc_40488C:                             ; CODE XREF: sub_404790+88↑j
.text:0040488C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040488F                 call    exit
.text:0040488F sub_404790      endp
.text:0040488F
.text:00404894
.text:00404894 ; =============== S U B R O U T I N E =======================================
.text:00404894
.text:00404894
.text:00404894 ; int __cdecl sub_404894(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404894 sub_404894      proc near               ; DATA XREF: sub_404894+77↓o
.text:00404894
.text:00404894 Stream          = dword ptr -28h
.text:00404894 Format          = dword ptr -24h
.text:00404894 ArgList         = dword ptr -20h
.text:00404894 var_1C          = dword ptr -1Ch
.text:00404894 Code            = dword ptr  8
.text:00404894 ErrorMessage    = dword ptr  0Ch
.text:00404894 Str2            = dword ptr  10h
.text:00404894 arg_10          = dword ptr  14h
.text:00404894 arg_14          = dword ptr  18h
.text:00404894 arg_18          = byte ptr  1Ch
.text:00404894
.text:00404894                 and     eax, 64253A73h
.text:00404899                 cmp     ah, [eax]
.text:0040489B
.text:0040489B loc_40489B:                             ; DATA XREF: sub_404894:loc_4049D5↓o
.text:0040489B                 add     ds:55003A73h, ah
.text:004048A1                 push    edi
.text:004048A2                 push    esi
.text:004048A3                 push    ebx
.text:004048A4                 sub     esp, 1Ch
.text:004048A7                 mov     edx, ds:dword_407200
.text:004048AD                 mov     ebp, [esp+28h+Code]
.text:004048B1                 mov     edi, [esp+28h+ErrorMessage]
.text:004048B5                 test    edx, edx
.text:004048B7                 mov     ebx, [esp+28h+Str2]
.text:004048BB                 mov     esi, [esp+28h+arg_10]
.text:004048BF                 jz      short loc_4048D9
.text:004048C1                 cmp     ds:dword_407180, esi
.text:004048C7                 jz      loc_404A00
.text:004048CD
.text:004048CD loc_4048CD:                             ; CODE XREF: sub_404894+18D↓j
.text:004048CD                 mov     ds:Str1, ebx
.text:004048D3                 mov     ds:dword_407180, esi
.text:004048D9
.text:004048D9 loc_4048D9:                             ; CODE XREF: sub_404894+2B↑j
.text:004048D9                 mov     edx, ds:_iob
.text:004048DF                 add     edx, 20h ; ' '
.text:004048E2                 mov     [esp+28h+Stream], edx ; Stream
.text:004048E5                 call    fflush
.text:004048EA                 mov     eax, ds:dword_4071C0
.text:004048EF                 test    eax, eax
.text:004048F1                 jz      loc_4049D5
.text:004048F7                 call    eax ; dword_4071C0
.text:004048F9
.text:004048F9 loc_4048F9:                             ; CODE XREF: sub_404894+164↓j
.text:004048F9                 test    ebx, ebx
.text:004048FB                 jz      short loc_40491E
.text:004048FD                 mov     [esp+28h+ArgList], ebx
.text:00404901                 mov     ebx, ds:_iob
.text:00404907                 mov     [esp+28h+var_1C], esi
.text:0040490B                 mov     [esp+28h+Format], offset sub_404894 ; Format
.text:00404913                 add     ebx, 40h ; '@'
.text:00404916                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404919                 call    fprintf
.text:0040491E
.text:0040491E loc_40491E:                             ; CODE XREF: sub_404894+67↑j
.text:0040491E                 mov     esi, ds:_iob
.text:00404924                 lea     edx, [esp+28h+arg_18]
.text:00404928                 mov     ecx, [esp+28h+arg_14]
.text:0040492C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404930                 add     esi, 40h ; '@'
.text:00404933                 mov     [esp+28h+Format], ecx ; Format
.text:00404937                 mov     [esp+28h+Stream], esi ; Stream
.text:0040493A                 call    vfprintf
.text:0040493F                 inc     ds:dword_4071D0
.text:00404945                 test    edi, edi
.text:00404947                 jnz     short loc_4049A0
.text:00404949
.text:00404949 loc_404949:                             ; CODE XREF: sub_404894+135↓j
.text:00404949                 mov     edx, ds:_iob
.text:0040494F                 lea     ecx, [edx+40h]
.text:00404952                 mov     ebx, [ecx+4]
.text:00404955                 dec     ebx
.text:00404956                 test    ebx, ebx
.text:00404958                 mov     [ecx+4], ebx
.text:0040495B                 js      short loc_404987
.text:0040495D                 mov     esi, [edx+40h]
.text:00404960                 mov     byte ptr [esi], 0Ah
.text:00404963                 inc     dword ptr [edx+40h]
.text:00404966
.text:00404966 loc_404966:                             ; CODE XREF: sub_404894+103↓j
.text:00404966                 mov     ecx, ds:_iob
.text:0040496C                 add     ecx, 40h ; '@'
.text:0040496F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404972                 call    fflush
.text:00404977                 test    ebp, ebp
.text:00404979                 jnz     loc_404A26
.text:0040497F
.text:0040497F loc_40497F:                             ; CODE XREF: sub_404894+173↓j
.text:0040497F                                         ; sub_404894+187↓j
.text:0040497F                 add     esp, 1Ch
.text:00404982                 pop     ebx
.text:00404983                 pop     esi
.text:00404984                 pop     edi
.text:00404985                 pop     ebp
.text:00404986                 retn
.text:00404987 ; ---------------------------------------------------------------------------
.text:00404987
.text:00404987 loc_404987:                             ; CODE XREF: sub_404894+C7↑j
.text:00404987                 mov     [esp+28h+Format], ecx ; File
.text:0040498B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404992                 call    _flsbuf
.text:00404997                 jmp     short loc_404966
.text:00404997 ; ---------------------------------------------------------------------------
.text:00404999                 align 10h
.text:004049A0
.text:004049A0 loc_4049A0:                             ; CODE XREF: sub_404894+B3↑j
.text:004049A0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004049A3                 call    strerror
.text:004049A8                 test    eax, eax
.text:004049AA                 jz      short loc_4049CE
.text:004049AC
.text:004049AC loc_4049AC:                             ; CODE XREF: sub_404894+13F↓j
.text:004049AC                 mov     [esp+28h+ArgList], eax
.text:004049B0                 mov     edi, ds:_iob
.text:004049B6                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:004049BE                 add     edi, 40h ; '@'
.text:004049C1                 mov     [esp+28h+Stream], edi ; Stream
.text:004049C4                 call    fprintf
.text:004049C9                 jmp     loc_404949
.text:004049CE ; ---------------------------------------------------------------------------
.text:004049CE
.text:004049CE loc_4049CE:                             ; CODE XREF: sub_404894+116↑j
.text:004049CE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004049D3                 jmp     short loc_4049AC
.text:004049D5 ; ---------------------------------------------------------------------------
.text:004049D5
.text:004049D5 loc_4049D5:                             ; CODE XREF: sub_404894+5D↑j
.text:004049D5                 mov     [esp+28h+Format], (offset loc_40489B+1) ; Format
.text:004049DD                 mov     ecx, ds:_iob
.text:004049E3                 mov     edx, ds:dword_407190
.text:004049E9                 add     ecx, 40h ; '@'
.text:004049EC                 mov     [esp+28h+ArgList], edx
.text:004049F0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004049F3                 call    fprintf
.text:004049F8                 jmp     loc_4048F9
.text:004049F8 ; ---------------------------------------------------------------------------
.text:004049FD                 align 10h
.text:00404A00
.text:00404A00 loc_404A00:                             ; CODE XREF: sub_404894+33↑j
.text:00404A00                 mov     eax, ds:Str1
.text:00404A05                 cmp     ebx, eax
.text:00404A07                 jz      loc_40497F
.text:00404A0D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404A11                 mov     [esp+28h+Stream], eax ; Str1
.text:00404A14                 call    strcmp
.text:00404A19                 test    eax, eax
.text:00404A1B                 jz      loc_40497F
.text:00404A21                 jmp     loc_4048CD
.text:00404A26 ; ---------------------------------------------------------------------------
.text:00404A26
.text:00404A26 loc_404A26:                             ; CODE XREF: sub_404894+E5↑j
.text:00404A26                 mov     [esp+28h+Stream], ebp ; Code
.text:00404A29                 call    exit
.text:00404A29 sub_404894      endp ; sp-analysis failed
.text:00404A29
.text:00404A29 ; ---------------------------------------------------------------------------
.text:00404A2E                 align 10h
.text:00404A30
.text:00404A30 ; =============== S U B R O U T I N E =======================================
.text:00404A30
.text:00404A30
.text:00404A30 ; int __cdecl sub_404A30(LPCSTR)
.text:00404A30 sub_404A30      proc near               ; CODE XREF: sub_401370+154↑p
.text:00404A30
.text:00404A30 lpFileName      = dword ptr -1Ch
.text:00404A30 AccessMode      = dword ptr -18h
.text:00404A30 var_8           = dword ptr -8
.text:00404A30 var_4           = dword ptr -4
.text:00404A30 arg_0           = dword ptr  4
.text:00404A30
.text:00404A30                 sub     esp, 1Ch
.text:00404A33                 mov     [esp+1Ch+var_8], ebx
.text:00404A37                 mov     ebx, [esp+1Ch+arg_0]
.text:00404A3B                 mov     [esp+1Ch+var_4], esi
.text:00404A3F                 test    ebx, ebx
.text:00404A41                 jz      loc_404AD2
.text:00404A47                 call    _errno
.text:00404A4C                 mov     esi, [eax]
.text:00404A4E                 mov     [esp+1Ch+AccessMode], 2 ; int
.text:00404A56                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:00404A59                 call    sub_404D90
.text:00404A5E                 test    eax, eax
.text:00404A60                 jnz     short loc_404AC0
.text:00404A62
.text:00404A62 loc_404A62:                             ; CODE XREF: sub_404A30+A0↓j
.text:00404A62                 mov     [esp+1Ch+AccessMode], 10h ; int
.text:00404A6A                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:00404A6D                 call    sub_404D90
.text:00404A72                 test    eax, eax
.text:00404A74                 jz      short loc_404AB1
.text:00404A76                 call    _errno
.text:00404A7B                 mov     [eax], esi
.text:00404A7D                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:00404A80                 call    DeleteFileA
.text:00404A85                 sub     esp, 4
.text:00404A88                 xor     edx, edx
.text:00404A8A                 test    eax, eax
.text:00404A8C                 jz      short loc_404A9C
.text:00404A8E
.text:00404A8E loc_404A8E:                             ; CODE XREF: sub_404A30+7F↓j
.text:00404A8E                 mov     ebx, [esp+1Ch+var_8]
.text:00404A92                 mov     eax, edx
.text:00404A94                 mov     esi, [esp+1Ch+var_4]
.text:00404A98                 add     esp, 1Ch
.text:00404A9B                 retn
.text:00404A9C ; ---------------------------------------------------------------------------
.text:00404A9C
.text:00404A9C loc_404A9C:                             ; CODE XREF: sub_404A30+5C↑j
.text:00404A9C                 call    sub_404D70
.text:00404AA1                 mov     esi, eax
.text:00404AA3                 call    _errno
.text:00404AA8                 mov     [eax], esi
.text:00404AAA
.text:00404AAA loc_404AAA:                             ; CODE XREF: sub_404A30+8C↓j
.text:00404AAA                                         ; sub_404A30+AD↓j
.text:00404AAA                 mov     edx, 0FFFFFFFFh
.text:00404AAF                 jmp     short loc_404A8E
.text:00404AB1 ; ---------------------------------------------------------------------------
.text:00404AB1
.text:00404AB1 loc_404AB1:                             ; CODE XREF: sub_404A30+44↑j
.text:00404AB1                 call    _errno
.text:00404AB6                 mov     dword ptr [eax], 15h
.text:00404ABC                 jmp     short loc_404AAA
.text:00404ABC ; ---------------------------------------------------------------------------
.text:00404ABE                 align 10h
.text:00404AC0
.text:00404AC0 loc_404AC0:                             ; CODE XREF: sub_404A30+30↑j
.text:00404AC0                 mov     [esp+1Ch+AccessMode], 180h ; AccessMode
.text:00404AC8                 mov     [esp+1Ch+lpFileName], ebx ; FileName
.text:00404ACB                 call    _chmod
.text:00404AD0                 jmp     short loc_404A62
.text:00404AD2 ; ---------------------------------------------------------------------------
.text:00404AD2
.text:00404AD2 loc_404AD2:                             ; CODE XREF: sub_404A30+11↑j
.text:00404AD2                 call    _errno
.text:00404AD7                 mov     dword ptr [eax], 16h
.text:00404ADD                 jmp     short loc_404AAA
.text:00404ADD sub_404A30      endp
.text:00404ADD
.text:00404ADD ; ---------------------------------------------------------------------------
.text:00404ADF                 align 10h
.text:00404AE0
.text:00404AE0 ; =============== S U B R O U T I N E =======================================
.text:00404AE0
.text:00404AE0 ; Attributes: info_from_lumina
.text:00404AE0
.text:00404AE0 ___get_errno    proc near               ; CODE XREF: sub_404D70+B↓p
.text:00404AE0
.text:00404AE0 arg_0           = dword ptr  4
.text:00404AE0
.text:00404AE0                 mov     eax, [esp+arg_0]
.text:00404AE4                 cmp     eax, 53h ; 'S'
.text:00404AE7                 jg      loc_404BE0
.text:00404AED                 cmp     eax, 52h ; 'R'
.text:00404AF0                 jge     short loc_404B42
.text:00404AF2                 cmp     eax, 0Fh
.text:00404AF5                 jz      short loc_404B10
.text:00404AF7                 cmp     eax, 0Fh
.text:00404AFA                 jg      short loc_404B70
.text:00404AFC                 cmp     eax, 9
.text:00404AFF                 jg      short loc_404B50
.text:00404B01                 cmp     eax, 7
.text:00404B04                 jge     short loc_404B49
.text:00404B06                 cmp     eax, 3
.text:00404B09                 jg      short loc_404B2A
.text:00404B0B                 cmp     eax, 2
.text:00404B0E                 jl      short loc_404B23
.text:00404B10
.text:00404B10 loc_404B10:                             ; CODE XREF: ___get_errno+15↑j
.text:00404B10                                         ; ___get_errno+9D↓j ...
.text:00404B10                 mov     edx, 2
.text:00404B15                 lea     esi, [esi+0]
.text:00404B19                 lea     edi, [edi+0]
.text:00404B20
.text:00404B20 loc_404B20:                             ; CODE XREF: ___get_errno+48↓j
.text:00404B20                                         ; ___get_errno+59↓j ...
.text:00404B20                 mov     eax, edx
.text:00404B22                 retn
.text:00404B23 ; ---------------------------------------------------------------------------
.text:00404B23
.text:00404B23 loc_404B23:                             ; CODE XREF: ___get_errno+2E↑j
.text:00404B23                                         ; ___get_errno+78↓j ...
.text:00404B23                 mov     edx, 16h
.text:00404B28                 jmp     short loc_404B20
.text:00404B2A ; ---------------------------------------------------------------------------
.text:00404B2A
.text:00404B2A loc_404B2A:                             ; CODE XREF: ___get_errno+29↑j
.text:00404B2A                 cmp     eax, 5
.text:00404B2D                 jz      short loc_404B42
.text:00404B2F                 cmp     eax, 5
.text:00404B32                 jg      short loc_404B3B
.text:00404B34                 mov     edx, 18h
.text:00404B39                 jmp     short loc_404B20
.text:00404B3B ; ---------------------------------------------------------------------------
.text:00404B3B
.text:00404B3B loc_404B3B:                             ; CODE XREF: ___get_errno+52↑j
.text:00404B3B                                         ; ___get_errno+180↓j
.text:00404B3B                 mov     edx, 9
.text:00404B40                 jmp     short loc_404B20
.text:00404B42 ; ---------------------------------------------------------------------------
.text:00404B42
.text:00404B42 loc_404B42:                             ; CODE XREF: ___get_errno+10↑j
.text:00404B42                                         ; ___get_errno+4D↑j ...
.text:00404B42                 mov     edx, 0Dh
.text:00404B47                 jmp     short loc_404B20
.text:00404B49 ; ---------------------------------------------------------------------------
.text:00404B49
.text:00404B49 loc_404B49:                             ; CODE XREF: ___get_errno+24↑j
.text:00404B49                                         ; ___get_errno+73↓j ...
.text:00404B49                 mov     edx, 0Ch
.text:00404B4E                 jmp     short loc_404B20
.text:00404B50 ; ---------------------------------------------------------------------------
.text:00404B50
.text:00404B50 loc_404B50:                             ; CODE XREF: ___get_errno+1F↑j
.text:00404B50                 cmp     eax, 0Dh
.text:00404B53                 jg      short loc_404B49
.text:00404B55                 cmp     eax, 0Ch
.text:00404B58                 jge     short loc_404B23
.text:00404B5A                 cmp     eax, 0Ah
.text:00404B5D                 mov     edx, 7
.text:00404B62                 jz      short loc_404B20
.text:00404B64                 cmp     eax, 0Bh
.text:00404B67                 jnz     short loc_404B23
.text:00404B69
.text:00404B69 loc_404B69:                             ; CODE XREF: ___get_errno+21A↓j
.text:00404B69                 mov     edx, 8
.text:00404B6E                 jmp     short loc_404B20
.text:00404B70 ; ---------------------------------------------------------------------------
.text:00404B70
.text:00404B70 loc_404B70:                             ; CODE XREF: ___get_errno+1A↑j
.text:00404B70                 cmp     eax, 22h ; '"'
.text:00404B73                 jg      short loc_404BA4
.text:00404B75                 cmp     eax, 16h
.text:00404B78                 jge     short loc_404B42
.text:00404B7A                 cmp     eax, 12h
.text:00404B7D                 jz      short loc_404B10
.text:00404B7F                 cmp     eax, 12h
.text:00404B82                 jg      short loc_404B95
.text:00404B84                 cmp     eax, 10h
.text:00404B87                 jz      short loc_404B42
.text:00404B89                 mov     edx, 12h
.text:00404B8E                 cmp     eax, 11h
.text:00404B91
.text:00404B91 loc_404B91:                             ; CODE XREF: ___get_errno+172↓j
.text:00404B91                                         ; ___get_errno+24C↓j ...
.text:00404B91                 jnz     short loc_404B23
.text:00404B93                 jmp     short loc_404B20
.text:00404B95 ; ---------------------------------------------------------------------------
.text:00404B95
.text:00404B95 loc_404B95:                             ; CODE XREF: ___get_errno+A2↑j
.text:00404B95                 cmp     eax, 14h
.text:00404B98                 jle     short loc_404B42
.text:00404B9A
.text:00404B9A loc_404B9A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00404B9A                 mov     edx, 10h
.text:00404B9F                 jmp     loc_404B20
.text:00404BA4 ; ---------------------------------------------------------------------------
.text:00404BA4
.text:00404BA4 loc_404BA4:                             ; CODE XREF: ___get_errno+93↑j
.text:00404BA4                 cmp     eax, 41h ; 'A'
.text:00404BA7                 jz      short loc_404B42
.text:00404BA9                 cmp     eax, 41h ; 'A'
.text:00404BAC                 jg      short loc_404BC1
.text:00404BAE                 cmp     eax, 24h ; '$'
.text:00404BB1                 jz      short loc_404B42
.text:00404BB3                 cmp     eax, 35h ; '5'
.text:00404BB6                 jnz     loc_404B23
.text:00404BBC                 jmp     loc_404B10
.text:00404BC1 ; ---------------------------------------------------------------------------
.text:00404BC1
.text:00404BC1 loc_404BC1:                             ; CODE XREF: ___get_errno+CC↑j
.text:00404BC1                 cmp     eax, 43h ; 'C'
.text:00404BC4                 jz      loc_404B10
.text:00404BCA                 cmp     eax, 50h ; 'P'
.text:00404BCD                 jnz     loc_404B23
.text:00404BD3
.text:00404BD3 loc_404BD3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00404BD3                 mov     edx, 11h
.text:00404BD8                 jmp     loc_404B20
.text:00404BD8 ; ---------------------------------------------------------------------------
.text:00404BDD                 align 10h
.text:00404BE0
.text:00404BE0 loc_404BE0:                             ; CODE XREF: ___get_errno+7↑j
.text:00404BE0                 cmp     eax, 0A1h ; '¡'
.text:00404BE5                 jz      loc_404B10
.text:00404BEB                 cmp     eax, 0A1h ; '¡'
.text:00404BF0                 jg      loc_404CA0
.text:00404BF6                 cmp     eax, 81h
.text:00404BFB                 jg      short loc_404C65
.text:00404BFD                 cmp     eax, 80h ; '€'
.text:00404C02                 mov     edx, 0Ah
.text:00404C07                 jge     loc_404B20
.text:00404C0D                 cmp     eax, 6Ch ; 'l'
.text:00404C10                 jz      loc_404B42
.text:00404C16                 cmp     eax, 6Ch ; 'l'
.text:00404C19                 jg      short loc_404C37
.text:00404C1B                 cmp     eax, 57h ; 'W'
.text:00404C1E                 jz      loc_404B23
.text:00404C24                 cmp     eax, 59h ; 'Y'
.text:00404C27                 jnz     loc_404B23
.text:00404C2D
.text:00404C2D loc_404C2D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00404C2D                                         ; ___get_errno+23C↓j
.text:00404C2D                 mov     edx, 0Bh
.text:00404C32                 jmp     loc_404B20
.text:00404C37 ; ---------------------------------------------------------------------------
.text:00404C37
.text:00404C37 loc_404C37:                             ; CODE XREF: ___get_errno+139↑j
.text:00404C37                 cmp     eax, 70h ; 'p'
.text:00404C3A                 mov     edx, 1Ch
.text:00404C3F                 jz      loc_404B20
.text:00404C45                 cmp     eax, 70h ; 'p'
.text:00404C48                 jg      short loc_404C57
.text:00404C4A                 mov     edx, 20h ; ' '
.text:00404C4F                 cmp     eax, 6Dh ; 'm'
.text:00404C52                 jmp     loc_404B91
.text:00404C57 ; ---------------------------------------------------------------------------
.text:00404C57
.text:00404C57 loc_404C57:                             ; CODE XREF: ___get_errno+168↑j
.text:00404C57                 cmp     eax, 72h ; 'r'
.text:00404C5A
.text:00404C5A loc_404C5A:                             ; CODE XREF: ___get_errno+19C↓j
.text:00404C5A                 jnz     loc_404B23
.text:00404C60                 jmp     loc_404B3B
.text:00404C65 ; ---------------------------------------------------------------------------
.text:00404C65
.text:00404C65 loc_404C65:                             ; CODE XREF: ___get_errno+11B↑j
.text:00404C65                 cmp     eax, 84h ; '„'
.text:00404C6A                 jz      loc_404B42
.text:00404C70                 cmp     eax, 84h ; '„'
.text:00404C75                 jg      short loc_404C7E
.text:00404C77                 cmp     eax, 82h ; '‚'
.text:00404C7C                 jmp     short loc_404C5A
.text:00404C7E ; ---------------------------------------------------------------------------
.text:00404C7E
.text:00404C7E loc_404C7E:                             ; CODE XREF: ___get_errno+195↑j
.text:00404C7E                 cmp     eax, 91h ; '‘'
.text:00404C83                 mov     edx, 29h ; ')'
.text:00404C88                 jz      loc_404B20
.text:00404C8E                 cmp     eax, 9Eh ; 'ž'
.text:00404C93
.text:00404C93 loc_404C93:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00404C93                 jnz     loc_404B23
.text:00404C99                 jmp     loc_404B42
.text:00404C99 ; ---------------------------------------------------------------------------
.text:00404C9E                 align 10h
.text:00404CA0
.text:00404CA0 loc_404CA0:                             ; CODE XREF: ___get_errno+110↑j
.text:00404CA0                 cmp     eax, 0CEh ; 'Î'
.text:00404CA5                 jz      loc_404B10
.text:00404CAB                 cmp     eax, 0CEh ; 'Î'
.text:00404CB0                 jg      short loc_404D00
.text:00404CB2                 cmp     eax, 0AAh ; 'ª'
.text:00404CB7                 jz      loc_404B9A
.text:00404CBD                 cmp     eax, 0AAh ; 'ª'
.text:00404CC2                 jg      short loc_404CD6
.text:00404CC4                 cmp     eax, 0A4h ; '¤'
.text:00404CC9                 jz      loc_404C2D
.text:00404CCF                 cmp     eax, 0A7h ; '§'
.text:00404CD4                 jmp     short loc_404C93
.text:00404CD6 ; ---------------------------------------------------------------------------
.text:00404CD6
.text:00404CD6 loc_404CD6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00404CD6                 cmp     eax, 0B7h ; '·'
.text:00404CDB                 jz      loc_404BD3
.text:00404CE1                 cmp     eax, 0B7h ; '·'
.text:00404CE6                 jl      loc_404B23
.text:00404CEC                 sub     eax, 0BCh ; '¼'
.text:00404CF1                 cmp     eax, 0Eh
.text:00404CF4                 ja      loc_404B23
.text:00404CFA                 jmp     loc_404B69
.text:00404CFA ; ---------------------------------------------------------------------------
.text:00404CFF                 align 10h
.text:00404D00
.text:00404D00 loc_404D00:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00404D00                 cmp     eax, 46Bh
.text:00404D05                 mov     edx, 24h ; '$'
.text:00404D0A                 jz      loc_404B20
.text:00404D10                 cmp     eax, 46Bh
.text:00404D15                 jg      short loc_404D31
.text:00404D17                 cmp     eax, 0D7h ; '×'
.text:00404D1C                 jz      loc_404C2D
.text:00404D22                 mov     edx, 5
.text:00404D27                 cmp     eax, 45Dh
.text:00404D2C                 jmp     loc_404B91
.text:00404D31 ; ---------------------------------------------------------------------------
.text:00404D31
.text:00404D31 loc_404D31:                             ; CODE XREF: ___get_errno+235↑j
.text:00404D31                 cmp     eax, 4D5h
.text:00404D36                 mov     edx, 4
.text:00404D3B                 jz      loc_404B20
.text:00404D41                 cmp     eax, 4D5h
.text:00404D46                 jg      short loc_404D57
.text:00404D48                 mov     edx, 13h
.text:00404D4D                 cmp     eax, 4B0h
.text:00404D52                 jmp     loc_404B91
.text:00404D57 ; ---------------------------------------------------------------------------
.text:00404D57
.text:00404D57 loc_404D57:                             ; CODE XREF: ___get_errno+266↑j
.text:00404D57                 cmp     eax, 718h
.text:00404D5C                 jnz     loc_404B23
.text:00404D62                 jmp     loc_404B49
.text:00404D62 ___get_errno    endp
.text:00404D62
.text:00404D62 ; ---------------------------------------------------------------------------
.text:00404D67                 align 10h
.text:00404D70
.text:00404D70 ; =============== S U B R O U T I N E =======================================
.text:00404D70
.text:00404D70
.text:00404D70 sub_404D70      proc near               ; CODE XREF: sub_404A30:loc_404A9C↑p
.text:00404D70                                         ; sub_404D90:loc_404E43↓p
.text:00404D70
.text:00404D70 var_C           = dword ptr -0Ch
.text:00404D70
.text:00404D70                 sub     esp, 0Ch
.text:00404D73                 call    GetLastError
.text:00404D78                 mov     [esp+0Ch+var_C], eax
.text:00404D7B                 call    ___get_errno
.text:00404D80                 add     esp, 0Ch
.text:00404D83                 retn
.text:00404D83 sub_404D70      endp
.text:00404D83
.text:00404D83 ; ---------------------------------------------------------------------------
.text:00404D84                 align 10h
.text:00404D90
.text:00404D90 ; =============== S U B R O U T I N E =======================================
.text:00404D90
.text:00404D90
.text:00404D90 ; int __cdecl sub_404D90(LPCSTR lpFileName, int)
.text:00404D90 sub_404D90      proc near               ; CODE XREF: sub_404A30+29↑p
.text:00404D90                                         ; sub_404A30+3D↑p
.text:00404D90
.text:00404D90 uMode           = dword ptr -1Ch
.text:00404D90 var_10          = dword ptr -10h
.text:00404D90 var_C           = dword ptr -0Ch
.text:00404D90 var_8           = dword ptr -8
.text:00404D90 var_4           = dword ptr -4
.text:00404D90 lpFileName      = dword ptr  4
.text:00404D90 arg_4           = dword ptr  8
.text:00404D90
.text:00404D90                 sub     esp, 1Ch
.text:00404D93                 mov     [esp+1Ch+var_10], ebx
.text:00404D97                 mov     ebx, [esp+1Ch+lpFileName]
.text:00404D9B                 mov     [esp+1Ch+var_4], ebp
.text:00404D9F                 xor     ebp, ebp
.text:00404DA1                 test    ebx, ebx
.text:00404DA3                 mov     [esp+1Ch+var_C], esi
.text:00404DA7                 mov     esi, [esp+1Ch+arg_4]
.text:00404DAB                 mov     [esp+1Ch+var_8], edi
.text:00404DAF                 jz      short loc_404DB9
.text:00404DB1                 test    esi, 0FFFFFFE8h
.text:00404DB7                 jz      short loc_404DE0
.text:00404DB9
.text:00404DB9 loc_404DB9:                             ; CODE XREF: sub_404D90+1F↑j
.text:00404DB9                 call    _errno
.text:00404DBE                 mov     dword ptr [eax], 16h
.text:00404DC4
.text:00404DC4 loc_404DC4:                             ; CODE XREF: sub_404D90+B1↓j
.text:00404DC4                 mov     eax, 0FFFFFFFFh
.text:00404DC9
.text:00404DC9 loc_404DC9:                             ; CODE XREF: sub_404D90+86↓j
.text:00404DC9                                         ; sub_404D90+A4↓j
.text:00404DC9                 mov     ebx, [esp+1Ch+var_10]
.text:00404DCD                 mov     esi, [esp+1Ch+var_C]
.text:00404DD1                 mov     edi, [esp+1Ch+var_8]
.text:00404DD5                 mov     ebp, [esp+1Ch+var_4]
.text:00404DD9                 add     esp, 1Ch
.text:00404DDC                 retn
.text:00404DDC ; ---------------------------------------------------------------------------
.text:00404DDD                 align 10h
.text:00404DE0
.text:00404DE0 loc_404DE0:                             ; CODE XREF: sub_404D90+27↑j
.text:00404DE0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00404DE7                 call    SetErrorMode
.text:00404DEC                 sub     esp, 4
.text:00404DEF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00404DF2                 call    GetFileAttributesA
.text:00404DF7                 sub     esp, 4
.text:00404DFA                 mov     edi, eax
.text:00404DFC                 cmp     eax, 0FFFFFFFFh
.text:00404DFF                 jz      short loc_404E43
.text:00404E01
.text:00404E01 loc_404E01:                             ; CODE XREF: sub_404D90+C6↓j
.text:00404E01                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00404E08                 call    SetErrorMode
.text:00404E0D                 sub     esp, 4
.text:00404E10                 mov     eax, 0FFFFFFFFh
.text:00404E15                 inc     ebp
.text:00404E16                 jz      short loc_404DC9
.text:00404E18                 test    esi, 10h
.text:00404E1E                 jz      short loc_404E28
.text:00404E20                 test    edi, 10h
.text:00404E26                 jz      short loc_404E36
.text:00404E28
.text:00404E28 loc_404E28:                             ; CODE XREF: sub_404D90+8E↑j
.text:00404E28                 and     esi, 2
.text:00404E2B                 jz      short loc_404E32
.text:00404E2D                 and     edi, 1
.text:00404E30                 jnz     short loc_404E36
.text:00404E32
.text:00404E32 loc_404E32:                             ; CODE XREF: sub_404D90+9B↑j
.text:00404E32                 xor     eax, eax
.text:00404E34                 jmp     short loc_404DC9
.text:00404E36 ; ---------------------------------------------------------------------------
.text:00404E36
.text:00404E36 loc_404E36:                             ; CODE XREF: sub_404D90+96↑j
.text:00404E36                                         ; sub_404D90+A0↑j
.text:00404E36                 call    _errno
.text:00404E3B                 mov     dword ptr [eax], 0Dh
.text:00404E41                 jmp     short loc_404DC4
.text:00404E43 ; ---------------------------------------------------------------------------
.text:00404E43
.text:00404E43 loc_404E43:                             ; CODE XREF: sub_404D90+6F↑j
.text:00404E43                 call    sub_404D70
.text:00404E48                 mov     ebp, eax
.text:00404E4A                 call    _errno
.text:00404E4F                 mov     [eax], ebp
.text:00404E51                 mov     ebp, 0FFFFFFFFh
.text:00404E56                 jmp     short loc_404E01
.text:00404E56 sub_404D90      endp
.text:00404E56
.text:00404E56 ; ---------------------------------------------------------------------------
.text:00404E58                 align 10h
.text:00404E60
.text:00404E60 ; =============== S U B R O U T I N E =======================================
.text:00404E60
.text:00404E60 ; Attributes: thunk
.text:00404E60
.text:00404E60 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00404E60 mbrtowc         proc near               ; CODE XREF: sub_402C00+757↑p
.text:00404E60
.text:00404E60 DstCh           = dword ptr  4
.text:00404E60 SrcCh           = dword ptr  8
.text:00404E60 SizeInBytes     = dword ptr  0Ch
.text:00404E60 State           = dword ptr  10h
.text:00404E60
.text:00404E60                 jmp     ds:__imp_mbrtowc
.text:00404E60 mbrtowc         endp
.text:00404E60
.text:00404E60 ; ---------------------------------------------------------------------------
.text:00404E66                 align 10h
.text:00404E70
.text:00404E70 ; =============== S U B R O U T I N E =======================================
.text:00404E70
.text:00404E70 ; Attributes: bp-based frame
.text:00404E70
.text:00404E70 sub_404E70      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00404E70                 push    ebp
.text:00404E71                 mov     ecx, offset dword_407000
.text:00404E76                 cmp     ecx, offset dword_407000
.text:00404E7C                 mov     ebp, esp
.text:00404E7E                 jnb     short loc_404E96
.text:00404E80
.text:00404E80 loc_404E80:                             ; CODE XREF: sub_404E70+24↓j
.text:00404E80                 mov     edx, [ecx+4]
.text:00404E83                 mov     eax, [ecx]
.text:00404E85                 add     ecx, 8
.text:00404E88                 add     [edx+400000h], eax
.text:00404E8E                 cmp     ecx, offset dword_407000
.text:00404E94                 jb      short loc_404E80
.text:00404E96
.text:00404E96 loc_404E96:                             ; CODE XREF: sub_404E70+E↑j
.text:00404E96                 pop     ebp
.text:00404E97                 retn
.text:00404E97 sub_404E70      endp
.text:00404E97
.text:00404E97 ; ---------------------------------------------------------------------------
.text:00404E98                 align 10h
.text:00404EA0
.text:00404EA0 ; =============== S U B R O U T I N E =======================================
.text:00404EA0
.text:00404EA0 ; Attributes: bp-based frame
.text:00404EA0
.text:00404EA0 sub_404EA0      proc near               ; CODE XREF: sub_401080+16↑p
.text:00404EA0                                         ; TopLevelExceptionFilter+D7↑p
.text:00404EA0                 push    ebp
.text:00404EA1                 mov     ebp, esp
.text:00404EA3                 fninit
.text:00404EA5                 pop     ebp
.text:00404EA6                 retn
.text:00404EA6 sub_404EA0      endp
.text:00404EA6
.text:00404EA6 ; ---------------------------------------------------------------------------
.text:00404EA7                 align 10h
.text:00404EB0
.text:00404EB0 ; =============== S U B R O U T I N E =======================================
.text:00404EB0
.text:00404EB0 ; Attributes: bp-based frame
.text:00404EB0
.text:00404EB0 ; void __cdecl sub_404EB0()
.text:00404EB0 sub_404EB0      proc near               ; DATA XREF: .text:loc_404EF9↓o
.text:00404EB0                                         ; sub_404F40:loc_404F6E↓o
.text:00404EB0                 push    ebp
.text:00404EB1                 mov     ebp, esp
.text:00404EB3                 sub     esp, 8
.text:00404EB6                 mov     eax, off_406084
.text:00404EBB                 mov     edx, [eax]
.text:00404EBD                 test    edx, edx
.text:00404EBF                 jnz     short loc_404EC5
.text:00404EC1
.text:00404EC1 loc_404EC1:                             ; CODE XREF: sub_404EB0+2C↓j
.text:00404EC1                 mov     esp, ebp
.text:00404EC3                 pop     ebp
.text:00404EC4                 retn
.text:00404EC5 ; ---------------------------------------------------------------------------
.text:00404EC5
.text:00404EC5 loc_404EC5:                             ; CODE XREF: sub_404EB0+F↑j
.text:00404EC5                                         ; sub_404EB0+2A↓j
.text:00404EC5                 call    dword ptr [eax]
.text:00404EC7                 mov     edx, off_406084
.text:00404ECD                 mov     ecx, [edx+4]
.text:00404ED0                 lea     eax, [edx+4]
.text:00404ED3                 mov     off_406084, eax
.text:00404ED8                 test    ecx, ecx
.text:00404EDA                 jnz     short loc_404EC5
.text:00404EDC                 jmp     short loc_404EC1
.text:00404EDC sub_404EB0      endp
.text:00404EDC
.text:00404EDC ; ---------------------------------------------------------------------------
.text:00404EDE                 align 10h
.text:00404EE0                 push    ebp
.text:00404EE1                 mov     ebp, esp
.text:00404EE3                 sub     esp, 8
.text:00404EE6                 mov     [ebp-4], ebx
.text:00404EE9                 mov     eax, ds:dword_405250
.text:00404EEE                 cmp     eax, 0FFFFFFFFh
.text:00404EF1                 jz      short loc_404F1C
.text:00404EF3
.text:00404EF3 loc_404EF3:                             ; CODE XREF: .text:00404F26↓j
.text:00404EF3                                         ; .text:00404F39↓j
.text:00404EF3                 test    eax, eax
.text:00404EF5                 mov     ebx, eax
.text:00404EF7                 jnz     short loc_404F10
.text:00404EF9
.text:00404EF9 loc_404EF9:                             ; CODE XREF: .text:00404F1A↓j
.text:00404EF9                 mov     dword ptr [esp], offset sub_404EB0
.text:00404F00                 call    sub_401040
.text:00404F05                 mov     ebx, [ebp-4]
.text:00404F08                 mov     esp, ebp
.text:00404F0A                 pop     ebp
.text:00404F0B                 retn
.text:00404F0B ; ---------------------------------------------------------------------------
.text:00404F0C                 align 10h
.text:00404F10
.text:00404F10 loc_404F10:                             ; CODE XREF: .text:00404EF7↑j
.text:00404F10                                         ; .text:00404F18↓j
.text:00404F10                 call    ds:dword_405250[ebx*4]
.text:00404F17                 dec     ebx
.text:00404F18                 jnz     short loc_404F10
.text:00404F1A                 jmp     short loc_404EF9
.text:00404F1C ; ---------------------------------------------------------------------------
.text:00404F1C
.text:00404F1C loc_404F1C:                             ; CODE XREF: .text:00404EF1↑j
.text:00404F1C                 mov     ecx, ds:dword_405254
.text:00404F22                 xor     eax, eax
.text:00404F24                 test    ecx, ecx
.text:00404F26                 jz      short loc_404EF3
.text:00404F28                 mov     edx, offset dword_405250
.text:00404F2D                 lea     esi, [esi+0]
.text:00404F30
.text:00404F30 loc_404F30:                             ; CODE XREF: .text:00404F37↓j
.text:00404F30                 inc     eax
.text:00404F31                 mov     ecx, [edx+eax*4+4]
.text:00404F35                 test    ecx, ecx
.text:00404F37                 jnz     short loc_404F30
.text:00404F39                 jmp     short loc_404EF3
.text:00404F39 ; ---------------------------------------------------------------------------
.text:00404F3B                 align 10h
.text:00404F40
.text:00404F40 ; =============== S U B R O U T I N E =======================================
.text:00404F40
.text:00404F40 ; Attributes: bp-based frame
.text:00404F40
.text:00404F40 sub_404F40      proc near               ; CODE XREF: sub_401370+18↑p
.text:00404F40
.text:00404F40 var_8           = dword ptr -8
.text:00404F40 var_4           = dword ptr -4
.text:00404F40
.text:00404F40                 push    ebp
.text:00404F41                 mov     ebp, esp
.text:00404F43                 sub     esp, 8
.text:00404F46                 mov     [ebp+var_4], ebx
.text:00404F49                 mov     edx, dword_406080
.text:00404F4F                 test    edx, edx
.text:00404F51                 jnz     short loc_404F7A
.text:00404F53                 mov     eax, ds:dword_405250
.text:00404F58                 mov     edx, 1
.text:00404F5D                 mov     dword_406080, edx
.text:00404F63                 cmp     eax, 0FFFFFFFFh
.text:00404F66                 jz      short loc_404F8D
.text:00404F68
.text:00404F68 loc_404F68:                             ; CODE XREF: sub_404F40+57↓j
.text:00404F68                                         ; sub_404F40+69↓j
.text:00404F68                 test    eax, eax
.text:00404F6A                 mov     ebx, eax
.text:00404F6C                 jnz     short loc_404F81
.text:00404F6E
.text:00404F6E loc_404F6E:                             ; CODE XREF: sub_404F40+4B↓j
.text:00404F6E                 mov     [esp+8+var_8], offset sub_404EB0 ; void (__cdecl *)()
.text:00404F75                 call    sub_401040
.text:00404F7A
.text:00404F7A loc_404F7A:                             ; CODE XREF: sub_404F40+11↑j
.text:00404F7A                 mov     ebx, [ebp+var_4]
.text:00404F7D                 mov     esp, ebp
.text:00404F7F                 pop     ebp
.text:00404F80                 retn
.text:00404F81 ; ---------------------------------------------------------------------------
.text:00404F81
.text:00404F81 loc_404F81:                             ; CODE XREF: sub_404F40+2C↑j
.text:00404F81                                         ; sub_404F40+49↓j
.text:00404F81                 call    ds:dword_405250[ebx*4]
.text:00404F88                 dec     ebx
.text:00404F89                 jnz     short loc_404F81
.text:00404F8B                 jmp     short loc_404F6E
.text:00404F8D ; ---------------------------------------------------------------------------
.text:00404F8D
.text:00404F8D loc_404F8D:                             ; CODE XREF: sub_404F40+26↑j
.text:00404F8D                 mov     ecx, ds:dword_405254
.text:00404F93                 xor     eax, eax
.text:00404F95                 test    ecx, ecx
.text:00404F97                 jz      short loc_404F68
.text:00404F99                 mov     edx, offset dword_405250
.text:00404F9E                 mov     esi, esi
.text:00404FA0
.text:00404FA0 loc_404FA0:                             ; CODE XREF: sub_404F40+67↓j
.text:00404FA0                 inc     eax
.text:00404FA1                 mov     ebx, [edx+eax*4+4]
.text:00404FA5                 test    ebx, ebx
.text:00404FA7                 jnz     short loc_404FA0
.text:00404FA9                 jmp     short loc_404F68
.text:00404FA9 sub_404F40      endp
.text:00404FA9
.text:00404FA9 ; ---------------------------------------------------------------------------
.text:00404FAB                 align 10h
.text:00404FB0
.text:00404FB0 ; =============== S U B R O U T I N E =======================================
.text:00404FB0
.text:00404FB0 ; Attributes: info_from_lumina
.text:00404FB0
.text:00404FB0 ; void *__cdecl _alloca(size_t Size)
.text:00404FB0 __alloca        proc near               ; CODE XREF: sub_401370+13↑p
.text:00404FB0                 push    ecx
.text:00404FB1                 mov     ecx, esp
.text:00404FB3                 add     ecx, 8
.text:00404FB6
.text:00404FB6 loc_404FB6:                             ; CODE XREF: __alloca+1B↓j
.text:00404FB6                 cmp     eax, 1000h
.text:00404FBB                 jb      short loc_404FCD
.text:00404FBD                 sub     ecx, 1000h
.text:00404FC3                 or      dword ptr [ecx], 0
.text:00404FC6                 sub     eax, 1000h
.text:00404FCB                 jmp     short loc_404FB6
.text:00404FCD ; ---------------------------------------------------------------------------
.text:00404FCD
.text:00404FCD loc_404FCD:                             ; CODE XREF: __alloca+B↑j
.text:00404FCD                 sub     ecx, eax
.text:00404FCF                 or      dword ptr [ecx], 0
.text:00404FD2                 mov     eax, esp
.text:00404FD4                 mov     esp, ecx
.text:00404FD6                 mov     ecx, [eax]
.text:00404FD8                 mov     eax, [eax+4]
.text:00404FDB                 jmp     eax
.text:00404FDB __alloca        endp
.text:00404FDB
.text:00404FDB ; ---------------------------------------------------------------------------
.text:00404FDD                 align 10h
.text:00404FE0                 jmp     ds:__set_app_type
.text:00404FE0 ; ---------------------------------------------------------------------------
.text:00404FE6                 align 10h
.text:00404FF0
.text:00404FF0 ; =============== S U B R O U T I N E =======================================
.text:00404FF0
.text:00404FF0 ; Attributes: thunk
.text:00404FF0
.text:00404FF0 ; void __cdecl cexit()
.text:00404FF0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00404FF0                 jmp     ds:__imp__cexit
.text:00404FF0 _cexit          endp
.text:00404FF0
.text:00404FF0 ; ---------------------------------------------------------------------------
.text:00404FF6                 align 10h
.text:00405000
.text:00405000 ; =============== S U B R O U T I N E =======================================
.text:00405000
.text:00405000 ; Attributes: thunk
.text:00405000
.text:00405000 ; char ***__cdecl _p__environ()
.text:00405000 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405000                 jmp     ds:__imp___p__environ
.text:00405000 __p__environ    endp
.text:00405000
.text:00405000 ; ---------------------------------------------------------------------------
.text:00405006                 align 10h
.text:00405010
.text:00405010 ; =============== S U B R O U T I N E =======================================
.text:00405010
.text:00405010 ; Attributes: thunk
.text:00405010
.text:00405010 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405010 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405010                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405010
.text:00405010 Signal          = dword ptr  4
.text:00405010 Function        = dword ptr  8
.text:00405010
.text:00405010                 jmp     ds:__imp_signal
.text:00405010 signal          endp
.text:00405010
.text:00405010 ; ---------------------------------------------------------------------------
.text:00405016                 align 10h
.text:00405020
.text:00405020 ; =============== S U B R O U T I N E =======================================
.text:00405020
.text:00405020 ; Attributes: thunk
.text:00405020
.text:00405020 ; int *__cdecl _p__fmode()
.text:00405020 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00405020                 jmp     ds:__imp___p__fmode
.text:00405020 __p__fmode      endp
.text:00405020
.text:00405020 ; ---------------------------------------------------------------------------
.text:00405026                 align 10h
.text:00405030
.text:00405030 ; =============== S U B R O U T I N E =======================================
.text:00405030
.text:00405030 ; Attributes: thunk
.text:00405030
.text:00405030 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405030 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405030                                         ; sub_401080+90↑p ...
.text:00405030
.text:00405030 FileHandle      = dword ptr  4
.text:00405030 Mode            = dword ptr  8
.text:00405030
.text:00405030                 jmp     ds:__imp__setmode
.text:00405030 _setmode        endp
.text:00405030
.text:00405030 ; ---------------------------------------------------------------------------
.text:00405036                 align 10h
.text:00405040
.text:00405040 ; =============== S U B R O U T I N E =======================================
.text:00405040
.text:00405040 ; Attributes: thunk
.text:00405040
.text:00405040 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00405040                 jmp     ds:__imp___getmainargs
.text:00405040 __getmainargs   endp
.text:00405040
.text:00405040 ; ---------------------------------------------------------------------------
.text:00405046                 align 10h
.text:00405050
.text:00405050 ; =============== S U B R O U T I N E =======================================
.text:00405050
.text:00405050 ; Attributes: thunk
.text:00405050
.text:00405050 ; int *__cdecl errno()
.text:00405050 _errno          proc near               ; CODE XREF: sub_401370+188↑p
.text:00405050                                         ; sub_402A90:loc_402ACD↑p ...
.text:00405050                 jmp     ds:__imp__errno
.text:00405050 _errno          endp
.text:00405050
.text:00405050 ; ---------------------------------------------------------------------------
.text:00405056                 align 10h
.text:00405060
.text:00405060 ; =============== S U B R O U T I N E =======================================
.text:00405060
.text:00405060 ; Attributes: thunk
.text:00405060
.text:00405060 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00405060 setlocale       proc near               ; CODE XREF: sub_401370+34↑p
.text:00405060
.text:00405060 Category        = dword ptr  4
.text:00405060 Locale          = dword ptr  8
.text:00405060
.text:00405060                 jmp     ds:__imp_setlocale
.text:00405060 setlocale       endp
.text:00405060
.text:00405060 ; ---------------------------------------------------------------------------
.text:00405066                 align 10h
.text:00405070
.text:00405070 ; =============== S U B R O U T I N E =======================================
.text:00405070
.text:00405070 ; Attributes: noreturn thunk
.text:00405070
.text:00405070 ; void __cdecl __noreturn exit(int Code)
.text:00405070 exit            proc near               ; CODE XREF: sub_401370:loc_4014B9↑p
.text:00405070                                         ; sub_401690+3E↑p ...
.text:00405070
.text:00405070 Code            = dword ptr  4
.text:00405070
.text:00405070                 jmp     ds:__imp_exit
.text:00405070 exit            endp
.text:00405070
.text:00405070 ; ---------------------------------------------------------------------------
.text:00405076                 align 10h
.text:00405080
.text:00405080 ; =============== S U B R O U T I N E =======================================
.text:00405080
.text:00405080 ; Attributes: thunk
.text:00405080
.text:00405080 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405080 fputs           proc near               ; CODE XREF: sub_401690+83↑p
.text:00405080                                         ; sub_401690+A5↑p ...
.text:00405080
.text:00405080 Buffer          = dword ptr  4
.text:00405080 Stream          = dword ptr  8
.text:00405080
.text:00405080                 jmp     ds:__imp_fputs
.text:00405080 fputs           endp
.text:00405080
.text:00405080 ; ---------------------------------------------------------------------------
.text:00405086                 align 10h
.text:00405090
.text:00405090 ; =============== S U B R O U T I N E =======================================
.text:00405090
.text:00405090 ; Attributes: thunk
.text:00405090
.text:00405090 ; int printf(const char *const Format, ...)
.text:00405090 printf          proc near               ; CODE XREF: sub_401690+61↑p
.text:00405090                                         ; sub_401690+E4↑p
.text:00405090
.text:00405090 Format          = dword ptr  4
.text:00405090
.text:00405090                 jmp     ds:__imp_printf
.text:00405090 printf          endp
.text:00405090
.text:00405090 ; ---------------------------------------------------------------------------
.text:00405096                 align 10h
.text:004050A0
.text:004050A0 ; =============== S U B R O U T I N E =======================================
.text:004050A0
.text:004050A0 ; Attributes: thunk
.text:004050A0
.text:004050A0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004050A0 fprintf         proc near               ; CODE XREF: sub_401370+13D↑p
.text:004050A0                                         ; sub_401690+36↑p ...
.text:004050A0
.text:004050A0 Stream          = dword ptr  4
.text:004050A0 Format          = dword ptr  8
.text:004050A0
.text:004050A0                 jmp     ds:__imp_fprintf
.text:004050A0 fprintf         endp
.text:004050A0
.text:004050A0 ; ---------------------------------------------------------------------------
.text:004050A6                 align 10h
.text:004050B0
.text:004050B0 ; =============== S U B R O U T I N E =======================================
.text:004050B0
.text:004050B0 ; Attributes: thunk
.text:004050B0
.text:004050B0 ; size_t __cdecl strlen(const char *Str)
.text:004050B0 strlen          proc near               ; CODE XREF: sub_4019D0+2A9↑p
.text:004050B0                                         ; sub_4019D0+346↑p ...
.text:004050B0
.text:004050B0 Str             = dword ptr  4
.text:004050B0
.text:004050B0                 jmp     ds:__imp_strlen
.text:004050B0 strlen          endp
.text:004050B0
.text:004050B0 ; ---------------------------------------------------------------------------
.text:004050B6                 align 10h
.text:004050C0
.text:004050C0 ; =============== S U B R O U T I N E =======================================
.text:004050C0
.text:004050C0 ; Attributes: thunk
.text:004050C0
.text:004050C0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:004050C0 strncmp         proc near               ; CODE XREF: sub_4019D0+23F↑p
.text:004050C0                                         ; sub_4019D0+699↑p
.text:004050C0
.text:004050C0 Str1            = dword ptr  4
.text:004050C0 Str2            = dword ptr  8
.text:004050C0 MaxCount        = dword ptr  0Ch
.text:004050C0
.text:004050C0                 jmp     ds:__imp_strncmp
.text:004050C0 strncmp         endp
.text:004050C0
.text:004050C0 ; ---------------------------------------------------------------------------
.text:004050C6                 align 10h
.text:004050D0
.text:004050D0 ; =============== S U B R O U T I N E =======================================
.text:004050D0
.text:004050D0 ; Attributes: thunk
.text:004050D0
.text:004050D0 ; char *__cdecl getenv(const char *VarName)
.text:004050D0 getenv          proc near               ; CODE XREF: sub_4019D0+B57↑p
.text:004050D0
.text:004050D0 VarName         = dword ptr  4
.text:004050D0
.text:004050D0                 jmp     ds:__imp_getenv
.text:004050D0 getenv          endp
.text:004050D0
.text:004050D0 ; ---------------------------------------------------------------------------
.text:004050D6                 align 10h
.text:004050E0
.text:004050E0 ; =============== S U B R O U T I N E =======================================
.text:004050E0
.text:004050E0 ; Attributes: thunk
.text:004050E0
.text:004050E0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004050E0 strchr          proc near               ; CODE XREF: sub_4019D0+469↑p
.text:004050E0                                         ; sub_4019D0+53A↑p ...
.text:004050E0
.text:004050E0 Str             = dword ptr  4
.text:004050E0 Val             = dword ptr  8
.text:004050E0
.text:004050E0                 jmp     ds:__imp_strchr
.text:004050E0 strchr          endp
.text:004050E0
.text:004050E0 ; ---------------------------------------------------------------------------
.text:004050E6                 align 10h
.text:004050F0
.text:004050F0 ; =============== S U B R O U T I N E =======================================
.text:004050F0
.text:004050F0 ; Attributes: thunk
.text:004050F0
.text:004050F0 ; int __cdecl fclose(FILE *Stream)
.text:004050F0 fclose          proc near               ; CODE XREF: sub_402A90+27↑p
.text:004050F0
.text:004050F0 Stream          = dword ptr  4
.text:004050F0
.text:004050F0                 jmp     ds:__imp_fclose
.text:004050F0 fclose          endp
.text:004050F0
.text:004050F0 ; ---------------------------------------------------------------------------
.text:004050F6                 align 10h
.text:00405100
.text:00405100 ; =============== S U B R O U T I N E =======================================
.text:00405100
.text:00405100 ; Attributes: thunk
.text:00405100
.text:00405100 ; void __cdecl free(void *Block)
.text:00405100 free            proc near               ; CODE XREF: sub_403D40+112↑p
.text:00405100
.text:00405100 Block           = dword ptr  4
.text:00405100
.text:00405100                 jmp     ds:__imp_free
.text:00405100 free            endp
.text:00405100
.text:00405100 ; ---------------------------------------------------------------------------
.text:00405106                 align 10h
.text:00405110
.text:00405110 ; =============== S U B R O U T I N E =======================================
.text:00405110
.text:00405110 ; Attributes: noreturn thunk
.text:00405110
.text:00405110 ; void __cdecl __noreturn abort()
.text:00405110 abort           proc near               ; CODE XREF: sub_403D40:loc_403EFA↑p
.text:00405110                                         ; sub_404200:loc_40429C↑p ...
.text:00405110                 jmp     ds:__imp_abort
.text:00405110 abort           endp
.text:00405110
.text:00405110 ; ---------------------------------------------------------------------------
.text:00405116                 align 10h
.text:00405120
.text:00405120 ; =============== S U B R O U T I N E =======================================
.text:00405120
.text:00405120 ; Attributes: thunk
.text:00405120
.text:00405120 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405120 iswctype        proc near               ; CODE XREF: sub_402C00+78B↑p
.text:00405120
.text:00405120 C               = word ptr  4
.text:00405120 Type            = word ptr  8
.text:00405120
.text:00405120                 jmp     ds:__imp_iswctype
.text:00405120 iswctype        endp
.text:00405120
.text:00405120 ; ---------------------------------------------------------------------------
.text:00405126                 align 10h
.text:00405130
.text:00405130 ; =============== S U B R O U T I N E =======================================
.text:00405130
.text:00405130 ; Attributes: thunk
.text:00405130
.text:00405130 ; int __cdecl isctype(int C, int Type)
.text:00405130 _isctype        proc near               ; CODE XREF: sub_402C00+610↑p
.text:00405130
.text:00405130 C               = dword ptr  4
.text:00405130 Type            = dword ptr  8
.text:00405130
.text:00405130                 jmp     ds:__imp__isctype
.text:00405130 _isctype        endp
.text:00405130
.text:00405130 ; ---------------------------------------------------------------------------
.text:00405136                 align 10h
.text:00405140
.text:00405140 ; =============== S U B R O U T I N E =======================================
.text:00405140
.text:00405140 ; Attributes: thunk
.text:00405140
.text:00405140 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00405140 vfprintf        proc near               ; CODE XREF: sub_404200+C1↑p
.text:00405140                                         ; sub_404790+49↑p ...
.text:00405140
.text:00405140 Stream          = dword ptr  4
.text:00405140 Format          = dword ptr  8
.text:00405140 ArgList         = dword ptr  0Ch
.text:00405140
.text:00405140                 jmp     ds:__imp_vfprintf
.text:00405140 vfprintf        endp
.text:00405140
.text:00405140 ; ---------------------------------------------------------------------------
.text:00405146                 align 10h
.text:00405150
.text:00405150 ; =============== S U B R O U T I N E =======================================
.text:00405150
.text:00405150 ; Attributes: thunk
.text:00405150
.text:00405150 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405150 _flsbuf         proc near               ; CODE XREF: sub_404200+128↑p
.text:00405150                                         ; sub_404200+13A↑p ...
.text:00405150
.text:00405150 File            = dword ptr  8
.text:00405150
.text:00405150                 jmp     ds:__imp__flsbuf
.text:00405150 _flsbuf         endp
.text:00405150
.text:00405150 ; ---------------------------------------------------------------------------
.text:00405156                 align 10h
.text:00405160
.text:00405160 ; =============== S U B R O U T I N E =======================================
.text:00405160
.text:00405160 ; Attributes: thunk
.text:00405160
.text:00405160 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405160 memcpy          proc near               ; CODE XREF: .text:004045F8↑p
.text:00405160                                         ; .text:00404641↑p
.text:00405160
.text:00405160 Src             = dword ptr  8
.text:00405160 Size            = dword ptr  0Ch
.text:00405160
.text:00405160                 jmp     ds:__imp_memcpy
.text:00405160 memcpy          endp
.text:00405160
.text:00405160 ; ---------------------------------------------------------------------------
.text:00405166                 align 10h
.text:00405170
.text:00405170 ; =============== S U B R O U T I N E =======================================
.text:00405170
.text:00405170 ; Attributes: thunk
.text:00405170
.text:00405170 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405170 memset          proc near               ; CODE XREF: .text:00404576↑p
.text:00405170
.text:00405170 Val             = dword ptr  8
.text:00405170 Size            = dword ptr  0Ch
.text:00405170
.text:00405170                 jmp     ds:__imp_memset
.text:00405170 memset          endp
.text:00405170
.text:00405170 ; ---------------------------------------------------------------------------
.text:00405176                 align 10h
.text:00405180
.text:00405180 ; =============== S U B R O U T I N E =======================================
.text:00405180
.text:00405180 ; Attributes: thunk
.text:00405180
.text:00405180 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405180 calloc          proc near               ; CODE XREF: .text:004045B3↑p
.text:00405180
.text:00405180 Count           = dword ptr  4
.text:00405180 Size            = dword ptr  8
.text:00405180
.text:00405180                 jmp     ds:__imp_calloc
.text:00405180 calloc          endp
.text:00405180
.text:00405180 ; ---------------------------------------------------------------------------
.text:00405186                 align 10h
.text:00405190
.text:00405190 ; =============== S U B R O U T I N E =======================================
.text:00405190
.text:00405190 ; Attributes: thunk
.text:00405190
.text:00405190 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405190 realloc         proc near               ; CODE XREF: .text:004044B0↑p
.text:00405190                                         ; sub_4044E0+16↑p ...
.text:00405190
.text:00405190 Block           = dword ptr  4
.text:00405190 Size            = dword ptr  8
.text:00405190
.text:00405190                 jmp     ds:__imp_realloc
.text:00405190 realloc         endp
.text:00405190
.text:00405190 ; ---------------------------------------------------------------------------
.text:00405196                 align 10h
.text:004051A0
.text:004051A0 ; =============== S U B R O U T I N E =======================================
.text:004051A0
.text:004051A0 ; Attributes: thunk
.text:004051A0
.text:004051A0 ; void *__cdecl malloc(size_t Size)
.text:004051A0 malloc          proc near               ; CODE XREF: .text:00404434↑p
.text:004051A0                                         ; sub_404450+E↑p ...
.text:004051A0
.text:004051A0 Size            = dword ptr  4
.text:004051A0
.text:004051A0                 jmp     ds:__imp_malloc
.text:004051A0 malloc          endp
.text:004051A0
.text:004051A0 ; ---------------------------------------------------------------------------
.text:004051A6                 align 10h
.text:004051B0
.text:004051B0 ; =============== S U B R O U T I N E =======================================
.text:004051B0
.text:004051B0 ; Attributes: thunk
.text:004051B0
.text:004051B0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004051B0 strcmp          proc near               ; CODE XREF: sub_404894+180↑p
.text:004051B0
.text:004051B0 Str1            = dword ptr  4
.text:004051B0 Str2            = dword ptr  8
.text:004051B0
.text:004051B0                 jmp     ds:__imp_strcmp
.text:004051B0 strcmp          endp
.text:004051B0
.text:004051B0 ; ---------------------------------------------------------------------------
.text:004051B6                 align 10h
.text:004051C0
.text:004051C0 ; =============== S U B R O U T I N E =======================================
.text:004051C0
.text:004051C0 ; Attributes: thunk
.text:004051C0
.text:004051C0 ; int __cdecl fflush(FILE *Stream)
.text:004051C0 fflush          proc near               ; CODE XREF: sub_404790+19↑p
.text:004051C0                                         ; sub_404790+81↑p ...
.text:004051C0
.text:004051C0 Stream          = dword ptr  4
.text:004051C0
.text:004051C0                 jmp     ds:__imp_fflush
.text:004051C0 fflush          endp
.text:004051C0
.text:004051C0 ; ---------------------------------------------------------------------------
.text:004051C6                 align 10h
.text:004051D0
.text:004051D0 ; =============== S U B R O U T I N E =======================================
.text:004051D0
.text:004051D0 ; Attributes: thunk
.text:004051D0
.text:004051D0 ; char *__cdecl strerror(int ErrorMessage)
.text:004051D0 strerror        proc near               ; CODE XREF: sub_404790+A5↑p
.text:004051D0                                         ; sub_404894+10F↑p
.text:004051D0
.text:004051D0 ErrorMessage    = dword ptr  4
.text:004051D0
.text:004051D0                 jmp     ds:__imp_strerror
.text:004051D0 strerror        endp
.text:004051D0
.text:004051D0 ; ---------------------------------------------------------------------------
.text:004051D6                 align 10h
.text:004051E0
.text:004051E0 ; =============== S U B R O U T I N E =======================================
.text:004051E0
.text:004051E0 ; Attributes: thunk
.text:004051E0
.text:004051E0 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:004051E0 _chmod          proc near               ; CODE XREF: sub_404A30+9B↑p
.text:004051E0
.text:004051E0 FileName        = dword ptr  4
.text:004051E0 AccessMode      = dword ptr  8
.text:004051E0
.text:004051E0                 jmp     ds:__imp__chmod
.text:004051E0 _chmod          endp
.text:004051E0
.text:004051E0 ; ---------------------------------------------------------------------------
.text:004051E6                 align 10h
.text:004051F0
.text:004051F0 ; =============== S U B R O U T I N E =======================================
.text:004051F0
.text:004051F0 ; Attributes: thunk
.text:004051F0
.text:004051F0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004051F0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004051F0
.text:004051F0 lpTopLevelExceptionFilter= dword ptr  4
.text:004051F0
.text:004051F0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004051F0 SetUnhandledExceptionFilter endp
.text:004051F0
.text:004051F0 ; ---------------------------------------------------------------------------
.text:004051F6                 align 10h
.text:00405200
.text:00405200 ; =============== S U B R O U T I N E =======================================
.text:00405200
.text:00405200 ; Attributes: noreturn thunk
.text:00405200
.text:00405200 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405200 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405200
.text:00405200 uExitCode       = dword ptr  4
.text:00405200
.text:00405200                 jmp     ds:__imp_ExitProcess
.text:00405200 ExitProcess     endp
.text:00405200
.text:00405200 ; ---------------------------------------------------------------------------
.text:00405206                 align 10h
.text:00405210
.text:00405210 ; =============== S U B R O U T I N E =======================================
.text:00405210
.text:00405210 ; Attributes: thunk
.text:00405210
.text:00405210 ; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
.text:00405210 DeleteFileA     proc near               ; CODE XREF: sub_404A30+50↑p
.text:00405210
.text:00405210 lpFileName      = dword ptr  4
.text:00405210
.text:00405210                 jmp     ds:__imp_DeleteFileA
.text:00405210 DeleteFileA     endp
.text:00405210
.text:00405210 ; ---------------------------------------------------------------------------
.text:00405216                 align 10h
.text:00405220
.text:00405220 ; =============== S U B R O U T I N E =======================================
.text:00405220
.text:00405220 ; Attributes: thunk
.text:00405220
.text:00405220 ; DWORD __stdcall GetLastError()
.text:00405220 GetLastError    proc near               ; CODE XREF: sub_404D70+3↑p
.text:00405220                 jmp     ds:__imp_GetLastError
.text:00405220 GetLastError    endp
.text:00405220
.text:00405220 ; ---------------------------------------------------------------------------
.text:00405226                 align 10h
.text:00405230
.text:00405230 ; =============== S U B R O U T I N E =======================================
.text:00405230
.text:00405230 ; Attributes: thunk
.text:00405230
.text:00405230 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00405230 SetErrorMode    proc near               ; CODE XREF: sub_404D90+57↑p
.text:00405230                                         ; sub_404D90+78↑p
.text:00405230
.text:00405230 uMode           = dword ptr  4
.text:00405230
.text:00405230                 jmp     ds:__imp_SetErrorMode
.text:00405230 SetErrorMode    endp
.text:00405230
.text:00405230 ; ---------------------------------------------------------------------------
.text:00405236                 align 10h
.text:00405240
.text:00405240 ; =============== S U B R O U T I N E =======================================
.text:00405240
.text:00405240 ; Attributes: thunk
.text:00405240
.text:00405240 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00405240 GetFileAttributesA proc near            ; CODE XREF: sub_404D90+62↑p
.text:00405240
.text:00405240 lpFileName      = dword ptr  4
.text:00405240
.text:00405240                 jmp     ds:__imp_GetFileAttributesA
.text:00405240 GetFileAttributesA endp
.text:00405240
.text:00405240 ; ---------------------------------------------------------------------------
.text:00405246                 align 10h
.text:00405250 dword_405250    dd 0FFFFFFFFh           ; DATA XREF: .text:00404EE9↑r
.text:00405250                                         ; .text:loc_404F10↑r ...
.text:00405254 dword_405254    dd 0                    ; DATA XREF: .text:loc_404F1C↑r
.text:00405254                                         ; sub_404F40:loc_404F8D↑r
.text:00405258                 dd 0FFFFFFFFh
.text:0040525C dword_40525C    dd 69h dup(0)           ; DATA XREF: .data:off_406084↓o
.text:00405400                 dd 300h dup(?)
.text:00405400 _text           ends
.text:00405400
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004800
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_401370+CA↑r
.data:00406010                                         ; sub_401370:loc_4014D6↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_402560+11↑r
.data:00406014                                         ; .text:00402601↑r ...
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_402560+7D↑w
.data:00406018                                         ; .text:0040266D↑w
.data:0040601C                 align 10h
.data:00406020 dword_406020    dd 1                    ; DATA XREF: sub_403D40+22↑r
.data:00406020                                         ; sub_403D40+65↑r ...
.data:00406024 dword_406024    dd 100h                 ; DATA XREF: sub_403D40+3F↑o
.data:00406024                                         ; sub_403D40+1A2↑r ...
.data:00406028 off_406028      dd offset unk_407040    ; DATA XREF: sub_403D40+1AA↑r
.data:0040602C ; void *off_40602C
.data:0040602C off_40602C      dd offset dword_406024  ; DATA XREF: sub_403D40+39↑r
.data:0040602C                                         ; sub_403D40+60↑w ...
.data:00406030 ; char *Buffer
.data:00406030 Buffer          dd offset aCopyrightC2005
.data:00406030                                         ; DATA XREF: sub_404200+DC↑r
.data:00406030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406034                 align 10h
.data:00406040 ; int Code
.data:00406040 Code            dd 1                    ; DATA XREF: sub_402A90+6D↑r
.data:00406040                                         ; sub_402A90+9A↑r ...
.data:00406044                 align 10h
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_404F40+9↑r
.data:00406080                                         ; sub_404F40+1D↑w
.data:00406084 off_406084      dd offset dword_40525C  ; DATA XREF: sub_404EB0+6↑r
.data:00406084                                         ; sub_404EB0+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000230 (    560.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: sub_402560+9↑o
.bss:00407000                                         ; sub_402560+17↑w ...
.bss:00407004 dword_407004    dd ?                    ; DATA XREF: sub_402560+21↑w
.bss:00407004                                         ; .text:00402619↑w
.bss:00407008 dword_407008    dd ?                    ; DATA XREF: sub_402560+77↑r
.bss:00407008                                         ; .text:00402667↑r
.bss:0040700C dword_40700C    dd ?                    ; DATA XREF: sub_402560+6B↑r
.bss:0040700C                                         ; .text:0040265B↑r
.bss:00407010                 db    ? ;
.bss:00407011                 db    ? ;
.bss:00407012                 db    ? ;
.bss:00407013                 db    ? ;
.bss:00407014                 db    ? ;
.bss:00407015                 db    ? ;
.bss:00407016                 db    ? ;
.bss:00407017                 db    ? ;
.bss:00407018                 db    ? ;
.bss:00407019                 db    ? ;
.bss:0040701A                 db    ? ;
.bss:0040701B                 db    ? ;
.bss:0040701C                 db    ? ;
.bss:0040701D                 db    ? ;
.bss:0040701E                 db    ? ;
.bss:0040701F                 db    ? ;
.bss:00407020                 db    ? ;
.bss:00407021                 db    ? ;
.bss:00407022                 db    ? ;
.bss:00407023                 db    ? ;
.bss:00407024                 db    ? ;
.bss:00407025                 db    ? ;
.bss:00407026                 db    ? ;
.bss:00407027                 db    ? ;
.bss:00407028                 db    ? ;
.bss:00407029                 db    ? ;
.bss:0040702A                 db    ? ;
.bss:0040702B                 db    ? ;
.bss:0040702C                 db    ? ;
.bss:0040702D                 db    ? ;
.bss:0040702E                 db    ? ;
.bss:0040702F                 db    ? ;
.bss:00407030 ; char *dword_407030
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: .text:00402A64↑w
.bss:00407030                                         ; sub_402A90+58↑r
.bss:00407034                 align 10h
.bss:00407040 unk_407040      db    ? ;               ; DATA XREF: sub_403D40+100↑o
.bss:00407040                                         ; .data:off_406028↑o
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140 dword_407140    dd ?                    ; DATA XREF: .text:loc_4036D1↑o
.bss:00407140                                         ; .text:loc_4036F0↑o ...
.bss:00407144 dword_407144    dd ?                    ; DATA XREF: .text:loc_403770↑o
.bss:00407144                                         ; .text:00403BF8↑r ...
.bss:00407148 dword_407148    dd ?                    ; DATA XREF: .text:00403BF2↑r
.bss:00407148                                         ; sub_403CA0+2C↑r
.bss:0040714C dword_40714C    dd ?                    ; DATA XREF: .text:00403BE6↑r
.bss:0040714C                                         ; sub_403CA0+22↑r
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:00403C02↑r
.bss:00407150                                         ; sub_403CA0+36↑r
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:00403C12↑r
.bss:00407154                                         ; sub_403CA0+4E↑r
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:00403C2F↑r
.bss:00407158                                         ; sub_403CA0+62↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00403C25↑r
.bss:0040715C                                         ; sub_403CA0+70↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:00403C08↑r
.bss:00407160                                         ; sub_403CA0+7A↑r
.bss:00407164                 align 10h
.bss:00407170 ; char *Str1
.bss:00407170 Str1            dd ?                    ; DATA XREF: sub_404894:loc_4048CD↑w
.bss:00407170                                         ; sub_404894:loc_404A00↑r
.bss:00407174                 align 10h
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: sub_404894+2D↑r
.bss:00407180                                         ; sub_404894+3F↑w
.bss:00407184                 align 10h
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: sub_401370+2E↑w
.bss:00407190                                         ; sub_401370+129↑r ...
.bss:00407194                 db    ? ;
.bss:00407195                 db    ? ;
.bss:00407196                 db    ? ;
.bss:00407197                 db    ? ;
.bss:00407198                 db    ? ;
.bss:00407199                 db    ? ;
.bss:0040719A                 db    ? ;
.bss:0040719B                 db    ? ;
.bss:0040719C                 db    ? ;
.bss:0040719D                 db    ? ;
.bss:0040719E                 db    ? ;
.bss:0040719F                 db    ? ;
.bss:004071A0                 db    ? ;
.bss:004071A1                 db    ? ;
.bss:004071A2                 db    ? ;
.bss:004071A3                 db    ? ;
.bss:004071A4                 db    ? ;
.bss:004071A5                 db    ? ;
.bss:004071A6                 db    ? ;
.bss:004071A7                 db    ? ;
.bss:004071A8                 db    ? ;
.bss:004071A9                 db    ? ;
.bss:004071AA                 db    ? ;
.bss:004071AB                 db    ? ;
.bss:004071AC                 db    ? ;
.bss:004071AD                 db    ? ;
.bss:004071AE                 db    ? ;
.bss:004071AF                 db    ? ;
.bss:004071B0 dword_4071B0    dd ?                    ; DATA XREF: sub_402560+71↑w
.bss:004071B0                                         ; .text:00402661↑w
.bss:004071B4                 align 10h
.bss:004071C0 dword_4071C0    dd ?                    ; CODE XREF: sub_404894+63↑p
.bss:004071C0                                         ; DATA XREF: sub_404790+1E↑r ...
.bss:004071C4                 align 10h
.bss:004071D0 dword_4071D0    dd ?                    ; DATA XREF: sub_404790+4E↑w
.bss:004071D0                                         ; sub_404894+AB↑w
.bss:004071D4                 align 40h
.bss:00407200 dword_407200    dd ?                    ; DATA XREF: sub_404894+13↑r
.bss:00407204                 align 1000h
.bss:00407204 _bss            ends
.bss:00407204
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 000005B4 (   1460.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00004A00
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408148 ;
.idata:00408148 ; Imports from libintl3.dll
.idata:00408148 ;
.idata:00408148                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408148                                         ; CODE XREF: sub_401370+48↑p
.idata:00408148                                         ; DATA XREF: sub_401370+48↑r ...
.idata:0040814C                 extrn libintl_gettext:dword
.idata:0040814C                                         ; CODE XREF: sub_401370+F4↑p
.idata:0040814C                                         ; sub_401370+11D↑p ...
.idata:00408150                 extrn libintl_textdomain:dword
.idata:00408150                                         ; CODE XREF: sub_401370+55↑p
.idata:00408150                                         ; DATA XREF: sub_401370+55↑r ...
.idata:00408154
.idata:0040815C ;
.idata:0040815C ; Imports from KERNEL32.dll
.idata:0040815C ;
.idata:0040815C ; BOOL (__stdcall *DeleteFileA)(LPCSTR lpFileName)
.idata:0040815C                 extrn __imp_DeleteFileA:dword
.idata:0040815C                                         ; DATA XREF: DeleteFileA↑r
.idata:00408160 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408160                 extrn __imp_ExitProcess:dword
.idata:00408160                                         ; DATA XREF: ExitProcess↑r
.idata:00408164 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00408164                 extrn __imp_GetFileAttributesA:dword
.idata:00408164                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00408168 ; DWORD (__stdcall *GetLastError)()
.idata:00408168                 extrn __imp_GetLastError:dword
.idata:00408168                                         ; DATA XREF: GetLastError↑r
.idata:0040816C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0040816C                 extrn __imp_SetErrorMode:dword
.idata:0040816C                                         ; DATA XREF: SetErrorMode↑r
.idata:00408170 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00408170                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00408170                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408174
.idata:0040817C ;
.idata:0040817C ; Imports from MSVCP60.DLL
.idata:0040817C ;
.idata:0040817C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040817C                 extrn __imp_mbrtowc:dword
.idata:0040817C                                         ; DATA XREF: mbrtowc↑r
.idata:00408180
.idata:00408188 ;
.idata:00408188 ; Imports from msvcrt.dll
.idata:00408188 ;
.idata:00408188                 extrn __imp___getmainargs:dword
.idata:00408188                                         ; DATA XREF: __getmainargs↑r
.idata:0040818C ; int _mb_cur_max
.idata:0040818C                 extrn __mb_cur_max:dword
.idata:0040818C                                         ; DATA XREF: sub_402C00+7↑r
.idata:0040818C                                         ; sub_402C00+5F3↑r
.idata:00408190 ; char ***(__cdecl *__p__environ)()
.idata:00408190                 extrn __imp___p__environ:dword
.idata:00408190                                         ; DATA XREF: __p__environ↑r
.idata:00408194 ; int *(__cdecl *__p__fmode)()
.idata:00408194                 extrn __imp___p__fmode:dword
.idata:00408194                                         ; DATA XREF: __p__fmode↑r
.idata:00408198 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00408198                 extrn __set_app_type:dword
.idata:00408198                                         ; CODE XREF: start+D↑p
.idata:00408198                                         ; .text:0040102D↑p
.idata:00408198                                         ; DATA XREF: ...
.idata:0040819C ; void (__cdecl *_cexit)()
.idata:0040819C                 extrn __imp__cexit:dword
.idata:0040819C                                         ; DATA XREF: _cexit↑r
.idata:004081A0 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:004081A0                 extrn __imp__chmod:dword
.idata:004081A0                                         ; DATA XREF: _chmod↑r
.idata:004081A4 ; int *(__cdecl *_errno)()
.idata:004081A4                 extrn __imp__errno:dword
.idata:004081A4                                         ; DATA XREF: _errno↑r
.idata:004081A8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081A8                 extrn __imp__flsbuf:dword
.idata:004081A8                                         ; DATA XREF: _flsbuf↑r
.idata:004081AC ; FILE iob[]
.idata:004081AC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081AC                                         ; sub_401080+75↑r ...
.idata:004081B0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081B0                 extrn __imp__isctype:dword
.idata:004081B0                                         ; DATA XREF: _isctype↑r
.idata:004081B4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081B4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081B4                                         ; DATA XREF: .text:0040106C↑r
.idata:004081B8 ; const unsigned __int16 *pctype
.idata:004081B8                 extrn _pctype:dword     ; DATA XREF: sub_402C00:loc_4032F4↑r
.idata:004081BC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081BC                 extrn __imp__setmode:dword
.idata:004081BC                                         ; DATA XREF: _setmode↑r
.idata:004081C0 ; void (__cdecl __noreturn *abort)()
.idata:004081C0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081C4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081C4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081C4                                         ; DATA XREF: sub_401040+C↑r
.idata:004081C8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081C8                 extrn __imp_calloc:dword
.idata:004081C8                                         ; DATA XREF: calloc↑r
.idata:004081CC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081CC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081D0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081D0                 extrn __imp_fclose:dword
.idata:004081D0                                         ; DATA XREF: fclose↑r
.idata:004081D4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081D4                 extrn __imp_fflush:dword
.idata:004081D4                                         ; DATA XREF: fflush↑r
.idata:004081D8 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081D8                 extrn __imp_fprintf:dword
.idata:004081D8                                         ; DATA XREF: fprintf↑r
.idata:004081DC ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081DC                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081E0 ; void (__cdecl *free)(void *Block)
.idata:004081E0                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081E4 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081E4                 extrn __imp_getenv:dword
.idata:004081E4                                         ; DATA XREF: getenv↑r
.idata:004081E8 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081E8                 extrn __imp_iswctype:dword
.idata:004081E8                                         ; DATA XREF: iswctype↑r
.idata:004081EC ; void *(__cdecl *malloc)(size_t Size)
.idata:004081EC                 extrn __imp_malloc:dword
.idata:004081EC                                         ; DATA XREF: malloc↑r
.idata:004081F0 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004081F0                 extrn __imp_memcpy:dword
.idata:004081F0                                         ; DATA XREF: memcpy↑r
.idata:004081F4 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004081F4                 extrn __imp_memset:dword
.idata:004081F4                                         ; DATA XREF: memset↑r
.idata:004081F8 ; int (*printf)(const char *const Format, ...)
.idata:004081F8                 extrn __imp_printf:dword
.idata:004081F8                                         ; DATA XREF: printf↑r
.idata:004081FC ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004081FC                 extrn __imp_realloc:dword
.idata:004081FC                                         ; DATA XREF: realloc↑r
.idata:00408200 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00408200                 extrn __imp_setlocale:dword
.idata:00408200                                         ; DATA XREF: setlocale↑r
.idata:00408204 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408204                 extrn __imp_signal:dword
.idata:00408204                                         ; DATA XREF: signal↑r
.idata:00408208 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00408208                 extrn __imp_strchr:dword
.idata:00408208                                         ; DATA XREF: strchr↑r
.idata:0040820C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040820C                 extrn __imp_strcmp:dword
.idata:0040820C                                         ; DATA XREF: strcmp↑r
.idata:00408210 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408210                 extrn __imp_strerror:dword
.idata:00408210                                         ; DATA XREF: strerror↑r
.idata:00408214 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408214                 extrn __imp_strlen:dword
.idata:00408214                                         ; DATA XREF: strlen↑r
.idata:00408218 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408218                 extrn __imp_strncmp:dword
.idata:00408218                                         ; DATA XREF: strncmp↑r
.idata:0040821C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040821C                 extrn __imp_vfprintf:dword
.idata:0040821C                                         ; DATA XREF: vfprintf↑r
.idata:00408220
.idata:00408220
.idata:00408220
.idata:00408220                 end start
