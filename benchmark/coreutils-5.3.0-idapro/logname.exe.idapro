.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : B3FD1A23CB87D40F3F8CFC35ED9C9A95610A7592A9B77A9341A78331CD787B83
.text:00401000 ; Input MD5    : 950DDC2C23E92BDF075ADDDE662CDAD0
.text:00401000 ; Input CRC32  : 2E719723
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/logname.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A26B (Wed Apr 20 18:41:47 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004070 (  16496.)
.text:00401000 ; Section size in file          : 00004200 (  16896.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401350+62↓p
.text:00401040                                         ; .text:00404D30↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_404CD0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_404CA0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401350
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_404CD0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401350+1F↓o
.text:00401280                                         ; sub_401350+B3↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401350+39↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401350+41↓o
.text:004012C3                                         ; sub_401350+4E↓o
.text:004012CD aFixmeUnknown   db 'FIXME: unknown',0   ; DATA XREF: sub_401350+6F↓o
.text:004012DC a530            db '5.3.0',0            ; DATA XREF: sub_401350+7F↓o
.text:004012E2 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401350+87↓o
.text:004012F0 ; const FILE stru_4012F0
.text:004012F0 stru_4012F0     FILE <6E676F6Ch, 656D61h, 6C206F6Eh, 6E69676Fh, 6D616E20h, 78650065h, \
.text:004012F0                                         ; DATA XREF: sub_401350+8F↓o
.text:004012F0                                         ; sub_401350:loc_401444↓o
.text:004012F0                       20617274h, 7265706Fh>
.text:00401310                 db  61h ; a
.text:00401311                 db  6Eh ; n
.text:00401312                 db  64h ; d
.text:00401313                 db  20h
.text:00401314                 db  25h ; %
.text:00401315                 db  73h ; s
.text:00401316                 db    0
.text:00401317                 align 10h
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_401350:loc_4014A8↓o
.text:00401320                                         ; sub_4015F0+F↓o
.text:00401347                 align 10h
.text:00401350
.text:00401350 ; =============== S U B R O U T I N E =======================================
.text:00401350
.text:00401350 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401350
.text:00401350 sub_401350      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401350
.text:00401350 Category        = dword ptr -28h
.text:00401350 Locale          = dword ptr -24h
.text:00401350 var_20          = dword ptr -20h
.text:00401350 var_1C          = byte ptr -1Ch
.text:00401350 var_18          = dword ptr -18h
.text:00401350 var_14          = dword ptr -14h
.text:00401350 var_10          = byte ptr -10h
.text:00401350 var_C           = dword ptr -0Ch
.text:00401350 arg_0           = dword ptr  8
.text:00401350 arg_4           = dword ptr  0Ch
.text:00401350
.text:00401350                 push    ebp
.text:00401351                 xor     eax, eax
.text:00401353                 mov     ebp, esp
.text:00401355                 push    esi
.text:00401356                 push    ebx
.text:00401357                 sub     esp, 20h
.text:0040135A                 mov     esi, [ebp+arg_4]
.text:0040135D                 and     esp, 0FFFFFFF0h
.text:00401360                 mov     ebx, [ebp+arg_0]
.text:00401363                 call    __alloca
.text:00401368                 call    sub_404D70
.text:0040136D                 mov     edx, [esi]
.text:0040136F                 mov     [esp+28h+Locale], offset Locale ; Locale
.text:00401377                 mov     [esp+28h+Category], 0 ; Category
.text:0040137E                 mov     ds:dword_4072A0, edx
.text:00401384                 call    setlocale
.text:00401389                 mov     [esp+28h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401391                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:00401398                 call    ds:__imp_libintl_bindtextdomain
.text:0040139E                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:004013A5                 call    ds:libintl_textdomain
.text:004013AB                 mov     [esp+28h+Category], offset sub_4029F0 ; void (__cdecl *)()
.text:004013B2                 call    sub_401040
.text:004013B7                 mov     [esp+28h+var_C], 0
.text:004013BF                 mov     dword ptr [esp+28h+var_10], offset aFixmeUnknown ; "FIXME: unknown"
.text:004013C7                 mov     [esp+28h+var_14], offset sub_4015F0 ; int
.text:004013CF                 mov     [esp+28h+var_18], offset a530 ; "5.3.0"
.text:004013D7                 mov     dword ptr [esp+28h+var_1C], offset aGnuCoreutils ; "GNU coreutils"
.text:004013DF                 mov     [esp+28h+var_20], offset stru_4012F0 ; FILE *
.text:004013E7                 mov     [esp+28h+Locale], esi ; int
.text:004013EB                 mov     [esp+28h+Category], ebx ; int
.text:004013EE                 call    sub_402900
.text:004013F3                 mov     [esp+28h+var_18], 0 ; int
.text:004013FB                 mov     dword ptr [esp+28h+var_1C], 0 ; char
.text:00401403                 mov     [esp+28h+var_20], offset Locale ; char *
.text:0040140B                 mov     [esp+28h+Locale], esi ; int
.text:0040140F                 mov     [esp+28h+Category], ebx ; int
.text:00401412                 call    sub_402760
.text:00401417                 inc     eax
.text:00401418                 jnz     loc_4014A8
.text:0040141E                 mov     eax, dword_406010
.text:00401423                 cmp     eax, ebx
.text:00401425                 jl      short loc_401472
.text:00401427                 call    sub_404990
.text:0040142C                 test    eax, eax
.text:0040142E                 jz      short loc_401444
.text:00401430                 mov     [esp+28h+Category], eax ; Buffer
.text:00401433                 call    puts
.text:00401438                 mov     [esp+28h+Category], 0 ; Code
.text:0040143F
.text:0040143F loc_40143F:                             ; CODE XREF: sub_401350+120↓j
.text:0040143F                 call    exit
.text:00401444 ; ---------------------------------------------------------------------------
.text:00401444
.text:00401444 loc_401444:                             ; CODE XREF: sub_401350+DE↑j
.text:00401444                 mov     [esp+28h+Category], offset stru_4012F0._base
.text:0040144B                 call    ds:libintl_gettext
.text:00401451                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:00401459                 mov     [esp+28h+Category], 0 ; Code
.text:00401460                 mov     [esp+28h+var_20], eax ; char *
.text:00401464                 call    sub_4046F0
.text:00401469
.text:00401469 loc_401469:                             ; CODE XREF: sub_401350+184↓j
.text:00401469                 mov     [esp+28h+Category], 1
.text:00401470                 jmp     short loc_40143F
.text:00401472 ; ---------------------------------------------------------------------------
.text:00401472
.text:00401472 loc_401472:                             ; CODE XREF: sub_401350+D5↑j
.text:00401472                 mov     edx, [esi+eax*4]
.text:00401475                 mov     [esp+28h+Category], edx ; char *
.text:00401478                 call    sub_402730
.text:0040147D                 mov     [esp+28h+Category], (offset stru_4012F0._charbuf+2)
.text:00401484                 mov     esi, eax
.text:00401486                 call    ds:libintl_gettext
.text:0040148C                 mov     dword ptr [esp+28h+var_1C], esi ; char
.text:00401490                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:00401498                 mov     [esp+28h+Category], 0 ; Code
.text:0040149F                 mov     [esp+28h+var_20], eax ; char *
.text:004014A3                 call    sub_4046F0
.text:004014A8
.text:004014A8 loc_4014A8:                             ; CODE XREF: sub_401350+C8↑j
.text:004014A8                 mov     [esp+28h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004014AF                 call    ds:libintl_gettext
.text:004014B5                 mov     ecx, ds:_iob
.text:004014BB                 mov     ebx, ds:dword_4072A0
.text:004014C1                 add     ecx, 40h ; '@'
.text:004014C4                 mov     [esp+28h+var_20], ebx
.text:004014C8                 mov     [esp+28h+Locale], eax ; Format
.text:004014CC                 mov     [esp+28h+Category], ecx ; Stream
.text:004014CF                 call    fprintf
.text:004014D4                 jmp     short loc_401469
.text:004014D4 sub_401350      endp
.text:004014D4
.text:004014D4 ; ---------------------------------------------------------------------------
.text:004014D6 aUsageSOption   db 'Usage: %s [OPTION]',0Ah,0
.text:004014D6                                         ; DATA XREF: sub_4015F0:loc_401633↓o
.text:004014EA                 align 20h
.text:00401500 aPrintTheNameOf db 'Print the name of the current user.',0Ah
.text:00401500                                         ; DATA XREF: sub_4015F0+62↓o
.text:00401500                 db 0Ah,0
.text:00401526                 align 20h
.text:00401540 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401540                                         ; DATA XREF: sub_4015F0+84↓o
.text:0040156D                 align 20h
.text:00401580 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401580                                         ; DATA XREF: sub_4015F0+A6↓o
.text:004015B6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4015F0+C8↓o
.text:004015B6                 db 'Report bugs to <%s>.',0Ah,0
.text:004015CD aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004015CD                                         ; DATA XREF: sub_4015F0+D5↓o
.text:004015E3                 align 10h
.text:004015F0
.text:004015F0 ; =============== S U B R O U T I N E =======================================
.text:004015F0
.text:004015F0 ; Attributes: noreturn
.text:004015F0
.text:004015F0 ; void __cdecl __noreturn sub_4015F0(int Code)
.text:004015F0 sub_4015F0      proc near               ; DATA XREF: sub_401350+77↑o
.text:004015F0
.text:004015F0 Stream          = dword ptr -1Ch
.text:004015F0 Format          = dword ptr -18h
.text:004015F0 var_14          = dword ptr -14h
.text:004015F0 var_4           = dword ptr -4
.text:004015F0 Code            = dword ptr  4
.text:004015F0
.text:004015F0                 sub     esp, 1Ch
.text:004015F3                 mov     [esp+1Ch+var_4], ebx
.text:004015F7                 mov     ebx, [esp+1Ch+Code]
.text:004015FB                 test    ebx, ebx
.text:004015FD                 jz      short loc_401633
.text:004015FF                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401606                 call    ds:libintl_gettext
.text:0040160C                 mov     edx, ds:_iob
.text:00401612                 mov     ecx, ds:dword_4072A0
.text:00401618                 add     edx, 40h ; '@'
.text:0040161B                 mov     [esp+1Ch+var_14], ecx
.text:0040161F                 mov     [esp+1Ch+Format], eax ; Format
.text:00401623                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401626                 call    fprintf
.text:0040162B
.text:0040162B loc_40162B:                             ; CODE XREF: sub_4015F0+E5↓j
.text:0040162B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040162E                 call    exit
.text:00401633 ; ---------------------------------------------------------------------------
.text:00401633
.text:00401633 loc_401633:                             ; CODE XREF: sub_4015F0+D↑j
.text:00401633                 mov     [esp+1Ch+Stream], offset aUsageSOption ; "Usage: %s [OPTION]\n"
.text:0040163A                 call    ds:libintl_gettext
.text:00401640                 mov     ecx, ds:dword_4072A0
.text:00401646                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401649                 mov     [esp+1Ch+Format], ecx
.text:0040164D                 call    printf
.text:00401652                 mov     [esp+1Ch+Stream], offset aPrintTheNameOf ; "Print the name of the current user.\n\n"
.text:00401659                 call    ds:libintl_gettext
.text:0040165F                 mov     ecx, ds:_iob
.text:00401665                 add     ecx, 20h ; ' '
.text:00401668                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040166C                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040166F                 call    fputs
.text:00401674                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040167B                 call    ds:libintl_gettext
.text:00401681                 mov     ecx, ds:_iob
.text:00401687                 add     ecx, 20h ; ' '
.text:0040168A                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040168E                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401691                 call    fputs
.text:00401696                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040169D                 call    ds:libintl_gettext
.text:004016A3                 mov     ecx, ds:_iob
.text:004016A9                 add     ecx, 20h ; ' '
.text:004016AC                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004016B0                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004016B3                 call    fputs
.text:004016B8                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004016BF                 call    ds:libintl_gettext
.text:004016C5                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004016CD                 mov     [esp+1Ch+Stream], eax ; Format
.text:004016D0                 call    printf
.text:004016D5                 jmp     loc_40162B
.text:004016D5 sub_4015F0      endp
.text:004016D5
.text:004016D5 ; ---------------------------------------------------------------------------
.text:004016DA                 align 10h
.text:004016E0 dword_4016E0    dd 90002D2Dh, 7 dup(90909090h)
.text:004016E0                                         ; DATA XREF: sub_401930+E4↓o
.text:00401700 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401700                                         ; DATA XREF: sub_401930+2FC↓o
.text:0040172D                 align 20h
.text:00401740 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401740                                         ; DATA XREF: sub_401930:loc_401C92↓o
.text:0040176D                 align 20h
.text:00401780 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401780                                         ; DATA XREF: sub_401930:loc_401D30↓o
.text:00401780                                         ; sub_401930:loc_4020F7↓o
.text:004017A6                 align 20h
.text:004017C0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:004017C0                                         ; DATA XREF: sub_401930+48E↓o
.text:004017E0 dword_4017E0    dd 90909000h, 7 dup(90909090h)
.text:004017E0                                         ; DATA XREF: sub_401930:loc_401E01↓o
.text:00401800 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401800                                         ; DATA XREF: sub_401930:loc_401E1A↓o
.text:00401820 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401820                                         ; DATA XREF: sub_401930:loc_401EFF↓o
.text:00401820                                         ; sub_401930:loc_40222C↓o
.text:00401847                 align 20h
.text:00401860 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401860                                         ; DATA XREF: sub_401930:loc_402073↓o
.text:0040188E                 align 20h
.text:004018A0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004018A0                                         ; DATA XREF: sub_401930:loc_40215F↓o
.text:004018C1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:004018C1                                         ; DATA XREF: sub_401930+93F↓o
.text:004018DB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:004018DB                                         ; DATA XREF: sub_401930:loc_4022A7↓o
.text:004018F5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:004018F5                                         ; DATA XREF: sub_401930:loc_4022CE↓o
.text:00401913 ; const char VarName[]
.text:00401913 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401930:loc_402480↓o
.text:00401923                 align 10h
.text:00401930
.text:00401930 ; =============== S U B R O U T I N E =======================================
.text:00401930
.text:00401930
.text:00401930 ; int __cdecl sub_401930(int, int, char *Str, int, int, int, int, int)
.text:00401930 sub_401930      proc near               ; CODE XREF: sub_4024C0+5A↓p
.text:00401930                                         ; .text:004025AA↓p ...
.text:00401930
.text:00401930 Str1            = dword ptr -5Ch
.text:00401930 Str2            = dword ptr -58h
.text:00401930 MaxCount        = dword ptr -54h
.text:00401930 var_50          = dword ptr -50h
.text:00401930 var_4C          = dword ptr -4Ch
.text:00401930 var_3C          = dword ptr -3Ch
.text:00401930 var_38          = dword ptr -38h
.text:00401930 var_34          = dword ptr -34h
.text:00401930 var_30          = dword ptr -30h
.text:00401930 var_2C          = dword ptr -2Ch
.text:00401930 var_28          = dword ptr -28h
.text:00401930 var_24          = dword ptr -24h
.text:00401930 var_20          = dword ptr -20h
.text:00401930 var_1C          = dword ptr -1Ch
.text:00401930 var_18          = dword ptr -18h
.text:00401930 var_14          = dword ptr -14h
.text:00401930 arg_0           = dword ptr  4
.text:00401930 arg_4           = dword ptr  8
.text:00401930 Str             = dword ptr  0Ch
.text:00401930 arg_C           = dword ptr  10h
.text:00401930 arg_10          = dword ptr  14h
.text:00401930 arg_14          = dword ptr  18h
.text:00401930 arg_18          = dword ptr  1Ch
.text:00401930 arg_1C          = dword ptr  20h
.text:00401930
.text:00401930                 push    ebp
.text:00401931                 mov     eax, 0FFFFFFFFh
.text:00401936                 push    edi
.text:00401937                 push    esi
.text:00401938                 push    ebx
.text:00401939                 sub     esp, 4Ch
.text:0040193C                 mov     esi, [esp+5Ch+Str]
.text:00401940                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401944                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401947                 mov     ebx, [ebp+4]
.text:0040194A                 setz    dl
.text:0040194D                 movzx   ecx, dl
.text:00401950                 dec     ecx
.text:00401951                 and     ecx, ebx
.text:00401953                 mov     [esp+5Ch+var_14], ecx
.text:00401957                 mov     ecx, [esp+5Ch+arg_0]
.text:0040195B                 test    ecx, ecx
.text:0040195D                 jle     loc_401A87
.text:00401963                 mov     dword ptr [ebp+0Ch], 0
.text:0040196A                 mov     ebx, [ebp+0]
.text:0040196D                 test    ebx, ebx
.text:0040196F                 jz      loc_4024A0
.text:00401975                 mov     edi, [ebp+10h]
.text:00401978                 test    edi, edi
.text:0040197A                 jnz     short loc_4019D3
.text:0040197C                 lea     esi, [esi+0]
.text:00401980
.text:00401980 loc_401980:                             ; CODE XREF: sub_401930+B7C↓j
.text:00401980                 mov     [ebp+24h], ebx
.text:00401983                 mov     esi, [esp+5Ch+Str]
.text:00401987                 mov     [ebp+20h], ebx
.text:0040198A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040198E                 xor     ebx, ebx
.text:00401990                 mov     dword ptr [ebp+14h], 0
.text:00401997                 test    ecx, ecx
.text:00401999                 jz      loc_402480
.text:0040199F
.text:0040199F loc_40199F:                             ; CODE XREF: sub_401930+B64↓j
.text:0040199F                 mov     ebx, 1
.text:004019A4
.text:004019A4 loc_4019A4:                             ; CODE XREF: sub_401930+B5E↓j
.text:004019A4                 mov     [ebp+1Ch], ebx
.text:004019A7                 mov     ecx, [esp+5Ch+Str]
.text:004019AB                 movzx   eax, byte ptr [ecx]
.text:004019AE                 cmp     al, 2Dh ; '-'
.text:004019B0                 jz      loc_402470
.text:004019B6                 cmp     al, 2Bh ; '+'
.text:004019B8                 jz      loc_402459
.text:004019BE                 xor     edx, edx
.text:004019C0                 test    ebx, ebx
.text:004019C2                 setz    dl
.text:004019C5                 mov     [ebp+18h], edx
.text:004019C8
.text:004019C8 loc_4019C8:                             ; CODE XREF: sub_401930+B35↓j
.text:004019C8                 mov     [esp+5Ch+Str], esi
.text:004019CC                 mov     dword ptr [ebp+10h], 1
.text:004019D3
.text:004019D3 loc_4019D3:                             ; CODE XREF: sub_401930+4A↑j
.text:004019D3                 mov     eax, [ebp+14h]
.text:004019D6                 test    eax, eax
.text:004019D8                 jz      short loc_4019E3
.text:004019DA                 cmp     byte ptr [eax], 0
.text:004019DD                 jnz     loc_401AC0
.text:004019E3
.text:004019E3 loc_4019E3:                             ; CODE XREF: sub_401930+A8↑j
.text:004019E3                 mov     ebx, [ebp+0]
.text:004019E6                 cmp     [ebp+24h], ebx
.text:004019E9                 jle     short loc_4019EE
.text:004019EB                 mov     [ebp+24h], ebx
.text:004019EE
.text:004019EE loc_4019EE:                             ; CODE XREF: sub_401930+B9↑j
.text:004019EE                 cmp     [ebp+20h], ebx
.text:004019F1                 jle     short loc_4019F6
.text:004019F3                 mov     [ebp+20h], ebx
.text:004019F6
.text:004019F6 loc_4019F6:                             ; CODE XREF: sub_401930+C1↑j
.text:004019F6                 cmp     dword ptr [ebp+18h], 1
.text:004019FA                 jz      loc_4023D0
.text:00401A00
.text:00401A00 loc_401A00:                             ; CODE XREF: sub_401930+B13↓j
.text:00401A00                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401A04                 jz      loc_4023B4
.text:00401A0A                 cld
.text:00401A0B                 mov     ecx, [esp+5Ch+arg_4]
.text:00401A0F                 mov     edx, 3
.text:00401A14                 mov     edi, offset dword_4016E0
.text:00401A19                 mov     esi, [ecx+ebx*4]
.text:00401A1C                 mov     ecx, edx
.text:00401A1E                 repe cmpsb
.text:00401A20                 jnz     short loc_401A5C
.text:00401A22                 mov     edx, [ebp+24h]
.text:00401A25                 lea     eax, [ebx+1]
.text:00401A28                 cmp     [ebp+20h], edx
.text:00401A2B                 mov     [ebp+0], eax
.text:00401A2E                 jz      loc_4023C8
.text:00401A34                 cmp     edx, eax
.text:00401A36                 jz      short loc_401A50
.text:00401A38                 mov     [esp+5Ch+Str2], ebp
.text:00401A3C                 mov     ebx, [esp+5Ch+arg_4]
.text:00401A40                 mov     [esp+5Ch+Str1], ebx
.text:00401A43                 call    sub_4025E0
.text:00401A48                 nop
.text:00401A49                 lea     esi, [esi+0]
.text:00401A50
.text:00401A50 loc_401A50:                             ; CODE XREF: sub_401930+106↑j
.text:00401A50                                         ; sub_401930+A9B↓j
.text:00401A50                 mov     eax, [esp+5Ch+arg_0]
.text:00401A54                 mov     ebx, eax
.text:00401A56                 mov     [ebp+24h], eax
.text:00401A59                 mov     [ebp+0], eax
.text:00401A5C
.text:00401A5C loc_401A5C:                             ; CODE XREF: sub_401930+F0↑j
.text:00401A5C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401A60                 jz      loc_4023B4
.text:00401A66                 mov     esi, [esp+5Ch+arg_4]
.text:00401A6A                 mov     eax, [esi+ebx*4]
.text:00401A6D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401A70                 jz      short loc_401A97
.text:00401A72
.text:00401A72 loc_401A72:                             ; CODE XREF: sub_401930+16D↓j
.text:00401A72                 mov     edx, [ebp+18h]
.text:00401A75                 test    edx, edx
.text:00401A77                 jz      short loc_401A90
.text:00401A79                 mov     [ebp+0Ch], eax
.text:00401A7C                 lea     edi, [ebx+1]
.text:00401A7F                 mov     eax, 1
.text:00401A84                 mov     [ebp+0], edi
.text:00401A87
.text:00401A87 loc_401A87:                             ; CODE XREF: sub_401930+2D↑j
.text:00401A87                                         ; sub_401930+165↓j ...
.text:00401A87                 add     esp, 4Ch
.text:00401A8A                 pop     ebx
.text:00401A8B                 pop     esi
.text:00401A8C                 pop     edi
.text:00401A8D                 pop     ebp
.text:00401A8E                 retn
.text:00401A8E ; ---------------------------------------------------------------------------
.text:00401A8F                 align 10h
.text:00401A90
.text:00401A90 loc_401A90:                             ; CODE XREF: sub_401930+147↑j
.text:00401A90                                         ; sub_401930+A8A↓j ...
.text:00401A90                 mov     eax, 0FFFFFFFFh
.text:00401A95                 jmp     short loc_401A87
.text:00401A97 ; ---------------------------------------------------------------------------
.text:00401A97
.text:00401A97 loc_401A97:                             ; CODE XREF: sub_401930+140↑j
.text:00401A97                 movzx   edx, byte ptr [eax+1]
.text:00401A9B                 test    dl, dl
.text:00401A9D                 jz      short loc_401A72
.text:00401A9F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401AA3                 xor     ecx, ecx
.text:00401AA5                 test    ebx, ebx
.text:00401AA7                 jz      short loc_401AB2
.text:00401AA9                 cmp     dl, 2Dh ; '-'
.text:00401AAC                 jz      loc_4023AA
.text:00401AB2
.text:00401AB2 loc_401AB2:                             ; CODE XREF: sub_401930+177↑j
.text:00401AB2                                         ; sub_401930+A7F↓j
.text:00401AB2                 lea     esi, [ecx+eax+1]
.text:00401AB6                 mov     [ebp+14h], esi
.text:00401AB9                 lea     esi, [esi+0]
.text:00401AC0
.text:00401AC0 loc_401AC0:                             ; CODE XREF: sub_401930+AD↑j
.text:00401AC0                 mov     ecx, [esp+5Ch+arg_C]
.text:00401AC4                 test    ecx, ecx
.text:00401AC6                 jz      loc_401E50
.text:00401ACC                 mov     edx, [ebp+0]
.text:00401ACF                 mov     edi, [esp+5Ch+arg_4]
.text:00401AD3                 mov     eax, [edi+edx*4]
.text:00401AD6                 movzx   edx, byte ptr [eax+1]
.text:00401ADA                 cmp     dl, 2Dh ; '-'
.text:00401ADD                 jz      short loc_401AF5
.text:00401ADF                 mov     ebx, [esp+5Ch+arg_14]
.text:00401AE3                 test    ebx, ebx
.text:00401AE5                 jz      loc_401E50
.text:00401AEB                 cmp     byte ptr [eax+2], 0
.text:00401AEF                 jz      loc_40238A
.text:00401AF5
.text:00401AF5 loc_401AF5:                             ; CODE XREF: sub_401930+1AD↑j
.text:00401AF5                                         ; sub_401930+A75↓j
.text:00401AF5                 mov     [esp+5Ch+var_18], 0
.text:00401AFD                 mov     ecx, [ebp+14h]
.text:00401B00                 mov     [esp+5Ch+var_1C], 0
.text:00401B08                 mov     [esp+5Ch+var_20], 0
.text:00401B10                 mov     edi, ecx
.text:00401B12                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401B1A                 movzx   eax, byte ptr [ecx]
.text:00401B1D                 test    al, al
.text:00401B1F                 jz      short loc_401B3C
.text:00401B21                 cmp     al, 3Dh ; '='
.text:00401B23                 jz      short loc_401B3C
.text:00401B25                 lea     esi, [esi+0]
.text:00401B29                 lea     edi, [edi+0]
.text:00401B30
.text:00401B30 loc_401B30:                             ; CODE XREF: sub_401930+20A↓j
.text:00401B30                 inc     edi
.text:00401B31                 movzx   eax, byte ptr [edi]
.text:00401B34                 test    al, al
.text:00401B36                 jz      short loc_401B3C
.text:00401B38                 cmp     al, 3Dh ; '='
.text:00401B3A                 jnz     short loc_401B30
.text:00401B3C
.text:00401B3C loc_401B3C:                             ; CODE XREF: sub_401930+1EF↑j
.text:00401B3C                                         ; sub_401930+1F3↑j ...
.text:00401B3C                 mov     [esp+5Ch+var_28], 0
.text:00401B44                 mov     esi, [esp+5Ch+arg_C]
.text:00401B48                 mov     ebx, [esi]
.text:00401B4A                 test    ebx, ebx
.text:00401B4C                 mov     edx, ebx
.text:00401B4E                 jz      loc_401D70
.text:00401B54                 lea     esi, [esi+0]
.text:00401B5A                 lea     edi, [edi+0]
.text:00401B60
.text:00401B60 loc_401B60:                             ; CODE XREF: sub_401930+25E↓j
.text:00401B60                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401B64                 mov     ebx, edi
.text:00401B66                 sub     ebx, ecx
.text:00401B68                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401B6C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401B6F                 call    strncmp
.text:00401B74                 test    eax, eax
.text:00401B76                 jz      loc_402306
.text:00401B7C
.text:00401B7C loc_401B7C:                             ; CODE XREF: sub_401930+A0F↓j
.text:00401B7C                                         ; sub_401930+A24↓j ...
.text:00401B7C                 inc     [esp+5Ch+var_28]
.text:00401B80                 add     esi, 10h
.text:00401B83                 mov     ecx, [esi]
.text:00401B85                 test    ecx, ecx
.text:00401B87                 mov     edx, ecx
.text:00401B89                 jz      short loc_401B90
.text:00401B8B                 mov     ecx, [ebp+14h]
.text:00401B8E                 jmp     short loc_401B60
.text:00401B90 ; ---------------------------------------------------------------------------
.text:00401B90
.text:00401B90 loc_401B90:                             ; CODE XREF: sub_401930+259↑j
.text:00401B90                                         ; sub_401930+A55↓j
.text:00401B90                 mov     esi, [esp+5Ch+var_20]
.text:00401B94                 test    esi, esi
.text:00401B96                 jz      short loc_401BA4
.text:00401B98                 mov     edx, [esp+5Ch+var_1C]
.text:00401B9C                 test    edx, edx
.text:00401B9E                 jz      loc_4022B0
.text:00401BA4
.text:00401BA4 loc_401BA4:                             ; CODE XREF: sub_401930+266↑j
.text:00401BA4                 mov     eax, [esp+5Ch+var_18]
.text:00401BA8                 test    eax, eax
.text:00401BAA                 jz      loc_401D70
.text:00401BB0                 mov     ecx, [ebp+0]
.text:00401BB3                 lea     eax, [ecx+1]
.text:00401BB6                 mov     [ebp+0], eax
.text:00401BB9                 cmp     byte ptr [edi], 0
.text:00401BBC                 jz      loc_401CD0
.text:00401BC2                 mov     ecx, [esp+5Ch+var_18]
.text:00401BC6                 mov     esi, [ecx+4]
.text:00401BC9                 test    esi, esi
.text:00401BCB                 jz      short loc_401C16
.text:00401BCD                 lea     ebx, [edi+1]
.text:00401BD0                 mov     [ebp+0Ch], ebx
.text:00401BD3
.text:00401BD3 loc_401BD3:                             ; CODE XREF: sub_401930+3A8↓j
.text:00401BD3                                         ; sub_401930+3C4↓j
.text:00401BD3                 mov     ebx, [ebp+14h]
.text:00401BD6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401BD9                 call    strlen
.text:00401BDE                 add     [ebp+14h], eax
.text:00401BE1                 mov     esi, [esp+5Ch+arg_10]
.text:00401BE5                 test    esi, esi
.text:00401BE7                 jz      short loc_401BF3
.text:00401BE9                 mov     ebp, [esp+5Ch+var_24]
.text:00401BED                 mov     ecx, [esp+5Ch+arg_10]
.text:00401BF1                 mov     [ecx], ebp
.text:00401BF3
.text:00401BF3 loc_401BF3:                             ; CODE XREF: sub_401930+2B7↑j
.text:00401BF3                 mov     eax, [esp+5Ch+var_18]
.text:00401BF7                 mov     ecx, [eax+8]
.text:00401BFA                 test    ecx, ecx
.text:00401BFC                 jnz     short loc_401C0A
.text:00401BFE                 mov     ecx, [esp+5Ch+var_18]
.text:00401C02
.text:00401C02 loc_401C02:                             ; CODE XREF: sub_401930+723↓j
.text:00401C02                 mov     eax, [ecx+0Ch]
.text:00401C05                 jmp     loc_401A87
.text:00401C0A ; ---------------------------------------------------------------------------
.text:00401C0A
.text:00401C0A loc_401C0A:                             ; CODE XREF: sub_401930+2CC↑j
.text:00401C0A                                         ; sub_401930+719↓j
.text:00401C0A                 mov     esi, [eax+0Ch]
.text:00401C0D                 xor     eax, eax
.text:00401C0F                 mov     [ecx], esi
.text:00401C11                 jmp     loc_401A87
.text:00401C16 ; ---------------------------------------------------------------------------
.text:00401C16
.text:00401C16 loc_401C16:                             ; CODE XREF: sub_401930+29B↑j
.text:00401C16                 mov     edi, [esp+5Ch+var_14]
.text:00401C1A                 test    edi, edi
.text:00401C1C                 jz      short loc_401C70
.text:00401C1E                 mov     esi, [esp+5Ch+arg_4]
.text:00401C22                 mov     edx, [esi+eax*4-4]
.text:00401C26                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401C2A                 jz      short loc_401C92
.text:00401C2C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401C33                 call    ds:libintl_gettext
.text:00401C39                 mov     edx, [esp+5Ch+var_18]
.text:00401C3D                 mov     edi, [edx]
.text:00401C3F                 mov     [esp+5Ch+var_4C], edi
.text:00401C43                 mov     ebx, [ebp+0]
.text:00401C46                 mov     edi, [esp+5Ch+arg_4]
.text:00401C4A                 mov     ecx, [edi+ebx*4-4]
.text:00401C4E                 movsx   esi, byte ptr [ecx]
.text:00401C51                 mov     ecx, ds:_iob
.text:00401C57                 add     ecx, 40h ; '@'
.text:00401C5A                 mov     [esp+5Ch+var_50], esi
.text:00401C5E                 mov     ebx, [edi]
.text:00401C60                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401C64                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401C67                 mov     [esp+5Ch+MaxCount], ebx
.text:00401C6B                 call    fprintf
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_401930+2EC↑j
.text:00401C70                                         ; sub_401930+398↓j
.text:00401C70                 mov     ecx, [ebp+14h]
.text:00401C73                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401C76                 call    strlen
.text:00401C7B                 add     [ebp+14h], eax
.text:00401C7E                 mov     eax, [esp+5Ch+var_18]
.text:00401C82                 mov     esi, [eax+0Ch]
.text:00401C85                 mov     [ebp+8], esi
.text:00401C88
.text:00401C88 loc_401C88:                             ; CODE XREF: sub_401930+4E5↓j
.text:00401C88                                         ; sub_401930+73E↓j ...
.text:00401C88                 mov     eax, 3Fh ; '?'
.text:00401C8D                 jmp     loc_401A87
.text:00401C92 ; ---------------------------------------------------------------------------
.text:00401C92
.text:00401C92 loc_401C92:                             ; CODE XREF: sub_401930+2FA↑j
.text:00401C92                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401C99                 call    ds:libintl_gettext
.text:00401C9F                 mov     edx, [esp+5Ch+var_18]
.text:00401CA3                 mov     edi, [esp+5Ch+arg_4]
.text:00401CA7                 mov     ecx, ds:_iob
.text:00401CAD                 mov     esi, [edx]
.text:00401CAF                 add     ecx, 40h ; '@'
.text:00401CB2                 mov     [esp+5Ch+var_50], esi
.text:00401CB6                 mov     ebx, [edi]
.text:00401CB8                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401CBC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401CBF                 mov     [esp+5Ch+MaxCount], ebx
.text:00401CC3                 call    fprintf
.text:00401CC8                 jmp     short loc_401C70
.text:00401CC8 ; ---------------------------------------------------------------------------
.text:00401CCA                 align 10h
.text:00401CD0
.text:00401CD0 loc_401CD0:                             ; CODE XREF: sub_401930+28C↑j
.text:00401CD0                 mov     ebx, [esp+5Ch+var_18]
.text:00401CD4                 cmp     dword ptr [ebx+4], 1
.text:00401CD8                 jnz     loc_401BD3
.text:00401CDE                 cmp     eax, [esp+5Ch+arg_0]
.text:00401CE2                 jge     short loc_401CF9
.text:00401CE4                 mov     ebx, [esp+5Ch+arg_4]
.text:00401CE8                 lea     edi, [ecx+2]
.text:00401CEB                 mov     [ebp+0], edi
.text:00401CEE                 mov     esi, [ebx+eax*4]
.text:00401CF1                 mov     [ebp+0Ch], esi
.text:00401CF4                 jmp     loc_401BD3
.text:00401CF9 ; ---------------------------------------------------------------------------
.text:00401CF9
.text:00401CF9 loc_401CF9:                             ; CODE XREF: sub_401930+3B2↑j
.text:00401CF9                 mov     edx, [esp+5Ch+var_14]
.text:00401CFD                 test    edx, edx
.text:00401CFF                 jnz     short loc_401D30
.text:00401D01
.text:00401D01 loc_401D01:                             ; CODE XREF: sub_401930+437↓j
.text:00401D01                 mov     edx, [ebp+14h]
.text:00401D04                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401D07                 call    strlen
.text:00401D0C                 add     [ebp+14h], eax
.text:00401D0F                 mov     eax, [esp+5Ch+var_18]
.text:00401D13                 mov     edi, [eax+0Ch]
.text:00401D16                 mov     [ebp+8], edi
.text:00401D19
.text:00401D19 loc_401D19:                             ; CODE XREF: sub_401930+7C2↓j
.text:00401D19                 mov     ebp, [esp+5Ch+Str]
.text:00401D1D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401D21                 setnz   bl
.text:00401D24                 movzx   esi, bl
.text:00401D27                 lea     eax, [esi+esi*4+3Ah]
.text:00401D2B                 jmp     loc_401A87
.text:00401D30 ; ---------------------------------------------------------------------------
.text:00401D30
.text:00401D30 loc_401D30:                             ; CODE XREF: sub_401930+3CF↑j
.text:00401D30                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401D37                 call    ds:libintl_gettext
.text:00401D3D                 mov     ecx, [ebp+0]
.text:00401D40                 mov     esi, [esp+5Ch+arg_4]
.text:00401D44                 mov     ebx, [esi+ecx*4-4]
.text:00401D48                 mov     ecx, ds:_iob
.text:00401D4E                 mov     [esp+5Ch+var_50], ebx
.text:00401D52                 mov     edi, [esi]
.text:00401D54                 add     ecx, 40h ; '@'
.text:00401D57                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D5B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D5E                 mov     [esp+5Ch+MaxCount], edi
.text:00401D62                 call    fprintf
.text:00401D67                 jmp     short loc_401D01
.text:00401D67 ; ---------------------------------------------------------------------------
.text:00401D69                 align 10h
.text:00401D70
.text:00401D70 loc_401D70:                             ; CODE XREF: sub_401930+21E↑j
.text:00401D70                                         ; sub_401930+27A↑j
.text:00401D70                 mov     eax, [esp+5Ch+arg_14]
.text:00401D74                 test    eax, eax
.text:00401D76                 jz      short loc_401DA6
.text:00401D78                 mov     ebx, [ebp+0]
.text:00401D7B                 mov     esi, [esp+5Ch+arg_4]
.text:00401D7F                 mov     edi, [esi+ebx*4]
.text:00401D82                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401D86                 jz      short loc_401DA9
.text:00401D88                 mov     ecx, [ebp+14h]
.text:00401D8B                 mov     edx, [esp+5Ch+Str]
.text:00401D8F                 movsx   ebx, byte ptr [ecx]
.text:00401D92                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401D95                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401D99                 call    strchr
.text:00401D9E                 test    eax, eax
.text:00401DA0                 jnz     loc_401E50
.text:00401DA6
.text:00401DA6 loc_401DA6:                             ; CODE XREF: sub_401930+446↑j
.text:00401DA6                 mov     ebx, [ebp+0]
.text:00401DA9
.text:00401DA9 loc_401DA9:                             ; CODE XREF: sub_401930+456↑j
.text:00401DA9                 mov     eax, [esp+5Ch+var_14]
.text:00401DAD                 test    eax, eax
.text:00401DAF                 jz      short loc_401E01
.text:00401DB1                 mov     esi, [esp+5Ch+arg_4]
.text:00401DB5                 mov     edi, [esi+ebx*4]
.text:00401DB8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401DBC                 jz      short loc_401E1A
.text:00401DBE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401DC5                 call    ds:libintl_gettext
.text:00401DCB                 mov     edi, [ebp+14h]
.text:00401DCE                 mov     [esp+5Ch+var_4C], edi
.text:00401DD2                 mov     ebx, [ebp+0]
.text:00401DD5                 mov     edi, [esp+5Ch+arg_4]
.text:00401DD9                 mov     esi, [edi+ebx*4]
.text:00401DDC                 movsx   ecx, byte ptr [esi]
.text:00401DDF                 mov     esi, ds:_iob
.text:00401DE5                 add     esi, 40h ; '@'
.text:00401DE8                 mov     [esp+5Ch+var_50], ecx
.text:00401DEC                 mov     ebx, [edi]
.text:00401DEE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401DF2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401DF5                 mov     [esp+5Ch+MaxCount], ebx
.text:00401DF9                 call    fprintf
.text:00401DFE
.text:00401DFE loc_401DFE:                             ; CODE XREF: sub_401930+51D↓j
.text:00401DFE                 mov     ebx, [ebp+0]
.text:00401E01
.text:00401E01 loc_401E01:                             ; CODE XREF: sub_401930+47F↑j
.text:00401E01                 mov     dword ptr [ebp+14h], offset dword_4017E0
.text:00401E08                 lea     edx, [ebx+1]
.text:00401E0B                 mov     [ebp+0], edx
.text:00401E0E
.text:00401E0E loc_401E0E:                             ; CODE XREF: sub_401930+999↓j
.text:00401E0E                 mov     dword ptr [ebp+8], 0
.text:00401E15                 jmp     loc_401C88
.text:00401E1A ; ---------------------------------------------------------------------------
.text:00401E1A
.text:00401E1A loc_401E1A:                             ; CODE XREF: sub_401930+48C↑j
.text:00401E1A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00401E21                 call    ds:libintl_gettext
.text:00401E27                 mov     ecx, [ebp+14h]
.text:00401E2A                 mov     edi, [esp+5Ch+arg_4]
.text:00401E2E                 mov     edx, ds:_iob
.text:00401E34                 mov     [esp+5Ch+var_50], ecx
.text:00401E38                 mov     ebx, [edi]
.text:00401E3A                 add     edx, 40h ; '@'
.text:00401E3D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E41                 mov     [esp+5Ch+MaxCount], ebx
.text:00401E45                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401E48                 call    fprintf
.text:00401E4D                 jmp     short loc_401DFE
.text:00401E4D ; ---------------------------------------------------------------------------
.text:00401E4F                 align 10h
.text:00401E50
.text:00401E50 loc_401E50:                             ; CODE XREF: sub_401930+196↑j
.text:00401E50                                         ; sub_401930+1B5↑j ...
.text:00401E50                 mov     esi, [ebp+14h]
.text:00401E53                 movzx   ebx, byte ptr [esi]
.text:00401E56                 inc     esi
.text:00401E57                 mov     [ebp+14h], esi
.text:00401E5A                 mov     ecx, [esp+5Ch+Str]
.text:00401E5E                 movsx   esi, bl
.text:00401E61                 mov     [esp+5Ch+Str2], esi ; Val
.text:00401E65                 mov     edi, esi
.text:00401E67                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401E6A                 call    strchr
.text:00401E6F                 mov     ecx, [ebp+14h]
.text:00401E72                 cmp     byte ptr [ecx], 0
.text:00401E75                 jnz     short loc_401E7A
.text:00401E77                 inc     dword ptr [ebp+0]
.text:00401E7A
.text:00401E7A loc_401E7A:                             ; CODE XREF: sub_401930+545↑j
.text:00401E7A                 test    eax, eax
.text:00401E7C                 jz      loc_402260
.text:00401E82                 cmp     bl, 3Ah ; ':'
.text:00401E85                 jz      loc_402260
.text:00401E8B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00401E8E                 jz      loc_401F46
.text:00401E94                 movzx   edx, byte ptr [eax+1]
.text:00401E98
.text:00401E98 loc_401E98:                             ; CODE XREF: sub_401930+61D↓j
.text:00401E98                 cmp     dl, 3Ah ; ':'
.text:00401E9B                 jz      short loc_401EA4
.text:00401E9D
.text:00401E9D loc_401E9D:                             ; CODE XREF: sub_401930+590↓j
.text:00401E9D                 mov     eax, esi
.text:00401E9F                 jmp     loc_401A87
.text:00401EA4 ; ---------------------------------------------------------------------------
.text:00401EA4
.text:00401EA4 loc_401EA4:                             ; CODE XREF: sub_401930+56B↑j
.text:00401EA4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00401EA8                 jz      loc_401F31
.text:00401EAE                 cmp     byte ptr [ecx], 0
.text:00401EB1                 jz      short loc_401EC2
.text:00401EB3
.text:00401EB3 loc_401EB3:                             ; CODE XREF: sub_401930+604↓j
.text:00401EB3                 inc     dword ptr [ebp+0]
.text:00401EB6                 mov     [ebp+0Ch], ecx
.text:00401EB9
.text:00401EB9 loc_401EB9:                             ; CODE XREF: sub_401930+5AB↓j
.text:00401EB9                                         ; sub_401930+5C6↓j ...
.text:00401EB9                 mov     dword ptr [ebp+14h], 0
.text:00401EC0                 jmp     short loc_401E9D
.text:00401EC2 ; ---------------------------------------------------------------------------
.text:00401EC2
.text:00401EC2 loc_401EC2:                             ; CODE XREF: sub_401930+581↑j
.text:00401EC2                 mov     ecx, [ebp+0]
.text:00401EC5                 cmp     ecx, [esp+5Ch+arg_0]
.text:00401EC9                 jz      short loc_401EDD
.text:00401ECB                 mov     eax, [esp+5Ch+arg_4]
.text:00401ECF                 lea     edx, [ecx+1]
.text:00401ED2                 mov     [ebp+0], edx
.text:00401ED5                 mov     ebx, [eax+ecx*4]
.text:00401ED8                 mov     [ebp+0Ch], ebx
.text:00401EDB                 jmp     short loc_401EB9
.text:00401EDD ; ---------------------------------------------------------------------------
.text:00401EDD
.text:00401EDD loc_401EDD:                             ; CODE XREF: sub_401930+599↑j
.text:00401EDD                 mov     ecx, [esp+5Ch+var_14]
.text:00401EE1                 test    ecx, ecx
.text:00401EE3                 jnz     short loc_401EFF
.text:00401EE5
.text:00401EE5 loc_401EE5:                             ; CODE XREF: sub_401930+5FF↓j
.text:00401EE5                 mov     [ebp+8], edi
.text:00401EE8                 mov     edi, [esp+5Ch+Str]
.text:00401EEC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00401EEF                 jz      short loc_401EF8
.text:00401EF1                 mov     esi, 3Fh ; '?'
.text:00401EF6                 jmp     short loc_401EB9
.text:00401EF8 ; ---------------------------------------------------------------------------
.text:00401EF8
.text:00401EF8 loc_401EF8:                             ; CODE XREF: sub_401930+5BF↑j
.text:00401EF8                 mov     esi, 3Ah ; ':'
.text:00401EFD                 jmp     short loc_401EB9
.text:00401EFF ; ---------------------------------------------------------------------------
.text:00401EFF
.text:00401EFF loc_401EFF:                             ; CODE XREF: sub_401930+5B3↑j
.text:00401EFF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00401F06                 call    ds:libintl_gettext
.text:00401F0C                 mov     [esp+5Ch+var_50], edi
.text:00401F10                 mov     ebx, [esp+5Ch+arg_4]
.text:00401F14                 mov     edx, ds:_iob
.text:00401F1A                 mov     esi, [ebx]
.text:00401F1C                 add     edx, 40h ; '@'
.text:00401F1F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401F23                 mov     [esp+5Ch+MaxCount], esi
.text:00401F27                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401F2A                 call    fprintf
.text:00401F2F                 jmp     short loc_401EE5
.text:00401F31 ; ---------------------------------------------------------------------------
.text:00401F31
.text:00401F31 loc_401F31:                             ; CODE XREF: sub_401930+578↑j
.text:00401F31                 cmp     byte ptr [ecx], 0
.text:00401F34                 jnz     loc_401EB3
.text:00401F3A                 mov     dword ptr [ebp+0Ch], 0
.text:00401F41                 jmp     loc_401EB9
.text:00401F46 ; ---------------------------------------------------------------------------
.text:00401F46
.text:00401F46 loc_401F46:                             ; CODE XREF: sub_401930+55E↑j
.text:00401F46                 movzx   edx, byte ptr [eax+1]
.text:00401F4A                 cmp     dl, 3Bh ; ';'
.text:00401F4D                 jnz     loc_401E98
.text:00401F53                 mov     [esp+5Ch+var_2C], 0
.text:00401F5B                 mov     [esp+5Ch+var_30], 0
.text:00401F63                 mov     [esp+5Ch+var_34], 0
.text:00401F6B                 mov     [esp+5Ch+var_38], 0
.text:00401F73                 cmp     byte ptr [ecx], 0
.text:00401F76                 jz      loc_4021EB
.text:00401F7C                 inc     dword ptr [ebp+0]
.text:00401F7F                 mov     [ebp+0Ch], ecx
.text:00401F82
.text:00401F82 loc_401F82:                             ; CODE XREF: sub_401930+8D4↓j
.text:00401F82                 mov     edi, [ebp+0Ch]
.text:00401F85                 mov     [ebp+14h], edi
.text:00401F88                 movzx   eax, byte ptr [edi]
.text:00401F8B                 test    al, al
.text:00401F8D                 jz      short loc_401F9F
.text:00401F8F                 cmp     al, 3Dh ; '='
.text:00401F91                 jz      short loc_401F9F
.text:00401F93
.text:00401F93 loc_401F93:                             ; CODE XREF: sub_401930+66D↓j
.text:00401F93                 inc     edi
.text:00401F94                 movzx   eax, byte ptr [edi]
.text:00401F97                 test    al, al
.text:00401F99                 jz      short loc_401F9F
.text:00401F9B                 cmp     al, 3Dh ; '='
.text:00401F9D                 jnz     short loc_401F93
.text:00401F9F
.text:00401F9F loc_401F9F:                             ; CODE XREF: sub_401930+65D↑j
.text:00401F9F                                         ; sub_401930+661↑j ...
.text:00401F9F                 mov     [esp+5Ch+var_3C], 0
.text:00401FA7                 mov     esi, [esp+5Ch+arg_C]
.text:00401FAB                 mov     eax, [esi]
.text:00401FAD                 test    eax, eax
.text:00401FAF                 jz      loc_402130
.text:00401FB5                 mov     ecx, eax
.text:00401FB7
.text:00401FB7 loc_401FB7:                             ; CODE XREF: sub_401930+6B3↓j
.text:00401FB7                 mov     ebx, [ebp+14h]
.text:00401FBA                 mov     eax, edi
.text:00401FBC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00401FBF                 sub     eax, ebx
.text:00401FC1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00401FC5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00401FC9                 call    strncmp
.text:00401FCE                 test    eax, eax
.text:00401FD0                 jz      loc_402197
.text:00401FD6
.text:00401FD6 loc_401FD6:                             ; CODE XREF: sub_401930+88C↓j
.text:00401FD6                                         ; sub_401930+89D↓j
.text:00401FD6                 inc     [esp+5Ch+var_3C]
.text:00401FDA                 add     esi, 10h
.text:00401FDD                 mov     edx, [esi]
.text:00401FDF                 test    edx, edx
.text:00401FE1                 mov     ecx, edx
.text:00401FE3                 jnz     short loc_401FB7
.text:00401FE5
.text:00401FE5 loc_401FE5:                             ; CODE XREF: sub_401930+8B6↓j
.text:00401FE5                 mov     esi, [esp+5Ch+var_34]
.text:00401FE9                 test    esi, esi
.text:00401FEB                 jz      short loc_401FF9
.text:00401FED                 mov     ebx, [esp+5Ch+var_30]
.text:00401FF1                 test    ebx, ebx
.text:00401FF3                 jz      loc_402141
.text:00401FF9
.text:00401FF9 loc_401FF9:                             ; CODE XREF: sub_401930+6BB↑j
.text:00401FF9                 mov     esi, [esp+5Ch+var_2C]
.text:00401FFD                 test    esi, esi
.text:00401FFF                 jz      loc_402130
.text:00402005                 cmp     byte ptr [edi], 0
.text:00402008                 jz      loc_4020B0
.text:0040200E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402012                 mov     ebx, [ecx+4]
.text:00402015                 test    ebx, ebx
.text:00402017                 jz      short loc_402058
.text:00402019                 lea     edx, [edi+1]
.text:0040201C                 mov     [ebp+0Ch], edx
.text:0040201F
.text:0040201F loc_40201F:                             ; CODE XREF: sub_401930+788↓j
.text:0040201F                                         ; sub_401930+7A7↓j
.text:0040201F                 mov     edi, [ebp+14h]
.text:00402022                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402025                 call    strlen
.text:0040202A                 add     [ebp+14h], eax
.text:0040202D                 mov     eax, [esp+5Ch+arg_10]
.text:00402031                 test    eax, eax
.text:00402033                 jz      short loc_402040
.text:00402035                 mov     edx, [esp+5Ch+var_38]
.text:00402039                 mov     ebp, [esp+5Ch+arg_10]
.text:0040203D                 mov     [ebp+0], edx
.text:00402040
.text:00402040 loc_402040:                             ; CODE XREF: sub_401930+703↑j
.text:00402040                 mov     eax, [esp+5Ch+var_2C]
.text:00402044                 mov     ecx, [eax+8]
.text:00402047                 test    ecx, ecx
.text:00402049                 jnz     loc_401C0A
.text:0040204F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402053                 jmp     loc_401C02
.text:00402058 ; ---------------------------------------------------------------------------
.text:00402058
.text:00402058 loc_402058:                             ; CODE XREF: sub_401930+6E7↑j
.text:00402058                 mov     eax, [esp+5Ch+var_14]
.text:0040205C                 test    eax, eax
.text:0040205E                 jnz     short loc_402073
.text:00402060
.text:00402060 loc_402060:                             ; CODE XREF: sub_401930+779↓j
.text:00402060                 mov     ecx, [ebp+14h]
.text:00402063                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402066                 call    strlen
.text:0040206B                 add     [ebp+14h], eax
.text:0040206E                 jmp     loc_401C88
.text:00402073 ; ---------------------------------------------------------------------------
.text:00402073
.text:00402073 loc_402073:                             ; CODE XREF: sub_401930+72E↑j
.text:00402073                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040207A                 call    ds:libintl_gettext
.text:00402080                 mov     edx, [esp+5Ch+var_2C]
.text:00402084                 mov     ebx, [esp+5Ch+arg_4]
.text:00402088                 mov     edi, [edx]
.text:0040208A                 mov     [esp+5Ch+var_50], edi
.text:0040208E                 mov     edi, ds:_iob
.text:00402094                 mov     esi, [ebx]
.text:00402096                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040209A                 add     edi, 40h ; '@'
.text:0040209D                 mov     [esp+5Ch+MaxCount], esi
.text:004020A1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:004020A4                 call    fprintf
.text:004020A9                 jmp     short loc_402060
.text:004020A9 ; ---------------------------------------------------------------------------
.text:004020AB                 align 10h
.text:004020B0
.text:004020B0 loc_4020B0:                             ; CODE XREF: sub_401930+6D8↑j
.text:004020B0                 mov     esi, [esp+5Ch+var_2C]
.text:004020B4                 cmp     dword ptr [esi+4], 1
.text:004020B8                 jnz     loc_40201F
.text:004020BE                 mov     ecx, [ebp+0]
.text:004020C1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004020C5                 jge     short loc_4020DC
.text:004020C7                 mov     eax, [esp+5Ch+arg_4]
.text:004020CB                 lea     ebx, [ecx+1]
.text:004020CE                 mov     [ebp+0], ebx
.text:004020D1                 mov     edi, [eax+ecx*4]
.text:004020D4                 mov     [ebp+0Ch], edi
.text:004020D7                 jmp     loc_40201F
.text:004020DC ; ---------------------------------------------------------------------------
.text:004020DC
.text:004020DC loc_4020DC:                             ; CODE XREF: sub_401930+795↑j
.text:004020DC                 mov     edx, [esp+5Ch+var_14]
.text:004020E0                 test    edx, edx
.text:004020E2                 jnz     short loc_4020F7
.text:004020E4
.text:004020E4 loc_4020E4:                             ; CODE XREF: sub_401930+7FE↓j
.text:004020E4                 mov     edx, [ebp+14h]
.text:004020E7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004020EA                 call    strlen
.text:004020EF                 add     [ebp+14h], eax
.text:004020F2                 jmp     loc_401D19
.text:004020F7 ; ---------------------------------------------------------------------------
.text:004020F7
.text:004020F7 loc_4020F7:                             ; CODE XREF: sub_401930+7B2↑j
.text:004020F7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004020FE                 call    ds:libintl_gettext
.text:00402104                 mov     ecx, [ebp+0]
.text:00402107                 mov     ebx, [esp+5Ch+arg_4]
.text:0040210B                 mov     edi, [ebx+ecx*4-4]
.text:0040210F                 mov     ecx, ds:_iob
.text:00402115                 mov     [esp+5Ch+var_50], edi
.text:00402119                 mov     esi, [ebx]
.text:0040211B                 add     ecx, 40h ; '@'
.text:0040211E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402122                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402125                 mov     [esp+5Ch+MaxCount], esi
.text:00402129                 call    fprintf
.text:0040212E                 jmp     short loc_4020E4
.text:00402130 ; ---------------------------------------------------------------------------
.text:00402130
.text:00402130 loc_402130:                             ; CODE XREF: sub_401930+67F↑j
.text:00402130                                         ; sub_401930+6CF↑j
.text:00402130                 mov     dword ptr [ebp+14h], 0
.text:00402137                 mov     eax, 57h ; 'W'
.text:0040213C                 jmp     loc_401A87
.text:00402141 ; ---------------------------------------------------------------------------
.text:00402141
.text:00402141 loc_402141:                             ; CODE XREF: sub_401930+6C3↑j
.text:00402141                 mov     edi, [esp+5Ch+var_14]
.text:00402145                 test    edi, edi
.text:00402147                 jnz     short loc_40215F
.text:00402149
.text:00402149 loc_402149:                             ; CODE XREF: sub_401930+865↓j
.text:00402149                 mov     edx, [ebp+14h]
.text:0040214C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040214F                 call    strlen
.text:00402154                 add     [ebp+14h], eax
.text:00402157                 inc     dword ptr [ebp+0]
.text:0040215A                 jmp     loc_401C88
.text:0040215F ; ---------------------------------------------------------------------------
.text:0040215F
.text:0040215F loc_40215F:                             ; CODE XREF: sub_401930+817↑j
.text:0040215F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402166                 call    ds:libintl_gettext
.text:0040216C                 mov     ecx, [ebp+0]
.text:0040216F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402173                 mov     edi, [ebx+ecx*4]
.text:00402176                 mov     ecx, ds:_iob
.text:0040217C                 mov     [esp+5Ch+var_50], edi
.text:00402180                 mov     esi, [ebx]
.text:00402182                 add     ecx, 40h ; '@'
.text:00402185                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402189                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040218C                 mov     [esp+5Ch+MaxCount], esi
.text:00402190                 call    fprintf
.text:00402195                 jmp     short loc_402149
.text:00402197 ; ---------------------------------------------------------------------------
.text:00402197
.text:00402197 loc_402197:                             ; CODE XREF: sub_401930+6A0↑j
.text:00402197                 mov     edx, [ebp+14h]
.text:0040219A                 mov     ebx, edi
.text:0040219C                 mov     ecx, [esi]
.text:0040219E                 sub     ebx, edx
.text:004021A0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004021A3                 call    strlen
.text:004021A8                 cmp     ebx, eax
.text:004021AA                 jz      short loc_4021D2
.text:004021AC                 mov     ebx, [esp+5Ch+var_2C]
.text:004021B0                 test    ebx, ebx
.text:004021B2                 jz      short loc_4021C1
.text:004021B4                 mov     [esp+5Ch+var_34], 1
.text:004021BC                 jmp     loc_401FD6
.text:004021C1 ; ---------------------------------------------------------------------------
.text:004021C1
.text:004021C1 loc_4021C1:                             ; CODE XREF: sub_401930+882↑j
.text:004021C1                 mov     [esp+5Ch+var_2C], esi
.text:004021C5                 mov     ecx, [esp+5Ch+var_3C]
.text:004021C9                 mov     [esp+5Ch+var_38], ecx
.text:004021CD                 jmp     loc_401FD6
.text:004021D2 ; ---------------------------------------------------------------------------
.text:004021D2
.text:004021D2 loc_4021D2:                             ; CODE XREF: sub_401930+87A↑j
.text:004021D2                 mov     [esp+5Ch+var_2C], esi
.text:004021D6                 mov     eax, [esp+5Ch+var_3C]
.text:004021DA                 mov     [esp+5Ch+var_30], 1
.text:004021E2                 mov     [esp+5Ch+var_38], eax
.text:004021E6                 jmp     loc_401FE5
.text:004021EB ; ---------------------------------------------------------------------------
.text:004021EB
.text:004021EB loc_4021EB:                             ; CODE XREF: sub_401930+646↑j
.text:004021EB                 mov     edx, [ebp+0]
.text:004021EE                 cmp     edx, [esp+5Ch+arg_0]
.text:004021F2                 jz      short loc_402209
.text:004021F4                 mov     ebx, [esp+5Ch+arg_4]
.text:004021F8                 lea     esi, [edx+1]
.text:004021FB                 mov     [ebp+0], esi
.text:004021FE                 mov     edi, [ebx+edx*4]
.text:00402201                 mov     [ebp+0Ch], edi
.text:00402204                 jmp     loc_401F82
.text:00402209 ; ---------------------------------------------------------------------------
.text:00402209
.text:00402209 loc_402209:                             ; CODE XREF: sub_401930+8C2↑j
.text:00402209                 mov     edi, [esp+5Ch+var_14]
.text:0040220D                 test    edi, edi
.text:0040220F                 jnz     short loc_40222C
.text:00402211
.text:00402211 loc_402211:                             ; CODE XREF: sub_401930+92C↓j
.text:00402211                 mov     [ebp+8], esi
.text:00402214                 mov     ebp, [esp+5Ch+Str]
.text:00402218                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040221C                 jz      short loc_402228
.text:0040221E                 mov     bl, 3Fh ; '?'
.text:00402220
.text:00402220 loc_402220:                             ; CODE XREF: sub_401930+8FA↓j
.text:00402220                 movsx   eax, bl
.text:00402223                 jmp     loc_401A87
.text:00402228 ; ---------------------------------------------------------------------------
.text:00402228
.text:00402228 loc_402228:                             ; CODE XREF: sub_401930+8EC↑j
.text:00402228                 mov     bl, 3Ah ; ':'
.text:0040222A                 jmp     short loc_402220
.text:0040222C ; ---------------------------------------------------------------------------
.text:0040222C
.text:0040222C loc_40222C:                             ; CODE XREF: sub_401930+8DF↑j
.text:0040222C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402233                 call    ds:libintl_gettext
.text:00402239                 mov     [esp+5Ch+var_50], esi
.text:0040223D                 mov     edx, [esp+5Ch+arg_4]
.text:00402241                 mov     ecx, ds:_iob
.text:00402247                 mov     ebx, [edx]
.text:00402249                 add     ecx, 40h ; '@'
.text:0040224C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402250                 mov     [esp+5Ch+MaxCount], ebx
.text:00402254                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402257                 call    fprintf
.text:0040225C                 jmp     short loc_402211
.text:0040225C ; ---------------------------------------------------------------------------
.text:0040225E                 align 10h
.text:00402260
.text:00402260 loc_402260:                             ; CODE XREF: sub_401930+54C↑j
.text:00402260                                         ; sub_401930+555↑j
.text:00402260                 mov     eax, [esp+5Ch+var_14]
.text:00402264                 test    eax, eax
.text:00402266                 jz      short loc_40229F
.text:00402268                 mov     ebx, [ebp+1Ch]
.text:0040226B                 test    ebx, ebx
.text:0040226D                 jz      short loc_4022A7
.text:0040226F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402276
.text:00402276 loc_402276:                             ; CODE XREF: sub_401930+97E↓j
.text:00402276                 call    ds:libintl_gettext
.text:0040227C                 mov     [esp+5Ch+var_50], esi
.text:00402280                 mov     ebx, [esp+5Ch+arg_4]
.text:00402284                 mov     edx, ds:_iob
.text:0040228A                 mov     esi, [ebx]
.text:0040228C                 add     edx, 40h ; '@'
.text:0040228F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402293                 mov     [esp+5Ch+MaxCount], esi
.text:00402297                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040229A                 call    fprintf
.text:0040229F
.text:0040229F loc_40229F:                             ; CODE XREF: sub_401930+936↑j
.text:0040229F                 mov     [ebp+8], edi
.text:004022A2                 jmp     loc_401C88
.text:004022A7 ; ---------------------------------------------------------------------------
.text:004022A7
.text:004022A7 loc_4022A7:                             ; CODE XREF: sub_401930+93D↑j
.text:004022A7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:004022AE                 jmp     short loc_402276
.text:004022B0 ; ---------------------------------------------------------------------------
.text:004022B0
.text:004022B0 loc_4022B0:                             ; CODE XREF: sub_401930+26E↑j
.text:004022B0                 mov     edi, [esp+5Ch+var_14]
.text:004022B4                 test    edi, edi
.text:004022B6                 jnz     short loc_4022CE
.text:004022B8
.text:004022B8 loc_4022B8:                             ; CODE XREF: sub_401930+9D4↓j
.text:004022B8                 mov     edx, [ebp+14h]
.text:004022BB                 mov     [esp+5Ch+Str1], edx ; Str
.text:004022BE                 call    strlen
.text:004022C3                 add     [ebp+14h], eax
.text:004022C6                 inc     dword ptr [ebp+0]
.text:004022C9                 jmp     loc_401E0E
.text:004022CE ; ---------------------------------------------------------------------------
.text:004022CE
.text:004022CE loc_4022CE:                             ; CODE XREF: sub_401930+986↑j
.text:004022CE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:004022D5                 call    ds:libintl_gettext
.text:004022DB                 mov     ebx, [ebp+0]
.text:004022DE                 mov     edi, [esp+5Ch+arg_4]
.text:004022E2                 mov     ecx, [edi+ebx*4]
.text:004022E5                 mov     ebx, ds:_iob
.text:004022EB                 mov     [esp+5Ch+var_50], ecx
.text:004022EF                 mov     esi, [edi]
.text:004022F1                 add     ebx, 40h ; '@'
.text:004022F4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022F8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004022FB                 mov     [esp+5Ch+MaxCount], esi
.text:004022FF                 call    fprintf
.text:00402304                 jmp     short loc_4022B8
.text:00402306 ; ---------------------------------------------------------------------------
.text:00402306
.text:00402306 loc_402306:                             ; CODE XREF: sub_401930+246↑j
.text:00402306                 mov     ecx, [ebp+14h]
.text:00402309                 mov     ebx, edi
.text:0040230B                 mov     edx, [esi]
.text:0040230D                 sub     ebx, ecx
.text:0040230F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402312                 call    strlen
.text:00402317                 cmp     ebx, eax
.text:00402319                 jz      short loc_402371
.text:0040231B                 mov     ebx, [esp+5Ch+var_18]
.text:0040231F                 test    ebx, ebx
.text:00402321                 jz      short loc_402360
.text:00402323                 mov     edx, [esp+5Ch+arg_14]
.text:00402327                 test    edx, edx
.text:00402329                 jnz     short loc_402337
.text:0040232B                 mov     ecx, [esp+5Ch+var_18]
.text:0040232F                 mov     ebx, [esi+4]
.text:00402332                 cmp     [ecx+4], ebx
.text:00402335                 jz      short loc_402344
.text:00402337
.text:00402337 loc_402337:                             ; CODE XREF: sub_401930+9F9↑j
.text:00402337                                         ; sub_401930+A1A↓j ...
.text:00402337                 mov     [esp+5Ch+var_20], 1
.text:0040233F                 jmp     loc_401B7C
.text:00402344 ; ---------------------------------------------------------------------------
.text:00402344
.text:00402344 loc_402344:                             ; CODE XREF: sub_401930+A05↑j
.text:00402344                 mov     edx, [esi+8]
.text:00402347                 cmp     [ecx+8], edx
.text:0040234A                 jnz     short loc_402337
.text:0040234C                 mov     ebx, [esi+0Ch]
.text:0040234F                 cmp     [ecx+0Ch], ebx
.text:00402352                 jnz     short loc_402337
.text:00402354                 jmp     loc_401B7C
.text:00402354 ; ---------------------------------------------------------------------------
.text:00402359                 align 10h
.text:00402360
.text:00402360 loc_402360:                             ; CODE XREF: sub_401930+9F1↑j
.text:00402360                 mov     [esp+5Ch+var_18], esi
.text:00402364                 mov     eax, [esp+5Ch+var_28]
.text:00402368                 mov     [esp+5Ch+var_24], eax
.text:0040236C                 jmp     loc_401B7C
.text:00402371 ; ---------------------------------------------------------------------------
.text:00402371
.text:00402371 loc_402371:                             ; CODE XREF: sub_401930+9E9↑j
.text:00402371                 mov     [esp+5Ch+var_18], esi
.text:00402375                 mov     ecx, [esp+5Ch+var_28]
.text:00402379                 mov     [esp+5Ch+var_1C], 1
.text:00402381                 mov     [esp+5Ch+var_24], ecx
.text:00402385                 jmp     loc_401B90
.text:0040238A ; ---------------------------------------------------------------------------
.text:0040238A
.text:0040238A loc_40238A:                             ; CODE XREF: sub_401930+1BF↑j
.text:0040238A                 mov     eax, [esp+5Ch+Str]
.text:0040238E                 movsx   esi, dl
.text:00402391                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402395                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402398                 call    strchr
.text:0040239D                 test    eax, eax
.text:0040239F                 jnz     loc_401E50
.text:004023A5                 jmp     loc_401AF5
.text:004023AA ; ---------------------------------------------------------------------------
.text:004023AA
.text:004023AA loc_4023AA:                             ; CODE XREF: sub_401930+17C↑j
.text:004023AA                 mov     ecx, 1
.text:004023AF                 jmp     loc_401AB2
.text:004023B4 ; ---------------------------------------------------------------------------
.text:004023B4
.text:004023B4 loc_4023B4:                             ; CODE XREF: sub_401930+D4↑j
.text:004023B4                                         ; sub_401930+130↑j
.text:004023B4                 mov     eax, [ebp+20h]
.text:004023B7                 cmp     eax, [ebp+24h]
.text:004023BA                 jz      loc_401A90
.text:004023C0                 mov     [ebp+0], eax
.text:004023C3                 jmp     loc_401A90
.text:004023C8 ; ---------------------------------------------------------------------------
.text:004023C8
.text:004023C8 loc_4023C8:                             ; CODE XREF: sub_401930+FE↑j
.text:004023C8                 mov     [ebp+20h], eax
.text:004023CB                 jmp     loc_401A50
.text:004023D0 ; ---------------------------------------------------------------------------
.text:004023D0
.text:004023D0 loc_4023D0:                             ; CODE XREF: sub_401930+CA↑j
.text:004023D0                 mov     edx, [ebp+20h]
.text:004023D3                 mov     eax, [ebp+24h]
.text:004023D6                 cmp     edx, eax
.text:004023D8                 jz      short loc_402450
.text:004023DA                 cmp     eax, ebx
.text:004023DC                 jz      short loc_4023F1
.text:004023DE                 mov     [esp+5Ch+Str2], ebp
.text:004023E2                 mov     ebx, [esp+5Ch+arg_4]
.text:004023E6                 mov     [esp+5Ch+Str1], ebx
.text:004023E9                 call    sub_4025E0
.text:004023EE                 mov     ebx, [ebp+0]
.text:004023F1
.text:004023F1 loc_4023F1:                             ; CODE XREF: sub_401930+AAC↑j
.text:004023F1                                         ; sub_401930+B22↓j ...
.text:004023F1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004023F5                 jge     short loc_402440
.text:004023F7                 mov     esi, [esp+5Ch+arg_4]
.text:004023FB                 mov     eax, [esi+ebx*4]
.text:004023FE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402401                 jz      short loc_402448
.text:00402403                 lea     esi, [esi+0]
.text:00402409                 lea     edi, [edi+0]
.text:00402410
.text:00402410 loc_402410:                             ; CODE XREF: sub_401930+AFC↓j
.text:00402410                                         ; sub_401930+B1C↓j
.text:00402410                 lea     eax, [ebx+1]
.text:00402413                 mov     ebx, eax
.text:00402415                 mov     [ebp+0], eax
.text:00402418                 cmp     eax, [esp+5Ch+arg_0]
.text:0040241C                 jge     short loc_402440
.text:0040241E                 mov     edi, [esp+5Ch+arg_4]
.text:00402422                 mov     edx, [edi+eax*4]
.text:00402425                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402428                 jz      short loc_402430
.text:0040242A
.text:0040242A loc_40242A:                             ; CODE XREF: sub_401930+B04↓j
.text:0040242A                 mov     ebx, eax
.text:0040242C                 jmp     short loc_402410
.text:0040242C ; ---------------------------------------------------------------------------
.text:0040242E                 align 10h
.text:00402430
.text:00402430 loc_402430:                             ; CODE XREF: sub_401930+AF8↑j
.text:00402430                 cmp     byte ptr [edx+1], 0
.text:00402434                 jz      short loc_40242A
.text:00402436                 lea     esi, [esi+0]
.text:00402439                 lea     edi, [edi+0]
.text:00402440
.text:00402440 loc_402440:                             ; CODE XREF: sub_401930+AC5↑j
.text:00402440                                         ; sub_401930+AEC↑j ...
.text:00402440                 mov     [ebp+24h], ebx
.text:00402443                 jmp     loc_401A00
.text:00402448 ; ---------------------------------------------------------------------------
.text:00402448
.text:00402448 loc_402448:                             ; CODE XREF: sub_401930+AD1↑j
.text:00402448                 cmp     byte ptr [eax+1], 0
.text:0040244C                 jz      short loc_402410
.text:0040244E                 jmp     short loc_402440
.text:00402450 ; ---------------------------------------------------------------------------
.text:00402450
.text:00402450 loc_402450:                             ; CODE XREF: sub_401930+AA8↑j
.text:00402450                 cmp     edx, ebx
.text:00402452                 jz      short loc_4023F1
.text:00402454                 mov     [ebp+20h], ebx
.text:00402457                 jmp     short loc_4023F1
.text:00402459 ; ---------------------------------------------------------------------------
.text:00402459
.text:00402459 loc_402459:                             ; CODE XREF: sub_401930+88↑j
.text:00402459                 mov     dword ptr [ebp+18h], 0
.text:00402460                 mov     esi, [esp+5Ch+Str]
.text:00402464
.text:00402464 loc_402464:                             ; CODE XREF: sub_401930+B49↓j
.text:00402464                 inc     esi
.text:00402465                 jmp     loc_4019C8
.text:00402465 ; ---------------------------------------------------------------------------
.text:0040246A                 align 10h
.text:00402470
.text:00402470 loc_402470:                             ; CODE XREF: sub_401930+80↑j
.text:00402470                 mov     dword ptr [ebp+18h], 2
.text:00402477                 mov     esi, ecx
.text:00402479                 jmp     short loc_402464
.text:00402479 ; ---------------------------------------------------------------------------
.text:0040247B                 align 10h
.text:00402480
.text:00402480 loc_402480:                             ; CODE XREF: sub_401930+69↑j
.text:00402480                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402487                 call    getenv
.text:0040248C                 test    eax, eax
.text:0040248E                 jz      loc_4019A4
.text:00402494                 jmp     loc_40199F
.text:00402494 ; ---------------------------------------------------------------------------
.text:00402499                 align 10h
.text:004024A0
.text:004024A0 loc_4024A0:                             ; CODE XREF: sub_401930+3F↑j
.text:004024A0                 mov     dword ptr [ebp+0], 1
.text:004024A7                 mov     ebx, 1
.text:004024AC                 jmp     loc_401980
.text:004024AC sub_401930      endp
.text:004024AC
.text:004024B1 ; ---------------------------------------------------------------------------
.text:004024B1                 jmp     short sub_4024C0
.text:004024B1 ; ---------------------------------------------------------------------------
.text:004024B3                 align 10h
.text:004024C0
.text:004024C0 ; =============== S U B R O U T I N E =======================================
.text:004024C0
.text:004024C0
.text:004024C0 ; int __cdecl sub_4024C0(int, int, char *, int, int, int, int)
.text:004024C0 sub_4024C0      proc near               ; CODE XREF: .text:004024B1↑j
.text:004024C0                                         ; sub_402760+3A↓p ...
.text:004024C0
.text:004024C0 var_2C          = dword ptr -2Ch
.text:004024C0 var_28          = dword ptr -28h
.text:004024C0 Str             = dword ptr -24h
.text:004024C0 var_20          = dword ptr -20h
.text:004024C0 var_1C          = dword ptr -1Ch
.text:004024C0 var_18          = dword ptr -18h
.text:004024C0 var_14          = dword ptr -14h
.text:004024C0 var_10          = dword ptr -10h
.text:004024C0 arg_0           = dword ptr  4
.text:004024C0 arg_4           = dword ptr  8
.text:004024C0 arg_8           = dword ptr  0Ch
.text:004024C0 arg_C           = dword ptr  10h
.text:004024C0 arg_10          = dword ptr  14h
.text:004024C0 arg_14          = dword ptr  18h
.text:004024C0 arg_18          = dword ptr  1Ch
.text:004024C0
.text:004024C0                 sub     esp, 2Ch
.text:004024C3                 mov     edx, dword_406010
.text:004024C9                 mov     [esp+2Ch+var_10], offset dword_407000 ; int
.text:004024D1                 mov     ecx, dword_406014
.text:004024D7                 mov     ds:dword_407000, edx
.text:004024DD                 mov     edx, [esp+2Ch+arg_18]
.text:004024E1                 mov     ds:dword_407004, ecx
.text:004024E7                 mov     ecx, [esp+2Ch+arg_14]
.text:004024EB                 mov     [esp+2Ch+var_14], edx ; int
.text:004024EF                 mov     edx, [esp+2Ch+arg_10]
.text:004024F3                 mov     [esp+2Ch+var_18], ecx ; int
.text:004024F7                 mov     ecx, [esp+2Ch+arg_C]
.text:004024FB                 mov     [esp+2Ch+var_1C], edx ; int
.text:004024FF                 mov     edx, [esp+2Ch+arg_8]
.text:00402503                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402507                 mov     ecx, [esp+2Ch+arg_4]
.text:0040250B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040250F                 mov     edx, [esp+2Ch+arg_0]
.text:00402513                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402517                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040251A                 call    sub_401930
.text:0040251F                 mov     ecx, ds:dword_407000
.text:00402525                 mov     dword_406010, ecx
.text:0040252B                 mov     ecx, ds:dword_40700C
.text:00402531                 mov     ds:dword_4072C0, ecx
.text:00402537                 mov     ecx, ds:dword_407008
.text:0040253D                 mov     dword_406018, ecx
.text:00402543                 add     esp, 2Ch
.text:00402546                 retn
.text:00402546 sub_4024C0      endp
.text:00402546
.text:00402546 ; ---------------------------------------------------------------------------
.text:00402547                 align 10h
.text:00402550                 sub     esp, 2Ch
.text:00402553                 mov     edx, dword_406010
.text:00402559                 mov     dword ptr [esp+1Ch], offset dword_407000
.text:00402561                 mov     ecx, dword_406014
.text:00402567                 mov     dword ptr [esp+18h], 1
.text:0040256F                 mov     ds:dword_407000, edx
.text:00402575                 mov     edx, [esp+38h]
.text:00402579                 mov     ds:dword_407004, ecx
.text:0040257F                 mov     ecx, [esp+34h]
.text:00402583                 mov     [esp+8], edx
.text:00402587                 mov     edx, [esp+30h]
.text:0040258B                 mov     [esp+4], ecx
.text:0040258F                 mov     dword ptr [esp+14h], 0
.text:00402597                 mov     dword ptr [esp+10h], 0
.text:0040259F                 mov     dword ptr [esp+0Ch], 0
.text:004025A7                 mov     [esp], edx
.text:004025AA                 call    sub_401930
.text:004025AF                 mov     ecx, ds:dword_407000
.text:004025B5                 mov     dword_406010, ecx
.text:004025BB                 mov     ecx, ds:dword_40700C
.text:004025C1                 mov     ds:dword_4072C0, ecx
.text:004025C7                 mov     ecx, ds:dword_407008
.text:004025CD                 mov     dword_406018, ecx
.text:004025D3                 add     esp, 2Ch
.text:004025D6                 retn
.text:004025D6 ; ---------------------------------------------------------------------------
.text:004025D7                 align 10h
.text:004025E0
.text:004025E0 ; =============== S U B R O U T I N E =======================================
.text:004025E0
.text:004025E0
.text:004025E0 sub_4025E0      proc near               ; CODE XREF: sub_401930+113↑p
.text:004025E0                                         ; sub_401930+AB9↑p
.text:004025E0
.text:004025E0 var_2C          = dword ptr -2Ch
.text:004025E0 var_28          = dword ptr -28h
.text:004025E0 var_24          = dword ptr -24h
.text:004025E0 var_20          = dword ptr -20h
.text:004025E0 var_1C          = dword ptr -1Ch
.text:004025E0 var_18          = dword ptr -18h
.text:004025E0 var_14          = dword ptr -14h
.text:004025E0 arg_0           = dword ptr  4
.text:004025E0 arg_4           = dword ptr  8
.text:004025E0
.text:004025E0                 push    ebp
.text:004025E1                 push    edi
.text:004025E2                 push    esi
.text:004025E3                 push    ebx
.text:004025E4                 sub     esp, 1Ch
.text:004025E7                 mov     ecx, [esp+2Ch+arg_4]
.text:004025EB                 mov     eax, [esp+2Ch+arg_4]
.text:004025EF                 mov     ebx, [esp+2Ch+arg_4]
.text:004025F3                 mov     edx, [ecx+20h]
.text:004025F6                 mov     edi, [esp+2Ch+arg_0]
.text:004025FA                 mov     ecx, [ebx]
.text:004025FC                 mov     [esp+2Ch+var_2C], edx
.text:004025FF                 mov     [esp+2Ch+var_14], edx
.text:00402603                 mov     edx, [eax+24h]
.text:00402606                 mov     [esp+2Ch+var_28], ecx
.text:0040260A                 mov     [esp+2Ch+var_1C], ecx
.text:0040260E                 cmp     ecx, edx
.text:00402610                 mov     [esp+2Ch+var_18], edx
.text:00402614                 jle     short loc_402690
.text:00402616                 mov     esi, [esp+2Ch+var_2C]
.text:00402619                 cmp     edx, esi
.text:0040261B                 jle     short loc_402690
.text:0040261D                 lea     esi, [esi+0]
.text:00402620
.text:00402620 loc_402620:                             ; CODE XREF: sub_4025E0+A1↓j
.text:00402620                 mov     ebx, [esp+2Ch+var_1C]
.text:00402624                 mov     edx, [esp+2Ch+var_18]
.text:00402628                 mov     ebp, [esp+2Ch+var_18]
.text:0040262C                 mov     eax, [esp+2Ch+var_14]
.text:00402630                 sub     ebx, edx
.text:00402632                 mov     [esp+2Ch+var_20], ebx
.text:00402636                 sub     ebp, eax
.text:00402638                 cmp     ebx, ebp
.text:0040263A                 jle     short loc_4026B5
.text:0040263C                 xor     esi, esi
.text:0040263E                 cmp     esi, ebp
.text:00402640                 jge     short loc_40266D
.text:00402642                 mov     ecx, [esp+2Ch+var_1C]
.text:00402646                 sub     ecx, ebp
.text:00402648                 mov     [esp+2Ch+var_24], ecx
.text:0040264C                 lea     esi, [esi+0]
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_4025E0+8B↓j
.text:00402650                 mov     ecx, [esp+2Ch+var_14]
.text:00402654                 mov     edx, [esp+2Ch+var_24]
.text:00402658                 add     ecx, esi
.text:0040265A                 add     edx, esi
.text:0040265C                 mov     ebx, [edi+ecx*4]
.text:0040265F                 mov     eax, [edi+edx*4]
.text:00402662                 inc     esi
.text:00402663                 cmp     esi, ebp
.text:00402665                 mov     [edi+ecx*4], eax
.text:00402668                 mov     [edi+edx*4], ebx
.text:0040266B                 jl      short loc_402650
.text:0040266D
.text:0040266D loc_40266D:                             ; CODE XREF: sub_4025E0+60↑j
.text:0040266D                 sub     [esp+2Ch+var_1C], ebp
.text:00402671
.text:00402671 loc_402671:                             ; CODE XREF: sub_4025E0+107↓j
.text:00402671                 mov     eax, [esp+2Ch+var_18]
.text:00402675                 cmp     [esp+2Ch+var_1C], eax
.text:00402679                 jle     short loc_402690
.text:0040267B                 mov     ebp, [esp+2Ch+var_14]
.text:0040267F                 cmp     eax, ebp
.text:00402681                 jg      short loc_402620
.text:00402683                 lea     esi, [esi+0]
.text:00402689                 lea     edi, [edi+0]
.text:00402690
.text:00402690 loc_402690:                             ; CODE XREF: sub_4025E0+34↑j
.text:00402690                                         ; sub_4025E0+3B↑j ...
.text:00402690                 mov     esi, [esp+2Ch+var_28]
.text:00402694                 mov     ecx, [esp+2Ch+var_18]
.text:00402698                 mov     eax, [esp+2Ch+var_2C]
.text:0040269B                 mov     edi, [esp+2Ch+arg_4]
.text:0040269F                 mov     edx, [esp+2Ch+var_28]
.text:004026A3                 sub     esi, ecx
.text:004026A5                 add     esi, eax
.text:004026A7                 mov     [edi+20h], esi
.text:004026AA                 mov     [edi+24h], edx
.text:004026AD                 add     esp, 1Ch
.text:004026B0                 pop     ebx
.text:004026B1                 pop     esi
.text:004026B2                 pop     edi
.text:004026B3                 pop     ebp
.text:004026B4                 retn
.text:004026B5 ; ---------------------------------------------------------------------------
.text:004026B5
.text:004026B5 loc_4026B5:                             ; CODE XREF: sub_4025E0+5A↑j
.text:004026B5                 xor     esi, esi
.text:004026B7                 cmp     esi, [esp+2Ch+var_20]
.text:004026BB                 jge     short loc_4026DF
.text:004026BD                 lea     esi, [esi+0]
.text:004026C0
.text:004026C0 loc_4026C0:                             ; CODE XREF: sub_4025E0+FD↓j
.text:004026C0                 mov     ebx, [esp+2Ch+var_14]
.text:004026C4                 mov     ebp, [esp+2Ch+var_18]
.text:004026C8                 add     ebx, esi
.text:004026CA                 add     ebp, esi
.text:004026CC                 mov     edx, [edi+ebx*4]
.text:004026CF                 inc     esi
.text:004026D0                 cmp     esi, [esp+2Ch+var_20]
.text:004026D4                 mov     ecx, [edi+ebp*4]
.text:004026D7                 mov     [edi+ebx*4], ecx
.text:004026DA                 mov     [edi+ebp*4], edx
.text:004026DD                 jl      short loc_4026C0
.text:004026DF
.text:004026DF loc_4026DF:                             ; CODE XREF: sub_4025E0+DB↑j
.text:004026DF                 mov     esi, [esp+2Ch+var_20]
.text:004026E3                 add     [esp+2Ch+var_14], esi
.text:004026E7                 jmp     short loc_402671
.text:004026E7 sub_4025E0      endp
.text:004026E7
.text:004026E7 ; ---------------------------------------------------------------------------
.text:004026E9                 align 20h
.text:00402700                 sub     esp, 0Ch
.text:00402703                 mov     edx, [esp+14h]
.text:00402707                 mov     dword ptr [esp+4], 5
.text:0040270F                 mov     [esp+8], edx
.text:00402713                 mov     edx, [esp+10h]
.text:00402717                 mov     [esp], edx
.text:0040271A                 call    sub_403890
.text:0040271F                 add     esp, 0Ch
.text:00402722                 retn
.text:00402722 ; ---------------------------------------------------------------------------
.text:00402723                 align 10h
.text:00402730
.text:00402730 ; =============== S U B R O U T I N E =======================================
.text:00402730
.text:00402730
.text:00402730 ; int __cdecl sub_402730(char *)
.text:00402730 sub_402730      proc near               ; CODE XREF: sub_401350+128↑p
.text:00402730
.text:00402730 var_C           = dword ptr -0Ch
.text:00402730 var_8           = dword ptr -8
.text:00402730 var_4           = dword ptr -4
.text:00402730 arg_0           = dword ptr  4
.text:00402730
.text:00402730                 sub     esp, 0Ch
.text:00402733                 mov     edx, [esp+0Ch+arg_0]
.text:00402737                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040273F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00402746                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040274A                 call    sub_403890
.text:0040274F                 add     esp, 0Ch
.text:00402752                 retn
.text:00402752 sub_402730      endp
.text:00402752
.text:00402752 ; ---------------------------------------------------------------------------
.text:00402753                 align 10h
.text:00402760
.text:00402760 ; =============== S U B R O U T I N E =======================================
.text:00402760
.text:00402760
.text:00402760 ; int __cdecl sub_402760(int, int, char *, int, int)
.text:00402760 sub_402760      proc near               ; CODE XREF: sub_401350+C2↑p
.text:00402760                                         ; sub_402900+58↓p
.text:00402760
.text:00402760 var_1C          = dword ptr -1Ch
.text:00402760 var_18          = dword ptr -18h
.text:00402760 var_14          = dword ptr -14h
.text:00402760 var_10          = dword ptr -10h
.text:00402760 var_C           = dword ptr -0Ch
.text:00402760 var_8           = dword ptr -8
.text:00402760 var_4           = dword ptr -4
.text:00402760 arg_0           = dword ptr  4
.text:00402760 arg_4           = dword ptr  8
.text:00402760 arg_8           = dword ptr  0Ch
.text:00402760 arg_C           = dword ptr  10h
.text:00402760 arg_10          = dword ptr  14h
.text:00402760
.text:00402760                 sub     esp, 1Ch
.text:00402763                 mov     edx, [esp+1Ch+arg_C]
.text:00402767                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040276F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402773                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040277B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040277F                 mov     edx, [esp+1Ch+arg_4]
.text:00402783                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402787                 mov     ecx, [esp+1Ch+arg_8]
.text:0040278B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040278F                 mov     edx, [esp+1Ch+arg_0]
.text:00402793                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402797                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040279A                 call    sub_4024C0
.text:0040279F                 add     esp, 1Ch
.text:004027A2                 retn
.text:004027A2 sub_402760      endp
.text:004027A2
.text:004027A2 ; ---------------------------------------------------------------------------
.text:004027A3                 align 10h
.text:004027B0                 sub     esp, 2Ch
.text:004027B3                 mov     edx, [esp+44h]
.text:004027B7                 mov     dword ptr [esp+18h], 0
.text:004027BF                 mov     ecx, [esp+40h]
.text:004027C3                 mov     dword ptr [esp+14h], 0
.text:004027CB                 mov     [esp+1Ch], edx
.text:004027CF                 mov     edx, [esp+3Ch]
.text:004027D3                 mov     [esp+10h], ecx
.text:004027D7                 mov     ecx, [esp+38h]
.text:004027DB                 mov     [esp+0Ch], edx
.text:004027DF                 mov     edx, [esp+34h]
.text:004027E3                 mov     [esp+8], ecx
.text:004027E7                 mov     [esp+4], edx
.text:004027EB                 mov     edx, [esp+30h]
.text:004027EF                 mov     [esp], edx
.text:004027F2                 call    sub_401930
.text:004027F7                 add     esp, 2Ch
.text:004027FA                 retn
.text:004027FA ; ---------------------------------------------------------------------------
.text:004027FB                 align 10h
.text:00402800                 sub     esp, 1Ch
.text:00402803                 mov     edx, [esp+2Ch]
.text:00402807                 mov     dword ptr [esp+18h], 0
.text:0040280F                 mov     ecx, [esp+30h]
.text:00402813                 mov     dword ptr [esp+14h], 1
.text:0040281B                 mov     [esp+0Ch], edx
.text:0040281F                 mov     edx, [esp+24h]
.text:00402823                 mov     [esp+10h], ecx
.text:00402827                 mov     ecx, [esp+28h]
.text:0040282B                 mov     [esp+4], edx
.text:0040282F                 mov     edx, [esp+20h]
.text:00402833                 mov     [esp+8], ecx
.text:00402837                 mov     [esp], edx
.text:0040283A                 call    sub_4024C0
.text:0040283F                 add     esp, 1Ch
.text:00402842                 retn
.text:00402842 ; ---------------------------------------------------------------------------
.text:00402843                 align 10h
.text:00402850                 sub     esp, 2Ch
.text:00402853                 mov     edx, [esp+44h]
.text:00402857                 mov     dword ptr [esp+18h], 0
.text:0040285F                 mov     ecx, [esp+40h]
.text:00402863                 mov     dword ptr [esp+14h], 1
.text:0040286B                 mov     [esp+1Ch], edx
.text:0040286F                 mov     edx, [esp+3Ch]
.text:00402873                 mov     [esp+10h], ecx
.text:00402877                 mov     ecx, [esp+38h]
.text:0040287B                 mov     [esp+0Ch], edx
.text:0040287F                 mov     edx, [esp+34h]
.text:00402883                 mov     [esp+8], ecx
.text:00402887                 mov     [esp+4], edx
.text:0040288B                 mov     edx, [esp+30h]
.text:0040288F                 mov     [esp], edx
.text:00402892                 call    sub_401930
.text:00402897                 add     esp, 2Ch
.text:0040289A                 retn
.text:0040289A ; ---------------------------------------------------------------------------
.text:0040289B                 align 10h
.text:004028A0 aHelp           db 'help',0             ; DATA XREF: .text:off_4028C0↓o
.text:004028A5 aVersion        db 'version',0          ; DATA XREF: .text:004028D0↓o
.text:004028AD                 align 20h
.text:004028C0 off_4028C0      dd offset aHelp         ; DATA XREF: sub_402900+3D↓o
.text:004028C0                                         ; "help"
.text:004028C4                 dd 2 dup(0)
.text:004028CC                 dd 68h
.text:004028D0                 dd offset aVersion      ; "version"
.text:004028D4                 dd 2 dup(0)
.text:004028DC                 dd 76h, 4 dup(0)
.text:004028F0 ; ---------------------------------------------------------------------------
.text:004028F0
.text:004028F0 loc_4028F0:                             ; DATA XREF: sub_402900+45↓o
.text:004028F0                 sub     eax, [eax]
.text:004028F2                 lea     esi, [esi+0]
.text:004028F9                 lea     edi, [edi+0]
.text:00402900
.text:00402900 ; =============== S U B R O U T I N E =======================================
.text:00402900
.text:00402900
.text:00402900 ; int __cdecl sub_402900(int, int, FILE *, int, int, int, char)
.text:00402900 sub_402900      proc near               ; CODE XREF: sub_401350+9E↑p
.text:00402900
.text:00402900 Code            = dword ptr -1Ch
.text:00402900 var_18          = dword ptr -18h
.text:00402900 var_14          = dword ptr -14h
.text:00402900 var_10          = dword ptr -10h
.text:00402900 var_C           = dword ptr -0Ch
.text:00402900 var_4           = dword ptr -4
.text:00402900 arg_0           = dword ptr  4
.text:00402900 arg_4           = dword ptr  8
.text:00402900 arg_8           = dword ptr  0Ch
.text:00402900 arg_C           = dword ptr  10h
.text:00402900 arg_10          = dword ptr  14h
.text:00402900 arg_14          = dword ptr  18h
.text:00402900 arg_18          = byte ptr  1Ch
.text:00402900
.text:00402900                 sub     esp, 1Ch
.text:00402903                 xor     eax, eax
.text:00402905                 cmp     [esp+1Ch+arg_0], 2
.text:0040290A                 mov     [esp+1Ch+var_4], ebx
.text:0040290E                 mov     ebx, dword_406014
.text:00402914                 mov     dword_406014, eax
.text:00402919                 jz      short loc_402931
.text:0040291B
.text:0040291B loc_40291B:                             ; CODE XREF: sub_402900+60↓j
.text:0040291B                                         ; sub_402900+6A↓j
.text:0040291B                 mov     dword_406014, ebx
.text:00402921                 xor     edx, edx
.text:00402923                 mov     ebx, [esp+1Ch+var_4]
.text:00402927                 mov     dword_406010, edx
.text:0040292D                 add     esp, 1Ch
.text:00402930                 retn
.text:00402931 ; ---------------------------------------------------------------------------
.text:00402931
.text:00402931 loc_402931:                             ; CODE XREF: sub_402900+19↑j
.text:00402931                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402939                 mov     edx, [esp+1Ch+arg_4]
.text:0040293D                 mov     [esp+1Ch+var_10], offset off_4028C0 ; int
.text:00402945                 mov     [esp+1Ch+var_14], offset loc_4028F0 ; char *
.text:0040294D                 mov     [esp+1Ch+var_18], edx ; int
.text:00402951                 mov     [esp+1Ch+Code], 2 ; int
.text:00402958                 call    sub_402760
.text:0040295D                 cmp     eax, 0FFFFFFFFh
.text:00402960                 jz      short loc_40291B
.text:00402962                 cmp     eax, 68h ; 'h'
.text:00402965                 jz      short loc_40296E
.text:00402967                 cmp     eax, 76h ; 'v'
.text:0040296A                 jnz     short loc_40291B
.text:0040296C                 jmp     short loc_402979
.text:0040296E ; ---------------------------------------------------------------------------
.text:0040296E
.text:0040296E loc_40296E:                             ; CODE XREF: sub_402900+65↑j
.text:0040296E                 mov     [esp+1Ch+Code], 0
.text:00402975                 call    [esp+1Ch+arg_14]
.text:00402979
.text:00402979 loc_402979:                             ; CODE XREF: sub_402900+6C↑j
.text:00402979                 mov     ecx, [esp+1Ch+arg_10]
.text:0040297D                 lea     ebx, [esp+1Ch+arg_18]
.text:00402981                 mov     edx, [esp+1Ch+arg_C]
.text:00402985                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00402989                 mov     ebx, [esp+1Ch+arg_8]
.text:0040298D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00402991                 mov     ecx, ds:_iob
.text:00402997                 mov     [esp+1Ch+var_14], edx ; int
.text:0040299B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:0040299F                 add     ecx, 20h ; ' '
.text:004029A2                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:004029A5                 call    sub_404160
.text:004029AA                 mov     [esp+1Ch+Code], 0 ; Code
.text:004029B1                 call    exit
.text:004029B1 sub_402900      endp
.text:004029B1
.text:004029B1 ; ---------------------------------------------------------------------------
.text:004029B6                 align 10h
.text:004029C0                 mov     edx, [esp+4]
.text:004029C4                 mov     ds:dword_407030, edx
.text:004029CA                 retn
.text:004029CA ; ---------------------------------------------------------------------------
.text:004029CB aWriteError     db 'write error',0      ; DATA XREF: sub_4029F0:loc_402A39↓o
.text:004029D7 ; const char aSS[]
.text:004029D7 aSS             db '%s: %s',0           ; DATA XREF: sub_4029F0+77↓o
.text:004029DE ; const char aS_2[]
.text:004029DE aS_2            db '%s',0               ; DATA XREF: sub_4029F0+A0↓o
.text:004029E1 ; ---------------------------------------------------------------------------
.text:004029E1                 jmp     short sub_4029F0
.text:004029E1 ; ---------------------------------------------------------------------------
.text:004029E3                 align 10h
.text:004029F0
.text:004029F0 ; =============== S U B R O U T I N E =======================================
.text:004029F0
.text:004029F0
.text:004029F0 ; void __cdecl sub_4029F0()
.text:004029F0 sub_4029F0      proc near               ; CODE XREF: .text:004029E1↑j
.text:004029F0                                         ; DATA XREF: sub_401350+5B↑o
.text:004029F0
.text:004029F0 Stream          = dword ptr -2Ch
.text:004029F0 ErrorMessage    = dword ptr -28h
.text:004029F0 var_24          = dword ptr -24h
.text:004029F0 var_20          = byte ptr -20h
.text:004029F0 var_1C          = dword ptr -1Ch
.text:004029F0 var_9           = byte ptr -9
.text:004029F0
.text:004029F0                 push    esi
.text:004029F1                 push    ebx
.text:004029F2                 sub     esp, 24h
.text:004029F5                 mov     edx, ds:_iob
.text:004029FB                 mov     ecx, [edx+2Ch]
.text:004029FE                 lea     esi, [edx+20h]
.text:00402A01                 shr     ecx, 5
.text:00402A04                 mov     bl, cl
.text:00402A06                 mov     ecx, [edx+20h]
.text:00402A09                 and     bl, 1
.text:00402A0C                 cmp     ecx, [esi+8]
.text:00402A0F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402A12                 setz    [esp+2Ch+var_9]
.text:00402A17                 call    fclose
.text:00402A1C                 test    eax, eax
.text:00402A1E                 setnz   al
.text:00402A21                 test    bl, bl
.text:00402A23                 jnz     loc_402AB3
.text:00402A29                 test    al, al
.text:00402A2B                 jz      short loc_402A80
.text:00402A2D
.text:00402A2D loc_402A2D:                             ; CODE XREF: sub_4029F0+CD↓j
.text:00402A2D                 call    _errno
.text:00402A32                 mov     esi, [eax]
.text:00402A34
.text:00402A34 loc_402A34:                             ; CODE XREF: sub_4029F0+C7↓j
.text:00402A34                 cmp     esi, 9
.text:00402A37                 jz      short loc_402AA6
.text:00402A39
.text:00402A39 loc_402A39:                             ; CODE XREF: sub_4029F0+B8↓j
.text:00402A39                                         ; sub_4029F0+C1↓j
.text:00402A39                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402A40                 call    ds:libintl_gettext
.text:00402A46                 mov     ebx, eax
.text:00402A48                 mov     eax, ds:dword_407030
.text:00402A4D                 test    eax, eax
.text:00402A4F                 jz      short loc_402A86
.text:00402A51                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402A54                 call    sub_403C00
.text:00402A59                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402A5D                 mov     edx, Code
.text:00402A63                 mov     [esp+2Ch+var_1C], ebx
.text:00402A67                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:00402A6F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402A73                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402A76                 call    sub_4046F0
.text:00402A7B                 nop
.text:00402A7C                 lea     esi, [esi+0]
.text:00402A80
.text:00402A80 loc_402A80:                             ; CODE XREF: sub_4029F0+3B↑j
.text:00402A80                                         ; sub_4029F0+B4↓j ...
.text:00402A80                 add     esp, 24h
.text:00402A83                 pop     ebx
.text:00402A84                 pop     esi
.text:00402A85                 retn
.text:00402A86 ; ---------------------------------------------------------------------------
.text:00402A86
.text:00402A86 loc_402A86:                             ; CODE XREF: sub_4029F0+5F↑j
.text:00402A86                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402A8A                 mov     ebx, Code
.text:00402A90                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00402A98                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402A9C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402A9F                 call    sub_4046F0
.text:00402AA4                 jmp     short loc_402A80
.text:00402AA6 ; ---------------------------------------------------------------------------
.text:00402AA6
.text:00402AA6 loc_402AA6:                             ; CODE XREF: sub_4029F0+47↑j
.text:00402AA6                 test    bl, bl
.text:00402AA8                 jnz     short loc_402A39
.text:00402AAA                 cmp     [esp+2Ch+var_9], 0
.text:00402AAF                 jnz     short loc_402A80
.text:00402AB1                 jmp     short loc_402A39
.text:00402AB3 ; ---------------------------------------------------------------------------
.text:00402AB3
.text:00402AB3 loc_402AB3:                             ; CODE XREF: sub_4029F0+33↑j
.text:00402AB3                 xor     esi, esi
.text:00402AB5                 test    al, al
.text:00402AB7                 jz      loc_402A34
.text:00402ABD                 jmp     loc_402A2D
.text:00402ABD sub_4029F0      endp
.text:00402ABD
.text:00402ABD ; ---------------------------------------------------------------------------
.text:00402AC2                 align 10h
.text:00402AD0 aLiteral        db 'literal',0          ; DATA XREF: .text:00402B10↓o
.text:00402AD8 aShell          db 'shell',0            ; DATA XREF: .text:00402B14↓o
.text:00402ADE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00402B18↓o
.text:00402AEB aC              db 'c',0                ; DATA XREF: .text:00402B1C↓o
.text:00402AED aEscape         db 'escape',0           ; DATA XREF: .text:00402B20↓o
.text:00402AF4 aLocale         db 'locale',0           ; DATA XREF: .text:00402B24↓o
.text:00402AFB aClocale        db 'clocale',0          ; DATA XREF: .text:00402B28↓o
.text:00402B03                 align 10h
.text:00402B10                 dd offset aLiteral      ; "literal"
.text:00402B14                 dd offset aShell        ; "shell"
.text:00402B18                 dd offset aShellAlways  ; "shell-always"
.text:00402B1C                 dd offset aC            ; "c"
.text:00402B20                 dd offset aEscape       ; "escape"
.text:00402B24                 dd offset aLocale       ; "locale"
.text:00402B28                 dd offset aClocale      ; "clocale"
.text:00402B2C                 dd 2 dup(0)
.text:00402B34                 dd 1, 2, 3, 4, 5, 6
.text:00402B4C asc_402B4C:                             ; DATA XREF: sub_402B60+7E↓o
.text:00402B4C                                         ; sub_402B60+A39↓o ...
.text:00402B4C                 text "UTF-16LE", '"',27h,'`'
.text:00402B52                 align 10h
.text:00402B60
.text:00402B60 ; =============== S U B R O U T I N E =======================================
.text:00402B60
.text:00402B60
.text:00402B60 ; int __cdecl sub_402B60(int, int, char *Str, int, int, int)
.text:00402B60 sub_402B60      proc near               ; CODE XREF: sub_402B60+43A↓p
.text:00402B60                                         ; .text:00403723↓p ...
.text:00402B60
.text:00402B60 C               = dword ptr -4Ch
.text:00402B60 Type            = dword ptr -48h
.text:00402B60 SizeInBytes     = dword ptr -44h
.text:00402B60 State           = dword ptr -40h
.text:00402B60 var_3C          = dword ptr -3Ch
.text:00402B60 var_38          = dword ptr -38h
.text:00402B60 var_34          = dword ptr -34h
.text:00402B60 var_30          = dword ptr -30h
.text:00402B60 var_29          = byte ptr -29h
.text:00402B60 var_28          = dword ptr -28h
.text:00402B60 var_22          = byte ptr -22h
.text:00402B60 var_21          = byte ptr -21h
.text:00402B60 var_20          = dword ptr -20h
.text:00402B60 var_1C          = dword ptr -1Ch
.text:00402B60 var_18          = mbstate_t ptr -18h
.text:00402B60 arg_0           = dword ptr  4
.text:00402B60 arg_4           = dword ptr  8
.text:00402B60 Str             = dword ptr  0Ch
.text:00402B60 arg_C           = dword ptr  10h
.text:00402B60 arg_10          = dword ptr  14h
.text:00402B60 arg_14          = dword ptr  18h
.text:00402B60
.text:00402B60                 push    ebp
.text:00402B61                 push    edi
.text:00402B62                 push    esi
.text:00402B63                 push    ebx
.text:00402B64                 sub     esp, 3Ch
.text:00402B67                 mov     edx, ds:__mb_cur_max
.text:00402B6D                 mov     [esp+4Ch+var_34], 0
.text:00402B75                 mov     [esp+4Ch+var_1C], 0
.text:00402B7D                 cmp     dword ptr [edx], 1
.text:00402B80                 mov     [esp+4Ch+var_20], 0
.text:00402B88                 mov     [esp+4Ch+var_21], 0
.text:00402B8D                 setz    [esp+4Ch+var_22]
.text:00402B92                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00402B97                 ja      short def_402B9D ; jumptable 00402B9D default case, cases 0,1
.text:00402B99                 mov     edx, [esp+4Ch+arg_10]
.text:00402B9D                 jmp     ds:jpt_402B9D[edx*4] ; switch jump
.text:00402B9D ; ---------------------------------------------------------------------------
.text:00402BA4 jpt_402B9D      dd offset def_402B9D    ; DATA XREF: sub_402B60+3D↑r
.text:00402BA4                 dd offset def_402B9D    ; jump table for switch statement
.text:00402BA4                 dd offset loc_4034E5
.text:00402BA4                 dd offset loc_402BC0
.text:00402BA4                 dd offset loc_40350B
.text:00402BA4                 dd offset loc_403515
.text:00402BA4                 dd offset loc_403515
.text:00402BC0 ; ---------------------------------------------------------------------------
.text:00402BC0
.text:00402BC0 loc_402BC0:                             ; CODE XREF: sub_402B60+3D↑j
.text:00402BC0                                         ; DATA XREF: sub_402B60:jpt_402B9D↑o
.text:00402BC0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00402B9D case 3
.text:00402BC4                 cmp     [esp+4Ch+var_34], eax
.text:00402BC8                 jnb     short loc_402BD1
.text:00402BCA                 mov     ebx, [esp+4Ch+arg_0]
.text:00402BCE                 mov     byte ptr [ebx], 22h ; '"'
.text:00402BD1
.text:00402BD1 loc_402BD1:                             ; CODE XREF: sub_402B60+68↑j
.text:00402BD1                 mov     [esp+4Ch+var_34], 1
.text:00402BD9                 mov     [esp+4Ch+var_21], 1
.text:00402BDE                 mov     [esp+4Ch+var_1C], offset asc_402B4C ; "\"'`"
.text:00402BE6
.text:00402BE6 loc_402BE6:                             ; CODE XREF: sub_402B60+9A6↓j
.text:00402BE6                 mov     [esp+4Ch+var_20], 1
.text:00402BEE
.text:00402BEE def_402B9D:                             ; CODE XREF: sub_402B60+37↑j
.text:00402BEE                                         ; sub_402B60+3D↑j ...
.text:00402BEE                 xor     ebp, ebp        ; jumptable 00402B9D default case, cases 0,1
.text:00402BF0
.text:00402BF0 loc_402BF0:                             ; CODE XREF: sub_402B60+3DB↓j
.text:00402BF0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00402BF5                 jz      loc_4034D7
.text:00402BFB                 cmp     ebp, [esp+4Ch+arg_C]
.text:00402BFF
.text:00402BFF loc_402BFF:                             ; CODE XREF: sub_402B60+980↓j
.text:00402BFF                 jz      loc_40346E
.text:00402C05                 cmp     [esp+4Ch+var_21], 0
.text:00402C0A                 jz      short loc_402C50
.text:00402C0C                 mov     esi, [esp+4Ch+var_20]
.text:00402C10                 test    esi, esi
.text:00402C12                 jz      short loc_402C50
.text:00402C14                 mov     ecx, [esp+4Ch+var_20]
.text:00402C18                 lea     edi, [ecx+ebp]
.text:00402C1B                 cmp     edi, [esp+4Ch+arg_C]
.text:00402C1F                 ja      short loc_402C50
.text:00402C21                 cld
.text:00402C22                 mov     ebx, [esp+4Ch+Str]
.text:00402C26                 mov     edi, [esp+4Ch+var_1C]
.text:00402C2A                 add     ebx, ebp
.text:00402C2C                 mov     esi, ebx
.text:00402C2E                 cmp     ecx, ecx
.text:00402C30                 repe cmpsb
.text:00402C32                 jnz     short loc_402C50
.text:00402C34                 mov     edx, [esp+4Ch+arg_4]
.text:00402C38                 cmp     [esp+4Ch+var_34], edx
.text:00402C3C                 jnb     short loc_402C4A
.text:00402C3E                 mov     ecx, [esp+4Ch+arg_0]
.text:00402C42                 mov     eax, [esp+4Ch+var_34]
.text:00402C46                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00402C4A
.text:00402C4A loc_402C4A:                             ; CODE XREF: sub_402B60+DC↑j
.text:00402C4A                 inc     [esp+4Ch+var_34]
.text:00402C4E                 mov     esi, esi
.text:00402C50
.text:00402C50 loc_402C50:                             ; CODE XREF: sub_402B60+AA↑j
.text:00402C50                                         ; sub_402B60+B2↑j ...
.text:00402C50                 mov     edi, [esp+4Ch+Str]
.text:00402C54                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00402C59                 movzx   eax, bl
.text:00402C5C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00402C5F                 ja      def_402C65      ; jumptable 00402C65 default case, cases 1-6,14-31,64
.text:00402C65                 jmp     ds:jpt_402C65[eax*4] ; switch jump
.text:00402C65 ; ---------------------------------------------------------------------------
.text:00402C6C jpt_402C65      dd offset loc_402E68, offset def_402C65, offset def_402C65
.text:00402C6C                                         ; DATA XREF: sub_402B60+105↑r
.text:00402C6C                 dd offset def_402C65, offset def_402C65, offset def_402C65 ; jump table for switch statement
.text:00402C6C                 dd offset def_402C65, offset loc_402F40, offset loc_402F5E
.text:00402C6C                 dd offset loc_402F62, offset loc_402FA7, offset loc_402FAB
.text:00402C6C                 dd offset loc_402FAF, offset loc_402FB3, offset def_402C65
.text:00402C6C                 dd offset def_402C65, offset def_402C65, offset def_402C65
.text:00402C6C                 dd offset def_402C65, offset def_402C65, offset def_402C65
.text:00402C6C                 dd offset def_402C65, offset def_402C65, offset def_402C65
.text:00402C6C                 dd offset def_402C65, offset def_402C65, offset def_402C65
.text:00402C6C                 dd offset def_402C65, offset def_402C65, offset def_402C65
.text:00402C6C                 dd offset def_402C65, offset def_402C65, offset loc_403438
.text:00402C6C                 dd offset loc_403438, offset loc_403438, offset loc_40345A
.text:00402C6C                 dd offset loc_403438, offset def_403062, offset loc_403438
.text:00402C6C                 dd offset loc_402FB7, offset loc_403438, offset loc_403438
.text:00402C6C                 dd offset loc_403438, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset loc_403438
.text:00402C6C                 dd offset loc_403438, offset loc_403438, offset loc_403438
.text:00402C6C                 dd offset loc_40301C, offset def_402C65, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset loc_403438, offset loc_403431
.text:00402C6C                 dd offset def_403062, offset loc_403438, offset def_403062
.text:00402C6C                 dd offset loc_403438, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset def_403062, offset def_403062, offset def_403062
.text:00402C6C                 dd offset loc_403448, offset loc_403438, offset loc_403448
.text:00402C6C                 dd offset loc_40345A
.text:00402E68 ; ---------------------------------------------------------------------------
.text:00402E68
.text:00402E68 loc_402E68:                             ; CODE XREF: sub_402B60+105↑j
.text:00402E68                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:00402E68                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402C65 case 0
.text:00402E6D                 lea     eax, [ebp+1]
.text:00402E70                 jz      loc_402F20
.text:00402E76                 mov     esi, [esp+4Ch+arg_4]
.text:00402E7A                 cmp     [esp+4Ch+var_34], esi
.text:00402E7E                 jnb     short loc_402E8C
.text:00402E80                 mov     eax, [esp+4Ch+arg_0]
.text:00402E84                 mov     ebx, [esp+4Ch+var_34]
.text:00402E88                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00402E8C
.text:00402E8C loc_402E8C:                             ; CODE XREF: sub_402B60+31E↑j
.text:00402E8C                 inc     [esp+4Ch+var_34]
.text:00402E90                 mov     edx, [esp+4Ch+arg_4]
.text:00402E94                 cmp     [esp+4Ch+var_34], edx
.text:00402E98                 jnb     short loc_402EA6
.text:00402E9A                 mov     edi, [esp+4Ch+arg_0]
.text:00402E9E                 mov     ecx, [esp+4Ch+var_34]
.text:00402EA2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00402EA6
.text:00402EA6 loc_402EA6:                             ; CODE XREF: sub_402B60+338↑j
.text:00402EA6                 inc     [esp+4Ch+var_34]
.text:00402EAA                 mov     esi, [esp+4Ch+arg_4]
.text:00402EAE                 cmp     [esp+4Ch+var_34], esi
.text:00402EB2                 jnb     short loc_402EC0
.text:00402EB4                 mov     ebx, [esp+4Ch+arg_0]
.text:00402EB8                 mov     eax, [esp+4Ch+var_34]
.text:00402EBC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00402EC0
.text:00402EC0 loc_402EC0:                             ; CODE XREF: sub_402B60+352↑j
.text:00402EC0                 inc     [esp+4Ch+var_34]
.text:00402EC4                 mov     bl, 30h ; '0'
.text:00402EC6                 lea     esi, [esi+0]
.text:00402EC9                 lea     edi, [edi+0]
.text:00402ED0
.text:00402ED0 def_403062:                             ; CODE XREF: sub_402B60+105↑j
.text:00402ED0                                         ; sub_402B60+463↓j ...
.text:00402ED0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402C65 cases 37,43-58,65-90,93,95,97-122
.text:00402ED0                                         ; jumptable 00403062 default case, cases 34-38,42-44,46,48-59
.text:00402ED5                 lea     eax, [ebp+1]
.text:00402ED8                 jz      short loc_402F20
.text:00402EDA                 mov     cl, bl
.text:00402EDC                 mov     edi, [esp+4Ch+arg_14]
.text:00402EE0                 mov     esi, 1
.text:00402EE5                 shr     cl, 5
.text:00402EE8                 movzx   edx, cl
.text:00402EEB                 mov     ecx, ebx
.text:00402EED                 and     ecx, 1Fh
.text:00402EF0                 shl     esi, cl
.text:00402EF2                 test    [edi+edx*4+4], esi
.text:00402EF6                 jz      short loc_402F12
.text:00402EF8
.text:00402EF8 loc_402EF8:                             ; CODE XREF: sub_402B60+3FC↓j
.text:00402EF8                 mov     edx, [esp+4Ch+arg_4]
.text:00402EFC                 cmp     [esp+4Ch+var_34], edx
.text:00402F00                 jnb     short loc_402F0E
.text:00402F02                 mov     edi, [esp+4Ch+arg_0]
.text:00402F06                 mov     esi, [esp+4Ch+var_34]
.text:00402F0A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00402F0E
.text:00402F0E loc_402F0E:                             ; CODE XREF: sub_402B60+3A0↑j
.text:00402F0E                 inc     [esp+4Ch+var_34]
.text:00402F12
.text:00402F12 loc_402F12:                             ; CODE XREF: sub_402B60+396↑j
.text:00402F12                 lea     eax, [ebp+1]
.text:00402F15                 lea     esi, [esi+0]
.text:00402F19                 lea     edi, [edi+0]
.text:00402F20
.text:00402F20 loc_402F20:                             ; CODE XREF: sub_402B60+310↑j
.text:00402F20                                         ; sub_402B60+378↑j ...
.text:00402F20                 mov     ebp, [esp+4Ch+arg_4]
.text:00402F24                 cmp     [esp+4Ch+var_34], ebp
.text:00402F28                 jnb     short loc_402F35
.text:00402F2A                 mov     edx, [esp+4Ch+arg_0]
.text:00402F2E                 mov     ecx, [esp+4Ch+var_34]
.text:00402F32                 mov     [ecx+edx], bl
.text:00402F35
.text:00402F35 loc_402F35:                             ; CODE XREF: sub_402B60+3C8↑j
.text:00402F35                 inc     [esp+4Ch+var_34]
.text:00402F39                 mov     ebp, eax
.text:00402F3B                 jmp     loc_402BF0
.text:00402F40 ; ---------------------------------------------------------------------------
.text:00402F40
.text:00402F40 loc_402F40:                             ; CODE XREF: sub_402B60+105↑j
.text:00402F40                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:00402F40                 mov     dl, 61h ; 'a'   ; jumptable 00402C65 case 7
.text:00402F42                 lea     esi, [esi+0]
.text:00402F49                 lea     edi, [edi+0]
.text:00402F50
.text:00402F50 loc_402F50:                             ; CODE XREF: sub_402B60+400↓j
.text:00402F50                                         ; sub_402B60+409↓j ...
.text:00402F50                 cmp     [esp+4Ch+var_21], 0
.text:00402F55                 lea     eax, [ebp+1]
.text:00402F58                 jz      short loc_402F20
.text:00402F5A                 mov     bl, dl
.text:00402F5C                 jmp     short loc_402EF8
.text:00402F5E ; ---------------------------------------------------------------------------
.text:00402F5E
.text:00402F5E loc_402F5E:                             ; CODE XREF: sub_402B60+105↑j
.text:00402F5E                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:00402F5E                 mov     dl, 62h ; 'b'   ; jumptable 00402C65 case 8
.text:00402F60                 jmp     short loc_402F50
.text:00402F62 ; ---------------------------------------------------------------------------
.text:00402F62
.text:00402F62 loc_402F62:                             ; CODE XREF: sub_402B60+105↑j
.text:00402F62                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:00402F62                 mov     dl, 74h ; 't'   ; jumptable 00402C65 case 9
.text:00402F64
.text:00402F64 loc_402F64:                             ; CODE XREF: sub_402B60+449↓j
.text:00402F64                                         ; sub_402B60+455↓j ...
.text:00402F64                 cmp     [esp+4Ch+arg_10], 1
.text:00402F69                 jnz     short loc_402F50
.text:00402F6B
.text:00402F6B loc_402F6B:                             ; CODE XREF: sub_402B60+45C↓j
.text:00402F6B                                         ; sub_402B60+4C1↓j ...
.text:00402F6B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403332 cases 91,92,94,96,124
.text:00402F73                 mov     eax, [esp+4Ch+arg_14]
.text:00402F77                 mov     edx, [esp+4Ch+arg_C]
.text:00402F7B                 mov     ecx, [esp+4Ch+Str]
.text:00402F7F                 mov     ebx, [esp+4Ch+arg_4]
.text:00402F83                 mov     [esp+4Ch+var_38], eax ; int
.text:00402F87                 mov     ebp, [esp+4Ch+arg_0]
.text:00402F8B                 mov     [esp+4Ch+State], edx ; int
.text:00402F8F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00402F93                 mov     [esp+4Ch+Type], ebx ; int
.text:00402F97                 mov     [esp+4Ch+C], ebp ; int
.text:00402F9A                 call    sub_402B60
.text:00402F9F
.text:00402F9F loc_402F9F:                             ; CODE XREF: sub_402B60+972↓j
.text:00402F9F                 add     esp, 3Ch
.text:00402FA2                 pop     ebx
.text:00402FA3                 pop     esi
.text:00402FA4                 pop     edi
.text:00402FA5                 pop     ebp
.text:00402FA6                 retn
.text:00402FA7 ; ---------------------------------------------------------------------------
.text:00402FA7
.text:00402FA7 loc_402FA7:                             ; CODE XREF: sub_402B60+105↑j
.text:00402FA7                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:00402FA7                 mov     dl, 6Eh ; 'n'   ; jumptable 00402C65 case 10
.text:00402FA9                 jmp     short loc_402F64
.text:00402FAB ; ---------------------------------------------------------------------------
.text:00402FAB
.text:00402FAB loc_402FAB:                             ; CODE XREF: sub_402B60+105↑j
.text:00402FAB                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:00402FAB                 mov     dl, 76h ; 'v'   ; jumptable 00402C65 case 11
.text:00402FAD                 jmp     short loc_402F50
.text:00402FAF ; ---------------------------------------------------------------------------
.text:00402FAF
.text:00402FAF loc_402FAF:                             ; CODE XREF: sub_402B60+105↑j
.text:00402FAF                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:00402FAF                 mov     dl, 66h ; 'f'   ; jumptable 00402C65 case 12
.text:00402FB1                 jmp     short loc_402F50
.text:00402FB3 ; ---------------------------------------------------------------------------
.text:00402FB3
.text:00402FB3 loc_402FB3:                             ; CODE XREF: sub_402B60+105↑j
.text:00402FB3                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:00402FB3                 mov     dl, 72h ; 'r'   ; jumptable 00402C65 case 13
.text:00402FB5                 jmp     short loc_402F64
.text:00402FB7 ; ---------------------------------------------------------------------------
.text:00402FB7
.text:00402FB7 loc_402FB7:                             ; CODE XREF: sub_402B60+105↑j
.text:00402FB7                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:00402FB7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402C65 case 39
.text:00402FBC                 jz      short loc_402F6B ; jumptable 00403332 cases 91,92,94,96,124
.text:00402FBE                 cmp     [esp+4Ch+arg_10], 2
.text:00402FC3                 jnz     def_403062      ; jumptable 00402C65 cases 37,43-58,65-90,93,95,97-122
.text:00402FC3                                         ; jumptable 00403062 default case, cases 34-38,42-44,46,48-59
.text:00402FC9                 mov     edx, [esp+4Ch+arg_4]
.text:00402FCD                 cmp     [esp+4Ch+var_34], edx
.text:00402FD1                 jnb     short loc_402FDF
.text:00402FD3                 mov     ecx, [esp+4Ch+arg_0]
.text:00402FD7                 mov     edi, [esp+4Ch+var_34]
.text:00402FDB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00402FDF
.text:00402FDF loc_402FDF:                             ; CODE XREF: sub_402B60+471↑j
.text:00402FDF                 inc     [esp+4Ch+var_34]
.text:00402FE3                 mov     eax, [esp+4Ch+arg_4]
.text:00402FE7                 cmp     [esp+4Ch+var_34], eax
.text:00402FEB                 jnb     short loc_402FF9
.text:00402FED                 mov     esi, [esp+4Ch+arg_0]
.text:00402FF1                 mov     edx, [esp+4Ch+var_34]
.text:00402FF5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00402FF9
.text:00402FF9 loc_402FF9:                             ; CODE XREF: sub_402B60+48B↑j
.text:00402FF9                 inc     [esp+4Ch+var_34]
.text:00402FFD                 mov     edi, [esp+4Ch+arg_4]
.text:00403001                 cmp     [esp+4Ch+var_34], edi
.text:00403005                 jnb     short loc_403013
.text:00403007                 mov     ecx, [esp+4Ch+arg_0]
.text:0040300B                 mov     eax, [esp+4Ch+var_34]
.text:0040300F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403013
.text:00403013 loc_403013:                             ; CODE XREF: sub_402B60+4A5↑j
.text:00403013                                         ; sub_402B60+5C4↓j ...
.text:00403013                 inc     [esp+4Ch+var_34]
.text:00403017                 jmp     def_403062      ; jumptable 00402C65 cases 37,43-58,65-90,93,95,97-122
.text:00403017                                         ; jumptable 00403062 default case, cases 34-38,42-44,46,48-59
.text:0040301C ; ---------------------------------------------------------------------------
.text:0040301C
.text:0040301C loc_40301C:                             ; CODE XREF: sub_402B60+105↑j
.text:0040301C                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:0040301C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402C65 case 63
.text:00403021                 jz      loc_402F6B      ; jumptable 00403332 cases 91,92,94,96,124
.text:00403027                 cmp     [esp+4Ch+arg_10], 3
.text:0040302C                 jnz     def_403062      ; jumptable 00402C65 cases 37,43-58,65-90,93,95,97-122
.text:0040302C                                         ; jumptable 00403062 default case, cases 34-38,42-44,46,48-59
.text:00403032                 lea     edx, [ebp+2]
.text:00403035                 cmp     edx, [esp+4Ch+arg_C]
.text:00403039                 jnb     def_403062      ; jumptable 00402C65 cases 37,43-58,65-90,93,95,97-122
.text:00403039                                         ; jumptable 00403062 default case, cases 34-38,42-44,46,48-59
.text:0040303F                 mov     esi, [esp+4Ch+Str]
.text:00403043                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403048                 jnz     def_403062      ; jumptable 00402C65 cases 37,43-58,65-90,93,95,97-122
.text:00403048                                         ; jumptable 00403062 default case, cases 34-38,42-44,46,48-59
.text:0040304E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403053                 movsx   eax, cl
.text:00403056                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403059                 cmp     eax, 1Dh
.text:0040305C                 ja      def_403062      ; jumptable 00402C65 cases 37,43-58,65-90,93,95,97-122
.text:0040305C                                         ; jumptable 00403062 default case, cases 34-38,42-44,46,48-59
.text:00403062                 jmp     ds:jpt_403062[eax*4] ; switch jump
.text:00403062 ; ---------------------------------------------------------------------------
.text:00403069                 align 4
.text:0040306C jpt_403062      dd offset loc_4030E4    ; DATA XREF: sub_402B60+502↑r
.text:0040306C                 dd offset def_403062    ; jump table for switch statement
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset loc_4030E4
.text:0040306C                 dd offset loc_4030E4
.text:0040306C                 dd offset loc_4030E4
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset loc_4030E4
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset loc_4030E4
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset def_403062
.text:0040306C                 dd offset loc_4030E4
.text:0040306C                 dd offset loc_4030E4
.text:0040306C                 dd offset loc_4030E4
.text:004030E4 ; ---------------------------------------------------------------------------
.text:004030E4
.text:004030E4 loc_4030E4:                             ; CODE XREF: sub_402B60+502↑j
.text:004030E4                                         ; DATA XREF: sub_402B60:jpt_403062↑o
.text:004030E4                 mov     ebp, edx        ; jumptable 00403062 cases 33,39-41,45,47,60-62
.text:004030E6                 mov     bl, cl
.text:004030E8                 mov     edx, [esp+4Ch+arg_4]
.text:004030EC                 cmp     [esp+4Ch+var_34], edx
.text:004030F0                 jnb     short loc_4030FE
.text:004030F2                 mov     ecx, [esp+4Ch+arg_0]
.text:004030F6                 mov     edi, [esp+4Ch+var_34]
.text:004030FA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004030FE
.text:004030FE loc_4030FE:                             ; CODE XREF: sub_402B60+590↑j
.text:004030FE                 inc     [esp+4Ch+var_34]
.text:00403102                 mov     eax, [esp+4Ch+arg_4]
.text:00403106                 cmp     [esp+4Ch+var_34], eax
.text:0040310A                 jnb     short loc_403118
.text:0040310C                 mov     edx, [esp+4Ch+arg_0]
.text:00403110                 mov     esi, [esp+4Ch+var_34]
.text:00403114                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403118
.text:00403118 loc_403118:                             ; CODE XREF: sub_402B60+5AA↑j
.text:00403118                 inc     [esp+4Ch+var_34]
.text:0040311C                 mov     edi, [esp+4Ch+arg_4]
.text:00403120                 cmp     [esp+4Ch+var_34], edi
.text:00403124                 jnb     loc_403013
.text:0040312A                 mov     eax, [esp+4Ch+arg_0]
.text:0040312E                 mov     ecx, [esp+4Ch+var_34]
.text:00403132                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403136                 jmp     loc_403013
.text:00403136 ; ---------------------------------------------------------------------------
.text:0040313B                 align 10h
.text:00403140
.text:00403140 def_402C65:                             ; CODE XREF: sub_402B60+FF↑j
.text:00403140                                         ; sub_402B60+105↑j
.text:00403140                                         ; DATA XREF: ...
.text:00403140                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00402C65 default case, cases 1-6,14-31,64
.text:00403145                 jz      loc_403270
.text:0040314B                 mov     [esp+4Ch+var_28], 1
.text:00403153                 mov     esi, ds:__mb_cur_max
.text:00403159                 movzx   edx, bl
.text:0040315C                 cmp     dword ptr [esi], 1
.text:0040315F                 jz      loc_403254
.text:00403165                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040316D                 mov     [esp+4Ch+C], edx ; C
.text:00403170                 call    _isctype
.text:00403175
.text:00403175 loc_403175:                             ; CODE XREF: sub_402B60+705↓j
.text:00403175                 test    eax, eax
.text:00403177                 setnz   [esp+4Ch+var_29]
.text:0040317C
.text:0040317C loc_40317C:                             ; CODE XREF: sub_402B60+7A5↓j
.text:0040317C                 cmp     [esp+4Ch+var_21], 0
.text:00403181                 lea     eax, [ebp+1]
.text:00403184                 jz      loc_402F20
.text:0040318A                 cmp     [esp+4Ch+var_29], 0
.text:0040318F                 jnz     def_403062      ; jumptable 00402C65 cases 37,43-58,65-90,93,95,97-122
.text:0040318F                                         ; jumptable 00403062 default case, cases 34-38,42-44,46,48-59
.text:00403195
.text:00403195 loc_403195:                             ; CODE XREF: sub_402B60+7AB↓j
.text:00403195                 mov     eax, [esp+4Ch+var_28]
.text:00403199                 lea     edx, [eax+ebp]
.text:0040319C                 lea     esi, [esi+0]
.text:004031A0
.text:004031A0 loc_4031A0:                             ; CODE XREF: sub_402B60+6EF↓j
.text:004031A0                 cmp     [esp+4Ch+var_21], 0
.text:004031A5                 jz      short loc_403220
.text:004031A7                 cmp     [esp+4Ch+var_29], 0
.text:004031AC                 jnz     short loc_403220
.text:004031AE                 mov     edi, [esp+4Ch+arg_4]
.text:004031B2                 cmp     [esp+4Ch+var_34], edi
.text:004031B6                 jnb     short loc_4031C4
.text:004031B8                 mov     esi, [esp+4Ch+arg_0]
.text:004031BC                 mov     eax, [esp+4Ch+var_34]
.text:004031C0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004031C4
.text:004031C4 loc_4031C4:                             ; CODE XREF: sub_402B60+656↑j
.text:004031C4                 inc     [esp+4Ch+var_34]
.text:004031C8                 mov     ecx, [esp+4Ch+arg_4]
.text:004031CC                 cmp     [esp+4Ch+var_34], ecx
.text:004031D0                 jnb     short loc_4031E5
.text:004031D2                 mov     cl, bl
.text:004031D4                 mov     esi, [esp+4Ch+arg_0]
.text:004031D8                 mov     edi, [esp+4Ch+var_34]
.text:004031DC                 shr     cl, 6
.text:004031DF                 add     cl, 30h ; '0'
.text:004031E2                 mov     [edi+esi], cl
.text:004031E5
.text:004031E5 loc_4031E5:                             ; CODE XREF: sub_402B60+670↑j
.text:004031E5                 inc     [esp+4Ch+var_34]
.text:004031E9                 mov     edi, [esp+4Ch+arg_4]
.text:004031ED                 cmp     [esp+4Ch+var_34], edi
.text:004031F1                 jnb     short loc_403209
.text:004031F3                 mov     cl, bl
.text:004031F5                 mov     esi, [esp+4Ch+arg_0]
.text:004031F9                 shr     cl, 3
.text:004031FC                 mov     edi, [esp+4Ch+var_34]
.text:00403200                 and     cl, 7
.text:00403203                 add     cl, 30h ; '0'
.text:00403206                 mov     [edi+esi], cl
.text:00403209
.text:00403209 loc_403209:                             ; CODE XREF: sub_402B60+691↑j
.text:00403209                 inc     [esp+4Ch+var_34]
.text:0040320D                 and     bl, 7
.text:00403210                 add     bl, 30h ; '0'
.text:00403213                 lea     esi, [esi+0]
.text:00403219                 lea     edi, [edi+0]
.text:00403220
.text:00403220 loc_403220:                             ; CODE XREF: sub_402B60+645↑j
.text:00403220                                         ; sub_402B60+64C↑j
.text:00403220                 lea     eax, [ebp+1]
.text:00403223                 cmp     edx, eax
.text:00403225                 jbe     loc_402F20
.text:0040322B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040322F                 cmp     [esp+4Ch+var_34], ebp
.text:00403233                 jnb     short loc_403240
.text:00403235                 mov     ecx, [esp+4Ch+arg_0]
.text:00403239                 mov     edi, [esp+4Ch+var_34]
.text:0040323D                 mov     [edi+ecx], bl
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_402B60+6D3↑j
.text:00403240                 inc     [esp+4Ch+var_34]
.text:00403244                 mov     ebp, eax
.text:00403246                 mov     eax, [esp+4Ch+Str]
.text:0040324A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040324F                 jmp     loc_4031A0
.text:00403254 ; ---------------------------------------------------------------------------
.text:00403254
.text:00403254 loc_403254:                             ; CODE XREF: sub_402B60+5FF↑j
.text:00403254                 mov     ecx, ds:_pctype
.text:0040325A                 mov     edi, [ecx]
.text:0040325C                 movzx   eax, word ptr [edi+edx*2]
.text:00403260                 and     eax, 157h
.text:00403265                 jmp     loc_403175
.text:00403265 ; ---------------------------------------------------------------------------
.text:0040326A                 align 10h
.text:00403270
.text:00403270 loc_403270:                             ; CODE XREF: sub_402B60+5E5↑j
.text:00403270                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403275                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040327D                 mov     [esp+4Ch+var_28], 0
.text:00403285                 mov     [esp+4Ch+var_29], 1
.text:0040328A                 jz      loc_40341C
.text:00403290
.text:00403290 loc_403290:                             ; CODE XREF: sub_402B60+8CC↓j
.text:00403290                 mov     ecx, [esp+4Ch+arg_C]
.text:00403294                 lea     edx, [esp+4Ch+var_18]
.text:00403298                 mov     edi, [esp+4Ch+Str]
.text:0040329C                 mov     [esp+4Ch+State], edx ; State
.text:004032A0                 lea     esi, [esp+4Ch+var_18._State]
.text:004032A4                 sub     ecx, ebp
.text:004032A6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004032AA                 add     edi, ebp
.text:004032AC                 mov     [esp+4Ch+var_30], edi
.text:004032B0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004032B4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004032B7                 call    mbrtowc
.text:004032BC                 test    eax, eax
.text:004032BE                 mov     edi, eax
.text:004032C0                 jz      short loc_403300
.text:004032C2                 cmp     eax, 0FFFFFFFFh
.text:004032C5                 jz      loc_403412
.text:004032CB                 cmp     eax, 0FFFFFFFEh
.text:004032CE                 jz      loc_4033D2
.text:004032D4                 cmp     [esp+4Ch+arg_10], 1
.text:004032D9                 jz      short loc_403310
.text:004032DB
.text:004032DB loc_4032DB:                             ; CODE XREF: sub_402B60+7B9↓j
.text:004032DB                                         ; sub_402B60+86D↓j
.text:004032DB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004032E0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004032E8                 mov     [esp+4Ch+C], ecx ; C
.text:004032EB                 call    iswctype
.text:004032F0                 test    eax, eax
.text:004032F2                 jnz     short loc_4032F9
.text:004032F4                 mov     [esp+4Ch+var_29], 0
.text:004032F9
.text:004032F9 loc_4032F9:                             ; CODE XREF: sub_402B60+792↑j
.text:004032F9                 mov     [esp+4Ch+var_28], edi
.text:004032FD                 lea     esi, [esi+0]
.text:00403300
.text:00403300 loc_403300:                             ; CODE XREF: sub_402B60+760↑j
.text:00403300                                         ; sub_402B60+87B↓j ...
.text:00403300                 cmp     [esp+4Ch+var_28], 1
.text:00403305                 jbe     loc_40317C
.text:0040330B                 jmp     loc_403195
.text:00403310 ; ---------------------------------------------------------------------------
.text:00403310
.text:00403310 loc_403310:                             ; CODE XREF: sub_402B60+779↑j
.text:00403310                 cmp     [esp+4Ch+arg_10], eax
.text:00403314                 mov     edx, 1
.text:00403319                 jnb     short loc_4032DB
.text:0040331B
.text:0040331B loc_40331B:                             ; CODE XREF: sub_402B60+867↓j
.text:0040331B                 mov     ecx, [esp+4Ch+Str]
.text:0040331F                 lea     esi, [edx+ebp]
.text:00403322                 movsx   eax, byte ptr [esi+ecx]
.text:00403326                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403329                 cmp     eax, 21h
.text:0040332C                 ja      def_403332      ; jumptable 00403332 default case, cases 93,95,97-123
.text:00403332                 jmp     ds:jpt_403332[eax*4] ; switch jump
.text:00403332 ; ---------------------------------------------------------------------------
.text:00403339                 align 4
.text:0040333C jpt_403332      dd offset loc_402F6B    ; DATA XREF: sub_402B60+7D2↑r
.text:0040333C                 dd offset loc_402F6B    ; jump table for switch statement
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset loc_402F6B
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset loc_402F6B
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset def_403332
.text:0040333C                 dd offset loc_402F6B
.text:004033C4 ; ---------------------------------------------------------------------------
.text:004033C4
.text:004033C4 def_403332:                             ; CODE XREF: sub_402B60+7CC↑j
.text:004033C4                                         ; sub_402B60+7D2↑j
.text:004033C4                                         ; DATA XREF: ...
.text:004033C4                 inc     edx             ; jumptable 00403332 default case, cases 93,95,97-123
.text:004033C5                 cmp     edx, edi
.text:004033C7                 jb      loc_40331B
.text:004033CD                 jmp     loc_4032DB
.text:004033D2 ; ---------------------------------------------------------------------------
.text:004033D2
.text:004033D2 loc_4033D2:                             ; CODE XREF: sub_402B60+76E↑j
.text:004033D2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004033D6                 mov     [esp+4Ch+var_29], 0
.text:004033DB                 jnb     loc_403300
.text:004033E1                 mov     eax, [esp+4Ch+var_30]
.text:004033E5                 cmp     byte ptr [eax], 0
.text:004033E8                 jz      loc_403300
.text:004033EE
.text:004033EE loc_4033EE:                             ; CODE XREF: sub_402B60+8AB↓j
.text:004033EE                 inc     [esp+4Ch+var_28]
.text:004033F2                 mov     esi, [esp+4Ch+var_28]
.text:004033F6                 lea     eax, [esi+ebp]
.text:004033F9                 cmp     eax, [esp+4Ch+arg_C]
.text:004033FD                 jnb     loc_403300
.text:00403403                 mov     edi, [esp+4Ch+Str]
.text:00403407                 cmp     byte ptr [eax+edi], 0
.text:0040340B                 jnz     short loc_4033EE
.text:0040340D                 jmp     loc_403300
.text:00403412 ; ---------------------------------------------------------------------------
.text:00403412
.text:00403412 loc_403412:                             ; CODE XREF: sub_402B60+765↑j
.text:00403412                 mov     [esp+4Ch+var_29], 0
.text:00403417                 jmp     loc_403300
.text:0040341C ; ---------------------------------------------------------------------------
.text:0040341C
.text:0040341C loc_40341C:                             ; CODE XREF: sub_402B60+72A↑j
.text:0040341C                 mov     edx, [esp+4Ch+Str]
.text:00403420                 mov     [esp+4Ch+C], edx ; Str
.text:00403423                 call    strlen
.text:00403428                 mov     [esp+4Ch+arg_C], eax
.text:0040342C                 jmp     loc_403290
.text:00403431 ; ---------------------------------------------------------------------------
.text:00403431
.text:00403431 loc_403431:                             ; CODE XREF: sub_402B60+105↑j
.text:00403431                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:00403431                 mov     dl, bl          ; jumptable 00402C65 case 92
.text:00403433                 jmp     loc_402F64
.text:00403438 ; ---------------------------------------------------------------------------
.text:00403438
.text:00403438 loc_403438:                             ; CODE XREF: sub_402B60+105↑j
.text:00403438                                         ; sub_402B60+902↓j
.text:00403438                                         ; DATA XREF: ...
.text:00403438                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402C65 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040343D                 jnz     def_403062      ; jumptable 00402C65 cases 37,43-58,65-90,93,95,97-122
.text:0040343D                                         ; jumptable 00403062 default case, cases 34-38,42-44,46,48-59
.text:00403443                 jmp     loc_402F6B      ; jumptable 00403332 cases 91,92,94,96,124
.text:00403448 ; ---------------------------------------------------------------------------
.text:00403448
.text:00403448 loc_403448:                             ; CODE XREF: sub_402B60+105↑j
.text:00403448                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:00403448                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00402C65 cases 123,125
.text:0040344D                 jz      short loc_403464
.text:0040344F                 cmp     [esp+4Ch+arg_C], 1
.text:00403454
.text:00403454 loc_403454:                             ; CODE XREF: sub_402B60+90C↓j
.text:00403454                 jnz     def_403062      ; jumptable 00402C65 cases 37,43-58,65-90,93,95,97-122
.text:00403454                                         ; jumptable 00403062 default case, cases 34-38,42-44,46,48-59
.text:0040345A
.text:0040345A loc_40345A:                             ; CODE XREF: sub_402B60+105↑j
.text:0040345A                                         ; DATA XREF: sub_402B60:jpt_402C65↑o
.text:0040345A                 test    ebp, ebp        ; jumptable 00402C65 cases 35,126
.text:0040345C                 jnz     def_403062      ; jumptable 00402C65 cases 37,43-58,65-90,93,95,97-122
.text:0040345C                                         ; jumptable 00403062 default case, cases 34-38,42-44,46,48-59
.text:00403462                 jmp     short loc_403438 ; jumptable 00402C65 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403464 ; ---------------------------------------------------------------------------
.text:00403464
.text:00403464 loc_403464:                             ; CODE XREF: sub_402B60+8ED↑j
.text:00403464                 mov     esi, [esp+4Ch+Str]
.text:00403468                 cmp     byte ptr [esi+1], 0
.text:0040346C                 jmp     short loc_403454
.text:0040346E ; ---------------------------------------------------------------------------
.text:0040346E
.text:0040346E loc_40346E:                             ; CODE XREF: sub_402B60:loc_402BFF↑j
.text:0040346E                 test    ebp, ebp
.text:00403470                 jnz     short loc_40347D
.text:00403472                 cmp     [esp+4Ch+arg_10], 1
.text:00403477                 jz      loc_402F6B      ; jumptable 00403332 cases 91,92,94,96,124
.text:0040347D
.text:0040347D loc_40347D:                             ; CODE XREF: sub_402B60+910↑j
.text:0040347D                 mov     esi, [esp+4Ch+var_1C]
.text:00403481                 test    esi, esi
.text:00403483                 jz      short loc_4034B8
.text:00403485                 mov     edi, [esp+4Ch+var_1C]
.text:00403489                 movzx   eax, byte ptr [edi]
.text:0040348C                 test    al, al
.text:0040348E                 jz      short loc_4034B8
.text:00403490
.text:00403490 loc_403490:                             ; CODE XREF: sub_402B60+956↓j
.text:00403490                 mov     ebp, [esp+4Ch+arg_4]
.text:00403494                 cmp     [esp+4Ch+var_34], ebp
.text:00403498                 jnb     short loc_4034A5
.text:0040349A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040349E                 mov     ebx, [esp+4Ch+var_34]
.text:004034A2                 mov     [ebx+ecx], al
.text:004034A5
.text:004034A5 loc_4034A5:                             ; CODE XREF: sub_402B60+938↑j
.text:004034A5                 inc     [esp+4Ch+var_1C]
.text:004034A9                 inc     [esp+4Ch+var_34]
.text:004034AD                 mov     edx, [esp+4Ch+var_1C]
.text:004034B1                 movzx   eax, byte ptr [edx]
.text:004034B4                 test    al, al
.text:004034B6                 jnz     short loc_403490
.text:004034B8
.text:004034B8 loc_4034B8:                             ; CODE XREF: sub_402B60+923↑j
.text:004034B8                                         ; sub_402B60+92E↑j
.text:004034B8                 mov     eax, [esp+4Ch+arg_4]
.text:004034BC                 cmp     [esp+4Ch+var_34], eax
.text:004034C0                 jnb     short loc_4034CE
.text:004034C2                 mov     edi, [esp+4Ch+arg_0]
.text:004034C6                 mov     esi, [esp+4Ch+var_34]
.text:004034CA                 mov     byte ptr [esi+edi], 0
.text:004034CE
.text:004034CE loc_4034CE:                             ; CODE XREF: sub_402B60+960↑j
.text:004034CE                 mov     eax, [esp+4Ch+var_34]
.text:004034D2                 jmp     loc_402F9F
.text:004034D7 ; ---------------------------------------------------------------------------
.text:004034D7
.text:004034D7 loc_4034D7:                             ; CODE XREF: sub_402B60+95↑j
.text:004034D7                 mov     ebx, [esp+4Ch+Str]
.text:004034DB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004034E0                 jmp     loc_402BFF
.text:004034E5 ; ---------------------------------------------------------------------------
.text:004034E5
.text:004034E5 loc_4034E5:                             ; CODE XREF: sub_402B60+3D↑j
.text:004034E5                                         ; DATA XREF: sub_402B60:jpt_402B9D↑o
.text:004034E5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00402B9D case 2
.text:004034E9                 cmp     [esp+4Ch+var_34], edx
.text:004034ED                 jnb     short loc_4034F6
.text:004034EF                 mov     ecx, [esp+4Ch+arg_0]
.text:004034F3                 mov     byte ptr [ecx], 27h ; '''
.text:004034F6
.text:004034F6 loc_4034F6:                             ; CODE XREF: sub_402B60+98D↑j
.text:004034F6                 mov     [esp+4Ch+var_34], 1
.text:004034FE                 mov     [esp+4Ch+var_1C], 402B4Eh
.text:00403506                 jmp     loc_402BE6
.text:0040350B ; ---------------------------------------------------------------------------
.text:0040350B
.text:0040350B loc_40350B:                             ; CODE XREF: sub_402B60+3D↑j
.text:0040350B                                         ; DATA XREF: sub_402B60:jpt_402B9D↑o
.text:0040350B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00402B9D case 4
.text:00403510                 jmp     def_402B9D      ; jumptable 00402B9D default case, cases 0,1
.text:00403515 ; ---------------------------------------------------------------------------
.text:00403515
.text:00403515 loc_403515:                             ; CODE XREF: sub_402B60+3D↑j
.text:00403515                                         ; DATA XREF: sub_402B60:jpt_402B9D↑o
.text:00403515                 mov     [esp+4Ch+C], 402B50h ; jumptable 00402B9D cases 5,6
.text:0040351C                 call    ds:libintl_gettext
.text:00403522                 cmp     eax, 402B50h
.text:00403527                 mov     edi, eax
.text:00403529                 jz      short loc_4035A0
.text:0040352B
.text:0040352B loc_40352B:                             ; CODE XREF: sub_402B60+A45↓j
.text:0040352B                                         ; sub_402B60+A4C↓j
.text:0040352B                 mov     [esp+4Ch+C], 402B4Eh
.text:00403532                 call    ds:libintl_gettext
.text:00403538                 cmp     eax, 402B4Eh
.text:0040353D                 mov     edx, eax
.text:0040353F                 jz      short loc_403592
.text:00403541
.text:00403541 loc_403541:                             ; CODE XREF: sub_402B60+A37↓j
.text:00403541                                         ; sub_402B60+A3E↓j
.text:00403541                 mov     [esp+4Ch+var_1C], edi
.text:00403545                 cmp     byte ptr [edi], 0
.text:00403548                 jz      short loc_403578
.text:0040354A
.text:0040354A loc_40354A:                             ; CODE XREF: sub_402B60+A16↓j
.text:0040354A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040354E                 cmp     [esp+4Ch+var_34], ecx
.text:00403552                 jnb     short loc_403567
.text:00403554                 mov     ebp, [esp+4Ch+var_1C]
.text:00403558                 mov     edi, [esp+4Ch+arg_0]
.text:0040355C                 mov     esi, [esp+4Ch+var_34]
.text:00403560                 movzx   ebx, byte ptr [ebp+0]
.text:00403564                 mov     [esi+edi], bl
.text:00403567
.text:00403567 loc_403567:                             ; CODE XREF: sub_402B60+9F2↑j
.text:00403567                 inc     [esp+4Ch+var_1C]
.text:0040356B                 inc     [esp+4Ch+var_34]
.text:0040356F                 mov     eax, [esp+4Ch+var_1C]
.text:00403573                 cmp     byte ptr [eax], 0
.text:00403576                 jnz     short loc_40354A
.text:00403578
.text:00403578 loc_403578:                             ; CODE XREF: sub_402B60+9E8↑j
.text:00403578                 mov     [esp+4Ch+var_21], 1
.text:0040357D                 mov     [esp+4Ch+var_1C], edx
.text:00403581                 mov     [esp+4Ch+C], edx ; Str
.text:00403584                 call    strlen
.text:00403589                 mov     [esp+4Ch+var_20], eax
.text:0040358D                 jmp     def_402B9D      ; jumptable 00402B9D default case, cases 0,1
.text:00403592 ; ---------------------------------------------------------------------------
.text:00403592
.text:00403592 loc_403592:                             ; CODE XREF: sub_402B60+9DF↑j
.text:00403592                 cmp     [esp+4Ch+arg_10], 6
.text:00403597                 jnz     short loc_403541
.text:00403599                 mov     edx, offset asc_402B4C ; "\"'`"
.text:0040359E                 jmp     short loc_403541
.text:004035A0 ; ---------------------------------------------------------------------------
.text:004035A0
.text:004035A0 loc_4035A0:                             ; CODE XREF: sub_402B60+9C9↑j
.text:004035A0                 cmp     [esp+4Ch+arg_10], 6
.text:004035A5                 jnz     short loc_40352B
.text:004035A7                 mov     edi, offset asc_402B4C ; "\"'`"
.text:004035AC                 jmp     loc_40352B
.text:004035AC sub_402B60      endp
.text:004035AC
.text:004035B1 ; ---------------------------------------------------------------------------
.text:004035B1                 jmp     short loc_4035C0
.text:004035B1 ; ---------------------------------------------------------------------------
.text:004035B3                 align 10h
.text:004035C0
.text:004035C0 loc_4035C0:                             ; CODE XREF: .text:004035B1↑j
.text:004035C0                 sub     esp, 0Ch
.text:004035C3                 mov     [esp+4], ebx
.text:004035C7                 mov     [esp+8], esi
.text:004035CB                 call    _errno
.text:004035D0                 mov     esi, [eax]
.text:004035D2                 mov     dword ptr [esp], 24h ; '$'
.text:004035D9                 call    sub_4043B0
.text:004035DE                 mov     edx, [esp+10h]
.text:004035E2                 mov     ebx, eax
.text:004035E4                 test    edx, edx
.text:004035E6                 jz      short loc_403631
.text:004035E8
.text:004035E8 loc_4035E8:                             ; CODE XREF: .text:00403636↓j
.text:004035E8                 mov     ecx, [edx]
.text:004035EA                 mov     [ebx], ecx
.text:004035EC                 mov     ecx, [edx+4]
.text:004035EF                 mov     [ebx+4], ecx
.text:004035F2                 mov     ecx, [edx+8]
.text:004035F5                 mov     [ebx+8], ecx
.text:004035F8                 mov     ecx, [edx+0Ch]
.text:004035FB                 mov     [ebx+0Ch], ecx
.text:004035FE                 mov     ecx, [edx+10h]
.text:00403601                 mov     [ebx+10h], ecx
.text:00403604                 mov     ecx, [edx+14h]
.text:00403607                 mov     [ebx+14h], ecx
.text:0040360A                 mov     ecx, [edx+18h]
.text:0040360D                 mov     [ebx+18h], ecx
.text:00403610                 mov     ecx, [edx+1Ch]
.text:00403613                 mov     [ebx+1Ch], ecx
.text:00403616                 mov     ecx, [edx+20h]
.text:00403619                 mov     [ebx+20h], ecx
.text:0040361C                 call    _errno
.text:00403621                 mov     [eax], esi
.text:00403623                 mov     esi, [esp+8]
.text:00403627                 mov     eax, ebx
.text:00403629                 mov     ebx, [esp+4]
.text:0040362D                 add     esp, 0Ch
.text:00403630                 retn
.text:00403631 ; ---------------------------------------------------------------------------
.text:00403631
.text:00403631 loc_403631:                             ; CODE XREF: .text:004035E6↑j
.text:00403631                 mov     edx, offset dword_407140
.text:00403636                 jmp     short loc_4035E8
.text:00403636 ; ---------------------------------------------------------------------------
.text:00403638                 align 10h
.text:00403640                 mov     eax, [esp+4]
.text:00403644                 test    eax, eax
.text:00403646                 jz      short loc_403650
.text:00403648
.text:00403648 loc_403648:                             ; CODE XREF: .text:00403655↓j
.text:00403648                 mov     eax, [eax]
.text:0040364A                 retn
.text:0040364A ; ---------------------------------------------------------------------------
.text:0040364B                 align 10h
.text:00403650
.text:00403650 loc_403650:                             ; CODE XREF: .text:00403646↑j
.text:00403650                 mov     eax, offset dword_407140
.text:00403655                 jmp     short loc_403648
.text:00403655 ; ---------------------------------------------------------------------------
.text:00403657                 align 10h
.text:00403660                 mov     edx, [esp+4]
.text:00403664                 test    edx, edx
.text:00403666                 jz      short loc_403670
.text:00403668
.text:00403668 loc_403668:                             ; CODE XREF: .text:00403675↓j
.text:00403668                 mov     ecx, [esp+8]
.text:0040366C                 mov     [edx], ecx
.text:0040366E                 retn
.text:0040366E ; ---------------------------------------------------------------------------
.text:0040366F                 align 10h
.text:00403670
.text:00403670 loc_403670:                             ; CODE XREF: .text:00403666↑j
.text:00403670                 mov     edx, offset dword_407140
.text:00403675                 jmp     short loc_403668
.text:00403675 ; ---------------------------------------------------------------------------
.text:00403677                 align 10h
.text:00403680                 sub     esp, 8
.text:00403683                 mov     eax, [esp+0Ch]
.text:00403687                 movzx   ecx, byte ptr [esp+10h]
.text:0040368C                 mov     [esp], ebx
.text:0040368F                 mov     ebx, [esp+14h]
.text:00403693                 mov     [esp+4], esi
.text:00403697                 mov     dl, cl
.text:00403699                 shr     dl, 5
.text:0040369C                 movzx   edx, dl
.text:0040369F                 shl     edx, 2
.text:004036A2                 test    eax, eax
.text:004036A4                 lea     esi, [edx+eax+4]
.text:004036A8                 jz      short loc_4036D0
.text:004036AA
.text:004036AA loc_4036AA:                             ; CODE XREF: .text:004036D6↓j
.text:004036AA                 mov     edx, [esi]
.text:004036AC                 and     ecx, 1Fh
.text:004036AF                 and     ebx, 1
.text:004036B2                 mov     eax, edx
.text:004036B4                 shr     eax, cl
.text:004036B6                 and     eax, 1
.text:004036B9                 xor     ebx, eax
.text:004036BB                 shl     ebx, cl
.text:004036BD                 xor     edx, ebx
.text:004036BF                 mov     [esi], edx
.text:004036C1                 mov     ebx, [esp]
.text:004036C4                 mov     esi, [esp+4]
.text:004036C8                 add     esp, 8
.text:004036CB                 retn
.text:004036CB ; ---------------------------------------------------------------------------
.text:004036CC                 align 10h
.text:004036D0
.text:004036D0 loc_4036D0:                             ; CODE XREF: .text:004036A8↑j
.text:004036D0                 lea     esi, dword_407144[edx]
.text:004036D6                 jmp     short loc_4036AA
.text:004036D6 ; ---------------------------------------------------------------------------
.text:004036D8                 align 10h
.text:004036E0                 sub     esp, 2Ch
.text:004036E3                 mov     [esp+24h], ebx
.text:004036E7                 mov     ebx, [esp+40h]
.text:004036EB                 mov     [esp+28h], esi
.text:004036EF                 test    ebx, ebx
.text:004036F1                 jz      short loc_403740
.text:004036F3
.text:004036F3 loc_4036F3:                             ; CODE XREF: .text:00403745↓j
.text:004036F3                 call    _errno
.text:004036F8                 mov     esi, [eax]
.text:004036FA                 mov     [esp+14h], ebx
.text:004036FE                 mov     edx, [ebx]
.text:00403700                 mov     ecx, [esp+38h]
.text:00403704                 mov     ebx, [esp+3Ch]
.text:00403708                 mov     [esp+10h], edx
.text:0040370C                 mov     edx, [esp+34h]
.text:00403710                 mov     [esp+0Ch], ebx
.text:00403714                 mov     [esp+8], ecx
.text:00403718                 mov     [esp+4], edx
.text:0040371C                 mov     edx, [esp+30h]
.text:00403720                 mov     [esp], edx
.text:00403723                 call    sub_402B60
.text:00403728                 mov     ebx, eax
.text:0040372A                 call    _errno
.text:0040372F                 mov     [eax], esi
.text:00403731                 mov     esi, [esp+28h]
.text:00403735                 mov     eax, ebx
.text:00403737                 mov     ebx, [esp+24h]
.text:0040373B                 add     esp, 2Ch
.text:0040373E                 retn
.text:0040373E ; ---------------------------------------------------------------------------
.text:0040373F                 align 10h
.text:00403740
.text:00403740 loc_403740:                             ; CODE XREF: .text:004036F1↑j
.text:00403740                 mov     ebx, offset dword_407140
.text:00403745                 jmp     short loc_4036F3
.text:00403745 ; ---------------------------------------------------------------------------
.text:00403747                 align 10h
.text:00403750                 push    ebp
.text:00403751                 push    edi
.text:00403752                 push    esi
.text:00403753                 push    ebx
.text:00403754                 sub     esp, 2Ch
.text:00403757                 mov     ebp, [esp+48h]
.text:0040375B                 call    _errno
.text:00403760                 mov     edx, [eax]
.text:00403762                 test    ebp, ebp
.text:00403764                 mov     ebx, ebp
.text:00403766                 mov     [esp+28h], edx
.text:0040376A                 jz      loc_403820
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: .text:00403825↓j
.text:00403770                 call    _errno
.text:00403775                 mov     edi, [eax]
.text:00403777                 mov     esi, ebp
.text:00403779                 mov     [esp+14h], ebx
.text:0040377D                 mov     ecx, [ebx]
.text:0040377F                 mov     dword ptr [esp], 0
.text:00403786                 mov     edx, [esp+44h]
.text:0040378A                 mov     dword ptr [esp+4], 0
.text:00403792                 mov     eax, [esp+40h]
.text:00403796                 mov     [esp+10h], ecx
.text:0040379A                 mov     [esp+0Ch], edx
.text:0040379E                 mov     [esp+8], eax
.text:004037A2                 call    sub_402B60
.text:004037A7                 mov     ebx, eax
.text:004037A9                 call    _errno
.text:004037AE                 mov     [eax], edi
.text:004037B0                 lea     edi, [ebx+1]
.text:004037B3                 mov     [esp], edi
.text:004037B6                 call    sub_4043B0
.text:004037BB                 mov     [esp+24h], eax
.text:004037BF                 test    ebp, ebp
.text:004037C1                 jz      short loc_403812
.text:004037C3
.text:004037C3 loc_4037C3:                             ; CODE XREF: .text:00403817↓j
.text:004037C3                 call    _errno
.text:004037C8                 mov     ebp, [eax]
.text:004037CA                 mov     [esp+14h], esi
.text:004037CE                 mov     ecx, [esi]
.text:004037D0                 mov     [esp+4], edi
.text:004037D4                 mov     edx, [esp+44h]
.text:004037D8                 mov     esi, [esp+24h]
.text:004037DC                 mov     [esp+10h], ecx
.text:004037E0                 mov     eax, [esp+40h]
.text:004037E4                 mov     [esp+0Ch], edx
.text:004037E8                 mov     [esp], esi
.text:004037EB                 mov     [esp+8], eax
.text:004037EF                 call    sub_402B60
.text:004037F4                 call    _errno
.text:004037F9                 mov     [eax], ebp
.text:004037FB                 call    _errno
.text:00403800                 mov     ebx, [esp+28h]
.text:00403804                 mov     [eax], ebx
.text:00403806                 mov     eax, [esp+24h]
.text:0040380A                 add     esp, 2Ch
.text:0040380D                 pop     ebx
.text:0040380E                 pop     esi
.text:0040380F                 pop     edi
.text:00403810                 pop     ebp
.text:00403811                 retn
.text:00403812 ; ---------------------------------------------------------------------------
.text:00403812
.text:00403812 loc_403812:                             ; CODE XREF: .text:004037C1↑j
.text:00403812                 mov     esi, offset dword_407140
.text:00403817                 jmp     short loc_4037C3
.text:00403817 ; ---------------------------------------------------------------------------
.text:00403819                 align 10h
.text:00403820
.text:00403820 loc_403820:                             ; CODE XREF: .text:0040376A↑j
.text:00403820                 mov     ebx, offset dword_407140
.text:00403825                 jmp     loc_403770
.text:00403825 ; ---------------------------------------------------------------------------
.text:0040382A                 align 10h
.text:00403830                 sub     esp, 1Ch
.text:00403833                 mov     edx, [esp+24h]
.text:00403837                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:0040383F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403847                 mov     [esp+4], edx
.text:0040384B                 mov     edx, [esp+20h]
.text:0040384F                 mov     [esp], edx
.text:00403852                 call    sub_403CA0
.text:00403857                 add     esp, 1Ch
.text:0040385A                 retn
.text:0040385A ; ---------------------------------------------------------------------------
.text:0040385B                 align 10h
.text:00403860                 sub     esp, 1Ch
.text:00403863                 mov     edx, [esp+20h]
.text:00403867                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:0040386F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403877                 mov     [esp+4], edx
.text:0040387B                 mov     dword ptr [esp], 0
.text:00403882                 call    sub_403CA0
.text:00403887                 add     esp, 1Ch
.text:0040388A                 retn
.text:0040388A ; ---------------------------------------------------------------------------
.text:0040388B                 align 10h
.text:00403890
.text:00403890 ; =============== S U B R O U T I N E =======================================
.text:00403890
.text:00403890
.text:00403890 ; int __cdecl sub_403890(int, int, char *)
.text:00403890 sub_403890      proc near               ; CODE XREF: .text:0040271A↑p
.text:00403890                                         ; sub_402730+1A↑p
.text:00403890
.text:00403890 var_BC          = dword ptr -0BCh
.text:00403890 var_B8          = dword ptr -0B8h
.text:00403890 var_B4          = dword ptr -0B4h
.text:00403890 var_B0          = dword ptr -0B0h
.text:00403890 var_AC          = dword ptr -0ACh
.text:00403890 var_A8          = dword ptr -0A8h
.text:00403890 var_A4          = dword ptr -0A4h
.text:00403890 var_A0          = dword ptr -0A0h
.text:00403890 var_9C          = dword ptr -9Ch
.text:00403890 var_98          = dword ptr -98h
.text:00403890 var_94          = dword ptr -94h
.text:00403890 var_90          = dword ptr -90h
.text:00403890 var_8C          = dword ptr -8Ch
.text:00403890 var_7C          = dword ptr -7Ch
.text:00403890 var_78          = dword ptr -78h
.text:00403890 var_74          = dword ptr -74h
.text:00403890 var_70          = dword ptr -70h
.text:00403890 var_6C          = dword ptr -6Ch
.text:00403890 var_68          = dword ptr -68h
.text:00403890 var_64          = dword ptr -64h
.text:00403890 var_60          = dword ptr -60h
.text:00403890 var_5C          = dword ptr -5Ch
.text:00403890 var_4C          = dword ptr -4Ch
.text:00403890 var_48          = dword ptr -48h
.text:00403890 var_44          = dword ptr -44h
.text:00403890 var_40          = dword ptr -40h
.text:00403890 var_3C          = dword ptr -3Ch
.text:00403890 var_38          = dword ptr -38h
.text:00403890 var_34          = dword ptr -34h
.text:00403890 var_30          = dword ptr -30h
.text:00403890 var_2C          = dword ptr -2Ch
.text:00403890 arg_0           = dword ptr  4
.text:00403890 arg_4           = dword ptr  8
.text:00403890 arg_8           = dword ptr  0Ch
.text:00403890
.text:00403890                 push    ebp
.text:00403891                 xor     eax, eax
.text:00403893                 mov     ecx, 8
.text:00403898                 push    edi
.text:00403899                 push    esi
.text:0040389A                 push    ebx
.text:0040389B                 sub     esp, 0ACh
.text:004038A1                 mov     ebp, [esp+0BCh+arg_4]
.text:004038A8                 cld
.text:004038A9                 lea     edi, [esp+0BCh+var_A8]
.text:004038AD                 mov     [esp+0BCh+var_AC], ebp
.text:004038B1                 rep stosd
.text:004038B3                 mov     eax, [esp+0BCh+var_8C]
.text:004038B7                 mov     edi, [esp+0BCh+var_AC]
.text:004038BB                 mov     esi, [esp+0BCh+var_A8]
.text:004038BF                 mov     [esp+0BCh+var_5C], eax
.text:004038C3                 mov     ebp, [esp+0BCh+var_A4]
.text:004038C7                 mov     eax, [esp+0BCh+var_AC]
.text:004038CB                 mov     [esp+0BCh+var_7C], edi
.text:004038CF                 mov     ecx, [esp+0BCh+var_94]
.text:004038D3                 mov     edi, [esp+0BCh+var_A0]
.text:004038D7                 mov     [esp+0BCh+var_78], esi
.text:004038DB                 mov     edx, [esp+0BCh+var_90]
.text:004038DF                 mov     esi, [esp+0BCh+var_9C]
.text:004038E3                 mov     [esp+0BCh+var_4C], eax
.text:004038E7                 mov     ebx, [esp+0BCh+var_98]
.text:004038EB                 mov     eax, [esp+0BCh+var_A8]
.text:004038EF                 mov     [esp+0BCh+var_74], ebp
.text:004038F3                 mov     [esp+0BCh+var_70], edi
.text:004038F7                 mov     [esp+0BCh+var_6C], esi
.text:004038FB                 mov     [esp+0BCh+var_68], ebx
.text:004038FF                 mov     [esp+0BCh+var_64], ecx
.text:00403903                 mov     [esp+0BCh+var_60], edx
.text:00403907                 mov     [esp+0BCh+var_48], eax
.text:0040390B                 mov     [esp+0BCh+var_44], ebp
.text:0040390F                 mov     [esp+0BCh+var_40], edi
.text:00403913                 mov     [esp+0BCh+var_3C], esi
.text:0040391A                 mov     [esp+0BCh+var_38], ebx
.text:00403921                 mov     ebx, [esp+0BCh+var_8C]
.text:00403925                 mov     [esp+0BCh+var_30], edx
.text:0040392C                 mov     edx, [esp+0BCh+arg_8]
.text:00403933                 mov     [esp+0BCh+var_34], ecx
.text:0040393A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040393E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00403942                 mov     edx, [esp+0BCh+arg_0]
.text:00403949                 mov     [esp+0BCh+var_2C], ebx
.text:00403950                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00403954                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040395C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040395F                 call    sub_403CA0
.text:00403964                 add     esp, 0ACh
.text:0040396A                 pop     ebx
.text:0040396B                 pop     esi
.text:0040396C                 pop     edi
.text:0040396D                 pop     ebp
.text:0040396E                 retn
.text:0040396E sub_403890      endp
.text:0040396E
.text:0040396E ; ---------------------------------------------------------------------------
.text:0040396F                 align 10h
.text:00403970                 push    ebp
.text:00403971                 xor     eax, eax
.text:00403973                 mov     ecx, 8
.text:00403978                 push    edi
.text:00403979                 push    esi
.text:0040397A                 push    ebx
.text:0040397B                 sub     esp, 0ACh
.text:00403981                 mov     edx, [esp+0C4h]
.text:00403988                 cld
.text:00403989                 lea     edi, [esp+14h]
.text:0040398D                 mov     [esp+10h], edx
.text:00403991                 rep stosd
.text:00403993                 mov     eax, [esp+30h]
.text:00403997                 mov     ebp, [esp+10h]
.text:0040399B                 mov     edi, [esp+14h]
.text:0040399F                 mov     [esp+60h], eax
.text:004039A3                 mov     esi, [esp+20h]
.text:004039A7                 mov     eax, [esp+10h]
.text:004039AB                 mov     [esp+40h], ebp
.text:004039AF                 mov     ecx, [esp+28h]
.text:004039B3                 mov     ebp, [esp+18h]
.text:004039B7                 mov     [esp+44h], edi
.text:004039BB                 mov     edx, [esp+2Ch]
.text:004039BF                 mov     edi, [esp+1Ch]
.text:004039C3                 mov     [esp+70h], eax
.text:004039C7                 mov     ebx, [esp+24h]
.text:004039CB                 mov     eax, [esp+14h]
.text:004039CF                 mov     [esp+48h], ebp
.text:004039D3                 mov     [esp+4Ch], edi
.text:004039D7                 mov     [esp+50h], esi
.text:004039DB                 mov     [esp+54h], ebx
.text:004039DF                 mov     [esp+58h], ecx
.text:004039E3                 mov     [esp+5Ch], edx
.text:004039E7                 mov     [esp+74h], eax
.text:004039EB                 mov     [esp+78h], ebp
.text:004039EF                 mov     [esp+7Ch], edi
.text:004039F3                 mov     [esp+80h], esi
.text:004039FA                 mov     [esp+84h], ebx
.text:00403A01                 mov     esi, [esp+30h]
.text:00403A05                 lea     ebx, [esp+70h]
.text:00403A09                 mov     [esp+8Ch], edx
.text:00403A10                 mov     edx, [esp+0C8h]
.text:00403A17                 mov     [esp+88h], ecx
.text:00403A1E                 mov     ecx, [esp+0CCh]
.text:00403A25                 mov     [esp+4], edx
.text:00403A29                 mov     edx, [esp+0C0h]
.text:00403A30                 mov     [esp+90h], esi
.text:00403A37                 mov     [esp+0Ch], ebx
.text:00403A3B                 mov     [esp+8], ecx
.text:00403A3F                 mov     [esp], edx
.text:00403A42                 call    sub_403CA0
.text:00403A47                 add     esp, 0ACh
.text:00403A4D                 pop     ebx
.text:00403A4E                 pop     esi
.text:00403A4F                 pop     edi
.text:00403A50                 pop     ebp
.text:00403A51                 retn
.text:00403A51 ; ---------------------------------------------------------------------------
.text:00403A52                 align 10h
.text:00403A60                 push    ebp
.text:00403A61                 xor     eax, eax
.text:00403A63                 mov     ecx, 8
.text:00403A68                 push    edi
.text:00403A69                 push    esi
.text:00403A6A                 push    ebx
.text:00403A6B                 sub     esp, 0ACh
.text:00403A71                 mov     edi, [esp+0C0h]
.text:00403A78                 cld
.text:00403A79                 mov     [esp+10h], edi
.text:00403A7D                 lea     edi, [esp+14h]
.text:00403A81                 rep stosd
.text:00403A83                 mov     eax, [esp+30h]
.text:00403A87                 mov     esi, [esp+10h]
.text:00403A8B                 mov     ebx, [esp+14h]
.text:00403A8F                 mov     [esp+60h], eax
.text:00403A93                 mov     ebp, [esp+18h]
.text:00403A97                 mov     eax, [esp+10h]
.text:00403A9B                 mov     [esp+40h], esi
.text:00403A9F                 mov     edi, [esp+1Ch]
.text:00403AA3                 mov     esi, [esp+20h]
.text:00403AA7                 mov     [esp+44h], ebx
.text:00403AAB                 mov     ecx, [esp+28h]
.text:00403AAF                 mov     edx, [esp+2Ch]
.text:00403AB3                 mov     [esp+70h], eax
.text:00403AB7                 mov     ebx, [esp+24h]
.text:00403ABB                 mov     eax, [esp+14h]
.text:00403ABF                 mov     [esp+48h], ebp
.text:00403AC3                 mov     [esp+4Ch], edi
.text:00403AC7                 mov     [esp+50h], esi
.text:00403ACB                 mov     [esp+54h], ebx
.text:00403ACF                 mov     [esp+58h], ecx
.text:00403AD3                 mov     [esp+5Ch], edx
.text:00403AD7                 mov     [esp+74h], eax
.text:00403ADB                 mov     [esp+78h], ebp
.text:00403ADF                 mov     [esp+7Ch], edi
.text:00403AE3                 mov     [esp+80h], esi
.text:00403AEA                 mov     [esp+84h], ebx
.text:00403AF1                 mov     [esp+8Ch], edx
.text:00403AF8                 lea     edx, [esp+70h]
.text:00403AFC                 mov     [esp+88h], ecx
.text:00403B03                 mov     ecx, [esp+30h]
.text:00403B07                 mov     [esp+0Ch], edx
.text:00403B0B                 mov     edx, [esp+0C4h]
.text:00403B12                 mov     [esp+90h], ecx
.text:00403B19                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403B21                 mov     [esp+4], edx
.text:00403B25                 mov     dword ptr [esp], 0
.text:00403B2C                 call    sub_403CA0
.text:00403B31                 add     esp, 0ACh
.text:00403B37                 pop     ebx
.text:00403B38                 pop     esi
.text:00403B39                 pop     edi
.text:00403B3A                 pop     ebp
.text:00403B3B                 retn
.text:00403B3B ; ---------------------------------------------------------------------------
.text:00403B3C                 align 10h
.text:00403B40                 push    edi
.text:00403B41                 push    esi
.text:00403B42                 push    ebx
.text:00403B43                 sub     esp, 40h
.text:00403B46                 mov     edx, ds:dword_40714C
.text:00403B4C                 mov     ebx, ds:dword_407140
.text:00403B52                 mov     esi, ds:dword_407148
.text:00403B58                 mov     edi, ds:dword_407144
.text:00403B5E                 mov     [esp+1Ch], edx
.text:00403B62                 mov     ecx, ds:dword_407150
.text:00403B68                 mov     edx, ds:dword_407160
.text:00403B6E                 mov     [esp+10h], ebx
.text:00403B72                 mov     ebx, ds:dword_407154
.text:00403B78                 mov     [esp+30h], edx
.text:00403B7C                 movzx   edx, byte ptr [esp+54h]
.text:00403B81                 mov     [esp+18h], esi
.text:00403B85                 mov     esi, ds:dword_40715C
.text:00403B8B                 mov     [esp+14h], edi
.text:00403B8F                 mov     edi, ds:dword_407158
.text:00403B95                 mov     [esp+20h], ecx
.text:00403B99                 mov     cl, dl
.text:00403B9B                 shr     cl, 5
.text:00403B9E                 mov     [esp+24h], ebx
.text:00403BA2                 movzx   ebx, cl
.text:00403BA5                 mov     [esp+2Ch], esi
.text:00403BA9                 lea     esi, [esp+10h]
.text:00403BAD                 mov     [esp+28h], edi
.text:00403BB1                 lea     edi, [esi+ebx*4]
.text:00403BB4                 mov     ebx, edx
.text:00403BB6                 mov     edx, [edi+4]
.text:00403BB9                 and     ebx, 1Fh
.text:00403BBC                 mov     cl, bl
.text:00403BBE                 mov     eax, edx
.text:00403BC0                 shr     eax, cl
.text:00403BC2                 and     eax, 1
.text:00403BC5                 xor     eax, 1
.text:00403BC8                 shl     eax, cl
.text:00403BCA                 xor     edx, eax
.text:00403BCC                 mov     [edi+4], edx
.text:00403BCF                 mov     edx, [esp+50h]
.text:00403BD3                 mov     [esp+0Ch], esi
.text:00403BD7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403BDF                 mov     [esp+4], edx
.text:00403BE3                 mov     dword ptr [esp], 0
.text:00403BEA                 call    sub_403CA0
.text:00403BEF                 add     esp, 40h
.text:00403BF2                 pop     ebx
.text:00403BF3                 pop     esi
.text:00403BF4                 pop     edi
.text:00403BF5                 retn
.text:00403BF5 ; ---------------------------------------------------------------------------
.text:00403BF6                 align 10h
.text:00403C00
.text:00403C00 ; =============== S U B R O U T I N E =======================================
.text:00403C00
.text:00403C00
.text:00403C00 ; int __cdecl sub_403C00(char *)
.text:00403C00 sub_403C00      proc near               ; CODE XREF: sub_4029F0+64↑p
.text:00403C00
.text:00403C00 var_4C          = dword ptr -4Ch
.text:00403C00 var_48          = dword ptr -48h
.text:00403C00 var_44          = dword ptr -44h
.text:00403C00 var_40          = dword ptr -40h
.text:00403C00 var_3C          = dword ptr -3Ch
.text:00403C00 var_38          = dword ptr -38h
.text:00403C00 var_34          = dword ptr -34h
.text:00403C00 var_30          = dword ptr -30h
.text:00403C00 var_2C          = dword ptr -2Ch
.text:00403C00 var_28          = dword ptr -28h
.text:00403C00 var_24          = dword ptr -24h
.text:00403C00 var_20          = dword ptr -20h
.text:00403C00 var_1C          = dword ptr -1Ch
.text:00403C00 arg_0           = dword ptr  4
.text:00403C00
.text:00403C00                 sub     esp, 4Ch
.text:00403C03                 mov     ecx, ds:dword_407140
.text:00403C09                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00403C11                 mov     edx, ds:dword_407144
.text:00403C17                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00403C1E                 mov     [esp+4Ch+var_3C], ecx
.text:00403C22                 mov     ecx, ds:dword_40714C
.text:00403C28                 mov     [esp+4Ch+var_38], edx
.text:00403C2C                 mov     edx, ds:dword_407148
.text:00403C32                 mov     [esp+4Ch+var_30], ecx
.text:00403C36                 mov     ecx, ds:dword_407150
.text:00403C3C                 mov     eax, edx
.text:00403C3E                 shr     eax, 1Ah
.text:00403C41                 and     eax, 1
.text:00403C44                 xor     eax, 1
.text:00403C47                 mov     [esp+4Ch+var_2C], ecx
.text:00403C4B                 shl     eax, 1Ah
.text:00403C4E                 mov     ecx, ds:dword_407154
.text:00403C54                 xor     edx, eax
.text:00403C56                 mov     [esp+4Ch+var_34], edx
.text:00403C5A                 mov     edx, [esp+4Ch+arg_0]
.text:00403C5E                 mov     [esp+4Ch+var_28], ecx
.text:00403C62                 mov     ecx, ds:dword_407158
.text:00403C68                 mov     [esp+4Ch+var_48], edx ; char *
.text:00403C6C                 mov     [esp+4Ch+var_24], ecx
.text:00403C70                 mov     ecx, ds:dword_40715C
.text:00403C76                 mov     [esp+4Ch+var_20], ecx
.text:00403C7A                 mov     ecx, ds:dword_407160
.text:00403C80                 mov     [esp+4Ch+var_1C], ecx
.text:00403C84                 lea     ecx, [esp+4Ch+var_3C]
.text:00403C88                 mov     [esp+4Ch+var_40], ecx ; int
.text:00403C8C                 call    sub_403CA0
.text:00403C91                 add     esp, 4Ch
.text:00403C94                 retn
.text:00403C94 sub_403C00      endp
.text:00403C94
.text:00403C94 ; ---------------------------------------------------------------------------
.text:00403C95                 align 10h
.text:00403CA0
.text:00403CA0 ; =============== S U B R O U T I N E =======================================
.text:00403CA0
.text:00403CA0
.text:00403CA0 ; int __cdecl sub_403CA0(int, char *, int, int)
.text:00403CA0 sub_403CA0      proc near               ; CODE XREF: .text:00403852↑p
.text:00403CA0                                         ; .text:00403882↑p ...
.text:00403CA0
.text:00403CA0 Block           = dword ptr -2Ch
.text:00403CA0 var_28          = dword ptr -28h
.text:00403CA0 Str             = dword ptr -24h
.text:00403CA0 var_20          = dword ptr -20h
.text:00403CA0 var_1C          = dword ptr -1Ch
.text:00403CA0 var_18          = dword ptr -18h
.text:00403CA0 var_14          = dword ptr -14h
.text:00403CA0 arg_0           = dword ptr  4
.text:00403CA0 arg_4           = dword ptr  8
.text:00403CA0 arg_8           = dword ptr  0Ch
.text:00403CA0 arg_C           = dword ptr  10h
.text:00403CA0
.text:00403CA0                 push    ebp
.text:00403CA1                 push    edi
.text:00403CA2                 push    esi
.text:00403CA3                 push    ebx
.text:00403CA4                 sub     esp, 1Ch
.text:00403CA7                 call    _errno
.text:00403CAC                 mov     edx, [eax]
.text:00403CAE                 mov     eax, [esp+2Ch+arg_0]
.text:00403CB2                 mov     [esp+2Ch+var_14], edx
.text:00403CB6                 test    eax, eax
.text:00403CB8                 js      loc_403E5A
.text:00403CBE                 mov     eax, [esp+2Ch+arg_0]
.text:00403CC2                 cmp     dword_406020, eax
.text:00403CC8                 ja      short loc_403D40
.text:00403CCA                 mov     esi, eax
.text:00403CCC                 inc     esi
.text:00403CCD                 cmp     esi, 1FFFFFFFh
.text:00403CD3                 ja      loc_403E5F
.text:00403CD9                 mov     ebx, off_40602C
.text:00403CDF                 cmp     ebx, offset dword_406024
.text:00403CE5                 jz      loc_403E31
.text:00403CEB
.text:00403CEB loc_403CEB:                             ; CODE XREF: sub_403CA0+1B5↓j
.text:00403CEB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00403CEE                 lea     ecx, ds:0[esi*8]
.text:00403CF5                 mov     ebp, esi
.text:00403CF7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00403CFB                 call    sub_404440
.text:00403D00                 mov     off_40602C, eax
.text:00403D05                 mov     ebx, dword_406020
.text:00403D0B                 sub     ebp, ebx
.text:00403D0D                 lea     edi, [eax+ebx*8]
.text:00403D10                 lea     eax, ds:0[ebp*8]
.text:00403D17                 cmp     eax, 7
.text:00403D1A                 jbe     short loc_403D30
.text:00403D1C                 test    edi, 4
.text:00403D22                 jz      short loc_403D30
.text:00403D24                 mov     dword ptr [edi], 0
.text:00403D2A                 sub     eax, 4
.text:00403D2D                 add     edi, 4
.text:00403D30
.text:00403D30 loc_403D30:                             ; CODE XREF: sub_403CA0+7A↑j
.text:00403D30                                         ; sub_403CA0+82↑j
.text:00403D30                 cld
.text:00403D31                 mov     ecx, eax
.text:00403D33                 shr     ecx, 2
.text:00403D36                 xor     eax, eax
.text:00403D38                 rep stosd
.text:00403D3A                 mov     dword_406020, esi
.text:00403D40
.text:00403D40 loc_403D40:                             ; CODE XREF: sub_403CA0+28↑j
.text:00403D40                 mov     esi, off_40602C
.text:00403D46                 mov     eax, [esp+2Ch+arg_0]
.text:00403D4A                 mov     ebp, [esi+eax*8]
.text:00403D4D                 mov     edi, [esi+eax*8+4]
.text:00403D51                 mov     esi, [esp+2Ch+arg_C]
.text:00403D55                 test    esi, esi
.text:00403D57                 jz      loc_403E27
.text:00403D5D
.text:00403D5D loc_403D5D:                             ; CODE XREF: sub_403CA0+18C↓j
.text:00403D5D                 call    _errno
.text:00403D62                 mov     ebx, [eax]
.text:00403D64                 mov     [esp+2Ch+var_18], esi ; int
.text:00403D68                 mov     ecx, [esi]
.text:00403D6A                 mov     [esp+2Ch+Block], edi ; int
.text:00403D6D                 mov     edx, [esp+2Ch+arg_8]
.text:00403D71                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403D75                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403D79                 mov     ecx, [esp+2Ch+arg_4]
.text:00403D7D                 mov     [esp+2Ch+var_20], edx ; int
.text:00403D81                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403D85                 call    sub_402B60
.text:00403D8A                 mov     esi, eax
.text:00403D8C                 call    _errno
.text:00403D91                 mov     [eax], ebx
.text:00403D93                 cmp     ebp, esi
.text:00403D95                 ja      short loc_403E0B
.text:00403D97                 lea     ebp, [esi+1]
.text:00403D9A                 mov     ebx, off_40602C
.text:00403DA0                 cmp     edi, offset unk_407040
.text:00403DA6                 mov     esi, [esp+2Ch+arg_0]
.text:00403DAA                 mov     [ebx+esi*8], ebp
.text:00403DAD                 jz      short loc_403DBD
.text:00403DAF                 mov     [esp+2Ch+Block], edi ; Block
.text:00403DB2                 call    free
.text:00403DB7                 mov     ebx, off_40602C
.text:00403DBD
.text:00403DBD loc_403DBD:                             ; CODE XREF: sub_403CA0+10D↑j
.text:00403DBD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00403DC0                 call    sub_4043B0
.text:00403DC5                 mov     esi, [esp+2Ch+arg_C]
.text:00403DC9                 mov     edi, eax
.text:00403DCB                 mov     eax, [esp+2Ch+arg_0]
.text:00403DCF                 test    esi, esi
.text:00403DD1                 mov     [ebx+eax*8+4], edi
.text:00403DD5                 jz      short loc_403E20
.text:00403DD7
.text:00403DD7 loc_403DD7:                             ; CODE XREF: sub_403CA0+185↓j
.text:00403DD7                 call    _errno
.text:00403DDC                 mov     ebx, [eax]
.text:00403DDE                 mov     [esp+2Ch+var_18], esi ; int
.text:00403DE2                 mov     ecx, [esi]
.text:00403DE4                 mov     [esp+2Ch+Block], edi ; int
.text:00403DE7                 mov     edx, [esp+2Ch+arg_8]
.text:00403DEB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403DEF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403DF3                 mov     ecx, [esp+2Ch+arg_4]
.text:00403DF7                 mov     [esp+2Ch+var_20], edx ; int
.text:00403DFB                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403DFF                 call    sub_402B60
.text:00403E04                 call    _errno
.text:00403E09                 mov     [eax], ebx
.text:00403E0B
.text:00403E0B loc_403E0B:                             ; CODE XREF: sub_403CA0+F5↑j
.text:00403E0B                 call    _errno
.text:00403E10                 mov     ebp, [esp+2Ch+var_14]
.text:00403E14                 mov     [eax], ebp
.text:00403E16                 add     esp, 1Ch
.text:00403E19                 mov     eax, edi
.text:00403E1B                 pop     ebx
.text:00403E1C                 pop     esi
.text:00403E1D                 pop     edi
.text:00403E1E                 pop     ebp
.text:00403E1F                 retn
.text:00403E20 ; ---------------------------------------------------------------------------
.text:00403E20
.text:00403E20 loc_403E20:                             ; CODE XREF: sub_403CA0+135↑j
.text:00403E20                 mov     esi, offset dword_407140
.text:00403E25                 jmp     short loc_403DD7
.text:00403E27 ; ---------------------------------------------------------------------------
.text:00403E27
.text:00403E27 loc_403E27:                             ; CODE XREF: sub_403CA0+B7↑j
.text:00403E27                 mov     esi, offset dword_407140
.text:00403E2C                 jmp     loc_403D5D
.text:00403E31 ; ---------------------------------------------------------------------------
.text:00403E31
.text:00403E31 loc_403E31:                             ; CODE XREF: sub_403CA0+45↑j
.text:00403E31                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00403E38                 call    sub_4043B0
.text:00403E3D                 mov     off_40602C, eax
.text:00403E42                 mov     edi, dword_406024
.text:00403E48                 mov     ebx, eax
.text:00403E4A                 mov     ecx, off_406028
.text:00403E50                 mov     [eax], edi
.text:00403E52                 mov     [eax+4], ecx
.text:00403E55                 jmp     loc_403CEB
.text:00403E5A ; ---------------------------------------------------------------------------
.text:00403E5A
.text:00403E5A loc_403E5A:                             ; CODE XREF: sub_403CA0+18↑j
.text:00403E5A                 call    abort
.text:00403E5F ; ---------------------------------------------------------------------------
.text:00403E5F
.text:00403E5F loc_403E5F:                             ; CODE XREF: sub_403CA0+33↑j
.text:00403E5F                 call    sub_404660
.text:00403E5F sub_403CA0      endp
.text:00403E5F
.text:00403E5F ; ---------------------------------------------------------------------------
.text:00403E64                 align 10h
.text:00403E70 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403E70                                         ; DATA XREF: .data:Buffer↓o
.text:00403EA2 ; const char Format[12]
.text:00403EA2 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404160+50↓o
.text:00403EAE aWrittenByS     db 'Written by %s.',0Ah,0
.text:00403EBE                 db 12h dup(90h)
.text:00403ED0
.text:00403ED0 ; =============== S U B R O U T I N E =======================================
.text:00403ED0
.text:00403ED0
.text:00403ED0 sub_403ED0      proc near               ; DATA XREF: sub_404160+100↓o
.text:00403ED0                 push    esp
.text:00403ED1                 push    69207369h
.text:00403ED6                 jnb     short loc_403EF8
.text:00403ED8                 db      66h
.text:00403ED8                 jb      short near ptr 3F40h
.text:00403EDB                 and     gs:[ebx+6Fh], dh
.text:00403EDF                 db      66h
.text:00403EDF                 jz      short near ptr 3F59h
.text:00403EE2                 popa
.text:00403EE3                 jb      short loc_403F4A
.text:00403EE5                 cmp     esp, [eax]
.text:00403EE7                 jnb     short near ptr loc_403F4C+2
.text:00403EE9                 and     gs:[eax+ebp*2+65h], dh
.text:00403EEE                 and     [ebx+6Fh], dh
.text:00403EF1                 jnz     short loc_403F65
.text:00403EF3                 arpl    [ebp+20h], sp
.text:00403EF6                 outsw
.text:00403EF8
.text:00403EF8 loc_403EF8:                             ; CODE XREF: sub_403ED0+6↑j
.text:00403EF8                 jb      short loc_403F1A
.text:00403EFA                 arpl    [edi+70h], bp
.text:00403EFD                 jns     short loc_403F68
.text:00403EFF                 outsb
.text:00403F00                 and     [bp+di+6Fh], ah
.text:00403F04                 outsb
.text:00403F05                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:00403F0E                 and     [eax+ebp*2+65h], dl
.text:00403F12                 jb      short near ptr loc_403F78+1
.text:00403F14                 and     [ecx+73h], ch
.text:00403F17                 and     [esi+4Fh], cl
.text:00403F1A
.text:00403F1A loc_403F1A:                             ; CODE XREF: sub_403ED0:loc_403EF8↑j
.text:00403F1A                 or      dh, [edi+61h]
.text:00403F1D                 jb      short loc_403F91
.text:00403F1F                 popa
.text:00403F20                 outsb
.text:00403F21                 jz      short loc_403F9C
.text:00403F23                 cmp     esp, [eax]
.text:00403F25                 outsb
.text:00403F26                 outsd
.text:00403F27                 jz      short loc_403F49
.text:00403F29                 db      65h
.text:00403F29                 jbe     short loc_403F91
.text:00403F2C                 outsb
.text:00403F2D                 and     [esi+6Fh], ah
.text:00403F30                 jb      short near ptr loc_403F50+2
.text:00403F32                 dec     ebp
.text:00403F33                 inc     ebp
.text:00403F34                 push    edx
.text:00403F35                 inc     ebx
.text:00403F36                 dec     eax
.text:00403F37                 inc     ecx
.text:00403F38                 dec     esi
.text:00403F39                 push    esp
.text:00403F3A                 inc     ecx
.text:00403F3B                 inc     edx
.text:00403F3C                 dec     ecx
.text:00403F3D                 dec     esp
.text:00403F3E                 dec     ecx
.text:00403F3F                 push    esp
.text:00403F40                 pop     ecx
.text:00403F41                 and     [edi+72h], ch
.text:00403F44                 and     [esi+49h], al
.text:00403F47                 push    esp
.text:00403F48                 dec     esi
.text:00403F49
.text:00403F49 loc_403F49:                             ; CODE XREF: sub_403ED0+57↑j
.text:00403F49                 inc     ebp
.text:00403F4A
.text:00403F4A loc_403F4A:                             ; CODE XREF: sub_403ED0+13↑j
.text:00403F4A                 push    ebx
.text:00403F4B                 push    ebx
.text:00403F4C
.text:00403F4C loc_403F4C:                             ; CODE XREF: sub_403ED0+17↑j
.text:00403F4C                 and     [esi+4Fh], al
.text:00403F4F                 push    edx
.text:00403F50
.text:00403F50 loc_403F50:                             ; CODE XREF: sub_403ED0+60↑j
.text:00403F50                 and     [ecx+20h], al
.text:00403F53                 push    eax
.text:00403F54                 inc     ecx
.text:00403F55                 push    edx
.text:00403F56                 push    esp
.text:00403F57                 dec     ecx
.text:00403F58                 inc     ebx
.text:00403F59                 push    ebp
.text:00403F5A                 dec     esp
.text:00403F5B                 inc     ecx
.text:00403F5C                 push    edx
.text:00403F5D                 and     [eax+55h], dl
.text:00403F60                 push    edx
.text:00403F61                 push    eax
.text:00403F62                 dec     edi
.text:00403F63                 push    ebx
.text:00403F64                 inc     ebp
.text:00403F65
.text:00403F65 loc_403F65:                             ; CODE XREF: sub_403ED0+21↑j
.text:00403F65                 or      al, cs:[eax]
.text:00403F68
.text:00403F68 loc_403F68:                             ; CODE XREF: sub_403ED0+2D↑j
.text:00403F68                                         ; DATA XREF: sub_404160:loc_4042A1↓o
.text:00403F68                 push    edi
.text:00403F69                 jb      short near ptr loc_403FD3+1
.text:00403F6B                 jz      short near ptr loc_403FE0+1
.text:00403F6D                 outs    dx, byte ptr gs:[esi]
.text:00403F6F                 and     [edx+79h], ah
.text:00403F72                 and     ds:6E612073h, ah
.text:00403F78
.text:00403F78 loc_403F78:                             ; CODE XREF: sub_403ED0+42↑j
.text:00403F78                 and     fs:0A2E73h, ah
.text:00403F7F
.text:00403F7F loc_403F7F:                             ; DATA XREF: sub_404160:loc_4042AD↓o
.text:00403F7F                 push    edi
.text:00403F80                 jb      short near ptr loc_403FEA+1
.text:00403F82                 jz      short loc_403FF8
.text:00403F84                 outs    dx, byte ptr gs:[esi]
.text:00403F86                 and     [edx+79h], ah
.text:00403F89                 and     ds:25202C73h, ah
.text:00403F8F                 jnb     short near ptr loc_403FBA+3
.text:00403F91
.text:00403F91 loc_403F91:                             ; CODE XREF: sub_403ED0+4D↑j
.text:00403F91                                         ; sub_403ED0+59↑j
.text:00403F91                 and     [ecx+6Eh], ah
.text:00403F94                 and     fs:0A2E73h, ah
.text:00403F9B                 nop
.text:00403F9C
.text:00403F9C loc_403F9C:                             ; CODE XREF: sub_403ED0+51↑j
.text:00403F9C                 nop
.text:00403F9D                 nop
.text:00403F9E                 nop
.text:00403F9F                 nop
.text:00403FA0                 nop
.text:00403FA1                 nop
.text:00403FA2                 nop
.text:00403FA3                 nop
.text:00403FA4                 nop
.text:00403FA5                 nop
.text:00403FA6                 nop
.text:00403FA7                 nop
.text:00403FA8                 nop
.text:00403FA9                 nop
.text:00403FAA                 nop
.text:00403FAB                 nop
.text:00403FAC                 nop
.text:00403FAD                 nop
.text:00403FAE                 nop
.text:00403FAF                 nop
.text:00403FAF sub_403ED0      endp ; sp-analysis failed
.text:00403FAF
.text:00403FB0
.text:00403FB0 ; =============== S U B R O U T I N E =======================================
.text:00403FB0
.text:00403FB0
.text:00403FB0 sub_403FB0      proc near               ; DATA XREF: sub_404160:loc_4042B9↓o
.text:00403FB0                 push    edi
.text:00403FB1                 jb      short near ptr loc_40401A+2
.text:00403FB3                 jz      short near ptr loc_404028+1
.text:00403FB5                 outs    dx, byte ptr gs:[esi]
.text:00403FB7                 and     [edx+79h], ah
.text:00403FBA
.text:00403FBA loc_403FBA:                             ; CODE XREF: sub_403ED0+BF↑j
.text:00403FBA                 and     ds:25202C73h, ah
.text:00403FC0                 jnb     short near ptr loc_403FED+1
.text:00403FC2                 and     ds:610A2C73h, ah
.text:00403FC8                 outsb
.text:00403FC9                 and     fs:0A2E73h, ah
.text:00403FD0
.text:00403FD0 loc_403FD0:                             ; DATA XREF: sub_404160:loc_4042C5↓o
.text:00403FD0                 push    edi
.text:00403FD1                 jb      short loc_40403C
.text:00403FD3
.text:00403FD3 loc_403FD3:                             ; CODE XREF: sub_403ED0+99↑j
.text:00403FD3                 jz      short loc_404049
.text:00403FD5                 outs    dx, byte ptr gs:[esi]
.text:00403FD7                 and     [edx+79h], ah
.text:00403FDA                 and     ds:25202C73h, ah
.text:00403FE0
.text:00403FE0 loc_403FE0:                             ; CODE XREF: sub_403ED0+9B↑j
.text:00403FE0                 jnb     short loc_40400E
.text:00403FE2                 and     ds:250A2C73h, ah
.text:00403FE8                 jnb     short near ptr loc_404015+1
.text:00403FEA
.text:00403FEA loc_403FEA:                             ; CODE XREF: sub_403ED0+B0↑j
.text:00403FEA                 and     [ecx+6Eh], ah
.text:00403FED
.text:00403FED loc_403FED:                             ; CODE XREF: sub_403FB0+10↑j
.text:00403FED                 and     fs:0A2E73h, ah
.text:00403FF4                 nop
.text:00403FF5                 nop
.text:00403FF6                 nop
.text:00403FF7                 nop
.text:00403FF8
.text:00403FF8 loc_403FF8:                             ; CODE XREF: sub_403ED0+B2↑j
.text:00403FF8                 nop
.text:00403FF9                 nop
.text:00403FFA                 nop
.text:00403FFB                 nop
.text:00403FFC                 nop
.text:00403FFD                 nop
.text:00403FFE                 nop
.text:00403FFF                 nop
.text:00404000                 nop
.text:00404001                 nop
.text:00404002                 nop
.text:00404003                 nop
.text:00404004                 nop
.text:00404005                 nop
.text:00404006                 nop
.text:00404007                 nop
.text:00404008                 nop
.text:00404009                 nop
.text:0040400A                 nop
.text:0040400B                 nop
.text:0040400C                 nop
.text:0040400D                 nop
.text:0040400E
.text:0040400E loc_40400E:                             ; CODE XREF: sub_403FB0:loc_403FE0↑j
.text:0040400E                 nop
.text:0040400F                 nop
.text:0040400F sub_403FB0      endp ; sp-analysis failed
.text:0040400F
.text:00404010
.text:00404010 ; =============== S U B R O U T I N E =======================================
.text:00404010
.text:00404010
.text:00404010 sub_404010      proc near               ; DATA XREF: sub_404160:loc_4042D1↓o
.text:00404010                 push    edi
.text:00404011                 jb      short loc_40407C
.text:00404013                 jz      short loc_404089
.text:00404015
.text:00404015 loc_404015:                             ; CODE XREF: sub_403FB0+38↑j
.text:00404015                 outs    dx, byte ptr gs:[esi]
.text:00404017                 and     [edx+79h], ah
.text:0040401A
.text:0040401A loc_40401A:                             ; CODE XREF: sub_403FB0+1↑j
.text:0040401A                 and     ds:25202C73h, ah
.text:00404020                 jnb     short loc_40404E
.text:00404022                 and     ds:250A2C73h, ah
.text:00404028
.text:00404028 loc_404028:                             ; CODE XREF: sub_403FB0+3↑j
.text:00404028                 jnb     short near ptr loc_404055+1
.text:0040402A                 and     ds:61202C73h, ah
.text:00404030                 outsb
.text:00404031                 and     fs:0A2E73h, ah
.text:00404038                 nop
.text:00404039                 nop
.text:0040403A                 nop
.text:0040403B                 nop
.text:0040403C
.text:0040403C loc_40403C:                             ; CODE XREF: sub_403FB0+21↑j
.text:0040403C                 nop
.text:0040403D                 nop
.text:0040403E                 nop
.text:0040403F                 nop
.text:00404040                 nop
.text:00404041                 nop
.text:00404042                 nop
.text:00404043                 nop
.text:00404044                 nop
.text:00404045                 nop
.text:00404046                 nop
.text:00404047                 nop
.text:00404048                 nop
.text:00404049
.text:00404049 loc_404049:                             ; CODE XREF: sub_403FB0:loc_403FD3↑j
.text:00404049                 nop
.text:0040404A                 nop
.text:0040404B                 nop
.text:0040404C                 nop
.text:0040404D                 nop
.text:0040404E
.text:0040404E loc_40404E:                             ; CODE XREF: sub_404010+10↑j
.text:0040404E                 nop
.text:0040404F                 nop
.text:0040404F sub_404010      endp ; sp-analysis failed
.text:0040404F
.text:00404050
.text:00404050 ; =============== S U B R O U T I N E =======================================
.text:00404050
.text:00404050
.text:00404050 sub_404050      proc near               ; DATA XREF: sub_404160:loc_4042DD↓o
.text:00404050                 push    edi
.text:00404051                 jb      short near ptr loc_4040B9+3
.text:00404053                 jz      short loc_4040C9
.text:00404055
.text:00404055 loc_404055:                             ; CODE XREF: sub_404010:loc_404028↑j
.text:00404055                 outs    dx, byte ptr gs:[esi]
.text:00404057                 and     [edx+79h], ah
.text:0040405A                 and     ds:25202C73h, ah
.text:00404060                 jnb     short loc_40408E
.text:00404062                 and     ds:250A2C73h, ah
.text:00404068                 jnb     short near ptr loc_404095+1
.text:0040406A                 and     ds:25202C73h, ah
.text:00404070                 jnb     short near ptr loc_40409A+4
.text:00404072                 and     [ecx+6Eh], ah
.text:00404075                 and     fs:0A2E73h, ah
.text:0040407C
.text:0040407C loc_40407C:                             ; CODE XREF: sub_404010+1↑j
.text:0040407C                 nop
.text:0040407D                 nop
.text:0040407E                 nop
.text:0040407F                 nop
.text:00404080                 nop
.text:00404081                 nop
.text:00404082                 nop
.text:00404083                 nop
.text:00404084                 nop
.text:00404085                 nop
.text:00404086                 nop
.text:00404087                 nop
.text:00404088                 nop
.text:00404089
.text:00404089 loc_404089:                             ; CODE XREF: sub_404010+3↑j
.text:00404089                 nop
.text:0040408A                 nop
.text:0040408B                 nop
.text:0040408C                 nop
.text:0040408D                 nop
.text:0040408E
.text:0040408E loc_40408E:                             ; CODE XREF: sub_404050+10↑j
.text:0040408E                 nop
.text:0040408F                 nop
.text:0040408F sub_404050      endp ; sp-analysis failed
.text:0040408F
.text:00404090
.text:00404090 ; =============== S U B R O U T I N E =======================================
.text:00404090
.text:00404090
.text:00404090 sub_404090      proc near               ; DATA XREF: sub_404160:loc_4042E9↓o
.text:00404090                 push    edi
.text:00404091                 jb      short near ptr loc_4040FA+2
.text:00404093                 jz      short near ptr loc_404104+5
.text:00404095
.text:00404095 loc_404095:                             ; CODE XREF: sub_404050+18↑j
.text:00404095                 outs    dx, byte ptr gs:[esi]
.text:00404097                 and     [edx+79h], ah
.text:0040409A
.text:0040409A loc_40409A:                             ; CODE XREF: sub_404050+20↑j
.text:0040409A                 and     ds:25202C73h, ah
.text:004040A0                 jnb     short loc_4040CE
.text:004040A2                 and     ds:250A2C73h, ah
.text:004040A8                 jnb     short near ptr loc_4040D5+1
.text:004040AA                 and     ds:25202C73h, ah
.text:004040B0                 jnb     short near ptr loc_4040DA+4
.text:004040B2                 and     ds:610A2C73h, ah
.text:004040B8                 outsb
.text:004040B9
.text:004040B9 loc_4040B9:                             ; CODE XREF: sub_404050+1↑j
.text:004040B9                 and     fs:0A2E73h, ah
.text:004040C0                 nop
.text:004040C1                 nop
.text:004040C2                 nop
.text:004040C3                 nop
.text:004040C4                 nop
.text:004040C5                 nop
.text:004040C6                 nop
.text:004040C7                 nop
.text:004040C8                 nop
.text:004040C9
.text:004040C9 loc_4040C9:                             ; CODE XREF: sub_404050+3↑j
.text:004040C9                 nop
.text:004040CA                 nop
.text:004040CB                 nop
.text:004040CC                 nop
.text:004040CD                 nop
.text:004040CE
.text:004040CE loc_4040CE:                             ; CODE XREF: sub_404090+10↑j
.text:004040CE                 nop
.text:004040CF                 nop
.text:004040CF sub_404090      endp ; sp-analysis failed
.text:004040CF
.text:004040D0
.text:004040D0 ; =============== S U B R O U T I N E =======================================
.text:004040D0
.text:004040D0
.text:004040D0 sub_4040D0      proc near               ; DATA XREF: sub_404160:loc_4042F5↓o
.text:004040D0                 push    edi
.text:004040D1                 jb      short near ptr loc_40413A+2
.text:004040D3                 jz      short near ptr loc_404145+4
.text:004040D5
.text:004040D5 loc_4040D5:                             ; CODE XREF: sub_404090+18↑j
.text:004040D5                 outs    dx, byte ptr gs:[esi]
.text:004040D7                 and     [edx+79h], ah
.text:004040DA
.text:004040DA loc_4040DA:                             ; CODE XREF: sub_404090+20↑j
.text:004040DA                 and     ds:25202C73h, ah
.text:004040E0                 jnb     short near ptr loc_40410A+4
.text:004040E2                 and     ds:250A2C73h, ah
.text:004040E8                 jnb     short near ptr loc_404115+1
.text:004040EA                 and     ds:25202C73h, ah
.text:004040F0                 jnb     short near ptr loc_40411A+4
.text:004040F2                 and     ds:250A2C73h, ah
.text:004040F8                 jnb     short near ptr loc_404122+4
.text:004040FA
.text:004040FA loc_4040FA:                             ; CODE XREF: sub_404090+1↑j
.text:004040FA                 and     [ecx+6Eh], ah
.text:004040FD                 and     fs:0A2E73h, ah
.text:00404104
.text:00404104 loc_404104:                             ; CODE XREF: sub_404090+3↑j
.text:00404104                 lea     esi, [esi+0]
.text:0040410A
.text:0040410A loc_40410A:                             ; CODE XREF: sub_4040D0+10↑j
.text:0040410A                 lea     edi, [edi+0]
.text:00404110
.text:00404110 loc_404110:                             ; DATA XREF: sub_404160:def_4041CD↓o
.text:00404110                 push    edi
.text:00404111                 jb      short near ptr loc_40417B+1
.text:00404113                 jz      short near ptr loc_404188+1
.text:00404115
.text:00404115 loc_404115:                             ; CODE XREF: sub_4040D0+18↑j
.text:00404115                 outs    dx, byte ptr gs:[esi]
.text:00404117                 and     [edx+79h], ah
.text:0040411A
.text:0040411A loc_40411A:                             ; CODE XREF: sub_4040D0+20↑j
.text:0040411A                 and     ds:25202C73h, ah
.text:00404120                 jnb     short near ptr loc_40414C+2
.text:00404122
.text:00404122 loc_404122:                             ; CODE XREF: sub_4040D0+28↑j
.text:00404122                 and     ds:250A2C73h, ah
.text:00404128                 jnb     short near ptr loc_404153+3
.text:0040412A                 and     ds:25202C73h, ah
.text:00404130                 jnb     short near ptr loc_404159+5
.text:00404132                 and     ds:250A2C73h, ah
.text:00404138                 jnb     short near ptr loc_404164+2
.text:0040413A
.text:0040413A loc_40413A:                             ; CODE XREF: sub_4040D0+1↑j
.text:0040413A                 and     ds:61202C73h, ah
.text:00404140                 outsb
.text:00404141                 and     fs:[edi+74h], ch
.text:00404145
.text:00404145 loc_404145:                             ; CODE XREF: sub_4040D0+3↑j
.text:00404145                 push    2E737265h
.text:0040414A                 or      al, [eax]
.text:0040414C
.text:0040414C loc_40414C:                             ; CODE XREF: sub_4040D0+50↑j
.text:0040414C                                         ; DATA XREF: sub_404160+1B5↓o
.text:0040414C                 and     eax, 73252073h
.text:00404151                 or      al, [eax]
.text:00404153
.text:00404153 loc_404153:                             ; CODE XREF: sub_4040D0+58↑j
.text:00404153                 lea     esi, [esi+0]
.text:00404159
.text:00404159 loc_404159:                             ; CODE XREF: sub_4040D0+60↑j
.text:00404159                 lea     edi, [edi+0]
.text:00404159 sub_4040D0      endp ; sp-analysis failed
.text:00404159
.text:00404160
.text:00404160 ; =============== S U B R O U T I N E =======================================
.text:00404160
.text:00404160
.text:00404160 ; int __cdecl sub_404160(FILE *, FILE *, int, int, va_list)
.text:00404160 sub_404160      proc near               ; CODE XREF: sub_402900+A5↑p
.text:00404160                                         ; .text:0040435A↓p
.text:00404160
.text:00404160 Stream          = dword ptr -2Ch
.text:00404160 Format          = dword ptr -28h
.text:00404160 ArgList         = dword ptr -24h
.text:00404160 var_20          = dword ptr -20h
.text:00404160 var_1C          = dword ptr -1Ch
.text:00404160 var_14          = dword ptr -14h
.text:00404160 arg_0           = dword ptr  4
.text:00404160 arg_4           = dword ptr  8
.text:00404160 arg_8           = dword ptr  0Ch
.text:00404160 arg_C           = dword ptr  10h
.text:00404160 arg_10          = dword ptr  14h
.text:00404160
.text:00404160                 push    ebp
.text:00404161                 push    edi
.text:00404162                 push    esi
.text:00404163                 push    ebx
.text:00404164
.text:00404164 loc_404164:                             ; CODE XREF: sub_4040D0+68↑j
.text:00404164                 sub     esp, 1Ch
.text:00404167                 xor     ebx, ebx
.text:00404169                 mov     edi, [esp+2Ch+arg_10]
.text:0040416D                 mov     edx, [esp+2Ch+arg_8]
.text:00404171                 mov     esi, [esp+2Ch+arg_0]
.text:00404175                 mov     eax, [edi]
.text:00404177                 mov     ecx, [esp+2Ch+arg_4]
.text:0040417B
.text:0040417B loc_40417B:                             ; CODE XREF: sub_4040D0+41↑j
.text:0040417B                 mov     [esp+2Ch+var_14], edx
.text:0040417F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404183                 lea     edx, [edi+4]
.text:00404186                 test    eax, eax
.text:00404188
.text:00404188 loc_404188:                             ; CODE XREF: sub_4040D0+43↑j
.text:00404188                 jz      short loc_40419C
.text:0040418A                 lea     esi, [esi+0]
.text:00404190
.text:00404190 loc_404190:                             ; CODE XREF: sub_404160+3A↓j
.text:00404190                 mov     eax, edx
.text:00404192                 inc     ebx
.text:00404193                 mov     eax, [eax]
.text:00404195                 add     edx, 4
.text:00404198                 test    eax, eax
.text:0040419A                 jnz     short loc_404190
.text:0040419C
.text:0040419C loc_40419C:                             ; CODE XREF: sub_404160:loc_404188↑j
.text:0040419C                 test    ecx, ecx
.text:0040419E                 jz      loc_40430D
.text:004041A4                 mov     [esp+2Ch+var_1C], ebp
.text:004041A8                 mov     edx, [esp+2Ch+var_14]
.text:004041AC                 mov     [esp+2Ch+ArgList], ecx
.text:004041B0                 mov     [esp+2Ch+Format], offset Format ; Format
.text:004041B8                 mov     [esp+2Ch+var_20], edx
.text:004041BC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004041BF                 call    fprintf
.text:004041C4
.text:004041C4 loc_4041C4:                             ; CODE XREF: sub_404160+1C9↓j
.text:004041C4                 cmp     ebx, 9          ; switch 10 cases
.text:004041C7                 ja      def_4041CD      ; jumptable 004041CD default case
.text:004041CD                 jmp     ds:jpt_4041CD[ebx*4] ; switch jump
.text:004041CD ; ---------------------------------------------------------------------------
.text:004041D4 jpt_4041CD      dd offset loc_4041FC    ; DATA XREF: sub_404160+6D↑r
.text:004041D4                 dd offset loc_404201    ; jump table for switch statement
.text:004041D4                 dd offset loc_4042A1
.text:004041D4                 dd offset loc_4042AD
.text:004041D4                 dd offset loc_4042B9
.text:004041D4                 dd offset loc_4042C5
.text:004041D4                 dd offset loc_4042D1
.text:004041D4                 dd offset loc_4042DD
.text:004041D4                 dd offset loc_4042E9
.text:004041D4                 dd offset loc_4042F5
.text:004041FC ; ---------------------------------------------------------------------------
.text:004041FC
.text:004041FC loc_4041FC:                             ; CODE XREF: sub_404160+6D↑j
.text:004041FC                                         ; DATA XREF: sub_404160:jpt_4041CD↑o
.text:004041FC                 call    abort           ; jumptable 004041CD case 0
.text:00404201 ; ---------------------------------------------------------------------------
.text:00404201
.text:00404201 loc_404201:                             ; CODE XREF: sub_404160+6D↑j
.text:00404201                                         ; DATA XREF: sub_404160:jpt_4041CD↑o
.text:00404201                 mov     [esp+2Ch+Stream], 403EAEh ; jumptable 004041CD case 1
.text:00404208                 nop
.text:00404209                 lea     esi, [esi+0]
.text:00404210
.text:00404210 loc_404210:                             ; CODE XREF: sub_404160+148↓j
.text:00404210                                         ; sub_404160+154↓j ...
.text:00404210                 call    ds:libintl_gettext
.text:00404216                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040421A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040421D                 mov     [esp+2Ch+Format], eax ; Format
.text:00404221                 call    vfprintf
.text:00404226                 mov     ebx, [esi+4]
.text:00404229                 dec     ebx
.text:0040422A                 test    ebx, ebx
.text:0040422C                 mov     [esi+4], ebx
.text:0040422F                 js      short loc_40428F
.text:00404231                 mov     edi, [esi]
.text:00404233                 mov     byte ptr [edi], 0Ah
.text:00404236                 inc     dword ptr [esi]
.text:00404238
.text:00404238 loc_404238:                             ; CODE XREF: sub_404160+13F↓j
.text:00404238                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040423C                 mov     edx, Buffer
.text:00404242                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00404245                 call    fputs
.text:0040424A                 mov     ebp, [esi+4]
.text:0040424D                 dec     ebp
.text:0040424E                 test    ebp, ebp
.text:00404250                 mov     [esi+4], ebp
.text:00404253                 js      short loc_40427D
.text:00404255                 mov     ecx, [esi]
.text:00404257                 mov     byte ptr [ecx], 0Ah
.text:0040425A                 inc     dword ptr [esi]
.text:0040425C
.text:0040425C loc_40425C:                             ; CODE XREF: sub_404160+12D↓j
.text:0040425C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404260                 mov     [esp+2Ch+Stream], offset sub_403ED0
.text:00404267                 call    ds:libintl_gettext
.text:0040426D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404271                 add     esp, 1Ch
.text:00404274                 pop     ebx
.text:00404275                 pop     esi
.text:00404276                 pop     edi
.text:00404277                 pop     ebp
.text:00404278                 jmp     fputs
.text:0040427D ; ---------------------------------------------------------------------------
.text:0040427D
.text:0040427D loc_40427D:                             ; CODE XREF: sub_404160+F3↑j
.text:0040427D                 mov     [esp+2Ch+Format], esi ; File
.text:00404281                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404288                 call    _flsbuf
.text:0040428D                 jmp     short loc_40425C
.text:0040428F ; ---------------------------------------------------------------------------
.text:0040428F
.text:0040428F loc_40428F:                             ; CODE XREF: sub_404160+CF↑j
.text:0040428F                 mov     [esp+2Ch+Format], esi ; File
.text:00404293                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040429A                 call    _flsbuf
.text:0040429F                 jmp     short loc_404238
.text:004042A1 ; ---------------------------------------------------------------------------
.text:004042A1
.text:004042A1 loc_4042A1:                             ; CODE XREF: sub_404160+6D↑j
.text:004042A1                                         ; DATA XREF: sub_404160:jpt_4041CD↑o
.text:004042A1                 mov     [esp+2Ch+Stream], offset loc_403F68 ; jumptable 004041CD case 2
.text:004042A8                 jmp     loc_404210
.text:004042AD ; ---------------------------------------------------------------------------
.text:004042AD
.text:004042AD loc_4042AD:                             ; CODE XREF: sub_404160+6D↑j
.text:004042AD                                         ; DATA XREF: sub_404160:jpt_4041CD↑o
.text:004042AD                 mov     [esp+2Ch+Stream], offset loc_403F7F ; jumptable 004041CD case 3
.text:004042B4                 jmp     loc_404210
.text:004042B9 ; ---------------------------------------------------------------------------
.text:004042B9
.text:004042B9 loc_4042B9:                             ; CODE XREF: sub_404160+6D↑j
.text:004042B9                                         ; DATA XREF: sub_404160:jpt_4041CD↑o
.text:004042B9                 mov     [esp+2Ch+Stream], offset sub_403FB0 ; jumptable 004041CD case 4
.text:004042C0                 jmp     loc_404210
.text:004042C5 ; ---------------------------------------------------------------------------
.text:004042C5
.text:004042C5 loc_4042C5:                             ; CODE XREF: sub_404160+6D↑j
.text:004042C5                                         ; DATA XREF: sub_404160:jpt_4041CD↑o
.text:004042C5                 mov     [esp+2Ch+Stream], offset loc_403FD0 ; jumptable 004041CD case 5
.text:004042CC                 jmp     loc_404210
.text:004042D1 ; ---------------------------------------------------------------------------
.text:004042D1
.text:004042D1 loc_4042D1:                             ; CODE XREF: sub_404160+6D↑j
.text:004042D1                                         ; DATA XREF: sub_404160:jpt_4041CD↑o
.text:004042D1                 mov     [esp+2Ch+Stream], offset sub_404010 ; jumptable 004041CD case 6
.text:004042D8                 jmp     loc_404210
.text:004042DD ; ---------------------------------------------------------------------------
.text:004042DD
.text:004042DD loc_4042DD:                             ; CODE XREF: sub_404160+6D↑j
.text:004042DD                                         ; DATA XREF: sub_404160:jpt_4041CD↑o
.text:004042DD                 mov     [esp+2Ch+Stream], offset sub_404050 ; jumptable 004041CD case 7
.text:004042E4                 jmp     loc_404210
.text:004042E9 ; ---------------------------------------------------------------------------
.text:004042E9
.text:004042E9 loc_4042E9:                             ; CODE XREF: sub_404160+6D↑j
.text:004042E9                                         ; DATA XREF: sub_404160:jpt_4041CD↑o
.text:004042E9                 mov     [esp+2Ch+Stream], offset sub_404090 ; jumptable 004041CD case 8
.text:004042F0                 jmp     loc_404210
.text:004042F5 ; ---------------------------------------------------------------------------
.text:004042F5
.text:004042F5 loc_4042F5:                             ; CODE XREF: sub_404160+6D↑j
.text:004042F5                                         ; DATA XREF: sub_404160:jpt_4041CD↑o
.text:004042F5                 mov     [esp+2Ch+Stream], offset sub_4040D0 ; jumptable 004041CD case 9
.text:004042FC                 jmp     loc_404210
.text:00404301 ; ---------------------------------------------------------------------------
.text:00404301
.text:00404301 def_4041CD:                             ; CODE XREF: sub_404160+67↑j
.text:00404301                 mov     [esp+2Ch+Stream], offset loc_404110 ; jumptable 004041CD default case
.text:00404308                 jmp     loc_404210
.text:0040430D ; ---------------------------------------------------------------------------
.text:0040430D
.text:0040430D loc_40430D:                             ; CODE XREF: sub_404160+3E↑j
.text:0040430D                 mov     [esp+2Ch+var_20], ebp
.text:00404311                 mov     ecx, [esp+2Ch+var_14]
.text:00404315                 mov     [esp+2Ch+Format], offset loc_40414C ; Format
.text:0040431D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404320                 mov     [esp+2Ch+ArgList], ecx
.text:00404324                 call    fprintf
.text:00404329                 jmp     loc_4041C4
.text:00404329 sub_404160      endp
.text:00404329
.text:00404329 ; ---------------------------------------------------------------------------
.text:0040432E                 align 10h
.text:00404330                 sub     esp, 1Ch
.text:00404333                 mov     edx, [esp+2Ch]
.text:00404337                 lea     ecx, [esp+30h]
.text:0040433B                 mov     [esp+10h], ecx
.text:0040433F                 mov     ecx, [esp+28h]
.text:00404343                 mov     [esp+0Ch], edx
.text:00404347                 mov     edx, [esp+24h]
.text:0040434B                 mov     [esp+8], ecx
.text:0040434F                 mov     [esp+4], edx
.text:00404353                 mov     edx, [esp+20h]
.text:00404357                 mov     [esp], edx
.text:0040435A                 call    sub_404160
.text:0040435F                 add     esp, 1Ch
.text:00404362                 retn
.text:00404362 ; ---------------------------------------------------------------------------
.text:00404363                 align 10h
.text:00404370                 sub     esp, 0Ch
.text:00404373                 xor     edx, edx
.text:00404375                 mov     ecx, [esp+14h]
.text:00404379                 mov     [esp+8], ebx
.text:0040437D                 mov     eax, 0FFFFFFFFh
.text:00404382                 mov     ebx, [esp+10h]
.text:00404386                 div     ecx
.text:00404388                 cmp     eax, ebx
.text:0040438A                 jb      short loc_4043A9
.text:0040438C                 mov     edx, ebx
.text:0040438E                 imul    edx, ecx
.text:00404391                 mov     [esp], edx
.text:00404394                 call    malloc
.text:00404399                 test    eax, eax
.text:0040439B                 jz      short loc_4043A5
.text:0040439D
.text:0040439D loc_40439D:                             ; CODE XREF: .text:004043A7↓j
.text:0040439D                 mov     ebx, [esp+8]
.text:004043A1                 add     esp, 0Ch
.text:004043A4                 retn
.text:004043A5 ; ---------------------------------------------------------------------------
.text:004043A5
.text:004043A5 loc_4043A5:                             ; CODE XREF: .text:0040439B↑j
.text:004043A5                 test    ebx, ebx
.text:004043A7                 jz      short loc_40439D
.text:004043A9
.text:004043A9 loc_4043A9:                             ; CODE XREF: .text:0040438A↑j
.text:004043A9                 call    sub_404660
.text:004043A9 ; ---------------------------------------------------------------------------
.text:004043AE                 align 10h
.text:004043B0
.text:004043B0 ; =============== S U B R O U T I N E =======================================
.text:004043B0
.text:004043B0
.text:004043B0 ; int __cdecl sub_4043B0(size_t)
.text:004043B0 sub_4043B0      proc near               ; CODE XREF: .text:004035D9↑p
.text:004043B0                                         ; .text:004037B6↑p ...
.text:004043B0
.text:004043B0 Size            = dword ptr -0Ch
.text:004043B0 var_4           = dword ptr -4
.text:004043B0 arg_0           = dword ptr  4
.text:004043B0
.text:004043B0                 sub     esp, 0Ch
.text:004043B3                 mov     [esp+0Ch+var_4], ebx
.text:004043B7                 mov     ebx, [esp+0Ch+arg_0]
.text:004043BB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004043BE                 call    malloc
.text:004043C3                 test    eax, eax
.text:004043C5                 jz      short loc_4043D0
.text:004043C7
.text:004043C7 loc_4043C7:                             ; CODE XREF: sub_4043B0+22↓j
.text:004043C7                 mov     ebx, [esp+0Ch+var_4]
.text:004043CB                 add     esp, 0Ch
.text:004043CE                 retn
.text:004043CE ; ---------------------------------------------------------------------------
.text:004043CF                 align 10h
.text:004043D0
.text:004043D0 loc_4043D0:                             ; CODE XREF: sub_4043B0+15↑j
.text:004043D0                 test    ebx, ebx
.text:004043D2                 jz      short loc_4043C7
.text:004043D4                 call    sub_404660
.text:004043D4 sub_4043B0      endp
.text:004043D4
.text:004043D4 ; ---------------------------------------------------------------------------
.text:004043D9                 align 10h
.text:004043E0                 sub     esp, 1Ch
.text:004043E3                 xor     edx, edx
.text:004043E5                 mov     eax, 0FFFFFFFFh
.text:004043EA                 mov     [esp+14h], ebx
.text:004043EE                 mov     ecx, [esp+20h]
.text:004043F2                 mov     ebx, [esp+28h]
.text:004043F6                 mov     [esp+18h], esi
.text:004043FA                 mov     esi, [esp+24h]
.text:004043FE                 div     ebx
.text:00404400                 cmp     eax, esi
.text:00404402                 jb      short loc_404434
.text:00404404                 mov     [esp], ecx
.text:00404407                 mov     edx, esi
.text:00404409                 imul    edx, ebx
.text:0040440C                 mov     [esp+4], edx
.text:00404410                 call    realloc
.text:00404415                 test    eax, eax
.text:00404417                 mov     ecx, eax
.text:00404419                 jz      short loc_404430
.text:0040441B
.text:0040441B loc_40441B:                             ; CODE XREF: .text:00404432↓j
.text:0040441B                 mov     ebx, [esp+14h]
.text:0040441F                 mov     eax, ecx
.text:00404421                 mov     esi, [esp+18h]
.text:00404425                 add     esp, 1Ch
.text:00404428                 retn
.text:00404428 ; ---------------------------------------------------------------------------
.text:00404429                 align 10h
.text:00404430
.text:00404430 loc_404430:                             ; CODE XREF: .text:00404419↑j
.text:00404430                 test    esi, esi
.text:00404432                 jz      short loc_40441B
.text:00404434
.text:00404434 loc_404434:                             ; CODE XREF: .text:00404402↑j
.text:00404434                 call    sub_404660
.text:00404434 ; ---------------------------------------------------------------------------
.text:00404439                 align 10h
.text:00404440
.text:00404440 ; =============== S U B R O U T I N E =======================================
.text:00404440
.text:00404440
.text:00404440 ; int __cdecl sub_404440(void *, size_t)
.text:00404440 sub_404440      proc near               ; CODE XREF: sub_403CA0+5B↑p
.text:00404440
.text:00404440 Block           = dword ptr -0Ch
.text:00404440 Size            = dword ptr -8
.text:00404440 var_4           = dword ptr -4
.text:00404440 arg_0           = dword ptr  4
.text:00404440 arg_4           = dword ptr  8
.text:00404440
.text:00404440                 sub     esp, 0Ch
.text:00404443                 mov     edx, [esp+0Ch+arg_0]
.text:00404447                 mov     [esp+0Ch+var_4], ebx
.text:0040444B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040444F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404452                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404456                 call    realloc
.text:0040445B                 test    eax, eax
.text:0040445D                 jz      short loc_404467
.text:0040445F
.text:0040445F loc_40445F:                             ; CODE XREF: sub_404440+29↓j
.text:0040445F                 mov     ebx, [esp+0Ch+var_4]
.text:00404463                 add     esp, 0Ch
.text:00404466                 retn
.text:00404467 ; ---------------------------------------------------------------------------
.text:00404467
.text:00404467 loc_404467:                             ; CODE XREF: sub_404440+1D↑j
.text:00404467                 test    ebx, ebx
.text:00404469                 jz      short loc_40445F
.text:0040446B                 call    sub_404660
.text:0040446B sub_404440      endp
.text:0040446B
.text:00404470 ; ---------------------------------------------------------------------------
.text:00404470                 jmp     sub_4045C0
.text:00404470 ; ---------------------------------------------------------------------------
.text:00404475                 align 10h
.text:00404480                 sub     esp, 0Ch
.text:00404483                 mov     edx, [esp+14h]
.text:00404487                 mov     dword ptr [esp+8], 1
.text:0040448F                 mov     [esp+4], edx
.text:00404493                 mov     edx, [esp+10h]
.text:00404497                 mov     [esp], edx
.text:0040449A                 call    sub_4045C0
.text:0040449F                 add     esp, 0Ch
.text:004044A2                 retn
.text:004044A2 ; ---------------------------------------------------------------------------
.text:004044A3                 align 10h
.text:004044B0                 sub     esp, 1Ch
.text:004044B3                 mov     [esp+18h], ebx
.text:004044B7                 mov     ebx, [esp+20h]
.text:004044BB                 mov     [esp], ebx
.text:004044BE                 call    malloc
.text:004044C3                 test    eax, eax
.text:004044C5                 jz      short loc_4044E3
.text:004044C7
.text:004044C7 loc_4044C7:                             ; CODE XREF: .text:004044E5↓j
.text:004044C7                 mov     [esp+8], ebx
.text:004044CB                 mov     dword ptr [esp+4], 0
.text:004044D3                 mov     [esp], eax
.text:004044D6                 call    memset
.text:004044DB                 mov     ebx, [esp+18h]
.text:004044DF                 add     esp, 1Ch
.text:004044E2                 retn
.text:004044E3 ; ---------------------------------------------------------------------------
.text:004044E3
.text:004044E3 loc_4044E3:                             ; CODE XREF: .text:004044C5↑j
.text:004044E3                 test    ebx, ebx
.text:004044E5                 jz      short loc_4044C7
.text:004044E7                 call    sub_404660
.text:004044E7 ; ---------------------------------------------------------------------------
.text:004044EC                 align 10h
.text:004044F0                 sub     esp, 0Ch
.text:004044F3                 xor     edx, edx
.text:004044F5                 mov     ecx, [esp+14h]
.text:004044F9                 mov     [esp+8], ebx
.text:004044FD                 mov     eax, 0FFFFFFFFh
.text:00404502                 mov     ebx, [esp+10h]
.text:00404506                 div     ecx
.text:00404508                 cmp     eax, ebx
.text:0040450A                 jb      short loc_404528
.text:0040450C                 mov     [esp+4], ecx
.text:00404510                 mov     [esp], ebx
.text:00404513                 call    calloc
.text:00404518                 test    eax, eax
.text:0040451A                 jz      short loc_404524
.text:0040451C
.text:0040451C loc_40451C:                             ; CODE XREF: .text:00404526↓j
.text:0040451C                 mov     ebx, [esp+8]
.text:00404520                 add     esp, 0Ch
.text:00404523                 retn
.text:00404524 ; ---------------------------------------------------------------------------
.text:00404524
.text:00404524 loc_404524:                             ; CODE XREF: .text:0040451A↑j
.text:00404524                 test    ebx, ebx
.text:00404526                 jz      short loc_40451C
.text:00404528
.text:00404528 loc_404528:                             ; CODE XREF: .text:0040450A↑j
.text:00404528                 call    sub_404660
.text:00404528 ; ---------------------------------------------------------------------------
.text:0040452D                 align 10h
.text:00404530                 sub     esp, 1Ch
.text:00404533                 mov     [esp+18h], ebx
.text:00404537                 mov     ebx, [esp+24h]
.text:0040453B                 mov     [esp], ebx
.text:0040453E                 call    malloc
.text:00404543                 test    eax, eax
.text:00404545                 mov     edx, eax
.text:00404547                 jz      short loc_404565
.text:00404549
.text:00404549 loc_404549:                             ; CODE XREF: .text:00404567↓j
.text:00404549                 mov     [esp+8], ebx
.text:0040454D                 mov     ecx, [esp+20h]
.text:00404551                 mov     [esp], edx
.text:00404554                 mov     [esp+4], ecx
.text:00404558                 call    memcpy
.text:0040455D                 mov     ebx, [esp+18h]
.text:00404561                 add     esp, 1Ch
.text:00404564                 retn
.text:00404565 ; ---------------------------------------------------------------------------
.text:00404565
.text:00404565 loc_404565:                             ; CODE XREF: .text:00404547↑j
.text:00404565                 test    ebx, ebx
.text:00404567                 jz      short loc_404549
.text:00404569                 call    sub_404660
.text:00404569 ; ---------------------------------------------------------------------------
.text:0040456E                 align 10h
.text:00404570                 sub     esp, 1Ch
.text:00404573                 mov     [esp+18h], esi
.text:00404577                 mov     esi, [esp+20h]
.text:0040457B                 mov     [esp+14h], ebx
.text:0040457F                 mov     [esp], esi
.text:00404582                 call    strlen
.text:00404587                 lea     ebx, [eax+1]
.text:0040458A                 mov     [esp], ebx
.text:0040458D                 call    malloc
.text:00404592                 test    eax, eax
.text:00404594                 jz      short loc_4045B2
.text:00404596
.text:00404596 loc_404596:                             ; CODE XREF: .text:004045B4↓j
.text:00404596                 mov     [esp+8], ebx
.text:0040459A                 mov     [esp+4], esi
.text:0040459E                 mov     [esp], eax
.text:004045A1                 call    memcpy
.text:004045A6                 mov     ebx, [esp+14h]
.text:004045AA                 mov     esi, [esp+18h]
.text:004045AE                 add     esp, 1Ch
.text:004045B1                 retn
.text:004045B2 ; ---------------------------------------------------------------------------
.text:004045B2
.text:004045B2 loc_4045B2:                             ; CODE XREF: .text:00404594↑j
.text:004045B2                 test    ebx, ebx
.text:004045B4                 jz      short loc_404596
.text:004045B6                 call    sub_404660
.text:004045B6 ; ---------------------------------------------------------------------------
.text:004045BB                 align 10h
.text:004045C0
.text:004045C0 ; =============== S U B R O U T I N E =======================================
.text:004045C0
.text:004045C0
.text:004045C0 ; int __cdecl sub_4045C0(void *, int, int)
.text:004045C0 sub_4045C0      proc near               ; CODE XREF: .text:00404470↑j
.text:004045C0                                         ; .text:0040449A↑p
.text:004045C0
.text:004045C0 Block           = dword ptr -1Ch
.text:004045C0 Size            = dword ptr -18h
.text:004045C0 var_C           = dword ptr -0Ch
.text:004045C0 var_8           = dword ptr -8
.text:004045C0 var_4           = dword ptr -4
.text:004045C0 arg_0           = dword ptr  4
.text:004045C0 arg_4           = dword ptr  8
.text:004045C0 arg_8           = dword ptr  0Ch
.text:004045C0
.text:004045C0                 sub     esp, 1Ch
.text:004045C3                 mov     [esp+1Ch+var_8], esi
.text:004045C7                 mov     esi, [esp+1Ch+arg_0]
.text:004045CB                 mov     [esp+1Ch+var_4], edi
.text:004045CF                 mov     edi, [esp+1Ch+arg_4]
.text:004045D3                 test    esi, esi
.text:004045D5                 mov     [esp+1Ch+var_C], ebx
.text:004045D9                 mov     ecx, [edi]
.text:004045DB                 mov     ebx, [esp+1Ch+arg_8]
.text:004045DF                 jz      short loc_404620
.text:004045E1                 xor     edx, edx
.text:004045E3                 mov     eax, 7FFFFFFFh
.text:004045E8                 div     ebx
.text:004045EA                 cmp     eax, ecx
.text:004045EC                 jb      short loc_404619
.text:004045EE                 add     ecx, ecx
.text:004045F0
.text:004045F0 loc_4045F0:                             ; CODE XREF: sub_4045C0+62↓j
.text:004045F0                                         ; sub_4045C0+71↓j ...
.text:004045F0                 mov     [edi], ecx
.text:004045F2                 imul    ebx, ecx
.text:004045F5                 mov     [esp+1Ch+Block], esi ; Block
.text:004045F8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004045FC                 call    realloc
.text:00404601                 test    eax, eax
.text:00404603                 jz      short loc_404615
.text:00404605
.text:00404605 loc_404605:                             ; CODE XREF: sub_4045C0+57↓j
.text:00404605                 mov     ebx, [esp+1Ch+var_C]
.text:00404609                 mov     esi, [esp+1Ch+var_8]
.text:0040460D                 mov     edi, [esp+1Ch+var_4]
.text:00404611                 add     esp, 1Ch
.text:00404614                 retn
.text:00404615 ; ---------------------------------------------------------------------------
.text:00404615
.text:00404615 loc_404615:                             ; CODE XREF: sub_4045C0+43↑j
.text:00404615                 test    ebx, ebx
.text:00404617                 jz      short loc_404605
.text:00404619
.text:00404619 loc_404619:                             ; CODE XREF: sub_4045C0+2C↑j
.text:00404619                 call    sub_404660
.text:00404619 ; ---------------------------------------------------------------------------
.text:0040461E                 align 10h
.text:00404620
.text:00404620 loc_404620:                             ; CODE XREF: sub_4045C0+1F↑j
.text:00404620                 test    ecx, ecx
.text:00404622                 jnz     short loc_4045F0
.text:00404624                 xor     edx, edx
.text:00404626                 mov     eax, 40h ; '@'
.text:0040462B                 div     ebx
.text:0040462D                 test    eax, eax
.text:0040462F                 mov     ecx, eax
.text:00404631                 jnz     short loc_4045F0
.text:00404633                 mov     ecx, 1
.text:00404638                 jmp     short loc_4045F0
.text:00404638 sub_4045C0      endp
.text:00404638
.text:00404638 ; ---------------------------------------------------------------------------
.text:0040463A                 align 10h
.text:00404640 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404660+3↓o
.text:00404651 ; const char aS[]
.text:00404651 aS              db '%s',0               ; DATA XREF: sub_404660+10↓o
.text:00404654                 align 10h
.text:00404660
.text:00404660 ; =============== S U B R O U T I N E =======================================
.text:00404660
.text:00404660 ; Attributes: noreturn
.text:00404660
.text:00404660 sub_404660      proc near               ; CODE XREF: sub_403CA0:loc_403E5F↑p
.text:00404660                                         ; .text:loc_4043A9↑p ...
.text:00404660
.text:00404660 Code            = dword ptr -1Ch
.text:00404660 ErrorMessage    = dword ptr -18h
.text:00404660 var_14          = dword ptr -14h
.text:00404660 var_10          = byte ptr -10h
.text:00404660
.text:00404660                 sub     esp, 1Ch
.text:00404663                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040466A                 call    ds:libintl_gettext
.text:00404670                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00404678                 mov     edx, Code
.text:0040467E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404686                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040468A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040468D                 call    sub_4046F0
.text:00404692                 call    abort
.text:00404692 sub_404660      endp
.text:00404692
.text:00404692 ; ---------------------------------------------------------------------------
.text:00404697                 align 10h
.text:004046A0
.text:004046A0 ; =============== S U B R O U T I N E =======================================
.text:004046A0
.text:004046A0 ; Attributes: thunk
.text:004046A0
.text:004046A0 libintl_bindtextdomain proc near
.text:004046A0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004046A0 libintl_bindtextdomain endp
.text:004046A0
.text:004046A0 ; ---------------------------------------------------------------------------
.text:004046A6                 align 10h
.text:004046B0                 jmp     ds:libintl_textdomain
.text:004046B0 ; ---------------------------------------------------------------------------
.text:004046B6                 align 10h
.text:004046C0                 jmp     ds:libintl_gettext
.text:004046C0 ; ---------------------------------------------------------------------------
.text:004046C6                 align 10h
.text:004046D0 ; const char aS_0[]
.text:004046D0 aS_0            db ': %s',0             ; DATA XREF: sub_4046F0+B8↓o
.text:004046D0                                         ; sub_4047F4+122↓o
.text:004046D5 aUnknownSystemE db 'Unknown system error',0
.text:004046D5                                         ; DATA XREF: sub_4046F0:loc_4047BD↓o
.text:004046D5                                         ; sub_4047F4:loc_40492E↓o
.text:004046EA ; const char aS_1[]
.text:004046EA aS_1            db '%s: ',0             ; DATA XREF: sub_4046F0:loc_4047C4↓o
.text:004046EF                 align 10h
.text:004046F0
.text:004046F0 ; =============== S U B R O U T I N E =======================================
.text:004046F0
.text:004046F0
.text:004046F0 ; int __cdecl sub_4046F0(int Code, int ErrorMessage, char *, char)
.text:004046F0 sub_4046F0      proc near               ; CODE XREF: sub_401350+114↑p
.text:004046F0                                         ; sub_401350+153↑p ...
.text:004046F0
.text:004046F0 Stream          = dword ptr -1Ch
.text:004046F0 Format          = dword ptr -18h
.text:004046F0 ArgList         = dword ptr -14h
.text:004046F0 Code            = dword ptr  4
.text:004046F0 ErrorMessage    = dword ptr  8
.text:004046F0 arg_8           = dword ptr  0Ch
.text:004046F0 arg_C           = byte ptr  10h
.text:004046F0
.text:004046F0                 push    esi
.text:004046F1                 push    ebx
.text:004046F2                 sub     esp, 14h
.text:004046F5                 mov     edx, ds:_iob
.text:004046FB                 mov     esi, [esp+1Ch+Code]
.text:004046FF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404703                 add     edx, 20h ; ' '
.text:00404706                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404709                 call    fflush
.text:0040470E                 mov     eax, ds:dword_4072D0
.text:00404713                 test    eax, eax
.text:00404715                 jz      loc_4047C4
.text:0040471B                 call    eax ; dword_4072D0
.text:0040471D
.text:0040471D loc_40471D:                             ; CODE XREF: sub_4046F0+F7↓j
.text:0040471D                 lea     edx, [esp+1Ch+arg_C]
.text:00404721                 mov     ecx, [esp+1Ch+arg_8]
.text:00404725                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404729                 mov     edx, ds:_iob
.text:0040472F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404733                 add     edx, 40h ; '@'
.text:00404736                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404739                 call    vfprintf
.text:0040473E                 inc     ds:dword_4072E0
.text:00404744                 test    ebx, ebx
.text:00404746                 jnz     short loc_404792
.text:00404748
.text:00404748 loc_404748:                             ; CODE XREF: sub_4046F0+CB↓j
.text:00404748                 mov     edx, ds:_iob
.text:0040474E                 lea     ecx, [edx+40h]
.text:00404751                 mov     ebx, [ecx+4]
.text:00404754                 dec     ebx
.text:00404755                 test    ebx, ebx
.text:00404757                 mov     [ecx+4], ebx
.text:0040475A                 js      short loc_404780
.text:0040475C                 mov     ecx, [edx+40h]
.text:0040475F                 mov     byte ptr [ecx], 0Ah
.text:00404762                 inc     dword ptr [edx+40h]
.text:00404765
.text:00404765 loc_404765:                             ; CODE XREF: sub_4046F0+A0↓j
.text:00404765                 mov     edx, ds:_iob
.text:0040476B                 add     edx, 40h ; '@'
.text:0040476E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404771                 call    fflush
.text:00404776                 test    esi, esi
.text:00404778                 jnz     short loc_4047EC
.text:0040477A                 add     esp, 14h
.text:0040477D                 pop     ebx
.text:0040477E                 pop     esi
.text:0040477F                 retn
.text:00404780 ; ---------------------------------------------------------------------------
.text:00404780
.text:00404780 loc_404780:                             ; CODE XREF: sub_4046F0+6A↑j
.text:00404780                 mov     [esp+1Ch+Format], ecx ; File
.text:00404784                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040478B                 call    _flsbuf
.text:00404790                 jmp     short loc_404765
.text:00404792 ; ---------------------------------------------------------------------------
.text:00404792
.text:00404792 loc_404792:                             ; CODE XREF: sub_4046F0+56↑j
.text:00404792                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404795                 call    strerror
.text:0040479A                 test    eax, eax
.text:0040479C                 jz      short loc_4047BD
.text:0040479E
.text:0040479E loc_40479E:                             ; CODE XREF: sub_4046F0+D2↓j
.text:0040479E                 mov     [esp+1Ch+ArgList], eax
.text:004047A2                 mov     ebx, ds:_iob
.text:004047A8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:004047B0                 add     ebx, 40h ; '@'
.text:004047B3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004047B6                 call    fprintf
.text:004047BB                 jmp     short loc_404748
.text:004047BD ; ---------------------------------------------------------------------------
.text:004047BD
.text:004047BD loc_4047BD:                             ; CODE XREF: sub_4046F0+AC↑j
.text:004047BD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004047C2                 jmp     short loc_40479E
.text:004047C4 ; ---------------------------------------------------------------------------
.text:004047C4
.text:004047C4 loc_4047C4:                             ; CODE XREF: sub_4046F0+25↑j
.text:004047C4                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:004047CC                 mov     edx, ds:_iob
.text:004047D2                 mov     ecx, ds:dword_4072A0
.text:004047D8                 add     edx, 40h ; '@'
.text:004047DB                 mov     [esp+1Ch+ArgList], ecx
.text:004047DF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004047E2                 call    fprintf
.text:004047E7                 jmp     loc_40471D
.text:004047EC ; ---------------------------------------------------------------------------
.text:004047EC
.text:004047EC loc_4047EC:                             ; CODE XREF: sub_4046F0+88↑j
.text:004047EC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004047EF                 call    exit
.text:004047EF sub_4046F0      endp
.text:004047EF
.text:004047F4
.text:004047F4 ; =============== S U B R O U T I N E =======================================
.text:004047F4
.text:004047F4
.text:004047F4 ; int __cdecl sub_4047F4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004047F4 sub_4047F4      proc near               ; DATA XREF: sub_4047F4+77↓o
.text:004047F4
.text:004047F4 Stream          = dword ptr -28h
.text:004047F4 Format          = dword ptr -24h
.text:004047F4 ArgList         = dword ptr -20h
.text:004047F4 var_1C          = dword ptr -1Ch
.text:004047F4 Code            = dword ptr  8
.text:004047F4 ErrorMessage    = dword ptr  0Ch
.text:004047F4 Str2            = dword ptr  10h
.text:004047F4 arg_10          = dword ptr  14h
.text:004047F4 arg_14          = dword ptr  18h
.text:004047F4 arg_18          = byte ptr  1Ch
.text:004047F4
.text:004047F4                 and     eax, 64253A73h
.text:004047F9                 cmp     ah, [eax]
.text:004047FB
.text:004047FB loc_4047FB:                             ; DATA XREF: sub_4047F4:loc_404935↓o
.text:004047FB                 add     ds:55003A73h, ah
.text:00404801                 push    edi
.text:00404802                 push    esi
.text:00404803                 push    ebx
.text:00404804                 sub     esp, 1Ch
.text:00404807                 mov     edx, ds:dword_407310
.text:0040480D                 mov     ebp, [esp+28h+Code]
.text:00404811                 mov     edi, [esp+28h+ErrorMessage]
.text:00404815                 test    edx, edx
.text:00404817                 mov     ebx, [esp+28h+Str2]
.text:0040481B                 mov     esi, [esp+28h+arg_10]
.text:0040481F                 jz      short loc_404839
.text:00404821                 cmp     ds:dword_407180, esi
.text:00404827                 jz      loc_404960
.text:0040482D
.text:0040482D loc_40482D:                             ; CODE XREF: sub_4047F4+18D↓j
.text:0040482D                 mov     ds:Str1, ebx
.text:00404833                 mov     ds:dword_407180, esi
.text:00404839
.text:00404839 loc_404839:                             ; CODE XREF: sub_4047F4+2B↑j
.text:00404839                 mov     edx, ds:_iob
.text:0040483F                 add     edx, 20h ; ' '
.text:00404842                 mov     [esp+28h+Stream], edx ; Stream
.text:00404845                 call    fflush
.text:0040484A                 mov     eax, ds:dword_4072D0
.text:0040484F                 test    eax, eax
.text:00404851                 jz      loc_404935
.text:00404857                 call    eax ; dword_4072D0
.text:00404859
.text:00404859 loc_404859:                             ; CODE XREF: sub_4047F4+164↓j
.text:00404859                 test    ebx, ebx
.text:0040485B                 jz      short loc_40487E
.text:0040485D                 mov     [esp+28h+ArgList], ebx
.text:00404861                 mov     ebx, ds:_iob
.text:00404867                 mov     [esp+28h+var_1C], esi
.text:0040486B                 mov     [esp+28h+Format], offset sub_4047F4 ; Format
.text:00404873                 add     ebx, 40h ; '@'
.text:00404876                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404879                 call    fprintf
.text:0040487E
.text:0040487E loc_40487E:                             ; CODE XREF: sub_4047F4+67↑j
.text:0040487E                 mov     esi, ds:_iob
.text:00404884                 lea     edx, [esp+28h+arg_18]
.text:00404888                 mov     ecx, [esp+28h+arg_14]
.text:0040488C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404890                 add     esi, 40h ; '@'
.text:00404893                 mov     [esp+28h+Format], ecx ; Format
.text:00404897                 mov     [esp+28h+Stream], esi ; Stream
.text:0040489A                 call    vfprintf
.text:0040489F                 inc     ds:dword_4072E0
.text:004048A5                 test    edi, edi
.text:004048A7                 jnz     short loc_404900
.text:004048A9
.text:004048A9 loc_4048A9:                             ; CODE XREF: sub_4047F4+135↓j
.text:004048A9                 mov     edx, ds:_iob
.text:004048AF                 lea     ecx, [edx+40h]
.text:004048B2                 mov     ebx, [ecx+4]
.text:004048B5                 dec     ebx
.text:004048B6                 test    ebx, ebx
.text:004048B8                 mov     [ecx+4], ebx
.text:004048BB                 js      short loc_4048E7
.text:004048BD                 mov     esi, [edx+40h]
.text:004048C0                 mov     byte ptr [esi], 0Ah
.text:004048C3                 inc     dword ptr [edx+40h]
.text:004048C6
.text:004048C6 loc_4048C6:                             ; CODE XREF: sub_4047F4+103↓j
.text:004048C6                 mov     ecx, ds:_iob
.text:004048CC                 add     ecx, 40h ; '@'
.text:004048CF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004048D2                 call    fflush
.text:004048D7                 test    ebp, ebp
.text:004048D9                 jnz     loc_404986
.text:004048DF
.text:004048DF loc_4048DF:                             ; CODE XREF: sub_4047F4+173↓j
.text:004048DF                                         ; sub_4047F4+187↓j
.text:004048DF                 add     esp, 1Ch
.text:004048E2                 pop     ebx
.text:004048E3                 pop     esi
.text:004048E4                 pop     edi
.text:004048E5                 pop     ebp
.text:004048E6                 retn
.text:004048E7 ; ---------------------------------------------------------------------------
.text:004048E7
.text:004048E7 loc_4048E7:                             ; CODE XREF: sub_4047F4+C7↑j
.text:004048E7                 mov     [esp+28h+Format], ecx ; File
.text:004048EB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004048F2                 call    _flsbuf
.text:004048F7                 jmp     short loc_4048C6
.text:004048F7 ; ---------------------------------------------------------------------------
.text:004048F9                 align 10h
.text:00404900
.text:00404900 loc_404900:                             ; CODE XREF: sub_4047F4+B3↑j
.text:00404900                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404903                 call    strerror
.text:00404908                 test    eax, eax
.text:0040490A                 jz      short loc_40492E
.text:0040490C
.text:0040490C loc_40490C:                             ; CODE XREF: sub_4047F4+13F↓j
.text:0040490C                 mov     [esp+28h+ArgList], eax
.text:00404910                 mov     edi, ds:_iob
.text:00404916                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040491E                 add     edi, 40h ; '@'
.text:00404921                 mov     [esp+28h+Stream], edi ; Stream
.text:00404924                 call    fprintf
.text:00404929                 jmp     loc_4048A9
.text:0040492E ; ---------------------------------------------------------------------------
.text:0040492E
.text:0040492E loc_40492E:                             ; CODE XREF: sub_4047F4+116↑j
.text:0040492E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404933                 jmp     short loc_40490C
.text:00404935 ; ---------------------------------------------------------------------------
.text:00404935
.text:00404935 loc_404935:                             ; CODE XREF: sub_4047F4+5D↑j
.text:00404935                 mov     [esp+28h+Format], (offset loc_4047FB+1) ; Format
.text:0040493D                 mov     ecx, ds:_iob
.text:00404943                 mov     edx, ds:dword_4072A0
.text:00404949                 add     ecx, 40h ; '@'
.text:0040494C                 mov     [esp+28h+ArgList], edx
.text:00404950                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404953                 call    fprintf
.text:00404958                 jmp     loc_404859
.text:00404958 ; ---------------------------------------------------------------------------
.text:0040495D                 align 10h
.text:00404960
.text:00404960 loc_404960:                             ; CODE XREF: sub_4047F4+33↑j
.text:00404960                 mov     eax, ds:Str1
.text:00404965                 cmp     ebx, eax
.text:00404967                 jz      loc_4048DF
.text:0040496D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404971                 mov     [esp+28h+Stream], eax ; Str1
.text:00404974                 call    strcmp
.text:00404979                 test    eax, eax
.text:0040497B                 jz      loc_4048DF
.text:00404981                 jmp     loc_40482D
.text:00404986 ; ---------------------------------------------------------------------------
.text:00404986
.text:00404986 loc_404986:                             ; CODE XREF: sub_4047F4+E5↑j
.text:00404986                 mov     [esp+28h+Stream], ebp ; Code
.text:00404989                 call    exit
.text:00404989 sub_4047F4      endp ; sp-analysis failed
.text:00404989
.text:00404989 ; ---------------------------------------------------------------------------
.text:0040498E                 align 10h
.text:00404990
.text:00404990 ; =============== S U B R O U T I N E =======================================
.text:00404990
.text:00404990
.text:00404990 sub_404990      proc near               ; CODE XREF: sub_401350+D7↑p
.text:00404990
.text:00404990 lpBuffer        = dword ptr -1Ch
.text:00404990 pcbBuffer       = dword ptr -18h
.text:00404990 var_8           = dword ptr -8
.text:00404990 var_4           = dword ptr -4
.text:00404990
.text:00404990                 sub     esp, 1Ch
.text:00404993                 lea     edx, [esp+1Ch+var_8]
.text:00404997                 mov     [esp+1Ch+pcbBuffer], edx ; pcbBuffer
.text:0040499B                 mov     [esp+1Ch+var_4], ebx
.text:0040499F                 mov     [esp+1Ch+var_8], 101h
.text:004049A7                 mov     [esp+1Ch+lpBuffer], offset byte_407190 ; lpBuffer
.text:004049AE                 call    GetUserNameA
.text:004049B3                 sub     esp, 8
.text:004049B6                 mov     edx, offset byte_407190
.text:004049BB                 test    eax, eax
.text:004049BD                 jz      short loc_4049C9
.text:004049BF
.text:004049BF loc_4049BF:                             ; CODE XREF: sub_404990+49↓j
.text:004049BF                 mov     ebx, [esp+1Ch+var_4]
.text:004049C3                 mov     eax, edx
.text:004049C5                 add     esp, 1Ch
.text:004049C8                 retn
.text:004049C9 ; ---------------------------------------------------------------------------
.text:004049C9
.text:004049C9 loc_4049C9:                             ; CODE XREF: sub_404990+2D↑j
.text:004049C9                 call    sub_404C70
.text:004049CE                 mov     ebx, eax
.text:004049D0                 call    _errno
.text:004049D5                 mov     [eax], ebx
.text:004049D7                 xor     edx, edx
.text:004049D9                 jmp     short loc_4049BF
.text:004049D9 sub_404990      endp
.text:004049D9
.text:004049D9 ; ---------------------------------------------------------------------------
.text:004049DB                 align 10h
.text:004049E0
.text:004049E0 ; =============== S U B R O U T I N E =======================================
.text:004049E0
.text:004049E0 ; Attributes: info_from_lumina
.text:004049E0
.text:004049E0 ___get_errno    proc near               ; CODE XREF: sub_404C70+B↓p
.text:004049E0
.text:004049E0 arg_0           = dword ptr  4
.text:004049E0
.text:004049E0                 mov     eax, [esp+arg_0]
.text:004049E4                 cmp     eax, 53h ; 'S'
.text:004049E7                 jg      loc_404AE0
.text:004049ED                 cmp     eax, 52h ; 'R'
.text:004049F0                 jge     short loc_404A42
.text:004049F2                 cmp     eax, 0Fh
.text:004049F5                 jz      short loc_404A10
.text:004049F7                 cmp     eax, 0Fh
.text:004049FA                 jg      short loc_404A70
.text:004049FC                 cmp     eax, 9
.text:004049FF                 jg      short loc_404A50
.text:00404A01                 cmp     eax, 7
.text:00404A04                 jge     short loc_404A49
.text:00404A06                 cmp     eax, 3
.text:00404A09                 jg      short loc_404A2A
.text:00404A0B                 cmp     eax, 2
.text:00404A0E                 jl      short loc_404A23
.text:00404A10
.text:00404A10 loc_404A10:                             ; CODE XREF: ___get_errno+15↑j
.text:00404A10                                         ; ___get_errno+9D↓j ...
.text:00404A10                 mov     edx, 2
.text:00404A15                 lea     esi, [esi+0]
.text:00404A19                 lea     edi, [edi+0]
.text:00404A20
.text:00404A20 loc_404A20:                             ; CODE XREF: ___get_errno+48↓j
.text:00404A20                                         ; ___get_errno+59↓j ...
.text:00404A20                 mov     eax, edx
.text:00404A22                 retn
.text:00404A23 ; ---------------------------------------------------------------------------
.text:00404A23
.text:00404A23 loc_404A23:                             ; CODE XREF: ___get_errno+2E↑j
.text:00404A23                                         ; ___get_errno+78↓j ...
.text:00404A23                 mov     edx, 16h
.text:00404A28                 jmp     short loc_404A20
.text:00404A2A ; ---------------------------------------------------------------------------
.text:00404A2A
.text:00404A2A loc_404A2A:                             ; CODE XREF: ___get_errno+29↑j
.text:00404A2A                 cmp     eax, 5
.text:00404A2D                 jz      short loc_404A42
.text:00404A2F                 cmp     eax, 5
.text:00404A32                 jg      short loc_404A3B
.text:00404A34                 mov     edx, 18h
.text:00404A39                 jmp     short loc_404A20
.text:00404A3B ; ---------------------------------------------------------------------------
.text:00404A3B
.text:00404A3B loc_404A3B:                             ; CODE XREF: ___get_errno+52↑j
.text:00404A3B                                         ; ___get_errno+180↓j
.text:00404A3B                 mov     edx, 9
.text:00404A40                 jmp     short loc_404A20
.text:00404A42 ; ---------------------------------------------------------------------------
.text:00404A42
.text:00404A42 loc_404A42:                             ; CODE XREF: ___get_errno+10↑j
.text:00404A42                                         ; ___get_errno+4D↑j ...
.text:00404A42                 mov     edx, 0Dh
.text:00404A47                 jmp     short loc_404A20
.text:00404A49 ; ---------------------------------------------------------------------------
.text:00404A49
.text:00404A49 loc_404A49:                             ; CODE XREF: ___get_errno+24↑j
.text:00404A49                                         ; ___get_errno+73↓j ...
.text:00404A49                 mov     edx, 0Ch
.text:00404A4E                 jmp     short loc_404A20
.text:00404A50 ; ---------------------------------------------------------------------------
.text:00404A50
.text:00404A50 loc_404A50:                             ; CODE XREF: ___get_errno+1F↑j
.text:00404A50                 cmp     eax, 0Dh
.text:00404A53                 jg      short loc_404A49
.text:00404A55                 cmp     eax, 0Ch
.text:00404A58                 jge     short loc_404A23
.text:00404A5A                 cmp     eax, 0Ah
.text:00404A5D                 mov     edx, 7
.text:00404A62                 jz      short loc_404A20
.text:00404A64                 cmp     eax, 0Bh
.text:00404A67                 jnz     short loc_404A23
.text:00404A69
.text:00404A69 loc_404A69:                             ; CODE XREF: ___get_errno+21A↓j
.text:00404A69                 mov     edx, 8
.text:00404A6E                 jmp     short loc_404A20
.text:00404A70 ; ---------------------------------------------------------------------------
.text:00404A70
.text:00404A70 loc_404A70:                             ; CODE XREF: ___get_errno+1A↑j
.text:00404A70                 cmp     eax, 22h ; '"'
.text:00404A73                 jg      short loc_404AA4
.text:00404A75                 cmp     eax, 16h
.text:00404A78                 jge     short loc_404A42
.text:00404A7A                 cmp     eax, 12h
.text:00404A7D                 jz      short loc_404A10
.text:00404A7F                 cmp     eax, 12h
.text:00404A82                 jg      short loc_404A95
.text:00404A84                 cmp     eax, 10h
.text:00404A87                 jz      short loc_404A42
.text:00404A89                 mov     edx, 12h
.text:00404A8E                 cmp     eax, 11h
.text:00404A91
.text:00404A91 loc_404A91:                             ; CODE XREF: ___get_errno+172↓j
.text:00404A91                                         ; ___get_errno+24C↓j ...
.text:00404A91                 jnz     short loc_404A23
.text:00404A93                 jmp     short loc_404A20
.text:00404A95 ; ---------------------------------------------------------------------------
.text:00404A95
.text:00404A95 loc_404A95:                             ; CODE XREF: ___get_errno+A2↑j
.text:00404A95                 cmp     eax, 14h
.text:00404A98                 jle     short loc_404A42
.text:00404A9A
.text:00404A9A loc_404A9A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00404A9A                 mov     edx, 10h
.text:00404A9F                 jmp     loc_404A20
.text:00404AA4 ; ---------------------------------------------------------------------------
.text:00404AA4
.text:00404AA4 loc_404AA4:                             ; CODE XREF: ___get_errno+93↑j
.text:00404AA4                 cmp     eax, 41h ; 'A'
.text:00404AA7                 jz      short loc_404A42
.text:00404AA9                 cmp     eax, 41h ; 'A'
.text:00404AAC                 jg      short loc_404AC1
.text:00404AAE                 cmp     eax, 24h ; '$'
.text:00404AB1                 jz      short loc_404A42
.text:00404AB3                 cmp     eax, 35h ; '5'
.text:00404AB6                 jnz     loc_404A23
.text:00404ABC                 jmp     loc_404A10
.text:00404AC1 ; ---------------------------------------------------------------------------
.text:00404AC1
.text:00404AC1 loc_404AC1:                             ; CODE XREF: ___get_errno+CC↑j
.text:00404AC1                 cmp     eax, 43h ; 'C'
.text:00404AC4                 jz      loc_404A10
.text:00404ACA                 cmp     eax, 50h ; 'P'
.text:00404ACD                 jnz     loc_404A23
.text:00404AD3
.text:00404AD3 loc_404AD3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00404AD3                 mov     edx, 11h
.text:00404AD8                 jmp     loc_404A20
.text:00404AD8 ; ---------------------------------------------------------------------------
.text:00404ADD                 align 10h
.text:00404AE0
.text:00404AE0 loc_404AE0:                             ; CODE XREF: ___get_errno+7↑j
.text:00404AE0                 cmp     eax, 0A1h ; '¡'
.text:00404AE5                 jz      loc_404A10
.text:00404AEB                 cmp     eax, 0A1h ; '¡'
.text:00404AF0                 jg      loc_404BA0
.text:00404AF6                 cmp     eax, 81h
.text:00404AFB                 jg      short loc_404B65
.text:00404AFD                 cmp     eax, 80h ; '€'
.text:00404B02                 mov     edx, 0Ah
.text:00404B07                 jge     loc_404A20
.text:00404B0D                 cmp     eax, 6Ch ; 'l'
.text:00404B10                 jz      loc_404A42
.text:00404B16                 cmp     eax, 6Ch ; 'l'
.text:00404B19                 jg      short loc_404B37
.text:00404B1B                 cmp     eax, 57h ; 'W'
.text:00404B1E                 jz      loc_404A23
.text:00404B24                 cmp     eax, 59h ; 'Y'
.text:00404B27                 jnz     loc_404A23
.text:00404B2D
.text:00404B2D loc_404B2D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00404B2D                                         ; ___get_errno+23C↓j
.text:00404B2D                 mov     edx, 0Bh
.text:00404B32                 jmp     loc_404A20
.text:00404B37 ; ---------------------------------------------------------------------------
.text:00404B37
.text:00404B37 loc_404B37:                             ; CODE XREF: ___get_errno+139↑j
.text:00404B37                 cmp     eax, 70h ; 'p'
.text:00404B3A                 mov     edx, 1Ch
.text:00404B3F                 jz      loc_404A20
.text:00404B45                 cmp     eax, 70h ; 'p'
.text:00404B48                 jg      short loc_404B57
.text:00404B4A                 mov     edx, 20h ; ' '
.text:00404B4F                 cmp     eax, 6Dh ; 'm'
.text:00404B52                 jmp     loc_404A91
.text:00404B57 ; ---------------------------------------------------------------------------
.text:00404B57
.text:00404B57 loc_404B57:                             ; CODE XREF: ___get_errno+168↑j
.text:00404B57                 cmp     eax, 72h ; 'r'
.text:00404B5A
.text:00404B5A loc_404B5A:                             ; CODE XREF: ___get_errno+19C↓j
.text:00404B5A                 jnz     loc_404A23
.text:00404B60                 jmp     loc_404A3B
.text:00404B65 ; ---------------------------------------------------------------------------
.text:00404B65
.text:00404B65 loc_404B65:                             ; CODE XREF: ___get_errno+11B↑j
.text:00404B65                 cmp     eax, 84h ; '„'
.text:00404B6A                 jz      loc_404A42
.text:00404B70                 cmp     eax, 84h ; '„'
.text:00404B75                 jg      short loc_404B7E
.text:00404B77                 cmp     eax, 82h ; '‚'
.text:00404B7C                 jmp     short loc_404B5A
.text:00404B7E ; ---------------------------------------------------------------------------
.text:00404B7E
.text:00404B7E loc_404B7E:                             ; CODE XREF: ___get_errno+195↑j
.text:00404B7E                 cmp     eax, 91h ; '‘'
.text:00404B83                 mov     edx, 29h ; ')'
.text:00404B88                 jz      loc_404A20
.text:00404B8E                 cmp     eax, 9Eh ; 'ž'
.text:00404B93
.text:00404B93 loc_404B93:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00404B93                 jnz     loc_404A23
.text:00404B99                 jmp     loc_404A42
.text:00404B99 ; ---------------------------------------------------------------------------
.text:00404B9E                 align 10h
.text:00404BA0
.text:00404BA0 loc_404BA0:                             ; CODE XREF: ___get_errno+110↑j
.text:00404BA0                 cmp     eax, 0CEh ; 'Î'
.text:00404BA5                 jz      loc_404A10
.text:00404BAB                 cmp     eax, 0CEh ; 'Î'
.text:00404BB0                 jg      short loc_404C00
.text:00404BB2                 cmp     eax, 0AAh ; 'ª'
.text:00404BB7                 jz      loc_404A9A
.text:00404BBD                 cmp     eax, 0AAh ; 'ª'
.text:00404BC2                 jg      short loc_404BD6
.text:00404BC4                 cmp     eax, 0A4h ; '¤'
.text:00404BC9                 jz      loc_404B2D
.text:00404BCF                 cmp     eax, 0A7h ; '§'
.text:00404BD4                 jmp     short loc_404B93
.text:00404BD6 ; ---------------------------------------------------------------------------
.text:00404BD6
.text:00404BD6 loc_404BD6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00404BD6                 cmp     eax, 0B7h ; '·'
.text:00404BDB                 jz      loc_404AD3
.text:00404BE1                 cmp     eax, 0B7h ; '·'
.text:00404BE6                 jl      loc_404A23
.text:00404BEC                 sub     eax, 0BCh ; '¼'
.text:00404BF1                 cmp     eax, 0Eh
.text:00404BF4                 ja      loc_404A23
.text:00404BFA                 jmp     loc_404A69
.text:00404BFA ; ---------------------------------------------------------------------------
.text:00404BFF                 align 10h
.text:00404C00
.text:00404C00 loc_404C00:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00404C00                 cmp     eax, 46Bh
.text:00404C05                 mov     edx, 24h ; '$'
.text:00404C0A                 jz      loc_404A20
.text:00404C10                 cmp     eax, 46Bh
.text:00404C15                 jg      short loc_404C31
.text:00404C17                 cmp     eax, 0D7h ; '×'
.text:00404C1C                 jz      loc_404B2D
.text:00404C22                 mov     edx, 5
.text:00404C27                 cmp     eax, 45Dh
.text:00404C2C                 jmp     loc_404A91
.text:00404C31 ; ---------------------------------------------------------------------------
.text:00404C31
.text:00404C31 loc_404C31:                             ; CODE XREF: ___get_errno+235↑j
.text:00404C31                 cmp     eax, 4D5h
.text:00404C36                 mov     edx, 4
.text:00404C3B                 jz      loc_404A20
.text:00404C41                 cmp     eax, 4D5h
.text:00404C46                 jg      short loc_404C57
.text:00404C48                 mov     edx, 13h
.text:00404C4D                 cmp     eax, 4B0h
.text:00404C52                 jmp     loc_404A91
.text:00404C57 ; ---------------------------------------------------------------------------
.text:00404C57
.text:00404C57 loc_404C57:                             ; CODE XREF: ___get_errno+266↑j
.text:00404C57                 cmp     eax, 718h
.text:00404C5C                 jnz     loc_404A23
.text:00404C62                 jmp     loc_404A49
.text:00404C62 ___get_errno    endp
.text:00404C62
.text:00404C62 ; ---------------------------------------------------------------------------
.text:00404C67                 align 10h
.text:00404C70
.text:00404C70 ; =============== S U B R O U T I N E =======================================
.text:00404C70
.text:00404C70
.text:00404C70 sub_404C70      proc near               ; CODE XREF: sub_404990:loc_4049C9↑p
.text:00404C70
.text:00404C70 var_C           = dword ptr -0Ch
.text:00404C70
.text:00404C70                 sub     esp, 0Ch
.text:00404C73                 call    GetLastError
.text:00404C78                 mov     [esp+0Ch+var_C], eax
.text:00404C7B                 call    ___get_errno
.text:00404C80                 add     esp, 0Ch
.text:00404C83                 retn
.text:00404C83 sub_404C70      endp
.text:00404C83
.text:00404C83 ; ---------------------------------------------------------------------------
.text:00404C84                 align 10h
.text:00404C90
.text:00404C90 ; =============== S U B R O U T I N E =======================================
.text:00404C90
.text:00404C90 ; Attributes: thunk
.text:00404C90
.text:00404C90 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00404C90 mbrtowc         proc near               ; CODE XREF: sub_402B60+757↑p
.text:00404C90
.text:00404C90 DstCh           = dword ptr  4
.text:00404C90 SrcCh           = dword ptr  8
.text:00404C90 SizeInBytes     = dword ptr  0Ch
.text:00404C90 State           = dword ptr  10h
.text:00404C90
.text:00404C90                 jmp     ds:__imp_mbrtowc
.text:00404C90 mbrtowc         endp
.text:00404C90
.text:00404C90 ; ---------------------------------------------------------------------------
.text:00404C96                 align 10h
.text:00404CA0
.text:00404CA0 ; =============== S U B R O U T I N E =======================================
.text:00404CA0
.text:00404CA0 ; Attributes: bp-based frame
.text:00404CA0
.text:00404CA0 sub_404CA0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00404CA0                 push    ebp
.text:00404CA1                 mov     ecx, offset dword_407000
.text:00404CA6                 cmp     ecx, offset dword_407000
.text:00404CAC                 mov     ebp, esp
.text:00404CAE                 jnb     short loc_404CC6
.text:00404CB0
.text:00404CB0 loc_404CB0:                             ; CODE XREF: sub_404CA0+24↓j
.text:00404CB0                 mov     edx, [ecx+4]
.text:00404CB3                 mov     eax, [ecx]
.text:00404CB5                 add     ecx, 8
.text:00404CB8                 add     [edx+400000h], eax
.text:00404CBE                 cmp     ecx, offset dword_407000
.text:00404CC4                 jb      short loc_404CB0
.text:00404CC6
.text:00404CC6 loc_404CC6:                             ; CODE XREF: sub_404CA0+E↑j
.text:00404CC6                 pop     ebp
.text:00404CC7                 retn
.text:00404CC7 sub_404CA0      endp
.text:00404CC7
.text:00404CC7 ; ---------------------------------------------------------------------------
.text:00404CC8                 align 10h
.text:00404CD0
.text:00404CD0 ; =============== S U B R O U T I N E =======================================
.text:00404CD0
.text:00404CD0 ; Attributes: bp-based frame
.text:00404CD0
.text:00404CD0 sub_404CD0      proc near               ; CODE XREF: sub_401080+16↑p
.text:00404CD0                                         ; TopLevelExceptionFilter+D7↑p
.text:00404CD0                 push    ebp
.text:00404CD1                 mov     ebp, esp
.text:00404CD3                 fninit
.text:00404CD5                 pop     ebp
.text:00404CD6                 retn
.text:00404CD6 sub_404CD0      endp
.text:00404CD6
.text:00404CD6 ; ---------------------------------------------------------------------------
.text:00404CD7                 align 10h
.text:00404CE0
.text:00404CE0 ; =============== S U B R O U T I N E =======================================
.text:00404CE0
.text:00404CE0 ; Attributes: bp-based frame
.text:00404CE0
.text:00404CE0 ; void __cdecl sub_404CE0()
.text:00404CE0 sub_404CE0      proc near               ; DATA XREF: .text:loc_404D29↓o
.text:00404CE0                                         ; sub_404D70:loc_404D9E↓o
.text:00404CE0                 push    ebp
.text:00404CE1                 mov     ebp, esp
.text:00404CE3                 sub     esp, 8
.text:00404CE6                 mov     eax, off_406084
.text:00404CEB                 mov     edx, [eax]
.text:00404CED                 test    edx, edx
.text:00404CEF                 jnz     short loc_404CF5
.text:00404CF1
.text:00404CF1 loc_404CF1:                             ; CODE XREF: sub_404CE0+2C↓j
.text:00404CF1                 mov     esp, ebp
.text:00404CF3                 pop     ebp
.text:00404CF4                 retn
.text:00404CF5 ; ---------------------------------------------------------------------------
.text:00404CF5
.text:00404CF5 loc_404CF5:                             ; CODE XREF: sub_404CE0+F↑j
.text:00404CF5                                         ; sub_404CE0+2A↓j
.text:00404CF5                 call    dword ptr [eax]
.text:00404CF7                 mov     edx, off_406084
.text:00404CFD                 mov     ecx, [edx+4]
.text:00404D00                 lea     eax, [edx+4]
.text:00404D03                 mov     off_406084, eax
.text:00404D08                 test    ecx, ecx
.text:00404D0A                 jnz     short loc_404CF5
.text:00404D0C                 jmp     short loc_404CF1
.text:00404D0C sub_404CE0      endp
.text:00404D0C
.text:00404D0C ; ---------------------------------------------------------------------------
.text:00404D0E                 align 10h
.text:00404D10                 push    ebp
.text:00404D11                 mov     ebp, esp
.text:00404D13                 sub     esp, 8
.text:00404D16                 mov     [ebp-4], ebx
.text:00404D19                 mov     eax, ds:dword_405060
.text:00404D1E                 cmp     eax, 0FFFFFFFFh
.text:00404D21                 jz      short loc_404D4C
.text:00404D23
.text:00404D23 loc_404D23:                             ; CODE XREF: .text:00404D56↓j
.text:00404D23                                         ; .text:00404D69↓j
.text:00404D23                 test    eax, eax
.text:00404D25                 mov     ebx, eax
.text:00404D27                 jnz     short loc_404D40
.text:00404D29
.text:00404D29 loc_404D29:                             ; CODE XREF: .text:00404D4A↓j
.text:00404D29                 mov     dword ptr [esp], offset sub_404CE0
.text:00404D30                 call    sub_401040
.text:00404D35                 mov     ebx, [ebp-4]
.text:00404D38                 mov     esp, ebp
.text:00404D3A                 pop     ebp
.text:00404D3B                 retn
.text:00404D3B ; ---------------------------------------------------------------------------
.text:00404D3C                 align 10h
.text:00404D40
.text:00404D40 loc_404D40:                             ; CODE XREF: .text:00404D27↑j
.text:00404D40                                         ; .text:00404D48↓j
.text:00404D40                 call    ds:dword_405060[ebx*4]
.text:00404D47                 dec     ebx
.text:00404D48                 jnz     short loc_404D40
.text:00404D4A                 jmp     short loc_404D29
.text:00404D4C ; ---------------------------------------------------------------------------
.text:00404D4C
.text:00404D4C loc_404D4C:                             ; CODE XREF: .text:00404D21↑j
.text:00404D4C                 mov     ecx, ds:dword_405064
.text:00404D52                 xor     eax, eax
.text:00404D54                 test    ecx, ecx
.text:00404D56                 jz      short loc_404D23
.text:00404D58                 mov     edx, offset dword_405060
.text:00404D5D                 lea     esi, [esi+0]
.text:00404D60
.text:00404D60 loc_404D60:                             ; CODE XREF: .text:00404D67↓j
.text:00404D60                 inc     eax
.text:00404D61                 mov     ecx, [edx+eax*4+4]
.text:00404D65                 test    ecx, ecx
.text:00404D67                 jnz     short loc_404D60
.text:00404D69                 jmp     short loc_404D23
.text:00404D69 ; ---------------------------------------------------------------------------
.text:00404D6B                 align 10h
.text:00404D70
.text:00404D70 ; =============== S U B R O U T I N E =======================================
.text:00404D70
.text:00404D70 ; Attributes: bp-based frame
.text:00404D70
.text:00404D70 sub_404D70      proc near               ; CODE XREF: sub_401350+18↑p
.text:00404D70
.text:00404D70 var_8           = dword ptr -8
.text:00404D70 var_4           = dword ptr -4
.text:00404D70
.text:00404D70                 push    ebp
.text:00404D71                 mov     ebp, esp
.text:00404D73                 sub     esp, 8
.text:00404D76                 mov     [ebp+var_4], ebx
.text:00404D79                 mov     edx, dword_406080
.text:00404D7F                 test    edx, edx
.text:00404D81                 jnz     short loc_404DAA
.text:00404D83                 mov     eax, ds:dword_405060
.text:00404D88                 mov     edx, 1
.text:00404D8D                 mov     dword_406080, edx
.text:00404D93                 cmp     eax, 0FFFFFFFFh
.text:00404D96                 jz      short loc_404DBD
.text:00404D98
.text:00404D98 loc_404D98:                             ; CODE XREF: sub_404D70+57↓j
.text:00404D98                                         ; sub_404D70+69↓j
.text:00404D98                 test    eax, eax
.text:00404D9A                 mov     ebx, eax
.text:00404D9C                 jnz     short loc_404DB1
.text:00404D9E
.text:00404D9E loc_404D9E:                             ; CODE XREF: sub_404D70+4B↓j
.text:00404D9E                 mov     [esp+8+var_8], offset sub_404CE0 ; void (__cdecl *)()
.text:00404DA5                 call    sub_401040
.text:00404DAA
.text:00404DAA loc_404DAA:                             ; CODE XREF: sub_404D70+11↑j
.text:00404DAA                 mov     ebx, [ebp+var_4]
.text:00404DAD                 mov     esp, ebp
.text:00404DAF                 pop     ebp
.text:00404DB0                 retn
.text:00404DB1 ; ---------------------------------------------------------------------------
.text:00404DB1
.text:00404DB1 loc_404DB1:                             ; CODE XREF: sub_404D70+2C↑j
.text:00404DB1                                         ; sub_404D70+49↓j
.text:00404DB1                 call    ds:dword_405060[ebx*4]
.text:00404DB8                 dec     ebx
.text:00404DB9                 jnz     short loc_404DB1
.text:00404DBB                 jmp     short loc_404D9E
.text:00404DBD ; ---------------------------------------------------------------------------
.text:00404DBD
.text:00404DBD loc_404DBD:                             ; CODE XREF: sub_404D70+26↑j
.text:00404DBD                 mov     ecx, ds:dword_405064
.text:00404DC3                 xor     eax, eax
.text:00404DC5                 test    ecx, ecx
.text:00404DC7                 jz      short loc_404D98
.text:00404DC9                 mov     edx, offset dword_405060
.text:00404DCE                 mov     esi, esi
.text:00404DD0
.text:00404DD0 loc_404DD0:                             ; CODE XREF: sub_404D70+67↓j
.text:00404DD0                 inc     eax
.text:00404DD1                 mov     ebx, [edx+eax*4+4]
.text:00404DD5                 test    ebx, ebx
.text:00404DD7                 jnz     short loc_404DD0
.text:00404DD9                 jmp     short loc_404D98
.text:00404DD9 sub_404D70      endp
.text:00404DD9
.text:00404DD9 ; ---------------------------------------------------------------------------
.text:00404DDB                 align 10h
.text:00404DE0
.text:00404DE0 ; =============== S U B R O U T I N E =======================================
.text:00404DE0
.text:00404DE0 ; Attributes: info_from_lumina
.text:00404DE0
.text:00404DE0 ; void *__cdecl _alloca(size_t Size)
.text:00404DE0 __alloca        proc near               ; CODE XREF: sub_401350+13↑p
.text:00404DE0                 push    ecx
.text:00404DE1                 mov     ecx, esp
.text:00404DE3                 add     ecx, 8
.text:00404DE6
.text:00404DE6 loc_404DE6:                             ; CODE XREF: __alloca+1B↓j
.text:00404DE6                 cmp     eax, 1000h
.text:00404DEB                 jb      short loc_404DFD
.text:00404DED                 sub     ecx, 1000h
.text:00404DF3                 or      dword ptr [ecx], 0
.text:00404DF6                 sub     eax, 1000h
.text:00404DFB                 jmp     short loc_404DE6
.text:00404DFD ; ---------------------------------------------------------------------------
.text:00404DFD
.text:00404DFD loc_404DFD:                             ; CODE XREF: __alloca+B↑j
.text:00404DFD                 sub     ecx, eax
.text:00404DFF                 or      dword ptr [ecx], 0
.text:00404E02                 mov     eax, esp
.text:00404E04                 mov     esp, ecx
.text:00404E06                 mov     ecx, [eax]
.text:00404E08                 mov     eax, [eax+4]
.text:00404E0B                 jmp     eax
.text:00404E0B __alloca        endp
.text:00404E0B
.text:00404E0B ; ---------------------------------------------------------------------------
.text:00404E0D                 align 10h
.text:00404E10                 jmp     ds:__set_app_type
.text:00404E10 ; ---------------------------------------------------------------------------
.text:00404E16                 align 10h
.text:00404E20
.text:00404E20 ; =============== S U B R O U T I N E =======================================
.text:00404E20
.text:00404E20 ; Attributes: thunk
.text:00404E20
.text:00404E20 ; void __cdecl cexit()
.text:00404E20 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00404E20                 jmp     ds:__imp__cexit
.text:00404E20 _cexit          endp
.text:00404E20
.text:00404E20 ; ---------------------------------------------------------------------------
.text:00404E26                 align 10h
.text:00404E30
.text:00404E30 ; =============== S U B R O U T I N E =======================================
.text:00404E30
.text:00404E30 ; Attributes: thunk
.text:00404E30
.text:00404E30 ; char ***__cdecl _p__environ()
.text:00404E30 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00404E30                 jmp     ds:__imp___p__environ
.text:00404E30 __p__environ    endp
.text:00404E30
.text:00404E30 ; ---------------------------------------------------------------------------
.text:00404E36                 align 10h
.text:00404E40
.text:00404E40 ; =============== S U B R O U T I N E =======================================
.text:00404E40
.text:00404E40 ; Attributes: thunk
.text:00404E40
.text:00404E40 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00404E40 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00404E40                                         ; TopLevelExceptionFilter+88↑p ...
.text:00404E40
.text:00404E40 Signal          = dword ptr  4
.text:00404E40 Function        = dword ptr  8
.text:00404E40
.text:00404E40                 jmp     ds:__imp_signal
.text:00404E40 signal          endp
.text:00404E40
.text:00404E40 ; ---------------------------------------------------------------------------
.text:00404E46                 align 10h
.text:00404E50
.text:00404E50 ; =============== S U B R O U T I N E =======================================
.text:00404E50
.text:00404E50 ; Attributes: thunk
.text:00404E50
.text:00404E50 ; int *__cdecl _p__fmode()
.text:00404E50 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00404E50                 jmp     ds:__imp___p__fmode
.text:00404E50 __p__fmode      endp
.text:00404E50
.text:00404E50 ; ---------------------------------------------------------------------------
.text:00404E56                 align 10h
.text:00404E60
.text:00404E60 ; =============== S U B R O U T I N E =======================================
.text:00404E60
.text:00404E60 ; Attributes: thunk
.text:00404E60
.text:00404E60 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00404E60 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00404E60                                         ; sub_401080+90↑p ...
.text:00404E60
.text:00404E60 FileHandle      = dword ptr  4
.text:00404E60 Mode            = dword ptr  8
.text:00404E60
.text:00404E60                 jmp     ds:__imp__setmode
.text:00404E60 _setmode        endp
.text:00404E60
.text:00404E60 ; ---------------------------------------------------------------------------
.text:00404E66                 align 10h
.text:00404E70
.text:00404E70 ; =============== S U B R O U T I N E =======================================
.text:00404E70
.text:00404E70 ; Attributes: thunk
.text:00404E70
.text:00404E70 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00404E70                 jmp     ds:__imp___getmainargs
.text:00404E70 __getmainargs   endp
.text:00404E70
.text:00404E70 ; ---------------------------------------------------------------------------
.text:00404E76                 align 10h
.text:00404E80
.text:00404E80 ; =============== S U B R O U T I N E =======================================
.text:00404E80
.text:00404E80 ; Attributes: thunk
.text:00404E80
.text:00404E80 ; int __cdecl puts(const char *Buffer)
.text:00404E80 puts            proc near               ; CODE XREF: sub_401350+E3↑p
.text:00404E80
.text:00404E80 Buffer          = dword ptr  4
.text:00404E80
.text:00404E80                 jmp     ds:__imp_puts
.text:00404E80 puts            endp
.text:00404E80
.text:00404E80 ; ---------------------------------------------------------------------------
.text:00404E86                 align 10h
.text:00404E90
.text:00404E90 ; =============== S U B R O U T I N E =======================================
.text:00404E90
.text:00404E90 ; Attributes: thunk
.text:00404E90
.text:00404E90 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00404E90 setlocale       proc near               ; CODE XREF: sub_401350+34↑p
.text:00404E90
.text:00404E90 Category        = dword ptr  4
.text:00404E90 Locale          = dword ptr  8
.text:00404E90
.text:00404E90                 jmp     ds:__imp_setlocale
.text:00404E90 setlocale       endp
.text:00404E90
.text:00404E90 ; ---------------------------------------------------------------------------
.text:00404E96                 align 10h
.text:00404EA0
.text:00404EA0 ; =============== S U B R O U T I N E =======================================
.text:00404EA0
.text:00404EA0 ; Attributes: noreturn thunk
.text:00404EA0
.text:00404EA0 ; void __cdecl __noreturn exit(int Code)
.text:00404EA0 exit            proc near               ; CODE XREF: sub_401350:loc_40143F↑p
.text:00404EA0                                         ; sub_4015F0+3E↑p ...
.text:00404EA0
.text:00404EA0 Code            = dword ptr  4
.text:00404EA0
.text:00404EA0                 jmp     ds:__imp_exit
.text:00404EA0 exit            endp
.text:00404EA0
.text:00404EA0 ; ---------------------------------------------------------------------------
.text:00404EA6                 align 10h
.text:00404EB0
.text:00404EB0 ; =============== S U B R O U T I N E =======================================
.text:00404EB0
.text:00404EB0 ; Attributes: thunk
.text:00404EB0
.text:00404EB0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00404EB0 fputs           proc near               ; CODE XREF: sub_4015F0+7F↑p
.text:00404EB0                                         ; sub_4015F0+A1↑p ...
.text:00404EB0
.text:00404EB0 Buffer          = dword ptr  4
.text:00404EB0 Stream          = dword ptr  8
.text:00404EB0
.text:00404EB0                 jmp     ds:__imp_fputs
.text:00404EB0 fputs           endp
.text:00404EB0
.text:00404EB0 ; ---------------------------------------------------------------------------
.text:00404EB6                 align 10h
.text:00404EC0
.text:00404EC0 ; =============== S U B R O U T I N E =======================================
.text:00404EC0
.text:00404EC0 ; Attributes: thunk
.text:00404EC0
.text:00404EC0 ; int printf(const char *const Format, ...)
.text:00404EC0 printf          proc near               ; CODE XREF: sub_4015F0+5D↑p
.text:00404EC0                                         ; sub_4015F0+E0↑p
.text:00404EC0
.text:00404EC0 Format          = dword ptr  4
.text:00404EC0
.text:00404EC0                 jmp     ds:__imp_printf
.text:00404EC0 printf          endp
.text:00404EC0
.text:00404EC0 ; ---------------------------------------------------------------------------
.text:00404EC6                 align 10h
.text:00404ED0
.text:00404ED0 ; =============== S U B R O U T I N E =======================================
.text:00404ED0
.text:00404ED0 ; Attributes: thunk
.text:00404ED0
.text:00404ED0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00404ED0 fprintf         proc near               ; CODE XREF: sub_401350+17F↑p
.text:00404ED0                                         ; sub_4015F0+36↑p ...
.text:00404ED0
.text:00404ED0 Stream          = dword ptr  4
.text:00404ED0 Format          = dword ptr  8
.text:00404ED0
.text:00404ED0                 jmp     ds:__imp_fprintf
.text:00404ED0 fprintf         endp
.text:00404ED0
.text:00404ED0 ; ---------------------------------------------------------------------------
.text:00404ED6                 align 10h
.text:00404EE0
.text:00404EE0 ; =============== S U B R O U T I N E =======================================
.text:00404EE0
.text:00404EE0 ; Attributes: thunk
.text:00404EE0
.text:00404EE0 ; size_t __cdecl strlen(const char *Str)
.text:00404EE0 strlen          proc near               ; CODE XREF: sub_401930+2A9↑p
.text:00404EE0                                         ; sub_401930+346↑p ...
.text:00404EE0
.text:00404EE0 Str             = dword ptr  4
.text:00404EE0
.text:00404EE0                 jmp     ds:__imp_strlen
.text:00404EE0 strlen          endp
.text:00404EE0
.text:00404EE0 ; ---------------------------------------------------------------------------
.text:00404EE6                 align 10h
.text:00404EF0
.text:00404EF0 ; =============== S U B R O U T I N E =======================================
.text:00404EF0
.text:00404EF0 ; Attributes: thunk
.text:00404EF0
.text:00404EF0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00404EF0 strncmp         proc near               ; CODE XREF: sub_401930+23F↑p
.text:00404EF0                                         ; sub_401930+699↑p
.text:00404EF0
.text:00404EF0 Str1            = dword ptr  4
.text:00404EF0 Str2            = dword ptr  8
.text:00404EF0 MaxCount        = dword ptr  0Ch
.text:00404EF0
.text:00404EF0                 jmp     ds:__imp_strncmp
.text:00404EF0 strncmp         endp
.text:00404EF0
.text:00404EF0 ; ---------------------------------------------------------------------------
.text:00404EF6                 align 10h
.text:00404F00
.text:00404F00 ; =============== S U B R O U T I N E =======================================
.text:00404F00
.text:00404F00 ; Attributes: thunk
.text:00404F00
.text:00404F00 ; char *__cdecl getenv(const char *VarName)
.text:00404F00 getenv          proc near               ; CODE XREF: sub_401930+B57↑p
.text:00404F00
.text:00404F00 VarName         = dword ptr  4
.text:00404F00
.text:00404F00                 jmp     ds:__imp_getenv
.text:00404F00 getenv          endp
.text:00404F00
.text:00404F00 ; ---------------------------------------------------------------------------
.text:00404F06                 align 10h
.text:00404F10
.text:00404F10 ; =============== S U B R O U T I N E =======================================
.text:00404F10
.text:00404F10 ; Attributes: thunk
.text:00404F10
.text:00404F10 ; char *__cdecl strchr(const char *Str, int Val)
.text:00404F10 strchr          proc near               ; CODE XREF: sub_401930+469↑p
.text:00404F10                                         ; sub_401930+53A↑p ...
.text:00404F10
.text:00404F10 Str             = dword ptr  4
.text:00404F10 Val             = dword ptr  8
.text:00404F10
.text:00404F10                 jmp     ds:__imp_strchr
.text:00404F10 strchr          endp
.text:00404F10
.text:00404F10 ; ---------------------------------------------------------------------------
.text:00404F16                 align 10h
.text:00404F20
.text:00404F20 ; =============== S U B R O U T I N E =======================================
.text:00404F20
.text:00404F20 ; Attributes: thunk
.text:00404F20
.text:00404F20 ; int *__cdecl errno()
.text:00404F20 _errno          proc near               ; CODE XREF: sub_4029F0:loc_402A2D↑p
.text:00404F20                                         ; .text:004035CB↑p ...
.text:00404F20                 jmp     ds:__imp__errno
.text:00404F20 _errno          endp
.text:00404F20
.text:00404F20 ; ---------------------------------------------------------------------------
.text:00404F26                 align 10h
.text:00404F30
.text:00404F30 ; =============== S U B R O U T I N E =======================================
.text:00404F30
.text:00404F30 ; Attributes: thunk
.text:00404F30
.text:00404F30 ; int __cdecl fclose(FILE *Stream)
.text:00404F30 fclose          proc near               ; CODE XREF: sub_4029F0+27↑p
.text:00404F30
.text:00404F30 Stream          = dword ptr  4
.text:00404F30
.text:00404F30                 jmp     ds:__imp_fclose
.text:00404F30 fclose          endp
.text:00404F30
.text:00404F30 ; ---------------------------------------------------------------------------
.text:00404F36                 align 10h
.text:00404F40
.text:00404F40 ; =============== S U B R O U T I N E =======================================
.text:00404F40
.text:00404F40 ; Attributes: thunk
.text:00404F40
.text:00404F40 ; void __cdecl free(void *Block)
.text:00404F40 free            proc near               ; CODE XREF: sub_403CA0+112↑p
.text:00404F40
.text:00404F40 Block           = dword ptr  4
.text:00404F40
.text:00404F40                 jmp     ds:__imp_free
.text:00404F40 free            endp
.text:00404F40
.text:00404F40 ; ---------------------------------------------------------------------------
.text:00404F46                 align 10h
.text:00404F50
.text:00404F50 ; =============== S U B R O U T I N E =======================================
.text:00404F50
.text:00404F50 ; Attributes: noreturn thunk
.text:00404F50
.text:00404F50 ; void __cdecl __noreturn abort()
.text:00404F50 abort           proc near               ; CODE XREF: sub_403CA0:loc_403E5A↑p
.text:00404F50                                         ; sub_404160:loc_4041FC↑p ...
.text:00404F50                 jmp     ds:__imp_abort
.text:00404F50 abort           endp
.text:00404F50
.text:00404F50 ; ---------------------------------------------------------------------------
.text:00404F56                 align 10h
.text:00404F60
.text:00404F60 ; =============== S U B R O U T I N E =======================================
.text:00404F60
.text:00404F60 ; Attributes: thunk
.text:00404F60
.text:00404F60 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00404F60 iswctype        proc near               ; CODE XREF: sub_402B60+78B↑p
.text:00404F60
.text:00404F60 C               = word ptr  4
.text:00404F60 Type            = word ptr  8
.text:00404F60
.text:00404F60                 jmp     ds:__imp_iswctype
.text:00404F60 iswctype        endp
.text:00404F60
.text:00404F60 ; ---------------------------------------------------------------------------
.text:00404F66                 align 10h
.text:00404F70
.text:00404F70 ; =============== S U B R O U T I N E =======================================
.text:00404F70
.text:00404F70 ; Attributes: thunk
.text:00404F70
.text:00404F70 ; int __cdecl isctype(int C, int Type)
.text:00404F70 _isctype        proc near               ; CODE XREF: sub_402B60+610↑p
.text:00404F70
.text:00404F70 C               = dword ptr  4
.text:00404F70 Type            = dword ptr  8
.text:00404F70
.text:00404F70                 jmp     ds:__imp__isctype
.text:00404F70 _isctype        endp
.text:00404F70
.text:00404F70 ; ---------------------------------------------------------------------------
.text:00404F76                 align 10h
.text:00404F80
.text:00404F80 ; =============== S U B R O U T I N E =======================================
.text:00404F80
.text:00404F80 ; Attributes: thunk
.text:00404F80
.text:00404F80 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00404F80 vfprintf        proc near               ; CODE XREF: sub_404160+C1↑p
.text:00404F80                                         ; sub_4046F0+49↑p ...
.text:00404F80
.text:00404F80 Stream          = dword ptr  4
.text:00404F80 Format          = dword ptr  8
.text:00404F80 ArgList         = dword ptr  0Ch
.text:00404F80
.text:00404F80                 jmp     ds:__imp_vfprintf
.text:00404F80 vfprintf        endp
.text:00404F80
.text:00404F80 ; ---------------------------------------------------------------------------
.text:00404F86                 align 10h
.text:00404F90
.text:00404F90 ; =============== S U B R O U T I N E =======================================
.text:00404F90
.text:00404F90 ; Attributes: thunk
.text:00404F90
.text:00404F90 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00404F90 _flsbuf         proc near               ; CODE XREF: sub_404160+128↑p
.text:00404F90                                         ; sub_404160+13A↑p ...
.text:00404F90
.text:00404F90 File            = dword ptr  8
.text:00404F90
.text:00404F90                 jmp     ds:__imp__flsbuf
.text:00404F90 _flsbuf         endp
.text:00404F90
.text:00404F90 ; ---------------------------------------------------------------------------
.text:00404F96                 align 10h
.text:00404FA0
.text:00404FA0 ; =============== S U B R O U T I N E =======================================
.text:00404FA0
.text:00404FA0 ; Attributes: thunk
.text:00404FA0
.text:00404FA0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00404FA0 memcpy          proc near               ; CODE XREF: .text:00404558↑p
.text:00404FA0                                         ; .text:004045A1↑p
.text:00404FA0
.text:00404FA0 Src             = dword ptr  8
.text:00404FA0 Size            = dword ptr  0Ch
.text:00404FA0
.text:00404FA0                 jmp     ds:__imp_memcpy
.text:00404FA0 memcpy          endp
.text:00404FA0
.text:00404FA0 ; ---------------------------------------------------------------------------
.text:00404FA6                 align 10h
.text:00404FB0
.text:00404FB0 ; =============== S U B R O U T I N E =======================================
.text:00404FB0
.text:00404FB0 ; Attributes: thunk
.text:00404FB0
.text:00404FB0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00404FB0 memset          proc near               ; CODE XREF: .text:004044D6↑p
.text:00404FB0
.text:00404FB0 Val             = dword ptr  8
.text:00404FB0 Size            = dword ptr  0Ch
.text:00404FB0
.text:00404FB0                 jmp     ds:__imp_memset
.text:00404FB0 memset          endp
.text:00404FB0
.text:00404FB0 ; ---------------------------------------------------------------------------
.text:00404FB6                 align 10h
.text:00404FC0
.text:00404FC0 ; =============== S U B R O U T I N E =======================================
.text:00404FC0
.text:00404FC0 ; Attributes: thunk
.text:00404FC0
.text:00404FC0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00404FC0 calloc          proc near               ; CODE XREF: .text:00404513↑p
.text:00404FC0
.text:00404FC0 Count           = dword ptr  4
.text:00404FC0 Size            = dword ptr  8
.text:00404FC0
.text:00404FC0                 jmp     ds:__imp_calloc
.text:00404FC0 calloc          endp
.text:00404FC0
.text:00404FC0 ; ---------------------------------------------------------------------------
.text:00404FC6                 align 10h
.text:00404FD0
.text:00404FD0 ; =============== S U B R O U T I N E =======================================
.text:00404FD0
.text:00404FD0 ; Attributes: thunk
.text:00404FD0
.text:00404FD0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00404FD0 realloc         proc near               ; CODE XREF: .text:00404410↑p
.text:00404FD0                                         ; sub_404440+16↑p ...
.text:00404FD0
.text:00404FD0 Block           = dword ptr  4
.text:00404FD0 Size            = dword ptr  8
.text:00404FD0
.text:00404FD0                 jmp     ds:__imp_realloc
.text:00404FD0 realloc         endp
.text:00404FD0
.text:00404FD0 ; ---------------------------------------------------------------------------
.text:00404FD6                 align 10h
.text:00404FE0
.text:00404FE0 ; =============== S U B R O U T I N E =======================================
.text:00404FE0
.text:00404FE0 ; Attributes: thunk
.text:00404FE0
.text:00404FE0 ; void *__cdecl malloc(size_t Size)
.text:00404FE0 malloc          proc near               ; CODE XREF: .text:00404394↑p
.text:00404FE0                                         ; sub_4043B0+E↑p ...
.text:00404FE0
.text:00404FE0 Size            = dword ptr  4
.text:00404FE0
.text:00404FE0                 jmp     ds:__imp_malloc
.text:00404FE0 malloc          endp
.text:00404FE0
.text:00404FE0 ; ---------------------------------------------------------------------------
.text:00404FE6                 align 10h
.text:00404FF0
.text:00404FF0 ; =============== S U B R O U T I N E =======================================
.text:00404FF0
.text:00404FF0 ; Attributes: thunk
.text:00404FF0
.text:00404FF0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00404FF0 strcmp          proc near               ; CODE XREF: sub_4047F4+180↑p
.text:00404FF0
.text:00404FF0 Str1            = dword ptr  4
.text:00404FF0 Str2            = dword ptr  8
.text:00404FF0
.text:00404FF0                 jmp     ds:__imp_strcmp
.text:00404FF0 strcmp          endp
.text:00404FF0
.text:00404FF0 ; ---------------------------------------------------------------------------
.text:00404FF6                 align 10h
.text:00405000
.text:00405000 ; =============== S U B R O U T I N E =======================================
.text:00405000
.text:00405000 ; Attributes: thunk
.text:00405000
.text:00405000 ; int __cdecl fflush(FILE *Stream)
.text:00405000 fflush          proc near               ; CODE XREF: sub_4046F0+19↑p
.text:00405000                                         ; sub_4046F0+81↑p ...
.text:00405000
.text:00405000 Stream          = dword ptr  4
.text:00405000
.text:00405000                 jmp     ds:__imp_fflush
.text:00405000 fflush          endp
.text:00405000
.text:00405000 ; ---------------------------------------------------------------------------
.text:00405006                 align 10h
.text:00405010
.text:00405010 ; =============== S U B R O U T I N E =======================================
.text:00405010
.text:00405010 ; Attributes: thunk
.text:00405010
.text:00405010 ; char *__cdecl strerror(int ErrorMessage)
.text:00405010 strerror        proc near               ; CODE XREF: sub_4046F0+A5↑p
.text:00405010                                         ; sub_4047F4+10F↑p
.text:00405010
.text:00405010 ErrorMessage    = dword ptr  4
.text:00405010
.text:00405010                 jmp     ds:__imp_strerror
.text:00405010 strerror        endp
.text:00405010
.text:00405010 ; ---------------------------------------------------------------------------
.text:00405016                 align 10h
.text:00405020
.text:00405020 ; =============== S U B R O U T I N E =======================================
.text:00405020
.text:00405020 ; Attributes: thunk
.text:00405020
.text:00405020 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405020 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405020
.text:00405020 lpTopLevelExceptionFilter= dword ptr  4
.text:00405020
.text:00405020                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405020 SetUnhandledExceptionFilter endp
.text:00405020
.text:00405020 ; ---------------------------------------------------------------------------
.text:00405026                 align 10h
.text:00405030
.text:00405030 ; =============== S U B R O U T I N E =======================================
.text:00405030
.text:00405030 ; Attributes: noreturn thunk
.text:00405030
.text:00405030 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405030 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405030
.text:00405030 uExitCode       = dword ptr  4
.text:00405030
.text:00405030                 jmp     ds:__imp_ExitProcess
.text:00405030 ExitProcess     endp
.text:00405030
.text:00405030 ; ---------------------------------------------------------------------------
.text:00405036                 align 10h
.text:00405040
.text:00405040 ; =============== S U B R O U T I N E =======================================
.text:00405040
.text:00405040 ; Attributes: thunk
.text:00405040
.text:00405040 ; DWORD __stdcall GetLastError()
.text:00405040 GetLastError    proc near               ; CODE XREF: sub_404C70+3↑p
.text:00405040                 jmp     ds:__imp_GetLastError
.text:00405040 GetLastError    endp
.text:00405040
.text:00405040 ; ---------------------------------------------------------------------------
.text:00405046                 align 10h
.text:00405050
.text:00405050 ; =============== S U B R O U T I N E =======================================
.text:00405050
.text:00405050 ; Attributes: thunk
.text:00405050
.text:00405050 ; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
.text:00405050 GetUserNameA    proc near               ; CODE XREF: sub_404990+1E↑p
.text:00405050
.text:00405050 lpBuffer        = dword ptr  4
.text:00405050 pcbBuffer       = dword ptr  8
.text:00405050
.text:00405050                 jmp     ds:__imp_GetUserNameA
.text:00405050 GetUserNameA    endp
.text:00405050
.text:00405050 ; ---------------------------------------------------------------------------
.text:00405056                 align 10h
.text:00405060 dword_405060    dd 0FFFFFFFFh           ; DATA XREF: .text:00404D19↑r
.text:00405060                                         ; .text:loc_404D40↑r ...
.text:00405064 dword_405064    dd 0                    ; DATA XREF: .text:loc_404D4C↑r
.text:00405064                                         ; sub_404D70:loc_404DBD↑r
.text:00405068                 dd 0FFFFFFFFh
.text:0040506C dword_40506C    dd 65h dup(0)           ; DATA XREF: .data:off_406084↓o
.text:00405200                 dd 380h dup(?)
.text:00405200 _text           ends
.text:00405200
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004600
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_401350+CE↑r
.data:00406010                                         ; sub_4024C0+3↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_4024C0+11↑r
.data:00406014                                         ; .text:00402561↑r ...
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_4024C0+7D↑w
.data:00406018                                         ; .text:004025CD↑w
.data:0040601C                 align 10h
.data:00406020 dword_406020    dd 1                    ; DATA XREF: sub_403CA0+22↑r
.data:00406020                                         ; sub_403CA0+65↑r ...
.data:00406024 dword_406024    dd 100h                 ; DATA XREF: sub_403CA0+3F↑o
.data:00406024                                         ; sub_403CA0+1A2↑r ...
.data:00406028 off_406028      dd offset unk_407040    ; DATA XREF: sub_403CA0+1AA↑r
.data:0040602C ; void *off_40602C
.data:0040602C off_40602C      dd offset dword_406024  ; DATA XREF: sub_403CA0+39↑r
.data:0040602C                                         ; sub_403CA0+60↑w ...
.data:00406030 ; char *Buffer
.data:00406030 Buffer          dd offset aCopyrightC2005
.data:00406030                                         ; DATA XREF: sub_404160+DC↑r
.data:00406030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406034                 align 10h
.data:00406040 ; int Code
.data:00406040 Code            dd 1                    ; DATA XREF: sub_4029F0+6D↑r
.data:00406040                                         ; sub_4029F0+9A↑r ...
.data:00406044                 align 10h
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_404D70+9↑r
.data:00406080                                         ; sub_404D70+1D↑w
.data:00406084 off_406084      dd offset dword_40506C  ; DATA XREF: sub_404CE0+6↑r
.data:00406084                                         ; sub_404CE0+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000340 (    832.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: sub_4024C0+9↑o
.bss:00407000                                         ; sub_4024C0+17↑w ...
.bss:00407004 dword_407004    dd ?                    ; DATA XREF: sub_4024C0+21↑w
.bss:00407004                                         ; .text:00402579↑w
.bss:00407008 dword_407008    dd ?                    ; DATA XREF: sub_4024C0+77↑r
.bss:00407008                                         ; .text:004025C7↑r
.bss:0040700C dword_40700C    dd ?                    ; DATA XREF: sub_4024C0+6B↑r
.bss:0040700C                                         ; .text:004025BB↑r
.bss:00407010                 db    ? ;
.bss:00407011                 db    ? ;
.bss:00407012                 db    ? ;
.bss:00407013                 db    ? ;
.bss:00407014                 db    ? ;
.bss:00407015                 db    ? ;
.bss:00407016                 db    ? ;
.bss:00407017                 db    ? ;
.bss:00407018                 db    ? ;
.bss:00407019                 db    ? ;
.bss:0040701A                 db    ? ;
.bss:0040701B                 db    ? ;
.bss:0040701C                 db    ? ;
.bss:0040701D                 db    ? ;
.bss:0040701E                 db    ? ;
.bss:0040701F                 db    ? ;
.bss:00407020                 db    ? ;
.bss:00407021                 db    ? ;
.bss:00407022                 db    ? ;
.bss:00407023                 db    ? ;
.bss:00407024                 db    ? ;
.bss:00407025                 db    ? ;
.bss:00407026                 db    ? ;
.bss:00407027                 db    ? ;
.bss:00407028                 db    ? ;
.bss:00407029                 db    ? ;
.bss:0040702A                 db    ? ;
.bss:0040702B                 db    ? ;
.bss:0040702C                 db    ? ;
.bss:0040702D                 db    ? ;
.bss:0040702E                 db    ? ;
.bss:0040702F                 db    ? ;
.bss:00407030 ; char *dword_407030
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: .text:004029C4↑w
.bss:00407030                                         ; sub_4029F0+58↑r
.bss:00407034                 align 10h
.bss:00407040 unk_407040      db    ? ;               ; DATA XREF: sub_403CA0+100↑o
.bss:00407040                                         ; .data:off_406028↑o
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140 dword_407140    dd ?                    ; DATA XREF: .text:loc_403631↑o
.bss:00407140                                         ; .text:loc_403650↑o ...
.bss:00407144 dword_407144    dd ?                    ; DATA XREF: .text:loc_4036D0↑o
.bss:00407144                                         ; .text:00403B58↑r ...
.bss:00407148 dword_407148    dd ?                    ; DATA XREF: .text:00403B52↑r
.bss:00407148                                         ; sub_403C00+2C↑r
.bss:0040714C dword_40714C    dd ?                    ; DATA XREF: .text:00403B46↑r
.bss:0040714C                                         ; sub_403C00+22↑r
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:00403B62↑r
.bss:00407150                                         ; sub_403C00+36↑r
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:00403B72↑r
.bss:00407154                                         ; sub_403C00+4E↑r
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:00403B8F↑r
.bss:00407158                                         ; sub_403C00+62↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00403B85↑r
.bss:0040715C                                         ; sub_403C00+70↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:00403B68↑r
.bss:00407160                                         ; sub_403C00+7A↑r
.bss:00407164                 align 10h
.bss:00407170 ; char *Str1
.bss:00407170 Str1            dd ?                    ; DATA XREF: sub_4047F4:loc_40482D↑w
.bss:00407170                                         ; sub_4047F4:loc_404960↑r
.bss:00407174                 align 10h
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: sub_4047F4+2D↑r
.bss:00407180                                         ; sub_4047F4+3F↑w
.bss:00407184                 align 10h
.bss:00407190 ; CHAR byte_407190[272]
.bss:00407190 byte_407190     db 110h dup(?)          ; DATA XREF: sub_404990+17↑o
.bss:00407190                                         ; sub_404990+26↑o
.bss:004072A0 dword_4072A0    dd ?                    ; DATA XREF: sub_401350+2E↑w
.bss:004072A0                                         ; sub_401350+16B↑r ...
.bss:004072A4                 align 20h
.bss:004072C0 dword_4072C0    dd ?                    ; DATA XREF: sub_4024C0+71↑w
.bss:004072C0                                         ; .text:004025C1↑w
.bss:004072C4                 align 10h
.bss:004072D0 dword_4072D0    dd ?                    ; CODE XREF: sub_4047F4+63↑p
.bss:004072D0                                         ; DATA XREF: sub_4046F0+1E↑r ...
.bss:004072D4                 align 10h
.bss:004072E0 dword_4072E0    dd ?                    ; DATA XREF: sub_4046F0+4E↑w
.bss:004072E0                                         ; sub_4047F4+AB↑w
.bss:004072E4                 db    ? ;
.bss:004072E5                 db    ? ;
.bss:004072E6                 db    ? ;
.bss:004072E7                 db    ? ;
.bss:004072E8                 db    ? ;
.bss:004072E9                 db    ? ;
.bss:004072EA                 db    ? ;
.bss:004072EB                 db    ? ;
.bss:004072EC                 db    ? ;
.bss:004072ED                 db    ? ;
.bss:004072EE                 db    ? ;
.bss:004072EF                 db    ? ;
.bss:004072F0                 db    ? ;
.bss:004072F1                 db    ? ;
.bss:004072F2                 db    ? ;
.bss:004072F3                 db    ? ;
.bss:004072F4                 db    ? ;
.bss:004072F5                 db    ? ;
.bss:004072F6                 db    ? ;
.bss:004072F7                 db    ? ;
.bss:004072F8                 db    ? ;
.bss:004072F9                 db    ? ;
.bss:004072FA                 db    ? ;
.bss:004072FB                 db    ? ;
.bss:004072FC                 db    ? ;
.bss:004072FD                 db    ? ;
.bss:004072FE                 db    ? ;
.bss:004072FF                 db    ? ;
.bss:00407300                 db    ? ;
.bss:00407301                 db    ? ;
.bss:00407302                 db    ? ;
.bss:00407303                 db    ? ;
.bss:00407304                 db    ? ;
.bss:00407305                 db    ? ;
.bss:00407306                 db    ? ;
.bss:00407307                 db    ? ;
.bss:00407308                 db    ? ;
.bss:00407309                 db    ? ;
.bss:0040730A                 db    ? ;
.bss:0040730B                 db    ? ;
.bss:0040730C                 db    ? ;
.bss:0040730D                 db    ? ;
.bss:0040730E                 db    ? ;
.bss:0040730F                 db    ? ;
.bss:00407310 dword_407310    dd ?                    ; DATA XREF: sub_4047F4+13↑r
.bss:00407314                 align 1000h
.bss:00407314 _bss            ends
.bss:00407314
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 000005A4 (   1444.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00004800
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:0040815C ;
.idata:0040815C ; Imports from libintl3.dll
.idata:0040815C ;
.idata:0040815C                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040815C                                         ; CODE XREF: sub_401350+48↑p
.idata:0040815C                                         ; DATA XREF: sub_401350+48↑r ...
.idata:00408160                 extrn libintl_gettext:dword
.idata:00408160                                         ; CODE XREF: sub_401350+FB↑p
.idata:00408160                                         ; sub_401350+136↑p ...
.idata:00408164                 extrn libintl_textdomain:dword
.idata:00408164                                         ; CODE XREF: sub_401350+55↑p
.idata:00408164                                         ; DATA XREF: sub_401350+55↑r ...
.idata:00408168
.idata:00408170 ;
.idata:00408170 ; Imports from ADVAPI32.DLL
.idata:00408170 ;
.idata:00408170 ; BOOL (__stdcall *GetUserNameA)(LPSTR lpBuffer, LPDWORD pcbBuffer)
.idata:00408170                 extrn __imp_GetUserNameA:dword
.idata:00408170                                         ; DATA XREF: GetUserNameA↑r
.idata:00408174
.idata:0040817C ;
.idata:0040817C ; Imports from KERNEL32.dll
.idata:0040817C ;
.idata:0040817C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040817C                 extrn __imp_ExitProcess:dword
.idata:0040817C                                         ; DATA XREF: ExitProcess↑r
.idata:00408180 ; DWORD (__stdcall *GetLastError)()
.idata:00408180                 extrn __imp_GetLastError:dword
.idata:00408180                                         ; DATA XREF: GetLastError↑r
.idata:00408184 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00408184                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00408184                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408188
.idata:00408190 ;
.idata:00408190 ; Imports from MSVCP60.DLL
.idata:00408190 ;
.idata:00408190 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00408190                 extrn __imp_mbrtowc:dword
.idata:00408190                                         ; DATA XREF: mbrtowc↑r
.idata:00408194
.idata:0040819C ;
.idata:0040819C ; Imports from msvcrt.dll
.idata:0040819C ;
.idata:0040819C                 extrn __imp___getmainargs:dword
.idata:0040819C                                         ; DATA XREF: __getmainargs↑r
.idata:004081A0 ; int _mb_cur_max
.idata:004081A0                 extrn __mb_cur_max:dword
.idata:004081A0                                         ; DATA XREF: sub_402B60+7↑r
.idata:004081A0                                         ; sub_402B60+5F3↑r
.idata:004081A4 ; char ***(__cdecl *__p__environ)()
.idata:004081A4                 extrn __imp___p__environ:dword
.idata:004081A4                                         ; DATA XREF: __p__environ↑r
.idata:004081A8 ; int *(__cdecl *__p__fmode)()
.idata:004081A8                 extrn __imp___p__fmode:dword
.idata:004081A8                                         ; DATA XREF: __p__fmode↑r
.idata:004081AC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004081AC                 extrn __set_app_type:dword
.idata:004081AC                                         ; CODE XREF: start+D↑p
.idata:004081AC                                         ; .text:0040102D↑p
.idata:004081AC                                         ; DATA XREF: ...
.idata:004081B0 ; void (__cdecl *_cexit)()
.idata:004081B0                 extrn __imp__cexit:dword
.idata:004081B0                                         ; DATA XREF: _cexit↑r
.idata:004081B4 ; int *(__cdecl *_errno)()
.idata:004081B4                 extrn __imp__errno:dword
.idata:004081B4                                         ; DATA XREF: _errno↑r
.idata:004081B8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081B8                 extrn __imp__flsbuf:dword
.idata:004081B8                                         ; DATA XREF: _flsbuf↑r
.idata:004081BC ; FILE iob[]
.idata:004081BC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081BC                                         ; sub_401080+75↑r ...
.idata:004081C0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081C0                 extrn __imp__isctype:dword
.idata:004081C0                                         ; DATA XREF: _isctype↑r
.idata:004081C4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081C4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081C4                                         ; DATA XREF: .text:0040106C↑r
.idata:004081C8 ; const unsigned __int16 *pctype
.idata:004081C8                 extrn _pctype:dword     ; DATA XREF: sub_402B60:loc_403254↑r
.idata:004081CC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081CC                 extrn __imp__setmode:dword
.idata:004081CC                                         ; DATA XREF: _setmode↑r
.idata:004081D0 ; void (__cdecl __noreturn *abort)()
.idata:004081D0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081D4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081D4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081D4                                         ; DATA XREF: sub_401040+C↑r
.idata:004081D8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081D8                 extrn __imp_calloc:dword
.idata:004081D8                                         ; DATA XREF: calloc↑r
.idata:004081DC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081DC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081E0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081E0                 extrn __imp_fclose:dword
.idata:004081E0                                         ; DATA XREF: fclose↑r
.idata:004081E4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081E4                 extrn __imp_fflush:dword
.idata:004081E4                                         ; DATA XREF: fflush↑r
.idata:004081E8 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081E8                 extrn __imp_fprintf:dword
.idata:004081E8                                         ; DATA XREF: fprintf↑r
.idata:004081EC ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081EC                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081F0 ; void (__cdecl *free)(void *Block)
.idata:004081F0                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081F4 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081F4                 extrn __imp_getenv:dword
.idata:004081F4                                         ; DATA XREF: getenv↑r
.idata:004081F8 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081F8                 extrn __imp_iswctype:dword
.idata:004081F8                                         ; DATA XREF: iswctype↑r
.idata:004081FC ; void *(__cdecl *malloc)(size_t Size)
.idata:004081FC                 extrn __imp_malloc:dword
.idata:004081FC                                         ; DATA XREF: malloc↑r
.idata:00408200 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00408200                 extrn __imp_memcpy:dword
.idata:00408200                                         ; DATA XREF: memcpy↑r
.idata:00408204 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00408204                 extrn __imp_memset:dword
.idata:00408204                                         ; DATA XREF: memset↑r
.idata:00408208 ; int (*printf)(const char *const Format, ...)
.idata:00408208                 extrn __imp_printf:dword
.idata:00408208                                         ; DATA XREF: printf↑r
.idata:0040820C ; int (__cdecl *puts)(const char *Buffer)
.idata:0040820C                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:00408210 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00408210                 extrn __imp_realloc:dword
.idata:00408210                                         ; DATA XREF: realloc↑r
.idata:00408214 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00408214                 extrn __imp_setlocale:dword
.idata:00408214                                         ; DATA XREF: setlocale↑r
.idata:00408218 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408218                 extrn __imp_signal:dword
.idata:00408218                                         ; DATA XREF: signal↑r
.idata:0040821C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040821C                 extrn __imp_strchr:dword
.idata:0040821C                                         ; DATA XREF: strchr↑r
.idata:00408220 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00408220                 extrn __imp_strcmp:dword
.idata:00408220                                         ; DATA XREF: strcmp↑r
.idata:00408224 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408224                 extrn __imp_strerror:dword
.idata:00408224                                         ; DATA XREF: strerror↑r
.idata:00408228 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408228                 extrn __imp_strlen:dword
.idata:00408228                                         ; DATA XREF: strlen↑r
.idata:0040822C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040822C                 extrn __imp_strncmp:dword
.idata:0040822C                                         ; DATA XREF: strncmp↑r
.idata:00408230 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408230                 extrn __imp_vfprintf:dword
.idata:00408230                                         ; DATA XREF: vfprintf↑r
.idata:00408234
.idata:00408234
.idata:00408234
.idata:00408234                 end start
