.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 0DB7176D6B10DA94A7ABB592D50B3FD42D853A779F8674885E50B6C63B7B63CA
.text:00401000 ; Input MD5    : 4DE87D064877FA6726654F6812A719B0
.text:00401000 ; Input CRC32  : 9F5FDAED
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/sort.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A25D (Wed Apr 20 18:41:33 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00015040 (  86080.)
.text:00401000 ; Section size in file          : 00015200 (  86528.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4021E0+D7↓p
.text:00401040                                         ; sub_4021E0+E9↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_414C50
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_417000
.text:004010A2                 mov     edx, dword_417130
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_417004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_417150, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_417150
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_414C20
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_417000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_417004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4021E0
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; uExitCode
.text:00401174                 call    ExitProcess
.text:00401174 sub_401080      endp
.text:00401174
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_414C50
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 dword_401280    dd 525041h, 475541h, 434544h, 424546h, 4E414Ah, 4C554Ah
.text:00401280                                         ; DATA XREF: .data:off_417030↓o
.text:00401280                 dd 4E554Ah, 52414Dh, 59414Dh, 564F4Eh, 54434Fh, 504553h
.text:004012B0 aIgnoreLeadingB db 'ignore-leading-blanks',0
.text:004012B0                                         ; DATA XREF: .text:off_4013A0↓o
.text:004012C6 aCheck          db 'check',0            ; DATA XREF: .text:004013B0↓o
.text:004012CC aDictionaryOrde db 'dictionary-order',0 ; DATA XREF: .text:004013C0↓o
.text:004012DD aIgnoreCase     db 'ignore-case',0      ; DATA XREF: .text:004013D0↓o
.text:004012E9 aGeneralNumeric db 'general-numeric-sort',0
.text:004012FE aIgnoreNonprint db 'ignore-nonprinting',0
.text:004012FE                                         ; DATA XREF: .text:004013F0↓o
.text:00401311 aKey            db 'key',0              ; DATA XREF: .text:00401400↓o
.text:00401315 aMerge          db 'merge',0            ; DATA XREF: .text:00401410↓o
.text:0040131B aMonthSort      db 'month-sort',0       ; DATA XREF: .text:00401420↓o
.text:00401326 aNumericSort    db 'numeric-sort',0     ; DATA XREF: .text:00401430↓o
.text:00401333 aOutput         db 'output',0           ; DATA XREF: .text:00401440↓o
.text:0040133A aReverse        db 'reverse',0          ; DATA XREF: .text:00401450↓o
.text:00401342 aStable         db 'stable',0           ; DATA XREF: .text:00401460↓o
.text:00401349 aBufferSize     db 'buffer-size',0      ; DATA XREF: .text:00401470↓o
.text:00401355 aFieldSeparator db 'field-separator',0  ; DATA XREF: .text:00401480↓o
.text:00401365 aTemporaryDirec db 'temporary-directory',0
.text:00401365                                         ; DATA XREF: .text:00401490↓o
.text:00401379 aUnique         db 'unique',0           ; DATA XREF: .text:004014A0↓o
.text:00401380 aZeroTerminated db 'zero-terminated',0  ; DATA XREF: .text:004014B0↓o
.text:00401390 aHelp           db 'help',0             ; DATA XREF: .text:004014C0↓o
.text:00401395 aVersion        db 'version',0          ; DATA XREF: .text:004014D0↓o
.text:0040139D                 align 10h
.text:004013A0 off_4013A0      dd offset aIgnoreLeadingB
.text:004013A0                                         ; DATA XREF: sub_4021E0+6C1↓o
.text:004013A0                                         ; "ignore-leading-blanks"
.text:004013A4                 dd 2 dup(0)
.text:004013AC                 dd 62h
.text:004013B0                 dd offset aCheck        ; "check"
.text:004013B4                 dd 2 dup(0)
.text:004013BC                 dd 63h
.text:004013C0                 dd offset aDictionaryOrde ; "dictionary-order"
.text:004013C4                 dd 2 dup(0)
.text:004013CC                 dd 64h
.text:004013D0                 dd offset aIgnoreCase   ; "ignore-case"
.text:004013D4                 dd 2 dup(0)
.text:004013DC                 dd 66h
.text:004013E0 ; ---------------------------------------------------------------------------
.text:004013E0                 jmp     loc_4053F7
.text:004013E0 ; ---------------------------------------------------------------------------
.text:004013E5                 align 4
.text:004013E8                 dd 0
.text:004013EC                 dd 67h
.text:004013F0                 dd offset aIgnoreNonprint ; "ignore-nonprinting"
.text:004013F4                 dd 2 dup(0)
.text:004013FC                 dd 69h
.text:00401400                 dd offset aKey          ; "key"
.text:00401404                 dd 1, 0
.text:0040140C                 dd 6Bh
.text:00401410                 dd offset aMerge        ; "merge"
.text:00401414                 dd 2 dup(0)
.text:0040141C                 dd 6Dh
.text:00401420                 dd offset aMonthSort    ; "month-sort"
.text:00401424                 dd 2 dup(0)
.text:0040142C                 dd 4Dh
.text:00401430                 dd offset aNumericSort  ; "numeric-sort"
.text:00401434                 dd 2 dup(0)
.text:0040143C                 dd 6Eh
.text:00401440                 dd offset aOutput       ; "output"
.text:00401444                 dd 1, 0
.text:0040144C                 dd 6Fh
.text:00401450                 dd offset aReverse      ; "reverse"
.text:00401454                 dd 2 dup(0)
.text:0040145C                 dd 72h
.text:00401460                 dd offset aStable       ; "stable"
.text:00401464                 dd 2 dup(0)
.text:0040146C                 dd 73h
.text:00401470                 dd offset aBufferSize   ; "buffer-size"
.text:00401474                 dd 1, 0
.text:0040147C                 dd 53h
.text:00401480                 dd offset aFieldSeparator ; "field-separator"
.text:00401484                 dd 1, 0
.text:0040148C                 dd 74h
.text:00401490                 dd offset aTemporaryDirec ; "temporary-directory"
.text:00401494                 dd 1, 0
.text:0040149C                 dd 54h
.text:004014A0                 dd offset aUnique       ; "unique"
.text:004014A4                 dd 2 dup(0)
.text:004014AC                 dd 75h
.text:004014B0                 dd offset aZeroTerminated ; "zero-terminated"
.text:004014B4                 dd 2 dup(0)
.text:004014BC                 dd 7Ah
.text:004014C0                 dd offset aHelp         ; "help"
.text:004014C4                 dd 2 dup(0)
.text:004014CC                 dd 0FFFFFF7Eh
.text:004014D0                 dd offset aVersion      ; "version"
.text:004014D4                 dd 2 dup(0)
.text:004014DC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004014F0 dword_4014F0    dd 726F732Fh            ; DATA XREF: sub_404600+A0↓r
.text:004014F0                                         ; sub_404600+2B8↓r ...
.text:004014F4 dword_4014F4    dd 58585874h            ; DATA XREF: sub_404600+A6↓r
.text:004014F4                                         ; sub_404600+2BE↓r ...
.text:004014F8 dword_4014F8    dd 585858h              ; DATA XREF: sub_404600+AC↓r
.text:004014F8                                         ; sub_404600+2C4↓r ...
.text:004014FC ; const int Signal
.text:004014FC Signal          dd 2                    ; DATA XREF: sub_4021E0+22D↓r
.text:00401500                 dd 0Fh
.text:00401504 ; const char VarName[]
.text:00401504 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4021E0+39↓o
.text:00401514 aBcdfgikMmnoRss db '-bcdfgik:mMno:rsS:t:T:uzy::',0
.text:00401514                                         ; DATA XREF: sub_4021E0+6C↓o
.text:00401530 asc_401530      db '-',0                ; DATA XREF: sub_4021E0+7A↓o
.text:00401530                                         ; sub_4021E0+534↓o ...
.text:00401532 ; const char Locale
.text:00401532 Locale          db 0                    ; DATA XREF: sub_4021E0+94↓o
.text:00401532                                         ; sub_4021E0+7F4↓o ...
.text:00401533                 align 10h
.text:00401540 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401540                                         ; DATA XREF: sub_4021E0+AE↓o
.text:00401563 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4021E0+B6↓o
.text:00401563                                         ; sub_4021E0+C3↓o
.text:0040156D                 align 20h
.text:00401580 aExtraOperandSN db 'extra operand %s not allowed with -c',0
.text:00401580                                         ; DATA XREF: sub_4021E0+453↓o
.text:004015A5                 align 20h
.text:004015C0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004015C0                                         ; DATA XREF: sub_4021E0:loc_40265E↓o
.text:004015C0                                         ; .text:00403A2C↓o
.text:004015E7 aCloseFailed    db 'close failed',0     ; DATA XREF: sub_4021E0:loc_40270D↓o
.text:004015E7                                         ; sub_403F30:loc_40428D↓o ...
.text:004015F4 ; const char aSS[]
.text:004015F4 aSS             db '%s: %s',0           ; DATA XREF: sub_4021E0+552↓o
.text:004015F4                                         ; sub_403F30:loc_4042B4↓o ...
.text:004015FB aStandardOutput db 'standard output',0  ; DATA XREF: sub_4021E0:loc_402751↓o
.text:004015FB                                         ; sub_403F30:loc_4042DA↓o ...
.text:0040160B ; const char aTmpdir[]
.text:0040160B aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_4021E0:loc_402789↓o
.text:00401612 aTmp            db '/tmp',0             ; DATA XREF: sub_4021E0:loc_4027EF↓o
.text:00401612                                         ; sub_4021E0+D96↓o ...
.text:00401617 ; const char aTmp_0[]
.text:00401617 aTmp_0          db 'TMP',0              ; DATA XREF: sub_4021E0:loc_4027F6↓o
.text:0040161B ; const char aTemp[]
.text:0040161B aTemp           db 'TEMP',0             ; DATA XREF: sub_4021E0+626↓o
.text:00401620 aInvalidNumberA db 'invalid number after `-',27h,0
.text:00401620                                         ; DATA XREF: sub_4021E0:loc_402B79↓o
.text:00401620                                         ; sub_4021E0:loc_402D74↓o
.text:00401639 aSCountSTooLarg db '%s: count `%.*s',27h,' too large',0
.text:00401639                                         ; DATA XREF: sub_4021E0+9AB↓o
.text:00401639                                         ; sub_4021E0+AEB↓o ...
.text:00401654 aStrayCharacter db 'stray character in field spec',0
.text:00401654                                         ; DATA XREF: sub_4021E0+A1B↓o
.text:00401654                                         ; sub_4021E0:loc_4032DE↓o
.text:00401672                 align 10h
.text:00401680 aSInvalidFieldS db '%s: invalid field specification `%s',27h,0
.text:00401680                                         ; DATA XREF: sub_4021E0+A28↓o
.text:00401680                                         ; sub_4021E0+1111↓o
.text:004016A5 aInvalidNumberA_0 db 'invalid number after `.',27h,0
.text:004016A5                                         ; DATA XREF: sub_4021E0:loc_402CB9↓o
.text:004016A5                                         ; sub_4021E0:loc_402D23↓o ...
.text:004016BE                 align 10h
.text:004016C0 aSInvalidCountA db '%s: invalid count at start of `%s',27h,0
.text:004016C0                                         ; DATA XREF: sub_4021E0+B55↓o
.text:004016C0                                         ; sub_4021E0+BAA↓o ...
.text:004016E3 aPaulEggert     db 'Paul Eggert',0      ; DATA XREF: sub_4021E0+C86↓o
.text:004016EF aMikeHaertel    db 'Mike Haertel',0     ; DATA XREF: sub_4021E0+C8E↓o
.text:004016FC a530            db '5.3.0',0            ; DATA XREF: sub_4021E0+C99↓o
.text:00401702 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4021E0+CA1↓o
.text:00401710 ; const FILE stru_401710
.text:00401710 stru_401710     FILE <74726F73h, 26748D00h, 27BC8D00h, 0, 67617355h, 25203A65h, \
.text:00401710                                         ; DATA XREF: sub_4021E0+CA9↓o
.text:00401710                       4F5B2073h, 4F495450h>
.text:00401730                 db  4Eh ; N
.text:00401731                 db  5Dh ; ]
.text:00401732                 db  2Eh ; .
.text:00401733                 db  2Eh ; .
.text:00401734                 db  2Eh ; .
.text:00401735                 db  20h
.text:00401736                 db  5Bh ; [
.text:00401737                 db  46h ; F
.text:00401738                 db  49h ; I
.text:00401739                 db  4Ch ; L
.text:0040173A                 db  45h ; E
.text:0040173B                 db  5Dh ; ]
.text:0040173C                 db  2Eh ; .
.text:0040173D                 db  2Eh ; .
.text:0040173E                 db  2Eh ; .
.text:0040173F                 db  0Ah
.text:00401740                 db    0
.text:00401741                 align 20h
.text:00401760 aWriteSortedCon db 'Write sorted concatenation of all FILE(s) to standard output.',0Ah
.text:00401760                                         ; DATA XREF: sub_4021E0+CDF↓o
.text:00401760                                         ; .text:00403A7F↓o
.text:00401760                 db 0Ah
.text:00401760                 db 'Ordering options:',0Ah
.text:00401760                 db 0Ah,0
.text:004017B3                 align 10h
.text:004017C0 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:004017C0                                         ; DATA XREF: sub_4021E0+D01↓o
.text:004017C0                                         ; .text:00403AA1↓o
.text:004017C0                 db 'ns too.',0Ah,0
.text:0040180A                 align 20h
.text:00401820 aBIgnoreLeading db '  -b, --ignore-leading-blanks ignore leading blanks',0Ah
.text:00401820                                         ; DATA XREF: sub_4021E0+D23↓o
.text:00401820                                         ; .text:00403AC3↓o
.text:00401820                 db '  -d, --dictionary-order      consider only blanks and alphanumer'
.text:00401820                 db 'ic characters',0Ah
.text:00401820                 db '  -f, --ignore-case           fold lower case to upper case chara'
.text:00401820                 db 'cters',0Ah,0
.text:004018EB                 align 20h
.text:00401900 aGGeneralNumeri db '  -g, --general-numeric-sort  compare according to general numeri'
.text:00401900                                         ; DATA XREF: sub_4021E0+D45↓o
.text:00401900                                         ; .text:00403AE5↓o
.text:00401900                 db 'cal value',0Ah
.text:00401900                 db '  -i, --ignore-nonprinting    consider only printable characters',0Ah
.text:00401900                 db '  -M, --month-sort            compare (unknown) < `JAN',27h,' < .'
.text:00401900                 db '.. < `DEC',27h,0Ah
.text:00401900                 db '  -n, --numeric-sort          compare according to string numeric'
.text:00401900                 db 'al value',0Ah
.text:00401900                 db '  -r, --reverse               reverse the result of comparisons',0Ah
.text:00401900                 db 0Ah,0
.text:00401A5E                 align 10h
.text:00401A60 aOtherOptionsCC db 'Other options:',0Ah ; DATA XREF: sub_4021E0+D67↓o
.text:00401A60                                         ; .text:00403B07↓o
.text:00401A60                 db 0Ah
.text:00401A60                 db '  -c, --check               check whether input is sorted; do not'
.text:00401A60                 db ' sort',0Ah
.text:00401A60                 db '  -k, --key=POS1[,POS2]     start a key at POS1, end it at POS 2 '
.text:00401A60                 db '(origin 1)',0Ah
.text:00401A60                 db '  -m, --merge               merge already sorted files; do not so'
.text:00401A60                 db 'rt',0Ah
.text:00401A60                 db '  -o, --output=FILE         write result to FILE instead of stand'
.text:00401A60                 db 'ard output',0Ah
.text:00401A60                 db '  -s, --stable              stabilize sort by disabling last-reso'
.text:00401A60                 db 'rt comparison',0Ah
.text:00401A60                 db '  -S, --buffer-size=SIZE    use SIZE for main memory buffer',0Ah,0
.text:00401C1F                 align 10h
.text:00401C20 aTFieldSeparato db '  -t, --field-separator=SEP use SEP instead of non-blank to blank'
.text:00401C20                                         ; DATA XREF: sub_4021E0+D89↓o
.text:00401C20                                         ; .text:00403B29↓o
.text:00401C20                 db ' transition',0Ah
.text:00401C20                 db '  -T, --temporary-directory=DIR  use DIR for temporaries, not $TM'
.text:00401C20                 db 'PDIR or %s;',0Ah
.text:00401C20                 db '                              multiple options specify multiple d'
.text:00401C20                 db 'irectories',0Ah
.text:00401C20                 db '  -u, --unique              with -c, check for strict ordering;',0Ah
.text:00401C20                 db '                              without -c, output only the first o'
.text:00401C20                 db 'f an equal run',0Ah,0
.text:00401D97                 align 10h
.text:00401DA0 aZZeroTerminate db '  -z, --zero-terminated     end lines with 0 byte, not newline',0Ah
.text:00401DA0                                         ; DATA XREF: sub_4021E0+DA6↓o
.text:00401DA0                                         ; .text:00403B46↓o
.text:00401DA0                 db 0
.text:00401DE0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401DE0                                         ; DATA XREF: sub_4021E0+DC8↓o
.text:00401DE0                                         ; .text:00403B68↓o
.text:00401E0D                 align 20h
.text:00401E20 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401E20                                         ; DATA XREF: sub_4021E0+DEA↓o
.text:00401E20                                         ; .text:00403B8A↓o
.text:00401E56                 align 10h
.text:00401E60 aPosIsFCOptsWhe db 0Ah                  ; DATA XREF: sub_4021E0+E0C↓o
.text:00401E60                                         ; .text:00403BAC↓o
.text:00401E60                 db 'POS is F[.C][OPTS], where F is the field number and C the charact'
.text:00401E60                 db 'er position',0Ah
.text:00401E60                 db 'in the field.  OPTS is one or more single-letter ordering options'
.text:00401E60                 db ', which',0Ah
.text:00401E60                 db 'override global ordering options for that key.  If no key is give'
.text:00401E60                 db 'n, use the',0Ah
.text:00401E60                 db 'entire line as the key.',0Ah
.text:00401E60                 db 0Ah
.text:00401E60                 db 'SIZE may be followed by the following multiplicative suffixes:',0Ah
.text:00401E60                 db 0
.text:00401F9C                 align 10h
.text:00401FA0 a1OfMemoryB1K10 db '% 1% of memory, b 1, K 1024 (default), and so on for M, G, T, P, '
.text:00401FA0                                         ; DATA XREF: sub_4021E0+E2E↓o
.text:00401FA0                                         ; .text:00403BCE↓o
.text:00401FA0                 db 'E, Z, Y.',0Ah
.text:00401FA0                 db 0Ah
.text:00401FA0                 db 'With no FILE, or when FILE is -, read standard input.',0Ah
.text:00401FA0                 db 0Ah
.text:00401FA0                 db '*** WARNING ***',0Ah
.text:00401FA0                 db 'The locale specified by the environment affects sort order.',0Ah
.text:00401FA0                 db 'Set LC_ALL=C to get the traditional sort order that uses',0Ah
.text:00401FA0                 db 'native byte values.',0Ah,0
.text:004020BC aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4021E0+E50↓o
.text:004020BC                                         ; .text:00403BF0↓o
.text:004020BC                 db 'Report bugs to <%s>.',0Ah,0
.text:004020D3 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004020D3                                         ; DATA XREF: sub_4021E0+E5D↓o
.text:004020D3                                         ; .text:00403BFD↓o
.text:004020E9 aInvalidNumberA_1 db 'invalid number at field start',0
.text:004020E9                                         ; DATA XREF: sub_4021E0:loc_4031F0↓o
.text:004020E9                                         ; sub_4021E0:loc_403733↓o
.text:00402107 aInvalidNumberA_2 db 'invalid number after `,',27h,0
.text:00402107                                         ; DATA XREF: sub_4021E0:loc_403392↓o
.text:00402107                                         ; sub_4021E0:loc_403587↓o
.text:00402120 aFieldNumberIsZ db 'field number is zero',0
.text:00402120                                         ; DATA XREF: sub_4021E0:loc_403570↓o
.text:00402135 aCharacterOffse db 'character offset is zero',0
.text:00402135                                         ; DATA XREF: sub_4021E0+14EB↓o
.text:0040214E                 align 20h
.text:00402160 aMultipleOutput db 'multiple output files specified',0
.text:00402160                                         ; DATA XREF: sub_4021E0:loc_4037D4↓o
.text:00402180 a0              db '\0',0               ; DATA XREF: sub_4021E0+1679↓o
.text:00402183 aIncompatibleTa db 'incompatible tabs',0
.text:00402183                                         ; DATA XREF: sub_4021E0+16A7↓o
.text:00402195 aMultiCharacter db 'multi-character tab `%s',27h,0
.text:00402195                                         ; DATA XREF: sub_4021E0:loc_4038B7↓o
.text:004021AE aEmptyTab       db 'empty tab',0        ; DATA XREF: sub_4021E0:loc_4038E8↓o
.text:004021B8 aBcdfgikMmnoRss_0 db '-bcdfgik:mMno:rsS:t:T:uzy:',0
.text:004021B8                                         ; DATA XREF: sub_4021E0:loc_403A0D↓o
.text:004021D3                 align 10h
.text:004021E0
.text:004021E0 ; =============== S U B R O U T I N E =======================================
.text:004021E0
.text:004021E0 ; Attributes: bp-based frame fuzzy-sp
.text:004021E0
.text:004021E0 sub_4021E0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004021E0
.text:004021E0 VarName         = dword ptr -168h
.text:004021E0 Locale          = dword ptr -164h
.text:004021E0 var_160         = dword ptr -160h
.text:004021E0 var_15C         = dword ptr -15Ch
.text:004021E0 Str             = dword ptr -158h
.text:004021E0 var_154         = dword ptr -154h
.text:004021E0 var_150         = dword ptr -150h
.text:004021E0 var_13C         = dword ptr -13Ch
.text:004021E0 var_12D         = byte ptr -12Dh
.text:004021E0 var_128         = dword ptr -128h
.text:004021E0 var_120         = dword ptr -120h
.text:004021E0 var_118         = dword ptr -118h
.text:004021E0 var_110         = dword ptr -110h
.text:004021E0 var_10C         = dword ptr -10Ch
.text:004021E0 var_104         = dword ptr -104h
.text:004021E0 var_FC          = dword ptr -0FCh
.text:004021E0 var_F8          = dword ptr -0F8h
.text:004021E0 Block           = dword ptr -0ECh
.text:004021E0 var_E5          = byte ptr -0E5h
.text:004021E0 Str1            = dword ptr -0E4h
.text:004021E0 var_E0          = dword ptr -0E0h
.text:004021E0 var_DC          = dword ptr -0DCh
.text:004021E0 var_D6          = byte ptr -0D6h
.text:004021E0 var_D5          = byte ptr -0D5h
.text:004021E0 var_D4          = dword ptr -0D4h
.text:004021E0 var_CE          = byte ptr -0CEh
.text:004021E0 var_CD          = byte ptr -0CDh
.text:004021E0 var_CC          = dword ptr -0CCh
.text:004021E0 var_C8          = dword ptr -0C8h
.text:004021E0 var_C4          = dword ptr -0C4h
.text:004021E0 var_C0          = dword ptr -0C0h
.text:004021E0 var_BC          = dword ptr -0BCh
.text:004021E0 var_B4          = dword ptr -0B4h
.text:004021E0 var_B0          = dword ptr -0B0h
.text:004021E0 var_AC          = dword ptr -0ACh
.text:004021E0 var_A4          = dword ptr -0A4h
.text:004021E0 var_A0          = dword ptr -0A0h
.text:004021E0 var_9C          = dword ptr -9Ch
.text:004021E0 var_94          = dword ptr -94h
.text:004021E0 var_90          = dword ptr -90h
.text:004021E0 var_8C          = dword ptr -8Ch
.text:004021E0 var_86          = word ptr -86h
.text:004021E0 var_84          = dword ptr -84h
.text:004021E0 var_80          = dword ptr -80h
.text:004021E0 var_7C          = dword ptr -7Ch
.text:004021E0 var_74          = dword ptr -74h
.text:004021E0 var_70          = dword ptr -70h
.text:004021E0 var_6C          = dword ptr -6Ch
.text:004021E0 var_64          = dword ptr -64h
.text:004021E0 var_60          = dword ptr -60h
.text:004021E0 var_5C          = dword ptr -5Ch
.text:004021E0 var_54          = dword ptr -54h
.text:004021E0 var_50          = dword ptr -50h
.text:004021E0 var_4C          = dword ptr -4Ch
.text:004021E0 var_48          = dword ptr -48h
.text:004021E0 var_40          = dword ptr -40h
.text:004021E0 var_38          = dword ptr -38h
.text:004021E0 var_34          = dword ptr -34h
.text:004021E0 var_30          = word ptr -30h
.text:004021E0 var_2E          = byte ptr -2Eh
.text:004021E0 var_2D          = byte ptr -2Dh
.text:004021E0 var_2C          = byte ptr -2Ch
.text:004021E0 var_2B          = byte ptr -2Bh
.text:004021E0 arg_0           = dword ptr  8
.text:004021E0 arg_4           = dword ptr  0Ch
.text:004021E0
.text:004021E0                 push    ebp
.text:004021E1                 xor     eax, eax
.text:004021E3                 mov     ebp, esp
.text:004021E5                 push    edi
.text:004021E6                 push    esi
.text:004021E7                 push    ebx
.text:004021E8                 sub     esp, 15Ch
.text:004021EE                 and     esp, 0FFFFFFF0h
.text:004021F1                 call    __alloca
.text:004021F6                 call    sub_414CF0
.text:004021FB                 mov     [ebp+var_CD], 0
.text:00402202                 xor     eax, eax
.text:00402204                 mov     [ebp+var_13C], eax
.text:0040220A                 xor     eax, eax
.text:0040220C                 mov     [ebp+var_CE], 0
.text:00402213                 mov     [ebp+var_D4], eax
.text:00402219                 mov     [esp+168h+VarName], offset VarName ; "POSIXLY_CORRECT"
.text:00402220                 call    getenv
.text:00402225                 test    eax, eax
.text:00402227                 setnz   [ebp+var_D5]
.text:0040222E                 call    sub_40A0E0
.text:00402233                 cmp     eax, 30DAFh
.text:00402238                 setle   [ebp+var_D6]
.text:0040223F                 cmp     [ebp+var_D6], 0
.text:00402246                 jz      loc_403A0D
.text:0040224C                 mov     edx, offset aBcdfgikMmnoRss ; "-bcdfgik:mMno:rsS:t:T:uzy::"
.text:00402251                 mov     [ebp+var_DC], edx
.text:00402257
.text:00402257 loc_402257:                             ; CODE XREF: sub_4021E0+1838↓j
.text:00402257                 mov     eax, [ebp+arg_4]
.text:0040225A                 mov     ebx, offset asc_401530 ; "-"
.text:0040225F                 xor     edx, edx
.text:00402261                 mov     [ebp+var_C8], ebx
.text:00402267                 mov     edi, 2
.text:0040226C                 mov     [ebp+Str1], edx
.text:00402272                 mov     ecx, [eax]
.text:00402274                 mov     [esp+168h+Locale], offset Locale ; Locale
.text:0040227C                 mov     [esp+168h+VarName], 0 ; Category
.text:00402283                 mov     ds:dword_4189F0, ecx
.text:00402289                 call    setlocale
.text:0040228E                 mov     [esp+168h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00402296                 mov     [esp+168h+VarName], offset aCoreutils ; "coreutils"
.text:0040229D                 call    ds:libintl_bindtextdomain
.text:004022A3                 mov     [esp+168h+VarName], offset aCoreutils ; "coreutils"
.text:004022AA                 call    ds:libintl_textdomain
.text:004022B0                 mov     [esp+168h+VarName], offset sub_403C20 ; void (__cdecl *)()
.text:004022B7                 call    sub_401040
.text:004022BC                 mov     Code, edi
.text:004022C2                 mov     [esp+168h+VarName], offset sub_409FF0 ; void (__cdecl *)()
.text:004022C9                 call    sub_401040
.text:004022CE                 mov     [esp+168h+VarName], 1
.text:004022D5                 call    sub_409F50
.text:004022DA                 mov     ds:byte_418040, al
.text:004022DF                 call    localeconv
.text:004022E4                 mov     esi, [eax]
.text:004022E6                 mov     edx, eax
.text:004022E8                 movzx   ebx, byte ptr [esi]
.text:004022EB                 test    bl, bl
.text:004022ED                 mov     ds:byte_418020, bl
.text:004022F3                 jz      short loc_4022FD
.text:004022F5                 mov     esi, [eax]
.text:004022F7                 cmp     byte ptr [esi+1], 0
.text:004022FB                 jz      short loc_402304
.text:004022FD
.text:004022FD loc_4022FD:                             ; CODE XREF: sub_4021E0+113↑j
.text:004022FD                 mov     ds:byte_418020, 2Eh ; '.'
.text:00402304
.text:00402304 loc_402304:                             ; CODE XREF: sub_4021E0+11B↑j
.text:00402304                 mov     edx, [edx+4]
.text:00402307                 movsx   edi, byte ptr [edx]
.text:0040230A                 test    edi, edi
.text:0040230C                 mov     ds:dword_418030, edi
.text:00402312                 jz      short loc_40231A
.text:00402314                 cmp     byte ptr [edx+1], 0
.text:00402318                 jz      short loc_402325
.text:0040231A
.text:0040231A loc_40231A:                             ; CODE XREF: sub_4021E0+132↑j
.text:0040231A                 mov     ecx, 80h ; '€'
.text:0040231F                 mov     ds:dword_418030, ecx
.text:00402325
.text:00402325 loc_402325:                             ; CODE XREF: sub_4021E0+138↑j
.text:00402325                 mov     ds:byte_4184C0, 0
.text:0040232C                 xor     ebx, ebx
.text:0040232E                 mov     esi, esi
.text:00402330
.text:00402330 loc_402330:                             ; CODE XREF: sub_4021E0+21D↓j
.text:00402330                 xor     eax, eax
.text:00402332                 cmp     ebx, 20h ; ' '
.text:00402335                 jz      loc_403A06
.text:0040233B                 cmp     ebx, 9
.text:0040233E                 jz      loc_403A06
.text:00402344
.text:00402344 loc_402344:                             ; CODE XREF: sub_4021E0+1828↓j
.text:00402344                 mov     ds:byte_418050[ebx], al
.text:0040234A                 mov     edx, ds:__mb_cur_max
.text:00402350                 cmp     dword ptr [edx], 1
.text:00402353                 jz      loc_4039F0
.text:00402359                 mov     [esp+168h+Locale], 157h ; Type
.text:00402361                 mov     [esp+168h+VarName], ebx ; C
.text:00402364                 call    _isctype
.text:00402369                 mov     edx, ds:__mb_cur_max
.text:0040236F
.text:0040236F loc_40236F:                             ; CODE XREF: sub_4021E0+1821↓j
.text:0040236F                 mov     [ebp+var_E5], 0
.text:00402376                 test    eax, eax
.text:00402378                 setz    ds:byte_418150[ebx]
.text:0040237F                 cmp     dword ptr [edx], 1
.text:00402382                 jz      loc_4039D4
.text:00402388                 mov     [esp+168h+Locale], 107h ; Type
.text:00402390                 mov     [esp+168h+VarName], ebx ; C
.text:00402393                 call    _isctype
.text:00402398                 mov     edx, ds:__mb_cur_max
.text:0040239E
.text:0040239E loc_40239E:                             ; CODE XREF: sub_4021E0+1805↓j
.text:0040239E                 test    eax, eax
.text:004023A0                 jnz     short loc_4023C0
.text:004023A2                 cmp     ebx, 20h ; ' '
.text:004023A5                 jz      short loc_4023C0
.text:004023A7                 cmp     ebx, 9
.text:004023AA                 jz      short loc_4023C0
.text:004023AC                 mov     [ebp+var_E5], 1
.text:004023B3                 lea     esi, [esi+0]
.text:004023B9                 lea     edi, [edi+0]
.text:004023C0
.text:004023C0 loc_4023C0:                             ; CODE XREF: sub_4021E0+1C0↑j
.text:004023C0                                         ; sub_4021E0+1C5↑j ...
.text:004023C0                 movzx   eax, [ebp+var_E5]
.text:004023C7                 cmp     dword ptr [edx], 1
.text:004023CA                 mov     ds:byte_418250[ebx], al
.text:004023D0                 jz      loc_4039C0
.text:004023D6                 mov     [esp+168h+Locale], 2 ; Type
.text:004023DE                 mov     [esp+168h+VarName], ebx ; C
.text:004023E1                 call    _isctype
.text:004023E6
.text:004023E6 loc_4023E6:                             ; CODE XREF: sub_4021E0+17EF↓j
.text:004023E6                 test    eax, eax
.text:004023E8                 mov     dl, bl
.text:004023EA                 jnz     loc_4039B0
.text:004023F0
.text:004023F0 loc_4023F0:                             ; CODE XREF: sub_4021E0+17DA↓j
.text:004023F0                 mov     ds:byte_418350[ebx], dl
.text:004023F6                 inc     ebx
.text:004023F7                 cmp     ebx, 0FFh
.text:004023FD                 jbe     loc_402330
.text:00402403                 xor     esi, esi
.text:00402405
.text:00402405 loc_402405:                             ; CODE XREF: sub_4021E0+253↓j
.text:00402405                 mov     [esp+168h+Locale], 1 ; Function
.text:0040240D                 mov     ebx, ds:Signal[esi*4]
.text:00402414                 mov     [esp+168h+VarName], ebx ; Signal
.text:00402417                 call    signal
.text:0040241C                 dec     eax
.text:0040241D                 jz      short loc_40242F
.text:0040241F                 mov     [esp+168h+Locale], offset Function ; Function
.text:00402427                 mov     [esp+168h+VarName], ebx ; Signal
.text:0040242A                 call    signal
.text:0040242F
.text:0040242F loc_40242F:                             ; CODE XREF: sub_4021E0+23D↑j
.text:0040242F                 inc     esi
.text:00402430                 cmp     esi, 1
.text:00402433                 jbe     short loc_402405
.text:00402435                 mov     [ebp+var_40], 0FFFFFFFFh
.text:0040243C                 mov     ecx, [ebp+arg_0]
.text:0040243F                 mov     [ebp+var_48], 0FFFFFFFFh
.text:00402446                 mov     [ebp+var_38], 0
.text:0040244D                 mov     [ebp+var_34], 0
.text:00402454                 mov     [ebp+var_2B], 0
.text:00402458                 mov     [ebp+var_2C], 0
.text:0040245C                 mov     [ebp+var_2D], 0
.text:00402460                 mov     [ebp+var_2E], 0
.text:00402464                 mov     byte ptr [ebp+var_30+1], 0
.text:00402468                 mov     byte ptr [ebp+var_30], 0
.text:0040246C                 mov     [esp+168h+Locale], 4
.text:00402474                 mov     [esp+168h+VarName], ecx
.text:00402477                 call    sub_40A140
.text:0040247C                 mov     [ebp+var_E0], eax
.text:00402482                 lea     esi, [esi+0]
.text:00402489                 lea     edi, [edi+0]
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_4021E0+338↓j
.text:00402490                                         ; sub_4021E0+795↓j ...
.text:00402490                 cmp     [ebp+var_13C], 0FFFFFFFFh
.text:00402497                 jz      loc_4039A5
.text:0040249D                 cmp     [ebp+var_D5], 0
.text:004024A4                 jz      loc_402890
.text:004024AA                 mov     ebx, [ebp+var_D4]
.text:004024B0                 test    ebx, ebx
.text:004024B2                 jz      loc_402890
.text:004024B8                 cmp     [ebp+var_D6], 0
.text:004024BF                 jz      loc_4039A5
.text:004024C5                 cmp     [ebp+var_CD], 0
.text:004024CC                 jnz     loc_4039A5
.text:004024D2                 mov     edx, dword_4170C0
.text:004024D8                 cmp     edx, [ebp+arg_0]
.text:004024DB                 jz      short loc_4024F0
.text:004024DD                 mov     edi, [ebp+arg_4]
.text:004024E0                 mov     eax, [edi+edx*4]
.text:004024E3                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004024E6                 jz      loc_402865
.text:004024EC                 lea     esi, [esi+0]
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_4021E0+2FB↑j
.text:004024F0                                         ; sub_4021E0+689↓j ...
.text:004024F0                 cmp     [ebp+arg_0], edx
.text:004024F3                 jle     short loc_40251D
.text:004024F5                 mov     ebx, [ebp+arg_4]
.text:004024F8                 mov     edi, [ebp+var_E0]
.text:004024FE                 mov     esi, [ebx+edx*4]
.text:00402501                 mov     ebx, [ebp+var_D4]
.text:00402507                 inc     edx
.text:00402508                 mov     dword_4170C0, edx
.text:0040250E                 mov     [edi+ebx*4], esi
.text:00402511
.text:00402511 loc_402511:                             ; CODE XREF: sub_4021E0+7C3↓j
.text:00402511                 inc     ebx
.text:00402512                 mov     [ebp+var_D4], ebx
.text:00402518                 jmp     loc_402490
.text:0040251D ; ---------------------------------------------------------------------------
.text:0040251D
.text:0040251D loc_40251D:                             ; CODE XREF: sub_4021E0+313↑j
.text:0040251D                 mov     ebx, ds:dword_4184D0
.text:00402523                 test    ebx, ebx
.text:00402525                 mov     [ebp+var_CC], ebx
.text:0040252B                 jz      loc_402814
.text:00402531
.text:00402531 loc_402531:                             ; CODE XREF: sub_4021E0+3E5↓j
.text:00402531                 mov     edx, [ebp+var_CC]
.text:00402537                 mov     edi, [edx+10h]
.text:0040253A                 test    edi, edi
.text:0040253C                 jnz     short loc_4025B4
.text:0040253E                 mov     esi, [edx+14h]
.text:00402541                 test    esi, esi
.text:00402543                 jnz     short loc_4025B4
.text:00402545                 mov     ecx, [ebp+var_CC]
.text:0040254B                 xor     edx, edx
.text:0040254D                 cmp     byte ptr [ecx+1Dh], 0
.text:00402551                 jnz     short loc_402559
.text:00402553                 cmp     byte ptr [ecx+18h], 0
.text:00402557                 jz      short loc_40255E
.text:00402559
.text:00402559 loc_402559:                             ; CODE XREF: sub_4021E0+371↑j
.text:00402559                 mov     edx, 1
.text:0040255E
.text:0040255E loc_40255E:                             ; CODE XREF: sub_4021E0+377↑j
.text:0040255E                 mov     esi, [ebp+var_CC]
.text:00402564                 movzx   edi, byte ptr [esi+19h]
.text:00402568                 movzx   ecx, byte ptr [esi+1Ch]
.text:0040256C                 or      edx, edi
.text:0040256E                 or      edx, ecx
.text:00402570                 movzx   edi, byte ptr [esi+1Ah]
.text:00402574                 movzx   ecx, byte ptr [esi+1Bh]
.text:00402578                 or      edx, edi
.text:0040257A                 or      edx, ecx
.text:0040257C                 jnz     short loc_4025B4
.text:0040257E                 movzx   ecx, byte ptr [ebp+var_30]
.text:00402582                 mov     edx, [ebp+var_38]
.text:00402585                 mov     edi, [ebp+var_34]
.text:00402588                 mov     [esi+10h], edx
.text:0040258B                 movzx   edx, byte ptr [ebp+var_30+1]
.text:0040258F                 mov     [esi+18h], cl
.text:00402592                 movzx   ecx, [ebp+var_2C]
.text:00402596                 mov     [esi+14h], edi
.text:00402599                 mov     [esi+19h], dl
.text:0040259C                 movzx   edx, [ebp+var_2E]
.text:004025A0                 mov     [esi+1Ch], cl
.text:004025A3                 movzx   ecx, [ebp+var_2D]
.text:004025A7                 mov     [esi+1Ah], dl
.text:004025AA                 movzx   edx, [ebp+var_2B]
.text:004025AE                 mov     [esi+1Bh], cl
.text:004025B1                 mov     [esi+1Dh], dl
.text:004025B4
.text:004025B4 loc_4025B4:                             ; CODE XREF: sub_4021E0+35C↑j
.text:004025B4                                         ; sub_4021E0+363↑j ...
.text:004025B4                 mov     esi, [ebp+var_CC]
.text:004025BA                 mov     eax, [esi+20h]
.text:004025BD                 test    eax, eax
.text:004025BF                 mov     [ebp+var_CC], eax
.text:004025C5                 jnz     loc_402531
.text:004025CB                 test    ebx, ebx
.text:004025CD                 jz      loc_402814
.text:004025D3
.text:004025D3 loc_4025D3:                             ; CODE XREF: sub_4021E0+659↓j
.text:004025D3                                         ; sub_4021E0+680↓j
.text:004025D3                 movzx   ecx, [ebp+var_2B]
.text:004025D7                 mov     edx, ds:dword_418470
.text:004025DD                 test    edx, edx
.text:004025DF                 mov     ds:byte_418490, cl
.text:004025E5                 jz      loc_402789
.text:004025EB
.text:004025EB loc_4025EB:                             ; CODE XREF: sub_4021E0+5DF↓j
.text:004025EB                 mov     eax, [ebp+var_D4]
.text:004025F1                 test    eax, eax
.text:004025F3                 jnz     short loc_40260C
.text:004025F5                 mov     edx, 1
.text:004025FA                 lea     ebx, [ebp+var_C8]
.text:00402600                 mov     [ebp+var_D4], edx
.text:00402606                 mov     [ebp+var_E0], ebx
.text:0040260C
.text:0040260C loc_40260C:                             ; CODE XREF: sub_4021E0+413↑j
.text:0040260C                 cmp     [ebp+var_CD], 0
.text:00402613                 jz      loc_4026B3
.text:00402619                 cmp     [ebp+var_D4], 1
.text:00402620                 jbe     short loc_402696
.text:00402622                 mov     ecx, [ebp+var_E0]
.text:00402628                 mov     esi, [ecx+4]
.text:0040262B                 mov     [esp+168h+VarName], esi ; char *
.text:0040262E                 call    sub_4098D0
.text:00402633                 mov     [esp+168h+VarName], offset aExtraOperandSN ; "extra operand %s not allowed with -c"
.text:0040263A                 mov     edi, eax
.text:0040263C                 call    ds:libintl_gettext
.text:00402642                 mov     [esp+168h+var_15C], edi ; char
.text:00402646                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:0040264E                 mov     [esp+168h+VarName], 0 ; Code
.text:00402655                 mov     [esp+168h+var_160], eax ; char *
.text:00402659                 call    sub_40CB60
.text:0040265E
.text:0040265E loc_40265E:                             ; CODE XREF: sub_4021E0:loc_402929↓j
.text:0040265E                                         ; sub_4021E0+C72↓j ...
.text:0040265E                 mov     [esp+168h+VarName], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402665                 call    ds:libintl_gettext
.text:0040266B                 mov     ebx, ds:_iob
.text:00402671                 mov     edi, ds:dword_4189F0
.text:00402677                 add     ebx, 40h ; '@'
.text:0040267A                 mov     [esp+168h+var_160], edi
.text:0040267E                 mov     [esp+168h+Locale], eax ; Format
.text:00402682                 mov     [esp+168h+VarName], ebx ; Stream
.text:00402685                 call    fprintf
.text:0040268A
.text:0040268A loc_40268A:                             ; CODE XREF: sub_4021E0+56C↓j
.text:0040268A                 mov     [esp+168h+VarName], 2 ; Code
.text:00402691
.text:00402691 loc_402691:                             ; CODE XREF: sub_4021E0+4D1↓j
.text:00402691                                         ; sub_4021E0+52B↓j
.text:00402691                 call    exit
.text:00402696 ; ---------------------------------------------------------------------------
.text:00402696
.text:00402696 loc_402696:                             ; CODE XREF: sub_4021E0+440↑j
.text:00402696                 mov     eax, [ebp+var_E0]
.text:0040269C                 mov     esi, [eax]
.text:0040269E                 mov     [esp+168h+VarName], esi ; char *
.text:004026A1                 call    sub_403F30
.text:004026A6                 test    al, al
.text:004026A8                 setz    cl
.text:004026AB                 movzx   edx, cl
.text:004026AE                 mov     [esp+168h+VarName], edx
.text:004026B1                 jmp     short loc_402691
.text:004026B3 ; ---------------------------------------------------------------------------
.text:004026B3
.text:004026B3 loc_4026B3:                             ; CODE XREF: sub_4021E0+433↑j
.text:004026B3                 cmp     [ebp+var_CE], 0
.text:004026BA                 jz      loc_402762
.text:004026C0                 mov     [esp+168h+Locale], 0 ; int
.text:004026C8                 mov     edx, [ebp+Str1]
.text:004026CE                 mov     edi, [ebp+var_D4]
.text:004026D4                 mov     ebx, [ebp+var_E0]
.text:004026DA                 mov     [esp+168h+var_15C], edx ; char *
.text:004026DE                 mov     [esp+168h+var_160], edi ; int
.text:004026E2                 mov     [esp+168h+VarName], ebx ; int
.text:004026E5                 call    sub_404600
.text:004026EA
.text:004026EA loc_4026EA:                             ; CODE XREF: sub_4021E0+5A4↓j
.text:004026EA                 cmp     ds:byte_4184C0, 0
.text:004026F1                 jz      short loc_402704
.text:004026F3                 mov     edi, ds:_iob
.text:004026F9                 mov     [esp+168h+VarName], edi ; Stream
.text:004026FC                 call    fclose
.text:00402701                 inc     eax
.text:00402702                 jz      short loc_40270D
.text:00402704
.text:00402704 loc_402704:                             ; CODE XREF: sub_4021E0+511↑j
.text:00402704                                         ; sub_4021E0+CB9↓j ...
.text:00402704                 mov     [esp+168h+VarName], 0
.text:0040270B                 jmp     short loc_402691
.text:0040270D ; ---------------------------------------------------------------------------
.text:0040270D
.text:0040270D loc_40270D:                             ; CODE XREF: sub_4021E0+522↑j
.text:0040270D                 mov     [esp+168h+VarName], offset aCloseFailed ; "close failed"
.text:00402714                 mov     ebx, offset asc_401530 ; "-"
.text:00402719                 call    ds:libintl_gettext
.text:0040271F                 test    ebx, ebx
.text:00402721                 mov     esi, eax
.text:00402723                 jz      short loc_402751
.text:00402725
.text:00402725 loc_402725:                             ; CODE XREF: sub_4021E0+580↓j
.text:00402725                 call    _errno
.text:0040272A                 mov     [esp+168h+Str], ebx
.text:0040272E                 mov     [esp+168h+var_15C], esi ; char
.text:00402732                 mov     [esp+168h+var_160], offset aSS ; "%s: %s"
.text:0040273A                 mov     esi, [eax]
.text:0040273C                 mov     [esp+168h+VarName], 0 ; Code
.text:00402743                 mov     [esp+168h+Locale], esi ; ErrorMessage
.text:00402747                 call    sub_40CB60
.text:0040274C                 jmp     loc_40268A
.text:00402751 ; ---------------------------------------------------------------------------
.text:00402751
.text:00402751 loc_402751:                             ; CODE XREF: sub_4021E0+543↑j
.text:00402751                 mov     [esp+168h+VarName], offset aStandardOutput ; "standard output"
.text:00402758                 call    ds:libintl_gettext
.text:0040275E                 mov     ebx, eax
.text:00402760                 jmp     short loc_402725
.text:00402762 ; ---------------------------------------------------------------------------
.text:00402762
.text:00402762 loc_402762:                             ; CODE XREF: sub_4021E0+4DA↑j
.text:00402762                 mov     ebx, [ebp+Str1]
.text:00402768                 mov     ecx, [ebp+var_D4]
.text:0040276E                 mov     esi, [ebp+var_E0]
.text:00402774                 mov     [esp+168h+var_160], ebx ; char *
.text:00402778                 mov     [esp+168h+Locale], ecx ; int
.text:0040277C                 mov     [esp+168h+VarName], esi ; int
.text:0040277F                 call    sub_4049B0
.text:00402784                 jmp     loc_4026EA
.text:00402789 ; ---------------------------------------------------------------------------
.text:00402789
.text:00402789 loc_402789:                             ; CODE XREF: sub_4021E0+405↑j
.text:00402789                 mov     [esp+168h+VarName], offset aTmpdir ; "TMPDIR"
.text:00402790                 call    getenv
.text:00402795                 test    eax, eax
.text:00402797                 jz      short loc_4027F6
.text:00402799
.text:00402799 loc_402799:                             ; CODE XREF: sub_4021E0+624↓j
.text:00402799                                         ; sub_4021E0+632↓j
.text:00402799                 test    eax, eax
.text:0040279B                 mov     ebx, eax
.text:0040279D                 jz      short loc_4027EF
.text:0040279F
.text:0040279F loc_40279F:                             ; CODE XREF: sub_4021E0+614↓j
.text:0040279F                 mov     edx, ds:dword_418470
.text:004027A5                 cmp     edx, ds:dword_418480
.text:004027AB                 jz      short loc_4027C4
.text:004027AD
.text:004027AD loc_4027AD:                             ; CODE XREF: sub_4021E0+60D↓j
.text:004027AD                 mov     ecx, ds:dword_418460
.text:004027B3                 lea     esi, [edx+1]
.text:004027B6                 mov     ds:dword_418470, esi
.text:004027BC                 mov     [ecx+edx*4], ebx
.text:004027BF                 jmp     loc_4025EB
.text:004027C4 ; ---------------------------------------------------------------------------
.text:004027C4
.text:004027C4 loc_4027C4:                             ; CODE XREF: sub_4021E0+5CB↑j
.text:004027C4                 mov     [esp+168h+var_160], 4 ; int
.text:004027CC                 mov     edi, ds:dword_418460
.text:004027D2                 mov     [esp+168h+Locale], offset dword_418480 ; int
.text:004027DA                 mov     [esp+168h+VarName], edi ; void *
.text:004027DD                 call    sub_40A240
.text:004027E2                 mov     ds:dword_418460, eax
.text:004027E7                 mov     edx, ds:dword_418470
.text:004027ED                 jmp     short loc_4027AD
.text:004027EF ; ---------------------------------------------------------------------------
.text:004027EF
.text:004027EF loc_4027EF:                             ; CODE XREF: sub_4021E0+5BD↑j
.text:004027EF                 mov     ebx, offset aTmp ; "/tmp"
.text:004027F4                 jmp     short loc_40279F
.text:004027F6 ; ---------------------------------------------------------------------------
.text:004027F6
.text:004027F6 loc_4027F6:                             ; CODE XREF: sub_4021E0+5B7↑j
.text:004027F6                 mov     [esp+168h+VarName], offset aTmp_0 ; "TMP"
.text:004027FD                 call    getenv
.text:00402802                 test    eax, eax
.text:00402804                 jnz     short loc_402799
.text:00402806                 mov     [esp+168h+VarName], offset aTemp ; "TEMP"
.text:0040280D                 call    getenv
.text:00402812                 jmp     short loc_402799
.text:00402814 ; ---------------------------------------------------------------------------
.text:00402814
.text:00402814 loc_402814:                             ; CODE XREF: sub_4021E0+34B↑j
.text:00402814                                         ; sub_4021E0+3ED↑j
.text:00402814                 mov     ecx, [ebp+var_38]
.text:00402817                 test    ecx, ecx
.text:00402819                 jnz     short loc_40283F
.text:0040281B                 mov     edi, [ebp+var_34]
.text:0040281E                 test    edi, edi
.text:00402820                 jnz     short loc_40283F
.text:00402822                 cmp     [ebp+var_30], 0
.text:00402827                 movzx   eax, [ebp+var_2C]
.text:0040282B                 movzx   edx, [ebp+var_2E]
.text:0040282F                 movzx   ecx, [ebp+var_2D]
.text:00402833                 jnz     short loc_40283F
.text:00402835                 or      eax, edx
.text:00402837                 or      eax, ecx
.text:00402839                 jz      loc_4025D3
.text:0040283F
.text:0040283F loc_40283F:                             ; CODE XREF: sub_4021E0+639↑j
.text:0040283F                                         ; sub_4021E0+640↑j ...
.text:0040283F                 test    ebx, ebx
.text:00402841                 lea     ecx, [ebp+var_48]
.text:00402844                 mov     edx, offset dword_4184D0
.text:00402849                 jz      short loc_402857
.text:0040284B
.text:0040284B loc_40284B:                             ; CODE XREF: sub_4021E0+675↓j
.text:0040284B                 mov     ebx, [edx]
.text:0040284D                 mov     esi, [ebx+20h]
.text:00402850                 lea     edx, [ebx+20h]
.text:00402853                 test    esi, esi
.text:00402855                 jnz     short loc_40284B
.text:00402857
.text:00402857 loc_402857:                             ; CODE XREF: sub_4021E0+669↑j
.text:00402857                 mov     [edx], ecx
.text:00402859                 mov     dword ptr [ecx+20h], 0
.text:00402860                 jmp     loc_4025D3
.text:00402865 ; ---------------------------------------------------------------------------
.text:00402865
.text:00402865 loc_402865:                             ; CODE XREF: sub_4021E0+306↑j
.text:00402865                 cmp     byte ptr [eax+1], 6Fh ; 'o'
.text:00402869                 jnz     loc_4024F0
.text:0040286F                 cmp     byte ptr [eax+2], 0
.text:00402873                 jnz     short loc_402890
.text:00402875                 lea     esi, [edx+1]
.text:00402878                 cmp     esi, [ebp+arg_0]
.text:0040287B                 jz      loc_4024F0
.text:00402881                 jmp     short loc_402890
.text:00402881 ; ---------------------------------------------------------------------------
.text:00402883                 align 10h
.text:00402890
.text:00402890 loc_402890:                             ; CODE XREF: sub_4021E0+2C4↑j
.text:00402890                                         ; sub_4021E0+2D2↑j ...
.text:00402890                 mov     [esp+168h+Str], 0 ; int
.text:00402898                 mov     ecx, [ebp+var_DC]
.text:0040289E                 mov     edx, [ebp+arg_4]
.text:004028A1                 mov     [esp+168h+var_15C], offset off_4013A0 ; char
.text:004028A9                 mov     eax, [ebp+arg_0]
.text:004028AC                 mov     [esp+168h+var_160], ecx ; char *
.text:004028B0                 mov     [esp+168h+Locale], edx ; int
.text:004028B4                 mov     [esp+168h+VarName], eax ; int
.text:004028B7                 call    sub_409E00
.text:004028BC                 mov     [ebp+var_13C], eax
.text:004028C2                 inc     eax
.text:004028C3                 jz      loc_4039A5
.text:004028C9                 cmp     [ebp+var_13C], 67h ; 'g'
.text:004028D0                 jg      loc_403100
.text:004028D6                 cmp     [ebp+var_13C], 66h ; 'f'
.text:004028DD                 jge     short loc_402930
.text:004028DF                 cmp     [ebp+var_13C], 53h ; 'S'
.text:004028E6                 jz      loc_4030EA
.text:004028EC                 cmp     [ebp+var_13C], 53h ; 'S'
.text:004028F3                 jg      loc_403052
.text:004028F9                 cmp     [ebp+var_13C], 0FFFFFF7Eh
.text:00402903                 jz      loc_402EA0
.text:00402909                 cmp     [ebp+var_13C], 0FFFFFF7Eh
.text:00402913                 jle     loc_402E48
.text:00402919                 cmp     [ebp+var_13C], 1
.text:00402920                 jz      short loc_40297A
.text:00402922                 cmp     [ebp+var_13C], 4Dh ; 'M'
.text:00402929
.text:00402929 loc_402929:                             ; CODE XREF: sub_4021E0+EF9↓j
.text:00402929                 jnz     loc_40265E
.text:0040292F                 nop
.text:00402930
.text:00402930 loc_402930:                             ; CODE XREF: sub_4021E0+6FD↑j
.text:00402930                                         ; sub_4021E0+E79↓j ...
.text:00402930                 movzx   ecx, [ebp+var_86]
.text:00402937                 lea     ebx, [ebp+var_48]
.text:0040293A                 mov     [esp+168h+var_160], 2
.text:00402942                 lea     edi, [ebp+var_86]
.text:00402948                 movzx   edx, byte ptr [ebp+var_13C]
.text:0040294F                 mov     [esp+168h+Locale], ebx
.text:00402953                 and     ecx, 0FFFFFF00h
.text:00402959                 mov     [esp+168h+VarName], edi
.text:0040295C                 movzx   si, dl
.text:00402960                 or      ecx, esi
.text:00402962                 mov     [ebp+var_86], cx
.text:00402969                 mov     byte ptr [ebp+var_86+1], 0
.text:00402970                 call    sub_405990
.text:00402975                 jmp     loc_402490
.text:0040297A ; ---------------------------------------------------------------------------
.text:0040297A
.text:0040297A loc_40297A:                             ; CODE XREF: sub_4021E0+740↑j
.text:0040297A                 cmp     [ebp+var_D6], 0
.text:00402981                 jz      short loc_40298E
.text:00402983                 mov     edx, ds:Str2
.text:00402989                 cmp     byte ptr [edx], 2Bh ; '+'
.text:0040298C                 jz      short loc_4029A8
.text:0040298E
.text:0040298E loc_40298E:                             ; CODE XREF: sub_4021E0+7A1↑j
.text:0040298E                                         ; sub_4021E0+8B0↓j ...
.text:0040298E                 mov     esi, ds:Str2
.text:00402994                 mov     ebx, [ebp+var_D4]
.text:0040299A                 mov     ecx, [ebp+var_E0]
.text:004029A0                 mov     [ecx+ebx*4], esi
.text:004029A3                 jmp     loc_402511
.text:004029A8 ; ---------------------------------------------------------------------------
.text:004029A8
.text:004029A8 loc_4029A8:                             ; CODE XREF: sub_4021E0+7AC↑j
.text:004029A8                 mov     [esp+168h+VarName], 24h ; '$' ; size_t
.text:004029AF                 lea     edi, [ebp+var_50]
.text:004029B2                 call    sub_40A280
.text:004029B7                 mov     dword ptr [eax+8], 0FFFFFFFFh
.text:004029BE                 mov     ecx, ds:Str2
.text:004029C4                 mov     [ebp+Block], eax
.text:004029CA                 mov     [ebp+var_CC], eax
.text:004029D0                 inc     ecx
.text:004029D1                 lea     eax, [ebp+var_54]
.text:004029D4                 mov     [esp+168h+Str], offset Locale ; Str
.text:004029DC                 mov     [esp+168h+var_15C], edi ; int
.text:004029E0                 mov     [esp+168h+var_160], 0Ah ; int
.text:004029E8                 mov     [esp+168h+Locale], eax ; int
.text:004029EC                 mov     [esp+168h+VarName], ecx ; int
.text:004029EF                 call    sub_40A940
.text:004029F4                 cmp     eax, 4          ; switch 5 cases
.text:004029F7                 ja      def_4029FD      ; jumptable 004029FD default case
.text:004029FD                 jmp     ds:jpt_4029FD[eax*4] ; switch jump
.text:004029FD ; ---------------------------------------------------------------------------
.text:00402A04 jpt_4029FD      dd offset loc_402A18    ; DATA XREF: sub_4021E0+81D↑r
.text:00402A04                 dd offset loc_402A3B    ; jump table for switch statement
.text:00402A04                 dd offset loc_402A18
.text:00402A04                 dd offset loc_402A3B
.text:00402A04                 dd offset loc_402A3B
.text:00402A18 ; ---------------------------------------------------------------------------
.text:00402A18
.text:00402A18 loc_402A18:                             ; CODE XREF: sub_4021E0+81D↑j
.text:00402A18                                         ; DATA XREF: sub_4021E0:jpt_4029FD↑o
.text:00402A18                 mov     edi, [ebp+var_50] ; jumptable 004029FD cases 0,2
.text:00402A1B                 xor     edx, edx
.text:00402A1D                 mov     ebx, [ebp+Block]
.text:00402A23                 mov     esi, [ebp+var_50]
.text:00402A26                 mov     ecx, [ebp+var_4C]
.text:00402A29                 mov     [ebx], edi
.text:00402A2B                 mov     eax, [ebx]
.text:00402A2D                 mov     edi, edx
.text:00402A2F                 xor     edi, ecx
.text:00402A31                 xor     esi, eax
.text:00402A33                 or      esi, edi
.text:00402A35                 jz      def_4029FD      ; jumptable 004029FD default case
.text:00402A3B
.text:00402A3B loc_402A3B:                             ; CODE XREF: sub_4021E0+81D↑j
.text:00402A3B                                         ; DATA XREF: sub_4021E0:jpt_4029FD↑o
.text:00402A3B                 xor     eax, eax        ; jumptable 004029FD cases 1,3,4
.text:00402A3D
.text:00402A3D loc_402A3D:                             ; CODE XREF: sub_4021E0+C63↓j
.text:00402A3D                 test    eax, eax
.text:00402A3F                 mov     edx, eax
.text:00402A41                 jz      short loc_402A4C
.text:00402A43                 cmp     byte ptr [eax], 2Eh ; '.'
.text:00402A46                 jz      loc_402DC4
.text:00402A4C
.text:00402A4C loc_402A4C:                             ; CODE XREF: sub_4021E0+861↑j
.text:00402A4C                                         ; sub_4021E0+C55↓j
.text:00402A4C                 mov     ecx, [ebp+Block]
.text:00402A52                 mov     ebx, [ecx+4]
.text:00402A55                 or      ebx, [ecx]
.text:00402A57                 jnz     short loc_402A5F
.text:00402A59                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00402A5F
.text:00402A5F loc_402A5F:                             ; CODE XREF: sub_4021E0+877↑j
.text:00402A5F                 test    edx, edx
.text:00402A61                 jz      short loc_402A82
.text:00402A63                 mov     [esp+168h+var_160], 0
.text:00402A6B                 mov     ecx, [ebp+Block]
.text:00402A71                 mov     [esp+168h+VarName], edx
.text:00402A74                 mov     [esp+168h+Locale], ecx
.text:00402A78                 call    sub_405990
.text:00402A7D                 cmp     byte ptr [eax], 0
.text:00402A80                 jz      short loc_402A95
.text:00402A82
.text:00402A82 loc_402A82:                             ; CODE XREF: sub_4021E0+881↑j
.text:00402A82                 mov     edi, [ebp+Block]
.text:00402A88                 mov     [esp+168h+VarName], edi ; Block
.text:00402A8B                 call    free
.text:00402A90                 jmp     loc_40298E
.text:00402A95 ; ---------------------------------------------------------------------------
.text:00402A95
.text:00402A95 loc_402A95:                             ; CODE XREF: sub_4021E0+8A0↑j
.text:00402A95                 mov     edx, dword_4170C0
.text:00402A9B                 cmp     edx, [ebp+arg_0]
.text:00402A9E                 jz      short loc_402AB1
.text:00402AA0                 mov     eax, [ebp+arg_4]
.text:00402AA3                 mov     edi, [eax+edx*4]
.text:00402AA6                 mov     [ebp+var_F8], edi
.text:00402AAC                 cmp     byte ptr [edi], 2Dh ; '-'
.text:00402AAF                 jz      short loc_402AEE
.text:00402AB1
.text:00402AB1 loc_402AB1:                             ; CODE XREF: sub_4021E0+8BE↑j
.text:00402AB1                                         ; sub_4021E0+918↓j ...
.text:00402AB1                 mov     ecx, ds:dword_4184D0
.text:00402AB7                 mov     edx, offset dword_4184D0
.text:00402ABC                 test    ecx, ecx
.text:00402ABE                 jz      short loc_402ACC
.text:00402AC0
.text:00402AC0 loc_402AC0:                             ; CODE XREF: sub_4021E0+8EA↓j
.text:00402AC0                 mov     ebx, [edx]
.text:00402AC2                 mov     edi, [ebx+20h]
.text:00402AC5                 lea     edx, [ebx+20h]
.text:00402AC8                 test    edi, edi
.text:00402ACA                 jnz     short loc_402AC0
.text:00402ACC
.text:00402ACC loc_402ACC:                             ; CODE XREF: sub_4021E0+8DE↑j
.text:00402ACC                 mov     eax, [ebp+Block]
.text:00402AD2                 mov     [edx], eax
.text:00402AD4                 mov     edx, [ebp+var_CC]
.text:00402ADA                 mov     dword ptr [eax+20h], 0
.text:00402AE1                 test    edx, edx
.text:00402AE3                 jnz     loc_402490
.text:00402AE9                 jmp     loc_40298E
.text:00402AEE ; ---------------------------------------------------------------------------
.text:00402AEE
.text:00402AEE loc_402AEE:                             ; CODE XREF: sub_4021E0+8CF↑j
.text:00402AEE                 movsx   esi, byte ptr [edi+1]
.text:00402AF2                 sub     esi, 30h ; '0'
.text:00402AF5                 cmp     esi, 9
.text:00402AF8                 ja      short loc_402AB1
.text:00402AFA                 mov     [esp+168h+Str], offset Locale ; Str
.text:00402B02                 inc     edx
.text:00402B03                 mov     ebx, [ebp+Block]
.text:00402B09                 mov     dword_4170C0, edx
.text:00402B0F                 inc     edi
.text:00402B10                 lea     ecx, [ebp+var_70]
.text:00402B13                 mov     [ebp+var_FC], edi
.text:00402B19                 lea     edx, [ebp+var_74]
.text:00402B1C                 add     ebx, 8
.text:00402B1F                 mov     [esp+168h+var_15C], ecx ; int
.text:00402B23                 mov     [esp+168h+var_160], 0Ah ; int
.text:00402B2B                 mov     [esp+168h+Locale], edx ; int
.text:00402B2F                 mov     [esp+168h+VarName], edi ; int
.text:00402B32                 call    sub_40A940
.text:00402B37                 cmp     eax, 4          ; switch 5 cases
.text:00402B3A                 ja      def_402B40      ; jumptable 00402B40 default case
.text:00402B40                 jmp     ds:jpt_402B40[eax*4] ; switch jump
.text:00402B40 ; ---------------------------------------------------------------------------
.text:00402B47                 align 4
.text:00402B48 jpt_402B40      dd offset loc_402B5C    ; DATA XREF: sub_4021E0+960↑r
.text:00402B48                 dd offset loc_402B79    ; jump table for switch statement
.text:00402B48                 dd offset loc_402B5C
.text:00402B48                 dd offset loc_402B79
.text:00402B48                 dd offset loc_402D74
.text:00402B5C ; ---------------------------------------------------------------------------
.text:00402B5C
.text:00402B5C loc_402B5C:                             ; CODE XREF: sub_4021E0+960↑j
.text:00402B5C                                         ; DATA XREF: sub_4021E0:jpt_402B40↑o
.text:00402B5C                 mov     edi, [ebp+var_70] ; jumptable 00402B40 cases 0,2
.text:00402B5F                 xor     edx, edx
.text:00402B61                 mov     esi, [ebp+var_70]
.text:00402B64                 mov     eax, [ebp+var_6C]
.text:00402B67                 mov     ecx, edi
.text:00402B69                 xor     esi, ecx
.text:00402B6B                 mov     [ebx], edi
.text:00402B6D                 mov     edi, edx
.text:00402B6F                 xor     edi, eax
.text:00402B71                 or      esi, edi
.text:00402B73                 jz      def_402B40      ; jumptable 00402B40 default case
.text:00402B79
.text:00402B79 loc_402B79:                             ; CODE XREF: sub_4021E0+960↑j
.text:00402B79                                         ; DATA XREF: sub_4021E0:jpt_402B40↑o
.text:00402B79                 mov     edi, offset aInvalidNumberA ; jumptable 00402B40 cases 1,3
.text:00402B7E                 test    edi, edi
.text:00402B80                 jz      short loc_402BCF
.text:00402B82                 mov     [esp+168h+VarName], edi
.text:00402B85                 call    ds:libintl_gettext
.text:00402B8B                 mov     [esp+168h+VarName], offset aSCountSTooLarg ; "%s: count `%.*s' too large"
.text:00402B92                 mov     edi, eax
.text:00402B94                 call    ds:libintl_gettext
.text:00402B9A                 mov     [esp+168h+var_15C], edi ; char
.text:00402B9E                 mov     ebx, [ebp+var_74]
.text:00402BA1                 mov     ecx, [ebp+var_FC]
.text:00402BA7                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:00402BAF                 mov     esi, [ebp+var_FC]
.text:00402BB5                 mov     [esp+168h+var_160], eax ; char *
.text:00402BB9                 sub     ebx, ecx
.text:00402BBB                 mov     [esp+168h+var_154], esi
.text:00402BBF                 mov     [esp+168h+Str], ebx
.text:00402BC3                 mov     [esp+168h+VarName], 2 ; Code
.text:00402BCA                 call    sub_40CB60
.text:00402BCF
.text:00402BCF loc_402BCF:                             ; CODE XREF: sub_4021E0+9A0↑j
.text:00402BCF                                         ; sub_4021E0+B9B↓j ...
.text:00402BCF                 xor     eax, eax
.text:00402BD1
.text:00402BD1 loc_402BD1:                             ; CODE XREF: sub_4021E0+B8F↓j
.text:00402BD1                 cmp     byte ptr [eax], 2Eh ; '.'
.text:00402BD4                 mov     edx, eax
.text:00402BD6                 jz      short loc_402C42
.text:00402BD8
.text:00402BD8 loc_402BD8:                             ; CODE XREF: sub_4021E0+B36↓j
.text:00402BD8                 mov     [esp+168h+var_160], 1
.text:00402BE0                 mov     eax, [ebp+Block]
.text:00402BE6                 mov     [esp+168h+VarName], edx
.text:00402BE9                 mov     [esp+168h+Locale], eax
.text:00402BED                 call    sub_405990
.text:00402BF2                 cmp     byte ptr [eax], 0
.text:00402BF5                 jz      loc_402AB1
.text:00402BFB                 mov     [esp+168h+VarName], offset aStrayCharacter ; "stray character in field spec"
.text:00402C02                 call    ds:libintl_gettext
.text:00402C08                 mov     [esp+168h+VarName], offset aSInvalidFieldS ; "%s: invalid field specification `%s'"
.text:00402C0F                 mov     ebx, eax
.text:00402C11                 call    ds:libintl_gettext
.text:00402C17                 mov     esi, [ebp+var_F8]
.text:00402C1D                 mov     [esp+168h+Str], esi
.text:00402C21
.text:00402C21 loc_402C21:                             ; CODE XREF: sub_4021E0+1124↓j
.text:00402C21                 mov     [esp+168h+var_160], eax ; char *
.text:00402C25                 mov     [esp+168h+var_15C], ebx ; char
.text:00402C29                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:00402C31                 mov     [esp+168h+VarName], 2 ; Code
.text:00402C38                 call    sub_40CB60
.text:00402C3D                 call    abort
.text:00402C42 ; ---------------------------------------------------------------------------
.text:00402C42
.text:00402C42 loc_402C42:                             ; CODE XREF: sub_4021E0+9F6↑j
.text:00402C42                 mov     [esp+168h+Str], offset Locale ; Str
.text:00402C4A                 mov     ebx, [ebp+Block]
.text:00402C50                 inc     edx
.text:00402C51                 mov     [ebp+var_104], edx
.text:00402C57                 lea     ecx, [ebp+var_84]
.text:00402C5D                 lea     esi, [ebp+var_80]
.text:00402C60                 mov     [esp+168h+var_15C], esi ; int
.text:00402C64                 add     ebx, 0Ch
.text:00402C67                 mov     [esp+168h+var_160], 0Ah ; int
.text:00402C6F                 mov     [esp+168h+Locale], ecx ; int
.text:00402C73                 mov     [esp+168h+VarName], edx ; int
.text:00402C76                 call    sub_40A940
.text:00402C7B                 cmp     eax, 4          ; switch 5 cases
.text:00402C7E                 ja      def_402C84      ; jumptable 00402C84 default case
.text:00402C84                 jmp     ds:jpt_402C84[eax*4] ; switch jump
.text:00402C84 ; ---------------------------------------------------------------------------
.text:00402C8B                 align 4
.text:00402C8C jpt_402C84      dd offset loc_402CA0    ; DATA XREF: sub_4021E0+AA4↑r
.text:00402C8C                 dd offset loc_402CB9    ; jump table for switch statement
.text:00402C8C                 dd offset loc_402CA0
.text:00402C8C                 dd offset loc_402CB9
.text:00402C8C                 dd offset loc_402D23
.text:00402CA0 ; ---------------------------------------------------------------------------
.text:00402CA0
.text:00402CA0 loc_402CA0:                             ; CODE XREF: sub_4021E0+AA4↑j
.text:00402CA0                                         ; DATA XREF: sub_4021E0:jpt_402C84↑o
.text:00402CA0                 mov     esi, [ebp+var_80] ; jumptable 00402C84 cases 0,2
.text:00402CA3                 xor     edx, edx
.text:00402CA5                 mov     edi, [ebp+var_80]
.text:00402CA8                 mov     eax, [ebp+var_7C]
.text:00402CAB                 mov     ecx, esi
.text:00402CAD                 xor     edi, ecx
.text:00402CAF                 mov     [ebx], esi
.text:00402CB1                 mov     esi, edx
.text:00402CB3                 xor     esi, eax
.text:00402CB5                 or      edi, esi
.text:00402CB7                 jz      short def_402C84 ; jumptable 00402C84 default case
.text:00402CB9
.text:00402CB9 loc_402CB9:                             ; CODE XREF: sub_4021E0+AA4↑j
.text:00402CB9                                         ; DATA XREF: sub_4021E0:jpt_402C84↑o
.text:00402CB9                 mov     eax, offset aInvalidNumberA_0 ; jumptable 00402C84 cases 1,3
.text:00402CBE                 test    eax, eax
.text:00402CC0                 jz      short loc_402D12
.text:00402CC2                 mov     [esp+168h+VarName], eax
.text:00402CC5                 call    ds:libintl_gettext
.text:00402CCB                 mov     [esp+168h+VarName], offset aSCountSTooLarg ; "%s: count `%.*s' too large"
.text:00402CD2                 mov     edi, eax
.text:00402CD4                 call    ds:libintl_gettext
.text:00402CDA                 mov     [esp+168h+var_15C], edi ; char
.text:00402CDE                 mov     ebx, [ebp+var_84]
.text:00402CE4                 mov     edx, [ebp+var_104]
.text:00402CEA                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:00402CF2                 mov     ecx, [ebp+var_104]
.text:00402CF8                 mov     [esp+168h+var_160], eax ; char *
.text:00402CFC                 sub     ebx, edx
.text:00402CFE                 mov     [esp+168h+var_154], ecx
.text:00402D02                 mov     [esp+168h+Str], ebx
.text:00402D06                 mov     [esp+168h+VarName], 2 ; Code
.text:00402D0D                 call    sub_40CB60
.text:00402D12
.text:00402D12 loc_402D12:                             ; CODE XREF: sub_4021E0+AE0↑j
.text:00402D12                                         ; sub_4021E0+B4A↓j ...
.text:00402D12                 xor     eax, eax
.text:00402D14
.text:00402D14 loc_402D14:                             ; CODE XREF: sub_4021E0+B41↓j
.text:00402D14                 mov     edx, eax
.text:00402D16                 jmp     loc_402BD8
.text:00402D1B ; ---------------------------------------------------------------------------
.text:00402D1B
.text:00402D1B def_402C84:                             ; CODE XREF: sub_4021E0+A9E↑j
.text:00402D1B                                         ; sub_4021E0+AD7↑j
.text:00402D1B                 mov     eax, [ebp+var_84] ; jumptable 00402C84 default case
.text:00402D21                 jmp     short loc_402D14
.text:00402D23 ; ---------------------------------------------------------------------------
.text:00402D23
.text:00402D23 loc_402D23:                             ; CODE XREF: sub_4021E0+AA4↑j
.text:00402D23                                         ; DATA XREF: sub_4021E0:jpt_402C84↑o
.text:00402D23                 mov     ecx, offset aInvalidNumberA_0 ; jumptable 00402C84 case 4
.text:00402D28                 test    ecx, ecx
.text:00402D2A                 jz      short loc_402D12
.text:00402D2C                 mov     [esp+168h+VarName], ecx
.text:00402D2F                 call    ds:libintl_gettext
.text:00402D35                 mov     [esp+168h+VarName], offset aSInvalidCountA ; "%s: invalid count at start of `%s'"
.text:00402D3C                 mov     edi, eax
.text:00402D3E                 call    ds:libintl_gettext
.text:00402D44                 mov     [esp+168h+var_15C], edi ; char
.text:00402D48                 mov     ebx, [ebp+var_104]
.text:00402D4E                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:00402D56                 mov     [esp+168h+VarName], 2 ; Code
.text:00402D5D                 mov     [esp+168h+Str], ebx
.text:00402D61                 mov     [esp+168h+var_160], eax ; char *
.text:00402D65                 call    sub_40CB60
.text:00402D6A                 jmp     short loc_402D12
.text:00402D6C ; ---------------------------------------------------------------------------
.text:00402D6C
.text:00402D6C def_402B40:                             ; CODE XREF: sub_4021E0+95A↑j
.text:00402D6C                                         ; sub_4021E0+993↑j
.text:00402D6C                 mov     eax, [ebp+var_74] ; jumptable 00402B40 default case
.text:00402D6F                 jmp     loc_402BD1
.text:00402D74 ; ---------------------------------------------------------------------------
.text:00402D74
.text:00402D74 loc_402D74:                             ; CODE XREF: sub_4021E0+960↑j
.text:00402D74                                         ; DATA XREF: sub_4021E0:jpt_402B40↑o
.text:00402D74                 mov     ecx, offset aInvalidNumberA ; jumptable 00402B40 case 4
.text:00402D79                 test    ecx, ecx
.text:00402D7B                 jz      loc_402BCF
.text:00402D81                 mov     [esp+168h+VarName], ecx
.text:00402D84                 call    ds:libintl_gettext
.text:00402D8A                 mov     [esp+168h+VarName], offset aSInvalidCountA ; "%s: invalid count at start of `%s'"
.text:00402D91                 mov     edi, eax
.text:00402D93                 call    ds:libintl_gettext
.text:00402D99                 mov     [esp+168h+var_15C], edi ; char
.text:00402D9D                 mov     edx, [ebp+var_FC]
.text:00402DA3                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:00402DAB                 mov     [esp+168h+VarName], 2 ; Code
.text:00402DB2                 mov     [esp+168h+Str], edx
.text:00402DB6                 mov     [esp+168h+var_160], eax ; char *
.text:00402DBA                 call    sub_40CB60
.text:00402DBF                 jmp     loc_402BCF
.text:00402DC4 ; ---------------------------------------------------------------------------
.text:00402DC4
.text:00402DC4 loc_402DC4:                             ; CODE XREF: sub_4021E0+866↑j
.text:00402DC4                 mov     [esp+168h+Str], offset Locale ; Str
.text:00402DCC                 mov     ebx, [ebp+Block]
.text:00402DD2                 lea     esi, [eax+1]
.text:00402DD5                 mov     [esp+168h+var_160], 0Ah ; int
.text:00402DDD                 lea     ecx, [ebp+var_60]
.text:00402DE0                 lea     eax, [ebp+var_64]
.text:00402DE3                 mov     [esp+168h+var_15C], ecx ; int
.text:00402DE7                 add     ebx, 4
.text:00402DEA                 mov     [esp+168h+Locale], eax ; int
.text:00402DEE                 mov     [esp+168h+VarName], esi ; int
.text:00402DF1                 call    sub_40A940
.text:00402DF6                 cmp     eax, 4          ; switch 5 cases
.text:00402DF9                 ja      short def_402DFB ; jumptable 00402DFB default case
.text:00402DFB                 jmp     ds:jpt_402DFB[eax*4] ; switch jump
.text:00402DFB ; ---------------------------------------------------------------------------
.text:00402E02                 align 4
.text:00402E04 jpt_402DFB      dd offset loc_402E18    ; DATA XREF: sub_4021E0+C1B↑r
.text:00402E04                 dd offset loc_402E31    ; jump table for switch statement
.text:00402E04                 dd offset loc_402E18
.text:00402E04                 dd offset loc_402E31
.text:00402E04                 dd offset loc_402E31
.text:00402E18 ; ---------------------------------------------------------------------------
.text:00402E18
.text:00402E18 loc_402E18:                             ; CODE XREF: sub_4021E0+C1B↑j
.text:00402E18                                         ; DATA XREF: sub_4021E0:jpt_402DFB↑o
.text:00402E18                 mov     esi, [ebp+var_60] ; jumptable 00402DFB cases 0,2
.text:00402E1B                 xor     edx, edx
.text:00402E1D                 mov     edi, [ebp+var_60]
.text:00402E20                 mov     eax, [ebp+var_5C]
.text:00402E23                 mov     ecx, esi
.text:00402E25                 xor     edi, ecx
.text:00402E27                 mov     [ebx], esi
.text:00402E29                 mov     esi, edx
.text:00402E2B                 xor     esi, eax
.text:00402E2D                 or      edi, esi
.text:00402E2F                 jz      short def_402DFB ; jumptable 00402DFB default case
.text:00402E31
.text:00402E31 loc_402E31:                             ; CODE XREF: sub_4021E0+C1B↑j
.text:00402E31                                         ; DATA XREF: sub_4021E0:jpt_402DFB↑o
.text:00402E31                 xor     eax, eax        ; jumptable 00402DFB cases 1,3,4
.text:00402E33
.text:00402E33 loc_402E33:                             ; CODE XREF: sub_4021E0+C5D↓j
.text:00402E33                 mov     edx, eax
.text:00402E35                 jmp     loc_402A4C
.text:00402E3A ; ---------------------------------------------------------------------------
.text:00402E3A
.text:00402E3A def_402DFB:                             ; CODE XREF: sub_4021E0+C19↑j
.text:00402E3A                                         ; sub_4021E0+C4F↑j
.text:00402E3A                 mov     eax, [ebp+var_64] ; jumptable 00402DFB default case
.text:00402E3D                 jmp     short loc_402E33
.text:00402E3D ; ---------------------------------------------------------------------------
.text:00402E3F                 align 10h
.text:00402E40
.text:00402E40 def_4029FD:                             ; CODE XREF: sub_4021E0+817↑j
.text:00402E40                                         ; sub_4021E0+855↑j
.text:00402E40                 mov     eax, [ebp+var_54] ; jumptable 004029FD default case
.text:00402E43                 jmp     loc_402A3D
.text:00402E48 ; ---------------------------------------------------------------------------
.text:00402E48
.text:00402E48 loc_402E48:                             ; CODE XREF: sub_4021E0+733↑j
.text:00402E48                 cmp     [ebp+var_13C], 0FFFFFF7Dh
.text:00402E52                 jnz     loc_40265E
.text:00402E58                 mov     [esp+168h+var_150], 0
.text:00402E60                 mov     edx, ds:_iob
.text:00402E66                 mov     [esp+168h+var_154], offset aPaulEggert ; "Paul Eggert"
.text:00402E6E                 mov     [esp+168h+Str], offset aMikeHaertel ; "Mike Haertel"
.text:00402E76                 add     edx, 20h ; ' '
.text:00402E79                 mov     [esp+168h+var_15C], offset a530 ; "5.3.0"
.text:00402E81                 mov     [esp+168h+var_160], offset aGnuCoreutils ; "GNU coreutils"
.text:00402E89                 mov     [esp+168h+Locale], offset stru_401710 ; FILE *
.text:00402E91                 mov     [esp+168h+VarName], edx ; FILE *
.text:00402E94                 call    sub_409DC0
.text:00402E99                 jmp     loc_402704
.text:00402E99 ; ---------------------------------------------------------------------------
.text:00402E9E                 align 10h
.text:00402EA0
.text:00402EA0 loc_402EA0:                             ; CODE XREF: sub_4021E0+723↑j
.text:00402EA0                 mov     [esp+168h+VarName], offset stru_401710._file
.text:00402EA7                 call    ds:libintl_gettext
.text:00402EAD                 mov     ecx, ds:dword_4189F0
.text:00402EB3                 mov     [esp+168h+VarName], eax ; Format
.text:00402EB6                 mov     [esp+168h+Locale], ecx
.text:00402EBA                 call    printf
.text:00402EBF                 mov     [esp+168h+VarName], offset aWriteSortedCon ; "Write sorted concatenation of all FILE("...
.text:00402EC6                 call    ds:libintl_gettext
.text:00402ECC                 mov     esi, ds:_iob
.text:00402ED2                 add     esi, 20h ; ' '
.text:00402ED5                 mov     [esp+168h+Locale], esi ; Stream
.text:00402ED9                 mov     [esp+168h+VarName], eax ; Buffer
.text:00402EDC                 call    fputs
.text:00402EE1                 mov     [esp+168h+VarName], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00402EE8                 call    ds:libintl_gettext
.text:00402EEE                 mov     ebx, ds:_iob
.text:00402EF4                 add     ebx, 20h ; ' '
.text:00402EF7                 mov     [esp+168h+Locale], ebx ; Stream
.text:00402EFB                 mov     [esp+168h+VarName], eax ; Buffer
.text:00402EFE                 call    fputs
.text:00402F03                 mov     [esp+168h+VarName], offset aBIgnoreLeading ; "  -b, --ignore-leading-blanks ignore le"...
.text:00402F0A                 call    ds:libintl_gettext
.text:00402F10                 mov     edi, ds:_iob
.text:00402F16                 add     edi, 20h ; ' '
.text:00402F19                 mov     [esp+168h+Locale], edi ; Stream
.text:00402F1D                 mov     [esp+168h+VarName], eax ; Buffer
.text:00402F20                 call    fputs
.text:00402F25                 mov     [esp+168h+VarName], offset aGGeneralNumeri ; "  -g, --general-numeric-sort  compare a"...
.text:00402F2C                 call    ds:libintl_gettext
.text:00402F32                 mov     ecx, ds:_iob
.text:00402F38                 add     ecx, 20h ; ' '
.text:00402F3B                 mov     [esp+168h+Locale], ecx ; Stream
.text:00402F3F                 mov     [esp+168h+VarName], eax ; Buffer
.text:00402F42                 call    fputs
.text:00402F47                 mov     [esp+168h+VarName], offset aOtherOptionsCC ; "Other options:\n\n  -c, --check        "...
.text:00402F4E                 call    ds:libintl_gettext
.text:00402F54                 mov     esi, ds:_iob
.text:00402F5A                 add     esi, 20h ; ' '
.text:00402F5D                 mov     [esp+168h+Locale], esi ; Stream
.text:00402F61                 mov     [esp+168h+VarName], eax ; Buffer
.text:00402F64                 call    fputs
.text:00402F69                 mov     [esp+168h+VarName], offset aTFieldSeparato ; "  -t, --field-separator=SEP use SEP ins"...
.text:00402F70                 call    ds:libintl_gettext
.text:00402F76                 mov     [esp+168h+Locale], offset aTmp ; "/tmp"
.text:00402F7E                 mov     [esp+168h+VarName], eax ; Format
.text:00402F81                 call    printf
.text:00402F86                 mov     [esp+168h+VarName], offset aZZeroTerminate ; "  -z, --zero-terminated     end lines w"...
.text:00402F8D                 call    ds:libintl_gettext
.text:00402F93                 mov     ebx, ds:_iob
.text:00402F99                 add     ebx, 20h ; ' '
.text:00402F9C                 mov     [esp+168h+Locale], ebx ; Stream
.text:00402FA0                 mov     [esp+168h+VarName], eax ; Buffer
.text:00402FA3                 call    fputs
.text:00402FA8                 mov     [esp+168h+VarName], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402FAF                 call    ds:libintl_gettext
.text:00402FB5                 mov     edi, ds:_iob
.text:00402FBB                 add     edi, 20h ; ' '
.text:00402FBE                 mov     [esp+168h+Locale], edi ; Stream
.text:00402FC2                 mov     [esp+168h+VarName], eax ; Buffer
.text:00402FC5                 call    fputs
.text:00402FCA                 mov     [esp+168h+VarName], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402FD1                 call    ds:libintl_gettext
.text:00402FD7                 mov     ecx, ds:_iob
.text:00402FDD                 add     ecx, 20h ; ' '
.text:00402FE0                 mov     [esp+168h+Locale], ecx ; Stream
.text:00402FE4                 mov     [esp+168h+VarName], eax ; Buffer
.text:00402FE7                 call    fputs
.text:00402FEC                 mov     [esp+168h+VarName], offset aPosIsFCOptsWhe ; "\nPOS is F[.C][OPTS], where F is the fi"...
.text:00402FF3                 call    ds:libintl_gettext
.text:00402FF9                 mov     esi, ds:_iob
.text:00402FFF                 add     esi, 20h ; ' '
.text:00403002                 mov     [esp+168h+Locale], esi ; Stream
.text:00403006                 mov     [esp+168h+VarName], eax ; Buffer
.text:00403009                 call    fputs
.text:0040300E                 mov     [esp+168h+VarName], offset a1OfMemoryB1K10 ; "% 1% of memory, b 1, K 1024 (default), "...
.text:00403015                 call    ds:libintl_gettext
.text:0040301B                 mov     ebx, ds:_iob
.text:00403021                 add     ebx, 20h ; ' '
.text:00403024                 mov     [esp+168h+Locale], ebx ; Stream
.text:00403028                 mov     [esp+168h+VarName], eax ; Buffer
.text:0040302B                 call    fputs
.text:00403030                 mov     [esp+168h+VarName], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00403037                 call    ds:libintl_gettext
.text:0040303D                 mov     [esp+168h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00403045                 mov     [esp+168h+VarName], eax ; Format
.text:00403048                 call    printf
.text:0040304D                 jmp     loc_402704
.text:00403052 ; ---------------------------------------------------------------------------
.text:00403052
.text:00403052 loc_403052:                             ; CODE XREF: sub_4021E0+713↑j
.text:00403052                 cmp     [ebp+var_13C], 62h ; 'b'
.text:00403059                 jz      loc_402930
.text:0040305F                 cmp     [ebp+var_13C], 62h ; 'b'
.text:00403066                 jg      short loc_4030C9
.text:00403068                 cmp     [ebp+var_13C], 54h ; 'T'
.text:0040306F                 jnz     loc_40265E
.text:00403075                 mov     edx, ds:dword_418470
.text:0040307B                 mov     ebx, ds:Str2
.text:00403081                 cmp     edx, ds:dword_418480
.text:00403087                 jz      short loc_40309E
.text:00403089
.text:00403089 loc_403089:                             ; CODE XREF: sub_4021E0+EE7↓j
.text:00403089                 mov     edi, ds:dword_418460
.text:0040308F                 mov     [edi+edx*4], ebx
.text:00403092                 inc     edx
.text:00403093                 mov     ds:dword_418470, edx
.text:00403099                 jmp     loc_402490
.text:0040309E ; ---------------------------------------------------------------------------
.text:0040309E
.text:0040309E loc_40309E:                             ; CODE XREF: sub_4021E0+EA7↑j
.text:0040309E                 mov     [esp+168h+var_160], 4 ; int
.text:004030A6                 mov     ecx, ds:dword_418460
.text:004030AC                 mov     [esp+168h+Locale], offset dword_418480 ; int
.text:004030B4                 mov     [esp+168h+VarName], ecx ; void *
.text:004030B7                 call    sub_40A240
.text:004030BC                 mov     ds:dword_418460, eax
.text:004030C1                 mov     edx, ds:dword_418470
.text:004030C7                 jmp     short loc_403089
.text:004030C9 ; ---------------------------------------------------------------------------
.text:004030C9
.text:004030C9 loc_4030C9:                             ; CODE XREF: sub_4021E0+E86↑j
.text:004030C9                 cmp     [ebp+var_13C], 63h ; 'c'
.text:004030D0                 jz      short loc_4030DE
.text:004030D2                 cmp     [ebp+var_13C], 64h ; 'd'
.text:004030D9                 jmp     loc_402929
.text:004030DE ; ---------------------------------------------------------------------------
.text:004030DE
.text:004030DE loc_4030DE:                             ; CODE XREF: sub_4021E0+EF0↑j
.text:004030DE                 mov     [ebp+var_CD], 1
.text:004030E5                 jmp     loc_402490
.text:004030EA ; ---------------------------------------------------------------------------
.text:004030EA
.text:004030EA loc_4030EA:                             ; CODE XREF: sub_4021E0+706↑j
.text:004030EA                 mov     ebx, ds:Str2
.text:004030F0                 mov     [esp+168h+VarName], ebx
.text:004030F3                 call    sub_403CC0
.text:004030F8                 jmp     loc_402490
.text:004030F8 ; ---------------------------------------------------------------------------
.text:004030FD                 align 10h
.text:00403100
.text:00403100 loc_403100:                             ; CODE XREF: sub_4021E0+6F0↑j
.text:00403100                 cmp     [ebp+var_13C], 72h ; 'r'
.text:00403107                 jz      loc_402930
.text:0040310D                 cmp     [ebp+var_13C], 72h ; 'r'
.text:00403114                 jg      loc_403807
.text:0040311A                 cmp     [ebp+var_13C], 6Dh ; 'm'
.text:00403121                 jz      loc_4037FB
.text:00403127                 cmp     [ebp+var_13C], 6Dh ; 'm'
.text:0040312E                 jg      loc_403783
.text:00403134                 cmp     [ebp+var_13C], 69h ; 'i'
.text:0040313B                 jz      loc_402930
.text:00403141                 cmp     [ebp+var_13C], 6Bh ; 'k'
.text:00403148                 jnz     loc_40265E
.text:0040314E                 mov     [esp+168h+VarName], 24h ; '$' ; size_t
.text:00403155                 lea     edi, [ebp+var_94]
.text:0040315B                 call    sub_40A280
.text:00403160                 mov     dword ptr [eax+8], 0FFFFFFFFh
.text:00403167                 mov     ebx, ds:Str2
.text:0040316D                 lea     ecx, [ebp+var_90]
.text:00403173                 mov     [ebp+var_10C], eax
.text:00403179                 mov     [esp+168h+Str], offset Locale ; Str
.text:00403181                 mov     [ebp+var_110], ebx
.text:00403187                 mov     [esp+168h+var_15C], ecx ; int
.text:0040318B                 mov     [esp+168h+var_160], 0Ah ; int
.text:00403193                 mov     [esp+168h+Locale], edi ; int
.text:00403197                 mov     [esp+168h+VarName], ebx ; int
.text:0040319A                 call    sub_40A940
.text:0040319F                 cmp     eax, 4          ; switch 5 cases
.text:004031A2                 ja      def_4031A8      ; jumptable 004031A8 default case
.text:004031A8                 jmp     ds:jpt_4031A8[eax*4] ; switch jump
.text:004031A8 ; ---------------------------------------------------------------------------
.text:004031AF                 align 10h
.text:004031B0 jpt_4031A8      dd offset loc_4031C4    ; DATA XREF: sub_4021E0+FC8↑r
.text:004031B0                 dd offset loc_4031F0    ; jump table for switch statement
.text:004031B0                 dd offset loc_4031C4
.text:004031B0                 dd offset loc_4031F0
.text:004031B0                 dd offset loc_403733
.text:004031C4 ; ---------------------------------------------------------------------------
.text:004031C4
.text:004031C4 loc_4031C4:                             ; CODE XREF: sub_4021E0+FC8↑j
.text:004031C4                                         ; DATA XREF: sub_4021E0:jpt_4031A8↑o
.text:004031C4                 mov     edi, [ebp+var_90] ; jumptable 004031A8 cases 0,2
.text:004031CA                 xor     edx, edx
.text:004031CC                 mov     ebx, [ebp+var_10C]
.text:004031D2                 mov     esi, [ebp+var_90]
.text:004031D8                 mov     ecx, [ebp+var_8C]
.text:004031DE                 mov     [ebx], edi
.text:004031E0                 mov     eax, [ebx]
.text:004031E2                 mov     edi, edx
.text:004031E4                 xor     edi, ecx
.text:004031E6                 xor     esi, eax
.text:004031E8                 or      esi, edi
.text:004031EA                 jz      def_4031A8      ; jumptable 004031A8 default case
.text:004031F0
.text:004031F0 loc_4031F0:                             ; CODE XREF: sub_4021E0+FC8↑j
.text:004031F0                                         ; DATA XREF: sub_4021E0:jpt_4031A8↑o
.text:004031F0                 mov     edi, offset aInvalidNumberA_1 ; jumptable 004031A8 cases 1,3
.text:004031F5                 test    edi, edi
.text:004031F7                 jz      short loc_403249
.text:004031F9                 mov     [esp+168h+VarName], edi
.text:004031FC                 call    ds:libintl_gettext
.text:00403202                 mov     [esp+168h+VarName], offset aSCountSTooLarg ; "%s: count `%.*s' too large"
.text:00403209                 mov     esi, eax
.text:0040320B                 call    ds:libintl_gettext
.text:00403211                 mov     [esp+168h+var_15C], esi ; char
.text:00403215                 mov     ebx, [ebp+var_94]
.text:0040321B                 mov     edx, [ebp+var_110]
.text:00403221                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:00403229                 mov     ecx, [ebp+var_110]
.text:0040322F                 mov     [esp+168h+var_160], eax ; char *
.text:00403233                 sub     ebx, edx
.text:00403235                 mov     [esp+168h+var_154], ecx
.text:00403239                 mov     [esp+168h+Str], ebx
.text:0040323D                 mov     [esp+168h+VarName], 2 ; Code
.text:00403244                 call    sub_40CB60
.text:00403249
.text:00403249 loc_403249:                             ; CODE XREF: sub_4021E0+1017↑j
.text:00403249                                         ; sub_4021E0+155A↓j ...
.text:00403249                 xor     eax, eax
.text:0040324B
.text:0040324B loc_40324B:                             ; CODE XREF: sub_4021E0+154E↓j
.text:0040324B                 mov     edx, eax
.text:0040324D                 mov     eax, [ebp+var_10C]
.text:00403253                 mov     esi, [eax]
.text:00403255                 dec     esi
.text:00403256                 mov     [eax], esi
.text:00403258                 inc     esi
.text:00403259                 jz      loc_403570
.text:0040325F                 cmp     byte ptr [edx], 2Eh ; '.'
.text:00403262                 jz      loc_4035D7
.text:00403268
.text:00403268 loc_403268:                             ; CODE XREF: sub_4021E0+14E5↓j
.text:00403268                 mov     ecx, [ebp+var_10C]
.text:0040326E                 mov     ebx, [ecx+4]
.text:00403271                 or      ebx, [ecx]
.text:00403273                 jnz     short loc_40327B
.text:00403275                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040327B
.text:0040327B loc_40327B:                             ; CODE XREF: sub_4021E0+1093↑j
.text:0040327B                 mov     [esp+168h+VarName], edx
.text:0040327E                 mov     ebx, [ebp+var_10C]
.text:00403284                 mov     [esp+168h+var_160], 0
.text:0040328C                 mov     [esp+168h+Locale], ebx
.text:00403290                 call    sub_405990
.text:00403295                 cmp     byte ptr [eax], 2Ch ; ','
.text:00403298                 mov     edx, eax
.text:0040329A                 jz      short loc_403309
.text:0040329C                 mov     dword ptr [ebx+8], 0FFFFFFFFh
.text:004032A3                 mov     dword ptr [ebx+0Ch], 0
.text:004032AA
.text:004032AA loc_4032AA:                             ; CODE XREF: sub_4021E0+124F↓j
.text:004032AA                 cmp     byte ptr [edx], 0
.text:004032AD                 jnz     short loc_4032DE
.text:004032AF                 mov     ecx, ds:dword_4184D0
.text:004032B5                 mov     edx, offset dword_4184D0
.text:004032BA                 test    ecx, ecx
.text:004032BC                 jz      short loc_4032CA
.text:004032BE
.text:004032BE loc_4032BE:                             ; CODE XREF: sub_4021E0+10E8↓j
.text:004032BE                 mov     ebx, [edx]
.text:004032C0                 mov     edi, [ebx+20h]
.text:004032C3                 lea     edx, [ebx+20h]
.text:004032C6                 test    edi, edi
.text:004032C8                 jnz     short loc_4032BE
.text:004032CA
.text:004032CA loc_4032CA:                             ; CODE XREF: sub_4021E0+10DC↑j
.text:004032CA                 mov     eax, [ebp+var_10C]
.text:004032D0                 mov     [edx], eax
.text:004032D2                 mov     dword ptr [eax+20h], 0
.text:004032D9                 jmp     loc_402490
.text:004032DE ; ---------------------------------------------------------------------------
.text:004032DE
.text:004032DE loc_4032DE:                             ; CODE XREF: sub_4021E0+10CD↑j
.text:004032DE                 mov     [esp+168h+VarName], offset aStrayCharacter ; "stray character in field spec"
.text:004032E5
.text:004032E5 loc_4032E5:                             ; CODE XREF: sub_4021E0+1397↓j
.text:004032E5                                         ; sub_4021E0+14F2↓j
.text:004032E5                 mov     edi, ds:Str2
.text:004032EB                 call    ds:libintl_gettext
.text:004032F1                 mov     [esp+168h+VarName], offset aSInvalidFieldS ; "%s: invalid field specification `%s'"
.text:004032F8                 mov     ebx, eax
.text:004032FA                 call    ds:libintl_gettext
.text:00403300                 mov     [esp+168h+Str], edi
.text:00403304                 jmp     loc_402C21
.text:00403309 ; ---------------------------------------------------------------------------
.text:00403309
.text:00403309 loc_403309:                             ; CODE XREF: sub_4021E0+10BA↑j
.text:00403309                 mov     [esp+168h+Str], offset Locale ; Str
.text:00403311                 mov     ebx, [ebp+var_10C]
.text:00403317                 inc     edx
.text:00403318                 mov     [ebp+var_120], edx
.text:0040331E                 lea     ecx, [ebp+var_B4]
.text:00403324                 lea     edi, [ebp+var_B0]
.text:0040332A                 mov     [esp+168h+var_15C], edi ; int
.text:0040332E                 add     ebx, 8
.text:00403331                 mov     [esp+168h+var_160], 0Ah ; int
.text:00403339                 mov     [esp+168h+Locale], ecx ; int
.text:0040333D                 mov     [esp+168h+VarName], edx ; int
.text:00403340                 call    sub_40A940
.text:00403345                 cmp     eax, 4          ; switch 5 cases
.text:00403348                 ja      def_40334E      ; jumptable 0040334E default case
.text:0040334E                 jmp     ds:jpt_40334E[eax*4] ; switch jump
.text:0040334E ; ---------------------------------------------------------------------------
.text:00403355                 align 4
.text:00403358 jpt_40334E      dd offset loc_40336C    ; DATA XREF: sub_4021E0+116E↑r
.text:00403358                 dd offset loc_403392    ; jump table for switch statement
.text:00403358                 dd offset loc_40336C
.text:00403358                 dd offset loc_403392
.text:00403358                 dd offset loc_403587
.text:0040336C ; ---------------------------------------------------------------------------
.text:0040336C
.text:0040336C loc_40336C:                             ; CODE XREF: sub_4021E0+116E↑j
.text:0040336C                                         ; DATA XREF: sub_4021E0:jpt_40334E↑o
.text:0040336C                 mov     edi, [ebp+var_B0] ; jumptable 0040334E cases 0,2
.text:00403372                 xor     edx, edx
.text:00403374                 mov     esi, [ebp+var_B0]
.text:0040337A                 mov     eax, [ebp+var_AC]
.text:00403380                 mov     ecx, edi
.text:00403382                 xor     esi, ecx
.text:00403384                 mov     [ebx], edi
.text:00403386                 mov     edi, edx
.text:00403388                 xor     edi, eax
.text:0040338A                 or      esi, edi
.text:0040338C                 jz      def_40334E      ; jumptable 0040334E default case
.text:00403392
.text:00403392 loc_403392:                             ; CODE XREF: sub_4021E0+116E↑j
.text:00403392                                         ; DATA XREF: sub_4021E0:jpt_40334E↑o
.text:00403392                 mov     edi, offset aInvalidNumberA_2 ; jumptable 0040334E cases 1,3
.text:00403397                 test    edi, edi
.text:00403399                 jz      short loc_4033EB
.text:0040339B                 mov     [esp+168h+VarName], edi
.text:0040339E                 call    ds:libintl_gettext
.text:004033A4                 mov     [esp+168h+VarName], offset aSCountSTooLarg ; "%s: count `%.*s' too large"
.text:004033AB                 mov     edi, eax
.text:004033AD                 call    ds:libintl_gettext
.text:004033B3                 mov     [esp+168h+var_15C], edi ; char
.text:004033B7                 mov     ebx, [ebp+var_B4]
.text:004033BD                 mov     ecx, [ebp+var_120]
.text:004033C3                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:004033CB                 mov     esi, [ebp+var_120]
.text:004033D1                 mov     [esp+168h+var_160], eax ; char *
.text:004033D5                 sub     ebx, ecx
.text:004033D7                 mov     [esp+168h+var_154], esi
.text:004033DB                 mov     [esp+168h+Str], ebx
.text:004033DF                 mov     [esp+168h+VarName], 2 ; Code
.text:004033E6                 call    sub_40CB60
.text:004033EB
.text:004033EB loc_4033EB:                             ; CODE XREF: sub_4021E0+11B9↑j
.text:004033EB                                         ; sub_4021E0+13AE↓j ...
.text:004033EB                 xor     eax, eax
.text:004033ED
.text:004033ED loc_4033ED:                             ; CODE XREF: sub_4021E0+13A2↓j
.text:004033ED                 mov     edx, eax
.text:004033EF                 mov     eax, [ebp+var_10C]
.text:004033F5                 mov     ecx, [eax+8]
.text:004033F8                 lea     ebx, [ecx-1]
.text:004033FB                 mov     [eax+8], ebx
.text:004033FE                 inc     ebx
.text:004033FF                 jz      loc_403570
.text:00403405                 cmp     byte ptr [edx], 2Eh ; '.'
.text:00403408                 jz      short loc_403434
.text:0040340A                 mov     eax, [ebp+var_10C]
.text:00403410                 mov     [eax+8], ecx
.text:00403413
.text:00403413 loc_403413:                             ; CODE XREF: sub_4021E0+1333↓j
.text:00403413                 mov     [esp+168h+VarName], edx
.text:00403416                 mov     esi, [ebp+var_10C]
.text:0040341C                 mov     [esp+168h+var_160], 1
.text:00403424                 mov     [esp+168h+Locale], esi
.text:00403428                 call    sub_405990
.text:0040342D                 mov     edx, eax
.text:0040342F                 jmp     loc_4032AA
.text:00403434 ; ---------------------------------------------------------------------------
.text:00403434
.text:00403434 loc_403434:                             ; CODE XREF: sub_4021E0+1228↑j
.text:00403434                 mov     [esp+168h+Str], offset Locale ; Str
.text:0040343C                 mov     ebx, [ebp+var_10C]
.text:00403442                 inc     edx
.text:00403443                 mov     [ebp+var_128], edx
.text:00403449                 lea     ecx, [ebp+var_C4]
.text:0040344F                 lea     esi, [ebp+var_C0]
.text:00403455                 mov     [esp+168h+var_15C], esi ; int
.text:00403459                 add     ebx, 0Ch
.text:0040345C                 mov     [esp+168h+var_160], 0Ah ; int
.text:00403464                 mov     [esp+168h+Locale], ecx ; int
.text:00403468                 mov     [esp+168h+VarName], edx ; int
.text:0040346B                 call    sub_40A940
.text:00403470                 cmp     eax, 4          ; switch 5 cases
.text:00403473                 ja      def_403479      ; jumptable 00403479 default case
.text:00403479                 jmp     ds:jpt_403479[eax*4] ; switch jump
.text:00403479 ; ---------------------------------------------------------------------------
.text:00403480 jpt_403479      dd offset loc_403494    ; DATA XREF: sub_4021E0+1299↑r
.text:00403480                 dd offset loc_4034B6    ; jump table for switch statement
.text:00403480                 dd offset loc_403494
.text:00403480                 dd offset loc_4034B6
.text:00403480                 dd offset loc_403520
.text:00403494 ; ---------------------------------------------------------------------------
.text:00403494
.text:00403494 loc_403494:                             ; CODE XREF: sub_4021E0+1299↑j
.text:00403494                                         ; DATA XREF: sub_4021E0:jpt_403479↑o
.text:00403494                 mov     edi, [ebp+var_C0] ; jumptable 00403479 cases 0,2
.text:0040349A                 xor     edx, edx
.text:0040349C                 mov     esi, [ebp+var_C0]
.text:004034A2                 mov     eax, [ebp+var_BC]
.text:004034A8                 mov     ecx, edi
.text:004034AA                 xor     esi, ecx
.text:004034AC                 mov     [ebx], edi
.text:004034AE                 mov     edi, edx
.text:004034B0                 xor     edi, eax
.text:004034B2                 or      esi, edi
.text:004034B4                 jz      short def_403479 ; jumptable 00403479 default case
.text:004034B6
.text:004034B6 loc_4034B6:                             ; CODE XREF: sub_4021E0+1299↑j
.text:004034B6                                         ; DATA XREF: sub_4021E0:jpt_403479↑o
.text:004034B6                 mov     edi, offset aInvalidNumberA_0 ; jumptable 00403479 cases 1,3
.text:004034BB                 test    edi, edi
.text:004034BD                 jz      short loc_40350F
.text:004034BF                 mov     [esp+168h+VarName], edi
.text:004034C2                 call    ds:libintl_gettext
.text:004034C8                 mov     [esp+168h+VarName], offset aSCountSTooLarg ; "%s: count `%.*s' too large"
.text:004034CF                 mov     esi, eax
.text:004034D1                 call    ds:libintl_gettext
.text:004034D7                 mov     [esp+168h+var_15C], esi ; char
.text:004034DB                 mov     ebx, [ebp+var_C4]
.text:004034E1                 mov     edx, [ebp+var_128]
.text:004034E7                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:004034EF                 mov     ecx, [ebp+var_128]
.text:004034F5                 mov     [esp+168h+var_160], eax ; char *
.text:004034F9                 sub     ebx, edx
.text:004034FB                 mov     [esp+168h+var_154], ecx
.text:004034FF                 mov     [esp+168h+Str], ebx
.text:00403503                 mov     [esp+168h+VarName], 2 ; Code
.text:0040350A                 call    sub_40CB60
.text:0040350F
.text:0040350F loc_40350F:                             ; CODE XREF: sub_4021E0+12DD↑j
.text:0040350F                                         ; sub_4021E0+1347↓j ...
.text:0040350F                 xor     eax, eax
.text:00403511
.text:00403511 loc_403511:                             ; CODE XREF: sub_4021E0+133E↓j
.text:00403511                 mov     edx, eax
.text:00403513                 jmp     loc_403413
.text:00403518 ; ---------------------------------------------------------------------------
.text:00403518
.text:00403518 def_403479:                             ; CODE XREF: sub_4021E0+1293↑j
.text:00403518                                         ; sub_4021E0+12D4↑j
.text:00403518                 mov     eax, [ebp+var_C4] ; jumptable 00403479 default case
.text:0040351E                 jmp     short loc_403511
.text:00403520 ; ---------------------------------------------------------------------------
.text:00403520
.text:00403520 loc_403520:                             ; CODE XREF: sub_4021E0+1299↑j
.text:00403520                                         ; DATA XREF: sub_4021E0:jpt_403479↑o
.text:00403520                 mov     ecx, offset aInvalidNumberA_0 ; jumptable 00403479 case 4
.text:00403525                 test    ecx, ecx
.text:00403527                 jz      short loc_40350F
.text:00403529                 mov     [esp+168h+VarName], ecx
.text:0040352C                 call    ds:libintl_gettext
.text:00403532                 mov     [esp+168h+VarName], offset aSInvalidCountA ; "%s: invalid count at start of `%s'"
.text:00403539                 mov     edi, eax
.text:0040353B                 call    ds:libintl_gettext
.text:00403541                 mov     [esp+168h+var_15C], edi ; char
.text:00403545                 mov     ebx, [ebp+var_128]
.text:0040354B                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:00403553                 mov     [esp+168h+VarName], 2 ; Code
.text:0040355A                 mov     [esp+168h+Str], ebx
.text:0040355E                 mov     [esp+168h+var_160], eax ; char *
.text:00403562                 call    sub_40CB60
.text:00403567                 jmp     short loc_40350F
.text:00403567 ; ---------------------------------------------------------------------------
.text:00403569                 align 10h
.text:00403570
.text:00403570 loc_403570:                             ; CODE XREF: sub_4021E0+1079↑j
.text:00403570                                         ; sub_4021E0+121F↑j
.text:00403570                 mov     [esp+168h+VarName], offset aFieldNumberIsZ ; "field number is zero"
.text:00403577                 jmp     loc_4032E5
.text:0040357C ; ---------------------------------------------------------------------------
.text:0040357C
.text:0040357C def_40334E:                             ; CODE XREF: sub_4021E0+1168↑j
.text:0040357C                                         ; sub_4021E0+11AC↑j
.text:0040357C                 mov     eax, [ebp+var_B4] ; jumptable 0040334E default case
.text:00403582                 jmp     loc_4033ED
.text:00403587 ; ---------------------------------------------------------------------------
.text:00403587
.text:00403587 loc_403587:                             ; CODE XREF: sub_4021E0+116E↑j
.text:00403587                                         ; DATA XREF: sub_4021E0:jpt_40334E↑o
.text:00403587                 mov     ecx, offset aInvalidNumberA_2 ; jumptable 0040334E case 4
.text:0040358C                 test    ecx, ecx
.text:0040358E                 jz      loc_4033EB
.text:00403594                 mov     [esp+168h+VarName], ecx
.text:00403597                 call    ds:libintl_gettext
.text:0040359D                 mov     [esp+168h+VarName], offset aSInvalidCountA ; "%s: invalid count at start of `%s'"
.text:004035A4                 mov     edi, eax
.text:004035A6                 call    ds:libintl_gettext
.text:004035AC                 mov     [esp+168h+var_15C], edi ; char
.text:004035B0                 mov     edx, [ebp+var_120]
.text:004035B6                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:004035BE                 mov     [esp+168h+VarName], 2 ; Code
.text:004035C5                 mov     [esp+168h+Str], edx
.text:004035C9                 mov     [esp+168h+var_160], eax ; char *
.text:004035CD                 call    sub_40CB60
.text:004035D2                 jmp     loc_4033EB
.text:004035D7 ; ---------------------------------------------------------------------------
.text:004035D7
.text:004035D7 loc_4035D7:                             ; CODE XREF: sub_4021E0+1082↑j
.text:004035D7                 mov     [esp+168h+Str], offset Locale ; Str
.text:004035DF                 mov     ebx, [ebp+var_10C]
.text:004035E5                 inc     edx
.text:004035E6                 mov     [ebp+var_118], edx
.text:004035EC                 lea     ecx, [ebp+var_A4]
.text:004035F2                 lea     edi, [ebp+var_A0]
.text:004035F8                 mov     [esp+168h+var_15C], edi ; int
.text:004035FC                 add     ebx, 4
.text:004035FF                 mov     [esp+168h+var_160], 0Ah ; int
.text:00403607                 mov     [esp+168h+Locale], ecx ; int
.text:0040360B                 mov     [esp+168h+VarName], edx ; int
.text:0040360E                 call    sub_40A940
.text:00403613                 cmp     eax, 4          ; switch 5 cases
.text:00403616                 ja      def_40361C      ; jumptable 0040361C default case
.text:0040361C                 jmp     ds:jpt_40361C[eax*4] ; switch jump
.text:0040361C ; ---------------------------------------------------------------------------
.text:00403623                 align 4
.text:00403624 jpt_40361C      dd offset loc_403638    ; DATA XREF: sub_4021E0+143C↑r
.text:00403624                 dd offset loc_40365A    ; jump table for switch statement
.text:00403624                 dd offset loc_403638
.text:00403624                 dd offset loc_40365A
.text:00403624                 dd offset loc_4036DF
.text:00403638 ; ---------------------------------------------------------------------------
.text:00403638
.text:00403638 loc_403638:                             ; CODE XREF: sub_4021E0+143C↑j
.text:00403638                                         ; DATA XREF: sub_4021E0:jpt_40361C↑o
.text:00403638                 mov     edi, [ebp+var_A0] ; jumptable 0040361C cases 0,2
.text:0040363E                 xor     edx, edx
.text:00403640                 mov     esi, [ebp+var_A0]
.text:00403646                 mov     eax, [ebp+var_9C]
.text:0040364C                 mov     ecx, edi
.text:0040364E                 xor     esi, ecx
.text:00403650                 mov     [ebx], edi
.text:00403652                 mov     edi, edx
.text:00403654                 xor     edi, eax
.text:00403656                 or      esi, edi
.text:00403658                 jz      short def_40361C ; jumptable 0040361C default case
.text:0040365A
.text:0040365A loc_40365A:                             ; CODE XREF: sub_4021E0+143C↑j
.text:0040365A                                         ; DATA XREF: sub_4021E0:jpt_40361C↑o
.text:0040365A                 mov     edi, offset aInvalidNumberA_0 ; jumptable 0040361C cases 1,3
.text:0040365F                 test    edi, edi
.text:00403661                 jz      short loc_4036B3
.text:00403663                 mov     [esp+168h+VarName], edi
.text:00403666                 call    ds:libintl_gettext
.text:0040366C                 mov     [esp+168h+VarName], offset aSCountSTooLarg ; "%s: count `%.*s' too large"
.text:00403673                 mov     esi, eax
.text:00403675                 call    ds:libintl_gettext
.text:0040367B                 mov     [esp+168h+var_15C], esi ; char
.text:0040367F                 mov     ebx, [ebp+var_A4]
.text:00403685                 mov     ecx, [ebp+var_118]
.text:0040368B                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:00403693                 mov     edi, [ebp+var_118]
.text:00403699                 mov     [esp+168h+var_160], eax ; char *
.text:0040369D                 sub     ebx, ecx
.text:0040369F                 mov     [esp+168h+var_154], edi
.text:004036A3                 mov     [esp+168h+Str], ebx
.text:004036A7                 mov     [esp+168h+VarName], 2 ; Code
.text:004036AE                 call    sub_40CB60
.text:004036B3
.text:004036B3 loc_4036B3:                             ; CODE XREF: sub_4021E0+1481↑j
.text:004036B3                                         ; sub_4021E0+1506↓j ...
.text:004036B3                 xor     eax, eax
.text:004036B5
.text:004036B5 loc_4036B5:                             ; CODE XREF: sub_4021E0+14FD↓j
.text:004036B5                 mov     edx, eax
.text:004036B7                 mov     eax, [ebp+var_10C]
.text:004036BD                 mov     esi, [eax+4]
.text:004036C0                 dec     esi
.text:004036C1                 mov     [eax+4], esi
.text:004036C4                 inc     esi
.text:004036C5                 jnz     loc_403268
.text:004036CB                 mov     [esp+168h+VarName], offset aCharacterOffse ; "character offset is zero"
.text:004036D2                 jmp     loc_4032E5
.text:004036D7 ; ---------------------------------------------------------------------------
.text:004036D7
.text:004036D7 def_40361C:                             ; CODE XREF: sub_4021E0+1436↑j
.text:004036D7                                         ; sub_4021E0+1478↑j
.text:004036D7                 mov     eax, [ebp+var_A4] ; jumptable 0040361C default case
.text:004036DD                 jmp     short loc_4036B5
.text:004036DF ; ---------------------------------------------------------------------------
.text:004036DF
.text:004036DF loc_4036DF:                             ; CODE XREF: sub_4021E0+143C↑j
.text:004036DF                                         ; DATA XREF: sub_4021E0:jpt_40361C↑o
.text:004036DF                 mov     ecx, offset aInvalidNumberA_0 ; jumptable 0040361C case 4
.text:004036E4                 test    ecx, ecx
.text:004036E6                 jz      short loc_4036B3
.text:004036E8                 mov     [esp+168h+VarName], ecx
.text:004036EB                 call    ds:libintl_gettext
.text:004036F1                 mov     [esp+168h+VarName], offset aSInvalidCountA ; "%s: invalid count at start of `%s'"
.text:004036F8                 mov     edi, eax
.text:004036FA                 call    ds:libintl_gettext
.text:00403700                 mov     [esp+168h+var_15C], edi ; char
.text:00403704                 mov     edx, [ebp+var_118]
.text:0040370A                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:00403712                 mov     [esp+168h+VarName], 2 ; Code
.text:00403719                 mov     [esp+168h+Str], edx
.text:0040371D                 mov     [esp+168h+var_160], eax ; char *
.text:00403721                 call    sub_40CB60
.text:00403726                 jmp     short loc_4036B3
.text:00403728 ; ---------------------------------------------------------------------------
.text:00403728
.text:00403728 def_4031A8:                             ; CODE XREF: sub_4021E0+FC2↑j
.text:00403728                                         ; sub_4021E0+100A↑j
.text:00403728                 mov     eax, [ebp+var_94] ; jumptable 004031A8 default case
.text:0040372E                 jmp     loc_40324B
.text:00403733 ; ---------------------------------------------------------------------------
.text:00403733
.text:00403733 loc_403733:                             ; CODE XREF: sub_4021E0+FC8↑j
.text:00403733                                         ; DATA XREF: sub_4021E0:jpt_4031A8↑o
.text:00403733                 mov     ecx, offset aInvalidNumberA_1 ; jumptable 004031A8 case 4
.text:00403738                 test    ecx, ecx
.text:0040373A                 jz      loc_403249
.text:00403740                 mov     [esp+168h+VarName], ecx
.text:00403743                 call    ds:libintl_gettext
.text:00403749                 mov     [esp+168h+VarName], offset aSInvalidCountA ; "%s: invalid count at start of `%s'"
.text:00403750                 mov     edi, eax
.text:00403752                 call    ds:libintl_gettext
.text:00403758                 mov     [esp+168h+var_15C], edi ; char
.text:0040375C                 mov     ebx, [ebp+var_110]
.text:00403762                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:0040376A                 mov     [esp+168h+VarName], 2 ; Code
.text:00403771                 mov     [esp+168h+Str], ebx
.text:00403775                 mov     [esp+168h+var_160], eax ; char *
.text:00403779                 call    sub_40CB60
.text:0040377E                 jmp     loc_403249
.text:00403783 ; ---------------------------------------------------------------------------
.text:00403783
.text:00403783 loc_403783:                             ; CODE XREF: sub_4021E0+F4E↑j
.text:00403783                 cmp     [ebp+var_13C], 6Eh ; 'n'
.text:0040378A                 jz      loc_402930
.text:00403790                 cmp     [ebp+var_13C], 6Fh ; 'o'
.text:00403797                 jnz     loc_40265E
.text:0040379D                 mov     edx, [ebp+Str1]
.text:004037A3                 test    edx, edx
.text:004037A5                 jz      short loc_4037C3
.text:004037A7                 mov     ecx, ds:Str2
.text:004037AD                 mov     esi, [ebp+Str1]
.text:004037B3                 mov     [esp+168h+Locale], ecx ; Str2
.text:004037B7                 mov     [esp+168h+VarName], esi ; Str1
.text:004037BA                 call    strcmp
.text:004037BF                 test    eax, eax
.text:004037C1                 jnz     short loc_4037D4
.text:004037C3
.text:004037C3 loc_4037C3:                             ; CODE XREF: sub_4021E0+15C5↑j
.text:004037C3                                         ; sub_4021E0+1619↓j
.text:004037C3                 mov     edi, ds:Str2
.text:004037C9                 mov     [ebp+Str1], edi
.text:004037CF                 jmp     loc_402490
.text:004037D4 ; ---------------------------------------------------------------------------
.text:004037D4
.text:004037D4 loc_4037D4:                             ; CODE XREF: sub_4021E0+15E1↑j
.text:004037D4                 mov     [esp+168h+VarName], offset aMultipleOutput ; "multiple output files specified"
.text:004037DB                 call    ds:libintl_gettext
.text:004037E1                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:004037E9                 mov     [esp+168h+VarName], 2 ; Code
.text:004037F0                 mov     [esp+168h+var_160], eax ; char *
.text:004037F4                 call    sub_40CB60
.text:004037F9                 jmp     short loc_4037C3
.text:004037FB ; ---------------------------------------------------------------------------
.text:004037FB
.text:004037FB loc_4037FB:                             ; CODE XREF: sub_4021E0+F41↑j
.text:004037FB                 mov     [ebp+var_CE], 1
.text:00403802                 jmp     loc_402490
.text:00403807 ; ---------------------------------------------------------------------------
.text:00403807
.text:00403807 loc_403807:                             ; CODE XREF: sub_4021E0+F34↑j
.text:00403807                 cmp     [ebp+var_13C], 75h ; 'u'
.text:0040380E                 jz      loc_403999
.text:00403814                 cmp     [ebp+var_13C], 75h ; 'u'
.text:0040381B                 jg      loc_403924
.text:00403821                 cmp     [ebp+var_13C], 73h ; 's'
.text:00403828                 jz      loc_403918
.text:0040382E                 cmp     [ebp+var_13C], 74h ; 't'
.text:00403835                 jnz     loc_40265E
.text:0040383B                 mov     esi, ds:Str2
.text:00403841                 movzx   edx, byte ptr [esi]
.text:00403844                 test    dl, dl
.text:00403846                 mov     [ebp+var_12D], dl
.text:0040384C                 jz      loc_4038E8
.text:00403852
.text:00403852 loc_403852:                             ; CODE XREF: sub_4021E0+1733↓j
.text:00403852                 cmp     byte ptr [esi+1], 0
.text:00403856                 jz      short loc_403870
.text:00403858                 cld
.text:00403859                 mov     ebx, offset a0  ; "\\0"
.text:0040385E                 mov     ecx, 3
.text:00403863                 mov     edi, ebx
.text:00403865                 repe cmpsb
.text:00403867                 jnz     short loc_4038B7
.text:00403869                 mov     [ebp+var_12D], 0
.text:00403870
.text:00403870 loc_403870:                             ; CODE XREF: sub_4021E0+1676↑j
.text:00403870                                         ; sub_4021E0+1706↓j
.text:00403870                 movsx   ebx, [ebp+var_12D]
.text:00403877                 mov     eax, dword_417094
.text:0040387C                 cmp     eax, 80h ; '€'
.text:00403881                 jz      short loc_4038AC
.text:00403883                 cmp     eax, ebx
.text:00403885                 jz      short loc_4038AC
.text:00403887                 mov     [esp+168h+VarName], offset aIncompatibleTa ; "incompatible tabs"
.text:0040388E                 call    ds:libintl_gettext
.text:00403894                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:0040389C                 mov     [esp+168h+VarName], 2 ; Code
.text:004038A3                 mov     [esp+168h+var_160], eax ; char *
.text:004038A7                 call    sub_40CB60
.text:004038AC
.text:004038AC loc_4038AC:                             ; CODE XREF: sub_4021E0+16A1↑j
.text:004038AC                                         ; sub_4021E0+16A5↑j
.text:004038AC                 mov     dword_417094, ebx
.text:004038B2                 jmp     loc_402490
.text:004038B7 ; ---------------------------------------------------------------------------
.text:004038B7
.text:004038B7 loc_4038B7:                             ; CODE XREF: sub_4021E0+1687↑j
.text:004038B7                 mov     [esp+168h+VarName], offset aMultiCharacter ; "multi-character tab `%s'"
.text:004038BE                 call    ds:libintl_gettext
.text:004038C4                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:004038CC                 mov     esi, ds:Str2
.text:004038D2                 mov     [esp+168h+VarName], 2 ; Code
.text:004038D9                 mov     [esp+168h+var_15C], esi ; char
.text:004038DD                 mov     [esp+168h+var_160], eax ; char *
.text:004038E1                 call    sub_40CB60
.text:004038E6                 jmp     short loc_403870
.text:004038E8 ; ---------------------------------------------------------------------------
.text:004038E8
.text:004038E8 loc_4038E8:                             ; CODE XREF: sub_4021E0+166C↑j
.text:004038E8                 mov     [esp+168h+VarName], offset aEmptyTab ; "empty tab"
.text:004038EF                 call    ds:libintl_gettext
.text:004038F5                 mov     [esp+168h+Locale], 0 ; ErrorMessage
.text:004038FD                 mov     [esp+168h+VarName], 2 ; Code
.text:00403904                 mov     [esp+168h+var_160], eax ; char *
.text:00403908                 call    sub_40CB60
.text:0040390D                 mov     esi, ds:Str2
.text:00403913                 jmp     loc_403852
.text:00403918 ; ---------------------------------------------------------------------------
.text:00403918
.text:00403918 loc_403918:                             ; CODE XREF: sub_4021E0+1648↑j
.text:00403918                 mov     ds:byte_4184A0, 1
.text:0040391F                 jmp     loc_402490
.text:00403924 ; ---------------------------------------------------------------------------
.text:00403924
.text:00403924 loc_403924:                             ; CODE XREF: sub_4021E0+163B↑j
.text:00403924                 cmp     [ebp+var_13C], 79h ; 'y'
.text:0040392B                 jz      short loc_403946
.text:0040392D                 cmp     [ebp+var_13C], 7Ah ; 'z'
.text:00403934                 jnz     loc_40265E
.text:0040393A                 mov     byte_417010, 0
.text:00403941                 jmp     loc_402490
.text:00403946 ; ---------------------------------------------------------------------------
.text:00403946
.text:00403946 loc_403946:                             ; CODE XREF: sub_4021E0+174B↑j
.text:00403946                 mov     edx, ds:Str2
.text:0040394C                 test    edx, edx
.text:0040394E                 jnz     loc_402490
.text:00403954                 mov     edx, dword_4170C0
.text:0040395A                 cmp     edx, [ebp+arg_0]
.text:0040395D                 mov     ebx, edx
.text:0040395F                 jz      loc_402490
.text:00403965                 mov     ecx, [ebp+arg_4]
.text:00403968                 mov     edx, [ecx+edx*4]
.text:0040396B                 movzx   ecx, byte ptr [edx]
.text:0040396E                 movsx   esi, cl
.text:00403971                 sub     esi, 30h ; '0'
.text:00403974                 cmp     esi, 9
.text:00403977                 ja      short loc_403988
.text:00403979
.text:00403979 loc_403979:                             ; CODE XREF: sub_4021E0+17A6↓j
.text:00403979                 inc     edx
.text:0040397A                 movzx   ecx, byte ptr [edx]
.text:0040397D                 movsx   edi, cl
.text:00403980                 sub     edi, 30h ; '0'
.text:00403983                 cmp     edi, 9
.text:00403986                 jbe     short loc_403979
.text:00403988
.text:00403988 loc_403988:                             ; CODE XREF: sub_4021E0+1797↑j
.text:00403988                 test    cl, cl
.text:0040398A                 mov     eax, ebx
.text:0040398C                 jnz     short loc_40398F
.text:0040398E                 inc     eax
.text:0040398F
.text:0040398F loc_40398F:                             ; CODE XREF: sub_4021E0+17AC↑j
.text:0040398F                 mov     dword_4170C0, eax
.text:00403994                 jmp     loc_402490
.text:00403999 ; ---------------------------------------------------------------------------
.text:00403999
.text:00403999 loc_403999:                             ; CODE XREF: sub_4021E0+162E↑j
.text:00403999                 mov     ds:byte_4184B0, 1
.text:004039A0                 jmp     loc_402490
.text:004039A5 ; ---------------------------------------------------------------------------
.text:004039A5
.text:004039A5 loc_4039A5:                             ; CODE XREF: sub_4021E0+2B7↑j
.text:004039A5                                         ; sub_4021E0+2DF↑j ...
.text:004039A5                 mov     edx, dword_4170C0
.text:004039AB                 jmp     loc_4024F0
.text:004039B0 ; ---------------------------------------------------------------------------
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: sub_4021E0+20A↑j
.text:004039B0                 mov     [esp+168h+VarName], ebx ; C
.text:004039B3                 call    toupper
.text:004039B8                 mov     dl, al
.text:004039BA                 jmp     loc_4023F0
.text:004039BA ; ---------------------------------------------------------------------------
.text:004039BF                 align 10h
.text:004039C0
.text:004039C0 loc_4039C0:                             ; CODE XREF: sub_4021E0+1F0↑j
.text:004039C0                 mov     edi, ds:_pctype
.text:004039C6                 mov     edx, [edi]
.text:004039C8                 movzx   eax, word ptr [edx+ebx*2]
.text:004039CC                 and     eax, 2
.text:004039CF                 jmp     loc_4023E6
.text:004039D4 ; ---------------------------------------------------------------------------
.text:004039D4
.text:004039D4 loc_4039D4:                             ; CODE XREF: sub_4021E0+1A2↑j
.text:004039D4                 mov     esi, ds:_pctype
.text:004039DA                 mov     ecx, [esi]
.text:004039DC                 movzx   eax, word ptr [ecx+ebx*2]
.text:004039E0                 and     eax, 107h
.text:004039E5                 jmp     loc_40239E
.text:004039E5 ; ---------------------------------------------------------------------------
.text:004039EA                 align 10h
.text:004039F0
.text:004039F0 loc_4039F0:                             ; CODE XREF: sub_4021E0+173↑j
.text:004039F0                 mov     edi, ds:_pctype
.text:004039F6                 mov     esi, [edi]
.text:004039F8                 movzx   eax, word ptr [esi+ebx*2]
.text:004039FC                 and     eax, 157h
.text:00403A01                 jmp     loc_40236F
.text:00403A06 ; ---------------------------------------------------------------------------
.text:00403A06
.text:00403A06 loc_403A06:                             ; CODE XREF: sub_4021E0+155↑j
.text:00403A06                                         ; sub_4021E0+15E↑j
.text:00403A06                 mov     al, 1
.text:00403A08                 jmp     loc_402344
.text:00403A0D ; ---------------------------------------------------------------------------
.text:00403A0D
.text:00403A0D loc_403A0D:                             ; CODE XREF: sub_4021E0+66↑j
.text:00403A0D                 mov     ecx, offset aBcdfgikMmnoRss_0 ; "-bcdfgik:mMno:rsS:t:T:uzy:"
.text:00403A12                 mov     [ebp+var_DC], ecx
.text:00403A18                 jmp     loc_402257
.text:00403A18 sub_4021E0      endp
.text:00403A18
.text:00403A18 ; ---------------------------------------------------------------------------
.text:00403A1D                 align 10h
.text:00403A20                 push    ebx
.text:00403A21                 sub     esp, 18h
.text:00403A24                 mov     ebx, [esp+20h]
.text:00403A28                 test    ebx, ebx
.text:00403A2A                 jz      short loc_403A60
.text:00403A2C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00403A33                 call    ds:libintl_gettext
.text:00403A39                 mov     edx, ds:_iob
.text:00403A3F                 mov     ecx, ds:dword_4189F0
.text:00403A45                 add     edx, 40h ; '@'
.text:00403A48                 mov     [esp+8], ecx
.text:00403A4C                 mov     [esp+4], eax
.text:00403A50                 mov     [esp], edx
.text:00403A53                 call    fprintf
.text:00403A58
.text:00403A58 loc_403A58:                             ; CODE XREF: .text:00403C0D↓j
.text:00403A58                 mov     [esp], ebx
.text:00403A5B                 call    exit
.text:00403A60 ; ---------------------------------------------------------------------------
.text:00403A60
.text:00403A60 loc_403A60:                             ; CODE XREF: .text:00403A2A↑j
.text:00403A60                 mov     dword ptr [esp], offset stru_401710._file
.text:00403A67                 call    ds:libintl_gettext
.text:00403A6D                 mov     ecx, ds:dword_4189F0
.text:00403A73                 mov     [esp], eax
.text:00403A76                 mov     [esp+4], ecx
.text:00403A7A                 call    printf
.text:00403A7F                 mov     dword ptr [esp], offset aWriteSortedCon ; "Write sorted concatenation of all FILE("...
.text:00403A86                 call    ds:libintl_gettext
.text:00403A8C                 mov     ecx, ds:_iob
.text:00403A92                 add     ecx, 20h ; ' '
.text:00403A95                 mov     [esp+4], ecx
.text:00403A99                 mov     [esp], eax
.text:00403A9C                 call    fputs
.text:00403AA1                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00403AA8                 call    ds:libintl_gettext
.text:00403AAE                 mov     ecx, ds:_iob
.text:00403AB4                 add     ecx, 20h ; ' '
.text:00403AB7                 mov     [esp+4], ecx
.text:00403ABB                 mov     [esp], eax
.text:00403ABE                 call    fputs
.text:00403AC3                 mov     dword ptr [esp], offset aBIgnoreLeading ; "  -b, --ignore-leading-blanks ignore le"...
.text:00403ACA                 call    ds:libintl_gettext
.text:00403AD0                 mov     ecx, ds:_iob
.text:00403AD6                 add     ecx, 20h ; ' '
.text:00403AD9                 mov     [esp+4], ecx
.text:00403ADD                 mov     [esp], eax
.text:00403AE0                 call    fputs
.text:00403AE5                 mov     dword ptr [esp], offset aGGeneralNumeri ; "  -g, --general-numeric-sort  compare a"...
.text:00403AEC                 call    ds:libintl_gettext
.text:00403AF2                 mov     ecx, ds:_iob
.text:00403AF8                 add     ecx, 20h ; ' '
.text:00403AFB                 mov     [esp+4], ecx
.text:00403AFF                 mov     [esp], eax
.text:00403B02                 call    fputs
.text:00403B07                 mov     dword ptr [esp], offset aOtherOptionsCC ; "Other options:\n\n  -c, --check        "...
.text:00403B0E                 call    ds:libintl_gettext
.text:00403B14                 mov     ecx, ds:_iob
.text:00403B1A                 add     ecx, 20h ; ' '
.text:00403B1D                 mov     [esp+4], ecx
.text:00403B21                 mov     [esp], eax
.text:00403B24                 call    fputs
.text:00403B29                 mov     dword ptr [esp], offset aTFieldSeparato ; "  -t, --field-separator=SEP use SEP ins"...
.text:00403B30                 call    ds:libintl_gettext
.text:00403B36                 mov     dword ptr [esp+4], offset aTmp ; "/tmp"
.text:00403B3E                 mov     [esp], eax
.text:00403B41                 call    printf
.text:00403B46                 mov     dword ptr [esp], offset aZZeroTerminate ; "  -z, --zero-terminated     end lines w"...
.text:00403B4D                 call    ds:libintl_gettext
.text:00403B53                 mov     ecx, ds:_iob
.text:00403B59                 add     ecx, 20h ; ' '
.text:00403B5C                 mov     [esp+4], ecx
.text:00403B60                 mov     [esp], eax
.text:00403B63                 call    fputs
.text:00403B68                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00403B6F                 call    ds:libintl_gettext
.text:00403B75                 mov     ecx, ds:_iob
.text:00403B7B                 add     ecx, 20h ; ' '
.text:00403B7E                 mov     [esp+4], ecx
.text:00403B82                 mov     [esp], eax
.text:00403B85                 call    fputs
.text:00403B8A                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00403B91                 call    ds:libintl_gettext
.text:00403B97                 mov     ecx, ds:_iob
.text:00403B9D                 add     ecx, 20h ; ' '
.text:00403BA0                 mov     [esp+4], ecx
.text:00403BA4                 mov     [esp], eax
.text:00403BA7                 call    fputs
.text:00403BAC                 mov     dword ptr [esp], offset aPosIsFCOptsWhe ; "\nPOS is F[.C][OPTS], where F is the fi"...
.text:00403BB3                 call    ds:libintl_gettext
.text:00403BB9                 mov     ecx, ds:_iob
.text:00403BBF                 add     ecx, 20h ; ' '
.text:00403BC2                 mov     [esp+4], ecx
.text:00403BC6                 mov     [esp], eax
.text:00403BC9                 call    fputs
.text:00403BCE                 mov     dword ptr [esp], offset a1OfMemoryB1K10 ; "% 1% of memory, b 1, K 1024 (default), "...
.text:00403BD5                 call    ds:libintl_gettext
.text:00403BDB                 mov     ecx, ds:_iob
.text:00403BE1                 add     ecx, 20h ; ' '
.text:00403BE4                 mov     [esp+4], ecx
.text:00403BE8                 mov     [esp], eax
.text:00403BEB                 call    fputs
.text:00403BF0                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00403BF7                 call    ds:libintl_gettext
.text:00403BFD                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00403C05                 mov     [esp], eax
.text:00403C08                 call    printf
.text:00403C0D                 jmp     loc_403A58
.text:00403C0D ; ---------------------------------------------------------------------------
.text:00403C12                 align 10h
.text:00403C20
.text:00403C20 ; =============== S U B R O U T I N E =======================================
.text:00403C20
.text:00403C20
.text:00403C20 ; void __cdecl sub_403C20()
.text:00403C20 sub_403C20      proc near               ; DATA XREF: sub_4021E0+D0↑o
.text:00403C20
.text:00403C20 var_C           = dword ptr -0Ch
.text:00403C20
.text:00403C20                 push    ebx
.text:00403C21                 sub     esp, 8
.text:00403C24                 mov     ebx, ds:Block
.text:00403C2A                 test    ebx, ebx
.text:00403C2C                 jz      short loc_403C41
.text:00403C2E                 mov     esi, esi
.text:00403C30
.text:00403C30 loc_403C30:                             ; CODE XREF: sub_403C20+1F↓j
.text:00403C30                 lea     edx, [ebx+4]
.text:00403C33                 mov     [esp+0Ch+var_C], edx ; LPCSTR
.text:00403C36                 call    sub_4101C0
.text:00403C3B                 mov     ebx, [ebx]
.text:00403C3D                 test    ebx, ebx
.text:00403C3F                 jnz     short loc_403C30
.text:00403C41
.text:00403C41 loc_403C41:                             ; CODE XREF: sub_403C20+C↑j
.text:00403C41                 add     esp, 8
.text:00403C44                 pop     ebx
.text:00403C45                 retn
.text:00403C45 sub_403C20      endp
.text:00403C45
.text:00403C45 ; ---------------------------------------------------------------------------
.text:00403C46 ; const char aEggkkmmpttyz[]
.text:00403C46 aEggkkmmpttyz   db 'EgGkKmMPtTYZ',0     ; DATA XREF: sub_403CC0+B↓o
.text:00403C53 aSortSize       db 'sort size',0        ; DATA XREF: sub_403CC0:loc_403DBA↓o
.text:00403C53                                         ; sub_403CC0:loc_403DFC↓o ...
.text:00403C5D ; const char aSSTooLarge[]
.text:00403C5D aSSTooLarge     db '%s `%s',27h,' too large',0
.text:00403C5D                                         ; DATA XREF: sub_403CC0+10B↓o
.text:00403C6F                 align 20h
.text:00403C80 aInvalidCharact db 'invalid character following %s in `%s',27h,0
.text:00403C80                                         ; DATA XREF: sub_403CC0+14D↓o
.text:00403CA7 aInvalidSS      db 'invalid %s `%s',27h,0
.text:00403CA7                                         ; DATA XREF: sub_403CC0+16D↓o
.text:00403CB7                 align 4
.text:00403CB8 flt_403CB8      dd 1.8446744e19         ; DATA XREF: sub_403CC0+1CE↓r
.text:00403CB8                                         ; sub_403CC0:loc_403EC6↓r
.text:00403CBC flt_403CBC      dd 100.0                ; DATA XREF: sub_403CC0+1D6↓r
.text:00403CC0
.text:00403CC0 ; =============== S U B R O U T I N E =======================================
.text:00403CC0
.text:00403CC0
.text:00403CC0 sub_403CC0      proc near               ; CODE XREF: sub_4021E0+F13↑p
.text:00403CC0
.text:00403CC0 var_54          = qword ptr -54h
.text:00403CC0 Code            = dword ptr -4Ch
.text:00403CC0 var_44          = dword ptr -44h
.text:00403CC0 var_40          = byte ptr -40h
.text:00403CC0 Str             = dword ptr -3Ch
.text:00403CC0 var_28          = dword ptr -28h
.text:00403CC0 var_24          = dword ptr -24h
.text:00403CC0 var_20          = dword ptr -20h
.text:00403CC0 var_1C          = qword ptr -1Ch
.text:00403CC0 arg_0           = dword ptr  4
.text:00403CC0
.text:00403CC0                 push    ebp
.text:00403CC1                 push    edi
.text:00403CC2                 push    esi
.text:00403CC3                 push    ebx
.text:00403CC4                 sub     esp, 3Ch
.text:00403CC7                 mov     ebp, [esp+4Ch+arg_0]
.text:00403CCB                 mov     [esp+4Ch+Str], offset aEggkkmmpttyz ; "EgGkKmMPtTYZ"
.text:00403CD3                 lea     edx, [esp+4Ch+var_24]
.text:00403CD7                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:00403CDB                 lea     edx, [esp+4Ch+var_28]
.text:00403CDF                 mov     [esp+4Ch+var_44], 0Ah ; int
.text:00403CE7                 mov     [esp+4Ch+Code+4], edx ; int
.text:00403CEB                 mov     [esp+4Ch+Code], ebp ; int
.text:00403CEE                 call    sub_40A940
.text:00403CF3                 test    eax, eax
.text:00403CF5                 mov     ebx, eax
.text:00403CF7                 jnz     short loc_403D30
.text:00403CF9                 mov     esi, [esp+4Ch+var_28]
.text:00403CFD                 movsx   ecx, byte ptr [esi-1]
.text:00403D01                 sub     ecx, 30h ; '0'
.text:00403D04                 cmp     ecx, 9
.text:00403D07                 ja      short loc_403D30
.text:00403D09                 mov     edx, [esp+4Ch+var_20]
.text:00403D0D                 mov     eax, [esp+4Ch+var_24]
.text:00403D11                 cmp     edx, 3FFFFFh
.text:00403D17                 ja      loc_403ED0
.text:00403D1D                 shld    edx, eax, 0Ah
.text:00403D21                 shl     eax, 0Ah
.text:00403D24                 mov     [esp+4Ch+var_24], eax
.text:00403D28                 mov     [esp+4Ch+var_20], edx
.text:00403D2C                 lea     esi, [esi+0]
.text:00403D30
.text:00403D30 loc_403D30:                             ; CODE XREF: sub_403CC0+37↑j
.text:00403D30                                         ; sub_403CC0+47↑j ...
.text:00403D30                 cmp     ebx, 2
.text:00403D33                 jz      loc_403E37
.text:00403D39
.text:00403D39 loc_403D39:                             ; CODE XREF: sub_403CC0+185↓j
.text:00403D39                                         ; sub_403CC0+18F↓j ...
.text:00403D39                 test    ebx, ebx
.text:00403D3B                 jnz     short loc_403DA8
.text:00403D3D
.text:00403D3D loc_403D3D:                             ; CODE XREF: sub_403CC0+1A6↓j
.text:00403D3D                                         ; sub_403CC0+1F5↓j
.text:00403D3D                 mov     esi, [esp+4Ch+var_20]
.text:00403D41                 xor     ecx, ecx
.text:00403D43                 mov     eax, ds:dword_418450
.text:00403D48                 mov     ebx, [esp+4Ch+var_24]
.text:00403D4C                 cmp     esi, ecx
.text:00403D4E                 ja      short loc_403D60
.text:00403D50                 jb      short loc_403DA0
.text:00403D52                 cmp     ebx, eax
.text:00403D54                 jb      short loc_403DA0
.text:00403D56                 lea     esi, [esi+0]
.text:00403D59                 lea     edi, [edi+0]
.text:00403D60
.text:00403D60 loc_403D60:                             ; CODE XREF: sub_403CC0+8E↑j
.text:00403D60                 mov     edi, [esp+4Ch+var_24]
.text:00403D64                 xor     edx, edx
.text:00403D66                 mov     ecx, edx
.text:00403D68                 xor     ecx, esi
.text:00403D6A                 mov     ds:dword_418450, edi
.text:00403D70                 mov     eax, ds:dword_418450
.text:00403D75                 xor     eax, ebx
.text:00403D77                 or      ecx, eax
.text:00403D79                 mov     ebx, 1
.text:00403D7E                 jnz     short loc_403DA8
.text:00403D80                 cmp     edi, 120h
.text:00403D86                 mov     eax, edi
.text:00403D88                 jnb     short loc_403D8F
.text:00403D8A                 mov     eax, 120h
.text:00403D8F
.text:00403D8F loc_403D8F:                             ; CODE XREF: sub_403CC0+C8↑j
.text:00403D8F                 mov     ds:dword_418450, eax
.text:00403D94                 lea     esi, [esi+0]
.text:00403D9A                 lea     edi, [edi+0]
.text:00403DA0
.text:00403DA0 loc_403DA0:                             ; CODE XREF: sub_403CC0+90↑j
.text:00403DA0                                         ; sub_403CC0+94↑j ...
.text:00403DA0                 add     esp, 3Ch
.text:00403DA3                 pop     ebx
.text:00403DA4                 pop     esi
.text:00403DA5                 pop     edi
.text:00403DA6                 pop     ebp
.text:00403DA7                 retn
.text:00403DA8 ; ---------------------------------------------------------------------------
.text:00403DA8
.text:00403DA8 loc_403DA8:                             ; CODE XREF: sub_403CC0+7B↑j
.text:00403DA8                                         ; sub_403CC0+BE↑j
.text:00403DA8                 cmp     ebx, 3
.text:00403DAB                 ja      short loc_403E17
.text:00403DAD                 cmp     ebx, 2
.text:00403DB0                 jnb     short loc_403DFC
.text:00403DB2                 dec     ebx
.text:00403DB3                 jz      short loc_403DBA
.text:00403DB5
.text:00403DB5 loc_403DB5:                             ; CODE XREF: sub_403CC0+15A↓j
.text:00403DB5                 call    abort
.text:00403DBA ; ---------------------------------------------------------------------------
.text:00403DBA
.text:00403DBA loc_403DBA:                             ; CODE XREF: sub_403CC0+F3↑j
.text:00403DBA                 mov     [esp+4Ch+Code], offset aSortSize ; "sort size"
.text:00403DC1                 call    ds:libintl_gettext
.text:00403DC7                 mov     [esp+4Ch+Str], ebp
.text:00403DCB                 mov     [esp+4Ch+var_44], offset aSSTooLarge ; "%s `%s' too large"
.text:00403DD3                 lea     esi, [esi+0]
.text:00403DD9                 lea     edi, [edi+0]
.text:00403DE0
.text:00403DE0 loc_403DE0:                             ; CODE XREF: sub_403CC0+155↓j
.text:00403DE0                                         ; sub_403CC0+175↓j
.text:00403DE0                 mov     dword ptr [esp+4Ch+var_40], eax ; char
.text:00403DE4                 mov     [esp+4Ch+Code+4], 0 ; ErrorMessage
.text:00403DEC                 mov     ebp, Code
.text:00403DF2                 mov     [esp+4Ch+Code], ebp ; Code
.text:00403DF5                 call    sub_40CB60
.text:00403DFA                 jmp     short loc_403DA0
.text:00403DFC ; ---------------------------------------------------------------------------
.text:00403DFC
.text:00403DFC loc_403DFC:                             ; CODE XREF: sub_403CC0+F0↑j
.text:00403DFC                 mov     [esp+4Ch+Code], offset aSortSize ; "sort size"
.text:00403E03                 call    ds:libintl_gettext
.text:00403E09                 mov     [esp+4Ch+Str], ebp
.text:00403E0D                 mov     [esp+4Ch+var_44], offset aInvalidCharact ; "invalid character following %s in `%s'"
.text:00403E15                 jmp     short loc_403DE0
.text:00403E17 ; ---------------------------------------------------------------------------
.text:00403E17
.text:00403E17 loc_403E17:                             ; CODE XREF: sub_403CC0+EB↑j
.text:00403E17                 cmp     ebx, 4
.text:00403E1A                 jnz     short loc_403DB5
.text:00403E1C                 mov     [esp+4Ch+Code], offset aSortSize ; "sort size"
.text:00403E23                 call    ds:libintl_gettext
.text:00403E29                 mov     [esp+4Ch+Str], ebp
.text:00403E2D                 mov     [esp+4Ch+var_44], offset aInvalidSS ; "invalid %s `%s'"
.text:00403E35                 jmp     short loc_403DE0
.text:00403E37 ; ---------------------------------------------------------------------------
.text:00403E37
.text:00403E37 loc_403E37:                             ; CODE XREF: sub_403CC0+73↑j
.text:00403E37                 mov     edx, [esp+4Ch+var_28]
.text:00403E3B                 movsx   edi, byte ptr [edx-1]
.text:00403E3F                 sub     edi, 30h ; '0'
.text:00403E42                 cmp     edi, 9
.text:00403E45                 ja      loc_403D39
.text:00403E4B                 cmp     byte ptr [edx+1], 0
.text:00403E4F                 jnz     loc_403D39
.text:00403E55                 movsx   eax, byte ptr [edx]
.text:00403E58                 cmp     eax, 25h ; '%'
.text:00403E5B                 jz      short loc_403E6B
.text:00403E5D                 cmp     eax, 62h ; 'b'
.text:00403E60                 jnz     loc_403D39
.text:00403E66                 jmp     loc_403D3D
.text:00403E6B ; ---------------------------------------------------------------------------
.text:00403E6B
.text:00403E6B loc_403E6B:                             ; CODE XREF: sub_403CC0+19B↑j
.text:00403E6B                 call    sub_40A6D0
.text:00403E70                 mov     ebx, [esp+4Ch+var_20]
.text:00403E74                 mov     edx, [esp+4Ch+var_24]
.text:00403E78                 push    ebx
.text:00403E79                 push    edx
.text:00403E7A                 fild    [esp+54h+var_54]
.text:00403E7D                 add     esp, 8
.text:00403E80                 test    ebx, ebx
.text:00403E82                 js      short loc_403EC6
.text:00403E84
.text:00403E84 loc_403E84:                             ; CODE XREF: sub_403CC0+20C↓j
.text:00403E84                 fstp    [esp+4Ch+var_1C]
.text:00403E88                 fld     [esp+4Ch+var_1C]
.text:00403E8C                 fmulp   st(1), st
.text:00403E8E                 fld     ds:flt_403CB8
.text:00403E94                 fxch    st(1)
.text:00403E96                 fdiv    ds:flt_403CBC
.text:00403E9C                 fxch    st(1)
.text:00403E9E                 fucomp  st(1)
.text:00403EA0                 fnstsw  ax
.text:00403EA2                 sahf
.text:00403EA3                 jbe     short loc_403EBA
.text:00403EA5                 fstp    qword ptr [esp+4Ch+Code] ; double
.text:00403EA8                 call    sub_414D70
.text:00403EAD                 mov     [esp+4Ch+var_24], eax
.text:00403EB1                 mov     [esp+4Ch+var_20], edx
.text:00403EB5                 jmp     loc_403D3D
.text:00403EBA ; ---------------------------------------------------------------------------
.text:00403EBA
.text:00403EBA loc_403EBA:                             ; CODE XREF: sub_403CC0+1E3↑j
.text:00403EBA                 fstp    st
.text:00403EBC                 mov     ebx, 1
.text:00403EC1                 jmp     loc_403D39
.text:00403EC6 ; ---------------------------------------------------------------------------
.text:00403EC6
.text:00403EC6 loc_403EC6:                             ; CODE XREF: sub_403CC0+1C2↑j
.text:00403EC6                 fadd    ds:flt_403CB8
.text:00403ECC                 jmp     short loc_403E84
.text:00403ECC ; ---------------------------------------------------------------------------
.text:00403ECE                 align 10h
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403CC0+57↑j
.text:00403ED0                 mov     ebx, 1
.text:00403ED5                 jmp     loc_403D30
.text:00403ED5 sub_403CC0      endp
.text:00403ED5
.text:00403ED5 ; ---------------------------------------------------------------------------
.text:00403EDA ; const char byte_403EDA
.text:00403EDA byte_403EDA     db 72h                  ; DATA XREF: sub_403F30+2F↓r
.text:00403EDA                                         ; sub_403F30:loc_403F6C↓o ...
.text:00403EDB                 align 4
.text:00403EDC aSSSDisorder    db '%s: %s:%s: disorder: ',0
.text:00403EDC                                         ; DATA XREF: sub_403F30+26B↓o
.text:00403EF2 aStandardError  db 'standard error',0   ; DATA XREF: sub_403F30+2C3↓o
.text:00403F01 aFflushFailed   db 'fflush failed',0    ; DATA XREF: sub_403F30+3D4↓o
.text:00403F01                                         ; sub_4049B0+6A7↓o ...
.text:00403F0F aWriteFailed    db 'write failed',0     ; DATA XREF: sub_403F30:loc_40432B↓o
.text:00403F0F                                         ; sub_4049B0:loc_405148↓o ...
.text:00403F1C aOpenFailed     db 'open failed',0      ; DATA XREF: sub_403F30:loc_4045A3↓o
.text:00403F1C                                         ; sub_4049B0:loc_405154↓o ...
.text:00403F28                 align 10h
.text:00403F30
.text:00403F30 ; =============== S U B R O U T I N E =======================================
.text:00403F30
.text:00403F30
.text:00403F30 ; int __cdecl sub_403F30(char *)
.text:00403F30 sub_403F30      proc near               ; CODE XREF: sub_4021E0+4C1↑p
.text:00403F30
.text:00403F30 Size            = dword ptr -0ECh
.text:00403F30 Format          = dword ptr -0E8h
.text:00403F30 ElementCount    = dword ptr -0E4h
.text:00403F30 Stream          = dword ptr -0E0h
.text:00403F30 var_DC          = dword ptr -0DCh
.text:00403F30 var_C4          = dword ptr -0C4h
.text:00403F30 var_C0          = dword ptr -0C0h
.text:00403F30 var_B0          = dword ptr -0B0h
.text:00403F30 var_AC          = dword ptr -0ACh
.text:00403F30 var_A8          = dword ptr -0A8h
.text:00403F30 Buffer          = dword ptr -0A4h
.text:00403F30 var_98          = dword ptr -98h
.text:00403F30 var_94          = dword ptr -94h
.text:00403F30 var_90          = dword ptr -90h
.text:00403F30 var_8C          = dword ptr -8Ch
.text:00403F30 var_88          = dword ptr -88h
.text:00403F30 var_82          = byte ptr -82h
.text:00403F30 var_81          = byte ptr -81h
.text:00403F30 var_80          = dword ptr -80h
.text:00403F30 var_7C          = dword ptr -7Ch
.text:00403F30 var_78          = dword ptr -78h
.text:00403F30 var_74          = dword ptr -74h
.text:00403F30 var_70          = dword ptr -70h
.text:00403F30 var_6C          = byte ptr -6Ch
.text:00403F30 var_4C          = dword ptr -4Ch
.text:00403F30 var_48          = dword ptr -48h
.text:00403F30 var_44          = dword ptr -44h
.text:00403F30 var_40          = dword ptr -40h
.text:00403F30 Block           = dword ptr -3Ch
.text:00403F30 var_38          = dword ptr -38h
.text:00403F30 var_34          = dword ptr -34h
.text:00403F30 var_30          = dword ptr -30h
.text:00403F30 var_2C          = dword ptr -2Ch
.text:00403F30 var_28          = dword ptr -28h
.text:00403F30 var_24          = byte ptr -24h
.text:00403F30 arg_0           = dword ptr  4
.text:00403F30
.text:00403F30                 push    ebp
.text:00403F31                 push    edi
.text:00403F32                 push    esi
.text:00403F33                 push    ebx
.text:00403F34                 sub     esp, 0DCh
.text:00403F3A                 mov     eax, [esp+0ECh+arg_0]
.text:00403F41                 test    eax, eax
.text:00403F43                 jz      loc_4045C5
.text:00403F49                 cld
.text:00403F4A                 mov     esi, [esp+0ECh+arg_0]
.text:00403F51                 mov     edi, offset asc_401530 ; "-"
.text:00403F56                 mov     ecx, 2
.text:00403F5B                 repe cmpsb
.text:00403F5D                 jnz     short loc_403F6C
.text:00403F5F                 cmp     ds:byte_403EDA, 72h ; 'r'
.text:00403F66                 jz      loc_4045B0
.text:00403F6C
.text:00403F6C loc_403F6C:                             ; CODE XREF: sub_403F30+2D↑j
.text:00403F6C                 mov     [esp+0ECh+Format], offset byte_403EDA ; Format
.text:00403F74                 mov     ecx, [esp+0ECh+arg_0]
.text:00403F7B                 mov     [esp+0ECh+Size], ecx ; char *
.text:00403F7E                 call    sub_40B5D0
.text:00403F83                 mov     [esp+0ECh+var_70], eax
.text:00403F87                 test    eax, eax
.text:00403F89                 jz      loc_4045A3
.text:00403F8F
.text:00403F8F loc_403F8F:                             ; CODE XREF: sub_403F30+690↓j
.text:00403F8F                                         ; sub_403F30+6A2↓j
.text:00403F8F                 cmp     ds:byte_4184B0, 0
.text:00403F96                 mov     [esp+0ECh+var_74], 0
.text:00403F9E                 mov     ebx, ds:dword_4184D0
.text:00403FA4                 mov     [esp+0ECh+var_7C], 0
.text:00403FAC                 mov     eax, dword_417090
.text:00403FB1                 setz    [esp+0ECh+var_81]
.text:00403FB6                 mov     [esp+0ECh+var_80], ebx
.text:00403FBA                 mov     ebx, ds:dword_418450
.text:00403FC0                 mov     [esp+0ECh+var_78], 0
.text:00403FC8                 mov     [esp+0ECh+var_82], 1
.text:00403FCD                 cmp     ebx, eax
.text:00403FCF                 jnb     short loc_403FE0
.text:00403FD1                 mov     ebx, eax
.text:00403FD3                 lea     esi, [esi+0]
.text:00403FD9                 lea     edi, [edi+0]
.text:00403FE0
.text:00403FE0 loc_403FE0:                             ; CODE XREF: sub_403F30+9F↑j
.text:00403FE0                                         ; sub_403F30+D2↓j
.text:00403FE0                 mov     edi, ebx
.text:00403FE2                 and     edi, 0Fh
.text:00403FE5                 sub     ebx, edi
.text:00403FE7                 lea     ebx, [ebx+10h]
.text:00403FEA                 mov     [esp+0ECh+Size], ebx ; Size
.text:00403FED                 call    malloc
.text:00403FF2                 mov     [esp+0ECh+Block], eax
.text:00403FF9                 test    eax, eax
.text:00403FFB                 jnz     short loc_404009
.text:00403FFD                 shr     ebx, 1
.text:00403FFF                 cmp     ebx, 11h
.text:00404002                 ja      short loc_403FE0
.text:00404004                 jmp     loc_4045D7
.text:00404009 ; ---------------------------------------------------------------------------
.text:00404009
.text:00404009 loc_404009:                             ; CODE XREF: sub_403F30+CB↑j
.text:00404009                 mov     [esp+0ECh+var_30], ebx
.text:00404010                 mov     esi, 10h
.text:00404015                 xor     eax, eax
.text:00404017                 mov     [esp+0ECh+var_28], esi
.text:0040401E                 xor     ecx, ecx
.text:00404020                 xor     edx, edx
.text:00404022                 mov     [esp+0ECh+var_34], eax
.text:00404029                 xor     ebp, ebp
.text:0040402B                 mov     [esp+0ECh+var_2C], ecx
.text:00404032                 mov     [esp+0ECh+var_38], edx
.text:00404039                 mov     [esp+0ECh+var_24], 0
.text:00404041                 mov     [esp+0ECh+var_4C], ebp
.text:00404048
.text:00404048 loc_404048:                             ; CODE XREF: sub_403F30+582↓j
.text:00404048                                         ; sub_403F30+5AE↓j
.text:00404048                 mov     ebp, [esp+0ECh+arg_0]
.text:0040404F                 lea     edi, [esp+0ECh+Block]
.text:00404056                 mov     eax, [esp+0ECh+var_70]
.text:0040405A                 mov     [esp+0ECh+Size], edi ; int
.text:0040405D                 mov     [esp+0ECh+ElementCount], ebp ; int
.text:00404061                 mov     [esp+0ECh+Format], eax ; FILE *
.text:00404065                 call    sub_406030
.text:0040406A                 test    al, al
.text:0040406C                 jz      loc_40422D
.text:00404072                 mov     ebx, [esp+0ECh+var_30]
.text:00404079                 mov     ecx, [esp+0ECh+Block]
.text:00404080                 mov     edx, [esp+0ECh+var_34]
.text:00404087                 mov     edi, [esp+0ECh+var_74]
.text:0040408B                 add     ebx, ecx
.text:0040408D                 shl     edx, 4
.text:00404090                 mov     [esp+0ECh+var_88], ebx
.text:00404094                 mov     ebp, ebx
.text:00404096                 lea     esi, [ebx-10h]
.text:00404099                 mov     [esp+0ECh+var_C4], esi
.text:0040409D                 sub     ebp, edx
.text:0040409F                 test    edi, edi
.text:004040A1                 mov     [esp+0ECh+var_8C], ebp
.text:004040A5                 jz      short loc_404100
.text:004040A7                 movzx   eax, [esp+0ECh+var_81]
.text:004040AC                 lea     edi, [esp+0ECh+var_4C]
.text:004040B3                 mov     ebp, ds:dword_4184D0
.text:004040B9                 mov     [esp+0ECh+var_90], eax
.text:004040BD                 test    ebp, ebp
.text:004040BF                 jnz     loc_404578
.text:004040C5
.text:004040C5 loc_4040C5:                             ; CODE XREF: sub_403F30+66E↓j
.text:004040C5                 mov     ebp, [esi+4]
.text:004040C8                 mov     ecx, [edi+4]
.text:004040CB                 dec     ebp
.text:004040CC                 dec     ecx
.text:004040CD                 mov     [esp+0ECh+var_94], ecx
.text:004040D1                 jnz     loc_4044EC
.text:004040D7                 xor     ecx, ecx
.text:004040D9                 test    ebp, ebp
.text:004040DB                 setz    cl
.text:004040DE                 dec     ecx
.text:004040DF
.text:004040DF loc_4040DF:                             ; CODE XREF: sub_403F30+5C3↓j
.text:004040DF                                         ; sub_403F30+602↓j ...
.text:004040DF                 cmp     ds:byte_418490, 0
.text:004040E6                 jz      short loc_4040EA
.text:004040E8                 neg     ecx
.text:004040EA
.text:004040EA loc_4040EA:                             ; CODE XREF: sub_403F30+1B6↑j
.text:004040EA                                         ; sub_403F30+668↓j
.text:004040EA                 cmp     [esp+0ECh+var_90], ecx
.text:004040EE                 lea     edi, [ebx-10h]
.text:004040F1                 mov     [esp+0ECh+var_C4], edi
.text:004040F5                 jle     short loc_404162
.text:004040F7                 mov     esi, esi
.text:004040F9                 lea     edi, [edi+0]
.text:00404100
.text:00404100 loc_404100:                             ; CODE XREF: sub_403F30+175↑j
.text:00404100                                         ; sub_403F30+230↓j
.text:00404100                 mov     ebp, [esp+0ECh+var_C4]
.text:00404104                 cmp     [esp+0ECh+var_8C], ebp
.text:00404108                 mov     [esp+0ECh+var_88], ebp
.text:0040410C                 jnb     loc_40442F
.text:00404112                 movzx   ebx, [esp+0ECh+var_81]
.text:00404117                 mov     eax, ds:dword_4184D0
.text:0040411C                 mov     [esp+0ECh+var_AC], ebx
.text:00404120                 mov     ebx, [esp+0ECh+var_C4]
.text:00404124                 sub     ebx, 10h
.text:00404127                 mov     [esp+0ECh+var_C4], ebx
.text:0040412B                 test    eax, eax
.text:0040412D                 jnz     loc_404400
.text:00404133
.text:00404133 loc_404133:                             ; CODE XREF: sub_403F30+4FA↓j
.text:00404133                 mov     ecx, [esp+0ECh+var_88]
.text:00404137                 mov     ebp, [ebx+4]
.text:0040413A                 mov     eax, [ecx+4]
.text:0040413D                 dec     ebp
.text:0040413E                 dec     eax
.text:0040413F                 mov     [esp+0ECh+var_C0], eax
.text:00404143                 jnz     loc_404365
.text:00404149                 xor     ecx, ecx
.text:0040414B                 test    ebp, ebp
.text:0040414D                 setz    cl
.text:00404150                 dec     ecx
.text:00404151
.text:00404151 loc_404151:                             ; CODE XREF: sub_403F30+43C↓j
.text:00404151                                         ; sub_403F30+47F↓j ...
.text:00404151                 cmp     ds:byte_418490, 0
.text:00404158                 jz      short loc_40415C
.text:0040415A                 neg     ecx
.text:0040415C
.text:0040415C loc_40415C:                             ; CODE XREF: sub_403F30+228↑j
.text:0040415C                                         ; sub_403F30+4F4↓j
.text:0040415C                 cmp     [esp+0ECh+var_AC], ecx
.text:00404160                 jg      short loc_404100
.text:00404162
.text:00404162 loc_404162:                             ; CODE XREF: sub_403F30+1C5↑j
.text:00404162                 mov     edx, [esp+0ECh+Block]
.text:00404169                 lea     ebp, [esp+0ECh+var_6C]
.text:00404170                 mov     eax, [esp+0ECh+var_30]
.text:00404177                 mov     [esp+0ECh+ElementCount], ebp
.text:0040417B                 mov     ecx, [esp+0ECh+var_C4]
.text:0040417F                 add     eax, edx
.text:00404181                 sub     eax, ecx
.text:00404183                 sar     eax, 4
.text:00404186                 cdq
.text:00404187                 add     eax, [esp+0ECh+var_7C]
.text:0040418B                 adc     edx, [esp+0ECh+var_78]
.text:0040418F                 mov     [esp+0ECh+Size], eax
.text:00404192                 mov     [esp+0ECh+Format], edx
.text:00404196                 call    sub_40A410
.text:0040419B                 mov     [esp+0ECh+Size], offset aSSSDisorder ; "%s: %s:%s: disorder: "
.text:004041A2                 mov     esi, eax
.text:004041A4                 call    ds:libintl_gettext
.text:004041AA                 mov     [esp+0ECh+var_DC], esi
.text:004041AE                 mov     edx, ds:_iob
.text:004041B4                 mov     ebx, [esp+0ECh+arg_0]
.text:004041BB                 mov     edi, ds:dword_4189F0
.text:004041C1                 add     edx, 40h ; '@'
.text:004041C4                 mov     [esp+0ECh+Size], edx ; Stream
.text:004041C7                 mov     [esp+0ECh+Stream], ebx
.text:004041CB                 mov     [esp+0ECh+ElementCount], edi
.text:004041CF                 mov     [esp+0ECh+Format], eax ; Format
.text:004041D3                 call    fprintf
.text:004041D8                 mov     ebp, [esp+0ECh+var_88]
.text:004041DC                 mov     ecx, [esp+0ECh+var_C4]
.text:004041E0                 mov     esi, ds:_iob
.text:004041E6                 mov     eax, [ebp-10h]
.text:004041E9                 mov     edi, [ecx+4]
.text:004041EC                 add     esi, 40h ; '@'
.text:004041EF                 mov     [esp+0ECh+Buffer], eax
.text:004041F3                 mov     [esp+0ECh+Size], offset aStandardError ; "standard error"
.text:004041FA                 call    ds:libintl_gettext
.text:00404200                 mov     [esp+0ECh+Stream], esi ; Stream
.text:00404204                 mov     ebx, [esp+0ECh+Buffer]
.text:00404208                 mov     [esp+0ECh+ElementCount], edi ; ElementCount
.text:0040420C                 mov     [esp+0ECh+Format], 1 ; ElementSize
.text:00404214                 mov     [esp+0ECh+var_A8], eax
.text:00404218                 mov     [esp+0ECh+Size], ebx ; Buffer
.text:0040421B                 call    fwrite
.text:00404220                 mov     [esp+0ECh+var_82], 0
.text:00404225                 cmp     eax, edi
.text:00404227                 jnz     loc_40432B
.text:0040422D
.text:0040422D loc_40422D:                             ; CODE XREF: sub_403F30+13C↑j
.text:0040422D                 mov     eax, ds:_iob
.text:00404232                 cmp     [esp+0ECh+var_70], eax
.text:00404236                 jz      loc_404310
.text:0040423C                 add     eax, 20h ; ' '
.text:0040423F                 cmp     [esp+0ECh+var_70], eax
.text:00404243                 jz      loc_4042F0
.text:00404249                 mov     esi, [esp+0ECh+var_70]
.text:0040424D                 mov     [esp+0ECh+Size], esi ; Stream
.text:00404250                 call    fclose
.text:00404255                 test    eax, eax
.text:00404257                 jnz     short loc_40428D
.text:00404259
.text:00404259 loc_404259:                             ; CODE XREF: sub_403F30+3CE↓j
.text:00404259                                         ; sub_403F30+3E8↓j ...
.text:00404259                 mov     ebx, [esp+0ECh+Block]
.text:00404260                 mov     [esp+0ECh+Size], ebx ; Block
.text:00404263                 call    free
.text:00404268                 mov     eax, [esp+0ECh+var_4C]
.text:0040426F                 test    eax, eax
.text:00404271                 jnz     short loc_404283
.text:00404273
.text:00404273 loc_404273:                             ; CODE XREF: sub_403F30+35B↓j
.text:00404273                 movzx   eax, [esp+0ECh+var_82]
.text:00404278                 add     esp, 0DCh
.text:0040427E                 pop     ebx
.text:0040427F                 pop     esi
.text:00404280                 pop     edi
.text:00404281                 pop     ebp
.text:00404282                 retn
.text:00404283 ; ---------------------------------------------------------------------------
.text:00404283
.text:00404283 loc_404283:                             ; CODE XREF: sub_403F30+341↑j
.text:00404283                 mov     [esp+0ECh+Size], eax ; Block
.text:00404286                 call    free
.text:0040428B                 jmp     short loc_404273
.text:0040428D ; ---------------------------------------------------------------------------
.text:0040428D
.text:0040428D loc_40428D:                             ; CODE XREF: sub_403F30+327↑j
.text:0040428D                 mov     [esp+0ECh+Size], offset aCloseFailed ; "close failed"
.text:00404294
.text:00404294 loc_404294:                             ; CODE XREF: sub_403F30+3DB↓j
.text:00404294                                         ; sub_403F30+67A↓j
.text:00404294                 call    ds:libintl_gettext
.text:0040429A                 mov     esi, [esp+0ECh+arg_0]
.text:004042A1                 test    esi, esi
.text:004042A3                 mov     ebx, eax
.text:004042A5                 jz      short loc_4042DA
.text:004042A7
.text:004042A7 loc_4042A7:                             ; CODE XREF: sub_403F30+3B9↓j
.text:004042A7                 call    _errno
.text:004042AC                 mov     [esp+0ECh+var_DC], esi
.text:004042B0                 mov     [esp+0ECh+Stream], ebx ; char
.text:004042B4
.text:004042B4 loc_4042B4:                             ; CODE XREF: sub_403F30+41F↓j
.text:004042B4                 mov     [esp+0ECh+ElementCount], offset aSS ; "%s: %s"
.text:004042BC                 mov     ecx, [eax]
.text:004042BE                 mov     [esp+0ECh+Size], 0 ; Code
.text:004042C5                 mov     [esp+0ECh+Format], ecx ; ErrorMessage
.text:004042C9                 call    sub_40CB60
.text:004042CE                 mov     [esp+0ECh+Size], 2 ; Code
.text:004042D5                 call    exit
.text:004042DA ; ---------------------------------------------------------------------------
.text:004042DA
.text:004042DA loc_4042DA:                             ; CODE XREF: sub_403F30+375↑j
.text:004042DA                 mov     [esp+0ECh+Size], offset aStandardOutput ; "standard output"
.text:004042E1                 call    ds:libintl_gettext
.text:004042E7                 mov     esi, eax
.text:004042E9                 jmp     short loc_4042A7
.text:004042E9 ; ---------------------------------------------------------------------------
.text:004042EB                 align 10h
.text:004042F0
.text:004042F0 loc_4042F0:                             ; CODE XREF: sub_403F30+313↑j
.text:004042F0                 mov     edx, [esp+0ECh+var_70]
.text:004042F4                 mov     [esp+0ECh+Size], edx ; Stream
.text:004042F7                 call    fflush
.text:004042FC                 test    eax, eax
.text:004042FE                 jz      loc_404259
.text:00404304                 mov     [esp+0ECh+Size], offset aFflushFailed ; "fflush failed"
.text:0040430B                 jmp     short loc_404294
.text:0040430B ; ---------------------------------------------------------------------------
.text:0040430D                 align 10h
.text:00404310
.text:00404310 loc_404310:                             ; CODE XREF: sub_403F30+306↑j
.text:00404310                 mov     ebx, [esp+0ECh+var_70]
.text:00404314                 test    byte ptr [ebx+0Ch], 10h
.text:00404318                 jz      loc_404259
.text:0040431E                 mov     [esp+0ECh+Size], ebx ; Stream
.text:00404321                 call    clearerr
.text:00404326                 jmp     loc_404259
.text:0040432B ; ---------------------------------------------------------------------------
.text:0040432B
.text:0040432B loc_40432B:                             ; CODE XREF: sub_403F30+2F7↑j
.text:0040432B                 mov     [esp+0ECh+Size], offset aWriteFailed ; "write failed"
.text:00404332                 call    ds:libintl_gettext
.text:00404338                 mov     ebx, [esp+0ECh+var_A8]
.text:0040433C                 test    ebx, ebx
.text:0040433E                 mov     esi, eax
.text:00404340                 jz      short loc_404354
.text:00404342
.text:00404342 loc_404342:                             ; CODE XREF: sub_403F30+433↓j
.text:00404342                 call    _errno
.text:00404347                 mov     [esp+0ECh+var_DC], ebx
.text:0040434B                 mov     [esp+0ECh+Stream], esi
.text:0040434F                 jmp     loc_4042B4
.text:00404354 ; ---------------------------------------------------------------------------
.text:00404354
.text:00404354 loc_404354:                             ; CODE XREF: sub_403F30+410↑j
.text:00404354                 mov     [esp+0ECh+Size], offset aStandardOutput ; "standard output"
.text:0040435B                 call    ds:libintl_gettext
.text:00404361                 mov     ebx, eax
.text:00404363                 jmp     short loc_404342
.text:00404365 ; ---------------------------------------------------------------------------
.text:00404365
.text:00404365 loc_404365:                             ; CODE XREF: sub_403F30+213↑j
.text:00404365                 test    ebp, ebp
.text:00404367                 mov     ecx, 1
.text:0040436C                 jz      loc_404151
.text:00404372                 cmp     ds:byte_418040, 0
.text:00404379                 jnz     short loc_4043D2
.text:0040437B                 cmp     ebp, [esp+0ECh+var_C0]
.text:0040437F                 mov     ecx, [esp+0ECh+var_88]
.text:00404383                 mov     edx, [ebx]
.text:00404385                 mov     eax, [ecx]
.text:00404387                 mov     [esp+0ECh+var_B0], eax
.text:0040438B                 mov     eax, ebp
.text:0040438D                 jbe     short loc_404393
.text:0040438F                 mov     eax, [esp+0ECh+var_C0]
.text:00404393
.text:00404393 loc_404393:                             ; CODE XREF: sub_403F30+45D↑j
.text:00404393                 cld
.text:00404394                 mov     esi, [esp+0ECh+var_B0]
.text:00404398                 mov     ecx, eax
.text:0040439A                 cmp     eax, eax
.text:0040439C                 mov     edi, edx
.text:0040439E                 repe cmpsb
.text:004043A0                 setnbe  al
.text:004043A3                 setb    cl
.text:004043A6                 mov     bl, al
.text:004043A8                 sub     bl, cl
.text:004043AA                 movsx   ecx, bl
.text:004043AD                 test    ecx, ecx
.text:004043AF                 jnz     loc_404151
.text:004043B5                 cmp     [esp+0ECh+var_C0], ebp
.text:004043B9                 mov     ecx, 0FFFFFFFFh
.text:004043BE                 jb      loc_404151
.text:004043C4                 xor     ecx, ecx
.text:004043C6                 cmp     [esp+0ECh+var_C0], ebp
.text:004043CA                 setnz   cl
.text:004043CD                 jmp     loc_404151
.text:004043D2 ; ---------------------------------------------------------------------------
.text:004043D2
.text:004043D2 loc_4043D2:                             ; CODE XREF: sub_403F30+449↑j
.text:004043D2                 mov     [esp+0ECh+Stream], ebp ; char
.text:004043D6                 mov     edi, [esp+0ECh+var_C0]
.text:004043DA                 mov     esi, [ebx]
.text:004043DC                 mov     ebx, [esp+0ECh+var_88]
.text:004043E0                 mov     [esp+0ECh+Format], edi ; int
.text:004043E4                 mov     [esp+0ECh+ElementCount], esi ; char *
.text:004043E8                 mov     edx, [ebx]
.text:004043EA                 mov     [esp+0ECh+Size], edx ; char *
.text:004043ED                 call    sub_40A510
.text:004043F2                 mov     ecx, eax
.text:004043F4                 jmp     loc_404151
.text:004043F4 ; ---------------------------------------------------------------------------
.text:004043F9                 align 10h
.text:00404400
.text:00404400 loc_404400:                             ; CODE XREF: sub_403F30+1FD↑j
.text:00404400                 mov     [esp+0ECh+Format], ebx
.text:00404404                 mov     ebp, [esp+0ECh+var_88]
.text:00404408                 mov     [esp+0ECh+Size], ebp
.text:0040440B                 call    sub_406350
.text:00404410                 movzx   esi, ds:byte_4184B0
.text:00404417                 mov     ecx, eax
.text:00404419                 movzx   edi, ds:byte_4184A0
.text:00404420                 or      esi, eax
.text:00404422                 or      esi, edi
.text:00404424                 jnz     loc_40415C
.text:0040442A                 jmp     loc_404133
.text:0040442F ; ---------------------------------------------------------------------------
.text:0040442F
.text:0040442F loc_40442F:                             ; CODE XREF: sub_403F30+1DC↑j
.text:0040442F                 mov     edx, [esp+0ECh+var_34]
.text:00404436                 xor     esi, esi
.text:00404438                 mov     edi, [esp+0ECh+var_C4]
.text:0040443C                 add     [esp+0ECh+var_7C], edx
.text:00404440                 mov     edx, [edi+4]
.text:00404443                 adc     [esp+0ECh+var_78], esi
.text:00404447                 cmp     [esp+0ECh+var_74], edx
.text:0040444B                 mov     eax, edx
.text:0040444D                 jnb     short loc_404485
.text:0040444F                 nop
.text:00404450
.text:00404450 loc_404450:                             ; CODE XREF: sub_403F30+52E↓j
.text:00404450                 shl     [esp+0ECh+var_74], 1
.text:00404454                 jz      loc_4044E3
.text:0040445A                 cmp     [esp+0ECh+var_74], eax
.text:0040445E                 jb      short loc_404450
.text:00404460
.text:00404460 loc_404460:                             ; CODE XREF: sub_403F30+5B7↓j
.text:00404460                 mov     eax, [esp+0ECh+var_74]
.text:00404464                 mov     ecx, [esp+0ECh+var_4C]
.text:0040446B                 mov     [esp+0ECh+Format], eax ; size_t
.text:0040446F                 mov     [esp+0ECh+Size], ecx ; void *
.text:00404472                 call    sub_40A210
.text:00404477                 mov     [esp+0ECh+var_4C], eax
.text:0040447E                 mov     ebx, [esp+0ECh+var_C4]
.text:00404482                 mov     edx, [ebx+4]
.text:00404485
.text:00404485 loc_404485:                             ; CODE XREF: sub_403F30+51D↑j
.text:00404485                 mov     edi, [esp+0ECh+var_C4]
.text:00404489                 mov     ebx, [edi]
.text:0040448B                 mov     [esp+0ECh+ElementCount], edx ; Size
.text:0040448F                 mov     edx, [esp+0ECh+var_4C]
.text:00404496                 mov     [esp+0ECh+Format], ebx ; Src
.text:0040449A                 mov     [esp+0ECh+Size], edx ; void *
.text:0040449D                 call    memcpy
.text:004044A2                 mov     ebp, [esp+0ECh+var_80]
.text:004044A6                 mov     esi, [edi+4]
.text:004044A9                 test    ebp, ebp
.text:004044AB                 mov     [esp+0ECh+var_48], esi
.text:004044B2                 jz      loc_404048
.text:004044B8                 mov     ebx, [edi+8]
.text:004044BB                 mov     edx, [edi]
.text:004044BD                 mov     esi, [edi+0Ch]
.text:004044C0                 mov     ebp, [esp+0ECh+var_4C]
.text:004044C7                 sub     ebx, edx
.text:004044C9                 sub     esi, edx
.text:004044CB                 lea     ecx, [ebx+ebp]
.text:004044CE                 add     ebp, esi
.text:004044D0                 mov     [esp+0ECh+var_44], ecx
.text:004044D7                 mov     [esp+0ECh+var_40], ebp
.text:004044DE                 jmp     loc_404048
.text:004044E3 ; ---------------------------------------------------------------------------
.text:004044E3
.text:004044E3 loc_4044E3:                             ; CODE XREF: sub_403F30+524↑j
.text:004044E3                 mov     [esp+0ECh+var_74], eax
.text:004044E7                 jmp     loc_404460
.text:004044EC ; ---------------------------------------------------------------------------
.text:004044EC
.text:004044EC loc_4044EC:                             ; CODE XREF: sub_403F30+1A1↑j
.text:004044EC                 test    ebp, ebp
.text:004044EE                 mov     ecx, 1
.text:004044F3                 jz      loc_4040DF
.text:004044F9                 cmp     ds:byte_418040, 0
.text:00404500                 jnz     short loc_404555
.text:00404502                 cmp     ebp, [esp+0ECh+var_94]
.text:00404506                 mov     eax, ebp
.text:00404508                 mov     edx, [edi]
.text:0040450A                 mov     [esp+0ECh+var_98], edx
.text:0040450E                 mov     edx, [esi]
.text:00404510                 jbe     short loc_404516
.text:00404512                 mov     eax, [esp+0ECh+var_94]
.text:00404516
.text:00404516 loc_404516:                             ; CODE XREF: sub_403F30+5E0↑j
.text:00404516                 cld
.text:00404517                 mov     esi, [esp+0ECh+var_98]
.text:0040451B                 mov     ecx, eax
.text:0040451D                 cmp     eax, eax
.text:0040451F                 mov     edi, edx
.text:00404521                 repe cmpsb
.text:00404523                 setnbe  dl
.text:00404526                 setb    al
.text:00404529                 mov     cl, dl
.text:0040452B                 sub     cl, al
.text:0040452D                 movsx   ecx, cl
.text:00404530                 test    ecx, ecx
.text:00404532                 jnz     loc_4040DF
.text:00404538                 cmp     [esp+0ECh+var_94], ebp
.text:0040453C                 mov     ecx, 0FFFFFFFFh
.text:00404541                 jb      loc_4040DF
.text:00404547                 xor     ecx, ecx
.text:00404549                 cmp     [esp+0ECh+var_94], ebp
.text:0040454D                 setnz   cl
.text:00404550                 jmp     loc_4040DF
.text:00404555 ; ---------------------------------------------------------------------------
.text:00404555
.text:00404555 loc_404555:                             ; CODE XREF: sub_403F30+5D0↑j
.text:00404555                 mov     [esp+0ECh+Stream], ebp ; char
.text:00404559                 mov     eax, [esp+0ECh+var_94]
.text:0040455D                 mov     ebp, [esi]
.text:0040455F                 mov     [esp+0ECh+Format], eax ; int
.text:00404563                 mov     [esp+0ECh+ElementCount], ebp ; char *
.text:00404567                 mov     esi, [edi]
.text:00404569                 mov     [esp+0ECh+Size], esi ; char *
.text:0040456C                 call    sub_40A510
.text:00404571                 mov     ecx, eax
.text:00404573                 jmp     loc_4040DF
.text:00404578 ; ---------------------------------------------------------------------------
.text:00404578
.text:00404578 loc_404578:                             ; CODE XREF: sub_403F30+18F↑j
.text:00404578                 mov     [esp+0ECh+Format], esi
.text:0040457C                 mov     [esp+0ECh+Size], edi
.text:0040457F                 call    sub_406350
.text:00404584                 movzx   edx, ds:byte_4184B0
.text:0040458B                 mov     ecx, eax
.text:0040458D                 movzx   ebp, ds:byte_4184A0
.text:00404594                 or      edx, eax
.text:00404596                 or      edx, ebp
.text:00404598                 jnz     loc_4040EA
.text:0040459E                 jmp     loc_4040C5
.text:004045A3 ; ---------------------------------------------------------------------------
.text:004045A3
.text:004045A3 loc_4045A3:                             ; CODE XREF: sub_403F30+59↑j
.text:004045A3                 mov     [esp+0ECh+Size], offset aOpenFailed ; "open failed"
.text:004045AA                 jmp     loc_404294
.text:004045AA ; ---------------------------------------------------------------------------
.text:004045AF                 align 10h
.text:004045B0
.text:004045B0 loc_4045B0:                             ; CODE XREF: sub_403F30+36↑j
.text:004045B0                 mov     ds:byte_4184C0, 1
.text:004045B7                 mov     eax, ds:_iob
.text:004045BC                 mov     [esp+0ECh+var_70], eax
.text:004045C0                 jmp     loc_403F8F
.text:004045C5 ; ---------------------------------------------------------------------------
.text:004045C5
.text:004045C5 loc_4045C5:                             ; CODE XREF: sub_403F30+13↑j
.text:004045C5                 mov     edx, ds:_iob
.text:004045CB                 add     edx, 20h ; ' '
.text:004045CE                 mov     [esp+0ECh+var_70], edx
.text:004045D2                 jmp     loc_403F8F
.text:004045D7 ; ---------------------------------------------------------------------------
.text:004045D7
.text:004045D7 loc_4045D7:                             ; CODE XREF: sub_403F30+D4↑j
.text:004045D7                 call    sub_40A660
.text:004045D7 sub_403F30      endp
.text:004045D7
.text:004045D7 ; ---------------------------------------------------------------------------
.text:004045DC ; const char Format
.text:004045DC Format          db 77h                  ; DATA XREF: sub_404600+111↓o
.text:004045DC                                         ; sub_404600+329↓o ...
.text:004045DD                 align 2
.text:004045DE aCannotCreateTe db 'cannot create temporary file',0
.text:004045DE                                         ; DATA XREF: sub_404600:loc_404820↓o
.text:004045DE                                         ; sub_4049B0:loc_4052D2↓o ...
.text:004045FB                 align 10h
.text:00404600
.text:00404600 ; =============== S U B R O U T I N E =======================================
.text:00404600
.text:00404600
.text:00404600 ; int __cdecl sub_404600(int, int, int, char *)
.text:00404600 sub_404600      proc near               ; CODE XREF: sub_4021E0+505↑p
.text:00404600                                         ; sub_4049B0+620↓p
.text:00404600
.text:00404600 Str             = dword ptr -3Ch
.text:00404600 Src             = dword ptr -38h
.text:00404600 Size            = dword ptr -34h
.text:00404600 var_30          = dword ptr -30h
.text:00404600 var_2C          = dword ptr -2Ch
.text:00404600 var_1C          = dword ptr -1Ch
.text:00404600 var_18          = dword ptr -18h
.text:00404600 var_14          = dword ptr -14h
.text:00404600 arg_0           = dword ptr  4
.text:00404600 arg_4           = dword ptr  8
.text:00404600 arg_8           = dword ptr  0Ch
.text:00404600 arg_C           = dword ptr  10h
.text:00404600
.text:00404600                 push    ebp
.text:00404601                 push    edi
.text:00404602                 push    esi
.text:00404603                 push    ebx
.text:00404604                 sub     esp, 2Ch
.text:00404607                 cmp     [esp+3Ch+arg_8], 10h
.text:0040460C                 jbe     loc_4047C8
.text:00404612                 lea     esi, [esi+0]
.text:00404619                 lea     edi, [edi+0]
.text:00404620
.text:00404620 loc_404620:                             ; CODE XREF: sub_404600+1C2↓j
.text:00404620                 mov     [esp+3Ch+var_14], 0
.text:00404628                 mov     edx, [esp+3Ch+arg_8]
.text:0040462C                 mov     [esp+3Ch+var_18], 0
.text:00404634                 shr     edx, 4
.text:00404637                 cmp     [esp+3Ch+var_14], edx
.text:0040463B                 jb      loc_404880
.text:00404641
.text:00404641 loc_404641:                             ; CODE XREF: sub_404600+3A0↓j
.text:00404641                 mov     edi, [esp+3Ch+var_18]
.text:00404645                 mov     ecx, 10h
.text:0040464A                 mov     edx, [esp+3Ch+arg_8]
.text:0040464E                 mov     ebx, [esp+3Ch+var_14]
.text:00404652                 and     edi, 0Fh
.text:00404655                 sub     ecx, edi
.text:00404657                 sub     edx, ebx
.text:00404659                 cmp     ecx, edx
.text:0040465B                 jnb     loc_40477A
.text:00404661                 mov     edi, ds:dword_418460
.text:00404667                 sub     edx, ecx
.text:00404669                 mov     eax, ds:dword_418010
.text:0040466E                 inc     edx
.text:0040466F                 mov     [esp+3Ch+var_1C], edx
.text:00404673                 mov     esi, [edi+eax*4]
.text:00404676                 mov     [esp+3Ch+Str], esi ; Str
.text:00404679                 call    strlen
.text:0040467E                 lea     ebp, [eax+10h]
.text:00404681                 mov     ebx, eax
.text:00404683                 mov     [esp+3Ch+Str], ebp ; size_t
.text:00404686                 call    sub_40A180
.text:0040468B                 mov     [esp+3Ch+Src], esi ; Src
.text:0040468F                 lea     edi, [eax+4]
.text:00404692                 mov     ebp, eax
.text:00404694                 mov     [esp+3Ch+Size], ebx ; Size
.text:00404698                 mov     [esp+3Ch+Str], edi ; void *
.text:0040469B                 call    memcpy
.text:004046A0                 mov     edx, ds:dword_4014F0
.text:004046A6                 mov     esi, ds:dword_4014F4
.text:004046AC                 mov     ecx, ds:dword_4014F8
.text:004046B2                 mov     [ebx+edi], edx
.text:004046B5                 xor     edx, edx
.text:004046B7                 mov     [ebx+edi+4], esi
.text:004046BB                 mov     [ebx+edi+8], ecx
.text:004046BF                 mov     esi, ds:dword_418010
.text:004046C5                 mov     dword ptr [ebp+0], 0
.text:004046CC                 mov     [esp+3Ch+Str], edi ; char *
.text:004046CF                 inc     esi
.text:004046D0                 cmp     esi, ds:dword_418470
.text:004046D6                 setz    dl
.text:004046D9                 dec     edx
.text:004046DA                 and     esi, edx
.text:004046DC                 mov     ds:dword_418010, esi
.text:004046E2                 call    sub_410330
.text:004046E7                 test    eax, eax
.text:004046E9                 mov     esi, eax
.text:004046EB                 js      short loc_4046FB
.text:004046ED                 mov     ebx, off_417098
.text:004046F3                 mov     off_417098, ebp
.text:004046F9                 mov     [ebx], ebp
.text:004046FB
.text:004046FB loc_4046FB:                             ; CODE XREF: sub_404600+EB↑j
.text:004046FB                 call    _errno
.text:00404700                 mov     ebp, [eax]
.text:00404702                 call    _errno
.text:00404707                 test    esi, esi
.text:00404709                 mov     [eax], ebp
.text:0040470B                 js      loc_404820
.text:00404711                 mov     [esp+3Ch+Src], offset Format ; Format
.text:00404719                 mov     [esp+3Ch+Str], esi ; FileHandle
.text:0040471C                 call    _fdopen
.text:00404721                 test    eax, eax
.text:00404723                 jz      loc_404820
.text:00404729                 mov     edx, [esp+3Ch+var_1C]
.text:0040472D                 mov     ecx, [esp+3Ch+arg_4]
.text:00404731                 cmp     edx, ecx
.text:00404733                 jbe     short loc_404737
.text:00404735                 mov     edx, ecx
.text:00404737
.text:00404737 loc_404737:                             ; CODE XREF: sub_404600+133↑j
.text:00404737                 mov     [esp+3Ch+var_30], eax ; FILE *
.text:0040473B                 mov     esi, [esp+3Ch+arg_0]
.text:0040473F                 mov     ecx, [esp+3Ch+var_14]
.text:00404743                 sub     [esp+3Ch+arg_4], edx
.text:00404747                 mov     ebx, [esp+3Ch+var_1C]
.text:0040474B                 lea     ebp, [esi+ecx*4]
.text:0040474E                 mov     [esp+3Ch+var_2C], edi ; char *
.text:00404752                 mov     [esp+3Ch+Size], ebx ; int
.text:00404756                 mov     [esp+3Ch+Src], edx ; int
.text:0040475A                 mov     [esp+3Ch+Str], ebp ; int
.text:0040475D                 call    sub_4069A0
.text:00404762                 mov     ebx, [esp+3Ch+var_18]
.text:00404766                 mov     eax, [esp+3Ch+arg_0]
.text:0040476A                 mov     esi, [esp+3Ch+var_1C]
.text:0040476E                 add     [esp+3Ch+var_14], esi
.text:00404772                 mov     [eax+ebx*4], edi
.text:00404775                 inc     ebx
.text:00404776                 mov     [esp+3Ch+var_18], ebx
.text:0040477A
.text:0040477A loc_40477A:                             ; CODE XREF: sub_404600+5B↑j
.text:0040477A                 mov     edi, [esp+3Ch+var_14]
.text:0040477E                 mov     edx, [esp+3Ch+arg_8]
.text:00404782                 mov     esi, [esp+3Ch+arg_0]
.text:00404786                 mov     ebx, [esp+3Ch+var_14]
.text:0040478A                 mov     eax, [esp+3Ch+var_18]
.text:0040478E                 sub     edx, edi
.text:00404790                 shl     edx, 2
.text:00404793                 lea     ecx, [esi+ebx*4]
.text:00404796                 lea     ebp, [esi+eax*4]
.text:00404799                 mov     [esp+3Ch+Size], edx ; Size
.text:0040479D                 mov     [esp+3Ch+Src], ecx ; Src
.text:004047A1                 mov     [esp+3Ch+Str], ebp ; void *
.text:004047A4                 call    memmove
.text:004047A9                 mov     edi, [esp+3Ch+var_18]
.text:004047AD                 sub     [esp+3Ch+var_14], edi
.text:004047B1                 add     [esp+3Ch+arg_4], edi
.text:004047B5                 mov     edx, [esp+3Ch+var_14]
.text:004047B9                 sub     [esp+3Ch+arg_8], edx
.text:004047BD                 cmp     [esp+3Ch+arg_8], 10h
.text:004047C2                 ja      loc_404620
.text:004047C8
.text:004047C8 loc_4047C8:                             ; CODE XREF: sub_404600+C↑j
.text:004047C8                 mov     edi, [esp+3Ch+arg_C]
.text:004047CC                 mov     edx, [esp+3Ch+arg_8]
.text:004047D0                 mov     ecx, [esp+3Ch+arg_4]
.text:004047D4                 mov     [esp+3Ch+var_30], edi ; char *
.text:004047D8                 mov     eax, [esp+3Ch+arg_0]
.text:004047DC                 mov     [esp+3Ch+Size], edx ; int
.text:004047E0                 mov     [esp+3Ch+Src], ecx ; int
.text:004047E4                 mov     [esp+3Ch+Str], eax ; int
.text:004047E7                 call    sub_407D00
.text:004047EC                 mov     [esp+3Ch+arg_8], eax
.text:004047F0                 mov     ebx, [esp+3Ch+arg_C]
.text:004047F4                 mov     esi, [esp+3Ch+arg_4]
.text:004047F8                 mov     [esp+3Ch+var_30], 0 ; FILE *
.text:00404800                 mov     ebp, [esp+3Ch+arg_0]
.text:00404804                 mov     [esp+3Ch+var_2C], ebx ; char *
.text:00404808                 mov     [esp+3Ch+Src], esi ; int
.text:0040480C                 mov     [esp+3Ch+Str], ebp ; int
.text:0040480F                 mov     [esp+3Ch+Size], eax ; int
.text:00404813                 call    sub_4069A0
.text:00404818                 add     esp, 2Ch
.text:0040481B                 pop     ebx
.text:0040481C                 pop     esi
.text:0040481D                 pop     edi
.text:0040481E                 pop     ebp
.text:0040481F                 retn
.text:00404820 ; ---------------------------------------------------------------------------
.text:00404820
.text:00404820 loc_404820:                             ; CODE XREF: sub_404600+10B↑j
.text:00404820                                         ; sub_404600+123↑j ...
.text:00404820                 mov     [esp+3Ch+Str], offset aCannotCreateTe ; "cannot create temporary file"
.text:00404827                 mov     ebx, edi
.text:00404829                 call    ds:libintl_gettext
.text:0040482F                 test    edi, edi
.text:00404831                 mov     esi, eax
.text:00404833                 jz      short loc_404868
.text:00404835
.text:00404835 loc_404835:                             ; CODE XREF: sub_404600+277↓j
.text:00404835                 call    _errno
.text:0040483A                 mov     [esp+3Ch+var_2C], ebx
.text:0040483E                 mov     [esp+3Ch+var_30], esi ; char
.text:00404842                 mov     [esp+3Ch+Size], offset aSS ; "%s: %s"
.text:0040484A                 mov     ecx, [eax]
.text:0040484C                 mov     [esp+3Ch+Str], 0 ; Code
.text:00404853                 mov     [esp+3Ch+Src], ecx ; ErrorMessage
.text:00404857                 call    sub_40CB60
.text:0040485C                 mov     [esp+3Ch+Str], 2 ; Code
.text:00404863                 call    exit
.text:00404868 ; ---------------------------------------------------------------------------
.text:00404868
.text:00404868 loc_404868:                             ; CODE XREF: sub_404600+233↑j
.text:00404868                 mov     [esp+3Ch+Str], offset aStandardOutput ; "standard output"
.text:0040486F                 call    ds:libintl_gettext
.text:00404875                 mov     ebx, eax
.text:00404877                 jmp     short loc_404835
.text:00404877 ; ---------------------------------------------------------------------------
.text:00404879                 align 10h
.text:00404880
.text:00404880 loc_404880:                             ; CODE XREF: sub_404600+3B↑j
.text:00404880                                         ; sub_404600+39A↓j
.text:00404880                 mov     ebx, ds:dword_418460
.text:00404886                 mov     eax, ds:dword_418010
.text:0040488B                 mov     esi, [ebx+eax*4]
.text:0040488E                 mov     [esp+3Ch+Str], esi ; Str
.text:00404891                 call    strlen
.text:00404896                 lea     edi, [eax+10h]
.text:00404899                 mov     ebx, eax
.text:0040489B                 mov     [esp+3Ch+Str], edi ; size_t
.text:0040489E                 call    sub_40A180
.text:004048A3                 mov     [esp+3Ch+Src], esi ; Src
.text:004048A7                 lea     edi, [eax+4]
.text:004048AA                 mov     ebp, eax
.text:004048AC                 mov     [esp+3Ch+Size], ebx ; Size
.text:004048B0                 mov     [esp+3Ch+Str], edi ; void *
.text:004048B3                 call    memcpy
.text:004048B8                 mov     edx, ds:dword_4014F0
.text:004048BE                 mov     ecx, ds:dword_4014F4
.text:004048C4                 mov     esi, ds:dword_4014F8
.text:004048CA                 mov     [ebx+edi], edx
.text:004048CD                 xor     edx, edx
.text:004048CF                 mov     [ebx+edi+8], esi
.text:004048D3                 mov     [ebx+edi+4], ecx
.text:004048D7                 mov     ecx, ds:dword_418010
.text:004048DD                 mov     dword ptr [ebp+0], 0
.text:004048E4                 mov     [esp+3Ch+Str], edi ; char *
.text:004048E7                 inc     ecx
.text:004048E8                 cmp     ecx, ds:dword_418470
.text:004048EE                 setz    dl
.text:004048F1                 dec     edx
.text:004048F2                 and     ecx, edx
.text:004048F4                 mov     ds:dword_418010, ecx
.text:004048FA                 call    sub_410330
.text:004048FF                 test    eax, eax
.text:00404901                 mov     esi, eax
.text:00404903                 js      short loc_404913
.text:00404905                 mov     ecx, off_417098
.text:0040490B                 mov     off_417098, ebp
.text:00404911                 mov     [ecx], ebp
.text:00404913
.text:00404913 loc_404913:                             ; CODE XREF: sub_404600+303↑j
.text:00404913                 call    _errno
.text:00404918                 mov     ebp, [eax]
.text:0040491A                 call    _errno
.text:0040491F                 test    esi, esi
.text:00404921                 mov     [eax], ebp
.text:00404923                 js      loc_404820
.text:00404929                 mov     [esp+3Ch+Src], offset Format ; Format
.text:00404931                 mov     [esp+3Ch+Str], esi ; FileHandle
.text:00404934                 call    _fdopen
.text:00404939                 test    eax, eax
.text:0040493B                 jz      loc_404820
.text:00404941                 mov     edx, [esp+3Ch+arg_4]
.text:00404945                 cmp     edx, 10h
.text:00404948                 jbe     short loc_40494F
.text:0040494A                 mov     edx, 10h
.text:0040494F
.text:0040494F loc_40494F:                             ; CODE XREF: sub_404600+348↑j
.text:0040494F                 sub     [esp+3Ch+arg_4], edx
.text:00404953                 mov     esi, [esp+3Ch+arg_0]
.text:00404957                 mov     [esp+3Ch+var_30], eax ; FILE *
.text:0040495B                 mov     ecx, [esp+3Ch+var_14]
.text:0040495F                 mov     [esp+3Ch+var_2C], edi ; char *
.text:00404963                 mov     [esp+3Ch+Size], 10h ; int
.text:0040496B                 lea     ebp, [esi+ecx*4]
.text:0040496E                 mov     [esp+3Ch+Src], edx ; int
.text:00404972                 mov     [esp+3Ch+Str], ebp ; int
.text:00404975                 call    sub_4069A0
.text:0040497A                 add     [esp+3Ch+var_14], 10h
.text:0040497F                 mov     ebx, [esp+3Ch+var_18]
.text:00404983                 mov     eax, [esp+3Ch+arg_0]
.text:00404987                 mov     esi, [esp+3Ch+arg_8]
.text:0040498B                 mov     [eax+ebx*4], edi
.text:0040498E                 inc     ebx
.text:0040498F                 shr     esi, 4
.text:00404992                 mov     [esp+3Ch+var_18], ebx
.text:00404996                 cmp     [esp+3Ch+var_18], esi
.text:0040499A                 jb      loc_404880
.text:004049A0                 jmp     loc_404641
.text:004049A0 sub_404600      endp
.text:004049A0
.text:004049A0 ; ---------------------------------------------------------------------------
.text:004049A5                 align 10h
.text:004049B0
.text:004049B0 ; =============== S U B R O U T I N E =======================================
.text:004049B0
.text:004049B0
.text:004049B0 ; int __cdecl sub_4049B0(int, int, char *)
.text:004049B0 sub_4049B0      proc near               ; CODE XREF: sub_4021E0+59F↑p
.text:004049B0
.text:004049B0 Stream          = dword ptr -11Ch
.text:004049B0 ElementSize     = dword ptr -118h
.text:004049B0 ElementCount    = dword ptr -114h
.text:004049B0 var_110         = dword ptr -110h
.text:004049B0 var_10C         = dword ptr -10Ch
.text:004049B0 var_F4          = dword ptr -0F4h
.text:004049B0 var_F0          = dword ptr -0F0h
.text:004049B0 var_E1          = byte ptr -0E1h
.text:004049B0 var_E0          = dword ptr -0E0h
.text:004049B0 var_DC          = dword ptr -0DCh
.text:004049B0 var_D8          = dword ptr -0D8h
.text:004049B0 var_CC          = dword ptr -0CCh
.text:004049B0 Src             = dword ptr -0C8h
.text:004049B0 var_BC          = dword ptr -0BCh
.text:004049B0 var_B8          = dword ptr -0B8h
.text:004049B0 var_B4          = dword ptr -0B4h
.text:004049B0 var_B0          = dword ptr -0B0h
.text:004049B0 var_A4          = dword ptr -0A4h
.text:004049B0 var_A0          = dword ptr -0A0h
.text:004049B0 var_9C          = dword ptr -9Ch
.text:004049B0 var_98          = dword ptr -98h
.text:004049B0 var_8C          = dword ptr -8Ch
.text:004049B0 var_88          = dword ptr -88h
.text:004049B0 var_84          = dword ptr -84h
.text:004049B0 var_80          = dword ptr -80h
.text:004049B0 var_74          = dword ptr -74h
.text:004049B0 var_70          = dword ptr -70h
.text:004049B0 var_6C          = dword ptr -6Ch
.text:004049B0 var_68          = dword ptr -68h
.text:004049B0 var_64          = dword ptr -64h
.text:004049B0 var_60          = dword ptr -60h
.text:004049B0 var_5C          = dword ptr -5Ch
.text:004049B0 var_55          = byte ptr -55h
.text:004049B0 var_54          = dword ptr -54h
.text:004049B0 var_50          = dword ptr -50h
.text:004049B0 var_4C          = dword ptr -4Ch
.text:004049B0 var_48          = dword ptr -48h
.text:004049B0 var_44          = dword ptr -44h
.text:004049B0 var_40          = dword ptr -40h
.text:004049B0 Block           = dword ptr -3Ch
.text:004049B0 var_38          = dword ptr -38h
.text:004049B0 var_34          = dword ptr -34h
.text:004049B0 var_30          = dword ptr -30h
.text:004049B0 var_2C          = dword ptr -2Ch
.text:004049B0 var_24          = byte ptr -24h
.text:004049B0 arg_0           = dword ptr  4
.text:004049B0 arg_4           = dword ptr  8
.text:004049B0 arg_8           = dword ptr  0Ch
.text:004049B0
.text:004049B0                 push    ebp
.text:004049B1                 xor     eax, eax
.text:004049B3                 xor     edx, edx
.text:004049B5                 push    edi
.text:004049B6                 push    esi
.text:004049B7                 push    ebx
.text:004049B8                 sub     esp, 10Ch
.text:004049BE                 mov     [esp+11Ch+var_30], eax
.text:004049C5                 mov     eax, [esp+11Ch+arg_4]
.text:004049CC                 mov     [esp+11Ch+var_54], edx
.text:004049D3                 mov     [esp+11Ch+var_55], 0
.text:004049DB                 test    eax, eax
.text:004049DD                 jz      loc_404F5D
.text:004049E3
.text:004049E3 loc_4049E3:                             ; CODE XREF: sub_4049B0+E8C↓j
.text:004049E3                 mov     ebx, [esp+11Ch+arg_0]
.text:004049EA                 mov     ecx, [ebx]
.text:004049EC                 test    ecx, ecx
.text:004049EE                 mov     [esp+11Ch+var_60], ecx
.text:004049F5                 jz      loc_405913
.text:004049FB                 cld
.text:004049FC                 mov     esi, [esp+11Ch+var_60]
.text:00404A03                 mov     edi, offset asc_401530 ; "-"
.text:00404A08                 mov     ecx, 2
.text:00404A0D                 repe cmpsb
.text:00404A0F                 jnz     short loc_404A1E
.text:00404A11                 cmp     ds:byte_403EDA, 72h ; 'r'
.text:00404A18                 jz      loc_405902
.text:00404A1E
.text:00404A1E loc_404A1E:                             ; CODE XREF: sub_4049B0+5F↑j
.text:00404A1E                 mov     [esp+11Ch+ElementSize], offset byte_403EDA ; Format
.text:00404A26                 mov     edi, [esp+11Ch+var_60]
.text:00404A2D                 mov     [esp+11Ch+Stream], edi ; char *
.text:00404A30                 call    sub_40B5D0
.text:00404A35                 test    eax, eax
.text:00404A37                 jz      loc_405154
.text:00404A3D
.text:00404A3D loc_404A3D:                             ; CODE XREF: sub_4049B0+F5E↓j
.text:00404A3D                                         ; sub_4049B0+F6B↓j
.text:00404A3D                 mov     [esp+11Ch+var_50], eax
.text:00404A44                 mov     esi, [esp+11Ch+var_30]
.text:00404A4B                 test    esi, esi
.text:00404A4D                 jz      loc_40587B
.text:00404A53
.text:00404A53 loc_404A53:                             ; CODE XREF: sub_4049B0+F4D↓j
.text:00404A53                 add     [esp+11Ch+arg_0], 4
.text:00404A5B                 dec     [esp+11Ch+arg_4]
.text:00404A62                 mov     [esp+11Ch+var_24], 0
.text:00404A6A
.text:00404A6A loc_404A6A:                             ; CODE XREF: sub_4049B0+5A7↓j
.text:00404A6A                 mov     eax, [esp+11Ch+var_60]
.text:00404A71                 lea     edx, [esp+11Ch+Block]
.text:00404A78                 mov     edi, [esp+11Ch+var_50]
.text:00404A7F                 mov     [esp+11Ch+Stream], edx ; int
.text:00404A82                 mov     [esp+11Ch+ElementCount], eax ; int
.text:00404A86                 mov     [esp+11Ch+ElementSize], edi ; FILE *
.text:00404A8A                 call    sub_406030
.text:00404A8F                 test    al, al
.text:00404A91                 jz      loc_40580C
.text:00404A97                 movzx   eax, [esp+11Ch+var_24]
.text:00404A9F                 test    al, al
.text:00404AA1                 mov     [esp+11Ch+var_E1], al
.text:00404AA5                 jz      loc_405868
.text:00404AAB                 mov     ebx, [esp+11Ch+arg_4]
.text:00404AB2                 test    ebx, ebx
.text:00404AB4                 jz      loc_405868
.text:00404ABA                 mov     ebx, [esp+11Ch+var_34]
.text:00404AC1                 mov     ecx, [esp+11Ch+var_30]
.text:00404AC8                 mov     esi, [esp+11Ch+var_38]
.text:00404ACF                 imul    edx, ebx, 18h
.text:00404AD2                 mov     ebp, ecx
.text:00404AD4                 sub     ebp, esi
.text:00404AD6                 sub     ebp, edx
.text:00404AD8                 cmp     ebp, 19h
.text:00404ADB                 ja      loc_405805
.text:00404AE1
.text:00404AE1 loc_404AE1:                             ; CODE XREF: sub_4049B0+EC6↓j
.text:00404AE1                 mov     ebp, [esp+11Ch+Block]
.text:00404AE8                 mov     esi, ebx
.text:00404AEA                 shl     esi, 4
.text:00404AED                 add     ecx, ebp
.text:00404AEF                 mov     edi, ecx
.text:00404AF1                 sub     edi, esi
.text:00404AF3                 mov     [esp+11Ch+var_70], ecx
.text:00404AFA                 cmp     ebx, 1
.text:00404AFD                 mov     [esp+11Ch+var_68], ecx
.text:00404B04                 mov     [esp+11Ch+var_6C], edi
.text:00404B0B                 jbe     loc_404D6E
.text:00404B11                 cmp     ebx, 2
.text:00404B14                 jz      loc_405692
.text:00404B1A                 mov     esi, ebx
.text:00404B1C                 mov     ebp, [esp+11Ch+var_68]
.text:00404B23                 mov     edx, ebx
.text:00404B25                 shr     esi, 1
.text:00404B27                 mov     eax, [esp+11Ch+var_6C]
.text:00404B2E                 mov     edi, esi
.text:00404B30                 mov     [esp+11Ch+var_80], esi
.text:00404B37                 shl     edi, 4
.text:00404B3A                 sub     edx, esi
.text:00404B3C                 mov     [esp+11Ch+var_84], edx
.text:00404B43                 sub     ebp, edi
.text:00404B45                 mov     [esp+11Ch+var_88], ebp
.text:00404B4C                 mov     [esp+11Ch+ElementCount], eax
.text:00404B50                 mov     [esp+11Ch+ElementSize], edx
.text:00404B54                 mov     [esp+11Ch+Stream], ebp
.text:00404B57                 call    sub_407970
.text:00404B5C                 cmp     esi, 1
.text:00404B5F                 jbe     loc_405667
.text:00404B65                 cmp     esi, 2
.text:00404B68                 jz      loc_40551F
.text:00404B6E                 mov     esi, ebx
.text:00404B70                 mov     ebp, [esp+11Ch+var_80]
.text:00404B77                 shr     esi, 2
.text:00404B7A                 mov     ebx, [esp+11Ch+var_68]
.text:00404B81                 mov     edx, esi
.text:00404B83                 mov     edi, [esp+11Ch+var_6C]
.text:00404B8A                 shl     edx, 4
.text:00404B8D                 sub     ebp, esi
.text:00404B8F                 sub     ebx, edx
.text:00404B91                 mov     [esp+11Ch+ElementSize], ebp
.text:00404B95                 sub     edi, edx
.text:00404B97                 mov     [esp+11Ch+ElementCount], edi
.text:00404B9B                 mov     [esp+11Ch+Stream], ebx
.text:00404B9E                 call    sub_405AF0
.text:00404BA3                 cmp     esi, 1
.text:00404BA6                 ja      loc_4054FC
.text:00404BAC
.text:00404BAC loc_404BAC:                             ; CODE XREF: sub_4049B0+B6A↓j
.text:00404BAC                 mov     [esp+11Ch+var_98], esi
.text:00404BB3                 mov     ebx, [esp+11Ch+var_6C]
.text:00404BBA                 mov     esi, [esp+11Ch+var_68]
.text:00404BC1                 mov     [esp+11Ch+var_9C], ebp
.text:00404BC8                 sub     esi, 10h
.text:00404BCB                 mov     [esp+11Ch+var_D8], esi
.text:00404BCF
.text:00404BCF loc_404BCF:                             ; CODE XREF: sub_4049B0+293↓j
.text:00404BCF                 sub     edi, 10h
.text:00404BD2                 mov     [esp+11Ch+var_DC], edi
.text:00404BD6
.text:00404BD6 loc_404BD6:                             ; CODE XREF: sub_4049B0+A78↓j
.text:00404BD6                 mov     ebp, ds:dword_4184D0
.text:00404BDC                 test    ebp, ebp
.text:00404BDE                 jnz     loc_4054C9
.text:00404BE4
.text:00404BE4 loc_404BE4:                             ; CODE XREF: sub_4049B0+B47↓j
.text:00404BE4                 mov     esi, [esp+11Ch+var_DC]
.text:00404BE8                 mov     edi, [esp+11Ch+var_D8]
.text:00404BEC                 mov     ebp, [esi+4]
.text:00404BEF                 mov     edx, [edi+4]
.text:00404BF2                 dec     ebp
.text:00404BF3                 dec     edx
.text:00404BF4                 mov     [esp+11Ch+var_A0], edx
.text:00404BF8                 jnz     loc_40542D
.text:00404BFE                 xor     ecx, ecx
.text:00404C00                 test    ebp, ebp
.text:00404C02                 setz    cl
.text:00404C05                 dec     ecx
.text:00404C06
.text:00404C06 loc_404C06:                             ; CODE XREF: sub_4049B0+A84↓j
.text:00404C06                                         ; sub_4049B0+ACB↓j ...
.text:00404C06                 cmp     ds:byte_418490, 0
.text:00404C0D                 jz      short loc_404C11
.text:00404C0F                 neg     ecx
.text:00404C11
.text:00404C11 loc_404C11:                             ; CODE XREF: sub_4049B0+25D↑j
.text:00404C11                                         ; sub_4049B0+B41↓j
.text:00404C11                 test    ecx, ecx
.text:00404C13                 jle     loc_4053F3
.text:00404C19                 mov     edi, [esp+11Ch+var_DC]
.text:00404C1D                 sub     ebx, 10h
.text:00404C20                 dec     [esp+11Ch+var_9C]
.text:00404C27                 mov     edx, [edi]
.text:00404C29                 mov     [ebx], edx
.text:00404C2B                 mov     esi, [edi+4]
.text:00404C2E                 mov     [ebx+4], esi
.text:00404C31                 mov     ecx, [edi+8]
.text:00404C34                 mov     [ebx+8], ecx
.text:00404C37                 mov     ebp, [edi+0Ch]
.text:00404C3A                 mov     [ebx+0Ch], ebp
.text:00404C3D                 jz      short loc_404C45
.text:00404C3F                 mov     edi, [esp+11Ch+var_DC]
.text:00404C43                 jmp     short loc_404BCF
.text:00404C45 ; ---------------------------------------------------------------------------
.text:00404C45
.text:00404C45 loc_404C45:                             ; CODE XREF: sub_4049B0+28D↑j
.text:00404C45                                         ; sub_4049B0+2C6↓j
.text:00404C45                 mov     ecx, [esp+11Ch+var_D8]
.text:00404C49                 sub     ebx, 10h
.text:00404C4C                 dec     [esp+11Ch+var_98]
.text:00404C53                 mov     edx, [ecx]
.text:00404C55                 mov     [ebx], edx
.text:00404C57                 mov     esi, [ecx+4]
.text:00404C5A                 mov     [ebx+4], esi
.text:00404C5D                 mov     edi, [ecx+8]
.text:00404C60                 mov     [ebx+8], edi
.text:00404C63                 mov     ebp, [ecx+0Ch]
.text:00404C66                 mov     [ebx+0Ch], ebp
.text:00404C69                 jz      short loc_404C78
.text:00404C6B                 mov     eax, [esp+11Ch+var_D8]
.text:00404C6F                 sub     eax, 10h
.text:00404C72                 mov     [esp+11Ch+var_D8], eax
.text:00404C76                 jmp     short loc_404C45
.text:00404C78 ; ---------------------------------------------------------------------------
.text:00404C78
.text:00404C78 loc_404C78:                             ; CODE XREF: sub_4049B0+2B9↑j
.text:00404C78                                         ; sub_4049B0+A67↓j ...
.text:00404C78                 mov     ebp, [esp+11Ch+var_6C]
.text:00404C7F                 mov     eax, [esp+11Ch+var_88]
.text:00404C86                 mov     edi, [esp+11Ch+var_80]
.text:00404C8D                 mov     ecx, [esp+11Ch+var_84]
.text:00404C94                 sub     ebp, 10h
.text:00404C97                 mov     ebx, [esp+11Ch+var_70]
.text:00404C9E                 mov     [esp+11Ch+var_B0], edi
.text:00404CA2                 sub     eax, 10h
.text:00404CA5                 mov     [esp+11Ch+var_B4], ecx
.text:00404CA9                 mov     [esp+11Ch+var_E0], ebp
.text:00404CAD                 mov     [esp+11Ch+var_F4], eax
.text:00404CB1                 jmp     short loc_404CC0
.text:00404CB1 ; ---------------------------------------------------------------------------
.text:00404CB3                 align 10h
.text:00404CC0
.text:00404CC0 loc_404CC0:                             ; CODE XREF: sub_4049B0+301↑j
.text:00404CC0                                         ; sub_4049B0+380↓j ...
.text:00404CC0                 mov     eax, ds:dword_4184D0
.text:00404CC5                 test    eax, eax
.text:00404CC7                 jnz     loc_4053C0
.text:00404CCD
.text:00404CCD loc_404CCD:                             ; CODE XREF: sub_4049B0+A3E↓j
.text:00404CCD                 mov     edi, [esp+11Ch+var_F4]
.text:00404CD1                 mov     eax, [esp+11Ch+var_E0]
.text:00404CD5                 mov     ebp, [edi+4]
.text:00404CD8                 mov     edx, [eax+4]
.text:00404CDB                 dec     ebp
.text:00404CDC                 dec     edx
.text:00404CDD                 mov     [esp+11Ch+var_B8], edx
.text:00404CE1                 jnz     loc_405320
.text:00404CE7                 xor     ecx, ecx
.text:00404CE9                 test    ebp, ebp
.text:00404CEB                 setz    cl
.text:00404CEE                 dec     ecx
.text:00404CEF
.text:00404CEF loc_404CEF:                             ; CODE XREF: sub_4049B0+977↓j
.text:00404CEF                                         ; sub_4049B0+9BE↓j ...
.text:00404CEF                 cmp     ds:byte_418490, 0
.text:00404CF6                 jz      short loc_404CFA
.text:00404CF8                 neg     ecx
.text:00404CFA
.text:00404CFA loc_404CFA:                             ; CODE XREF: sub_4049B0+346↑j
.text:00404CFA                                         ; sub_4049B0+A38↓j
.text:00404CFA                 test    ecx, ecx
.text:00404CFC                 jle     loc_4052E6
.text:00404D02                 mov     ecx, [esp+11Ch+var_F4]
.text:00404D06                 sub     ebx, 10h
.text:00404D09                 dec     [esp+11Ch+var_B4]
.text:00404D0D                 mov     edx, [ecx]
.text:00404D0F                 mov     [ebx], edx
.text:00404D11                 mov     esi, [ecx+4]
.text:00404D14                 mov     [ebx+4], esi
.text:00404D17                 mov     edi, [ecx+8]
.text:00404D1A                 mov     [ebx+8], edi
.text:00404D1D                 mov     ebp, [ecx+0Ch]
.text:00404D20                 mov     [ebx+0Ch], ebp
.text:00404D23                 jz      short loc_404D32
.text:00404D25                 mov     edx, [esp+11Ch+var_F4]
.text:00404D29                 sub     edx, 10h
.text:00404D2C                 mov     [esp+11Ch+var_F4], edx
.text:00404D30                 jmp     short loc_404CC0
.text:00404D32 ; ---------------------------------------------------------------------------
.text:00404D32
.text:00404D32 loc_404D32:                             ; CODE XREF: sub_4049B0+373↑j
.text:00404D32                                         ; sub_4049B0+3B0↓j
.text:00404D32                 mov     ecx, [esp+11Ch+var_E0]
.text:00404D36                 sub     ebx, 10h
.text:00404D39                 dec     [esp+11Ch+var_B0]
.text:00404D3D                 mov     edx, [ecx]
.text:00404D3F                 mov     [ebx], edx
.text:00404D41                 mov     esi, [ecx+4]
.text:00404D44                 mov     [ebx+4], esi
.text:00404D47                 mov     edi, [ecx+8]
.text:00404D4A                 mov     [ebx+8], edi
.text:00404D4D                 mov     ebp, [ecx+0Ch]
.text:00404D50                 mov     [ebx+0Ch], ebp
.text:00404D53                 jz      short loc_404D62
.text:00404D55                 mov     eax, [esp+11Ch+var_E0]
.text:00404D59                 sub     eax, 10h
.text:00404D5C                 mov     [esp+11Ch+var_E0], eax
.text:00404D60                 jmp     short loc_404D32
.text:00404D62 ; ---------------------------------------------------------------------------
.text:00404D62
.text:00404D62 loc_404D62:                             ; CODE XREF: sub_4049B0+3A3↑j
.text:00404D62                                         ; sub_4049B0+957↓j ...
.text:00404D62                 movzx   ebx, [esp+11Ch+var_24]
.text:00404D6A                 mov     [esp+11Ch+var_E1], bl
.text:00404D6E
.text:00404D6E loc_404D6E:                             ; CODE XREF: sub_4049B0+15B↑j
.text:00404D6E                                         ; sub_4049B0+D9F↓j
.text:00404D6E                 cmp     [esp+11Ch+var_E1], 0
.text:00404D73                 jz      loc_4051F7
.text:00404D79                 mov     ebp, [esp+11Ch+arg_4]
.text:00404D80                 test    ebp, ebp
.text:00404D82                 jnz     loc_4051F7
.text:00404D88                 mov     ecx, [esp+11Ch+var_54]
.text:00404D8F                 test    ecx, ecx
.text:00404D91                 jnz     loc_4051F7
.text:00404D97                 mov     edi, [esp+11Ch+var_2C]
.text:00404D9E                 test    edi, edi
.text:00404DA0                 jnz     loc_4051F7
.text:00404DA6                 mov     edx, [esp+11Ch+var_50]
.text:00404DAD                 mov     eax, ds:_iob
.text:00404DB2                 cmp     edx, eax
.text:00404DB4                 jz      loc_4051E0
.text:00404DBA                 add     eax, 20h ; ' '
.text:00404DBD                 cmp     edx, eax
.text:00404DBF                 jz      loc_4051C4
.text:00404DC5                 mov     [esp+11Ch+Stream], edx ; Stream
.text:00404DC8                 call    fclose
.text:00404DCD                 test    eax, eax
.text:00404DCF                 jnz     loc_4051AE
.text:00404DD5
.text:00404DD5 loc_404DD5:                             ; CODE XREF: sub_4049B0+81E↓j
.text:00404DD5                                         ; sub_4049B0+834↓j ...
.text:00404DD5                 mov     esi, [esp+11Ch+arg_8]
.text:00404DDC                 test    esi, esi
.text:00404DDE                 jz      loc_4051A1
.text:00404DE4                 cld
.text:00404DE5                 mov     esi, [esp+11Ch+arg_8]
.text:00404DEC                 mov     edi, offset asc_401530 ; "-"
.text:00404DF1                 mov     ecx, 2
.text:00404DF6                 repe cmpsb
.text:00404DF8                 jnz     short loc_404E07
.text:00404DFA                 cmp     ds:Format, 72h ; 'r'
.text:00404E01                 jz      loc_405190
.text:00404E07
.text:00404E07 loc_404E07:                             ; CODE XREF: sub_4049B0+448↑j
.text:00404E07                 mov     [esp+11Ch+ElementSize], offset Format ; Format
.text:00404E0F                 mov     edi, [esp+11Ch+arg_8]
.text:00404E16                 mov     [esp+11Ch+Stream], edi ; char *
.text:00404E19                 call    sub_40B5D0
.text:00404E1E                 test    eax, eax
.text:00404E20                 jz      loc_405154
.text:00404E26
.text:00404E26 loc_404E26:                             ; CODE XREF: sub_4049B0+7EC↓j
.text:00404E26                                         ; sub_4049B0+7F9↓j
.text:00404E26                 mov     [esp+11Ch+var_64], eax
.text:00404E2D                 mov     edx, [esp+11Ch+arg_8]
.text:00404E34                 mov     [esp+11Ch+var_55], 1
.text:00404E3C                 mov     [esp+11Ch+var_5C], edx
.text:00404E43                 lea     esi, [esi+0]
.text:00404E49                 lea     edi, [edi+0]
.text:00404E50
.text:00404E50 loc_404E50:                             ; CODE XREF: sub_4049B0+560↓j
.text:00404E50                                         ; sub_4049B0+91C↓j
.text:00404E50                 sub     [esp+11Ch+var_68], 10h
.text:00404E58                 mov     ecx, [esp+11Ch+var_64]
.text:00404E5F                 mov     eax, [esp+11Ch+var_68]
.text:00404E66                 mov     edi, [eax+4]
.text:00404E69                 mov     edx, [eax]
.text:00404E6B                 mov     [esp+11Ch+var_110], ecx ; Stream
.text:00404E6F                 mov     [esp+11Ch+ElementCount], edi ; ElementCount
.text:00404E73                 mov     [esp+11Ch+ElementSize], 1 ; ElementSize
.text:00404E7B                 mov     [esp+11Ch+Stream], edx ; Buffer
.text:00404E7E                 call    fwrite
.text:00404E83                 cmp     eax, edi
.text:00404E85                 jnz     loc_405148
.text:00404E8B                 cmp     ds:byte_4184B0, 0
.text:00404E92                 jz      short loc_404F02
.text:00404E94                 lea     esi, [esi+0]
.text:00404E9A                 lea     edi, [edi+0]
.text:00404EA0
.text:00404EA0 loc_404EA0:                             ; CODE XREF: sub_4049B0+550↓j
.text:00404EA0                 mov     eax, [esp+11Ch+var_68]
.text:00404EA7                 cmp     [esp+11Ch+var_6C], eax
.text:00404EAE                 jnb     short loc_404F16
.text:00404EB0                 mov     ebx, ds:dword_4184D0
.text:00404EB6                 sub     eax, 10h
.text:00404EB9                 mov     [esp+11Ch+var_F0], eax
.text:00404EBD                 test    ebx, ebx
.text:00404EBF                 jnz     loc_405116
.text:00404EC5
.text:00404EC5 loc_404EC5:                             ; CODE XREF: sub_4049B0+793↓j
.text:00404EC5                 mov     eax, [esp+11Ch+var_F0]
.text:00404EC9                 mov     edx, [esp+11Ch+var_68]
.text:00404ED0                 mov     ebx, [eax+4]
.text:00404ED3                 mov     ebp, [edx+4]
.text:00404ED6                 dec     ebx
.text:00404ED7                 dec     ebp
.text:00404ED8                 jnz     loc_405080
.text:00404EDE                 xor     ecx, ecx
.text:00404EE0                 test    ebx, ebx
.text:00404EE2                 setz    cl
.text:00404EE5                 dec     ecx
.text:00404EE6
.text:00404EE6 loc_404EE6:                             ; CODE XREF: sub_4049B0+6D7↓j
.text:00404EE6                                         ; sub_4049B0+71D↓j ...
.text:00404EE6                 cmp     ds:byte_418490, 0
.text:00404EED                 jz      short loc_404EF1
.text:00404EEF                 neg     ecx
.text:00404EF1
.text:00404EF1 loc_404EF1:                             ; CODE XREF: sub_4049B0+53D↑j
.text:00404EF1                                         ; sub_4049B0+78D↓j
.text:00404EF1                 test    ecx, ecx
.text:00404EF3                 jnz     short loc_404F02
.text:00404EF5                 mov     esi, [esp+11Ch+var_F0]
.text:00404EF9                 mov     [esp+11Ch+var_68], esi
.text:00404F00                 jmp     short loc_404EA0
.text:00404F02 ; ---------------------------------------------------------------------------
.text:00404F02
.text:00404F02 loc_404F02:                             ; CODE XREF: sub_4049B0+4E2↑j
.text:00404F02                                         ; sub_4049B0+543↑j
.text:00404F02                 mov     ebp, [esp+11Ch+var_68]
.text:00404F09                 cmp     [esp+11Ch+var_6C], ebp
.text:00404F10                 jb      loc_404E50
.text:00404F16
.text:00404F16 loc_404F16:                             ; CODE XREF: sub_4049B0+4FE↑j
.text:00404F16                 mov     eax, ds:_iob
.text:00404F1B                 cmp     [esp+11Ch+var_64], eax
.text:00404F22                 jz      loc_405060
.text:00404F28                 add     eax, 20h ; ' '
.text:00404F2B                 cmp     [esp+11Ch+var_64], eax
.text:00404F32                 jz      loc_405040
.text:00404F38                 mov     ecx, [esp+11Ch+var_64]
.text:00404F3F                 mov     [esp+11Ch+Stream], ecx ; Stream
.text:00404F42                 call    fclose
.text:00404F47                 test    eax, eax
.text:00404F49                 jnz     loc_404FDF
.text:00404F4F
.text:00404F4F loc_404F4F:                             ; CODE XREF: sub_4049B0+6A1↓j
.text:00404F4F                                         ; sub_4049B0+6BB↓j ...
.text:00404F4F                 cmp     [esp+11Ch+var_55], 0
.text:00404F57                 jz      loc_404A6A
.text:00404F5D
.text:00404F5D loc_404F5D:                             ; CODE XREF: sub_4049B0+2D↑j
.text:00404F5D                                         ; sub_4049B0+E92↓j
.text:00404F5D                 mov     ebp, [esp+11Ch+Block]
.text:00404F64                 mov     [esp+11Ch+Stream], ebp ; Block
.text:00404F67                 call    free
.text:00404F6C                 cmp     [esp+11Ch+var_55], 0
.text:00404F74                 jz      short loc_404F81
.text:00404F76
.text:00404F76 loc_404F76:                             ; CODE XREF: sub_4049B0+62D↓j
.text:00404F76                 add     esp, 10Ch
.text:00404F7C                 pop     ebx
.text:00404F7D                 pop     esi
.text:00404F7E                 pop     edi
.text:00404F7F                 pop     ebp
.text:00404F80                 retn
.text:00404F81 ; ---------------------------------------------------------------------------
.text:00404F81
.text:00404F81 loc_404F81:                             ; CODE XREF: sub_4049B0+5C4↑j
.text:00404F81                 mov     [esp+11Ch+ElementSize], 4
.text:00404F89                 mov     ebx, ds:Block
.text:00404F8F                 mov     ecx, [esp+11Ch+var_54]
.text:00404F96                 mov     [esp+11Ch+Stream], ecx
.text:00404F99                 call    sub_40A140
.text:00404F9E                 xor     edx, edx
.text:00404FA0                 mov     esi, eax
.text:00404FA2                 test    ebx, ebx
.text:00404FA4                 jz      short loc_404FB3
.text:00404FA6
.text:00404FA6 loc_404FA6:                             ; CODE XREF: sub_4049B0+601↓j
.text:00404FA6                 lea     edi, [ebx+4]
.text:00404FA9                 mov     ebx, [ebx]
.text:00404FAB                 mov     [esi+edx*4], edi
.text:00404FAE                 inc     edx
.text:00404FAF                 test    ebx, ebx
.text:00404FB1                 jnz     short loc_404FA6
.text:00404FB3
.text:00404FB3 loc_404FB3:                             ; CODE XREF: sub_4049B0+5F4↑j
.text:00404FB3                 mov     [esp+11Ch+Stream], esi ; int
.text:00404FB6                 mov     edx, [esp+11Ch+var_54]
.text:00404FBD                 mov     eax, [esp+11Ch+arg_8]
.text:00404FC4                 mov     [esp+11Ch+ElementCount], edx ; int
.text:00404FC8                 mov     [esp+11Ch+var_110], eax ; char *
.text:00404FCC                 mov     [esp+11Ch+ElementSize], edx ; int
.text:00404FD0                 call    sub_404600
.text:00404FD5                 mov     [esp+11Ch+Stream], esi ; Block
.text:00404FD8                 call    free
.text:00404FDD                 jmp     short loc_404F76
.text:00404FDF ; ---------------------------------------------------------------------------
.text:00404FDF
.text:00404FDF loc_404FDF:                             ; CODE XREF: sub_4049B0+599↑j
.text:00404FDF                 mov     [esp+11Ch+Stream], offset aCloseFailed ; "close failed"
.text:00404FE6
.text:00404FE6 loc_404FE6:                             ; CODE XREF: sub_4049B0+6AE↓j
.text:00404FE6                                         ; sub_4049B0+79F↓j
.text:00404FE6                 call    ds:libintl_gettext
.text:00404FEC                 mov     ebx, [esp+11Ch+var_5C]
.text:00404FF3
.text:00404FF3 loc_404FF3:                             ; CODE XREF: sub_4049B0+931↓j
.text:00404FF3                 mov     esi, eax
.text:00404FF5                 test    ebx, ebx
.text:00404FF7                 jz      short loc_40502C
.text:00404FF9
.text:00404FF9 loc_404FF9:                             ; CODE XREF: sub_4049B0+68B↓j
.text:00404FF9                 call    _errno
.text:00404FFE                 mov     [esp+11Ch+var_10C], ebx
.text:00405002                 mov     [esp+11Ch+var_110], esi ; char
.text:00405006
.text:00405006 loc_405006:                             ; CODE XREF: sub_4049B0+7C6↓j
.text:00405006                 mov     [esp+11Ch+ElementCount], offset aSS ; "%s: %s"
.text:0040500E                 mov     esi, [eax]
.text:00405010                 mov     [esp+11Ch+Stream], 0 ; Code
.text:00405017                 mov     [esp+11Ch+ElementSize], esi ; ErrorMessage
.text:0040501B                 call    sub_40CB60
.text:00405020                 mov     [esp+11Ch+Stream], 2 ; Code
.text:00405027                 call    exit
.text:0040502C ; ---------------------------------------------------------------------------
.text:0040502C
.text:0040502C loc_40502C:                             ; CODE XREF: sub_4049B0+647↑j
.text:0040502C                 mov     [esp+11Ch+Stream], offset aStandardOutput ; "standard output"
.text:00405033                 call    ds:libintl_gettext
.text:00405039                 mov     ebx, eax
.text:0040503B                 jmp     short loc_404FF9
.text:0040503B ; ---------------------------------------------------------------------------
.text:0040503D                 align 10h
.text:00405040
.text:00405040 loc_405040:                             ; CODE XREF: sub_4049B0+582↑j
.text:00405040                 mov     ebx, [esp+11Ch+var_64]
.text:00405047                 mov     [esp+11Ch+Stream], ebx ; Stream
.text:0040504A                 call    fflush
.text:0040504F                 test    eax, eax
.text:00405051                 jz      loc_404F4F
.text:00405057                 mov     [esp+11Ch+Stream], offset aFflushFailed ; "fflush failed"
.text:0040505E                 jmp     short loc_404FE6
.text:00405060 ; ---------------------------------------------------------------------------
.text:00405060
.text:00405060 loc_405060:                             ; CODE XREF: sub_4049B0+572↑j
.text:00405060                 mov     edx, [esp+11Ch+var_64]
.text:00405067                 test    byte ptr [edx+0Ch], 10h
.text:0040506B                 jz      loc_404F4F
.text:00405071                 mov     [esp+11Ch+Stream], edx ; Stream
.text:00405074                 call    clearerr
.text:00405079                 jmp     loc_404F4F
.text:00405079 ; ---------------------------------------------------------------------------
.text:0040507E                 align 10h
.text:00405080
.text:00405080 loc_405080:                             ; CODE XREF: sub_4049B0+528↑j
.text:00405080                 test    ebx, ebx
.text:00405082                 mov     ecx, 1
.text:00405087                 jz      loc_404EE6
.text:0040508D                 cmp     ds:byte_418040, 0
.text:00405094                 jnz     short loc_4050EC
.text:00405096                 mov     esi, [esp+11Ch+var_68]
.text:0040509D                 cmp     ebx, ebp
.text:0040509F                 mov     edi, [esp+11Ch+var_F0]
.text:004050A3                 mov     eax, [esi]
.text:004050A5                 mov     edx, [edi]
.text:004050A7                 mov     [esp+11Ch+var_CC], eax
.text:004050AB                 mov     eax, ebx
.text:004050AD                 jbe     short loc_4050B1
.text:004050AF                 mov     eax, ebp
.text:004050B1
.text:004050B1 loc_4050B1:                             ; CODE XREF: sub_4049B0+6FD↑j
.text:004050B1                 cld
.text:004050B2                 mov     esi, [esp+11Ch+var_CC]
.text:004050B6                 mov     ecx, eax
.text:004050B8                 cmp     eax, eax
.text:004050BA                 mov     edi, edx
.text:004050BC                 repe cmpsb
.text:004050BE                 setnbe  dl
.text:004050C1                 setb    al
.text:004050C4                 mov     cl, dl
.text:004050C6                 sub     cl, al
.text:004050C8                 movsx   ecx, cl
.text:004050CB                 test    ecx, ecx
.text:004050CD                 jnz     loc_404EE6
.text:004050D3                 cmp     ebp, ebx
.text:004050D5                 mov     ecx, 0FFFFFFFFh
.text:004050DA                 jb      loc_404EE6
.text:004050E0                 xor     ecx, ecx
.text:004050E2                 cmp     ebp, ebx
.text:004050E4                 setnz   cl
.text:004050E7                 jmp     loc_404EE6
.text:004050EC ; ---------------------------------------------------------------------------
.text:004050EC
.text:004050EC loc_4050EC:                             ; CODE XREF: sub_4049B0+6E4↑j
.text:004050EC                 mov     [esp+11Ch+var_110], ebx ; char
.text:004050F0                 mov     edx, [esp+11Ch+var_F0]
.text:004050F4                 mov     ebx, [esp+11Ch+var_68]
.text:004050FB                 mov     ecx, [edx]
.text:004050FD                 mov     [esp+11Ch+ElementSize], ebp ; int
.text:00405101                 mov     [esp+11Ch+ElementCount], ecx ; char *
.text:00405105                 mov     esi, [ebx]
.text:00405107                 mov     [esp+11Ch+Stream], esi ; char *
.text:0040510A                 call    sub_40A510
.text:0040510F                 mov     ecx, eax
.text:00405111                 jmp     loc_404EE6
.text:00405116 ; ---------------------------------------------------------------------------
.text:00405116
.text:00405116 loc_405116:                             ; CODE XREF: sub_4049B0+50F↑j
.text:00405116                 mov     [esp+11Ch+ElementSize], eax
.text:0040511A                 mov     ecx, [esp+11Ch+var_68]
.text:00405121                 mov     [esp+11Ch+Stream], ecx
.text:00405124                 call    sub_406350
.text:00405129                 movzx   edi, ds:byte_4184B0
.text:00405130                 mov     ecx, eax
.text:00405132                 movzx   ebp, ds:byte_4184A0
.text:00405139                 or      edi, eax
.text:0040513B                 or      edi, ebp
.text:0040513D                 jnz     loc_404EF1
.text:00405143                 jmp     loc_404EC5
.text:00405148 ; ---------------------------------------------------------------------------
.text:00405148
.text:00405148 loc_405148:                             ; CODE XREF: sub_4049B0+4D5↑j
.text:00405148                 mov     [esp+11Ch+Stream], offset aWriteFailed ; "write failed"
.text:0040514F                 jmp     loc_404FE6
.text:00405154 ; ---------------------------------------------------------------------------
.text:00405154
.text:00405154 loc_405154:                             ; CODE XREF: sub_4049B0+87↑j
.text:00405154                                         ; sub_4049B0+470↑j
.text:00405154                 mov     [esp+11Ch+Stream], offset aOpenFailed ; "open failed"
.text:0040515B                 mov     esi, edi
.text:0040515D                 call    ds:libintl_gettext
.text:00405163
.text:00405163 loc_405163:                             ; CODE XREF: sub_4049B0+812↓j
.text:00405163                 mov     ebx, eax
.text:00405165                 test    esi, esi
.text:00405167                 jz      short loc_40517B
.text:00405169
.text:00405169 loc_405169:                             ; CODE XREF: sub_4049B0+7DA↓j
.text:00405169                 call    _errno
.text:0040516E                 mov     [esp+11Ch+var_10C], esi
.text:00405172                 mov     [esp+11Ch+var_110], ebx
.text:00405176                 jmp     loc_405006
.text:0040517B ; ---------------------------------------------------------------------------
.text:0040517B
.text:0040517B loc_40517B:                             ; CODE XREF: sub_4049B0+7B7↑j
.text:0040517B                 mov     [esp+11Ch+Stream], offset aStandardOutput ; "standard output"
.text:00405182                 call    ds:libintl_gettext
.text:00405188                 mov     esi, eax
.text:0040518A                 jmp     short loc_405169
.text:0040518A ; ---------------------------------------------------------------------------
.text:0040518C                 align 10h
.text:00405190
.text:00405190 loc_405190:                             ; CODE XREF: sub_4049B0+451↑j
.text:00405190                 mov     ds:byte_4184C0, 1
.text:00405197                 mov     eax, ds:_iob
.text:0040519C                 jmp     loc_404E26
.text:004051A1 ; ---------------------------------------------------------------------------
.text:004051A1
.text:004051A1 loc_4051A1:                             ; CODE XREF: sub_4049B0+42E↑j
.text:004051A1                 mov     eax, ds:_iob
.text:004051A6                 add     eax, 20h ; ' '
.text:004051A9                 jmp     loc_404E26
.text:004051AE ; ---------------------------------------------------------------------------
.text:004051AE
.text:004051AE loc_4051AE:                             ; CODE XREF: sub_4049B0+41F↑j
.text:004051AE                                         ; sub_4049B0+E7D↓j
.text:004051AE                 mov     [esp+11Ch+Stream], offset aCloseFailed ; "close failed"
.text:004051B5
.text:004051B5 loc_4051B5:                             ; CODE XREF: sub_4049B0+82B↓j
.text:004051B5                 call    ds:libintl_gettext
.text:004051BB                 mov     esi, [esp+11Ch+var_60]
.text:004051C2                 jmp     short loc_405163
.text:004051C4 ; ---------------------------------------------------------------------------
.text:004051C4
.text:004051C4 loc_4051C4:                             ; CODE XREF: sub_4049B0+40F↑j
.text:004051C4                 mov     [esp+11Ch+Stream], edx ; Stream
.text:004051C7                 call    fflush
.text:004051CC                 test    eax, eax
.text:004051CE                 jz      loc_404DD5
.text:004051D4
.text:004051D4 loc_4051D4:                             ; CODE XREF: sub_4049B0+EA3↓j
.text:004051D4                 mov     [esp+11Ch+Stream], offset aFflushFailed ; "fflush failed"
.text:004051DB                 jmp     short loc_4051B5
.text:004051DB ; ---------------------------------------------------------------------------
.text:004051DD                 align 10h
.text:004051E0
.text:004051E0 loc_4051E0:                             ; CODE XREF: sub_4049B0+404↑j
.text:004051E0                 test    byte ptr [edx+0Ch], 10h
.text:004051E4                 jz      loc_404DD5
.text:004051EA                 mov     [esp+11Ch+Stream], edx ; Stream
.text:004051ED                 call    clearerr
.text:004051F2                 jmp     loc_404DD5
.text:004051F7 ; ---------------------------------------------------------------------------
.text:004051F7
.text:004051F7 loc_4051F7:                             ; CODE XREF: sub_4049B0+3C3↑j
.text:004051F7                                         ; sub_4049B0+3D2↑j ...
.text:004051F7                 inc     [esp+11Ch+var_54]
.text:004051FE                 mov     edx, ds:dword_418460
.text:00405204                 mov     esi, ds:dword_418010
.text:0040520A                 mov     edi, [edx+esi*4]
.text:0040520D                 mov     [esp+11Ch+Src], edi
.text:00405211                 mov     [esp+11Ch+Stream], edi ; Str
.text:00405214                 call    strlen
.text:00405219                 lea     ebp, [eax+10h]
.text:0040521C                 mov     esi, eax
.text:0040521E                 mov     [esp+11Ch+Stream], ebp ; size_t
.text:00405221                 call    sub_40A180
.text:00405226                 mov     [esp+11Ch+ElementCount], esi ; Size
.text:0040522A                 lea     edi, [eax+4]
.text:0040522D                 mov     ebp, eax
.text:0040522F                 mov     [esp+11Ch+Stream], edi ; void *
.text:00405232                 mov     eax, [esp+11Ch+Src]
.text:00405236                 mov     [esp+11Ch+ElementSize], eax ; Src
.text:0040523A                 call    memcpy
.text:0040523F                 mov     ecx, ds:dword_4014F0
.text:00405245                 mov     ebx, ds:dword_4014F4
.text:0040524B                 mov     edx, ds:dword_4014F8
.text:00405251                 mov     [esi+edi], ecx
.text:00405254                 xor     ecx, ecx
.text:00405256                 mov     [esi+edi+4], ebx
.text:0040525A                 mov     [esi+edi+8], edx
.text:0040525E                 mov     ebx, ds:dword_418010
.text:00405264                 mov     dword ptr [ebp+0], 0
.text:0040526B                 mov     [esp+11Ch+Stream], edi ; char *
.text:0040526E                 inc     ebx
.text:0040526F                 cmp     ebx, ds:dword_418470
.text:00405275                 setz    cl
.text:00405278                 dec     ecx
.text:00405279                 and     ebx, ecx
.text:0040527B                 mov     ds:dword_418010, ebx
.text:00405281                 call    sub_410330
.text:00405286                 test    eax, eax
.text:00405288                 mov     esi, eax
.text:0040528A                 js      short loc_40529A
.text:0040528C                 mov     ebx, off_417098
.text:00405292                 mov     off_417098, ebp
.text:00405298                 mov     [ebx], ebp
.text:0040529A
.text:0040529A loc_40529A:                             ; CODE XREF: sub_4049B0+8DA↑j
.text:0040529A                 call    _errno
.text:0040529F                 mov     ebp, [eax]
.text:004052A1                 call    _errno
.text:004052A6                 test    esi, esi
.text:004052A8                 mov     [eax], ebp
.text:004052AA                 js      short loc_4052D2
.text:004052AC                 mov     [esp+11Ch+ElementSize], offset Format ; Format
.text:004052B4                 mov     [esp+11Ch+Stream], esi ; FileHandle
.text:004052B7                 call    _fdopen
.text:004052BC                 mov     [esp+11Ch+var_64], eax
.text:004052C3                 test    eax, eax
.text:004052C5                 mov     [esp+11Ch+var_5C], edi
.text:004052CC                 jnz     loc_404E50
.text:004052D2
.text:004052D2 loc_4052D2:                             ; CODE XREF: sub_4049B0+8FA↑j
.text:004052D2                 mov     [esp+11Ch+Stream], offset aCannotCreateTe ; "cannot create temporary file"
.text:004052D9                 mov     ebx, edi
.text:004052DB                 call    ds:libintl_gettext
.text:004052E1                 jmp     loc_404FF3
.text:004052E6 ; ---------------------------------------------------------------------------
.text:004052E6
.text:004052E6 loc_4052E6:                             ; CODE XREF: sub_4049B0+34C↑j
.text:004052E6                 mov     ecx, [esp+11Ch+var_E0]
.text:004052EA                 sub     ebx, 10h
.text:004052ED                 dec     [esp+11Ch+var_B0]
.text:004052F1                 mov     edx, [ecx]
.text:004052F3                 mov     [ebx], edx
.text:004052F5                 mov     esi, [ecx+4]
.text:004052F8                 mov     [ebx+4], esi
.text:004052FB                 mov     edi, [ecx+8]
.text:004052FE                 mov     [ebx+8], edi
.text:00405301                 mov     ebp, [ecx+0Ch]
.text:00405304                 mov     [ebx+0Ch], ebp
.text:00405307                 jz      loc_404D62
.text:0040530D                 mov     esi, [esp+11Ch+var_E0]
.text:00405311                 sub     esi, 10h
.text:00405314                 mov     [esp+11Ch+var_E0], esi
.text:00405318                 jmp     loc_404CC0
.text:00405318 ; ---------------------------------------------------------------------------
.text:0040531D                 align 10h
.text:00405320
.text:00405320 loc_405320:                             ; CODE XREF: sub_4049B0+331↑j
.text:00405320                 test    ebp, ebp
.text:00405322                 mov     ecx, 1
.text:00405327                 jz      loc_404CEF
.text:0040532D                 cmp     ds:byte_418040, 0
.text:00405334                 jnz     short loc_405391
.text:00405336                 cmp     ebp, [esp+11Ch+var_B8]
.text:0040533A                 mov     eax, ebp
.text:0040533C                 mov     edx, [esp+11Ch+var_E0]
.text:00405340                 mov     edi, [esp+11Ch+var_F4]
.text:00405344                 mov     esi, [edx]
.text:00405346                 mov     edx, [edi]
.text:00405348                 mov     [esp+11Ch+var_BC], esi
.text:0040534C                 jbe     short loc_405352
.text:0040534E                 mov     eax, [esp+11Ch+var_B8]
.text:00405352
.text:00405352 loc_405352:                             ; CODE XREF: sub_4049B0+99C↑j
.text:00405352                 cld
.text:00405353                 mov     esi, [esp+11Ch+var_BC]
.text:00405357                 mov     ecx, eax
.text:00405359                 cmp     eax, eax
.text:0040535B                 mov     edi, edx
.text:0040535D                 repe cmpsb
.text:0040535F                 setnbe  dl
.text:00405362                 setb    al
.text:00405365                 mov     cl, dl
.text:00405367                 sub     cl, al
.text:00405369                 movsx   ecx, cl
.text:0040536C                 test    ecx, ecx
.text:0040536E                 jnz     loc_404CEF
.text:00405374                 cmp     [esp+11Ch+var_B8], ebp
.text:00405378                 mov     ecx, 0FFFFFFFFh
.text:0040537D                 jb      loc_404CEF
.text:00405383                 xor     ecx, ecx
.text:00405385                 cmp     [esp+11Ch+var_B8], ebp
.text:00405389                 setnz   cl
.text:0040538C                 jmp     loc_404CEF
.text:00405391 ; ---------------------------------------------------------------------------
.text:00405391
.text:00405391 loc_405391:                             ; CODE XREF: sub_4049B0+984↑j
.text:00405391                 mov     [esp+11Ch+var_110], ebp ; char
.text:00405395                 mov     eax, [esp+11Ch+var_F4]
.text:00405399                 mov     esi, [esp+11Ch+var_B8]
.text:0040539D                 mov     ecx, [esp+11Ch+var_E0]
.text:004053A1                 mov     edx, [eax]
.text:004053A3                 mov     [esp+11Ch+ElementSize], esi ; int
.text:004053A7                 mov     [esp+11Ch+ElementCount], edx ; char *
.text:004053AB                 mov     ebp, [ecx]
.text:004053AD                 mov     [esp+11Ch+Stream], ebp ; char *
.text:004053B0                 call    sub_40A510
.text:004053B5                 mov     ecx, eax
.text:004053B7                 jmp     loc_404CEF
.text:004053B7 ; ---------------------------------------------------------------------------
.text:004053BC                 align 10h
.text:004053C0
.text:004053C0 loc_4053C0:                             ; CODE XREF: sub_4049B0+317↑j
.text:004053C0                 mov     ecx, [esp+11Ch+var_E0]
.text:004053C4                 mov     esi, [esp+11Ch+var_F4]
.text:004053C8                 mov     [esp+11Ch+Stream], ecx
.text:004053CB                 mov     [esp+11Ch+ElementSize], esi
.text:004053CF                 call    sub_406350
.text:004053D4                 movzx   edi, ds:byte_4184B0
.text:004053DB                 mov     ecx, eax
.text:004053DD                 movzx   ebp, ds:byte_4184A0
.text:004053E4                 or      edi, eax
.text:004053E6                 or      edi, ebp
.text:004053E8                 jnz     loc_404CFA
.text:004053EE                 jmp     loc_404CCD
.text:004053F3 ; ---------------------------------------------------------------------------
.text:004053F3
.text:004053F3 loc_4053F3:                             ; CODE XREF: sub_4049B0+263↑j
.text:004053F3                 mov     ecx, [esp+11Ch+var_D8]
.text:004053F7
.text:004053F7 loc_4053F7:                             ; CODE XREF: .text:004013E0↑j
.text:004053F7                 sub     ebx, 10h
.text:004053FA                 dec     [esp+11Ch+var_98]
.text:00405401                 mov     edx, [ecx]
.text:00405403                 mov     [ebx], edx
.text:00405405                 mov     esi, [ecx+4]
.text:00405408                 mov     [ebx+4], esi
.text:0040540B                 mov     edi, [ecx+8]
.text:0040540E                 mov     [ebx+8], edi
.text:00405411                 mov     ebp, [ecx+0Ch]
.text:00405414                 mov     [ebx+0Ch], ebp
.text:00405417                 jz      loc_404C78
.text:0040541D                 mov     edi, [esp+11Ch+var_D8]
.text:00405421                 sub     edi, 10h
.text:00405424                 mov     [esp+11Ch+var_D8], edi
.text:00405428                 jmp     loc_404BD6
.text:0040542D ; ---------------------------------------------------------------------------
.text:0040542D
.text:0040542D loc_40542D:                             ; CODE XREF: sub_4049B0+248↑j
.text:0040542D                 test    ebp, ebp
.text:0040542F                 mov     ecx, 1
.text:00405434                 jz      loc_404C06
.text:0040543A                 cmp     ds:byte_418040, 0
.text:00405441                 jnz     short loc_40549E
.text:00405443                 cmp     ebp, [esp+11Ch+var_A0]
.text:00405447                 mov     edx, [esp+11Ch+var_D8]
.text:0040544B                 mov     esi, [esp+11Ch+var_DC]
.text:0040544F                 mov     eax, [edx]
.text:00405451                 mov     edx, [esi]
.text:00405453                 mov     [esp+11Ch+var_A4], eax
.text:00405457                 mov     eax, ebp
.text:00405459                 jbe     short loc_40545F
.text:0040545B                 mov     eax, [esp+11Ch+var_A0]
.text:0040545F
.text:0040545F loc_40545F:                             ; CODE XREF: sub_4049B0+AA9↑j
.text:0040545F                 cld
.text:00405460                 mov     esi, [esp+11Ch+var_A4]
.text:00405464                 mov     ecx, eax
.text:00405466                 cmp     eax, eax
.text:00405468                 mov     edi, edx
.text:0040546A                 repe cmpsb
.text:0040546C                 setnbe  dl
.text:0040546F                 setb    al
.text:00405472                 mov     cl, dl
.text:00405474                 sub     cl, al
.text:00405476                 movsx   ecx, cl
.text:00405479                 test    ecx, ecx
.text:0040547B                 jnz     loc_404C06
.text:00405481                 cmp     [esp+11Ch+var_A0], ebp
.text:00405485                 mov     ecx, 0FFFFFFFFh
.text:0040548A                 jb      loc_404C06
.text:00405490                 xor     ecx, ecx
.text:00405492                 cmp     [esp+11Ch+var_A0], ebp
.text:00405496                 setnz   cl
.text:00405499                 jmp     loc_404C06
.text:0040549E ; ---------------------------------------------------------------------------
.text:0040549E
.text:0040549E loc_40549E:                             ; CODE XREF: sub_4049B0+A91↑j
.text:0040549E                 mov     [esp+11Ch+var_110], ebp ; char
.text:004054A2                 mov     edi, [esp+11Ch+var_DC]
.text:004054A6                 mov     edx, [esp+11Ch+var_A0]
.text:004054AA                 mov     eax, [esp+11Ch+var_D8]
.text:004054AE                 mov     ecx, [edi]
.text:004054B0                 mov     [esp+11Ch+ElementSize], edx ; int
.text:004054B4                 mov     [esp+11Ch+ElementCount], ecx ; char *
.text:004054B8                 mov     ebp, [eax]
.text:004054BA                 mov     [esp+11Ch+Stream], ebp ; char *
.text:004054BD                 call    sub_40A510
.text:004054C2                 mov     ecx, eax
.text:004054C4                 jmp     loc_404C06
.text:004054C9 ; ---------------------------------------------------------------------------
.text:004054C9
.text:004054C9 loc_4054C9:                             ; CODE XREF: sub_4049B0+22E↑j
.text:004054C9                 mov     ecx, [esp+11Ch+var_DC]
.text:004054CD                 mov     eax, [esp+11Ch+var_D8]
.text:004054D1                 mov     [esp+11Ch+ElementSize], ecx
.text:004054D5                 mov     [esp+11Ch+Stream], eax
.text:004054D8                 call    sub_406350
.text:004054DD                 movzx   edx, ds:byte_4184B0
.text:004054E4                 mov     ecx, eax
.text:004054E6                 movzx   esi, ds:byte_4184A0
.text:004054ED                 or      edx, eax
.text:004054EF                 or      edx, esi
.text:004054F1                 jnz     loc_404C11
.text:004054F7                 jmp     loc_404BE4
.text:004054FC ; ---------------------------------------------------------------------------
.text:004054FC
.text:004054FC loc_4054FC:                             ; CODE XREF: sub_4049B0+1F6↑j
.text:004054FC                 mov     [esp+11Ch+ElementSize], esi
.text:00405500                 mov     ecx, [esp+11Ch+var_6C]
.text:00405507                 mov     eax, [esp+11Ch+var_68]
.text:0040550E                 mov     [esp+11Ch+ElementCount], ecx
.text:00405512                 mov     [esp+11Ch+Stream], eax
.text:00405515                 call    sub_407970
.text:0040551A                 jmp     loc_404BAC
.text:0040551F ; ---------------------------------------------------------------------------
.text:0040551F
.text:0040551F loc_40551F:                             ; CODE XREF: sub_4049B0+1B8↑j
.text:0040551F                 mov     esi, [esp+11Ch+var_68]
.text:00405526                 mov     edi, [esp+11Ch+var_68]
.text:0040552D                 mov     ecx, ds:dword_4184D0
.text:00405533                 sub     esi, 10h
.text:00405536                 sub     edi, 20h ; ' '
.text:00405539                 test    ecx, ecx
.text:0040553B                 jnz     loc_40563C
.text:00405541
.text:00405541 loc_405541:                             ; CODE XREF: sub_4049B0+CB2↓j
.text:00405541                 mov     ebx, [edi+4]
.text:00405544                 mov     ebp, [esi+4]
.text:00405547                 dec     ebx
.text:00405548                 dec     ebp
.text:00405549                 jnz     short loc_4055BA
.text:0040554B                 xor     ecx, ecx
.text:0040554D                 test    ebx, ebx
.text:0040554F                 setz    cl
.text:00405552                 dec     ecx
.text:00405553
.text:00405553 loc_405553:                             ; CODE XREF: sub_4049B0+C11↓j
.text:00405553                                         ; sub_4049B0+C4E↓j ...
.text:00405553                 cmp     ds:byte_418490, 0
.text:0040555A                 jz      short loc_40555E
.text:0040555C                 neg     ecx
.text:0040555E
.text:0040555E loc_40555E:                             ; CODE XREF: sub_4049B0+BAA↑j
.text:0040555E                                         ; sub_4049B0+CAC↓j
.text:0040555E                 xor     edx, edx
.text:00405560                 mov     esi, [esp+11Ch+var_70]
.text:00405567                 test    ecx, ecx
.text:00405569                 setnle  dl
.text:0040556C                 mov     edi, [esp+11Ch+var_6C]
.text:00405573                 mov     ebp, edx
.text:00405575                 not     ebp
.text:00405577                 shl     edx, 4
.text:0040557A                 shl     ebp, 4
.text:0040557D                 mov     ecx, [esi+ebp]
.text:00405580                 add     edx, esi
.text:00405582                 mov     [edi-10h], ecx
.text:00405585                 mov     ebx, [esi+ebp+4]
.text:00405589                 mov     [edi-0Ch], ebx
.text:0040558C                 mov     ecx, [esi+ebp+8]
.text:00405590                 mov     [edi-8], ecx
.text:00405593                 mov     ebx, [esi+ebp+0Ch]
.text:00405597                 mov     [edi-4], ebx
.text:0040559A                 mov     ecx, [edx-20h]
.text:0040559D                 lea     ebx, [edx-20h]
.text:004055A0                 mov     [edi-20h], ecx
.text:004055A3                 mov     edx, [ebx+4]
.text:004055A6                 mov     [edi-1Ch], edx
.text:004055A9                 mov     ebp, [ebx+8]
.text:004055AC                 mov     [edi-18h], ebp
.text:004055AF                 mov     esi, [ebx+0Ch]
.text:004055B2                 mov     [edi-14h], esi
.text:004055B5                 jmp     loc_404C78
.text:004055BA ; ---------------------------------------------------------------------------
.text:004055BA
.text:004055BA loc_4055BA:                             ; CODE XREF: sub_4049B0+B99↑j
.text:004055BA                 test    ebx, ebx
.text:004055BC                 mov     ecx, 1
.text:004055C1                 jz      short loc_405553
.text:004055C3                 cmp     ds:byte_418040, 0
.text:004055CA                 jnz     short loc_40561D
.text:004055CC                 mov     eax, [esi]
.text:004055CE                 cmp     ebx, ebp
.text:004055D0                 mov     edx, [edi]
.text:004055D2                 mov     [esp+11Ch+var_8C], eax
.text:004055D9                 mov     eax, ebx
.text:004055DB                 jbe     short loc_4055DF
.text:004055DD                 mov     eax, ebp
.text:004055DF
.text:004055DF loc_4055DF:                             ; CODE XREF: sub_4049B0+C2B↑j
.text:004055DF                 cld
.text:004055E0                 mov     esi, [esp+11Ch+var_8C]
.text:004055E7                 mov     ecx, eax
.text:004055E9                 cmp     eax, eax
.text:004055EB                 mov     edi, edx
.text:004055ED                 repe cmpsb
.text:004055EF                 setnbe  dl
.text:004055F2                 setb    al
.text:004055F5                 mov     cl, dl
.text:004055F7                 sub     cl, al
.text:004055F9                 movsx   ecx, cl
.text:004055FC                 test    ecx, ecx
.text:004055FE                 jnz     loc_405553
.text:00405604                 cmp     ebp, ebx
.text:00405606                 mov     ecx, 0FFFFFFFFh
.text:0040560B                 jb      loc_405553
.text:00405611                 xor     ecx, ecx
.text:00405613                 cmp     ebp, ebx
.text:00405615                 setnz   cl
.text:00405618                 jmp     loc_405553
.text:0040561D ; ---------------------------------------------------------------------------
.text:0040561D
.text:0040561D loc_40561D:                             ; CODE XREF: sub_4049B0+C1A↑j
.text:0040561D                 mov     [esp+11Ch+var_110], ebx ; char
.text:00405621                 mov     ecx, [edi]
.text:00405623                 mov     [esp+11Ch+ElementSize], ebp ; int
.text:00405627                 mov     [esp+11Ch+ElementCount], ecx ; char *
.text:0040562B                 mov     edx, [esi]
.text:0040562D                 mov     [esp+11Ch+Stream], edx ; char *
.text:00405630                 call    sub_40A510
.text:00405635                 mov     ecx, eax
.text:00405637                 jmp     loc_405553
.text:0040563C ; ---------------------------------------------------------------------------
.text:0040563C
.text:0040563C loc_40563C:                             ; CODE XREF: sub_4049B0+B8B↑j
.text:0040563C                 mov     [esp+11Ch+ElementSize], edi
.text:00405640                 mov     [esp+11Ch+Stream], esi
.text:00405643                 call    sub_406350
.text:00405648                 movzx   ebp, ds:byte_4184B0
.text:0040564F                 mov     ecx, eax
.text:00405651                 movzx   ebx, ds:byte_4184A0
.text:00405658                 or      ebp, eax
.text:0040565A                 or      ebp, ebx
.text:0040565C                 jnz     loc_40555E
.text:00405662                 jmp     loc_405541
.text:00405667 ; ---------------------------------------------------------------------------
.text:00405667
.text:00405667 loc_405667:                             ; CODE XREF: sub_4049B0+1AF↑j
.text:00405667                 mov     ecx, [esp+11Ch+var_70]
.text:0040566E                 mov     ebx, [esp+11Ch+var_6C]
.text:00405675                 mov     edx, [ecx-10h]
.text:00405678                 mov     [ebx-10h], edx
.text:0040567B                 mov     esi, [ecx-0Ch]
.text:0040567E                 mov     [ebx-0Ch], esi
.text:00405681                 mov     edi, [ecx-8]
.text:00405684                 mov     [ebx-8], edi
.text:00405687                 mov     ebp, [ecx-4]
.text:0040568A                 mov     [ebx-4], ebp
.text:0040568D                 jmp     loc_404C78
.text:00405692 ; ---------------------------------------------------------------------------
.text:00405692
.text:00405692 loc_405692:                             ; CODE XREF: sub_4049B0+164↑j
.text:00405692                 mov     esi, ecx
.text:00405694                 mov     edi, ecx
.text:00405696                 mov     ecx, ds:dword_4184D0
.text:0040569C                 sub     esi, 10h
.text:0040569F                 sub     edi, 20h ; ' '
.text:004056A2                 test    ecx, ecx
.text:004056A4                 jnz     loc_4057DA
.text:004056AA
.text:004056AA loc_4056AA:                             ; CODE XREF: sub_4049B0+E50↓j
.text:004056AA                 mov     ebx, [edi+4]
.text:004056AD                 mov     ebp, [esi+4]
.text:004056B0                 dec     ebx
.text:004056B1                 dec     ebp
.text:004056B2                 jnz     loc_405754
.text:004056B8                 xor     ecx, ecx
.text:004056BA                 test    ebx, ebx
.text:004056BC                 setz    cl
.text:004056BF                 dec     ecx
.text:004056C0
.text:004056C0 loc_4056C0:                             ; CODE XREF: sub_4049B0+DAB↓j
.text:004056C0                                         ; sub_4049B0+DEC↓j ...
.text:004056C0                 cmp     ds:byte_418490, 0
.text:004056C7                 jz      short loc_4056CB
.text:004056C9                 neg     ecx
.text:004056CB
.text:004056CB loc_4056CB:                             ; CODE XREF: sub_4049B0+D17↑j
.text:004056CB                                         ; sub_4049B0+E4A↓j
.text:004056CB                 test    ecx, ecx
.text:004056CD                 jle     short loc_405743
.text:004056CF                 mov     esi, [esp+11Ch+var_70]
.text:004056D6                 mov     ebx, [esi-10h]
.text:004056D9                 mov     [esp+11Ch+var_4C], ebx
.text:004056E0                 mov     ebp, [esi-0Ch]
.text:004056E3                 mov     [esp+11Ch+var_48], ebp
.text:004056EA                 mov     ecx, [esi-8]
.text:004056ED                 mov     [esp+11Ch+var_44], ecx
.text:004056F4                 mov     edi, [esi-4]
.text:004056F7                 mov     [esp+11Ch+var_40], edi
.text:004056FE                 mov     edx, [esi-20h]
.text:00405701                 mov     ebx, [esi-1Ch]
.text:00405704                 mov     ebp, [esi-18h]
.text:00405707                 mov     ecx, [esi-14h]
.text:0040570A                 mov     [esi-10h], edx
.text:0040570D                 mov     [esi-0Ch], ebx
.text:00405710                 mov     [esi-8], ebp
.text:00405713                 mov     [esi-4], ecx
.text:00405716                 mov     edi, [esp+11Ch+var_4C]
.text:0040571D                 mov     [esi-20h], edi
.text:00405720                 mov     edx, [esp+11Ch+var_48]
.text:00405727                 mov     [esi-1Ch], edx
.text:0040572A                 mov     ebx, [esp+11Ch+var_44]
.text:00405731                 mov     [esi-18h], ebx
.text:00405734                 mov     ebp, [esp+11Ch+var_40]
.text:0040573B                 mov     [esi-14h], ebp
.text:0040573E                 jmp     loc_404D62
.text:00405743 ; ---------------------------------------------------------------------------
.text:00405743
.text:00405743 loc_405743:                             ; CODE XREF: sub_4049B0+D1D↑j
.text:00405743                 movzx   eax, [esp+11Ch+var_24]
.text:0040574B                 mov     [esp+11Ch+var_E1], al
.text:0040574F                 jmp     loc_404D6E
.text:00405754 ; ---------------------------------------------------------------------------
.text:00405754
.text:00405754 loc_405754:                             ; CODE XREF: sub_4049B0+D02↑j
.text:00405754                 test    ebx, ebx
.text:00405756                 mov     ecx, 1
.text:0040575B                 jz      loc_4056C0
.text:00405761                 cmp     ds:byte_418040, 0
.text:00405768                 jnz     short loc_4057BB
.text:0040576A                 mov     eax, [esi]
.text:0040576C                 cmp     ebx, ebp
.text:0040576E                 mov     edx, [edi]
.text:00405770                 mov     [esp+11Ch+var_74], eax
.text:00405777                 mov     eax, ebx
.text:00405779                 jbe     short loc_40577D
.text:0040577B                 mov     eax, ebp
.text:0040577D
.text:0040577D loc_40577D:                             ; CODE XREF: sub_4049B0+DC9↑j
.text:0040577D                 cld
.text:0040577E                 mov     esi, [esp+11Ch+var_74]
.text:00405785                 mov     ecx, eax
.text:00405787                 cmp     eax, eax
.text:00405789                 mov     edi, edx
.text:0040578B                 repe cmpsb
.text:0040578D                 setnbe  dl
.text:00405790                 setb    al
.text:00405793                 mov     cl, dl
.text:00405795                 sub     cl, al
.text:00405797                 movsx   ecx, cl
.text:0040579A                 test    ecx, ecx
.text:0040579C                 jnz     loc_4056C0
.text:004057A2                 cmp     ebp, ebx
.text:004057A4                 mov     ecx, 0FFFFFFFFh
.text:004057A9                 jb      loc_4056C0
.text:004057AF                 xor     ecx, ecx
.text:004057B1                 cmp     ebp, ebx
.text:004057B3                 setnz   cl
.text:004057B6                 jmp     loc_4056C0
.text:004057BB ; ---------------------------------------------------------------------------
.text:004057BB
.text:004057BB loc_4057BB:                             ; CODE XREF: sub_4049B0+DB8↑j
.text:004057BB                 mov     [esp+11Ch+var_110], ebx ; char
.text:004057BF                 mov     ecx, [edi]
.text:004057C1                 mov     [esp+11Ch+ElementSize], ebp ; int
.text:004057C5                 mov     [esp+11Ch+ElementCount], ecx ; char *
.text:004057C9                 mov     edi, [esi]
.text:004057CB                 mov     [esp+11Ch+Stream], edi ; char *
.text:004057CE                 call    sub_40A510
.text:004057D3                 mov     ecx, eax
.text:004057D5                 jmp     loc_4056C0
.text:004057DA ; ---------------------------------------------------------------------------
.text:004057DA
.text:004057DA loc_4057DA:                             ; CODE XREF: sub_4049B0+CF4↑j
.text:004057DA                 mov     [esp+11Ch+ElementSize], edi
.text:004057DE                 mov     [esp+11Ch+Stream], esi
.text:004057E1                 call    sub_406350
.text:004057E6                 movzx   edx, ds:byte_4184B0
.text:004057ED                 mov     ecx, eax
.text:004057EF                 movzx   ebx, ds:byte_4184A0
.text:004057F6                 or      edx, eax
.text:004057F8                 or      edx, ebx
.text:004057FA                 jnz     loc_4056CB
.text:00405800                 jmp     loc_4056AA
.text:00405805 ; ---------------------------------------------------------------------------
.text:00405805
.text:00405805 loc_405805:                             ; CODE XREF: sub_4049B0+12B↑j
.text:00405805                 mov     [esp+11Ch+var_2C], esi
.text:0040580C
.text:0040580C loc_40580C:                             ; CODE XREF: sub_4049B0+E1↑j
.text:0040580C                 mov     edx, [esp+11Ch+var_50]
.text:00405813                 mov     eax, ds:_iob
.text:00405818                 cmp     edx, eax
.text:0040581A                 jz      short loc_405858
.text:0040581C                 add     eax, 20h ; ' '
.text:0040581F                 cmp     edx, eax
.text:00405821                 jz      short loc_405847
.text:00405823                 mov     [esp+11Ch+Stream], edx ; Stream
.text:00405826                 call    fclose
.text:0040582B                 test    eax, eax
.text:0040582D                 jnz     loc_4051AE
.text:00405833
.text:00405833 loc_405833:                             ; CODE XREF: sub_4049B0+EA1↓j
.text:00405833                                         ; sub_4049B0+EAC↓j ...
.text:00405833                 mov     ebx, [esp+11Ch+arg_4]
.text:0040583A                 test    ebx, ebx
.text:0040583C                 jnz     loc_4049E3
.text:00405842                 jmp     loc_404F5D
.text:00405847 ; ---------------------------------------------------------------------------
.text:00405847
.text:00405847 loc_405847:                             ; CODE XREF: sub_4049B0+E71↑j
.text:00405847                 mov     [esp+11Ch+Stream], edx ; Stream
.text:0040584A                 call    fflush
.text:0040584F                 test    eax, eax
.text:00405851                 jz      short loc_405833
.text:00405853                 jmp     loc_4051D4
.text:00405858 ; ---------------------------------------------------------------------------
.text:00405858
.text:00405858 loc_405858:                             ; CODE XREF: sub_4049B0+E6A↑j
.text:00405858                 test    byte ptr [edx+0Ch], 10h
.text:0040585C                 jz      short loc_405833
.text:0040585E                 mov     [esp+11Ch+Stream], edx ; Stream
.text:00405861                 call    clearerr
.text:00405866                 jmp     short loc_405833
.text:00405868 ; ---------------------------------------------------------------------------
.text:00405868
.text:00405868 loc_405868:                             ; CODE XREF: sub_4049B0+F5↑j
.text:00405868                                         ; sub_4049B0+104↑j
.text:00405868                 mov     ecx, [esp+11Ch+var_30]
.text:0040586F                 mov     ebx, [esp+11Ch+var_34]
.text:00405876                 jmp     loc_404AE1
.text:0040587B ; ---------------------------------------------------------------------------
.text:0040587B
.text:0040587B loc_40587B:                             ; CODE XREF: sub_4049B0+9D↑j
.text:0040587B                 mov     [esp+11Ch+var_10C], 18h
.text:00405883                 mov     edx, [esp+11Ch+arg_4]
.text:0040588A                 lea     edi, [esp+11Ch+var_50]
.text:00405891                 mov     [esp+11Ch+ElementSize], 1
.text:00405899                 mov     ebp, [esp+11Ch+arg_0]
.text:004058A0                 lea     esi, [esp+11Ch+Block]
.text:004058A7                 mov     [esp+11Ch+Stream], edi
.text:004058AA                 mov     [esp+11Ch+var_110], edx
.text:004058AE                 mov     [esp+11Ch+ElementCount], ebp
.text:004058B2                 call    sub_405CD0
.text:004058B7                 mov     ebx, eax
.text:004058B9
.text:004058B9 loc_4058B9:                             ; CODE XREF: sub_4049B0+F26↓j
.text:004058B9                 mov     edi, ebx
.text:004058BB                 and     edi, 0Fh
.text:004058BE                 sub     ebx, edi
.text:004058C0                 lea     ebx, [ebx+10h]
.text:004058C3                 mov     [esp+11Ch+Stream], ebx ; Size
.text:004058C6                 call    malloc
.text:004058CB                 mov     [esi], eax
.text:004058CD                 test    eax, eax
.text:004058CF                 jnz     short loc_4058DA
.text:004058D1                 shr     ebx, 1
.text:004058D3                 cmp     ebx, 19h
.text:004058D6                 ja      short loc_4058B9
.text:004058D8                 jmp     short loc_405920
.text:004058DA ; ---------------------------------------------------------------------------
.text:004058DA
.text:004058DA loc_4058DA:                             ; CODE XREF: sub_4049B0+F1F↑j
.text:004058DA                 mov     dword ptr [esi+14h], 18h
.text:004058E1                 mov     [esi+0Ch], ebx
.text:004058E4                 mov     dword ptr [esi+8], 0
.text:004058EB                 mov     dword ptr [esi+10h], 0
.text:004058F2                 mov     dword ptr [esi+4], 0
.text:004058F9                 mov     byte ptr [esi+18h], 0
.text:004058FD                 jmp     loc_404A53
.text:00405902 ; ---------------------------------------------------------------------------
.text:00405902
.text:00405902 loc_405902:                             ; CODE XREF: sub_4049B0+68↑j
.text:00405902                 mov     ds:byte_4184C0, 1
.text:00405909                 mov     eax, ds:_iob
.text:0040590E                 jmp     loc_404A3D
.text:00405913 ; ---------------------------------------------------------------------------
.text:00405913
.text:00405913 loc_405913:                             ; CODE XREF: sub_4049B0+45↑j
.text:00405913                 mov     eax, ds:_iob
.text:00405918                 add     eax, 20h ; ' '
.text:0040591B                 jmp     loc_404A3D
.text:00405920 ; ---------------------------------------------------------------------------
.text:00405920
.text:00405920 loc_405920:                             ; CODE XREF: sub_4049B0+F28↑j
.text:00405920                 call    sub_40A660
.text:00405920 sub_4049B0      endp
.text:00405920
.text:00405920 ; ---------------------------------------------------------------------------
.text:00405925                 align 10h
.text:00405930
.text:00405930 ; =============== S U B R O U T I N E =======================================
.text:00405930
.text:00405930
.text:00405930 ; void __cdecl Function(int)
.text:00405930 Function        proc near               ; DATA XREF: sub_4021E0+23F↑o
.text:00405930
.text:00405930 Signal          = dword ptr -1Ch
.text:00405930 Function        = dword ptr -18h
.text:00405930 arg_0           = dword ptr  4
.text:00405930
.text:00405930                 push    esi
.text:00405931                 push    ebx
.text:00405932                 sub     esp, 14h
.text:00405935                 mov     esi, [esp+1Ch+arg_0]
.text:00405939                 mov     [esp+1Ch+Function], 1 ; Function
.text:00405941                 mov     [esp+1Ch+Signal], esi ; Signal
.text:00405944                 call    signal
.text:00405949                 mov     ebx, ds:Block
.text:0040594F                 test    ebx, ebx
.text:00405951                 jz      short loc_405971
.text:00405953                 lea     esi, [esi+0]
.text:00405959                 lea     edi, [edi+0]
.text:00405960
.text:00405960 loc_405960:                             ; CODE XREF: Function+3F↓j
.text:00405960                 lea     edx, [ebx+4]
.text:00405963                 mov     [esp+1Ch+Signal], edx ; LPCSTR
.text:00405966                 call    sub_4101C0
.text:0040596B                 mov     ebx, [ebx]
.text:0040596D                 test    ebx, ebx
.text:0040596F                 jnz     short loc_405960
.text:00405971
.text:00405971 loc_405971:                             ; CODE XREF: Function+21↑j
.text:00405971                 mov     [esp+1Ch+Signal], esi ; Signal
.text:00405974                 mov     [esp+1Ch+Function], 0 ; Function
.text:0040597C                 call    signal
.text:00405981                 mov     [esp+1Ch+arg_0], esi ; Signal
.text:00405985                 add     esp, 14h
.text:00405988                 pop     ebx
.text:00405989                 pop     esi
.text:0040598A                 jmp     raise
.text:0040598A Function        endp
.text:0040598A
.text:0040598A ; ---------------------------------------------------------------------------
.text:0040598F                 align 10h
.text:00405990
.text:00405990 ; =============== S U B R O U T I N E =======================================
.text:00405990
.text:00405990
.text:00405990 sub_405990      proc near               ; CODE XREF: sub_4021E0+790↑p
.text:00405990                                         ; sub_4021E0+898↑p ...
.text:00405990
.text:00405990 arg_0           = dword ptr  4
.text:00405990 arg_4           = dword ptr  8
.text:00405990 arg_8           = dword ptr  0Ch
.text:00405990
.text:00405990                 push    ebx
.text:00405991                 mov     edx, [esp+4+arg_0]
.text:00405995                 mov     ecx, [esp+4+arg_4]
.text:00405999                 mov     ebx, [esp+4+arg_8]
.text:0040599D                 movzx   eax, byte ptr [edx]
.text:004059A0                 test    al, al
.text:004059A2                 jz      def_4059BF      ; jumptable 004059BF default case, cases 78-97,99,101,104,106-109,111-113
.text:004059A8                 nop
.text:004059A9                 lea     esi, [esi+0]
.text:004059B0
.text:004059B0 loc_4059B0:                             ; CODE XREF: sub_405990+F6↓j
.text:004059B0                 movsx   eax, al
.text:004059B3                 sub     eax, 4Dh ; 'M'  ; switch 38 cases
.text:004059B6                 cmp     eax, 25h
.text:004059B9                 ja      def_4059BF      ; jumptable 004059BF default case, cases 78-97,99,101,104,106-109,111-113
.text:004059BF                 jmp     ds:jpt_4059BF[eax*4] ; switch jump
.text:004059BF ; ---------------------------------------------------------------------------
.text:004059C6                 align 4
.text:004059C8 jpt_4059BF      dd offset loc_405AA0    ; DATA XREF: sub_405990+2F↑r
.text:004059C8                 dd offset def_4059BF    ; jump table for switch statement
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset loc_405A60
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset loc_405AA6
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset loc_405AB0
.text:004059C8                 dd offset loc_405AC0
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset loc_405AC6
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset loc_405AD6
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset def_4059BF
.text:004059C8                 dd offset loc_405AE0
.text:00405A60 ; ---------------------------------------------------------------------------
.text:00405A60
.text:00405A60 loc_405A60:                             ; CODE XREF: sub_405990+2F↑j
.text:00405A60                                         ; DATA XREF: sub_405990:jpt_4059BF↑o
.text:00405A60                 test    ebx, ebx        ; jumptable 004059BF case 98
.text:00405A62                 jz      short loc_405A94
.text:00405A64                 cmp     ebx, 2
.text:00405A67                 jz      short loc_405A94
.text:00405A69
.text:00405A69 loc_405A69:                             ; CODE XREF: sub_405990+108↓j
.text:00405A69                 lea     eax, [ebx-1]
.text:00405A6C                 cmp     eax, 1
.text:00405A6F                 ja      short loc_405A80
.text:00405A71                 mov     byte ptr [ecx+19h], 1
.text:00405A75                 lea     esi, [esi+0]
.text:00405A79                 lea     edi, [edi+0]
.text:00405A80
.text:00405A80 loc_405A80:                             ; CODE XREF: sub_405990+DF↑j
.text:00405A80                                         ; sub_405990+114↓j ...
.text:00405A80                 inc     edx
.text:00405A81                 movzx   eax, byte ptr [edx]
.text:00405A84                 test    al, al
.text:00405A86                 jnz     loc_4059B0
.text:00405A8C                 lea     esi, [esi+0]
.text:00405A90
.text:00405A90 def_4059BF:                             ; CODE XREF: sub_405990+12↑j
.text:00405A90                                         ; sub_405990+29↑j ...
.text:00405A90                 pop     ebx             ; jumptable 004059BF default case, cases 78-97,99,101,104,106-109,111-113
.text:00405A91                 mov     eax, edx
.text:00405A93                 retn
.text:00405A94 ; ---------------------------------------------------------------------------
.text:00405A94
.text:00405A94 loc_405A94:                             ; CODE XREF: sub_405990+D2↑j
.text:00405A94                                         ; sub_405990+D7↑j
.text:00405A94                 mov     byte ptr [ecx+18h], 1
.text:00405A98                 jmp     short loc_405A69
.text:00405A98 ; ---------------------------------------------------------------------------
.text:00405A9A                 align 10h
.text:00405AA0
.text:00405AA0 loc_405AA0:                             ; CODE XREF: sub_405990+2F↑j
.text:00405AA0                                         ; DATA XREF: sub_405990:jpt_4059BF↑o
.text:00405AA0                 mov     byte ptr [ecx+1Ch], 1 ; jumptable 004059BF case 77
.text:00405AA4                 jmp     short loc_405A80
.text:00405AA6 ; ---------------------------------------------------------------------------
.text:00405AA6
.text:00405AA6 loc_405AA6:                             ; CODE XREF: sub_405990+2F↑j
.text:00405AA6                                         ; DATA XREF: sub_405990:jpt_4059BF↑o
.text:00405AA6                 mov     dword ptr [ecx+10h], offset byte_418250 ; jumptable 004059BF case 100
.text:00405AAD                 jmp     short loc_405A80
.text:00405AAD ; ---------------------------------------------------------------------------
.text:00405AAF                 align 10h
.text:00405AB0
.text:00405AB0 loc_405AB0:                             ; CODE XREF: sub_405990+2F↑j
.text:00405AB0                                         ; DATA XREF: sub_405990:jpt_4059BF↑o
.text:00405AB0                 mov     dword ptr [ecx+14h], offset byte_418350 ; jumptable 004059BF case 102
.text:00405AB7                 jmp     short loc_405A80
.text:00405AB7 ; ---------------------------------------------------------------------------
.text:00405AB9                 align 10h
.text:00405AC0
.text:00405AC0 loc_405AC0:                             ; CODE XREF: sub_405990+2F↑j
.text:00405AC0                                         ; DATA XREF: sub_405990:jpt_4059BF↑o
.text:00405AC0                 mov     byte ptr [ecx+1Bh], 1 ; jumptable 004059BF case 103
.text:00405AC4                 jmp     short loc_405A80
.text:00405AC6 ; ---------------------------------------------------------------------------
.text:00405AC6
.text:00405AC6 loc_405AC6:                             ; CODE XREF: sub_405990+2F↑j
.text:00405AC6                                         ; DATA XREF: sub_405990:jpt_4059BF↑o
.text:00405AC6                 mov     eax, [ecx+10h]  ; jumptable 004059BF case 105
.text:00405AC9                 test    eax, eax
.text:00405ACB                 jnz     short loc_405A80
.text:00405ACD                 mov     dword ptr [ecx+10h], offset byte_418150
.text:00405AD4                 jmp     short loc_405A80
.text:00405AD6 ; ---------------------------------------------------------------------------
.text:00405AD6
.text:00405AD6 loc_405AD6:                             ; CODE XREF: sub_405990+2F↑j
.text:00405AD6                                         ; DATA XREF: sub_405990:jpt_4059BF↑o
.text:00405AD6                 mov     byte ptr [ecx+1Ah], 1 ; jumptable 004059BF case 110
.text:00405ADA                 jmp     short loc_405A80
.text:00405ADA ; ---------------------------------------------------------------------------
.text:00405ADC                 align 10h
.text:00405AE0
.text:00405AE0 loc_405AE0:                             ; CODE XREF: sub_405990+2F↑j
.text:00405AE0                                         ; DATA XREF: sub_405990:jpt_4059BF↑o
.text:00405AE0                 mov     byte ptr [ecx+1Dh], 1 ; jumptable 004059BF case 114
.text:00405AE4                 jmp     short loc_405A80
.text:00405AE4 sub_405990      endp
.text:00405AE4
.text:00405AE4 ; ---------------------------------------------------------------------------
.text:00405AE6                 align 10h
.text:00405AF0
.text:00405AF0 ; =============== S U B R O U T I N E =======================================
.text:00405AF0
.text:00405AF0
.text:00405AF0 sub_405AF0      proc near               ; CODE XREF: sub_4049B0+1EE↑p
.text:00405AF0                                         ; sub_405AF0+36↓p ...
.text:00405AF0
.text:00405AF0 var_2C          = dword ptr -2Ch
.text:00405AF0 var_28          = dword ptr -28h
.text:00405AF0 var_24          = dword ptr -24h
.text:00405AF0 var_20          = byte ptr -20h
.text:00405AF0 var_1C          = dword ptr -1Ch
.text:00405AF0 var_18          = dword ptr -18h
.text:00405AF0 var_14          = dword ptr -14h
.text:00405AF0 arg_0           = dword ptr  4
.text:00405AF0 arg_4           = dword ptr  8
.text:00405AF0 arg_8           = dword ptr  0Ch
.text:00405AF0
.text:00405AF0                 push    ebp
.text:00405AF1                 push    edi
.text:00405AF2                 push    esi
.text:00405AF3                 push    ebx
.text:00405AF4                 sub     esp, 1Ch
.text:00405AF7                 mov     eax, [esp+2Ch+arg_4]
.text:00405AFB                 mov     ebp, [esp+2Ch+arg_8]
.text:00405AFF                 cmp     eax, 2
.text:00405B02                 jz      short loc_405B70
.text:00405B04                 mov     esi, eax
.text:00405B06                 mov     ecx, [esp+2Ch+arg_0]
.text:00405B0A                 mov     ebx, eax
.text:00405B0C                 shr     esi, 1
.text:00405B0E                 mov     edi, ebp
.text:00405B10                 mov     edx, esi
.text:00405B12                 shl     edx, 4
.text:00405B15                 sub     ebx, esi
.text:00405B17                 sub     ecx, edx
.text:00405B19                 mov     [esp+2Ch+var_28], ebx
.text:00405B1D                 sub     edi, edx
.text:00405B1F                 mov     [esp+2Ch+var_24], edi
.text:00405B23                 mov     [esp+2Ch+var_2C], ecx
.text:00405B26                 call    sub_405AF0
.text:00405B2B                 cmp     esi, 1
.text:00405B2E                 ja      short loc_405B54
.text:00405B30
.text:00405B30 loc_405B30:                             ; CODE XREF: sub_405AF0+78↓j
.text:00405B30                 mov     [esp+2Ch+var_1C], ebx
.text:00405B34                 mov     eax, [esp+2Ch+arg_0]
.text:00405B38                 mov     dword ptr [esp+2Ch+var_20], edi
.text:00405B3C                 mov     [esp+2Ch+var_24], esi
.text:00405B40                 mov     [esp+2Ch+var_28], eax
.text:00405B44                 mov     [esp+2Ch+var_2C], ebp
.text:00405B47                 call    sub_407790
.text:00405B4C
.text:00405B4C loc_405B4C:                             ; CODE XREF: sub_405AF0+10A↓j
.text:00405B4C                 add     esp, 1Ch
.text:00405B4F                 pop     ebx
.text:00405B50                 pop     esi
.text:00405B51                 pop     edi
.text:00405B52                 pop     ebp
.text:00405B53                 retn
.text:00405B54 ; ---------------------------------------------------------------------------
.text:00405B54
.text:00405B54 loc_405B54:                             ; CODE XREF: sub_405AF0+3E↑j
.text:00405B54                 mov     [esp+2Ch+var_24], ebp
.text:00405B58                 mov     ecx, [esp+2Ch+arg_0]
.text:00405B5C                 mov     [esp+2Ch+var_28], esi
.text:00405B60                 mov     [esp+2Ch+var_2C], ecx
.text:00405B63                 call    sub_407970
.text:00405B68                 jmp     short loc_405B30
.text:00405B68 ; ---------------------------------------------------------------------------
.text:00405B6A                 align 10h
.text:00405B70
.text:00405B70 loc_405B70:                             ; CODE XREF: sub_405AF0+12↑j
.text:00405B70                 mov     esi, [esp+2Ch+arg_0]
.text:00405B74                 mov     edi, [esp+2Ch+arg_0]
.text:00405B78                 mov     edx, ds:dword_4184D0
.text:00405B7E                 sub     esi, 10h
.text:00405B81                 sub     edi, 20h ; ' '
.text:00405B84                 test    edx, edx
.text:00405B86                 jnz     loc_405C88
.text:00405B8C
.text:00405B8C loc_405B8C:                             ; CODE XREF: sub_405AF0+1BE↓j
.text:00405B8C                 mov     ebx, [edi+4]
.text:00405B8F                 mov     ecx, [esi+4]
.text:00405B92                 dec     ebx
.text:00405B93                 dec     ecx
.text:00405B94                 mov     [esp+2Ch+var_14], ecx
.text:00405B98                 jnz     short loc_405C00
.text:00405B9A                 xor     ecx, ecx
.text:00405B9C                 test    ebx, ebx
.text:00405B9E                 setz    cl
.text:00405BA1                 dec     ecx
.text:00405BA2
.text:00405BA2 loc_405BA2:                             ; CODE XREF: sub_405AF0+117↓j
.text:00405BA2                                         ; sub_405AF0+152↓j ...
.text:00405BA2                 cmp     ds:byte_418490, 0
.text:00405BA9                 jz      short loc_405BAD
.text:00405BAB                 neg     ecx
.text:00405BAD
.text:00405BAD loc_405BAD:                             ; CODE XREF: sub_405AF0+B9↑j
.text:00405BAD                                         ; sub_405AF0+1B8↓j
.text:00405BAD                 xor     edx, edx
.text:00405BAF                 mov     edi, [esp+2Ch+arg_0]
.text:00405BB3                 test    ecx, ecx
.text:00405BB5                 setnle  dl
.text:00405BB8                 mov     esi, edx
.text:00405BBA                 not     esi
.text:00405BBC                 shl     esi, 4
.text:00405BBF                 mov     ecx, [edi+esi]
.text:00405BC2                 shl     edx, 4
.text:00405BC5                 add     edx, edi
.text:00405BC7                 mov     [ebp-10h], ecx
.text:00405BCA                 mov     ebx, [edi+esi+4]
.text:00405BCE                 mov     [ebp-0Ch], ebx
.text:00405BD1                 mov     ecx, [edi+esi+8]
.text:00405BD5                 mov     [ebp-8], ecx
.text:00405BD8                 mov     ebx, [edi+esi+0Ch]
.text:00405BDC                 lea     edi, [edx-20h]
.text:00405BDF                 mov     [ebp-4], ebx
.text:00405BE2                 mov     esi, [edx-20h]
.text:00405BE5                 mov     [ebp-20h], esi
.text:00405BE8                 mov     ebx, [edi+4]
.text:00405BEB                 mov     [ebp-1Ch], ebx
.text:00405BEE                 mov     ecx, [edi+8]
.text:00405BF1                 mov     [ebp-18h], ecx
.text:00405BF4                 mov     esi, [edi+0Ch]
.text:00405BF7                 mov     [ebp-14h], esi
.text:00405BFA                 jmp     loc_405B4C
.text:00405BFA ; ---------------------------------------------------------------------------
.text:00405BFF                 align 10h
.text:00405C00
.text:00405C00 loc_405C00:                             ; CODE XREF: sub_405AF0+A8↑j
.text:00405C00                 test    ebx, ebx
.text:00405C02                 mov     ecx, 1
.text:00405C07                 jz      short loc_405BA2
.text:00405C09                 cmp     ds:byte_418040, 0
.text:00405C10                 jnz     short loc_405C65
.text:00405C12                 cmp     ebx, [esp+2Ch+var_14]
.text:00405C16                 mov     eax, ebx
.text:00405C18                 mov     edx, [esi]
.text:00405C1A                 mov     [esp+2Ch+var_18], edx
.text:00405C1E                 mov     edx, [edi]
.text:00405C20                 jbe     short loc_405C26
.text:00405C22                 mov     eax, [esp+2Ch+var_14]
.text:00405C26
.text:00405C26 loc_405C26:                             ; CODE XREF: sub_405AF0+130↑j
.text:00405C26                 cld
.text:00405C27                 mov     esi, [esp+2Ch+var_18]
.text:00405C2B                 mov     ecx, eax
.text:00405C2D                 cmp     eax, eax
.text:00405C2F                 mov     edi, edx
.text:00405C31                 repe cmpsb
.text:00405C33                 setnbe  dl
.text:00405C36                 setb    al
.text:00405C39                 mov     cl, dl
.text:00405C3B                 sub     cl, al
.text:00405C3D                 movsx   ecx, cl
.text:00405C40                 test    ecx, ecx
.text:00405C42                 jnz     loc_405BA2
.text:00405C48                 cmp     [esp+2Ch+var_14], ebx
.text:00405C4C                 mov     ecx, 0FFFFFFFFh
.text:00405C51                 jb      loc_405BA2
.text:00405C57                 xor     ecx, ecx
.text:00405C59                 cmp     [esp+2Ch+var_14], ebx
.text:00405C5D                 setnz   cl
.text:00405C60                 jmp     loc_405BA2
.text:00405C65 ; ---------------------------------------------------------------------------
.text:00405C65
.text:00405C65 loc_405C65:                             ; CODE XREF: sub_405AF0+120↑j
.text:00405C65                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00405C69                 mov     eax, [esp+2Ch+var_14]
.text:00405C6D                 mov     ebx, [edi]
.text:00405C6F                 mov     [esp+2Ch+var_28], eax ; int
.text:00405C73                 mov     [esp+2Ch+var_24], ebx ; char *
.text:00405C77                 mov     edi, [esi]
.text:00405C79                 mov     [esp+2Ch+var_2C], edi ; char *
.text:00405C7C                 call    sub_40A510
.text:00405C81                 mov     ecx, eax
.text:00405C83                 jmp     loc_405BA2
.text:00405C88 ; ---------------------------------------------------------------------------
.text:00405C88
.text:00405C88 loc_405C88:                             ; CODE XREF: sub_405AF0+96↑j
.text:00405C88                 mov     [esp+2Ch+var_28], edi
.text:00405C8C                 mov     [esp+2Ch+var_2C], esi
.text:00405C8F                 call    sub_406350
.text:00405C94                 movzx   edx, ds:byte_4184B0
.text:00405C9B                 mov     ecx, eax
.text:00405C9D                 movzx   ebx, ds:byte_4184A0
.text:00405CA4                 or      edx, eax
.text:00405CA6                 or      edx, ebx
.text:00405CA8                 jnz     loc_405BAD
.text:00405CAE                 jmp     loc_405B8C
.text:00405CAE sub_405AF0      endp
.text:00405CAE
.text:00405CAE ; ---------------------------------------------------------------------------
.text:00405CB3 aStatFailed     db 'stat failed',0      ; DATA XREF: sub_405CD0:loc_405F7B↓o
.text:00405CBF                 align 10h
.text:00405CC0 flt_405CC0      dd 0.125                ; DATA XREF: sub_405CD0+16E↓r
.text:00405CC4                 align 10h
.text:00405CD0
.text:00405CD0 ; =============== S U B R O U T I N E =======================================
.text:00405CD0
.text:00405CD0
.text:00405CD0 sub_405CD0      proc near               ; CODE XREF: sub_4049B0+F02↑p
.text:00405CD0
.text:00405CD0 var_104         = qword ptr -104h
.text:00405CD0 Code            = dword ptr -0FCh
.text:00405CD0 ErrorMessage    = dword ptr -0F8h
.text:00405CD0 var_F4          = dword ptr -0F4h
.text:00405CD0 var_F0          = byte ptr -0F0h
.text:00405CD0 var_EC          = dword ptr -0ECh
.text:00405CD0 var_D4          = dword ptr -0D4h
.text:00405CD0 var_D0          = dword ptr -0D0h
.text:00405CD0 var_CC          = qword ptr -0CCh
.text:00405CD0 var_C4          = dword ptr -0C4h
.text:00405CD0 var_C0          = dword ptr -0C0h
.text:00405CD0 var_B8          = dword ptr -0B8h
.text:00405CD0 var_B4          = dword ptr -0B4h
.text:00405CD0 var_B0          = dword ptr -0B0h
.text:00405CD0 var_AC          = qword ptr -0ACh
.text:00405CD0 var_A0          = word ptr -0A0h
.text:00405CD0 var_9E          = word ptr -9Eh
.text:00405CD0 var_9C          = dword ptr -9Ch
.text:00405CD0 var_98          = dword ptr -98h
.text:00405CD0 var_8C          = dword ptr -8Ch
.text:00405CD0 var_5C          = dword ptr -5Ch
.text:00405CD0 var_58          = dword ptr -58h
.text:00405CD0 arg_0           = dword ptr  4
.text:00405CD0 arg_4           = dword ptr  8
.text:00405CD0 arg_8           = dword ptr  0Ch
.text:00405CD0 arg_C           = dword ptr  10h
.text:00405CD0 arg_10          = dword ptr  14h
.text:00405CD0
.text:00405CD0                 push    ebp
.text:00405CD1                 push    edi
.text:00405CD2                 push    esi
.text:00405CD3                 push    ebx
.text:00405CD4                 sub     esp, 0ECh
.text:00405CDA                 mov     ecx, [esp+0FCh+arg_10]
.text:00405CE1                 mov     [esp+0FCh+var_B8], 0
.text:00405CE9                 lea     eax, [ecx+1]
.text:00405CEC                 add     ecx, 2
.text:00405CEF                 mov     [esp+0FCh+var_B0], eax
.text:00405CF3                 mov     eax, [esp+0FCh+arg_C]
.text:00405CFA                 cmp     [esp+0FCh+var_B8], eax
.text:00405CFE                 mov     [esp+0FCh+var_B4], ecx
.text:00405D02                 jnb     loc_405E1D
.text:00405D08                 nop
.text:00405D09                 lea     esi, [esi+0]
.text:00405D10
.text:00405D10 loc_405D10:                             ; CODE XREF: sub_405CD0+147↓j
.text:00405D10                 mov     edx, [esp+0FCh+arg_4]
.text:00405D17                 cmp     [esp+0FCh+var_B8], edx
.text:00405D1B                 jb      loc_405FF5
.text:00405D21                 cld
.text:00405D22                 mov     eax, [esp+0FCh+var_B8]
.text:00405D26                 mov     edi, offset asc_401530 ; "-"
.text:00405D2B                 mov     edx, [esp+0FCh+arg_8]
.text:00405D32                 mov     ecx, 2
.text:00405D37                 mov     ebx, [edx+eax*4]
.text:00405D3A                 mov     esi, ebx
.text:00405D3C                 repe cmpsb
.text:00405D3E                 jnz     loc_405FE0
.text:00405D44                 mov     [esp+0FCh+Code], 0
.text:00405D4B                 lea     ebx, [esp+0FCh+var_8C]
.text:00405D4F                 mov     [esp+0FCh+ErrorMessage], ebx
.text:00405D53
.text:00405D53 loc_405D53:                             ; CODE XREF: sub_405CD0+341↓j
.text:00405D53                 call    sub_40CE00
.text:00405D58
.text:00405D58 loc_405D58:                             ; CODE XREF: sub_405CD0+320↓j
.text:00405D58                 test    eax, eax
.text:00405D5A                 jnz     loc_405F7B
.text:00405D60                 mov     edx, [esp+0FCh+var_8C]
.text:00405D64                 and     edx, 0F000h
.text:00405D6A                 cmp     edx, 8000h
.text:00405D70                 jz      loc_405F60
.text:00405D76                 mov     eax, ds:dword_418450
.text:00405D7B                 test    eax, eax
.text:00405D7D                 jnz     loc_405E21
.text:00405D83                 mov     [esp+0FCh+var_C4], 100000h
.text:00405D8B                 mov     [esp+0FCh+var_C0], 0
.text:00405D93
.text:00405D93 loc_405D93:                             ; CODE XREF: sub_405CD0+2A6↓j
.text:00405D93                 mov     ebp, ds:dword_418000
.text:00405D99                 test    ebp, ebp
.text:00405D9B                 jnz     short loc_405DB1
.text:00405D9D                 mov     ebp, ds:dword_418450
.text:00405DA3                 test    ebp, ebp
.text:00405DA5                 mov     ds:dword_418000, ebp
.text:00405DAB                 jz      loc_405E30
.text:00405DB1
.text:00405DB1 loc_405DB1:                             ; CODE XREF: sub_405CD0+CB↑j
.text:00405DB1                                         ; sub_405CD0+276↓j
.text:00405DB1                 mov     ecx, [esp+0FCh+var_B0]
.text:00405DB5                 xor     edi, edi
.text:00405DB7                 xor     esi, esi
.text:00405DB9                 mov     eax, [esp+0FCh+var_C4]
.text:00405DBD                 mov     ebx, [esp+0FCh+var_C4]
.text:00405DC1                 mul     ecx
.text:00405DC3                 imul    ebx, edi
.text:00405DC6                 mov     edi, [esp+0FCh+var_C0]
.text:00405DCA                 mov     [esp+0FCh+var_D4], eax
.text:00405DCE                 mov     eax, edx
.text:00405DD0                 xor     edi, esi
.text:00405DD2                 add     eax, ebx
.text:00405DD4                 xor     edx, edx
.text:00405DD6                 mov     ebx, [esp+0FCh+var_C0]
.text:00405DDA                 imul    ecx, ebx
.text:00405DDD                 mov     ebx, [esp+0FCh+var_D4]
.text:00405DE1                 add     eax, ecx
.text:00405DE3                 mov     [esp+0FCh+var_D0], eax
.text:00405DE7                 inc     ebx
.text:00405DE8                 mov     ecx, [esp+0FCh+var_C4]
.text:00405DEC                 mov     eax, ebx
.text:00405DEE                 div     [esp+0FCh+var_B0]
.text:00405DF2                 xor     eax, ecx
.text:00405DF4                 or      edi, eax
.text:00405DF6                 jnz     short loc_405E2C
.text:00405DF8                 mov     eax, [esp+0FCh+var_B4]
.text:00405DFC                 mov     esi, ebp
.text:00405DFE                 sub     esi, eax
.text:00405E00                 cmp     esi, ebx
.text:00405E02                 jbe     short loc_405E2C
.text:00405E04                 inc     [esp+0FCh+var_B8]
.text:00405E08                 mov     ebp, [esp+0FCh+arg_C]
.text:00405E0F                 add     [esp+0FCh+var_B4], ebx
.text:00405E13                 cmp     [esp+0FCh+var_B8], ebp
.text:00405E17                 jb      loc_405D10
.text:00405E1D
.text:00405E1D loc_405E1D:                             ; CODE XREF: sub_405CD0+32↑j
.text:00405E1D                 mov     eax, [esp+0FCh+var_B4]
.text:00405E21
.text:00405E21 loc_405E21:                             ; CODE XREF: sub_405CD0+AD↑j
.text:00405E21                                         ; sub_405CD0+15E↓j
.text:00405E21                 add     esp, 0ECh
.text:00405E27                 pop     ebx
.text:00405E28                 pop     esi
.text:00405E29                 pop     edi
.text:00405E2A                 pop     ebp
.text:00405E2B                 retn
.text:00405E2C ; ---------------------------------------------------------------------------
.text:00405E2C
.text:00405E2C loc_405E2C:                             ; CODE XREF: sub_405CD0+126↑j
.text:00405E2C                                         ; sub_405CD0+132↑j
.text:00405E2C                 mov     eax, ebp
.text:00405E2E                 jmp     short loc_405E21
.text:00405E30 ; ---------------------------------------------------------------------------
.text:00405E30
.text:00405E30 loc_405E30:                             ; CODE XREF: sub_405CD0+DB↑j
.text:00405E30                 call    sub_40A7D0
.text:00405E35                 fstp    [esp+0FCh+var_CC]
.text:00405E39                 call    sub_40A6D0
.text:00405E3E                 fld     ds:flt_405CC0
.text:00405E44                 fld     st(1)
.text:00405E46                 fld     [esp+0FCh+var_CC]
.text:00405E4A                 fxch    st(3)
.text:00405E4C                 fmul    st, st(2)
.text:00405E4E                 fxch    st(3)
.text:00405E50                 fucom   st(3)
.text:00405E52                 fnstsw  ax
.text:00405E54                 fstp    st(3)
.text:00405E56                 sahf
.text:00405E57                 jbe     loc_405F52
.text:00405E5D                 fstp    st
.text:00405E5F                 fstp    st
.text:00405E61
.text:00405E61 loc_405E61:                             ; CODE XREF: sub_405CD0+286↓j
.text:00405E61                 xor     eax, eax
.text:00405E63                 mov     edi, 0FFFFFFFFh
.text:00405E68                 mov     esi, 0FFFFFFFFh
.text:00405E6D                 push    eax
.text:00405E6E                 push    edi
.text:00405E6F                 fild    [esp+104h+var_104]
.text:00405E72                 add     esp, 8
.text:00405E75                 fucomp  st(1)
.text:00405E77                 fnstsw  ax
.text:00405E79                 sahf
.text:00405E7A                 jbe     loc_405F4B
.text:00405E80                 fnstcw  [esp+0FCh+var_9E]
.text:00405E84                 movzx   ecx, [esp+0FCh+var_9E]
.text:00405E89                 or      cx, 0C00h
.text:00405E8E                 mov     [esp+0FCh+var_A0], cx
.text:00405E93                 fldcw   [esp+0FCh+var_A0]
.text:00405E97                 fistp   [esp+0FCh+var_AC]
.text:00405E9B                 fldcw   [esp+0FCh+var_9E]
.text:00405E9F                 mov     ebp, dword ptr [esp+0FCh+var_AC]
.text:00405EA3                 mov     esi, ebp
.text:00405EA5
.text:00405EA5 loc_405EA5:                             ; CODE XREF: sub_405CD0+27D↓j
.text:00405EA5                 mov     [esp+0FCh+Code], 2
.text:00405EAC                 lea     edi, [esp+0FCh+var_9C]
.text:00405EB0                 mov     [esp+0FCh+ErrorMessage], edi
.text:00405EB4                 call    sub_410350
.text:00405EB9                 test    eax, eax
.text:00405EBB                 jnz     short loc_405EE0
.text:00405EBD                 mov     ebx, [esp+0FCh+var_98]
.text:00405EC1                 xor     ebp, ebp
.text:00405EC3                 mov     eax, [esp+0FCh+var_9C]
.text:00405EC7                 cmp     ebx, ebp
.text:00405EC9                 ja      short loc_405EE0
.text:00405ECB                 jb      short loc_405ED1
.text:00405ECD                 cmp     eax, esi
.text:00405ECF                 jnb     short loc_405EE0
.text:00405ED1
.text:00405ED1 loc_405ED1:                             ; CODE XREF: sub_405CD0+1FB↑j
.text:00405ED1                 mov     esi, [esp+0FCh+var_9C]
.text:00405ED5                 lea     esi, [esi+0]
.text:00405ED9                 lea     edi, [edi+0]
.text:00405EE0
.text:00405EE0 loc_405EE0:                             ; CODE XREF: sub_405CD0+1EB↑j
.text:00405EE0                                         ; sub_405CD0+1F9↑j ...
.text:00405EE0                 mov     [esp+0FCh+ErrorMessage], edi
.text:00405EE4                 shr     esi, 1
.text:00405EE6                 mov     [esp+0FCh+Code], 5
.text:00405EED                 call    sub_410350
.text:00405EF2                 test    eax, eax
.text:00405EF4                 jnz     short loc_405F30
.text:00405EF6                 mov     ebx, [esp+0FCh+var_98]
.text:00405EFA                 mov     edx, [esp+0FCh+var_9C]
.text:00405EFE                 shrd    edx, ebx, 4
.text:00405F02                 mov     ecx, edx
.text:00405F04                 shr     ebx, 4
.text:00405F07                 mov     ebp, ebx
.text:00405F09                 shl     ecx, 4
.text:00405F0C                 shld    ebp, edx, 4
.text:00405F10                 sub     ecx, edx
.text:00405F12                 sbb     ebp, ebx
.text:00405F14                 xor     edi, edi
.text:00405F16                 cmp     ebp, edi
.text:00405F18                 ja      short loc_405F30
.text:00405F1A                 jb      short loc_405F20
.text:00405F1C                 cmp     ecx, esi
.text:00405F1E                 jnb     short loc_405F30
.text:00405F20
.text:00405F20 loc_405F20:                             ; CODE XREF: sub_405CD0+24A↑j
.text:00405F20                 mov     esi, ecx
.text:00405F22                 lea     esi, [esi+0]
.text:00405F29                 lea     edi, [edi+0]
.text:00405F30
.text:00405F30 loc_405F30:                             ; CODE XREF: sub_405CD0+224↑j
.text:00405F30                                         ; sub_405CD0+248↑j ...
.text:00405F30                 cmp     esi, 120h
.text:00405F36                 mov     eax, esi
.text:00405F38                 jnb     short loc_405F3F
.text:00405F3A                 mov     eax, 120h
.text:00405F3F
.text:00405F3F loc_405F3F:                             ; CODE XREF: sub_405CD0+268↑j
.text:00405F3F                 mov     ds:dword_418000, eax
.text:00405F44                 mov     ebp, eax
.text:00405F46                 jmp     loc_405DB1
.text:00405F4B ; ---------------------------------------------------------------------------
.text:00405F4B
.text:00405F4B loc_405F4B:                             ; CODE XREF: sub_405CD0+1AA↑j
.text:00405F4B                 fstp    st
.text:00405F4D                 jmp     loc_405EA5
.text:00405F52 ; ---------------------------------------------------------------------------
.text:00405F52
.text:00405F52 loc_405F52:                             ; CODE XREF: sub_405CD0+187↑j
.text:00405F52                 fstp    st(2)
.text:00405F54                 fmulp   st(1), st
.text:00405F56                 jmp     loc_405E61
.text:00405F56 ; ---------------------------------------------------------------------------
.text:00405F5B                 align 10h
.text:00405F60
.text:00405F60 loc_405F60:                             ; CODE XREF: sub_405CD0+A0↑j
.text:00405F60                 mov     esi, [esp+0FCh+var_5C]
.text:00405F67                 mov     ebx, [esp+0FCh+var_58]
.text:00405F6E                 mov     [esp+0FCh+var_C4], esi
.text:00405F72                 mov     [esp+0FCh+var_C0], ebx
.text:00405F76                 jmp     loc_405D93
.text:00405F7B ; ---------------------------------------------------------------------------
.text:00405F7B
.text:00405F7B loc_405F7B:                             ; CODE XREF: sub_405CD0+8A↑j
.text:00405F7B                 mov     [esp+0FCh+Code], offset aStatFailed ; "stat failed"
.text:00405F82                 call    ds:libintl_gettext
.text:00405F88                 mov     ebp, [esp+0FCh+var_B8]
.text:00405F8C                 mov     edi, [esp+0FCh+arg_8]
.text:00405F93                 mov     esi, eax
.text:00405F95                 mov     ebx, [edi+ebp*4]
.text:00405F98                 test    ebx, ebx
.text:00405F9A                 jz      short loc_405FCF
.text:00405F9C
.text:00405F9C loc_405F9C:                             ; CODE XREF: sub_405CD0+30E↓j
.text:00405F9C                 call    _errno
.text:00405FA1                 mov     [esp+0FCh+var_EC], ebx
.text:00405FA5                 mov     dword ptr [esp+0FCh+var_F0], esi ; char
.text:00405FA9                 mov     [esp+0FCh+var_F4], offset aSS ; "%s: %s"
.text:00405FB1                 mov     ecx, [eax]
.text:00405FB3                 mov     [esp+0FCh+Code], 0 ; Code
.text:00405FBA                 mov     [esp+0FCh+ErrorMessage], ecx ; ErrorMessage
.text:00405FBE                 call    sub_40CB60
.text:00405FC3                 mov     [esp+0FCh+Code], 2 ; Code
.text:00405FCA                 call    exit
.text:00405FCF ; ---------------------------------------------------------------------------
.text:00405FCF
.text:00405FCF loc_405FCF:                             ; CODE XREF: sub_405CD0+2CA↑j
.text:00405FCF                 mov     [esp+0FCh+Code], offset aStandardOutput ; "standard output"
.text:00405FD6                 call    ds:libintl_gettext
.text:00405FDC                 mov     ebx, eax
.text:00405FDE                 jmp     short loc_405F9C
.text:00405FE0 ; ---------------------------------------------------------------------------
.text:00405FE0
.text:00405FE0 loc_405FE0:                             ; CODE XREF: sub_405CD0+6E↑j
.text:00405FE0                 mov     [esp+0FCh+Code], ebx ; char *
.text:00405FE3                 lea     esi, [esp+0FCh+var_8C]
.text:00405FE7                 mov     [esp+0FCh+ErrorMessage], esi ; int
.text:00405FEB                 call    sub_40F910
.text:00405FF0                 jmp     loc_405D58
.text:00405FF5 ; ---------------------------------------------------------------------------
.text:00405FF5
.text:00405FF5 loc_405FF5:                             ; CODE XREF: sub_405CD0+4B↑j
.text:00405FF5                 mov     ebp, [esp+0FCh+var_B8]
.text:00405FF9                 lea     ecx, [esp+0FCh+var_8C]
.text:00405FFD                 mov     edi, [esp+0FCh+arg_0]
.text:00406004                 mov     [esp+0FCh+ErrorMessage], ecx
.text:00406008                 mov     esi, [edi+ebp*4]
.text:0040600B                 mov     ebx, [esi+10h]
.text:0040600E                 mov     [esp+0FCh+Code], ebx
.text:00406011                 jmp     loc_405D53
.text:00406011 sub_405CD0      endp
.text:00406011
.text:00406011 ; ---------------------------------------------------------------------------
.text:00406016 aReadFailed     db 'read failed',0      ; DATA XREF: sub_406030:loc_4062D7↓o
.text:00406022                 align 10h
.text:00406030
.text:00406030 ; =============== S U B R O U T I N E =======================================
.text:00406030
.text:00406030
.text:00406030 ; int __cdecl sub_406030(int, FILE *, int)
.text:00406030 sub_406030      proc near               ; CODE XREF: sub_403F30+135↑p
.text:00406030                                         ; sub_4049B0+DA↑p ...
.text:00406030
.text:00406030 Buffer          = dword ptr -4Ch
.text:00406030 Src             = dword ptr -48h
.text:00406030 Size            = dword ptr -44h
.text:00406030 Stream          = dword ptr -40h
.text:00406030 var_3C          = dword ptr -3Ch
.text:00406030 var_30          = dword ptr -30h
.text:00406030 var_2C          = dword ptr -2Ch
.text:00406030 var_28          = dword ptr -28h
.text:00406030 var_24          = dword ptr -24h
.text:00406030 var_20          = dword ptr -20h
.text:00406030 var_1C          = dword ptr -1Ch
.text:00406030 var_15          = byte ptr -15h
.text:00406030 var_14          = dword ptr -14h
.text:00406030 arg_0           = dword ptr  4
.text:00406030 arg_4           = dword ptr  8
.text:00406030 arg_8           = dword ptr  0Ch
.text:00406030
.text:00406030                 push    ebp
.text:00406031                 push    edi
.text:00406032                 push    esi
.text:00406033                 push    ebx
.text:00406034                 sub     esp, 3Ch
.text:00406037                 mov     ecx, [esp+4Ch+arg_0]
.text:0040603B                 movzx   ebx, byte_417010
.text:00406042                 mov     edx, dword_417090
.text:00406048                 mov     eax, [ecx+14h]
.text:0040604B                 mov     esi, ds:dword_4184D0
.text:00406051                 sub     edx, 12h
.text:00406054                 mov     [esp+4Ch+var_1C], eax
.text:00406058                 mov     eax, [esp+4Ch+arg_0]
.text:0040605C                 mov     [esp+4Ch+var_14], esi
.text:00406060                 mov     [esp+4Ch+var_15], bl
.text:00406064                 cmp     byte ptr [eax+18h], 0
.text:00406068                 mov     [esp+4Ch+var_20], edx
.text:0040606C                 jnz     loc_4062D0
.text:00406072                 mov     ebx, [esp+4Ch+arg_0]
.text:00406076                 mov     edi, [esp+4Ch+var_1C]
.text:0040607A                 mov     edx, [ebx+4]
.text:0040607D                 mov     ecx, [ebx+10h]
.text:00406080                 inc     edi
.text:00406081                 mov     [esp+4Ch+var_30], edi
.text:00406085                 cmp     edx, ecx
.text:00406087                 jz      short loc_4060C0
.text:00406089                 mov     [esp+4Ch+Size], ecx ; Size
.text:0040608D                 mov     esi, [ebx]
.text:0040608F                 lea     eax, [edx+esi]
.text:00406092                 mov     [esp+4Ch+Buffer], esi ; void *
.text:00406095                 sub     eax, ecx
.text:00406097                 mov     [esp+4Ch+Src], eax ; Src
.text:0040609B                 call    memmove
.text:004060A0                 mov     dword ptr [ebx+8], 0
.text:004060A7                 mov     ecx, [ebx+10h]
.text:004060AA                 mov     ebp, [esp+4Ch+var_1C]
.text:004060AE                 mov     [ebx+4], ecx
.text:004060B1                 mov     edx, ecx
.text:004060B3                 inc     ebp
.text:004060B4                 mov     [esp+4Ch+var_30], ebp
.text:004060B8                 nop
.text:004060B9                 lea     esi, [esi+0]
.text:004060C0
.text:004060C0 loc_4060C0:                             ; CODE XREF: sub_406030+57↑j
.text:004060C0                                         ; sub_406030+12A↓j
.text:004060C0                 mov     edi, [esp+4Ch+arg_0]
.text:004060C4                 mov     esi, [edi+8]
.text:004060C7                 mov     ebx, [edi]
.text:004060C9                 mov     eax, [edi+0Ch]
.text:004060CC                 lea     ebp, [edx+ebx]
.text:004060CF                 lea     ecx, [eax+ebx]
.text:004060D2                 mov     [esp+4Ch+var_2C], eax
.text:004060D6                 mov     edx, esi
.text:004060D8                 mov     edi, ecx
.text:004060DA                 shl     edx, 4
.text:004060DD                 sub     edi, edx
.text:004060DF                 mov     edx, [esp+4Ch+var_1C]
.text:004060E3                 imul    edx, esi
.text:004060E6                 sub     ecx, edx
.text:004060E8                 mov     [esp+4Ch+var_24], ecx
.text:004060EC                 sub     [esp+4Ch+var_24], ebp
.text:004060F0                 test    esi, esi
.text:004060F2                 jz      loc_406332
.text:004060F8                 mov     esi, [edi+4]
.text:004060FB                 mov     ecx, [edi]
.text:004060FD                 add     esi, ecx
.text:004060FF
.text:004060FF loc_4060FF:                             ; CODE XREF: sub_406030+29B↓j
.text:004060FF                 mov     edx, [esp+4Ch+var_24]
.text:00406103                 cmp     [esp+4Ch+var_30], edx
.text:00406107                 jb      short loc_406182
.text:00406109
.text:00406109 loc_406109:                             ; CODE XREF: sub_406030+295↓j
.text:00406109                 mov     edx, [esp+4Ch+arg_0]
.text:0040610D                 mov     ecx, [edx+0Ch]
.text:00406110                 mov     ebx, [edx]
.text:00406112                 mov     [esp+4Ch+var_2C], ecx
.text:00406116
.text:00406116 loc_406116:                             ; CODE XREF: sub_406030+312↓j
.text:00406116                 mov     ecx, [esp+4Ch+arg_0]
.text:0040611A                 mov     edx, ebp
.text:0040611C                 mov     eax, [esp+4Ch+var_2C]
.text:00406120                 sub     edx, ebx
.text:00406122                 mov     [ecx+4], edx
.text:00406125                 lea     ecx, [eax+ebx]
.text:00406128                 mov     edx, [esp+4Ch+arg_0]
.text:0040612C                 sub     ecx, edi
.text:0040612E                 sar     ecx, 4
.text:00406131                 test    ecx, ecx
.text:00406133                 mov     [edx+8], ecx
.text:00406136                 jnz     short loc_40615F
.text:00406138                 mov     [esp+4Ch+Size], 1 ; int
.text:00406140                 mov     edi, edx
.text:00406142                 add     edi, 0Ch
.text:00406145                 mov     [esp+4Ch+Src], edi ; int
.text:00406149                 mov     [esp+4Ch+Buffer], ebx ; void *
.text:0040614C                 call    sub_40A240
.text:00406151                 mov     esi, [esp+4Ch+arg_0]
.text:00406155                 mov     edx, [esi+4]
.text:00406158                 mov     [esi], eax
.text:0040615A                 jmp     loc_4060C0
.text:0040615F ; ---------------------------------------------------------------------------
.text:0040615F
.text:0040615F loc_40615F:                             ; CODE XREF: sub_406030+106↑j
.text:0040615F                 mov     edx, [esp+4Ch+var_20]
.text:00406163                 sub     ebp, esi
.text:00406165                 mov     eax, 1
.text:0040616A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040616E                 add     edx, 12h
.text:00406171                 mov     [ebx+10h], ebp
.text:00406174                 mov     dword_417090, edx
.text:0040617A
.text:0040617A loc_40617A:                             ; CODE XREF: sub_406030+2A2↓j
.text:0040617A                 add     esp, 3Ch
.text:0040617D                 pop     ebx
.text:0040617E                 pop     esi
.text:0040617F                 pop     edi
.text:00406180                 pop     ebp
.text:00406181                 retn
.text:00406182 ; ---------------------------------------------------------------------------
.text:00406182
.text:00406182 loc_406182:                             ; CODE XREF: sub_406030+D7↑j
.text:00406182                                         ; sub_406030+30C↓j
.text:00406182                 mov     [esp+4Ch+Src], 1 ; ElementSize
.text:0040618A                 mov     edx, [esp+4Ch+var_24]
.text:0040618E                 mov     [esp+4Ch+Buffer], ebp ; Buffer
.text:00406191                 dec     edx
.text:00406192                 mov     eax, edx
.text:00406194                 xor     edx, edx
.text:00406196                 div     [esp+4Ch+var_30]
.text:0040619A                 mov     ebx, eax
.text:0040619C                 mov     eax, [esp+4Ch+arg_4]
.text:004061A0                 mov     [esp+4Ch+Size], ebx ; ElementCount
.text:004061A4                 mov     [esp+4Ch+Stream], eax ; Stream
.text:004061A8                 call    fread
.text:004061AD                 sub     [esp+4Ch+var_24], eax
.text:004061B1                 lea     ecx, [eax+ebp]
.text:004061B4                 cmp     eax, ebx
.text:004061B6                 mov     [esp+4Ch+var_28], ecx
.text:004061BA                 jz      short loc_4061F9
.text:004061BC                 mov     ecx, [esp+4Ch+arg_4]
.text:004061C0                 mov     eax, [ecx+0Ch]
.text:004061C3                 test    al, 20h
.text:004061C5                 jnz     loc_4062D7
.text:004061CB                 movsx   ebx, [esp+4Ch+var_15]
.text:004061D0                 test    al, 10h
.text:004061D2                 jz      short loc_406200
.text:004061D4                 mov     ebx, [esp+4Ch+arg_0]
.text:004061D8                 mov     edx, [esp+4Ch+var_28]
.text:004061DC                 cmp     [ebx], edx
.text:004061DE                 mov     byte ptr [ebx+18h], 1
.text:004061E2                 jz      loc_4062D0
.text:004061E8                 movzx   ebx, [esp+4Ch+var_15]
.text:004061ED                 cmp     [edx-1], bl
.text:004061F0                 jz      short loc_4061F9
.text:004061F2                 mov     [edx], bl
.text:004061F4                 inc     edx
.text:004061F5                 mov     [esp+4Ch+var_28], edx
.text:004061F9
.text:004061F9 loc_4061F9:                             ; CODE XREF: sub_406030+18A↑j
.text:004061F9                                         ; sub_406030+1C0↑j
.text:004061F9                 movsx   ebx, [esp+4Ch+var_15]
.text:004061FE                 mov     esi, esi
.text:00406200
.text:00406200 loc_406200:                             ; CODE XREF: sub_406030+1A2↑j
.text:00406200                                         ; sub_406030+250↓j
.text:00406200                 mov     [esp+4Ch+Src], ebx ; Val
.text:00406204                 mov     ecx, [esp+4Ch+var_28]
.text:00406208                 mov     [esp+4Ch+Buffer], ebp ; Buf
.text:0040620B                 sub     ecx, ebp
.text:0040620D                 mov     [esp+4Ch+Size], ecx ; MaxCount
.text:00406211                 call    memchr
.text:00406216                 test    eax, eax
.text:00406218                 mov     edx, eax
.text:0040621A                 jz      loc_4062B9
.text:00406220                 lea     ebp, [edx+1]
.text:00406223                 sub     edi, 10h
.text:00406226                 mov     eax, ebp
.text:00406228                 mov     [edi], esi
.text:0040622A                 sub     eax, esi
.text:0040622C                 cmp     eax, [esp+4Ch+var_20]
.text:00406230                 mov     [edi+4], eax
.text:00406233                 jnb     short loc_406239
.text:00406235                 mov     eax, [esp+4Ch+var_20]
.text:00406239
.text:00406239 loc_406239:                             ; CODE XREF: sub_406030+203↑j
.text:00406239                 mov     [esp+4Ch+var_20], eax
.text:0040623D                 mov     ecx, [esp+4Ch+var_1C]
.text:00406241                 sub     [esp+4Ch+var_24], ecx
.text:00406245                 mov     ecx, [esp+4Ch+var_14]
.text:00406249                 test    ecx, ecx
.text:0040624B                 jz      short loc_40627E
.text:0040624D                 mov     eax, [esp+4Ch+var_14]
.text:00406251                 cmp     dword ptr [eax+8], 0FFFFFFFFh
.text:00406255                 jz      short loc_4062B5
.text:00406257                 mov     [esp+4Ch+Src], eax
.text:0040625B                 mov     [esp+4Ch+Buffer], edi
.text:0040625E                 call    sub_408110
.text:00406263
.text:00406263 loc_406263:                             ; CODE XREF: sub_406030+287↓j
.text:00406263                 mov     [edi+0Ch], eax
.text:00406266                 mov     edx, [esp+4Ch+var_14]
.text:0040626A                 cmp     dword ptr [edx], 0FFFFFFFFh
.text:0040626D                 jz      short loc_406285
.text:0040626F                 mov     [esp+4Ch+Src], edx
.text:00406273                 mov     [esp+4Ch+Buffer], edi
.text:00406276                 call    sub_408020
.text:0040627B                 mov     [edi+8], eax
.text:0040627E
.text:0040627E loc_40627E:                             ; CODE XREF: sub_406030+21B↑j
.text:0040627E                                         ; sub_406030+283↓j
.text:0040627E                 mov     esi, ebp
.text:00406280                 jmp     loc_406200
.text:00406285 ; ---------------------------------------------------------------------------
.text:00406285
.text:00406285 loc_406285:                             ; CODE XREF: sub_406030+23D↑j
.text:00406285                 mov     edx, [esp+4Ch+var_14]
.text:00406289                 cmp     byte ptr [edx+18h], 0
.text:0040628D                 jz      short loc_4062B0
.text:0040628F                 movzx   ecx, byte ptr [esi]
.text:00406292                 cmp     ds:byte_418050[ecx], 0
.text:00406299                 jz      short loc_4062B0
.text:0040629B                 nop
.text:0040629C                 lea     esi, [esi+0]
.text:004062A0
.text:004062A0 loc_4062A0:                             ; CODE XREF: sub_406030+27B↓j
.text:004062A0                 inc     esi
.text:004062A1                 movzx   edx, byte ptr [esi]
.text:004062A4                 cmp     ds:byte_418050[edx], 0
.text:004062AB                 jnz     short loc_4062A0
.text:004062AD                 lea     esi, [esi+0]
.text:004062B0
.text:004062B0 loc_4062B0:                             ; CODE XREF: sub_406030+25D↑j
.text:004062B0                                         ; sub_406030+269↑j
.text:004062B0                 mov     [edi+8], esi
.text:004062B3                 jmp     short loc_40627E
.text:004062B5 ; ---------------------------------------------------------------------------
.text:004062B5
.text:004062B5 loc_4062B5:                             ; CODE XREF: sub_406030+225↑j
.text:004062B5                 mov     eax, edx
.text:004062B7                 jmp     short loc_406263
.text:004062B9 ; ---------------------------------------------------------------------------
.text:004062B9
.text:004062B9 loc_4062B9:                             ; CODE XREF: sub_406030+1EA↑j
.text:004062B9                 mov     eax, [esp+4Ch+arg_0]
.text:004062BD                 mov     ebp, [esp+4Ch+var_28]
.text:004062C1                 cmp     byte ptr [eax+18h], 0
.text:004062C5                 jnz     loc_406109
.text:004062CB                 jmp     loc_4060FF
.text:004062D0 ; ---------------------------------------------------------------------------
.text:004062D0
.text:004062D0 loc_4062D0:                             ; CODE XREF: sub_406030+3C↑j
.text:004062D0                                         ; sub_406030+1B2↑j
.text:004062D0                 xor     eax, eax
.text:004062D2                 jmp     loc_40617A
.text:004062D7 ; ---------------------------------------------------------------------------
.text:004062D7
.text:004062D7 loc_4062D7:                             ; CODE XREF: sub_406030+195↑j
.text:004062D7                 mov     [esp+4Ch+Buffer], offset aReadFailed ; "read failed"
.text:004062DE                 call    ds:libintl_gettext
.text:004062E4                 mov     ebx, [esp+4Ch+arg_8]
.text:004062E8                 test    ebx, ebx
.text:004062EA                 mov     esi, eax
.text:004062EC                 jz      short loc_406321
.text:004062EE
.text:004062EE loc_4062EE:                             ; CODE XREF: sub_406030+300↓j
.text:004062EE                 call    _errno
.text:004062F3                 mov     [esp+4Ch+var_3C], ebx
.text:004062F7                 mov     [esp+4Ch+Stream], esi ; char
.text:004062FB                 mov     [esp+4Ch+Size], offset aSS ; "%s: %s"
.text:00406303                 mov     ebp, [eax]
.text:00406305                 mov     [esp+4Ch+Buffer], 0 ; Code
.text:0040630C                 mov     [esp+4Ch+Src], ebp ; ErrorMessage
.text:00406310                 call    sub_40CB60
.text:00406315                 mov     [esp+4Ch+Buffer], 2 ; Code
.text:0040631C                 call    exit
.text:00406321 ; ---------------------------------------------------------------------------
.text:00406321
.text:00406321 loc_406321:                             ; CODE XREF: sub_406030+2BC↑j
.text:00406321                 mov     [esp+4Ch+Buffer], offset aStandardOutput ; "standard output"
.text:00406328                 call    ds:libintl_gettext
.text:0040632E                 mov     ebx, eax
.text:00406330                 jmp     short loc_4062EE
.text:00406332 ; ---------------------------------------------------------------------------
.text:00406332
.text:00406332 loc_406332:                             ; CODE XREF: sub_406030+C2↑j
.text:00406332                 mov     edx, [esp+4Ch+var_24]
.text:00406336                 mov     esi, ebx
.text:00406338                 cmp     [esp+4Ch+var_30], edx
.text:0040633C                 jb      loc_406182
.text:00406342                 jmp     loc_406116
.text:00406342 sub_406030      endp
.text:00406342
.text:00406342 ; ---------------------------------------------------------------------------
.text:00406347                 align 10h
.text:00406350
.text:00406350 ; =============== S U B R O U T I N E =======================================
.text:00406350
.text:00406350
.text:00406350 sub_406350      proc near               ; CODE XREF: sub_403F30+4DB↑p
.text:00406350                                         ; sub_403F30+64F↑p ...
.text:00406350
.text:00406350 var_100C        = dword ptr -100Ch
.text:00406350 var_1008        = dword ptr -1008h
.text:00406350 var_1004        = dword ptr -1004h
.text:00406350 var_1000        = byte ptr -1000h
.text:00406350 var_FF4         = byte ptr -0FF4h
.text:00406350 var_FF0         = dword ptr -0FF0h
.text:00406350 var_FE4         = dword ptr -0FE4h
.text:00406350 var_FE0         = dword ptr -0FE0h
.text:00406350 var_FDC         = dword ptr -0FDCh
.text:00406350 var_FD6         = byte ptr -0FD6h
.text:00406350 var_FD5         = byte ptr -0FD5h
.text:00406350 var_FD4         = dword ptr -0FD4h
.text:00406350 var_FD0         = dword ptr -0FD0h
.text:00406350 var_FCC         = dword ptr -0FCCh
.text:00406350 var_FC8         = dword ptr -0FC8h
.text:00406350 var_FC4         = dword ptr -0FC4h
.text:00406350 var_FC0         = dword ptr -0FC0h
.text:00406350 var_FBC         = byte ptr -0FBCh
.text:00406350 arg_0           = dword ptr  4
.text:00406350 arg_4           = dword ptr  8
.text:00406350
.text:00406350                 push    ebp
.text:00406351                 mov     eax, 0FFCh
.text:00406356                 push    edi
.text:00406357                 push    esi
.text:00406358                 push    ebx             ; Size
.text:00406359                 call    __alloca
.text:0040635E                 mov     ebx, [esp+100Ch+arg_0]
.text:00406365                 mov     ecx, [esp+100Ch+arg_0]
.text:0040636C                 mov     esi, ds:dword_4184D0
.text:00406372                 mov     eax, [ebx+8]
.text:00406375                 mov     edx, [ecx+0Ch]
.text:00406378                 mov     [esp+100Ch+var_FC0], esi
.text:0040637C                 mov     [esp+100Ch+var_FF0], eax
.text:00406380                 mov     eax, [esp+100Ch+arg_4]
.text:00406387                 mov     [esp+100Ch+var_FC4], edx
.text:0040638B                 mov     ebx, [eax+8]
.text:0040638E                 mov     esi, [eax+0Ch]
.text:00406391                 jmp     short loc_4063A0
.text:00406391 ; ---------------------------------------------------------------------------
.text:00406393                 align 10h
.text:004063A0
.text:004063A0 loc_4063A0:                             ; CODE XREF: sub_406350+41↑j
.text:004063A0                                         ; sub_406350+180↓j ...
.text:004063A0                 mov     ecx, [esp+100Ch+var_FC0]
.text:004063A4                 mov     edi, [esp+100Ch+var_FC0]
.text:004063A8                 mov     eax, [esp+100Ch+var_FF0]
.text:004063AC                 mov     ebp, [ecx+10h]
.text:004063AF                 mov     edx, [edi+14h]
.text:004063B2                 xor     ecx, ecx
.text:004063B4                 mov     edi, [esp+100Ch+var_FF0]
.text:004063B8                 mov     [esp+100Ch+var_FD0], ebp
.text:004063BC                 mov     ebp, [esp+100Ch+var_FC4]
.text:004063C0                 mov     [esp+100Ch+var_FCC], edx
.text:004063C4                 sub     ebp, edi
.text:004063C6                 cmp     [esp+100Ch+var_FC4], eax
.text:004063CA                 mov     eax, [esp+100Ch+var_FC0]
.text:004063CE                 setbe   cl
.text:004063D1                 xor     edx, edx
.text:004063D3                 dec     ecx
.text:004063D4                 and     ebp, ecx
.text:004063D6                 mov     [esp+100Ch+var_FD4], ebp
.text:004063DA                 mov     ebp, esi
.text:004063DC                 sub     ebp, ebx
.text:004063DE                 cmp     esi, ebx
.text:004063E0                 setbe   dl
.text:004063E3                 dec     edx
.text:004063E4                 and     ebp, edx
.text:004063E6                 cmp     word ptr [eax+1Ah], 0
.text:004063EB                 jz      loc_4065A0
.text:004063F1                 mov     edi, [esp+100Ch+var_FC4]
.text:004063F5                 movzx   ecx, byte ptr [edi]
.text:004063F8                 mov     [esp+100Ch+var_FD5], cl
.text:004063FC                 movzx   edx, byte ptr [esi]
.text:004063FF                 mov     [esp+100Ch+var_FD6], dl
.text:00406403                 mov     byte ptr [esi], 0
.text:00406406                 mov     ebp, [esp+100Ch+var_FC4]
.text:0040640A                 mov     byte ptr [ebp+0], 0
.text:0040640E                 cmp     byte ptr [eax+1Ah], 0
.text:00406412                 jz      loc_406596
.text:00406418                 mov     eax, offset sub_408210
.text:0040641D
.text:0040641D loc_40641D:                             ; CODE XREF: sub_406350+24B↓j
.text:0040641D                 mov     [esp+100Ch+var_1008], ebx
.text:00406421                 mov     ebp, [esp+100Ch+var_FF0]
.text:00406425                 mov     [esp+100Ch+var_100C], ebp
.text:00406428                 call    eax ; sub_408210
.text:0040642A                 movzx   edx, [esp+100Ch+var_FD5]
.text:0040642F                 mov     [esp+100Ch+var_FC8], eax
.text:00406433                 mov     eax, [esp+100Ch+var_FC4]
.text:00406437                 mov     [eax], dl
.text:00406439                 movzx   ebx, [esp+100Ch+var_FD6]
.text:0040643E                 mov     [esi], bl
.text:00406440
.text:00406440 loc_406440:                             ; CODE XREF: sub_406350+3A5↓j
.text:00406440                                         ; sub_406350+3B7↓j ...
.text:00406440                 mov     ebp, [esp+100Ch+var_FC8]
.text:00406444                 test    ebp, ebp
.text:00406446                 jnz     loc_406584
.text:0040644C
.text:0040644C loc_40644C:                             ; CODE XREF: sub_406350+419↓j
.text:0040644C                 mov     edi, [esp+100Ch+var_FC0]
.text:00406450                 xor     eax, eax
.text:00406452                 mov     edx, [edi+20h]
.text:00406455                 mov     [esp+100Ch+var_FC0], edx
.text:00406459                 test    edx, edx
.text:0040645B                 jz      loc_406579
.text:00406461                 cmp     dword ptr [edx+8], 0FFFFFFFFh
.text:00406465                 jz      loc_406550
.text:0040646B                 mov     [esp+100Ch+var_1008], edx
.text:0040646F                 mov     esi, [esp+100Ch+arg_0]
.text:00406476                 mov     [esp+100Ch+var_100C], esi
.text:00406479                 call    sub_408110
.text:0040647E                 mov     [esp+100Ch+var_FC4], eax
.text:00406482                 mov     edx, [esp+100Ch+arg_4]
.text:00406489                 mov     eax, [esp+100Ch+var_FC0]
.text:0040648D                 mov     [esp+100Ch+var_100C], edx
.text:00406490                 mov     [esp+100Ch+var_1008], eax
.text:00406494                 call    sub_408110
.text:00406499                 mov     esi, eax
.text:0040649B
.text:0040649B loc_40649B:                             ; CODE XREF: sub_406350+224↓j
.text:0040649B                 mov     edi, [esp+100Ch+var_FC0]
.text:0040649F                 cmp     dword ptr [edi], 0FFFFFFFFh
.text:004064A2                 jz      short loc_4064D5
.text:004064A4                 mov     [esp+100Ch+var_1008], edi
.text:004064A8                 mov     edx, [esp+100Ch+arg_0]
.text:004064AF                 mov     [esp+100Ch+var_100C], edx
.text:004064B2                 call    sub_408020
.text:004064B7                 mov     [esp+100Ch+var_FF0], eax
.text:004064BB                 mov     ebx, [esp+100Ch+arg_4]
.text:004064C2                 mov     [esp+100Ch+var_1008], edi
.text:004064C6                 mov     [esp+100Ch+var_100C], ebx
.text:004064C9                 call    sub_408020
.text:004064CE                 mov     ebx, eax
.text:004064D0                 jmp     loc_4063A0
.text:004064D5 ; ---------------------------------------------------------------------------
.text:004064D5
.text:004064D5 loc_4064D5:                             ; CODE XREF: sub_406350+152↑j
.text:004064D5                 mov     ebp, [esp+100Ch+var_FC0]
.text:004064D9                 mov     edi, [esp+100Ch+arg_0]
.text:004064E0                 mov     eax, [esp+100Ch+arg_4]
.text:004064E7                 cmp     byte ptr [ebp+18h], 0
.text:004064EB                 mov     ecx, [edi]
.text:004064ED                 mov     ebx, [eax]
.text:004064EF                 mov     [esp+100Ch+var_FF0], ecx
.text:004064F3                 jz      loc_4063A0
.text:004064F9                 mov     ebp, [esp+100Ch+var_FC4]
.text:004064FD                 cmp     ecx, ebp
.text:004064FF                 jnb     short loc_406530
.text:00406501                 movzx   edx, byte ptr [ecx]
.text:00406504                 cmp     ds:byte_418050[edx], 0
.text:0040650B                 jz      short loc_406530
.text:0040650D                 lea     esi, [esi+0]
.text:00406510
.text:00406510 loc_406510:                             ; CODE XREF: sub_406350+1DD↓j
.text:00406510                 inc     [esp+100Ch+var_FF0]
.text:00406514                 mov     eax, [esp+100Ch+var_FC4]
.text:00406518                 cmp     [esp+100Ch+var_FF0], eax
.text:0040651C                 jnb     short loc_406530
.text:0040651E                 mov     ebp, [esp+100Ch+var_FF0]
.text:00406522                 movzx   ecx, byte ptr [ebp+0]
.text:00406526                 cmp     ds:byte_418050[ecx], 0
.text:0040652D                 jnz     short loc_406510
.text:0040652F                 nop
.text:00406530
.text:00406530 loc_406530:                             ; CODE XREF: sub_406350+1AF↑j
.text:00406530                                         ; sub_406350+1BB↑j ...
.text:00406530                 cmp     ebx, esi
.text:00406532                 jnb     loc_4063A0
.text:00406538                 movzx   edi, byte ptr [ebx]
.text:0040653B                 cmp     ds:byte_418050[edi], 0
.text:00406542                 jz      loc_4063A0
.text:00406548                 inc     ebx
.text:00406549                 jmp     short loc_406530
.text:00406549 ; ---------------------------------------------------------------------------
.text:0040654B                 align 10h
.text:00406550
.text:00406550 loc_406550:                             ; CODE XREF: sub_406350+115↑j
.text:00406550                 mov     ecx, [esp+100Ch+arg_0]
.text:00406557                 mov     edi, [esp+100Ch+arg_4]
.text:0040655E                 mov     esi, [ecx+4]
.text:00406561                 mov     eax, [ecx]
.text:00406563                 mov     ebx, [edi+4]
.text:00406566                 mov     ebp, [edi]
.text:00406568                 add     esi, eax
.text:0040656A                 dec     esi
.text:0040656B                 add     ebx, ebp
.text:0040656D                 mov     [esp+100Ch+var_FC4], esi
.text:00406571                 lea     esi, [ebx-1]
.text:00406574                 jmp     loc_40649B
.text:00406579 ; ---------------------------------------------------------------------------
.text:00406579
.text:00406579 loc_406579:                             ; CODE XREF: sub_406350+10B↑j
.text:00406579                                         ; sub_406350+240↓j ...
.text:00406579                 add     esp, 0FFCh
.text:0040657F                 pop     ebx
.text:00406580                 pop     esi
.text:00406581                 pop     edi
.text:00406582                 pop     ebp
.text:00406583                 retn
.text:00406584 ; ---------------------------------------------------------------------------
.text:00406584
.text:00406584 loc_406584:                             ; CODE XREF: sub_406350+F6↑j
.text:00406584                                         ; sub_406350+412↓j ...
.text:00406584                 mov     esi, [esp+100Ch+var_FC0]
.text:00406588                 mov     eax, [esp+100Ch+var_FC8]
.text:0040658C                 cmp     byte ptr [esi+1Dh], 0
.text:00406590                 jz      short loc_406579
.text:00406592                 neg     eax
.text:00406594                 jmp     short loc_406579
.text:00406596 ; ---------------------------------------------------------------------------
.text:00406596
.text:00406596 loc_406596:                             ; CODE XREF: sub_406350+C2↑j
.text:00406596                 mov     eax, offset sub_408590
.text:0040659B                 jmp     loc_40641D
.text:004065A0 ; ---------------------------------------------------------------------------
.text:004065A0
.text:004065A0 loc_4065A0:                             ; CODE XREF: sub_406350+9B↑j
.text:004065A0                 mov     ecx, [esp+100Ch+var_FC0]
.text:004065A4                 cmp     byte ptr [ecx+1Ch], 0
.text:004065A8                 jnz     loc_406950
.text:004065AE                 cmp     ds:byte_418040, 0
.text:004065B5                 jz      loc_406780
.text:004065BB                 mov     edx, [esp+100Ch+var_FD0]
.text:004065BF                 test    edx, edx
.text:004065C1                 jz      loc_40671D
.text:004065C7
.text:004065C7 loc_4065C7:                             ; CODE XREF: sub_406350+3D3↓j
.text:004065C7                 mov     edi, [esp+100Ch+var_FD4]
.text:004065CB                 lea     esi, [ebp+edi+2]
.text:004065CF                 cmp     esi, 0FA0h
.text:004065D5                 mov     [esp+100Ch+var_FDC], esi
.text:004065D9                 ja      loc_40670C
.text:004065DF                 lea     eax, [esp+100Ch+var_FBC]
.text:004065E3
.text:004065E3 loc_4065E3:                             ; CODE XREF: sub_406350+3C8↓j
.text:004065E3                 mov     [esp+100Ch+var_FE0], eax
.text:004065E7                 mov     dword ptr [esp+100Ch+var_FF4], 0
.text:004065EF                 mov     esi, [esp+100Ch+var_FE0]
.text:004065F3                 xor     edx, edx
.text:004065F5                 mov     edi, [esp+100Ch+var_FD4]
.text:004065F9                 lea     ecx, [edi+esi+1]
.text:004065FD                 xor     esi, esi
.text:004065FF                 mov     [esp+100Ch+var_FE4], ecx
.text:00406603                 lea     esi, [esi+0]
.text:00406609                 lea     edi, [edi+0]
.text:00406610
.text:00406610 loc_406610:                             ; CODE XREF: sub_406350+361↓j
.text:00406610                 cmp     ebp, [esp+100Ch+var_FD4]
.text:00406614                 mov     eax, ebp
.text:00406616                 jnb     short loc_40661C
.text:00406618                 mov     eax, [esp+100Ch+var_FD4]
.text:0040661C
.text:0040661C loc_40661C:                             ; CODE XREF: sub_406350+2C6↑j
.text:0040661C                 cmp     edx, eax
.text:0040661E                 jnb     loc_4066C9
.text:00406624                 cmp     edx, [esp+100Ch+var_FD4]
.text:00406628                 jnb     short loc_406670
.text:0040662A                 mov     eax, [esp+100Ch+var_FCC]
.text:0040662E                 test    eax, eax
.text:00406630                 jz      loc_4066BC
.text:00406636                 mov     edi, [esp+100Ch+var_FF0]
.text:0040663A                 mov     ecx, [esp+100Ch+var_FCC]
.text:0040663E                 movzx   eax, byte ptr [edx+edi]
.text:00406642                 movzx   eax, byte ptr [eax+ecx]
.text:00406646
.text:00406646 loc_406646:                             ; CODE XREF: sub_406350+374↓j
.text:00406646                 mov     ecx, [esp+100Ch+var_FE0]
.text:0040664A                 mov     [esi+ecx], al
.text:0040664D                 mov     eax, [esp+100Ch+var_FD0]
.text:00406651                 test    eax, eax
.text:00406653                 jz      short loc_406667
.text:00406655                 mov     edi, [esp+100Ch+var_FF0]
.text:00406659                 mov     ecx, [esp+100Ch+var_FD0]
.text:0040665D                 movzx   eax, byte ptr [edx+edi]
.text:00406661                 cmp     byte ptr [eax+ecx], 0
.text:00406665                 jnz     short loc_406670
.text:00406667
.text:00406667 loc_406667:                             ; CODE XREF: sub_406350+303↑j
.text:00406667                 inc     esi
.text:00406668                 nop
.text:00406669                 lea     esi, [esi+0]
.text:00406670
.text:00406670 loc_406670:                             ; CODE XREF: sub_406350+2D8↑j
.text:00406670                                         ; sub_406350+315↑j
.text:00406670                 cmp     edx, ebp
.text:00406672                 jnb     short loc_4066B0
.text:00406674                 mov     ecx, [esp+100Ch+var_FCC]
.text:00406678                 test    ecx, ecx
.text:0040667A                 jz      short loc_4066B6
.text:0040667C                 movzx   edi, byte ptr [edx+ebx]
.text:00406680                 mov     ecx, [esp+100Ch+var_FCC]
.text:00406684                 movzx   eax, byte ptr [edi+ecx]
.text:00406688
.text:00406688 loc_406688:                             ; CODE XREF: sub_406350+36A↓j
.text:00406688                 mov     ecx, dword ptr [esp+100Ch+var_FF4]
.text:0040668C                 mov     edi, [esp+100Ch+var_FE4]
.text:00406690                 mov     [ecx+edi], al
.text:00406693                 mov     ecx, [esp+100Ch+var_FD0]
.text:00406697                 test    ecx, ecx
.text:00406699                 jz      short loc_4066A9
.text:0040669B                 movzx   ecx, byte ptr [edx+ebx]
.text:0040669F                 mov     eax, [esp+100Ch+var_FD0]
.text:004066A3                 cmp     byte ptr [ecx+eax], 0
.text:004066A7                 jnz     short loc_4066B0
.text:004066A9
.text:004066A9 loc_4066A9:                             ; CODE XREF: sub_406350+349↑j
.text:004066A9                 inc     dword ptr [esp+100Ch+var_FF4]
.text:004066AD                 lea     esi, [esi+0]
.text:004066B0
.text:004066B0 loc_4066B0:                             ; CODE XREF: sub_406350+322↑j
.text:004066B0                                         ; sub_406350+357↑j
.text:004066B0                 inc     edx
.text:004066B1                 jmp     loc_406610
.text:004066B6 ; ---------------------------------------------------------------------------
.text:004066B6
.text:004066B6 loc_4066B6:                             ; CODE XREF: sub_406350+32A↑j
.text:004066B6                 movzx   eax, byte ptr [edx+ebx]
.text:004066BA                 jmp     short loc_406688
.text:004066BC ; ---------------------------------------------------------------------------
.text:004066BC
.text:004066BC loc_4066BC:                             ; CODE XREF: sub_406350+2E0↑j
.text:004066BC                 mov     edi, [esp+100Ch+var_FF0]
.text:004066C0                 movzx   eax, byte ptr [edx+edi]
.text:004066C4                 jmp     loc_406646
.text:004066C9 ; ---------------------------------------------------------------------------
.text:004066C9
.text:004066C9 loc_4066C9:                             ; CODE XREF: sub_406350+2CE↑j
.text:004066C9                 mov     [esp+100Ch+var_1008], esi ; int
.text:004066CD                 mov     edx, dword ptr [esp+100Ch+var_FF4]
.text:004066D1                 mov     ebp, [esp+100Ch+var_FE4]
.text:004066D5                 mov     ebx, [esp+100Ch+var_FE0]
.text:004066D9                 mov     dword ptr [esp+100Ch+var_1000], edx ; char
.text:004066DD                 mov     [esp+100Ch+var_1004], ebp ; char *
.text:004066E1                 mov     [esp+100Ch+var_100C], ebx ; char *
.text:004066E4                 call    sub_40A510
.text:004066E9                 cmp     [esp+100Ch+var_FDC], 0FA0h
.text:004066F1                 mov     [esp+100Ch+var_FC8], eax
.text:004066F5                 jbe     loc_406440
.text:004066FB                 mov     esi, [esp+100Ch+var_FE0]
.text:004066FF                 mov     [esp+100Ch+var_100C], esi ; Block
.text:00406702                 call    free
.text:00406707                 jmp     loc_406440
.text:0040670C ; ---------------------------------------------------------------------------
.text:0040670C
.text:0040670C loc_40670C:                             ; CODE XREF: sub_406350+289↑j
.text:0040670C                 mov     edx, [esp+100Ch+var_FDC]
.text:00406710                 mov     [esp+100Ch+var_100C], edx ; size_t
.text:00406713                 call    sub_40A180
.text:00406718                 jmp     loc_4065E3
.text:0040671D ; ---------------------------------------------------------------------------
.text:0040671D
.text:0040671D loc_40671D:                             ; CODE XREF: sub_406350+271↑j
.text:0040671D                 mov     ecx, [esp+100Ch+var_FCC]
.text:00406721                 test    ecx, ecx
.text:00406723                 jnz     loc_4065C7
.text:00406729                 mov     edi, [esp+100Ch+var_FD4]
.text:0040672D                 test    edi, edi
.text:0040672F                 jz      short loc_406767
.text:00406731                 test    ebp, ebp
.text:00406733                 jz      short loc_40675A
.text:00406735                 mov     [esp+100Ch+var_1004], ebx ; char *
.text:00406739                 mov     ecx, [esp+100Ch+var_FF0]
.text:0040673D                 mov     ebx, [esp+100Ch+var_FD4]
.text:00406741                 mov     dword ptr [esp+100Ch+var_1000], ebp ; char
.text:00406745                 mov     [esp+100Ch+var_100C], ecx ; char *
.text:00406748                 mov     [esp+100Ch+var_1008], ebx ; int
.text:0040674C                 call    sub_40A510
.text:00406751
.text:00406751 loc_406751:                             ; CODE XREF: sub_406350+4D8↓j
.text:00406751                                         ; sub_406350+5C7↓j
.text:00406751                 mov     [esp+100Ch+var_FC8], eax
.text:00406755                 jmp     loc_406440
.text:0040675A ; ---------------------------------------------------------------------------
.text:0040675A
.text:0040675A loc_40675A:                             ; CODE XREF: sub_406350+3E3↑j
.text:0040675A                                         ; sub_406350+554↓j
.text:0040675A                 mov     [esp+100Ch+var_FC8], 1
.text:00406762                 jmp     loc_406584
.text:00406767 ; ---------------------------------------------------------------------------
.text:00406767
.text:00406767 loc_406767:                             ; CODE XREF: sub_406350+3DF↑j
.text:00406767                                         ; sub_406350+54C↓j
.text:00406767                 test    ebp, ebp
.text:00406769                 jz      loc_40644C
.text:0040676F                 mov     [esp+100Ch+var_FC8], 0FFFFFFFFh
.text:00406777                 jmp     loc_406584
.text:00406777 ; ---------------------------------------------------------------------------
.text:0040677C                 align 10h
.text:00406780
.text:00406780 loc_406780:                             ; CODE XREF: sub_406350+265↑j
.text:00406780                 mov     edx, [esp+100Ch+var_FD0]
.text:00406784                 test    edx, edx
.text:00406786                 jz      loc_406896
.text:0040678C                 mov     ebp, [esp+100Ch+var_FCC]
.text:00406790                 test    ebp, ebp
.text:00406792                 jz      loc_406830
.text:00406798
.text:00406798 loc_406798:                             ; CODE XREF: sub_406350+467↓j
.text:00406798                                         ; sub_406350+4BC↓j
.text:00406798                 mov     eax, [esp+100Ch+var_FC4]
.text:0040679C                 cmp     [esp+100Ch+var_FF0], eax
.text:004067A0                 jnb     short loc_4067C0
.text:004067A2                 mov     edx, [esp+100Ch+var_FF0]
.text:004067A6                 mov     edi, [esp+100Ch+var_FD0]
.text:004067AA                 movzx   ecx, byte ptr [edx]
.text:004067AD                 cmp     byte ptr [ecx+edi], 0
.text:004067B1                 jz      short loc_4067C0
.text:004067B3                 inc     [esp+100Ch+var_FF0]
.text:004067B7                 jmp     short loc_406798
.text:004067B7 ; ---------------------------------------------------------------------------
.text:004067B9                 align 10h
.text:004067C0
.text:004067C0 loc_4067C0:                             ; CODE XREF: sub_406350+450↑j
.text:004067C0                                         ; sub_406350+461↑j ...
.text:004067C0                 cmp     ebx, esi
.text:004067C2                 jnb     short loc_4067D5
.text:004067C4                 movzx   ebp, byte ptr [ebx]
.text:004067C7                 mov     eax, [esp+100Ch+var_FD0]
.text:004067CB                 cmp     byte ptr [ebp+eax+0], 0
.text:004067D0                 jz      short loc_4067D5
.text:004067D2                 inc     ebx
.text:004067D3                 jmp     short loc_4067C0
.text:004067D5 ; ---------------------------------------------------------------------------
.text:004067D5
.text:004067D5 loc_4067D5:                             ; CODE XREF: sub_406350+472↑j
.text:004067D5                                         ; sub_406350+480↑j
.text:004067D5                 mov     ecx, [esp+100Ch+var_FC4]
.text:004067D9                 cmp     [esp+100Ch+var_FF0], ecx
.text:004067DD                 jnb     short loc_40680E
.text:004067DF                 cmp     ebx, esi
.text:004067E1                 jnb     short loc_40680E
.text:004067E3                 mov     eax, [esp+100Ch+var_FF0]
.text:004067E7                 mov     ecx, [esp+100Ch+var_FCC]
.text:004067EB                 movzx   ebp, byte ptr [eax]
.text:004067EE                 movzx   edi, byte ptr [ebp+ecx+0]
.text:004067F3                 movzx   ebp, byte ptr [ebx]
.text:004067F6                 movzx   edx, byte ptr [ebp+ecx+0]
.text:004067FB                 sub     edi, edx
.text:004067FD                 mov     [esp+100Ch+var_FC8], edi
.text:00406801                 jnz     loc_406584
.text:00406807                 inc     [esp+100Ch+var_FF0]
.text:0040680B                 inc     ebx
.text:0040680C                 jmp     short loc_406798
.text:0040680E ; ---------------------------------------------------------------------------
.text:0040680E
.text:0040680E loc_40680E:                             ; CODE XREF: sub_406350+48D↑j
.text:0040680E                                         ; sub_406350+491↑j ...
.text:0040680E                 mov     ecx, [esp+100Ch+var_FC4]
.text:00406812                 xor     eax, eax
.text:00406814                 cmp     [esp+100Ch+var_FF0], ecx
.text:00406818                 setb    al
.text:0040681B                 cmp     ebx, esi
.text:0040681D                 mov     [esp+100Ch+var_FC8], eax
.text:00406821                 jnb     loc_406440
.text:00406827                 dec     eax
.text:00406828                 jmp     loc_406751
.text:00406828 ; ---------------------------------------------------------------------------
.text:0040682D                 align 10h
.text:00406830
.text:00406830 loc_406830:                             ; CODE XREF: sub_406350+442↑j
.text:00406830                                         ; sub_406350+53E↓j ...
.text:00406830                 mov     ecx, [esp+100Ch+var_FC4]
.text:00406834                 cmp     [esp+100Ch+var_FF0], ecx
.text:00406838                 jnb     short loc_406850
.text:0040683A                 mov     ebp, [esp+100Ch+var_FF0]
.text:0040683E                 mov     edx, [esp+100Ch+var_FD0]
.text:00406842                 movzx   edi, byte ptr [ebp+0]
.text:00406846                 cmp     byte ptr [edi+edx], 0
.text:0040684A                 jnz     short loc_406890
.text:0040684C                 lea     esi, [esi+0]
.text:00406850
.text:00406850 loc_406850:                             ; CODE XREF: sub_406350+4E8↑j
.text:00406850                                         ; sub_406350+512↓j
.text:00406850                 cmp     ebx, esi
.text:00406852                 jnb     short loc_406864
.text:00406854                 movzx   ecx, byte ptr [ebx]
.text:00406857                 mov     eax, [esp+100Ch+var_FD0]
.text:0040685B                 cmp     byte ptr [ecx+eax], 0
.text:0040685F                 jz      short loc_406864
.text:00406861                 inc     ebx
.text:00406862                 jmp     short loc_406850
.text:00406864 ; ---------------------------------------------------------------------------
.text:00406864
.text:00406864 loc_406864:                             ; CODE XREF: sub_406350+502↑j
.text:00406864                                         ; sub_406350+50F↑j
.text:00406864                 mov     edi, [esp+100Ch+var_FC4]
.text:00406868                 cmp     [esp+100Ch+var_FF0], edi
.text:0040686C                 jnb     short loc_40680E
.text:0040686E                 cmp     ebx, esi
.text:00406870                 jnb     short loc_40680E
.text:00406872                 movzx   edx, byte ptr [ebx]
.text:00406875                 mov     ecx, [esp+100Ch+var_FF0]
.text:00406879                 movzx   ebp, byte ptr [ecx]
.text:0040687C                 sub     ebp, edx
.text:0040687E                 mov     [esp+100Ch+var_FC8], ebp
.text:00406882                 jnz     loc_406584
.text:00406888                 inc     ecx
.text:00406889                 inc     ebx
.text:0040688A                 mov     [esp+100Ch+var_FF0], ecx
.text:0040688E                 jmp     short loc_406830
.text:00406890 ; ---------------------------------------------------------------------------
.text:00406890
.text:00406890 loc_406890:                             ; CODE XREF: sub_406350+4FA↑j
.text:00406890                 inc     [esp+100Ch+var_FF0]
.text:00406894                 jmp     short loc_406830
.text:00406896 ; ---------------------------------------------------------------------------
.text:00406896
.text:00406896 loc_406896:                             ; CODE XREF: sub_406350+436↑j
.text:00406896                 mov     edi, [esp+100Ch+var_FD4]
.text:0040689A                 test    edi, edi
.text:0040689C                 jz      loc_406767
.text:004068A2                 test    ebp, ebp
.text:004068A4                 jz      loc_40675A
.text:004068AA                 mov     eax, [esp+100Ch+var_FCC]
.text:004068AE                 test    eax, eax
.text:004068B0                 jz      short loc_40691C
.text:004068B2                 mov     edx, [esp+100Ch+var_FC4]
.text:004068B6                 cmp     [esp+100Ch+var_FF0], edx
.text:004068BA                 jnb     short loc_4068FC
.text:004068BC                 cmp     ebx, esi
.text:004068BE                 jnb     short loc_4068FC
.text:004068C0
.text:004068C0 loc_4068C0:                             ; CODE XREF: sub_406350+5AA↓j
.text:004068C0                 mov     eax, [esp+100Ch+var_FF0]
.text:004068C4                 movzx   ecx, byte ptr [eax]
.text:004068C7                 inc     eax
.text:004068C8                 mov     [esp+100Ch+var_FF0], eax
.text:004068CC                 movzx   edx, cl
.text:004068CF                 mov     ecx, [esp+100Ch+var_FCC]
.text:004068D3                 movzx   edi, byte ptr [edx+ecx]
.text:004068D7                 movzx   edx, byte ptr [ebx]
.text:004068DA                 inc     ebx
.text:004068DB                 movzx   eax, dl
.text:004068DE                 movzx   edx, byte ptr [eax+ecx]
.text:004068E2                 sub     edi, edx
.text:004068E4                 mov     [esp+100Ch+var_FC8], edi
.text:004068E8                 jnz     loc_406584
.text:004068EE                 mov     edx, [esp+100Ch+var_FC4]
.text:004068F2                 cmp     [esp+100Ch+var_FF0], edx
.text:004068F6                 jnb     short loc_4068FC
.text:004068F8                 cmp     ebx, esi
.text:004068FA                 jb      short loc_4068C0
.text:004068FC
.text:004068FC loc_4068FC:                             ; CODE XREF: sub_406350+56A↑j
.text:004068FC                                         ; sub_406350+56E↑j ...
.text:004068FC                 cmp     [esp+100Ch+var_FD4], ebp
.text:00406900                 mov     [esp+100Ch+var_FC8], 0FFFFFFFFh
.text:00406908                 jb      loc_406440
.text:0040690E                 xor     eax, eax
.text:00406910                 cmp     [esp+100Ch+var_FD4], ebp
.text:00406914                 setnz   al
.text:00406917                 jmp     loc_406751
.text:0040691C ; ---------------------------------------------------------------------------
.text:0040691C
.text:0040691C loc_40691C:                             ; CODE XREF: sub_406350+560↑j
.text:0040691C                 cmp     ebp, [esp+100Ch+var_FD4]
.text:00406920                 mov     eax, ebp
.text:00406922                 jbe     short loc_406928
.text:00406924                 mov     eax, [esp+100Ch+var_FD4]
.text:00406928
.text:00406928 loc_406928:                             ; CODE XREF: sub_406350+5D2↑j
.text:00406928                 cld
.text:00406929                 mov     esi, [esp+100Ch+var_FF0]
.text:0040692D                 mov     edi, ebx
.text:0040692F                 mov     ecx, eax
.text:00406931                 cmp     eax, eax
.text:00406933                 repe cmpsb
.text:00406935                 setnbe  bl
.text:00406938                 setb    cl
.text:0040693B                 sub     bl, cl
.text:0040693D                 movsx   esi, bl
.text:00406940                 mov     [esp+100Ch+var_FC8], esi
.text:00406944                 test    esi, esi
.text:00406946                 jz      short loc_4068FC
.text:00406948                 jmp     loc_406584
.text:00406948 ; ---------------------------------------------------------------------------
.text:0040694D                 align 10h
.text:00406950
.text:00406950 loc_406950:                             ; CODE XREF: sub_406350+258↑j
.text:00406950                 mov     edi, [esp+100Ch+var_FD4]
.text:00406954                 mov     esi, [esp+100Ch+var_FF0]
.text:00406958                 mov     [esp+100Ch+var_1008], edi
.text:0040695C                 mov     [esp+100Ch+var_100C], esi
.text:0040695F                 call    sub_4086A0
.text:00406964                 mov     [esp+100Ch+var_FC8], eax
.text:00406968                 mov     [esp+100Ch+var_1008], ebp
.text:0040696C                 mov     [esp+100Ch+var_100C], ebx
.text:0040696F                 call    sub_4086A0
.text:00406974                 sub     [esp+100Ch+var_FC8], eax
.text:00406978                 jmp     loc_406440
.text:00406978 sub_406350      endp
.text:00406978
.text:00406978 ; ---------------------------------------------------------------------------
.text:0040697D aWarningCannotR db 'warning: cannot remove: %s',0
.text:0040697D                                         ; DATA XREF: sub_4069A0:loc_4070AC↓o
.text:0040697D                                         ; sub_4069A0:loc_407686↓o
.text:00406998                 align 10h
.text:004069A0
.text:004069A0 ; =============== S U B R O U T I N E =======================================
.text:004069A0
.text:004069A0
.text:004069A0 ; int __cdecl sub_4069A0(int, int, int, FILE *, char *)
.text:004069A0 sub_4069A0      proc near               ; CODE XREF: sub_404600+15D↑p
.text:004069A0                                         ; sub_404600+213↑p ...
.text:004069A0
.text:004069A0 Size            = dword ptr -34Ch
.text:004069A0 Src             = dword ptr -348h
.text:004069A0 ElementCount    = dword ptr -344h
.text:004069A0 var_340         = dword ptr -340h
.text:004069A0 var_33C         = dword ptr -33Ch
.text:004069A0 var_320         = dword ptr -320h
.text:004069A0 var_31C         = dword ptr -31Ch
.text:004069A0 ErrorMessage    = dword ptr -318h
.text:004069A0 var_314         = dword ptr -314h
.text:004069A0 var_310         = dword ptr -310h
.text:004069A0 var_30C         = dword ptr -30Ch
.text:004069A0 var_308         = dword ptr -308h
.text:004069A0 var_304         = dword ptr -304h
.text:004069A0 var_300         = dword ptr -300h
.text:004069A0 var_2FC         = dword ptr -2FCh
.text:004069A0 var_2F8         = dword ptr -2F8h
.text:004069A0 var_2F4         = dword ptr -2F4h
.text:004069A0 var_2F0         = dword ptr -2F0h
.text:004069A0 var_2EC         = dword ptr -2ECh
.text:004069A0 var_2E8         = dword ptr -2E8h
.text:004069A0 var_2AC         = dword ptr -2ACh
.text:004069A0 var_2A8         = dword ptr -2A8h
.text:004069A0 var_26C         = dword ptr -26Ch
.text:004069A0 var_268         = dword ptr -268h
.text:004069A0 Buffer          = dword ptr -22Ch
.text:004069A0 var_228         = dword ptr -228h
.text:004069A0 var_224         = dword ptr -224h
.text:004069A0 var_220         = dword ptr -220h
.text:004069A0 Block           = dword ptr -21Ch
.text:004069A0 var_214         = dword ptr -214h
.text:004069A0 Stream          = dword ptr -5Ch
.text:004069A0 var_58          = dword ptr -58h
.text:004069A0 var_1C          = byte ptr -1Ch
.text:004069A0 arg_0           = dword ptr  4
.text:004069A0 arg_4           = dword ptr  8
.text:004069A0 arg_8           = dword ptr  0Ch
.text:004069A0 arg_C           = dword ptr  10h
.text:004069A0 arg_10          = dword ptr  14h
.text:004069A0
.text:004069A0                 push    ebp
.text:004069A1                 xor     edx, edx
.text:004069A3                 push    edi
.text:004069A4                 push    esi
.text:004069A5                 push    ebx
.text:004069A6                 sub     esp, 33Ch
.text:004069AC                 mov     eax, [esp+34Ch+arg_8]
.text:004069B3                 mov     [esp+34Ch+var_2F0], 0
.text:004069BB                 mov     ecx, ds:dword_4184D0
.text:004069C1                 cmp     [esp+34Ch+var_2F0], eax
.text:004069C5                 mov     [esp+34Ch+var_2F4], 0
.text:004069CD                 mov     [esp+34Ch+var_2FC], ecx
.text:004069D1                 mov     [esp+34Ch+Buffer], edx
.text:004069D8                 mov     [esp+34Ch+var_2F8], 0
.text:004069E0                 jnb     loc_406B34
.text:004069E6                 mov     [esp+34Ch+var_320], 0
.text:004069EE
.text:004069EE loc_4069EE:                             ; CODE XREF: sub_4069A0+18E↓j
.text:004069EE                 mov     eax, [esp+34Ch+var_2F8]
.text:004069F2                 mov     esi, [esp+34Ch+arg_0]
.text:004069F9                 mov     ebx, [esi+eax*4]
.text:004069FC                 test    ebx, ebx
.text:004069FE                 jz      loc_407771
.text:00406A04                 cld
.text:00406A05                 mov     edi, offset asc_401530 ; "-"
.text:00406A0A                 mov     ecx, 2
.text:00406A0F                 mov     esi, ebx
.text:00406A11                 repe cmpsb
.text:00406A13                 jnz     short loc_406A22
.text:00406A15                 cmp     ds:byte_403EDA, 72h ; 'r'
.text:00406A1C                 jz      loc_407760
.text:00406A22
.text:00406A22 loc_406A22:                             ; CODE XREF: sub_4069A0+73↑j
.text:00406A22                 mov     [esp+34Ch+Src], offset byte_403EDA ; Format
.text:00406A2A                 mov     [esp+34Ch+Size], ebx ; char *
.text:00406A2D                 call    sub_40B5D0
.text:00406A32                 test    eax, eax
.text:00406A34                 jz      loc_407727
.text:00406A3A
.text:00406A3A loc_406A3A:                             ; CODE XREF: sub_4069A0+DCC↓j
.text:00406A3A                                         ; sub_4069A0+DD9↓j
.text:00406A3A                 mov     edi, [esp+34Ch+var_2F8]
.text:00406A3E                 xor     edx, edx
.text:00406A40                 mov     ebx, [esp+34Ch+var_320]
.text:00406A44                 mov     [esp+edi*4+34Ch+Stream], eax
.text:00406A4B                 mov     eax, ds:dword_418450
.text:00406A50                 lea     edi, [esp+34Ch+Block]
.text:00406A57                 div     [esp+34Ch+arg_8]
.text:00406A5E                 lea     esi, [ebx+edi]
.text:00406A61                 mov     ebx, eax
.text:00406A63                 mov     eax, dword_417090
.text:00406A68                 cmp     ebx, eax
.text:00406A6A                 jnb     short loc_406A70
.text:00406A6C                 mov     ebx, eax
.text:00406A6E                 mov     esi, esi
.text:00406A70
.text:00406A70 loc_406A70:                             ; CODE XREF: sub_4069A0+CA↑j
.text:00406A70                                         ; sub_4069A0+ED↓j
.text:00406A70                 mov     edx, ebx
.text:00406A72                 and     edx, 0Fh
.text:00406A75                 sub     ebx, edx
.text:00406A77                 lea     ebx, [ebx+10h]
.text:00406A7A                 mov     [esp+34Ch+Size], ebx ; Size
.text:00406A7D                 call    malloc
.text:00406A82                 mov     [esi], eax
.text:00406A84                 test    eax, eax
.text:00406A86                 jnz     short loc_406A94
.text:00406A88                 shr     ebx, 1
.text:00406A8A                 cmp     ebx, 11h
.text:00406A8D                 ja      short loc_406A70
.text:00406A8F                 jmp     loc_40777E
.text:00406A94 ; ---------------------------------------------------------------------------
.text:00406A94
.text:00406A94 loc_406A94:                             ; CODE XREF: sub_4069A0+E6↑j
.text:00406A94                 mov     [esi+0Ch], ebx
.text:00406A97                 mov     ebp, [esp+34Ch+var_2F8]
.text:00406A9B                 mov     eax, [esp+34Ch+arg_0]
.text:00406AA2                 mov     dword ptr [esi+14h], 10h
.text:00406AA9                 mov     dword ptr [esi+8], 0
.text:00406AB0                 mov     ebx, [eax+ebp*4]
.text:00406AB3                 mov     dword ptr [esi+10h], 0
.text:00406ABA                 mov     dword ptr [esi+4], 0
.text:00406AC1                 mov     byte ptr [esi+18h], 0
.text:00406AC5                 mov     esi, [esp+34Ch+var_320]
.text:00406AC9                 mov     [esp+34Ch+ElementCount], ebx ; int
.text:00406ACD                 mov     ecx, [esp+ebp*4+34Ch+Stream]
.text:00406AD4                 lea     ebx, [esi+edi]
.text:00406AD7                 mov     [esp+34Ch+Size], ebx ; int
.text:00406ADA                 mov     [esp+34Ch+Src], ecx ; FILE *
.text:00406ADE                 call    sub_406030
.text:00406AE3                 test    al, al
.text:00406AE5                 jz      loc_407580
.text:00406AEB                 mov     edi, [ebx]
.text:00406AED                 mov     ecx, [ebx+0Ch]
.text:00406AF0                 mov     esi, [esp+34Ch+var_2F8]
.text:00406AF4                 add     ecx, edi
.text:00406AF6                 mov     edi, [esp+34Ch+var_320]
.text:00406AFA                 lea     ebp, [ecx-10h]
.text:00406AFD                 mov     [esp+esi*4+34Ch+var_26C], ebp
.text:00406B04                 mov     edx, [esp+edi+34Ch+var_214]
.text:00406B0B                 add     edi, 1Ch
.text:00406B0E                 mov     [esp+34Ch+var_320], edi
.text:00406B12                 shl     edx, 4
.text:00406B15                 sub     ecx, edx
.text:00406B17                 mov     [esp+esi*4+34Ch+var_2AC], ecx
.text:00406B1E                 inc     esi
.text:00406B1F                 mov     [esp+34Ch+var_2F8], esi
.text:00406B23
.text:00406B23 loc_406B23:                             ; CODE XREF: sub_4069A0+CD9↓j
.text:00406B23                 mov     eax, [esp+34Ch+arg_8]
.text:00406B2A                 cmp     [esp+34Ch+var_2F8], eax
.text:00406B2E                 jb      loc_4069EE
.text:00406B34
.text:00406B34 loc_406B34:                             ; CODE XREF: sub_4069A0+40↑j
.text:00406B34                                         ; sub_4069A0+CBB↓j
.text:00406B34                 mov     ebx, [esp+34Ch+arg_C]
.text:00406B3B                 test    ebx, ebx
.text:00406B3D                 jz      loc_40750B
.text:00406B43
.text:00406B43 loc_406B43:                             ; CODE XREF: sub_4069A0+BB7↓j
.text:00406B43                 mov     [esp+34Ch+var_2F8], 0
.text:00406B4B                 mov     edi, [esp+34Ch+arg_8]
.text:00406B52                 cmp     [esp+34Ch+var_2F8], edi
.text:00406B56                 jnb     short loc_406B70
.text:00406B58
.text:00406B58 loc_406B58:                             ; CODE XREF: sub_4069A0+1CE↓j
.text:00406B58                 mov     eax, [esp+34Ch+var_2F8]
.text:00406B5C                 mov     [esp+eax*4+34Ch+var_2EC], eax
.text:00406B60                 mov     edx, [esp+34Ch+arg_8]
.text:00406B67                 inc     eax
.text:00406B68                 mov     [esp+34Ch+var_2F8], eax
.text:00406B6C                 cmp     eax, edx
.text:00406B6E                 jb      short loc_406B58
.text:00406B70
.text:00406B70 loc_406B70:                             ; CODE XREF: sub_4069A0+1B6↑j
.text:00406B70                 mov     [esp+34Ch+var_2F8], 1
.text:00406B78                 mov     ecx, [esp+34Ch+arg_8]
.text:00406B7F                 cmp     [esp+34Ch+var_2F8], ecx
.text:00406B83                 jnb     short loc_406C00
.text:00406B85
.text:00406B85 loc_406B85:                             ; CODE XREF: sub_4069A0+25D↓j
.text:00406B85                 mov     edi, [esp+34Ch+var_2F8]
.text:00406B89                 mov     ebx, ds:dword_4184D0
.text:00406B8F                 mov     edx, [esp+edi*4+34Ch+var_2F0]
.text:00406B93                 mov     ebp, [esp+edi*4+34Ch+var_2EC]
.text:00406B97                 test    ebx, ebx
.text:00406B99                 mov     esi, [esp+edx*4+34Ch+var_26C]
.text:00406BA0                 mov     edi, [esp+ebp*4+34Ch+var_26C]
.text:00406BA7                 jnz     loc_4074E0
.text:00406BAD
.text:00406BAD loc_406BAD:                             ; CODE XREF: sub_4069A0+B66↓j
.text:00406BAD                 mov     ebx, [edi+4]
.text:00406BB0                 mov     ebp, [esi+4]
.text:00406BB3                 dec     ebx
.text:00406BB4                 dec     ebp
.text:00406BB5                 jnz     loc_407460
.text:00406BBB                 xor     ecx, ecx
.text:00406BBD                 test    ebx, ebx
.text:00406BBF                 setz    cl
.text:00406BC2                 dec     ecx
.text:00406BC3
.text:00406BC3 loc_406BC3:                             ; CODE XREF: sub_4069A0+AC7↓j
.text:00406BC3                                         ; sub_4069A0+B02↓j ...
.text:00406BC3                 cmp     ds:byte_418490, 0
.text:00406BCA                 jz      short loc_406BCE
.text:00406BCC                 neg     ecx
.text:00406BCE
.text:00406BCE loc_406BCE:                             ; CODE XREF: sub_4069A0+22A↑j
.text:00406BCE                                         ; sub_4069A0+B60↓j
.text:00406BCE                 test    ecx, ecx
.text:00406BD0                 jle     short loc_406BEE
.text:00406BD2                 mov     esi, [esp+34Ch+var_2F8]
.text:00406BD6                 mov     [esp+34Ch+var_2F8], 0
.text:00406BDE                 mov     edi, [esp+esi*4+34Ch+var_2F0]
.text:00406BE2                 mov     ebx, [esp+esi*4+34Ch+var_2EC]
.text:00406BE6                 mov     [esp+esi*4+34Ch+var_2EC], edi
.text:00406BEA                 mov     [esp+esi*4+34Ch+var_2F0], ebx
.text:00406BEE
.text:00406BEE loc_406BEE:                             ; CODE XREF: sub_4069A0+230↑j
.text:00406BEE                 inc     [esp+34Ch+var_2F8]
.text:00406BF2                 mov     ebp, [esp+34Ch+arg_8]
.text:00406BF9                 cmp     [esp+34Ch+var_2F8], ebp
.text:00406BFD                 jb      short loc_406B85
.text:00406BFF                 nop
.text:00406C00
.text:00406C00 loc_406C00:                             ; CODE XREF: sub_4069A0+1E3↑j
.text:00406C00                                         ; sub_4069A0+3A7↓j ...
.text:00406C00                 mov     edx, [esp+34Ch+arg_8]
.text:00406C07                 test    edx, edx
.text:00406C09                 jz      loc_40738F
.text:00406C0F                 cmp     ds:byte_4184B0, 0
.text:00406C16                 mov     ecx, [esp+34Ch+var_2EC]
.text:00406C1A                 mov     ebp, [esp+ecx*4+34Ch+var_26C]
.text:00406C21                 jz      loc_40735D
.text:00406C27                 mov     edx, [esp+34Ch+var_2F0]
.text:00406C2B                 test    edx, edx
.text:00406C2D                 jz      loc_407170
.text:00406C33                 mov     eax, ds:dword_4184D0
.text:00406C38                 test    eax, eax
.text:00406C3A                 jnz     loc_40732E
.text:00406C40
.text:00406C40 loc_406C40:                             ; CODE XREF: sub_4069A0+9B8↓j
.text:00406C40                 mov     ecx, [esp+34Ch+var_2F0]
.text:00406C44                 mov     ebx, [ebp+4]
.text:00406C47                 mov     eax, [ecx+4]
.text:00406C4A                 dec     ebx
.text:00406C4B                 dec     eax
.text:00406C4C                 mov     [esp+34Ch+var_30C], eax
.text:00406C50                 jnz     loc_407298
.text:00406C56                 xor     ecx, ecx
.text:00406C58                 test    ebx, ebx
.text:00406C5A                 setz    cl
.text:00406C5D                 dec     ecx
.text:00406C5E
.text:00406C5E loc_406C5E:                             ; CODE XREF: sub_4069A0+8FF↓j
.text:00406C5E                                         ; sub_4069A0+943↓j ...
.text:00406C5E                 cmp     ds:byte_418490, 0
.text:00406C65                 jz      short loc_406C69
.text:00406C67                 neg     ecx
.text:00406C69
.text:00406C69 loc_406C69:                             ; CODE XREF: sub_4069A0+2C5↑j
.text:00406C69                                         ; sub_4069A0+9B2↓j
.text:00406C69                 test    ecx, ecx
.text:00406C6B                 jnz     loc_407226
.text:00406C71                 mov     ebx, [esp+34Ch+var_2F0]
.text:00406C75                 test    ebx, ebx
.text:00406C77                 jz      loc_407170
.text:00406C7D                 lea     esi, [esi+0]
.text:00406C80
.text:00406C80 loc_406C80:                             ; CODE XREF: sub_4069A0+84E↓j
.text:00406C80                                         ; sub_4069A0+87B↓j ...
.text:00406C80                 mov     ebx, [esp+34Ch+var_2EC]
.text:00406C84                 cmp     [esp+ebx*4+34Ch+var_2AC], ebp
.text:00406C8B                 jnb     loc_406E0B
.text:00406C91                 lea     edx, [ebp-10h]
.text:00406C94                 mov     [esp+ebx*4+34Ch+var_26C], edx
.text:00406C9B
.text:00406C9B loc_406C9B:                             ; CODE XREF: sub_4069A0+4D9↓j
.text:00406C9B                 mov     [esp+34Ch+var_2F8], 1
.text:00406CA3                 mov     ecx, [esp+34Ch+arg_8]
.text:00406CAA                 cmp     [esp+34Ch+var_2F8], ecx
.text:00406CAE                 jnb     short loc_406D1C
.text:00406CB0
.text:00406CB0 loc_406CB0:                             ; CODE XREF: sub_4069A0+37A↓j
.text:00406CB0                 mov     edi, [esp+34Ch+var_2F8]
.text:00406CB4                 mov     esi, [esp+ebx*4+34Ch+var_26C]
.text:00406CBB                 mov     ebx, ds:dword_4184D0
.text:00406CC1                 mov     ebp, [esp+edi*4+34Ch+var_2EC]
.text:00406CC5                 test    ebx, ebx
.text:00406CC7                 mov     edi, [esp+ebp*4+34Ch+var_26C]
.text:00406CCE                 jnz     loc_406DE0
.text:00406CD4
.text:00406CD4 loc_406CD4:                             ; CODE XREF: sub_4069A0+466↓j
.text:00406CD4                 mov     ebx, [edi+4]
.text:00406CD7                 mov     ebp, [esi+4]
.text:00406CDA                 dec     ebx
.text:00406CDB                 dec     ebp
.text:00406CDC                 jnz     loc_406D60
.text:00406CE2                 xor     ecx, ecx
.text:00406CE4                 test    ebx, ebx
.text:00406CE6                 setz    cl
.text:00406CE9                 dec     ecx
.text:00406CEA
.text:00406CEA loc_406CEA:                             ; CODE XREF: sub_4069A0+3C7↓j
.text:00406CEA                                         ; sub_4069A0+402↓j ...
.text:00406CEA                 cmp     ds:byte_418490, 0
.text:00406CF1                 jz      short loc_406CF5
.text:00406CF3                 neg     ecx
.text:00406CF5
.text:00406CF5 loc_406CF5:                             ; CODE XREF: sub_4069A0+351↑j
.text:00406CF5                                         ; sub_4069A0+460↓j
.text:00406CF5                 test    ecx, ecx
.text:00406CF7                 js      short loc_406D56
.text:00406CF9                 test    ecx, ecx
.text:00406CFB                 jnz     short loc_406D50
.text:00406CFD                 mov     esi, [esp+34Ch+var_2F8]
.text:00406D01                 mov     ebx, [esp+34Ch+var_2EC]
.text:00406D05                 cmp     ebx, [esp+esi*4+34Ch+var_2EC]
.text:00406D09                 jb      short loc_406D1C
.text:00406D0B
.text:00406D0B loc_406D0B:                             ; CODE XREF: sub_4069A0+3B4↓j
.text:00406D0B                 inc     [esp+34Ch+var_2F8]
.text:00406D0F                 mov     ebp, [esp+34Ch+arg_8]
.text:00406D16                 cmp     [esp+34Ch+var_2F8], ebp
.text:00406D1A                 jb      short loc_406CB0
.text:00406D1C
.text:00406D1C loc_406D1C:                             ; CODE XREF: sub_4069A0+30E↑j
.text:00406D1C                                         ; sub_4069A0+369↑j ...
.text:00406D1C                 mov     edx, 1
.text:00406D21                 cmp     edx, [esp+34Ch+var_2F8]
.text:00406D25                 jnb     short loc_406D3F
.text:00406D27                 mov     esi, esi
.text:00406D29                 lea     edi, [edi+0]
.text:00406D30
.text:00406D30 loc_406D30:                             ; CODE XREF: sub_4069A0+39D↓j
.text:00406D30                 mov     edi, [esp+edx*4+34Ch+var_2EC]
.text:00406D34                 mov     [esp+edx*4+34Ch+var_2F0], edi
.text:00406D38                 inc     edx
.text:00406D39                 cmp     edx, [esp+34Ch+var_2F8]
.text:00406D3D                 jb      short loc_406D30
.text:00406D3F
.text:00406D3F loc_406D3F:                             ; CODE XREF: sub_4069A0+385↑j
.text:00406D3F                 mov     ecx, [esp+34Ch+var_2F8]
.text:00406D43                 mov     [esp+ecx*4+34Ch+var_2F0], ebx
.text:00406D47                 jmp     loc_406C00
.text:00406D47 ; ---------------------------------------------------------------------------
.text:00406D4C                 align 10h
.text:00406D50
.text:00406D50 loc_406D50:                             ; CODE XREF: sub_4069A0+35B↑j
.text:00406D50                 mov     ebx, [esp+34Ch+var_2EC]
.text:00406D54                 jmp     short loc_406D0B
.text:00406D56 ; ---------------------------------------------------------------------------
.text:00406D56
.text:00406D56 loc_406D56:                             ; CODE XREF: sub_4069A0+357↑j
.text:00406D56                 mov     ebx, [esp+34Ch+var_2EC]
.text:00406D5A                 jmp     short loc_406D1C
.text:00406D5A ; ---------------------------------------------------------------------------
.text:00406D5C                 align 10h
.text:00406D60
.text:00406D60 loc_406D60:                             ; CODE XREF: sub_4069A0+33C↑j
.text:00406D60                 test    ebx, ebx
.text:00406D62                 mov     ecx, 1
.text:00406D67                 jz      loc_406CEA
.text:00406D6D                 cmp     ds:byte_418040, 0
.text:00406D74                 jnz     short loc_406DC1
.text:00406D76                 mov     eax, [esi]
.text:00406D78                 cmp     ebx, ebp
.text:00406D7A                 mov     edx, [edi]
.text:00406D7C                 mov     [esp+34Ch+var_31C], eax
.text:00406D80                 mov     eax, ebx
.text:00406D82                 jbe     short loc_406D86
.text:00406D84                 mov     eax, ebp
.text:00406D86
.text:00406D86 loc_406D86:                             ; CODE XREF: sub_4069A0+3E2↑j
.text:00406D86                 cld
.text:00406D87                 mov     esi, [esp+34Ch+var_31C]
.text:00406D8B                 mov     ecx, eax
.text:00406D8D                 cmp     eax, eax
.text:00406D8F                 mov     edi, edx
.text:00406D91                 repe cmpsb
.text:00406D93                 setnbe  dl
.text:00406D96                 setb    al
.text:00406D99                 mov     cl, dl
.text:00406D9B                 sub     cl, al
.text:00406D9D                 movsx   ecx, cl
.text:00406DA0                 test    ecx, ecx
.text:00406DA2                 jnz     loc_406CEA
.text:00406DA8                 cmp     ebp, ebx
.text:00406DAA                 mov     ecx, 0FFFFFFFFh
.text:00406DAF                 jb      loc_406CEA
.text:00406DB5                 xor     ecx, ecx
.text:00406DB7                 cmp     ebp, ebx
.text:00406DB9                 setnz   cl
.text:00406DBC                 jmp     loc_406CEA
.text:00406DC1 ; ---------------------------------------------------------------------------
.text:00406DC1
.text:00406DC1 loc_406DC1:                             ; CODE XREF: sub_4069A0+3D4↑j
.text:00406DC1                 mov     [esp+34Ch+var_340], ebx ; char
.text:00406DC5                 mov     ebx, [edi]
.text:00406DC7                 mov     [esp+34Ch+Src], ebp ; int
.text:00406DCB                 mov     [esp+34Ch+ElementCount], ebx ; char *
.text:00406DCF                 mov     ecx, [esi]
.text:00406DD1                 mov     [esp+34Ch+Size], ecx ; char *
.text:00406DD4                 call    sub_40A510
.text:00406DD9                 mov     ecx, eax
.text:00406DDB                 jmp     loc_406CEA
.text:00406DE0 ; ---------------------------------------------------------------------------
.text:00406DE0
.text:00406DE0 loc_406DE0:                             ; CODE XREF: sub_4069A0+32E↑j
.text:00406DE0                 mov     [esp+34Ch+Src], edi
.text:00406DE4                 mov     [esp+34Ch+Size], esi
.text:00406DE7                 call    sub_406350
.text:00406DEC                 movzx   edx, ds:byte_4184B0
.text:00406DF3                 mov     ecx, eax
.text:00406DF5                 movzx   ebx, ds:byte_4184A0
.text:00406DFC                 or      edx, eax
.text:00406DFE                 or      edx, ebx
.text:00406E00                 jnz     loc_406CF5
.text:00406E06                 jmp     loc_406CD4
.text:00406E0B ; ---------------------------------------------------------------------------
.text:00406E0B
.text:00406E0B loc_406E0B:                             ; CODE XREF: sub_4069A0+2EB↑j
.text:00406E0B                 mov     eax, [esp+34Ch+arg_0]
.text:00406E12                 lea     ecx, ds:0[ebx*8]
.text:00406E19                 sub     ecx, ebx
.text:00406E1B                 mov     edi, [eax+ebx*4]
.text:00406E1E                 mov     [esp+34Ch+ElementCount], edi ; int
.text:00406E22                 mov     esi, [esp+ebx*4+34Ch+Stream]
.text:00406E29                 mov     [esp+34Ch+Src], esi ; FILE *
.text:00406E2D                 lea     esi, [esp+34Ch+Block]
.text:00406E34                 lea     ebp, [esi+ecx*4]
.text:00406E37                 mov     [esp+34Ch+Size], ebp ; int
.text:00406E3A                 call    sub_406030
.text:00406E3F                 test    al, al
.text:00406E41                 jz      short loc_406E7E
.text:00406E43                 mov     ebx, [esp+34Ch+var_2EC]
.text:00406E47                 lea     ecx, ds:0[ebx*8]
.text:00406E4E                 sub     ecx, ebx
.text:00406E50                 shl     ecx, 2
.text:00406E53                 mov     ebp, [ecx+esi]
.text:00406E56                 mov     eax, [ecx+esi+0Ch]
.text:00406E5A                 mov     edx, [esp+ecx+34Ch+var_214]
.text:00406E61                 add     ebp, eax
.text:00406E63                 shl     edx, 4
.text:00406E66                 lea     esi, [ebp-10h]
.text:00406E69                 sub     ebp, edx
.text:00406E6B                 mov     [esp+ebx*4+34Ch+var_26C], esi
.text:00406E72                 mov     [esp+ebx*4+34Ch+var_2AC], ebp
.text:00406E79                 jmp     loc_406C9B
.text:00406E7E ; ---------------------------------------------------------------------------
.text:00406E7E
.text:00406E7E loc_406E7E:                             ; CODE XREF: sub_4069A0+4A1↑j
.text:00406E7E                 mov     [esp+34Ch+var_2F8], 1
.text:00406E86                 mov     edi, [esp+34Ch+arg_8]
.text:00406E8D                 cmp     [esp+34Ch+var_2F8], edi
.text:00406E91                 jnb     loc_407167
.text:00406E97                 mov     ebx, [esp+34Ch+var_2EC]
.text:00406E9B                 nop
.text:00406E9C                 lea     esi, [esi+0]
.text:00406EA0
.text:00406EA0 loc_406EA0:                             ; CODE XREF: sub_4069A0+524↓j
.text:00406EA0                 mov     edx, [esp+34Ch+var_2F8]
.text:00406EA4                 mov     eax, [esp+edx*4+34Ch+var_2EC]
.text:00406EA8                 cmp     eax, ebx
.text:00406EAA                 jbe     short loc_406EB5
.text:00406EAC                 dec     eax
.text:00406EAD                 mov     [esp+edx*4+34Ch+var_2EC], eax
.text:00406EB1                 mov     ebx, [esp+34Ch+var_2EC]
.text:00406EB5
.text:00406EB5 loc_406EB5:                             ; CODE XREF: sub_4069A0+50A↑j
.text:00406EB5                 inc     [esp+34Ch+var_2F8]
.text:00406EB9                 mov     ebp, [esp+34Ch+arg_8]
.text:00406EC0                 cmp     [esp+34Ch+var_2F8], ebp
.text:00406EC4                 jb      short loc_406EA0
.text:00406EC6
.text:00406EC6 loc_406EC6:                             ; CODE XREF: sub_4069A0+7CB↓j
.text:00406EC6                 dec     [esp+34Ch+arg_8]
.text:00406ECD                 mov     edx, [esp+ebx*4+34Ch+Stream]
.text:00406ED4                 mov     eax, ds:_iob
.text:00406ED9                 mov     ecx, [esp+34Ch+arg_0]
.text:00406EE0                 cmp     edx, eax
.text:00406EE2                 mov     esi, [ecx+ebx*4]
.text:00406EE5                 jz      loc_407150
.text:00406EEB                 add     eax, 20h ; ' '
.text:00406EEE                 cmp     edx, eax
.text:00406EF0                 jz      loc_407133
.text:00406EF6                 mov     [esp+34Ch+Size], edx ; Stream
.text:00406EF9                 call    fclose
.text:00406EFE                 test    eax, eax
.text:00406F00                 jnz     loc_4070DA
.text:00406F06
.text:00406F06 loc_406F06:                             ; CODE XREF: sub_4069A0+79D↓j
.text:00406F06                                         ; sub_4069A0+7C2↓j
.text:00406F06                 mov     ebx, [esp+34Ch+var_2EC]
.text:00406F0A
.text:00406F0A loc_406F0A:                             ; CODE XREF: sub_4069A0+7B4↓j
.text:00406F0A                 cmp     ebx, [esp+34Ch+arg_4]
.text:00406F11                 jnb     short loc_406F83
.text:00406F13                 dec     [esp+34Ch+arg_4]
.text:00406F1A                 mov     ebp, offset Block
.text:00406F1F                 mov     esi, [esp+34Ch+arg_0]
.text:00406F26                 mov     edi, [esi+ebx*4]
.text:00406F29                 mov     esi, ds:Block
.text:00406F2F                 lea     ebx, [esi+4]
.text:00406F32                 cmp     ebx, edi
.text:00406F34                 jz      short loc_406F41
.text:00406F36
.text:00406F36 loc_406F36:                             ; CODE XREF: sub_4069A0+59F↓j
.text:00406F36                 mov     ebp, esi
.text:00406F38                 mov     esi, [esi]
.text:00406F3A                 lea     edx, [esi+4]
.text:00406F3D                 cmp     edx, edi
.text:00406F3F                 jnz     short loc_406F36
.text:00406F41
.text:00406F41 loc_406F41:                             ; CODE XREF: sub_4069A0+594↑j
.text:00406F41                 mov     eax, [esi]
.text:00406F43                 mov     [esp+34Ch+Size], edi ; LPCSTR
.text:00406F46                 mov     [esp+34Ch+var_314], eax
.text:00406F4A                 call    sub_4101C0
.text:00406F4F                 mov     ebx, eax
.text:00406F51                 call    _errno
.text:00406F56                 mov     edx, [eax]
.text:00406F58                 test    ebx, ebx
.text:00406F5A                 mov     ecx, [esp+34Ch+var_314]
.text:00406F5E                 mov     [esp+34Ch+ErrorMessage], edx
.text:00406F62                 mov     [ebp+0], ecx
.text:00406F65                 jnz     loc_4070AC
.text:00406F6B
.text:00406F6B loc_406F6B:                             ; CODE XREF: sub_4069A0+735↓j
.text:00406F6B                 mov     ebx, [esp+34Ch+var_314]
.text:00406F6F                 test    ebx, ebx
.text:00406F71                 jz      loc_4070A1
.text:00406F77
.text:00406F77 loc_406F77:                             ; CODE XREF: sub_4069A0+707↓j
.text:00406F77                 mov     [esp+34Ch+Size], esi ; Block
.text:00406F7A                 call    free
.text:00406F7F                 mov     ebx, [esp+34Ch+var_2EC]
.text:00406F83
.text:00406F83 loc_406F83:                             ; CODE XREF: sub_4069A0+571↑j
.text:00406F83                 lea     ecx, ds:0[ebx*8]
.text:00406F8A                 sub     ecx, ebx
.text:00406F8C                 mov     esi, [esp+ecx*4+34Ch+Block]
.text:00406F93                 mov     [esp+34Ch+Size], esi ; Block
.text:00406F96                 call    free
.text:00406F9B                 mov     ecx, [esp+34Ch+var_2EC]
.text:00406F9F                 mov     ebp, [esp+34Ch+arg_8]
.text:00406FA6                 mov     [esp+34Ch+var_2F8], ecx
.text:00406FAA                 cmp     ecx, ebp
.text:00406FAC                 jnb     loc_407067
.text:00406FB2                 mov     edi, ecx
.text:00406FB4                 shl     edi, 3
.text:00406FB7                 sub     edi, ecx
.text:00406FB9                 lea     edx, [esp+edi*4+34Ch+var_1C]
.text:00406FC0
.text:00406FC0 loc_406FC0:                             ; CODE XREF: sub_4069A0+6C1↓j
.text:00406FC0                 mov     ebp, [esp+34Ch+var_2F8]
.text:00406FC4                 mov     ecx, [esp+34Ch+arg_0]
.text:00406FCB                 mov     ebx, [esp+ebp*4+34Ch+var_58]
.text:00406FD2                 mov     edi, [ecx+ebp*4+4]
.text:00406FD6                 mov     [esp+ebp*4+34Ch+Stream], ebx
.text:00406FDD                 mov     [ecx+ebp*4], edi
.text:00406FE0                 mov     esi, [edx-1E4h]
.text:00406FE6                 mov     ebx, [edx-1E0h]
.text:00406FEC                 mov     edi, [edx-1DCh]
.text:00406FF2                 mov     ecx, [edx-1D8h]
.text:00406FF8                 mov     [edx-200h], esi
.text:00406FFE                 mov     esi, [edx-1D4h]
.text:00407004                 mov     [edx-1FCh], ebx
.text:0040700A                 mov     ebx, [edx-1D0h]
.text:00407010                 mov     [edx-1F8h], edi
.text:00407016                 mov     edi, [edx-1CCh]
.text:0040701C                 mov     [edx-1F4h], ecx
.text:00407022                 mov     ecx, [esp+ebp*4+34Ch+var_268]
.text:00407029                 mov     [edx-1F0h], esi
.text:0040702F                 mov     esi, [esp+ebp*4+34Ch+var_2A8]
.text:00407036                 mov     [edx-1ECh], ebx
.text:0040703C                 mov     [edx-1E8h], edi
.text:00407042                 mov     ebx, [esp+34Ch+arg_8]
.text:00407049                 add     edx, 1Ch
.text:0040704C                 mov     [esp+ebp*4+34Ch+var_26C], ecx
.text:00407053                 mov     [esp+ebp*4+34Ch+var_2AC], esi
.text:0040705A                 inc     ebp
.text:0040705B                 cmp     ebp, ebx
.text:0040705D                 mov     [esp+34Ch+var_2F8], ebp
.text:00407061                 jb      loc_406FC0
.text:00407067
.text:00407067 loc_407067:                             ; CODE XREF: sub_4069A0+60C↑j
.text:00407067                 mov     [esp+34Ch+var_2F8], 0
.text:0040706F                 mov     eax, [esp+34Ch+arg_8]
.text:00407076                 cmp     [esp+34Ch+var_2F8], eax
.text:0040707A                 jnb     loc_406C00
.text:00407080
.text:00407080 loc_407080:                             ; CODE XREF: sub_4069A0+6FA↓j
.text:00407080                 mov     ebp, [esp+34Ch+var_2F8]
.text:00407084                 mov     esi, [esp+ebp*4+34Ch+var_2E8]
.text:00407088                 mov     [esp+ebp*4+34Ch+var_2EC], esi
.text:0040708C                 mov     edx, [esp+34Ch+arg_8]
.text:00407093                 inc     ebp
.text:00407094                 mov     [esp+34Ch+var_2F8], ebp
.text:00407098                 cmp     ebp, edx
.text:0040709A                 jb      short loc_407080
.text:0040709C                 jmp     loc_406C00
.text:004070A1 ; ---------------------------------------------------------------------------
.text:004070A1
.text:004070A1 loc_4070A1:                             ; CODE XREF: sub_4069A0+5D1↑j
.text:004070A1                 mov     off_417098, ebp
.text:004070A7                 jmp     loc_406F77
.text:004070AC ; ---------------------------------------------------------------------------
.text:004070AC
.text:004070AC loc_4070AC:                             ; CODE XREF: sub_4069A0+5C5↑j
.text:004070AC                 mov     [esp+34Ch+Size], offset aWarningCannotR ; "warning: cannot remove: %s"
.text:004070B3                 call    ds:libintl_gettext
.text:004070B9                 mov     [esp+34Ch+var_340], edi ; char
.text:004070BD                 mov     edi, [esp+34Ch+ErrorMessage]
.text:004070C1                 mov     [esp+34Ch+Size], 0 ; Code
.text:004070C8                 mov     [esp+34Ch+ElementCount], eax ; char *
.text:004070CC                 mov     [esp+34Ch+Src], edi ; ErrorMessage
.text:004070D0                 call    sub_40CB60
.text:004070D5                 jmp     loc_406F6B
.text:004070DA ; ---------------------------------------------------------------------------
.text:004070DA
.text:004070DA loc_4070DA:                             ; CODE XREF: sub_4069A0+560↑j
.text:004070DA                 mov     [esp+34Ch+Size], offset aCloseFailed ; "close failed"
.text:004070E1
.text:004070E1 loc_4070E1:                             ; CODE XREF: sub_4069A0+7AA↓j
.text:004070E1                 call    ds:libintl_gettext
.text:004070E7                 test    esi, esi
.text:004070E9                 mov     ebx, esi
.text:004070EB                 mov     edi, eax
.text:004070ED                 jz      short loc_407122
.text:004070EF
.text:004070EF loc_4070EF:                             ; CODE XREF: sub_4069A0+791↓j
.text:004070EF                 call    _errno
.text:004070F4                 mov     [esp+34Ch+var_33C], ebx
.text:004070F8
.text:004070F8 loc_4070F8:                             ; CODE XREF: sub_4069A0+DA5↓j
.text:004070F8                 mov     [esp+34Ch+var_340], edi ; char
.text:004070FC
.text:004070FC loc_4070FC:                             ; CODE XREF: sub_4069A0+8E2↓j
.text:004070FC                                         ; sub_4069A0+D34↓j
.text:004070FC                 mov     [esp+34Ch+ElementCount], offset aSS ; "%s: %s"
.text:00407104                 mov     edx, [eax]
.text:00407106                 mov     [esp+34Ch+Size], 0 ; Code
.text:0040710D                 mov     [esp+34Ch+Src], edx ; ErrorMessage
.text:00407111                 call    sub_40CB60
.text:00407116                 mov     [esp+34Ch+Size], 2 ; Code
.text:0040711D                 call    exit
.text:00407122 ; ---------------------------------------------------------------------------
.text:00407122
.text:00407122 loc_407122:                             ; CODE XREF: sub_4069A0+74D↑j
.text:00407122                 mov     [esp+34Ch+Size], offset aStandardOutput ; "standard output"
.text:00407129                 call    ds:libintl_gettext
.text:0040712F                 mov     ebx, eax
.text:00407131                 jmp     short loc_4070EF
.text:00407133 ; ---------------------------------------------------------------------------
.text:00407133
.text:00407133 loc_407133:                             ; CODE XREF: sub_4069A0+550↑j
.text:00407133                 mov     [esp+34Ch+Size], edx ; Stream
.text:00407136                 call    fflush
.text:0040713B                 test    eax, eax
.text:0040713D                 jz      loc_406F06
.text:00407143                 mov     [esp+34Ch+Size], offset aFflushFailed ; "fflush failed"
.text:0040714A                 jmp     short loc_4070E1
.text:0040714A ; ---------------------------------------------------------------------------
.text:0040714C                 align 10h
.text:00407150
.text:00407150 loc_407150:                             ; CODE XREF: sub_4069A0+545↑j
.text:00407150                 test    byte ptr [edx+0Ch], 10h
.text:00407154                 jz      loc_406F0A
.text:0040715A                 mov     [esp+34Ch+Size], edx ; Stream
.text:0040715D                 call    clearerr
.text:00407162                 jmp     loc_406F06
.text:00407167 ; ---------------------------------------------------------------------------
.text:00407167
.text:00407167 loc_407167:                             ; CODE XREF: sub_4069A0+4F1↑j
.text:00407167                 mov     ebx, [esp+34Ch+var_2EC]
.text:0040716B                 jmp     loc_406EC6
.text:00407170 ; ---------------------------------------------------------------------------
.text:00407170
.text:00407170 loc_407170:                             ; CODE XREF: sub_4069A0+28D↑j
.text:00407170                                         ; sub_4069A0+2D7↑j ...
.text:00407170                 mov     edx, [ebp+4]
.text:00407173                 lea     eax, [esp+34Ch+Buffer]
.text:0040717A                 cmp     [esp+34Ch+var_2F4], edx
.text:0040717E                 mov     [esp+34Ch+var_2F0], eax
.text:00407182                 mov     eax, edx
.text:00407184                 jnb     short loc_4071C7
.text:00407186                 lea     esi, [esi+0]
.text:00407189                 lea     edi, [edi+0]
.text:00407190
.text:00407190 loc_407190:                             ; CODE XREF: sub_4069A0+804↓j
.text:00407190                 mov     esi, [esp+34Ch+var_2F4]
.text:00407194                 test    esi, esi
.text:00407196                 jz      loc_407220
.text:0040719C                 shl     [esp+34Ch+var_2F4], 1
.text:004071A0                 cmp     [esp+34Ch+var_2F4], eax
.text:004071A4                 jb      short loc_407190
.text:004071A6
.text:004071A6 loc_4071A6:                             ; CODE XREF: sub_4069A0+884↓j
.text:004071A6                 mov     edx, [esp+34Ch+var_2F4]
.text:004071AA                 mov     edi, [esp+34Ch+Buffer]
.text:004071B1                 mov     [esp+34Ch+Src], edx ; size_t
.text:004071B5                 mov     [esp+34Ch+Size], edi ; void *
.text:004071B8                 call    sub_40A210
.text:004071BD                 mov     [esp+34Ch+Buffer], eax
.text:004071C4                 mov     edx, [ebp+4]
.text:004071C7
.text:004071C7 loc_4071C7:                             ; CODE XREF: sub_4069A0+7E4↑j
.text:004071C7                 mov     [esp+34Ch+var_228], edx
.text:004071CE                 mov     esi, [ebp+0]
.text:004071D1                 mov     ebx, [esp+34Ch+Buffer]
.text:004071D8                 mov     [esp+34Ch+ElementCount], edx ; Size
.text:004071DC                 mov     [esp+34Ch+Src], esi ; Src
.text:004071E0                 mov     [esp+34Ch+Size], ebx ; void *
.text:004071E3                 call    memcpy
.text:004071E8                 mov     ecx, [esp+34Ch+var_2FC]
.text:004071EC                 test    ecx, ecx
.text:004071EE                 jz      loc_406C80
.text:004071F4                 mov     esi, [ebp+8]
.text:004071F7                 mov     ebx, [ebp+0]
.text:004071FA                 mov     edx, [ebp+0Ch]
.text:004071FD                 mov     edi, [esp+34Ch+Buffer]
.text:00407204                 sub     esi, ebx
.text:00407206                 sub     edx, ebx
.text:00407208                 lea     ecx, [esi+edi]
.text:0040720B                 add     edi, edx
.text:0040720D                 mov     [esp+34Ch+var_224], ecx
.text:00407214                 mov     [esp+34Ch+var_220], edi
.text:0040721B                 jmp     loc_406C80
.text:00407220 ; ---------------------------------------------------------------------------
.text:00407220
.text:00407220 loc_407220:                             ; CODE XREF: sub_4069A0+7F6↑j
.text:00407220                 mov     [esp+34Ch+var_2F4], eax
.text:00407224                 jmp     short loc_4071A6
.text:00407226 ; ---------------------------------------------------------------------------
.text:00407226
.text:00407226 loc_407226:                             ; CODE XREF: sub_4069A0+2CB↑j
.text:00407226                 mov     [esp+34Ch+Src], 1 ; ElementSize
.text:0040722E                 mov     edi, [esp+34Ch+var_228]
.text:00407235                 mov     edx, [esp+34Ch+arg_C]
.text:0040723C                 mov     ecx, [esp+34Ch+Buffer]
.text:00407243                 mov     [esp+34Ch+ElementCount], edi ; ElementCount
.text:00407247                 mov     [esp+34Ch+var_340], edx ; Stream
.text:0040724B                 mov     [esp+34Ch+Size], ecx ; Buffer
.text:0040724E                 call    fwrite
.text:00407253                 cmp     eax, edi
.text:00407255                 jz      loc_407170
.text:0040725B
.text:0040725B loc_40725B:                             ; CODE XREF: sub_4069A0+9EA↓j
.text:0040725B                                         ; sub_4069A0+A2F↓j
.text:0040725B                 mov     [esp+34Ch+Size], offset aWriteFailed ; "write failed"
.text:00407262
.text:00407262 loc_407262:                             ; CODE XREF: sub_4069A0+A83↓j
.text:00407262                                         ; sub_4069A0+AA2↓j ...
.text:00407262                 call    ds:libintl_gettext
.text:00407268                 mov     esi, [esp+34Ch+arg_10]
.text:0040726F                 test    esi, esi
.text:00407271                 mov     ebx, eax
.text:00407273                 jz      short loc_407287
.text:00407275
.text:00407275 loc_407275:                             ; CODE XREF: sub_4069A0+8F6↓j
.text:00407275                 call    _errno
.text:0040727A                 mov     [esp+34Ch+var_33C], esi
.text:0040727E                 mov     [esp+34Ch+var_340], ebx
.text:00407282                 jmp     loc_4070FC
.text:00407287 ; ---------------------------------------------------------------------------
.text:00407287
.text:00407287 loc_407287:                             ; CODE XREF: sub_4069A0+8D3↑j
.text:00407287                 mov     [esp+34Ch+Size], offset aStandardOutput ; "standard output"
.text:0040728E                 call    ds:libintl_gettext
.text:00407294                 mov     esi, eax
.text:00407296                 jmp     short loc_407275
.text:00407298 ; ---------------------------------------------------------------------------
.text:00407298
.text:00407298 loc_407298:                             ; CODE XREF: sub_4069A0+2B0↑j
.text:00407298                 test    ebx, ebx
.text:0040729A                 mov     ecx, 1
.text:0040729F                 jz      loc_406C5E
.text:004072A5                 cmp     ds:byte_418040, 0
.text:004072AC                 jnz     short loc_407306
.text:004072AE                 cmp     ebx, [esp+34Ch+var_30C]
.text:004072B2                 mov     esi, [esp+34Ch+var_2F0]
.text:004072B6                 mov     edx, [ebp+0]
.text:004072B9                 mov     eax, [esi]
.text:004072BB                 mov     [esp+34Ch+var_310], eax
.text:004072BF                 mov     eax, ebx
.text:004072C1                 jbe     short loc_4072C7
.text:004072C3                 mov     eax, [esp+34Ch+var_30C]
.text:004072C7
.text:004072C7 loc_4072C7:                             ; CODE XREF: sub_4069A0+921↑j
.text:004072C7                 cld
.text:004072C8                 mov     esi, [esp+34Ch+var_310]
.text:004072CC                 mov     ecx, eax
.text:004072CE                 cmp     eax, eax
.text:004072D0                 mov     edi, edx
.text:004072D2                 repe cmpsb
.text:004072D4                 setnbe  dl
.text:004072D7                 setb    al
.text:004072DA                 mov     cl, dl
.text:004072DC                 sub     cl, al
.text:004072DE                 movsx   ecx, cl
.text:004072E1                 test    ecx, ecx
.text:004072E3                 jnz     loc_406C5E
.text:004072E9                 cmp     [esp+34Ch+var_30C], ebx
.text:004072ED                 mov     ecx, 0FFFFFFFFh
.text:004072F2                 jb      loc_406C5E
.text:004072F8                 xor     ecx, ecx
.text:004072FA                 cmp     [esp+34Ch+var_30C], ebx
.text:004072FE                 setnz   cl
.text:00407301                 jmp     loc_406C5E
.text:00407306 ; ---------------------------------------------------------------------------
.text:00407306
.text:00407306 loc_407306:                             ; CODE XREF: sub_4069A0+90C↑j
.text:00407306                 mov     [esp+34Ch+var_340], ebx ; char
.text:0040730A                 mov     edx, [esp+34Ch+var_30C]
.text:0040730E                 mov     ebx, [ebp+0]
.text:00407311                 mov     edi, [esp+34Ch+var_2F0]
.text:00407315                 mov     [esp+34Ch+Src], edx ; int
.text:00407319                 mov     [esp+34Ch+ElementCount], ebx ; char *
.text:0040731D                 mov     esi, [edi]
.text:0040731F                 mov     [esp+34Ch+Size], esi ; char *
.text:00407322                 call    sub_40A510
.text:00407327                 mov     ecx, eax
.text:00407329                 jmp     loc_406C5E
.text:0040732E ; ---------------------------------------------------------------------------
.text:0040732E
.text:0040732E loc_40732E:                             ; CODE XREF: sub_4069A0+29A↑j
.text:0040732E                 mov     [esp+34Ch+Src], ebp
.text:00407332                 mov     ebx, [esp+34Ch+var_2F0]
.text:00407336                 mov     [esp+34Ch+Size], ebx
.text:00407339                 call    sub_406350
.text:0040733E                 movzx   edi, ds:byte_4184B0
.text:00407345                 mov     ecx, eax
.text:00407347                 movzx   esi, ds:byte_4184A0
.text:0040734E                 or      edi, eax
.text:00407350                 or      edi, esi
.text:00407352                 jnz     loc_406C69
.text:00407358                 jmp     loc_406C40
.text:0040735D ; ---------------------------------------------------------------------------
.text:0040735D
.text:0040735D loc_40735D:                             ; CODE XREF: sub_4069A0+281↑j
.text:0040735D                 mov     edi, [ebp+4]
.text:00407360                 mov     ebx, [ebp+0]
.text:00407363                 mov     [esp+34Ch+Src], 1 ; ElementSize
.text:0040736B                 mov     eax, [esp+34Ch+arg_C]
.text:00407372                 mov     [esp+34Ch+ElementCount], edi ; ElementCount
.text:00407376                 mov     [esp+34Ch+Size], ebx ; Buffer
.text:00407379                 mov     [esp+34Ch+var_340], eax ; Stream
.text:0040737D                 call    fwrite
.text:00407382                 cmp     eax, edi
.text:00407384                 jz      loc_406C80
.text:0040738A                 jmp     loc_40725B
.text:0040738F ; ---------------------------------------------------------------------------
.text:0040738F
.text:0040738F loc_40738F:                             ; CODE XREF: sub_4069A0+269↑j
.text:0040738F                 cmp     ds:byte_4184B0, 0
.text:00407396                 jz      short loc_4073E4
.text:00407398                 mov     ebx, [esp+34Ch+var_2F0]
.text:0040739C                 test    ebx, ebx
.text:0040739E                 jz      short loc_4073E4
.text:004073A0                 mov     [esp+34Ch+Src], 1 ; ElementSize
.text:004073A8                 mov     esi, [esp+34Ch+var_228]
.text:004073AF                 mov     eax, [esp+34Ch+arg_C]
.text:004073B6                 mov     ebp, [esp+34Ch+Buffer]
.text:004073BD                 mov     [esp+34Ch+ElementCount], esi ; ElementCount
.text:004073C1                 mov     [esp+34Ch+var_340], eax ; Stream
.text:004073C5                 mov     [esp+34Ch+Size], ebp ; Buffer
.text:004073C8                 call    fwrite
.text:004073CD                 cmp     eax, esi
.text:004073CF                 jnz     loc_40725B
.text:004073D5                 mov     edi, [esp+34Ch+Buffer]
.text:004073DC                 mov     [esp+34Ch+Size], edi ; Block
.text:004073DF                 call    free
.text:004073E4
.text:004073E4 loc_4073E4:                             ; CODE XREF: sub_4069A0+9F6↑j
.text:004073E4                                         ; sub_4069A0+9FE↑j
.text:004073E4                 mov     eax, ds:_iob
.text:004073E9                 cmp     [esp+34Ch+arg_C], eax
.text:004073F0                 jz      short loc_407447
.text:004073F2                 add     eax, 20h ; ' '
.text:004073F5                 cmp     [esp+34Ch+arg_C], eax
.text:004073FC                 jz      short loc_407428
.text:004073FE                 mov     ebx, [esp+34Ch+arg_C]
.text:00407405                 mov     [esp+34Ch+Size], ebx ; Stream
.text:00407408                 call    fclose
.text:0040740D                 test    eax, eax
.text:0040740F                 jnz     short loc_40741C
.text:00407411
.text:00407411 loc_407411:                             ; CODE XREF: sub_4069A0+A99↓j
.text:00407411                                         ; sub_4069A0+AB2↓j ...
.text:00407411                 add     esp, 33Ch
.text:00407417                 pop     ebx
.text:00407418                 pop     esi
.text:00407419                 pop     edi
.text:0040741A                 pop     ebp
.text:0040741B                 retn
.text:0040741C ; ---------------------------------------------------------------------------
.text:0040741C
.text:0040741C loc_40741C:                             ; CODE XREF: sub_4069A0+A6F↑j
.text:0040741C                 mov     [esp+34Ch+Size], offset aCloseFailed ; "close failed"
.text:00407423                 jmp     loc_407262
.text:00407428 ; ---------------------------------------------------------------------------
.text:00407428
.text:00407428 loc_407428:                             ; CODE XREF: sub_4069A0+A5C↑j
.text:00407428                 mov     ecx, [esp+34Ch+arg_C]
.text:0040742F                 mov     [esp+34Ch+Size], ecx ; Stream
.text:00407432                 call    fflush
.text:00407437                 test    eax, eax
.text:00407439                 jz      short loc_407411
.text:0040743B                 mov     [esp+34Ch+Size], offset aFflushFailed ; "fflush failed"
.text:00407442                 jmp     loc_407262
.text:00407447 ; ---------------------------------------------------------------------------
.text:00407447
.text:00407447 loc_407447:                             ; CODE XREF: sub_4069A0+A50↑j
.text:00407447                 mov     ebx, [esp+34Ch+arg_C]
.text:0040744E                 test    byte ptr [ebx+0Ch], 10h
.text:00407452                 jz      short loc_407411
.text:00407454                 mov     [esp+34Ch+Size], ebx ; Stream
.text:00407457                 call    clearerr
.text:0040745C                 jmp     short loc_407411
.text:0040745C ; ---------------------------------------------------------------------------
.text:0040745E                 align 10h
.text:00407460
.text:00407460 loc_407460:                             ; CODE XREF: sub_4069A0+215↑j
.text:00407460                 test    ebx, ebx
.text:00407462                 mov     ecx, 1
.text:00407467                 jz      loc_406BC3
.text:0040746D                 cmp     ds:byte_418040, 0
.text:00407474                 jnz     short loc_4074C1
.text:00407476                 mov     eax, [esi]
.text:00407478                 cmp     ebx, ebp
.text:0040747A                 mov     edx, [edi]
.text:0040747C                 mov     [esp+34Ch+var_308], eax
.text:00407480                 mov     eax, ebx
.text:00407482                 jbe     short loc_407486
.text:00407484                 mov     eax, ebp
.text:00407486
.text:00407486 loc_407486:                             ; CODE XREF: sub_4069A0+AE2↑j
.text:00407486                 cld
.text:00407487                 mov     esi, [esp+34Ch+var_308]
.text:0040748B                 mov     ecx, eax
.text:0040748D                 cmp     eax, eax
.text:0040748F                 mov     edi, edx
.text:00407491                 repe cmpsb
.text:00407493                 setnbe  dl
.text:00407496                 setb    al
.text:00407499                 mov     cl, dl
.text:0040749B                 sub     cl, al
.text:0040749D                 movsx   ecx, cl
.text:004074A0                 test    ecx, ecx
.text:004074A2                 jnz     loc_406BC3
.text:004074A8                 cmp     ebp, ebx
.text:004074AA                 mov     ecx, 0FFFFFFFFh
.text:004074AF                 jb      loc_406BC3
.text:004074B5                 xor     ecx, ecx
.text:004074B7                 cmp     ebp, ebx
.text:004074B9                 setnz   cl
.text:004074BC                 jmp     loc_406BC3
.text:004074C1 ; ---------------------------------------------------------------------------
.text:004074C1
.text:004074C1 loc_4074C1:                             ; CODE XREF: sub_4069A0+AD4↑j
.text:004074C1                 mov     [esp+34Ch+var_340], ebx ; char
.text:004074C5                 mov     edx, [edi]
.text:004074C7                 mov     [esp+34Ch+Src], ebp ; int
.text:004074CB                 mov     [esp+34Ch+ElementCount], edx ; char *
.text:004074CF                 mov     ecx, [esi]
.text:004074D1                 mov     [esp+34Ch+Size], ecx ; char *
.text:004074D4                 call    sub_40A510
.text:004074D9                 mov     ecx, eax
.text:004074DB                 jmp     loc_406BC3
.text:004074E0 ; ---------------------------------------------------------------------------
.text:004074E0
.text:004074E0 loc_4074E0:                             ; CODE XREF: sub_4069A0+207↑j
.text:004074E0                 mov     [esp+34Ch+Src], edi
.text:004074E4                 mov     [esp+34Ch+Size], esi
.text:004074E7                 call    sub_406350
.text:004074EC                 movzx   ebp, ds:byte_4184B0
.text:004074F3                 mov     ecx, eax
.text:004074F5                 movzx   ebx, ds:byte_4184A0
.text:004074FC                 or      ebp, eax
.text:004074FE                 or      ebp, ebx
.text:00407500                 jnz     loc_406BCE
.text:00407506                 jmp     loc_406BAD
.text:0040750B ; ---------------------------------------------------------------------------
.text:0040750B
.text:0040750B loc_40750B:                             ; CODE XREF: sub_4069A0+19D↑j
.text:0040750B                 mov     esi, [esp+34Ch+arg_10]
.text:00407512                 test    esi, esi
.text:00407514                 jz      short loc_407576
.text:00407516                 cld
.text:00407517                 mov     esi, [esp+34Ch+arg_10]
.text:0040751E                 mov     edi, offset asc_401530 ; "-"
.text:00407523                 mov     ecx, 2
.text:00407528                 repe cmpsb
.text:0040752A                 jnz     short loc_407535
.text:0040752C                 cmp     ds:Format, 72h ; 'r'
.text:00407533                 jz      short loc_407568
.text:00407535
.text:00407535 loc_407535:                             ; CODE XREF: sub_4069A0+B8A↑j
.text:00407535                 mov     [esp+34Ch+Src], offset Format ; Format
.text:0040753D                 mov     ebp, [esp+34Ch+arg_10]
.text:00407544                 mov     [esp+34Ch+Size], ebp ; char *
.text:00407547                 call    sub_40B5D0
.text:0040754C                 test    eax, eax
.text:0040754E                 jz      short loc_40755C
.text:00407550
.text:00407550 loc_407550:                             ; CODE XREF: sub_4069A0+BD4↓j
.text:00407550                                         ; sub_4069A0+BDE↓j
.text:00407550                 mov     [esp+34Ch+arg_C], eax
.text:00407557                 jmp     loc_406B43
.text:0040755C ; ---------------------------------------------------------------------------
.text:0040755C
.text:0040755C loc_40755C:                             ; CODE XREF: sub_4069A0+BAE↑j
.text:0040755C                 mov     [esp+34Ch+Size], offset aOpenFailed ; "open failed"
.text:00407563                 jmp     loc_407262
.text:00407568 ; ---------------------------------------------------------------------------
.text:00407568
.text:00407568 loc_407568:                             ; CODE XREF: sub_4069A0+B93↑j
.text:00407568                 mov     ds:byte_4184C0, 1
.text:0040756F                 mov     eax, ds:_iob
.text:00407574                 jmp     short loc_407550
.text:00407576 ; ---------------------------------------------------------------------------
.text:00407576
.text:00407576 loc_407576:                             ; CODE XREF: sub_4069A0+B74↑j
.text:00407576                 mov     eax, ds:_iob
.text:0040757B                 add     eax, 20h ; ' '
.text:0040757E                 jmp     short loc_407550
.text:00407580 ; ---------------------------------------------------------------------------
.text:00407580
.text:00407580 loc_407580:                             ; CODE XREF: sub_4069A0+145↑j
.text:00407580                 mov     eax, [esp+34Ch+var_2F8]
.text:00407584                 mov     esi, [esp+34Ch+arg_0]
.text:0040758B                 mov     edx, [esp+eax*4+34Ch+Stream]
.text:00407592                 mov     ebx, [esi+eax*4]
.text:00407595                 mov     eax, ds:_iob
.text:0040759A                 cmp     edx, eax
.text:0040759C                 jz      loc_407710
.text:004075A2                 add     eax, 20h ; ' '
.text:004075A5                 cmp     edx, eax
.text:004075A7                 jz      loc_4076F0
.text:004075AD                 mov     [esp+34Ch+Size], edx ; Stream
.text:004075B0                 call    fclose
.text:004075B5                 test    eax, eax
.text:004075B7                 jnz     loc_4076B4
.text:004075BD
.text:004075BD loc_4075BD:                             ; CODE XREF: sub_4069A0+D5A↓j
.text:004075BD                                         ; sub_4069A0+D74↓j ...
.text:004075BD                 mov     ebx, [esp+34Ch+arg_4]
.text:004075C4                 cmp     [esp+34Ch+var_2F8], ebx
.text:004075C8                 jnb     short loc_407634
.text:004075CA                 mov     ebp, [esp+34Ch+arg_0]
.text:004075D1                 dec     ebx
.text:004075D2                 mov     edx, [esp+34Ch+var_2F8]
.text:004075D6                 mov     [esp+34Ch+arg_4], ebx
.text:004075DD                 mov     esi, ds:Block
.text:004075E3                 mov     edi, [ebp+edx*4+0]
.text:004075E7                 lea     ebx, [esi+4]
.text:004075EA                 mov     ebp, offset Block
.text:004075EF                 cmp     ebx, edi
.text:004075F1                 jz      short loc_4075FE
.text:004075F3
.text:004075F3 loc_4075F3:                             ; CODE XREF: sub_4069A0+C5C↓j
.text:004075F3                 mov     ebp, esi
.text:004075F5                 mov     esi, [esi]
.text:004075F7                 lea     ecx, [esi+4]
.text:004075FA                 cmp     ecx, edi
.text:004075FC                 jnz     short loc_4075F3
.text:004075FE
.text:004075FE loc_4075FE:                             ; CODE XREF: sub_4069A0+C51↑j
.text:004075FE                 mov     eax, [esi]
.text:00407600                 mov     [esp+34Ch+Size], edi ; LPCSTR
.text:00407603                 mov     [esp+34Ch+var_300], eax
.text:00407607                 call    sub_4101C0
.text:0040760C                 mov     ebx, eax
.text:0040760E                 call    _errno
.text:00407613                 mov     ecx, [eax]
.text:00407615                 test    ebx, ebx
.text:00407617                 mov     edx, [esp+34Ch+var_300]
.text:0040761B                 mov     [esp+34Ch+var_304], ecx
.text:0040761F                 mov     [ebp+0], edx
.text:00407622                 jnz     short loc_407686
.text:00407624
.text:00407624 loc_407624:                             ; CODE XREF: sub_4069A0+D0F↓j
.text:00407624                 mov     ebx, [esp+34Ch+var_300]
.text:00407628                 test    ebx, ebx
.text:0040762A                 jz      short loc_40767E
.text:0040762C
.text:0040762C loc_40762C:                             ; CODE XREF: sub_4069A0+CE4↓j
.text:0040762C                 mov     [esp+34Ch+Size], esi ; Block
.text:0040762F                 call    free
.text:00407634
.text:00407634 loc_407634:                             ; CODE XREF: sub_4069A0+C28↑j
.text:00407634                 mov     edx, [esp+34Ch+var_320]
.text:00407638                 mov     ebp, [esp+edx+34Ch+Block]
.text:0040763F                 mov     [esp+34Ch+Size], ebp ; Block
.text:00407642                 call    free
.text:00407647                 dec     [esp+34Ch+arg_8]
.text:0040764E                 mov     edx, [esp+34Ch+var_2F8]
.text:00407652                 mov     esi, [esp+34Ch+arg_8]
.text:00407659                 cmp     edx, esi
.text:0040765B                 jnb     loc_406B34
.text:00407661
.text:00407661 loc_407661:                             ; CODE XREF: sub_4069A0+CD7↓j
.text:00407661                 mov     edi, [esp+34Ch+arg_0]
.text:00407668                 mov     ecx, [edi+edx*4+4]
.text:0040766C                 mov     [edi+edx*4], ecx
.text:0040766F                 inc     edx
.text:00407670                 cmp     edx, [esp+34Ch+arg_8]
.text:00407677                 jb      short loc_407661
.text:00407679                 jmp     loc_406B23
.text:0040767E ; ---------------------------------------------------------------------------
.text:0040767E
.text:0040767E loc_40767E:                             ; CODE XREF: sub_4069A0+C8A↑j
.text:0040767E                 mov     off_417098, ebp
.text:00407684                 jmp     short loc_40762C
.text:00407686 ; ---------------------------------------------------------------------------
.text:00407686
.text:00407686 loc_407686:                             ; CODE XREF: sub_4069A0+C82↑j
.text:00407686                 mov     [esp+34Ch+Size], offset aWarningCannotR ; "warning: cannot remove: %s"
.text:0040768D                 call    ds:libintl_gettext
.text:00407693                 mov     [esp+34Ch+var_340], edi ; char
.text:00407697                 mov     edi, [esp+34Ch+var_304]
.text:0040769B                 mov     [esp+34Ch+Size], 0 ; Code
.text:004076A2                 mov     [esp+34Ch+ElementCount], eax ; char *
.text:004076A6                 mov     [esp+34Ch+Src], edi ; ErrorMessage
.text:004076AA                 call    sub_40CB60
.text:004076AF                 jmp     loc_407624
.text:004076B4 ; ---------------------------------------------------------------------------
.text:004076B4
.text:004076B4 loc_4076B4:                             ; CODE XREF: sub_4069A0+C17↑j
.text:004076B4                 mov     [esp+34Ch+Size], offset aCloseFailed ; "close failed"
.text:004076BB
.text:004076BB loc_4076BB:                             ; CODE XREF: sub_4069A0+D67↓j
.text:004076BB                 call    ds:libintl_gettext
.text:004076C1                 test    ebx, ebx
.text:004076C3                 mov     esi, eax
.text:004076C5                 jz      short loc_4076D9
.text:004076C7
.text:004076C7 loc_4076C7:                             ; CODE XREF: sub_4069A0+D48↓j
.text:004076C7                 call    _errno
.text:004076CC                 mov     [esp+34Ch+var_33C], ebx
.text:004076D0                 mov     [esp+34Ch+var_340], esi
.text:004076D4                 jmp     loc_4070FC
.text:004076D9 ; ---------------------------------------------------------------------------
.text:004076D9
.text:004076D9 loc_4076D9:                             ; CODE XREF: sub_4069A0+D25↑j
.text:004076D9                 mov     [esp+34Ch+Size], offset aStandardOutput ; "standard output"
.text:004076E0                 call    ds:libintl_gettext
.text:004076E6                 mov     ebx, eax
.text:004076E8                 jmp     short loc_4076C7
.text:004076E8 ; ---------------------------------------------------------------------------
.text:004076EA                 align 10h
.text:004076F0
.text:004076F0 loc_4076F0:                             ; CODE XREF: sub_4069A0+C07↑j
.text:004076F0                 mov     [esp+34Ch+Size], edx ; Stream
.text:004076F3                 call    fflush
.text:004076F8                 test    eax, eax
.text:004076FA                 jz      loc_4075BD
.text:00407700                 mov     [esp+34Ch+Size], offset aFflushFailed ; "fflush failed"
.text:00407707                 jmp     short loc_4076BB
.text:00407707 ; ---------------------------------------------------------------------------
.text:00407709                 align 10h
.text:00407710
.text:00407710 loc_407710:                             ; CODE XREF: sub_4069A0+BFC↑j
.text:00407710                 test    byte ptr [edx+0Ch], 10h
.text:00407714                 jz      loc_4075BD
.text:0040771A                 mov     [esp+34Ch+Size], edx ; Stream
.text:0040771D                 call    clearerr
.text:00407722                 jmp     loc_4075BD
.text:00407727 ; ---------------------------------------------------------------------------
.text:00407727
.text:00407727 loc_407727:                             ; CODE XREF: sub_4069A0+94↑j
.text:00407727                 mov     [esp+34Ch+Size], offset aOpenFailed ; "open failed"
.text:0040772E                 mov     esi, ebx
.text:00407730                 call    ds:libintl_gettext
.text:00407736                 test    ebx, ebx
.text:00407738                 mov     edi, eax
.text:0040773A                 jz      short loc_40774A
.text:0040773C
.text:0040773C loc_40773C:                             ; CODE XREF: sub_4069A0+DB9↓j
.text:0040773C                 call    _errno
.text:00407741                 mov     [esp+34Ch+var_33C], esi
.text:00407745                 jmp     loc_4070F8
.text:0040774A ; ---------------------------------------------------------------------------
.text:0040774A
.text:0040774A loc_40774A:                             ; CODE XREF: sub_4069A0+D9A↑j
.text:0040774A                 mov     [esp+34Ch+Size], offset aStandardOutput ; "standard output"
.text:00407751                 call    ds:libintl_gettext
.text:00407757                 mov     esi, eax
.text:00407759                 jmp     short loc_40773C
.text:00407759 ; ---------------------------------------------------------------------------
.text:0040775B                 align 10h
.text:00407760
.text:00407760 loc_407760:                             ; CODE XREF: sub_4069A0+7C↑j
.text:00407760                 mov     ds:byte_4184C0, 1
.text:00407767                 mov     eax, ds:_iob
.text:0040776C                 jmp     loc_406A3A
.text:00407771 ; ---------------------------------------------------------------------------
.text:00407771
.text:00407771 loc_407771:                             ; CODE XREF: sub_4069A0+5E↑j
.text:00407771                 mov     eax, ds:_iob
.text:00407776                 add     eax, 20h ; ' '
.text:00407779                 jmp     loc_406A3A
.text:0040777E ; ---------------------------------------------------------------------------
.text:0040777E
.text:0040777E loc_40777E:                             ; CODE XREF: sub_4069A0+EF↑j
.text:0040777E                 call    sub_40A660
.text:0040777E sub_4069A0      endp
.text:0040777E
.text:0040777E ; ---------------------------------------------------------------------------
.text:00407783                 align 10h
.text:00407790
.text:00407790 ; =============== S U B R O U T I N E =======================================
.text:00407790
.text:00407790
.text:00407790 sub_407790      proc near               ; CODE XREF: sub_405AF0+57↑p
.text:00407790                                         ; sub_407970+A7↓p ...
.text:00407790
.text:00407790 var_3C          = dword ptr -3Ch
.text:00407790 var_38          = dword ptr -38h
.text:00407790 var_34          = dword ptr -34h
.text:00407790 var_30          = byte ptr -30h
.text:00407790 var_20          = dword ptr -20h
.text:00407790 var_1C          = dword ptr -1Ch
.text:00407790 var_18          = dword ptr -18h
.text:00407790 var_14          = dword ptr -14h
.text:00407790 arg_0           = dword ptr  4
.text:00407790 arg_4           = dword ptr  8
.text:00407790 arg_8           = dword ptr  0Ch
.text:00407790 arg_C           = dword ptr  10h
.text:00407790 arg_10          = dword ptr  14h
.text:00407790
.text:00407790                 push    ebp
.text:00407791                 push    edi
.text:00407792                 push    esi
.text:00407793                 push    ebx
.text:00407794                 sub     esp, 2Ch
.text:00407797                 mov     edx, [esp+3Ch+arg_4]
.text:0040779B                 mov     ebx, [esp+3Ch+arg_0]
.text:0040779F                 sub     edx, 10h
.text:004077A2                 mov     [esp+3Ch+var_1C], edx
.text:004077A6                 mov     edx, [esp+3Ch+arg_C]
.text:004077AA                 lea     esi, [esi+0]
.text:004077B0
.text:004077B0 loc_4077B0:                             ; CODE XREF: sub_407790+8D↓j
.text:004077B0                 sub     edx, 10h
.text:004077B3                 mov     [esp+3Ch+var_20], edx
.text:004077B7
.text:004077B7 loc_4077B7:                             ; CODE XREF: sub_407790+F6↓j
.text:004077B7                 mov     ecx, ds:dword_4184D0
.text:004077BD                 test    ecx, ecx
.text:004077BF                 jnz     loc_407930
.text:004077C5
.text:004077C5 loc_4077C5:                             ; CODE XREF: sub_407790+1CE↓j
.text:004077C5                 mov     edx, [esp+3Ch+var_20]
.text:004077C9                 mov     esi, [esp+3Ch+var_1C]
.text:004077CD                 mov     ebp, [edx+4]
.text:004077D0                 mov     ecx, [esi+4]
.text:004077D3                 dec     ebp
.text:004077D4                 dec     ecx
.text:004077D5                 mov     [esp+3Ch+var_14], ecx
.text:004077D9                 jnz     loc_407890
.text:004077DF                 xor     ecx, ecx
.text:004077E1                 test    ebp, ebp
.text:004077E3                 setz    cl
.text:004077E6                 dec     ecx
.text:004077E7
.text:004077E7 loc_4077E7:                             ; CODE XREF: sub_407790+107↓j
.text:004077E7                                         ; sub_407790+14E↓j ...
.text:004077E7                 cmp     ds:byte_418490, 0
.text:004077EE                 jz      short loc_4077F2
.text:004077F0                 neg     ecx
.text:004077F2
.text:004077F2 loc_4077F2:                             ; CODE XREF: sub_407790+5E↑j
.text:004077F2                                         ; sub_407790+1C8↓j
.text:004077F2                 test    ecx, ecx
.text:004077F4                 jle     short loc_407858
.text:004077F6                 mov     esi, [esp+3Ch+var_20]
.text:004077FA                 sub     ebx, 10h
.text:004077FD                 mov     ecx, [esi]
.text:004077FF                 mov     [ebx], ecx
.text:00407801                 mov     edx, [esi+4]
.text:00407804                 mov     [ebx+4], edx
.text:00407807                 mov     edi, [esi+8]
.text:0040780A                 mov     [ebx+8], edi
.text:0040780D                 mov     ebp, [esi+0Ch]
.text:00407810                 mov     [ebx+0Ch], ebp
.text:00407813                 dec     [esp+3Ch+arg_10]
.text:00407817                 jz      short loc_407820
.text:00407819                 mov     edx, [esp+3Ch+var_20]
.text:0040781D                 jmp     short loc_4077B0
.text:0040781D ; ---------------------------------------------------------------------------
.text:0040781F                 align 10h
.text:00407820
.text:00407820 loc_407820:                             ; CODE XREF: sub_407790+87↑j
.text:00407820                                         ; sub_407790+BE↓j
.text:00407820                 mov     edi, [esp+3Ch+var_1C]
.text:00407824                 sub     ebx, 10h
.text:00407827                 mov     ebp, [edi]
.text:00407829                 mov     [ebx], ebp
.text:0040782B                 mov     ecx, [edi+4]
.text:0040782E                 mov     [ebx+4], ecx
.text:00407831                 mov     edx, [edi+8]
.text:00407834                 mov     [ebx+8], edx
.text:00407837                 mov     esi, [edi+0Ch]
.text:0040783A                 mov     [ebx+0Ch], esi
.text:0040783D                 dec     [esp+3Ch+arg_8]
.text:00407841                 jz      short loc_407850
.text:00407843                 mov     ebp, [esp+3Ch+var_1C]
.text:00407847                 sub     ebp, 10h
.text:0040784A                 mov     [esp+3Ch+var_1C], ebp
.text:0040784E                 jmp     short loc_407820
.text:00407850 ; ---------------------------------------------------------------------------
.text:00407850
.text:00407850 loc_407850:                             ; CODE XREF: sub_407790+B1↑j
.text:00407850                                         ; sub_407790+E9↓j
.text:00407850                 add     esp, 2Ch
.text:00407853                 pop     ebx
.text:00407854                 pop     esi
.text:00407855                 pop     edi
.text:00407856                 pop     ebp
.text:00407857                 retn
.text:00407858 ; ---------------------------------------------------------------------------
.text:00407858
.text:00407858 loc_407858:                             ; CODE XREF: sub_407790+64↑j
.text:00407858                 mov     esi, [esp+3Ch+var_1C]
.text:0040785C                 sub     ebx, 10h
.text:0040785F                 mov     ecx, [esi]
.text:00407861                 mov     [ebx], ecx
.text:00407863                 mov     edx, [esi+4]
.text:00407866                 mov     [ebx+4], edx
.text:00407869                 mov     edi, [esi+8]
.text:0040786C                 mov     [ebx+8], edi
.text:0040786F                 mov     ebp, [esi+0Ch]
.text:00407872                 mov     [ebx+0Ch], ebp
.text:00407875                 dec     [esp+3Ch+arg_8]
.text:00407879                 jz      short loc_407850
.text:0040787B                 mov     edx, [esp+3Ch+var_1C]
.text:0040787F                 sub     edx, 10h
.text:00407882                 mov     [esp+3Ch+var_1C], edx
.text:00407886                 jmp     loc_4077B7
.text:00407886 ; ---------------------------------------------------------------------------
.text:0040788B                 align 10h
.text:00407890
.text:00407890 loc_407890:                             ; CODE XREF: sub_407790+49↑j
.text:00407890                 test    ebp, ebp
.text:00407892                 mov     ecx, 1
.text:00407897                 jz      loc_4077E7
.text:0040789D                 cmp     ds:byte_418040, 0
.text:004078A4                 jnz     short loc_407901
.text:004078A6                 cmp     ebp, [esp+3Ch+var_14]
.text:004078AA                 mov     eax, ebp
.text:004078AC                 mov     ecx, [esp+3Ch+var_1C]
.text:004078B0                 mov     edi, [esp+3Ch+var_20]
.text:004078B4                 mov     edx, [ecx]
.text:004078B6                 mov     [esp+3Ch+var_18], edx
.text:004078BA                 mov     edx, [edi]
.text:004078BC                 jbe     short loc_4078C2
.text:004078BE                 mov     eax, [esp+3Ch+var_14]
.text:004078C2
.text:004078C2 loc_4078C2:                             ; CODE XREF: sub_407790+12C↑j
.text:004078C2                 cld
.text:004078C3                 mov     esi, [esp+3Ch+var_18]
.text:004078C7                 mov     ecx, eax
.text:004078C9                 cmp     eax, eax
.text:004078CB                 mov     edi, edx
.text:004078CD                 repe cmpsb
.text:004078CF                 setnbe  dl
.text:004078D2                 setb    al
.text:004078D5                 mov     cl, dl
.text:004078D7                 sub     cl, al
.text:004078D9                 movsx   ecx, cl
.text:004078DC                 test    ecx, ecx
.text:004078DE                 jnz     loc_4077E7
.text:004078E4                 cmp     [esp+3Ch+var_14], ebp
.text:004078E8                 mov     ecx, 0FFFFFFFFh
.text:004078ED                 jb      loc_4077E7
.text:004078F3                 xor     ecx, ecx
.text:004078F5                 cmp     [esp+3Ch+var_14], ebp
.text:004078F9                 setnz   cl
.text:004078FC                 jmp     loc_4077E7
.text:00407901 ; ---------------------------------------------------------------------------
.text:00407901
.text:00407901 loc_407901:                             ; CODE XREF: sub_407790+114↑j
.text:00407901                 mov     dword ptr [esp+3Ch+var_30], ebp ; char
.text:00407905                 mov     esi, [esp+3Ch+var_20]
.text:00407909                 mov     ebp, [esp+3Ch+var_14]
.text:0040790D                 mov     eax, [esp+3Ch+var_1C]
.text:00407911                 mov     ecx, [esi]
.text:00407913                 mov     [esp+3Ch+var_38], ebp ; int
.text:00407917                 mov     [esp+3Ch+var_34], ecx ; char *
.text:0040791B                 mov     edi, [eax]
.text:0040791D                 mov     [esp+3Ch+var_3C], edi ; char *
.text:00407920                 call    sub_40A510
.text:00407925                 mov     ecx, eax
.text:00407927                 jmp     loc_4077E7
.text:00407927 ; ---------------------------------------------------------------------------
.text:0040792C                 align 10h
.text:00407930
.text:00407930 loc_407930:                             ; CODE XREF: sub_407790+2F↑j
.text:00407930                 mov     ebp, [esp+3Ch+var_20]
.text:00407934                 mov     eax, [esp+3Ch+var_1C]
.text:00407938                 mov     [esp+3Ch+var_38], ebp
.text:0040793C                 mov     [esp+3Ch+var_3C], eax
.text:0040793F                 call    sub_406350
.text:00407944                 movzx   edi, ds:byte_4184B0
.text:0040794B                 mov     ecx, eax
.text:0040794D                 movzx   esi, ds:byte_4184A0
.text:00407954                 or      edi, eax
.text:00407956                 or      edi, esi
.text:00407958                 jnz     loc_4077F2
.text:0040795E                 jmp     loc_4077C5
.text:0040795E sub_407790      endp
.text:0040795E
.text:0040795E ; ---------------------------------------------------------------------------
.text:00407963                 align 10h
.text:00407970
.text:00407970 ; =============== S U B R O U T I N E =======================================
.text:00407970
.text:00407970
.text:00407970 sub_407970      proc near               ; CODE XREF: sub_4049B0+1A7↑p
.text:00407970                                         ; sub_4049B0+B65↑p ...
.text:00407970
.text:00407970 var_6C          = dword ptr -6Ch
.text:00407970 var_68          = dword ptr -68h
.text:00407970 var_64          = dword ptr -64h
.text:00407970 var_60          = byte ptr -60h
.text:00407970 var_5C          = dword ptr -5Ch
.text:00407970 var_48          = dword ptr -48h
.text:00407970 var_44          = dword ptr -44h
.text:00407970 var_40          = dword ptr -40h
.text:00407970 var_3C          = dword ptr -3Ch
.text:00407970 var_38          = dword ptr -38h
.text:00407970 var_34          = dword ptr -34h
.text:00407970 var_30          = dword ptr -30h
.text:00407970 var_2C          = dword ptr -2Ch
.text:00407970 var_28          = dword ptr -28h
.text:00407970 var_24          = dword ptr -24h
.text:00407970 var_20          = dword ptr -20h
.text:00407970 arg_0           = dword ptr  4
.text:00407970 arg_4           = dword ptr  8
.text:00407970 arg_8           = dword ptr  0Ch
.text:00407970
.text:00407970                 push    ebp
.text:00407971                 push    edi
.text:00407972                 push    esi
.text:00407973                 push    ebx
.text:00407974                 sub     esp, 5Ch
.text:00407977                 mov     ebx, [esp+6Ch+arg_4]
.text:0040797B                 mov     ebp, [esp+6Ch+arg_0]
.text:0040797F                 cmp     ebx, 2
.text:00407982                 jz      loc_407BC2
.text:00407988                 mov     edi, ebx
.text:0040798A                 mov     ecx, ebx
.text:0040798C                 mov     eax, [esp+6Ch+arg_8]
.text:00407990                 shr     edi, 1
.text:00407992                 sub     ecx, edi
.text:00407994                 mov     esi, edi
.text:00407996                 mov     [esp+6Ch+var_3C], ecx
.text:0040799A                 shl     esi, 4
.text:0040799D                 mov     edx, [esp+6Ch+var_3C]
.text:004079A1                 mov     [esp+6Ch+var_38], edi
.text:004079A5                 mov     edi, ebp
.text:004079A7                 sub     edi, esi
.text:004079A9                 mov     [esp+6Ch+var_40], edi
.text:004079AD                 mov     [esp+6Ch+var_64], eax
.text:004079B1                 mov     [esp+6Ch+var_68], edx
.text:004079B5                 mov     [esp+6Ch+var_6C], edi
.text:004079B8                 call    sub_407970
.text:004079BD                 cmp     [esp+6Ch+var_38], 1
.text:004079C2                 jbe     loc_407BA1
.text:004079C8                 cmp     [esp+6Ch+var_38], 2
.text:004079CD                 jz      loc_407A66
.text:004079D3                 shr     ebx, 2
.text:004079D6                 mov     edi, [esp+6Ch+var_38]
.text:004079DA                 mov     ecx, ebp
.text:004079DC                 mov     esi, [esp+6Ch+arg_8]
.text:004079E0                 mov     edx, ebx
.text:004079E2                 shl     edx, 4
.text:004079E5                 sub     ecx, edx
.text:004079E7                 sub     edi, ebx
.text:004079E9                 sub     esi, edx
.text:004079EB                 mov     [esp+6Ch+var_64], esi
.text:004079EF                 mov     [esp+6Ch+var_68], edi
.text:004079F3                 mov     [esp+6Ch+var_6C], ecx
.text:004079F6                 call    sub_405AF0
.text:004079FB                 cmp     ebx, 1
.text:004079FE                 ja      short loc_407A50
.text:00407A00
.text:00407A00 loc_407A00:                             ; CODE XREF: sub_407970+F4↓j
.text:00407A00                 mov     [esp+6Ch+var_5C], edi
.text:00407A04                 mov     eax, [esp+6Ch+arg_8]
.text:00407A08                 mov     dword ptr [esp+6Ch+var_60], esi
.text:00407A0C                 mov     [esp+6Ch+var_64], ebx
.text:00407A10                 mov     [esp+6Ch+var_68], ebp
.text:00407A14                 mov     [esp+6Ch+var_6C], eax
.text:00407A17                 call    sub_407790
.text:00407A1C                 lea     esi, [esi+0]
.text:00407A20
.text:00407A20 loc_407A20:                             ; CODE XREF: sub_407970+179↓j
.text:00407A20                                         ; sub_407970+24D↓j
.text:00407A20                 mov     [esp+6Ch+var_6C], ebp
.text:00407A23                 mov     edx, [esp+6Ch+var_3C]
.text:00407A27                 mov     edi, [esp+6Ch+var_40]
.text:00407A2B                 mov     esi, [esp+6Ch+var_38]
.text:00407A2F                 mov     eax, [esp+6Ch+arg_8]
.text:00407A33                 mov     [esp+6Ch+var_5C], edx
.text:00407A37                 mov     dword ptr [esp+6Ch+var_60], edi
.text:00407A3B                 mov     [esp+6Ch+var_64], esi
.text:00407A3F                 mov     [esp+6Ch+var_68], eax
.text:00407A43                 call    sub_407790
.text:00407A48
.text:00407A48 loc_407A48:                             ; CODE XREF: sub_407970+288↓j
.text:00407A48                                         ; sub_407970+2CE↓j
.text:00407A48                 add     esp, 5Ch
.text:00407A4B                 pop     ebx
.text:00407A4C                 pop     esi
.text:00407A4D                 pop     edi
.text:00407A4E                 pop     ebp
.text:00407A4F                 retn
.text:00407A50 ; ---------------------------------------------------------------------------
.text:00407A50
.text:00407A50 loc_407A50:                             ; CODE XREF: sub_407970+8E↑j
.text:00407A50                 mov     [esp+6Ch+var_68], ebx
.text:00407A54                 mov     ecx, [esp+6Ch+arg_8]
.text:00407A58                 mov     [esp+6Ch+var_6C], ebp
.text:00407A5B                 mov     [esp+6Ch+var_64], ecx
.text:00407A5F                 call    sub_407970
.text:00407A64                 jmp     short loc_407A00
.text:00407A66 ; ---------------------------------------------------------------------------
.text:00407A66
.text:00407A66 loc_407A66:                             ; CODE XREF: sub_407970+5D↑j
.text:00407A66                 mov     ebx, ds:dword_4184D0
.text:00407A6C                 lea     esi, [ebp-10h]
.text:00407A6F                 lea     edi, [ebp-20h]
.text:00407A72                 test    ebx, ebx
.text:00407A74                 jnz     loc_407B76
.text:00407A7A
.text:00407A7A loc_407A7A:                             ; CODE XREF: sub_407970+22C↓j
.text:00407A7A                 mov     ebx, [edi+4]
.text:00407A7D                 mov     eax, [esi+4]
.text:00407A80                 dec     ebx
.text:00407A81                 dec     eax
.text:00407A82                 mov     [esp+6Ch+var_44], eax
.text:00407A86                 jnz     short loc_407AEE
.text:00407A88                 xor     ecx, ecx
.text:00407A8A                 test    ebx, ebx
.text:00407A8C                 setz    cl
.text:00407A8F                 dec     ecx
.text:00407A90
.text:00407A90 loc_407A90:                             ; CODE XREF: sub_407970+185↓j
.text:00407A90                                         ; sub_407970+1C0↓j ...
.text:00407A90                 cmp     ds:byte_418490, 0
.text:00407A97                 jz      short loc_407A9B
.text:00407A99                 neg     ecx
.text:00407A9B
.text:00407A9B loc_407A9B:                             ; CODE XREF: sub_407970+127↑j
.text:00407A9B                                         ; sub_407970+226↓j
.text:00407A9B                 xor     edx, edx
.text:00407A9D                 mov     esi, [esp+6Ch+arg_8]
.text:00407AA1                 test    ecx, ecx
.text:00407AA3                 setnle  dl
.text:00407AA6                 mov     edi, edx
.text:00407AA8                 not     edi
.text:00407AAA                 shl     edi, 4
.text:00407AAD                 mov     ecx, [ebp+edi+0]
.text:00407AB1                 shl     edx, 4
.text:00407AB4                 add     edx, ebp
.text:00407AB6                 mov     [esi-10h], ecx
.text:00407AB9                 mov     ebx, [ebp+edi+4]
.text:00407ABD                 mov     [esi-0Ch], ebx
.text:00407AC0                 mov     ecx, [ebp+edi+8]
.text:00407AC4                 mov     [esi-8], ecx
.text:00407AC7                 mov     ebx, [ebp+edi+0Ch]
.text:00407ACB                 mov     [esi-4], ebx
.text:00407ACE                 mov     edi, [edx-20h]
.text:00407AD1                 lea     ebx, [edx-20h]
.text:00407AD4                 mov     [esi-20h], edi
.text:00407AD7                 mov     edx, [ebx+4]
.text:00407ADA                 mov     [esi-1Ch], edx
.text:00407ADD                 mov     ecx, [ebx+8]
.text:00407AE0                 mov     [esi-18h], ecx
.text:00407AE3                 mov     edi, [ebx+0Ch]
.text:00407AE6                 mov     [esi-14h], edi
.text:00407AE9                 jmp     loc_407A20
.text:00407AEE ; ---------------------------------------------------------------------------
.text:00407AEE
.text:00407AEE loc_407AEE:                             ; CODE XREF: sub_407970+116↑j
.text:00407AEE                 test    ebx, ebx
.text:00407AF0                 mov     ecx, 1
.text:00407AF5                 jz      short loc_407A90
.text:00407AF7                 cmp     ds:byte_418040, 0
.text:00407AFE                 jnz     short loc_407B53
.text:00407B00                 cmp     ebx, [esp+6Ch+var_44]
.text:00407B04                 mov     eax, ebx
.text:00407B06                 mov     edx, [esi]
.text:00407B08                 mov     [esp+6Ch+var_48], edx
.text:00407B0C                 mov     edx, [edi]
.text:00407B0E                 jbe     short loc_407B14
.text:00407B10                 mov     eax, [esp+6Ch+var_44]
.text:00407B14
.text:00407B14 loc_407B14:                             ; CODE XREF: sub_407970+19E↑j
.text:00407B14                 cld
.text:00407B15                 mov     esi, [esp+6Ch+var_48]
.text:00407B19                 mov     ecx, eax
.text:00407B1B                 cmp     eax, eax
.text:00407B1D                 mov     edi, edx
.text:00407B1F                 repe cmpsb
.text:00407B21                 setnbe  dl
.text:00407B24                 setb    al
.text:00407B27                 mov     cl, dl
.text:00407B29                 sub     cl, al
.text:00407B2B                 movsx   ecx, cl
.text:00407B2E                 test    ecx, ecx
.text:00407B30                 jnz     loc_407A90
.text:00407B36                 cmp     [esp+6Ch+var_44], ebx
.text:00407B3A                 mov     ecx, 0FFFFFFFFh
.text:00407B3F                 jb      loc_407A90
.text:00407B45                 xor     ecx, ecx
.text:00407B47                 cmp     [esp+6Ch+var_44], ebx
.text:00407B4B                 setnz   cl
.text:00407B4E                 jmp     loc_407A90
.text:00407B53 ; ---------------------------------------------------------------------------
.text:00407B53
.text:00407B53 loc_407B53:                             ; CODE XREF: sub_407970+18E↑j
.text:00407B53                 mov     dword ptr [esp+6Ch+var_60], ebx ; char
.text:00407B57                 mov     ecx, [edi]
.text:00407B59                 mov     ebx, [esp+6Ch+var_44]
.text:00407B5D                 mov     [esp+6Ch+var_64], ecx ; char *
.text:00407B61                 mov     [esp+6Ch+var_68], ebx ; int
.text:00407B65                 mov     edi, [esi]
.text:00407B67                 mov     [esp+6Ch+var_6C], edi ; char *
.text:00407B6A                 call    sub_40A510
.text:00407B6F                 mov     ecx, eax
.text:00407B71                 jmp     loc_407A90
.text:00407B76 ; ---------------------------------------------------------------------------
.text:00407B76
.text:00407B76 loc_407B76:                             ; CODE XREF: sub_407970+104↑j
.text:00407B76                 mov     [esp+6Ch+var_68], edi
.text:00407B7A                 mov     [esp+6Ch+var_6C], esi
.text:00407B7D                 call    sub_406350
.text:00407B82                 movzx   edx, ds:byte_4184B0
.text:00407B89                 mov     ecx, eax
.text:00407B8B                 movzx   ebx, ds:byte_4184A0
.text:00407B92                 or      edx, eax
.text:00407B94                 or      edx, ebx
.text:00407B96                 jnz     loc_407A9B
.text:00407B9C                 jmp     loc_407A7A
.text:00407BA1 ; ---------------------------------------------------------------------------
.text:00407BA1
.text:00407BA1 loc_407BA1:                             ; CODE XREF: sub_407970+52↑j
.text:00407BA1                 mov     ecx, [ebp-10h]
.text:00407BA4                 mov     esi, [esp+6Ch+arg_8]
.text:00407BA8                 mov     [esi-10h], ecx
.text:00407BAB                 mov     edx, [ebp-0Ch]
.text:00407BAE                 mov     [esi-0Ch], edx
.text:00407BB1                 mov     ebx, [ebp-8]
.text:00407BB4                 mov     [esi-8], ebx
.text:00407BB7                 mov     edi, [ebp-4]
.text:00407BBA                 mov     [esi-4], edi
.text:00407BBD                 jmp     loc_407A20
.text:00407BC2 ; ---------------------------------------------------------------------------
.text:00407BC2
.text:00407BC2 loc_407BC2:                             ; CODE XREF: sub_407970+12↑j
.text:00407BC2                 mov     eax, ds:dword_4184D0
.text:00407BC7                 lea     esi, [ebp-10h]
.text:00407BCA                 lea     edi, [ebp-20h]
.text:00407BCD                 test    eax, eax
.text:00407BCF                 jnz     loc_407CD0
.text:00407BD5
.text:00407BD5 loc_407BD5:                             ; CODE XREF: sub_407970+386↓j
.text:00407BD5                 mov     ebx, [edi+4]
.text:00407BD8                 mov     ecx, [esi+4]
.text:00407BDB                 dec     ebx
.text:00407BDC                 dec     ecx
.text:00407BDD                 mov     [esp+6Ch+var_30], ecx
.text:00407BE1                 jnz     short loc_407C43
.text:00407BE3                 xor     ecx, ecx
.text:00407BE5                 test    ebx, ebx
.text:00407BE7                 setz    cl
.text:00407BEA                 dec     ecx
.text:00407BEB
.text:00407BEB loc_407BEB:                             ; CODE XREF: sub_407970+2DA↓j
.text:00407BEB                                         ; sub_407970+315↓j ...
.text:00407BEB                 cmp     ds:byte_418490, 0
.text:00407BF2                 jz      short loc_407BF6
.text:00407BF4                 neg     ecx
.text:00407BF6
.text:00407BF6 loc_407BF6:                             ; CODE XREF: sub_407970+282↑j
.text:00407BF6                                         ; sub_407970+380↓j
.text:00407BF6                 test    ecx, ecx
.text:00407BF8                 jle     loc_407A48
.text:00407BFE                 mov     ebx, [ebp-10h]
.text:00407C01                 mov     [esp+6Ch+var_2C], ebx
.text:00407C05                 mov     ecx, [ebp-0Ch]
.text:00407C08                 mov     [esp+6Ch+var_28], ecx
.text:00407C0C                 mov     edx, [ebp-8]
.text:00407C0F                 mov     [esp+6Ch+var_24], edx
.text:00407C13                 mov     edi, [ebp-4]
.text:00407C16                 mov     [esp+6Ch+var_20], edi
.text:00407C1A                 mov     esi, [ebp-20h]
.text:00407C1D                 mov     [ebp-20h], ebx
.text:00407C20                 mov     [ebp-10h], esi
.text:00407C23                 mov     esi, [ebp-1Ch]
.text:00407C26                 mov     [ebp-1Ch], ecx
.text:00407C29                 mov     [ebp-0Ch], esi
.text:00407C2C                 mov     esi, [ebp-18h]
.text:00407C2F                 mov     [ebp-18h], edx
.text:00407C32                 mov     [ebp-8], esi
.text:00407C35                 mov     esi, [ebp-14h]
.text:00407C38                 mov     [ebp-14h], edi
.text:00407C3B                 mov     [ebp-4], esi
.text:00407C3E                 jmp     loc_407A48
.text:00407C43 ; ---------------------------------------------------------------------------
.text:00407C43
.text:00407C43 loc_407C43:                             ; CODE XREF: sub_407970+271↑j
.text:00407C43                 test    ebx, ebx
.text:00407C45                 mov     ecx, 1
.text:00407C4A                 jz      short loc_407BEB
.text:00407C4C                 cmp     ds:byte_418040, 0
.text:00407C53                 jnz     short loc_407CA8
.text:00407C55                 cmp     ebx, [esp+6Ch+var_30]
.text:00407C59                 mov     eax, ebx
.text:00407C5B                 mov     edx, [esi]
.text:00407C5D                 mov     [esp+6Ch+var_34], edx
.text:00407C61                 mov     edx, [edi]
.text:00407C63                 jbe     short loc_407C69
.text:00407C65                 mov     eax, [esp+6Ch+var_30]
.text:00407C69
.text:00407C69 loc_407C69:                             ; CODE XREF: sub_407970+2F3↑j
.text:00407C69                 cld
.text:00407C6A                 mov     esi, [esp+6Ch+var_34]
.text:00407C6E                 mov     ecx, eax
.text:00407C70                 cmp     eax, eax
.text:00407C72                 mov     edi, edx
.text:00407C74                 repe cmpsb
.text:00407C76                 setnbe  dl
.text:00407C79                 setb    al
.text:00407C7C                 mov     cl, dl
.text:00407C7E                 sub     cl, al
.text:00407C80                 movsx   ecx, cl
.text:00407C83                 test    ecx, ecx
.text:00407C85                 jnz     loc_407BEB
.text:00407C8B                 cmp     [esp+6Ch+var_30], ebx
.text:00407C8F                 mov     ecx, 0FFFFFFFFh
.text:00407C94                 jb      loc_407BEB
.text:00407C9A                 xor     ecx, ecx
.text:00407C9C                 cmp     [esp+6Ch+var_30], ebx
.text:00407CA0                 setnz   cl
.text:00407CA3                 jmp     loc_407BEB
.text:00407CA8 ; ---------------------------------------------------------------------------
.text:00407CA8
.text:00407CA8 loc_407CA8:                             ; CODE XREF: sub_407970+2E3↑j
.text:00407CA8                 mov     dword ptr [esp+6Ch+var_60], ebx ; char
.text:00407CAC                 mov     eax, [esp+6Ch+var_30]
.text:00407CB0                 mov     ebx, [edi]
.text:00407CB2                 mov     [esp+6Ch+var_68], eax ; int
.text:00407CB6                 mov     [esp+6Ch+var_64], ebx ; char *
.text:00407CBA                 mov     edi, [esi]
.text:00407CBC                 mov     [esp+6Ch+var_6C], edi ; char *
.text:00407CBF                 call    sub_40A510
.text:00407CC4                 mov     ecx, eax
.text:00407CC6                 jmp     loc_407BEB
.text:00407CC6 ; ---------------------------------------------------------------------------
.text:00407CCB                 align 10h
.text:00407CD0
.text:00407CD0 loc_407CD0:                             ; CODE XREF: sub_407970+25F↑j
.text:00407CD0                 mov     [esp+6Ch+var_68], edi
.text:00407CD4                 mov     [esp+6Ch+var_6C], esi
.text:00407CD7                 call    sub_406350
.text:00407CDC                 movzx   edx, ds:byte_4184B0
.text:00407CE3                 mov     ecx, eax
.text:00407CE5                 movzx   ebx, ds:byte_4184A0
.text:00407CEC                 or      edx, eax
.text:00407CEE                 or      edx, ebx
.text:00407CF0                 jnz     loc_407BF6
.text:00407CF6                 jmp     loc_407BD5
.text:00407CF6 sub_407970      endp
.text:00407CF6
.text:00407CF6 ; ---------------------------------------------------------------------------
.text:00407CFB                 align 10h
.text:00407D00
.text:00407D00 ; =============== S U B R O U T I N E =======================================
.text:00407D00
.text:00407D00
.text:00407D00 ; int __cdecl sub_407D00(int, int, int, char *)
.text:00407D00 sub_407D00      proc near               ; CODE XREF: sub_404600+1E7↑p
.text:00407D00
.text:00407D00 Str1            = dword ptr -14Ch
.text:00407D00 Str2            = dword ptr -148h
.text:00407D00 Size            = dword ptr -144h
.text:00407D00 var_140         = dword ptr -140h
.text:00407D00 var_13C         = dword ptr -13Ch
.text:00407D00 var_120         = dword ptr -120h
.text:00407D00 var_110         = dword ptr -110h
.text:00407D00 var_10C         = dword ptr -10Ch
.text:00407D00 Src             = dword ptr -108h
.text:00407D00 var_FE          = byte ptr -0FEh
.text:00407D00 var_FD          = byte ptr -0FDh
.text:00407D00 var_FC          = dword ptr -0FCh
.text:00407D00 var_F4          = dword ptr -0F4h
.text:00407D00 var_F0          = dword ptr -0F0h
.text:00407D00 var_EC          = dword ptr -0ECh
.text:00407D00 var_E8          = dword ptr -0E8h
.text:00407D00 var_8C          = dword ptr -8Ch
.text:00407D00 var_84          = dword ptr -84h
.text:00407D00 var_80          = dword ptr -80h
.text:00407D00 var_7C          = dword ptr -7Ch
.text:00407D00 var_78          = dword ptr -78h
.text:00407D00 arg_0           = dword ptr  4
.text:00407D00 arg_4           = dword ptr  8
.text:00407D00 arg_8           = dword ptr  0Ch
.text:00407D00 arg_C           = dword ptr  10h
.text:00407D00
.text:00407D00                 push    ebp
.text:00407D01                 push    edi
.text:00407D02                 push    esi
.text:00407D03                 push    ebx
.text:00407D04                 sub     esp, 13Ch
.text:00407D0A                 mov     ebp, [esp+14Ch+arg_4]
.text:00407D11                 cmp     ebp, [esp+14Ch+arg_8]
.text:00407D18                 mov     [esp+14Ch+var_FD], 0
.text:00407D1D                 jnb     loc_407E59
.text:00407D23                 lea     edx, [ebp+1]
.text:00407D26                 mov     [esp+14Ch+var_110], edx
.text:00407D2A                 lea     esi, [esi+0]
.text:00407D30
.text:00407D30 loc_407D30:                             ; CODE XREF: sub_407D00+153↓j
.text:00407D30                 cld
.text:00407D31                 mov     esi, [esp+14Ch+var_110]
.text:00407D35                 mov     ecx, 2
.text:00407D3A                 mov     edx, [esp+14Ch+arg_0]
.text:00407D41                 mov     edi, offset asc_401530 ; "-"
.text:00407D46                 mov     eax, [esp+14Ch+arg_C]
.text:00407D4D                 mov     ebx, [edx+esi*4-4]
.text:00407D51                 mov     esi, ebx
.text:00407D53                 mov     [esp+14Ch+var_120], ebx
.text:00407D57                 repe cmpsb
.text:00407D59                 setz    bl
.text:00407D5C                 test    eax, eax
.text:00407D5E                 jz      short loc_407D90
.text:00407D60                 mov     edi, [esp+14Ch+var_120]
.text:00407D64                 mov     ecx, [esp+14Ch+arg_C]
.text:00407D6B                 mov     [esp+14Ch+Str2], edi ; Str2
.text:00407D6F                 mov     [esp+14Ch+Str1], ecx ; Str1
.text:00407D72                 call    strcmp
.text:00407D77                 test    eax, eax
.text:00407D79                 jnz     short loc_407D90
.text:00407D7B                 test    bl, bl
.text:00407D7D                 jz      loc_407E6B
.text:00407D83                 lea     esi, [esi+0]
.text:00407D89                 lea     edi, [edi+0]
.text:00407D90
.text:00407D90 loc_407D90:                             ; CODE XREF: sub_407D00+5E↑j
.text:00407D90                                         ; sub_407D00+79↑j
.text:00407D90                 cmp     [esp+14Ch+var_FD], 0
.text:00407D95                 jnz     short loc_407DCD
.text:00407D97                 mov     eax, [esp+14Ch+arg_C]
.text:00407D9E                 test    eax, eax
.text:00407DA0                 jz      loc_408004
.text:00407DA6                 mov     esi, [esp+14Ch+arg_C]
.text:00407DAD                 lea     edx, [esp+14Ch+var_8C]
.text:00407DB4                 mov     [esp+14Ch+Str2], edx ; int
.text:00407DB8                 mov     [esp+14Ch+Str1], esi ; char *
.text:00407DBB                 call    sub_40F910
.text:00407DC0
.text:00407DC0 loc_407DC0:                             ; CODE XREF: sub_407D00+31B↓j
.text:00407DC0                 test    eax, eax
.text:00407DC2                 jnz     loc_407E59
.text:00407DC8                 mov     [esp+14Ch+var_FD], 1
.text:00407DCD
.text:00407DCD loc_407DCD:                             ; CODE XREF: sub_407D00+95↑j
.text:00407DCD                 mov     [esp+14Ch+var_FE], 0
.text:00407DD2                 test    bl, bl
.text:00407DD4                 jz      loc_407FE0
.text:00407DDA                 mov     [esp+14Ch+Str1], 0
.text:00407DE1                 lea     ebx, [esp+14Ch+var_FC]
.text:00407DE5                 mov     [esp+14Ch+Str2], ebx
.text:00407DE9                 call    sub_40CE00
.text:00407DEE
.text:00407DEE loc_407DEE:                             ; CODE XREF: sub_407D00+2FF↓j
.text:00407DEE                 test    eax, eax
.text:00407DF0                 jnz     short loc_407E40
.text:00407DF2                 mov     edx, [esp+14Ch+var_F0]
.text:00407DF6                 mov     eax, [esp+14Ch+var_F4]
.text:00407DFA                 mov     esi, [esp+14Ch+var_84]
.text:00407E01                 mov     ecx, [esp+14Ch+var_80]
.text:00407E08                 mov     edi, edx
.text:00407E0A                 xor     esi, eax
.text:00407E0C                 xor     edi, ecx
.text:00407E0E                 or      esi, edi
.text:00407E10                 jnz     short loc_407E40
.text:00407E12                 mov     edx, [esp+14Ch+var_E8]
.text:00407E16                 mov     edi, [esp+14Ch+var_EC]
.text:00407E1A                 mov     esi, [esp+14Ch+var_7C]
.text:00407E21                 mov     ecx, [esp+14Ch+var_78]
.text:00407E28                 mov     eax, edx
.text:00407E2A                 xor     esi, edi
.text:00407E2C                 xor     eax, ecx
.text:00407E2E                 or      eax, esi
.text:00407E30                 jnz     short loc_407E40
.text:00407E32                 mov     [esp+14Ch+var_FE], 1
.text:00407E37                 mov     esi, esi
.text:00407E39                 lea     edi, [edi+0]
.text:00407E40
.text:00407E40 loc_407E40:                             ; CODE XREF: sub_407D00+F0↑j
.text:00407E40                                         ; sub_407D00+110↑j ...
.text:00407E40                 cmp     [esp+14Ch+var_FE], 0
.text:00407E45                 jnz     short loc_407E6B
.text:00407E47                 inc     [esp+14Ch+var_110]
.text:00407E4B                 inc     ebp
.text:00407E4C                 cmp     ebp, [esp+14Ch+arg_8]
.text:00407E53                 jb      loc_407D30
.text:00407E59
.text:00407E59 loc_407E59:                             ; CODE XREF: sub_407D00+1D↑j
.text:00407E59                                         ; sub_407D00+C2↑j
.text:00407E59                 mov     eax, [esp+14Ch+arg_8]
.text:00407E60
.text:00407E60 loc_407E60:                             ; CODE XREF: sub_407D00+2D6↓j
.text:00407E60                 add     esp, 13Ch
.text:00407E66                 pop     ebx
.text:00407E67                 pop     esi
.text:00407E68                 pop     edi
.text:00407E69                 pop     ebp
.text:00407E6A                 retn
.text:00407E6B ; ---------------------------------------------------------------------------
.text:00407E6B
.text:00407E6B loc_407E6B:                             ; CODE XREF: sub_407D00+7D↑j
.text:00407E6B                                         ; sub_407D00+145↑j
.text:00407E6B                 mov     ecx, ds:dword_418460
.text:00407E71                 mov     ebx, ds:dword_418010
.text:00407E77                 mov     esi, [ecx+ebx*4]
.text:00407E7A                 mov     [esp+14Ch+Src], esi
.text:00407E7E                 mov     [esp+14Ch+Str1], esi ; Str
.text:00407E81                 call    strlen
.text:00407E86                 lea     edi, [eax+10h]
.text:00407E89                 mov     esi, eax
.text:00407E8B                 mov     [esp+14Ch+Str1], edi ; size_t
.text:00407E8E                 call    sub_40A180
.text:00407E93                 mov     [esp+14Ch+var_10C], eax
.text:00407E97                 mov     edx, [esp+14Ch+Src]
.text:00407E9B                 mov     edi, eax
.text:00407E9D                 mov     [esp+14Ch+Size], esi ; Size
.text:00407EA1                 add     edi, 4
.text:00407EA4                 mov     [esp+14Ch+Str1], edi ; void *
.text:00407EA7                 mov     [esp+14Ch+Str2], edx ; Src
.text:00407EAB                 call    memcpy
.text:00407EB0                 mov     ecx, ds:dword_4014F0
.text:00407EB6                 mov     ebx, ds:dword_4014F4
.text:00407EBC                 mov     edx, ds:dword_4014F8
.text:00407EC2                 mov     [esi+edi], ecx
.text:00407EC5                 xor     ecx, ecx
.text:00407EC7                 mov     [esi+edi+4], ebx
.text:00407ECB                 mov     [esi+edi+8], edx
.text:00407ECF                 mov     ebx, ds:dword_418010
.text:00407ED5                 mov     esi, [esp+14Ch+var_10C]
.text:00407ED9                 inc     ebx
.text:00407EDA                 cmp     ebx, ds:dword_418470
.text:00407EE0                 mov     dword ptr [esi], 0
.text:00407EE6                 mov     [esp+14Ch+Str1], edi ; char *
.text:00407EE9                 setz    cl
.text:00407EEC                 dec     ecx
.text:00407EED                 and     ebx, ecx
.text:00407EEF                 mov     ds:dword_418010, ebx
.text:00407EF5                 call    sub_410330
.text:00407EFA                 test    eax, eax
.text:00407EFC                 mov     esi, eax
.text:00407EFE                 js      short loc_407F12
.text:00407F00                 mov     ebx, off_417098
.text:00407F06                 mov     edx, [esp+14Ch+var_10C]
.text:00407F0A                 mov     [ebx], edx
.text:00407F0C                 mov     off_417098, edx
.text:00407F12
.text:00407F12 loc_407F12:                             ; CODE XREF: sub_407D00+1FE↑j
.text:00407F12                 call    _errno
.text:00407F17                 mov     ebx, [eax]
.text:00407F19                 call    _errno
.text:00407F1E                 test    esi, esi
.text:00407F20                 mov     [eax], ebx
.text:00407F22                 js      short loc_407F38
.text:00407F24                 mov     [esp+14Ch+Str2], offset Format ; Format
.text:00407F2C                 mov     [esp+14Ch+Str1], esi ; FileHandle
.text:00407F2F                 call    _fdopen
.text:00407F34                 test    eax, eax
.text:00407F36                 jnz     short loc_407F91
.text:00407F38
.text:00407F38 loc_407F38:                             ; CODE XREF: sub_407D00+222↑j
.text:00407F38                 mov     [esp+14Ch+Str1], offset aCannotCreateTe ; "cannot create temporary file"
.text:00407F3F                 mov     ebx, edi
.text:00407F41                 call    ds:libintl_gettext
.text:00407F47                 test    edi, edi
.text:00407F49                 mov     esi, eax
.text:00407F4B                 jz      short loc_407F80
.text:00407F4D
.text:00407F4D loc_407F4D:                             ; CODE XREF: sub_407D00+28F↓j
.text:00407F4D                 call    _errno
.text:00407F52                 mov     [esp+14Ch+var_13C], ebx
.text:00407F56                 mov     [esp+14Ch+var_140], esi ; char
.text:00407F5A                 mov     [esp+14Ch+Size], offset aSS ; "%s: %s"
.text:00407F62                 mov     ebp, [eax]
.text:00407F64                 mov     [esp+14Ch+Str1], 0 ; Code
.text:00407F6B                 mov     [esp+14Ch+Str2], ebp ; ErrorMessage
.text:00407F6F                 call    sub_40CB60
.text:00407F74                 mov     [esp+14Ch+Str1], 2 ; Code
.text:00407F7B                 call    exit
.text:00407F80 ; ---------------------------------------------------------------------------
.text:00407F80
.text:00407F80 loc_407F80:                             ; CODE XREF: sub_407D00+24B↑j
.text:00407F80                 mov     [esp+14Ch+Str1], offset aStandardOutput ; "standard output"
.text:00407F87                 call    ds:libintl_gettext
.text:00407F8D                 mov     ebx, eax
.text:00407F8F                 jmp     short loc_407F4D
.text:00407F91 ; ---------------------------------------------------------------------------
.text:00407F91
.text:00407F91 loc_407F91:                             ; CODE XREF: sub_407D00+236↑j
.text:00407F91                 sub     [esp+14Ch+arg_8], ebp
.text:00407F98                 mov     ecx, [esp+14Ch+arg_0]
.text:00407F9F                 mov     [esp+14Ch+var_140], eax ; FILE *
.text:00407FA3                 mov     ebx, [esp+14Ch+arg_8]
.text:00407FAA                 lea     esi, [ecx+ebp*4]
.text:00407FAD                 mov     [esp+14Ch+var_13C], edi ; char *
.text:00407FB1                 mov     [esp+14Ch+Size], ebx ; int
.text:00407FB5                 mov     [esp+14Ch+Str2], 0 ; int
.text:00407FBD                 mov     [esp+14Ch+Str1], esi ; int
.text:00407FC0                 call    sub_4069A0
.text:00407FC5                 mov     edx, [esp+14Ch+var_110]
.text:00407FC9                 mov     eax, [esp+14Ch+arg_0]
.text:00407FD0                 mov     [eax+edx*4-4], edi
.text:00407FD4                 mov     eax, edx
.text:00407FD6                 jmp     loc_407E60
.text:00407FD6 ; ---------------------------------------------------------------------------
.text:00407FDB                 align 10h
.text:00407FE0
.text:00407FE0 loc_407FE0:                             ; CODE XREF: sub_407D00+D4↑j
.text:00407FE0                 mov     edx, [esp+14Ch+var_110]
.text:00407FE4                 lea     esi, [esp+14Ch+var_FC]
.text:00407FE8                 mov     eax, [esp+14Ch+arg_0]
.text:00407FEF                 mov     [esp+14Ch+Str2], esi ; int
.text:00407FF3                 mov     edi, [eax+edx*4-4]
.text:00407FF7                 mov     [esp+14Ch+Str1], edi ; char *
.text:00407FFA                 call    sub_40F910
.text:00407FFF                 jmp     loc_407DEE
.text:00408004 ; ---------------------------------------------------------------------------
.text:00408004
.text:00408004 loc_408004:                             ; CODE XREF: sub_407D00+A0↑j
.text:00408004                 mov     [esp+14Ch+Str1], 1
.text:0040800B                 lea     ecx, [esp+14Ch+var_8C]
.text:00408012                 mov     [esp+14Ch+Str2], ecx
.text:00408016                 call    sub_40CE00
.text:0040801B                 jmp     loc_407DC0
.text:0040801B sub_407D00      endp
.text:0040801B
.text:00408020
.text:00408020 ; =============== S U B R O U T I N E =======================================
.text:00408020
.text:00408020
.text:00408020 sub_408020      proc near               ; CODE XREF: sub_406030+246↑p
.text:00408020                                         ; sub_406350+162↑p ...
.text:00408020
.text:00408020 arg_0           = dword ptr  4
.text:00408020 arg_4           = dword ptr  8
.text:00408020
.text:00408020                 push    ebp
.text:00408021                 push    edi
.text:00408022                 push    esi
.text:00408023                 push    ebx
.text:00408024                 mov     ecx, [esp+10h+arg_0]
.text:00408028                 mov     edi, [esp+10h+arg_4]
.text:0040802C                 mov     esi, [ecx+4]
.text:0040802F                 mov     edx, [ecx]
.text:00408031                 mov     ebp, [edi+4]
.text:00408034                 lea     ebx, [esi+edx]
.text:00408037                 mov     esi, dword_417094
.text:0040803D                 lea     ecx, [ebx-1]
.text:00408040                 mov     ebx, [edi]
.text:00408042                 cmp     esi, 80h ; '€'
.text:00408048                 jz      loc_4080D5
.text:0040804E                 cmp     edx, ecx
.text:00408050                 jnb     short loc_408080
.text:00408052                 dec     ebx
.text:00408053                 cmp     ebx, 0FFFFFFFFh
.text:00408056                 jz      short loc_408080
.text:00408058                 nop
.text:00408059                 lea     esi, [esi+0]
.text:00408060
.text:00408060 loc_408060:                             ; CODE XREF: sub_408020+4C↓j
.text:00408060                                         ; sub_408020+59↓j
.text:00408060                 cmp     edx, ecx
.text:00408062                 jnb     short loc_408080
.text:00408064                 movsx   eax, byte ptr [edx]
.text:00408067                 cmp     eax, esi
.text:00408069                 jz      short loc_408070
.text:0040806B                 inc     edx
.text:0040806C                 jmp     short loc_408060
.text:0040806C ; ---------------------------------------------------------------------------
.text:0040806E                 align 10h
.text:00408070
.text:00408070 loc_408070:                             ; CODE XREF: sub_408020+49↑j
.text:00408070                 inc     edx
.text:00408071                 cmp     edx, ecx
.text:00408073                 jnb     short loc_408080
.text:00408075                 dec     ebx
.text:00408076                 cmp     ebx, 0FFFFFFFFh
.text:00408079                 jnz     short loc_408060
.text:0040807B                 nop
.text:0040807C                 lea     esi, [esi+0]
.text:00408080
.text:00408080 loc_408080:                             ; CODE XREF: sub_408020+30↑j
.text:00408080                                         ; sub_408020+36↑j ...
.text:00408080                 cmp     byte ptr [edi+18h], 0
.text:00408084                 jz      short loc_4080C0
.text:00408086                 cmp     edx, ecx
.text:00408088                 jnb     short loc_4080C0
.text:0040808A                 movzx   ebx, byte ptr [edx]
.text:0040808D                 cmp     ds:byte_418050[ebx], 0
.text:00408094                 jz      short loc_4080C0
.text:00408096                 lea     esi, [esi+0]
.text:00408099                 lea     edi, [edi+0]
.text:004080A0
.text:004080A0 loc_4080A0:                             ; CODE XREF: sub_408020+8F↓j
.text:004080A0                 inc     edx
.text:004080A1                 cmp     edx, ecx
.text:004080A3                 jnb     short loc_4080C0
.text:004080A5                 movzx   edi, byte ptr [edx]
.text:004080A8                 cmp     ds:byte_418050[edi], 0
.text:004080AF                 jnz     short loc_4080A0
.text:004080B1                 jmp     short loc_4080C0
.text:004080B1 ; ---------------------------------------------------------------------------
.text:004080B3                 align 10h
.text:004080C0
.text:004080C0 loc_4080C0:                             ; CODE XREF: sub_408020+64↑j
.text:004080C0                                         ; sub_408020+68↑j ...
.text:004080C0                 mov     esi, ecx
.text:004080C2                 sub     esi, edx
.text:004080C4                 cmp     ebp, esi
.text:004080C6                 jnb     short loc_4080D1
.text:004080C8                 add     edx, ebp
.text:004080CA
.text:004080CA loc_4080CA:                             ; CODE XREF: sub_408020+B3↓j
.text:004080CA                 pop     ebx
.text:004080CB                 mov     eax, edx
.text:004080CD                 pop     esi
.text:004080CE                 pop     edi
.text:004080CF                 pop     ebp
.text:004080D0                 retn
.text:004080D1 ; ---------------------------------------------------------------------------
.text:004080D1
.text:004080D1 loc_4080D1:                             ; CODE XREF: sub_408020+A6↑j
.text:004080D1                 mov     edx, ecx
.text:004080D3                 jmp     short loc_4080CA
.text:004080D5 ; ---------------------------------------------------------------------------
.text:004080D5
.text:004080D5 loc_4080D5:                             ; CODE XREF: sub_408020+28↑j
.text:004080D5                                         ; sub_408020+E1↓j
.text:004080D5                 cmp     edx, ecx
.text:004080D7                 jnb     short loc_408080
.text:004080D9                 dec     ebx
.text:004080DA                 cmp     ebx, 0FFFFFFFFh
.text:004080DD                 jz      short loc_408080
.text:004080DF                 nop
.text:004080E0
.text:004080E0 loc_4080E0:                             ; CODE XREF: sub_408020+D1↓j
.text:004080E0                 cmp     edx, ecx
.text:004080E2                 jnb     short loc_408080
.text:004080E4                 movzx   esi, byte ptr [edx]
.text:004080E7                 cmp     ds:byte_418050[esi], 0
.text:004080EE                 jz      short loc_4080F3
.text:004080F0                 inc     edx
.text:004080F1                 jmp     short loc_4080E0
.text:004080F3 ; ---------------------------------------------------------------------------
.text:004080F3
.text:004080F3 loc_4080F3:                             ; CODE XREF: sub_408020+CE↑j
.text:004080F3                                         ; sub_408020+E4↓j
.text:004080F3                 cmp     edx, ecx
.text:004080F5                 jnb     short loc_408080
.text:004080F7                 movzx   esi, byte ptr [edx]
.text:004080FA                 cmp     ds:byte_418050[esi], 0
.text:00408101                 jnz     short loc_4080D5
.text:00408103                 inc     edx
.text:00408104                 jmp     short loc_4080F3
.text:00408104 sub_408020      endp
.text:00408104
.text:00408104 ; ---------------------------------------------------------------------------
.text:00408106                 align 10h
.text:00408110
.text:00408110 ; =============== S U B R O U T I N E =======================================
.text:00408110
.text:00408110
.text:00408110 sub_408110      proc near               ; CODE XREF: sub_406030+22E↑p
.text:00408110                                         ; sub_406350+129↑p ...
.text:00408110
.text:00408110 arg_0           = dword ptr  4
.text:00408110 arg_4           = dword ptr  8
.text:00408110
.text:00408110                 push    ebp
.text:00408111                 push    edi
.text:00408112                 push    esi
.text:00408113                 push    ebx
.text:00408114                 mov     ecx, [esp+10h+arg_0]
.text:00408118                 mov     ebp, [esp+10h+arg_4]
.text:0040811C                 mov     esi, [ecx+4]
.text:0040811F                 mov     edx, [ecx]
.text:00408121                 mov     edi, [ebp+0Ch]
.text:00408124                 lea     ebx, [esi+edx]
.text:00408127                 mov     esi, dword_417094
.text:0040812D                 lea     ecx, [ebx-1]
.text:00408130                 mov     ebx, [ebp+8]
.text:00408133                 cmp     esi, 80h ; '€'
.text:00408139                 jz      loc_4081D5
.text:0040813F                 cmp     edx, ecx
.text:00408141                 jnb     short loc_408180
.text:00408143                 dec     ebx
.text:00408144                 cmp     ebx, 0FFFFFFFFh
.text:00408147                 jz      short loc_408180
.text:00408149                 lea     esi, [esi+0]
.text:00408150
.text:00408150 loc_408150:                             ; CODE XREF: sub_408110+4C↓j
.text:00408150                                         ; sub_408110+5F↓j
.text:00408150                 cmp     edx, ecx
.text:00408152                 jnb     short loc_408180
.text:00408154                 movsx   eax, byte ptr [edx]
.text:00408157                 cmp     eax, esi
.text:00408159                 jz      short loc_408160
.text:0040815B                 inc     edx
.text:0040815C                 jmp     short loc_408150
.text:0040815C ; ---------------------------------------------------------------------------
.text:0040815E                 align 10h
.text:00408160
.text:00408160 loc_408160:                             ; CODE XREF: sub_408110+49↑j
.text:00408160                 mov     eax, ebx
.text:00408162                 or      eax, edi
.text:00408164                 jz      short loc_408167
.text:00408166                 inc     edx
.text:00408167
.text:00408167 loc_408167:                             ; CODE XREF: sub_408110+54↑j
.text:00408167                 cmp     edx, ecx
.text:00408169                 jnb     short loc_408180
.text:0040816B                 dec     ebx
.text:0040816C                 cmp     ebx, 0FFFFFFFFh
.text:0040816F                 jnz     short loc_408150
.text:00408171                 jmp     short loc_408180
.text:00408171 ; ---------------------------------------------------------------------------
.text:00408173                 align 10h
.text:00408180
.text:00408180 loc_408180:                             ; CODE XREF: sub_408110+31↑j
.text:00408180                                         ; sub_408110+37↑j ...
.text:00408180                 cmp     byte ptr [ebp+19h], 0
.text:00408184                 jz      short loc_4081C0
.text:00408186                 cmp     edx, ecx
.text:00408188                 jnb     short loc_4081C0
.text:0040818A                 movzx   ebx, byte ptr [edx]
.text:0040818D                 cmp     ds:byte_418050[ebx], 0
.text:00408194                 jz      short loc_4081C0
.text:00408196                 lea     esi, [esi+0]
.text:00408199                 lea     edi, [edi+0]
.text:004081A0
.text:004081A0 loc_4081A0:                             ; CODE XREF: sub_408110+9F↓j
.text:004081A0                 inc     edx
.text:004081A1                 cmp     edx, ecx
.text:004081A3                 jnb     short loc_4081C0
.text:004081A5                 movzx   ebp, byte ptr [edx]
.text:004081A8                 cmp     ss:byte_418050[ebp], 0
.text:004081AF                 jnz     short loc_4081A0
.text:004081B1                 jmp     short loc_4081C0
.text:004081B1 ; ---------------------------------------------------------------------------
.text:004081B3                 align 10h
.text:004081C0
.text:004081C0 loc_4081C0:                             ; CODE XREF: sub_408110+74↑j
.text:004081C0                                         ; sub_408110+78↑j ...
.text:004081C0                 mov     esi, ecx
.text:004081C2                 sub     esi, edx
.text:004081C4                 cmp     edi, esi
.text:004081C6                 jnb     short loc_4081D1
.text:004081C8                 add     edx, edi
.text:004081CA
.text:004081CA loc_4081CA:                             ; CODE XREF: sub_408110+C3↓j
.text:004081CA                 pop     ebx
.text:004081CB                 mov     eax, edx
.text:004081CD                 pop     esi
.text:004081CE                 pop     edi
.text:004081CF                 pop     ebp
.text:004081D0                 retn
.text:004081D1 ; ---------------------------------------------------------------------------
.text:004081D1
.text:004081D1 loc_4081D1:                             ; CODE XREF: sub_408110+B6↑j
.text:004081D1                 mov     edx, ecx
.text:004081D3                 jmp     short loc_4081CA
.text:004081D5 ; ---------------------------------------------------------------------------
.text:004081D5
.text:004081D5 loc_4081D5:                             ; CODE XREF: sub_408110+29↑j
.text:004081D5                                         ; sub_408110+F1↓j
.text:004081D5                 cmp     edx, ecx
.text:004081D7                 jnb     short loc_408180
.text:004081D9                 dec     ebx
.text:004081DA                 cmp     ebx, 0FFFFFFFFh
.text:004081DD                 jz      short loc_408180
.text:004081DF                 nop
.text:004081E0
.text:004081E0 loc_4081E0:                             ; CODE XREF: sub_408110+E1↓j
.text:004081E0                 cmp     edx, ecx
.text:004081E2                 jnb     short loc_408180
.text:004081E4                 movzx   esi, byte ptr [edx]
.text:004081E7                 cmp     ds:byte_418050[esi], 0
.text:004081EE                 jz      short loc_4081F3
.text:004081F0                 inc     edx
.text:004081F1                 jmp     short loc_4081E0
.text:004081F3 ; ---------------------------------------------------------------------------
.text:004081F3
.text:004081F3 loc_4081F3:                             ; CODE XREF: sub_408110+DE↑j
.text:004081F3                                         ; sub_408110+F4↓j
.text:004081F3                 cmp     edx, ecx
.text:004081F5                 jnb     short loc_408180
.text:004081F7                 movzx   esi, byte ptr [edx]
.text:004081FA                 cmp     ds:byte_418050[esi], 0
.text:00408201                 jnz     short loc_4081D5
.text:00408203                 inc     edx
.text:00408204                 jmp     short loc_4081F3
.text:00408204 sub_408110      endp
.text:00408204
.text:00408204 ; ---------------------------------------------------------------------------
.text:00408206                 align 10h
.text:00408210
.text:00408210 ; =============== S U B R O U T I N E =======================================
.text:00408210
.text:00408210
.text:00408210 sub_408210      proc near               ; CODE XREF: sub_406350+D8↑p
.text:00408210                                         ; DATA XREF: sub_406350+C8↑o
.text:00408210
.text:00408210 var_20          = byte ptr -20h
.text:00408210 var_1F          = byte ptr -1Fh
.text:00408210 var_1E          = byte ptr -1Eh
.text:00408210 var_1D          = byte ptr -1Dh
.text:00408210 var_1C          = dword ptr -1Ch
.text:00408210 var_18          = dword ptr -18h
.text:00408210 var_11          = byte ptr -11h
.text:00408210 arg_0           = dword ptr  4
.text:00408210 arg_4           = dword ptr  8
.text:00408210
.text:00408210                 push    ebp
.text:00408211                 push    edi
.text:00408212                 push    esi
.text:00408213                 push    ebx
.text:00408214                 sub     esp, 10h
.text:00408217                 mov     ecx, [esp+20h+arg_0]
.text:0040821B                 mov     ebx, [esp+20h+arg_4]
.text:0040821F                 movzx   eax, byte ptr [ecx]
.text:00408222                 movzx   edx, al
.text:00408225                 cmp     ds:byte_418050[edx], 0
.text:0040822C                 mov     [esp+20h+var_11], al
.text:00408230                 jz      short loc_408260
.text:00408232                 lea     esi, [esi+0]
.text:00408239                 lea     edi, [edi+0]
.text:00408240
.text:00408240 loc_408240:                             ; CODE XREF: sub_408210+42↓j
.text:00408240                 inc     ecx
.text:00408241                 movzx   eax, byte ptr [ecx]
.text:00408244                 movzx   edx, al
.text:00408247                 cmp     ds:byte_418050[edx], 0
.text:0040824E                 mov     [esp+20h+var_11], al
.text:00408252                 jnz     short loc_408240
.text:00408254                 lea     esi, [esi+0]
.text:0040825A                 lea     edi, [edi+0]
.text:00408260
.text:00408260 loc_408260:                             ; CODE XREF: sub_408210+20↑j
.text:00408260                                         ; sub_408210+60↓j
.text:00408260                 movzx   edx, byte ptr [ebx]
.text:00408263                 movzx   esi, dl
.text:00408266                 cmp     ds:byte_418050[esi], 0
.text:0040826D                 jz      short loc_408272
.text:0040826F                 inc     ebx
.text:00408270                 jmp     short loc_408260
.text:00408272 ; ---------------------------------------------------------------------------
.text:00408272
.text:00408272 loc_408272:                             ; CODE XREF: sub_408210+5D↑j
.text:00408272                 cmp     [esp+20h+var_11], 2Dh ; '-'
.text:00408277                 jz      loc_40842E
.text:0040827D                 cmp     dl, 2Dh ; '-'
.text:00408280                 jz      loc_4083A4
.text:00408286                 mov     ebp, ds:dword_418030
.text:0040828C                 lea     esi, [esi+0]
.text:00408290
.text:00408290 loc_408290:                             ; CODE XREF: sub_408210+98↓j
.text:00408290                 cmp     [esp+20h+var_11], 30h ; '0'
.text:00408295                 jz      short loc_4082A0
.text:00408297                 movsx   edi, [esp+20h+var_11]
.text:0040829C                 cmp     edi, ebp
.text:0040829E                 jnz     short loc_4082B0
.text:004082A0
.text:004082A0 loc_4082A0:                             ; CODE XREF: sub_408210+85↑j
.text:004082A0                 inc     ecx
.text:004082A1                 movzx   eax, byte ptr [ecx]
.text:004082A4                 mov     [esp+20h+var_11], al
.text:004082A8                 jmp     short loc_408290
.text:004082A8 ; ---------------------------------------------------------------------------
.text:004082AA                 align 10h
.text:004082B0
.text:004082B0 loc_4082B0:                             ; CODE XREF: sub_408210+8E↑j
.text:004082B0                                         ; sub_408210+B0↓j
.text:004082B0                 cmp     dl, 30h ; '0'
.text:004082B3                 jz      short loc_4082BC
.text:004082B5                 movsx   esi, dl
.text:004082B8                 cmp     esi, ebp
.text:004082BA                 jnz     short loc_4082C2
.text:004082BC
.text:004082BC loc_4082BC:                             ; CODE XREF: sub_408210+A3↑j
.text:004082BC                 inc     ebx
.text:004082BD                 movzx   edx, byte ptr [ebx]
.text:004082C0                 jmp     short loc_4082B0
.text:004082C2 ; ---------------------------------------------------------------------------
.text:004082C2
.text:004082C2 loc_4082C2:                             ; CODE XREF: sub_408210+AA↑j
.text:004082C2                                         ; sub_408210+DB↓j
.text:004082C2                 cmp     [esp+20h+var_11], dl
.text:004082C6                 jnz     short loc_4082ED
.text:004082C8                 lea     eax, [esi-30h]
.text:004082CB                 cmp     eax, 9
.text:004082CE                 ja      short loc_4082ED
.text:004082D0
.text:004082D0 loc_4082D0:                             ; CODE XREF: sub_408210+CD↓j
.text:004082D0                 inc     ecx
.text:004082D1                 movzx   edx, byte ptr [ecx]
.text:004082D4                 movsx   edi, dl
.text:004082D7                 cmp     edi, ebp
.text:004082D9                 mov     [esp+20h+var_11], dl
.text:004082DD                 jz      short loc_4082D0
.text:004082DF                 nop
.text:004082E0
.text:004082E0 loc_4082E0:                             ; CODE XREF: sub_408210+D9↓j
.text:004082E0                 inc     ebx
.text:004082E1                 movzx   edx, byte ptr [ebx]
.text:004082E4                 movsx   esi, dl
.text:004082E7                 cmp     esi, ebp
.text:004082E9                 jz      short loc_4082E0
.text:004082EB                 jmp     short loc_4082C2
.text:004082ED ; ---------------------------------------------------------------------------
.text:004082ED
.text:004082ED loc_4082ED:                             ; CODE XREF: sub_408210+B6↑j
.text:004082ED                                         ; sub_408210+BE↑j
.text:004082ED                 movzx   eax, ds:byte_418020
.text:004082F4                 cmp     [esp+20h+var_11], al
.text:004082F8                 mov     [esp+20h+var_20], al
.text:004082FB                 jz      loc_408397
.text:00408301
.text:00408301 loc_408301:                             ; CODE XREF: sub_408210+18F↓j
.text:00408301                 cmp     dl, [esp+20h+var_20]
.text:00408304                 jz      short loc_40837B
.text:00408306
.text:00408306 loc_408306:                             ; CODE XREF: sub_408210+171↓j
.text:00408306                 mov     [esp+20h+var_1C], 0
.text:0040830E                 mov     edx, edi
.text:00408310                 sub     edx, esi
.text:00408312                 mov     [esp+20h+var_18], edx
.text:00408316                 lea     edx, [edi-30h]
.text:00408319                 cmp     edx, 9
.text:0040831C                 ja      short loc_408332
.text:0040831E
.text:0040831E loc_40831E:                             ; CODE XREF: sub_408210+114↓j
.text:0040831E                                         ; sub_408210+120↓j
.text:0040831E                 inc     ecx
.text:0040831F                 movsx   eax, byte ptr [ecx]
.text:00408322                 cmp     eax, ebp
.text:00408324                 jz      short loc_40831E
.text:00408326                 inc     [esp+20h+var_1C]
.text:0040832A                 sub     eax, 30h ; '0'
.text:0040832D                 cmp     eax, 9
.text:00408330                 jbe     short loc_40831E
.text:00408332
.text:00408332 loc_408332:                             ; CODE XREF: sub_408210+10C↑j
.text:00408332                 lea     edi, [esi-30h]
.text:00408335                 xor     edx, edx
.text:00408337                 cmp     edi, 9
.text:0040833A                 ja      short loc_40834D
.text:0040833C
.text:0040833C loc_40833C:                             ; CODE XREF: sub_408210+132↓j
.text:0040833C                                         ; sub_408210+13B↓j
.text:0040833C                 inc     ebx
.text:0040833D                 movsx   eax, byte ptr [ebx]
.text:00408340                 cmp     eax, ebp
.text:00408342                 jz      short loc_40833C
.text:00408344                 sub     eax, 30h ; '0'
.text:00408347                 inc     edx
.text:00408348                 cmp     eax, 9
.text:0040834B                 jbe     short loc_40833C
.text:0040834D
.text:0040834D loc_40834D:                             ; CODE XREF: sub_408210+12A↑j
.text:0040834D                 cmp     [esp+20h+var_1C], edx
.text:00408351                 jz      short loc_408366
.text:00408353                 cmp     [esp+20h+var_1C], edx
.text:00408357                 sbb     esi, esi
.text:00408359                 or      esi, 1
.text:0040835C
.text:0040835C loc_40835C:                             ; CODE XREF: sub_408210+169↓j
.text:0040835C                                         ; sub_408210+1C4↓j ...
.text:0040835C                 add     esp, 10h
.text:0040835F                 mov     eax, esi
.text:00408361                 pop     ebx
.text:00408362                 pop     esi
.text:00408363                 pop     edi
.text:00408364                 pop     ebp
.text:00408365                 retn
.text:00408366 ; ---------------------------------------------------------------------------
.text:00408366
.text:00408366 loc_408366:                             ; CODE XREF: sub_408210+141↑j
.text:00408366                                         ; sub_408210+33F↓j
.text:00408366                 xor     ebx, ebx
.text:00408368                 mov     eax, [esp+20h+var_18]
.text:0040836C                 cmp     [esp+20h+var_1C], 0
.text:00408371                 setz    bl
.text:00408374                 lea     esi, [ebx-1]
.text:00408377                 and     esi, eax
.text:00408379                 jmp     short loc_40835C
.text:0040837B ; ---------------------------------------------------------------------------
.text:0040837B
.text:0040837B loc_40837B:                             ; CODE XREF: sub_408210+F4↑j
.text:0040837B                 lea     edx, [edi-30h]
.text:0040837E                 cmp     edx, 9
.text:00408381                 jbe     short loc_408306
.text:00408383
.text:00408383 loc_408383:                             ; CODE XREF: sub_408210+18D↓j
.text:00408383                 mov     [esp+20h+arg_4], ebx
.text:00408387                 mov     [esp+20h+arg_0], ecx
.text:0040838B
.text:0040838B loc_40838B:                             ; CODE XREF: sub_408210+366↓j
.text:0040838B                 add     esp, 10h
.text:0040838E                 pop     ebx
.text:0040838F                 pop     esi
.text:00408390                 pop     edi
.text:00408391                 pop     ebp
.text:00408392                 jmp     sub_408760
.text:00408397 ; ---------------------------------------------------------------------------
.text:00408397
.text:00408397 loc_408397:                             ; CODE XREF: sub_408210+EB↑j
.text:00408397                 lea     eax, [esi-30h]
.text:0040839A                 cmp     eax, 9
.text:0040839D                 ja      short loc_408383
.text:0040839F                 jmp     loc_408301
.text:004083A4 ; ---------------------------------------------------------------------------
.text:004083A4
.text:004083A4 loc_4083A4:                             ; CODE XREF: sub_408210+70↑j
.text:004083A4                 mov     ebp, ds:dword_418030
.text:004083AA
.text:004083AA loc_4083AA:                             ; CODE XREF: sub_408210+1A1↓j
.text:004083AA                                         ; sub_408210+1A8↓j
.text:004083AA                 inc     ebx
.text:004083AB                 movzx   edx, byte ptr [ebx]
.text:004083AE                 cmp     dl, 30h ; '0'
.text:004083B1                 jz      short loc_4083AA
.text:004083B3                 movsx   esi, dl
.text:004083B6                 cmp     esi, ebp
.text:004083B8                 jz      short loc_4083AA
.text:004083BA                 movzx   eax, ds:byte_418020
.text:004083C1                 cmp     dl, al
.text:004083C3                 mov     [esp+20h+var_1F], al
.text:004083C7                 jz      short loc_408420
.text:004083C9
.text:004083C9 loc_4083C9:                             ; CODE XREF: sub_408210+21C↓j
.text:004083C9                 lea     ebx, [esi-30h]
.text:004083CC                 cmp     ebx, 9
.text:004083CF                 mov     esi, 1
.text:004083D4                 jbe     short loc_40835C
.text:004083D6
.text:004083D6 loc_4083D6:                             ; CODE XREF: sub_408210+1DE↓j
.text:004083D6                 cmp     [esp+20h+var_11], 30h ; '0'
.text:004083DB                 jz      short loc_4083E6
.text:004083DD                 movsx   edi, [esp+20h+var_11]
.text:004083E2                 cmp     edi, ebp
.text:004083E4                 jnz     short loc_4083F0
.text:004083E6
.text:004083E6 loc_4083E6:                             ; CODE XREF: sub_408210+1CB↑j
.text:004083E6                 inc     ecx
.text:004083E7                 movzx   edx, byte ptr [ecx]
.text:004083EA                 mov     [esp+20h+var_11], dl
.text:004083EE                 jmp     short loc_4083D6
.text:004083F0 ; ---------------------------------------------------------------------------
.text:004083F0
.text:004083F0 loc_4083F0:                             ; CODE XREF: sub_408210+1D4↑j
.text:004083F0                 movzx   ebx, [esp+20h+var_1F]
.text:004083F5                 cmp     [esp+20h+var_11], bl
.text:004083F9                 jz      short loc_40840C
.text:004083FB
.text:004083FB loc_4083FB:                             ; CODE XREF: sub_408210+20B↓j
.text:004083FB                 lea     esi, [edi-30h]
.text:004083FE                 cmp     esi, 9
.text:00408401                 setbe   cl
.text:00408404                 movzx   esi, cl
.text:00408407                 jmp     loc_40835C
.text:0040840C ; ---------------------------------------------------------------------------
.text:0040840C
.text:0040840C loc_40840C:                             ; CODE XREF: sub_408210+1E9↑j
.text:0040840C                                         ; sub_408210+206↓j
.text:0040840C                 inc     ecx
.text:0040840D                 movzx   eax, byte ptr [ecx]
.text:00408410                 cmp     al, 30h ; '0'
.text:00408412                 mov     [esp+20h+var_11], al
.text:00408416                 jz      short loc_40840C
.text:00408418                 movsx   edi, al
.text:0040841B                 jmp     short loc_4083FB
.text:0040841B ; ---------------------------------------------------------------------------
.text:0040841D                 align 10h
.text:00408420
.text:00408420 loc_408420:                             ; CODE XREF: sub_408210+1B7↑j
.text:00408420                                         ; sub_408210+217↓j
.text:00408420                 inc     ebx
.text:00408421                 movzx   edx, byte ptr [ebx]
.text:00408424                 cmp     dl, 30h ; '0'
.text:00408427                 jz      short loc_408420
.text:00408429                 movsx   esi, dl
.text:0040842C                 jmp     short loc_4083C9
.text:0040842E ; ---------------------------------------------------------------------------
.text:0040842E
.text:0040842E loc_40842E:                             ; CODE XREF: sub_408210+67↑j
.text:0040842E                 mov     ebp, ds:dword_418030
.text:00408434
.text:00408434 loc_408434:                             ; CODE XREF: sub_408210+22E↓j
.text:00408434                                         ; sub_408210+235↓j
.text:00408434                 inc     ecx
.text:00408435                 movzx   eax, byte ptr [ecx]
.text:00408438                 cmp     al, 30h ; '0'
.text:0040843A                 mov     [esp+20h+var_11], al
.text:0040843E                 jz      short loc_408434
.text:00408440                 movsx   edi, al
.text:00408443                 cmp     edi, ebp
.text:00408445                 jz      short loc_408434
.text:00408447                 cmp     dl, 2Dh ; '-'
.text:0040844A                 jz      short loc_4084B2
.text:0040844C                 movzx   eax, ds:byte_418020
.text:00408453                 cmp     [esp+20h+var_11], al
.text:00408457                 mov     [esp+20h+var_1D], al
.text:0040845B                 jz      short loc_4084A1
.text:0040845D
.text:0040845D loc_40845D:                             ; CODE XREF: sub_408210+2A0↓j
.text:0040845D                 lea     ecx, [edi-30h]
.text:00408460                 mov     esi, 0FFFFFFFFh
.text:00408465                 cmp     ecx, 9
.text:00408468                 jbe     loc_40835C
.text:0040846E
.text:0040846E loc_40846E:                             ; CODE XREF: sub_408210+26E↓j
.text:0040846E                 cmp     dl, 30h ; '0'
.text:00408471                 jz      short loc_40847A
.text:00408473                 movsx   esi, dl
.text:00408476                 cmp     esi, ebp
.text:00408478                 jnz     short loc_408480
.text:0040847A
.text:0040847A loc_40847A:                             ; CODE XREF: sub_408210+261↑j
.text:0040847A                 inc     ebx
.text:0040847B                 movzx   edx, byte ptr [ebx]
.text:0040847E                 jmp     short loc_40846E
.text:00408480 ; ---------------------------------------------------------------------------
.text:00408480
.text:00408480 loc_408480:                             ; CODE XREF: sub_408210+268↑j
.text:00408480                 cmp     dl, [esp+20h+var_1D]
.text:00408484                 jz      short loc_408493
.text:00408486
.text:00408486 loc_408486:                             ; CODE XREF: sub_408210+28F↓j
.text:00408486                 lea     ebx, [esi-30h]
.text:00408489                 cmp     ebx, 0Ah
.text:0040848C                 sbb     esi, esi
.text:0040848E                 jmp     loc_40835C
.text:00408493 ; ---------------------------------------------------------------------------
.text:00408493
.text:00408493 loc_408493:                             ; CODE XREF: sub_408210+274↑j
.text:00408493                                         ; sub_408210+28A↓j
.text:00408493                 inc     ebx
.text:00408494                 movzx   edx, byte ptr [ebx]
.text:00408497                 cmp     dl, 30h ; '0'
.text:0040849A                 jz      short loc_408493
.text:0040849C                 movsx   esi, dl
.text:0040849F                 jmp     short loc_408486
.text:004084A1 ; ---------------------------------------------------------------------------
.text:004084A1
.text:004084A1 loc_4084A1:                             ; CODE XREF: sub_408210+24B↑j
.text:004084A1                                         ; sub_408210+29B↓j
.text:004084A1                 inc     ecx
.text:004084A2                 movzx   eax, byte ptr [ecx]
.text:004084A5                 cmp     al, 30h ; '0'
.text:004084A7                 mov     [esp+20h+var_11], al
.text:004084AB                 jz      short loc_4084A1
.text:004084AD                 movsx   edi, al
.text:004084B0                 jmp     short loc_40845D
.text:004084B2 ; ---------------------------------------------------------------------------
.text:004084B2
.text:004084B2 loc_4084B2:                             ; CODE XREF: sub_408210+23A↑j
.text:004084B2                                         ; sub_408210+2A9↓j ...
.text:004084B2                 inc     ebx
.text:004084B3                 movzx   edx, byte ptr [ebx]
.text:004084B6                 cmp     dl, 30h ; '0'
.text:004084B9                 jz      short loc_4084B2
.text:004084BB                 movsx   esi, dl
.text:004084BE                 cmp     esi, ebp
.text:004084C0                 jz      short loc_4084B2
.text:004084C2
.text:004084C2 loc_4084C2:                             ; CODE XREF: sub_408210+2DB↓j
.text:004084C2                 cmp     [esp+20h+var_11], dl
.text:004084C6                 jnz     short loc_4084ED
.text:004084C8                 lea     eax, [esi-30h]
.text:004084CB                 cmp     eax, 9
.text:004084CE                 ja      short loc_4084ED
.text:004084D0
.text:004084D0 loc_4084D0:                             ; CODE XREF: sub_408210+2CD↓j
.text:004084D0                 inc     ecx
.text:004084D1                 movzx   edx, byte ptr [ecx]
.text:004084D4                 movsx   edi, dl
.text:004084D7                 cmp     edi, ebp
.text:004084D9                 mov     [esp+20h+var_11], dl
.text:004084DD                 jz      short loc_4084D0
.text:004084DF                 nop
.text:004084E0
.text:004084E0 loc_4084E0:                             ; CODE XREF: sub_408210+2D9↓j
.text:004084E0                 inc     ebx
.text:004084E1                 movzx   edx, byte ptr [ebx]
.text:004084E4                 movsx   esi, dl
.text:004084E7                 cmp     esi, ebp
.text:004084E9                 jz      short loc_4084E0
.text:004084EB                 jmp     short loc_4084C2
.text:004084ED ; ---------------------------------------------------------------------------
.text:004084ED
.text:004084ED loc_4084ED:                             ; CODE XREF: sub_408210+2B6↑j
.text:004084ED                                         ; sub_408210+2BE↑j
.text:004084ED                 movzx   eax, ds:byte_418020
.text:004084F4                 cmp     [esp+20h+var_11], al
.text:004084F8                 mov     [esp+20h+var_1E], al
.text:004084FC                 jz      short loc_40857B
.text:004084FE
.text:004084FE loc_4084FE:                             ; CODE XREF: sub_408210+373↓j
.text:004084FE                 cmp     dl, [esp+20h+var_1E]
.text:00408502                 jz      short loc_408566
.text:00408504
.text:00408504 loc_408504:                             ; CODE XREF: sub_408210+35C↓j
.text:00408504                 mov     [esp+20h+var_1C], 0
.text:0040850C                 mov     edx, esi
.text:0040850E                 sub     edx, edi
.text:00408510                 mov     [esp+20h+var_18], edx
.text:00408514                 lea     edx, [edi-30h]
.text:00408517                 cmp     edx, 9
.text:0040851A                 ja      short loc_408530
.text:0040851C
.text:0040851C loc_40851C:                             ; CODE XREF: sub_408210+312↓j
.text:0040851C                                         ; sub_408210+31E↓j
.text:0040851C                 inc     ecx
.text:0040851D                 movsx   edi, byte ptr [ecx]
.text:00408520                 cmp     edi, ebp
.text:00408522                 jz      short loc_40851C
.text:00408524                 inc     [esp+20h+var_1C]
.text:00408528                 lea     edx, [edi-30h]
.text:0040852B                 cmp     edx, 9
.text:0040852E                 jbe     short loc_40851C
.text:00408530
.text:00408530 loc_408530:                             ; CODE XREF: sub_408210+30A↑j
.text:00408530                 lea     edi, [esi-30h]
.text:00408533                 xor     edx, edx
.text:00408535                 cmp     edi, 9
.text:00408538                 ja      short loc_40854B
.text:0040853A
.text:0040853A loc_40853A:                             ; CODE XREF: sub_408210+330↓j
.text:0040853A                                         ; sub_408210+339↓j
.text:0040853A                 inc     ebx
.text:0040853B                 movsx   esi, byte ptr [ebx]
.text:0040853E                 cmp     esi, ebp
.text:00408540                 jz      short loc_40853A
.text:00408542                 lea     ecx, [esi-30h]
.text:00408545                 inc     edx
.text:00408546                 cmp     ecx, 9
.text:00408549                 jbe     short loc_40853A
.text:0040854B
.text:0040854B loc_40854B:                             ; CODE XREF: sub_408210+328↑j
.text:0040854B                 cmp     [esp+20h+var_1C], edx
.text:0040854F                 jz      loc_408366
.text:00408555                 cmp     [esp+20h+var_1C], edx
.text:00408559                 sbb     ebp, ebp
.text:0040855B                 and     ebp, 2
.text:0040855E                 lea     esi, [ebp-1]
.text:00408561                 jmp     loc_40835C
.text:00408566 ; ---------------------------------------------------------------------------
.text:00408566
.text:00408566 loc_408566:                             ; CODE XREF: sub_408210+2F2↑j
.text:00408566                 lea     edx, [edi-30h]
.text:00408569                 cmp     edx, 9
.text:0040856C                 jbe     short loc_408504
.text:0040856E
.text:0040856E loc_40856E:                             ; CODE XREF: sub_408210+371↓j
.text:0040856E                 mov     [esp+20h+arg_4], ecx
.text:00408572                 mov     [esp+20h+arg_0], ebx
.text:00408576                 jmp     loc_40838B
.text:0040857B ; ---------------------------------------------------------------------------
.text:0040857B
.text:0040857B loc_40857B:                             ; CODE XREF: sub_408210+2EC↑j
.text:0040857B                 lea     eax, [esi-30h]
.text:0040857E                 cmp     eax, 9
.text:00408581                 ja      short loc_40856E
.text:00408583                 jmp     loc_4084FE
.text:00408583 sub_408210      endp
.text:00408583
.text:00408583 ; ---------------------------------------------------------------------------
.text:00408588                 align 10h
.text:00408590
.text:00408590 ; =============== S U B R O U T I N E =======================================
.text:00408590
.text:00408590
.text:00408590 ; int __cdecl sub_408590(char *, char *)
.text:00408590 sub_408590      proc near               ; DATA XREF: sub_406350:loc_406596↑o
.text:00408590
.text:00408590 String          = dword ptr -2Ch
.text:00408590 EndPtr          = dword ptr -28h
.text:00408590 var_24          = qword ptr -24h
.text:00408590 var_1C          = qword ptr -1Ch
.text:00408590 var_14          = dword ptr -14h
.text:00408590 var_10          = dword ptr -10h
.text:00408590 var_C           = dword ptr -0Ch
.text:00408590 var_8           = dword ptr -8
.text:00408590 var_4           = dword ptr -4
.text:00408590 arg_0           = dword ptr  4
.text:00408590 arg_4           = dword ptr  8
.text:00408590
.text:00408590                 sub     esp, 2Ch
.text:00408593                 lea     ecx, [esp+2Ch+var_10]
.text:00408597                 mov     [esp+2Ch+var_4], edi
.text:0040859B                 mov     edi, [esp+2Ch+arg_0]
.text:0040859F                 mov     [esp+2Ch+var_8], esi
.text:004085A3                 mov     esi, [esp+2Ch+arg_4]
.text:004085A7                 mov     [esp+2Ch+EndPtr], ecx ; EndPtr
.text:004085AB                 mov     [esp+2Ch+var_C], ebx
.text:004085AF                 mov     [esp+2Ch+String], edi ; String
.text:004085B2                 call    strtod
.text:004085B7                 mov     [esp+2Ch+String], esi ; String
.text:004085BA                 lea     edx, [esp+2Ch+var_14]
.text:004085BE                 fstp    [esp+2Ch+var_1C]
.text:004085C2                 mov     [esp+2Ch+EndPtr], edx ; EndPtr
.text:004085C6                 call    strtod
.text:004085CB                 cmp     edi, [esp+2Ch+var_10]
.text:004085CF                 fst     [esp+2Ch+var_24]
.text:004085D3                 jz      loc_408684
.text:004085D9                 cmp     esi, [esp+2Ch+var_14]
.text:004085DD                 jz      loc_408678
.text:004085E3                 fld     [esp+2Ch+var_1C]
.text:004085E7                 fxch    st(1)
.text:004085E9                 fucom   st(1)
.text:004085EB                 fnstsw  ax
.text:004085ED                 sahf
.text:004085EE                 jbe     short loc_408610
.text:004085F0                 fstp    st
.text:004085F2                 fstp    st
.text:004085F4                 mov     edx, 0FFFFFFFFh
.text:004085F9
.text:004085F9 loc_4085F9:                             ; CODE XREF: sub_408590+92↓j
.text:004085F9                                         ; sub_408590+BB↓j ...
.text:004085F9                 mov     eax, edx
.text:004085FB
.text:004085FB loc_4085FB:                             ; CODE XREF: sub_408590+EF↓j
.text:004085FB                                         ; sub_408590+100↓j
.text:004085FB                 mov     ebx, [esp+2Ch+var_C]
.text:004085FF                 mov     esi, [esp+2Ch+var_8]
.text:00408603                 mov     edi, [esp+2Ch+var_4]
.text:00408607                 add     esp, 2Ch
.text:0040860A                 retn
.text:0040860A ; ---------------------------------------------------------------------------
.text:0040860B                 align 10h
.text:00408610
.text:00408610 loc_408610:                             ; CODE XREF: sub_408590+5E↑j
.text:00408610                 fxch    st(1)
.text:00408612                 fucom   st(1)
.text:00408614                 fnstsw  ax
.text:00408616                 sahf
.text:00408617                 jbe     short loc_408624
.text:00408619                 fstp    st
.text:0040861B                 fstp    st
.text:0040861D                 mov     edx, 1
.text:00408622                 jmp     short loc_4085F9
.text:00408624 ; ---------------------------------------------------------------------------
.text:00408624
.text:00408624 loc_408624:                             ; CODE XREF: sub_408590+87↑j
.text:00408624                 fucom   st(1)
.text:00408626                 fnstsw  ax
.text:00408628                 xor     edx, edx
.text:0040862A                 sahf
.text:0040862B                 jp      short loc_40862F
.text:0040862D                 jz      short loc_408674
.text:0040862F
.text:0040862F loc_40862F:                             ; CODE XREF: sub_408590+9B↑j
.text:0040862F                 fxch    st(1)
.text:00408631                 fucomp  st
.text:00408633                 fnstsw  ax
.text:00408635                 sahf
.text:00408636                 mov     edx, 0FFFFFFFFh
.text:0040863B                 jp      short loc_40863F
.text:0040863D                 jz      short loc_408670
.text:0040863F
.text:0040863F loc_40863F:                             ; CODE XREF: sub_408590+AB↑j
.text:0040863F                 fucomp  st
.text:00408641                 fnstsw  ax
.text:00408643                 sahf
.text:00408644                 mov     edx, 1
.text:00408649                 jp      short loc_40864D
.text:0040864B                 jz      short loc_4085F9
.text:0040864D
.text:0040864D loc_40864D:                             ; CODE XREF: sub_408590+B9↑j
.text:0040864D                 cld
.text:0040864E                 mov     ecx, 8
.text:00408653                 lea     esi, [esp+2Ch+var_1C]
.text:00408657                 lea     edi, [esp+2Ch+var_24]
.text:0040865B                 repe cmpsb
.text:0040865D                 setb    dl
.text:00408660                 setnbe  bl
.text:00408663                 sub     bl, dl
.text:00408665                 movsx   edx, bl
.text:00408668                 jmp     short loc_4085F9
.text:00408668 ; ---------------------------------------------------------------------------
.text:0040866A                 align 10h
.text:00408670
.text:00408670 loc_408670:                             ; CODE XREF: sub_408590+AD↑j
.text:00408670                                         ; sub_408590+E6↓j
.text:00408670                 fstp    st
.text:00408672                 jmp     short loc_4085F9
.text:00408674 ; ---------------------------------------------------------------------------
.text:00408674
.text:00408674 loc_408674:                             ; CODE XREF: sub_408590+9D↑j
.text:00408674                 fstp    st
.text:00408676                 jmp     short loc_408670
.text:00408678 ; ---------------------------------------------------------------------------
.text:00408678
.text:00408678 loc_408678:                             ; CODE XREF: sub_408590+4D↑j
.text:00408678                 fstp    st
.text:0040867A                 mov     eax, 1
.text:0040867F                 jmp     loc_4085FB
.text:00408684 ; ---------------------------------------------------------------------------
.text:00408684
.text:00408684 loc_408684:                             ; CODE XREF: sub_408590+43↑j
.text:00408684                 fstp    st
.text:00408686                 xor     eax, eax
.text:00408688                 cmp     esi, [esp+2Ch+var_14]
.text:0040868C                 setz    al
.text:0040868F                 dec     eax
.text:00408690                 jmp     loc_4085FB
.text:00408690 sub_408590      endp
.text:00408690
.text:00408690 ; ---------------------------------------------------------------------------
.text:00408695                 align 10h
.text:004086A0
.text:004086A0 ; =============== S U B R O U T I N E =======================================
.text:004086A0
.text:004086A0
.text:004086A0 sub_4086A0      proc near               ; CODE XREF: sub_406350+60F↑p
.text:004086A0                                         ; sub_406350+61F↑p
.text:004086A0
.text:004086A0 var_1C          = dword ptr -1Ch
.text:004086A0 var_18          = dword ptr -18h
.text:004086A0 var_14          = dword ptr -14h
.text:004086A0 arg_0           = dword ptr  4
.text:004086A0 arg_4           = dword ptr  8
.text:004086A0
.text:004086A0                 push    ebp
.text:004086A1                 push    edi
.text:004086A2                 push    esi
.text:004086A3                 push    ebx
.text:004086A4                 sub     esp, 0Ch
.text:004086A7                 mov     edi, [esp+1Ch+arg_0]
.text:004086AB                 mov     [esp+1Ch+var_14], 0
.text:004086B3                 mov     eax, [esp+1Ch+arg_4]
.text:004086B7                 mov     [esp+1Ch+var_18], 0Ch
.text:004086BF                 mov     ebp, edi
.text:004086C1                 add     ebp, eax
.text:004086C3                 lea     esi, [esi+0]
.text:004086C9                 lea     edi, [edi+0]
.text:004086D0
.text:004086D0 loc_4086D0:                             ; CODE XREF: sub_4086A0+43↓j
.text:004086D0                 xor     eax, eax
.text:004086D2                 cmp     edi, ebp
.text:004086D4                 jz      short loc_408738
.text:004086D6                 movzx   edx, byte ptr [edi]
.text:004086D9                 cmp     ds:byte_418050[edx], 0
.text:004086E0                 jz      short loc_4086E5
.text:004086E2                 inc     edi
.text:004086E3                 jmp     short loc_4086D0
.text:004086E5 ; ---------------------------------------------------------------------------
.text:004086E5
.text:004086E5 loc_4086E5:                             ; CODE XREF: sub_4086A0+40↑j
.text:004086E5                                         ; sub_4086A0+94↓j
.text:004086E5                 mov     ebx, [esp+1Ch+var_14]
.text:004086E9                 mov     ecx, edi
.text:004086EB                 mov     eax, [esp+1Ch+var_18]
.text:004086EF                 add     ebx, eax
.text:004086F1                 shr     ebx, 1
.text:004086F3                 mov     esi, off_417030[ebx*8]
.text:004086FA                 mov     [esp+1Ch+var_1C], ebx
.text:004086FD                 lea     esi, [esi+0]
.text:00408700
.text:00408700 loc_408700:                             ; CODE XREF: sub_4086A0+82↓j
.text:00408700                 movzx   ebx, byte ptr [esi]
.text:00408703                 test    bl, bl
.text:00408705                 jz      short loc_408749
.text:00408707                 cmp     ecx, ebp
.text:00408709                 jz      short loc_408740
.text:0040870B                 movzx   eax, byte ptr [ecx]
.text:0040870E                 movsx   edx, ds:byte_418350[eax]
.text:00408715                 movzx   eax, bl
.text:00408718                 cmp     edx, eax
.text:0040871A                 jl      short loc_408740
.text:0040871C                 cmp     edx, eax
.text:0040871E                 jg      short loc_408724
.text:00408720                 inc     ecx
.text:00408721                 inc     esi
.text:00408722                 jmp     short loc_408700
.text:00408724 ; ---------------------------------------------------------------------------
.text:00408724
.text:00408724 loc_408724:                             ; CODE XREF: sub_4086A0+7E↑j
.text:00408724                 mov     ebx, [esp+1Ch+var_1C]
.text:00408727                 inc     ebx
.text:00408728                 mov     [esp+1Ch+var_14], ebx
.text:0040872C
.text:0040872C loc_40872C:                             ; CODE XREF: sub_4086A0+A7↓j
.text:0040872C                 mov     ecx, [esp+1Ch+var_18]
.text:00408730                 cmp     [esp+1Ch+var_14], ecx
.text:00408734                 jb      short loc_4086E5
.text:00408736                 xor     eax, eax
.text:00408738
.text:00408738 loc_408738:                             ; CODE XREF: sub_4086A0+34↑j
.text:00408738                                         ; sub_4086A0+B5↓j
.text:00408738                 add     esp, 0Ch
.text:0040873B                 pop     ebx
.text:0040873C                 pop     esi
.text:0040873D                 pop     edi
.text:0040873E                 pop     ebp
.text:0040873F                 retn
.text:00408740 ; ---------------------------------------------------------------------------
.text:00408740
.text:00408740 loc_408740:                             ; CODE XREF: sub_4086A0+69↑j
.text:00408740                                         ; sub_4086A0+7A↑j
.text:00408740                 mov     edx, [esp+1Ch+var_1C]
.text:00408743                 mov     [esp+1Ch+var_18], edx
.text:00408747                 jmp     short loc_40872C
.text:00408749 ; ---------------------------------------------------------------------------
.text:00408749
.text:00408749 loc_408749:                             ; CODE XREF: sub_4086A0+65↑j
.text:00408749                 mov     esi, [esp+1Ch+var_1C]
.text:0040874C                 mov     ecx, offset off_417030
.text:00408751                 mov     eax, [ecx+esi*8+4]
.text:00408755                 jmp     short loc_408738
.text:00408755 sub_4086A0      endp
.text:00408755
.text:00408755 ; ---------------------------------------------------------------------------
.text:00408757                 align 10h
.text:00408760
.text:00408760 ; =============== S U B R O U T I N E =======================================
.text:00408760
.text:00408760
.text:00408760 sub_408760      proc near               ; CODE XREF: sub_408210+182↑j
.text:00408760
.text:00408760 var_D           = byte ptr -0Dh
.text:00408760 var_C           = dword ptr -0Ch
.text:00408760 var_8           = dword ptr -8
.text:00408760 var_4           = dword ptr -4
.text:00408760 arg_0           = dword ptr  4
.text:00408760 arg_4           = dword ptr  8
.text:00408760
.text:00408760                 sub     esp, 10h
.text:00408763                 mov     ecx, [esp+10h+arg_0]
.text:00408767                 mov     [esp+10h+var_C], ebx
.text:0040876B                 mov     ebx, [esp+10h+arg_4]
.text:0040876F                 mov     [esp+10h+var_8], esi
.text:00408773                 mov     [esp+10h+var_4], edi
.text:00408777                 movzx   edx, byte ptr [ecx]
.text:0040877A                 mov     al, dl
.text:0040877C                 movzx   edx, ds:byte_418020
.text:00408783                 cmp     al, dl
.text:00408785                 jz      short loc_4087F3
.text:00408787
.text:00408787 loc_408787:                             ; CODE XREF: sub_408760+95↓j
.text:00408787                 inc     ecx
.text:00408788                 cmp     al, dl
.text:0040878A                 jz      short loc_4087D1
.text:0040878C                 movzx   ecx, byte ptr [ebx]
.text:0040878F                 xor     esi, esi
.text:00408791                 inc     ebx
.text:00408792                 cmp     cl, dl
.text:00408794                 jz      short loc_4087A8
.text:00408796
.text:00408796 loc_408796:                             ; CODE XREF: sub_408760+60↓j
.text:00408796                                         ; sub_408760+88↓j ...
.text:00408796                 mov     eax, esi
.text:00408798                 mov     ebx, [esp+10h+var_C]
.text:0040879C                 mov     esi, [esp+10h+var_8]
.text:004087A0                 mov     edi, [esp+10h+var_4]
.text:004087A4                 add     esp, 10h
.text:004087A7                 retn
.text:004087A8 ; ---------------------------------------------------------------------------
.text:004087A8
.text:004087A8 loc_4087A8:                             ; CODE XREF: sub_408760+34↑j
.text:004087A8                 movzx   eax, byte ptr [ebx]
.text:004087AB                 cmp     al, 30h ; '0'
.text:004087AD                 mov     [esp+10h+var_D], al
.text:004087B1
.text:004087B1 loc_4087B1:                             ; CODE XREF: sub_408760+6F↓j
.text:004087B1                 jz      short loc_4087C2
.text:004087B3                 movsx   edi, [esp+10h+var_D]
.text:004087B8                 sub     edi, 30h ; '0'
.text:004087BB                 cmp     edi, 0Ah
.text:004087BE                 sbb     esi, esi
.text:004087C0                 jmp     short loc_408796
.text:004087C2 ; ---------------------------------------------------------------------------
.text:004087C2
.text:004087C2 loc_4087C2:                             ; CODE XREF: sub_408760:loc_4087B1↑j
.text:004087C2                 inc     ebx
.text:004087C3                 movzx   edx, byte ptr [ebx]
.text:004087C6                 mov     [esp+10h+var_D], dl
.text:004087CA
.text:004087CA loc_4087CA:                             ; CODE XREF: sub_408760+E7↓j
.text:004087CA                 cmp     [esp+10h+var_D], 30h ; '0'
.text:004087CF                 jmp     short loc_4087B1
.text:004087D1 ; ---------------------------------------------------------------------------
.text:004087D1
.text:004087D1 loc_4087D1:                             ; CODE XREF: sub_408760+2A↑j
.text:004087D1                                         ; sub_408760+91↓j
.text:004087D1                 movzx   edx, byte ptr [ecx]
.text:004087D4
.text:004087D4 loc_4087D4:                             ; CODE XREF: sub_408760+D2↓j
.text:004087D4                 cmp     dl, 30h ; '0'
.text:004087D7                 jz      short loc_4087F0
.text:004087D9                 movsx   ebx, dl
.text:004087DC                 sub     ebx, 30h ; '0'
.text:004087DF                 cmp     ebx, 9
.text:004087E2                 setbe   cl
.text:004087E5                 movzx   esi, cl
.text:004087E8                 jmp     short loc_408796
.text:004087E8 ; ---------------------------------------------------------------------------
.text:004087EA                 align 10h
.text:004087F0
.text:004087F0 loc_4087F0:                             ; CODE XREF: sub_408760+77↑j
.text:004087F0                 inc     ecx
.text:004087F1                 jmp     short loc_4087D1
.text:004087F3 ; ---------------------------------------------------------------------------
.text:004087F3
.text:004087F3 loc_4087F3:                             ; CODE XREF: sub_408760+25↑j
.text:004087F3                 cmp     [ebx], dl
.text:004087F5                 jnz     short loc_408787
.text:004087F7                 inc     ecx
.text:004087F8                 inc     ebx
.text:004087F9                 movzx   edx, byte ptr [ecx]
.text:004087FC                 movzx   eax, byte ptr [ebx]
.text:004087FF                 movzx   esi, dl
.text:00408802                 cmp     dl, al
.text:00408804                 mov     [esp+10h+var_D], al
.text:00408808                 jz      short loc_408850
.text:0040880A
.text:0040880A loc_40880A:                             ; CODE XREF: sub_408760+116↓j
.text:0040880A                 movsx   esi, dl
.text:0040880D                 lea     edi, [esi-30h]
.text:00408810                 cmp     edi, 9
.text:00408813                 ja      short loc_408829
.text:00408815                 movsx   edi, [esp+10h+var_D]
.text:0040881A                 lea     eax, [edi-30h]
.text:0040881D                 cmp     eax, 9
.text:00408820                 ja      short loc_408829
.text:00408822                 sub     esi, edi
.text:00408824                 jmp     loc_408796
.text:00408829 ; ---------------------------------------------------------------------------
.text:00408829
.text:00408829 loc_408829:                             ; CODE XREF: sub_408760+B3↑j
.text:00408829                                         ; sub_408760+C0↑j
.text:00408829                 movsx   esi, dl
.text:0040882C                 sub     esi, 30h ; '0'
.text:0040882F                 cmp     esi, 9
.text:00408832                 jbe     short loc_4087D4
.text:00408834                 movsx   edx, [esp+10h+var_D]
.text:00408839                 xor     esi, esi
.text:0040883B                 sub     edx, 30h ; '0'
.text:0040883E                 cmp     edx, 9
.text:00408841                 ja      loc_408796
.text:00408847                 jmp     short loc_4087CA
.text:00408847 ; ---------------------------------------------------------------------------
.text:00408849                 align 10h
.text:00408850
.text:00408850 loc_408850:                             ; CODE XREF: sub_408760+A8↑j
.text:00408850                                         ; sub_408760+114↓j
.text:00408850                 mov     eax, esi
.text:00408852                 movsx   edi, al
.text:00408855                 xor     esi, esi
.text:00408857                 sub     edi, 30h ; '0'
.text:0040885A                 cmp     edi, 9
.text:0040885D                 ja      loc_408796
.text:00408863                 inc     ecx
.text:00408864                 inc     ebx
.text:00408865                 movzx   edx, byte ptr [ecx]
.text:00408868                 movzx   eax, byte ptr [ebx]
.text:0040886B                 movzx   esi, dl
.text:0040886E                 cmp     dl, al
.text:00408870                 mov     [esp+10h+var_D], al
.text:00408874                 jz      short loc_408850
.text:00408876                 jmp     short loc_40880A
.text:00408876 sub_408760      endp
.text:00408876
.text:00408876 ; ---------------------------------------------------------------------------
.text:00408878                 align 10h
.text:00408880 dword_408880    dd 90002D2Dh, 7 dup(90909090h)
.text:00408880                                         ; DATA XREF: sub_408AD0+E4↓o
.text:004088A0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004088A0                                         ; DATA XREF: sub_408AD0+2FC↓o
.text:004088CD                 align 20h
.text:004088E0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004088E0                                         ; DATA XREF: sub_408AD0:loc_408E32↓o
.text:0040890D                 align 20h
.text:00408920 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00408920                                         ; DATA XREF: sub_408AD0:loc_408ED0↓o
.text:00408920                                         ; sub_408AD0:loc_409297↓o
.text:00408946                 align 20h
.text:00408960 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00408960                                         ; DATA XREF: sub_408AD0+48E↓o
.text:00408980 dword_408980    dd 90909000h, 7 dup(90909090h)
.text:00408980                                         ; DATA XREF: sub_408AD0:loc_408FA1↓o
.text:004089A0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004089A0                                         ; DATA XREF: sub_408AD0:loc_408FBA↓o
.text:004089C0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004089C0                                         ; DATA XREF: sub_408AD0:loc_40909F↓o
.text:004089C0                                         ; sub_408AD0:loc_4093CC↓o
.text:004089E7                 align 20h
.text:00408A00 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00408A00                                         ; DATA XREF: sub_408AD0:loc_409213↓o
.text:00408A2E                 align 20h
.text:00408A40 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00408A40                                         ; DATA XREF: sub_408AD0:loc_4092FF↓o
.text:00408A61 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00408A61                                         ; DATA XREF: sub_408AD0+93F↓o
.text:00408A7B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00408A7B                                         ; DATA XREF: sub_408AD0:loc_409447↓o
.text:00408A95 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00408A95                                         ; DATA XREF: sub_408AD0:loc_40946E↓o
.text:00408AB3 ; const char aPosixlyCorrect_0[]
.text:00408AB3 aPosixlyCorrect_0 db 'POSIXLY_CORRECT',0
.text:00408AB3                                         ; DATA XREF: sub_408AD0:loc_409620↓o
.text:00408AC3                 align 10h
.text:00408AD0
.text:00408AD0 ; =============== S U B R O U T I N E =======================================
.text:00408AD0
.text:00408AD0
.text:00408AD0 ; int __cdecl sub_408AD0(int, int, char *Str, int, int, int, int, int)
.text:00408AD0 sub_408AD0      proc near               ; CODE XREF: sub_409660+5A↓p
.text:00408AD0                                         ; .text:0040974A↓p ...
.text:00408AD0
.text:00408AD0 Str1            = dword ptr -5Ch
.text:00408AD0 Str2            = dword ptr -58h
.text:00408AD0 MaxCount        = dword ptr -54h
.text:00408AD0 var_50          = dword ptr -50h
.text:00408AD0 var_4C          = dword ptr -4Ch
.text:00408AD0 var_3C          = dword ptr -3Ch
.text:00408AD0 var_38          = dword ptr -38h
.text:00408AD0 var_34          = dword ptr -34h
.text:00408AD0 var_30          = dword ptr -30h
.text:00408AD0 var_2C          = dword ptr -2Ch
.text:00408AD0 var_28          = dword ptr -28h
.text:00408AD0 var_24          = dword ptr -24h
.text:00408AD0 var_20          = dword ptr -20h
.text:00408AD0 var_1C          = dword ptr -1Ch
.text:00408AD0 var_18          = dword ptr -18h
.text:00408AD0 var_14          = dword ptr -14h
.text:00408AD0 arg_0           = dword ptr  4
.text:00408AD0 arg_4           = dword ptr  8
.text:00408AD0 Str             = dword ptr  0Ch
.text:00408AD0 arg_C           = dword ptr  10h
.text:00408AD0 arg_10          = dword ptr  14h
.text:00408AD0 arg_14          = dword ptr  18h
.text:00408AD0 arg_18          = dword ptr  1Ch
.text:00408AD0 arg_1C          = dword ptr  20h
.text:00408AD0
.text:00408AD0                 push    ebp
.text:00408AD1                 mov     eax, 0FFFFFFFFh
.text:00408AD6                 push    edi
.text:00408AD7                 push    esi
.text:00408AD8                 push    ebx
.text:00408AD9                 sub     esp, 4Ch
.text:00408ADC                 mov     esi, [esp+5Ch+Str]
.text:00408AE0                 mov     ebp, [esp+5Ch+arg_1C]
.text:00408AE4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00408AE7                 mov     ebx, [ebp+4]
.text:00408AEA                 setz    dl
.text:00408AED                 movzx   ecx, dl
.text:00408AF0                 dec     ecx
.text:00408AF1                 and     ecx, ebx
.text:00408AF3                 mov     [esp+5Ch+var_14], ecx
.text:00408AF7                 mov     ecx, [esp+5Ch+arg_0]
.text:00408AFB                 test    ecx, ecx
.text:00408AFD                 jle     loc_408C27
.text:00408B03                 mov     dword ptr [ebp+0Ch], 0
.text:00408B0A                 mov     ebx, [ebp+0]
.text:00408B0D                 test    ebx, ebx
.text:00408B0F                 jz      loc_409640
.text:00408B15                 mov     edi, [ebp+10h]
.text:00408B18                 test    edi, edi
.text:00408B1A                 jnz     short loc_408B73
.text:00408B1C                 lea     esi, [esi+0]
.text:00408B20
.text:00408B20 loc_408B20:                             ; CODE XREF: sub_408AD0+B7C↓j
.text:00408B20                 mov     [ebp+24h], ebx
.text:00408B23                 mov     esi, [esp+5Ch+Str]
.text:00408B27                 mov     [ebp+20h], ebx
.text:00408B2A                 mov     ecx, [esp+5Ch+arg_18]
.text:00408B2E                 xor     ebx, ebx
.text:00408B30                 mov     dword ptr [ebp+14h], 0
.text:00408B37                 test    ecx, ecx
.text:00408B39                 jz      loc_409620
.text:00408B3F
.text:00408B3F loc_408B3F:                             ; CODE XREF: sub_408AD0+B64↓j
.text:00408B3F                 mov     ebx, 1
.text:00408B44
.text:00408B44 loc_408B44:                             ; CODE XREF: sub_408AD0+B5E↓j
.text:00408B44                 mov     [ebp+1Ch], ebx
.text:00408B47                 mov     ecx, [esp+5Ch+Str]
.text:00408B4B                 movzx   eax, byte ptr [ecx]
.text:00408B4E                 cmp     al, 2Dh ; '-'
.text:00408B50                 jz      loc_409610
.text:00408B56                 cmp     al, 2Bh ; '+'
.text:00408B58                 jz      loc_4095F9
.text:00408B5E                 xor     edx, edx
.text:00408B60                 test    ebx, ebx
.text:00408B62                 setz    dl
.text:00408B65                 mov     [ebp+18h], edx
.text:00408B68
.text:00408B68 loc_408B68:                             ; CODE XREF: sub_408AD0+B35↓j
.text:00408B68                 mov     [esp+5Ch+Str], esi
.text:00408B6C                 mov     dword ptr [ebp+10h], 1
.text:00408B73
.text:00408B73 loc_408B73:                             ; CODE XREF: sub_408AD0+4A↑j
.text:00408B73                 mov     eax, [ebp+14h]
.text:00408B76                 test    eax, eax
.text:00408B78                 jz      short loc_408B83
.text:00408B7A                 cmp     byte ptr [eax], 0
.text:00408B7D                 jnz     loc_408C60
.text:00408B83
.text:00408B83 loc_408B83:                             ; CODE XREF: sub_408AD0+A8↑j
.text:00408B83                 mov     ebx, [ebp+0]
.text:00408B86                 cmp     [ebp+24h], ebx
.text:00408B89                 jle     short loc_408B8E
.text:00408B8B                 mov     [ebp+24h], ebx
.text:00408B8E
.text:00408B8E loc_408B8E:                             ; CODE XREF: sub_408AD0+B9↑j
.text:00408B8E                 cmp     [ebp+20h], ebx
.text:00408B91                 jle     short loc_408B96
.text:00408B93                 mov     [ebp+20h], ebx
.text:00408B96
.text:00408B96 loc_408B96:                             ; CODE XREF: sub_408AD0+C1↑j
.text:00408B96                 cmp     dword ptr [ebp+18h], 1
.text:00408B9A                 jz      loc_409570
.text:00408BA0
.text:00408BA0 loc_408BA0:                             ; CODE XREF: sub_408AD0+B13↓j
.text:00408BA0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00408BA4                 jz      loc_409554
.text:00408BAA                 cld
.text:00408BAB                 mov     ecx, [esp+5Ch+arg_4]
.text:00408BAF                 mov     edx, 3
.text:00408BB4                 mov     edi, offset dword_408880
.text:00408BB9                 mov     esi, [ecx+ebx*4]
.text:00408BBC                 mov     ecx, edx
.text:00408BBE                 repe cmpsb
.text:00408BC0                 jnz     short loc_408BFC
.text:00408BC2                 mov     edx, [ebp+24h]
.text:00408BC5                 lea     eax, [ebx+1]
.text:00408BC8                 cmp     [ebp+20h], edx
.text:00408BCB                 mov     [ebp+0], eax
.text:00408BCE                 jz      loc_409568
.text:00408BD4                 cmp     edx, eax
.text:00408BD6                 jz      short loc_408BF0
.text:00408BD8                 mov     [esp+5Ch+Str2], ebp
.text:00408BDC                 mov     ebx, [esp+5Ch+arg_4]
.text:00408BE0                 mov     [esp+5Ch+Str1], ebx
.text:00408BE3                 call    sub_409780
.text:00408BE8                 nop
.text:00408BE9                 lea     esi, [esi+0]
.text:00408BF0
.text:00408BF0 loc_408BF0:                             ; CODE XREF: sub_408AD0+106↑j
.text:00408BF0                                         ; sub_408AD0+A9B↓j
.text:00408BF0                 mov     eax, [esp+5Ch+arg_0]
.text:00408BF4                 mov     ebx, eax
.text:00408BF6                 mov     [ebp+24h], eax
.text:00408BF9                 mov     [ebp+0], eax
.text:00408BFC
.text:00408BFC loc_408BFC:                             ; CODE XREF: sub_408AD0+F0↑j
.text:00408BFC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00408C00                 jz      loc_409554
.text:00408C06                 mov     esi, [esp+5Ch+arg_4]
.text:00408C0A                 mov     eax, [esi+ebx*4]
.text:00408C0D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00408C10                 jz      short loc_408C37
.text:00408C12
.text:00408C12 loc_408C12:                             ; CODE XREF: sub_408AD0+16D↓j
.text:00408C12                 mov     edx, [ebp+18h]
.text:00408C15                 test    edx, edx
.text:00408C17                 jz      short loc_408C30
.text:00408C19                 mov     [ebp+0Ch], eax
.text:00408C1C                 lea     edi, [ebx+1]
.text:00408C1F                 mov     eax, 1
.text:00408C24                 mov     [ebp+0], edi
.text:00408C27
.text:00408C27 loc_408C27:                             ; CODE XREF: sub_408AD0+2D↑j
.text:00408C27                                         ; sub_408AD0+165↓j ...
.text:00408C27                 add     esp, 4Ch
.text:00408C2A                 pop     ebx
.text:00408C2B                 pop     esi
.text:00408C2C                 pop     edi
.text:00408C2D                 pop     ebp
.text:00408C2E                 retn
.text:00408C2E ; ---------------------------------------------------------------------------
.text:00408C2F                 align 10h
.text:00408C30
.text:00408C30 loc_408C30:                             ; CODE XREF: sub_408AD0+147↑j
.text:00408C30                                         ; sub_408AD0+A8A↓j ...
.text:00408C30                 mov     eax, 0FFFFFFFFh
.text:00408C35                 jmp     short loc_408C27
.text:00408C37 ; ---------------------------------------------------------------------------
.text:00408C37
.text:00408C37 loc_408C37:                             ; CODE XREF: sub_408AD0+140↑j
.text:00408C37                 movzx   edx, byte ptr [eax+1]
.text:00408C3B                 test    dl, dl
.text:00408C3D                 jz      short loc_408C12
.text:00408C3F                 mov     ebx, [esp+5Ch+arg_C]
.text:00408C43                 xor     ecx, ecx
.text:00408C45                 test    ebx, ebx
.text:00408C47                 jz      short loc_408C52
.text:00408C49                 cmp     dl, 2Dh ; '-'
.text:00408C4C                 jz      loc_40954A
.text:00408C52
.text:00408C52 loc_408C52:                             ; CODE XREF: sub_408AD0+177↑j
.text:00408C52                                         ; sub_408AD0+A7F↓j
.text:00408C52                 lea     esi, [ecx+eax+1]
.text:00408C56                 mov     [ebp+14h], esi
.text:00408C59                 lea     esi, [esi+0]
.text:00408C60
.text:00408C60 loc_408C60:                             ; CODE XREF: sub_408AD0+AD↑j
.text:00408C60                 mov     ecx, [esp+5Ch+arg_C]
.text:00408C64                 test    ecx, ecx
.text:00408C66                 jz      loc_408FF0
.text:00408C6C                 mov     edx, [ebp+0]
.text:00408C6F                 mov     edi, [esp+5Ch+arg_4]
.text:00408C73                 mov     eax, [edi+edx*4]
.text:00408C76                 movzx   edx, byte ptr [eax+1]
.text:00408C7A                 cmp     dl, 2Dh ; '-'
.text:00408C7D                 jz      short loc_408C95
.text:00408C7F                 mov     ebx, [esp+5Ch+arg_14]
.text:00408C83                 test    ebx, ebx
.text:00408C85                 jz      loc_408FF0
.text:00408C8B                 cmp     byte ptr [eax+2], 0
.text:00408C8F                 jz      loc_40952A
.text:00408C95
.text:00408C95 loc_408C95:                             ; CODE XREF: sub_408AD0+1AD↑j
.text:00408C95                                         ; sub_408AD0+A75↓j
.text:00408C95                 mov     [esp+5Ch+var_18], 0
.text:00408C9D                 mov     ecx, [ebp+14h]
.text:00408CA0                 mov     [esp+5Ch+var_1C], 0
.text:00408CA8                 mov     [esp+5Ch+var_20], 0
.text:00408CB0                 mov     edi, ecx
.text:00408CB2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00408CBA                 movzx   eax, byte ptr [ecx]
.text:00408CBD                 test    al, al
.text:00408CBF                 jz      short loc_408CDC
.text:00408CC1                 cmp     al, 3Dh ; '='
.text:00408CC3                 jz      short loc_408CDC
.text:00408CC5                 lea     esi, [esi+0]
.text:00408CC9                 lea     edi, [edi+0]
.text:00408CD0
.text:00408CD0 loc_408CD0:                             ; CODE XREF: sub_408AD0+20A↓j
.text:00408CD0                 inc     edi
.text:00408CD1                 movzx   eax, byte ptr [edi]
.text:00408CD4                 test    al, al
.text:00408CD6                 jz      short loc_408CDC
.text:00408CD8                 cmp     al, 3Dh ; '='
.text:00408CDA                 jnz     short loc_408CD0
.text:00408CDC
.text:00408CDC loc_408CDC:                             ; CODE XREF: sub_408AD0+1EF↑j
.text:00408CDC                                         ; sub_408AD0+1F3↑j ...
.text:00408CDC                 mov     [esp+5Ch+var_28], 0
.text:00408CE4                 mov     esi, [esp+5Ch+arg_C]
.text:00408CE8                 mov     ebx, [esi]
.text:00408CEA                 test    ebx, ebx
.text:00408CEC                 mov     edx, ebx
.text:00408CEE                 jz      loc_408F10
.text:00408CF4                 lea     esi, [esi+0]
.text:00408CFA                 lea     edi, [edi+0]
.text:00408D00
.text:00408D00 loc_408D00:                             ; CODE XREF: sub_408AD0+25E↓j
.text:00408D00                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00408D04                 mov     ebx, edi
.text:00408D06                 sub     ebx, ecx
.text:00408D08                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00408D0C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00408D0F                 call    strncmp
.text:00408D14                 test    eax, eax
.text:00408D16                 jz      loc_4094A6
.text:00408D1C
.text:00408D1C loc_408D1C:                             ; CODE XREF: sub_408AD0+A0F↓j
.text:00408D1C                                         ; sub_408AD0+A24↓j ...
.text:00408D1C                 inc     [esp+5Ch+var_28]
.text:00408D20                 add     esi, 10h
.text:00408D23                 mov     ecx, [esi]
.text:00408D25                 test    ecx, ecx
.text:00408D27                 mov     edx, ecx
.text:00408D29                 jz      short loc_408D30
.text:00408D2B                 mov     ecx, [ebp+14h]
.text:00408D2E                 jmp     short loc_408D00
.text:00408D30 ; ---------------------------------------------------------------------------
.text:00408D30
.text:00408D30 loc_408D30:                             ; CODE XREF: sub_408AD0+259↑j
.text:00408D30                                         ; sub_408AD0+A55↓j
.text:00408D30                 mov     esi, [esp+5Ch+var_20]
.text:00408D34                 test    esi, esi
.text:00408D36                 jz      short loc_408D44
.text:00408D38                 mov     edx, [esp+5Ch+var_1C]
.text:00408D3C                 test    edx, edx
.text:00408D3E                 jz      loc_409450
.text:00408D44
.text:00408D44 loc_408D44:                             ; CODE XREF: sub_408AD0+266↑j
.text:00408D44                 mov     eax, [esp+5Ch+var_18]
.text:00408D48                 test    eax, eax
.text:00408D4A                 jz      loc_408F10
.text:00408D50                 mov     ecx, [ebp+0]
.text:00408D53                 lea     eax, [ecx+1]
.text:00408D56                 mov     [ebp+0], eax
.text:00408D59                 cmp     byte ptr [edi], 0
.text:00408D5C                 jz      loc_408E70
.text:00408D62                 mov     ecx, [esp+5Ch+var_18]
.text:00408D66                 mov     esi, [ecx+4]
.text:00408D69                 test    esi, esi
.text:00408D6B                 jz      short loc_408DB6
.text:00408D6D                 lea     ebx, [edi+1]
.text:00408D70                 mov     [ebp+0Ch], ebx
.text:00408D73
.text:00408D73 loc_408D73:                             ; CODE XREF: sub_408AD0+3A8↓j
.text:00408D73                                         ; sub_408AD0+3C4↓j
.text:00408D73                 mov     ebx, [ebp+14h]
.text:00408D76                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00408D79                 call    strlen
.text:00408D7E                 add     [ebp+14h], eax
.text:00408D81                 mov     esi, [esp+5Ch+arg_10]
.text:00408D85                 test    esi, esi
.text:00408D87                 jz      short loc_408D93
.text:00408D89                 mov     ebp, [esp+5Ch+var_24]
.text:00408D8D                 mov     ecx, [esp+5Ch+arg_10]
.text:00408D91                 mov     [ecx], ebp
.text:00408D93
.text:00408D93 loc_408D93:                             ; CODE XREF: sub_408AD0+2B7↑j
.text:00408D93                 mov     eax, [esp+5Ch+var_18]
.text:00408D97                 mov     ecx, [eax+8]
.text:00408D9A                 test    ecx, ecx
.text:00408D9C                 jnz     short loc_408DAA
.text:00408D9E                 mov     ecx, [esp+5Ch+var_18]
.text:00408DA2
.text:00408DA2 loc_408DA2:                             ; CODE XREF: sub_408AD0+723↓j
.text:00408DA2                 mov     eax, [ecx+0Ch]
.text:00408DA5                 jmp     loc_408C27
.text:00408DAA ; ---------------------------------------------------------------------------
.text:00408DAA
.text:00408DAA loc_408DAA:                             ; CODE XREF: sub_408AD0+2CC↑j
.text:00408DAA                                         ; sub_408AD0+719↓j
.text:00408DAA                 mov     esi, [eax+0Ch]
.text:00408DAD                 xor     eax, eax
.text:00408DAF                 mov     [ecx], esi
.text:00408DB1                 jmp     loc_408C27
.text:00408DB6 ; ---------------------------------------------------------------------------
.text:00408DB6
.text:00408DB6 loc_408DB6:                             ; CODE XREF: sub_408AD0+29B↑j
.text:00408DB6                 mov     edi, [esp+5Ch+var_14]
.text:00408DBA                 test    edi, edi
.text:00408DBC                 jz      short loc_408E10
.text:00408DBE                 mov     esi, [esp+5Ch+arg_4]
.text:00408DC2                 mov     edx, [esi+eax*4-4]
.text:00408DC6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00408DCA                 jz      short loc_408E32
.text:00408DCC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00408DD3                 call    ds:libintl_gettext
.text:00408DD9                 mov     edx, [esp+5Ch+var_18]
.text:00408DDD                 mov     edi, [edx]
.text:00408DDF                 mov     [esp+5Ch+var_4C], edi
.text:00408DE3                 mov     ebx, [ebp+0]
.text:00408DE6                 mov     edi, [esp+5Ch+arg_4]
.text:00408DEA                 mov     ecx, [edi+ebx*4-4]
.text:00408DEE                 movsx   esi, byte ptr [ecx]
.text:00408DF1                 mov     ecx, ds:_iob
.text:00408DF7                 add     ecx, 40h ; '@'
.text:00408DFA                 mov     [esp+5Ch+var_50], esi
.text:00408DFE                 mov     ebx, [edi]
.text:00408E00                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408E04                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00408E07                 mov     [esp+5Ch+MaxCount], ebx
.text:00408E0B                 call    fprintf
.text:00408E10
.text:00408E10 loc_408E10:                             ; CODE XREF: sub_408AD0+2EC↑j
.text:00408E10                                         ; sub_408AD0+398↓j
.text:00408E10                 mov     ecx, [ebp+14h]
.text:00408E13                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00408E16                 call    strlen
.text:00408E1B                 add     [ebp+14h], eax
.text:00408E1E                 mov     eax, [esp+5Ch+var_18]
.text:00408E22                 mov     esi, [eax+0Ch]
.text:00408E25                 mov     [ebp+8], esi
.text:00408E28
.text:00408E28 loc_408E28:                             ; CODE XREF: sub_408AD0+4E5↓j
.text:00408E28                                         ; sub_408AD0+73E↓j ...
.text:00408E28                 mov     eax, 3Fh ; '?'
.text:00408E2D                 jmp     loc_408C27
.text:00408E32 ; ---------------------------------------------------------------------------
.text:00408E32
.text:00408E32 loc_408E32:                             ; CODE XREF: sub_408AD0+2FA↑j
.text:00408E32                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00408E39                 call    ds:libintl_gettext
.text:00408E3F                 mov     edx, [esp+5Ch+var_18]
.text:00408E43                 mov     edi, [esp+5Ch+arg_4]
.text:00408E47                 mov     ecx, ds:_iob
.text:00408E4D                 mov     esi, [edx]
.text:00408E4F                 add     ecx, 40h ; '@'
.text:00408E52                 mov     [esp+5Ch+var_50], esi
.text:00408E56                 mov     ebx, [edi]
.text:00408E58                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408E5C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00408E5F                 mov     [esp+5Ch+MaxCount], ebx
.text:00408E63                 call    fprintf
.text:00408E68                 jmp     short loc_408E10
.text:00408E68 ; ---------------------------------------------------------------------------
.text:00408E6A                 align 10h
.text:00408E70
.text:00408E70 loc_408E70:                             ; CODE XREF: sub_408AD0+28C↑j
.text:00408E70                 mov     ebx, [esp+5Ch+var_18]
.text:00408E74                 cmp     dword ptr [ebx+4], 1
.text:00408E78                 jnz     loc_408D73
.text:00408E7E                 cmp     eax, [esp+5Ch+arg_0]
.text:00408E82                 jge     short loc_408E99
.text:00408E84                 mov     ebx, [esp+5Ch+arg_4]
.text:00408E88                 lea     edi, [ecx+2]
.text:00408E8B                 mov     [ebp+0], edi
.text:00408E8E                 mov     esi, [ebx+eax*4]
.text:00408E91                 mov     [ebp+0Ch], esi
.text:00408E94                 jmp     loc_408D73
.text:00408E99 ; ---------------------------------------------------------------------------
.text:00408E99
.text:00408E99 loc_408E99:                             ; CODE XREF: sub_408AD0+3B2↑j
.text:00408E99                 mov     edx, [esp+5Ch+var_14]
.text:00408E9D                 test    edx, edx
.text:00408E9F                 jnz     short loc_408ED0
.text:00408EA1
.text:00408EA1 loc_408EA1:                             ; CODE XREF: sub_408AD0+437↓j
.text:00408EA1                 mov     edx, [ebp+14h]
.text:00408EA4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00408EA7                 call    strlen
.text:00408EAC                 add     [ebp+14h], eax
.text:00408EAF                 mov     eax, [esp+5Ch+var_18]
.text:00408EB3                 mov     edi, [eax+0Ch]
.text:00408EB6                 mov     [ebp+8], edi
.text:00408EB9
.text:00408EB9 loc_408EB9:                             ; CODE XREF: sub_408AD0+7C2↓j
.text:00408EB9                 mov     ebp, [esp+5Ch+Str]
.text:00408EBD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00408EC1                 setnz   bl
.text:00408EC4                 movzx   esi, bl
.text:00408EC7                 lea     eax, [esi+esi*4+3Ah]
.text:00408ECB                 jmp     loc_408C27
.text:00408ED0 ; ---------------------------------------------------------------------------
.text:00408ED0
.text:00408ED0 loc_408ED0:                             ; CODE XREF: sub_408AD0+3CF↑j
.text:00408ED0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00408ED7                 call    ds:libintl_gettext
.text:00408EDD                 mov     ecx, [ebp+0]
.text:00408EE0                 mov     esi, [esp+5Ch+arg_4]
.text:00408EE4                 mov     ebx, [esi+ecx*4-4]
.text:00408EE8                 mov     ecx, ds:_iob
.text:00408EEE                 mov     [esp+5Ch+var_50], ebx
.text:00408EF2                 mov     edi, [esi]
.text:00408EF4                 add     ecx, 40h ; '@'
.text:00408EF7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408EFB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00408EFE                 mov     [esp+5Ch+MaxCount], edi
.text:00408F02                 call    fprintf
.text:00408F07                 jmp     short loc_408EA1
.text:00408F07 ; ---------------------------------------------------------------------------
.text:00408F09                 align 10h
.text:00408F10
.text:00408F10 loc_408F10:                             ; CODE XREF: sub_408AD0+21E↑j
.text:00408F10                                         ; sub_408AD0+27A↑j
.text:00408F10                 mov     eax, [esp+5Ch+arg_14]
.text:00408F14                 test    eax, eax
.text:00408F16                 jz      short loc_408F46
.text:00408F18                 mov     ebx, [ebp+0]
.text:00408F1B                 mov     esi, [esp+5Ch+arg_4]
.text:00408F1F                 mov     edi, [esi+ebx*4]
.text:00408F22                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00408F26                 jz      short loc_408F49
.text:00408F28                 mov     ecx, [ebp+14h]
.text:00408F2B                 mov     edx, [esp+5Ch+Str]
.text:00408F2F                 movsx   ebx, byte ptr [ecx]
.text:00408F32                 mov     [esp+5Ch+Str1], edx ; Str
.text:00408F35                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00408F39                 call    strchr
.text:00408F3E                 test    eax, eax
.text:00408F40                 jnz     loc_408FF0
.text:00408F46
.text:00408F46 loc_408F46:                             ; CODE XREF: sub_408AD0+446↑j
.text:00408F46                 mov     ebx, [ebp+0]
.text:00408F49
.text:00408F49 loc_408F49:                             ; CODE XREF: sub_408AD0+456↑j
.text:00408F49                 mov     eax, [esp+5Ch+var_14]
.text:00408F4D                 test    eax, eax
.text:00408F4F                 jz      short loc_408FA1
.text:00408F51                 mov     esi, [esp+5Ch+arg_4]
.text:00408F55                 mov     edi, [esi+ebx*4]
.text:00408F58                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00408F5C                 jz      short loc_408FBA
.text:00408F5E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00408F65                 call    ds:libintl_gettext
.text:00408F6B                 mov     edi, [ebp+14h]
.text:00408F6E                 mov     [esp+5Ch+var_4C], edi
.text:00408F72                 mov     ebx, [ebp+0]
.text:00408F75                 mov     edi, [esp+5Ch+arg_4]
.text:00408F79                 mov     esi, [edi+ebx*4]
.text:00408F7C                 movsx   ecx, byte ptr [esi]
.text:00408F7F                 mov     esi, ds:_iob
.text:00408F85                 add     esi, 40h ; '@'
.text:00408F88                 mov     [esp+5Ch+var_50], ecx
.text:00408F8C                 mov     ebx, [edi]
.text:00408F8E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408F92                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00408F95                 mov     [esp+5Ch+MaxCount], ebx
.text:00408F99                 call    fprintf
.text:00408F9E
.text:00408F9E loc_408F9E:                             ; CODE XREF: sub_408AD0+51D↓j
.text:00408F9E                 mov     ebx, [ebp+0]
.text:00408FA1
.text:00408FA1 loc_408FA1:                             ; CODE XREF: sub_408AD0+47F↑j
.text:00408FA1                 mov     dword ptr [ebp+14h], offset dword_408980
.text:00408FA8                 lea     edx, [ebx+1]
.text:00408FAB                 mov     [ebp+0], edx
.text:00408FAE
.text:00408FAE loc_408FAE:                             ; CODE XREF: sub_408AD0+999↓j
.text:00408FAE                 mov     dword ptr [ebp+8], 0
.text:00408FB5                 jmp     loc_408E28
.text:00408FBA ; ---------------------------------------------------------------------------
.text:00408FBA
.text:00408FBA loc_408FBA:                             ; CODE XREF: sub_408AD0+48C↑j
.text:00408FBA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00408FC1                 call    ds:libintl_gettext
.text:00408FC7                 mov     ecx, [ebp+14h]
.text:00408FCA                 mov     edi, [esp+5Ch+arg_4]
.text:00408FCE                 mov     edx, ds:_iob
.text:00408FD4                 mov     [esp+5Ch+var_50], ecx
.text:00408FD8                 mov     ebx, [edi]
.text:00408FDA                 add     edx, 40h ; '@'
.text:00408FDD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408FE1                 mov     [esp+5Ch+MaxCount], ebx
.text:00408FE5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00408FE8                 call    fprintf
.text:00408FED                 jmp     short loc_408F9E
.text:00408FED ; ---------------------------------------------------------------------------
.text:00408FEF                 align 10h
.text:00408FF0
.text:00408FF0 loc_408FF0:                             ; CODE XREF: sub_408AD0+196↑j
.text:00408FF0                                         ; sub_408AD0+1B5↑j ...
.text:00408FF0                 mov     esi, [ebp+14h]
.text:00408FF3                 movzx   ebx, byte ptr [esi]
.text:00408FF6                 inc     esi
.text:00408FF7                 mov     [ebp+14h], esi
.text:00408FFA                 mov     ecx, [esp+5Ch+Str]
.text:00408FFE                 movsx   esi, bl
.text:00409001                 mov     [esp+5Ch+Str2], esi ; Val
.text:00409005                 mov     edi, esi
.text:00409007                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040900A                 call    strchr
.text:0040900F                 mov     ecx, [ebp+14h]
.text:00409012                 cmp     byte ptr [ecx], 0
.text:00409015                 jnz     short loc_40901A
.text:00409017                 inc     dword ptr [ebp+0]
.text:0040901A
.text:0040901A loc_40901A:                             ; CODE XREF: sub_408AD0+545↑j
.text:0040901A                 test    eax, eax
.text:0040901C                 jz      loc_409400
.text:00409022                 cmp     bl, 3Ah ; ':'
.text:00409025                 jz      loc_409400
.text:0040902B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040902E                 jz      loc_4090E6
.text:00409034                 movzx   edx, byte ptr [eax+1]
.text:00409038
.text:00409038 loc_409038:                             ; CODE XREF: sub_408AD0+61D↓j
.text:00409038                 cmp     dl, 3Ah ; ':'
.text:0040903B                 jz      short loc_409044
.text:0040903D
.text:0040903D loc_40903D:                             ; CODE XREF: sub_408AD0+590↓j
.text:0040903D                 mov     eax, esi
.text:0040903F                 jmp     loc_408C27
.text:00409044 ; ---------------------------------------------------------------------------
.text:00409044
.text:00409044 loc_409044:                             ; CODE XREF: sub_408AD0+56B↑j
.text:00409044                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00409048                 jz      loc_4090D1
.text:0040904E                 cmp     byte ptr [ecx], 0
.text:00409051                 jz      short loc_409062
.text:00409053
.text:00409053 loc_409053:                             ; CODE XREF: sub_408AD0+604↓j
.text:00409053                 inc     dword ptr [ebp+0]
.text:00409056                 mov     [ebp+0Ch], ecx
.text:00409059
.text:00409059 loc_409059:                             ; CODE XREF: sub_408AD0+5AB↓j
.text:00409059                                         ; sub_408AD0+5C6↓j ...
.text:00409059                 mov     dword ptr [ebp+14h], 0
.text:00409060                 jmp     short loc_40903D
.text:00409062 ; ---------------------------------------------------------------------------
.text:00409062
.text:00409062 loc_409062:                             ; CODE XREF: sub_408AD0+581↑j
.text:00409062                 mov     ecx, [ebp+0]
.text:00409065                 cmp     ecx, [esp+5Ch+arg_0]
.text:00409069                 jz      short loc_40907D
.text:0040906B                 mov     eax, [esp+5Ch+arg_4]
.text:0040906F                 lea     edx, [ecx+1]
.text:00409072                 mov     [ebp+0], edx
.text:00409075                 mov     ebx, [eax+ecx*4]
.text:00409078                 mov     [ebp+0Ch], ebx
.text:0040907B                 jmp     short loc_409059
.text:0040907D ; ---------------------------------------------------------------------------
.text:0040907D
.text:0040907D loc_40907D:                             ; CODE XREF: sub_408AD0+599↑j
.text:0040907D                 mov     ecx, [esp+5Ch+var_14]
.text:00409081                 test    ecx, ecx
.text:00409083                 jnz     short loc_40909F
.text:00409085
.text:00409085 loc_409085:                             ; CODE XREF: sub_408AD0+5FF↓j
.text:00409085                 mov     [ebp+8], edi
.text:00409088                 mov     edi, [esp+5Ch+Str]
.text:0040908C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040908F                 jz      short loc_409098
.text:00409091                 mov     esi, 3Fh ; '?'
.text:00409096                 jmp     short loc_409059
.text:00409098 ; ---------------------------------------------------------------------------
.text:00409098
.text:00409098 loc_409098:                             ; CODE XREF: sub_408AD0+5BF↑j
.text:00409098                 mov     esi, 3Ah ; ':'
.text:0040909D                 jmp     short loc_409059
.text:0040909F ; ---------------------------------------------------------------------------
.text:0040909F
.text:0040909F loc_40909F:                             ; CODE XREF: sub_408AD0+5B3↑j
.text:0040909F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004090A6                 call    ds:libintl_gettext
.text:004090AC                 mov     [esp+5Ch+var_50], edi
.text:004090B0                 mov     ebx, [esp+5Ch+arg_4]
.text:004090B4                 mov     edx, ds:_iob
.text:004090BA                 mov     esi, [ebx]
.text:004090BC                 add     edx, 40h ; '@'
.text:004090BF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004090C3                 mov     [esp+5Ch+MaxCount], esi
.text:004090C7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004090CA                 call    fprintf
.text:004090CF                 jmp     short loc_409085
.text:004090D1 ; ---------------------------------------------------------------------------
.text:004090D1
.text:004090D1 loc_4090D1:                             ; CODE XREF: sub_408AD0+578↑j
.text:004090D1                 cmp     byte ptr [ecx], 0
.text:004090D4                 jnz     loc_409053
.text:004090DA                 mov     dword ptr [ebp+0Ch], 0
.text:004090E1                 jmp     loc_409059
.text:004090E6 ; ---------------------------------------------------------------------------
.text:004090E6
.text:004090E6 loc_4090E6:                             ; CODE XREF: sub_408AD0+55E↑j
.text:004090E6                 movzx   edx, byte ptr [eax+1]
.text:004090EA                 cmp     dl, 3Bh ; ';'
.text:004090ED                 jnz     loc_409038
.text:004090F3                 mov     [esp+5Ch+var_2C], 0
.text:004090FB                 mov     [esp+5Ch+var_30], 0
.text:00409103                 mov     [esp+5Ch+var_34], 0
.text:0040910B                 mov     [esp+5Ch+var_38], 0
.text:00409113                 cmp     byte ptr [ecx], 0
.text:00409116                 jz      loc_40938B
.text:0040911C                 inc     dword ptr [ebp+0]
.text:0040911F                 mov     [ebp+0Ch], ecx
.text:00409122
.text:00409122 loc_409122:                             ; CODE XREF: sub_408AD0+8D4↓j
.text:00409122                 mov     edi, [ebp+0Ch]
.text:00409125                 mov     [ebp+14h], edi
.text:00409128                 movzx   eax, byte ptr [edi]
.text:0040912B                 test    al, al
.text:0040912D                 jz      short loc_40913F
.text:0040912F                 cmp     al, 3Dh ; '='
.text:00409131                 jz      short loc_40913F
.text:00409133
.text:00409133 loc_409133:                             ; CODE XREF: sub_408AD0+66D↓j
.text:00409133                 inc     edi
.text:00409134                 movzx   eax, byte ptr [edi]
.text:00409137                 test    al, al
.text:00409139                 jz      short loc_40913F
.text:0040913B                 cmp     al, 3Dh ; '='
.text:0040913D                 jnz     short loc_409133
.text:0040913F
.text:0040913F loc_40913F:                             ; CODE XREF: sub_408AD0+65D↑j
.text:0040913F                                         ; sub_408AD0+661↑j ...
.text:0040913F                 mov     [esp+5Ch+var_3C], 0
.text:00409147                 mov     esi, [esp+5Ch+arg_C]
.text:0040914B                 mov     eax, [esi]
.text:0040914D                 test    eax, eax
.text:0040914F                 jz      loc_4092D0
.text:00409155                 mov     ecx, eax
.text:00409157
.text:00409157 loc_409157:                             ; CODE XREF: sub_408AD0+6B3↓j
.text:00409157                 mov     ebx, [ebp+14h]
.text:0040915A                 mov     eax, edi
.text:0040915C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040915F                 sub     eax, ebx
.text:00409161                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00409165                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00409169                 call    strncmp
.text:0040916E                 test    eax, eax
.text:00409170                 jz      loc_409337
.text:00409176
.text:00409176 loc_409176:                             ; CODE XREF: sub_408AD0+88C↓j
.text:00409176                                         ; sub_408AD0+89D↓j
.text:00409176                 inc     [esp+5Ch+var_3C]
.text:0040917A                 add     esi, 10h
.text:0040917D                 mov     edx, [esi]
.text:0040917F                 test    edx, edx
.text:00409181                 mov     ecx, edx
.text:00409183                 jnz     short loc_409157
.text:00409185
.text:00409185 loc_409185:                             ; CODE XREF: sub_408AD0+8B6↓j
.text:00409185                 mov     esi, [esp+5Ch+var_34]
.text:00409189                 test    esi, esi
.text:0040918B                 jz      short loc_409199
.text:0040918D                 mov     ebx, [esp+5Ch+var_30]
.text:00409191                 test    ebx, ebx
.text:00409193                 jz      loc_4092E1
.text:00409199
.text:00409199 loc_409199:                             ; CODE XREF: sub_408AD0+6BB↑j
.text:00409199                 mov     esi, [esp+5Ch+var_2C]
.text:0040919D                 test    esi, esi
.text:0040919F                 jz      loc_4092D0
.text:004091A5                 cmp     byte ptr [edi], 0
.text:004091A8                 jz      loc_409250
.text:004091AE                 mov     ecx, [esp+5Ch+var_2C]
.text:004091B2                 mov     ebx, [ecx+4]
.text:004091B5                 test    ebx, ebx
.text:004091B7                 jz      short loc_4091F8
.text:004091B9                 lea     edx, [edi+1]
.text:004091BC                 mov     [ebp+0Ch], edx
.text:004091BF
.text:004091BF loc_4091BF:                             ; CODE XREF: sub_408AD0+788↓j
.text:004091BF                                         ; sub_408AD0+7A7↓j
.text:004091BF                 mov     edi, [ebp+14h]
.text:004091C2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004091C5                 call    strlen
.text:004091CA                 add     [ebp+14h], eax
.text:004091CD                 mov     eax, [esp+5Ch+arg_10]
.text:004091D1                 test    eax, eax
.text:004091D3                 jz      short loc_4091E0
.text:004091D5                 mov     edx, [esp+5Ch+var_38]
.text:004091D9                 mov     ebp, [esp+5Ch+arg_10]
.text:004091DD                 mov     [ebp+0], edx
.text:004091E0
.text:004091E0 loc_4091E0:                             ; CODE XREF: sub_408AD0+703↑j
.text:004091E0                 mov     eax, [esp+5Ch+var_2C]
.text:004091E4                 mov     ecx, [eax+8]
.text:004091E7                 test    ecx, ecx
.text:004091E9                 jnz     loc_408DAA
.text:004091EF                 mov     ecx, [esp+5Ch+var_2C]
.text:004091F3                 jmp     loc_408DA2
.text:004091F8 ; ---------------------------------------------------------------------------
.text:004091F8
.text:004091F8 loc_4091F8:                             ; CODE XREF: sub_408AD0+6E7↑j
.text:004091F8                 mov     eax, [esp+5Ch+var_14]
.text:004091FC                 test    eax, eax
.text:004091FE                 jnz     short loc_409213
.text:00409200
.text:00409200 loc_409200:                             ; CODE XREF: sub_408AD0+779↓j
.text:00409200                 mov     ecx, [ebp+14h]
.text:00409203                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00409206                 call    strlen
.text:0040920B                 add     [ebp+14h], eax
.text:0040920E                 jmp     loc_408E28
.text:00409213 ; ---------------------------------------------------------------------------
.text:00409213
.text:00409213 loc_409213:                             ; CODE XREF: sub_408AD0+72E↑j
.text:00409213                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040921A                 call    ds:libintl_gettext
.text:00409220                 mov     edx, [esp+5Ch+var_2C]
.text:00409224                 mov     ebx, [esp+5Ch+arg_4]
.text:00409228                 mov     edi, [edx]
.text:0040922A                 mov     [esp+5Ch+var_50], edi
.text:0040922E                 mov     edi, ds:_iob
.text:00409234                 mov     esi, [ebx]
.text:00409236                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040923A                 add     edi, 40h ; '@'
.text:0040923D                 mov     [esp+5Ch+MaxCount], esi
.text:00409241                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00409244                 call    fprintf
.text:00409249                 jmp     short loc_409200
.text:00409249 ; ---------------------------------------------------------------------------
.text:0040924B                 align 10h
.text:00409250
.text:00409250 loc_409250:                             ; CODE XREF: sub_408AD0+6D8↑j
.text:00409250                 mov     esi, [esp+5Ch+var_2C]
.text:00409254                 cmp     dword ptr [esi+4], 1
.text:00409258                 jnz     loc_4091BF
.text:0040925E                 mov     ecx, [ebp+0]
.text:00409261                 cmp     ecx, [esp+5Ch+arg_0]
.text:00409265                 jge     short loc_40927C
.text:00409267                 mov     eax, [esp+5Ch+arg_4]
.text:0040926B                 lea     ebx, [ecx+1]
.text:0040926E                 mov     [ebp+0], ebx
.text:00409271                 mov     edi, [eax+ecx*4]
.text:00409274                 mov     [ebp+0Ch], edi
.text:00409277                 jmp     loc_4091BF
.text:0040927C ; ---------------------------------------------------------------------------
.text:0040927C
.text:0040927C loc_40927C:                             ; CODE XREF: sub_408AD0+795↑j
.text:0040927C                 mov     edx, [esp+5Ch+var_14]
.text:00409280                 test    edx, edx
.text:00409282                 jnz     short loc_409297
.text:00409284
.text:00409284 loc_409284:                             ; CODE XREF: sub_408AD0+7FE↓j
.text:00409284                 mov     edx, [ebp+14h]
.text:00409287                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040928A                 call    strlen
.text:0040928F                 add     [ebp+14h], eax
.text:00409292                 jmp     loc_408EB9
.text:00409297 ; ---------------------------------------------------------------------------
.text:00409297
.text:00409297 loc_409297:                             ; CODE XREF: sub_408AD0+7B2↑j
.text:00409297                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040929E                 call    ds:libintl_gettext
.text:004092A4                 mov     ecx, [ebp+0]
.text:004092A7                 mov     ebx, [esp+5Ch+arg_4]
.text:004092AB                 mov     edi, [ebx+ecx*4-4]
.text:004092AF                 mov     ecx, ds:_iob
.text:004092B5                 mov     [esp+5Ch+var_50], edi
.text:004092B9                 mov     esi, [ebx]
.text:004092BB                 add     ecx, 40h ; '@'
.text:004092BE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004092C2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004092C5                 mov     [esp+5Ch+MaxCount], esi
.text:004092C9                 call    fprintf
.text:004092CE                 jmp     short loc_409284
.text:004092D0 ; ---------------------------------------------------------------------------
.text:004092D0
.text:004092D0 loc_4092D0:                             ; CODE XREF: sub_408AD0+67F↑j
.text:004092D0                                         ; sub_408AD0+6CF↑j
.text:004092D0                 mov     dword ptr [ebp+14h], 0
.text:004092D7                 mov     eax, 57h ; 'W'
.text:004092DC                 jmp     loc_408C27
.text:004092E1 ; ---------------------------------------------------------------------------
.text:004092E1
.text:004092E1 loc_4092E1:                             ; CODE XREF: sub_408AD0+6C3↑j
.text:004092E1                 mov     edi, [esp+5Ch+var_14]
.text:004092E5                 test    edi, edi
.text:004092E7                 jnz     short loc_4092FF
.text:004092E9
.text:004092E9 loc_4092E9:                             ; CODE XREF: sub_408AD0+865↓j
.text:004092E9                 mov     edx, [ebp+14h]
.text:004092EC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004092EF                 call    strlen
.text:004092F4                 add     [ebp+14h], eax
.text:004092F7                 inc     dword ptr [ebp+0]
.text:004092FA                 jmp     loc_408E28
.text:004092FF ; ---------------------------------------------------------------------------
.text:004092FF
.text:004092FF loc_4092FF:                             ; CODE XREF: sub_408AD0+817↑j
.text:004092FF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00409306                 call    ds:libintl_gettext
.text:0040930C                 mov     ecx, [ebp+0]
.text:0040930F                 mov     ebx, [esp+5Ch+arg_4]
.text:00409313                 mov     edi, [ebx+ecx*4]
.text:00409316                 mov     ecx, ds:_iob
.text:0040931C                 mov     [esp+5Ch+var_50], edi
.text:00409320                 mov     esi, [ebx]
.text:00409322                 add     ecx, 40h ; '@'
.text:00409325                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409329                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040932C                 mov     [esp+5Ch+MaxCount], esi
.text:00409330                 call    fprintf
.text:00409335                 jmp     short loc_4092E9
.text:00409337 ; ---------------------------------------------------------------------------
.text:00409337
.text:00409337 loc_409337:                             ; CODE XREF: sub_408AD0+6A0↑j
.text:00409337                 mov     edx, [ebp+14h]
.text:0040933A                 mov     ebx, edi
.text:0040933C                 mov     ecx, [esi]
.text:0040933E                 sub     ebx, edx
.text:00409340                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00409343                 call    strlen
.text:00409348                 cmp     ebx, eax
.text:0040934A                 jz      short loc_409372
.text:0040934C                 mov     ebx, [esp+5Ch+var_2C]
.text:00409350                 test    ebx, ebx
.text:00409352                 jz      short loc_409361
.text:00409354                 mov     [esp+5Ch+var_34], 1
.text:0040935C                 jmp     loc_409176
.text:00409361 ; ---------------------------------------------------------------------------
.text:00409361
.text:00409361 loc_409361:                             ; CODE XREF: sub_408AD0+882↑j
.text:00409361                 mov     [esp+5Ch+var_2C], esi
.text:00409365                 mov     ecx, [esp+5Ch+var_3C]
.text:00409369                 mov     [esp+5Ch+var_38], ecx
.text:0040936D                 jmp     loc_409176
.text:00409372 ; ---------------------------------------------------------------------------
.text:00409372
.text:00409372 loc_409372:                             ; CODE XREF: sub_408AD0+87A↑j
.text:00409372                 mov     [esp+5Ch+var_2C], esi
.text:00409376                 mov     eax, [esp+5Ch+var_3C]
.text:0040937A                 mov     [esp+5Ch+var_30], 1
.text:00409382                 mov     [esp+5Ch+var_38], eax
.text:00409386                 jmp     loc_409185
.text:0040938B ; ---------------------------------------------------------------------------
.text:0040938B
.text:0040938B loc_40938B:                             ; CODE XREF: sub_408AD0+646↑j
.text:0040938B                 mov     edx, [ebp+0]
.text:0040938E                 cmp     edx, [esp+5Ch+arg_0]
.text:00409392                 jz      short loc_4093A9
.text:00409394                 mov     ebx, [esp+5Ch+arg_4]
.text:00409398                 lea     esi, [edx+1]
.text:0040939B                 mov     [ebp+0], esi
.text:0040939E                 mov     edi, [ebx+edx*4]
.text:004093A1                 mov     [ebp+0Ch], edi
.text:004093A4                 jmp     loc_409122
.text:004093A9 ; ---------------------------------------------------------------------------
.text:004093A9
.text:004093A9 loc_4093A9:                             ; CODE XREF: sub_408AD0+8C2↑j
.text:004093A9                 mov     edi, [esp+5Ch+var_14]
.text:004093AD                 test    edi, edi
.text:004093AF                 jnz     short loc_4093CC
.text:004093B1
.text:004093B1 loc_4093B1:                             ; CODE XREF: sub_408AD0+92C↓j
.text:004093B1                 mov     [ebp+8], esi
.text:004093B4                 mov     ebp, [esp+5Ch+Str]
.text:004093B8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004093BC                 jz      short loc_4093C8
.text:004093BE                 mov     bl, 3Fh ; '?'
.text:004093C0
.text:004093C0 loc_4093C0:                             ; CODE XREF: sub_408AD0+8FA↓j
.text:004093C0                 movsx   eax, bl
.text:004093C3                 jmp     loc_408C27
.text:004093C8 ; ---------------------------------------------------------------------------
.text:004093C8
.text:004093C8 loc_4093C8:                             ; CODE XREF: sub_408AD0+8EC↑j
.text:004093C8                 mov     bl, 3Ah ; ':'
.text:004093CA                 jmp     short loc_4093C0
.text:004093CC ; ---------------------------------------------------------------------------
.text:004093CC
.text:004093CC loc_4093CC:                             ; CODE XREF: sub_408AD0+8DF↑j
.text:004093CC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004093D3                 call    ds:libintl_gettext
.text:004093D9                 mov     [esp+5Ch+var_50], esi
.text:004093DD                 mov     edx, [esp+5Ch+arg_4]
.text:004093E1                 mov     ecx, ds:_iob
.text:004093E7                 mov     ebx, [edx]
.text:004093E9                 add     ecx, 40h ; '@'
.text:004093EC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004093F0                 mov     [esp+5Ch+MaxCount], ebx
.text:004093F4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004093F7                 call    fprintf
.text:004093FC                 jmp     short loc_4093B1
.text:004093FC ; ---------------------------------------------------------------------------
.text:004093FE                 align 10h
.text:00409400
.text:00409400 loc_409400:                             ; CODE XREF: sub_408AD0+54C↑j
.text:00409400                                         ; sub_408AD0+555↑j
.text:00409400                 mov     eax, [esp+5Ch+var_14]
.text:00409404                 test    eax, eax
.text:00409406                 jz      short loc_40943F
.text:00409408                 mov     ebx, [ebp+1Ch]
.text:0040940B                 test    ebx, ebx
.text:0040940D                 jz      short loc_409447
.text:0040940F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00409416
.text:00409416 loc_409416:                             ; CODE XREF: sub_408AD0+97E↓j
.text:00409416                 call    ds:libintl_gettext
.text:0040941C                 mov     [esp+5Ch+var_50], esi
.text:00409420                 mov     ebx, [esp+5Ch+arg_4]
.text:00409424                 mov     edx, ds:_iob
.text:0040942A                 mov     esi, [ebx]
.text:0040942C                 add     edx, 40h ; '@'
.text:0040942F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409433                 mov     [esp+5Ch+MaxCount], esi
.text:00409437                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040943A                 call    fprintf
.text:0040943F
.text:0040943F loc_40943F:                             ; CODE XREF: sub_408AD0+936↑j
.text:0040943F                 mov     [ebp+8], edi
.text:00409442                 jmp     loc_408E28
.text:00409447 ; ---------------------------------------------------------------------------
.text:00409447
.text:00409447 loc_409447:                             ; CODE XREF: sub_408AD0+93D↑j
.text:00409447                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040944E                 jmp     short loc_409416
.text:00409450 ; ---------------------------------------------------------------------------
.text:00409450
.text:00409450 loc_409450:                             ; CODE XREF: sub_408AD0+26E↑j
.text:00409450                 mov     edi, [esp+5Ch+var_14]
.text:00409454                 test    edi, edi
.text:00409456                 jnz     short loc_40946E
.text:00409458
.text:00409458 loc_409458:                             ; CODE XREF: sub_408AD0+9D4↓j
.text:00409458                 mov     edx, [ebp+14h]
.text:0040945B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040945E                 call    strlen
.text:00409463                 add     [ebp+14h], eax
.text:00409466                 inc     dword ptr [ebp+0]
.text:00409469                 jmp     loc_408FAE
.text:0040946E ; ---------------------------------------------------------------------------
.text:0040946E
.text:0040946E loc_40946E:                             ; CODE XREF: sub_408AD0+986↑j
.text:0040946E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00409475                 call    ds:libintl_gettext
.text:0040947B                 mov     ebx, [ebp+0]
.text:0040947E                 mov     edi, [esp+5Ch+arg_4]
.text:00409482                 mov     ecx, [edi+ebx*4]
.text:00409485                 mov     ebx, ds:_iob
.text:0040948B                 mov     [esp+5Ch+var_50], ecx
.text:0040948F                 mov     esi, [edi]
.text:00409491                 add     ebx, 40h ; '@'
.text:00409494                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409498                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040949B                 mov     [esp+5Ch+MaxCount], esi
.text:0040949F                 call    fprintf
.text:004094A4                 jmp     short loc_409458
.text:004094A6 ; ---------------------------------------------------------------------------
.text:004094A6
.text:004094A6 loc_4094A6:                             ; CODE XREF: sub_408AD0+246↑j
.text:004094A6                 mov     ecx, [ebp+14h]
.text:004094A9                 mov     ebx, edi
.text:004094AB                 mov     edx, [esi]
.text:004094AD                 sub     ebx, ecx
.text:004094AF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004094B2                 call    strlen
.text:004094B7                 cmp     ebx, eax
.text:004094B9                 jz      short loc_409511
.text:004094BB                 mov     ebx, [esp+5Ch+var_18]
.text:004094BF                 test    ebx, ebx
.text:004094C1                 jz      short loc_409500
.text:004094C3                 mov     edx, [esp+5Ch+arg_14]
.text:004094C7                 test    edx, edx
.text:004094C9                 jnz     short loc_4094D7
.text:004094CB                 mov     ecx, [esp+5Ch+var_18]
.text:004094CF                 mov     ebx, [esi+4]
.text:004094D2                 cmp     [ecx+4], ebx
.text:004094D5                 jz      short loc_4094E4
.text:004094D7
.text:004094D7 loc_4094D7:                             ; CODE XREF: sub_408AD0+9F9↑j
.text:004094D7                                         ; sub_408AD0+A1A↓j ...
.text:004094D7                 mov     [esp+5Ch+var_20], 1
.text:004094DF                 jmp     loc_408D1C
.text:004094E4 ; ---------------------------------------------------------------------------
.text:004094E4
.text:004094E4 loc_4094E4:                             ; CODE XREF: sub_408AD0+A05↑j
.text:004094E4                 mov     edx, [esi+8]
.text:004094E7                 cmp     [ecx+8], edx
.text:004094EA                 jnz     short loc_4094D7
.text:004094EC                 mov     ebx, [esi+0Ch]
.text:004094EF                 cmp     [ecx+0Ch], ebx
.text:004094F2                 jnz     short loc_4094D7
.text:004094F4                 jmp     loc_408D1C
.text:004094F4 ; ---------------------------------------------------------------------------
.text:004094F9                 align 10h
.text:00409500
.text:00409500 loc_409500:                             ; CODE XREF: sub_408AD0+9F1↑j
.text:00409500                 mov     [esp+5Ch+var_18], esi
.text:00409504                 mov     eax, [esp+5Ch+var_28]
.text:00409508                 mov     [esp+5Ch+var_24], eax
.text:0040950C                 jmp     loc_408D1C
.text:00409511 ; ---------------------------------------------------------------------------
.text:00409511
.text:00409511 loc_409511:                             ; CODE XREF: sub_408AD0+9E9↑j
.text:00409511                 mov     [esp+5Ch+var_18], esi
.text:00409515                 mov     ecx, [esp+5Ch+var_28]
.text:00409519                 mov     [esp+5Ch+var_1C], 1
.text:00409521                 mov     [esp+5Ch+var_24], ecx
.text:00409525                 jmp     loc_408D30
.text:0040952A ; ---------------------------------------------------------------------------
.text:0040952A
.text:0040952A loc_40952A:                             ; CODE XREF: sub_408AD0+1BF↑j
.text:0040952A                 mov     eax, [esp+5Ch+Str]
.text:0040952E                 movsx   esi, dl
.text:00409531                 mov     [esp+5Ch+Str2], esi ; Val
.text:00409535                 mov     [esp+5Ch+Str1], eax ; Str
.text:00409538                 call    strchr
.text:0040953D                 test    eax, eax
.text:0040953F                 jnz     loc_408FF0
.text:00409545                 jmp     loc_408C95
.text:0040954A ; ---------------------------------------------------------------------------
.text:0040954A
.text:0040954A loc_40954A:                             ; CODE XREF: sub_408AD0+17C↑j
.text:0040954A                 mov     ecx, 1
.text:0040954F                 jmp     loc_408C52
.text:00409554 ; ---------------------------------------------------------------------------
.text:00409554
.text:00409554 loc_409554:                             ; CODE XREF: sub_408AD0+D4↑j
.text:00409554                                         ; sub_408AD0+130↑j
.text:00409554                 mov     eax, [ebp+20h]
.text:00409557                 cmp     eax, [ebp+24h]
.text:0040955A                 jz      loc_408C30
.text:00409560                 mov     [ebp+0], eax
.text:00409563                 jmp     loc_408C30
.text:00409568 ; ---------------------------------------------------------------------------
.text:00409568
.text:00409568 loc_409568:                             ; CODE XREF: sub_408AD0+FE↑j
.text:00409568                 mov     [ebp+20h], eax
.text:0040956B                 jmp     loc_408BF0
.text:00409570 ; ---------------------------------------------------------------------------
.text:00409570
.text:00409570 loc_409570:                             ; CODE XREF: sub_408AD0+CA↑j
.text:00409570                 mov     edx, [ebp+20h]
.text:00409573                 mov     eax, [ebp+24h]
.text:00409576                 cmp     edx, eax
.text:00409578                 jz      short loc_4095F0
.text:0040957A                 cmp     eax, ebx
.text:0040957C                 jz      short loc_409591
.text:0040957E                 mov     [esp+5Ch+Str2], ebp
.text:00409582                 mov     ebx, [esp+5Ch+arg_4]
.text:00409586                 mov     [esp+5Ch+Str1], ebx
.text:00409589                 call    sub_409780
.text:0040958E                 mov     ebx, [ebp+0]
.text:00409591
.text:00409591 loc_409591:                             ; CODE XREF: sub_408AD0+AAC↑j
.text:00409591                                         ; sub_408AD0+B22↓j ...
.text:00409591                 cmp     ebx, [esp+5Ch+arg_0]
.text:00409595                 jge     short loc_4095E0
.text:00409597                 mov     esi, [esp+5Ch+arg_4]
.text:0040959B                 mov     eax, [esi+ebx*4]
.text:0040959E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004095A1                 jz      short loc_4095E8
.text:004095A3                 lea     esi, [esi+0]
.text:004095A9                 lea     edi, [edi+0]
.text:004095B0
.text:004095B0 loc_4095B0:                             ; CODE XREF: sub_408AD0+AFC↓j
.text:004095B0                                         ; sub_408AD0+B1C↓j
.text:004095B0                 lea     eax, [ebx+1]
.text:004095B3                 mov     ebx, eax
.text:004095B5                 mov     [ebp+0], eax
.text:004095B8                 cmp     eax, [esp+5Ch+arg_0]
.text:004095BC                 jge     short loc_4095E0
.text:004095BE                 mov     edi, [esp+5Ch+arg_4]
.text:004095C2                 mov     edx, [edi+eax*4]
.text:004095C5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004095C8                 jz      short loc_4095D0
.text:004095CA
.text:004095CA loc_4095CA:                             ; CODE XREF: sub_408AD0+B04↓j
.text:004095CA                 mov     ebx, eax
.text:004095CC                 jmp     short loc_4095B0
.text:004095CC ; ---------------------------------------------------------------------------
.text:004095CE                 align 10h
.text:004095D0
.text:004095D0 loc_4095D0:                             ; CODE XREF: sub_408AD0+AF8↑j
.text:004095D0                 cmp     byte ptr [edx+1], 0
.text:004095D4                 jz      short loc_4095CA
.text:004095D6                 lea     esi, [esi+0]
.text:004095D9                 lea     edi, [edi+0]
.text:004095E0
.text:004095E0 loc_4095E0:                             ; CODE XREF: sub_408AD0+AC5↑j
.text:004095E0                                         ; sub_408AD0+AEC↑j ...
.text:004095E0                 mov     [ebp+24h], ebx
.text:004095E3                 jmp     loc_408BA0
.text:004095E8 ; ---------------------------------------------------------------------------
.text:004095E8
.text:004095E8 loc_4095E8:                             ; CODE XREF: sub_408AD0+AD1↑j
.text:004095E8                 cmp     byte ptr [eax+1], 0
.text:004095EC                 jz      short loc_4095B0
.text:004095EE                 jmp     short loc_4095E0
.text:004095F0 ; ---------------------------------------------------------------------------
.text:004095F0
.text:004095F0 loc_4095F0:                             ; CODE XREF: sub_408AD0+AA8↑j
.text:004095F0                 cmp     edx, ebx
.text:004095F2                 jz      short loc_409591
.text:004095F4                 mov     [ebp+20h], ebx
.text:004095F7                 jmp     short loc_409591
.text:004095F9 ; ---------------------------------------------------------------------------
.text:004095F9
.text:004095F9 loc_4095F9:                             ; CODE XREF: sub_408AD0+88↑j
.text:004095F9                 mov     dword ptr [ebp+18h], 0
.text:00409600                 mov     esi, [esp+5Ch+Str]
.text:00409604
.text:00409604 loc_409604:                             ; CODE XREF: sub_408AD0+B49↓j
.text:00409604                 inc     esi
.text:00409605                 jmp     loc_408B68
.text:00409605 ; ---------------------------------------------------------------------------
.text:0040960A                 align 10h
.text:00409610
.text:00409610 loc_409610:                             ; CODE XREF: sub_408AD0+80↑j
.text:00409610                 mov     dword ptr [ebp+18h], 2
.text:00409617                 mov     esi, ecx
.text:00409619                 jmp     short loc_409604
.text:00409619 ; ---------------------------------------------------------------------------
.text:0040961B                 align 10h
.text:00409620
.text:00409620 loc_409620:                             ; CODE XREF: sub_408AD0+69↑j
.text:00409620                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect_0 ; "POSIXLY_CORRECT"
.text:00409627                 call    getenv
.text:0040962C                 test    eax, eax
.text:0040962E                 jz      loc_408B44
.text:00409634                 jmp     loc_408B3F
.text:00409634 ; ---------------------------------------------------------------------------
.text:00409639                 align 10h
.text:00409640
.text:00409640 loc_409640:                             ; CODE XREF: sub_408AD0+3F↑j
.text:00409640                 mov     dword ptr [ebp+0], 1
.text:00409647                 mov     ebx, 1
.text:0040964C                 jmp     loc_408B20
.text:0040964C sub_408AD0      endp
.text:0040964C
.text:00409651 ; ---------------------------------------------------------------------------
.text:00409651                 jmp     short sub_409660
.text:00409651 ; ---------------------------------------------------------------------------
.text:00409653                 align 10h
.text:00409660
.text:00409660 ; =============== S U B R O U T I N E =======================================
.text:00409660
.text:00409660
.text:00409660 ; int __cdecl sub_409660(int, int, char *, int, int, int, int)
.text:00409660 sub_409660      proc near               ; CODE XREF: .text:00409651↑j
.text:00409660                                         ; sub_409E00+3A↓p ...
.text:00409660
.text:00409660 var_2C          = dword ptr -2Ch
.text:00409660 var_28          = dword ptr -28h
.text:00409660 Str             = dword ptr -24h
.text:00409660 var_20          = dword ptr -20h
.text:00409660 var_1C          = dword ptr -1Ch
.text:00409660 var_18          = dword ptr -18h
.text:00409660 var_14          = dword ptr -14h
.text:00409660 var_10          = dword ptr -10h
.text:00409660 arg_0           = dword ptr  4
.text:00409660 arg_4           = dword ptr  8
.text:00409660 arg_8           = dword ptr  0Ch
.text:00409660 arg_C           = dword ptr  10h
.text:00409660 arg_10          = dword ptr  14h
.text:00409660 arg_14          = dword ptr  18h
.text:00409660 arg_18          = dword ptr  1Ch
.text:00409660
.text:00409660                 sub     esp, 2Ch
.text:00409663                 mov     edx, dword_4170C0
.text:00409669                 mov     [esp+2Ch+var_10], offset dword_418500 ; int
.text:00409671                 mov     ecx, dword_4170C4
.text:00409677                 mov     ds:dword_418500, edx
.text:0040967D                 mov     edx, [esp+2Ch+arg_18]
.text:00409681                 mov     ds:dword_418504, ecx
.text:00409687                 mov     ecx, [esp+2Ch+arg_14]
.text:0040968B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040968F                 mov     edx, [esp+2Ch+arg_10]
.text:00409693                 mov     [esp+2Ch+var_18], ecx ; int
.text:00409697                 mov     ecx, [esp+2Ch+arg_C]
.text:0040969B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040969F                 mov     edx, [esp+2Ch+arg_8]
.text:004096A3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004096A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004096AB                 mov     [esp+2Ch+Str], edx ; Str
.text:004096AF                 mov     edx, [esp+2Ch+arg_0]
.text:004096B3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004096B7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004096BA                 call    sub_408AD0
.text:004096BF                 mov     ecx, ds:dword_418500
.text:004096C5                 mov     dword_4170C0, ecx
.text:004096CB                 mov     ecx, ds:dword_41850C
.text:004096D1                 mov     ds:Str2, ecx
.text:004096D7                 mov     ecx, ds:dword_418508
.text:004096DD                 mov     dword_4170C8, ecx
.text:004096E3                 add     esp, 2Ch
.text:004096E6                 retn
.text:004096E6 sub_409660      endp
.text:004096E6
.text:004096E6 ; ---------------------------------------------------------------------------
.text:004096E7                 align 10h
.text:004096F0                 sub     esp, 2Ch
.text:004096F3                 mov     edx, dword_4170C0
.text:004096F9                 mov     dword ptr [esp+1Ch], offset dword_418500
.text:00409701                 mov     ecx, dword_4170C4
.text:00409707                 mov     dword ptr [esp+18h], 1
.text:0040970F                 mov     ds:dword_418500, edx
.text:00409715                 mov     edx, [esp+38h]
.text:00409719                 mov     ds:dword_418504, ecx
.text:0040971F                 mov     ecx, [esp+34h]
.text:00409723                 mov     [esp+8], edx
.text:00409727                 mov     edx, [esp+30h]
.text:0040972B                 mov     [esp+4], ecx
.text:0040972F                 mov     dword ptr [esp+14h], 0
.text:00409737                 mov     dword ptr [esp+10h], 0
.text:0040973F                 mov     dword ptr [esp+0Ch], 0
.text:00409747                 mov     [esp], edx
.text:0040974A                 call    sub_408AD0
.text:0040974F                 mov     ecx, ds:dword_418500
.text:00409755                 mov     dword_4170C0, ecx
.text:0040975B                 mov     ecx, ds:dword_41850C
.text:00409761                 mov     ds:Str2, ecx
.text:00409767                 mov     ecx, ds:dword_418508
.text:0040976D                 mov     dword_4170C8, ecx
.text:00409773                 add     esp, 2Ch
.text:00409776                 retn
.text:00409776 ; ---------------------------------------------------------------------------
.text:00409777                 align 10h
.text:00409780
.text:00409780 ; =============== S U B R O U T I N E =======================================
.text:00409780
.text:00409780
.text:00409780 sub_409780      proc near               ; CODE XREF: sub_408AD0+113↑p
.text:00409780                                         ; sub_408AD0+AB9↑p
.text:00409780
.text:00409780 var_2C          = dword ptr -2Ch
.text:00409780 var_28          = dword ptr -28h
.text:00409780 var_24          = dword ptr -24h
.text:00409780 var_20          = dword ptr -20h
.text:00409780 var_1C          = dword ptr -1Ch
.text:00409780 var_18          = dword ptr -18h
.text:00409780 var_14          = dword ptr -14h
.text:00409780 arg_0           = dword ptr  4
.text:00409780 arg_4           = dword ptr  8
.text:00409780
.text:00409780                 push    ebp
.text:00409781                 push    edi
.text:00409782                 push    esi
.text:00409783                 push    ebx
.text:00409784                 sub     esp, 1Ch
.text:00409787                 mov     ecx, [esp+2Ch+arg_4]
.text:0040978B                 mov     eax, [esp+2Ch+arg_4]
.text:0040978F                 mov     ebx, [esp+2Ch+arg_4]
.text:00409793                 mov     edx, [ecx+20h]
.text:00409796                 mov     edi, [esp+2Ch+arg_0]
.text:0040979A                 mov     ecx, [ebx]
.text:0040979C                 mov     [esp+2Ch+var_2C], edx
.text:0040979F                 mov     [esp+2Ch+var_14], edx
.text:004097A3                 mov     edx, [eax+24h]
.text:004097A6                 mov     [esp+2Ch+var_28], ecx
.text:004097AA                 mov     [esp+2Ch+var_1C], ecx
.text:004097AE                 cmp     ecx, edx
.text:004097B0                 mov     [esp+2Ch+var_18], edx
.text:004097B4                 jle     short loc_409830
.text:004097B6                 mov     esi, [esp+2Ch+var_2C]
.text:004097B9                 cmp     edx, esi
.text:004097BB                 jle     short loc_409830
.text:004097BD                 lea     esi, [esi+0]
.text:004097C0
.text:004097C0 loc_4097C0:                             ; CODE XREF: sub_409780+A1↓j
.text:004097C0                 mov     ebx, [esp+2Ch+var_1C]
.text:004097C4                 mov     edx, [esp+2Ch+var_18]
.text:004097C8                 mov     ebp, [esp+2Ch+var_18]
.text:004097CC                 mov     eax, [esp+2Ch+var_14]
.text:004097D0                 sub     ebx, edx
.text:004097D2                 mov     [esp+2Ch+var_20], ebx
.text:004097D6                 sub     ebp, eax
.text:004097D8                 cmp     ebx, ebp
.text:004097DA                 jle     short loc_409855
.text:004097DC                 xor     esi, esi
.text:004097DE                 cmp     esi, ebp
.text:004097E0                 jge     short loc_40980D
.text:004097E2                 mov     ecx, [esp+2Ch+var_1C]
.text:004097E6                 sub     ecx, ebp
.text:004097E8                 mov     [esp+2Ch+var_24], ecx
.text:004097EC                 lea     esi, [esi+0]
.text:004097F0
.text:004097F0 loc_4097F0:                             ; CODE XREF: sub_409780+8B↓j
.text:004097F0                 mov     ecx, [esp+2Ch+var_14]
.text:004097F4                 mov     edx, [esp+2Ch+var_24]
.text:004097F8                 add     ecx, esi
.text:004097FA                 add     edx, esi
.text:004097FC                 mov     ebx, [edi+ecx*4]
.text:004097FF                 mov     eax, [edi+edx*4]
.text:00409802                 inc     esi
.text:00409803                 cmp     esi, ebp
.text:00409805                 mov     [edi+ecx*4], eax
.text:00409808                 mov     [edi+edx*4], ebx
.text:0040980B                 jl      short loc_4097F0
.text:0040980D
.text:0040980D loc_40980D:                             ; CODE XREF: sub_409780+60↑j
.text:0040980D                 sub     [esp+2Ch+var_1C], ebp
.text:00409811
.text:00409811 loc_409811:                             ; CODE XREF: sub_409780+107↓j
.text:00409811                 mov     eax, [esp+2Ch+var_18]
.text:00409815                 cmp     [esp+2Ch+var_1C], eax
.text:00409819                 jle     short loc_409830
.text:0040981B                 mov     ebp, [esp+2Ch+var_14]
.text:0040981F                 cmp     eax, ebp
.text:00409821                 jg      short loc_4097C0
.text:00409823                 lea     esi, [esi+0]
.text:00409829                 lea     edi, [edi+0]
.text:00409830
.text:00409830 loc_409830:                             ; CODE XREF: sub_409780+34↑j
.text:00409830                                         ; sub_409780+3B↑j ...
.text:00409830                 mov     esi, [esp+2Ch+var_28]
.text:00409834                 mov     ecx, [esp+2Ch+var_18]
.text:00409838                 mov     eax, [esp+2Ch+var_2C]
.text:0040983B                 mov     edi, [esp+2Ch+arg_4]
.text:0040983F                 mov     edx, [esp+2Ch+var_28]
.text:00409843                 sub     esi, ecx
.text:00409845                 add     esi, eax
.text:00409847                 mov     [edi+20h], esi
.text:0040984A                 mov     [edi+24h], edx
.text:0040984D                 add     esp, 1Ch
.text:00409850                 pop     ebx
.text:00409851                 pop     esi
.text:00409852                 pop     edi
.text:00409853                 pop     ebp
.text:00409854                 retn
.text:00409855 ; ---------------------------------------------------------------------------
.text:00409855
.text:00409855 loc_409855:                             ; CODE XREF: sub_409780+5A↑j
.text:00409855                 xor     esi, esi
.text:00409857                 cmp     esi, [esp+2Ch+var_20]
.text:0040985B                 jge     short loc_40987F
.text:0040985D                 lea     esi, [esi+0]
.text:00409860
.text:00409860 loc_409860:                             ; CODE XREF: sub_409780+FD↓j
.text:00409860                 mov     ebx, [esp+2Ch+var_14]
.text:00409864                 mov     ebp, [esp+2Ch+var_18]
.text:00409868                 add     ebx, esi
.text:0040986A                 add     ebp, esi
.text:0040986C                 mov     edx, [edi+ebx*4]
.text:0040986F                 inc     esi
.text:00409870                 cmp     esi, [esp+2Ch+var_20]
.text:00409874                 mov     ecx, [edi+ebp*4]
.text:00409877                 mov     [edi+ebx*4], ecx
.text:0040987A                 mov     [edi+ebp*4], edx
.text:0040987D                 jl      short loc_409860
.text:0040987F
.text:0040987F loc_40987F:                             ; CODE XREF: sub_409780+DB↑j
.text:0040987F                 mov     esi, [esp+2Ch+var_20]
.text:00409883                 add     [esp+2Ch+var_14], esi
.text:00409887                 jmp     short loc_409811
.text:00409887 sub_409780      endp
.text:00409887
.text:00409887 ; ---------------------------------------------------------------------------
.text:00409889                 align 20h
.text:004098A0                 sub     esp, 0Ch
.text:004098A3                 mov     edx, [esp+14h]
.text:004098A7                 mov     dword ptr [esp+4], 5
.text:004098AF                 mov     [esp+8], edx
.text:004098B3                 mov     edx, [esp+10h]
.text:004098B7                 mov     [esp], edx
.text:004098BA                 call    sub_40C430
.text:004098BF                 add     esp, 0Ch
.text:004098C2                 retn
.text:004098C2 ; ---------------------------------------------------------------------------
.text:004098C3                 align 10h
.text:004098D0
.text:004098D0 ; =============== S U B R O U T I N E =======================================
.text:004098D0
.text:004098D0
.text:004098D0 ; int __cdecl sub_4098D0(char *)
.text:004098D0 sub_4098D0      proc near               ; CODE XREF: sub_4021E0+44E↑p
.text:004098D0
.text:004098D0 var_C           = dword ptr -0Ch
.text:004098D0 var_8           = dword ptr -8
.text:004098D0 var_4           = dword ptr -4
.text:004098D0 arg_0           = dword ptr  4
.text:004098D0
.text:004098D0                 sub     esp, 0Ch
.text:004098D3                 mov     edx, [esp+0Ch+arg_0]
.text:004098D7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004098DF                 mov     [esp+0Ch+var_C], 0 ; int
.text:004098E6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004098EA                 call    sub_40C430
.text:004098EF                 add     esp, 0Ch
.text:004098F2                 retn
.text:004098F2 sub_4098D0      endp
.text:004098F2
.text:004098F2 ; ---------------------------------------------------------------------------
.text:004098F3                 align 10h
.text:00409900 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00409900                                         ; DATA XREF: .data:Buffer↓o
.text:00409932 ; const char aSSS[]
.text:00409932 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_409BF0+50↓o
.text:0040993E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040993E                                         ; DATA XREF: sub_409BF0:loc_409C91↓o
.text:0040994E                 align 20h
.text:00409960 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00409960                                         ; DATA XREF: sub_409BF0+100↓o
.text:00409960                 db 'ere is NO',0Ah
.text:00409960                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00409960                 db 'R PURPOSE.',0Ah,0
.text:004099F8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:004099F8                                         ; DATA XREF: sub_409BF0:loc_409D31↓o
.text:00409A0F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00409A0F                                         ; DATA XREF: sub_409BF0:loc_409D3D↓o
.text:00409A2B                 align 20h
.text:00409A40 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00409A40                                         ; DATA XREF: sub_409BF0:loc_409D49↓o
.text:00409A40                 db 'and %s.',0Ah,0
.text:00409A60 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00409A60                                         ; DATA XREF: sub_409BF0:loc_409D55↓o
.text:00409A60                 db '%s, and %s.',0Ah,0
.text:00409A84                 align 20h
.text:00409AA0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00409AA0                                         ; DATA XREF: sub_409BF0:loc_409D61↓o
.text:00409AA0                 db '%s, %s, and %s.',0Ah,0
.text:00409AC8                 align 20h
.text:00409AE0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00409AE0                                         ; DATA XREF: sub_409BF0:loc_409D6D↓o
.text:00409AE0                 db '%s, %s, %s, and %s.',0Ah,0
.text:00409B0C                 align 20h
.text:00409B20 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00409B20                                         ; DATA XREF: sub_409BF0:loc_409D79↓o
.text:00409B20                 db '%s, %s, %s, %s,',0Ah
.text:00409B20                 db 'and %s.',0Ah,0
.text:00409B50                 align 20h
.text:00409B60 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00409B60                                         ; DATA XREF: sub_409BF0:loc_409D85↓o
.text:00409B60                 db '%s, %s, %s, %s,',0Ah
.text:00409B60                 db '%s, and %s.',0Ah,0
.text:00409B94                 align 10h
.text:00409BA0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00409BA0                                         ; DATA XREF: sub_409BF0:def_409C5D↓o
.text:00409BA0                 db '%s, %s, %s, %s,',0Ah
.text:00409BA0                 db '%s, %s, and others.',0Ah,0
.text:00409BDC ; const char aSS_0[]
.text:00409BDC aSS_0           db '%s %s',0Ah,0        ; DATA XREF: sub_409BF0+1B5↓o
.text:00409BE3                 align 10h
.text:00409BF0
.text:00409BF0 ; =============== S U B R O U T I N E =======================================
.text:00409BF0
.text:00409BF0
.text:00409BF0 ; int __cdecl sub_409BF0(FILE *, FILE *, int, int, va_list)
.text:00409BF0 sub_409BF0      proc near               ; CODE XREF: sub_409DC0+2A↓p
.text:00409BF0
.text:00409BF0 Stream          = dword ptr -2Ch
.text:00409BF0 Format          = dword ptr -28h
.text:00409BF0 ArgList         = dword ptr -24h
.text:00409BF0 var_20          = dword ptr -20h
.text:00409BF0 var_1C          = dword ptr -1Ch
.text:00409BF0 var_14          = dword ptr -14h
.text:00409BF0 arg_0           = dword ptr  4
.text:00409BF0 arg_4           = dword ptr  8
.text:00409BF0 arg_8           = dword ptr  0Ch
.text:00409BF0 arg_C           = dword ptr  10h
.text:00409BF0 arg_10          = dword ptr  14h
.text:00409BF0
.text:00409BF0                 push    ebp
.text:00409BF1                 push    edi
.text:00409BF2                 push    esi
.text:00409BF3                 push    ebx
.text:00409BF4                 sub     esp, 1Ch
.text:00409BF7                 xor     ebx, ebx
.text:00409BF9                 mov     edi, [esp+2Ch+arg_10]
.text:00409BFD                 mov     edx, [esp+2Ch+arg_8]
.text:00409C01                 mov     esi, [esp+2Ch+arg_0]
.text:00409C05                 mov     eax, [edi]
.text:00409C07                 mov     ecx, [esp+2Ch+arg_4]
.text:00409C0B                 mov     [esp+2Ch+var_14], edx
.text:00409C0F                 mov     ebp, [esp+2Ch+arg_C]
.text:00409C13                 lea     edx, [edi+4]
.text:00409C16                 test    eax, eax
.text:00409C18                 jz      short loc_409C2C
.text:00409C1A                 lea     esi, [esi+0]
.text:00409C20
.text:00409C20 loc_409C20:                             ; CODE XREF: sub_409BF0+3A↓j
.text:00409C20                 mov     eax, edx
.text:00409C22                 inc     ebx
.text:00409C23                 mov     eax, [eax]
.text:00409C25                 add     edx, 4
.text:00409C28                 test    eax, eax
.text:00409C2A                 jnz     short loc_409C20
.text:00409C2C
.text:00409C2C loc_409C2C:                             ; CODE XREF: sub_409BF0+28↑j
.text:00409C2C                 test    ecx, ecx
.text:00409C2E                 jz      loc_409D9D
.text:00409C34                 mov     [esp+2Ch+var_1C], ebp
.text:00409C38                 mov     edx, [esp+2Ch+var_14]
.text:00409C3C                 mov     [esp+2Ch+ArgList], ecx
.text:00409C40                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00409C48                 mov     [esp+2Ch+var_20], edx
.text:00409C4C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00409C4F                 call    fprintf
.text:00409C54
.text:00409C54 loc_409C54:                             ; CODE XREF: sub_409BF0+1C9↓j
.text:00409C54                 cmp     ebx, 9          ; switch 10 cases
.text:00409C57                 ja      def_409C5D      ; jumptable 00409C5D default case
.text:00409C5D                 jmp     ds:jpt_409C5D[ebx*4] ; switch jump
.text:00409C5D ; ---------------------------------------------------------------------------
.text:00409C64 jpt_409C5D      dd offset loc_409C8C    ; DATA XREF: sub_409BF0+6D↑r
.text:00409C64                 dd offset loc_409C91    ; jump table for switch statement
.text:00409C64                 dd offset loc_409D31
.text:00409C64                 dd offset loc_409D3D
.text:00409C64                 dd offset loc_409D49
.text:00409C64                 dd offset loc_409D55
.text:00409C64                 dd offset loc_409D61
.text:00409C64                 dd offset loc_409D6D
.text:00409C64                 dd offset loc_409D79
.text:00409C64                 dd offset loc_409D85
.text:00409C8C ; ---------------------------------------------------------------------------
.text:00409C8C
.text:00409C8C loc_409C8C:                             ; CODE XREF: sub_409BF0+6D↑j
.text:00409C8C                                         ; DATA XREF: sub_409BF0:jpt_409C5D↑o
.text:00409C8C                 call    abort           ; jumptable 00409C5D case 0
.text:00409C91 ; ---------------------------------------------------------------------------
.text:00409C91
.text:00409C91 loc_409C91:                             ; CODE XREF: sub_409BF0+6D↑j
.text:00409C91                                         ; DATA XREF: sub_409BF0:jpt_409C5D↑o
.text:00409C91                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00409C5D case 1
.text:00409C98                 nop
.text:00409C99                 lea     esi, [esi+0]
.text:00409CA0
.text:00409CA0 loc_409CA0:                             ; CODE XREF: sub_409BF0+148↓j
.text:00409CA0                                         ; sub_409BF0+154↓j ...
.text:00409CA0                 call    ds:libintl_gettext
.text:00409CA6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00409CAA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00409CAD                 mov     [esp+2Ch+Format], eax ; Format
.text:00409CB1                 call    vfprintf
.text:00409CB6                 mov     ebx, [esi+4]
.text:00409CB9                 dec     ebx
.text:00409CBA                 test    ebx, ebx
.text:00409CBC                 mov     [esi+4], ebx
.text:00409CBF                 js      short loc_409D1F
.text:00409CC1                 mov     edi, [esi]
.text:00409CC3                 mov     byte ptr [edi], 0Ah
.text:00409CC6                 inc     dword ptr [esi]
.text:00409CC8
.text:00409CC8 loc_409CC8:                             ; CODE XREF: sub_409BF0+13F↓j
.text:00409CC8                 mov     [esp+2Ch+Format], esi ; Stream
.text:00409CCC                 mov     edx, Buffer
.text:00409CD2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00409CD5                 call    fputs
.text:00409CDA                 mov     ebp, [esi+4]
.text:00409CDD                 dec     ebp
.text:00409CDE                 test    ebp, ebp
.text:00409CE0                 mov     [esi+4], ebp
.text:00409CE3                 js      short loc_409D0D
.text:00409CE5                 mov     ecx, [esi]
.text:00409CE7                 mov     byte ptr [ecx], 0Ah
.text:00409CEA                 inc     dword ptr [esi]
.text:00409CEC
.text:00409CEC loc_409CEC:                             ; CODE XREF: sub_409BF0+12D↓j
.text:00409CEC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00409CF0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00409CF7                 call    ds:libintl_gettext
.text:00409CFD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00409D01                 add     esp, 1Ch
.text:00409D04                 pop     ebx
.text:00409D05                 pop     esi
.text:00409D06                 pop     edi
.text:00409D07                 pop     ebp
.text:00409D08                 jmp     fputs
.text:00409D0D ; ---------------------------------------------------------------------------
.text:00409D0D
.text:00409D0D loc_409D0D:                             ; CODE XREF: sub_409BF0+F3↑j
.text:00409D0D                 mov     [esp+2Ch+Format], esi ; File
.text:00409D11                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00409D18                 call    _flsbuf
.text:00409D1D                 jmp     short loc_409CEC
.text:00409D1F ; ---------------------------------------------------------------------------
.text:00409D1F
.text:00409D1F loc_409D1F:                             ; CODE XREF: sub_409BF0+CF↑j
.text:00409D1F                 mov     [esp+2Ch+Format], esi ; File
.text:00409D23                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00409D2A                 call    _flsbuf
.text:00409D2F                 jmp     short loc_409CC8
.text:00409D31 ; ---------------------------------------------------------------------------
.text:00409D31
.text:00409D31 loc_409D31:                             ; CODE XREF: sub_409BF0+6D↑j
.text:00409D31                                         ; DATA XREF: sub_409BF0:jpt_409C5D↑o
.text:00409D31                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00409C5D case 2
.text:00409D38                 jmp     loc_409CA0
.text:00409D3D ; ---------------------------------------------------------------------------
.text:00409D3D
.text:00409D3D loc_409D3D:                             ; CODE XREF: sub_409BF0+6D↑j
.text:00409D3D                                         ; DATA XREF: sub_409BF0:jpt_409C5D↑o
.text:00409D3D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00409C5D case 3
.text:00409D44                 jmp     loc_409CA0
.text:00409D49 ; ---------------------------------------------------------------------------
.text:00409D49
.text:00409D49 loc_409D49:                             ; CODE XREF: sub_409BF0+6D↑j
.text:00409D49                                         ; DATA XREF: sub_409BF0:jpt_409C5D↑o
.text:00409D49                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00409C5D case 4
.text:00409D50                 jmp     loc_409CA0
.text:00409D55 ; ---------------------------------------------------------------------------
.text:00409D55
.text:00409D55 loc_409D55:                             ; CODE XREF: sub_409BF0+6D↑j
.text:00409D55                                         ; DATA XREF: sub_409BF0:jpt_409C5D↑o
.text:00409D55                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00409C5D case 5
.text:00409D5C                 jmp     loc_409CA0
.text:00409D61 ; ---------------------------------------------------------------------------
.text:00409D61
.text:00409D61 loc_409D61:                             ; CODE XREF: sub_409BF0+6D↑j
.text:00409D61                                         ; DATA XREF: sub_409BF0:jpt_409C5D↑o
.text:00409D61                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00409C5D case 6
.text:00409D68                 jmp     loc_409CA0
.text:00409D6D ; ---------------------------------------------------------------------------
.text:00409D6D
.text:00409D6D loc_409D6D:                             ; CODE XREF: sub_409BF0+6D↑j
.text:00409D6D                                         ; DATA XREF: sub_409BF0:jpt_409C5D↑o
.text:00409D6D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00409C5D case 7
.text:00409D74                 jmp     loc_409CA0
.text:00409D79 ; ---------------------------------------------------------------------------
.text:00409D79
.text:00409D79 loc_409D79:                             ; CODE XREF: sub_409BF0+6D↑j
.text:00409D79                                         ; DATA XREF: sub_409BF0:jpt_409C5D↑o
.text:00409D79                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00409C5D case 8
.text:00409D80                 jmp     loc_409CA0
.text:00409D85 ; ---------------------------------------------------------------------------
.text:00409D85
.text:00409D85 loc_409D85:                             ; CODE XREF: sub_409BF0+6D↑j
.text:00409D85                                         ; DATA XREF: sub_409BF0:jpt_409C5D↑o
.text:00409D85                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00409C5D case 9
.text:00409D8C                 jmp     loc_409CA0
.text:00409D91 ; ---------------------------------------------------------------------------
.text:00409D91
.text:00409D91 def_409C5D:                             ; CODE XREF: sub_409BF0+67↑j
.text:00409D91                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00409C5D default case
.text:00409D98                 jmp     loc_409CA0
.text:00409D9D ; ---------------------------------------------------------------------------
.text:00409D9D
.text:00409D9D loc_409D9D:                             ; CODE XREF: sub_409BF0+3E↑j
.text:00409D9D                 mov     [esp+2Ch+var_20], ebp
.text:00409DA1                 mov     ecx, [esp+2Ch+var_14]
.text:00409DA5                 mov     [esp+2Ch+Format], offset aSS_0 ; "%s %s\n"
.text:00409DAD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00409DB0                 mov     [esp+2Ch+ArgList], ecx
.text:00409DB4                 call    fprintf
.text:00409DB9                 jmp     loc_409C54
.text:00409DB9 sub_409BF0      endp
.text:00409DB9
.text:00409DB9 ; ---------------------------------------------------------------------------
.text:00409DBE                 align 10h
.text:00409DC0
.text:00409DC0 ; =============== S U B R O U T I N E =======================================
.text:00409DC0
.text:00409DC0
.text:00409DC0 ; int __cdecl sub_409DC0(FILE *, FILE *, int, int, char)
.text:00409DC0 sub_409DC0      proc near               ; CODE XREF: sub_4021E0+CB4↑p
.text:00409DC0
.text:00409DC0 var_1C          = dword ptr -1Ch
.text:00409DC0 var_18          = dword ptr -18h
.text:00409DC0 var_14          = dword ptr -14h
.text:00409DC0 var_10          = dword ptr -10h
.text:00409DC0 var_C           = dword ptr -0Ch
.text:00409DC0 arg_0           = dword ptr  4
.text:00409DC0 arg_4           = dword ptr  8
.text:00409DC0 arg_8           = dword ptr  0Ch
.text:00409DC0 arg_C           = dword ptr  10h
.text:00409DC0 arg_10          = byte ptr  14h
.text:00409DC0
.text:00409DC0                 sub     esp, 1Ch
.text:00409DC3                 mov     edx, [esp+1Ch+arg_C]
.text:00409DC7                 lea     ecx, [esp+1Ch+arg_10]
.text:00409DCB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00409DCF                 mov     ecx, [esp+1Ch+arg_8]
.text:00409DD3                 mov     [esp+1Ch+var_10], edx ; int
.text:00409DD7                 mov     edx, [esp+1Ch+arg_4]
.text:00409DDB                 mov     [esp+1Ch+var_14], ecx ; int
.text:00409DDF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00409DE3                 mov     edx, [esp+1Ch+arg_0]
.text:00409DE7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00409DEA                 call    sub_409BF0
.text:00409DEF                 add     esp, 1Ch
.text:00409DF2                 retn
.text:00409DF2 sub_409DC0      endp
.text:00409DF2
.text:00409DF2 ; ---------------------------------------------------------------------------
.text:00409DF3                 align 10h
.text:00409E00
.text:00409E00 ; =============== S U B R O U T I N E =======================================
.text:00409E00
.text:00409E00
.text:00409E00 ; int __cdecl sub_409E00(int, int, char *, int, int)
.text:00409E00 sub_409E00      proc near               ; CODE XREF: sub_4021E0+6D7↑p
.text:00409E00
.text:00409E00 var_1C          = dword ptr -1Ch
.text:00409E00 var_18          = dword ptr -18h
.text:00409E00 var_14          = dword ptr -14h
.text:00409E00 var_10          = dword ptr -10h
.text:00409E00 var_C           = dword ptr -0Ch
.text:00409E00 var_8           = dword ptr -8
.text:00409E00 var_4           = dword ptr -4
.text:00409E00 arg_0           = dword ptr  4
.text:00409E00 arg_4           = dword ptr  8
.text:00409E00 arg_8           = dword ptr  0Ch
.text:00409E00 arg_C           = dword ptr  10h
.text:00409E00 arg_10          = dword ptr  14h
.text:00409E00
.text:00409E00                 sub     esp, 1Ch
.text:00409E03                 mov     edx, [esp+1Ch+arg_C]
.text:00409E07                 mov     [esp+1Ch+var_4], 0 ; int
.text:00409E0F                 mov     ecx, [esp+1Ch+arg_10]
.text:00409E13                 mov     [esp+1Ch+var_8], 0 ; int
.text:00409E1B                 mov     [esp+1Ch+var_10], edx ; int
.text:00409E1F                 mov     edx, [esp+1Ch+arg_4]
.text:00409E23                 mov     [esp+1Ch+var_C], ecx ; int
.text:00409E27                 mov     ecx, [esp+1Ch+arg_8]
.text:00409E2B                 mov     [esp+1Ch+var_18], edx ; int
.text:00409E2F                 mov     edx, [esp+1Ch+arg_0]
.text:00409E33                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00409E37                 mov     [esp+1Ch+var_1C], edx ; int
.text:00409E3A                 call    sub_409660
.text:00409E3F                 add     esp, 1Ch
.text:00409E42                 retn
.text:00409E42 sub_409E00      endp
.text:00409E42
.text:00409E42 ; ---------------------------------------------------------------------------
.text:00409E43                 align 10h
.text:00409E50                 sub     esp, 2Ch
.text:00409E53                 mov     edx, [esp+44h]
.text:00409E57                 mov     dword ptr [esp+18h], 0
.text:00409E5F                 mov     ecx, [esp+40h]
.text:00409E63                 mov     dword ptr [esp+14h], 0
.text:00409E6B                 mov     [esp+1Ch], edx
.text:00409E6F                 mov     edx, [esp+3Ch]
.text:00409E73                 mov     [esp+10h], ecx
.text:00409E77                 mov     ecx, [esp+38h]
.text:00409E7B                 mov     [esp+0Ch], edx
.text:00409E7F                 mov     edx, [esp+34h]
.text:00409E83                 mov     [esp+8], ecx
.text:00409E87                 mov     [esp+4], edx
.text:00409E8B                 mov     edx, [esp+30h]
.text:00409E8F                 mov     [esp], edx
.text:00409E92                 call    sub_408AD0
.text:00409E97                 add     esp, 2Ch
.text:00409E9A                 retn
.text:00409E9A ; ---------------------------------------------------------------------------
.text:00409E9B                 align 10h
.text:00409EA0                 sub     esp, 1Ch
.text:00409EA3                 mov     edx, [esp+2Ch]
.text:00409EA7                 mov     dword ptr [esp+18h], 0
.text:00409EAF                 mov     ecx, [esp+30h]
.text:00409EB3                 mov     dword ptr [esp+14h], 1
.text:00409EBB                 mov     [esp+0Ch], edx
.text:00409EBF                 mov     edx, [esp+24h]
.text:00409EC3                 mov     [esp+10h], ecx
.text:00409EC7                 mov     ecx, [esp+28h]
.text:00409ECB                 mov     [esp+4], edx
.text:00409ECF                 mov     edx, [esp+20h]
.text:00409ED3                 mov     [esp+8], ecx
.text:00409ED7                 mov     [esp], edx
.text:00409EDA                 call    sub_409660
.text:00409EDF                 add     esp, 1Ch
.text:00409EE2                 retn
.text:00409EE2 ; ---------------------------------------------------------------------------
.text:00409EE3                 align 10h
.text:00409EF0                 sub     esp, 2Ch
.text:00409EF3                 mov     edx, [esp+44h]
.text:00409EF7                 mov     dword ptr [esp+18h], 0
.text:00409EFF                 mov     ecx, [esp+40h]
.text:00409F03                 mov     dword ptr [esp+14h], 1
.text:00409F0B                 mov     [esp+1Ch], edx
.text:00409F0F                 mov     edx, [esp+3Ch]
.text:00409F13                 mov     [esp+10h], ecx
.text:00409F17                 mov     ecx, [esp+38h]
.text:00409F1B                 mov     [esp+0Ch], edx
.text:00409F1F                 mov     edx, [esp+34h]
.text:00409F23                 mov     [esp+8], ecx
.text:00409F27                 mov     [esp+4], edx
.text:00409F2B                 mov     edx, [esp+30h]
.text:00409F2F                 mov     [esp], edx
.text:00409F32                 call    sub_408AD0
.text:00409F37                 add     esp, 2Ch
.text:00409F3A                 retn
.text:00409F3A ; ---------------------------------------------------------------------------
.text:00409F3B                 align 10h
.text:00409F40 byte_409F40     db 43h, 0               ; DATA XREF: sub_409F50+33↓o
.text:00409F42 aPosix          db 'POSIX',0            ; DATA XREF: sub_409F50+45↓o
.text:00409F48                 align 10h
.text:00409F50
.text:00409F50 ; =============== S U B R O U T I N E =======================================
.text:00409F50
.text:00409F50
.text:00409F50 sub_409F50      proc near               ; CODE XREF: sub_4021E0+F5↑p
.text:00409F50
.text:00409F50 Category        = dword ptr -1Ch
.text:00409F50 Locale          = dword ptr -18h
.text:00409F50 var_10          = dword ptr -10h
.text:00409F50 var_C           = dword ptr -0Ch
.text:00409F50 var_8           = dword ptr -8
.text:00409F50 var_4           = dword ptr -4
.text:00409F50 arg_0           = dword ptr  4
.text:00409F50
.text:00409F50                 sub     esp, 1Ch
.text:00409F53                 mov     edx, [esp+1Ch+arg_0]
.text:00409F57                 mov     [esp+1Ch+var_10], ebx
.text:00409F5B                 mov     bl, 1
.text:00409F5D                 mov     [esp+1Ch+var_C], esi
.text:00409F61                 mov     [esp+1Ch+var_8], edi
.text:00409F65                 mov     [esp+1Ch+var_4], ebp
.text:00409F69                 mov     [esp+1Ch+Locale], 0 ; Locale
.text:00409F71                 mov     [esp+1Ch+Category], edx ; Category
.text:00409F74                 call    setlocale
.text:00409F79                 test    eax, eax
.text:00409F7B                 jz      short loc_409FA4
.text:00409F7D                 cld
.text:00409F7E                 mov     edx, 2
.text:00409F83                 mov     edi, offset byte_409F40
.text:00409F88                 mov     esi, eax
.text:00409F8A                 mov     ecx, edx
.text:00409F8C                 repe cmpsb
.text:00409F8E                 jz      short loc_409FA2
.text:00409F90                 mov     edx, 6
.text:00409F95                 mov     edi, offset aPosix ; "POSIX"
.text:00409F9A                 mov     esi, eax
.text:00409F9C                 mov     ecx, edx
.text:00409F9E                 repe cmpsb
.text:00409FA0                 jnz     short loc_409FA4
.text:00409FA2
.text:00409FA2 loc_409FA2:                             ; CODE XREF: sub_409F50+3E↑j
.text:00409FA2                 xor     ebx, ebx
.text:00409FA4
.text:00409FA4 loc_409FA4:                             ; CODE XREF: sub_409F50+2B↑j
.text:00409FA4                                         ; sub_409F50+50↑j
.text:00409FA4                 movzx   eax, bl
.text:00409FA7                 mov     esi, [esp+1Ch+var_C]
.text:00409FAB                 mov     ebx, [esp+1Ch+var_10]
.text:00409FAF                 mov     edi, [esp+1Ch+var_8]
.text:00409FB3                 mov     ebp, [esp+1Ch+var_4]
.text:00409FB7                 add     esp, 1Ch
.text:00409FBA                 retn
.text:00409FBA sub_409F50      endp
.text:00409FBA
.text:00409FBA ; ---------------------------------------------------------------------------
.text:00409FBB                 align 10h
.text:00409FC0                 mov     edx, [esp+4]
.text:00409FC4                 mov     ds:dword_418530, edx
.text:00409FCA                 retn
.text:00409FCA ; ---------------------------------------------------------------------------
.text:00409FCB aWriteError     db 'write error',0      ; DATA XREF: sub_409FF0:loc_40A039↓o
.text:00409FD7 ; const char aSS_1[]
.text:00409FD7 aSS_1           db '%s: %s',0           ; DATA XREF: sub_409FF0+77↓o
.text:00409FDE ; const char aS_2[]
.text:00409FDE aS_2            db '%s',0               ; DATA XREF: sub_409FF0+A0↓o
.text:00409FE1 ; ---------------------------------------------------------------------------
.text:00409FE1                 jmp     short sub_409FF0
.text:00409FE1 ; ---------------------------------------------------------------------------
.text:00409FE3                 align 10h
.text:00409FF0
.text:00409FF0 ; =============== S U B R O U T I N E =======================================
.text:00409FF0
.text:00409FF0
.text:00409FF0 ; void __cdecl sub_409FF0()
.text:00409FF0 sub_409FF0      proc near               ; CODE XREF: .text:00409FE1↑j
.text:00409FF0                                         ; DATA XREF: sub_4021E0+E2↑o
.text:00409FF0
.text:00409FF0 Stream          = dword ptr -2Ch
.text:00409FF0 ErrorMessage    = dword ptr -28h
.text:00409FF0 var_24          = dword ptr -24h
.text:00409FF0 var_20          = byte ptr -20h
.text:00409FF0 var_1C          = dword ptr -1Ch
.text:00409FF0 var_9           = byte ptr -9
.text:00409FF0
.text:00409FF0                 push    esi
.text:00409FF1                 push    ebx
.text:00409FF2                 sub     esp, 24h
.text:00409FF5                 mov     edx, ds:_iob
.text:00409FFB                 mov     ecx, [edx+2Ch]
.text:00409FFE                 lea     esi, [edx+20h]
.text:0040A001                 shr     ecx, 5
.text:0040A004                 mov     bl, cl
.text:0040A006                 mov     ecx, [edx+20h]
.text:0040A009                 and     bl, 1
.text:0040A00C                 cmp     ecx, [esi+8]
.text:0040A00F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040A012                 setz    [esp+2Ch+var_9]
.text:0040A017                 call    fclose
.text:0040A01C                 test    eax, eax
.text:0040A01E                 setnz   al
.text:0040A021                 test    bl, bl
.text:0040A023                 jnz     loc_40A0B3
.text:0040A029                 test    al, al
.text:0040A02B                 jz      short loc_40A080
.text:0040A02D
.text:0040A02D loc_40A02D:                             ; CODE XREF: sub_409FF0+CD↓j
.text:0040A02D                 call    _errno
.text:0040A032                 mov     esi, [eax]
.text:0040A034
.text:0040A034 loc_40A034:                             ; CODE XREF: sub_409FF0+C7↓j
.text:0040A034                 cmp     esi, 9
.text:0040A037                 jz      short loc_40A0A6
.text:0040A039
.text:0040A039 loc_40A039:                             ; CODE XREF: sub_409FF0+B8↓j
.text:0040A039                                         ; sub_409FF0+C1↓j
.text:0040A039                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:0040A040                 call    ds:libintl_gettext
.text:0040A046                 mov     ebx, eax
.text:0040A048                 mov     eax, ds:dword_418530
.text:0040A04D                 test    eax, eax
.text:0040A04F                 jz      short loc_40A086
.text:0040A051                 mov     [esp+2Ch+Stream], eax ; char *
.text:0040A054                 call    sub_40C7A0
.text:0040A059                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040A05D                 mov     edx, Code
.text:0040A063                 mov     [esp+2Ch+var_1C], ebx
.text:0040A067                 mov     [esp+2Ch+var_24], offset aSS_1 ; "%s: %s"
.text:0040A06F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040A073                 mov     [esp+2Ch+Stream], edx ; Code
.text:0040A076                 call    sub_40CB60
.text:0040A07B                 nop
.text:0040A07C                 lea     esi, [esi+0]
.text:0040A080
.text:0040A080 loc_40A080:                             ; CODE XREF: sub_409FF0+3B↑j
.text:0040A080                                         ; sub_409FF0+B4↓j ...
.text:0040A080                 add     esp, 24h
.text:0040A083                 pop     ebx
.text:0040A084                 pop     esi
.text:0040A085                 retn
.text:0040A086 ; ---------------------------------------------------------------------------
.text:0040A086
.text:0040A086 loc_40A086:                             ; CODE XREF: sub_409FF0+5F↑j
.text:0040A086                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040A08A                 mov     ebx, Code
.text:0040A090                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:0040A098                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040A09C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040A09F                 call    sub_40CB60
.text:0040A0A4                 jmp     short loc_40A080
.text:0040A0A6 ; ---------------------------------------------------------------------------
.text:0040A0A6
.text:0040A0A6 loc_40A0A6:                             ; CODE XREF: sub_409FF0+47↑j
.text:0040A0A6                 test    bl, bl
.text:0040A0A8                 jnz     short loc_40A039
.text:0040A0AA                 cmp     [esp+2Ch+var_9], 0
.text:0040A0AF                 jnz     short loc_40A080
.text:0040A0B1                 jmp     short loc_40A039
.text:0040A0B3 ; ---------------------------------------------------------------------------
.text:0040A0B3
.text:0040A0B3 loc_40A0B3:                             ; CODE XREF: sub_409FF0+33↑j
.text:0040A0B3                 xor     esi, esi
.text:0040A0B5                 test    al, al
.text:0040A0B7                 jz      loc_40A034
.text:0040A0BD                 jmp     loc_40A02D
.text:0040A0BD sub_409FF0      endp
.text:0040A0BD
.text:0040A0BD ; ---------------------------------------------------------------------------
.text:0040A0C2                 align 10h
.text:0040A0D0 ; const char aPosix2Version[]
.text:0040A0D0 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: sub_40A0E0+C↓o
.text:0040A0E0
.text:0040A0E0 ; =============== S U B R O U T I N E =======================================
.text:0040A0E0
.text:0040A0E0
.text:0040A0E0 sub_40A0E0      proc near               ; CODE XREF: sub_4021E0+4E↑p
.text:0040A0E0
.text:0040A0E0 VarName         = dword ptr -1Ch
.text:0040A0E0 EndPtr          = dword ptr -18h
.text:0040A0E0 Radix           = dword ptr -14h
.text:0040A0E0 var_8           = dword ptr -8
.text:0040A0E0 var_4           = dword ptr -4
.text:0040A0E0
.text:0040A0E0                 sub     esp, 1Ch
.text:0040A0E3                 mov     [esp+1Ch+var_4], ebx
.text:0040A0E7                 mov     ebx, 30A29h
.text:0040A0EC                 mov     [esp+1Ch+VarName], offset aPosix2Version ; "_POSIX2_VERSION"
.text:0040A0F3                 call    getenv
.text:0040A0F8                 test    eax, eax
.text:0040A0FA                 jz      short loc_40A101
.text:0040A0FC                 cmp     byte ptr [eax], 0
.text:0040A0FF                 jnz     short loc_40A110
.text:0040A101
.text:0040A101 loc_40A101:                             ; CODE XREF: sub_40A0E0+1A↑j
.text:0040A101                                         ; sub_40A0E0+4F↓j ...
.text:0040A101                 mov     eax, ebx
.text:0040A103                 mov     ebx, [esp+1Ch+var_4]
.text:0040A107                 add     esp, 1Ch
.text:0040A10A                 retn
.text:0040A10A ; ---------------------------------------------------------------------------
.text:0040A10B                 align 10h
.text:0040A110
.text:0040A110 loc_40A110:                             ; CODE XREF: sub_40A0E0+1F↑j
.text:0040A110                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:0040A118                 lea     ecx, [esp+1Ch+var_8]
.text:0040A11C                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:0040A120                 mov     [esp+1Ch+VarName], eax ; String
.text:0040A123                 call    strtol
.text:0040A128                 mov     ecx, [esp+1Ch+var_8]
.text:0040A12C                 cmp     byte ptr [ecx], 0
.text:0040A12F                 jnz     short loc_40A101
.text:0040A131                 mov     ebx, eax
.text:0040A133                 jmp     short loc_40A101
.text:0040A133 sub_40A0E0      endp
.text:0040A133
.text:0040A133 ; ---------------------------------------------------------------------------
.text:0040A135                 align 10h
.text:0040A140
.text:0040A140 ; =============== S U B R O U T I N E =======================================
.text:0040A140
.text:0040A140
.text:0040A140 sub_40A140      proc near               ; CODE XREF: sub_4021E0+297↑p
.text:0040A140                                         ; sub_4049B0+5E9↑p
.text:0040A140
.text:0040A140 Size            = dword ptr -0Ch
.text:0040A140 var_4           = dword ptr -4
.text:0040A140 arg_0           = dword ptr  4
.text:0040A140 arg_4           = dword ptr  8
.text:0040A140
.text:0040A140                 sub     esp, 0Ch
.text:0040A143                 xor     edx, edx
.text:0040A145                 mov     ecx, [esp+0Ch+arg_4]
.text:0040A149                 mov     [esp+0Ch+var_4], ebx
.text:0040A14D                 mov     eax, 0FFFFFFFFh
.text:0040A152                 mov     ebx, [esp+0Ch+arg_0]
.text:0040A156                 div     ecx
.text:0040A158                 cmp     eax, ebx
.text:0040A15A                 jb      short loc_40A179
.text:0040A15C                 mov     edx, ebx
.text:0040A15E                 imul    edx, ecx
.text:0040A161                 mov     [esp+0Ch+Size], edx ; Size
.text:0040A164                 call    malloc
.text:0040A169                 test    eax, eax
.text:0040A16B                 jz      short loc_40A175
.text:0040A16D
.text:0040A16D loc_40A16D:                             ; CODE XREF: sub_40A140+37↓j
.text:0040A16D                 mov     ebx, [esp+0Ch+var_4]
.text:0040A171                 add     esp, 0Ch
.text:0040A174                 retn
.text:0040A175 ; ---------------------------------------------------------------------------
.text:0040A175
.text:0040A175 loc_40A175:                             ; CODE XREF: sub_40A140+2B↑j
.text:0040A175                 test    ebx, ebx
.text:0040A177                 jz      short loc_40A16D
.text:0040A179
.text:0040A179 loc_40A179:                             ; CODE XREF: sub_40A140+1A↑j
.text:0040A179                 call    sub_40A660
.text:0040A179 sub_40A140      endp
.text:0040A179
.text:0040A179 ; ---------------------------------------------------------------------------
.text:0040A17E                 align 10h
.text:0040A180
.text:0040A180 ; =============== S U B R O U T I N E =======================================
.text:0040A180
.text:0040A180
.text:0040A180 ; int __cdecl sub_40A180(size_t)
.text:0040A180 sub_40A180      proc near               ; CODE XREF: sub_404600+86↑p
.text:0040A180                                         ; sub_404600+29E↑p ...
.text:0040A180
.text:0040A180 Size            = dword ptr -0Ch
.text:0040A180 var_4           = dword ptr -4
.text:0040A180 arg_0           = dword ptr  4
.text:0040A180
.text:0040A180                 sub     esp, 0Ch
.text:0040A183                 mov     [esp+0Ch+var_4], ebx
.text:0040A187                 mov     ebx, [esp+0Ch+arg_0]
.text:0040A18B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040A18E                 call    malloc
.text:0040A193                 test    eax, eax
.text:0040A195                 jz      short loc_40A1A0
.text:0040A197
.text:0040A197 loc_40A197:                             ; CODE XREF: sub_40A180+22↓j
.text:0040A197                 mov     ebx, [esp+0Ch+var_4]
.text:0040A19B                 add     esp, 0Ch
.text:0040A19E                 retn
.text:0040A19E ; ---------------------------------------------------------------------------
.text:0040A19F                 align 10h
.text:0040A1A0
.text:0040A1A0 loc_40A1A0:                             ; CODE XREF: sub_40A180+15↑j
.text:0040A1A0                 test    ebx, ebx
.text:0040A1A2                 jz      short loc_40A197
.text:0040A1A4                 call    sub_40A660
.text:0040A1A4 sub_40A180      endp
.text:0040A1A4
.text:0040A1A4 ; ---------------------------------------------------------------------------
.text:0040A1A9                 align 10h
.text:0040A1B0                 sub     esp, 1Ch
.text:0040A1B3                 xor     edx, edx
.text:0040A1B5                 mov     eax, 0FFFFFFFFh
.text:0040A1BA                 mov     [esp+14h], ebx
.text:0040A1BE                 mov     ecx, [esp+20h]
.text:0040A1C2                 mov     ebx, [esp+28h]
.text:0040A1C6                 mov     [esp+18h], esi
.text:0040A1CA                 mov     esi, [esp+24h]
.text:0040A1CE                 div     ebx
.text:0040A1D0                 cmp     eax, esi
.text:0040A1D2                 jb      short loc_40A204
.text:0040A1D4                 mov     [esp], ecx
.text:0040A1D7                 mov     edx, esi
.text:0040A1D9                 imul    edx, ebx
.text:0040A1DC                 mov     [esp+4], edx
.text:0040A1E0                 call    realloc
.text:0040A1E5                 test    eax, eax
.text:0040A1E7                 mov     ecx, eax
.text:0040A1E9                 jz      short loc_40A200
.text:0040A1EB
.text:0040A1EB loc_40A1EB:                             ; CODE XREF: .text:0040A202↓j
.text:0040A1EB                 mov     ebx, [esp+14h]
.text:0040A1EF                 mov     eax, ecx
.text:0040A1F1                 mov     esi, [esp+18h]
.text:0040A1F5                 add     esp, 1Ch
.text:0040A1F8                 retn
.text:0040A1F8 ; ---------------------------------------------------------------------------
.text:0040A1F9                 align 10h
.text:0040A200
.text:0040A200 loc_40A200:                             ; CODE XREF: .text:0040A1E9↑j
.text:0040A200                 test    esi, esi
.text:0040A202                 jz      short loc_40A1EB
.text:0040A204
.text:0040A204 loc_40A204:                             ; CODE XREF: .text:0040A1D2↑j
.text:0040A204                 call    sub_40A660
.text:0040A204 ; ---------------------------------------------------------------------------
.text:0040A209                 align 10h
.text:0040A210
.text:0040A210 ; =============== S U B R O U T I N E =======================================
.text:0040A210
.text:0040A210
.text:0040A210 ; int __cdecl sub_40A210(void *, size_t)
.text:0040A210 sub_40A210      proc near               ; CODE XREF: sub_403F30+542↑p
.text:0040A210                                         ; sub_4069A0+818↑p ...
.text:0040A210
.text:0040A210 Block           = dword ptr -0Ch
.text:0040A210 Size            = dword ptr -8
.text:0040A210 var_4           = dword ptr -4
.text:0040A210 arg_0           = dword ptr  4
.text:0040A210 arg_4           = dword ptr  8
.text:0040A210
.text:0040A210                 sub     esp, 0Ch
.text:0040A213                 mov     edx, [esp+0Ch+arg_0]
.text:0040A217                 mov     [esp+0Ch+var_4], ebx
.text:0040A21B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040A21F                 mov     [esp+0Ch+Block], edx ; Block
.text:0040A222                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040A226                 call    realloc
.text:0040A22B                 test    eax, eax
.text:0040A22D                 jz      short loc_40A237
.text:0040A22F
.text:0040A22F loc_40A22F:                             ; CODE XREF: sub_40A210+29↓j
.text:0040A22F                 mov     ebx, [esp+0Ch+var_4]
.text:0040A233                 add     esp, 0Ch
.text:0040A236                 retn
.text:0040A237 ; ---------------------------------------------------------------------------
.text:0040A237
.text:0040A237 loc_40A237:                             ; CODE XREF: sub_40A210+1D↑j
.text:0040A237                 test    ebx, ebx
.text:0040A239                 jz      short loc_40A22F
.text:0040A23B                 call    sub_40A660
.text:0040A23B sub_40A210      endp
.text:0040A23B
.text:0040A240
.text:0040A240 ; =============== S U B R O U T I N E =======================================
.text:0040A240
.text:0040A240 ; Attributes: thunk
.text:0040A240
.text:0040A240 ; int __cdecl sub_40A240(void *, int, int)
.text:0040A240 sub_40A240      proc near               ; CODE XREF: sub_4021E0+5FD↑p
.text:0040A240                                         ; sub_4021E0+ED7↑p ...
.text:0040A240                 jmp     sub_40A390
.text:0040A240 sub_40A240      endp
.text:0040A240
.text:0040A240 ; ---------------------------------------------------------------------------
.text:0040A245                 align 10h
.text:0040A250                 sub     esp, 0Ch
.text:0040A253                 mov     edx, [esp+14h]
.text:0040A257                 mov     dword ptr [esp+8], 1
.text:0040A25F                 mov     [esp+4], edx
.text:0040A263                 mov     edx, [esp+10h]
.text:0040A267                 mov     [esp], edx
.text:0040A26A                 call    sub_40A390
.text:0040A26F                 add     esp, 0Ch
.text:0040A272                 retn
.text:0040A272 ; ---------------------------------------------------------------------------
.text:0040A273                 align 10h
.text:0040A280
.text:0040A280 ; =============== S U B R O U T I N E =======================================
.text:0040A280
.text:0040A280
.text:0040A280 ; int __cdecl sub_40A280(size_t)
.text:0040A280 sub_40A280      proc near               ; CODE XREF: sub_4021E0+7D2↑p
.text:0040A280                                         ; sub_4021E0+F7B↑p
.text:0040A280
.text:0040A280 Size            = dword ptr -1Ch
.text:0040A280 Val             = dword ptr -18h
.text:0040A280 var_14          = dword ptr -14h
.text:0040A280 var_4           = dword ptr -4
.text:0040A280 arg_0           = dword ptr  4
.text:0040A280
.text:0040A280                 sub     esp, 1Ch
.text:0040A283                 mov     [esp+1Ch+var_4], ebx
.text:0040A287                 mov     ebx, [esp+1Ch+arg_0]
.text:0040A28B                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040A28E                 call    malloc
.text:0040A293                 test    eax, eax
.text:0040A295                 jz      short loc_40A2B3
.text:0040A297
.text:0040A297 loc_40A297:                             ; CODE XREF: sub_40A280+35↓j
.text:0040A297                 mov     [esp+1Ch+var_14], ebx ; Size
.text:0040A29B                 mov     [esp+1Ch+Val], 0 ; Val
.text:0040A2A3                 mov     [esp+1Ch+Size], eax ; void *
.text:0040A2A6                 call    memset
.text:0040A2AB                 mov     ebx, [esp+1Ch+var_4]
.text:0040A2AF                 add     esp, 1Ch
.text:0040A2B2                 retn
.text:0040A2B3 ; ---------------------------------------------------------------------------
.text:0040A2B3
.text:0040A2B3 loc_40A2B3:                             ; CODE XREF: sub_40A280+15↑j
.text:0040A2B3                 test    ebx, ebx
.text:0040A2B5                 jz      short loc_40A297
.text:0040A2B7                 call    sub_40A660
.text:0040A2B7 sub_40A280      endp
.text:0040A2B7
.text:0040A2B7 ; ---------------------------------------------------------------------------
.text:0040A2BC                 align 10h
.text:0040A2C0                 sub     esp, 0Ch
.text:0040A2C3                 xor     edx, edx
.text:0040A2C5                 mov     ecx, [esp+14h]
.text:0040A2C9                 mov     [esp+8], ebx
.text:0040A2CD                 mov     eax, 0FFFFFFFFh
.text:0040A2D2                 mov     ebx, [esp+10h]
.text:0040A2D6                 div     ecx
.text:0040A2D8                 cmp     eax, ebx
.text:0040A2DA                 jb      short loc_40A2F8
.text:0040A2DC                 mov     [esp+4], ecx
.text:0040A2E0                 mov     [esp], ebx
.text:0040A2E3                 call    calloc
.text:0040A2E8                 test    eax, eax
.text:0040A2EA                 jz      short loc_40A2F4
.text:0040A2EC
.text:0040A2EC loc_40A2EC:                             ; CODE XREF: .text:0040A2F6↓j
.text:0040A2EC                 mov     ebx, [esp+8]
.text:0040A2F0                 add     esp, 0Ch
.text:0040A2F3                 retn
.text:0040A2F4 ; ---------------------------------------------------------------------------
.text:0040A2F4
.text:0040A2F4 loc_40A2F4:                             ; CODE XREF: .text:0040A2EA↑j
.text:0040A2F4                 test    ebx, ebx
.text:0040A2F6                 jz      short loc_40A2EC
.text:0040A2F8
.text:0040A2F8 loc_40A2F8:                             ; CODE XREF: .text:0040A2DA↑j
.text:0040A2F8                 call    sub_40A660
.text:0040A2F8 ; ---------------------------------------------------------------------------
.text:0040A2FD                 align 10h
.text:0040A300                 sub     esp, 1Ch
.text:0040A303                 mov     [esp+18h], ebx
.text:0040A307                 mov     ebx, [esp+24h]
.text:0040A30B                 mov     [esp], ebx
.text:0040A30E                 call    malloc
.text:0040A313                 test    eax, eax
.text:0040A315                 mov     edx, eax
.text:0040A317                 jz      short loc_40A335
.text:0040A319
.text:0040A319 loc_40A319:                             ; CODE XREF: .text:0040A337↓j
.text:0040A319                 mov     [esp+8], ebx
.text:0040A31D                 mov     ecx, [esp+20h]
.text:0040A321                 mov     [esp], edx
.text:0040A324                 mov     [esp+4], ecx
.text:0040A328                 call    memcpy
.text:0040A32D                 mov     ebx, [esp+18h]
.text:0040A331                 add     esp, 1Ch
.text:0040A334                 retn
.text:0040A335 ; ---------------------------------------------------------------------------
.text:0040A335
.text:0040A335 loc_40A335:                             ; CODE XREF: .text:0040A317↑j
.text:0040A335                 test    ebx, ebx
.text:0040A337                 jz      short loc_40A319
.text:0040A339                 call    sub_40A660
.text:0040A339 ; ---------------------------------------------------------------------------
.text:0040A33E                 align 10h
.text:0040A340                 sub     esp, 1Ch
.text:0040A343                 mov     [esp+18h], esi
.text:0040A347                 mov     esi, [esp+20h]
.text:0040A34B                 mov     [esp+14h], ebx
.text:0040A34F                 mov     [esp], esi
.text:0040A352                 call    strlen
.text:0040A357                 lea     ebx, [eax+1]
.text:0040A35A                 mov     [esp], ebx
.text:0040A35D                 call    malloc
.text:0040A362                 test    eax, eax
.text:0040A364                 jz      short loc_40A382
.text:0040A366
.text:0040A366 loc_40A366:                             ; CODE XREF: .text:0040A384↓j
.text:0040A366                 mov     [esp+8], ebx
.text:0040A36A                 mov     [esp+4], esi
.text:0040A36E                 mov     [esp], eax
.text:0040A371                 call    memcpy
.text:0040A376                 mov     ebx, [esp+14h]
.text:0040A37A                 mov     esi, [esp+18h]
.text:0040A37E                 add     esp, 1Ch
.text:0040A381                 retn
.text:0040A382 ; ---------------------------------------------------------------------------
.text:0040A382
.text:0040A382 loc_40A382:                             ; CODE XREF: .text:0040A364↑j
.text:0040A382                 test    ebx, ebx
.text:0040A384                 jz      short loc_40A366
.text:0040A386                 call    sub_40A660
.text:0040A386 ; ---------------------------------------------------------------------------
.text:0040A38B                 align 10h
.text:0040A390
.text:0040A390 ; =============== S U B R O U T I N E =======================================
.text:0040A390
.text:0040A390
.text:0040A390 ; int __cdecl sub_40A390(void *, int, int)
.text:0040A390 sub_40A390      proc near               ; CODE XREF: sub_40A240↑j
.text:0040A390                                         ; .text:0040A26A↑p
.text:0040A390
.text:0040A390 Block           = dword ptr -1Ch
.text:0040A390 Size            = dword ptr -18h
.text:0040A390 var_C           = dword ptr -0Ch
.text:0040A390 var_8           = dword ptr -8
.text:0040A390 var_4           = dword ptr -4
.text:0040A390 arg_0           = dword ptr  4
.text:0040A390 arg_4           = dword ptr  8
.text:0040A390 arg_8           = dword ptr  0Ch
.text:0040A390
.text:0040A390                 sub     esp, 1Ch
.text:0040A393                 mov     [esp+1Ch+var_8], esi
.text:0040A397                 mov     esi, [esp+1Ch+arg_0]
.text:0040A39B                 mov     [esp+1Ch+var_4], edi
.text:0040A39F                 mov     edi, [esp+1Ch+arg_4]
.text:0040A3A3                 test    esi, esi
.text:0040A3A5                 mov     [esp+1Ch+var_C], ebx
.text:0040A3A9                 mov     ecx, [edi]
.text:0040A3AB                 mov     ebx, [esp+1Ch+arg_8]
.text:0040A3AF                 jz      short loc_40A3F0
.text:0040A3B1                 xor     edx, edx
.text:0040A3B3                 mov     eax, 7FFFFFFFh
.text:0040A3B8                 div     ebx
.text:0040A3BA                 cmp     eax, ecx
.text:0040A3BC                 jb      short loc_40A3E9
.text:0040A3BE                 add     ecx, ecx
.text:0040A3C0
.text:0040A3C0 loc_40A3C0:                             ; CODE XREF: sub_40A390+62↓j
.text:0040A3C0                                         ; sub_40A390+71↓j ...
.text:0040A3C0                 mov     [edi], ecx
.text:0040A3C2                 imul    ebx, ecx
.text:0040A3C5                 mov     [esp+1Ch+Block], esi ; Block
.text:0040A3C8                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040A3CC                 call    realloc
.text:0040A3D1                 test    eax, eax
.text:0040A3D3                 jz      short loc_40A3E5
.text:0040A3D5
.text:0040A3D5 loc_40A3D5:                             ; CODE XREF: sub_40A390+57↓j
.text:0040A3D5                 mov     ebx, [esp+1Ch+var_C]
.text:0040A3D9                 mov     esi, [esp+1Ch+var_8]
.text:0040A3DD                 mov     edi, [esp+1Ch+var_4]
.text:0040A3E1                 add     esp, 1Ch
.text:0040A3E4                 retn
.text:0040A3E5 ; ---------------------------------------------------------------------------
.text:0040A3E5
.text:0040A3E5 loc_40A3E5:                             ; CODE XREF: sub_40A390+43↑j
.text:0040A3E5                 test    ebx, ebx
.text:0040A3E7                 jz      short loc_40A3D5
.text:0040A3E9
.text:0040A3E9 loc_40A3E9:                             ; CODE XREF: sub_40A390+2C↑j
.text:0040A3E9                 call    sub_40A660
.text:0040A3E9 ; ---------------------------------------------------------------------------
.text:0040A3EE                 align 10h
.text:0040A3F0
.text:0040A3F0 loc_40A3F0:                             ; CODE XREF: sub_40A390+1F↑j
.text:0040A3F0                 test    ecx, ecx
.text:0040A3F2                 jnz     short loc_40A3C0
.text:0040A3F4                 xor     edx, edx
.text:0040A3F6                 mov     eax, 40h ; '@'
.text:0040A3FB                 div     ebx
.text:0040A3FD                 test    eax, eax
.text:0040A3FF                 mov     ecx, eax
.text:0040A401                 jnz     short loc_40A3C0
.text:0040A403                 mov     ecx, 1
.text:0040A408                 jmp     short loc_40A3C0
.text:0040A408 sub_40A390      endp
.text:0040A408
.text:0040A408 ; ---------------------------------------------------------------------------
.text:0040A40A                 align 10h
.text:0040A410
.text:0040A410 ; =============== S U B R O U T I N E =======================================
.text:0040A410
.text:0040A410
.text:0040A410 sub_40A410      proc near               ; CODE XREF: sub_403F30+266↑p
.text:0040A410
.text:0040A410 var_1C          = dword ptr -1Ch
.text:0040A410 var_18          = dword ptr -18h
.text:0040A410 var_14          = dword ptr -14h
.text:0040A410 var_10          = dword ptr -10h
.text:0040A410 arg_0           = dword ptr  4
.text:0040A410 arg_4           = dword ptr  8
.text:0040A410 arg_8           = dword ptr  0Ch
.text:0040A410
.text:0040A410                 push    edi
.text:0040A411                 push    esi
.text:0040A412                 push    ebx
.text:0040A413                 sub     esp, 10h
.text:0040A416                 mov     edx, [esp+1Ch+arg_8]
.text:0040A41A                 mov     ebx, [esp+1Ch+arg_0]
.text:0040A41E                 mov     esi, [esp+1Ch+arg_4]
.text:0040A422                 lea     edi, [edx+15h]
.text:0040A425                 mov     byte ptr [edx+15h], 0
.text:0040A429                 lea     esi, [esi+0]
.text:0040A430
.text:0040A430 loc_40A430:                             ; CODE XREF: sub_40A410+63↓j
.text:0040A430                 mov     [esp+1Ch+var_1C], ebx
.text:0040A433                 dec     edi
.text:0040A434                 mov     [esp+1Ch+var_18], esi
.text:0040A438                 mov     [esp+1Ch+var_14], 0Ah
.text:0040A440                 mov     [esp+1Ch+var_10], 0
.text:0040A448                 call    sub_414E40
.text:0040A44D                 add     al, 30h ; '0'
.text:0040A44F                 mov     [edi], al
.text:0040A451                 mov     [esp+1Ch+var_1C], ebx
.text:0040A454                 mov     [esp+1Ch+var_18], esi
.text:0040A458                 mov     [esp+1Ch+var_14], 0Ah
.text:0040A460                 mov     [esp+1Ch+var_10], 0
.text:0040A468                 call    sub_414FC0
.text:0040A46D                 mov     ebx, eax
.text:0040A46F                 mov     esi, edx
.text:0040A471                 or      edx, ebx
.text:0040A473                 jnz     short loc_40A430
.text:0040A475                 add     esp, 10h
.text:0040A478                 mov     eax, edi
.text:0040A47A                 pop     ebx
.text:0040A47B                 pop     esi
.text:0040A47C                 pop     edi
.text:0040A47D                 retn
.text:0040A47D sub_40A410      endp
.text:0040A47D
.text:0040A47D ; ---------------------------------------------------------------------------
.text:0040A47E                 align 10h
.text:0040A480 aStringComparis db 'string comparison failed',0
.text:0040A480                                         ; DATA XREF: sub_40A510:loc_40A570↓o
.text:0040A499                 align 10h
.text:0040A4A0 aSetLcAllCToWor db 'Set LC_ALL=',27h,'C',27h,' to work around the problem.',0
.text:0040A4A0                                         ; DATA XREF: sub_40A510+81↓o
.text:0040A4CB                 align 20h
.text:0040A4E0 aTheStringsComp db 'The strings compared were %s and %s.',0
.text:0040A4E0                                         ; DATA XREF: sub_40A510+E8↓o
.text:0040A505                 align 10h
.text:0040A510
.text:0040A510 ; =============== S U B R O U T I N E =======================================
.text:0040A510
.text:0040A510
.text:0040A510 ; int __cdecl sub_40A510(char *, int, char *, char)
.text:0040A510 sub_40A510      proc near               ; CODE XREF: sub_403F30+4BD↑p
.text:0040A510                                         ; sub_403F30+63C↑p ...
.text:0040A510
.text:0040A510 Str             = dword ptr -2Ch
.text:0040A510 ErrorMessage    = dword ptr -28h
.text:0040A510 var_24          = dword ptr -24h
.text:0040A510 var_20          = byte ptr -20h
.text:0040A510 var_1C          = dword ptr -1Ch
.text:0040A510 var_10          = dword ptr -10h
.text:0040A510 var_C           = dword ptr -0Ch
.text:0040A510 var_8           = dword ptr -8
.text:0040A510 var_4           = dword ptr -4
.text:0040A510 arg_0           = dword ptr  4
.text:0040A510 arg_4           = dword ptr  8
.text:0040A510 arg_8           = dword ptr  0Ch
.text:0040A510 arg_C           = byte ptr  10h
.text:0040A510
.text:0040A510                 sub     esp, 2Ch
.text:0040A513                 mov     edx, [esp+2Ch+arg_4]
.text:0040A517                 mov     [esp+2Ch+var_C], esi
.text:0040A51B                 mov     esi, dword ptr [esp+2Ch+arg_C]
.text:0040A51F                 mov     [esp+2Ch+var_4], ebp
.text:0040A523                 mov     ebp, [esp+2Ch+arg_8]
.text:0040A527                 mov     [esp+2Ch+ErrorMessage], edx ; int
.text:0040A52B                 mov     edx, [esp+2Ch+arg_0]
.text:0040A52F                 mov     [esp+2Ch+var_10], ebx
.text:0040A533                 mov     [esp+2Ch+var_8], edi
.text:0040A537                 mov     [esp+2Ch+Str], edx ; Str
.text:0040A53A                 mov     dword ptr [esp+2Ch+var_20], esi ; char
.text:0040A53E                 mov     [esp+2Ch+var_24], ebp ; int
.text:0040A542                 call    sub_40CA10
.text:0040A547                 mov     edi, eax
.text:0040A549                 call    _errno
.text:0040A54E                 mov     ebx, [eax]
.text:0040A550                 test    ebx, ebx
.text:0040A552                 jnz     short loc_40A570
.text:0040A554
.text:0040A554 loc_40A554:                             ; CODE XREF: sub_40A510+119↓j
.text:0040A554                 mov     eax, edi
.text:0040A556                 mov     ebx, [esp+2Ch+var_10]
.text:0040A55A                 mov     esi, [esp+2Ch+var_C]
.text:0040A55E                 mov     edi, [esp+2Ch+var_8]
.text:0040A562                 mov     ebp, [esp+2Ch+var_4]
.text:0040A566                 add     esp, 2Ch
.text:0040A569                 retn
.text:0040A569 ; ---------------------------------------------------------------------------
.text:0040A56A                 align 10h
.text:0040A570
.text:0040A570 loc_40A570:                             ; CODE XREF: sub_40A510+42↑j
.text:0040A570                 mov     [esp+2Ch+Str], offset aStringComparis ; "string comparison failed"
.text:0040A577                 call    ds:libintl_gettext
.text:0040A57D                 mov     [esp+2Ch+ErrorMessage], ebx ; ErrorMessage
.text:0040A581                 mov     [esp+2Ch+Str], 0 ; Code
.text:0040A588                 mov     [esp+2Ch+var_24], eax ; char *
.text:0040A58C                 call    sub_40CB60
.text:0040A591                 mov     [esp+2Ch+Str], offset aSetLcAllCToWor ; "Set LC_ALL='C' to work around the probl"...
.text:0040A598                 call    ds:libintl_gettext
.text:0040A59E                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040A5A6                 mov     [esp+2Ch+Str], 0 ; Code
.text:0040A5AD                 mov     [esp+2Ch+var_24], eax ; char *
.text:0040A5B1                 call    sub_40CB60
.text:0040A5B6                 mov     dword ptr [esp+2Ch+var_20], esi ; int
.text:0040A5BA                 mov     [esp+2Ch+var_24], ebp ; char *
.text:0040A5BE                 mov     [esp+2Ch+ErrorMessage], 5 ; int
.text:0040A5C6                 mov     [esp+2Ch+Str], 1 ; int
.text:0040A5CD                 call    sub_40C510
.text:0040A5D2                 mov     [esp+2Ch+ErrorMessage], 5 ; int
.text:0040A5DA                 mov     edx, [esp+2Ch+arg_4]
.text:0040A5DE                 mov     ebx, eax
.text:0040A5E0                 mov     [esp+2Ch+Str], 0 ; int
.text:0040A5E7                 mov     esi, [esp+2Ch+arg_0]
.text:0040A5EB                 mov     dword ptr [esp+2Ch+var_20], edx ; int
.text:0040A5EF                 mov     [esp+2Ch+var_24], esi ; char *
.text:0040A5F3                 call    sub_40C510
.text:0040A5F8                 mov     [esp+2Ch+Str], offset aTheStringsComp ; "The strings compared were %s and %s."
.text:0040A5FF                 mov     ebp, eax
.text:0040A601                 call    ds:libintl_gettext
.text:0040A607                 mov     [esp+2Ch+var_1C], ebx
.text:0040A60B                 mov     ecx, Code
.text:0040A611                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:0040A615                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040A61D                 mov     [esp+2Ch+var_24], eax ; char *
.text:0040A621                 mov     [esp+2Ch+Str], ecx ; Code
.text:0040A624                 call    sub_40CB60
.text:0040A629                 jmp     loc_40A554
.text:0040A629 sub_40A510      endp
.text:0040A629
.text:0040A629 ; ---------------------------------------------------------------------------
.text:0040A62E                 align 20h
.text:0040A640 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_40A660+3↓o
.text:0040A651 ; const char aS[]
.text:0040A651 aS              db '%s',0               ; DATA XREF: sub_40A660+10↓o
.text:0040A654                 align 10h
.text:0040A660
.text:0040A660 ; =============== S U B R O U T I N E =======================================
.text:0040A660
.text:0040A660 ; Attributes: noreturn
.text:0040A660
.text:0040A660 sub_40A660      proc near               ; CODE XREF: sub_403F30:loc_4045D7↑p
.text:0040A660                                         ; sub_4049B0:loc_405920↑p ...
.text:0040A660
.text:0040A660 Code            = dword ptr -1Ch
.text:0040A660 ErrorMessage    = dword ptr -18h
.text:0040A660 var_14          = dword ptr -14h
.text:0040A660 var_10          = byte ptr -10h
.text:0040A660
.text:0040A660                 sub     esp, 1Ch
.text:0040A663                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040A66A                 call    ds:libintl_gettext
.text:0040A670                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:0040A678                 mov     edx, Code
.text:0040A67E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040A686                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040A68A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040A68D                 call    sub_40CB60
.text:0040A692                 call    abort
.text:0040A692 sub_40A660      endp
.text:0040A692
.text:0040A692 ; ---------------------------------------------------------------------------
.text:0040A697                 align 10h
.text:0040A6A0
.text:0040A6A0 loc_40A6A0:                             ; DATA XREF: sub_40A6D0+59↓o
.text:0040A6A0                                         ; sub_40A7D0+59↓o
.text:0040A6A0                 imul    esp, [ebp+72h], 6Eh ; 'n'
.text:0040A6A4                 db      65h
.text:0040A6A4                 insb
.text:0040A6A6                 xor     esi, [edx]
.text:0040A6A8                 db      2Eh, 64h
.text:0040A6A8                 insb
.text:0040A6AB                 insb
.text:0040A6AC
.text:0040A6AC loc_40A6AC:                             ; DATA XREF: sub_40A6D0+6C↓o
.text:0040A6AC                                         ; sub_40A7D0+6C↓o
.text:0040A6AC                 add     [edi+6Ch], al
.text:0040A6AF                 outsd
.text:0040A6B0                 bound   esp, [ecx+6Ch]
.text:0040A6B3                 dec     ebp
.text:0040A6B4                 db      65h
.text:0040A6B4                 insd
.text:0040A6B6                 outsd
.text:0040A6B7                 jb      short near ptr loc_40A730+2
.text:0040A6B9                 push    ebx
.text:0040A6BA                 jz      short near ptr loc_40A71C+1
.text:0040A6BC                 jz      short near ptr loc_40A730+3
.text:0040A6BE                 jnb     short near ptr loc_40A702+3
.text:0040A6C0                 js      short $+2
.text:0040A6C2
.text:0040A6C2 loc_40A6C2:                             ; CODE XREF: .text:0040A6C0↑j
.text:0040A6C2                 mov     esi, esi
.text:0040A6C2 ; ---------------------------------------------------------------------------
.text:0040A6C4 flt_40A6C4      dd 1.8446744e19         ; DATA XREF: sub_40A6D0:loc_40A790↓r
.text:0040A6C8                 align 10h
.text:0040A6D0
.text:0040A6D0 ; =============== S U B R O U T I N E =======================================
.text:0040A6D0
.text:0040A6D0
.text:0040A6D0 sub_40A6D0      proc near               ; CODE XREF: sub_403CC0:loc_403E6B↑p
.text:0040A6D0                                         ; sub_405CD0+169↑p
.text:0040A6D0
.text:0040A6D0 var_A8          = qword ptr -0A8h
.text:0040A6D0 var_A0          = dword ptr -0A0h
.text:0040A6D0 lpModuleName    = dword ptr -9Ch
.text:0040A6D0 lpProcName      = dword ptr -98h
.text:0040A6D0 var_84          = qword ptr -84h
.text:0040A6D0 Buffer          = _MEMORYSTATUS ptr -7Ch
.text:0040A6D0 var_58          = qword ptr -58h
.text:0040A6D0 var_4C          = dword ptr -4Ch
.text:0040A6D0 var_44          = dword ptr -44h
.text:0040A6D0 var_40          = dword ptr -40h
.text:0040A6D0
.text:0040A6D0                 sub     esp, 9Ch
.text:0040A6D6                 mov     [esp+9Ch+lpModuleName], 55h ; 'U'
.text:0040A6DD                 call    _sysconf
.text:0040A6E2                 push    eax
.text:0040A6E3                 fild    [esp+0A0h+var_A0]
.text:0040A6E6                 add     esp, 4
.text:0040A6E9                 mov     [esp+9Ch+lpModuleName], 1Eh
.text:0040A6F0                 fstp    [esp+9Ch+var_84]
.text:0040A6F4                 call    _sysconf
.text:0040A6F9                 push    eax
.text:0040A6FA                 fldz
.text:0040A6FC                 fild    [esp+0A0h+var_A0]
.text:0040A6FF                 add     esp, 4
.text:0040A702
.text:0040A702 loc_40A702:                             ; CODE XREF: .text:0040A6BE↑j
.text:0040A702                 fld     [esp+9Ch+var_84]
.text:0040A706                 fucom   st(2)
.text:0040A708                 fnstsw  ax
.text:0040A70A                 sahf
.text:0040A70B                 jb      loc_40A7C2
.text:0040A711                 fxch    st(1)
.text:0040A713                 fucom   st(2)
.text:0040A715                 fnstsw  ax
.text:0040A717                 fstp    st(2)
.text:0040A719                 sahf
.text:0040A71A                 jb      short loc_40A725
.text:0040A71C
.text:0040A71C loc_40A71C:                             ; CODE XREF: .text:0040A6BA↑j
.text:0040A71C                 fmulp   st(1), st
.text:0040A71E
.text:0040A71E loc_40A71E:                             ; CODE XREF: sub_40A6D0+B7↓j
.text:0040A71E                                         ; sub_40A6D0+CA↓j ...
.text:0040A71E                 add     esp, 9Ch
.text:0040A724                 retn
.text:0040A725 ; ---------------------------------------------------------------------------
.text:0040A725
.text:0040A725 loc_40A725:                             ; CODE XREF: sub_40A6D0+4A↑j
.text:0040A725                                         ; sub_40A6D0+F4↓j
.text:0040A725                 fstp    st
.text:0040A727                 fstp    st
.text:0040A729                 mov     [esp+9Ch+lpModuleName], offset loc_40A6A0 ; lpModuleName
.text:0040A730
.text:0040A730 loc_40A730:                             ; CODE XREF: .text:0040A6B7↑j
.text:0040A730                                         ; .text:0040A6BC↑j
.text:0040A730                 call    GetModuleHandleA
.text:0040A735                 sub     esp, 4
.text:0040A738                 test    eax, eax
.text:0040A73A                 jz      short loc_40A798
.text:0040A73C                 mov     [esp+9Ch+lpProcName], (offset loc_40A6AC+1) ; lpProcName
.text:0040A744                 mov     [esp+9Ch+lpModuleName], eax ; hModule
.text:0040A747                 call    GetProcAddress
.text:0040A74C                 sub     esp, 8
.text:0040A74F                 test    eax, eax
.text:0040A751                 jz      short loc_40A7A0
.text:0040A753                 mov     [esp+9Ch+var_4C], 40h ; '@'
.text:0040A75B                 lea     ecx, [esp+9Ch+var_4C]
.text:0040A75F                 mov     [esp+9Ch+lpModuleName], ecx
.text:0040A762                 call    eax
.text:0040A764                 sub     esp, 4
.text:0040A767                 test    eax, eax
.text:0040A769                 jz      short loc_40A798
.text:0040A76B                 mov     ecx, [esp+9Ch+var_40]
.text:0040A76F                 mov     edx, [esp+9Ch+var_44]
.text:0040A773                 push    ecx
.text:0040A774                 push    edx
.text:0040A775                 fild    [esp+0A4h+var_A8+4]
.text:0040A778                 add     esp, 8
.text:0040A77B                 test    ecx, ecx
.text:0040A77D                 js      short loc_40A790
.text:0040A77F
.text:0040A77F loc_40A77F:                             ; CODE XREF: sub_40A6D0+C6↓j
.text:0040A77F                 fstp    [esp+9Ch+var_58+4]
.text:0040A783                 fld     [esp+9Ch+var_58+4]
.text:0040A787                 jmp     short loc_40A71E
.text:0040A787 ; ---------------------------------------------------------------------------
.text:0040A789                 align 10h
.text:0040A790
.text:0040A790 loc_40A790:                             ; CODE XREF: sub_40A6D0+AD↑j
.text:0040A790                 fadd    ds:flt_40A6C4
.text:0040A796                 jmp     short loc_40A77F
.text:0040A798 ; ---------------------------------------------------------------------------
.text:0040A798
.text:0040A798 loc_40A798:                             ; CODE XREF: sub_40A6D0+6A↑j
.text:0040A798                                         ; sub_40A6D0+99↑j
.text:0040A798                 fldz
.text:0040A79A                 jmp     short loc_40A71E
.text:0040A79A ; ---------------------------------------------------------------------------
.text:0040A79C                 align 10h
.text:0040A7A0
.text:0040A7A0 loc_40A7A0:                             ; CODE XREF: sub_40A6D0+81↑j
.text:0040A7A0                 lea     edx, [esp+9Ch+Buffer]
.text:0040A7A4                 mov     [esp+9Ch+lpModuleName], edx ; lpBuffer
.text:0040A7A7                 call    GlobalMemoryStatus
.text:0040A7AC                 sub     esp, 4
.text:0040A7AF                 xor     eax, eax
.text:0040A7B1                 mov     ecx, [esp+9Ch+Buffer.dwTotalPhys]
.text:0040A7B5                 push    eax
.text:0040A7B6                 push    ecx
.text:0040A7B7                 fild    [esp+0A4h+var_A8+4]
.text:0040A7BA                 add     esp, 8
.text:0040A7BD                 jmp     loc_40A71E
.text:0040A7C2 ; ---------------------------------------------------------------------------
.text:0040A7C2
.text:0040A7C2 loc_40A7C2:                             ; CODE XREF: sub_40A6D0+3B↑j
.text:0040A7C2                 fstp    st
.text:0040A7C4                 jmp     loc_40A725
.text:0040A7C4 sub_40A6D0      endp
.text:0040A7C4
.text:0040A7C4 ; ---------------------------------------------------------------------------
.text:0040A7C9                 align 4
.text:0040A7CC flt_40A7CC      dd 1.8446744e19         ; DATA XREF: sub_40A7D0:loc_40A890↓r
.text:0040A7D0
.text:0040A7D0 ; =============== S U B R O U T I N E =======================================
.text:0040A7D0
.text:0040A7D0
.text:0040A7D0 sub_40A7D0      proc near               ; CODE XREF: sub_405CD0:loc_405E30↑p
.text:0040A7D0
.text:0040A7D0 var_A8          = qword ptr -0A8h
.text:0040A7D0 var_A0          = dword ptr -0A0h
.text:0040A7D0 lpModuleName    = dword ptr -9Ch
.text:0040A7D0 lpProcName      = dword ptr -98h
.text:0040A7D0 var_84          = qword ptr -84h
.text:0040A7D0 Buffer          = _MEMORYSTATUS ptr -7Ch
.text:0040A7D0 var_58          = qword ptr -58h
.text:0040A7D0 var_4C          = dword ptr -4Ch
.text:0040A7D0 var_3C          = dword ptr -3Ch
.text:0040A7D0 var_38          = dword ptr -38h
.text:0040A7D0
.text:0040A7D0                 sub     esp, 9Ch
.text:0040A7D6                 mov     [esp+9Ch+lpModuleName], 56h ; 'V'
.text:0040A7DD                 call    _sysconf
.text:0040A7E2                 push    eax
.text:0040A7E3                 fild    [esp+0A0h+var_A0]
.text:0040A7E6                 add     esp, 4
.text:0040A7E9                 mov     [esp+9Ch+lpModuleName], 1Eh
.text:0040A7F0                 fstp    [esp+9Ch+var_84]
.text:0040A7F4                 call    _sysconf
.text:0040A7F9                 push    eax
.text:0040A7FA                 fldz
.text:0040A7FC                 fild    [esp+0A0h+var_A0]
.text:0040A7FF                 add     esp, 4
.text:0040A802                 fld     [esp+9Ch+var_84]
.text:0040A806                 fucom   st(2)
.text:0040A808                 fnstsw  ax
.text:0040A80A                 sahf
.text:0040A80B                 jb      loc_40A8C2
.text:0040A811                 fxch    st(1)
.text:0040A813                 fucom   st(2)
.text:0040A815                 fnstsw  ax
.text:0040A817                 fstp    st(2)
.text:0040A819                 sahf
.text:0040A81A                 jb      short loc_40A825
.text:0040A81C                 fmulp   st(1), st
.text:0040A81E
.text:0040A81E loc_40A81E:                             ; CODE XREF: sub_40A7D0+B7↓j
.text:0040A81E                                         ; sub_40A7D0+CA↓j ...
.text:0040A81E                 add     esp, 9Ch
.text:0040A824                 retn
.text:0040A825 ; ---------------------------------------------------------------------------
.text:0040A825
.text:0040A825 loc_40A825:                             ; CODE XREF: sub_40A7D0+4A↑j
.text:0040A825                                         ; sub_40A7D0+F4↓j
.text:0040A825                 fstp    st
.text:0040A827                 fstp    st
.text:0040A829                 mov     [esp+9Ch+lpModuleName], offset loc_40A6A0 ; lpModuleName
.text:0040A830                 call    GetModuleHandleA
.text:0040A835                 sub     esp, 4
.text:0040A838                 test    eax, eax
.text:0040A83A                 jz      short loc_40A898
.text:0040A83C                 mov     [esp+9Ch+lpProcName], (offset loc_40A6AC+1) ; lpProcName
.text:0040A844                 mov     [esp+9Ch+lpModuleName], eax ; hModule
.text:0040A847                 call    GetProcAddress
.text:0040A84C                 sub     esp, 8
.text:0040A84F                 test    eax, eax
.text:0040A851                 jz      short loc_40A8A0
.text:0040A853                 mov     [esp+9Ch+var_4C], 40h ; '@'
.text:0040A85B                 lea     ecx, [esp+9Ch+var_4C]
.text:0040A85F                 mov     [esp+9Ch+lpModuleName], ecx
.text:0040A862                 call    eax
.text:0040A864                 sub     esp, 4
.text:0040A867                 test    eax, eax
.text:0040A869                 jz      short loc_40A898
.text:0040A86B                 mov     ecx, [esp+9Ch+var_38]
.text:0040A86F                 mov     edx, [esp+9Ch+var_3C]
.text:0040A873                 push    ecx
.text:0040A874                 push    edx
.text:0040A875                 fild    [esp+0A4h+var_A8+4]
.text:0040A878                 add     esp, 8
.text:0040A87B                 test    ecx, ecx
.text:0040A87D                 js      short loc_40A890
.text:0040A87F
.text:0040A87F loc_40A87F:                             ; CODE XREF: sub_40A7D0+C6↓j
.text:0040A87F                 fstp    [esp+9Ch+var_58+4]
.text:0040A883                 fld     [esp+9Ch+var_58+4]
.text:0040A887                 jmp     short loc_40A81E
.text:0040A887 ; ---------------------------------------------------------------------------
.text:0040A889                 align 10h
.text:0040A890
.text:0040A890 loc_40A890:                             ; CODE XREF: sub_40A7D0+AD↑j
.text:0040A890                 fadd    ds:flt_40A7CC
.text:0040A896                 jmp     short loc_40A87F
.text:0040A898 ; ---------------------------------------------------------------------------
.text:0040A898
.text:0040A898 loc_40A898:                             ; CODE XREF: sub_40A7D0+6A↑j
.text:0040A898                                         ; sub_40A7D0+99↑j
.text:0040A898                 fldz
.text:0040A89A                 jmp     short loc_40A81E
.text:0040A89A ; ---------------------------------------------------------------------------
.text:0040A89C                 align 10h
.text:0040A8A0
.text:0040A8A0 loc_40A8A0:                             ; CODE XREF: sub_40A7D0+81↑j
.text:0040A8A0                 lea     edx, [esp+9Ch+Buffer]
.text:0040A8A4                 mov     [esp+9Ch+lpModuleName], edx ; lpBuffer
.text:0040A8A7                 call    GlobalMemoryStatus
.text:0040A8AC                 sub     esp, 4
.text:0040A8AF                 xor     eax, eax
.text:0040A8B1                 mov     ecx, [esp+9Ch+Buffer.dwAvailPhys]
.text:0040A8B5                 push    eax
.text:0040A8B6                 push    ecx
.text:0040A8B7                 fild    [esp+0A4h+var_A8+4]
.text:0040A8BA                 add     esp, 8
.text:0040A8BD                 jmp     loc_40A81E
.text:0040A8C2 ; ---------------------------------------------------------------------------
.text:0040A8C2
.text:0040A8C2 loc_40A8C2:                             ; CODE XREF: sub_40A7D0+3B↑j
.text:0040A8C2                 fstp    st
.text:0040A8C4                 jmp     loc_40A825
.text:0040A8C4 sub_40A7D0      endp
.text:0040A8C4
.text:0040A8C4 ; ---------------------------------------------------------------------------
.text:0040A8C9                 align 10h
.text:0040A8D0 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:0040A8D0                                         ; DATA XREF: sub_40A940+C79↓o
.text:0040A8F8                 db 18h dup(90h)
.text:0040A910 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:0040A910                                         ; DATA XREF: sub_40A940+C81↓o
.text:0040A936                 align 10h
.text:0040A940
.text:0040A940 ; =============== S U B R O U T I N E =======================================
.text:0040A940
.text:0040A940
.text:0040A940 ; int __cdecl sub_40A940(int, int, int, int, char *Str)
.text:0040A940 sub_40A940      proc near               ; CODE XREF: sub_4021E0+80F↑p
.text:0040A940                                         ; sub_4021E0+952↑p ...
.text:0040A940
.text:0040A940 C               = dword ptr -13Ch
.text:0040A940 Type            = dword ptr -138h
.text:0040A940 Radix           = dword ptr -134h
.text:0040A940 var_130         = dword ptr -130h
.text:0040A940 var_124         = dword ptr -124h
.text:0040A940 var_120         = dword ptr -120h
.text:0040A940 var_11C         = dword ptr -11Ch
.text:0040A940 var_118         = dword ptr -118h
.text:0040A940 var_114         = dword ptr -114h
.text:0040A940 var_110         = dword ptr -110h
.text:0040A940 var_10C         = dword ptr -10Ch
.text:0040A940 var_108         = dword ptr -108h
.text:0040A940 var_104         = dword ptr -104h
.text:0040A940 var_100         = dword ptr -100h
.text:0040A940 var_F8          = dword ptr -0F8h
.text:0040A940 var_F4          = dword ptr -0F4h
.text:0040A940 var_F0          = dword ptr -0F0h
.text:0040A940 var_EC          = dword ptr -0ECh
.text:0040A940 var_E8          = dword ptr -0E8h
.text:0040A940 var_E4          = dword ptr -0E4h
.text:0040A940 var_E0          = dword ptr -0E0h
.text:0040A940 var_D8          = dword ptr -0D8h
.text:0040A940 var_D4          = dword ptr -0D4h
.text:0040A940 var_D0          = dword ptr -0D0h
.text:0040A940 var_CC          = dword ptr -0CCh
.text:0040A940 var_C8          = dword ptr -0C8h
.text:0040A940 var_C4          = dword ptr -0C4h
.text:0040A940 var_C0          = dword ptr -0C0h
.text:0040A940 var_B8          = dword ptr -0B8h
.text:0040A940 var_B4          = dword ptr -0B4h
.text:0040A940 var_B0          = dword ptr -0B0h
.text:0040A940 var_AC          = dword ptr -0ACh
.text:0040A940 var_A8          = dword ptr -0A8h
.text:0040A940 var_A4          = dword ptr -0A4h
.text:0040A940 var_A0          = dword ptr -0A0h
.text:0040A940 var_98          = dword ptr -98h
.text:0040A940 var_94          = dword ptr -94h
.text:0040A940 var_90          = dword ptr -90h
.text:0040A940 var_8C          = dword ptr -8Ch
.text:0040A940 var_88          = dword ptr -88h
.text:0040A940 var_84          = dword ptr -84h
.text:0040A940 var_80          = dword ptr -80h
.text:0040A940 var_78          = dword ptr -78h
.text:0040A940 var_74          = dword ptr -74h
.text:0040A940 var_70          = dword ptr -70h
.text:0040A940 var_6C          = dword ptr -6Ch
.text:0040A940 var_68          = dword ptr -68h
.text:0040A940 var_64          = dword ptr -64h
.text:0040A940 var_60          = dword ptr -60h
.text:0040A940 var_5C          = dword ptr -5Ch
.text:0040A940 var_58          = dword ptr -58h
.text:0040A940 var_50          = dword ptr -50h
.text:0040A940 var_4C          = dword ptr -4Ch
.text:0040A940 var_48          = dword ptr -48h
.text:0040A940 var_44          = dword ptr -44h
.text:0040A940 var_40          = dword ptr -40h
.text:0040A940 var_3C          = dword ptr -3Ch
.text:0040A940 var_38          = dword ptr -38h
.text:0040A940 var_34          = dword ptr -34h
.text:0040A940 var_30          = dword ptr -30h
.text:0040A940 var_29          = byte ptr -29h
.text:0040A940 var_28          = dword ptr -28h
.text:0040A940 var_24          = dword ptr -24h
.text:0040A940 var_20          = dword ptr -20h
.text:0040A940 var_18          = byte ptr -18h
.text:0040A940 arg_0           = dword ptr  4
.text:0040A940 arg_4           = dword ptr  8
.text:0040A940 arg_8           = dword ptr  0Ch
.text:0040A940 arg_C           = dword ptr  10h
.text:0040A940 Str             = dword ptr  14h
.text:0040A940
.text:0040A940                 push    ebp
.text:0040A941                 xor     eax, eax
.text:0040A943                 push    edi
.text:0040A944                 push    esi
.text:0040A945                 push    ebx
.text:0040A946                 sub     esp, 12Ch
.text:0040A94C                 mov     ebp, [esp+13Ch+arg_8]
.text:0040A953                 mov     [esp+13Ch+var_28], eax
.text:0040A95A                 mov     esi, [esp+13Ch+arg_0]
.text:0040A961                 cmp     ebp, 24h ; '$'
.text:0040A964                 ja      loc_40B5B1
.text:0040A96A                 mov     edi, [esp+13Ch+arg_4]
.text:0040A971                 test    edi, edi
.text:0040A973                 jz      loc_40B5A5
.text:0040A979
.text:0040A979 loc_40A979:                             ; CODE XREF: sub_40A940+C6C↓j
.text:0040A979                 movzx   edx, byte ptr [esi]
.text:0040A97C                 mov     ebx, esi
.text:0040A97E                 mov     [esp+13Ch+var_29], dl
.text:0040A985                 lea     esi, [esi+0]
.text:0040A989                 lea     edi, [edi+0]
.text:0040A990
.text:0040A990 loc_40A990:                             ; CODE XREF: sub_40A940+86↓j
.text:0040A990                 movzx   edx, [esp+13Ch+var_29]
.text:0040A998                 mov     ecx, ds:__mb_cur_max
.text:0040A99E                 cmp     dword ptr [ecx], 1
.text:0040A9A1                 jz      loc_40B592
.text:0040A9A7                 mov     [esp+13Ch+Type], 8 ; Type
.text:0040A9AF                 mov     [esp+13Ch+C], edx ; C
.text:0040A9B2                 call    _isctype
.text:0040A9B7
.text:0040A9B7 loc_40A9B7:                             ; CODE XREF: sub_40A940+C60↓j
.text:0040A9B7                 test    eax, eax
.text:0040A9B9                 jz      short loc_40A9C8
.text:0040A9BB                 inc     ebx
.text:0040A9BC                 movzx   eax, byte ptr [ebx]
.text:0040A9BF                 mov     [esp+13Ch+var_29], al
.text:0040A9C6                 jmp     short loc_40A990
.text:0040A9C8 ; ---------------------------------------------------------------------------
.text:0040A9C8
.text:0040A9C8 loc_40A9C8:                             ; CODE XREF: sub_40A940+79↑j
.text:0040A9C8                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:0040A9D0                 mov     eax, 4
.text:0040A9D5                 jz      short loc_40AA52
.text:0040A9D7                 call    _errno
.text:0040A9DC                 mov     dword ptr [eax], 0
.text:0040A9E2                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:0040A9E6                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:0040A9EA                 mov     [esp+13Ch+C], esi ; String
.text:0040A9ED                 call    _strtoull
.text:0040A9F2                 mov     [esp+13Ch+var_24], eax
.text:0040A9F9                 mov     eax, [edi]
.text:0040A9FB                 mov     [esp+13Ch+var_20], edx
.text:0040AA02                 cmp     eax, esi
.text:0040AA04                 jz      loc_40B54C
.text:0040AA0A                 call    _errno
.text:0040AA0F                 mov     ebx, [eax]
.text:0040AA11                 test    ebx, ebx
.text:0040AA13                 jnz     loc_40B527
.text:0040AA19
.text:0040AA19 loc_40AA19:                             ; CODE XREF: sub_40A940+BFD↓j
.text:0040AA19                                         ; sub_40A940+C4D↓j
.text:0040AA19                 mov     ebp, [esp+13Ch+Str]
.text:0040AA20                 test    ebp, ebp
.text:0040AA22                 jz      loc_40B508
.text:0040AA28                 mov     ebx, [edi]
.text:0040AA2A                 movzx   eax, byte ptr [ebx]
.text:0040AA2D                 test    al, al
.text:0040AA2F                 jnz     short loc_40AA5D
.text:0040AA31
.text:0040AA31 loc_40AA31:                             ; CODE XREF: sub_40A940+312↓j
.text:0040AA31                                         ; sub_40A940+320↓j
.text:0040AA31                 mov     edx, [esp+13Ch+var_24]
.text:0040AA38                 mov     edi, [esp+13Ch+var_20]
.text:0040AA3F                 mov     ebx, [esp+13Ch+arg_C]
.text:0040AA46                 mov     [ebx], edx
.text:0040AA48                 mov     [ebx+4], edi
.text:0040AA4B
.text:0040AA4B loc_40AA4B:                             ; CODE XREF: sub_40A940+BE2↓j
.text:0040AA4B                 mov     eax, [esp+13Ch+var_28]
.text:0040AA52
.text:0040AA52 loc_40AA52:                             ; CODE XREF: sub_40A940+95↑j
.text:0040AA52                                         ; sub_40A940+16C↓j ...
.text:0040AA52                 add     esp, 12Ch
.text:0040AA58                 pop     ebx
.text:0040AA59                 pop     esi
.text:0040AA5A                 pop     edi
.text:0040AA5B                 pop     ebp
.text:0040AA5C                 retn
.text:0040AA5D ; ---------------------------------------------------------------------------
.text:0040AA5D
.text:0040AA5D loc_40AA5D:                             ; CODE XREF: sub_40A940+EF↑j
.text:0040AA5D                 mov     esi, [esp+13Ch+Str]
.text:0040AA64                 mov     ecx, 1
.text:0040AA69                 movsx   ebp, al
.text:0040AA6C                 mov     [esp+13Ch+var_30], ecx
.text:0040AA73                 mov     ebx, 400h
.text:0040AA78                 mov     [esp+13Ch+Type], ebp ; Val
.text:0040AA7C                 mov     [esp+13Ch+C], esi ; Str
.text:0040AA7F                 call    strchr
.text:0040AA84                 test    eax, eax
.text:0040AA86                 jnz     short loc_40AAAE
.text:0040AA88
.text:0040AA88 def_40AAF9:                             ; CODE XREF: sub_40A940+1B7↓j
.text:0040AA88                                         ; sub_40A940+1B9↓j
.text:0040AA88                                         ; DATA XREF: ...
.text:0040AA88                 mov     eax, [esp+13Ch+var_28] ; jumptable 0040AAF9 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0040AA8F                 mov     esi, [esp+13Ch+var_24]
.text:0040AA96                 mov     ebp, [esp+13Ch+var_20]
.text:0040AA9D                 mov     edi, [esp+13Ch+arg_C]
.text:0040AAA4                 or      eax, 2
.text:0040AAA7                 mov     [edi], esi
.text:0040AAA9                 mov     [edi+4], ebp
.text:0040AAAC                 jmp     short loc_40AA52
.text:0040AAAE ; ---------------------------------------------------------------------------
.text:0040AAAE
.text:0040AAAE loc_40AAAE:                             ; CODE XREF: sub_40A940+146↑j
.text:0040AAAE                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:0040AAB6                 mov     edx, [esp+13Ch+Str]
.text:0040AABD                 mov     [esp+13Ch+C], edx ; Str
.text:0040AAC0                 call    strchr
.text:0040AAC5                 test    eax, eax
.text:0040AAC7                 jz      loc_40B501
.text:0040AACD                 mov     edx, [edi]
.text:0040AACF                 movsx   eax, byte ptr [edx+1]
.text:0040AAD3                 cmp     eax, 44h ; 'D'
.text:0040AAD6                 jz      loc_40B4C7
.text:0040AADC                 cmp     eax, 44h ; 'D'
.text:0040AADF                 jg      loc_40B4DD
.text:0040AAE5                 cmp     eax, 42h ; 'B'
.text:0040AAE8                 jz      loc_40B4C7
.text:0040AAEE
.text:0040AAEE loc_40AAEE:                             ; CODE XREF: sub_40A940+B98↓j
.text:0040AAEE                                         ; sub_40A940+BA0↓j ...
.text:0040AAEE                 movsx   eax, byte ptr [edx]
.text:0040AAF1                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:0040AAF4                 cmp     eax, 35h
.text:0040AAF7                 ja      short def_40AAF9 ; jumptable 0040AAF9 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0040AAF9                 jmp     ds:jpt_40AAF9[eax*4] ; switch jump
.text:0040AAF9 ; ---------------------------------------------------------------------------
.text:0040AB00 jpt_40AAF9      dd offset loc_40AC84, offset def_40AAF9, offset def_40AAF9
.text:0040AB00                                         ; DATA XREF: sub_40A940+1B9↑r
.text:0040AB00                 dd offset loc_40ACDE, offset def_40AAF9, offset loc_40B0A7 ; jump table for switch statement
.text:0040AB00                 dd offset def_40AAF9, offset def_40AAF9, offset def_40AAF9
.text:0040AB00                 dd offset loc_40B1B6, offset def_40AAF9, offset loc_40B27F
.text:0040AB00                 dd offset def_40AAF9, offset def_40AAF9, offset loc_40ADED
.text:0040AB00                 dd offset def_40AAF9, offset def_40AAF9, offset def_40AAF9
.text:0040AB00                 dd offset loc_40B38E, offset def_40AAF9, offset def_40AAF9
.text:0040AB00                 dd offset def_40AAF9, offset def_40AAF9, offset loc_40AEFC
.text:0040AB00                 dd offset loc_40AFCE, offset def_40AAF9, offset def_40AAF9
.text:0040AB00                 dd offset def_40AAF9, offset def_40AAF9, offset def_40AAF9
.text:0040AB00                 dd offset def_40AAF9, offset def_40AAF9, offset loc_40ABD8
.text:0040AB00                 dd offset loc_40B0A0, offset def_40AAF9, offset def_40AAF9
.text:0040AB00                 dd offset def_40AAF9, offset loc_40B0A7, offset def_40AAF9
.text:0040AB00                 dd offset def_40AAF9, offset def_40AAF9, offset loc_40B1B6
.text:0040AB00                 dd offset def_40AAF9, offset loc_40B27F, offset def_40AAF9
.text:0040AB00                 dd offset def_40AAF9, offset def_40AAF9, offset def_40AAF9
.text:0040AB00                 dd offset def_40AAF9, offset def_40AAF9, offset loc_40B38E
.text:0040AB00                 dd offset def_40AAF9, offset def_40AAF9, offset loc_40B467
.text:0040ABD8 ; ---------------------------------------------------------------------------
.text:0040ABD8
.text:0040ABD8 loc_40ABD8:                             ; CODE XREF: sub_40A940+1B9↑j
.text:0040ABD8                                         ; DATA XREF: sub_40A940:jpt_40AAF9↑o
.text:0040ABD8                 mov     [esp+13Ch+Radix], 200h ; jumptable 0040AAF9 case 98
.text:0040ABE0                 lea     ebp, [esp+13Ch+var_24]
.text:0040ABE7                 mov     [esp+13Ch+var_130], 0
.text:0040ABEF                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040ABF6                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040ABFE                 call    sub_414FC0
.text:0040AC03                 mov     esi, [esp+13Ch+var_20]
.text:0040AC0A                 mov     ecx, [esp+13Ch+var_24]
.text:0040AC11                 cmp     edx, esi
.text:0040AC13                 ja      short loc_40AC1B
.text:0040AC15                 jb      short loc_40AC65
.text:0040AC17                 cmp     eax, ecx
.text:0040AC19                 jb      short loc_40AC65
.text:0040AC1B
.text:0040AC1B loc_40AC1B:                             ; CODE XREF: sub_40A940+2D3↑j
.text:0040AC1B                 mov     esi, [ebp+0]
.text:0040AC1E                 mov     eax, 200h
.text:0040AC23                 mov     ebx, [ebp+4]
.text:0040AC26                 mul     esi
.text:0040AC28                 mov     ecx, ebx
.text:0040AC2A                 shl     ecx, 9
.text:0040AC2D
.text:0040AC2D loc_40AC2D:                             ; CODE XREF: sub_40A940+399↓j
.text:0040AC2D                 mov     esi, edx
.text:0040AC2F                 lea     edx, [ecx+esi]
.text:0040AC32
.text:0040AC32 loc_40AC32:                             ; CODE XREF: sub_40A940+B82↓j
.text:0040AC32                 mov     [ebp+0], eax
.text:0040AC35                 xor     eax, eax
.text:0040AC37                 mov     [ebp+4], edx
.text:0040AC3A
.text:0040AC3A loc_40AC3A:                             ; CODE XREF: sub_40A940+342↓j
.text:0040AC3A                                         ; sub_40A940+459↓j ...
.text:0040AC3A                 mov     edx, [edi]
.text:0040AC3C
.text:0040AC3C loc_40AC3C:                             ; CODE XREF: sub_40A940+762↓j
.text:0040AC3C                 or      [esp+13Ch+var_28], eax
.text:0040AC43                 mov     eax, [esp+13Ch+var_30]
.text:0040AC4A                 lea     ecx, [eax+edx]
.text:0040AC4D                 mov     [edi], ecx
.text:0040AC4F                 cmp     byte ptr [ecx], 0
.text:0040AC52                 jz      loc_40AA31
.text:0040AC58                 or      [esp+13Ch+var_28], 2
.text:0040AC60                 jmp     loc_40AA31
.text:0040AC65 ; ---------------------------------------------------------------------------
.text:0040AC65
.text:0040AC65 loc_40AC65:                             ; CODE XREF: sub_40A940+2D5↑j
.text:0040AC65                                         ; sub_40A940+2D9↑j ...
.text:0040AC65                 mov     edx, 0FFFFFFFFh
.text:0040AC6A                 mov     ebp, 0FFFFFFFFh
.text:0040AC6F                 mov     eax, 1
.text:0040AC74                 mov     [esp+13Ch+var_24], edx
.text:0040AC7B                 mov     [esp+13Ch+var_20], ebp
.text:0040AC82                 jmp     short loc_40AC3A
.text:0040AC84 ; ---------------------------------------------------------------------------
.text:0040AC84
.text:0040AC84 loc_40AC84:                             ; CODE XREF: sub_40A940+1B9↑j
.text:0040AC84                                         ; DATA XREF: sub_40A940:jpt_40AAF9↑o
.text:0040AC84                 mov     [esp+13Ch+Radix], 400h ; jumptable 0040AAF9 case 66
.text:0040AC8C                 lea     ebp, [esp+13Ch+var_24]
.text:0040AC93                 mov     [esp+13Ch+var_130], 0
.text:0040AC9B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040ACA2                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040ACAA                 call    sub_414FC0
.text:0040ACAF                 mov     esi, [esp+13Ch+var_20]
.text:0040ACB6                 mov     ecx, [esp+13Ch+var_24]
.text:0040ACBD                 cmp     edx, esi
.text:0040ACBF                 ja      short loc_40ACC7
.text:0040ACC1                 jb      short loc_40AC65
.text:0040ACC3                 cmp     eax, ecx
.text:0040ACC5                 jb      short loc_40AC65
.text:0040ACC7
.text:0040ACC7 loc_40ACC7:                             ; CODE XREF: sub_40A940+37F↑j
.text:0040ACC7                 mov     esi, [ebp+0]
.text:0040ACCA                 mov     eax, 400h
.text:0040ACCF                 mov     ebx, [ebp+4]
.text:0040ACD2                 mul     esi
.text:0040ACD4                 mov     ecx, ebx
.text:0040ACD6                 shl     ecx, 0Ah
.text:0040ACD9                 jmp     loc_40AC2D
.text:0040ACDE ; ---------------------------------------------------------------------------
.text:0040ACDE
.text:0040ACDE loc_40ACDE:                             ; CODE XREF: sub_40A940+1B9↑j
.text:0040ACDE                                         ; DATA XREF: sub_40A940:jpt_40AAF9↑o
.text:0040ACDE                 mov     [esp+13Ch+var_3C], ebx ; jumptable 0040AAF9 case 69
.text:0040ACE5                 mov     ecx, ebx
.text:0040ACE7                 xor     ebp, ebp
.text:0040ACE9                 mov     [esp+13Ch+var_34], ebp
.text:0040ACF0                 sar     ecx, 1Fh
.text:0040ACF3                 mov     ebx, [esp+13Ch+var_3C]
.text:0040ACFA                 mov     [esp+13Ch+var_38], ecx
.text:0040AD01                 lea     esi, [esp+13Ch+var_24]
.text:0040AD08                 mov     ebp, 5
.text:0040AD0D                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040AD14                 mov     edx, [esp+13Ch+var_38]
.text:0040AD1B                 mov     [esp+13Ch+Radix], ebx
.text:0040AD1F                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040AD27                 mov     [esp+13Ch+var_130], edx
.text:0040AD2B                 call    sub_414FC0
.text:0040AD30                 mov     [esp+13Ch+var_44], eax
.text:0040AD37                 mov     [esp+13Ch+var_40], edx
.text:0040AD3E
.text:0040AD3E loc_40AD3E:                             ; CODE XREF: sub_40A940+450↓j
.text:0040AD3E                 mov     ebx, [esi+4]
.text:0040AD41                 mov     eax, [esi]
.text:0040AD43                 cmp     [esp+13Ch+var_40], ebx
.text:0040AD4A                 mov     [esp+13Ch+var_48], ebx
.text:0040AD51                 mov     [esp+13Ch+var_4C], eax
.text:0040AD58                 ja      short loc_40AD9E
.text:0040AD5A                 mov     ecx, [esp+13Ch+var_48]
.text:0040AD61                 cmp     [esp+13Ch+var_40], ecx
.text:0040AD68                 jb      short loc_40AD73
.text:0040AD6A                 cmp     [esp+13Ch+var_44], eax
.text:0040AD71                 jnb     short loc_40AD9E
.text:0040AD73
.text:0040AD73 loc_40AD73:                             ; CODE XREF: sub_40A940+428↑j
.text:0040AD73                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040AD79                 mov     eax, 1
.text:0040AD7E                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040AD85
.text:0040AD85 loc_40AD85:                             ; CODE XREF: sub_40A940+4AB↓j
.text:0040AD85                 or      [esp+13Ch+var_34], eax
.text:0040AD8C                 dec     ebp
.text:0040AD8D                 cmp     ebp, 0FFFFFFFFh
.text:0040AD90                 jnz     short loc_40AD3E
.text:0040AD92                 mov     eax, [esp+13Ch+var_34]
.text:0040AD99                 jmp     loc_40AC3A
.text:0040AD9E ; ---------------------------------------------------------------------------
.text:0040AD9E
.text:0040AD9E loc_40AD9E:                             ; CODE XREF: sub_40A940+418↑j
.text:0040AD9E                                         ; sub_40A940+431↑j
.text:0040AD9E                 mov     ecx, [esp+13Ch+var_38]
.text:0040ADA5                 mov     eax, [esp+13Ch+var_4C]
.text:0040ADAC                 mov     ebx, [esp+13Ch+var_4C]
.text:0040ADB3                 mul     [esp+13Ch+var_3C]
.text:0040ADBA                 imul    ebx, ecx
.text:0040ADBD                 mov     ecx, edx
.text:0040ADBF                 mov     [esp+13Ch+var_124], eax
.text:0040ADC3                 add     ecx, ebx
.text:0040ADC5                 mov     edx, [esp+13Ch+var_3C]
.text:0040ADCC                 mov     ebx, [esp+13Ch+var_48]
.text:0040ADD3                 imul    edx, ebx
.text:0040ADD6                 mov     ebx, [esp+13Ch+var_124]
.text:0040ADDA                 mov     [esi], ebx
.text:0040ADDC                 add     ecx, edx
.text:0040ADDE                 mov     [esp+13Ch+var_120], ecx
.text:0040ADE2                 mov     eax, [esp+13Ch+var_120]
.text:0040ADE6                 mov     [esi+4], eax
.text:0040ADE9                 xor     eax, eax
.text:0040ADEB                 jmp     short loc_40AD85
.text:0040ADED ; ---------------------------------------------------------------------------
.text:0040ADED
.text:0040ADED loc_40ADED:                             ; CODE XREF: sub_40A940+1B9↑j
.text:0040ADED                                         ; DATA XREF: sub_40A940:jpt_40AAF9↑o
.text:0040ADED                 mov     [esp+13Ch+var_A4], ebx ; jumptable 0040AAF9 case 80
.text:0040ADF4                 mov     eax, ebx
.text:0040ADF6                 xor     ebp, ebp
.text:0040ADF8                 mov     [esp+13Ch+var_98], ebp
.text:0040ADFF                 sar     eax, 1Fh
.text:0040AE02                 mov     edx, [esp+13Ch+var_A4]
.text:0040AE09                 mov     [esp+13Ch+var_A0], eax
.text:0040AE10                 lea     esi, [esp+13Ch+var_24]
.text:0040AE17                 mov     ebp, 4
.text:0040AE1C                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040AE23                 mov     ebx, [esp+13Ch+var_A0]
.text:0040AE2A                 mov     [esp+13Ch+Radix], edx
.text:0040AE2E                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040AE36                 mov     [esp+13Ch+var_130], ebx
.text:0040AE3A                 call    sub_414FC0
.text:0040AE3F                 mov     [esp+13Ch+var_AC], eax
.text:0040AE46                 mov     [esp+13Ch+var_A8], edx
.text:0040AE4D
.text:0040AE4D loc_40AE4D:                             ; CODE XREF: sub_40A940+55F↓j
.text:0040AE4D                 mov     ebx, [esi+4]
.text:0040AE50                 mov     edx, [esi]
.text:0040AE52                 cmp     [esp+13Ch+var_A8], ebx
.text:0040AE59                 mov     [esp+13Ch+var_B0], ebx
.text:0040AE60                 mov     [esp+13Ch+var_B4], edx
.text:0040AE67                 ja      short loc_40AEAD
.text:0040AE69                 mov     eax, [esp+13Ch+var_B0]
.text:0040AE70                 cmp     [esp+13Ch+var_A8], eax
.text:0040AE77                 jb      short loc_40AE82
.text:0040AE79                 cmp     [esp+13Ch+var_AC], edx
.text:0040AE80                 jnb     short loc_40AEAD
.text:0040AE82
.text:0040AE82 loc_40AE82:                             ; CODE XREF: sub_40A940+537↑j
.text:0040AE82                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040AE88                 mov     eax, 1
.text:0040AE8D                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040AE94
.text:0040AE94 loc_40AE94:                             ; CODE XREF: sub_40A940+5BA↓j
.text:0040AE94                 or      [esp+13Ch+var_98], eax
.text:0040AE9B                 dec     ebp
.text:0040AE9C                 cmp     ebp, 0FFFFFFFFh
.text:0040AE9F                 jnz     short loc_40AE4D
.text:0040AEA1                 mov     eax, [esp+13Ch+var_98]
.text:0040AEA8                 jmp     loc_40AC3A
.text:0040AEAD ; ---------------------------------------------------------------------------
.text:0040AEAD
.text:0040AEAD loc_40AEAD:                             ; CODE XREF: sub_40A940+527↑j
.text:0040AEAD                                         ; sub_40A940+540↑j
.text:0040AEAD                 mov     ecx, [esp+13Ch+var_A0]
.text:0040AEB4                 mov     eax, [esp+13Ch+var_B4]
.text:0040AEBB                 mov     ebx, [esp+13Ch+var_B4]
.text:0040AEC2                 mul     [esp+13Ch+var_A4]
.text:0040AEC9                 imul    ebx, ecx
.text:0040AECC                 mov     ecx, edx
.text:0040AECE                 mov     [esp+13Ch+var_124], eax
.text:0040AED2                 add     ecx, ebx
.text:0040AED4                 mov     edx, [esp+13Ch+var_A4]
.text:0040AEDB                 mov     ebx, [esp+13Ch+var_B0]
.text:0040AEE2                 xor     eax, eax
.text:0040AEE4                 imul    edx, ebx
.text:0040AEE7                 add     ecx, edx
.text:0040AEE9                 mov     [esp+13Ch+var_120], ecx
.text:0040AEED                 mov     ebx, [esp+13Ch+var_120]
.text:0040AEF1                 mov     ecx, [esp+13Ch+var_124]
.text:0040AEF5                 mov     [esi+4], ebx
.text:0040AEF8                 mov     [esi], ecx
.text:0040AEFA                 jmp     short loc_40AE94
.text:0040AEFC ; ---------------------------------------------------------------------------
.text:0040AEFC
.text:0040AEFC loc_40AEFC:                             ; CODE XREF: sub_40A940+1B9↑j
.text:0040AEFC                                         ; DATA XREF: sub_40A940:jpt_40AAF9↑o
.text:0040AEFC                 mov     [esp+13Ch+var_E4], ebx ; jumptable 0040AAF9 case 89
.text:0040AF00                 mov     eax, ebx
.text:0040AF02                 lea     esi, [esp+13Ch+var_24]
.text:0040AF09                 mov     [esp+13Ch+var_D8], 0
.text:0040AF11                 sar     eax, 1Fh
.text:0040AF14                 mov     edx, [esp+13Ch+var_E4]
.text:0040AF18                 mov     [esp+13Ch+var_E0], eax
.text:0040AF1C                 mov     ebp, 7
.text:0040AF21                 mov     ebx, [esp+13Ch+var_E0]
.text:0040AF25                 mov     [esp+13Ch+Radix], edx
.text:0040AF29                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040AF30                 mov     [esp+13Ch+var_130], ebx
.text:0040AF34                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040AF3C                 call    sub_414FC0
.text:0040AF41                 mov     [esp+13Ch+var_EC], eax
.text:0040AF45                 mov     [esp+13Ch+var_E8], edx
.text:0040AF49
.text:0040AF49 loc_40AF49:                             ; CODE XREF: sub_40A940+646↓j
.text:0040AF49                 mov     ebx, [esi+4]
.text:0040AF4C                 mov     edx, [esi]
.text:0040AF4E                 cmp     [esp+13Ch+var_E8], ebx
.text:0040AF52                 mov     [esp+13Ch+var_F0], ebx
.text:0040AF56                 mov     [esp+13Ch+var_F4], edx
.text:0040AF5A                 ja      short loc_40AF91
.text:0040AF5C                 mov     eax, [esp+13Ch+var_F0]
.text:0040AF60                 cmp     [esp+13Ch+var_E8], eax
.text:0040AF64                 jb      short loc_40AF6C
.text:0040AF66                 cmp     [esp+13Ch+var_EC], edx
.text:0040AF6A                 jnb     short loc_40AF91
.text:0040AF6C
.text:0040AF6C loc_40AF6C:                             ; CODE XREF: sub_40A940+624↑j
.text:0040AF6C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040AF72                 mov     eax, 1
.text:0040AF77                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040AF7E
.text:0040AF7E loc_40AF7E:                             ; CODE XREF: sub_40A940+68C↓j
.text:0040AF7E                 or      [esp+13Ch+var_D8], eax
.text:0040AF82                 dec     ebp
.text:0040AF83                 cmp     ebp, 0FFFFFFFFh
.text:0040AF86                 jnz     short loc_40AF49
.text:0040AF88                 mov     eax, [esp+13Ch+var_D8]
.text:0040AF8C                 jmp     loc_40AC3A
.text:0040AF91 ; ---------------------------------------------------------------------------
.text:0040AF91
.text:0040AF91 loc_40AF91:                             ; CODE XREF: sub_40A940+61A↑j
.text:0040AF91                                         ; sub_40A940+62A↑j
.text:0040AF91                 mov     ecx, [esp+13Ch+var_E0]
.text:0040AF95                 mov     eax, [esp+13Ch+var_F4]
.text:0040AF99                 mov     ebx, [esp+13Ch+var_F4]
.text:0040AF9D                 mul     [esp+13Ch+var_E4]
.text:0040AFA1                 imul    ebx, ecx
.text:0040AFA4                 mov     ecx, edx
.text:0040AFA6                 mov     [esp+13Ch+var_124], eax
.text:0040AFAA                 add     ecx, ebx
.text:0040AFAC                 mov     edx, [esp+13Ch+var_E4]
.text:0040AFB0                 mov     ebx, [esp+13Ch+var_F0]
.text:0040AFB4                 xor     eax, eax
.text:0040AFB6                 imul    edx, ebx
.text:0040AFB9                 add     ecx, edx
.text:0040AFBB                 mov     [esp+13Ch+var_120], ecx
.text:0040AFBF                 mov     ebx, [esp+13Ch+var_120]
.text:0040AFC3                 mov     ecx, [esp+13Ch+var_124]
.text:0040AFC7                 mov     [esi+4], ebx
.text:0040AFCA                 mov     [esi], ecx
.text:0040AFCC                 jmp     short loc_40AF7E
.text:0040AFCE ; ---------------------------------------------------------------------------
.text:0040AFCE
.text:0040AFCE loc_40AFCE:                             ; CODE XREF: sub_40A940+1B9↑j
.text:0040AFCE                                         ; DATA XREF: sub_40A940:jpt_40AAF9↑o
.text:0040AFCE                 mov     [esp+13Ch+var_104], ebx ; jumptable 0040AAF9 case 90
.text:0040AFD2                 mov     eax, ebx
.text:0040AFD4                 lea     esi, [esp+13Ch+var_24]
.text:0040AFDB                 mov     [esp+13Ch+var_F8], 0
.text:0040AFE3                 sar     eax, 1Fh
.text:0040AFE6                 mov     edx, [esp+13Ch+var_104]
.text:0040AFEA                 mov     [esp+13Ch+var_100], eax
.text:0040AFEE                 mov     ebp, 6
.text:0040AFF3                 mov     ebx, [esp+13Ch+var_100]
.text:0040AFF7                 mov     [esp+13Ch+Radix], edx
.text:0040AFFB                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040B002                 mov     [esp+13Ch+var_130], ebx
.text:0040B006                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040B00E                 call    sub_414FC0
.text:0040B013                 mov     [esp+13Ch+var_10C], eax
.text:0040B017                 mov     [esp+13Ch+var_108], edx
.text:0040B01B
.text:0040B01B loc_40B01B:                             ; CODE XREF: sub_40A940+718↓j
.text:0040B01B                 mov     ebx, [esi+4]
.text:0040B01E                 mov     edx, [esi]
.text:0040B020                 cmp     [esp+13Ch+var_108], ebx
.text:0040B024                 mov     [esp+13Ch+var_110], ebx
.text:0040B028                 mov     [esp+13Ch+var_114], edx
.text:0040B02C                 ja      short loc_40B063
.text:0040B02E                 mov     eax, [esp+13Ch+var_110]
.text:0040B032                 cmp     [esp+13Ch+var_108], eax
.text:0040B036                 jb      short loc_40B03E
.text:0040B038                 cmp     [esp+13Ch+var_10C], edx
.text:0040B03C                 jnb     short loc_40B063
.text:0040B03E
.text:0040B03E loc_40B03E:                             ; CODE XREF: sub_40A940+6F6↑j
.text:0040B03E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040B044                 mov     eax, 1
.text:0040B049                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040B050
.text:0040B050 loc_40B050:                             ; CODE XREF: sub_40A940+75E↓j
.text:0040B050                 or      [esp+13Ch+var_F8], eax
.text:0040B054                 dec     ebp
.text:0040B055                 cmp     ebp, 0FFFFFFFFh
.text:0040B058                 jnz     short loc_40B01B
.text:0040B05A                 mov     eax, [esp+13Ch+var_F8]
.text:0040B05E                 jmp     loc_40AC3A
.text:0040B063 ; ---------------------------------------------------------------------------
.text:0040B063
.text:0040B063 loc_40B063:                             ; CODE XREF: sub_40A940+6EC↑j
.text:0040B063                                         ; sub_40A940+6FC↑j
.text:0040B063                 mov     eax, [esp+13Ch+var_114]
.text:0040B067                 mov     ebx, [esp+13Ch+var_100]
.text:0040B06B                 mul     [esp+13Ch+var_104]
.text:0040B06F                 mov     ecx, edx
.text:0040B071                 mov     edx, [esp+13Ch+var_104]
.text:0040B075                 mov     [esp+13Ch+var_124], eax
.text:0040B079                 mov     eax, [esp+13Ch+var_114]
.text:0040B07D                 imul    eax, ebx
.text:0040B080                 mov     ebx, [esp+13Ch+var_110]
.text:0040B084                 imul    edx, ebx
.text:0040B087                 add     ecx, eax
.text:0040B089                 xor     eax, eax
.text:0040B08B                 add     ecx, edx
.text:0040B08D                 mov     [esp+13Ch+var_120], ecx
.text:0040B091                 mov     ebx, [esp+13Ch+var_120]
.text:0040B095                 mov     ecx, [esp+13Ch+var_124]
.text:0040B099                 mov     [esi+4], ebx
.text:0040B09C                 mov     [esi], ecx
.text:0040B09E                 jmp     short loc_40B050
.text:0040B0A0 ; ---------------------------------------------------------------------------
.text:0040B0A0
.text:0040B0A0 loc_40B0A0:                             ; CODE XREF: sub_40A940+1B9↑j
.text:0040B0A0                                         ; DATA XREF: sub_40A940:jpt_40AAF9↑o
.text:0040B0A0                 xor     eax, eax        ; jumptable 0040AAF9 case 99
.text:0040B0A2                 jmp     loc_40AC3C
.text:0040B0A7 ; ---------------------------------------------------------------------------
.text:0040B0A7
.text:0040B0A7 loc_40B0A7:                             ; CODE XREF: sub_40A940+1B9↑j
.text:0040B0A7                                         ; DATA XREF: sub_40A940:jpt_40AAF9↑o
.text:0040B0A7                 mov     [esp+13Ch+var_5C], ebx ; jumptable 0040AAF9 cases 71,103
.text:0040B0AE                 mov     eax, ebx
.text:0040B0B0                 xor     ebp, ebp
.text:0040B0B2                 mov     [esp+13Ch+var_50], ebp
.text:0040B0B9                 sar     eax, 1Fh
.text:0040B0BC                 mov     edx, [esp+13Ch+var_5C]
.text:0040B0C3                 mov     [esp+13Ch+var_58], eax
.text:0040B0CA                 lea     esi, [esp+13Ch+var_24]
.text:0040B0D1                 mov     ebp, 2
.text:0040B0D6                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040B0DD                 mov     ebx, [esp+13Ch+var_58]
.text:0040B0E4                 mov     [esp+13Ch+Radix], edx
.text:0040B0E8                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040B0F0                 mov     [esp+13Ch+var_130], ebx
.text:0040B0F4                 call    sub_414FC0
.text:0040B0F9                 mov     [esp+13Ch+var_64], eax
.text:0040B100                 mov     [esp+13Ch+var_60], edx
.text:0040B107
.text:0040B107 loc_40B107:                             ; CODE XREF: sub_40A940+819↓j
.text:0040B107                 mov     ebx, [esi+4]
.text:0040B10A                 mov     edx, [esi]
.text:0040B10C                 cmp     [esp+13Ch+var_60], ebx
.text:0040B113                 mov     [esp+13Ch+var_68], ebx
.text:0040B11A                 mov     [esp+13Ch+var_6C], edx
.text:0040B121                 ja      short loc_40B167
.text:0040B123                 mov     eax, [esp+13Ch+var_68]
.text:0040B12A                 cmp     [esp+13Ch+var_60], eax
.text:0040B131                 jb      short loc_40B13C
.text:0040B133                 cmp     [esp+13Ch+var_64], edx
.text:0040B13A                 jnb     short loc_40B167
.text:0040B13C
.text:0040B13C loc_40B13C:                             ; CODE XREF: sub_40A940+7F1↑j
.text:0040B13C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040B142                 mov     eax, 1
.text:0040B147                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040B14E
.text:0040B14E loc_40B14E:                             ; CODE XREF: sub_40A940+874↓j
.text:0040B14E                 or      [esp+13Ch+var_50], eax
.text:0040B155                 dec     ebp
.text:0040B156                 cmp     ebp, 0FFFFFFFFh
.text:0040B159                 jnz     short loc_40B107
.text:0040B15B                 mov     eax, [esp+13Ch+var_50]
.text:0040B162                 jmp     loc_40AC3A
.text:0040B167 ; ---------------------------------------------------------------------------
.text:0040B167
.text:0040B167 loc_40B167:                             ; CODE XREF: sub_40A940+7E1↑j
.text:0040B167                                         ; sub_40A940+7FA↑j
.text:0040B167                 mov     ecx, [esp+13Ch+var_58]
.text:0040B16E                 mov     eax, [esp+13Ch+var_6C]
.text:0040B175                 mov     ebx, [esp+13Ch+var_6C]
.text:0040B17C                 mul     [esp+13Ch+var_5C]
.text:0040B183                 imul    ebx, ecx
.text:0040B186                 mov     ecx, edx
.text:0040B188                 mov     [esp+13Ch+var_124], eax
.text:0040B18C                 add     ecx, ebx
.text:0040B18E                 mov     edx, [esp+13Ch+var_5C]
.text:0040B195                 mov     ebx, [esp+13Ch+var_68]
.text:0040B19C                 xor     eax, eax
.text:0040B19E                 imul    edx, ebx
.text:0040B1A1                 add     ecx, edx
.text:0040B1A3                 mov     [esp+13Ch+var_120], ecx
.text:0040B1A7                 mov     ebx, [esp+13Ch+var_120]
.text:0040B1AB                 mov     ecx, [esp+13Ch+var_124]
.text:0040B1AF                 mov     [esi+4], ebx
.text:0040B1B2                 mov     [esi], ecx
.text:0040B1B4                 jmp     short loc_40B14E
.text:0040B1B6 ; ---------------------------------------------------------------------------
.text:0040B1B6
.text:0040B1B6 loc_40B1B6:                             ; CODE XREF: sub_40A940+1B9↑j
.text:0040B1B6                                         ; DATA XREF: sub_40A940:jpt_40AAF9↑o
.text:0040B1B6                 mov     [esp+13Ch+var_74], ebx ; jumptable 0040AAF9 cases 75,107
.text:0040B1BD                 mov     eax, ebx
.text:0040B1BF                 lea     esi, [esp+13Ch+var_24]
.text:0040B1C6                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040B1CD                 sar     eax, 1Fh
.text:0040B1D0                 mov     edx, [esp+13Ch+var_74]
.text:0040B1D7                 mov     [esp+13Ch+var_70], eax
.text:0040B1DE                 mov     ebx, [esp+13Ch+var_70]
.text:0040B1E5                 mov     [esp+13Ch+Radix], edx
.text:0040B1E9                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040B1F1                 mov     [esp+13Ch+var_130], ebx
.text:0040B1F5                 call    sub_414FC0
.text:0040B1FA                 mov     ebp, [esp+13Ch+var_20]
.text:0040B201                 mov     ecx, [esp+13Ch+var_24]
.text:0040B208                 cmp     edx, ebp
.text:0040B20A                 mov     [esp+13Ch+var_11C], ecx
.text:0040B20E                 mov     [esp+13Ch+var_118], ebp
.text:0040B212                 ja      short loc_40B239
.text:0040B214                 cmp     edx, [esp+13Ch+var_118]
.text:0040B218                 jb      short loc_40B21E
.text:0040B21A                 cmp     eax, ecx
.text:0040B21C                 jnb     short loc_40B239
.text:0040B21E
.text:0040B21E loc_40B21E:                             ; CODE XREF: sub_40A940+8D8↑j
.text:0040B21E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040B224                 mov     edx, 1
.text:0040B229                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040B230
.text:0040B230 loc_40B230:                             ; CODE XREF: sub_40A940+93D↓j
.text:0040B230                 xor     eax, eax
.text:0040B232                 or      eax, edx
.text:0040B234                 jmp     loc_40AC3A
.text:0040B239 ; ---------------------------------------------------------------------------
.text:0040B239
.text:0040B239 loc_40B239:                             ; CODE XREF: sub_40A940+8D2↑j
.text:0040B239                                         ; sub_40A940+8DC↑j
.text:0040B239                 mov     eax, [esp+13Ch+var_11C]
.text:0040B23D                 mov     ebp, [esp+13Ch+var_11C]
.text:0040B241                 mov     ebx, [esp+13Ch+var_118]
.text:0040B245                 mul     [esp+13Ch+var_74]
.text:0040B24C                 mov     [esp+13Ch+var_124], eax
.text:0040B250                 mov     eax, [esp+13Ch+var_70]
.text:0040B257                 mov     ecx, [esp+13Ch+var_124]
.text:0040B25B                 imul    ebp, eax
.text:0040B25E                 mov     eax, edx
.text:0040B260                 xor     edx, edx
.text:0040B262                 mov     [esi], ecx
.text:0040B264                 add     eax, ebp
.text:0040B266                 mov     ebp, [esp+13Ch+var_74]
.text:0040B26D                 imul    ebp, ebx
.text:0040B270                 add     eax, ebp
.text:0040B272                 mov     [esp+13Ch+var_120], eax
.text:0040B276                 mov     ebp, [esp+13Ch+var_120]
.text:0040B27A                 mov     [esi+4], ebp
.text:0040B27D                 jmp     short loc_40B230
.text:0040B27F ; ---------------------------------------------------------------------------
.text:0040B27F
.text:0040B27F loc_40B27F:                             ; CODE XREF: sub_40A940+1B9↑j
.text:0040B27F                                         ; DATA XREF: sub_40A940:jpt_40AAF9↑o
.text:0040B27F                 mov     [esp+13Ch+var_84], ebx ; jumptable 0040AAF9 cases 77,109
.text:0040B286                 mov     eax, ebx
.text:0040B288                 xor     ebp, ebp
.text:0040B28A                 mov     [esp+13Ch+var_78], ebp
.text:0040B291                 sar     eax, 1Fh
.text:0040B294                 mov     edx, [esp+13Ch+var_84]
.text:0040B29B                 mov     [esp+13Ch+var_80], eax
.text:0040B2A2                 lea     esi, [esp+13Ch+var_24]
.text:0040B2A9                 mov     ebp, 1
.text:0040B2AE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040B2B5                 mov     ecx, [esp+13Ch+var_80]
.text:0040B2BC                 mov     [esp+13Ch+Radix], edx
.text:0040B2C0                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040B2C8                 mov     [esp+13Ch+var_130], ecx
.text:0040B2CC                 call    sub_414FC0
.text:0040B2D1                 mov     [esp+13Ch+var_8C], eax
.text:0040B2D8                 mov     [esp+13Ch+var_88], edx
.text:0040B2DF
.text:0040B2DF loc_40B2DF:                             ; CODE XREF: sub_40A940+9F1↓j
.text:0040B2DF                 mov     ebx, [esi+4]
.text:0040B2E2                 mov     edx, [esi]
.text:0040B2E4                 cmp     [esp+13Ch+var_88], ebx
.text:0040B2EB                 mov     [esp+13Ch+var_90], ebx
.text:0040B2F2                 mov     [esp+13Ch+var_94], edx
.text:0040B2F9                 ja      short loc_40B33F
.text:0040B2FB                 mov     eax, [esp+13Ch+var_90]
.text:0040B302                 cmp     [esp+13Ch+var_88], eax
.text:0040B309                 jb      short loc_40B314
.text:0040B30B                 cmp     [esp+13Ch+var_8C], edx
.text:0040B312                 jnb     short loc_40B33F
.text:0040B314
.text:0040B314 loc_40B314:                             ; CODE XREF: sub_40A940+9C9↑j
.text:0040B314                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040B31A                 mov     eax, 1
.text:0040B31F                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040B326
.text:0040B326 loc_40B326:                             ; CODE XREF: sub_40A940+A4C↓j
.text:0040B326                 or      [esp+13Ch+var_78], eax
.text:0040B32D                 dec     ebp
.text:0040B32E                 cmp     ebp, 0FFFFFFFFh
.text:0040B331                 jnz     short loc_40B2DF
.text:0040B333                 mov     eax, [esp+13Ch+var_78]
.text:0040B33A                 jmp     loc_40AC3A
.text:0040B33F ; ---------------------------------------------------------------------------
.text:0040B33F
.text:0040B33F loc_40B33F:                             ; CODE XREF: sub_40A940+9B9↑j
.text:0040B33F                                         ; sub_40A940+9D2↑j
.text:0040B33F                 mov     ecx, [esp+13Ch+var_80]
.text:0040B346                 mov     eax, [esp+13Ch+var_94]
.text:0040B34D                 mov     ebx, [esp+13Ch+var_94]
.text:0040B354                 mul     [esp+13Ch+var_84]
.text:0040B35B                 imul    ebx, ecx
.text:0040B35E                 mov     ecx, edx
.text:0040B360                 mov     [esp+13Ch+var_124], eax
.text:0040B364                 add     ecx, ebx
.text:0040B366                 mov     edx, [esp+13Ch+var_84]
.text:0040B36D                 mov     ebx, [esp+13Ch+var_90]
.text:0040B374                 xor     eax, eax
.text:0040B376                 imul    edx, ebx
.text:0040B379                 add     ecx, edx
.text:0040B37B                 mov     [esp+13Ch+var_120], ecx
.text:0040B37F                 mov     ebx, [esp+13Ch+var_120]
.text:0040B383                 mov     ecx, [esp+13Ch+var_124]
.text:0040B387                 mov     [esi+4], ebx
.text:0040B38A                 mov     [esi], ecx
.text:0040B38C                 jmp     short loc_40B326
.text:0040B38E ; ---------------------------------------------------------------------------
.text:0040B38E
.text:0040B38E loc_40B38E:                             ; CODE XREF: sub_40A940+1B9↑j
.text:0040B38E                                         ; DATA XREF: sub_40A940:jpt_40AAF9↑o
.text:0040B38E                 mov     [esp+13Ch+var_C4], ebx ; jumptable 0040AAF9 cases 84,116
.text:0040B392                 mov     eax, ebx
.text:0040B394                 xor     ebp, ebp
.text:0040B396                 mov     [esp+13Ch+var_B8], ebp
.text:0040B39D                 sar     eax, 1Fh
.text:0040B3A0                 mov     edx, [esp+13Ch+var_C4]
.text:0040B3A4                 mov     [esp+13Ch+var_C0], eax
.text:0040B3A8                 lea     esi, [esp+13Ch+var_24]
.text:0040B3AF                 mov     ebp, 3
.text:0040B3B4                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040B3BB                 mov     ebx, [esp+13Ch+var_C0]
.text:0040B3BF                 mov     [esp+13Ch+Radix], edx
.text:0040B3C3                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040B3CB                 mov     [esp+13Ch+var_130], ebx
.text:0040B3CF                 call    sub_414FC0
.text:0040B3D4                 mov     [esp+13Ch+var_CC], eax
.text:0040B3D8                 mov     [esp+13Ch+var_C8], edx
.text:0040B3DC
.text:0040B3DC loc_40B3DC:                             ; CODE XREF: sub_40A940+ADC↓j
.text:0040B3DC                 mov     ebx, [esi+4]
.text:0040B3DF                 mov     edx, [esi]
.text:0040B3E1                 cmp     [esp+13Ch+var_C8], ebx
.text:0040B3E5                 mov     [esp+13Ch+var_D0], ebx
.text:0040B3E9                 mov     [esp+13Ch+var_D4], edx
.text:0040B3ED                 ja      short loc_40B42A
.text:0040B3EF                 mov     eax, [esp+13Ch+var_D0]
.text:0040B3F3                 cmp     [esp+13Ch+var_C8], eax
.text:0040B3F7                 jb      short loc_40B3FF
.text:0040B3F9                 cmp     [esp+13Ch+var_CC], edx
.text:0040B3FD                 jnb     short loc_40B42A
.text:0040B3FF
.text:0040B3FF loc_40B3FF:                             ; CODE XREF: sub_40A940+AB7↑j
.text:0040B3FF                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040B405                 mov     eax, 1
.text:0040B40A                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040B411
.text:0040B411 loc_40B411:                             ; CODE XREF: sub_40A940+B25↓j
.text:0040B411                 or      [esp+13Ch+var_B8], eax
.text:0040B418                 dec     ebp
.text:0040B419                 cmp     ebp, 0FFFFFFFFh
.text:0040B41C                 jnz     short loc_40B3DC
.text:0040B41E                 mov     eax, [esp+13Ch+var_B8]
.text:0040B425                 jmp     loc_40AC3A
.text:0040B42A ; ---------------------------------------------------------------------------
.text:0040B42A
.text:0040B42A loc_40B42A:                             ; CODE XREF: sub_40A940+AAD↑j
.text:0040B42A                                         ; sub_40A940+ABD↑j
.text:0040B42A                 mov     ecx, [esp+13Ch+var_C0]
.text:0040B42E                 mov     eax, [esp+13Ch+var_D4]
.text:0040B432                 mov     ebx, [esp+13Ch+var_D4]
.text:0040B436                 mul     [esp+13Ch+var_C4]
.text:0040B43A                 imul    ebx, ecx
.text:0040B43D                 mov     ecx, edx
.text:0040B43F                 mov     [esp+13Ch+var_124], eax
.text:0040B443                 add     ecx, ebx
.text:0040B445                 mov     edx, [esp+13Ch+var_C4]
.text:0040B449                 mov     ebx, [esp+13Ch+var_D0]
.text:0040B44D                 xor     eax, eax
.text:0040B44F                 imul    edx, ebx
.text:0040B452                 add     ecx, edx
.text:0040B454                 mov     [esp+13Ch+var_120], ecx
.text:0040B458                 mov     ebx, [esp+13Ch+var_120]
.text:0040B45C                 mov     ecx, [esp+13Ch+var_124]
.text:0040B460                 mov     [esi+4], ebx
.text:0040B463                 mov     [esi], ecx
.text:0040B465                 jmp     short loc_40B411
.text:0040B467 ; ---------------------------------------------------------------------------
.text:0040B467
.text:0040B467 loc_40B467:                             ; CODE XREF: sub_40A940+1B9↑j
.text:0040B467                                         ; DATA XREF: sub_40A940:jpt_40AAF9↑o
.text:0040B467                 mov     [esp+13Ch+Radix], 2 ; jumptable 0040AAF9 case 119
.text:0040B46F                 lea     ebp, [esp+13Ch+var_24]
.text:0040B476                 mov     [esp+13Ch+var_130], 0
.text:0040B47E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040B485                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040B48D                 call    sub_414FC0
.text:0040B492                 mov     esi, [esp+13Ch+var_20]
.text:0040B499                 mov     ecx, [esp+13Ch+var_24]
.text:0040B4A0                 cmp     edx, esi
.text:0040B4A2                 ja      short loc_40B4B2
.text:0040B4A4                 jb      loc_40AC65
.text:0040B4AA                 cmp     eax, ecx
.text:0040B4AC                 jb      loc_40AC65
.text:0040B4B2
.text:0040B4B2 loc_40B4B2:                             ; CODE XREF: sub_40A940+B62↑j
.text:0040B4B2                 mov     esi, [ebp+0]
.text:0040B4B5                 mov     eax, 2
.text:0040B4BA                 mov     ecx, [ebp+4]
.text:0040B4BD                 mul     esi
.text:0040B4BF                 lea     edx, [edx+ecx*2]
.text:0040B4C2                 jmp     loc_40AC32
.text:0040B4C7 ; ---------------------------------------------------------------------------
.text:0040B4C7
.text:0040B4C7 loc_40B4C7:                             ; CODE XREF: sub_40A940+196↑j
.text:0040B4C7                                         ; sub_40A940+1A8↑j
.text:0040B4C7                 mov     esi, 2
.text:0040B4CC                 mov     ebx, 3E8h
.text:0040B4D1                 mov     [esp+13Ch+var_30], esi
.text:0040B4D8                 jmp     loc_40AAEE
.text:0040B4DD ; ---------------------------------------------------------------------------
.text:0040B4DD
.text:0040B4DD loc_40B4DD:                             ; CODE XREF: sub_40A940+19F↑j
.text:0040B4DD                 cmp     eax, 69h ; 'i'
.text:0040B4E0                 jnz     loc_40AAEE
.text:0040B4E6                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040B4EA                 jnz     loc_40AAEE
.text:0040B4F0                 mov     eax, 3
.text:0040B4F5                 mov     [esp+13Ch+var_30], eax
.text:0040B4FC                 jmp     loc_40AAEE
.text:0040B501 ; ---------------------------------------------------------------------------
.text:0040B501
.text:0040B501 loc_40B501:                             ; CODE XREF: sub_40A940+187↑j
.text:0040B501                 mov     edx, [edi]
.text:0040B503                 jmp     loc_40AAEE
.text:0040B508 ; ---------------------------------------------------------------------------
.text:0040B508
.text:0040B508 loc_40B508:                             ; CODE XREF: sub_40A940+E2↑j
.text:0040B508                 mov     edx, [esp+13Ch+var_24]
.text:0040B50F                 mov     ecx, [esp+13Ch+var_20]
.text:0040B516                 mov     edi, [esp+13Ch+arg_C]
.text:0040B51D                 mov     [edi], edx
.text:0040B51F                 mov     [edi+4], ecx
.text:0040B522                 jmp     loc_40AA4B
.text:0040B527 ; ---------------------------------------------------------------------------
.text:0040B527
.text:0040B527 loc_40B527:                             ; CODE XREF: sub_40A940+D3↑j
.text:0040B527                 call    _errno
.text:0040B52C                 cmp     dword ptr [eax], 22h ; '"'
.text:0040B52F                 jnz     short loc_40B542
.text:0040B531                 mov     esi, 1
.text:0040B536                 mov     [esp+13Ch+var_28], esi
.text:0040B53D                 jmp     loc_40AA19
.text:0040B542 ; ---------------------------------------------------------------------------
.text:0040B542
.text:0040B542 loc_40B542:                             ; CODE XREF: sub_40A940+BEF↑j
.text:0040B542                                         ; sub_40A940+C15↓j ...
.text:0040B542                 mov     eax, 4
.text:0040B547                 jmp     loc_40AA52
.text:0040B54C ; ---------------------------------------------------------------------------
.text:0040B54C
.text:0040B54C loc_40B54C:                             ; CODE XREF: sub_40A940+C4↑j
.text:0040B54C                 mov     ebx, [esp+13Ch+Str]
.text:0040B553                 test    ebx, ebx
.text:0040B555                 jz      short loc_40B542
.text:0040B557                 movzx   eax, byte ptr [eax]
.text:0040B55A                 test    al, al
.text:0040B55C                 jz      short loc_40B542
.text:0040B55E                 mov     esi, [esp+13Ch+Str]
.text:0040B565                 movsx   ebp, al
.text:0040B568                 mov     [esp+13Ch+Type], ebp ; Val
.text:0040B56C                 mov     [esp+13Ch+C], esi ; Str
.text:0040B56F                 call    strchr
.text:0040B574                 test    eax, eax
.text:0040B576                 jz      short loc_40B542
.text:0040B578                 mov     ecx, 1
.text:0040B57D                 xor     edx, edx
.text:0040B57F                 mov     [esp+13Ch+var_24], ecx
.text:0040B586                 mov     [esp+13Ch+var_20], edx
.text:0040B58D                 jmp     loc_40AA19
.text:0040B592 ; ---------------------------------------------------------------------------
.text:0040B592
.text:0040B592 loc_40B592:                             ; CODE XREF: sub_40A940+61↑j
.text:0040B592                 mov     eax, ds:_pctype
.text:0040B597                 mov     ecx, [eax]
.text:0040B599                 movzx   eax, word ptr [ecx+edx*2]
.text:0040B59D                 and     eax, 8
.text:0040B5A0                 jmp     loc_40A9B7
.text:0040B5A5 ; ---------------------------------------------------------------------------
.text:0040B5A5
.text:0040B5A5 loc_40B5A5:                             ; CODE XREF: sub_40A940+33↑j
.text:0040B5A5                 lea     edi, [esp+13Ch+var_18]
.text:0040B5AC                 jmp     loc_40A979
.text:0040B5B1 ; ---------------------------------------------------------------------------
.text:0040B5B1
.text:0040B5B1 loc_40B5B1:                             ; CODE XREF: sub_40A940+24↑j
.text:0040B5B1                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:0040B5B9                 mov     [esp+13Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:0040B5C1                 mov     [esp+13Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:0040B5C8                 call    _assert
.text:0040B5C8 sub_40A940      endp
.text:0040B5C8
.text:0040B5C8 ; ---------------------------------------------------------------------------
.text:0040B5CD                 align 10h
.text:0040B5D0
.text:0040B5D0 ; =============== S U B R O U T I N E =======================================
.text:0040B5D0
.text:0040B5D0
.text:0040B5D0 ; int __cdecl sub_40B5D0(char *, char *Format)
.text:0040B5D0 sub_40B5D0      proc near               ; CODE XREF: sub_403F30+4E↑p
.text:0040B5D0                                         ; sub_4049B0+80↑p ...
.text:0040B5D0
.text:0040B5D0 FileName        = dword ptr -1Ch
.text:0040B5D0 Mode            = dword ptr -18h
.text:0040B5D0 var_C           = dword ptr -0Ch
.text:0040B5D0 var_8           = dword ptr -8
.text:0040B5D0 var_4           = dword ptr -4
.text:0040B5D0 arg_0           = dword ptr  4
.text:0040B5D0 Format          = dword ptr  8
.text:0040B5D0
.text:0040B5D0                 sub     esp, 1Ch
.text:0040B5D3                 mov     edx, [esp+1Ch+arg_0]
.text:0040B5D7                 mov     [esp+1Ch+var_C], ebx
.text:0040B5DB                 mov     ebx, [esp+1Ch+Format]
.text:0040B5DF                 mov     [esp+1Ch+var_8], esi
.text:0040B5E3                 mov     [esp+1Ch+var_4], edi
.text:0040B5E7                 mov     [esp+1Ch+Mode], ebx ; Mode
.text:0040B5EB                 mov     [esp+1Ch+FileName], edx ; FileName
.text:0040B5EE                 call    fopen
.text:0040B5F3                 test    eax, eax
.text:0040B5F5                 mov     esi, eax
.text:0040B5F7                 jz      short loc_40B601
.text:0040B5F9                 mov     eax, [eax+10h]
.text:0040B5FC                 cmp     eax, 2
.text:0040B5FF                 jbe     short loc_40B613
.text:0040B601
.text:0040B601 loc_40B601:                             ; CODE XREF: sub_40B5D0+27↑j
.text:0040B601                                         ; sub_40B5D0+6D↓j
.text:0040B601                 mov     eax, esi
.text:0040B603
.text:0040B603 loc_40B603:                             ; CODE XREF: sub_40B5D0+87↓j
.text:0040B603                 mov     ebx, [esp+1Ch+var_C]
.text:0040B607                 mov     esi, [esp+1Ch+var_8]
.text:0040B60B                 mov     edi, [esp+1Ch+var_4]
.text:0040B60F                 add     esp, 1Ch
.text:0040B612                 retn
.text:0040B613 ; ---------------------------------------------------------------------------
.text:0040B613
.text:0040B613 loc_40B613:                             ; CODE XREF: sub_40B5D0+2F↑j
.text:0040B613                 mov     [esp+1Ch+FileName], eax
.text:0040B616                 call    sub_40CAE0
.text:0040B61B                 test    eax, eax
.text:0040B61D                 mov     edi, eax
.text:0040B61F                 js      short loc_40B659
.text:0040B621                 mov     [esp+1Ch+FileName], esi ; Stream
.text:0040B624                 call    fclose
.text:0040B629                 test    eax, eax
.text:0040B62B                 jnz     short loc_40B63F
.text:0040B62D                 mov     [esp+1Ch+Mode], ebx ; Format
.text:0040B631                 mov     [esp+1Ch+FileName], edi ; FileHandle
.text:0040B634                 call    _fdopen
.text:0040B639                 test    eax, eax
.text:0040B63B                 mov     esi, eax
.text:0040B63D                 jnz     short loc_40B601
.text:0040B63F
.text:0040B63F loc_40B63F:                             ; CODE XREF: sub_40B5D0+5B↑j
.text:0040B63F                 call    _errno
.text:0040B644                 mov     ebx, [eax]
.text:0040B646                 mov     [esp+1Ch+FileName], edi ; FileHandle
.text:0040B649                 call    _close
.text:0040B64E
.text:0040B64E loc_40B64E:                             ; CODE XREF: sub_40B5D0+98↓j
.text:0040B64E                 call    _errno
.text:0040B653                 mov     [eax], ebx
.text:0040B655                 xor     eax, eax
.text:0040B657                 jmp     short loc_40B603
.text:0040B659 ; ---------------------------------------------------------------------------
.text:0040B659
.text:0040B659 loc_40B659:                             ; CODE XREF: sub_40B5D0+4F↑j
.text:0040B659                 call    _errno
.text:0040B65E                 mov     ebx, [eax]
.text:0040B660                 mov     [esp+1Ch+FileName], esi ; Stream
.text:0040B663                 call    fclose
.text:0040B668                 jmp     short loc_40B64E
.text:0040B668 sub_40B5D0      endp
.text:0040B668
.text:0040B668 ; ---------------------------------------------------------------------------
.text:0040B66A                 align 10h
.text:0040B670 aLiteral        db 'literal',0          ; DATA XREF: .text:0040B6B0↓o
.text:0040B678 aShell          db 'shell',0            ; DATA XREF: .text:0040B6B4↓o
.text:0040B67E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:0040B6B8↓o
.text:0040B68B aC              db 'c',0                ; DATA XREF: .text:0040B6BC↓o
.text:0040B68D aEscape         db 'escape',0           ; DATA XREF: .text:0040B6C0↓o
.text:0040B694 aLocale         db 'locale',0           ; DATA XREF: .text:0040B6C4↓o
.text:0040B69B aClocale        db 'clocale',0          ; DATA XREF: .text:0040B6C8↓o
.text:0040B6A3                 align 10h
.text:0040B6B0                 dd offset aLiteral      ; "literal"
.text:0040B6B4                 dd offset aShell        ; "shell"
.text:0040B6B8                 dd offset aShellAlways  ; "shell-always"
.text:0040B6BC                 dd offset aC            ; "c"
.text:0040B6C0                 dd offset aEscape       ; "escape"
.text:0040B6C4                 dd offset aLocale       ; "locale"
.text:0040B6C8                 dd offset aClocale      ; "clocale"
.text:0040B6CC                 dd 2 dup(0)
.text:0040B6D4                 dd 1, 2, 3, 4, 5, 6
.text:0040B6EC asc_40B6EC:                             ; DATA XREF: sub_40B700+7E↓o
.text:0040B6EC                                         ; sub_40B700+A39↓o ...
.text:0040B6EC                 text "UTF-16LE", '"',27h,'`'
.text:0040B6F2                 align 10h
.text:0040B700
.text:0040B700 ; =============== S U B R O U T I N E =======================================
.text:0040B700
.text:0040B700
.text:0040B700 ; int __cdecl sub_40B700(int, int, char *Str, int, int, int)
.text:0040B700 sub_40B700      proc near               ; CODE XREF: sub_40B700+43A↓p
.text:0040B700                                         ; .text:0040C2C3↓p ...
.text:0040B700
.text:0040B700 C               = dword ptr -4Ch
.text:0040B700 Type            = dword ptr -48h
.text:0040B700 SizeInBytes     = dword ptr -44h
.text:0040B700 State           = dword ptr -40h
.text:0040B700 var_3C          = dword ptr -3Ch
.text:0040B700 var_38          = dword ptr -38h
.text:0040B700 var_34          = dword ptr -34h
.text:0040B700 var_30          = dword ptr -30h
.text:0040B700 var_29          = byte ptr -29h
.text:0040B700 var_28          = dword ptr -28h
.text:0040B700 var_22          = byte ptr -22h
.text:0040B700 var_21          = byte ptr -21h
.text:0040B700 var_20          = dword ptr -20h
.text:0040B700 var_1C          = dword ptr -1Ch
.text:0040B700 var_18          = mbstate_t ptr -18h
.text:0040B700 arg_0           = dword ptr  4
.text:0040B700 arg_4           = dword ptr  8
.text:0040B700 Str             = dword ptr  0Ch
.text:0040B700 arg_C           = dword ptr  10h
.text:0040B700 arg_10          = dword ptr  14h
.text:0040B700 arg_14          = dword ptr  18h
.text:0040B700
.text:0040B700                 push    ebp
.text:0040B701                 push    edi
.text:0040B702                 push    esi
.text:0040B703                 push    ebx
.text:0040B704                 sub     esp, 3Ch
.text:0040B707                 mov     edx, ds:__mb_cur_max
.text:0040B70D                 mov     [esp+4Ch+var_34], 0
.text:0040B715                 mov     [esp+4Ch+var_1C], 0
.text:0040B71D                 cmp     dword ptr [edx], 1
.text:0040B720                 mov     [esp+4Ch+var_20], 0
.text:0040B728                 mov     [esp+4Ch+var_21], 0
.text:0040B72D                 setz    [esp+4Ch+var_22]
.text:0040B732                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:0040B737                 ja      short def_40B73D ; jumptable 0040B73D default case, cases 0,1
.text:0040B739                 mov     edx, [esp+4Ch+arg_10]
.text:0040B73D                 jmp     ds:jpt_40B73D[edx*4] ; switch jump
.text:0040B73D ; ---------------------------------------------------------------------------
.text:0040B744 jpt_40B73D      dd offset def_40B73D    ; DATA XREF: sub_40B700+3D↑r
.text:0040B744                 dd offset def_40B73D    ; jump table for switch statement
.text:0040B744                 dd offset loc_40C085
.text:0040B744                 dd offset loc_40B760
.text:0040B744                 dd offset loc_40C0AB
.text:0040B744                 dd offset loc_40C0B5
.text:0040B744                 dd offset loc_40C0B5
.text:0040B760 ; ---------------------------------------------------------------------------
.text:0040B760
.text:0040B760 loc_40B760:                             ; CODE XREF: sub_40B700+3D↑j
.text:0040B760                                         ; DATA XREF: sub_40B700:jpt_40B73D↑o
.text:0040B760                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040B73D case 3
.text:0040B764                 cmp     [esp+4Ch+var_34], eax
.text:0040B768                 jnb     short loc_40B771
.text:0040B76A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040B76E                 mov     byte ptr [ebx], 22h ; '"'
.text:0040B771
.text:0040B771 loc_40B771:                             ; CODE XREF: sub_40B700+68↑j
.text:0040B771                 mov     [esp+4Ch+var_34], 1
.text:0040B779                 mov     [esp+4Ch+var_21], 1
.text:0040B77E                 mov     [esp+4Ch+var_1C], offset asc_40B6EC ; "\"'`"
.text:0040B786
.text:0040B786 loc_40B786:                             ; CODE XREF: sub_40B700+9A6↓j
.text:0040B786                 mov     [esp+4Ch+var_20], 1
.text:0040B78E
.text:0040B78E def_40B73D:                             ; CODE XREF: sub_40B700+37↑j
.text:0040B78E                                         ; sub_40B700+3D↑j ...
.text:0040B78E                 xor     ebp, ebp        ; jumptable 0040B73D default case, cases 0,1
.text:0040B790
.text:0040B790 loc_40B790:                             ; CODE XREF: sub_40B700+3DB↓j
.text:0040B790                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040B795                 jz      loc_40C077
.text:0040B79B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040B79F
.text:0040B79F loc_40B79F:                             ; CODE XREF: sub_40B700+980↓j
.text:0040B79F                 jz      loc_40C00E
.text:0040B7A5                 cmp     [esp+4Ch+var_21], 0
.text:0040B7AA                 jz      short loc_40B7F0
.text:0040B7AC                 mov     esi, [esp+4Ch+var_20]
.text:0040B7B0                 test    esi, esi
.text:0040B7B2                 jz      short loc_40B7F0
.text:0040B7B4                 mov     ecx, [esp+4Ch+var_20]
.text:0040B7B8                 lea     edi, [ecx+ebp]
.text:0040B7BB                 cmp     edi, [esp+4Ch+arg_C]
.text:0040B7BF                 ja      short loc_40B7F0
.text:0040B7C1                 cld
.text:0040B7C2                 mov     ebx, [esp+4Ch+Str]
.text:0040B7C6                 mov     edi, [esp+4Ch+var_1C]
.text:0040B7CA                 add     ebx, ebp
.text:0040B7CC                 mov     esi, ebx
.text:0040B7CE                 cmp     ecx, ecx
.text:0040B7D0                 repe cmpsb
.text:0040B7D2                 jnz     short loc_40B7F0
.text:0040B7D4                 mov     edx, [esp+4Ch+arg_4]
.text:0040B7D8                 cmp     [esp+4Ch+var_34], edx
.text:0040B7DC                 jnb     short loc_40B7EA
.text:0040B7DE                 mov     ecx, [esp+4Ch+arg_0]
.text:0040B7E2                 mov     eax, [esp+4Ch+var_34]
.text:0040B7E6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040B7EA
.text:0040B7EA loc_40B7EA:                             ; CODE XREF: sub_40B700+DC↑j
.text:0040B7EA                 inc     [esp+4Ch+var_34]
.text:0040B7EE                 mov     esi, esi
.text:0040B7F0
.text:0040B7F0 loc_40B7F0:                             ; CODE XREF: sub_40B700+AA↑j
.text:0040B7F0                                         ; sub_40B700+B2↑j ...
.text:0040B7F0                 mov     edi, [esp+4Ch+Str]
.text:0040B7F4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:0040B7F9                 movzx   eax, bl
.text:0040B7FC                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040B7FF                 ja      def_40B805      ; jumptable 0040B805 default case, cases 1-6,14-31,64
.text:0040B805                 jmp     ds:jpt_40B805[eax*4] ; switch jump
.text:0040B805 ; ---------------------------------------------------------------------------
.text:0040B80C jpt_40B805      dd offset loc_40BA08, offset def_40B805, offset def_40B805
.text:0040B80C                                         ; DATA XREF: sub_40B700+105↑r
.text:0040B80C                 dd offset def_40B805, offset def_40B805, offset def_40B805 ; jump table for switch statement
.text:0040B80C                 dd offset def_40B805, offset loc_40BAE0, offset loc_40BAFE
.text:0040B80C                 dd offset loc_40BB02, offset loc_40BB47, offset loc_40BB4B
.text:0040B80C                 dd offset loc_40BB4F, offset loc_40BB53, offset def_40B805
.text:0040B80C                 dd offset def_40B805, offset def_40B805, offset def_40B805
.text:0040B80C                 dd offset def_40B805, offset def_40B805, offset def_40B805
.text:0040B80C                 dd offset def_40B805, offset def_40B805, offset def_40B805
.text:0040B80C                 dd offset def_40B805, offset def_40B805, offset def_40B805
.text:0040B80C                 dd offset def_40B805, offset def_40B805, offset def_40B805
.text:0040B80C                 dd offset def_40B805, offset def_40B805, offset loc_40BFD8
.text:0040B80C                 dd offset loc_40BFD8, offset loc_40BFD8, offset loc_40BFFA
.text:0040B80C                 dd offset loc_40BFD8, offset def_40BC02, offset loc_40BFD8
.text:0040B80C                 dd offset loc_40BB57, offset loc_40BFD8, offset loc_40BFD8
.text:0040B80C                 dd offset loc_40BFD8, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset loc_40BFD8
.text:0040B80C                 dd offset loc_40BFD8, offset loc_40BFD8, offset loc_40BFD8
.text:0040B80C                 dd offset loc_40BBBC, offset def_40B805, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset loc_40BFD8, offset loc_40BFD1
.text:0040B80C                 dd offset def_40BC02, offset loc_40BFD8, offset def_40BC02
.text:0040B80C                 dd offset loc_40BFD8, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset def_40BC02, offset def_40BC02, offset def_40BC02
.text:0040B80C                 dd offset loc_40BFE8, offset loc_40BFD8, offset loc_40BFE8
.text:0040B80C                 dd offset loc_40BFFA
.text:0040BA08 ; ---------------------------------------------------------------------------
.text:0040BA08
.text:0040BA08 loc_40BA08:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BA08                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BA08                 cmp     [esp+4Ch+var_21], 0 ; jumptable 0040B805 case 0
.text:0040BA0D                 lea     eax, [ebp+1]
.text:0040BA10                 jz      loc_40BAC0
.text:0040BA16                 mov     esi, [esp+4Ch+arg_4]
.text:0040BA1A                 cmp     [esp+4Ch+var_34], esi
.text:0040BA1E                 jnb     short loc_40BA2C
.text:0040BA20                 mov     eax, [esp+4Ch+arg_0]
.text:0040BA24                 mov     ebx, [esp+4Ch+var_34]
.text:0040BA28                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040BA2C
.text:0040BA2C loc_40BA2C:                             ; CODE XREF: sub_40B700+31E↑j
.text:0040BA2C                 inc     [esp+4Ch+var_34]
.text:0040BA30                 mov     edx, [esp+4Ch+arg_4]
.text:0040BA34                 cmp     [esp+4Ch+var_34], edx
.text:0040BA38                 jnb     short loc_40BA46
.text:0040BA3A                 mov     edi, [esp+4Ch+arg_0]
.text:0040BA3E                 mov     ecx, [esp+4Ch+var_34]
.text:0040BA42                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:0040BA46
.text:0040BA46 loc_40BA46:                             ; CODE XREF: sub_40B700+338↑j
.text:0040BA46                 inc     [esp+4Ch+var_34]
.text:0040BA4A                 mov     esi, [esp+4Ch+arg_4]
.text:0040BA4E                 cmp     [esp+4Ch+var_34], esi
.text:0040BA52                 jnb     short loc_40BA60
.text:0040BA54                 mov     ebx, [esp+4Ch+arg_0]
.text:0040BA58                 mov     eax, [esp+4Ch+var_34]
.text:0040BA5C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:0040BA60
.text:0040BA60 loc_40BA60:                             ; CODE XREF: sub_40B700+352↑j
.text:0040BA60                 inc     [esp+4Ch+var_34]
.text:0040BA64                 mov     bl, 30h ; '0'
.text:0040BA66                 lea     esi, [esi+0]
.text:0040BA69                 lea     edi, [edi+0]
.text:0040BA70
.text:0040BA70 def_40BC02:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BA70                                         ; sub_40B700+463↓j ...
.text:0040BA70                 cmp     [esp+4Ch+var_21], 0 ; jumptable 0040B805 cases 37,43-58,65-90,93,95,97-122
.text:0040BA70                                         ; jumptable 0040BC02 default case, cases 34-38,42-44,46,48-59
.text:0040BA75                 lea     eax, [ebp+1]
.text:0040BA78                 jz      short loc_40BAC0
.text:0040BA7A                 mov     cl, bl
.text:0040BA7C                 mov     edi, [esp+4Ch+arg_14]
.text:0040BA80                 mov     esi, 1
.text:0040BA85                 shr     cl, 5
.text:0040BA88                 movzx   edx, cl
.text:0040BA8B                 mov     ecx, ebx
.text:0040BA8D                 and     ecx, 1Fh
.text:0040BA90                 shl     esi, cl
.text:0040BA92                 test    [edi+edx*4+4], esi
.text:0040BA96                 jz      short loc_40BAB2
.text:0040BA98
.text:0040BA98 loc_40BA98:                             ; CODE XREF: sub_40B700+3FC↓j
.text:0040BA98                 mov     edx, [esp+4Ch+arg_4]
.text:0040BA9C                 cmp     [esp+4Ch+var_34], edx
.text:0040BAA0                 jnb     short loc_40BAAE
.text:0040BAA2                 mov     edi, [esp+4Ch+arg_0]
.text:0040BAA6                 mov     esi, [esp+4Ch+var_34]
.text:0040BAAA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040BAAE
.text:0040BAAE loc_40BAAE:                             ; CODE XREF: sub_40B700+3A0↑j
.text:0040BAAE                 inc     [esp+4Ch+var_34]
.text:0040BAB2
.text:0040BAB2 loc_40BAB2:                             ; CODE XREF: sub_40B700+396↑j
.text:0040BAB2                 lea     eax, [ebp+1]
.text:0040BAB5                 lea     esi, [esi+0]
.text:0040BAB9                 lea     edi, [edi+0]
.text:0040BAC0
.text:0040BAC0 loc_40BAC0:                             ; CODE XREF: sub_40B700+310↑j
.text:0040BAC0                                         ; sub_40B700+378↑j ...
.text:0040BAC0                 mov     ebp, [esp+4Ch+arg_4]
.text:0040BAC4                 cmp     [esp+4Ch+var_34], ebp
.text:0040BAC8                 jnb     short loc_40BAD5
.text:0040BACA                 mov     edx, [esp+4Ch+arg_0]
.text:0040BACE                 mov     ecx, [esp+4Ch+var_34]
.text:0040BAD2                 mov     [ecx+edx], bl
.text:0040BAD5
.text:0040BAD5 loc_40BAD5:                             ; CODE XREF: sub_40B700+3C8↑j
.text:0040BAD5                 inc     [esp+4Ch+var_34]
.text:0040BAD9                 mov     ebp, eax
.text:0040BADB                 jmp     loc_40B790
.text:0040BAE0 ; ---------------------------------------------------------------------------
.text:0040BAE0
.text:0040BAE0 loc_40BAE0:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BAE0                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BAE0                 mov     dl, 61h ; 'a'   ; jumptable 0040B805 case 7
.text:0040BAE2                 lea     esi, [esi+0]
.text:0040BAE9                 lea     edi, [edi+0]
.text:0040BAF0
.text:0040BAF0 loc_40BAF0:                             ; CODE XREF: sub_40B700+400↓j
.text:0040BAF0                                         ; sub_40B700+409↓j ...
.text:0040BAF0                 cmp     [esp+4Ch+var_21], 0
.text:0040BAF5                 lea     eax, [ebp+1]
.text:0040BAF8                 jz      short loc_40BAC0
.text:0040BAFA                 mov     bl, dl
.text:0040BAFC                 jmp     short loc_40BA98
.text:0040BAFE ; ---------------------------------------------------------------------------
.text:0040BAFE
.text:0040BAFE loc_40BAFE:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BAFE                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BAFE                 mov     dl, 62h ; 'b'   ; jumptable 0040B805 case 8
.text:0040BB00                 jmp     short loc_40BAF0
.text:0040BB02 ; ---------------------------------------------------------------------------
.text:0040BB02
.text:0040BB02 loc_40BB02:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BB02                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BB02                 mov     dl, 74h ; 't'   ; jumptable 0040B805 case 9
.text:0040BB04
.text:0040BB04 loc_40BB04:                             ; CODE XREF: sub_40B700+449↓j
.text:0040BB04                                         ; sub_40B700+455↓j ...
.text:0040BB04                 cmp     [esp+4Ch+arg_10], 1
.text:0040BB09                 jnz     short loc_40BAF0
.text:0040BB0B
.text:0040BB0B loc_40BB0B:                             ; CODE XREF: sub_40B700+45C↓j
.text:0040BB0B                                         ; sub_40B700+4C1↓j ...
.text:0040BB0B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 0040BED2 cases 91,92,94,96,124
.text:0040BB13                 mov     eax, [esp+4Ch+arg_14]
.text:0040BB17                 mov     edx, [esp+4Ch+arg_C]
.text:0040BB1B                 mov     ecx, [esp+4Ch+Str]
.text:0040BB1F                 mov     ebx, [esp+4Ch+arg_4]
.text:0040BB23                 mov     [esp+4Ch+var_38], eax ; int
.text:0040BB27                 mov     ebp, [esp+4Ch+arg_0]
.text:0040BB2B                 mov     [esp+4Ch+State], edx ; int
.text:0040BB2F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:0040BB33                 mov     [esp+4Ch+Type], ebx ; int
.text:0040BB37                 mov     [esp+4Ch+C], ebp ; int
.text:0040BB3A                 call    sub_40B700
.text:0040BB3F
.text:0040BB3F loc_40BB3F:                             ; CODE XREF: sub_40B700+972↓j
.text:0040BB3F                 add     esp, 3Ch
.text:0040BB42                 pop     ebx
.text:0040BB43                 pop     esi
.text:0040BB44                 pop     edi
.text:0040BB45                 pop     ebp
.text:0040BB46                 retn
.text:0040BB47 ; ---------------------------------------------------------------------------
.text:0040BB47
.text:0040BB47 loc_40BB47:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BB47                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BB47                 mov     dl, 6Eh ; 'n'   ; jumptable 0040B805 case 10
.text:0040BB49                 jmp     short loc_40BB04
.text:0040BB4B ; ---------------------------------------------------------------------------
.text:0040BB4B
.text:0040BB4B loc_40BB4B:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BB4B                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BB4B                 mov     dl, 76h ; 'v'   ; jumptable 0040B805 case 11
.text:0040BB4D                 jmp     short loc_40BAF0
.text:0040BB4F ; ---------------------------------------------------------------------------
.text:0040BB4F
.text:0040BB4F loc_40BB4F:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BB4F                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BB4F                 mov     dl, 66h ; 'f'   ; jumptable 0040B805 case 12
.text:0040BB51                 jmp     short loc_40BAF0
.text:0040BB53 ; ---------------------------------------------------------------------------
.text:0040BB53
.text:0040BB53 loc_40BB53:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BB53                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BB53                 mov     dl, 72h ; 'r'   ; jumptable 0040B805 case 13
.text:0040BB55                 jmp     short loc_40BB04
.text:0040BB57 ; ---------------------------------------------------------------------------
.text:0040BB57
.text:0040BB57 loc_40BB57:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BB57                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BB57                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040B805 case 39
.text:0040BB5C                 jz      short loc_40BB0B ; jumptable 0040BED2 cases 91,92,94,96,124
.text:0040BB5E                 cmp     [esp+4Ch+arg_10], 2
.text:0040BB63                 jnz     def_40BC02      ; jumptable 0040B805 cases 37,43-58,65-90,93,95,97-122
.text:0040BB63                                         ; jumptable 0040BC02 default case, cases 34-38,42-44,46,48-59
.text:0040BB69                 mov     edx, [esp+4Ch+arg_4]
.text:0040BB6D                 cmp     [esp+4Ch+var_34], edx
.text:0040BB71                 jnb     short loc_40BB7F
.text:0040BB73                 mov     ecx, [esp+4Ch+arg_0]
.text:0040BB77                 mov     edi, [esp+4Ch+var_34]
.text:0040BB7B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040BB7F
.text:0040BB7F loc_40BB7F:                             ; CODE XREF: sub_40B700+471↑j
.text:0040BB7F                 inc     [esp+4Ch+var_34]
.text:0040BB83                 mov     eax, [esp+4Ch+arg_4]
.text:0040BB87                 cmp     [esp+4Ch+var_34], eax
.text:0040BB8B                 jnb     short loc_40BB99
.text:0040BB8D                 mov     esi, [esp+4Ch+arg_0]
.text:0040BB91                 mov     edx, [esp+4Ch+var_34]
.text:0040BB95                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:0040BB99
.text:0040BB99 loc_40BB99:                             ; CODE XREF: sub_40B700+48B↑j
.text:0040BB99                 inc     [esp+4Ch+var_34]
.text:0040BB9D                 mov     edi, [esp+4Ch+arg_4]
.text:0040BBA1                 cmp     [esp+4Ch+var_34], edi
.text:0040BBA5                 jnb     short loc_40BBB3
.text:0040BBA7                 mov     ecx, [esp+4Ch+arg_0]
.text:0040BBAB                 mov     eax, [esp+4Ch+var_34]
.text:0040BBAF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:0040BBB3
.text:0040BBB3 loc_40BBB3:                             ; CODE XREF: sub_40B700+4A5↑j
.text:0040BBB3                                         ; sub_40B700+5C4↓j ...
.text:0040BBB3                 inc     [esp+4Ch+var_34]
.text:0040BBB7                 jmp     def_40BC02      ; jumptable 0040B805 cases 37,43-58,65-90,93,95,97-122
.text:0040BBB7                                         ; jumptable 0040BC02 default case, cases 34-38,42-44,46,48-59
.text:0040BBBC ; ---------------------------------------------------------------------------
.text:0040BBBC
.text:0040BBBC loc_40BBBC:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BBBC                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BBBC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040B805 case 63
.text:0040BBC1                 jz      loc_40BB0B      ; jumptable 0040BED2 cases 91,92,94,96,124
.text:0040BBC7                 cmp     [esp+4Ch+arg_10], 3
.text:0040BBCC                 jnz     def_40BC02      ; jumptable 0040B805 cases 37,43-58,65-90,93,95,97-122
.text:0040BBCC                                         ; jumptable 0040BC02 default case, cases 34-38,42-44,46,48-59
.text:0040BBD2                 lea     edx, [ebp+2]
.text:0040BBD5                 cmp     edx, [esp+4Ch+arg_C]
.text:0040BBD9                 jnb     def_40BC02      ; jumptable 0040B805 cases 37,43-58,65-90,93,95,97-122
.text:0040BBD9                                         ; jumptable 0040BC02 default case, cases 34-38,42-44,46,48-59
.text:0040BBDF                 mov     esi, [esp+4Ch+Str]
.text:0040BBE3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:0040BBE8                 jnz     def_40BC02      ; jumptable 0040B805 cases 37,43-58,65-90,93,95,97-122
.text:0040BBE8                                         ; jumptable 0040BC02 default case, cases 34-38,42-44,46,48-59
.text:0040BBEE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:0040BBF3                 movsx   eax, cl
.text:0040BBF6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:0040BBF9                 cmp     eax, 1Dh
.text:0040BBFC                 ja      def_40BC02      ; jumptable 0040B805 cases 37,43-58,65-90,93,95,97-122
.text:0040BBFC                                         ; jumptable 0040BC02 default case, cases 34-38,42-44,46,48-59
.text:0040BC02                 jmp     ds:jpt_40BC02[eax*4] ; switch jump
.text:0040BC02 ; ---------------------------------------------------------------------------
.text:0040BC09                 align 4
.text:0040BC0C jpt_40BC02      dd offset loc_40BC84    ; DATA XREF: sub_40B700+502↑r
.text:0040BC0C                 dd offset def_40BC02    ; jump table for switch statement
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset loc_40BC84
.text:0040BC0C                 dd offset loc_40BC84
.text:0040BC0C                 dd offset loc_40BC84
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset loc_40BC84
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset loc_40BC84
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset def_40BC02
.text:0040BC0C                 dd offset loc_40BC84
.text:0040BC0C                 dd offset loc_40BC84
.text:0040BC0C                 dd offset loc_40BC84
.text:0040BC84 ; ---------------------------------------------------------------------------
.text:0040BC84
.text:0040BC84 loc_40BC84:                             ; CODE XREF: sub_40B700+502↑j
.text:0040BC84                                         ; DATA XREF: sub_40B700:jpt_40BC02↑o
.text:0040BC84                 mov     ebp, edx        ; jumptable 0040BC02 cases 33,39-41,45,47,60-62
.text:0040BC86                 mov     bl, cl
.text:0040BC88                 mov     edx, [esp+4Ch+arg_4]
.text:0040BC8C                 cmp     [esp+4Ch+var_34], edx
.text:0040BC90                 jnb     short loc_40BC9E
.text:0040BC92                 mov     ecx, [esp+4Ch+arg_0]
.text:0040BC96                 mov     edi, [esp+4Ch+var_34]
.text:0040BC9A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040BC9E
.text:0040BC9E loc_40BC9E:                             ; CODE XREF: sub_40B700+590↑j
.text:0040BC9E                 inc     [esp+4Ch+var_34]
.text:0040BCA2                 mov     eax, [esp+4Ch+arg_4]
.text:0040BCA6                 cmp     [esp+4Ch+var_34], eax
.text:0040BCAA                 jnb     short loc_40BCB8
.text:0040BCAC                 mov     edx, [esp+4Ch+arg_0]
.text:0040BCB0                 mov     esi, [esp+4Ch+var_34]
.text:0040BCB4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:0040BCB8
.text:0040BCB8 loc_40BCB8:                             ; CODE XREF: sub_40B700+5AA↑j
.text:0040BCB8                 inc     [esp+4Ch+var_34]
.text:0040BCBC                 mov     edi, [esp+4Ch+arg_4]
.text:0040BCC0                 cmp     [esp+4Ch+var_34], edi
.text:0040BCC4                 jnb     loc_40BBB3
.text:0040BCCA                 mov     eax, [esp+4Ch+arg_0]
.text:0040BCCE                 mov     ecx, [esp+4Ch+var_34]
.text:0040BCD2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:0040BCD6                 jmp     loc_40BBB3
.text:0040BCD6 ; ---------------------------------------------------------------------------
.text:0040BCDB                 align 10h
.text:0040BCE0
.text:0040BCE0 def_40B805:                             ; CODE XREF: sub_40B700+FF↑j
.text:0040BCE0                                         ; sub_40B700+105↑j
.text:0040BCE0                                         ; DATA XREF: ...
.text:0040BCE0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 0040B805 default case, cases 1-6,14-31,64
.text:0040BCE5                 jz      loc_40BE10
.text:0040BCEB                 mov     [esp+4Ch+var_28], 1
.text:0040BCF3                 mov     esi, ds:__mb_cur_max
.text:0040BCF9                 movzx   edx, bl
.text:0040BCFC                 cmp     dword ptr [esi], 1
.text:0040BCFF                 jz      loc_40BDF4
.text:0040BD05                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040BD0D                 mov     [esp+4Ch+C], edx ; C
.text:0040BD10                 call    _isctype
.text:0040BD15
.text:0040BD15 loc_40BD15:                             ; CODE XREF: sub_40B700+705↓j
.text:0040BD15                 test    eax, eax
.text:0040BD17                 setnz   [esp+4Ch+var_29]
.text:0040BD1C
.text:0040BD1C loc_40BD1C:                             ; CODE XREF: sub_40B700+7A5↓j
.text:0040BD1C                 cmp     [esp+4Ch+var_21], 0
.text:0040BD21                 lea     eax, [ebp+1]
.text:0040BD24                 jz      loc_40BAC0
.text:0040BD2A                 cmp     [esp+4Ch+var_29], 0
.text:0040BD2F                 jnz     def_40BC02      ; jumptable 0040B805 cases 37,43-58,65-90,93,95,97-122
.text:0040BD2F                                         ; jumptable 0040BC02 default case, cases 34-38,42-44,46,48-59
.text:0040BD35
.text:0040BD35 loc_40BD35:                             ; CODE XREF: sub_40B700+7AB↓j
.text:0040BD35                 mov     eax, [esp+4Ch+var_28]
.text:0040BD39                 lea     edx, [eax+ebp]
.text:0040BD3C                 lea     esi, [esi+0]
.text:0040BD40
.text:0040BD40 loc_40BD40:                             ; CODE XREF: sub_40B700+6EF↓j
.text:0040BD40                 cmp     [esp+4Ch+var_21], 0
.text:0040BD45                 jz      short loc_40BDC0
.text:0040BD47                 cmp     [esp+4Ch+var_29], 0
.text:0040BD4C                 jnz     short loc_40BDC0
.text:0040BD4E                 mov     edi, [esp+4Ch+arg_4]
.text:0040BD52                 cmp     [esp+4Ch+var_34], edi
.text:0040BD56                 jnb     short loc_40BD64
.text:0040BD58                 mov     esi, [esp+4Ch+arg_0]
.text:0040BD5C                 mov     eax, [esp+4Ch+var_34]
.text:0040BD60                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:0040BD64
.text:0040BD64 loc_40BD64:                             ; CODE XREF: sub_40B700+656↑j
.text:0040BD64                 inc     [esp+4Ch+var_34]
.text:0040BD68                 mov     ecx, [esp+4Ch+arg_4]
.text:0040BD6C                 cmp     [esp+4Ch+var_34], ecx
.text:0040BD70                 jnb     short loc_40BD85
.text:0040BD72                 mov     cl, bl
.text:0040BD74                 mov     esi, [esp+4Ch+arg_0]
.text:0040BD78                 mov     edi, [esp+4Ch+var_34]
.text:0040BD7C                 shr     cl, 6
.text:0040BD7F                 add     cl, 30h ; '0'
.text:0040BD82                 mov     [edi+esi], cl
.text:0040BD85
.text:0040BD85 loc_40BD85:                             ; CODE XREF: sub_40B700+670↑j
.text:0040BD85                 inc     [esp+4Ch+var_34]
.text:0040BD89                 mov     edi, [esp+4Ch+arg_4]
.text:0040BD8D                 cmp     [esp+4Ch+var_34], edi
.text:0040BD91                 jnb     short loc_40BDA9
.text:0040BD93                 mov     cl, bl
.text:0040BD95                 mov     esi, [esp+4Ch+arg_0]
.text:0040BD99                 shr     cl, 3
.text:0040BD9C                 mov     edi, [esp+4Ch+var_34]
.text:0040BDA0                 and     cl, 7
.text:0040BDA3                 add     cl, 30h ; '0'
.text:0040BDA6                 mov     [edi+esi], cl
.text:0040BDA9
.text:0040BDA9 loc_40BDA9:                             ; CODE XREF: sub_40B700+691↑j
.text:0040BDA9                 inc     [esp+4Ch+var_34]
.text:0040BDAD                 and     bl, 7
.text:0040BDB0                 add     bl, 30h ; '0'
.text:0040BDB3                 lea     esi, [esi+0]
.text:0040BDB9                 lea     edi, [edi+0]
.text:0040BDC0
.text:0040BDC0 loc_40BDC0:                             ; CODE XREF: sub_40B700+645↑j
.text:0040BDC0                                         ; sub_40B700+64C↑j
.text:0040BDC0                 lea     eax, [ebp+1]
.text:0040BDC3                 cmp     edx, eax
.text:0040BDC5                 jbe     loc_40BAC0
.text:0040BDCB                 mov     ebp, [esp+4Ch+arg_4]
.text:0040BDCF                 cmp     [esp+4Ch+var_34], ebp
.text:0040BDD3                 jnb     short loc_40BDE0
.text:0040BDD5                 mov     ecx, [esp+4Ch+arg_0]
.text:0040BDD9                 mov     edi, [esp+4Ch+var_34]
.text:0040BDDD                 mov     [edi+ecx], bl
.text:0040BDE0
.text:0040BDE0 loc_40BDE0:                             ; CODE XREF: sub_40B700+6D3↑j
.text:0040BDE0                 inc     [esp+4Ch+var_34]
.text:0040BDE4                 mov     ebp, eax
.text:0040BDE6                 mov     eax, [esp+4Ch+Str]
.text:0040BDEA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040BDEF                 jmp     loc_40BD40
.text:0040BDF4 ; ---------------------------------------------------------------------------
.text:0040BDF4
.text:0040BDF4 loc_40BDF4:                             ; CODE XREF: sub_40B700+5FF↑j
.text:0040BDF4                 mov     ecx, ds:_pctype
.text:0040BDFA                 mov     edi, [ecx]
.text:0040BDFC                 movzx   eax, word ptr [edi+edx*2]
.text:0040BE00                 and     eax, 157h
.text:0040BE05                 jmp     loc_40BD15
.text:0040BE05 ; ---------------------------------------------------------------------------
.text:0040BE0A                 align 10h
.text:0040BE10
.text:0040BE10 loc_40BE10:                             ; CODE XREF: sub_40B700+5E5↑j
.text:0040BE10                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040BE15                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040BE1D                 mov     [esp+4Ch+var_28], 0
.text:0040BE25                 mov     [esp+4Ch+var_29], 1
.text:0040BE2A                 jz      loc_40BFBC
.text:0040BE30
.text:0040BE30 loc_40BE30:                             ; CODE XREF: sub_40B700+8CC↓j
.text:0040BE30                 mov     ecx, [esp+4Ch+arg_C]
.text:0040BE34                 lea     edx, [esp+4Ch+var_18]
.text:0040BE38                 mov     edi, [esp+4Ch+Str]
.text:0040BE3C                 mov     [esp+4Ch+State], edx ; State
.text:0040BE40                 lea     esi, [esp+4Ch+var_18._State]
.text:0040BE44                 sub     ecx, ebp
.text:0040BE46                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040BE4A                 add     edi, ebp
.text:0040BE4C                 mov     [esp+4Ch+var_30], edi
.text:0040BE50                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:0040BE54                 mov     [esp+4Ch+C], esi ; DstCh
.text:0040BE57                 call    mbrtowc
.text:0040BE5C                 test    eax, eax
.text:0040BE5E                 mov     edi, eax
.text:0040BE60                 jz      short loc_40BEA0
.text:0040BE62                 cmp     eax, 0FFFFFFFFh
.text:0040BE65                 jz      loc_40BFB2
.text:0040BE6B                 cmp     eax, 0FFFFFFFEh
.text:0040BE6E                 jz      loc_40BF72
.text:0040BE74                 cmp     [esp+4Ch+arg_10], 1
.text:0040BE79                 jz      short loc_40BEB0
.text:0040BE7B
.text:0040BE7B loc_40BE7B:                             ; CODE XREF: sub_40B700+7B9↓j
.text:0040BE7B                                         ; sub_40B700+86D↓j
.text:0040BE7B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:0040BE80                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040BE88                 mov     [esp+4Ch+C], ecx ; C
.text:0040BE8B                 call    iswctype
.text:0040BE90                 test    eax, eax
.text:0040BE92                 jnz     short loc_40BE99
.text:0040BE94                 mov     [esp+4Ch+var_29], 0
.text:0040BE99
.text:0040BE99 loc_40BE99:                             ; CODE XREF: sub_40B700+792↑j
.text:0040BE99                 mov     [esp+4Ch+var_28], edi
.text:0040BE9D                 lea     esi, [esi+0]
.text:0040BEA0
.text:0040BEA0 loc_40BEA0:                             ; CODE XREF: sub_40B700+760↑j
.text:0040BEA0                                         ; sub_40B700+87B↓j ...
.text:0040BEA0                 cmp     [esp+4Ch+var_28], 1
.text:0040BEA5                 jbe     loc_40BD1C
.text:0040BEAB                 jmp     loc_40BD35
.text:0040BEB0 ; ---------------------------------------------------------------------------
.text:0040BEB0
.text:0040BEB0 loc_40BEB0:                             ; CODE XREF: sub_40B700+779↑j
.text:0040BEB0                 cmp     [esp+4Ch+arg_10], eax
.text:0040BEB4                 mov     edx, 1
.text:0040BEB9                 jnb     short loc_40BE7B
.text:0040BEBB
.text:0040BEBB loc_40BEBB:                             ; CODE XREF: sub_40B700+867↓j
.text:0040BEBB                 mov     ecx, [esp+4Ch+Str]
.text:0040BEBF                 lea     esi, [edx+ebp]
.text:0040BEC2                 movsx   eax, byte ptr [esi+ecx]
.text:0040BEC6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:0040BEC9                 cmp     eax, 21h
.text:0040BECC                 ja      def_40BED2      ; jumptable 0040BED2 default case, cases 93,95,97-123
.text:0040BED2                 jmp     ds:jpt_40BED2[eax*4] ; switch jump
.text:0040BED2 ; ---------------------------------------------------------------------------
.text:0040BED9                 align 4
.text:0040BEDC jpt_40BED2      dd offset loc_40BB0B    ; DATA XREF: sub_40B700+7D2↑r
.text:0040BEDC                 dd offset loc_40BB0B    ; jump table for switch statement
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset loc_40BB0B
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset loc_40BB0B
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset def_40BED2
.text:0040BEDC                 dd offset loc_40BB0B
.text:0040BF64 ; ---------------------------------------------------------------------------
.text:0040BF64
.text:0040BF64 def_40BED2:                             ; CODE XREF: sub_40B700+7CC↑j
.text:0040BF64                                         ; sub_40B700+7D2↑j
.text:0040BF64                                         ; DATA XREF: ...
.text:0040BF64                 inc     edx             ; jumptable 0040BED2 default case, cases 93,95,97-123
.text:0040BF65                 cmp     edx, edi
.text:0040BF67                 jb      loc_40BEBB
.text:0040BF6D                 jmp     loc_40BE7B
.text:0040BF72 ; ---------------------------------------------------------------------------
.text:0040BF72
.text:0040BF72 loc_40BF72:                             ; CODE XREF: sub_40B700+76E↑j
.text:0040BF72                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040BF76                 mov     [esp+4Ch+var_29], 0
.text:0040BF7B                 jnb     loc_40BEA0
.text:0040BF81                 mov     eax, [esp+4Ch+var_30]
.text:0040BF85                 cmp     byte ptr [eax], 0
.text:0040BF88                 jz      loc_40BEA0
.text:0040BF8E
.text:0040BF8E loc_40BF8E:                             ; CODE XREF: sub_40B700+8AB↓j
.text:0040BF8E                 inc     [esp+4Ch+var_28]
.text:0040BF92                 mov     esi, [esp+4Ch+var_28]
.text:0040BF96                 lea     eax, [esi+ebp]
.text:0040BF99                 cmp     eax, [esp+4Ch+arg_C]
.text:0040BF9D                 jnb     loc_40BEA0
.text:0040BFA3                 mov     edi, [esp+4Ch+Str]
.text:0040BFA7                 cmp     byte ptr [eax+edi], 0
.text:0040BFAB                 jnz     short loc_40BF8E
.text:0040BFAD                 jmp     loc_40BEA0
.text:0040BFB2 ; ---------------------------------------------------------------------------
.text:0040BFB2
.text:0040BFB2 loc_40BFB2:                             ; CODE XREF: sub_40B700+765↑j
.text:0040BFB2                 mov     [esp+4Ch+var_29], 0
.text:0040BFB7                 jmp     loc_40BEA0
.text:0040BFBC ; ---------------------------------------------------------------------------
.text:0040BFBC
.text:0040BFBC loc_40BFBC:                             ; CODE XREF: sub_40B700+72A↑j
.text:0040BFBC                 mov     edx, [esp+4Ch+Str]
.text:0040BFC0                 mov     [esp+4Ch+C], edx ; Str
.text:0040BFC3                 call    strlen
.text:0040BFC8                 mov     [esp+4Ch+arg_C], eax
.text:0040BFCC                 jmp     loc_40BE30
.text:0040BFD1 ; ---------------------------------------------------------------------------
.text:0040BFD1
.text:0040BFD1 loc_40BFD1:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BFD1                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BFD1                 mov     dl, bl          ; jumptable 0040B805 case 92
.text:0040BFD3                 jmp     loc_40BB04
.text:0040BFD8 ; ---------------------------------------------------------------------------
.text:0040BFD8
.text:0040BFD8 loc_40BFD8:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BFD8                                         ; sub_40B700+902↓j
.text:0040BFD8                                         ; DATA XREF: ...
.text:0040BFD8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040B805 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040BFDD                 jnz     def_40BC02      ; jumptable 0040B805 cases 37,43-58,65-90,93,95,97-122
.text:0040BFDD                                         ; jumptable 0040BC02 default case, cases 34-38,42-44,46,48-59
.text:0040BFE3                 jmp     loc_40BB0B      ; jumptable 0040BED2 cases 91,92,94,96,124
.text:0040BFE8 ; ---------------------------------------------------------------------------
.text:0040BFE8
.text:0040BFE8 loc_40BFE8:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BFE8                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BFE8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 0040B805 cases 123,125
.text:0040BFED                 jz      short loc_40C004
.text:0040BFEF                 cmp     [esp+4Ch+arg_C], 1
.text:0040BFF4
.text:0040BFF4 loc_40BFF4:                             ; CODE XREF: sub_40B700+90C↓j
.text:0040BFF4                 jnz     def_40BC02      ; jumptable 0040B805 cases 37,43-58,65-90,93,95,97-122
.text:0040BFF4                                         ; jumptable 0040BC02 default case, cases 34-38,42-44,46,48-59
.text:0040BFFA
.text:0040BFFA loc_40BFFA:                             ; CODE XREF: sub_40B700+105↑j
.text:0040BFFA                                         ; DATA XREF: sub_40B700:jpt_40B805↑o
.text:0040BFFA                 test    ebp, ebp        ; jumptable 0040B805 cases 35,126
.text:0040BFFC                 jnz     def_40BC02      ; jumptable 0040B805 cases 37,43-58,65-90,93,95,97-122
.text:0040BFFC                                         ; jumptable 0040BC02 default case, cases 34-38,42-44,46,48-59
.text:0040C002                 jmp     short loc_40BFD8 ; jumptable 0040B805 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040C004 ; ---------------------------------------------------------------------------
.text:0040C004
.text:0040C004 loc_40C004:                             ; CODE XREF: sub_40B700+8ED↑j
.text:0040C004                 mov     esi, [esp+4Ch+Str]
.text:0040C008                 cmp     byte ptr [esi+1], 0
.text:0040C00C                 jmp     short loc_40BFF4
.text:0040C00E ; ---------------------------------------------------------------------------
.text:0040C00E
.text:0040C00E loc_40C00E:                             ; CODE XREF: sub_40B700:loc_40B79F↑j
.text:0040C00E                 test    ebp, ebp
.text:0040C010                 jnz     short loc_40C01D
.text:0040C012                 cmp     [esp+4Ch+arg_10], 1
.text:0040C017                 jz      loc_40BB0B      ; jumptable 0040BED2 cases 91,92,94,96,124
.text:0040C01D
.text:0040C01D loc_40C01D:                             ; CODE XREF: sub_40B700+910↑j
.text:0040C01D                 mov     esi, [esp+4Ch+var_1C]
.text:0040C021                 test    esi, esi
.text:0040C023                 jz      short loc_40C058
.text:0040C025                 mov     edi, [esp+4Ch+var_1C]
.text:0040C029                 movzx   eax, byte ptr [edi]
.text:0040C02C                 test    al, al
.text:0040C02E                 jz      short loc_40C058
.text:0040C030
.text:0040C030 loc_40C030:                             ; CODE XREF: sub_40B700+956↓j
.text:0040C030                 mov     ebp, [esp+4Ch+arg_4]
.text:0040C034                 cmp     [esp+4Ch+var_34], ebp
.text:0040C038                 jnb     short loc_40C045
.text:0040C03A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040C03E                 mov     ebx, [esp+4Ch+var_34]
.text:0040C042                 mov     [ebx+ecx], al
.text:0040C045
.text:0040C045 loc_40C045:                             ; CODE XREF: sub_40B700+938↑j
.text:0040C045                 inc     [esp+4Ch+var_1C]
.text:0040C049                 inc     [esp+4Ch+var_34]
.text:0040C04D                 mov     edx, [esp+4Ch+var_1C]
.text:0040C051                 movzx   eax, byte ptr [edx]
.text:0040C054                 test    al, al
.text:0040C056                 jnz     short loc_40C030
.text:0040C058
.text:0040C058 loc_40C058:                             ; CODE XREF: sub_40B700+923↑j
.text:0040C058                                         ; sub_40B700+92E↑j
.text:0040C058                 mov     eax, [esp+4Ch+arg_4]
.text:0040C05C                 cmp     [esp+4Ch+var_34], eax
.text:0040C060                 jnb     short loc_40C06E
.text:0040C062                 mov     edi, [esp+4Ch+arg_0]
.text:0040C066                 mov     esi, [esp+4Ch+var_34]
.text:0040C06A                 mov     byte ptr [esi+edi], 0
.text:0040C06E
.text:0040C06E loc_40C06E:                             ; CODE XREF: sub_40B700+960↑j
.text:0040C06E                 mov     eax, [esp+4Ch+var_34]
.text:0040C072                 jmp     loc_40BB3F
.text:0040C077 ; ---------------------------------------------------------------------------
.text:0040C077
.text:0040C077 loc_40C077:                             ; CODE XREF: sub_40B700+95↑j
.text:0040C077                 mov     ebx, [esp+4Ch+Str]
.text:0040C07B                 cmp     byte ptr [ebp+ebx+0], 0
.text:0040C080                 jmp     loc_40B79F
.text:0040C085 ; ---------------------------------------------------------------------------
.text:0040C085
.text:0040C085 loc_40C085:                             ; CODE XREF: sub_40B700+3D↑j
.text:0040C085                                         ; DATA XREF: sub_40B700:jpt_40B73D↑o
.text:0040C085                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040B73D case 2
.text:0040C089                 cmp     [esp+4Ch+var_34], edx
.text:0040C08D                 jnb     short loc_40C096
.text:0040C08F                 mov     ecx, [esp+4Ch+arg_0]
.text:0040C093                 mov     byte ptr [ecx], 27h ; '''
.text:0040C096
.text:0040C096 loc_40C096:                             ; CODE XREF: sub_40B700+98D↑j
.text:0040C096                 mov     [esp+4Ch+var_34], 1
.text:0040C09E                 mov     [esp+4Ch+var_1C], 40B6EEh
.text:0040C0A6                 jmp     loc_40B786
.text:0040C0AB ; ---------------------------------------------------------------------------
.text:0040C0AB
.text:0040C0AB loc_40C0AB:                             ; CODE XREF: sub_40B700+3D↑j
.text:0040C0AB                                         ; DATA XREF: sub_40B700:jpt_40B73D↑o
.text:0040C0AB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040B73D case 4
.text:0040C0B0                 jmp     def_40B73D      ; jumptable 0040B73D default case, cases 0,1
.text:0040C0B5 ; ---------------------------------------------------------------------------
.text:0040C0B5
.text:0040C0B5 loc_40C0B5:                             ; CODE XREF: sub_40B700+3D↑j
.text:0040C0B5                                         ; DATA XREF: sub_40B700:jpt_40B73D↑o
.text:0040C0B5                 mov     [esp+4Ch+C], 40B6F0h ; jumptable 0040B73D cases 5,6
.text:0040C0BC                 call    ds:libintl_gettext
.text:0040C0C2                 cmp     eax, 40B6F0h
.text:0040C0C7                 mov     edi, eax
.text:0040C0C9                 jz      short loc_40C140
.text:0040C0CB
.text:0040C0CB loc_40C0CB:                             ; CODE XREF: sub_40B700+A45↓j
.text:0040C0CB                                         ; sub_40B700+A4C↓j
.text:0040C0CB                 mov     [esp+4Ch+C], 40B6EEh
.text:0040C0D2                 call    ds:libintl_gettext
.text:0040C0D8                 cmp     eax, 40B6EEh
.text:0040C0DD                 mov     edx, eax
.text:0040C0DF                 jz      short loc_40C132
.text:0040C0E1
.text:0040C0E1 loc_40C0E1:                             ; CODE XREF: sub_40B700+A37↓j
.text:0040C0E1                                         ; sub_40B700+A3E↓j
.text:0040C0E1                 mov     [esp+4Ch+var_1C], edi
.text:0040C0E5                 cmp     byte ptr [edi], 0
.text:0040C0E8                 jz      short loc_40C118
.text:0040C0EA
.text:0040C0EA loc_40C0EA:                             ; CODE XREF: sub_40B700+A16↓j
.text:0040C0EA                 mov     ecx, [esp+4Ch+arg_4]
.text:0040C0EE                 cmp     [esp+4Ch+var_34], ecx
.text:0040C0F2                 jnb     short loc_40C107
.text:0040C0F4                 mov     ebp, [esp+4Ch+var_1C]
.text:0040C0F8                 mov     edi, [esp+4Ch+arg_0]
.text:0040C0FC                 mov     esi, [esp+4Ch+var_34]
.text:0040C100                 movzx   ebx, byte ptr [ebp+0]
.text:0040C104                 mov     [esi+edi], bl
.text:0040C107
.text:0040C107 loc_40C107:                             ; CODE XREF: sub_40B700+9F2↑j
.text:0040C107                 inc     [esp+4Ch+var_1C]
.text:0040C10B                 inc     [esp+4Ch+var_34]
.text:0040C10F                 mov     eax, [esp+4Ch+var_1C]
.text:0040C113                 cmp     byte ptr [eax], 0
.text:0040C116                 jnz     short loc_40C0EA
.text:0040C118
.text:0040C118 loc_40C118:                             ; CODE XREF: sub_40B700+9E8↑j
.text:0040C118                 mov     [esp+4Ch+var_21], 1
.text:0040C11D                 mov     [esp+4Ch+var_1C], edx
.text:0040C121                 mov     [esp+4Ch+C], edx ; Str
.text:0040C124                 call    strlen
.text:0040C129                 mov     [esp+4Ch+var_20], eax
.text:0040C12D                 jmp     def_40B73D      ; jumptable 0040B73D default case, cases 0,1
.text:0040C132 ; ---------------------------------------------------------------------------
.text:0040C132
.text:0040C132 loc_40C132:                             ; CODE XREF: sub_40B700+9DF↑j
.text:0040C132                 cmp     [esp+4Ch+arg_10], 6
.text:0040C137                 jnz     short loc_40C0E1
.text:0040C139                 mov     edx, offset asc_40B6EC ; "\"'`"
.text:0040C13E                 jmp     short loc_40C0E1
.text:0040C140 ; ---------------------------------------------------------------------------
.text:0040C140
.text:0040C140 loc_40C140:                             ; CODE XREF: sub_40B700+9C9↑j
.text:0040C140                 cmp     [esp+4Ch+arg_10], 6
.text:0040C145                 jnz     short loc_40C0CB
.text:0040C147                 mov     edi, offset asc_40B6EC ; "\"'`"
.text:0040C14C                 jmp     loc_40C0CB
.text:0040C14C sub_40B700      endp
.text:0040C14C
.text:0040C151 ; ---------------------------------------------------------------------------
.text:0040C151                 jmp     short loc_40C160
.text:0040C151 ; ---------------------------------------------------------------------------
.text:0040C153                 align 10h
.text:0040C160
.text:0040C160 loc_40C160:                             ; CODE XREF: .text:0040C151↑j
.text:0040C160                 sub     esp, 0Ch
.text:0040C163                 mov     [esp+4], ebx
.text:0040C167                 mov     [esp+8], esi
.text:0040C16B                 call    _errno
.text:0040C170                 mov     esi, [eax]
.text:0040C172                 mov     dword ptr [esp], 24h ; '$'
.text:0040C179                 call    sub_40A180
.text:0040C17E                 mov     edx, [esp+10h]
.text:0040C182                 mov     ebx, eax
.text:0040C184                 test    edx, edx
.text:0040C186                 jz      short loc_40C1D1
.text:0040C188
.text:0040C188 loc_40C188:                             ; CODE XREF: .text:0040C1D6↓j
.text:0040C188                 mov     ecx, [edx]
.text:0040C18A                 mov     [ebx], ecx
.text:0040C18C                 mov     ecx, [edx+4]
.text:0040C18F                 mov     [ebx+4], ecx
.text:0040C192                 mov     ecx, [edx+8]
.text:0040C195                 mov     [ebx+8], ecx
.text:0040C198                 mov     ecx, [edx+0Ch]
.text:0040C19B                 mov     [ebx+0Ch], ecx
.text:0040C19E                 mov     ecx, [edx+10h]
.text:0040C1A1                 mov     [ebx+10h], ecx
.text:0040C1A4                 mov     ecx, [edx+14h]
.text:0040C1A7                 mov     [ebx+14h], ecx
.text:0040C1AA                 mov     ecx, [edx+18h]
.text:0040C1AD                 mov     [ebx+18h], ecx
.text:0040C1B0                 mov     ecx, [edx+1Ch]
.text:0040C1B3                 mov     [ebx+1Ch], ecx
.text:0040C1B6                 mov     ecx, [edx+20h]
.text:0040C1B9                 mov     [ebx+20h], ecx
.text:0040C1BC                 call    _errno
.text:0040C1C1                 mov     [eax], esi
.text:0040C1C3                 mov     esi, [esp+8]
.text:0040C1C7                 mov     eax, ebx
.text:0040C1C9                 mov     ebx, [esp+4]
.text:0040C1CD                 add     esp, 0Ch
.text:0040C1D0                 retn
.text:0040C1D1 ; ---------------------------------------------------------------------------
.text:0040C1D1
.text:0040C1D1 loc_40C1D1:                             ; CODE XREF: .text:0040C186↑j
.text:0040C1D1                 mov     edx, offset dword_418640
.text:0040C1D6                 jmp     short loc_40C188
.text:0040C1D6 ; ---------------------------------------------------------------------------
.text:0040C1D8                 align 10h
.text:0040C1E0                 mov     eax, [esp+4]
.text:0040C1E4                 test    eax, eax
.text:0040C1E6                 jz      short loc_40C1F0
.text:0040C1E8
.text:0040C1E8 loc_40C1E8:                             ; CODE XREF: .text:0040C1F5↓j
.text:0040C1E8                 mov     eax, [eax]
.text:0040C1EA                 retn
.text:0040C1EA ; ---------------------------------------------------------------------------
.text:0040C1EB                 align 10h
.text:0040C1F0
.text:0040C1F0 loc_40C1F0:                             ; CODE XREF: .text:0040C1E6↑j
.text:0040C1F0                 mov     eax, offset dword_418640
.text:0040C1F5                 jmp     short loc_40C1E8
.text:0040C1F5 ; ---------------------------------------------------------------------------
.text:0040C1F7                 align 10h
.text:0040C200                 mov     edx, [esp+4]
.text:0040C204                 test    edx, edx
.text:0040C206                 jz      short loc_40C210
.text:0040C208
.text:0040C208 loc_40C208:                             ; CODE XREF: .text:0040C215↓j
.text:0040C208                 mov     ecx, [esp+8]
.text:0040C20C                 mov     [edx], ecx
.text:0040C20E                 retn
.text:0040C20E ; ---------------------------------------------------------------------------
.text:0040C20F                 align 10h
.text:0040C210
.text:0040C210 loc_40C210:                             ; CODE XREF: .text:0040C206↑j
.text:0040C210                 mov     edx, offset dword_418640
.text:0040C215                 jmp     short loc_40C208
.text:0040C215 ; ---------------------------------------------------------------------------
.text:0040C217                 align 10h
.text:0040C220                 sub     esp, 8
.text:0040C223                 mov     eax, [esp+0Ch]
.text:0040C227                 movzx   ecx, byte ptr [esp+10h]
.text:0040C22C                 mov     [esp], ebx
.text:0040C22F                 mov     ebx, [esp+14h]
.text:0040C233                 mov     [esp+4], esi
.text:0040C237                 mov     dl, cl
.text:0040C239                 shr     dl, 5
.text:0040C23C                 movzx   edx, dl
.text:0040C23F                 shl     edx, 2
.text:0040C242                 test    eax, eax
.text:0040C244                 lea     esi, [edx+eax+4]
.text:0040C248                 jz      short loc_40C270
.text:0040C24A
.text:0040C24A loc_40C24A:                             ; CODE XREF: .text:0040C276↓j
.text:0040C24A                 mov     edx, [esi]
.text:0040C24C                 and     ecx, 1Fh
.text:0040C24F                 and     ebx, 1
.text:0040C252                 mov     eax, edx
.text:0040C254                 shr     eax, cl
.text:0040C256                 and     eax, 1
.text:0040C259                 xor     ebx, eax
.text:0040C25B                 shl     ebx, cl
.text:0040C25D                 xor     edx, ebx
.text:0040C25F                 mov     [esi], edx
.text:0040C261                 mov     ebx, [esp]
.text:0040C264                 mov     esi, [esp+4]
.text:0040C268                 add     esp, 8
.text:0040C26B                 retn
.text:0040C26B ; ---------------------------------------------------------------------------
.text:0040C26C                 align 10h
.text:0040C270
.text:0040C270 loc_40C270:                             ; CODE XREF: .text:0040C248↑j
.text:0040C270                 lea     esi, dword_418644[edx]
.text:0040C276                 jmp     short loc_40C24A
.text:0040C276 ; ---------------------------------------------------------------------------
.text:0040C278                 align 10h
.text:0040C280                 sub     esp, 2Ch
.text:0040C283                 mov     [esp+24h], ebx
.text:0040C287                 mov     ebx, [esp+40h]
.text:0040C28B                 mov     [esp+28h], esi
.text:0040C28F                 test    ebx, ebx
.text:0040C291                 jz      short loc_40C2E0
.text:0040C293
.text:0040C293 loc_40C293:                             ; CODE XREF: .text:0040C2E5↓j
.text:0040C293                 call    _errno
.text:0040C298                 mov     esi, [eax]
.text:0040C29A                 mov     [esp+14h], ebx
.text:0040C29E                 mov     edx, [ebx]
.text:0040C2A0                 mov     ecx, [esp+38h]
.text:0040C2A4                 mov     ebx, [esp+3Ch]
.text:0040C2A8                 mov     [esp+10h], edx
.text:0040C2AC                 mov     edx, [esp+34h]
.text:0040C2B0                 mov     [esp+0Ch], ebx
.text:0040C2B4                 mov     [esp+8], ecx
.text:0040C2B8                 mov     [esp+4], edx
.text:0040C2BC                 mov     edx, [esp+30h]
.text:0040C2C0                 mov     [esp], edx
.text:0040C2C3                 call    sub_40B700
.text:0040C2C8                 mov     ebx, eax
.text:0040C2CA                 call    _errno
.text:0040C2CF                 mov     [eax], esi
.text:0040C2D1                 mov     esi, [esp+28h]
.text:0040C2D5                 mov     eax, ebx
.text:0040C2D7                 mov     ebx, [esp+24h]
.text:0040C2DB                 add     esp, 2Ch
.text:0040C2DE                 retn
.text:0040C2DE ; ---------------------------------------------------------------------------
.text:0040C2DF                 align 10h
.text:0040C2E0
.text:0040C2E0 loc_40C2E0:                             ; CODE XREF: .text:0040C291↑j
.text:0040C2E0                 mov     ebx, offset dword_418640
.text:0040C2E5                 jmp     short loc_40C293
.text:0040C2E5 ; ---------------------------------------------------------------------------
.text:0040C2E7                 align 10h
.text:0040C2F0                 push    ebp
.text:0040C2F1                 push    edi
.text:0040C2F2                 push    esi
.text:0040C2F3                 push    ebx
.text:0040C2F4                 sub     esp, 2Ch
.text:0040C2F7                 mov     ebp, [esp+48h]
.text:0040C2FB                 call    _errno
.text:0040C300                 mov     edx, [eax]
.text:0040C302                 test    ebp, ebp
.text:0040C304                 mov     ebx, ebp
.text:0040C306                 mov     [esp+28h], edx
.text:0040C30A                 jz      loc_40C3C0
.text:0040C310
.text:0040C310 loc_40C310:                             ; CODE XREF: .text:0040C3C5↓j
.text:0040C310                 call    _errno
.text:0040C315                 mov     edi, [eax]
.text:0040C317                 mov     esi, ebp
.text:0040C319                 mov     [esp+14h], ebx
.text:0040C31D                 mov     ecx, [ebx]
.text:0040C31F                 mov     dword ptr [esp], 0
.text:0040C326                 mov     edx, [esp+44h]
.text:0040C32A                 mov     dword ptr [esp+4], 0
.text:0040C332                 mov     eax, [esp+40h]
.text:0040C336                 mov     [esp+10h], ecx
.text:0040C33A                 mov     [esp+0Ch], edx
.text:0040C33E                 mov     [esp+8], eax
.text:0040C342                 call    sub_40B700
.text:0040C347                 mov     ebx, eax
.text:0040C349                 call    _errno
.text:0040C34E                 mov     [eax], edi
.text:0040C350                 lea     edi, [ebx+1]
.text:0040C353                 mov     [esp], edi
.text:0040C356                 call    sub_40A180
.text:0040C35B                 mov     [esp+24h], eax
.text:0040C35F                 test    ebp, ebp
.text:0040C361                 jz      short loc_40C3B2
.text:0040C363
.text:0040C363 loc_40C363:                             ; CODE XREF: .text:0040C3B7↓j
.text:0040C363                 call    _errno
.text:0040C368                 mov     ebp, [eax]
.text:0040C36A                 mov     [esp+14h], esi
.text:0040C36E                 mov     ecx, [esi]
.text:0040C370                 mov     [esp+4], edi
.text:0040C374                 mov     edx, [esp+44h]
.text:0040C378                 mov     esi, [esp+24h]
.text:0040C37C                 mov     [esp+10h], ecx
.text:0040C380                 mov     eax, [esp+40h]
.text:0040C384                 mov     [esp+0Ch], edx
.text:0040C388                 mov     [esp], esi
.text:0040C38B                 mov     [esp+8], eax
.text:0040C38F                 call    sub_40B700
.text:0040C394                 call    _errno
.text:0040C399                 mov     [eax], ebp
.text:0040C39B                 call    _errno
.text:0040C3A0                 mov     ebx, [esp+28h]
.text:0040C3A4                 mov     [eax], ebx
.text:0040C3A6                 mov     eax, [esp+24h]
.text:0040C3AA                 add     esp, 2Ch
.text:0040C3AD                 pop     ebx
.text:0040C3AE                 pop     esi
.text:0040C3AF                 pop     edi
.text:0040C3B0                 pop     ebp
.text:0040C3B1                 retn
.text:0040C3B2 ; ---------------------------------------------------------------------------
.text:0040C3B2
.text:0040C3B2 loc_40C3B2:                             ; CODE XREF: .text:0040C361↑j
.text:0040C3B2                 mov     esi, offset dword_418640
.text:0040C3B7                 jmp     short loc_40C363
.text:0040C3B7 ; ---------------------------------------------------------------------------
.text:0040C3B9                 align 10h
.text:0040C3C0
.text:0040C3C0 loc_40C3C0:                             ; CODE XREF: .text:0040C30A↑j
.text:0040C3C0                 mov     ebx, offset dword_418640
.text:0040C3C5                 jmp     loc_40C310
.text:0040C3C5 ; ---------------------------------------------------------------------------
.text:0040C3CA                 align 10h
.text:0040C3D0                 sub     esp, 1Ch
.text:0040C3D3                 mov     edx, [esp+24h]
.text:0040C3D7                 mov     dword ptr [esp+0Ch], offset dword_418640
.text:0040C3DF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040C3E7                 mov     [esp+4], edx
.text:0040C3EB                 mov     edx, [esp+20h]
.text:0040C3EF                 mov     [esp], edx
.text:0040C3F2                 call    sub_40C840
.text:0040C3F7                 add     esp, 1Ch
.text:0040C3FA                 retn
.text:0040C3FA ; ---------------------------------------------------------------------------
.text:0040C3FB                 align 10h
.text:0040C400                 sub     esp, 1Ch
.text:0040C403                 mov     edx, [esp+20h]
.text:0040C407                 mov     dword ptr [esp+0Ch], offset dword_418640
.text:0040C40F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040C417                 mov     [esp+4], edx
.text:0040C41B                 mov     dword ptr [esp], 0
.text:0040C422                 call    sub_40C840
.text:0040C427                 add     esp, 1Ch
.text:0040C42A                 retn
.text:0040C42A ; ---------------------------------------------------------------------------
.text:0040C42B                 align 10h
.text:0040C430
.text:0040C430 ; =============== S U B R O U T I N E =======================================
.text:0040C430
.text:0040C430
.text:0040C430 ; int __cdecl sub_40C430(int, int, char *)
.text:0040C430 sub_40C430      proc near               ; CODE XREF: .text:004098BA↑p
.text:0040C430                                         ; sub_4098D0+1A↑p
.text:0040C430
.text:0040C430 var_BC          = dword ptr -0BCh
.text:0040C430 var_B8          = dword ptr -0B8h
.text:0040C430 var_B4          = dword ptr -0B4h
.text:0040C430 var_B0          = dword ptr -0B0h
.text:0040C430 var_AC          = dword ptr -0ACh
.text:0040C430 var_A8          = dword ptr -0A8h
.text:0040C430 var_A4          = dword ptr -0A4h
.text:0040C430 var_A0          = dword ptr -0A0h
.text:0040C430 var_9C          = dword ptr -9Ch
.text:0040C430 var_98          = dword ptr -98h
.text:0040C430 var_94          = dword ptr -94h
.text:0040C430 var_90          = dword ptr -90h
.text:0040C430 var_8C          = dword ptr -8Ch
.text:0040C430 var_7C          = dword ptr -7Ch
.text:0040C430 var_78          = dword ptr -78h
.text:0040C430 var_74          = dword ptr -74h
.text:0040C430 var_70          = dword ptr -70h
.text:0040C430 var_6C          = dword ptr -6Ch
.text:0040C430 var_68          = dword ptr -68h
.text:0040C430 var_64          = dword ptr -64h
.text:0040C430 var_60          = dword ptr -60h
.text:0040C430 var_5C          = dword ptr -5Ch
.text:0040C430 var_4C          = dword ptr -4Ch
.text:0040C430 var_48          = dword ptr -48h
.text:0040C430 var_44          = dword ptr -44h
.text:0040C430 var_40          = dword ptr -40h
.text:0040C430 var_3C          = dword ptr -3Ch
.text:0040C430 var_38          = dword ptr -38h
.text:0040C430 var_34          = dword ptr -34h
.text:0040C430 var_30          = dword ptr -30h
.text:0040C430 var_2C          = dword ptr -2Ch
.text:0040C430 arg_0           = dword ptr  4
.text:0040C430 arg_4           = dword ptr  8
.text:0040C430 arg_8           = dword ptr  0Ch
.text:0040C430
.text:0040C430                 push    ebp
.text:0040C431                 xor     eax, eax
.text:0040C433                 mov     ecx, 8
.text:0040C438                 push    edi
.text:0040C439                 push    esi
.text:0040C43A                 push    ebx
.text:0040C43B                 sub     esp, 0ACh
.text:0040C441                 mov     ebp, [esp+0BCh+arg_4]
.text:0040C448                 cld
.text:0040C449                 lea     edi, [esp+0BCh+var_A8]
.text:0040C44D                 mov     [esp+0BCh+var_AC], ebp
.text:0040C451                 rep stosd
.text:0040C453                 mov     eax, [esp+0BCh+var_8C]
.text:0040C457                 mov     edi, [esp+0BCh+var_AC]
.text:0040C45B                 mov     esi, [esp+0BCh+var_A8]
.text:0040C45F                 mov     [esp+0BCh+var_5C], eax
.text:0040C463                 mov     ebp, [esp+0BCh+var_A4]
.text:0040C467                 mov     eax, [esp+0BCh+var_AC]
.text:0040C46B                 mov     [esp+0BCh+var_7C], edi
.text:0040C46F                 mov     ecx, [esp+0BCh+var_94]
.text:0040C473                 mov     edi, [esp+0BCh+var_A0]
.text:0040C477                 mov     [esp+0BCh+var_78], esi
.text:0040C47B                 mov     edx, [esp+0BCh+var_90]
.text:0040C47F                 mov     esi, [esp+0BCh+var_9C]
.text:0040C483                 mov     [esp+0BCh+var_4C], eax
.text:0040C487                 mov     ebx, [esp+0BCh+var_98]
.text:0040C48B                 mov     eax, [esp+0BCh+var_A8]
.text:0040C48F                 mov     [esp+0BCh+var_74], ebp
.text:0040C493                 mov     [esp+0BCh+var_70], edi
.text:0040C497                 mov     [esp+0BCh+var_6C], esi
.text:0040C49B                 mov     [esp+0BCh+var_68], ebx
.text:0040C49F                 mov     [esp+0BCh+var_64], ecx
.text:0040C4A3                 mov     [esp+0BCh+var_60], edx
.text:0040C4A7                 mov     [esp+0BCh+var_48], eax
.text:0040C4AB                 mov     [esp+0BCh+var_44], ebp
.text:0040C4AF                 mov     [esp+0BCh+var_40], edi
.text:0040C4B3                 mov     [esp+0BCh+var_3C], esi
.text:0040C4BA                 mov     [esp+0BCh+var_38], ebx
.text:0040C4C1                 mov     ebx, [esp+0BCh+var_8C]
.text:0040C4C5                 mov     [esp+0BCh+var_30], edx
.text:0040C4CC                 mov     edx, [esp+0BCh+arg_8]
.text:0040C4D3                 mov     [esp+0BCh+var_34], ecx
.text:0040C4DA                 lea     ecx, [esp+0BCh+var_4C]
.text:0040C4DE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:0040C4E2                 mov     edx, [esp+0BCh+arg_0]
.text:0040C4E9                 mov     [esp+0BCh+var_2C], ebx
.text:0040C4F0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:0040C4F4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040C4FC                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040C4FF                 call    sub_40C840
.text:0040C504                 add     esp, 0ACh
.text:0040C50A                 pop     ebx
.text:0040C50B                 pop     esi
.text:0040C50C                 pop     edi
.text:0040C50D                 pop     ebp
.text:0040C50E                 retn
.text:0040C50E sub_40C430      endp
.text:0040C50E
.text:0040C50E ; ---------------------------------------------------------------------------
.text:0040C50F                 align 10h
.text:0040C510
.text:0040C510 ; =============== S U B R O U T I N E =======================================
.text:0040C510
.text:0040C510
.text:0040C510 ; int __cdecl sub_40C510(int, int, char *, int)
.text:0040C510 sub_40C510      proc near               ; CODE XREF: sub_40A510+BD↑p
.text:0040C510                                         ; sub_40A510+E3↑p
.text:0040C510
.text:0040C510 var_BC          = dword ptr -0BCh
.text:0040C510 var_B8          = dword ptr -0B8h
.text:0040C510 var_B4          = dword ptr -0B4h
.text:0040C510 var_B0          = dword ptr -0B0h
.text:0040C510 var_AC          = dword ptr -0ACh
.text:0040C510 var_A8          = dword ptr -0A8h
.text:0040C510 var_A4          = dword ptr -0A4h
.text:0040C510 var_A0          = dword ptr -0A0h
.text:0040C510 var_9C          = dword ptr -9Ch
.text:0040C510 var_98          = dword ptr -98h
.text:0040C510 var_94          = dword ptr -94h
.text:0040C510 var_90          = dword ptr -90h
.text:0040C510 var_8C          = dword ptr -8Ch
.text:0040C510 var_7C          = dword ptr -7Ch
.text:0040C510 var_78          = dword ptr -78h
.text:0040C510 var_74          = dword ptr -74h
.text:0040C510 var_70          = dword ptr -70h
.text:0040C510 var_6C          = dword ptr -6Ch
.text:0040C510 var_68          = dword ptr -68h
.text:0040C510 var_64          = dword ptr -64h
.text:0040C510 var_60          = dword ptr -60h
.text:0040C510 var_5C          = dword ptr -5Ch
.text:0040C510 var_4C          = dword ptr -4Ch
.text:0040C510 var_48          = dword ptr -48h
.text:0040C510 var_44          = dword ptr -44h
.text:0040C510 var_40          = dword ptr -40h
.text:0040C510 var_3C          = dword ptr -3Ch
.text:0040C510 var_38          = dword ptr -38h
.text:0040C510 var_34          = dword ptr -34h
.text:0040C510 var_30          = dword ptr -30h
.text:0040C510 var_2C          = dword ptr -2Ch
.text:0040C510 arg_0           = dword ptr  4
.text:0040C510 arg_4           = dword ptr  8
.text:0040C510 arg_8           = dword ptr  0Ch
.text:0040C510 arg_C           = dword ptr  10h
.text:0040C510
.text:0040C510                 push    ebp
.text:0040C511                 xor     eax, eax
.text:0040C513                 mov     ecx, 8
.text:0040C518                 push    edi
.text:0040C519                 push    esi
.text:0040C51A                 push    ebx
.text:0040C51B                 sub     esp, 0ACh
.text:0040C521                 mov     edx, [esp+0BCh+arg_4]
.text:0040C528                 cld
.text:0040C529                 lea     edi, [esp+0BCh+var_A8]
.text:0040C52D                 mov     [esp+0BCh+var_AC], edx
.text:0040C531                 rep stosd
.text:0040C533                 mov     eax, [esp+0BCh+var_8C]
.text:0040C537                 mov     ebp, [esp+0BCh+var_AC]
.text:0040C53B                 mov     edi, [esp+0BCh+var_A8]
.text:0040C53F                 mov     [esp+0BCh+var_5C], eax
.text:0040C543                 mov     esi, [esp+0BCh+var_9C]
.text:0040C547                 mov     eax, [esp+0BCh+var_AC]
.text:0040C54B                 mov     [esp+0BCh+var_7C], ebp
.text:0040C54F                 mov     ecx, [esp+0BCh+var_94]
.text:0040C553                 mov     ebp, [esp+0BCh+var_A4]
.text:0040C557                 mov     [esp+0BCh+var_78], edi
.text:0040C55B                 mov     edx, [esp+0BCh+var_90]
.text:0040C55F                 mov     edi, [esp+0BCh+var_A0]
.text:0040C563                 mov     [esp+0BCh+var_4C], eax
.text:0040C567                 mov     ebx, [esp+0BCh+var_98]
.text:0040C56B                 mov     eax, [esp+0BCh+var_A8]
.text:0040C56F                 mov     [esp+0BCh+var_74], ebp
.text:0040C573                 mov     [esp+0BCh+var_70], edi
.text:0040C577                 mov     [esp+0BCh+var_6C], esi
.text:0040C57B                 mov     [esp+0BCh+var_68], ebx
.text:0040C57F                 mov     [esp+0BCh+var_64], ecx
.text:0040C583                 mov     [esp+0BCh+var_60], edx
.text:0040C587                 mov     [esp+0BCh+var_48], eax
.text:0040C58B                 mov     [esp+0BCh+var_44], ebp
.text:0040C58F                 mov     [esp+0BCh+var_40], edi
.text:0040C593                 mov     [esp+0BCh+var_3C], esi
.text:0040C59A                 mov     [esp+0BCh+var_38], ebx
.text:0040C5A1                 mov     esi, [esp+0BCh+var_8C]
.text:0040C5A5                 lea     ebx, [esp+0BCh+var_4C]
.text:0040C5A9                 mov     [esp+0BCh+var_30], edx
.text:0040C5B0                 mov     edx, [esp+0BCh+arg_8]
.text:0040C5B7                 mov     [esp+0BCh+var_34], ecx
.text:0040C5BE                 mov     ecx, [esp+0BCh+arg_C]
.text:0040C5C5                 mov     [esp+0BCh+var_B8], edx ; char *
.text:0040C5C9                 mov     edx, [esp+0BCh+arg_0]
.text:0040C5D0                 mov     [esp+0BCh+var_2C], esi
.text:0040C5D7                 mov     [esp+0BCh+var_B0], ebx ; int
.text:0040C5DB                 mov     [esp+0BCh+var_B4], ecx ; int
.text:0040C5DF                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040C5E2                 call    sub_40C840
.text:0040C5E7                 add     esp, 0ACh
.text:0040C5ED                 pop     ebx
.text:0040C5EE                 pop     esi
.text:0040C5EF                 pop     edi
.text:0040C5F0                 pop     ebp
.text:0040C5F1                 retn
.text:0040C5F1 sub_40C510      endp
.text:0040C5F1
.text:0040C5F1 ; ---------------------------------------------------------------------------
.text:0040C5F2                 align 10h
.text:0040C600                 push    ebp
.text:0040C601                 xor     eax, eax
.text:0040C603                 mov     ecx, 8
.text:0040C608                 push    edi
.text:0040C609                 push    esi
.text:0040C60A                 push    ebx
.text:0040C60B                 sub     esp, 0ACh
.text:0040C611                 mov     edi, [esp+0C0h]
.text:0040C618                 cld
.text:0040C619                 mov     [esp+10h], edi
.text:0040C61D                 lea     edi, [esp+14h]
.text:0040C621                 rep stosd
.text:0040C623                 mov     eax, [esp+30h]
.text:0040C627                 mov     esi, [esp+10h]
.text:0040C62B                 mov     ebx, [esp+14h]
.text:0040C62F                 mov     [esp+60h], eax
.text:0040C633                 mov     ebp, [esp+18h]
.text:0040C637                 mov     eax, [esp+10h]
.text:0040C63B                 mov     [esp+40h], esi
.text:0040C63F                 mov     edi, [esp+1Ch]
.text:0040C643                 mov     esi, [esp+20h]
.text:0040C647                 mov     [esp+44h], ebx
.text:0040C64B                 mov     ecx, [esp+28h]
.text:0040C64F                 mov     edx, [esp+2Ch]
.text:0040C653                 mov     [esp+70h], eax
.text:0040C657                 mov     ebx, [esp+24h]
.text:0040C65B                 mov     eax, [esp+14h]
.text:0040C65F                 mov     [esp+48h], ebp
.text:0040C663                 mov     [esp+4Ch], edi
.text:0040C667                 mov     [esp+50h], esi
.text:0040C66B                 mov     [esp+54h], ebx
.text:0040C66F                 mov     [esp+58h], ecx
.text:0040C673                 mov     [esp+5Ch], edx
.text:0040C677                 mov     [esp+74h], eax
.text:0040C67B                 mov     [esp+78h], ebp
.text:0040C67F                 mov     [esp+7Ch], edi
.text:0040C683                 mov     [esp+80h], esi
.text:0040C68A                 mov     [esp+84h], ebx
.text:0040C691                 mov     [esp+8Ch], edx
.text:0040C698                 lea     edx, [esp+70h]
.text:0040C69C                 mov     [esp+88h], ecx
.text:0040C6A3                 mov     ecx, [esp+30h]
.text:0040C6A7                 mov     [esp+0Ch], edx
.text:0040C6AB                 mov     edx, [esp+0C4h]
.text:0040C6B2                 mov     [esp+90h], ecx
.text:0040C6B9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040C6C1                 mov     [esp+4], edx
.text:0040C6C5                 mov     dword ptr [esp], 0
.text:0040C6CC                 call    sub_40C840
.text:0040C6D1                 add     esp, 0ACh
.text:0040C6D7                 pop     ebx
.text:0040C6D8                 pop     esi
.text:0040C6D9                 pop     edi
.text:0040C6DA                 pop     ebp
.text:0040C6DB                 retn
.text:0040C6DB ; ---------------------------------------------------------------------------
.text:0040C6DC                 align 10h
.text:0040C6E0                 push    edi
.text:0040C6E1                 push    esi
.text:0040C6E2                 push    ebx
.text:0040C6E3                 sub     esp, 40h
.text:0040C6E6                 mov     edx, ds:dword_41864C
.text:0040C6EC                 mov     ebx, ds:dword_418640
.text:0040C6F2                 mov     esi, ds:dword_418648
.text:0040C6F8                 mov     edi, ds:dword_418644
.text:0040C6FE                 mov     [esp+1Ch], edx
.text:0040C702                 mov     ecx, ds:dword_418650
.text:0040C708                 mov     edx, ds:dword_418660
.text:0040C70E                 mov     [esp+10h], ebx
.text:0040C712                 mov     ebx, ds:dword_418654
.text:0040C718                 mov     [esp+30h], edx
.text:0040C71C                 movzx   edx, byte ptr [esp+54h]
.text:0040C721                 mov     [esp+18h], esi
.text:0040C725                 mov     esi, ds:dword_41865C
.text:0040C72B                 mov     [esp+14h], edi
.text:0040C72F                 mov     edi, ds:dword_418658
.text:0040C735                 mov     [esp+20h], ecx
.text:0040C739                 mov     cl, dl
.text:0040C73B                 shr     cl, 5
.text:0040C73E                 mov     [esp+24h], ebx
.text:0040C742                 movzx   ebx, cl
.text:0040C745                 mov     [esp+2Ch], esi
.text:0040C749                 lea     esi, [esp+10h]
.text:0040C74D                 mov     [esp+28h], edi
.text:0040C751                 lea     edi, [esi+ebx*4]
.text:0040C754                 mov     ebx, edx
.text:0040C756                 mov     edx, [edi+4]
.text:0040C759                 and     ebx, 1Fh
.text:0040C75C                 mov     cl, bl
.text:0040C75E                 mov     eax, edx
.text:0040C760                 shr     eax, cl
.text:0040C762                 and     eax, 1
.text:0040C765                 xor     eax, 1
.text:0040C768                 shl     eax, cl
.text:0040C76A                 xor     edx, eax
.text:0040C76C                 mov     [edi+4], edx
.text:0040C76F                 mov     edx, [esp+50h]
.text:0040C773                 mov     [esp+0Ch], esi
.text:0040C777                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040C77F                 mov     [esp+4], edx
.text:0040C783                 mov     dword ptr [esp], 0
.text:0040C78A                 call    sub_40C840
.text:0040C78F                 add     esp, 40h
.text:0040C792                 pop     ebx
.text:0040C793                 pop     esi
.text:0040C794                 pop     edi
.text:0040C795                 retn
.text:0040C795 ; ---------------------------------------------------------------------------
.text:0040C796                 align 10h
.text:0040C7A0
.text:0040C7A0 ; =============== S U B R O U T I N E =======================================
.text:0040C7A0
.text:0040C7A0
.text:0040C7A0 ; int __cdecl sub_40C7A0(char *)
.text:0040C7A0 sub_40C7A0      proc near               ; CODE XREF: sub_409FF0+64↑p
.text:0040C7A0
.text:0040C7A0 var_4C          = dword ptr -4Ch
.text:0040C7A0 var_48          = dword ptr -48h
.text:0040C7A0 var_44          = dword ptr -44h
.text:0040C7A0 var_40          = dword ptr -40h
.text:0040C7A0 var_3C          = dword ptr -3Ch
.text:0040C7A0 var_38          = dword ptr -38h
.text:0040C7A0 var_34          = dword ptr -34h
.text:0040C7A0 var_30          = dword ptr -30h
.text:0040C7A0 var_2C          = dword ptr -2Ch
.text:0040C7A0 var_28          = dword ptr -28h
.text:0040C7A0 var_24          = dword ptr -24h
.text:0040C7A0 var_20          = dword ptr -20h
.text:0040C7A0 var_1C          = dword ptr -1Ch
.text:0040C7A0 arg_0           = dword ptr  4
.text:0040C7A0
.text:0040C7A0                 sub     esp, 4Ch
.text:0040C7A3                 mov     ecx, ds:dword_418640
.text:0040C7A9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:0040C7B1                 mov     edx, ds:dword_418644
.text:0040C7B7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040C7BE                 mov     [esp+4Ch+var_3C], ecx
.text:0040C7C2                 mov     ecx, ds:dword_41864C
.text:0040C7C8                 mov     [esp+4Ch+var_38], edx
.text:0040C7CC                 mov     edx, ds:dword_418648
.text:0040C7D2                 mov     [esp+4Ch+var_30], ecx
.text:0040C7D6                 mov     ecx, ds:dword_418650
.text:0040C7DC                 mov     eax, edx
.text:0040C7DE                 shr     eax, 1Ah
.text:0040C7E1                 and     eax, 1
.text:0040C7E4                 xor     eax, 1
.text:0040C7E7                 mov     [esp+4Ch+var_2C], ecx
.text:0040C7EB                 shl     eax, 1Ah
.text:0040C7EE                 mov     ecx, ds:dword_418654
.text:0040C7F4                 xor     edx, eax
.text:0040C7F6                 mov     [esp+4Ch+var_34], edx
.text:0040C7FA                 mov     edx, [esp+4Ch+arg_0]
.text:0040C7FE                 mov     [esp+4Ch+var_28], ecx
.text:0040C802                 mov     ecx, ds:dword_418658
.text:0040C808                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040C80C                 mov     [esp+4Ch+var_24], ecx
.text:0040C810                 mov     ecx, ds:dword_41865C
.text:0040C816                 mov     [esp+4Ch+var_20], ecx
.text:0040C81A                 mov     ecx, ds:dword_418660
.text:0040C820                 mov     [esp+4Ch+var_1C], ecx
.text:0040C824                 lea     ecx, [esp+4Ch+var_3C]
.text:0040C828                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040C82C                 call    sub_40C840
.text:0040C831                 add     esp, 4Ch
.text:0040C834                 retn
.text:0040C834 sub_40C7A0      endp
.text:0040C834
.text:0040C834 ; ---------------------------------------------------------------------------
.text:0040C835                 align 10h
.text:0040C840
.text:0040C840 ; =============== S U B R O U T I N E =======================================
.text:0040C840
.text:0040C840
.text:0040C840 ; int __cdecl sub_40C840(int, char *, int, int)
.text:0040C840 sub_40C840      proc near               ; CODE XREF: .text:0040C3F2↑p
.text:0040C840                                         ; .text:0040C422↑p ...
.text:0040C840
.text:0040C840 Block           = dword ptr -2Ch
.text:0040C840 var_28          = dword ptr -28h
.text:0040C840 Str             = dword ptr -24h
.text:0040C840 var_20          = dword ptr -20h
.text:0040C840 var_1C          = dword ptr -1Ch
.text:0040C840 var_18          = dword ptr -18h
.text:0040C840 var_14          = dword ptr -14h
.text:0040C840 arg_0           = dword ptr  4
.text:0040C840 arg_4           = dword ptr  8
.text:0040C840 arg_8           = dword ptr  0Ch
.text:0040C840 arg_C           = dword ptr  10h
.text:0040C840
.text:0040C840                 push    ebp
.text:0040C841                 push    edi
.text:0040C842                 push    esi
.text:0040C843                 push    ebx
.text:0040C844                 sub     esp, 1Ch
.text:0040C847                 call    _errno
.text:0040C84C                 mov     edx, [eax]
.text:0040C84E                 mov     eax, [esp+2Ch+arg_0]
.text:0040C852                 mov     [esp+2Ch+var_14], edx
.text:0040C856                 test    eax, eax
.text:0040C858                 js      loc_40C9FA
.text:0040C85E                 mov     eax, [esp+2Ch+arg_0]
.text:0040C862                 cmp     dword_4170E0, eax
.text:0040C868                 ja      short loc_40C8E0
.text:0040C86A                 mov     esi, eax
.text:0040C86C                 inc     esi
.text:0040C86D                 cmp     esi, 1FFFFFFFh
.text:0040C873                 ja      loc_40C9FF
.text:0040C879                 mov     ebx, off_4170EC
.text:0040C87F                 cmp     ebx, offset dword_4170E4
.text:0040C885                 jz      loc_40C9D1
.text:0040C88B
.text:0040C88B loc_40C88B:                             ; CODE XREF: sub_40C840+1B5↓j
.text:0040C88B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040C88E                 lea     ecx, ds:0[esi*8]
.text:0040C895                 mov     ebp, esi
.text:0040C897                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040C89B                 call    sub_40A210
.text:0040C8A0                 mov     off_4170EC, eax
.text:0040C8A5                 mov     ebx, dword_4170E0
.text:0040C8AB                 sub     ebp, ebx
.text:0040C8AD                 lea     edi, [eax+ebx*8]
.text:0040C8B0                 lea     eax, ds:0[ebp*8]
.text:0040C8B7                 cmp     eax, 7
.text:0040C8BA                 jbe     short loc_40C8D0
.text:0040C8BC                 test    edi, 4
.text:0040C8C2                 jz      short loc_40C8D0
.text:0040C8C4                 mov     dword ptr [edi], 0
.text:0040C8CA                 sub     eax, 4
.text:0040C8CD                 add     edi, 4
.text:0040C8D0
.text:0040C8D0 loc_40C8D0:                             ; CODE XREF: sub_40C840+7A↑j
.text:0040C8D0                                         ; sub_40C840+82↑j
.text:0040C8D0                 cld
.text:0040C8D1                 mov     ecx, eax
.text:0040C8D3                 shr     ecx, 2
.text:0040C8D6                 xor     eax, eax
.text:0040C8D8                 rep stosd
.text:0040C8DA                 mov     dword_4170E0, esi
.text:0040C8E0
.text:0040C8E0 loc_40C8E0:                             ; CODE XREF: sub_40C840+28↑j
.text:0040C8E0                 mov     esi, off_4170EC
.text:0040C8E6                 mov     eax, [esp+2Ch+arg_0]
.text:0040C8EA                 mov     ebp, [esi+eax*8]
.text:0040C8ED                 mov     edi, [esi+eax*8+4]
.text:0040C8F1                 mov     esi, [esp+2Ch+arg_C]
.text:0040C8F5                 test    esi, esi
.text:0040C8F7                 jz      loc_40C9C7
.text:0040C8FD
.text:0040C8FD loc_40C8FD:                             ; CODE XREF: sub_40C840+18C↓j
.text:0040C8FD                 call    _errno
.text:0040C902                 mov     ebx, [eax]
.text:0040C904                 mov     [esp+2Ch+var_18], esi ; int
.text:0040C908                 mov     ecx, [esi]
.text:0040C90A                 mov     [esp+2Ch+Block], edi ; int
.text:0040C90D                 mov     edx, [esp+2Ch+arg_8]
.text:0040C911                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040C915                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040C919                 mov     ecx, [esp+2Ch+arg_4]
.text:0040C91D                 mov     [esp+2Ch+var_20], edx ; int
.text:0040C921                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040C925                 call    sub_40B700
.text:0040C92A                 mov     esi, eax
.text:0040C92C                 call    _errno
.text:0040C931                 mov     [eax], ebx
.text:0040C933                 cmp     ebp, esi
.text:0040C935                 ja      short loc_40C9AB
.text:0040C937                 lea     ebp, [esi+1]
.text:0040C93A                 mov     ebx, off_4170EC
.text:0040C940                 cmp     edi, offset unk_418540
.text:0040C946                 mov     esi, [esp+2Ch+arg_0]
.text:0040C94A                 mov     [ebx+esi*8], ebp
.text:0040C94D                 jz      short loc_40C95D
.text:0040C94F                 mov     [esp+2Ch+Block], edi ; Block
.text:0040C952                 call    free
.text:0040C957                 mov     ebx, off_4170EC
.text:0040C95D
.text:0040C95D loc_40C95D:                             ; CODE XREF: sub_40C840+10D↑j
.text:0040C95D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:0040C960                 call    sub_40A180
.text:0040C965                 mov     esi, [esp+2Ch+arg_C]
.text:0040C969                 mov     edi, eax
.text:0040C96B                 mov     eax, [esp+2Ch+arg_0]
.text:0040C96F                 test    esi, esi
.text:0040C971                 mov     [ebx+eax*8+4], edi
.text:0040C975                 jz      short loc_40C9C0
.text:0040C977
.text:0040C977 loc_40C977:                             ; CODE XREF: sub_40C840+185↓j
.text:0040C977                 call    _errno
.text:0040C97C                 mov     ebx, [eax]
.text:0040C97E                 mov     [esp+2Ch+var_18], esi ; int
.text:0040C982                 mov     ecx, [esi]
.text:0040C984                 mov     [esp+2Ch+Block], edi ; int
.text:0040C987                 mov     edx, [esp+2Ch+arg_8]
.text:0040C98B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040C98F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040C993                 mov     ecx, [esp+2Ch+arg_4]
.text:0040C997                 mov     [esp+2Ch+var_20], edx ; int
.text:0040C99B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040C99F                 call    sub_40B700
.text:0040C9A4                 call    _errno
.text:0040C9A9                 mov     [eax], ebx
.text:0040C9AB
.text:0040C9AB loc_40C9AB:                             ; CODE XREF: sub_40C840+F5↑j
.text:0040C9AB                 call    _errno
.text:0040C9B0                 mov     ebp, [esp+2Ch+var_14]
.text:0040C9B4                 mov     [eax], ebp
.text:0040C9B6                 add     esp, 1Ch
.text:0040C9B9                 mov     eax, edi
.text:0040C9BB                 pop     ebx
.text:0040C9BC                 pop     esi
.text:0040C9BD                 pop     edi
.text:0040C9BE                 pop     ebp
.text:0040C9BF                 retn
.text:0040C9C0 ; ---------------------------------------------------------------------------
.text:0040C9C0
.text:0040C9C0 loc_40C9C0:                             ; CODE XREF: sub_40C840+135↑j
.text:0040C9C0                 mov     esi, offset dword_418640
.text:0040C9C5                 jmp     short loc_40C977
.text:0040C9C7 ; ---------------------------------------------------------------------------
.text:0040C9C7
.text:0040C9C7 loc_40C9C7:                             ; CODE XREF: sub_40C840+B7↑j
.text:0040C9C7                 mov     esi, offset dword_418640
.text:0040C9CC                 jmp     loc_40C8FD
.text:0040C9D1 ; ---------------------------------------------------------------------------
.text:0040C9D1
.text:0040C9D1 loc_40C9D1:                             ; CODE XREF: sub_40C840+45↑j
.text:0040C9D1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:0040C9D8                 call    sub_40A180
.text:0040C9DD                 mov     off_4170EC, eax
.text:0040C9E2                 mov     edi, dword_4170E4
.text:0040C9E8                 mov     ebx, eax
.text:0040C9EA                 mov     ecx, off_4170E8
.text:0040C9F0                 mov     [eax], edi
.text:0040C9F2                 mov     [eax+4], ecx
.text:0040C9F5                 jmp     loc_40C88B
.text:0040C9FA ; ---------------------------------------------------------------------------
.text:0040C9FA
.text:0040C9FA loc_40C9FA:                             ; CODE XREF: sub_40C840+18↑j
.text:0040C9FA                 call    abort
.text:0040C9FF ; ---------------------------------------------------------------------------
.text:0040C9FF
.text:0040C9FF loc_40C9FF:                             ; CODE XREF: sub_40C840+33↑j
.text:0040C9FF                 call    sub_40A660
.text:0040C9FF sub_40C840      endp
.text:0040C9FF
.text:0040C9FF ; ---------------------------------------------------------------------------
.text:0040CA04                 align 10h
.text:0040CA10
.text:0040CA10 ; =============== S U B R O U T I N E =======================================
.text:0040CA10
.text:0040CA10
.text:0040CA10 ; int __cdecl sub_40CA10(char *Str, int, int, int)
.text:0040CA10 sub_40CA10      proc near               ; CODE XREF: sub_40A510+32↑p
.text:0040CA10
.text:0040CA10 String1         = dword ptr -2Ch
.text:0040CA10 String2         = dword ptr -28h
.text:0040CA10 var_16          = byte ptr -16h
.text:0040CA10 var_15          = byte ptr -15h
.text:0040CA10 var_14          = dword ptr -14h
.text:0040CA10 Str             = dword ptr  4
.text:0040CA10 arg_4           = dword ptr  8
.text:0040CA10 arg_8           = dword ptr  0Ch
.text:0040CA10 arg_C           = dword ptr  10h
.text:0040CA10
.text:0040CA10                 push    ebp
.text:0040CA11                 push    edi
.text:0040CA12                 push    esi
.text:0040CA13                 push    ebx
.text:0040CA14                 sub     esp, 1Ch
.text:0040CA17                 mov     ecx, [esp+2Ch+arg_4]
.text:0040CA1B                 mov     edi, [esp+2Ch+Str]
.text:0040CA1F                 mov     ebp, [esp+2Ch+arg_C]
.text:0040CA23                 mov     esi, [esp+2Ch+arg_8]
.text:0040CA27                 movzx   edx, byte ptr [ecx+edi]
.text:0040CA2B                 mov     [esp+2Ch+var_15], dl
.text:0040CA2F                 mov     edx, [esp+2Ch+arg_4]
.text:0040CA33                 movzx   eax, byte ptr [ebp+esi+0]
.text:0040CA38                 mov     [esp+2Ch+var_16], al
.text:0040CA3C                 mov     byte ptr [edx+edi], 0
.text:0040CA40                 inc     edx
.text:0040CA41                 mov     [esp+2Ch+arg_4], edx
.text:0040CA45                 mov     byte ptr [ebp+esi+0], 0
.text:0040CA4A                 inc     ebp
.text:0040CA4B                 nop
.text:0040CA4C                 lea     esi, [esi+0]
.text:0040CA50
.text:0040CA50 loc_40CA50:                             ; CODE XREF: sub_40CA10+94↓j
.text:0040CA50                 call    _errno
.text:0040CA55                 mov     dword ptr [eax], 0
.text:0040CA5B                 mov     [esp+2Ch+String2], esi ; String2
.text:0040CA5F                 mov     [esp+2Ch+String1], edi ; String1
.text:0040CA62                 call    strcoll
.text:0040CA67                 mov     [esp+2Ch+var_14], eax
.text:0040CA6B                 test    eax, eax
.text:0040CA6D                 jnz     short loc_40CAA6
.text:0040CA6F                 call    _errno
.text:0040CA74                 mov     ebx, [eax]
.text:0040CA76                 test    ebx, ebx
.text:0040CA78                 jnz     short loc_40CAA6
.text:0040CA7A                 mov     [esp+2Ch+String1], edi ; Str
.text:0040CA7D                 call    strlen
.text:0040CA82                 mov     [esp+2Ch+String1], esi ; Str
.text:0040CA85                 lea     ebx, [eax+1]
.text:0040CA88                 add     edi, ebx
.text:0040CA8A                 call    strlen
.text:0040CA8F                 inc     eax
.text:0040CA90                 add     esi, eax
.text:0040CA92                 sub     ebp, eax
.text:0040CA94                 sub     [esp+2Ch+arg_4], ebx
.text:0040CA98                 jz      short loc_40CAC8
.text:0040CA9A                 mov     [esp+2Ch+var_14], 1
.text:0040CAA2                 test    ebp, ebp
.text:0040CAA4                 jnz     short loc_40CA50
.text:0040CAA6
.text:0040CAA6 loc_40CAA6:                             ; CODE XREF: sub_40CA10+5D↑j
.text:0040CAA6                                         ; sub_40CA10+68↑j ...
.text:0040CAA6                 movzx   ebx, [esp+2Ch+var_15]
.text:0040CAAB                 mov     ecx, [esp+2Ch+arg_4]
.text:0040CAAF                 mov     [ecx+edi-1], bl
.text:0040CAB3                 movzx   eax, [esp+2Ch+var_16]
.text:0040CAB8                 mov     [ebp+esi-1], al
.text:0040CABC                 mov     eax, [esp+2Ch+var_14]
.text:0040CAC0                 add     esp, 1Ch
.text:0040CAC3                 pop     ebx
.text:0040CAC4                 pop     esi
.text:0040CAC5                 pop     edi
.text:0040CAC6                 pop     ebp
.text:0040CAC7                 retn
.text:0040CAC8 ; ---------------------------------------------------------------------------
.text:0040CAC8
.text:0040CAC8 loc_40CAC8:                             ; CODE XREF: sub_40CA10+88↑j
.text:0040CAC8                 test    ebp, ebp
.text:0040CACA                 jz      short loc_40CAA6
.text:0040CACC                 mov     [esp+2Ch+var_14], 0FFFFFFFFh
.text:0040CAD4                 jmp     short loc_40CAA6
.text:0040CAD4 sub_40CA10      endp
.text:0040CAD4
.text:0040CAD4 ; ---------------------------------------------------------------------------
.text:0040CAD6                 align 10h
.text:0040CAE0
.text:0040CAE0 ; =============== S U B R O U T I N E =======================================
.text:0040CAE0
.text:0040CAE0
.text:0040CAE0 sub_40CAE0      proc near               ; CODE XREF: sub_40B5D0+46↑p
.text:0040CAE0
.text:0040CAE0 var_C           = dword ptr -0Ch
.text:0040CAE0 var_8           = dword ptr -8
.text:0040CAE0 var_4           = dword ptr -4
.text:0040CAE0 arg_0           = dword ptr  4
.text:0040CAE0
.text:0040CAE0                 sub     esp, 0Ch
.text:0040CAE3                 mov     edx, [esp+0Ch+arg_0]
.text:0040CAE7                 mov     [esp+0Ch+var_4], 3
.text:0040CAEF                 mov     [esp+0Ch+var_8], 0
.text:0040CAF7                 mov     [esp+0Ch+var_C], edx
.text:0040CAFA                 call    sub_4107C0
.text:0040CAFF                 add     esp, 0Ch
.text:0040CB02                 retn
.text:0040CB02 sub_40CAE0      endp
.text:0040CB02
.text:0040CB02 ; ---------------------------------------------------------------------------
.text:0040CB03                 align 10h
.text:0040CB10                 jmp     ds:libintl_bindtextdomain
.text:0040CB10 ; ---------------------------------------------------------------------------
.text:0040CB16                 align 10h
.text:0040CB20                 jmp     ds:libintl_textdomain
.text:0040CB20 ; ---------------------------------------------------------------------------
.text:0040CB26                 align 10h
.text:0040CB30                 jmp     ds:libintl_gettext
.text:0040CB30 ; ---------------------------------------------------------------------------
.text:0040CB36                 align 10h
.text:0040CB40 ; const char aS_0[]
.text:0040CB40 aS_0            db ': %s',0             ; DATA XREF: sub_40CB60+B8↓o
.text:0040CB40                                         ; sub_40CC64+122↓o
.text:0040CB45 aUnknownSystemE db 'Unknown system error',0
.text:0040CB45                                         ; DATA XREF: sub_40CB60:loc_40CC2D↓o
.text:0040CB45                                         ; sub_40CC64:loc_40CD9E↓o
.text:0040CB5A ; const char aS_1[]
.text:0040CB5A aS_1            db '%s: ',0             ; DATA XREF: sub_40CB60:loc_40CC34↓o
.text:0040CB5F                 align 10h
.text:0040CB60
.text:0040CB60 ; =============== S U B R O U T I N E =======================================
.text:0040CB60
.text:0040CB60
.text:0040CB60 ; int __cdecl sub_40CB60(int Code, int ErrorMessage, char *, char)
.text:0040CB60 sub_40CB60      proc near               ; CODE XREF: sub_4021E0+479↑p
.text:0040CB60                                         ; sub_4021E0+567↑p ...
.text:0040CB60
.text:0040CB60 Stream          = dword ptr -1Ch
.text:0040CB60 Format          = dword ptr -18h
.text:0040CB60 ArgList         = dword ptr -14h
.text:0040CB60 Code            = dword ptr  4
.text:0040CB60 ErrorMessage    = dword ptr  8
.text:0040CB60 arg_8           = dword ptr  0Ch
.text:0040CB60 arg_C           = byte ptr  10h
.text:0040CB60
.text:0040CB60                 push    esi
.text:0040CB61                 push    ebx
.text:0040CB62                 sub     esp, 14h
.text:0040CB65                 mov     edx, ds:_iob
.text:0040CB6B                 mov     esi, [esp+1Ch+Code]
.text:0040CB6F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:0040CB73                 add     edx, 20h ; ' '
.text:0040CB76                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040CB79                 call    fflush
.text:0040CB7E                 mov     eax, ds:dword_418A20
.text:0040CB83                 test    eax, eax
.text:0040CB85                 jz      loc_40CC34
.text:0040CB8B                 call    eax ; dword_418A20
.text:0040CB8D
.text:0040CB8D loc_40CB8D:                             ; CODE XREF: sub_40CB60+F7↓j
.text:0040CB8D                 lea     edx, [esp+1Ch+arg_C]
.text:0040CB91                 mov     ecx, [esp+1Ch+arg_8]
.text:0040CB95                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:0040CB99                 mov     edx, ds:_iob
.text:0040CB9F                 mov     [esp+1Ch+Format], ecx ; Format
.text:0040CBA3                 add     edx, 40h ; '@'
.text:0040CBA6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040CBA9                 call    vfprintf
.text:0040CBAE                 inc     ds:dword_418A30
.text:0040CBB4                 test    ebx, ebx
.text:0040CBB6                 jnz     short loc_40CC02
.text:0040CBB8
.text:0040CBB8 loc_40CBB8:                             ; CODE XREF: sub_40CB60+CB↓j
.text:0040CBB8                 mov     edx, ds:_iob
.text:0040CBBE                 lea     ecx, [edx+40h]
.text:0040CBC1                 mov     ebx, [ecx+4]
.text:0040CBC4                 dec     ebx
.text:0040CBC5                 test    ebx, ebx
.text:0040CBC7                 mov     [ecx+4], ebx
.text:0040CBCA                 js      short loc_40CBF0
.text:0040CBCC                 mov     ecx, [edx+40h]
.text:0040CBCF                 mov     byte ptr [ecx], 0Ah
.text:0040CBD2                 inc     dword ptr [edx+40h]
.text:0040CBD5
.text:0040CBD5 loc_40CBD5:                             ; CODE XREF: sub_40CB60+A0↓j
.text:0040CBD5                 mov     edx, ds:_iob
.text:0040CBDB                 add     edx, 40h ; '@'
.text:0040CBDE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040CBE1                 call    fflush
.text:0040CBE6                 test    esi, esi
.text:0040CBE8                 jnz     short loc_40CC5C
.text:0040CBEA                 add     esp, 14h
.text:0040CBED                 pop     ebx
.text:0040CBEE                 pop     esi
.text:0040CBEF                 retn
.text:0040CBF0 ; ---------------------------------------------------------------------------
.text:0040CBF0
.text:0040CBF0 loc_40CBF0:                             ; CODE XREF: sub_40CB60+6A↑j
.text:0040CBF0                 mov     [esp+1Ch+Format], ecx ; File
.text:0040CBF4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040CBFB                 call    _flsbuf
.text:0040CC00                 jmp     short loc_40CBD5
.text:0040CC02 ; ---------------------------------------------------------------------------
.text:0040CC02
.text:0040CC02 loc_40CC02:                             ; CODE XREF: sub_40CB60+56↑j
.text:0040CC02                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:0040CC05                 call    strerror
.text:0040CC0A                 test    eax, eax
.text:0040CC0C                 jz      short loc_40CC2D
.text:0040CC0E
.text:0040CC0E loc_40CC0E:                             ; CODE XREF: sub_40CB60+D2↓j
.text:0040CC0E                 mov     [esp+1Ch+ArgList], eax
.text:0040CC12                 mov     ebx, ds:_iob
.text:0040CC18                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:0040CC20                 add     ebx, 40h ; '@'
.text:0040CC23                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:0040CC26                 call    fprintf
.text:0040CC2B                 jmp     short loc_40CBB8
.text:0040CC2D ; ---------------------------------------------------------------------------
.text:0040CC2D
.text:0040CC2D loc_40CC2D:                             ; CODE XREF: sub_40CB60+AC↑j
.text:0040CC2D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040CC32                 jmp     short loc_40CC0E
.text:0040CC34 ; ---------------------------------------------------------------------------
.text:0040CC34
.text:0040CC34 loc_40CC34:                             ; CODE XREF: sub_40CB60+25↑j
.text:0040CC34                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040CC3C                 mov     edx, ds:_iob
.text:0040CC42                 mov     ecx, ds:dword_4189F0
.text:0040CC48                 add     edx, 40h ; '@'
.text:0040CC4B                 mov     [esp+1Ch+ArgList], ecx
.text:0040CC4F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040CC52                 call    fprintf
.text:0040CC57                 jmp     loc_40CB8D
.text:0040CC5C ; ---------------------------------------------------------------------------
.text:0040CC5C
.text:0040CC5C loc_40CC5C:                             ; CODE XREF: sub_40CB60+88↑j
.text:0040CC5C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040CC5F                 call    exit
.text:0040CC5F sub_40CB60      endp
.text:0040CC5F
.text:0040CC64
.text:0040CC64 ; =============== S U B R O U T I N E =======================================
.text:0040CC64
.text:0040CC64
.text:0040CC64 ; int __cdecl sub_40CC64(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:0040CC64 sub_40CC64      proc near               ; DATA XREF: sub_40CC64+77↓o
.text:0040CC64
.text:0040CC64 Stream          = dword ptr -28h
.text:0040CC64 Format          = dword ptr -24h
.text:0040CC64 ArgList         = dword ptr -20h
.text:0040CC64 var_1C          = dword ptr -1Ch
.text:0040CC64 Code            = dword ptr  8
.text:0040CC64 ErrorMessage    = dword ptr  0Ch
.text:0040CC64 Str2            = dword ptr  10h
.text:0040CC64 arg_10          = dword ptr  14h
.text:0040CC64 arg_14          = dword ptr  18h
.text:0040CC64 arg_18          = byte ptr  1Ch
.text:0040CC64
.text:0040CC64                 and     eax, 64253A73h
.text:0040CC69                 cmp     ah, [eax]
.text:0040CC6B
.text:0040CC6B loc_40CC6B:                             ; DATA XREF: sub_40CC64:loc_40CDA5↓o
.text:0040CC6B                 add     ds:55003A73h, ah
.text:0040CC71                 push    edi
.text:0040CC72                 push    esi
.text:0040CC73                 push    ebx
.text:0040CC74                 sub     esp, 1Ch
.text:0040CC77                 mov     edx, ds:dword_418A60
.text:0040CC7D                 mov     ebp, [esp+28h+Code]
.text:0040CC81                 mov     edi, [esp+28h+ErrorMessage]
.text:0040CC85                 test    edx, edx
.text:0040CC87                 mov     ebx, [esp+28h+Str2]
.text:0040CC8B                 mov     esi, [esp+28h+arg_10]
.text:0040CC8F                 jz      short loc_40CCA9
.text:0040CC91                 cmp     ds:dword_418680, esi
.text:0040CC97                 jz      loc_40CDD0
.text:0040CC9D
.text:0040CC9D loc_40CC9D:                             ; CODE XREF: sub_40CC64+18D↓j
.text:0040CC9D                 mov     ds:Str1, ebx
.text:0040CCA3                 mov     ds:dword_418680, esi
.text:0040CCA9
.text:0040CCA9 loc_40CCA9:                             ; CODE XREF: sub_40CC64+2B↑j
.text:0040CCA9                 mov     edx, ds:_iob
.text:0040CCAF                 add     edx, 20h ; ' '
.text:0040CCB2                 mov     [esp+28h+Stream], edx ; Stream
.text:0040CCB5                 call    fflush
.text:0040CCBA                 mov     eax, ds:dword_418A20
.text:0040CCBF                 test    eax, eax
.text:0040CCC1                 jz      loc_40CDA5
.text:0040CCC7                 call    eax ; dword_418A20
.text:0040CCC9
.text:0040CCC9 loc_40CCC9:                             ; CODE XREF: sub_40CC64+164↓j
.text:0040CCC9                 test    ebx, ebx
.text:0040CCCB                 jz      short loc_40CCEE
.text:0040CCCD                 mov     [esp+28h+ArgList], ebx
.text:0040CCD1                 mov     ebx, ds:_iob
.text:0040CCD7                 mov     [esp+28h+var_1C], esi
.text:0040CCDB                 mov     [esp+28h+Format], offset sub_40CC64 ; Format
.text:0040CCE3                 add     ebx, 40h ; '@'
.text:0040CCE6                 mov     [esp+28h+Stream], ebx ; Stream
.text:0040CCE9                 call    fprintf
.text:0040CCEE
.text:0040CCEE loc_40CCEE:                             ; CODE XREF: sub_40CC64+67↑j
.text:0040CCEE                 mov     esi, ds:_iob
.text:0040CCF4                 lea     edx, [esp+28h+arg_18]
.text:0040CCF8                 mov     ecx, [esp+28h+arg_14]
.text:0040CCFC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:0040CD00                 add     esi, 40h ; '@'
.text:0040CD03                 mov     [esp+28h+Format], ecx ; Format
.text:0040CD07                 mov     [esp+28h+Stream], esi ; Stream
.text:0040CD0A                 call    vfprintf
.text:0040CD0F                 inc     ds:dword_418A30
.text:0040CD15                 test    edi, edi
.text:0040CD17                 jnz     short loc_40CD70
.text:0040CD19
.text:0040CD19 loc_40CD19:                             ; CODE XREF: sub_40CC64+135↓j
.text:0040CD19                 mov     edx, ds:_iob
.text:0040CD1F                 lea     ecx, [edx+40h]
.text:0040CD22                 mov     ebx, [ecx+4]
.text:0040CD25                 dec     ebx
.text:0040CD26                 test    ebx, ebx
.text:0040CD28                 mov     [ecx+4], ebx
.text:0040CD2B                 js      short loc_40CD57
.text:0040CD2D                 mov     esi, [edx+40h]
.text:0040CD30                 mov     byte ptr [esi], 0Ah
.text:0040CD33                 inc     dword ptr [edx+40h]
.text:0040CD36
.text:0040CD36 loc_40CD36:                             ; CODE XREF: sub_40CC64+103↓j
.text:0040CD36                 mov     ecx, ds:_iob
.text:0040CD3C                 add     ecx, 40h ; '@'
.text:0040CD3F                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040CD42                 call    fflush
.text:0040CD47                 test    ebp, ebp
.text:0040CD49                 jnz     loc_40CDF6
.text:0040CD4F
.text:0040CD4F loc_40CD4F:                             ; CODE XREF: sub_40CC64+173↓j
.text:0040CD4F                                         ; sub_40CC64+187↓j
.text:0040CD4F                 add     esp, 1Ch
.text:0040CD52                 pop     ebx
.text:0040CD53                 pop     esi
.text:0040CD54                 pop     edi
.text:0040CD55                 pop     ebp
.text:0040CD56                 retn
.text:0040CD57 ; ---------------------------------------------------------------------------
.text:0040CD57
.text:0040CD57 loc_40CD57:                             ; CODE XREF: sub_40CC64+C7↑j
.text:0040CD57                 mov     [esp+28h+Format], ecx ; File
.text:0040CD5B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:0040CD62                 call    _flsbuf
.text:0040CD67                 jmp     short loc_40CD36
.text:0040CD67 ; ---------------------------------------------------------------------------
.text:0040CD69                 align 10h
.text:0040CD70
.text:0040CD70 loc_40CD70:                             ; CODE XREF: sub_40CC64+B3↑j
.text:0040CD70                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:0040CD73                 call    strerror
.text:0040CD78                 test    eax, eax
.text:0040CD7A                 jz      short loc_40CD9E
.text:0040CD7C
.text:0040CD7C loc_40CD7C:                             ; CODE XREF: sub_40CC64+13F↓j
.text:0040CD7C                 mov     [esp+28h+ArgList], eax
.text:0040CD80                 mov     edi, ds:_iob
.text:0040CD86                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040CD8E                 add     edi, 40h ; '@'
.text:0040CD91                 mov     [esp+28h+Stream], edi ; Stream
.text:0040CD94                 call    fprintf
.text:0040CD99                 jmp     loc_40CD19
.text:0040CD9E ; ---------------------------------------------------------------------------
.text:0040CD9E
.text:0040CD9E loc_40CD9E:                             ; CODE XREF: sub_40CC64+116↑j
.text:0040CD9E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040CDA3                 jmp     short loc_40CD7C
.text:0040CDA5 ; ---------------------------------------------------------------------------
.text:0040CDA5
.text:0040CDA5 loc_40CDA5:                             ; CODE XREF: sub_40CC64+5D↑j
.text:0040CDA5                 mov     [esp+28h+Format], (offset loc_40CC6B+1) ; Format
.text:0040CDAD                 mov     ecx, ds:_iob
.text:0040CDB3                 mov     edx, ds:dword_4189F0
.text:0040CDB9                 add     ecx, 40h ; '@'
.text:0040CDBC                 mov     [esp+28h+ArgList], edx
.text:0040CDC0                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040CDC3                 call    fprintf
.text:0040CDC8                 jmp     loc_40CCC9
.text:0040CDC8 ; ---------------------------------------------------------------------------
.text:0040CDCD                 align 10h
.text:0040CDD0
.text:0040CDD0 loc_40CDD0:                             ; CODE XREF: sub_40CC64+33↑j
.text:0040CDD0                 mov     eax, ds:Str1
.text:0040CDD5                 cmp     ebx, eax
.text:0040CDD7                 jz      loc_40CD4F
.text:0040CDDD                 mov     [esp+28h+Format], ebx ; Str2
.text:0040CDE1                 mov     [esp+28h+Stream], eax ; Str1
.text:0040CDE4                 call    strcmp
.text:0040CDE9                 test    eax, eax
.text:0040CDEB                 jz      loc_40CD4F
.text:0040CDF1                 jmp     loc_40CC9D
.text:0040CDF6 ; ---------------------------------------------------------------------------
.text:0040CDF6
.text:0040CDF6 loc_40CDF6:                             ; CODE XREF: sub_40CC64+E5↑j
.text:0040CDF6                 mov     [esp+28h+Stream], ebp ; Code
.text:0040CDF9                 call    exit
.text:0040CDF9 sub_40CC64      endp ; sp-analysis failed
.text:0040CDF9
.text:0040CDF9 ; ---------------------------------------------------------------------------
.text:0040CDFE                 align 10h
.text:0040CE00
.text:0040CE00 ; =============== S U B R O U T I N E =======================================
.text:0040CE00
.text:0040CE00
.text:0040CE00 sub_40CE00      proc near               ; CODE XREF: sub_405CD0:loc_405D53↑p
.text:0040CE00                                         ; sub_407D00+E9↑p ...
.text:0040CE00
.text:0040CE00 hNamedPipe      = dword ptr -0Ch
.text:0040CE00 var_8           = dword ptr -8
.text:0040CE00 var_4           = dword ptr -4
.text:0040CE00 arg_0           = dword ptr  4
.text:0040CE00 arg_4           = dword ptr  8
.text:0040CE00
.text:0040CE00                 sub     esp, 0Ch
.text:0040CE03                 mov     edx, [esp+0Ch+arg_4]
.text:0040CE07                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:0040CE0E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040CE12                 mov     edx, [esp+0Ch+arg_0]
.text:0040CE16                 mov     [esp+0Ch+var_8], edx ; int
.text:0040CE1A                 call    sub_40D070
.text:0040CE1F                 add     esp, 0Ch
.text:0040CE22                 retn
.text:0040CE22 sub_40CE00      endp
.text:0040CE22
.text:0040CE22 ; ---------------------------------------------------------------------------
.text:0040CE23 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:0040CE23                                         ; DATA XREF: .text:0040CF0E↓o
.text:0040CE36 aModeO          db 'mode:      %#o',0Ah,0
.text:0040CE36                                         ; DATA XREF: .text:0040CF24↓o
.text:0040CE46 aUidLd          db 'uid:       %ld',0Ah,0
.text:0040CE46                                         ; DATA XREF: .text:0040CF37↓o
.text:0040CE56 aGidLd          db 'gid:       %ld',0Ah,0
.text:0040CE56                                         ; DATA XREF: .text:0040CF4A↓o
.text:0040CE66 aDevLu          db 'dev:       %lu',0Ah,0
.text:0040CE66                                         ; DATA XREF: .text:0040CF5D↓o
.text:0040CE76 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:0040CE76                                         ; DATA XREF: .text:0040CF70↓o
.text:0040CE86 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:0040CE86                                         ; DATA XREF: .text:0040CF86↓o
.text:0040CE98 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:0040CE98                                         ; DATA XREF: .text:0040CF9D↓o
.text:0040CEA7 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:0040CEA7                                         ; DATA XREF: .text:0040CFB3↓o
.text:0040CEB9 aAtimeLdS       db 'atime:     %ld: %s',0
.text:0040CEB9                                         ; DATA XREF: .text:0040CFD9↓o
.text:0040CECC aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0040CECC                                         ; DATA XREF: .text:0040CFFB↓o
.text:0040CEDF aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:0040CEDF                                         ; DATA XREF: .text:0040D01D↓o
.text:0040CEF3                 align 10h
.text:0040CF00                 push    ebx
.text:0040CF01                 sub     esp, 18h
.text:0040CF04                 mov     ebx, [esp+20h]
.text:0040CF08                 mov     edx, [ebx+8]
.text:0040CF0B                 mov     ecx, [ebx+0Ch]
.text:0040CF0E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:0040CF15                 mov     [esp+4], edx
.text:0040CF19                 mov     [esp+8], ecx
.text:0040CF1D                 call    printf
.text:0040CF22                 mov     ecx, [ebx]
.text:0040CF24                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:0040CF2B                 mov     [esp+4], ecx
.text:0040CF2F                 call    printf
.text:0040CF34                 mov     edx, [ebx+1Ch]
.text:0040CF37                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:0040CF3E                 mov     [esp+4], edx
.text:0040CF42                 call    printf
.text:0040CF47                 mov     ecx, [ebx+20h]
.text:0040CF4A                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:0040CF51                 mov     [esp+4], ecx
.text:0040CF55                 call    printf
.text:0040CF5A                 mov     edx, [ebx+10h]
.text:0040CF5D                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:0040CF64                 mov     [esp+4], edx
.text:0040CF68                 call    printf
.text:0040CF6D                 mov     ecx, [ebx+18h]
.text:0040CF70                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:0040CF77                 mov     [esp+4], ecx
.text:0040CF7B                 call    printf
.text:0040CF80                 mov     edx, [ebx+30h]
.text:0040CF83                 mov     ecx, [ebx+34h]
.text:0040CF86                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:0040CF8D                 mov     [esp+4], edx
.text:0040CF91                 mov     [esp+8], ecx
.text:0040CF95                 call    printf
.text:0040CF9A                 mov     ecx, [ebx+50h]
.text:0040CF9D                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:0040CFA4                 mov     [esp+4], ecx
.text:0040CFA8                 call    printf
.text:0040CFAD                 mov     ecx, [ebx+5Ch]
.text:0040CFB0                 mov     edx, [ebx+58h]
.text:0040CFB3                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0040CFBA                 mov     [esp+8], ecx
.text:0040CFBE                 mov     [esp+4], edx
.text:0040CFC2                 call    printf
.text:0040CFC7                 lea     edx, [ebx+38h]
.text:0040CFCA                 mov     [esp], edx
.text:0040CFCD                 call    ctime
.text:0040CFD2                 mov     [esp+8], eax
.text:0040CFD6                 mov     ecx, [ebx+38h]
.text:0040CFD9                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:0040CFE0                 mov     [esp+4], ecx
.text:0040CFE4                 call    printf
.text:0040CFE9                 lea     edx, [ebx+40h]
.text:0040CFEC                 mov     [esp], edx
.text:0040CFEF                 call    ctime
.text:0040CFF4                 mov     [esp+8], eax
.text:0040CFF8                 mov     ecx, [ebx+40h]
.text:0040CFFB                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:0040D002                 mov     [esp+4], ecx
.text:0040D006                 call    printf
.text:0040D00B                 lea     edx, [ebx+48h]
.text:0040D00E                 mov     [esp], edx
.text:0040D011                 call    ctime
.text:0040D016                 mov     [esp+8], eax
.text:0040D01A                 mov     edx, [ebx+48h]
.text:0040D01D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:0040D024                 mov     [esp+4], edx
.text:0040D028                 call    printf
.text:0040D02D                 add     esp, 18h
.text:0040D030                 xor     eax, eax
.text:0040D032                 pop     ebx
.text:0040D033                 retn
.text:0040D033 ; ---------------------------------------------------------------------------
.text:0040D034                 align 10h
.text:0040D040 ; const char aFxstat64BadFil[]
.text:0040D040 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040D040                                         ; DATA XREF: sub_40D070+7B↓o
.text:0040D064                 align 10h
.text:0040D070
.text:0040D070 ; =============== S U B R O U T I N E =======================================
.text:0040D070
.text:0040D070
.text:0040D070 ; int __cdecl sub_40D070(HANDLE hNamedPipe, int, int)
.text:0040D070 sub_40D070      proc near               ; CODE XREF: sub_40CE00+1A↑p
.text:0040D070                                         ; .text:0040F809↓p
.text:0040D070
.text:0040D070 FileHandle      = dword ptr -1Ch
.text:0040D070 var_18          = dword ptr -18h
.text:0040D070 var_C           = dword ptr -0Ch
.text:0040D070 var_8           = dword ptr -8
.text:0040D070 var_4           = dword ptr -4
.text:0040D070 hNamedPipe      = dword ptr  4
.text:0040D070 arg_4           = dword ptr  8
.text:0040D070 arg_8           = dword ptr  0Ch
.text:0040D070
.text:0040D070                 sub     esp, 1Ch
.text:0040D073                 mov     edx, [esp+1Ch+arg_4]
.text:0040D077                 mov     [esp+1Ch+var_C], ebx
.text:0040D07B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040D07F                 mov     [esp+1Ch+var_8], esi
.text:0040D083                 mov     esi, [esp+1Ch+arg_8]
.text:0040D087                 test    ebx, ebx
.text:0040D089                 mov     [esp+1Ch+var_4], edi
.text:0040D08D                 jnz     short loc_40D0C7
.text:0040D08F                 test    edx, edx
.text:0040D091                 js      short loc_40D0E7
.text:0040D093                 test    esi, esi
.text:0040D095                 jz      short loc_40D0C7
.text:0040D097                 cld
.text:0040D098                 mov     eax, ebx
.text:0040D09A                 mov     edi, esi
.text:0040D09C                 mov     ecx, 18h
.text:0040D0A1                 rep stosd
.text:0040D0A3                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040D0A7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040D0AA                 call    _get_osfhandle
.text:0040D0AF                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040D0B3                 mov     ebx, [esp+1Ch+var_C]
.text:0040D0B7                 mov     esi, [esp+1Ch+var_8]
.text:0040D0BB                 mov     edi, [esp+1Ch+var_4]
.text:0040D0BF                 add     esp, 1Ch
.text:0040D0C2                 jmp     sub_40D450
.text:0040D0C7 ; ---------------------------------------------------------------------------
.text:0040D0C7
.text:0040D0C7 loc_40D0C7:                             ; CODE XREF: sub_40D070+1D↑j
.text:0040D0C7                                         ; sub_40D070+25↑j
.text:0040D0C7                 call    _errno
.text:0040D0CC                 mov     dword ptr [eax], 16h
.text:0040D0D2
.text:0040D0D2 loc_40D0D2:                             ; CODE XREF: sub_40D070+92↓j
.text:0040D0D2                 mov     ebx, [esp+1Ch+var_C]
.text:0040D0D6                 mov     eax, 0FFFFFFFFh
.text:0040D0DB                 mov     esi, [esp+1Ch+var_8]
.text:0040D0DF                 mov     edi, [esp+1Ch+var_4]
.text:0040D0E3                 add     esp, 1Ch
.text:0040D0E6                 retn
.text:0040D0E7 ; ---------------------------------------------------------------------------
.text:0040D0E7
.text:0040D0E7 loc_40D0E7:                             ; CODE XREF: sub_40D070+21↑j
.text:0040D0E7                 mov     [esp+1Ch+var_18], edx
.text:0040D0EB                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040D0F2                 call    printf
.text:0040D0F7                 call    _errno
.text:0040D0FC                 mov     dword ptr [eax], 9
.text:0040D102                 jmp     short loc_40D0D2
.text:0040D102 sub_40D070      endp
.text:0040D102
.text:0040D102 ; ---------------------------------------------------------------------------
.text:0040D104                 align 20h
.text:0040D120 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:0040D120                                         ; DATA XREF: .data:off_4170F4↓o
.text:0040D134 ; const CHAR LibFileName[]
.text:0040D134 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_40D160+11↓o
.text:0040D134                                         ; sub_40D2D0+C↓o ...
.text:0040D141 ; const CHAR ProcName[]
.text:0040D141 ProcName        db 'GetFileAttributesExA',0
.text:0040D141                                         ; DATA XREF: sub_40D160+28↓o
.text:0040D156                 align 10h
.text:0040D160
.text:0040D160 ; =============== S U B R O U T I N E =======================================
.text:0040D160
.text:0040D160
.text:0040D160 ; int __cdecl sub_40D160(LPCSTR lpFileName, int)
.text:0040D160 sub_40D160      proc near               ; CODE XREF: .text:0040E304↓p
.text:0040D160                                         ; sub_40E700+37↓p
.text:0040D160
.text:0040D160 lpModuleName    = dword ptr -18Ch
.text:0040D160 lpProcName      = dword ptr -188h
.text:0040D160 var_184         = dword ptr -184h
.text:0040D160 var_170         = dword ptr -170h
.text:0040D160 var_164         = dword ptr -164h
.text:0040D160 hModule         = dword ptr -160h
.text:0040D160 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040D160 lpFileName      = dword ptr  4
.text:0040D160 arg_4           = dword ptr  8
.text:0040D160
.text:0040D160                 push    ebp
.text:0040D161                 push    edi
.text:0040D162                 push    esi
.text:0040D163                 push    ebx
.text:0040D164                 sub     esp, 17Ch
.text:0040D16A                 mov     ebx, [esp+18Ch+arg_4]
.text:0040D171                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:0040D178                 call    GetModuleHandleA
.text:0040D17D                 sub     esp, 4
.text:0040D180                 mov     [esp+18Ch+hModule], eax
.text:0040D184                 mov     edx, [esp+18Ch+hModule]
.text:0040D188                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:0040D190                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:0040D193                 call    GetProcAddress
.text:0040D198                 sub     esp, 8
.text:0040D19B                 mov     ebp, eax
.text:0040D19D                 mov     eax, [esp+18Ch+lpFileName]
.text:0040D1A4                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:0040D1A7                 call    GetFileAttributesA
.text:0040D1AC                 sub     esp, 4
.text:0040D1AF                 mov     [esp+18Ch+var_164], eax
.text:0040D1B3                 xor     eax, eax
.text:0040D1B5                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040D1BA                 jz      short loc_40D211
.text:0040D1BC                 cld
.text:0040D1BD                 mov     ecx, 50h ; 'P'
.text:0040D1C2                 lea     esi, [esp+18Ch+FindFileData]
.text:0040D1C6                 mov     edi, esi
.text:0040D1C8                 test    ebp, ebp
.text:0040D1CA                 rep stosd
.text:0040D1CC                 mov     [esp+18Ch+var_170], 0
.text:0040D1D4                 jz      short loc_40D1F5
.text:0040D1D6                 mov     [esp+18Ch+var_184], ebx
.text:0040D1DA                 mov     ecx, [esp+18Ch+lpFileName]
.text:0040D1E1                 mov     [esp+18Ch+lpProcName], 0
.text:0040D1E9                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040D1EC                 call    ebp
.text:0040D1EE                 sub     esp, 0Ch
.text:0040D1F1                 mov     [esp+18Ch+var_170], eax
.text:0040D1F5
.text:0040D1F5 loc_40D1F5:                             ; CODE XREF: sub_40D160+74↑j
.text:0040D1F5                 mov     eax, [esp+18Ch+var_170]
.text:0040D1F9                 test    eax, eax
.text:0040D1FB                 jz      short loc_40D220
.text:0040D1FD
.text:0040D1FD loc_40D1FD:                             ; CODE XREF: sub_40D160+131↓j
.text:0040D1FD                                         ; sub_40D160+14B↓j
.text:0040D1FD                 mov     ebx, [esp+18Ch+hModule]
.text:0040D201                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:0040D204                 call    FreeLibrary
.text:0040D209                 sub     esp, 4
.text:0040D20C                 mov     eax, 1
.text:0040D211
.text:0040D211 loc_40D211:                             ; CODE XREF: sub_40D160+5A↑j
.text:0040D211                 add     esp, 17Ch
.text:0040D217                 pop     ebx
.text:0040D218                 pop     esi
.text:0040D219                 pop     edi
.text:0040D21A                 pop     ebp
.text:0040D21B                 retn
.text:0040D21B ; ---------------------------------------------------------------------------
.text:0040D21C                 align 10h
.text:0040D220
.text:0040D220 loc_40D220:                             ; CODE XREF: sub_40D160+9B↑j
.text:0040D220                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:0040D224                 mov     edx, [esp+18Ch+lpFileName]
.text:0040D22B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040D22E                 call    FindFirstFileA
.text:0040D233                 sub     esp, 8
.text:0040D236                 xor     ecx, ecx
.text:0040D238                 cmp     eax, 0FFFFFFFFh
.text:0040D23B                 setnz   cl
.text:0040D23E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:0040D242                 mov     [ebx], edi
.text:0040D244                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:0040D248                 mov     [esp+18Ch+var_170], ecx
.text:0040D24C                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:0040D250                 mov     [ebx+8], esi
.text:0040D253                 mov     [ebx+4], ecx
.text:0040D256                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040D25A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040D25E                 mov     [ebx+0Ch], ebp
.text:0040D261                 mov     [ebx+10h], edi
.text:0040D264                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:0040D268                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040D26C                 mov     [ebx+18h], esi
.text:0040D26F                 mov     [ebx+14h], ecx
.text:0040D272                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:0040D276                 mov     [ebx+1Ch], ebp
.text:0040D279                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040D27D                 mov     [ebx+20h], edi
.text:0040D280                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:0040D283                 call    FindClose
.text:0040D288                 sub     esp, 4
.text:0040D28B                 mov     esi, [esp+18Ch+var_170]
.text:0040D28F                 test    esi, esi
.text:0040D291                 jnz     loc_40D1FD
.text:0040D297                 cld
.text:0040D298                 mov     eax, [esp+18Ch+var_170]
.text:0040D29C                 mov     ecx, 9
.text:0040D2A1                 mov     edi, ebx
.text:0040D2A3                 rep stosd
.text:0040D2A5                 mov     ebp, [esp+18Ch+var_164]
.text:0040D2A9                 mov     [ebx], ebp
.text:0040D2AB                 jmp     loc_40D1FD
.text:0040D2AB sub_40D160      endp
.text:0040D2AB
.text:0040D2AB ; ---------------------------------------------------------------------------
.text:0040D2B0 ; const CHAR aFindfirstfilee[]
.text:0040D2B0 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_40D2D0+23↓o
.text:0040D2C1 ; const char Source[]
.text:0040D2C1 Source          db '\*',0               ; DATA XREF: sub_40D2D0:loc_40D35D↓o
.text:0040D2C4                 align 10h
.text:0040D2D0
.text:0040D2D0 ; =============== S U B R O U T I N E =======================================
.text:0040D2D0
.text:0040D2D0
.text:0040D2D0 ; int __cdecl sub_40D2D0(char *Str)
.text:0040D2D0 sub_40D2D0      proc near               ; CODE XREF: .text:0040E403↓p
.text:0040D2D0                                         ; sub_40E700+3FA↓p ...
.text:0040D2D0
.text:0040D2D0 lpLibFileName   = dword ptr -18Ch
.text:0040D2D0 lpProcName      = dword ptr -188h
.text:0040D2D0 var_184         = dword ptr -184h
.text:0040D2D0 var_180         = dword ptr -180h
.text:0040D2D0 var_17C         = dword ptr -17Ch
.text:0040D2D0 var_178         = dword ptr -178h
.text:0040D2D0 var_164         = dword ptr -164h
.text:0040D2D0 hModule         = dword ptr -160h
.text:0040D2D0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040D2D0 Str             = dword ptr  4
.text:0040D2D0
.text:0040D2D0                 push    ebp
.text:0040D2D1                 push    edi
.text:0040D2D2                 xor     edi, edi
.text:0040D2D4                 push    esi
.text:0040D2D5                 push    ebx
.text:0040D2D6                 sub     esp, 17Ch
.text:0040D2DC                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:0040D2E3                 call    LoadLibraryA
.text:0040D2E8                 sub     esp, 4
.text:0040D2EB                 mov     [esp+18Ch+hModule], eax
.text:0040D2EF                 mov     ecx, [esp+18Ch+hModule]
.text:0040D2F3                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040D2FB                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040D2FE                 call    GetProcAddress
.text:0040D303                 sub     esp, 8
.text:0040D306                 mov     edx, [esp+18Ch+Str]
.text:0040D30D                 mov     [esp+18Ch+var_164], eax
.text:0040D311                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:0040D314                 call    strlen
.text:0040D319                 lea     edx, [eax+5]
.text:0040D31C                 mov     ebx, eax
.text:0040D31E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:0040D321                 call    malloc
.text:0040D326                 mov     esi, eax
.text:0040D328                 test    esi, esi
.text:0040D32A                 mov     eax, 1
.text:0040D32F                 jz      loc_40D40D
.text:0040D335                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040D338                 mov     ebp, [esp+18Ch+Str]
.text:0040D33F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:0040D343                 call    strcpy
.text:0040D348                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040D34D                 cmp     al, 2Fh ; '/'
.text:0040D34F                 jz      loc_40D43B
.text:0040D355                 cmp     al, 5Ch ; '\'
.text:0040D357                 jz      loc_40D43B
.text:0040D35D
.text:0040D35D loc_40D35D:                             ; CODE XREF: sub_40D2D0+170↓j
.text:0040D35D                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:0040D365                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040D368                 call    strcat
.text:0040D36D                 mov     eax, [esp+18Ch+var_164]
.text:0040D371                 test    eax, eax
.text:0040D373                 jz      loc_40D435
.text:0040D379                 mov     [esp+18Ch+var_178], 0
.text:0040D381                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040D385                 mov     [esp+18Ch+var_17C], 0
.text:0040D38D                 mov     [esp+18Ch+var_180], 1
.text:0040D395                 mov     [esp+18Ch+var_184], ebp
.text:0040D399                 mov     [esp+18Ch+lpProcName], 0
.text:0040D3A1                 mov     [esp+18Ch+lpLibFileName], esi
.text:0040D3A4                 call    [esp+18Ch+var_164]
.text:0040D3A8                 sub     esp, 18h
.text:0040D3AB                 mov     ebx, eax
.text:0040D3AD                 cmp     eax, 0FFFFFFFFh
.text:0040D3B0                 jz      short loc_40D418
.text:0040D3B2                 lea     esi, [esi+0]
.text:0040D3B9                 lea     edi, [edi+0]
.text:0040D3C0
.text:0040D3C0 loc_40D3C0:                             ; CODE XREF: sub_40D2D0+109↓j
.text:0040D3C0                                         ; sub_40D2D0+161↓j
.text:0040D3C0                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:0040D3C5                 jz      short loc_40D3C8
.text:0040D3C7                 inc     edi
.text:0040D3C8
.text:0040D3C8 loc_40D3C8:                             ; CODE XREF: sub_40D2D0+F5↑j
.text:0040D3C8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040D3CC                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040D3CF                 call    FindNextFileA
.text:0040D3D4                 sub     esp, 8
.text:0040D3D7                 test    eax, eax
.text:0040D3D9                 jnz     short loc_40D3C0
.text:0040D3DB                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040D3DE                 call    FindClose
.text:0040D3E3                 sub     esp, 4
.text:0040D3E6                 mov     esi, [esp+18Ch+hModule]
.text:0040D3EA                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040D3ED                 call    FreeLibrary
.text:0040D3F2                 sub     esp, 4
.text:0040D3F5                 mov     ebx, [esp+18Ch+Str]
.text:0040D3FC                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040D3FF                 call    sub_40F8A0
.text:0040D404                 test    eax, eax
.text:0040D406                 jz      short loc_40D40B
.text:0040D408                 add     edi, 2
.text:0040D40B
.text:0040D40B loc_40D40B:                             ; CODE XREF: sub_40D2D0+136↑j
.text:0040D40B                 mov     eax, edi
.text:0040D40D
.text:0040D40D loc_40D40D:                             ; CODE XREF: sub_40D2D0+5F↑j
.text:0040D40D                                         ; sub_40D2D0+163↓j
.text:0040D40D                 add     esp, 17Ch
.text:0040D413                 pop     ebx
.text:0040D414                 pop     esi
.text:0040D415                 pop     edi
.text:0040D416                 pop     ebp
.text:0040D417                 retn
.text:0040D418 ; ---------------------------------------------------------------------------
.text:0040D418
.text:0040D418 loc_40D418:                             ; CODE XREF: sub_40D2D0+E0↑j
.text:0040D418                                         ; sub_40D2D0+169↓j
.text:0040D418                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040D41C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040D41F                 call    FindFirstFileA
.text:0040D424                 mov     ebx, eax
.text:0040D426                 sub     esp, 8
.text:0040D429                 cmp     ebx, 0FFFFFFFFh
.text:0040D42C                 mov     eax, 2
.text:0040D431                 jnz     short loc_40D3C0
.text:0040D433                 jmp     short loc_40D40D
.text:0040D435 ; ---------------------------------------------------------------------------
.text:0040D435
.text:0040D435 loc_40D435:                             ; CODE XREF: sub_40D2D0+A3↑j
.text:0040D435                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040D439                 jmp     short loc_40D418
.text:0040D43B ; ---------------------------------------------------------------------------
.text:0040D43B
.text:0040D43B loc_40D43B:                             ; CODE XREF: sub_40D2D0+7F↑j
.text:0040D43B                                         ; sub_40D2D0+87↑j
.text:0040D43B                 mov     byte ptr [ebx+esi-1], 0
.text:0040D440                 jmp     loc_40D35D
.text:0040D440 sub_40D2D0      endp
.text:0040D440
.text:0040D440 ; ---------------------------------------------------------------------------
.text:0040D445                 align 10h
.text:0040D450
.text:0040D450 ; =============== S U B R O U T I N E =======================================
.text:0040D450
.text:0040D450
.text:0040D450 ; int __cdecl sub_40D450(HANDLE hNamedPipe, int)
.text:0040D450 sub_40D450      proc near               ; CODE XREF: sub_40D070+52↑j
.text:0040D450                                         ; sub_412990-3DC9↓p
.text:0040D450
.text:0040D450 hFile           = dword ptr -0ECh
.text:0040D450 lpFileInformation= dword ptr -0E8h
.text:0040D450 nBufferSize     = dword ptr -0E4h
.text:0040D450 lpBytesRead     = dword ptr -0E0h
.text:0040D450 lpTotalBytesAvail= dword ptr -0DCh
.text:0040D450 lpBytesLeftThisMessage= dword ptr -0D8h
.text:0040D450 var_C4          = dword ptr -0C4h
.text:0040D450 var_C0          = dword ptr -0C0h
.text:0040D450 var_BC          = dword ptr -0BCh
.text:0040D450 var_B8          = dword ptr -0B8h
.text:0040D450 var_B4          = dword ptr -0B4h
.text:0040D450 var_B0          = dword ptr -0B0h
.text:0040D450 var_AC          = dword ptr -0ACh
.text:0040D450 var_A8          = dword ptr -0A8h
.text:0040D450 TotalBytesAvail = dword ptr -0A0h
.text:0040D450 var_9C          = dword ptr -9Ch
.text:0040D450 var_98          = dword ptr -98h
.text:0040D450 var_94          = dword ptr -94h
.text:0040D450 var_90          = dword ptr -90h
.text:0040D450 var_8C          = dword ptr -8Ch
.text:0040D450 var_88          = dword ptr -88h
.text:0040D450 var_84          = dword ptr -84h
.text:0040D450 var_80          = dword ptr -80h
.text:0040D450 var_7C          = dword ptr -7Ch
.text:0040D450 var_78          = dword ptr -78h
.text:0040D450 var_74          = dword ptr -74h
.text:0040D450 var_70          = dword ptr -70h
.text:0040D450 var_6C          = dword ptr -6Ch
.text:0040D450 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:0040D450 hNamedPipe      = dword ptr  4
.text:0040D450 arg_4           = dword ptr  8
.text:0040D450
.text:0040D450                 push    ebp
.text:0040D451                 mov     eax, 0FFFFFFFFh
.text:0040D456                 push    edi
.text:0040D457                 push    esi
.text:0040D458                 push    ebx
.text:0040D459                 sub     esp, 0DCh
.text:0040D45F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:0040D466                 mov     ebp, [esp+0ECh+arg_4]
.text:0040D46D                 cmp     esi, 0FFFFFFFFh
.text:0040D470                 jz      loc_40D7F1
.text:0040D476                 cld
.text:0040D477                 xor     eax, eax
.text:0040D479                 lea     ebx, [esp+0ECh+FileInformation]
.text:0040D480                 mov     ecx, 0Dh
.text:0040D485                 mov     edi, ebx
.text:0040D487                 rep stosd
.text:0040D489                 mov     dword ptr [ebp+18h], 1
.text:0040D490                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040D493                 call    GetFileType
.text:0040D498                 sub     esp, 4
.text:0040D49B                 xor     edx, edx
.text:0040D49D                 cmp     eax, 2
.text:0040D4A0                 jz      loc_40D8D0
.text:0040D4A6                 cmp     eax, 3
.text:0040D4A9                 jz      loc_40D8C0
.text:0040D4AF
.text:0040D4AF loc_40D4AF:                             ; CODE XREF: sub_40D450+475↓j
.text:0040D4AF                                         ; sub_40D450+485↓j
.text:0040D4AF                 or      [ebp+0], edx
.text:0040D4B2                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:0040D4B6                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040D4B9                 call    GetFileInformationByHandle
.text:0040D4BE                 sub     esp, 8
.text:0040D4C1                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040D4C8                 test    ecx, ecx
.text:0040D4CA                 jnz     short loc_40D500
.text:0040D4CC                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040D4D3                 test    edx, edx
.text:0040D4D5                 jnz     short loc_40D500
.text:0040D4D7                 mov     edx, [ebp+0]
.text:0040D4DA                 and     edx, 0F000h
.text:0040D4E0                 cmp     edx, 1000h
.text:0040D4E6                 jz      loc_40D856
.text:0040D4EC
.text:0040D4EC loc_40D4EC:                             ; CODE XREF: sub_40D450+459↓j
.text:0040D4EC                                         ; sub_40D450+465↓j
.text:0040D4EC                 test    ecx, ecx
.text:0040D4EE                 jnz     short loc_40D500
.text:0040D4F0                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040D4F7                 test    edx, edx
.text:0040D4F9                 jz      loc_40D834
.text:0040D4FF                 nop
.text:0040D500
.text:0040D500 loc_40D500:                             ; CODE XREF: sub_40D450+7A↑j
.text:0040D500                                         ; sub_40D450+85↑j ...
.text:0040D500                 cld
.text:0040D501                 mov     esi, ebx
.text:0040D503                 mov     dword ptr [ebp+14h], 0
.text:0040D50A                 lea     edi, [esp+0ECh+var_9C]
.text:0040D50E                 mov     ecx, 0Dh
.text:0040D513                 rep movsd
.text:0040D515                 xor     ebx, ebx
.text:0040D517                 xor     edi, edi
.text:0040D519                 mov     edx, [esp+0ECh+var_6C]
.text:0040D520                 mov     esi, [esp+0ECh+var_70]
.text:0040D524                 or      edx, ebx
.text:0040D526                 mov     ebx, [esp+0ECh+var_9C]
.text:0040D52A                 mov     [ebp+8], edx
.text:0040D52D                 or      edi, esi
.text:0040D52F                 xor     edx, edx
.text:0040D531                 mov     [ebp+0Ch], edi
.text:0040D534                 test    bl, 10h
.text:0040D537                 mov     esi, [esp+0ECh+var_80]
.text:0040D53B                 setz    dl
.text:0040D53E                 mov     [ebp+10h], esi
.text:0040D541                 dec     edx
.text:0040D542                 and     edx, 0FFFFC000h
.text:0040D548                 add     edx, 8000h
.text:0040D54E                 or      edx, 124h
.text:0040D554                 test    bl, 1
.text:0040D557                 movzx   eax, dx
.text:0040D55A                 jnz     short loc_40D561
.text:0040D55C                 or      eax, 92h
.text:0040D561
.text:0040D561 loc_40D561:                             ; CODE XREF: sub_40D450+10A↑j
.text:0040D561                 or      [ebp+0], eax
.text:0040D564                 xor     edx, edx
.text:0040D566                 mov     ebx, [esp+0ECh+var_7C]
.text:0040D56A                 mov     ecx, [esp+0ECh+var_78]
.text:0040D56E                 mov     eax, edx
.text:0040D570                 xor     esi, esi
.text:0040D572                 mov     edx, [esp+0ECh+var_8C]
.text:0040D576                 mov     edi, ebx
.text:0040D578                 or      eax, edi
.text:0040D57A                 mov     [esp+0ECh+var_A8], eax
.text:0040D57E                 mov     ebx, ecx
.text:0040D580                 mov     edi, [esp+0ECh+var_74]
.text:0040D584                 or      ebx, esi
.text:0040D586                 mov     esi, [esp+0ECh+var_A8]
.text:0040D58A                 mov     [esp+0ECh+var_AC], ebx
.text:0040D58E                 xor     ebx, ebx
.text:0040D590                 mov     ecx, [esp+0ECh+var_AC]
.text:0040D594                 mov     [ebp+34h], esi
.text:0040D597                 mov     esi, [esp+0ECh+var_90]
.text:0040D59B                 mov     [ebp+18h], edi
.text:0040D59E                 xor     edi, edi
.text:0040D5A0                 or      esi, ebx
.text:0040D5A2                 mov     [ebp+30h], ecx
.text:0040D5A5                 or      edi, edx
.text:0040D5A7                 mov     edx, esi
.text:0040D5A9                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040D5B1                 sub     edx, 0D53E8000h
.text:0040D5B7                 mov     ebx, edi
.text:0040D5B9                 sbb     ebx, 19DB1DEh
.text:0040D5BF                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040D5C3                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040D5CB                 mov     [esp+0ECh+hFile], edx
.text:0040D5CE                 call    sub_414FC0
.text:0040D5D3                 mov     ecx, eax
.text:0040D5D5                 shr     eax, 1Fh
.text:0040D5D8                 dec     eax
.text:0040D5D9                 and     ecx, eax
.text:0040D5DB                 mov     [ebp+38h], ecx
.text:0040D5DE                 mov     [esp+0ECh+hFile], esi
.text:0040D5E1                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040D5E5                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040D5ED                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040D5F5                 call    sub_414E40
.text:0040D5FA                 lea     ebx, [eax+eax*4]
.text:0040D5FD                 xor     ecx, ecx
.text:0040D5FF                 lea     esi, [ebx+ebx*4]
.text:0040D602                 shl     esi, 2
.text:0040D605                 mov     edi, esi
.text:0040D607                 shr     edi, 1Fh
.text:0040D60A                 dec     edi
.text:0040D60B                 and     edi, esi
.text:0040D60D                 mov     [ebp+3Ch], edi
.text:0040D610                 mov     esi, [esp+0ECh+var_98]
.text:0040D614                 xor     edi, edi
.text:0040D616                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040D61E                 mov     edx, [esp+0ECh+var_94]
.text:0040D622                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040D62A                 or      esi, ecx
.text:0040D62C                 or      edi, edx
.text:0040D62E                 mov     edx, esi
.text:0040D630                 mov     ecx, edi
.text:0040D632                 sub     edx, 0D53E8000h
.text:0040D638                 sbb     ecx, 19DB1DEh
.text:0040D63E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040D642                 mov     [esp+0ECh+hFile], edx
.text:0040D645                 call    sub_414FC0
.text:0040D64A                 mov     ebx, eax
.text:0040D64C                 shr     eax, 1Fh
.text:0040D64F                 dec     eax
.text:0040D650                 and     ebx, eax
.text:0040D652                 mov     [ebp+48h], ebx
.text:0040D655                 xor     ebx, ebx
.text:0040D657                 mov     [esp+0ECh+hFile], esi
.text:0040D65A                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040D65E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040D666                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040D66E                 call    sub_414E40
.text:0040D673                 lea     ecx, [eax+eax*4]
.text:0040D676                 lea     esi, [ecx+ecx*4]
.text:0040D679                 shl     esi, 2
.text:0040D67C                 mov     edi, esi
.text:0040D67E                 shr     edi, 1Fh
.text:0040D681                 dec     edi
.text:0040D682                 and     edi, esi
.text:0040D684                 mov     [ebp+4Ch], edi
.text:0040D687                 mov     esi, [esp+0ECh+var_88]
.text:0040D68B                 xor     edi, edi
.text:0040D68D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040D695                 mov     edx, [esp+0ECh+var_84]
.text:0040D699                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040D6A1                 or      esi, ebx
.text:0040D6A3                 or      edi, edx
.text:0040D6A5                 mov     edx, esi
.text:0040D6A7                 mov     ebx, edi
.text:0040D6A9                 sub     edx, 0D53E8000h
.text:0040D6AF                 sbb     ebx, 19DB1DEh
.text:0040D6B5                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040D6B9                 mov     [esp+0ECh+hFile], edx
.text:0040D6BC                 call    sub_414FC0
.text:0040D6C1                 mov     ecx, eax
.text:0040D6C3                 shr     eax, 1Fh
.text:0040D6C6                 dec     eax
.text:0040D6C7                 and     ecx, eax
.text:0040D6C9                 mov     [ebp+40h], ecx
.text:0040D6CC                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040D6D0                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040D6D8                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040D6E0                 mov     [esp+0ECh+hFile], esi
.text:0040D6E3                 call    sub_414E40
.text:0040D6E8                 mov     dword ptr [ebp+50h], 200h
.text:0040D6EF                 lea     ebx, [eax+eax*4]
.text:0040D6F2                 mov     edi, [esp+0ECh+var_A8]
.text:0040D6F6                 lea     edx, [ebx+ebx*4]
.text:0040D6F9                 mov     eax, [esp+0ECh+var_AC]
.text:0040D6FD                 shl     edx, 2
.text:0040D700                 mov     ecx, edx
.text:0040D702                 shr     ecx, 1Fh
.text:0040D705                 dec     ecx
.text:0040D706                 and     ecx, edx
.text:0040D708                 test    edi, edi
.text:0040D70A                 mov     edx, [esp+0ECh+var_A8]
.text:0040D70E                 mov     [ebp+44h], ecx
.text:0040D711                 js      loc_40D827
.text:0040D717
.text:0040D717 loc_40D717:                             ; CODE XREF: sub_40D450+3DF↓j
.text:0040D717                 mov     edi, [esp+0ECh+var_AC]
.text:0040D71B                 xor     esi, esi
.text:0040D71D                 mov     ecx, eax
.text:0040D71F                 shrd    ecx, edx, 9
.text:0040D723                 mov     ebx, edx
.text:0040D725                 mov     eax, esi
.text:0040D727                 and     edi, 1FFh
.text:0040D72D                 sar     ebx, 9
.text:0040D730                 or      eax, edi
.text:0040D732                 jz      short loc_40D73A
.text:0040D734                 add     ecx, 1
.text:0040D737                 adc     ebx, 0
.text:0040D73A
.text:0040D73A loc_40D73A:                             ; CODE XREF: sub_40D450+2E2↑j
.text:0040D73A                 mov     [ebp+5Ch], ebx
.text:0040D73D                 mov     esi, dword_4170F0
.text:0040D743                 xor     edi, edi
.text:0040D745                 mov     [ebp+58h], ecx
.text:0040D748                 mov     ebx, dword_4170F0
.text:0040D74E                 mov     ecx, [esp+0ECh+var_A8]
.text:0040D752                 mov     edx, [esp+0ECh+var_AC]
.text:0040D756                 mov     [ebp+50h], ebx
.text:0040D759                 shr     ebx, 9
.text:0040D75C                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040D760                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040D764                 mov     [esp+0ECh+nBufferSize], esi
.text:0040D768                 mov     [esp+0ECh+hFile], edx
.text:0040D76B                 call    sub_414FC0
.text:0040D770                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040D774                 mov     ecx, [esp+0ECh+var_AC]
.text:0040D778                 mov     edi, [esp+0ECh+var_A8]
.text:0040D77C                 mov     [esp+0ECh+var_BC], ebx
.text:0040D780                 mov     [esp+0ECh+var_B4], eax
.text:0040D784                 mov     [esp+0ECh+var_B0], edx
.text:0040D788                 mov     [esp+0ECh+var_B8], 0
.text:0040D790                 mov     [esp+0ECh+nBufferSize], esi
.text:0040D794                 mov     [esp+0ECh+hFile], ecx
.text:0040D797                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040D79B                 call    sub_414E40
.text:0040D7A0                 mov     ebx, edx
.text:0040D7A2                 or      ebx, eax
.text:0040D7A4                 jz      short loc_40D800
.text:0040D7A6                 mov     edi, [esp+0ECh+var_B4]
.text:0040D7AA                 mov     esi, [esp+0ECh+var_B0]
.text:0040D7AE                 mov     eax, [esp+0ECh+var_BC]
.text:0040D7B2                 mov     [esp+0ECh+var_C4], edi
.text:0040D7B6                 mov     ecx, [esp+0ECh+var_B8]
.text:0040D7BA                 add     [esp+0ECh+var_C4], 1
.text:0040D7BF                 mov     [esp+0ECh+var_C0], esi
.text:0040D7C3                 adc     [esp+0ECh+var_C0], 0
.text:0040D7C8                 mul     [esp+0ECh+var_C4]
.text:0040D7CC                 mov     edi, [esp+0ECh+var_C0]
.text:0040D7D0                 mov     ebx, edx
.text:0040D7D2                 mov     edx, [esp+0ECh+var_C4]
.text:0040D7D6                 mov     esi, eax
.text:0040D7D8                 mov     eax, ebx
.text:0040D7DA                 imul    ecx, edx
.text:0040D7DD                 mov     edx, [esp+0ECh+var_BC]
.text:0040D7E1                 imul    edx, edi
.text:0040D7E4                 add     eax, ecx
.text:0040D7E6                 lea     edi, [edx+eax]
.text:0040D7E9
.text:0040D7E9 loc_40D7E9:                             ; CODE XREF: sub_40D450+3D5↓j
.text:0040D7E9                 mov     [ebp+58h], esi
.text:0040D7EC                 xor     eax, eax
.text:0040D7EE                 mov     [ebp+5Ch], edi
.text:0040D7F1
.text:0040D7F1 loc_40D7F1:                             ; CODE XREF: sub_40D450+20↑j
.text:0040D7F1                 add     esp, 0DCh
.text:0040D7F7                 pop     ebx
.text:0040D7F8                 pop     esi
.text:0040D7F9                 pop     edi
.text:0040D7FA                 pop     ebp
.text:0040D7FB                 retn
.text:0040D7FB ; ---------------------------------------------------------------------------
.text:0040D7FC                 align 10h
.text:0040D800
.text:0040D800 loc_40D800:                             ; CODE XREF: sub_40D450+354↑j
.text:0040D800                 mov     eax, [esp+0ECh+var_B4]
.text:0040D804                 mov     edi, [esp+0ECh+var_B8]
.text:0040D808                 mov     ebx, [esp+0ECh+var_B4]
.text:0040D80C                 mul     [esp+0ECh+var_BC]
.text:0040D810                 mov     ecx, [esp+0ECh+var_BC]
.text:0040D814                 imul    ebx, edi
.text:0040D817                 mov     esi, eax
.text:0040D819                 mov     eax, [esp+0ECh+var_B0]
.text:0040D81D                 add     edx, ebx
.text:0040D81F                 imul    ecx, eax
.text:0040D822                 lea     edi, [ecx+edx]
.text:0040D825                 jmp     short loc_40D7E9
.text:0040D827 ; ---------------------------------------------------------------------------
.text:0040D827
.text:0040D827 loc_40D827:                             ; CODE XREF: sub_40D450+2C1↑j
.text:0040D827                 add     eax, 1FFh
.text:0040D82C                 adc     edx, 0
.text:0040D82F                 jmp     loc_40D717
.text:0040D834 ; ---------------------------------------------------------------------------
.text:0040D834
.text:0040D834 loc_40D834:                             ; CODE XREF: sub_40D450+A9↑j
.text:0040D834                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040D837                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040D83E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:0040D842                 call    GetFileSize
.text:0040D847                 sub     esp, 8
.text:0040D84A                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:0040D851                 jmp     loc_40D500
.text:0040D856 ; ---------------------------------------------------------------------------
.text:0040D856
.text:0040D856 loc_40D856:                             ; CODE XREF: sub_40D450+96↑j
.text:0040D856                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:0040D85E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040D862                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:0040D86A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:0040D86E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:0040D876                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0040D87E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:0040D886                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:0040D889                 call    PeekNamedPipe
.text:0040D88E                 sub     esp, 18h
.text:0040D891                 test    eax, eax
.text:0040D893                 jz      short loc_40D8AE
.text:0040D895                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040D899                 xor     eax, eax
.text:0040D89B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:0040D8A2                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:0040D8A9                 jmp     loc_40D4EC
.text:0040D8AE ; ---------------------------------------------------------------------------
.text:0040D8AE
.text:0040D8AE loc_40D8AE:                             ; CODE XREF: sub_40D450+443↑j
.text:0040D8AE                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040D8B5                 jmp     loc_40D4EC
.text:0040D8B5 ; ---------------------------------------------------------------------------
.text:0040D8BA                 align 10h
.text:0040D8C0
.text:0040D8C0 loc_40D8C0:                             ; CODE XREF: sub_40D450+59↑j
.text:0040D8C0                 mov     edx, 1000h
.text:0040D8C5                 jmp     loc_40D4AF
.text:0040D8C5 ; ---------------------------------------------------------------------------
.text:0040D8CA                 align 10h
.text:0040D8D0
.text:0040D8D0 loc_40D8D0:                             ; CODE XREF: sub_40D450+50↑j
.text:0040D8D0                 mov     edx, 2000h
.text:0040D8D5                 jmp     loc_40D4AF
.text:0040D8D5 sub_40D450      endp
.text:0040D8D5
.text:0040D8D5 ; ---------------------------------------------------------------------------
.text:0040D8DA aLnk_0          db '.lnk',0             ; DATA XREF: sub_40D920+E0↓o
.text:0040D8DA                                         ; .text:0040DFCA↓o ...
.text:0040D8DF ; const CHAR aKernel32[]
.text:0040D8DF aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_40D920+12D↓o
.text:0040D8DF                                         ; .text:0040E67B↓o
.text:0040D8E8 ; const CHAR aGetcompressedf[]
.text:0040D8E8 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:0040D8E8                                         ; DATA XREF: sub_40D920+13E↓o
.text:0040D8E8                                         ; .text:0040E68C↓o
.text:0040D8FF ; const CHAR aGetbinarytypea[]
.text:0040D8FF aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_40D920+333↓o
.text:0040D8FF                                         ; .text:0040E026↓o ...
.text:0040D90E ; const char aPathext[]
.text:0040D90E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_40D920:loc_40DD07↓o
.text:0040D90E                                         ; .text:loc_40E0D0↓o ...
.text:0040D916                 align 10h
.text:0040D920
.text:0040D920 ; =============== S U B R O U T I N E =======================================
.text:0040D920
.text:0040D920
.text:0040D920 ; int __cdecl sub_40D920(char *String1, int)
.text:0040D920 sub_40D920      proc near               ; CODE XREF: sub_40E700+3CD↓p
.text:0040D920                                         ; sub_412990-3DAB↓p
.text:0040D920
.text:0040D920 Str             = dword ptr -6Ch
.text:0040D920 lpProcName      = dword ptr -68h
.text:0040D920 var_64          = dword ptr -64h
.text:0040D920 var_60          = dword ptr -60h
.text:0040D920 var_5C          = dword ptr -5Ch
.text:0040D920 var_4C          = dword ptr -4Ch
.text:0040D920 var_48          = dword ptr -48h
.text:0040D920 var_44          = dword ptr -44h
.text:0040D920 var_40          = dword ptr -40h
.text:0040D920 var_3C          = dword ptr -3Ch
.text:0040D920 var_38          = dword ptr -38h
.text:0040D920 lpRootPathName  = dword ptr -30h
.text:0040D920 var_2C          = byte ptr -2Ch
.text:0040D920 var_28          = dword ptr -28h
.text:0040D920 var_24          = dword ptr -24h
.text:0040D920 var_20          = dword ptr -20h
.text:0040D920 var_1C          = dword ptr -1Ch
.text:0040D920 var_18          = byte ptr -18h
.text:0040D920 String1         = dword ptr  4
.text:0040D920 arg_4           = dword ptr  8
.text:0040D920
.text:0040D920                 push    ebp
.text:0040D921                 push    edi
.text:0040D922                 push    esi
.text:0040D923                 push    ebx
.text:0040D924                 sub     esp, 5Ch
.text:0040D927                 mov     edx, [esp+6Ch+String1]
.text:0040D92B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040D92E                 call    sub_40F4D0
.text:0040D933                 mov     [esp+6Ch+Str], eax
.text:0040D936                 call    sub_40F0A0
.text:0040D93B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040D93F                 test    eax, eax
.text:0040D941                 jz      loc_40DB73
.text:0040D947                 mov     [esp+6Ch+Str], eax ; Str
.text:0040D94A                 call    strlen
.text:0040D94F                 mov     edx, [esp+6Ch+arg_4]
.text:0040D953                 mov     ebx, eax
.text:0040D955                 mov     esi, [edx+0Ch]
.text:0040D958                 mov     edi, [edx+8]
.text:0040D95B                 mov     eax, esi
.text:0040D95D                 or      eax, edi
.text:0040D95F                 jz      loc_40DD80
.text:0040D965                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:0040D969                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040D96C                 call    GetDriveTypeA
.text:0040D971                 sub     esp, 4
.text:0040D974                 cmp     eax, 4
.text:0040D977                 jz      loc_40DD80
.text:0040D97D
.text:0040D97D loc_40D97D:                             ; CODE XREF: sub_40D920+48A↓j
.text:0040D97D                                         ; sub_40D920+4B2↓j
.text:0040D97D                 mov     edx, [esp+6Ch+arg_4]
.text:0040D981                 mov     esi, [edx+14h]
.text:0040D984                 mov     edi, [edx+10h]
.text:0040D987                 mov     ecx, esi
.text:0040D989                 or      ecx, edi
.text:0040D98B                 jnz     short loc_40D9B5
.text:0040D98D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:0040D991                 xor     esi, esi
.text:0040D993                 xor     edi, edi
.text:0040D995                 test    ebp, ebp
.text:0040D997                 jz      short loc_40D9A7
.text:0040D999                 movzx   ebx, byte ptr [ebp+0]
.text:0040D99D                 test    bl, bl
.text:0040D99F                 mov     cl, bl
.text:0040D9A1                 jnz     loc_40DD31
.text:0040D9A7
.text:0040D9A7 loc_40D9A7:                             ; CODE XREF: sub_40D920+77↑j
.text:0040D9A7                 xor     eax, eax
.text:0040D9A9                 xor     edx, edx
.text:0040D9AB
.text:0040D9AB loc_40D9AB:                             ; CODE XREF: sub_40D920+458↓j
.text:0040D9AB                 mov     ebp, [esp+6Ch+arg_4]
.text:0040D9AF                 mov     [ebp+10h], eax
.text:0040D9B2                 mov     [ebp+14h], edx
.text:0040D9B5
.text:0040D9B5 loc_40D9B5:                             ; CODE XREF: sub_40D920+6B↑j
.text:0040D9B5                 mov     edi, [esp+6Ch+String1]
.text:0040D9B9                 xor     ebx, ebx
.text:0040D9BB                 test    edi, edi
.text:0040D9BD                 jz      loc_40DC33
.text:0040D9C3                 mov     esi, [esp+6Ch+String1]
.text:0040D9C7                 cmp     byte ptr [esi], 0
.text:0040D9CA                 jnz     loc_40DC40
.text:0040D9D0
.text:0040D9D0 loc_40D9D0:                             ; CODE XREF: sub_40D920+38C↓j
.text:0040D9D0                                         ; sub_40D920+397↓j
.text:0040D9D0                 mov     ebp, [esp+6Ch+String1]
.text:0040D9D4                 test    ebp, ebp
.text:0040D9D6                 jz      loc_40DC33
.text:0040D9DC                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040D9E4                 mov     edi, [esp+6Ch+String1]
.text:0040D9E8                 mov     [esp+6Ch+Str], edi ; Str
.text:0040D9EB                 call    strrchr
.text:0040D9F0                 test    eax, eax
.text:0040D9F2                 jz      loc_40DC33
.text:0040D9F8                 cld
.text:0040D9F9                 mov     ecx, 5
.text:0040D9FE                 mov     esi, eax
.text:0040DA00                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040DA05                 repe cmpsb
.text:0040DA07                 setz    cl
.text:0040DA0A                 movzx   eax, cl
.text:0040DA0D                 lea     esi, [esi+0]
.text:0040DA10
.text:0040DA10 loc_40DA10:                             ; CODE XREF: sub_40D920+315↓j
.text:0040DA10                 test    eax, eax
.text:0040DA12                 jz      short loc_40DA1A
.text:0040DA14                 or      ebx, 0A000h
.text:0040DA1A
.text:0040DA1A loc_40DA1A:                             ; CODE XREF: sub_40D920+F2↑j
.text:0040DA1A                 mov     esi, [esp+6Ch+arg_4]
.text:0040DA1E                 xor     ecx, ecx
.text:0040DA20                 mov     edi, ds:dword_418690
.text:0040DA26                 or      [esi], ebx
.text:0040DA28                 mov     ebx, [esi+14h]
.text:0040DA2B                 mov     ebp, [esi+10h]
.text:0040DA2E                 mov     eax, ebx
.text:0040DA30                 xor     eax, ecx
.text:0040DA32                 xor     ebp, edi
.text:0040DA34                 or      eax, ebp
.text:0040DA36                 jnz     loc_40DBC0
.text:0040DA3C
.text:0040DA3C loc_40DA3C:                             ; CODE XREF: sub_40D920+30E↓j
.text:0040DA3C                 mov     ecx, dword_4170F0
.text:0040DA42                 xor     esi, esi
.text:0040DA44                 xor     edi, edi
.text:0040DA46                 mov     edx, [esp+6Ch+arg_4]
.text:0040DA4A                 mov     [edx+50h], ecx
.text:0040DA4D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:0040DA54                 call    LoadLibraryA
.text:0040DA59                 sub     esp, 4
.text:0040DA5C                 mov     ebp, eax
.text:0040DA5E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040DA66                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040DA69                 call    GetProcAddress
.text:0040DA6E                 sub     esp, 8
.text:0040DA71                 test    eax, eax
.text:0040DA73                 jz      short loc_40DAA8
.text:0040DA75                 mov     ebx, [esp+6Ch+String1]
.text:0040DA79                 lea     esi, [esp+6Ch+var_2C]
.text:0040DA7D                 mov     [esp+6Ch+lpProcName], esi
.text:0040DA81                 mov     [esp+6Ch+Str], ebx
.text:0040DA84                 call    eax
.text:0040DA86                 sub     esp, 8
.text:0040DA89                 mov     ebx, eax
.text:0040DA8B                 cmp     eax, 0FFFFFFFFh
.text:0040DA8E                 jz      loc_40DBA9
.text:0040DA94
.text:0040DA94 loc_40DA94:                             ; CODE XREF: sub_40D920+29A↓j
.text:0040DA94                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:0040DA98                 mov     ecx, ebx
.text:0040DA9A                 xor     edi, edi
.text:0040DA9C                 xor     ebx, ebx
.text:0040DA9E                 mov     edx, esi
.text:0040DAA0                 mov     esi, ecx
.text:0040DAA2                 or      esi, edi
.text:0040DAA4                 mov     edi, ebx
.text:0040DAA6                 or      edi, edx
.text:0040DAA8
.text:0040DAA8 loc_40DAA8:                             ; CODE XREF: sub_40D920+153↑j
.text:0040DAA8                                         ; sub_40D920+294↓j
.text:0040DAA8                 test    ebp, ebp
.text:0040DAAA                 jz      short loc_40DAB7
.text:0040DAAC                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040DAAF                 call    FreeLibrary
.text:0040DAB4                 sub     esp, 4
.text:0040DAB7
.text:0040DAB7 loc_40DAB7:                             ; CODE XREF: sub_40D920+18A↑j
.text:0040DAB7                 mov     ebp, edi
.text:0040DAB9                 mov     edx, ebp
.text:0040DABB                 mov     edi, esi
.text:0040DABD                 or      edx, esi
.text:0040DABF                 jnz     short loc_40DACB
.text:0040DAC1                 mov     eax, [esp+6Ch+arg_4]
.text:0040DAC5                 mov     edi, [eax+30h]
.text:0040DAC8                 mov     ebp, [eax+34h]
.text:0040DACB
.text:0040DACB loc_40DACB:                             ; CODE XREF: sub_40D920+19F↑j
.text:0040DACB                 mov     [esp+6Ch+lpProcName], ebp
.text:0040DACF                 mov     ebx, dword_4170F0
.text:0040DAD5                 xor     esi, esi
.text:0040DAD7                 mov     [esp+6Ch+var_60], esi
.text:0040DADB                 mov     [esp+6Ch+Str], edi
.text:0040DADE                 mov     [esp+6Ch+var_64], ebx
.text:0040DAE2                 call    sub_414FC0
.text:0040DAE7                 mov     [esp+6Ch+var_3C], eax
.text:0040DAEB                 mov     ecx, dword_4170F0
.text:0040DAF1                 mov     [esp+6Ch+lpProcName], ebp
.text:0040DAF5                 mov     [esp+6Ch+var_38], edx
.text:0040DAF9                 shr     ecx, 9
.text:0040DAFC                 mov     [esp+6Ch+var_44], ecx
.text:0040DB00                 mov     [esp+6Ch+var_40], 0
.text:0040DB08                 mov     [esp+6Ch+var_64], ebx
.text:0040DB0C                 mov     [esp+6Ch+var_60], esi
.text:0040DB10                 mov     [esp+6Ch+Str], edi
.text:0040DB13                 call    sub_414E40
.text:0040DB18                 mov     ebp, edx
.text:0040DB1A                 or      ebp, eax
.text:0040DB1C                 jz      short loc_40DB80
.text:0040DB1E                 mov     ebp, [esp+6Ch+var_3C]
.text:0040DB22                 mov     esi, [esp+6Ch+var_38]
.text:0040DB26                 mov     eax, [esp+6Ch+var_44]
.text:0040DB2A                 mov     [esp+6Ch+var_4C], ebp
.text:0040DB2E                 mov     ecx, [esp+6Ch+var_40]
.text:0040DB32                 mov     ebx, [esp+6Ch+var_44]
.text:0040DB36                 add     [esp+6Ch+var_4C], 1
.text:0040DB3B                 mov     [esp+6Ch+var_48], esi
.text:0040DB3F                 mov     edi, [esp+6Ch+var_4C]
.text:0040DB43                 adc     [esp+6Ch+var_48], 0
.text:0040DB48                 mul     [esp+6Ch+var_4C]
.text:0040DB4C                 imul    ecx, edi
.text:0040DB4F                 mov     esi, eax
.text:0040DB51                 mov     eax, [esp+6Ch+var_48]
.text:0040DB55                 add     edx, ecx
.text:0040DB57                 imul    ebx, eax
.text:0040DB5A                 lea     edi, [ebx+edx]
.text:0040DB5D
.text:0040DB5D loc_40DB5D:                             ; CODE XREF: sub_40D920+287↓j
.text:0040DB5D                 mov     ebx, [esp+6Ch+arg_4]
.text:0040DB61                 mov     [ebx+58h], esi
.text:0040DB64                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040DB68                 mov     [ebx+5Ch], edi
.text:0040DB6B                 mov     [esp+6Ch+Str], esi ; Block
.text:0040DB6E                 call    free
.text:0040DB73
.text:0040DB73 loc_40DB73:                             ; CODE XREF: sub_40D920+21↑j
.text:0040DB73                 add     esp, 5Ch
.text:0040DB76                 xor     eax, eax
.text:0040DB78                 pop     ebx
.text:0040DB79                 pop     esi
.text:0040DB7A                 pop     edi
.text:0040DB7B                 pop     ebp
.text:0040DB7C                 retn
.text:0040DB7C ; ---------------------------------------------------------------------------
.text:0040DB7D                 align 10h
.text:0040DB80
.text:0040DB80 loc_40DB80:                             ; CODE XREF: sub_40D920+1FC↑j
.text:0040DB80                 mov     eax, [esp+6Ch+var_3C]
.text:0040DB84                 mov     edi, [esp+6Ch+var_40]
.text:0040DB88                 mov     ecx, [esp+6Ch+var_3C]
.text:0040DB8C                 mul     [esp+6Ch+var_44]
.text:0040DB90                 mov     ebx, [esp+6Ch+var_44]
.text:0040DB94                 imul    ecx, edi
.text:0040DB97                 mov     ebp, edx
.text:0040DB99                 mov     esi, eax
.text:0040DB9B                 mov     edx, [esp+6Ch+var_38]
.text:0040DB9F                 add     ebp, ecx
.text:0040DBA1                 imul    ebx, edx
.text:0040DBA4                 lea     edi, [ebx+ebp]
.text:0040DBA7                 jmp     short loc_40DB5D
.text:0040DBA9 ; ---------------------------------------------------------------------------
.text:0040DBA9
.text:0040DBA9 loc_40DBA9:                             ; CODE XREF: sub_40D920+16E↑j
.text:0040DBA9                 call    GetLastError
.text:0040DBAE                 xor     esi, esi
.text:0040DBB0                 xor     edi, edi
.text:0040DBB2                 test    eax, eax
.text:0040DBB4                 jnz     loc_40DAA8
.text:0040DBBA                 jmp     loc_40DA94
.text:0040DBBA ; ---------------------------------------------------------------------------
.text:0040DBBF                 align 10h
.text:0040DBC0
.text:0040DBC0 loc_40DBC0:                             ; CODE XREF: sub_40D920+116↑j
.text:0040DBC0                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040DBC4                 lea     ecx, [esp+6Ch+var_20]
.text:0040DBC8                 lea     ebx, [esp+6Ch+var_1C]
.text:0040DBCC                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040DBD0                 lea     edi, [esp+6Ch+var_24]
.text:0040DBD4                 lea     ebp, [esp+6Ch+var_28]
.text:0040DBD8                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040DBDC                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040DBE0                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040DBE4                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040DBE7                 call    sub_40FF20
.text:0040DBEC                 test    eax, eax
.text:0040DBEE                 jnz     short loc_40DC10
.text:0040DBF0                 mov     [esp+6Ch+var_28], 1
.text:0040DBF8                 mov     [esp+6Ch+var_24], 200h
.text:0040DC00                 mov     [esp+6Ch+var_20], 0
.text:0040DC08                 mov     [esp+6Ch+var_1C], 0
.text:0040DC10
.text:0040DC10 loc_40DC10:                             ; CODE XREF: sub_40D920+2CE↑j
.text:0040DC10                 mov     ebp, [esp+6Ch+var_24]
.text:0040DC14                 mov     edi, [esp+6Ch+var_28]
.text:0040DC18                 mov     eax, [esp+6Ch+arg_4]
.text:0040DC1C                 imul    ebp, edi
.text:0040DC1F                 mov     esi, [eax+10h]
.text:0040DC22                 mov     dword_4170F0, ebp
.text:0040DC28                 mov     ds:dword_418690, esi
.text:0040DC2E                 jmp     loc_40DA3C
.text:0040DC33 ; ---------------------------------------------------------------------------
.text:0040DC33
.text:0040DC33 loc_40DC33:                             ; CODE XREF: sub_40D920+9D↑j
.text:0040DC33                                         ; sub_40D920+B6↑j ...
.text:0040DC33                 xor     eax, eax
.text:0040DC35                 jmp     loc_40DA10
.text:0040DC35 ; ---------------------------------------------------------------------------
.text:0040DC3A                 align 10h
.text:0040DC40
.text:0040DC40 loc_40DC40:                             ; CODE XREF: sub_40D920+AA↑j
.text:0040DC40                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:0040DC47                 xor     ebp, ebp
.text:0040DC49                 call    GetModuleHandleA
.text:0040DC4E                 sub     esp, 4
.text:0040DC51                 mov     edi, eax
.text:0040DC53                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040DC5B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040DC5E                 call    GetProcAddress
.text:0040DC63                 sub     esp, 8
.text:0040DC66                 mov     edx, eax
.text:0040DC68                 test    eax, eax
.text:0040DC6A                 jz      short loc_40DC84
.text:0040DC6C                 mov     eax, [esp+6Ch+String1]
.text:0040DC70                 lea     ecx, [esp+6Ch+var_18]
.text:0040DC74                 mov     [esp+6Ch+lpProcName], ecx
.text:0040DC78                 mov     [esp+6Ch+Str], eax
.text:0040DC7B                 call    edx
.text:0040DC7D                 sub     esp, 8
.text:0040DC80                 test    eax, eax
.text:0040DC82                 jnz     short loc_40DCE8
.text:0040DC84
.text:0040DC84 loc_40DC84:                             ; CODE XREF: sub_40D920+34A↑j
.text:0040DC84                 mov     edx, ds:Str
.text:0040DC8A                 test    edx, edx
.text:0040DC8C                 jz      short loc_40DD07
.text:0040DC8E
.text:0040DC8E loc_40DC8E:                             ; CODE XREF: sub_40D920+3FA↓j
.text:0040DC8E                                         ; sub_40D920+40C↓j
.text:0040DC8E                 mov     eax, [esp+6Ch+String1]
.text:0040DC92                 test    eax, eax
.text:0040DC94                 jz      short loc_40DC9F
.text:0040DC96                 mov     esi, [esp+6Ch+String1]
.text:0040DC9A                 cmp     byte ptr [esi], 0
.text:0040DC9D                 jnz     short loc_40DCBC
.text:0040DC9F
.text:0040DC9F loc_40DC9F:                             ; CODE XREF: sub_40D920+374↑j
.text:0040DC9F                                         ; sub_40D920+3B0↓j ...
.text:0040DC9F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040DCA2                 call    FreeLibrary
.text:0040DCA7                 sub     esp, 4
.text:0040DCAA                 test    ebp, ebp
.text:0040DCAC                 jz      loc_40D9D0
.text:0040DCB2                 mov     ebx, 49h ; 'I'
.text:0040DCB7                 jmp     loc_40D9D0
.text:0040DCBC ; ---------------------------------------------------------------------------
.text:0040DCBC
.text:0040DCBC loc_40DCBC:                             ; CODE XREF: sub_40D920+37D↑j
.text:0040DCBC                 mov     [esp+6Ch+Str], esi ; Str
.text:0040DCBF                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040DCC7                 call    strrchr
.text:0040DCCC                 test    eax, eax
.text:0040DCCE                 mov     esi, eax
.text:0040DCD0                 jz      short loc_40DC9F
.text:0040DCD2                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040DCD6                 mov     ecx, ds:Str
.text:0040DCDC                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040DCDF                 call    strstr
.text:0040DCE4                 test    eax, eax
.text:0040DCE6                 jz      short loc_40DCEF
.text:0040DCE8
.text:0040DCE8 loc_40DCE8:                             ; CODE XREF: sub_40D920+362↑j
.text:0040DCE8                                         ; sub_40D920+3E5↓j
.text:0040DCE8                 mov     ebp, 1
.text:0040DCED                 jmp     short loc_40DC9F
.text:0040DCEF ; ---------------------------------------------------------------------------
.text:0040DCEF
.text:0040DCEF loc_40DCEF:                             ; CODE XREF: sub_40D920+3C6↑j
.text:0040DCEF                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040DCF3                 mov     edx, off_4170F4 ; ".com;.exe;.bat;.cmd"
.text:0040DCF9                 mov     [esp+6Ch+Str], edx ; Str
.text:0040DCFC                 call    strstr
.text:0040DD01                 test    eax, eax
.text:0040DD03                 jz      short loc_40DC9F
.text:0040DD05                 jmp     short loc_40DCE8
.text:0040DD07 ; ---------------------------------------------------------------------------
.text:0040DD07
.text:0040DD07 loc_40DD07:                             ; CODE XREF: sub_40D920+36C↑j
.text:0040DD07                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040DD0E                 call    getenv
.text:0040DD13                 mov     ds:Str, eax
.text:0040DD18                 test    eax, eax
.text:0040DD1A                 jnz     loc_40DC8E
.text:0040DD20                 mov     esi, off_4170F4 ; ".com;.exe;.bat;.cmd"
.text:0040DD26                 mov     ds:Str, esi
.text:0040DD2C                 jmp     loc_40DC8E
.text:0040DD31 ; ---------------------------------------------------------------------------
.text:0040DD31
.text:0040DD31 loc_40DD31:                             ; CODE XREF: sub_40D920+81↑j
.text:0040DD31                                         ; sub_40D920+452↓j
.text:0040DD31                 shld    edi, esi, 8
.text:0040DD35                 movsx   eax, cl
.text:0040DD38                 shl     esi, 8
.text:0040DD3B                 cdq
.text:0040DD3C                 add     esi, eax
.text:0040DD3E                 adc     edi, edx
.text:0040DD40                 mov     edx, edi
.text:0040DD42                 xor     ebx, ebx
.text:0040DD44                 and     edx, 0FF000000h
.text:0040DD4A                 mov     eax, edx
.text:0040DD4C                 or      eax, ebx
.text:0040DD4E                 jz      short loc_40DD69
.text:0040DD50                 mov     ecx, edx
.text:0040DD52                 xor     eax, eax
.text:0040DD54                 shr     ecx, 10h
.text:0040DD57                 mov     edx, esi
.text:0040DD59                 xor     edx, ecx
.text:0040DD5B                 mov     ecx, edi
.text:0040DD5D                 xor     ecx, eax
.text:0040DD5F                 mov     esi, edx
.text:0040DD61                 mov     edi, ecx
.text:0040DD63                 and     edi, 0FFFFFFh
.text:0040DD69
.text:0040DD69 loc_40DD69:                             ; CODE XREF: sub_40D920+42E↑j
.text:0040DD69                 inc     ebp
.text:0040DD6A                 movzx   ebx, byte ptr [ebp+0]
.text:0040DD6E                 test    bl, bl
.text:0040DD70                 mov     cl, bl
.text:0040DD72                 jnz     short loc_40DD31
.text:0040DD74                 mov     eax, esi
.text:0040DD76                 mov     edx, edi
.text:0040DD78                 jmp     loc_40D9AB
.text:0040DD78 ; ---------------------------------------------------------------------------
.text:0040DD7D                 align 10h
.text:0040DD80
.text:0040DD80 loc_40DD80:                             ; CODE XREF: sub_40D920+3F↑j
.text:0040DD80                                         ; sub_40D920+57↑j
.text:0040DD80                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040DD84                 mov     ebp, [esp+6Ch+String1]
.text:0040DD88                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040DD8C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040DD8F                 call    _stricmp
.text:0040DD94                 test    eax, eax
.text:0040DD96                 jnz     short loc_40DDB0
.text:0040DD98                 mov     ebx, [esp+6Ch+arg_4]
.text:0040DD9C                 mov     dword ptr [ebx+8], 5
.text:0040DDA3                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040DDAA                 jmp     loc_40D97D
.text:0040DDAA ; ---------------------------------------------------------------------------
.text:0040DDAF                 align 10h
.text:0040DDB0
.text:0040DDB0 loc_40DDB0:                             ; CODE XREF: sub_40D920+476↑j
.text:0040DDB0                 mov     ebp, [esp+6Ch+String1]
.text:0040DDB4                 xor     esi, esi
.text:0040DDB6                 xor     edi, edi
.text:0040DDB8                 add     ebp, ebx
.text:0040DDBA                 jz      short loc_40DDC4
.text:0040DDBC                 movzx   ecx, byte ptr [ebp+0]
.text:0040DDC0                 test    cl, cl
.text:0040DDC2                 jnz     short loc_40DDD7
.text:0040DDC4
.text:0040DDC4 loc_40DDC4:                             ; CODE XREF: sub_40D920+49A↑j
.text:0040DDC4                 xor     eax, eax
.text:0040DDC6                 xor     edx, edx
.text:0040DDC8
.text:0040DDC8 loc_40DDC8:                             ; CODE XREF: sub_40D920+4FE↓j
.text:0040DDC8                 mov     ebp, [esp+6Ch+arg_4]
.text:0040DDCC                 mov     [ebp+8], eax
.text:0040DDCF                 mov     [ebp+0Ch], edx
.text:0040DDD2                 jmp     loc_40D97D
.text:0040DDD7 ; ---------------------------------------------------------------------------
.text:0040DDD7
.text:0040DDD7 loc_40DDD7:                             ; CODE XREF: sub_40D920+4A2↑j
.text:0040DDD7                                         ; sub_40D920+4F8↓j
.text:0040DDD7                 shld    edi, esi, 8
.text:0040DDDB                 movsx   eax, cl
.text:0040DDDE                 shl     esi, 8
.text:0040DDE1                 cdq
.text:0040DDE2                 add     esi, eax
.text:0040DDE4                 adc     edi, edx
.text:0040DDE6                 mov     edx, edi
.text:0040DDE8                 xor     ebx, ebx
.text:0040DDEA                 and     edx, 0FF000000h
.text:0040DDF0                 mov     eax, edx
.text:0040DDF2                 or      eax, ebx
.text:0040DDF4                 jz      short loc_40DE0F
.text:0040DDF6                 mov     ecx, edx
.text:0040DDF8                 xor     eax, eax
.text:0040DDFA                 shr     ecx, 10h
.text:0040DDFD                 mov     edx, esi
.text:0040DDFF                 xor     edx, ecx
.text:0040DE01                 mov     ecx, edi
.text:0040DE03                 xor     ecx, eax
.text:0040DE05                 mov     esi, edx
.text:0040DE07                 mov     edi, ecx
.text:0040DE09                 and     edi, 0FFFFFFh
.text:0040DE0F
.text:0040DE0F loc_40DE0F:                             ; CODE XREF: sub_40D920+4D4↑j
.text:0040DE0F                 inc     ebp
.text:0040DE10                 movzx   ebx, byte ptr [ebp+0]
.text:0040DE14                 test    bl, bl
.text:0040DE16                 mov     cl, bl
.text:0040DE18                 jnz     short loc_40DDD7
.text:0040DE1A                 mov     eax, esi
.text:0040DE1C                 mov     edx, edi
.text:0040DE1E                 jmp     short loc_40DDC8
.text:0040DE1E sub_40D920      endp
.text:0040DE1E
.text:0040DE20
.text:0040DE20 ; =============== S U B R O U T I N E =======================================
.text:0040DE20
.text:0040DE20
.text:0040DE20 ; int __cdecl sub_40DE20(LPCSTR)
.text:0040DE20 sub_40DE20      proc near               ; CODE XREF: sub_40F5F0+CA↓p
.text:0040DE20
.text:0040DE20 lpRootPathName  = dword ptr -83Ch
.text:0040DE20 lpVolumeNameBuffer= dword ptr -838h
.text:0040DE20 nVolumeNameSize = dword ptr -834h
.text:0040DE20 lpVolumeSerialNumber= dword ptr -830h
.text:0040DE20 lpMaximumComponentLength= dword ptr -82Ch
.text:0040DE20 lpFileSystemFlags= dword ptr -828h
.text:0040DE20 lpFileSystemNameBuffer= dword ptr -824h
.text:0040DE20 nFileSystemNameSize= dword ptr -820h
.text:0040DE20 VolumeSerialNumber= dword ptr -818h
.text:0040DE20 MaximumComponentLength= dword ptr -814h
.text:0040DE20 FileSystemFlags = dword ptr -810h
.text:0040DE20 FileSystemNameBuffer= byte ptr -80Ch
.text:0040DE20 VolumeNameBuffer= byte ptr -40Ch
.text:0040DE20 var_4           = dword ptr -4
.text:0040DE20 arg_0           = dword ptr  4
.text:0040DE20
.text:0040DE20                 sub     esp, 83Ch
.text:0040DE26                 mov     [esp+83Ch+var_4], ebx
.text:0040DE2D                 mov     ebx, [esp+83Ch+arg_0]
.text:0040DE34                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040DE37                 call    sub_40F4D0
.text:0040DE3C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040DE3F                 call    sub_40F0A0
.text:0040DE44                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040DE47                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040DE4B                 mov     ebx, eax
.text:0040DE4D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040DE51                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040DE55                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040DE59                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040DE5D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040DE61                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040DE65                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040DE6C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040DE70                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040DE74                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040DE7C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040DE84                 call    GetVolumeInformationA
.text:0040DE89                 sub     esp, 20h
.text:0040DE8C                 test    eax, eax
.text:0040DE8E                 setz    cl
.text:0040DE91                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040DE94                 movzx   edx, cl
.text:0040DE97                 dec     edx
.text:0040DE98                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040DE9C                 call    free
.text:0040DEA1                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040DEA5                 mov     ebx, [esp+83Ch+var_4]
.text:0040DEAC                 add     esp, 83Ch
.text:0040DEB2                 retn
.text:0040DEB2 sub_40DE20      endp
.text:0040DEB2
.text:0040DEB2 ; ---------------------------------------------------------------------------
.text:0040DEB3                 align 10h
.text:0040DEC0                 push    ebp
.text:0040DEC1                 push    edi
.text:0040DEC2                 xor     edi, edi
.text:0040DEC4                 push    esi
.text:0040DEC5                 xor     esi, esi
.text:0040DEC7                 push    ebx
.text:0040DEC8                 mov     ebp, [esp+14h]
.text:0040DECC                 test    ebp, ebp
.text:0040DECE                 jz      short loc_40DED8
.text:0040DED0                 movzx   ecx, byte ptr [ebp+0]
.text:0040DED4                 test    cl, cl
.text:0040DED6                 jnz     short loc_40DEE1
.text:0040DED8
.text:0040DED8 loc_40DED8:                             ; CODE XREF: .text:0040DECE↑j
.text:0040DED8                 xor     eax, eax
.text:0040DEDA                 xor     edx, edx
.text:0040DEDC
.text:0040DEDC loc_40DEDC:                             ; CODE XREF: .text:0040DF28↓j
.text:0040DEDC                 pop     ebx
.text:0040DEDD                 pop     esi
.text:0040DEDE                 pop     edi
.text:0040DEDF                 pop     ebp
.text:0040DEE0                 retn
.text:0040DEE1 ; ---------------------------------------------------------------------------
.text:0040DEE1
.text:0040DEE1 loc_40DEE1:                             ; CODE XREF: .text:0040DED6↑j
.text:0040DEE1                                         ; .text:0040DF22↓j
.text:0040DEE1                 shld    edi, esi, 8
.text:0040DEE5                 movsx   eax, cl
.text:0040DEE8                 shl     esi, 8
.text:0040DEEB                 cdq
.text:0040DEEC                 add     esi, eax
.text:0040DEEE                 adc     edi, edx
.text:0040DEF0                 mov     edx, edi
.text:0040DEF2                 xor     ebx, ebx
.text:0040DEF4                 and     edx, 0FF000000h
.text:0040DEFA                 mov     eax, edx
.text:0040DEFC                 or      eax, ebx
.text:0040DEFE                 jz      short loc_40DF19
.text:0040DF00                 mov     ecx, edx
.text:0040DF02                 xor     eax, eax
.text:0040DF04                 shr     ecx, 10h
.text:0040DF07                 mov     edx, esi
.text:0040DF09                 xor     edx, ecx
.text:0040DF0B                 mov     ecx, edi
.text:0040DF0D                 xor     ecx, eax
.text:0040DF0F                 mov     esi, edx
.text:0040DF11                 mov     edi, ecx
.text:0040DF13                 and     edi, 0FFFFFFh
.text:0040DF19
.text:0040DF19 loc_40DF19:                             ; CODE XREF: .text:0040DEFE↑j
.text:0040DF19                 inc     ebp
.text:0040DF1A                 movzx   ebx, byte ptr [ebp+0]
.text:0040DF1E                 test    bl, bl
.text:0040DF20                 mov     cl, bl
.text:0040DF22                 jnz     short loc_40DEE1
.text:0040DF24                 mov     eax, esi
.text:0040DF26                 mov     edx, edi
.text:0040DF28                 jmp     short loc_40DEDC
.text:0040DF28 ; ---------------------------------------------------------------------------
.text:0040DF2A                 align 10h
.text:0040DF30                 sub     esp, 2Ch
.text:0040DF33                 lea     edx, [esp+24h]
.text:0040DF37                 lea     ecx, [esp+28h]
.text:0040DF3B                 mov     [esp+0Ch], edx
.text:0040DF3F                 lea     edx, [esp+1Ch]
.text:0040DF43                 mov     [esp+4], edx
.text:0040DF47                 mov     edx, [esp+30h]
.text:0040DF4B                 mov     [esp+10h], ecx
.text:0040DF4F                 lea     ecx, [esp+20h]
.text:0040DF53                 mov     [esp+8], ecx
.text:0040DF57                 mov     [esp], edx
.text:0040DF5A                 call    sub_40FF20
.text:0040DF5F                 test    eax, eax
.text:0040DF61                 jnz     short loc_40DF83
.text:0040DF63                 mov     dword ptr [esp+1Ch], 1
.text:0040DF6B                 mov     dword ptr [esp+20h], 200h
.text:0040DF73                 mov     dword ptr [esp+24h], 0
.text:0040DF7B                 mov     dword ptr [esp+28h], 0
.text:0040DF83
.text:0040DF83 loc_40DF83:                             ; CODE XREF: .text:0040DF61↑j
.text:0040DF83                 mov     eax, [esp+20h]
.text:0040DF87                 mov     ecx, [esp+1Ch]
.text:0040DF8B                 add     esp, 2Ch
.text:0040DF8E                 imul    eax, ecx
.text:0040DF91                 retn
.text:0040DF91 ; ---------------------------------------------------------------------------
.text:0040DF92                 align 10h
.text:0040DFA0                 sub     esp, 1Ch
.text:0040DFA3                 mov     eax, [esp+20h]
.text:0040DFA7                 mov     [esp+14h], esi
.text:0040DFAB                 mov     [esp+18h], edi
.text:0040DFAF                 test    eax, eax
.text:0040DFB1                 jz      short loc_40DFF0
.text:0040DFB3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040DFBB                 mov     [esp], eax
.text:0040DFBE                 call    strrchr
.text:0040DFC3                 test    eax, eax
.text:0040DFC5                 jz      short loc_40DFF0
.text:0040DFC7                 cld
.text:0040DFC8                 mov     esi, eax
.text:0040DFCA                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040DFCF                 mov     ecx, 5
.text:0040DFD4                 repe cmpsb
.text:0040DFD6                 setz    dl
.text:0040DFD9                 movzx   eax, dl
.text:0040DFDC                 lea     esi, [esi+0]
.text:0040DFE0
.text:0040DFE0 loc_40DFE0:                             ; CODE XREF: .text:0040DFF2↓j
.text:0040DFE0                 mov     esi, [esp+14h]
.text:0040DFE4                 mov     edi, [esp+18h]
.text:0040DFE8                 add     esp, 1Ch
.text:0040DFEB                 retn
.text:0040DFEB ; ---------------------------------------------------------------------------
.text:0040DFEC                 align 10h
.text:0040DFF0
.text:0040DFF0 loc_40DFF0:                             ; CODE XREF: .text:0040DFB1↑j
.text:0040DFF0                                         ; .text:0040DFC5↑j
.text:0040DFF0                 xor     eax, eax
.text:0040DFF2                 jmp     short loc_40DFE0
.text:0040DFF2 ; ---------------------------------------------------------------------------
.text:0040DFF4                 align 10h
.text:0040E000                 sub     esp, 1Ch
.text:0040E003                 mov     [esp+10h], ebx
.text:0040E007                 mov     ebx, [esp+20h]
.text:0040E00B                 mov     [esp+14h], esi
.text:0040E00F                 mov     [esp+18h], edi
.text:0040E013                 xor     edi, edi
.text:0040E015                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040E01C                 call    GetModuleHandleA
.text:0040E021                 sub     esp, 4
.text:0040E024                 mov     esi, eax
.text:0040E026                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040E02E                 mov     [esp], eax
.text:0040E031                 call    GetProcAddress
.text:0040E036                 sub     esp, 8
.text:0040E039                 test    eax, eax
.text:0040E03B                 jz      short loc_40E051
.text:0040E03D                 mov     [esp], ebx
.text:0040E040                 lea     ecx, [esp+0Ch]
.text:0040E044                 mov     [esp+4], ecx
.text:0040E048                 call    eax
.text:0040E04A                 sub     esp, 8
.text:0040E04D                 test    eax, eax
.text:0040E04F                 jnz     short loc_40E0B0
.text:0040E051
.text:0040E051 loc_40E051:                             ; CODE XREF: .text:0040E03B↑j
.text:0040E051                 mov     eax, ds:Str
.text:0040E056                 test    eax, eax
.text:0040E058                 jz      short loc_40E0D0
.text:0040E05A
.text:0040E05A loc_40E05A:                             ; CODE XREF: .text:0040E0E3↓j
.text:0040E05A                                         ; .text:0040E0F5↓j
.text:0040E05A                 test    ebx, ebx
.text:0040E05C                 jz      short loc_40E063
.text:0040E05E                 cmp     byte ptr [ebx], 0
.text:0040E061                 jnz     short loc_40E080
.text:0040E063
.text:0040E063 loc_40E063:                             ; CODE XREF: .text:0040E05C↑j
.text:0040E063                                         ; .text:0040E094↓j ...
.text:0040E063                 mov     [esp], esi
.text:0040E066                 call    FreeLibrary
.text:0040E06B                 sub     esp, 4
.text:0040E06E                 mov     eax, edi
.text:0040E070                 mov     ebx, [esp+10h]
.text:0040E074                 mov     esi, [esp+14h]
.text:0040E078                 mov     edi, [esp+18h]
.text:0040E07C                 add     esp, 1Ch
.text:0040E07F                 retn
.text:0040E080 ; ---------------------------------------------------------------------------
.text:0040E080
.text:0040E080 loc_40E080:                             ; CODE XREF: .text:0040E061↑j
.text:0040E080                 mov     [esp], ebx
.text:0040E083                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040E08B                 call    strrchr
.text:0040E090                 test    eax, eax
.text:0040E092                 mov     ebx, eax
.text:0040E094                 jz      short loc_40E063
.text:0040E096                 mov     [esp+4], eax
.text:0040E09A                 mov     ecx, ds:Str
.text:0040E0A0                 mov     [esp], ecx
.text:0040E0A3                 call    strstr
.text:0040E0A8                 test    eax, eax
.text:0040E0AA                 jz      short loc_40E0B7
.text:0040E0AC                 lea     esi, [esi+0]
.text:0040E0B0
.text:0040E0B0 loc_40E0B0:                             ; CODE XREF: .text:0040E04F↑j
.text:0040E0B0                                         ; .text:0040E0CD↓j
.text:0040E0B0                 mov     edi, 1
.text:0040E0B5                 jmp     short loc_40E063
.text:0040E0B7 ; ---------------------------------------------------------------------------
.text:0040E0B7
.text:0040E0B7 loc_40E0B7:                             ; CODE XREF: .text:0040E0AA↑j
.text:0040E0B7                 mov     [esp+4], ebx
.text:0040E0BB                 mov     ebx, off_4170F4 ; ".com;.exe;.bat;.cmd"
.text:0040E0C1                 mov     [esp], ebx
.text:0040E0C4                 call    strstr
.text:0040E0C9                 test    eax, eax
.text:0040E0CB                 jz      short loc_40E063
.text:0040E0CD                 jmp     short loc_40E0B0
.text:0040E0CD ; ---------------------------------------------------------------------------
.text:0040E0CF                 align 10h
.text:0040E0D0
.text:0040E0D0 loc_40E0D0:                             ; CODE XREF: .text:0040E058↑j
.text:0040E0D0                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040E0D7                 call    getenv
.text:0040E0DC                 mov     ds:Str, eax
.text:0040E0E1                 test    eax, eax
.text:0040E0E3                 jnz     loc_40E05A
.text:0040E0E9                 mov     edx, off_4170F4 ; ".com;.exe;.bat;.cmd"
.text:0040E0EF                 mov     ds:Str, edx
.text:0040E0F5                 jmp     loc_40E05A
.text:0040E0F5 ; ---------------------------------------------------------------------------
.text:0040E0FA                 align 10h
.text:0040E100                 sub     esp, 0Ch
.text:0040E103                 mov     edx, [esp+10h]
.text:0040E107                 mov     [esp], edx
.text:0040E10A                 call    GetFileType
.text:0040E10F                 sub     esp, 4
.text:0040E112                 xor     edx, edx
.text:0040E114                 cmp     eax, 2
.text:0040E117                 jz      short loc_40E130
.text:0040E119                 cmp     eax, 3
.text:0040E11C                 jz      short loc_40E124
.text:0040E11E
.text:0040E11E loc_40E11E:                             ; CODE XREF: .text:0040E129↓j
.text:0040E11E                                         ; .text:0040E135↓j
.text:0040E11E                 mov     eax, edx
.text:0040E120                 add     esp, 0Ch
.text:0040E123                 retn
.text:0040E124 ; ---------------------------------------------------------------------------
.text:0040E124
.text:0040E124 loc_40E124:                             ; CODE XREF: .text:0040E11C↑j
.text:0040E124                 mov     edx, 1000h
.text:0040E129                 jmp     short loc_40E11E
.text:0040E129 ; ---------------------------------------------------------------------------
.text:0040E12B                 align 10h
.text:0040E130
.text:0040E130 loc_40E130:                             ; CODE XREF: .text:0040E117↑j
.text:0040E130                 mov     edx, 2000h
.text:0040E135                 jmp     short loc_40E11E
.text:0040E135 ; ---------------------------------------------------------------------------
.text:0040E137                 align 10h
.text:0040E140                 mov     ecx, [esp+4]
.text:0040E144                 xor     edx, edx
.text:0040E146                 test    cl, 10h
.text:0040E149                 setz    dl
.text:0040E14C                 dec     edx
.text:0040E14D                 and     edx, 0FFFFC000h
.text:0040E153                 add     edx, 8000h
.text:0040E159                 or      edx, 124h
.text:0040E15F                 test    cl, 1
.text:0040E162                 movzx   eax, dx
.text:0040E165                 jnz     short locret_40E16C
.text:0040E167                 or      eax, 92h
.text:0040E16C
.text:0040E16C locret_40E16C:                          ; CODE XREF: .text:0040E165↑j
.text:0040E16C                 retn
.text:0040E16C ; ---------------------------------------------------------------------------
.text:0040E16D                 align 10h
.text:0040E170                 sub     esp, 2Ch
.text:0040E173                 mov     [esp+20h], esi
.text:0040E177                 mov     esi, [esp+30h]
.text:0040E17B                 mov     [esp+1Ch], ebx
.text:0040E17F                 xor     ebx, ebx
.text:0040E181                 test    esi, esi
.text:0040E183                 mov     [esp+24h], edi
.text:0040E187                 mov     [esp+28h], ebp
.text:0040E18B                 jz      short loc_40E1E0
.text:0040E18D                 cmp     byte ptr [esi], 0
.text:0040E190                 jnz     short loc_40E1E4
.text:0040E192
.text:0040E192 loc_40E192:                             ; CODE XREF: .text:0040E24C↓j
.text:0040E192                                         ; .text:0040E257↓j
.text:0040E192                 test    esi, esi
.text:0040E194                 jz      short loc_40E1E0
.text:0040E196                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040E19E                 mov     [esp], esi
.text:0040E1A1                 call    strrchr
.text:0040E1A6                 test    eax, eax
.text:0040E1A8                 jz      short loc_40E1E0
.text:0040E1AA                 cld
.text:0040E1AB                 mov     ecx, 5
.text:0040E1B0                 mov     esi, eax
.text:0040E1B2                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040E1B7                 repe cmpsb
.text:0040E1B9                 setz    cl
.text:0040E1BC                 movzx   eax, cl
.text:0040E1BF                 nop
.text:0040E1C0
.text:0040E1C0 loc_40E1C0:                             ; CODE XREF: .text:0040E1E2↓j
.text:0040E1C0                 test    eax, eax
.text:0040E1C2                 jz      short loc_40E1CA
.text:0040E1C4                 or      ebx, 0A000h
.text:0040E1CA
.text:0040E1CA loc_40E1CA:                             ; CODE XREF: .text:0040E1C2↑j
.text:0040E1CA                 mov     eax, ebx
.text:0040E1CC                 mov     esi, [esp+20h]
.text:0040E1D0                 mov     ebx, [esp+1Ch]
.text:0040E1D4                 mov     edi, [esp+24h]
.text:0040E1D8                 mov     ebp, [esp+28h]
.text:0040E1DC                 add     esp, 2Ch
.text:0040E1DF                 retn
.text:0040E1E0 ; ---------------------------------------------------------------------------
.text:0040E1E0
.text:0040E1E0 loc_40E1E0:                             ; CODE XREF: .text:0040E18B↑j
.text:0040E1E0                                         ; .text:0040E194↑j ...
.text:0040E1E0                 xor     eax, eax
.text:0040E1E2                 jmp     short loc_40E1C0
.text:0040E1E4 ; ---------------------------------------------------------------------------
.text:0040E1E4
.text:0040E1E4 loc_40E1E4:                             ; CODE XREF: .text:0040E190↑j
.text:0040E1E4                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040E1EB                 call    GetModuleHandleA
.text:0040E1F0                 sub     esp, 4
.text:0040E1F3                 mov     ebp, eax
.text:0040E1F5                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040E1FD                 mov     [esp], eax
.text:0040E200                 call    GetProcAddress
.text:0040E205                 sub     esp, 8
.text:0040E208                 test    eax, eax
.text:0040E20A                 mov     dword ptr [esp+14h], 0
.text:0040E212                 jz      short loc_40E228
.text:0040E214                 mov     [esp], esi
.text:0040E217                 lea     ecx, [esp+18h]
.text:0040E21B                 mov     [esp+4], ecx
.text:0040E21F                 call    eax
.text:0040E221                 sub     esp, 8
.text:0040E224                 test    eax, eax
.text:0040E226                 jnz     short loc_40E288
.text:0040E228
.text:0040E228 loc_40E228:                             ; CODE XREF: .text:0040E212↑j
.text:0040E228                 mov     edx, ds:Str
.text:0040E22E                 test    edx, edx
.text:0040E230                 jz      short loc_40E2B0
.text:0040E232
.text:0040E232 loc_40E232:                             ; CODE XREF: .text:0040E2C3↓j
.text:0040E232                                         ; .text:0040E2D5↓j
.text:0040E232                 test    esi, esi
.text:0040E234                 jz      short loc_40E23B
.text:0040E236                 cmp     byte ptr [esi], 0
.text:0040E239                 jnz     short loc_40E25C
.text:0040E23B
.text:0040E23B loc_40E23B:                             ; CODE XREF: .text:0040E234↑j
.text:0040E23B                                         ; .text:0040E270↓j ...
.text:0040E23B                 mov     [esp], ebp
.text:0040E23E                 call    FreeLibrary
.text:0040E243                 sub     esp, 4
.text:0040E246                 mov     eax, [esp+14h]
.text:0040E24A                 test    eax, eax
.text:0040E24C                 jz      loc_40E192
.text:0040E252                 mov     ebx, 49h ; 'I'
.text:0040E257                 jmp     loc_40E192
.text:0040E25C ; ---------------------------------------------------------------------------
.text:0040E25C
.text:0040E25C loc_40E25C:                             ; CODE XREF: .text:0040E239↑j
.text:0040E25C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040E264                 mov     [esp], esi
.text:0040E267                 call    strrchr
.text:0040E26C                 test    eax, eax
.text:0040E26E                 mov     edi, eax
.text:0040E270                 jz      short loc_40E23B
.text:0040E272                 mov     [esp+4], eax
.text:0040E276                 mov     edx, ds:Str
.text:0040E27C                 mov     [esp], edx
.text:0040E27F                 call    strstr
.text:0040E284                 test    eax, eax
.text:0040E286                 jz      short loc_40E292
.text:0040E288
.text:0040E288 loc_40E288:                             ; CODE XREF: .text:0040E226↑j
.text:0040E288                                         ; .text:0040E2A8↓j
.text:0040E288                 mov     dword ptr [esp+14h], 1
.text:0040E290                 jmp     short loc_40E23B
.text:0040E292 ; ---------------------------------------------------------------------------
.text:0040E292
.text:0040E292 loc_40E292:                             ; CODE XREF: .text:0040E286↑j
.text:0040E292                 mov     [esp+4], edi
.text:0040E296                 mov     edi, off_4170F4 ; ".com;.exe;.bat;.cmd"
.text:0040E29C                 mov     [esp], edi
.text:0040E29F                 call    strstr
.text:0040E2A4                 test    eax, eax
.text:0040E2A6                 jz      short loc_40E23B
.text:0040E2A8                 jmp     short loc_40E288
.text:0040E2A8 ; ---------------------------------------------------------------------------
.text:0040E2AA                 align 10h
.text:0040E2B0
.text:0040E2B0 loc_40E2B0:                             ; CODE XREF: .text:0040E230↑j
.text:0040E2B0                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040E2B7                 call    getenv
.text:0040E2BC                 mov     ds:Str, eax
.text:0040E2C1                 test    eax, eax
.text:0040E2C3                 jnz     loc_40E232
.text:0040E2C9                 mov     ecx, off_4170F4 ; ".com;.exe;.bat;.cmd"
.text:0040E2CF                 mov     ds:Str, ecx
.text:0040E2D5                 jmp     loc_40E232
.text:0040E2D5 ; ---------------------------------------------------------------------------
.text:0040E2DA                 align 10h
.text:0040E2E0                 push    esi
.text:0040E2E1                 push    ebx
.text:0040E2E2                 sub     esp, 864h
.text:0040E2E8                 mov     ebx, [esp+870h]
.text:0040E2EF                 lea     edx, [esp+830h]
.text:0040E2F6                 mov     esi, [esp+874h]
.text:0040E2FD                 mov     [esp+4], edx
.text:0040E301                 mov     [esp], ebx
.text:0040E304                 call    sub_40D160
.text:0040E309                 xor     edx, edx
.text:0040E30B                 test    eax, eax
.text:0040E30D                 jz      loc_40E3F5
.text:0040E313                 mov     ecx, [esp+830h]
.text:0040E31A                 test    cl, 10h
.text:0040E31D                 mov     [esi], ecx
.text:0040E31F                 mov     eax, [esp+834h]
.text:0040E326                 mov     edx, [esp+838h]
.text:0040E32D                 mov     [esi+4], eax
.text:0040E330                 mov     [esi+8], edx
.text:0040E333                 mov     eax, [esp+83Ch]
.text:0040E33A                 mov     edx, [esp+840h]
.text:0040E341                 mov     [esi+0Ch], eax
.text:0040E344                 mov     [esi+10h], edx
.text:0040E347                 mov     edx, [esp+848h]
.text:0040E34E                 mov     eax, [esp+844h]
.text:0040E355                 mov     [esi+18h], edx
.text:0040E358                 mov     [esi+14h], eax
.text:0040E35B                 mov     edx, [esp+84Ch]
.text:0040E362                 mov     [esi+20h], edx
.text:0040E365                 mov     edx, [esp+850h]
.text:0040E36C                 mov     [esi+24h], edx
.text:0040E36F                 jnz     loc_40E400
.text:0040E375                 mov     dword ptr [esi+28h], 1
.text:0040E37C
.text:0040E37C loc_40E37C:                             ; CODE XREF: .text:0040E40B↓j
.text:0040E37C                 mov     [esp], ebx
.text:0040E37F                 call    sub_40F4D0
.text:0040E384                 mov     [esp], eax
.text:0040E387                 call    sub_40F0A0
.text:0040E38C                 mov     [esp], eax
.text:0040E38F                 lea     edx, [esp+30h]
.text:0040E393                 mov     ebx, eax
.text:0040E395                 mov     [esp+18h], edx
.text:0040E399                 lea     ecx, [esp+2Ch]
.text:0040E39D                 lea     edx, [esp+28h]
.text:0040E3A1                 mov     [esp+14h], ecx
.text:0040E3A5                 lea     ecx, [esp+24h]
.text:0040E3A9                 mov     [esp+10h], edx
.text:0040E3AD                 lea     edx, [esp+430h]
.text:0040E3B4                 mov     [esp+0Ch], ecx
.text:0040E3B8                 mov     [esp+4], edx
.text:0040E3BC                 mov     dword ptr [esp+1Ch], 400h
.text:0040E3C4                 mov     dword ptr [esp+8], 400h
.text:0040E3CC                 call    GetVolumeInformationA
.text:0040E3D1                 sub     esp, 20h
.text:0040E3D4                 test    eax, eax
.text:0040E3D6                 setz    cl
.text:0040E3D9                 mov     [esp], ebx
.text:0040E3DC                 movzx   edx, cl
.text:0040E3DF                 dec     edx
.text:0040E3E0                 and     [esp+24h], edx
.text:0040E3E4                 call    free
.text:0040E3E9                 mov     ecx, [esp+24h]
.text:0040E3ED                 mov     edx, 1
.text:0040E3F2                 mov     [esi+1Ch], ecx
.text:0040E3F5
.text:0040E3F5 loc_40E3F5:                             ; CODE XREF: .text:0040E30D↑j
.text:0040E3F5                 add     esp, 864h
.text:0040E3FB                 mov     eax, edx
.text:0040E3FD                 pop     ebx
.text:0040E3FE                 pop     esi
.text:0040E3FF                 retn
.text:0040E400 ; ---------------------------------------------------------------------------
.text:0040E400
.text:0040E400 loc_40E400:                             ; CODE XREF: .text:0040E36F↑j
.text:0040E400                 mov     [esp], ebx
.text:0040E403                 call    sub_40D2D0
.text:0040E408                 mov     [esi+28h], eax
.text:0040E40B                 jmp     loc_40E37C
.text:0040E410 ; ---------------------------------------------------------------------------
.text:0040E410                 push    ebp
.text:0040E411                 xor     edx, edx
.text:0040E413                 push    edi
.text:0040E414                 push    esi
.text:0040E415                 xor     esi, esi
.text:0040E417                 push    ebx
.text:0040E418                 sub     esp, 1Ch
.text:0040E41B                 mov     ebx, [esp+5Ch]
.text:0040E41F                 mov     ecx, [esp+30h]
.text:0040E423                 mov     edi, [esp+60h]
.text:0040E427                 or      esi, ebx
.text:0040E429                 mov     eax, [esp+4Ch]
.text:0040E42D                 or      edi, edx
.text:0040E42F                 mov     ebx, [esp+64h]
.text:0040E433                 xor     edx, edx
.text:0040E435                 test    cl, 10h
.text:0040E438                 setz    dl
.text:0040E43B                 mov     [ebx+10h], eax
.text:0040E43E                 mov     [ebx+8], edi
.text:0040E441                 mov     [ebx+0Ch], esi
.text:0040E444                 dec     edx
.text:0040E445                 and     edx, 0FFFFC000h
.text:0040E44B                 mov     dword ptr [ebx+14h], 0
.text:0040E452                 add     edx, 8000h
.text:0040E458                 or      edx, 124h
.text:0040E45E                 test    cl, 1
.text:0040E461                 movzx   eax, dx
.text:0040E464                 jnz     short loc_40E46B
.text:0040E466                 or      eax, 92h
.text:0040E46B
.text:0040E46B loc_40E46B:                             ; CODE XREF: .text:0040E464↑j
.text:0040E46B                 mov     ebx, [esp+54h]
.text:0040E46F                 xor     edx, edx
.text:0040E471                 xor     ebp, ebp
.text:0040E473                 mov     edi, [esp+50h]
.text:0040E477                 mov     ecx, [esp+64h]
.text:0040E47B                 mov     esi, edi
.text:0040E47D                 or      [ecx], eax
.text:0040E47F                 mov     edi, ebx
.text:0040E481                 or      edi, ebp
.text:0040E483                 mov     ebp, edx
.text:0040E485                 mov     ebx, [esp+64h]
.text:0040E489                 or      ebp, esi
.text:0040E48B                 mov     esi, [esp+58h]
.text:0040E48F                 mov     edx, [esp+40h]
.text:0040E493                 mov     [ebx+30h], edi
.text:0040E496                 mov     [ebx+18h], esi
.text:0040E499                 mov     ecx, edx
.text:0040E49B                 xor     esi, esi
.text:0040E49D                 mov     [ebx+34h], ebp
.text:0040E4A0                 xor     edx, edx
.text:0040E4A2                 or      esi, ecx
.text:0040E4A4                 mov     dword ptr [esp+8], 989680h
.text:0040E4AC                 mov     ebx, [esp+3Ch]
.text:0040E4B0                 mov     ecx, esi
.text:0040E4B2                 mov     dword ptr [esp+0Ch], 0
.text:0040E4BA                 or      ebx, edx
.text:0040E4BC                 mov     edx, ebx
.text:0040E4BE                 sub     edx, 0D53E8000h
.text:0040E4C4                 sbb     ecx, 19DB1DEh
.text:0040E4CA                 mov     [esp+4], ecx
.text:0040E4CE                 mov     [esp], edx
.text:0040E4D1                 call    sub_414FC0
.text:0040E4D6                 mov     edx, eax
.text:0040E4D8                 mov     ecx, [esp+64h]
.text:0040E4DC                 shr     eax, 1Fh
.text:0040E4DF                 dec     eax
.text:0040E4E0                 and     edx, eax
.text:0040E4E2                 mov     [ecx+38h], edx
.text:0040E4E5                 mov     [esp], ebx
.text:0040E4E8                 mov     [esp+4], esi
.text:0040E4EC                 mov     dword ptr [esp+8], 989680h
.text:0040E4F4                 mov     dword ptr [esp+0Ch], 0
.text:0040E4FC                 call    sub_414E40
.text:0040E501                 lea     ecx, [eax+eax*4]
.text:0040E504                 lea     esi, [ecx+ecx*4]
.text:0040E507                 mov     eax, [esp+64h]
.text:0040E50B                 shl     esi, 2
.text:0040E50E                 mov     ebx, esi
.text:0040E510                 shr     ebx, 1Fh
.text:0040E513                 dec     ebx
.text:0040E514                 and     ebx, esi
.text:0040E516                 xor     esi, esi
.text:0040E518                 mov     [eax+3Ch], ebx
.text:0040E51B                 mov     edx, [esp+38h]
.text:0040E51F                 mov     dword ptr [esp+8], 989680h
.text:0040E527                 mov     ebx, [esp+34h]
.text:0040E52B                 mov     dword ptr [esp+0Ch], 0
.text:0040E533                 mov     ecx, edx
.text:0040E535                 xor     edx, edx
.text:0040E537                 or      ebx, edx
.text:0040E539                 or      esi, ecx
.text:0040E53B                 mov     edx, ebx
.text:0040E53D                 sub     edx, 0D53E8000h
.text:0040E543                 mov     ecx, esi
.text:0040E545                 sbb     ecx, 19DB1DEh
.text:0040E54B                 mov     [esp+4], ecx
.text:0040E54F                 mov     [esp], edx
.text:0040E552                 call    sub_414FC0
.text:0040E557                 mov     edx, eax
.text:0040E559                 mov     ecx, [esp+64h]
.text:0040E55D                 shr     eax, 1Fh
.text:0040E560                 dec     eax
.text:0040E561                 and     edx, eax
.text:0040E563                 mov     [ecx+48h], edx
.text:0040E566                 mov     [esp], ebx
.text:0040E569                 mov     [esp+4], esi
.text:0040E56D                 mov     dword ptr [esp+8], 989680h
.text:0040E575                 mov     dword ptr [esp+0Ch], 0
.text:0040E57D                 call    sub_414E40
.text:0040E582                 lea     edx, [eax+eax*4]
.text:0040E585                 mov     ebx, [esp+64h]
.text:0040E589                 lea     ecx, [edx+edx*4]
.text:0040E58C                 shl     ecx, 2
.text:0040E58F                 mov     esi, ecx
.text:0040E591                 shr     esi, 1Fh
.text:0040E594                 dec     esi
.text:0040E595                 and     esi, ecx
.text:0040E597                 mov     [ebx+4Ch], esi
.text:0040E59A                 mov     edx, [esp+48h]
.text:0040E59E                 xor     esi, esi
.text:0040E5A0                 mov     dword ptr [esp+8], 989680h
.text:0040E5A8                 mov     ebx, [esp+44h]
.text:0040E5AC                 mov     dword ptr [esp+0Ch], 0
.text:0040E5B4                 mov     ecx, edx
.text:0040E5B6                 xor     edx, edx
.text:0040E5B8                 or      ebx, edx
.text:0040E5BA                 or      esi, ecx
.text:0040E5BC                 mov     edx, ebx
.text:0040E5BE                 sub     edx, 0D53E8000h
.text:0040E5C4                 mov     ecx, esi
.text:0040E5C6                 sbb     ecx, 19DB1DEh
.text:0040E5CC                 mov     [esp+4], ecx
.text:0040E5D0                 mov     [esp], edx
.text:0040E5D3                 call    sub_414FC0
.text:0040E5D8                 mov     edx, eax
.text:0040E5DA                 mov     ecx, [esp+64h]
.text:0040E5DE                 shr     eax, 1Fh
.text:0040E5E1                 dec     eax
.text:0040E5E2                 and     edx, eax
.text:0040E5E4                 mov     [ecx+40h], edx
.text:0040E5E7                 mov     [esp+4], esi
.text:0040E5EB                 mov     dword ptr [esp+8], 989680h
.text:0040E5F3                 mov     dword ptr [esp+0Ch], 0
.text:0040E5FB                 mov     [esp], ebx
.text:0040E5FE                 call    sub_414E40
.text:0040E603                 lea     edx, [eax+eax*4]
.text:0040E606                 lea     esi, [edx+edx*4]
.text:0040E609                 mov     eax, [esp+64h]
.text:0040E60D                 shl     esi, 2
.text:0040E610                 mov     edx, ebp
.text:0040E612                 mov     ecx, esi
.text:0040E614                 mov     dword ptr [eax+50h], 200h
.text:0040E61B                 shr     ecx, 1Fh
.text:0040E61E                 dec     ecx
.text:0040E61F                 and     ecx, esi
.text:0040E621                 test    ebp, ebp
.text:0040E623                 mov     [eax+44h], ecx
.text:0040E626                 mov     eax, edi
.text:0040E628                 js      short loc_40E662
.text:0040E62A
.text:0040E62A loc_40E62A:                             ; CODE XREF: .text:0040E66A↓j
.text:0040E62A                 xor     esi, esi
.text:0040E62C                 mov     ebp, edi
.text:0040E62E                 mov     ecx, eax
.text:0040E630                 shrd    ecx, edx, 9
.text:0040E634                 mov     ebx, edx
.text:0040E636                 and     ebp, 1FFh
.text:0040E63C                 mov     eax, esi
.text:0040E63E                 sar     ebx, 9
.text:0040E641                 or      eax, ebp
.text:0040E643                 jz      short loc_40E64B
.text:0040E645                 add     ecx, 1
.text:0040E648                 adc     ebx, 0
.text:0040E64B
.text:0040E64B loc_40E64B:                             ; CODE XREF: .text:0040E643↑j
.text:0040E64B                 mov     edx, [esp+64h]
.text:0040E64F                 mov     eax, 1
.text:0040E654                 mov     [edx+58h], ecx
.text:0040E657                 mov     [edx+5Ch], ebx
.text:0040E65A                 add     esp, 1Ch
.text:0040E65D                 pop     ebx
.text:0040E65E                 pop     esi
.text:0040E65F                 pop     edi
.text:0040E660                 pop     ebp
.text:0040E661                 retn
.text:0040E662 ; ---------------------------------------------------------------------------
.text:0040E662
.text:0040E662 loc_40E662:                             ; CODE XREF: .text:0040E628↑j
.text:0040E662                 add     eax, 1FFh
.text:0040E667                 adc     edx, 0
.text:0040E66A                 jmp     short loc_40E62A
.text:0040E66A ; ---------------------------------------------------------------------------
.text:0040E66C                 align 10h
.text:0040E670                 push    ebp
.text:0040E671                 push    edi
.text:0040E672                 xor     edi, edi
.text:0040E674                 push    esi
.text:0040E675                 xor     esi, esi
.text:0040E677                 push    ebx
.text:0040E678                 sub     esp, 0Ch
.text:0040E67B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040E682                 call    LoadLibraryA
.text:0040E687                 sub     esp, 4
.text:0040E68A                 mov     ebp, eax
.text:0040E68C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040E694                 mov     [esp], eax
.text:0040E697                 call    GetProcAddress
.text:0040E69C                 sub     esp, 8
.text:0040E69F                 test    eax, eax
.text:0040E6A1                 jz      short loc_40E6D2
.text:0040E6A3                 lea     ecx, [esp+8]
.text:0040E6A7                 mov     [esp+4], ecx
.text:0040E6AB                 mov     ecx, [esp+20h]
.text:0040E6AF                 mov     [esp], ecx
.text:0040E6B2                 call    eax
.text:0040E6B4                 sub     esp, 8
.text:0040E6B7                 mov     ebx, eax
.text:0040E6B9                 cmp     eax, 0FFFFFFFFh
.text:0040E6BC                 jz      short loc_40E6ED
.text:0040E6BE
.text:0040E6BE loc_40E6BE:                             ; CODE XREF: .text:0040E6F6↓j
.text:0040E6BE                 mov     esi, [esp+8]
.text:0040E6C2                 mov     ecx, ebx
.text:0040E6C4                 xor     edi, edi
.text:0040E6C6                 xor     ebx, ebx
.text:0040E6C8                 mov     edx, esi
.text:0040E6CA                 mov     esi, ecx
.text:0040E6CC                 or      esi, edi
.text:0040E6CE                 mov     edi, ebx
.text:0040E6D0                 or      edi, edx
.text:0040E6D2
.text:0040E6D2 loc_40E6D2:                             ; CODE XREF: .text:0040E6A1↑j
.text:0040E6D2                                         ; .text:0040E6F4↓j
.text:0040E6D2                 test    ebp, ebp
.text:0040E6D4                 jz      short loc_40E6E1
.text:0040E6D6                 mov     [esp], ebp
.text:0040E6D9                 call    FreeLibrary
.text:0040E6DE                 sub     esp, 4
.text:0040E6E1
.text:0040E6E1 loc_40E6E1:                             ; CODE XREF: .text:0040E6D4↑j
.text:0040E6E1                 add     esp, 0Ch
.text:0040E6E4                 mov     eax, esi
.text:0040E6E6                 mov     edx, edi
.text:0040E6E8                 pop     ebx
.text:0040E6E9                 pop     esi
.text:0040E6EA                 pop     edi
.text:0040E6EB                 pop     ebp
.text:0040E6EC                 retn
.text:0040E6ED ; ---------------------------------------------------------------------------
.text:0040E6ED
.text:0040E6ED loc_40E6ED:                             ; CODE XREF: .text:0040E6BC↑j
.text:0040E6ED                 call    GetLastError
.text:0040E6F2                 test    eax, eax
.text:0040E6F4                 jnz     short loc_40E6D2
.text:0040E6F6                 jmp     short loc_40E6BE
.text:0040E6F6 ; ---------------------------------------------------------------------------
.text:0040E6F8                 align 10h
.text:0040E700
.text:0040E700 ; =============== S U B R O U T I N E =======================================
.text:0040E700
.text:0040E700
.text:0040E700 ; int __cdecl sub_40E700(LPCSTR lpFileName, int)
.text:0040E700 sub_40E700      proc near               ; CODE XREF: sub_412990-3D4F↓p
.text:0040E700
.text:0040E700 lpRootPathName  = dword ptr -8FCh
.text:0040E700 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040E700 nVolumeNameSize = dword ptr -8F4h
.text:0040E700 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040E700 lpMaximumComponentLength= dword ptr -8ECh
.text:0040E700 lpFileSystemFlags= dword ptr -8E8h
.text:0040E700 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040E700 nFileSystemNameSize= dword ptr -8E0h
.text:0040E700 VolumeSerialNumber= dword ptr -8D8h
.text:0040E700 MaximumComponentLength= dword ptr -8D4h
.text:0040E700 FileSystemFlags = dword ptr -8D0h
.text:0040E700 var_8CC         = dword ptr -8CCh
.text:0040E700 var_8C8         = dword ptr -8C8h
.text:0040E700 var_8C4         = dword ptr -8C4h
.text:0040E700 var_8C0         = dword ptr -8C0h
.text:0040E700 var_8BC         = dword ptr -8BCh
.text:0040E700 var_8B8         = dword ptr -8B8h
.text:0040E700 var_8B4         = dword ptr -8B4h
.text:0040E700 var_8B0         = dword ptr -8B0h
.text:0040E700 var_8AC         = dword ptr -8ACh
.text:0040E700 var_8A8         = dword ptr -8A8h
.text:0040E700 var_8A4         = dword ptr -8A4h
.text:0040E700 var_8A0         = dword ptr -8A0h
.text:0040E700 var_89C         = dword ptr -89Ch
.text:0040E700 FileSystemNameBuffer= byte ptr -88Ch
.text:0040E700 VolumeNameBuffer= byte ptr -48Ch
.text:0040E700 var_8C          = dword ptr -8Ch
.text:0040E700 var_88          = dword ptr -88h
.text:0040E700 var_84          = dword ptr -84h
.text:0040E700 var_80          = dword ptr -80h
.text:0040E700 var_7C          = dword ptr -7Ch
.text:0040E700 var_78          = dword ptr -78h
.text:0040E700 var_74          = dword ptr -74h
.text:0040E700 var_70          = dword ptr -70h
.text:0040E700 var_6C          = dword ptr -6Ch
.text:0040E700 var_5C          = dword ptr -5Ch
.text:0040E700 var_58          = dword ptr -58h
.text:0040E700 var_54          = dword ptr -54h
.text:0040E700 var_50          = dword ptr -50h
.text:0040E700 var_4C          = dword ptr -4Ch
.text:0040E700 var_48          = dword ptr -48h
.text:0040E700 var_44          = dword ptr -44h
.text:0040E700 var_3C          = dword ptr -3Ch
.text:0040E700 var_38          = dword ptr -38h
.text:0040E700 var_34          = dword ptr -34h
.text:0040E700 lpFileName      = dword ptr  4
.text:0040E700 arg_4           = dword ptr  8
.text:0040E700
.text:0040E700                 push    ebp
.text:0040E701                 xor     eax, eax
.text:0040E703                 mov     ecx, 0Dh
.text:0040E708                 push    edi
.text:0040E709                 push    esi
.text:0040E70A                 push    ebx
.text:0040E70B                 sub     esp, 8ECh
.text:0040E711                 lea     edi, [esp+8FCh+var_5C]
.text:0040E718                 cld
.text:0040E719                 lea     edx, [esp+8FCh+var_8C]
.text:0040E720                 rep stosd
.text:0040E722                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040E726                 lea     esi, [esp+8FCh+var_5C]
.text:0040E72D                 mov     edx, [esp+8FCh+lpFileName]
.text:0040E734                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:0040E737                 call    sub_40D160
.text:0040E73C                 test    eax, eax
.text:0040E73E                 mov     edx, 0FFFFFFFFh
.text:0040E743                 jz      loc_40EAD4
.text:0040E749                 mov     edx, [esp+8FCh+var_88]
.text:0040E750                 mov     ebp, [esp+8FCh+var_84]
.text:0040E757                 mov     edi, [esp+8FCh+var_80]
.text:0040E75E                 mov     [esp+8FCh+var_58], edx
.text:0040E765                 mov     ecx, [esp+8FCh+var_7C]
.text:0040E76C                 mov     ebx, [esp+8FCh+var_8C]
.text:0040E773                 mov     [esp+8FCh+var_54], ebp
.text:0040E77A                 mov     edx, [esp+8FCh+var_78]
.text:0040E781                 mov     ebp, [esp+8FCh+var_74]
.text:0040E788                 mov     [esp+8FCh+var_50], edi
.text:0040E78F                 test    bl, 10h
.text:0040E792                 mov     edi, [esp+8FCh+var_70]
.text:0040E799                 mov     [esp+8FCh+var_4C], ecx
.text:0040E7A0                 mov     ecx, [esp+8FCh+var_6C]
.text:0040E7A7                 mov     [esp+8FCh+var_5C], ebx
.text:0040E7AE                 mov     [esp+8FCh+var_48], edx
.text:0040E7B5                 mov     [esp+8FCh+var_44], ebp
.text:0040E7BC                 mov     [esp+8FCh+var_3C], edi
.text:0040E7C3                 mov     [esp+8FCh+var_38], ecx
.text:0040E7CA                 jnz     loc_40EAF0
.text:0040E7D0                 mov     ebx, 1
.text:0040E7D5                 mov     [esp+8FCh+var_34], ebx
.text:0040E7DC
.text:0040E7DC loc_40E7DC:                             ; CODE XREF: sub_40E700+406↓j
.text:0040E7DC                 mov     eax, [esp+8FCh+lpFileName]
.text:0040E7E3                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040E7E7                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040E7EB                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040E7EE                 call    sub_40F4D0
.text:0040E7F3                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040E7F6                 call    sub_40F0A0
.text:0040E7FB                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040E7FF                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040E803                 mov     ebp, eax
.text:0040E805                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040E809                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040E80D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040E814                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040E818                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040E81C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040E820                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040E828                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040E830                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040E833                 call    GetVolumeInformationA
.text:0040E838                 sub     esp, 20h
.text:0040E83B                 test    eax, eax
.text:0040E83D                 lea     edi, [esp+8FCh+var_8CC]
.text:0040E841                 setz    bl
.text:0040E844                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040E847                 xor     ebp, ebp
.text:0040E849                 movzx   edx, bl
.text:0040E84C                 dec     edx
.text:0040E84D                 xor     ebx, ebx
.text:0040E84F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040E853                 call    free
.text:0040E858                 cld
.text:0040E859                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040E85D                 mov     [esi+1Ch], ecx
.text:0040E860                 mov     ecx, 0Dh
.text:0040E865                 rep movsd
.text:0040E867                 mov     edi, [esp+8FCh+var_8A0]
.text:0040E86B                 mov     edx, [esp+8FCh+var_89C]
.text:0040E86F                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040E873                 or      ebp, edi
.text:0040E875                 mov     esi, [esp+8FCh+var_8B0]
.text:0040E879                 mov     edi, [esp+8FCh+arg_4]
.text:0040E880                 or      edx, ebx
.text:0040E882                 mov     [edi+8], edx
.text:0040E885                 xor     edx, edx
.text:0040E887                 test    cl, 10h
.text:0040E88A                 setz    dl
.text:0040E88D                 mov     [edi+0Ch], ebp
.text:0040E890                 mov     [edi+10h], esi
.text:0040E893                 mov     dword ptr [edi+14h], 0
.text:0040E89A                 dec     edx
.text:0040E89B                 and     edx, 0FFFFC000h
.text:0040E8A1                 add     edx, 8000h
.text:0040E8A7                 or      edx, 124h
.text:0040E8AD                 test    cl, 1
.text:0040E8B0                 movzx   eax, dx
.text:0040E8B3                 jnz     short loc_40E8BA
.text:0040E8B5                 or      eax, 92h
.text:0040E8BA
.text:0040E8BA loc_40E8BA:                             ; CODE XREF: sub_40E700+1B3↑j
.text:0040E8BA                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040E8BE                 xor     edx, edx
.text:0040E8C0                 xor     ebp, ebp
.text:0040E8C2                 mov     edi, [esp+8FCh+var_8AC]
.text:0040E8C6                 mov     ecx, [esp+8FCh+arg_4]
.text:0040E8CD                 mov     esi, edi
.text:0040E8CF                 or      [ecx], eax
.text:0040E8D1                 mov     edi, ebx
.text:0040E8D3                 or      edi, ebp
.text:0040E8D5                 mov     ebp, edx
.text:0040E8D7                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040E8DB                 or      ebp, esi
.text:0040E8DD                 mov     esi, [esp+8FCh+arg_4]
.text:0040E8E4                 mov     edx, [esp+8FCh+var_8BC]
.text:0040E8E8                 mov     [esi+18h], ebx
.text:0040E8EB                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040E8EF                 mov     ecx, edx
.text:0040E8F1                 mov     [esi+30h], edi
.text:0040E8F4                 xor     edx, edx
.text:0040E8F6                 mov     [esi+34h], ebp
.text:0040E8F9                 or      ebx, edx
.text:0040E8FB                 xor     esi, esi
.text:0040E8FD                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040E905                 or      esi, ecx
.text:0040E907                 mov     edx, ebx
.text:0040E909                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040E911                 sub     edx, 0D53E8000h
.text:0040E917                 mov     ecx, esi
.text:0040E919                 sbb     ecx, 19DB1DEh
.text:0040E91F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040E923                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040E926                 call    sub_414FC0
.text:0040E92B                 mov     edx, eax
.text:0040E92D                 mov     ecx, [esp+8FCh+arg_4]
.text:0040E934                 shr     eax, 1Fh
.text:0040E937                 dec     eax
.text:0040E938                 and     edx, eax
.text:0040E93A                 mov     [ecx+38h], edx
.text:0040E93D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040E940                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040E944                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040E94C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040E954                 call    sub_414E40
.text:0040E959                 lea     ecx, [eax+eax*4]
.text:0040E95C                 lea     ebx, [ecx+ecx*4]
.text:0040E95F                 mov     eax, [esp+8FCh+arg_4]
.text:0040E966                 shl     ebx, 2
.text:0040E969                 mov     esi, ebx
.text:0040E96B                 shr     esi, 1Fh
.text:0040E96E                 dec     esi
.text:0040E96F                 and     esi, ebx
.text:0040E971                 mov     [eax+3Ch], esi
.text:0040E974                 mov     edx, [esp+8FCh+var_8C4]
.text:0040E978                 xor     esi, esi
.text:0040E97A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040E982                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040E986                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040E98E                 mov     ecx, edx
.text:0040E990                 xor     edx, edx
.text:0040E992                 or      ebx, edx
.text:0040E994                 or      esi, ecx
.text:0040E996                 mov     edx, ebx
.text:0040E998                 sub     edx, 0D53E8000h
.text:0040E99E                 mov     ecx, esi
.text:0040E9A0                 sbb     ecx, 19DB1DEh
.text:0040E9A6                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040E9AA                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040E9AD                 call    sub_414FC0
.text:0040E9B2                 mov     edx, eax
.text:0040E9B4                 mov     ecx, [esp+8FCh+arg_4]
.text:0040E9BB                 shr     eax, 1Fh
.text:0040E9BE                 dec     eax
.text:0040E9BF                 and     edx, eax
.text:0040E9C1                 mov     [ecx+48h], edx
.text:0040E9C4                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040E9C7                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040E9CB                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040E9D3                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040E9DB                 call    sub_414E40
.text:0040E9E0                 lea     ecx, [eax+eax*4]
.text:0040E9E3                 lea     ebx, [ecx+ecx*4]
.text:0040E9E6                 mov     eax, [esp+8FCh+arg_4]
.text:0040E9ED                 shl     ebx, 2
.text:0040E9F0                 mov     esi, ebx
.text:0040E9F2                 shr     esi, 1Fh
.text:0040E9F5                 dec     esi
.text:0040E9F6                 and     esi, ebx
.text:0040E9F8                 mov     [eax+4Ch], esi
.text:0040E9FB                 mov     edx, [esp+8FCh+var_8B4]
.text:0040E9FF                 xor     esi, esi
.text:0040EA01                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040EA09                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040EA0D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040EA15                 mov     ecx, edx
.text:0040EA17                 xor     edx, edx
.text:0040EA19                 or      ebx, edx
.text:0040EA1B                 or      esi, ecx
.text:0040EA1D                 mov     edx, ebx
.text:0040EA1F                 sub     edx, 0D53E8000h
.text:0040EA25                 mov     ecx, esi
.text:0040EA27                 sbb     ecx, 19DB1DEh
.text:0040EA2D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040EA31                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040EA34                 call    sub_414FC0
.text:0040EA39                 mov     edx, eax
.text:0040EA3B                 mov     ecx, [esp+8FCh+arg_4]
.text:0040EA42                 shr     eax, 1Fh
.text:0040EA45                 dec     eax
.text:0040EA46                 and     edx, eax
.text:0040EA48                 mov     [ecx+40h], edx
.text:0040EA4B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040EA4E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040EA52                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040EA5A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040EA62                 call    sub_414E40
.text:0040EA67                 lea     ebx, [eax+eax*4]
.text:0040EA6A                 mov     esi, [esp+8FCh+arg_4]
.text:0040EA71                 lea     edx, [ebx+ebx*4]
.text:0040EA74                 shl     edx, 2
.text:0040EA77                 mov     eax, edi
.text:0040EA79                 mov     ecx, edx
.text:0040EA7B                 mov     dword ptr [esi+50h], 200h
.text:0040EA82                 shr     ecx, 1Fh
.text:0040EA85                 dec     ecx
.text:0040EA86                 and     ecx, edx
.text:0040EA88                 test    ebp, ebp
.text:0040EA8A                 mov     edx, ebp
.text:0040EA8C                 mov     [esi+44h], ecx
.text:0040EA8F                 js      short loc_40EAE1
.text:0040EA91
.text:0040EA91 loc_40EA91:                             ; CODE XREF: sub_40E700+3E9↓j
.text:0040EA91                 xor     esi, esi
.text:0040EA93                 mov     ebp, edi
.text:0040EA95                 mov     ecx, eax
.text:0040EA97                 shrd    ecx, edx, 9
.text:0040EA9B                 mov     ebx, edx
.text:0040EA9D                 and     ebp, 1FFh
.text:0040EAA3                 mov     eax, esi
.text:0040EAA5                 sar     ebx, 9
.text:0040EAA8                 or      eax, ebp
.text:0040EAAA                 jz      short loc_40EAB2
.text:0040EAAC                 add     ecx, 1
.text:0040EAAF                 adc     ebx, 0
.text:0040EAB2
.text:0040EAB2 loc_40EAB2:                             ; CODE XREF: sub_40E700+3AA↑j
.text:0040EAB2                 mov     edx, [esp+8FCh+arg_4]
.text:0040EAB9                 mov     [edx+5Ch], ebx
.text:0040EABC                 mov     ebx, [esp+8FCh+lpFileName]
.text:0040EAC3                 mov     [edx+58h], ecx
.text:0040EAC6                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040EACA                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040EACD                 call    sub_40D920
.text:0040EAD2                 xor     edx, edx
.text:0040EAD4
.text:0040EAD4 loc_40EAD4:                             ; CODE XREF: sub_40E700+43↑j
.text:0040EAD4                 add     esp, 8ECh
.text:0040EADA                 mov     eax, edx
.text:0040EADC                 pop     ebx
.text:0040EADD                 pop     esi
.text:0040EADE                 pop     edi
.text:0040EADF                 pop     ebp
.text:0040EAE0                 retn
.text:0040EAE1 ; ---------------------------------------------------------------------------
.text:0040EAE1
.text:0040EAE1 loc_40EAE1:                             ; CODE XREF: sub_40E700+38F↑j
.text:0040EAE1                 add     eax, 1FFh
.text:0040EAE6                 adc     edx, 0
.text:0040EAE9                 jmp     short loc_40EA91
.text:0040EAE9 ; ---------------------------------------------------------------------------
.text:0040EAEB                 align 10h
.text:0040EAF0
.text:0040EAF0 loc_40EAF0:                             ; CODE XREF: sub_40E700+CA↑j
.text:0040EAF0                 mov     eax, [esp+8FCh+lpFileName]
.text:0040EAF7                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040EAFA                 call    sub_40D2D0
.text:0040EAFF                 mov     [esp+8FCh+var_34], eax
.text:0040EB06                 jmp     loc_40E7DC
.text:0040EB06 sub_40E700      endp
.text:0040EB06
.text:0040EB06 ; ---------------------------------------------------------------------------
.text:0040EB0B                 align 10h
.text:0040EB10 ; START OF FUNCTION CHUNK FOR sub_412990
.text:0040EB10
.text:0040EB10 loc_40EB10:                             ; CODE XREF: sub_412990+26↓j
.text:0040EB10                 cld
.text:0040EB11                 sub     esp, 2Ch
.text:0040EB14                 xor     eax, eax
.text:0040EB16                 mov     [esp+2Ch+var_10], ebx
.text:0040EB1A                 mov     ecx, 18h
.text:0040EB1F                 mov     ebx, [esp+2Ch+arg_0]
.text:0040EB23                 mov     [esp+2Ch+var_C], esi
.text:0040EB27                 mov     esi, [esp+2Ch+arg_4]
.text:0040EB2B                 test    ebx, ebx
.text:0040EB2D                 mov     [esp+2Ch+var_8], edi
.text:0040EB31                 mov     edi, esi
.text:0040EB33                 mov     [esp+2Ch+var_4], ebp
.text:0040EB37                 rep stosd
.text:0040EB39                 jz      short loc_40EB40
.text:0040EB3B                 cmp     byte ptr [ebx], 0
.text:0040EB3E                 jnz     short loc_40EB58
.text:0040EB40
.text:0040EB40 loc_40EB40:                             ; CODE XREF: sub_412990-3E57↑j
.text:0040EB40                 xor     edx, edx
.text:0040EB42
.text:0040EB42 loc_40EB42:                             ; CODE XREF: sub_412990-3E21↓j
.text:0040EB42                                         ; sub_412990-3D78↓j
.text:0040EB42                 mov     ebx, [esp+2Ch+var_10]
.text:0040EB46                 mov     eax, edx
.text:0040EB48                 mov     esi, [esp+2Ch+var_C]
.text:0040EB4C                 mov     edi, [esp+2Ch+var_8]
.text:0040EB50                 mov     ebp, [esp+2Ch+var_4]
.text:0040EB54                 add     esp, 2Ch
.text:0040EB57                 retn
.text:0040EB58 ; ---------------------------------------------------------------------------
.text:0040EB58
.text:0040EB58 loc_40EB58:                             ; CODE XREF: sub_412990-3E52↑j
.text:0040EB58                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040EB60                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040EB63                 call    sub_410E30
.text:0040EB68                 test    eax, eax
.text:0040EB6A                 mov     edx, 0FFFFFFFFh
.text:0040EB6F                 jnz     short loc_40EB42
.text:0040EB71                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040EB74                 call    sub_410CE0
.text:0040EB79                 mov     [esp+2Ch+lpFileName], eax
.text:0040EB7C                 call    sub_40F0A0
.text:0040EB81                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040EB84                 mov     ebp, eax
.text:0040EB86                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040EB8E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040EB96                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040EB9E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040EBA6                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040EBAE                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040EBB6                 call    CreateFileA
.text:0040EBBB                 sub     esp, 1Ch
.text:0040EBBE                 mov     ebx, eax
.text:0040EBC0                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040EBC4                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:0040EBC7                 call    sub_40D450
.text:0040EBCC                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040EBCF                 mov     edi, eax
.text:0040EBD1                 call    CloseHandle
.text:0040EBD6                 sub     esp, 4
.text:0040EBD9                 cmp     edi, 0FFFFFFFFh
.text:0040EBDC                 jz      short loc_40EC3A
.text:0040EBDE                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040EBE2                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040EBE5                 call    sub_40D920
.text:0040EBEA
.text:0040EBEA loc_40EBEA:                             ; CODE XREF: sub_412990-3D48↓j
.text:0040EBEA                 mov     edx, [esi]
.text:0040EBEC                 and     edx, 0F000h
.text:0040EBF2                 cmp     edx, 4000h
.text:0040EBF8                 jz      short loc_40EC2D
.text:0040EBFA
.text:0040EBFA loc_40EBFA:                             ; CODE XREF: sub_412990-3D58↓j
.text:0040EBFA                 cmp     edi, 0FFFFFFFFh
.text:0040EBFD                 jz      short loc_40EC1D
.text:0040EBFF
.text:0040EBFF loc_40EBFF:                             ; CODE XREF: sub_412990-3D65↓j
.text:0040EBFF                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040EC06                 call    SetErrorMode
.text:0040EC0B                 sub     esp, 4
.text:0040EC0E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040EC11                 call    free
.text:0040EC16                 mov     edx, edi
.text:0040EC18                 jmp     loc_40EB42
.text:0040EC1D ; ---------------------------------------------------------------------------
.text:0040EC1D
.text:0040EC1D loc_40EC1D:                             ; CODE XREF: sub_412990-3D93↑j
.text:0040EC1D                 call    sub_410C90
.text:0040EC22                 mov     esi, eax
.text:0040EC24                 call    _errno
.text:0040EC29                 mov     [eax], esi
.text:0040EC2B                 jmp     short loc_40EBFF
.text:0040EC2D ; ---------------------------------------------------------------------------
.text:0040EC2D
.text:0040EC2D loc_40EC2D:                             ; CODE XREF: sub_412990-3D98↑j
.text:0040EC2D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:0040EC30                 call    sub_40D2D0
.text:0040EC35                 mov     [esi+18h], eax
.text:0040EC38                 jmp     short loc_40EBFA
.text:0040EC3A ; ---------------------------------------------------------------------------
.text:0040EC3A
.text:0040EC3A loc_40EC3A:                             ; CODE XREF: sub_412990-3DB4↑j
.text:0040EC3A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040EC3E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:0040EC41                 call    sub_40E700
.text:0040EC46                 mov     edi, eax
.text:0040EC48                 jmp     short loc_40EBEA
.text:0040EC48 ; END OF FUNCTION CHUNK FOR sub_412990
.text:0040EC48 ; ---------------------------------------------------------------------------
.text:0040EC4A                 align 10h
.text:0040EC50
.text:0040EC50 ; =============== S U B R O U T I N E =======================================
.text:0040EC50
.text:0040EC50 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040EC50
.text:0040EC50 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040EC50 _win32_longpath proc near               ; CODE XREF: .text:0040F414↓p
.text:0040EC50
.text:0040EC50 C               = dword ptr -278h
.text:0040EC50 lpFindFileData  = dword ptr -274h
.text:0040EC50 Destination     = byte ptr -268h
.text:0040EC50 var_267         = byte ptr -267h
.text:0040EC50 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040EC50 lpFileName      = dword ptr  8
.text:0040EC50
.text:0040EC50                 push    ebp
.text:0040EC51                 xor     eax, eax
.text:0040EC53                 push    edi
.text:0040EC54                 push    esi
.text:0040EC55                 push    ebx
.text:0040EC56                 sub     esp, 26Ch
.text:0040EC5C                 mov     esi, [esp+278h+lpFileName]
.text:0040EC63                 lea     ebp, [esp+278h+Destination]
.text:0040EC67                 test    esi, esi
.text:0040EC69                 jz      loc_40EDC7
.text:0040EC6F                 movsx   edx, byte ptr [esi]
.text:0040EC72                 mov     [esp+278h+C], edx ; C
.text:0040EC75                 call    isalpha
.text:0040EC7A                 test    eax, eax
.text:0040EC7C                 jz      short loc_40EC8F
.text:0040EC7E                 mov     eax, [esp+278h+lpFileName]
.text:0040EC85                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040EC89                 jz      loc_40EFCB
.text:0040EC8F
.text:0040EC8F loc_40EC8F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040EC8F                 mov     edx, [esp+278h+lpFileName]
.text:0040EC96                 movzx   eax, byte ptr [edx]
.text:0040EC99                 cmp     al, 2Fh ; '/'
.text:0040EC9B                 jz      loc_40EEAB
.text:0040ECA1                 cmp     al, 5Ch ; '\'
.text:0040ECA3                 jz      loc_40EEAB
.text:0040ECA9
.text:0040ECA9 loc_40ECA9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040ECA9                                         ; _win32_longpath+2B1↓j ...
.text:0040ECA9                 mov     [ebp+268h+Destination], 0
.text:0040ECAD                 movzx   ebx, byte ptr [esi]
.text:0040ECB0                 test    bl, bl
.text:0040ECB2                 jz      loc_40EDA9
.text:0040ECB8                 nop
.text:0040ECB9                 lea     esi, [esi+0]
.text:0040ECC0
.text:0040ECC0 loc_40ECC0:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040ECC0                 cmp     bl, 2Fh ; '/'
.text:0040ECC3                 jz      loc_40EE60
.text:0040ECC9                 cmp     bl, 5Ch ; '\'
.text:0040ECCC                 jz      loc_40EE60
.text:0040ECD2
.text:0040ECD2 loc_40ECD2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040ECD2                                         ; _win32_longpath+22C↓j ...
.text:0040ECD2                 cmp     bl, 2Eh ; '.'
.text:0040ECD5                 jz      loc_40EE00
.text:0040ECDB
.text:0040ECDB loc_40ECDB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040ECDB                                         ; _win32_longpath+203↓j
.text:0040ECDB                 test    bl, bl
.text:0040ECDD                 jz      loc_40EDA9
.text:0040ECE3                 cmp     bl, 2Fh ; '/'
.text:0040ECE6                 jz      short loc_40ED02
.text:0040ECE8                 cmp     bl, 5Ch ; '\'
.text:0040ECEB                 jz      short loc_40ED02
.text:0040ECED                 lea     esi, [esi+0]
.text:0040ECF0
.text:0040ECF0 loc_40ECF0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040ECF0                 inc     esi
.text:0040ECF1                 movzx   ebx, byte ptr [esi]
.text:0040ECF4                 test    bl, bl
.text:0040ECF6                 jz      short loc_40ED02
.text:0040ECF8                 cmp     bl, 2Fh ; '/'
.text:0040ECFB                 jz      short loc_40ED02
.text:0040ECFD                 cmp     bl, 5Ch ; '\'
.text:0040ED00                 jnz     short loc_40ECF0
.text:0040ED02
.text:0040ED02 loc_40ED02:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040ED02                                         ; _win32_longpath+9B↑j ...
.text:0040ED02                 mov     byte ptr [esi], 0
.text:0040ED05                 lea     edx, [esp+278h+FindFileData]
.text:0040ED0C                 mov     eax, [esp+278h+lpFileName]
.text:0040ED13                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040ED17                 mov     [esp+278h+C], eax ; lpFileName
.text:0040ED1A                 call    FindFirstFileA
.text:0040ED1F                 mov     [esi], bl
.text:0040ED21                 sub     esp, 8
.text:0040ED24                 mov     edi, eax
.text:0040ED26                 cmp     eax, 0FFFFFFFFh
.text:0040ED29                 jz      loc_40EDEC
.text:0040ED2F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040ED36                 mov     ecx, ebx
.text:0040ED38                 nop
.text:0040ED39                 lea     esi, [esi+0]
.text:0040ED40
.text:0040ED40 loc_40ED40:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040ED40                 mov     eax, [ebx]
.text:0040ED42                 add     ebx, 4
.text:0040ED45                 lea     edx, [eax-1010101h]
.text:0040ED4B                 not     eax
.text:0040ED4D                 and     edx, eax
.text:0040ED4F                 and     edx, 80808080h
.text:0040ED55                 jz      short loc_40ED40
.text:0040ED57                 test    edx, 8080h
.text:0040ED5D                 jnz     short loc_40ED65
.text:0040ED5F                 shr     edx, 10h
.text:0040ED62                 add     ebx, 2
.text:0040ED65
.text:0040ED65 loc_40ED65:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040ED65                 add     dl, dl
.text:0040ED67                 sbb     ebx, 3
.text:0040ED6A                 sub     ebx, ecx
.text:0040ED6C                 lea     ecx, [esp+278h+Destination]
.text:0040ED70                 sub     ecx, ebp
.text:0040ED72                 add     ecx, 105h
.text:0040ED78                 cmp     ecx, ebx
.text:0040ED7A                 jle     short loc_40EDD2
.text:0040ED7C                 mov     [esp+278h+C], ebp ; Destination
.text:0040ED7F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040ED86                 add     ebp, ebx
.text:0040ED88                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040ED8C                 call    strcpy
.text:0040ED91                 mov     [esp+278h+C], edi ; hFindFile
.text:0040ED94                 call    FindClose
.text:0040ED99                 sub     esp, 4
.text:0040ED9C
.text:0040ED9C loc_40ED9C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040ED9C                 movzx   ecx, byte ptr [esi]
.text:0040ED9F                 test    cl, cl
.text:0040EDA1                 mov     bl, cl
.text:0040EDA3                 jnz     loc_40ECC0
.text:0040EDA9
.text:0040EDA9 loc_40EDA9:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040EDA9                                         ; _win32_longpath+8D↑j
.text:0040EDA9                 mov     esi, [esp+278h+lpFileName]
.text:0040EDB0                 lea     ebp, [esp+278h+Destination]
.text:0040EDB4                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040EDB8                 mov     [esp+278h+C], esi ; Destination
.text:0040EDBB                 call    strcpy
.text:0040EDC0                 mov     eax, [esp+278h+lpFileName]
.text:0040EDC7
.text:0040EDC7 loc_40EDC7:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040EDC7                                         ; _win32_longpath+19A↓j
.text:0040EDC7                 add     esp, 26Ch
.text:0040EDCD                 pop     ebx
.text:0040EDCE                 pop     esi
.text:0040EDCF                 pop     edi
.text:0040EDD0                 pop     ebp
.text:0040EDD1                 retn
.text:0040EDD2 ; ---------------------------------------------------------------------------
.text:0040EDD2
.text:0040EDD2 loc_40EDD2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040EDD2                 mov     [esp+278h+C], edi ; hFindFile
.text:0040EDD5                 call    FindClose
.text:0040EDDA                 sub     esp, 4
.text:0040EDDD                 call    _errno
.text:0040EDE2                 mov     dword ptr [eax], 22h ; '"'
.text:0040EDE8
.text:0040EDE8 loc_40EDE8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040EDE8                 xor     eax, eax
.text:0040EDEA                 jmp     short loc_40EDC7
.text:0040EDEC ; ---------------------------------------------------------------------------
.text:0040EDEC
.text:0040EDEC loc_40EDEC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040EDEC                 call    _errno
.text:0040EDF1                 mov     dword ptr [eax], 16h
.text:0040EDF7                 jmp     short loc_40EDE8
.text:0040EDF7 ; ---------------------------------------------------------------------------
.text:0040EDF9                 align 10h
.text:0040EE00
.text:0040EE00 loc_40EE00:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040EE00                 movzx   eax, byte ptr [esi+1]
.text:0040EE04                 test    al, al
.text:0040EE06                 jnz     short loc_40EE35
.text:0040EE08
.text:0040EE08 loc_40EE08:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040EE08                                         ; _win32_longpath+1EB↓j ...
.text:0040EE08                 test    bl, bl
.text:0040EE0A                 jz      short loc_40EE2C
.text:0040EE0C                 cmp     bl, 2Fh ; '/'
.text:0040EE0F                 jz      short loc_40EE2C
.text:0040EE11                 cmp     bl, 5Ch ; '\'
.text:0040EE14                 jz      short loc_40EE2C
.text:0040EE16
.text:0040EE16 loc_40EE16:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040EE16                 mov     [ebp+268h+Destination], bl
.text:0040EE19                 inc     esi
.text:0040EE1A                 inc     ebp
.text:0040EE1B                 movzx   ebx, byte ptr [esi]
.text:0040EE1E                 test    bl, bl
.text:0040EE20                 jz      short loc_40EE2C
.text:0040EE22                 cmp     bl, 2Fh ; '/'
.text:0040EE25                 jz      short loc_40EE2C
.text:0040EE27                 cmp     bl, 5Ch ; '\'
.text:0040EE2A                 jnz     short loc_40EE16
.text:0040EE2C
.text:0040EE2C loc_40EE2C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040EE2C                                         ; _win32_longpath+1BF↑j ...
.text:0040EE2C                 mov     [ebp+268h+Destination], 0
.text:0040EE30                 jmp     loc_40ED9C
.text:0040EE35 ; ---------------------------------------------------------------------------
.text:0040EE35
.text:0040EE35 loc_40EE35:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040EE35                 cmp     al, 2Fh ; '/'
.text:0040EE37                 jz      short loc_40EE08
.text:0040EE39                 cmp     al, 5Ch ; '\'
.text:0040EE3B                 jz      short loc_40EE08
.text:0040EE3D                 cmp     al, 2Eh ; '.'
.text:0040EE3F                 jnz     loc_40ECDB
.text:0040EE45                 movzx   eax, byte ptr [esi+2]
.text:0040EE49                 test    al, al
.text:0040EE4B                 jz      short loc_40EE08
.text:0040EE4D                 cmp     al, 2Fh ; '/'
.text:0040EE4F                 jz      short loc_40EE08
.text:0040EE51                 cmp     al, 5Ch ; '\'
.text:0040EE53                 jnz     loc_40ECDB
.text:0040EE59                 jmp     short loc_40EE08
.text:0040EE59 ; ---------------------------------------------------------------------------
.text:0040EE5B                 align 10h
.text:0040EE60
.text:0040EE60 loc_40EE60:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040EE60                                         ; _win32_longpath+7C↑j
.text:0040EE60                 mov     [ebp+268h+Destination], bl
.text:0040EE63                 inc     esi
.text:0040EE64                 inc     ebp
.text:0040EE65                 mov     [ebp+268h+Destination], 0
.text:0040EE69                 movzx   ebx, byte ptr [esi]
.text:0040EE6C                 test    bl, bl
.text:0040EE6E                 jz      loc_40ECD2
.text:0040EE74                 cmp     bl, 2Fh ; '/'
.text:0040EE77                 jz      short loc_40EE90
.text:0040EE79                 cmp     bl, 5Ch ; '\'
.text:0040EE7C                 jnz     loc_40ECD2
.text:0040EE82                 lea     esi, [esi+0]
.text:0040EE89                 lea     edi, [edi+0]
.text:0040EE90
.text:0040EE90 loc_40EE90:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040EE90                                         ; _win32_longpath+24F↓j ...
.text:0040EE90                 inc     esi
.text:0040EE91                 movzx   ebx, byte ptr [esi]
.text:0040EE94                 test    bl, bl
.text:0040EE96                 jz      loc_40ECD2
.text:0040EE9C                 cmp     bl, 2Fh ; '/'
.text:0040EE9F                 jz      short loc_40EE90
.text:0040EEA1                 cmp     bl, 5Ch ; '\'
.text:0040EEA4                 jz      short loc_40EE90
.text:0040EEA6                 jmp     loc_40ECD2
.text:0040EEAB ; ---------------------------------------------------------------------------
.text:0040EEAB
.text:0040EEAB loc_40EEAB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040EEAB                                         ; _win32_longpath+53↑j
.text:0040EEAB                 mov     edi, [esp+278h+lpFileName]
.text:0040EEB2                 movzx   edx, byte ptr [edi+1]
.text:0040EEB6                 cmp     dl, 2Fh ; '/'
.text:0040EEB9                 jz      short loc_40EEC4
.text:0040EEBB                 cmp     dl, 5Ch ; '\'
.text:0040EEBE                 jnz     loc_40ECA9
.text:0040EEC4
.text:0040EEC4 loc_40EEC4:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040EEC4                 mov     esi, [esp+278h+lpFileName]
.text:0040EECB                 mov     [ebp+268h+Destination], al
.text:0040EECE                 mov     ecx, [esp+278h+lpFileName]
.text:0040EED5                 inc     ebp
.text:0040EED6                 add     esi, 2
.text:0040EED9                 movzx   ebx, byte ptr [ecx+1]
.text:0040EEDD                 mov     [ebp+268h+Destination], bl
.text:0040EEE0                 inc     ebp
.text:0040EEE1                 movzx   eax, byte ptr [ecx+2]
.text:0040EEE5                 test    al, al
.text:0040EEE7                 jz      loc_40EFC3
.text:0040EEED                 cmp     al, 2Fh ; '/'
.text:0040EEEF                 jz      loc_40EFA8
.text:0040EEF5                 cmp     al, 5Ch ; '\'
.text:0040EEF7                 mov     bl, al
.text:0040EEF9                 jz      loc_40EFA8
.text:0040EEFF
.text:0040EEFF loc_40EEFF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040EEFF                                         ; _win32_longpath+376↓j
.text:0040EEFF                 test    bl, bl
.text:0040EF01                 jz      loc_40ECA9
.text:0040EF07                 cmp     bl, 2Fh ; '/'
.text:0040EF0A                 jz      short loc_40EF2B
.text:0040EF0C                 cmp     bl, 5Ch ; '\'
.text:0040EF0F                 jz      short loc_40EF2B
.text:0040EF11
.text:0040EF11 loc_40EF11:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040EF11                 mov     [ebp+268h+Destination], bl
.text:0040EF14                 inc     esi
.text:0040EF15                 inc     ebp
.text:0040EF16                 movzx   ebx, byte ptr [esi]
.text:0040EF19                 test    bl, bl
.text:0040EF1B                 jz      loc_40ECA9
.text:0040EF21                 cmp     bl, 2Fh ; '/'
.text:0040EF24                 jz      short loc_40EF2B
.text:0040EF26                 cmp     bl, 5Ch ; '\'
.text:0040EF29                 jnz     short loc_40EF11
.text:0040EF2B
.text:0040EF2B loc_40EF2B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040EF2B                                         ; _win32_longpath+2BF↑j ...
.text:0040EF2B                 test    bl, bl
.text:0040EF2D                 jz      loc_40ECA9
.text:0040EF33                 mov     [ebp+268h+Destination], bl
.text:0040EF36                 inc     esi
.text:0040EF37                 inc     ebp
.text:0040EF38                 movzx   ebx, byte ptr [esi]
.text:0040EF3B                 test    bl, bl
.text:0040EF3D                 jz      loc_40ECA9
.text:0040EF43                 cmp     bl, 2Fh ; '/'
.text:0040EF46                 jz      short loc_40EF90
.text:0040EF48                 cmp     bl, 5Ch ; '\'
.text:0040EF4B                 jz      short loc_40EF90
.text:0040EF4D
.text:0040EF4D loc_40EF4D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040EF4D                 test    bl, bl
.text:0040EF4F                 jz      loc_40ECA9
.text:0040EF55                 cmp     bl, 2Fh ; '/'
.text:0040EF58                 jz      loc_40ECA9
.text:0040EF5E                 cmp     bl, 5Ch ; '\'
.text:0040EF61                 jz      loc_40ECA9
.text:0040EF67
.text:0040EF67 loc_40EF67:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040EF67                 mov     [ebp+268h+Destination], bl
.text:0040EF6A                 inc     esi
.text:0040EF6B                 inc     ebp
.text:0040EF6C                 movzx   ebx, byte ptr [esi]
.text:0040EF6F                 test    bl, bl
.text:0040EF71                 jz      loc_40ECA9
.text:0040EF77                 cmp     bl, 2Fh ; '/'
.text:0040EF7A                 jz      loc_40ECA9
.text:0040EF80                 cmp     bl, 5Ch ; '\'
.text:0040EF83                 jnz     short loc_40EF67
.text:0040EF85                 jmp     loc_40ECA9
.text:0040EF85 ; ---------------------------------------------------------------------------
.text:0040EF8A                 align 10h
.text:0040EF90
.text:0040EF90 loc_40EF90:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040EF90                                         ; _win32_longpath+2FB↑j ...
.text:0040EF90                 inc     esi
.text:0040EF91                 movzx   ebx, byte ptr [esi]
.text:0040EF94                 test    bl, bl
.text:0040EF96                 jz      loc_40ECA9
.text:0040EF9C                 cmp     bl, 2Fh ; '/'
.text:0040EF9F                 jz      short loc_40EF90
.text:0040EFA1                 cmp     bl, 5Ch ; '\'
.text:0040EFA4                 jz      short loc_40EF90
.text:0040EFA6                 jmp     short loc_40EF4D
.text:0040EFA8 ; ---------------------------------------------------------------------------
.text:0040EFA8
.text:0040EFA8 loc_40EFA8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040EFA8                                         ; _win32_longpath+2A9↑j ...
.text:0040EFA8                 inc     esi
.text:0040EFA9                 movzx   ebx, byte ptr [esi]
.text:0040EFAC                 test    bl, bl
.text:0040EFAE                 jz      loc_40ECA9
.text:0040EFB4                 cmp     bl, 2Fh ; '/'
.text:0040EFB7                 jz      short loc_40EFA8
.text:0040EFB9                 cmp     bl, 5Ch ; '\'
.text:0040EFBC                 jz      short loc_40EFA8
.text:0040EFBE                 jmp     loc_40EEFF
.text:0040EFC3 ; ---------------------------------------------------------------------------
.text:0040EFC3
.text:0040EFC3 loc_40EFC3:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040EFC3                 movzx   ebx, byte ptr [esi]
.text:0040EFC6                 jmp     loc_40EEFF
.text:0040EFCB ; ---------------------------------------------------------------------------
.text:0040EFCB
.text:0040EFCB loc_40EFCB:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040EFCB                 movzx   ecx, byte ptr [eax]
.text:0040EFCE                 mov     esi, eax
.text:0040EFD0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040EFD5                 add     esi, 2
.text:0040EFD8                 lea     ebp, [esp+12h]
.text:0040EFDC                 mov     [esp+278h+Destination], cl
.text:0040EFE0                 jmp     loc_40ECA9
.text:0040EFE0 _win32_longpath endp
.text:0040EFE0
.text:0040EFE0 ; ---------------------------------------------------------------------------
.text:0040EFE5                 align 10h
.text:0040EFF0                 sub     esp, 0Ch
.text:0040EFF3                 mov     edx, [esp+10h]
.text:0040EFF7                 mov     dword ptr [esp+4], 0
.text:0040EFFF                 mov     [esp], edx
.text:0040F002                 call    sub_410E30
.text:0040F007                 inc     eax
.text:0040F008                 setnz   dl
.text:0040F00B                 add     esp, 0Ch
.text:0040F00E                 movzx   eax, dl
.text:0040F011                 retn
.text:0040F011 ; ---------------------------------------------------------------------------
.text:0040F012                 align 10h
.text:0040F020
.text:0040F020 ; =============== S U B R O U T I N E =======================================
.text:0040F020
.text:0040F020
.text:0040F020 sub_40F020      proc near               ; CODE XREF: sub_410D00+AA↓p
.text:0040F020                                         ; sub_4128B0+B4↓p
.text:0040F020
.text:0040F020 arg_0           = dword ptr  4
.text:0040F020
.text:0040F020                 mov     ecx, [esp+arg_0]
.text:0040F024                 mov     edx, ecx
.text:0040F026                 movzx   eax, byte ptr [ecx]
.text:0040F029                 test    al, al
.text:0040F02B                 jz      short loc_40F03C
.text:0040F02D                 lea     esi, [esi+0]
.text:0040F030
.text:0040F030 loc_40F030:                             ; CODE XREF: sub_40F020+1A↓j
.text:0040F030                 cmp     al, 5Ch ; '\'
.text:0040F032                 jz      short loc_40F040
.text:0040F034
.text:0040F034 loc_40F034:                             ; CODE XREF: sub_40F020+23↓j
.text:0040F034                 inc     edx
.text:0040F035                 movzx   eax, byte ptr [edx]
.text:0040F038                 test    al, al
.text:0040F03A                 jnz     short loc_40F030
.text:0040F03C
.text:0040F03C loc_40F03C:                             ; CODE XREF: sub_40F020+B↑j
.text:0040F03C                 mov     eax, ecx
.text:0040F03E                 retn
.text:0040F03E ; ---------------------------------------------------------------------------
.text:0040F03F                 align 10h
.text:0040F040
.text:0040F040 loc_40F040:                             ; CODE XREF: sub_40F020+12↑j
.text:0040F040                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040F043                 jmp     short loc_40F034
.text:0040F043 sub_40F020      endp
.text:0040F043
.text:0040F043 ; ---------------------------------------------------------------------------
.text:0040F045                 align 10h
.text:0040F050                 push    ebx
.text:0040F051                 sub     esp, 8
.text:0040F054                 mov     ebx, [esp+14h]
.text:0040F058                 mov     edx, [esp+10h]
.text:0040F05C                 mov     [esp], ebx
.text:0040F05F                 mov     [esp+4], edx
.text:0040F063                 call    strcpy
.text:0040F068                 movzx   eax, byte ptr [ebx]
.text:0040F06B                 mov     edx, ebx
.text:0040F06D                 test    al, al
.text:0040F06F                 jz      short loc_40F08C
.text:0040F071                 jmp     short loc_40F080
.text:0040F071 ; ---------------------------------------------------------------------------
.text:0040F073                 align 10h
.text:0040F080
.text:0040F080 loc_40F080:                             ; CODE XREF: .text:0040F071↑j
.text:0040F080                                         ; .text:0040F08A↓j
.text:0040F080                 cmp     al, 5Ch ; '\'
.text:0040F082                 jz      short loc_40F093
.text:0040F084
.text:0040F084 loc_40F084:                             ; CODE XREF: .text:0040F096↓j
.text:0040F084                 inc     edx
.text:0040F085                 movzx   eax, byte ptr [edx]
.text:0040F088                 test    al, al
.text:0040F08A                 jnz     short loc_40F080
.text:0040F08C
.text:0040F08C loc_40F08C:                             ; CODE XREF: .text:0040F06F↑j
.text:0040F08C                 add     esp, 8
.text:0040F08F                 xor     eax, eax
.text:0040F091                 pop     ebx
.text:0040F092                 retn
.text:0040F093 ; ---------------------------------------------------------------------------
.text:0040F093
.text:0040F093 loc_40F093:                             ; CODE XREF: .text:0040F082↑j
.text:0040F093                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040F096                 jmp     short loc_40F084
.text:0040F096 ; ---------------------------------------------------------------------------
.text:0040F098                 align 10h
.text:0040F0A0
.text:0040F0A0 ; =============== S U B R O U T I N E =======================================
.text:0040F0A0
.text:0040F0A0
.text:0040F0A0 sub_40F0A0      proc near               ; CODE XREF: sub_40D920+16↑p
.text:0040F0A0                                         ; sub_40DE20+1F↑p ...
.text:0040F0A0
.text:0040F0A0 arg_0           = dword ptr  4
.text:0040F0A0
.text:0040F0A0                 mov     ecx, [esp+arg_0]
.text:0040F0A4                 mov     edx, ecx
.text:0040F0A6                 movzx   eax, byte ptr [ecx]
.text:0040F0A9                 test    al, al
.text:0040F0AB                 jz      short loc_40F0BC
.text:0040F0AD                 lea     esi, [esi+0]
.text:0040F0B0
.text:0040F0B0 loc_40F0B0:                             ; CODE XREF: sub_40F0A0+1A↓j
.text:0040F0B0                 cmp     al, 2Fh ; '/'
.text:0040F0B2                 jz      short loc_40F0C0
.text:0040F0B4
.text:0040F0B4 loc_40F0B4:                             ; CODE XREF: sub_40F0A0+23↓j
.text:0040F0B4                 inc     edx
.text:0040F0B5                 movzx   eax, byte ptr [edx]
.text:0040F0B8                 test    al, al
.text:0040F0BA                 jnz     short loc_40F0B0
.text:0040F0BC
.text:0040F0BC loc_40F0BC:                             ; CODE XREF: sub_40F0A0+B↑j
.text:0040F0BC                 mov     eax, ecx
.text:0040F0BE                 retn
.text:0040F0BE ; ---------------------------------------------------------------------------
.text:0040F0BF                 align 10h
.text:0040F0C0
.text:0040F0C0 loc_40F0C0:                             ; CODE XREF: sub_40F0A0+12↑j
.text:0040F0C0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F0C3                 jmp     short loc_40F0B4
.text:0040F0C3 sub_40F0A0      endp
.text:0040F0C3
.text:0040F0C3 ; ---------------------------------------------------------------------------
.text:0040F0C5                 align 10h
.text:0040F0D0                 push    ebx
.text:0040F0D1                 sub     esp, 8
.text:0040F0D4                 mov     ebx, [esp+14h]
.text:0040F0D8                 mov     edx, [esp+10h]
.text:0040F0DC                 mov     [esp], ebx
.text:0040F0DF                 mov     [esp+4], edx
.text:0040F0E3                 call    strcpy
.text:0040F0E8                 movzx   eax, byte ptr [ebx]
.text:0040F0EB                 mov     edx, ebx
.text:0040F0ED                 test    al, al
.text:0040F0EF                 jz      short loc_40F10C
.text:0040F0F1                 jmp     short loc_40F100
.text:0040F0F1 ; ---------------------------------------------------------------------------
.text:0040F0F3                 align 10h
.text:0040F100
.text:0040F100 loc_40F100:                             ; CODE XREF: .text:0040F0F1↑j
.text:0040F100                                         ; .text:0040F10A↓j
.text:0040F100                 cmp     al, 2Fh ; '/'
.text:0040F102                 jz      short loc_40F113
.text:0040F104
.text:0040F104 loc_40F104:                             ; CODE XREF: .text:0040F116↓j
.text:0040F104                 inc     edx
.text:0040F105                 movzx   eax, byte ptr [edx]
.text:0040F108                 test    al, al
.text:0040F10A                 jnz     short loc_40F100
.text:0040F10C
.text:0040F10C loc_40F10C:                             ; CODE XREF: .text:0040F0EF↑j
.text:0040F10C                 add     esp, 8
.text:0040F10F                 xor     eax, eax
.text:0040F111                 pop     ebx
.text:0040F112                 retn
.text:0040F113 ; ---------------------------------------------------------------------------
.text:0040F113
.text:0040F113 loc_40F113:                             ; CODE XREF: .text:0040F102↑j
.text:0040F113                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F116                 jmp     short loc_40F104
.text:0040F116 ; ---------------------------------------------------------------------------
.text:0040F118                 align 10h
.text:0040F120                 push    ebx
.text:0040F121                 sub     esp, 8
.text:0040F124                 mov     ebx, [esp+14h]
.text:0040F128                 mov     edx, [esp+10h]
.text:0040F12C                 mov     [esp+4], ebx
.text:0040F130                 mov     [esp], edx
.text:0040F133                 call    sub_410CB0
.text:0040F138                 movzx   eax, byte ptr [ebx]
.text:0040F13B                 mov     edx, ebx
.text:0040F13D                 test    al, al
.text:0040F13F                 jz      short loc_40F15C
.text:0040F141                 jmp     short loc_40F150
.text:0040F141 ; ---------------------------------------------------------------------------
.text:0040F143                 align 10h
.text:0040F150
.text:0040F150 loc_40F150:                             ; CODE XREF: .text:0040F141↑j
.text:0040F150                                         ; .text:0040F15A↓j
.text:0040F150                 cmp     al, 2Fh ; '/'
.text:0040F152                 jz      short loc_40F163
.text:0040F154
.text:0040F154 loc_40F154:                             ; CODE XREF: .text:0040F166↓j
.text:0040F154                 inc     edx
.text:0040F155                 movzx   eax, byte ptr [edx]
.text:0040F158                 test    al, al
.text:0040F15A                 jnz     short loc_40F150
.text:0040F15C
.text:0040F15C loc_40F15C:                             ; CODE XREF: .text:0040F13F↑j
.text:0040F15C                 add     esp, 8
.text:0040F15F                 xor     eax, eax
.text:0040F161                 pop     ebx
.text:0040F162                 retn
.text:0040F163 ; ---------------------------------------------------------------------------
.text:0040F163
.text:0040F163 loc_40F163:                             ; CODE XREF: .text:0040F152↑j
.text:0040F163                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F166                 jmp     short loc_40F154
.text:0040F166 ; ---------------------------------------------------------------------------
.text:0040F168                 align 10h
.text:0040F170                 push    ebx
.text:0040F171                 sub     esp, 8
.text:0040F174                 mov     ebx, [esp+14h]
.text:0040F178                 mov     edx, [esp+10h]
.text:0040F17C                 mov     [esp], ebx
.text:0040F17F                 mov     [esp+4], edx
.text:0040F183                 call    sub_410CB0
.text:0040F188                 movzx   eax, byte ptr [ebx]
.text:0040F18B                 mov     edx, ebx
.text:0040F18D                 test    al, al
.text:0040F18F                 jz      short loc_40F1AC
.text:0040F191                 jmp     short loc_40F1A0
.text:0040F191 ; ---------------------------------------------------------------------------
.text:0040F193                 align 10h
.text:0040F1A0
.text:0040F1A0 loc_40F1A0:                             ; CODE XREF: .text:0040F191↑j
.text:0040F1A0                                         ; .text:0040F1AA↓j
.text:0040F1A0                 cmp     al, 5Ch ; '\'
.text:0040F1A2                 jz      short loc_40F1B1
.text:0040F1A4
.text:0040F1A4 loc_40F1A4:                             ; CODE XREF: .text:0040F1B4↓j
.text:0040F1A4                 inc     edx
.text:0040F1A5                 movzx   eax, byte ptr [edx]
.text:0040F1A8                 test    al, al
.text:0040F1AA                 jnz     short loc_40F1A0
.text:0040F1AC
.text:0040F1AC loc_40F1AC:                             ; CODE XREF: .text:0040F18F↑j
.text:0040F1AC                 add     esp, 8
.text:0040F1AF                 pop     ebx
.text:0040F1B0                 retn
.text:0040F1B1 ; ---------------------------------------------------------------------------
.text:0040F1B1
.text:0040F1B1 loc_40F1B1:                             ; CODE XREF: .text:0040F1A2↑j
.text:0040F1B1                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040F1B4                 jmp     short loc_40F1A4
.text:0040F1B4 ; ---------------------------------------------------------------------------
.text:0040F1B6                 align 10h
.text:0040F1C0
.text:0040F1C0 ; =============== S U B R O U T I N E =======================================
.text:0040F1C0
.text:0040F1C0
.text:0040F1C0 ; int __cdecl sub_40F1C0(LPSTR)
.text:0040F1C0 sub_40F1C0      proc near               ; CODE XREF: .text:0040F24E↓p
.text:0040F1C0                                         ; .text:0040F28E↓p ...
.text:0040F1C0
.text:0040F1C0 hModule         = dword ptr -1Ch
.text:0040F1C0 lpFilename      = dword ptr -18h
.text:0040F1C0 nSize           = dword ptr -14h
.text:0040F1C0 arg_0           = dword ptr  4
.text:0040F1C0
.text:0040F1C0                 push    esi
.text:0040F1C1                 push    ebx
.text:0040F1C2                 sub     esp, 14h
.text:0040F1C5                 mov     esi, [esp+1Ch+arg_0]
.text:0040F1C9                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040F1D1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040F1D8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040F1DC                 call    GetModuleFileNameA
.text:0040F1E1                 sub     esp, 0Ch
.text:0040F1E4                 test    eax, eax
.text:0040F1E6                 jz      short loc_40F228
.text:0040F1E8                 cmp     eax, 104h
.text:0040F1ED                 jg      short loc_40F219
.text:0040F1EF
.text:0040F1EF loc_40F1EF:                             ; CODE XREF: sub_40F1C0+66↓j
.text:0040F1EF                                         ; sub_40F1C0+78↓j
.text:0040F1EF                 movzx   eax, byte ptr [esi]
.text:0040F1F2                 mov     edx, esi
.text:0040F1F4                 test    al, al
.text:0040F1F6                 jz      short loc_40F20C
.text:0040F1F8                 nop
.text:0040F1F9                 lea     esi, [esi+0]
.text:0040F200
.text:0040F200 loc_40F200:                             ; CODE XREF: sub_40F1C0+4A↓j
.text:0040F200                 cmp     al, 5Ch ; '\'
.text:0040F202                 jz      short loc_40F214
.text:0040F204
.text:0040F204 loc_40F204:                             ; CODE XREF: sub_40F1C0+57↓j
.text:0040F204                 inc     edx
.text:0040F205                 movzx   eax, byte ptr [edx]
.text:0040F208                 test    al, al
.text:0040F20A                 jnz     short loc_40F200
.text:0040F20C
.text:0040F20C loc_40F20C:                             ; CODE XREF: sub_40F1C0+36↑j
.text:0040F20C                 add     esp, 14h
.text:0040F20F                 mov     eax, esi
.text:0040F211                 pop     ebx
.text:0040F212                 pop     esi
.text:0040F213                 retn
.text:0040F214 ; ---------------------------------------------------------------------------
.text:0040F214
.text:0040F214 loc_40F214:                             ; CODE XREF: sub_40F1C0+42↑j
.text:0040F214                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040F217                 jmp     short loc_40F204
.text:0040F219 ; ---------------------------------------------------------------------------
.text:0040F219
.text:0040F219 loc_40F219:                             ; CODE XREF: sub_40F1C0+2D↑j
.text:0040F219                 call    _errno
.text:0040F21E                 mov     dword ptr [eax], 26h ; '&'
.text:0040F224                 xor     esi, esi
.text:0040F226                 jmp     short loc_40F1EF
.text:0040F228 ; ---------------------------------------------------------------------------
.text:0040F228
.text:0040F228 loc_40F228:                             ; CODE XREF: sub_40F1C0+26↑j
.text:0040F228                 call    sub_410C90
.text:0040F22D                 mov     ebx, eax
.text:0040F22F                 xor     esi, esi
.text:0040F231                 call    _errno
.text:0040F236                 mov     [eax], ebx
.text:0040F238                 jmp     short loc_40F1EF
.text:0040F238 sub_40F1C0      endp
.text:0040F238
.text:0040F238 ; ---------------------------------------------------------------------------
.text:0040F23A                 align 10h
.text:0040F240                 sub     esp, 0Ch
.text:0040F243                 mov     [esp+8], ebx
.text:0040F247                 mov     ebx, [esp+10h]
.text:0040F24B                 mov     [esp], ebx
.text:0040F24E                 call    sub_40F1C0
.text:0040F253                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040F25B                 mov     [esp], ebx
.text:0040F25E                 call    strrchr
.text:0040F263                 test    eax, eax
.text:0040F265                 jz      short loc_40F26A
.text:0040F267                 lea     ebx, [eax+1]
.text:0040F26A
.text:0040F26A loc_40F26A:                             ; CODE XREF: .text:0040F265↑j
.text:0040F26A                 mov     eax, ebx
.text:0040F26C                 mov     ebx, [esp+8]
.text:0040F270                 add     esp, 0Ch
.text:0040F273                 retn
.text:0040F273 ; ---------------------------------------------------------------------------
.text:0040F274                 align 10h
.text:0040F280                 sub     esp, 0Ch
.text:0040F283                 mov     [esp+8], ebx
.text:0040F287                 mov     ebx, [esp+10h]
.text:0040F28B                 mov     [esp], ebx
.text:0040F28E                 call    sub_40F1C0
.text:0040F293                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040F29B                 mov     [esp], ebx
.text:0040F29E                 call    strrchr
.text:0040F2A3                 test    eax, eax
.text:0040F2A5                 jz      short loc_40F2AA
.text:0040F2A7                 mov     byte ptr [eax], 0
.text:0040F2AA
.text:0040F2AA loc_40F2AA:                             ; CODE XREF: .text:0040F2A5↑j
.text:0040F2AA                 mov     eax, ebx
.text:0040F2AC                 mov     ebx, [esp+8]
.text:0040F2B0                 add     esp, 0Ch
.text:0040F2B3                 retn
.text:0040F2B3 ; ---------------------------------------------------------------------------
.text:0040F2B4                 align 10h
.text:0040F2C0                 sub     esp, 0Ch
.text:0040F2C3                 mov     [esp+8], ebx
.text:0040F2C7                 mov     ebx, [esp+10h]
.text:0040F2CB                 mov     [esp], ebx
.text:0040F2CE                 call    sub_40F1C0
.text:0040F2D3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040F2DB                 mov     [esp], ebx
.text:0040F2DE                 call    strrchr
.text:0040F2E3                 test    eax, eax
.text:0040F2E5                 jz      short loc_40F2EA
.text:0040F2E7                 mov     byte ptr [eax], 0
.text:0040F2EA
.text:0040F2EA loc_40F2EA:                             ; CODE XREF: .text:0040F2E5↑j
.text:0040F2EA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040F2F2                 mov     [esp], ebx
.text:0040F2F5                 call    strrchr
.text:0040F2FA                 test    eax, eax
.text:0040F2FC                 jz      short loc_40F301
.text:0040F2FE                 mov     byte ptr [eax], 0
.text:0040F301
.text:0040F301 loc_40F301:                             ; CODE XREF: .text:0040F2FC↑j
.text:0040F301                 mov     eax, ebx
.text:0040F303                 mov     ebx, [esp+8]
.text:0040F307                 add     esp, 0Ch
.text:0040F30A                 retn
.text:0040F30A ; ---------------------------------------------------------------------------
.text:0040F30B                 align 10h
.text:0040F310                 sub     esp, 1Ch
.text:0040F313                 mov     edx, [esp+20h]
.text:0040F317                 mov     [esp+10h], ebx
.text:0040F31B                 xor     ebx, ebx
.text:0040F31D                 mov     [esp+14h], esi
.text:0040F321                 mov     [esp+18h], edi
.text:0040F325                 mov     [esp], edx
.text:0040F328                 call    sub_410CE0
.text:0040F32D                 mov     edx, [esp+24h]
.text:0040F331                 mov     edi, eax
.text:0040F333                 mov     [esp], edx
.text:0040F336                 call    sub_410CE0
.text:0040F33B                 mov     [esp+4], eax
.text:0040F33F                 mov     esi, eax
.text:0040F341                 mov     [esp], edi
.text:0040F344                 call    _stricmp_0
.text:0040F349                 mov     [esp], edi
.text:0040F34C                 test    eax, eax
.text:0040F34E                 setz    bl
.text:0040F351                 call    free
.text:0040F356                 mov     [esp], esi
.text:0040F359                 call    free
.text:0040F35E                 mov     eax, ebx
.text:0040F360                 mov     esi, [esp+14h]
.text:0040F364                 mov     ebx, [esp+10h]
.text:0040F368                 mov     edi, [esp+18h]
.text:0040F36C                 add     esp, 1Ch
.text:0040F36F                 retn
.text:0040F370 ; ---------------------------------------------------------------------------
.text:0040F370                 xor     eax, eax
.text:0040F372                 retn
.text:0040F372 ; ---------------------------------------------------------------------------
.text:0040F373 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040F3A7↓o
.text:0040F380 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040F3B6↓o
.text:0040F390 ; ---------------------------------------------------------------------------
.text:0040F390                 sub     esp, 1Ch
.text:0040F393                 mov     [esp+10h], ebx
.text:0040F397                 mov     ebx, [esp+20h]
.text:0040F39B                 mov     [esp+18h], edi
.text:0040F39F                 mov     edi, [esp+24h]
.text:0040F3A3                 mov     [esp+14h], esi
.text:0040F3A7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040F3AE                 call    GetModuleHandleA
.text:0040F3B3                 sub     esp, 4
.text:0040F3B6                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040F3BE                 mov     [esp], eax
.text:0040F3C1                 call    GetProcAddress
.text:0040F3C6                 sub     esp, 8
.text:0040F3C9                 test    eax, eax
.text:0040F3CB                 jz      short loc_40F3E3
.text:0040F3CD                 mov     dword ptr [esp+8], 104h
.text:0040F3D5                 mov     [esp+4], ebx
.text:0040F3D9                 mov     [esp], edi
.text:0040F3DC                 call    eax
.text:0040F3DE                 sub     esp, 0Ch
.text:0040F3E1                 mov     esi, eax
.text:0040F3E3
.text:0040F3E3 loc_40F3E3:                             ; CODE XREF: .text:0040F3CB↑j
.text:0040F3E3                 test    esi, esi
.text:0040F3E5                 jz      short loc_40F400
.text:0040F3E7
.text:0040F3E7 loc_40F3E7:                             ; CODE XREF: .text:0040F41B↓j
.text:0040F3E7                 mov     eax, ebx
.text:0040F3E9                 mov     esi, [esp+14h]
.text:0040F3ED                 mov     ebx, [esp+10h]
.text:0040F3F1                 mov     edi, [esp+18h]
.text:0040F3F5                 add     esp, 1Ch
.text:0040F3F8                 retn
.text:0040F3F8 ; ---------------------------------------------------------------------------
.text:0040F3F9                 align 10h
.text:0040F400
.text:0040F400 loc_40F400:                             ; CODE XREF: .text:0040F3E5↑j
.text:0040F400                 call    sub_411770
.text:0040F405                 mov     [esp], ebx
.text:0040F408                 mov     [esp+4], edi
.text:0040F40C                 call    strcpy
.text:0040F411                 mov     [esp], ebx
.text:0040F414                 call    _win32_longpath
.text:0040F419                 mov     ebx, eax
.text:0040F41B                 jmp     short loc_40F3E7
.text:0040F41B ; ---------------------------------------------------------------------------
.text:0040F41D                 align 10h
.text:0040F420                 sub     esp, 1Ch
.text:0040F423                 mov     [esp+18h], edi
.text:0040F427                 mov     edi, [esp+20h]
.text:0040F42B                 mov     [esp+10h], ebx
.text:0040F42F                 mov     [esp+14h], esi
.text:0040F433                 mov     dword ptr [esp+8], 0
.text:0040F43B                 mov     dword ptr [esp+4], 0
.text:0040F443                 mov     [esp], edi
.text:0040F446                 call    GetShortPathNameA
.text:0040F44B                 sub     esp, 0Ch
.text:0040F44E                 mov     ebx, eax
.text:0040F450                 test    eax, eax
.text:0040F452                 jz      short loc_40F4A0
.text:0040F454                 lea     edx, [eax+1]
.text:0040F457                 mov     [esp], edx
.text:0040F45A                 call    malloc
.text:0040F45F                 test    eax, eax
.text:0040F461                 mov     esi, eax
.text:0040F463                 jz      short loc_40F4A0
.text:0040F465                 mov     [esp+8], ebx
.text:0040F469                 mov     [esp+4], eax
.text:0040F46D                 mov     [esp], edi
.text:0040F470                 call    GetShortPathNameA
.text:0040F475                 sub     esp, 0Ch
.text:0040F478                 mov     edx, esi
.text:0040F47A                 test    eax, eax
.text:0040F47C                 jz      short loc_40F492
.text:0040F47E                 mov     esi, esi
.text:0040F480
.text:0040F480 loc_40F480:                             ; CODE XREF: .text:0040F4B0↓j
.text:0040F480                 mov     ebx, [esp+10h]
.text:0040F484                 mov     eax, edx
.text:0040F486                 mov     esi, [esp+14h]
.text:0040F48A                 mov     edi, [esp+18h]
.text:0040F48E                 add     esp, 1Ch
.text:0040F491                 retn
.text:0040F492 ; ---------------------------------------------------------------------------
.text:0040F492
.text:0040F492 loc_40F492:                             ; CODE XREF: .text:0040F47C↑j
.text:0040F492                 mov     [esp], esi
.text:0040F495                 call    free
.text:0040F49A                 lea     esi, [esi+0]
.text:0040F4A0
.text:0040F4A0 loc_40F4A0:                             ; CODE XREF: .text:0040F452↑j
.text:0040F4A0                                         ; .text:0040F463↑j
.text:0040F4A0                 call    sub_410C90
.text:0040F4A5                 mov     esi, eax
.text:0040F4A7                 call    _errno
.text:0040F4AC                 mov     [eax], esi
.text:0040F4AE                 mov     edx, edi
.text:0040F4B0                 jmp     short loc_40F480
.text:0040F4B0 ; ---------------------------------------------------------------------------
.text:0040F4B2                 align 10h
.text:0040F4C0 ; const char String[4]
.text:0040F4C0 String          db ' :/',0              ; DATA XREF: sub_40F4D0+FA↓o
.text:0040F4C4                 align 10h
.text:0040F4D0
.text:0040F4D0 ; =============== S U B R O U T I N E =======================================
.text:0040F4D0
.text:0040F4D0
.text:0040F4D0 ; int __cdecl sub_40F4D0(LPCSTR)
.text:0040F4D0 sub_40F4D0      proc near               ; CODE XREF: sub_40D920+E↑p
.text:0040F4D0                                         ; sub_40DE20+17↑p ...
.text:0040F4D0
.text:0040F4D0 Str             = dword ptr -1Ch
.text:0040F4D0 Val             = dword ptr -18h
.text:0040F4D0 Count           = dword ptr -14h
.text:0040F4D0 var_10          = dword ptr -10h
.text:0040F4D0 var_C           = dword ptr -0Ch
.text:0040F4D0 var_8           = dword ptr -8
.text:0040F4D0 var_4           = dword ptr -4
.text:0040F4D0 arg_0           = dword ptr  4
.text:0040F4D0
.text:0040F4D0                 sub     esp, 1Ch
.text:0040F4D3                 mov     edx, [esp+1Ch+arg_0]
.text:0040F4D7                 mov     [esp+1Ch+var_8], edi
.text:0040F4DB                 mov     [esp+1Ch+var_10], ebx
.text:0040F4DF                 mov     [esp+1Ch+var_C], esi
.text:0040F4E3                 mov     [esp+1Ch+var_4], ebp
.text:0040F4E7                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040F4EA                 call    sub_410CE0
.text:0040F4EF                 test    eax, eax
.text:0040F4F1                 mov     edi, eax
.text:0040F4F3                 jz      short loc_40F530
.text:0040F4F5                 mov     [esp+1Ch+Str], eax ; Str
.text:0040F4F8                 call    strlen
.text:0040F4FD                 cmp     eax, 2
.text:0040F500                 jbe     short loc_40F50C
.text:0040F502                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040F506                 jz      loc_40F5C0
.text:0040F50C
.text:0040F50C loc_40F50C:                             ; CODE XREF: sub_40F4D0+30↑j
.text:0040F50C                                         ; sub_40F4D0+F4↓j
.text:0040F50C                 test    edi, edi
.text:0040F50E                 jz      short loc_40F530
.text:0040F510                 mov     [esp+1Ch+Str], edi ; Str
.text:0040F513                 call    strlen
.text:0040F518                 cmp     eax, 4
.text:0040F51B                 mov     ebp, eax
.text:0040F51D                 jle     short loc_40F530
.text:0040F51F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040F522                 jz      short loc_40F550
.text:0040F524                 lea     esi, [esi+0]
.text:0040F52A                 lea     edi, [edi+0]
.text:0040F530
.text:0040F530 loc_40F530:                             ; CODE XREF: sub_40F4D0+23↑j
.text:0040F530                                         ; sub_40F4D0+3E↑j ...
.text:0040F530                 xor     esi, esi
.text:0040F532
.text:0040F532 loc_40F532:                             ; CODE XREF: sub_40F4D0+CD↓j
.text:0040F532                                         ; sub_40F4D0+115↓j
.text:0040F532                 mov     [esp+1Ch+Str], edi ; Block
.text:0040F535                 call    free
.text:0040F53A                 mov     eax, esi
.text:0040F53C                 mov     ebx, [esp+1Ch+var_10]
.text:0040F540                 mov     esi, [esp+1Ch+var_C]
.text:0040F544                 mov     edi, [esp+1Ch+var_8]
.text:0040F548                 mov     ebp, [esp+1Ch+var_4]
.text:0040F54C                 add     esp, 1Ch
.text:0040F54F                 retn
.text:0040F550 ; ---------------------------------------------------------------------------
.text:0040F550
.text:0040F550 loc_40F550:                             ; CODE XREF: sub_40F4D0+52↑j
.text:0040F550                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040F554                 jnz     short loc_40F530
.text:0040F556                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040F55E                 lea     ecx, [edi+2]
.text:0040F561                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040F564                 call    strchr
.text:0040F569                 test    eax, eax
.text:0040F56B                 jnz     short loc_40F59F
.text:0040F56D
.text:0040F56D loc_40F56D:                             ; CODE XREF: sub_40F4D0+E2↓j
.text:0040F56D                 inc     ebp
.text:0040F56E
.text:0040F56E loc_40F56E:                             ; CODE XREF: sub_40F4D0+E9↓j
.text:0040F56E                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040F576                 lea     ebx, [ebp+1]
.text:0040F579                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040F57C                 call    calloc
.text:0040F581                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040F584                 mov     esi, eax
.text:0040F586                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040F58A                 mov     [esp+1Ch+Val], edi ; Source
.text:0040F58E                 call    strncpy
.text:0040F593                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040F598                 mov     byte ptr [ebp+esi+0], 0
.text:0040F59D                 jmp     short loc_40F532
.text:0040F59F ; ---------------------------------------------------------------------------
.text:0040F59F
.text:0040F59F loc_40F59F:                             ; CODE XREF: sub_40F4D0+9B↑j
.text:0040F59F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040F5A7                 inc     eax
.text:0040F5A8                 mov     [esp+1Ch+Str], eax ; Str
.text:0040F5AB                 call    strchr
.text:0040F5B0                 test    eax, eax
.text:0040F5B2                 jz      short loc_40F56D
.text:0040F5B4                 sub     eax, edi
.text:0040F5B6                 lea     ebp, [eax+1]
.text:0040F5B9                 jmp     short loc_40F56E
.text:0040F5B9 ; ---------------------------------------------------------------------------
.text:0040F5BB                 align 10h
.text:0040F5C0
.text:0040F5C0 loc_40F5C0:                             ; CODE XREF: sub_40F4D0+36↑j
.text:0040F5C0                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040F5C4                 jnz     loc_40F50C
.text:0040F5CA                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040F5D1                 call    _strdup
.text:0040F5D6                 movsx   edx, byte ptr [edi]
.text:0040F5D9                 mov     esi, eax
.text:0040F5DB                 mov     [esp+1Ch+Str], edx ; C
.text:0040F5DE                 call    toupper
.text:0040F5E3                 mov     [esi], al
.text:0040F5E5                 jmp     loc_40F532
.text:0040F5E5 sub_40F4D0      endp
.text:0040F5E5
.text:0040F5E5 ; ---------------------------------------------------------------------------
.text:0040F5EA                 align 10h
.text:0040F5F0
.text:0040F5F0 ; =============== S U B R O U T I N E =======================================
.text:0040F5F0
.text:0040F5F0
.text:0040F5F0 sub_40F5F0      proc near               ; CODE XREF: .text:0040F744↓p
.text:0040F5F0                                         ; .text:0040F828↓p
.text:0040F5F0
.text:0040F5F0 Str             = dword ptr -2Ch
.text:0040F5F0 Val             = dword ptr -28h
.text:0040F5F0 var_18          = dword ptr -18h
.text:0040F5F0 var_11          = byte ptr -11h
.text:0040F5F0 arg_0           = dword ptr  4
.text:0040F5F0
.text:0040F5F0                 push    ebp
.text:0040F5F1                 push    edi
.text:0040F5F2                 push    esi
.text:0040F5F3                 push    ebx
.text:0040F5F4                 sub     esp, 1Ch
.text:0040F5F7                 mov     edx, [esp+2Ch+arg_0]
.text:0040F5FB                 cmp     edx, ds:dword_4186C0
.text:0040F601                 mov     [esp+2Ch+var_11], 0
.text:0040F606                 jz      loc_40F704
.text:0040F60C                 mov     ebx, ds:dword_4186B0
.text:0040F612                 test    ebx, ebx
.text:0040F614                 jz      short loc_40F682
.text:0040F616
.text:0040F616 loc_40F616:                             ; CODE XREF: sub_40F5F0+10F↓j
.text:0040F616                 mov     ebx, [esp+2Ch+arg_0]
.text:0040F61A                 xor     edi, edi
.text:0040F61C                 xor     esi, esi
.text:0040F61E                 mov     ebp, offset dword_4186D8
.text:0040F623                 lea     esi, [esi+0]
.text:0040F629                 lea     edi, [edi+0]
.text:0040F630
.text:0040F630 loc_40F630:                             ; CODE XREF: sub_40F5F0+60↓j
.text:0040F630                 mov     edx, [ebp+4]
.text:0040F633                 mov     ecx, edi
.text:0040F635                 mov     eax, [ebp+0]
.text:0040F638                 shl     ecx, 4
.text:0040F63B                 mov     [esp+2Ch+var_18], ecx
.text:0040F63F                 mov     ecx, edx
.text:0040F641                 xor     eax, ebx
.text:0040F643                 xor     ecx, esi
.text:0040F645                 or      ecx, eax
.text:0040F647                 jz      short loc_40F671
.text:0040F649                 inc     edi
.text:0040F64A                 add     ebp, 10h
.text:0040F64D                 cmp     edi, 20h ; ' '
.text:0040F650                 jle     short loc_40F630
.text:0040F652
.text:0040F652 loc_40F652:                             ; CODE XREF: sub_40F5F0+90↓j
.text:0040F652                 movzx   ebx, [esp+2Ch+var_11]
.text:0040F657                 mov     eax, [esp+2Ch+arg_0]
.text:0040F65B                 mov     byte_417100, bl
.text:0040F661                 mov     ds:dword_4186C0, eax
.text:0040F666                 movsx   eax, bl
.text:0040F669
.text:0040F669 loc_40F669:                             ; CODE XREF: sub_40F5F0+11B↓j
.text:0040F669                 add     esp, 1Ch
.text:0040F66C                 pop     ebx
.text:0040F66D                 pop     esi
.text:0040F66E                 pop     edi
.text:0040F66F                 pop     ebp
.text:0040F670                 retn
.text:0040F671 ; ---------------------------------------------------------------------------
.text:0040F671
.text:0040F671 loc_40F671:                             ; CODE XREF: sub_40F5F0+57↑j
.text:0040F671                 mov     edx, [esp+2Ch+var_18]
.text:0040F675                 movzx   eax, byte ptr ds:dword_4186D0[edx]
.text:0040F67C                 mov     [esp+2Ch+var_11], al
.text:0040F680                 jmp     short loc_40F652
.text:0040F682 ; ---------------------------------------------------------------------------
.text:0040F682
.text:0040F682 loc_40F682:                             ; CODE XREF: sub_40F5F0+24↑j
.text:0040F682                 mov     [esp+2Ch+Str], 0
.text:0040F689                 call    sub_412550
.text:0040F68E                 test    eax, eax
.text:0040F690                 mov     ebx, eax
.text:0040F692                 jz      short loc_40F6EC
.text:0040F694                 movzx   ecx, byte ptr [eax]
.text:0040F697                 mov     esi, 0FFFFFFF0h
.text:0040F69C                 test    cl, cl
.text:0040F69E                 jz      short loc_40F6EC
.text:0040F6A0
.text:0040F6A0 loc_40F6A0:                             ; CODE XREF: sub_40F5F0+FA↓j
.text:0040F6A0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040F6A3                 movsx   ebp, cl
.text:0040F6A6                 add     esi, 10h
.text:0040F6A9                 mov     ds:dword_4186D0[esi], ebp
.text:0040F6AF                 mov     edi, ebp
.text:0040F6B1                 sar     edi, 1Fh
.text:0040F6B4                 mov     ds:dword_4186D4[esi], edi
.text:0040F6BA                 call    sub_40DE20
.text:0040F6BF                 mov     ds:dword_4186D8[esi], eax
.text:0040F6C5                 xor     ecx, ecx
.text:0040F6C7                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040F6CA                 mov     ds:dword_4186DC[esi], ecx
.text:0040F6D0                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040F6D8                 call    strchr
.text:0040F6DD                 mov     ebx, eax
.text:0040F6DF                 inc     ebx
.text:0040F6E0                 jz      short loc_40F6EC
.text:0040F6E2                 movzx   edx, byte ptr [eax+1]
.text:0040F6E6                 test    dl, dl
.text:0040F6E8                 mov     cl, dl
.text:0040F6EA                 jnz     short loc_40F6A0
.text:0040F6EC
.text:0040F6EC loc_40F6EC:                             ; CODE XREF: sub_40F5F0+A2↑j
.text:0040F6EC                                         ; sub_40F5F0+AE↑j ...
.text:0040F6EC                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040F6EF                 mov     esi, 1
.text:0040F6F4                 mov     ds:dword_4186B0, esi
.text:0040F6FA                 call    free
.text:0040F6FF                 jmp     loc_40F616
.text:0040F704 ; ---------------------------------------------------------------------------
.text:0040F704
.text:0040F704 loc_40F704:                             ; CODE XREF: sub_40F5F0+16↑j
.text:0040F704                 movsx   eax, byte_417100
.text:0040F70B                 jmp     loc_40F669
.text:0040F70B sub_40F5F0      endp
.text:0040F70B
.text:0040F70B ; ---------------------------------------------------------------------------
.text:0040F710 dword_40F710    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040F710                                         ; DATA XREF: .text:0040F733↓o
.text:0040F710                                         ; .text:0040F813↓o
.text:0040F720 ; ---------------------------------------------------------------------------
.text:0040F720                 sub     esp, 1Ch
.text:0040F723                 mov     [esp+14h], esi
.text:0040F727                 mov     esi, [esp+20h]
.text:0040F72B                 mov     [esp+18h], edi
.text:0040F72F                 mov     [esp+10h], ebx
.text:0040F733                 mov     dword ptr [esp], offset dword_40F710
.text:0040F73A                 call    _strdup
.text:0040F73F                 mov     [esp], esi
.text:0040F742                 mov     edi, eax
.text:0040F744                 call    sub_40F5F0
.text:0040F749                 mov     [edi], al
.text:0040F74B                 test    al, al
.text:0040F74D                 jz      short loc_40F761
.text:0040F74F                 mov     eax, edi
.text:0040F751                 mov     ebx, [esp+10h]
.text:0040F755                 mov     esi, [esp+14h]
.text:0040F759                 mov     edi, [esp+18h]
.text:0040F75D                 add     esp, 1Ch
.text:0040F760                 retn
.text:0040F761 ; ---------------------------------------------------------------------------
.text:0040F761
.text:0040F761 loc_40F761:                             ; CODE XREF: .text:0040F74D↑j
.text:0040F761                 mov     [esp], edi
.text:0040F764                 call    free
.text:0040F769                 mov     dword ptr [esp+4], 0
.text:0040F771                 mov     dword ptr [esp], 0
.text:0040F778                 call    GetCurrentDirectoryA
.text:0040F77D                 sub     esp, 8
.text:0040F780                 lea     esi, [eax+1]
.text:0040F783                 mov     [esp], esi
.text:0040F786                 call    malloc
.text:0040F78B                 mov     [esp+4], eax
.text:0040F78F                 mov     edi, eax
.text:0040F791                 mov     [esp], esi
.text:0040F794                 call    GetCurrentDirectoryA
.text:0040F799                 sub     esp, 8
.text:0040F79C                 test    eax, eax
.text:0040F79E                 jnz     short loc_40F7C0
.text:0040F7A0                 mov     dword ptr [esp+20h], 40F714h
.text:0040F7A8                 mov     ebx, [esp+10h]
.text:0040F7AC                 mov     esi, [esp+14h]
.text:0040F7B0                 mov     edi, [esp+18h]
.text:0040F7B4                 add     esp, 1Ch
.text:0040F7B7                 jmp     _strdup
.text:0040F7B7 ; ---------------------------------------------------------------------------
.text:0040F7BC                 align 10h
.text:0040F7C0
.text:0040F7C0 loc_40F7C0:                             ; CODE XREF: .text:0040F79E↑j
.text:0040F7C0                 mov     [esp+20h], edi
.text:0040F7C4                 mov     ebx, [esp+10h]
.text:0040F7C8                 mov     esi, [esp+14h]
.text:0040F7CC                 mov     edi, [esp+18h]
.text:0040F7D0                 add     esp, 1Ch
.text:0040F7D3                 jmp     sub_40F4D0
.text:0040F7D3 ; ---------------------------------------------------------------------------
.text:0040F7D8                 align 10h
.text:0040F7E0                 sub     esp, 7Ch
.text:0040F7E3                 lea     edx, [esp+10h]
.text:0040F7E7                 mov     [esp+8], edx
.text:0040F7EB                 mov     edx, [esp+80h]
.text:0040F7F2                 mov     [esp+70h], ebx
.text:0040F7F6                 mov     [esp+74h], esi
.text:0040F7FA                 mov     [esp+4], edx
.text:0040F7FE                 mov     [esp+78h], edi
.text:0040F802                 mov     dword ptr [esp], 0
.text:0040F809                 call    sub_40D070
.text:0040F80E                 xor     edx, edx
.text:0040F810                 inc     eax
.text:0040F811                 jz      short loc_40F835
.text:0040F813                 mov     dword ptr [esp], offset dword_40F710
.text:0040F81A                 mov     esi, [esp+20h]
.text:0040F81E                 call    _strdup
.text:0040F823                 mov     edi, eax
.text:0040F825                 mov     [esp], esi
.text:0040F828                 call    sub_40F5F0
.text:0040F82D                 mov     [edi], al
.text:0040F82F                 test    al, al
.text:0040F831                 mov     edx, edi
.text:0040F833                 jz      short loc_40F847
.text:0040F835
.text:0040F835 loc_40F835:                             ; CODE XREF: .text:0040F811↑j
.text:0040F835                                         ; .text:0040F894↓j
.text:0040F835                 mov     ebx, [esp+70h]
.text:0040F839                 mov     eax, edx
.text:0040F83B                 mov     esi, [esp+74h]
.text:0040F83F                 mov     edi, [esp+78h]
.text:0040F843                 add     esp, 7Ch
.text:0040F846                 retn
.text:0040F847 ; ---------------------------------------------------------------------------
.text:0040F847
.text:0040F847 loc_40F847:                             ; CODE XREF: .text:0040F833↑j
.text:0040F847                 mov     [esp], edi
.text:0040F84A                 call    free
.text:0040F84F                 mov     dword ptr [esp+4], 0
.text:0040F857                 mov     dword ptr [esp], 0
.text:0040F85E                 call    GetCurrentDirectoryA
.text:0040F863                 sub     esp, 8
.text:0040F866                 lea     esi, [eax+1]
.text:0040F869                 mov     [esp], esi
.text:0040F86C                 call    malloc
.text:0040F871                 mov     [esp+4], eax
.text:0040F875                 mov     edi, eax
.text:0040F877                 mov     [esp], esi
.text:0040F87A                 call    GetCurrentDirectoryA
.text:0040F87F                 sub     esp, 8
.text:0040F882                 test    eax, eax
.text:0040F884                 jnz     short loc_40F896
.text:0040F886                 mov     dword ptr [esp], 40F714h
.text:0040F88D                 call    _strdup
.text:0040F892
.text:0040F892 loc_40F892:                             ; CODE XREF: .text:0040F89E↓j
.text:0040F892                 mov     edx, eax
.text:0040F894                 jmp     short loc_40F835
.text:0040F896 ; ---------------------------------------------------------------------------
.text:0040F896
.text:0040F896 loc_40F896:                             ; CODE XREF: .text:0040F884↑j
.text:0040F896                 mov     [esp], edi
.text:0040F899                 call    sub_40F4D0
.text:0040F89E                 jmp     short loc_40F892
.text:0040F8A0
.text:0040F8A0 ; =============== S U B R O U T I N E =======================================
.text:0040F8A0
.text:0040F8A0
.text:0040F8A0 ; int __cdecl sub_40F8A0(LPCSTR)
.text:0040F8A0 sub_40F8A0      proc near               ; CODE XREF: sub_40D2D0+12F↑p
.text:0040F8A0
.text:0040F8A0 String1         = dword ptr -1Ch
.text:0040F8A0 String2         = dword ptr -18h
.text:0040F8A0 var_C           = dword ptr -0Ch
.text:0040F8A0 var_8           = dword ptr -8
.text:0040F8A0 var_4           = dword ptr -4
.text:0040F8A0 arg_0           = dword ptr  4
.text:0040F8A0
.text:0040F8A0                 sub     esp, 1Ch
.text:0040F8A3                 mov     [esp+1Ch+var_4], edi
.text:0040F8A7                 mov     edi, [esp+1Ch+arg_0]
.text:0040F8AB                 mov     [esp+1Ch+var_C], ebx
.text:0040F8AF                 mov     [esp+1Ch+var_8], esi
.text:0040F8B3                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040F8B6                 call    sub_410CE0
.text:0040F8BB                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040F8BE                 mov     esi, eax
.text:0040F8C0                 call    sub_40F4D0
.text:0040F8C5                 mov     [esp+1Ch+String2], eax ; String2
.text:0040F8C9                 mov     ebx, eax
.text:0040F8CB                 mov     [esp+1Ch+String1], esi ; String1
.text:0040F8CE                 call    _stricmp
.text:0040F8D3                 test    eax, eax
.text:0040F8D5                 setz    dl
.text:0040F8D8                 test    esi, esi
.text:0040F8DA                 movzx   edi, dl
.text:0040F8DD                 jz      short loc_40F8E7
.text:0040F8DF                 mov     [esp+1Ch+String1], esi ; Block
.text:0040F8E2                 call    free
.text:0040F8E7
.text:0040F8E7 loc_40F8E7:                             ; CODE XREF: sub_40F8A0+3D↑j
.text:0040F8E7                 test    ebx, ebx
.text:0040F8E9                 jz      short loc_40F8F3
.text:0040F8EB                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040F8EE                 call    free
.text:0040F8F3
.text:0040F8F3 loc_40F8F3:                             ; CODE XREF: sub_40F8A0+49↑j
.text:0040F8F3                 mov     eax, edi
.text:0040F8F5                 mov     ebx, [esp+1Ch+var_C]
.text:0040F8F9                 mov     esi, [esp+1Ch+var_8]
.text:0040F8FD                 mov     edi, [esp+1Ch+var_4]
.text:0040F901                 add     esp, 1Ch
.text:0040F904                 retn
.text:0040F904 sub_40F8A0      endp
.text:0040F904
.text:0040F904 ; ---------------------------------------------------------------------------
.text:0040F905                 align 10h
.text:0040F910
.text:0040F910 ; =============== S U B R O U T I N E =======================================
.text:0040F910
.text:0040F910
.text:0040F910 ; int __cdecl sub_40F910(char *, int)
.text:0040F910 sub_40F910      proc near               ; CODE XREF: sub_405CD0+31B↑p
.text:0040F910                                         ; sub_407D00+BB↑p ...
.text:0040F910
.text:0040F910 var_C           = dword ptr -0Ch
.text:0040F910 var_8           = dword ptr -8
.text:0040F910 var_4           = dword ptr -4
.text:0040F910 arg_0           = dword ptr  4
.text:0040F910 arg_4           = dword ptr  8
.text:0040F910
.text:0040F910                 sub     esp, 0Ch
.text:0040F913                 mov     edx, [esp+0Ch+arg_4]
.text:0040F917                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040F91E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040F922                 mov     edx, [esp+0Ch+arg_0]
.text:0040F926                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040F92A                 call    sub_410270
.text:0040F92F                 add     esp, 0Ch
.text:0040F932                 retn
.text:0040F932 sub_40F910      endp
.text:0040F932
.text:0040F932 ; ---------------------------------------------------------------------------
.text:0040F933                 align 10h
.text:0040F940 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040F991↓o
.text:0040F949 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040F949                                         ; DATA XREF: .text:0040F9A2↓o
.text:0040F95D ; const CHAR FileName[]
.text:0040F95D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0040FAEC↓o
.text:0040F95D                                         ; sub_40FF20+17C↓o
.text:0040F968 ; ---------------------------------------------------------------------------
.text:0040F968
.text:0040F968 loc_40F968:                             ; DATA XREF: .text:0040FC02↓o
.text:0040F968                 dec     esi
.text:0040F969                 push    esp
.text:0040F96A                 inc     esi
.text:0040F96B                 push    ebx
.text:0040F96C                 add     [esi+41h], al
.text:0040F96F                 push    esp
.text:0040F970                 xor     esi, [edx]
.text:0040F972                 add     [esi+41h], al
.text:0040F975                 push    esp
.text:0040F976                 add     [ebx+44h], al
.text:0040F979                 inc     esi
.text:0040F97A                 push    ebx
.text:0040F97B
.text:0040F97B loc_40F97B:                             ; CODE XREF: sub_40FF20+101↓p
.text:0040F97B                 add     [ebp+55002674h], cl
.text:0040F981                 push    edi
.text:0040F982                 push    esi
.text:0040F983                 push    ebx
.text:0040F984                 sub     esp, 8BCh
.text:0040F98A                 mov     ebp, [esp+8D0h]
.text:0040F991                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040F998                 call    LoadLibraryA
.text:0040F99D                 sub     esp, 4
.text:0040F9A0                 mov     edi, eax
.text:0040F9A2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040F9AA                 mov     [esp], eax
.text:0040F9AD                 call    GetProcAddress
.text:0040F9B2                 sub     esp, 8
.text:0040F9B5                 mov     esi, eax
.text:0040F9B7                 test    ebp, ebp
.text:0040F9B9                 mov     dword ptr [esp+20h], 0
.text:0040F9C1                 jz      loc_40FF01
.text:0040F9C7                 mov     [esp], ebp
.text:0040F9CA                 call    sub_40F0A0
.text:0040F9CF                 mov     [esp], eax
.text:0040F9D2                 mov     ebp, eax
.text:0040F9D4                 call    strlen
.text:0040F9D9                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040F9DE                 mov     ebx, eax
.text:0040F9E0                 jz      short loc_40F9FC
.text:0040F9E2                 mov     [esp], ebp
.text:0040F9E5                 lea     edx, [eax+1]
.text:0040F9E8                 mov     [esp+4], edx
.text:0040F9EC                 call    realloc
.text:0040F9F1                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040F9F5                 mov     ebp, eax
.text:0040F9F7                 mov     byte ptr [ebx+eax+1], 0
.text:0040F9FC
.text:0040F9FC loc_40F9FC:                             ; CODE XREF: .text:0040F9E0↑j
.text:0040F9FC                 mov     dword ptr [esp+1Ch], 400h
.text:0040FA04                 lea     edx, [esp+0B0h]
.text:0040FA0B                 lea     ebx, [esp+5Ch]
.text:0040FA0F                 mov     [esp+18h], edx
.text:0040FA13                 lea     ecx, [esp+58h]
.text:0040FA17                 lea     edx, [esp+54h]
.text:0040FA1B                 mov     [esp+14h], ebx
.text:0040FA1F                 lea     eax, [esp+4B0h]
.text:0040FA26                 mov     [esp+10h], ecx
.text:0040FA2A                 mov     [esp+0Ch], edx
.text:0040FA2E                 mov     dword ptr [esp+8], 400h
.text:0040FA36                 mov     [esp+4], eax
.text:0040FA3A                 mov     [esp], ebp
.text:0040FA3D                 call    GetVolumeInformationA
.text:0040FA42                 sub     esp, 20h
.text:0040FA45                 test    eax, eax
.text:0040FA47                 jz      loc_40FEDE
.text:0040FA4D                 test    esi, esi
.text:0040FA4F                 jz      short loc_40FA75
.text:0040FA51                 mov     [esp], ebp
.text:0040FA54                 lea     edx, [esp+48h]
.text:0040FA58                 lea     ebx, [esp+40h]
.text:0040FA5C                 mov     [esp+0Ch], edx
.text:0040FA60                 lea     ecx, [esp+38h]
.text:0040FA64                 mov     [esp+8], ebx
.text:0040FA68                 mov     [esp+4], ecx
.text:0040FA6C                 call    esi
.text:0040FA6E                 sub     esp, 10h
.text:0040FA71                 mov     [esp+20h], eax
.text:0040FA75
.text:0040FA75 loc_40FA75:                             ; CODE XREF: .text:0040FA4F↑j
.text:0040FA75                 test    edi, edi
.text:0040FA77                 jz      short loc_40FA84
.text:0040FA79                 mov     [esp], edi
.text:0040FA7C                 call    FreeLibrary
.text:0040FA81                 sub     esp, 4
.text:0040FA84
.text:0040FA84 loc_40FA84:                             ; CODE XREF: .text:0040FA77↑j
.text:0040FA84                 call    sub_411770
.text:0040FA89                 test    eax, eax
.text:0040FA8B                 lea     esi, [esp+28h]
.text:0040FA8F                 jz      loc_40FEC0
.text:0040FA95                 call    sub_411770
.text:0040FA9A                 test    eax, eax
.text:0040FA9C                 jz      short loc_40FAAC
.text:0040FA9E                 call    sub_4116C0
.text:0040FAA3                 cmp     eax, 0Bh
.text:0040FAA6                 jle     loc_40FE94
.text:0040FAAC
.text:0040FAAC loc_40FAAC:                             ; CODE XREF: .text:0040FA9C↑j
.text:0040FAAC                 cld
.text:0040FAAD                 xor     eax, eax
.text:0040FAAF                 lea     ebx, [esp+60h]
.text:0040FAB3                 mov     ecx, 7
.text:0040FAB8                 mov     edi, ebx
.text:0040FABA                 rep stosd
.text:0040FABC                 mov     dword ptr [esp+18h], 0
.text:0040FAC4                 mov     dword ptr [esp+14h], 4000000h
.text:0040FACC                 mov     dword ptr [esp+10h], 0
.text:0040FAD4                 mov     dword ptr [esp+0Ch], 0
.text:0040FADC                 mov     dword ptr [esp+8], 0
.text:0040FAE4                 mov     dword ptr [esp+4], 0
.text:0040FAEC                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:0040FAF3                 call    CreateFileA
.text:0040FAF8                 sub     esp, 1Ch
.text:0040FAFB                 mov     edi, eax
.text:0040FAFD                 cmp     eax, 0FFFFFFFFh
.text:0040FB00                 jz      short loc_40FB80
.text:0040FB02                 mov     [esp+10h], ebx
.text:0040FB06                 lea     edx, [esp+80h]
.text:0040FB0D                 lea     ecx, [esp+24h]
.text:0040FB11                 mov     [esp+70h], edx
.text:0040FB15                 mov     [esp+18h], ecx
.text:0040FB19                 mov     [esp+8], ebx
.text:0040FB1D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040FB25                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040FB2D                 mov     [esp+64h], ebp
.text:0040FB31                 mov     dword ptr [esp+78h], 1
.text:0040FB39                 mov     dword ptr [esp+1Ch], 0
.text:0040FB41                 mov     dword ptr [esp+14h], 1Ch
.text:0040FB49                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040FB51                 mov     dword ptr [esp+4], 6
.text:0040FB59                 mov     [esp], eax
.text:0040FB5C                 call    DeviceIoControl
.text:0040FB61                 sub     esp, 20h
.text:0040FB64                 mov     ebx, eax
.text:0040FB66                 mov     [esp], edi
.text:0040FB69                 call    CloseHandle
.text:0040FB6E                 sub     esp, 4
.text:0040FB71                 test    ebx, ebx
.text:0040FB73                 jz      short loc_40FB80
.text:0040FB75                 test    byte ptr [esp+78h], 1
.text:0040FB7A                 jz      loc_40FE60
.text:0040FB80
.text:0040FB80 loc_40FB80:                             ; CODE XREF: .text:0040FB00↑j
.text:0040FB80                                         ; .text:0040FB73↑j
.text:0040FB80                 call    sub_410C90
.text:0040FB85                 mov     edi, eax
.text:0040FB87                 call    _errno
.text:0040FB8C                 mov     [eax], edi
.text:0040FB8E                 xor     eax, eax
.text:0040FB90
.text:0040FB90 loc_40FB90:                             ; CODE XREF: .text:0040FE8F↓j
.text:0040FB90                                         ; .text:0040FEBB↓j
.text:0040FB90                 test    eax, eax
.text:0040FB92                 jnz     short loc_40FBB4
.text:0040FB94                 mov     dword ptr [esp+34h], 1
.text:0040FB9C                 mov     dword ptr [esp+30h], 200h
.text:0040FBA4                 mov     dword ptr [esp+2Ch], 0
.text:0040FBAC                 mov     dword ptr [esp+28h], 0
.text:0040FBB4
.text:0040FBB4 loc_40FBB4:                             ; CODE XREF: .text:0040FB92↑j
.text:0040FBB4                 mov     edx, [esp+30h]
.text:0040FBB8                 mov     edi, [esp+34h]
.text:0040FBBC                 mov     ecx, [esp+20h]
.text:0040FBC0                 imul    edi, edx
.text:0040FBC3                 test    ecx, ecx
.text:0040FBC5                 jnz     short loc_40FBED
.text:0040FBC7                 mov     eax, [esp+28h]
.text:0040FBCB                 mul     edi
.text:0040FBCD                 mov     esi, eax
.text:0040FBCF                 mov     eax, [esp+2Ch]
.text:0040FBD3                 mov     [esp+44h], edx
.text:0040FBD7                 mov     [esp+40h], esi
.text:0040FBDB                 mul     edi
.text:0040FBDD                 mov     [esp+48h], eax
.text:0040FBE1                 mov     [esp+4Ch], edx
.text:0040FBE5                 mov     [esp+38h], eax
.text:0040FBE9                 mov     [esp+3Ch], edx
.text:0040FBED
.text:0040FBED loc_40FBED:                             ; CODE XREF: .text:0040FBC5↑j
.text:0040FBED                 mov     ebx, [esp+5Ch]
.text:0040FBF1                 lea     edx, [esp+0B0h]
.text:0040FBF8                 mov     ecx, [esp+8D4h]
.text:0040FBFF                 mov     [ecx+48h], ebx
.text:0040FC02                 mov     dword ptr [esp+4], offset loc_40F968
.text:0040FC0A                 mov     [esp], edx
.text:0040FC0D                 call    _stricmp
.text:0040FC12                 test    eax, eax
.text:0040FC14                 jnz     loc_40FDD0
.text:0040FC1A                 mov     esi, [esp+8D4h]
.text:0040FC21                 mov     dword ptr [esi], 5346544Eh
.text:0040FC27
.text:0040FC27 loc_40FC27:                             ; CODE XREF: .text:0040FDF8↓j
.text:0040FC27                                         ; .text:0040FE25↓j ...
.text:0040FC27                 mov     ebx, [esp+30h]
.text:0040FC2B                 mov     esi, [esp+8D4h]
.text:0040FC32                 mov     [esi+4], ebx
.text:0040FC35                 mov     [esi+8], ebx
.text:0040FC38                 mov     ebx, [esi+8]
.text:0040FC3B                 mov     [esi+0Ch], edi
.text:0040FC3E                 mov     ecx, [esp+44h]
.text:0040FC42                 xor     esi, esi
.text:0040FC44                 mov     [esp+8], ebx
.text:0040FC48                 mov     edx, [esp+40h]
.text:0040FC4C                 mov     [esp+0Ch], esi
.text:0040FC50                 mov     [esp+4], ecx
.text:0040FC54                 mov     [esp], edx
.text:0040FC57                 call    sub_414FC0
.text:0040FC5C                 mov     ecx, [esp+8D4h]
.text:0040FC63                 mov     [ecx+10h], eax
.text:0040FC66                 mov     [ecx+14h], edx
.text:0040FC69                 mov     ecx, [esp+4Ch]
.text:0040FC6D                 mov     [esp+8], ebx
.text:0040FC71                 mov     edx, [esp+48h]
.text:0040FC75                 mov     [esp+0Ch], esi
.text:0040FC79                 mov     [esp+4], ecx
.text:0040FC7D                 mov     [esp], edx
.text:0040FC80                 call    sub_414FC0
.text:0040FC85                 mov     ecx, [esp+8D4h]
.text:0040FC8C                 mov     [ecx+18h], eax
.text:0040FC8F                 mov     [ecx+1Ch], edx
.text:0040FC92                 mov     ecx, [esp+38h]
.text:0040FC96                 mov     [esp+8], ebx
.text:0040FC9A                 mov     ebx, [esp+3Ch]
.text:0040FC9E                 mov     [esp+0Ch], esi
.text:0040FCA2                 mov     [esp], ecx
.text:0040FCA5                 mov     [esp+4], ebx
.text:0040FCA9                 call    sub_414FC0
.text:0040FCAE                 mov     esi, [esp+8D4h]
.text:0040FCB5                 mov     [esi+20h], eax
.text:0040FCB8                 mov     [esi+24h], edx
.text:0040FCBB                 mov     ecx, [esp+44h]
.text:0040FCBF                 mov     esi, edi
.text:0040FCC1                 mov     [esp+8], esi
.text:0040FCC5                 mov     edx, [esp+40h]
.text:0040FCC9                 xor     edi, edi
.text:0040FCCB                 mov     [esp+0Ch], edi
.text:0040FCCF                 mov     [esp+4], ecx
.text:0040FCD3                 mov     [esp], edx
.text:0040FCD6                 call    sub_414FC0
.text:0040FCDB                 mov     ebx, [esp+8D4h]
.text:0040FCE2                 mov     [ebx+28h], eax
.text:0040FCE5                 mov     [ebx+2Ch], edx
.text:0040FCE8                 mov     ecx, [esp+4Ch]
.text:0040FCEC                 mov     [esp+8], esi
.text:0040FCF0                 mov     edx, [esp+48h]
.text:0040FCF4                 mov     [esp+0Ch], edi
.text:0040FCF8                 mov     [esp+4], ecx
.text:0040FCFC                 mov     [esp], edx
.text:0040FCFF                 call    sub_414FC0
.text:0040FD04                 mov     ebx, [esp+8D4h]
.text:0040FD0B                 mov     [ebx+30h], eax
.text:0040FD0E                 mov     [ebx+34h], edx
.text:0040FD11                 mov     ecx, [esp+3Ch]
.text:0040FD15                 mov     [esp+8], esi
.text:0040FD19                 mov     edx, [esp+38h]
.text:0040FD1D                 mov     [esp+0Ch], edi
.text:0040FD21                 mov     [esp+4], ecx
.text:0040FD25                 mov     [esp], edx
.text:0040FD28                 call    sub_414FC0
.text:0040FD2D                 mov     edx, [esp+8D4h]
.text:0040FD34                 lea     ecx, [esp+0B0h]
.text:0040FD3B                 mov     [edx+38h], eax
.text:0040FD3E                 mov     esi, [esp+58h]
.text:0040FD42                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040FD49                 mov     [edx+110h], esi
.text:0040FD4F                 mov     esi, edx
.text:0040FD51                 add     esi, 4Ch ; 'L'
.text:0040FD54                 movzx   ebx, word ptr [esp+56h]
.text:0040FD59                 movzx   edi, word ptr [esp+54h]
.text:0040FD5E                 mov     [edx+3Ch], ebx
.text:0040FD61                 lea     ebx, [esp+4B0h]
.text:0040FD68                 mov     [edx+40h], edi
.text:0040FD6B                 mov     [esp+4], ecx
.text:0040FD6F                 mov     dword ptr [esp+8], 10h
.text:0040FD77                 mov     [esp], esi
.text:0040FD7A                 call    strncpy
.text:0040FD7F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040FD87                 mov     edi, [esp+8D4h]
.text:0040FD8E                 mov     [esp+4], ebx
.text:0040FD92                 add     edi, 5Ch ; '\'
.text:0040FD95                 mov     [esp], edi
.text:0040FD98                 call    strncpy
.text:0040FD9D                 mov     [esp+4], ebp
.text:0040FDA1                 mov     ebp, [esp+8D4h]
.text:0040FDA8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040FDB0                 add     ebp, 0B6h ; '¶'
.text:0040FDB6                 mov     [esp], ebp
.text:0040FDB9                 call    strncpy
.text:0040FDBE                 xor     eax, eax
.text:0040FDC0
.text:0040FDC0 loc_40FDC0:                             ; CODE XREF: .text:0040FEFC↓j
.text:0040FDC0                 add     esp, 8BCh
.text:0040FDC6                 pop     ebx
.text:0040FDC7                 pop     esi
.text:0040FDC8                 pop     edi
.text:0040FDC9                 pop     ebp
.text:0040FDCA                 retn
.text:0040FDCA ; ---------------------------------------------------------------------------
.text:0040FDCB                 align 10h
.text:0040FDD0
.text:0040FDD0 loc_40FDD0:                             ; CODE XREF: .text:0040FC14↑j
.text:0040FDD0                 mov     dword ptr [esp+4], 40F96Dh
.text:0040FDD8                 lea     eax, [esp+0B0h]
.text:0040FDDF                 mov     [esp], eax
.text:0040FDE2                 call    _stricmp
.text:0040FDE7                 test    eax, eax
.text:0040FDE9                 jnz     short loc_40FDFD
.text:0040FDEB                 mov     edx, [esp+8D4h]
.text:0040FDF2                 mov     dword ptr [edx], 4008h
.text:0040FDF8                 jmp     loc_40FC27
.text:0040FDFD ; ---------------------------------------------------------------------------
.text:0040FDFD
.text:0040FDFD loc_40FDFD:                             ; CODE XREF: .text:0040FDE9↑j
.text:0040FDFD                 mov     dword ptr [esp+4], 40F973h
.text:0040FE05                 lea     ecx, [esp+0B0h]
.text:0040FE0C                 mov     [esp], ecx
.text:0040FE0F                 call    _stricmp
.text:0040FE14                 test    eax, eax
.text:0040FE16                 jnz     short loc_40FE2A
.text:0040FE18                 mov     ebx, [esp+8D4h]
.text:0040FE1F                 mov     dword ptr [ebx], 4006h
.text:0040FE25                 jmp     loc_40FC27
.text:0040FE2A ; ---------------------------------------------------------------------------
.text:0040FE2A
.text:0040FE2A loc_40FE2A:                             ; CODE XREF: .text:0040FE16↑j
.text:0040FE2A                 mov     dword ptr [esp+4], 40F977h
.text:0040FE32                 lea     eax, [esp+0B0h]
.text:0040FE39                 mov     [esp], eax
.text:0040FE3C                 call    _stricmp
.text:0040FE41                 test    eax, eax
.text:0040FE43                 mov     esi, [esp+8D4h]
.text:0040FE4A                 setnz   cl
.text:0040FE4D                 movzx   edx, cl
.text:0040FE50                 dec     edx
.text:0040FE51                 and     edx, 4000h
.text:0040FE57                 mov     [esi], edx
.text:0040FE59                 jmp     loc_40FC27
.text:0040FE59 ; ---------------------------------------------------------------------------
.text:0040FE5E                 align 10h
.text:0040FE60
.text:0040FE60 loc_40FE60:                             ; CODE XREF: .text:0040FB7A↑j
.text:0040FE60                 mov     edi, [esp+84h]
.text:0040FE67                 mov     eax, 1
.text:0040FE6C                 mov     edx, [esp+88h]
.text:0040FE73                 mov     ecx, [esp+8Ch]
.text:0040FE7A                 mov     ebx, [esp+90h]
.text:0040FE81                 mov     [esp+34h], edi
.text:0040FE85                 mov     [esp+30h], edx
.text:0040FE89                 mov     [esp+2Ch], ecx
.text:0040FE8D                 mov     [esi], ebx
.text:0040FE8F                 jmp     loc_40FB90
.text:0040FE94 ; ---------------------------------------------------------------------------
.text:0040FE94
.text:0040FE94 loc_40FE94:                             ; CODE XREF: .text:0040FAA6↑j
.text:0040FE94                 mov     [esp+10h], esi
.text:0040FE98                 lea     eax, [esp+2Ch]
.text:0040FE9C                 lea     esi, [esp+30h]
.text:0040FEA0                 mov     [esp+0Ch], eax
.text:0040FEA4                 lea     edi, [esp+34h]
.text:0040FEA8                 mov     [esp+8], esi
.text:0040FEAC                 mov     [esp+4], edi
.text:0040FEB0
.text:0040FEB0 loc_40FEB0:                             ; CODE XREF: .text:0040FEDC↓j
.text:0040FEB0                 mov     [esp], ebp
.text:0040FEB3                 call    GetDiskFreeSpaceA
.text:0040FEB8                 sub     esp, 14h
.text:0040FEBB                 jmp     loc_40FB90
.text:0040FEC0 ; ---------------------------------------------------------------------------
.text:0040FEC0
.text:0040FEC0 loc_40FEC0:                             ; CODE XREF: .text:0040FA8F↑j
.text:0040FEC0                 mov     [esp+10h], esi
.text:0040FEC4                 lea     ebx, [esp+2Ch]
.text:0040FEC8                 lea     eax, [esp+30h]
.text:0040FECC                 mov     [esp+0Ch], ebx
.text:0040FED0                 lea     esi, [esp+34h]
.text:0040FED4                 mov     [esp+8], eax
.text:0040FED8                 mov     [esp+4], esi
.text:0040FEDC                 jmp     short loc_40FEB0
.text:0040FEDE ; ---------------------------------------------------------------------------
.text:0040FEDE
.text:0040FEDE loc_40FEDE:                             ; CODE XREF: .text:0040FA47↑j
.text:0040FEDE                 mov     [esp], edi
.text:0040FEE1                 call    FreeLibrary
.text:0040FEE6                 sub     esp, 4
.text:0040FEE9                 call    sub_410C90
.text:0040FEEE                 mov     esi, eax
.text:0040FEF0                 call    _errno
.text:0040FEF5                 mov     [eax], esi
.text:0040FEF7
.text:0040FEF7 loc_40FEF7:                             ; CODE XREF: .text:0040FF17↓j
.text:0040FEF7                 mov     eax, 0FFFFFFFFh
.text:0040FEFC                 jmp     loc_40FDC0
.text:0040FF01 ; ---------------------------------------------------------------------------
.text:0040FF01
.text:0040FF01 loc_40FF01:                             ; CODE XREF: .text:0040F9C1↑j
.text:0040FF01                 mov     [esp], edi
.text:0040FF04                 call    FreeLibrary
.text:0040FF09                 sub     esp, 4
.text:0040FF0C                 call    _errno
.text:0040FF11                 mov     dword ptr [eax], 2
.text:0040FF17                 jmp     short loc_40FEF7
.text:0040FF17 ; ---------------------------------------------------------------------------
.text:0040FF19                 align 10h
.text:0040FF20
.text:0040FF20 ; =============== S U B R O U T I N E =======================================
.text:0040FF20
.text:0040FF20
.text:0040FF20 ; int __cdecl sub_40FF20(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040FF20 sub_40FF20      proc near               ; CODE XREF: sub_40D920+2C7↑p
.text:0040FF20                                         ; .text:0040DF5A↑p
.text:0040FF20
.text:0040FF20 lpFileName      = dword ptr -9Ch
.text:0040FF20 dwDesiredAccess = dword ptr -98h
.text:0040FF20 dwShareMode     = dword ptr -94h
.text:0040FF20 lpSecurityAttributes= dword ptr -90h
.text:0040FF20 dwCreationDisposition= dword ptr -8Ch
.text:0040FF20 dwFlagsAndAttributes= dword ptr -88h
.text:0040FF20 hTemplateFile   = dword ptr -84h
.text:0040FF20 lpOverlapped    = dword ptr -80h
.text:0040FF20 BytesReturned   = dword ptr -70h
.text:0040FF20 InBuffer        = byte ptr -6Ch
.text:0040FF20 var_68          = dword ptr -68h
.text:0040FF20 var_64          = dword ptr -64h
.text:0040FF20 var_60          = dword ptr -60h
.text:0040FF20 var_5C          = dword ptr -5Ch
.text:0040FF20 var_54          = dword ptr -54h
.text:0040FF20 var_4C          = byte ptr -4Ch
.text:0040FF20 var_48          = dword ptr -48h
.text:0040FF20 var_44          = dword ptr -44h
.text:0040FF20 var_40          = dword ptr -40h
.text:0040FF20 var_3C          = dword ptr -3Ch
.text:0040FF20 lpRootPathName  = dword ptr -2Ch
.text:0040FF20 lpSectorsPerCluster= dword ptr -28h
.text:0040FF20 lpBytesPerSector= dword ptr -24h
.text:0040FF20 lpNumberOfFreeClusters= dword ptr -20h
.text:0040FF20 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040FF20 var_18          = dword ptr -18h
.text:0040FF20 var_14          = dword ptr -14h
.text:0040FF20 var_10          = dword ptr -10h
.text:0040FF20 var_C           = dword ptr -0Ch
.text:0040FF20 var_8           = dword ptr -8
.text:0040FF20 var_4           = dword ptr -4
.text:0040FF20 arg_0           = dword ptr  4
.text:0040FF20 arg_4           = dword ptr  8
.text:0040FF20 arg_8           = dword ptr  0Ch
.text:0040FF20 arg_C           = dword ptr  10h
.text:0040FF20 arg_10          = dword ptr  14h
.text:0040FF20
.text:0040FF20                 sub     esp, 2Ch
.text:0040FF23                 mov     edx, [esp+2Ch+arg_0]
.text:0040FF27                 mov     [esp+2Ch+var_10], ebx
.text:0040FF2B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040FF2F                 mov     [esp+2Ch+var_C], esi
.text:0040FF33                 mov     esi, [esp+2Ch+arg_C]
.text:0040FF37                 mov     [esp+2Ch+var_8], edi
.text:0040FF3B                 mov     edi, [esp+2Ch+arg_8]
.text:0040FF3F                 mov     [esp+2Ch+var_4], ebp
.text:0040FF43                 mov     ebp, [esp+2Ch+arg_4]
.text:0040FF47                 mov     [esp+2Ch+var_14], edx
.text:0040FF4B                 call    sub_411770
.text:0040FF50                 test    eax, eax
.text:0040FF52                 jz      short loc_40FF84
.text:0040FF54                 mov     [esp+2Ch+arg_10], ebx
.text:0040FF58                 mov     edx, [esp+2Ch+var_14]
.text:0040FF5C                 mov     ebx, [esp+2Ch+var_10]
.text:0040FF60                 mov     [esp+2Ch+arg_C], esi
.text:0040FF64                 mov     esi, [esp+2Ch+var_C]
.text:0040FF68                 mov     [esp+2Ch+arg_8], edi
.text:0040FF6C                 mov     edi, [esp+2Ch+var_8]
.text:0040FF70                 mov     [esp+2Ch+arg_4], ebp
.text:0040FF74                 mov     ebp, [esp+2Ch+var_4]
.text:0040FF78                 mov     [esp+2Ch+arg_0], edx
.text:0040FF7C                 add     esp, 2Ch
.text:0040FF7F                 jmp     loc_410030
.text:0040FF84 ; ---------------------------------------------------------------------------
.text:0040FF84
.text:0040FF84 loc_40FF84:                             ; CODE XREF: sub_40FF20+32↑j
.text:0040FF84                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040FF88                 mov     ecx, [esp+2Ch+var_14]
.text:0040FF8C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040FF90                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040FF94                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040FF98                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040FF9B                 call    GetDiskFreeSpaceA
.text:0040FFA0                 sub     esp, 14h
.text:0040FFA3                 mov     ebx, [esp+2Ch+var_10]
.text:0040FFA7                 mov     esi, [esp+2Ch+var_C]
.text:0040FFAB                 mov     edi, [esp+2Ch+var_8]
.text:0040FFAF                 mov     ebp, [esp+2Ch+var_4]
.text:0040FFB3                 add     esp, 2Ch
.text:0040FFB6                 retn
.text:0040FFB6 ; ---------------------------------------------------------------------------
.text:0040FFB7                 align 10h
.text:0040FFC0
.text:0040FFC0 loc_40FFC0:                             ; CODE XREF: .text:00411A8D↓p
.text:0040FFC0                 sub     esp, 1Ch
.text:0040FFC3                 mov     [esp+1Ch+var_4], esi
.text:0040FFC7                 mov     esi, [esp+1Ch+arg_0]
.text:0040FFCB                 mov     [esp+1Ch+var_8], ebx
.text:0040FFCF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040FFD2                 call    sub_40F4D0
.text:0040FFD7                 test    eax, eax
.text:0040FFD9                 mov     ebx, eax
.text:0040FFDB                 jz      short loc_40FFF0
.text:0040FFDD                 cmp     byte ptr [eax], 0
.text:0040FFE0                 jz      short loc_40FFF0
.text:0040FFE2                 test    esi, esi
.text:0040FFE4                 jz      short loc_40FFF0
.text:0040FFE6                 cmp     byte ptr [esi], 0
.text:0040FFE9                 jnz     short loc_410016
.text:0040FFEB                 nop
.text:0040FFEC                 lea     esi, [esi+0]
.text:0040FFF0
.text:0040FFF0 loc_40FFF0:                             ; CODE XREF: sub_40FF20+BB↑j
.text:0040FFF0                                         ; sub_40FF20+C0↑j ...
.text:0040FFF0                 call    _errno
.text:0040FFF5                 mov     dword ptr [eax], 2
.text:0040FFFB                 mov     esi, 0FFFFFFFFh
.text:00410000
.text:00410000 loc_410000:                             ; CODE XREF: sub_40FF20+108↓j
.text:00410000                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00410003                 call    free
.text:00410008                 mov     eax, esi
.text:0041000A                 mov     ebx, [esp+1Ch+var_8]
.text:0041000E                 mov     esi, [esp+1Ch+var_4]
.text:00410012                 add     esp, 1Ch
.text:00410015                 retn
.text:00410016 ; ---------------------------------------------------------------------------
.text:00410016
.text:00410016 loc_410016:                             ; CODE XREF: sub_40FF20+C9↑j
.text:00410016                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00410019                 mov     edx, [esp+1Ch+arg_4]
.text:0041001D                 mov     [esp+1Ch+var_18], edx
.text:00410021                 call    near ptr loc_40F97B+5
.text:00410026                 mov     esi, eax
.text:00410028                 jmp     short loc_410000
.text:00410028 ; ---------------------------------------------------------------------------
.text:0041002A                 align 10h
.text:00410030
.text:00410030 loc_410030:                             ; CODE XREF: sub_40FF20+5F↑j
.text:00410030                 push    ebp
.text:00410031                 push    edi
.text:00410032                 push    esi
.text:00410033                 push    ebx
.text:00410034                 sub     esp, 8Ch
.text:0041003A                 mov     ebp, [esp+9Ch+arg_0]
.text:00410041                 call    sub_411770
.text:00410046                 test    eax, eax
.text:00410048                 jz      short loc_410058
.text:0041004A                 call    sub_4116C0
.text:0041004F                 cmp     eax, 0Bh
.text:00410052                 jle     loc_410180
.text:00410058
.text:00410058 loc_410058:                             ; CODE XREF: sub_40FF20+128↑j
.text:00410058                 cld
.text:00410059                 xor     eax, eax
.text:0041005B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0041005F                 mov     ecx, 7
.text:00410064                 mov     edi, ebx
.text:00410066                 lea     esi, [esp+9Ch+var_4C]
.text:0041006A                 rep stosd
.text:0041006C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00410074                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0041007C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00410084                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041008C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00410094                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0041009C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:004100A3                 call    CreateFileA
.text:004100A8                 sub     esp, 1Ch
.text:004100AB                 mov     edi, eax
.text:004100AD                 cmp     eax, 0FFFFFFFFh
.text:004100B0                 jz      short loc_410125
.text:004100B2                 mov     [esp+9Ch+var_68], ebp
.text:004100B6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:004100BA                 mov     [esp+9Ch+var_5C], esi
.text:004100BE                 mov     [esp+9Ch+var_60], 7303h
.text:004100C6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:004100CE                 mov     [esp+9Ch+var_54], 1
.text:004100D6                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:004100DE                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:004100E2                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:004100EA                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:004100EE                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:004100F6                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:004100FA                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00410102                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00410105                 call    DeviceIoControl
.text:0041010A                 sub     esp, 20h
.text:0041010D                 mov     esi, eax
.text:0041010F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00410112                 call    CloseHandle
.text:00410117                 sub     esp, 4
.text:0041011A                 test    esi, esi
.text:0041011C                 jz      short loc_410125
.text:0041011E                 test    byte ptr [esp+9Ch+var_54], 1
.text:00410123                 jz      short loc_410140
.text:00410125
.text:00410125 loc_410125:                             ; CODE XREF: sub_40FF20+190↑j
.text:00410125                                         ; sub_40FF20+1FC↑j
.text:00410125                 call    sub_410C90
.text:0041012A                 mov     edi, eax
.text:0041012C                 call    _errno
.text:00410131                 mov     [eax], edi
.text:00410133                 xor     eax, eax
.text:00410135
.text:00410135 loc_410135:                             ; CODE XREF: sub_40FF20+25A↓j
.text:00410135                                         ; sub_40FF20+297↓j
.text:00410135                 add     esp, 8Ch
.text:0041013B                 pop     ebx
.text:0041013C                 pop     esi
.text:0041013D                 pop     edi
.text:0041013E                 pop     ebp
.text:0041013F                 retn
.text:00410140 ; ---------------------------------------------------------------------------
.text:00410140
.text:00410140 loc_410140:                             ; CODE XREF: sub_40FF20+203↑j
.text:00410140                 mov     edx, [esp+9Ch+var_48]
.text:00410144                 mov     eax, 1
.text:00410149                 mov     ebx, [esp+9Ch+arg_4]
.text:00410150                 mov     ebp, [esp+9Ch+arg_8]
.text:00410157                 mov     ecx, [esp+9Ch+arg_C]
.text:0041015E                 mov     [ebx], edx
.text:00410160                 mov     edi, [esp+9Ch+var_44]
.text:00410164                 mov     ebx, [esp+9Ch+arg_10]
.text:0041016B                 mov     [ebp+0], edi
.text:0041016E                 mov     esi, [esp+9Ch+var_40]
.text:00410172                 mov     [ecx], esi
.text:00410174                 mov     edx, [esp+9Ch+var_3C]
.text:00410178                 mov     [ebx], edx
.text:0041017A                 jmp     short loc_410135
.text:0041017A ; ---------------------------------------------------------------------------
.text:0041017C                 align 10h
.text:00410180
.text:00410180 loc_410180:                             ; CODE XREF: sub_40FF20+132↑j
.text:00410180                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00410183                 mov     eax, [esp+9Ch+arg_C]
.text:0041018A                 mov     ecx, [esp+9Ch+arg_10]
.text:00410191                 mov     edx, [esp+9Ch+arg_8]
.text:00410198                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0041019C                 mov     eax, [esp+9Ch+arg_4]
.text:004101A3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:004101A7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:004101AB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:004101AF                 call    GetDiskFreeSpaceA
.text:004101B4                 sub     esp, 14h
.text:004101B7                 jmp     loc_410135
.text:004101B7 sub_40FF20      endp ; sp-analysis failed
.text:004101B7
.text:004101B7 ; ---------------------------------------------------------------------------
.text:004101BC                 align 10h
.text:004101C0
.text:004101C0 ; =============== S U B R O U T I N E =======================================
.text:004101C0
.text:004101C0
.text:004101C0 ; int __cdecl sub_4101C0(LPCSTR)
.text:004101C0 sub_4101C0      proc near               ; CODE XREF: sub_403C20+16↑p
.text:004101C0                                         ; Function+36↑p ...
.text:004101C0
.text:004101C0 lpFileName      = dword ptr -1Ch
.text:004101C0 AccessMode      = dword ptr -18h
.text:004101C0 var_8           = dword ptr -8
.text:004101C0 var_4           = dword ptr -4
.text:004101C0 arg_0           = dword ptr  4
.text:004101C0
.text:004101C0                 sub     esp, 1Ch
.text:004101C3                 mov     [esp+1Ch+var_8], ebx
.text:004101C7                 mov     ebx, [esp+1Ch+arg_0]
.text:004101CB                 mov     [esp+1Ch+var_4], esi
.text:004101CF                 test    ebx, ebx
.text:004101D1                 jz      loc_410262
.text:004101D7                 call    _errno
.text:004101DC                 mov     esi, [eax]
.text:004101DE                 mov     [esp+1Ch+AccessMode], 2 ; int
.text:004101E6                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:004101E9                 call    sub_410E30
.text:004101EE                 test    eax, eax
.text:004101F0                 jnz     short loc_410250
.text:004101F2
.text:004101F2 loc_4101F2:                             ; CODE XREF: sub_4101C0+A0↓j
.text:004101F2                 mov     [esp+1Ch+AccessMode], 10h ; int
.text:004101FA                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:004101FD                 call    sub_410E30
.text:00410202                 test    eax, eax
.text:00410204                 jz      short loc_410241
.text:00410206                 call    _errno
.text:0041020B                 mov     [eax], esi
.text:0041020D                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:00410210                 call    DeleteFileA
.text:00410215                 sub     esp, 4
.text:00410218                 xor     edx, edx
.text:0041021A                 test    eax, eax
.text:0041021C                 jz      short loc_41022C
.text:0041021E
.text:0041021E loc_41021E:                             ; CODE XREF: sub_4101C0+7F↓j
.text:0041021E                 mov     ebx, [esp+1Ch+var_8]
.text:00410222                 mov     eax, edx
.text:00410224                 mov     esi, [esp+1Ch+var_4]
.text:00410228                 add     esp, 1Ch
.text:0041022B                 retn
.text:0041022C ; ---------------------------------------------------------------------------
.text:0041022C
.text:0041022C loc_41022C:                             ; CODE XREF: sub_4101C0+5C↑j
.text:0041022C                 call    sub_410C90
.text:00410231                 mov     esi, eax
.text:00410233                 call    _errno
.text:00410238                 mov     [eax], esi
.text:0041023A
.text:0041023A loc_41023A:                             ; CODE XREF: sub_4101C0+8C↓j
.text:0041023A                                         ; sub_4101C0+AD↓j
.text:0041023A                 mov     edx, 0FFFFFFFFh
.text:0041023F                 jmp     short loc_41021E
.text:00410241 ; ---------------------------------------------------------------------------
.text:00410241
.text:00410241 loc_410241:                             ; CODE XREF: sub_4101C0+44↑j
.text:00410241                 call    _errno
.text:00410246                 mov     dword ptr [eax], 15h
.text:0041024C                 jmp     short loc_41023A
.text:0041024C ; ---------------------------------------------------------------------------
.text:0041024E                 align 10h
.text:00410250
.text:00410250 loc_410250:                             ; CODE XREF: sub_4101C0+30↑j
.text:00410250                 mov     [esp+1Ch+AccessMode], 180h ; AccessMode
.text:00410258                 mov     [esp+1Ch+lpFileName], ebx ; FileName
.text:0041025B                 call    _chmod_0
.text:00410260                 jmp     short loc_4101F2
.text:00410262 ; ---------------------------------------------------------------------------
.text:00410262
.text:00410262 loc_410262:                             ; CODE XREF: sub_4101C0+11↑j
.text:00410262                 call    _errno
.text:00410267                 mov     dword ptr [eax], 16h
.text:0041026D                 jmp     short loc_41023A
.text:0041026D sub_4101C0      endp
.text:0041026D
.text:0041026D ; ---------------------------------------------------------------------------
.text:0041026F                 align 10h
.text:00410270
.text:00410270 ; =============== S U B R O U T I N E =======================================
.text:00410270
.text:00410270
.text:00410270 ; int __cdecl sub_410270(LPCSTR, char *, int)
.text:00410270 sub_410270      proc near               ; CODE XREF: sub_40F910+1A↑p
.text:00410270                                         ; sub_412A10+104↓p ...
.text:00410270
.text:00410270 var_13C         = dword ptr -13Ch
.text:00410270 lpString1       = dword ptr -138h
.text:00410270 var_134         = dword ptr -134h
.text:00410270 String1         = byte ptr -12Ch
.text:00410270 var_10          = dword ptr -10h
.text:00410270 var_C           = dword ptr -0Ch
.text:00410270 var_8           = dword ptr -8
.text:00410270 var_4           = dword ptr -4
.text:00410270 arg_0           = dword ptr  4
.text:00410270 arg_4           = dword ptr  8
.text:00410270 arg_8           = dword ptr  0Ch
.text:00410270
.text:00410270                 sub     esp, 13Ch
.text:00410276                 mov     [esp+13Ch+var_10], ebx
.text:0041027D                 mov     ebx, [esp+13Ch+arg_8]
.text:00410284                 mov     [esp+13Ch+var_C], esi
.text:0041028B                 mov     esi, [esp+13Ch+arg_4]
.text:00410292                 mov     [esp+13Ch+var_8], edi
.text:00410299                 mov     edi, [esp+13Ch+arg_0]
.text:004102A0                 mov     [esp+13Ch+var_4], ebp
.text:004102A7                 mov     [esp+13Ch+var_134], ebx ; int
.text:004102AB                 mov     [esp+13Ch+lpString1], esi ; int
.text:004102AF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004102B2                 call    sub_412990
.text:004102B7                 cmp     eax, 0FFFFFFFFh
.text:004102BA                 mov     edx, eax
.text:004102BC                 jz      short loc_4102CE
.text:004102BE                 mov     ecx, [ebx]
.text:004102C0                 and     ecx, 0F000h
.text:004102C6                 cmp     ecx, 0A000h
.text:004102CC                 jz      short loc_4102F3
.text:004102CE
.text:004102CE loc_4102CE:                             ; CODE XREF: sub_410270+4C↑j
.text:004102CE                                         ; sub_410270+A1↓j ...
.text:004102CE                 mov     ebx, [esp+13Ch+var_10]
.text:004102D5                 mov     eax, edx
.text:004102D7                 mov     esi, [esp+13Ch+var_C]
.text:004102DE                 mov     edi, [esp+13Ch+var_8]
.text:004102E5                 mov     ebp, [esp+13Ch+var_4]
.text:004102EC                 add     esp, 13Ch
.text:004102F2                 retn
.text:004102F3 ; ---------------------------------------------------------------------------
.text:004102F3
.text:004102F3 loc_4102F3:                             ; CODE XREF: sub_410270+5C↑j
.text:004102F3                 mov     [esp+13Ch+var_134], 104h
.text:004102FB                 lea     ebp, [esp+13Ch+String1]
.text:004102FF                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00410303                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00410306                 call    sub_4128B0
.text:0041030B                 inc     eax
.text:0041030C                 mov     edx, 0FFFFFFFFh
.text:00410311                 jz      short loc_4102CE
.text:00410313                 mov     [esp+13Ch+var_134], ebx ; int
.text:00410317                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0041031B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0041031E                 call    sub_412990
.text:00410323                 mov     edx, eax
.text:00410325                 jmp     short loc_4102CE
.text:00410325 sub_410270      endp
.text:00410325
.text:00410325 ; ---------------------------------------------------------------------------
.text:00410327                 align 10h
.text:00410330
.text:00410330 ; =============== S U B R O U T I N E =======================================
.text:00410330
.text:00410330
.text:00410330 ; int __cdecl sub_410330(char *)
.text:00410330 sub_410330      proc near               ; CODE XREF: sub_404600+E2↑p
.text:00410330                                         ; sub_404600+2FA↑p ...
.text:00410330
.text:00410330 FileName        = dword ptr -0Ch
.text:00410330 var_8           = dword ptr -8
.text:00410330 arg_0           = dword ptr  4
.text:00410330
.text:00410330                 sub     esp, 0Ch
.text:00410333                 mov     edx, [esp+0Ch+arg_0]
.text:00410337                 mov     [esp+0Ch+var_8], 1 ; int
.text:0041033F                 mov     [esp+0Ch+FileName], edx ; FileName
.text:00410342                 call    sub_412D90
.text:00410347                 add     esp, 0Ch
.text:0041034A                 retn
.text:0041034A sub_410330      endp
.text:0041034A
.text:0041034A ; ---------------------------------------------------------------------------
.text:0041034B                 align 10h
.text:00410350
.text:00410350 ; =============== S U B R O U T I N E =======================================
.text:00410350
.text:00410350
.text:00410350 sub_410350      proc near               ; CODE XREF: sub_405CD0+1E4↑p
.text:00410350                                         ; sub_405CD0+21D↑p
.text:00410350                 sub     esp, 0Ch
.text:00410353                 call    _errno
.text:00410358                 mov     dword ptr [eax], 28h ; '('
.text:0041035E                 xor     eax, eax
.text:00410360                 add     esp, 0Ch
.text:00410363                 retn
.text:00410363 sub_410350      endp
.text:00410363
.text:00410363 ; ---------------------------------------------------------------------------
.text:00410364                 align 10h
.text:00410370
.text:00410370 ; =============== S U B R O U T I N E =======================================
.text:00410370
.text:00410370 ; Attributes: info_from_lumina
.text:00410370
.text:00410370 _sysconf        proc near               ; CODE XREF: sub_40A6D0+D↑p
.text:00410370                                         ; sub_40A6D0+24↑p ...
.text:00410370
.text:00410370 arg_0           = dword ptr  4
.text:00410370
.text:00410370                 sub     esp, 0Ch
.text:00410373                 mov     eax, [esp+0Ch+arg_0]
.text:00410377                 cmp     eax, 83h        ; switch 132 cases
.text:0041037C                 ja      def_410382      ; jumptable 67026652 default case, cases 50,56
.text:0041037C                                         ; jumptable 00410382 default case, cases 50,56
.text:00410382                 jmp     ds:jpt_410382[eax*4] ; switch jump
.text:00410382 ; ---------------------------------------------------------------------------
.text:00410389                 align 4
.text:0041038C jpt_410382      dd offset loc_4105C4, offset loc_4105C4, offset loc_4105C4
.text:0041038C                                         ; DATA XREF: _sysconf+12↑r
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C ; jump table for switch statement
.text:0041038C                 dd offset loc_4105CB, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_410678, offset loc_4105B0
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_4105E7, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset def_410382
.text:0041038C                 dd offset loc_41068C, offset loc_4105EE, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset def_410382
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_4105F5, offset loc_4105F5, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_4105FC
.text:0041038C                 dd offset loc_410604, offset loc_41060C, offset loc_410614
.text:0041038C                 dd offset loc_41062A, offset loc_41061C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_410623
.text:0041038C                 dd offset loc_410650, offset loc_41065A, offset loc_41062A
.text:0041038C                 dd offset loc_410631, offset loc_410638, offset loc_410638
.text:0041038C                 dd offset loc_41063F, offset loc_410649, offset loc_410664
.text:0041038C                 dd offset loc_410650, offset loc_41065A, offset loc_410664
.text:0041038C                 dd offset loc_41066E, offset loc_410678, offset loc_4105B0
.text:0041038C                 dd offset loc_4105B0, offset loc_410682, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041038C                 dd offset loc_41068C, offset loc_41068C, offset loc_41068C
.text:0041059C ; ---------------------------------------------------------------------------
.text:0041059C
.text:0041059C def_410382:                             ; CODE XREF: _sysconf+C↑j
.text:0041059C                                         ; _sysconf+12↑j
.text:0041059C                                         ; DATA XREF: ...
.text:0041059C                 call    _errno          ; jumptable 67026652 default case, cases 50,56
.text:0041059C                                         ; jumptable 00410382 default case, cases 50,56
.text:004105A1                 mov     dword ptr [eax], 16h
.text:004105A7                 mov     esi, esi
.text:004105A9                 lea     edi, [edi+0]
.text:004105B0
.text:004105B0 loc_4105B0:                             ; CODE XREF: _sysconf+12↑j
.text:004105B0                                         ; _sysconf+327↓j
.text:004105B0                                         ; DATA XREF: ...
.text:004105B0                 mov     eax, 0FFFFFFFFh ; jumptable 67026652 cases 41,116,117
.text:004105B0                                         ; jumptable 00410382 cases 41,116,117
.text:004105B5                 lea     esi, [esi+0]
.text:004105B9                 lea     edi, [edi+0]
.text:004105C0
.text:004105C0 loc_4105C0:                             ; CODE XREF: _sysconf+259↓j
.text:004105C0                                         ; _sysconf+26C↓j ...
.text:004105C0                 add     esp, 0Ch
.text:004105C3                 retn
.text:004105C4 ; ---------------------------------------------------------------------------
.text:004105C4
.text:004105C4 loc_4105C4:                             ; CODE XREF: _sysconf+12↑j
.text:004105C4                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:004105C4                 mov     eax, 989680h    ; jumptable 67026652 cases 0-2
.text:004105C4                                         ; jumptable 00410382 cases 0-2
.text:004105C9                 jmp     short loc_4105C0
.text:004105CB ; ---------------------------------------------------------------------------
.text:004105CB
.text:004105CB loc_4105CB:                             ; CODE XREF: _sysconf+12↑j
.text:004105CB                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:004105CB                 call    sub_413320      ; jumptable 67026652 case 6
.text:004105CB                                         ; jumptable 00410382 case 6
.text:004105D0                 cmp     eax, 6
.text:004105D3                 mov     edx, 6
.text:004105D8                 jg      short loc_4105DE
.text:004105DA
.text:004105DA loc_4105DA:                             ; CODE XREF: _sysconf+275↓j
.text:004105DA                 mov     eax, edx
.text:004105DC                 jmp     short loc_4105C0
.text:004105DE ; ---------------------------------------------------------------------------
.text:004105DE
.text:004105DE loc_4105DE:                             ; CODE XREF: _sysconf+268↑j
.text:004105DE                 call    sub_413320
.text:004105E3                 mov     edx, eax
.text:004105E5                 jmp     short loc_4105DA
.text:004105E7 ; ---------------------------------------------------------------------------
.text:004105E7
.text:004105E7 loc_4105E7:                             ; CODE XREF: _sysconf+12↑j
.text:004105E7                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:004105E7                 mov     eax, 800h       ; jumptable 67026652 case 45
.text:004105E7                                         ; jumptable 00410382 case 45
.text:004105EC                 jmp     short loc_4105C0
.text:004105EE ; ---------------------------------------------------------------------------
.text:004105EE
.text:004105EE loc_4105EE:                             ; CODE XREF: _sysconf+12↑j
.text:004105EE                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:004105EE                 mov     eax, 1          ; jumptable 67026652 case 52
.text:004105EE                                         ; jumptable 00410382 case 52
.text:004105F3                 jmp     short loc_4105C0
.text:004105F5 ; ---------------------------------------------------------------------------
.text:004105F5
.text:004105F5 loc_4105F5:                             ; CODE XREF: _sysconf+12↑j
.text:004105F5                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:004105F5                 mov     eax, 400h       ; jumptable 67026652 cases 69,70
.text:004105F5                                         ; jumptable 00410382 cases 69,70
.text:004105FA                 jmp     short loc_4105C0
.text:004105FC ; ---------------------------------------------------------------------------
.text:004105FC
.text:004105FC loc_4105FC:                             ; CODE XREF: _sysconf+12↑j
.text:004105FC                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:004105FC                 add     esp, 0Ch        ; jumptable 67026652 case 83
.text:004105FC                                         ; jumptable 00410382 case 83
.text:004105FF                 jmp     sub_413210
.text:00410604 ; ---------------------------------------------------------------------------
.text:00410604
.text:00410604 loc_410604:                             ; CODE XREF: _sysconf+12↑j
.text:00410604                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:00410604                 add     esp, 0Ch        ; jumptable 67026652 case 84
.text:00410604                                         ; jumptable 00410382 case 84
.text:00410607                 jmp     sub_4131C0
.text:0041060C ; ---------------------------------------------------------------------------
.text:0041060C
.text:0041060C loc_41060C:                             ; CODE XREF: _sysconf+12↑j
.text:0041060C                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:0041060C                 add     esp, 0Ch        ; jumptable 67026652 case 85
.text:0041060C                                         ; jumptable 00410382 case 85
.text:0041060F                 jmp     sub_413260
.text:00410614 ; ---------------------------------------------------------------------------
.text:00410614
.text:00410614 loc_410614:                             ; CODE XREF: _sysconf+12↑j
.text:00410614                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:00410614                 add     esp, 0Ch        ; jumptable 67026652 case 86
.text:00410614                                         ; jumptable 00410382 case 86
.text:00410617                 jmp     sub_4132C0
.text:0041061C ; ---------------------------------------------------------------------------
.text:0041061C
.text:0041061C loc_41061C:                             ; CODE XREF: _sysconf+12↑j
.text:0041061C                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:0041061C                 mov     eax, 200h       ; jumptable 67026652 case 88
.text:0041061C                                         ; jumptable 00410382 case 88
.text:00410621                 jmp     short loc_4105C0
.text:00410623 ; ---------------------------------------------------------------------------
.text:00410623
.text:00410623 loc_410623:                             ; CODE XREF: _sysconf+12↑j
.text:00410623                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:00410623                 mov     eax, 8          ; jumptable 67026652 case 101
.text:00410623                                         ; jumptable 00410382 case 101
.text:00410628                 jmp     short loc_4105C0
.text:0041062A ; ---------------------------------------------------------------------------
.text:0041062A
.text:0041062A loc_41062A:                             ; CODE XREF: _sysconf+12↑j
.text:0041062A                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:0041062A                 mov     eax, 7FFFFFFFh  ; jumptable 67026652 cases 87,104
.text:0041062A                                         ; jumptable 00410382 cases 87,104
.text:0041062F                 jmp     short loc_4105C0
.text:00410631 ; ---------------------------------------------------------------------------
.text:00410631
.text:00410631 loc_410631:                             ; CODE XREF: _sysconf+12↑j
.text:00410631                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:00410631                 mov     eax, 80000000h  ; jumptable 67026652 case 105
.text:00410631                                         ; jumptable 00410382 case 105
.text:00410636                 jmp     short loc_4105C0
.text:00410638 ; ---------------------------------------------------------------------------
.text:00410638
.text:00410638 loc_410638:                             ; CODE XREF: _sysconf+12↑j
.text:00410638                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:00410638                 mov     eax, 20h ; ' '  ; jumptable 67026652 cases 106,107
.text:00410638                                         ; jumptable 00410382 cases 106,107
.text:0041063D                 jmp     short loc_4105C0
.text:0041063F ; ---------------------------------------------------------------------------
.text:0041063F
.text:0041063F loc_41063F:                             ; CODE XREF: _sysconf+12↑j
.text:0041063F                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:0041063F                 mov     eax, 2          ; jumptable 67026652 case 108
.text:0041063F                                         ; jumptable 00410382 case 108
.text:00410644                 jmp     loc_4105C0
.text:00410649 ; ---------------------------------------------------------------------------
.text:00410649
.text:00410649 loc_410649:                             ; CODE XREF: _sysconf+12↑j
.text:00410649                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:00410649                 xor     eax, eax        ; jumptable 67026652 case 109
.text:00410649                                         ; jumptable 00410382 case 109
.text:0041064B                 jmp     loc_4105C0
.text:00410650 ; ---------------------------------------------------------------------------
.text:00410650
.text:00410650 loc_410650:                             ; CODE XREF: _sysconf+12↑j
.text:00410650                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:00410650                 mov     eax, 7Fh        ; jumptable 67026652 cases 102,111
.text:00410650                                         ; jumptable 00410382 cases 102,111
.text:00410655                 jmp     loc_4105C0
.text:0041065A ; ---------------------------------------------------------------------------
.text:0041065A
.text:0041065A loc_41065A:                             ; CODE XREF: _sysconf+12↑j
.text:0041065A                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:0041065A                 mov     eax, 0FFFFFF80h ; jumptable 67026652 cases 103,112
.text:0041065A                                         ; jumptable 00410382 cases 103,112
.text:0041065F                 jmp     loc_4105C0
.text:00410664 ; ---------------------------------------------------------------------------
.text:00410664
.text:00410664 loc_410664:                             ; CODE XREF: _sysconf+12↑j
.text:00410664                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:00410664                 mov     eax, 7FFFh      ; jumptable 67026652 cases 110,113
.text:00410664                                         ; jumptable 00410382 cases 110,113
.text:00410669                 jmp     loc_4105C0
.text:0041066E ; ---------------------------------------------------------------------------
.text:0041066E
.text:0041066E loc_41066E:                             ; CODE XREF: _sysconf+12↑j
.text:0041066E                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:0041066E                 mov     eax, 0FFFF8000h ; jumptable 67026652 case 114
.text:0041066E                                         ; jumptable 00410382 case 114
.text:00410673                 jmp     loc_4105C0
.text:00410678 ; ---------------------------------------------------------------------------
.text:00410678
.text:00410678 loc_410678:                             ; CODE XREF: _sysconf+12↑j
.text:00410678                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:00410678                 mov     eax, 0FFh       ; jumptable 67026652 cases 40,115
.text:00410678                                         ; jumptable 00410382 cases 40,115
.text:0041067D                 jmp     loc_4105C0
.text:00410682 ; ---------------------------------------------------------------------------
.text:00410682
.text:00410682 loc_410682:                             ; CODE XREF: _sysconf+12↑j
.text:00410682                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:00410682                 mov     eax, 0FFFFh     ; jumptable 67026652 case 118
.text:00410682                                         ; jumptable 00410382 case 118
.text:00410687                 jmp     loc_4105C0
.text:0041068C ; ---------------------------------------------------------------------------
.text:0041068C
.text:0041068C loc_41068C:                             ; CODE XREF: _sysconf+12↑j
.text:0041068C                                         ; DATA XREF: _sysconf:jpt_410382↑o
.text:0041068C                 call    _errno          ; jumptable 67026652 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:0041068C                                         ; jumptable 00410382 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:00410691                 mov     dword ptr [eax], 28h ; '('
.text:00410697                 jmp     loc_4105B0      ; jumptable 67026652 cases 41,116,117
.text:00410697 _sysconf        endp                    ; jumptable 00410382 cases 41,116,117
.text:00410697
.text:00410697 ; ---------------------------------------------------------------------------
.text:0041069C                 align 10h
.text:004106A0
.text:004106A0 ; =============== S U B R O U T I N E =======================================
.text:004106A0
.text:004106A0
.text:004106A0 sub_4106A0      proc near               ; CODE XREF: sub_4107C0+152↓p
.text:004106A0                                         ; .text:0041098B↓p
.text:004106A0
.text:004106A0 FileHandle      = dword ptr -2Ch
.text:004106A0 Offset          = qword ptr -28h
.text:004106A0 Origin          = dword ptr -20h
.text:004106A0 nNumberOfBytesToUnlockHigh= dword ptr -1Ch
.text:004106A0 hFile           = dword ptr -14h
.text:004106A0 arg_0           = dword ptr  4
.text:004106A0 arg_4           = dword ptr  8
.text:004106A0 arg_8           = dword ptr  0Ch
.text:004106A0
.text:004106A0                 push    ebp
.text:004106A1                 push    edi
.text:004106A2                 push    esi
.text:004106A3                 push    ebx
.text:004106A4                 sub     esp, 1Ch
.text:004106A7                 mov     ebp, [esp+2Ch+arg_8]
.text:004106AB                 mov     edi, [esp+2Ch+arg_0]
.text:004106AF                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:004106B2                 call    _get_osfhandle
.text:004106B7                 movsx   edx, word ptr [ebp+2]
.text:004106BB                 mov     [esp+2Ch+hFile], eax
.text:004106BF                 mov     dword ptr [esp+2Ch+Offset], 0 ; Offset
.text:004106C7                 mov     dword ptr [esp+2Ch+Offset+4], 0
.text:004106CF                 mov     [esp+2Ch+Origin], edx ; Origin
.text:004106D3                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:004106D6                 call    _lseeki64
.text:004106DB                 mov     ebx, eax
.text:004106DD                 mov     esi, edx
.text:004106DF                 mov     edx, [ebp+14h]
.text:004106E2                 add     ebx, [ebp+8]
.text:004106E5                 mov     eax, [ebp+10h]
.text:004106E8                 mov     ecx, edx
.text:004106EA                 adc     esi, [ebp+0Ch]
.text:004106ED                 or      ecx, eax
.text:004106EF                 jz      loc_4107B0
.text:004106F5                 add     eax, ebx
.text:004106F7                 adc     edx, esi
.text:004106F9
.text:004106F9 loc_4106F9:                             ; CODE XREF: sub_4106A0+118↓j
.text:004106F9                 cmp     [esp+2Ch+arg_4], 7
.text:004106FE                 jz      loc_41079E
.text:00410704                 cmp     [esp+2Ch+arg_4], 7
.text:00410709                 jl      short loc_410725
.text:0041070B                 cmp     [esp+2Ch+arg_4], 9
.text:00410710                 jg      short loc_410725
.text:00410712                 movsx   ecx, word ptr [ebp+0]
.text:00410716                 cmp     ecx, 1
.text:00410719                 jl      short loc_410725
.text:0041071B                 cmp     ecx, 2
.text:0041071E                 jle     short loc_410780
.text:00410720                 cmp     ecx, 3
.text:00410723                 jz      short loc_41073D
.text:00410725
.text:00410725 loc_410725:                             ; CODE XREF: sub_4106A0+69↑j
.text:00410725                                         ; sub_4106A0+70↑j ...
.text:00410725                 call    _errno
.text:0041072A                 mov     dword ptr [eax], 16h
.text:00410730
.text:00410730 loc_410730:                             ; CODE XREF: sub_4106A0+D9↓j
.text:00410730                                         ; sub_4106A0+109↓j
.text:00410730                 mov     eax, 0FFFFFFFFh
.text:00410735
.text:00410735 loc_410735:                             ; CODE XREF: sub_4106A0+C9↓j
.text:00410735                 add     esp, 1Ch
.text:00410738                 pop     ebx
.text:00410739                 pop     esi
.text:0041073A                 pop     edi
.text:0041073B                 pop     ebp
.text:0041073C                 retn
.text:0041073D ; ---------------------------------------------------------------------------
.text:0041073D
.text:0041073D loc_41073D:                             ; CODE XREF: sub_4106A0+83↑j
.text:0041073D                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToUnlockLow
.text:00410741                 mov     eax, [esp+2Ch+hFile]
.text:00410745                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:00410749                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0041074D                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:00410751                 mov     [esp+2Ch+FileHandle], eax ; hFile
.text:00410754                 call    UnlockFile
.text:00410759                 lea     esi, [esi+0]
.text:00410760
.text:00410760 loc_410760:                             ; CODE XREF: sub_4106A0+FC↓j
.text:00410760                 mov     ecx, eax
.text:00410762                 sub     esp, 14h
.text:00410765                 xor     eax, eax
.text:00410767                 test    ecx, ecx
.text:00410769                 jnz     short loc_410735
.text:0041076B                 call    sub_410C90
.text:00410770                 mov     esi, eax
.text:00410772                 call    _errno
.text:00410777                 mov     [eax], esi
.text:00410779                 jmp     short loc_410730
.text:00410779 ; ---------------------------------------------------------------------------
.text:0041077B                 align 10h
.text:00410780
.text:00410780 loc_410780:                             ; CODE XREF: sub_4106A0+7E↑j
.text:00410780                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToLockHigh
.text:00410784                 mov     edx, [esp+2Ch+hFile]
.text:00410788                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0041078C                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:00410790                 mov     [esp+2Ch+FileHandle], edx ; hFile
.text:00410793                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToLockLow
.text:00410797                 call    LockFile
.text:0041079C                 jmp     short loc_410760
.text:0041079E ; ---------------------------------------------------------------------------
.text:0041079E
.text:0041079E loc_41079E:                             ; CODE XREF: sub_4106A0+5E↑j
.text:0041079E                 call    _errno
.text:004107A3                 mov     dword ptr [eax], 28h ; '('
.text:004107A9                 jmp     short loc_410730
.text:004107A9 ; ---------------------------------------------------------------------------
.text:004107AB                 align 10h
.text:004107B0
.text:004107B0 loc_4107B0:                             ; CODE XREF: sub_4106A0+4F↑j
.text:004107B0                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:004107B3                 call    _filelengthi64
.text:004107B8                 jmp     loc_4106F9
.text:004107B8 sub_4106A0      endp
.text:004107B8
.text:004107B8 ; ---------------------------------------------------------------------------
.text:004107BD                 align 10h
.text:004107C0
.text:004107C0 ; =============== S U B R O U T I N E =======================================
.text:004107C0
.text:004107C0
.text:004107C0 sub_4107C0      proc near               ; CODE XREF: sub_40CAE0+1A↑p
.text:004107C0
.text:004107C0 FileHandle      = dword ptr -1Ch
.text:004107C0 var_18          = dword ptr -18h
.text:004107C0 var_14          = dword ptr -14h
.text:004107C0 var_4           = dword ptr -4
.text:004107C0 arg_0           = dword ptr  4
.text:004107C0 arg_4           = dword ptr  8
.text:004107C0 arg_8           = byte ptr  0Ch
.text:004107C0
.text:004107C0                 sub     esp, 1Ch
.text:004107C3                 mov     ecx, [esp+1Ch+arg_0]
.text:004107C7                 mov     [esp+1Ch+var_4], ebx
.text:004107CB                 mov     edx, [esp+1Ch+arg_4]
.text:004107CF                 test    ecx, ecx
.text:004107D1                 js      loc_410929
.text:004107D7                 cmp     edx, 9          ; switch 10 cases
.text:004107DA                 lea     eax, [esp+1Ch+arg_8]
.text:004107DE                 ja      def_4107E4      ; jumptable 004107E4 default case
.text:004107E4                 jmp     ds:jpt_4107E4[edx*4] ; switch jump
.text:004107E4 ; ---------------------------------------------------------------------------
.text:004107EB                 align 4
.text:004107EC jpt_4107E4      dd offset loc_410814    ; DATA XREF: sub_4107C0+24↑r
.text:004107EC                 dd offset loc_410828    ; jump table for switch statement
.text:004107EC                 dd offset loc_410848
.text:004107EC                 dd offset loc_410870
.text:004107EC                 dd offset loc_4108B8
.text:004107EC                 dd offset loc_4108F0
.text:004107EC                 dd offset loc_4108F0
.text:004107EC                 dd offset loc_4108F0
.text:004107EC                 dd offset loc_410905
.text:004107EC                 dd offset loc_410905
.text:00410814 ; ---------------------------------------------------------------------------
.text:00410814
.text:00410814 loc_410814:                             ; CODE XREF: sub_4107C0+24↑j
.text:00410814                                         ; DATA XREF: sub_4107C0:jpt_4107E4↑o
.text:00410814                 mov     [esp+1Ch+FileHandle], ecx ; jumptable 004107E4 case 0
.text:00410817                 call    _dup
.text:0041081C                 lea     esi, [esi+0]
.text:00410820
.text:00410820 loc_410820:                             ; CODE XREF: sub_4107C0+86↓j
.text:00410820                                         ; sub_4107C0+AC↓j ...
.text:00410820                 mov     ebx, [esp+1Ch+var_4]
.text:00410824                 add     esp, 1Ch
.text:00410827                 retn
.text:00410828 ; ---------------------------------------------------------------------------
.text:00410828
.text:00410828 loc_410828:                             ; CODE XREF: sub_4107C0+24↑j
.text:00410828                                         ; DATA XREF: sub_4107C0:jpt_4107E4↑o
.text:00410828                 mov     eax, ds:__pioinfo ; jumptable 004107E4 case 1
.text:0041082D                 mov     edx, ecx
.text:0041082F                 sar     edx, 5
.text:00410832                 and     ecx, 1Fh
.text:00410835                 mov     ebx, [eax+edx*4]
.text:00410838                 lea     eax, [ecx+ecx*8]
.text:0041083B                 test    byte ptr [ebx+eax*4+4], 10h
.text:00410840                 setnz   dl
.text:00410843                 movzx   eax, dl
.text:00410846                 jmp     short loc_410820
.text:00410848 ; ---------------------------------------------------------------------------
.text:00410848
.text:00410848 loc_410848:                             ; CODE XREF: sub_4107C0+24↑j
.text:00410848                                         ; DATA XREF: sub_4107C0:jpt_4107E4↑o
.text:00410848                 test    bl, 1           ; jumptable 004107E4 case 2
.text:0041084B                 jz      short loc_410853
.text:0041084D                 and     ebx, 0FFFFFFFEh
.text:00410850                 or      ebx, 10h
.text:00410853
.text:00410853 loc_410853:                             ; CODE XREF: sub_4107C0+8B↑j
.text:00410853                 mov     eax, ds:__pioinfo
.text:00410858                 mov     edx, ecx
.text:0041085A                 sar     edx, 5
.text:0041085D                 and     ecx, 1Fh
.text:00410860                 mov     edx, [eax+edx*4]
.text:00410863                 lea     eax, [ecx+ecx*8]
.text:00410866                 mov     [edx+eax*4+4], bl
.text:0041086A
.text:0041086A loc_41086A:                             ; CODE XREF: sub_4107C0+121↓j
.text:0041086A                 xor     eax, eax
.text:0041086C                 jmp     short loc_410820
.text:0041086C ; ---------------------------------------------------------------------------
.text:0041086E                 align 10h
.text:00410870
.text:00410870 loc_410870:                             ; CODE XREF: sub_4107C0+24↑j
.text:00410870                                         ; DATA XREF: sub_4107C0:jpt_4107E4↑o
.text:00410870                 mov     eax, ds:__pioinfo ; jumptable 004107E4 case 3
.text:00410875                 mov     ebx, ecx
.text:00410877                 sar     ebx, 5
.text:0041087A                 and     ecx, 1Fh
.text:0041087D                 mov     edx, [eax+ebx*4]
.text:00410880                 lea     ebx, [ecx+ecx*8]
.text:00410883                 movsx   eax, byte ptr [edx+ebx*4+4]
.text:00410888                 xor     edx, edx
.text:0041088A                 test    al, 1
.text:0041088C                 jz      short loc_410897
.text:0041088E                 mov     edx, 2
.text:00410893
.text:00410893 loc_410893:                             ; CODE XREF: sub_4107C0+E0↓j
.text:00410893                                         ; sub_4107C0+EB↓j ...
.text:00410893                 mov     eax, edx
.text:00410895                 jmp     short loc_410820
.text:00410897 ; ---------------------------------------------------------------------------
.text:00410897
.text:00410897 loc_410897:                             ; CODE XREF: sub_4107C0+CC↑j
.text:00410897                 test    al, 20h
.text:00410899                 jz      short loc_4108A2
.text:0041089B                 mov     edx, 8
.text:004108A0                 jmp     short loc_410893
.text:004108A2 ; ---------------------------------------------------------------------------
.text:004108A2
.text:004108A2 loc_4108A2:                             ; CODE XREF: sub_4107C0+D9↑j
.text:004108A2                 test    al, 10h
.text:004108A4                 jz      short loc_4108AD
.text:004108A6                 mov     edx, 80h ; '€'
.text:004108AB                 jmp     short loc_410893
.text:004108AD ; ---------------------------------------------------------------------------
.text:004108AD
.text:004108AD loc_4108AD:                             ; CODE XREF: sub_4107C0+E4↑j
.text:004108AD                 test    al, al
.text:004108AF                 jns     short loc_410893
.text:004108B1                 mov     edx, 4000h
.text:004108B6                 jmp     short loc_410893
.text:004108B8 ; ---------------------------------------------------------------------------
.text:004108B8
.text:004108B8 loc_4108B8:                             ; CODE XREF: sub_4107C0+24↑j
.text:004108B8                                         ; DATA XREF: sub_4107C0:jpt_4107E4↑o
.text:004108B8                 mov     edx, ds:__pioinfo ; jumptable 004107E4 case 4
.text:004108BE                 mov     ebx, [eax]
.text:004108C0                 mov     eax, ecx
.text:004108C2                 sar     eax, 5
.text:004108C5                 and     ecx, 1Fh
.text:004108C8                 mov     edx, [edx+eax*4]
.text:004108CB                 lea     eax, [ecx+ecx*8]
.text:004108CE                 shl     eax, 2
.text:004108D1                 xor     ecx, ecx
.text:004108D3                 test    bl, 8
.text:004108D6                 jz      short loc_4108E3
.text:004108D8                 mov     ecx, 20h ; ' '
.text:004108DD
.text:004108DD loc_4108DD:                             ; CODE XREF: sub_4107C0+126↓j
.text:004108DD                                         ; sub_4107C0+12D↓j
.text:004108DD                 mov     [edx+eax+4], cl
.text:004108E1                 jmp     short loc_41086A
.text:004108E3 ; ---------------------------------------------------------------------------
.text:004108E3
.text:004108E3 loc_4108E3:                             ; CODE XREF: sub_4107C0+116↑j
.text:004108E3                 test    bh, 40h
.text:004108E6                 jz      short loc_4108DD
.text:004108E8                 mov     ecx, 80h ; '€'
.text:004108ED                 jmp     short loc_4108DD
.text:004108ED ; ---------------------------------------------------------------------------
.text:004108EF                 align 10h
.text:004108F0
.text:004108F0 loc_4108F0:                             ; CODE XREF: sub_4107C0+24↑j
.text:004108F0                                         ; DATA XREF: sub_4107C0:jpt_4107E4↑o
.text:004108F0                 call    _errno          ; jumptable 004107E4 cases 5-7
.text:004108F5                 mov     dword ptr [eax], 28h ; '('
.text:004108FB
.text:004108FB loc_4108FB:                             ; CODE XREF: sub_4107C0+167↓j
.text:004108FB                                         ; sub_4107C0+174↓j
.text:004108FB                 mov     eax, 0FFFFFFFFh
.text:00410900                 jmp     loc_410820
.text:00410905 ; ---------------------------------------------------------------------------
.text:00410905
.text:00410905 loc_410905:                             ; CODE XREF: sub_4107C0+24↑j
.text:00410905                                         ; DATA XREF: sub_4107C0:jpt_4107E4↑o
.text:00410905                 mov     ebx, [eax]      ; jumptable 004107E4 cases 8,9
.text:00410907                 mov     [esp+1Ch+var_18], edx
.text:0041090B                 mov     [esp+1Ch+FileHandle], ecx
.text:0041090E                 mov     [esp+1Ch+var_14], ebx
.text:00410912                 call    sub_4106A0
.text:00410917                 jmp     loc_410820
.text:0041091C ; ---------------------------------------------------------------------------
.text:0041091C
.text:0041091C def_4107E4:                             ; CODE XREF: sub_4107C0+1E↑j
.text:0041091C                 call    _errno          ; jumptable 004107E4 default case
.text:00410921                 mov     dword ptr [eax], 16h
.text:00410927                 jmp     short loc_4108FB
.text:00410929 ; ---------------------------------------------------------------------------
.text:00410929
.text:00410929 loc_410929:                             ; CODE XREF: sub_4107C0+11↑j
.text:00410929                 call    _errno
.text:0041092E                 mov     dword ptr [eax], 9
.text:00410934                 jmp     short loc_4108FB
.text:00410934 sub_4107C0      endp
.text:00410934
.text:00410934 ; ---------------------------------------------------------------------------
.text:00410936                 align 10h
.text:00410940                 sub     esp, 3Ch
.text:00410943                 mov     edx, [esp+48h]
.text:00410947                 mov     eax, [edx+4]
.text:0041094A                 movzx   ecx, word ptr [edx]
.text:0041094D                 mov     [esp+18h], eax
.text:00410951                 mov     [esp+10h], cx
.text:00410956                 movzx   ecx, word ptr [edx+2]
.text:0041095A                 mov     [esp+12h], cx
.text:0041095F                 mov     ecx, eax
.text:00410961                 mov     eax, [edx+8]
.text:00410964                 sar     ecx, 1Fh
.text:00410967                 mov     [esp+1Ch], ecx
.text:0041096B                 cdq
.text:0041096C                 lea     ecx, [esp+10h]
.text:00410970                 mov     [esp+24h], edx
.text:00410974                 mov     edx, [esp+44h]
.text:00410978                 mov     [esp+20h], eax
.text:0041097C                 mov     [esp+8], ecx
.text:00410980                 mov     [esp+4], edx
.text:00410984                 mov     edx, [esp+40h]
.text:00410988                 mov     [esp], edx
.text:0041098B                 call    sub_4106A0
.text:00410990                 add     esp, 3Ch
.text:00410993                 retn
.text:00410993 ; ---------------------------------------------------------------------------
.text:00410994                 align 10h
.text:004109A0                 mov     edx, [esp+4]
.text:004109A4                 xor     eax, eax
.text:004109A6                 test    dl, 1
.text:004109A9                 jz      short loc_4109B1
.text:004109AB                 mov     eax, 2
.text:004109B0                 retn
.text:004109B1 ; ---------------------------------------------------------------------------
.text:004109B1
.text:004109B1 loc_4109B1:                             ; CODE XREF: .text:004109A9↑j
.text:004109B1                 test    dl, 20h
.text:004109B4                 jz      short loc_4109C0
.text:004109B6                 mov     eax, 8
.text:004109BB                 retn
.text:004109BB ; ---------------------------------------------------------------------------
.text:004109BC                 align 10h
.text:004109C0
.text:004109C0 loc_4109C0:                             ; CODE XREF: .text:004109B4↑j
.text:004109C0                 test    dl, 10h
.text:004109C3                 jz      short loc_4109D0
.text:004109C5                 mov     eax, 80h ; '€'
.text:004109CA                 retn
.text:004109CA ; ---------------------------------------------------------------------------
.text:004109CB                 align 10h
.text:004109D0
.text:004109D0 loc_4109D0:                             ; CODE XREF: .text:004109C3↑j
.text:004109D0                 test    dl, dl
.text:004109D2                 jns     short locret_4109D9
.text:004109D4                 mov     eax, 4000h
.text:004109D9
.text:004109D9 locret_4109D9:                          ; CODE XREF: .text:004109D2↑j
.text:004109D9                 retn
.text:004109D9 ; ---------------------------------------------------------------------------
.text:004109DA                 align 10h
.text:004109E0                 mov     edx, [esp+4]
.text:004109E4                 xor     eax, eax
.text:004109E6                 test    dl, 8
.text:004109E9                 jz      short loc_4109F1
.text:004109EB                 mov     eax, 20h ; ' '
.text:004109F0                 retn
.text:004109F1 ; ---------------------------------------------------------------------------
.text:004109F1
.text:004109F1 loc_4109F1:                             ; CODE XREF: .text:004109E9↑j
.text:004109F1                 test    dh, 40h
.text:004109F4                 jz      short locret_4109FB
.text:004109F6                 mov     eax, 80h ; '€'
.text:004109FB
.text:004109FB locret_4109FB:                          ; CODE XREF: .text:004109F4↑j
.text:004109FB                 retn
.text:004109FB ; ---------------------------------------------------------------------------
.text:004109FC                 align 10h
.text:00410A00
.text:00410A00 ; =============== S U B R O U T I N E =======================================
.text:00410A00
.text:00410A00 ; Attributes: info_from_lumina
.text:00410A00
.text:00410A00 ___get_errno    proc near               ; CODE XREF: sub_410C90+B↓p
.text:00410A00
.text:00410A00 arg_0           = dword ptr  4
.text:00410A00
.text:00410A00                 mov     eax, [esp+arg_0]
.text:00410A04                 cmp     eax, 53h ; 'S'
.text:00410A07                 jg      loc_410B00
.text:00410A0D                 cmp     eax, 52h ; 'R'
.text:00410A10                 jge     short loc_410A62
.text:00410A12                 cmp     eax, 0Fh
.text:00410A15                 jz      short loc_410A30
.text:00410A17                 cmp     eax, 0Fh
.text:00410A1A                 jg      short loc_410A90
.text:00410A1C                 cmp     eax, 9
.text:00410A1F                 jg      short loc_410A70
.text:00410A21                 cmp     eax, 7
.text:00410A24                 jge     short loc_410A69
.text:00410A26                 cmp     eax, 3
.text:00410A29                 jg      short loc_410A4A
.text:00410A2B                 cmp     eax, 2
.text:00410A2E                 jl      short loc_410A43
.text:00410A30
.text:00410A30 loc_410A30:                             ; CODE XREF: ___get_errno+15↑j
.text:00410A30                                         ; ___get_errno+9D↓j ...
.text:00410A30                 mov     edx, 2
.text:00410A35                 lea     esi, [esi+0]
.text:00410A39                 lea     edi, [edi+0]
.text:00410A40
.text:00410A40 loc_410A40:                             ; CODE XREF: ___get_errno+48↓j
.text:00410A40                                         ; ___get_errno+59↓j ...
.text:00410A40                 mov     eax, edx
.text:00410A42                 retn
.text:00410A43 ; ---------------------------------------------------------------------------
.text:00410A43
.text:00410A43 loc_410A43:                             ; CODE XREF: ___get_errno+2E↑j
.text:00410A43                                         ; ___get_errno+78↓j ...
.text:00410A43                 mov     edx, 16h
.text:00410A48                 jmp     short loc_410A40
.text:00410A4A ; ---------------------------------------------------------------------------
.text:00410A4A
.text:00410A4A loc_410A4A:                             ; CODE XREF: ___get_errno+29↑j
.text:00410A4A                 cmp     eax, 5
.text:00410A4D                 jz      short loc_410A62
.text:00410A4F                 cmp     eax, 5
.text:00410A52                 jg      short loc_410A5B
.text:00410A54                 mov     edx, 18h
.text:00410A59                 jmp     short loc_410A40
.text:00410A5B ; ---------------------------------------------------------------------------
.text:00410A5B
.text:00410A5B loc_410A5B:                             ; CODE XREF: ___get_errno+52↑j
.text:00410A5B                                         ; ___get_errno+180↓j
.text:00410A5B                 mov     edx, 9
.text:00410A60                 jmp     short loc_410A40
.text:00410A62 ; ---------------------------------------------------------------------------
.text:00410A62
.text:00410A62 loc_410A62:                             ; CODE XREF: ___get_errno+10↑j
.text:00410A62                                         ; ___get_errno+4D↑j ...
.text:00410A62                 mov     edx, 0Dh
.text:00410A67                 jmp     short loc_410A40
.text:00410A69 ; ---------------------------------------------------------------------------
.text:00410A69
.text:00410A69 loc_410A69:                             ; CODE XREF: ___get_errno+24↑j
.text:00410A69                                         ; ___get_errno+73↓j ...
.text:00410A69                 mov     edx, 0Ch
.text:00410A6E                 jmp     short loc_410A40
.text:00410A70 ; ---------------------------------------------------------------------------
.text:00410A70
.text:00410A70 loc_410A70:                             ; CODE XREF: ___get_errno+1F↑j
.text:00410A70                 cmp     eax, 0Dh
.text:00410A73                 jg      short loc_410A69
.text:00410A75                 cmp     eax, 0Ch
.text:00410A78                 jge     short loc_410A43
.text:00410A7A                 cmp     eax, 0Ah
.text:00410A7D                 mov     edx, 7
.text:00410A82                 jz      short loc_410A40
.text:00410A84                 cmp     eax, 0Bh
.text:00410A87                 jnz     short loc_410A43
.text:00410A89
.text:00410A89 loc_410A89:                             ; CODE XREF: ___get_errno+21A↓j
.text:00410A89                 mov     edx, 8
.text:00410A8E                 jmp     short loc_410A40
.text:00410A90 ; ---------------------------------------------------------------------------
.text:00410A90
.text:00410A90 loc_410A90:                             ; CODE XREF: ___get_errno+1A↑j
.text:00410A90                 cmp     eax, 22h ; '"'
.text:00410A93                 jg      short loc_410AC4
.text:00410A95                 cmp     eax, 16h
.text:00410A98                 jge     short loc_410A62
.text:00410A9A                 cmp     eax, 12h
.text:00410A9D                 jz      short loc_410A30
.text:00410A9F                 cmp     eax, 12h
.text:00410AA2                 jg      short loc_410AB5
.text:00410AA4                 cmp     eax, 10h
.text:00410AA7                 jz      short loc_410A62
.text:00410AA9                 mov     edx, 12h
.text:00410AAE                 cmp     eax, 11h
.text:00410AB1
.text:00410AB1 loc_410AB1:                             ; CODE XREF: ___get_errno+172↓j
.text:00410AB1                                         ; ___get_errno+24C↓j ...
.text:00410AB1                 jnz     short loc_410A43
.text:00410AB3                 jmp     short loc_410A40
.text:00410AB5 ; ---------------------------------------------------------------------------
.text:00410AB5
.text:00410AB5 loc_410AB5:                             ; CODE XREF: ___get_errno+A2↑j
.text:00410AB5                 cmp     eax, 14h
.text:00410AB8                 jle     short loc_410A62
.text:00410ABA
.text:00410ABA loc_410ABA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00410ABA                 mov     edx, 10h
.text:00410ABF                 jmp     loc_410A40
.text:00410AC4 ; ---------------------------------------------------------------------------
.text:00410AC4
.text:00410AC4 loc_410AC4:                             ; CODE XREF: ___get_errno+93↑j
.text:00410AC4                 cmp     eax, 41h ; 'A'
.text:00410AC7                 jz      short loc_410A62
.text:00410AC9                 cmp     eax, 41h ; 'A'
.text:00410ACC                 jg      short loc_410AE1
.text:00410ACE                 cmp     eax, 24h ; '$'
.text:00410AD1                 jz      short loc_410A62
.text:00410AD3                 cmp     eax, 35h ; '5'
.text:00410AD6                 jnz     loc_410A43
.text:00410ADC                 jmp     loc_410A30
.text:00410AE1 ; ---------------------------------------------------------------------------
.text:00410AE1
.text:00410AE1 loc_410AE1:                             ; CODE XREF: ___get_errno+CC↑j
.text:00410AE1                 cmp     eax, 43h ; 'C'
.text:00410AE4                 jz      loc_410A30
.text:00410AEA                 cmp     eax, 50h ; 'P'
.text:00410AED                 jnz     loc_410A43
.text:00410AF3
.text:00410AF3 loc_410AF3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00410AF3                 mov     edx, 11h
.text:00410AF8                 jmp     loc_410A40
.text:00410AF8 ; ---------------------------------------------------------------------------
.text:00410AFD                 align 10h
.text:00410B00
.text:00410B00 loc_410B00:                             ; CODE XREF: ___get_errno+7↑j
.text:00410B00                 cmp     eax, 0A1h ; '¡'
.text:00410B05                 jz      loc_410A30
.text:00410B0B                 cmp     eax, 0A1h ; '¡'
.text:00410B10                 jg      loc_410BC0
.text:00410B16                 cmp     eax, 81h
.text:00410B1B                 jg      short loc_410B85
.text:00410B1D                 cmp     eax, 80h ; '€'
.text:00410B22                 mov     edx, 0Ah
.text:00410B27                 jge     loc_410A40
.text:00410B2D                 cmp     eax, 6Ch ; 'l'
.text:00410B30                 jz      loc_410A62
.text:00410B36                 cmp     eax, 6Ch ; 'l'
.text:00410B39                 jg      short loc_410B57
.text:00410B3B                 cmp     eax, 57h ; 'W'
.text:00410B3E                 jz      loc_410A43
.text:00410B44                 cmp     eax, 59h ; 'Y'
.text:00410B47                 jnz     loc_410A43
.text:00410B4D
.text:00410B4D loc_410B4D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00410B4D                                         ; ___get_errno+23C↓j
.text:00410B4D                 mov     edx, 0Bh
.text:00410B52                 jmp     loc_410A40
.text:00410B57 ; ---------------------------------------------------------------------------
.text:00410B57
.text:00410B57 loc_410B57:                             ; CODE XREF: ___get_errno+139↑j
.text:00410B57                 cmp     eax, 70h ; 'p'
.text:00410B5A                 mov     edx, 1Ch
.text:00410B5F                 jz      loc_410A40
.text:00410B65                 cmp     eax, 70h ; 'p'
.text:00410B68                 jg      short loc_410B77
.text:00410B6A                 mov     edx, 20h ; ' '
.text:00410B6F                 cmp     eax, 6Dh ; 'm'
.text:00410B72                 jmp     loc_410AB1
.text:00410B77 ; ---------------------------------------------------------------------------
.text:00410B77
.text:00410B77 loc_410B77:                             ; CODE XREF: ___get_errno+168↑j
.text:00410B77                 cmp     eax, 72h ; 'r'
.text:00410B7A
.text:00410B7A loc_410B7A:                             ; CODE XREF: ___get_errno+19C↓j
.text:00410B7A                 jnz     loc_410A43
.text:00410B80                 jmp     loc_410A5B
.text:00410B85 ; ---------------------------------------------------------------------------
.text:00410B85
.text:00410B85 loc_410B85:                             ; CODE XREF: ___get_errno+11B↑j
.text:00410B85                 cmp     eax, 84h ; '„'
.text:00410B8A                 jz      loc_410A62
.text:00410B90                 cmp     eax, 84h ; '„'
.text:00410B95                 jg      short loc_410B9E
.text:00410B97                 cmp     eax, 82h ; '‚'
.text:00410B9C                 jmp     short loc_410B7A
.text:00410B9E ; ---------------------------------------------------------------------------
.text:00410B9E
.text:00410B9E loc_410B9E:                             ; CODE XREF: ___get_errno+195↑j
.text:00410B9E                 cmp     eax, 91h ; '‘'
.text:00410BA3                 mov     edx, 29h ; ')'
.text:00410BA8                 jz      loc_410A40
.text:00410BAE                 cmp     eax, 9Eh ; 'ž'
.text:00410BB3
.text:00410BB3 loc_410BB3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00410BB3                 jnz     loc_410A43
.text:00410BB9                 jmp     loc_410A62
.text:00410BB9 ; ---------------------------------------------------------------------------
.text:00410BBE                 align 10h
.text:00410BC0
.text:00410BC0 loc_410BC0:                             ; CODE XREF: ___get_errno+110↑j
.text:00410BC0                 cmp     eax, 0CEh ; 'Î'
.text:00410BC5                 jz      loc_410A30
.text:00410BCB                 cmp     eax, 0CEh ; 'Î'
.text:00410BD0                 jg      short loc_410C20
.text:00410BD2                 cmp     eax, 0AAh ; 'ª'
.text:00410BD7                 jz      loc_410ABA
.text:00410BDD                 cmp     eax, 0AAh ; 'ª'
.text:00410BE2                 jg      short loc_410BF6
.text:00410BE4                 cmp     eax, 0A4h ; '¤'
.text:00410BE9                 jz      loc_410B4D
.text:00410BEF                 cmp     eax, 0A7h ; '§'
.text:00410BF4                 jmp     short loc_410BB3
.text:00410BF6 ; ---------------------------------------------------------------------------
.text:00410BF6
.text:00410BF6 loc_410BF6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00410BF6                 cmp     eax, 0B7h ; '·'
.text:00410BFB                 jz      loc_410AF3
.text:00410C01                 cmp     eax, 0B7h ; '·'
.text:00410C06                 jl      loc_410A43
.text:00410C0C                 sub     eax, 0BCh ; '¼'
.text:00410C11                 cmp     eax, 0Eh
.text:00410C14                 ja      loc_410A43
.text:00410C1A                 jmp     loc_410A89
.text:00410C1A ; ---------------------------------------------------------------------------
.text:00410C1F                 align 10h
.text:00410C20
.text:00410C20 loc_410C20:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00410C20                 cmp     eax, 46Bh
.text:00410C25                 mov     edx, 24h ; '$'
.text:00410C2A                 jz      loc_410A40
.text:00410C30                 cmp     eax, 46Bh
.text:00410C35                 jg      short loc_410C51
.text:00410C37                 cmp     eax, 0D7h ; '×'
.text:00410C3C                 jz      loc_410B4D
.text:00410C42                 mov     edx, 5
.text:00410C47                 cmp     eax, 45Dh
.text:00410C4C                 jmp     loc_410AB1
.text:00410C51 ; ---------------------------------------------------------------------------
.text:00410C51
.text:00410C51 loc_410C51:                             ; CODE XREF: ___get_errno+235↑j
.text:00410C51                 cmp     eax, 4D5h
.text:00410C56                 mov     edx, 4
.text:00410C5B                 jz      loc_410A40
.text:00410C61                 cmp     eax, 4D5h
.text:00410C66                 jg      short loc_410C77
.text:00410C68                 mov     edx, 13h
.text:00410C6D                 cmp     eax, 4B0h
.text:00410C72                 jmp     loc_410AB1
.text:00410C77 ; ---------------------------------------------------------------------------
.text:00410C77
.text:00410C77 loc_410C77:                             ; CODE XREF: ___get_errno+266↑j
.text:00410C77                 cmp     eax, 718h
.text:00410C7C                 jnz     loc_410A43
.text:00410C82                 jmp     loc_410A69
.text:00410C82 ___get_errno    endp
.text:00410C82
.text:00410C82 ; ---------------------------------------------------------------------------
.text:00410C87                 align 10h
.text:00410C90
.text:00410C90 ; =============== S U B R O U T I N E =======================================
.text:00410C90
.text:00410C90
.text:00410C90 sub_410C90      proc near               ; CODE XREF: sub_412990:loc_40EC1D↑p
.text:00410C90                                         ; sub_40F1C0:loc_40F228↑p ...
.text:00410C90
.text:00410C90 var_C           = dword ptr -0Ch
.text:00410C90
.text:00410C90                 sub     esp, 0Ch
.text:00410C93                 call    GetLastError
.text:00410C98                 mov     [esp+0Ch+var_C], eax
.text:00410C9B                 call    ___get_errno
.text:00410CA0                 add     esp, 0Ch
.text:00410CA3                 retn
.text:00410CA3 sub_410C90      endp
.text:00410CA3
.text:00410CA3 ; ---------------------------------------------------------------------------
.text:00410CA4                 align 10h
.text:00410CB0
.text:00410CB0 ; =============== S U B R O U T I N E =======================================
.text:00410CB0
.text:00410CB0
.text:00410CB0 sub_410CB0      proc near               ; CODE XREF: .text:0040F133↑p
.text:00410CB0                                         ; .text:0040F183↑p
.text:00410CB0
.text:00410CB0 arg_4           = dword ptr  8
.text:00410CB0
.text:00410CB0                 sub     esp, 0Ch
.text:00410CB3                 mov     edx, [esp+0Ch+arg_4]
.text:00410CB7                 test    edx, edx
.text:00410CB9                 jz      short loc_410CC0
.text:00410CBB                 add     esp, 0Ch
.text:00410CBE                 jmp     short sub_410D00
.text:00410CC0 ; ---------------------------------------------------------------------------
.text:00410CC0
.text:00410CC0 loc_410CC0:                             ; CODE XREF: sub_410CB0+9↑j
.text:00410CC0                 call    _errno
.text:00410CC5                 mov     dword ptr [eax], 16h
.text:00410CCB                 xor     eax, eax
.text:00410CCD                 add     esp, 0Ch
.text:00410CD0                 retn
.text:00410CD0 sub_410CB0      endp
.text:00410CD0
.text:00410CD1 ; ---------------------------------------------------------------------------
.text:00410CD1                 jmp     short sub_410CE0
.text:00410CD1 ; ---------------------------------------------------------------------------
.text:00410CD3                 align 10h
.text:00410CE0
.text:00410CE0 ; =============== S U B R O U T I N E =======================================
.text:00410CE0
.text:00410CE0
.text:00410CE0 ; int __cdecl sub_410CE0(LPCSTR)
.text:00410CE0 sub_410CE0      proc near               ; CODE XREF: sub_412990-3E1C↑p
.text:00410CE0                                         ; .text:0040F328↑p ...
.text:00410CE0
.text:00410CE0 lpFileName      = dword ptr -0Ch
.text:00410CE0 Destination     = dword ptr -8
.text:00410CE0 arg_0           = dword ptr  4
.text:00410CE0
.text:00410CE0                 sub     esp, 0Ch
.text:00410CE3                 mov     edx, [esp+0Ch+arg_0]
.text:00410CE7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:00410CEF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:00410CF2                 call    sub_410D00
.text:00410CF7                 add     esp, 0Ch
.text:00410CFA                 retn
.text:00410CFA sub_410CE0      endp
.text:00410CFA
.text:00410CFA ; ---------------------------------------------------------------------------
.text:00410CFB                 align 10h
.text:00410D00
.text:00410D00 ; =============== S U B R O U T I N E =======================================
.text:00410D00
.text:00410D00
.text:00410D00 ; int __cdecl sub_410D00(LPCSTR lpFileName, char *Destination)
.text:00410D00 sub_410D00      proc near               ; CODE XREF: sub_410CB0+E↑j
.text:00410D00                                         ; sub_410CE0+12↑p
.text:00410D00
.text:00410D00 Size            = dword ptr -2Ch
.text:00410D00 nBufferLength   = dword ptr -28h
.text:00410D00 lpBuffer        = dword ptr -24h
.text:00410D00 lpFilePart      = dword ptr -20h
.text:00410D00 FilePart        = dword ptr -14h
.text:00410D00 lpFileName      = dword ptr  4
.text:00410D00 Destination     = dword ptr  8
.text:00410D00
.text:00410D00                 push    ebp
.text:00410D01                 push    edi
.text:00410D02                 push    esi
.text:00410D03                 push    ebx
.text:00410D04                 sub     esp, 1Ch
.text:00410D07                 mov     edi, [esp+2Ch+lpFileName]
.text:00410D0B                 mov     ebp, [esp+2Ch+Destination]
.text:00410D0F                 test    edi, edi
.text:00410D11                 jz      loc_410E19
.text:00410D17                 cmp     byte ptr [edi], 0
.text:00410D1A                 jz      loc_410E0C
.text:00410D20                 mov     [esp+2Ch+Size], 104h ; Size
.text:00410D27                 call    malloc
.text:00410D2C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00410D30                 lea     edx, [esp+2Ch+FilePart]
.text:00410D34                 mov     ebx, eax
.text:00410D36                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00410D3A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:00410D42                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00410D45                 call    GetFullPathNameA
.text:00410D4A                 sub     esp, 10h
.text:00410D4D                 mov     esi, eax
.text:00410D4F                 test    eax, eax
.text:00410D51                 jz      loc_410DFA
.text:00410D57                 cmp     eax, 104h
.text:00410D5C                 jle     short loc_410D6D
.text:00410D5E                 test    ebp, ebp
.text:00410D60                 jz      short loc_410DC9
.text:00410D62                 call    _errno
.text:00410D67                 mov     dword ptr [eax], 26h ; '&'
.text:00410D6D
.text:00410D6D loc_410D6D:                             ; CODE XREF: sub_410D00+5C↑j
.text:00410D6D                                         ; sub_410D00+F5↓j
.text:00410D6D                 call    _errno
.text:00410D72                 mov     edi, [eax]
.text:00410D74                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:00410D7C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:00410D7F                 call    sub_410E30
.text:00410D84                 test    eax, eax
.text:00410D86                 jnz     short loc_410DA0
.text:00410D88                 movzx   eax, byte ptr [esi+ebx-1]
.text:00410D8D                 cmp     al, 2Fh ; '/'
.text:00410D8F                 jz      short loc_410DA0
.text:00410D91                 cmp     al, 5Ch ; '\'
.text:00410D93                 jz      short loc_410DA0
.text:00410D95                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00410D99                 mov     byte ptr [esi+ebx+1], 0
.text:00410D9E                 mov     esi, esi
.text:00410DA0
.text:00410DA0 loc_410DA0:                             ; CODE XREF: sub_410D00+86↑j
.text:00410DA0                                         ; sub_410D00+8F↑j ...
.text:00410DA0                 call    _errno
.text:00410DA5                 mov     [eax], edi
.text:00410DA7                 mov     [esp+2Ch+Size], ebx
.text:00410DAA                 call    sub_40F020
.text:00410DAF                 test    ebp, ebp
.text:00410DB1                 mov     eax, ebx
.text:00410DB3                 jz      short loc_410DC1
.text:00410DB5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00410DB9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:00410DBC                 call    strcpy
.text:00410DC1
.text:00410DC1 loc_410DC1:                             ; CODE XREF: sub_410D00+B3↑j
.text:00410DC1                                         ; sub_410D00+10A↓j
.text:00410DC1                 add     esp, 1Ch
.text:00410DC4                 pop     ebx
.text:00410DC5                 pop     esi
.text:00410DC6                 pop     edi
.text:00410DC7                 pop     ebp
.text:00410DC8                 retn
.text:00410DC9 ; ---------------------------------------------------------------------------
.text:00410DC9
.text:00410DC9 loc_410DC9:                             ; CODE XREF: sub_410D00+60↑j
.text:00410DC9                 mov     [esp+2Ch+Size], ebx ; Block
.text:00410DCC                 lea     ecx, [eax+2]
.text:00410DCF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00410DD3                 call    realloc
.text:00410DD8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00410DDC                 lea     edx, [esp+2Ch+FilePart]
.text:00410DE0                 mov     ebx, eax
.text:00410DE2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00410DE6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:00410DEA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00410DED                 call    GetFullPathNameA
.text:00410DF2                 sub     esp, 10h
.text:00410DF5                 jmp     loc_410D6D
.text:00410DFA ; ---------------------------------------------------------------------------
.text:00410DFA
.text:00410DFA loc_410DFA:                             ; CODE XREF: sub_410D00+51↑j
.text:00410DFA                 call    sub_410C90
.text:00410DFF                 mov     esi, eax
.text:00410E01                 call    _errno
.text:00410E06                 mov     [eax], esi
.text:00410E08
.text:00410E08 loc_410E08:                             ; CODE XREF: sub_410D00+117↓j
.text:00410E08                                         ; sub_410D00+124↓j
.text:00410E08                 xor     eax, eax
.text:00410E0A                 jmp     short loc_410DC1
.text:00410E0C ; ---------------------------------------------------------------------------
.text:00410E0C
.text:00410E0C loc_410E0C:                             ; CODE XREF: sub_410D00+1A↑j
.text:00410E0C                 call    _errno
.text:00410E11                 mov     dword ptr [eax], 2
.text:00410E17                 jmp     short loc_410E08
.text:00410E19 ; ---------------------------------------------------------------------------
.text:00410E19
.text:00410E19 loc_410E19:                             ; CODE XREF: sub_410D00+11↑j
.text:00410E19                 call    _errno
.text:00410E1E                 mov     dword ptr [eax], 16h
.text:00410E24                 jmp     short loc_410E08
.text:00410E24 sub_410D00      endp
.text:00410E24
.text:00410E24 ; ---------------------------------------------------------------------------
.text:00410E26                 align 10h
.text:00410E30
.text:00410E30 ; =============== S U B R O U T I N E =======================================
.text:00410E30
.text:00410E30
.text:00410E30 ; int __cdecl sub_410E30(LPCSTR lpFileName, int)
.text:00410E30 sub_410E30      proc near               ; CODE XREF: sub_412990-3E2D↑p
.text:00410E30                                         ; .text:0040F002↑p ...
.text:00410E30
.text:00410E30 uMode           = dword ptr -1Ch
.text:00410E30 var_10          = dword ptr -10h
.text:00410E30 var_C           = dword ptr -0Ch
.text:00410E30 var_8           = dword ptr -8
.text:00410E30 var_4           = dword ptr -4
.text:00410E30 lpFileName      = dword ptr  4
.text:00410E30 arg_4           = dword ptr  8
.text:00410E30
.text:00410E30                 sub     esp, 1Ch
.text:00410E33                 mov     [esp+1Ch+var_10], ebx
.text:00410E37                 mov     ebx, [esp+1Ch+lpFileName]
.text:00410E3B                 mov     [esp+1Ch+var_4], ebp
.text:00410E3F                 xor     ebp, ebp
.text:00410E41                 test    ebx, ebx
.text:00410E43                 mov     [esp+1Ch+var_C], esi
.text:00410E47                 mov     esi, [esp+1Ch+arg_4]
.text:00410E4B                 mov     [esp+1Ch+var_8], edi
.text:00410E4F                 jz      short loc_410E59
.text:00410E51                 test    esi, 0FFFFFFE8h
.text:00410E57                 jz      short loc_410E80
.text:00410E59
.text:00410E59 loc_410E59:                             ; CODE XREF: sub_410E30+1F↑j
.text:00410E59                 call    _errno
.text:00410E5E                 mov     dword ptr [eax], 16h
.text:00410E64
.text:00410E64 loc_410E64:                             ; CODE XREF: sub_410E30+B1↓j
.text:00410E64                 mov     eax, 0FFFFFFFFh
.text:00410E69
.text:00410E69 loc_410E69:                             ; CODE XREF: sub_410E30+86↓j
.text:00410E69                                         ; sub_410E30+A4↓j
.text:00410E69                 mov     ebx, [esp+1Ch+var_10]
.text:00410E6D                 mov     esi, [esp+1Ch+var_C]
.text:00410E71                 mov     edi, [esp+1Ch+var_8]
.text:00410E75                 mov     ebp, [esp+1Ch+var_4]
.text:00410E79                 add     esp, 1Ch
.text:00410E7C                 retn
.text:00410E7C ; ---------------------------------------------------------------------------
.text:00410E7D                 align 10h
.text:00410E80
.text:00410E80 loc_410E80:                             ; CODE XREF: sub_410E30+27↑j
.text:00410E80                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00410E87                 call    SetErrorMode
.text:00410E8C                 sub     esp, 4
.text:00410E8F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00410E92                 call    GetFileAttributesA
.text:00410E97                 sub     esp, 4
.text:00410E9A                 mov     edi, eax
.text:00410E9C                 cmp     eax, 0FFFFFFFFh
.text:00410E9F                 jz      short loc_410EE3
.text:00410EA1
.text:00410EA1 loc_410EA1:                             ; CODE XREF: sub_410E30+C6↓j
.text:00410EA1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00410EA8                 call    SetErrorMode
.text:00410EAD                 sub     esp, 4
.text:00410EB0                 mov     eax, 0FFFFFFFFh
.text:00410EB5                 inc     ebp
.text:00410EB6                 jz      short loc_410E69
.text:00410EB8                 test    esi, 10h
.text:00410EBE                 jz      short loc_410EC8
.text:00410EC0                 test    edi, 10h
.text:00410EC6                 jz      short loc_410ED6
.text:00410EC8
.text:00410EC8 loc_410EC8:                             ; CODE XREF: sub_410E30+8E↑j
.text:00410EC8                 and     esi, 2
.text:00410ECB                 jz      short loc_410ED2
.text:00410ECD                 and     edi, 1
.text:00410ED0                 jnz     short loc_410ED6
.text:00410ED2
.text:00410ED2 loc_410ED2:                             ; CODE XREF: sub_410E30+9B↑j
.text:00410ED2                 xor     eax, eax
.text:00410ED4                 jmp     short loc_410E69
.text:00410ED6 ; ---------------------------------------------------------------------------
.text:00410ED6
.text:00410ED6 loc_410ED6:                             ; CODE XREF: sub_410E30+96↑j
.text:00410ED6                                         ; sub_410E30+A0↑j
.text:00410ED6                 call    _errno
.text:00410EDB                 mov     dword ptr [eax], 0Dh
.text:00410EE1                 jmp     short loc_410E64
.text:00410EE3 ; ---------------------------------------------------------------------------
.text:00410EE3
.text:00410EE3 loc_410EE3:                             ; CODE XREF: sub_410E30+6F↑j
.text:00410EE3                 call    sub_410C90
.text:00410EE8                 mov     ebp, eax
.text:00410EEA                 call    _errno
.text:00410EEF                 mov     [eax], ebp
.text:00410EF1                 mov     ebp, 0FFFFFFFFh
.text:00410EF6                 jmp     short loc_410EA1
.text:00410EF6 sub_410E30      endp
.text:00410EF6
.text:00410EF6 ; ---------------------------------------------------------------------------
.text:00410EF8                 align 10h
.text:00410F00 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0041111F↓o
.text:00410F0C aLu             db '%lu',0              ; DATA XREF: .text:0041112F↓o
.text:00410F10 asc_410F10      db ' ',0                ; DATA XREF: .text:loc_411218↓o
.text:00410F12                 align 10h
.text:00410F20 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00410F20                                         ; DATA XREF: .text:0041124F↓o
.text:00410F40 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_41125D↓o
.text:00410F4C aServer         db ' Server',0          ; DATA XREF: .text:00411286↓o
.text:00410F4C                                         ; .text:loc_4113FE↓o
.text:00410F54 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_411298↓o
.text:00410F65 aDatacenterServ db ' Datacenter Server',0
.text:00410F65                                         ; DATA XREF: .text:loc_4112A2↓o
.text:00410F78 aStandardEditio db ' Standard Edition',0
.text:00410F78                                         ; DATA XREF: .text:004112CA↓o
.text:00410F8A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_4112D4↓o
.text:00410F97 aEnterpriseEdit db ' Enterprise Edition',0
.text:00410F97                                         ; DATA XREF: .text:loc_4112DE↓o
.text:00410FAB aDatacenterEdit db ' Datacenter Edition',0
.text:00410FAB                                         ; DATA XREF: .text:loc_4112E8↓o
.text:00410FBF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:004112FB↓o
.text:00410FCD aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_411305↓o
.text:00410FCD                                         ; .text:loc_411410↓o
.text:00410FDB                 align 10h
.text:00410FE0 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00410FE0                                         ; DATA XREF: .text:00411332↓o
.text:00411010 aProducttype    db 'ProductType',0      ; DATA XREF: .text:00411379↓o
.text:0041101C aWinnt          db 'WINNT',0            ; DATA XREF: .text:004113B4↓o
.text:00411022 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:004113CB↓o
.text:0041102B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:004113E2↓o
.text:00411034                 align 10h
.text:00411040 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00411040                                         ; DATA XREF: .text:00411557↓o
.text:00411063                 align 20h
.text:00411080 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:00411080                                         ; DATA XREF: .text:004115B6↓o
.text:004110A6 ; ---------------------------------------------------------------------------
.text:004110A6
.text:004110A6 loc_4110A6:                             ; DATA XREF: .text:loc_411621↓o
.text:004110A6                 and     [ebx+45h], dl
.text:004110A9                 add     [eax], ah
.text:004110AB                 push    ebx
.text:004110AC                 push    eax
.text:004110AD                 xor     [eax], eax
.text:004110AF
.text:004110AF loc_4110AF:                             ; DATA XREF: .text:loc_41169B↓o
.text:004110AF                 and     [edi+53h], cl
.text:004110B2                 push    edx
.text:004110B3                 xor     al, [eax]
.text:004110B5                 lea     esi, [esi+0]
.text:004110B9                 lea     edi, [edi+0]
.text:004110C0                 push    edi
.text:004110C1                 push    esi
.text:004110C2                 push    ebx
.text:004110C3                 sub     esp, 130h
.text:004110C9                 mov     ebx, [esp+140h]
.text:004110D0                 call    sub_4117D0
.text:004110D5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004110DA                 cmp     eax, 1
.text:004110DD                 jz      loc_411580
.text:004110E3                 cmp     eax, 1
.text:004110E6                 jb      loc_411556
.text:004110EC                 cmp     eax, 2
.text:004110EF                 jz      loc_4111A0
.text:004110F5                 cmp     eax, 3
.text:004110F8                 jz      short loc_41115F
.text:004110FA                 lea     esi, [esi+0]
.text:00411100
.text:00411100 loc_411100:                             ; CODE XREF: .text:00411195↓j
.text:00411100                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00411106                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041110C
.text:0041110C loc_41110C:                             ; CODE XREF: .text:0041159F↓j
.text:0041110C                 mov     [esp+10h], edx
.text:00411110                 mov     ebx, [esp+144h]
.text:00411117                 mov     [esp+0Ch], ecx
.text:0041111B                 mov     [esp+8], eax
.text:0041111F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00411127                 mov     [esp], ebx
.text:0041112A                 call    sprintf
.text:0041112F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00411137                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0041113D                 mov     ecx, [esp+148h]
.text:00411144                 mov     [esp+8], edi
.text:00411148                 mov     [esp], ecx
.text:0041114B                 call    sprintf
.text:00411150                 mov     eax, 1
.text:00411155
.text:00411155 loc_411155:                             ; CODE XREF: .text:0041134F↓j
.text:00411155                                         ; .text:0041139C↓j
.text:00411155                 add     esp, 130h
.text:0041115B                 pop     ebx
.text:0041115C                 pop     esi
.text:0041115D                 pop     edi
.text:0041115E                 retn
.text:0041115F ; ---------------------------------------------------------------------------
.text:0041115F
.text:0041115F loc_41115F:                             ; CODE XREF: .text:004110F8↑j
.text:0041115F                 mov     dword ptr [ebx], 7263694Dh
.text:00411165                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041116C                 mov     dword ptr [ebx+8], 69572074h
.text:00411173                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041117A                 mov     dword ptr [ebx+10h], 45432073h
.text:00411181                 mov     word ptr [ebx+14h], 20h ; ' '
.text:00411187                 mov     esi, esi
.text:00411189                 lea     edi, [edi+0]
.text:00411190
.text:00411190 loc_411190:                             ; CODE XREF: .text:00411238↓j
.text:00411190                                         ; .text:00411579↓j ...
.text:00411190                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00411195                 jmp     loc_411100
.text:00411195 ; ---------------------------------------------------------------------------
.text:0041119A                 align 10h
.text:004111A0
.text:004111A0 loc_4111A0:                             ; CODE XREF: .text:004110EF↑j
.text:004111A0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:004111A6                 cmp     edx, 3
.text:004111A9                 mov     eax, edx
.text:004111AB                 jz      loc_411515
.text:004111B1
.text:004111B1 loc_4111B1:                             ; CODE XREF: .text:0041151C↓j
.text:004111B1                 cmp     eax, 4
.text:004111B4                 jz      loc_4114D5
.text:004111BA
.text:004111BA loc_4111BA:                             ; CODE XREF: .text:004114DD↓j
.text:004111BA                 cmp     eax, 4
.text:004111BD                 ja      loc_411422
.text:004111C3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004111C9                 test    ecx, ecx
.text:004111CB                 jnz     loc_411422
.text:004111D1                 mov     dword ptr [ebx], 7263694Dh
.text:004111D7                 mov     dword ptr [ebx+4], 666F736Fh
.text:004111DE                 mov     dword ptr [ebx+8], 69572074h
.text:004111E5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004111EC                 mov     dword ptr [ebx+10h], 544E2073h
.text:004111F3
.text:004111F3 loc_4111F3:                             ; CODE XREF: .text:00411495↓j
.text:004111F3                 mov     byte ptr [ebx+14h], 0
.text:004111F7
.text:004111F7 loc_4111F7:                             ; CODE XREF: .text:00411425↓j
.text:004111F7                                         ; .text:0041143C↓j ...
.text:004111F7                 mov     esi, dword_417110
.text:004111FD                 test    esi, esi
.text:004111FF                 jz      loc_411312
.text:00411205                 movzx   eax, ds:byte_41897A
.text:0041120C                 cmp     al, 1
.text:0041120E                 jz      loc_4112F2
.text:00411214                 cmp     al, 3
.text:00411216                 jz      short loc_41123D
.text:00411218
.text:00411218 loc_411218:                             ; CODE XREF: .text:0041125B↓j
.text:00411218                                         ; .text:00411296↓j ...
.text:00411218                 mov     dword ptr [esp+4], offset asc_410F10 ; " "
.text:00411220                 mov     [esp], ebx
.text:00411223                 call    strcat
.text:00411228                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00411230                 mov     [esp], ebx
.text:00411233                 call    strcat
.text:00411238                 jmp     loc_411190
.text:0041123D ; ---------------------------------------------------------------------------
.text:0041123D
.text:0041123D loc_41123D:                             ; CODE XREF: .text:00411216↑j
.text:0041123D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00411244                 jz      short loc_411266
.text:00411246
.text:00411246 loc_411246:                             ; CODE XREF: .text:00411272↓j
.text:00411246                 test    byte ptr ds:word_418978, 2
.text:0041124D                 jz      short loc_41125D
.text:0041124F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00411256
.text:00411256 loc_411256:                             ; CODE XREF: .text:00411264↓j
.text:00411256                 call    printf
.text:0041125B                 jmp     short loc_411218
.text:0041125D ; ---------------------------------------------------------------------------
.text:0041125D
.text:0041125D loc_41125D:                             ; CODE XREF: .text:0041124D↑j
.text:0041125D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:00411264                 jmp     short loc_411256
.text:00411266 ; ---------------------------------------------------------------------------
.text:00411266
.text:00411266 loc_411266:                             ; CODE XREF: .text:00411244↑j
.text:00411266                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041126B                 cmp     eax, 2
.text:0041126E                 jz      short loc_4112B0
.text:00411270                 test    eax, eax
.text:00411272                 jnz     short loc_411246
.text:00411274                 cmp     byte ptr ds:word_418978, 0
.text:0041127B                 js      short loc_4112A2
.text:0041127D                 test    byte ptr ds:word_418978, 2
.text:00411284                 jnz     short loc_411298
.text:00411286                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0041128E
.text:0041128E loc_41128E:                             ; CODE XREF: .text:004112A0↓j
.text:0041128E                                         ; .text:004112AA↓j ...
.text:0041128E                 mov     [esp], ebx
.text:00411291                 call    strcat
.text:00411296                 jmp     short loc_411218
.text:00411298 ; ---------------------------------------------------------------------------
.text:00411298
.text:00411298 loc_411298:                             ; CODE XREF: .text:00411284↑j
.text:00411298                                         ; .text:004113F9↓j
.text:00411298                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:004112A0                 jmp     short loc_41128E
.text:004112A2 ; ---------------------------------------------------------------------------
.text:004112A2
.text:004112A2 loc_4112A2:                             ; CODE XREF: .text:0041127B↑j
.text:004112A2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:004112AA                 jmp     short loc_41128E
.text:004112AA ; ---------------------------------------------------------------------------
.text:004112AC                 align 10h
.text:004112B0
.text:004112B0 loc_4112B0:                             ; CODE XREF: .text:0041126E↑j
.text:004112B0                 cmp     byte ptr ds:word_418978, 0
.text:004112B7                 js      short loc_4112E8
.text:004112B9                 movzx   eax, ds:word_418978
.text:004112C0                 test    al, 2
.text:004112C2                 jnz     short loc_4112DE
.text:004112C4                 cmp     ax, 400h
.text:004112C8                 jz      short loc_4112D4
.text:004112CA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:004112D2                 jmp     short loc_41128E
.text:004112D4 ; ---------------------------------------------------------------------------
.text:004112D4
.text:004112D4 loc_4112D4:                             ; CODE XREF: .text:004112C8↑j
.text:004112D4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:004112DC                 jmp     short loc_41128E
.text:004112DE ; ---------------------------------------------------------------------------
.text:004112DE
.text:004112DE loc_4112DE:                             ; CODE XREF: .text:004112C2↑j
.text:004112DE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:004112E6                 jmp     short loc_41128E
.text:004112E8 ; ---------------------------------------------------------------------------
.text:004112E8
.text:004112E8 loc_4112E8:                             ; CODE XREF: .text:004112B7↑j
.text:004112E8                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:004112F0                 jmp     short loc_41128E
.text:004112F2 ; ---------------------------------------------------------------------------
.text:004112F2
.text:004112F2 loc_4112F2:                             ; CODE XREF: .text:0041120E↑j
.text:004112F2                 test    byte ptr ds:word_418978+1, 2
.text:004112F9                 jz      short loc_411305
.text:004112FB                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00411303                 jmp     short loc_41128E
.text:00411305 ; ---------------------------------------------------------------------------
.text:00411305
.text:00411305 loc_411305:                             ; CODE XREF: .text:004112F9↑j
.text:00411305                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0041130D                 jmp     loc_41128E
.text:00411312 ; ---------------------------------------------------------------------------
.text:00411312
.text:00411312 loc_411312:                             ; CODE XREF: .text:004111FF↑j
.text:00411312                 mov     dword ptr [esp+28h], 0FFh
.text:0041131A                 lea     edx, [esp+2Ch]
.text:0041131E                 mov     [esp+10h], edx
.text:00411322                 mov     dword ptr [esp+0Ch], 1
.text:0041132A                 mov     dword ptr [esp+8], 0
.text:00411332                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0041133A                 mov     dword ptr [esp], 80000002h
.text:00411341                 call    RegOpenKeyExA
.text:00411346                 mov     edi, eax
.text:00411348                 sub     esp, 14h
.text:0041134B                 xor     eax, eax
.text:0041134D                 test    edi, edi
.text:0041134F                 jnz     loc_411155
.text:00411355                 mov     dword ptr [esp+0Ch], 0
.text:0041135D                 mov     edi, [esp+2Ch]
.text:00411361                 lea     esi, [esp+28h]
.text:00411365                 mov     [esp+14h], esi
.text:00411369                 lea     esi, [esp+30h]
.text:0041136D                 mov     [esp+10h], esi
.text:00411371                 mov     dword ptr [esp+8], 0
.text:00411379                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:00411381                 mov     [esp], edi
.text:00411384                 call    RegQueryValueExA
.text:00411389                 sub     esp, 18h
.text:0041138C                 test    eax, eax
.text:0041138E                 jnz     short loc_41139A
.text:00411390                 cmp     dword ptr [esp+28h], 0FFh
.text:00411398                 jbe     short loc_4113A1
.text:0041139A
.text:0041139A loc_41139A:                             ; CODE XREF: .text:0041138E↑j
.text:0041139A                 xor     eax, eax
.text:0041139C                 jmp     loc_411155
.text:004113A1 ; ---------------------------------------------------------------------------
.text:004113A1
.text:004113A1 loc_4113A1:                             ; CODE XREF: .text:00411398↑j
.text:004113A1                 mov     edx, [esp+2Ch]
.text:004113A5                 mov     [esp], edx
.text:004113A8                 call    RegCloseKey
.text:004113AD                 sub     esp, 4
.text:004113B0                 mov     [esp+4], esi
.text:004113B4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:004113BB                 call    lstrcmpiA
.text:004113C0                 sub     esp, 8
.text:004113C3                 test    eax, eax
.text:004113C5                 jz      short loc_411410
.text:004113C7
.text:004113C7 loc_4113C7:                             ; CODE XREF: .text:00411420↓j
.text:004113C7                 mov     [esp+4], esi
.text:004113CB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:004113D2                 call    lstrcmpiA
.text:004113D7                 sub     esp, 8
.text:004113DA                 test    eax, eax
.text:004113DC                 jz      short loc_4113FE
.text:004113DE
.text:004113DE loc_4113DE:                             ; CODE XREF: .text:0041140E↓j
.text:004113DE                 mov     [esp+4], esi
.text:004113E2                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:004113E9                 call    lstrcmpiA
.text:004113EE                 sub     esp, 8
.text:004113F1                 test    eax, eax
.text:004113F3                 jnz     loc_411218
.text:004113F9                 jmp     loc_411298
.text:004113FE ; ---------------------------------------------------------------------------
.text:004113FE
.text:004113FE loc_4113FE:                             ; CODE XREF: .text:004113DC↑j
.text:004113FE                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00411406                 mov     [esp], ebx
.text:00411409                 call    strcat
.text:0041140E                 jmp     short loc_4113DE
.text:00411410 ; ---------------------------------------------------------------------------
.text:00411410
.text:00411410 loc_411410:                             ; CODE XREF: .text:004113C5↑j
.text:00411410                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00411418                 mov     [esp], ebx
.text:0041141B                 call    strcat
.text:00411420                 jmp     short loc_4113C7
.text:00411422 ; ---------------------------------------------------------------------------
.text:00411422
.text:00411422 loc_411422:                             ; CODE XREF: .text:004111BD↑j
.text:00411422                                         ; .text:004111CB↑j
.text:00411422                 cmp     eax, 5
.text:00411425                 jnz     loc_4111F7
.text:0041142B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00411430                 cmp     eax, 2
.text:00411433                 jz      short loc_41149A
.text:00411435                 cmp     eax, 1
.text:00411438                 jz      short loc_411473
.text:0041143A                 test    eax, eax
.text:0041143C                 jnz     loc_4111F7
.text:00411442                 mov     dword ptr [ebx], 7263694Dh
.text:00411448                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041144F                 mov     dword ptr [ebx+8], 69572074h
.text:00411456                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041145D                 mov     dword ptr [ebx+10h], 30322073h
.text:00411464                 mov     word ptr [ebx+14h], 3030h
.text:0041146A                 mov     byte ptr [ebx+16h], 0
.text:0041146E                 jmp     loc_4111F7
.text:00411473 ; ---------------------------------------------------------------------------
.text:00411473
.text:00411473 loc_411473:                             ; CODE XREF: .text:00411438↑j
.text:00411473                 mov     dword ptr [ebx], 7263694Dh
.text:00411479                 mov     dword ptr [ebx+4], 666F736Fh
.text:00411480                 mov     dword ptr [ebx+8], 69572074h
.text:00411487                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041148E                 mov     dword ptr [ebx+10h], 50582073h
.text:00411495                 jmp     loc_4111F3
.text:0041149A ; ---------------------------------------------------------------------------
.text:0041149A
.text:0041149A loc_41149A:                             ; CODE XREF: .text:00411433↑j
.text:0041149A                 mov     dword ptr [ebx], 7263694Dh
.text:004114A0                 mov     dword ptr [ebx+4], 666F736Fh
.text:004114A7                 mov     dword ptr [ebx+8], 69572074h
.text:004114AE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004114B5                 mov     dword ptr [ebx+10h], 65532073h
.text:004114BC                 mov     dword ptr [ebx+14h], 72657672h
.text:004114C3                 mov     dword ptr [ebx+18h], 30303220h
.text:004114CA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:004114D0                 jmp     loc_4111F7
.text:004114D5 ; ---------------------------------------------------------------------------
.text:004114D5
.text:004114D5 loc_4114D5:                             ; CODE XREF: .text:004111B4↑j
.text:004114D5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004114DB                 test    edx, edx
.text:004114DD                 jnz     loc_4111BA
.text:004114E3                 mov     dword ptr [ebx], 7263694Dh
.text:004114E9                 mov     dword ptr [ebx+4], 666F736Fh
.text:004114F0                 mov     dword ptr [ebx+8], 69572074h
.text:004114F7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004114FE                 mov     dword ptr [ebx+10h], 544E2073h
.text:00411505                 mov     dword ptr [ebx+14h], 302E3420h
.text:0041150C                 mov     byte ptr [ebx+18h], 0
.text:00411510                 jmp     loc_4111F7
.text:00411515 ; ---------------------------------------------------------------------------
.text:00411515
.text:00411515 loc_411515:                             ; CODE XREF: .text:004111AB↑j
.text:00411515                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0041151C                 jnz     loc_4111B1
.text:00411522                 mov     dword ptr [ebx], 7263694Dh
.text:00411528                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041152F                 mov     dword ptr [ebx+8], 69572074h
.text:00411536                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041153D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00411544                 mov     dword ptr [ebx+14h], 352E3320h
.text:0041154B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00411551                 jmp     loc_4111F7
.text:00411556 ; ---------------------------------------------------------------------------
.text:00411556
.text:00411556 loc_411556:                             ; CODE XREF: .text:004110E6↑j
.text:00411556                 cld
.text:00411557                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0041155C                 mov     ecx, 8
.text:00411561                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00411568                 mov     edi, ebx
.text:0041156A                 rep movsd
.text:0041156C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00411573                 mov     [edi+2], dl
.text:00411576                 mov     [edi], si
.text:00411579                 jmp     loc_411190
.text:00411579 ; ---------------------------------------------------------------------------
.text:0041157E                 align 10h
.text:00411580
.text:00411580 loc_411580:                             ; CODE XREF: .text:004110DD↑j
.text:00411580                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00411586                 cmp     ecx, 4
.text:00411589                 jz      loc_411640
.text:0041158F
.text:0041158F loc_41158F:                             ; CODE XREF: .text:00411696↓j
.text:0041158F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00411595
.text:00411595 loc_411595:                             ; CODE XREF: .text:00411648↓j
.text:00411595                 cmp     ecx, 4
.text:00411598                 jz      short loc_4115A4
.text:0041159A
.text:0041159A loc_41159A:                             ; CODE XREF: .text:004115AC↓j
.text:0041159A                                         ; .text:004115B1↓j
.text:0041159A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041159F                 jmp     loc_41110C
.text:004115A4 ; ---------------------------------------------------------------------------
.text:004115A4
.text:004115A4 loc_4115A4:                             ; CODE XREF: .text:00411598↑j
.text:004115A4                 cmp     edx, 0Ah
.text:004115A7                 jz      short loc_4115D1
.text:004115A9
.text:004115A9 loc_4115A9:                             ; CODE XREF: .text:0041161F↓j
.text:004115A9                 cmp     ecx, 4
.text:004115AC                 jnz     short loc_41159A
.text:004115AE                 cmp     edx, 5Ah ; 'Z'
.text:004115B1                 jnz     short loc_41159A
.text:004115B3                 cld
.text:004115B4                 mov     edi, ebx
.text:004115B6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:004115BB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:004115C2                 mov     ecx, 9
.text:004115C7                 rep movsd
.text:004115C9                 mov     [edi], bx
.text:004115CC                 jmp     loc_411190
.text:004115D1 ; ---------------------------------------------------------------------------
.text:004115D1
.text:004115D1 loc_4115D1:                             ; CODE XREF: .text:004115A7↑j
.text:004115D1                 mov     dword ptr [ebx], 7263694Dh
.text:004115D7                 mov     dword ptr [ebx+4], 666F736Fh
.text:004115DE                 mov     dword ptr [ebx+8], 69572074h
.text:004115E5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004115EC                 mov     dword ptr [ebx+10h], 38392073h
.text:004115F3                 mov     byte ptr [ebx+14h], 0
.text:004115F7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004115FD                 lea     edi, [edx-7CFh]
.text:00411603                 cmp     edi, 0B7h ; '·'
.text:00411609                 jbe     short loc_411633
.text:0041160B                 cmp     edx, 886h
.text:00411611                 ja      short loc_411621
.text:00411613
.text:00411613 loc_411613:                             ; CODE XREF: .text:00411631↓j
.text:00411613                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00411619                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041161F                 jmp     short loc_4115A9
.text:00411621 ; ---------------------------------------------------------------------------
.text:00411621
.text:00411621 loc_411621:                             ; CODE XREF: .text:00411611↑j
.text:00411621                 mov     dword ptr [esp+4], offset loc_4110A6
.text:00411629
.text:00411629 loc_411629:                             ; CODE XREF: .text:0041163B↓j
.text:00411629                 mov     [esp], ebx
.text:0041162C                 call    strcat
.text:00411631                 jmp     short loc_411613
.text:00411633 ; ---------------------------------------------------------------------------
.text:00411633
.text:00411633 loc_411633:                             ; CODE XREF: .text:00411609↑j
.text:00411633                 mov     dword ptr [esp+4], 4110AAh
.text:0041163B                 jmp     short loc_411629
.text:0041163B ; ---------------------------------------------------------------------------
.text:0041163D                 align 10h
.text:00411640
.text:00411640 loc_411640:                             ; CODE XREF: .text:00411589↑j
.text:00411640                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00411646                 test    edx, edx
.text:00411648                 jnz     loc_411595
.text:0041164E                 mov     dword ptr [ebx], 7263694Dh
.text:00411654                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041165B                 mov     dword ptr [ebx+8], 69572074h
.text:00411662                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00411669                 mov     dword ptr [ebx+10h], 35392073h
.text:00411670                 mov     byte ptr [ebx+14h], 0
.text:00411674                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041167A                 lea     ecx, [edx-3B7h]
.text:00411680                 cmp     ecx, 81h
.text:00411686                 jbe     short loc_4116AD
.text:00411688                 cmp     edx, 438h
.text:0041168E                 ja      short loc_41169B
.text:00411690
.text:00411690 loc_411690:                             ; CODE XREF: .text:004116AB↓j
.text:00411690                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00411696                 jmp     loc_41158F
.text:0041169B ; ---------------------------------------------------------------------------
.text:0041169B
.text:0041169B loc_41169B:                             ; CODE XREF: .text:0041168E↑j
.text:0041169B                 mov     dword ptr [esp+4], offset loc_4110AF
.text:004116A3
.text:004116A3 loc_4116A3:                             ; CODE XREF: .text:004116B5↓j
.text:004116A3                 mov     [esp], ebx
.text:004116A6                 call    strcat
.text:004116AB                 jmp     short loc_411690
.text:004116AD ; ---------------------------------------------------------------------------
.text:004116AD
.text:004116AD loc_4116AD:                             ; CODE XREF: .text:00411686↑j
.text:004116AD                 mov     dword ptr [esp+4], 4110AAh
.text:004116B5                 jmp     short loc_4116A3
.text:004116B5 ; ---------------------------------------------------------------------------
.text:004116B7                 align 10h
.text:004116C0
.text:004116C0 ; =============== S U B R O U T I N E =======================================
.text:004116C0
.text:004116C0
.text:004116C0 sub_4116C0      proc near               ; CODE XREF: .text:0040FA9E↑p
.text:004116C0                                         ; sub_40FF20+12A↑p
.text:004116C0                 sub     esp, 0Ch
.text:004116C3                 call    sub_4117D0
.text:004116C8                 mov     eax, ds:dword_4188D0
.text:004116CD                 add     esp, 0Ch
.text:004116D0                 retn
.text:004116D0 sub_4116C0      endp
.text:004116D0
.text:004116D1 ; ---------------------------------------------------------------------------
.text:004116D1                 jmp     short loc_4116E0
.text:004116D1 ; ---------------------------------------------------------------------------
.text:004116D3                 align 10h
.text:004116E0
.text:004116E0 loc_4116E0:                             ; CODE XREF: .text:004116D1↑j
.text:004116E0                 sub     esp, 0Ch
.text:004116E3                 call    sub_4117D0
.text:004116E8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004116ED                 add     esp, 0Ch
.text:004116F0                 retn
.text:004116F1 ; ---------------------------------------------------------------------------
.text:004116F1                 jmp     short loc_411700
.text:004116F1 ; ---------------------------------------------------------------------------
.text:004116F3                 align 10h
.text:00411700
.text:00411700 loc_411700:                             ; CODE XREF: .text:004116F1↑j
.text:00411700                 sub     esp, 0Ch
.text:00411703                 call    sub_4117D0
.text:00411708                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0041170D                 add     esp, 0Ch
.text:00411710                 retn
.text:00411711 ; ---------------------------------------------------------------------------
.text:00411711                 jmp     short loc_411720
.text:00411711 ; ---------------------------------------------------------------------------
.text:00411713                 align 10h
.text:00411720
.text:00411720 loc_411720:                             ; CODE XREF: .text:00411711↑j
.text:00411720                 sub     esp, 0Ch
.text:00411723                 call    sub_4117D0
.text:00411728                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041172D                 add     esp, 0Ch
.text:00411730                 retn
.text:00411731 ; ---------------------------------------------------------------------------
.text:00411731                 jmp     short loc_411740
.text:00411731 ; ---------------------------------------------------------------------------
.text:00411733                 align 10h
.text:00411740
.text:00411740 loc_411740:                             ; CODE XREF: .text:00411731↑j
.text:00411740                 sub     esp, 0Ch
.text:00411743                 call    GetVersion
.text:00411748                 shr     eax, 10h
.text:0041174B                 add     esp, 0Ch
.text:0041174E                 retn
.text:0041174E ; ---------------------------------------------------------------------------
.text:0041174F                 align 10h
.text:00411750                 sub     esp, 0Ch
.text:00411753                 call    sub_4117D0
.text:00411758                 xor     eax, eax
.text:0041175A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:00411761                 setz    al
.text:00411764                 add     esp, 0Ch
.text:00411767                 retn
.text:00411767 ; ---------------------------------------------------------------------------
.text:00411768                 align 10h
.text:00411770
.text:00411770 ; =============== S U B R O U T I N E =======================================
.text:00411770
.text:00411770
.text:00411770 sub_411770      proc near               ; CODE XREF: .text:loc_40F400↑p
.text:00411770                                         ; .text:loc_40FA84↑p ...
.text:00411770                 sub     esp, 0Ch
.text:00411773                 call    sub_4117D0
.text:00411778                 xor     eax, eax
.text:0041177A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00411781                 setz    al
.text:00411784                 add     esp, 0Ch
.text:00411787                 retn
.text:00411787 sub_411770      endp
.text:00411787
.text:00411787 ; ---------------------------------------------------------------------------
.text:00411788                 align 10h
.text:00411790                 sub     esp, 0Ch
.text:00411793                 call    sub_4117D0
.text:00411798                 xor     eax, eax
.text:0041179A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:004117A1                 setz    al
.text:004117A4                 add     esp, 0Ch
.text:004117A7                 retn
.text:004117A7 ; ---------------------------------------------------------------------------
.text:004117A8                 align 10h
.text:004117B0                 sub     esp, 0Ch
.text:004117B3                 call    sub_4117D0
.text:004117B8                 xor     eax, eax
.text:004117BA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:004117C1                 setz    al
.text:004117C4                 add     esp, 0Ch
.text:004117C7                 retn
.text:004117C7 ; ---------------------------------------------------------------------------
.text:004117C8                 align 10h
.text:004117D0
.text:004117D0 ; =============== S U B R O U T I N E =======================================
.text:004117D0
.text:004117D0
.text:004117D0 sub_4117D0      proc near               ; CODE XREF: .text:004110D0↑p
.text:004117D0                                         ; sub_4116C0+3↑p ...
.text:004117D0
.text:004117D0 lpVersionInformation= dword ptr -0BCh
.text:004117D0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:004117D0
.text:004117D0                 sub     esp, 0BCh
.text:004117D6                 mov     edx, ds:dword_418980
.text:004117DC                 test    edx, edx
.text:004117DE                 jz      short loc_4117F0
.text:004117E0
.text:004117E0 loc_4117E0:                             ; CODE XREF: sub_4117D0+7B↓j
.text:004117E0                 mov     edx, 1
.text:004117E5
.text:004117E5 loc_4117E5:                             ; CODE XREF: sub_4117D0+217↓j
.text:004117E5                 mov     eax, edx
.text:004117E7                 add     esp, 0BCh
.text:004117ED                 retn
.text:004117ED ; ---------------------------------------------------------------------------
.text:004117EE                 align 10h
.text:004117F0
.text:004117F0 loc_4117F0:                             ; CODE XREF: sub_4117D0+E↑j
.text:004117F0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:004117F7                 mov     edx, 9Ch ; 'œ'
.text:004117FC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00411802                 call    GetVersionExA
.text:00411807                 sub     esp, 4
.text:0041180A                 test    eax, eax
.text:0041180C                 jz      loc_4119C4
.text:00411812
.text:00411812 loc_411812:                             ; CODE XREF: sub_4117D0+245↓j
.text:00411812                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00411819                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041181E                 cmp     eax, 1
.text:00411821                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00411827                 jz      loc_411910
.text:0041182D                 cmp     eax, 1
.text:00411830                 jb      loc_411900
.text:00411836                 cmp     eax, 2
.text:00411839                 jz      short loc_41185A
.text:0041183B                 cmp     eax, 3
.text:0041183E                 jz      short loc_41184D
.text:00411840
.text:00411840 loc_411840:                             ; CODE XREF: sub_4117D0+88↓j
.text:00411840                                         ; sub_4117D0+C0↓j ...
.text:00411840                 mov     edx, 1
.text:00411845                 mov     ds:dword_418980, edx
.text:0041184B                 jmp     short loc_4117E0
.text:0041184D ; ---------------------------------------------------------------------------
.text:0041184D
.text:0041184D loc_41184D:                             ; CODE XREF: sub_4117D0+6E↑j
.text:0041184D                 mov     ecx, 17h
.text:00411852
.text:00411852 loc_411852:                             ; CODE XREF: sub_4117D0+1A7↓j
.text:00411852                 mov     ds:dword_4188D0, ecx
.text:00411858                 jmp     short loc_411840
.text:0041185A ; ---------------------------------------------------------------------------
.text:0041185A
.text:0041185A loc_41185A:                             ; CODE XREF: sub_4117D0+69↑j
.text:0041185A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0041185F                 cmp     eax, 3
.text:00411862                 jz      short loc_4118DB
.text:00411864                 cmp     eax, 4
.text:00411867                 jz      short loc_4118CA
.text:00411869
.text:00411869 loc_411869:                             ; CODE XREF: sub_4117D0+102↓j
.text:00411869                 cmp     eax, 4
.text:0041186C                 ja      short loc_411892
.text:0041186E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00411874                 test    ecx, ecx
.text:00411876                 jnz     short loc_411892
.text:00411878                 mov     edx, 1Eh
.text:0041187D
.text:0041187D loc_41187D:                             ; CODE XREF: sub_4117D0+DF↓j
.text:0041187D                 mov     ds:dword_4188D0, edx
.text:00411883
.text:00411883 loc_411883:                             ; CODE XREF: sub_4117D0+C5↓j
.text:00411883                                         ; sub_4117D0+D8↓j ...
.text:00411883                 movzx   ecx, ds:word_418974
.text:0041188A                 add     ds:dword_4188D0, ecx
.text:00411890                 jmp     short loc_411840
.text:00411892 ; ---------------------------------------------------------------------------
.text:00411892
.text:00411892 loc_411892:                             ; CODE XREF: sub_4117D0+9C↑j
.text:00411892                                         ; sub_4117D0+A6↑j
.text:00411892                 cmp     eax, 5
.text:00411895                 jnz     short loc_411883
.text:00411897                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041189C                 cmp     eax, 2
.text:0041189F                 jz      short loc_4118BE
.text:004118A1                 cmp     eax, 1
.text:004118A4                 jz      short loc_4118B1
.text:004118A6                 test    eax, eax
.text:004118A8                 jnz     short loc_411883
.text:004118AA                 mov     edx, 32h ; '2'
.text:004118AF                 jmp     short loc_41187D
.text:004118B1 ; ---------------------------------------------------------------------------
.text:004118B1
.text:004118B1 loc_4118B1:                             ; CODE XREF: sub_4117D0+D4↑j
.text:004118B1                 mov     ecx, 3Ch ; '<'
.text:004118B6
.text:004118B6 loc_4118B6:                             ; CODE XREF: sub_4117D0+122↓j
.text:004118B6                 mov     ds:dword_4188D0, ecx
.text:004118BC                 jmp     short loc_411883
.text:004118BE ; ---------------------------------------------------------------------------
.text:004118BE
.text:004118BE loc_4118BE:                             ; CODE XREF: sub_4117D0+CF↑j
.text:004118BE                 mov     eax, 46h ; 'F'
.text:004118C3
.text:004118C3 loc_4118C3:                             ; CODE XREF: sub_4117D0+109↓j
.text:004118C3                                         ; sub_4117D0+129↓j
.text:004118C3                 mov     ds:dword_4188D0, eax
.text:004118C8                 jmp     short loc_411883
.text:004118CA ; ---------------------------------------------------------------------------
.text:004118CA
.text:004118CA loc_4118CA:                             ; CODE XREF: sub_4117D0+97↑j
.text:004118CA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004118D0                 test    ecx, ecx
.text:004118D2                 jnz     short loc_411869
.text:004118D4                 mov     eax, 28h ; '('
.text:004118D9                 jmp     short loc_4118C3
.text:004118DB ; ---------------------------------------------------------------------------
.text:004118DB
.text:004118DB loc_4118DB:                             ; CODE XREF: sub_4117D0+92↑j
.text:004118DB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004118E0                 cmp     eax, 33h ; '3'
.text:004118E3                 jz      short loc_4118F4
.text:004118E5                 cmp     eax, 5
.text:004118E8                 setz    cl
.text:004118EB                 movzx   edx, cl
.text:004118EE                 lea     ecx, [edx+edx*4+1Eh]
.text:004118F2                 jmp     short loc_4118B6
.text:004118F4 ; ---------------------------------------------------------------------------
.text:004118F4
.text:004118F4 loc_4118F4:                             ; CODE XREF: sub_4117D0+113↑j
.text:004118F4                 mov     eax, 24h ; '$'
.text:004118F9                 jmp     short loc_4118C3
.text:004118F9 ; ---------------------------------------------------------------------------
.text:004118FB                 align 10h
.text:00411900
.text:00411900 loc_411900:                             ; CODE XREF: sub_4117D0+60↑j
.text:00411900                 mov     edx, 2
.text:00411905                 mov     ds:dword_4188D0, edx
.text:0041190B                 jmp     loc_411840
.text:00411910 ; ---------------------------------------------------------------------------
.text:00411910
.text:00411910 loc_411910:                             ; CODE XREF: sub_4117D0+57↑j
.text:00411910                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00411916                 cmp     ecx, 4
.text:00411919                 jnz     loc_411840
.text:0041191F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00411924                 test    eax, eax
.text:00411926                 jnz     short loc_41194A
.text:00411928                 mov     eax, 0Ah
.text:0041192D                 mov     ds:dword_4188D0, eax
.text:00411932                 lea     eax, [edx-3B7h]
.text:00411938                 cmp     eax, 81h
.text:0041193D                 ja      short loc_4119B5
.text:0041193F                 mov     edx, 0Bh
.text:00411944
.text:00411944 loc_411944:                             ; CODE XREF: sub_4117D0+1F2↓j
.text:00411944                 mov     ds:dword_4188D0, edx
.text:0041194A
.text:0041194A loc_41194A:                             ; CODE XREF: sub_4117D0+156↑j
.text:0041194A                                         ; sub_4117D0+1EB↓j
.text:0041194A                 cmp     ecx, 4
.text:0041194D                 jnz     loc_411840
.text:00411953                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0041195A                 jz      short loc_41197C
.text:0041195C
.text:0041195C loc_41195C:                             ; CODE XREF: sub_4117D0+1D4↓j
.text:0041195C                                         ; sub_4117D0+1DC↓j
.text:0041195C                 cmp     ecx, 4
.text:0041195F                 jnz     loc_411840
.text:00411965                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0041196C                 jnz     loc_411840
.text:00411972                 mov     ecx, 12h
.text:00411977                 jmp     loc_411852
.text:0041197C ; ---------------------------------------------------------------------------
.text:0041197C
.text:0041197C loc_41197C:                             ; CODE XREF: sub_4117D0+18A↑j
.text:0041197C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00411982                 mov     eax, 0Eh
.text:00411987                 mov     ds:dword_4188D0, eax
.text:0041198C                 lea     eax, [edx-7CFh]
.text:00411992                 cmp     eax, 0B7h ; '·'
.text:00411997                 ja      short loc_4119A6
.text:00411999                 mov     edx, 0Fh
.text:0041199E
.text:0041199E loc_41199E:                             ; CODE XREF: sub_4117D0+1E3↓j
.text:0041199E                 mov     ds:dword_4188D0, edx
.text:004119A4                 jmp     short loc_41195C
.text:004119A6 ; ---------------------------------------------------------------------------
.text:004119A6
.text:004119A6 loc_4119A6:                             ; CODE XREF: sub_4117D0+1C7↑j
.text:004119A6                 cmp     edx, 886h
.text:004119AC                 jbe     short loc_41195C
.text:004119AE                 mov     edx, 10h
.text:004119B3                 jmp     short loc_41199E
.text:004119B5 ; ---------------------------------------------------------------------------
.text:004119B5
.text:004119B5 loc_4119B5:                             ; CODE XREF: sub_4117D0+16D↑j
.text:004119B5                 cmp     edx, 438h
.text:004119BB                 jbe     short loc_41194A
.text:004119BD                 mov     edx, 0Ch
.text:004119C2                 jmp     short loc_411944
.text:004119C4 ; ---------------------------------------------------------------------------
.text:004119C4
.text:004119C4 loc_4119C4:                             ; CODE XREF: sub_4117D0+3C↑j
.text:004119C4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:004119CC                 xor     edx, edx
.text:004119CE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:004119D2                 mov     dword_417110, edx
.text:004119D8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:004119DB                 call    GetVersionExA
.text:004119E0                 sub     esp, 4
.text:004119E3                 xor     edx, edx
.text:004119E5                 test    eax, eax
.text:004119E7                 jz      loc_4117E5
.text:004119ED                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:004119F1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:004119F5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:004119FB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:004119FF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00411A05                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00411A09                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00411A0F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00411A15                 jmp     loc_411812
.text:00411A15 sub_4117D0      endp
.text:00411A15
.text:00411A15 ; ---------------------------------------------------------------------------
.text:00411A1A                 align 10h
.text:00411A20 aNotset         db 'notset',0           ; DATA XREF: .data:off_417120↓o
.text:00411A20                                         ; .data:off_417124↓o
.text:00411A27 ; ---------------------------------------------------------------------------
.text:00411A27
.text:00411A27 loc_411A27:                             ; DATA XREF: .text:loc_411AC5↓o
.text:00411A27                 jb      short loc_411AA0
.text:00411A29                 add     [eax], ah
.text:00411A2B                 or      [eax], eax
.text:00411A2D
.text:00411A2D loc_411A2D:                             ; DATA XREF: .text:00411B18↓o
.text:00411A2D                                         ; .text:00411B7E↓o ...
.text:00411A2D                 add     [eax], ah
.text:00411A2F                 and     eax, 64252064h
.text:00411A34                 and     [eax], al
.text:00411A36                 lea     esi, [esi+0]
.text:00411A39                 lea     edi, [edi+0]
.text:00411A40                 push    ebp
.text:00411A41                 push    edi
.text:00411A42                 push    esi
.text:00411A43                 push    ebx
.text:00411A44                 sub     esp, 14Ch
.text:00411A4A                 mov     edx, off_417120 ; "notset"
.text:00411A50                 mov     edi, [esp+164h]
.text:00411A57                 mov     ebp, [esp+168h]
.text:00411A5E                 mov     [esp+4], edx
.text:00411A62                 mov     edx, off_417124 ; "notset"
.text:00411A68                 mov     [esp], edx
.text:00411A6B                 call    strcmp
.text:00411A70                 test    eax, eax
.text:00411A72                 jz      loc_411E60
.text:00411A78
.text:00411A78 loc_411A78:                             ; CODE XREF: .text:00411EAC↓j
.text:00411A78                 lea     ebx, [esp+20h]
.text:00411A7C                 lea     esi, [esi+0]
.text:00411A80
.text:00411A80 loc_411A80:                             ; CODE XREF: .text:00411AB6↓j
.text:00411A80                 mov     [esp+4], ebx
.text:00411A84                 mov     ecx, off_417124 ; "notset"
.text:00411A8A                 mov     [esp], ecx
.text:00411A8D                 call    loc_40FFC0
.text:00411A92                 test    eax, eax
.text:00411A94                 jns     short loc_411AC5
.text:00411A96                 mov     eax, off_417124 ; "notset"
.text:00411A9B                 cmp     byte ptr [eax], 0
.text:00411A9E                 jz      short loc_411AB8
.text:00411AA0
.text:00411AA0 loc_411AA0:                             ; CODE XREF: .text:loc_411A27↑j
.text:00411AA0                 mov     dword ptr [esp+4], 0
.text:00411AA8                 mov     [esp], eax
.text:00411AAB                 call    strchr
.text:00411AB0                 inc     eax
.text:00411AB1                 mov     off_417124, eax ; "notset"
.text:00411AB6                 jmp     short loc_411A80
.text:00411AB8 ; ---------------------------------------------------------------------------
.text:00411AB8
.text:00411AB8 loc_411AB8:                             ; CODE XREF: .text:00411A9E↑j
.text:00411AB8                 xor     eax, eax
.text:00411ABA
.text:00411ABA loc_411ABA:                             ; CODE XREF: .text:00411C7C↓j
.text:00411ABA                 add     esp, 14Ch
.text:00411AC0                 pop     ebx
.text:00411AC1                 pop     esi
.text:00411AC2                 pop     edi
.text:00411AC3                 pop     ebp
.text:00411AC4                 retn
.text:00411AC5 ; ---------------------------------------------------------------------------
.text:00411AC5
.text:00411AC5 loc_411AC5:                             ; CODE XREF: .text:00411A94↑j
.text:00411AC5                 mov     dword ptr [edi+0Ch], offset loc_411A27
.text:00411ACC                 lea     ecx, [esp+0D6h]
.text:00411AD3                 lea     edx, [esp+6Ch]
.text:00411AD7                 mov     [edi+4], ecx
.text:00411ADA                 lea     ebx, [esp+7Ch]
.text:00411ADE                 mov     [edi+8], edx
.text:00411AE1                 mov     [edi], ebx
.text:00411AE3                 mov     [esp], ebp
.text:00411AE6                 mov     [esp+4], edi
.text:00411AEA                 call    ___addmntentstr
.text:00411AEF                 mov     [esp], ebp
.text:00411AF2                 mov     dword ptr [esp+4], 411A2Ah
.text:00411AFA                 call    strspn
.text:00411AFF                 mov     dword ptr [esp+4], 0
.text:00411B07                 mov     ebx, off_417124 ; "notset"
.text:00411B0D                 lea     esi, [eax+ebp]
.text:00411B10                 mov     [esp+1Ch], esi
.text:00411B14                 lea     ebp, [esp+1Ch]
.text:00411B18                 mov     esi, offset loc_411A2D
.text:00411B1D                 mov     [esp], ebx
.text:00411B20                 call    strchr
.text:00411B25                 mov     dword ptr [esp+4], 411A2Ah
.text:00411B2D                 inc     eax
.text:00411B2E                 mov     off_417124, eax ; "notset"
.text:00411B33                 mov     [esp], ebp
.text:00411B36                 call    sub_4133B0
.text:00411B3B                 test    eax, eax
.text:00411B3D                 mov     ebx, eax
.text:00411B3F                 jz      short loc_411B68
.text:00411B41                 mov     edx, eax
.text:00411B43                 mov     ecx, eax
.text:00411B45                 lea     esi, [esi+0]
.text:00411B49                 lea     edi, [edi+0]
.text:00411B50
.text:00411B50 loc_411B50:                             ; CODE XREF: .text:00411B66↓j
.text:00411B50                 movzx   eax, byte ptr [edx]
.text:00411B53                 cmp     al, 5Ch ; '\'
.text:00411B55                 jz      loc_411E04
.text:00411B5B
.text:00411B5B loc_411B5B:                             ; CODE XREF: .text:00411E0C↓j
.text:00411B5B                                         ; .text:00411E1A↓j ...
.text:00411B5B                 mov     [ecx], al
.text:00411B5D
.text:00411B5D loc_411B5D:                             ; CODE XREF: .text:00411E2E↓j
.text:00411B5D                 inc     ecx
.text:00411B5E
.text:00411B5E loc_411B5E:                             ; CODE XREF: .text:00411E46↓j
.text:00411B5E                 movzx   eax, byte ptr [edx]
.text:00411B61                 mov     esi, ebx
.text:00411B63                 inc     edx
.text:00411B64                 test    al, al
.text:00411B66                 jnz     short loc_411B50
.text:00411B68
.text:00411B68 loc_411B68:                             ; CODE XREF: .text:00411B3F↑j
.text:00411B68                 mov     [edi], esi
.text:00411B6A                 mov     eax, [esp+1Ch]
.text:00411B6E                 test    eax, eax
.text:00411B70                 jnz     loc_411DEB
.text:00411B76
.text:00411B76 loc_411B76:                             ; CODE XREF: .text:00411DFF↓j
.text:00411B76                 mov     dword ptr [esp+4], 411A2Ah
.text:00411B7E                 mov     esi, offset loc_411A2D
.text:00411B83                 mov     [esp], ebp
.text:00411B86                 call    sub_4133B0
.text:00411B8B                 test    eax, eax
.text:00411B8D                 mov     ebx, eax
.text:00411B8F                 jz      short loc_411BB8
.text:00411B91                 mov     edx, eax
.text:00411B93                 mov     ecx, eax
.text:00411B95                 lea     esi, [esi+0]
.text:00411B99                 lea     edi, [edi+0]
.text:00411BA0
.text:00411BA0 loc_411BA0:                             ; CODE XREF: .text:00411BB6↓j
.text:00411BA0                 movzx   eax, byte ptr [edx]
.text:00411BA3                 cmp     al, 5Ch ; '\'
.text:00411BA5                 jz      loc_411D93
.text:00411BAB
.text:00411BAB loc_411BAB:                             ; CODE XREF: .text:00411D9B↓j
.text:00411BAB                                         ; .text:00411DA9↓j ...
.text:00411BAB                 mov     [ecx], al
.text:00411BAD
.text:00411BAD loc_411BAD:                             ; CODE XREF: .text:00411DBD↓j
.text:00411BAD                 inc     ecx
.text:00411BAE
.text:00411BAE loc_411BAE:                             ; CODE XREF: .text:00411DD5↓j
.text:00411BAE                 movzx   eax, byte ptr [edx]
.text:00411BB1                 mov     esi, ebx
.text:00411BB3                 inc     edx
.text:00411BB4                 test    al, al
.text:00411BB6                 jnz     short loc_411BA0
.text:00411BB8
.text:00411BB8 loc_411BB8:                             ; CODE XREF: .text:00411B8F↑j
.text:00411BB8                 mov     [edi+4], esi
.text:00411BBB                 mov     eax, [esp+1Ch]
.text:00411BBF                 test    eax, eax
.text:00411BC1                 jnz     loc_411D7A
.text:00411BC7
.text:00411BC7 loc_411BC7:                             ; CODE XREF: .text:00411D8E↓j
.text:00411BC7                 mov     dword ptr [esp+4], 411A2Ah
.text:00411BCF                 mov     esi, offset loc_411A2D
.text:00411BD4                 mov     [esp], ebp
.text:00411BD7                 call    sub_4133B0
.text:00411BDC                 test    eax, eax
.text:00411BDE                 mov     ebx, eax
.text:00411BE0                 jz      short loc_411C08
.text:00411BE2                 mov     edx, eax
.text:00411BE4                 mov     ecx, eax
.text:00411BE6                 lea     esi, [esi+0]
.text:00411BE9                 lea     edi, [edi+0]
.text:00411BF0
.text:00411BF0 loc_411BF0:                             ; CODE XREF: .text:00411C06↓j
.text:00411BF0                 movzx   eax, byte ptr [edx]
.text:00411BF3                 cmp     al, 5Ch ; '\'
.text:00411BF5                 jz      loc_411D22
.text:00411BFB
.text:00411BFB loc_411BFB:                             ; CODE XREF: .text:00411D2A↓j
.text:00411BFB                                         ; .text:00411D38↓j ...
.text:00411BFB                 mov     [ecx], al
.text:00411BFD
.text:00411BFD loc_411BFD:                             ; CODE XREF: .text:00411D4C↓j
.text:00411BFD                 inc     ecx
.text:00411BFE
.text:00411BFE loc_411BFE:                             ; CODE XREF: .text:00411D64↓j
.text:00411BFE                 movzx   eax, byte ptr [edx]
.text:00411C01                 mov     esi, ebx
.text:00411C03                 inc     edx
.text:00411C04                 test    al, al
.text:00411C06                 jnz     short loc_411BF0
.text:00411C08
.text:00411C08 loc_411C08:                             ; CODE XREF: .text:00411BE0↑j
.text:00411C08                 mov     [edi+8], esi
.text:00411C0B                 mov     eax, [esp+1Ch]
.text:00411C0F                 test    eax, eax
.text:00411C11                 jnz     loc_411D09
.text:00411C17
.text:00411C17 loc_411C17:                             ; CODE XREF: .text:00411D1D↓j
.text:00411C17                 mov     dword ptr [esp+4], 411A2Ah
.text:00411C1F                 mov     esi, offset loc_411A2D
.text:00411C24                 mov     [esp], ebp
.text:00411C27                 call    sub_4133B0
.text:00411C2C                 test    eax, eax
.text:00411C2E                 mov     ebx, eax
.text:00411C30                 jz      short loc_411C54
.text:00411C32                 mov     edx, eax
.text:00411C34                 mov     ecx, eax
.text:00411C36                 lea     esi, [esi+0]
.text:00411C39                 lea     edi, [edi+0]
.text:00411C40
.text:00411C40 loc_411C40:                             ; CODE XREF: .text:00411C52↓j
.text:00411C40                 movzx   eax, byte ptr [edx]
.text:00411C43                 cmp     al, 5Ch ; '\'
.text:00411C45                 jz      short loc_411CB5
.text:00411C47
.text:00411C47 loc_411C47:                             ; CODE XREF: .text:00411CBD↓j
.text:00411C47                                         ; .text:00411CC7↓j ...
.text:00411C47                 mov     [ecx], al
.text:00411C49
.text:00411C49 loc_411C49:                             ; CODE XREF: .text:00411CDB↓j
.text:00411C49                 inc     ecx
.text:00411C4A
.text:00411C4A loc_411C4A:                             ; CODE XREF: .text:00411CF3↓j
.text:00411C4A                 movzx   eax, byte ptr [edx]
.text:00411C4D                 mov     esi, ebx
.text:00411C4F                 inc     edx
.text:00411C50                 test    al, al
.text:00411C52                 jnz     short loc_411C40
.text:00411C54
.text:00411C54 loc_411C54:                             ; CODE XREF: .text:00411C30↑j
.text:00411C54                 mov     [edi+0Ch], esi
.text:00411C57                 xor     eax, eax
.text:00411C59                 mov     edx, [esp+1Ch]
.text:00411C5D                 test    edx, edx
.text:00411C5F                 jnz     short loc_411C95
.text:00411C61
.text:00411C61 loc_411C61:                             ; CODE XREF: .text:00411CB3↓j
.text:00411C61                 cmp     eax, 1
.text:00411C64                 jz      short loc_411C8C
.text:00411C66                 cmp     eax, 1
.text:00411C69                 jle     short loc_411C81
.text:00411C6B
.text:00411C6B loc_411C6B:                             ; CODE XREF: .text:00411C83↓j
.text:00411C6B                                         ; .text:00411C93↓j
.text:00411C6B                 mov     edx, [esp+160h]
.text:00411C72                 mov     [esp], edx
.text:00411C75                 call    sub_413350
.text:00411C7A                 mov     eax, edi
.text:00411C7C                 jmp     loc_411ABA
.text:00411C81 ; ---------------------------------------------------------------------------
.text:00411C81
.text:00411C81 loc_411C81:                             ; CODE XREF: .text:00411C69↑j
.text:00411C81                 test    eax, eax
.text:00411C83                 jnz     short loc_411C6B
.text:00411C85                 mov     dword ptr [edi+10h], 0
.text:00411C8C
.text:00411C8C loc_411C8C:                             ; CODE XREF: .text:00411C64↑j
.text:00411C8C                 mov     dword ptr [edi+14h], 0
.text:00411C93                 jmp     short loc_411C6B
.text:00411C95 ; ---------------------------------------------------------------------------
.text:00411C95
.text:00411C95 loc_411C95:                             ; CODE XREF: .text:00411C5F↑j
.text:00411C95                 mov     dword ptr [esp+4], 411A2Eh
.text:00411C9D                 lea     esi, [edi+14h]
.text:00411CA0                 lea     ebp, [edi+10h]
.text:00411CA3                 mov     [esp+0Ch], esi
.text:00411CA7                 mov     [esp+8], ebp
.text:00411CAB                 mov     [esp], edx
.text:00411CAE                 call    sscanf
.text:00411CB3                 jmp     short loc_411C61
.text:00411CB5 ; ---------------------------------------------------------------------------
.text:00411CB5
.text:00411CB5 loc_411CB5:                             ; CODE XREF: .text:00411C45↑j
.text:00411CB5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411CB9                 jz      short loc_411CF8
.text:00411CBB
.text:00411CBB loc_411CBB:                             ; CODE XREF: .text:00411CFC↓j
.text:00411CBB                                         ; .text:00411D02↓j
.text:00411CBB                 cmp     al, 5Ch ; '\'
.text:00411CBD                 jnz     short loc_411C47
.text:00411CBF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411CC3                 jz      short loc_411CE0
.text:00411CC5
.text:00411CC5 loc_411CC5:                             ; CODE XREF: .text:00411CE4↓j
.text:00411CC5                                         ; .text:00411CEA↓j
.text:00411CC5                 cmp     al, 5Ch ; '\'
.text:00411CC7                 jnz     loc_411C47
.text:00411CCD                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00411CD1                 jnz     loc_411C47
.text:00411CD7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00411CDA                 inc     edx
.text:00411CDB                 jmp     loc_411C49
.text:00411CE0 ; ---------------------------------------------------------------------------
.text:00411CE0
.text:00411CE0 loc_411CE0:                             ; CODE XREF: .text:00411CC3↑j
.text:00411CE0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00411CE4                 jnz     short loc_411CC5
.text:00411CE6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00411CEA                 jnz     short loc_411CC5
.text:00411CEC                 mov     byte ptr [ecx], 9
.text:00411CEF
.text:00411CEF loc_411CEF:                             ; CODE XREF: .text:00411D07↓j
.text:00411CEF                 inc     ecx
.text:00411CF0                 add     edx, 3
.text:00411CF3                 jmp     loc_411C4A
.text:00411CF8 ; ---------------------------------------------------------------------------
.text:00411CF8
.text:00411CF8 loc_411CF8:                             ; CODE XREF: .text:00411CB9↑j
.text:00411CF8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00411CFC                 jnz     short loc_411CBB
.text:00411CFE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00411D02                 jnz     short loc_411CBB
.text:00411D04                 mov     byte ptr [ecx], 20h ; ' '
.text:00411D07                 jmp     short loc_411CEF
.text:00411D09 ; ---------------------------------------------------------------------------
.text:00411D09
.text:00411D09 loc_411D09:                             ; CODE XREF: .text:00411C11↑j
.text:00411D09                 mov     dword ptr [esp+4], 411A2Ah
.text:00411D11                 mov     [esp], eax
.text:00411D14                 call    strspn
.text:00411D19                 add     [esp+1Ch], eax
.text:00411D1D                 jmp     loc_411C17
.text:00411D22 ; ---------------------------------------------------------------------------
.text:00411D22
.text:00411D22 loc_411D22:                             ; CODE XREF: .text:00411BF5↑j
.text:00411D22                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411D26                 jz      short loc_411D69
.text:00411D28
.text:00411D28 loc_411D28:                             ; CODE XREF: .text:00411D6D↓j
.text:00411D28                                         ; .text:00411D73↓j
.text:00411D28                 cmp     al, 5Ch ; '\'
.text:00411D2A                 jnz     loc_411BFB
.text:00411D30                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411D34                 jz      short loc_411D51
.text:00411D36
.text:00411D36 loc_411D36:                             ; CODE XREF: .text:00411D55↓j
.text:00411D36                                         ; .text:00411D5B↓j
.text:00411D36                 cmp     al, 5Ch ; '\'
.text:00411D38                 jnz     loc_411BFB
.text:00411D3E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00411D42                 jnz     loc_411BFB
.text:00411D48                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00411D4B                 inc     edx
.text:00411D4C                 jmp     loc_411BFD
.text:00411D51 ; ---------------------------------------------------------------------------
.text:00411D51
.text:00411D51 loc_411D51:                             ; CODE XREF: .text:00411D34↑j
.text:00411D51                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00411D55                 jnz     short loc_411D36
.text:00411D57                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00411D5B                 jnz     short loc_411D36
.text:00411D5D                 mov     byte ptr [ecx], 9
.text:00411D60
.text:00411D60 loc_411D60:                             ; CODE XREF: .text:00411D78↓j
.text:00411D60                 inc     ecx
.text:00411D61                 add     edx, 3
.text:00411D64                 jmp     loc_411BFE
.text:00411D69 ; ---------------------------------------------------------------------------
.text:00411D69
.text:00411D69 loc_411D69:                             ; CODE XREF: .text:00411D26↑j
.text:00411D69                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00411D6D                 jnz     short loc_411D28
.text:00411D6F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00411D73                 jnz     short loc_411D28
.text:00411D75                 mov     byte ptr [ecx], 20h ; ' '
.text:00411D78                 jmp     short loc_411D60
.text:00411D7A ; ---------------------------------------------------------------------------
.text:00411D7A
.text:00411D7A loc_411D7A:                             ; CODE XREF: .text:00411BC1↑j
.text:00411D7A                 mov     dword ptr [esp+4], 411A2Ah
.text:00411D82                 mov     [esp], eax
.text:00411D85                 call    strspn
.text:00411D8A                 add     [esp+1Ch], eax
.text:00411D8E                 jmp     loc_411BC7
.text:00411D93 ; ---------------------------------------------------------------------------
.text:00411D93
.text:00411D93 loc_411D93:                             ; CODE XREF: .text:00411BA5↑j
.text:00411D93                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411D97                 jz      short loc_411DDA
.text:00411D99
.text:00411D99 loc_411D99:                             ; CODE XREF: .text:00411DDE↓j
.text:00411D99                                         ; .text:00411DE4↓j
.text:00411D99                 cmp     al, 5Ch ; '\'
.text:00411D9B                 jnz     loc_411BAB
.text:00411DA1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411DA5                 jz      short loc_411DC2
.text:00411DA7
.text:00411DA7 loc_411DA7:                             ; CODE XREF: .text:00411DC6↓j
.text:00411DA7                                         ; .text:00411DCC↓j
.text:00411DA7                 cmp     al, 5Ch ; '\'
.text:00411DA9                 jnz     loc_411BAB
.text:00411DAF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00411DB3                 jnz     loc_411BAB
.text:00411DB9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00411DBC                 inc     edx
.text:00411DBD                 jmp     loc_411BAD
.text:00411DC2 ; ---------------------------------------------------------------------------
.text:00411DC2
.text:00411DC2 loc_411DC2:                             ; CODE XREF: .text:00411DA5↑j
.text:00411DC2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00411DC6                 jnz     short loc_411DA7
.text:00411DC8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00411DCC                 jnz     short loc_411DA7
.text:00411DCE                 mov     byte ptr [ecx], 9
.text:00411DD1
.text:00411DD1 loc_411DD1:                             ; CODE XREF: .text:00411DE9↓j
.text:00411DD1                 inc     ecx
.text:00411DD2                 add     edx, 3
.text:00411DD5                 jmp     loc_411BAE
.text:00411DDA ; ---------------------------------------------------------------------------
.text:00411DDA
.text:00411DDA loc_411DDA:                             ; CODE XREF: .text:00411D97↑j
.text:00411DDA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00411DDE                 jnz     short loc_411D99
.text:00411DE0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00411DE4                 jnz     short loc_411D99
.text:00411DE6                 mov     byte ptr [ecx], 20h ; ' '
.text:00411DE9                 jmp     short loc_411DD1
.text:00411DEB ; ---------------------------------------------------------------------------
.text:00411DEB
.text:00411DEB loc_411DEB:                             ; CODE XREF: .text:00411B70↑j
.text:00411DEB                 mov     dword ptr [esp+4], 411A2Ah
.text:00411DF3                 mov     [esp], eax
.text:00411DF6                 call    strspn
.text:00411DFB                 add     [esp+1Ch], eax
.text:00411DFF                 jmp     loc_411B76
.text:00411E04 ; ---------------------------------------------------------------------------
.text:00411E04
.text:00411E04 loc_411E04:                             ; CODE XREF: .text:00411B55↑j
.text:00411E04                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411E08                 jz      short loc_411E4B
.text:00411E0A
.text:00411E0A loc_411E0A:                             ; CODE XREF: .text:00411E4F↓j
.text:00411E0A                                         ; .text:00411E55↓j
.text:00411E0A                 cmp     al, 5Ch ; '\'
.text:00411E0C                 jnz     loc_411B5B
.text:00411E12                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411E16                 jz      short loc_411E33
.text:00411E18
.text:00411E18 loc_411E18:                             ; CODE XREF: .text:00411E37↓j
.text:00411E18                                         ; .text:00411E3D↓j
.text:00411E18                 cmp     al, 5Ch ; '\'
.text:00411E1A                 jnz     loc_411B5B
.text:00411E20                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00411E24                 jnz     loc_411B5B
.text:00411E2A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00411E2D                 inc     edx
.text:00411E2E                 jmp     loc_411B5D
.text:00411E33 ; ---------------------------------------------------------------------------
.text:00411E33
.text:00411E33 loc_411E33:                             ; CODE XREF: .text:00411E16↑j
.text:00411E33                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00411E37                 jnz     short loc_411E18
.text:00411E39                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00411E3D                 jnz     short loc_411E18
.text:00411E3F                 mov     byte ptr [ecx], 9
.text:00411E42
.text:00411E42 loc_411E42:                             ; CODE XREF: .text:00411E5A↓j
.text:00411E42                 inc     ecx
.text:00411E43                 add     edx, 3
.text:00411E46                 jmp     loc_411B5E
.text:00411E4B ; ---------------------------------------------------------------------------
.text:00411E4B
.text:00411E4B loc_411E4B:                             ; CODE XREF: .text:00411E08↑j
.text:00411E4B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00411E4F                 jnz     short loc_411E0A
.text:00411E51                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00411E55                 jnz     short loc_411E0A
.text:00411E57                 mov     byte ptr [ecx], 20h ; ' '
.text:00411E5A                 jmp     short loc_411E42
.text:00411E5A ; ---------------------------------------------------------------------------
.text:00411E5C                 align 10h
.text:00411E60
.text:00411E60 loc_411E60:                             ; CODE XREF: .text:00411A72↑j
.text:00411E60                 mov     dword ptr [esp+4], 0
.text:00411E68                 mov     dword ptr [esp], 0
.text:00411E6F                 call    GetLogicalDriveStringsA
.text:00411E74                 sub     esp, 8
.text:00411E77                 mov     ebx, eax
.text:00411E79                 call    GetProcessHeap
.text:00411E7E                 mov     [esp], eax
.text:00411E81                 mov     [esp+8], ebx
.text:00411E85                 mov     dword ptr [esp+4], 0
.text:00411E8D                 call    HeapAlloc
.text:00411E92                 sub     esp, 0Ch
.text:00411E95                 mov     esi, eax
.text:00411E97                 mov     [esp+4], eax
.text:00411E9B                 mov     [esp], ebx
.text:00411E9E                 call    GetLogicalDriveStringsA
.text:00411EA3                 mov     off_417124, esi ; "notset"
.text:00411EA9                 sub     esp, 8
.text:00411EAC                 jmp     loc_411A78
.text:00411EAC ; ---------------------------------------------------------------------------
.text:00411EB1 ; const char aSSSSDD[]
.text:00411EB1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:00411EB1                                         ; DATA XREF: .text:00411FF0↓o
.text:00411EB1                                         ; ___addmntentstr+F0↓o
.text:00411EC4                 align 10h
.text:00411ED0                 push    esi
.text:00411ED1                 push    ebx
.text:00411ED2                 sub     esp, 44h
.text:00411ED5                 mov     ebx, [esp+54h]
.text:00411ED9                 mov     esi, [esp+50h]
.text:00411EDD                 mov     edx, [ebx]
.text:00411EDF                 mov     [esp+20h], edx
.text:00411EE3                 mov     ecx, [ebx+4]
.text:00411EE6                 mov     [esp+24h], ecx
.text:00411EEA                 mov     edx, [ebx+8]
.text:00411EED                 mov     [esp+28h], edx
.text:00411EF1                 mov     ecx, [ebx+0Ch]
.text:00411EF4                 mov     [esp+2Ch], ecx
.text:00411EF8                 mov     edx, [ebx+10h]
.text:00411EFB                 mov     [esp+30h], edx
.text:00411EFF                 mov     ecx, [ebx+14h]
.text:00411F02                 mov     dword ptr [esp+8], 2
.text:00411F0A                 mov     dword ptr [esp+4], 0
.text:00411F12                 mov     [esp+34h], ecx
.text:00411F16                 mov     [esp], esi
.text:00411F19                 call    sub_413340
.text:00411F1E ; ---------------------------------------------------------------------------
.text:00411F1E                 test    eax, eax
.text:00411F20                 mov     edx, 1
.text:00411F25                 jnz     loc_412025
.text:00411F2B                 mov     ebx, [esp+20h]
.text:00411F2F                 mov     edx, ebx
.text:00411F31                 movzx   eax, byte ptr [ebx]
.text:00411F34                 test    al, al
.text:00411F36                 jz      short loc_411F60
.text:00411F38                 nop
.text:00411F39                 lea     esi, [esi+0]
.text:00411F40
.text:00411F40 loc_411F40:                             ; CODE XREF: .text:00411F5E↓j
.text:00411F40                 cmp     al, 20h ; ' '
.text:00411F42                 jz      loc_41219A
.text:00411F48                 cmp     al, 9
.text:00411F4A                 jz      loc_41219A
.text:00411F50                 cmp     al, 5Ch ; '\'
.text:00411F52                 jz      loc_41219A
.text:00411F58                 inc     ebx
.text:00411F59                 movzx   eax, byte ptr [ebx]
.text:00411F5C                 test    al, al
.text:00411F5E                 jnz     short loc_411F40
.text:00411F60
.text:00411F60 loc_411F60:                             ; CODE XREF: .text:00411F36↑j
.text:00411F60                                         ; .text:0041219C↓j ...
.text:00411F60                 mov     ebx, [esp+24h]
.text:00411F64                 mov     edx, ebx
.text:00411F66                 movzx   eax, byte ptr [ebx]
.text:00411F69                 test    al, al
.text:00411F6B                 jz      short loc_411F90
.text:00411F6D                 lea     esi, [esi+0]
.text:00411F70
.text:00411F70 loc_411F70:                             ; CODE XREF: .text:00411F8E↓j
.text:00411F70                 cmp     al, 20h ; ' '
.text:00411F72                 jz      loc_41211A
.text:00411F78                 cmp     al, 9
.text:00411F7A                 jz      loc_41211A
.text:00411F80                 cmp     al, 5Ch ; '\'
.text:00411F82                 jz      loc_41211A
.text:00411F88                 inc     ebx
.text:00411F89                 movzx   eax, byte ptr [ebx]
.text:00411F8C                 test    al, al
.text:00411F8E                 jnz     short loc_411F70
.text:00411F90
.text:00411F90 loc_411F90:                             ; CODE XREF: .text:00411F6B↑j
.text:00411F90                                         ; .text:0041211C↓j ...
.text:00411F90                 mov     ebx, [esp+28h]
.text:00411F94                 mov     edx, ebx
.text:00411F96                 movzx   eax, byte ptr [ebx]
.text:00411F99                 test    al, al
.text:00411F9B                 jz      short loc_411FC0
.text:00411F9D                 lea     esi, [esi+0]
.text:00411FA0
.text:00411FA0 loc_411FA0:                             ; CODE XREF: .text:00411FBE↓j
.text:00411FA0                 cmp     al, 20h ; ' '
.text:00411FA2                 jz      loc_41209E
.text:00411FA8                 cmp     al, 9
.text:00411FAA                 jz      loc_41209E
.text:00411FB0                 cmp     al, 5Ch ; '\'
.text:00411FB2                 jz      loc_41209E
.text:00411FB8                 inc     ebx
.text:00411FB9                 movzx   eax, byte ptr [ebx]
.text:00411FBC                 test    al, al
.text:00411FBE                 jnz     short loc_411FA0
.text:00411FC0
.text:00411FC0 loc_411FC0:                             ; CODE XREF: .text:00411F9B↑j
.text:00411FC0                                         ; .text:004120A0↓j ...
.text:00411FC0                 mov     edx, [esp+2Ch]
.text:00411FC4                 mov     ebx, edx
.text:00411FC6                 movzx   eax, byte ptr [edx]
.text:00411FC9                 test    al, al
.text:00411FCB                 jz      short loc_411FE4
.text:00411FCD                 lea     esi, [esi+0]
.text:00411FD0
.text:00411FD0 loc_411FD0:                             ; CODE XREF: .text:00411FE2↓j
.text:00411FD0                 cmp     al, 20h ; ' '
.text:00411FD2                 jz      short loc_41202D
.text:00411FD4                 cmp     al, 9
.text:00411FD6                 jz      short loc_41202D
.text:00411FD8                 cmp     al, 5Ch ; '\'
.text:00411FDA                 jz      short loc_41202D
.text:00411FDC                 inc     ebx
.text:00411FDD                 movzx   eax, byte ptr [ebx]
.text:00411FE0                 test    al, al
.text:00411FE2                 jnz     short loc_411FD0
.text:00411FE4
.text:00411FE4 loc_411FE4:                             ; CODE XREF: .text:00411FCB↑j
.text:00411FE4                                         ; .text:0041202F↓j ...
.text:00411FE4                 mov     [esp+14h], edx
.text:00411FE8                 mov     ecx, [esp+34h]
.text:00411FEC                 mov     ebx, [esp+30h]
.text:00411FF0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00411FF8                 mov     edx, [esp+24h]
.text:00411FFC                 mov     [esp+1Ch], ecx
.text:00412000                 mov     ecx, [esp+28h]
.text:00412004                 mov     [esp+18h], ebx
.text:00412008                 mov     ebx, [esp+20h]
.text:0041200C                 mov     [esp+0Ch], edx
.text:00412010                 mov     [esp+10h], ecx
.text:00412014                 mov     [esp+8], ebx
.text:00412018                 mov     [esp], esi
.text:0041201B                 call    fprintf
.text:00412020                 mov     edx, eax
.text:00412022                 shr     edx, 1Fh
.text:00412025
.text:00412025 loc_412025:                             ; CODE XREF: .text:00411F25↑j
.text:00412025                 add     esp, 44h
.text:00412028                 mov     eax, edx
.text:0041202A                 pop     ebx
.text:0041202B                 pop     esi
.text:0041202C                 retn
.text:0041202D ; ---------------------------------------------------------------------------
.text:0041202D
.text:0041202D loc_41202D:                             ; CODE XREF: .text:00411FD2↑j
.text:0041202D                                         ; .text:00411FD6↑j ...
.text:0041202D                 test    al, al
.text:0041202F                 jz      short loc_411FE4
.text:00412031                 mov     [esp], edx
.text:00412034                 mov     ebx, edx
.text:00412036                 call    strlen
.text:0041203B                 lea     edx, ds:1[eax*4]
.text:00412042                 mov     [esp], edx
.text:00412045                 call    malloc
.text:0041204A                 mov     [esp+2Ch], eax
.text:0041204E                 mov     edx, eax
.text:00412050
.text:00412050 loc_412050:                             ; CODE XREF: .text:00412068↓j
.text:00412050                 movzx   eax, byte ptr [ebx]
.text:00412053                 cmp     al, 20h ; ' '
.text:00412055                 jz      short loc_41208D
.text:00412057                 cmp     al, 9
.text:00412059                 jz      short loc_41207C
.text:0041205B                 cmp     al, 5Ch ; '\'
.text:0041205D                 jz      short loc_412073
.text:0041205F                 mov     [edx], al
.text:00412061
.text:00412061 loc_412061:                             ; CODE XREF: .text:0041207A↓j
.text:00412061                                         ; .text:0041208B↓j ...
.text:00412061                 movzx   ecx, byte ptr [ebx]
.text:00412064                 inc     edx
.text:00412065                 inc     ebx
.text:00412066                 test    cl, cl
.text:00412068                 jnz     short loc_412050
.text:0041206A                 mov     edx, [esp+2Ch]
.text:0041206E                 jmp     loc_411FE4
.text:00412073 ; ---------------------------------------------------------------------------
.text:00412073
.text:00412073 loc_412073:                             ; CODE XREF: .text:0041205D↑j
.text:00412073                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412076                 inc     edx
.text:00412077                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041207A                 jmp     short loc_412061
.text:0041207C ; ---------------------------------------------------------------------------
.text:0041207C
.text:0041207C loc_41207C:                             ; CODE XREF: .text:00412059↑j
.text:0041207C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041207F                 inc     edx
.text:00412080                 mov     byte ptr [edx], 30h ; '0'
.text:00412083                 inc     edx
.text:00412084                 mov     byte ptr [edx], 31h ; '1'
.text:00412087                 inc     edx
.text:00412088                 mov     byte ptr [edx], 32h ; '2'
.text:0041208B                 jmp     short loc_412061
.text:0041208D ; ---------------------------------------------------------------------------
.text:0041208D
.text:0041208D loc_41208D:                             ; CODE XREF: .text:00412055↑j
.text:0041208D                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412090                 inc     edx
.text:00412091                 mov     byte ptr [edx], 30h ; '0'
.text:00412094                 inc     edx
.text:00412095                 mov     byte ptr [edx], 34h ; '4'
.text:00412098                 inc     edx
.text:00412099                 mov     byte ptr [edx], 30h ; '0'
.text:0041209C                 jmp     short loc_412061
.text:0041209E ; ---------------------------------------------------------------------------
.text:0041209E
.text:0041209E loc_41209E:                             ; CODE XREF: .text:00411FA2↑j
.text:0041209E                                         ; .text:00411FAA↑j ...
.text:0041209E                 test    al, al
.text:004120A0                 jz      loc_411FC0
.text:004120A6                 mov     [esp], edx
.text:004120A9                 mov     ebx, edx
.text:004120AB                 call    strlen
.text:004120B0                 lea     edx, ds:1[eax*4]
.text:004120B7                 mov     [esp], edx
.text:004120BA                 call    malloc
.text:004120BF                 mov     [esp+28h], eax
.text:004120C3                 mov     edx, eax
.text:004120C5                 lea     esi, [esi+0]
.text:004120C9                 lea     edi, [edi+0]
.text:004120D0
.text:004120D0 loc_4120D0:                             ; CODE XREF: .text:004120E8↓j
.text:004120D0                 movzx   eax, byte ptr [ebx]
.text:004120D3                 cmp     al, 20h ; ' '
.text:004120D5                 jz      short loc_412109
.text:004120D7                 cmp     al, 9
.text:004120D9                 jz      short loc_4120F8
.text:004120DB                 cmp     al, 5Ch ; '\'
.text:004120DD                 jz      short loc_4120EF
.text:004120DF                 mov     [edx], al
.text:004120E1
.text:004120E1 loc_4120E1:                             ; CODE XREF: .text:004120F6↓j
.text:004120E1                                         ; .text:00412107↓j ...
.text:004120E1                 movzx   ecx, byte ptr [ebx]
.text:004120E4                 inc     edx
.text:004120E5                 inc     ebx
.text:004120E6                 test    cl, cl
.text:004120E8                 jnz     short loc_4120D0
.text:004120EA                 jmp     loc_411FC0
.text:004120EF ; ---------------------------------------------------------------------------
.text:004120EF
.text:004120EF loc_4120EF:                             ; CODE XREF: .text:004120DD↑j
.text:004120EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:004120F2                 inc     edx
.text:004120F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004120F6                 jmp     short loc_4120E1
.text:004120F8 ; ---------------------------------------------------------------------------
.text:004120F8
.text:004120F8 loc_4120F8:                             ; CODE XREF: .text:004120D9↑j
.text:004120F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:004120FB                 inc     edx
.text:004120FC                 mov     byte ptr [edx], 30h ; '0'
.text:004120FF                 inc     edx
.text:00412100                 mov     byte ptr [edx], 31h ; '1'
.text:00412103                 inc     edx
.text:00412104                 mov     byte ptr [edx], 32h ; '2'
.text:00412107                 jmp     short loc_4120E1
.text:00412109 ; ---------------------------------------------------------------------------
.text:00412109
.text:00412109 loc_412109:                             ; CODE XREF: .text:004120D5↑j
.text:00412109                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041210C                 inc     edx
.text:0041210D                 mov     byte ptr [edx], 30h ; '0'
.text:00412110                 inc     edx
.text:00412111                 mov     byte ptr [edx], 34h ; '4'
.text:00412114                 inc     edx
.text:00412115                 mov     byte ptr [edx], 30h ; '0'
.text:00412118                 jmp     short loc_4120E1
.text:0041211A ; ---------------------------------------------------------------------------
.text:0041211A
.text:0041211A loc_41211A:                             ; CODE XREF: .text:00411F72↑j
.text:0041211A                                         ; .text:00411F7A↑j ...
.text:0041211A                 test    al, al
.text:0041211C                 jz      loc_411F90
.text:00412122                 mov     [esp], edx
.text:00412125                 mov     ebx, edx
.text:00412127                 call    strlen
.text:0041212C                 lea     edx, ds:1[eax*4]
.text:00412133                 mov     [esp], edx
.text:00412136                 call    malloc
.text:0041213B                 mov     [esp+24h], eax
.text:0041213F                 mov     edx, eax
.text:00412141                 jmp     short loc_412150
.text:00412141 ; ---------------------------------------------------------------------------
.text:00412143                 align 10h
.text:00412150
.text:00412150 loc_412150:                             ; CODE XREF: .text:00412141↑j
.text:00412150                                         ; .text:00412168↓j
.text:00412150                 movzx   eax, byte ptr [ebx]
.text:00412153                 cmp     al, 20h ; ' '
.text:00412155                 jz      short loc_412189
.text:00412157                 cmp     al, 9
.text:00412159                 jz      short loc_412178
.text:0041215B                 cmp     al, 5Ch ; '\'
.text:0041215D                 jz      short loc_41216F
.text:0041215F                 mov     [edx], al
.text:00412161
.text:00412161 loc_412161:                             ; CODE XREF: .text:00412176↓j
.text:00412161                                         ; .text:00412187↓j ...
.text:00412161                 movzx   ecx, byte ptr [ebx]
.text:00412164                 inc     edx
.text:00412165                 inc     ebx
.text:00412166                 test    cl, cl
.text:00412168                 jnz     short loc_412150
.text:0041216A                 jmp     loc_411F90
.text:0041216F ; ---------------------------------------------------------------------------
.text:0041216F
.text:0041216F loc_41216F:                             ; CODE XREF: .text:0041215D↑j
.text:0041216F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412172                 inc     edx
.text:00412173                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412176                 jmp     short loc_412161
.text:00412178 ; ---------------------------------------------------------------------------
.text:00412178
.text:00412178 loc_412178:                             ; CODE XREF: .text:00412159↑j
.text:00412178                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041217B                 inc     edx
.text:0041217C                 mov     byte ptr [edx], 30h ; '0'
.text:0041217F                 inc     edx
.text:00412180                 mov     byte ptr [edx], 31h ; '1'
.text:00412183                 inc     edx
.text:00412184                 mov     byte ptr [edx], 32h ; '2'
.text:00412187                 jmp     short loc_412161
.text:00412189 ; ---------------------------------------------------------------------------
.text:00412189
.text:00412189 loc_412189:                             ; CODE XREF: .text:00412155↑j
.text:00412189                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041218C                 inc     edx
.text:0041218D                 mov     byte ptr [edx], 30h ; '0'
.text:00412190                 inc     edx
.text:00412191                 mov     byte ptr [edx], 34h ; '4'
.text:00412194                 inc     edx
.text:00412195                 mov     byte ptr [edx], 30h ; '0'
.text:00412198                 jmp     short loc_412161
.text:0041219A ; ---------------------------------------------------------------------------
.text:0041219A
.text:0041219A loc_41219A:                             ; CODE XREF: .text:00411F42↑j
.text:0041219A                                         ; .text:00411F4A↑j ...
.text:0041219A                 test    al, al
.text:0041219C                 jz      loc_411F60
.text:004121A2                 mov     [esp], edx
.text:004121A5                 mov     ebx, edx
.text:004121A7                 call    strlen
.text:004121AC                 lea     ecx, ds:1[eax*4]
.text:004121B3                 mov     [esp], ecx
.text:004121B6                 call    malloc
.text:004121BB                 mov     [esp+20h], eax
.text:004121BF                 mov     edx, eax
.text:004121C1                 jmp     short loc_4121D0
.text:004121C1 ; ---------------------------------------------------------------------------
.text:004121C3                 align 10h
.text:004121D0
.text:004121D0 loc_4121D0:                             ; CODE XREF: .text:004121C1↑j
.text:004121D0                                         ; .text:004121E8↓j
.text:004121D0                 movzx   eax, byte ptr [ebx]
.text:004121D3                 cmp     al, 20h ; ' '
.text:004121D5                 jz      short loc_412209
.text:004121D7                 cmp     al, 9
.text:004121D9                 jz      short loc_4121F8
.text:004121DB                 cmp     al, 5Ch ; '\'
.text:004121DD                 jz      short loc_4121EF
.text:004121DF                 mov     [edx], al
.text:004121E1
.text:004121E1 loc_4121E1:                             ; CODE XREF: .text:004121F6↓j
.text:004121E1                                         ; .text:00412207↓j ...
.text:004121E1                 movzx   ecx, byte ptr [ebx]
.text:004121E4                 inc     edx
.text:004121E5                 inc     ebx
.text:004121E6                 test    cl, cl
.text:004121E8                 jnz     short loc_4121D0
.text:004121EA                 jmp     loc_411F60
.text:004121EF ; ---------------------------------------------------------------------------
.text:004121EF
.text:004121EF loc_4121EF:                             ; CODE XREF: .text:004121DD↑j
.text:004121EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:004121F2                 inc     edx
.text:004121F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004121F6                 jmp     short loc_4121E1
.text:004121F8 ; ---------------------------------------------------------------------------
.text:004121F8
.text:004121F8 loc_4121F8:                             ; CODE XREF: .text:004121D9↑j
.text:004121F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:004121FB                 inc     edx
.text:004121FC                 mov     byte ptr [edx], 30h ; '0'
.text:004121FF                 inc     edx
.text:00412200                 mov     byte ptr [edx], 31h ; '1'
.text:00412203                 inc     edx
.text:00412204                 mov     byte ptr [edx], 32h ; '2'
.text:00412207                 jmp     short loc_4121E1
.text:00412209 ; ---------------------------------------------------------------------------
.text:00412209
.text:00412209 loc_412209:                             ; CODE XREF: .text:004121D5↑j
.text:00412209                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041220C                 inc     edx
.text:0041220D                 mov     byte ptr [edx], 30h ; '0'
.text:00412210                 inc     edx
.text:00412211                 mov     byte ptr [edx], 34h ; '4'
.text:00412214                 inc     edx
.text:00412215                 mov     byte ptr [edx], 30h ; '0'
.text:00412218                 jmp     short loc_4121E1
.text:00412218 ; ---------------------------------------------------------------------------
.text:0041221A                 align 10h
.text:00412220
.text:00412220 ; =============== S U B R O U T I N E =======================================
.text:00412220
.text:00412220 ; Attributes: info_from_lumina
.text:00412220
.text:00412220 ; int __cdecl __addmntentstr(char *, int)
.text:00412220 ___addmntentstr proc near               ; CODE XREF: .text:00411AEA↑p
.text:00412220
.text:00412220 Buffer          = dword ptr -4Ch
.text:00412220 Format          = dword ptr -48h
.text:00412220 var_44          = dword ptr -44h
.text:00412220 var_40          = dword ptr -40h
.text:00412220 var_3C          = dword ptr -3Ch
.text:00412220 var_38          = dword ptr -38h
.text:00412220 var_34          = dword ptr -34h
.text:00412220 var_30          = dword ptr -30h
.text:00412220 var_2C          = dword ptr -2Ch
.text:00412220 var_28          = dword ptr -28h
.text:00412220 var_24          = dword ptr -24h
.text:00412220 Str             = dword ptr -20h
.text:00412220 var_1C          = dword ptr -1Ch
.text:00412220 var_18          = dword ptr -18h
.text:00412220 arg_0           = dword ptr  4
.text:00412220 arg_4           = dword ptr  8
.text:00412220
.text:00412220                 push    ebx
.text:00412221                 sub     esp, 48h
.text:00412224                 mov     edx, [esp+4Ch+arg_4]
.text:00412228                 mov     ecx, [edx]
.text:0041222A                 mov     [esp+4Ch+var_2C], ecx
.text:0041222E                 mov     ebx, [edx+4]
.text:00412231                 mov     [esp+4Ch+var_28], ebx
.text:00412235                 mov     ebx, [edx+8]
.text:00412238                 mov     [esp+4Ch+var_24], ebx
.text:0041223C                 mov     ebx, [edx+0Ch]
.text:0041223F                 mov     [esp+4Ch+Str], ebx
.text:00412243                 mov     ebx, [edx+10h]
.text:00412246                 mov     [esp+4Ch+var_1C], ebx
.text:0041224A                 mov     ebx, [edx+14h]
.text:0041224D                 mov     [esp+4Ch+var_18], ebx
.text:00412251                 mov     ebx, ecx
.text:00412253                 movzx   eax, byte ptr [ecx]
.text:00412256                 test    al, al
.text:00412258                 jz      loc_412541
.text:0041225E                 mov     esi, esi
.text:00412260
.text:00412260 loc_412260:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:00412260                 cmp     al, 20h ; ' '
.text:00412262                 jz      loc_4124C0
.text:00412268                 cmp     al, 9
.text:0041226A                 jz      loc_4124C0
.text:00412270                 cmp     al, 5Ch ; '\'
.text:00412272                 jz      loc_4124C0
.text:00412278                 inc     ebx
.text:00412279                 movzx   eax, byte ptr [ebx]
.text:0041227C                 test    al, al
.text:0041227E                 jnz     short loc_412260
.text:00412280
.text:00412280 loc_412280:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:00412280                                         ; ___addmntentstr+2EA↓j
.text:00412280                 mov     ebx, [esp+4Ch+var_28]
.text:00412284                 mov     edx, ebx
.text:00412286                 movzx   eax, byte ptr [ebx]
.text:00412289                 test    al, al
.text:0041228B                 jz      short loc_4122B0
.text:0041228D                 lea     esi, [esi+0]
.text:00412290
.text:00412290 loc_412290:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:00412290                 cmp     al, 20h ; ' '
.text:00412292                 jz      loc_41243A
.text:00412298                 cmp     al, 9
.text:0041229A                 jz      loc_41243A
.text:004122A0                 cmp     al, 5Ch ; '\'
.text:004122A2                 jz      loc_41243A
.text:004122A8                 inc     ebx
.text:004122A9                 movzx   eax, byte ptr [ebx]
.text:004122AC                 test    al, al
.text:004122AE                 jnz     short loc_412290
.text:004122B0
.text:004122B0 loc_4122B0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:004122B0                                         ; ___addmntentstr+21C↓j ...
.text:004122B0                 mov     ebx, [esp+4Ch+var_24]
.text:004122B4                 mov     edx, ebx
.text:004122B6                 movzx   eax, byte ptr [ebx]
.text:004122B9                 test    al, al
.text:004122BB                 jz      short loc_4122E0
.text:004122BD                 lea     esi, [esi+0]
.text:004122C0
.text:004122C0 loc_4122C0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:004122C0                 cmp     al, 20h ; ' '
.text:004122C2                 jz      loc_4123BE
.text:004122C8                 cmp     al, 9
.text:004122CA                 jz      loc_4123BE
.text:004122D0                 cmp     al, 5Ch ; '\'
.text:004122D2                 jz      loc_4123BE
.text:004122D8                 inc     ebx
.text:004122D9                 movzx   eax, byte ptr [ebx]
.text:004122DC                 test    al, al
.text:004122DE                 jnz     short loc_4122C0
.text:004122E0
.text:004122E0 loc_4122E0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:004122E0                                         ; ___addmntentstr+1A0↓j ...
.text:004122E0                 mov     edx, [esp+4Ch+Str]
.text:004122E4                 mov     ebx, edx
.text:004122E6                 movzx   eax, byte ptr [edx]
.text:004122E9                 test    al, al
.text:004122EB                 jz      short loc_412304
.text:004122ED                 lea     esi, [esi+0]
.text:004122F0
.text:004122F0 loc_4122F0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:004122F0                 cmp     al, 20h ; ' '
.text:004122F2                 jz      short loc_41234C
.text:004122F4                 cmp     al, 9
.text:004122F6                 jz      short loc_41234C
.text:004122F8                 cmp     al, 5Ch ; '\'
.text:004122FA                 jz      short loc_41234C
.text:004122FC                 inc     ebx
.text:004122FD                 movzx   eax, byte ptr [ebx]
.text:00412300                 test    al, al
.text:00412302                 jnz     short loc_4122F0
.text:00412304
.text:00412304 loc_412304:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:00412304                                         ; ___addmntentstr+12E↓j ...
.text:00412304                 mov     [esp+4Ch+var_38], edx
.text:00412308                 mov     ebx, [esp+4Ch+var_18]
.text:0041230C                 mov     ecx, [esp+4Ch+var_1C]
.text:00412310                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00412318                 mov     edx, [esp+4Ch+var_2C]
.text:0041231C                 mov     [esp+4Ch+var_30], ebx
.text:00412320                 mov     ebx, [esp+4Ch+var_24]
.text:00412324                 mov     [esp+4Ch+var_34], ecx
.text:00412328                 mov     ecx, [esp+4Ch+var_28]
.text:0041232C                 mov     [esp+4Ch+var_3C], ebx
.text:00412330                 mov     ebx, [esp+4Ch+arg_0]
.text:00412334                 mov     [esp+4Ch+var_40], ecx
.text:00412338                 mov     [esp+4Ch+var_44], edx
.text:0041233C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0041233F                 call    sprintf
.text:00412344                 add     esp, 48h
.text:00412347                 shr     eax, 1Fh
.text:0041234A                 pop     ebx
.text:0041234B                 retn
.text:0041234C ; ---------------------------------------------------------------------------
.text:0041234C
.text:0041234C loc_41234C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0041234C                                         ; ___addmntentstr+D6↑j ...
.text:0041234C                 test    al, al
.text:0041234E                 jz      short loc_412304
.text:00412350                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00412353                 mov     ebx, edx
.text:00412355                 call    strlen
.text:0041235A                 lea     edx, ds:1[eax*4]
.text:00412361                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00412364                 call    malloc
.text:00412369                 mov     [esp+4Ch+Str], eax
.text:0041236D                 mov     edx, eax
.text:0041236F                 nop
.text:00412370
.text:00412370 loc_412370:                             ; CODE XREF: ___addmntentstr+168↓j
.text:00412370                 movzx   eax, byte ptr [ebx]
.text:00412373                 cmp     al, 20h ; ' '
.text:00412375                 jz      short loc_4123AD
.text:00412377                 cmp     al, 9
.text:00412379                 jz      short loc_41239C
.text:0041237B                 cmp     al, 5Ch ; '\'
.text:0041237D                 jz      short loc_412393
.text:0041237F                 mov     [edx], al
.text:00412381
.text:00412381 loc_412381:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:00412381                                         ; ___addmntentstr+18B↓j ...
.text:00412381                 movzx   ecx, byte ptr [ebx]
.text:00412384                 inc     edx
.text:00412385                 inc     ebx
.text:00412386                 test    cl, cl
.text:00412388                 jnz     short loc_412370
.text:0041238A                 mov     edx, [esp+4Ch+Str]
.text:0041238E                 jmp     loc_412304
.text:00412393 ; ---------------------------------------------------------------------------
.text:00412393
.text:00412393 loc_412393:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:00412393                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412396                 inc     edx
.text:00412397                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041239A                 jmp     short loc_412381
.text:0041239C ; ---------------------------------------------------------------------------
.text:0041239C
.text:0041239C loc_41239C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0041239C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041239F                 inc     edx
.text:004123A0                 mov     byte ptr [edx], 30h ; '0'
.text:004123A3                 inc     edx
.text:004123A4                 mov     byte ptr [edx], 31h ; '1'
.text:004123A7                 inc     edx
.text:004123A8                 mov     byte ptr [edx], 32h ; '2'
.text:004123AB                 jmp     short loc_412381
.text:004123AD ; ---------------------------------------------------------------------------
.text:004123AD
.text:004123AD loc_4123AD:                             ; CODE XREF: ___addmntentstr+155↑j
.text:004123AD                 mov     byte ptr [edx], 5Ch ; '\'
.text:004123B0                 inc     edx
.text:004123B1                 mov     byte ptr [edx], 30h ; '0'
.text:004123B4                 inc     edx
.text:004123B5                 mov     byte ptr [edx], 34h ; '4'
.text:004123B8                 inc     edx
.text:004123B9                 mov     byte ptr [edx], 30h ; '0'
.text:004123BC                 jmp     short loc_412381
.text:004123BE ; ---------------------------------------------------------------------------
.text:004123BE
.text:004123BE loc_4123BE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:004123BE                                         ; ___addmntentstr+AA↑j ...
.text:004123BE                 test    al, al
.text:004123C0                 jz      loc_4122E0
.text:004123C6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:004123C9                 mov     ebx, edx
.text:004123CB                 call    strlen
.text:004123D0                 lea     edx, ds:1[eax*4]
.text:004123D7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004123DA                 call    malloc
.text:004123DF                 mov     [esp+4Ch+var_24], eax
.text:004123E3                 mov     edx, eax
.text:004123E5                 lea     esi, [esi+0]
.text:004123E9                 lea     edi, [edi+0]
.text:004123F0
.text:004123F0 loc_4123F0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:004123F0                 movzx   eax, byte ptr [ebx]
.text:004123F3                 cmp     al, 20h ; ' '
.text:004123F5                 jz      short loc_412429
.text:004123F7                 cmp     al, 9
.text:004123F9                 jz      short loc_412418
.text:004123FB                 cmp     al, 5Ch ; '\'
.text:004123FD                 jz      short loc_41240F
.text:004123FF                 mov     [edx], al
.text:00412401
.text:00412401 loc_412401:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:00412401                                         ; ___addmntentstr+207↓j ...
.text:00412401                 movzx   ecx, byte ptr [ebx]
.text:00412404                 inc     edx
.text:00412405                 inc     ebx
.text:00412406                 test    cl, cl
.text:00412408                 jnz     short loc_4123F0
.text:0041240A                 jmp     loc_4122E0
.text:0041240F ; ---------------------------------------------------------------------------
.text:0041240F
.text:0041240F loc_41240F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0041240F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412412                 inc     edx
.text:00412413                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412416                 jmp     short loc_412401
.text:00412418 ; ---------------------------------------------------------------------------
.text:00412418
.text:00412418 loc_412418:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:00412418                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041241B                 inc     edx
.text:0041241C                 mov     byte ptr [edx], 30h ; '0'
.text:0041241F                 inc     edx
.text:00412420                 mov     byte ptr [edx], 31h ; '1'
.text:00412423                 inc     edx
.text:00412424                 mov     byte ptr [edx], 32h ; '2'
.text:00412427                 jmp     short loc_412401
.text:00412429 ; ---------------------------------------------------------------------------
.text:00412429
.text:00412429 loc_412429:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:00412429                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041242C                 inc     edx
.text:0041242D                 mov     byte ptr [edx], 30h ; '0'
.text:00412430                 inc     edx
.text:00412431                 mov     byte ptr [edx], 34h ; '4'
.text:00412434                 inc     edx
.text:00412435                 mov     byte ptr [edx], 30h ; '0'
.text:00412438                 jmp     short loc_412401
.text:0041243A ; ---------------------------------------------------------------------------
.text:0041243A
.text:0041243A loc_41243A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0041243A                                         ; ___addmntentstr+7A↑j ...
.text:0041243A                 test    al, al
.text:0041243C                 jz      loc_4122B0
.text:00412442                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00412445                 mov     ebx, edx
.text:00412447                 call    strlen
.text:0041244C                 lea     edx, ds:1[eax*4]
.text:00412453                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00412456                 call    malloc
.text:0041245B                 mov     [esp+4Ch+var_28], eax
.text:0041245F                 mov     edx, eax
.text:00412461                 jmp     short loc_412470
.text:00412461 ; ---------------------------------------------------------------------------
.text:00412463                 align 10h
.text:00412470
.text:00412470 loc_412470:                             ; CODE XREF: ___addmntentstr+241↑j
.text:00412470                                         ; ___addmntentstr+268↓j
.text:00412470                 movzx   eax, byte ptr [ebx]
.text:00412473                 cmp     al, 20h ; ' '
.text:00412475                 jz      short loc_4124A9
.text:00412477                 cmp     al, 9
.text:00412479                 jz      short loc_412498
.text:0041247B                 cmp     al, 5Ch ; '\'
.text:0041247D                 jz      short loc_41248F
.text:0041247F                 mov     [edx], al
.text:00412481
.text:00412481 loc_412481:                             ; CODE XREF: ___addmntentstr+276↓j
.text:00412481                                         ; ___addmntentstr+287↓j ...
.text:00412481                 movzx   ecx, byte ptr [ebx]
.text:00412484                 inc     edx
.text:00412485                 inc     ebx
.text:00412486                 test    cl, cl
.text:00412488                 jnz     short loc_412470
.text:0041248A                 jmp     loc_4122B0
.text:0041248F ; ---------------------------------------------------------------------------
.text:0041248F
.text:0041248F loc_41248F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0041248F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412492                 inc     edx
.text:00412493                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412496                 jmp     short loc_412481
.text:00412498 ; ---------------------------------------------------------------------------
.text:00412498
.text:00412498 loc_412498:                             ; CODE XREF: ___addmntentstr+259↑j
.text:00412498                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041249B                 inc     edx
.text:0041249C                 mov     byte ptr [edx], 30h ; '0'
.text:0041249F                 inc     edx
.text:004124A0                 mov     byte ptr [edx], 31h ; '1'
.text:004124A3                 inc     edx
.text:004124A4                 mov     byte ptr [edx], 32h ; '2'
.text:004124A7                 jmp     short loc_412481
.text:004124A9 ; ---------------------------------------------------------------------------
.text:004124A9
.text:004124A9 loc_4124A9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:004124A9                 mov     byte ptr [edx], 5Ch ; '\'
.text:004124AC                 inc     edx
.text:004124AD                 mov     byte ptr [edx], 30h ; '0'
.text:004124B0                 inc     edx
.text:004124B1                 mov     byte ptr [edx], 34h ; '4'
.text:004124B4                 inc     edx
.text:004124B5                 mov     byte ptr [edx], 30h ; '0'
.text:004124B8                 jmp     short loc_412481
.text:004124B8 ; ---------------------------------------------------------------------------
.text:004124BA                 align 10h
.text:004124C0
.text:004124C0 loc_4124C0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:004124C0                                         ; ___addmntentstr+4A↑j ...
.text:004124C0                 test    al, al
.text:004124C2                 jz      loc_412280
.text:004124C8                 mov     ebx, [esp+4Ch+var_2C]
.text:004124CC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:004124CF                 call    strlen
.text:004124D4                 lea     edx, ds:1[eax*4]
.text:004124DB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004124DE                 call    malloc
.text:004124E3                 mov     [esp+4Ch+var_2C], eax
.text:004124E7                 mov     edx, eax
.text:004124E9                 lea     esi, [esi+0]
.text:004124F0
.text:004124F0 loc_4124F0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:004124F0                 movzx   eax, byte ptr [ebx]
.text:004124F3                 cmp     al, 20h ; ' '
.text:004124F5                 jz      short loc_412530
.text:004124F7                 cmp     al, 9
.text:004124F9                 jz      short loc_412518
.text:004124FB                 cmp     al, 5Ch ; '\'
.text:004124FD                 jz      short loc_41250F
.text:004124FF                 mov     [edx], al
.text:00412501
.text:00412501 loc_412501:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:00412501                                         ; ___addmntentstr+307↓j ...
.text:00412501                 movzx   ecx, byte ptr [ebx]
.text:00412504                 inc     edx
.text:00412505                 inc     ebx
.text:00412506                 test    cl, cl
.text:00412508                 jnz     short loc_4124F0
.text:0041250A                 jmp     loc_412280
.text:0041250F ; ---------------------------------------------------------------------------
.text:0041250F
.text:0041250F loc_41250F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0041250F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412512                 inc     edx
.text:00412513                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412516                 jmp     short loc_412501
.text:00412518 ; ---------------------------------------------------------------------------
.text:00412518
.text:00412518 loc_412518:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:00412518                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041251B                 inc     edx
.text:0041251C                 mov     byte ptr [edx], 30h ; '0'
.text:0041251F                 inc     edx
.text:00412520                 mov     byte ptr [edx], 31h ; '1'
.text:00412523                 inc     edx
.text:00412524                 mov     byte ptr [edx], 32h ; '2'
.text:00412527                 jmp     short loc_412501
.text:00412527 ; ---------------------------------------------------------------------------
.text:00412529                 align 10h
.text:00412530
.text:00412530 loc_412530:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:00412530                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412533                 inc     edx
.text:00412534                 mov     byte ptr [edx], 30h ; '0'
.text:00412537                 inc     edx
.text:00412538                 mov     byte ptr [edx], 34h ; '4'
.text:0041253B                 inc     edx
.text:0041253C                 mov     byte ptr [edx], 30h ; '0'
.text:0041253F                 jmp     short loc_412501
.text:00412541 ; ---------------------------------------------------------------------------
.text:00412541
.text:00412541 loc_412541:                             ; CODE XREF: ___addmntentstr+38↑j
.text:00412541                 movzx   eax, byte ptr [ecx]
.text:00412544                 jmp     loc_4124C0
.text:00412544 ___addmntentstr endp
.text:00412544
.text:00412544 ; ---------------------------------------------------------------------------
.text:00412549                 align 10h
.text:00412550
.text:00412550 ; =============== S U B R O U T I N E =======================================
.text:00412550
.text:00412550
.text:00412550 sub_412550      proc near               ; CODE XREF: sub_40F5F0+99↑p
.text:00412550
.text:00412550 nBufferLength   = dword ptr -1Ch
.text:00412550 lpBuffer        = dword ptr -18h
.text:00412550 dwBytes         = dword ptr -14h
.text:00412550 var_8           = dword ptr -8
.text:00412550 var_4           = dword ptr -4
.text:00412550
.text:00412550                 sub     esp, 1Ch
.text:00412553                 mov     [esp+1Ch+var_8], ebx
.text:00412557                 mov     [esp+1Ch+var_4], esi
.text:0041255B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:00412563                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0041256A                 call    GetLogicalDriveStringsA
.text:0041256F                 sub     esp, 8
.text:00412572                 mov     ebx, eax
.text:00412574                 call    GetProcessHeap
.text:00412579                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0041257C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:00412580                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:00412588                 call    HeapAlloc
.text:0041258D                 sub     esp, 0Ch
.text:00412590                 mov     esi, eax
.text:00412592                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:00412595                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:00412599                 call    GetLogicalDriveStringsA
.text:0041259E                 sub     esp, 8
.text:004125A1                 mov     eax, esi
.text:004125A3                 mov     ebx, [esp+1Ch+var_8]
.text:004125A7                 mov     esi, [esp+1Ch+var_4]
.text:004125AB                 add     esp, 1Ch
.text:004125AE                 retn
.text:004125AE sub_412550      endp
.text:004125AE
.text:004125AF
.text:004125AF ; =============== S U B R O U T I N E =======================================
.text:004125AF
.text:004125AF
.text:004125AF ; int __cdecl sub_4125AF(char *, char *)
.text:004125AF sub_4125AF      proc near               ; DATA XREF: sub_4125AF:loc_41263D↓o
.text:004125AF
.text:004125AF FileName        = dword ptr -1Ch
.text:004125AF Mode            = dword ptr -18h
.text:004125AF dwBytes         = dword ptr -14h
.text:004125AF arg_0           = dword ptr  4
.text:004125AF arg_4           = dword ptr  8
.text:004125AF
.text:004125AF                 ja      short $+2
.text:004125B1
.text:004125B1 loc_4125B1:                             ; CODE XREF: sub_4125AF↑j
.text:004125B1                 jmp     short loc_4125C0
.text:004125B1 ; ---------------------------------------------------------------------------
.text:004125B3                 align 10h
.text:004125C0
.text:004125C0 loc_4125C0:                             ; CODE XREF: sub_4125AF:loc_4125B1↑j
.text:004125C0                 push    edi
.text:004125C1                 push    esi
.text:004125C2                 push    ebx
.text:004125C3                 sub     esp, 10h
.text:004125C6                 mov     ebx, [esp+1Ch+arg_0]
.text:004125CA                 mov     edx, [esp+1Ch+arg_4]
.text:004125CE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:004125D1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:004125D5                 call    fopen
.text:004125DA                 test    eax, eax
.text:004125DC                 mov     edi, eax
.text:004125DE                 jz      short loc_41263D
.text:004125E0
.text:004125E0 loc_4125E0:                             ; CODE XREF: sub_4125AF+A2↓j
.text:004125E0                                         ; sub_4125AF+AB↓j
.text:004125E0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:004125E8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:004125EF                 call    GetLogicalDriveStringsA
.text:004125F4                 sub     esp, 8
.text:004125F7                 mov     esi, eax
.text:004125F9                 call    GetProcessHeap
.text:004125FE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:00412601                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:00412605                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0041260D                 call    HeapAlloc
.text:00412612                 sub     esp, 0Ch
.text:00412615                 mov     ebx, eax
.text:00412617                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0041261A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0041261E                 call    GetLogicalDriveStringsA
.text:00412623                 mov     off_417124, ebx ; "notset"
.text:00412629                 sub     esp, 8
.text:0041262C                 xor     eax, eax
.text:0041262E                 test    ebx, ebx
.text:00412630                 setz    al
.text:00412633                 add     esp, 10h
.text:00412636                 pop     ebx
.text:00412637                 dec     eax
.text:00412638                 and     eax, edi
.text:0041263A                 pop     esi
.text:0041263B                 pop     edi
.text:0041263C                 retn
.text:0041263D ; ---------------------------------------------------------------------------
.text:0041263D
.text:0041263D loc_41263D:                             ; CODE XREF: sub_4125AF+2F↑j
.text:0041263D                 mov     [esp+1Ch+Mode], offset sub_4125AF ; Mode
.text:00412645                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00412648                 call    fopen
.text:0041264D                 test    eax, eax
.text:0041264F                 mov     edi, eax
.text:00412651                 jnz     short loc_4125E0
.text:00412653                 call    sub_413450
.text:00412658                 mov     edi, eax
.text:0041265A                 jmp     short loc_4125E0
.text:0041265A sub_4125AF      endp
.text:0041265A
.text:0041265A ; ---------------------------------------------------------------------------
.text:0041265C                 align 10h
.text:00412660                 sub     esp, 0Ch
.text:00412663                 mov     eax, [esp+10h]
.text:00412667                 test    eax, eax
.text:00412669                 jz      short loc_412673
.text:0041266B                 mov     [esp], eax
.text:0041266E                 call    fclose
.text:00412673
.text:00412673 loc_412673:                             ; CODE XREF: .text:00412669↑j
.text:00412673                 call    GetProcessHeap
.text:00412678                 mov     [esp], eax
.text:0041267B                 mov     ecx, off_417124 ; "notset"
.text:00412681                 mov     dword ptr [esp+4], 0
.text:00412689                 mov     [esp+8], ecx
.text:0041268D                 call    HeapFree
.text:00412692                 mov     edx, off_417120 ; "notset"
.text:00412698                 sub     esp, 0Ch
.text:0041269B                 mov     eax, 1
.text:004126A0                 mov     off_417124, edx ; "notset"
.text:004126A6                 add     esp, 0Ch
.text:004126A9                 retn
.text:004126A9 ; ---------------------------------------------------------------------------
.text:004126AA                 align 10h
.text:004126B0                 push    edi
.text:004126B1                 push    esi
.text:004126B2                 push    ebx
.text:004126B3                 sub     esp, 10h
.text:004126B6                 mov     edi, [esp+24h]
.text:004126BA                 mov     [esp], edi
.text:004126BD                 call    strlen
.text:004126C2                 mov     edx, [esp+20h]
.text:004126C6                 mov     esi, eax
.text:004126C8                 mov     ebx, [edx+0Ch]
.text:004126CB                 nop
.text:004126CC                 lea     esi, [esi+0]
.text:004126D0
.text:004126D0 loc_4126D0:                             ; CODE XREF: .text:00412701↓j
.text:004126D0                 mov     [esp+4], edi
.text:004126D4                 mov     [esp], ebx
.text:004126D7                 call    strstr
.text:004126DC                 test    eax, eax
.text:004126DE                 jz      short loc_412703
.text:004126E0                 cmp     eax, ebx
.text:004126E2                 jz      short loc_412705
.text:004126E4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:004126E8                 jz      short loc_412710
.text:004126EA
.text:004126EA loc_4126EA:                             ; CODE XREF: .text:00412720↓j
.text:004126EA                 mov     [esp], ebx
.text:004126ED                 mov     dword ptr [esp+4], 2Ch ; ','
.text:004126F5                 call    strchr
.text:004126FA                 test    eax, eax
.text:004126FC                 mov     ebx, eax
.text:004126FE                 jz      short loc_412703
.text:00412700                 inc     ebx
.text:00412701                 jmp     short loc_4126D0
.text:00412703 ; ---------------------------------------------------------------------------
.text:00412703
.text:00412703 loc_412703:                             ; CODE XREF: .text:004126DE↑j
.text:00412703                                         ; .text:004126FE↑j
.text:00412703                 xor     eax, eax
.text:00412705
.text:00412705 loc_412705:                             ; CODE XREF: .text:004126E2↑j
.text:00412705                                         ; .text:00412716↓j ...
.text:00412705                 add     esp, 10h
.text:00412708                 pop     ebx
.text:00412709                 pop     esi
.text:0041270A                 pop     edi
.text:0041270B                 retn
.text:0041270B ; ---------------------------------------------------------------------------
.text:0041270C                 align 10h
.text:00412710
.text:00412710 loc_412710:                             ; CODE XREF: .text:004126E8↑j
.text:00412710                 movzx   edx, byte ptr [esi+eax]
.text:00412714                 test    dl, dl
.text:00412716                 jz      short loc_412705
.text:00412718                 cmp     dl, 3Dh ; '='
.text:0041271B                 jz      short loc_412705
.text:0041271D                 cmp     dl, 2Ch ; ','
.text:00412720                 jnz     short loc_4126EA
.text:00412722                 jmp     short loc_412705
.text:00412722 ; ---------------------------------------------------------------------------
.text:00412724                 align 10h
.text:00412730
.text:00412730 ; =============== S U B R O U T I N E =======================================
.text:00412730
.text:00412730
.text:00412730 ; int __cdecl sub_412730(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00412730 sub_412730      proc near               ; CODE XREF: sub_4128B0+93↓p
.text:00412730
.text:00412730 pvReserved      = dword ptr -35Ch
.text:00412730 pUnkOuter       = dword ptr -358h
.text:00412730 dwClsContext    = dword ptr -354h
.text:00412730 riid            = dword ptr -350h
.text:00412730 ppv             = dword ptr -34Ch
.text:00412730 cchWideChar     = dword ptr -348h
.text:00412730 var_334         = byte ptr -334h
.text:00412730 var_330         = dword ptr -330h
.text:00412730 String2         = byte ptr -32Ch
.text:00412730 WideCharStr     = word ptr -21Ch
.text:00412730 lpMultiByteStr  = dword ptr  4
.text:00412730 lpString1       = dword ptr  8
.text:00412730
.text:00412730                 push    edi
.text:00412731                 push    esi
.text:00412732                 push    ebx
.text:00412733                 sub     esp, 350h
.text:00412739                 mov     edi, [esp+35Ch+lpString1]
.text:00412740                 mov     byte ptr [edi], 0
.text:00412743                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0041274A                 call    OleInitialize
.text:0041274F                 sub     esp, 4
.text:00412752                 cmp     eax, 1
.text:00412755                 ja      loc_41288F
.text:0041275B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00412763                 lea     ecx, [esp+35Ch+var_330]
.text:00412767                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0041276B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00412773                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0041277B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00412782                 call    CoCreateInstance
.text:00412787                 sub     esp, 14h
.text:0041278A                 test    eax, eax
.text:0041278C                 js      loc_41288F
.text:00412792                 mov     ebx, [esp+35Ch+var_330]
.text:00412796                 lea     edx, [esp+35Ch+var_334]
.text:0041279A                 mov     esi, [ebx]
.text:0041279C                 mov     [esp+35Ch+dwClsContext], edx
.text:004127A0                 mov     [esp+35Ch+pvReserved], ebx
.text:004127A3                 xor     ebx, ebx
.text:004127A5                 mov     [esp+35Ch+pUnkOuter], offset dword_414540
.text:004127AD                 call    dword ptr [esi]
.text:004127AF                 sub     esp, 0Ch
.text:004127B2                 lea     esi, [esp+35Ch+WideCharStr]
.text:004127B9                 call    AreFileApisANSI
.text:004127BE                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:004127C6                 test    eax, eax
.text:004127C8                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:004127CF                 setz    bl
.text:004127D2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:004127D6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:004127DE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:004127E2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:004127EA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:004127ED                 call    MultiByteToWideChar
.text:004127F2                 sub     esp, 18h
.text:004127F5                 test    eax, eax
.text:004127F7                 js      loc_41288F
.text:004127FD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00412801                 mov     ebx, [edx]
.text:00412803                 mov     [esp+35Ch+dwClsContext], 0
.text:0041280B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0041280F                 mov     [esp+35Ch+pvReserved], edx
.text:00412812                 call    dword ptr [ebx+14h]
.text:00412815                 sub     esp, 0Ch
.text:00412818                 test    eax, eax
.text:0041281A                 js      short loc_41288F
.text:0041281C                 mov     ebx, [esp+35Ch+var_330]
.text:00412820                 lea     esi, [esp+35Ch+String2]
.text:00412824                 mov     ecx, [ebx]
.text:00412826                 mov     [esp+35Ch+pvReserved], ebx
.text:00412829                 mov     [esp+35Ch+ppv], 0
.text:00412831                 mov     [esp+35Ch+riid], 0
.text:00412839                 mov     [esp+35Ch+dwClsContext], 104h
.text:00412841                 mov     [esp+35Ch+pUnkOuter], esi
.text:00412845                 call    dword ptr [ecx+0Ch]
.text:00412848                 sub     esp, 14h
.text:0041284B                 mov     ebx, eax
.text:0041284D                 test    eax, eax
.text:0041284F                 js      short loc_41288F
.text:00412851                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00412855                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00412858                 call    lstrcpyA
.text:0041285D                 sub     esp, 8
.text:00412860                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00412864                 mov     ecx, [edi]
.text:00412866                 mov     [esp+35Ch+pvReserved], edi
.text:00412869                 call    dword ptr [ecx+8]
.text:0041286C                 sub     esp, 4
.text:0041286F                 mov     edx, [esp+35Ch+var_330]
.text:00412873                 mov     esi, [edx]
.text:00412875                 mov     [esp+35Ch+pvReserved], edx
.text:00412878                 call    dword ptr [esi+8]
.text:0041287B                 sub     esp, 4
.text:0041287E                 call    CoUninitialize
.text:00412883                 mov     eax, ebx
.text:00412885
.text:00412885 loc_412885:                             ; CODE XREF: sub_412730+177↓j
.text:00412885                 add     esp, 350h
.text:0041288B                 pop     ebx
.text:0041288C                 pop     esi
.text:0041288D                 pop     edi
.text:0041288E                 retn
.text:0041288F ; ---------------------------------------------------------------------------
.text:0041288F
.text:0041288F loc_41288F:                             ; CODE XREF: sub_412730+25↑j
.text:0041288F                                         ; sub_412730+5C↑j ...
.text:0041288F                 call    sub_410C90
.text:00412894                 mov     edi, eax
.text:00412896                 call    _errno
.text:0041289B                 mov     [eax], edi
.text:0041289D                 call    CoUninitialize
.text:004128A2                 mov     eax, 0FFFFFFFFh
.text:004128A7                 jmp     short loc_412885
.text:004128A7 sub_412730      endp
.text:004128A7
.text:004128A7 ; ---------------------------------------------------------------------------
.text:004128A9 ; const char aLnk[]
.text:004128A9 aLnk            db '.lnk',0             ; DATA XREF: sub_4128B0+53↓o
.text:004128A9                                         ; sub_4128B0:loc_412915↓o
.text:004128AE                 align 10h
.text:004128B0
.text:004128B0 ; =============== S U B R O U T I N E =======================================
.text:004128B0
.text:004128B0
.text:004128B0 ; int __cdecl sub_4128B0(char *, LPSTR lpString1)
.text:004128B0 sub_4128B0      proc near               ; CODE XREF: sub_410270+96↑p
.text:004128B0
.text:004128B0 Str             = dword ptr -1Ch
.text:004128B0 Source          = dword ptr -18h
.text:004128B0 Destination     = dword ptr -14h
.text:004128B0 arg_0           = dword ptr  4
.text:004128B0 lpString1       = dword ptr  8
.text:004128B0
.text:004128B0                 push    ebp
.text:004128B1                 push    edi
.text:004128B2                 push    esi
.text:004128B3                 push    ebx
.text:004128B4                 sub     esp, 0Ch
.text:004128B7                 mov     ebx, [esp+1Ch+arg_0]
.text:004128BB                 mov     ebp, [esp+1Ch+lpString1]
.text:004128BF                 mov     [esp+1Ch+Str], ebx ; Str
.text:004128C2                 call    strlen
.text:004128C7                 add     eax, 5
.text:004128CA                 mov     [esp+1Ch+Str], eax ; Size
.text:004128CD                 call    malloc
.text:004128D2                 mov     [esp+1Ch+Destination], eax
.text:004128D6                 test    eax, eax
.text:004128D8                 jz      loc_412980
.text:004128DE                 mov     [esp+1Ch+Source], ebx ; Source
.text:004128E2                 mov     [esp+1Ch+Str], eax ; Destination
.text:004128E5                 call    strcpy
.text:004128EA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:004128F2                 mov     eax, [esp+1Ch+Destination]
.text:004128F6                 mov     [esp+1Ch+Str], eax ; Str
.text:004128F9                 call    strrchr
.text:004128FE                 test    eax, eax
.text:00412900                 jz      short loc_412915
.text:00412902                 cld
.text:00412903                 mov     ebx, offset aLnk ; ".lnk"
.text:00412908                 mov     ecx, 5
.text:0041290D                 mov     esi, eax
.text:0041290F                 mov     edi, ebx
.text:00412911                 repe cmpsb
.text:00412913                 jz      short loc_412929
.text:00412915
.text:00412915 loc_412915:                             ; CODE XREF: sub_4128B0+50↑j
.text:00412915                 mov     [esp+1Ch+Source], offset aLnk ; ".lnk"
.text:0041291D                 mov     edx, [esp+1Ch+Destination]
.text:00412921                 mov     [esp+1Ch+Str], edx ; Destination
.text:00412924                 call    strcat
.text:00412929
.text:00412929 loc_412929:                             ; CODE XREF: sub_4128B0+63↑j
.text:00412929                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00412930                 call    SetErrorMode
.text:00412935                 sub     esp, 4
.text:00412938                 mov     ebx, [esp+1Ch+Destination]
.text:0041293C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00412940                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00412943                 call    sub_412730
.text:00412948                 mov     [esp+1Ch+Str], ebx ; Block
.text:0041294B                 mov     esi, eax
.text:0041294D                 call    free
.text:00412952                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00412959                 call    SetErrorMode
.text:0041295E                 sub     esp, 4
.text:00412961                 mov     [esp+1Ch+Str], ebp
.text:00412964                 call    sub_40F020
.text:00412969                 inc     esi
.text:0041296A                 jz      short loc_412980
.text:0041296C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:00412970                 add     esp, 0Ch
.text:00412973                 pop     ebx
.text:00412974                 pop     esi
.text:00412975                 pop     edi
.text:00412976                 pop     ebp
.text:00412977                 jmp     strlen
.text:00412977 ; ---------------------------------------------------------------------------
.text:0041297C                 align 10h
.text:00412980
.text:00412980 loc_412980:                             ; CODE XREF: sub_4128B0+28↑j
.text:00412980                                         ; sub_4128B0+BA↑j
.text:00412980                 add     esp, 0Ch
.text:00412983                 mov     eax, 0FFFFFFFFh
.text:00412988                 pop     ebx
.text:00412989                 pop     esi
.text:0041298A                 pop     edi
.text:0041298B                 pop     ebp
.text:0041298C                 retn
.text:0041298C sub_4128B0      endp
.text:0041298C
.text:0041298C ; ---------------------------------------------------------------------------
.text:0041298D                 align 10h
.text:00412990
.text:00412990 ; =============== S U B R O U T I N E =======================================
.text:00412990
.text:00412990
.text:00412990 ; int __cdecl sub_412990(LPCSTR, int, int)
.text:00412990 sub_412990      proc near               ; CODE XREF: sub_410270+42↑p
.text:00412990                                         ; sub_410270+AE↑p ...
.text:00412990
.text:00412990 lpFileName      = dword ptr -2Ch
.text:00412990 dwDesiredAccess = dword ptr -28h
.text:00412990 dwShareMode     = dword ptr -24h
.text:00412990 lpSecurityAttributes= dword ptr -20h
.text:00412990 dwCreationDisposition= dword ptr -1Ch
.text:00412990 dwFlagsAndAttributes= dword ptr -18h
.text:00412990 hTemplateFile   = dword ptr -14h
.text:00412990 var_10          = dword ptr -10h
.text:00412990 var_C           = dword ptr -0Ch
.text:00412990 var_8           = dword ptr -8
.text:00412990 var_4           = dword ptr -4
.text:00412990 arg_0           = dword ptr  4
.text:00412990 arg_4           = dword ptr  8
.text:00412990 arg_8           = dword ptr  0Ch
.text:00412990
.text:00412990 ; FUNCTION CHUNK AT .text:0040EB10 SIZE 0000013A BYTES
.text:00412990
.text:00412990                 sub     esp, 0Ch
.text:00412993                 mov     ecx, [esp+0Ch+arg_0]
.text:00412997                 mov     edx, [esp+0Ch+arg_4]
.text:0041299B                 mov     eax, [esp+0Ch+arg_8]
.text:0041299F                 test    ecx, ecx
.text:004129A1                 jnz     short loc_4129C0
.text:004129A3                 test    edx, edx
.text:004129A5                 jz      short loc_4129C0
.text:004129A7                 test    eax, eax
.text:004129A9                 jz      short loc_4129C0
.text:004129AB                 mov     [esp+0Ch+arg_4], eax
.text:004129AF                 mov     [esp+0Ch+arg_0], edx
.text:004129B3                 add     esp, 0Ch
.text:004129B6                 jmp     loc_40EB10
.text:004129B6 ; ---------------------------------------------------------------------------
.text:004129BB                 align 10h
.text:004129C0
.text:004129C0 loc_4129C0:                             ; CODE XREF: sub_412990+11↑j
.text:004129C0                                         ; sub_412990+15↑j ...
.text:004129C0                 call    _errno
.text:004129C5                 mov     dword ptr [eax], 16h
.text:004129CB                 mov     eax, 0FFFFFFFFh
.text:004129D0                 add     esp, 0Ch
.text:004129D3                 retn
.text:004129D3 sub_412990      endp
.text:004129D3
.text:004129D3 ; ---------------------------------------------------------------------------
.text:004129D4                 align 10h
.text:004129E0 aFile           db 'file',0             ; DATA XREF: sub_412A10:loc_412A3C↓o
.text:004129E5 ; const char aSSxxxxxx[]
.text:004129E5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_412A10+9B↓o
.text:004129F5 ; const char aTemp_0[]
.text:004129F5 aTemp_0         db 'TEMP',0             ; DATA XREF: sub_412A10:loc_412AF2↓o
.text:004129F5                                         ; sub_412A10:loc_412B32↓o ...
.text:004129FA ; const char aTmp_1[]
.text:004129FA aTmp_1          db '/tmp',0             ; DATA XREF: sub_412A10+12F↓o
.text:004129FA                                         ; sub_412A10+141↓o ...
.text:004129FF aTmpdir_0       db 'TMPDIR',0           ; DATA XREF: sub_412A10:loc_412BB0↓o
.text:00412A06 aTmp_2          db 'TMP',0              ; DATA XREF: sub_412A10:loc_412C40↓o
.text:00412A0A                 align 10h
.text:00412A10
.text:00412A10 ; =============== S U B R O U T I N E =======================================
.text:00412A10
.text:00412A10
.text:00412A10 ; int __cdecl sub_412A10(char *Buffer, int, char *, char *, int)
.text:00412A10 sub_412A10      proc near               ; CODE XREF: sub_413450+3B↓p
.text:00412A10
.text:00412A10 Str             = dword ptr -1BCh
.text:00412A10 Format          = dword ptr -1B8h
.text:00412A10 var_1B4         = dword ptr -1B4h
.text:00412A10 var_1B0         = dword ptr -1B0h
.text:00412A10 var_1AC         = dword ptr -1ACh
.text:00412A10 var_1A8         = dword ptr -1A8h
.text:00412A10 var_19C         = dword ptr -19Ch
.text:00412A10 var_13C         = dword ptr -13Ch
.text:00412A10 var_DC          = dword ptr -0DCh
.text:00412A10 var_7C          = dword ptr -7Ch
.text:00412A10 Buffer          = dword ptr  4
.text:00412A10 arg_4           = dword ptr  8
.text:00412A10 arg_8           = dword ptr  0Ch
.text:00412A10 arg_C           = dword ptr  10h
.text:00412A10 arg_10          = dword ptr  14h
.text:00412A10
.text:00412A10                 push    ebp
.text:00412A11                 push    edi
.text:00412A12                 push    esi
.text:00412A13                 push    ebx
.text:00412A14                 sub     esp, 1ACh
.text:00412A1A                 mov     eax, [esp+1BCh+arg_C]
.text:00412A21                 mov     esi, [esp+1BCh+arg_8]
.text:00412A28                 test    eax, eax
.text:00412A2A                 jz      short loc_412A3C
.text:00412A2C                 mov     edx, [esp+1BCh+arg_C]
.text:00412A33                 cmp     byte ptr [edx], 0
.text:00412A36                 jnz     loc_412C70
.text:00412A3C
.text:00412A3C loc_412A3C:                             ; CODE XREF: sub_412A10+1A↑j
.text:00412A3C                 mov     eax, offset aFile ; "file"
.text:00412A41                 mov     ebp, 4
.text:00412A46                 mov     [esp+1BCh+arg_C], eax
.text:00412A4D
.text:00412A4D loc_412A4D:                             ; CODE XREF: sub_412A10+274↓j
.text:00412A4D                                         ; sub_412A10+27F↓j
.text:00412A4D                 mov     ebx, [esp+1BCh+arg_10]
.text:00412A54                 test    ebx, ebx
.text:00412A56                 jnz     loc_412BB0
.text:00412A5C
.text:00412A5C loc_412A5C:                             ; CODE XREF: sub_412A10+21C↓j
.text:00412A5C                                         ; sub_412A10+224↓j ...
.text:00412A5C                 test    esi, esi
.text:00412A5E                 jz      loc_412AF2
.text:00412A64
.text:00412A64 loc_412A64:                             ; CODE XREF: sub_412A10+176↓j
.text:00412A64                                         ; sub_412A10+19A↓j
.text:00412A64                 mov     [esp+1BCh+Str], esi ; Str
.text:00412A67                 call    strlen
.text:00412A6C                 test    eax, eax
.text:00412A6E                 mov     edx, eax
.text:00412A70                 jz      short loc_412A80
.text:00412A72                 movzx   eax, byte ptr [eax+esi-1]
.text:00412A77                 cmp     al, 2Fh ; '/'
.text:00412A79                 jz      short loc_412AE0
.text:00412A7B                 cmp     al, 5Ch ; '\'
.text:00412A7D                 jz      short loc_412AE0
.text:00412A7F                 nop
.text:00412A80
.text:00412A80 loc_412A80:                             ; CODE XREF: sub_412A10+60↑j
.text:00412A80                                         ; sub_412A10+D1↓j ...
.text:00412A80                 lea     edi, [ebp+edx+8]
.text:00412A84                 cmp     [esp+1BCh+arg_4], edi
.text:00412A8B                 jb      short loc_412AC8
.text:00412A8D                 mov     [esp+1BCh+var_1AC], ebp
.text:00412A91                 mov     ecx, [esp+1BCh+arg_C]
.text:00412A98                 mov     ebp, [esp+1BCh+Buffer]
.text:00412A9F                 mov     [esp+1BCh+var_1B0], esi
.text:00412AA3                 mov     [esp+1BCh+var_1A8], ecx
.text:00412AA7                 mov     [esp+1BCh+var_1B4], edx
.text:00412AAB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00412AB3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00412AB6                 call    sprintf
.text:00412ABB                 xor     eax, eax
.text:00412ABD
.text:00412ABD loc_412ABD:                             ; CODE XREF: sub_412A10+C8↓j
.text:00412ABD                 add     esp, 1ACh
.text:00412AC3                 pop     ebx
.text:00412AC4                 pop     esi
.text:00412AC5                 pop     edi
.text:00412AC6                 pop     ebp
.text:00412AC7                 retn
.text:00412AC8 ; ---------------------------------------------------------------------------
.text:00412AC8
.text:00412AC8 loc_412AC8:                             ; CODE XREF: sub_412A10+7B↑j
.text:00412AC8                 call    _errno
.text:00412ACD                 mov     dword ptr [eax], 16h
.text:00412AD3
.text:00412AD3 loc_412AD3:                             ; CODE XREF: sub_412A10+187↓j
.text:00412AD3                 mov     eax, 0FFFFFFFFh
.text:00412AD8                 jmp     short loc_412ABD
.text:00412AD8 ; ---------------------------------------------------------------------------
.text:00412ADA                 align 10h
.text:00412AE0
.text:00412AE0 loc_412AE0:                             ; CODE XREF: sub_412A10+69↑j
.text:00412AE0                                         ; sub_412A10+6D↑j ...
.text:00412AE0                 dec     edx
.text:00412AE1                 jz      short loc_412A80
.text:00412AE3                 movzx   eax, byte ptr [edx+esi-1]
.text:00412AE8                 cmp     al, 2Fh ; '/'
.text:00412AEA                 jz      short loc_412AE0
.text:00412AEC                 cmp     al, 5Ch ; '\'
.text:00412AEE                 jz      short loc_412AE0
.text:00412AF0                 jmp     short loc_412A80
.text:00412AF2 ; ---------------------------------------------------------------------------
.text:00412AF2
.text:00412AF2 loc_412AF2:                             ; CODE XREF: sub_412A10+4E↑j
.text:00412AF2                 mov     [esp+1BCh+Str], offset aTemp_0 ; "TEMP"
.text:00412AF9                 lea     esi, [esp+1BCh+var_13C]
.text:00412B00                 call    getenv
.text:00412B05                 mov     [esp+1BCh+Format], eax ; char *
.text:00412B09                 mov     [esp+1BCh+var_1B4], esi ; int
.text:00412B0D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00412B14                 call    sub_410270
.text:00412B19                 test    eax, eax
.text:00412B1B                 jnz     short loc_412B32
.text:00412B1D                 mov     edi, [esp+1BCh+var_13C]
.text:00412B24                 and     edi, 0F000h
.text:00412B2A                 cmp     edi, 4000h
.text:00412B30                 jz      short loc_412B9C
.text:00412B32
.text:00412B32 loc_412B32:                             ; CODE XREF: sub_412A10+10B↑j
.text:00412B32                 mov     [esp+1BCh+Str], offset aTemp_0 ; "TEMP"
.text:00412B39                 call    getenv
.text:00412B3E                 cld
.text:00412B3F                 mov     edx, offset aTmp_1 ; "/tmp"
.text:00412B44                 mov     esi, eax
.text:00412B46                 mov     ecx, 5
.text:00412B4B                 mov     edi, edx
.text:00412B4D                 repe cmpsb
.text:00412B4F                 jz      short loc_412B8C
.text:00412B51                 mov     [esp+1BCh+Format], offset aTmp_1 ; "/tmp"
.text:00412B59                 lea     ecx, [esp+1BCh+var_19C]
.text:00412B5D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00412B61                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00412B68                 call    sub_410270
.text:00412B6D                 test    eax, eax
.text:00412B6F                 jnz     short loc_412B8C
.text:00412B71                 mov     ebx, [esp+1BCh+var_19C]
.text:00412B75                 mov     esi, offset aTmp_1 ; "/tmp"
.text:00412B7A                 and     ebx, 0F000h
.text:00412B80                 cmp     ebx, 4000h
.text:00412B86                 jz      loc_412A64
.text:00412B8C
.text:00412B8C loc_412B8C:                             ; CODE XREF: sub_412A10+13F↑j
.text:00412B8C                                         ; sub_412A10+15F↑j
.text:00412B8C                 call    _errno
.text:00412B91                 mov     dword ptr [eax], 2
.text:00412B97                 jmp     loc_412AD3
.text:00412B9C ; ---------------------------------------------------------------------------
.text:00412B9C
.text:00412B9C loc_412B9C:                             ; CODE XREF: sub_412A10+120↑j
.text:00412B9C                 mov     [esp+1BCh+Str], offset aTemp_0 ; "TEMP"
.text:00412BA3                 call    getenv
.text:00412BA8                 mov     esi, eax
.text:00412BAA                 jmp     loc_412A64
.text:00412BAA ; ---------------------------------------------------------------------------
.text:00412BAF                 align 10h
.text:00412BB0
.text:00412BB0 loc_412BB0:                             ; CODE XREF: sub_412A10+46↑j
.text:00412BB0                 mov     [esp+1BCh+Str], offset aTmpdir_0 ; "TMPDIR"
.text:00412BB7                 call    sub_4135D0
.text:00412BBC                 test    eax, eax
.text:00412BBE                 mov     ebx, eax
.text:00412BC0                 jz      short loc_412C40
.text:00412BC2
.text:00412BC2 loc_412BC2:                             ; CODE XREF: sub_412A10+240↓j
.text:00412BC2                                         ; sub_412A10+256↓j
.text:00412BC2                 mov     [esp+1BCh+Format], ebx ; char *
.text:00412BC6                 lea     edi, [esp+1BCh+var_7C]
.text:00412BCD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00412BD1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00412BD8                 call    sub_410270
.text:00412BDD                 test    eax, eax
.text:00412BDF                 jnz     short loc_412BF6
.text:00412BE1                 mov     edx, [esp+1BCh+var_7C]
.text:00412BE8                 and     edx, 0F000h
.text:00412BEE                 cmp     edx, 4000h
.text:00412BF4                 jz      short loc_412C39
.text:00412BF6
.text:00412BF6 loc_412BF6:                             ; CODE XREF: sub_412A10+1CF↑j
.text:00412BF6                                         ; sub_412A10+25C↓j
.text:00412BF6                 test    esi, esi
.text:00412BF8                 jz      short loc_412C32
.text:00412BFA                 mov     [esp+1BCh+Format], esi ; char *
.text:00412BFE                 lea     ecx, [esp+1BCh+var_DC]
.text:00412C05                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00412C09                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00412C10                 call    sub_410270
.text:00412C15                 test    eax, eax
.text:00412C17                 jnz     short loc_412C32
.text:00412C19                 mov     ebx, [esp+1BCh+var_DC]
.text:00412C20                 and     ebx, 0F000h
.text:00412C26                 cmp     ebx, 4000h
.text:00412C2C                 jz      loc_412A5C
.text:00412C32
.text:00412C32 loc_412C32:                             ; CODE XREF: sub_412A10+1E8↑j
.text:00412C32                                         ; sub_412A10+207↑j
.text:00412C32                 xor     esi, esi
.text:00412C34                 jmp     loc_412A5C
.text:00412C39 ; ---------------------------------------------------------------------------
.text:00412C39
.text:00412C39 loc_412C39:                             ; CODE XREF: sub_412A10+1E4↑j
.text:00412C39                 mov     esi, ebx
.text:00412C3B                 jmp     loc_412A5C
.text:00412C40 ; ---------------------------------------------------------------------------
.text:00412C40
.text:00412C40 loc_412C40:                             ; CODE XREF: sub_412A10+1B0↑j
.text:00412C40                 mov     [esp+1BCh+Str], offset aTmp_2 ; "TMP"
.text:00412C47                 call    sub_4135D0
.text:00412C4C                 test    eax, eax
.text:00412C4E                 mov     ebx, eax
.text:00412C50                 jnz     loc_412BC2
.text:00412C56                 mov     [esp+1BCh+Str], offset aTemp_0 ; "TEMP"
.text:00412C5D                 call    sub_4135D0
.text:00412C62                 test    eax, eax
.text:00412C64                 mov     ebx, eax
.text:00412C66                 jnz     loc_412BC2
.text:00412C6C                 jmp     short loc_412BF6
.text:00412C6C ; ---------------------------------------------------------------------------
.text:00412C6E                 align 10h
.text:00412C70
.text:00412C70 loc_412C70:                             ; CODE XREF: sub_412A10+26↑j
.text:00412C70                 mov     ecx, [esp+1BCh+arg_C]
.text:00412C77                 mov     [esp+1BCh+Str], ecx ; Str
.text:00412C7A                 call    strlen
.text:00412C7F                 cmp     eax, 5
.text:00412C82                 mov     ebp, eax
.text:00412C84                 jbe     loc_412A4D
.text:00412C8A                 mov     ebp, 5
.text:00412C8F                 jmp     loc_412A4D
.text:00412C8F sub_412A10      endp
.text:00412C8F
.text:00412C8F ; ---------------------------------------------------------------------------
.text:00412C94                 align 10h
.text:00412CA0 byte_412CA0     db 61h                  ; DATA XREF: sub_412D90+DC↓r
.text:00412CA0                                         ; sub_412D90+122↓r ...
.text:00412CA1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:00412CDF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_412D90+39↓o
.text:00412CE6                 align 20h
.text:00412D00 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00412D00                                         ; DATA XREF: sub_412D90:loc_413008↓o
.text:00412D1F                 align 10h
.text:00412D20 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:00412D20                                         ; DATA XREF: sub_412D90+405↓o
.text:00412D4B                 align 20h
.text:00412D60 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:00412D60                                         ; DATA XREF: sub_412D90+40D↓o
.text:00412D83                 align 10h
.text:00412D90
.text:00412D90 ; =============== S U B R O U T I N E =======================================
.text:00412D90
.text:00412D90
.text:00412D90 ; int __cdecl sub_412D90(char *FileName, int)
.text:00412D90 sub_412D90      proc near               ; CODE XREF: sub_410330+12↑p
.text:00412D90                                         ; sub_413450+51↓p
.text:00412D90
.text:00412D90 Str             = dword ptr -9Ch
.text:00412D90 OpenFlag        = dword ptr -98h
.text:00412D90 var_94          = dword ptr -94h
.text:00412D90 var_90          = dword ptr -90h
.text:00412D90 var_8C          = dword ptr -8Ch
.text:00412D90 var_88          = dword ptr -88h
.text:00412D90 var_84          = dword ptr -84h
.text:00412D90 var_80          = dword ptr -80h
.text:00412D90 var_7C          = dword ptr -7Ch
.text:00412D90 FileName        = dword ptr  4
.text:00412D90 arg_4           = dword ptr  8
.text:00412D90
.text:00412D90                 push    ebp
.text:00412D91                 push    edi
.text:00412D92                 push    esi
.text:00412D93                 push    ebx
.text:00412D94                 sub     esp, 8Ch
.text:00412D9A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:00412DA2                 call    _errno
.text:00412DA7                 mov     edx, [eax]
.text:00412DA9                 mov     [esp+9Ch+var_8C], edx
.text:00412DAD                 mov     edx, [esp+9Ch+FileName]
.text:00412DB4                 mov     [esp+9Ch+Str], edx ; Str
.text:00412DB7                 call    strlen
.text:00412DBC                 cmp     eax, 5
.text:00412DBF                 jle     short loc_412DDD
.text:00412DC1                 cld
.text:00412DC2                 mov     ecx, [esp+9Ch+FileName]
.text:00412DC9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:00412DCE                 lea     esi, [eax+ecx-6]
.text:00412DD2                 mov     ecx, 7
.text:00412DD7                 mov     ebp, esi
.text:00412DD9                 repe cmpsb
.text:00412DDB                 jz      short loc_412DF8
.text:00412DDD
.text:00412DDD loc_412DDD:                             ; CODE XREF: sub_412D90+2F↑j
.text:00412DDD                 call    _errno
.text:00412DE2                 mov     dword ptr [eax], 16h
.text:00412DE8
.text:00412DE8 loc_412DE8:                             ; CODE XREF: sub_412D90+295↓j
.text:00412DE8                                         ; sub_412D90+2D8↓j ...
.text:00412DE8                 mov     eax, 0FFFFFFFFh
.text:00412DED
.text:00412DED loc_412DED:                             ; CODE XREF: sub_412D90+2EF↓j
.text:00412DED                                         ; sub_412D90+332↓j
.text:00412DED                 add     esp, 8Ch
.text:00412DF3                 pop     ebx
.text:00412DF4                 pop     esi
.text:00412DF5                 pop     edi
.text:00412DF6                 pop     ebp
.text:00412DF7                 retn
.text:00412DF8 ; ---------------------------------------------------------------------------
.text:00412DF8
.text:00412DF8 loc_412DF8:                             ; CODE XREF: sub_412D90+4B↑j
.text:00412DF8                 mov     ecx, ds:dword_418994
.text:00412DFE                 mov     edi, ds:dword_418990
.text:00412E04                 mov     eax, ecx
.text:00412E06                 or      eax, edi
.text:00412E08                 jz      loc_413143
.text:00412E0E
.text:00412E0E loc_412E0E:                             ; CODE XREF: sub_412D90+3F8↓j
.text:00412E0E                 rdtsc
.text:00412E10                 mov     edi, edx
.text:00412E12                 mov     esi, eax
.text:00412E14                 call    _getpid
.text:00412E19                 mov     ebx, eax
.text:00412E1B                 mov     edx, esi
.text:00412E1D                 sar     ebx, 1Fh
.text:00412E20                 xor     edx, eax
.text:00412E22                 mov     ecx, edi
.text:00412E24                 xor     ecx, ebx
.text:00412E26                 mov     ebx, edx
.text:00412E28                 mov     esi, ecx
.text:00412E2A                 add     ebx, ds:dword_418990
.text:00412E30                 adc     esi, ds:dword_418994
.text:00412E36                 xor     edi, edi
.text:00412E38                 mov     ds:dword_418990, ebx
.text:00412E3E                 mov     ds:dword_418994, esi
.text:00412E44                 lea     esi, [esi+0]
.text:00412E4A                 lea     edi, [edi+0]
.text:00412E50
.text:00412E50 loc_412E50:                             ; CODE XREF: sub_412D90+2C7↓j
.text:00412E50                 mov     [esp+9Ch+Str], ebx
.text:00412E53                 mov     [esp+9Ch+OpenFlag], esi
.text:00412E57                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00412E5F                 mov     [esp+9Ch+var_90], 0
.text:00412E67                 call    sub_414E40
.text:00412E6C                 movzx   ecx, ds:byte_412CA0[eax]
.text:00412E73                 mov     [ebp+0], cl
.text:00412E76                 mov     [esp+9Ch+Str], ebx
.text:00412E79                 mov     [esp+9Ch+OpenFlag], esi
.text:00412E7D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00412E85                 mov     [esp+9Ch+var_90], 0
.text:00412E8D                 call    sub_414FC0
.text:00412E92                 mov     [esp+9Ch+Str], eax
.text:00412E95                 mov     ebx, eax
.text:00412E97                 mov     esi, edx
.text:00412E99                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00412EA1                 mov     [esp+9Ch+var_90], 0
.text:00412EA9                 mov     [esp+9Ch+OpenFlag], edx
.text:00412EAD                 call    sub_414E40
.text:00412EB2                 movzx   edx, ds:byte_412CA0[eax]
.text:00412EB9                 mov     [ebp+1], dl
.text:00412EBC                 mov     [esp+9Ch+Str], ebx
.text:00412EBF                 mov     [esp+9Ch+OpenFlag], esi
.text:00412EC3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00412ECB                 mov     [esp+9Ch+var_90], 0
.text:00412ED3                 call    sub_414FC0
.text:00412ED8                 mov     [esp+9Ch+Str], eax
.text:00412EDB                 mov     ebx, eax
.text:00412EDD                 mov     esi, edx
.text:00412EDF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00412EE7                 mov     [esp+9Ch+var_90], 0
.text:00412EEF                 mov     [esp+9Ch+OpenFlag], edx
.text:00412EF3                 call    sub_414E40
.text:00412EF8                 movzx   ecx, ds:byte_412CA0[eax]
.text:00412EFF                 mov     [ebp+2], cl
.text:00412F02                 mov     [esp+9Ch+Str], ebx
.text:00412F05                 mov     [esp+9Ch+OpenFlag], esi
.text:00412F09                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00412F11                 mov     [esp+9Ch+var_90], 0
.text:00412F19                 call    sub_414FC0
.text:00412F1E                 mov     [esp+9Ch+Str], eax
.text:00412F21                 mov     ebx, eax
.text:00412F23                 mov     esi, edx
.text:00412F25                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00412F2D                 mov     [esp+9Ch+var_90], 0
.text:00412F35                 mov     [esp+9Ch+OpenFlag], edx
.text:00412F39                 call    sub_414E40
.text:00412F3E                 movzx   edx, ds:byte_412CA0[eax]
.text:00412F45                 mov     [ebp+3], dl
.text:00412F48                 mov     [esp+9Ch+Str], ebx
.text:00412F4B                 mov     [esp+9Ch+OpenFlag], esi
.text:00412F4F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00412F57                 mov     [esp+9Ch+var_90], 0
.text:00412F5F                 call    sub_414FC0
.text:00412F64                 mov     [esp+9Ch+Str], eax
.text:00412F67                 mov     ebx, eax
.text:00412F69                 mov     esi, edx
.text:00412F6B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00412F73                 mov     [esp+9Ch+var_90], 0
.text:00412F7B                 mov     [esp+9Ch+OpenFlag], edx
.text:00412F7F                 call    sub_414E40
.text:00412F84                 movzx   ecx, ds:byte_412CA0[eax]
.text:00412F8B                 mov     [ebp+4], cl
.text:00412F8E                 mov     [esp+9Ch+Str], ebx
.text:00412F91                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00412F99                 mov     [esp+9Ch+var_90], 0
.text:00412FA1                 mov     [esp+9Ch+OpenFlag], esi
.text:00412FA5                 call    sub_414FC0
.text:00412FAA                 mov     [esp+9Ch+Str], eax
.text:00412FAD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00412FB5                 mov     [esp+9Ch+var_90], 0
.text:00412FBD                 mov     [esp+9Ch+OpenFlag], edx
.text:00412FC1                 call    sub_414E40
.text:00412FC6                 movzx   ebx, ds:byte_412CA0[eax]
.text:00412FCD                 mov     [ebp+5], bl
.text:00412FD0                 cmp     [esp+9Ch+arg_4], 1
.text:00412FD8                 jz      loc_413127
.text:00412FDE                 cmp     [esp+9Ch+arg_4], 1
.text:00412FE6                 jle     loc_4130F0
.text:00412FEC                 cmp     [esp+9Ch+arg_4], 2
.text:00412FF4                 jz      loc_4130C7
.text:00412FFA                 cmp     [esp+9Ch+arg_4], 3
.text:00413002                 jz      loc_413084
.text:00413008
.text:00413008 loc_413008:                             ; CODE XREF: sub_412D90+369↓j
.text:00413008                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0041300D                 test    ebx, ebx
.text:0041300F                 jnz     loc_41318D
.text:00413015
.text:00413015 loc_413015:                             ; CODE XREF: sub_412D90+354↓j
.text:00413015                 mov     eax, [esp+9Ch+var_88]
.text:00413019                 test    eax, eax
.text:0041301B                 jns     short loc_413070
.text:0041301D                 call    _errno
.text:00413022                 cmp     dword ptr [eax], 11h
.text:00413025                 jnz     loc_412DE8
.text:0041302B
.text:0041302B loc_41302B:                             ; CODE XREF: sub_412D90+315↓j
.text:0041302B                 mov     edx, ds:dword_418990
.text:00413031                 mov     ecx, ds:dword_418994
.text:00413037                 add     edx, 1E61h
.text:0041303D                 adc     ecx, 0
.text:00413040                 mov     ebx, edx
.text:00413042                 inc     edi
.text:00413043                 mov     ds:dword_418990, edx
.text:00413049                 cmp     edi, 3A2F8h
.text:0041304F                 mov     esi, ecx
.text:00413051                 mov     ds:dword_418994, ecx
.text:00413057                 jb      loc_412E50
.text:0041305D                 call    _errno
.text:00413062                 mov     dword ptr [eax], 11h
.text:00413068                 jmp     loc_412DE8
.text:00413068 ; ---------------------------------------------------------------------------
.text:0041306D                 align 10h
.text:00413070
.text:00413070 loc_413070:                             ; CODE XREF: sub_412D90+28B↑j
.text:00413070                 call    _errno
.text:00413075                 mov     esi, [esp+9Ch+var_8C]
.text:00413079                 mov     [eax], esi
.text:0041307B                 mov     eax, [esp+9Ch+var_88]
.text:0041307F                 jmp     loc_412DED
.text:00413084 ; ---------------------------------------------------------------------------
.text:00413084
.text:00413084 loc_413084:                             ; CODE XREF: sub_412D90+272↑j
.text:00413084                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0041308B                 mov     ecx, [esp+9Ch+FileName]
.text:00413092                 lea     esi, [esp+9Ch+var_7C]
.text:00413096                 mov     [esp+9Ch+var_94], esi ; int
.text:0041309A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0041309E                 call    sub_412990
.text:004130A3                 test    eax, eax
.text:004130A5                 jns     short loc_41302B
.text:004130A7                 call    _errno
.text:004130AC                 cmp     dword ptr [eax], 2
.text:004130AF                 jnz     loc_412DE8
.text:004130B5                 call    _errno
.text:004130BA                 mov     ebx, [esp+9Ch+var_8C]
.text:004130BE                 mov     [eax], ebx
.text:004130C0                 xor     eax, eax
.text:004130C2                 jmp     loc_412DED
.text:004130C7 ; ---------------------------------------------------------------------------
.text:004130C7
.text:004130C7 loc_4130C7:                             ; CODE XREF: sub_412D90+264↑j
.text:004130C7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:004130CF                 mov     edx, [esp+9Ch+FileName]
.text:004130D6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:004130D9                 call    sub_4134F0
.text:004130DE                 mov     esi, esi
.text:004130E0
.text:004130E0 loc_4130E0:                             ; CODE XREF: sub_412D90+395↓j
.text:004130E0                 mov     [esp+9Ch+var_88], eax
.text:004130E4                 jmp     loc_413015
.text:004130E4 ; ---------------------------------------------------------------------------
.text:004130E9                 align 10h
.text:004130F0
.text:004130F0 loc_4130F0:                             ; CODE XREF: sub_412D90+256↑j
.text:004130F0                 mov     eax, [esp+9Ch+arg_4]
.text:004130F7                 test    eax, eax
.text:004130F9                 jnz     loc_413008
.text:004130FF                 mov     [esp+9Ch+var_94], 180h
.text:00413107                 mov     esi, [esp+9Ch+FileName]
.text:0041310E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00413116                 mov     [esp+9Ch+Str], esi ; FileName
.text:00413119                 lea     esi, [esi+0]
.text:00413120
.text:00413120 loc_413120:                             ; CODE XREF: sub_412D90+3B1↓j
.text:00413120                 call    _open
.text:00413125                 jmp     short loc_4130E0
.text:00413127 ; ---------------------------------------------------------------------------
.text:00413127
.text:00413127 loc_413127:                             ; CODE XREF: sub_412D90+248↑j
.text:00413127                 mov     [esp+9Ch+var_94], 180h
.text:0041312F                 mov     ebx, [esp+9Ch+FileName]
.text:00413136                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0041313E                 mov     [esp+9Ch+Str], ebx
.text:00413141                 jmp     short loc_413120
.text:00413143 ; ---------------------------------------------------------------------------
.text:00413143
.text:00413143 loc_413143:                             ; CODE XREF: sub_412D90+78↑j
.text:00413143                 mov     [esp+9Ch+OpenFlag], 0
.text:0041314B                 lea     ebx, [esp+9Ch+var_84]
.text:0041314F                 mov     [esp+9Ch+Str], ebx
.text:00413152                 call    sub_413570
.text:00413157                 mov     edi, [esp+9Ch+var_80]
.text:0041315B                 mov     edx, [esp+9Ch+var_84]
.text:0041315F                 mov     ecx, edi
.text:00413161                 mov     ebx, edi
.text:00413163                 shl     ecx, 10h
.text:00413166                 sar     ebx, 1Fh
.text:00413169                 shld    ebx, edi, 10h
.text:0041316D                 mov     esi, edx
.text:0041316F                 mov     edi, edx
.text:00413171                 mov     edx, ecx
.text:00413173                 sar     edi, 1Fh
.text:00413176                 xor     edx, esi
.text:00413178                 mov     ds:dword_418990, edx
.text:0041317E                 mov     esi, ebx
.text:00413180                 xor     esi, edi
.text:00413182                 mov     ds:dword_418994, esi
.text:00413188                 jmp     loc_412E0E
.text:0041318D ; ---------------------------------------------------------------------------
.text:0041318D
.text:0041318D loc_41318D:                             ; CODE XREF: sub_412D90+27F↑j
.text:0041318D                 mov     [esp+9Ch+var_94], 151h
.text:00413195                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0041319D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:004131A4                 call    _assert
.text:004131A4 sub_412D90      endp
.text:004131A4
.text:004131A4 ; ---------------------------------------------------------------------------
.text:004131A9                 align 20h
.text:004131C0
.text:004131C0 ; =============== S U B R O U T I N E =======================================
.text:004131C0
.text:004131C0
.text:004131C0 sub_4131C0      proc near               ; CODE XREF: _sysconf+297↑j
.text:004131C0
.text:004131C0 lpSystemInfo    = dword ptr -0Ch
.text:004131C0 var_4           = dword ptr -4
.text:004131C0
.text:004131C0                 sub     esp, 0Ch
.text:004131C3                 mov     [esp+0Ch+var_4], edi
.text:004131C7                 mov     edi, ds:dword_4189A0
.text:004131CD                 test    edi, edi
.text:004131CF                 mov     eax, edi
.text:004131D1                 jz      short loc_4131E0
.text:004131D3
.text:004131D3 loc_4131D3:                             ; CODE XREF: sub_4131C0+48↓j
.text:004131D3                 mov     eax, [edi+14h]
.text:004131D6                 mov     edi, [esp+0Ch+var_4]
.text:004131DA                 add     esp, 0Ch
.text:004131DD                 retn
.text:004131DD ; ---------------------------------------------------------------------------
.text:004131DE                 align 10h
.text:004131E0
.text:004131E0 loc_4131E0:                             ; CODE XREF: sub_4131C0+11↑j
.text:004131E0                 cld
.text:004131E1                 mov     edi, offset SystemInfo
.text:004131E6                 mov     ecx, 9
.text:004131EB                 mov     ds:dword_4189A0, edi
.text:004131F1                 rep stosd
.text:004131F3                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:004131FA                 call    GetSystemInfo
.text:004131FF                 mov     edi, ds:dword_4189A0
.text:00413205                 sub     esp, 4
.text:00413208                 jmp     short loc_4131D3
.text:00413208 sub_4131C0      endp
.text:00413208
.text:00413208 ; ---------------------------------------------------------------------------
.text:0041320A                 align 10h
.text:00413210
.text:00413210 ; =============== S U B R O U T I N E =======================================
.text:00413210
.text:00413210
.text:00413210 sub_413210      proc near               ; CODE XREF: _sysconf+28F↑j
.text:00413210
.text:00413210 lpSystemInfo    = dword ptr -0Ch
.text:00413210 var_4           = dword ptr -4
.text:00413210
.text:00413210                 sub     esp, 0Ch
.text:00413213                 mov     [esp+0Ch+var_4], edi
.text:00413217                 mov     edi, ds:dword_4189A0
.text:0041321D                 test    edi, edi
.text:0041321F                 mov     eax, edi
.text:00413221                 jz      short loc_413230
.text:00413223
.text:00413223 loc_413223:                             ; CODE XREF: sub_413210+48↓j
.text:00413223                 mov     eax, [edi+14h]
.text:00413226                 mov     edi, [esp+0Ch+var_4]
.text:0041322A                 add     esp, 0Ch
.text:0041322D                 retn
.text:0041322D ; ---------------------------------------------------------------------------
.text:0041322E                 align 10h
.text:00413230
.text:00413230 loc_413230:                             ; CODE XREF: sub_413210+11↑j
.text:00413230                 cld
.text:00413231                 mov     edi, offset SystemInfo
.text:00413236                 mov     ecx, 9
.text:0041323B                 mov     ds:dword_4189A0, edi
.text:00413241                 rep stosd
.text:00413243                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0041324A                 call    GetSystemInfo
.text:0041324F                 mov     edi, ds:dword_4189A0
.text:00413255                 sub     esp, 4
.text:00413258                 jmp     short loc_413223
.text:00413258 sub_413210      endp
.text:00413258
.text:00413258 ; ---------------------------------------------------------------------------
.text:0041325A                 align 10h
.text:00413260
.text:00413260 ; =============== S U B R O U T I N E =======================================
.text:00413260
.text:00413260
.text:00413260 sub_413260      proc near               ; CODE XREF: _sysconf+29F↑j
.text:00413260
.text:00413260 lpSystemInfo    = dword ptr -0Ch
.text:00413260 var_4           = dword ptr -4
.text:00413260
.text:00413260                 sub     esp, 0Ch
.text:00413263                 mov     [esp+0Ch+var_4], edi
.text:00413267                 mov     edi, ds:dword_4189A0
.text:0041326D                 test    edi, edi
.text:0041326F                 mov     eax, edi
.text:00413271                 jz      short loc_413288
.text:00413273
.text:00413273 loc_413273:                             ; CODE XREF: sub_413260+50↓j
.text:00413273                 mov     eax, [edi+0Ch]
.text:00413276                 xor     edx, edx
.text:00413278                 mov     ecx, [edi+8]
.text:0041327B                 sub     eax, ecx
.text:0041327D                 div     dword ptr [edi+4]
.text:00413280                 mov     edi, [esp+0Ch+var_4]
.text:00413284                 add     esp, 0Ch
.text:00413287                 retn
.text:00413288 ; ---------------------------------------------------------------------------
.text:00413288
.text:00413288 loc_413288:                             ; CODE XREF: sub_413260+11↑j
.text:00413288                 cld
.text:00413289                 mov     edi, offset SystemInfo
.text:0041328E                 mov     ecx, 9
.text:00413293                 mov     ds:dword_4189A0, edi
.text:00413299                 rep stosd
.text:0041329B                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:004132A2                 call    GetSystemInfo
.text:004132A7                 mov     edi, ds:dword_4189A0
.text:004132AD                 sub     esp, 4
.text:004132B0                 jmp     short loc_413273
.text:004132B0 sub_413260      endp
.text:004132B0
.text:004132B0 ; ---------------------------------------------------------------------------
.text:004132B2                 align 10h
.text:004132C0
.text:004132C0 ; =============== S U B R O U T I N E =======================================
.text:004132C0
.text:004132C0
.text:004132C0 sub_4132C0      proc near               ; CODE XREF: _sysconf+2A7↑j
.text:004132C0
.text:004132C0 lpSystemInfo    = dword ptr -0Ch
.text:004132C0 var_4           = dword ptr -4
.text:004132C0
.text:004132C0                 sub     esp, 0Ch
.text:004132C3                 mov     [esp+0Ch+var_4], edi
.text:004132C7                 mov     edi, ds:dword_4189A0
.text:004132CD                 test    edi, edi
.text:004132CF                 mov     eax, edi
.text:004132D1                 jz      short loc_4132E8
.text:004132D3
.text:004132D3 loc_4132D3:                             ; CODE XREF: sub_4132C0+50↓j
.text:004132D3                 mov     edx, [edi+8]
.text:004132D6                 mov     eax, [edi+0Ch]
.text:004132D9                 sub     eax, edx
.text:004132DB                 xor     edx, edx
.text:004132DD                 div     dword ptr [edi+4]
.text:004132E0                 mov     edi, [esp+0Ch+var_4]
.text:004132E4                 add     esp, 0Ch
.text:004132E7                 retn
.text:004132E8 ; ---------------------------------------------------------------------------
.text:004132E8
.text:004132E8 loc_4132E8:                             ; CODE XREF: sub_4132C0+11↑j
.text:004132E8                 cld
.text:004132E9                 mov     edi, offset SystemInfo
.text:004132EE                 mov     ecx, 9
.text:004132F3                 mov     ds:dword_4189A0, edi
.text:004132F9                 rep stosd
.text:004132FB                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00413302                 call    GetSystemInfo
.text:00413307                 mov     edi, ds:dword_4189A0
.text:0041330D                 sub     esp, 4
.text:00413310                 jmp     short loc_4132D3
.text:00413310 sub_4132C0      endp
.text:00413310
.text:00413310 ; ---------------------------------------------------------------------------
.text:00413312                 align 10h
.text:00413320
.text:00413320 ; =============== S U B R O U T I N E =======================================
.text:00413320
.text:00413320
.text:00413320 sub_413320      proc near               ; CODE XREF: _sysconf:loc_4105CB↑p
.text:00413320                                         ; _sysconf:loc_4105DE↑p
.text:00413320                 mov     edx, 40h ; '@'
.text:00413325                 mov     eax, 40h ; '@'
.text:0041332A                 mov     ds:dword_418A70, edx
.text:00413330                 retn
.text:00413330 sub_413320      endp
.text:00413330
.text:00413330 ; ---------------------------------------------------------------------------
.text:00413331                 align 10h
.text:00413340
.text:00413340 ; =============== S U B R O U T I N E =======================================
.text:00413340
.text:00413340 ; Attributes: noreturn
.text:00413340
.text:00413340 sub_413340      proc near               ; CODE XREF: .text:00411F19↑p
.text:00413340                                         ; sub_413340↓j
.text:00413340                 jmp     short sub_413340
.text:00413340 sub_413340      endp
.text:00413340
.text:00413340 ; ---------------------------------------------------------------------------
.text:00413342                 align 10h
.text:00413350
.text:00413350 ; =============== S U B R O U T I N E =======================================
.text:00413350
.text:00413350
.text:00413350 sub_413350      proc near               ; CODE XREF: .text:00411C75↑p
.text:00413350
.text:00413350 FileHandle      = dword ptr -1Ch
.text:00413350 dwFileOffsetLow = dword ptr -18h
.text:00413350 dwFileOffsetHigh= dword ptr -14h
.text:00413350 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:00413350 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:00413350 var_8           = dword ptr -8
.text:00413350 var_4           = dword ptr -4
.text:00413350 arg_0           = dword ptr  4
.text:00413350
.text:00413350                 sub     esp, 1Ch
.text:00413353                 mov     edx, [esp+1Ch+arg_0]
.text:00413357                 mov     [esp+1Ch+var_4], esi
.text:0041335B                 mov     [esp+1Ch+var_8], ebx
.text:0041335F                 mov     ebx, [edx+10h]
.text:00413362                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:00413365                 call    _get_osfhandle
.text:0041336A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041336D                 mov     esi, eax
.text:0041336F                 call    _filelengthi64
.text:00413374                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:00413378                 cdq
.text:00413379                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0041337C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:00413380                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:00413388                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:00413390                 call    UnlockFile
.text:00413395                 sub     esp, 14h
.text:00413398                 mov     ebx, [esp+1Ch+var_8]
.text:0041339C                 mov     esi, [esp+1Ch+var_4]
.text:004133A0                 add     esp, 1Ch
.text:004133A3                 retn
.text:004133A3 sub_413350      endp
.text:004133A3
.text:004133A3 ; ---------------------------------------------------------------------------
.text:004133A4                 align 10h
.text:004133B0
.text:004133B0 ; =============== S U B R O U T I N E =======================================
.text:004133B0
.text:004133B0
.text:004133B0 ; int __cdecl sub_4133B0(int, char *Control)
.text:004133B0 sub_4133B0      proc near               ; CODE XREF: .text:00411B36↑p
.text:004133B0                                         ; .text:00411B86↑p ...
.text:004133B0
.text:004133B0 Str             = dword ptr -1Ch
.text:004133B0 Val             = dword ptr -18h
.text:004133B0 var_8           = dword ptr -8
.text:004133B0 var_4           = dword ptr -4
.text:004133B0 arg_0           = dword ptr  4
.text:004133B0 Control         = dword ptr  8
.text:004133B0
.text:004133B0                 sub     esp, 1Ch
.text:004133B3                 xor     eax, eax
.text:004133B5                 mov     edx, [esp+1Ch+Control]
.text:004133B9                 mov     [esp+1Ch+var_4], esi
.text:004133BD                 mov     esi, [esp+1Ch+arg_0]
.text:004133C1                 mov     [esp+1Ch+var_8], ebx
.text:004133C5                 mov     ebx, [esi]
.text:004133C7                 test    ebx, ebx
.text:004133C9                 jz      short loc_4133F8
.text:004133CB                 movzx   eax, byte ptr [edx]
.text:004133CE                 test    al, al
.text:004133D0                 jz      short loc_4133F0
.text:004133D2                 cmp     byte ptr [edx+1], 0
.text:004133D6                 jnz     short loc_413430
.text:004133D8                 movzx   ecx, byte ptr [ebx]
.text:004133DB                 mov     edx, ebx
.text:004133DD                 cmp     cl, al
.text:004133DF                 jz      short loc_413422
.text:004133E1                 test    cl, cl
.text:004133E3                 jnz     short loc_413404
.text:004133E5                 lea     esi, [esi+0]
.text:004133E9                 lea     edi, [edi+0]
.text:004133F0
.text:004133F0 loc_4133F0:                             ; CODE XREF: sub_4133B0+20↑j
.text:004133F0                                         ; sub_4133B0+74↓j
.text:004133F0                 mov     dword ptr [esi], 0
.text:004133F6
.text:004133F6 loc_4133F6:                             ; CODE XREF: sub_4133B0+7C↓j
.text:004133F6                 mov     eax, ebx
.text:004133F8
.text:004133F8 loc_4133F8:                             ; CODE XREF: sub_4133B0+19↑j
.text:004133F8                 mov     ebx, [esp+1Ch+var_8]
.text:004133FC                 mov     esi, [esp+1Ch+var_4]
.text:00413400                 add     esp, 1Ch
.text:00413403                 retn
.text:00413404 ; ---------------------------------------------------------------------------
.text:00413404
.text:00413404 loc_413404:                             ; CODE XREF: sub_4133B0+33↑j
.text:00413404                 movsx   edx, al
.text:00413407                 mov     [esp+1Ch+Val], edx ; Val
.text:0041340B                 lea     edx, [ebx+1]
.text:0041340E                 mov     [esp+1Ch+Str], edx ; Str
.text:00413411                 call    strchr
.text:00413416                 lea     esi, [esi+0]
.text:00413419                 lea     edi, [edi+0]
.text:00413420
.text:00413420 loc_413420:                             ; CODE XREF: sub_4133B0+8C↓j
.text:00413420                 mov     edx, eax
.text:00413422
.text:00413422 loc_413422:                             ; CODE XREF: sub_4133B0+2F↑j
.text:00413422                 test    edx, edx
.text:00413424                 jz      short loc_4133F0
.text:00413426                 mov     byte ptr [edx], 0
.text:00413429                 inc     edx
.text:0041342A                 mov     [esi], edx
.text:0041342C                 jmp     short loc_4133F6
.text:0041342C ; ---------------------------------------------------------------------------
.text:0041342E                 align 10h
.text:00413430
.text:00413430 loc_413430:                             ; CODE XREF: sub_4133B0+26↑j
.text:00413430                 mov     [esp+1Ch+Val], edx ; Control
.text:00413434                 mov     [esp+1Ch+Str], ebx ; Str
.text:00413437                 call    strpbrk
.text:0041343C                 jmp     short loc_413420
.text:0041343C sub_4133B0      endp
.text:0041343C
.text:0041343C ; ---------------------------------------------------------------------------
.text:0041343E                 align 10h
.text:00413440 ; const char aTmpf[]
.text:00413440 aTmpf           db 'tmpf',0             ; DATA XREF: sub_413450+20↓o
.text:00413445 ; const char aWBd[]
.text:00413445 aWBd            db 'w+bD',0             ; DATA XREF: sub_413450+5E↓o
.text:0041344A                 align 10h
.text:00413450
.text:00413450 ; =============== S U B R O U T I N E =======================================
.text:00413450
.text:00413450
.text:00413450 sub_413450      proc near               ; CODE XREF: sub_4125AF+A4↑p
.text:00413450
.text:00413450 FileHandle      = dword ptr -13Ch
.text:00413450 Format          = dword ptr -138h
.text:00413450 var_134         = dword ptr -134h
.text:00413450 var_130         = dword ptr -130h
.text:00413450 var_12C         = dword ptr -12Ch
.text:00413450 FileName        = byte ptr -11Ch
.text:00413450 var_8           = dword ptr -8
.text:00413450 var_4           = dword ptr -4
.text:00413450
.text:00413450                 sub     esp, 13Ch
.text:00413456                 mov     [esp+13Ch+var_8], ebx
.text:0041345D                 lea     ebx, [esp+13Ch+FileName]
.text:00413461                 mov     [esp+13Ch+var_4], esi
.text:00413468                 mov     [esp+13Ch+var_12C], 0 ; int
.text:00413470                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:00413478                 mov     [esp+13Ch+var_134], 0 ; char *
.text:00413480                 mov     [esp+13Ch+Format], 104h ; int
.text:00413488                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0041348B                 call    sub_412A10
.text:00413490                 xor     edx, edx
.text:00413492                 test    eax, eax
.text:00413494                 jnz     short loc_4134C6
.text:00413496                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:00413499                 mov     [esp+13Ch+Format], 0 ; int
.text:004134A1                 call    sub_412D90
.text:004134A6                 xor     edx, edx
.text:004134A8                 mov     ebx, eax
.text:004134AA                 test    eax, eax
.text:004134AC                 js      short loc_4134C6
.text:004134AE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:004134B6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:004134B9                 call    _fdopen_0
.text:004134BE                 test    eax, eax
.text:004134C0                 mov     esi, eax
.text:004134C2                 jz      short loc_4134DD
.text:004134C4
.text:004134C4 loc_4134C4:                             ; CODE XREF: sub_413450+95↓j
.text:004134C4                 mov     edx, esi
.text:004134C6
.text:004134C6 loc_4134C6:                             ; CODE XREF: sub_413450+44↑j
.text:004134C6                                         ; sub_413450+5C↑j
.text:004134C6                 mov     ebx, [esp+13Ch+var_8]
.text:004134CD                 mov     eax, edx
.text:004134CF                 mov     esi, [esp+13Ch+var_4]
.text:004134D6                 add     esp, 13Ch
.text:004134DC                 retn
.text:004134DD ; ---------------------------------------------------------------------------
.text:004134DD
.text:004134DD loc_4134DD:                             ; CODE XREF: sub_413450+72↑j
.text:004134DD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:004134E0                 call    _close_0
.text:004134E5                 jmp     short loc_4134C4
.text:004134E5 sub_413450      endp
.text:004134E5
.text:004134E5 ; ---------------------------------------------------------------------------
.text:004134E7                 align 10h
.text:004134F0
.text:004134F0 ; =============== S U B R O U T I N E =======================================
.text:004134F0
.text:004134F0
.text:004134F0 ; int __cdecl sub_4134F0(LPCSTR, int AccessMode)
.text:004134F0 sub_4134F0      proc near               ; CODE XREF: sub_412D90+349↑p
.text:004134F0
.text:004134F0 lpPathName      = dword ptr -1Ch
.text:004134F0 lpSecurityAttributes= dword ptr -18h
.text:004134F0 var_8           = dword ptr -8
.text:004134F0 var_4           = dword ptr -4
.text:004134F0 arg_0           = dword ptr  4
.text:004134F0 AccessMode      = dword ptr  8
.text:004134F0
.text:004134F0                 sub     esp, 1Ch
.text:004134F3                 mov     [esp+1Ch+var_8], ebx
.text:004134F7                 mov     ebx, [esp+1Ch+arg_0]
.text:004134FB                 mov     [esp+1Ch+var_4], esi
.text:004134FF                 mov     esi, [esp+1Ch+AccessMode]
.text:00413503                 test    ebx, ebx
.text:00413505                 jz      short loc_413555
.text:00413507                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041350F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00413512                 call    CreateDirectoryA
.text:00413517                 sub     esp, 8
.text:0041351A                 test    eax, eax
.text:0041351C                 jz      short loc_413536
.text:0041351E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00413522                 mov     esi, [esp+1Ch+var_4]
.text:00413526                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0041352A                 mov     ebx, [esp+1Ch+var_8]
.text:0041352E                 add     esp, 1Ch
.text:00413531                 jmp     _chmod
.text:00413536 ; ---------------------------------------------------------------------------
.text:00413536
.text:00413536 loc_413536:                             ; CODE XREF: sub_4134F0+2C↑j
.text:00413536                 call    sub_410C90
.text:0041353B                 mov     esi, eax
.text:0041353D                 call    _errno
.text:00413542                 mov     [eax], esi
.text:00413544
.text:00413544 loc_413544:                             ; CODE XREF: sub_4134F0+70↓j
.text:00413544                 mov     ebx, [esp+1Ch+var_8]
.text:00413548                 mov     eax, 0FFFFFFFFh
.text:0041354D                 mov     esi, [esp+1Ch+var_4]
.text:00413551                 add     esp, 1Ch
.text:00413554                 retn
.text:00413555 ; ---------------------------------------------------------------------------
.text:00413555
.text:00413555 loc_413555:                             ; CODE XREF: sub_4134F0+15↑j
.text:00413555                 call    _errno
.text:0041355A                 mov     dword ptr [eax], 16h
.text:00413560                 jmp     short loc_413544
.text:00413560 sub_4134F0      endp
.text:00413560
.text:00413560 ; ---------------------------------------------------------------------------
.text:00413562                 align 10h
.text:00413570
.text:00413570 ; =============== S U B R O U T I N E =======================================
.text:00413570
.text:00413570
.text:00413570 sub_413570      proc near               ; CODE XREF: sub_412D90+3C2↑p
.text:00413570
.text:00413570 var_1C          = dword ptr -1Ch
.text:00413570 var_18          = dword ptr -18h
.text:00413570 var_C           = dword ptr -0Ch
.text:00413570 var_8           = dword ptr -8
.text:00413570 var_4           = dword ptr -4
.text:00413570 arg_0           = dword ptr  4
.text:00413570 arg_4           = dword ptr  8
.text:00413570
.text:00413570                 sub     esp, 1Ch
.text:00413573                 mov     edx, [esp+1Ch+arg_4]
.text:00413577                 mov     [esp+1Ch+var_4], ebx
.text:0041357B                 mov     ebx, [esp+1Ch+arg_0]
.text:0041357F                 mov     [esp+1Ch+var_18], edx
.text:00413583                 lea     edx, [esp+1Ch+var_C]
.text:00413587                 mov     [esp+1Ch+var_1C], edx
.text:0041358A                 call    sub_4135F0
.text:0041358F                 test    eax, eax
.text:00413591                 mov     edx, 0FFFFFFFFh
.text:00413596                 jnz     short loc_4135BA
.text:00413598                 mov     ecx, [esp+1Ch+var_C]
.text:0041359C                 mov     edx, 10624DD3h
.text:004135A1                 mov     [ebx], ecx
.text:004135A3                 mov     ecx, [esp+1Ch+var_8]
.text:004135A7                 mov     eax, ecx
.text:004135A9                 imul    edx
.text:004135AB                 mov     eax, ecx
.text:004135AD                 sar     eax, 1Fh
.text:004135B0                 sar     edx, 6
.text:004135B3                 sub     edx, eax
.text:004135B5                 mov     [ebx+4], edx
.text:004135B8                 xor     edx, edx
.text:004135BA
.text:004135BA loc_4135BA:                             ; CODE XREF: sub_413570+26↑j
.text:004135BA                 mov     ebx, [esp+1Ch+var_4]
.text:004135BE                 mov     eax, edx
.text:004135C0                 add     esp, 1Ch
.text:004135C3                 retn
.text:004135C3 sub_413570      endp
.text:004135C3
.text:004135C3 ; ---------------------------------------------------------------------------
.text:004135C4                 align 10h
.text:004135D0
.text:004135D0 ; =============== S U B R O U T I N E =======================================
.text:004135D0
.text:004135D0
.text:004135D0 sub_4135D0      proc near               ; CODE XREF: sub_412A10+1A7↑p
.text:004135D0                                         ; sub_412A10+237↑p ...
.text:004135D0                 mov     edx, ds:dword_4189E0
.text:004135D6                 test    edx, edx
.text:004135D8                 jnz     short loc_4135E0
.text:004135DA                 jmp     getenv
.text:004135DA ; ---------------------------------------------------------------------------
.text:004135DF                 align 10h
.text:004135E0
.text:004135E0 loc_4135E0:                             ; CODE XREF: sub_4135D0+8↑j
.text:004135E0                 xor     eax, eax
.text:004135E2                 retn
.text:004135E2 sub_4135D0      endp
.text:004135E2
.text:004135E2 ; ---------------------------------------------------------------------------
.text:004135E3                 align 10h
.text:004135F0
.text:004135F0 ; =============== S U B R O U T I N E =======================================
.text:004135F0
.text:004135F0
.text:004135F0 sub_4135F0      proc near               ; CODE XREF: sub_413570+1A↑p
.text:004135F0
.text:004135F0 lpTimeZoneInformation= dword ptr -0DCh
.text:004135F0 var_D8          = dword ptr -0D8h
.text:004135F0 var_D4          = dword ptr -0D4h
.text:004135F0 var_D0          = dword ptr -0D0h
.text:004135F0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:004135F0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:004135F0 arg_0           = dword ptr  4
.text:004135F0 arg_4           = dword ptr  8
.text:004135F0
.text:004135F0                 push    edi
.text:004135F1                 push    esi
.text:004135F2                 push    ebx
.text:004135F3                 sub     esp, 0D0h
.text:004135F9                 mov     ebx, [esp+0DCh+arg_4]
.text:00413600                 mov     edi, [esp+0DCh+arg_0]
.text:00413607                 test    ebx, ebx
.text:00413609                 jz      short loc_413634
.text:0041360B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0041360F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:00413612                 call    GetTimeZoneInformation
.text:00413617                 sub     esp, 4
.text:0041361A                 cmp     eax, 0FFFFFFFFh
.text:0041361D                 jz      loc_4136B5
.text:00413623                 xor     ecx, ecx
.text:00413625                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:00413629                 cmp     eax, 2
.text:0041362C                 setz    cl
.text:0041362F                 mov     [ebx], esi
.text:00413631                 mov     [ebx+4], ecx
.text:00413634
.text:00413634 loc_413634:                             ; CODE XREF: sub_4135F0+19↑j
.text:00413634                                         ; sub_4135F0+E0↓j
.text:00413634                 test    edi, edi
.text:00413636                 jz      short loc_4136A9
.text:00413638                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0041363C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0041363F                 call    GetSystemTimeAsFileTime
.text:00413644                 sub     esp, 4
.text:00413647                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0041364B                 mov     [esp+0DCh+var_D4], 989680h
.text:00413653                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:00413657                 mov     [esp+0DCh+var_D0], 0
.text:0041365F                 add     ebx, 2AC18000h
.text:00413665                 adc     esi, 0FE624E21h
.text:0041366B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0041366F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00413672                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:00413676                 mov     [esp+0DCh+var_D8], esi
.text:0041367A                 call    sub_414FC0
.text:0041367F                 mov     [edi], eax
.text:00413681                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00413684                 mov     [esp+0DCh+var_D4], 989680h
.text:0041368C                 mov     [esp+0DCh+var_D0], 0
.text:00413694                 mov     [esp+0DCh+var_D8], esi
.text:00413698                 call    sub_414E40
.text:0041369D                 lea     ebx, [eax+eax*4]
.text:004136A0                 lea     edx, [ebx+ebx*4]
.text:004136A3                 shl     edx, 2
.text:004136A6                 mov     [edi+4], edx
.text:004136A9
.text:004136A9 loc_4136A9:                             ; CODE XREF: sub_4135F0+46↑j
.text:004136A9                 add     esp, 0D0h
.text:004136AF                 xor     eax, eax
.text:004136B1                 pop     ebx
.text:004136B2                 pop     esi
.text:004136B3                 pop     edi
.text:004136B4                 retn
.text:004136B5 ; ---------------------------------------------------------------------------
.text:004136B5
.text:004136B5 loc_4136B5:                             ; CODE XREF: sub_4135F0+2D↑j
.text:004136B5                 mov     dword ptr [ebx], 0
.text:004136BB                 mov     dword ptr [ebx+4], 0
.text:004136C2                 call    sub_410C90
.text:004136C7                 mov     esi, eax
.text:004136C9                 call    _errno
.text:004136CE                 mov     [eax], esi
.text:004136D0                 jmp     loc_413634
.text:004136D0 sub_4135F0      endp
.text:004136D0
.text:004136D0 ; ---------------------------------------------------------------------------
.text:004136D5                 align 10h
.text:004136E0                 sub     esp, 0Ch
.text:004136E3                 mov     [esp+4], ebx
.text:004136E7                 mov     [esp+8], esi
.text:004136EB                 xor     esi, esi
.text:004136ED                 call    sub_413760
.text:004136F2                 mov     ebx, eax
.text:004136F4                 call    sub_413750
.text:004136F9                 cmp     ebx, eax
.text:004136FB                 jz      short loc_413714
.text:004136FD
.text:004136FD loc_4136FD:                             ; CODE XREF: .text:00413722↓j
.text:004136FD                 mov     esi, 1
.text:00413702
.text:00413702 loc_413702:                             ; CODE XREF: .text:00413724↓j
.text:00413702                 mov     ds:dword_4189E0, esi
.text:00413708                 mov     ebx, [esp+4]
.text:0041370C                 mov     esi, [esp+8]
.text:00413710                 add     esp, 0Ch
.text:00413713                 retn
.text:00413714 ; ---------------------------------------------------------------------------
.text:00413714
.text:00413714 loc_413714:                             ; CODE XREF: .text:004136FB↑j
.text:00413714                 call    sub_413740
.text:00413719                 mov     ebx, eax
.text:0041371B                 call    sub_413730
.text:00413720                 cmp     ebx, eax
.text:00413722                 jnz     short loc_4136FD
.text:00413724                 jmp     short loc_413702
.text:00413724 ; ---------------------------------------------------------------------------
.text:00413726                 align 10h
.text:00413730
.text:00413730 ; =============== S U B R O U T I N E =======================================
.text:00413730
.text:00413730
.text:00413730 sub_413730      proc near               ; CODE XREF: .text:0041371B↑p
.text:00413730                 xor     eax, eax
.text:00413732                 retn
.text:00413732 sub_413730      endp
.text:00413732
.text:00413732 ; ---------------------------------------------------------------------------
.text:00413733                 align 10h
.text:00413740
.text:00413740 ; =============== S U B R O U T I N E =======================================
.text:00413740
.text:00413740
.text:00413740 sub_413740      proc near               ; CODE XREF: .text:loc_413714↑p
.text:00413740                 xor     eax, eax
.text:00413742                 retn
.text:00413742 sub_413740      endp
.text:00413742
.text:00413742 ; ---------------------------------------------------------------------------
.text:00413743                 align 10h
.text:00413750
.text:00413750 ; =============== S U B R O U T I N E =======================================
.text:00413750
.text:00413750
.text:00413750 sub_413750      proc near               ; CODE XREF: .text:004136F4↑p
.text:00413750                 xor     eax, eax
.text:00413752                 retn
.text:00413752 sub_413750      endp
.text:00413752
.text:00413752 ; ---------------------------------------------------------------------------
.text:00413753                 align 10h
.text:00413760
.text:00413760 ; =============== S U B R O U T I N E =======================================
.text:00413760
.text:00413760
.text:00413760 sub_413760      proc near               ; CODE XREF: .text:004136ED↑p
.text:00413760                 xor     eax, eax
.text:00413762                 retn
.text:00413762 sub_413760      endp
.text:00413762
.text:00413762 ; ---------------------------------------------------------------------------
.text:00413763                 align 10h
.text:00413770
.text:00413770 ; =============== S U B R O U T I N E =======================================
.text:00413770
.text:00413770 ; Attributes: thunk
.text:00413770
.text:00413770 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00413770 OleInitialize   proc near               ; CODE XREF: sub_412730+1A↑p
.text:00413770
.text:00413770 pvReserved      = dword ptr  4
.text:00413770
.text:00413770                 jmp     ds:__imp_OleInitialize
.text:00413770 OleInitialize   endp
.text:00413770
.text:00413770 ; ---------------------------------------------------------------------------
.text:00413776                 align 10h
.text:00413780
.text:00413780 ; =============== S U B R O U T I N E =======================================
.text:00413780
.text:00413780 ; Attributes: thunk
.text:00413780
.text:00413780 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00413780 CoCreateInstance proc near              ; CODE XREF: sub_412730+52↑p
.text:00413780
.text:00413780 rclsid          = dword ptr  4
.text:00413780 pUnkOuter       = dword ptr  8
.text:00413780 dwClsContext    = dword ptr  0Ch
.text:00413780 riid            = dword ptr  10h
.text:00413780 ppv             = dword ptr  14h
.text:00413780
.text:00413780                 jmp     ds:__imp_CoCreateInstance
.text:00413780 CoCreateInstance endp
.text:00413780
.text:00413780 ; ---------------------------------------------------------------------------
.text:00413786                 align 10h
.text:00413790
.text:00413790 ; =============== S U B R O U T I N E =======================================
.text:00413790
.text:00413790 ; Attributes: thunk
.text:00413790
.text:00413790 ; void __stdcall CoUninitialize()
.text:00413790 CoUninitialize  proc near               ; CODE XREF: sub_412730+14E↑p
.text:00413790                                         ; sub_412730+16D↑p
.text:00413790                 jmp     ds:__imp_CoUninitialize
.text:00413790 CoUninitialize  endp
.text:00413790
.text:00413790 ; ---------------------------------------------------------------------------
.text:00413796                 align 10h
.text:004137A0                 add     al, 0BAh ; 'º'
.text:004137A2                 retf
.text:004137A2 ; ---------------------------------------------------------------------------
.text:004137A3                 db 7Eh
.text:004137A4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:004137A4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:004137A4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:004137A4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:004137A4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:004137A4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:004137A4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:004137A4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:004137A4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:004137A4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:004137A4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:004137A4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:004137A4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:004137A4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:004137A4                 dd 0C4426C00h, 330h, 0
.text:004138D8                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004138D8                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:004138D8                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:004138D8                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:00413928                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00413928                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:00413928                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:00413928                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:00413928                 dd 0BA94B00h, 1Bh, 0
.text:00413988                 dd 0C0h, 46000000h, 1Ch, 0
.text:00413998                 dd 0C0h, 46000000h, 331h, 0
.text:004139A8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004139A8                 dd 312h, 0
.text:004139C8                 dd 0C0h, 46000000h, 30Eh, 0
.text:004139D8                 dd 0C0h, 46000000h, 30Dh, 0
.text:004139E8                 dd 0C0h, 46000000h, 311h, 0
.text:004139F8                 dd 0C0h, 46000000h, 313h, 0
.text:00413A08                 dd 0C0h, 46000000h, 30Ch, 0
.text:00413A18                 dd 0C0h, 46000000h, 30Fh, 0
.text:00413A28                 dd 0C0h, 46000000h, 310h, 0
.text:00413A38                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00413A38                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00413A68                 dd 0C0h, 46000000h, 319h, 0
.text:00413A78                 dd 0C0h, 46000000h, 315h, 0
.text:00413A88                 dd 0C0h, 46000000h, 316h, 0
.text:00413A98                 dd 0C0h, 46000000h, 315h, 0
.text:00413AA8                 dd 0C0h, 46000000h, 2E005h, 0
.text:00413AB8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00413AB8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00413AB8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:00413AF8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00413AF8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:00413AF8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:00413AF8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:00413AF8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:00413AF8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:00413AF8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:00413AF8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:00413AF8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:00413AF8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:00413AF8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:00413AF8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00413AF8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:00413AF8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:00413AF8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:00413AF8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00413AF8                 dd 2DE81h, 0
.text:00413C48                 dd 0C0h, 46000000h, 4 dup(0)
.text:00413C60                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00413C60                 dd 0
.text:00413C78                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00413C78                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00413C78                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00413C78                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00413C78                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00413C78                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00413C78                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00413C78                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00413C78                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00413C78                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00413C78                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00413C78                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00413C78                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00413C78                 dd 10Fh, 0
.text:00413D88                 dd 0C0h, 46000000h, 125h, 0
.text:00413D98                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00413D98                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00413D98                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00413DD8                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00413DD8                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00413DD8                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00413DD8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00413DD8                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:00413E38                 dd 0C0h, 46000000h, 2E012h, 0
.text:00413E48                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00413E48                 dd 140h, 0
.text:00413E68                 dd 0C0h, 46000000h, 1, 0
.text:00413E78                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00413E78                 dd 71D3400h, 13Dh, 0
.text:00413E98                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00413E98                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00413E98                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00413E98                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00413EE8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00413EE8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00413EE8                 dd 20405h, 0
.text:00413F18                 dd 0C0h, 46000000h, 2040Eh, 0
.text:00413F28                 dd 0C0h, 46000000h, 20406h, 0
.text:00413F38                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00413F48                 dd 0C0h, 46000000h, 110h, 0
.text:00413F58                 dd 0C0h, 46000000h, 10Eh, 0
.text:00413F68                 dd 0C0h, 46000000h, 123h, 0
.text:00413F78                 dd 0C0h, 46000000h, 124h, 0
.text:00413F88                 dd 0C0h, 46000000h, 13h, 0
.text:00413F98                 dd 0C0h, 46000000h, 14h, 0
.text:00413FA8                 dd 0C0h, 46000000h, 15h, 0
.text:00413FB8                 dd 0C0h, 46000000h, 20400h, 0
.text:00413FC8                 dd 0C0h, 46000000h, 121h, 0
.text:00413FD8                 dd 0C0h, 46000000h, 122h, 0
.text:00413FE8                 dd 0C0h, 46000000h, 2E011h, 0
.text:00413FF8                 dd 0C0h, 46000000h, 108h, 0
.text:00414008                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:00414008                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00414008                 dd 103h, 0
.text:00414038                 dd 0C0h, 46000000h, 2E000h, 0
.text:00414048                 dd 0C0h, 46000000h, 106h, 0
.text:00414058                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00414058                 dd 107h, 0
.text:00414078                 dd 0C0h, 46000000h, 102h, 0
.text:00414088                 dd 0C0h, 46000000h, 104h, 0
.text:00414098                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00414098                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00414098                 dd 105h, 0
.text:004140C8                 dd 0C0h, 46000000h, 13Bh, 0
.text:004140D8                 dd 0C0h, 46000000h, 139h, 0
.text:004140E8                 dd 0C0h, 46000000h, 0Dh, 0
.text:004140F8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004140F8                 dd 101h, 0
.text:00414118                 dd 0C0h, 46000000h, 100h, 0
.text:00414128                 dd 0C0h, 46000000h, 20404h, 0
.text:00414138                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00414138                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00414168                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00414168                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00414168                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00414168                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:004141B8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004141B8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:004141B8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:004141B8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:004141B8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004141B8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:00414238                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:00414238                 dd 0Ah, 0
.text:00414258                 dd 0C0h, 46000000h, 2, 0
.text:00414268                 dd 0C0h, 46000000h, 1Dh, 0
.text:00414278                 dd 0C0h, 46000000h, 3, 0
.text:00414288                 dd 0C0h, 46000000h, 16h, 0
.text:00414298                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00414298                 dd 1608D74Fh, 0Fh, 0
.text:004142B8                 dd 0C0h, 46000000h, 20h, 0
.text:004142C8                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:004142C8                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:004142C8                 dd 0
.text:004142F8                 dd 0C0h, 46000000h, 11Eh, 0
.text:00414308                 dd 0C0h, 46000000h, 128h, 0
.text:00414318                 dd 0C0h, 46000000h, 129h, 0
.text:00414328                 dd 0C0h, 46000000h, 118h, 0
.text:00414338                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:00414338                 dd 70474000h, 11Bh, 0
.text:00414358                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00414358                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00414358                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00414358                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00414358                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:004143B8                 dd 0C0h, 46000000h, 116h, 0
.text:004143C8                 dd 0C0h, 46000000h, 113h, 0
.text:004143D8                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:004143D8                 dd 119h, 0
.text:004143F8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:004143F8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:004143F8                 dd 0
.text:00414428                 dd 0C0h, 46000000h, 11Ch, 0
.text:00414438                 dd 0C0h, 46000000h, 11Dh, 0
.text:00414448                 dd 0C0h, 46000000h, 11Fh, 0
.text:00414458                 dd 0C0h, 46000000h, 112h, 0
.text:00414468                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00414468                 dd 18E6000h, 120h, 0
.text:00414488                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00414488                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00414488                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:004144C8                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:004144C8                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:004144F8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004144F8                 dd 11Ah, 0
.text:00414518                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:00414518                 dd 10Ch, 0
.text:00414538                 dd 0C0h, 46000000h
.text:00414540 dword_414540    dd 10Bh, 0              ; DATA XREF: sub_412730+75↑o
.text:00414548                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00414548                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00414548                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00414548                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00414598                 dd 0C0h, 46000000h, 109h, 0
.text:004145A8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:004145A8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:004145A8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:004145A8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:004145A8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:004145A8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:004145A8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:004145A8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:004145A8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004145A8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:004145A8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00414688                 dd 0C0h, 46000000h, 138h, 0
.text:00414698                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00414698                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00414698                 dd 27h, 0
.text:004146C8                 dd 0C0h, 46000000h, 8, 0
.text:004146D8                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:004146D8                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:004146D8                 dd 20D00h, 0
.text:00414708                 dd 0C0h, 46000000h, 20D03h, 0
.text:00414718                 dd 0C0h, 46000000h, 12h, 0
.text:00414728                 dd 0C0h, 46000000h, 4, 0
.text:00414738                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00414738                 dd 7, 0
.text:00414758                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00414758                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00414788                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00414788                 dd 126h, 0
.text:004147A8                 dd 0C0h, 46000000h, 10h, 0
.text:004147B8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:004147B8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:004147E8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:004147E8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:004147E8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:00414828                 dd 0C0h, 46000000h, 0Bh, 0
.text:00414838                 dd 0C0h, 46000000h, 0Ch, 0
.text:00414848                 dd 0C0h, 46000000h, 26h, 0
.text:00414858                 dd 0C0h, 46000000h, 6, 0
.text:00414868                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00414868                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00414868                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:004148A8                 dd 0C0h, 46000000h, 20403h, 0
.text:004148B8                 dd 0C0h, 46000000h, 20401h, 0
.text:004148C8                 dd 0C0h, 46000000h, 20412h, 0
.text:004148D8                 dd 0C0h, 46000000h, 20402h, 0
.text:004148E8                 dd 0C0h, 46000000h, 20411h, 0
.text:004148F8                 dd 0C0h, 46000000h, 2 dup(0)
.text:00414908                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00414908                 dd 10Dh, 0
.text:00414928                 dd 0C0h, 46000000h, 127h, 0
.text:00414938                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00414938                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:00414938                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00414978                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00414978                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00414978                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:004149B8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:004149C8                 dd 0C0h, 46000000h, 2DE18h, 0
.text:004149D8                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:004149E8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:004149F8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:00414A08                 dd 0C0h, 46000000h, 2DE12h, 0
.text:00414A18                 dd 0C0h, 46000000h, 2DE21h, 0
.text:00414A28                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00414A38                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00414A48                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00414A58                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00414A68                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00414A78                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00414A88                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00414A98                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00414AA8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00414AB8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00414AC8                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00414AD8                 dd 0C0h, 46000000h, 2DE10h, 0
.text:00414AE8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00414AF8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:00414B08                 dd 0C0h, 46000000h, 2DE23h, 0
.text:00414B18                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:00414B28                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00414B38                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00414B48                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00414B58                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00414B68                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00414B78                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00414B88                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00414B98                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00414BA8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00414BB8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00414BC8                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00414BD8                 dd 0C0h, 46000000h, 2DE08h, 0
.text:00414BE8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:00414BE8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:00414C10
.text:00414C10 ; =============== S U B R O U T I N E =======================================
.text:00414C10
.text:00414C10 ; Attributes: thunk
.text:00414C10
.text:00414C10 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00414C10 mbrtowc         proc near               ; CODE XREF: sub_40B700+757↑p
.text:00414C10
.text:00414C10 DstCh           = dword ptr  4
.text:00414C10 SrcCh           = dword ptr  8
.text:00414C10 SizeInBytes     = dword ptr  0Ch
.text:00414C10 State           = dword ptr  10h
.text:00414C10
.text:00414C10                 jmp     ds:__imp_mbrtowc
.text:00414C10 mbrtowc         endp
.text:00414C10
.text:00414C10 ; ---------------------------------------------------------------------------
.text:00414C16                 align 10h
.text:00414C20
.text:00414C20 ; =============== S U B R O U T I N E =======================================
.text:00414C20
.text:00414C20 ; Attributes: bp-based frame
.text:00414C20
.text:00414C20 sub_414C20      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00414C20                 push    ebp
.text:00414C21                 mov     ecx, offset dword_418000
.text:00414C26                 cmp     ecx, offset dword_418000
.text:00414C2C                 mov     ebp, esp
.text:00414C2E                 jnb     short loc_414C46
.text:00414C30
.text:00414C30 loc_414C30:                             ; CODE XREF: sub_414C20+24↓j
.text:00414C30                 mov     edx, [ecx+4]
.text:00414C33                 mov     eax, [ecx]
.text:00414C35                 add     ecx, 8
.text:00414C38                 add     [edx+400000h], eax
.text:00414C3E                 cmp     ecx, offset dword_418000
.text:00414C44                 jb      short loc_414C30
.text:00414C46
.text:00414C46 loc_414C46:                             ; CODE XREF: sub_414C20+E↑j
.text:00414C46                 pop     ebp
.text:00414C47                 retn
.text:00414C47 sub_414C20      endp
.text:00414C47
.text:00414C47 ; ---------------------------------------------------------------------------
.text:00414C48                 align 10h
.text:00414C50
.text:00414C50 ; =============== S U B R O U T I N E =======================================
.text:00414C50
.text:00414C50 ; Attributes: bp-based frame
.text:00414C50
.text:00414C50 sub_414C50      proc near               ; CODE XREF: sub_401080+16↑p
.text:00414C50                                         ; TopLevelExceptionFilter+D7↑p
.text:00414C50                 push    ebp
.text:00414C51                 mov     ebp, esp
.text:00414C53                 fninit
.text:00414C55                 pop     ebp
.text:00414C56                 retn
.text:00414C56 sub_414C50      endp
.text:00414C56
.text:00414C56 ; ---------------------------------------------------------------------------
.text:00414C57                 align 10h
.text:00414C60
.text:00414C60 ; =============== S U B R O U T I N E =======================================
.text:00414C60
.text:00414C60 ; Attributes: bp-based frame
.text:00414C60
.text:00414C60 ; void __cdecl sub_414C60()
.text:00414C60 sub_414C60      proc near               ; DATA XREF: .text:loc_414CA9↓o
.text:00414C60                                         ; sub_414CF0:loc_414D1E↓o
.text:00414C60                 push    ebp
.text:00414C61                 mov     ebp, esp
.text:00414C63                 sub     esp, 8
.text:00414C66                 mov     eax, off_417164
.text:00414C6B                 mov     edx, [eax]
.text:00414C6D                 test    edx, edx
.text:00414C6F                 jnz     short loc_414C75
.text:00414C71
.text:00414C71 loc_414C71:                             ; CODE XREF: sub_414C60+2C↓j
.text:00414C71                 mov     esp, ebp
.text:00414C73                 pop     ebp
.text:00414C74                 retn
.text:00414C75 ; ---------------------------------------------------------------------------
.text:00414C75
.text:00414C75 loc_414C75:                             ; CODE XREF: sub_414C60+F↑j
.text:00414C75                                         ; sub_414C60+2A↓j
.text:00414C75                 call    dword ptr [eax]
.text:00414C77                 mov     edx, off_417164
.text:00414C7D                 mov     ecx, [edx+4]
.text:00414C80                 lea     eax, [edx+4]
.text:00414C83                 mov     off_417164, eax
.text:00414C88                 test    ecx, ecx
.text:00414C8A                 jnz     short loc_414C75
.text:00414C8C                 jmp     short loc_414C71
.text:00414C8C sub_414C60      endp
.text:00414C8C
.text:00414C8C ; ---------------------------------------------------------------------------
.text:00414C8E                 align 10h
.text:00414C90                 push    ebp
.text:00414C91                 mov     ebp, esp
.text:00414C93                 sub     esp, 8
.text:00414C96                 mov     [ebp-4], ebx
.text:00414C99                 mov     eax, ds:dword_416030
.text:00414C9E                 cmp     eax, 0FFFFFFFFh
.text:00414CA1                 jz      short loc_414CCC
.text:00414CA3
.text:00414CA3 loc_414CA3:                             ; CODE XREF: .text:00414CD6↓j
.text:00414CA3                                         ; .text:00414CE9↓j
.text:00414CA3                 test    eax, eax
.text:00414CA5                 mov     ebx, eax
.text:00414CA7                 jnz     short loc_414CC0
.text:00414CA9
.text:00414CA9 loc_414CA9:                             ; CODE XREF: .text:00414CCA↓j
.text:00414CA9                 mov     dword ptr [esp], offset sub_414C60
.text:00414CB0                 call    sub_401040
.text:00414CB5                 mov     ebx, [ebp-4]
.text:00414CB8                 mov     esp, ebp
.text:00414CBA                 pop     ebp
.text:00414CBB                 retn
.text:00414CBB ; ---------------------------------------------------------------------------
.text:00414CBC                 align 10h
.text:00414CC0
.text:00414CC0 loc_414CC0:                             ; CODE XREF: .text:00414CA7↑j
.text:00414CC0                                         ; .text:00414CC8↓j
.text:00414CC0                 call    ds:dword_416030[ebx*4]
.text:00414CC7                 dec     ebx
.text:00414CC8                 jnz     short loc_414CC0
.text:00414CCA                 jmp     short loc_414CA9
.text:00414CCC ; ---------------------------------------------------------------------------
.text:00414CCC
.text:00414CCC loc_414CCC:                             ; CODE XREF: .text:00414CA1↑j
.text:00414CCC                 mov     ecx, ds:dword_416034
.text:00414CD2                 xor     eax, eax
.text:00414CD4                 test    ecx, ecx
.text:00414CD6                 jz      short loc_414CA3
.text:00414CD8                 mov     edx, offset dword_416030
.text:00414CDD                 lea     esi, [esi+0]
.text:00414CE0
.text:00414CE0 loc_414CE0:                             ; CODE XREF: .text:00414CE7↓j
.text:00414CE0                 inc     eax
.text:00414CE1                 mov     ecx, [edx+eax*4+4]
.text:00414CE5                 test    ecx, ecx
.text:00414CE7                 jnz     short loc_414CE0
.text:00414CE9                 jmp     short loc_414CA3
.text:00414CE9 ; ---------------------------------------------------------------------------
.text:00414CEB                 align 10h
.text:00414CF0
.text:00414CF0 ; =============== S U B R O U T I N E =======================================
.text:00414CF0
.text:00414CF0 ; Attributes: bp-based frame
.text:00414CF0
.text:00414CF0 sub_414CF0      proc near               ; CODE XREF: sub_4021E0+16↑p
.text:00414CF0
.text:00414CF0 var_8           = dword ptr -8
.text:00414CF0 var_4           = dword ptr -4
.text:00414CF0
.text:00414CF0                 push    ebp
.text:00414CF1                 mov     ebp, esp
.text:00414CF3                 sub     esp, 8
.text:00414CF6                 mov     [ebp+var_4], ebx
.text:00414CF9                 mov     edx, dword_417160
.text:00414CFF                 test    edx, edx
.text:00414D01                 jnz     short loc_414D2A
.text:00414D03                 mov     eax, ds:dword_416030
.text:00414D08                 mov     edx, 1
.text:00414D0D                 mov     dword_417160, edx
.text:00414D13                 cmp     eax, 0FFFFFFFFh
.text:00414D16                 jz      short loc_414D3D
.text:00414D18
.text:00414D18 loc_414D18:                             ; CODE XREF: sub_414CF0+57↓j
.text:00414D18                                         ; sub_414CF0+69↓j
.text:00414D18                 test    eax, eax
.text:00414D1A                 mov     ebx, eax
.text:00414D1C                 jnz     short loc_414D31
.text:00414D1E
.text:00414D1E loc_414D1E:                             ; CODE XREF: sub_414CF0+4B↓j
.text:00414D1E                 mov     [esp+8+var_8], offset sub_414C60 ; void (__cdecl *)()
.text:00414D25                 call    sub_401040
.text:00414D2A
.text:00414D2A loc_414D2A:                             ; CODE XREF: sub_414CF0+11↑j
.text:00414D2A                 mov     ebx, [ebp+var_4]
.text:00414D2D                 mov     esp, ebp
.text:00414D2F                 pop     ebp
.text:00414D30                 retn
.text:00414D31 ; ---------------------------------------------------------------------------
.text:00414D31
.text:00414D31 loc_414D31:                             ; CODE XREF: sub_414CF0+2C↑j
.text:00414D31                                         ; sub_414CF0+49↓j
.text:00414D31                 call    ds:dword_416030[ebx*4]
.text:00414D38                 dec     ebx
.text:00414D39                 jnz     short loc_414D31
.text:00414D3B                 jmp     short loc_414D1E
.text:00414D3D ; ---------------------------------------------------------------------------
.text:00414D3D
.text:00414D3D loc_414D3D:                             ; CODE XREF: sub_414CF0+26↑j
.text:00414D3D                 mov     ecx, ds:dword_416034
.text:00414D43                 xor     eax, eax
.text:00414D45                 test    ecx, ecx
.text:00414D47                 jz      short loc_414D18
.text:00414D49                 mov     edx, offset dword_416030
.text:00414D4E                 mov     esi, esi
.text:00414D50
.text:00414D50 loc_414D50:                             ; CODE XREF: sub_414CF0+67↓j
.text:00414D50                 inc     eax
.text:00414D51                 mov     ebx, [edx+eax*4+4]
.text:00414D55                 test    ebx, ebx
.text:00414D57                 jnz     short loc_414D50
.text:00414D59                 jmp     short loc_414D18
.text:00414D59 sub_414CF0      endp
.text:00414D59
.text:00414D59 ; ---------------------------------------------------------------------------
.text:00414D5B                 align 10h
.text:00414D60 flt_414D60      dd 2.3283064e-10        ; DATA XREF: sub_414D70+2B↓r
.text:00414D64 flt_414D64      dd 1.8446744e19         ; DATA XREF: sub_414D70:loc_414E06↓r
.text:00414D68                 align 10h
.text:00414D70
.text:00414D70 ; =============== S U B R O U T I N E =======================================
.text:00414D70
.text:00414D70 ; Attributes: bp-based frame
.text:00414D70
.text:00414D70 ; int __cdecl sub_414D70(double)
.text:00414D70 sub_414D70      proc near               ; CODE XREF: sub_403CC0+1E8↑p
.text:00414D70
.text:00414D70 var_28          = qword ptr -28h
.text:00414D70 var_20          = qword ptr -20h
.text:00414D70 var_14          = word ptr -14h
.text:00414D70 var_12          = word ptr -12h
.text:00414D70 var_10          = qword ptr -10h
.text:00414D70 var_4           = dword ptr -4
.text:00414D70 arg_0           = qword ptr  8
.text:00414D70
.text:00414D70                 push    ebp
.text:00414D71                 fldz
.text:00414D73                 mov     ebp, esp
.text:00414D75                 sub     esp, 20h
.text:00414D78                 fld     [ebp+arg_0]
.text:00414D7B                 fxch    st(1)
.text:00414D7D                 mov     [ebp+var_4], ebx
.text:00414D80                 fucom   st(1)
.text:00414D82                 fnstsw  ax
.text:00414D84                 sahf
.text:00414D85                 jbe     short loc_414D96
.text:00414D87                 fstp    st
.text:00414D89                 fstp    st
.text:00414D8B                 xor     eax, eax
.text:00414D8D                 xor     edx, edx
.text:00414D8F
.text:00414D8F loc_414D8F:                             ; CODE XREF: sub_414D70+80↓j
.text:00414D8F                 mov     ebx, [ebp+var_4]
.text:00414D92                 mov     esp, ebp
.text:00414D94                 pop     ebp
.text:00414D95                 retn
.text:00414D96 ; ---------------------------------------------------------------------------
.text:00414D96
.text:00414D96 loc_414D96:                             ; CODE XREF: sub_414D70+15↑j
.text:00414D96                 fnstcw  [ebp+var_12]
.text:00414D99                 xor     ecx, ecx
.text:00414D9B                 fld     ds:flt_414D60
.text:00414DA1                 movzx   eax, [ebp+var_12]
.text:00414DA5                 fmul    st, st(2)
.text:00414DA7                 or      ax, 0C00h
.text:00414DAB                 mov     [ebp+var_14], ax
.text:00414DAF                 fldcw   [ebp+var_14]
.text:00414DB2                 fistp   [ebp+var_20]
.text:00414DB5                 fldcw   [ebp+var_12]
.text:00414DB8                 mov     eax, dword ptr [ebp+var_20]
.text:00414DBB                 mov     ebx, eax
.text:00414DBD                 push    eax
.text:00414DBE                 push    ecx
.text:00414DBF                 fild    [esp+28h+var_28]
.text:00414DC2                 add     esp, 8
.text:00414DC5                 test    eax, eax
.text:00414DC7                 js      short loc_414E06
.text:00414DC9
.text:00414DC9 loc_414DC9:                             ; CODE XREF: sub_414D70+9C↓j
.text:00414DC9                 fstp    [ebp+var_10]
.text:00414DCC                 fld     [ebp+var_10]
.text:00414DCF                 fsubp   st(2), st
.text:00414DD1                 fucomp  st(1)
.text:00414DD3                 fnstsw  ax
.text:00414DD5                 sahf
.text:00414DD6                 jbe     short loc_414DF2
.text:00414DD8                 fchs
.text:00414DDA                 xor     edx, edx
.text:00414DDC                 fldcw   [ebp+var_14]
.text:00414DDF                 fistp   [ebp+var_20]
.text:00414DE2                 fldcw   [ebp+var_12]
.text:00414DE5                 mov     eax, dword ptr [ebp+var_20]
.text:00414DE8                 sub     ecx, eax
.text:00414DEA                 sbb     ebx, edx
.text:00414DEC
.text:00414DEC loc_414DEC:                             ; CODE XREF: sub_414D70+94↓j
.text:00414DEC                 mov     eax, ecx
.text:00414DEE                 mov     edx, ebx
.text:00414DF0                 jmp     short loc_414D8F
.text:00414DF2 ; ---------------------------------------------------------------------------
.text:00414DF2
.text:00414DF2 loc_414DF2:                             ; CODE XREF: sub_414D70+66↑j
.text:00414DF2                 fldcw   [ebp+var_14]
.text:00414DF5                 fistp   [ebp+var_20]
.text:00414DF8                 fldcw   [ebp+var_12]
.text:00414DFB                 xor     edx, edx
.text:00414DFD                 mov     eax, dword ptr [ebp+var_20]
.text:00414E00                 add     ecx, eax
.text:00414E02                 adc     ebx, edx
.text:00414E04                 jmp     short loc_414DEC
.text:00414E06 ; ---------------------------------------------------------------------------
.text:00414E06
.text:00414E06 loc_414E06:                             ; CODE XREF: sub_414D70+57↑j
.text:00414E06                 fadd    ds:flt_414D64
.text:00414E0C                 jmp     short loc_414DC9
.text:00414E0C sub_414D70      endp
.text:00414E0C
.text:00414E0C ; ---------------------------------------------------------------------------
.text:00414E0E                 align 10h
.text:00414E10
.text:00414E10 ; =============== S U B R O U T I N E =======================================
.text:00414E10
.text:00414E10 ; Attributes: info_from_lumina
.text:00414E10
.text:00414E10 ; void *__cdecl _alloca(size_t Size)
.text:00414E10 __alloca        proc near               ; CODE XREF: sub_4021E0+11↑p
.text:00414E10                                         ; sub_406350+9↑p
.text:00414E10                 push    ecx
.text:00414E11                 mov     ecx, esp
.text:00414E13                 add     ecx, 8
.text:00414E16
.text:00414E16 loc_414E16:                             ; CODE XREF: __alloca+1B↓j
.text:00414E16                 cmp     eax, 1000h
.text:00414E1B                 jb      short loc_414E2D
.text:00414E1D                 sub     ecx, 1000h
.text:00414E23                 or      dword ptr [ecx], 0
.text:00414E26                 sub     eax, 1000h
.text:00414E2B                 jmp     short loc_414E16
.text:00414E2D ; ---------------------------------------------------------------------------
.text:00414E2D
.text:00414E2D loc_414E2D:                             ; CODE XREF: __alloca+B↑j
.text:00414E2D                 sub     ecx, eax
.text:00414E2F                 or      dword ptr [ecx], 0
.text:00414E32                 mov     eax, esp
.text:00414E34                 mov     esp, ecx
.text:00414E36                 mov     ecx, [eax]
.text:00414E38                 mov     eax, [eax+4]
.text:00414E3B                 jmp     eax
.text:00414E3B __alloca        endp
.text:00414E3B
.text:00414E3B ; ---------------------------------------------------------------------------
.text:00414E3D                 align 10h
.text:00414E40
.text:00414E40 ; =============== S U B R O U T I N E =======================================
.text:00414E40
.text:00414E40 ; Attributes: bp-based frame
.text:00414E40
.text:00414E40 sub_414E40      proc near               ; CODE XREF: sub_40A410+38↑p
.text:00414E40                                         ; sub_40D450+1A5↑p ...
.text:00414E40
.text:00414E40 var_34          = dword ptr -34h
.text:00414E40 var_2C          = dword ptr -2Ch
.text:00414E40 var_28          = dword ptr -28h
.text:00414E40 var_24          = dword ptr -24h
.text:00414E40 var_20          = dword ptr -20h
.text:00414E40 var_1C          = dword ptr -1Ch
.text:00414E40 var_18          = dword ptr -18h
.text:00414E40 var_14          = dword ptr -14h
.text:00414E40 arg_0           = dword ptr  8
.text:00414E40 arg_4           = dword ptr  0Ch
.text:00414E40 arg_8           = dword ptr  10h
.text:00414E40 arg_C           = dword ptr  14h
.text:00414E40
.text:00414E40                 push    ebp
.text:00414E41                 mov     ebp, esp
.text:00414E43                 push    edi
.text:00414E44                 push    esi
.text:00414E45                 push    ebx
.text:00414E46                 sub     esp, 2Ch
.text:00414E49                 mov     edx, [ebp+arg_C]
.text:00414E4C                 mov     [ebp+var_20], 0
.text:00414E53                 mov     ecx, [ebp+arg_0]
.text:00414E56                 mov     ebx, [ebp+arg_4]
.text:00414E59                 mov     [ebp+var_1C], 0
.text:00414E60                 mov     eax, [ebp+arg_8]
.text:00414E63                 test    edx, edx
.text:00414E65                 mov     [ebp+var_24], edx
.text:00414E68                 mov     edi, ebx
.text:00414E6A                 mov     esi, eax
.text:00414E6C                 mov     [ebp+var_28], ecx
.text:00414E6F                 jnz     short loc_414ED0
.text:00414E71                 cmp     eax, ebx
.text:00414E73                 jbe     short loc_414EB0
.text:00414E75                 mov     eax, ecx
.text:00414E77                 mov     edx, ebx
.text:00414E79                 div     esi
.text:00414E7B
.text:00414E7B loc_414E7B:                             ; CODE XREF: sub_414E40+8B↓j
.text:00414E7B                 mov     [ebp+var_28], edx
.text:00414E7E                 lea     ecx, [ebp+var_18]
.text:00414E81                 test    ecx, ecx
.text:00414E83                 jz      short loc_414E9E
.text:00414E85                 mov     [ebp+var_1C], 0
.text:00414E8C
.text:00414E8C loc_414E8C:                             ; CODE XREF: sub_414E40+DA↓j
.text:00414E8C                 mov     eax, [ebp+var_28]
.text:00414E8F                 mov     [ebp+var_20], eax
.text:00414E92                 mov     edx, [ebp+var_20]
.text:00414E95                 mov     ecx, [ebp+var_1C]
.text:00414E98                 mov     [ebp+var_18], edx
.text:00414E9B                 mov     [ebp+var_14], ecx
.text:00414E9E
.text:00414E9E loc_414E9E:                             ; CODE XREF: sub_414E40+43↑j
.text:00414E9E                                         ; sub_414E40+A7↓j ...
.text:00414E9E                 mov     eax, [ebp+var_18]
.text:00414EA1                 mov     edx, [ebp+var_14]
.text:00414EA4                 add     esp, 2Ch
.text:00414EA7                 pop     ebx
.text:00414EA8                 pop     esi
.text:00414EA9                 pop     edi
.text:00414EAA                 pop     ebp
.text:00414EAB                 retn
.text:00414EAB ; ---------------------------------------------------------------------------
.text:00414EAC                 align 10h
.text:00414EB0
.text:00414EB0 loc_414EB0:                             ; CODE XREF: sub_414E40+33↑j
.text:00414EB0                 test    eax, eax
.text:00414EB2                 jnz     short loc_414EBF
.text:00414EB4                 mov     eax, 1
.text:00414EB9                 xor     edx, edx
.text:00414EBB                 div     esi
.text:00414EBD                 mov     esi, eax
.text:00414EBF
.text:00414EBF loc_414EBF:                             ; CODE XREF: sub_414E40+72↑j
.text:00414EBF                 mov     eax, edi
.text:00414EC1                 mov     edx, [ebp+var_24]
.text:00414EC4                 div     esi
.text:00414EC6                 mov     eax, [ebp+var_28]
.text:00414EC9                 div     esi
.text:00414ECB                 jmp     short loc_414E7B
.text:00414ECB ; ---------------------------------------------------------------------------
.text:00414ECD                 align 10h
.text:00414ED0
.text:00414ED0 loc_414ED0:                             ; CODE XREF: sub_414E40+2F↑j
.text:00414ED0                 cmp     [ebp+var_24], ebx
.text:00414ED3                 jbe     short loc_414EF0
.text:00414ED5                 mov     [ebp+var_20], ecx
.text:00414ED8
.text:00414ED8 loc_414ED8:                             ; CODE XREF: sub_414E40+15B↓j
.text:00414ED8                 mov     [ebp+var_1C], edi
.text:00414EDB                 mov     eax, [ebp+var_20]
.text:00414EDE                 mov     edx, [ebp+var_1C]
.text:00414EE1                 mov     [ebp+var_18], eax
.text:00414EE4                 mov     [ebp+var_14], edx
.text:00414EE7                 jmp     short loc_414E9E
.text:00414EE7 ; ---------------------------------------------------------------------------
.text:00414EE9                 align 10h
.text:00414EF0
.text:00414EF0 loc_414EF0:                             ; CODE XREF: sub_414E40+93↑j
.text:00414EF0                 bsr     eax, [ebp+var_24]
.text:00414EF4                 mov     ebx, eax
.text:00414EF6                 xor     ebx, 1Fh
.text:00414EF9                 jnz     short loc_414F20
.text:00414EFB                 cmp     edi, [ebp+var_24]
.text:00414EFE                 ja      short loc_414F05
.text:00414F00                 cmp     [ebp+var_28], esi
.text:00414F03                 jb      short loc_414F10
.text:00414F05
.text:00414F05 loc_414F05:                             ; CODE XREF: sub_414E40+BE↑j
.text:00414F05                 mov     edx, [ebp+var_28]
.text:00414F08                 sub     edx, esi
.text:00414F0A                 sbb     edi, [ebp+var_24]
.text:00414F0D                 mov     [ebp+var_28], edx
.text:00414F10
.text:00414F10 loc_414F10:                             ; CODE XREF: sub_414E40+C3↑j
.text:00414F10                 lea     ecx, [ebp+var_18]
.text:00414F13                 test    ecx, ecx
.text:00414F15                 jz      short loc_414E9E
.text:00414F17                 mov     [ebp+var_1C], edi
.text:00414F1A                 jmp     loc_414E8C
.text:00414F1A ; ---------------------------------------------------------------------------
.text:00414F1F                 align 10h
.text:00414F20
.text:00414F20 loc_414F20:                             ; CODE XREF: sub_414E40+B9↑j
.text:00414F20                 mov     edx, [ebp+var_24]
.text:00414F23                 mov     eax, 20h ; ' '
.text:00414F28                 mov     cl, bl
.text:00414F2A                 sub     eax, ebx
.text:00414F2C                 mov     [ebp+var_2C], eax
.text:00414F2F                 shl     edx, cl
.text:00414F31                 mov     eax, esi
.text:00414F33                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00414F37                 shr     eax, cl
.text:00414F39                 mov     cl, bl
.text:00414F3B                 shl     esi, cl
.text:00414F3D                 or      edx, eax
.text:00414F3F                 mov     eax, [ebp+var_28]
.text:00414F42                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00414F46                 mov     [ebp+var_24], edx
.text:00414F49                 mov     edx, edi
.text:00414F4B                 shr     edx, cl
.text:00414F4D                 mov     cl, bl
.text:00414F4F                 shl     edi, cl
.text:00414F51                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00414F55                 shr     eax, cl
.text:00414F57                 or      edi, eax
.text:00414F59                 mov     eax, edi
.text:00414F5B                 mov     cl, bl
.text:00414F5D                 div     [ebp+var_24]
.text:00414F60                 shl     [ebp+var_28], cl
.text:00414F63                 mov     edi, edx
.text:00414F65                 mul     esi
.text:00414F67                 mov     [ebp+var_34], eax
.text:00414F6A                 cmp     edx, edi
.text:00414F6C                 ja      short loc_414FA8
.text:00414F6E                 cmp     edx, edi
.text:00414F70                 jz      short loc_414FA0
.text:00414F72
.text:00414F72 loc_414F72:                             ; CODE XREF: sub_414E40+166↓j
.text:00414F72                                         ; sub_414E40+173↓j
.text:00414F72                 lea     eax, [ebp+var_18]
.text:00414F75                 test    eax, eax
.text:00414F77                 jz      loc_414E9E
.text:00414F7D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00414F81                 mov     eax, [ebp+var_28]
.text:00414F84                 sub     eax, [ebp+var_34]
.text:00414F87                 sbb     edi, edx
.text:00414F89                 mov     [ebp+var_28], eax
.text:00414F8C                 mov     edx, edi
.text:00414F8E                 shl     edx, cl
.text:00414F90                 mov     cl, bl
.text:00414F92                 shr     eax, cl
.text:00414F94                 or      edx, eax
.text:00414F96                 mov     [ebp+var_20], edx
.text:00414F99                 shr     edi, cl
.text:00414F9B                 jmp     loc_414ED8
.text:00414FA0 ; ---------------------------------------------------------------------------
.text:00414FA0
.text:00414FA0 loc_414FA0:                             ; CODE XREF: sub_414E40+130↑j
.text:00414FA0                 mov     eax, [ebp+var_28]
.text:00414FA3                 cmp     [ebp+var_34], eax
.text:00414FA6                 jbe     short loc_414F72
.text:00414FA8
.text:00414FA8 loc_414FA8:                             ; CODE XREF: sub_414E40+12C↑j
.text:00414FA8                 mov     ecx, [ebp+var_34]
.text:00414FAB                 sub     ecx, esi
.text:00414FAD                 sbb     edx, [ebp+var_24]
.text:00414FB0                 mov     [ebp+var_34], ecx
.text:00414FB3                 jmp     short loc_414F72
.text:00414FB3 sub_414E40      endp
.text:00414FB3
.text:00414FB3 ; ---------------------------------------------------------------------------
.text:00414FB5                 align 10h
.text:00414FC0
.text:00414FC0 ; =============== S U B R O U T I N E =======================================
.text:00414FC0
.text:00414FC0 ; Attributes: bp-based frame
.text:00414FC0
.text:00414FC0 sub_414FC0      proc near               ; CODE XREF: sub_40A410+58↑p
.text:00414FC0                                         ; sub_40A940+2BE↑p ...
.text:00414FC0
.text:00414FC0 var_24          = dword ptr -24h
.text:00414FC0 var_20          = dword ptr -20h
.text:00414FC0 var_1C          = dword ptr -1Ch
.text:00414FC0 var_18          = dword ptr -18h
.text:00414FC0 var_14          = dword ptr -14h
.text:00414FC0 var_C           = dword ptr -0Ch
.text:00414FC0 var_8           = dword ptr -8
.text:00414FC0 var_4           = dword ptr -4
.text:00414FC0 arg_0           = dword ptr  8
.text:00414FC0 arg_4           = dword ptr  0Ch
.text:00414FC0 arg_8           = dword ptr  10h
.text:00414FC0 arg_C           = dword ptr  14h
.text:00414FC0
.text:00414FC0                 push    ebp
.text:00414FC1                 mov     ebp, esp
.text:00414FC3                 sub     esp, 28h
.text:00414FC6                 mov     [ebp+var_C], ebx
.text:00414FC9                 mov     edx, [ebp+arg_C]
.text:00414FCC                 mov     ecx, [ebp+arg_0]
.text:00414FCF                 mov     [ebp+var_8], esi
.text:00414FD2                 mov     eax, [ebp+arg_8]
.text:00414FD5                 test    edx, edx
.text:00414FD7                 mov     [ebp+var_4], edi
.text:00414FDA                 mov     ebx, [ebp+arg_4]
.text:00414FDD                 mov     esi, eax
.text:00414FDF                 mov     [ebp+var_18], 0
.text:00414FE6                 mov     [ebp+var_14], 0
.text:00414FED                 mov     [ebp+var_1C], ecx
.text:00414FF0                 jnz     short loc_415042
.text:00414FF2                 cmp     eax, ebx
.text:00414FF4                 jbe     short loc_415020
.text:00414FF6                 mov     eax, ecx
.text:00414FF8                 mov     edx, ebx
.text:00414FFA                 div     esi
.text:00414FFC                 mov     edi, eax
.text:00414FFE                 mov     esi, esi
.text:00415000
.text:00415000 loc_415000:                             ; CODE XREF: sub_414FC0+88↓j
.text:00415000                                         ; sub_414FC0+A4↓j ...
.text:00415000                 xor     ecx, ecx
.text:00415002
.text:00415002 loc_415002:                             ; CODE XREF: sub_414FC0+80↓j
.text:00415002                 mov     [ebp+var_18], edi
.text:00415005                 mov     ebx, [ebp+var_C]
.text:00415008                 mov     eax, [ebp+var_18]
.text:0041500B                 mov     [ebp+var_14], ecx
.text:0041500E                 mov     esi, [ebp+var_8]
.text:00415011                 mov     edx, [ebp+var_14]
.text:00415014                 mov     edi, [ebp+var_4]
.text:00415017                 mov     esp, ebp
.text:00415019                 pop     ebp
.text:0041501A                 retn
.text:0041501A ; ---------------------------------------------------------------------------
.text:0041501B                 align 10h
.text:00415020
.text:00415020 loc_415020:                             ; CODE XREF: sub_414FC0+34↑j
.text:00415020                 test    eax, eax
.text:00415022                 jnz     short loc_415031
.text:00415024                 mov     eax, 1
.text:00415029                 xor     ecx, ecx
.text:0041502B                 xor     edx, edx
.text:0041502D                 div     ecx
.text:0041502F                 mov     esi, eax
.text:00415031
.text:00415031 loc_415031:                             ; CODE XREF: sub_414FC0+62↑j
.text:00415031                 mov     eax, ebx
.text:00415033                 xor     edx, edx
.text:00415035                 div     esi
.text:00415037                 mov     ecx, eax
.text:00415039                 mov     eax, [ebp+var_1C]
.text:0041503C                 div     esi
.text:0041503E                 mov     edi, eax
.text:00415040                 jmp     short loc_415002
.text:00415042 ; ---------------------------------------------------------------------------
.text:00415042
.text:00415042 loc_415042:                             ; CODE XREF: sub_414FC0+30↑j
.text:00415042                 cmp     edx, ebx
.text:00415044                 jbe     short loc_415050
.text:00415046                 xor     edi, edi
.text:00415048                 jmp     short loc_415000
.text:00415048 ; ---------------------------------------------------------------------------
.text:0041504A                 align 10h
.text:00415050
.text:00415050 loc_415050:                             ; CODE XREF: sub_414FC0+84↑j
.text:00415050                 bsr     eax, edx
.text:00415053                 xor     eax, 1Fh
.text:00415056                 mov     [ebp+var_20], eax
.text:00415059                 jnz     short loc_415070
.text:0041505B                 cmp     ebx, edx
.text:0041505D                 ja      short loc_415066
.text:0041505F                 xor     edi, edi
.text:00415061                 cmp     [ebp+var_1C], esi
.text:00415064                 jb      short loc_415000
.text:00415066
.text:00415066 loc_415066:                             ; CODE XREF: sub_414FC0+9D↑j
.text:00415066                 mov     edi, 1
.text:0041506B                 jmp     short loc_415000
.text:0041506B ; ---------------------------------------------------------------------------
.text:0041506D                 align 10h
.text:00415070
.text:00415070 loc_415070:                             ; CODE XREF: sub_414FC0+99↑j
.text:00415070                 mov     eax, [ebp+var_20]
.text:00415073                 mov     ecx, 20h ; ' '
.text:00415078                 sub     ecx, eax
.text:0041507A                 mov     [ebp+var_24], ecx
.text:0041507D                 mov     eax, esi
.text:0041507F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00415083                 shl     edx, cl
.text:00415085                 mov     edi, edx
.text:00415087                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041508B                 mov     edx, ebx
.text:0041508D                 shr     eax, cl
.text:0041508F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00415093                 or      edi, eax
.text:00415095                 mov     eax, [ebp+var_1C]
.text:00415098                 shl     esi, cl
.text:0041509A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041509E                 shr     edx, cl
.text:004150A0                 movzx   ecx, byte ptr [ebp+var_20]
.text:004150A4                 shl     ebx, cl
.text:004150A6                 movzx   ecx, byte ptr [ebp+var_24]
.text:004150AA                 shr     eax, cl
.text:004150AC                 or      ebx, eax
.text:004150AE                 movzx   ecx, byte ptr [ebp+var_20]
.text:004150B2                 mov     eax, ebx
.text:004150B4                 div     edi
.text:004150B6                 mov     ebx, edx
.text:004150B8                 mov     edi, eax
.text:004150BA                 shl     [ebp+var_1C], cl
.text:004150BD                 mul     esi
.text:004150BF                 cmp     edx, ebx
.text:004150C1                 ja      short loc_4150D4
.text:004150C3                 cmp     edx, ebx
.text:004150C5                 jnz     loc_415000
.text:004150CB                 cmp     eax, [ebp+var_1C]
.text:004150CE                 jbe     loc_415000
.text:004150D4
.text:004150D4 loc_4150D4:                             ; CODE XREF: sub_414FC0+101↑j
.text:004150D4                 dec     edi
.text:004150D5                 jmp     loc_415000
.text:004150D5 sub_414FC0      endp
.text:004150D5
.text:004150D5 ; ---------------------------------------------------------------------------
.text:004150DA                 align 10h
.text:004150E0
.text:004150E0 ; =============== S U B R O U T I N E =======================================
.text:004150E0
.text:004150E0 ; Attributes: thunk
.text:004150E0
.text:004150E0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:004150E0 _fdopen         proc near               ; CODE XREF: sub_404600+11C↑p
.text:004150E0                                         ; sub_404600+334↑p ...
.text:004150E0
.text:004150E0 FileHandle      = dword ptr  4
.text:004150E0 Format          = dword ptr  8
.text:004150E0
.text:004150E0                 jmp     ds:__imp__fdopen
.text:004150E0 _fdopen         endp
.text:004150E0
.text:004150E0 ; ---------------------------------------------------------------------------
.text:004150E6                 align 10h
.text:004150F0
.text:004150F0 ; =============== S U B R O U T I N E =======================================
.text:004150F0
.text:004150F0 ; Attributes: thunk
.text:004150F0
.text:004150F0 ; int __cdecl close(int FileHandle)
.text:004150F0 _close          proc near               ; CODE XREF: sub_40B5D0+79↑p
.text:004150F0
.text:004150F0 FileHandle      = dword ptr  4
.text:004150F0
.text:004150F0                 jmp     ds:__imp__close
.text:004150F0 _close          endp
.text:004150F0
.text:004150F0 ; ---------------------------------------------------------------------------
.text:004150F6                 align 10h
.text:00415100
.text:00415100 ; =============== S U B R O U T I N E =======================================
.text:00415100
.text:00415100 ; Attributes: thunk
.text:00415100
.text:00415100 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00415100 _stricmp        proc near               ; CODE XREF: sub_40D920+46F↑p
.text:00415100                                         ; sub_40F8A0+2E↑p ...
.text:00415100
.text:00415100 String1         = dword ptr  4
.text:00415100 String2         = dword ptr  8
.text:00415100
.text:00415100                 jmp     ds:__imp__stricmp
.text:00415100 _stricmp        endp
.text:00415100
.text:00415100 ; ---------------------------------------------------------------------------
.text:00415106                 align 10h
.text:00415110
.text:00415110 ; =============== S U B R O U T I N E =======================================
.text:00415110
.text:00415110 ; Attributes: thunk
.text:00415110
.text:00415110 ; char *__cdecl strdup(const char *String)
.text:00415110 _strdup         proc near               ; CODE XREF: sub_40F4D0+101↑p
.text:00415110                                         ; .text:0040F73A↑p ...
.text:00415110
.text:00415110 String          = dword ptr  4
.text:00415110
.text:00415110                 jmp     ds:__imp__strdup
.text:00415110 _strdup         endp
.text:00415110
.text:00415110 ; ---------------------------------------------------------------------------
.text:00415116                 align 10h
.text:00415120
.text:00415120 ; =============== S U B R O U T I N E =======================================
.text:00415120
.text:00415120 ; Attributes: thunk
.text:00415120
.text:00415120 ; int __cdecl dup(int FileHandle)
.text:00415120 _dup            proc near               ; CODE XREF: sub_4107C0+57↑p
.text:00415120
.text:00415120 FileHandle      = dword ptr  4
.text:00415120
.text:00415120                 jmp     ds:__imp__dup
.text:00415120 _dup            endp
.text:00415120
.text:00415120 ; ---------------------------------------------------------------------------
.text:00415126                 align 10h
.text:00415130
.text:00415130 ; =============== S U B R O U T I N E =======================================
.text:00415130
.text:00415130 ; Attributes: thunk
.text:00415130
.text:00415130 ; int __cdecl getpid()
.text:00415130 _getpid         proc near               ; CODE XREF: sub_412D90+84↑p
.text:00415130                 jmp     ds:__imp__getpid
.text:00415130 _getpid         endp
.text:00415130
.text:00415130 ; ---------------------------------------------------------------------------
.text:00415136                 align 10h
.text:00415140
.text:00415140 ; =============== S U B R O U T I N E =======================================
.text:00415140
.text:00415140 ; Attributes: thunk
.text:00415140
.text:00415140 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00415140 _chmod          proc near               ; CODE XREF: sub_4134F0+41↑j
.text:00415140
.text:00415140 FileName        = dword ptr  4
.text:00415140 AccessMode      = dword ptr  8
.text:00415140
.text:00415140                 jmp     ds:__imp__chmod
.text:00415140 _chmod          endp
.text:00415140
.text:00415140 ; ---------------------------------------------------------------------------
.text:00415146                 align 10h
.text:00415150
.text:00415150 ; =============== S U B R O U T I N E =======================================
.text:00415150
.text:00415150 ; Attributes: info_from_lumina
.text:00415150
.text:00415150 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:00415150 _strtoull       proc near               ; CODE XREF: sub_40A940+AD↑p
.text:00415150
.text:00415150 C               = dword ptr -3Ch
.text:00415150 Type            = dword ptr -38h
.text:00415150 var_34          = dword ptr -34h
.text:00415150 var_30          = dword ptr -30h
.text:00415150 var_2C          = dword ptr -2Ch
.text:00415150 var_28          = dword ptr -28h
.text:00415150 var_24          = dword ptr -24h
.text:00415150 var_20          = dword ptr -20h
.text:00415150 var_1C          = dword ptr -1Ch
.text:00415150 var_18          = dword ptr -18h
.text:00415150 String          = dword ptr  4
.text:00415150 EndPtr          = dword ptr  8
.text:00415150 Radix           = dword ptr  0Ch
.text:00415150
.text:00415150                 push    ebp
.text:00415151                 push    edi
.text:00415152                 push    esi
.text:00415153                 push    ebx
.text:00415154                 sub     esp, 2Ch
.text:00415157                 mov     edx, [esp+3Ch+EndPtr]
.text:0041515B                 test    edx, edx
.text:0041515D                 jz      short loc_415169
.text:0041515F                 mov     eax, [esp+3Ch+String]
.text:00415163                 mov     ecx, [esp+3Ch+EndPtr]
.text:00415167                 mov     [ecx], eax
.text:00415169
.text:00415169 loc_415169:                             ; CODE XREF: _strtoull+D↑j
.text:00415169                 mov     edx, [esp+3Ch+Radix]
.text:0041516D                 test    edx, edx
.text:0041516F                 js      short loc_41517F
.text:00415171                 cmp     [esp+3Ch+Radix], 1
.text:00415176                 jz      short loc_41517F
.text:00415178                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:0041517D                 jle     short loc_415196
.text:0041517F
.text:0041517F loc_41517F:                             ; CODE XREF: _strtoull+1F↑j
.text:0041517F                                         ; _strtoull+26↑j
.text:0041517F                 call    _errno
.text:00415184                 mov     dword ptr [eax], 21h ; '!'
.text:0041518A
.text:0041518A loc_41518A:                             ; CODE XREF: _strtoull+FF↓j
.text:0041518A                                         ; _strtoull+109↓j
.text:0041518A                 xor     eax, eax
.text:0041518C                 xor     edx, edx
.text:0041518E
.text:0041518E loc_41518E:                             ; CODE XREF: _strtoull+244↓j
.text:0041518E                                         ; _strtoull+251↓j ...
.text:0041518E                 add     esp, 2Ch
.text:00415191                 pop     ebx
.text:00415192                 pop     esi
.text:00415193                 pop     edi
.text:00415194                 pop     ebp
.text:00415195                 retn
.text:00415196 ; ---------------------------------------------------------------------------
.text:00415196
.text:00415196 loc_415196:                             ; CODE XREF: _strtoull+2D↑j
.text:00415196                 mov     ecx, ds:__mb_cur_max
.text:0041519C                 lea     esi, [esi+0]
.text:004151A0
.text:004151A0 loc_4151A0:                             ; CODE XREF: _strtoull+7E↓j
.text:004151A0                 cmp     dword ptr [ecx], 1
.text:004151A3                 mov     esi, [esp+3Ch+String]
.text:004151A7                 movsx   edx, byte ptr [esi]
.text:004151AA                 jz      loc_415582
.text:004151B0                 mov     [esp+3Ch+Type], 8 ; Type
.text:004151B8                 mov     [esp+3Ch+C], edx ; C
.text:004151BB                 call    _isctype
.text:004151C0                 mov     ecx, ds:__mb_cur_max
.text:004151C6
.text:004151C6 loc_4151C6:                             ; CODE XREF: _strtoull+445↓j
.text:004151C6                 test    eax, eax
.text:004151C8                 jz      short loc_4151D0
.text:004151CA                 inc     [esp+3Ch+String]
.text:004151CE                 jmp     short loc_4151A0
.text:004151D0 ; ---------------------------------------------------------------------------
.text:004151D0
.text:004151D0 loc_4151D0:                             ; CODE XREF: _strtoull+78↑j
.text:004151D0                 mov     esi, [esp+3Ch+String]
.text:004151D4                 xor     ebx, ebx
.text:004151D6                 movzx   edx, byte ptr [esi]
.text:004151D9                 cmp     dl, 2Dh ; '-'
.text:004151DC                 setz    bl
.text:004151DF                 test    ebx, ebx
.text:004151E1                 mov     [esp+3Ch+var_20], ebx
.text:004151E5                 jnz     loc_415572
.text:004151EB                 cmp     dl, 2Bh ; '+'
.text:004151EE                 jz      loc_415572
.text:004151F4
.text:004151F4 loc_4151F4:                             ; CODE XREF: _strtoull+42D↓j
.text:004151F4                 mov     ebp, [esp+3Ch+Radix]
.text:004151F8                 test    ebp, ebp
.text:004151FA                 jnz     short loc_41520D
.text:004151FC                 cmp     dl, 30h ; '0'
.text:004151FF                 jz      loc_415549
.text:00415205                 mov     [esp+3Ch+Radix], 0Ah
.text:0041520D
.text:0041520D loc_41520D:                             ; CODE XREF: _strtoull+AA↑j
.text:0041520D                                         ; _strtoull+40F↓j ...
.text:0041520D                 cmp     [esp+3Ch+Radix], 10h
.text:00415212                 jz      loc_41551B
.text:00415218
.text:00415218 loc_415218:                             ; CODE XREF: _strtoull+3CE↓j
.text:00415218                                         ; _strtoull+3E2↓j ...
.text:00415218                 cmp     dword ptr [ecx], 1
.text:0041521B                 movsx   ebx, dl
.text:0041521E                 jz      loc_415503
.text:00415224                 mov     [esp+3Ch+Type], 4 ; Type
.text:0041522C                 mov     [esp+3Ch+C], ebx ; C
.text:0041522F                 call    _isctype
.text:00415234                 mov     esi, [esp+3Ch+String]
.text:00415238                 movzx   edx, byte ptr [esi]
.text:0041523B
.text:0041523B loc_41523B:                             ; CODE XREF: _strtoull+3C6↓j
.text:0041523B                 test    eax, eax
.text:0041523D                 jz      loc_41546C
.text:00415243                 movsx   eax, dl
.text:00415246                 sub     eax, 30h ; '0'
.text:00415249
.text:00415249 loc_415249:                             ; CODE XREF: _strtoull+34B↓j
.text:00415249                                         ; _strtoull+37C↓j ...
.text:00415249                 inc     [esp+3Ch+String]
.text:0041524D                 test    eax, eax
.text:0041524F                 js      loc_41518A
.text:00415255                 cmp     eax, [esp+3Ch+Radix]
.text:00415259                 jge     loc_41518A
.text:0041525F                 mov     [esp+3Ch+var_1C], eax
.text:00415263                 mov     edx, eax
.text:00415265                 sar     edx, 1Fh
.text:00415268                 mov     [esp+3Ch+var_18], edx
.text:0041526C                 mov     [esp+3Ch+var_24], 0
.text:00415274                 lea     esi, [esi+0]
.text:0041527A                 lea     edi, [edi+0]
.text:00415280
.text:00415280 loc_415280:                             ; CODE XREF: _strtoull+20C↓j
.text:00415280                 mov     ebp, [esp+3Ch+String]
.text:00415284                 mov     ebx, ds:__mb_cur_max
.text:0041528A                 movzx   edx, byte ptr [ebp+0]
.text:0041528E                 cmp     dword ptr [ebx], 1
.text:00415291                 movsx   ecx, dl
.text:00415294                 jz      loc_415455
.text:0041529A                 mov     [esp+3Ch+C], ecx ; C
.text:0041529D                 mov     [esp+3Ch+Type], 4 ; Type
.text:004152A5                 call    _isctype
.text:004152AA                 mov     ecx, [esp+3Ch+String]
.text:004152AE                 movzx   edx, byte ptr [ecx]
.text:004152B1
.text:004152B1 loc_4152B1:                             ; CODE XREF: _strtoull+317↓j
.text:004152B1                 test    eax, eax
.text:004152B3                 jz      loc_4153C0
.text:004152B9                 movsx   edi, dl
.text:004152BC                 lea     ebp, [edi-30h]
.text:004152BF
.text:004152BF loc_4152BF:                             ; CODE XREF: _strtoull+2A3↓j
.text:004152BF                 test    ebp, ebp
.text:004152C1                 js      loc_41536B
.text:004152C7                 cmp     ebp, [esp+3Ch+Radix]
.text:004152CB                 jge     loc_41536B
.text:004152D1                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:004152D8                 mov     eax, [esp+3Ch+Radix]
.text:004152DC                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:004152E4                 cdq
.text:004152E5                 mov     esi, eax
.text:004152E7                 mov     [esp+3Ch+var_34], eax
.text:004152EB                 mov     edi, edx
.text:004152ED                 mov     [esp+3Ch+var_30], edx
.text:004152F1                 call    sub_414FC0
.text:004152F6                 add     eax, 1
.text:004152F9                 adc     edx, 0
.text:004152FC                 cmp     [esp+3Ch+var_18], edx
.text:00415300                 ja      short loc_415350
.text:00415302                 jb      short loc_41530A
.text:00415304                 cmp     [esp+3Ch+var_1C], eax
.text:00415308                 ja      short loc_415350
.text:0041530A
.text:0041530A loc_41530A:                             ; CODE XREF: _strtoull+1B2↑j
.text:0041530A                 mov     eax, [esp+3Ch+var_1C]
.text:0041530E                 mov     ebx, ebp
.text:00415310                 mul     esi
.text:00415312                 mov     ecx, edx
.text:00415314                 mov     [esp+3Ch+var_2C], eax
.text:00415318                 mov     eax, [esp+3Ch+var_18]
.text:0041531C                 mov     [esp+3Ch+var_28], edx
.text:00415320                 imul    eax, esi
.text:00415323                 mov     esi, [esp+3Ch+var_1C]
.text:00415327                 imul    esi, edi
.text:0041532A                 add     ecx, eax
.text:0041532C                 lea     edi, [esi+ecx]
.text:0041532F                 mov     esi, ebp
.text:00415331                 sar     esi, 1Fh
.text:00415334                 add     ebx, [esp+3Ch+var_2C]
.text:00415338                 mov     [esp+3Ch+var_28], edi
.text:0041533C                 adc     esi, [esp+3Ch+var_28]
.text:00415340                 cmp     esi, [esp+3Ch+var_18]
.text:00415344                 jb      short loc_415350
.text:00415346                 ja      short loc_415361
.text:00415348                 cmp     ebx, [esp+3Ch+var_1C]
.text:0041534C                 jnb     short loc_415361
.text:0041534E                 mov     esi, esi
.text:00415350
.text:00415350 loc_415350:                             ; CODE XREF: _strtoull+1B0↑j
.text:00415350                                         ; _strtoull+1B8↑j ...
.text:00415350                 mov     [esp+3Ch+var_24], 1
.text:00415358
.text:00415358 loc_415358:                             ; CODE XREF: _strtoull+219↓j
.text:00415358                 inc     [esp+3Ch+String]
.text:0041535C                 jmp     loc_415280
.text:00415361 ; ---------------------------------------------------------------------------
.text:00415361
.text:00415361 loc_415361:                             ; CODE XREF: _strtoull+1F6↑j
.text:00415361                                         ; _strtoull+1FC↑j
.text:00415361                 mov     [esp+3Ch+var_1C], ebx
.text:00415365                 mov     [esp+3Ch+var_18], esi
.text:00415369                 jmp     short loc_415358
.text:0041536B ; ---------------------------------------------------------------------------
.text:0041536B
.text:0041536B loc_41536B:                             ; CODE XREF: _strtoull+171↑j
.text:0041536B                                         ; _strtoull+17B↑j
.text:0041536B                 mov     eax, [esp+3Ch+EndPtr]
.text:0041536F                 test    eax, eax
.text:00415371                 jz      short loc_41537E
.text:00415373                 mov     ecx, [esp+3Ch+String]
.text:00415377                 mov     ebp, [esp+3Ch+EndPtr]
.text:0041537B                 mov     [ebp+0], ecx
.text:0041537E
.text:0041537E loc_41537E:                             ; CODE XREF: _strtoull+221↑j
.text:0041537E                 mov     esi, [esp+3Ch+var_24]
.text:00415382                 test    esi, esi
.text:00415384                 jnz     short loc_4153A6
.text:00415386                 mov     ebx, [esp+3Ch+var_20]
.text:0041538A                 mov     eax, [esp+3Ch+var_1C]
.text:0041538E                 mov     edx, [esp+3Ch+var_18]
.text:00415392                 test    ebx, ebx
.text:00415394                 jz      loc_41518E
.text:0041539A                 neg     eax
.text:0041539C                 adc     edx, 0
.text:0041539F                 neg     edx
.text:004153A1                 jmp     loc_41518E
.text:004153A6 ; ---------------------------------------------------------------------------
.text:004153A6
.text:004153A6 loc_4153A6:                             ; CODE XREF: _strtoull+234↑j
.text:004153A6                 call    _errno
.text:004153AB                 mov     edx, 0FFFFFFFFh
.text:004153B0                 mov     dword ptr [eax], 22h ; '"'
.text:004153B6                 mov     eax, 0FFFFFFFFh
.text:004153BB                 jmp     loc_41518E
.text:004153C0 ; ---------------------------------------------------------------------------
.text:004153C0
.text:004153C0 loc_4153C0:                             ; CODE XREF: _strtoull+163↑j
.text:004153C0                 mov     ebp, ds:__mb_cur_max
.text:004153C6                 movsx   ecx, dl
.text:004153C9                 cmp     dword ptr [ebp+0], 1
.text:004153CD                 jz      short loc_415441
.text:004153CF                 mov     [esp+3Ch+Type], 1 ; Type
.text:004153D7                 mov     [esp+3Ch+C], ecx ; C
.text:004153DA                 call    _isctype
.text:004153DF                 mov     ebp, [esp+3Ch+String]
.text:004153E3                 movzx   edx, byte ptr [ebp+0]
.text:004153E7
.text:004153E7 loc_4153E7:                             ; CODE XREF: _strtoull+303↓j
.text:004153E7                 test    eax, eax
.text:004153E9                 jz      short loc_4153F8
.text:004153EB                 movsx   eax, dl
.text:004153EE                 sub     eax, 37h ; '7'
.text:004153F1
.text:004153F1 loc_4153F1:                             ; CODE XREF: _strtoull+2D4↓j
.text:004153F1                                         ; _strtoull+2DB↓j
.text:004153F1                 mov     ebp, eax
.text:004153F3                 jmp     loc_4152BF
.text:004153F8 ; ---------------------------------------------------------------------------
.text:004153F8
.text:004153F8 loc_4153F8:                             ; CODE XREF: _strtoull+299↑j
.text:004153F8                 mov     ecx, ds:__mb_cur_max
.text:004153FE                 movsx   edx, dl
.text:00415401                 cmp     dword ptr [ecx], 1
.text:00415404                 jz      short loc_41542D
.text:00415406                 mov     [esp+3Ch+Type], 2 ; Type
.text:0041540E                 mov     [esp+3Ch+C], edx ; C
.text:00415411                 call    _isctype
.text:00415416
.text:00415416 loc_415416:                             ; CODE XREF: _strtoull+2EF↓j
.text:00415416                 test    eax, eax
.text:00415418                 jz      short loc_415426
.text:0041541A                 mov     edx, [esp+3Ch+String]
.text:0041541E                 movsx   eax, byte ptr [edx]
.text:00415421                 sub     eax, 57h ; 'W'
.text:00415424                 jmp     short loc_4153F1
.text:00415426 ; ---------------------------------------------------------------------------
.text:00415426
.text:00415426 loc_415426:                             ; CODE XREF: _strtoull+2C8↑j
.text:00415426                 mov     eax, 0FFFFFFFFh
.text:0041542B                 jmp     short loc_4153F1
.text:0041542D ; ---------------------------------------------------------------------------
.text:0041542D
.text:0041542D loc_41542D:                             ; CODE XREF: _strtoull+2B4↑j
.text:0041542D                 mov     edi, ds:_pctype
.text:00415433                 mov     ebx, [edi]
.text:00415435                 movzx   esi, word ptr [ebx+edx*2]
.text:00415439                 and     esi, 2
.text:0041543C                 movzx   eax, si
.text:0041543F                 jmp     short loc_415416
.text:00415441 ; ---------------------------------------------------------------------------
.text:00415441
.text:00415441 loc_415441:                             ; CODE XREF: _strtoull+27D↑j
.text:00415441                 mov     edi, ds:_pctype
.text:00415447                 mov     ebx, [edi]
.text:00415449                 movzx   esi, word ptr [ebx+ecx*2]
.text:0041544D                 and     esi, 1
.text:00415450                 movzx   eax, si
.text:00415453                 jmp     short loc_4153E7
.text:00415455 ; ---------------------------------------------------------------------------
.text:00415455
.text:00415455 loc_415455:                             ; CODE XREF: _strtoull+144↑j
.text:00415455                 mov     ebx, ds:_pctype
.text:0041545B                 mov     esi, [ebx]
.text:0041545D                 movzx   edi, word ptr [esi+ecx*2]
.text:00415461                 and     edi, 4
.text:00415464                 movzx   eax, di
.text:00415467                 jmp     loc_4152B1
.text:0041546C ; ---------------------------------------------------------------------------
.text:0041546C
.text:0041546C loc_41546C:                             ; CODE XREF: _strtoull+ED↑j
.text:0041546C                 mov     ebx, ds:__mb_cur_max
.text:00415472                 movsx   ecx, dl
.text:00415475                 cmp     dword ptr [ebx], 1
.text:00415478                 jz      short loc_4154EF
.text:0041547A                 mov     [esp+3Ch+C], ecx ; C
.text:0041547D                 mov     [esp+3Ch+Type], 1 ; Type
.text:00415485                 call    _isctype
.text:0041548A                 mov     ecx, [esp+3Ch+String]
.text:0041548E                 movzx   edx, byte ptr [ecx]
.text:00415491
.text:00415491 loc_415491:                             ; CODE XREF: _strtoull+3B1↓j
.text:00415491                 test    eax, eax
.text:00415493                 jz      short loc_4154A0
.text:00415495                 movsx   eax, dl
.text:00415498                 sub     eax, 37h ; '7'
.text:0041549B                 jmp     loc_415249
.text:004154A0 ; ---------------------------------------------------------------------------
.text:004154A0
.text:004154A0 loc_4154A0:                             ; CODE XREF: _strtoull+343↑j
.text:004154A0                 mov     ebx, ds:__mb_cur_max
.text:004154A6                 movsx   edx, dl
.text:004154A9                 cmp     dword ptr [ebx], 1
.text:004154AC                 jz      short loc_4154DB
.text:004154AE                 mov     [esp+3Ch+Type], 2 ; Type
.text:004154B6                 mov     [esp+3Ch+C], edx ; C
.text:004154B9                 call    _isctype
.text:004154BE
.text:004154BE loc_4154BE:                             ; CODE XREF: _strtoull+39D↓j
.text:004154BE                 test    eax, eax
.text:004154C0                 jz      short loc_4154D1
.text:004154C2                 mov     ecx, [esp+3Ch+String]
.text:004154C6                 movsx   eax, byte ptr [ecx]
.text:004154C9                 sub     eax, 57h ; 'W'
.text:004154CC                 jmp     loc_415249
.text:004154D1 ; ---------------------------------------------------------------------------
.text:004154D1
.text:004154D1 loc_4154D1:                             ; CODE XREF: _strtoull+370↑j
.text:004154D1                 mov     eax, 0FFFFFFFFh
.text:004154D6                 jmp     loc_415249
.text:004154DB ; ---------------------------------------------------------------------------
.text:004154DB
.text:004154DB loc_4154DB:                             ; CODE XREF: _strtoull+35C↑j
.text:004154DB                 mov     esi, ds:_pctype
.text:004154E1                 mov     edi, [esi]
.text:004154E3                 movzx   ebp, word ptr [edi+edx*2]
.text:004154E7                 and     ebp, 2
.text:004154EA                 movzx   eax, bp
.text:004154ED                 jmp     short loc_4154BE
.text:004154EF ; ---------------------------------------------------------------------------
.text:004154EF
.text:004154EF loc_4154EF:                             ; CODE XREF: _strtoull+328↑j
.text:004154EF                 mov     esi, ds:_pctype
.text:004154F5                 mov     edi, [esi]
.text:004154F7                 movzx   ebp, word ptr [edi+ecx*2]
.text:004154FB                 and     ebp, 1
.text:004154FE                 movzx   eax, bp
.text:00415501                 jmp     short loc_415491
.text:00415503 ; ---------------------------------------------------------------------------
.text:00415503
.text:00415503 loc_415503:                             ; CODE XREF: _strtoull+CE↑j
.text:00415503                 mov     edi, ds:_pctype
.text:00415509                 mov     ebp, [edi]
.text:0041550B                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:00415510                 and     ecx, 4
.text:00415513                 movzx   eax, cx
.text:00415516                 jmp     loc_41523B
.text:0041551B ; ---------------------------------------------------------------------------
.text:0041551B
.text:0041551B loc_41551B:                             ; CODE XREF: _strtoull+C2↑j
.text:0041551B                 cmp     dl, 30h ; '0'
.text:0041551E                 jnz     loc_415218
.text:00415524                 mov     esi, [esp+3Ch+String]
.text:00415528                 movzx   eax, byte ptr [esi+1]
.text:0041552C                 cmp     al, 58h ; 'X'
.text:0041552E                 jz      short loc_415538
.text:00415530                 cmp     al, 78h ; 'x'
.text:00415532                 jnz     loc_415218
.text:00415538
.text:00415538 loc_415538:                             ; CODE XREF: _strtoull+3DE↑j
.text:00415538                 add     [esp+3Ch+String], 2
.text:0041553D                 mov     ebx, [esp+3Ch+String]
.text:00415541                 movzx   edx, byte ptr [ebx]
.text:00415544                 jmp     loc_415218
.text:00415549 ; ---------------------------------------------------------------------------
.text:00415549
.text:00415549 loc_415549:                             ; CODE XREF: _strtoull+AF↑j
.text:00415549                 mov     edi, [esp+3Ch+String]
.text:0041554D                 movzx   eax, byte ptr [edi+1]
.text:00415551                 cmp     al, 58h ; 'X'
.text:00415553                 jz      short loc_415565
.text:00415555                 mov     [esp+3Ch+Radix], 8
.text:0041555D                 cmp     al, 78h ; 'x'
.text:0041555F                 jnz     loc_41520D
.text:00415565
.text:00415565 loc_415565:                             ; CODE XREF: _strtoull+403↑j
.text:00415565                 mov     [esp+3Ch+Radix], 10h
.text:0041556D                 jmp     loc_41520D
.text:00415572 ; ---------------------------------------------------------------------------
.text:00415572
.text:00415572 loc_415572:                             ; CODE XREF: _strtoull+95↑j
.text:00415572                                         ; _strtoull+9E↑j
.text:00415572                 inc     [esp+3Ch+String]
.text:00415576                 mov     eax, [esp+3Ch+String]
.text:0041557A                 movzx   edx, byte ptr [eax]
.text:0041557D                 jmp     loc_4151F4
.text:00415582 ; ---------------------------------------------------------------------------
.text:00415582
.text:00415582 loc_415582:                             ; CODE XREF: _strtoull+5A↑j
.text:00415582                 mov     ebp, ds:_pctype
.text:00415588                 mov     edi, [ebp+0]
.text:0041558B                 movzx   ebx, word ptr [edi+edx*2]
.text:0041558F                 and     ebx, 8
.text:00415592                 movzx   eax, bx
.text:00415595                 jmp     loc_4151C6
.text:00415595 _strtoull       endp
.text:00415595
.text:00415595 ; ---------------------------------------------------------------------------
.text:0041559A                 align 10h
.text:004155A0                 jmp     ds:__set_app_type
.text:004155A0 ; ---------------------------------------------------------------------------
.text:004155A6                 align 10h
.text:004155B0
.text:004155B0 ; =============== S U B R O U T I N E =======================================
.text:004155B0
.text:004155B0 ; Attributes: thunk
.text:004155B0
.text:004155B0 ; void __cdecl cexit()
.text:004155B0 _cexit          proc near               ; CODE XREF: sub_401080+EC↑p
.text:004155B0                 jmp     ds:__imp__cexit
.text:004155B0 _cexit          endp
.text:004155B0
.text:004155B0 ; ---------------------------------------------------------------------------
.text:004155B6                 align 10h
.text:004155C0
.text:004155C0 ; =============== S U B R O U T I N E =======================================
.text:004155C0
.text:004155C0 ; Attributes: thunk
.text:004155C0
.text:004155C0 ; char ***__cdecl _p__environ()
.text:004155C0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004155C0                 jmp     ds:__imp___p__environ
.text:004155C0 __p__environ    endp
.text:004155C0
.text:004155C0 ; ---------------------------------------------------------------------------
.text:004155C6                 align 10h
.text:004155D0
.text:004155D0 ; =============== S U B R O U T I N E =======================================
.text:004155D0
.text:004155D0 ; Attributes: thunk
.text:004155D0
.text:004155D0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004155D0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004155D0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004155D0
.text:004155D0 Signal          = dword ptr  4
.text:004155D0 Function        = dword ptr  8
.text:004155D0
.text:004155D0                 jmp     ds:__imp_signal
.text:004155D0 signal          endp
.text:004155D0
.text:004155D0 ; ---------------------------------------------------------------------------
.text:004155D6                 align 10h
.text:004155E0
.text:004155E0 ; =============== S U B R O U T I N E =======================================
.text:004155E0
.text:004155E0 ; Attributes: thunk
.text:004155E0
.text:004155E0 ; int *__cdecl _p__fmode()
.text:004155E0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004155E0                 jmp     ds:__imp___p__fmode
.text:004155E0 __p__fmode      endp
.text:004155E0
.text:004155E0 ; ---------------------------------------------------------------------------
.text:004155E6                 align 10h
.text:004155F0
.text:004155F0 ; =============== S U B R O U T I N E =======================================
.text:004155F0
.text:004155F0 ; Attributes: thunk
.text:004155F0
.text:004155F0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004155F0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004155F0                                         ; sub_401080+90↑p ...
.text:004155F0
.text:004155F0 FileHandle      = dword ptr  4
.text:004155F0 Mode            = dword ptr  8
.text:004155F0
.text:004155F0                 jmp     ds:__imp__setmode
.text:004155F0 _setmode        endp
.text:004155F0
.text:004155F0 ; ---------------------------------------------------------------------------
.text:004155F6                 align 10h
.text:00415600
.text:00415600 ; =============== S U B R O U T I N E =======================================
.text:00415600
.text:00415600 ; Attributes: thunk
.text:00415600
.text:00415600 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00415600                 jmp     ds:__imp___getmainargs
.text:00415600 __getmainargs   endp
.text:00415600
.text:00415600 ; ---------------------------------------------------------------------------
.text:00415606                 align 10h
.text:00415610
.text:00415610 ; =============== S U B R O U T I N E =======================================
.text:00415610
.text:00415610 ; Attributes: thunk
.text:00415610
.text:00415610 ; struct lconv *__cdecl localeconv()
.text:00415610 localeconv      proc near               ; CODE XREF: sub_4021E0+FF↑p
.text:00415610                 jmp     ds:__imp_localeconv
.text:00415610 localeconv      endp
.text:00415610
.text:00415610 ; ---------------------------------------------------------------------------
.text:00415616                 align 10h
.text:00415620
.text:00415620 ; =============== S U B R O U T I N E =======================================
.text:00415620
.text:00415620 ; Attributes: thunk
.text:00415620
.text:00415620 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00415620 setlocale       proc near               ; CODE XREF: sub_4021E0+A9↑p
.text:00415620                                         ; sub_409F50+24↑p
.text:00415620
.text:00415620 Category        = dword ptr  4
.text:00415620 Locale          = dword ptr  8
.text:00415620
.text:00415620                 jmp     ds:__imp_setlocale
.text:00415620 setlocale       endp
.text:00415620
.text:00415620 ; ---------------------------------------------------------------------------
.text:00415626                 align 10h
.text:00415630
.text:00415630 ; =============== S U B R O U T I N E =======================================
.text:00415630
.text:00415630 ; Attributes: thunk
.text:00415630
.text:00415630 ; char *__cdecl getenv(const char *VarName)
.text:00415630 getenv          proc near               ; CODE XREF: sub_4021E0+40↑p
.text:00415630                                         ; sub_4021E0+5B0↑p ...
.text:00415630
.text:00415630 VarName         = dword ptr  4
.text:00415630
.text:00415630                 jmp     ds:__imp_getenv
.text:00415630 getenv          endp
.text:00415630
.text:00415630 ; ---------------------------------------------------------------------------
.text:00415636                 align 10h
.text:00415640
.text:00415640 ; =============== S U B R O U T I N E =======================================
.text:00415640
.text:00415640 ; Attributes: thunk
.text:00415640
.text:00415640 ; int __cdecl raise(int Signal)
.text:00415640 raise           proc near               ; CODE XREF: Function+5A↑j
.text:00415640
.text:00415640 Signal          = dword ptr  4
.text:00415640
.text:00415640                 jmp     ds:__imp_raise
.text:00415640 raise           endp
.text:00415640
.text:00415640 ; ---------------------------------------------------------------------------
.text:00415646                 align 10h
.text:00415650
.text:00415650 ; =============== S U B R O U T I N E =======================================
.text:00415650
.text:00415650 ; Attributes: thunk
.text:00415650
.text:00415650 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00415650 memcpy          proc near               ; CODE XREF: sub_403F30+56D↑p
.text:00415650                                         ; sub_404600+9B↑p ...
.text:00415650
.text:00415650 Src             = dword ptr  8
.text:00415650 Size            = dword ptr  0Ch
.text:00415650
.text:00415650                 jmp     ds:__imp_memcpy
.text:00415650 memcpy          endp
.text:00415650
.text:00415650 ; ---------------------------------------------------------------------------
.text:00415656                 align 10h
.text:00415660
.text:00415660 ; =============== S U B R O U T I N E =======================================
.text:00415660
.text:00415660 ; Attributes: thunk
.text:00415660
.text:00415660 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:00415660 memchr          proc near               ; CODE XREF: sub_406030+1E1↑p
.text:00415660
.text:00415660 Buf             = dword ptr  4
.text:00415660 Val             = dword ptr  8
.text:00415660 MaxCount        = dword ptr  0Ch
.text:00415660
.text:00415660                 jmp     ds:__imp_memchr
.text:00415660 memchr          endp
.text:00415660
.text:00415660 ; ---------------------------------------------------------------------------
.text:00415666                 align 10h
.text:00415670
.text:00415670 ; =============== S U B R O U T I N E =======================================
.text:00415670
.text:00415670 ; Attributes: thunk
.text:00415670
.text:00415670 ; size_t __cdecl fread(void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00415670 fread           proc near               ; CODE XREF: sub_406030+178↑p
.text:00415670
.text:00415670 Buffer          = dword ptr  4
.text:00415670 ElementSize     = dword ptr  8
.text:00415670 ElementCount    = dword ptr  0Ch
.text:00415670 Stream          = dword ptr  10h
.text:00415670
.text:00415670                 jmp     ds:__imp_fread
.text:00415670 fread           endp
.text:00415670
.text:00415670 ; ---------------------------------------------------------------------------
.text:00415676                 align 10h
.text:00415680
.text:00415680 ; =============== S U B R O U T I N E =======================================
.text:00415680
.text:00415680 ; Attributes: thunk
.text:00415680
.text:00415680 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:00415680 memmove         proc near               ; CODE XREF: sub_404600+1A4↑p
.text:00415680                                         ; sub_406030+6B↑p
.text:00415680
.text:00415680 Src             = dword ptr  8
.text:00415680 Size            = dword ptr  0Ch
.text:00415680
.text:00415680                 jmp     ds:__imp_memmove
.text:00415680 memmove         endp
.text:00415680
.text:00415680 ; ---------------------------------------------------------------------------
.text:00415686                 align 10h
.text:00415690
.text:00415690 ; =============== S U B R O U T I N E =======================================
.text:00415690
.text:00415690 ; Attributes: thunk
.text:00415690
.text:00415690 ; void *__cdecl malloc(size_t Size)
.text:00415690 malloc          proc near               ; CODE XREF: sub_403F30+BD↑p
.text:00415690                                         ; sub_4049B0+F16↑p ...
.text:00415690
.text:00415690 Size            = dword ptr  4
.text:00415690
.text:00415690                 jmp     ds:__imp_malloc
.text:00415690 malloc          endp
.text:00415690
.text:00415690 ; ---------------------------------------------------------------------------
.text:00415696                 align 10h
.text:004156A0
.text:004156A0 ; =============== S U B R O U T I N E =======================================
.text:004156A0
.text:004156A0 ; Attributes: noreturn thunk
.text:004156A0
.text:004156A0 ; void __cdecl __noreturn abort()
.text:004156A0 abort           proc near               ; CODE XREF: sub_4021E0+A5D↑p
.text:004156A0                                         ; sub_403CC0:loc_403DB5↑p ...
.text:004156A0                 jmp     ds:__imp_abort
.text:004156A0 abort           endp
.text:004156A0
.text:004156A0 ; ---------------------------------------------------------------------------
.text:004156A6                 align 10h
.text:004156B0
.text:004156B0 ; =============== S U B R O U T I N E =======================================
.text:004156B0
.text:004156B0 ; Attributes: thunk
.text:004156B0
.text:004156B0 ; int __cdecl toupper(int C)
.text:004156B0 toupper         proc near               ; CODE XREF: sub_4021E0+17D3↑p
.text:004156B0                                         ; sub_40F4D0+10E↑p
.text:004156B0
.text:004156B0 C               = dword ptr  4
.text:004156B0
.text:004156B0                 jmp     ds:__imp_toupper
.text:004156B0 toupper         endp
.text:004156B0
.text:004156B0 ; ---------------------------------------------------------------------------
.text:004156B6                 align 10h
.text:004156C0
.text:004156C0 ; =============== S U B R O U T I N E =======================================
.text:004156C0
.text:004156C0 ; Attributes: thunk
.text:004156C0
.text:004156C0 ; void __cdecl free(void *Block)
.text:004156C0 free            proc near               ; CODE XREF: sub_4021E0+8AB↑p
.text:004156C0                                         ; sub_403F30+333↑p ...
.text:004156C0
.text:004156C0 Block           = dword ptr  4
.text:004156C0
.text:004156C0                 jmp     ds:__imp_free
.text:004156C0 free            endp
.text:004156C0
.text:004156C0 ; ---------------------------------------------------------------------------
.text:004156C6                 align 10h
.text:004156D0
.text:004156D0 ; =============== S U B R O U T I N E =======================================
.text:004156D0
.text:004156D0 ; Attributes: thunk
.text:004156D0
.text:004156D0 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:004156D0 fwrite          proc near               ; CODE XREF: sub_403F30+2EB↑p
.text:004156D0                                         ; sub_4049B0+4CE↑p ...
.text:004156D0
.text:004156D0 Buffer          = dword ptr  4
.text:004156D0 ElementSize     = dword ptr  8
.text:004156D0 ElementCount    = dword ptr  0Ch
.text:004156D0 Stream          = dword ptr  10h
.text:004156D0
.text:004156D0                 jmp     ds:__imp_fwrite
.text:004156D0 fwrite          endp
.text:004156D0
.text:004156D0 ; ---------------------------------------------------------------------------
.text:004156D6                 align 10h
.text:004156E0
.text:004156E0 ; =============== S U B R O U T I N E =======================================
.text:004156E0
.text:004156E0 ; Attributes: thunk
.text:004156E0
.text:004156E0 ; int __cdecl fclose(FILE *Stream)
.text:004156E0 fclose          proc near               ; CODE XREF: sub_4021E0+51C↑p
.text:004156E0                                         ; sub_403F30+320↑p ...
.text:004156E0
.text:004156E0 Stream          = dword ptr  4
.text:004156E0
.text:004156E0                 jmp     ds:__imp_fclose
.text:004156E0 fclose          endp
.text:004156E0
.text:004156E0 ; ---------------------------------------------------------------------------
.text:004156E6                 align 10h
.text:004156F0
.text:004156F0 ; =============== S U B R O U T I N E =======================================
.text:004156F0
.text:004156F0 ; Attributes: thunk
.text:004156F0
.text:004156F0 ; int __cdecl fflush(FILE *Stream)
.text:004156F0 fflush          proc near               ; CODE XREF: sub_403F30+3C7↑p
.text:004156F0                                         ; sub_4049B0+69A↑p ...
.text:004156F0
.text:004156F0 Stream          = dword ptr  4
.text:004156F0
.text:004156F0                 jmp     ds:__imp_fflush
.text:004156F0 fflush          endp
.text:004156F0
.text:004156F0 ; ---------------------------------------------------------------------------
.text:004156F6                 align 10h
.text:00415700
.text:00415700 ; =============== S U B R O U T I N E =======================================
.text:00415700
.text:00415700 ; Attributes: thunk
.text:00415700
.text:00415700 ; void __cdecl clearerr(FILE *Stream)
.text:00415700 clearerr        proc near               ; CODE XREF: sub_403F30+3F1↑p
.text:00415700                                         ; sub_4049B0+6C4↑p ...
.text:00415700
.text:00415700 Stream          = dword ptr  4
.text:00415700
.text:00415700                 jmp     ds:__imp_clearerr
.text:00415700 clearerr        endp
.text:00415700
.text:00415700 ; ---------------------------------------------------------------------------
.text:00415706                 align 10h
.text:00415710
.text:00415710 ; =============== S U B R O U T I N E =======================================
.text:00415710
.text:00415710 ; Attributes: thunk
.text:00415710
.text:00415710 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00415710 strcmp          proc near               ; CODE XREF: sub_4021E0+15DA↑p
.text:00415710                                         ; sub_407D00+72↑p ...
.text:00415710
.text:00415710 Str1            = dword ptr  4
.text:00415710 Str2            = dword ptr  8
.text:00415710
.text:00415710                 jmp     ds:__imp_strcmp
.text:00415710 strcmp          endp
.text:00415710
.text:00415710 ; ---------------------------------------------------------------------------
.text:00415716                 align 10h
.text:00415720
.text:00415720 ; =============== S U B R O U T I N E =======================================
.text:00415720
.text:00415720 ; Attributes: thunk
.text:00415720
.text:00415720 ; size_t __cdecl strlen(const char *Str)
.text:00415720 strlen          proc near               ; CODE XREF: sub_404600+79↑p
.text:00415720                                         ; sub_404600+291↑p ...
.text:00415720
.text:00415720 Str             = dword ptr  4
.text:00415720
.text:00415720                 jmp     ds:__imp_strlen
.text:00415720 strlen          endp
.text:00415720
.text:00415720 ; ---------------------------------------------------------------------------
.text:00415726                 align 10h
.text:00415730
.text:00415730 ; =============== S U B R O U T I N E =======================================
.text:00415730
.text:00415730 ; Attributes: thunk
.text:00415730
.text:00415730 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00415730 fputs           proc near               ; CODE XREF: sub_4021E0+CFC↑p
.text:00415730                                         ; sub_4021E0+D1E↑p ...
.text:00415730
.text:00415730 Buffer          = dword ptr  4
.text:00415730 Stream          = dword ptr  8
.text:00415730
.text:00415730                 jmp     ds:__imp_fputs
.text:00415730 fputs           endp
.text:00415730
.text:00415730 ; ---------------------------------------------------------------------------
.text:00415736                 align 10h
.text:00415740
.text:00415740 ; =============== S U B R O U T I N E =======================================
.text:00415740
.text:00415740 ; Attributes: thunk
.text:00415740
.text:00415740 ; int printf(const char *const Format, ...)
.text:00415740 printf          proc near               ; CODE XREF: sub_4021E0+CDA↑p
.text:00415740                                         ; sub_4021E0+DA1↑p ...
.text:00415740
.text:00415740 Format          = dword ptr  4
.text:00415740
.text:00415740                 jmp     ds:__imp_printf
.text:00415740 printf          endp
.text:00415740
.text:00415740 ; ---------------------------------------------------------------------------
.text:00415746                 align 10h
.text:00415750
.text:00415750 ; =============== S U B R O U T I N E =======================================
.text:00415750
.text:00415750 ; Attributes: thunk
.text:00415750
.text:00415750 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00415750 fprintf         proc near               ; CODE XREF: sub_4021E0+4A5↑p
.text:00415750                                         ; .text:00403A53↑p ...
.text:00415750
.text:00415750 Stream          = dword ptr  4
.text:00415750 Format          = dword ptr  8
.text:00415750
.text:00415750                 jmp     ds:__imp_fprintf
.text:00415750 fprintf         endp
.text:00415750
.text:00415750 ; ---------------------------------------------------------------------------
.text:00415756                 align 10h
.text:00415760
.text:00415760 ; =============== S U B R O U T I N E =======================================
.text:00415760
.text:00415760 ; Attributes: noreturn thunk
.text:00415760
.text:00415760 ; void __cdecl __noreturn exit(int Code)
.text:00415760 exit            proc near               ; CODE XREF: sub_4021E0:loc_402691↑p
.text:00415760                                         ; .text:00403A5B↑p ...
.text:00415760
.text:00415760 Code            = dword ptr  4
.text:00415760
.text:00415760                 jmp     ds:__imp_exit
.text:00415760 exit            endp
.text:00415760
.text:00415760 ; ---------------------------------------------------------------------------
.text:00415766                 align 10h
.text:00415770
.text:00415770 ; =============== S U B R O U T I N E =======================================
.text:00415770
.text:00415770 ; Attributes: thunk
.text:00415770
.text:00415770 ; int *__cdecl errno()
.text:00415770 _errno          proc near               ; CODE XREF: sub_4021E0:loc_402725↑p
.text:00415770                                         ; sub_403F30:loc_4042A7↑p ...
.text:00415770                 jmp     ds:__imp__errno
.text:00415770 _errno          endp
.text:00415770
.text:00415770 ; ---------------------------------------------------------------------------
.text:00415776                 align 10h
.text:00415780
.text:00415780 ; =============== S U B R O U T I N E =======================================
.text:00415780
.text:00415780 ; Attributes: thunk
.text:00415780
.text:00415780 ; int __cdecl isctype(int C, int Type)
.text:00415780 _isctype        proc near               ; CODE XREF: sub_4021E0+184↑p
.text:00415780                                         ; sub_4021E0+1B3↑p ...
.text:00415780
.text:00415780 C               = dword ptr  4
.text:00415780 Type            = dword ptr  8
.text:00415780
.text:00415780                 jmp     ds:__imp__isctype
.text:00415780 _isctype        endp
.text:00415780
.text:00415780 ; ---------------------------------------------------------------------------
.text:00415786                 align 10h
.text:00415790
.text:00415790 ; =============== S U B R O U T I N E =======================================
.text:00415790
.text:00415790 ; Attributes: thunk
.text:00415790
.text:00415790 ; double __cdecl strtod(const char *String, char **EndPtr)
.text:00415790 strtod          proc near               ; CODE XREF: sub_408590+22↑p
.text:00415790                                         ; sub_408590+36↑p
.text:00415790
.text:00415790 String          = dword ptr  4
.text:00415790 EndPtr          = dword ptr  8
.text:00415790
.text:00415790                 jmp     ds:__imp_strtod
.text:00415790 strtod          endp
.text:00415790
.text:00415790 ; ---------------------------------------------------------------------------
.text:00415796                 align 10h
.text:004157A0
.text:004157A0 ; =============== S U B R O U T I N E =======================================
.text:004157A0
.text:004157A0 ; Attributes: thunk
.text:004157A0
.text:004157A0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:004157A0 strncmp         proc near               ; CODE XREF: sub_408AD0+23F↑p
.text:004157A0                                         ; sub_408AD0+699↑p
.text:004157A0
.text:004157A0 Str1            = dword ptr  4
.text:004157A0 Str2            = dword ptr  8
.text:004157A0 MaxCount        = dword ptr  0Ch
.text:004157A0
.text:004157A0                 jmp     ds:__imp_strncmp
.text:004157A0 strncmp         endp
.text:004157A0
.text:004157A0 ; ---------------------------------------------------------------------------
.text:004157A6                 align 10h
.text:004157B0
.text:004157B0 ; =============== S U B R O U T I N E =======================================
.text:004157B0
.text:004157B0 ; Attributes: thunk
.text:004157B0
.text:004157B0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004157B0 strchr          proc near               ; CODE XREF: sub_408AD0+469↑p
.text:004157B0                                         ; sub_408AD0+53A↑p ...
.text:004157B0
.text:004157B0 Str             = dword ptr  4
.text:004157B0 Val             = dword ptr  8
.text:004157B0
.text:004157B0                 jmp     ds:__imp_strchr
.text:004157B0 strchr          endp
.text:004157B0
.text:004157B0 ; ---------------------------------------------------------------------------
.text:004157B6                 align 10h
.text:004157C0
.text:004157C0 ; =============== S U B R O U T I N E =======================================
.text:004157C0
.text:004157C0 ; Attributes: thunk
.text:004157C0
.text:004157C0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004157C0 vfprintf        proc near               ; CODE XREF: sub_409BF0+C1↑p
.text:004157C0                                         ; sub_40CB60+49↑p ...
.text:004157C0
.text:004157C0 Stream          = dword ptr  4
.text:004157C0 Format          = dword ptr  8
.text:004157C0 ArgList         = dword ptr  0Ch
.text:004157C0
.text:004157C0                 jmp     ds:__imp_vfprintf
.text:004157C0 vfprintf        endp
.text:004157C0
.text:004157C0 ; ---------------------------------------------------------------------------
.text:004157C6                 align 10h
.text:004157D0
.text:004157D0 ; =============== S U B R O U T I N E =======================================
.text:004157D0
.text:004157D0 ; Attributes: thunk
.text:004157D0
.text:004157D0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004157D0 _flsbuf         proc near               ; CODE XREF: sub_409BF0+128↑p
.text:004157D0                                         ; sub_409BF0+13A↑p ...
.text:004157D0
.text:004157D0 File            = dword ptr  8
.text:004157D0
.text:004157D0                 jmp     ds:__imp__flsbuf
.text:004157D0 _flsbuf         endp
.text:004157D0
.text:004157D0 ; ---------------------------------------------------------------------------
.text:004157D6                 align 10h
.text:004157E0
.text:004157E0 ; =============== S U B R O U T I N E =======================================
.text:004157E0
.text:004157E0 ; Attributes: thunk
.text:004157E0
.text:004157E0 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:004157E0 strtol          proc near               ; CODE XREF: sub_40A0E0+43↑p
.text:004157E0
.text:004157E0 String          = dword ptr  4
.text:004157E0 EndPtr          = dword ptr  8
.text:004157E0 Radix           = dword ptr  0Ch
.text:004157E0
.text:004157E0                 jmp     ds:__imp_strtol
.text:004157E0 strtol          endp
.text:004157E0
.text:004157E0 ; ---------------------------------------------------------------------------
.text:004157E6                 align 10h
.text:004157F0
.text:004157F0 ; =============== S U B R O U T I N E =======================================
.text:004157F0
.text:004157F0 ; Attributes: thunk
.text:004157F0
.text:004157F0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004157F0 memset          proc near               ; CODE XREF: sub_40A280+26↑p
.text:004157F0
.text:004157F0 Val             = dword ptr  8
.text:004157F0 Size            = dword ptr  0Ch
.text:004157F0
.text:004157F0                 jmp     ds:__imp_memset
.text:004157F0 memset          endp
.text:004157F0
.text:004157F0 ; ---------------------------------------------------------------------------
.text:004157F6                 align 10h
.text:00415800
.text:00415800 ; =============== S U B R O U T I N E =======================================
.text:00415800
.text:00415800 ; Attributes: thunk
.text:00415800
.text:00415800 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00415800 calloc          proc near               ; CODE XREF: .text:0040A2E3↑p
.text:00415800                                         ; sub_40F4D0+AC↑p
.text:00415800
.text:00415800 Count           = dword ptr  4
.text:00415800 Size            = dword ptr  8
.text:00415800
.text:00415800                 jmp     ds:__imp_calloc
.text:00415800 calloc          endp
.text:00415800
.text:00415800 ; ---------------------------------------------------------------------------
.text:00415806                 align 10h
.text:00415810
.text:00415810 ; =============== S U B R O U T I N E =======================================
.text:00415810
.text:00415810 ; Attributes: thunk
.text:00415810
.text:00415810 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00415810 realloc         proc near               ; CODE XREF: .text:0040A1E0↑p
.text:00415810                                         ; sub_40A210+16↑p ...
.text:00415810
.text:00415810 Block           = dword ptr  4
.text:00415810 Size            = dword ptr  8
.text:00415810
.text:00415810                 jmp     ds:__imp_realloc
.text:00415810 realloc         endp
.text:00415810
.text:00415810 ; ---------------------------------------------------------------------------
.text:00415816                 align 10h
.text:00415820
.text:00415820 ; =============== S U B R O U T I N E =======================================
.text:00415820
.text:00415820 ; Attributes: noreturn thunk
.text:00415820
.text:00415820 _assert         proc near               ; CODE XREF: sub_40A940+C88↑p
.text:00415820                                         ; sub_412D90+414↑p
.text:00415820                 jmp     ds:__imp__assert
.text:00415820 _assert         endp
.text:00415820
.text:00415820 ; ---------------------------------------------------------------------------
.text:00415826                 align 10h
.text:00415830
.text:00415830 ; =============== S U B R O U T I N E =======================================
.text:00415830
.text:00415830 ; Attributes: thunk
.text:00415830
.text:00415830 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00415830 fopen           proc near               ; CODE XREF: sub_40B5D0+1E↑p
.text:00415830                                         ; sub_4125AF+26↑p ...
.text:00415830
.text:00415830 FileName        = dword ptr  4
.text:00415830 Mode            = dword ptr  8
.text:00415830
.text:00415830                 jmp     ds:__imp_fopen
.text:00415830 fopen           endp
.text:00415830
.text:00415830 ; ---------------------------------------------------------------------------
.text:00415836                 align 10h
.text:00415840
.text:00415840 ; =============== S U B R O U T I N E =======================================
.text:00415840
.text:00415840 ; Attributes: thunk
.text:00415840
.text:00415840 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00415840 iswctype        proc near               ; CODE XREF: sub_40B700+78B↑p
.text:00415840
.text:00415840 C               = word ptr  4
.text:00415840 Type            = word ptr  8
.text:00415840
.text:00415840                 jmp     ds:__imp_iswctype
.text:00415840 iswctype        endp
.text:00415840
.text:00415840 ; ---------------------------------------------------------------------------
.text:00415846                 align 10h
.text:00415850
.text:00415850 ; =============== S U B R O U T I N E =======================================
.text:00415850
.text:00415850 ; Attributes: thunk
.text:00415850
.text:00415850 ; int __cdecl strcoll(const char *String1, const char *String2)
.text:00415850 strcoll         proc near               ; CODE XREF: sub_40CA10+52↑p
.text:00415850
.text:00415850 String1         = dword ptr  4
.text:00415850 String2         = dword ptr  8
.text:00415850
.text:00415850                 jmp     ds:__imp_strcoll
.text:00415850 strcoll         endp
.text:00415850
.text:00415850 ; ---------------------------------------------------------------------------
.text:00415856                 align 10h
.text:00415860
.text:00415860 ; =============== S U B R O U T I N E =======================================
.text:00415860
.text:00415860 ; Attributes: thunk
.text:00415860
.text:00415860 ; char *__cdecl strerror(int ErrorMessage)
.text:00415860 strerror        proc near               ; CODE XREF: sub_40CB60+A5↑p
.text:00415860                                         ; sub_40CC64+10F↑p
.text:00415860
.text:00415860 ErrorMessage    = dword ptr  4
.text:00415860
.text:00415860                 jmp     ds:__imp_strerror
.text:00415860 strerror        endp
.text:00415860
.text:00415860 ; ---------------------------------------------------------------------------
.text:00415866                 align 10h
.text:00415870
.text:00415870 ; =============== S U B R O U T I N E =======================================
.text:00415870
.text:00415870 ; Attributes: thunk
.text:00415870
.text:00415870 ; char *__cdecl ctime(const __time32_t *const Time)
.text:00415870 ctime           proc near               ; CODE XREF: .text:0040CFCD↑p
.text:00415870                                         ; .text:0040CFEF↑p ...
.text:00415870
.text:00415870 Time            = dword ptr  4
.text:00415870
.text:00415870                 jmp     ds:__imp_ctime
.text:00415870 ctime           endp
.text:00415870
.text:00415870 ; ---------------------------------------------------------------------------
.text:00415876                 align 10h
.text:00415880
.text:00415880 ; =============== S U B R O U T I N E =======================================
.text:00415880
.text:00415880 ; Attributes: thunk
.text:00415880
.text:00415880 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00415880 _get_osfhandle  proc near               ; CODE XREF: sub_40D070+3A↑p
.text:00415880                                         ; sub_4106A0+12↑p ...
.text:00415880
.text:00415880 FileHandle      = dword ptr  4
.text:00415880
.text:00415880                 jmp     ds:__imp__get_osfhandle
.text:00415880 _get_osfhandle  endp
.text:00415880
.text:00415880 ; ---------------------------------------------------------------------------
.text:00415886                 align 10h
.text:00415890
.text:00415890 ; =============== S U B R O U T I N E =======================================
.text:00415890
.text:00415890 ; Attributes: thunk
.text:00415890
.text:00415890 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00415890 strcat          proc near               ; CODE XREF: sub_40D2D0+98↑p
.text:00415890                                         ; .text:00411223↑p ...
.text:00415890
.text:00415890 Destination     = dword ptr  4
.text:00415890 Source          = dword ptr  8
.text:00415890
.text:00415890                 jmp     ds:__imp_strcat
.text:00415890 strcat          endp
.text:00415890
.text:00415890 ; ---------------------------------------------------------------------------
.text:00415896                 align 10h
.text:004158A0
.text:004158A0 ; =============== S U B R O U T I N E =======================================
.text:004158A0
.text:004158A0 ; Attributes: thunk
.text:004158A0
.text:004158A0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:004158A0 strcpy          proc near               ; CODE XREF: sub_40D2D0+73↑p
.text:004158A0                                         ; _win32_longpath+13C↑p ...
.text:004158A0
.text:004158A0 Destination     = dword ptr  4
.text:004158A0 Source          = dword ptr  8
.text:004158A0
.text:004158A0                 jmp     ds:__imp_strcpy
.text:004158A0 strcpy          endp
.text:004158A0
.text:004158A0 ; ---------------------------------------------------------------------------
.text:004158A6                 align 10h
.text:004158B0
.text:004158B0 ; =============== S U B R O U T I N E =======================================
.text:004158B0
.text:004158B0 ; Attributes: thunk
.text:004158B0
.text:004158B0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:004158B0 strstr          proc near               ; CODE XREF: sub_40D920+3BF↑p
.text:004158B0                                         ; sub_40D920+3DC↑p ...
.text:004158B0
.text:004158B0 Str             = dword ptr  4
.text:004158B0 SubStr          = dword ptr  8
.text:004158B0
.text:004158B0                 jmp     ds:__imp_strstr
.text:004158B0 strstr          endp
.text:004158B0
.text:004158B0 ; ---------------------------------------------------------------------------
.text:004158B6                 align 10h
.text:004158C0
.text:004158C0 ; =============== S U B R O U T I N E =======================================
.text:004158C0
.text:004158C0 ; Attributes: thunk
.text:004158C0
.text:004158C0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:004158C0 strrchr         proc near               ; CODE XREF: sub_40D920+CB↑p
.text:004158C0                                         ; sub_40D920+3A7↑p ...
.text:004158C0
.text:004158C0 Str             = dword ptr  4
.text:004158C0
.text:004158C0                 jmp     ds:__imp_strrchr
.text:004158C0 strrchr         endp
.text:004158C0
.text:004158C0 ; ---------------------------------------------------------------------------
.text:004158C6                 align 10h
.text:004158D0
.text:004158D0 ; =============== S U B R O U T I N E =======================================
.text:004158D0
.text:004158D0 ; Attributes: thunk
.text:004158D0
.text:004158D0 ; int __cdecl isalpha(int C)
.text:004158D0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:004158D0
.text:004158D0 C               = dword ptr  4
.text:004158D0
.text:004158D0                 jmp     ds:__imp_isalpha
.text:004158D0 isalpha         endp
.text:004158D0
.text:004158D0 ; ---------------------------------------------------------------------------
.text:004158D6                 align 10h
.text:004158E0
.text:004158E0 ; =============== S U B R O U T I N E =======================================
.text:004158E0
.text:004158E0 ; Attributes: thunk
.text:004158E0
.text:004158E0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:004158E0 _stricmp_0      proc near               ; CODE XREF: .text:0040F344↑p
.text:004158E0
.text:004158E0 String1         = dword ptr  4
.text:004158E0 String2         = dword ptr  8
.text:004158E0
.text:004158E0                 jmp     ds:__imp__stricmp_0
.text:004158E0 _stricmp_0      endp
.text:004158E0
.text:004158E0 ; ---------------------------------------------------------------------------
.text:004158E6                 align 10h
.text:004158F0
.text:004158F0 ; =============== S U B R O U T I N E =======================================
.text:004158F0
.text:004158F0 ; Attributes: thunk
.text:004158F0
.text:004158F0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:004158F0 strncpy         proc near               ; CODE XREF: sub_40F4D0+BE↑p
.text:004158F0                                         ; .text:0040FD7A↑p ...
.text:004158F0
.text:004158F0 Destination     = dword ptr  4
.text:004158F0 Source          = dword ptr  8
.text:004158F0 Count           = dword ptr  0Ch
.text:004158F0
.text:004158F0                 jmp     ds:__imp_strncpy
.text:004158F0 strncpy         endp
.text:004158F0
.text:004158F0 ; ---------------------------------------------------------------------------
.text:004158F6                 align 10h
.text:00415900
.text:00415900 ; =============== S U B R O U T I N E =======================================
.text:00415900
.text:00415900 ; Attributes: thunk
.text:00415900
.text:00415900 ; int __cdecl chmod_0(const char *FileName, int AccessMode)
.text:00415900 _chmod_0        proc near               ; CODE XREF: sub_4101C0+9B↑p
.text:00415900
.text:00415900 FileName        = dword ptr  4
.text:00415900 AccessMode      = dword ptr  8
.text:00415900
.text:00415900                 jmp     ds:__imp__chmod_0
.text:00415900 _chmod_0        endp
.text:00415900
.text:00415900 ; ---------------------------------------------------------------------------
.text:00415906                 align 10h
.text:00415910
.text:00415910 ; =============== S U B R O U T I N E =======================================
.text:00415910
.text:00415910 ; Attributes: thunk
.text:00415910
.text:00415910 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00415910 _filelengthi64  proc near               ; CODE XREF: sub_4106A0+113↑p
.text:00415910                                         ; sub_413350+1F↑p
.text:00415910
.text:00415910 FileHandle      = dword ptr  4
.text:00415910
.text:00415910                 jmp     ds:__imp__filelengthi64
.text:00415910 _filelengthi64  endp
.text:00415910
.text:00415910 ; ---------------------------------------------------------------------------
.text:00415916                 align 10h
.text:00415920
.text:00415920 ; =============== S U B R O U T I N E =======================================
.text:00415920
.text:00415920 ; Attributes: thunk
.text:00415920
.text:00415920 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:00415920 _lseeki64       proc near               ; CODE XREF: sub_4106A0+36↑p
.text:00415920
.text:00415920 FileHandle      = dword ptr  4
.text:00415920 Offset          = qword ptr  8
.text:00415920 Origin          = dword ptr  10h
.text:00415920
.text:00415920                 jmp     ds:__imp__lseeki64
.text:00415920 _lseeki64       endp
.text:00415920
.text:00415920 ; ---------------------------------------------------------------------------
.text:00415926                 align 10h
.text:00415930
.text:00415930 ; =============== S U B R O U T I N E =======================================
.text:00415930
.text:00415930 ; Attributes: thunk
.text:00415930
.text:00415930 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00415930 sprintf         proc near               ; CODE XREF: .text:0041112A↑p
.text:00415930                                         ; .text:0041114B↑p ...
.text:00415930
.text:00415930 Buffer          = dword ptr  4
.text:00415930 Format          = dword ptr  8
.text:00415930
.text:00415930                 jmp     ds:__imp_sprintf
.text:00415930 sprintf         endp
.text:00415930
.text:00415930 ; ---------------------------------------------------------------------------
.text:00415936                 align 10h
.text:00415940
.text:00415940 ; =============== S U B R O U T I N E =======================================
.text:00415940
.text:00415940 ; Attributes: thunk
.text:00415940
.text:00415940 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00415940 sscanf          proc near               ; CODE XREF: .text:00411CAE↑p
.text:00415940
.text:00415940 Buffer          = dword ptr  4
.text:00415940 Format          = dword ptr  8
.text:00415940
.text:00415940                 jmp     ds:__imp_sscanf
.text:00415940 sscanf          endp
.text:00415940
.text:00415940 ; ---------------------------------------------------------------------------
.text:00415946                 align 10h
.text:00415950
.text:00415950 ; =============== S U B R O U T I N E =======================================
.text:00415950
.text:00415950 ; Attributes: thunk
.text:00415950
.text:00415950 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00415950 strspn          proc near               ; CODE XREF: .text:00411AFA↑p
.text:00415950                                         ; .text:00411D14↑p ...
.text:00415950
.text:00415950 Str             = dword ptr  4
.text:00415950 Control         = dword ptr  8
.text:00415950
.text:00415950                 jmp     ds:__imp_strspn
.text:00415950 strspn          endp
.text:00415950
.text:00415950 ; ---------------------------------------------------------------------------
.text:00415956                 align 10h
.text:00415960
.text:00415960 ; =============== S U B R O U T I N E =======================================
.text:00415960
.text:00415960 ; Attributes: thunk
.text:00415960
.text:00415960 ; int open(const char *FileName, int OpenFlag, ...)
.text:00415960 _open           proc near               ; CODE XREF: sub_412D90:loc_413120↑p
.text:00415960
.text:00415960 FileName        = dword ptr  4
.text:00415960 OpenFlag        = dword ptr  8
.text:00415960
.text:00415960                 jmp     ds:__imp__open
.text:00415960 _open           endp
.text:00415960
.text:00415960 ; ---------------------------------------------------------------------------
.text:00415966                 align 10h
.text:00415970
.text:00415970 ; =============== S U B R O U T I N E =======================================
.text:00415970
.text:00415970 ; Attributes: thunk
.text:00415970
.text:00415970 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00415970 strpbrk         proc near               ; CODE XREF: sub_4133B0+87↑p
.text:00415970
.text:00415970 Str             = dword ptr  4
.text:00415970 Control         = dword ptr  8
.text:00415970
.text:00415970                 jmp     ds:__imp_strpbrk
.text:00415970 strpbrk         endp
.text:00415970
.text:00415970 ; ---------------------------------------------------------------------------
.text:00415976                 align 10h
.text:00415980
.text:00415980 ; =============== S U B R O U T I N E =======================================
.text:00415980
.text:00415980 ; Attributes: thunk
.text:00415980
.text:00415980 ; FILE *__cdecl fdopen_0(int FileHandle, const char *Format)
.text:00415980 _fdopen_0       proc near               ; CODE XREF: sub_413450+69↑p
.text:00415980
.text:00415980 FileHandle      = dword ptr  4
.text:00415980 Format          = dword ptr  8
.text:00415980
.text:00415980                 jmp     ds:__imp__fdopen_0
.text:00415980 _fdopen_0       endp
.text:00415980
.text:00415980 ; ---------------------------------------------------------------------------
.text:00415986                 align 10h
.text:00415990
.text:00415990 ; =============== S U B R O U T I N E =======================================
.text:00415990
.text:00415990 ; Attributes: thunk
.text:00415990
.text:00415990 ; int __cdecl close_0(int FileHandle)
.text:00415990 _close_0        proc near               ; CODE XREF: sub_413450+90↑p
.text:00415990
.text:00415990 FileHandle      = dword ptr  4
.text:00415990
.text:00415990                 jmp     ds:__imp__close_0
.text:00415990 _close_0        endp
.text:00415990
.text:00415990 ; ---------------------------------------------------------------------------
.text:00415996                 align 10h
.text:004159A0
.text:004159A0 ; =============== S U B R O U T I N E =======================================
.text:004159A0
.text:004159A0 ; Attributes: thunk
.text:004159A0
.text:004159A0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004159A0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004159A0
.text:004159A0 lpTopLevelExceptionFilter= dword ptr  4
.text:004159A0
.text:004159A0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004159A0 SetUnhandledExceptionFilter endp
.text:004159A0
.text:004159A0 ; ---------------------------------------------------------------------------
.text:004159A6                 align 10h
.text:004159B0
.text:004159B0 ; =============== S U B R O U T I N E =======================================
.text:004159B0
.text:004159B0 ; Attributes: noreturn thunk
.text:004159B0
.text:004159B0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004159B0 ExitProcess     proc near               ; CODE XREF: sub_401080+F4↑p
.text:004159B0
.text:004159B0 uExitCode       = dword ptr  4
.text:004159B0
.text:004159B0                 jmp     ds:__imp_ExitProcess
.text:004159B0 ExitProcess     endp
.text:004159B0
.text:004159B0 ; ---------------------------------------------------------------------------
.text:004159B6                 align 10h
.text:004159C0
.text:004159C0 ; =============== S U B R O U T I N E =======================================
.text:004159C0
.text:004159C0 ; Attributes: thunk
.text:004159C0
.text:004159C0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:004159C0 GetModuleHandleA proc near              ; CODE XREF: sub_40A6D0:loc_40A730↑p
.text:004159C0                                         ; sub_40A7D0+60↑p ...
.text:004159C0
.text:004159C0 lpModuleName    = dword ptr  4
.text:004159C0
.text:004159C0                 jmp     ds:__imp_GetModuleHandleA
.text:004159C0 GetModuleHandleA endp
.text:004159C0
.text:004159C0 ; ---------------------------------------------------------------------------
.text:004159C6                 align 10h
.text:004159D0
.text:004159D0 ; =============== S U B R O U T I N E =======================================
.text:004159D0
.text:004159D0 ; Attributes: thunk
.text:004159D0
.text:004159D0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:004159D0 GetProcAddress  proc near               ; CODE XREF: sub_40A6D0+77↑p
.text:004159D0                                         ; sub_40A7D0+77↑p ...
.text:004159D0
.text:004159D0 hModule         = dword ptr  4
.text:004159D0 lpProcName      = dword ptr  8
.text:004159D0
.text:004159D0                 jmp     ds:__imp_GetProcAddress
.text:004159D0 GetProcAddress  endp
.text:004159D0
.text:004159D0 ; ---------------------------------------------------------------------------
.text:004159D6                 align 10h
.text:004159E0
.text:004159E0 ; =============== S U B R O U T I N E =======================================
.text:004159E0
.text:004159E0 ; Attributes: thunk
.text:004159E0
.text:004159E0 ; void __stdcall GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer)
.text:004159E0 GlobalMemoryStatus proc near            ; CODE XREF: sub_40A6D0+D7↑p
.text:004159E0                                         ; sub_40A7D0+D7↑p
.text:004159E0
.text:004159E0 lpBuffer        = dword ptr  4
.text:004159E0
.text:004159E0                 jmp     ds:__imp_GlobalMemoryStatus
.text:004159E0 GlobalMemoryStatus endp
.text:004159E0
.text:004159E0 ; ---------------------------------------------------------------------------
.text:004159E6                 align 10h
.text:004159F0
.text:004159F0 ; =============== S U B R O U T I N E =======================================
.text:004159F0
.text:004159F0 ; Attributes: thunk
.text:004159F0
.text:004159F0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:004159F0 GetFileAttributesA proc near            ; CODE XREF: sub_40D160+47↑p
.text:004159F0                                         ; sub_410E30+62↑p
.text:004159F0
.text:004159F0 lpFileName      = dword ptr  4
.text:004159F0
.text:004159F0                 jmp     ds:__imp_GetFileAttributesA
.text:004159F0 GetFileAttributesA endp
.text:004159F0
.text:004159F0 ; ---------------------------------------------------------------------------
.text:004159F6                 align 10h
.text:00415A00
.text:00415A00 ; =============== S U B R O U T I N E =======================================
.text:00415A00
.text:00415A00 ; Attributes: thunk
.text:00415A00
.text:00415A00 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00415A00 FreeLibrary     proc near               ; CODE XREF: sub_40D160+A4↑p
.text:00415A00                                         ; sub_40D2D0+11D↑p ...
.text:00415A00
.text:00415A00 hLibModule      = dword ptr  4
.text:00415A00
.text:00415A00                 jmp     ds:__imp_FreeLibrary
.text:00415A00 FreeLibrary     endp
.text:00415A00
.text:00415A00 ; ---------------------------------------------------------------------------
.text:00415A06                 align 10h
.text:00415A10
.text:00415A10 ; =============== S U B R O U T I N E =======================================
.text:00415A10
.text:00415A10 ; Attributes: thunk
.text:00415A10
.text:00415A10 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00415A10 FindFirstFileA  proc near               ; CODE XREF: sub_40D160+CE↑p
.text:00415A10                                         ; sub_40D2D0+14F↑p ...
.text:00415A10
.text:00415A10 lpFileName      = dword ptr  4
.text:00415A10 lpFindFileData  = dword ptr  8
.text:00415A10
.text:00415A10                 jmp     ds:__imp_FindFirstFileA
.text:00415A10 FindFirstFileA  endp
.text:00415A10
.text:00415A10 ; ---------------------------------------------------------------------------
.text:00415A16                 align 10h
.text:00415A20
.text:00415A20 ; =============== S U B R O U T I N E =======================================
.text:00415A20
.text:00415A20 ; Attributes: thunk
.text:00415A20
.text:00415A20 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00415A20 FindClose       proc near               ; CODE XREF: sub_40D160+123↑p
.text:00415A20                                         ; sub_40D2D0+10E↑p ...
.text:00415A20
.text:00415A20 hFindFile       = dword ptr  4
.text:00415A20
.text:00415A20                 jmp     ds:__imp_FindClose
.text:00415A20 FindClose       endp
.text:00415A20
.text:00415A20 ; ---------------------------------------------------------------------------
.text:00415A26                 align 10h
.text:00415A30
.text:00415A30 ; =============== S U B R O U T I N E =======================================
.text:00415A30
.text:00415A30 ; Attributes: thunk
.text:00415A30
.text:00415A30 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00415A30 LoadLibraryA    proc near               ; CODE XREF: sub_40D2D0+13↑p
.text:00415A30                                         ; sub_40D920+134↑p ...
.text:00415A30
.text:00415A30 lpLibFileName   = dword ptr  4
.text:00415A30
.text:00415A30                 jmp     ds:__imp_LoadLibraryA
.text:00415A30 LoadLibraryA    endp
.text:00415A30
.text:00415A30 ; ---------------------------------------------------------------------------
.text:00415A36                 align 10h
.text:00415A40
.text:00415A40 ; =============== S U B R O U T I N E =======================================
.text:00415A40
.text:00415A40 ; Attributes: thunk
.text:00415A40
.text:00415A40 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00415A40 FindNextFileA   proc near               ; CODE XREF: sub_40D2D0+FF↑p
.text:00415A40
.text:00415A40 hFindFile       = dword ptr  4
.text:00415A40 lpFindFileData  = dword ptr  8
.text:00415A40
.text:00415A40                 jmp     ds:__imp_FindNextFileA
.text:00415A40 FindNextFileA   endp
.text:00415A40
.text:00415A40 ; ---------------------------------------------------------------------------
.text:00415A46                 align 10h
.text:00415A50
.text:00415A50 ; =============== S U B R O U T I N E =======================================
.text:00415A50
.text:00415A50 ; Attributes: thunk
.text:00415A50
.text:00415A50 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00415A50 GetFileType     proc near               ; CODE XREF: sub_40D450+43↑p
.text:00415A50                                         ; .text:0040E10A↑p
.text:00415A50
.text:00415A50 hFile           = dword ptr  4
.text:00415A50
.text:00415A50                 jmp     ds:__imp_GetFileType
.text:00415A50 GetFileType     endp
.text:00415A50
.text:00415A50 ; ---------------------------------------------------------------------------
.text:00415A56                 align 10h
.text:00415A60
.text:00415A60 ; =============== S U B R O U T I N E =======================================
.text:00415A60
.text:00415A60 ; Attributes: thunk
.text:00415A60
.text:00415A60 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00415A60 GetFileInformationByHandle proc near    ; CODE XREF: sub_40D450+69↑p
.text:00415A60
.text:00415A60 hFile           = dword ptr  4
.text:00415A60 lpFileInformation= dword ptr  8
.text:00415A60
.text:00415A60                 jmp     ds:__imp_GetFileInformationByHandle
.text:00415A60 GetFileInformationByHandle endp
.text:00415A60
.text:00415A60 ; ---------------------------------------------------------------------------
.text:00415A66                 align 10h
.text:00415A70
.text:00415A70 ; =============== S U B R O U T I N E =======================================
.text:00415A70
.text:00415A70 ; Attributes: thunk
.text:00415A70
.text:00415A70 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00415A70 GetFileSize     proc near               ; CODE XREF: sub_40D450+3F2↑p
.text:00415A70
.text:00415A70 hFile           = dword ptr  4
.text:00415A70 lpFileSizeHigh  = dword ptr  8
.text:00415A70
.text:00415A70                 jmp     ds:__imp_GetFileSize
.text:00415A70 GetFileSize     endp
.text:00415A70
.text:00415A70 ; ---------------------------------------------------------------------------
.text:00415A76                 align 10h
.text:00415A80
.text:00415A80 ; =============== S U B R O U T I N E =======================================
.text:00415A80
.text:00415A80 ; Attributes: thunk
.text:00415A80
.text:00415A80 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00415A80 PeekNamedPipe   proc near               ; CODE XREF: sub_40D450+439↑p
.text:00415A80
.text:00415A80 hNamedPipe      = dword ptr  4
.text:00415A80 lpBuffer        = dword ptr  8
.text:00415A80 nBufferSize     = dword ptr  0Ch
.text:00415A80 lpBytesRead     = dword ptr  10h
.text:00415A80 lpTotalBytesAvail= dword ptr  14h
.text:00415A80 lpBytesLeftThisMessage= dword ptr  18h
.text:00415A80
.text:00415A80                 jmp     ds:__imp_PeekNamedPipe
.text:00415A80 PeekNamedPipe   endp
.text:00415A80
.text:00415A80 ; ---------------------------------------------------------------------------
.text:00415A86                 align 10h
.text:00415A90
.text:00415A90 ; =============== S U B R O U T I N E =======================================
.text:00415A90
.text:00415A90 ; Attributes: thunk
.text:00415A90
.text:00415A90 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00415A90 GetDriveTypeA   proc near               ; CODE XREF: sub_40D920+4C↑p
.text:00415A90
.text:00415A90 lpRootPathName  = dword ptr  4
.text:00415A90
.text:00415A90                 jmp     ds:__imp_GetDriveTypeA
.text:00415A90 GetDriveTypeA   endp
.text:00415A90
.text:00415A90 ; ---------------------------------------------------------------------------
.text:00415A96                 align 10h
.text:00415AA0
.text:00415AA0 ; =============== S U B R O U T I N E =======================================
.text:00415AA0
.text:00415AA0 ; Attributes: thunk
.text:00415AA0
.text:00415AA0 ; DWORD __stdcall GetLastError()
.text:00415AA0 GetLastError    proc near               ; CODE XREF: sub_40D920:loc_40DBA9↑p
.text:00415AA0                                         ; .text:loc_40E6ED↑p ...
.text:00415AA0                 jmp     ds:__imp_GetLastError
.text:00415AA0 GetLastError    endp
.text:00415AA0
.text:00415AA0 ; ---------------------------------------------------------------------------
.text:00415AA6                 align 10h
.text:00415AB0
.text:00415AB0 ; =============== S U B R O U T I N E =======================================
.text:00415AB0
.text:00415AB0 ; Attributes: thunk
.text:00415AB0
.text:00415AB0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00415AB0 GetVolumeInformationA proc near         ; CODE XREF: sub_40DE20+64↑p
.text:00415AB0                                         ; .text:0040E3CC↑p ...
.text:00415AB0
.text:00415AB0 lpRootPathName  = dword ptr  4
.text:00415AB0 lpVolumeNameBuffer= dword ptr  8
.text:00415AB0 nVolumeNameSize = dword ptr  0Ch
.text:00415AB0 lpVolumeSerialNumber= dword ptr  10h
.text:00415AB0 lpMaximumComponentLength= dword ptr  14h
.text:00415AB0 lpFileSystemFlags= dword ptr  18h
.text:00415AB0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00415AB0 nFileSystemNameSize= dword ptr  20h
.text:00415AB0
.text:00415AB0                 jmp     ds:__imp_GetVolumeInformationA
.text:00415AB0 GetVolumeInformationA endp
.text:00415AB0
.text:00415AB0 ; ---------------------------------------------------------------------------
.text:00415AB6                 align 10h
.text:00415AC0
.text:00415AC0 ; =============== S U B R O U T I N E =======================================
.text:00415AC0
.text:00415AC0 ; Attributes: thunk
.text:00415AC0
.text:00415AC0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00415AC0 CreateFileA     proc near               ; CODE XREF: sub_412990-3DDA↑p
.text:00415AC0                                         ; .text:0040FAF3↑p ...
.text:00415AC0
.text:00415AC0 lpFileName      = dword ptr  4
.text:00415AC0 dwDesiredAccess = dword ptr  8
.text:00415AC0 dwShareMode     = dword ptr  0Ch
.text:00415AC0 lpSecurityAttributes= dword ptr  10h
.text:00415AC0 dwCreationDisposition= dword ptr  14h
.text:00415AC0 dwFlagsAndAttributes= dword ptr  18h
.text:00415AC0 hTemplateFile   = dword ptr  1Ch
.text:00415AC0
.text:00415AC0                 jmp     ds:__imp_CreateFileA
.text:00415AC0 CreateFileA     endp
.text:00415AC0
.text:00415AC0 ; ---------------------------------------------------------------------------
.text:00415AC6                 align 10h
.text:00415AD0
.text:00415AD0 ; =============== S U B R O U T I N E =======================================
.text:00415AD0
.text:00415AD0 ; Attributes: thunk
.text:00415AD0
.text:00415AD0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00415AD0 CloseHandle     proc near               ; CODE XREF: sub_412990-3DBF↑p
.text:00415AD0                                         ; .text:0040FB69↑p ...
.text:00415AD0
.text:00415AD0 hObject         = dword ptr  4
.text:00415AD0
.text:00415AD0                 jmp     ds:__imp_CloseHandle
.text:00415AD0 CloseHandle     endp
.text:00415AD0
.text:00415AD0 ; ---------------------------------------------------------------------------
.text:00415AD6                 align 10h
.text:00415AE0
.text:00415AE0 ; =============== S U B R O U T I N E =======================================
.text:00415AE0
.text:00415AE0 ; Attributes: thunk
.text:00415AE0
.text:00415AE0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00415AE0 SetErrorMode    proc near               ; CODE XREF: sub_412990-3D8A↑p
.text:00415AE0                                         ; sub_410E30+57↑p ...
.text:00415AE0
.text:00415AE0 uMode           = dword ptr  4
.text:00415AE0
.text:00415AE0                 jmp     ds:__imp_SetErrorMode
.text:00415AE0 SetErrorMode    endp
.text:00415AE0
.text:00415AE0 ; ---------------------------------------------------------------------------
.text:00415AE6                 align 10h
.text:00415AF0
.text:00415AF0 ; =============== S U B R O U T I N E =======================================
.text:00415AF0
.text:00415AF0 ; Attributes: thunk
.text:00415AF0
.text:00415AF0 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00415AF0 GetModuleFileNameA proc near            ; CODE XREF: sub_40F1C0+1C↑p
.text:00415AF0
.text:00415AF0 hModule         = dword ptr  4
.text:00415AF0 lpFilename      = dword ptr  8
.text:00415AF0 nSize           = dword ptr  0Ch
.text:00415AF0
.text:00415AF0                 jmp     ds:__imp_GetModuleFileNameA
.text:00415AF0 GetModuleFileNameA endp
.text:00415AF0
.text:00415AF0 ; ---------------------------------------------------------------------------
.text:00415AF6                 align 10h
.text:00415B00
.text:00415B00 ; =============== S U B R O U T I N E =======================================
.text:00415B00
.text:00415B00 ; Attributes: thunk
.text:00415B00
.text:00415B00 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00415B00 GetShortPathNameA proc near             ; CODE XREF: .text:0040F446↑p
.text:00415B00                                         ; .text:0040F470↑p
.text:00415B00
.text:00415B00 lpszLongPath    = dword ptr  4
.text:00415B00 lpszShortPath   = dword ptr  8
.text:00415B00 cchBuffer       = dword ptr  0Ch
.text:00415B00
.text:00415B00                 jmp     ds:__imp_GetShortPathNameA
.text:00415B00 GetShortPathNameA endp
.text:00415B00
.text:00415B00 ; ---------------------------------------------------------------------------
.text:00415B06                 align 10h
.text:00415B10
.text:00415B10 ; =============== S U B R O U T I N E =======================================
.text:00415B10
.text:00415B10 ; Attributes: thunk
.text:00415B10
.text:00415B10 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00415B10 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040F778↑p
.text:00415B10                                         ; .text:0040F794↑p ...
.text:00415B10
.text:00415B10 nBufferLength   = dword ptr  4
.text:00415B10 lpBuffer        = dword ptr  8
.text:00415B10
.text:00415B10                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00415B10 GetCurrentDirectoryA endp
.text:00415B10
.text:00415B10 ; ---------------------------------------------------------------------------
.text:00415B16                 align 10h
.text:00415B20
.text:00415B20 ; =============== S U B R O U T I N E =======================================
.text:00415B20
.text:00415B20 ; Attributes: thunk
.text:00415B20
.text:00415B20 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00415B20 DeviceIoControl proc near               ; CODE XREF: .text:0040FB5C↑p
.text:00415B20                                         ; sub_40FF20+1E5↑p
.text:00415B20
.text:00415B20 hDevice         = dword ptr  4
.text:00415B20 dwIoControlCode = dword ptr  8
.text:00415B20 lpInBuffer      = dword ptr  0Ch
.text:00415B20 nInBufferSize   = dword ptr  10h
.text:00415B20 lpOutBuffer     = dword ptr  14h
.text:00415B20 nOutBufferSize  = dword ptr  18h
.text:00415B20 lpBytesReturned = dword ptr  1Ch
.text:00415B20 lpOverlapped    = dword ptr  20h
.text:00415B20
.text:00415B20                 jmp     ds:__imp_DeviceIoControl
.text:00415B20 DeviceIoControl endp
.text:00415B20
.text:00415B20 ; ---------------------------------------------------------------------------
.text:00415B26                 align 10h
.text:00415B30
.text:00415B30 ; =============== S U B R O U T I N E =======================================
.text:00415B30
.text:00415B30 ; Attributes: thunk
.text:00415B30
.text:00415B30 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00415B30 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040FEB3↑p
.text:00415B30                                         ; sub_40FF20+7B↑p ...
.text:00415B30
.text:00415B30 lpRootPathName  = dword ptr  4
.text:00415B30 lpSectorsPerCluster= dword ptr  8
.text:00415B30 lpBytesPerSector= dword ptr  0Ch
.text:00415B30 lpNumberOfFreeClusters= dword ptr  10h
.text:00415B30 lpTotalNumberOfClusters= dword ptr  14h
.text:00415B30
.text:00415B30                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00415B30 GetDiskFreeSpaceA endp
.text:00415B30
.text:00415B30 ; ---------------------------------------------------------------------------
.text:00415B36                 align 10h
.text:00415B40
.text:00415B40 ; =============== S U B R O U T I N E =======================================
.text:00415B40
.text:00415B40 ; Attributes: thunk
.text:00415B40
.text:00415B40 ; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
.text:00415B40 DeleteFileA     proc near               ; CODE XREF: sub_4101C0+50↑p
.text:00415B40
.text:00415B40 lpFileName      = dword ptr  4
.text:00415B40
.text:00415B40                 jmp     ds:__imp_DeleteFileA
.text:00415B40 DeleteFileA     endp
.text:00415B40
.text:00415B40 ; ---------------------------------------------------------------------------
.text:00415B46                 align 10h
.text:00415B50
.text:00415B50 ; =============== S U B R O U T I N E =======================================
.text:00415B50
.text:00415B50 ; Attributes: thunk
.text:00415B50
.text:00415B50 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00415B50 UnlockFile      proc near               ; CODE XREF: sub_4106A0+B4↑p
.text:00415B50                                         ; sub_413350+40↑p
.text:00415B50
.text:00415B50 hFile           = dword ptr  4
.text:00415B50 dwFileOffsetLow = dword ptr  8
.text:00415B50 dwFileOffsetHigh= dword ptr  0Ch
.text:00415B50 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00415B50 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00415B50
.text:00415B50                 jmp     ds:__imp_UnlockFile
.text:00415B50 UnlockFile      endp
.text:00415B50
.text:00415B50 ; ---------------------------------------------------------------------------
.text:00415B56                 align 10h
.text:00415B60
.text:00415B60 ; =============== S U B R O U T I N E =======================================
.text:00415B60
.text:00415B60 ; Attributes: thunk
.text:00415B60
.text:00415B60 ; BOOL __stdcall LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.text:00415B60 LockFile        proc near               ; CODE XREF: sub_4106A0+F7↑p
.text:00415B60
.text:00415B60 hFile           = dword ptr  4
.text:00415B60 dwFileOffsetLow = dword ptr  8
.text:00415B60 dwFileOffsetHigh= dword ptr  0Ch
.text:00415B60 nNumberOfBytesToLockLow= dword ptr  10h
.text:00415B60 nNumberOfBytesToLockHigh= dword ptr  14h
.text:00415B60
.text:00415B60                 jmp     ds:__imp_LockFile
.text:00415B60 LockFile        endp
.text:00415B60
.text:00415B60 ; ---------------------------------------------------------------------------
.text:00415B66                 align 10h
.text:00415B70
.text:00415B70 ; =============== S U B R O U T I N E =======================================
.text:00415B70
.text:00415B70 ; Attributes: thunk
.text:00415B70
.text:00415B70 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00415B70 GetFullPathNameA proc near              ; CODE XREF: sub_410D00+45↑p
.text:00415B70                                         ; sub_410D00+ED↑p
.text:00415B70
.text:00415B70 lpFileName      = dword ptr  4
.text:00415B70 nBufferLength   = dword ptr  8
.text:00415B70 lpBuffer        = dword ptr  0Ch
.text:00415B70 lpFilePart      = dword ptr  10h
.text:00415B70
.text:00415B70                 jmp     ds:__imp_GetFullPathNameA
.text:00415B70 GetFullPathNameA endp
.text:00415B70
.text:00415B70 ; ---------------------------------------------------------------------------
.text:00415B76                 align 10h
.text:00415B80
.text:00415B80 ; =============== S U B R O U T I N E =======================================
.text:00415B80
.text:00415B80 ; Attributes: thunk
.text:00415B80
.text:00415B80 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00415B80 lstrcmpiA       proc near               ; CODE XREF: .text:004113BB↑p
.text:00415B80                                         ; .text:004113D2↑p ...
.text:00415B80
.text:00415B80 lpString1       = dword ptr  4
.text:00415B80 lpString2       = dword ptr  8
.text:00415B80
.text:00415B80                 jmp     ds:__imp_lstrcmpiA
.text:00415B80 lstrcmpiA       endp
.text:00415B80
.text:00415B80 ; ---------------------------------------------------------------------------
.text:00415B86                 align 10h
.text:00415B90
.text:00415B90 ; =============== S U B R O U T I N E =======================================
.text:00415B90
.text:00415B90 ; Attributes: thunk
.text:00415B90
.text:00415B90 ; DWORD __stdcall GetVersion()
.text:00415B90 GetVersion      proc near               ; CODE XREF: .text:00411743↑p
.text:00415B90                 jmp     ds:__imp_GetVersion
.text:00415B90 GetVersion      endp
.text:00415B90
.text:00415B90 ; ---------------------------------------------------------------------------
.text:00415B96                 align 10h
.text:00415BA0
.text:00415BA0 ; =============== S U B R O U T I N E =======================================
.text:00415BA0
.text:00415BA0 ; Attributes: thunk
.text:00415BA0
.text:00415BA0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00415BA0 GetVersionExA   proc near               ; CODE XREF: sub_4117D0+32↑p
.text:00415BA0                                         ; sub_4117D0+20B↑p
.text:00415BA0
.text:00415BA0 lpVersionInformation= dword ptr  4
.text:00415BA0
.text:00415BA0                 jmp     ds:__imp_GetVersionExA
.text:00415BA0 GetVersionExA   endp
.text:00415BA0
.text:00415BA0 ; ---------------------------------------------------------------------------
.text:00415BA6                 align 10h
.text:00415BB0
.text:00415BB0 ; =============== S U B R O U T I N E =======================================
.text:00415BB0
.text:00415BB0 ; Attributes: thunk
.text:00415BB0
.text:00415BB0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00415BB0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:00411E6F↑p
.text:00415BB0                                         ; .text:00411E9E↑p ...
.text:00415BB0
.text:00415BB0 nBufferLength   = dword ptr  4
.text:00415BB0 lpBuffer        = dword ptr  8
.text:00415BB0
.text:00415BB0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00415BB0 GetLogicalDriveStringsA endp
.text:00415BB0
.text:00415BB0 ; ---------------------------------------------------------------------------
.text:00415BB6                 align 10h
.text:00415BC0
.text:00415BC0 ; =============== S U B R O U T I N E =======================================
.text:00415BC0
.text:00415BC0 ; Attributes: thunk
.text:00415BC0
.text:00415BC0 ; HANDLE __stdcall GetProcessHeap()
.text:00415BC0 GetProcessHeap  proc near               ; CODE XREF: .text:00411E79↑p
.text:00415BC0                                         ; sub_412550+24↑p ...
.text:00415BC0                 jmp     ds:__imp_GetProcessHeap
.text:00415BC0 GetProcessHeap  endp
.text:00415BC0
.text:00415BC0 ; ---------------------------------------------------------------------------
.text:00415BC6                 align 10h
.text:00415BD0
.text:00415BD0 ; =============== S U B R O U T I N E =======================================
.text:00415BD0
.text:00415BD0 ; Attributes: thunk
.text:00415BD0
.text:00415BD0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00415BD0 HeapAlloc       proc near               ; CODE XREF: .text:00411E8D↑p
.text:00415BD0                                         ; sub_412550+38↑p ...
.text:00415BD0
.text:00415BD0 hHeap           = dword ptr  4
.text:00415BD0 dwFlags         = dword ptr  8
.text:00415BD0 dwBytes         = dword ptr  0Ch
.text:00415BD0
.text:00415BD0                 jmp     ds:__imp_HeapAlloc
.text:00415BD0 HeapAlloc       endp
.text:00415BD0
.text:00415BD0 ; ---------------------------------------------------------------------------
.text:00415BD6                 align 10h
.text:00415BE0
.text:00415BE0 ; =============== S U B R O U T I N E =======================================
.text:00415BE0
.text:00415BE0 ; Attributes: thunk
.text:00415BE0
.text:00415BE0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00415BE0 HeapFree        proc near               ; CODE XREF: .text:0041268D↑p
.text:00415BE0
.text:00415BE0 hHeap           = dword ptr  4
.text:00415BE0 dwFlags         = dword ptr  8
.text:00415BE0 lpMem           = dword ptr  0Ch
.text:00415BE0
.text:00415BE0                 jmp     ds:__imp_HeapFree
.text:00415BE0 HeapFree        endp
.text:00415BE0
.text:00415BE0 ; ---------------------------------------------------------------------------
.text:00415BE6                 align 10h
.text:00415BF0
.text:00415BF0 ; =============== S U B R O U T I N E =======================================
.text:00415BF0
.text:00415BF0 ; Attributes: thunk
.text:00415BF0
.text:00415BF0 ; BOOL __stdcall AreFileApisANSI()
.text:00415BF0 AreFileApisANSI proc near               ; CODE XREF: sub_412730+89↑p
.text:00415BF0                 jmp     ds:__imp_AreFileApisANSI
.text:00415BF0 AreFileApisANSI endp
.text:00415BF0
.text:00415BF0 ; ---------------------------------------------------------------------------
.text:00415BF6                 align 10h
.text:00415C00
.text:00415C00 ; =============== S U B R O U T I N E =======================================
.text:00415C00
.text:00415C00 ; Attributes: thunk
.text:00415C00
.text:00415C00 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00415C00 MultiByteToWideChar proc near           ; CODE XREF: sub_412730+BD↑p
.text:00415C00
.text:00415C00 CodePage        = dword ptr  4
.text:00415C00 dwFlags         = dword ptr  8
.text:00415C00 lpMultiByteStr  = dword ptr  0Ch
.text:00415C00 cbMultiByte     = dword ptr  10h
.text:00415C00 lpWideCharStr   = dword ptr  14h
.text:00415C00 cchWideChar     = dword ptr  18h
.text:00415C00
.text:00415C00                 jmp     ds:__imp_MultiByteToWideChar
.text:00415C00 MultiByteToWideChar endp
.text:00415C00
.text:00415C00 ; ---------------------------------------------------------------------------
.text:00415C06                 align 10h
.text:00415C10
.text:00415C10 ; =============== S U B R O U T I N E =======================================
.text:00415C10
.text:00415C10 ; Attributes: thunk
.text:00415C10
.text:00415C10 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00415C10 lstrcpyA        proc near               ; CODE XREF: sub_412730+128↑p
.text:00415C10
.text:00415C10 lpString1       = dword ptr  4
.text:00415C10 lpString2       = dword ptr  8
.text:00415C10
.text:00415C10                 jmp     ds:__imp_lstrcpyA
.text:00415C10 lstrcpyA        endp
.text:00415C10
.text:00415C10 ; ---------------------------------------------------------------------------
.text:00415C16                 align 10h
.text:00415C20
.text:00415C20 ; =============== S U B R O U T I N E =======================================
.text:00415C20
.text:00415C20 ; Attributes: thunk
.text:00415C20
.text:00415C20 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:00415C20 GetSystemInfo   proc near               ; CODE XREF: sub_4131C0+3A↑p
.text:00415C20                                         ; sub_413210+3A↑p ...
.text:00415C20
.text:00415C20 lpSystemInfo    = dword ptr  4
.text:00415C20
.text:00415C20                 jmp     ds:__imp_GetSystemInfo
.text:00415C20 GetSystemInfo   endp
.text:00415C20
.text:00415C20 ; ---------------------------------------------------------------------------
.text:00415C26                 align 10h
.text:00415C30
.text:00415C30 ; =============== S U B R O U T I N E =======================================
.text:00415C30
.text:00415C30 ; Attributes: thunk
.text:00415C30
.text:00415C30 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00415C30 CreateDirectoryA proc near              ; CODE XREF: sub_4134F0+22↑p
.text:00415C30
.text:00415C30 lpPathName      = dword ptr  4
.text:00415C30 lpSecurityAttributes= dword ptr  8
.text:00415C30
.text:00415C30                 jmp     ds:__imp_CreateDirectoryA
.text:00415C30 CreateDirectoryA endp
.text:00415C30
.text:00415C30 ; ---------------------------------------------------------------------------
.text:00415C36                 align 10h
.text:00415C40
.text:00415C40 ; =============== S U B R O U T I N E =======================================
.text:00415C40
.text:00415C40 ; Attributes: thunk
.text:00415C40
.text:00415C40 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00415C40 GetTimeZoneInformation proc near        ; CODE XREF: sub_4135F0+22↑p
.text:00415C40
.text:00415C40 lpTimeZoneInformation= dword ptr  4
.text:00415C40
.text:00415C40                 jmp     ds:__imp_GetTimeZoneInformation
.text:00415C40 GetTimeZoneInformation endp
.text:00415C40
.text:00415C40 ; ---------------------------------------------------------------------------
.text:00415C46                 align 10h
.text:00415C50
.text:00415C50 ; =============== S U B R O U T I N E =======================================
.text:00415C50
.text:00415C50 ; Attributes: thunk
.text:00415C50
.text:00415C50 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00415C50 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_4135F0+4F↑p
.text:00415C50
.text:00415C50 lpSystemTimeAsFileTime= dword ptr  4
.text:00415C50
.text:00415C50                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00415C50 GetSystemTimeAsFileTime endp
.text:00415C50
.text:00415C50 ; ---------------------------------------------------------------------------
.text:00415C56                 align 10h
.text:00415C60
.text:00415C60 ; =============== S U B R O U T I N E =======================================
.text:00415C60
.text:00415C60 ; Attributes: thunk
.text:00415C60
.text:00415C60 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00415C60 RegOpenKeyExA   proc near               ; CODE XREF: .text:00411341↑p
.text:00415C60
.text:00415C60 hKey            = dword ptr  4
.text:00415C60 lpSubKey        = dword ptr  8
.text:00415C60 ulOptions       = dword ptr  0Ch
.text:00415C60 samDesired      = dword ptr  10h
.text:00415C60 phkResult       = dword ptr  14h
.text:00415C60
.text:00415C60                 jmp     ds:__imp_RegOpenKeyExA
.text:00415C60 RegOpenKeyExA   endp
.text:00415C60
.text:00415C60 ; ---------------------------------------------------------------------------
.text:00415C66                 align 10h
.text:00415C70
.text:00415C70 ; =============== S U B R O U T I N E =======================================
.text:00415C70
.text:00415C70 ; Attributes: thunk
.text:00415C70
.text:00415C70 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00415C70 RegQueryValueExA proc near              ; CODE XREF: .text:00411384↑p
.text:00415C70
.text:00415C70 hKey            = dword ptr  4
.text:00415C70 lpValueName     = dword ptr  8
.text:00415C70 lpReserved      = dword ptr  0Ch
.text:00415C70 lpType          = dword ptr  10h
.text:00415C70 lpData          = dword ptr  14h
.text:00415C70 lpcbData        = dword ptr  18h
.text:00415C70
.text:00415C70                 jmp     ds:__imp_RegQueryValueExA
.text:00415C70 RegQueryValueExA endp
.text:00415C70
.text:00415C70 ; ---------------------------------------------------------------------------
.text:00415C76                 align 10h
.text:00415C80
.text:00415C80 ; =============== S U B R O U T I N E =======================================
.text:00415C80
.text:00415C80 ; Attributes: thunk
.text:00415C80
.text:00415C80 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00415C80 RegCloseKey     proc near               ; CODE XREF: .text:004113A8↑p
.text:00415C80
.text:00415C80 hKey            = dword ptr  4
.text:00415C80
.text:00415C80                 jmp     ds:__imp_RegCloseKey
.text:00415C80 RegCloseKey     endp
.text:00415C80
.text:00415C80 ; ---------------------------------------------------------------------------
.text:00415C86                 db 2 dup(90h)
.text:00415C88                 dd 2 dup(0)
.text:00415C90                 dd 21400h, 0
.text:00415C98                 dd 0C0h, 46000000h
.text:00415CA0 ; const IID rclsid
.text:00415CA0 rclsid          dd 21401h               ; Data1
.text:00415CA0                                         ; DATA XREF: sub_412730+4B↑o
.text:00415CA0                 dw 0                    ; Data2
.text:00415CA0                 dw 0                    ; Data3
.text:00415CA0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00415CB0                 dd 214A0h, 0
.text:00415CB8                 dd 0C0h, 46000000h, 214A1h, 0
.text:00415CC8                 dd 0C0h, 46000000h, 214D0h, 0
.text:00415CD8                 dd 0C0h, 46000000h, 214D1h, 0
.text:00415CE8                 dd 0C0h, 46000000h, 214D2h, 0
.text:00415CF8                 dd 0C0h, 46000000h, 214E1h, 0
.text:00415D08                 dd 0C0h, 46000000h, 214E2h, 0
.text:00415D18                 dd 0C0h, 46000000h, 214E3h, 0
.text:00415D28                 dd 0C0h, 46000000h, 214E4h, 0
.text:00415D38                 dd 0C0h, 46000000h, 21500h, 0
.text:00415D48                 dd 0C0h, 46000000h, 214E5h, 0
.text:00415D58                 dd 0C0h, 46000000h, 214E6h, 0
.text:00415D68                 dd 0C0h, 46000000h, 214E8h, 0
.text:00415D78                 dd 0C0h, 46000000h, 214E9h, 0
.text:00415D88                 dd 0C0h, 46000000h, 214EAh, 0
.text:00415D98                 dd 0C0h, 46000000h, 214EBh, 0
.text:00415DA8                 dd 0C0h, 46000000h
.text:00415DB0 ; const IID riid
.text:00415DB0 riid            dd 214EEh               ; Data1
.text:00415DB0                                         ; DATA XREF: sub_412730+2B↑o
.text:00415DB0                 dw 0                    ; Data2
.text:00415DB0                 dw 0                    ; Data3
.text:00415DB0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00415DC0                 dd 214EFh, 0
.text:00415DC8                 dd 0C0h, 46000000h, 214F0h, 0
.text:00415DD8                 dd 0C0h, 46000000h, 214F1h, 0
.text:00415DE8                 dd 0C0h, 46000000h, 214F2h, 0
.text:00415DF8                 dd 0C0h, 46000000h, 214F3h, 0
.text:00415E08                 dd 0C0h, 46000000h, 214F4h, 0
.text:00415E18                 dd 0C0h, 46000000h, 214F5h, 0
.text:00415E28                 dd 0C0h, 46000000h, 214F6h, 0
.text:00415E38                 dd 0C0h, 46000000h, 214F7h, 0
.text:00415E48                 dd 0C0h, 46000000h, 214F8h, 0
.text:00415E58                 dd 0C0h, 46000000h, 214F9h, 0
.text:00415E68                 dd 0C0h, 46000000h, 214FAh, 0
.text:00415E78                 dd 0C0h, 46000000h, 214FBh, 0
.text:00415E88                 dd 0C0h, 46000000h, 214FCh, 0
.text:00415E98                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00415E98                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00415E98                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00415E98                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00415E98                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00415E98                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00415E98                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00415E98                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00415E98                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00415E98                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00415F68                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00415F78                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00415F88                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00415F98                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00415FA8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00415FA8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00415FA8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00415FA8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00415FA8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00415FA8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00415FA8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00416030 dword_416030    dd 0FFFFFFFFh           ; DATA XREF: .text:00414C99↑r
.text:00416030                                         ; .text:loc_414CC0↑r ...
.text:00416034 dword_416034    dd 0                    ; DATA XREF: .text:loc_414CCC↑r
.text:00416034                                         ; sub_414CF0:loc_414D3D↑r
.text:00416038                 dd 0FFFFFFFFh
.text:0041603C dword_41603C    dd 71h dup(0)           ; DATA XREF: .data:off_417164↓o
.text:00416200                 dd 380h dup(?)
.text:00416200 _text           ends
.text:00416200
.data:00417000 ; Section 2. (virtual address 00017000)
.data:00417000 ; Virtual size                  : 00000180 (    384.)
.data:00417000 ; Section size in file          : 00000200 (    512.)
.data:00417000 ; Offset to raw data for section: 00015600
.data:00417000 ; Flags C0000040: Data Readable Writable
.data:00417000 ; Alignment     : default
.data:00417000 ; ===========================================================================
.data:00417000
.data:00417000 ; Segment type: Pure data
.data:00417000 ; Segment permissions: Read/Write
.data:00417000 _data           segment para public 'DATA' use32
.data:00417000                 assume cs:_data
.data:00417000                 ;org 417000h
.data:00417000 dword_417000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00417000                                         ; sub_401080+CC↑r
.data:00417004 dword_417004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00417004                                         ; sub_401080+D4↑r
.data:00417008                 align 10h
.data:00417010 byte_417010     db 0Ah                  ; DATA XREF: sub_4021E0+175A↑w
.data:00417010                                         ; sub_406030+B↑r
.data:00417011                 db    0
.data:00417012                 db    0
.data:00417013                 db    0
.data:00417014                 db    0
.data:00417015                 db    0
.data:00417016                 db    0
.data:00417017                 db    0
.data:00417018                 db    0
.data:00417019                 db    0
.data:0041701A                 db    0
.data:0041701B                 db    0
.data:0041701C                 db    0
.data:0041701D                 db    0
.data:0041701E                 db    0
.data:0041701F                 db    0
.data:00417020                 db    0
.data:00417021                 db    0
.data:00417022                 db    0
.data:00417023                 db    0
.data:00417024                 db    0
.data:00417025                 db    0
.data:00417026                 db    0
.data:00417027                 db    0
.data:00417028                 db    0
.data:00417029                 db    0
.data:0041702A                 db    0
.data:0041702B                 db    0
.data:0041702C                 db    0
.data:0041702D                 db    0
.data:0041702E                 db    0
.data:0041702F                 db    0
.data:00417030 off_417030      dd offset dword_401280  ; DATA XREF: sub_4086A0+53↑r
.data:00417030                                         ; sub_4086A0+AC↑o
.data:00417034                 db    4
.data:00417035                 db    0
.data:00417036                 db    0
.data:00417037                 db    0
.data:00417038                 db  84h ; „
.data:00417039                 db  12h
.data:0041703A                 db  40h ; @
.data:0041703B                 db    0
.data:0041703C                 db    8
.data:0041703D                 db    0
.data:0041703E                 db    0
.data:0041703F                 db    0
.data:00417040                 db  88h ; ˆ
.data:00417041                 db  12h
.data:00417042                 db  40h ; @
.data:00417043                 db    0
.data:00417044                 db  0Ch
.data:00417045                 db    0
.data:00417046                 db    0
.data:00417047                 db    0
.data:00417048                 db  8Ch ; Œ
.data:00417049                 db  12h
.data:0041704A                 db  40h ; @
.data:0041704B                 db    0
.data:0041704C                 db    2
.data:0041704D                 db    0
.data:0041704E                 db    0
.data:0041704F                 db    0
.data:00417050                 db  90h
.data:00417051                 db  12h
.data:00417052                 db  40h ; @
.data:00417053                 db    0
.data:00417054                 db    1
.data:00417055                 db    0
.data:00417056                 db    0
.data:00417057                 db    0
.data:00417058                 db  94h ; ”
.data:00417059                 db  12h
.data:0041705A                 db  40h ; @
.data:0041705B                 db    0
.data:0041705C                 db    7
.data:0041705D                 db    0
.data:0041705E                 db    0
.data:0041705F                 db    0
.data:00417060                 db  98h ; ˜
.data:00417061                 db  12h
.data:00417062                 db  40h ; @
.data:00417063                 db    0
.data:00417064                 db    6
.data:00417065                 db    0
.data:00417066                 db    0
.data:00417067                 db    0
.data:00417068                 db  9Ch ; œ
.data:00417069                 db  12h
.data:0041706A                 db  40h ; @
.data:0041706B                 db    0
.data:0041706C                 db    3
.data:0041706D                 db    0
.data:0041706E                 db    0
.data:0041706F                 db    0
.data:00417070                 db 0A0h ;  
.data:00417071                 db  12h
.data:00417072                 db  40h ; @
.data:00417073                 db    0
.data:00417074                 db    5
.data:00417075                 db    0
.data:00417076                 db    0
.data:00417077                 db    0
.data:00417078                 db 0A4h ; ¤
.data:00417079                 db  12h
.data:0041707A                 db  40h ; @
.data:0041707B                 db    0
.data:0041707C                 db  0Bh
.data:0041707D                 db    0
.data:0041707E                 db    0
.data:0041707F                 db    0
.data:00417080                 db 0A8h ; ¨
.data:00417081                 db  12h
.data:00417082                 db  40h ; @
.data:00417083                 db    0
.data:00417084                 db  0Ah
.data:00417085                 db    0
.data:00417086                 db    0
.data:00417087                 db    0
.data:00417088                 db 0ACh ; ¬
.data:00417089                 db  12h
.data:0041708A                 db  40h ; @
.data:0041708B                 db    0
.data:0041708C                 db    9
.data:0041708D                 db    0
.data:0041708E                 db    0
.data:0041708F                 db    0
.data:00417090 dword_417090    dd 40000h               ; DATA XREF: sub_403F30+7C↑r
.data:00417090                                         ; sub_406030+12↑r ...
.data:00417094 dword_417094    dd 80h                  ; DATA XREF: sub_4021E0+1697↑r
.data:00417094                                         ; sub_4021E0:loc_4038AC↑w ...
.data:00417098 off_417098      dd offset Block         ; DATA XREF: sub_404600+ED↑r
.data:00417098                                         ; sub_404600+F3↑w ...
.data:0041709C                 db    0
.data:0041709D                 db    0
.data:0041709E                 db    0
.data:0041709F                 db    0
.data:004170A0                 db    0
.data:004170A1                 db    0
.data:004170A2                 db    0
.data:004170A3                 db    0
.data:004170A4                 db    0
.data:004170A5                 db    0
.data:004170A6                 db    0
.data:004170A7                 db    0
.data:004170A8                 db    0
.data:004170A9                 db    0
.data:004170AA                 db    0
.data:004170AB                 db    0
.data:004170AC                 db    0
.data:004170AD                 db    0
.data:004170AE                 db    0
.data:004170AF                 db    0
.data:004170B0 ; int Code
.data:004170B0 Code            dd 1                    ; DATA XREF: sub_4021E0+DC↑w
.data:004170B0                                         ; sub_403CC0+12C↑r ...
.data:004170B4                 align 10h
.data:004170C0 dword_4170C0    dd 1                    ; DATA XREF: sub_4021E0+2F2↑r
.data:004170C0                                         ; sub_4021E0+328↑w ...
.data:004170C4 dword_4170C4    dd 1                    ; DATA XREF: sub_409660+11↑r
.data:004170C4                                         ; .text:00409701↑r
.data:004170C8 dword_4170C8    dd 3Fh                  ; DATA XREF: sub_409660+7D↑w
.data:004170C8                                         ; .text:0040976D↑w
.data:004170CC                 align 10h
.data:004170D0 ; char *Buffer
.data:004170D0 Buffer          dd offset aCopyrightC2005
.data:004170D0                                         ; DATA XREF: sub_409BF0+DC↑r
.data:004170D0                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:004170D4                 align 10h
.data:004170E0 dword_4170E0    dd 1                    ; DATA XREF: sub_40C840+22↑r
.data:004170E0                                         ; sub_40C840+65↑r ...
.data:004170E4 dword_4170E4    dd 100h                 ; DATA XREF: sub_40C840+3F↑o
.data:004170E4                                         ; sub_40C840+1A2↑r ...
.data:004170E8 off_4170E8      dd offset unk_418540    ; DATA XREF: sub_40C840+1AA↑r
.data:004170EC ; void *off_4170EC
.data:004170EC off_4170EC      dd offset dword_4170E4  ; DATA XREF: sub_40C840+39↑r
.data:004170EC                                         ; sub_40C840+60↑w ...
.data:004170F0 dword_4170F0    dd 200h                 ; DATA XREF: sub_40D450+2ED↑r
.data:004170F0                                         ; sub_40D450+2F8↑r ...
.data:004170F4 ; char *off_4170F4
.data:004170F4 off_4170F4      dd offset aComExeBatCmd ; DATA XREF: sub_40D920+3D3↑r
.data:004170F4                                         ; sub_40D920+400↑r ...
.data:004170F4                                         ; ".com;.exe;.bat;.cmd"
.data:004170F8                 align 10h
.data:00417100 byte_417100     db 41h                  ; DATA XREF: sub_40F5F0+6B↑w
.data:00417100                                         ; sub_40F5F0:loc_40F704↑r
.data:00417101                 align 10h
.data:00417110 dword_417110    dd 1                    ; DATA XREF: .text:loc_4111F7↑r
.data:00417110                                         ; sub_4117D0+202↑w
.data:00417114                 align 10h
.data:00417120 off_417120      dd offset aNotset       ; DATA XREF: .text:00411A4A↑r
.data:00417120                                         ; .text:00412692↑r
.data:00417120                                         ; "notset"
.data:00417124 off_417124      dd offset aNotset       ; DATA XREF: .text:00411A62↑r
.data:00417124                                         ; .text:00411A84↑r ...
.data:00417124                                         ; "notset"
.data:00417128                 align 10h
.data:00417130 dword_417130    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00417134                 align 10h
.data:00417140 ; int Mode
.data:00417140 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00417140                                         ; sub_401080+80↑r ...
.data:00417144                 align 10h
.data:00417150 dword_417150    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00417150                                         ; sub_401080+BA↑r
.data:00417154                 align 10h
.data:00417160 dword_417160    dd 0                    ; DATA XREF: sub_414CF0+9↑r
.data:00417160                                         ; sub_414CF0+1D↑w
.data:00417164 off_417164      dd offset dword_41603C  ; DATA XREF: sub_414C60+6↑r
.data:00417164                                         ; sub_414C60+17↑r ...
.data:00417168                 align 1000h
.data:00417168 _data           ends
.data:00417168
.bss:00418000 ; Section 3. (virtual address 00018000)
.bss:00418000 ; Virtual size                  : 00000AA0 (   2720.)
.bss:00418000 ; Section size in file          : 00000000 (      0.)
.bss:00418000 ; Offset to raw data for section: 00000000
.bss:00418000 ; Flags C0000080: Bss Readable Writable
.bss:00418000 ; Alignment     : default
.bss:00418000 ; ===========================================================================
.bss:00418000
.bss:00418000 ; Segment type: Uninitialized
.bss:00418000 ; Segment permissions: Read/Write
.bss:00418000 _bss            segment para public 'BSS' use32
.bss:00418000                 assume cs:_bss
.bss:00418000                 ;org 418000h
.bss:00418000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00418000 dword_418000    dd ?                    ; DATA XREF: sub_405CD0:loc_405D93↑r
.bss:00418000                                         ; sub_405CD0+D5↑w ...
.bss:00418004                 align 10h
.bss:00418010 dword_418010    dd ?                    ; DATA XREF: sub_404600+69↑r
.bss:00418010                                         ; sub_404600+BF↑r ...
.bss:00418014                 align 10h
.bss:00418020 byte_418020     db ?                    ; DATA XREF: sub_4021E0+10D↑w
.bss:00418020                                         ; sub_4021E0:loc_4022FD↑w ...
.bss:00418021                 align 10h
.bss:00418030 dword_418030    dd ?                    ; DATA XREF: sub_4021E0+12C↑w
.bss:00418030                                         ; sub_4021E0+13F↑w ...
.bss:00418034                 align 10h
.bss:00418040 byte_418040     db ?                    ; DATA XREF: sub_4021E0+FA↑w
.bss:00418040                                         ; sub_403F30+442↑r ...
.bss:00418041                 align 10h
.bss:00418050 byte_418050     db ?                    ; DATA XREF: sub_4021E0:loc_402344↑w
.bss:00418050                                         ; sub_406030+262↑r ...
.bss:00418051                 db    ? ;
.bss:00418052                 db    ? ;
.bss:00418053                 db    ? ;
.bss:00418054                 db    ? ;
.bss:00418055                 db    ? ;
.bss:00418056                 db    ? ;
.bss:00418057                 db    ? ;
.bss:00418058                 db    ? ;
.bss:00418059                 db    ? ;
.bss:0041805A                 db    ? ;
.bss:0041805B                 db    ? ;
.bss:0041805C                 db    ? ;
.bss:0041805D                 db    ? ;
.bss:0041805E                 db    ? ;
.bss:0041805F                 db    ? ;
.bss:00418060                 db    ? ;
.bss:00418061                 db    ? ;
.bss:00418062                 db    ? ;
.bss:00418063                 db    ? ;
.bss:00418064                 db    ? ;
.bss:00418065                 db    ? ;
.bss:00418066                 db    ? ;
.bss:00418067                 db    ? ;
.bss:00418068                 db    ? ;
.bss:00418069                 db    ? ;
.bss:0041806A                 db    ? ;
.bss:0041806B                 db    ? ;
.bss:0041806C                 db    ? ;
.bss:0041806D                 db    ? ;
.bss:0041806E                 db    ? ;
.bss:0041806F                 db    ? ;
.bss:00418070                 db    ? ;
.bss:00418071                 db    ? ;
.bss:00418072                 db    ? ;
.bss:00418073                 db    ? ;
.bss:00418074                 db    ? ;
.bss:00418075                 db    ? ;
.bss:00418076                 db    ? ;
.bss:00418077                 db    ? ;
.bss:00418078                 db    ? ;
.bss:00418079                 db    ? ;
.bss:0041807A                 db    ? ;
.bss:0041807B                 db    ? ;
.bss:0041807C                 db    ? ;
.bss:0041807D                 db    ? ;
.bss:0041807E                 db    ? ;
.bss:0041807F                 db    ? ;
.bss:00418080                 db    ? ;
.bss:00418081                 db    ? ;
.bss:00418082                 db    ? ;
.bss:00418083                 db    ? ;
.bss:00418084                 db    ? ;
.bss:00418085                 db    ? ;
.bss:00418086                 db    ? ;
.bss:00418087                 db    ? ;
.bss:00418088                 db    ? ;
.bss:00418089                 db    ? ;
.bss:0041808A                 db    ? ;
.bss:0041808B                 db    ? ;
.bss:0041808C                 db    ? ;
.bss:0041808D                 db    ? ;
.bss:0041808E                 db    ? ;
.bss:0041808F                 db    ? ;
.bss:00418090                 db    ? ;
.bss:00418091                 db    ? ;
.bss:00418092                 db    ? ;
.bss:00418093                 db    ? ;
.bss:00418094                 db    ? ;
.bss:00418095                 db    ? ;
.bss:00418096                 db    ? ;
.bss:00418097                 db    ? ;
.bss:00418098                 db    ? ;
.bss:00418099                 db    ? ;
.bss:0041809A                 db    ? ;
.bss:0041809B                 db    ? ;
.bss:0041809C                 db    ? ;
.bss:0041809D                 db    ? ;
.bss:0041809E                 db    ? ;
.bss:0041809F                 db    ? ;
.bss:004180A0                 db    ? ;
.bss:004180A1                 db    ? ;
.bss:004180A2                 db    ? ;
.bss:004180A3                 db    ? ;
.bss:004180A4                 db    ? ;
.bss:004180A5                 db    ? ;
.bss:004180A6                 db    ? ;
.bss:004180A7                 db    ? ;
.bss:004180A8                 db    ? ;
.bss:004180A9                 db    ? ;
.bss:004180AA                 db    ? ;
.bss:004180AB                 db    ? ;
.bss:004180AC                 db    ? ;
.bss:004180AD                 db    ? ;
.bss:004180AE                 db    ? ;
.bss:004180AF                 db    ? ;
.bss:004180B0                 db    ? ;
.bss:004180B1                 db    ? ;
.bss:004180B2                 db    ? ;
.bss:004180B3                 db    ? ;
.bss:004180B4                 db    ? ;
.bss:004180B5                 db    ? ;
.bss:004180B6                 db    ? ;
.bss:004180B7                 db    ? ;
.bss:004180B8                 db    ? ;
.bss:004180B9                 db    ? ;
.bss:004180BA                 db    ? ;
.bss:004180BB                 db    ? ;
.bss:004180BC                 db    ? ;
.bss:004180BD                 db    ? ;
.bss:004180BE                 db    ? ;
.bss:004180BF                 db    ? ;
.bss:004180C0                 db    ? ;
.bss:004180C1                 db    ? ;
.bss:004180C2                 db    ? ;
.bss:004180C3                 db    ? ;
.bss:004180C4                 db    ? ;
.bss:004180C5                 db    ? ;
.bss:004180C6                 db    ? ;
.bss:004180C7                 db    ? ;
.bss:004180C8                 db    ? ;
.bss:004180C9                 db    ? ;
.bss:004180CA                 db    ? ;
.bss:004180CB                 db    ? ;
.bss:004180CC                 db    ? ;
.bss:004180CD                 db    ? ;
.bss:004180CE                 db    ? ;
.bss:004180CF                 db    ? ;
.bss:004180D0                 db    ? ;
.bss:004180D1                 db    ? ;
.bss:004180D2                 db    ? ;
.bss:004180D3                 db    ? ;
.bss:004180D4                 db    ? ;
.bss:004180D5                 db    ? ;
.bss:004180D6                 db    ? ;
.bss:004180D7                 db    ? ;
.bss:004180D8                 db    ? ;
.bss:004180D9                 db    ? ;
.bss:004180DA                 db    ? ;
.bss:004180DB                 db    ? ;
.bss:004180DC                 db    ? ;
.bss:004180DD                 db    ? ;
.bss:004180DE                 db    ? ;
.bss:004180DF                 db    ? ;
.bss:004180E0                 db    ? ;
.bss:004180E1                 db    ? ;
.bss:004180E2                 db    ? ;
.bss:004180E3                 db    ? ;
.bss:004180E4                 db    ? ;
.bss:004180E5                 db    ? ;
.bss:004180E6                 db    ? ;
.bss:004180E7                 db    ? ;
.bss:004180E8                 db    ? ;
.bss:004180E9                 db    ? ;
.bss:004180EA                 db    ? ;
.bss:004180EB                 db    ? ;
.bss:004180EC                 db    ? ;
.bss:004180ED                 db    ? ;
.bss:004180EE                 db    ? ;
.bss:004180EF                 db    ? ;
.bss:004180F0                 db    ? ;
.bss:004180F1                 db    ? ;
.bss:004180F2                 db    ? ;
.bss:004180F3                 db    ? ;
.bss:004180F4                 db    ? ;
.bss:004180F5                 db    ? ;
.bss:004180F6                 db    ? ;
.bss:004180F7                 db    ? ;
.bss:004180F8                 db    ? ;
.bss:004180F9                 db    ? ;
.bss:004180FA                 db    ? ;
.bss:004180FB                 db    ? ;
.bss:004180FC                 db    ? ;
.bss:004180FD                 db    ? ;
.bss:004180FE                 db    ? ;
.bss:004180FF                 db    ? ;
.bss:00418100                 db    ? ;
.bss:00418101                 db    ? ;
.bss:00418102                 db    ? ;
.bss:00418103                 db    ? ;
.bss:00418104                 db    ? ;
.bss:00418105                 db    ? ;
.bss:00418106                 db    ? ;
.bss:00418107                 db    ? ;
.bss:00418108                 db    ? ;
.bss:00418109                 db    ? ;
.bss:0041810A                 db    ? ;
.bss:0041810B                 db    ? ;
.bss:0041810C                 db    ? ;
.bss:0041810D                 db    ? ;
.bss:0041810E                 db    ? ;
.bss:0041810F                 db    ? ;
.bss:00418110                 db    ? ;
.bss:00418111                 db    ? ;
.bss:00418112                 db    ? ;
.bss:00418113                 db    ? ;
.bss:00418114                 db    ? ;
.bss:00418115                 db    ? ;
.bss:00418116                 db    ? ;
.bss:00418117                 db    ? ;
.bss:00418118                 db    ? ;
.bss:00418119                 db    ? ;
.bss:0041811A                 db    ? ;
.bss:0041811B                 db    ? ;
.bss:0041811C                 db    ? ;
.bss:0041811D                 db    ? ;
.bss:0041811E                 db    ? ;
.bss:0041811F                 db    ? ;
.bss:00418120                 db    ? ;
.bss:00418121                 db    ? ;
.bss:00418122                 db    ? ;
.bss:00418123                 db    ? ;
.bss:00418124                 db    ? ;
.bss:00418125                 db    ? ;
.bss:00418126                 db    ? ;
.bss:00418127                 db    ? ;
.bss:00418128                 db    ? ;
.bss:00418129                 db    ? ;
.bss:0041812A                 db    ? ;
.bss:0041812B                 db    ? ;
.bss:0041812C                 db    ? ;
.bss:0041812D                 db    ? ;
.bss:0041812E                 db    ? ;
.bss:0041812F                 db    ? ;
.bss:00418130                 db    ? ;
.bss:00418131                 db    ? ;
.bss:00418132                 db    ? ;
.bss:00418133                 db    ? ;
.bss:00418134                 db    ? ;
.bss:00418135                 db    ? ;
.bss:00418136                 db    ? ;
.bss:00418137                 db    ? ;
.bss:00418138                 db    ? ;
.bss:00418139                 db    ? ;
.bss:0041813A                 db    ? ;
.bss:0041813B                 db    ? ;
.bss:0041813C                 db    ? ;
.bss:0041813D                 db    ? ;
.bss:0041813E                 db    ? ;
.bss:0041813F                 db    ? ;
.bss:00418140                 db    ? ;
.bss:00418141                 db    ? ;
.bss:00418142                 db    ? ;
.bss:00418143                 db    ? ;
.bss:00418144                 db    ? ;
.bss:00418145                 db    ? ;
.bss:00418146                 db    ? ;
.bss:00418147                 db    ? ;
.bss:00418148                 db    ? ;
.bss:00418149                 db    ? ;
.bss:0041814A                 db    ? ;
.bss:0041814B                 db    ? ;
.bss:0041814C                 db    ? ;
.bss:0041814D                 db    ? ;
.bss:0041814E                 db    ? ;
.bss:0041814F                 db    ? ;
.bss:00418150 byte_418150     db ?                    ; DATA XREF: sub_4021E0+198↑w
.bss:00418150                                         ; sub_405990+13D↑o
.bss:00418151                 db    ? ;
.bss:00418152                 db    ? ;
.bss:00418153                 db    ? ;
.bss:00418154                 db    ? ;
.bss:00418155                 db    ? ;
.bss:00418156                 db    ? ;
.bss:00418157                 db    ? ;
.bss:00418158                 db    ? ;
.bss:00418159                 db    ? ;
.bss:0041815A                 db    ? ;
.bss:0041815B                 db    ? ;
.bss:0041815C                 db    ? ;
.bss:0041815D                 db    ? ;
.bss:0041815E                 db    ? ;
.bss:0041815F                 db    ? ;
.bss:00418160                 db    ? ;
.bss:00418161                 db    ? ;
.bss:00418162                 db    ? ;
.bss:00418163                 db    ? ;
.bss:00418164                 db    ? ;
.bss:00418165                 db    ? ;
.bss:00418166                 db    ? ;
.bss:00418167                 db    ? ;
.bss:00418168                 db    ? ;
.bss:00418169                 db    ? ;
.bss:0041816A                 db    ? ;
.bss:0041816B                 db    ? ;
.bss:0041816C                 db    ? ;
.bss:0041816D                 db    ? ;
.bss:0041816E                 db    ? ;
.bss:0041816F                 db    ? ;
.bss:00418170                 db    ? ;
.bss:00418171                 db    ? ;
.bss:00418172                 db    ? ;
.bss:00418173                 db    ? ;
.bss:00418174                 db    ? ;
.bss:00418175                 db    ? ;
.bss:00418176                 db    ? ;
.bss:00418177                 db    ? ;
.bss:00418178                 db    ? ;
.bss:00418179                 db    ? ;
.bss:0041817A                 db    ? ;
.bss:0041817B                 db    ? ;
.bss:0041817C                 db    ? ;
.bss:0041817D                 db    ? ;
.bss:0041817E                 db    ? ;
.bss:0041817F                 db    ? ;
.bss:00418180                 db    ? ;
.bss:00418181                 db    ? ;
.bss:00418182                 db    ? ;
.bss:00418183                 db    ? ;
.bss:00418184                 db    ? ;
.bss:00418185                 db    ? ;
.bss:00418186                 db    ? ;
.bss:00418187                 db    ? ;
.bss:00418188                 db    ? ;
.bss:00418189                 db    ? ;
.bss:0041818A                 db    ? ;
.bss:0041818B                 db    ? ;
.bss:0041818C                 db    ? ;
.bss:0041818D                 db    ? ;
.bss:0041818E                 db    ? ;
.bss:0041818F                 db    ? ;
.bss:00418190                 db    ? ;
.bss:00418191                 db    ? ;
.bss:00418192                 db    ? ;
.bss:00418193                 db    ? ;
.bss:00418194                 db    ? ;
.bss:00418195                 db    ? ;
.bss:00418196                 db    ? ;
.bss:00418197                 db    ? ;
.bss:00418198                 db    ? ;
.bss:00418199                 db    ? ;
.bss:0041819A                 db    ? ;
.bss:0041819B                 db    ? ;
.bss:0041819C                 db    ? ;
.bss:0041819D                 db    ? ;
.bss:0041819E                 db    ? ;
.bss:0041819F                 db    ? ;
.bss:004181A0                 db    ? ;
.bss:004181A1                 db    ? ;
.bss:004181A2                 db    ? ;
.bss:004181A3                 db    ? ;
.bss:004181A4                 db    ? ;
.bss:004181A5                 db    ? ;
.bss:004181A6                 db    ? ;
.bss:004181A7                 db    ? ;
.bss:004181A8                 db    ? ;
.bss:004181A9                 db    ? ;
.bss:004181AA                 db    ? ;
.bss:004181AB                 db    ? ;
.bss:004181AC                 db    ? ;
.bss:004181AD                 db    ? ;
.bss:004181AE                 db    ? ;
.bss:004181AF                 db    ? ;
.bss:004181B0                 db    ? ;
.bss:004181B1                 db    ? ;
.bss:004181B2                 db    ? ;
.bss:004181B3                 db    ? ;
.bss:004181B4                 db    ? ;
.bss:004181B5                 db    ? ;
.bss:004181B6                 db    ? ;
.bss:004181B7                 db    ? ;
.bss:004181B8                 db    ? ;
.bss:004181B9                 db    ? ;
.bss:004181BA                 db    ? ;
.bss:004181BB                 db    ? ;
.bss:004181BC                 db    ? ;
.bss:004181BD                 db    ? ;
.bss:004181BE                 db    ? ;
.bss:004181BF                 db    ? ;
.bss:004181C0                 db    ? ;
.bss:004181C1                 db    ? ;
.bss:004181C2                 db    ? ;
.bss:004181C3                 db    ? ;
.bss:004181C4                 db    ? ;
.bss:004181C5                 db    ? ;
.bss:004181C6                 db    ? ;
.bss:004181C7                 db    ? ;
.bss:004181C8                 db    ? ;
.bss:004181C9                 db    ? ;
.bss:004181CA                 db    ? ;
.bss:004181CB                 db    ? ;
.bss:004181CC                 db    ? ;
.bss:004181CD                 db    ? ;
.bss:004181CE                 db    ? ;
.bss:004181CF                 db    ? ;
.bss:004181D0                 db    ? ;
.bss:004181D1                 db    ? ;
.bss:004181D2                 db    ? ;
.bss:004181D3                 db    ? ;
.bss:004181D4                 db    ? ;
.bss:004181D5                 db    ? ;
.bss:004181D6                 db    ? ;
.bss:004181D7                 db    ? ;
.bss:004181D8                 db    ? ;
.bss:004181D9                 db    ? ;
.bss:004181DA                 db    ? ;
.bss:004181DB                 db    ? ;
.bss:004181DC                 db    ? ;
.bss:004181DD                 db    ? ;
.bss:004181DE                 db    ? ;
.bss:004181DF                 db    ? ;
.bss:004181E0                 db    ? ;
.bss:004181E1                 db    ? ;
.bss:004181E2                 db    ? ;
.bss:004181E3                 db    ? ;
.bss:004181E4                 db    ? ;
.bss:004181E5                 db    ? ;
.bss:004181E6                 db    ? ;
.bss:004181E7                 db    ? ;
.bss:004181E8                 db    ? ;
.bss:004181E9                 db    ? ;
.bss:004181EA                 db    ? ;
.bss:004181EB                 db    ? ;
.bss:004181EC                 db    ? ;
.bss:004181ED                 db    ? ;
.bss:004181EE                 db    ? ;
.bss:004181EF                 db    ? ;
.bss:004181F0                 db    ? ;
.bss:004181F1                 db    ? ;
.bss:004181F2                 db    ? ;
.bss:004181F3                 db    ? ;
.bss:004181F4                 db    ? ;
.bss:004181F5                 db    ? ;
.bss:004181F6                 db    ? ;
.bss:004181F7                 db    ? ;
.bss:004181F8                 db    ? ;
.bss:004181F9                 db    ? ;
.bss:004181FA                 db    ? ;
.bss:004181FB                 db    ? ;
.bss:004181FC                 db    ? ;
.bss:004181FD                 db    ? ;
.bss:004181FE                 db    ? ;
.bss:004181FF                 db    ? ;
.bss:00418200                 db    ? ;
.bss:00418201                 db    ? ;
.bss:00418202                 db    ? ;
.bss:00418203                 db    ? ;
.bss:00418204                 db    ? ;
.bss:00418205                 db    ? ;
.bss:00418206                 db    ? ;
.bss:00418207                 db    ? ;
.bss:00418208                 db    ? ;
.bss:00418209                 db    ? ;
.bss:0041820A                 db    ? ;
.bss:0041820B                 db    ? ;
.bss:0041820C                 db    ? ;
.bss:0041820D                 db    ? ;
.bss:0041820E                 db    ? ;
.bss:0041820F                 db    ? ;
.bss:00418210                 db    ? ;
.bss:00418211                 db    ? ;
.bss:00418212                 db    ? ;
.bss:00418213                 db    ? ;
.bss:00418214                 db    ? ;
.bss:00418215                 db    ? ;
.bss:00418216                 db    ? ;
.bss:00418217                 db    ? ;
.bss:00418218                 db    ? ;
.bss:00418219                 db    ? ;
.bss:0041821A                 db    ? ;
.bss:0041821B                 db    ? ;
.bss:0041821C                 db    ? ;
.bss:0041821D                 db    ? ;
.bss:0041821E                 db    ? ;
.bss:0041821F                 db    ? ;
.bss:00418220                 db    ? ;
.bss:00418221                 db    ? ;
.bss:00418222                 db    ? ;
.bss:00418223                 db    ? ;
.bss:00418224                 db    ? ;
.bss:00418225                 db    ? ;
.bss:00418226                 db    ? ;
.bss:00418227                 db    ? ;
.bss:00418228                 db    ? ;
.bss:00418229                 db    ? ;
.bss:0041822A                 db    ? ;
.bss:0041822B                 db    ? ;
.bss:0041822C                 db    ? ;
.bss:0041822D                 db    ? ;
.bss:0041822E                 db    ? ;
.bss:0041822F                 db    ? ;
.bss:00418230                 db    ? ;
.bss:00418231                 db    ? ;
.bss:00418232                 db    ? ;
.bss:00418233                 db    ? ;
.bss:00418234                 db    ? ;
.bss:00418235                 db    ? ;
.bss:00418236                 db    ? ;
.bss:00418237                 db    ? ;
.bss:00418238                 db    ? ;
.bss:00418239                 db    ? ;
.bss:0041823A                 db    ? ;
.bss:0041823B                 db    ? ;
.bss:0041823C                 db    ? ;
.bss:0041823D                 db    ? ;
.bss:0041823E                 db    ? ;
.bss:0041823F                 db    ? ;
.bss:00418240                 db    ? ;
.bss:00418241                 db    ? ;
.bss:00418242                 db    ? ;
.bss:00418243                 db    ? ;
.bss:00418244                 db    ? ;
.bss:00418245                 db    ? ;
.bss:00418246                 db    ? ;
.bss:00418247                 db    ? ;
.bss:00418248                 db    ? ;
.bss:00418249                 db    ? ;
.bss:0041824A                 db    ? ;
.bss:0041824B                 db    ? ;
.bss:0041824C                 db    ? ;
.bss:0041824D                 db    ? ;
.bss:0041824E                 db    ? ;
.bss:0041824F                 db    ? ;
.bss:00418250 byte_418250     db ?                    ; DATA XREF: sub_4021E0+1EA↑w
.bss:00418250                                         ; sub_405990:loc_405AA6↑o
.bss:00418251                 db    ? ;
.bss:00418252                 db    ? ;
.bss:00418253                 db    ? ;
.bss:00418254                 db    ? ;
.bss:00418255                 db    ? ;
.bss:00418256                 db    ? ;
.bss:00418257                 db    ? ;
.bss:00418258                 db    ? ;
.bss:00418259                 db    ? ;
.bss:0041825A                 db    ? ;
.bss:0041825B                 db    ? ;
.bss:0041825C                 db    ? ;
.bss:0041825D                 db    ? ;
.bss:0041825E                 db    ? ;
.bss:0041825F                 db    ? ;
.bss:00418260                 db    ? ;
.bss:00418261                 db    ? ;
.bss:00418262                 db    ? ;
.bss:00418263                 db    ? ;
.bss:00418264                 db    ? ;
.bss:00418265                 db    ? ;
.bss:00418266                 db    ? ;
.bss:00418267                 db    ? ;
.bss:00418268                 db    ? ;
.bss:00418269                 db    ? ;
.bss:0041826A                 db    ? ;
.bss:0041826B                 db    ? ;
.bss:0041826C                 db    ? ;
.bss:0041826D                 db    ? ;
.bss:0041826E                 db    ? ;
.bss:0041826F                 db    ? ;
.bss:00418270                 db    ? ;
.bss:00418271                 db    ? ;
.bss:00418272                 db    ? ;
.bss:00418273                 db    ? ;
.bss:00418274                 db    ? ;
.bss:00418275                 db    ? ;
.bss:00418276                 db    ? ;
.bss:00418277                 db    ? ;
.bss:00418278                 db    ? ;
.bss:00418279                 db    ? ;
.bss:0041827A                 db    ? ;
.bss:0041827B                 db    ? ;
.bss:0041827C                 db    ? ;
.bss:0041827D                 db    ? ;
.bss:0041827E                 db    ? ;
.bss:0041827F                 db    ? ;
.bss:00418280                 db    ? ;
.bss:00418281                 db    ? ;
.bss:00418282                 db    ? ;
.bss:00418283                 db    ? ;
.bss:00418284                 db    ? ;
.bss:00418285                 db    ? ;
.bss:00418286                 db    ? ;
.bss:00418287                 db    ? ;
.bss:00418288                 db    ? ;
.bss:00418289                 db    ? ;
.bss:0041828A                 db    ? ;
.bss:0041828B                 db    ? ;
.bss:0041828C                 db    ? ;
.bss:0041828D                 db    ? ;
.bss:0041828E                 db    ? ;
.bss:0041828F                 db    ? ;
.bss:00418290                 db    ? ;
.bss:00418291                 db    ? ;
.bss:00418292                 db    ? ;
.bss:00418293                 db    ? ;
.bss:00418294                 db    ? ;
.bss:00418295                 db    ? ;
.bss:00418296                 db    ? ;
.bss:00418297                 db    ? ;
.bss:00418298                 db    ? ;
.bss:00418299                 db    ? ;
.bss:0041829A                 db    ? ;
.bss:0041829B                 db    ? ;
.bss:0041829C                 db    ? ;
.bss:0041829D                 db    ? ;
.bss:0041829E                 db    ? ;
.bss:0041829F                 db    ? ;
.bss:004182A0                 db    ? ;
.bss:004182A1                 db    ? ;
.bss:004182A2                 db    ? ;
.bss:004182A3                 db    ? ;
.bss:004182A4                 db    ? ;
.bss:004182A5                 db    ? ;
.bss:004182A6                 db    ? ;
.bss:004182A7                 db    ? ;
.bss:004182A8                 db    ? ;
.bss:004182A9                 db    ? ;
.bss:004182AA                 db    ? ;
.bss:004182AB                 db    ? ;
.bss:004182AC                 db    ? ;
.bss:004182AD                 db    ? ;
.bss:004182AE                 db    ? ;
.bss:004182AF                 db    ? ;
.bss:004182B0                 db    ? ;
.bss:004182B1                 db    ? ;
.bss:004182B2                 db    ? ;
.bss:004182B3                 db    ? ;
.bss:004182B4                 db    ? ;
.bss:004182B5                 db    ? ;
.bss:004182B6                 db    ? ;
.bss:004182B7                 db    ? ;
.bss:004182B8                 db    ? ;
.bss:004182B9                 db    ? ;
.bss:004182BA                 db    ? ;
.bss:004182BB                 db    ? ;
.bss:004182BC                 db    ? ;
.bss:004182BD                 db    ? ;
.bss:004182BE                 db    ? ;
.bss:004182BF                 db    ? ;
.bss:004182C0                 db    ? ;
.bss:004182C1                 db    ? ;
.bss:004182C2                 db    ? ;
.bss:004182C3                 db    ? ;
.bss:004182C4                 db    ? ;
.bss:004182C5                 db    ? ;
.bss:004182C6                 db    ? ;
.bss:004182C7                 db    ? ;
.bss:004182C8                 db    ? ;
.bss:004182C9                 db    ? ;
.bss:004182CA                 db    ? ;
.bss:004182CB                 db    ? ;
.bss:004182CC                 db    ? ;
.bss:004182CD                 db    ? ;
.bss:004182CE                 db    ? ;
.bss:004182CF                 db    ? ;
.bss:004182D0                 db    ? ;
.bss:004182D1                 db    ? ;
.bss:004182D2                 db    ? ;
.bss:004182D3                 db    ? ;
.bss:004182D4                 db    ? ;
.bss:004182D5                 db    ? ;
.bss:004182D6                 db    ? ;
.bss:004182D7                 db    ? ;
.bss:004182D8                 db    ? ;
.bss:004182D9                 db    ? ;
.bss:004182DA                 db    ? ;
.bss:004182DB                 db    ? ;
.bss:004182DC                 db    ? ;
.bss:004182DD                 db    ? ;
.bss:004182DE                 db    ? ;
.bss:004182DF                 db    ? ;
.bss:004182E0                 db    ? ;
.bss:004182E1                 db    ? ;
.bss:004182E2                 db    ? ;
.bss:004182E3                 db    ? ;
.bss:004182E4                 db    ? ;
.bss:004182E5                 db    ? ;
.bss:004182E6                 db    ? ;
.bss:004182E7                 db    ? ;
.bss:004182E8                 db    ? ;
.bss:004182E9                 db    ? ;
.bss:004182EA                 db    ? ;
.bss:004182EB                 db    ? ;
.bss:004182EC                 db    ? ;
.bss:004182ED                 db    ? ;
.bss:004182EE                 db    ? ;
.bss:004182EF                 db    ? ;
.bss:004182F0                 db    ? ;
.bss:004182F1                 db    ? ;
.bss:004182F2                 db    ? ;
.bss:004182F3                 db    ? ;
.bss:004182F4                 db    ? ;
.bss:004182F5                 db    ? ;
.bss:004182F6                 db    ? ;
.bss:004182F7                 db    ? ;
.bss:004182F8                 db    ? ;
.bss:004182F9                 db    ? ;
.bss:004182FA                 db    ? ;
.bss:004182FB                 db    ? ;
.bss:004182FC                 db    ? ;
.bss:004182FD                 db    ? ;
.bss:004182FE                 db    ? ;
.bss:004182FF                 db    ? ;
.bss:00418300                 db    ? ;
.bss:00418301                 db    ? ;
.bss:00418302                 db    ? ;
.bss:00418303                 db    ? ;
.bss:00418304                 db    ? ;
.bss:00418305                 db    ? ;
.bss:00418306                 db    ? ;
.bss:00418307                 db    ? ;
.bss:00418308                 db    ? ;
.bss:00418309                 db    ? ;
.bss:0041830A                 db    ? ;
.bss:0041830B                 db    ? ;
.bss:0041830C                 db    ? ;
.bss:0041830D                 db    ? ;
.bss:0041830E                 db    ? ;
.bss:0041830F                 db    ? ;
.bss:00418310                 db    ? ;
.bss:00418311                 db    ? ;
.bss:00418312                 db    ? ;
.bss:00418313                 db    ? ;
.bss:00418314                 db    ? ;
.bss:00418315                 db    ? ;
.bss:00418316                 db    ? ;
.bss:00418317                 db    ? ;
.bss:00418318                 db    ? ;
.bss:00418319                 db    ? ;
.bss:0041831A                 db    ? ;
.bss:0041831B                 db    ? ;
.bss:0041831C                 db    ? ;
.bss:0041831D                 db    ? ;
.bss:0041831E                 db    ? ;
.bss:0041831F                 db    ? ;
.bss:00418320                 db    ? ;
.bss:00418321                 db    ? ;
.bss:00418322                 db    ? ;
.bss:00418323                 db    ? ;
.bss:00418324                 db    ? ;
.bss:00418325                 db    ? ;
.bss:00418326                 db    ? ;
.bss:00418327                 db    ? ;
.bss:00418328                 db    ? ;
.bss:00418329                 db    ? ;
.bss:0041832A                 db    ? ;
.bss:0041832B                 db    ? ;
.bss:0041832C                 db    ? ;
.bss:0041832D                 db    ? ;
.bss:0041832E                 db    ? ;
.bss:0041832F                 db    ? ;
.bss:00418330                 db    ? ;
.bss:00418331                 db    ? ;
.bss:00418332                 db    ? ;
.bss:00418333                 db    ? ;
.bss:00418334                 db    ? ;
.bss:00418335                 db    ? ;
.bss:00418336                 db    ? ;
.bss:00418337                 db    ? ;
.bss:00418338                 db    ? ;
.bss:00418339                 db    ? ;
.bss:0041833A                 db    ? ;
.bss:0041833B                 db    ? ;
.bss:0041833C                 db    ? ;
.bss:0041833D                 db    ? ;
.bss:0041833E                 db    ? ;
.bss:0041833F                 db    ? ;
.bss:00418340                 db    ? ;
.bss:00418341                 db    ? ;
.bss:00418342                 db    ? ;
.bss:00418343                 db    ? ;
.bss:00418344                 db    ? ;
.bss:00418345                 db    ? ;
.bss:00418346                 db    ? ;
.bss:00418347                 db    ? ;
.bss:00418348                 db    ? ;
.bss:00418349                 db    ? ;
.bss:0041834A                 db    ? ;
.bss:0041834B                 db    ? ;
.bss:0041834C                 db    ? ;
.bss:0041834D                 db    ? ;
.bss:0041834E                 db    ? ;
.bss:0041834F                 db    ? ;
.bss:00418350 byte_418350     db ?                    ; DATA XREF: sub_4021E0:loc_4023F0↑w
.bss:00418350                                         ; sub_405990:loc_405AB0↑o ...
.bss:00418351                 db    ? ;
.bss:00418352                 db    ? ;
.bss:00418353                 db    ? ;
.bss:00418354                 db    ? ;
.bss:00418355                 db    ? ;
.bss:00418356                 db    ? ;
.bss:00418357                 db    ? ;
.bss:00418358                 db    ? ;
.bss:00418359                 db    ? ;
.bss:0041835A                 db    ? ;
.bss:0041835B                 db    ? ;
.bss:0041835C                 db    ? ;
.bss:0041835D                 db    ? ;
.bss:0041835E                 db    ? ;
.bss:0041835F                 db    ? ;
.bss:00418360                 db    ? ;
.bss:00418361                 db    ? ;
.bss:00418362                 db    ? ;
.bss:00418363                 db    ? ;
.bss:00418364                 db    ? ;
.bss:00418365                 db    ? ;
.bss:00418366                 db    ? ;
.bss:00418367                 db    ? ;
.bss:00418368                 db    ? ;
.bss:00418369                 db    ? ;
.bss:0041836A                 db    ? ;
.bss:0041836B                 db    ? ;
.bss:0041836C                 db    ? ;
.bss:0041836D                 db    ? ;
.bss:0041836E                 db    ? ;
.bss:0041836F                 db    ? ;
.bss:00418370                 db    ? ;
.bss:00418371                 db    ? ;
.bss:00418372                 db    ? ;
.bss:00418373                 db    ? ;
.bss:00418374                 db    ? ;
.bss:00418375                 db    ? ;
.bss:00418376                 db    ? ;
.bss:00418377                 db    ? ;
.bss:00418378                 db    ? ;
.bss:00418379                 db    ? ;
.bss:0041837A                 db    ? ;
.bss:0041837B                 db    ? ;
.bss:0041837C                 db    ? ;
.bss:0041837D                 db    ? ;
.bss:0041837E                 db    ? ;
.bss:0041837F                 db    ? ;
.bss:00418380                 db    ? ;
.bss:00418381                 db    ? ;
.bss:00418382                 db    ? ;
.bss:00418383                 db    ? ;
.bss:00418384                 db    ? ;
.bss:00418385                 db    ? ;
.bss:00418386                 db    ? ;
.bss:00418387                 db    ? ;
.bss:00418388                 db    ? ;
.bss:00418389                 db    ? ;
.bss:0041838A                 db    ? ;
.bss:0041838B                 db    ? ;
.bss:0041838C                 db    ? ;
.bss:0041838D                 db    ? ;
.bss:0041838E                 db    ? ;
.bss:0041838F                 db    ? ;
.bss:00418390                 db    ? ;
.bss:00418391                 db    ? ;
.bss:00418392                 db    ? ;
.bss:00418393                 db    ? ;
.bss:00418394                 db    ? ;
.bss:00418395                 db    ? ;
.bss:00418396                 db    ? ;
.bss:00418397                 db    ? ;
.bss:00418398                 db    ? ;
.bss:00418399                 db    ? ;
.bss:0041839A                 db    ? ;
.bss:0041839B                 db    ? ;
.bss:0041839C                 db    ? ;
.bss:0041839D                 db    ? ;
.bss:0041839E                 db    ? ;
.bss:0041839F                 db    ? ;
.bss:004183A0                 db    ? ;
.bss:004183A1                 db    ? ;
.bss:004183A2                 db    ? ;
.bss:004183A3                 db    ? ;
.bss:004183A4                 db    ? ;
.bss:004183A5                 db    ? ;
.bss:004183A6                 db    ? ;
.bss:004183A7                 db    ? ;
.bss:004183A8                 db    ? ;
.bss:004183A9                 db    ? ;
.bss:004183AA                 db    ? ;
.bss:004183AB                 db    ? ;
.bss:004183AC                 db    ? ;
.bss:004183AD                 db    ? ;
.bss:004183AE                 db    ? ;
.bss:004183AF                 db    ? ;
.bss:004183B0                 db    ? ;
.bss:004183B1                 db    ? ;
.bss:004183B2                 db    ? ;
.bss:004183B3                 db    ? ;
.bss:004183B4                 db    ? ;
.bss:004183B5                 db    ? ;
.bss:004183B6                 db    ? ;
.bss:004183B7                 db    ? ;
.bss:004183B8                 db    ? ;
.bss:004183B9                 db    ? ;
.bss:004183BA                 db    ? ;
.bss:004183BB                 db    ? ;
.bss:004183BC                 db    ? ;
.bss:004183BD                 db    ? ;
.bss:004183BE                 db    ? ;
.bss:004183BF                 db    ? ;
.bss:004183C0                 db    ? ;
.bss:004183C1                 db    ? ;
.bss:004183C2                 db    ? ;
.bss:004183C3                 db    ? ;
.bss:004183C4                 db    ? ;
.bss:004183C5                 db    ? ;
.bss:004183C6                 db    ? ;
.bss:004183C7                 db    ? ;
.bss:004183C8                 db    ? ;
.bss:004183C9                 db    ? ;
.bss:004183CA                 db    ? ;
.bss:004183CB                 db    ? ;
.bss:004183CC                 db    ? ;
.bss:004183CD                 db    ? ;
.bss:004183CE                 db    ? ;
.bss:004183CF                 db    ? ;
.bss:004183D0                 db    ? ;
.bss:004183D1                 db    ? ;
.bss:004183D2                 db    ? ;
.bss:004183D3                 db    ? ;
.bss:004183D4                 db    ? ;
.bss:004183D5                 db    ? ;
.bss:004183D6                 db    ? ;
.bss:004183D7                 db    ? ;
.bss:004183D8                 db    ? ;
.bss:004183D9                 db    ? ;
.bss:004183DA                 db    ? ;
.bss:004183DB                 db    ? ;
.bss:004183DC                 db    ? ;
.bss:004183DD                 db    ? ;
.bss:004183DE                 db    ? ;
.bss:004183DF                 db    ? ;
.bss:004183E0                 db    ? ;
.bss:004183E1                 db    ? ;
.bss:004183E2                 db    ? ;
.bss:004183E3                 db    ? ;
.bss:004183E4                 db    ? ;
.bss:004183E5                 db    ? ;
.bss:004183E6                 db    ? ;
.bss:004183E7                 db    ? ;
.bss:004183E8                 db    ? ;
.bss:004183E9                 db    ? ;
.bss:004183EA                 db    ? ;
.bss:004183EB                 db    ? ;
.bss:004183EC                 db    ? ;
.bss:004183ED                 db    ? ;
.bss:004183EE                 db    ? ;
.bss:004183EF                 db    ? ;
.bss:004183F0                 db    ? ;
.bss:004183F1                 db    ? ;
.bss:004183F2                 db    ? ;
.bss:004183F3                 db    ? ;
.bss:004183F4                 db    ? ;
.bss:004183F5                 db    ? ;
.bss:004183F6                 db    ? ;
.bss:004183F7                 db    ? ;
.bss:004183F8                 db    ? ;
.bss:004183F9                 db    ? ;
.bss:004183FA                 db    ? ;
.bss:004183FB                 db    ? ;
.bss:004183FC                 db    ? ;
.bss:004183FD                 db    ? ;
.bss:004183FE                 db    ? ;
.bss:004183FF                 db    ? ;
.bss:00418400                 db    ? ;
.bss:00418401                 db    ? ;
.bss:00418402                 db    ? ;
.bss:00418403                 db    ? ;
.bss:00418404                 db    ? ;
.bss:00418405                 db    ? ;
.bss:00418406                 db    ? ;
.bss:00418407                 db    ? ;
.bss:00418408                 db    ? ;
.bss:00418409                 db    ? ;
.bss:0041840A                 db    ? ;
.bss:0041840B                 db    ? ;
.bss:0041840C                 db    ? ;
.bss:0041840D                 db    ? ;
.bss:0041840E                 db    ? ;
.bss:0041840F                 db    ? ;
.bss:00418410                 db    ? ;
.bss:00418411                 db    ? ;
.bss:00418412                 db    ? ;
.bss:00418413                 db    ? ;
.bss:00418414                 db    ? ;
.bss:00418415                 db    ? ;
.bss:00418416                 db    ? ;
.bss:00418417                 db    ? ;
.bss:00418418                 db    ? ;
.bss:00418419                 db    ? ;
.bss:0041841A                 db    ? ;
.bss:0041841B                 db    ? ;
.bss:0041841C                 db    ? ;
.bss:0041841D                 db    ? ;
.bss:0041841E                 db    ? ;
.bss:0041841F                 db    ? ;
.bss:00418420                 db    ? ;
.bss:00418421                 db    ? ;
.bss:00418422                 db    ? ;
.bss:00418423                 db    ? ;
.bss:00418424                 db    ? ;
.bss:00418425                 db    ? ;
.bss:00418426                 db    ? ;
.bss:00418427                 db    ? ;
.bss:00418428                 db    ? ;
.bss:00418429                 db    ? ;
.bss:0041842A                 db    ? ;
.bss:0041842B                 db    ? ;
.bss:0041842C                 db    ? ;
.bss:0041842D                 db    ? ;
.bss:0041842E                 db    ? ;
.bss:0041842F                 db    ? ;
.bss:00418430                 db    ? ;
.bss:00418431                 db    ? ;
.bss:00418432                 db    ? ;
.bss:00418433                 db    ? ;
.bss:00418434                 db    ? ;
.bss:00418435                 db    ? ;
.bss:00418436                 db    ? ;
.bss:00418437                 db    ? ;
.bss:00418438                 db    ? ;
.bss:00418439                 db    ? ;
.bss:0041843A                 db    ? ;
.bss:0041843B                 db    ? ;
.bss:0041843C                 db    ? ;
.bss:0041843D                 db    ? ;
.bss:0041843E                 db    ? ;
.bss:0041843F                 db    ? ;
.bss:00418440                 db    ? ;
.bss:00418441                 db    ? ;
.bss:00418442                 db    ? ;
.bss:00418443                 db    ? ;
.bss:00418444                 db    ? ;
.bss:00418445                 db    ? ;
.bss:00418446                 db    ? ;
.bss:00418447                 db    ? ;
.bss:00418448                 db    ? ;
.bss:00418449                 db    ? ;
.bss:0041844A                 db    ? ;
.bss:0041844B                 db    ? ;
.bss:0041844C                 db    ? ;
.bss:0041844D                 db    ? ;
.bss:0041844E                 db    ? ;
.bss:0041844F                 db    ? ;
.bss:00418450 dword_418450    dd ?                    ; DATA XREF: sub_403CC0+83↑r
.bss:00418450                                         ; sub_403CC0+AA↑w ...
.bss:00418454                 align 10h
.bss:00418460 ; void *dword_418460
.bss:00418460 dword_418460    dd ?                    ; DATA XREF: sub_4021E0:loc_4027AD↑r
.bss:00418460                                         ; sub_4021E0+5EC↑r ...
.bss:00418464                 align 10h
.bss:00418470 dword_418470    dd ?                    ; DATA XREF: sub_4021E0+3F7↑r
.bss:00418470                                         ; sub_4021E0:loc_40279F↑r ...
.bss:00418474                 align 10h
.bss:00418480 dword_418480    dd ?                    ; DATA XREF: sub_4021E0+5C5↑r
.bss:00418480                                         ; sub_4021E0+5F2↑o ...
.bss:00418484                 align 10h
.bss:00418490 byte_418490     db ?                    ; DATA XREF: sub_4021E0+3FF↑w
.bss:00418490                                         ; sub_403F30:loc_4040DF↑r ...
.bss:00418491                 align 10h
.bss:004184A0 byte_4184A0     db ?                    ; DATA XREF: sub_4021E0:loc_403918↑w
.bss:004184A0                                         ; sub_403F30+4E9↑r ...
.bss:004184A1                 align 10h
.bss:004184B0 byte_4184B0     db ?                    ; DATA XREF: sub_4021E0:loc_403999↑w
.bss:004184B0                                         ; sub_403F30:loc_403F8F↑r ...
.bss:004184B1                 align 10h
.bss:004184C0 byte_4184C0     db ?                    ; DATA XREF: sub_4021E0:loc_402325↑w
.bss:004184C0                                         ; sub_4021E0:loc_4026EA↑r ...
.bss:004184C1                 align 10h
.bss:004184D0 dword_4184D0    dd ?                    ; DATA XREF: sub_4021E0:loc_40251D↑r
.bss:004184D0                                         ; sub_4021E0+664↑o ...
.bss:004184D4                 db    ? ;
.bss:004184D5                 db    ? ;
.bss:004184D6                 db    ? ;
.bss:004184D7                 db    ? ;
.bss:004184D8                 db    ? ;
.bss:004184D9                 db    ? ;
.bss:004184DA                 db    ? ;
.bss:004184DB                 db    ? ;
.bss:004184DC                 db    ? ;
.bss:004184DD                 db    ? ;
.bss:004184DE                 db    ? ;
.bss:004184DF                 db    ? ;
.bss:004184E0                 db    ? ;
.bss:004184E1                 db    ? ;
.bss:004184E2                 db    ? ;
.bss:004184E3                 db    ? ;
.bss:004184E4                 db    ? ;
.bss:004184E5                 db    ? ;
.bss:004184E6                 db    ? ;
.bss:004184E7                 db    ? ;
.bss:004184E8                 db    ? ;
.bss:004184E9                 db    ? ;
.bss:004184EA                 db    ? ;
.bss:004184EB                 db    ? ;
.bss:004184EC                 db    ? ;
.bss:004184ED                 db    ? ;
.bss:004184EE                 db    ? ;
.bss:004184EF                 db    ? ;
.bss:004184F0 ; void *Block
.bss:004184F0 Block           dd ?                    ; DATA XREF: sub_403C20+4↑r
.bss:004184F0                                         ; sub_4049B0+5D9↑r ...
.bss:004184F4                 align 10h
.bss:00418500 dword_418500    dd ?                    ; DATA XREF: sub_409660+9↑o
.bss:00418500                                         ; sub_409660+17↑w ...
.bss:00418504 dword_418504    dd ?                    ; DATA XREF: sub_409660+21↑w
.bss:00418504                                         ; .text:00409719↑w
.bss:00418508 dword_418508    dd ?                    ; DATA XREF: sub_409660+77↑r
.bss:00418508                                         ; .text:00409767↑r
.bss:0041850C dword_41850C    dd ?                    ; DATA XREF: sub_409660+6B↑r
.bss:0041850C                                         ; .text:0040975B↑r
.bss:00418510                 db    ? ;
.bss:00418511                 db    ? ;
.bss:00418512                 db    ? ;
.bss:00418513                 db    ? ;
.bss:00418514                 db    ? ;
.bss:00418515                 db    ? ;
.bss:00418516                 db    ? ;
.bss:00418517                 db    ? ;
.bss:00418518                 db    ? ;
.bss:00418519                 db    ? ;
.bss:0041851A                 db    ? ;
.bss:0041851B                 db    ? ;
.bss:0041851C                 db    ? ;
.bss:0041851D                 db    ? ;
.bss:0041851E                 db    ? ;
.bss:0041851F                 db    ? ;
.bss:00418520                 db    ? ;
.bss:00418521                 db    ? ;
.bss:00418522                 db    ? ;
.bss:00418523                 db    ? ;
.bss:00418524                 db    ? ;
.bss:00418525                 db    ? ;
.bss:00418526                 db    ? ;
.bss:00418527                 db    ? ;
.bss:00418528                 db    ? ;
.bss:00418529                 db    ? ;
.bss:0041852A                 db    ? ;
.bss:0041852B                 db    ? ;
.bss:0041852C                 db    ? ;
.bss:0041852D                 db    ? ;
.bss:0041852E                 db    ? ;
.bss:0041852F                 db    ? ;
.bss:00418530 ; char *dword_418530
.bss:00418530 dword_418530    dd ?                    ; DATA XREF: .text:00409FC4↑w
.bss:00418530                                         ; sub_409FF0+58↑r
.bss:00418534                 align 10h
.bss:00418540 unk_418540      db    ? ;               ; DATA XREF: sub_40C840+100↑o
.bss:00418540                                         ; .data:off_4170E8↑o
.bss:00418541                 db    ? ;
.bss:00418542                 db    ? ;
.bss:00418543                 db    ? ;
.bss:00418544                 db    ? ;
.bss:00418545                 db    ? ;
.bss:00418546                 db    ? ;
.bss:00418547                 db    ? ;
.bss:00418548                 db    ? ;
.bss:00418549                 db    ? ;
.bss:0041854A                 db    ? ;
.bss:0041854B                 db    ? ;
.bss:0041854C                 db    ? ;
.bss:0041854D                 db    ? ;
.bss:0041854E                 db    ? ;
.bss:0041854F                 db    ? ;
.bss:00418550                 db    ? ;
.bss:00418551                 db    ? ;
.bss:00418552                 db    ? ;
.bss:00418553                 db    ? ;
.bss:00418554                 db    ? ;
.bss:00418555                 db    ? ;
.bss:00418556                 db    ? ;
.bss:00418557                 db    ? ;
.bss:00418558                 db    ? ;
.bss:00418559                 db    ? ;
.bss:0041855A                 db    ? ;
.bss:0041855B                 db    ? ;
.bss:0041855C                 db    ? ;
.bss:0041855D                 db    ? ;
.bss:0041855E                 db    ? ;
.bss:0041855F                 db    ? ;
.bss:00418560                 db    ? ;
.bss:00418561                 db    ? ;
.bss:00418562                 db    ? ;
.bss:00418563                 db    ? ;
.bss:00418564                 db    ? ;
.bss:00418565                 db    ? ;
.bss:00418566                 db    ? ;
.bss:00418567                 db    ? ;
.bss:00418568                 db    ? ;
.bss:00418569                 db    ? ;
.bss:0041856A                 db    ? ;
.bss:0041856B                 db    ? ;
.bss:0041856C                 db    ? ;
.bss:0041856D                 db    ? ;
.bss:0041856E                 db    ? ;
.bss:0041856F                 db    ? ;
.bss:00418570                 db    ? ;
.bss:00418571                 db    ? ;
.bss:00418572                 db    ? ;
.bss:00418573                 db    ? ;
.bss:00418574                 db    ? ;
.bss:00418575                 db    ? ;
.bss:00418576                 db    ? ;
.bss:00418577                 db    ? ;
.bss:00418578                 db    ? ;
.bss:00418579                 db    ? ;
.bss:0041857A                 db    ? ;
.bss:0041857B                 db    ? ;
.bss:0041857C                 db    ? ;
.bss:0041857D                 db    ? ;
.bss:0041857E                 db    ? ;
.bss:0041857F                 db    ? ;
.bss:00418580                 db    ? ;
.bss:00418581                 db    ? ;
.bss:00418582                 db    ? ;
.bss:00418583                 db    ? ;
.bss:00418584                 db    ? ;
.bss:00418585                 db    ? ;
.bss:00418586                 db    ? ;
.bss:00418587                 db    ? ;
.bss:00418588                 db    ? ;
.bss:00418589                 db    ? ;
.bss:0041858A                 db    ? ;
.bss:0041858B                 db    ? ;
.bss:0041858C                 db    ? ;
.bss:0041858D                 db    ? ;
.bss:0041858E                 db    ? ;
.bss:0041858F                 db    ? ;
.bss:00418590                 db    ? ;
.bss:00418591                 db    ? ;
.bss:00418592                 db    ? ;
.bss:00418593                 db    ? ;
.bss:00418594                 db    ? ;
.bss:00418595                 db    ? ;
.bss:00418596                 db    ? ;
.bss:00418597                 db    ? ;
.bss:00418598                 db    ? ;
.bss:00418599                 db    ? ;
.bss:0041859A                 db    ? ;
.bss:0041859B                 db    ? ;
.bss:0041859C                 db    ? ;
.bss:0041859D                 db    ? ;
.bss:0041859E                 db    ? ;
.bss:0041859F                 db    ? ;
.bss:004185A0                 db    ? ;
.bss:004185A1                 db    ? ;
.bss:004185A2                 db    ? ;
.bss:004185A3                 db    ? ;
.bss:004185A4                 db    ? ;
.bss:004185A5                 db    ? ;
.bss:004185A6                 db    ? ;
.bss:004185A7                 db    ? ;
.bss:004185A8                 db    ? ;
.bss:004185A9                 db    ? ;
.bss:004185AA                 db    ? ;
.bss:004185AB                 db    ? ;
.bss:004185AC                 db    ? ;
.bss:004185AD                 db    ? ;
.bss:004185AE                 db    ? ;
.bss:004185AF                 db    ? ;
.bss:004185B0                 db    ? ;
.bss:004185B1                 db    ? ;
.bss:004185B2                 db    ? ;
.bss:004185B3                 db    ? ;
.bss:004185B4                 db    ? ;
.bss:004185B5                 db    ? ;
.bss:004185B6                 db    ? ;
.bss:004185B7                 db    ? ;
.bss:004185B8                 db    ? ;
.bss:004185B9                 db    ? ;
.bss:004185BA                 db    ? ;
.bss:004185BB                 db    ? ;
.bss:004185BC                 db    ? ;
.bss:004185BD                 db    ? ;
.bss:004185BE                 db    ? ;
.bss:004185BF                 db    ? ;
.bss:004185C0                 db    ? ;
.bss:004185C1                 db    ? ;
.bss:004185C2                 db    ? ;
.bss:004185C3                 db    ? ;
.bss:004185C4                 db    ? ;
.bss:004185C5                 db    ? ;
.bss:004185C6                 db    ? ;
.bss:004185C7                 db    ? ;
.bss:004185C8                 db    ? ;
.bss:004185C9                 db    ? ;
.bss:004185CA                 db    ? ;
.bss:004185CB                 db    ? ;
.bss:004185CC                 db    ? ;
.bss:004185CD                 db    ? ;
.bss:004185CE                 db    ? ;
.bss:004185CF                 db    ? ;
.bss:004185D0                 db    ? ;
.bss:004185D1                 db    ? ;
.bss:004185D2                 db    ? ;
.bss:004185D3                 db    ? ;
.bss:004185D4                 db    ? ;
.bss:004185D5                 db    ? ;
.bss:004185D6                 db    ? ;
.bss:004185D7                 db    ? ;
.bss:004185D8                 db    ? ;
.bss:004185D9                 db    ? ;
.bss:004185DA                 db    ? ;
.bss:004185DB                 db    ? ;
.bss:004185DC                 db    ? ;
.bss:004185DD                 db    ? ;
.bss:004185DE                 db    ? ;
.bss:004185DF                 db    ? ;
.bss:004185E0                 db    ? ;
.bss:004185E1                 db    ? ;
.bss:004185E2                 db    ? ;
.bss:004185E3                 db    ? ;
.bss:004185E4                 db    ? ;
.bss:004185E5                 db    ? ;
.bss:004185E6                 db    ? ;
.bss:004185E7                 db    ? ;
.bss:004185E8                 db    ? ;
.bss:004185E9                 db    ? ;
.bss:004185EA                 db    ? ;
.bss:004185EB                 db    ? ;
.bss:004185EC                 db    ? ;
.bss:004185ED                 db    ? ;
.bss:004185EE                 db    ? ;
.bss:004185EF                 db    ? ;
.bss:004185F0                 db    ? ;
.bss:004185F1                 db    ? ;
.bss:004185F2                 db    ? ;
.bss:004185F3                 db    ? ;
.bss:004185F4                 db    ? ;
.bss:004185F5                 db    ? ;
.bss:004185F6                 db    ? ;
.bss:004185F7                 db    ? ;
.bss:004185F8                 db    ? ;
.bss:004185F9                 db    ? ;
.bss:004185FA                 db    ? ;
.bss:004185FB                 db    ? ;
.bss:004185FC                 db    ? ;
.bss:004185FD                 db    ? ;
.bss:004185FE                 db    ? ;
.bss:004185FF                 db    ? ;
.bss:00418600                 db    ? ;
.bss:00418601                 db    ? ;
.bss:00418602                 db    ? ;
.bss:00418603                 db    ? ;
.bss:00418604                 db    ? ;
.bss:00418605                 db    ? ;
.bss:00418606                 db    ? ;
.bss:00418607                 db    ? ;
.bss:00418608                 db    ? ;
.bss:00418609                 db    ? ;
.bss:0041860A                 db    ? ;
.bss:0041860B                 db    ? ;
.bss:0041860C                 db    ? ;
.bss:0041860D                 db    ? ;
.bss:0041860E                 db    ? ;
.bss:0041860F                 db    ? ;
.bss:00418610                 db    ? ;
.bss:00418611                 db    ? ;
.bss:00418612                 db    ? ;
.bss:00418613                 db    ? ;
.bss:00418614                 db    ? ;
.bss:00418615                 db    ? ;
.bss:00418616                 db    ? ;
.bss:00418617                 db    ? ;
.bss:00418618                 db    ? ;
.bss:00418619                 db    ? ;
.bss:0041861A                 db    ? ;
.bss:0041861B                 db    ? ;
.bss:0041861C                 db    ? ;
.bss:0041861D                 db    ? ;
.bss:0041861E                 db    ? ;
.bss:0041861F                 db    ? ;
.bss:00418620                 db    ? ;
.bss:00418621                 db    ? ;
.bss:00418622                 db    ? ;
.bss:00418623                 db    ? ;
.bss:00418624                 db    ? ;
.bss:00418625                 db    ? ;
.bss:00418626                 db    ? ;
.bss:00418627                 db    ? ;
.bss:00418628                 db    ? ;
.bss:00418629                 db    ? ;
.bss:0041862A                 db    ? ;
.bss:0041862B                 db    ? ;
.bss:0041862C                 db    ? ;
.bss:0041862D                 db    ? ;
.bss:0041862E                 db    ? ;
.bss:0041862F                 db    ? ;
.bss:00418630                 db    ? ;
.bss:00418631                 db    ? ;
.bss:00418632                 db    ? ;
.bss:00418633                 db    ? ;
.bss:00418634                 db    ? ;
.bss:00418635                 db    ? ;
.bss:00418636                 db    ? ;
.bss:00418637                 db    ? ;
.bss:00418638                 db    ? ;
.bss:00418639                 db    ? ;
.bss:0041863A                 db    ? ;
.bss:0041863B                 db    ? ;
.bss:0041863C                 db    ? ;
.bss:0041863D                 db    ? ;
.bss:0041863E                 db    ? ;
.bss:0041863F                 db    ? ;
.bss:00418640 dword_418640    dd ?                    ; DATA XREF: .text:loc_40C1D1↑o
.bss:00418640                                         ; .text:loc_40C1F0↑o ...
.bss:00418644 dword_418644    dd ?                    ; DATA XREF: .text:loc_40C270↑o
.bss:00418644                                         ; .text:0040C6F8↑r ...
.bss:00418648 dword_418648    dd ?                    ; DATA XREF: .text:0040C6F2↑r
.bss:00418648                                         ; sub_40C7A0+2C↑r
.bss:0041864C dword_41864C    dd ?                    ; DATA XREF: .text:0040C6E6↑r
.bss:0041864C                                         ; sub_40C7A0+22↑r
.bss:00418650 dword_418650    dd ?                    ; DATA XREF: .text:0040C702↑r
.bss:00418650                                         ; sub_40C7A0+36↑r
.bss:00418654 dword_418654    dd ?                    ; DATA XREF: .text:0040C712↑r
.bss:00418654                                         ; sub_40C7A0+4E↑r
.bss:00418658 dword_418658    dd ?                    ; DATA XREF: .text:0040C72F↑r
.bss:00418658                                         ; sub_40C7A0+62↑r
.bss:0041865C dword_41865C    dd ?                    ; DATA XREF: .text:0040C725↑r
.bss:0041865C                                         ; sub_40C7A0+70↑r
.bss:00418660 dword_418660    dd ?                    ; DATA XREF: .text:0040C708↑r
.bss:00418660                                         ; sub_40C7A0+7A↑r
.bss:00418664                 align 10h
.bss:00418670 ; char *Str1
.bss:00418670 Str1            dd ?                    ; DATA XREF: sub_40CC64:loc_40CC9D↑w
.bss:00418670                                         ; sub_40CC64:loc_40CDD0↑r
.bss:00418674                 align 10h
.bss:00418680 dword_418680    dd ?                    ; DATA XREF: sub_40CC64+2D↑r
.bss:00418680                                         ; sub_40CC64+3F↑w
.bss:00418684                 align 10h
.bss:00418690 dword_418690    dd ?                    ; DATA XREF: sub_40D920+100↑r
.bss:00418690                                         ; sub_40D920+308↑w
.bss:00418694                 align 10h
.bss:004186A0 ; char *Str
.bss:004186A0 Str             dd ?                    ; DATA XREF: sub_40D920:loc_40DC84↑r
.bss:004186A0                                         ; sub_40D920+3B6↑r ...
.bss:004186A4                 align 10h
.bss:004186B0 dword_4186B0    dd ?                    ; DATA XREF: sub_40F5F0+1C↑r
.bss:004186B0                                         ; sub_40F5F0+104↑w
.bss:004186B4                 align 10h
.bss:004186C0 dword_4186C0    dd ?                    ; DATA XREF: sub_40F5F0+B↑r
.bss:004186C0                                         ; sub_40F5F0+71↑w
.bss:004186C4                 align 10h
.bss:004186D0 dword_4186D0    dd ?                    ; DATA XREF: sub_40F5F0+85↑r
.bss:004186D0                                         ; sub_40F5F0+B9↑w
.bss:004186D4 dword_4186D4    dd ?                    ; DATA XREF: sub_40F5F0+C4↑w
.bss:004186D8 dword_4186D8    dd ?                    ; DATA XREF: sub_40F5F0+2E↑o
.bss:004186D8                                         ; sub_40F5F0+CF↑w
.bss:004186DC dword_4186DC    dd ?                    ; DATA XREF: sub_40F5F0+DA↑w
.bss:004186E0                 db    ? ;
.bss:004186E1                 db    ? ;
.bss:004186E2                 db    ? ;
.bss:004186E3                 db    ? ;
.bss:004186E4                 db    ? ;
.bss:004186E5                 db    ? ;
.bss:004186E6                 db    ? ;
.bss:004186E7                 db    ? ;
.bss:004186E8                 db    ? ;
.bss:004186E9                 db    ? ;
.bss:004186EA                 db    ? ;
.bss:004186EB                 db    ? ;
.bss:004186EC                 db    ? ;
.bss:004186ED                 db    ? ;
.bss:004186EE                 db    ? ;
.bss:004186EF                 db    ? ;
.bss:004186F0                 db    ? ;
.bss:004186F1                 db    ? ;
.bss:004186F2                 db    ? ;
.bss:004186F3                 db    ? ;
.bss:004186F4                 db    ? ;
.bss:004186F5                 db    ? ;
.bss:004186F6                 db    ? ;
.bss:004186F7                 db    ? ;
.bss:004186F8                 db    ? ;
.bss:004186F9                 db    ? ;
.bss:004186FA                 db    ? ;
.bss:004186FB                 db    ? ;
.bss:004186FC                 db    ? ;
.bss:004186FD                 db    ? ;
.bss:004186FE                 db    ? ;
.bss:004186FF                 db    ? ;
.bss:00418700                 db    ? ;
.bss:00418701                 db    ? ;
.bss:00418702                 db    ? ;
.bss:00418703                 db    ? ;
.bss:00418704                 db    ? ;
.bss:00418705                 db    ? ;
.bss:00418706                 db    ? ;
.bss:00418707                 db    ? ;
.bss:00418708                 db    ? ;
.bss:00418709                 db    ? ;
.bss:0041870A                 db    ? ;
.bss:0041870B                 db    ? ;
.bss:0041870C                 db    ? ;
.bss:0041870D                 db    ? ;
.bss:0041870E                 db    ? ;
.bss:0041870F                 db    ? ;
.bss:00418710                 db    ? ;
.bss:00418711                 db    ? ;
.bss:00418712                 db    ? ;
.bss:00418713                 db    ? ;
.bss:00418714                 db    ? ;
.bss:00418715                 db    ? ;
.bss:00418716                 db    ? ;
.bss:00418717                 db    ? ;
.bss:00418718                 db    ? ;
.bss:00418719                 db    ? ;
.bss:0041871A                 db    ? ;
.bss:0041871B                 db    ? ;
.bss:0041871C                 db    ? ;
.bss:0041871D                 db    ? ;
.bss:0041871E                 db    ? ;
.bss:0041871F                 db    ? ;
.bss:00418720                 db    ? ;
.bss:00418721                 db    ? ;
.bss:00418722                 db    ? ;
.bss:00418723                 db    ? ;
.bss:00418724                 db    ? ;
.bss:00418725                 db    ? ;
.bss:00418726                 db    ? ;
.bss:00418727                 db    ? ;
.bss:00418728                 db    ? ;
.bss:00418729                 db    ? ;
.bss:0041872A                 db    ? ;
.bss:0041872B                 db    ? ;
.bss:0041872C                 db    ? ;
.bss:0041872D                 db    ? ;
.bss:0041872E                 db    ? ;
.bss:0041872F                 db    ? ;
.bss:00418730                 db    ? ;
.bss:00418731                 db    ? ;
.bss:00418732                 db    ? ;
.bss:00418733                 db    ? ;
.bss:00418734                 db    ? ;
.bss:00418735                 db    ? ;
.bss:00418736                 db    ? ;
.bss:00418737                 db    ? ;
.bss:00418738                 db    ? ;
.bss:00418739                 db    ? ;
.bss:0041873A                 db    ? ;
.bss:0041873B                 db    ? ;
.bss:0041873C                 db    ? ;
.bss:0041873D                 db    ? ;
.bss:0041873E                 db    ? ;
.bss:0041873F                 db    ? ;
.bss:00418740                 db    ? ;
.bss:00418741                 db    ? ;
.bss:00418742                 db    ? ;
.bss:00418743                 db    ? ;
.bss:00418744                 db    ? ;
.bss:00418745                 db    ? ;
.bss:00418746                 db    ? ;
.bss:00418747                 db    ? ;
.bss:00418748                 db    ? ;
.bss:00418749                 db    ? ;
.bss:0041874A                 db    ? ;
.bss:0041874B                 db    ? ;
.bss:0041874C                 db    ? ;
.bss:0041874D                 db    ? ;
.bss:0041874E                 db    ? ;
.bss:0041874F                 db    ? ;
.bss:00418750                 db    ? ;
.bss:00418751                 db    ? ;
.bss:00418752                 db    ? ;
.bss:00418753                 db    ? ;
.bss:00418754                 db    ? ;
.bss:00418755                 db    ? ;
.bss:00418756                 db    ? ;
.bss:00418757                 db    ? ;
.bss:00418758                 db    ? ;
.bss:00418759                 db    ? ;
.bss:0041875A                 db    ? ;
.bss:0041875B                 db    ? ;
.bss:0041875C                 db    ? ;
.bss:0041875D                 db    ? ;
.bss:0041875E                 db    ? ;
.bss:0041875F                 db    ? ;
.bss:00418760                 db    ? ;
.bss:00418761                 db    ? ;
.bss:00418762                 db    ? ;
.bss:00418763                 db    ? ;
.bss:00418764                 db    ? ;
.bss:00418765                 db    ? ;
.bss:00418766                 db    ? ;
.bss:00418767                 db    ? ;
.bss:00418768                 db    ? ;
.bss:00418769                 db    ? ;
.bss:0041876A                 db    ? ;
.bss:0041876B                 db    ? ;
.bss:0041876C                 db    ? ;
.bss:0041876D                 db    ? ;
.bss:0041876E                 db    ? ;
.bss:0041876F                 db    ? ;
.bss:00418770                 db    ? ;
.bss:00418771                 db    ? ;
.bss:00418772                 db    ? ;
.bss:00418773                 db    ? ;
.bss:00418774                 db    ? ;
.bss:00418775                 db    ? ;
.bss:00418776                 db    ? ;
.bss:00418777                 db    ? ;
.bss:00418778                 db    ? ;
.bss:00418779                 db    ? ;
.bss:0041877A                 db    ? ;
.bss:0041877B                 db    ? ;
.bss:0041877C                 db    ? ;
.bss:0041877D                 db    ? ;
.bss:0041877E                 db    ? ;
.bss:0041877F                 db    ? ;
.bss:00418780                 db    ? ;
.bss:00418781                 db    ? ;
.bss:00418782                 db    ? ;
.bss:00418783                 db    ? ;
.bss:00418784                 db    ? ;
.bss:00418785                 db    ? ;
.bss:00418786                 db    ? ;
.bss:00418787                 db    ? ;
.bss:00418788                 db    ? ;
.bss:00418789                 db    ? ;
.bss:0041878A                 db    ? ;
.bss:0041878B                 db    ? ;
.bss:0041878C                 db    ? ;
.bss:0041878D                 db    ? ;
.bss:0041878E                 db    ? ;
.bss:0041878F                 db    ? ;
.bss:00418790                 db    ? ;
.bss:00418791                 db    ? ;
.bss:00418792                 db    ? ;
.bss:00418793                 db    ? ;
.bss:00418794                 db    ? ;
.bss:00418795                 db    ? ;
.bss:00418796                 db    ? ;
.bss:00418797                 db    ? ;
.bss:00418798                 db    ? ;
.bss:00418799                 db    ? ;
.bss:0041879A                 db    ? ;
.bss:0041879B                 db    ? ;
.bss:0041879C                 db    ? ;
.bss:0041879D                 db    ? ;
.bss:0041879E                 db    ? ;
.bss:0041879F                 db    ? ;
.bss:004187A0                 db    ? ;
.bss:004187A1                 db    ? ;
.bss:004187A2                 db    ? ;
.bss:004187A3                 db    ? ;
.bss:004187A4                 db    ? ;
.bss:004187A5                 db    ? ;
.bss:004187A6                 db    ? ;
.bss:004187A7                 db    ? ;
.bss:004187A8                 db    ? ;
.bss:004187A9                 db    ? ;
.bss:004187AA                 db    ? ;
.bss:004187AB                 db    ? ;
.bss:004187AC                 db    ? ;
.bss:004187AD                 db    ? ;
.bss:004187AE                 db    ? ;
.bss:004187AF                 db    ? ;
.bss:004187B0                 db    ? ;
.bss:004187B1                 db    ? ;
.bss:004187B2                 db    ? ;
.bss:004187B3                 db    ? ;
.bss:004187B4                 db    ? ;
.bss:004187B5                 db    ? ;
.bss:004187B6                 db    ? ;
.bss:004187B7                 db    ? ;
.bss:004187B8                 db    ? ;
.bss:004187B9                 db    ? ;
.bss:004187BA                 db    ? ;
.bss:004187BB                 db    ? ;
.bss:004187BC                 db    ? ;
.bss:004187BD                 db    ? ;
.bss:004187BE                 db    ? ;
.bss:004187BF                 db    ? ;
.bss:004187C0                 db    ? ;
.bss:004187C1                 db    ? ;
.bss:004187C2                 db    ? ;
.bss:004187C3                 db    ? ;
.bss:004187C4                 db    ? ;
.bss:004187C5                 db    ? ;
.bss:004187C6                 db    ? ;
.bss:004187C7                 db    ? ;
.bss:004187C8                 db    ? ;
.bss:004187C9                 db    ? ;
.bss:004187CA                 db    ? ;
.bss:004187CB                 db    ? ;
.bss:004187CC                 db    ? ;
.bss:004187CD                 db    ? ;
.bss:004187CE                 db    ? ;
.bss:004187CF                 db    ? ;
.bss:004187D0                 db    ? ;
.bss:004187D1                 db    ? ;
.bss:004187D2                 db    ? ;
.bss:004187D3                 db    ? ;
.bss:004187D4                 db    ? ;
.bss:004187D5                 db    ? ;
.bss:004187D6                 db    ? ;
.bss:004187D7                 db    ? ;
.bss:004187D8                 db    ? ;
.bss:004187D9                 db    ? ;
.bss:004187DA                 db    ? ;
.bss:004187DB                 db    ? ;
.bss:004187DC                 db    ? ;
.bss:004187DD                 db    ? ;
.bss:004187DE                 db    ? ;
.bss:004187DF                 db    ? ;
.bss:004187E0                 db    ? ;
.bss:004187E1                 db    ? ;
.bss:004187E2                 db    ? ;
.bss:004187E3                 db    ? ;
.bss:004187E4                 db    ? ;
.bss:004187E5                 db    ? ;
.bss:004187E6                 db    ? ;
.bss:004187E7                 db    ? ;
.bss:004187E8                 db    ? ;
.bss:004187E9                 db    ? ;
.bss:004187EA                 db    ? ;
.bss:004187EB                 db    ? ;
.bss:004187EC                 db    ? ;
.bss:004187ED                 db    ? ;
.bss:004187EE                 db    ? ;
.bss:004187EF                 db    ? ;
.bss:004187F0                 db    ? ;
.bss:004187F1                 db    ? ;
.bss:004187F2                 db    ? ;
.bss:004187F3                 db    ? ;
.bss:004187F4                 db    ? ;
.bss:004187F5                 db    ? ;
.bss:004187F6                 db    ? ;
.bss:004187F7                 db    ? ;
.bss:004187F8                 db    ? ;
.bss:004187F9                 db    ? ;
.bss:004187FA                 db    ? ;
.bss:004187FB                 db    ? ;
.bss:004187FC                 db    ? ;
.bss:004187FD                 db    ? ;
.bss:004187FE                 db    ? ;
.bss:004187FF                 db    ? ;
.bss:00418800                 db    ? ;
.bss:00418801                 db    ? ;
.bss:00418802                 db    ? ;
.bss:00418803                 db    ? ;
.bss:00418804                 db    ? ;
.bss:00418805                 db    ? ;
.bss:00418806                 db    ? ;
.bss:00418807                 db    ? ;
.bss:00418808                 db    ? ;
.bss:00418809                 db    ? ;
.bss:0041880A                 db    ? ;
.bss:0041880B                 db    ? ;
.bss:0041880C                 db    ? ;
.bss:0041880D                 db    ? ;
.bss:0041880E                 db    ? ;
.bss:0041880F                 db    ? ;
.bss:00418810                 db    ? ;
.bss:00418811                 db    ? ;
.bss:00418812                 db    ? ;
.bss:00418813                 db    ? ;
.bss:00418814                 db    ? ;
.bss:00418815                 db    ? ;
.bss:00418816                 db    ? ;
.bss:00418817                 db    ? ;
.bss:00418818                 db    ? ;
.bss:00418819                 db    ? ;
.bss:0041881A                 db    ? ;
.bss:0041881B                 db    ? ;
.bss:0041881C                 db    ? ;
.bss:0041881D                 db    ? ;
.bss:0041881E                 db    ? ;
.bss:0041881F                 db    ? ;
.bss:00418820                 db    ? ;
.bss:00418821                 db    ? ;
.bss:00418822                 db    ? ;
.bss:00418823                 db    ? ;
.bss:00418824                 db    ? ;
.bss:00418825                 db    ? ;
.bss:00418826                 db    ? ;
.bss:00418827                 db    ? ;
.bss:00418828                 db    ? ;
.bss:00418829                 db    ? ;
.bss:0041882A                 db    ? ;
.bss:0041882B                 db    ? ;
.bss:0041882C                 db    ? ;
.bss:0041882D                 db    ? ;
.bss:0041882E                 db    ? ;
.bss:0041882F                 db    ? ;
.bss:00418830                 db    ? ;
.bss:00418831                 db    ? ;
.bss:00418832                 db    ? ;
.bss:00418833                 db    ? ;
.bss:00418834                 db    ? ;
.bss:00418835                 db    ? ;
.bss:00418836                 db    ? ;
.bss:00418837                 db    ? ;
.bss:00418838                 db    ? ;
.bss:00418839                 db    ? ;
.bss:0041883A                 db    ? ;
.bss:0041883B                 db    ? ;
.bss:0041883C                 db    ? ;
.bss:0041883D                 db    ? ;
.bss:0041883E                 db    ? ;
.bss:0041883F                 db    ? ;
.bss:00418840                 db    ? ;
.bss:00418841                 db    ? ;
.bss:00418842                 db    ? ;
.bss:00418843                 db    ? ;
.bss:00418844                 db    ? ;
.bss:00418845                 db    ? ;
.bss:00418846                 db    ? ;
.bss:00418847                 db    ? ;
.bss:00418848                 db    ? ;
.bss:00418849                 db    ? ;
.bss:0041884A                 db    ? ;
.bss:0041884B                 db    ? ;
.bss:0041884C                 db    ? ;
.bss:0041884D                 db    ? ;
.bss:0041884E                 db    ? ;
.bss:0041884F                 db    ? ;
.bss:00418850                 db    ? ;
.bss:00418851                 db    ? ;
.bss:00418852                 db    ? ;
.bss:00418853                 db    ? ;
.bss:00418854                 db    ? ;
.bss:00418855                 db    ? ;
.bss:00418856                 db    ? ;
.bss:00418857                 db    ? ;
.bss:00418858                 db    ? ;
.bss:00418859                 db    ? ;
.bss:0041885A                 db    ? ;
.bss:0041885B                 db    ? ;
.bss:0041885C                 db    ? ;
.bss:0041885D                 db    ? ;
.bss:0041885E                 db    ? ;
.bss:0041885F                 db    ? ;
.bss:00418860                 db    ? ;
.bss:00418861                 db    ? ;
.bss:00418862                 db    ? ;
.bss:00418863                 db    ? ;
.bss:00418864                 db    ? ;
.bss:00418865                 db    ? ;
.bss:00418866                 db    ? ;
.bss:00418867                 db    ? ;
.bss:00418868                 db    ? ;
.bss:00418869                 db    ? ;
.bss:0041886A                 db    ? ;
.bss:0041886B                 db    ? ;
.bss:0041886C                 db    ? ;
.bss:0041886D                 db    ? ;
.bss:0041886E                 db    ? ;
.bss:0041886F                 db    ? ;
.bss:00418870                 db    ? ;
.bss:00418871                 db    ? ;
.bss:00418872                 db    ? ;
.bss:00418873                 db    ? ;
.bss:00418874                 db    ? ;
.bss:00418875                 db    ? ;
.bss:00418876                 db    ? ;
.bss:00418877                 db    ? ;
.bss:00418878                 db    ? ;
.bss:00418879                 db    ? ;
.bss:0041887A                 db    ? ;
.bss:0041887B                 db    ? ;
.bss:0041887C                 db    ? ;
.bss:0041887D                 db    ? ;
.bss:0041887E                 db    ? ;
.bss:0041887F                 db    ? ;
.bss:00418880                 db    ? ;
.bss:00418881                 db    ? ;
.bss:00418882                 db    ? ;
.bss:00418883                 db    ? ;
.bss:00418884                 db    ? ;
.bss:00418885                 db    ? ;
.bss:00418886                 db    ? ;
.bss:00418887                 db    ? ;
.bss:00418888                 db    ? ;
.bss:00418889                 db    ? ;
.bss:0041888A                 db    ? ;
.bss:0041888B                 db    ? ;
.bss:0041888C                 db    ? ;
.bss:0041888D                 db    ? ;
.bss:0041888E                 db    ? ;
.bss:0041888F                 db    ? ;
.bss:00418890                 db    ? ;
.bss:00418891                 db    ? ;
.bss:00418892                 db    ? ;
.bss:00418893                 db    ? ;
.bss:00418894                 db    ? ;
.bss:00418895                 db    ? ;
.bss:00418896                 db    ? ;
.bss:00418897                 db    ? ;
.bss:00418898                 db    ? ;
.bss:00418899                 db    ? ;
.bss:0041889A                 db    ? ;
.bss:0041889B                 db    ? ;
.bss:0041889C                 db    ? ;
.bss:0041889D                 db    ? ;
.bss:0041889E                 db    ? ;
.bss:0041889F                 db    ? ;
.bss:004188A0                 db    ? ;
.bss:004188A1                 db    ? ;
.bss:004188A2                 db    ? ;
.bss:004188A3                 db    ? ;
.bss:004188A4                 db    ? ;
.bss:004188A5                 db    ? ;
.bss:004188A6                 db    ? ;
.bss:004188A7                 db    ? ;
.bss:004188A8                 db    ? ;
.bss:004188A9                 db    ? ;
.bss:004188AA                 db    ? ;
.bss:004188AB                 db    ? ;
.bss:004188AC                 db    ? ;
.bss:004188AD                 db    ? ;
.bss:004188AE                 db    ? ;
.bss:004188AF                 db    ? ;
.bss:004188B0                 db    ? ;
.bss:004188B1                 db    ? ;
.bss:004188B2                 db    ? ;
.bss:004188B3                 db    ? ;
.bss:004188B4                 db    ? ;
.bss:004188B5                 db    ? ;
.bss:004188B6                 db    ? ;
.bss:004188B7                 db    ? ;
.bss:004188B8                 db    ? ;
.bss:004188B9                 db    ? ;
.bss:004188BA                 db    ? ;
.bss:004188BB                 db    ? ;
.bss:004188BC                 db    ? ;
.bss:004188BD                 db    ? ;
.bss:004188BE                 db    ? ;
.bss:004188BF                 db    ? ;
.bss:004188C0                 db    ? ;
.bss:004188C1                 db    ? ;
.bss:004188C2                 db    ? ;
.bss:004188C3                 db    ? ;
.bss:004188C4                 db    ? ;
.bss:004188C5                 db    ? ;
.bss:004188C6                 db    ? ;
.bss:004188C7                 db    ? ;
.bss:004188C8                 db    ? ;
.bss:004188C9                 db    ? ;
.bss:004188CA                 db    ? ;
.bss:004188CB                 db    ? ;
.bss:004188CC                 db    ? ;
.bss:004188CD                 db    ? ;
.bss:004188CE                 db    ? ;
.bss:004188CF                 db    ? ;
.bss:004188D0 dword_4188D0    dd ?                    ; DATA XREF: sub_4116C0+8↑r
.bss:004188D0                                         ; sub_4117D0:loc_411852↑w ...
.bss:004188D4                 align 10h
.bss:004188E0 ; struct _OSVERSIONINFOA VersionInformation
.bss:004188E0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_4117D0:loc_4117F0↑o
.bss:004188E0                                         ; sub_4117D0+2C↑w ...
.bss:00418974 word_418974     dw ?                    ; DATA XREF: sub_4117D0:loc_411883↑r
.bss:00418976                 align 4
.bss:00418978 word_418978     dw ?                    ; DATA XREF: .text:loc_411246↑r
.bss:00418978                                         ; .text:00411274↑r ...
.bss:0041897A byte_41897A     db ?                    ; DATA XREF: .text:00411205↑r
.bss:0041897B                 align 10h
.bss:00418980 dword_418980    dd ?                    ; DATA XREF: sub_4117D0+6↑r
.bss:00418980                                         ; sub_4117D0+75↑w
.bss:00418984                 align 10h
.bss:00418990 dword_418990    dd ?                    ; DATA XREF: sub_412D90+6E↑r
.bss:00418990                                         ; sub_412D90+9A↑r ...
.bss:00418994 dword_418994    dd ?                    ; DATA XREF: sub_412D90:loc_412DF8↑r
.bss:00418994                                         ; sub_412D90+A0↑r ...
.bss:00418998                 align 10h
.bss:004189A0 dword_4189A0    dd ?                    ; DATA XREF: sub_4131C0+7↑r
.bss:004189A0                                         ; sub_4131C0+2B↑w ...
.bss:004189A4                 align 10h
.bss:004189B0 ; struct _SYSTEM_INFO SystemInfo
.bss:004189B0 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_4131C0+21↑o
.bss:004189B0                                         ; sub_4131C0+33↑o ...
.bss:004189D4                 align 10h
.bss:004189E0 dword_4189E0    dd ?                    ; DATA XREF: sub_4135D0↑r
.bss:004189E0                                         ; .text:loc_413702↑w
.bss:004189E4                 align 10h
.bss:004189F0 dword_4189F0    dd ?                    ; DATA XREF: sub_4021E0+A3↑w
.bss:004189F0                                         ; sub_4021E0+491↑r ...
.bss:004189F4                 db    ? ;
.bss:004189F5                 db    ? ;
.bss:004189F6                 db    ? ;
.bss:004189F7                 db    ? ;
.bss:004189F8                 db    ? ;
.bss:004189F9                 db    ? ;
.bss:004189FA                 db    ? ;
.bss:004189FB                 db    ? ;
.bss:004189FC                 db    ? ;
.bss:004189FD                 db    ? ;
.bss:004189FE                 db    ? ;
.bss:004189FF                 db    ? ;
.bss:00418A00                 db    ? ;
.bss:00418A01                 db    ? ;
.bss:00418A02                 db    ? ;
.bss:00418A03                 db    ? ;
.bss:00418A04                 db    ? ;
.bss:00418A05                 db    ? ;
.bss:00418A06                 db    ? ;
.bss:00418A07                 db    ? ;
.bss:00418A08                 db    ? ;
.bss:00418A09                 db    ? ;
.bss:00418A0A                 db    ? ;
.bss:00418A0B                 db    ? ;
.bss:00418A0C                 db    ? ;
.bss:00418A0D                 db    ? ;
.bss:00418A0E                 db    ? ;
.bss:00418A0F                 db    ? ;
.bss:00418A10 ; char *Str2
.bss:00418A10 Str2            dd ?                    ; DATA XREF: sub_4021E0+7A3↑r
.bss:00418A10                                         ; sub_4021E0:loc_40298E↑r ...
.bss:00418A14                 align 10h
.bss:00418A20 dword_418A20    dd ?                    ; CODE XREF: sub_40CC64+63↑p
.bss:00418A20                                         ; DATA XREF: sub_40CB60+1E↑r ...
.bss:00418A24                 align 10h
.bss:00418A30 dword_418A30    dd ?                    ; DATA XREF: sub_40CB60+4E↑w
.bss:00418A30                                         ; sub_40CC64+AB↑w
.bss:00418A34                 db    ? ;
.bss:00418A35                 db    ? ;
.bss:00418A36                 db    ? ;
.bss:00418A37                 db    ? ;
.bss:00418A38                 db    ? ;
.bss:00418A39                 db    ? ;
.bss:00418A3A                 db    ? ;
.bss:00418A3B                 db    ? ;
.bss:00418A3C                 db    ? ;
.bss:00418A3D                 db    ? ;
.bss:00418A3E                 db    ? ;
.bss:00418A3F                 db    ? ;
.bss:00418A40                 db    ? ;
.bss:00418A41                 db    ? ;
.bss:00418A42                 db    ? ;
.bss:00418A43                 db    ? ;
.bss:00418A44                 db    ? ;
.bss:00418A45                 db    ? ;
.bss:00418A46                 db    ? ;
.bss:00418A47                 db    ? ;
.bss:00418A48                 db    ? ;
.bss:00418A49                 db    ? ;
.bss:00418A4A                 db    ? ;
.bss:00418A4B                 db    ? ;
.bss:00418A4C                 db    ? ;
.bss:00418A4D                 db    ? ;
.bss:00418A4E                 db    ? ;
.bss:00418A4F                 db    ? ;
.bss:00418A50                 db    ? ;
.bss:00418A51                 db    ? ;
.bss:00418A52                 db    ? ;
.bss:00418A53                 db    ? ;
.bss:00418A54                 db    ? ;
.bss:00418A55                 db    ? ;
.bss:00418A56                 db    ? ;
.bss:00418A57                 db    ? ;
.bss:00418A58                 db    ? ;
.bss:00418A59                 db    ? ;
.bss:00418A5A                 db    ? ;
.bss:00418A5B                 db    ? ;
.bss:00418A5C                 db    ? ;
.bss:00418A5D                 db    ? ;
.bss:00418A5E                 db    ? ;
.bss:00418A5F                 db    ? ;
.bss:00418A60 dword_418A60    dd ?                    ; DATA XREF: sub_40CC64+13↑r
.bss:00418A64                 align 10h
.bss:00418A70 dword_418A70    dd ?                    ; DATA XREF: sub_413320+A↑w
.bss:00418A74                 align 800h
.bss:00418A74 _bss            ends
.bss:00418A74
.idata:00419000 ; Section 4. (virtual address 00019000)
.idata:00419000 ; Virtual size                  : 00000F34 (   3892.)
.idata:00419000 ; Section size in file          : 00001000 (   4096.)
.idata:00419000 ; Offset to raw data for section: 00015800
.idata:00419000 ; Flags C0000040: Data Readable Writable
.idata:00419000 ; Alignment     : default
.idata:00419000 ; ===========================================================================
.idata:00419000
.idata:00419000 ; Segment type: Externs
.idata:00419000 ; _idata
.idata:00419000
.idata:00419001
.idata:004192E8 ;
.idata:004192E8 ; Imports from libintl3.dll
.idata:004192E8 ;
.idata:004192E8                 extrn libintl_bindtextdomain:dword
.idata:004192E8                                         ; CODE XREF: sub_4021E0+BD↑p
.idata:004192E8                                         ; DATA XREF: sub_4021E0+BD↑r ...
.idata:004192EC                 extrn libintl_gettext:dword
.idata:004192EC                                         ; CODE XREF: sub_4021E0+45C↑p
.idata:004192EC                                         ; sub_4021E0+485↑p ...
.idata:004192F0                 extrn libintl_textdomain:dword
.idata:004192F0                                         ; CODE XREF: sub_4021E0+CA↑p
.idata:004192F0                                         ; DATA XREF: sub_4021E0+CA↑r ...
.idata:004192F4
.idata:004192FC ;
.idata:004192FC ; Imports from ADVAPI32.DLL
.idata:004192FC ;
.idata:004192FC ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004192FC                 extrn __imp_RegCloseKey:dword
.idata:004192FC                                         ; DATA XREF: RegCloseKey↑r
.idata:00419300 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:00419300                 extrn __imp_RegOpenKeyExA:dword
.idata:00419300                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:00419304 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:00419304                 extrn __imp_RegQueryValueExA:dword
.idata:00419304                                         ; DATA XREF: RegQueryValueExA↑r
.idata:00419308
.idata:00419310 ;
.idata:00419310 ; Imports from KERNEL32.dll
.idata:00419310 ;
.idata:00419310 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:00419310                 extrn __imp_AreFileApisANSI:dword
.idata:00419310                                         ; DATA XREF: AreFileApisANSI↑r
.idata:00419314 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:00419314                 extrn __imp_CloseHandle:dword
.idata:00419314                                         ; DATA XREF: CloseHandle↑r
.idata:00419318 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:00419318                 extrn __imp_CreateDirectoryA:dword
.idata:00419318                                         ; DATA XREF: CreateDirectoryA↑r
.idata:0041931C ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:0041931C                 extrn __imp_CreateFileA:dword
.idata:0041931C                                         ; DATA XREF: CreateFileA↑r
.idata:00419320 ; BOOL (__stdcall *DeleteFileA)(LPCSTR lpFileName)
.idata:00419320                 extrn __imp_DeleteFileA:dword
.idata:00419320                                         ; DATA XREF: DeleteFileA↑r
.idata:00419324 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:00419324                 extrn __imp_DeviceIoControl:dword
.idata:00419324                                         ; DATA XREF: DeviceIoControl↑r
.idata:00419328 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00419328                 extrn __imp_ExitProcess:dword
.idata:00419328                                         ; DATA XREF: ExitProcess↑r
.idata:0041932C ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:0041932C                 extrn __imp_FindClose:dword
.idata:0041932C                                         ; DATA XREF: FindClose↑r
.idata:00419330 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00419330                 extrn __imp_FindFirstFileA:dword
.idata:00419330                                         ; DATA XREF: FindFirstFileA↑r
.idata:00419334 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00419334                 extrn __imp_FindNextFileA:dword
.idata:00419334                                         ; DATA XREF: FindNextFileA↑r
.idata:00419338 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00419338                 extrn __imp_FreeLibrary:dword
.idata:00419338                                         ; DATA XREF: FreeLibrary↑r
.idata:0041933C ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041933C                 extrn __imp_GetCurrentDirectoryA:dword
.idata:0041933C                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00419340 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00419340                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00419340                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00419344 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00419344                 extrn __imp_GetDriveTypeA:dword
.idata:00419344                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00419348 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00419348                 extrn __imp_GetFileAttributesA:dword
.idata:00419348                                         ; DATA XREF: GetFileAttributesA↑r
.idata:0041934C ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:0041934C                 extrn __imp_GetFileInformationByHandle:dword
.idata:0041934C                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00419350 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00419350                 extrn __imp_GetFileSize:dword
.idata:00419350                                         ; DATA XREF: GetFileSize↑r
.idata:00419354 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00419354                 extrn __imp_GetFileType:dword
.idata:00419354                                         ; DATA XREF: GetFileType↑r
.idata:00419358 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00419358                 extrn __imp_GetFullPathNameA:dword
.idata:00419358                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0041935C ; DWORD (__stdcall *GetLastError)()
.idata:0041935C                 extrn __imp_GetLastError:dword
.idata:0041935C                                         ; DATA XREF: GetLastError↑r
.idata:00419360 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00419360                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00419360                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00419364 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00419364                 extrn __imp_GetModuleFileNameA:dword
.idata:00419364                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00419368 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00419368                 extrn __imp_GetModuleHandleA:dword
.idata:00419368                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0041936C ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0041936C                 extrn __imp_GetProcAddress:dword
.idata:0041936C                                         ; DATA XREF: GetProcAddress↑r
.idata:00419370 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00419370                 extrn __imp_GetProcessHeap:dword
.idata:00419370                                         ; DATA XREF: GetProcessHeap↑r
.idata:00419374 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00419374                 extrn __imp_GetShortPathNameA:dword
.idata:00419374                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00419378 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:00419378                 extrn __imp_GetSystemInfo:dword
.idata:00419378                                         ; DATA XREF: GetSystemInfo↑r
.idata:0041937C ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:0041937C                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:0041937C                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00419380 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00419380                 extrn __imp_GetTimeZoneInformation:dword
.idata:00419380                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00419384 ; DWORD (__stdcall *GetVersion)()
.idata:00419384                 extrn __imp_GetVersion:dword
.idata:00419384                                         ; DATA XREF: GetVersion↑r
.idata:00419388 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00419388                 extrn __imp_GetVersionExA:dword
.idata:00419388                                         ; DATA XREF: GetVersionExA↑r
.idata:0041938C ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:0041938C                 extrn __imp_GetVolumeInformationA:dword
.idata:0041938C                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00419390 ; void (__stdcall *GlobalMemoryStatus)(LPMEMORYSTATUS lpBuffer)
.idata:00419390                 extrn __imp_GlobalMemoryStatus:dword
.idata:00419390                                         ; DATA XREF: GlobalMemoryStatus↑r
.idata:00419394 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00419394                 extrn __imp_HeapAlloc:dword
.idata:00419394                                         ; DATA XREF: HeapAlloc↑r
.idata:00419398 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00419398                 extrn __imp_HeapFree:dword
.idata:00419398                                         ; DATA XREF: HeapFree↑r
.idata:0041939C ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041939C                 extrn __imp_LoadLibraryA:dword
.idata:0041939C                                         ; DATA XREF: LoadLibraryA↑r
.idata:004193A0 ; BOOL (__stdcall *LockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.idata:004193A0                 extrn __imp_LockFile:dword
.idata:004193A0                                         ; DATA XREF: LockFile↑r
.idata:004193A4 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:004193A4                 extrn __imp_MultiByteToWideChar:dword
.idata:004193A4                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:004193A8 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:004193A8                 extrn __imp_PeekNamedPipe:dword
.idata:004193A8                                         ; DATA XREF: PeekNamedPipe↑r
.idata:004193AC ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:004193AC                 extrn __imp_SetErrorMode:dword
.idata:004193AC                                         ; DATA XREF: SetErrorMode↑r
.idata:004193B0 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:004193B0                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:004193B0                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:004193B4 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:004193B4                 extrn __imp_UnlockFile:dword
.idata:004193B4                                         ; DATA XREF: UnlockFile↑r
.idata:004193B8 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:004193B8                 extrn __imp_lstrcmpiA:dword
.idata:004193B8                                         ; DATA XREF: lstrcmpiA↑r
.idata:004193BC ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:004193BC                 extrn __imp_lstrcpyA:dword
.idata:004193BC                                         ; DATA XREF: lstrcpyA↑r
.idata:004193C0
.idata:004193C8 ;
.idata:004193C8 ; Imports from msvcrt.dll
.idata:004193C8 ;
.idata:004193C8 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:004193C8                 extrn __imp__chmod:dword
.idata:004193C8                                         ; DATA XREF: _chmod↑r
.idata:004193CC ; int (__cdecl *_close)(int FileHandle)
.idata:004193CC                 extrn __imp__close:dword
.idata:004193CC                                         ; DATA XREF: _close↑r
.idata:004193D0 ; int (__cdecl *_dup)(int FileHandle)
.idata:004193D0                 extrn __imp__dup:dword  ; DATA XREF: _dup↑r
.idata:004193D4 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004193D4                 extrn __imp__fdopen:dword
.idata:004193D4                                         ; DATA XREF: _fdopen↑r
.idata:004193D8 ; int (__cdecl *_getpid)()
.idata:004193D8                 extrn __imp__getpid:dword
.idata:004193D8                                         ; DATA XREF: _getpid↑r
.idata:004193DC ; char *(__cdecl *_strdup)(const char *String)
.idata:004193DC                 extrn __imp__strdup:dword
.idata:004193DC                                         ; DATA XREF: _strdup↑r
.idata:004193E0 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004193E0                 extrn __imp__stricmp:dword
.idata:004193E0                                         ; DATA XREF: _stricmp↑r
.idata:004193E4
.idata:004193EC ;
.idata:004193EC ; Imports from MSVCP60.DLL
.idata:004193EC ;
.idata:004193EC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004193EC                 extrn __imp_mbrtowc:dword
.idata:004193EC                                         ; DATA XREF: mbrtowc↑r
.idata:004193F0
.idata:004193F8 ;
.idata:004193F8 ; Imports from msvcrt.dll
.idata:004193F8 ;
.idata:004193F8                 extrn __imp___getmainargs:dword
.idata:004193F8                                         ; DATA XREF: __getmainargs↑r
.idata:004193FC ; int _mb_cur_max
.idata:004193FC                 extrn __mb_cur_max:dword
.idata:004193FC                                         ; DATA XREF: sub_4021E0+16A↑r
.idata:004193FC                                         ; sub_4021E0+189↑r ...
.idata:00419400 ; char ***(__cdecl *__p__environ)()
.idata:00419400                 extrn __imp___p__environ:dword
.idata:00419400                                         ; DATA XREF: __p__environ↑r
.idata:00419404 ; int *(__cdecl *__p__fmode)()
.idata:00419404                 extrn __imp___p__fmode:dword
.idata:00419404                                         ; DATA XREF: __p__fmode↑r
.idata:00419408                 extrn __pioinfo:dword   ; DATA XREF: sub_4107C0:loc_410828↑r
.idata:00419408                                         ; sub_4107C0:loc_410853↑r ...
.idata:0041940C ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0041940C                 extrn __set_app_type:dword
.idata:0041940C                                         ; CODE XREF: start+D↑p
.idata:0041940C                                         ; .text:0040102D↑p
.idata:0041940C                                         ; DATA XREF: ...
.idata:00419410                 extrn __imp__assert:dword
.idata:00419410                                         ; DATA XREF: _assert↑r
.idata:00419414 ; void (__cdecl *_cexit)()
.idata:00419414                 extrn __imp__cexit:dword
.idata:00419414                                         ; DATA XREF: _cexit↑r
.idata:00419418 ; int (__cdecl *_chmod_0)(const char *FileName, int AccessMode)
.idata:00419418                 extrn __imp__chmod_0:dword
.idata:00419418                                         ; DATA XREF: _chmod_0↑r
.idata:0041941C ; int (__cdecl *_close_0)(int FileHandle)
.idata:0041941C                 extrn __imp__close_0:dword
.idata:0041941C                                         ; DATA XREF: _close_0↑r
.idata:00419420 ; int *(__cdecl *_errno)()
.idata:00419420                 extrn __imp__errno:dword
.idata:00419420                                         ; DATA XREF: _errno↑r
.idata:00419424 ; FILE *(__cdecl *_fdopen_0)(int FileHandle, const char *Format)
.idata:00419424                 extrn __imp__fdopen_0:dword
.idata:00419424                                         ; DATA XREF: _fdopen_0↑r
.idata:00419428 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:00419428                 extrn __imp__filelengthi64:dword
.idata:00419428                                         ; DATA XREF: _filelengthi64↑r
.idata:0041942C ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0041942C                 extrn __imp__flsbuf:dword
.idata:0041942C                                         ; DATA XREF: _flsbuf↑r
.idata:00419430 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:00419430                 extrn __imp__get_osfhandle:dword
.idata:00419430                                         ; DATA XREF: _get_osfhandle↑r
.idata:00419434 ; FILE iob[]
.idata:00419434                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00419434                                         ; sub_401080+75↑r ...
.idata:00419438 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00419438                 extrn __imp__isctype:dword
.idata:00419438                                         ; DATA XREF: _isctype↑r
.idata:0041943C ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:0041943C                 extrn __imp__lseeki64:dword
.idata:0041943C                                         ; DATA XREF: _lseeki64↑r
.idata:00419440 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00419440                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00419440                                         ; DATA XREF: .text:0040106C↑r
.idata:00419444 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:00419444                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:00419448 ; const unsigned __int16 *pctype
.idata:00419448                 extrn _pctype:dword     ; DATA XREF: sub_4021E0:loc_4039C0↑r
.idata:00419448                                         ; sub_4021E0:loc_4039D4↑r ...
.idata:0041944C ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041944C                 extrn __imp__setmode:dword
.idata:0041944C                                         ; DATA XREF: _setmode↑r
.idata:00419450 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00419450                 extrn __imp__stricmp_0:dword
.idata:00419450                                         ; DATA XREF: _stricmp_0↑r
.idata:00419454 ; void (__cdecl __noreturn *abort)()
.idata:00419454                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00419458 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00419458                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00419458                                         ; DATA XREF: sub_401040+C↑r
.idata:0041945C ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0041945C                 extrn __imp_calloc:dword
.idata:0041945C                                         ; DATA XREF: calloc↑r
.idata:00419460 ; void (__cdecl *clearerr)(FILE *Stream)
.idata:00419460                 extrn __imp_clearerr:dword
.idata:00419460                                         ; DATA XREF: clearerr↑r
.idata:00419464 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:00419464                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00419468 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00419468                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041946C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041946C                 extrn __imp_fclose:dword
.idata:0041946C                                         ; DATA XREF: fclose↑r
.idata:00419470 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00419470                 extrn __imp_fflush:dword
.idata:00419470                                         ; DATA XREF: fflush↑r
.idata:00419474 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00419474                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00419478 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00419478                 extrn __imp_fprintf:dword
.idata:00419478                                         ; DATA XREF: fprintf↑r
.idata:0041947C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041947C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00419480 ; size_t (__cdecl *fread)(void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:00419480                 extrn __imp_fread:dword ; DATA XREF: fread↑r
.idata:00419484 ; void (__cdecl *free)(void *Block)
.idata:00419484                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00419488 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:00419488                 extrn __imp_fwrite:dword
.idata:00419488                                         ; DATA XREF: fwrite↑r
.idata:0041948C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041948C                 extrn __imp_getenv:dword
.idata:0041948C                                         ; DATA XREF: getenv↑r
.idata:00419490 ; int (__cdecl *isalpha)(int C)
.idata:00419490                 extrn __imp_isalpha:dword
.idata:00419490                                         ; DATA XREF: isalpha↑r
.idata:00419494 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00419494                 extrn __imp_iswctype:dword
.idata:00419494                                         ; DATA XREF: iswctype↑r
.idata:00419498 ; struct lconv *(__cdecl *localeconv)()
.idata:00419498                 extrn __imp_localeconv:dword
.idata:00419498                                         ; DATA XREF: localeconv↑r
.idata:0041949C ; void *(__cdecl *malloc)(size_t Size)
.idata:0041949C                 extrn __imp_malloc:dword
.idata:0041949C                                         ; DATA XREF: malloc↑r
.idata:004194A0 ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:004194A0                 extrn __imp_memchr:dword
.idata:004194A0                                         ; DATA XREF: memchr↑r
.idata:004194A4 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004194A4                 extrn __imp_memcpy:dword
.idata:004194A4                                         ; DATA XREF: memcpy↑r
.idata:004194A8 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:004194A8                 extrn __imp_memmove:dword
.idata:004194A8                                         ; DATA XREF: memmove↑r
.idata:004194AC ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004194AC                 extrn __imp_memset:dword
.idata:004194AC                                         ; DATA XREF: memset↑r
.idata:004194B0 ; int (*printf)(const char *const Format, ...)
.idata:004194B0                 extrn __imp_printf:dword
.idata:004194B0                                         ; DATA XREF: printf↑r
.idata:004194B4 ; int (__cdecl *raise)(int Signal)
.idata:004194B4                 extrn __imp_raise:dword ; DATA XREF: raise↑r
.idata:004194B8 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004194B8                 extrn __imp_realloc:dword
.idata:004194B8                                         ; DATA XREF: realloc↑r
.idata:004194BC ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004194BC                 extrn __imp_setlocale:dword
.idata:004194BC                                         ; DATA XREF: setlocale↑r
.idata:004194C0 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004194C0                 extrn __imp_signal:dword
.idata:004194C0                                         ; DATA XREF: signal↑r
.idata:004194C4 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:004194C4                 extrn __imp_sprintf:dword
.idata:004194C4                                         ; DATA XREF: sprintf↑r
.idata:004194C8 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:004194C8                 extrn __imp_sscanf:dword
.idata:004194C8                                         ; DATA XREF: sscanf↑r
.idata:004194CC ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:004194CC                 extrn __imp_strcat:dword
.idata:004194CC                                         ; DATA XREF: strcat↑r
.idata:004194D0 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004194D0                 extrn __imp_strchr:dword
.idata:004194D0                                         ; DATA XREF: strchr↑r
.idata:004194D4 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004194D4                 extrn __imp_strcmp:dword
.idata:004194D4                                         ; DATA XREF: strcmp↑r
.idata:004194D8 ; int (__cdecl *strcoll)(const char *String1, const char *String2)
.idata:004194D8                 extrn __imp_strcoll:dword
.idata:004194D8                                         ; DATA XREF: strcoll↑r
.idata:004194DC ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:004194DC                 extrn __imp_strcpy:dword
.idata:004194DC                                         ; DATA XREF: strcpy↑r
.idata:004194E0 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004194E0                 extrn __imp_strerror:dword
.idata:004194E0                                         ; DATA XREF: strerror↑r
.idata:004194E4 ; size_t (__cdecl *strlen)(const char *Str)
.idata:004194E4                 extrn __imp_strlen:dword
.idata:004194E4                                         ; DATA XREF: strlen↑r
.idata:004194E8 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004194E8                 extrn __imp_strncmp:dword
.idata:004194E8                                         ; DATA XREF: strncmp↑r
.idata:004194EC ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:004194EC                 extrn __imp_strncpy:dword
.idata:004194EC                                         ; DATA XREF: strncpy↑r
.idata:004194F0 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:004194F0                 extrn __imp_strpbrk:dword
.idata:004194F0                                         ; DATA XREF: strpbrk↑r
.idata:004194F4 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:004194F4                 extrn __imp_strrchr:dword
.idata:004194F4                                         ; DATA XREF: strrchr↑r
.idata:004194F8 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:004194F8                 extrn __imp_strspn:dword
.idata:004194F8                                         ; DATA XREF: strspn↑r
.idata:004194FC ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:004194FC                 extrn __imp_strstr:dword
.idata:004194FC                                         ; DATA XREF: strstr↑r
.idata:00419500 ; double (__cdecl *strtod)(const char *String, char **EndPtr)
.idata:00419500                 extrn __imp_strtod:dword
.idata:00419500                                         ; DATA XREF: strtod↑r
.idata:00419504 ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:00419504                 extrn __imp_strtol:dword
.idata:00419504                                         ; DATA XREF: strtol↑r
.idata:00419508 ; int (__cdecl *toupper)(int C)
.idata:00419508                 extrn __imp_toupper:dword
.idata:00419508                                         ; DATA XREF: toupper↑r
.idata:0041950C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041950C                 extrn __imp_vfprintf:dword
.idata:0041950C                                         ; DATA XREF: vfprintf↑r
.idata:00419510
.idata:00419518 ;
.idata:00419518 ; Imports from OLE32.dll
.idata:00419518 ;
.idata:00419518 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00419518                 extrn __imp_CoCreateInstance:dword
.idata:00419518                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041951C ; void (__stdcall *CoUninitialize)()
.idata:0041951C                 extrn __imp_CoUninitialize:dword
.idata:0041951C                                         ; DATA XREF: CoUninitialize↑r
.idata:00419520 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00419520                 extrn __imp_OleInitialize:dword
.idata:00419520                                         ; DATA XREF: OleInitialize↑r
.idata:00419524
.idata:00419524
.idata:00419524
.idata:00419524                 end start
