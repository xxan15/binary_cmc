.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : EDFF1C46A63E3441418E8C9BA96372236648BAA6A2E0C30470A233A3140F36D4
.text:00401000 ; Input MD5    : 15FDF601EEBA902B9C169947D698DD07
.text:00401000 ; Input CRC32  : 4AC8FEFE
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/comm.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A253 (Wed Apr 20 18:41:23 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004860 (  18528.)
.text:00401000 ; Section size in file          : 00004A00 (  18944.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401660+73↓p
.text:00401040                                         ; .text:00405510↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_4054B0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_405480
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401660
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_4054B0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aHelp           db 'help',0             ; DATA XREF: .text:off_4012A0↓o
.text:00401285 aVersion        db 'version',0          ; DATA XREF: .text:004012B0↓o
.text:0040128D                 align 20h
.text:004012A0 off_4012A0      dd offset aHelp         ; DATA XREF: sub_401660+98↓o
.text:004012A0                                         ; "help"
.text:004012A4                 dd 2 dup(0)
.text:004012AC                 dd 0FFFFFF7Eh
.text:004012B0                 dd offset aVersion      ; "version"
.text:004012B4                 dd 2 dup(0)
.text:004012BC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004012D0 ; const char Locale
.text:004012D0 Locale          db 0                    ; DATA XREF: sub_401660+1F↓o
.text:004012D1                 db 0EBh, 0Dh, 90h
.text:004012D4                 align 10h
.text:004012E0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012E0                                         ; DATA XREF: sub_401660+39↓o
.text:00401303 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401660+41↓o
.text:00401303                                         ; sub_401660+4E↓o
.text:0040130D ; const char a123[]
.text:0040130D a123            db '123',0              ; DATA XREF: sub_401660+A0↓o
.text:00401311                 db 0EBh, 0Dh, 90h
.text:00401314                 align 10h
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_401660:loc_40173E↓o
.text:00401320                                         ; .text:0040199C↓o
.text:00401347                 align 20h
.text:00401360 aUsageSOptionFi db 'Usage: %s [OPTION]... FILE1 FILE2',0Ah,0
.text:00401360                                         ; DATA XREF: sub_401660+134↓o
.text:00401360                                         ; .text:loc_4019D0↓o
.text:00401383                 align 20h
.text:004013A0 aCompareSortedF db 'Compare sorted files FILE1 and FILE2 line by line.',0Ah,0
.text:004013A0                                         ; DATA XREF: sub_401660+153↓o
.text:004013A0                                         ; .text:004019EF↓o
.text:004013D4                 align 10h
.text:004013E0 aWithNoOptionsP db 0Ah                  ; DATA XREF: sub_401660+175↓o
.text:004013E0                                         ; .text:00401A11↓o
.text:004013E0                 db 'With no options, produce three-column output.  Column one contain'
.text:004013E0                 db 's',0Ah
.text:004013E0                 db 'lines unique to FILE1, column two contains lines unique to FILE2,'
.text:004013E0                 db 0Ah
.text:004013E0                 db 'and column three contains lines common to both files.',0Ah,0
.text:0040149D                 align 10h
.text:004014A0 a1SuppressLines db 0Ah                  ; DATA XREF: sub_401660+197↓o
.text:004014A0                                         ; .text:00401A33↓o
.text:004014A0                 db '  -1              suppress lines unique to FILE1',0Ah
.text:004014A0                 db '  -2              suppress lines unique to FILE2',0Ah
.text:004014A0                 db '  -3              suppress lines that appear in both files',0Ah,0
.text:0040153F                 align 10h
.text:00401540 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401540                                         ; DATA XREF: sub_401660+1B9↓o
.text:00401540                                         ; .text:00401A55↓o
.text:0040156D                 align 20h
.text:00401580 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401580                                         ; DATA XREF: sub_401660+1DB↓o
.text:00401580                                         ; .text:00401A77↓o
.text:004015B6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401660+1FD↓o
.text:004015B6                                         ; .text:00401A99↓o
.text:004015B6                 db 'Report bugs to <%s>.',0Ah,0
.text:004015CD aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004015CD                                         ; DATA XREF: sub_401660+20A↓o
.text:004015CD                                         ; .text:00401AA6↓o
.text:004015E3 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401660+234↓o
.text:004015F3 aRichardStallma db 'Richard Stallman',0 ; DATA XREF: sub_401660+23C↓o
.text:00401604 a530            db '5.3.0',0            ; DATA XREF: sub_401660+247↓o
.text:0040160A aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401660+24F↓o
.text:00401618 ; const FILE stru_401618
.text:00401618 stru_401618     FILE <6D6D6F63h, 74786500h, 6F206172h, 61726570h, 2520646Eh, \
.text:00401618                                         ; DATA XREF: sub_401660+257↓o
.text:00401618                                         ; sub_401660+29C↓o
.text:00401618                       696D0073h, 6E697373h, 706F2067h>
.text:00401638                 db  65h ; e
.text:00401639                 db  72h ; r
.text:0040163A                 db  61h ; a
.text:0040163B                 db  6Eh ; n
.text:0040163C                 db  64h ; d
.text:0040163D                 db    0
.text:0040163E aMissingOperand_0 db 'missing operand after %s',0
.text:0040163E                                         ; DATA XREF: sub_401660+321↓o
.text:00401657                 align 10h
.text:00401660
.text:00401660 ; =============== S U B R O U T I N E =======================================
.text:00401660
.text:00401660 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401660
.text:00401660 sub_401660      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401660
.text:00401660 Category        = dword ptr -28h
.text:00401660 Locale          = dword ptr -24h
.text:00401660 var_20          = dword ptr -20h
.text:00401660 var_1C          = byte ptr -1Ch
.text:00401660 var_18          = byte ptr -18h
.text:00401660 var_14          = dword ptr -14h
.text:00401660 var_10          = dword ptr -10h
.text:00401660 arg_0           = dword ptr  8
.text:00401660 arg_4           = dword ptr  0Ch
.text:00401660
.text:00401660                 push    ebp
.text:00401661                 xor     eax, eax
.text:00401663                 mov     ebp, esp
.text:00401665                 push    esi
.text:00401666                 push    ebx
.text:00401667                 sub     esp, 20h
.text:0040166A                 mov     ebx, [ebp+arg_4]
.text:0040166D                 and     esp, 0FFFFFFF0h
.text:00401670                 mov     esi, [ebp+arg_0]
.text:00401673                 call    __alloca
.text:00401678                 call    sub_405550
.text:0040167D                 mov     edx, [ebx]
.text:0040167F                 mov     [esp+28h+Locale], offset Locale ; Locale
.text:00401687                 mov     [esp+28h+Category], 0 ; Category
.text:0040168E                 mov     ds:dword_4071D0, edx
.text:00401694                 call    setlocale
.text:00401699                 mov     [esp+28h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004016A1                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:004016A8                 call    ds:__imp_libintl_bindtextdomain
.text:004016AE                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:004016B5                 call    ds:libintl_textdomain
.text:004016BB                 mov     [esp+28h+Category], 1
.text:004016C2                 call    sub_4036C0
.text:004016C7                 mov     ds:byte_407000, al
.text:004016CC                 mov     [esp+28h+Category], offset sub_4035D0 ; void (__cdecl *)()
.text:004016D3                 call    sub_401040
.text:004016D8                 mov     ds:byte_407010, 1
.text:004016DF                 mov     ds:byte_407020, 1
.text:004016E6                 mov     ds:byte_407030, 1
.text:004016ED                 lea     esi, [esi+0]
.text:004016F0
.text:004016F0 loc_4016F0:                             ; CODE XREF: sub_401660+DC↓j
.text:004016F0                                         ; sub_401660+11D↓j ...
.text:004016F0                 mov     dword ptr [esp+28h+var_18], 0 ; int
.text:004016F8                 mov     dword ptr [esp+28h+var_1C], offset off_4012A0 ; char
.text:00401700                 mov     [esp+28h+var_20], offset a123 ; "123"
.text:00401708                 mov     [esp+28h+Locale], ebx ; int
.text:0040170C                 mov     [esp+28h+Category], esi ; int
.text:0040170F                 call    sub_403460
.text:00401714                 cmp     eax, 0FFFFFFFFh
.text:00401717                 jz      loc_4018DC
.text:0040171D                 cmp     eax, 31h ; '1'
.text:00401720                 jz      loc_4018D0
.text:00401726                 cmp     eax, 31h ; '1'
.text:00401729                 jle     short loc_401782
.text:0040172B                 cmp     eax, 32h ; '2'
.text:0040172E                 jz      short loc_401776
.text:00401730                 cmp     eax, 33h ; '3'
.text:00401733                 jnz     short loc_40173E
.text:00401735                 mov     ds:byte_407030, 0
.text:0040173C                 jmp     short loc_4016F0
.text:0040173E ; ---------------------------------------------------------------------------
.text:0040173E
.text:0040173E loc_40173E:                             ; CODE XREF: sub_401660+D3↑j
.text:0040173E                                         ; sub_401660+132↓j ...
.text:0040173E                 mov     [esp+28h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401745                 call    ds:libintl_gettext
.text:0040174B                 mov     ebx, ds:_iob
.text:00401751                 mov     ecx, ds:dword_4071D0
.text:00401757                 add     ebx, 40h ; '@'
.text:0040175A                 mov     [esp+28h+var_20], ecx
.text:0040175E                 mov     [esp+28h+Locale], eax ; Format
.text:00401762                 mov     [esp+28h+Category], ebx ; Stream
.text:00401765                 call    fprintf
.text:0040176A                 mov     [esp+28h+Category], 1 ; Code
.text:00401771
.text:00401771 loc_401771:                             ; CODE XREF: sub_401660+221↓j
.text:00401771                                         ; sub_401660+2E2↓j
.text:00401771                 call    exit
.text:00401776 ; ---------------------------------------------------------------------------
.text:00401776
.text:00401776 loc_401776:                             ; CODE XREF: sub_401660+CE↑j
.text:00401776                 mov     ds:byte_407020, 0
.text:0040177D                 jmp     loc_4016F0
.text:00401782 ; ---------------------------------------------------------------------------
.text:00401782
.text:00401782 loc_401782:                             ; CODE XREF: sub_401660+C9↑j
.text:00401782                 cmp     eax, 0FFFFFF7Dh
.text:00401787                 jz      loc_401886
.text:0040178D                 cmp     eax, 0FFFFFF7Eh
.text:00401792                 jnz     short loc_40173E
.text:00401794                 mov     [esp+28h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION]... FILE1 FILE2\n"
.text:0040179B                 call    ds:libintl_gettext
.text:004017A1                 mov     esi, ds:dword_4071D0
.text:004017A7                 mov     [esp+28h+Category], eax ; Format
.text:004017AA                 mov     [esp+28h+Locale], esi
.text:004017AE                 call    printf
.text:004017B3                 mov     [esp+28h+Category], offset aCompareSortedF ; "Compare sorted files FILE1 and FILE2 li"...
.text:004017BA                 call    ds:libintl_gettext
.text:004017C0                 mov     ebx, ds:_iob
.text:004017C6                 add     ebx, 20h ; ' '
.text:004017C9                 mov     [esp+28h+Locale], ebx ; Stream
.text:004017CD                 mov     [esp+28h+Category], eax ; Buffer
.text:004017D0                 call    fputs
.text:004017D5                 mov     [esp+28h+Category], offset aWithNoOptionsP ; "\nWith no options, produce three-column"...
.text:004017DC                 call    ds:libintl_gettext
.text:004017E2                 mov     ecx, ds:_iob
.text:004017E8                 add     ecx, 20h ; ' '
.text:004017EB                 mov     [esp+28h+Locale], ecx ; Stream
.text:004017EF                 mov     [esp+28h+Category], eax ; Buffer
.text:004017F2                 call    fputs
.text:004017F7                 mov     [esp+28h+Category], offset a1SuppressLines ; "\n  -1              suppress lines uniq"...
.text:004017FE                 call    ds:libintl_gettext
.text:00401804                 mov     esi, ds:_iob
.text:0040180A                 add     esi, 20h ; ' '
.text:0040180D                 mov     [esp+28h+Locale], esi ; Stream
.text:00401811                 mov     [esp+28h+Category], eax ; Buffer
.text:00401814                 call    fputs
.text:00401819                 mov     [esp+28h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401820                 call    ds:libintl_gettext
.text:00401826                 mov     ebx, ds:_iob
.text:0040182C                 add     ebx, 20h ; ' '
.text:0040182F                 mov     [esp+28h+Locale], ebx ; Stream
.text:00401833                 mov     [esp+28h+Category], eax ; Buffer
.text:00401836                 call    fputs
.text:0040183B                 mov     [esp+28h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401842                 call    ds:libintl_gettext
.text:00401848                 mov     ecx, ds:_iob
.text:0040184E                 add     ecx, 20h ; ' '
.text:00401851                 mov     [esp+28h+Locale], ecx ; Stream
.text:00401855                 mov     [esp+28h+Category], eax ; Buffer
.text:00401858                 call    fputs
.text:0040185D                 mov     [esp+28h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401864                 call    ds:libintl_gettext
.text:0040186A                 mov     [esp+28h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401872                 mov     [esp+28h+Category], eax ; Format
.text:00401875                 call    printf
.text:0040187A
.text:0040187A loc_40187A:                             ; CODE XREF: sub_401660+267↓j
.text:0040187A                 mov     [esp+28h+Category], 0
.text:00401881                 jmp     loc_401771
.text:00401886 ; ---------------------------------------------------------------------------
.text:00401886
.text:00401886 loc_401886:                             ; CODE XREF: sub_401660+127↑j
.text:00401886                 mov     [esp+28h+var_10], 0
.text:0040188E                 mov     edx, ds:_iob
.text:00401894                 mov     [esp+28h+var_14], offset aDavidMackenzie ; "David MacKenzie"
.text:0040189C                 mov     dword ptr [esp+28h+var_18], offset aRichardStallma ; "Richard Stallman"
.text:004018A4                 add     edx, 20h ; ' '
.text:004018A7                 mov     dword ptr [esp+28h+var_1C], offset a530 ; "5.3.0"
.text:004018AF                 mov     [esp+28h+var_20], offset aGnuCoreutils ; "GNU coreutils"
.text:004018B7                 mov     [esp+28h+Locale], offset stru_401618 ; FILE *
.text:004018BF                 mov     [esp+28h+Category], edx ; FILE *
.text:004018C2                 call    sub_403420
.text:004018C7                 jmp     short loc_40187A
.text:004018C7 ; ---------------------------------------------------------------------------
.text:004018C9                 align 10h
.text:004018D0
.text:004018D0 loc_4018D0:                             ; CODE XREF: sub_401660+C0↑j
.text:004018D0                 mov     ds:byte_407010, 0
.text:004018D7                 jmp     loc_4016F0
.text:004018DC ; ---------------------------------------------------------------------------
.text:004018DC
.text:004018DC loc_4018DC:                             ; CODE XREF: sub_401660+B7↑j
.text:004018DC                 mov     edx, dword_406010
.text:004018E2                 mov     eax, esi
.text:004018E4                 sub     eax, edx
.text:004018E6                 cmp     eax, 1
.text:004018E9                 jle     short loc_401947
.text:004018EB                 cmp     eax, 2
.text:004018EE                 jle     short loc_40192C
.text:004018F0                 mov     esi, [ebx+edx*4+8]
.text:004018F4                 mov     [esp+28h+Category], esi ; char *
.text:004018F7                 call    sub_402F30
.text:004018FC                 mov     [esp+28h+Category], (offset stru_401618._cnt+1)
.text:00401903
.text:00401903 loc_401903:                             ; CODE XREF: sub_401660+328↓j
.text:00401903                 mov     ebx, eax
.text:00401905                 call    ds:libintl_gettext
.text:0040190B                 mov     dword ptr [esp+28h+var_1C], ebx ; char
.text:0040190F                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:00401917                 mov     [esp+28h+Category], 0 ; Code
.text:0040191E                 mov     [esp+28h+var_20], eax ; char *
.text:00401922                 call    sub_4051D0
.text:00401927                 jmp     loc_40173E
.text:0040192C ; ---------------------------------------------------------------------------
.text:0040192C
.text:0040192C loc_40192C:                             ; CODE XREF: sub_401660+28E↑j
.text:0040192C                 lea     esi, [ebx+edx*4]
.text:0040192F                 mov     [esp+28h+Category], esi
.text:00401932                 call    sub_401AD0
.text:00401937                 test    al, al
.text:00401939                 setz    bl
.text:0040193C                 movzx   edx, bl
.text:0040193F                 mov     [esp+28h+Category], edx
.text:00401942                 jmp     loc_401771
.text:00401947 ; ---------------------------------------------------------------------------
.text:00401947
.text:00401947 loc_401947:                             ; CODE XREF: sub_401660+289↑j
.text:00401947                 cmp     esi, edx
.text:00401949                 jg      short loc_401975
.text:0040194B                 mov     [esp+28h+Category], (offset stru_401618._charbuf+2)
.text:00401952                 call    ds:libintl_gettext
.text:00401958                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:00401960                 mov     [esp+28h+Category], 0 ; Code
.text:00401967                 mov     [esp+28h+var_20], eax ; char *
.text:0040196B                 call    sub_4051D0
.text:00401970                 jmp     loc_40173E
.text:00401975 ; ---------------------------------------------------------------------------
.text:00401975
.text:00401975 loc_401975:                             ; CODE XREF: sub_401660+2E9↑j
.text:00401975                 mov     ecx, [ebx+esi*4-4]
.text:00401979                 mov     [esp+28h+Category], ecx ; char *
.text:0040197C                 call    sub_402F30
.text:00401981                 mov     [esp+28h+Category], offset aMissingOperand_0 ; "missing operand after %s"
.text:00401988                 jmp     loc_401903
.text:00401988 sub_401660      endp
.text:00401988
.text:00401988 ; ---------------------------------------------------------------------------
.text:0040198D                 align 10h
.text:00401990                 push    ebx
.text:00401991                 sub     esp, 18h
.text:00401994                 mov     ebx, [esp+20h]
.text:00401998                 test    ebx, ebx
.text:0040199A                 jz      short loc_4019D0
.text:0040199C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004019A3                 call    ds:libintl_gettext
.text:004019A9                 mov     edx, ds:_iob
.text:004019AF                 mov     ecx, ds:dword_4071D0
.text:004019B5                 add     edx, 40h ; '@'
.text:004019B8                 mov     [esp+8], ecx
.text:004019BC                 mov     [esp+4], eax
.text:004019C0                 mov     [esp], edx
.text:004019C3                 call    fprintf
.text:004019C8
.text:004019C8 loc_4019C8:                             ; CODE XREF: .text:00401AB6↓j
.text:004019C8                 mov     [esp], ebx
.text:004019CB                 call    exit
.text:004019D0 ; ---------------------------------------------------------------------------
.text:004019D0
.text:004019D0 loc_4019D0:                             ; CODE XREF: .text:0040199A↑j
.text:004019D0                 mov     dword ptr [esp], offset aUsageSOptionFi ; "Usage: %s [OPTION]... FILE1 FILE2\n"
.text:004019D7                 call    ds:libintl_gettext
.text:004019DD                 mov     ecx, ds:dword_4071D0
.text:004019E3                 mov     [esp], eax
.text:004019E6                 mov     [esp+4], ecx
.text:004019EA                 call    printf
.text:004019EF                 mov     dword ptr [esp], offset aCompareSortedF ; "Compare sorted files FILE1 and FILE2 li"...
.text:004019F6                 call    ds:libintl_gettext
.text:004019FC                 mov     ecx, ds:_iob
.text:00401A02                 add     ecx, 20h ; ' '
.text:00401A05                 mov     [esp+4], ecx
.text:00401A09                 mov     [esp], eax
.text:00401A0C                 call    fputs
.text:00401A11                 mov     dword ptr [esp], offset aWithNoOptionsP ; "\nWith no options, produce three-column"...
.text:00401A18                 call    ds:libintl_gettext
.text:00401A1E                 mov     ecx, ds:_iob
.text:00401A24                 add     ecx, 20h ; ' '
.text:00401A27                 mov     [esp+4], ecx
.text:00401A2B                 mov     [esp], eax
.text:00401A2E                 call    fputs
.text:00401A33                 mov     dword ptr [esp], offset a1SuppressLines ; "\n  -1              suppress lines uniq"...
.text:00401A3A                 call    ds:libintl_gettext
.text:00401A40                 mov     ecx, ds:_iob
.text:00401A46                 add     ecx, 20h ; ' '
.text:00401A49                 mov     [esp+4], ecx
.text:00401A4D                 mov     [esp], eax
.text:00401A50                 call    fputs
.text:00401A55                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401A5C                 call    ds:libintl_gettext
.text:00401A62                 mov     ecx, ds:_iob
.text:00401A68                 add     ecx, 20h ; ' '
.text:00401A6B                 mov     [esp+4], ecx
.text:00401A6F                 mov     [esp], eax
.text:00401A72                 call    fputs
.text:00401A77                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401A7E                 call    ds:libintl_gettext
.text:00401A84                 mov     ecx, ds:_iob
.text:00401A8A                 add     ecx, 20h ; ' '
.text:00401A8D                 mov     [esp+4], ecx
.text:00401A91                 mov     [esp], eax
.text:00401A94                 call    fputs
.text:00401A99                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401AA0                 call    ds:libintl_gettext
.text:00401AA6                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401AAE                 mov     [esp], eax
.text:00401AB1                 call    printf
.text:00401AB6                 jmp     loc_4019C8
.text:00401AB6 ; ---------------------------------------------------------------------------
.text:00401ABB byte_401ABB     db 2Dh                  ; DATA XREF: sub_401AD0+24↓o
.text:00401ABC                 db 0
.text:00401ABD ; const char[]
.text:00401ABD                 db 25h, 73h, 0          ; DATA XREF: sub_401AD0+34A↓o
.text:00401ABD                                         ; sub_401AD0+37D↓o ...
.text:00401AC0 ; const char aR[2]
.text:00401AC0 aR              db 'r',0                ; DATA XREF: sub_401AD0:loc_401EB0↓o
.text:00401AC2                 align 10h
.text:00401AD0
.text:00401AD0 ; =============== S U B R O U T I N E =======================================
.text:00401AD0
.text:00401AD0
.text:00401AD0 sub_401AD0      proc near               ; CODE XREF: sub_401660+2D2↑p
.text:00401AD0
.text:00401AD0 Buffer          = dword ptr -7Ch
.text:00401AD0 ElementSize     = dword ptr -78h
.text:00401AD0 ElementCount    = dword ptr -74h
.text:00401AD0 Stream          = dword ptr -70h
.text:00401AD0 var_64          = dword ptr -64h
.text:00401AD0 var_60          = dword ptr -60h
.text:00401AD0 var_59          = byte ptr -59h
.text:00401AD0 var_58          = dword ptr -58h
.text:00401AD0 ErrorMessage    = dword ptr -54h
.text:00401AD0 var_50          = dword ptr -50h
.text:00401AD0 var_4C          = dword ptr -4Ch
.text:00401AD0 var_48          = dword ptr -48h
.text:00401AD0 var_44          = dword ptr -44h
.text:00401AD0 var_40          = dword ptr -40h
.text:00401AD0 var_3C          = byte ptr -3Ch
.text:00401AD0 var_34          = byte ptr -34h
.text:00401AD0 arg_0           = dword ptr  4
.text:00401AD0
.text:00401AD0                 push    ebp
.text:00401AD1                 push    edi
.text:00401AD2                 push    esi
.text:00401AD3                 push    ebx
.text:00401AD4                 sub     esp, 6Ch
.text:00401AD7                 xor     ebx, ebx
.text:00401AD9                 mov     [esp+7Ch+var_59], 1
.text:00401ADE                 lea     edx, [esp+7Ch+var_3C]
.text:00401AE2                 mov     [esp+7Ch+var_58], 0
.text:00401AEA                 mov     [esp+7Ch+var_64], edx
.text:00401AEE                 mov     esi, esi
.text:00401AF0
.text:00401AF0 loc_401AF0:                             ; CODE XREF: sub_401AD0+A0↓j
.text:00401AF0                 mov     ecx, [esp+7Ch+var_64]
.text:00401AF4                 mov     edi, offset byte_401ABB
.text:00401AF9                 mov     [esp+7Ch+Buffer], ecx
.text:00401AFC                 call    sub_4039B0
.text:00401B01                 mov     [esp+7Ch+var_60], ebx
.text:00401B05                 mov     edx, [esp+7Ch+arg_0]
.text:00401B0C                 mov     ecx, 2
.text:00401B11                 cld
.text:00401B12                 mov     eax, [esp+7Ch+var_64]
.text:00401B16                 mov     ebp, [edx+ebx]
.text:00401B19                 mov     [esp+ebx+7Ch+var_44], eax
.text:00401B1D                 mov     esi, ebp
.text:00401B1F                 repe cmpsb
.text:00401B21                 jnz     loc_401EB0
.text:00401B27                 mov     eax, ds:_iob
.text:00401B2C
.text:00401B2C loc_401B2C:                             ; CODE XREF: sub_401AD0+3F0↓j
.text:00401B2C                 mov     esi, [esp+7Ch+var_60]
.text:00401B30                 mov     [esp+esi+7Ch+var_4C], eax
.text:00401B34                 mov     eax, [esp+ebx+7Ch+var_4C]
.text:00401B38                 test    eax, eax
.text:00401B3A                 jz      loc_401E7B
.text:00401B40                 mov     [esp+7Ch+ElementSize], eax
.text:00401B44                 mov     ecx, [esp+ebx+7Ch+var_44]
.text:00401B48                 mov     [esp+7Ch+Buffer], ecx
.text:00401B4B                 call    sub_4038F0
.text:00401B50                 mov     [esp+ebx+7Ch+var_44], eax
.text:00401B54                 call    _errno
.text:00401B59                 inc     [esp+7Ch+var_58]
.text:00401B5D                 mov     edx, [eax]
.text:00401B5F                 add     [esp+7Ch+var_64], 0Ch
.text:00401B64                 mov     [esp+ebx+7Ch+ErrorMessage], edx
.text:00401B68                 add     ebx, 4
.text:00401B6B                 cmp     [esp+7Ch+var_58], 1
.text:00401B70                 jle     loc_401AF0
.text:00401B76                 lea     esi, [esi+0]
.text:00401B79                 lea     edi, [edi+0]
.text:00401B80
.text:00401B80 loc_401B80:                             ; CODE XREF: sub_401AD0+1E7↓j
.text:00401B80                                         ; sub_401AD0+210↓j
.text:00401B80                 mov     esi, [esp+7Ch+var_44]
.text:00401B84                 test    esi, esi
.text:00401B86                 jnz     short loc_401BB0
.text:00401B88                 mov     edx, [esp+7Ch+var_40]
.text:00401B8C                 test    edx, edx
.text:00401B8E                 jz      loc_401DB9
.text:00401B94                 test    esi, esi
.text:00401B96                 mov     edi, 1
.text:00401B9B                 jz      loc_401D14
.text:00401BA1                 jmp     short loc_401BB0
.text:00401BA1 ; ---------------------------------------------------------------------------
.text:00401BA3                 align 10h
.text:00401BB0
.text:00401BB0 loc_401BB0:                             ; CODE XREF: sub_401AD0+B6↑j
.text:00401BB0                                         ; sub_401AD0+D1↑j
.text:00401BB0                 mov     edx, [esp+7Ch+var_40]
.text:00401BB4                 mov     edi, 0FFFFFFFFh
.text:00401BB9                 test    edx, edx
.text:00401BBB                 jz      loc_401D55
.text:00401BC1                 cmp     ds:byte_407000, 0
.text:00401BC8                 jnz     loc_401D90
.text:00401BCE                 mov     ebx, [edx+4]
.text:00401BD1                 mov     ebp, [esi+4]
.text:00401BD4                 mov     eax, ebx
.text:00401BD6                 cmp     ebx, ebp
.text:00401BD8                 jbe     short loc_401BDC
.text:00401BDA                 mov     eax, ebp
.text:00401BDC
.text:00401BDC loc_401BDC:                             ; CODE XREF: sub_401AD0+108↑j
.text:00401BDC                 cld
.text:00401BDD                 mov     edi, [edx+8]
.text:00401BE0                 mov     esi, [esi+8]
.text:00401BE3                 lea     ecx, [eax-1]
.text:00401BE6                 cmp     ecx, ecx
.text:00401BE8                 repe cmpsb
.text:00401BEA                 setnbe  cl
.text:00401BED                 setb    dl
.text:00401BF0                 sub     cl, dl
.text:00401BF2                 movsx   edi, cl
.text:00401BF5                 test    edi, edi
.text:00401BF7                 jnz     loc_401D10
.text:00401BFD                 cmp     ebp, ebx
.text:00401BFF                 mov     edi, 0FFFFFFFFh
.text:00401C04                 jb      short loc_401C10
.text:00401C06                 cmp     ebp, ebx
.text:00401C08                 setnz   bl
.text:00401C0B                 movzx   edi, bl
.text:00401C0E                 mov     esi, esi
.text:00401C10
.text:00401C10 loc_401C10:                             ; CODE XREF: sub_401AD0+134↑j
.text:00401C10                                         ; sub_401AD0+2E4↓j
.text:00401C10                 test    edi, edi
.text:00401C12                 jnz     loc_401D10
.text:00401C18                 cmp     ds:byte_407030, 0
.text:00401C1F                 mov     edx, ds:_iob
.text:00401C25                 mov     esi, [esp+7Ch+var_40]
.text:00401C29                 lea     ebx, [edx+20h]
.text:00401C2C                 jz      short loc_401C8E
.text:00401C2E                 cmp     ds:byte_407010, 0
.text:00401C35                 jz      short loc_401C4F
.text:00401C37                 mov     ebp, [ebx+4]
.text:00401C3A                 dec     ebp
.text:00401C3B                 test    ebp, ebp
.text:00401C3D                 mov     [ebx+4], ebp
.text:00401C40                 js      loc_401CFA
.text:00401C46                 mov     ecx, [edx+20h]
.text:00401C49                 mov     byte ptr [ecx], 9
.text:00401C4C                 inc     dword ptr [edx+20h]
.text:00401C4F
.text:00401C4F loc_401C4F:                             ; CODE XREF: sub_401AD0+165↑j
.text:00401C4F                                         ; sub_401AD0+23A↓j
.text:00401C4F                 cmp     ds:byte_407020, 0
.text:00401C56                 jz      short loc_401C70
.text:00401C58                 mov     edx, [ebx+4]
.text:00401C5B                 dec     edx
.text:00401C5C                 test    edx, edx
.text:00401C5E                 mov     [ebx+4], edx
.text:00401C61                 js      loc_401CE5
.text:00401C67                 mov     ebp, [ebx]
.text:00401C69                 mov     byte ptr [ebp+0], 9
.text:00401C6D                 inc     dword ptr [ebx]
.text:00401C6F                 nop
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_401AD0+186↑j
.text:00401C70                                         ; sub_401AD0+225↓j ...
.text:00401C70                 mov     [esp+7Ch+Stream], ebx ; Stream
.text:00401C74                 mov     ebx, [esi+4]
.text:00401C77                 mov     [esp+7Ch+ElementSize], 1 ; ElementSize
.text:00401C7F                 mov     [esp+7Ch+ElementCount], ebx ; ElementCount
.text:00401C83                 mov     eax, [esi+8]
.text:00401C86
.text:00401C86 loc_401C86:                             ; CODE XREF: sub_401AD0+2B4↓j
.text:00401C86                 mov     [esp+7Ch+Buffer], eax ; Buffer
.text:00401C89                 call    fwrite
.text:00401C8E
.text:00401C8E loc_401C8E:                             ; CODE XREF: sub_401AD0+15C↑j
.text:00401C8E                                         ; sub_401AD0+258↓j ...
.text:00401C8E                 test    edi, edi
.text:00401C90                 js      short loc_401CB5
.text:00401C92                 mov     ecx, [esp+7Ch+var_40]
.text:00401C96                 mov     ebp, [esp+7Ch+var_48]
.text:00401C9A                 mov     [esp+7Ch+Buffer], ecx
.text:00401C9D                 mov     [esp+7Ch+ElementSize], ebp
.text:00401CA1                 call    sub_4038F0
.text:00401CA6                 mov     [esp+7Ch+var_40], eax
.text:00401CAA                 call    _errno
.text:00401CAF                 mov     edx, [eax]
.text:00401CB1                 mov     [esp+7Ch+var_50], edx
.text:00401CB5
.text:00401CB5 loc_401CB5:                             ; CODE XREF: sub_401AD0+1C0↑j
.text:00401CB5                 test    edi, edi
.text:00401CB7                 jg      loc_401B80
.text:00401CBD                 mov     esi, [esp+7Ch+var_4C]
.text:00401CC1                 mov     ebx, [esp+7Ch+var_44]
.text:00401CC5                 mov     [esp+7Ch+ElementSize], esi
.text:00401CC9                 mov     [esp+7Ch+Buffer], ebx
.text:00401CCC                 call    sub_4038F0
.text:00401CD1                 mov     [esp+7Ch+var_44], eax
.text:00401CD5                 call    _errno
.text:00401CDA                 mov     edi, [eax]
.text:00401CDC                 mov     [esp+7Ch+ErrorMessage], edi
.text:00401CE0                 jmp     loc_401B80
.text:00401CE5 ; ---------------------------------------------------------------------------
.text:00401CE5
.text:00401CE5 loc_401CE5:                             ; CODE XREF: sub_401AD0+191↑j
.text:00401CE5                                         ; sub_401AD0+274↓j
.text:00401CE5                 mov     [esp+7Ch+ElementSize], ebx ; File
.text:00401CE9                 mov     [esp+7Ch+Buffer], 9 ; Ch
.text:00401CF0                 call    _flsbuf
.text:00401CF5                 jmp     loc_401C70
.text:00401CFA ; ---------------------------------------------------------------------------
.text:00401CFA
.text:00401CFA loc_401CFA:                             ; CODE XREF: sub_401AD0+170↑j
.text:00401CFA                 mov     [esp+7Ch+ElementSize], ebx ; File
.text:00401CFE                 mov     [esp+7Ch+Buffer], 9 ; Ch
.text:00401D05                 call    _flsbuf
.text:00401D0A                 jmp     loc_401C4F
.text:00401D0A ; ---------------------------------------------------------------------------
.text:00401D0F                 align 10h
.text:00401D10
.text:00401D10 loc_401D10:                             ; CODE XREF: sub_401AD0+127↑j
.text:00401D10                                         ; sub_401AD0+142↑j
.text:00401D10                 test    edi, edi
.text:00401D12                 jle     short loc_401D55
.text:00401D14
.text:00401D14 loc_401D14:                             ; CODE XREF: sub_401AD0+CB↑j
.text:00401D14                 cmp     ds:byte_407020, 0
.text:00401D1B                 mov     edx, ds:_iob
.text:00401D21                 mov     esi, [esp+7Ch+var_40]
.text:00401D25                 lea     ebx, [edx+20h]
.text:00401D28                 jz      loc_401C8E
.text:00401D2E                 cmp     ds:byte_407010, 0
.text:00401D35                 jz      loc_401C70
.text:00401D3B                 mov     ecx, [ebx+4]
.text:00401D3E                 dec     ecx
.text:00401D3F                 test    ecx, ecx
.text:00401D41                 mov     [ebx+4], ecx
.text:00401D44                 js      short loc_401CE5
.text:00401D46                 mov     ebp, [edx+20h]
.text:00401D49                 mov     byte ptr [ebp+0], 9
.text:00401D4D                 inc     dword ptr [edx+20h]
.text:00401D50                 jmp     loc_401C70
.text:00401D55 ; ---------------------------------------------------------------------------
.text:00401D55
.text:00401D55 loc_401D55:                             ; CODE XREF: sub_401AD0+EB↑j
.text:00401D55                                         ; sub_401AD0+242↑j
.text:00401D55                 mov     eax, ds:_iob
.text:00401D5A                 mov     edx, [esp+7Ch+var_44]
.text:00401D5E                 add     eax, 20h ; ' '
.text:00401D61                 cmp     ds:byte_407010, 0
.text:00401D68                 jz      loc_401C8E
.text:00401D6E                 mov     [esp+7Ch+Stream], eax
.text:00401D72                 mov     esi, [edx+4]
.text:00401D75                 mov     [esp+7Ch+ElementSize], 1
.text:00401D7D                 mov     [esp+7Ch+ElementCount], esi
.text:00401D81                 mov     eax, [edx+8]
.text:00401D84                 jmp     loc_401C86
.text:00401D84 ; ---------------------------------------------------------------------------
.text:00401D89                 align 10h
.text:00401D90
.text:00401D90 loc_401D90:                             ; CODE XREF: sub_401AD0+F8↑j
.text:00401D90                 mov     ecx, [edx+4]
.text:00401D93                 dec     ecx
.text:00401D94                 mov     [esp+7Ch+Stream], ecx ; char
.text:00401D98                 mov     ebp, [edx+8]
.text:00401D9B                 mov     [esp+7Ch+ElementCount], ebp ; char *
.text:00401D9F                 mov     edi, [esi+4]
.text:00401DA2                 dec     edi
.text:00401DA3                 mov     [esp+7Ch+ElementSize], edi ; int
.text:00401DA7                 mov     ebx, [esi+8]
.text:00401DAA                 mov     [esp+7Ch+Buffer], ebx ; char *
.text:00401DAD                 call    sub_4037C0
.text:00401DB2                 mov     edi, eax
.text:00401DB4                 jmp     loc_401C10
.text:00401DB9 ; ---------------------------------------------------------------------------
.text:00401DB9
.text:00401DB9 loc_401DB9:                             ; CODE XREF: sub_401AD0+BE↑j
.text:00401DB9                 mov     [esp+7Ch+var_58], 0
.text:00401DC1                 lea     esi, [esp+7Ch+var_34]
.text:00401DC5
.text:00401DC5 loc_401DC5:                             ; CODE XREF: sub_401AD0+328↓j
.text:00401DC5                 mov     ecx, [esi]
.text:00401DC7                 mov     [esp+7Ch+Buffer], ecx ; Block
.text:00401DCA                 call    free
.text:00401DCF                 mov     ebx, [esp+7Ch+var_58]
.text:00401DD3                 shl     ebx, 2
.text:00401DD6                 mov     eax, [esp+ebx+7Ch+var_4C]
.text:00401DDA                 test    byte ptr [eax+0Ch], 20h
.text:00401DDE                 jnz     short loc_401E3F
.text:00401DE0
.text:00401DE0 loc_401DE0:                             ; CODE XREF: sub_401AD0+3A6↓j
.text:00401DE0                 mov     [esp+7Ch+Buffer], eax ; Stream
.text:00401DE3                 call    fclose
.text:00401DE8                 test    eax, eax
.text:00401DEA                 jnz     short loc_401E07
.text:00401DEC
.text:00401DEC loc_401DEC:                             ; CODE XREF: sub_401AD0+36D↓j
.text:00401DEC                 inc     [esp+7Ch+var_58]
.text:00401DF0                 add     esi, 0Ch
.text:00401DF3                 cmp     [esp+7Ch+var_58], 1
.text:00401DF8                 jle     short loc_401DC5
.text:00401DFA                 movzx   eax, [esp+7Ch+var_59]
.text:00401DFF
.text:00401DFF loc_401DFF:                             ; CODE XREF: sub_401AD0+3DB↓j
.text:00401DFF                 add     esp, 6Ch
.text:00401E02                 pop     ebx
.text:00401E03                 pop     esi
.text:00401E04                 pop     edi
.text:00401E05                 pop     ebp
.text:00401E06                 retn
.text:00401E07 ; ---------------------------------------------------------------------------
.text:00401E07
.text:00401E07 loc_401E07:                             ; CODE XREF: sub_401AD0+31A↑j
.text:00401E07                 call    _errno
.text:00401E0C                 mov     edi, [esp+7Ch+var_58]
.text:00401E10                 mov     edx, [esp+7Ch+arg_0]
.text:00401E17                 mov     ebp, [edx+edi*4]
.text:00401E1A                 mov     [esp+7Ch+ElementCount], offset byte_401ABD ; char *
.text:00401E22                 mov     [esp+7Ch+Stream], ebp ; char
.text:00401E26                 mov     ebx, [eax]
.text:00401E28                 mov     [esp+7Ch+Buffer], 0 ; Code
.text:00401E2F                 mov     [esp+7Ch+ElementSize], ebx ; ErrorMessage
.text:00401E33                 call    sub_4051D0
.text:00401E38                 mov     [esp+7Ch+var_59], 0
.text:00401E3D                 jmp     short loc_401DEC
.text:00401E3F ; ---------------------------------------------------------------------------
.text:00401E3F
.text:00401E3F loc_401E3F:                             ; CODE XREF: sub_401AD0+30E↑j
.text:00401E3F                 mov     eax, [esp+7Ch+arg_0]
.text:00401E46                 mov     ecx, [esp+7Ch+var_58]
.text:00401E4A                 mov     edi, [eax+ecx*4]
.text:00401E4D                 mov     [esp+7Ch+ElementCount], offset byte_401ABD ; char *
.text:00401E55                 mov     [esp+7Ch+Stream], edi ; char
.text:00401E59                 mov     ebp, [esp+ebx+7Ch+ErrorMessage]
.text:00401E5D                 mov     [esp+7Ch+Buffer], 0 ; Code
.text:00401E64                 mov     [esp+7Ch+ElementSize], ebp ; ErrorMessage
.text:00401E68                 call    sub_4051D0
.text:00401E6D                 mov     [esp+7Ch+var_59], 0
.text:00401E72                 mov     eax, [esp+ebx+7Ch+var_4C]
.text:00401E76                 jmp     loc_401DE0
.text:00401E7B ; ---------------------------------------------------------------------------
.text:00401E7B
.text:00401E7B loc_401E7B:                             ; CODE XREF: sub_401AD0+6A↑j
.text:00401E7B                 call    _errno
.text:00401E80                 mov     ebp, [esp+7Ch+arg_0]
.text:00401E87                 mov     edi, [ebp+ebx+0]
.text:00401E8B                 mov     [esp+7Ch+ElementCount], offset byte_401ABD ; char *
.text:00401E93                 mov     [esp+7Ch+Stream], edi ; char
.text:00401E97                 mov     ebx, [eax]
.text:00401E99                 mov     [esp+7Ch+Buffer], 0 ; Code
.text:00401EA0                 mov     [esp+7Ch+ElementSize], ebx ; ErrorMessage
.text:00401EA4                 call    sub_4051D0
.text:00401EA9                 xor     eax, eax
.text:00401EAB                 jmp     loc_401DFF
.text:00401EB0 ; ---------------------------------------------------------------------------
.text:00401EB0
.text:00401EB0 loc_401EB0:                             ; CODE XREF: sub_401AD0+51↑j
.text:00401EB0                 mov     [esp+7Ch+ElementSize], offset aR ; "r"
.text:00401EB8                 mov     [esp+7Ch+Buffer], ebp ; FileName
.text:00401EBB                 call    fopen
.text:00401EC0                 jmp     loc_401B2C
.text:00401EC0 sub_401AD0      endp
.text:00401EC0
.text:00401EC0 ; ---------------------------------------------------------------------------
.text:00401EC5                 align 20h
.text:00401EE0 dword_401EE0    dd 90002D2Dh, 7 dup(90909090h)
.text:00401EE0                                         ; DATA XREF: sub_402130+E4↓o
.text:00401F00 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401F00                                         ; DATA XREF: sub_402130+2FC↓o
.text:00401F2D                 align 20h
.text:00401F40 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401F40                                         ; DATA XREF: sub_402130:loc_402492↓o
.text:00401F6D                 align 20h
.text:00401F80 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401F80                                         ; DATA XREF: sub_402130:loc_402530↓o
.text:00401F80                                         ; sub_402130:loc_4028F7↓o
.text:00401FA6                 align 20h
.text:00401FC0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401FC0                                         ; DATA XREF: sub_402130+48E↓o
.text:00401FE0 dword_401FE0    dd 90909000h, 7 dup(90909090h)
.text:00401FE0                                         ; DATA XREF: sub_402130:loc_402601↓o
.text:00402000 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402000                                         ; DATA XREF: sub_402130:loc_40261A↓o
.text:00402020 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402020                                         ; DATA XREF: sub_402130:loc_4026FF↓o
.text:00402020                                         ; sub_402130:loc_402A2C↓o
.text:00402047                 align 20h
.text:00402060 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402060                                         ; DATA XREF: sub_402130:loc_402873↓o
.text:0040208E                 align 20h
.text:004020A0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004020A0                                         ; DATA XREF: sub_402130:loc_40295F↓o
.text:004020C1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:004020C1                                         ; DATA XREF: sub_402130+93F↓o
.text:004020DB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:004020DB                                         ; DATA XREF: sub_402130:loc_402AA7↓o
.text:004020F5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:004020F5                                         ; DATA XREF: sub_402130:loc_402ACE↓o
.text:00402113 ; const char VarName[]
.text:00402113 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402130:loc_402C80↓o
.text:00402123                 align 10h
.text:00402130
.text:00402130 ; =============== S U B R O U T I N E =======================================
.text:00402130
.text:00402130
.text:00402130 ; int __cdecl sub_402130(int, int, char *Str, int, int, int, int, int)
.text:00402130 sub_402130      proc near               ; CODE XREF: sub_402CC0+5A↓p
.text:00402130                                         ; .text:00402DAA↓p ...
.text:00402130
.text:00402130 Str1            = dword ptr -5Ch
.text:00402130 Str2            = dword ptr -58h
.text:00402130 MaxCount        = dword ptr -54h
.text:00402130 var_50          = dword ptr -50h
.text:00402130 var_4C          = dword ptr -4Ch
.text:00402130 var_3C          = dword ptr -3Ch
.text:00402130 var_38          = dword ptr -38h
.text:00402130 var_34          = dword ptr -34h
.text:00402130 var_30          = dword ptr -30h
.text:00402130 var_2C          = dword ptr -2Ch
.text:00402130 var_28          = dword ptr -28h
.text:00402130 var_24          = dword ptr -24h
.text:00402130 var_20          = dword ptr -20h
.text:00402130 var_1C          = dword ptr -1Ch
.text:00402130 var_18          = dword ptr -18h
.text:00402130 var_14          = dword ptr -14h
.text:00402130 arg_0           = dword ptr  4
.text:00402130 arg_4           = dword ptr  8
.text:00402130 Str             = dword ptr  0Ch
.text:00402130 arg_C           = dword ptr  10h
.text:00402130 arg_10          = dword ptr  14h
.text:00402130 arg_14          = dword ptr  18h
.text:00402130 arg_18          = dword ptr  1Ch
.text:00402130 arg_1C          = dword ptr  20h
.text:00402130
.text:00402130                 push    ebp
.text:00402131                 mov     eax, 0FFFFFFFFh
.text:00402136                 push    edi
.text:00402137                 push    esi
.text:00402138                 push    ebx
.text:00402139                 sub     esp, 4Ch
.text:0040213C                 mov     esi, [esp+5Ch+Str]
.text:00402140                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402144                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402147                 mov     ebx, [ebp+4]
.text:0040214A                 setz    dl
.text:0040214D                 movzx   ecx, dl
.text:00402150                 dec     ecx
.text:00402151                 and     ecx, ebx
.text:00402153                 mov     [esp+5Ch+var_14], ecx
.text:00402157                 mov     ecx, [esp+5Ch+arg_0]
.text:0040215B                 test    ecx, ecx
.text:0040215D                 jle     loc_402287
.text:00402163                 mov     dword ptr [ebp+0Ch], 0
.text:0040216A                 mov     ebx, [ebp+0]
.text:0040216D                 test    ebx, ebx
.text:0040216F                 jz      loc_402CA0
.text:00402175                 mov     edi, [ebp+10h]
.text:00402178                 test    edi, edi
.text:0040217A                 jnz     short loc_4021D3
.text:0040217C                 lea     esi, [esi+0]
.text:00402180
.text:00402180 loc_402180:                             ; CODE XREF: sub_402130+B7C↓j
.text:00402180                 mov     [ebp+24h], ebx
.text:00402183                 mov     esi, [esp+5Ch+Str]
.text:00402187                 mov     [ebp+20h], ebx
.text:0040218A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040218E                 xor     ebx, ebx
.text:00402190                 mov     dword ptr [ebp+14h], 0
.text:00402197                 test    ecx, ecx
.text:00402199                 jz      loc_402C80
.text:0040219F
.text:0040219F loc_40219F:                             ; CODE XREF: sub_402130+B64↓j
.text:0040219F                 mov     ebx, 1
.text:004021A4
.text:004021A4 loc_4021A4:                             ; CODE XREF: sub_402130+B5E↓j
.text:004021A4                 mov     [ebp+1Ch], ebx
.text:004021A7                 mov     ecx, [esp+5Ch+Str]
.text:004021AB                 movzx   eax, byte ptr [ecx]
.text:004021AE                 cmp     al, 2Dh ; '-'
.text:004021B0                 jz      loc_402C70
.text:004021B6                 cmp     al, 2Bh ; '+'
.text:004021B8                 jz      loc_402C59
.text:004021BE                 xor     edx, edx
.text:004021C0                 test    ebx, ebx
.text:004021C2                 setz    dl
.text:004021C5                 mov     [ebp+18h], edx
.text:004021C8
.text:004021C8 loc_4021C8:                             ; CODE XREF: sub_402130+B35↓j
.text:004021C8                 mov     [esp+5Ch+Str], esi
.text:004021CC                 mov     dword ptr [ebp+10h], 1
.text:004021D3
.text:004021D3 loc_4021D3:                             ; CODE XREF: sub_402130+4A↑j
.text:004021D3                 mov     eax, [ebp+14h]
.text:004021D6                 test    eax, eax
.text:004021D8                 jz      short loc_4021E3
.text:004021DA                 cmp     byte ptr [eax], 0
.text:004021DD                 jnz     loc_4022C0
.text:004021E3
.text:004021E3 loc_4021E3:                             ; CODE XREF: sub_402130+A8↑j
.text:004021E3                 mov     ebx, [ebp+0]
.text:004021E6                 cmp     [ebp+24h], ebx
.text:004021E9                 jle     short loc_4021EE
.text:004021EB                 mov     [ebp+24h], ebx
.text:004021EE
.text:004021EE loc_4021EE:                             ; CODE XREF: sub_402130+B9↑j
.text:004021EE                 cmp     [ebp+20h], ebx
.text:004021F1                 jle     short loc_4021F6
.text:004021F3                 mov     [ebp+20h], ebx
.text:004021F6
.text:004021F6 loc_4021F6:                             ; CODE XREF: sub_402130+C1↑j
.text:004021F6                 cmp     dword ptr [ebp+18h], 1
.text:004021FA                 jz      loc_402BD0
.text:00402200
.text:00402200 loc_402200:                             ; CODE XREF: sub_402130+B13↓j
.text:00402200                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402204                 jz      loc_402BB4
.text:0040220A                 cld
.text:0040220B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040220F                 mov     edx, 3
.text:00402214                 mov     edi, offset dword_401EE0
.text:00402219                 mov     esi, [ecx+ebx*4]
.text:0040221C                 mov     ecx, edx
.text:0040221E                 repe cmpsb
.text:00402220                 jnz     short loc_40225C
.text:00402222                 mov     edx, [ebp+24h]
.text:00402225                 lea     eax, [ebx+1]
.text:00402228                 cmp     [ebp+20h], edx
.text:0040222B                 mov     [ebp+0], eax
.text:0040222E                 jz      loc_402BC8
.text:00402234                 cmp     edx, eax
.text:00402236                 jz      short loc_402250
.text:00402238                 mov     [esp+5Ch+Str2], ebp
.text:0040223C                 mov     ebx, [esp+5Ch+arg_4]
.text:00402240                 mov     [esp+5Ch+Str1], ebx
.text:00402243                 call    sub_402DE0
.text:00402248                 nop
.text:00402249                 lea     esi, [esi+0]
.text:00402250
.text:00402250 loc_402250:                             ; CODE XREF: sub_402130+106↑j
.text:00402250                                         ; sub_402130+A9B↓j
.text:00402250                 mov     eax, [esp+5Ch+arg_0]
.text:00402254                 mov     ebx, eax
.text:00402256                 mov     [ebp+24h], eax
.text:00402259                 mov     [ebp+0], eax
.text:0040225C
.text:0040225C loc_40225C:                             ; CODE XREF: sub_402130+F0↑j
.text:0040225C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402260                 jz      loc_402BB4
.text:00402266                 mov     esi, [esp+5Ch+arg_4]
.text:0040226A                 mov     eax, [esi+ebx*4]
.text:0040226D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402270                 jz      short loc_402297
.text:00402272
.text:00402272 loc_402272:                             ; CODE XREF: sub_402130+16D↓j
.text:00402272                 mov     edx, [ebp+18h]
.text:00402275                 test    edx, edx
.text:00402277                 jz      short loc_402290
.text:00402279                 mov     [ebp+0Ch], eax
.text:0040227C                 lea     edi, [ebx+1]
.text:0040227F                 mov     eax, 1
.text:00402284                 mov     [ebp+0], edi
.text:00402287
.text:00402287 loc_402287:                             ; CODE XREF: sub_402130+2D↑j
.text:00402287                                         ; sub_402130+165↓j ...
.text:00402287                 add     esp, 4Ch
.text:0040228A                 pop     ebx
.text:0040228B                 pop     esi
.text:0040228C                 pop     edi
.text:0040228D                 pop     ebp
.text:0040228E                 retn
.text:0040228E ; ---------------------------------------------------------------------------
.text:0040228F                 align 10h
.text:00402290
.text:00402290 loc_402290:                             ; CODE XREF: sub_402130+147↑j
.text:00402290                                         ; sub_402130+A8A↓j ...
.text:00402290                 mov     eax, 0FFFFFFFFh
.text:00402295                 jmp     short loc_402287
.text:00402297 ; ---------------------------------------------------------------------------
.text:00402297
.text:00402297 loc_402297:                             ; CODE XREF: sub_402130+140↑j
.text:00402297                 movzx   edx, byte ptr [eax+1]
.text:0040229B                 test    dl, dl
.text:0040229D                 jz      short loc_402272
.text:0040229F                 mov     ebx, [esp+5Ch+arg_C]
.text:004022A3                 xor     ecx, ecx
.text:004022A5                 test    ebx, ebx
.text:004022A7                 jz      short loc_4022B2
.text:004022A9                 cmp     dl, 2Dh ; '-'
.text:004022AC                 jz      loc_402BAA
.text:004022B2
.text:004022B2 loc_4022B2:                             ; CODE XREF: sub_402130+177↑j
.text:004022B2                                         ; sub_402130+A7F↓j
.text:004022B2                 lea     esi, [ecx+eax+1]
.text:004022B6                 mov     [ebp+14h], esi
.text:004022B9                 lea     esi, [esi+0]
.text:004022C0
.text:004022C0 loc_4022C0:                             ; CODE XREF: sub_402130+AD↑j
.text:004022C0                 mov     ecx, [esp+5Ch+arg_C]
.text:004022C4                 test    ecx, ecx
.text:004022C6                 jz      loc_402650
.text:004022CC                 mov     edx, [ebp+0]
.text:004022CF                 mov     edi, [esp+5Ch+arg_4]
.text:004022D3                 mov     eax, [edi+edx*4]
.text:004022D6                 movzx   edx, byte ptr [eax+1]
.text:004022DA                 cmp     dl, 2Dh ; '-'
.text:004022DD                 jz      short loc_4022F5
.text:004022DF                 mov     ebx, [esp+5Ch+arg_14]
.text:004022E3                 test    ebx, ebx
.text:004022E5                 jz      loc_402650
.text:004022EB                 cmp     byte ptr [eax+2], 0
.text:004022EF                 jz      loc_402B8A
.text:004022F5
.text:004022F5 loc_4022F5:                             ; CODE XREF: sub_402130+1AD↑j
.text:004022F5                                         ; sub_402130+A75↓j
.text:004022F5                 mov     [esp+5Ch+var_18], 0
.text:004022FD                 mov     ecx, [ebp+14h]
.text:00402300                 mov     [esp+5Ch+var_1C], 0
.text:00402308                 mov     [esp+5Ch+var_20], 0
.text:00402310                 mov     edi, ecx
.text:00402312                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040231A                 movzx   eax, byte ptr [ecx]
.text:0040231D                 test    al, al
.text:0040231F                 jz      short loc_40233C
.text:00402321                 cmp     al, 3Dh ; '='
.text:00402323                 jz      short loc_40233C
.text:00402325                 lea     esi, [esi+0]
.text:00402329                 lea     edi, [edi+0]
.text:00402330
.text:00402330 loc_402330:                             ; CODE XREF: sub_402130+20A↓j
.text:00402330                 inc     edi
.text:00402331                 movzx   eax, byte ptr [edi]
.text:00402334                 test    al, al
.text:00402336                 jz      short loc_40233C
.text:00402338                 cmp     al, 3Dh ; '='
.text:0040233A                 jnz     short loc_402330
.text:0040233C
.text:0040233C loc_40233C:                             ; CODE XREF: sub_402130+1EF↑j
.text:0040233C                                         ; sub_402130+1F3↑j ...
.text:0040233C                 mov     [esp+5Ch+var_28], 0
.text:00402344                 mov     esi, [esp+5Ch+arg_C]
.text:00402348                 mov     ebx, [esi]
.text:0040234A                 test    ebx, ebx
.text:0040234C                 mov     edx, ebx
.text:0040234E                 jz      loc_402570
.text:00402354                 lea     esi, [esi+0]
.text:0040235A                 lea     edi, [edi+0]
.text:00402360
.text:00402360 loc_402360:                             ; CODE XREF: sub_402130+25E↓j
.text:00402360                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402364                 mov     ebx, edi
.text:00402366                 sub     ebx, ecx
.text:00402368                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040236C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040236F                 call    strncmp
.text:00402374                 test    eax, eax
.text:00402376                 jz      loc_402B06
.text:0040237C
.text:0040237C loc_40237C:                             ; CODE XREF: sub_402130+A0F↓j
.text:0040237C                                         ; sub_402130+A24↓j ...
.text:0040237C                 inc     [esp+5Ch+var_28]
.text:00402380                 add     esi, 10h
.text:00402383                 mov     ecx, [esi]
.text:00402385                 test    ecx, ecx
.text:00402387                 mov     edx, ecx
.text:00402389                 jz      short loc_402390
.text:0040238B                 mov     ecx, [ebp+14h]
.text:0040238E                 jmp     short loc_402360
.text:00402390 ; ---------------------------------------------------------------------------
.text:00402390
.text:00402390 loc_402390:                             ; CODE XREF: sub_402130+259↑j
.text:00402390                                         ; sub_402130+A55↓j
.text:00402390                 mov     esi, [esp+5Ch+var_20]
.text:00402394                 test    esi, esi
.text:00402396                 jz      short loc_4023A4
.text:00402398                 mov     edx, [esp+5Ch+var_1C]
.text:0040239C                 test    edx, edx
.text:0040239E                 jz      loc_402AB0
.text:004023A4
.text:004023A4 loc_4023A4:                             ; CODE XREF: sub_402130+266↑j
.text:004023A4                 mov     eax, [esp+5Ch+var_18]
.text:004023A8                 test    eax, eax
.text:004023AA                 jz      loc_402570
.text:004023B0                 mov     ecx, [ebp+0]
.text:004023B3                 lea     eax, [ecx+1]
.text:004023B6                 mov     [ebp+0], eax
.text:004023B9                 cmp     byte ptr [edi], 0
.text:004023BC                 jz      loc_4024D0
.text:004023C2                 mov     ecx, [esp+5Ch+var_18]
.text:004023C6                 mov     esi, [ecx+4]
.text:004023C9                 test    esi, esi
.text:004023CB                 jz      short loc_402416
.text:004023CD                 lea     ebx, [edi+1]
.text:004023D0                 mov     [ebp+0Ch], ebx
.text:004023D3
.text:004023D3 loc_4023D3:                             ; CODE XREF: sub_402130+3A8↓j
.text:004023D3                                         ; sub_402130+3C4↓j
.text:004023D3                 mov     ebx, [ebp+14h]
.text:004023D6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:004023D9                 call    strlen
.text:004023DE                 add     [ebp+14h], eax
.text:004023E1                 mov     esi, [esp+5Ch+arg_10]
.text:004023E5                 test    esi, esi
.text:004023E7                 jz      short loc_4023F3
.text:004023E9                 mov     ebp, [esp+5Ch+var_24]
.text:004023ED                 mov     ecx, [esp+5Ch+arg_10]
.text:004023F1                 mov     [ecx], ebp
.text:004023F3
.text:004023F3 loc_4023F3:                             ; CODE XREF: sub_402130+2B7↑j
.text:004023F3                 mov     eax, [esp+5Ch+var_18]
.text:004023F7                 mov     ecx, [eax+8]
.text:004023FA                 test    ecx, ecx
.text:004023FC                 jnz     short loc_40240A
.text:004023FE                 mov     ecx, [esp+5Ch+var_18]
.text:00402402
.text:00402402 loc_402402:                             ; CODE XREF: sub_402130+723↓j
.text:00402402                 mov     eax, [ecx+0Ch]
.text:00402405                 jmp     loc_402287
.text:0040240A ; ---------------------------------------------------------------------------
.text:0040240A
.text:0040240A loc_40240A:                             ; CODE XREF: sub_402130+2CC↑j
.text:0040240A                                         ; sub_402130+719↓j
.text:0040240A                 mov     esi, [eax+0Ch]
.text:0040240D                 xor     eax, eax
.text:0040240F                 mov     [ecx], esi
.text:00402411                 jmp     loc_402287
.text:00402416 ; ---------------------------------------------------------------------------
.text:00402416
.text:00402416 loc_402416:                             ; CODE XREF: sub_402130+29B↑j
.text:00402416                 mov     edi, [esp+5Ch+var_14]
.text:0040241A                 test    edi, edi
.text:0040241C                 jz      short loc_402470
.text:0040241E                 mov     esi, [esp+5Ch+arg_4]
.text:00402422                 mov     edx, [esi+eax*4-4]
.text:00402426                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040242A                 jz      short loc_402492
.text:0040242C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402433                 call    ds:libintl_gettext
.text:00402439                 mov     edx, [esp+5Ch+var_18]
.text:0040243D                 mov     edi, [edx]
.text:0040243F                 mov     [esp+5Ch+var_4C], edi
.text:00402443                 mov     ebx, [ebp+0]
.text:00402446                 mov     edi, [esp+5Ch+arg_4]
.text:0040244A                 mov     ecx, [edi+ebx*4-4]
.text:0040244E                 movsx   esi, byte ptr [ecx]
.text:00402451                 mov     ecx, ds:_iob
.text:00402457                 add     ecx, 40h ; '@'
.text:0040245A                 mov     [esp+5Ch+var_50], esi
.text:0040245E                 mov     ebx, [edi]
.text:00402460                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402464                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402467                 mov     [esp+5Ch+MaxCount], ebx
.text:0040246B                 call    fprintf
.text:00402470
.text:00402470 loc_402470:                             ; CODE XREF: sub_402130+2EC↑j
.text:00402470                                         ; sub_402130+398↓j
.text:00402470                 mov     ecx, [ebp+14h]
.text:00402473                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402476                 call    strlen
.text:0040247B                 add     [ebp+14h], eax
.text:0040247E                 mov     eax, [esp+5Ch+var_18]
.text:00402482                 mov     esi, [eax+0Ch]
.text:00402485                 mov     [ebp+8], esi
.text:00402488
.text:00402488 loc_402488:                             ; CODE XREF: sub_402130+4E5↓j
.text:00402488                                         ; sub_402130+73E↓j ...
.text:00402488                 mov     eax, 3Fh ; '?'
.text:0040248D                 jmp     loc_402287
.text:00402492 ; ---------------------------------------------------------------------------
.text:00402492
.text:00402492 loc_402492:                             ; CODE XREF: sub_402130+2FA↑j
.text:00402492                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402499                 call    ds:libintl_gettext
.text:0040249F                 mov     edx, [esp+5Ch+var_18]
.text:004024A3                 mov     edi, [esp+5Ch+arg_4]
.text:004024A7                 mov     ecx, ds:_iob
.text:004024AD                 mov     esi, [edx]
.text:004024AF                 add     ecx, 40h ; '@'
.text:004024B2                 mov     [esp+5Ch+var_50], esi
.text:004024B6                 mov     ebx, [edi]
.text:004024B8                 mov     [esp+5Ch+Str2], eax ; Format
.text:004024BC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004024BF                 mov     [esp+5Ch+MaxCount], ebx
.text:004024C3                 call    fprintf
.text:004024C8                 jmp     short loc_402470
.text:004024C8 ; ---------------------------------------------------------------------------
.text:004024CA                 align 10h
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_402130+28C↑j
.text:004024D0                 mov     ebx, [esp+5Ch+var_18]
.text:004024D4                 cmp     dword ptr [ebx+4], 1
.text:004024D8                 jnz     loc_4023D3
.text:004024DE                 cmp     eax, [esp+5Ch+arg_0]
.text:004024E2                 jge     short loc_4024F9
.text:004024E4                 mov     ebx, [esp+5Ch+arg_4]
.text:004024E8                 lea     edi, [ecx+2]
.text:004024EB                 mov     [ebp+0], edi
.text:004024EE                 mov     esi, [ebx+eax*4]
.text:004024F1                 mov     [ebp+0Ch], esi
.text:004024F4                 jmp     loc_4023D3
.text:004024F9 ; ---------------------------------------------------------------------------
.text:004024F9
.text:004024F9 loc_4024F9:                             ; CODE XREF: sub_402130+3B2↑j
.text:004024F9                 mov     edx, [esp+5Ch+var_14]
.text:004024FD                 test    edx, edx
.text:004024FF                 jnz     short loc_402530
.text:00402501
.text:00402501 loc_402501:                             ; CODE XREF: sub_402130+437↓j
.text:00402501                 mov     edx, [ebp+14h]
.text:00402504                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402507                 call    strlen
.text:0040250C                 add     [ebp+14h], eax
.text:0040250F                 mov     eax, [esp+5Ch+var_18]
.text:00402513                 mov     edi, [eax+0Ch]
.text:00402516                 mov     [ebp+8], edi
.text:00402519
.text:00402519 loc_402519:                             ; CODE XREF: sub_402130+7C2↓j
.text:00402519                 mov     ebp, [esp+5Ch+Str]
.text:0040251D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402521                 setnz   bl
.text:00402524                 movzx   esi, bl
.text:00402527                 lea     eax, [esi+esi*4+3Ah]
.text:0040252B                 jmp     loc_402287
.text:00402530 ; ---------------------------------------------------------------------------
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: sub_402130+3CF↑j
.text:00402530                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402537                 call    ds:libintl_gettext
.text:0040253D                 mov     ecx, [ebp+0]
.text:00402540                 mov     esi, [esp+5Ch+arg_4]
.text:00402544                 mov     ebx, [esi+ecx*4-4]
.text:00402548                 mov     ecx, ds:_iob
.text:0040254E                 mov     [esp+5Ch+var_50], ebx
.text:00402552                 mov     edi, [esi]
.text:00402554                 add     ecx, 40h ; '@'
.text:00402557                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040255B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040255E                 mov     [esp+5Ch+MaxCount], edi
.text:00402562                 call    fprintf
.text:00402567                 jmp     short loc_402501
.text:00402567 ; ---------------------------------------------------------------------------
.text:00402569                 align 10h
.text:00402570
.text:00402570 loc_402570:                             ; CODE XREF: sub_402130+21E↑j
.text:00402570                                         ; sub_402130+27A↑j
.text:00402570                 mov     eax, [esp+5Ch+arg_14]
.text:00402574                 test    eax, eax
.text:00402576                 jz      short loc_4025A6
.text:00402578                 mov     ebx, [ebp+0]
.text:0040257B                 mov     esi, [esp+5Ch+arg_4]
.text:0040257F                 mov     edi, [esi+ebx*4]
.text:00402582                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402586                 jz      short loc_4025A9
.text:00402588                 mov     ecx, [ebp+14h]
.text:0040258B                 mov     edx, [esp+5Ch+Str]
.text:0040258F                 movsx   ebx, byte ptr [ecx]
.text:00402592                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402595                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402599                 call    strchr
.text:0040259E                 test    eax, eax
.text:004025A0                 jnz     loc_402650
.text:004025A6
.text:004025A6 loc_4025A6:                             ; CODE XREF: sub_402130+446↑j
.text:004025A6                 mov     ebx, [ebp+0]
.text:004025A9
.text:004025A9 loc_4025A9:                             ; CODE XREF: sub_402130+456↑j
.text:004025A9                 mov     eax, [esp+5Ch+var_14]
.text:004025AD                 test    eax, eax
.text:004025AF                 jz      short loc_402601
.text:004025B1                 mov     esi, [esp+5Ch+arg_4]
.text:004025B5                 mov     edi, [esi+ebx*4]
.text:004025B8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004025BC                 jz      short loc_40261A
.text:004025BE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:004025C5                 call    ds:libintl_gettext
.text:004025CB                 mov     edi, [ebp+14h]
.text:004025CE                 mov     [esp+5Ch+var_4C], edi
.text:004025D2                 mov     ebx, [ebp+0]
.text:004025D5                 mov     edi, [esp+5Ch+arg_4]
.text:004025D9                 mov     esi, [edi+ebx*4]
.text:004025DC                 movsx   ecx, byte ptr [esi]
.text:004025DF                 mov     esi, ds:_iob
.text:004025E5                 add     esi, 40h ; '@'
.text:004025E8                 mov     [esp+5Ch+var_50], ecx
.text:004025EC                 mov     ebx, [edi]
.text:004025EE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025F2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004025F5                 mov     [esp+5Ch+MaxCount], ebx
.text:004025F9                 call    fprintf
.text:004025FE
.text:004025FE loc_4025FE:                             ; CODE XREF: sub_402130+51D↓j
.text:004025FE                 mov     ebx, [ebp+0]
.text:00402601
.text:00402601 loc_402601:                             ; CODE XREF: sub_402130+47F↑j
.text:00402601                 mov     dword ptr [ebp+14h], offset dword_401FE0
.text:00402608                 lea     edx, [ebx+1]
.text:0040260B                 mov     [ebp+0], edx
.text:0040260E
.text:0040260E loc_40260E:                             ; CODE XREF: sub_402130+999↓j
.text:0040260E                 mov     dword ptr [ebp+8], 0
.text:00402615                 jmp     loc_402488
.text:0040261A ; ---------------------------------------------------------------------------
.text:0040261A
.text:0040261A loc_40261A:                             ; CODE XREF: sub_402130+48C↑j
.text:0040261A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402621                 call    ds:libintl_gettext
.text:00402627                 mov     ecx, [ebp+14h]
.text:0040262A                 mov     edi, [esp+5Ch+arg_4]
.text:0040262E                 mov     edx, ds:_iob
.text:00402634                 mov     [esp+5Ch+var_50], ecx
.text:00402638                 mov     ebx, [edi]
.text:0040263A                 add     edx, 40h ; '@'
.text:0040263D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402641                 mov     [esp+5Ch+MaxCount], ebx
.text:00402645                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402648                 call    fprintf
.text:0040264D                 jmp     short loc_4025FE
.text:0040264D ; ---------------------------------------------------------------------------
.text:0040264F                 align 10h
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_402130+196↑j
.text:00402650                                         ; sub_402130+1B5↑j ...
.text:00402650                 mov     esi, [ebp+14h]
.text:00402653                 movzx   ebx, byte ptr [esi]
.text:00402656                 inc     esi
.text:00402657                 mov     [ebp+14h], esi
.text:0040265A                 mov     ecx, [esp+5Ch+Str]
.text:0040265E                 movsx   esi, bl
.text:00402661                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402665                 mov     edi, esi
.text:00402667                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040266A                 call    strchr
.text:0040266F                 mov     ecx, [ebp+14h]
.text:00402672                 cmp     byte ptr [ecx], 0
.text:00402675                 jnz     short loc_40267A
.text:00402677                 inc     dword ptr [ebp+0]
.text:0040267A
.text:0040267A loc_40267A:                             ; CODE XREF: sub_402130+545↑j
.text:0040267A                 test    eax, eax
.text:0040267C                 jz      loc_402A60
.text:00402682                 cmp     bl, 3Ah ; ':'
.text:00402685                 jz      loc_402A60
.text:0040268B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040268E                 jz      loc_402746
.text:00402694                 movzx   edx, byte ptr [eax+1]
.text:00402698
.text:00402698 loc_402698:                             ; CODE XREF: sub_402130+61D↓j
.text:00402698                 cmp     dl, 3Ah ; ':'
.text:0040269B                 jz      short loc_4026A4
.text:0040269D
.text:0040269D loc_40269D:                             ; CODE XREF: sub_402130+590↓j
.text:0040269D                 mov     eax, esi
.text:0040269F                 jmp     loc_402287
.text:004026A4 ; ---------------------------------------------------------------------------
.text:004026A4
.text:004026A4 loc_4026A4:                             ; CODE XREF: sub_402130+56B↑j
.text:004026A4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004026A8                 jz      loc_402731
.text:004026AE                 cmp     byte ptr [ecx], 0
.text:004026B1                 jz      short loc_4026C2
.text:004026B3
.text:004026B3 loc_4026B3:                             ; CODE XREF: sub_402130+604↓j
.text:004026B3                 inc     dword ptr [ebp+0]
.text:004026B6                 mov     [ebp+0Ch], ecx
.text:004026B9
.text:004026B9 loc_4026B9:                             ; CODE XREF: sub_402130+5AB↓j
.text:004026B9                                         ; sub_402130+5C6↓j ...
.text:004026B9                 mov     dword ptr [ebp+14h], 0
.text:004026C0                 jmp     short loc_40269D
.text:004026C2 ; ---------------------------------------------------------------------------
.text:004026C2
.text:004026C2 loc_4026C2:                             ; CODE XREF: sub_402130+581↑j
.text:004026C2                 mov     ecx, [ebp+0]
.text:004026C5                 cmp     ecx, [esp+5Ch+arg_0]
.text:004026C9                 jz      short loc_4026DD
.text:004026CB                 mov     eax, [esp+5Ch+arg_4]
.text:004026CF                 lea     edx, [ecx+1]
.text:004026D2                 mov     [ebp+0], edx
.text:004026D5                 mov     ebx, [eax+ecx*4]
.text:004026D8                 mov     [ebp+0Ch], ebx
.text:004026DB                 jmp     short loc_4026B9
.text:004026DD ; ---------------------------------------------------------------------------
.text:004026DD
.text:004026DD loc_4026DD:                             ; CODE XREF: sub_402130+599↑j
.text:004026DD                 mov     ecx, [esp+5Ch+var_14]
.text:004026E1                 test    ecx, ecx
.text:004026E3                 jnz     short loc_4026FF
.text:004026E5
.text:004026E5 loc_4026E5:                             ; CODE XREF: sub_402130+5FF↓j
.text:004026E5                 mov     [ebp+8], edi
.text:004026E8                 mov     edi, [esp+5Ch+Str]
.text:004026EC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004026EF                 jz      short loc_4026F8
.text:004026F1                 mov     esi, 3Fh ; '?'
.text:004026F6                 jmp     short loc_4026B9
.text:004026F8 ; ---------------------------------------------------------------------------
.text:004026F8
.text:004026F8 loc_4026F8:                             ; CODE XREF: sub_402130+5BF↑j
.text:004026F8                 mov     esi, 3Ah ; ':'
.text:004026FD                 jmp     short loc_4026B9
.text:004026FF ; ---------------------------------------------------------------------------
.text:004026FF
.text:004026FF loc_4026FF:                             ; CODE XREF: sub_402130+5B3↑j
.text:004026FF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402706                 call    ds:libintl_gettext
.text:0040270C                 mov     [esp+5Ch+var_50], edi
.text:00402710                 mov     ebx, [esp+5Ch+arg_4]
.text:00402714                 mov     edx, ds:_iob
.text:0040271A                 mov     esi, [ebx]
.text:0040271C                 add     edx, 40h ; '@'
.text:0040271F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402723                 mov     [esp+5Ch+MaxCount], esi
.text:00402727                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040272A                 call    fprintf
.text:0040272F                 jmp     short loc_4026E5
.text:00402731 ; ---------------------------------------------------------------------------
.text:00402731
.text:00402731 loc_402731:                             ; CODE XREF: sub_402130+578↑j
.text:00402731                 cmp     byte ptr [ecx], 0
.text:00402734                 jnz     loc_4026B3
.text:0040273A                 mov     dword ptr [ebp+0Ch], 0
.text:00402741                 jmp     loc_4026B9
.text:00402746 ; ---------------------------------------------------------------------------
.text:00402746
.text:00402746 loc_402746:                             ; CODE XREF: sub_402130+55E↑j
.text:00402746                 movzx   edx, byte ptr [eax+1]
.text:0040274A                 cmp     dl, 3Bh ; ';'
.text:0040274D                 jnz     loc_402698
.text:00402753                 mov     [esp+5Ch+var_2C], 0
.text:0040275B                 mov     [esp+5Ch+var_30], 0
.text:00402763                 mov     [esp+5Ch+var_34], 0
.text:0040276B                 mov     [esp+5Ch+var_38], 0
.text:00402773                 cmp     byte ptr [ecx], 0
.text:00402776                 jz      loc_4029EB
.text:0040277C                 inc     dword ptr [ebp+0]
.text:0040277F                 mov     [ebp+0Ch], ecx
.text:00402782
.text:00402782 loc_402782:                             ; CODE XREF: sub_402130+8D4↓j
.text:00402782                 mov     edi, [ebp+0Ch]
.text:00402785                 mov     [ebp+14h], edi
.text:00402788                 movzx   eax, byte ptr [edi]
.text:0040278B                 test    al, al
.text:0040278D                 jz      short loc_40279F
.text:0040278F                 cmp     al, 3Dh ; '='
.text:00402791                 jz      short loc_40279F
.text:00402793
.text:00402793 loc_402793:                             ; CODE XREF: sub_402130+66D↓j
.text:00402793                 inc     edi
.text:00402794                 movzx   eax, byte ptr [edi]
.text:00402797                 test    al, al
.text:00402799                 jz      short loc_40279F
.text:0040279B                 cmp     al, 3Dh ; '='
.text:0040279D                 jnz     short loc_402793
.text:0040279F
.text:0040279F loc_40279F:                             ; CODE XREF: sub_402130+65D↑j
.text:0040279F                                         ; sub_402130+661↑j ...
.text:0040279F                 mov     [esp+5Ch+var_3C], 0
.text:004027A7                 mov     esi, [esp+5Ch+arg_C]
.text:004027AB                 mov     eax, [esi]
.text:004027AD                 test    eax, eax
.text:004027AF                 jz      loc_402930
.text:004027B5                 mov     ecx, eax
.text:004027B7
.text:004027B7 loc_4027B7:                             ; CODE XREF: sub_402130+6B3↓j
.text:004027B7                 mov     ebx, [ebp+14h]
.text:004027BA                 mov     eax, edi
.text:004027BC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:004027BF                 sub     eax, ebx
.text:004027C1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004027C5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004027C9                 call    strncmp
.text:004027CE                 test    eax, eax
.text:004027D0                 jz      loc_402997
.text:004027D6
.text:004027D6 loc_4027D6:                             ; CODE XREF: sub_402130+88C↓j
.text:004027D6                                         ; sub_402130+89D↓j
.text:004027D6                 inc     [esp+5Ch+var_3C]
.text:004027DA                 add     esi, 10h
.text:004027DD                 mov     edx, [esi]
.text:004027DF                 test    edx, edx
.text:004027E1                 mov     ecx, edx
.text:004027E3                 jnz     short loc_4027B7
.text:004027E5
.text:004027E5 loc_4027E5:                             ; CODE XREF: sub_402130+8B6↓j
.text:004027E5                 mov     esi, [esp+5Ch+var_34]
.text:004027E9                 test    esi, esi
.text:004027EB                 jz      short loc_4027F9
.text:004027ED                 mov     ebx, [esp+5Ch+var_30]
.text:004027F1                 test    ebx, ebx
.text:004027F3                 jz      loc_402941
.text:004027F9
.text:004027F9 loc_4027F9:                             ; CODE XREF: sub_402130+6BB↑j
.text:004027F9                 mov     esi, [esp+5Ch+var_2C]
.text:004027FD                 test    esi, esi
.text:004027FF                 jz      loc_402930
.text:00402805                 cmp     byte ptr [edi], 0
.text:00402808                 jz      loc_4028B0
.text:0040280E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402812                 mov     ebx, [ecx+4]
.text:00402815                 test    ebx, ebx
.text:00402817                 jz      short loc_402858
.text:00402819                 lea     edx, [edi+1]
.text:0040281C                 mov     [ebp+0Ch], edx
.text:0040281F
.text:0040281F loc_40281F:                             ; CODE XREF: sub_402130+788↓j
.text:0040281F                                         ; sub_402130+7A7↓j
.text:0040281F                 mov     edi, [ebp+14h]
.text:00402822                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402825                 call    strlen
.text:0040282A                 add     [ebp+14h], eax
.text:0040282D                 mov     eax, [esp+5Ch+arg_10]
.text:00402831                 test    eax, eax
.text:00402833                 jz      short loc_402840
.text:00402835                 mov     edx, [esp+5Ch+var_38]
.text:00402839                 mov     ebp, [esp+5Ch+arg_10]
.text:0040283D                 mov     [ebp+0], edx
.text:00402840
.text:00402840 loc_402840:                             ; CODE XREF: sub_402130+703↑j
.text:00402840                 mov     eax, [esp+5Ch+var_2C]
.text:00402844                 mov     ecx, [eax+8]
.text:00402847                 test    ecx, ecx
.text:00402849                 jnz     loc_40240A
.text:0040284F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402853                 jmp     loc_402402
.text:00402858 ; ---------------------------------------------------------------------------
.text:00402858
.text:00402858 loc_402858:                             ; CODE XREF: sub_402130+6E7↑j
.text:00402858                 mov     eax, [esp+5Ch+var_14]
.text:0040285C                 test    eax, eax
.text:0040285E                 jnz     short loc_402873
.text:00402860
.text:00402860 loc_402860:                             ; CODE XREF: sub_402130+779↓j
.text:00402860                 mov     ecx, [ebp+14h]
.text:00402863                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402866                 call    strlen
.text:0040286B                 add     [ebp+14h], eax
.text:0040286E                 jmp     loc_402488
.text:00402873 ; ---------------------------------------------------------------------------
.text:00402873
.text:00402873 loc_402873:                             ; CODE XREF: sub_402130+72E↑j
.text:00402873                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040287A                 call    ds:libintl_gettext
.text:00402880                 mov     edx, [esp+5Ch+var_2C]
.text:00402884                 mov     ebx, [esp+5Ch+arg_4]
.text:00402888                 mov     edi, [edx]
.text:0040288A                 mov     [esp+5Ch+var_50], edi
.text:0040288E                 mov     edi, ds:_iob
.text:00402894                 mov     esi, [ebx]
.text:00402896                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040289A                 add     edi, 40h ; '@'
.text:0040289D                 mov     [esp+5Ch+MaxCount], esi
.text:004028A1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:004028A4                 call    fprintf
.text:004028A9                 jmp     short loc_402860
.text:004028A9 ; ---------------------------------------------------------------------------
.text:004028AB                 align 10h
.text:004028B0
.text:004028B0 loc_4028B0:                             ; CODE XREF: sub_402130+6D8↑j
.text:004028B0                 mov     esi, [esp+5Ch+var_2C]
.text:004028B4                 cmp     dword ptr [esi+4], 1
.text:004028B8                 jnz     loc_40281F
.text:004028BE                 mov     ecx, [ebp+0]
.text:004028C1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004028C5                 jge     short loc_4028DC
.text:004028C7                 mov     eax, [esp+5Ch+arg_4]
.text:004028CB                 lea     ebx, [ecx+1]
.text:004028CE                 mov     [ebp+0], ebx
.text:004028D1                 mov     edi, [eax+ecx*4]
.text:004028D4                 mov     [ebp+0Ch], edi
.text:004028D7                 jmp     loc_40281F
.text:004028DC ; ---------------------------------------------------------------------------
.text:004028DC
.text:004028DC loc_4028DC:                             ; CODE XREF: sub_402130+795↑j
.text:004028DC                 mov     edx, [esp+5Ch+var_14]
.text:004028E0                 test    edx, edx
.text:004028E2                 jnz     short loc_4028F7
.text:004028E4
.text:004028E4 loc_4028E4:                             ; CODE XREF: sub_402130+7FE↓j
.text:004028E4                 mov     edx, [ebp+14h]
.text:004028E7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004028EA                 call    strlen
.text:004028EF                 add     [ebp+14h], eax
.text:004028F2                 jmp     loc_402519
.text:004028F7 ; ---------------------------------------------------------------------------
.text:004028F7
.text:004028F7 loc_4028F7:                             ; CODE XREF: sub_402130+7B2↑j
.text:004028F7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004028FE                 call    ds:libintl_gettext
.text:00402904                 mov     ecx, [ebp+0]
.text:00402907                 mov     ebx, [esp+5Ch+arg_4]
.text:0040290B                 mov     edi, [ebx+ecx*4-4]
.text:0040290F                 mov     ecx, ds:_iob
.text:00402915                 mov     [esp+5Ch+var_50], edi
.text:00402919                 mov     esi, [ebx]
.text:0040291B                 add     ecx, 40h ; '@'
.text:0040291E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402922                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402925                 mov     [esp+5Ch+MaxCount], esi
.text:00402929                 call    fprintf
.text:0040292E                 jmp     short loc_4028E4
.text:00402930 ; ---------------------------------------------------------------------------
.text:00402930
.text:00402930 loc_402930:                             ; CODE XREF: sub_402130+67F↑j
.text:00402930                                         ; sub_402130+6CF↑j
.text:00402930                 mov     dword ptr [ebp+14h], 0
.text:00402937                 mov     eax, 57h ; 'W'
.text:0040293C                 jmp     loc_402287
.text:00402941 ; ---------------------------------------------------------------------------
.text:00402941
.text:00402941 loc_402941:                             ; CODE XREF: sub_402130+6C3↑j
.text:00402941                 mov     edi, [esp+5Ch+var_14]
.text:00402945                 test    edi, edi
.text:00402947                 jnz     short loc_40295F
.text:00402949
.text:00402949 loc_402949:                             ; CODE XREF: sub_402130+865↓j
.text:00402949                 mov     edx, [ebp+14h]
.text:0040294C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040294F                 call    strlen
.text:00402954                 add     [ebp+14h], eax
.text:00402957                 inc     dword ptr [ebp+0]
.text:0040295A                 jmp     loc_402488
.text:0040295F ; ---------------------------------------------------------------------------
.text:0040295F
.text:0040295F loc_40295F:                             ; CODE XREF: sub_402130+817↑j
.text:0040295F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402966                 call    ds:libintl_gettext
.text:0040296C                 mov     ecx, [ebp+0]
.text:0040296F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402973                 mov     edi, [ebx+ecx*4]
.text:00402976                 mov     ecx, ds:_iob
.text:0040297C                 mov     [esp+5Ch+var_50], edi
.text:00402980                 mov     esi, [ebx]
.text:00402982                 add     ecx, 40h ; '@'
.text:00402985                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402989                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040298C                 mov     [esp+5Ch+MaxCount], esi
.text:00402990                 call    fprintf
.text:00402995                 jmp     short loc_402949
.text:00402997 ; ---------------------------------------------------------------------------
.text:00402997
.text:00402997 loc_402997:                             ; CODE XREF: sub_402130+6A0↑j
.text:00402997                 mov     edx, [ebp+14h]
.text:0040299A                 mov     ebx, edi
.text:0040299C                 mov     ecx, [esi]
.text:0040299E                 sub     ebx, edx
.text:004029A0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004029A3                 call    strlen
.text:004029A8                 cmp     ebx, eax
.text:004029AA                 jz      short loc_4029D2
.text:004029AC                 mov     ebx, [esp+5Ch+var_2C]
.text:004029B0                 test    ebx, ebx
.text:004029B2                 jz      short loc_4029C1
.text:004029B4                 mov     [esp+5Ch+var_34], 1
.text:004029BC                 jmp     loc_4027D6
.text:004029C1 ; ---------------------------------------------------------------------------
.text:004029C1
.text:004029C1 loc_4029C1:                             ; CODE XREF: sub_402130+882↑j
.text:004029C1                 mov     [esp+5Ch+var_2C], esi
.text:004029C5                 mov     ecx, [esp+5Ch+var_3C]
.text:004029C9                 mov     [esp+5Ch+var_38], ecx
.text:004029CD                 jmp     loc_4027D6
.text:004029D2 ; ---------------------------------------------------------------------------
.text:004029D2
.text:004029D2 loc_4029D2:                             ; CODE XREF: sub_402130+87A↑j
.text:004029D2                 mov     [esp+5Ch+var_2C], esi
.text:004029D6                 mov     eax, [esp+5Ch+var_3C]
.text:004029DA                 mov     [esp+5Ch+var_30], 1
.text:004029E2                 mov     [esp+5Ch+var_38], eax
.text:004029E6                 jmp     loc_4027E5
.text:004029EB ; ---------------------------------------------------------------------------
.text:004029EB
.text:004029EB loc_4029EB:                             ; CODE XREF: sub_402130+646↑j
.text:004029EB                 mov     edx, [ebp+0]
.text:004029EE                 cmp     edx, [esp+5Ch+arg_0]
.text:004029F2                 jz      short loc_402A09
.text:004029F4                 mov     ebx, [esp+5Ch+arg_4]
.text:004029F8                 lea     esi, [edx+1]
.text:004029FB                 mov     [ebp+0], esi
.text:004029FE                 mov     edi, [ebx+edx*4]
.text:00402A01                 mov     [ebp+0Ch], edi
.text:00402A04                 jmp     loc_402782
.text:00402A09 ; ---------------------------------------------------------------------------
.text:00402A09
.text:00402A09 loc_402A09:                             ; CODE XREF: sub_402130+8C2↑j
.text:00402A09                 mov     edi, [esp+5Ch+var_14]
.text:00402A0D                 test    edi, edi
.text:00402A0F                 jnz     short loc_402A2C
.text:00402A11
.text:00402A11 loc_402A11:                             ; CODE XREF: sub_402130+92C↓j
.text:00402A11                 mov     [ebp+8], esi
.text:00402A14                 mov     ebp, [esp+5Ch+Str]
.text:00402A18                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402A1C                 jz      short loc_402A28
.text:00402A1E                 mov     bl, 3Fh ; '?'
.text:00402A20
.text:00402A20 loc_402A20:                             ; CODE XREF: sub_402130+8FA↓j
.text:00402A20                 movsx   eax, bl
.text:00402A23                 jmp     loc_402287
.text:00402A28 ; ---------------------------------------------------------------------------
.text:00402A28
.text:00402A28 loc_402A28:                             ; CODE XREF: sub_402130+8EC↑j
.text:00402A28                 mov     bl, 3Ah ; ':'
.text:00402A2A                 jmp     short loc_402A20
.text:00402A2C ; ---------------------------------------------------------------------------
.text:00402A2C
.text:00402A2C loc_402A2C:                             ; CODE XREF: sub_402130+8DF↑j
.text:00402A2C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402A33                 call    ds:libintl_gettext
.text:00402A39                 mov     [esp+5Ch+var_50], esi
.text:00402A3D                 mov     edx, [esp+5Ch+arg_4]
.text:00402A41                 mov     ecx, ds:_iob
.text:00402A47                 mov     ebx, [edx]
.text:00402A49                 add     ecx, 40h ; '@'
.text:00402A4C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A50                 mov     [esp+5Ch+MaxCount], ebx
.text:00402A54                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402A57                 call    fprintf
.text:00402A5C                 jmp     short loc_402A11
.text:00402A5C ; ---------------------------------------------------------------------------
.text:00402A5E                 align 10h
.text:00402A60
.text:00402A60 loc_402A60:                             ; CODE XREF: sub_402130+54C↑j
.text:00402A60                                         ; sub_402130+555↑j
.text:00402A60                 mov     eax, [esp+5Ch+var_14]
.text:00402A64                 test    eax, eax
.text:00402A66                 jz      short loc_402A9F
.text:00402A68                 mov     ebx, [ebp+1Ch]
.text:00402A6B                 test    ebx, ebx
.text:00402A6D                 jz      short loc_402AA7
.text:00402A6F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402A76
.text:00402A76 loc_402A76:                             ; CODE XREF: sub_402130+97E↓j
.text:00402A76                 call    ds:libintl_gettext
.text:00402A7C                 mov     [esp+5Ch+var_50], esi
.text:00402A80                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A84                 mov     edx, ds:_iob
.text:00402A8A                 mov     esi, [ebx]
.text:00402A8C                 add     edx, 40h ; '@'
.text:00402A8F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A93                 mov     [esp+5Ch+MaxCount], esi
.text:00402A97                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402A9A                 call    fprintf
.text:00402A9F
.text:00402A9F loc_402A9F:                             ; CODE XREF: sub_402130+936↑j
.text:00402A9F                 mov     [ebp+8], edi
.text:00402AA2                 jmp     loc_402488
.text:00402AA7 ; ---------------------------------------------------------------------------
.text:00402AA7
.text:00402AA7 loc_402AA7:                             ; CODE XREF: sub_402130+93D↑j
.text:00402AA7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402AAE                 jmp     short loc_402A76
.text:00402AB0 ; ---------------------------------------------------------------------------
.text:00402AB0
.text:00402AB0 loc_402AB0:                             ; CODE XREF: sub_402130+26E↑j
.text:00402AB0                 mov     edi, [esp+5Ch+var_14]
.text:00402AB4                 test    edi, edi
.text:00402AB6                 jnz     short loc_402ACE
.text:00402AB8
.text:00402AB8 loc_402AB8:                             ; CODE XREF: sub_402130+9D4↓j
.text:00402AB8                 mov     edx, [ebp+14h]
.text:00402ABB                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402ABE                 call    strlen
.text:00402AC3                 add     [ebp+14h], eax
.text:00402AC6                 inc     dword ptr [ebp+0]
.text:00402AC9                 jmp     loc_40260E
.text:00402ACE ; ---------------------------------------------------------------------------
.text:00402ACE
.text:00402ACE loc_402ACE:                             ; CODE XREF: sub_402130+986↑j
.text:00402ACE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402AD5                 call    ds:libintl_gettext
.text:00402ADB                 mov     ebx, [ebp+0]
.text:00402ADE                 mov     edi, [esp+5Ch+arg_4]
.text:00402AE2                 mov     ecx, [edi+ebx*4]
.text:00402AE5                 mov     ebx, ds:_iob
.text:00402AEB                 mov     [esp+5Ch+var_50], ecx
.text:00402AEF                 mov     esi, [edi]
.text:00402AF1                 add     ebx, 40h ; '@'
.text:00402AF4                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402AF8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402AFB                 mov     [esp+5Ch+MaxCount], esi
.text:00402AFF                 call    fprintf
.text:00402B04                 jmp     short loc_402AB8
.text:00402B06 ; ---------------------------------------------------------------------------
.text:00402B06
.text:00402B06 loc_402B06:                             ; CODE XREF: sub_402130+246↑j
.text:00402B06                 mov     ecx, [ebp+14h]
.text:00402B09                 mov     ebx, edi
.text:00402B0B                 mov     edx, [esi]
.text:00402B0D                 sub     ebx, ecx
.text:00402B0F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402B12                 call    strlen
.text:00402B17                 cmp     ebx, eax
.text:00402B19                 jz      short loc_402B71
.text:00402B1B                 mov     ebx, [esp+5Ch+var_18]
.text:00402B1F                 test    ebx, ebx
.text:00402B21                 jz      short loc_402B60
.text:00402B23                 mov     edx, [esp+5Ch+arg_14]
.text:00402B27                 test    edx, edx
.text:00402B29                 jnz     short loc_402B37
.text:00402B2B                 mov     ecx, [esp+5Ch+var_18]
.text:00402B2F                 mov     ebx, [esi+4]
.text:00402B32                 cmp     [ecx+4], ebx
.text:00402B35                 jz      short loc_402B44
.text:00402B37
.text:00402B37 loc_402B37:                             ; CODE XREF: sub_402130+9F9↑j
.text:00402B37                                         ; sub_402130+A1A↓j ...
.text:00402B37                 mov     [esp+5Ch+var_20], 1
.text:00402B3F                 jmp     loc_40237C
.text:00402B44 ; ---------------------------------------------------------------------------
.text:00402B44
.text:00402B44 loc_402B44:                             ; CODE XREF: sub_402130+A05↑j
.text:00402B44                 mov     edx, [esi+8]
.text:00402B47                 cmp     [ecx+8], edx
.text:00402B4A                 jnz     short loc_402B37
.text:00402B4C                 mov     ebx, [esi+0Ch]
.text:00402B4F                 cmp     [ecx+0Ch], ebx
.text:00402B52                 jnz     short loc_402B37
.text:00402B54                 jmp     loc_40237C
.text:00402B54 ; ---------------------------------------------------------------------------
.text:00402B59                 align 10h
.text:00402B60
.text:00402B60 loc_402B60:                             ; CODE XREF: sub_402130+9F1↑j
.text:00402B60                 mov     [esp+5Ch+var_18], esi
.text:00402B64                 mov     eax, [esp+5Ch+var_28]
.text:00402B68                 mov     [esp+5Ch+var_24], eax
.text:00402B6C                 jmp     loc_40237C
.text:00402B71 ; ---------------------------------------------------------------------------
.text:00402B71
.text:00402B71 loc_402B71:                             ; CODE XREF: sub_402130+9E9↑j
.text:00402B71                 mov     [esp+5Ch+var_18], esi
.text:00402B75                 mov     ecx, [esp+5Ch+var_28]
.text:00402B79                 mov     [esp+5Ch+var_1C], 1
.text:00402B81                 mov     [esp+5Ch+var_24], ecx
.text:00402B85                 jmp     loc_402390
.text:00402B8A ; ---------------------------------------------------------------------------
.text:00402B8A
.text:00402B8A loc_402B8A:                             ; CODE XREF: sub_402130+1BF↑j
.text:00402B8A                 mov     eax, [esp+5Ch+Str]
.text:00402B8E                 movsx   esi, dl
.text:00402B91                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402B95                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402B98                 call    strchr
.text:00402B9D                 test    eax, eax
.text:00402B9F                 jnz     loc_402650
.text:00402BA5                 jmp     loc_4022F5
.text:00402BAA ; ---------------------------------------------------------------------------
.text:00402BAA
.text:00402BAA loc_402BAA:                             ; CODE XREF: sub_402130+17C↑j
.text:00402BAA                 mov     ecx, 1
.text:00402BAF                 jmp     loc_4022B2
.text:00402BB4 ; ---------------------------------------------------------------------------
.text:00402BB4
.text:00402BB4 loc_402BB4:                             ; CODE XREF: sub_402130+D4↑j
.text:00402BB4                                         ; sub_402130+130↑j
.text:00402BB4                 mov     eax, [ebp+20h]
.text:00402BB7                 cmp     eax, [ebp+24h]
.text:00402BBA                 jz      loc_402290
.text:00402BC0                 mov     [ebp+0], eax
.text:00402BC3                 jmp     loc_402290
.text:00402BC8 ; ---------------------------------------------------------------------------
.text:00402BC8
.text:00402BC8 loc_402BC8:                             ; CODE XREF: sub_402130+FE↑j
.text:00402BC8                 mov     [ebp+20h], eax
.text:00402BCB                 jmp     loc_402250
.text:00402BD0 ; ---------------------------------------------------------------------------
.text:00402BD0
.text:00402BD0 loc_402BD0:                             ; CODE XREF: sub_402130+CA↑j
.text:00402BD0                 mov     edx, [ebp+20h]
.text:00402BD3                 mov     eax, [ebp+24h]
.text:00402BD6                 cmp     edx, eax
.text:00402BD8                 jz      short loc_402C50
.text:00402BDA                 cmp     eax, ebx
.text:00402BDC                 jz      short loc_402BF1
.text:00402BDE                 mov     [esp+5Ch+Str2], ebp
.text:00402BE2                 mov     ebx, [esp+5Ch+arg_4]
.text:00402BE6                 mov     [esp+5Ch+Str1], ebx
.text:00402BE9                 call    sub_402DE0
.text:00402BEE                 mov     ebx, [ebp+0]
.text:00402BF1
.text:00402BF1 loc_402BF1:                             ; CODE XREF: sub_402130+AAC↑j
.text:00402BF1                                         ; sub_402130+B22↓j ...
.text:00402BF1                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402BF5                 jge     short loc_402C40
.text:00402BF7                 mov     esi, [esp+5Ch+arg_4]
.text:00402BFB                 mov     eax, [esi+ebx*4]
.text:00402BFE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402C01                 jz      short loc_402C48
.text:00402C03                 lea     esi, [esi+0]
.text:00402C09                 lea     edi, [edi+0]
.text:00402C10
.text:00402C10 loc_402C10:                             ; CODE XREF: sub_402130+AFC↓j
.text:00402C10                                         ; sub_402130+B1C↓j
.text:00402C10                 lea     eax, [ebx+1]
.text:00402C13                 mov     ebx, eax
.text:00402C15                 mov     [ebp+0], eax
.text:00402C18                 cmp     eax, [esp+5Ch+arg_0]
.text:00402C1C                 jge     short loc_402C40
.text:00402C1E                 mov     edi, [esp+5Ch+arg_4]
.text:00402C22                 mov     edx, [edi+eax*4]
.text:00402C25                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402C28                 jz      short loc_402C30
.text:00402C2A
.text:00402C2A loc_402C2A:                             ; CODE XREF: sub_402130+B04↓j
.text:00402C2A                 mov     ebx, eax
.text:00402C2C                 jmp     short loc_402C10
.text:00402C2C ; ---------------------------------------------------------------------------
.text:00402C2E                 align 10h
.text:00402C30
.text:00402C30 loc_402C30:                             ; CODE XREF: sub_402130+AF8↑j
.text:00402C30                 cmp     byte ptr [edx+1], 0
.text:00402C34                 jz      short loc_402C2A
.text:00402C36                 lea     esi, [esi+0]
.text:00402C39                 lea     edi, [edi+0]
.text:00402C40
.text:00402C40 loc_402C40:                             ; CODE XREF: sub_402130+AC5↑j
.text:00402C40                                         ; sub_402130+AEC↑j ...
.text:00402C40                 mov     [ebp+24h], ebx
.text:00402C43                 jmp     loc_402200
.text:00402C48 ; ---------------------------------------------------------------------------
.text:00402C48
.text:00402C48 loc_402C48:                             ; CODE XREF: sub_402130+AD1↑j
.text:00402C48                 cmp     byte ptr [eax+1], 0
.text:00402C4C                 jz      short loc_402C10
.text:00402C4E                 jmp     short loc_402C40
.text:00402C50 ; ---------------------------------------------------------------------------
.text:00402C50
.text:00402C50 loc_402C50:                             ; CODE XREF: sub_402130+AA8↑j
.text:00402C50                 cmp     edx, ebx
.text:00402C52                 jz      short loc_402BF1
.text:00402C54                 mov     [ebp+20h], ebx
.text:00402C57                 jmp     short loc_402BF1
.text:00402C59 ; ---------------------------------------------------------------------------
.text:00402C59
.text:00402C59 loc_402C59:                             ; CODE XREF: sub_402130+88↑j
.text:00402C59                 mov     dword ptr [ebp+18h], 0
.text:00402C60                 mov     esi, [esp+5Ch+Str]
.text:00402C64
.text:00402C64 loc_402C64:                             ; CODE XREF: sub_402130+B49↓j
.text:00402C64                 inc     esi
.text:00402C65                 jmp     loc_4021C8
.text:00402C65 ; ---------------------------------------------------------------------------
.text:00402C6A                 align 10h
.text:00402C70
.text:00402C70 loc_402C70:                             ; CODE XREF: sub_402130+80↑j
.text:00402C70                 mov     dword ptr [ebp+18h], 2
.text:00402C77                 mov     esi, ecx
.text:00402C79                 jmp     short loc_402C64
.text:00402C79 ; ---------------------------------------------------------------------------
.text:00402C7B                 align 10h
.text:00402C80
.text:00402C80 loc_402C80:                             ; CODE XREF: sub_402130+69↑j
.text:00402C80                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402C87                 call    getenv
.text:00402C8C                 test    eax, eax
.text:00402C8E                 jz      loc_4021A4
.text:00402C94                 jmp     loc_40219F
.text:00402C94 ; ---------------------------------------------------------------------------
.text:00402C99                 align 10h
.text:00402CA0
.text:00402CA0 loc_402CA0:                             ; CODE XREF: sub_402130+3F↑j
.text:00402CA0                 mov     dword ptr [ebp+0], 1
.text:00402CA7                 mov     ebx, 1
.text:00402CAC                 jmp     loc_402180
.text:00402CAC sub_402130      endp
.text:00402CAC
.text:00402CB1 ; ---------------------------------------------------------------------------
.text:00402CB1                 jmp     short sub_402CC0
.text:00402CB1 ; ---------------------------------------------------------------------------
.text:00402CB3                 align 10h
.text:00402CC0
.text:00402CC0 ; =============== S U B R O U T I N E =======================================
.text:00402CC0
.text:00402CC0
.text:00402CC0 ; int __cdecl sub_402CC0(int, int, char *, int, int, int, int)
.text:00402CC0 sub_402CC0      proc near               ; CODE XREF: .text:00402CB1↑j
.text:00402CC0                                         ; sub_403460+3A↓p ...
.text:00402CC0
.text:00402CC0 var_2C          = dword ptr -2Ch
.text:00402CC0 var_28          = dword ptr -28h
.text:00402CC0 Str             = dword ptr -24h
.text:00402CC0 var_20          = dword ptr -20h
.text:00402CC0 var_1C          = dword ptr -1Ch
.text:00402CC0 var_18          = dword ptr -18h
.text:00402CC0 var_14          = dword ptr -14h
.text:00402CC0 var_10          = dword ptr -10h
.text:00402CC0 arg_0           = dword ptr  4
.text:00402CC0 arg_4           = dword ptr  8
.text:00402CC0 arg_8           = dword ptr  0Ch
.text:00402CC0 arg_C           = dword ptr  10h
.text:00402CC0 arg_10          = dword ptr  14h
.text:00402CC0 arg_14          = dword ptr  18h
.text:00402CC0 arg_18          = dword ptr  1Ch
.text:00402CC0
.text:00402CC0                 sub     esp, 2Ch
.text:00402CC3                 mov     edx, dword_406010
.text:00402CC9                 mov     [esp+2Ch+var_10], offset dword_407040 ; int
.text:00402CD1                 mov     ecx, dword_406014
.text:00402CD7                 mov     ds:dword_407040, edx
.text:00402CDD                 mov     edx, [esp+2Ch+arg_18]
.text:00402CE1                 mov     ds:dword_407044, ecx
.text:00402CE7                 mov     ecx, [esp+2Ch+arg_14]
.text:00402CEB                 mov     [esp+2Ch+var_14], edx ; int
.text:00402CEF                 mov     edx, [esp+2Ch+arg_10]
.text:00402CF3                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402CF7                 mov     ecx, [esp+2Ch+arg_C]
.text:00402CFB                 mov     [esp+2Ch+var_1C], edx ; int
.text:00402CFF                 mov     edx, [esp+2Ch+arg_8]
.text:00402D03                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402D07                 mov     ecx, [esp+2Ch+arg_4]
.text:00402D0B                 mov     [esp+2Ch+Str], edx ; Str
.text:00402D0F                 mov     edx, [esp+2Ch+arg_0]
.text:00402D13                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402D17                 mov     [esp+2Ch+var_2C], edx ; int
.text:00402D1A                 call    sub_402130
.text:00402D1F                 mov     ecx, ds:dword_407040
.text:00402D25                 mov     dword_406010, ecx
.text:00402D2B                 mov     ecx, ds:dword_40704C
.text:00402D31                 mov     ds:dword_4071F0, ecx
.text:00402D37                 mov     ecx, ds:dword_407048
.text:00402D3D                 mov     dword_406018, ecx
.text:00402D43                 add     esp, 2Ch
.text:00402D46                 retn
.text:00402D46 sub_402CC0      endp
.text:00402D46
.text:00402D46 ; ---------------------------------------------------------------------------
.text:00402D47                 align 10h
.text:00402D50                 sub     esp, 2Ch
.text:00402D53                 mov     edx, dword_406010
.text:00402D59                 mov     dword ptr [esp+1Ch], offset dword_407040
.text:00402D61                 mov     ecx, dword_406014
.text:00402D67                 mov     dword ptr [esp+18h], 1
.text:00402D6F                 mov     ds:dword_407040, edx
.text:00402D75                 mov     edx, [esp+38h]
.text:00402D79                 mov     ds:dword_407044, ecx
.text:00402D7F                 mov     ecx, [esp+34h]
.text:00402D83                 mov     [esp+8], edx
.text:00402D87                 mov     edx, [esp+30h]
.text:00402D8B                 mov     [esp+4], ecx
.text:00402D8F                 mov     dword ptr [esp+14h], 0
.text:00402D97                 mov     dword ptr [esp+10h], 0
.text:00402D9F                 mov     dword ptr [esp+0Ch], 0
.text:00402DA7                 mov     [esp], edx
.text:00402DAA                 call    sub_402130
.text:00402DAF                 mov     ecx, ds:dword_407040
.text:00402DB5                 mov     dword_406010, ecx
.text:00402DBB                 mov     ecx, ds:dword_40704C
.text:00402DC1                 mov     ds:dword_4071F0, ecx
.text:00402DC7                 mov     ecx, ds:dword_407048
.text:00402DCD                 mov     dword_406018, ecx
.text:00402DD3                 add     esp, 2Ch
.text:00402DD6                 retn
.text:00402DD6 ; ---------------------------------------------------------------------------
.text:00402DD7                 align 10h
.text:00402DE0
.text:00402DE0 ; =============== S U B R O U T I N E =======================================
.text:00402DE0
.text:00402DE0
.text:00402DE0 sub_402DE0      proc near               ; CODE XREF: sub_402130+113↑p
.text:00402DE0                                         ; sub_402130+AB9↑p
.text:00402DE0
.text:00402DE0 var_2C          = dword ptr -2Ch
.text:00402DE0 var_28          = dword ptr -28h
.text:00402DE0 var_24          = dword ptr -24h
.text:00402DE0 var_20          = dword ptr -20h
.text:00402DE0 var_1C          = dword ptr -1Ch
.text:00402DE0 var_18          = dword ptr -18h
.text:00402DE0 var_14          = dword ptr -14h
.text:00402DE0 arg_0           = dword ptr  4
.text:00402DE0 arg_4           = dword ptr  8
.text:00402DE0
.text:00402DE0                 push    ebp
.text:00402DE1                 push    edi
.text:00402DE2                 push    esi
.text:00402DE3                 push    ebx
.text:00402DE4                 sub     esp, 1Ch
.text:00402DE7                 mov     ecx, [esp+2Ch+arg_4]
.text:00402DEB                 mov     eax, [esp+2Ch+arg_4]
.text:00402DEF                 mov     ebx, [esp+2Ch+arg_4]
.text:00402DF3                 mov     edx, [ecx+20h]
.text:00402DF6                 mov     edi, [esp+2Ch+arg_0]
.text:00402DFA                 mov     ecx, [ebx]
.text:00402DFC                 mov     [esp+2Ch+var_2C], edx
.text:00402DFF                 mov     [esp+2Ch+var_14], edx
.text:00402E03                 mov     edx, [eax+24h]
.text:00402E06                 mov     [esp+2Ch+var_28], ecx
.text:00402E0A                 mov     [esp+2Ch+var_1C], ecx
.text:00402E0E                 cmp     ecx, edx
.text:00402E10                 mov     [esp+2Ch+var_18], edx
.text:00402E14                 jle     short loc_402E90
.text:00402E16                 mov     esi, [esp+2Ch+var_2C]
.text:00402E19                 cmp     edx, esi
.text:00402E1B                 jle     short loc_402E90
.text:00402E1D                 lea     esi, [esi+0]
.text:00402E20
.text:00402E20 loc_402E20:                             ; CODE XREF: sub_402DE0+A1↓j
.text:00402E20                 mov     ebx, [esp+2Ch+var_1C]
.text:00402E24                 mov     edx, [esp+2Ch+var_18]
.text:00402E28                 mov     ebp, [esp+2Ch+var_18]
.text:00402E2C                 mov     eax, [esp+2Ch+var_14]
.text:00402E30                 sub     ebx, edx
.text:00402E32                 mov     [esp+2Ch+var_20], ebx
.text:00402E36                 sub     ebp, eax
.text:00402E38                 cmp     ebx, ebp
.text:00402E3A                 jle     short loc_402EB5
.text:00402E3C                 xor     esi, esi
.text:00402E3E                 cmp     esi, ebp
.text:00402E40                 jge     short loc_402E6D
.text:00402E42                 mov     ecx, [esp+2Ch+var_1C]
.text:00402E46                 sub     ecx, ebp
.text:00402E48                 mov     [esp+2Ch+var_24], ecx
.text:00402E4C                 lea     esi, [esi+0]
.text:00402E50
.text:00402E50 loc_402E50:                             ; CODE XREF: sub_402DE0+8B↓j
.text:00402E50                 mov     ecx, [esp+2Ch+var_14]
.text:00402E54                 mov     edx, [esp+2Ch+var_24]
.text:00402E58                 add     ecx, esi
.text:00402E5A                 add     edx, esi
.text:00402E5C                 mov     ebx, [edi+ecx*4]
.text:00402E5F                 mov     eax, [edi+edx*4]
.text:00402E62                 inc     esi
.text:00402E63                 cmp     esi, ebp
.text:00402E65                 mov     [edi+ecx*4], eax
.text:00402E68                 mov     [edi+edx*4], ebx
.text:00402E6B                 jl      short loc_402E50
.text:00402E6D
.text:00402E6D loc_402E6D:                             ; CODE XREF: sub_402DE0+60↑j
.text:00402E6D                 sub     [esp+2Ch+var_1C], ebp
.text:00402E71
.text:00402E71 loc_402E71:                             ; CODE XREF: sub_402DE0+107↓j
.text:00402E71                 mov     eax, [esp+2Ch+var_18]
.text:00402E75                 cmp     [esp+2Ch+var_1C], eax
.text:00402E79                 jle     short loc_402E90
.text:00402E7B                 mov     ebp, [esp+2Ch+var_14]
.text:00402E7F                 cmp     eax, ebp
.text:00402E81                 jg      short loc_402E20
.text:00402E83                 lea     esi, [esi+0]
.text:00402E89                 lea     edi, [edi+0]
.text:00402E90
.text:00402E90 loc_402E90:                             ; CODE XREF: sub_402DE0+34↑j
.text:00402E90                                         ; sub_402DE0+3B↑j ...
.text:00402E90                 mov     esi, [esp+2Ch+var_28]
.text:00402E94                 mov     ecx, [esp+2Ch+var_18]
.text:00402E98                 mov     eax, [esp+2Ch+var_2C]
.text:00402E9B                 mov     edi, [esp+2Ch+arg_4]
.text:00402E9F                 mov     edx, [esp+2Ch+var_28]
.text:00402EA3                 sub     esi, ecx
.text:00402EA5                 add     esi, eax
.text:00402EA7                 mov     [edi+20h], esi
.text:00402EAA                 mov     [edi+24h], edx
.text:00402EAD                 add     esp, 1Ch
.text:00402EB0                 pop     ebx
.text:00402EB1                 pop     esi
.text:00402EB2                 pop     edi
.text:00402EB3                 pop     ebp
.text:00402EB4                 retn
.text:00402EB5 ; ---------------------------------------------------------------------------
.text:00402EB5
.text:00402EB5 loc_402EB5:                             ; CODE XREF: sub_402DE0+5A↑j
.text:00402EB5                 xor     esi, esi
.text:00402EB7                 cmp     esi, [esp+2Ch+var_20]
.text:00402EBB                 jge     short loc_402EDF
.text:00402EBD                 lea     esi, [esi+0]
.text:00402EC0
.text:00402EC0 loc_402EC0:                             ; CODE XREF: sub_402DE0+FD↓j
.text:00402EC0                 mov     ebx, [esp+2Ch+var_14]
.text:00402EC4                 mov     ebp, [esp+2Ch+var_18]
.text:00402EC8                 add     ebx, esi
.text:00402ECA                 add     ebp, esi
.text:00402ECC                 mov     edx, [edi+ebx*4]
.text:00402ECF                 inc     esi
.text:00402ED0                 cmp     esi, [esp+2Ch+var_20]
.text:00402ED4                 mov     ecx, [edi+ebp*4]
.text:00402ED7                 mov     [edi+ebx*4], ecx
.text:00402EDA                 mov     [edi+ebp*4], edx
.text:00402EDD                 jl      short loc_402EC0
.text:00402EDF
.text:00402EDF loc_402EDF:                             ; CODE XREF: sub_402DE0+DB↑j
.text:00402EDF                 mov     esi, [esp+2Ch+var_20]
.text:00402EE3                 add     [esp+2Ch+var_14], esi
.text:00402EE7                 jmp     short loc_402E71
.text:00402EE7 sub_402DE0      endp
.text:00402EE7
.text:00402EE7 ; ---------------------------------------------------------------------------
.text:00402EE9                 align 20h
.text:00402F00                 sub     esp, 0Ch
.text:00402F03                 mov     edx, [esp+14h]
.text:00402F07                 mov     dword ptr [esp+4], 5
.text:00402F0F                 mov     [esp+8], edx
.text:00402F13                 mov     edx, [esp+10h]
.text:00402F17                 mov     [esp], edx
.text:00402F1A                 call    sub_4047A0
.text:00402F1F                 add     esp, 0Ch
.text:00402F22                 retn
.text:00402F22 ; ---------------------------------------------------------------------------
.text:00402F23                 align 10h
.text:00402F30
.text:00402F30 ; =============== S U B R O U T I N E =======================================
.text:00402F30
.text:00402F30
.text:00402F30 ; int __cdecl sub_402F30(char *)
.text:00402F30 sub_402F30      proc near               ; CODE XREF: sub_401660+297↑p
.text:00402F30                                         ; sub_401660+31C↑p
.text:00402F30
.text:00402F30 var_C           = dword ptr -0Ch
.text:00402F30 var_8           = dword ptr -8
.text:00402F30 var_4           = dword ptr -4
.text:00402F30 arg_0           = dword ptr  4
.text:00402F30
.text:00402F30                 sub     esp, 0Ch
.text:00402F33                 mov     edx, [esp+0Ch+arg_0]
.text:00402F37                 mov     [esp+0Ch+var_8], 5 ; int
.text:00402F3F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00402F46                 mov     [esp+0Ch+var_4], edx ; char *
.text:00402F4A                 call    sub_4047A0
.text:00402F4F                 add     esp, 0Ch
.text:00402F52                 retn
.text:00402F52 sub_402F30      endp
.text:00402F52
.text:00402F52 ; ---------------------------------------------------------------------------
.text:00402F53                 align 10h
.text:00402F60 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00402F60                                         ; DATA XREF: .data:Buffer↓o
.text:00402F92 ; const char Format[]
.text:00402F92 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403250+50↓o
.text:00402F9E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00402F9E                                         ; DATA XREF: sub_403250:loc_4032F1↓o
.text:00402FAE                 align 20h
.text:00402FC0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00402FC0                                         ; DATA XREF: sub_403250+100↓o
.text:00402FC0                 db 'ere is NO',0Ah
.text:00402FC0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00402FC0                 db 'R PURPOSE.',0Ah,0
.text:00403058 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403058                                         ; DATA XREF: sub_403250:loc_403391↓o
.text:0040306F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040306F                                         ; DATA XREF: sub_403250:loc_40339D↓o
.text:0040308B                 align 20h
.text:004030A0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004030A0                                         ; DATA XREF: sub_403250:loc_4033A9↓o
.text:004030A0                 db 'and %s.',0Ah,0
.text:004030C0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004030C0                                         ; DATA XREF: sub_403250:loc_4033B5↓o
.text:004030C0                 db '%s, and %s.',0Ah,0
.text:004030E4                 align 20h
.text:00403100 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403100                                         ; DATA XREF: sub_403250:loc_4033C1↓o
.text:00403100                 db '%s, %s, and %s.',0Ah,0
.text:00403128                 align 20h
.text:00403140 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403140                                         ; DATA XREF: sub_403250:loc_4033CD↓o
.text:00403140                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040316C                 align 20h
.text:00403180 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403180                                         ; DATA XREF: sub_403250:loc_4033D9↓o
.text:00403180                 db '%s, %s, %s, %s,',0Ah
.text:00403180                 db 'and %s.',0Ah,0
.text:004031B0                 align 20h
.text:004031C0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004031C0                                         ; DATA XREF: sub_403250:loc_4033E5↓o
.text:004031C0                 db '%s, %s, %s, %s,',0Ah
.text:004031C0                 db '%s, and %s.',0Ah,0
.text:004031F4                 align 10h
.text:00403200 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403200                                         ; DATA XREF: sub_403250:def_4032BD↓o
.text:00403200                 db '%s, %s, %s, %s,',0Ah
.text:00403200                 db '%s, %s, and others.',0Ah,0
.text:0040323C ; const char aSS[]
.text:0040323C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_403250+1B5↓o
.text:00403243                 align 10h
.text:00403250
.text:00403250 ; =============== S U B R O U T I N E =======================================
.text:00403250
.text:00403250
.text:00403250 ; int __cdecl sub_403250(FILE *, FILE *, int, int, va_list)
.text:00403250 sub_403250      proc near               ; CODE XREF: sub_403420+2A↓p
.text:00403250
.text:00403250 Stream          = dword ptr -2Ch
.text:00403250 Format          = dword ptr -28h
.text:00403250 ArgList         = dword ptr -24h
.text:00403250 var_20          = dword ptr -20h
.text:00403250 var_1C          = dword ptr -1Ch
.text:00403250 var_14          = dword ptr -14h
.text:00403250 arg_0           = dword ptr  4
.text:00403250 arg_4           = dword ptr  8
.text:00403250 arg_8           = dword ptr  0Ch
.text:00403250 arg_C           = dword ptr  10h
.text:00403250 arg_10          = dword ptr  14h
.text:00403250
.text:00403250                 push    ebp
.text:00403251                 push    edi
.text:00403252                 push    esi
.text:00403253                 push    ebx
.text:00403254                 sub     esp, 1Ch
.text:00403257                 xor     ebx, ebx
.text:00403259                 mov     edi, [esp+2Ch+arg_10]
.text:0040325D                 mov     edx, [esp+2Ch+arg_8]
.text:00403261                 mov     esi, [esp+2Ch+arg_0]
.text:00403265                 mov     eax, [edi]
.text:00403267                 mov     ecx, [esp+2Ch+arg_4]
.text:0040326B                 mov     [esp+2Ch+var_14], edx
.text:0040326F                 mov     ebp, [esp+2Ch+arg_C]
.text:00403273                 lea     edx, [edi+4]
.text:00403276                 test    eax, eax
.text:00403278                 jz      short loc_40328C
.text:0040327A                 lea     esi, [esi+0]
.text:00403280
.text:00403280 loc_403280:                             ; CODE XREF: sub_403250+3A↓j
.text:00403280                 mov     eax, edx
.text:00403282                 inc     ebx
.text:00403283                 mov     eax, [eax]
.text:00403285                 add     edx, 4
.text:00403288                 test    eax, eax
.text:0040328A                 jnz     short loc_403280
.text:0040328C
.text:0040328C loc_40328C:                             ; CODE XREF: sub_403250+28↑j
.text:0040328C                 test    ecx, ecx
.text:0040328E                 jz      loc_4033FD
.text:00403294                 mov     [esp+2Ch+var_1C], ebp
.text:00403298                 mov     edx, [esp+2Ch+var_14]
.text:0040329C                 mov     [esp+2Ch+ArgList], ecx
.text:004032A0                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:004032A8                 mov     [esp+2Ch+var_20], edx
.text:004032AC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004032AF                 call    fprintf
.text:004032B4
.text:004032B4 loc_4032B4:                             ; CODE XREF: sub_403250+1C9↓j
.text:004032B4                 cmp     ebx, 9          ; switch 10 cases
.text:004032B7                 ja      def_4032BD      ; jumptable 004032BD default case
.text:004032BD                 jmp     ds:jpt_4032BD[ebx*4] ; switch jump
.text:004032BD ; ---------------------------------------------------------------------------
.text:004032C4 jpt_4032BD      dd offset loc_4032EC    ; DATA XREF: sub_403250+6D↑r
.text:004032C4                 dd offset loc_4032F1    ; jump table for switch statement
.text:004032C4                 dd offset loc_403391
.text:004032C4                 dd offset loc_40339D
.text:004032C4                 dd offset loc_4033A9
.text:004032C4                 dd offset loc_4033B5
.text:004032C4                 dd offset loc_4033C1
.text:004032C4                 dd offset loc_4033CD
.text:004032C4                 dd offset loc_4033D9
.text:004032C4                 dd offset loc_4033E5
.text:004032EC ; ---------------------------------------------------------------------------
.text:004032EC
.text:004032EC loc_4032EC:                             ; CODE XREF: sub_403250+6D↑j
.text:004032EC                                         ; DATA XREF: sub_403250:jpt_4032BD↑o
.text:004032EC                 call    abort           ; jumptable 004032BD case 0
.text:004032F1 ; ---------------------------------------------------------------------------
.text:004032F1
.text:004032F1 loc_4032F1:                             ; CODE XREF: sub_403250+6D↑j
.text:004032F1                                         ; DATA XREF: sub_403250:jpt_4032BD↑o
.text:004032F1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004032BD case 1
.text:004032F8                 nop
.text:004032F9                 lea     esi, [esi+0]
.text:00403300
.text:00403300 loc_403300:                             ; CODE XREF: sub_403250+148↓j
.text:00403300                                         ; sub_403250+154↓j ...
.text:00403300                 call    ds:libintl_gettext
.text:00403306                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040330A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040330D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403311                 call    vfprintf
.text:00403316                 mov     ebx, [esi+4]
.text:00403319                 dec     ebx
.text:0040331A                 test    ebx, ebx
.text:0040331C                 mov     [esi+4], ebx
.text:0040331F                 js      short loc_40337F
.text:00403321                 mov     edi, [esi]
.text:00403323                 mov     byte ptr [edi], 0Ah
.text:00403326                 inc     dword ptr [esi]
.text:00403328
.text:00403328 loc_403328:                             ; CODE XREF: sub_403250+13F↓j
.text:00403328                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040332C                 mov     edx, Buffer
.text:00403332                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403335                 call    fputs
.text:0040333A                 mov     ebp, [esi+4]
.text:0040333D                 dec     ebp
.text:0040333E                 test    ebp, ebp
.text:00403340                 mov     [esi+4], ebp
.text:00403343                 js      short loc_40336D
.text:00403345                 mov     ecx, [esi]
.text:00403347                 mov     byte ptr [ecx], 0Ah
.text:0040334A                 inc     dword ptr [esi]
.text:0040334C
.text:0040334C loc_40334C:                             ; CODE XREF: sub_403250+12D↓j
.text:0040334C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403350                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403357                 call    ds:libintl_gettext
.text:0040335D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403361                 add     esp, 1Ch
.text:00403364                 pop     ebx
.text:00403365                 pop     esi
.text:00403366                 pop     edi
.text:00403367                 pop     ebp
.text:00403368                 jmp     fputs
.text:0040336D ; ---------------------------------------------------------------------------
.text:0040336D
.text:0040336D loc_40336D:                             ; CODE XREF: sub_403250+F3↑j
.text:0040336D                 mov     [esp+2Ch+Format], esi ; File
.text:00403371                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403378                 call    _flsbuf
.text:0040337D                 jmp     short loc_40334C
.text:0040337F ; ---------------------------------------------------------------------------
.text:0040337F
.text:0040337F loc_40337F:                             ; CODE XREF: sub_403250+CF↑j
.text:0040337F                 mov     [esp+2Ch+Format], esi ; File
.text:00403383                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040338A                 call    _flsbuf
.text:0040338F                 jmp     short loc_403328
.text:00403391 ; ---------------------------------------------------------------------------
.text:00403391
.text:00403391 loc_403391:                             ; CODE XREF: sub_403250+6D↑j
.text:00403391                                         ; DATA XREF: sub_403250:jpt_4032BD↑o
.text:00403391                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004032BD case 2
.text:00403398                 jmp     loc_403300
.text:0040339D ; ---------------------------------------------------------------------------
.text:0040339D
.text:0040339D loc_40339D:                             ; CODE XREF: sub_403250+6D↑j
.text:0040339D                                         ; DATA XREF: sub_403250:jpt_4032BD↑o
.text:0040339D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004032BD case 3
.text:004033A4                 jmp     loc_403300
.text:004033A9 ; ---------------------------------------------------------------------------
.text:004033A9
.text:004033A9 loc_4033A9:                             ; CODE XREF: sub_403250+6D↑j
.text:004033A9                                         ; DATA XREF: sub_403250:jpt_4032BD↑o
.text:004033A9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004032BD case 4
.text:004033B0                 jmp     loc_403300
.text:004033B5 ; ---------------------------------------------------------------------------
.text:004033B5
.text:004033B5 loc_4033B5:                             ; CODE XREF: sub_403250+6D↑j
.text:004033B5                                         ; DATA XREF: sub_403250:jpt_4032BD↑o
.text:004033B5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004032BD case 5
.text:004033BC                 jmp     loc_403300
.text:004033C1 ; ---------------------------------------------------------------------------
.text:004033C1
.text:004033C1 loc_4033C1:                             ; CODE XREF: sub_403250+6D↑j
.text:004033C1                                         ; DATA XREF: sub_403250:jpt_4032BD↑o
.text:004033C1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004032BD case 6
.text:004033C8                 jmp     loc_403300
.text:004033CD ; ---------------------------------------------------------------------------
.text:004033CD
.text:004033CD loc_4033CD:                             ; CODE XREF: sub_403250+6D↑j
.text:004033CD                                         ; DATA XREF: sub_403250:jpt_4032BD↑o
.text:004033CD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004032BD case 7
.text:004033D4                 jmp     loc_403300
.text:004033D9 ; ---------------------------------------------------------------------------
.text:004033D9
.text:004033D9 loc_4033D9:                             ; CODE XREF: sub_403250+6D↑j
.text:004033D9                                         ; DATA XREF: sub_403250:jpt_4032BD↑o
.text:004033D9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004032BD case 8
.text:004033E0                 jmp     loc_403300
.text:004033E5 ; ---------------------------------------------------------------------------
.text:004033E5
.text:004033E5 loc_4033E5:                             ; CODE XREF: sub_403250+6D↑j
.text:004033E5                                         ; DATA XREF: sub_403250:jpt_4032BD↑o
.text:004033E5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004032BD case 9
.text:004033EC                 jmp     loc_403300
.text:004033F1 ; ---------------------------------------------------------------------------
.text:004033F1
.text:004033F1 def_4032BD:                             ; CODE XREF: sub_403250+67↑j
.text:004033F1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004032BD default case
.text:004033F8                 jmp     loc_403300
.text:004033FD ; ---------------------------------------------------------------------------
.text:004033FD
.text:004033FD loc_4033FD:                             ; CODE XREF: sub_403250+3E↑j
.text:004033FD                 mov     [esp+2Ch+var_20], ebp
.text:00403401                 mov     ecx, [esp+2Ch+var_14]
.text:00403405                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040340D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403410                 mov     [esp+2Ch+ArgList], ecx
.text:00403414                 call    fprintf
.text:00403419                 jmp     loc_4032B4
.text:00403419 sub_403250      endp
.text:00403419
.text:00403419 ; ---------------------------------------------------------------------------
.text:0040341E                 align 10h
.text:00403420
.text:00403420 ; =============== S U B R O U T I N E =======================================
.text:00403420
.text:00403420
.text:00403420 ; int __cdecl sub_403420(FILE *, FILE *, int, int, char)
.text:00403420 sub_403420      proc near               ; CODE XREF: sub_401660+262↑p
.text:00403420
.text:00403420 var_1C          = dword ptr -1Ch
.text:00403420 var_18          = dword ptr -18h
.text:00403420 var_14          = dword ptr -14h
.text:00403420 var_10          = dword ptr -10h
.text:00403420 var_C           = dword ptr -0Ch
.text:00403420 arg_0           = dword ptr  4
.text:00403420 arg_4           = dword ptr  8
.text:00403420 arg_8           = dword ptr  0Ch
.text:00403420 arg_C           = dword ptr  10h
.text:00403420 arg_10          = byte ptr  14h
.text:00403420
.text:00403420                 sub     esp, 1Ch
.text:00403423                 mov     edx, [esp+1Ch+arg_C]
.text:00403427                 lea     ecx, [esp+1Ch+arg_10]
.text:0040342B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040342F                 mov     ecx, [esp+1Ch+arg_8]
.text:00403433                 mov     [esp+1Ch+var_10], edx ; int
.text:00403437                 mov     edx, [esp+1Ch+arg_4]
.text:0040343B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040343F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00403443                 mov     edx, [esp+1Ch+arg_0]
.text:00403447                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040344A                 call    sub_403250
.text:0040344F                 add     esp, 1Ch
.text:00403452                 retn
.text:00403452 sub_403420      endp
.text:00403452
.text:00403452 ; ---------------------------------------------------------------------------
.text:00403453                 align 10h
.text:00403460
.text:00403460 ; =============== S U B R O U T I N E =======================================
.text:00403460
.text:00403460
.text:00403460 ; int __cdecl sub_403460(int, int, char *, int, int)
.text:00403460 sub_403460      proc near               ; CODE XREF: sub_401660+AF↑p
.text:00403460
.text:00403460 var_1C          = dword ptr -1Ch
.text:00403460 var_18          = dword ptr -18h
.text:00403460 var_14          = dword ptr -14h
.text:00403460 var_10          = dword ptr -10h
.text:00403460 var_C           = dword ptr -0Ch
.text:00403460 var_8           = dword ptr -8
.text:00403460 var_4           = dword ptr -4
.text:00403460 arg_0           = dword ptr  4
.text:00403460 arg_4           = dword ptr  8
.text:00403460 arg_8           = dword ptr  0Ch
.text:00403460 arg_C           = dword ptr  10h
.text:00403460 arg_10          = dword ptr  14h
.text:00403460
.text:00403460                 sub     esp, 1Ch
.text:00403463                 mov     edx, [esp+1Ch+arg_C]
.text:00403467                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040346F                 mov     ecx, [esp+1Ch+arg_10]
.text:00403473                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040347B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040347F                 mov     edx, [esp+1Ch+arg_4]
.text:00403483                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403487                 mov     ecx, [esp+1Ch+arg_8]
.text:0040348B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040348F                 mov     edx, [esp+1Ch+arg_0]
.text:00403493                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403497                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040349A                 call    sub_402CC0
.text:0040349F                 add     esp, 1Ch
.text:004034A2                 retn
.text:004034A2 sub_403460      endp
.text:004034A2
.text:004034A2 ; ---------------------------------------------------------------------------
.text:004034A3                 align 10h
.text:004034B0                 sub     esp, 2Ch
.text:004034B3                 mov     edx, [esp+44h]
.text:004034B7                 mov     dword ptr [esp+18h], 0
.text:004034BF                 mov     ecx, [esp+40h]
.text:004034C3                 mov     dword ptr [esp+14h], 0
.text:004034CB                 mov     [esp+1Ch], edx
.text:004034CF                 mov     edx, [esp+3Ch]
.text:004034D3                 mov     [esp+10h], ecx
.text:004034D7                 mov     ecx, [esp+38h]
.text:004034DB                 mov     [esp+0Ch], edx
.text:004034DF                 mov     edx, [esp+34h]
.text:004034E3                 mov     [esp+8], ecx
.text:004034E7                 mov     [esp+4], edx
.text:004034EB                 mov     edx, [esp+30h]
.text:004034EF                 mov     [esp], edx
.text:004034F2                 call    sub_402130
.text:004034F7                 add     esp, 2Ch
.text:004034FA                 retn
.text:004034FA ; ---------------------------------------------------------------------------
.text:004034FB                 align 10h
.text:00403500                 sub     esp, 1Ch
.text:00403503                 mov     edx, [esp+2Ch]
.text:00403507                 mov     dword ptr [esp+18h], 0
.text:0040350F                 mov     ecx, [esp+30h]
.text:00403513                 mov     dword ptr [esp+14h], 1
.text:0040351B                 mov     [esp+0Ch], edx
.text:0040351F                 mov     edx, [esp+24h]
.text:00403523                 mov     [esp+10h], ecx
.text:00403527                 mov     ecx, [esp+28h]
.text:0040352B                 mov     [esp+4], edx
.text:0040352F                 mov     edx, [esp+20h]
.text:00403533                 mov     [esp+8], ecx
.text:00403537                 mov     [esp], edx
.text:0040353A                 call    sub_402CC0
.text:0040353F                 add     esp, 1Ch
.text:00403542                 retn
.text:00403542 ; ---------------------------------------------------------------------------
.text:00403543                 align 10h
.text:00403550                 sub     esp, 2Ch
.text:00403553                 mov     edx, [esp+44h]
.text:00403557                 mov     dword ptr [esp+18h], 0
.text:0040355F                 mov     ecx, [esp+40h]
.text:00403563                 mov     dword ptr [esp+14h], 1
.text:0040356B                 mov     [esp+1Ch], edx
.text:0040356F                 mov     edx, [esp+3Ch]
.text:00403573                 mov     [esp+10h], ecx
.text:00403577                 mov     ecx, [esp+38h]
.text:0040357B                 mov     [esp+0Ch], edx
.text:0040357F                 mov     edx, [esp+34h]
.text:00403583                 mov     [esp+8], ecx
.text:00403587                 mov     [esp+4], edx
.text:0040358B                 mov     edx, [esp+30h]
.text:0040358F                 mov     [esp], edx
.text:00403592                 call    sub_402130
.text:00403597                 add     esp, 2Ch
.text:0040359A                 retn
.text:0040359A ; ---------------------------------------------------------------------------
.text:0040359B                 align 10h
.text:004035A0                 mov     edx, [esp+4]
.text:004035A4                 mov     ds:dword_407070, edx
.text:004035AA                 retn
.text:004035AA ; ---------------------------------------------------------------------------
.text:004035AB aWriteError     db 'write error',0      ; DATA XREF: sub_4035D0:loc_403619↓o
.text:004035B7 ; const char aSS_0[]
.text:004035B7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_4035D0+77↓o
.text:004035BE ; const char aS_2[]
.text:004035BE aS_2            db '%s',0               ; DATA XREF: sub_4035D0+A0↓o
.text:004035C1 ; ---------------------------------------------------------------------------
.text:004035C1                 jmp     short sub_4035D0
.text:004035C1 ; ---------------------------------------------------------------------------
.text:004035C3                 align 10h
.text:004035D0
.text:004035D0 ; =============== S U B R O U T I N E =======================================
.text:004035D0
.text:004035D0
.text:004035D0 ; void __cdecl sub_4035D0()
.text:004035D0 sub_4035D0      proc near               ; CODE XREF: .text:004035C1↑j
.text:004035D0                                         ; DATA XREF: sub_401660+6C↑o
.text:004035D0
.text:004035D0 Stream          = dword ptr -2Ch
.text:004035D0 ErrorMessage    = dword ptr -28h
.text:004035D0 var_24          = dword ptr -24h
.text:004035D0 var_20          = byte ptr -20h
.text:004035D0 var_1C          = dword ptr -1Ch
.text:004035D0 var_9           = byte ptr -9
.text:004035D0
.text:004035D0                 push    esi
.text:004035D1                 push    ebx
.text:004035D2                 sub     esp, 24h
.text:004035D5                 mov     edx, ds:_iob
.text:004035DB                 mov     ecx, [edx+2Ch]
.text:004035DE                 lea     esi, [edx+20h]
.text:004035E1                 shr     ecx, 5
.text:004035E4                 mov     bl, cl
.text:004035E6                 mov     ecx, [edx+20h]
.text:004035E9                 and     bl, 1
.text:004035EC                 cmp     ecx, [esi+8]
.text:004035EF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004035F2                 setz    [esp+2Ch+var_9]
.text:004035F7                 call    fclose
.text:004035FC                 test    eax, eax
.text:004035FE                 setnz   al
.text:00403601                 test    bl, bl
.text:00403603                 jnz     loc_403693
.text:00403609                 test    al, al
.text:0040360B                 jz      short loc_403660
.text:0040360D
.text:0040360D loc_40360D:                             ; CODE XREF: sub_4035D0+CD↓j
.text:0040360D                 call    _errno
.text:00403612                 mov     esi, [eax]
.text:00403614
.text:00403614 loc_403614:                             ; CODE XREF: sub_4035D0+C7↓j
.text:00403614                 cmp     esi, 9
.text:00403617                 jz      short loc_403686
.text:00403619
.text:00403619 loc_403619:                             ; CODE XREF: sub_4035D0+B8↓j
.text:00403619                                         ; sub_4035D0+C1↓j
.text:00403619                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403620                 call    ds:libintl_gettext
.text:00403626                 mov     ebx, eax
.text:00403628                 mov     eax, ds:dword_407070
.text:0040362D                 test    eax, eax
.text:0040362F                 jz      short loc_403666
.text:00403631                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403634                 call    sub_404B10
.text:00403639                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040363D                 mov     edx, Code
.text:00403643                 mov     [esp+2Ch+var_1C], ebx
.text:00403647                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040364F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403653                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403656                 call    sub_4051D0
.text:0040365B                 nop
.text:0040365C                 lea     esi, [esi+0]
.text:00403660
.text:00403660 loc_403660:                             ; CODE XREF: sub_4035D0+3B↑j
.text:00403660                                         ; sub_4035D0+B4↓j ...
.text:00403660                 add     esp, 24h
.text:00403663                 pop     ebx
.text:00403664                 pop     esi
.text:00403665                 retn
.text:00403666 ; ---------------------------------------------------------------------------
.text:00403666
.text:00403666 loc_403666:                             ; CODE XREF: sub_4035D0+5F↑j
.text:00403666                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040366A                 mov     ebx, Code
.text:00403670                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00403678                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040367C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040367F                 call    sub_4051D0
.text:00403684                 jmp     short loc_403660
.text:00403686 ; ---------------------------------------------------------------------------
.text:00403686
.text:00403686 loc_403686:                             ; CODE XREF: sub_4035D0+47↑j
.text:00403686                 test    bl, bl
.text:00403688                 jnz     short loc_403619
.text:0040368A                 cmp     [esp+2Ch+var_9], 0
.text:0040368F                 jnz     short loc_403660
.text:00403691                 jmp     short loc_403619
.text:00403693 ; ---------------------------------------------------------------------------
.text:00403693
.text:00403693 loc_403693:                             ; CODE XREF: sub_4035D0+33↑j
.text:00403693                 xor     esi, esi
.text:00403695                 test    al, al
.text:00403697                 jz      loc_403614
.text:0040369D                 jmp     loc_40360D
.text:0040369D sub_4035D0      endp
.text:0040369D
.text:0040369D ; ---------------------------------------------------------------------------
.text:004036A2                 align 10h
.text:004036B0 byte_4036B0     db 43h, 0               ; DATA XREF: sub_4036C0+33↓o
.text:004036B2 aPosix          db 'POSIX',0            ; DATA XREF: sub_4036C0+45↓o
.text:004036B8                 align 10h
.text:004036C0
.text:004036C0 ; =============== S U B R O U T I N E =======================================
.text:004036C0
.text:004036C0
.text:004036C0 sub_4036C0      proc near               ; CODE XREF: sub_401660+62↑p
.text:004036C0
.text:004036C0 Category        = dword ptr -1Ch
.text:004036C0 Locale          = dword ptr -18h
.text:004036C0 var_10          = dword ptr -10h
.text:004036C0 var_C           = dword ptr -0Ch
.text:004036C0 var_8           = dword ptr -8
.text:004036C0 var_4           = dword ptr -4
.text:004036C0 arg_0           = dword ptr  4
.text:004036C0
.text:004036C0                 sub     esp, 1Ch
.text:004036C3                 mov     edx, [esp+1Ch+arg_0]
.text:004036C7                 mov     [esp+1Ch+var_10], ebx
.text:004036CB                 mov     bl, 1
.text:004036CD                 mov     [esp+1Ch+var_C], esi
.text:004036D1                 mov     [esp+1Ch+var_8], edi
.text:004036D5                 mov     [esp+1Ch+var_4], ebp
.text:004036D9                 mov     [esp+1Ch+Locale], 0 ; Locale
.text:004036E1                 mov     [esp+1Ch+Category], edx ; Category
.text:004036E4                 call    setlocale
.text:004036E9                 test    eax, eax
.text:004036EB                 jz      short loc_403714
.text:004036ED                 cld
.text:004036EE                 mov     edx, 2
.text:004036F3                 mov     edi, offset byte_4036B0
.text:004036F8                 mov     esi, eax
.text:004036FA                 mov     ecx, edx
.text:004036FC                 repe cmpsb
.text:004036FE                 jz      short loc_403712
.text:00403700                 mov     edx, 6
.text:00403705                 mov     edi, offset aPosix ; "POSIX"
.text:0040370A                 mov     esi, eax
.text:0040370C                 mov     ecx, edx
.text:0040370E                 repe cmpsb
.text:00403710                 jnz     short loc_403714
.text:00403712
.text:00403712 loc_403712:                             ; CODE XREF: sub_4036C0+3E↑j
.text:00403712                 xor     ebx, ebx
.text:00403714
.text:00403714 loc_403714:                             ; CODE XREF: sub_4036C0+2B↑j
.text:00403714                                         ; sub_4036C0+50↑j
.text:00403714                 movzx   eax, bl
.text:00403717                 mov     esi, [esp+1Ch+var_C]
.text:0040371B                 mov     ebx, [esp+1Ch+var_10]
.text:0040371F                 mov     edi, [esp+1Ch+var_8]
.text:00403723                 mov     ebp, [esp+1Ch+var_4]
.text:00403727                 add     esp, 1Ch
.text:0040372A                 retn
.text:0040372A sub_4036C0      endp
.text:0040372A
.text:0040372A ; ---------------------------------------------------------------------------
.text:0040372B                 align 10h
.text:00403730 aStringComparis db 'string comparison failed',0
.text:00403730                                         ; DATA XREF: sub_4037C0:loc_403820↓o
.text:00403749                 align 10h
.text:00403750 aSetLcAllCToWor db 'Set LC_ALL=',27h,'C',27h,' to work around the problem.',0
.text:00403750                                         ; DATA XREF: sub_4037C0+81↓o
.text:0040377B                 db 15h dup(90h)
.text:00403790 aTheStringsComp db 'The strings compared were %s and %s.',0
.text:00403790                                         ; DATA XREF: sub_4037C0+E8↓o
.text:004037B5                 align 10h
.text:004037C0
.text:004037C0 ; =============== S U B R O U T I N E =======================================
.text:004037C0
.text:004037C0
.text:004037C0 ; int __cdecl sub_4037C0(char *, int, char *, char)
.text:004037C0 sub_4037C0      proc near               ; CODE XREF: sub_401AD0+2DD↑p
.text:004037C0
.text:004037C0 Str             = dword ptr -2Ch
.text:004037C0 ErrorMessage    = dword ptr -28h
.text:004037C0 var_24          = dword ptr -24h
.text:004037C0 var_20          = byte ptr -20h
.text:004037C0 var_1C          = dword ptr -1Ch
.text:004037C0 var_10          = dword ptr -10h
.text:004037C0 var_C           = dword ptr -0Ch
.text:004037C0 var_8           = dword ptr -8
.text:004037C0 var_4           = dword ptr -4
.text:004037C0 arg_0           = dword ptr  4
.text:004037C0 arg_4           = dword ptr  8
.text:004037C0 arg_8           = dword ptr  0Ch
.text:004037C0 arg_C           = byte ptr  10h
.text:004037C0
.text:004037C0                 sub     esp, 2Ch
.text:004037C3                 mov     edx, [esp+2Ch+arg_4]
.text:004037C7                 mov     [esp+2Ch+var_C], esi
.text:004037CB                 mov     esi, dword ptr [esp+2Ch+arg_C]
.text:004037CF                 mov     [esp+2Ch+var_4], ebp
.text:004037D3                 mov     ebp, [esp+2Ch+arg_8]
.text:004037D7                 mov     [esp+2Ch+ErrorMessage], edx ; int
.text:004037DB                 mov     edx, [esp+2Ch+arg_0]
.text:004037DF                 mov     [esp+2Ch+var_10], ebx
.text:004037E3                 mov     [esp+2Ch+var_8], edi
.text:004037E7                 mov     [esp+2Ch+Str], edx ; Str
.text:004037EA                 mov     dword ptr [esp+2Ch+var_20], esi ; char
.text:004037EE                 mov     [esp+2Ch+var_24], ebp ; int
.text:004037F2                 call    sub_404D80
.text:004037F7                 mov     edi, eax
.text:004037F9                 call    _errno
.text:004037FE                 mov     ebx, [eax]
.text:00403800                 test    ebx, ebx
.text:00403802                 jnz     short loc_403820
.text:00403804
.text:00403804 loc_403804:                             ; CODE XREF: sub_4037C0+119↓j
.text:00403804                 mov     eax, edi
.text:00403806                 mov     ebx, [esp+2Ch+var_10]
.text:0040380A                 mov     esi, [esp+2Ch+var_C]
.text:0040380E                 mov     edi, [esp+2Ch+var_8]
.text:00403812                 mov     ebp, [esp+2Ch+var_4]
.text:00403816                 add     esp, 2Ch
.text:00403819                 retn
.text:00403819 ; ---------------------------------------------------------------------------
.text:0040381A                 align 10h
.text:00403820
.text:00403820 loc_403820:                             ; CODE XREF: sub_4037C0+42↑j
.text:00403820                 mov     [esp+2Ch+Str], offset aStringComparis ; "string comparison failed"
.text:00403827                 call    ds:libintl_gettext
.text:0040382D                 mov     [esp+2Ch+ErrorMessage], ebx ; ErrorMessage
.text:00403831                 mov     [esp+2Ch+Str], 0 ; Code
.text:00403838                 mov     [esp+2Ch+var_24], eax ; char *
.text:0040383C                 call    sub_4051D0
.text:00403841                 mov     [esp+2Ch+Str], offset aSetLcAllCToWor ; "Set LC_ALL='C' to work around the probl"...
.text:00403848                 call    ds:libintl_gettext
.text:0040384E                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:00403856                 mov     [esp+2Ch+Str], 0 ; Code
.text:0040385D                 mov     [esp+2Ch+var_24], eax ; char *
.text:00403861                 call    sub_4051D0
.text:00403866                 mov     dword ptr [esp+2Ch+var_20], esi ; int
.text:0040386A                 mov     [esp+2Ch+var_24], ebp ; char *
.text:0040386E                 mov     [esp+2Ch+ErrorMessage], 5 ; int
.text:00403876                 mov     [esp+2Ch+Str], 1 ; int
.text:0040387D                 call    sub_404880
.text:00403882                 mov     [esp+2Ch+ErrorMessage], 5 ; int
.text:0040388A                 mov     edx, [esp+2Ch+arg_4]
.text:0040388E                 mov     ebx, eax
.text:00403890                 mov     [esp+2Ch+Str], 0 ; int
.text:00403897                 mov     esi, [esp+2Ch+arg_0]
.text:0040389B                 mov     dword ptr [esp+2Ch+var_20], edx ; int
.text:0040389F                 mov     [esp+2Ch+var_24], esi ; char *
.text:004038A3                 call    sub_404880
.text:004038A8                 mov     [esp+2Ch+Str], offset aTheStringsComp ; "The strings compared were %s and %s."
.text:004038AF                 mov     ebp, eax
.text:004038B1                 call    ds:libintl_gettext
.text:004038B7                 mov     [esp+2Ch+var_1C], ebx
.text:004038BB                 mov     ecx, Code
.text:004038C1                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:004038C5                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:004038CD                 mov     [esp+2Ch+var_24], eax ; char *
.text:004038D1                 mov     [esp+2Ch+Str], ecx ; Code
.text:004038D4                 call    sub_4051D0
.text:004038D9                 jmp     loc_403804
.text:004038D9 sub_4037C0      endp
.text:004038D9
.text:004038D9 ; ---------------------------------------------------------------------------
.text:004038DE                 db 12h dup(90h)
.text:004038F0
.text:004038F0 ; =============== S U B R O U T I N E =======================================
.text:004038F0
.text:004038F0
.text:004038F0 sub_4038F0      proc near               ; CODE XREF: sub_401AD0+7B↑p
.text:004038F0                                         ; sub_401AD0+1D1↑p ...
.text:004038F0
.text:004038F0 File            = dword ptr -1Ch
.text:004038F0 var_18          = dword ptr -18h
.text:004038F0 var_14          = dword ptr -14h
.text:004038F0 arg_0           = dword ptr  4
.text:004038F0 arg_4           = dword ptr  8
.text:004038F0
.text:004038F0                 push    ebp
.text:004038F1                 push    edi
.text:004038F2                 push    esi
.text:004038F3                 push    ebx
.text:004038F4                 sub     esp, 0Ch
.text:004038F7                 mov     edx, [esp+1Ch+arg_0]
.text:004038FB                 mov     edi, [esp+1Ch+arg_4]
.text:004038FF                 mov     ebp, [edx+8]
.text:00403902                 mov     ecx, [edx]
.text:00403904                 mov     ebx, ebp
.text:00403906                 add     ecx, ebp
.text:00403908                 test    byte ptr [edi+0Ch], 10h
.text:0040390C                 mov     [esp+1Ch+var_14], ecx
.text:00403910                 jnz     loc_403998
.text:00403916                 lea     esi, [esi+0]
.text:00403919                 lea     edi, [edi+0]
.text:00403920
.text:00403920 loc_403920:                             ; CODE XREF: sub_4038F0+56↓j
.text:00403920                 mov     ecx, [edi+4]
.text:00403923                 dec     ecx
.text:00403924                 test    ecx, ecx
.text:00403926                 mov     [edi+4], ecx
.text:00403929                 js      short loc_4039A0
.text:0040392B                 mov     edx, [edi]
.text:0040392D                 movzx   esi, byte ptr [edx]
.text:00403930                 inc     edx
.text:00403931                 mov     [edi], edx
.text:00403933
.text:00403933 loc_403933:                             ; CODE XREF: sub_4038F0+BA↓j
.text:00403933                 cmp     esi, 0FFFFFFFFh
.text:00403936                 jz      short loc_403981
.text:00403938
.text:00403938 loc_403938:                             ; CODE XREF: sub_4038F0+A6↓j
.text:00403938                 cmp     ebx, [esp+1Ch+var_14]
.text:0040393C                 jz      short loc_403959
.text:0040393E
.text:0040393E loc_40393E:                             ; CODE XREF: sub_4038F0+8F↓j
.text:0040393E                 mov     ecx, esi
.text:00403940                 mov     [ebx], cl
.text:00403942                 inc     ebx
.text:00403943                 cmp     esi, 0Ah
.text:00403946                 jnz     short loc_403920
.text:00403948
.text:00403948 loc_403948:                             ; CODE XREF: sub_4038F0+9F↓j
.text:00403948                 mov     eax, [esp+1Ch+arg_0]
.text:0040394C                 sub     ebx, ebp
.text:0040394E                 mov     [eax+4], ebx
.text:00403951
.text:00403951 loc_403951:                             ; CODE XREF: sub_4038F0+AA↓j
.text:00403951                 add     esp, 0Ch
.text:00403954                 pop     ebx
.text:00403955                 pop     esi
.text:00403956                 pop     edi
.text:00403957                 pop     ebp
.text:00403958                 retn
.text:00403959 ; ---------------------------------------------------------------------------
.text:00403959
.text:00403959 loc_403959:                             ; CODE XREF: sub_4038F0+4C↑j
.text:00403959                 mov     edx, [esp+1Ch+arg_0]
.text:0040395D                 mov     ebx, [edx]
.text:0040395F                 mov     [esp+1Ch+File], ebp ; void *
.text:00403962                 mov     [esp+1Ch+var_18], edx ; int
.text:00403966                 call    sub_404F60
.text:0040396B                 mov     ebp, eax
.text:0040396D                 lea     ebx, [ebx+eax]
.text:00403970                 mov     eax, [esp+1Ch+arg_0]
.text:00403974                 mov     [eax+8], ebp
.text:00403977                 mov     ecx, [eax]
.text:00403979                 add     ecx, ebp
.text:0040397B                 mov     [esp+1Ch+var_14], ecx
.text:0040397F                 jmp     short loc_40393E
.text:00403981 ; ---------------------------------------------------------------------------
.text:00403981
.text:00403981 loc_403981:                             ; CODE XREF: sub_4038F0+46↑j
.text:00403981                 cmp     ebx, ebp
.text:00403983                 jz      short loc_403998
.text:00403985                 test    byte ptr [edi+0Ch], 20h
.text:00403989                 jnz     short loc_403998
.text:0040398B                 cmp     byte ptr [ebx-1], 0Ah
.text:0040398F                 jz      short loc_403948
.text:00403991                 mov     esi, 0Ah
.text:00403996                 jmp     short loc_403938
.text:00403998 ; ---------------------------------------------------------------------------
.text:00403998
.text:00403998 loc_403998:                             ; CODE XREF: sub_4038F0+20↑j
.text:00403998                                         ; sub_4038F0+93↑j ...
.text:00403998                 xor     eax, eax
.text:0040399A                 jmp     short loc_403951
.text:0040399A ; ---------------------------------------------------------------------------
.text:0040399C                 align 10h
.text:004039A0
.text:004039A0 loc_4039A0:                             ; CODE XREF: sub_4038F0+39↑j
.text:004039A0                 mov     [esp+1Ch+File], edi ; File
.text:004039A3                 call    _filbuf
.text:004039A8                 mov     esi, eax
.text:004039AA                 jmp     short loc_403933
.text:004039AA sub_4038F0      endp
.text:004039AA
.text:004039AA ; ---------------------------------------------------------------------------
.text:004039AC                 align 10h
.text:004039B0
.text:004039B0 ; =============== S U B R O U T I N E =======================================
.text:004039B0
.text:004039B0
.text:004039B0 sub_4039B0      proc near               ; CODE XREF: sub_401AD0+2C↑p
.text:004039B0
.text:004039B0 arg_0           = dword ptr  4
.text:004039B0
.text:004039B0                 push    edi
.text:004039B1                 mov     ecx, 3
.text:004039B6                 mov     edi, [esp+4+arg_0]
.text:004039BA                 cld
.text:004039BB                 xor     eax, eax
.text:004039BD                 rep stosd
.text:004039BF                 pop     edi
.text:004039C0                 retn
.text:004039C0 sub_4039B0      endp
.text:004039C0
.text:004039C1 ; ---------------------------------------------------------------------------
.text:004039C1                 jmp     short loc_4039D0
.text:004039C1 ; ---------------------------------------------------------------------------
.text:004039C3                 align 10h
.text:004039D0
.text:004039D0 loc_4039D0:                             ; CODE XREF: .text:004039C1↑j
.text:004039D0                 mov     ecx, [esp+4]
.text:004039D4                 mov     edx, [ecx+8]
.text:004039D7                 mov     [esp+4], edx
.text:004039DB                 jmp     free
.text:004039DB ; ---------------------------------------------------------------------------
.text:004039E0 aLiteral        db 'literal',0          ; DATA XREF: .text:00403A20↓o
.text:004039E8 aShell          db 'shell',0            ; DATA XREF: .text:00403A24↓o
.text:004039EE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403A28↓o
.text:004039FB aC              db 'c',0                ; DATA XREF: .text:00403A2C↓o
.text:004039FD aEscape         db 'escape',0           ; DATA XREF: .text:00403A30↓o
.text:00403A04 aLocale         db 'locale',0           ; DATA XREF: .text:00403A34↓o
.text:00403A0B aClocale        db 'clocale',0          ; DATA XREF: .text:00403A38↓o
.text:00403A13                 align 10h
.text:00403A20                 dd offset aLiteral      ; "literal"
.text:00403A24                 dd offset aShell        ; "shell"
.text:00403A28                 dd offset aShellAlways  ; "shell-always"
.text:00403A2C                 dd offset aC            ; "c"
.text:00403A30                 dd offset aEscape       ; "escape"
.text:00403A34                 dd offset aLocale       ; "locale"
.text:00403A38                 dd offset aClocale      ; "clocale"
.text:00403A3C                 dd 2 dup(0)
.text:00403A44                 dd 1, 2, 3, 4, 5, 6
.text:00403A5C asc_403A5C:                             ; DATA XREF: sub_403A70+7E↓o
.text:00403A5C                                         ; sub_403A70+A39↓o ...
.text:00403A5C                 text "UTF-16LE", '"',27h,'`'
.text:00403A62                 align 10h
.text:00403A70
.text:00403A70 ; =============== S U B R O U T I N E =======================================
.text:00403A70
.text:00403A70
.text:00403A70 ; int __cdecl sub_403A70(int, int, char *Str, int, int, int)
.text:00403A70 sub_403A70      proc near               ; CODE XREF: sub_403A70+43A↓p
.text:00403A70                                         ; .text:00404633↓p ...
.text:00403A70
.text:00403A70 C               = dword ptr -4Ch
.text:00403A70 Type            = dword ptr -48h
.text:00403A70 SizeInBytes     = dword ptr -44h
.text:00403A70 State           = dword ptr -40h
.text:00403A70 var_3C          = dword ptr -3Ch
.text:00403A70 var_38          = dword ptr -38h
.text:00403A70 var_34          = dword ptr -34h
.text:00403A70 var_30          = dword ptr -30h
.text:00403A70 var_29          = byte ptr -29h
.text:00403A70 var_28          = dword ptr -28h
.text:00403A70 var_22          = byte ptr -22h
.text:00403A70 var_21          = byte ptr -21h
.text:00403A70 var_20          = dword ptr -20h
.text:00403A70 var_1C          = dword ptr -1Ch
.text:00403A70 var_18          = mbstate_t ptr -18h
.text:00403A70 arg_0           = dword ptr  4
.text:00403A70 arg_4           = dword ptr  8
.text:00403A70 Str             = dword ptr  0Ch
.text:00403A70 arg_C           = dword ptr  10h
.text:00403A70 arg_10          = dword ptr  14h
.text:00403A70 arg_14          = dword ptr  18h
.text:00403A70
.text:00403A70                 push    ebp
.text:00403A71                 push    edi
.text:00403A72                 push    esi
.text:00403A73                 push    ebx
.text:00403A74                 sub     esp, 3Ch
.text:00403A77                 mov     edx, ds:__mb_cur_max
.text:00403A7D                 mov     [esp+4Ch+var_34], 0
.text:00403A85                 mov     [esp+4Ch+var_1C], 0
.text:00403A8D                 cmp     dword ptr [edx], 1
.text:00403A90                 mov     [esp+4Ch+var_20], 0
.text:00403A98                 mov     [esp+4Ch+var_21], 0
.text:00403A9D                 setz    [esp+4Ch+var_22]
.text:00403AA2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403AA7                 ja      short def_403AAD ; jumptable 00403AAD default case, cases 0,1
.text:00403AA9                 mov     edx, [esp+4Ch+arg_10]
.text:00403AAD                 jmp     ds:jpt_403AAD[edx*4] ; switch jump
.text:00403AAD ; ---------------------------------------------------------------------------
.text:00403AB4 jpt_403AAD      dd offset def_403AAD    ; DATA XREF: sub_403A70+3D↑r
.text:00403AB4                 dd offset def_403AAD    ; jump table for switch statement
.text:00403AB4                 dd offset loc_4043F5
.text:00403AB4                 dd offset loc_403AD0
.text:00403AB4                 dd offset loc_40441B
.text:00403AB4                 dd offset loc_404425
.text:00403AB4                 dd offset loc_404425
.text:00403AD0 ; ---------------------------------------------------------------------------
.text:00403AD0
.text:00403AD0 loc_403AD0:                             ; CODE XREF: sub_403A70+3D↑j
.text:00403AD0                                         ; DATA XREF: sub_403A70:jpt_403AAD↑o
.text:00403AD0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00403AAD case 3
.text:00403AD4                 cmp     [esp+4Ch+var_34], eax
.text:00403AD8                 jnb     short loc_403AE1
.text:00403ADA                 mov     ebx, [esp+4Ch+arg_0]
.text:00403ADE                 mov     byte ptr [ebx], 22h ; '"'
.text:00403AE1
.text:00403AE1 loc_403AE1:                             ; CODE XREF: sub_403A70+68↑j
.text:00403AE1                 mov     [esp+4Ch+var_34], 1
.text:00403AE9                 mov     [esp+4Ch+var_21], 1
.text:00403AEE                 mov     [esp+4Ch+var_1C], offset asc_403A5C ; "\"'`"
.text:00403AF6
.text:00403AF6 loc_403AF6:                             ; CODE XREF: sub_403A70+9A6↓j
.text:00403AF6                 mov     [esp+4Ch+var_20], 1
.text:00403AFE
.text:00403AFE def_403AAD:                             ; CODE XREF: sub_403A70+37↑j
.text:00403AFE                                         ; sub_403A70+3D↑j ...
.text:00403AFE                 xor     ebp, ebp        ; jumptable 00403AAD default case, cases 0,1
.text:00403B00
.text:00403B00 loc_403B00:                             ; CODE XREF: sub_403A70+3DB↓j
.text:00403B00                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403B05                 jz      loc_4043E7
.text:00403B0B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403B0F
.text:00403B0F loc_403B0F:                             ; CODE XREF: sub_403A70+980↓j
.text:00403B0F                 jz      loc_40437E
.text:00403B15                 cmp     [esp+4Ch+var_21], 0
.text:00403B1A                 jz      short loc_403B60
.text:00403B1C                 mov     esi, [esp+4Ch+var_20]
.text:00403B20                 test    esi, esi
.text:00403B22                 jz      short loc_403B60
.text:00403B24                 mov     ecx, [esp+4Ch+var_20]
.text:00403B28                 lea     edi, [ecx+ebp]
.text:00403B2B                 cmp     edi, [esp+4Ch+arg_C]
.text:00403B2F                 ja      short loc_403B60
.text:00403B31                 cld
.text:00403B32                 mov     ebx, [esp+4Ch+Str]
.text:00403B36                 mov     edi, [esp+4Ch+var_1C]
.text:00403B3A                 add     ebx, ebp
.text:00403B3C                 mov     esi, ebx
.text:00403B3E                 cmp     ecx, ecx
.text:00403B40                 repe cmpsb
.text:00403B42                 jnz     short loc_403B60
.text:00403B44                 mov     edx, [esp+4Ch+arg_4]
.text:00403B48                 cmp     [esp+4Ch+var_34], edx
.text:00403B4C                 jnb     short loc_403B5A
.text:00403B4E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403B52                 mov     eax, [esp+4Ch+var_34]
.text:00403B56                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00403B5A
.text:00403B5A loc_403B5A:                             ; CODE XREF: sub_403A70+DC↑j
.text:00403B5A                 inc     [esp+4Ch+var_34]
.text:00403B5E                 mov     esi, esi
.text:00403B60
.text:00403B60 loc_403B60:                             ; CODE XREF: sub_403A70+AA↑j
.text:00403B60                                         ; sub_403A70+B2↑j ...
.text:00403B60                 mov     edi, [esp+4Ch+Str]
.text:00403B64                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00403B69                 movzx   eax, bl
.text:00403B6C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00403B6F                 ja      def_403B75      ; jumptable 00403B75 default case, cases 1-6,14-31,64
.text:00403B75                 jmp     ds:jpt_403B75[eax*4] ; switch jump
.text:00403B75 ; ---------------------------------------------------------------------------
.text:00403B7C jpt_403B75      dd offset loc_403D78, offset def_403B75, offset def_403B75
.text:00403B7C                                         ; DATA XREF: sub_403A70+105↑r
.text:00403B7C                 dd offset def_403B75, offset def_403B75, offset def_403B75 ; jump table for switch statement
.text:00403B7C                 dd offset def_403B75, offset loc_403E50, offset loc_403E6E
.text:00403B7C                 dd offset loc_403E72, offset loc_403EB7, offset loc_403EBB
.text:00403B7C                 dd offset loc_403EBF, offset loc_403EC3, offset def_403B75
.text:00403B7C                 dd offset def_403B75, offset def_403B75, offset def_403B75
.text:00403B7C                 dd offset def_403B75, offset def_403B75, offset def_403B75
.text:00403B7C                 dd offset def_403B75, offset def_403B75, offset def_403B75
.text:00403B7C                 dd offset def_403B75, offset def_403B75, offset def_403B75
.text:00403B7C                 dd offset def_403B75, offset def_403B75, offset def_403B75
.text:00403B7C                 dd offset def_403B75, offset def_403B75, offset loc_404348
.text:00403B7C                 dd offset loc_404348, offset loc_404348, offset loc_40436A
.text:00403B7C                 dd offset loc_404348, offset def_403F72, offset loc_404348
.text:00403B7C                 dd offset loc_403EC7, offset loc_404348, offset loc_404348
.text:00403B7C                 dd offset loc_404348, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset loc_404348
.text:00403B7C                 dd offset loc_404348, offset loc_404348, offset loc_404348
.text:00403B7C                 dd offset loc_403F2C, offset def_403B75, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset loc_404348, offset loc_404341
.text:00403B7C                 dd offset def_403F72, offset loc_404348, offset def_403F72
.text:00403B7C                 dd offset loc_404348, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset def_403F72, offset def_403F72, offset def_403F72
.text:00403B7C                 dd offset loc_404358, offset loc_404348, offset loc_404358
.text:00403B7C                 dd offset loc_40436A
.text:00403D78 ; ---------------------------------------------------------------------------
.text:00403D78
.text:00403D78 loc_403D78:                             ; CODE XREF: sub_403A70+105↑j
.text:00403D78                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:00403D78                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403B75 case 0
.text:00403D7D                 lea     eax, [ebp+1]
.text:00403D80                 jz      loc_403E30
.text:00403D86                 mov     esi, [esp+4Ch+arg_4]
.text:00403D8A                 cmp     [esp+4Ch+var_34], esi
.text:00403D8E                 jnb     short loc_403D9C
.text:00403D90                 mov     eax, [esp+4Ch+arg_0]
.text:00403D94                 mov     ebx, [esp+4Ch+var_34]
.text:00403D98                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00403D9C
.text:00403D9C loc_403D9C:                             ; CODE XREF: sub_403A70+31E↑j
.text:00403D9C                 inc     [esp+4Ch+var_34]
.text:00403DA0                 mov     edx, [esp+4Ch+arg_4]
.text:00403DA4                 cmp     [esp+4Ch+var_34], edx
.text:00403DA8                 jnb     short loc_403DB6
.text:00403DAA                 mov     edi, [esp+4Ch+arg_0]
.text:00403DAE                 mov     ecx, [esp+4Ch+var_34]
.text:00403DB2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403DB6
.text:00403DB6 loc_403DB6:                             ; CODE XREF: sub_403A70+338↑j
.text:00403DB6                 inc     [esp+4Ch+var_34]
.text:00403DBA                 mov     esi, [esp+4Ch+arg_4]
.text:00403DBE                 cmp     [esp+4Ch+var_34], esi
.text:00403DC2                 jnb     short loc_403DD0
.text:00403DC4                 mov     ebx, [esp+4Ch+arg_0]
.text:00403DC8                 mov     eax, [esp+4Ch+var_34]
.text:00403DCC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403DD0
.text:00403DD0 loc_403DD0:                             ; CODE XREF: sub_403A70+352↑j
.text:00403DD0                 inc     [esp+4Ch+var_34]
.text:00403DD4                 mov     bl, 30h ; '0'
.text:00403DD6                 lea     esi, [esi+0]
.text:00403DD9                 lea     edi, [edi+0]
.text:00403DE0
.text:00403DE0 def_403F72:                             ; CODE XREF: sub_403A70+105↑j
.text:00403DE0                                         ; sub_403A70+463↓j ...
.text:00403DE0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403B75 cases 37,43-58,65-90,93,95,97-122
.text:00403DE0                                         ; jumptable 00403F72 default case, cases 34-38,42-44,46,48-59
.text:00403DE5                 lea     eax, [ebp+1]
.text:00403DE8                 jz      short loc_403E30
.text:00403DEA                 mov     cl, bl
.text:00403DEC                 mov     edi, [esp+4Ch+arg_14]
.text:00403DF0                 mov     esi, 1
.text:00403DF5                 shr     cl, 5
.text:00403DF8                 movzx   edx, cl
.text:00403DFB                 mov     ecx, ebx
.text:00403DFD                 and     ecx, 1Fh
.text:00403E00                 shl     esi, cl
.text:00403E02                 test    [edi+edx*4+4], esi
.text:00403E06                 jz      short loc_403E22
.text:00403E08
.text:00403E08 loc_403E08:                             ; CODE XREF: sub_403A70+3FC↓j
.text:00403E08                 mov     edx, [esp+4Ch+arg_4]
.text:00403E0C                 cmp     [esp+4Ch+var_34], edx
.text:00403E10                 jnb     short loc_403E1E
.text:00403E12                 mov     edi, [esp+4Ch+arg_0]
.text:00403E16                 mov     esi, [esp+4Ch+var_34]
.text:00403E1A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00403E1E
.text:00403E1E loc_403E1E:                             ; CODE XREF: sub_403A70+3A0↑j
.text:00403E1E                 inc     [esp+4Ch+var_34]
.text:00403E22
.text:00403E22 loc_403E22:                             ; CODE XREF: sub_403A70+396↑j
.text:00403E22                 lea     eax, [ebp+1]
.text:00403E25                 lea     esi, [esi+0]
.text:00403E29                 lea     edi, [edi+0]
.text:00403E30
.text:00403E30 loc_403E30:                             ; CODE XREF: sub_403A70+310↑j
.text:00403E30                                         ; sub_403A70+378↑j ...
.text:00403E30                 mov     ebp, [esp+4Ch+arg_4]
.text:00403E34                 cmp     [esp+4Ch+var_34], ebp
.text:00403E38                 jnb     short loc_403E45
.text:00403E3A                 mov     edx, [esp+4Ch+arg_0]
.text:00403E3E                 mov     ecx, [esp+4Ch+var_34]
.text:00403E42                 mov     [ecx+edx], bl
.text:00403E45
.text:00403E45 loc_403E45:                             ; CODE XREF: sub_403A70+3C8↑j
.text:00403E45                 inc     [esp+4Ch+var_34]
.text:00403E49                 mov     ebp, eax
.text:00403E4B                 jmp     loc_403B00
.text:00403E50 ; ---------------------------------------------------------------------------
.text:00403E50
.text:00403E50 loc_403E50:                             ; CODE XREF: sub_403A70+105↑j
.text:00403E50                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:00403E50                 mov     dl, 61h ; 'a'   ; jumptable 00403B75 case 7
.text:00403E52                 lea     esi, [esi+0]
.text:00403E59                 lea     edi, [edi+0]
.text:00403E60
.text:00403E60 loc_403E60:                             ; CODE XREF: sub_403A70+400↓j
.text:00403E60                                         ; sub_403A70+409↓j ...
.text:00403E60                 cmp     [esp+4Ch+var_21], 0
.text:00403E65                 lea     eax, [ebp+1]
.text:00403E68                 jz      short loc_403E30
.text:00403E6A                 mov     bl, dl
.text:00403E6C                 jmp     short loc_403E08
.text:00403E6E ; ---------------------------------------------------------------------------
.text:00403E6E
.text:00403E6E loc_403E6E:                             ; CODE XREF: sub_403A70+105↑j
.text:00403E6E                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:00403E6E                 mov     dl, 62h ; 'b'   ; jumptable 00403B75 case 8
.text:00403E70                 jmp     short loc_403E60
.text:00403E72 ; ---------------------------------------------------------------------------
.text:00403E72
.text:00403E72 loc_403E72:                             ; CODE XREF: sub_403A70+105↑j
.text:00403E72                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:00403E72                 mov     dl, 74h ; 't'   ; jumptable 00403B75 case 9
.text:00403E74
.text:00403E74 loc_403E74:                             ; CODE XREF: sub_403A70+449↓j
.text:00403E74                                         ; sub_403A70+455↓j ...
.text:00403E74                 cmp     [esp+4Ch+arg_10], 1
.text:00403E79                 jnz     short loc_403E60
.text:00403E7B
.text:00403E7B loc_403E7B:                             ; CODE XREF: sub_403A70+45C↓j
.text:00403E7B                                         ; sub_403A70+4C1↓j ...
.text:00403E7B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404242 cases 91,92,94,96,124
.text:00403E83                 mov     eax, [esp+4Ch+arg_14]
.text:00403E87                 mov     edx, [esp+4Ch+arg_C]
.text:00403E8B                 mov     ecx, [esp+4Ch+Str]
.text:00403E8F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403E93                 mov     [esp+4Ch+var_38], eax ; int
.text:00403E97                 mov     ebp, [esp+4Ch+arg_0]
.text:00403E9B                 mov     [esp+4Ch+State], edx ; int
.text:00403E9F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403EA3                 mov     [esp+4Ch+Type], ebx ; int
.text:00403EA7                 mov     [esp+4Ch+C], ebp ; int
.text:00403EAA                 call    sub_403A70
.text:00403EAF
.text:00403EAF loc_403EAF:                             ; CODE XREF: sub_403A70+972↓j
.text:00403EAF                 add     esp, 3Ch
.text:00403EB2                 pop     ebx
.text:00403EB3                 pop     esi
.text:00403EB4                 pop     edi
.text:00403EB5                 pop     ebp
.text:00403EB6                 retn
.text:00403EB7 ; ---------------------------------------------------------------------------
.text:00403EB7
.text:00403EB7 loc_403EB7:                             ; CODE XREF: sub_403A70+105↑j
.text:00403EB7                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:00403EB7                 mov     dl, 6Eh ; 'n'   ; jumptable 00403B75 case 10
.text:00403EB9                 jmp     short loc_403E74
.text:00403EBB ; ---------------------------------------------------------------------------
.text:00403EBB
.text:00403EBB loc_403EBB:                             ; CODE XREF: sub_403A70+105↑j
.text:00403EBB                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:00403EBB                 mov     dl, 76h ; 'v'   ; jumptable 00403B75 case 11
.text:00403EBD                 jmp     short loc_403E60
.text:00403EBF ; ---------------------------------------------------------------------------
.text:00403EBF
.text:00403EBF loc_403EBF:                             ; CODE XREF: sub_403A70+105↑j
.text:00403EBF                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:00403EBF                 mov     dl, 66h ; 'f'   ; jumptable 00403B75 case 12
.text:00403EC1                 jmp     short loc_403E60
.text:00403EC3 ; ---------------------------------------------------------------------------
.text:00403EC3
.text:00403EC3 loc_403EC3:                             ; CODE XREF: sub_403A70+105↑j
.text:00403EC3                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:00403EC3                 mov     dl, 72h ; 'r'   ; jumptable 00403B75 case 13
.text:00403EC5                 jmp     short loc_403E74
.text:00403EC7 ; ---------------------------------------------------------------------------
.text:00403EC7
.text:00403EC7 loc_403EC7:                             ; CODE XREF: sub_403A70+105↑j
.text:00403EC7                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:00403EC7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403B75 case 39
.text:00403ECC                 jz      short loc_403E7B ; jumptable 00404242 cases 91,92,94,96,124
.text:00403ECE                 cmp     [esp+4Ch+arg_10], 2
.text:00403ED3                 jnz     def_403F72      ; jumptable 00403B75 cases 37,43-58,65-90,93,95,97-122
.text:00403ED3                                         ; jumptable 00403F72 default case, cases 34-38,42-44,46,48-59
.text:00403ED9                 mov     edx, [esp+4Ch+arg_4]
.text:00403EDD                 cmp     [esp+4Ch+var_34], edx
.text:00403EE1                 jnb     short loc_403EEF
.text:00403EE3                 mov     ecx, [esp+4Ch+arg_0]
.text:00403EE7                 mov     edi, [esp+4Ch+var_34]
.text:00403EEB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00403EEF
.text:00403EEF loc_403EEF:                             ; CODE XREF: sub_403A70+471↑j
.text:00403EEF                 inc     [esp+4Ch+var_34]
.text:00403EF3                 mov     eax, [esp+4Ch+arg_4]
.text:00403EF7                 cmp     [esp+4Ch+var_34], eax
.text:00403EFB                 jnb     short loc_403F09
.text:00403EFD                 mov     esi, [esp+4Ch+arg_0]
.text:00403F01                 mov     edx, [esp+4Ch+var_34]
.text:00403F05                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403F09
.text:00403F09 loc_403F09:                             ; CODE XREF: sub_403A70+48B↑j
.text:00403F09                 inc     [esp+4Ch+var_34]
.text:00403F0D                 mov     edi, [esp+4Ch+arg_4]
.text:00403F11                 cmp     [esp+4Ch+var_34], edi
.text:00403F15                 jnb     short loc_403F23
.text:00403F17                 mov     ecx, [esp+4Ch+arg_0]
.text:00403F1B                 mov     eax, [esp+4Ch+var_34]
.text:00403F1F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403F23
.text:00403F23 loc_403F23:                             ; CODE XREF: sub_403A70+4A5↑j
.text:00403F23                                         ; sub_403A70+5C4↓j ...
.text:00403F23                 inc     [esp+4Ch+var_34]
.text:00403F27                 jmp     def_403F72      ; jumptable 00403B75 cases 37,43-58,65-90,93,95,97-122
.text:00403F27                                         ; jumptable 00403F72 default case, cases 34-38,42-44,46,48-59
.text:00403F2C ; ---------------------------------------------------------------------------
.text:00403F2C
.text:00403F2C loc_403F2C:                             ; CODE XREF: sub_403A70+105↑j
.text:00403F2C                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:00403F2C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403B75 case 63
.text:00403F31                 jz      loc_403E7B      ; jumptable 00404242 cases 91,92,94,96,124
.text:00403F37                 cmp     [esp+4Ch+arg_10], 3
.text:00403F3C                 jnz     def_403F72      ; jumptable 00403B75 cases 37,43-58,65-90,93,95,97-122
.text:00403F3C                                         ; jumptable 00403F72 default case, cases 34-38,42-44,46,48-59
.text:00403F42                 lea     edx, [ebp+2]
.text:00403F45                 cmp     edx, [esp+4Ch+arg_C]
.text:00403F49                 jnb     def_403F72      ; jumptable 00403B75 cases 37,43-58,65-90,93,95,97-122
.text:00403F49                                         ; jumptable 00403F72 default case, cases 34-38,42-44,46,48-59
.text:00403F4F                 mov     esi, [esp+4Ch+Str]
.text:00403F53                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403F58                 jnz     def_403F72      ; jumptable 00403B75 cases 37,43-58,65-90,93,95,97-122
.text:00403F58                                         ; jumptable 00403F72 default case, cases 34-38,42-44,46,48-59
.text:00403F5E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403F63                 movsx   eax, cl
.text:00403F66                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403F69                 cmp     eax, 1Dh
.text:00403F6C                 ja      def_403F72      ; jumptable 00403B75 cases 37,43-58,65-90,93,95,97-122
.text:00403F6C                                         ; jumptable 00403F72 default case, cases 34-38,42-44,46,48-59
.text:00403F72                 jmp     ds:jpt_403F72[eax*4] ; switch jump
.text:00403F72 ; ---------------------------------------------------------------------------
.text:00403F79                 align 4
.text:00403F7C jpt_403F72      dd offset loc_403FF4    ; DATA XREF: sub_403A70+502↑r
.text:00403F7C                 dd offset def_403F72    ; jump table for switch statement
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset loc_403FF4
.text:00403F7C                 dd offset loc_403FF4
.text:00403F7C                 dd offset loc_403FF4
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset loc_403FF4
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset loc_403FF4
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset def_403F72
.text:00403F7C                 dd offset loc_403FF4
.text:00403F7C                 dd offset loc_403FF4
.text:00403F7C                 dd offset loc_403FF4
.text:00403FF4 ; ---------------------------------------------------------------------------
.text:00403FF4
.text:00403FF4 loc_403FF4:                             ; CODE XREF: sub_403A70+502↑j
.text:00403FF4                                         ; DATA XREF: sub_403A70:jpt_403F72↑o
.text:00403FF4                 mov     ebp, edx        ; jumptable 00403F72 cases 33,39-41,45,47,60-62
.text:00403FF6                 mov     bl, cl
.text:00403FF8                 mov     edx, [esp+4Ch+arg_4]
.text:00403FFC                 cmp     [esp+4Ch+var_34], edx
.text:00404000                 jnb     short loc_40400E
.text:00404002                 mov     ecx, [esp+4Ch+arg_0]
.text:00404006                 mov     edi, [esp+4Ch+var_34]
.text:0040400A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040400E
.text:0040400E loc_40400E:                             ; CODE XREF: sub_403A70+590↑j
.text:0040400E                 inc     [esp+4Ch+var_34]
.text:00404012                 mov     eax, [esp+4Ch+arg_4]
.text:00404016                 cmp     [esp+4Ch+var_34], eax
.text:0040401A                 jnb     short loc_404028
.text:0040401C                 mov     edx, [esp+4Ch+arg_0]
.text:00404020                 mov     esi, [esp+4Ch+var_34]
.text:00404024                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404028
.text:00404028 loc_404028:                             ; CODE XREF: sub_403A70+5AA↑j
.text:00404028                 inc     [esp+4Ch+var_34]
.text:0040402C                 mov     edi, [esp+4Ch+arg_4]
.text:00404030                 cmp     [esp+4Ch+var_34], edi
.text:00404034                 jnb     loc_403F23
.text:0040403A                 mov     eax, [esp+4Ch+arg_0]
.text:0040403E                 mov     ecx, [esp+4Ch+var_34]
.text:00404042                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404046                 jmp     loc_403F23
.text:00404046 ; ---------------------------------------------------------------------------
.text:0040404B                 align 10h
.text:00404050
.text:00404050 def_403B75:                             ; CODE XREF: sub_403A70+FF↑j
.text:00404050                                         ; sub_403A70+105↑j
.text:00404050                                         ; DATA XREF: ...
.text:00404050                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403B75 default case, cases 1-6,14-31,64
.text:00404055                 jz      loc_404180
.text:0040405B                 mov     [esp+4Ch+var_28], 1
.text:00404063                 mov     esi, ds:__mb_cur_max
.text:00404069                 movzx   edx, bl
.text:0040406C                 cmp     dword ptr [esi], 1
.text:0040406F                 jz      loc_404164
.text:00404075                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040407D                 mov     [esp+4Ch+C], edx ; C
.text:00404080                 call    _isctype
.text:00404085
.text:00404085 loc_404085:                             ; CODE XREF: sub_403A70+705↓j
.text:00404085                 test    eax, eax
.text:00404087                 setnz   [esp+4Ch+var_29]
.text:0040408C
.text:0040408C loc_40408C:                             ; CODE XREF: sub_403A70+7A5↓j
.text:0040408C                 cmp     [esp+4Ch+var_21], 0
.text:00404091                 lea     eax, [ebp+1]
.text:00404094                 jz      loc_403E30
.text:0040409A                 cmp     [esp+4Ch+var_29], 0
.text:0040409F                 jnz     def_403F72      ; jumptable 00403B75 cases 37,43-58,65-90,93,95,97-122
.text:0040409F                                         ; jumptable 00403F72 default case, cases 34-38,42-44,46,48-59
.text:004040A5
.text:004040A5 loc_4040A5:                             ; CODE XREF: sub_403A70+7AB↓j
.text:004040A5                 mov     eax, [esp+4Ch+var_28]
.text:004040A9                 lea     edx, [eax+ebp]
.text:004040AC                 lea     esi, [esi+0]
.text:004040B0
.text:004040B0 loc_4040B0:                             ; CODE XREF: sub_403A70+6EF↓j
.text:004040B0                 cmp     [esp+4Ch+var_21], 0
.text:004040B5                 jz      short loc_404130
.text:004040B7                 cmp     [esp+4Ch+var_29], 0
.text:004040BC                 jnz     short loc_404130
.text:004040BE                 mov     edi, [esp+4Ch+arg_4]
.text:004040C2                 cmp     [esp+4Ch+var_34], edi
.text:004040C6                 jnb     short loc_4040D4
.text:004040C8                 mov     esi, [esp+4Ch+arg_0]
.text:004040CC                 mov     eax, [esp+4Ch+var_34]
.text:004040D0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004040D4
.text:004040D4 loc_4040D4:                             ; CODE XREF: sub_403A70+656↑j
.text:004040D4                 inc     [esp+4Ch+var_34]
.text:004040D8                 mov     ecx, [esp+4Ch+arg_4]
.text:004040DC                 cmp     [esp+4Ch+var_34], ecx
.text:004040E0                 jnb     short loc_4040F5
.text:004040E2                 mov     cl, bl
.text:004040E4                 mov     esi, [esp+4Ch+arg_0]
.text:004040E8                 mov     edi, [esp+4Ch+var_34]
.text:004040EC                 shr     cl, 6
.text:004040EF                 add     cl, 30h ; '0'
.text:004040F2                 mov     [edi+esi], cl
.text:004040F5
.text:004040F5 loc_4040F5:                             ; CODE XREF: sub_403A70+670↑j
.text:004040F5                 inc     [esp+4Ch+var_34]
.text:004040F9                 mov     edi, [esp+4Ch+arg_4]
.text:004040FD                 cmp     [esp+4Ch+var_34], edi
.text:00404101                 jnb     short loc_404119
.text:00404103                 mov     cl, bl
.text:00404105                 mov     esi, [esp+4Ch+arg_0]
.text:00404109                 shr     cl, 3
.text:0040410C                 mov     edi, [esp+4Ch+var_34]
.text:00404110                 and     cl, 7
.text:00404113                 add     cl, 30h ; '0'
.text:00404116                 mov     [edi+esi], cl
.text:00404119
.text:00404119 loc_404119:                             ; CODE XREF: sub_403A70+691↑j
.text:00404119                 inc     [esp+4Ch+var_34]
.text:0040411D                 and     bl, 7
.text:00404120                 add     bl, 30h ; '0'
.text:00404123                 lea     esi, [esi+0]
.text:00404129                 lea     edi, [edi+0]
.text:00404130
.text:00404130 loc_404130:                             ; CODE XREF: sub_403A70+645↑j
.text:00404130                                         ; sub_403A70+64C↑j
.text:00404130                 lea     eax, [ebp+1]
.text:00404133                 cmp     edx, eax
.text:00404135                 jbe     loc_403E30
.text:0040413B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040413F                 cmp     [esp+4Ch+var_34], ebp
.text:00404143                 jnb     short loc_404150
.text:00404145                 mov     ecx, [esp+4Ch+arg_0]
.text:00404149                 mov     edi, [esp+4Ch+var_34]
.text:0040414D                 mov     [edi+ecx], bl
.text:00404150
.text:00404150 loc_404150:                             ; CODE XREF: sub_403A70+6D3↑j
.text:00404150                 inc     [esp+4Ch+var_34]
.text:00404154                 mov     ebp, eax
.text:00404156                 mov     eax, [esp+4Ch+Str]
.text:0040415A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040415F                 jmp     loc_4040B0
.text:00404164 ; ---------------------------------------------------------------------------
.text:00404164
.text:00404164 loc_404164:                             ; CODE XREF: sub_403A70+5FF↑j
.text:00404164                 mov     ecx, ds:_pctype
.text:0040416A                 mov     edi, [ecx]
.text:0040416C                 movzx   eax, word ptr [edi+edx*2]
.text:00404170                 and     eax, 157h
.text:00404175                 jmp     loc_404085
.text:00404175 ; ---------------------------------------------------------------------------
.text:0040417A                 align 10h
.text:00404180
.text:00404180 loc_404180:                             ; CODE XREF: sub_403A70+5E5↑j
.text:00404180                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404185                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040418D                 mov     [esp+4Ch+var_28], 0
.text:00404195                 mov     [esp+4Ch+var_29], 1
.text:0040419A                 jz      loc_40432C
.text:004041A0
.text:004041A0 loc_4041A0:                             ; CODE XREF: sub_403A70+8CC↓j
.text:004041A0                 mov     ecx, [esp+4Ch+arg_C]
.text:004041A4                 lea     edx, [esp+4Ch+var_18]
.text:004041A8                 mov     edi, [esp+4Ch+Str]
.text:004041AC                 mov     [esp+4Ch+State], edx ; State
.text:004041B0                 lea     esi, [esp+4Ch+var_18._State]
.text:004041B4                 sub     ecx, ebp
.text:004041B6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004041BA                 add     edi, ebp
.text:004041BC                 mov     [esp+4Ch+var_30], edi
.text:004041C0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004041C4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004041C7                 call    mbrtowc
.text:004041CC                 test    eax, eax
.text:004041CE                 mov     edi, eax
.text:004041D0                 jz      short loc_404210
.text:004041D2                 cmp     eax, 0FFFFFFFFh
.text:004041D5                 jz      loc_404322
.text:004041DB                 cmp     eax, 0FFFFFFFEh
.text:004041DE                 jz      loc_4042E2
.text:004041E4                 cmp     [esp+4Ch+arg_10], 1
.text:004041E9                 jz      short loc_404220
.text:004041EB
.text:004041EB loc_4041EB:                             ; CODE XREF: sub_403A70+7B9↓j
.text:004041EB                                         ; sub_403A70+86D↓j
.text:004041EB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004041F0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004041F8                 mov     [esp+4Ch+C], ecx ; C
.text:004041FB                 call    iswctype
.text:00404200                 test    eax, eax
.text:00404202                 jnz     short loc_404209
.text:00404204                 mov     [esp+4Ch+var_29], 0
.text:00404209
.text:00404209 loc_404209:                             ; CODE XREF: sub_403A70+792↑j
.text:00404209                 mov     [esp+4Ch+var_28], edi
.text:0040420D                 lea     esi, [esi+0]
.text:00404210
.text:00404210 loc_404210:                             ; CODE XREF: sub_403A70+760↑j
.text:00404210                                         ; sub_403A70+87B↓j ...
.text:00404210                 cmp     [esp+4Ch+var_28], 1
.text:00404215                 jbe     loc_40408C
.text:0040421B                 jmp     loc_4040A5
.text:00404220 ; ---------------------------------------------------------------------------
.text:00404220
.text:00404220 loc_404220:                             ; CODE XREF: sub_403A70+779↑j
.text:00404220                 cmp     [esp+4Ch+arg_10], eax
.text:00404224                 mov     edx, 1
.text:00404229                 jnb     short loc_4041EB
.text:0040422B
.text:0040422B loc_40422B:                             ; CODE XREF: sub_403A70+867↓j
.text:0040422B                 mov     ecx, [esp+4Ch+Str]
.text:0040422F                 lea     esi, [edx+ebp]
.text:00404232                 movsx   eax, byte ptr [esi+ecx]
.text:00404236                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404239                 cmp     eax, 21h
.text:0040423C                 ja      def_404242      ; jumptable 00404242 default case, cases 93,95,97-123
.text:00404242                 jmp     ds:jpt_404242[eax*4] ; switch jump
.text:00404242 ; ---------------------------------------------------------------------------
.text:00404249                 align 4
.text:0040424C jpt_404242      dd offset loc_403E7B    ; DATA XREF: sub_403A70+7D2↑r
.text:0040424C                 dd offset loc_403E7B    ; jump table for switch statement
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset loc_403E7B
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset loc_403E7B
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset def_404242
.text:0040424C                 dd offset loc_403E7B
.text:004042D4 ; ---------------------------------------------------------------------------
.text:004042D4
.text:004042D4 def_404242:                             ; CODE XREF: sub_403A70+7CC↑j
.text:004042D4                                         ; sub_403A70+7D2↑j
.text:004042D4                                         ; DATA XREF: ...
.text:004042D4                 inc     edx             ; jumptable 00404242 default case, cases 93,95,97-123
.text:004042D5                 cmp     edx, edi
.text:004042D7                 jb      loc_40422B
.text:004042DD                 jmp     loc_4041EB
.text:004042E2 ; ---------------------------------------------------------------------------
.text:004042E2
.text:004042E2 loc_4042E2:                             ; CODE XREF: sub_403A70+76E↑j
.text:004042E2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004042E6                 mov     [esp+4Ch+var_29], 0
.text:004042EB                 jnb     loc_404210
.text:004042F1                 mov     eax, [esp+4Ch+var_30]
.text:004042F5                 cmp     byte ptr [eax], 0
.text:004042F8                 jz      loc_404210
.text:004042FE
.text:004042FE loc_4042FE:                             ; CODE XREF: sub_403A70+8AB↓j
.text:004042FE                 inc     [esp+4Ch+var_28]
.text:00404302                 mov     esi, [esp+4Ch+var_28]
.text:00404306                 lea     eax, [esi+ebp]
.text:00404309                 cmp     eax, [esp+4Ch+arg_C]
.text:0040430D                 jnb     loc_404210
.text:00404313                 mov     edi, [esp+4Ch+Str]
.text:00404317                 cmp     byte ptr [eax+edi], 0
.text:0040431B                 jnz     short loc_4042FE
.text:0040431D                 jmp     loc_404210
.text:00404322 ; ---------------------------------------------------------------------------
.text:00404322
.text:00404322 loc_404322:                             ; CODE XREF: sub_403A70+765↑j
.text:00404322                 mov     [esp+4Ch+var_29], 0
.text:00404327                 jmp     loc_404210
.text:0040432C ; ---------------------------------------------------------------------------
.text:0040432C
.text:0040432C loc_40432C:                             ; CODE XREF: sub_403A70+72A↑j
.text:0040432C                 mov     edx, [esp+4Ch+Str]
.text:00404330                 mov     [esp+4Ch+C], edx ; Str
.text:00404333                 call    strlen
.text:00404338                 mov     [esp+4Ch+arg_C], eax
.text:0040433C                 jmp     loc_4041A0
.text:00404341 ; ---------------------------------------------------------------------------
.text:00404341
.text:00404341 loc_404341:                             ; CODE XREF: sub_403A70+105↑j
.text:00404341                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:00404341                 mov     dl, bl          ; jumptable 00403B75 case 92
.text:00404343                 jmp     loc_403E74
.text:00404348 ; ---------------------------------------------------------------------------
.text:00404348
.text:00404348 loc_404348:                             ; CODE XREF: sub_403A70+105↑j
.text:00404348                                         ; sub_403A70+902↓j
.text:00404348                                         ; DATA XREF: ...
.text:00404348                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403B75 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040434D                 jnz     def_403F72      ; jumptable 00403B75 cases 37,43-58,65-90,93,95,97-122
.text:0040434D                                         ; jumptable 00403F72 default case, cases 34-38,42-44,46,48-59
.text:00404353                 jmp     loc_403E7B      ; jumptable 00404242 cases 91,92,94,96,124
.text:00404358 ; ---------------------------------------------------------------------------
.text:00404358
.text:00404358 loc_404358:                             ; CODE XREF: sub_403A70+105↑j
.text:00404358                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:00404358                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403B75 cases 123,125
.text:0040435D                 jz      short loc_404374
.text:0040435F                 cmp     [esp+4Ch+arg_C], 1
.text:00404364
.text:00404364 loc_404364:                             ; CODE XREF: sub_403A70+90C↓j
.text:00404364                 jnz     def_403F72      ; jumptable 00403B75 cases 37,43-58,65-90,93,95,97-122
.text:00404364                                         ; jumptable 00403F72 default case, cases 34-38,42-44,46,48-59
.text:0040436A
.text:0040436A loc_40436A:                             ; CODE XREF: sub_403A70+105↑j
.text:0040436A                                         ; DATA XREF: sub_403A70:jpt_403B75↑o
.text:0040436A                 test    ebp, ebp        ; jumptable 00403B75 cases 35,126
.text:0040436C                 jnz     def_403F72      ; jumptable 00403B75 cases 37,43-58,65-90,93,95,97-122
.text:0040436C                                         ; jumptable 00403F72 default case, cases 34-38,42-44,46,48-59
.text:00404372                 jmp     short loc_404348 ; jumptable 00403B75 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404374 ; ---------------------------------------------------------------------------
.text:00404374
.text:00404374 loc_404374:                             ; CODE XREF: sub_403A70+8ED↑j
.text:00404374                 mov     esi, [esp+4Ch+Str]
.text:00404378                 cmp     byte ptr [esi+1], 0
.text:0040437C                 jmp     short loc_404364
.text:0040437E ; ---------------------------------------------------------------------------
.text:0040437E
.text:0040437E loc_40437E:                             ; CODE XREF: sub_403A70:loc_403B0F↑j
.text:0040437E                 test    ebp, ebp
.text:00404380                 jnz     short loc_40438D
.text:00404382                 cmp     [esp+4Ch+arg_10], 1
.text:00404387                 jz      loc_403E7B      ; jumptable 00404242 cases 91,92,94,96,124
.text:0040438D
.text:0040438D loc_40438D:                             ; CODE XREF: sub_403A70+910↑j
.text:0040438D                 mov     esi, [esp+4Ch+var_1C]
.text:00404391                 test    esi, esi
.text:00404393                 jz      short loc_4043C8
.text:00404395                 mov     edi, [esp+4Ch+var_1C]
.text:00404399                 movzx   eax, byte ptr [edi]
.text:0040439C                 test    al, al
.text:0040439E                 jz      short loc_4043C8
.text:004043A0
.text:004043A0 loc_4043A0:                             ; CODE XREF: sub_403A70+956↓j
.text:004043A0                 mov     ebp, [esp+4Ch+arg_4]
.text:004043A4                 cmp     [esp+4Ch+var_34], ebp
.text:004043A8                 jnb     short loc_4043B5
.text:004043AA                 mov     ecx, [esp+4Ch+arg_0]
.text:004043AE                 mov     ebx, [esp+4Ch+var_34]
.text:004043B2                 mov     [ebx+ecx], al
.text:004043B5
.text:004043B5 loc_4043B5:                             ; CODE XREF: sub_403A70+938↑j
.text:004043B5                 inc     [esp+4Ch+var_1C]
.text:004043B9                 inc     [esp+4Ch+var_34]
.text:004043BD                 mov     edx, [esp+4Ch+var_1C]
.text:004043C1                 movzx   eax, byte ptr [edx]
.text:004043C4                 test    al, al
.text:004043C6                 jnz     short loc_4043A0
.text:004043C8
.text:004043C8 loc_4043C8:                             ; CODE XREF: sub_403A70+923↑j
.text:004043C8                                         ; sub_403A70+92E↑j
.text:004043C8                 mov     eax, [esp+4Ch+arg_4]
.text:004043CC                 cmp     [esp+4Ch+var_34], eax
.text:004043D0                 jnb     short loc_4043DE
.text:004043D2                 mov     edi, [esp+4Ch+arg_0]
.text:004043D6                 mov     esi, [esp+4Ch+var_34]
.text:004043DA                 mov     byte ptr [esi+edi], 0
.text:004043DE
.text:004043DE loc_4043DE:                             ; CODE XREF: sub_403A70+960↑j
.text:004043DE                 mov     eax, [esp+4Ch+var_34]
.text:004043E2                 jmp     loc_403EAF
.text:004043E7 ; ---------------------------------------------------------------------------
.text:004043E7
.text:004043E7 loc_4043E7:                             ; CODE XREF: sub_403A70+95↑j
.text:004043E7                 mov     ebx, [esp+4Ch+Str]
.text:004043EB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004043F0                 jmp     loc_403B0F
.text:004043F5 ; ---------------------------------------------------------------------------
.text:004043F5
.text:004043F5 loc_4043F5:                             ; CODE XREF: sub_403A70+3D↑j
.text:004043F5                                         ; DATA XREF: sub_403A70:jpt_403AAD↑o
.text:004043F5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00403AAD case 2
.text:004043F9                 cmp     [esp+4Ch+var_34], edx
.text:004043FD                 jnb     short loc_404406
.text:004043FF                 mov     ecx, [esp+4Ch+arg_0]
.text:00404403                 mov     byte ptr [ecx], 27h ; '''
.text:00404406
.text:00404406 loc_404406:                             ; CODE XREF: sub_403A70+98D↑j
.text:00404406                 mov     [esp+4Ch+var_34], 1
.text:0040440E                 mov     [esp+4Ch+var_1C], 403A5Eh
.text:00404416                 jmp     loc_403AF6
.text:0040441B ; ---------------------------------------------------------------------------
.text:0040441B
.text:0040441B loc_40441B:                             ; CODE XREF: sub_403A70+3D↑j
.text:0040441B                                         ; DATA XREF: sub_403A70:jpt_403AAD↑o
.text:0040441B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00403AAD case 4
.text:00404420                 jmp     def_403AAD      ; jumptable 00403AAD default case, cases 0,1
.text:00404425 ; ---------------------------------------------------------------------------
.text:00404425
.text:00404425 loc_404425:                             ; CODE XREF: sub_403A70+3D↑j
.text:00404425                                         ; DATA XREF: sub_403A70:jpt_403AAD↑o
.text:00404425                 mov     [esp+4Ch+C], 403A60h ; jumptable 00403AAD cases 5,6
.text:0040442C                 call    ds:libintl_gettext
.text:00404432                 cmp     eax, 403A60h
.text:00404437                 mov     edi, eax
.text:00404439                 jz      short loc_4044B0
.text:0040443B
.text:0040443B loc_40443B:                             ; CODE XREF: sub_403A70+A45↓j
.text:0040443B                                         ; sub_403A70+A4C↓j
.text:0040443B                 mov     [esp+4Ch+C], 403A5Eh
.text:00404442                 call    ds:libintl_gettext
.text:00404448                 cmp     eax, 403A5Eh
.text:0040444D                 mov     edx, eax
.text:0040444F                 jz      short loc_4044A2
.text:00404451
.text:00404451 loc_404451:                             ; CODE XREF: sub_403A70+A37↓j
.text:00404451                                         ; sub_403A70+A3E↓j
.text:00404451                 mov     [esp+4Ch+var_1C], edi
.text:00404455                 cmp     byte ptr [edi], 0
.text:00404458                 jz      short loc_404488
.text:0040445A
.text:0040445A loc_40445A:                             ; CODE XREF: sub_403A70+A16↓j
.text:0040445A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040445E                 cmp     [esp+4Ch+var_34], ecx
.text:00404462                 jnb     short loc_404477
.text:00404464                 mov     ebp, [esp+4Ch+var_1C]
.text:00404468                 mov     edi, [esp+4Ch+arg_0]
.text:0040446C                 mov     esi, [esp+4Ch+var_34]
.text:00404470                 movzx   ebx, byte ptr [ebp+0]
.text:00404474                 mov     [esi+edi], bl
.text:00404477
.text:00404477 loc_404477:                             ; CODE XREF: sub_403A70+9F2↑j
.text:00404477                 inc     [esp+4Ch+var_1C]
.text:0040447B                 inc     [esp+4Ch+var_34]
.text:0040447F                 mov     eax, [esp+4Ch+var_1C]
.text:00404483                 cmp     byte ptr [eax], 0
.text:00404486                 jnz     short loc_40445A
.text:00404488
.text:00404488 loc_404488:                             ; CODE XREF: sub_403A70+9E8↑j
.text:00404488                 mov     [esp+4Ch+var_21], 1
.text:0040448D                 mov     [esp+4Ch+var_1C], edx
.text:00404491                 mov     [esp+4Ch+C], edx ; Str
.text:00404494                 call    strlen
.text:00404499                 mov     [esp+4Ch+var_20], eax
.text:0040449D                 jmp     def_403AAD      ; jumptable 00403AAD default case, cases 0,1
.text:004044A2 ; ---------------------------------------------------------------------------
.text:004044A2
.text:004044A2 loc_4044A2:                             ; CODE XREF: sub_403A70+9DF↑j
.text:004044A2                 cmp     [esp+4Ch+arg_10], 6
.text:004044A7                 jnz     short loc_404451
.text:004044A9                 mov     edx, offset asc_403A5C ; "\"'`"
.text:004044AE                 jmp     short loc_404451
.text:004044B0 ; ---------------------------------------------------------------------------
.text:004044B0
.text:004044B0 loc_4044B0:                             ; CODE XREF: sub_403A70+9C9↑j
.text:004044B0                 cmp     [esp+4Ch+arg_10], 6
.text:004044B5                 jnz     short loc_40443B
.text:004044B7                 mov     edi, offset asc_403A5C ; "\"'`"
.text:004044BC                 jmp     loc_40443B
.text:004044BC sub_403A70      endp
.text:004044BC
.text:004044C1 ; ---------------------------------------------------------------------------
.text:004044C1                 jmp     short loc_4044D0
.text:004044C1 ; ---------------------------------------------------------------------------
.text:004044C3                 align 10h
.text:004044D0
.text:004044D0 loc_4044D0:                             ; CODE XREF: .text:004044C1↑j
.text:004044D0                 sub     esp, 0Ch
.text:004044D3                 mov     [esp+4], ebx
.text:004044D7                 mov     [esp+8], esi
.text:004044DB                 call    _errno
.text:004044E0                 mov     esi, [eax]
.text:004044E2                 mov     dword ptr [esp], 24h ; '$'
.text:004044E9                 call    sub_404E90
.text:004044EE                 mov     edx, [esp+10h]
.text:004044F2                 mov     ebx, eax
.text:004044F4                 test    edx, edx
.text:004044F6                 jz      short loc_404541
.text:004044F8
.text:004044F8 loc_4044F8:                             ; CODE XREF: .text:00404546↓j
.text:004044F8                 mov     ecx, [edx]
.text:004044FA                 mov     [ebx], ecx
.text:004044FC                 mov     ecx, [edx+4]
.text:004044FF                 mov     [ebx+4], ecx
.text:00404502                 mov     ecx, [edx+8]
.text:00404505                 mov     [ebx+8], ecx
.text:00404508                 mov     ecx, [edx+0Ch]
.text:0040450B                 mov     [ebx+0Ch], ecx
.text:0040450E                 mov     ecx, [edx+10h]
.text:00404511                 mov     [ebx+10h], ecx
.text:00404514                 mov     ecx, [edx+14h]
.text:00404517                 mov     [ebx+14h], ecx
.text:0040451A                 mov     ecx, [edx+18h]
.text:0040451D                 mov     [ebx+18h], ecx
.text:00404520                 mov     ecx, [edx+1Ch]
.text:00404523                 mov     [ebx+1Ch], ecx
.text:00404526                 mov     ecx, [edx+20h]
.text:00404529                 mov     [ebx+20h], ecx
.text:0040452C                 call    _errno
.text:00404531                 mov     [eax], esi
.text:00404533                 mov     esi, [esp+8]
.text:00404537                 mov     eax, ebx
.text:00404539                 mov     ebx, [esp+4]
.text:0040453D                 add     esp, 0Ch
.text:00404540                 retn
.text:00404541 ; ---------------------------------------------------------------------------
.text:00404541
.text:00404541 loc_404541:                             ; CODE XREF: .text:004044F6↑j
.text:00404541                 mov     edx, offset dword_407180
.text:00404546                 jmp     short loc_4044F8
.text:00404546 ; ---------------------------------------------------------------------------
.text:00404548                 align 10h
.text:00404550                 mov     eax, [esp+4]
.text:00404554                 test    eax, eax
.text:00404556                 jz      short loc_404560
.text:00404558
.text:00404558 loc_404558:                             ; CODE XREF: .text:00404565↓j
.text:00404558                 mov     eax, [eax]
.text:0040455A                 retn
.text:0040455A ; ---------------------------------------------------------------------------
.text:0040455B                 align 10h
.text:00404560
.text:00404560 loc_404560:                             ; CODE XREF: .text:00404556↑j
.text:00404560                 mov     eax, offset dword_407180
.text:00404565                 jmp     short loc_404558
.text:00404565 ; ---------------------------------------------------------------------------
.text:00404567                 align 10h
.text:00404570                 mov     edx, [esp+4]
.text:00404574                 test    edx, edx
.text:00404576                 jz      short loc_404580
.text:00404578
.text:00404578 loc_404578:                             ; CODE XREF: .text:00404585↓j
.text:00404578                 mov     ecx, [esp+8]
.text:0040457C                 mov     [edx], ecx
.text:0040457E                 retn
.text:0040457E ; ---------------------------------------------------------------------------
.text:0040457F                 align 10h
.text:00404580
.text:00404580 loc_404580:                             ; CODE XREF: .text:00404576↑j
.text:00404580                 mov     edx, offset dword_407180
.text:00404585                 jmp     short loc_404578
.text:00404585 ; ---------------------------------------------------------------------------
.text:00404587                 align 10h
.text:00404590                 sub     esp, 8
.text:00404593                 mov     eax, [esp+0Ch]
.text:00404597                 movzx   ecx, byte ptr [esp+10h]
.text:0040459C                 mov     [esp], ebx
.text:0040459F                 mov     ebx, [esp+14h]
.text:004045A3                 mov     [esp+4], esi
.text:004045A7                 mov     dl, cl
.text:004045A9                 shr     dl, 5
.text:004045AC                 movzx   edx, dl
.text:004045AF                 shl     edx, 2
.text:004045B2                 test    eax, eax
.text:004045B4                 lea     esi, [edx+eax+4]
.text:004045B8                 jz      short loc_4045E0
.text:004045BA
.text:004045BA loc_4045BA:                             ; CODE XREF: .text:004045E6↓j
.text:004045BA                 mov     edx, [esi]
.text:004045BC                 and     ecx, 1Fh
.text:004045BF                 and     ebx, 1
.text:004045C2                 mov     eax, edx
.text:004045C4                 shr     eax, cl
.text:004045C6                 and     eax, 1
.text:004045C9                 xor     ebx, eax
.text:004045CB                 shl     ebx, cl
.text:004045CD                 xor     edx, ebx
.text:004045CF                 mov     [esi], edx
.text:004045D1                 mov     ebx, [esp]
.text:004045D4                 mov     esi, [esp+4]
.text:004045D8                 add     esp, 8
.text:004045DB                 retn
.text:004045DB ; ---------------------------------------------------------------------------
.text:004045DC                 align 10h
.text:004045E0
.text:004045E0 loc_4045E0:                             ; CODE XREF: .text:004045B8↑j
.text:004045E0                 lea     esi, dword_407184[edx]
.text:004045E6                 jmp     short loc_4045BA
.text:004045E6 ; ---------------------------------------------------------------------------
.text:004045E8                 align 10h
.text:004045F0                 sub     esp, 2Ch
.text:004045F3                 mov     [esp+24h], ebx
.text:004045F7                 mov     ebx, [esp+40h]
.text:004045FB                 mov     [esp+28h], esi
.text:004045FF                 test    ebx, ebx
.text:00404601                 jz      short loc_404650
.text:00404603
.text:00404603 loc_404603:                             ; CODE XREF: .text:00404655↓j
.text:00404603                 call    _errno
.text:00404608                 mov     esi, [eax]
.text:0040460A                 mov     [esp+14h], ebx
.text:0040460E                 mov     edx, [ebx]
.text:00404610                 mov     ecx, [esp+38h]
.text:00404614                 mov     ebx, [esp+3Ch]
.text:00404618                 mov     [esp+10h], edx
.text:0040461C                 mov     edx, [esp+34h]
.text:00404620                 mov     [esp+0Ch], ebx
.text:00404624                 mov     [esp+8], ecx
.text:00404628                 mov     [esp+4], edx
.text:0040462C                 mov     edx, [esp+30h]
.text:00404630                 mov     [esp], edx
.text:00404633                 call    sub_403A70
.text:00404638                 mov     ebx, eax
.text:0040463A                 call    _errno
.text:0040463F                 mov     [eax], esi
.text:00404641                 mov     esi, [esp+28h]
.text:00404645                 mov     eax, ebx
.text:00404647                 mov     ebx, [esp+24h]
.text:0040464B                 add     esp, 2Ch
.text:0040464E                 retn
.text:0040464E ; ---------------------------------------------------------------------------
.text:0040464F                 align 10h
.text:00404650
.text:00404650 loc_404650:                             ; CODE XREF: .text:00404601↑j
.text:00404650                 mov     ebx, offset dword_407180
.text:00404655                 jmp     short loc_404603
.text:00404655 ; ---------------------------------------------------------------------------
.text:00404657                 align 10h
.text:00404660                 push    ebp
.text:00404661                 push    edi
.text:00404662                 push    esi
.text:00404663                 push    ebx
.text:00404664                 sub     esp, 2Ch
.text:00404667                 mov     ebp, [esp+48h]
.text:0040466B                 call    _errno
.text:00404670                 mov     edx, [eax]
.text:00404672                 test    ebp, ebp
.text:00404674                 mov     ebx, ebp
.text:00404676                 mov     [esp+28h], edx
.text:0040467A                 jz      loc_404730
.text:00404680
.text:00404680 loc_404680:                             ; CODE XREF: .text:00404735↓j
.text:00404680                 call    _errno
.text:00404685                 mov     edi, [eax]
.text:00404687                 mov     esi, ebp
.text:00404689                 mov     [esp+14h], ebx
.text:0040468D                 mov     ecx, [ebx]
.text:0040468F                 mov     dword ptr [esp], 0
.text:00404696                 mov     edx, [esp+44h]
.text:0040469A                 mov     dword ptr [esp+4], 0
.text:004046A2                 mov     eax, [esp+40h]
.text:004046A6                 mov     [esp+10h], ecx
.text:004046AA                 mov     [esp+0Ch], edx
.text:004046AE                 mov     [esp+8], eax
.text:004046B2                 call    sub_403A70
.text:004046B7                 mov     ebx, eax
.text:004046B9                 call    _errno
.text:004046BE                 mov     [eax], edi
.text:004046C0                 lea     edi, [ebx+1]
.text:004046C3                 mov     [esp], edi
.text:004046C6                 call    sub_404E90
.text:004046CB                 mov     [esp+24h], eax
.text:004046CF                 test    ebp, ebp
.text:004046D1                 jz      short loc_404722
.text:004046D3
.text:004046D3 loc_4046D3:                             ; CODE XREF: .text:00404727↓j
.text:004046D3                 call    _errno
.text:004046D8                 mov     ebp, [eax]
.text:004046DA                 mov     [esp+14h], esi
.text:004046DE                 mov     ecx, [esi]
.text:004046E0                 mov     [esp+4], edi
.text:004046E4                 mov     edx, [esp+44h]
.text:004046E8                 mov     esi, [esp+24h]
.text:004046EC                 mov     [esp+10h], ecx
.text:004046F0                 mov     eax, [esp+40h]
.text:004046F4                 mov     [esp+0Ch], edx
.text:004046F8                 mov     [esp], esi
.text:004046FB                 mov     [esp+8], eax
.text:004046FF                 call    sub_403A70
.text:00404704                 call    _errno
.text:00404709                 mov     [eax], ebp
.text:0040470B                 call    _errno
.text:00404710                 mov     ebx, [esp+28h]
.text:00404714                 mov     [eax], ebx
.text:00404716                 mov     eax, [esp+24h]
.text:0040471A                 add     esp, 2Ch
.text:0040471D                 pop     ebx
.text:0040471E                 pop     esi
.text:0040471F                 pop     edi
.text:00404720                 pop     ebp
.text:00404721                 retn
.text:00404722 ; ---------------------------------------------------------------------------
.text:00404722
.text:00404722 loc_404722:                             ; CODE XREF: .text:004046D1↑j
.text:00404722                 mov     esi, offset dword_407180
.text:00404727                 jmp     short loc_4046D3
.text:00404727 ; ---------------------------------------------------------------------------
.text:00404729                 align 10h
.text:00404730
.text:00404730 loc_404730:                             ; CODE XREF: .text:0040467A↑j
.text:00404730                 mov     ebx, offset dword_407180
.text:00404735                 jmp     loc_404680
.text:00404735 ; ---------------------------------------------------------------------------
.text:0040473A                 align 10h
.text:00404740                 sub     esp, 1Ch
.text:00404743                 mov     edx, [esp+24h]
.text:00404747                 mov     dword ptr [esp+0Ch], offset dword_407180
.text:0040474F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404757                 mov     [esp+4], edx
.text:0040475B                 mov     edx, [esp+20h]
.text:0040475F                 mov     [esp], edx
.text:00404762                 call    sub_404BB0
.text:00404767                 add     esp, 1Ch
.text:0040476A                 retn
.text:0040476A ; ---------------------------------------------------------------------------
.text:0040476B                 align 10h
.text:00404770                 sub     esp, 1Ch
.text:00404773                 mov     edx, [esp+20h]
.text:00404777                 mov     dword ptr [esp+0Ch], offset dword_407180
.text:0040477F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404787                 mov     [esp+4], edx
.text:0040478B                 mov     dword ptr [esp], 0
.text:00404792                 call    sub_404BB0
.text:00404797                 add     esp, 1Ch
.text:0040479A                 retn
.text:0040479A ; ---------------------------------------------------------------------------
.text:0040479B                 align 10h
.text:004047A0
.text:004047A0 ; =============== S U B R O U T I N E =======================================
.text:004047A0
.text:004047A0
.text:004047A0 ; int __cdecl sub_4047A0(int, int, char *)
.text:004047A0 sub_4047A0      proc near               ; CODE XREF: .text:00402F1A↑p
.text:004047A0                                         ; sub_402F30+1A↑p
.text:004047A0
.text:004047A0 var_BC          = dword ptr -0BCh
.text:004047A0 var_B8          = dword ptr -0B8h
.text:004047A0 var_B4          = dword ptr -0B4h
.text:004047A0 var_B0          = dword ptr -0B0h
.text:004047A0 var_AC          = dword ptr -0ACh
.text:004047A0 var_A8          = dword ptr -0A8h
.text:004047A0 var_A4          = dword ptr -0A4h
.text:004047A0 var_A0          = dword ptr -0A0h
.text:004047A0 var_9C          = dword ptr -9Ch
.text:004047A0 var_98          = dword ptr -98h
.text:004047A0 var_94          = dword ptr -94h
.text:004047A0 var_90          = dword ptr -90h
.text:004047A0 var_8C          = dword ptr -8Ch
.text:004047A0 var_7C          = dword ptr -7Ch
.text:004047A0 var_78          = dword ptr -78h
.text:004047A0 var_74          = dword ptr -74h
.text:004047A0 var_70          = dword ptr -70h
.text:004047A0 var_6C          = dword ptr -6Ch
.text:004047A0 var_68          = dword ptr -68h
.text:004047A0 var_64          = dword ptr -64h
.text:004047A0 var_60          = dword ptr -60h
.text:004047A0 var_5C          = dword ptr -5Ch
.text:004047A0 var_4C          = dword ptr -4Ch
.text:004047A0 var_48          = dword ptr -48h
.text:004047A0 var_44          = dword ptr -44h
.text:004047A0 var_40          = dword ptr -40h
.text:004047A0 var_3C          = dword ptr -3Ch
.text:004047A0 var_38          = dword ptr -38h
.text:004047A0 var_34          = dword ptr -34h
.text:004047A0 var_30          = dword ptr -30h
.text:004047A0 var_2C          = dword ptr -2Ch
.text:004047A0 arg_0           = dword ptr  4
.text:004047A0 arg_4           = dword ptr  8
.text:004047A0 arg_8           = dword ptr  0Ch
.text:004047A0
.text:004047A0                 push    ebp
.text:004047A1                 xor     eax, eax
.text:004047A3                 mov     ecx, 8
.text:004047A8                 push    edi
.text:004047A9                 push    esi
.text:004047AA                 push    ebx
.text:004047AB                 sub     esp, 0ACh
.text:004047B1                 mov     ebp, [esp+0BCh+arg_4]
.text:004047B8                 cld
.text:004047B9                 lea     edi, [esp+0BCh+var_A8]
.text:004047BD                 mov     [esp+0BCh+var_AC], ebp
.text:004047C1                 rep stosd
.text:004047C3                 mov     eax, [esp+0BCh+var_8C]
.text:004047C7                 mov     edi, [esp+0BCh+var_AC]
.text:004047CB                 mov     esi, [esp+0BCh+var_A8]
.text:004047CF                 mov     [esp+0BCh+var_5C], eax
.text:004047D3                 mov     ebp, [esp+0BCh+var_A4]
.text:004047D7                 mov     eax, [esp+0BCh+var_AC]
.text:004047DB                 mov     [esp+0BCh+var_7C], edi
.text:004047DF                 mov     ecx, [esp+0BCh+var_94]
.text:004047E3                 mov     edi, [esp+0BCh+var_A0]
.text:004047E7                 mov     [esp+0BCh+var_78], esi
.text:004047EB                 mov     edx, [esp+0BCh+var_90]
.text:004047EF                 mov     esi, [esp+0BCh+var_9C]
.text:004047F3                 mov     [esp+0BCh+var_4C], eax
.text:004047F7                 mov     ebx, [esp+0BCh+var_98]
.text:004047FB                 mov     eax, [esp+0BCh+var_A8]
.text:004047FF                 mov     [esp+0BCh+var_74], ebp
.text:00404803                 mov     [esp+0BCh+var_70], edi
.text:00404807                 mov     [esp+0BCh+var_6C], esi
.text:0040480B                 mov     [esp+0BCh+var_68], ebx
.text:0040480F                 mov     [esp+0BCh+var_64], ecx
.text:00404813                 mov     [esp+0BCh+var_60], edx
.text:00404817                 mov     [esp+0BCh+var_48], eax
.text:0040481B                 mov     [esp+0BCh+var_44], ebp
.text:0040481F                 mov     [esp+0BCh+var_40], edi
.text:00404823                 mov     [esp+0BCh+var_3C], esi
.text:0040482A                 mov     [esp+0BCh+var_38], ebx
.text:00404831                 mov     ebx, [esp+0BCh+var_8C]
.text:00404835                 mov     [esp+0BCh+var_30], edx
.text:0040483C                 mov     edx, [esp+0BCh+arg_8]
.text:00404843                 mov     [esp+0BCh+var_34], ecx
.text:0040484A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040484E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00404852                 mov     edx, [esp+0BCh+arg_0]
.text:00404859                 mov     [esp+0BCh+var_2C], ebx
.text:00404860                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00404864                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040486C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040486F                 call    sub_404BB0
.text:00404874                 add     esp, 0ACh
.text:0040487A                 pop     ebx
.text:0040487B                 pop     esi
.text:0040487C                 pop     edi
.text:0040487D                 pop     ebp
.text:0040487E                 retn
.text:0040487E sub_4047A0      endp
.text:0040487E
.text:0040487E ; ---------------------------------------------------------------------------
.text:0040487F                 align 10h
.text:00404880
.text:00404880 ; =============== S U B R O U T I N E =======================================
.text:00404880
.text:00404880
.text:00404880 ; int __cdecl sub_404880(int, int, char *, int)
.text:00404880 sub_404880      proc near               ; CODE XREF: sub_4037C0+BD↑p
.text:00404880                                         ; sub_4037C0+E3↑p
.text:00404880
.text:00404880 var_BC          = dword ptr -0BCh
.text:00404880 var_B8          = dword ptr -0B8h
.text:00404880 var_B4          = dword ptr -0B4h
.text:00404880 var_B0          = dword ptr -0B0h
.text:00404880 var_AC          = dword ptr -0ACh
.text:00404880 var_A8          = dword ptr -0A8h
.text:00404880 var_A4          = dword ptr -0A4h
.text:00404880 var_A0          = dword ptr -0A0h
.text:00404880 var_9C          = dword ptr -9Ch
.text:00404880 var_98          = dword ptr -98h
.text:00404880 var_94          = dword ptr -94h
.text:00404880 var_90          = dword ptr -90h
.text:00404880 var_8C          = dword ptr -8Ch
.text:00404880 var_7C          = dword ptr -7Ch
.text:00404880 var_78          = dword ptr -78h
.text:00404880 var_74          = dword ptr -74h
.text:00404880 var_70          = dword ptr -70h
.text:00404880 var_6C          = dword ptr -6Ch
.text:00404880 var_68          = dword ptr -68h
.text:00404880 var_64          = dword ptr -64h
.text:00404880 var_60          = dword ptr -60h
.text:00404880 var_5C          = dword ptr -5Ch
.text:00404880 var_4C          = dword ptr -4Ch
.text:00404880 var_48          = dword ptr -48h
.text:00404880 var_44          = dword ptr -44h
.text:00404880 var_40          = dword ptr -40h
.text:00404880 var_3C          = dword ptr -3Ch
.text:00404880 var_38          = dword ptr -38h
.text:00404880 var_34          = dword ptr -34h
.text:00404880 var_30          = dword ptr -30h
.text:00404880 var_2C          = dword ptr -2Ch
.text:00404880 arg_0           = dword ptr  4
.text:00404880 arg_4           = dword ptr  8
.text:00404880 arg_8           = dword ptr  0Ch
.text:00404880 arg_C           = dword ptr  10h
.text:00404880
.text:00404880                 push    ebp
.text:00404881                 xor     eax, eax
.text:00404883                 mov     ecx, 8
.text:00404888                 push    edi
.text:00404889                 push    esi
.text:0040488A                 push    ebx
.text:0040488B                 sub     esp, 0ACh
.text:00404891                 mov     edx, [esp+0BCh+arg_4]
.text:00404898                 cld
.text:00404899                 lea     edi, [esp+0BCh+var_A8]
.text:0040489D                 mov     [esp+0BCh+var_AC], edx
.text:004048A1                 rep stosd
.text:004048A3                 mov     eax, [esp+0BCh+var_8C]
.text:004048A7                 mov     ebp, [esp+0BCh+var_AC]
.text:004048AB                 mov     edi, [esp+0BCh+var_A8]
.text:004048AF                 mov     [esp+0BCh+var_5C], eax
.text:004048B3                 mov     esi, [esp+0BCh+var_9C]
.text:004048B7                 mov     eax, [esp+0BCh+var_AC]
.text:004048BB                 mov     [esp+0BCh+var_7C], ebp
.text:004048BF                 mov     ecx, [esp+0BCh+var_94]
.text:004048C3                 mov     ebp, [esp+0BCh+var_A4]
.text:004048C7                 mov     [esp+0BCh+var_78], edi
.text:004048CB                 mov     edx, [esp+0BCh+var_90]
.text:004048CF                 mov     edi, [esp+0BCh+var_A0]
.text:004048D3                 mov     [esp+0BCh+var_4C], eax
.text:004048D7                 mov     ebx, [esp+0BCh+var_98]
.text:004048DB                 mov     eax, [esp+0BCh+var_A8]
.text:004048DF                 mov     [esp+0BCh+var_74], ebp
.text:004048E3                 mov     [esp+0BCh+var_70], edi
.text:004048E7                 mov     [esp+0BCh+var_6C], esi
.text:004048EB                 mov     [esp+0BCh+var_68], ebx
.text:004048EF                 mov     [esp+0BCh+var_64], ecx
.text:004048F3                 mov     [esp+0BCh+var_60], edx
.text:004048F7                 mov     [esp+0BCh+var_48], eax
.text:004048FB                 mov     [esp+0BCh+var_44], ebp
.text:004048FF                 mov     [esp+0BCh+var_40], edi
.text:00404903                 mov     [esp+0BCh+var_3C], esi
.text:0040490A                 mov     [esp+0BCh+var_38], ebx
.text:00404911                 mov     esi, [esp+0BCh+var_8C]
.text:00404915                 lea     ebx, [esp+0BCh+var_4C]
.text:00404919                 mov     [esp+0BCh+var_30], edx
.text:00404920                 mov     edx, [esp+0BCh+arg_8]
.text:00404927                 mov     [esp+0BCh+var_34], ecx
.text:0040492E                 mov     ecx, [esp+0BCh+arg_C]
.text:00404935                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00404939                 mov     edx, [esp+0BCh+arg_0]
.text:00404940                 mov     [esp+0BCh+var_2C], esi
.text:00404947                 mov     [esp+0BCh+var_B0], ebx ; int
.text:0040494B                 mov     [esp+0BCh+var_B4], ecx ; int
.text:0040494F                 mov     [esp+0BCh+var_BC], edx ; int
.text:00404952                 call    sub_404BB0
.text:00404957                 add     esp, 0ACh
.text:0040495D                 pop     ebx
.text:0040495E                 pop     esi
.text:0040495F                 pop     edi
.text:00404960                 pop     ebp
.text:00404961                 retn
.text:00404961 sub_404880      endp
.text:00404961
.text:00404961 ; ---------------------------------------------------------------------------
.text:00404962                 align 10h
.text:00404970                 push    ebp
.text:00404971                 xor     eax, eax
.text:00404973                 mov     ecx, 8
.text:00404978                 push    edi
.text:00404979                 push    esi
.text:0040497A                 push    ebx
.text:0040497B                 sub     esp, 0ACh
.text:00404981                 mov     edi, [esp+0C0h]
.text:00404988                 cld
.text:00404989                 mov     [esp+10h], edi
.text:0040498D                 lea     edi, [esp+14h]
.text:00404991                 rep stosd
.text:00404993                 mov     eax, [esp+30h]
.text:00404997                 mov     esi, [esp+10h]
.text:0040499B                 mov     ebx, [esp+14h]
.text:0040499F                 mov     [esp+60h], eax
.text:004049A3                 mov     ebp, [esp+18h]
.text:004049A7                 mov     eax, [esp+10h]
.text:004049AB                 mov     [esp+40h], esi
.text:004049AF                 mov     edi, [esp+1Ch]
.text:004049B3                 mov     esi, [esp+20h]
.text:004049B7                 mov     [esp+44h], ebx
.text:004049BB                 mov     ecx, [esp+28h]
.text:004049BF                 mov     edx, [esp+2Ch]
.text:004049C3                 mov     [esp+70h], eax
.text:004049C7                 mov     ebx, [esp+24h]
.text:004049CB                 mov     eax, [esp+14h]
.text:004049CF                 mov     [esp+48h], ebp
.text:004049D3                 mov     [esp+4Ch], edi
.text:004049D7                 mov     [esp+50h], esi
.text:004049DB                 mov     [esp+54h], ebx
.text:004049DF                 mov     [esp+58h], ecx
.text:004049E3                 mov     [esp+5Ch], edx
.text:004049E7                 mov     [esp+74h], eax
.text:004049EB                 mov     [esp+78h], ebp
.text:004049EF                 mov     [esp+7Ch], edi
.text:004049F3                 mov     [esp+80h], esi
.text:004049FA                 mov     [esp+84h], ebx
.text:00404A01                 mov     [esp+8Ch], edx
.text:00404A08                 lea     edx, [esp+70h]
.text:00404A0C                 mov     [esp+88h], ecx
.text:00404A13                 mov     ecx, [esp+30h]
.text:00404A17                 mov     [esp+0Ch], edx
.text:00404A1B                 mov     edx, [esp+0C4h]
.text:00404A22                 mov     [esp+90h], ecx
.text:00404A29                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404A31                 mov     [esp+4], edx
.text:00404A35                 mov     dword ptr [esp], 0
.text:00404A3C                 call    sub_404BB0
.text:00404A41                 add     esp, 0ACh
.text:00404A47                 pop     ebx
.text:00404A48                 pop     esi
.text:00404A49                 pop     edi
.text:00404A4A                 pop     ebp
.text:00404A4B                 retn
.text:00404A4B ; ---------------------------------------------------------------------------
.text:00404A4C                 align 10h
.text:00404A50                 push    edi
.text:00404A51                 push    esi
.text:00404A52                 push    ebx
.text:00404A53                 sub     esp, 40h
.text:00404A56                 mov     edx, ds:dword_40718C
.text:00404A5C                 mov     ebx, ds:dword_407180
.text:00404A62                 mov     esi, ds:dword_407188
.text:00404A68                 mov     edi, ds:dword_407184
.text:00404A6E                 mov     [esp+1Ch], edx
.text:00404A72                 mov     ecx, ds:dword_407190
.text:00404A78                 mov     edx, ds:dword_4071A0
.text:00404A7E                 mov     [esp+10h], ebx
.text:00404A82                 mov     ebx, ds:dword_407194
.text:00404A88                 mov     [esp+30h], edx
.text:00404A8C                 movzx   edx, byte ptr [esp+54h]
.text:00404A91                 mov     [esp+18h], esi
.text:00404A95                 mov     esi, ds:dword_40719C
.text:00404A9B                 mov     [esp+14h], edi
.text:00404A9F                 mov     edi, ds:dword_407198
.text:00404AA5                 mov     [esp+20h], ecx
.text:00404AA9                 mov     cl, dl
.text:00404AAB                 shr     cl, 5
.text:00404AAE                 mov     [esp+24h], ebx
.text:00404AB2                 movzx   ebx, cl
.text:00404AB5                 mov     [esp+2Ch], esi
.text:00404AB9                 lea     esi, [esp+10h]
.text:00404ABD                 mov     [esp+28h], edi
.text:00404AC1                 lea     edi, [esi+ebx*4]
.text:00404AC4                 mov     ebx, edx
.text:00404AC6                 mov     edx, [edi+4]
.text:00404AC9                 and     ebx, 1Fh
.text:00404ACC                 mov     cl, bl
.text:00404ACE                 mov     eax, edx
.text:00404AD0                 shr     eax, cl
.text:00404AD2                 and     eax, 1
.text:00404AD5                 xor     eax, 1
.text:00404AD8                 shl     eax, cl
.text:00404ADA                 xor     edx, eax
.text:00404ADC                 mov     [edi+4], edx
.text:00404ADF                 mov     edx, [esp+50h]
.text:00404AE3                 mov     [esp+0Ch], esi
.text:00404AE7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404AEF                 mov     [esp+4], edx
.text:00404AF3                 mov     dword ptr [esp], 0
.text:00404AFA                 call    sub_404BB0
.text:00404AFF                 add     esp, 40h
.text:00404B02                 pop     ebx
.text:00404B03                 pop     esi
.text:00404B04                 pop     edi
.text:00404B05                 retn
.text:00404B05 ; ---------------------------------------------------------------------------
.text:00404B06                 align 10h
.text:00404B10
.text:00404B10 ; =============== S U B R O U T I N E =======================================
.text:00404B10
.text:00404B10
.text:00404B10 ; int __cdecl sub_404B10(char *)
.text:00404B10 sub_404B10      proc near               ; CODE XREF: sub_4035D0+64↑p
.text:00404B10
.text:00404B10 var_4C          = dword ptr -4Ch
.text:00404B10 var_48          = dword ptr -48h
.text:00404B10 var_44          = dword ptr -44h
.text:00404B10 var_40          = dword ptr -40h
.text:00404B10 var_3C          = dword ptr -3Ch
.text:00404B10 var_38          = dword ptr -38h
.text:00404B10 var_34          = dword ptr -34h
.text:00404B10 var_30          = dword ptr -30h
.text:00404B10 var_2C          = dword ptr -2Ch
.text:00404B10 var_28          = dword ptr -28h
.text:00404B10 var_24          = dword ptr -24h
.text:00404B10 var_20          = dword ptr -20h
.text:00404B10 var_1C          = dword ptr -1Ch
.text:00404B10 arg_0           = dword ptr  4
.text:00404B10
.text:00404B10                 sub     esp, 4Ch
.text:00404B13                 mov     ecx, ds:dword_407180
.text:00404B19                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404B21                 mov     edx, ds:dword_407184
.text:00404B27                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00404B2E                 mov     [esp+4Ch+var_3C], ecx
.text:00404B32                 mov     ecx, ds:dword_40718C
.text:00404B38                 mov     [esp+4Ch+var_38], edx
.text:00404B3C                 mov     edx, ds:dword_407188
.text:00404B42                 mov     [esp+4Ch+var_30], ecx
.text:00404B46                 mov     ecx, ds:dword_407190
.text:00404B4C                 mov     eax, edx
.text:00404B4E                 shr     eax, 1Ah
.text:00404B51                 and     eax, 1
.text:00404B54                 xor     eax, 1
.text:00404B57                 mov     [esp+4Ch+var_2C], ecx
.text:00404B5B                 shl     eax, 1Ah
.text:00404B5E                 mov     ecx, ds:dword_407194
.text:00404B64                 xor     edx, eax
.text:00404B66                 mov     [esp+4Ch+var_34], edx
.text:00404B6A                 mov     edx, [esp+4Ch+arg_0]
.text:00404B6E                 mov     [esp+4Ch+var_28], ecx
.text:00404B72                 mov     ecx, ds:dword_407198
.text:00404B78                 mov     [esp+4Ch+var_48], edx ; char *
.text:00404B7C                 mov     [esp+4Ch+var_24], ecx
.text:00404B80                 mov     ecx, ds:dword_40719C
.text:00404B86                 mov     [esp+4Ch+var_20], ecx
.text:00404B8A                 mov     ecx, ds:dword_4071A0
.text:00404B90                 mov     [esp+4Ch+var_1C], ecx
.text:00404B94                 lea     ecx, [esp+4Ch+var_3C]
.text:00404B98                 mov     [esp+4Ch+var_40], ecx ; int
.text:00404B9C                 call    sub_404BB0
.text:00404BA1                 add     esp, 4Ch
.text:00404BA4                 retn
.text:00404BA4 sub_404B10      endp
.text:00404BA4
.text:00404BA4 ; ---------------------------------------------------------------------------
.text:00404BA5                 align 10h
.text:00404BB0
.text:00404BB0 ; =============== S U B R O U T I N E =======================================
.text:00404BB0
.text:00404BB0
.text:00404BB0 ; int __cdecl sub_404BB0(int, char *, int, int)
.text:00404BB0 sub_404BB0      proc near               ; CODE XREF: .text:00404762↑p
.text:00404BB0                                         ; .text:00404792↑p ...
.text:00404BB0
.text:00404BB0 Block           = dword ptr -2Ch
.text:00404BB0 var_28          = dword ptr -28h
.text:00404BB0 Str             = dword ptr -24h
.text:00404BB0 var_20          = dword ptr -20h
.text:00404BB0 var_1C          = dword ptr -1Ch
.text:00404BB0 var_18          = dword ptr -18h
.text:00404BB0 var_14          = dword ptr -14h
.text:00404BB0 arg_0           = dword ptr  4
.text:00404BB0 arg_4           = dword ptr  8
.text:00404BB0 arg_8           = dword ptr  0Ch
.text:00404BB0 arg_C           = dword ptr  10h
.text:00404BB0
.text:00404BB0                 push    ebp
.text:00404BB1                 push    edi
.text:00404BB2                 push    esi
.text:00404BB3                 push    ebx
.text:00404BB4                 sub     esp, 1Ch
.text:00404BB7                 call    _errno
.text:00404BBC                 mov     edx, [eax]
.text:00404BBE                 mov     eax, [esp+2Ch+arg_0]
.text:00404BC2                 mov     [esp+2Ch+var_14], edx
.text:00404BC6                 test    eax, eax
.text:00404BC8                 js      loc_404D6A
.text:00404BCE                 mov     eax, [esp+2Ch+arg_0]
.text:00404BD2                 cmp     dword_406030, eax
.text:00404BD8                 ja      short loc_404C50
.text:00404BDA                 mov     esi, eax
.text:00404BDC                 inc     esi
.text:00404BDD                 cmp     esi, 1FFFFFFFh
.text:00404BE3                 ja      loc_404D6F
.text:00404BE9                 mov     ebx, off_40603C
.text:00404BEF                 cmp     ebx, offset dword_406034
.text:00404BF5                 jz      loc_404D41
.text:00404BFB
.text:00404BFB loc_404BFB:                             ; CODE XREF: sub_404BB0+1B5↓j
.text:00404BFB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00404BFE                 lea     ecx, ds:0[esi*8]
.text:00404C05                 mov     ebp, esi
.text:00404C07                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00404C0B                 call    sub_404F20
.text:00404C10                 mov     off_40603C, eax
.text:00404C15                 mov     ebx, dword_406030
.text:00404C1B                 sub     ebp, ebx
.text:00404C1D                 lea     edi, [eax+ebx*8]
.text:00404C20                 lea     eax, ds:0[ebp*8]
.text:00404C27                 cmp     eax, 7
.text:00404C2A                 jbe     short loc_404C40
.text:00404C2C                 test    edi, 4
.text:00404C32                 jz      short loc_404C40
.text:00404C34                 mov     dword ptr [edi], 0
.text:00404C3A                 sub     eax, 4
.text:00404C3D                 add     edi, 4
.text:00404C40
.text:00404C40 loc_404C40:                             ; CODE XREF: sub_404BB0+7A↑j
.text:00404C40                                         ; sub_404BB0+82↑j
.text:00404C40                 cld
.text:00404C41                 mov     ecx, eax
.text:00404C43                 shr     ecx, 2
.text:00404C46                 xor     eax, eax
.text:00404C48                 rep stosd
.text:00404C4A                 mov     dword_406030, esi
.text:00404C50
.text:00404C50 loc_404C50:                             ; CODE XREF: sub_404BB0+28↑j
.text:00404C50                 mov     esi, off_40603C
.text:00404C56                 mov     eax, [esp+2Ch+arg_0]
.text:00404C5A                 mov     ebp, [esi+eax*8]
.text:00404C5D                 mov     edi, [esi+eax*8+4]
.text:00404C61                 mov     esi, [esp+2Ch+arg_C]
.text:00404C65                 test    esi, esi
.text:00404C67                 jz      loc_404D37
.text:00404C6D
.text:00404C6D loc_404C6D:                             ; CODE XREF: sub_404BB0+18C↓j
.text:00404C6D                 call    _errno
.text:00404C72                 mov     ebx, [eax]
.text:00404C74                 mov     [esp+2Ch+var_18], esi ; int
.text:00404C78                 mov     ecx, [esi]
.text:00404C7A                 mov     [esp+2Ch+Block], edi ; int
.text:00404C7D                 mov     edx, [esp+2Ch+arg_8]
.text:00404C81                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404C85                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404C89                 mov     ecx, [esp+2Ch+arg_4]
.text:00404C8D                 mov     [esp+2Ch+var_20], edx ; int
.text:00404C91                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404C95                 call    sub_403A70
.text:00404C9A                 mov     esi, eax
.text:00404C9C                 call    _errno
.text:00404CA1                 mov     [eax], ebx
.text:00404CA3                 cmp     ebp, esi
.text:00404CA5                 ja      short loc_404D1B
.text:00404CA7                 lea     ebp, [esi+1]
.text:00404CAA                 mov     ebx, off_40603C
.text:00404CB0                 cmp     edi, offset unk_407080
.text:00404CB6                 mov     esi, [esp+2Ch+arg_0]
.text:00404CBA                 mov     [ebx+esi*8], ebp
.text:00404CBD                 jz      short loc_404CCD
.text:00404CBF                 mov     [esp+2Ch+Block], edi ; Block
.text:00404CC2                 call    free
.text:00404CC7                 mov     ebx, off_40603C
.text:00404CCD
.text:00404CCD loc_404CCD:                             ; CODE XREF: sub_404BB0+10D↑j
.text:00404CCD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404CD0                 call    sub_404E90
.text:00404CD5                 mov     esi, [esp+2Ch+arg_C]
.text:00404CD9                 mov     edi, eax
.text:00404CDB                 mov     eax, [esp+2Ch+arg_0]
.text:00404CDF                 test    esi, esi
.text:00404CE1                 mov     [ebx+eax*8+4], edi
.text:00404CE5                 jz      short loc_404D30
.text:00404CE7
.text:00404CE7 loc_404CE7:                             ; CODE XREF: sub_404BB0+185↓j
.text:00404CE7                 call    _errno
.text:00404CEC                 mov     ebx, [eax]
.text:00404CEE                 mov     [esp+2Ch+var_18], esi ; int
.text:00404CF2                 mov     ecx, [esi]
.text:00404CF4                 mov     [esp+2Ch+Block], edi ; int
.text:00404CF7                 mov     edx, [esp+2Ch+arg_8]
.text:00404CFB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404CFF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404D03                 mov     ecx, [esp+2Ch+arg_4]
.text:00404D07                 mov     [esp+2Ch+var_20], edx ; int
.text:00404D0B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404D0F                 call    sub_403A70
.text:00404D14                 call    _errno
.text:00404D19                 mov     [eax], ebx
.text:00404D1B
.text:00404D1B loc_404D1B:                             ; CODE XREF: sub_404BB0+F5↑j
.text:00404D1B                 call    _errno
.text:00404D20                 mov     ebp, [esp+2Ch+var_14]
.text:00404D24                 mov     [eax], ebp
.text:00404D26                 add     esp, 1Ch
.text:00404D29                 mov     eax, edi
.text:00404D2B                 pop     ebx
.text:00404D2C                 pop     esi
.text:00404D2D                 pop     edi
.text:00404D2E                 pop     ebp
.text:00404D2F                 retn
.text:00404D30 ; ---------------------------------------------------------------------------
.text:00404D30
.text:00404D30 loc_404D30:                             ; CODE XREF: sub_404BB0+135↑j
.text:00404D30                 mov     esi, offset dword_407180
.text:00404D35                 jmp     short loc_404CE7
.text:00404D37 ; ---------------------------------------------------------------------------
.text:00404D37
.text:00404D37 loc_404D37:                             ; CODE XREF: sub_404BB0+B7↑j
.text:00404D37                 mov     esi, offset dword_407180
.text:00404D3C                 jmp     loc_404C6D
.text:00404D41 ; ---------------------------------------------------------------------------
.text:00404D41
.text:00404D41 loc_404D41:                             ; CODE XREF: sub_404BB0+45↑j
.text:00404D41                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404D48                 call    sub_404E90
.text:00404D4D                 mov     off_40603C, eax
.text:00404D52                 mov     edi, dword_406034
.text:00404D58                 mov     ebx, eax
.text:00404D5A                 mov     ecx, off_406038
.text:00404D60                 mov     [eax], edi
.text:00404D62                 mov     [eax+4], ecx
.text:00404D65                 jmp     loc_404BFB
.text:00404D6A ; ---------------------------------------------------------------------------
.text:00404D6A
.text:00404D6A loc_404D6A:                             ; CODE XREF: sub_404BB0+18↑j
.text:00404D6A                 call    abort
.text:00404D6F ; ---------------------------------------------------------------------------
.text:00404D6F
.text:00404D6F loc_404D6F:                             ; CODE XREF: sub_404BB0+33↑j
.text:00404D6F                 call    sub_405140
.text:00404D6F sub_404BB0      endp
.text:00404D6F
.text:00404D6F ; ---------------------------------------------------------------------------
.text:00404D74                 align 10h
.text:00404D80
.text:00404D80 ; =============== S U B R O U T I N E =======================================
.text:00404D80
.text:00404D80
.text:00404D80 ; int __cdecl sub_404D80(char *Str, int, int, int)
.text:00404D80 sub_404D80      proc near               ; CODE XREF: sub_4037C0+32↑p
.text:00404D80
.text:00404D80 String1         = dword ptr -2Ch
.text:00404D80 String2         = dword ptr -28h
.text:00404D80 var_16          = byte ptr -16h
.text:00404D80 var_15          = byte ptr -15h
.text:00404D80 var_14          = dword ptr -14h
.text:00404D80 Str             = dword ptr  4
.text:00404D80 arg_4           = dword ptr  8
.text:00404D80 arg_8           = dword ptr  0Ch
.text:00404D80 arg_C           = dword ptr  10h
.text:00404D80
.text:00404D80                 push    ebp
.text:00404D81                 push    edi
.text:00404D82                 push    esi
.text:00404D83                 push    ebx
.text:00404D84                 sub     esp, 1Ch
.text:00404D87                 mov     ecx, [esp+2Ch+arg_4]
.text:00404D8B                 mov     edi, [esp+2Ch+Str]
.text:00404D8F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404D93                 mov     esi, [esp+2Ch+arg_8]
.text:00404D97                 movzx   edx, byte ptr [ecx+edi]
.text:00404D9B                 mov     [esp+2Ch+var_15], dl
.text:00404D9F                 mov     edx, [esp+2Ch+arg_4]
.text:00404DA3                 movzx   eax, byte ptr [ebp+esi+0]
.text:00404DA8                 mov     [esp+2Ch+var_16], al
.text:00404DAC                 mov     byte ptr [edx+edi], 0
.text:00404DB0                 inc     edx
.text:00404DB1                 mov     [esp+2Ch+arg_4], edx
.text:00404DB5                 mov     byte ptr [ebp+esi+0], 0
.text:00404DBA                 inc     ebp
.text:00404DBB                 nop
.text:00404DBC                 lea     esi, [esi+0]
.text:00404DC0
.text:00404DC0 loc_404DC0:                             ; CODE XREF: sub_404D80+94↓j
.text:00404DC0                 call    _errno
.text:00404DC5                 mov     dword ptr [eax], 0
.text:00404DCB                 mov     [esp+2Ch+String2], esi ; String2
.text:00404DCF                 mov     [esp+2Ch+String1], edi ; String1
.text:00404DD2                 call    strcoll
.text:00404DD7                 mov     [esp+2Ch+var_14], eax
.text:00404DDB                 test    eax, eax
.text:00404DDD                 jnz     short loc_404E16
.text:00404DDF                 call    _errno
.text:00404DE4                 mov     ebx, [eax]
.text:00404DE6                 test    ebx, ebx
.text:00404DE8                 jnz     short loc_404E16
.text:00404DEA                 mov     [esp+2Ch+String1], edi ; Str
.text:00404DED                 call    strlen
.text:00404DF2                 mov     [esp+2Ch+String1], esi ; Str
.text:00404DF5                 lea     ebx, [eax+1]
.text:00404DF8                 add     edi, ebx
.text:00404DFA                 call    strlen
.text:00404DFF                 inc     eax
.text:00404E00                 add     esi, eax
.text:00404E02                 sub     ebp, eax
.text:00404E04                 sub     [esp+2Ch+arg_4], ebx
.text:00404E08                 jz      short loc_404E38
.text:00404E0A                 mov     [esp+2Ch+var_14], 1
.text:00404E12                 test    ebp, ebp
.text:00404E14                 jnz     short loc_404DC0
.text:00404E16
.text:00404E16 loc_404E16:                             ; CODE XREF: sub_404D80+5D↑j
.text:00404E16                                         ; sub_404D80+68↑j ...
.text:00404E16                 movzx   ebx, [esp+2Ch+var_15]
.text:00404E1B                 mov     ecx, [esp+2Ch+arg_4]
.text:00404E1F                 mov     [ecx+edi-1], bl
.text:00404E23                 movzx   eax, [esp+2Ch+var_16]
.text:00404E28                 mov     [ebp+esi-1], al
.text:00404E2C                 mov     eax, [esp+2Ch+var_14]
.text:00404E30                 add     esp, 1Ch
.text:00404E33                 pop     ebx
.text:00404E34                 pop     esi
.text:00404E35                 pop     edi
.text:00404E36                 pop     ebp
.text:00404E37                 retn
.text:00404E38 ; ---------------------------------------------------------------------------
.text:00404E38
.text:00404E38 loc_404E38:                             ; CODE XREF: sub_404D80+88↑j
.text:00404E38                 test    ebp, ebp
.text:00404E3A                 jz      short loc_404E16
.text:00404E3C                 mov     [esp+2Ch+var_14], 0FFFFFFFFh
.text:00404E44                 jmp     short loc_404E16
.text:00404E44 sub_404D80      endp
.text:00404E44
.text:00404E44 ; ---------------------------------------------------------------------------
.text:00404E46                 align 10h
.text:00404E50                 sub     esp, 0Ch
.text:00404E53                 xor     edx, edx
.text:00404E55                 mov     ecx, [esp+14h]
.text:00404E59                 mov     [esp+8], ebx
.text:00404E5D                 mov     eax, 0FFFFFFFFh
.text:00404E62                 mov     ebx, [esp+10h]
.text:00404E66                 div     ecx
.text:00404E68                 cmp     eax, ebx
.text:00404E6A                 jb      short loc_404E89
.text:00404E6C                 mov     edx, ebx
.text:00404E6E                 imul    edx, ecx
.text:00404E71                 mov     [esp], edx
.text:00404E74                 call    malloc
.text:00404E79                 test    eax, eax
.text:00404E7B                 jz      short loc_404E85
.text:00404E7D
.text:00404E7D loc_404E7D:                             ; CODE XREF: .text:00404E87↓j
.text:00404E7D                 mov     ebx, [esp+8]
.text:00404E81                 add     esp, 0Ch
.text:00404E84                 retn
.text:00404E85 ; ---------------------------------------------------------------------------
.text:00404E85
.text:00404E85 loc_404E85:                             ; CODE XREF: .text:00404E7B↑j
.text:00404E85                 test    ebx, ebx
.text:00404E87                 jz      short loc_404E7D
.text:00404E89
.text:00404E89 loc_404E89:                             ; CODE XREF: .text:00404E6A↑j
.text:00404E89                 call    sub_405140
.text:00404E89 ; ---------------------------------------------------------------------------
.text:00404E8E                 align 10h
.text:00404E90
.text:00404E90 ; =============== S U B R O U T I N E =======================================
.text:00404E90
.text:00404E90
.text:00404E90 ; int __cdecl sub_404E90(size_t)
.text:00404E90 sub_404E90      proc near               ; CODE XREF: .text:004044E9↑p
.text:00404E90                                         ; .text:004046C6↑p ...
.text:00404E90
.text:00404E90 Size            = dword ptr -0Ch
.text:00404E90 var_4           = dword ptr -4
.text:00404E90 arg_0           = dword ptr  4
.text:00404E90
.text:00404E90                 sub     esp, 0Ch
.text:00404E93                 mov     [esp+0Ch+var_4], ebx
.text:00404E97                 mov     ebx, [esp+0Ch+arg_0]
.text:00404E9B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404E9E                 call    malloc
.text:00404EA3                 test    eax, eax
.text:00404EA5                 jz      short loc_404EB0
.text:00404EA7
.text:00404EA7 loc_404EA7:                             ; CODE XREF: sub_404E90+22↓j
.text:00404EA7                 mov     ebx, [esp+0Ch+var_4]
.text:00404EAB                 add     esp, 0Ch
.text:00404EAE                 retn
.text:00404EAE ; ---------------------------------------------------------------------------
.text:00404EAF                 align 10h
.text:00404EB0
.text:00404EB0 loc_404EB0:                             ; CODE XREF: sub_404E90+15↑j
.text:00404EB0                 test    ebx, ebx
.text:00404EB2                 jz      short loc_404EA7
.text:00404EB4                 call    sub_405140
.text:00404EB4 sub_404E90      endp
.text:00404EB4
.text:00404EB4 ; ---------------------------------------------------------------------------
.text:00404EB9                 align 10h
.text:00404EC0                 sub     esp, 1Ch
.text:00404EC3                 xor     edx, edx
.text:00404EC5                 mov     eax, 0FFFFFFFFh
.text:00404ECA                 mov     [esp+14h], ebx
.text:00404ECE                 mov     ecx, [esp+20h]
.text:00404ED2                 mov     ebx, [esp+28h]
.text:00404ED6                 mov     [esp+18h], esi
.text:00404EDA                 mov     esi, [esp+24h]
.text:00404EDE                 div     ebx
.text:00404EE0                 cmp     eax, esi
.text:00404EE2                 jb      short loc_404F14
.text:00404EE4                 mov     [esp], ecx
.text:00404EE7                 mov     edx, esi
.text:00404EE9                 imul    edx, ebx
.text:00404EEC                 mov     [esp+4], edx
.text:00404EF0                 call    realloc
.text:00404EF5                 test    eax, eax
.text:00404EF7                 mov     ecx, eax
.text:00404EF9                 jz      short loc_404F10
.text:00404EFB
.text:00404EFB loc_404EFB:                             ; CODE XREF: .text:00404F12↓j
.text:00404EFB                 mov     ebx, [esp+14h]
.text:00404EFF                 mov     eax, ecx
.text:00404F01                 mov     esi, [esp+18h]
.text:00404F05                 add     esp, 1Ch
.text:00404F08                 retn
.text:00404F08 ; ---------------------------------------------------------------------------
.text:00404F09                 align 10h
.text:00404F10
.text:00404F10 loc_404F10:                             ; CODE XREF: .text:00404EF9↑j
.text:00404F10                 test    esi, esi
.text:00404F12                 jz      short loc_404EFB
.text:00404F14
.text:00404F14 loc_404F14:                             ; CODE XREF: .text:00404EE2↑j
.text:00404F14                 call    sub_405140
.text:00404F14 ; ---------------------------------------------------------------------------
.text:00404F19                 align 10h
.text:00404F20
.text:00404F20 ; =============== S U B R O U T I N E =======================================
.text:00404F20
.text:00404F20
.text:00404F20 ; int __cdecl sub_404F20(void *, size_t)
.text:00404F20 sub_404F20      proc near               ; CODE XREF: sub_404BB0+5B↑p
.text:00404F20
.text:00404F20 Block           = dword ptr -0Ch
.text:00404F20 Size            = dword ptr -8
.text:00404F20 var_4           = dword ptr -4
.text:00404F20 arg_0           = dword ptr  4
.text:00404F20 arg_4           = dword ptr  8
.text:00404F20
.text:00404F20                 sub     esp, 0Ch
.text:00404F23                 mov     edx, [esp+0Ch+arg_0]
.text:00404F27                 mov     [esp+0Ch+var_4], ebx
.text:00404F2B                 mov     ebx, [esp+0Ch+arg_4]
.text:00404F2F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404F32                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404F36                 call    realloc
.text:00404F3B                 test    eax, eax
.text:00404F3D                 jz      short loc_404F47
.text:00404F3F
.text:00404F3F loc_404F3F:                             ; CODE XREF: sub_404F20+29↓j
.text:00404F3F                 mov     ebx, [esp+0Ch+var_4]
.text:00404F43                 add     esp, 0Ch
.text:00404F46                 retn
.text:00404F47 ; ---------------------------------------------------------------------------
.text:00404F47
.text:00404F47 loc_404F47:                             ; CODE XREF: sub_404F20+1D↑j
.text:00404F47                 test    ebx, ebx
.text:00404F49                 jz      short loc_404F3F
.text:00404F4B                 call    sub_405140
.text:00404F4B sub_404F20      endp
.text:00404F4B
.text:00404F50 ; ---------------------------------------------------------------------------
.text:00404F50                 jmp     sub_4050A0
.text:00404F50 ; ---------------------------------------------------------------------------
.text:00404F55                 align 10h
.text:00404F60
.text:00404F60 ; =============== S U B R O U T I N E =======================================
.text:00404F60
.text:00404F60
.text:00404F60 ; int __cdecl sub_404F60(void *, int)
.text:00404F60 sub_404F60      proc near               ; CODE XREF: sub_4038F0+76↑p
.text:00404F60
.text:00404F60 var_C           = dword ptr -0Ch
.text:00404F60 var_8           = dword ptr -8
.text:00404F60 var_4           = dword ptr -4
.text:00404F60 arg_0           = dword ptr  4
.text:00404F60 arg_4           = dword ptr  8
.text:00404F60
.text:00404F60                 sub     esp, 0Ch
.text:00404F63                 mov     edx, [esp+0Ch+arg_4]
.text:00404F67                 mov     [esp+0Ch+var_4], 1 ; int
.text:00404F6F                 mov     [esp+0Ch+var_8], edx ; int
.text:00404F73                 mov     edx, [esp+0Ch+arg_0]
.text:00404F77                 mov     [esp+0Ch+var_C], edx ; void *
.text:00404F7A                 call    sub_4050A0
.text:00404F7F                 add     esp, 0Ch
.text:00404F82                 retn
.text:00404F82 sub_404F60      endp
.text:00404F82
.text:00404F82 ; ---------------------------------------------------------------------------
.text:00404F83                 align 10h
.text:00404F90                 sub     esp, 1Ch
.text:00404F93                 mov     [esp+18h], ebx
.text:00404F97                 mov     ebx, [esp+20h]
.text:00404F9B                 mov     [esp], ebx
.text:00404F9E                 call    malloc
.text:00404FA3                 test    eax, eax
.text:00404FA5                 jz      short loc_404FC3
.text:00404FA7
.text:00404FA7 loc_404FA7:                             ; CODE XREF: .text:00404FC5↓j
.text:00404FA7                 mov     [esp+8], ebx
.text:00404FAB                 mov     dword ptr [esp+4], 0
.text:00404FB3                 mov     [esp], eax
.text:00404FB6                 call    memset
.text:00404FBB                 mov     ebx, [esp+18h]
.text:00404FBF                 add     esp, 1Ch
.text:00404FC2                 retn
.text:00404FC3 ; ---------------------------------------------------------------------------
.text:00404FC3
.text:00404FC3 loc_404FC3:                             ; CODE XREF: .text:00404FA5↑j
.text:00404FC3                 test    ebx, ebx
.text:00404FC5                 jz      short loc_404FA7
.text:00404FC7                 call    sub_405140
.text:00404FC7 ; ---------------------------------------------------------------------------
.text:00404FCC                 align 10h
.text:00404FD0                 sub     esp, 0Ch
.text:00404FD3                 xor     edx, edx
.text:00404FD5                 mov     ecx, [esp+14h]
.text:00404FD9                 mov     [esp+8], ebx
.text:00404FDD                 mov     eax, 0FFFFFFFFh
.text:00404FE2                 mov     ebx, [esp+10h]
.text:00404FE6                 div     ecx
.text:00404FE8                 cmp     eax, ebx
.text:00404FEA                 jb      short loc_405008
.text:00404FEC                 mov     [esp+4], ecx
.text:00404FF0                 mov     [esp], ebx
.text:00404FF3                 call    calloc
.text:00404FF8                 test    eax, eax
.text:00404FFA                 jz      short loc_405004
.text:00404FFC
.text:00404FFC loc_404FFC:                             ; CODE XREF: .text:00405006↓j
.text:00404FFC                 mov     ebx, [esp+8]
.text:00405000                 add     esp, 0Ch
.text:00405003                 retn
.text:00405004 ; ---------------------------------------------------------------------------
.text:00405004
.text:00405004 loc_405004:                             ; CODE XREF: .text:00404FFA↑j
.text:00405004                 test    ebx, ebx
.text:00405006                 jz      short loc_404FFC
.text:00405008
.text:00405008 loc_405008:                             ; CODE XREF: .text:00404FEA↑j
.text:00405008                 call    sub_405140
.text:00405008 ; ---------------------------------------------------------------------------
.text:0040500D                 align 10h
.text:00405010                 sub     esp, 1Ch
.text:00405013                 mov     [esp+18h], ebx
.text:00405017                 mov     ebx, [esp+24h]
.text:0040501B                 mov     [esp], ebx
.text:0040501E                 call    malloc
.text:00405023                 test    eax, eax
.text:00405025                 mov     edx, eax
.text:00405027                 jz      short loc_405045
.text:00405029
.text:00405029 loc_405029:                             ; CODE XREF: .text:00405047↓j
.text:00405029                 mov     [esp+8], ebx
.text:0040502D                 mov     ecx, [esp+20h]
.text:00405031                 mov     [esp], edx
.text:00405034                 mov     [esp+4], ecx
.text:00405038                 call    memcpy
.text:0040503D                 mov     ebx, [esp+18h]
.text:00405041                 add     esp, 1Ch
.text:00405044                 retn
.text:00405045 ; ---------------------------------------------------------------------------
.text:00405045
.text:00405045 loc_405045:                             ; CODE XREF: .text:00405027↑j
.text:00405045                 test    ebx, ebx
.text:00405047                 jz      short loc_405029
.text:00405049                 call    sub_405140
.text:00405049 ; ---------------------------------------------------------------------------
.text:0040504E                 align 10h
.text:00405050                 sub     esp, 1Ch
.text:00405053                 mov     [esp+18h], esi
.text:00405057                 mov     esi, [esp+20h]
.text:0040505B                 mov     [esp+14h], ebx
.text:0040505F                 mov     [esp], esi
.text:00405062                 call    strlen
.text:00405067                 lea     ebx, [eax+1]
.text:0040506A                 mov     [esp], ebx
.text:0040506D                 call    malloc
.text:00405072                 test    eax, eax
.text:00405074                 jz      short loc_405092
.text:00405076
.text:00405076 loc_405076:                             ; CODE XREF: .text:00405094↓j
.text:00405076                 mov     [esp+8], ebx
.text:0040507A                 mov     [esp+4], esi
.text:0040507E                 mov     [esp], eax
.text:00405081                 call    memcpy
.text:00405086                 mov     ebx, [esp+14h]
.text:0040508A                 mov     esi, [esp+18h]
.text:0040508E                 add     esp, 1Ch
.text:00405091                 retn
.text:00405092 ; ---------------------------------------------------------------------------
.text:00405092
.text:00405092 loc_405092:                             ; CODE XREF: .text:00405074↑j
.text:00405092                 test    ebx, ebx
.text:00405094                 jz      short loc_405076
.text:00405096                 call    sub_405140
.text:00405096 ; ---------------------------------------------------------------------------
.text:0040509B                 align 10h
.text:004050A0
.text:004050A0 ; =============== S U B R O U T I N E =======================================
.text:004050A0
.text:004050A0
.text:004050A0 ; int __cdecl sub_4050A0(void *, int, int)
.text:004050A0 sub_4050A0      proc near               ; CODE XREF: .text:00404F50↑j
.text:004050A0                                         ; sub_404F60+1A↑p
.text:004050A0
.text:004050A0 Block           = dword ptr -1Ch
.text:004050A0 Size            = dword ptr -18h
.text:004050A0 var_C           = dword ptr -0Ch
.text:004050A0 var_8           = dword ptr -8
.text:004050A0 var_4           = dword ptr -4
.text:004050A0 arg_0           = dword ptr  4
.text:004050A0 arg_4           = dword ptr  8
.text:004050A0 arg_8           = dword ptr  0Ch
.text:004050A0
.text:004050A0                 sub     esp, 1Ch
.text:004050A3                 mov     [esp+1Ch+var_8], esi
.text:004050A7                 mov     esi, [esp+1Ch+arg_0]
.text:004050AB                 mov     [esp+1Ch+var_4], edi
.text:004050AF                 mov     edi, [esp+1Ch+arg_4]
.text:004050B3                 test    esi, esi
.text:004050B5                 mov     [esp+1Ch+var_C], ebx
.text:004050B9                 mov     ecx, [edi]
.text:004050BB                 mov     ebx, [esp+1Ch+arg_8]
.text:004050BF                 jz      short loc_405100
.text:004050C1                 xor     edx, edx
.text:004050C3                 mov     eax, 7FFFFFFFh
.text:004050C8                 div     ebx
.text:004050CA                 cmp     eax, ecx
.text:004050CC                 jb      short loc_4050F9
.text:004050CE                 add     ecx, ecx
.text:004050D0
.text:004050D0 loc_4050D0:                             ; CODE XREF: sub_4050A0+62↓j
.text:004050D0                                         ; sub_4050A0+71↓j ...
.text:004050D0                 mov     [edi], ecx
.text:004050D2                 imul    ebx, ecx
.text:004050D5                 mov     [esp+1Ch+Block], esi ; Block
.text:004050D8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004050DC                 call    realloc
.text:004050E1                 test    eax, eax
.text:004050E3                 jz      short loc_4050F5
.text:004050E5
.text:004050E5 loc_4050E5:                             ; CODE XREF: sub_4050A0+57↓j
.text:004050E5                 mov     ebx, [esp+1Ch+var_C]
.text:004050E9                 mov     esi, [esp+1Ch+var_8]
.text:004050ED                 mov     edi, [esp+1Ch+var_4]
.text:004050F1                 add     esp, 1Ch
.text:004050F4                 retn
.text:004050F5 ; ---------------------------------------------------------------------------
.text:004050F5
.text:004050F5 loc_4050F5:                             ; CODE XREF: sub_4050A0+43↑j
.text:004050F5                 test    ebx, ebx
.text:004050F7                 jz      short loc_4050E5
.text:004050F9
.text:004050F9 loc_4050F9:                             ; CODE XREF: sub_4050A0+2C↑j
.text:004050F9                 call    sub_405140
.text:004050F9 ; ---------------------------------------------------------------------------
.text:004050FE                 align 10h
.text:00405100
.text:00405100 loc_405100:                             ; CODE XREF: sub_4050A0+1F↑j
.text:00405100                 test    ecx, ecx
.text:00405102                 jnz     short loc_4050D0
.text:00405104                 xor     edx, edx
.text:00405106                 mov     eax, 40h ; '@'
.text:0040510B                 div     ebx
.text:0040510D                 test    eax, eax
.text:0040510F                 mov     ecx, eax
.text:00405111                 jnz     short loc_4050D0
.text:00405113                 mov     ecx, 1
.text:00405118                 jmp     short loc_4050D0
.text:00405118 sub_4050A0      endp
.text:00405118
.text:00405118 ; ---------------------------------------------------------------------------
.text:0040511A                 align 10h
.text:00405120 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_405140+3↓o
.text:00405131 ; const char aS[]
.text:00405131 aS              db '%s',0               ; DATA XREF: sub_405140+10↓o
.text:00405134                 align 10h
.text:00405140
.text:00405140 ; =============== S U B R O U T I N E =======================================
.text:00405140
.text:00405140 ; Attributes: noreturn
.text:00405140
.text:00405140 sub_405140      proc near               ; CODE XREF: sub_404BB0:loc_404D6F↑p
.text:00405140                                         ; .text:loc_404E89↑p ...
.text:00405140
.text:00405140 Code            = dword ptr -1Ch
.text:00405140 ErrorMessage    = dword ptr -18h
.text:00405140 var_14          = dword ptr -14h
.text:00405140 var_10          = byte ptr -10h
.text:00405140
.text:00405140                 sub     esp, 1Ch
.text:00405143                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040514A                 call    ds:libintl_gettext
.text:00405150                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00405158                 mov     edx, Code
.text:0040515E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405166                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040516A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040516D                 call    sub_4051D0
.text:00405172                 call    abort
.text:00405172 sub_405140      endp
.text:00405172
.text:00405172 ; ---------------------------------------------------------------------------
.text:00405177                 align 10h
.text:00405180
.text:00405180 ; =============== S U B R O U T I N E =======================================
.text:00405180
.text:00405180 ; Attributes: thunk
.text:00405180
.text:00405180 libintl_bindtextdomain proc near
.text:00405180                 jmp     ds:__imp_libintl_bindtextdomain
.text:00405180 libintl_bindtextdomain endp
.text:00405180
.text:00405180 ; ---------------------------------------------------------------------------
.text:00405186                 align 10h
.text:00405190                 jmp     ds:libintl_textdomain
.text:00405190 ; ---------------------------------------------------------------------------
.text:00405196                 align 10h
.text:004051A0                 jmp     ds:libintl_gettext
.text:004051A0 ; ---------------------------------------------------------------------------
.text:004051A6                 align 10h
.text:004051B0 ; const char aS_0[]
.text:004051B0 aS_0            db ': %s',0             ; DATA XREF: sub_4051D0+B8↓o
.text:004051B0                                         ; sub_4052D4+122↓o
.text:004051B5 aUnknownSystemE db 'Unknown system error',0
.text:004051B5                                         ; DATA XREF: sub_4051D0:loc_40529D↓o
.text:004051B5                                         ; sub_4052D4:loc_40540E↓o
.text:004051CA ; const char aS_1[]
.text:004051CA aS_1            db '%s: ',0             ; DATA XREF: sub_4051D0:loc_4052A4↓o
.text:004051CF                 align 10h
.text:004051D0
.text:004051D0 ; =============== S U B R O U T I N E =======================================
.text:004051D0
.text:004051D0
.text:004051D0 ; int __cdecl sub_4051D0(int Code, int ErrorMessage, char *, char)
.text:004051D0 sub_4051D0      proc near               ; CODE XREF: sub_401660+2C2↑p
.text:004051D0                                         ; sub_401660+30B↑p ...
.text:004051D0
.text:004051D0 Stream          = dword ptr -1Ch
.text:004051D0 Format          = dword ptr -18h
.text:004051D0 ArgList         = dword ptr -14h
.text:004051D0 Code            = dword ptr  4
.text:004051D0 ErrorMessage    = dword ptr  8
.text:004051D0 arg_8           = dword ptr  0Ch
.text:004051D0 arg_C           = byte ptr  10h
.text:004051D0
.text:004051D0                 push    esi
.text:004051D1                 push    ebx
.text:004051D2                 sub     esp, 14h
.text:004051D5                 mov     edx, ds:_iob
.text:004051DB                 mov     esi, [esp+1Ch+Code]
.text:004051DF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004051E3                 add     edx, 20h ; ' '
.text:004051E6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004051E9                 call    fflush
.text:004051EE                 mov     eax, ds:dword_407200
.text:004051F3                 test    eax, eax
.text:004051F5                 jz      loc_4052A4
.text:004051FB                 call    eax ; dword_407200
.text:004051FD
.text:004051FD loc_4051FD:                             ; CODE XREF: sub_4051D0+F7↓j
.text:004051FD                 lea     edx, [esp+1Ch+arg_C]
.text:00405201                 mov     ecx, [esp+1Ch+arg_8]
.text:00405205                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405209                 mov     edx, ds:_iob
.text:0040520F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405213                 add     edx, 40h ; '@'
.text:00405216                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405219                 call    vfprintf
.text:0040521E                 inc     ds:dword_407210
.text:00405224                 test    ebx, ebx
.text:00405226                 jnz     short loc_405272
.text:00405228
.text:00405228 loc_405228:                             ; CODE XREF: sub_4051D0+CB↓j
.text:00405228                 mov     edx, ds:_iob
.text:0040522E                 lea     ecx, [edx+40h]
.text:00405231                 mov     ebx, [ecx+4]
.text:00405234                 dec     ebx
.text:00405235                 test    ebx, ebx
.text:00405237                 mov     [ecx+4], ebx
.text:0040523A                 js      short loc_405260
.text:0040523C                 mov     ecx, [edx+40h]
.text:0040523F                 mov     byte ptr [ecx], 0Ah
.text:00405242                 inc     dword ptr [edx+40h]
.text:00405245
.text:00405245 loc_405245:                             ; CODE XREF: sub_4051D0+A0↓j
.text:00405245                 mov     edx, ds:_iob
.text:0040524B                 add     edx, 40h ; '@'
.text:0040524E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405251                 call    fflush
.text:00405256                 test    esi, esi
.text:00405258                 jnz     short loc_4052CC
.text:0040525A                 add     esp, 14h
.text:0040525D                 pop     ebx
.text:0040525E                 pop     esi
.text:0040525F                 retn
.text:00405260 ; ---------------------------------------------------------------------------
.text:00405260
.text:00405260 loc_405260:                             ; CODE XREF: sub_4051D0+6A↑j
.text:00405260                 mov     [esp+1Ch+Format], ecx ; File
.text:00405264                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040526B                 call    _flsbuf
.text:00405270                 jmp     short loc_405245
.text:00405272 ; ---------------------------------------------------------------------------
.text:00405272
.text:00405272 loc_405272:                             ; CODE XREF: sub_4051D0+56↑j
.text:00405272                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00405275                 call    strerror
.text:0040527A                 test    eax, eax
.text:0040527C                 jz      short loc_40529D
.text:0040527E
.text:0040527E loc_40527E:                             ; CODE XREF: sub_4051D0+D2↓j
.text:0040527E                 mov     [esp+1Ch+ArgList], eax
.text:00405282                 mov     ebx, ds:_iob
.text:00405288                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00405290                 add     ebx, 40h ; '@'
.text:00405293                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405296                 call    fprintf
.text:0040529B                 jmp     short loc_405228
.text:0040529D ; ---------------------------------------------------------------------------
.text:0040529D
.text:0040529D loc_40529D:                             ; CODE XREF: sub_4051D0+AC↑j
.text:0040529D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004052A2                 jmp     short loc_40527E
.text:004052A4 ; ---------------------------------------------------------------------------
.text:004052A4
.text:004052A4 loc_4052A4:                             ; CODE XREF: sub_4051D0+25↑j
.text:004052A4                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:004052AC                 mov     edx, ds:_iob
.text:004052B2                 mov     ecx, ds:dword_4071D0
.text:004052B8                 add     edx, 40h ; '@'
.text:004052BB                 mov     [esp+1Ch+ArgList], ecx
.text:004052BF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004052C2                 call    fprintf
.text:004052C7                 jmp     loc_4051FD
.text:004052CC ; ---------------------------------------------------------------------------
.text:004052CC
.text:004052CC loc_4052CC:                             ; CODE XREF: sub_4051D0+88↑j
.text:004052CC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004052CF                 call    exit
.text:004052CF sub_4051D0      endp
.text:004052CF
.text:004052D4
.text:004052D4 ; =============== S U B R O U T I N E =======================================
.text:004052D4
.text:004052D4
.text:004052D4 ; int __cdecl sub_4052D4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004052D4 sub_4052D4      proc near               ; DATA XREF: sub_4052D4+77↓o
.text:004052D4
.text:004052D4 Stream          = dword ptr -28h
.text:004052D4 Format          = dword ptr -24h
.text:004052D4 ArgList         = dword ptr -20h
.text:004052D4 var_1C          = dword ptr -1Ch
.text:004052D4 Code            = dword ptr  8
.text:004052D4 ErrorMessage    = dword ptr  0Ch
.text:004052D4 Str2            = dword ptr  10h
.text:004052D4 arg_10          = dword ptr  14h
.text:004052D4 arg_14          = dword ptr  18h
.text:004052D4 arg_18          = byte ptr  1Ch
.text:004052D4
.text:004052D4                 and     eax, 64253A73h
.text:004052D9                 cmp     ah, [eax]
.text:004052DB
.text:004052DB loc_4052DB:                             ; DATA XREF: sub_4052D4:loc_405415↓o
.text:004052DB                 add     ds:55003A73h, ah
.text:004052E1                 push    edi
.text:004052E2                 push    esi
.text:004052E3                 push    ebx
.text:004052E4                 sub     esp, 1Ch
.text:004052E7                 mov     edx, ds:dword_407240
.text:004052ED                 mov     ebp, [esp+28h+Code]
.text:004052F1                 mov     edi, [esp+28h+ErrorMessage]
.text:004052F5                 test    edx, edx
.text:004052F7                 mov     ebx, [esp+28h+Str2]
.text:004052FB                 mov     esi, [esp+28h+arg_10]
.text:004052FF                 jz      short loc_405319
.text:00405301                 cmp     ds:dword_4071C0, esi
.text:00405307                 jz      loc_405440
.text:0040530D
.text:0040530D loc_40530D:                             ; CODE XREF: sub_4052D4+18D↓j
.text:0040530D                 mov     ds:Str1, ebx
.text:00405313                 mov     ds:dword_4071C0, esi
.text:00405319
.text:00405319 loc_405319:                             ; CODE XREF: sub_4052D4+2B↑j
.text:00405319                 mov     edx, ds:_iob
.text:0040531F                 add     edx, 20h ; ' '
.text:00405322                 mov     [esp+28h+Stream], edx ; Stream
.text:00405325                 call    fflush
.text:0040532A                 mov     eax, ds:dword_407200
.text:0040532F                 test    eax, eax
.text:00405331                 jz      loc_405415
.text:00405337                 call    eax ; dword_407200
.text:00405339
.text:00405339 loc_405339:                             ; CODE XREF: sub_4052D4+164↓j
.text:00405339                 test    ebx, ebx
.text:0040533B                 jz      short loc_40535E
.text:0040533D                 mov     [esp+28h+ArgList], ebx
.text:00405341                 mov     ebx, ds:_iob
.text:00405347                 mov     [esp+28h+var_1C], esi
.text:0040534B                 mov     [esp+28h+Format], offset sub_4052D4 ; Format
.text:00405353                 add     ebx, 40h ; '@'
.text:00405356                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405359                 call    fprintf
.text:0040535E
.text:0040535E loc_40535E:                             ; CODE XREF: sub_4052D4+67↑j
.text:0040535E                 mov     esi, ds:_iob
.text:00405364                 lea     edx, [esp+28h+arg_18]
.text:00405368                 mov     ecx, [esp+28h+arg_14]
.text:0040536C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00405370                 add     esi, 40h ; '@'
.text:00405373                 mov     [esp+28h+Format], ecx ; Format
.text:00405377                 mov     [esp+28h+Stream], esi ; Stream
.text:0040537A                 call    vfprintf
.text:0040537F                 inc     ds:dword_407210
.text:00405385                 test    edi, edi
.text:00405387                 jnz     short loc_4053E0
.text:00405389
.text:00405389 loc_405389:                             ; CODE XREF: sub_4052D4+135↓j
.text:00405389                 mov     edx, ds:_iob
.text:0040538F                 lea     ecx, [edx+40h]
.text:00405392                 mov     ebx, [ecx+4]
.text:00405395                 dec     ebx
.text:00405396                 test    ebx, ebx
.text:00405398                 mov     [ecx+4], ebx
.text:0040539B                 js      short loc_4053C7
.text:0040539D                 mov     esi, [edx+40h]
.text:004053A0                 mov     byte ptr [esi], 0Ah
.text:004053A3                 inc     dword ptr [edx+40h]
.text:004053A6
.text:004053A6 loc_4053A6:                             ; CODE XREF: sub_4052D4+103↓j
.text:004053A6                 mov     ecx, ds:_iob
.text:004053AC                 add     ecx, 40h ; '@'
.text:004053AF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004053B2                 call    fflush
.text:004053B7                 test    ebp, ebp
.text:004053B9                 jnz     loc_405466
.text:004053BF
.text:004053BF loc_4053BF:                             ; CODE XREF: sub_4052D4+173↓j
.text:004053BF                                         ; sub_4052D4+187↓j
.text:004053BF                 add     esp, 1Ch
.text:004053C2                 pop     ebx
.text:004053C3                 pop     esi
.text:004053C4                 pop     edi
.text:004053C5                 pop     ebp
.text:004053C6                 retn
.text:004053C7 ; ---------------------------------------------------------------------------
.text:004053C7
.text:004053C7 loc_4053C7:                             ; CODE XREF: sub_4052D4+C7↑j
.text:004053C7                 mov     [esp+28h+Format], ecx ; File
.text:004053CB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004053D2                 call    _flsbuf
.text:004053D7                 jmp     short loc_4053A6
.text:004053D7 ; ---------------------------------------------------------------------------
.text:004053D9                 align 10h
.text:004053E0
.text:004053E0 loc_4053E0:                             ; CODE XREF: sub_4052D4+B3↑j
.text:004053E0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004053E3                 call    strerror
.text:004053E8                 test    eax, eax
.text:004053EA                 jz      short loc_40540E
.text:004053EC
.text:004053EC loc_4053EC:                             ; CODE XREF: sub_4052D4+13F↓j
.text:004053EC                 mov     [esp+28h+ArgList], eax
.text:004053F0                 mov     edi, ds:_iob
.text:004053F6                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:004053FE                 add     edi, 40h ; '@'
.text:00405401                 mov     [esp+28h+Stream], edi ; Stream
.text:00405404                 call    fprintf
.text:00405409                 jmp     loc_405389
.text:0040540E ; ---------------------------------------------------------------------------
.text:0040540E
.text:0040540E loc_40540E:                             ; CODE XREF: sub_4052D4+116↑j
.text:0040540E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405413                 jmp     short loc_4053EC
.text:00405415 ; ---------------------------------------------------------------------------
.text:00405415
.text:00405415 loc_405415:                             ; CODE XREF: sub_4052D4+5D↑j
.text:00405415                 mov     [esp+28h+Format], (offset loc_4052DB+1) ; Format
.text:0040541D                 mov     ecx, ds:_iob
.text:00405423                 mov     edx, ds:dword_4071D0
.text:00405429                 add     ecx, 40h ; '@'
.text:0040542C                 mov     [esp+28h+ArgList], edx
.text:00405430                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405433                 call    fprintf
.text:00405438                 jmp     loc_405339
.text:00405438 ; ---------------------------------------------------------------------------
.text:0040543D                 align 10h
.text:00405440
.text:00405440 loc_405440:                             ; CODE XREF: sub_4052D4+33↑j
.text:00405440                 mov     eax, ds:Str1
.text:00405445                 cmp     ebx, eax
.text:00405447                 jz      loc_4053BF
.text:0040544D                 mov     [esp+28h+Format], ebx ; Str2
.text:00405451                 mov     [esp+28h+Stream], eax ; Str1
.text:00405454                 call    strcmp
.text:00405459                 test    eax, eax
.text:0040545B                 jz      loc_4053BF
.text:00405461                 jmp     loc_40530D
.text:00405466 ; ---------------------------------------------------------------------------
.text:00405466
.text:00405466 loc_405466:                             ; CODE XREF: sub_4052D4+E5↑j
.text:00405466                 mov     [esp+28h+Stream], ebp ; Code
.text:00405469                 call    exit
.text:00405469 sub_4052D4      endp ; sp-analysis failed
.text:00405469
.text:00405469 ; ---------------------------------------------------------------------------
.text:0040546E                 align 10h
.text:00405470
.text:00405470 ; =============== S U B R O U T I N E =======================================
.text:00405470
.text:00405470 ; Attributes: thunk
.text:00405470
.text:00405470 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00405470 mbrtowc         proc near               ; CODE XREF: sub_403A70+757↑p
.text:00405470                 jmp     ds:__imp_mbrtowc
.text:00405470 mbrtowc         endp
.text:00405470
.text:00405470 ; ---------------------------------------------------------------------------
.text:00405476                 align 10h
.text:00405480
.text:00405480 ; =============== S U B R O U T I N E =======================================
.text:00405480
.text:00405480 ; Attributes: bp-based frame
.text:00405480
.text:00405480 sub_405480      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00405480                 push    ebp
.text:00405481                 mov     ecx, offset byte_407000
.text:00405486                 cmp     ecx, offset byte_407000
.text:0040548C                 mov     ebp, esp
.text:0040548E                 jnb     short loc_4054A6
.text:00405490
.text:00405490 loc_405490:                             ; CODE XREF: sub_405480+24↓j
.text:00405490                 mov     edx, [ecx+4]
.text:00405493                 mov     eax, [ecx]
.text:00405495                 add     ecx, 8
.text:00405498                 add     [edx+400000h], eax
.text:0040549E                 cmp     ecx, offset byte_407000
.text:004054A4                 jb      short loc_405490
.text:004054A6
.text:004054A6 loc_4054A6:                             ; CODE XREF: sub_405480+E↑j
.text:004054A6                 pop     ebp
.text:004054A7                 retn
.text:004054A7 sub_405480      endp
.text:004054A7
.text:004054A7 ; ---------------------------------------------------------------------------
.text:004054A8                 align 10h
.text:004054B0
.text:004054B0 ; =============== S U B R O U T I N E =======================================
.text:004054B0
.text:004054B0 ; Attributes: bp-based frame
.text:004054B0
.text:004054B0 sub_4054B0      proc near               ; CODE XREF: sub_401080+16↑p
.text:004054B0                                         ; TopLevelExceptionFilter+D7↑p
.text:004054B0                 push    ebp
.text:004054B1                 mov     ebp, esp
.text:004054B3                 fninit
.text:004054B5                 pop     ebp
.text:004054B6                 retn
.text:004054B6 sub_4054B0      endp
.text:004054B6
.text:004054B6 ; ---------------------------------------------------------------------------
.text:004054B7                 align 10h
.text:004054C0
.text:004054C0 ; =============== S U B R O U T I N E =======================================
.text:004054C0
.text:004054C0 ; Attributes: bp-based frame
.text:004054C0
.text:004054C0 ; void __cdecl sub_4054C0()
.text:004054C0 sub_4054C0      proc near               ; DATA XREF: .text:loc_405509↓o
.text:004054C0                                         ; sub_405550:loc_40557E↓o
.text:004054C0                 push    ebp
.text:004054C1                 mov     ebp, esp
.text:004054C3                 sub     esp, 8
.text:004054C6                 mov     eax, off_406084
.text:004054CB                 mov     edx, [eax]
.text:004054CD                 test    edx, edx
.text:004054CF                 jnz     short loc_4054D5
.text:004054D1
.text:004054D1 loc_4054D1:                             ; CODE XREF: sub_4054C0+2C↓j
.text:004054D1                 mov     esp, ebp
.text:004054D3                 pop     ebp
.text:004054D4                 retn
.text:004054D5 ; ---------------------------------------------------------------------------
.text:004054D5
.text:004054D5 loc_4054D5:                             ; CODE XREF: sub_4054C0+F↑j
.text:004054D5                                         ; sub_4054C0+2A↓j
.text:004054D5                 call    dword ptr [eax]
.text:004054D7                 mov     edx, off_406084
.text:004054DD                 mov     ecx, [edx+4]
.text:004054E0                 lea     eax, [edx+4]
.text:004054E3                 mov     off_406084, eax
.text:004054E8                 test    ecx, ecx
.text:004054EA                 jnz     short loc_4054D5
.text:004054EC                 jmp     short loc_4054D1
.text:004054EC sub_4054C0      endp
.text:004054EC
.text:004054EC ; ---------------------------------------------------------------------------
.text:004054EE                 align 10h
.text:004054F0                 push    ebp
.text:004054F1                 mov     ebp, esp
.text:004054F3                 sub     esp, 8
.text:004054F6                 mov     [ebp-4], ebx
.text:004054F9                 mov     eax, ds:dword_405850
.text:004054FE                 cmp     eax, 0FFFFFFFFh
.text:00405501                 jz      short loc_40552C
.text:00405503
.text:00405503 loc_405503:                             ; CODE XREF: .text:00405536↓j
.text:00405503                                         ; .text:00405549↓j
.text:00405503                 test    eax, eax
.text:00405505                 mov     ebx, eax
.text:00405507                 jnz     short loc_405520
.text:00405509
.text:00405509 loc_405509:                             ; CODE XREF: .text:0040552A↓j
.text:00405509                 mov     dword ptr [esp], offset sub_4054C0
.text:00405510                 call    sub_401040
.text:00405515                 mov     ebx, [ebp-4]
.text:00405518                 mov     esp, ebp
.text:0040551A                 pop     ebp
.text:0040551B                 retn
.text:0040551B ; ---------------------------------------------------------------------------
.text:0040551C                 align 10h
.text:00405520
.text:00405520 loc_405520:                             ; CODE XREF: .text:00405507↑j
.text:00405520                                         ; .text:00405528↓j
.text:00405520                 call    ds:dword_405850[ebx*4]
.text:00405527                 dec     ebx
.text:00405528                 jnz     short loc_405520
.text:0040552A                 jmp     short loc_405509
.text:0040552C ; ---------------------------------------------------------------------------
.text:0040552C
.text:0040552C loc_40552C:                             ; CODE XREF: .text:00405501↑j
.text:0040552C                 mov     ecx, ds:dword_405854
.text:00405532                 xor     eax, eax
.text:00405534                 test    ecx, ecx
.text:00405536                 jz      short loc_405503
.text:00405538                 mov     edx, offset dword_405850
.text:0040553D                 lea     esi, [esi+0]
.text:00405540
.text:00405540 loc_405540:                             ; CODE XREF: .text:00405547↓j
.text:00405540                 inc     eax
.text:00405541                 mov     ecx, [edx+eax*4+4]
.text:00405545                 test    ecx, ecx
.text:00405547                 jnz     short loc_405540
.text:00405549                 jmp     short loc_405503
.text:00405549 ; ---------------------------------------------------------------------------
.text:0040554B                 align 10h
.text:00405550
.text:00405550 ; =============== S U B R O U T I N E =======================================
.text:00405550
.text:00405550 ; Attributes: bp-based frame
.text:00405550
.text:00405550 sub_405550      proc near               ; CODE XREF: sub_401660+18↑p
.text:00405550
.text:00405550 var_8           = dword ptr -8
.text:00405550 var_4           = dword ptr -4
.text:00405550
.text:00405550                 push    ebp
.text:00405551                 mov     ebp, esp
.text:00405553                 sub     esp, 8
.text:00405556                 mov     [ebp+var_4], ebx
.text:00405559                 mov     edx, dword_406080
.text:0040555F                 test    edx, edx
.text:00405561                 jnz     short loc_40558A
.text:00405563                 mov     eax, ds:dword_405850
.text:00405568                 mov     edx, 1
.text:0040556D                 mov     dword_406080, edx
.text:00405573                 cmp     eax, 0FFFFFFFFh
.text:00405576                 jz      short loc_40559D
.text:00405578
.text:00405578 loc_405578:                             ; CODE XREF: sub_405550+57↓j
.text:00405578                                         ; sub_405550+69↓j
.text:00405578                 test    eax, eax
.text:0040557A                 mov     ebx, eax
.text:0040557C                 jnz     short loc_405591
.text:0040557E
.text:0040557E loc_40557E:                             ; CODE XREF: sub_405550+4B↓j
.text:0040557E                 mov     [esp+8+var_8], offset sub_4054C0 ; void (__cdecl *)()
.text:00405585                 call    sub_401040
.text:0040558A
.text:0040558A loc_40558A:                             ; CODE XREF: sub_405550+11↑j
.text:0040558A                 mov     ebx, [ebp+var_4]
.text:0040558D                 mov     esp, ebp
.text:0040558F                 pop     ebp
.text:00405590                 retn
.text:00405591 ; ---------------------------------------------------------------------------
.text:00405591
.text:00405591 loc_405591:                             ; CODE XREF: sub_405550+2C↑j
.text:00405591                                         ; sub_405550+49↓j
.text:00405591                 call    ds:dword_405850[ebx*4]
.text:00405598                 dec     ebx
.text:00405599                 jnz     short loc_405591
.text:0040559B                 jmp     short loc_40557E
.text:0040559D ; ---------------------------------------------------------------------------
.text:0040559D
.text:0040559D loc_40559D:                             ; CODE XREF: sub_405550+26↑j
.text:0040559D                 mov     ecx, ds:dword_405854
.text:004055A3                 xor     eax, eax
.text:004055A5                 test    ecx, ecx
.text:004055A7                 jz      short loc_405578
.text:004055A9                 mov     edx, offset dword_405850
.text:004055AE                 mov     esi, esi
.text:004055B0
.text:004055B0 loc_4055B0:                             ; CODE XREF: sub_405550+67↓j
.text:004055B0                 inc     eax
.text:004055B1                 mov     ebx, [edx+eax*4+4]
.text:004055B5                 test    ebx, ebx
.text:004055B7                 jnz     short loc_4055B0
.text:004055B9                 jmp     short loc_405578
.text:004055B9 sub_405550      endp
.text:004055B9
.text:004055B9 ; ---------------------------------------------------------------------------
.text:004055BB                 align 10h
.text:004055C0
.text:004055C0 ; =============== S U B R O U T I N E =======================================
.text:004055C0
.text:004055C0 ; Attributes: info_from_lumina
.text:004055C0
.text:004055C0 ; void *__cdecl _alloca(size_t Size)
.text:004055C0 __alloca        proc near               ; CODE XREF: sub_401660+13↑p
.text:004055C0                 push    ecx
.text:004055C1                 mov     ecx, esp
.text:004055C3                 add     ecx, 8
.text:004055C6
.text:004055C6 loc_4055C6:                             ; CODE XREF: __alloca+1B↓j
.text:004055C6                 cmp     eax, 1000h
.text:004055CB                 jb      short loc_4055DD
.text:004055CD                 sub     ecx, 1000h
.text:004055D3                 or      dword ptr [ecx], 0
.text:004055D6                 sub     eax, 1000h
.text:004055DB                 jmp     short loc_4055C6
.text:004055DD ; ---------------------------------------------------------------------------
.text:004055DD
.text:004055DD loc_4055DD:                             ; CODE XREF: __alloca+B↑j
.text:004055DD                 sub     ecx, eax
.text:004055DF                 or      dword ptr [ecx], 0
.text:004055E2                 mov     eax, esp
.text:004055E4                 mov     esp, ecx
.text:004055E6                 mov     ecx, [eax]
.text:004055E8                 mov     eax, [eax+4]
.text:004055EB                 jmp     eax
.text:004055EB __alloca        endp
.text:004055EB
.text:004055EB ; ---------------------------------------------------------------------------
.text:004055ED                 align 10h
.text:004055F0                 jmp     ds:__set_app_type
.text:004055F0 ; ---------------------------------------------------------------------------
.text:004055F6                 align 10h
.text:00405600
.text:00405600 ; =============== S U B R O U T I N E =======================================
.text:00405600
.text:00405600 ; Attributes: thunk
.text:00405600
.text:00405600 ; void __cdecl cexit()
.text:00405600 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405600                 jmp     ds:__imp__cexit
.text:00405600 _cexit          endp
.text:00405600
.text:00405600 ; ---------------------------------------------------------------------------
.text:00405606                 align 10h
.text:00405610
.text:00405610 ; =============== S U B R O U T I N E =======================================
.text:00405610
.text:00405610 ; Attributes: thunk
.text:00405610
.text:00405610 ; char ***__cdecl _p__environ()
.text:00405610 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405610                 jmp     ds:__imp___p__environ
.text:00405610 __p__environ    endp
.text:00405610
.text:00405610 ; ---------------------------------------------------------------------------
.text:00405616                 align 10h
.text:00405620
.text:00405620 ; =============== S U B R O U T I N E =======================================
.text:00405620
.text:00405620 ; Attributes: thunk
.text:00405620
.text:00405620 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405620 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405620                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405620
.text:00405620 Signal          = dword ptr  4
.text:00405620 Function        = dword ptr  8
.text:00405620
.text:00405620                 jmp     ds:__imp_signal
.text:00405620 signal          endp
.text:00405620
.text:00405620 ; ---------------------------------------------------------------------------
.text:00405626                 align 10h
.text:00405630
.text:00405630 ; =============== S U B R O U T I N E =======================================
.text:00405630
.text:00405630 ; Attributes: thunk
.text:00405630
.text:00405630 ; int *__cdecl _p__fmode()
.text:00405630 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00405630                 jmp     ds:__imp___p__fmode
.text:00405630 __p__fmode      endp
.text:00405630
.text:00405630 ; ---------------------------------------------------------------------------
.text:00405636                 align 10h
.text:00405640
.text:00405640 ; =============== S U B R O U T I N E =======================================
.text:00405640
.text:00405640 ; Attributes: thunk
.text:00405640
.text:00405640 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405640 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405640                                         ; sub_401080+90↑p ...
.text:00405640
.text:00405640 FileHandle      = dword ptr  4
.text:00405640 Mode            = dword ptr  8
.text:00405640
.text:00405640                 jmp     ds:__imp__setmode
.text:00405640 _setmode        endp
.text:00405640
.text:00405640 ; ---------------------------------------------------------------------------
.text:00405646                 align 10h
.text:00405650
.text:00405650 ; =============== S U B R O U T I N E =======================================
.text:00405650
.text:00405650 ; Attributes: thunk
.text:00405650
.text:00405650 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00405650                 jmp     ds:__imp___getmainargs
.text:00405650 __getmainargs   endp
.text:00405650
.text:00405650 ; ---------------------------------------------------------------------------
.text:00405656                 align 10h
.text:00405660
.text:00405660 ; =============== S U B R O U T I N E =======================================
.text:00405660
.text:00405660 ; Attributes: thunk
.text:00405660
.text:00405660 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00405660 setlocale       proc near               ; CODE XREF: sub_401660+34↑p
.text:00405660                                         ; sub_4036C0+24↑p
.text:00405660
.text:00405660 Category        = dword ptr  4
.text:00405660 Locale          = dword ptr  8
.text:00405660
.text:00405660                 jmp     ds:__imp_setlocale
.text:00405660 setlocale       endp
.text:00405660
.text:00405660 ; ---------------------------------------------------------------------------
.text:00405666                 align 10h
.text:00405670
.text:00405670 ; =============== S U B R O U T I N E =======================================
.text:00405670
.text:00405670 ; Attributes: thunk
.text:00405670
.text:00405670 ; int __cdecl fclose(FILE *Stream)
.text:00405670 fclose          proc near               ; CODE XREF: sub_401AD0+313↑p
.text:00405670                                         ; sub_4035D0+27↑p
.text:00405670
.text:00405670 Stream          = dword ptr  4
.text:00405670
.text:00405670                 jmp     ds:__imp_fclose
.text:00405670 fclose          endp
.text:00405670
.text:00405670 ; ---------------------------------------------------------------------------
.text:00405676                 align 10h
.text:00405680
.text:00405680 ; =============== S U B R O U T I N E =======================================
.text:00405680
.text:00405680 ; Attributes: thunk
.text:00405680
.text:00405680 ; void __cdecl free(void *Block)
.text:00405680 free            proc near               ; CODE XREF: sub_401AD0+2FA↑p
.text:00405680                                         ; .text:004039DB↑j ...
.text:00405680
.text:00405680 Block           = dword ptr  4
.text:00405680
.text:00405680                 jmp     ds:__imp_free
.text:00405680 free            endp
.text:00405680
.text:00405680 ; ---------------------------------------------------------------------------
.text:00405686                 align 10h
.text:00405690
.text:00405690 ; =============== S U B R O U T I N E =======================================
.text:00405690
.text:00405690 ; Attributes: thunk
.text:00405690
.text:00405690 ; int *__cdecl errno()
.text:00405690 _errno          proc near               ; CODE XREF: sub_401AD0+84↑p
.text:00405690                                         ; sub_401AD0+1DA↑p ...
.text:00405690                 jmp     ds:__imp__errno
.text:00405690 _errno          endp
.text:00405690
.text:00405690 ; ---------------------------------------------------------------------------
.text:00405696                 align 10h
.text:004056A0
.text:004056A0 ; =============== S U B R O U T I N E =======================================
.text:004056A0
.text:004056A0 ; Attributes: thunk
.text:004056A0
.text:004056A0 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:004056A0 fwrite          proc near               ; CODE XREF: sub_401AD0+1B9↑p
.text:004056A0
.text:004056A0 Buffer          = dword ptr  4
.text:004056A0 ElementSize     = dword ptr  8
.text:004056A0 ElementCount    = dword ptr  0Ch
.text:004056A0 Stream          = dword ptr  10h
.text:004056A0
.text:004056A0                 jmp     ds:__imp_fwrite
.text:004056A0 fwrite          endp
.text:004056A0
.text:004056A0 ; ---------------------------------------------------------------------------
.text:004056A6                 align 10h
.text:004056B0
.text:004056B0 ; =============== S U B R O U T I N E =======================================
.text:004056B0
.text:004056B0 ; Attributes: noreturn thunk
.text:004056B0
.text:004056B0 ; void __cdecl __noreturn exit(int Code)
.text:004056B0 exit            proc near               ; CODE XREF: sub_401660:loc_401771↑p
.text:004056B0                                         ; .text:004019CB↑p ...
.text:004056B0
.text:004056B0 Code            = dword ptr  4
.text:004056B0
.text:004056B0                 jmp     ds:__imp_exit
.text:004056B0 exit            endp
.text:004056B0
.text:004056B0 ; ---------------------------------------------------------------------------
.text:004056B6                 align 10h
.text:004056C0
.text:004056C0 ; =============== S U B R O U T I N E =======================================
.text:004056C0
.text:004056C0 ; Attributes: thunk
.text:004056C0
.text:004056C0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004056C0 fputs           proc near               ; CODE XREF: sub_401660+170↑p
.text:004056C0                                         ; sub_401660+192↑p ...
.text:004056C0
.text:004056C0 Buffer          = dword ptr  4
.text:004056C0 Stream          = dword ptr  8
.text:004056C0
.text:004056C0                 jmp     ds:__imp_fputs
.text:004056C0 fputs           endp
.text:004056C0
.text:004056C0 ; ---------------------------------------------------------------------------
.text:004056C6                 align 10h
.text:004056D0
.text:004056D0 ; =============== S U B R O U T I N E =======================================
.text:004056D0
.text:004056D0 ; Attributes: thunk
.text:004056D0
.text:004056D0 ; int printf(const char *const Format, ...)
.text:004056D0 printf          proc near               ; CODE XREF: sub_401660+14E↑p
.text:004056D0                                         ; sub_401660+215↑p ...
.text:004056D0
.text:004056D0 Format          = dword ptr  4
.text:004056D0
.text:004056D0                 jmp     ds:__imp_printf
.text:004056D0 printf          endp
.text:004056D0
.text:004056D0 ; ---------------------------------------------------------------------------
.text:004056D6                 align 10h
.text:004056E0
.text:004056E0 ; =============== S U B R O U T I N E =======================================
.text:004056E0
.text:004056E0 ; Attributes: thunk
.text:004056E0
.text:004056E0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004056E0 fprintf         proc near               ; CODE XREF: sub_401660+105↑p
.text:004056E0                                         ; .text:004019C3↑p ...
.text:004056E0
.text:004056E0 Stream          = dword ptr  4
.text:004056E0 Format          = dword ptr  8
.text:004056E0
.text:004056E0                 jmp     ds:__imp_fprintf
.text:004056E0 fprintf         endp
.text:004056E0
.text:004056E0 ; ---------------------------------------------------------------------------
.text:004056E6                 align 10h
.text:004056F0
.text:004056F0 ; =============== S U B R O U T I N E =======================================
.text:004056F0
.text:004056F0 ; Attributes: thunk
.text:004056F0
.text:004056F0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:004056F0 fopen           proc near               ; CODE XREF: sub_401AD0+3EB↑p
.text:004056F0
.text:004056F0 FileName        = dword ptr  4
.text:004056F0 Mode            = dword ptr  8
.text:004056F0
.text:004056F0                 jmp     ds:__imp_fopen
.text:004056F0 fopen           endp
.text:004056F0
.text:004056F0 ; ---------------------------------------------------------------------------
.text:004056F6                 align 10h
.text:00405700
.text:00405700 ; =============== S U B R O U T I N E =======================================
.text:00405700
.text:00405700 ; Attributes: thunk
.text:00405700
.text:00405700 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405700 _flsbuf         proc near               ; CODE XREF: sub_401AD0+220↑p
.text:00405700                                         ; sub_401AD0+235↑p ...
.text:00405700
.text:00405700 File            = dword ptr  8
.text:00405700
.text:00405700                 jmp     ds:__imp__flsbuf
.text:00405700 _flsbuf         endp
.text:00405700
.text:00405700 ; ---------------------------------------------------------------------------
.text:00405706                 align 10h
.text:00405710
.text:00405710 ; =============== S U B R O U T I N E =======================================
.text:00405710
.text:00405710 ; Attributes: thunk
.text:00405710
.text:00405710 ; size_t __cdecl strlen(const char *Str)
.text:00405710 strlen          proc near               ; CODE XREF: sub_402130+2A9↑p
.text:00405710                                         ; sub_402130+346↑p ...
.text:00405710
.text:00405710 Str             = dword ptr  4
.text:00405710
.text:00405710                 jmp     ds:__imp_strlen
.text:00405710 strlen          endp
.text:00405710
.text:00405710 ; ---------------------------------------------------------------------------
.text:00405716                 align 10h
.text:00405720
.text:00405720 ; =============== S U B R O U T I N E =======================================
.text:00405720
.text:00405720 ; Attributes: thunk
.text:00405720
.text:00405720 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405720 strncmp         proc near               ; CODE XREF: sub_402130+23F↑p
.text:00405720                                         ; sub_402130+699↑p
.text:00405720
.text:00405720 Str1            = dword ptr  4
.text:00405720 Str2            = dword ptr  8
.text:00405720 MaxCount        = dword ptr  0Ch
.text:00405720
.text:00405720                 jmp     ds:__imp_strncmp
.text:00405720 strncmp         endp
.text:00405720
.text:00405720 ; ---------------------------------------------------------------------------
.text:00405726                 align 10h
.text:00405730
.text:00405730 ; =============== S U B R O U T I N E =======================================
.text:00405730
.text:00405730 ; Attributes: thunk
.text:00405730
.text:00405730 ; char *__cdecl getenv(const char *VarName)
.text:00405730 getenv          proc near               ; CODE XREF: sub_402130+B57↑p
.text:00405730
.text:00405730 VarName         = dword ptr  4
.text:00405730
.text:00405730                 jmp     ds:__imp_getenv
.text:00405730 getenv          endp
.text:00405730
.text:00405730 ; ---------------------------------------------------------------------------
.text:00405736                 align 10h
.text:00405740
.text:00405740 ; =============== S U B R O U T I N E =======================================
.text:00405740
.text:00405740 ; Attributes: thunk
.text:00405740
.text:00405740 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405740 strchr          proc near               ; CODE XREF: sub_402130+469↑p
.text:00405740                                         ; sub_402130+53A↑p ...
.text:00405740
.text:00405740 Str             = dword ptr  4
.text:00405740 Val             = dword ptr  8
.text:00405740
.text:00405740                 jmp     ds:__imp_strchr
.text:00405740 strchr          endp
.text:00405740
.text:00405740 ; ---------------------------------------------------------------------------
.text:00405746                 align 10h
.text:00405750
.text:00405750 ; =============== S U B R O U T I N E =======================================
.text:00405750
.text:00405750 ; Attributes: thunk
.text:00405750
.text:00405750 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00405750 vfprintf        proc near               ; CODE XREF: sub_403250+C1↑p
.text:00405750                                         ; sub_4051D0+49↑p ...
.text:00405750
.text:00405750 Stream          = dword ptr  4
.text:00405750 Format          = dword ptr  8
.text:00405750 ArgList         = dword ptr  0Ch
.text:00405750
.text:00405750                 jmp     ds:__imp_vfprintf
.text:00405750 vfprintf        endp
.text:00405750
.text:00405750 ; ---------------------------------------------------------------------------
.text:00405756                 align 10h
.text:00405760
.text:00405760 ; =============== S U B R O U T I N E =======================================
.text:00405760
.text:00405760 ; Attributes: noreturn thunk
.text:00405760
.text:00405760 ; void __cdecl __noreturn abort()
.text:00405760 abort           proc near               ; CODE XREF: sub_403250:loc_4032EC↑p
.text:00405760                                         ; sub_404BB0:loc_404D6A↑p ...
.text:00405760                 jmp     ds:__imp_abort
.text:00405760 abort           endp
.text:00405760
.text:00405760 ; ---------------------------------------------------------------------------
.text:00405766                 align 10h
.text:00405770
.text:00405770 ; =============== S U B R O U T I N E =======================================
.text:00405770
.text:00405770 ; Attributes: thunk
.text:00405770
.text:00405770 ; int __cdecl filbuf(FILE *File)
.text:00405770 _filbuf         proc near               ; CODE XREF: sub_4038F0+B3↑p
.text:00405770
.text:00405770 File            = dword ptr  4
.text:00405770
.text:00405770                 jmp     ds:__imp__filbuf
.text:00405770 _filbuf         endp
.text:00405770
.text:00405770 ; ---------------------------------------------------------------------------
.text:00405776                 align 10h
.text:00405780
.text:00405780 ; =============== S U B R O U T I N E =======================================
.text:00405780
.text:00405780 ; Attributes: thunk
.text:00405780
.text:00405780 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405780 iswctype        proc near               ; CODE XREF: sub_403A70+78B↑p
.text:00405780
.text:00405780 C               = word ptr  4
.text:00405780 Type            = word ptr  8
.text:00405780
.text:00405780                 jmp     ds:__imp_iswctype
.text:00405780 iswctype        endp
.text:00405780
.text:00405780 ; ---------------------------------------------------------------------------
.text:00405786                 align 10h
.text:00405790
.text:00405790 ; =============== S U B R O U T I N E =======================================
.text:00405790
.text:00405790 ; Attributes: thunk
.text:00405790
.text:00405790 ; int __cdecl isctype(int C, int Type)
.text:00405790 _isctype        proc near               ; CODE XREF: sub_403A70+610↑p
.text:00405790
.text:00405790 C               = dword ptr  4
.text:00405790 Type            = dword ptr  8
.text:00405790
.text:00405790                 jmp     ds:__imp__isctype
.text:00405790 _isctype        endp
.text:00405790
.text:00405790 ; ---------------------------------------------------------------------------
.text:00405796                 align 10h
.text:004057A0
.text:004057A0 ; =============== S U B R O U T I N E =======================================
.text:004057A0
.text:004057A0 ; Attributes: thunk
.text:004057A0
.text:004057A0 ; int __cdecl strcoll(const char *String1, const char *String2)
.text:004057A0 strcoll         proc near               ; CODE XREF: sub_404D80+52↑p
.text:004057A0
.text:004057A0 String1         = dword ptr  4
.text:004057A0 String2         = dword ptr  8
.text:004057A0
.text:004057A0                 jmp     ds:__imp_strcoll
.text:004057A0 strcoll         endp
.text:004057A0
.text:004057A0 ; ---------------------------------------------------------------------------
.text:004057A6                 align 10h
.text:004057B0
.text:004057B0 ; =============== S U B R O U T I N E =======================================
.text:004057B0
.text:004057B0 ; Attributes: thunk
.text:004057B0
.text:004057B0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004057B0 memcpy          proc near               ; CODE XREF: .text:00405038↑p
.text:004057B0                                         ; .text:00405081↑p
.text:004057B0
.text:004057B0 Src             = dword ptr  8
.text:004057B0 Size            = dword ptr  0Ch
.text:004057B0
.text:004057B0                 jmp     ds:__imp_memcpy
.text:004057B0 memcpy          endp
.text:004057B0
.text:004057B0 ; ---------------------------------------------------------------------------
.text:004057B6                 align 10h
.text:004057C0
.text:004057C0 ; =============== S U B R O U T I N E =======================================
.text:004057C0
.text:004057C0 ; Attributes: thunk
.text:004057C0
.text:004057C0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004057C0 memset          proc near               ; CODE XREF: .text:00404FB6↑p
.text:004057C0
.text:004057C0 Val             = dword ptr  8
.text:004057C0 Size            = dword ptr  0Ch
.text:004057C0
.text:004057C0                 jmp     ds:__imp_memset
.text:004057C0 memset          endp
.text:004057C0
.text:004057C0 ; ---------------------------------------------------------------------------
.text:004057C6                 align 10h
.text:004057D0
.text:004057D0 ; =============== S U B R O U T I N E =======================================
.text:004057D0
.text:004057D0 ; Attributes: thunk
.text:004057D0
.text:004057D0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:004057D0 calloc          proc near               ; CODE XREF: .text:00404FF3↑p
.text:004057D0
.text:004057D0 Count           = dword ptr  4
.text:004057D0 Size            = dword ptr  8
.text:004057D0
.text:004057D0                 jmp     ds:__imp_calloc
.text:004057D0 calloc          endp
.text:004057D0
.text:004057D0 ; ---------------------------------------------------------------------------
.text:004057D6                 align 10h
.text:004057E0
.text:004057E0 ; =============== S U B R O U T I N E =======================================
.text:004057E0
.text:004057E0 ; Attributes: thunk
.text:004057E0
.text:004057E0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004057E0 realloc         proc near               ; CODE XREF: .text:00404EF0↑p
.text:004057E0                                         ; sub_404F20+16↑p ...
.text:004057E0
.text:004057E0 Block           = dword ptr  4
.text:004057E0 Size            = dword ptr  8
.text:004057E0
.text:004057E0                 jmp     ds:__imp_realloc
.text:004057E0 realloc         endp
.text:004057E0
.text:004057E0 ; ---------------------------------------------------------------------------
.text:004057E6                 align 10h
.text:004057F0
.text:004057F0 ; =============== S U B R O U T I N E =======================================
.text:004057F0
.text:004057F0 ; Attributes: thunk
.text:004057F0
.text:004057F0 ; void *__cdecl malloc(size_t Size)
.text:004057F0 malloc          proc near               ; CODE XREF: .text:00404E74↑p
.text:004057F0                                         ; sub_404E90+E↑p ...
.text:004057F0
.text:004057F0 Size            = dword ptr  4
.text:004057F0
.text:004057F0                 jmp     ds:__imp_malloc
.text:004057F0 malloc          endp
.text:004057F0
.text:004057F0 ; ---------------------------------------------------------------------------
.text:004057F6                 align 10h
.text:00405800
.text:00405800 ; =============== S U B R O U T I N E =======================================
.text:00405800
.text:00405800 ; Attributes: thunk
.text:00405800
.text:00405800 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405800 strcmp          proc near               ; CODE XREF: sub_4052D4+180↑p
.text:00405800
.text:00405800 Str1            = dword ptr  4
.text:00405800 Str2            = dword ptr  8
.text:00405800
.text:00405800                 jmp     ds:__imp_strcmp
.text:00405800 strcmp          endp
.text:00405800
.text:00405800 ; ---------------------------------------------------------------------------
.text:00405806                 align 10h
.text:00405810
.text:00405810 ; =============== S U B R O U T I N E =======================================
.text:00405810
.text:00405810 ; Attributes: thunk
.text:00405810
.text:00405810 ; int __cdecl fflush(FILE *Stream)
.text:00405810 fflush          proc near               ; CODE XREF: sub_4051D0+19↑p
.text:00405810                                         ; sub_4051D0+81↑p ...
.text:00405810
.text:00405810 Stream          = dword ptr  4
.text:00405810
.text:00405810                 jmp     ds:__imp_fflush
.text:00405810 fflush          endp
.text:00405810
.text:00405810 ; ---------------------------------------------------------------------------
.text:00405816                 align 10h
.text:00405820
.text:00405820 ; =============== S U B R O U T I N E =======================================
.text:00405820
.text:00405820 ; Attributes: thunk
.text:00405820
.text:00405820 ; char *__cdecl strerror(int ErrorMessage)
.text:00405820 strerror        proc near               ; CODE XREF: sub_4051D0+A5↑p
.text:00405820                                         ; sub_4052D4+10F↑p
.text:00405820
.text:00405820 ErrorMessage    = dword ptr  4
.text:00405820
.text:00405820                 jmp     ds:__imp_strerror
.text:00405820 strerror        endp
.text:00405820
.text:00405820 ; ---------------------------------------------------------------------------
.text:00405826                 align 10h
.text:00405830
.text:00405830 ; =============== S U B R O U T I N E =======================================
.text:00405830
.text:00405830 ; Attributes: thunk
.text:00405830
.text:00405830 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405830 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405830
.text:00405830 lpTopLevelExceptionFilter= dword ptr  4
.text:00405830
.text:00405830                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405830 SetUnhandledExceptionFilter endp
.text:00405830
.text:00405830 ; ---------------------------------------------------------------------------
.text:00405836                 align 10h
.text:00405840
.text:00405840 ; =============== S U B R O U T I N E =======================================
.text:00405840
.text:00405840 ; Attributes: noreturn thunk
.text:00405840
.text:00405840 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405840 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405840
.text:00405840 uExitCode       = dword ptr  4
.text:00405840
.text:00405840                 jmp     ds:__imp_ExitProcess
.text:00405840 ExitProcess     endp
.text:00405840
.text:00405840 ; ---------------------------------------------------------------------------
.text:00405846                 align 10h
.text:00405850 dword_405850    dd 0FFFFFFFFh           ; DATA XREF: .text:004054F9↑r
.text:00405850                                         ; .text:loc_405520↑r ...
.text:00405854 dword_405854    dd 0                    ; DATA XREF: .text:loc_40552C↑r
.text:00405854                                         ; sub_405550:loc_40559D↑r
.text:00405858                 dd 0FFFFFFFFh
.text:0040585C dword_40585C    dd 69h dup(0)           ; DATA XREF: .data:off_406084↓o
.text:00405A00                 dd 180h dup(?)
.text:00405A00 _text           ends
.text:00405A00
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004E00
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_401660:loc_4018DC↑r
.data:00406010                                         ; sub_402CC0+3↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_402CC0+11↑r
.data:00406014                                         ; .text:00402D61↑r
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_402CC0+7D↑w
.data:00406018                                         ; .text:00402DCD↑w
.data:0040601C                 align 10h
.data:00406020 ; char *Buffer
.data:00406020 Buffer          dd offset aCopyrightC2005
.data:00406020                                         ; DATA XREF: sub_403250+DC↑r
.data:00406020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406024                 align 10h
.data:00406030 dword_406030    dd 1                    ; DATA XREF: sub_404BB0+22↑r
.data:00406030                                         ; sub_404BB0+65↑r ...
.data:00406034 dword_406034    dd 100h                 ; DATA XREF: sub_404BB0+3F↑o
.data:00406034                                         ; sub_404BB0+1A2↑r ...
.data:00406038 off_406038      dd offset unk_407080    ; DATA XREF: sub_404BB0+1AA↑r
.data:0040603C ; void *off_40603C
.data:0040603C off_40603C      dd offset dword_406034  ; DATA XREF: sub_404BB0+39↑r
.data:0040603C                                         ; sub_404BB0+60↑w ...
.data:00406040 ; int Code
.data:00406040 Code            dd 1                    ; DATA XREF: sub_4035D0+6D↑r
.data:00406040                                         ; sub_4035D0+9A↑r ...
.data:00406044                 align 10h
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_405550+9↑r
.data:00406080                                         ; sub_405550+1D↑w
.data:00406084 off_406084      dd offset dword_40585C  ; DATA XREF: sub_4054C0+6↑r
.data:00406084                                         ; sub_4054C0+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000270 (    624.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 byte_407000     db ?                    ; DATA XREF: sub_401660+67↑w
.bss:00407000                                         ; sub_401AD0+F1↑r ...
.bss:00407001                 align 10h
.bss:00407010 byte_407010     db ?                    ; DATA XREF: sub_401660+78↑w
.bss:00407010                                         ; sub_401660:loc_4018D0↑w ...
.bss:00407011                 align 10h
.bss:00407020 byte_407020     db ?                    ; DATA XREF: sub_401660+7F↑w
.bss:00407020                                         ; sub_401660:loc_401776↑w ...
.bss:00407021                 align 10h
.bss:00407030 byte_407030     db ?                    ; DATA XREF: sub_401660+86↑w
.bss:00407030                                         ; sub_401660+D5↑w ...
.bss:00407031                 align 10h
.bss:00407040 dword_407040    dd ?                    ; DATA XREF: sub_402CC0+9↑o
.bss:00407040                                         ; sub_402CC0+17↑w ...
.bss:00407044 dword_407044    dd ?                    ; DATA XREF: sub_402CC0+21↑w
.bss:00407044                                         ; .text:00402D79↑w
.bss:00407048 dword_407048    dd ?                    ; DATA XREF: sub_402CC0+77↑r
.bss:00407048                                         ; .text:00402DC7↑r
.bss:0040704C dword_40704C    dd ?                    ; DATA XREF: sub_402CC0+6B↑r
.bss:0040704C                                         ; .text:00402DBB↑r
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070 ; char *dword_407070
.bss:00407070 dword_407070    dd ?                    ; DATA XREF: .text:004035A4↑w
.bss:00407070                                         ; sub_4035D0+58↑r
.bss:00407074                 align 10h
.bss:00407080 unk_407080      db    ? ;               ; DATA XREF: sub_404BB0+100↑o
.bss:00407080                                         ; .data:off_406038↑o
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140                 db    ? ;
.bss:00407141                 db    ? ;
.bss:00407142                 db    ? ;
.bss:00407143                 db    ? ;
.bss:00407144                 db    ? ;
.bss:00407145                 db    ? ;
.bss:00407146                 db    ? ;
.bss:00407147                 db    ? ;
.bss:00407148                 db    ? ;
.bss:00407149                 db    ? ;
.bss:0040714A                 db    ? ;
.bss:0040714B                 db    ? ;
.bss:0040714C                 db    ? ;
.bss:0040714D                 db    ? ;
.bss:0040714E                 db    ? ;
.bss:0040714F                 db    ? ;
.bss:00407150                 db    ? ;
.bss:00407151                 db    ? ;
.bss:00407152                 db    ? ;
.bss:00407153                 db    ? ;
.bss:00407154                 db    ? ;
.bss:00407155                 db    ? ;
.bss:00407156                 db    ? ;
.bss:00407157                 db    ? ;
.bss:00407158                 db    ? ;
.bss:00407159                 db    ? ;
.bss:0040715A                 db    ? ;
.bss:0040715B                 db    ? ;
.bss:0040715C                 db    ? ;
.bss:0040715D                 db    ? ;
.bss:0040715E                 db    ? ;
.bss:0040715F                 db    ? ;
.bss:00407160                 db    ? ;
.bss:00407161                 db    ? ;
.bss:00407162                 db    ? ;
.bss:00407163                 db    ? ;
.bss:00407164                 db    ? ;
.bss:00407165                 db    ? ;
.bss:00407166                 db    ? ;
.bss:00407167                 db    ? ;
.bss:00407168                 db    ? ;
.bss:00407169                 db    ? ;
.bss:0040716A                 db    ? ;
.bss:0040716B                 db    ? ;
.bss:0040716C                 db    ? ;
.bss:0040716D                 db    ? ;
.bss:0040716E                 db    ? ;
.bss:0040716F                 db    ? ;
.bss:00407170                 db    ? ;
.bss:00407171                 db    ? ;
.bss:00407172                 db    ? ;
.bss:00407173                 db    ? ;
.bss:00407174                 db    ? ;
.bss:00407175                 db    ? ;
.bss:00407176                 db    ? ;
.bss:00407177                 db    ? ;
.bss:00407178                 db    ? ;
.bss:00407179                 db    ? ;
.bss:0040717A                 db    ? ;
.bss:0040717B                 db    ? ;
.bss:0040717C                 db    ? ;
.bss:0040717D                 db    ? ;
.bss:0040717E                 db    ? ;
.bss:0040717F                 db    ? ;
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: .text:loc_404541↑o
.bss:00407180                                         ; .text:loc_404560↑o ...
.bss:00407184 dword_407184    dd ?                    ; DATA XREF: .text:loc_4045E0↑o
.bss:00407184                                         ; .text:00404A68↑r ...
.bss:00407188 dword_407188    dd ?                    ; DATA XREF: .text:00404A62↑r
.bss:00407188                                         ; sub_404B10+2C↑r
.bss:0040718C dword_40718C    dd ?                    ; DATA XREF: .text:00404A56↑r
.bss:0040718C                                         ; sub_404B10+22↑r
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: .text:00404A72↑r
.bss:00407190                                         ; sub_404B10+36↑r
.bss:00407194 dword_407194    dd ?                    ; DATA XREF: .text:00404A82↑r
.bss:00407194                                         ; sub_404B10+4E↑r
.bss:00407198 dword_407198    dd ?                    ; DATA XREF: .text:00404A9F↑r
.bss:00407198                                         ; sub_404B10+62↑r
.bss:0040719C dword_40719C    dd ?                    ; DATA XREF: .text:00404A95↑r
.bss:0040719C                                         ; sub_404B10+70↑r
.bss:004071A0 dword_4071A0    dd ?                    ; DATA XREF: .text:00404A78↑r
.bss:004071A0                                         ; sub_404B10+7A↑r
.bss:004071A4                 align 10h
.bss:004071B0 ; char *Str1
.bss:004071B0 Str1            dd ?                    ; DATA XREF: sub_4052D4:loc_40530D↑w
.bss:004071B0                                         ; sub_4052D4:loc_405440↑r
.bss:004071B4                 align 10h
.bss:004071C0 dword_4071C0    dd ?                    ; DATA XREF: sub_4052D4+2D↑r
.bss:004071C0                                         ; sub_4052D4+3F↑w
.bss:004071C4                 align 10h
.bss:004071D0 dword_4071D0    dd ?                    ; DATA XREF: sub_401660+2E↑w
.bss:004071D0                                         ; sub_401660+F1↑r ...
.bss:004071D4                 db    ? ;
.bss:004071D5                 db    ? ;
.bss:004071D6                 db    ? ;
.bss:004071D7                 db    ? ;
.bss:004071D8                 db    ? ;
.bss:004071D9                 db    ? ;
.bss:004071DA                 db    ? ;
.bss:004071DB                 db    ? ;
.bss:004071DC                 db    ? ;
.bss:004071DD                 db    ? ;
.bss:004071DE                 db    ? ;
.bss:004071DF                 db    ? ;
.bss:004071E0                 db    ? ;
.bss:004071E1                 db    ? ;
.bss:004071E2                 db    ? ;
.bss:004071E3                 db    ? ;
.bss:004071E4                 db    ? ;
.bss:004071E5                 db    ? ;
.bss:004071E6                 db    ? ;
.bss:004071E7                 db    ? ;
.bss:004071E8                 db    ? ;
.bss:004071E9                 db    ? ;
.bss:004071EA                 db    ? ;
.bss:004071EB                 db    ? ;
.bss:004071EC                 db    ? ;
.bss:004071ED                 db    ? ;
.bss:004071EE                 db    ? ;
.bss:004071EF                 db    ? ;
.bss:004071F0 dword_4071F0    dd ?                    ; DATA XREF: sub_402CC0+71↑w
.bss:004071F0                                         ; .text:00402DC1↑w
.bss:004071F4                 align 10h
.bss:00407200 dword_407200    dd ?                    ; CODE XREF: sub_4052D4+63↑p
.bss:00407200                                         ; DATA XREF: sub_4051D0+1E↑r ...
.bss:00407204                 align 10h
.bss:00407210 dword_407210    dd ?                    ; DATA XREF: sub_4051D0+4E↑w
.bss:00407210                                         ; sub_4052D4+AB↑w
.bss:00407214                 align 40h
.bss:00407240 dword_407240    dd ?                    ; DATA XREF: sub_4052D4+13↑r
.bss:00407244                 align 1000h
.bss:00407244 _bss            ends
.bss:00407244
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 00000580 (   1408.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00005000
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408144 ;
.idata:00408144 ; Imports from libintl3.dll
.idata:00408144 ;
.idata:00408144                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408144                                         ; CODE XREF: sub_401660+48↑p
.idata:00408144                                         ; DATA XREF: sub_401660+48↑r ...
.idata:00408148                 extrn libintl_gettext:dword
.idata:00408148                                         ; CODE XREF: sub_401660+E5↑p
.idata:00408148                                         ; sub_401660+13B↑p ...
.idata:0040814C                 extrn libintl_textdomain:dword
.idata:0040814C                                         ; CODE XREF: sub_401660+55↑p
.idata:0040814C                                         ; DATA XREF: sub_401660+55↑r ...
.idata:00408150
.idata:00408158 ;
.idata:00408158 ; Imports from KERNEL32.dll
.idata:00408158 ;
.idata:00408158 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408158                 extrn __imp_ExitProcess:dword
.idata:00408158                                         ; DATA XREF: ExitProcess↑r
.idata:0040815C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040815C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040815C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408160
.idata:00408168 ;
.idata:00408168 ; Imports from MSVCP60.DLL
.idata:00408168 ;
.idata:00408168 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00408168                 extrn __imp_mbrtowc:dword
.idata:00408168                                         ; DATA XREF: mbrtowc↑r
.idata:0040816C
.idata:00408174 ;
.idata:00408174 ; Imports from msvcrt.dll
.idata:00408174 ;
.idata:00408174                 extrn __imp___getmainargs:dword
.idata:00408174                                         ; DATA XREF: __getmainargs↑r
.idata:00408178 ; int _mb_cur_max
.idata:00408178                 extrn __mb_cur_max:dword
.idata:00408178                                         ; DATA XREF: sub_403A70+7↑r
.idata:00408178                                         ; sub_403A70+5F3↑r
.idata:0040817C ; char ***(__cdecl *__p__environ)()
.idata:0040817C                 extrn __imp___p__environ:dword
.idata:0040817C                                         ; DATA XREF: __p__environ↑r
.idata:00408180 ; int *(__cdecl *__p__fmode)()
.idata:00408180                 extrn __imp___p__fmode:dword
.idata:00408180                                         ; DATA XREF: __p__fmode↑r
.idata:00408184 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00408184                 extrn __set_app_type:dword
.idata:00408184                                         ; CODE XREF: start+D↑p
.idata:00408184                                         ; .text:0040102D↑p
.idata:00408184                                         ; DATA XREF: ...
.idata:00408188 ; void (__cdecl *_cexit)()
.idata:00408188                 extrn __imp__cexit:dword
.idata:00408188                                         ; DATA XREF: _cexit↑r
.idata:0040818C ; int *(__cdecl *_errno)()
.idata:0040818C                 extrn __imp__errno:dword
.idata:0040818C                                         ; DATA XREF: _errno↑r
.idata:00408190 ; int (__cdecl *_filbuf)(FILE *File)
.idata:00408190                 extrn __imp__filbuf:dword
.idata:00408190                                         ; DATA XREF: _filbuf↑r
.idata:00408194 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00408194                 extrn __imp__flsbuf:dword
.idata:00408194                                         ; DATA XREF: _flsbuf↑r
.idata:00408198 ; FILE iob[]
.idata:00408198                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00408198                                         ; sub_401080+75↑r ...
.idata:0040819C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040819C                 extrn __imp__isctype:dword
.idata:0040819C                                         ; DATA XREF: _isctype↑r
.idata:004081A0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081A0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081A0                                         ; DATA XREF: .text:0040106C↑r
.idata:004081A4 ; const unsigned __int16 *pctype
.idata:004081A4                 extrn _pctype:dword     ; DATA XREF: sub_403A70:loc_404164↑r
.idata:004081A8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081A8                 extrn __imp__setmode:dword
.idata:004081A8                                         ; DATA XREF: _setmode↑r
.idata:004081AC ; void (__cdecl __noreturn *abort)()
.idata:004081AC                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081B0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081B0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081B0                                         ; DATA XREF: sub_401040+C↑r
.idata:004081B4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081B4                 extrn __imp_calloc:dword
.idata:004081B4                                         ; DATA XREF: calloc↑r
.idata:004081B8 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081B8                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081BC ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081BC                 extrn __imp_fclose:dword
.idata:004081BC                                         ; DATA XREF: fclose↑r
.idata:004081C0 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081C0                 extrn __imp_fflush:dword
.idata:004081C0                                         ; DATA XREF: fflush↑r
.idata:004081C4 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004081C4                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004081C8 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081C8                 extrn __imp_fprintf:dword
.idata:004081C8                                         ; DATA XREF: fprintf↑r
.idata:004081CC ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081CC                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081D0 ; void (__cdecl *free)(void *Block)
.idata:004081D0                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081D4 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:004081D4                 extrn __imp_fwrite:dword
.idata:004081D4                                         ; DATA XREF: fwrite↑r
.idata:004081D8 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081D8                 extrn __imp_getenv:dword
.idata:004081D8                                         ; DATA XREF: getenv↑r
.idata:004081DC ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081DC                 extrn __imp_iswctype:dword
.idata:004081DC                                         ; DATA XREF: iswctype↑r
.idata:004081E0 ; void *(__cdecl *malloc)(size_t Size)
.idata:004081E0                 extrn __imp_malloc:dword
.idata:004081E0                                         ; DATA XREF: malloc↑r
.idata:004081E4 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004081E4                 extrn __imp_memcpy:dword
.idata:004081E4                                         ; DATA XREF: memcpy↑r
.idata:004081E8 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004081E8                 extrn __imp_memset:dword
.idata:004081E8                                         ; DATA XREF: memset↑r
.idata:004081EC ; int (*printf)(const char *const Format, ...)
.idata:004081EC                 extrn __imp_printf:dword
.idata:004081EC                                         ; DATA XREF: printf↑r
.idata:004081F0 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004081F0                 extrn __imp_realloc:dword
.idata:004081F0                                         ; DATA XREF: realloc↑r
.idata:004081F4 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004081F4                 extrn __imp_setlocale:dword
.idata:004081F4                                         ; DATA XREF: setlocale↑r
.idata:004081F8 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004081F8                 extrn __imp_signal:dword
.idata:004081F8                                         ; DATA XREF: signal↑r
.idata:004081FC ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004081FC                 extrn __imp_strchr:dword
.idata:004081FC                                         ; DATA XREF: strchr↑r
.idata:00408200 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00408200                 extrn __imp_strcmp:dword
.idata:00408200                                         ; DATA XREF: strcmp↑r
.idata:00408204 ; int (__cdecl *strcoll)(const char *String1, const char *String2)
.idata:00408204                 extrn __imp_strcoll:dword
.idata:00408204                                         ; DATA XREF: strcoll↑r
.idata:00408208 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408208                 extrn __imp_strerror:dword
.idata:00408208                                         ; DATA XREF: strerror↑r
.idata:0040820C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040820C                 extrn __imp_strlen:dword
.idata:0040820C                                         ; DATA XREF: strlen↑r
.idata:00408210 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408210                 extrn __imp_strncmp:dword
.idata:00408210                                         ; DATA XREF: strncmp↑r
.idata:00408214 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408214                 extrn __imp_vfprintf:dword
.idata:00408214                                         ; DATA XREF: vfprintf↑r
.idata:00408218
.idata:00408218
.idata:00408218
.idata:00408218                 end start
