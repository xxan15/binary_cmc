.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : DA891CE97B6D83849C7C1984132E8CA185D6DF94B9F63401A802712F7ABC20FE
.text:00401000 ; Input MD5    : 50260961B72AB0608DECD6541F9C491C
.text:00401000 ; Input CRC32  : 45A0D68F
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/users.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A277 (Wed Apr 20 18:41:59 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00006A80 (  27264.)
.text:00401000 ; Section size in file          : 00006C00 (  27648.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401360+62↓p
.text:00401040                                         ; .text:004074B0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_407450
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_408000
.text:004010A2                 mov     edx, dword_4080A0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_408004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4080C0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4080C0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_407420
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_408000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_408004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401360
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_407450
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401360+1F↓o
.text:00401280                                         ; sub_401360+BB↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401360+39↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401360+41↓o
.text:004012C3                                         ; sub_401360+4E↓o
.text:004012CD aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401360+6F↓o
.text:004012DD aJosephArceneau db 'Joseph Arceneaux',0 ; DATA XREF: sub_401360+77↓o
.text:004012EE a530            db '5.3.0',0            ; DATA XREF: sub_401360+87↓o
.text:004012F4 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401360+8F↓o
.text:00401302 ; const FILE stru_401302
.text:00401302 stru_401302     FILE <72657375h, 73250073h, 74786500h, 6F206172h, 61726570h, \
.text:00401302                                         ; DATA XREF: sub_401360+97↓o
.text:00401302                                         ; sub_401360+139↓o ...
.text:00401302                       2520646Eh, 748D0073h, 72540026h>
.text:00401322                 db  79h ; y
.text:00401323                 db  20h
.text:00401324                 db  60h ; `
.text:00401325                 db  25h ; %
.text:00401326                 db  73h ; s
.text:00401327                 db  20h
.text:00401328                 db  2Dh ; -
.text:00401329                 db  2Dh ; -
.text:0040132A                 db  68h ; h
.text:0040132B                 db  65h ; e
.text:0040132C                 db  6Ch ; l
.text:0040132D                 db  70h ; p
.text:0040132E                 db  27h ; '
.text:0040132F                 db  20h
.text:00401330                 db  66h ; f
.text:00401331                 db  6Fh ; o
.text:00401332                 db  72h ; r
.text:00401333                 db  20h
.text:00401334                 db  6Dh ; m
.text:00401335                 db  6Fh ; o
.text:00401336                 db  72h ; r
.text:00401337                 db  65h ; e
.text:00401338                 db  20h
.text:00401339                 db  69h ; i
.text:0040133A                 db  6Eh ; n
.text:0040133B                 db  66h ; f
.text:0040133C                 db  6Fh ; o
.text:0040133D                 db  72h ; r
.text:0040133E                 db  6Dh ; m
.text:0040133F                 db  61h ; a
.text:00401340                 db  74h ; t
.text:00401341                 db  69h ; i
.text:00401342                 db  6Fh ; o
.text:00401343                 db  6Eh ; n
.text:00401344                 db  2Eh ; .
.text:00401345                 db  0Ah
.text:00401346                 db    0
.text:00401347 ; const char aVarRunUtmp[]
.text:00401347 aVarRunUtmp     db '/var/run/utmp',0    ; DATA XREF: sub_401360:loc_401524↓o
.text:00401347                                         ; sub_401360+201↓o ...
.text:00401355                 align 10h
.text:00401360
.text:00401360 ; =============== S U B R O U T I N E =======================================
.text:00401360
.text:00401360 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401360
.text:00401360 sub_401360      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401360
.text:00401360 Category        = dword ptr -48h
.text:00401360 Locale          = dword ptr -44h
.text:00401360 var_40          = dword ptr -40h
.text:00401360 var_3C          = byte ptr -3Ch
.text:00401360 var_38          = dword ptr -38h
.text:00401360 var_34          = dword ptr -34h
.text:00401360 var_30          = byte ptr -30h
.text:00401360 var_2C          = dword ptr -2Ch
.text:00401360 var_28          = dword ptr -28h
.text:00401360 Block           = dword ptr -18h
.text:00401360 var_14          = dword ptr -14h
.text:00401360 var_10          = dword ptr -10h
.text:00401360 var_C           = dword ptr -0Ch
.text:00401360 arg_0           = dword ptr  8
.text:00401360 arg_4           = dword ptr  0Ch
.text:00401360
.text:00401360                 push    ebp
.text:00401361                 xor     eax, eax
.text:00401363                 mov     ebp, esp
.text:00401365                 push    esi
.text:00401366                 push    ebx
.text:00401367                 sub     esp, 40h
.text:0040136A                 mov     esi, [ebp+arg_4]
.text:0040136D                 and     esp, 0FFFFFFF0h
.text:00401370                 mov     ebx, [ebp+arg_0]
.text:00401373                 call    __alloca
.text:00401378                 call    sub_4074F0
.text:0040137D                 mov     edx, [esi]
.text:0040137F                 mov     [esp+48h+Locale], offset Locale ; Locale
.text:00401387                 mov     [esp+48h+Category], 0 ; Category
.text:0040138E                 mov     ds:dword_409390, edx
.text:00401394                 call    setlocale
.text:00401399                 mov     [esp+48h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004013A1                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:004013A8                 call    ds:__imp_libintl_bindtextdomain
.text:004013AE                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:004013B5                 call    ds:libintl_textdomain
.text:004013BB                 mov     [esp+48h+Category], offset sub_402DB0 ; void (__cdecl *)()
.text:004013C2                 call    sub_401040
.text:004013C7                 mov     [esp+48h+var_28], 0
.text:004013CF                 mov     [esp+48h+var_2C], offset aDavidMackenzie ; "David MacKenzie"
.text:004013D7                 mov     dword ptr [esp+48h+var_30], offset aJosephArceneau ; "Joseph Arceneaux"
.text:004013DF                 mov     [esp+48h+var_34], offset sub_4016F0 ; int
.text:004013E7                 mov     [esp+48h+var_38], offset a530 ; "5.3.0"
.text:004013EF                 mov     dword ptr [esp+48h+var_3C], offset aGnuCoreutils ; "GNU coreutils"
.text:004013F7                 mov     [esp+48h+var_40], offset stru_401302 ; FILE *
.text:004013FF                 mov     [esp+48h+Locale], esi ; int
.text:00401403                 mov     [esp+48h+Category], ebx ; int
.text:00401406                 call    sub_402CC0
.text:0040140B                 mov     [esp+48h+var_38], 0 ; int
.text:00401413                 mov     dword ptr [esp+48h+var_3C], 0 ; int
.text:0040141B                 mov     [esp+48h+var_40], offset Locale ; char *
.text:00401423                 mov     [esp+48h+Locale], esi ; int
.text:00401427                 mov     [esp+48h+Category], ebx ; int
.text:0040142A                 call    sub_402B20
.text:0040142F                 inc     eax
.text:00401430                 jnz     loc_4014EC
.text:00401436                 mov     eax, dword_408010
.text:0040143B                 mov     edx, ebx
.text:0040143D                 sub     edx, eax
.text:0040143F                 jz      loc_401524
.text:00401445                 dec     edx
.text:00401446                 jnz     short loc_4014B5
.text:00401448                 mov     ebx, [esi+eax*4]
.text:0040144B                 lea     ecx, [ebp+Block]
.text:0040144E                 lea     esi, [ebp+var_14]
.text:00401451                 mov     [esp+48h+var_40], esi ; int
.text:00401455                 mov     [esp+48h+Locale], ecx ; int
.text:00401459                 mov     [esp+48h+Category], ebx ; char *
.text:0040145C                 call    sub_4019B0
.text:00401461                 test    eax, eax
.text:00401463                 jnz     short loc_401490
.text:00401465
.text:00401465 loc_401465:                             ; CODE XREF: sub_401360+153↓j
.text:00401465                 mov     ecx, [ebp+var_14]
.text:00401468                 mov     edx, [ebp+Block]
.text:0040146B                 mov     [esp+48h+Locale], ecx ; int
.text:0040146F                 mov     [esp+48h+Category], edx ; Block
.text:00401472                 call    sub_4017E0
.text:00401477                 mov     eax, [ebp+var_14]
.text:0040147A
.text:0040147A loc_40147A:                             ; CODE XREF: sub_401360+1F7↓j
.text:0040147A                 mov     [esp+48h+Category], eax ; Block
.text:0040147D                 call    free
.text:00401482                 mov     [esp+48h+Category], 0 ; Code
.text:00401489
.text:00401489 loc_401489:                             ; CODE XREF: sub_401360+1BF↓j
.text:00401489                 call    exit
.text:00401489 ; ---------------------------------------------------------------------------
.text:0040148E                 align 10h
.text:00401490
.text:00401490 loc_401490:                             ; CODE XREF: sub_401360+103↑j
.text:00401490                 call    _errno
.text:00401495                 mov     dword ptr [esp+48h+var_3C], ebx ; char
.text:00401499                 mov     [esp+48h+var_40], (offset stru_401302._cnt+2) ; char *
.text:004014A1                 mov     ebx, [eax]
.text:004014A3                 mov     [esp+48h+Category], 1 ; Code
.text:004014AA                 mov     [esp+48h+Locale], ebx ; ErrorMessage
.text:004014AE                 call    sub_404AB0
.text:004014B3                 jmp     short loc_401465
.text:004014B5 ; ---------------------------------------------------------------------------
.text:004014B5
.text:004014B5 loc_4014B5:                             ; CODE XREF: sub_401360+E6↑j
.text:004014B5                 mov     ebx, [esi+eax*4+4]
.text:004014B9                 mov     [esp+48h+Category], ebx ; char *
.text:004014BC                 call    sub_402AF0
.text:004014C1                 mov     [esp+48h+Category], (offset stru_401302._base+1)
.text:004014C8                 mov     esi, eax
.text:004014CA                 call    ds:libintl_gettext
.text:004014D0                 mov     dword ptr [esp+48h+var_3C], esi ; char
.text:004014D4                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:004014DC                 mov     [esp+48h+Category], 0 ; Code
.text:004014E3                 mov     [esp+48h+var_40], eax ; char *
.text:004014E7                 call    sub_404AB0
.text:004014EC
.text:004014EC loc_4014EC:                             ; CODE XREF: sub_401360+D0↑j
.text:004014EC                 mov     [esp+48h+Category], (offset stru_401302._tmpfname+2)
.text:004014F3                 call    ds:libintl_gettext
.text:004014F9                 mov     edx, ds:_iob
.text:004014FF                 mov     ecx, ds:dword_409390
.text:00401505                 add     edx, 40h ; '@'
.text:00401508                 mov     [esp+48h+var_40], ecx
.text:0040150C                 mov     [esp+48h+Locale], eax ; Format
.text:00401510                 mov     [esp+48h+Category], edx ; Stream
.text:00401513                 call    fprintf
.text:00401518                 mov     [esp+48h+Category], 1
.text:0040151F                 jmp     loc_401489
.text:00401524 ; ---------------------------------------------------------------------------
.text:00401524
.text:00401524 loc_401524:                             ; CODE XREF: sub_401360+DF↑j
.text:00401524                 mov     [esp+48h+Category], offset aVarRunUtmp ; "/var/run/utmp"
.text:0040152B                 lea     ecx, [ebp+var_C]
.text:0040152E                 lea     edx, [ebp+var_10]
.text:00401531                 mov     [esp+48h+var_40], ecx ; int
.text:00401535                 mov     [esp+48h+Locale], edx ; int
.text:00401539                 call    sub_4019B0
.text:0040153E                 test    eax, eax
.text:00401540                 jnz     short loc_40155C
.text:00401542
.text:00401542 loc_401542:                             ; CODE XREF: sub_401360+223↓j
.text:00401542                 mov     edx, [ebp+var_C]
.text:00401545                 mov     esi, [ebp+var_10]
.text:00401548                 mov     [esp+48h+Locale], edx ; int
.text:0040154C                 mov     [esp+48h+Category], esi ; Block
.text:0040154F                 call    sub_4017E0
.text:00401554                 mov     eax, [ebp+var_C]
.text:00401557                 jmp     loc_40147A
.text:0040155C ; ---------------------------------------------------------------------------
.text:0040155C
.text:0040155C loc_40155C:                             ; CODE XREF: sub_401360+1E0↑j
.text:0040155C                 call    _errno
.text:00401561                 mov     dword ptr [esp+48h+var_3C], offset aVarRunUtmp ; "/var/run/utmp"
.text:00401569                 mov     [esp+48h+var_40], (offset stru_401302._cnt+2) ; char *
.text:00401571                 mov     ebx, [eax]
.text:00401573                 mov     [esp+48h+Category], 1 ; Code
.text:0040157A                 mov     [esp+48h+Locale], ebx ; ErrorMessage
.text:0040157E                 call    sub_404AB0
.text:00401583                 jmp     short loc_401542
.text:00401583 sub_401360      endp
.text:00401583
.text:00401583 ; ---------------------------------------------------------------------------
.text:00401585                 align 20h
.text:004015A0 aUsageSOptionFi db 'Usage: %s [OPTION]... [ FILE ]',0Ah,0
.text:004015A0                                         ; DATA XREF: sub_4016F0:loc_401733↓o
.text:004015C0 aOutputWhoIsCur db 'Output who is currently logged in according to FILE.',0Ah
.text:004015C0                                         ; DATA XREF: sub_4016F0+62↓o
.text:004015C0                 db 'If FILE is not specified, use %s.  %s as FILE is common.',0Ah
.text:004015C0                 db 0Ah,0
.text:00401630 aVarLogWtmp     db '/var/log/wtmp',0    ; DATA XREF: sub_4016F0+6F↓o
.text:0040163E                 align 10h
.text:00401640 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401640                                         ; DATA XREF: sub_4016F0+87↓o
.text:0040166D                 align 20h
.text:00401680 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401680                                         ; DATA XREF: sub_4016F0+A9↓o
.text:004016B6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4016F0+CB↓o
.text:004016B6                 db 'Report bugs to <%s>.',0Ah,0
.text:004016CD aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004016CD                                         ; DATA XREF: sub_4016F0+D8↓o
.text:004016E3                 align 10h
.text:004016F0
.text:004016F0 ; =============== S U B R O U T I N E =======================================
.text:004016F0
.text:004016F0 ; Attributes: noreturn
.text:004016F0
.text:004016F0 ; void __cdecl __noreturn sub_4016F0(int Code)
.text:004016F0 sub_4016F0      proc near               ; DATA XREF: sub_401360+7F↑o
.text:004016F0
.text:004016F0 Stream          = dword ptr -1Ch
.text:004016F0 Format          = dword ptr -18h
.text:004016F0 var_14          = dword ptr -14h
.text:004016F0 var_4           = dword ptr -4
.text:004016F0 Code            = dword ptr  4
.text:004016F0
.text:004016F0                 sub     esp, 1Ch
.text:004016F3                 mov     [esp+1Ch+var_4], ebx
.text:004016F7                 mov     ebx, [esp+1Ch+Code]
.text:004016FB                 test    ebx, ebx
.text:004016FD                 jz      short loc_401733
.text:004016FF                 mov     [esp+1Ch+Stream], (offset stru_401302._tmpfname+2)
.text:00401706                 call    ds:libintl_gettext
.text:0040170C                 mov     edx, ds:_iob
.text:00401712                 mov     ecx, ds:dword_409390
.text:00401718                 add     edx, 40h ; '@'
.text:0040171B                 mov     [esp+1Ch+var_14], ecx
.text:0040171F                 mov     [esp+1Ch+Format], eax ; Format
.text:00401723                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401726                 call    fprintf
.text:0040172B
.text:0040172B loc_40172B:                             ; CODE XREF: sub_4016F0+E8↓j
.text:0040172B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040172E                 call    exit
.text:00401733 ; ---------------------------------------------------------------------------
.text:00401733
.text:00401733 loc_401733:                             ; CODE XREF: sub_4016F0+D↑j
.text:00401733                 mov     [esp+1Ch+Stream], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [ FILE ]\n"
.text:0040173A                 call    ds:libintl_gettext
.text:00401740                 mov     ecx, ds:dword_409390
.text:00401746                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401749                 mov     [esp+1Ch+Format], ecx
.text:0040174D                 call    printf
.text:00401752                 mov     [esp+1Ch+Stream], offset aOutputWhoIsCur ; "Output who is currently logged in accor"...
.text:00401759                 call    ds:libintl_gettext
.text:0040175F                 mov     [esp+1Ch+var_14], offset aVarLogWtmp ; "/var/log/wtmp"
.text:00401767                 mov     [esp+1Ch+Format], offset aVarRunUtmp ; "/var/run/utmp"
.text:0040176F                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401772                 call    printf
.text:00401777                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040177E                 call    ds:libintl_gettext
.text:00401784                 mov     ecx, ds:_iob
.text:0040178A                 add     ecx, 20h ; ' '
.text:0040178D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401791                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401794                 call    fputs
.text:00401799                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:004017A0                 call    ds:libintl_gettext
.text:004017A6                 mov     ecx, ds:_iob
.text:004017AC                 add     ecx, 20h ; ' '
.text:004017AF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004017B3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004017B6                 call    fputs
.text:004017BB                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004017C2                 call    ds:libintl_gettext
.text:004017C8                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004017D0                 mov     [esp+1Ch+Stream], eax ; Format
.text:004017D3                 call    printf
.text:004017D8                 jmp     loc_40172B
.text:004017D8 sub_4016F0      endp
.text:004017D8
.text:004017D8 ; ---------------------------------------------------------------------------
.text:004017DD                 align 10h
.text:004017E0
.text:004017E0 ; =============== S U B R O U T I N E =======================================
.text:004017E0
.text:004017E0
.text:004017E0 ; int __cdecl sub_4017E0(void *Block, int)
.text:004017E0 sub_4017E0      proc near               ; CODE XREF: sub_401360+112↑p
.text:004017E0                                         ; sub_401360+1EF↑p
.text:004017E0
.text:004017E0 Buffer          = dword ptr -2Ch
.text:004017E0 Stream          = dword ptr -28h
.text:004017E0 var_24          = dword ptr -24h
.text:004017E0 var_20          = dword ptr -20h
.text:004017E0 var_11          = byte ptr -11h
.text:004017E0 Block           = dword ptr  4
.text:004017E0 arg_4           = dword ptr  8
.text:004017E0
.text:004017E0                 push    ebp
.text:004017E1                 xor     ebp, ebp
.text:004017E3                 push    edi
.text:004017E4                 push    esi
.text:004017E5                 push    ebx
.text:004017E6                 sub     esp, 1Ch
.text:004017E9                 mov     ebx, [esp+2Ch+Block]
.text:004017ED                 mov     [esp+2Ch+Stream], 4
.text:004017F5                 mov     esi, [esp+2Ch+arg_4]
.text:004017F9                 mov     [esp+2Ch+Buffer], ebx
.text:004017FC                 dec     ebx
.text:004017FD                 call    sub_402E90
.text:00401802                 cmp     ebx, 0FFFFFFFFh
.text:00401805                 mov     edi, eax
.text:00401807                 jz      short loc_40182C
.text:00401809                 lea     esi, [esi+0]
.text:00401810
.text:00401810 loc_401810:                             ; CODE XREF: sub_4017E0+4A↓j
.text:00401810                 cmp     byte ptr [esi+2Ch], 0
.text:00401814                 jz      short loc_401820
.text:00401816                 cmp     word ptr [esi], 7
.text:0040181A                 jz      loc_4018F2
.text:00401820
.text:00401820 loc_401820:                             ; CODE XREF: sub_4017E0+34↑j
.text:00401820                                         ; sub_4017E0+11E↓j
.text:00401820                 dec     ebx
.text:00401821                 add     esi, 180h
.text:00401827                 cmp     ebx, 0FFFFFFFFh
.text:0040182A                 jnz     short loc_401810
.text:0040182C
.text:0040182C loc_40182C:                             ; CODE XREF: sub_4017E0+27↑j
.text:0040182C                 mov     [esp+2Ch+var_20], offset loc_401910 ; int
.text:00401834                 xor     ebx, ebx
.text:00401836                 mov     [esp+2Ch+var_24], 4 ; size_t
.text:0040183E                 mov     [esp+2Ch+Stream], ebp ; void *
.text:00401842                 mov     [esp+2Ch+Buffer], edi ; Block
.text:00401845                 call    sub_404F40
.text:0040184A                 cmp     ebx, ebp
.text:0040184C                 jnb     short loc_4018B4
.text:0040184E                 lea     esi, [ebp-1]
.text:00401851                 jmp     short loc_401860
.text:00401851 ; ---------------------------------------------------------------------------
.text:00401853                 align 10h
.text:00401860
.text:00401860 loc_401860:                             ; CODE XREF: sub_4017E0+71↑j
.text:00401860                                         ; sub_4017E0+CC↓j
.text:00401860                 mov     [esp+2Ch+var_11], 20h ; ' '
.text:00401865                 cmp     ebx, esi
.text:00401867                 jb      short loc_40186E
.text:00401869                 mov     [esp+2Ch+var_11], 0Ah
.text:0040186E
.text:0040186E loc_40186E:                             ; CODE XREF: sub_4017E0+87↑j
.text:0040186E                 mov     edx, ds:_iob
.text:00401874                 add     edx, 20h ; ' '
.text:00401877                 mov     [esp+2Ch+Stream], edx ; Stream
.text:0040187B                 mov     ecx, [edi+ebx*4]
.text:0040187E                 mov     [esp+2Ch+Buffer], ecx ; Buffer
.text:00401881                 call    fputs
.text:00401886                 mov     edx, ds:_iob
.text:0040188C                 mov     ecx, [edx+24h]
.text:0040188F                 dec     ecx
.text:00401890                 mov     [edx+24h], ecx
.text:00401893                 test    ecx, ecx
.text:00401895                 js      short loc_4018D6
.text:00401897                 movzx   ecx, [esp+2Ch+var_11]
.text:0040189C                 mov     eax, ds:_iob
.text:004018A1                 mov     edx, [eax+20h]
.text:004018A4                 mov     [edx], cl
.text:004018A6                 inc     dword ptr [eax+20h]
.text:004018A9
.text:004018A9 loc_4018A9:                             ; CODE XREF: sub_4017E0+110↓j
.text:004018A9                 inc     ebx
.text:004018AA                 cmp     ebx, ebp
.text:004018AC                 jb      short loc_401860
.text:004018AE                 xor     ebx, ebx
.text:004018B0                 cmp     ebx, ebp
.text:004018B2                 jb      short loc_4018C4
.text:004018B4
.text:004018B4 loc_4018B4:                             ; CODE XREF: sub_4017E0+6C↑j
.text:004018B4                                         ; sub_4017E0+F4↓j
.text:004018B4                 mov     [esp+2Ch+Block], edi ; Block
.text:004018B8                 add     esp, 1Ch
.text:004018BB                 pop     ebx
.text:004018BC                 pop     esi
.text:004018BD                 pop     edi
.text:004018BE                 pop     ebp
.text:004018BF                 jmp     free
.text:004018C4 ; ---------------------------------------------------------------------------
.text:004018C4
.text:004018C4 loc_4018C4:                             ; CODE XREF: sub_4017E0+D2↑j
.text:004018C4                                         ; sub_4017E0+F2↓j
.text:004018C4                 mov     esi, [edi+ebx*4]
.text:004018C7                 inc     ebx
.text:004018C8                 mov     [esp+2Ch+Buffer], esi ; Block
.text:004018CB                 call    free
.text:004018D0                 cmp     ebx, ebp
.text:004018D2                 jb      short loc_4018C4
.text:004018D4                 jmp     short loc_4018B4
.text:004018D6 ; ---------------------------------------------------------------------------
.text:004018D6
.text:004018D6 loc_4018D6:                             ; CODE XREF: sub_4017E0+B5↑j
.text:004018D6                 movsx   ecx, [esp+2Ch+var_11]
.text:004018DB                 mov     edx, ds:_iob
.text:004018E1                 add     edx, 20h ; ' '
.text:004018E4                 mov     [esp+2Ch+Stream], edx ; File
.text:004018E8                 mov     [esp+2Ch+Buffer], ecx ; Ch
.text:004018EB                 call    _flsbuf
.text:004018F0                 jmp     short loc_4018A9
.text:004018F2 ; ---------------------------------------------------------------------------
.text:004018F2
.text:004018F2 loc_4018F2:                             ; CODE XREF: sub_4017E0+3A↑j
.text:004018F2                 mov     [esp+2Ch+Buffer], esi
.text:004018F5                 call    sub_401940
.text:004018FA                 mov     [edi+ebp*4], eax
.text:004018FD                 inc     ebp
.text:004018FE                 jmp     loc_401820
.text:004018FE sub_4017E0      endp
.text:004018FE
.text:004018FE ; ---------------------------------------------------------------------------
.text:00401903                 align 10h
.text:00401910
.text:00401910 loc_401910:                             ; DATA XREF: sub_4017E0:loc_40182C↑o
.text:00401910                 mov     ecx, [esp+8]
.text:00401914                 mov     edx, [ecx]
.text:00401916                 mov     ecx, [esp+4]
.text:0040191A                 mov     [esp+8], edx
.text:0040191E                 mov     edx, [ecx]
.text:00401920                 mov     [esp+4], edx
.text:00401924                 jmp     strcmp
.text:00401924 ; ---------------------------------------------------------------------------
.text:00401929                 align 20h
.text:00401940
.text:00401940 ; =============== S U B R O U T I N E =======================================
.text:00401940
.text:00401940
.text:00401940 sub_401940      proc near               ; CODE XREF: sub_4017E0+115↑p
.text:00401940
.text:00401940 Destination     = dword ptr -1Ch
.text:00401940 Source          = dword ptr -18h
.text:00401940 Count           = dword ptr -14h
.text:00401940 var_4           = dword ptr -4
.text:00401940 arg_0           = dword ptr  4
.text:00401940
.text:00401940                 sub     esp, 1Ch
.text:00401943                 mov     [esp+1Ch+var_4], ebx
.text:00401947                 mov     [esp+1Ch+Destination], 21h ; '!' ; size_t
.text:0040194E                 call    sub_402ED0
.text:00401953                 mov     [esp+1Ch+Destination], eax ; Destination
.text:00401956                 mov     edx, [esp+1Ch+arg_0]
.text:0040195A                 mov     ebx, eax
.text:0040195C                 mov     [esp+1Ch+Count], 20h ; ' ' ; Count
.text:00401964                 add     edx, 2Ch ; ','
.text:00401967                 mov     [esp+1Ch+Source], edx ; Source
.text:0040196B                 call    strncpy
.text:00401970                 mov     byte ptr [ebx+20h], 0
.text:00401974                 mov     [esp+1Ch+Destination], ebx ; Str
.text:00401977                 call    strlen
.text:0040197C                 lea     eax, [eax+ebx]
.text:0040197F                 cmp     ebx, eax
.text:00401981                 jnb     short loc_401990
.text:00401983                 cmp     byte ptr [eax-1], 20h ; ' '
.text:00401987                 jz      short loc_4019A0
.text:00401989                 lea     esi, [esi+0]
.text:00401990
.text:00401990 loc_401990:                             ; CODE XREF: sub_401940+41↑j
.text:00401990                                         ; sub_401940+66↓j ...
.text:00401990                 mov     eax, ebx
.text:00401992                 mov     ebx, [esp+1Ch+var_4]
.text:00401996                 add     esp, 1Ch
.text:00401999                 retn
.text:00401999 ; ---------------------------------------------------------------------------
.text:0040199A                 align 10h
.text:004019A0
.text:004019A0 loc_4019A0:                             ; CODE XREF: sub_401940+47↑j
.text:004019A0                                         ; sub_401940+6E↓j
.text:004019A0                 dec     eax
.text:004019A1                 cmp     ebx, eax
.text:004019A3                 mov     byte ptr [eax], 0
.text:004019A6                 jnb     short loc_401990
.text:004019A8                 cmp     byte ptr [eax-1], 20h ; ' '
.text:004019AC                 jnz     short loc_401990
.text:004019AE                 jmp     short loc_4019A0
.text:004019AE sub_401940      endp
.text:004019AE
.text:004019B0
.text:004019B0 ; =============== S U B R O U T I N E =======================================
.text:004019B0
.text:004019B0
.text:004019B0 ; int __cdecl sub_4019B0(char *, int, int)
.text:004019B0 sub_4019B0      proc near               ; CODE XREF: sub_401360+FC↑p
.text:004019B0                                         ; sub_401360+1D9↑p
.text:004019B0
.text:004019B0 String          = dword ptr -2Ch
.text:004019B0 var_28          = dword ptr -28h
.text:004019B0 var_24          = dword ptr -24h
.text:004019B0 var_1C          = dword ptr -1Ch
.text:004019B0 var_18          = dword ptr -18h
.text:004019B0 var_14          = dword ptr -14h
.text:004019B0 arg_0           = dword ptr  4
.text:004019B0 arg_4           = dword ptr  8
.text:004019B0 arg_8           = dword ptr  0Ch
.text:004019B0
.text:004019B0                 push    ebp
.text:004019B1                 xor     ebp, ebp
.text:004019B3                 push    edi
.text:004019B4                 push    esi
.text:004019B5                 push    ebx
.text:004019B6                 sub     esp, 1Ch
.text:004019B9                 mov     [esp+2Ch+var_18], 4
.text:004019C1                 mov     [esp+2Ch+String], 600h ; size_t
.text:004019C8                 call    sub_402ED0
.text:004019CD                 mov     [esp+2Ch+var_1C], eax
.text:004019D1                 mov     edx, [esp+2Ch+arg_0]
.text:004019D5                 mov     [esp+2Ch+String], edx ; String
.text:004019D8                 call    sub_4050F0
.text:004019DD                 call    sub_4050E0
.text:004019E2                 mov     [esp+2Ch+var_14], 0
.text:004019EA                 lea     esi, [esi+0]
.text:004019F0
.text:004019F0 loc_4019F0:                             ; CODE XREF: sub_4019B0+9D↓j
.text:004019F0                 call    sub_4050D0
.text:004019F5                 test    eax, eax
.text:004019F7                 mov     ebx, eax
.text:004019F9                 jz      loc_401A7C
.text:004019FF                 mov     edx, [esp+2Ch+var_18]
.text:00401A03                 cmp     [esp+2Ch+var_14], edx
.text:00401A07                 jz      short loc_401A50
.text:00401A09
.text:00401A09 loc_401A09:                             ; CODE XREF: sub_4019B0+CA↓j
.text:00401A09                 inc     [esp+2Ch+var_14]
.text:00401A0D                 add     ebp, 180h
.text:00401A13                 mov     edi, [esp+2Ch+var_1C]
.text:00401A17                 mov     esi, ebx
.text:00401A19                 mov     eax, 180h
.text:00401A1E                 lea     edx, [edi+ebp]
.text:00401A21                 lea     edi, [edx-180h]
.text:00401A27                 test    edi, 4
.text:00401A2D                 jz      short loc_401A45
.text:00401A2F                 mov     ecx, [ebx]
.text:00401A31                 lea     edi, [edx-17Ch]
.text:00401A37                 mov     eax, 17Ch
.text:00401A3C                 lea     esi, [ebx+4]
.text:00401A3F                 mov     [edx-180h], ecx
.text:00401A45
.text:00401A45 loc_401A45:                             ; CODE XREF: sub_4019B0+7D↑j
.text:00401A45                 cld
.text:00401A46                 mov     ecx, eax
.text:00401A48                 shr     ecx, 2
.text:00401A4B                 rep movsd
.text:00401A4D                 jmp     short loc_4019F0
.text:00401A4D ; ---------------------------------------------------------------------------
.text:00401A4F                 align 10h
.text:00401A50
.text:00401A50 loc_401A50:                             ; CODE XREF: sub_4019B0+57↑j
.text:00401A50                 mov     [esp+2Ch+var_24], 300h ; int
.text:00401A58                 mov     esi, [esp+2Ch+var_14]
.text:00401A5C                 mov     ecx, [esp+2Ch+var_1C]
.text:00401A60                 mov     [esp+2Ch+var_28], esi ; int
.text:00401A64                 mov     [esp+2Ch+String], ecx ; void *
.text:00401A67                 call    sub_402F00
.text:00401A6C                 mov     [esp+2Ch+var_1C], eax
.text:00401A70                 mov     eax, [esp+2Ch+var_14]
.text:00401A74                 add     eax, eax
.text:00401A76                 mov     [esp+2Ch+var_18], eax
.text:00401A7A                 jmp     short loc_401A09
.text:00401A7C ; ---------------------------------------------------------------------------
.text:00401A7C
.text:00401A7C loc_401A7C:                             ; CODE XREF: sub_4019B0+49↑j
.text:00401A7C                 call    sub_4050C0
.text:00401A81                 mov     esi, [esp+2Ch+arg_4]
.text:00401A85                 mov     eax, [esp+2Ch+var_14]
.text:00401A89                 mov     ebx, [esp+2Ch+arg_8]
.text:00401A8D                 mov     ebp, [esp+2Ch+var_1C]
.text:00401A91                 mov     [esi], eax
.text:00401A93                 xor     eax, eax
.text:00401A95                 mov     [ebx], ebp
.text:00401A97                 add     esp, 1Ch
.text:00401A9A                 pop     ebx
.text:00401A9B                 pop     esi
.text:00401A9C                 pop     edi
.text:00401A9D                 pop     ebp
.text:00401A9E                 retn
.text:00401A9E sub_4019B0      endp
.text:00401A9E
.text:00401A9E ; ---------------------------------------------------------------------------
.text:00401A9F                 align 10h
.text:00401AA0 dword_401AA0    dd 90002D2Dh, 7 dup(90909090h)
.text:00401AA0                                         ; DATA XREF: sub_401CF0+E4↓o
.text:00401AC0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401AC0                                         ; DATA XREF: sub_401CF0+2FC↓o
.text:00401AED                 align 20h
.text:00401B00 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401B00                                         ; DATA XREF: sub_401CF0:loc_402052↓o
.text:00401B2D                 align 20h
.text:00401B40 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401B40                                         ; DATA XREF: sub_401CF0:loc_4020F0↓o
.text:00401B40                                         ; sub_401CF0:loc_4024B7↓o
.text:00401B66                 align 20h
.text:00401B80 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401B80                                         ; DATA XREF: sub_401CF0+48E↓o
.text:00401BA0 dword_401BA0    dd 90909000h, 7 dup(90909090h)
.text:00401BA0                                         ; DATA XREF: sub_401CF0:loc_4021C1↓o
.text:00401BC0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401BC0                                         ; DATA XREF: sub_401CF0:loc_4021DA↓o
.text:00401BE0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401BE0                                         ; DATA XREF: sub_401CF0:loc_4022BF↓o
.text:00401BE0                                         ; sub_401CF0:loc_4025EC↓o
.text:00401C07                 align 20h
.text:00401C20 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401C20                                         ; DATA XREF: sub_401CF0:loc_402433↓o
.text:00401C4E                 align 20h
.text:00401C60 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401C60                                         ; DATA XREF: sub_401CF0:loc_40251F↓o
.text:00401C81 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401C81                                         ; DATA XREF: sub_401CF0+93F↓o
.text:00401C9B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00401C9B                                         ; DATA XREF: sub_401CF0:loc_402667↓o
.text:00401CB5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401CB5                                         ; DATA XREF: sub_401CF0:loc_40268E↓o
.text:00401CD3 ; const char VarName[]
.text:00401CD3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401CF0:loc_402840↓o
.text:00401CE3                 align 10h
.text:00401CF0
.text:00401CF0 ; =============== S U B R O U T I N E =======================================
.text:00401CF0
.text:00401CF0
.text:00401CF0 ; int __cdecl sub_401CF0(int, int, char *Str, int, int, int, int, int)
.text:00401CF0 sub_401CF0      proc near               ; CODE XREF: sub_402880+5A↓p
.text:00401CF0                                         ; .text:0040296A↓p ...
.text:00401CF0
.text:00401CF0 Str1            = dword ptr -5Ch
.text:00401CF0 Str2            = dword ptr -58h
.text:00401CF0 MaxCount        = dword ptr -54h
.text:00401CF0 var_50          = dword ptr -50h
.text:00401CF0 var_4C          = dword ptr -4Ch
.text:00401CF0 var_3C          = dword ptr -3Ch
.text:00401CF0 var_38          = dword ptr -38h
.text:00401CF0 var_34          = dword ptr -34h
.text:00401CF0 var_30          = dword ptr -30h
.text:00401CF0 var_2C          = dword ptr -2Ch
.text:00401CF0 var_28          = dword ptr -28h
.text:00401CF0 var_24          = dword ptr -24h
.text:00401CF0 var_20          = dword ptr -20h
.text:00401CF0 var_1C          = dword ptr -1Ch
.text:00401CF0 var_18          = dword ptr -18h
.text:00401CF0 var_14          = dword ptr -14h
.text:00401CF0 arg_0           = dword ptr  4
.text:00401CF0 arg_4           = dword ptr  8
.text:00401CF0 Str             = dword ptr  0Ch
.text:00401CF0 arg_C           = dword ptr  10h
.text:00401CF0 arg_10          = dword ptr  14h
.text:00401CF0 arg_14          = dword ptr  18h
.text:00401CF0 arg_18          = dword ptr  1Ch
.text:00401CF0 arg_1C          = dword ptr  20h
.text:00401CF0
.text:00401CF0                 push    ebp
.text:00401CF1                 mov     eax, 0FFFFFFFFh
.text:00401CF6                 push    edi
.text:00401CF7                 push    esi
.text:00401CF8                 push    ebx
.text:00401CF9                 sub     esp, 4Ch
.text:00401CFC                 mov     esi, [esp+5Ch+Str]
.text:00401D00                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401D04                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401D07                 mov     ebx, [ebp+4]
.text:00401D0A                 setz    dl
.text:00401D0D                 movzx   ecx, dl
.text:00401D10                 dec     ecx
.text:00401D11                 and     ecx, ebx
.text:00401D13                 mov     [esp+5Ch+var_14], ecx
.text:00401D17                 mov     ecx, [esp+5Ch+arg_0]
.text:00401D1B                 test    ecx, ecx
.text:00401D1D                 jle     loc_401E47
.text:00401D23                 mov     dword ptr [ebp+0Ch], 0
.text:00401D2A                 mov     ebx, [ebp+0]
.text:00401D2D                 test    ebx, ebx
.text:00401D2F                 jz      loc_402860
.text:00401D35                 mov     edi, [ebp+10h]
.text:00401D38                 test    edi, edi
.text:00401D3A                 jnz     short loc_401D93
.text:00401D3C                 lea     esi, [esi+0]
.text:00401D40
.text:00401D40 loc_401D40:                             ; CODE XREF: sub_401CF0+B7C↓j
.text:00401D40                 mov     [ebp+24h], ebx
.text:00401D43                 mov     esi, [esp+5Ch+Str]
.text:00401D47                 mov     [ebp+20h], ebx
.text:00401D4A                 mov     ecx, [esp+5Ch+arg_18]
.text:00401D4E                 xor     ebx, ebx
.text:00401D50                 mov     dword ptr [ebp+14h], 0
.text:00401D57                 test    ecx, ecx
.text:00401D59                 jz      loc_402840
.text:00401D5F
.text:00401D5F loc_401D5F:                             ; CODE XREF: sub_401CF0+B64↓j
.text:00401D5F                 mov     ebx, 1
.text:00401D64
.text:00401D64 loc_401D64:                             ; CODE XREF: sub_401CF0+B5E↓j
.text:00401D64                 mov     [ebp+1Ch], ebx
.text:00401D67                 mov     ecx, [esp+5Ch+Str]
.text:00401D6B                 movzx   eax, byte ptr [ecx]
.text:00401D6E                 cmp     al, 2Dh ; '-'
.text:00401D70                 jz      loc_402830
.text:00401D76                 cmp     al, 2Bh ; '+'
.text:00401D78                 jz      loc_402819
.text:00401D7E                 xor     edx, edx
.text:00401D80                 test    ebx, ebx
.text:00401D82                 setz    dl
.text:00401D85                 mov     [ebp+18h], edx
.text:00401D88
.text:00401D88 loc_401D88:                             ; CODE XREF: sub_401CF0+B35↓j
.text:00401D88                 mov     [esp+5Ch+Str], esi
.text:00401D8C                 mov     dword ptr [ebp+10h], 1
.text:00401D93
.text:00401D93 loc_401D93:                             ; CODE XREF: sub_401CF0+4A↑j
.text:00401D93                 mov     eax, [ebp+14h]
.text:00401D96                 test    eax, eax
.text:00401D98                 jz      short loc_401DA3
.text:00401D9A                 cmp     byte ptr [eax], 0
.text:00401D9D                 jnz     loc_401E80
.text:00401DA3
.text:00401DA3 loc_401DA3:                             ; CODE XREF: sub_401CF0+A8↑j
.text:00401DA3                 mov     ebx, [ebp+0]
.text:00401DA6                 cmp     [ebp+24h], ebx
.text:00401DA9                 jle     short loc_401DAE
.text:00401DAB                 mov     [ebp+24h], ebx
.text:00401DAE
.text:00401DAE loc_401DAE:                             ; CODE XREF: sub_401CF0+B9↑j
.text:00401DAE                 cmp     [ebp+20h], ebx
.text:00401DB1                 jle     short loc_401DB6
.text:00401DB3                 mov     [ebp+20h], ebx
.text:00401DB6
.text:00401DB6 loc_401DB6:                             ; CODE XREF: sub_401CF0+C1↑j
.text:00401DB6                 cmp     dword ptr [ebp+18h], 1
.text:00401DBA                 jz      loc_402790
.text:00401DC0
.text:00401DC0 loc_401DC0:                             ; CODE XREF: sub_401CF0+B13↓j
.text:00401DC0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401DC4                 jz      loc_402774
.text:00401DCA                 cld
.text:00401DCB                 mov     ecx, [esp+5Ch+arg_4]
.text:00401DCF                 mov     edx, 3
.text:00401DD4                 mov     edi, offset dword_401AA0
.text:00401DD9                 mov     esi, [ecx+ebx*4]
.text:00401DDC                 mov     ecx, edx
.text:00401DDE                 repe cmpsb
.text:00401DE0                 jnz     short loc_401E1C
.text:00401DE2                 mov     edx, [ebp+24h]
.text:00401DE5                 lea     eax, [ebx+1]
.text:00401DE8                 cmp     [ebp+20h], edx
.text:00401DEB                 mov     [ebp+0], eax
.text:00401DEE                 jz      loc_402788
.text:00401DF4                 cmp     edx, eax
.text:00401DF6                 jz      short loc_401E10
.text:00401DF8                 mov     [esp+5Ch+Str2], ebp
.text:00401DFC                 mov     ebx, [esp+5Ch+arg_4]
.text:00401E00                 mov     [esp+5Ch+Str1], ebx
.text:00401E03                 call    sub_4029A0
.text:00401E08                 nop
.text:00401E09                 lea     esi, [esi+0]
.text:00401E10
.text:00401E10 loc_401E10:                             ; CODE XREF: sub_401CF0+106↑j
.text:00401E10                                         ; sub_401CF0+A9B↓j
.text:00401E10                 mov     eax, [esp+5Ch+arg_0]
.text:00401E14                 mov     ebx, eax
.text:00401E16                 mov     [ebp+24h], eax
.text:00401E19                 mov     [ebp+0], eax
.text:00401E1C
.text:00401E1C loc_401E1C:                             ; CODE XREF: sub_401CF0+F0↑j
.text:00401E1C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401E20                 jz      loc_402774
.text:00401E26                 mov     esi, [esp+5Ch+arg_4]
.text:00401E2A                 mov     eax, [esi+ebx*4]
.text:00401E2D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401E30                 jz      short loc_401E57
.text:00401E32
.text:00401E32 loc_401E32:                             ; CODE XREF: sub_401CF0+16D↓j
.text:00401E32                 mov     edx, [ebp+18h]
.text:00401E35                 test    edx, edx
.text:00401E37                 jz      short loc_401E50
.text:00401E39                 mov     [ebp+0Ch], eax
.text:00401E3C                 lea     edi, [ebx+1]
.text:00401E3F                 mov     eax, 1
.text:00401E44                 mov     [ebp+0], edi
.text:00401E47
.text:00401E47 loc_401E47:                             ; CODE XREF: sub_401CF0+2D↑j
.text:00401E47                                         ; sub_401CF0+165↓j ...
.text:00401E47                 add     esp, 4Ch
.text:00401E4A                 pop     ebx
.text:00401E4B                 pop     esi
.text:00401E4C                 pop     edi
.text:00401E4D                 pop     ebp
.text:00401E4E                 retn
.text:00401E4E ; ---------------------------------------------------------------------------
.text:00401E4F                 align 10h
.text:00401E50
.text:00401E50 loc_401E50:                             ; CODE XREF: sub_401CF0+147↑j
.text:00401E50                                         ; sub_401CF0+A8A↓j ...
.text:00401E50                 mov     eax, 0FFFFFFFFh
.text:00401E55                 jmp     short loc_401E47
.text:00401E57 ; ---------------------------------------------------------------------------
.text:00401E57
.text:00401E57 loc_401E57:                             ; CODE XREF: sub_401CF0+140↑j
.text:00401E57                 movzx   edx, byte ptr [eax+1]
.text:00401E5B                 test    dl, dl
.text:00401E5D                 jz      short loc_401E32
.text:00401E5F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401E63                 xor     ecx, ecx
.text:00401E65                 test    ebx, ebx
.text:00401E67                 jz      short loc_401E72
.text:00401E69                 cmp     dl, 2Dh ; '-'
.text:00401E6C                 jz      loc_40276A
.text:00401E72
.text:00401E72 loc_401E72:                             ; CODE XREF: sub_401CF0+177↑j
.text:00401E72                                         ; sub_401CF0+A7F↓j
.text:00401E72                 lea     esi, [ecx+eax+1]
.text:00401E76                 mov     [ebp+14h], esi
.text:00401E79                 lea     esi, [esi+0]
.text:00401E80
.text:00401E80 loc_401E80:                             ; CODE XREF: sub_401CF0+AD↑j
.text:00401E80                 mov     ecx, [esp+5Ch+arg_C]
.text:00401E84                 test    ecx, ecx
.text:00401E86                 jz      loc_402210
.text:00401E8C                 mov     edx, [ebp+0]
.text:00401E8F                 mov     edi, [esp+5Ch+arg_4]
.text:00401E93                 mov     eax, [edi+edx*4]
.text:00401E96                 movzx   edx, byte ptr [eax+1]
.text:00401E9A                 cmp     dl, 2Dh ; '-'
.text:00401E9D                 jz      short loc_401EB5
.text:00401E9F                 mov     ebx, [esp+5Ch+arg_14]
.text:00401EA3                 test    ebx, ebx
.text:00401EA5                 jz      loc_402210
.text:00401EAB                 cmp     byte ptr [eax+2], 0
.text:00401EAF                 jz      loc_40274A
.text:00401EB5
.text:00401EB5 loc_401EB5:                             ; CODE XREF: sub_401CF0+1AD↑j
.text:00401EB5                                         ; sub_401CF0+A75↓j
.text:00401EB5                 mov     [esp+5Ch+var_18], 0
.text:00401EBD                 mov     ecx, [ebp+14h]
.text:00401EC0                 mov     [esp+5Ch+var_1C], 0
.text:00401EC8                 mov     [esp+5Ch+var_20], 0
.text:00401ED0                 mov     edi, ecx
.text:00401ED2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401EDA                 movzx   eax, byte ptr [ecx]
.text:00401EDD                 test    al, al
.text:00401EDF                 jz      short loc_401EFC
.text:00401EE1                 cmp     al, 3Dh ; '='
.text:00401EE3                 jz      short loc_401EFC
.text:00401EE5                 lea     esi, [esi+0]
.text:00401EE9                 lea     edi, [edi+0]
.text:00401EF0
.text:00401EF0 loc_401EF0:                             ; CODE XREF: sub_401CF0+20A↓j
.text:00401EF0                 inc     edi
.text:00401EF1                 movzx   eax, byte ptr [edi]
.text:00401EF4                 test    al, al
.text:00401EF6                 jz      short loc_401EFC
.text:00401EF8                 cmp     al, 3Dh ; '='
.text:00401EFA                 jnz     short loc_401EF0
.text:00401EFC
.text:00401EFC loc_401EFC:                             ; CODE XREF: sub_401CF0+1EF↑j
.text:00401EFC                                         ; sub_401CF0+1F3↑j ...
.text:00401EFC                 mov     [esp+5Ch+var_28], 0
.text:00401F04                 mov     esi, [esp+5Ch+arg_C]
.text:00401F08                 mov     ebx, [esi]
.text:00401F0A                 test    ebx, ebx
.text:00401F0C                 mov     edx, ebx
.text:00401F0E                 jz      loc_402130
.text:00401F14                 lea     esi, [esi+0]
.text:00401F1A                 lea     edi, [edi+0]
.text:00401F20
.text:00401F20 loc_401F20:                             ; CODE XREF: sub_401CF0+25E↓j
.text:00401F20                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401F24                 mov     ebx, edi
.text:00401F26                 sub     ebx, ecx
.text:00401F28                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401F2C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401F2F                 call    strncmp
.text:00401F34                 test    eax, eax
.text:00401F36                 jz      loc_4026C6
.text:00401F3C
.text:00401F3C loc_401F3C:                             ; CODE XREF: sub_401CF0+A0F↓j
.text:00401F3C                                         ; sub_401CF0+A24↓j ...
.text:00401F3C                 inc     [esp+5Ch+var_28]
.text:00401F40                 add     esi, 10h
.text:00401F43                 mov     ecx, [esi]
.text:00401F45                 test    ecx, ecx
.text:00401F47                 mov     edx, ecx
.text:00401F49                 jz      short loc_401F50
.text:00401F4B                 mov     ecx, [ebp+14h]
.text:00401F4E                 jmp     short loc_401F20
.text:00401F50 ; ---------------------------------------------------------------------------
.text:00401F50
.text:00401F50 loc_401F50:                             ; CODE XREF: sub_401CF0+259↑j
.text:00401F50                                         ; sub_401CF0+A55↓j
.text:00401F50                 mov     esi, [esp+5Ch+var_20]
.text:00401F54                 test    esi, esi
.text:00401F56                 jz      short loc_401F64
.text:00401F58                 mov     edx, [esp+5Ch+var_1C]
.text:00401F5C                 test    edx, edx
.text:00401F5E                 jz      loc_402670
.text:00401F64
.text:00401F64 loc_401F64:                             ; CODE XREF: sub_401CF0+266↑j
.text:00401F64                 mov     eax, [esp+5Ch+var_18]
.text:00401F68                 test    eax, eax
.text:00401F6A                 jz      loc_402130
.text:00401F70                 mov     ecx, [ebp+0]
.text:00401F73                 lea     eax, [ecx+1]
.text:00401F76                 mov     [ebp+0], eax
.text:00401F79                 cmp     byte ptr [edi], 0
.text:00401F7C                 jz      loc_402090
.text:00401F82                 mov     ecx, [esp+5Ch+var_18]
.text:00401F86                 mov     esi, [ecx+4]
.text:00401F89                 test    esi, esi
.text:00401F8B                 jz      short loc_401FD6
.text:00401F8D                 lea     ebx, [edi+1]
.text:00401F90                 mov     [ebp+0Ch], ebx
.text:00401F93
.text:00401F93 loc_401F93:                             ; CODE XREF: sub_401CF0+3A8↓j
.text:00401F93                                         ; sub_401CF0+3C4↓j
.text:00401F93                 mov     ebx, [ebp+14h]
.text:00401F96                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401F99                 call    strlen
.text:00401F9E                 add     [ebp+14h], eax
.text:00401FA1                 mov     esi, [esp+5Ch+arg_10]
.text:00401FA5                 test    esi, esi
.text:00401FA7                 jz      short loc_401FB3
.text:00401FA9                 mov     ebp, [esp+5Ch+var_24]
.text:00401FAD                 mov     ecx, [esp+5Ch+arg_10]
.text:00401FB1                 mov     [ecx], ebp
.text:00401FB3
.text:00401FB3 loc_401FB3:                             ; CODE XREF: sub_401CF0+2B7↑j
.text:00401FB3                 mov     eax, [esp+5Ch+var_18]
.text:00401FB7                 mov     ecx, [eax+8]
.text:00401FBA                 test    ecx, ecx
.text:00401FBC                 jnz     short loc_401FCA
.text:00401FBE                 mov     ecx, [esp+5Ch+var_18]
.text:00401FC2
.text:00401FC2 loc_401FC2:                             ; CODE XREF: sub_401CF0+723↓j
.text:00401FC2                 mov     eax, [ecx+0Ch]
.text:00401FC5                 jmp     loc_401E47
.text:00401FCA ; ---------------------------------------------------------------------------
.text:00401FCA
.text:00401FCA loc_401FCA:                             ; CODE XREF: sub_401CF0+2CC↑j
.text:00401FCA                                         ; sub_401CF0+719↓j
.text:00401FCA                 mov     esi, [eax+0Ch]
.text:00401FCD                 xor     eax, eax
.text:00401FCF                 mov     [ecx], esi
.text:00401FD1                 jmp     loc_401E47
.text:00401FD6 ; ---------------------------------------------------------------------------
.text:00401FD6
.text:00401FD6 loc_401FD6:                             ; CODE XREF: sub_401CF0+29B↑j
.text:00401FD6                 mov     edi, [esp+5Ch+var_14]
.text:00401FDA                 test    edi, edi
.text:00401FDC                 jz      short loc_402030
.text:00401FDE                 mov     esi, [esp+5Ch+arg_4]
.text:00401FE2                 mov     edx, [esi+eax*4-4]
.text:00401FE6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401FEA                 jz      short loc_402052
.text:00401FEC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401FF3                 call    ds:libintl_gettext
.text:00401FF9                 mov     edx, [esp+5Ch+var_18]
.text:00401FFD                 mov     edi, [edx]
.text:00401FFF                 mov     [esp+5Ch+var_4C], edi
.text:00402003                 mov     ebx, [ebp+0]
.text:00402006                 mov     edi, [esp+5Ch+arg_4]
.text:0040200A                 mov     ecx, [edi+ebx*4-4]
.text:0040200E                 movsx   esi, byte ptr [ecx]
.text:00402011                 mov     ecx, ds:_iob
.text:00402017                 add     ecx, 40h ; '@'
.text:0040201A                 mov     [esp+5Ch+var_50], esi
.text:0040201E                 mov     ebx, [edi]
.text:00402020                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402024                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402027                 mov     [esp+5Ch+MaxCount], ebx
.text:0040202B                 call    fprintf
.text:00402030
.text:00402030 loc_402030:                             ; CODE XREF: sub_401CF0+2EC↑j
.text:00402030                                         ; sub_401CF0+398↓j
.text:00402030                 mov     ecx, [ebp+14h]
.text:00402033                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402036                 call    strlen
.text:0040203B                 add     [ebp+14h], eax
.text:0040203E                 mov     eax, [esp+5Ch+var_18]
.text:00402042                 mov     esi, [eax+0Ch]
.text:00402045                 mov     [ebp+8], esi
.text:00402048
.text:00402048 loc_402048:                             ; CODE XREF: sub_401CF0+4E5↓j
.text:00402048                                         ; sub_401CF0+73E↓j ...
.text:00402048                 mov     eax, 3Fh ; '?'
.text:0040204D                 jmp     loc_401E47
.text:00402052 ; ---------------------------------------------------------------------------
.text:00402052
.text:00402052 loc_402052:                             ; CODE XREF: sub_401CF0+2FA↑j
.text:00402052                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402059                 call    ds:libintl_gettext
.text:0040205F                 mov     edx, [esp+5Ch+var_18]
.text:00402063                 mov     edi, [esp+5Ch+arg_4]
.text:00402067                 mov     ecx, ds:_iob
.text:0040206D                 mov     esi, [edx]
.text:0040206F                 add     ecx, 40h ; '@'
.text:00402072                 mov     [esp+5Ch+var_50], esi
.text:00402076                 mov     ebx, [edi]
.text:00402078                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040207C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040207F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402083                 call    fprintf
.text:00402088                 jmp     short loc_402030
.text:00402088 ; ---------------------------------------------------------------------------
.text:0040208A                 align 10h
.text:00402090
.text:00402090 loc_402090:                             ; CODE XREF: sub_401CF0+28C↑j
.text:00402090                 mov     ebx, [esp+5Ch+var_18]
.text:00402094                 cmp     dword ptr [ebx+4], 1
.text:00402098                 jnz     loc_401F93
.text:0040209E                 cmp     eax, [esp+5Ch+arg_0]
.text:004020A2                 jge     short loc_4020B9
.text:004020A4                 mov     ebx, [esp+5Ch+arg_4]
.text:004020A8                 lea     edi, [ecx+2]
.text:004020AB                 mov     [ebp+0], edi
.text:004020AE                 mov     esi, [ebx+eax*4]
.text:004020B1                 mov     [ebp+0Ch], esi
.text:004020B4                 jmp     loc_401F93
.text:004020B9 ; ---------------------------------------------------------------------------
.text:004020B9
.text:004020B9 loc_4020B9:                             ; CODE XREF: sub_401CF0+3B2↑j
.text:004020B9                 mov     edx, [esp+5Ch+var_14]
.text:004020BD                 test    edx, edx
.text:004020BF                 jnz     short loc_4020F0
.text:004020C1
.text:004020C1 loc_4020C1:                             ; CODE XREF: sub_401CF0+437↓j
.text:004020C1                 mov     edx, [ebp+14h]
.text:004020C4                 mov     [esp+5Ch+Str1], edx ; Str
.text:004020C7                 call    strlen
.text:004020CC                 add     [ebp+14h], eax
.text:004020CF                 mov     eax, [esp+5Ch+var_18]
.text:004020D3                 mov     edi, [eax+0Ch]
.text:004020D6                 mov     [ebp+8], edi
.text:004020D9
.text:004020D9 loc_4020D9:                             ; CODE XREF: sub_401CF0+7C2↓j
.text:004020D9                 mov     ebp, [esp+5Ch+Str]
.text:004020DD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004020E1                 setnz   bl
.text:004020E4                 movzx   esi, bl
.text:004020E7                 lea     eax, [esi+esi*4+3Ah]
.text:004020EB                 jmp     loc_401E47
.text:004020F0 ; ---------------------------------------------------------------------------
.text:004020F0
.text:004020F0 loc_4020F0:                             ; CODE XREF: sub_401CF0+3CF↑j
.text:004020F0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004020F7                 call    ds:libintl_gettext
.text:004020FD                 mov     ecx, [ebp+0]
.text:00402100                 mov     esi, [esp+5Ch+arg_4]
.text:00402104                 mov     ebx, [esi+ecx*4-4]
.text:00402108                 mov     ecx, ds:_iob
.text:0040210E                 mov     [esp+5Ch+var_50], ebx
.text:00402112                 mov     edi, [esi]
.text:00402114                 add     ecx, 40h ; '@'
.text:00402117                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040211B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040211E                 mov     [esp+5Ch+MaxCount], edi
.text:00402122                 call    fprintf
.text:00402127                 jmp     short loc_4020C1
.text:00402127 ; ---------------------------------------------------------------------------
.text:00402129                 align 10h
.text:00402130
.text:00402130 loc_402130:                             ; CODE XREF: sub_401CF0+21E↑j
.text:00402130                                         ; sub_401CF0+27A↑j
.text:00402130                 mov     eax, [esp+5Ch+arg_14]
.text:00402134                 test    eax, eax
.text:00402136                 jz      short loc_402166
.text:00402138                 mov     ebx, [ebp+0]
.text:0040213B                 mov     esi, [esp+5Ch+arg_4]
.text:0040213F                 mov     edi, [esi+ebx*4]
.text:00402142                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402146                 jz      short loc_402169
.text:00402148                 mov     ecx, [ebp+14h]
.text:0040214B                 mov     edx, [esp+5Ch+Str]
.text:0040214F                 movsx   ebx, byte ptr [ecx]
.text:00402152                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402155                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402159                 call    strchr
.text:0040215E                 test    eax, eax
.text:00402160                 jnz     loc_402210
.text:00402166
.text:00402166 loc_402166:                             ; CODE XREF: sub_401CF0+446↑j
.text:00402166                 mov     ebx, [ebp+0]
.text:00402169
.text:00402169 loc_402169:                             ; CODE XREF: sub_401CF0+456↑j
.text:00402169                 mov     eax, [esp+5Ch+var_14]
.text:0040216D                 test    eax, eax
.text:0040216F                 jz      short loc_4021C1
.text:00402171                 mov     esi, [esp+5Ch+arg_4]
.text:00402175                 mov     edi, [esi+ebx*4]
.text:00402178                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040217C                 jz      short loc_4021DA
.text:0040217E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402185                 call    ds:libintl_gettext
.text:0040218B                 mov     edi, [ebp+14h]
.text:0040218E                 mov     [esp+5Ch+var_4C], edi
.text:00402192                 mov     ebx, [ebp+0]
.text:00402195                 mov     edi, [esp+5Ch+arg_4]
.text:00402199                 mov     esi, [edi+ebx*4]
.text:0040219C                 movsx   ecx, byte ptr [esi]
.text:0040219F                 mov     esi, ds:_iob
.text:004021A5                 add     esi, 40h ; '@'
.text:004021A8                 mov     [esp+5Ch+var_50], ecx
.text:004021AC                 mov     ebx, [edi]
.text:004021AE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004021B2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004021B5                 mov     [esp+5Ch+MaxCount], ebx
.text:004021B9                 call    fprintf
.text:004021BE
.text:004021BE loc_4021BE:                             ; CODE XREF: sub_401CF0+51D↓j
.text:004021BE                 mov     ebx, [ebp+0]
.text:004021C1
.text:004021C1 loc_4021C1:                             ; CODE XREF: sub_401CF0+47F↑j
.text:004021C1                 mov     dword ptr [ebp+14h], offset dword_401BA0
.text:004021C8                 lea     edx, [ebx+1]
.text:004021CB                 mov     [ebp+0], edx
.text:004021CE
.text:004021CE loc_4021CE:                             ; CODE XREF: sub_401CF0+999↓j
.text:004021CE                 mov     dword ptr [ebp+8], 0
.text:004021D5                 jmp     loc_402048
.text:004021DA ; ---------------------------------------------------------------------------
.text:004021DA
.text:004021DA loc_4021DA:                             ; CODE XREF: sub_401CF0+48C↑j
.text:004021DA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004021E1                 call    ds:libintl_gettext
.text:004021E7                 mov     ecx, [ebp+14h]
.text:004021EA                 mov     edi, [esp+5Ch+arg_4]
.text:004021EE                 mov     edx, ds:_iob
.text:004021F4                 mov     [esp+5Ch+var_50], ecx
.text:004021F8                 mov     ebx, [edi]
.text:004021FA                 add     edx, 40h ; '@'
.text:004021FD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402201                 mov     [esp+5Ch+MaxCount], ebx
.text:00402205                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402208                 call    fprintf
.text:0040220D                 jmp     short loc_4021BE
.text:0040220D ; ---------------------------------------------------------------------------
.text:0040220F                 align 10h
.text:00402210
.text:00402210 loc_402210:                             ; CODE XREF: sub_401CF0+196↑j
.text:00402210                                         ; sub_401CF0+1B5↑j ...
.text:00402210                 mov     esi, [ebp+14h]
.text:00402213                 movzx   ebx, byte ptr [esi]
.text:00402216                 inc     esi
.text:00402217                 mov     [ebp+14h], esi
.text:0040221A                 mov     ecx, [esp+5Ch+Str]
.text:0040221E                 movsx   esi, bl
.text:00402221                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402225                 mov     edi, esi
.text:00402227                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040222A                 call    strchr
.text:0040222F                 mov     ecx, [ebp+14h]
.text:00402232                 cmp     byte ptr [ecx], 0
.text:00402235                 jnz     short loc_40223A
.text:00402237                 inc     dword ptr [ebp+0]
.text:0040223A
.text:0040223A loc_40223A:                             ; CODE XREF: sub_401CF0+545↑j
.text:0040223A                 test    eax, eax
.text:0040223C                 jz      loc_402620
.text:00402242                 cmp     bl, 3Ah ; ':'
.text:00402245                 jz      loc_402620
.text:0040224B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040224E                 jz      loc_402306
.text:00402254                 movzx   edx, byte ptr [eax+1]
.text:00402258
.text:00402258 loc_402258:                             ; CODE XREF: sub_401CF0+61D↓j
.text:00402258                 cmp     dl, 3Ah ; ':'
.text:0040225B                 jz      short loc_402264
.text:0040225D
.text:0040225D loc_40225D:                             ; CODE XREF: sub_401CF0+590↓j
.text:0040225D                 mov     eax, esi
.text:0040225F                 jmp     loc_401E47
.text:00402264 ; ---------------------------------------------------------------------------
.text:00402264
.text:00402264 loc_402264:                             ; CODE XREF: sub_401CF0+56B↑j
.text:00402264                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402268                 jz      loc_4022F1
.text:0040226E                 cmp     byte ptr [ecx], 0
.text:00402271                 jz      short loc_402282
.text:00402273
.text:00402273 loc_402273:                             ; CODE XREF: sub_401CF0+604↓j
.text:00402273                 inc     dword ptr [ebp+0]
.text:00402276                 mov     [ebp+0Ch], ecx
.text:00402279
.text:00402279 loc_402279:                             ; CODE XREF: sub_401CF0+5AB↓j
.text:00402279                                         ; sub_401CF0+5C6↓j ...
.text:00402279                 mov     dword ptr [ebp+14h], 0
.text:00402280                 jmp     short loc_40225D
.text:00402282 ; ---------------------------------------------------------------------------
.text:00402282
.text:00402282 loc_402282:                             ; CODE XREF: sub_401CF0+581↑j
.text:00402282                 mov     ecx, [ebp+0]
.text:00402285                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402289                 jz      short loc_40229D
.text:0040228B                 mov     eax, [esp+5Ch+arg_4]
.text:0040228F                 lea     edx, [ecx+1]
.text:00402292                 mov     [ebp+0], edx
.text:00402295                 mov     ebx, [eax+ecx*4]
.text:00402298                 mov     [ebp+0Ch], ebx
.text:0040229B                 jmp     short loc_402279
.text:0040229D ; ---------------------------------------------------------------------------
.text:0040229D
.text:0040229D loc_40229D:                             ; CODE XREF: sub_401CF0+599↑j
.text:0040229D                 mov     ecx, [esp+5Ch+var_14]
.text:004022A1                 test    ecx, ecx
.text:004022A3                 jnz     short loc_4022BF
.text:004022A5
.text:004022A5 loc_4022A5:                             ; CODE XREF: sub_401CF0+5FF↓j
.text:004022A5                 mov     [ebp+8], edi
.text:004022A8                 mov     edi, [esp+5Ch+Str]
.text:004022AC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004022AF                 jz      short loc_4022B8
.text:004022B1                 mov     esi, 3Fh ; '?'
.text:004022B6                 jmp     short loc_402279
.text:004022B8 ; ---------------------------------------------------------------------------
.text:004022B8
.text:004022B8 loc_4022B8:                             ; CODE XREF: sub_401CF0+5BF↑j
.text:004022B8                 mov     esi, 3Ah ; ':'
.text:004022BD                 jmp     short loc_402279
.text:004022BF ; ---------------------------------------------------------------------------
.text:004022BF
.text:004022BF loc_4022BF:                             ; CODE XREF: sub_401CF0+5B3↑j
.text:004022BF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004022C6                 call    ds:libintl_gettext
.text:004022CC                 mov     [esp+5Ch+var_50], edi
.text:004022D0                 mov     ebx, [esp+5Ch+arg_4]
.text:004022D4                 mov     edx, ds:_iob
.text:004022DA                 mov     esi, [ebx]
.text:004022DC                 add     edx, 40h ; '@'
.text:004022DF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022E3                 mov     [esp+5Ch+MaxCount], esi
.text:004022E7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004022EA                 call    fprintf
.text:004022EF                 jmp     short loc_4022A5
.text:004022F1 ; ---------------------------------------------------------------------------
.text:004022F1
.text:004022F1 loc_4022F1:                             ; CODE XREF: sub_401CF0+578↑j
.text:004022F1                 cmp     byte ptr [ecx], 0
.text:004022F4                 jnz     loc_402273
.text:004022FA                 mov     dword ptr [ebp+0Ch], 0
.text:00402301                 jmp     loc_402279
.text:00402306 ; ---------------------------------------------------------------------------
.text:00402306
.text:00402306 loc_402306:                             ; CODE XREF: sub_401CF0+55E↑j
.text:00402306                 movzx   edx, byte ptr [eax+1]
.text:0040230A                 cmp     dl, 3Bh ; ';'
.text:0040230D                 jnz     loc_402258
.text:00402313                 mov     [esp+5Ch+var_2C], 0
.text:0040231B                 mov     [esp+5Ch+var_30], 0
.text:00402323                 mov     [esp+5Ch+var_34], 0
.text:0040232B                 mov     [esp+5Ch+var_38], 0
.text:00402333                 cmp     byte ptr [ecx], 0
.text:00402336                 jz      loc_4025AB
.text:0040233C                 inc     dword ptr [ebp+0]
.text:0040233F                 mov     [ebp+0Ch], ecx
.text:00402342
.text:00402342 loc_402342:                             ; CODE XREF: sub_401CF0+8D4↓j
.text:00402342                 mov     edi, [ebp+0Ch]
.text:00402345                 mov     [ebp+14h], edi
.text:00402348                 movzx   eax, byte ptr [edi]
.text:0040234B                 test    al, al
.text:0040234D                 jz      short loc_40235F
.text:0040234F                 cmp     al, 3Dh ; '='
.text:00402351                 jz      short loc_40235F
.text:00402353
.text:00402353 loc_402353:                             ; CODE XREF: sub_401CF0+66D↓j
.text:00402353                 inc     edi
.text:00402354                 movzx   eax, byte ptr [edi]
.text:00402357                 test    al, al
.text:00402359                 jz      short loc_40235F
.text:0040235B                 cmp     al, 3Dh ; '='
.text:0040235D                 jnz     short loc_402353
.text:0040235F
.text:0040235F loc_40235F:                             ; CODE XREF: sub_401CF0+65D↑j
.text:0040235F                                         ; sub_401CF0+661↑j ...
.text:0040235F                 mov     [esp+5Ch+var_3C], 0
.text:00402367                 mov     esi, [esp+5Ch+arg_C]
.text:0040236B                 mov     eax, [esi]
.text:0040236D                 test    eax, eax
.text:0040236F                 jz      loc_4024F0
.text:00402375                 mov     ecx, eax
.text:00402377
.text:00402377 loc_402377:                             ; CODE XREF: sub_401CF0+6B3↓j
.text:00402377                 mov     ebx, [ebp+14h]
.text:0040237A                 mov     eax, edi
.text:0040237C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040237F                 sub     eax, ebx
.text:00402381                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402385                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402389                 call    strncmp
.text:0040238E                 test    eax, eax
.text:00402390                 jz      loc_402557
.text:00402396
.text:00402396 loc_402396:                             ; CODE XREF: sub_401CF0+88C↓j
.text:00402396                                         ; sub_401CF0+89D↓j
.text:00402396                 inc     [esp+5Ch+var_3C]
.text:0040239A                 add     esi, 10h
.text:0040239D                 mov     edx, [esi]
.text:0040239F                 test    edx, edx
.text:004023A1                 mov     ecx, edx
.text:004023A3                 jnz     short loc_402377
.text:004023A5
.text:004023A5 loc_4023A5:                             ; CODE XREF: sub_401CF0+8B6↓j
.text:004023A5                 mov     esi, [esp+5Ch+var_34]
.text:004023A9                 test    esi, esi
.text:004023AB                 jz      short loc_4023B9
.text:004023AD                 mov     ebx, [esp+5Ch+var_30]
.text:004023B1                 test    ebx, ebx
.text:004023B3                 jz      loc_402501
.text:004023B9
.text:004023B9 loc_4023B9:                             ; CODE XREF: sub_401CF0+6BB↑j
.text:004023B9                 mov     esi, [esp+5Ch+var_2C]
.text:004023BD                 test    esi, esi
.text:004023BF                 jz      loc_4024F0
.text:004023C5                 cmp     byte ptr [edi], 0
.text:004023C8                 jz      loc_402470
.text:004023CE                 mov     ecx, [esp+5Ch+var_2C]
.text:004023D2                 mov     ebx, [ecx+4]
.text:004023D5                 test    ebx, ebx
.text:004023D7                 jz      short loc_402418
.text:004023D9                 lea     edx, [edi+1]
.text:004023DC                 mov     [ebp+0Ch], edx
.text:004023DF
.text:004023DF loc_4023DF:                             ; CODE XREF: sub_401CF0+788↓j
.text:004023DF                                         ; sub_401CF0+7A7↓j
.text:004023DF                 mov     edi, [ebp+14h]
.text:004023E2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004023E5                 call    strlen
.text:004023EA                 add     [ebp+14h], eax
.text:004023ED                 mov     eax, [esp+5Ch+arg_10]
.text:004023F1                 test    eax, eax
.text:004023F3                 jz      short loc_402400
.text:004023F5                 mov     edx, [esp+5Ch+var_38]
.text:004023F9                 mov     ebp, [esp+5Ch+arg_10]
.text:004023FD                 mov     [ebp+0], edx
.text:00402400
.text:00402400 loc_402400:                             ; CODE XREF: sub_401CF0+703↑j
.text:00402400                 mov     eax, [esp+5Ch+var_2C]
.text:00402404                 mov     ecx, [eax+8]
.text:00402407                 test    ecx, ecx
.text:00402409                 jnz     loc_401FCA
.text:0040240F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402413                 jmp     loc_401FC2
.text:00402418 ; ---------------------------------------------------------------------------
.text:00402418
.text:00402418 loc_402418:                             ; CODE XREF: sub_401CF0+6E7↑j
.text:00402418                 mov     eax, [esp+5Ch+var_14]
.text:0040241C                 test    eax, eax
.text:0040241E                 jnz     short loc_402433
.text:00402420
.text:00402420 loc_402420:                             ; CODE XREF: sub_401CF0+779↓j
.text:00402420                 mov     ecx, [ebp+14h]
.text:00402423                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402426                 call    strlen
.text:0040242B                 add     [ebp+14h], eax
.text:0040242E                 jmp     loc_402048
.text:00402433 ; ---------------------------------------------------------------------------
.text:00402433
.text:00402433 loc_402433:                             ; CODE XREF: sub_401CF0+72E↑j
.text:00402433                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040243A                 call    ds:libintl_gettext
.text:00402440                 mov     edx, [esp+5Ch+var_2C]
.text:00402444                 mov     ebx, [esp+5Ch+arg_4]
.text:00402448                 mov     edi, [edx]
.text:0040244A                 mov     [esp+5Ch+var_50], edi
.text:0040244E                 mov     edi, ds:_iob
.text:00402454                 mov     esi, [ebx]
.text:00402456                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040245A                 add     edi, 40h ; '@'
.text:0040245D                 mov     [esp+5Ch+MaxCount], esi
.text:00402461                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402464                 call    fprintf
.text:00402469                 jmp     short loc_402420
.text:00402469 ; ---------------------------------------------------------------------------
.text:0040246B                 align 10h
.text:00402470
.text:00402470 loc_402470:                             ; CODE XREF: sub_401CF0+6D8↑j
.text:00402470                 mov     esi, [esp+5Ch+var_2C]
.text:00402474                 cmp     dword ptr [esi+4], 1
.text:00402478                 jnz     loc_4023DF
.text:0040247E                 mov     ecx, [ebp+0]
.text:00402481                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402485                 jge     short loc_40249C
.text:00402487                 mov     eax, [esp+5Ch+arg_4]
.text:0040248B                 lea     ebx, [ecx+1]
.text:0040248E                 mov     [ebp+0], ebx
.text:00402491                 mov     edi, [eax+ecx*4]
.text:00402494                 mov     [ebp+0Ch], edi
.text:00402497                 jmp     loc_4023DF
.text:0040249C ; ---------------------------------------------------------------------------
.text:0040249C
.text:0040249C loc_40249C:                             ; CODE XREF: sub_401CF0+795↑j
.text:0040249C                 mov     edx, [esp+5Ch+var_14]
.text:004024A0                 test    edx, edx
.text:004024A2                 jnz     short loc_4024B7
.text:004024A4
.text:004024A4 loc_4024A4:                             ; CODE XREF: sub_401CF0+7FE↓j
.text:004024A4                 mov     edx, [ebp+14h]
.text:004024A7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004024AA                 call    strlen
.text:004024AF                 add     [ebp+14h], eax
.text:004024B2                 jmp     loc_4020D9
.text:004024B7 ; ---------------------------------------------------------------------------
.text:004024B7
.text:004024B7 loc_4024B7:                             ; CODE XREF: sub_401CF0+7B2↑j
.text:004024B7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004024BE                 call    ds:libintl_gettext
.text:004024C4                 mov     ecx, [ebp+0]
.text:004024C7                 mov     ebx, [esp+5Ch+arg_4]
.text:004024CB                 mov     edi, [ebx+ecx*4-4]
.text:004024CF                 mov     ecx, ds:_iob
.text:004024D5                 mov     [esp+5Ch+var_50], edi
.text:004024D9                 mov     esi, [ebx]
.text:004024DB                 add     ecx, 40h ; '@'
.text:004024DE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004024E2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004024E5                 mov     [esp+5Ch+MaxCount], esi
.text:004024E9                 call    fprintf
.text:004024EE                 jmp     short loc_4024A4
.text:004024F0 ; ---------------------------------------------------------------------------
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_401CF0+67F↑j
.text:004024F0                                         ; sub_401CF0+6CF↑j
.text:004024F0                 mov     dword ptr [ebp+14h], 0
.text:004024F7                 mov     eax, 57h ; 'W'
.text:004024FC                 jmp     loc_401E47
.text:00402501 ; ---------------------------------------------------------------------------
.text:00402501
.text:00402501 loc_402501:                             ; CODE XREF: sub_401CF0+6C3↑j
.text:00402501                 mov     edi, [esp+5Ch+var_14]
.text:00402505                 test    edi, edi
.text:00402507                 jnz     short loc_40251F
.text:00402509
.text:00402509 loc_402509:                             ; CODE XREF: sub_401CF0+865↓j
.text:00402509                 mov     edx, [ebp+14h]
.text:0040250C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040250F                 call    strlen
.text:00402514                 add     [ebp+14h], eax
.text:00402517                 inc     dword ptr [ebp+0]
.text:0040251A                 jmp     loc_402048
.text:0040251F ; ---------------------------------------------------------------------------
.text:0040251F
.text:0040251F loc_40251F:                             ; CODE XREF: sub_401CF0+817↑j
.text:0040251F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402526                 call    ds:libintl_gettext
.text:0040252C                 mov     ecx, [ebp+0]
.text:0040252F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402533                 mov     edi, [ebx+ecx*4]
.text:00402536                 mov     ecx, ds:_iob
.text:0040253C                 mov     [esp+5Ch+var_50], edi
.text:00402540                 mov     esi, [ebx]
.text:00402542                 add     ecx, 40h ; '@'
.text:00402545                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402549                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040254C                 mov     [esp+5Ch+MaxCount], esi
.text:00402550                 call    fprintf
.text:00402555                 jmp     short loc_402509
.text:00402557 ; ---------------------------------------------------------------------------
.text:00402557
.text:00402557 loc_402557:                             ; CODE XREF: sub_401CF0+6A0↑j
.text:00402557                 mov     edx, [ebp+14h]
.text:0040255A                 mov     ebx, edi
.text:0040255C                 mov     ecx, [esi]
.text:0040255E                 sub     ebx, edx
.text:00402560                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402563                 call    strlen
.text:00402568                 cmp     ebx, eax
.text:0040256A                 jz      short loc_402592
.text:0040256C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402570                 test    ebx, ebx
.text:00402572                 jz      short loc_402581
.text:00402574                 mov     [esp+5Ch+var_34], 1
.text:0040257C                 jmp     loc_402396
.text:00402581 ; ---------------------------------------------------------------------------
.text:00402581
.text:00402581 loc_402581:                             ; CODE XREF: sub_401CF0+882↑j
.text:00402581                 mov     [esp+5Ch+var_2C], esi
.text:00402585                 mov     ecx, [esp+5Ch+var_3C]
.text:00402589                 mov     [esp+5Ch+var_38], ecx
.text:0040258D                 jmp     loc_402396
.text:00402592 ; ---------------------------------------------------------------------------
.text:00402592
.text:00402592 loc_402592:                             ; CODE XREF: sub_401CF0+87A↑j
.text:00402592                 mov     [esp+5Ch+var_2C], esi
.text:00402596                 mov     eax, [esp+5Ch+var_3C]
.text:0040259A                 mov     [esp+5Ch+var_30], 1
.text:004025A2                 mov     [esp+5Ch+var_38], eax
.text:004025A6                 jmp     loc_4023A5
.text:004025AB ; ---------------------------------------------------------------------------
.text:004025AB
.text:004025AB loc_4025AB:                             ; CODE XREF: sub_401CF0+646↑j
.text:004025AB                 mov     edx, [ebp+0]
.text:004025AE                 cmp     edx, [esp+5Ch+arg_0]
.text:004025B2                 jz      short loc_4025C9
.text:004025B4                 mov     ebx, [esp+5Ch+arg_4]
.text:004025B8                 lea     esi, [edx+1]
.text:004025BB                 mov     [ebp+0], esi
.text:004025BE                 mov     edi, [ebx+edx*4]
.text:004025C1                 mov     [ebp+0Ch], edi
.text:004025C4                 jmp     loc_402342
.text:004025C9 ; ---------------------------------------------------------------------------
.text:004025C9
.text:004025C9 loc_4025C9:                             ; CODE XREF: sub_401CF0+8C2↑j
.text:004025C9                 mov     edi, [esp+5Ch+var_14]
.text:004025CD                 test    edi, edi
.text:004025CF                 jnz     short loc_4025EC
.text:004025D1
.text:004025D1 loc_4025D1:                             ; CODE XREF: sub_401CF0+92C↓j
.text:004025D1                 mov     [ebp+8], esi
.text:004025D4                 mov     ebp, [esp+5Ch+Str]
.text:004025D8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004025DC                 jz      short loc_4025E8
.text:004025DE                 mov     bl, 3Fh ; '?'
.text:004025E0
.text:004025E0 loc_4025E0:                             ; CODE XREF: sub_401CF0+8FA↓j
.text:004025E0                 movsx   eax, bl
.text:004025E3                 jmp     loc_401E47
.text:004025E8 ; ---------------------------------------------------------------------------
.text:004025E8
.text:004025E8 loc_4025E8:                             ; CODE XREF: sub_401CF0+8EC↑j
.text:004025E8                 mov     bl, 3Ah ; ':'
.text:004025EA                 jmp     short loc_4025E0
.text:004025EC ; ---------------------------------------------------------------------------
.text:004025EC
.text:004025EC loc_4025EC:                             ; CODE XREF: sub_401CF0+8DF↑j
.text:004025EC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004025F3                 call    ds:libintl_gettext
.text:004025F9                 mov     [esp+5Ch+var_50], esi
.text:004025FD                 mov     edx, [esp+5Ch+arg_4]
.text:00402601                 mov     ecx, ds:_iob
.text:00402607                 mov     ebx, [edx]
.text:00402609                 add     ecx, 40h ; '@'
.text:0040260C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402610                 mov     [esp+5Ch+MaxCount], ebx
.text:00402614                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402617                 call    fprintf
.text:0040261C                 jmp     short loc_4025D1
.text:0040261C ; ---------------------------------------------------------------------------
.text:0040261E                 align 10h
.text:00402620
.text:00402620 loc_402620:                             ; CODE XREF: sub_401CF0+54C↑j
.text:00402620                                         ; sub_401CF0+555↑j
.text:00402620                 mov     eax, [esp+5Ch+var_14]
.text:00402624                 test    eax, eax
.text:00402626                 jz      short loc_40265F
.text:00402628                 mov     ebx, [ebp+1Ch]
.text:0040262B                 test    ebx, ebx
.text:0040262D                 jz      short loc_402667
.text:0040262F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402636
.text:00402636 loc_402636:                             ; CODE XREF: sub_401CF0+97E↓j
.text:00402636                 call    ds:libintl_gettext
.text:0040263C                 mov     [esp+5Ch+var_50], esi
.text:00402640                 mov     ebx, [esp+5Ch+arg_4]
.text:00402644                 mov     edx, ds:_iob
.text:0040264A                 mov     esi, [ebx]
.text:0040264C                 add     edx, 40h ; '@'
.text:0040264F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402653                 mov     [esp+5Ch+MaxCount], esi
.text:00402657                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040265A                 call    fprintf
.text:0040265F
.text:0040265F loc_40265F:                             ; CODE XREF: sub_401CF0+936↑j
.text:0040265F                 mov     [ebp+8], edi
.text:00402662                 jmp     loc_402048
.text:00402667 ; ---------------------------------------------------------------------------
.text:00402667
.text:00402667 loc_402667:                             ; CODE XREF: sub_401CF0+93D↑j
.text:00402667                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040266E                 jmp     short loc_402636
.text:00402670 ; ---------------------------------------------------------------------------
.text:00402670
.text:00402670 loc_402670:                             ; CODE XREF: sub_401CF0+26E↑j
.text:00402670                 mov     edi, [esp+5Ch+var_14]
.text:00402674                 test    edi, edi
.text:00402676                 jnz     short loc_40268E
.text:00402678
.text:00402678 loc_402678:                             ; CODE XREF: sub_401CF0+9D4↓j
.text:00402678                 mov     edx, [ebp+14h]
.text:0040267B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040267E                 call    strlen
.text:00402683                 add     [ebp+14h], eax
.text:00402686                 inc     dword ptr [ebp+0]
.text:00402689                 jmp     loc_4021CE
.text:0040268E ; ---------------------------------------------------------------------------
.text:0040268E
.text:0040268E loc_40268E:                             ; CODE XREF: sub_401CF0+986↑j
.text:0040268E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402695                 call    ds:libintl_gettext
.text:0040269B                 mov     ebx, [ebp+0]
.text:0040269E                 mov     edi, [esp+5Ch+arg_4]
.text:004026A2                 mov     ecx, [edi+ebx*4]
.text:004026A5                 mov     ebx, ds:_iob
.text:004026AB                 mov     [esp+5Ch+var_50], ecx
.text:004026AF                 mov     esi, [edi]
.text:004026B1                 add     ebx, 40h ; '@'
.text:004026B4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004026B8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004026BB                 mov     [esp+5Ch+MaxCount], esi
.text:004026BF                 call    fprintf
.text:004026C4                 jmp     short loc_402678
.text:004026C6 ; ---------------------------------------------------------------------------
.text:004026C6
.text:004026C6 loc_4026C6:                             ; CODE XREF: sub_401CF0+246↑j
.text:004026C6                 mov     ecx, [ebp+14h]
.text:004026C9                 mov     ebx, edi
.text:004026CB                 mov     edx, [esi]
.text:004026CD                 sub     ebx, ecx
.text:004026CF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004026D2                 call    strlen
.text:004026D7                 cmp     ebx, eax
.text:004026D9                 jz      short loc_402731
.text:004026DB                 mov     ebx, [esp+5Ch+var_18]
.text:004026DF                 test    ebx, ebx
.text:004026E1                 jz      short loc_402720
.text:004026E3                 mov     edx, [esp+5Ch+arg_14]
.text:004026E7                 test    edx, edx
.text:004026E9                 jnz     short loc_4026F7
.text:004026EB                 mov     ecx, [esp+5Ch+var_18]
.text:004026EF                 mov     ebx, [esi+4]
.text:004026F2                 cmp     [ecx+4], ebx
.text:004026F5                 jz      short loc_402704
.text:004026F7
.text:004026F7 loc_4026F7:                             ; CODE XREF: sub_401CF0+9F9↑j
.text:004026F7                                         ; sub_401CF0+A1A↓j ...
.text:004026F7                 mov     [esp+5Ch+var_20], 1
.text:004026FF                 jmp     loc_401F3C
.text:00402704 ; ---------------------------------------------------------------------------
.text:00402704
.text:00402704 loc_402704:                             ; CODE XREF: sub_401CF0+A05↑j
.text:00402704                 mov     edx, [esi+8]
.text:00402707                 cmp     [ecx+8], edx
.text:0040270A                 jnz     short loc_4026F7
.text:0040270C                 mov     ebx, [esi+0Ch]
.text:0040270F                 cmp     [ecx+0Ch], ebx
.text:00402712                 jnz     short loc_4026F7
.text:00402714                 jmp     loc_401F3C
.text:00402714 ; ---------------------------------------------------------------------------
.text:00402719                 align 10h
.text:00402720
.text:00402720 loc_402720:                             ; CODE XREF: sub_401CF0+9F1↑j
.text:00402720                 mov     [esp+5Ch+var_18], esi
.text:00402724                 mov     eax, [esp+5Ch+var_28]
.text:00402728                 mov     [esp+5Ch+var_24], eax
.text:0040272C                 jmp     loc_401F3C
.text:00402731 ; ---------------------------------------------------------------------------
.text:00402731
.text:00402731 loc_402731:                             ; CODE XREF: sub_401CF0+9E9↑j
.text:00402731                 mov     [esp+5Ch+var_18], esi
.text:00402735                 mov     ecx, [esp+5Ch+var_28]
.text:00402739                 mov     [esp+5Ch+var_1C], 1
.text:00402741                 mov     [esp+5Ch+var_24], ecx
.text:00402745                 jmp     loc_401F50
.text:0040274A ; ---------------------------------------------------------------------------
.text:0040274A
.text:0040274A loc_40274A:                             ; CODE XREF: sub_401CF0+1BF↑j
.text:0040274A                 mov     eax, [esp+5Ch+Str]
.text:0040274E                 movsx   esi, dl
.text:00402751                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402755                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402758                 call    strchr
.text:0040275D                 test    eax, eax
.text:0040275F                 jnz     loc_402210
.text:00402765                 jmp     loc_401EB5
.text:0040276A ; ---------------------------------------------------------------------------
.text:0040276A
.text:0040276A loc_40276A:                             ; CODE XREF: sub_401CF0+17C↑j
.text:0040276A                 mov     ecx, 1
.text:0040276F                 jmp     loc_401E72
.text:00402774 ; ---------------------------------------------------------------------------
.text:00402774
.text:00402774 loc_402774:                             ; CODE XREF: sub_401CF0+D4↑j
.text:00402774                                         ; sub_401CF0+130↑j
.text:00402774                 mov     eax, [ebp+20h]
.text:00402777                 cmp     eax, [ebp+24h]
.text:0040277A                 jz      loc_401E50
.text:00402780                 mov     [ebp+0], eax
.text:00402783                 jmp     loc_401E50
.text:00402788 ; ---------------------------------------------------------------------------
.text:00402788
.text:00402788 loc_402788:                             ; CODE XREF: sub_401CF0+FE↑j
.text:00402788                 mov     [ebp+20h], eax
.text:0040278B                 jmp     loc_401E10
.text:00402790 ; ---------------------------------------------------------------------------
.text:00402790
.text:00402790 loc_402790:                             ; CODE XREF: sub_401CF0+CA↑j
.text:00402790                 mov     edx, [ebp+20h]
.text:00402793                 mov     eax, [ebp+24h]
.text:00402796                 cmp     edx, eax
.text:00402798                 jz      short loc_402810
.text:0040279A                 cmp     eax, ebx
.text:0040279C                 jz      short loc_4027B1
.text:0040279E                 mov     [esp+5Ch+Str2], ebp
.text:004027A2                 mov     ebx, [esp+5Ch+arg_4]
.text:004027A6                 mov     [esp+5Ch+Str1], ebx
.text:004027A9                 call    sub_4029A0
.text:004027AE                 mov     ebx, [ebp+0]
.text:004027B1
.text:004027B1 loc_4027B1:                             ; CODE XREF: sub_401CF0+AAC↑j
.text:004027B1                                         ; sub_401CF0+B22↓j ...
.text:004027B1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004027B5                 jge     short loc_402800
.text:004027B7                 mov     esi, [esp+5Ch+arg_4]
.text:004027BB                 mov     eax, [esi+ebx*4]
.text:004027BE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004027C1                 jz      short loc_402808
.text:004027C3                 lea     esi, [esi+0]
.text:004027C9                 lea     edi, [edi+0]
.text:004027D0
.text:004027D0 loc_4027D0:                             ; CODE XREF: sub_401CF0+AFC↓j
.text:004027D0                                         ; sub_401CF0+B1C↓j
.text:004027D0                 lea     eax, [ebx+1]
.text:004027D3                 mov     ebx, eax
.text:004027D5                 mov     [ebp+0], eax
.text:004027D8                 cmp     eax, [esp+5Ch+arg_0]
.text:004027DC                 jge     short loc_402800
.text:004027DE                 mov     edi, [esp+5Ch+arg_4]
.text:004027E2                 mov     edx, [edi+eax*4]
.text:004027E5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004027E8                 jz      short loc_4027F0
.text:004027EA
.text:004027EA loc_4027EA:                             ; CODE XREF: sub_401CF0+B04↓j
.text:004027EA                 mov     ebx, eax
.text:004027EC                 jmp     short loc_4027D0
.text:004027EC ; ---------------------------------------------------------------------------
.text:004027EE                 align 10h
.text:004027F0
.text:004027F0 loc_4027F0:                             ; CODE XREF: sub_401CF0+AF8↑j
.text:004027F0                 cmp     byte ptr [edx+1], 0
.text:004027F4                 jz      short loc_4027EA
.text:004027F6                 lea     esi, [esi+0]
.text:004027F9                 lea     edi, [edi+0]
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_401CF0+AC5↑j
.text:00402800                                         ; sub_401CF0+AEC↑j ...
.text:00402800                 mov     [ebp+24h], ebx
.text:00402803                 jmp     loc_401DC0
.text:00402808 ; ---------------------------------------------------------------------------
.text:00402808
.text:00402808 loc_402808:                             ; CODE XREF: sub_401CF0+AD1↑j
.text:00402808                 cmp     byte ptr [eax+1], 0
.text:0040280C                 jz      short loc_4027D0
.text:0040280E                 jmp     short loc_402800
.text:00402810 ; ---------------------------------------------------------------------------
.text:00402810
.text:00402810 loc_402810:                             ; CODE XREF: sub_401CF0+AA8↑j
.text:00402810                 cmp     edx, ebx
.text:00402812                 jz      short loc_4027B1
.text:00402814                 mov     [ebp+20h], ebx
.text:00402817                 jmp     short loc_4027B1
.text:00402819 ; ---------------------------------------------------------------------------
.text:00402819
.text:00402819 loc_402819:                             ; CODE XREF: sub_401CF0+88↑j
.text:00402819                 mov     dword ptr [ebp+18h], 0
.text:00402820                 mov     esi, [esp+5Ch+Str]
.text:00402824
.text:00402824 loc_402824:                             ; CODE XREF: sub_401CF0+B49↓j
.text:00402824                 inc     esi
.text:00402825                 jmp     loc_401D88
.text:00402825 ; ---------------------------------------------------------------------------
.text:0040282A                 align 10h
.text:00402830
.text:00402830 loc_402830:                             ; CODE XREF: sub_401CF0+80↑j
.text:00402830                 mov     dword ptr [ebp+18h], 2
.text:00402837                 mov     esi, ecx
.text:00402839                 jmp     short loc_402824
.text:00402839 ; ---------------------------------------------------------------------------
.text:0040283B                 align 10h
.text:00402840
.text:00402840 loc_402840:                             ; CODE XREF: sub_401CF0+69↑j
.text:00402840                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402847                 call    getenv
.text:0040284C                 test    eax, eax
.text:0040284E                 jz      loc_401D64
.text:00402854                 jmp     loc_401D5F
.text:00402854 ; ---------------------------------------------------------------------------
.text:00402859                 align 10h
.text:00402860
.text:00402860 loc_402860:                             ; CODE XREF: sub_401CF0+3F↑j
.text:00402860                 mov     dword ptr [ebp+0], 1
.text:00402867                 mov     ebx, 1
.text:0040286C                 jmp     loc_401D40
.text:0040286C sub_401CF0      endp
.text:0040286C
.text:00402871 ; ---------------------------------------------------------------------------
.text:00402871                 jmp     short sub_402880
.text:00402871 ; ---------------------------------------------------------------------------
.text:00402873                 align 10h
.text:00402880
.text:00402880 ; =============== S U B R O U T I N E =======================================
.text:00402880
.text:00402880
.text:00402880 ; int __cdecl sub_402880(int, int, char *, int, int, int, int)
.text:00402880 sub_402880      proc near               ; CODE XREF: .text:00402871↑j
.text:00402880                                         ; sub_402B20+3A↓p ...
.text:00402880
.text:00402880 var_2C          = dword ptr -2Ch
.text:00402880 var_28          = dword ptr -28h
.text:00402880 Str             = dword ptr -24h
.text:00402880 var_20          = dword ptr -20h
.text:00402880 var_1C          = dword ptr -1Ch
.text:00402880 var_18          = dword ptr -18h
.text:00402880 var_14          = dword ptr -14h
.text:00402880 var_10          = dword ptr -10h
.text:00402880 arg_0           = dword ptr  4
.text:00402880 arg_4           = dword ptr  8
.text:00402880 arg_8           = dword ptr  0Ch
.text:00402880 arg_C           = dword ptr  10h
.text:00402880 arg_10          = dword ptr  14h
.text:00402880 arg_14          = dword ptr  18h
.text:00402880 arg_18          = dword ptr  1Ch
.text:00402880
.text:00402880                 sub     esp, 2Ch
.text:00402883                 mov     edx, dword_408010
.text:00402889                 mov     [esp+2Ch+var_10], offset dword_409000 ; int
.text:00402891                 mov     ecx, dword_408014
.text:00402897                 mov     ds:dword_409000, edx
.text:0040289D                 mov     edx, [esp+2Ch+arg_18]
.text:004028A1                 mov     ds:dword_409004, ecx
.text:004028A7                 mov     ecx, [esp+2Ch+arg_14]
.text:004028AB                 mov     [esp+2Ch+var_14], edx ; int
.text:004028AF                 mov     edx, [esp+2Ch+arg_10]
.text:004028B3                 mov     [esp+2Ch+var_18], ecx ; int
.text:004028B7                 mov     ecx, [esp+2Ch+arg_C]
.text:004028BB                 mov     [esp+2Ch+var_1C], edx ; int
.text:004028BF                 mov     edx, [esp+2Ch+arg_8]
.text:004028C3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004028C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004028CB                 mov     [esp+2Ch+Str], edx ; Str
.text:004028CF                 mov     edx, [esp+2Ch+arg_0]
.text:004028D3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004028D7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004028DA                 call    sub_401CF0
.text:004028DF                 mov     ecx, ds:dword_409000
.text:004028E5                 mov     dword_408010, ecx
.text:004028EB                 mov     ecx, ds:dword_40900C
.text:004028F1                 mov     ds:dword_4093B0, ecx
.text:004028F7                 mov     ecx, ds:dword_409008
.text:004028FD                 mov     dword_408018, ecx
.text:00402903                 add     esp, 2Ch
.text:00402906                 retn
.text:00402906 sub_402880      endp
.text:00402906
.text:00402906 ; ---------------------------------------------------------------------------
.text:00402907                 align 10h
.text:00402910                 sub     esp, 2Ch
.text:00402913                 mov     edx, dword_408010
.text:00402919                 mov     dword ptr [esp+1Ch], offset dword_409000
.text:00402921                 mov     ecx, dword_408014
.text:00402927                 mov     dword ptr [esp+18h], 1
.text:0040292F                 mov     ds:dword_409000, edx
.text:00402935                 mov     edx, [esp+38h]
.text:00402939                 mov     ds:dword_409004, ecx
.text:0040293F                 mov     ecx, [esp+34h]
.text:00402943                 mov     [esp+8], edx
.text:00402947                 mov     edx, [esp+30h]
.text:0040294B                 mov     [esp+4], ecx
.text:0040294F                 mov     dword ptr [esp+14h], 0
.text:00402957                 mov     dword ptr [esp+10h], 0
.text:0040295F                 mov     dword ptr [esp+0Ch], 0
.text:00402967                 mov     [esp], edx
.text:0040296A                 call    sub_401CF0
.text:0040296F                 mov     ecx, ds:dword_409000
.text:00402975                 mov     dword_408010, ecx
.text:0040297B                 mov     ecx, ds:dword_40900C
.text:00402981                 mov     ds:dword_4093B0, ecx
.text:00402987                 mov     ecx, ds:dword_409008
.text:0040298D                 mov     dword_408018, ecx
.text:00402993                 add     esp, 2Ch
.text:00402996                 retn
.text:00402996 ; ---------------------------------------------------------------------------
.text:00402997                 align 10h
.text:004029A0
.text:004029A0 ; =============== S U B R O U T I N E =======================================
.text:004029A0
.text:004029A0
.text:004029A0 sub_4029A0      proc near               ; CODE XREF: sub_401CF0+113↑p
.text:004029A0                                         ; sub_401CF0+AB9↑p
.text:004029A0
.text:004029A0 var_2C          = dword ptr -2Ch
.text:004029A0 var_28          = dword ptr -28h
.text:004029A0 var_24          = dword ptr -24h
.text:004029A0 var_20          = dword ptr -20h
.text:004029A0 var_1C          = dword ptr -1Ch
.text:004029A0 var_18          = dword ptr -18h
.text:004029A0 var_14          = dword ptr -14h
.text:004029A0 arg_0           = dword ptr  4
.text:004029A0 arg_4           = dword ptr  8
.text:004029A0
.text:004029A0                 push    ebp
.text:004029A1                 push    edi
.text:004029A2                 push    esi
.text:004029A3                 push    ebx
.text:004029A4                 sub     esp, 1Ch
.text:004029A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004029AB                 mov     eax, [esp+2Ch+arg_4]
.text:004029AF                 mov     ebx, [esp+2Ch+arg_4]
.text:004029B3                 mov     edx, [ecx+20h]
.text:004029B6                 mov     edi, [esp+2Ch+arg_0]
.text:004029BA                 mov     ecx, [ebx]
.text:004029BC                 mov     [esp+2Ch+var_2C], edx
.text:004029BF                 mov     [esp+2Ch+var_14], edx
.text:004029C3                 mov     edx, [eax+24h]
.text:004029C6                 mov     [esp+2Ch+var_28], ecx
.text:004029CA                 mov     [esp+2Ch+var_1C], ecx
.text:004029CE                 cmp     ecx, edx
.text:004029D0                 mov     [esp+2Ch+var_18], edx
.text:004029D4                 jle     short loc_402A50
.text:004029D6                 mov     esi, [esp+2Ch+var_2C]
.text:004029D9                 cmp     edx, esi
.text:004029DB                 jle     short loc_402A50
.text:004029DD                 lea     esi, [esi+0]
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_4029A0+A1↓j
.text:004029E0                 mov     ebx, [esp+2Ch+var_1C]
.text:004029E4                 mov     edx, [esp+2Ch+var_18]
.text:004029E8                 mov     ebp, [esp+2Ch+var_18]
.text:004029EC                 mov     eax, [esp+2Ch+var_14]
.text:004029F0                 sub     ebx, edx
.text:004029F2                 mov     [esp+2Ch+var_20], ebx
.text:004029F6                 sub     ebp, eax
.text:004029F8                 cmp     ebx, ebp
.text:004029FA                 jle     short loc_402A75
.text:004029FC                 xor     esi, esi
.text:004029FE                 cmp     esi, ebp
.text:00402A00                 jge     short loc_402A2D
.text:00402A02                 mov     ecx, [esp+2Ch+var_1C]
.text:00402A06                 sub     ecx, ebp
.text:00402A08                 mov     [esp+2Ch+var_24], ecx
.text:00402A0C                 lea     esi, [esi+0]
.text:00402A10
.text:00402A10 loc_402A10:                             ; CODE XREF: sub_4029A0+8B↓j
.text:00402A10                 mov     ecx, [esp+2Ch+var_14]
.text:00402A14                 mov     edx, [esp+2Ch+var_24]
.text:00402A18                 add     ecx, esi
.text:00402A1A                 add     edx, esi
.text:00402A1C                 mov     ebx, [edi+ecx*4]
.text:00402A1F                 mov     eax, [edi+edx*4]
.text:00402A22                 inc     esi
.text:00402A23                 cmp     esi, ebp
.text:00402A25                 mov     [edi+ecx*4], eax
.text:00402A28                 mov     [edi+edx*4], ebx
.text:00402A2B                 jl      short loc_402A10
.text:00402A2D
.text:00402A2D loc_402A2D:                             ; CODE XREF: sub_4029A0+60↑j
.text:00402A2D                 sub     [esp+2Ch+var_1C], ebp
.text:00402A31
.text:00402A31 loc_402A31:                             ; CODE XREF: sub_4029A0+107↓j
.text:00402A31                 mov     eax, [esp+2Ch+var_18]
.text:00402A35                 cmp     [esp+2Ch+var_1C], eax
.text:00402A39                 jle     short loc_402A50
.text:00402A3B                 mov     ebp, [esp+2Ch+var_14]
.text:00402A3F                 cmp     eax, ebp
.text:00402A41                 jg      short loc_4029E0
.text:00402A43                 lea     esi, [esi+0]
.text:00402A49                 lea     edi, [edi+0]
.text:00402A50
.text:00402A50 loc_402A50:                             ; CODE XREF: sub_4029A0+34↑j
.text:00402A50                                         ; sub_4029A0+3B↑j ...
.text:00402A50                 mov     esi, [esp+2Ch+var_28]
.text:00402A54                 mov     ecx, [esp+2Ch+var_18]
.text:00402A58                 mov     eax, [esp+2Ch+var_2C]
.text:00402A5B                 mov     edi, [esp+2Ch+arg_4]
.text:00402A5F                 mov     edx, [esp+2Ch+var_28]
.text:00402A63                 sub     esi, ecx
.text:00402A65                 add     esi, eax
.text:00402A67                 mov     [edi+20h], esi
.text:00402A6A                 mov     [edi+24h], edx
.text:00402A6D                 add     esp, 1Ch
.text:00402A70                 pop     ebx
.text:00402A71                 pop     esi
.text:00402A72                 pop     edi
.text:00402A73                 pop     ebp
.text:00402A74                 retn
.text:00402A75 ; ---------------------------------------------------------------------------
.text:00402A75
.text:00402A75 loc_402A75:                             ; CODE XREF: sub_4029A0+5A↑j
.text:00402A75                 xor     esi, esi
.text:00402A77                 cmp     esi, [esp+2Ch+var_20]
.text:00402A7B                 jge     short loc_402A9F
.text:00402A7D                 lea     esi, [esi+0]
.text:00402A80
.text:00402A80 loc_402A80:                             ; CODE XREF: sub_4029A0+FD↓j
.text:00402A80                 mov     ebx, [esp+2Ch+var_14]
.text:00402A84                 mov     ebp, [esp+2Ch+var_18]
.text:00402A88                 add     ebx, esi
.text:00402A8A                 add     ebp, esi
.text:00402A8C                 mov     edx, [edi+ebx*4]
.text:00402A8F                 inc     esi
.text:00402A90                 cmp     esi, [esp+2Ch+var_20]
.text:00402A94                 mov     ecx, [edi+ebp*4]
.text:00402A97                 mov     [edi+ebx*4], ecx
.text:00402A9A                 mov     [edi+ebp*4], edx
.text:00402A9D                 jl      short loc_402A80
.text:00402A9F
.text:00402A9F loc_402A9F:                             ; CODE XREF: sub_4029A0+DB↑j
.text:00402A9F                 mov     esi, [esp+2Ch+var_20]
.text:00402AA3                 add     [esp+2Ch+var_14], esi
.text:00402AA7                 jmp     short loc_402A31
.text:00402AA7 sub_4029A0      endp
.text:00402AA7
.text:00402AA7 ; ---------------------------------------------------------------------------
.text:00402AA9                 align 20h
.text:00402AC0                 sub     esp, 0Ch
.text:00402AC3                 mov     edx, [esp+14h]
.text:00402AC7                 mov     dword ptr [esp+4], 5
.text:00402ACF                 mov     [esp+8], edx
.text:00402AD3                 mov     edx, [esp+10h]
.text:00402AD7                 mov     [esp], edx
.text:00402ADA                 call    sub_403F20
.text:00402ADF                 add     esp, 0Ch
.text:00402AE2                 retn
.text:00402AE2 ; ---------------------------------------------------------------------------
.text:00402AE3                 align 10h
.text:00402AF0
.text:00402AF0 ; =============== S U B R O U T I N E =======================================
.text:00402AF0
.text:00402AF0
.text:00402AF0 ; int __cdecl sub_402AF0(char *)
.text:00402AF0 sub_402AF0      proc near               ; CODE XREF: sub_401360+15C↑p
.text:00402AF0
.text:00402AF0 var_C           = dword ptr -0Ch
.text:00402AF0 var_8           = dword ptr -8
.text:00402AF0 var_4           = dword ptr -4
.text:00402AF0 arg_0           = dword ptr  4
.text:00402AF0
.text:00402AF0                 sub     esp, 0Ch
.text:00402AF3                 mov     edx, [esp+0Ch+arg_0]
.text:00402AF7                 mov     [esp+0Ch+var_8], 5 ; int
.text:00402AFF                 mov     [esp+0Ch+var_C], 0 ; int
.text:00402B06                 mov     [esp+0Ch+var_4], edx ; char *
.text:00402B0A                 call    sub_403F20
.text:00402B0F                 add     esp, 0Ch
.text:00402B12                 retn
.text:00402B12 sub_402AF0      endp
.text:00402B12
.text:00402B12 ; ---------------------------------------------------------------------------
.text:00402B13                 align 10h
.text:00402B20
.text:00402B20 ; =============== S U B R O U T I N E =======================================
.text:00402B20
.text:00402B20
.text:00402B20 ; int __cdecl sub_402B20(int, int, char *, int, int)
.text:00402B20 sub_402B20      proc near               ; CODE XREF: sub_401360+CA↑p
.text:00402B20                                         ; sub_402CC0+58↓p
.text:00402B20
.text:00402B20 var_1C          = dword ptr -1Ch
.text:00402B20 var_18          = dword ptr -18h
.text:00402B20 var_14          = dword ptr -14h
.text:00402B20 var_10          = dword ptr -10h
.text:00402B20 var_C           = dword ptr -0Ch
.text:00402B20 var_8           = dword ptr -8
.text:00402B20 var_4           = dword ptr -4
.text:00402B20 arg_0           = dword ptr  4
.text:00402B20 arg_4           = dword ptr  8
.text:00402B20 arg_8           = dword ptr  0Ch
.text:00402B20 arg_C           = dword ptr  10h
.text:00402B20 arg_10          = dword ptr  14h
.text:00402B20
.text:00402B20                 sub     esp, 1Ch
.text:00402B23                 mov     edx, [esp+1Ch+arg_C]
.text:00402B27                 mov     [esp+1Ch+var_4], 0 ; int
.text:00402B2F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402B33                 mov     [esp+1Ch+var_8], 0 ; int
.text:00402B3B                 mov     [esp+1Ch+var_10], edx ; int
.text:00402B3F                 mov     edx, [esp+1Ch+arg_4]
.text:00402B43                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402B47                 mov     ecx, [esp+1Ch+arg_8]
.text:00402B4B                 mov     [esp+1Ch+var_18], edx ; int
.text:00402B4F                 mov     edx, [esp+1Ch+arg_0]
.text:00402B53                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402B57                 mov     [esp+1Ch+var_1C], edx ; int
.text:00402B5A                 call    sub_402880
.text:00402B5F                 add     esp, 1Ch
.text:00402B62                 retn
.text:00402B62 sub_402B20      endp
.text:00402B62
.text:00402B62 ; ---------------------------------------------------------------------------
.text:00402B63                 align 10h
.text:00402B70                 sub     esp, 2Ch
.text:00402B73                 mov     edx, [esp+44h]
.text:00402B77                 mov     dword ptr [esp+18h], 0
.text:00402B7F                 mov     ecx, [esp+40h]
.text:00402B83                 mov     dword ptr [esp+14h], 0
.text:00402B8B                 mov     [esp+1Ch], edx
.text:00402B8F                 mov     edx, [esp+3Ch]
.text:00402B93                 mov     [esp+10h], ecx
.text:00402B97                 mov     ecx, [esp+38h]
.text:00402B9B                 mov     [esp+0Ch], edx
.text:00402B9F                 mov     edx, [esp+34h]
.text:00402BA3                 mov     [esp+8], ecx
.text:00402BA7                 mov     [esp+4], edx
.text:00402BAB                 mov     edx, [esp+30h]
.text:00402BAF                 mov     [esp], edx
.text:00402BB2                 call    sub_401CF0
.text:00402BB7                 add     esp, 2Ch
.text:00402BBA                 retn
.text:00402BBA ; ---------------------------------------------------------------------------
.text:00402BBB                 align 10h
.text:00402BC0                 sub     esp, 1Ch
.text:00402BC3                 mov     edx, [esp+2Ch]
.text:00402BC7                 mov     dword ptr [esp+18h], 0
.text:00402BCF                 mov     ecx, [esp+30h]
.text:00402BD3                 mov     dword ptr [esp+14h], 1
.text:00402BDB                 mov     [esp+0Ch], edx
.text:00402BDF                 mov     edx, [esp+24h]
.text:00402BE3                 mov     [esp+10h], ecx
.text:00402BE7                 mov     ecx, [esp+28h]
.text:00402BEB                 mov     [esp+4], edx
.text:00402BEF                 mov     edx, [esp+20h]
.text:00402BF3                 mov     [esp+8], ecx
.text:00402BF7                 mov     [esp], edx
.text:00402BFA                 call    sub_402880
.text:00402BFF                 add     esp, 1Ch
.text:00402C02                 retn
.text:00402C02 ; ---------------------------------------------------------------------------
.text:00402C03                 align 10h
.text:00402C10                 sub     esp, 2Ch
.text:00402C13                 mov     edx, [esp+44h]
.text:00402C17                 mov     dword ptr [esp+18h], 0
.text:00402C1F                 mov     ecx, [esp+40h]
.text:00402C23                 mov     dword ptr [esp+14h], 1
.text:00402C2B                 mov     [esp+1Ch], edx
.text:00402C2F                 mov     edx, [esp+3Ch]
.text:00402C33                 mov     [esp+10h], ecx
.text:00402C37                 mov     ecx, [esp+38h]
.text:00402C3B                 mov     [esp+0Ch], edx
.text:00402C3F                 mov     edx, [esp+34h]
.text:00402C43                 mov     [esp+8], ecx
.text:00402C47                 mov     [esp+4], edx
.text:00402C4B                 mov     edx, [esp+30h]
.text:00402C4F                 mov     [esp], edx
.text:00402C52                 call    sub_401CF0
.text:00402C57                 add     esp, 2Ch
.text:00402C5A                 retn
.text:00402C5A ; ---------------------------------------------------------------------------
.text:00402C5B                 align 10h
.text:00402C60 aHelp           db 'help',0             ; DATA XREF: .text:off_402C80↓o
.text:00402C65 aVersion        db 'version',0          ; DATA XREF: .text:00402C90↓o
.text:00402C6D                 align 20h
.text:00402C80 off_402C80      dd offset aHelp         ; DATA XREF: sub_402CC0+3D↓o
.text:00402C80                                         ; "help"
.text:00402C84                 dd 2 dup(0)
.text:00402C8C                 dd 68h
.text:00402C90                 dd offset aVersion      ; "version"
.text:00402C94                 dd 2 dup(0)
.text:00402C9C                 dd 76h, 4 dup(0)
.text:00402CB0 ; ---------------------------------------------------------------------------
.text:00402CB0
.text:00402CB0 loc_402CB0:                             ; DATA XREF: sub_402CC0+45↓o
.text:00402CB0                 sub     eax, [eax]
.text:00402CB2                 lea     esi, [esi+0]
.text:00402CB9                 lea     edi, [edi+0]
.text:00402CC0
.text:00402CC0 ; =============== S U B R O U T I N E =======================================
.text:00402CC0
.text:00402CC0
.text:00402CC0 ; int __cdecl sub_402CC0(int, int, FILE *, int, int, int, char)
.text:00402CC0 sub_402CC0      proc near               ; CODE XREF: sub_401360+A6↑p
.text:00402CC0
.text:00402CC0 Code            = dword ptr -1Ch
.text:00402CC0 var_18          = dword ptr -18h
.text:00402CC0 var_14          = dword ptr -14h
.text:00402CC0 var_10          = dword ptr -10h
.text:00402CC0 var_C           = dword ptr -0Ch
.text:00402CC0 var_4           = dword ptr -4
.text:00402CC0 arg_0           = dword ptr  4
.text:00402CC0 arg_4           = dword ptr  8
.text:00402CC0 arg_8           = dword ptr  0Ch
.text:00402CC0 arg_C           = dword ptr  10h
.text:00402CC0 arg_10          = dword ptr  14h
.text:00402CC0 arg_14          = dword ptr  18h
.text:00402CC0 arg_18          = byte ptr  1Ch
.text:00402CC0
.text:00402CC0                 sub     esp, 1Ch
.text:00402CC3                 xor     eax, eax
.text:00402CC5                 cmp     [esp+1Ch+arg_0], 2
.text:00402CCA                 mov     [esp+1Ch+var_4], ebx
.text:00402CCE                 mov     ebx, dword_408014
.text:00402CD4                 mov     dword_408014, eax
.text:00402CD9                 jz      short loc_402CF1
.text:00402CDB
.text:00402CDB loc_402CDB:                             ; CODE XREF: sub_402CC0+60↓j
.text:00402CDB                                         ; sub_402CC0+6A↓j
.text:00402CDB                 mov     dword_408014, ebx
.text:00402CE1                 xor     edx, edx
.text:00402CE3                 mov     ebx, [esp+1Ch+var_4]
.text:00402CE7                 mov     dword_408010, edx
.text:00402CED                 add     esp, 1Ch
.text:00402CF0                 retn
.text:00402CF1 ; ---------------------------------------------------------------------------
.text:00402CF1
.text:00402CF1 loc_402CF1:                             ; CODE XREF: sub_402CC0+19↑j
.text:00402CF1                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402CF9                 mov     edx, [esp+1Ch+arg_4]
.text:00402CFD                 mov     [esp+1Ch+var_10], offset off_402C80 ; int
.text:00402D05                 mov     [esp+1Ch+var_14], offset loc_402CB0 ; char *
.text:00402D0D                 mov     [esp+1Ch+var_18], edx ; int
.text:00402D11                 mov     [esp+1Ch+Code], 2 ; int
.text:00402D18                 call    sub_402B20
.text:00402D1D                 cmp     eax, 0FFFFFFFFh
.text:00402D20                 jz      short loc_402CDB
.text:00402D22                 cmp     eax, 68h ; 'h'
.text:00402D25                 jz      short loc_402D2E
.text:00402D27                 cmp     eax, 76h ; 'v'
.text:00402D2A                 jnz     short loc_402CDB
.text:00402D2C                 jmp     short loc_402D39
.text:00402D2E ; ---------------------------------------------------------------------------
.text:00402D2E
.text:00402D2E loc_402D2E:                             ; CODE XREF: sub_402CC0+65↑j
.text:00402D2E                 mov     [esp+1Ch+Code], 0
.text:00402D35                 call    [esp+1Ch+arg_14]
.text:00402D39
.text:00402D39 loc_402D39:                             ; CODE XREF: sub_402CC0+6C↑j
.text:00402D39                 mov     ecx, [esp+1Ch+arg_10]
.text:00402D3D                 lea     ebx, [esp+1Ch+arg_18]
.text:00402D41                 mov     edx, [esp+1Ch+arg_C]
.text:00402D45                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00402D49                 mov     ebx, [esp+1Ch+arg_8]
.text:00402D4D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00402D51                 mov     ecx, ds:_iob
.text:00402D57                 mov     [esp+1Ch+var_14], edx ; int
.text:00402D5B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:00402D5F                 add     ecx, 20h ; ' '
.text:00402D62                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00402D65                 call    sub_4047F0
.text:00402D6A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402D71                 call    exit
.text:00402D71 sub_402CC0      endp
.text:00402D71
.text:00402D71 ; ---------------------------------------------------------------------------
.text:00402D76                 align 10h
.text:00402D80                 mov     edx, [esp+4]
.text:00402D84                 mov     ds:dword_409030, edx
.text:00402D8A                 retn
.text:00402D8A ; ---------------------------------------------------------------------------
.text:00402D8B aWriteError     db 'write error',0      ; DATA XREF: sub_402DB0:loc_402DF9↓o
.text:00402D97 ; const char aSS[]
.text:00402D97 aSS             db '%s: %s',0           ; DATA XREF: sub_402DB0+77↓o
.text:00402D9E ; const char aS_3[]
.text:00402D9E aS_3            db '%s',0               ; DATA XREF: sub_402DB0+A0↓o
.text:00402DA1 ; ---------------------------------------------------------------------------
.text:00402DA1                 jmp     short sub_402DB0
.text:00402DA1 ; ---------------------------------------------------------------------------
.text:00402DA3                 align 10h
.text:00402DB0
.text:00402DB0 ; =============== S U B R O U T I N E =======================================
.text:00402DB0
.text:00402DB0
.text:00402DB0 ; void __cdecl sub_402DB0()
.text:00402DB0 sub_402DB0      proc near               ; CODE XREF: .text:00402DA1↑j
.text:00402DB0                                         ; DATA XREF: sub_401360+5B↑o
.text:00402DB0
.text:00402DB0 Stream          = dword ptr -2Ch
.text:00402DB0 ErrorMessage    = dword ptr -28h
.text:00402DB0 var_24          = dword ptr -24h
.text:00402DB0 var_20          = byte ptr -20h
.text:00402DB0 var_1C          = dword ptr -1Ch
.text:00402DB0 var_9           = byte ptr -9
.text:00402DB0
.text:00402DB0                 push    esi
.text:00402DB1                 push    ebx
.text:00402DB2                 sub     esp, 24h
.text:00402DB5                 mov     edx, ds:_iob
.text:00402DBB                 mov     ecx, [edx+2Ch]
.text:00402DBE                 lea     esi, [edx+20h]
.text:00402DC1                 shr     ecx, 5
.text:00402DC4                 mov     bl, cl
.text:00402DC6                 mov     ecx, [edx+20h]
.text:00402DC9                 and     bl, 1
.text:00402DCC                 cmp     ecx, [esi+8]
.text:00402DCF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402DD2                 setz    [esp+2Ch+var_9]
.text:00402DD7                 call    fclose
.text:00402DDC                 test    eax, eax
.text:00402DDE                 setnz   al
.text:00402DE1                 test    bl, bl
.text:00402DE3                 jnz     loc_402E73
.text:00402DE9                 test    al, al
.text:00402DEB                 jz      short loc_402E40
.text:00402DED
.text:00402DED loc_402DED:                             ; CODE XREF: sub_402DB0+CD↓j
.text:00402DED                 call    _errno
.text:00402DF2                 mov     esi, [eax]
.text:00402DF4
.text:00402DF4 loc_402DF4:                             ; CODE XREF: sub_402DB0+C7↓j
.text:00402DF4                 cmp     esi, 9
.text:00402DF7                 jz      short loc_402E66
.text:00402DF9
.text:00402DF9 loc_402DF9:                             ; CODE XREF: sub_402DB0+B8↓j
.text:00402DF9                                         ; sub_402DB0+C1↓j
.text:00402DF9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402E00                 call    ds:libintl_gettext
.text:00402E06                 mov     ebx, eax
.text:00402E08                 mov     eax, ds:dword_409030
.text:00402E0D                 test    eax, eax
.text:00402E0F                 jz      short loc_402E46
.text:00402E11                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402E14                 call    sub_404290
.text:00402E19                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402E1D                 mov     edx, Code
.text:00402E23                 mov     [esp+2Ch+var_1C], ebx
.text:00402E27                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:00402E2F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402E33                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402E36                 call    sub_404AB0
.text:00402E3B                 nop
.text:00402E3C                 lea     esi, [esi+0]
.text:00402E40
.text:00402E40 loc_402E40:                             ; CODE XREF: sub_402DB0+3B↑j
.text:00402E40                                         ; sub_402DB0+B4↓j ...
.text:00402E40                 add     esp, 24h
.text:00402E43                 pop     ebx
.text:00402E44                 pop     esi
.text:00402E45                 retn
.text:00402E46 ; ---------------------------------------------------------------------------
.text:00402E46
.text:00402E46 loc_402E46:                             ; CODE XREF: sub_402DB0+5F↑j
.text:00402E46                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402E4A                 mov     ebx, Code
.text:00402E50                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00402E58                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402E5C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402E5F                 call    sub_404AB0
.text:00402E64                 jmp     short loc_402E40
.text:00402E66 ; ---------------------------------------------------------------------------
.text:00402E66
.text:00402E66 loc_402E66:                             ; CODE XREF: sub_402DB0+47↑j
.text:00402E66                 test    bl, bl
.text:00402E68                 jnz     short loc_402DF9
.text:00402E6A                 cmp     [esp+2Ch+var_9], 0
.text:00402E6F                 jnz     short loc_402E40
.text:00402E71                 jmp     short loc_402DF9
.text:00402E73 ; ---------------------------------------------------------------------------
.text:00402E73
.text:00402E73 loc_402E73:                             ; CODE XREF: sub_402DB0+33↑j
.text:00402E73                 xor     esi, esi
.text:00402E75                 test    al, al
.text:00402E77                 jz      loc_402DF4
.text:00402E7D                 jmp     loc_402DED
.text:00402E7D sub_402DB0      endp
.text:00402E7D
.text:00402E7D ; ---------------------------------------------------------------------------
.text:00402E82                 align 10h
.text:00402E90
.text:00402E90 ; =============== S U B R O U T I N E =======================================
.text:00402E90
.text:00402E90
.text:00402E90 sub_402E90      proc near               ; CODE XREF: sub_4017E0+1D↑p
.text:00402E90
.text:00402E90 Size            = dword ptr -0Ch
.text:00402E90 var_4           = dword ptr -4
.text:00402E90 arg_0           = dword ptr  4
.text:00402E90 arg_4           = dword ptr  8
.text:00402E90
.text:00402E90                 sub     esp, 0Ch
.text:00402E93                 xor     edx, edx
.text:00402E95                 mov     ecx, [esp+0Ch+arg_4]
.text:00402E99                 mov     [esp+0Ch+var_4], ebx
.text:00402E9D                 mov     eax, 0FFFFFFFFh
.text:00402EA2                 mov     ebx, [esp+0Ch+arg_0]
.text:00402EA6                 div     ecx
.text:00402EA8                 cmp     eax, ebx
.text:00402EAA                 jb      short loc_402EC9
.text:00402EAC                 mov     edx, ebx
.text:00402EAE                 imul    edx, ecx
.text:00402EB1                 mov     [esp+0Ch+Size], edx ; Size
.text:00402EB4                 call    malloc
.text:00402EB9                 test    eax, eax
.text:00402EBB                 jz      short loc_402EC5
.text:00402EBD
.text:00402EBD loc_402EBD:                             ; CODE XREF: sub_402E90+37↓j
.text:00402EBD                 mov     ebx, [esp+0Ch+var_4]
.text:00402EC1                 add     esp, 0Ch
.text:00402EC4                 retn
.text:00402EC5 ; ---------------------------------------------------------------------------
.text:00402EC5
.text:00402EC5 loc_402EC5:                             ; CODE XREF: sub_402E90+2B↑j
.text:00402EC5                 test    ebx, ebx
.text:00402EC7                 jz      short loc_402EBD
.text:00402EC9
.text:00402EC9 loc_402EC9:                             ; CODE XREF: sub_402E90+1A↑j
.text:00402EC9                 call    sub_404A20
.text:00402EC9 sub_402E90      endp
.text:00402EC9
.text:00402EC9 ; ---------------------------------------------------------------------------
.text:00402ECE                 align 10h
.text:00402ED0
.text:00402ED0 ; =============== S U B R O U T I N E =======================================
.text:00402ED0
.text:00402ED0
.text:00402ED0 ; int __cdecl sub_402ED0(size_t)
.text:00402ED0 sub_402ED0      proc near               ; CODE XREF: sub_401940+E↑p
.text:00402ED0                                         ; sub_4019B0+18↑p ...
.text:00402ED0
.text:00402ED0 Size            = dword ptr -0Ch
.text:00402ED0 var_4           = dword ptr -4
.text:00402ED0 arg_0           = dword ptr  4
.text:00402ED0
.text:00402ED0                 sub     esp, 0Ch
.text:00402ED3                 mov     [esp+0Ch+var_4], ebx
.text:00402ED7                 mov     ebx, [esp+0Ch+arg_0]
.text:00402EDB                 mov     [esp+0Ch+Size], ebx ; Size
.text:00402EDE                 call    malloc
.text:00402EE3                 test    eax, eax
.text:00402EE5                 jz      short loc_402EF0
.text:00402EE7
.text:00402EE7 loc_402EE7:                             ; CODE XREF: sub_402ED0+22↓j
.text:00402EE7                 mov     ebx, [esp+0Ch+var_4]
.text:00402EEB                 add     esp, 0Ch
.text:00402EEE                 retn
.text:00402EEE ; ---------------------------------------------------------------------------
.text:00402EEF                 align 10h
.text:00402EF0
.text:00402EF0 loc_402EF0:                             ; CODE XREF: sub_402ED0+15↑j
.text:00402EF0                 test    ebx, ebx
.text:00402EF2                 jz      short loc_402EE7
.text:00402EF4                 call    sub_404A20
.text:00402EF4 sub_402ED0      endp
.text:00402EF4
.text:00402EF4 ; ---------------------------------------------------------------------------
.text:00402EF9                 align 10h
.text:00402F00
.text:00402F00 ; =============== S U B R O U T I N E =======================================
.text:00402F00
.text:00402F00
.text:00402F00 ; int __cdecl sub_402F00(void *, int, int)
.text:00402F00 sub_402F00      proc near               ; CODE XREF: sub_4019B0+B7↑p
.text:00402F00
.text:00402F00 Block           = dword ptr -1Ch
.text:00402F00 Size            = dword ptr -18h
.text:00402F00 var_8           = dword ptr -8
.text:00402F00 var_4           = dword ptr -4
.text:00402F00 arg_0           = dword ptr  4
.text:00402F00 arg_4           = dword ptr  8
.text:00402F00 arg_8           = dword ptr  0Ch
.text:00402F00
.text:00402F00                 sub     esp, 1Ch
.text:00402F03                 xor     edx, edx
.text:00402F05                 mov     eax, 0FFFFFFFFh
.text:00402F0A                 mov     [esp+1Ch+var_8], ebx
.text:00402F0E                 mov     ecx, [esp+1Ch+arg_0]
.text:00402F12                 mov     ebx, [esp+1Ch+arg_8]
.text:00402F16                 mov     [esp+1Ch+var_4], esi
.text:00402F1A                 mov     esi, [esp+1Ch+arg_4]
.text:00402F1E                 div     ebx
.text:00402F20                 cmp     eax, esi
.text:00402F22                 jb      short loc_402F54
.text:00402F24                 mov     [esp+1Ch+Block], ecx ; Block
.text:00402F27                 mov     edx, esi
.text:00402F29                 imul    edx, ebx
.text:00402F2C                 mov     [esp+1Ch+Size], edx ; Size
.text:00402F30                 call    realloc
.text:00402F35                 test    eax, eax
.text:00402F37                 mov     ecx, eax
.text:00402F39                 jz      short loc_402F50
.text:00402F3B
.text:00402F3B loc_402F3B:                             ; CODE XREF: sub_402F00+52↓j
.text:00402F3B                 mov     ebx, [esp+1Ch+var_8]
.text:00402F3F                 mov     eax, ecx
.text:00402F41                 mov     esi, [esp+1Ch+var_4]
.text:00402F45                 add     esp, 1Ch
.text:00402F48                 retn
.text:00402F48 ; ---------------------------------------------------------------------------
.text:00402F49                 align 10h
.text:00402F50
.text:00402F50 loc_402F50:                             ; CODE XREF: sub_402F00+39↑j
.text:00402F50                 test    esi, esi
.text:00402F52                 jz      short loc_402F3B
.text:00402F54
.text:00402F54 loc_402F54:                             ; CODE XREF: sub_402F00+22↑j
.text:00402F54                 call    sub_404A20
.text:00402F54 sub_402F00      endp
.text:00402F54
.text:00402F54 ; ---------------------------------------------------------------------------
.text:00402F59                 align 10h
.text:00402F60
.text:00402F60 ; =============== S U B R O U T I N E =======================================
.text:00402F60
.text:00402F60
.text:00402F60 ; int __cdecl sub_402F60(void *, size_t)
.text:00402F60 sub_402F60      proc near               ; CODE XREF: sub_404330+5B↓p
.text:00402F60
.text:00402F60 Block           = dword ptr -0Ch
.text:00402F60 Size            = dword ptr -8
.text:00402F60 var_4           = dword ptr -4
.text:00402F60 arg_0           = dword ptr  4
.text:00402F60 arg_4           = dword ptr  8
.text:00402F60
.text:00402F60                 sub     esp, 0Ch
.text:00402F63                 mov     edx, [esp+0Ch+arg_0]
.text:00402F67                 mov     [esp+0Ch+var_4], ebx
.text:00402F6B                 mov     ebx, [esp+0Ch+arg_4]
.text:00402F6F                 mov     [esp+0Ch+Block], edx ; Block
.text:00402F72                 mov     [esp+0Ch+Size], ebx ; Size
.text:00402F76                 call    realloc
.text:00402F7B                 test    eax, eax
.text:00402F7D                 jz      short loc_402F87
.text:00402F7F
.text:00402F7F loc_402F7F:                             ; CODE XREF: sub_402F60+29↓j
.text:00402F7F                 mov     ebx, [esp+0Ch+var_4]
.text:00402F83                 add     esp, 0Ch
.text:00402F86                 retn
.text:00402F87 ; ---------------------------------------------------------------------------
.text:00402F87
.text:00402F87 loc_402F87:                             ; CODE XREF: sub_402F60+1D↑j
.text:00402F87                 test    ebx, ebx
.text:00402F89                 jz      short loc_402F7F
.text:00402F8B                 call    sub_404A20
.text:00402F8B sub_402F60      endp
.text:00402F8B
.text:00402F90 ; ---------------------------------------------------------------------------
.text:00402F90                 jmp     sub_4030E0
.text:00402F90 ; ---------------------------------------------------------------------------
.text:00402F95                 align 10h
.text:00402FA0                 sub     esp, 0Ch
.text:00402FA3                 mov     edx, [esp+14h]
.text:00402FA7                 mov     dword ptr [esp+8], 1
.text:00402FAF                 mov     [esp+4], edx
.text:00402FB3                 mov     edx, [esp+10h]
.text:00402FB7                 mov     [esp], edx
.text:00402FBA                 call    sub_4030E0
.text:00402FBF                 add     esp, 0Ch
.text:00402FC2                 retn
.text:00402FC2 ; ---------------------------------------------------------------------------
.text:00402FC3                 align 10h
.text:00402FD0                 sub     esp, 1Ch
.text:00402FD3                 mov     [esp+18h], ebx
.text:00402FD7                 mov     ebx, [esp+20h]
.text:00402FDB                 mov     [esp], ebx
.text:00402FDE                 call    malloc
.text:00402FE3                 test    eax, eax
.text:00402FE5                 jz      short loc_403003
.text:00402FE7
.text:00402FE7 loc_402FE7:                             ; CODE XREF: .text:00403005↓j
.text:00402FE7                 mov     [esp+8], ebx
.text:00402FEB                 mov     dword ptr [esp+4], 0
.text:00402FF3                 mov     [esp], eax
.text:00402FF6                 call    memset
.text:00402FFB                 mov     ebx, [esp+18h]
.text:00402FFF                 add     esp, 1Ch
.text:00403002                 retn
.text:00403003 ; ---------------------------------------------------------------------------
.text:00403003
.text:00403003 loc_403003:                             ; CODE XREF: .text:00402FE5↑j
.text:00403003                 test    ebx, ebx
.text:00403005                 jz      short loc_402FE7
.text:00403007                 call    sub_404A20
.text:00403007 ; ---------------------------------------------------------------------------
.text:0040300C                 align 10h
.text:00403010                 sub     esp, 0Ch
.text:00403013                 xor     edx, edx
.text:00403015                 mov     ecx, [esp+14h]
.text:00403019                 mov     [esp+8], ebx
.text:0040301D                 mov     eax, 0FFFFFFFFh
.text:00403022                 mov     ebx, [esp+10h]
.text:00403026                 div     ecx
.text:00403028                 cmp     eax, ebx
.text:0040302A                 jb      short loc_403048
.text:0040302C                 mov     [esp+4], ecx
.text:00403030                 mov     [esp], ebx
.text:00403033                 call    calloc
.text:00403038                 test    eax, eax
.text:0040303A                 jz      short loc_403044
.text:0040303C
.text:0040303C loc_40303C:                             ; CODE XREF: .text:00403046↓j
.text:0040303C                 mov     ebx, [esp+8]
.text:00403040                 add     esp, 0Ch
.text:00403043                 retn
.text:00403044 ; ---------------------------------------------------------------------------
.text:00403044
.text:00403044 loc_403044:                             ; CODE XREF: .text:0040303A↑j
.text:00403044                 test    ebx, ebx
.text:00403046                 jz      short loc_40303C
.text:00403048
.text:00403048 loc_403048:                             ; CODE XREF: .text:0040302A↑j
.text:00403048                 call    sub_404A20
.text:00403048 ; ---------------------------------------------------------------------------
.text:0040304D                 align 10h
.text:00403050                 sub     esp, 1Ch
.text:00403053                 mov     [esp+18h], ebx
.text:00403057                 mov     ebx, [esp+24h]
.text:0040305B                 mov     [esp], ebx
.text:0040305E                 call    malloc
.text:00403063                 test    eax, eax
.text:00403065                 mov     edx, eax
.text:00403067                 jz      short loc_403085
.text:00403069
.text:00403069 loc_403069:                             ; CODE XREF: .text:00403087↓j
.text:00403069                 mov     [esp+8], ebx
.text:0040306D                 mov     ecx, [esp+20h]
.text:00403071                 mov     [esp], edx
.text:00403074                 mov     [esp+4], ecx
.text:00403078                 call    memcpy
.text:0040307D                 mov     ebx, [esp+18h]
.text:00403081                 add     esp, 1Ch
.text:00403084                 retn
.text:00403085 ; ---------------------------------------------------------------------------
.text:00403085
.text:00403085 loc_403085:                             ; CODE XREF: .text:00403067↑j
.text:00403085                 test    ebx, ebx
.text:00403087                 jz      short loc_403069
.text:00403089                 call    sub_404A20
.text:00403089 ; ---------------------------------------------------------------------------
.text:0040308E                 align 10h
.text:00403090                 sub     esp, 1Ch
.text:00403093                 mov     [esp+18h], esi
.text:00403097                 mov     esi, [esp+20h]
.text:0040309B                 mov     [esp+14h], ebx
.text:0040309F                 mov     [esp], esi
.text:004030A2                 call    strlen
.text:004030A7                 lea     ebx, [eax+1]
.text:004030AA                 mov     [esp], ebx
.text:004030AD                 call    malloc
.text:004030B2                 test    eax, eax
.text:004030B4                 jz      short loc_4030D2
.text:004030B6
.text:004030B6 loc_4030B6:                             ; CODE XREF: .text:004030D4↓j
.text:004030B6                 mov     [esp+8], ebx
.text:004030BA                 mov     [esp+4], esi
.text:004030BE                 mov     [esp], eax
.text:004030C1                 call    memcpy
.text:004030C6                 mov     ebx, [esp+14h]
.text:004030CA                 mov     esi, [esp+18h]
.text:004030CE                 add     esp, 1Ch
.text:004030D1                 retn
.text:004030D2 ; ---------------------------------------------------------------------------
.text:004030D2
.text:004030D2 loc_4030D2:                             ; CODE XREF: .text:004030B4↑j
.text:004030D2                 test    ebx, ebx
.text:004030D4                 jz      short loc_4030B6
.text:004030D6                 call    sub_404A20
.text:004030D6 ; ---------------------------------------------------------------------------
.text:004030DB                 align 10h
.text:004030E0
.text:004030E0 ; =============== S U B R O U T I N E =======================================
.text:004030E0
.text:004030E0
.text:004030E0 ; int __cdecl sub_4030E0(void *, int, int)
.text:004030E0 sub_4030E0      proc near               ; CODE XREF: .text:00402F90↑j
.text:004030E0                                         ; .text:00402FBA↑p
.text:004030E0
.text:004030E0 Block           = dword ptr -1Ch
.text:004030E0 Size            = dword ptr -18h
.text:004030E0 var_C           = dword ptr -0Ch
.text:004030E0 var_8           = dword ptr -8
.text:004030E0 var_4           = dword ptr -4
.text:004030E0 arg_0           = dword ptr  4
.text:004030E0 arg_4           = dword ptr  8
.text:004030E0 arg_8           = dword ptr  0Ch
.text:004030E0
.text:004030E0                 sub     esp, 1Ch
.text:004030E3                 mov     [esp+1Ch+var_8], esi
.text:004030E7                 mov     esi, [esp+1Ch+arg_0]
.text:004030EB                 mov     [esp+1Ch+var_4], edi
.text:004030EF                 mov     edi, [esp+1Ch+arg_4]
.text:004030F3                 test    esi, esi
.text:004030F5                 mov     [esp+1Ch+var_C], ebx
.text:004030F9                 mov     ecx, [edi]
.text:004030FB                 mov     ebx, [esp+1Ch+arg_8]
.text:004030FF                 jz      short loc_403140
.text:00403101                 xor     edx, edx
.text:00403103                 mov     eax, 7FFFFFFFh
.text:00403108                 div     ebx
.text:0040310A                 cmp     eax, ecx
.text:0040310C                 jb      short loc_403139
.text:0040310E                 add     ecx, ecx
.text:00403110
.text:00403110 loc_403110:                             ; CODE XREF: sub_4030E0+62↓j
.text:00403110                                         ; sub_4030E0+71↓j ...
.text:00403110                 mov     [edi], ecx
.text:00403112                 imul    ebx, ecx
.text:00403115                 mov     [esp+1Ch+Block], esi ; Block
.text:00403118                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040311C                 call    realloc
.text:00403121                 test    eax, eax
.text:00403123                 jz      short loc_403135
.text:00403125
.text:00403125 loc_403125:                             ; CODE XREF: sub_4030E0+57↓j
.text:00403125                 mov     ebx, [esp+1Ch+var_C]
.text:00403129                 mov     esi, [esp+1Ch+var_8]
.text:0040312D                 mov     edi, [esp+1Ch+var_4]
.text:00403131                 add     esp, 1Ch
.text:00403134                 retn
.text:00403135 ; ---------------------------------------------------------------------------
.text:00403135
.text:00403135 loc_403135:                             ; CODE XREF: sub_4030E0+43↑j
.text:00403135                 test    ebx, ebx
.text:00403137                 jz      short loc_403125
.text:00403139
.text:00403139 loc_403139:                             ; CODE XREF: sub_4030E0+2C↑j
.text:00403139                 call    sub_404A20
.text:00403139 ; ---------------------------------------------------------------------------
.text:0040313E                 align 10h
.text:00403140
.text:00403140 loc_403140:                             ; CODE XREF: sub_4030E0+1F↑j
.text:00403140                 test    ecx, ecx
.text:00403142                 jnz     short loc_403110
.text:00403144                 xor     edx, edx
.text:00403146                 mov     eax, 40h ; '@'
.text:0040314B                 div     ebx
.text:0040314D                 test    eax, eax
.text:0040314F                 mov     ecx, eax
.text:00403151                 jnz     short loc_403110
.text:00403153                 mov     ecx, 1
.text:00403158                 jmp     short loc_403110
.text:00403158 sub_4030E0      endp
.text:00403158
.text:00403158 ; ---------------------------------------------------------------------------
.text:0040315A                 align 10h
.text:00403160 aLiteral        db 'literal',0          ; DATA XREF: .text:004031A0↓o
.text:00403168 aShell          db 'shell',0            ; DATA XREF: .text:004031A4↓o
.text:0040316E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004031A8↓o
.text:0040317B aC              db 'c',0                ; DATA XREF: .text:004031AC↓o
.text:0040317D aEscape         db 'escape',0           ; DATA XREF: .text:004031B0↓o
.text:00403184 aLocale         db 'locale',0           ; DATA XREF: .text:004031B4↓o
.text:0040318B aClocale        db 'clocale',0          ; DATA XREF: .text:004031B8↓o
.text:00403193                 align 10h
.text:004031A0                 dd offset aLiteral      ; "literal"
.text:004031A4                 dd offset aShell        ; "shell"
.text:004031A8                 dd offset aShellAlways  ; "shell-always"
.text:004031AC                 dd offset aC            ; "c"
.text:004031B0                 dd offset aEscape       ; "escape"
.text:004031B4                 dd offset aLocale       ; "locale"
.text:004031B8                 dd offset aClocale      ; "clocale"
.text:004031BC                 dd 2 dup(0)
.text:004031C4                 dd 1, 2, 3, 4, 5, 6
.text:004031DC asc_4031DC:                             ; DATA XREF: sub_4031F0+7E↓o
.text:004031DC                                         ; sub_4031F0+A39↓o ...
.text:004031DC                 text "UTF-16LE", '"',27h,'`'
.text:004031E2                 align 10h
.text:004031F0
.text:004031F0 ; =============== S U B R O U T I N E =======================================
.text:004031F0
.text:004031F0
.text:004031F0 ; int __cdecl sub_4031F0(int, int, char *Str, int, int, int)
.text:004031F0 sub_4031F0      proc near               ; CODE XREF: sub_4031F0+43A↓p
.text:004031F0                                         ; .text:00403DB3↓p ...
.text:004031F0
.text:004031F0 C               = dword ptr -4Ch
.text:004031F0 Type            = dword ptr -48h
.text:004031F0 SizeInBytes     = dword ptr -44h
.text:004031F0 State           = dword ptr -40h
.text:004031F0 var_3C          = dword ptr -3Ch
.text:004031F0 var_38          = dword ptr -38h
.text:004031F0 var_34          = dword ptr -34h
.text:004031F0 var_30          = dword ptr -30h
.text:004031F0 var_29          = byte ptr -29h
.text:004031F0 var_28          = dword ptr -28h
.text:004031F0 var_22          = byte ptr -22h
.text:004031F0 var_21          = byte ptr -21h
.text:004031F0 var_20          = dword ptr -20h
.text:004031F0 var_1C          = dword ptr -1Ch
.text:004031F0 var_18          = mbstate_t ptr -18h
.text:004031F0 arg_0           = dword ptr  4
.text:004031F0 arg_4           = dword ptr  8
.text:004031F0 Str             = dword ptr  0Ch
.text:004031F0 arg_C           = dword ptr  10h
.text:004031F0 arg_10          = dword ptr  14h
.text:004031F0 arg_14          = dword ptr  18h
.text:004031F0
.text:004031F0                 push    ebp
.text:004031F1                 push    edi
.text:004031F2                 push    esi
.text:004031F3                 push    ebx
.text:004031F4                 sub     esp, 3Ch
.text:004031F7                 mov     edx, ds:__mb_cur_max
.text:004031FD                 mov     [esp+4Ch+var_34], 0
.text:00403205                 mov     [esp+4Ch+var_1C], 0
.text:0040320D                 cmp     dword ptr [edx], 1
.text:00403210                 mov     [esp+4Ch+var_20], 0
.text:00403218                 mov     [esp+4Ch+var_21], 0
.text:0040321D                 setz    [esp+4Ch+var_22]
.text:00403222                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403227                 ja      short def_40322D ; jumptable 0040322D default case, cases 0,1
.text:00403229                 mov     edx, [esp+4Ch+arg_10]
.text:0040322D                 jmp     ds:jpt_40322D[edx*4] ; switch jump
.text:0040322D ; ---------------------------------------------------------------------------
.text:00403234 jpt_40322D      dd offset def_40322D    ; DATA XREF: sub_4031F0+3D↑r
.text:00403234                 dd offset def_40322D    ; jump table for switch statement
.text:00403234                 dd offset loc_403B75
.text:00403234                 dd offset loc_403250
.text:00403234                 dd offset loc_403B9B
.text:00403234                 dd offset loc_403BA5
.text:00403234                 dd offset loc_403BA5
.text:00403250 ; ---------------------------------------------------------------------------
.text:00403250
.text:00403250 loc_403250:                             ; CODE XREF: sub_4031F0+3D↑j
.text:00403250                                         ; DATA XREF: sub_4031F0:jpt_40322D↑o
.text:00403250                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040322D case 3
.text:00403254                 cmp     [esp+4Ch+var_34], eax
.text:00403258                 jnb     short loc_403261
.text:0040325A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040325E                 mov     byte ptr [ebx], 22h ; '"'
.text:00403261
.text:00403261 loc_403261:                             ; CODE XREF: sub_4031F0+68↑j
.text:00403261                 mov     [esp+4Ch+var_34], 1
.text:00403269                 mov     [esp+4Ch+var_21], 1
.text:0040326E                 mov     [esp+4Ch+var_1C], offset asc_4031DC ; "\"'`"
.text:00403276
.text:00403276 loc_403276:                             ; CODE XREF: sub_4031F0+9A6↓j
.text:00403276                 mov     [esp+4Ch+var_20], 1
.text:0040327E
.text:0040327E def_40322D:                             ; CODE XREF: sub_4031F0+37↑j
.text:0040327E                                         ; sub_4031F0+3D↑j ...
.text:0040327E                 xor     ebp, ebp        ; jumptable 0040322D default case, cases 0,1
.text:00403280
.text:00403280 loc_403280:                             ; CODE XREF: sub_4031F0+3DB↓j
.text:00403280                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403285                 jz      loc_403B67
.text:0040328B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040328F
.text:0040328F loc_40328F:                             ; CODE XREF: sub_4031F0+980↓j
.text:0040328F                 jz      loc_403AFE
.text:00403295                 cmp     [esp+4Ch+var_21], 0
.text:0040329A                 jz      short loc_4032E0
.text:0040329C                 mov     esi, [esp+4Ch+var_20]
.text:004032A0                 test    esi, esi
.text:004032A2                 jz      short loc_4032E0
.text:004032A4                 mov     ecx, [esp+4Ch+var_20]
.text:004032A8                 lea     edi, [ecx+ebp]
.text:004032AB                 cmp     edi, [esp+4Ch+arg_C]
.text:004032AF                 ja      short loc_4032E0
.text:004032B1                 cld
.text:004032B2                 mov     ebx, [esp+4Ch+Str]
.text:004032B6                 mov     edi, [esp+4Ch+var_1C]
.text:004032BA                 add     ebx, ebp
.text:004032BC                 mov     esi, ebx
.text:004032BE                 cmp     ecx, ecx
.text:004032C0                 repe cmpsb
.text:004032C2                 jnz     short loc_4032E0
.text:004032C4                 mov     edx, [esp+4Ch+arg_4]
.text:004032C8                 cmp     [esp+4Ch+var_34], edx
.text:004032CC                 jnb     short loc_4032DA
.text:004032CE                 mov     ecx, [esp+4Ch+arg_0]
.text:004032D2                 mov     eax, [esp+4Ch+var_34]
.text:004032D6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004032DA
.text:004032DA loc_4032DA:                             ; CODE XREF: sub_4031F0+DC↑j
.text:004032DA                 inc     [esp+4Ch+var_34]
.text:004032DE                 mov     esi, esi
.text:004032E0
.text:004032E0 loc_4032E0:                             ; CODE XREF: sub_4031F0+AA↑j
.text:004032E0                                         ; sub_4031F0+B2↑j ...
.text:004032E0                 mov     edi, [esp+4Ch+Str]
.text:004032E4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004032E9                 movzx   eax, bl
.text:004032EC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004032EF                 ja      def_4032F5      ; jumptable 004032F5 default case, cases 1-6,14-31,64
.text:004032F5                 jmp     ds:jpt_4032F5[eax*4] ; switch jump
.text:004032F5 ; ---------------------------------------------------------------------------
.text:004032FC jpt_4032F5      dd offset loc_4034F8, offset def_4032F5, offset def_4032F5
.text:004032FC                                         ; DATA XREF: sub_4031F0+105↑r
.text:004032FC                 dd offset def_4032F5, offset def_4032F5, offset def_4032F5 ; jump table for switch statement
.text:004032FC                 dd offset def_4032F5, offset loc_4035D0, offset loc_4035EE
.text:004032FC                 dd offset loc_4035F2, offset loc_403637, offset loc_40363B
.text:004032FC                 dd offset loc_40363F, offset loc_403643, offset def_4032F5
.text:004032FC                 dd offset def_4032F5, offset def_4032F5, offset def_4032F5
.text:004032FC                 dd offset def_4032F5, offset def_4032F5, offset def_4032F5
.text:004032FC                 dd offset def_4032F5, offset def_4032F5, offset def_4032F5
.text:004032FC                 dd offset def_4032F5, offset def_4032F5, offset def_4032F5
.text:004032FC                 dd offset def_4032F5, offset def_4032F5, offset def_4032F5
.text:004032FC                 dd offset def_4032F5, offset def_4032F5, offset loc_403AC8
.text:004032FC                 dd offset loc_403AC8, offset loc_403AC8, offset loc_403AEA
.text:004032FC                 dd offset loc_403AC8, offset def_4036F2, offset loc_403AC8
.text:004032FC                 dd offset loc_403647, offset loc_403AC8, offset loc_403AC8
.text:004032FC                 dd offset loc_403AC8, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset loc_403AC8
.text:004032FC                 dd offset loc_403AC8, offset loc_403AC8, offset loc_403AC8
.text:004032FC                 dd offset loc_4036AC, offset def_4032F5, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset loc_403AC8, offset loc_403AC1
.text:004032FC                 dd offset def_4036F2, offset loc_403AC8, offset def_4036F2
.text:004032FC                 dd offset loc_403AC8, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset def_4036F2, offset def_4036F2, offset def_4036F2
.text:004032FC                 dd offset loc_403AD8, offset loc_403AC8, offset loc_403AD8
.text:004032FC                 dd offset loc_403AEA
.text:004034F8 ; ---------------------------------------------------------------------------
.text:004034F8
.text:004034F8 loc_4034F8:                             ; CODE XREF: sub_4031F0+105↑j
.text:004034F8                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:004034F8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004032F5 case 0
.text:004034FD                 lea     eax, [ebp+1]
.text:00403500                 jz      loc_4035B0
.text:00403506                 mov     esi, [esp+4Ch+arg_4]
.text:0040350A                 cmp     [esp+4Ch+var_34], esi
.text:0040350E                 jnb     short loc_40351C
.text:00403510                 mov     eax, [esp+4Ch+arg_0]
.text:00403514                 mov     ebx, [esp+4Ch+var_34]
.text:00403518                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040351C
.text:0040351C loc_40351C:                             ; CODE XREF: sub_4031F0+31E↑j
.text:0040351C                 inc     [esp+4Ch+var_34]
.text:00403520                 mov     edx, [esp+4Ch+arg_4]
.text:00403524                 cmp     [esp+4Ch+var_34], edx
.text:00403528                 jnb     short loc_403536
.text:0040352A                 mov     edi, [esp+4Ch+arg_0]
.text:0040352E                 mov     ecx, [esp+4Ch+var_34]
.text:00403532                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403536
.text:00403536 loc_403536:                             ; CODE XREF: sub_4031F0+338↑j
.text:00403536                 inc     [esp+4Ch+var_34]
.text:0040353A                 mov     esi, [esp+4Ch+arg_4]
.text:0040353E                 cmp     [esp+4Ch+var_34], esi
.text:00403542                 jnb     short loc_403550
.text:00403544                 mov     ebx, [esp+4Ch+arg_0]
.text:00403548                 mov     eax, [esp+4Ch+var_34]
.text:0040354C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403550
.text:00403550 loc_403550:                             ; CODE XREF: sub_4031F0+352↑j
.text:00403550                 inc     [esp+4Ch+var_34]
.text:00403554                 mov     bl, 30h ; '0'
.text:00403556                 lea     esi, [esi+0]
.text:00403559                 lea     edi, [edi+0]
.text:00403560
.text:00403560 def_4036F2:                             ; CODE XREF: sub_4031F0+105↑j
.text:00403560                                         ; sub_4031F0+463↓j ...
.text:00403560                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004032F5 cases 37,43-58,65-90,93,95,97-122
.text:00403560                                         ; jumptable 004036F2 default case, cases 34-38,42-44,46,48-59
.text:00403565                 lea     eax, [ebp+1]
.text:00403568                 jz      short loc_4035B0
.text:0040356A                 mov     cl, bl
.text:0040356C                 mov     edi, [esp+4Ch+arg_14]
.text:00403570                 mov     esi, 1
.text:00403575                 shr     cl, 5
.text:00403578                 movzx   edx, cl
.text:0040357B                 mov     ecx, ebx
.text:0040357D                 and     ecx, 1Fh
.text:00403580                 shl     esi, cl
.text:00403582                 test    [edi+edx*4+4], esi
.text:00403586                 jz      short loc_4035A2
.text:00403588
.text:00403588 loc_403588:                             ; CODE XREF: sub_4031F0+3FC↓j
.text:00403588                 mov     edx, [esp+4Ch+arg_4]
.text:0040358C                 cmp     [esp+4Ch+var_34], edx
.text:00403590                 jnb     short loc_40359E
.text:00403592                 mov     edi, [esp+4Ch+arg_0]
.text:00403596                 mov     esi, [esp+4Ch+var_34]
.text:0040359A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040359E
.text:0040359E loc_40359E:                             ; CODE XREF: sub_4031F0+3A0↑j
.text:0040359E                 inc     [esp+4Ch+var_34]
.text:004035A2
.text:004035A2 loc_4035A2:                             ; CODE XREF: sub_4031F0+396↑j
.text:004035A2                 lea     eax, [ebp+1]
.text:004035A5                 lea     esi, [esi+0]
.text:004035A9                 lea     edi, [edi+0]
.text:004035B0
.text:004035B0 loc_4035B0:                             ; CODE XREF: sub_4031F0+310↑j
.text:004035B0                                         ; sub_4031F0+378↑j ...
.text:004035B0                 mov     ebp, [esp+4Ch+arg_4]
.text:004035B4                 cmp     [esp+4Ch+var_34], ebp
.text:004035B8                 jnb     short loc_4035C5
.text:004035BA                 mov     edx, [esp+4Ch+arg_0]
.text:004035BE                 mov     ecx, [esp+4Ch+var_34]
.text:004035C2                 mov     [ecx+edx], bl
.text:004035C5
.text:004035C5 loc_4035C5:                             ; CODE XREF: sub_4031F0+3C8↑j
.text:004035C5                 inc     [esp+4Ch+var_34]
.text:004035C9                 mov     ebp, eax
.text:004035CB                 jmp     loc_403280
.text:004035D0 ; ---------------------------------------------------------------------------
.text:004035D0
.text:004035D0 loc_4035D0:                             ; CODE XREF: sub_4031F0+105↑j
.text:004035D0                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:004035D0                 mov     dl, 61h ; 'a'   ; jumptable 004032F5 case 7
.text:004035D2                 lea     esi, [esi+0]
.text:004035D9                 lea     edi, [edi+0]
.text:004035E0
.text:004035E0 loc_4035E0:                             ; CODE XREF: sub_4031F0+400↓j
.text:004035E0                                         ; sub_4031F0+409↓j ...
.text:004035E0                 cmp     [esp+4Ch+var_21], 0
.text:004035E5                 lea     eax, [ebp+1]
.text:004035E8                 jz      short loc_4035B0
.text:004035EA                 mov     bl, dl
.text:004035EC                 jmp     short loc_403588
.text:004035EE ; ---------------------------------------------------------------------------
.text:004035EE
.text:004035EE loc_4035EE:                             ; CODE XREF: sub_4031F0+105↑j
.text:004035EE                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:004035EE                 mov     dl, 62h ; 'b'   ; jumptable 004032F5 case 8
.text:004035F0                 jmp     short loc_4035E0
.text:004035F2 ; ---------------------------------------------------------------------------
.text:004035F2
.text:004035F2 loc_4035F2:                             ; CODE XREF: sub_4031F0+105↑j
.text:004035F2                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:004035F2                 mov     dl, 74h ; 't'   ; jumptable 004032F5 case 9
.text:004035F4
.text:004035F4 loc_4035F4:                             ; CODE XREF: sub_4031F0+449↓j
.text:004035F4                                         ; sub_4031F0+455↓j ...
.text:004035F4                 cmp     [esp+4Ch+arg_10], 1
.text:004035F9                 jnz     short loc_4035E0
.text:004035FB
.text:004035FB loc_4035FB:                             ; CODE XREF: sub_4031F0+45C↓j
.text:004035FB                                         ; sub_4031F0+4C1↓j ...
.text:004035FB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004039C2 cases 91,92,94,96,124
.text:00403603                 mov     eax, [esp+4Ch+arg_14]
.text:00403607                 mov     edx, [esp+4Ch+arg_C]
.text:0040360B                 mov     ecx, [esp+4Ch+Str]
.text:0040360F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403613                 mov     [esp+4Ch+var_38], eax ; int
.text:00403617                 mov     ebp, [esp+4Ch+arg_0]
.text:0040361B                 mov     [esp+4Ch+State], edx ; int
.text:0040361F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403623                 mov     [esp+4Ch+Type], ebx ; int
.text:00403627                 mov     [esp+4Ch+C], ebp ; int
.text:0040362A                 call    sub_4031F0
.text:0040362F
.text:0040362F loc_40362F:                             ; CODE XREF: sub_4031F0+972↓j
.text:0040362F                 add     esp, 3Ch
.text:00403632                 pop     ebx
.text:00403633                 pop     esi
.text:00403634                 pop     edi
.text:00403635                 pop     ebp
.text:00403636                 retn
.text:00403637 ; ---------------------------------------------------------------------------
.text:00403637
.text:00403637 loc_403637:                             ; CODE XREF: sub_4031F0+105↑j
.text:00403637                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:00403637                 mov     dl, 6Eh ; 'n'   ; jumptable 004032F5 case 10
.text:00403639                 jmp     short loc_4035F4
.text:0040363B ; ---------------------------------------------------------------------------
.text:0040363B
.text:0040363B loc_40363B:                             ; CODE XREF: sub_4031F0+105↑j
.text:0040363B                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:0040363B                 mov     dl, 76h ; 'v'   ; jumptable 004032F5 case 11
.text:0040363D                 jmp     short loc_4035E0
.text:0040363F ; ---------------------------------------------------------------------------
.text:0040363F
.text:0040363F loc_40363F:                             ; CODE XREF: sub_4031F0+105↑j
.text:0040363F                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:0040363F                 mov     dl, 66h ; 'f'   ; jumptable 004032F5 case 12
.text:00403641                 jmp     short loc_4035E0
.text:00403643 ; ---------------------------------------------------------------------------
.text:00403643
.text:00403643 loc_403643:                             ; CODE XREF: sub_4031F0+105↑j
.text:00403643                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:00403643                 mov     dl, 72h ; 'r'   ; jumptable 004032F5 case 13
.text:00403645                 jmp     short loc_4035F4
.text:00403647 ; ---------------------------------------------------------------------------
.text:00403647
.text:00403647 loc_403647:                             ; CODE XREF: sub_4031F0+105↑j
.text:00403647                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:00403647                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004032F5 case 39
.text:0040364C                 jz      short loc_4035FB ; jumptable 004039C2 cases 91,92,94,96,124
.text:0040364E                 cmp     [esp+4Ch+arg_10], 2
.text:00403653                 jnz     def_4036F2      ; jumptable 004032F5 cases 37,43-58,65-90,93,95,97-122
.text:00403653                                         ; jumptable 004036F2 default case, cases 34-38,42-44,46,48-59
.text:00403659                 mov     edx, [esp+4Ch+arg_4]
.text:0040365D                 cmp     [esp+4Ch+var_34], edx
.text:00403661                 jnb     short loc_40366F
.text:00403663                 mov     ecx, [esp+4Ch+arg_0]
.text:00403667                 mov     edi, [esp+4Ch+var_34]
.text:0040366B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040366F
.text:0040366F loc_40366F:                             ; CODE XREF: sub_4031F0+471↑j
.text:0040366F                 inc     [esp+4Ch+var_34]
.text:00403673                 mov     eax, [esp+4Ch+arg_4]
.text:00403677                 cmp     [esp+4Ch+var_34], eax
.text:0040367B                 jnb     short loc_403689
.text:0040367D                 mov     esi, [esp+4Ch+arg_0]
.text:00403681                 mov     edx, [esp+4Ch+var_34]
.text:00403685                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403689
.text:00403689 loc_403689:                             ; CODE XREF: sub_4031F0+48B↑j
.text:00403689                 inc     [esp+4Ch+var_34]
.text:0040368D                 mov     edi, [esp+4Ch+arg_4]
.text:00403691                 cmp     [esp+4Ch+var_34], edi
.text:00403695                 jnb     short loc_4036A3
.text:00403697                 mov     ecx, [esp+4Ch+arg_0]
.text:0040369B                 mov     eax, [esp+4Ch+var_34]
.text:0040369F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004036A3
.text:004036A3 loc_4036A3:                             ; CODE XREF: sub_4031F0+4A5↑j
.text:004036A3                                         ; sub_4031F0+5C4↓j ...
.text:004036A3                 inc     [esp+4Ch+var_34]
.text:004036A7                 jmp     def_4036F2      ; jumptable 004032F5 cases 37,43-58,65-90,93,95,97-122
.text:004036A7                                         ; jumptable 004036F2 default case, cases 34-38,42-44,46,48-59
.text:004036AC ; ---------------------------------------------------------------------------
.text:004036AC
.text:004036AC loc_4036AC:                             ; CODE XREF: sub_4031F0+105↑j
.text:004036AC                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:004036AC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004032F5 case 63
.text:004036B1                 jz      loc_4035FB      ; jumptable 004039C2 cases 91,92,94,96,124
.text:004036B7                 cmp     [esp+4Ch+arg_10], 3
.text:004036BC                 jnz     def_4036F2      ; jumptable 004032F5 cases 37,43-58,65-90,93,95,97-122
.text:004036BC                                         ; jumptable 004036F2 default case, cases 34-38,42-44,46,48-59
.text:004036C2                 lea     edx, [ebp+2]
.text:004036C5                 cmp     edx, [esp+4Ch+arg_C]
.text:004036C9                 jnb     def_4036F2      ; jumptable 004032F5 cases 37,43-58,65-90,93,95,97-122
.text:004036C9                                         ; jumptable 004036F2 default case, cases 34-38,42-44,46,48-59
.text:004036CF                 mov     esi, [esp+4Ch+Str]
.text:004036D3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004036D8                 jnz     def_4036F2      ; jumptable 004032F5 cases 37,43-58,65-90,93,95,97-122
.text:004036D8                                         ; jumptable 004036F2 default case, cases 34-38,42-44,46,48-59
.text:004036DE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004036E3                 movsx   eax, cl
.text:004036E6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004036E9                 cmp     eax, 1Dh
.text:004036EC                 ja      def_4036F2      ; jumptable 004032F5 cases 37,43-58,65-90,93,95,97-122
.text:004036EC                                         ; jumptable 004036F2 default case, cases 34-38,42-44,46,48-59
.text:004036F2                 jmp     ds:jpt_4036F2[eax*4] ; switch jump
.text:004036F2 ; ---------------------------------------------------------------------------
.text:004036F9                 align 4
.text:004036FC jpt_4036F2      dd offset loc_403774    ; DATA XREF: sub_4031F0+502↑r
.text:004036FC                 dd offset def_4036F2    ; jump table for switch statement
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset loc_403774
.text:004036FC                 dd offset loc_403774
.text:004036FC                 dd offset loc_403774
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset loc_403774
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset loc_403774
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset def_4036F2
.text:004036FC                 dd offset loc_403774
.text:004036FC                 dd offset loc_403774
.text:004036FC                 dd offset loc_403774
.text:00403774 ; ---------------------------------------------------------------------------
.text:00403774
.text:00403774 loc_403774:                             ; CODE XREF: sub_4031F0+502↑j
.text:00403774                                         ; DATA XREF: sub_4031F0:jpt_4036F2↑o
.text:00403774                 mov     ebp, edx        ; jumptable 004036F2 cases 33,39-41,45,47,60-62
.text:00403776                 mov     bl, cl
.text:00403778                 mov     edx, [esp+4Ch+arg_4]
.text:0040377C                 cmp     [esp+4Ch+var_34], edx
.text:00403780                 jnb     short loc_40378E
.text:00403782                 mov     ecx, [esp+4Ch+arg_0]
.text:00403786                 mov     edi, [esp+4Ch+var_34]
.text:0040378A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040378E
.text:0040378E loc_40378E:                             ; CODE XREF: sub_4031F0+590↑j
.text:0040378E                 inc     [esp+4Ch+var_34]
.text:00403792                 mov     eax, [esp+4Ch+arg_4]
.text:00403796                 cmp     [esp+4Ch+var_34], eax
.text:0040379A                 jnb     short loc_4037A8
.text:0040379C                 mov     edx, [esp+4Ch+arg_0]
.text:004037A0                 mov     esi, [esp+4Ch+var_34]
.text:004037A4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004037A8
.text:004037A8 loc_4037A8:                             ; CODE XREF: sub_4031F0+5AA↑j
.text:004037A8                 inc     [esp+4Ch+var_34]
.text:004037AC                 mov     edi, [esp+4Ch+arg_4]
.text:004037B0                 cmp     [esp+4Ch+var_34], edi
.text:004037B4                 jnb     loc_4036A3
.text:004037BA                 mov     eax, [esp+4Ch+arg_0]
.text:004037BE                 mov     ecx, [esp+4Ch+var_34]
.text:004037C2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004037C6                 jmp     loc_4036A3
.text:004037C6 ; ---------------------------------------------------------------------------
.text:004037CB                 align 10h
.text:004037D0
.text:004037D0 def_4032F5:                             ; CODE XREF: sub_4031F0+FF↑j
.text:004037D0                                         ; sub_4031F0+105↑j
.text:004037D0                                         ; DATA XREF: ...
.text:004037D0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004032F5 default case, cases 1-6,14-31,64
.text:004037D5                 jz      loc_403900
.text:004037DB                 mov     [esp+4Ch+var_28], 1
.text:004037E3                 mov     esi, ds:__mb_cur_max
.text:004037E9                 movzx   edx, bl
.text:004037EC                 cmp     dword ptr [esi], 1
.text:004037EF                 jz      loc_4038E4
.text:004037F5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004037FD                 mov     [esp+4Ch+C], edx ; C
.text:00403800                 call    _isctype
.text:00403805
.text:00403805 loc_403805:                             ; CODE XREF: sub_4031F0+705↓j
.text:00403805                 test    eax, eax
.text:00403807                 setnz   [esp+4Ch+var_29]
.text:0040380C
.text:0040380C loc_40380C:                             ; CODE XREF: sub_4031F0+7A5↓j
.text:0040380C                 cmp     [esp+4Ch+var_21], 0
.text:00403811                 lea     eax, [ebp+1]
.text:00403814                 jz      loc_4035B0
.text:0040381A                 cmp     [esp+4Ch+var_29], 0
.text:0040381F                 jnz     def_4036F2      ; jumptable 004032F5 cases 37,43-58,65-90,93,95,97-122
.text:0040381F                                         ; jumptable 004036F2 default case, cases 34-38,42-44,46,48-59
.text:00403825
.text:00403825 loc_403825:                             ; CODE XREF: sub_4031F0+7AB↓j
.text:00403825                 mov     eax, [esp+4Ch+var_28]
.text:00403829                 lea     edx, [eax+ebp]
.text:0040382C                 lea     esi, [esi+0]
.text:00403830
.text:00403830 loc_403830:                             ; CODE XREF: sub_4031F0+6EF↓j
.text:00403830                 cmp     [esp+4Ch+var_21], 0
.text:00403835                 jz      short loc_4038B0
.text:00403837                 cmp     [esp+4Ch+var_29], 0
.text:0040383C                 jnz     short loc_4038B0
.text:0040383E                 mov     edi, [esp+4Ch+arg_4]
.text:00403842                 cmp     [esp+4Ch+var_34], edi
.text:00403846                 jnb     short loc_403854
.text:00403848                 mov     esi, [esp+4Ch+arg_0]
.text:0040384C                 mov     eax, [esp+4Ch+var_34]
.text:00403850                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403854
.text:00403854 loc_403854:                             ; CODE XREF: sub_4031F0+656↑j
.text:00403854                 inc     [esp+4Ch+var_34]
.text:00403858                 mov     ecx, [esp+4Ch+arg_4]
.text:0040385C                 cmp     [esp+4Ch+var_34], ecx
.text:00403860                 jnb     short loc_403875
.text:00403862                 mov     cl, bl
.text:00403864                 mov     esi, [esp+4Ch+arg_0]
.text:00403868                 mov     edi, [esp+4Ch+var_34]
.text:0040386C                 shr     cl, 6
.text:0040386F                 add     cl, 30h ; '0'
.text:00403872                 mov     [edi+esi], cl
.text:00403875
.text:00403875 loc_403875:                             ; CODE XREF: sub_4031F0+670↑j
.text:00403875                 inc     [esp+4Ch+var_34]
.text:00403879                 mov     edi, [esp+4Ch+arg_4]
.text:0040387D                 cmp     [esp+4Ch+var_34], edi
.text:00403881                 jnb     short loc_403899
.text:00403883                 mov     cl, bl
.text:00403885                 mov     esi, [esp+4Ch+arg_0]
.text:00403889                 shr     cl, 3
.text:0040388C                 mov     edi, [esp+4Ch+var_34]
.text:00403890                 and     cl, 7
.text:00403893                 add     cl, 30h ; '0'
.text:00403896                 mov     [edi+esi], cl
.text:00403899
.text:00403899 loc_403899:                             ; CODE XREF: sub_4031F0+691↑j
.text:00403899                 inc     [esp+4Ch+var_34]
.text:0040389D                 and     bl, 7
.text:004038A0                 add     bl, 30h ; '0'
.text:004038A3                 lea     esi, [esi+0]
.text:004038A9                 lea     edi, [edi+0]
.text:004038B0
.text:004038B0 loc_4038B0:                             ; CODE XREF: sub_4031F0+645↑j
.text:004038B0                                         ; sub_4031F0+64C↑j
.text:004038B0                 lea     eax, [ebp+1]
.text:004038B3                 cmp     edx, eax
.text:004038B5                 jbe     loc_4035B0
.text:004038BB                 mov     ebp, [esp+4Ch+arg_4]
.text:004038BF                 cmp     [esp+4Ch+var_34], ebp
.text:004038C3                 jnb     short loc_4038D0
.text:004038C5                 mov     ecx, [esp+4Ch+arg_0]
.text:004038C9                 mov     edi, [esp+4Ch+var_34]
.text:004038CD                 mov     [edi+ecx], bl
.text:004038D0
.text:004038D0 loc_4038D0:                             ; CODE XREF: sub_4031F0+6D3↑j
.text:004038D0                 inc     [esp+4Ch+var_34]
.text:004038D4                 mov     ebp, eax
.text:004038D6                 mov     eax, [esp+4Ch+Str]
.text:004038DA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004038DF                 jmp     loc_403830
.text:004038E4 ; ---------------------------------------------------------------------------
.text:004038E4
.text:004038E4 loc_4038E4:                             ; CODE XREF: sub_4031F0+5FF↑j
.text:004038E4                 mov     ecx, ds:_pctype
.text:004038EA                 mov     edi, [ecx]
.text:004038EC                 movzx   eax, word ptr [edi+edx*2]
.text:004038F0                 and     eax, 157h
.text:004038F5                 jmp     loc_403805
.text:004038F5 ; ---------------------------------------------------------------------------
.text:004038FA                 align 10h
.text:00403900
.text:00403900 loc_403900:                             ; CODE XREF: sub_4031F0+5E5↑j
.text:00403900                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403905                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040390D                 mov     [esp+4Ch+var_28], 0
.text:00403915                 mov     [esp+4Ch+var_29], 1
.text:0040391A                 jz      loc_403AAC
.text:00403920
.text:00403920 loc_403920:                             ; CODE XREF: sub_4031F0+8CC↓j
.text:00403920                 mov     ecx, [esp+4Ch+arg_C]
.text:00403924                 lea     edx, [esp+4Ch+var_18]
.text:00403928                 mov     edi, [esp+4Ch+Str]
.text:0040392C                 mov     [esp+4Ch+State], edx ; State
.text:00403930                 lea     esi, [esp+4Ch+var_18._State]
.text:00403934                 sub     ecx, ebp
.text:00403936                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040393A                 add     edi, ebp
.text:0040393C                 mov     [esp+4Ch+var_30], edi
.text:00403940                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403944                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403947                 call    mbrtowc
.text:0040394C                 test    eax, eax
.text:0040394E                 mov     edi, eax
.text:00403950                 jz      short loc_403990
.text:00403952                 cmp     eax, 0FFFFFFFFh
.text:00403955                 jz      loc_403AA2
.text:0040395B                 cmp     eax, 0FFFFFFFEh
.text:0040395E                 jz      loc_403A62
.text:00403964                 cmp     [esp+4Ch+arg_10], 1
.text:00403969                 jz      short loc_4039A0
.text:0040396B
.text:0040396B loc_40396B:                             ; CODE XREF: sub_4031F0+7B9↓j
.text:0040396B                                         ; sub_4031F0+86D↓j
.text:0040396B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403970                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403978                 mov     [esp+4Ch+C], ecx ; C
.text:0040397B                 call    iswctype
.text:00403980                 test    eax, eax
.text:00403982                 jnz     short loc_403989
.text:00403984                 mov     [esp+4Ch+var_29], 0
.text:00403989
.text:00403989 loc_403989:                             ; CODE XREF: sub_4031F0+792↑j
.text:00403989                 mov     [esp+4Ch+var_28], edi
.text:0040398D                 lea     esi, [esi+0]
.text:00403990
.text:00403990 loc_403990:                             ; CODE XREF: sub_4031F0+760↑j
.text:00403990                                         ; sub_4031F0+87B↓j ...
.text:00403990                 cmp     [esp+4Ch+var_28], 1
.text:00403995                 jbe     loc_40380C
.text:0040399B                 jmp     loc_403825
.text:004039A0 ; ---------------------------------------------------------------------------
.text:004039A0
.text:004039A0 loc_4039A0:                             ; CODE XREF: sub_4031F0+779↑j
.text:004039A0                 cmp     [esp+4Ch+arg_10], eax
.text:004039A4                 mov     edx, 1
.text:004039A9                 jnb     short loc_40396B
.text:004039AB
.text:004039AB loc_4039AB:                             ; CODE XREF: sub_4031F0+867↓j
.text:004039AB                 mov     ecx, [esp+4Ch+Str]
.text:004039AF                 lea     esi, [edx+ebp]
.text:004039B2                 movsx   eax, byte ptr [esi+ecx]
.text:004039B6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004039B9                 cmp     eax, 21h
.text:004039BC                 ja      def_4039C2      ; jumptable 004039C2 default case, cases 93,95,97-123
.text:004039C2                 jmp     ds:jpt_4039C2[eax*4] ; switch jump
.text:004039C2 ; ---------------------------------------------------------------------------
.text:004039C9                 align 4
.text:004039CC jpt_4039C2      dd offset loc_4035FB    ; DATA XREF: sub_4031F0+7D2↑r
.text:004039CC                 dd offset loc_4035FB    ; jump table for switch statement
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset loc_4035FB
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset loc_4035FB
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset def_4039C2
.text:004039CC                 dd offset loc_4035FB
.text:00403A54 ; ---------------------------------------------------------------------------
.text:00403A54
.text:00403A54 def_4039C2:                             ; CODE XREF: sub_4031F0+7CC↑j
.text:00403A54                                         ; sub_4031F0+7D2↑j
.text:00403A54                                         ; DATA XREF: ...
.text:00403A54                 inc     edx             ; jumptable 004039C2 default case, cases 93,95,97-123
.text:00403A55                 cmp     edx, edi
.text:00403A57                 jb      loc_4039AB
.text:00403A5D                 jmp     loc_40396B
.text:00403A62 ; ---------------------------------------------------------------------------
.text:00403A62
.text:00403A62 loc_403A62:                             ; CODE XREF: sub_4031F0+76E↑j
.text:00403A62                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403A66                 mov     [esp+4Ch+var_29], 0
.text:00403A6B                 jnb     loc_403990
.text:00403A71                 mov     eax, [esp+4Ch+var_30]
.text:00403A75                 cmp     byte ptr [eax], 0
.text:00403A78                 jz      loc_403990
.text:00403A7E
.text:00403A7E loc_403A7E:                             ; CODE XREF: sub_4031F0+8AB↓j
.text:00403A7E                 inc     [esp+4Ch+var_28]
.text:00403A82                 mov     esi, [esp+4Ch+var_28]
.text:00403A86                 lea     eax, [esi+ebp]
.text:00403A89                 cmp     eax, [esp+4Ch+arg_C]
.text:00403A8D                 jnb     loc_403990
.text:00403A93                 mov     edi, [esp+4Ch+Str]
.text:00403A97                 cmp     byte ptr [eax+edi], 0
.text:00403A9B                 jnz     short loc_403A7E
.text:00403A9D                 jmp     loc_403990
.text:00403AA2 ; ---------------------------------------------------------------------------
.text:00403AA2
.text:00403AA2 loc_403AA2:                             ; CODE XREF: sub_4031F0+765↑j
.text:00403AA2                 mov     [esp+4Ch+var_29], 0
.text:00403AA7                 jmp     loc_403990
.text:00403AAC ; ---------------------------------------------------------------------------
.text:00403AAC
.text:00403AAC loc_403AAC:                             ; CODE XREF: sub_4031F0+72A↑j
.text:00403AAC                 mov     edx, [esp+4Ch+Str]
.text:00403AB0                 mov     [esp+4Ch+C], edx ; Str
.text:00403AB3                 call    strlen
.text:00403AB8                 mov     [esp+4Ch+arg_C], eax
.text:00403ABC                 jmp     loc_403920
.text:00403AC1 ; ---------------------------------------------------------------------------
.text:00403AC1
.text:00403AC1 loc_403AC1:                             ; CODE XREF: sub_4031F0+105↑j
.text:00403AC1                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:00403AC1                 mov     dl, bl          ; jumptable 004032F5 case 92
.text:00403AC3                 jmp     loc_4035F4
.text:00403AC8 ; ---------------------------------------------------------------------------
.text:00403AC8
.text:00403AC8 loc_403AC8:                             ; CODE XREF: sub_4031F0+105↑j
.text:00403AC8                                         ; sub_4031F0+902↓j
.text:00403AC8                                         ; DATA XREF: ...
.text:00403AC8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004032F5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403ACD                 jnz     def_4036F2      ; jumptable 004032F5 cases 37,43-58,65-90,93,95,97-122
.text:00403ACD                                         ; jumptable 004036F2 default case, cases 34-38,42-44,46,48-59
.text:00403AD3                 jmp     loc_4035FB      ; jumptable 004039C2 cases 91,92,94,96,124
.text:00403AD8 ; ---------------------------------------------------------------------------
.text:00403AD8
.text:00403AD8 loc_403AD8:                             ; CODE XREF: sub_4031F0+105↑j
.text:00403AD8                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:00403AD8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004032F5 cases 123,125
.text:00403ADD                 jz      short loc_403AF4
.text:00403ADF                 cmp     [esp+4Ch+arg_C], 1
.text:00403AE4
.text:00403AE4 loc_403AE4:                             ; CODE XREF: sub_4031F0+90C↓j
.text:00403AE4                 jnz     def_4036F2      ; jumptable 004032F5 cases 37,43-58,65-90,93,95,97-122
.text:00403AE4                                         ; jumptable 004036F2 default case, cases 34-38,42-44,46,48-59
.text:00403AEA
.text:00403AEA loc_403AEA:                             ; CODE XREF: sub_4031F0+105↑j
.text:00403AEA                                         ; DATA XREF: sub_4031F0:jpt_4032F5↑o
.text:00403AEA                 test    ebp, ebp        ; jumptable 004032F5 cases 35,126
.text:00403AEC                 jnz     def_4036F2      ; jumptable 004032F5 cases 37,43-58,65-90,93,95,97-122
.text:00403AEC                                         ; jumptable 004036F2 default case, cases 34-38,42-44,46,48-59
.text:00403AF2                 jmp     short loc_403AC8 ; jumptable 004032F5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403AF4 ; ---------------------------------------------------------------------------
.text:00403AF4
.text:00403AF4 loc_403AF4:                             ; CODE XREF: sub_4031F0+8ED↑j
.text:00403AF4                 mov     esi, [esp+4Ch+Str]
.text:00403AF8                 cmp     byte ptr [esi+1], 0
.text:00403AFC                 jmp     short loc_403AE4
.text:00403AFE ; ---------------------------------------------------------------------------
.text:00403AFE
.text:00403AFE loc_403AFE:                             ; CODE XREF: sub_4031F0:loc_40328F↑j
.text:00403AFE                 test    ebp, ebp
.text:00403B00                 jnz     short loc_403B0D
.text:00403B02                 cmp     [esp+4Ch+arg_10], 1
.text:00403B07                 jz      loc_4035FB      ; jumptable 004039C2 cases 91,92,94,96,124
.text:00403B0D
.text:00403B0D loc_403B0D:                             ; CODE XREF: sub_4031F0+910↑j
.text:00403B0D                 mov     esi, [esp+4Ch+var_1C]
.text:00403B11                 test    esi, esi
.text:00403B13                 jz      short loc_403B48
.text:00403B15                 mov     edi, [esp+4Ch+var_1C]
.text:00403B19                 movzx   eax, byte ptr [edi]
.text:00403B1C                 test    al, al
.text:00403B1E                 jz      short loc_403B48
.text:00403B20
.text:00403B20 loc_403B20:                             ; CODE XREF: sub_4031F0+956↓j
.text:00403B20                 mov     ebp, [esp+4Ch+arg_4]
.text:00403B24                 cmp     [esp+4Ch+var_34], ebp
.text:00403B28                 jnb     short loc_403B35
.text:00403B2A                 mov     ecx, [esp+4Ch+arg_0]
.text:00403B2E                 mov     ebx, [esp+4Ch+var_34]
.text:00403B32                 mov     [ebx+ecx], al
.text:00403B35
.text:00403B35 loc_403B35:                             ; CODE XREF: sub_4031F0+938↑j
.text:00403B35                 inc     [esp+4Ch+var_1C]
.text:00403B39                 inc     [esp+4Ch+var_34]
.text:00403B3D                 mov     edx, [esp+4Ch+var_1C]
.text:00403B41                 movzx   eax, byte ptr [edx]
.text:00403B44                 test    al, al
.text:00403B46                 jnz     short loc_403B20
.text:00403B48
.text:00403B48 loc_403B48:                             ; CODE XREF: sub_4031F0+923↑j
.text:00403B48                                         ; sub_4031F0+92E↑j
.text:00403B48                 mov     eax, [esp+4Ch+arg_4]
.text:00403B4C                 cmp     [esp+4Ch+var_34], eax
.text:00403B50                 jnb     short loc_403B5E
.text:00403B52                 mov     edi, [esp+4Ch+arg_0]
.text:00403B56                 mov     esi, [esp+4Ch+var_34]
.text:00403B5A                 mov     byte ptr [esi+edi], 0
.text:00403B5E
.text:00403B5E loc_403B5E:                             ; CODE XREF: sub_4031F0+960↑j
.text:00403B5E                 mov     eax, [esp+4Ch+var_34]
.text:00403B62                 jmp     loc_40362F
.text:00403B67 ; ---------------------------------------------------------------------------
.text:00403B67
.text:00403B67 loc_403B67:                             ; CODE XREF: sub_4031F0+95↑j
.text:00403B67                 mov     ebx, [esp+4Ch+Str]
.text:00403B6B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403B70                 jmp     loc_40328F
.text:00403B75 ; ---------------------------------------------------------------------------
.text:00403B75
.text:00403B75 loc_403B75:                             ; CODE XREF: sub_4031F0+3D↑j
.text:00403B75                                         ; DATA XREF: sub_4031F0:jpt_40322D↑o
.text:00403B75                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040322D case 2
.text:00403B79                 cmp     [esp+4Ch+var_34], edx
.text:00403B7D                 jnb     short loc_403B86
.text:00403B7F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403B83                 mov     byte ptr [ecx], 27h ; '''
.text:00403B86
.text:00403B86 loc_403B86:                             ; CODE XREF: sub_4031F0+98D↑j
.text:00403B86                 mov     [esp+4Ch+var_34], 1
.text:00403B8E                 mov     [esp+4Ch+var_1C], 4031DEh
.text:00403B96                 jmp     loc_403276
.text:00403B9B ; ---------------------------------------------------------------------------
.text:00403B9B
.text:00403B9B loc_403B9B:                             ; CODE XREF: sub_4031F0+3D↑j
.text:00403B9B                                         ; DATA XREF: sub_4031F0:jpt_40322D↑o
.text:00403B9B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040322D case 4
.text:00403BA0                 jmp     def_40322D      ; jumptable 0040322D default case, cases 0,1
.text:00403BA5 ; ---------------------------------------------------------------------------
.text:00403BA5
.text:00403BA5 loc_403BA5:                             ; CODE XREF: sub_4031F0+3D↑j
.text:00403BA5                                         ; DATA XREF: sub_4031F0:jpt_40322D↑o
.text:00403BA5                 mov     [esp+4Ch+C], 4031E0h ; jumptable 0040322D cases 5,6
.text:00403BAC                 call    ds:libintl_gettext
.text:00403BB2                 cmp     eax, 4031E0h
.text:00403BB7                 mov     edi, eax
.text:00403BB9                 jz      short loc_403C30
.text:00403BBB
.text:00403BBB loc_403BBB:                             ; CODE XREF: sub_4031F0+A45↓j
.text:00403BBB                                         ; sub_4031F0+A4C↓j
.text:00403BBB                 mov     [esp+4Ch+C], 4031DEh
.text:00403BC2                 call    ds:libintl_gettext
.text:00403BC8                 cmp     eax, 4031DEh
.text:00403BCD                 mov     edx, eax
.text:00403BCF                 jz      short loc_403C22
.text:00403BD1
.text:00403BD1 loc_403BD1:                             ; CODE XREF: sub_4031F0+A37↓j
.text:00403BD1                                         ; sub_4031F0+A3E↓j
.text:00403BD1                 mov     [esp+4Ch+var_1C], edi
.text:00403BD5                 cmp     byte ptr [edi], 0
.text:00403BD8                 jz      short loc_403C08
.text:00403BDA
.text:00403BDA loc_403BDA:                             ; CODE XREF: sub_4031F0+A16↓j
.text:00403BDA                 mov     ecx, [esp+4Ch+arg_4]
.text:00403BDE                 cmp     [esp+4Ch+var_34], ecx
.text:00403BE2                 jnb     short loc_403BF7
.text:00403BE4                 mov     ebp, [esp+4Ch+var_1C]
.text:00403BE8                 mov     edi, [esp+4Ch+arg_0]
.text:00403BEC                 mov     esi, [esp+4Ch+var_34]
.text:00403BF0                 movzx   ebx, byte ptr [ebp+0]
.text:00403BF4                 mov     [esi+edi], bl
.text:00403BF7
.text:00403BF7 loc_403BF7:                             ; CODE XREF: sub_4031F0+9F2↑j
.text:00403BF7                 inc     [esp+4Ch+var_1C]
.text:00403BFB                 inc     [esp+4Ch+var_34]
.text:00403BFF                 mov     eax, [esp+4Ch+var_1C]
.text:00403C03                 cmp     byte ptr [eax], 0
.text:00403C06                 jnz     short loc_403BDA
.text:00403C08
.text:00403C08 loc_403C08:                             ; CODE XREF: sub_4031F0+9E8↑j
.text:00403C08                 mov     [esp+4Ch+var_21], 1
.text:00403C0D                 mov     [esp+4Ch+var_1C], edx
.text:00403C11                 mov     [esp+4Ch+C], edx ; Str
.text:00403C14                 call    strlen
.text:00403C19                 mov     [esp+4Ch+var_20], eax
.text:00403C1D                 jmp     def_40322D      ; jumptable 0040322D default case, cases 0,1
.text:00403C22 ; ---------------------------------------------------------------------------
.text:00403C22
.text:00403C22 loc_403C22:                             ; CODE XREF: sub_4031F0+9DF↑j
.text:00403C22                 cmp     [esp+4Ch+arg_10], 6
.text:00403C27                 jnz     short loc_403BD1
.text:00403C29                 mov     edx, offset asc_4031DC ; "\"'`"
.text:00403C2E                 jmp     short loc_403BD1
.text:00403C30 ; ---------------------------------------------------------------------------
.text:00403C30
.text:00403C30 loc_403C30:                             ; CODE XREF: sub_4031F0+9C9↑j
.text:00403C30                 cmp     [esp+4Ch+arg_10], 6
.text:00403C35                 jnz     short loc_403BBB
.text:00403C37                 mov     edi, offset asc_4031DC ; "\"'`"
.text:00403C3C                 jmp     loc_403BBB
.text:00403C3C sub_4031F0      endp
.text:00403C3C
.text:00403C41 ; ---------------------------------------------------------------------------
.text:00403C41                 jmp     short loc_403C50
.text:00403C41 ; ---------------------------------------------------------------------------
.text:00403C43                 align 10h
.text:00403C50
.text:00403C50 loc_403C50:                             ; CODE XREF: .text:00403C41↑j
.text:00403C50                 sub     esp, 0Ch
.text:00403C53                 mov     [esp+4], ebx
.text:00403C57                 mov     [esp+8], esi
.text:00403C5B                 call    _errno
.text:00403C60                 mov     esi, [eax]
.text:00403C62                 mov     dword ptr [esp], 24h ; '$'
.text:00403C69                 call    sub_402ED0
.text:00403C6E                 mov     edx, [esp+10h]
.text:00403C72                 mov     ebx, eax
.text:00403C74                 test    edx, edx
.text:00403C76                 jz      short loc_403CC1
.text:00403C78
.text:00403C78 loc_403C78:                             ; CODE XREF: .text:00403CC6↓j
.text:00403C78                 mov     ecx, [edx]
.text:00403C7A                 mov     [ebx], ecx
.text:00403C7C                 mov     ecx, [edx+4]
.text:00403C7F                 mov     [ebx+4], ecx
.text:00403C82                 mov     ecx, [edx+8]
.text:00403C85                 mov     [ebx+8], ecx
.text:00403C88                 mov     ecx, [edx+0Ch]
.text:00403C8B                 mov     [ebx+0Ch], ecx
.text:00403C8E                 mov     ecx, [edx+10h]
.text:00403C91                 mov     [ebx+10h], ecx
.text:00403C94                 mov     ecx, [edx+14h]
.text:00403C97                 mov     [ebx+14h], ecx
.text:00403C9A                 mov     ecx, [edx+18h]
.text:00403C9D                 mov     [ebx+18h], ecx
.text:00403CA0                 mov     ecx, [edx+1Ch]
.text:00403CA3                 mov     [ebx+1Ch], ecx
.text:00403CA6                 mov     ecx, [edx+20h]
.text:00403CA9                 mov     [ebx+20h], ecx
.text:00403CAC                 call    _errno
.text:00403CB1                 mov     [eax], esi
.text:00403CB3                 mov     esi, [esp+8]
.text:00403CB7                 mov     eax, ebx
.text:00403CB9                 mov     ebx, [esp+4]
.text:00403CBD                 add     esp, 0Ch
.text:00403CC0                 retn
.text:00403CC1 ; ---------------------------------------------------------------------------
.text:00403CC1
.text:00403CC1 loc_403CC1:                             ; CODE XREF: .text:00403C76↑j
.text:00403CC1                 mov     edx, offset dword_409140
.text:00403CC6                 jmp     short loc_403C78
.text:00403CC6 ; ---------------------------------------------------------------------------
.text:00403CC8                 align 10h
.text:00403CD0                 mov     eax, [esp+4]
.text:00403CD4                 test    eax, eax
.text:00403CD6                 jz      short loc_403CE0
.text:00403CD8
.text:00403CD8 loc_403CD8:                             ; CODE XREF: .text:00403CE5↓j
.text:00403CD8                 mov     eax, [eax]
.text:00403CDA                 retn
.text:00403CDA ; ---------------------------------------------------------------------------
.text:00403CDB                 align 10h
.text:00403CE0
.text:00403CE0 loc_403CE0:                             ; CODE XREF: .text:00403CD6↑j
.text:00403CE0                 mov     eax, offset dword_409140
.text:00403CE5                 jmp     short loc_403CD8
.text:00403CE5 ; ---------------------------------------------------------------------------
.text:00403CE7                 align 10h
.text:00403CF0                 mov     edx, [esp+4]
.text:00403CF4                 test    edx, edx
.text:00403CF6                 jz      short loc_403D00
.text:00403CF8
.text:00403CF8 loc_403CF8:                             ; CODE XREF: .text:00403D05↓j
.text:00403CF8                 mov     ecx, [esp+8]
.text:00403CFC                 mov     [edx], ecx
.text:00403CFE                 retn
.text:00403CFE ; ---------------------------------------------------------------------------
.text:00403CFF                 align 10h
.text:00403D00
.text:00403D00 loc_403D00:                             ; CODE XREF: .text:00403CF6↑j
.text:00403D00                 mov     edx, offset dword_409140
.text:00403D05                 jmp     short loc_403CF8
.text:00403D05 ; ---------------------------------------------------------------------------
.text:00403D07                 align 10h
.text:00403D10                 sub     esp, 8
.text:00403D13                 mov     eax, [esp+0Ch]
.text:00403D17                 movzx   ecx, byte ptr [esp+10h]
.text:00403D1C                 mov     [esp], ebx
.text:00403D1F                 mov     ebx, [esp+14h]
.text:00403D23                 mov     [esp+4], esi
.text:00403D27                 mov     dl, cl
.text:00403D29                 shr     dl, 5
.text:00403D2C                 movzx   edx, dl
.text:00403D2F                 shl     edx, 2
.text:00403D32                 test    eax, eax
.text:00403D34                 lea     esi, [edx+eax+4]
.text:00403D38                 jz      short loc_403D60
.text:00403D3A
.text:00403D3A loc_403D3A:                             ; CODE XREF: .text:00403D66↓j
.text:00403D3A                 mov     edx, [esi]
.text:00403D3C                 and     ecx, 1Fh
.text:00403D3F                 and     ebx, 1
.text:00403D42                 mov     eax, edx
.text:00403D44                 shr     eax, cl
.text:00403D46                 and     eax, 1
.text:00403D49                 xor     ebx, eax
.text:00403D4B                 shl     ebx, cl
.text:00403D4D                 xor     edx, ebx
.text:00403D4F                 mov     [esi], edx
.text:00403D51                 mov     ebx, [esp]
.text:00403D54                 mov     esi, [esp+4]
.text:00403D58                 add     esp, 8
.text:00403D5B                 retn
.text:00403D5B ; ---------------------------------------------------------------------------
.text:00403D5C                 align 10h
.text:00403D60
.text:00403D60 loc_403D60:                             ; CODE XREF: .text:00403D38↑j
.text:00403D60                 lea     esi, dword_409144[edx]
.text:00403D66                 jmp     short loc_403D3A
.text:00403D66 ; ---------------------------------------------------------------------------
.text:00403D68                 align 10h
.text:00403D70                 sub     esp, 2Ch
.text:00403D73                 mov     [esp+24h], ebx
.text:00403D77                 mov     ebx, [esp+40h]
.text:00403D7B                 mov     [esp+28h], esi
.text:00403D7F                 test    ebx, ebx
.text:00403D81                 jz      short loc_403DD0
.text:00403D83
.text:00403D83 loc_403D83:                             ; CODE XREF: .text:00403DD5↓j
.text:00403D83                 call    _errno
.text:00403D88                 mov     esi, [eax]
.text:00403D8A                 mov     [esp+14h], ebx
.text:00403D8E                 mov     edx, [ebx]
.text:00403D90                 mov     ecx, [esp+38h]
.text:00403D94                 mov     ebx, [esp+3Ch]
.text:00403D98                 mov     [esp+10h], edx
.text:00403D9C                 mov     edx, [esp+34h]
.text:00403DA0                 mov     [esp+0Ch], ebx
.text:00403DA4                 mov     [esp+8], ecx
.text:00403DA8                 mov     [esp+4], edx
.text:00403DAC                 mov     edx, [esp+30h]
.text:00403DB0                 mov     [esp], edx
.text:00403DB3                 call    sub_4031F0
.text:00403DB8                 mov     ebx, eax
.text:00403DBA                 call    _errno
.text:00403DBF                 mov     [eax], esi
.text:00403DC1                 mov     esi, [esp+28h]
.text:00403DC5                 mov     eax, ebx
.text:00403DC7                 mov     ebx, [esp+24h]
.text:00403DCB                 add     esp, 2Ch
.text:00403DCE                 retn
.text:00403DCE ; ---------------------------------------------------------------------------
.text:00403DCF                 align 10h
.text:00403DD0
.text:00403DD0 loc_403DD0:                             ; CODE XREF: .text:00403D81↑j
.text:00403DD0                 mov     ebx, offset dword_409140
.text:00403DD5                 jmp     short loc_403D83
.text:00403DD5 ; ---------------------------------------------------------------------------
.text:00403DD7                 align 10h
.text:00403DE0                 push    ebp
.text:00403DE1                 push    edi
.text:00403DE2                 push    esi
.text:00403DE3                 push    ebx
.text:00403DE4                 sub     esp, 2Ch
.text:00403DE7                 mov     ebp, [esp+48h]
.text:00403DEB                 call    _errno
.text:00403DF0                 mov     edx, [eax]
.text:00403DF2                 test    ebp, ebp
.text:00403DF4                 mov     ebx, ebp
.text:00403DF6                 mov     [esp+28h], edx
.text:00403DFA                 jz      loc_403EB0
.text:00403E00
.text:00403E00 loc_403E00:                             ; CODE XREF: .text:00403EB5↓j
.text:00403E00                 call    _errno
.text:00403E05                 mov     edi, [eax]
.text:00403E07                 mov     esi, ebp
.text:00403E09                 mov     [esp+14h], ebx
.text:00403E0D                 mov     ecx, [ebx]
.text:00403E0F                 mov     dword ptr [esp], 0
.text:00403E16                 mov     edx, [esp+44h]
.text:00403E1A                 mov     dword ptr [esp+4], 0
.text:00403E22                 mov     eax, [esp+40h]
.text:00403E26                 mov     [esp+10h], ecx
.text:00403E2A                 mov     [esp+0Ch], edx
.text:00403E2E                 mov     [esp+8], eax
.text:00403E32                 call    sub_4031F0
.text:00403E37                 mov     ebx, eax
.text:00403E39                 call    _errno
.text:00403E3E                 mov     [eax], edi
.text:00403E40                 lea     edi, [ebx+1]
.text:00403E43                 mov     [esp], edi
.text:00403E46                 call    sub_402ED0
.text:00403E4B                 mov     [esp+24h], eax
.text:00403E4F                 test    ebp, ebp
.text:00403E51                 jz      short loc_403EA2
.text:00403E53
.text:00403E53 loc_403E53:                             ; CODE XREF: .text:00403EA7↓j
.text:00403E53                 call    _errno
.text:00403E58                 mov     ebp, [eax]
.text:00403E5A                 mov     [esp+14h], esi
.text:00403E5E                 mov     ecx, [esi]
.text:00403E60                 mov     [esp+4], edi
.text:00403E64                 mov     edx, [esp+44h]
.text:00403E68                 mov     esi, [esp+24h]
.text:00403E6C                 mov     [esp+10h], ecx
.text:00403E70                 mov     eax, [esp+40h]
.text:00403E74                 mov     [esp+0Ch], edx
.text:00403E78                 mov     [esp], esi
.text:00403E7B                 mov     [esp+8], eax
.text:00403E7F                 call    sub_4031F0
.text:00403E84                 call    _errno
.text:00403E89                 mov     [eax], ebp
.text:00403E8B                 call    _errno
.text:00403E90                 mov     ebx, [esp+28h]
.text:00403E94                 mov     [eax], ebx
.text:00403E96                 mov     eax, [esp+24h]
.text:00403E9A                 add     esp, 2Ch
.text:00403E9D                 pop     ebx
.text:00403E9E                 pop     esi
.text:00403E9F                 pop     edi
.text:00403EA0                 pop     ebp
.text:00403EA1                 retn
.text:00403EA2 ; ---------------------------------------------------------------------------
.text:00403EA2
.text:00403EA2 loc_403EA2:                             ; CODE XREF: .text:00403E51↑j
.text:00403EA2                 mov     esi, offset dword_409140
.text:00403EA7                 jmp     short loc_403E53
.text:00403EA7 ; ---------------------------------------------------------------------------
.text:00403EA9                 align 10h
.text:00403EB0
.text:00403EB0 loc_403EB0:                             ; CODE XREF: .text:00403DFA↑j
.text:00403EB0                 mov     ebx, offset dword_409140
.text:00403EB5                 jmp     loc_403E00
.text:00403EB5 ; ---------------------------------------------------------------------------
.text:00403EBA                 align 10h
.text:00403EC0                 sub     esp, 1Ch
.text:00403EC3                 mov     edx, [esp+24h]
.text:00403EC7                 mov     dword ptr [esp+0Ch], offset dword_409140
.text:00403ECF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403ED7                 mov     [esp+4], edx
.text:00403EDB                 mov     edx, [esp+20h]
.text:00403EDF                 mov     [esp], edx
.text:00403EE2                 call    sub_404330
.text:00403EE7                 add     esp, 1Ch
.text:00403EEA                 retn
.text:00403EEA ; ---------------------------------------------------------------------------
.text:00403EEB                 align 10h
.text:00403EF0                 sub     esp, 1Ch
.text:00403EF3                 mov     edx, [esp+20h]
.text:00403EF7                 mov     dword ptr [esp+0Ch], offset dword_409140
.text:00403EFF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403F07                 mov     [esp+4], edx
.text:00403F0B                 mov     dword ptr [esp], 0
.text:00403F12                 call    sub_404330
.text:00403F17                 add     esp, 1Ch
.text:00403F1A                 retn
.text:00403F1A ; ---------------------------------------------------------------------------
.text:00403F1B                 align 10h
.text:00403F20
.text:00403F20 ; =============== S U B R O U T I N E =======================================
.text:00403F20
.text:00403F20
.text:00403F20 ; int __cdecl sub_403F20(int, int, char *)
.text:00403F20 sub_403F20      proc near               ; CODE XREF: .text:00402ADA↑p
.text:00403F20                                         ; sub_402AF0+1A↑p
.text:00403F20
.text:00403F20 var_BC          = dword ptr -0BCh
.text:00403F20 var_B8          = dword ptr -0B8h
.text:00403F20 var_B4          = dword ptr -0B4h
.text:00403F20 var_B0          = dword ptr -0B0h
.text:00403F20 var_AC          = dword ptr -0ACh
.text:00403F20 var_A8          = dword ptr -0A8h
.text:00403F20 var_A4          = dword ptr -0A4h
.text:00403F20 var_A0          = dword ptr -0A0h
.text:00403F20 var_9C          = dword ptr -9Ch
.text:00403F20 var_98          = dword ptr -98h
.text:00403F20 var_94          = dword ptr -94h
.text:00403F20 var_90          = dword ptr -90h
.text:00403F20 var_8C          = dword ptr -8Ch
.text:00403F20 var_7C          = dword ptr -7Ch
.text:00403F20 var_78          = dword ptr -78h
.text:00403F20 var_74          = dword ptr -74h
.text:00403F20 var_70          = dword ptr -70h
.text:00403F20 var_6C          = dword ptr -6Ch
.text:00403F20 var_68          = dword ptr -68h
.text:00403F20 var_64          = dword ptr -64h
.text:00403F20 var_60          = dword ptr -60h
.text:00403F20 var_5C          = dword ptr -5Ch
.text:00403F20 var_4C          = dword ptr -4Ch
.text:00403F20 var_48          = dword ptr -48h
.text:00403F20 var_44          = dword ptr -44h
.text:00403F20 var_40          = dword ptr -40h
.text:00403F20 var_3C          = dword ptr -3Ch
.text:00403F20 var_38          = dword ptr -38h
.text:00403F20 var_34          = dword ptr -34h
.text:00403F20 var_30          = dword ptr -30h
.text:00403F20 var_2C          = dword ptr -2Ch
.text:00403F20 arg_0           = dword ptr  4
.text:00403F20 arg_4           = dword ptr  8
.text:00403F20 arg_8           = dword ptr  0Ch
.text:00403F20
.text:00403F20                 push    ebp
.text:00403F21                 xor     eax, eax
.text:00403F23                 mov     ecx, 8
.text:00403F28                 push    edi
.text:00403F29                 push    esi
.text:00403F2A                 push    ebx
.text:00403F2B                 sub     esp, 0ACh
.text:00403F31                 mov     ebp, [esp+0BCh+arg_4]
.text:00403F38                 cld
.text:00403F39                 lea     edi, [esp+0BCh+var_A8]
.text:00403F3D                 mov     [esp+0BCh+var_AC], ebp
.text:00403F41                 rep stosd
.text:00403F43                 mov     eax, [esp+0BCh+var_8C]
.text:00403F47                 mov     edi, [esp+0BCh+var_AC]
.text:00403F4B                 mov     esi, [esp+0BCh+var_A8]
.text:00403F4F                 mov     [esp+0BCh+var_5C], eax
.text:00403F53                 mov     ebp, [esp+0BCh+var_A4]
.text:00403F57                 mov     eax, [esp+0BCh+var_AC]
.text:00403F5B                 mov     [esp+0BCh+var_7C], edi
.text:00403F5F                 mov     ecx, [esp+0BCh+var_94]
.text:00403F63                 mov     edi, [esp+0BCh+var_A0]
.text:00403F67                 mov     [esp+0BCh+var_78], esi
.text:00403F6B                 mov     edx, [esp+0BCh+var_90]
.text:00403F6F                 mov     esi, [esp+0BCh+var_9C]
.text:00403F73                 mov     [esp+0BCh+var_4C], eax
.text:00403F77                 mov     ebx, [esp+0BCh+var_98]
.text:00403F7B                 mov     eax, [esp+0BCh+var_A8]
.text:00403F7F                 mov     [esp+0BCh+var_74], ebp
.text:00403F83                 mov     [esp+0BCh+var_70], edi
.text:00403F87                 mov     [esp+0BCh+var_6C], esi
.text:00403F8B                 mov     [esp+0BCh+var_68], ebx
.text:00403F8F                 mov     [esp+0BCh+var_64], ecx
.text:00403F93                 mov     [esp+0BCh+var_60], edx
.text:00403F97                 mov     [esp+0BCh+var_48], eax
.text:00403F9B                 mov     [esp+0BCh+var_44], ebp
.text:00403F9F                 mov     [esp+0BCh+var_40], edi
.text:00403FA3                 mov     [esp+0BCh+var_3C], esi
.text:00403FAA                 mov     [esp+0BCh+var_38], ebx
.text:00403FB1                 mov     ebx, [esp+0BCh+var_8C]
.text:00403FB5                 mov     [esp+0BCh+var_30], edx
.text:00403FBC                 mov     edx, [esp+0BCh+arg_8]
.text:00403FC3                 mov     [esp+0BCh+var_34], ecx
.text:00403FCA                 lea     ecx, [esp+0BCh+var_4C]
.text:00403FCE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00403FD2                 mov     edx, [esp+0BCh+arg_0]
.text:00403FD9                 mov     [esp+0BCh+var_2C], ebx
.text:00403FE0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00403FE4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00403FEC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00403FEF                 call    sub_404330
.text:00403FF4                 add     esp, 0ACh
.text:00403FFA                 pop     ebx
.text:00403FFB                 pop     esi
.text:00403FFC                 pop     edi
.text:00403FFD                 pop     ebp
.text:00403FFE                 retn
.text:00403FFE sub_403F20      endp
.text:00403FFE
.text:00403FFE ; ---------------------------------------------------------------------------
.text:00403FFF                 align 10h
.text:00404000                 push    ebp
.text:00404001                 xor     eax, eax
.text:00404003                 mov     ecx, 8
.text:00404008                 push    edi
.text:00404009                 push    esi
.text:0040400A                 push    ebx
.text:0040400B                 sub     esp, 0ACh
.text:00404011                 mov     edx, [esp+0C4h]
.text:00404018                 cld
.text:00404019                 lea     edi, [esp+14h]
.text:0040401D                 mov     [esp+10h], edx
.text:00404021                 rep stosd
.text:00404023                 mov     eax, [esp+30h]
.text:00404027                 mov     ebp, [esp+10h]
.text:0040402B                 mov     edi, [esp+14h]
.text:0040402F                 mov     [esp+60h], eax
.text:00404033                 mov     esi, [esp+20h]
.text:00404037                 mov     eax, [esp+10h]
.text:0040403B                 mov     [esp+40h], ebp
.text:0040403F                 mov     ecx, [esp+28h]
.text:00404043                 mov     ebp, [esp+18h]
.text:00404047                 mov     [esp+44h], edi
.text:0040404B                 mov     edx, [esp+2Ch]
.text:0040404F                 mov     edi, [esp+1Ch]
.text:00404053                 mov     [esp+70h], eax
.text:00404057                 mov     ebx, [esp+24h]
.text:0040405B                 mov     eax, [esp+14h]
.text:0040405F                 mov     [esp+48h], ebp
.text:00404063                 mov     [esp+4Ch], edi
.text:00404067                 mov     [esp+50h], esi
.text:0040406B                 mov     [esp+54h], ebx
.text:0040406F                 mov     [esp+58h], ecx
.text:00404073                 mov     [esp+5Ch], edx
.text:00404077                 mov     [esp+74h], eax
.text:0040407B                 mov     [esp+78h], ebp
.text:0040407F                 mov     [esp+7Ch], edi
.text:00404083                 mov     [esp+80h], esi
.text:0040408A                 mov     [esp+84h], ebx
.text:00404091                 mov     esi, [esp+30h]
.text:00404095                 lea     ebx, [esp+70h]
.text:00404099                 mov     [esp+8Ch], edx
.text:004040A0                 mov     edx, [esp+0C8h]
.text:004040A7                 mov     [esp+88h], ecx
.text:004040AE                 mov     ecx, [esp+0CCh]
.text:004040B5                 mov     [esp+4], edx
.text:004040B9                 mov     edx, [esp+0C0h]
.text:004040C0                 mov     [esp+90h], esi
.text:004040C7                 mov     [esp+0Ch], ebx
.text:004040CB                 mov     [esp+8], ecx
.text:004040CF                 mov     [esp], edx
.text:004040D2                 call    sub_404330
.text:004040D7                 add     esp, 0ACh
.text:004040DD                 pop     ebx
.text:004040DE                 pop     esi
.text:004040DF                 pop     edi
.text:004040E0                 pop     ebp
.text:004040E1                 retn
.text:004040E1 ; ---------------------------------------------------------------------------
.text:004040E2                 align 10h
.text:004040F0                 push    ebp
.text:004040F1                 xor     eax, eax
.text:004040F3                 mov     ecx, 8
.text:004040F8                 push    edi
.text:004040F9                 push    esi
.text:004040FA                 push    ebx
.text:004040FB                 sub     esp, 0ACh
.text:00404101                 mov     edi, [esp+0C0h]
.text:00404108                 cld
.text:00404109                 mov     [esp+10h], edi
.text:0040410D                 lea     edi, [esp+14h]
.text:00404111                 rep stosd
.text:00404113                 mov     eax, [esp+30h]
.text:00404117                 mov     esi, [esp+10h]
.text:0040411B                 mov     ebx, [esp+14h]
.text:0040411F                 mov     [esp+60h], eax
.text:00404123                 mov     ebp, [esp+18h]
.text:00404127                 mov     eax, [esp+10h]
.text:0040412B                 mov     [esp+40h], esi
.text:0040412F                 mov     edi, [esp+1Ch]
.text:00404133                 mov     esi, [esp+20h]
.text:00404137                 mov     [esp+44h], ebx
.text:0040413B                 mov     ecx, [esp+28h]
.text:0040413F                 mov     edx, [esp+2Ch]
.text:00404143                 mov     [esp+70h], eax
.text:00404147                 mov     ebx, [esp+24h]
.text:0040414B                 mov     eax, [esp+14h]
.text:0040414F                 mov     [esp+48h], ebp
.text:00404153                 mov     [esp+4Ch], edi
.text:00404157                 mov     [esp+50h], esi
.text:0040415B                 mov     [esp+54h], ebx
.text:0040415F                 mov     [esp+58h], ecx
.text:00404163                 mov     [esp+5Ch], edx
.text:00404167                 mov     [esp+74h], eax
.text:0040416B                 mov     [esp+78h], ebp
.text:0040416F                 mov     [esp+7Ch], edi
.text:00404173                 mov     [esp+80h], esi
.text:0040417A                 mov     [esp+84h], ebx
.text:00404181                 mov     [esp+8Ch], edx
.text:00404188                 lea     edx, [esp+70h]
.text:0040418C                 mov     [esp+88h], ecx
.text:00404193                 mov     ecx, [esp+30h]
.text:00404197                 mov     [esp+0Ch], edx
.text:0040419B                 mov     edx, [esp+0C4h]
.text:004041A2                 mov     [esp+90h], ecx
.text:004041A9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004041B1                 mov     [esp+4], edx
.text:004041B5                 mov     dword ptr [esp], 0
.text:004041BC                 call    sub_404330
.text:004041C1                 add     esp, 0ACh
.text:004041C7                 pop     ebx
.text:004041C8                 pop     esi
.text:004041C9                 pop     edi
.text:004041CA                 pop     ebp
.text:004041CB                 retn
.text:004041CB ; ---------------------------------------------------------------------------
.text:004041CC                 align 10h
.text:004041D0                 push    edi
.text:004041D1                 push    esi
.text:004041D2                 push    ebx
.text:004041D3                 sub     esp, 40h
.text:004041D6                 mov     edx, ds:dword_40914C
.text:004041DC                 mov     ebx, ds:dword_409140
.text:004041E2                 mov     esi, ds:dword_409148
.text:004041E8                 mov     edi, ds:dword_409144
.text:004041EE                 mov     [esp+1Ch], edx
.text:004041F2                 mov     ecx, ds:dword_409150
.text:004041F8                 mov     edx, ds:dword_409160
.text:004041FE                 mov     [esp+10h], ebx
.text:00404202                 mov     ebx, ds:dword_409154
.text:00404208                 mov     [esp+30h], edx
.text:0040420C                 movzx   edx, byte ptr [esp+54h]
.text:00404211                 mov     [esp+18h], esi
.text:00404215                 mov     esi, ds:dword_40915C
.text:0040421B                 mov     [esp+14h], edi
.text:0040421F                 mov     edi, ds:dword_409158
.text:00404225                 mov     [esp+20h], ecx
.text:00404229                 mov     cl, dl
.text:0040422B                 shr     cl, 5
.text:0040422E                 mov     [esp+24h], ebx
.text:00404232                 movzx   ebx, cl
.text:00404235                 mov     [esp+2Ch], esi
.text:00404239                 lea     esi, [esp+10h]
.text:0040423D                 mov     [esp+28h], edi
.text:00404241                 lea     edi, [esi+ebx*4]
.text:00404244                 mov     ebx, edx
.text:00404246                 mov     edx, [edi+4]
.text:00404249                 and     ebx, 1Fh
.text:0040424C                 mov     cl, bl
.text:0040424E                 mov     eax, edx
.text:00404250                 shr     eax, cl
.text:00404252                 and     eax, 1
.text:00404255                 xor     eax, 1
.text:00404258                 shl     eax, cl
.text:0040425A                 xor     edx, eax
.text:0040425C                 mov     [edi+4], edx
.text:0040425F                 mov     edx, [esp+50h]
.text:00404263                 mov     [esp+0Ch], esi
.text:00404267                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040426F                 mov     [esp+4], edx
.text:00404273                 mov     dword ptr [esp], 0
.text:0040427A                 call    sub_404330
.text:0040427F                 add     esp, 40h
.text:00404282                 pop     ebx
.text:00404283                 pop     esi
.text:00404284                 pop     edi
.text:00404285                 retn
.text:00404285 ; ---------------------------------------------------------------------------
.text:00404286                 align 10h
.text:00404290
.text:00404290 ; =============== S U B R O U T I N E =======================================
.text:00404290
.text:00404290
.text:00404290 ; int __cdecl sub_404290(char *)
.text:00404290 sub_404290      proc near               ; CODE XREF: sub_402DB0+64↑p
.text:00404290
.text:00404290 var_4C          = dword ptr -4Ch
.text:00404290 var_48          = dword ptr -48h
.text:00404290 var_44          = dword ptr -44h
.text:00404290 var_40          = dword ptr -40h
.text:00404290 var_3C          = dword ptr -3Ch
.text:00404290 var_38          = dword ptr -38h
.text:00404290 var_34          = dword ptr -34h
.text:00404290 var_30          = dword ptr -30h
.text:00404290 var_2C          = dword ptr -2Ch
.text:00404290 var_28          = dword ptr -28h
.text:00404290 var_24          = dword ptr -24h
.text:00404290 var_20          = dword ptr -20h
.text:00404290 var_1C          = dword ptr -1Ch
.text:00404290 arg_0           = dword ptr  4
.text:00404290
.text:00404290                 sub     esp, 4Ch
.text:00404293                 mov     ecx, ds:dword_409140
.text:00404299                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004042A1                 mov     edx, ds:dword_409144
.text:004042A7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004042AE                 mov     [esp+4Ch+var_3C], ecx
.text:004042B2                 mov     ecx, ds:dword_40914C
.text:004042B8                 mov     [esp+4Ch+var_38], edx
.text:004042BC                 mov     edx, ds:dword_409148
.text:004042C2                 mov     [esp+4Ch+var_30], ecx
.text:004042C6                 mov     ecx, ds:dword_409150
.text:004042CC                 mov     eax, edx
.text:004042CE                 shr     eax, 1Ah
.text:004042D1                 and     eax, 1
.text:004042D4                 xor     eax, 1
.text:004042D7                 mov     [esp+4Ch+var_2C], ecx
.text:004042DB                 shl     eax, 1Ah
.text:004042DE                 mov     ecx, ds:dword_409154
.text:004042E4                 xor     edx, eax
.text:004042E6                 mov     [esp+4Ch+var_34], edx
.text:004042EA                 mov     edx, [esp+4Ch+arg_0]
.text:004042EE                 mov     [esp+4Ch+var_28], ecx
.text:004042F2                 mov     ecx, ds:dword_409158
.text:004042F8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004042FC                 mov     [esp+4Ch+var_24], ecx
.text:00404300                 mov     ecx, ds:dword_40915C
.text:00404306                 mov     [esp+4Ch+var_20], ecx
.text:0040430A                 mov     ecx, ds:dword_409160
.text:00404310                 mov     [esp+4Ch+var_1C], ecx
.text:00404314                 lea     ecx, [esp+4Ch+var_3C]
.text:00404318                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040431C                 call    sub_404330
.text:00404321                 add     esp, 4Ch
.text:00404324                 retn
.text:00404324 sub_404290      endp
.text:00404324
.text:00404324 ; ---------------------------------------------------------------------------
.text:00404325                 align 10h
.text:00404330
.text:00404330 ; =============== S U B R O U T I N E =======================================
.text:00404330
.text:00404330
.text:00404330 ; int __cdecl sub_404330(int, char *, int, int)
.text:00404330 sub_404330      proc near               ; CODE XREF: .text:00403EE2↑p
.text:00404330                                         ; .text:00403F12↑p ...
.text:00404330
.text:00404330 Block           = dword ptr -2Ch
.text:00404330 var_28          = dword ptr -28h
.text:00404330 Str             = dword ptr -24h
.text:00404330 var_20          = dword ptr -20h
.text:00404330 var_1C          = dword ptr -1Ch
.text:00404330 var_18          = dword ptr -18h
.text:00404330 var_14          = dword ptr -14h
.text:00404330 arg_0           = dword ptr  4
.text:00404330 arg_4           = dword ptr  8
.text:00404330 arg_8           = dword ptr  0Ch
.text:00404330 arg_C           = dword ptr  10h
.text:00404330
.text:00404330                 push    ebp
.text:00404331                 push    edi
.text:00404332                 push    esi
.text:00404333                 push    ebx
.text:00404334                 sub     esp, 1Ch
.text:00404337                 call    _errno
.text:0040433C                 mov     edx, [eax]
.text:0040433E                 mov     eax, [esp+2Ch+arg_0]
.text:00404342                 mov     [esp+2Ch+var_14], edx
.text:00404346                 test    eax, eax
.text:00404348                 js      loc_4044EA
.text:0040434E                 mov     eax, [esp+2Ch+arg_0]
.text:00404352                 cmp     dword_408020, eax
.text:00404358                 ja      short loc_4043D0
.text:0040435A                 mov     esi, eax
.text:0040435C                 inc     esi
.text:0040435D                 cmp     esi, 1FFFFFFFh
.text:00404363                 ja      loc_4044EF
.text:00404369                 mov     ebx, off_40802C
.text:0040436F                 cmp     ebx, offset dword_408024
.text:00404375                 jz      loc_4044C1
.text:0040437B
.text:0040437B loc_40437B:                             ; CODE XREF: sub_404330+1B5↓j
.text:0040437B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040437E                 lea     ecx, ds:0[esi*8]
.text:00404385                 mov     ebp, esi
.text:00404387                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040438B                 call    sub_402F60
.text:00404390                 mov     off_40802C, eax
.text:00404395                 mov     ebx, dword_408020
.text:0040439B                 sub     ebp, ebx
.text:0040439D                 lea     edi, [eax+ebx*8]
.text:004043A0                 lea     eax, ds:0[ebp*8]
.text:004043A7                 cmp     eax, 7
.text:004043AA                 jbe     short loc_4043C0
.text:004043AC                 test    edi, 4
.text:004043B2                 jz      short loc_4043C0
.text:004043B4                 mov     dword ptr [edi], 0
.text:004043BA                 sub     eax, 4
.text:004043BD                 add     edi, 4
.text:004043C0
.text:004043C0 loc_4043C0:                             ; CODE XREF: sub_404330+7A↑j
.text:004043C0                                         ; sub_404330+82↑j
.text:004043C0                 cld
.text:004043C1                 mov     ecx, eax
.text:004043C3                 shr     ecx, 2
.text:004043C6                 xor     eax, eax
.text:004043C8                 rep stosd
.text:004043CA                 mov     dword_408020, esi
.text:004043D0
.text:004043D0 loc_4043D0:                             ; CODE XREF: sub_404330+28↑j
.text:004043D0                 mov     esi, off_40802C
.text:004043D6                 mov     eax, [esp+2Ch+arg_0]
.text:004043DA                 mov     ebp, [esi+eax*8]
.text:004043DD                 mov     edi, [esi+eax*8+4]
.text:004043E1                 mov     esi, [esp+2Ch+arg_C]
.text:004043E5                 test    esi, esi
.text:004043E7                 jz      loc_4044B7
.text:004043ED
.text:004043ED loc_4043ED:                             ; CODE XREF: sub_404330+18C↓j
.text:004043ED                 call    _errno
.text:004043F2                 mov     ebx, [eax]
.text:004043F4                 mov     [esp+2Ch+var_18], esi ; int
.text:004043F8                 mov     ecx, [esi]
.text:004043FA                 mov     [esp+2Ch+Block], edi ; int
.text:004043FD                 mov     edx, [esp+2Ch+arg_8]
.text:00404401                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404405                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404409                 mov     ecx, [esp+2Ch+arg_4]
.text:0040440D                 mov     [esp+2Ch+var_20], edx ; int
.text:00404411                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404415                 call    sub_4031F0
.text:0040441A                 mov     esi, eax
.text:0040441C                 call    _errno
.text:00404421                 mov     [eax], ebx
.text:00404423                 cmp     ebp, esi
.text:00404425                 ja      short loc_40449B
.text:00404427                 lea     ebp, [esi+1]
.text:0040442A                 mov     ebx, off_40802C
.text:00404430                 cmp     edi, offset unk_409040
.text:00404436                 mov     esi, [esp+2Ch+arg_0]
.text:0040443A                 mov     [ebx+esi*8], ebp
.text:0040443D                 jz      short loc_40444D
.text:0040443F                 mov     [esp+2Ch+Block], edi ; Block
.text:00404442                 call    free
.text:00404447                 mov     ebx, off_40802C
.text:0040444D
.text:0040444D loc_40444D:                             ; CODE XREF: sub_404330+10D↑j
.text:0040444D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404450                 call    sub_402ED0
.text:00404455                 mov     esi, [esp+2Ch+arg_C]
.text:00404459                 mov     edi, eax
.text:0040445B                 mov     eax, [esp+2Ch+arg_0]
.text:0040445F                 test    esi, esi
.text:00404461                 mov     [ebx+eax*8+4], edi
.text:00404465                 jz      short loc_4044B0
.text:00404467
.text:00404467 loc_404467:                             ; CODE XREF: sub_404330+185↓j
.text:00404467                 call    _errno
.text:0040446C                 mov     ebx, [eax]
.text:0040446E                 mov     [esp+2Ch+var_18], esi ; int
.text:00404472                 mov     ecx, [esi]
.text:00404474                 mov     [esp+2Ch+Block], edi ; int
.text:00404477                 mov     edx, [esp+2Ch+arg_8]
.text:0040447B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040447F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404483                 mov     ecx, [esp+2Ch+arg_4]
.text:00404487                 mov     [esp+2Ch+var_20], edx ; int
.text:0040448B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040448F                 call    sub_4031F0
.text:00404494                 call    _errno
.text:00404499                 mov     [eax], ebx
.text:0040449B
.text:0040449B loc_40449B:                             ; CODE XREF: sub_404330+F5↑j
.text:0040449B                 call    _errno
.text:004044A0                 mov     ebp, [esp+2Ch+var_14]
.text:004044A4                 mov     [eax], ebp
.text:004044A6                 add     esp, 1Ch
.text:004044A9                 mov     eax, edi
.text:004044AB                 pop     ebx
.text:004044AC                 pop     esi
.text:004044AD                 pop     edi
.text:004044AE                 pop     ebp
.text:004044AF                 retn
.text:004044B0 ; ---------------------------------------------------------------------------
.text:004044B0
.text:004044B0 loc_4044B0:                             ; CODE XREF: sub_404330+135↑j
.text:004044B0                 mov     esi, offset dword_409140
.text:004044B5                 jmp     short loc_404467
.text:004044B7 ; ---------------------------------------------------------------------------
.text:004044B7
.text:004044B7 loc_4044B7:                             ; CODE XREF: sub_404330+B7↑j
.text:004044B7                 mov     esi, offset dword_409140
.text:004044BC                 jmp     loc_4043ED
.text:004044C1 ; ---------------------------------------------------------------------------
.text:004044C1
.text:004044C1 loc_4044C1:                             ; CODE XREF: sub_404330+45↑j
.text:004044C1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004044C8                 call    sub_402ED0
.text:004044CD                 mov     off_40802C, eax
.text:004044D2                 mov     edi, dword_408024
.text:004044D8                 mov     ebx, eax
.text:004044DA                 mov     ecx, off_408028
.text:004044E0                 mov     [eax], edi
.text:004044E2                 mov     [eax+4], ecx
.text:004044E5                 jmp     loc_40437B
.text:004044EA ; ---------------------------------------------------------------------------
.text:004044EA
.text:004044EA loc_4044EA:                             ; CODE XREF: sub_404330+18↑j
.text:004044EA                 call    abort
.text:004044EF ; ---------------------------------------------------------------------------
.text:004044EF
.text:004044EF loc_4044EF:                             ; CODE XREF: sub_404330+33↑j
.text:004044EF                 call    sub_404A20
.text:004044EF sub_404330      endp
.text:004044EF
.text:004044EF ; ---------------------------------------------------------------------------
.text:004044F4                 align 10h
.text:00404500 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404500                                         ; DATA XREF: .data:Buffer↓o
.text:00404532 ; const char Format[12]
.text:00404532 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4047F0+50↓o
.text:0040453E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040454E                 align 20h
.text:00404560
.text:00404560 ; =============== S U B R O U T I N E =======================================
.text:00404560
.text:00404560
.text:00404560 sub_404560      proc near               ; DATA XREF: sub_4047F0+100↓o
.text:00404560                 push    esp
.text:00404561                 push    69207369h
.text:00404566                 jnb     short loc_404588
.text:00404568                 db      66h
.text:00404568                 jb      short near ptr 45D0h
.text:0040456B                 and     gs:[ebx+6Fh], dh
.text:0040456F                 db      66h
.text:0040456F                 jz      short near ptr 45E9h
.text:00404572                 popa
.text:00404573                 jb      short loc_4045DA
.text:00404575                 cmp     esp, [eax]
.text:00404577                 jnb     short near ptr loc_4045DC+2
.text:00404579                 and     gs:[eax+ebp*2+65h], dh
.text:0040457E                 and     [ebx+6Fh], dh
.text:00404581                 jnz     short loc_4045F5
.text:00404583                 arpl    [ebp+20h], sp
.text:00404586                 outsw
.text:00404588
.text:00404588 loc_404588:                             ; CODE XREF: sub_404560+6↑j
.text:00404588                 jb      short loc_4045AA
.text:0040458A                 arpl    [edi+70h], bp
.text:0040458D                 jns     short loc_4045F8
.text:0040458F                 outsb
.text:00404590                 and     [bp+di+6Fh], ah
.text:00404594                 outsb
.text:00404595                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:0040459E                 and     [eax+ebp*2+65h], dl
.text:004045A2                 jb      short near ptr loc_404608+1
.text:004045A4                 and     [ecx+73h], ch
.text:004045A7                 and     [esi+4Fh], cl
.text:004045AA
.text:004045AA loc_4045AA:                             ; CODE XREF: sub_404560:loc_404588↑j
.text:004045AA                 or      dh, [edi+61h]
.text:004045AD                 jb      short loc_404621
.text:004045AF                 popa
.text:004045B0                 outsb
.text:004045B1                 jz      short loc_40462C
.text:004045B3                 cmp     esp, [eax]
.text:004045B5                 outsb
.text:004045B6                 outsd
.text:004045B7                 jz      short loc_4045D9
.text:004045B9                 db      65h
.text:004045B9                 jbe     short loc_404621
.text:004045BC                 outsb
.text:004045BD                 and     [esi+6Fh], ah
.text:004045C0                 jb      short near ptr loc_4045E0+2
.text:004045C2                 dec     ebp
.text:004045C3                 inc     ebp
.text:004045C4                 push    edx
.text:004045C5                 inc     ebx
.text:004045C6                 dec     eax
.text:004045C7                 inc     ecx
.text:004045C8                 dec     esi
.text:004045C9                 push    esp
.text:004045CA                 inc     ecx
.text:004045CB                 inc     edx
.text:004045CC                 dec     ecx
.text:004045CD                 dec     esp
.text:004045CE                 dec     ecx
.text:004045CF                 push    esp
.text:004045D0                 pop     ecx
.text:004045D1                 and     [edi+72h], ch
.text:004045D4                 and     [esi+49h], al
.text:004045D7                 push    esp
.text:004045D8                 dec     esi
.text:004045D9
.text:004045D9 loc_4045D9:                             ; CODE XREF: sub_404560+57↑j
.text:004045D9                 inc     ebp
.text:004045DA
.text:004045DA loc_4045DA:                             ; CODE XREF: sub_404560+13↑j
.text:004045DA                 push    ebx
.text:004045DB                 push    ebx
.text:004045DC
.text:004045DC loc_4045DC:                             ; CODE XREF: sub_404560+17↑j
.text:004045DC                 and     [esi+4Fh], al
.text:004045DF                 push    edx
.text:004045E0
.text:004045E0 loc_4045E0:                             ; CODE XREF: sub_404560+60↑j
.text:004045E0                 and     [ecx+20h], al
.text:004045E3                 push    eax
.text:004045E4                 inc     ecx
.text:004045E5                 push    edx
.text:004045E6                 push    esp
.text:004045E7                 dec     ecx
.text:004045E8                 inc     ebx
.text:004045E9                 push    ebp
.text:004045EA                 dec     esp
.text:004045EB                 inc     ecx
.text:004045EC                 push    edx
.text:004045ED                 and     [eax+55h], dl
.text:004045F0                 push    edx
.text:004045F1                 push    eax
.text:004045F2                 dec     edi
.text:004045F3                 push    ebx
.text:004045F4                 inc     ebp
.text:004045F5
.text:004045F5 loc_4045F5:                             ; CODE XREF: sub_404560+21↑j
.text:004045F5                 or      al, cs:[eax]
.text:004045F8
.text:004045F8 loc_4045F8:                             ; CODE XREF: sub_404560+2D↑j
.text:004045F8                                         ; DATA XREF: sub_4047F0:loc_404931↓o
.text:004045F8                 push    edi
.text:004045F9                 jb      short near ptr loc_404663+1
.text:004045FB                 jz      short near ptr loc_404670+1
.text:004045FD                 outs    dx, byte ptr gs:[esi]
.text:004045FF                 and     [edx+79h], ah
.text:00404602                 and     ds:6E612073h, ah
.text:00404608
.text:00404608 loc_404608:                             ; CODE XREF: sub_404560+42↑j
.text:00404608                 and     fs:0A2E73h, ah
.text:0040460F
.text:0040460F loc_40460F:                             ; DATA XREF: sub_4047F0:loc_40493D↓o
.text:0040460F                 push    edi
.text:00404610                 jb      short near ptr loc_40467A+1
.text:00404612                 jz      short loc_404688
.text:00404614                 outs    dx, byte ptr gs:[esi]
.text:00404616                 and     [edx+79h], ah
.text:00404619                 and     ds:25202C73h, ah
.text:0040461F                 jnb     short near ptr loc_40464A+3
.text:00404621
.text:00404621 loc_404621:                             ; CODE XREF: sub_404560+4D↑j
.text:00404621                                         ; sub_404560+59↑j
.text:00404621                 and     [ecx+6Eh], ah
.text:00404624                 and     fs:0A2E73h, ah
.text:0040462B                 nop
.text:0040462C
.text:0040462C loc_40462C:                             ; CODE XREF: sub_404560+51↑j
.text:0040462C                 nop
.text:0040462D                 nop
.text:0040462E                 nop
.text:0040462F                 nop
.text:00404630                 nop
.text:00404631                 nop
.text:00404632                 nop
.text:00404633                 nop
.text:00404634                 nop
.text:00404635                 nop
.text:00404636                 nop
.text:00404637                 nop
.text:00404638                 nop
.text:00404639                 nop
.text:0040463A                 nop
.text:0040463B                 nop
.text:0040463C                 nop
.text:0040463D                 nop
.text:0040463E                 nop
.text:0040463F                 nop
.text:0040463F sub_404560      endp ; sp-analysis failed
.text:0040463F
.text:00404640
.text:00404640 ; =============== S U B R O U T I N E =======================================
.text:00404640
.text:00404640
.text:00404640 sub_404640      proc near               ; DATA XREF: sub_4047F0:loc_404949↓o
.text:00404640                 push    edi
.text:00404641                 jb      short near ptr loc_4046AA+2
.text:00404643                 jz      short near ptr loc_4046B8+1
.text:00404645                 outs    dx, byte ptr gs:[esi]
.text:00404647                 and     [edx+79h], ah
.text:0040464A
.text:0040464A loc_40464A:                             ; CODE XREF: sub_404560+BF↑j
.text:0040464A                 and     ds:25202C73h, ah
.text:00404650                 jnb     short near ptr loc_40467D+1
.text:00404652                 and     ds:610A2C73h, ah
.text:00404658                 outsb
.text:00404659                 and     fs:0A2E73h, ah
.text:00404660
.text:00404660 loc_404660:                             ; DATA XREF: sub_4047F0:loc_404955↓o
.text:00404660                 push    edi
.text:00404661                 jb      short loc_4046CC
.text:00404663
.text:00404663 loc_404663:                             ; CODE XREF: sub_404560+99↑j
.text:00404663                 jz      short loc_4046D9
.text:00404665                 outs    dx, byte ptr gs:[esi]
.text:00404667                 and     [edx+79h], ah
.text:0040466A                 and     ds:25202C73h, ah
.text:00404670
.text:00404670 loc_404670:                             ; CODE XREF: sub_404560+9B↑j
.text:00404670                 jnb     short loc_40469E
.text:00404672                 and     ds:250A2C73h, ah
.text:00404678                 jnb     short near ptr loc_4046A5+1
.text:0040467A
.text:0040467A loc_40467A:                             ; CODE XREF: sub_404560+B0↑j
.text:0040467A                 and     [ecx+6Eh], ah
.text:0040467D
.text:0040467D loc_40467D:                             ; CODE XREF: sub_404640+10↑j
.text:0040467D                 and     fs:0A2E73h, ah
.text:00404684                 nop
.text:00404685                 nop
.text:00404686                 nop
.text:00404687                 nop
.text:00404688
.text:00404688 loc_404688:                             ; CODE XREF: sub_404560+B2↑j
.text:00404688                 nop
.text:00404689                 nop
.text:0040468A                 nop
.text:0040468B                 nop
.text:0040468C                 nop
.text:0040468D                 nop
.text:0040468E                 nop
.text:0040468F                 nop
.text:00404690                 nop
.text:00404691                 nop
.text:00404692                 nop
.text:00404693                 nop
.text:00404694                 nop
.text:00404695                 nop
.text:00404696                 nop
.text:00404697                 nop
.text:00404698                 nop
.text:00404699                 nop
.text:0040469A                 nop
.text:0040469B                 nop
.text:0040469C                 nop
.text:0040469D                 nop
.text:0040469E
.text:0040469E loc_40469E:                             ; CODE XREF: sub_404640:loc_404670↑j
.text:0040469E                 nop
.text:0040469F                 nop
.text:0040469F sub_404640      endp ; sp-analysis failed
.text:0040469F
.text:004046A0
.text:004046A0 ; =============== S U B R O U T I N E =======================================
.text:004046A0
.text:004046A0
.text:004046A0 sub_4046A0      proc near               ; DATA XREF: sub_4047F0:loc_404961↓o
.text:004046A0                 push    edi
.text:004046A1                 jb      short loc_40470C
.text:004046A3                 jz      short loc_404719
.text:004046A5
.text:004046A5 loc_4046A5:                             ; CODE XREF: sub_404640+38↑j
.text:004046A5                 outs    dx, byte ptr gs:[esi]
.text:004046A7                 and     [edx+79h], ah
.text:004046AA
.text:004046AA loc_4046AA:                             ; CODE XREF: sub_404640+1↑j
.text:004046AA                 and     ds:25202C73h, ah
.text:004046B0                 jnb     short loc_4046DE
.text:004046B2                 and     ds:250A2C73h, ah
.text:004046B8
.text:004046B8 loc_4046B8:                             ; CODE XREF: sub_404640+3↑j
.text:004046B8                 jnb     short near ptr loc_4046E5+1
.text:004046BA                 and     ds:61202C73h, ah
.text:004046C0                 outsb
.text:004046C1                 and     fs:0A2E73h, ah
.text:004046C8                 nop
.text:004046C9                 nop
.text:004046CA                 nop
.text:004046CB                 nop
.text:004046CC
.text:004046CC loc_4046CC:                             ; CODE XREF: sub_404640+21↑j
.text:004046CC                 nop
.text:004046CD                 nop
.text:004046CE                 nop
.text:004046CF                 nop
.text:004046D0                 nop
.text:004046D1                 nop
.text:004046D2                 nop
.text:004046D3                 nop
.text:004046D4                 nop
.text:004046D5                 nop
.text:004046D6                 nop
.text:004046D7                 nop
.text:004046D8                 nop
.text:004046D9
.text:004046D9 loc_4046D9:                             ; CODE XREF: sub_404640:loc_404663↑j
.text:004046D9                 nop
.text:004046DA                 nop
.text:004046DB                 nop
.text:004046DC                 nop
.text:004046DD                 nop
.text:004046DE
.text:004046DE loc_4046DE:                             ; CODE XREF: sub_4046A0+10↑j
.text:004046DE                 nop
.text:004046DF                 nop
.text:004046DF sub_4046A0      endp ; sp-analysis failed
.text:004046DF
.text:004046E0
.text:004046E0 ; =============== S U B R O U T I N E =======================================
.text:004046E0
.text:004046E0
.text:004046E0 sub_4046E0      proc near               ; DATA XREF: sub_4047F0:loc_40496D↓o
.text:004046E0                 push    edi
.text:004046E1                 jb      short near ptr loc_404749+3
.text:004046E3                 jz      short loc_404759
.text:004046E5
.text:004046E5 loc_4046E5:                             ; CODE XREF: sub_4046A0:loc_4046B8↑j
.text:004046E5                 outs    dx, byte ptr gs:[esi]
.text:004046E7                 and     [edx+79h], ah
.text:004046EA                 and     ds:25202C73h, ah
.text:004046F0                 jnb     short loc_40471E
.text:004046F2                 and     ds:250A2C73h, ah
.text:004046F8                 jnb     short near ptr loc_404725+1
.text:004046FA                 and     ds:25202C73h, ah
.text:00404700                 jnb     short near ptr loc_40472A+4
.text:00404702                 and     [ecx+6Eh], ah
.text:00404705                 and     fs:0A2E73h, ah
.text:0040470C
.text:0040470C loc_40470C:                             ; CODE XREF: sub_4046A0+1↑j
.text:0040470C                 nop
.text:0040470D                 nop
.text:0040470E                 nop
.text:0040470F                 nop
.text:00404710                 nop
.text:00404711                 nop
.text:00404712                 nop
.text:00404713                 nop
.text:00404714                 nop
.text:00404715                 nop
.text:00404716                 nop
.text:00404717                 nop
.text:00404718                 nop
.text:00404719
.text:00404719 loc_404719:                             ; CODE XREF: sub_4046A0+3↑j
.text:00404719                 nop
.text:0040471A                 nop
.text:0040471B                 nop
.text:0040471C                 nop
.text:0040471D                 nop
.text:0040471E
.text:0040471E loc_40471E:                             ; CODE XREF: sub_4046E0+10↑j
.text:0040471E                 nop
.text:0040471F                 nop
.text:0040471F sub_4046E0      endp ; sp-analysis failed
.text:0040471F
.text:00404720
.text:00404720 ; =============== S U B R O U T I N E =======================================
.text:00404720
.text:00404720
.text:00404720 sub_404720      proc near               ; DATA XREF: sub_4047F0:loc_404979↓o
.text:00404720                 push    edi
.text:00404721                 jb      short near ptr loc_40478A+2
.text:00404723                 jz      short near ptr loc_404794+5
.text:00404725
.text:00404725 loc_404725:                             ; CODE XREF: sub_4046E0+18↑j
.text:00404725                 outs    dx, byte ptr gs:[esi]
.text:00404727                 and     [edx+79h], ah
.text:0040472A
.text:0040472A loc_40472A:                             ; CODE XREF: sub_4046E0+20↑j
.text:0040472A                 and     ds:25202C73h, ah
.text:00404730                 jnb     short loc_40475E
.text:00404732                 and     ds:250A2C73h, ah
.text:00404738                 jnb     short near ptr loc_404765+1
.text:0040473A                 and     ds:25202C73h, ah
.text:00404740                 jnb     short near ptr loc_40476A+4
.text:00404742                 and     ds:610A2C73h, ah
.text:00404748                 outsb
.text:00404749
.text:00404749 loc_404749:                             ; CODE XREF: sub_4046E0+1↑j
.text:00404749                 and     fs:0A2E73h, ah
.text:00404750                 nop
.text:00404751                 nop
.text:00404752                 nop
.text:00404753                 nop
.text:00404754                 nop
.text:00404755                 nop
.text:00404756                 nop
.text:00404757                 nop
.text:00404758                 nop
.text:00404759
.text:00404759 loc_404759:                             ; CODE XREF: sub_4046E0+3↑j
.text:00404759                 nop
.text:0040475A                 nop
.text:0040475B                 nop
.text:0040475C                 nop
.text:0040475D                 nop
.text:0040475E
.text:0040475E loc_40475E:                             ; CODE XREF: sub_404720+10↑j
.text:0040475E                 nop
.text:0040475F                 nop
.text:0040475F sub_404720      endp ; sp-analysis failed
.text:0040475F
.text:00404760
.text:00404760 ; =============== S U B R O U T I N E =======================================
.text:00404760
.text:00404760
.text:00404760 sub_404760      proc near               ; DATA XREF: sub_4047F0:loc_404985↓o
.text:00404760                 push    edi
.text:00404761                 jb      short near ptr loc_4047CA+2
.text:00404763                 jz      short near ptr loc_4047D5+4
.text:00404765
.text:00404765 loc_404765:                             ; CODE XREF: sub_404720+18↑j
.text:00404765                 outs    dx, byte ptr gs:[esi]
.text:00404767                 and     [edx+79h], ah
.text:0040476A
.text:0040476A loc_40476A:                             ; CODE XREF: sub_404720+20↑j
.text:0040476A                 and     ds:25202C73h, ah
.text:00404770                 jnb     short near ptr loc_40479A+4
.text:00404772                 and     ds:250A2C73h, ah
.text:00404778                 jnb     short near ptr loc_4047A5+1
.text:0040477A                 and     ds:25202C73h, ah
.text:00404780                 jnb     short near ptr loc_4047AA+4
.text:00404782                 and     ds:250A2C73h, ah
.text:00404788                 jnb     short near ptr loc_4047B2+4
.text:0040478A
.text:0040478A loc_40478A:                             ; CODE XREF: sub_404720+1↑j
.text:0040478A                 and     [ecx+6Eh], ah
.text:0040478D                 and     fs:0A2E73h, ah
.text:00404794
.text:00404794 loc_404794:                             ; CODE XREF: sub_404720+3↑j
.text:00404794                 lea     esi, [esi+0]
.text:0040479A
.text:0040479A loc_40479A:                             ; CODE XREF: sub_404760+10↑j
.text:0040479A                 lea     edi, [edi+0]
.text:004047A0
.text:004047A0 loc_4047A0:                             ; DATA XREF: sub_4047F0:def_40485D↓o
.text:004047A0                 push    edi
.text:004047A1                 jb      short near ptr loc_40480B+1
.text:004047A3                 jz      short near ptr loc_404818+1
.text:004047A5
.text:004047A5 loc_4047A5:                             ; CODE XREF: sub_404760+18↑j
.text:004047A5                 outs    dx, byte ptr gs:[esi]
.text:004047A7                 and     [edx+79h], ah
.text:004047AA
.text:004047AA loc_4047AA:                             ; CODE XREF: sub_404760+20↑j
.text:004047AA                 and     ds:25202C73h, ah
.text:004047B0                 jnb     short near ptr loc_4047DC+2
.text:004047B2
.text:004047B2 loc_4047B2:                             ; CODE XREF: sub_404760+28↑j
.text:004047B2                 and     ds:250A2C73h, ah
.text:004047B8                 jnb     short near ptr loc_4047E3+3
.text:004047BA                 and     ds:25202C73h, ah
.text:004047C0                 jnb     short near ptr loc_4047E9+5
.text:004047C2                 and     ds:250A2C73h, ah
.text:004047C8                 jnb     short near ptr loc_4047F4+2
.text:004047CA
.text:004047CA loc_4047CA:                             ; CODE XREF: sub_404760+1↑j
.text:004047CA                 and     ds:61202C73h, ah
.text:004047D0                 outsb
.text:004047D1                 and     fs:[edi+74h], ch
.text:004047D5
.text:004047D5 loc_4047D5:                             ; CODE XREF: sub_404760+3↑j
.text:004047D5                 push    2E737265h
.text:004047DA                 or      al, [eax]
.text:004047DC
.text:004047DC loc_4047DC:                             ; CODE XREF: sub_404760+50↑j
.text:004047DC                                         ; DATA XREF: sub_4047F0+1B5↓o
.text:004047DC                 and     eax, 73252073h
.text:004047E1                 or      al, [eax]
.text:004047E3
.text:004047E3 loc_4047E3:                             ; CODE XREF: sub_404760+58↑j
.text:004047E3                 lea     esi, [esi+0]
.text:004047E9
.text:004047E9 loc_4047E9:                             ; CODE XREF: sub_404760+60↑j
.text:004047E9                 lea     edi, [edi+0]
.text:004047E9 sub_404760      endp ; sp-analysis failed
.text:004047E9
.text:004047F0
.text:004047F0 ; =============== S U B R O U T I N E =======================================
.text:004047F0
.text:004047F0
.text:004047F0 ; int __cdecl sub_4047F0(FILE *, FILE *, int, int, va_list)
.text:004047F0 sub_4047F0      proc near               ; CODE XREF: sub_402CC0+A5↑p
.text:004047F0                                         ; .text:004049EA↓p
.text:004047F0
.text:004047F0 Stream          = dword ptr -2Ch
.text:004047F0 Format          = dword ptr -28h
.text:004047F0 ArgList         = dword ptr -24h
.text:004047F0 var_20          = dword ptr -20h
.text:004047F0 var_1C          = dword ptr -1Ch
.text:004047F0 var_14          = dword ptr -14h
.text:004047F0 arg_0           = dword ptr  4
.text:004047F0 arg_4           = dword ptr  8
.text:004047F0 arg_8           = dword ptr  0Ch
.text:004047F0 arg_C           = dword ptr  10h
.text:004047F0 arg_10          = dword ptr  14h
.text:004047F0
.text:004047F0                 push    ebp
.text:004047F1                 push    edi
.text:004047F2                 push    esi
.text:004047F3                 push    ebx
.text:004047F4
.text:004047F4 loc_4047F4:                             ; CODE XREF: sub_404760+68↑j
.text:004047F4                 sub     esp, 1Ch
.text:004047F7                 xor     ebx, ebx
.text:004047F9                 mov     edi, [esp+2Ch+arg_10]
.text:004047FD                 mov     edx, [esp+2Ch+arg_8]
.text:00404801                 mov     esi, [esp+2Ch+arg_0]
.text:00404805                 mov     eax, [edi]
.text:00404807                 mov     ecx, [esp+2Ch+arg_4]
.text:0040480B
.text:0040480B loc_40480B:                             ; CODE XREF: sub_404760+41↑j
.text:0040480B                 mov     [esp+2Ch+var_14], edx
.text:0040480F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404813                 lea     edx, [edi+4]
.text:00404816                 test    eax, eax
.text:00404818
.text:00404818 loc_404818:                             ; CODE XREF: sub_404760+43↑j
.text:00404818                 jz      short loc_40482C
.text:0040481A                 lea     esi, [esi+0]
.text:00404820
.text:00404820 loc_404820:                             ; CODE XREF: sub_4047F0+3A↓j
.text:00404820                 mov     eax, edx
.text:00404822                 inc     ebx
.text:00404823                 mov     eax, [eax]
.text:00404825                 add     edx, 4
.text:00404828                 test    eax, eax
.text:0040482A                 jnz     short loc_404820
.text:0040482C
.text:0040482C loc_40482C:                             ; CODE XREF: sub_4047F0:loc_404818↑j
.text:0040482C                 test    ecx, ecx
.text:0040482E                 jz      loc_40499D
.text:00404834                 mov     [esp+2Ch+var_1C], ebp
.text:00404838                 mov     edx, [esp+2Ch+var_14]
.text:0040483C                 mov     [esp+2Ch+ArgList], ecx
.text:00404840                 mov     [esp+2Ch+Format], offset Format ; Format
.text:00404848                 mov     [esp+2Ch+var_20], edx
.text:0040484C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040484F                 call    fprintf
.text:00404854
.text:00404854 loc_404854:                             ; CODE XREF: sub_4047F0+1C9↓j
.text:00404854                 cmp     ebx, 9          ; switch 10 cases
.text:00404857                 ja      def_40485D      ; jumptable 0040485D default case
.text:0040485D                 jmp     ds:jpt_40485D[ebx*4] ; switch jump
.text:0040485D ; ---------------------------------------------------------------------------
.text:00404864 jpt_40485D      dd offset loc_40488C    ; DATA XREF: sub_4047F0+6D↑r
.text:00404864                 dd offset loc_404891    ; jump table for switch statement
.text:00404864                 dd offset loc_404931
.text:00404864                 dd offset loc_40493D
.text:00404864                 dd offset loc_404949
.text:00404864                 dd offset loc_404955
.text:00404864                 dd offset loc_404961
.text:00404864                 dd offset loc_40496D
.text:00404864                 dd offset loc_404979
.text:00404864                 dd offset loc_404985
.text:0040488C ; ---------------------------------------------------------------------------
.text:0040488C
.text:0040488C loc_40488C:                             ; CODE XREF: sub_4047F0+6D↑j
.text:0040488C                                         ; DATA XREF: sub_4047F0:jpt_40485D↑o
.text:0040488C                 call    abort           ; jumptable 0040485D case 0
.text:00404891 ; ---------------------------------------------------------------------------
.text:00404891
.text:00404891 loc_404891:                             ; CODE XREF: sub_4047F0+6D↑j
.text:00404891                                         ; DATA XREF: sub_4047F0:jpt_40485D↑o
.text:00404891                 mov     [esp+2Ch+Stream], 40453Eh ; jumptable 0040485D case 1
.text:00404898                 nop
.text:00404899                 lea     esi, [esi+0]
.text:004048A0
.text:004048A0 loc_4048A0:                             ; CODE XREF: sub_4047F0+148↓j
.text:004048A0                                         ; sub_4047F0+154↓j ...
.text:004048A0                 call    ds:libintl_gettext
.text:004048A6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004048AA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004048AD                 mov     [esp+2Ch+Format], eax ; Format
.text:004048B1                 call    vfprintf
.text:004048B6                 mov     ebx, [esi+4]
.text:004048B9                 dec     ebx
.text:004048BA                 test    ebx, ebx
.text:004048BC                 mov     [esi+4], ebx
.text:004048BF                 js      short loc_40491F
.text:004048C1                 mov     edi, [esi]
.text:004048C3                 mov     byte ptr [edi], 0Ah
.text:004048C6                 inc     dword ptr [esi]
.text:004048C8
.text:004048C8 loc_4048C8:                             ; CODE XREF: sub_4047F0+13F↓j
.text:004048C8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004048CC                 mov     edx, Buffer
.text:004048D2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004048D5                 call    fputs
.text:004048DA                 mov     ebp, [esi+4]
.text:004048DD                 dec     ebp
.text:004048DE                 test    ebp, ebp
.text:004048E0                 mov     [esi+4], ebp
.text:004048E3                 js      short loc_40490D
.text:004048E5                 mov     ecx, [esi]
.text:004048E7                 mov     byte ptr [ecx], 0Ah
.text:004048EA                 inc     dword ptr [esi]
.text:004048EC
.text:004048EC loc_4048EC:                             ; CODE XREF: sub_4047F0+12D↓j
.text:004048EC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004048F0                 mov     [esp+2Ch+Stream], offset sub_404560
.text:004048F7                 call    ds:libintl_gettext
.text:004048FD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404901                 add     esp, 1Ch
.text:00404904                 pop     ebx
.text:00404905                 pop     esi
.text:00404906                 pop     edi
.text:00404907                 pop     ebp
.text:00404908                 jmp     fputs
.text:0040490D ; ---------------------------------------------------------------------------
.text:0040490D
.text:0040490D loc_40490D:                             ; CODE XREF: sub_4047F0+F3↑j
.text:0040490D                 mov     [esp+2Ch+Format], esi ; File
.text:00404911                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404918                 call    _flsbuf
.text:0040491D                 jmp     short loc_4048EC
.text:0040491F ; ---------------------------------------------------------------------------
.text:0040491F
.text:0040491F loc_40491F:                             ; CODE XREF: sub_4047F0+CF↑j
.text:0040491F                 mov     [esp+2Ch+Format], esi ; File
.text:00404923                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040492A                 call    _flsbuf
.text:0040492F                 jmp     short loc_4048C8
.text:00404931 ; ---------------------------------------------------------------------------
.text:00404931
.text:00404931 loc_404931:                             ; CODE XREF: sub_4047F0+6D↑j
.text:00404931                                         ; DATA XREF: sub_4047F0:jpt_40485D↑o
.text:00404931                 mov     [esp+2Ch+Stream], offset loc_4045F8 ; jumptable 0040485D case 2
.text:00404938                 jmp     loc_4048A0
.text:0040493D ; ---------------------------------------------------------------------------
.text:0040493D
.text:0040493D loc_40493D:                             ; CODE XREF: sub_4047F0+6D↑j
.text:0040493D                                         ; DATA XREF: sub_4047F0:jpt_40485D↑o
.text:0040493D                 mov     [esp+2Ch+Stream], offset loc_40460F ; jumptable 0040485D case 3
.text:00404944                 jmp     loc_4048A0
.text:00404949 ; ---------------------------------------------------------------------------
.text:00404949
.text:00404949 loc_404949:                             ; CODE XREF: sub_4047F0+6D↑j
.text:00404949                                         ; DATA XREF: sub_4047F0:jpt_40485D↑o
.text:00404949                 mov     [esp+2Ch+Stream], offset sub_404640 ; jumptable 0040485D case 4
.text:00404950                 jmp     loc_4048A0
.text:00404955 ; ---------------------------------------------------------------------------
.text:00404955
.text:00404955 loc_404955:                             ; CODE XREF: sub_4047F0+6D↑j
.text:00404955                                         ; DATA XREF: sub_4047F0:jpt_40485D↑o
.text:00404955                 mov     [esp+2Ch+Stream], offset loc_404660 ; jumptable 0040485D case 5
.text:0040495C                 jmp     loc_4048A0
.text:00404961 ; ---------------------------------------------------------------------------
.text:00404961
.text:00404961 loc_404961:                             ; CODE XREF: sub_4047F0+6D↑j
.text:00404961                                         ; DATA XREF: sub_4047F0:jpt_40485D↑o
.text:00404961                 mov     [esp+2Ch+Stream], offset sub_4046A0 ; jumptable 0040485D case 6
.text:00404968                 jmp     loc_4048A0
.text:0040496D ; ---------------------------------------------------------------------------
.text:0040496D
.text:0040496D loc_40496D:                             ; CODE XREF: sub_4047F0+6D↑j
.text:0040496D                                         ; DATA XREF: sub_4047F0:jpt_40485D↑o
.text:0040496D                 mov     [esp+2Ch+Stream], offset sub_4046E0 ; jumptable 0040485D case 7
.text:00404974                 jmp     loc_4048A0
.text:00404979 ; ---------------------------------------------------------------------------
.text:00404979
.text:00404979 loc_404979:                             ; CODE XREF: sub_4047F0+6D↑j
.text:00404979                                         ; DATA XREF: sub_4047F0:jpt_40485D↑o
.text:00404979                 mov     [esp+2Ch+Stream], offset sub_404720 ; jumptable 0040485D case 8
.text:00404980                 jmp     loc_4048A0
.text:00404985 ; ---------------------------------------------------------------------------
.text:00404985
.text:00404985 loc_404985:                             ; CODE XREF: sub_4047F0+6D↑j
.text:00404985                                         ; DATA XREF: sub_4047F0:jpt_40485D↑o
.text:00404985                 mov     [esp+2Ch+Stream], offset sub_404760 ; jumptable 0040485D case 9
.text:0040498C                 jmp     loc_4048A0
.text:00404991 ; ---------------------------------------------------------------------------
.text:00404991
.text:00404991 def_40485D:                             ; CODE XREF: sub_4047F0+67↑j
.text:00404991                 mov     [esp+2Ch+Stream], offset loc_4047A0 ; jumptable 0040485D default case
.text:00404998                 jmp     loc_4048A0
.text:0040499D ; ---------------------------------------------------------------------------
.text:0040499D
.text:0040499D loc_40499D:                             ; CODE XREF: sub_4047F0+3E↑j
.text:0040499D                 mov     [esp+2Ch+var_20], ebp
.text:004049A1                 mov     ecx, [esp+2Ch+var_14]
.text:004049A5                 mov     [esp+2Ch+Format], offset loc_4047DC ; Format
.text:004049AD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004049B0                 mov     [esp+2Ch+ArgList], ecx
.text:004049B4                 call    fprintf
.text:004049B9                 jmp     loc_404854
.text:004049B9 sub_4047F0      endp
.text:004049B9
.text:004049B9 ; ---------------------------------------------------------------------------
.text:004049BE                 align 10h
.text:004049C0                 sub     esp, 1Ch
.text:004049C3                 mov     edx, [esp+2Ch]
.text:004049C7                 lea     ecx, [esp+30h]
.text:004049CB                 mov     [esp+10h], ecx
.text:004049CF                 mov     ecx, [esp+28h]
.text:004049D3                 mov     [esp+0Ch], edx
.text:004049D7                 mov     edx, [esp+24h]
.text:004049DB                 mov     [esp+8], ecx
.text:004049DF                 mov     [esp+4], edx
.text:004049E3                 mov     edx, [esp+20h]
.text:004049E7                 mov     [esp], edx
.text:004049EA                 call    sub_4047F0
.text:004049EF                 add     esp, 1Ch
.text:004049F2                 retn
.text:004049F2 ; ---------------------------------------------------------------------------
.text:004049F3                 align 10h
.text:00404A00 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404A20+3↓o
.text:00404A11 ; const char aS_0[]
.text:00404A11 aS_0            db '%s',0               ; DATA XREF: sub_404A20+10↓o
.text:00404A14                 align 10h
.text:00404A20
.text:00404A20 ; =============== S U B R O U T I N E =======================================
.text:00404A20
.text:00404A20 ; Attributes: noreturn
.text:00404A20
.text:00404A20 sub_404A20      proc near               ; CODE XREF: sub_402E90:loc_402EC9↑p
.text:00404A20                                         ; sub_402ED0+24↑p ...
.text:00404A20
.text:00404A20 Code            = dword ptr -1Ch
.text:00404A20 ErrorMessage    = dword ptr -18h
.text:00404A20 var_14          = dword ptr -14h
.text:00404A20 var_10          = byte ptr -10h
.text:00404A20
.text:00404A20                 sub     esp, 1Ch
.text:00404A23                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00404A2A                 call    ds:libintl_gettext
.text:00404A30                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00404A38                 mov     edx, Code
.text:00404A3E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404A46                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00404A4A                 mov     [esp+1Ch+Code], edx ; Code
.text:00404A4D                 call    sub_404AB0
.text:00404A52                 call    abort
.text:00404A52 sub_404A20      endp
.text:00404A52
.text:00404A52 ; ---------------------------------------------------------------------------
.text:00404A57                 align 10h
.text:00404A60
.text:00404A60 ; =============== S U B R O U T I N E =======================================
.text:00404A60
.text:00404A60 ; Attributes: thunk
.text:00404A60
.text:00404A60 libintl_bindtextdomain proc near
.text:00404A60                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404A60 libintl_bindtextdomain endp
.text:00404A60
.text:00404A60 ; ---------------------------------------------------------------------------
.text:00404A66                 align 10h
.text:00404A70                 jmp     ds:libintl_textdomain
.text:00404A70 ; ---------------------------------------------------------------------------
.text:00404A76                 align 10h
.text:00404A80                 jmp     ds:libintl_gettext
.text:00404A80 ; ---------------------------------------------------------------------------
.text:00404A86                 align 10h
.text:00404A90 ; const char aS_1[]
.text:00404A90 aS_1            db ': %s',0             ; DATA XREF: sub_404AB0+B8↓o
.text:00404A90                                         ; sub_404BB4+122↓o
.text:00404A95 aUnknownSystemE db 'Unknown system error',0
.text:00404A95                                         ; DATA XREF: sub_404AB0:loc_404B7D↓o
.text:00404A95                                         ; sub_404BB4:loc_404CEE↓o
.text:00404AAA ; const char aS_2[]
.text:00404AAA aS_2            db '%s: ',0             ; DATA XREF: sub_404AB0:loc_404B84↓o
.text:00404AAF                 align 10h
.text:00404AB0
.text:00404AB0 ; =============== S U B R O U T I N E =======================================
.text:00404AB0
.text:00404AB0
.text:00404AB0 ; int __cdecl sub_404AB0(int Code, int ErrorMessage, char *, char)
.text:00404AB0 sub_404AB0      proc near               ; CODE XREF: sub_401360+14E↑p
.text:00404AB0                                         ; sub_401360+187↑p ...
.text:00404AB0
.text:00404AB0 Stream          = dword ptr -1Ch
.text:00404AB0 Format          = dword ptr -18h
.text:00404AB0 ArgList         = dword ptr -14h
.text:00404AB0 Code            = dword ptr  4
.text:00404AB0 ErrorMessage    = dword ptr  8
.text:00404AB0 arg_8           = dword ptr  0Ch
.text:00404AB0 arg_C           = byte ptr  10h
.text:00404AB0
.text:00404AB0                 push    esi
.text:00404AB1                 push    ebx
.text:00404AB2                 sub     esp, 14h
.text:00404AB5                 mov     edx, ds:_iob
.text:00404ABB                 mov     esi, [esp+1Ch+Code]
.text:00404ABF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404AC3                 add     edx, 20h ; ' '
.text:00404AC6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404AC9                 call    fflush
.text:00404ACE                 mov     eax, ds:dword_4093C0
.text:00404AD3                 test    eax, eax
.text:00404AD5                 jz      loc_404B84
.text:00404ADB                 call    eax ; dword_4093C0
.text:00404ADD
.text:00404ADD loc_404ADD:                             ; CODE XREF: sub_404AB0+F7↓j
.text:00404ADD                 lea     edx, [esp+1Ch+arg_C]
.text:00404AE1                 mov     ecx, [esp+1Ch+arg_8]
.text:00404AE5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404AE9                 mov     edx, ds:_iob
.text:00404AEF                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404AF3                 add     edx, 40h ; '@'
.text:00404AF6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404AF9                 call    vfprintf
.text:00404AFE                 inc     ds:dword_4093D0
.text:00404B04                 test    ebx, ebx
.text:00404B06                 jnz     short loc_404B52
.text:00404B08
.text:00404B08 loc_404B08:                             ; CODE XREF: sub_404AB0+CB↓j
.text:00404B08                 mov     edx, ds:_iob
.text:00404B0E                 lea     ecx, [edx+40h]
.text:00404B11                 mov     ebx, [ecx+4]
.text:00404B14                 dec     ebx
.text:00404B15                 test    ebx, ebx
.text:00404B17                 mov     [ecx+4], ebx
.text:00404B1A                 js      short loc_404B40
.text:00404B1C                 mov     ecx, [edx+40h]
.text:00404B1F                 mov     byte ptr [ecx], 0Ah
.text:00404B22                 inc     dword ptr [edx+40h]
.text:00404B25
.text:00404B25 loc_404B25:                             ; CODE XREF: sub_404AB0+A0↓j
.text:00404B25                 mov     edx, ds:_iob
.text:00404B2B                 add     edx, 40h ; '@'
.text:00404B2E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404B31                 call    fflush
.text:00404B36                 test    esi, esi
.text:00404B38                 jnz     short loc_404BAC
.text:00404B3A                 add     esp, 14h
.text:00404B3D                 pop     ebx
.text:00404B3E                 pop     esi
.text:00404B3F                 retn
.text:00404B40 ; ---------------------------------------------------------------------------
.text:00404B40
.text:00404B40 loc_404B40:                             ; CODE XREF: sub_404AB0+6A↑j
.text:00404B40                 mov     [esp+1Ch+Format], ecx ; File
.text:00404B44                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00404B4B                 call    _flsbuf
.text:00404B50                 jmp     short loc_404B25
.text:00404B52 ; ---------------------------------------------------------------------------
.text:00404B52
.text:00404B52 loc_404B52:                             ; CODE XREF: sub_404AB0+56↑j
.text:00404B52                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404B55                 call    strerror
.text:00404B5A                 test    eax, eax
.text:00404B5C                 jz      short loc_404B7D
.text:00404B5E
.text:00404B5E loc_404B5E:                             ; CODE XREF: sub_404AB0+D2↓j
.text:00404B5E                 mov     [esp+1Ch+ArgList], eax
.text:00404B62                 mov     ebx, ds:_iob
.text:00404B68                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00404B70                 add     ebx, 40h ; '@'
.text:00404B73                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404B76                 call    fprintf
.text:00404B7B                 jmp     short loc_404B08
.text:00404B7D ; ---------------------------------------------------------------------------
.text:00404B7D
.text:00404B7D loc_404B7D:                             ; CODE XREF: sub_404AB0+AC↑j
.text:00404B7D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404B82                 jmp     short loc_404B5E
.text:00404B84 ; ---------------------------------------------------------------------------
.text:00404B84
.text:00404B84 loc_404B84:                             ; CODE XREF: sub_404AB0+25↑j
.text:00404B84                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:00404B8C                 mov     edx, ds:_iob
.text:00404B92                 mov     ecx, ds:dword_409390
.text:00404B98                 add     edx, 40h ; '@'
.text:00404B9B                 mov     [esp+1Ch+ArgList], ecx
.text:00404B9F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404BA2                 call    fprintf
.text:00404BA7                 jmp     loc_404ADD
.text:00404BAC ; ---------------------------------------------------------------------------
.text:00404BAC
.text:00404BAC loc_404BAC:                             ; CODE XREF: sub_404AB0+88↑j
.text:00404BAC                 mov     [esp+1Ch+Stream], esi ; Code
.text:00404BAF                 call    exit
.text:00404BAF sub_404AB0      endp
.text:00404BAF
.text:00404BB4
.text:00404BB4 ; =============== S U B R O U T I N E =======================================
.text:00404BB4
.text:00404BB4
.text:00404BB4 ; int __cdecl sub_404BB4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404BB4 sub_404BB4      proc near               ; DATA XREF: sub_404BB4+77↓o
.text:00404BB4
.text:00404BB4 Stream          = dword ptr -28h
.text:00404BB4 Format          = dword ptr -24h
.text:00404BB4 ArgList         = dword ptr -20h
.text:00404BB4 var_1C          = dword ptr -1Ch
.text:00404BB4 Code            = dword ptr  8
.text:00404BB4 ErrorMessage    = dword ptr  0Ch
.text:00404BB4 Str2            = dword ptr  10h
.text:00404BB4 arg_10          = dword ptr  14h
.text:00404BB4 arg_14          = dword ptr  18h
.text:00404BB4 arg_18          = byte ptr  1Ch
.text:00404BB4
.text:00404BB4                 and     eax, 64253A73h
.text:00404BB9                 cmp     ah, [eax]
.text:00404BBB
.text:00404BBB loc_404BBB:                             ; DATA XREF: sub_404BB4:loc_404CF5↓o
.text:00404BBB                 add     ds:55003A73h, ah
.text:00404BC1                 push    edi
.text:00404BC2                 push    esi
.text:00404BC3                 push    ebx
.text:00404BC4                 sub     esp, 1Ch
.text:00404BC7                 mov     edx, ds:dword_409400
.text:00404BCD                 mov     ebp, [esp+28h+Code]
.text:00404BD1                 mov     edi, [esp+28h+ErrorMessage]
.text:00404BD5                 test    edx, edx
.text:00404BD7                 mov     ebx, [esp+28h+Str2]
.text:00404BDB                 mov     esi, [esp+28h+arg_10]
.text:00404BDF                 jz      short loc_404BF9
.text:00404BE1                 cmp     ds:dword_409180, esi
.text:00404BE7                 jz      loc_404D20
.text:00404BED
.text:00404BED loc_404BED:                             ; CODE XREF: sub_404BB4+18D↓j
.text:00404BED                 mov     ds:Str1, ebx
.text:00404BF3                 mov     ds:dword_409180, esi
.text:00404BF9
.text:00404BF9 loc_404BF9:                             ; CODE XREF: sub_404BB4+2B↑j
.text:00404BF9                 mov     edx, ds:_iob
.text:00404BFF                 add     edx, 20h ; ' '
.text:00404C02                 mov     [esp+28h+Stream], edx ; Stream
.text:00404C05                 call    fflush
.text:00404C0A                 mov     eax, ds:dword_4093C0
.text:00404C0F                 test    eax, eax
.text:00404C11                 jz      loc_404CF5
.text:00404C17                 call    eax ; dword_4093C0
.text:00404C19
.text:00404C19 loc_404C19:                             ; CODE XREF: sub_404BB4+164↓j
.text:00404C19                 test    ebx, ebx
.text:00404C1B                 jz      short loc_404C3E
.text:00404C1D                 mov     [esp+28h+ArgList], ebx
.text:00404C21                 mov     ebx, ds:_iob
.text:00404C27                 mov     [esp+28h+var_1C], esi
.text:00404C2B                 mov     [esp+28h+Format], offset sub_404BB4 ; Format
.text:00404C33                 add     ebx, 40h ; '@'
.text:00404C36                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404C39                 call    fprintf
.text:00404C3E
.text:00404C3E loc_404C3E:                             ; CODE XREF: sub_404BB4+67↑j
.text:00404C3E                 mov     esi, ds:_iob
.text:00404C44                 lea     edx, [esp+28h+arg_18]
.text:00404C48                 mov     ecx, [esp+28h+arg_14]
.text:00404C4C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404C50                 add     esi, 40h ; '@'
.text:00404C53                 mov     [esp+28h+Format], ecx ; Format
.text:00404C57                 mov     [esp+28h+Stream], esi ; Stream
.text:00404C5A                 call    vfprintf
.text:00404C5F                 inc     ds:dword_4093D0
.text:00404C65                 test    edi, edi
.text:00404C67                 jnz     short loc_404CC0
.text:00404C69
.text:00404C69 loc_404C69:                             ; CODE XREF: sub_404BB4+135↓j
.text:00404C69                 mov     edx, ds:_iob
.text:00404C6F                 lea     ecx, [edx+40h]
.text:00404C72                 mov     ebx, [ecx+4]
.text:00404C75                 dec     ebx
.text:00404C76                 test    ebx, ebx
.text:00404C78                 mov     [ecx+4], ebx
.text:00404C7B                 js      short loc_404CA7
.text:00404C7D                 mov     esi, [edx+40h]
.text:00404C80                 mov     byte ptr [esi], 0Ah
.text:00404C83                 inc     dword ptr [edx+40h]
.text:00404C86
.text:00404C86 loc_404C86:                             ; CODE XREF: sub_404BB4+103↓j
.text:00404C86                 mov     ecx, ds:_iob
.text:00404C8C                 add     ecx, 40h ; '@'
.text:00404C8F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404C92                 call    fflush
.text:00404C97                 test    ebp, ebp
.text:00404C99                 jnz     loc_404D46
.text:00404C9F
.text:00404C9F loc_404C9F:                             ; CODE XREF: sub_404BB4+173↓j
.text:00404C9F                                         ; sub_404BB4+187↓j
.text:00404C9F                 add     esp, 1Ch
.text:00404CA2                 pop     ebx
.text:00404CA3                 pop     esi
.text:00404CA4                 pop     edi
.text:00404CA5                 pop     ebp
.text:00404CA6                 retn
.text:00404CA7 ; ---------------------------------------------------------------------------
.text:00404CA7
.text:00404CA7 loc_404CA7:                             ; CODE XREF: sub_404BB4+C7↑j
.text:00404CA7                 mov     [esp+28h+Format], ecx ; File
.text:00404CAB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404CB2                 call    _flsbuf
.text:00404CB7                 jmp     short loc_404C86
.text:00404CB7 ; ---------------------------------------------------------------------------
.text:00404CB9                 align 10h
.text:00404CC0
.text:00404CC0 loc_404CC0:                             ; CODE XREF: sub_404BB4+B3↑j
.text:00404CC0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404CC3                 call    strerror
.text:00404CC8                 test    eax, eax
.text:00404CCA                 jz      short loc_404CEE
.text:00404CCC
.text:00404CCC loc_404CCC:                             ; CODE XREF: sub_404BB4+13F↓j
.text:00404CCC                 mov     [esp+28h+ArgList], eax
.text:00404CD0                 mov     edi, ds:_iob
.text:00404CD6                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:00404CDE                 add     edi, 40h ; '@'
.text:00404CE1                 mov     [esp+28h+Stream], edi ; Stream
.text:00404CE4                 call    fprintf
.text:00404CE9                 jmp     loc_404C69
.text:00404CEE ; ---------------------------------------------------------------------------
.text:00404CEE
.text:00404CEE loc_404CEE:                             ; CODE XREF: sub_404BB4+116↑j
.text:00404CEE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404CF3                 jmp     short loc_404CCC
.text:00404CF5 ; ---------------------------------------------------------------------------
.text:00404CF5
.text:00404CF5 loc_404CF5:                             ; CODE XREF: sub_404BB4+5D↑j
.text:00404CF5                 mov     [esp+28h+Format], (offset loc_404BBB+1) ; Format
.text:00404CFD                 mov     ecx, ds:_iob
.text:00404D03                 mov     edx, ds:dword_409390
.text:00404D09                 add     ecx, 40h ; '@'
.text:00404D0C                 mov     [esp+28h+ArgList], edx
.text:00404D10                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404D13                 call    fprintf
.text:00404D18                 jmp     loc_404C19
.text:00404D18 ; ---------------------------------------------------------------------------
.text:00404D1D                 align 10h
.text:00404D20
.text:00404D20 loc_404D20:                             ; CODE XREF: sub_404BB4+33↑j
.text:00404D20                 mov     eax, ds:Str1
.text:00404D25                 cmp     ebx, eax
.text:00404D27                 jz      loc_404C9F
.text:00404D2D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404D31                 mov     [esp+28h+Stream], eax ; Str1
.text:00404D34                 call    strcmp
.text:00404D39                 test    eax, eax
.text:00404D3B                 jz      loc_404C9F
.text:00404D41                 jmp     loc_404BED
.text:00404D46 ; ---------------------------------------------------------------------------
.text:00404D46
.text:00404D46 loc_404D46:                             ; CODE XREF: sub_404BB4+E5↑j
.text:00404D46                 mov     [esp+28h+Stream], ebp ; Code
.text:00404D49                 call    exit
.text:00404D49 sub_404BB4      endp ; sp-analysis failed
.text:00404D49
.text:00404D49 ; ---------------------------------------------------------------------------
.text:00404D4E                 align 10h
.text:00404D50
.text:00404D50 ; =============== S U B R O U T I N E =======================================
.text:00404D50
.text:00404D50
.text:00404D50 ; int __cdecl sub_404D50(void *, void *Src, size_t Size, int, int)
.text:00404D50 sub_404D50      proc near               ; CODE XREF: sub_404D50+72↓p
.text:00404D50                                         ; sub_404D50+96↓p ...
.text:00404D50
.text:00404D50 var_3C          = dword ptr -3Ch
.text:00404D50 var_38          = dword ptr -38h
.text:00404D50 var_34          = dword ptr -34h
.text:00404D50 var_30          = dword ptr -30h
.text:00404D50 var_2C          = dword ptr -2Ch
.text:00404D50 var_28          = dword ptr -28h
.text:00404D50 var_24          = dword ptr -24h
.text:00404D50 var_20          = dword ptr -20h
.text:00404D50 var_1C          = dword ptr -1Ch
.text:00404D50 var_18          = dword ptr -18h
.text:00404D50 var_14          = dword ptr -14h
.text:00404D50 arg_0           = dword ptr  4
.text:00404D50 Src             = dword ptr  8
.text:00404D50 Size            = dword ptr  0Ch
.text:00404D50 arg_C           = dword ptr  10h
.text:00404D50 arg_10          = dword ptr  14h
.text:00404D50
.text:00404D50                 push    ebp
.text:00404D51                 push    edi
.text:00404D52                 push    esi
.text:00404D53                 push    ebx
.text:00404D54                 sub     esp, 2Ch
.text:00404D57                 mov     edx, [esp+3Ch+arg_0]
.text:00404D5B                 mov     ebx, [esp+3Ch+Src]
.text:00404D5F                 mov     eax, [esp+3Ch+arg_C]
.text:00404D63                 mov     edi, [esp+3Ch+Size]
.text:00404D67                 mov     [esp+3Ch+var_14], edx
.text:00404D6B                 cmp     ebx, 1
.text:00404D6E                 mov     edx, [esp+3Ch+arg_10]
.text:00404D72                 mov     [esp+3Ch+var_18], eax
.text:00404D76                 mov     [esp+3Ch+var_1C], edx
.text:00404D7A                 ja      short loc_404D84
.text:00404D7C                 add     esp, 2Ch
.text:00404D7F                 pop     ebx
.text:00404D80                 pop     esi
.text:00404D81                 pop     edi
.text:00404D82                 pop     ebp
.text:00404D83                 retn
.text:00404D84 ; ---------------------------------------------------------------------------
.text:00404D84
.text:00404D84 loc_404D84:                             ; CODE XREF: sub_404D50+2A↑j
.text:00404D84                 mov     [esp+3Ch+var_34], edi ; Size
.text:00404D88                 mov     esi, ebx
.text:00404D8A                 mov     ebp, [esp+3Ch+var_14]
.text:00404D8E                 shr     esi, 1
.text:00404D90                 mov     eax, ebx
.text:00404D92                 mov     ecx, [esp+3Ch+var_1C]
.text:00404D96                 mov     [esp+3Ch+var_38], esi ; Src
.text:00404D9A                 mov     edx, esi
.text:00404D9C                 sub     eax, esi
.text:00404D9E                 mov     [esp+3Ch+var_24], ebp
.text:00404DA2                 imul    edx, edi
.text:00404DA5                 mov     ebp, [esp+3Ch+var_14]
.text:00404DA9                 mov     [esp+3Ch+var_28], eax
.text:00404DAD                 mov     eax, [esp+3Ch+var_14]
.text:00404DB1                 add     ebp, edx
.text:00404DB3                 mov     [esp+3Ch+var_2C], ecx ; int
.text:00404DB7                 mov     edx, [esp+3Ch+var_18]
.text:00404DBB                 mov     [esp+3Ch+var_3C], eax ; void *
.text:00404DBE                 mov     [esp+3Ch+var_30], edx ; int
.text:00404DC2                 call    sub_404D50
.text:00404DC7                 mov     [esp+3Ch+var_34], edi ; Size
.text:00404DCB                 mov     ecx, [esp+3Ch+var_1C]
.text:00404DCF                 mov     eax, [esp+3Ch+var_18]
.text:00404DD3                 mov     [esp+3Ch+var_3C], ebp ; void *
.text:00404DD6                 mov     edx, [esp+3Ch+var_28]
.text:00404DDA                 mov     [esp+3Ch+var_2C], ecx ; int
.text:00404DDE                 mov     [esp+3Ch+var_30], eax ; int
.text:00404DE2                 mov     [esp+3Ch+var_38], edx ; Src
.text:00404DE6                 call    sub_404D50
.text:00404DEB                 mov     ecx, [esp+3Ch+var_1C]
.text:00404DEF                 cmp     edi, 4
.text:00404DF2                 mov     [esp+3Ch+var_20], ecx
.text:00404DF6                 jz      loc_404EC2
.text:00404DFC
.text:00404DFC loc_404DFC:                             ; CODE XREF: sub_404D50+177↓j
.text:00404DFC                 test    esi, esi
.text:00404DFE                 jnz     short loc_404E30
.text:00404E00
.text:00404E00 loc_404E00:                             ; CODE XREF: sub_404D50+EA↓j
.text:00404E00                                         ; sub_404D50+107↓j ...
.text:00404E00                 mov     edx, [esp+3Ch+var_28]
.text:00404E04                 sub     ebx, edx
.text:00404E06                 imul    ebx, edi
.text:00404E09                 mov     edi, [esp+3Ch+var_1C]
.text:00404E0D                 mov     [esp+3Ch+Size], ebx ; Size
.text:00404E11                 mov     ebx, [esp+3Ch+var_14]
.text:00404E15                 mov     [esp+3Ch+Src], edi ; Src
.text:00404E19                 mov     [esp+3Ch+arg_0], ebx ; void *
.text:00404E1D                 add     esp, 2Ch
.text:00404E20                 pop     ebx
.text:00404E21                 pop     esi
.text:00404E22                 pop     edi
.text:00404E23                 pop     ebp
.text:00404E24                 jmp     memcpy
.text:00404E24 ; ---------------------------------------------------------------------------
.text:00404E29                 align 10h
.text:00404E30
.text:00404E30 loc_404E30:                             ; CODE XREF: sub_404D50+AE↑j
.text:00404E30                 mov     eax, [esp+3Ch+var_28]
.text:00404E34                 test    eax, eax
.text:00404E36                 jnz     short loc_404E60
.text:00404E38
.text:00404E38 loc_404E38:                             ; CODE XREF: sub_404D50+151↓j
.text:00404E38                                         ; sub_404D50+18B↓j ...
.text:00404E38                 test    esi, esi
.text:00404E3A                 jz      short loc_404E00
.text:00404E3C                 imul    esi, edi
.text:00404E3F                 mov     ebp, [esp+3Ch+var_24]
.text:00404E43                 mov     [esp+3Ch+var_38], ebp ; Src
.text:00404E47                 mov     [esp+3Ch+var_34], esi ; Size
.text:00404E4B                 mov     esi, [esp+3Ch+var_20]
.text:00404E4F                 mov     [esp+3Ch+var_3C], esi ; void *
.text:00404E52                 call    memcpy
.text:00404E57                 jmp     short loc_404E00
.text:00404E57 ; ---------------------------------------------------------------------------
.text:00404E59                 align 10h
.text:00404E60
.text:00404E60 loc_404E60:                             ; CODE XREF: sub_404D50+E6↑j
.text:00404E60                                         ; sub_404D50+14F↓j
.text:00404E60                 mov     [esp+3Ch+var_38], ebp
.text:00404E64                 mov     ecx, [esp+3Ch+var_24]
.text:00404E68                 mov     [esp+3Ch+var_3C], ecx
.text:00404E6B                 call    [esp+3Ch+var_18]
.text:00404E6F                 test    eax, eax
.text:00404E71                 jle     short loc_404EA3
.text:00404E73                 mov     [esp+3Ch+var_38], ebp
.text:00404E77                 mov     ecx, [esp+3Ch+var_20]
.text:00404E7B                 add     ebp, edi
.text:00404E7D                 mov     [esp+3Ch+var_34], edi
.text:00404E81                 mov     [esp+3Ch+var_3C], ecx
.text:00404E84                 call    sub_405850
.text:00404E89                 dec     [esp+3Ch+var_28]
.text:00404E8D
.text:00404E8D loc_404E8D:                             ; CODE XREF: sub_404D50+170↓j
.text:00404E8D                 mov     [esp+3Ch+var_20], eax
.text:00404E91                 test    esi, esi
.text:00404E93                 jz      loc_404E00
.text:00404E99                 mov     eax, [esp+3Ch+var_28]
.text:00404E9D                 test    eax, eax
.text:00404E9F                 jnz     short loc_404E60
.text:00404EA1                 jmp     short loc_404E38
.text:00404EA3 ; ---------------------------------------------------------------------------
.text:00404EA3
.text:00404EA3 loc_404EA3:                             ; CODE XREF: sub_404D50+121↑j
.text:00404EA3                 mov     [esp+3Ch+var_34], edi
.text:00404EA7                 mov     eax, [esp+3Ch+var_24]
.text:00404EAB                 dec     esi
.text:00404EAC                 mov     edx, [esp+3Ch+var_20]
.text:00404EB0                 mov     [esp+3Ch+var_38], eax
.text:00404EB4                 mov     [esp+3Ch+var_3C], edx
.text:00404EB7                 call    sub_405850
.text:00404EBC                 add     [esp+3Ch+var_24], edi
.text:00404EC0                 jmp     short loc_404E8D
.text:00404EC2 ; ---------------------------------------------------------------------------
.text:00404EC2
.text:00404EC2 loc_404EC2:                             ; CODE XREF: sub_404D50+A6↑j
.text:00404EC2                 test    byte ptr [esp+3Ch+var_14], 3
.text:00404EC7                 jnz     loc_404DFC
.text:00404ECD                 test    esi, esi
.text:00404ECF                 jz      loc_404E00
.text:00404ED5                 mov     ecx, [esp+3Ch+var_28]
.text:00404ED9                 test    ecx, ecx
.text:00404EDB                 jz      loc_404E38
.text:00404EE1
.text:00404EE1 loc_404EE1:                             ; CODE XREF: sub_404D50+1C9↓j
.text:00404EE1                 mov     [esp+3Ch+var_38], ebp
.text:00404EE5                 mov     edx, [esp+3Ch+var_24]
.text:00404EE9                 mov     [esp+3Ch+var_3C], edx
.text:00404EEC                 call    [esp+3Ch+var_18]
.text:00404EF0                 test    eax, eax
.text:00404EF2                 jle     short loc_404F20
.text:00404EF4                 dec     [esp+3Ch+var_28]
.text:00404EF8                 mov     ecx, [ebp+0]
.text:00404EFB                 add     ebp, 4
.text:00404EFE                 mov     edx, [esp+3Ch+var_20]
.text:00404F02
.text:00404F02 loc_404F02:                             ; CODE XREF: sub_404D50+1E0↓j
.text:00404F02                 mov     [edx], ecx
.text:00404F04                 add     edx, 4
.text:00404F07                 test    esi, esi
.text:00404F09                 mov     [esp+3Ch+var_20], edx
.text:00404F0D                 jz      loc_404E00
.text:00404F13                 mov     edx, [esp+3Ch+var_28]
.text:00404F17                 test    edx, edx
.text:00404F19                 jnz     short loc_404EE1
.text:00404F1B                 jmp     loc_404E38
.text:00404F20 ; ---------------------------------------------------------------------------
.text:00404F20
.text:00404F20 loc_404F20:                             ; CODE XREF: sub_404D50+1A2↑j
.text:00404F20                 mov     eax, [esp+3Ch+var_24]
.text:00404F24                 dec     esi
.text:00404F25                 mov     edx, [esp+3Ch+var_20]
.text:00404F29                 add     [esp+3Ch+var_24], 4
.text:00404F2E                 mov     ecx, [eax]
.text:00404F30                 jmp     short loc_404F02
.text:00404F30 sub_404D50      endp
.text:00404F30
.text:00404F30 ; ---------------------------------------------------------------------------
.text:00404F32                 align 10h
.text:00404F40
.text:00404F40 ; =============== S U B R O U T I N E =======================================
.text:00404F40
.text:00404F40
.text:00404F40 ; int __cdecl sub_404F40(void *Block, void *, size_t, int)
.text:00404F40 sub_404F40      proc near               ; CODE XREF: sub_4017E0+65↑p
.text:00404F40
.text:00404F40 Size            = dword ptr -2Ch
.text:00404F40 Src             = dword ptr -28h
.text:00404F40 var_24          = dword ptr -24h
.text:00404F40 var_20          = dword ptr -20h
.text:00404F40 var_1C          = dword ptr -1Ch
.text:00404F40 var_18          = dword ptr -18h
.text:00404F40 var_14          = dword ptr -14h
.text:00404F40 var_10          = dword ptr -10h
.text:00404F40 var_C           = dword ptr -0Ch
.text:00404F40 var_8           = dword ptr -8
.text:00404F40 var_4           = dword ptr -4
.text:00404F40 Block           = dword ptr  4
.text:00404F40 arg_4           = dword ptr  8
.text:00404F40 arg_8           = dword ptr  0Ch
.text:00404F40 arg_C           = dword ptr  10h
.text:00404F40
.text:00404F40                 sub     esp, 2Ch
.text:00404F43                 mov     edx, [esp+2Ch+Block]
.text:00404F47                 mov     [esp+2Ch+var_8], edi
.text:00404F4B                 mov     edi, [esp+2Ch+arg_4]
.text:00404F4F                 mov     [esp+2Ch+var_C], esi
.text:00404F53                 mov     esi, [esp+2Ch+arg_8]
.text:00404F57                 mov     [esp+2Ch+var_10], ebx
.text:00404F5B                 mov     ebx, edi
.text:00404F5D                 imul    ebx, esi
.text:00404F60                 mov     [esp+2Ch+var_4], ebp
.text:00404F64                 mov     ebp, [esp+2Ch+arg_C]
.text:00404F68                 mov     [esp+2Ch+var_14], edx
.text:00404F6C                 cmp     ebx, 3FFh
.text:00404F72                 jbe     loc_405085
.text:00404F78                 mov     ecx, ds:dword_409190
.text:00404F7E                 test    ecx, ecx
.text:00404F80                 jz      loc_405030
.text:00404F86
.text:00404F86 loc_404F86:                             ; CODE XREF: sub_404F40+12E↓j
.text:00404F86                 xor     edx, edx
.text:00404F88                 mov     eax, ebx
.text:00404F8A                 div     ds:dword_4091A0
.text:00404F90                 cmp     eax, ecx
.text:00404F92                 jbe     short loc_404FC0
.text:00404F94
.text:00404F94 loc_404F94:                             ; CODE XREF: sub_404F40+E7↓j
.text:00404F94                 mov     [esp+2Ch+arg_8], esi
.text:00404F98                 mov     ebx, [esp+2Ch+var_10]
.text:00404F9C                 mov     esi, [esp+2Ch+var_14]
.text:00404FA0                 mov     [esp+2Ch+arg_C], ebp
.text:00404FA4                 mov     ebp, [esp+2Ch+var_4]
.text:00404FA8                 mov     [esp+2Ch+arg_4], edi
.text:00404FAC                 mov     edi, [esp+2Ch+var_8]
.text:00404FB0                 mov     [esp+2Ch+Block], esi
.text:00404FB4                 mov     esi, [esp+2Ch+var_C]
.text:00404FB8                 add     esp, 2Ch
.text:00404FBB                 jmp     __quicksort
.text:00404FC0 ; ---------------------------------------------------------------------------
.text:00404FC0
.text:00404FC0 loc_404FC0:                             ; CODE XREF: sub_404F40+52↑j
.text:00404FC0                 call    _errno
.text:00404FC5                 mov     edx, [eax]
.text:00404FC7                 mov     [esp+2Ch+Size], ebx ; Size
.text:00404FCA                 mov     [esp+2Ch+var_18], edx
.text:00404FCE                 call    malloc
.text:00404FD3                 test    eax, eax
.text:00404FD5                 mov     ebx, eax
.text:00404FD7                 jz      short loc_40501C
.text:00404FD9                 call    _errno
.text:00404FDE                 mov     ecx, [esp+2Ch+var_18]
.text:00404FE2                 mov     [eax], ecx
.text:00404FE4                 mov     [esp+2Ch+Src], edi ; Src
.text:00404FE8                 mov     edi, [esp+2Ch+var_14]
.text:00404FEC                 mov     [esp+2Ch+var_1C], ebx ; int
.text:00404FF0                 mov     [esp+2Ch+var_20], ebp ; int
.text:00404FF4                 mov     [esp+2Ch+var_24], esi ; Size
.text:00404FF8                 mov     [esp+2Ch+Size], edi ; void *
.text:00404FFB                 call    sub_404D50
.text:00405000                 mov     [esp+2Ch+Block], ebx ; Block
.text:00405004                 mov     esi, [esp+2Ch+var_C]
.text:00405008                 mov     ebx, [esp+2Ch+var_10]
.text:0040500C                 mov     edi, [esp+2Ch+var_8]
.text:00405010                 mov     ebp, [esp+2Ch+var_4]
.text:00405014                 add     esp, 2Ch
.text:00405017                 jmp     free
.text:0040501C ; ---------------------------------------------------------------------------
.text:0040501C
.text:0040501C loc_40501C:                             ; CODE XREF: sub_404F40+97↑j
.text:0040501C                 call    _errno
.text:00405021                 mov     ebx, [esp+2Ch+var_18]
.text:00405025                 mov     [eax], ebx
.text:00405027                 jmp     loc_404F94
.text:00405027 ; ---------------------------------------------------------------------------
.text:0040502C                 align 10h
.text:00405030
.text:00405030 loc_405030:                             ; CODE XREF: sub_404F40+40↑j
.text:00405030                 mov     [esp+2Ch+Size], 55h ; 'U'
.text:00405037                 call    _sysconf
.text:0040503C                 mov     ds:dword_409190, eax
.text:00405041                 mov     edx, eax
.text:00405043                 inc     edx
.text:00405044                 jz      short loc_405078
.text:00405046
.text:00405046 loc_405046:                             ; CODE XREF: sub_404F40+143↓j
.text:00405046                 mov     eax, ds:dword_409190
.text:0040504B                 test    eax, eax
.text:0040504D                 js      short loc_405073
.text:0040504F
.text:0040504F loc_40504F:                             ; CODE XREF: sub_404F40+136↓j
.text:0040504F                 mov     [esp+2Ch+Size], 1Eh
.text:00405056                 sar     eax, 2
.text:00405059                 mov     ds:dword_409190, eax
.text:0040505E                 call    _sysconf
.text:00405063                 mov     ds:dword_4091A0, eax
.text:00405068                 mov     ecx, ds:dword_409190
.text:0040506E                 jmp     loc_404F86
.text:00405073 ; ---------------------------------------------------------------------------
.text:00405073
.text:00405073 loc_405073:                             ; CODE XREF: sub_404F40+10D↑j
.text:00405073                 add     eax, 3
.text:00405076                 jmp     short loc_40504F
.text:00405078 ; ---------------------------------------------------------------------------
.text:00405078
.text:00405078 loc_405078:                             ; CODE XREF: sub_404F40+104↑j
.text:00405078                 mov     ecx, 7FFFFFFFh
.text:0040507D                 mov     ds:dword_409190, ecx
.text:00405083                 jmp     short loc_405046
.text:00405085 ; ---------------------------------------------------------------------------
.text:00405085
.text:00405085 loc_405085:                             ; CODE XREF: sub_404F40+32↑j
.text:00405085                 mov     [esp+2Ch+Size], ebx ; Size
.text:00405088                 call    malloc
.text:0040508D                 mov     [esp+2Ch+var_1C], eax ; int
.text:00405091                 mov     eax, [esp+2Ch+var_14]
.text:00405095                 mov     [esp+2Ch+var_20], ebp ; int
.text:00405099                 mov     [esp+2Ch+var_24], esi ; Size
.text:0040509D                 mov     [esp+2Ch+Src], edi ; Src
.text:004050A1                 mov     [esp+2Ch+Size], eax ; void *
.text:004050A4                 call    sub_404D50
.text:004050A9                 mov     ebx, [esp+2Ch+var_10]
.text:004050AD                 mov     esi, [esp+2Ch+var_C]
.text:004050B1                 mov     edi, [esp+2Ch+var_8]
.text:004050B5                 mov     ebp, [esp+2Ch+var_4]
.text:004050B9                 add     esp, 2Ch
.text:004050BC                 retn
.text:004050BC sub_404F40      endp
.text:004050BC
.text:004050BC ; ---------------------------------------------------------------------------
.text:004050BD                 align 10h
.text:004050C0
.text:004050C0 ; =============== S U B R O U T I N E =======================================
.text:004050C0
.text:004050C0 ; Attributes: thunk
.text:004050C0
.text:004050C0 sub_4050C0      proc near               ; CODE XREF: sub_4019B0:loc_401A7C↑p
.text:004050C0                 jmp     sub_405940
.text:004050C0 sub_4050C0      endp
.text:004050C0
.text:004050C0 ; ---------------------------------------------------------------------------
.text:004050C5                 align 10h
.text:004050D0
.text:004050D0 ; =============== S U B R O U T I N E =======================================
.text:004050D0
.text:004050D0 ; Attributes: thunk
.text:004050D0
.text:004050D0 sub_4050D0      proc near               ; CODE XREF: sub_4019B0:loc_4019F0↑p
.text:004050D0                 jmp     sub_405AB0
.text:004050D0 sub_4050D0      endp
.text:004050D0
.text:004050D0 ; ---------------------------------------------------------------------------
.text:004050D5                 align 10h
.text:004050E0
.text:004050E0 ; =============== S U B R O U T I N E =======================================
.text:004050E0
.text:004050E0 ; Attributes: thunk
.text:004050E0
.text:004050E0 sub_4050E0      proc near               ; CODE XREF: sub_4019B0+2D↑p
.text:004050E0                 jmp     sub_4058F0
.text:004050E0 sub_4050E0      endp
.text:004050E0
.text:004050E0 ; ---------------------------------------------------------------------------
.text:004050E5                 align 10h
.text:004050F0
.text:004050F0 ; =============== S U B R O U T I N E =======================================
.text:004050F0
.text:004050F0 ; Attributes: thunk
.text:004050F0
.text:004050F0 ; int __cdecl sub_4050F0(char *String)
.text:004050F0 sub_4050F0      proc near               ; CODE XREF: sub_4019B0+28↑p
.text:004050F0
.text:004050F0 String          = dword ptr  4
.text:004050F0
.text:004050F0                 jmp     sub_405B10
.text:004050F0 sub_4050F0      endp
.text:004050F0
.text:004050F0 ; ---------------------------------------------------------------------------
.text:004050F5                 align 10h
.text:00405100
.text:00405100 ; =============== S U B R O U T I N E =======================================
.text:00405100
.text:00405100 ; Attributes: info_from_lumina
.text:00405100
.text:00405100 __quicksort     proc near               ; CODE XREF: sub_404F40+7B↑j
.text:00405100
.text:00405100 var_14C         = dword ptr -14Ch
.text:00405100 var_148         = dword ptr -148h
.text:00405100 var_13C         = dword ptr -13Ch
.text:00405100 var_135         = byte ptr -135h
.text:00405100 var_134         = dword ptr -134h
.text:00405100 var_130         = dword ptr -130h
.text:00405100 var_12C         = dword ptr -12Ch
.text:00405100 var_128         = dword ptr -128h
.text:00405100 var_124         = dword ptr -124h
.text:00405100 var_120         = dword ptr -120h
.text:00405100 var_11C         = byte ptr -11Ch
.text:00405100 var_114         = byte ptr -114h
.text:00405100 arg_0           = dword ptr  4
.text:00405100 arg_4           = dword ptr  8
.text:00405100 arg_8           = dword ptr  0Ch
.text:00405100 arg_C           = dword ptr  10h
.text:00405100
.text:00405100                 push    ebp
.text:00405101                 push    edi
.text:00405102                 push    esi
.text:00405103                 push    ebx
.text:00405104                 sub     esp, 13Ch
.text:0040510A                 mov     eax, [esp+14Ch+arg_4]
.text:00405111                 mov     ecx, [esp+14Ch+arg_8]
.text:00405118                 shl     ecx, 2
.text:0040511B                 test    eax, eax
.text:0040511D                 mov     [esp+14Ch+var_120], ecx
.text:00405121                 jz      loc_40527C
.text:00405127                 lea     ecx, [eax-1]
.text:0040512A                 cmp     eax, 4
.text:0040512D                 mov     [esp+14Ch+var_13C], ecx
.text:00405131                 jbe     short loc_405166
.text:00405133                 mov     edi, [esp+14Ch+arg_8]
.text:0040513A                 lea     ebx, [esp+14Ch+var_114]
.text:0040513E                 mov     edx, [esp+14Ch+var_13C]
.text:00405142                 mov     [esp+14Ch+var_12C], ebx
.text:00405146                 mov     ebp, [esp+14Ch+arg_0]
.text:0040514D                 lea     eax, [esp+14Ch+var_11C]
.text:00405151                 imul    edi, edx
.text:00405154                 mov     [esp+14Ch+var_124], ebp
.text:00405158                 add     edi, ebp
.text:0040515A                 cmp     eax, ebx
.text:0040515C                 mov     [esp+14Ch+var_128], edi
.text:00405160                 jb      loc_4052AF
.text:00405166
.text:00405166 loc_405166:                             ; CODE XREF: __quicksort+31↑j
.text:00405166                                         ; __quicksort+313↓j
.text:00405166                 mov     ebx, [esp+14Ch+arg_8]
.text:0040516D                 mov     edx, [esp+14Ch+var_13C]
.text:00405171                 mov     ecx, [esp+14Ch+arg_0]
.text:00405178                 mov     esi, [esp+14Ch+arg_0]
.text:0040517F                 imul    ebx, edx
.text:00405182                 mov     edi, [esp+14Ch+var_120]
.text:00405186                 add     ebx, ecx
.text:00405188                 mov     [esp+14Ch+var_134], ebx
.text:0040518C                 lea     ebx, [edi+esi]
.text:0040518F                 cmp     ebx, [esp+14Ch+var_134]
.text:00405193                 jbe     short loc_405199
.text:00405195                 mov     ebx, [esp+14Ch+var_134]
.text:00405199
.text:00405199 loc_405199:                             ; CODE XREF: __quicksort+93↑j
.text:00405199                 mov     ebp, [esp+14Ch+arg_8]
.text:004051A0                 lea     edi, [ebp+esi+0]
.text:004051A4                 cmp     edi, ebx
.text:004051A6                 mov     ebp, edi
.text:004051A8                 jbe     loc_405287
.text:004051AE
.text:004051AE loc_4051AE:                             ; CODE XREF: __quicksort+1A6↓j
.text:004051AE                 cmp     esi, [esp+14Ch+arg_0]
.text:004051B5                 jz      short loc_4051D6
.text:004051B7                 mov     edi, [esp+14Ch+arg_8]
.text:004051BE                 mov     ebx, esi
.text:004051C0                 mov     ecx, [esp+14Ch+arg_0]
.text:004051C7
.text:004051C7 loc_4051C7:                             ; CODE XREF: __quicksort+D4↓j
.text:004051C7                 movzx   edx, byte ptr [ebx]
.text:004051CA                 movzx   eax, byte ptr [ecx]
.text:004051CD                 mov     [ebx], al
.text:004051CF                 inc     ebx
.text:004051D0                 mov     [ecx], dl
.text:004051D2                 inc     ecx
.text:004051D3                 dec     edi
.text:004051D4                 jnz     short loc_4051C7
.text:004051D6
.text:004051D6 loc_4051D6:                             ; CODE XREF: __quicksort+B5↑j
.text:004051D6                 mov     esi, [esp+14Ch+arg_8]
.text:004051DD                 lea     edi, [esi+ebp]
.text:004051E0                 cmp     edi, [esp+14Ch+var_134]
.text:004051E4                 ja      loc_40527C
.text:004051EA
.text:004051EA loc_4051EA:                             ; CODE XREF: __quicksort+176↓j
.text:004051EA                 mov     esi, edi
.text:004051EC                 lea     esi, [esi+0]
.text:004051F0
.text:004051F0 loc_4051F0:                             ; CODE XREF: __quicksort+109↓j
.text:004051F0                 mov     [esp+14Ch+var_14C], edi
.text:004051F3                 mov     ebx, [esp+14Ch+arg_8]
.text:004051FA                 sub     esi, ebx
.text:004051FC                 mov     [esp+14Ch+var_148], esi
.text:00405200                 call    [esp+14Ch+arg_C]
.text:00405207                 test    eax, eax
.text:00405209                 js      short loc_4051F0
.text:0040520B                 mov     edx, [esp+14Ch+arg_8]
.text:00405212                 mov     eax, [esp+14Ch+arg_8]
.text:00405219                 add     esi, edx
.text:0040521B                 cmp     esi, edi
.text:0040521D                 lea     ebp, [eax+edi]
.text:00405220                 jz      short loc_405270
.text:00405222                 lea     ebx, [ebp-1]
.text:00405225                 cmp     ebx, edi
.text:00405227                 jb      short loc_405270
.text:00405229                 lea     esi, [esi+0]
.text:00405230
.text:00405230 loc_405230:                             ; CODE XREF: __quicksort+16E↓j
.text:00405230                 movzx   ecx, byte ptr [ebx]
.text:00405233                 mov     edx, ebx
.text:00405235                 mov     eax, [esp+14Ch+arg_8]
.text:0040523C                 mov     [esp+14Ch+var_135], cl
.text:00405240                 sub     edx, eax
.text:00405242                 cmp     edx, esi
.text:00405244                 mov     ecx, ebx
.text:00405246                 jb      short loc_405264
.text:00405248                 nop
.text:00405249                 lea     esi, [esi+0]
.text:00405250
.text:00405250 loc_405250:                             ; CODE XREF: __quicksort+162↓j
.text:00405250                 movzx   eax, byte ptr [edx]
.text:00405253                 mov     [ecx], al
.text:00405255                 mov     eax, [esp+14Ch+arg_8]
.text:0040525C                 mov     ecx, edx
.text:0040525E                 sub     edx, eax
.text:00405260                 cmp     edx, esi
.text:00405262                 jnb     short loc_405250
.text:00405264
.text:00405264 loc_405264:                             ; CODE XREF: __quicksort+146↑j
.text:00405264                 movzx   eax, [esp+14Ch+var_135]
.text:00405269                 dec     ebx
.text:0040526A                 cmp     ebx, edi
.text:0040526C                 mov     [ecx], al
.text:0040526E                 jnb     short loc_405230
.text:00405270
.text:00405270 loc_405270:                             ; CODE XREF: __quicksort+120↑j
.text:00405270                                         ; __quicksort+127↑j
.text:00405270                 cmp     ebp, [esp+14Ch+var_134]
.text:00405274                 mov     edi, ebp
.text:00405276                 jbe     loc_4051EA
.text:0040527C
.text:0040527C loc_40527C:                             ; CODE XREF: __quicksort+21↑j
.text:0040527C                                         ; __quicksort+E4↑j
.text:0040527C                 add     esp, 13Ch
.text:00405282                 pop     ebx
.text:00405283                 pop     esi
.text:00405284                 pop     edi
.text:00405285                 pop     ebp
.text:00405286                 retn
.text:00405287 ; ---------------------------------------------------------------------------
.text:00405287
.text:00405287 loc_405287:                             ; CODE XREF: __quicksort+A8↑j
.text:00405287                                         ; __quicksort+1A4↓j
.text:00405287                 mov     [esp+14Ch+var_148], esi
.text:0040528B                 mov     [esp+14Ch+var_14C], edi
.text:0040528E                 call    [esp+14Ch+arg_C]
.text:00405295                 test    eax, eax
.text:00405297                 js      short loc_4052AB
.text:00405299
.text:00405299 loc_405299:                             ; CODE XREF: __quicksort+1AD↓j
.text:00405299                 mov     ecx, [esp+14Ch+arg_8]
.text:004052A0                 add     edi, ecx
.text:004052A2                 cmp     edi, ebx
.text:004052A4                 jbe     short loc_405287
.text:004052A6                 jmp     loc_4051AE
.text:004052AB ; ---------------------------------------------------------------------------
.text:004052AB
.text:004052AB loc_4052AB:                             ; CODE XREF: __quicksort+197↑j
.text:004052AB                 mov     esi, edi
.text:004052AD                 jmp     short loc_405299
.text:004052AF ; ---------------------------------------------------------------------------
.text:004052AF
.text:004052AF loc_4052AF:                             ; CODE XREF: __quicksort+60↑j
.text:004052AF                                         ; __quicksort+30D↓j
.text:004052AF                 mov     eax, [esp+14Ch+var_128]
.text:004052B3                 xor     edx, edx
.text:004052B5                 mov     ebp, [esp+14Ch+var_124]
.text:004052B9                 mov     edi, [esp+14Ch+arg_8]
.text:004052C0                 mov     ebx, [esp+14Ch+var_124]
.text:004052C4                 sub     eax, ebp
.text:004052C6                 div     [esp+14Ch+arg_8]
.text:004052CD                 mov     ecx, [esp+14Ch+var_124]
.text:004052D1                 mov     [esp+14Ch+var_148], ecx
.text:004052D5                 shr     eax, 1
.text:004052D7                 imul    eax, edi
.text:004052DA                 add     eax, ebx
.text:004052DC                 mov     [esp+14Ch+var_130], eax
.text:004052E0                 mov     esi, [esp+14Ch+var_130]
.text:004052E4                 mov     [esp+14Ch+var_14C], esi
.text:004052E7                 call    [esp+14Ch+arg_C]
.text:004052EE                 test    eax, eax
.text:004052F0                 js      loc_4054F4
.text:004052F6
.text:004052F6 loc_4052F6:                             ; CODE XREF: __quicksort+412↓j
.text:004052F6                 mov     edx, [esp+14Ch+var_130]
.text:004052FA                 mov     eax, [esp+14Ch+var_128]
.text:004052FE                 mov     [esp+14Ch+var_148], edx
.text:00405302                 mov     [esp+14Ch+var_14C], eax
.text:00405305                 call    [esp+14Ch+arg_C]
.text:0040530C                 test    eax, eax
.text:0040530E                 js      loc_405495
.text:00405314
.text:00405314 loc_405314:                             ; CODE XREF: __quicksort+3CB↓j
.text:00405314                                         ; __quicksort+3EF↓j
.text:00405314                 mov     edi, [esp+14Ch+arg_8]
.text:0040531B                 mov     ebp, [esp+14Ch+var_124]
.text:0040531F                 mov     ebx, [esp+14Ch+arg_8]
.text:00405326                 add     ebp, edi
.text:00405328                 mov     edi, [esp+14Ch+var_128]
.text:0040532C                 sub     edi, ebx
.text:0040532E                 mov     esi, esi
.text:00405330
.text:00405330 loc_405330:                             ; CODE XREF: __quicksort+2C7↓j
.text:00405330                                         ; __quicksort+390↓j
.text:00405330                 mov     [esp+14Ch+var_14C], ebp
.text:00405333                 mov     esi, [esp+14Ch+var_130]
.text:00405337                 mov     [esp+14Ch+var_148], esi
.text:0040533B                 call    [esp+14Ch+arg_C]
.text:00405342                 test    eax, eax
.text:00405344                 js      loc_405487
.text:0040534A                 lea     esi, [esi+0]
.text:00405350
.text:00405350 loc_405350:                             ; CODE XREF: __quicksort+26F↓j
.text:00405350                 mov     [esp+14Ch+var_148], edi
.text:00405354                 mov     eax, [esp+14Ch+var_130]
.text:00405358                 mov     [esp+14Ch+var_14C], eax
.text:0040535B                 call    [esp+14Ch+arg_C]
.text:00405362                 test    eax, eax
.text:00405364                 jns     short loc_405371
.text:00405366                 mov     ecx, [esp+14Ch+arg_8]
.text:0040536D                 sub     edi, ecx
.text:0040536F                 jmp     short loc_405350
.text:00405371 ; ---------------------------------------------------------------------------
.text:00405371
.text:00405371 loc_405371:                             ; CODE XREF: __quicksort+264↑j
.text:00405371                 cmp     ebp, edi
.text:00405373                 jnb     loc_40546E
.text:00405379                 mov     esi, [esp+14Ch+arg_8]
.text:00405380                 mov     ebx, ebp
.text:00405382                 mov     ecx, edi
.text:00405384                 lea     esi, [esi+0]
.text:0040538A                 lea     edi, [edi+0]
.text:00405390
.text:00405390 loc_405390:                             ; CODE XREF: __quicksort+29D↓j
.text:00405390                 movzx   edx, byte ptr [ebx]
.text:00405393                 movzx   eax, byte ptr [ecx]
.text:00405396                 mov     [ebx], al
.text:00405398                 inc     ebx
.text:00405399                 mov     [ecx], dl
.text:0040539B                 inc     ecx
.text:0040539C                 dec     esi
.text:0040539D                 jnz     short loc_405390
.text:0040539F                 cmp     [esp+14Ch+var_130], ebp
.text:004053A3                 jz      loc_405465
.text:004053A9                 cmp     [esp+14Ch+var_130], edi
.text:004053AD                 jz      loc_40545C
.text:004053B3
.text:004053B3 loc_4053B3:                             ; CODE XREF: __quicksort+360↓j
.text:004053B3                                         ; __quicksort+369↓j
.text:004053B3                 mov     edx, [esp+14Ch+arg_8]
.text:004053BA                 mov     ebx, [esp+14Ch+arg_8]
.text:004053C1                 add     ebp, edx
.text:004053C3                 sub     edi, ebx
.text:004053C5
.text:004053C5 loc_4053C5:                             ; CODE XREF: __quicksort+370↓j
.text:004053C5                 cmp     ebp, edi
.text:004053C7                 jbe     loc_405330
.text:004053CD
.text:004053CD loc_4053CD:                             ; CODE XREF: __quicksort+382↓j
.text:004053CD                 mov     esi, [esp+14Ch+var_124]
.text:004053D1                 mov     eax, edi
.text:004053D3                 sub     eax, esi
.text:004053D5                 cmp     eax, [esp+14Ch+var_120]
.text:004053D9                 ja      short loc_405418
.text:004053DB                 mov     [esp+14Ch+var_124], ebp
.text:004053DF                 mov     edi, [esp+14Ch+var_128]
.text:004053E3                 sub     edi, ebp
.text:004053E5                 cmp     edi, [esp+14Ch+var_120]
.text:004053E9                 ja      short loc_405405
.text:004053EB                 sub     [esp+14Ch+var_12C], 8
.text:004053F0                 mov     edx, [esp+14Ch+var_12C]
.text:004053F4                 mov     ecx, [esp+14Ch+var_12C]
.text:004053F8                 mov     ebx, [edx]
.text:004053FA                 mov     ebp, [ecx+4]
.text:004053FD                 mov     [esp+14Ch+var_124], ebx
.text:00405401                 mov     [esp+14Ch+var_128], ebp
.text:00405405
.text:00405405 loc_405405:                             ; CODE XREF: __quicksort+2E9↑j
.text:00405405                                         ; __quicksort+340↓j ...
.text:00405405                 lea     eax, [esp+14Ch+var_11C]
.text:00405409                 cmp     eax, [esp+14Ch+var_12C]
.text:0040540D                 jb      loc_4052AF
.text:00405413                 jmp     loc_405166
.text:00405418 ; ---------------------------------------------------------------------------
.text:00405418
.text:00405418 loc_405418:                             ; CODE XREF: __quicksort+2D9↑j
.text:00405418                 mov     edx, [esp+14Ch+var_128]
.text:0040541C                 sub     edx, ebp
.text:0040541E                 cmp     edx, [esp+14Ch+var_120]
.text:00405422                 jbe     short loc_405456
.text:00405424                 cmp     eax, edx
.text:00405426                 jle     short loc_405442
.text:00405428                 mov     ecx, [esp+14Ch+var_12C]
.text:0040542C                 mov     ebx, [esp+14Ch+var_124]
.text:00405430                 mov     [esp+14Ch+var_124], ebp
.text:00405434                 mov     [ecx+4], edi
.text:00405437                 mov     [ecx], ebx
.text:00405439                 add     ecx, 8
.text:0040543C                 mov     [esp+14Ch+var_12C], ecx
.text:00405440                 jmp     short loc_405405
.text:00405442 ; ---------------------------------------------------------------------------
.text:00405442
.text:00405442 loc_405442:                             ; CODE XREF: __quicksort+326↑j
.text:00405442                 mov     esi, [esp+14Ch+var_12C]
.text:00405446                 mov     [esi], ebp
.text:00405448                 mov     ebp, [esp+14Ch+var_128]
.text:0040544C                 mov     [esi+4], ebp
.text:0040544F                 add     esi, 8
.text:00405452                 mov     [esp+14Ch+var_12C], esi
.text:00405456
.text:00405456 loc_405456:                             ; CODE XREF: __quicksort+322↑j
.text:00405456                 mov     [esp+14Ch+var_128], edi
.text:0040545A                 jmp     short loc_405405
.text:0040545C ; ---------------------------------------------------------------------------
.text:0040545C
.text:0040545C loc_40545C:                             ; CODE XREF: __quicksort+2AD↑j
.text:0040545C                 mov     [esp+14Ch+var_130], ebp
.text:00405460                 jmp     loc_4053B3
.text:00405465 ; ---------------------------------------------------------------------------
.text:00405465
.text:00405465 loc_405465:                             ; CODE XREF: __quicksort+2A3↑j
.text:00405465                 mov     [esp+14Ch+var_130], edi
.text:00405469                 jmp     loc_4053B3
.text:0040546E ; ---------------------------------------------------------------------------
.text:0040546E
.text:0040546E loc_40546E:                             ; CODE XREF: __quicksort+273↑j
.text:0040546E                 cmp     ebp, edi
.text:00405470                 jnz     loc_4053C5
.text:00405476                 mov     esi, [esp+14Ch+arg_8]
.text:0040547D                 lea     ebp, [esi+edi]
.text:00405480                 sub     edi, esi
.text:00405482                 jmp     loc_4053CD
.text:00405487 ; ---------------------------------------------------------------------------
.text:00405487
.text:00405487 loc_405487:                             ; CODE XREF: __quicksort+244↑j
.text:00405487                 mov     edx, [esp+14Ch+arg_8]
.text:0040548E                 add     ebp, edx
.text:00405490                 jmp     loc_405330
.text:00405495 ; ---------------------------------------------------------------------------
.text:00405495
.text:00405495 loc_405495:                             ; CODE XREF: __quicksort+20E↑j
.text:00405495                 mov     esi, [esp+14Ch+arg_8]
.text:0040549C                 mov     ebx, [esp+14Ch+var_130]
.text:004054A0                 mov     ecx, [esp+14Ch+var_128]
.text:004054A4
.text:004054A4 loc_4054A4:                             ; CODE XREF: __quicksort+3B1↓j
.text:004054A4                 movzx   edx, byte ptr [ebx]
.text:004054A7                 movzx   eax, byte ptr [ecx]
.text:004054AA                 mov     [ebx], al
.text:004054AC                 inc     ebx
.text:004054AD                 mov     [ecx], dl
.text:004054AF                 inc     ecx
.text:004054B0                 dec     esi
.text:004054B1                 jnz     short loc_4054A4
.text:004054B3                 mov     ecx, [esp+14Ch+var_124]
.text:004054B7                 mov     esi, [esp+14Ch+var_130]
.text:004054BB                 mov     [esp+14Ch+var_148], ecx
.text:004054BF                 mov     [esp+14Ch+var_14C], esi
.text:004054C2                 call    [esp+14Ch+arg_C]
.text:004054C9                 test    eax, eax
.text:004054CB                 jns     loc_405314
.text:004054D1                 mov     esi, [esp+14Ch+arg_8]
.text:004054D8                 mov     ebx, [esp+14Ch+var_130]
.text:004054DC                 mov     ecx, [esp+14Ch+var_124]
.text:004054E0
.text:004054E0 loc_4054E0:                             ; CODE XREF: __quicksort+3ED↓j
.text:004054E0                 movzx   edx, byte ptr [ebx]
.text:004054E3                 movzx   eax, byte ptr [ecx]
.text:004054E6                 mov     [ebx], al
.text:004054E8                 inc     ebx
.text:004054E9                 mov     [ecx], dl
.text:004054EB                 inc     ecx
.text:004054EC                 dec     esi
.text:004054ED                 jnz     short loc_4054E0
.text:004054EF                 jmp     loc_405314
.text:004054F4 ; ---------------------------------------------------------------------------
.text:004054F4
.text:004054F4 loc_4054F4:                             ; CODE XREF: __quicksort+1F0↑j
.text:004054F4                 mov     esi, [esp+14Ch+arg_8]
.text:004054FB                 mov     ebx, [esp+14Ch+var_130]
.text:004054FF                 mov     ecx, [esp+14Ch+var_124]
.text:00405503
.text:00405503 loc_405503:                             ; CODE XREF: __quicksort+410↓j
.text:00405503                 movzx   edx, byte ptr [ebx]
.text:00405506                 movzx   eax, byte ptr [ecx]
.text:00405509                 mov     [ebx], al
.text:0040550B                 inc     ebx
.text:0040550C                 mov     [ecx], dl
.text:0040550E                 inc     ecx
.text:0040550F                 dec     esi
.text:00405510                 jnz     short loc_405503
.text:00405512                 jmp     loc_4052F6
.text:00405512 __quicksort     endp
.text:00405512
.text:00405512 ; ---------------------------------------------------------------------------
.text:00405517                 align 10h
.text:00405520
.text:00405520 ; =============== S U B R O U T I N E =======================================
.text:00405520
.text:00405520 ; Attributes: info_from_lumina
.text:00405520
.text:00405520 _sysconf        proc near               ; CODE XREF: sub_404F40+F7↑p
.text:00405520                                         ; sub_404F40+11E↑p
.text:00405520
.text:00405520 arg_0           = dword ptr  4
.text:00405520
.text:00405520                 sub     esp, 0Ch
.text:00405523                 mov     eax, [esp+0Ch+arg_0]
.text:00405527                 cmp     eax, 83h        ; switch 132 cases
.text:0040552C                 ja      def_405532      ; jumptable 67026652 default case, cases 50,56
.text:0040552C                                         ; jumptable 00405532 default case, cases 50,56
.text:00405532                 jmp     ds:jpt_405532[eax*4] ; switch jump
.text:00405532 ; ---------------------------------------------------------------------------
.text:00405539                 align 4
.text:0040553C jpt_405532      dd offset loc_405774, offset loc_405774, offset loc_405774
.text:0040553C                                         ; DATA XREF: _sysconf+12↑r
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C ; jump table for switch statement
.text:0040553C                 dd offset loc_40577B, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_405828, offset loc_405760
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_405797, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset def_405532
.text:0040553C                 dd offset loc_40583C, offset loc_40579E, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset def_405532
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_4057A5, offset loc_4057A5, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_4057AC
.text:0040553C                 dd offset loc_4057B4, offset loc_4057BC, offset loc_4057C4
.text:0040553C                 dd offset loc_4057DA, offset loc_4057CC, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_4057D3
.text:0040553C                 dd offset loc_405800, offset loc_40580A, offset loc_4057DA
.text:0040553C                 dd offset loc_4057E1, offset loc_4057E8, offset loc_4057E8
.text:0040553C                 dd offset loc_4057EF, offset loc_4057F9, offset loc_405814
.text:0040553C                 dd offset loc_405800, offset loc_40580A, offset loc_405814
.text:0040553C                 dd offset loc_40581E, offset loc_405828, offset loc_405760
.text:0040553C                 dd offset loc_405760, offset loc_405832, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040553C                 dd offset loc_40583C, offset loc_40583C, offset loc_40583C
.text:0040574C ; ---------------------------------------------------------------------------
.text:0040574C
.text:0040574C def_405532:                             ; CODE XREF: _sysconf+C↑j
.text:0040574C                                         ; _sysconf+12↑j
.text:0040574C                                         ; DATA XREF: ...
.text:0040574C                 call    _errno          ; jumptable 67026652 default case, cases 50,56
.text:0040574C                                         ; jumptable 00405532 default case, cases 50,56
.text:00405751                 mov     dword ptr [eax], 16h
.text:00405757                 mov     esi, esi
.text:00405759                 lea     edi, [edi+0]
.text:00405760
.text:00405760 loc_405760:                             ; CODE XREF: _sysconf+12↑j
.text:00405760                                         ; _sysconf+327↓j
.text:00405760                                         ; DATA XREF: ...
.text:00405760                 mov     eax, 0FFFFFFFFh ; jumptable 67026652 cases 41,116,117
.text:00405760                                         ; jumptable 00405532 cases 41,116,117
.text:00405765                 lea     esi, [esi+0]
.text:00405769                 lea     edi, [edi+0]
.text:00405770
.text:00405770 loc_405770:                             ; CODE XREF: _sysconf+259↓j
.text:00405770                                         ; _sysconf+26C↓j ...
.text:00405770                 add     esp, 0Ch
.text:00405773                 retn
.text:00405774 ; ---------------------------------------------------------------------------
.text:00405774
.text:00405774 loc_405774:                             ; CODE XREF: _sysconf+12↑j
.text:00405774                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:00405774                 mov     eax, 989680h    ; jumptable 67026652 cases 0-2
.text:00405774                                         ; jumptable 00405532 cases 0-2
.text:00405779                 jmp     short loc_405770
.text:0040577B ; ---------------------------------------------------------------------------
.text:0040577B
.text:0040577B loc_40577B:                             ; CODE XREF: _sysconf+12↑j
.text:0040577B                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:0040577B                 call    sub_405D20      ; jumptable 67026652 case 6
.text:0040577B                                         ; jumptable 00405532 case 6
.text:00405780                 cmp     eax, 6
.text:00405783                 mov     edx, 6
.text:00405788                 jg      short loc_40578E
.text:0040578A
.text:0040578A loc_40578A:                             ; CODE XREF: _sysconf+275↓j
.text:0040578A                 mov     eax, edx
.text:0040578C                 jmp     short loc_405770
.text:0040578E ; ---------------------------------------------------------------------------
.text:0040578E
.text:0040578E loc_40578E:                             ; CODE XREF: _sysconf+268↑j
.text:0040578E                 call    sub_405D20
.text:00405793                 mov     edx, eax
.text:00405795                 jmp     short loc_40578A
.text:00405797 ; ---------------------------------------------------------------------------
.text:00405797
.text:00405797 loc_405797:                             ; CODE XREF: _sysconf+12↑j
.text:00405797                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:00405797                 mov     eax, 800h       ; jumptable 67026652 case 45
.text:00405797                                         ; jumptable 00405532 case 45
.text:0040579C                 jmp     short loc_405770
.text:0040579E ; ---------------------------------------------------------------------------
.text:0040579E
.text:0040579E loc_40579E:                             ; CODE XREF: _sysconf+12↑j
.text:0040579E                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:0040579E                 mov     eax, 1          ; jumptable 67026652 case 52
.text:0040579E                                         ; jumptable 00405532 case 52
.text:004057A3                 jmp     short loc_405770
.text:004057A5 ; ---------------------------------------------------------------------------
.text:004057A5
.text:004057A5 loc_4057A5:                             ; CODE XREF: _sysconf+12↑j
.text:004057A5                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:004057A5                 mov     eax, 400h       ; jumptable 67026652 cases 69,70
.text:004057A5                                         ; jumptable 00405532 cases 69,70
.text:004057AA                 jmp     short loc_405770
.text:004057AC ; ---------------------------------------------------------------------------
.text:004057AC
.text:004057AC loc_4057AC:                             ; CODE XREF: _sysconf+12↑j
.text:004057AC                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:004057AC                 add     esp, 0Ch        ; jumptable 67026652 case 83
.text:004057AC                                         ; jumptable 00405532 case 83
.text:004057AF                 jmp     sub_405C10
.text:004057B4 ; ---------------------------------------------------------------------------
.text:004057B4
.text:004057B4 loc_4057B4:                             ; CODE XREF: _sysconf+12↑j
.text:004057B4                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:004057B4                 add     esp, 0Ch        ; jumptable 67026652 case 84
.text:004057B4                                         ; jumptable 00405532 case 84
.text:004057B7                 jmp     sub_405BC0
.text:004057BC ; ---------------------------------------------------------------------------
.text:004057BC
.text:004057BC loc_4057BC:                             ; CODE XREF: _sysconf+12↑j
.text:004057BC                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:004057BC                 add     esp, 0Ch        ; jumptable 67026652 case 85
.text:004057BC                                         ; jumptable 00405532 case 85
.text:004057BF                 jmp     sub_405C60
.text:004057C4 ; ---------------------------------------------------------------------------
.text:004057C4
.text:004057C4 loc_4057C4:                             ; CODE XREF: _sysconf+12↑j
.text:004057C4                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:004057C4                 add     esp, 0Ch        ; jumptable 67026652 case 86
.text:004057C4                                         ; jumptable 00405532 case 86
.text:004057C7                 jmp     sub_405CC0
.text:004057CC ; ---------------------------------------------------------------------------
.text:004057CC
.text:004057CC loc_4057CC:                             ; CODE XREF: _sysconf+12↑j
.text:004057CC                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:004057CC                 mov     eax, 200h       ; jumptable 67026652 case 88
.text:004057CC                                         ; jumptable 00405532 case 88
.text:004057D1                 jmp     short loc_405770
.text:004057D3 ; ---------------------------------------------------------------------------
.text:004057D3
.text:004057D3 loc_4057D3:                             ; CODE XREF: _sysconf+12↑j
.text:004057D3                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:004057D3                 mov     eax, 8          ; jumptable 67026652 case 101
.text:004057D3                                         ; jumptable 00405532 case 101
.text:004057D8                 jmp     short loc_405770
.text:004057DA ; ---------------------------------------------------------------------------
.text:004057DA
.text:004057DA loc_4057DA:                             ; CODE XREF: _sysconf+12↑j
.text:004057DA                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:004057DA                 mov     eax, 7FFFFFFFh  ; jumptable 67026652 cases 87,104
.text:004057DA                                         ; jumptable 00405532 cases 87,104
.text:004057DF                 jmp     short loc_405770
.text:004057E1 ; ---------------------------------------------------------------------------
.text:004057E1
.text:004057E1 loc_4057E1:                             ; CODE XREF: _sysconf+12↑j
.text:004057E1                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:004057E1                 mov     eax, 80000000h  ; jumptable 67026652 case 105
.text:004057E1                                         ; jumptable 00405532 case 105
.text:004057E6                 jmp     short loc_405770
.text:004057E8 ; ---------------------------------------------------------------------------
.text:004057E8
.text:004057E8 loc_4057E8:                             ; CODE XREF: _sysconf+12↑j
.text:004057E8                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:004057E8                 mov     eax, 20h ; ' '  ; jumptable 67026652 cases 106,107
.text:004057E8                                         ; jumptable 00405532 cases 106,107
.text:004057ED                 jmp     short loc_405770
.text:004057EF ; ---------------------------------------------------------------------------
.text:004057EF
.text:004057EF loc_4057EF:                             ; CODE XREF: _sysconf+12↑j
.text:004057EF                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:004057EF                 mov     eax, 2          ; jumptable 67026652 case 108
.text:004057EF                                         ; jumptable 00405532 case 108
.text:004057F4                 jmp     loc_405770
.text:004057F9 ; ---------------------------------------------------------------------------
.text:004057F9
.text:004057F9 loc_4057F9:                             ; CODE XREF: _sysconf+12↑j
.text:004057F9                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:004057F9                 xor     eax, eax        ; jumptable 67026652 case 109
.text:004057F9                                         ; jumptable 00405532 case 109
.text:004057FB                 jmp     loc_405770
.text:00405800 ; ---------------------------------------------------------------------------
.text:00405800
.text:00405800 loc_405800:                             ; CODE XREF: _sysconf+12↑j
.text:00405800                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:00405800                 mov     eax, 7Fh        ; jumptable 67026652 cases 102,111
.text:00405800                                         ; jumptable 00405532 cases 102,111
.text:00405805                 jmp     loc_405770
.text:0040580A ; ---------------------------------------------------------------------------
.text:0040580A
.text:0040580A loc_40580A:                             ; CODE XREF: _sysconf+12↑j
.text:0040580A                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:0040580A                 mov     eax, 0FFFFFF80h ; jumptable 67026652 cases 103,112
.text:0040580A                                         ; jumptable 00405532 cases 103,112
.text:0040580F                 jmp     loc_405770
.text:00405814 ; ---------------------------------------------------------------------------
.text:00405814
.text:00405814 loc_405814:                             ; CODE XREF: _sysconf+12↑j
.text:00405814                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:00405814                 mov     eax, 7FFFh      ; jumptable 67026652 cases 110,113
.text:00405814                                         ; jumptable 00405532 cases 110,113
.text:00405819                 jmp     loc_405770
.text:0040581E ; ---------------------------------------------------------------------------
.text:0040581E
.text:0040581E loc_40581E:                             ; CODE XREF: _sysconf+12↑j
.text:0040581E                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:0040581E                 mov     eax, 0FFFF8000h ; jumptable 67026652 case 114
.text:0040581E                                         ; jumptable 00405532 case 114
.text:00405823                 jmp     loc_405770
.text:00405828 ; ---------------------------------------------------------------------------
.text:00405828
.text:00405828 loc_405828:                             ; CODE XREF: _sysconf+12↑j
.text:00405828                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:00405828                 mov     eax, 0FFh       ; jumptable 67026652 cases 40,115
.text:00405828                                         ; jumptable 00405532 cases 40,115
.text:0040582D                 jmp     loc_405770
.text:00405832 ; ---------------------------------------------------------------------------
.text:00405832
.text:00405832 loc_405832:                             ; CODE XREF: _sysconf+12↑j
.text:00405832                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:00405832                 mov     eax, 0FFFFh     ; jumptable 67026652 case 118
.text:00405832                                         ; jumptable 00405532 case 118
.text:00405837                 jmp     loc_405770
.text:0040583C ; ---------------------------------------------------------------------------
.text:0040583C
.text:0040583C loc_40583C:                             ; CODE XREF: _sysconf+12↑j
.text:0040583C                                         ; DATA XREF: _sysconf:jpt_405532↑o
.text:0040583C                 call    _errno          ; jumptable 67026652 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:0040583C                                         ; jumptable 00405532 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:00405841                 mov     dword ptr [eax], 28h ; '('
.text:00405847                 jmp     loc_405760      ; jumptable 67026652 cases 41,116,117
.text:00405847 _sysconf        endp                    ; jumptable 00405532 cases 41,116,117
.text:00405847
.text:00405847 ; ---------------------------------------------------------------------------
.text:0040584C                 align 10h
.text:00405850
.text:00405850 ; =============== S U B R O U T I N E =======================================
.text:00405850
.text:00405850
.text:00405850 sub_405850      proc near               ; CODE XREF: sub_404D50+134↑p
.text:00405850                                         ; sub_404D50+167↑p
.text:00405850
.text:00405850 var_1C          = dword ptr -1Ch
.text:00405850 var_18          = dword ptr -18h
.text:00405850 var_14          = dword ptr -14h
.text:00405850 arg_0           = dword ptr  4
.text:00405850 arg_4           = dword ptr  8
.text:00405850 arg_8           = dword ptr  0Ch
.text:00405850
.text:00405850                 push    edi
.text:00405851                 push    esi
.text:00405852                 push    ebx
.text:00405853                 sub     esp, 10h
.text:00405856                 mov     edi, [esp+1Ch+arg_8]
.text:0040585A                 mov     esi, [esp+1Ch+arg_0]
.text:0040585E                 mov     ebx, [esp+1Ch+arg_4]
.text:00405862                 cmp     edi, 0Fh
.text:00405865                 jbe     short loc_4058B0
.text:00405867                 mov     ecx, esi
.text:00405869                 neg     ecx
.text:0040586B                 and     ecx, 3
.text:0040586E                 sub     edi, ecx
.text:00405870                 mov     edx, ecx
.text:00405872                 test    ecx, ecx
.text:00405874                 jz      short loc_40588A
.text:00405876                 lea     esi, [esi+0]
.text:00405879                 lea     edi, [edi+0]
.text:00405880
.text:00405880 loc_405880:                             ; CODE XREF: sub_405850+38↓j
.text:00405880                 movzx   ecx, byte ptr [ebx]
.text:00405883                 inc     ebx
.text:00405884                 mov     [esi], cl
.text:00405886                 inc     esi
.text:00405887                 dec     edx
.text:00405888                 jnz     short loc_405880
.text:0040588A
.text:0040588A loc_40588A:                             ; CODE XREF: sub_405850+24↑j
.text:0040588A                 test    bl, 3
.text:0040588D                 jnz     short loc_4058D3
.text:0040588F                 mov     [esp+1Ch+var_18], ebx
.text:00405893                 mov     edx, edi
.text:00405895                 shr     edx, 2
.text:00405898                 mov     [esp+1Ch+var_14], edx
.text:0040589C                 mov     [esp+1Ch+var_1C], esi
.text:0040589F                 call    sub_405D40
.text:004058A4
.text:004058A4 loc_4058A4:                             ; CODE XREF: sub_405850+98↓j
.text:004058A4                 mov     edx, edi
.text:004058A6                 and     edx, 0FFFFFFFCh
.text:004058A9                 and     edi, 3
.text:004058AC                 add     ebx, edx
.text:004058AE                 add     esi, edx
.text:004058B0
.text:004058B0 loc_4058B0:                             ; CODE XREF: sub_405850+15↑j
.text:004058B0                 test    edi, edi
.text:004058B2                 mov     edx, edi
.text:004058B4                 jz      short loc_4058CA
.text:004058B6                 lea     esi, [esi+0]
.text:004058B9                 lea     edi, [edi+0]
.text:004058C0
.text:004058C0 loc_4058C0:                             ; CODE XREF: sub_405850+78↓j
.text:004058C0                 movzx   ecx, byte ptr [ebx]
.text:004058C3                 inc     ebx
.text:004058C4                 mov     [esi], cl
.text:004058C6                 inc     esi
.text:004058C7                 dec     edx
.text:004058C8                 jnz     short loc_4058C0
.text:004058CA
.text:004058CA loc_4058CA:                             ; CODE XREF: sub_405850+64↑j
.text:004058CA                 add     esp, 10h
.text:004058CD                 mov     eax, esi
.text:004058CF                 pop     ebx
.text:004058D0                 pop     esi
.text:004058D1                 pop     edi
.text:004058D2                 retn
.text:004058D3 ; ---------------------------------------------------------------------------
.text:004058D3
.text:004058D3 loc_4058D3:                             ; CODE XREF: sub_405850+3D↑j
.text:004058D3                 mov     [esp+1Ch+var_18], ebx
.text:004058D7                 mov     ecx, edi
.text:004058D9                 shr     ecx, 2
.text:004058DC                 mov     [esp+1Ch+var_14], ecx
.text:004058E0                 mov     [esp+1Ch+var_1C], esi
.text:004058E3                 call    sub_405E40
.text:004058E8                 jmp     short loc_4058A4
.text:004058E8 sub_405850      endp
.text:004058E8
.text:004058E8 ; ---------------------------------------------------------------------------
.text:004058EA                 align 10h
.text:004058F0
.text:004058F0 ; =============== S U B R O U T I N E =======================================
.text:004058F0
.text:004058F0
.text:004058F0 sub_4058F0      proc near               ; CODE XREF: sub_4050E0↑j
.text:004058F0                 sub     esp, 0Ch
.text:004058F3                 mov     eax, off_40806C
.text:004058F8                 call    dword ptr [eax]
.text:004058FA                 add     esp, 0Ch
.text:004058FD                 retn
.text:004058FD sub_4058F0      endp
.text:004058FD
.text:004058FD ; ---------------------------------------------------------------------------
.text:004058FE                 align 10h
.text:00405900
.text:00405900 ; =============== S U B R O U T I N E =======================================
.text:00405900
.text:00405900
.text:00405900 sub_405900      proc near               ; CODE XREF: sub_405AB0+31↓p
.text:00405900
.text:00405900 var_C           = dword ptr -0Ch
.text:00405900 var_8           = dword ptr -8
.text:00405900 arg_0           = dword ptr  4
.text:00405900 arg_4           = dword ptr  8
.text:00405900
.text:00405900                 sub     esp, 0Ch
.text:00405903                 mov     edx, [esp+0Ch+arg_4]
.text:00405907                 mov     eax, off_40806C
.text:0040590C                 mov     [esp+0Ch+var_8], edx
.text:00405910                 mov     edx, [esp+0Ch+arg_0]
.text:00405914                 mov     [esp+0Ch+var_C], edx
.text:00405917                 call    dword ptr [eax+4]
.text:0040591A                 add     esp, 0Ch
.text:0040591D                 retn
.text:0040591D sub_405900      endp
.text:0040591D
.text:0040591D ; ---------------------------------------------------------------------------
.text:0040591E                 align 10h
.text:00405920                 sub     esp, 0Ch
.text:00405923                 mov     edx, [esp+10h]
.text:00405927                 mov     eax, off_40806C
.text:0040592C                 mov     [esp], edx
.text:0040592F                 call    dword ptr [eax+10h]
.text:00405932                 add     esp, 0Ch
.text:00405935                 retn
.text:00405935 ; ---------------------------------------------------------------------------
.text:00405936                 align 10h
.text:00405940
.text:00405940 ; =============== S U B R O U T I N E =======================================
.text:00405940
.text:00405940
.text:00405940 sub_405940      proc near               ; CODE XREF: sub_4050C0↑j
.text:00405940                 sub     esp, 0Ch
.text:00405943                 mov     edx, off_40806C
.text:00405949                 call    dword ptr [edx+14h]
.text:0040594C                 mov     edx, offset off_408050
.text:00405951                 mov     off_40806C, edx
.text:00405957                 add     esp, 0Ch
.text:0040595A                 retn
.text:0040595A sub_405940      endp
.text:0040595A
.text:0040595A ; ---------------------------------------------------------------------------
.text:0040595B                 align 10h
.text:00405960
.text:00405960 ; =============== S U B R O U T I N E =======================================
.text:00405960
.text:00405960
.text:00405960 sub_405960      proc near               ; DATA XREF: .data:off_408050↓o
.text:00405960                 sub     esp, 0Ch
.text:00405963                 call    off_408084
.text:00405969                 test    eax, eax
.text:0040596B                 jz      short loc_405978
.text:0040596D                 mov     ecx, offset off_408084
.text:00405972                 mov     off_40806C, ecx
.text:00405978
.text:00405978 loc_405978:                             ; CODE XREF: sub_405960+B↑j
.text:00405978                 add     esp, 0Ch
.text:0040597B                 retn
.text:0040597B sub_405960      endp
.text:0040597B
.text:0040597B ; ---------------------------------------------------------------------------
.text:0040597C                 align 10h
.text:00405980
.text:00405980 ; =============== S U B R O U T I N E =======================================
.text:00405980
.text:00405980
.text:00405980 sub_405980      proc near               ; DATA XREF: .data:00408054↓o
.text:00405980
.text:00405980 var_C           = dword ptr -0Ch
.text:00405980 var_8           = dword ptr -8
.text:00405980 var_4           = dword ptr -4
.text:00405980 arg_0           = dword ptr  4
.text:00405980 arg_4           = dword ptr  8
.text:00405980
.text:00405980                 sub     esp, 0Ch
.text:00405983                 mov     [esp+0Ch+var_4], ebx
.text:00405987                 mov     ebx, [esp+0Ch+arg_4]
.text:0040598B                 call    off_408084
.text:00405991                 test    eax, eax
.text:00405993                 jz      short loc_4059B8
.text:00405995                 mov     [esp+0Ch+var_8], ebx
.text:00405999                 mov     edx, [esp+0Ch+arg_0]
.text:0040599D                 mov     eax, offset off_408084
.text:004059A2                 mov     off_40806C, eax
.text:004059A7                 mov     [esp+0Ch+var_C], edx
.text:004059AA                 call    off_408088
.text:004059B0
.text:004059B0 loc_4059B0:                             ; CODE XREF: sub_405980+43↓j
.text:004059B0                 mov     ebx, [esp+0Ch+var_4]
.text:004059B4                 add     esp, 0Ch
.text:004059B7                 retn
.text:004059B8 ; ---------------------------------------------------------------------------
.text:004059B8
.text:004059B8 loc_4059B8:                             ; CODE XREF: sub_405980+13↑j
.text:004059B8                 mov     dword ptr [ebx], 0
.text:004059BE                 mov     eax, 0FFFFFFFFh
.text:004059C3                 jmp     short loc_4059B0
.text:004059C3 sub_405980      endp
.text:004059C3
.text:004059C3 ; ---------------------------------------------------------------------------
.text:004059C5                 align 10h
.text:004059D0
.text:004059D0 ; =============== S U B R O U T I N E =======================================
.text:004059D0
.text:004059D0
.text:004059D0 sub_4059D0      proc near               ; DATA XREF: .data:00408058↓o
.text:004059D0
.text:004059D0 var_1C          = dword ptr -1Ch
.text:004059D0 var_18          = dword ptr -18h
.text:004059D0 var_14          = dword ptr -14h
.text:004059D0 var_4           = dword ptr -4
.text:004059D0 arg_0           = dword ptr  4
.text:004059D0 arg_4           = dword ptr  8
.text:004059D0 arg_8           = dword ptr  0Ch
.text:004059D0
.text:004059D0                 sub     esp, 1Ch
.text:004059D3                 mov     [esp+1Ch+var_4], ebx
.text:004059D7                 mov     ebx, [esp+1Ch+arg_8]
.text:004059DB                 call    off_408084
.text:004059E1                 test    eax, eax
.text:004059E3                 jz      short loc_405A11
.text:004059E5                 mov     [esp+1Ch+var_14], ebx
.text:004059E9                 mov     edx, [esp+1Ch+arg_4]
.text:004059ED                 mov     ecx, offset off_408084
.text:004059F2                 mov     off_40806C, ecx
.text:004059F8                 mov     [esp+1Ch+var_18], edx
.text:004059FC                 mov     edx, [esp+1Ch+arg_0]
.text:00405A00                 mov     [esp+1Ch+var_1C], edx
.text:00405A03                 call    off_40808C
.text:00405A09
.text:00405A09 loc_405A09:                             ; CODE XREF: sub_4059D0+4C↓j
.text:00405A09                 mov     ebx, [esp+1Ch+var_4]
.text:00405A0D                 add     esp, 1Ch
.text:00405A10                 retn
.text:00405A11 ; ---------------------------------------------------------------------------
.text:00405A11
.text:00405A11 loc_405A11:                             ; CODE XREF: sub_4059D0+13↑j
.text:00405A11                 mov     dword ptr [ebx], 0
.text:00405A17                 mov     eax, 0FFFFFFFFh
.text:00405A1C                 jmp     short loc_405A09
.text:00405A1C sub_4059D0      endp
.text:00405A1C
.text:00405A1C ; ---------------------------------------------------------------------------
.text:00405A1E                 align 10h
.text:00405A20
.text:00405A20 ; =============== S U B R O U T I N E =======================================
.text:00405A20
.text:00405A20
.text:00405A20 sub_405A20      proc near               ; DATA XREF: .data:0040805C↓o
.text:00405A20
.text:00405A20 var_1C          = dword ptr -1Ch
.text:00405A20 var_18          = dword ptr -18h
.text:00405A20 var_14          = dword ptr -14h
.text:00405A20 var_4           = dword ptr -4
.text:00405A20 arg_0           = dword ptr  4
.text:00405A20 arg_4           = dword ptr  8
.text:00405A20 arg_8           = dword ptr  0Ch
.text:00405A20
.text:00405A20                 sub     esp, 1Ch
.text:00405A23                 mov     [esp+1Ch+var_4], ebx
.text:00405A27                 mov     ebx, [esp+1Ch+arg_8]
.text:00405A2B                 call    off_408084
.text:00405A31                 test    eax, eax
.text:00405A33                 jz      short loc_405A61
.text:00405A35                 mov     [esp+1Ch+var_14], ebx
.text:00405A39                 mov     edx, [esp+1Ch+arg_4]
.text:00405A3D                 mov     ecx, offset off_408084
.text:00405A42                 mov     off_40806C, ecx
.text:00405A48                 mov     [esp+1Ch+var_18], edx
.text:00405A4C                 mov     edx, [esp+1Ch+arg_0]
.text:00405A50                 mov     [esp+1Ch+var_1C], edx
.text:00405A53                 call    off_408090
.text:00405A59
.text:00405A59 loc_405A59:                             ; CODE XREF: sub_405A20+4C↓j
.text:00405A59                 mov     ebx, [esp+1Ch+var_4]
.text:00405A5D                 add     esp, 1Ch
.text:00405A60                 retn
.text:00405A61 ; ---------------------------------------------------------------------------
.text:00405A61
.text:00405A61 loc_405A61:                             ; CODE XREF: sub_405A20+13↑j
.text:00405A61                 mov     dword ptr [ebx], 0
.text:00405A67                 mov     eax, 0FFFFFFFFh
.text:00405A6C                 jmp     short loc_405A59
.text:00405A6C sub_405A20      endp
.text:00405A6C
.text:00405A6C ; ---------------------------------------------------------------------------
.text:00405A6E                 align 10h
.text:00405A70
.text:00405A70 ; =============== S U B R O U T I N E =======================================
.text:00405A70
.text:00405A70
.text:00405A70 ; int __cdecl sub_405A70(void *)
.text:00405A70 sub_405A70      proc near               ; DATA XREF: .data:00408060↓o
.text:00405A70
.text:00405A70 Buf             = dword ptr -0Ch
.text:00405A70 arg_0           = dword ptr  4
.text:00405A70
.text:00405A70                 sub     esp, 0Ch
.text:00405A73                 call    off_408084
.text:00405A79                 xor     edx, edx
.text:00405A7B                 test    eax, eax
.text:00405A7D                 jz      short loc_405A99
.text:00405A7F                 mov     edx, offset off_408084
.text:00405A84                 mov     off_40806C, edx
.text:00405A8A                 mov     edx, [esp+0Ch+arg_0]
.text:00405A8E                 mov     [esp+0Ch+Buf], edx ; Buf
.text:00405A91                 call    off_408094
.text:00405A97                 mov     edx, eax
.text:00405A99
.text:00405A99 loc_405A99:                             ; CODE XREF: sub_405A70+D↑j
.text:00405A99                 mov     eax, edx
.text:00405A9B                 add     esp, 0Ch
.text:00405A9E                 retn
.text:00405A9E sub_405A70      endp
.text:00405A9E
.text:00405A9E ; ---------------------------------------------------------------------------
.text:00405A9F                 align 10h
.text:00405AA0
.text:00405AA0 ; =============== S U B R O U T I N E =======================================
.text:00405AA0
.text:00405AA0
.text:00405AA0 nullsub_1       proc near               ; DATA XREF: .data:00408064↓o
.text:00405AA0                 retn
.text:00405AA0 nullsub_1       endp
.text:00405AA0
.text:00405AA0 ; ---------------------------------------------------------------------------
.text:00405AA1                 align 10h
.text:00405AB0
.text:00405AB0 ; =============== S U B R O U T I N E =======================================
.text:00405AB0
.text:00405AB0
.text:00405AB0 sub_405AB0      proc near               ; CODE XREF: sub_4050D0↑j
.text:00405AB0
.text:00405AB0 Size            = dword ptr -0Ch
.text:00405AB0 var_8           = dword ptr -8
.text:00405AB0 var_4           = dword ptr -4
.text:00405AB0
.text:00405AB0                 sub     esp, 0Ch
.text:00405AB3                 mov     edx, ds:dword_4091B0
.text:00405AB9                 test    edx, edx
.text:00405ABB                 jnz     short loc_405AD6
.text:00405ABD                 mov     [esp+0Ch+Size], 180h ; Size
.text:00405AC4                 call    malloc
.text:00405AC9                 mov     ds:dword_4091B0, eax
.text:00405ACE                 mov     edx, eax
.text:00405AD0                 xor     eax, eax
.text:00405AD2                 test    edx, edx
.text:00405AD4                 jz      short loc_405AF0
.text:00405AD6
.text:00405AD6 loc_405AD6:                             ; CODE XREF: sub_405AB0+B↑j
.text:00405AD6                 mov     [esp+0Ch+Size], edx
.text:00405AD9                 lea     ecx, [esp+0Ch+var_4]
.text:00405ADD                 mov     [esp+0Ch+var_8], ecx
.text:00405AE1                 call    sub_405900
.text:00405AE6                 mov     ecx, [esp+0Ch+var_4]
.text:00405AEA                 shr     eax, 1Fh
.text:00405AED                 dec     eax
.text:00405AEE                 and     eax, ecx
.text:00405AF0
.text:00405AF0 loc_405AF0:                             ; CODE XREF: sub_405AB0+24↑j
.text:00405AF0                 add     esp, 0Ch
.text:00405AF3                 retn
.text:00405AF3 sub_405AB0      endp
.text:00405AF3
.text:00405AF3 ; ---------------------------------------------------------------------------
.text:00405AF4                 align 10h
.text:00405B00 ; const char aVarRunUtmp_0[]
.text:00405B00 aVarRunUtmp_0   db '/var/run/utmp',0    ; DATA XREF: sub_405B10:loc_405B60↓o
.text:00405B00                                         ; sub_405B10+69↓o ...
.text:00405B0E                 align 10h
.text:00405B10
.text:00405B10 ; =============== S U B R O U T I N E =======================================
.text:00405B10
.text:00405B10
.text:00405B10 ; int __cdecl sub_405B10(char *String)
.text:00405B10 sub_405B10      proc near               ; CODE XREF: sub_4050F0↑j
.text:00405B10
.text:00405B10 Str1            = dword ptr -1Ch
.text:00405B10 Str2            = dword ptr -18h
.text:00405B10 var_8           = dword ptr -8
.text:00405B10 var_4           = dword ptr -4
.text:00405B10 String          = dword ptr  4
.text:00405B10
.text:00405B10                 sub     esp, 1Ch
.text:00405B13                 mov     edx, off_40806C
.text:00405B19                 mov     [esp+1Ch+var_8], ebx
.text:00405B1D                 mov     ebx, [esp+1Ch+String]
.text:00405B21                 mov     [esp+1Ch+var_4], esi
.text:00405B25                 mov     esi, 0FFFFFFFFh
.text:00405B2A                 call    dword ptr [edx+14h]
.text:00405B2D                 mov     [esp+1Ch+Str1], ebx ; Str1
.text:00405B30                 mov     edx, FileName
.text:00405B36                 mov     eax, offset off_408050
.text:00405B3B                 mov     off_40806C, eax
.text:00405B40                 mov     [esp+1Ch+Str2], edx ; Str2
.text:00405B44                 call    strcmp
.text:00405B49                 test    eax, eax
.text:00405B4B                 jnz     short loc_405B60
.text:00405B4D
.text:00405B4D loc_405B4D:                             ; CODE XREF: sub_405B10+83↓j
.text:00405B4D                                         ; sub_405B10+AD↓j
.text:00405B4D                 xor     esi, esi
.text:00405B4F
.text:00405B4F loc_405B4F:                             ; CODE XREF: sub_405B10+91↓j
.text:00405B4F                 mov     eax, esi
.text:00405B51                 mov     ebx, [esp+1Ch+var_8]
.text:00405B55                 mov     esi, [esp+1Ch+var_4]
.text:00405B59                 add     esp, 1Ch
.text:00405B5C                 retn
.text:00405B5C ; ---------------------------------------------------------------------------
.text:00405B5D                 align 10h
.text:00405B60
.text:00405B60 loc_405B60:                             ; CODE XREF: sub_405B10+3B↑j
.text:00405B60                 mov     [esp+1Ch+Str2], offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:00405B68                 mov     [esp+1Ch+Str1], ebx ; Str1
.text:00405B6B                 call    strcmp
.text:00405B70                 test    eax, eax
.text:00405B72                 jnz     short loc_405B95
.text:00405B74                 mov     eax, FileName
.text:00405B79                 cmp     eax, offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:00405B7E                 jz      short loc_405B88
.text:00405B80                 mov     [esp+1Ch+Str1], eax ; Block
.text:00405B83                 call    free
.text:00405B88
.text:00405B88 loc_405B88:                             ; CODE XREF: sub_405B10+6E↑j
.text:00405B88                 mov     ecx, offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:00405B8D                 mov     FileName, ecx
.text:00405B93                 jmp     short loc_405B4D
.text:00405B95 ; ---------------------------------------------------------------------------
.text:00405B95
.text:00405B95 loc_405B95:                             ; CODE XREF: sub_405B10+62↑j
.text:00405B95                 mov     [esp+1Ch+Str1], ebx ; String
.text:00405B98                 call    _strdup
.text:00405B9D                 test    eax, eax
.text:00405B9F                 mov     ebx, eax
.text:00405BA1                 jz      short loc_405B4F
.text:00405BA3                 mov     eax, FileName
.text:00405BA8                 cmp     eax, offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:00405BAD                 jz      short loc_405BB7
.text:00405BAF                 mov     [esp+1Ch+Str1], eax ; Block
.text:00405BB2                 call    free
.text:00405BB7
.text:00405BB7 loc_405BB7:                             ; CODE XREF: sub_405B10+9D↑j
.text:00405BB7                 mov     FileName, ebx
.text:00405BBD                 jmp     short loc_405B4D
.text:00405BBD sub_405B10      endp
.text:00405BBD
.text:00405BBD ; ---------------------------------------------------------------------------
.text:00405BBF                 align 10h
.text:00405BC0
.text:00405BC0 ; =============== S U B R O U T I N E =======================================
.text:00405BC0
.text:00405BC0
.text:00405BC0 sub_405BC0      proc near               ; CODE XREF: _sysconf+297↑j
.text:00405BC0
.text:00405BC0 lpSystemInfo    = dword ptr -0Ch
.text:00405BC0 var_4           = dword ptr -4
.text:00405BC0
.text:00405BC0                 sub     esp, 0Ch
.text:00405BC3                 mov     [esp+0Ch+var_4], edi
.text:00405BC7                 mov     edi, ds:dword_4091C0
.text:00405BCD                 test    edi, edi
.text:00405BCF                 mov     eax, edi
.text:00405BD1                 jz      short loc_405BE0
.text:00405BD3
.text:00405BD3 loc_405BD3:                             ; CODE XREF: sub_405BC0+48↓j
.text:00405BD3                 mov     eax, [edi+14h]
.text:00405BD6                 mov     edi, [esp+0Ch+var_4]
.text:00405BDA                 add     esp, 0Ch
.text:00405BDD                 retn
.text:00405BDD ; ---------------------------------------------------------------------------
.text:00405BDE                 align 10h
.text:00405BE0
.text:00405BE0 loc_405BE0:                             ; CODE XREF: sub_405BC0+11↑j
.text:00405BE0                 cld
.text:00405BE1                 mov     edi, offset SystemInfo
.text:00405BE6                 mov     ecx, 9
.text:00405BEB                 mov     ds:dword_4091C0, edi
.text:00405BF1                 rep stosd
.text:00405BF3                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00405BFA                 call    GetSystemInfo
.text:00405BFF                 mov     edi, ds:dword_4091C0
.text:00405C05                 sub     esp, 4
.text:00405C08                 jmp     short loc_405BD3
.text:00405C08 sub_405BC0      endp
.text:00405C08
.text:00405C08 ; ---------------------------------------------------------------------------
.text:00405C0A                 align 10h
.text:00405C10
.text:00405C10 ; =============== S U B R O U T I N E =======================================
.text:00405C10
.text:00405C10
.text:00405C10 sub_405C10      proc near               ; CODE XREF: _sysconf+28F↑j
.text:00405C10
.text:00405C10 lpSystemInfo    = dword ptr -0Ch
.text:00405C10 var_4           = dword ptr -4
.text:00405C10
.text:00405C10                 sub     esp, 0Ch
.text:00405C13                 mov     [esp+0Ch+var_4], edi
.text:00405C17                 mov     edi, ds:dword_4091C0
.text:00405C1D                 test    edi, edi
.text:00405C1F                 mov     eax, edi
.text:00405C21                 jz      short loc_405C30
.text:00405C23
.text:00405C23 loc_405C23:                             ; CODE XREF: sub_405C10+48↓j
.text:00405C23                 mov     eax, [edi+14h]
.text:00405C26                 mov     edi, [esp+0Ch+var_4]
.text:00405C2A                 add     esp, 0Ch
.text:00405C2D                 retn
.text:00405C2D ; ---------------------------------------------------------------------------
.text:00405C2E                 align 10h
.text:00405C30
.text:00405C30 loc_405C30:                             ; CODE XREF: sub_405C10+11↑j
.text:00405C30                 cld
.text:00405C31                 mov     edi, offset SystemInfo
.text:00405C36                 mov     ecx, 9
.text:00405C3B                 mov     ds:dword_4091C0, edi
.text:00405C41                 rep stosd
.text:00405C43                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00405C4A                 call    GetSystemInfo
.text:00405C4F                 mov     edi, ds:dword_4091C0
.text:00405C55                 sub     esp, 4
.text:00405C58                 jmp     short loc_405C23
.text:00405C58 sub_405C10      endp
.text:00405C58
.text:00405C58 ; ---------------------------------------------------------------------------
.text:00405C5A                 align 10h
.text:00405C60
.text:00405C60 ; =============== S U B R O U T I N E =======================================
.text:00405C60
.text:00405C60
.text:00405C60 sub_405C60      proc near               ; CODE XREF: _sysconf+29F↑j
.text:00405C60
.text:00405C60 lpSystemInfo    = dword ptr -0Ch
.text:00405C60 var_4           = dword ptr -4
.text:00405C60
.text:00405C60                 sub     esp, 0Ch
.text:00405C63                 mov     [esp+0Ch+var_4], edi
.text:00405C67                 mov     edi, ds:dword_4091C0
.text:00405C6D                 test    edi, edi
.text:00405C6F                 mov     eax, edi
.text:00405C71                 jz      short loc_405C88
.text:00405C73
.text:00405C73 loc_405C73:                             ; CODE XREF: sub_405C60+50↓j
.text:00405C73                 mov     eax, [edi+0Ch]
.text:00405C76                 xor     edx, edx
.text:00405C78                 mov     ecx, [edi+8]
.text:00405C7B                 sub     eax, ecx
.text:00405C7D                 div     dword ptr [edi+4]
.text:00405C80                 mov     edi, [esp+0Ch+var_4]
.text:00405C84                 add     esp, 0Ch
.text:00405C87                 retn
.text:00405C88 ; ---------------------------------------------------------------------------
.text:00405C88
.text:00405C88 loc_405C88:                             ; CODE XREF: sub_405C60+11↑j
.text:00405C88                 cld
.text:00405C89                 mov     edi, offset SystemInfo
.text:00405C8E                 mov     ecx, 9
.text:00405C93                 mov     ds:dword_4091C0, edi
.text:00405C99                 rep stosd
.text:00405C9B                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00405CA2                 call    GetSystemInfo
.text:00405CA7                 mov     edi, ds:dword_4091C0
.text:00405CAD                 sub     esp, 4
.text:00405CB0                 jmp     short loc_405C73
.text:00405CB0 sub_405C60      endp
.text:00405CB0
.text:00405CB0 ; ---------------------------------------------------------------------------
.text:00405CB2                 align 10h
.text:00405CC0
.text:00405CC0 ; =============== S U B R O U T I N E =======================================
.text:00405CC0
.text:00405CC0
.text:00405CC0 sub_405CC0      proc near               ; CODE XREF: _sysconf+2A7↑j
.text:00405CC0
.text:00405CC0 lpSystemInfo    = dword ptr -0Ch
.text:00405CC0 var_4           = dword ptr -4
.text:00405CC0
.text:00405CC0                 sub     esp, 0Ch
.text:00405CC3                 mov     [esp+0Ch+var_4], edi
.text:00405CC7                 mov     edi, ds:dword_4091C0
.text:00405CCD                 test    edi, edi
.text:00405CCF                 mov     eax, edi
.text:00405CD1                 jz      short loc_405CE8
.text:00405CD3
.text:00405CD3 loc_405CD3:                             ; CODE XREF: sub_405CC0+50↓j
.text:00405CD3                 mov     edx, [edi+8]
.text:00405CD6                 mov     eax, [edi+0Ch]
.text:00405CD9                 sub     eax, edx
.text:00405CDB                 xor     edx, edx
.text:00405CDD                 div     dword ptr [edi+4]
.text:00405CE0                 mov     edi, [esp+0Ch+var_4]
.text:00405CE4                 add     esp, 0Ch
.text:00405CE7                 retn
.text:00405CE8 ; ---------------------------------------------------------------------------
.text:00405CE8
.text:00405CE8 loc_405CE8:                             ; CODE XREF: sub_405CC0+11↑j
.text:00405CE8                 cld
.text:00405CE9                 mov     edi, offset SystemInfo
.text:00405CEE                 mov     ecx, 9
.text:00405CF3                 mov     ds:dword_4091C0, edi
.text:00405CF9                 rep stosd
.text:00405CFB                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00405D02                 call    GetSystemInfo
.text:00405D07                 mov     edi, ds:dword_4091C0
.text:00405D0D                 sub     esp, 4
.text:00405D10                 jmp     short loc_405CD3
.text:00405D10 sub_405CC0      endp
.text:00405D10
.text:00405D10 ; ---------------------------------------------------------------------------
.text:00405D12                 align 10h
.text:00405D20
.text:00405D20 ; =============== S U B R O U T I N E =======================================
.text:00405D20
.text:00405D20
.text:00405D20 sub_405D20      proc near               ; CODE XREF: _sysconf:loc_40577B↑p
.text:00405D20                                         ; _sysconf:loc_40578E↑p
.text:00405D20                 mov     edx, 40h ; '@'
.text:00405D25                 mov     eax, 40h ; '@'
.text:00405D2A                 mov     ds:dword_409410, edx
.text:00405D30                 retn
.text:00405D30 sub_405D20      endp
.text:00405D30
.text:00405D30 ; ---------------------------------------------------------------------------
.text:00405D31                 align 10h
.text:00405D40
.text:00405D40 ; =============== S U B R O U T I N E =======================================
.text:00405D40
.text:00405D40
.text:00405D40 sub_405D40      proc near               ; CODE XREF: sub_405850+4F↑p
.text:00405D40
.text:00405D40 var_8           = dword ptr -8
.text:00405D40 var_4           = dword ptr -4
.text:00405D40 arg_0           = dword ptr  4
.text:00405D40 arg_4           = dword ptr  8
.text:00405D40 arg_8           = dword ptr  0Ch
.text:00405D40
.text:00405D40                 sub     esp, 8
.text:00405D43                 mov     ecx, [esp+8+arg_0]
.text:00405D47                 mov     [esp+8+var_8], ebx
.text:00405D4A                 mov     ebx, [esp+8+arg_8]
.text:00405D4E                 mov     [esp+8+var_4], esi
.text:00405D52                 mov     edx, [esp+8+arg_4]
.text:00405D56                 mov     eax, ebx
.text:00405D58                 and     eax, 7
.text:00405D5B                 cmp     eax, 7          ; switch 8 cases
.text:00405D5E                 ja      short def_405D60 ; jumptable 00405D60 default case
.text:00405D60                 jmp     ds:jpt_405D60[eax*4] ; switch jump
.text:00405D60 ; ---------------------------------------------------------------------------
.text:00405D67                 align 4
.text:00405D68 jpt_405D60      dd offset loc_405DEA    ; DATA XREF: sub_405D40+20↑r
.text:00405D68                 dd offset loc_405DF1    ; jump table for switch statement
.text:00405D68                 dd offset loc_405D88
.text:00405D68                 dd offset loc_405DF9
.text:00405D68                 dd offset loc_405E06
.text:00405D68                 dd offset loc_405E13
.text:00405D68                 dd offset loc_405E20
.text:00405D68                 dd offset loc_405E2D
.text:00405D88 ; ---------------------------------------------------------------------------
.text:00405D88
.text:00405D88 loc_405D88:                             ; CODE XREF: sub_405D40+20↑j
.text:00405D88                                         ; DATA XREF: sub_405D40:jpt_405D60↑o
.text:00405D88                 mov     eax, [edx]      ; jumptable 00405D60 case 2
.text:00405D8A                 sub     ecx, 1Ch
.text:00405D8D                 add     ebx, 6
.text:00405D90                 sub     edx, 18h
.text:00405D93                 lea     esi, [esi+0]
.text:00405D99                 lea     edi, [edi+0]
.text:00405DA0
.text:00405DA0 loc_405DA0:                             ; CODE XREF: sub_405D40+A8↓j
.text:00405DA0                 mov     esi, [edx+1Ch]
.text:00405DA3                 add     edx, 20h ; ' '
.text:00405DA6                 mov     [ecx+1Ch], eax
.text:00405DA9                 add     ecx, 20h ; ' '
.text:00405DAC                 sub     ebx, 8
.text:00405DAF                 jnz     short def_405D60 ; jumptable 00405D60 default case
.text:00405DB1                 mov     [ecx], esi
.text:00405DB3                 mov     ebx, [esp+8+var_8]
.text:00405DB6                 mov     esi, [esp+8+var_4]
.text:00405DBA                 add     esp, 8
.text:00405DBD                 retn
.text:00405DBD ; ---------------------------------------------------------------------------
.text:00405DBE                 align 10h
.text:00405DC0
.text:00405DC0 def_405D60:                             ; CODE XREF: sub_405D40+1E↑j
.text:00405DC0                                         ; sub_405D40+6F↑j ...
.text:00405DC0                 mov     eax, [edx]      ; jumptable 00405D60 default case
.text:00405DC2                 mov     [ecx], esi
.text:00405DC4
.text:00405DC4 loc_405DC4:                             ; CODE XREF: sub_405D40+AF↓j
.text:00405DC4                 mov     esi, [edx+4]
.text:00405DC7                 mov     [ecx+4], eax
.text:00405DCA
.text:00405DCA loc_405DCA:                             ; CODE XREF: sub_405D40+F6↓j
.text:00405DCA                 mov     eax, [edx+8]
.text:00405DCD                 mov     [ecx+8], esi
.text:00405DD0
.text:00405DD0 loc_405DD0:                             ; CODE XREF: sub_405D40+EB↓j
.text:00405DD0                 mov     esi, [edx+0Ch]
.text:00405DD3                 mov     [ecx+0Ch], eax
.text:00405DD6
.text:00405DD6 loc_405DD6:                             ; CODE XREF: sub_405D40+DE↓j
.text:00405DD6                 mov     eax, [edx+10h]
.text:00405DD9                 mov     [ecx+10h], esi
.text:00405DDC
.text:00405DDC loc_405DDC:                             ; CODE XREF: sub_405D40+D1↓j
.text:00405DDC                 mov     esi, [edx+14h]
.text:00405DDF                 mov     [ecx+14h], eax
.text:00405DE2
.text:00405DE2 loc_405DE2:                             ; CODE XREF: sub_405D40+C4↓j
.text:00405DE2                 mov     eax, [edx+18h]
.text:00405DE5                 mov     [ecx+18h], esi
.text:00405DE8                 jmp     short loc_405DA0
.text:00405DEA ; ---------------------------------------------------------------------------
.text:00405DEA
.text:00405DEA loc_405DEA:                             ; CODE XREF: sub_405D40+20↑j
.text:00405DEA                                         ; DATA XREF: sub_405D40:jpt_405D60↑o
.text:00405DEA                 mov     eax, [edx]      ; jumptable 00405D60 case 0
.text:00405DEC                 sub     ecx, 4
.text:00405DEF                 jmp     short loc_405DC4
.text:00405DF1 ; ---------------------------------------------------------------------------
.text:00405DF1
.text:00405DF1 loc_405DF1:                             ; CODE XREF: sub_405D40+20↑j
.text:00405DF1                                         ; DATA XREF: sub_405D40:jpt_405D60↑o
.text:00405DF1                 mov     esi, [edx]      ; jumptable 00405D60 case 1
.text:00405DF3                 dec     ebx
.text:00405DF4                 add     edx, 4
.text:00405DF7                 jmp     short def_405D60 ; jumptable 00405D60 default case
.text:00405DF9 ; ---------------------------------------------------------------------------
.text:00405DF9
.text:00405DF9 loc_405DF9:                             ; CODE XREF: sub_405D40+20↑j
.text:00405DF9                                         ; DATA XREF: sub_405D40:jpt_405D60↑o
.text:00405DF9                 mov     esi, [edx]      ; jumptable 00405D60 case 3
.text:00405DFB                 sub     ecx, 18h
.text:00405DFE                 add     ebx, 5
.text:00405E01                 sub     edx, 14h
.text:00405E04                 jmp     short loc_405DE2
.text:00405E06 ; ---------------------------------------------------------------------------
.text:00405E06
.text:00405E06 loc_405E06:                             ; CODE XREF: sub_405D40+20↑j
.text:00405E06                                         ; DATA XREF: sub_405D40:jpt_405D60↑o
.text:00405E06                 mov     eax, [edx]      ; jumptable 00405D60 case 4
.text:00405E08                 sub     ecx, 14h
.text:00405E0B                 add     ebx, 4
.text:00405E0E                 sub     edx, 10h
.text:00405E11                 jmp     short loc_405DDC
.text:00405E13 ; ---------------------------------------------------------------------------
.text:00405E13
.text:00405E13 loc_405E13:                             ; CODE XREF: sub_405D40+20↑j
.text:00405E13                                         ; DATA XREF: sub_405D40:jpt_405D60↑o
.text:00405E13                 mov     esi, [edx]      ; jumptable 00405D60 case 5
.text:00405E15                 sub     ecx, 10h
.text:00405E18                 add     ebx, 3
.text:00405E1B                 sub     edx, 0Ch
.text:00405E1E                 jmp     short loc_405DD6
.text:00405E20 ; ---------------------------------------------------------------------------
.text:00405E20
.text:00405E20 loc_405E20:                             ; CODE XREF: sub_405D40+20↑j
.text:00405E20                                         ; DATA XREF: sub_405D40:jpt_405D60↑o
.text:00405E20                 mov     eax, [edx]      ; jumptable 00405D60 case 6
.text:00405E22                 sub     ecx, 0Ch
.text:00405E25                 add     ebx, 2
.text:00405E28                 sub     edx, 8
.text:00405E2B                 jmp     short loc_405DD0
.text:00405E2D ; ---------------------------------------------------------------------------
.text:00405E2D
.text:00405E2D loc_405E2D:                             ; CODE XREF: sub_405D40+20↑j
.text:00405E2D                                         ; DATA XREF: sub_405D40:jpt_405D60↑o
.text:00405E2D                 mov     esi, [edx]      ; jumptable 00405D60 case 7
.text:00405E2F                 sub     ecx, 8
.text:00405E32                 inc     ebx
.text:00405E33                 sub     edx, 4
.text:00405E36                 jmp     short loc_405DCA
.text:00405E36 sub_405D40      endp
.text:00405E36
.text:00405E36 ; ---------------------------------------------------------------------------
.text:00405E38                 align 10h
.text:00405E40
.text:00405E40 ; =============== S U B R O U T I N E =======================================
.text:00405E40
.text:00405E40
.text:00405E40 sub_405E40      proc near               ; CODE XREF: sub_405850+93↑p
.text:00405E40
.text:00405E40 var_1C          = dword ptr -1Ch
.text:00405E40 var_18          = dword ptr -18h
.text:00405E40 var_14          = dword ptr -14h
.text:00405E40 arg_0           = dword ptr  4
.text:00405E40 arg_4           = dword ptr  8
.text:00405E40 arg_8           = dword ptr  0Ch
.text:00405E40
.text:00405E40                 push    ebp
.text:00405E41                 push    edi
.text:00405E42                 push    esi
.text:00405E43                 push    ebx
.text:00405E44                 sub     esp, 0Ch
.text:00405E47                 mov     edx, [esp+1Ch+arg_4]
.text:00405E4B                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:00405E53                 mov     eax, [esp+1Ch+arg_8]
.text:00405E57                 mov     esi, [esp+1Ch+arg_0]
.text:00405E5B                 mov     ecx, edx
.text:00405E5D                 and     ecx, 3
.text:00405E60                 and     eax, 3
.text:00405E63                 shl     ecx, 3
.text:00405E66                 and     edx, 0FFFFFFFCh
.text:00405E69                 sub     [esp+1Ch+var_14], ecx
.text:00405E6D                 cmp     eax, 1
.text:00405E70                 mov     [esp+1Ch+var_18], ecx
.text:00405E74                 jz      loc_405F60
.text:00405E7A                 cmp     eax, 1
.text:00405E7D                 jb      loc_405F50
.text:00405E83                 cmp     eax, 2
.text:00405E86                 jz      loc_405F34
.text:00405E8C                 cmp     eax, 3
.text:00405E8F                 jz      loc_405F23
.text:00405E95
.text:00405E95 loc_405E95:                             ; CODE XREF: sub_405E40+C7↓j
.text:00405E95                                         ; sub_405E40+12C↓j
.text:00405E95                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00405E9A                 mov     eax, edi
.text:00405E9C                 mov     ebx, [edx]
.text:00405E9E                 shr     ebp, cl
.text:00405EA0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00405EA5                 shl     eax, cl
.text:00405EA7                 or      ebp, eax
.text:00405EA9                 mov     [esi], ebp
.text:00405EAB
.text:00405EAB loc_405EAB:                             ; CODE XREF: sub_405E40+11B↓j
.text:00405EAB                 mov     ecx, [edx+4]
.text:00405EAE                 mov     ebp, ebx
.text:00405EB0                 mov     [esp+1Ch+var_1C], ecx
.text:00405EB3                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00405EB8                 shr     edi, cl
.text:00405EBA                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00405EBF                 shl     ebp, cl
.text:00405EC1                 or      edi, ebp
.text:00405EC3                 mov     [esi+4], edi
.text:00405EC6
.text:00405EC6 loc_405EC6:                             ; CODE XREF: sub_405E40+F2↓j
.text:00405EC6                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00405ECB                 mov     edi, [esp+1Ch+var_1C]
.text:00405ECE                 mov     ebp, [edx+8]
.text:00405ED1                 shr     ebx, cl
.text:00405ED3                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00405ED8                 shl     edi, cl
.text:00405EDA                 or      ebx, edi
.text:00405EDC                 mov     [esi+8], ebx
.text:00405EDF
.text:00405EDF loc_405EDF:                             ; CODE XREF: sub_405E40+107↓j
.text:00405EDF                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00405EE4                 mov     ebx, ebp
.text:00405EE6                 mov     edi, [edx+0Ch]
.text:00405EE9                 add     edx, 10h
.text:00405EEC                 shr     [esp+1Ch+var_1C], cl
.text:00405EEF                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00405EF4                 shl     ebx, cl
.text:00405EF6                 or      [esp+1Ch+var_1C], ebx
.text:00405EF9                 mov     ebx, [esp+1Ch+var_1C]
.text:00405EFC                 mov     [esi+0Ch], ebx
.text:00405EFF                 add     esi, 10h
.text:00405F02                 sub     [esp+1Ch+arg_8], 4
.text:00405F07                 jnz     short loc_405E95
.text:00405F09                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00405F0E                 shr     ebp, cl
.text:00405F10                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00405F15                 shl     edi, cl
.text:00405F17                 or      ebp, edi
.text:00405F19                 mov     [esi], ebp
.text:00405F1B                 add     esp, 0Ch
.text:00405F1E                 pop     ebx
.text:00405F1F                 pop     esi
.text:00405F20                 pop     edi
.text:00405F21                 pop     ebp
.text:00405F22                 retn
.text:00405F23 ; ---------------------------------------------------------------------------
.text:00405F23
.text:00405F23 loc_405F23:                             ; CODE XREF: sub_405E40+4F↑j
.text:00405F23                 inc     [esp+1Ch+arg_8]
.text:00405F27                 sub     esi, 8
.text:00405F2A                 mov     eax, [edx+4]
.text:00405F2D                 mov     ebx, [edx]
.text:00405F2F                 mov     [esp+1Ch+var_1C], eax
.text:00405F32                 jmp     short loc_405EC6
.text:00405F34 ; ---------------------------------------------------------------------------
.text:00405F34
.text:00405F34 loc_405F34:                             ; CODE XREF: sub_405E40+46↑j
.text:00405F34                 add     [esp+1Ch+arg_8], 2
.text:00405F39                 sub     esi, 0Ch
.text:00405F3C                 mov     ecx, [edx]
.text:00405F3E                 mov     ebp, [edx+4]
.text:00405F41                 sub     edx, 4
.text:00405F44                 mov     [esp+1Ch+var_1C], ecx
.text:00405F47                 jmp     short loc_405EDF
.text:00405F47 ; ---------------------------------------------------------------------------
.text:00405F49                 align 10h
.text:00405F50
.text:00405F50 loc_405F50:                             ; CODE XREF: sub_405E40+3D↑j
.text:00405F50                 mov     edi, [edx]
.text:00405F52                 sub     esi, 4
.text:00405F55                 mov     ebx, [edx+4]
.text:00405F58                 add     edx, 4
.text:00405F5B                 jmp     loc_405EAB
.text:00405F60 ; ---------------------------------------------------------------------------
.text:00405F60
.text:00405F60 loc_405F60:                             ; CODE XREF: sub_405E40+34↑j
.text:00405F60                 dec     [esp+1Ch+arg_8]
.text:00405F64                 mov     ebp, [edx]
.text:00405F66                 mov     edi, [edx+4]
.text:00405F69                 add     edx, 8
.text:00405F6C                 jmp     loc_405E95
.text:00405F6C sub_405E40      endp
.text:00405F6C
.text:00405F71 ; ---------------------------------------------------------------------------
.text:00405F71                 jmp     short loc_405F80
.text:00405F71 ; ---------------------------------------------------------------------------
.text:00405F73                 align 10h
.text:00405F80
.text:00405F80 loc_405F80:                             ; CODE XREF: .text:00405F71↑j
.text:00405F80                 sub     esp, 8
.text:00405F83                 mov     ecx, [esp+0Ch]
.text:00405F87                 mov     [esp+4], esi
.text:00405F8B                 mov     esi, [esp+14h]
.text:00405F8F                 mov     [esp], ebx
.text:00405F92                 mov     edx, [esp+10h]
.text:00405F96                 mov     eax, esi
.text:00405F98                 and     eax, 7
.text:00405F9B                 cmp     eax, 7          ; switch 8 cases
.text:00405F9E                 ja      short def_405FA0 ; jumptable 00405FA0 default case
.text:00405FA0                 jmp     ds:jpt_405FA0[eax*4] ; switch jump
.text:00405FA0 ; ---------------------------------------------------------------------------
.text:00405FA7                 align 4
.text:00405FA8 jpt_405FA0      dd offset loc_40602C    ; DATA XREF: .text:00405FA0↑r
.text:00405FA8                 dd offset loc_406037    ; jump table for switch statement
.text:00405FA8                 dd offset loc_405FC8
.text:00405FA8                 dd offset loc_406043
.text:00405FA8                 dd offset loc_406051
.text:00405FA8                 dd offset loc_40605F
.text:00405FA8                 dd offset loc_40606D
.text:00405FA8                 dd offset loc_40607B
.text:00405FC8 ; ---------------------------------------------------------------------------
.text:00405FC8
.text:00405FC8 loc_405FC8:                             ; CODE XREF: .text:00405FA0↑j
.text:00405FC8                                         ; DATA XREF: .text:jpt_405FA0↑o
.text:00405FC8                 sub     edx, 8          ; jumptable 00405FA0 case 2
.text:00405FCB                 sub     ecx, 4
.text:00405FCE                 mov     eax, [edx+4]
.text:00405FD1                 add     esi, 6
.text:00405FD4                 lea     esi, [esi+0]
.text:00405FDA                 lea     edi, [edi+0]
.text:00405FE0
.text:00405FE0 loc_405FE0:                             ; CODE XREF: .text:0040602A↓j
.text:00405FE0                 mov     ebx, [edx]
.text:00405FE2                 sub     edx, 20h ; ' '
.text:00405FE5                 mov     [ecx], eax
.text:00405FE7                 sub     ecx, 20h ; ' '
.text:00405FEA                 sub     esi, 8
.text:00405FED                 jnz     short def_405FA0 ; jumptable 00405FA0 default case
.text:00405FEF                 mov     [ecx+1Ch], ebx
.text:00405FF2                 mov     ebx, [esp]
.text:00405FF5                 mov     esi, [esp+4]
.text:00405FF9                 add     esp, 8
.text:00405FFC                 retn
.text:00405FFC ; ---------------------------------------------------------------------------
.text:00405FFD                 align 10h
.text:00406000
.text:00406000 def_405FA0:                             ; CODE XREF: .text:00405F9E↑j
.text:00406000                                         ; .text:00405FED↑j ...
.text:00406000                 mov     eax, [edx+1Ch]  ; jumptable 00405FA0 default case
.text:00406003                 mov     [ecx+1Ch], ebx
.text:00406006
.text:00406006 loc_406006:                             ; CODE XREF: .text:00406035↓j
.text:00406006                 mov     ebx, [edx+18h]
.text:00406009                 mov     [ecx+18h], eax
.text:0040600C
.text:0040600C loc_40600C:                             ; CODE XREF: .text:00406085↓j
.text:0040600C                 mov     eax, [edx+14h]
.text:0040600F                 mov     [ecx+14h], ebx
.text:00406012
.text:00406012 loc_406012:                             ; CODE XREF: .text:00406079↓j
.text:00406012                 mov     ebx, [edx+10h]
.text:00406015                 mov     [ecx+10h], eax
.text:00406018
.text:00406018 loc_406018:                             ; CODE XREF: .text:0040606B↓j
.text:00406018                 mov     eax, [edx+0Ch]
.text:0040601B                 mov     [ecx+0Ch], ebx
.text:0040601E
.text:0040601E loc_40601E:                             ; CODE XREF: .text:0040605D↓j
.text:0040601E                 mov     ebx, [edx+8]
.text:00406021                 mov     [ecx+8], eax
.text:00406024
.text:00406024 loc_406024:                             ; CODE XREF: .text:0040604F↓j
.text:00406024                 mov     eax, [edx+4]
.text:00406027                 mov     [ecx+4], ebx
.text:0040602A                 jmp     short loc_405FE0
.text:0040602C ; ---------------------------------------------------------------------------
.text:0040602C
.text:0040602C loc_40602C:                             ; CODE XREF: .text:00405FA0↑j
.text:0040602C                                         ; DATA XREF: .text:jpt_405FA0↑o
.text:0040602C                 sub     edx, 20h ; ' '  ; jumptable 00405FA0 case 0
.text:0040602F                 sub     ecx, 1Ch
.text:00406032                 mov     eax, [edx+1Ch]
.text:00406035                 jmp     short loc_406006
.text:00406037 ; ---------------------------------------------------------------------------
.text:00406037
.text:00406037 loc_406037:                             ; CODE XREF: .text:00405FA0↑j
.text:00406037                                         ; DATA XREF: .text:jpt_405FA0↑o
.text:00406037                 sub     edx, 24h ; '$'  ; jumptable 00405FA0 case 1
.text:0040603A                 sub     ecx, 20h ; ' '
.text:0040603D                 mov     ebx, [edx+20h]
.text:00406040                 dec     esi
.text:00406041                 jmp     short def_405FA0 ; jumptable 00405FA0 default case
.text:00406043 ; ---------------------------------------------------------------------------
.text:00406043
.text:00406043 loc_406043:                             ; CODE XREF: .text:00405FA0↑j
.text:00406043                                         ; DATA XREF: .text:jpt_405FA0↑o
.text:00406043                 sub     edx, 0Ch        ; jumptable 00405FA0 case 3
.text:00406046                 sub     ecx, 8
.text:00406049                 mov     ebx, [edx+8]
.text:0040604C                 add     esi, 5
.text:0040604F                 jmp     short loc_406024
.text:00406051 ; ---------------------------------------------------------------------------
.text:00406051
.text:00406051 loc_406051:                             ; CODE XREF: .text:00405FA0↑j
.text:00406051                                         ; DATA XREF: .text:jpt_405FA0↑o
.text:00406051                 sub     edx, 10h        ; jumptable 00405FA0 case 4
.text:00406054                 sub     ecx, 0Ch
.text:00406057                 mov     eax, [edx+0Ch]
.text:0040605A                 add     esi, 4
.text:0040605D                 jmp     short loc_40601E
.text:0040605F ; ---------------------------------------------------------------------------
.text:0040605F
.text:0040605F loc_40605F:                             ; CODE XREF: .text:00405FA0↑j
.text:0040605F                                         ; DATA XREF: .text:jpt_405FA0↑o
.text:0040605F                 sub     edx, 14h        ; jumptable 00405FA0 case 5
.text:00406062                 sub     ecx, 10h
.text:00406065                 mov     ebx, [edx+10h]
.text:00406068                 add     esi, 3
.text:0040606B                 jmp     short loc_406018
.text:0040606D ; ---------------------------------------------------------------------------
.text:0040606D
.text:0040606D loc_40606D:                             ; CODE XREF: .text:00405FA0↑j
.text:0040606D                                         ; DATA XREF: .text:jpt_405FA0↑o
.text:0040606D                 sub     edx, 18h        ; jumptable 00405FA0 case 6
.text:00406070                 sub     ecx, 14h
.text:00406073                 mov     eax, [edx+14h]
.text:00406076                 add     esi, 2
.text:00406079                 jmp     short loc_406012
.text:0040607B ; ---------------------------------------------------------------------------
.text:0040607B
.text:0040607B loc_40607B:                             ; CODE XREF: .text:00405FA0↑j
.text:0040607B                                         ; DATA XREF: .text:jpt_405FA0↑o
.text:0040607B                 sub     edx, 1Ch        ; jumptable 00405FA0 case 7
.text:0040607E                 sub     ecx, 18h
.text:00406081                 mov     ebx, [edx+18h]
.text:00406084                 inc     esi
.text:00406085                 jmp     short loc_40600C
.text:00406085 ; ---------------------------------------------------------------------------
.text:00406087                 align 10h
.text:00406090                 push    ebp
.text:00406091                 push    edi
.text:00406092                 push    esi
.text:00406093                 push    ebx
.text:00406094                 sub     esp, 8
.text:00406097                 mov     edx, [esp+20h]
.text:0040609B                 mov     dword ptr [esp+4], 20h ; ' '
.text:004060A3                 mov     eax, [esp+24h]
.text:004060A7                 mov     ecx, edx
.text:004060A9                 and     ecx, 3
.text:004060AC                 and     eax, 3
.text:004060AF                 shl     ecx, 3
.text:004060B2                 sub     [esp+4], ecx
.text:004060B6                 and     edx, 0FFFFFFFCh
.text:004060B9                 add     edx, 4
.text:004060BC                 mov     [esp], ecx
.text:004060BF                 cmp     eax, 1
.text:004060C2                 jz      loc_4061B8
.text:004060C8                 cmp     eax, 1
.text:004060CB                 jb      loc_4061A5
.text:004060D1                 cmp     eax, 2
.text:004060D4                 jz      loc_406190
.text:004060DA                 cmp     eax, 3
.text:004060DD                 jz      loc_40617C
.text:004060E3
.text:004060E3 loc_4060E3:                             ; CODE XREF: .text:0040615C↓j
.text:004060E3                                         ; .text:004061CA↓j
.text:004060E3                 movzx   ecx, byte ptr [esp]
.text:004060E7                 mov     eax, edi
.text:004060E9                 mov     ebx, [esp+1Ch]
.text:004060ED                 mov     esi, [edx+0Ch]
.text:004060F0                 shr     eax, cl
.text:004060F2                 movzx   ecx, byte ptr [esp+4]
.text:004060F7                 shl     ebp, cl
.text:004060F9                 or      eax, ebp
.text:004060FB                 mov     [ebx+0Ch], eax
.text:004060FE
.text:004060FE loc_4060FE:                             ; CODE XREF: .text:004061B3↓j
.text:004060FE                 movzx   ecx, byte ptr [esp]
.text:00406102                 mov     ebp, esi
.text:00406104                 mov     ebx, [edx+8]
.text:00406107                 shr     ebp, cl
.text:00406109                 movzx   ecx, byte ptr [esp+4]
.text:0040610E                 shl     edi, cl
.text:00406110                 or      ebp, edi
.text:00406112                 mov     edi, [esp+1Ch]
.text:00406116                 mov     [edi+8], ebp
.text:00406119
.text:00406119 loc_406119:                             ; CODE XREF: .text:0040618E↓j
.text:00406119                 movzx   ecx, byte ptr [esp]
.text:0040611D                 mov     edi, ebx
.text:0040611F                 mov     ebp, [edx+4]
.text:00406122                 shr     edi, cl
.text:00406124                 movzx   ecx, byte ptr [esp+4]
.text:00406129                 shl     esi, cl
.text:0040612B                 or      edi, esi
.text:0040612D                 mov     esi, [esp+1Ch]
.text:00406131                 mov     [esi+4], edi
.text:00406134
.text:00406134 loc_406134:                             ; CODE XREF: .text:004061A3↓j
.text:00406134                 movzx   ecx, byte ptr [esp]
.text:00406138                 mov     esi, ebp
.text:0040613A                 mov     edi, [edx]
.text:0040613C                 sub     edx, 10h
.text:0040613F                 shr     esi, cl
.text:00406141                 movzx   ecx, byte ptr [esp+4]
.text:00406146                 shl     ebx, cl
.text:00406148                 or      esi, ebx
.text:0040614A                 mov     ebx, [esp+1Ch]
.text:0040614E                 mov     [ebx], esi
.text:00406150                 sub     ebx, 10h
.text:00406153                 sub     dword ptr [esp+24h], 4
.text:00406158                 mov     [esp+1Ch], ebx
.text:0040615C                 jnz     short loc_4060E3
.text:0040615E                 movzx   ecx, byte ptr [esp]
.text:00406162                 mov     edx, [esp+1Ch]
.text:00406166                 shr     edi, cl
.text:00406168                 movzx   ecx, byte ptr [esp+4]
.text:0040616D                 shl     ebp, cl
.text:0040616F                 or      edi, ebp
.text:00406171                 mov     [edx+0Ch], edi
.text:00406174                 add     esp, 8
.text:00406177                 pop     ebx
.text:00406178                 pop     esi
.text:00406179                 pop     edi
.text:0040617A                 pop     ebp
.text:0040617B                 retn
.text:0040617C ; ---------------------------------------------------------------------------
.text:0040617C
.text:0040617C loc_40617C:                             ; CODE XREF: .text:004060DD↑j
.text:0040617C                 sub     dword ptr [esp+1Ch], 8
.text:00406181                 sub     edx, 10h
.text:00406184                 inc     dword ptr [esp+24h]
.text:00406188                 mov     esi, [edx+0Ch]
.text:0040618B                 mov     ebx, [edx+8]
.text:0040618E                 jmp     short loc_406119
.text:00406190 ; ---------------------------------------------------------------------------
.text:00406190
.text:00406190 loc_406190:                             ; CODE XREF: .text:004060D4↑j
.text:00406190                 sub     dword ptr [esp+1Ch], 4
.text:00406195                 sub     edx, 0Ch
.text:00406198                 add     dword ptr [esp+24h], 2
.text:0040619D                 mov     ebx, [edx+8]
.text:004061A0                 mov     ebp, [edx+4]
.text:004061A3                 jmp     short loc_406134
.text:004061A5 ; ---------------------------------------------------------------------------
.text:004061A5
.text:004061A5 loc_4061A5:                             ; CODE XREF: .text:004060CB↑j
.text:004061A5                 sub     dword ptr [esp+1Ch], 0Ch
.text:004061AA                 sub     edx, 14h
.text:004061AD                 mov     edi, [edx+10h]
.text:004061B0                 mov     esi, [edx+0Ch]
.text:004061B3                 jmp     loc_4060FE
.text:004061B8 ; ---------------------------------------------------------------------------
.text:004061B8
.text:004061B8 loc_4061B8:                             ; CODE XREF: .text:004060C2↑j
.text:004061B8                 sub     dword ptr [esp+1Ch], 10h
.text:004061BD                 sub     edx, 18h
.text:004061C0                 dec     dword ptr [esp+24h]
.text:004061C4                 mov     ebp, [edx+14h]
.text:004061C7                 mov     edi, [edx+10h]
.text:004061CA                 jmp     loc_4060E3
.text:004061CA ; ---------------------------------------------------------------------------
.text:004061CF                 align 10h
.text:004061D0
.text:004061D0 ; =============== S U B R O U T I N E =======================================
.text:004061D0
.text:004061D0
.text:004061D0 sub_4061D0      proc near               ; CODE XREF: sub_405960+3↑p
.text:004061D0                                         ; sub_405980+B↑p ...
.text:004061D0
.text:004061D0 FileHandle      = dword ptr -1Ch
.text:004061D0 Offset          = qword ptr -18h
.text:004061D0 Origin          = dword ptr -10h
.text:004061D0 var_4           = dword ptr -4
.text:004061D0
.text:004061D0                 sub     esp, 1Ch
.text:004061D3                 mov     eax, FileHandle
.text:004061D8                 mov     [esp+1Ch+var_4], ebx
.text:004061DC                 test    eax, eax
.text:004061DE                 js      short loc_406230
.text:004061E0
.text:004061E0 loc_4061E0:                             ; CODE XREF: sub_4061D0+C5↓j
.text:004061E0                 mov     [esp+1Ch+Origin], 0 ; Origin
.text:004061E8                 mov     ebx, 0FFFFFFFFh
.text:004061ED                 mov     dword ptr [esp+1Ch+Offset], 0 ; Offset
.text:004061F5                 mov     dword ptr [esp+1Ch+Offset+4], 0
.text:004061FD                 mov     [esp+1Ch+FileHandle], eax ; FileHandle
.text:00406200                 call    _lseeki64
.text:00406205                 mov     word ptr ds:dword_409210, bx
.text:0040620C                 xor     edx, edx
.text:0040620E                 xor     eax, eax
.text:00406210                 mov     ds:dword_409200, edx
.text:00406216                 mov     edx, 1
.text:0040621B                 mov     ds:dword_409204, eax
.text:00406220
.text:00406220 loc_406220:                             ; CODE XREF: sub_4061D0+DA↓j
.text:00406220                                         ; sub_4061D0+F9↓j
.text:00406220                 mov     ebx, [esp+1Ch+var_4]
.text:00406224                 mov     eax, edx
.text:00406226                 add     esp, 1Ch
.text:00406229                 retn
.text:00406229 ; ---------------------------------------------------------------------------
.text:0040622A                 align 10h
.text:00406230
.text:00406230 loc_406230:                             ; CODE XREF: sub_4061D0+E↑j
.text:00406230                 mov     dword ptr [esp+1Ch+Offset], 2 ; OpenFlag
.text:00406238                 mov     ebx, FileName
.text:0040623E                 mov     [esp+1Ch+FileHandle], ebx ; FileName
.text:00406241                 call    _open
.text:00406246                 mov     FileHandle, eax
.text:0040624B                 inc     eax
.text:0040624C                 jz      short loc_4062AF
.text:0040624E
.text:0040624E loc_40624E:                             ; CODE XREF: sub_4061D0+F7↓j
.text:0040624E                 mov     dword ptr [esp+1Ch+Offset+4], 0
.text:00406256                 mov     edx, FileHandle
.text:0040625C                 mov     dword ptr [esp+1Ch+Offset], 1
.text:00406264                 mov     [esp+1Ch+FileHandle], edx
.text:00406267                 call    sub_406F20
.text:0040626C                 test    eax, eax
.text:0040626E                 js      short loc_40628D
.text:00406270                 mov     dword ptr [esp+1Ch+Offset], 2
.text:00406278                 mov     edx, FileHandle
.text:0040627E                 or      eax, 1
.text:00406281                 mov     dword ptr [esp+1Ch+Offset+4], eax
.text:00406285                 mov     [esp+1Ch+FileHandle], edx
.text:00406288                 call    sub_406F20
.text:0040628D
.text:0040628D loc_40628D:                             ; CODE XREF: sub_4061D0+9E↑j
.text:0040628D                 inc     eax
.text:0040628E                 jz      short loc_40629A
.text:00406290                 mov     eax, FileHandle
.text:00406295                 jmp     loc_4061E0
.text:0040629A ; ---------------------------------------------------------------------------
.text:0040629A
.text:0040629A loc_40629A:                             ; CODE XREF: sub_4061D0+BE↑j
.text:0040629A                 mov     ecx, FileHandle
.text:004062A0                 mov     [esp+1Ch+FileHandle], ecx ; FileHandle
.text:004062A3                 call    _close
.text:004062A8                 xor     edx, edx
.text:004062AA                 jmp     loc_406220
.text:004062AF ; ---------------------------------------------------------------------------
.text:004062AF
.text:004062AF loc_4062AF:                             ; CODE XREF: sub_4061D0+7C↑j
.text:004062AF                 mov     dword ptr [esp+1Ch+Offset], 0 ; OpenFlag
.text:004062B7                 mov     [esp+1Ch+FileHandle], ebx ; FileName
.text:004062BA                 call    _open
.text:004062BF                 mov     FileHandle, eax
.text:004062C4                 xor     edx, edx
.text:004062C6                 inc     eax
.text:004062C7                 jnz     short loc_40624E
.text:004062C9                 jmp     loc_406220
.text:004062C9 sub_4061D0      endp
.text:004062C9
.text:004062C9 ; ---------------------------------------------------------------------------
.text:004062CE                 align 10h
.text:004062D0 aLibc05SrcLogin db '../../libc-0.5-src/login/utmp_file.c',0
.text:004062D0                                         ; DATA XREF: sub_406310+136↓o
.text:004062D0                                         ; sub_406460+196↓o ...
.text:004062F5 aFileFd0        db 'file_fd >= 0',0     ; DATA XREF: sub_406310+13E↓o
.text:004062F5                                         ; sub_406460+19E↓o ...
.text:00406302                 align 10h
.text:00406310
.text:00406310 ; =============== S U B R O U T I N E =======================================
.text:00406310
.text:00406310
.text:00406310 sub_406310      proc near               ; CODE XREF: sub_405980+2A↑p
.text:00406310                                         ; DATA XREF: .data:off_408088↓o
.text:00406310
.text:00406310 FileHandle      = dword ptr -5Ch
.text:00406310 DstBuf          = dword ptr -58h
.text:00406310 MaxCharCount    = dword ptr -54h
.text:00406310 var_2C          = word ptr -2Ch
.text:00406310 var_2A          = word ptr -2Ah
.text:00406310 arg_0           = dword ptr  4
.text:00406310 arg_4           = dword ptr  8
.text:00406310
.text:00406310                 push    ebp
.text:00406311                 push    edi
.text:00406312                 push    esi
.text:00406313                 push    ebx
.text:00406314                 sub     esp, 4Ch
.text:00406317                 mov     esi, FileHandle
.text:0040631D                 mov     ebx, [esp+5Ch+arg_0]
.text:00406321                 mov     ebp, [esp+5Ch+arg_4]
.text:00406325                 test    esi, esi
.text:00406327                 js      loc_40643E
.text:0040632D                 mov     ecx, ds:dword_409200
.text:00406333                 mov     eax, ds:dword_409204
.text:00406338                 and     ecx, eax
.text:0040633A                 inc     ecx
.text:0040633B                 jz      loc_406430
.text:00406341                 cld
.text:00406342                 xor     eax, eax
.text:00406344                 lea     edi, [esp+5Ch+var_2C]
.text:00406348                 mov     ecx, 4
.text:0040634D                 rep stosd
.text:0040634F                 mov     [esp+5Ch+var_2C], 1
.text:00406356                 lea     edi, [esp+5Ch+var_2C]
.text:0040635A                 mov     [esp+5Ch+var_2A], 0
.text:00406361                 mov     [esp+5Ch+MaxCharCount], edi
.text:00406365                 mov     [esp+5Ch+DstBuf], 9
.text:0040636D                 mov     [esp+5Ch+FileHandle], esi
.text:00406370                 call    sub_406F20
.text:00406375                 test    eax, eax
.text:00406377                 js      loc_406430
.text:0040637D                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:00406385                 mov     ecx, FileHandle
.text:0040638B                 mov     [esp+5Ch+DstBuf], offset dword_409210 ; DstBuf
.text:00406393                 mov     [esp+5Ch+FileHandle], ecx ; FileHandle
.text:00406396                 call    _read
.text:0040639B                 mov     [esp+5Ch+var_2C], 3
.text:004063A2                 mov     edx, FileHandle
.text:004063A8                 mov     esi, eax
.text:004063AA                 mov     [esp+5Ch+MaxCharCount], edi
.text:004063AE                 mov     [esp+5Ch+DstBuf], 9
.text:004063B6                 mov     [esp+5Ch+FileHandle], edx
.text:004063B9                 call    sub_406F20
.text:004063BE                 cmp     esi, 180h
.text:004063C4                 jnz     short loc_406412
.text:004063C6                 add     ds:dword_409200, 180h
.text:004063D0                 mov     edi, ebx
.text:004063D2                 mov     esi, offset dword_409210
.text:004063D7                 mov     eax, 180h
.text:004063DC                 adc     ds:dword_409204, 0
.text:004063E3                 test    bl, 4
.text:004063E6                 jz      short loc_4063FD
.text:004063E8                 mov     edi, ds:dword_409210
.text:004063EE                 mov     esi, offset unk_409214
.text:004063F3                 mov     eax, 17Ch
.text:004063F8                 mov     [ebx], edi
.text:004063FA                 lea     edi, [ebx+4]
.text:004063FD
.text:004063FD loc_4063FD:                             ; CODE XREF: sub_406310+D6↑j
.text:004063FD                 cld
.text:004063FE                 mov     ecx, eax
.text:00406400                 shr     ecx, 2
.text:00406403                 rep movsd
.text:00406405                 mov     [ebp+0], ebx
.text:00406408                 xor     eax, eax
.text:0040640A
.text:0040640A loc_40640A:                             ; CODE XREF: sub_406310+12C↓j
.text:0040640A                 add     esp, 4Ch
.text:0040640D                 pop     ebx
.text:0040640E                 pop     esi
.text:0040640F                 pop     edi
.text:00406410                 pop     ebp
.text:00406411                 retn
.text:00406412 ; ---------------------------------------------------------------------------
.text:00406412
.text:00406412 loc_406412:                             ; CODE XREF: sub_406310+B4↑j
.text:00406412                 test    esi, esi
.text:00406414                 jz      short loc_406430
.text:00406416                 mov     ebx, 0FFFFFFFFh
.text:0040641B                 mov     esi, 0FFFFFFFFh
.text:00406420                 mov     ds:dword_409200, ebx
.text:00406426                 mov     ds:dword_409204, esi
.text:0040642C                 lea     esi, [esi+0]
.text:00406430
.text:00406430 loc_406430:                             ; CODE XREF: sub_406310+2B↑j
.text:00406430                                         ; sub_406310+67↑j ...
.text:00406430                 mov     dword ptr [ebp+0], 0
.text:00406437                 mov     eax, 0FFFFFFFFh
.text:0040643C                 jmp     short loc_40640A
.text:0040643E ; ---------------------------------------------------------------------------
.text:0040643E
.text:0040643E loc_40643E:                             ; CODE XREF: sub_406310+17↑j
.text:0040643E                 mov     [esp+5Ch+MaxCharCount], 0A3h ; '£'
.text:00406446                 mov     [esp+5Ch+DstBuf], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:0040644E                 mov     [esp+5Ch+FileHandle], offset aFileFd0 ; "file_fd >= 0"
.text:00406455                 call    _assert
.text:00406455 sub_406310      endp
.text:00406455
.text:00406455 ; ---------------------------------------------------------------------------
.text:0040645A                 align 10h
.text:00406460
.text:00406460 ; =============== S U B R O U T I N E =======================================
.text:00406460
.text:00406460
.text:00406460 sub_406460      proc near               ; CODE XREF: sub_405A20+33↑p
.text:00406460                                         ; DATA XREF: .data:off_408090↓o
.text:00406460
.text:00406460 FileHandle      = dword ptr -5Ch
.text:00406460 DstBuf          = dword ptr -58h
.text:00406460 MaxCharCount    = dword ptr -54h
.text:00406460 var_2C          = word ptr -2Ch
.text:00406460 var_2A          = word ptr -2Ah
.text:00406460 arg_0           = dword ptr  4
.text:00406460 arg_4           = dword ptr  8
.text:00406460 arg_8           = dword ptr  0Ch
.text:00406460
.text:00406460                 push    ebp
.text:00406461                 push    edi
.text:00406462                 push    esi
.text:00406463                 push    ebx
.text:00406464                 sub     esp, 4Ch
.text:00406467                 mov     ebx, FileHandle
.text:0040646D                 mov     esi, [esp+5Ch+arg_0]
.text:00406471                 mov     ebp, [esp+5Ch+arg_8]
.text:00406475                 test    ebx, ebx
.text:00406477                 js      loc_4065EE
.text:0040647D                 mov     ecx, ds:dword_409200
.text:00406483                 mov     eax, ds:dword_409204
.text:00406488                 and     ecx, eax
.text:0040648A                 inc     ecx
.text:0040648B                 jz      loc_4065E0
.text:00406491                 cld
.text:00406492                 xor     eax, eax
.text:00406494                 lea     edi, [esp+5Ch+var_2C]
.text:00406498                 mov     ecx, 4
.text:0040649D                 lea     edx, [esp+5Ch+var_2C]
.text:004064A1                 rep stosd
.text:004064A3                 mov     [esp+5Ch+var_2C], 1
.text:004064AA                 mov     [esp+5Ch+var_2A], 0
.text:004064B1                 mov     [esp+5Ch+MaxCharCount], edx
.text:004064B5                 mov     [esp+5Ch+DstBuf], 9
.text:004064BD                 mov     [esp+5Ch+FileHandle], ebx
.text:004064C0                 call    sub_406F20
.text:004064C5                 test    eax, eax
.text:004064C7                 js      loc_4065D7
.text:004064CD                 lea     esi, [esi+0]
.text:004064D0
.text:004064D0 loc_4064D0:                             ; CODE XREF: sub_406460+B8↓j
.text:004064D0                                         ; sub_406460+D7↓j
.text:004064D0                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:004064D8                 mov     edi, FileHandle
.text:004064DE                 mov     [esp+5Ch+DstBuf], offset dword_409210 ; DstBuf
.text:004064E6                 mov     [esp+5Ch+FileHandle], edi ; FileHandle
.text:004064E9                 call    _read
.text:004064EE                 cmp     eax, 180h
.text:004064F3                 jnz     loc_4065AD
.text:004064F9                 movzx   edx, word ptr ds:dword_409210
.text:00406500                 add     ds:dword_409200, 180h
.text:0040650A                 adc     ds:dword_409204, 0
.text:00406511                 sub     edx, 6
.text:00406514                 cmp     dx, 1
.text:00406518                 ja      short loc_4064D0
.text:0040651A                 mov     [esp+5Ch+MaxCharCount], 20h ; ' ' ; MaxCount
.text:00406522                 lea     ecx, [esi+8]
.text:00406525                 mov     [esp+5Ch+DstBuf], offset Str2 ; Str2
.text:0040652D                 mov     [esp+5Ch+FileHandle], ecx ; Str1
.text:00406530                 call    strncmp
.text:00406535                 test    eax, eax
.text:00406537                 jnz     short loc_4064D0
.text:00406539                 test    byte ptr [esp+5Ch+arg_4], 4
.text:0040653E                 mov     esi, offset dword_409210
.text:00406543                 mov     edi, [esp+5Ch+arg_4]
.text:00406547                 mov     eax, 180h
.text:0040654C                 jz      short loc_406567
.text:0040654E                 mov     esi, ds:dword_409210
.text:00406554                 mov     eax, 17Ch
.text:00406559                 mov     [edi], esi
.text:0040655B                 mov     edi, [esp+5Ch+arg_4]
.text:0040655F                 mov     esi, offset unk_409214
.text:00406564                 add     edi, 4
.text:00406567
.text:00406567 loc_406567:                             ; CODE XREF: sub_406460+EC↑j
.text:00406567                 cld
.text:00406568                 mov     ecx, eax
.text:0040656A                 shr     ecx, 2
.text:0040656D                 rep movsd
.text:0040656F                 mov     eax, [esp+5Ch+arg_4]
.text:00406573                 mov     [ebp+0], eax
.text:00406576
.text:00406576 loc_406576:                             ; CODE XREF: sub_406460+175↓j
.text:00406576                 mov     [esp+5Ch+var_2C], 3
.text:0040657D                 mov     ebx, FileHandle
.text:00406583                 lea     edi, [esp+5Ch+var_2C]
.text:00406587                 mov     [esp+5Ch+MaxCharCount], edi
.text:0040658B                 mov     [esp+5Ch+DstBuf], 9
.text:00406593                 mov     [esp+5Ch+FileHandle], ebx
.text:00406596                 call    sub_406F20
.text:0040659B
.text:0040659B loc_40659B:                             ; CODE XREF: sub_406460+17E↓j
.text:0040659B                 xor     eax, eax
.text:0040659D                 cmp     dword ptr [ebp+0], 0
.text:004065A1                 setnz   al
.text:004065A4                 dec     eax
.text:004065A5
.text:004065A5 loc_4065A5:                             ; CODE XREF: sub_406460+18C↓j
.text:004065A5                 add     esp, 4Ch
.text:004065A8                 pop     ebx
.text:004065A9                 pop     esi
.text:004065AA                 pop     edi
.text:004065AB                 pop     ebp
.text:004065AC                 retn
.text:004065AD ; ---------------------------------------------------------------------------
.text:004065AD
.text:004065AD loc_4065AD:                             ; CODE XREF: sub_406460+93↑j
.text:004065AD                 call    _errno
.text:004065B2                 mov     dword ptr [eax], 3
.text:004065B8                 mov     ebx, 0FFFFFFFFh
.text:004065BD                 mov     ecx, 0FFFFFFFFh
.text:004065C2                 mov     ds:dword_409200, ebx
.text:004065C8                 mov     ds:dword_409204, ecx
.text:004065CE                 mov     dword ptr [ebp+0], 0
.text:004065D5                 jmp     short loc_406576
.text:004065D7 ; ---------------------------------------------------------------------------
.text:004065D7
.text:004065D7 loc_4065D7:                             ; CODE XREF: sub_406460+67↑j
.text:004065D7                 mov     dword ptr [ebp+0], 0
.text:004065DE                 jmp     short loc_40659B
.text:004065E0 ; ---------------------------------------------------------------------------
.text:004065E0
.text:004065E0 loc_4065E0:                             ; CODE XREF: sub_406460+2B↑j
.text:004065E0                 mov     dword ptr [ebp+0], 0
.text:004065E7                 mov     eax, 0FFFFFFFFh
.text:004065EC                 jmp     short loc_4065A5
.text:004065EE ; ---------------------------------------------------------------------------
.text:004065EE
.text:004065EE loc_4065EE:                             ; CODE XREF: sub_406460+17↑j
.text:004065EE                 mov     [esp+5Ch+MaxCharCount], 129h
.text:004065F6                 mov     [esp+5Ch+DstBuf], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:004065FE                 mov     [esp+5Ch+FileHandle], offset aFileFd0 ; "file_fd >= 0"
.text:00406605                 call    _assert
.text:00406605 sub_406460      endp
.text:00406605
.text:00406605 ; ---------------------------------------------------------------------------
.text:0040660A                 align 10h
.text:00406610
.text:00406610 ; =============== S U B R O U T I N E =======================================
.text:00406610
.text:00406610
.text:00406610 ; int __cdecl sub_406610(void *Buf)
.text:00406610 sub_406610      proc near               ; CODE XREF: sub_405A70+21↑p
.text:00406610                                         ; DATA XREF: .data:off_408094↓o
.text:00406610
.text:00406610 Str1            = dword ptr -1ECh
.text:00406610 Str2            = dword ptr -1E8h
.text:00406610 MaxCount        = dword ptr -1E4h
.text:00406610 Origin          = dword ptr -1E0h
.text:00406610 var_1D0         = dword ptr -1D0h
.text:00406610 var_1AC         = word ptr -1ACh
.text:00406610 var_1AA         = word ptr -1AAh
.text:00406610 var_19C         = byte ptr -19Ch
.text:00406610 Buf             = dword ptr  4
.text:00406610
.text:00406610                 push    ebp
.text:00406611                 push    edi
.text:00406612                 push    esi
.text:00406613                 push    ebx
.text:00406614                 sub     esp, 1DCh
.text:0040661A                 mov     ebx, FileHandle
.text:00406620                 mov     ebp, [esp+1ECh+Buf]
.text:00406627                 test    ebx, ebx
.text:00406629                 js      loc_406920
.text:0040662F                 mov     edx, ds:dword_409204
.text:00406635                 mov     eax, ds:dword_409200
.text:0040663A                 test    edx, edx
.text:0040663C                 js      loc_4068B0
.text:00406642                 test    edx, edx
.text:00406644                 jle     loc_406916
.text:0040664A
.text:0040664A loc_40664A:                             ; CODE XREF: sub_406610+30B↓j
.text:0040664A                 movzx   ecx, word ptr ds:dword_409210
.text:00406651                 mov     edx, [ebp+0]
.text:00406654                 cmp     cx, dx
.text:00406657                 jz      loc_4068F0
.text:0040665D
.text:0040665D loc_40665D:                             ; CODE XREF: sub_406610+2FB↓j
.text:0040665D                 lea     ebx, [ecx-5]
.text:00406660                 cmp     bx, 3
.text:00406664                 ja      loc_4068B0
.text:0040666A                 lea     ecx, [edx-5]
.text:0040666D                 cmp     cx, 3
.text:00406671                 ja      loc_4068B0
.text:00406677                 cmp     ds:byte_409238, 0
.text:0040667E                 jz      short loc_40668A
.text:00406680                 cmp     byte ptr [ebp+28h], 0
.text:00406684                 jnz     loc_4068CF
.text:0040668A
.text:0040668A loc_40668A:                             ; CODE XREF: sub_406610+6E↑j
.text:0040668A                 mov     [esp+1ECh+MaxCount], 20h ; ' ' ; MaxCount
.text:00406692                 lea     esi, [ebp+8]
.text:00406695                 mov     [esp+1ECh+Str2], esi ; Str2
.text:00406699                 mov     [esp+1ECh+Str1], offset Str2 ; Str1
.text:004066A0
.text:004066A0 loc_4066A0:                             ; CODE XREF: sub_406610+2D5↓j
.text:004066A0                 call    strncmp
.text:004066A5                 test    eax, eax
.text:004066A7                 jnz     loc_4068B0
.text:004066AD                 mov     ebx, FileHandle
.text:004066B3                 lea     esi, [esi+0]
.text:004066B9                 lea     edi, [edi+0]
.text:004066C0
.text:004066C0 loc_4066C0:                             ; CODE XREF: sub_406610+2E7↓j
.text:004066C0                                         ; sub_406610+2F1↓j ...
.text:004066C0                 mov     [esp+1ECh+var_1D0], 1
.text:004066C8                 nop
.text:004066C9                 lea     esi, [esi+0]
.text:004066D0
.text:004066D0 loc_4066D0:                             ; CODE XREF: sub_406610+2BA↓j
.text:004066D0                 cld
.text:004066D1                 xor     eax, eax
.text:004066D3                 lea     edi, [esp+1ECh+var_1AC]
.text:004066D7                 mov     ecx, 4
.text:004066DC                 rep stosd
.text:004066DE                 mov     [esp+1ECh+Str1], ebx
.text:004066E1                 lea     edi, [esp+1ECh+var_1AC]
.text:004066E5                 xor     ebx, ebx
.text:004066E7                 mov     [esp+1ECh+var_1AC], 2
.text:004066EE                 mov     [esp+1ECh+var_1AA], 0
.text:004066F5                 mov     [esp+1ECh+MaxCount], edi
.text:004066F9                 mov     [esp+1ECh+Str2], 9
.text:00406701                 call    sub_406F20
.text:00406706                 test    eax, eax
.text:00406708                 js      loc_4067A5
.text:0040670E                 mov     ebx, [esp+1ECh+var_1D0]
.text:00406712                 test    ebx, ebx
.text:00406714                 js      loc_4067F0
.text:0040671A                 mov     [esp+1ECh+Origin], 0 ; Origin
.text:00406722                 mov     ebx, ds:dword_409200
.text:00406728                 mov     esi, ds:dword_409204
.text:0040672E                 mov     edx, FileHandle
.text:00406734                 add     ebx, 0FFFFFE80h
.text:0040673A                 adc     esi, 0FFFFFFFFh
.text:0040673D                 mov     ds:dword_409200, ebx
.text:00406743                 mov     ds:dword_409204, esi
.text:00406749                 mov     [esp+1ECh+Str2], ebx ; Offset
.text:0040674D                 mov     [esp+1ECh+MaxCount], esi
.text:00406751                 mov     [esp+1ECh+Str1], edx ; FileHandle
.text:00406754                 call    _lseeki64
.text:00406759
.text:00406759 loc_406759:                             ; CODE XREF: sub_406610+238↓j
.text:00406759                                         ; sub_406610+290↓j
.text:00406759                 mov     [esp+1ECh+MaxCount], 180h ; MaxCharCount
.text:00406761                 mov     ecx, FileHandle
.text:00406767                 mov     [esp+1ECh+Str2], ebp ; Buf
.text:0040676B                 mov     [esp+1ECh+Str1], ecx ; FileHandle
.text:0040676E                 call    _write
.text:00406773                 cmp     eax, 180h
.text:00406778                 jz      short loc_4067D6
.text:0040677A                 mov     ebp, [esp+1ECh+var_1D0]
.text:0040677E                 test    ebp, ebp
.text:00406780                 js      short loc_4067B2
.text:00406782
.text:00406782 loc_406782:                             ; CODE XREF: sub_406610+1C4↓j
.text:00406782                 xor     ebx, ebx
.text:00406784
.text:00406784 loc_406784:                             ; CODE XREF: sub_406610+1D9↓j
.text:00406784                                         ; sub_406610+296↓j
.text:00406784                 mov     [esp+1ECh+MaxCount], edi
.text:00406788                 mov     edi, FileHandle
.text:0040678E                 mov     [esp+1ECh+var_1AC], 3
.text:00406795                 mov     [esp+1ECh+Str2], 9
.text:0040679D                 mov     [esp+1ECh+Str1], edi
.text:004067A0                 call    sub_406F20
.text:004067A5
.text:004067A5 loc_4067A5:                             ; CODE XREF: sub_406610+F8↑j
.text:004067A5                 add     esp, 1DCh
.text:004067AB                 mov     eax, ebx
.text:004067AD                 pop     ebx
.text:004067AE                 pop     esi
.text:004067AF                 pop     edi
.text:004067B0                 pop     ebp
.text:004067B1                 retn
.text:004067B2 ; ---------------------------------------------------------------------------
.text:004067B2
.text:004067B2 loc_4067B2:                             ; CODE XREF: sub_406610+170↑j
.text:004067B2                 mov     ebx, ds:dword_409200
.text:004067B8                 mov     esi, ds:dword_409204
.text:004067BE                 mov     edx, FileHandle
.text:004067C4                 mov     [esp+1ECh+Str2], ebx
.text:004067C8                 mov     [esp+1ECh+MaxCount], esi
.text:004067CC                 mov     [esp+1ECh+Str1], edx
.text:004067CF                 call    sub_406D50
.text:004067D4                 jmp     short loc_406782
.text:004067D6 ; ---------------------------------------------------------------------------
.text:004067D6
.text:004067D6 loc_4067D6:                             ; CODE XREF: sub_406610+168↑j
.text:004067D6                 add     ds:dword_409200, 180h
.text:004067E0                 mov     ebx, ebp
.text:004067E2                 adc     ds:dword_409204, 0
.text:004067E9                 jmp     short loc_406784
.text:004067E9 ; ---------------------------------------------------------------------------
.text:004067EB                 align 10h
.text:004067F0
.text:004067F0 loc_4067F0:                             ; CODE XREF: sub_406610+104↑j
.text:004067F0                 mov     [esp+1ECh+Origin], 2 ; Origin
.text:004067F8                 mov     ecx, FileHandle
.text:004067FE                 mov     [esp+1ECh+Str2], 0 ; Offset
.text:00406806                 mov     [esp+1ECh+MaxCount], 0
.text:0040680E                 mov     [esp+1ECh+Str1], ecx ; FileHandle
.text:00406811                 call    _lseeki64
.text:00406816                 mov     ds:dword_409200, eax
.text:0040681B                 mov     esi, eax
.text:0040681D                 mov     ebx, eax
.text:0040681F                 mov     [esp+1ECh+MaxCount], 180h
.text:00406827                 sar     esi, 1Fh
.text:0040682A                 mov     ds:dword_409204, esi
.text:00406830                 mov     [esp+1ECh+Origin], 0
.text:00406838                 mov     [esp+1ECh+Str1], eax
.text:0040683B                 mov     [esp+1ECh+Str2], esi
.text:0040683F                 call    sub_407590
.text:00406844                 mov     ecx, edx
.text:00406846                 or      ecx, eax
.text:00406848                 jz      loc_406759
.text:0040684E                 sub     ebx, eax
.text:00406850                 mov     ecx, ebx
.text:00406852                 sbb     esi, edx
.text:00406854                 xor     ebx, ebx
.text:00406856                 mov     ds:dword_409204, esi
.text:0040685C                 mov     [esp+1ECh+MaxCount], esi
.text:00406860                 mov     esi, FileHandle
.text:00406866                 mov     ds:dword_409200, ecx
.text:0040686C                 mov     [esp+1ECh+Str2], ecx
.text:00406870                 mov     [esp+1ECh+Str1], esi
.text:00406873                 call    sub_406D50
.text:00406878                 mov     [esp+1ECh+Origin], 2 ; Origin
.text:00406880                 mov     edx, FileHandle
.text:00406886                 mov     [esp+1ECh+Str2], 0 ; Offset
.text:0040688E                 mov     [esp+1ECh+MaxCount], 0
.text:00406896                 mov     [esp+1ECh+Str1], edx ; FileHandle
.text:00406899                 call    _lseeki64
.text:0040689E                 test    eax, eax
.text:004068A0                 jns     loc_406759
.text:004068A6                 jmp     loc_406784
.text:004068A6 ; ---------------------------------------------------------------------------
.text:004068AB                 align 10h
.text:004068B0
.text:004068B0 loc_4068B0:                             ; CODE XREF: sub_406610+2C↑j
.text:004068B0                                         ; sub_406610+54↑j ...
.text:004068B0                 mov     [esp+1ECh+Str1], ebp ; int
.text:004068B3                 lea     edi, [esp+1ECh+var_19C]
.text:004068B7                 mov     [esp+1ECh+Str2], edi ; void *
.text:004068BB                 call    sub_406BA0
.text:004068C0                 mov     [esp+1ECh+var_1D0], eax
.text:004068C4                 mov     ebx, FileHandle
.text:004068CA                 jmp     loc_4066D0
.text:004068CF ; ---------------------------------------------------------------------------
.text:004068CF
.text:004068CF loc_4068CF:                             ; CODE XREF: sub_406610+74↑j
.text:004068CF                 mov     [esp+1ECh+MaxCount], 4
.text:004068D7                 lea     edx, [ebp+28h]
.text:004068DA                 mov     [esp+1ECh+Str2], edx
.text:004068DE                 mov     [esp+1ECh+Str1], offset byte_409238
.text:004068E5                 jmp     loc_4066A0
.text:004068E5 ; ---------------------------------------------------------------------------
.text:004068EA                 align 10h
.text:004068F0
.text:004068F0 loc_4068F0:                             ; CODE XREF: sub_406610+47↑j
.text:004068F0                 lea     esi, [edx-1]
.text:004068F3                 cmp     si, 1
.text:004068F7                 jbe     loc_4066C0
.text:004068FD                 cmp     dx, 4
.text:00406901                 jz      loc_4066C0
.text:00406907                 cmp     dx, 3
.text:0040690B                 jnz     loc_40665D
.text:00406911                 jmp     loc_4066C0
.text:00406916 ; ---------------------------------------------------------------------------
.text:00406916
.text:00406916 loc_406916:                             ; CODE XREF: sub_406610+34↑j
.text:00406916                 cmp     eax, 0
.text:00406919                 jbe     short loc_4068B0
.text:0040691B                 jmp     loc_40664A
.text:00406920 ; ---------------------------------------------------------------------------
.text:00406920
.text:00406920 loc_406920:                             ; CODE XREF: sub_406610+19↑j
.text:00406920                 mov     [esp+1ECh+MaxCount], 160h
.text:00406928                 mov     [esp+1ECh+Str2], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:00406930                 mov     [esp+1ECh+Str1], offset aFileFd0 ; "file_fd >= 0"
.text:00406937                 call    _assert
.text:00406937 sub_406610      endp
.text:00406937
.text:00406937 ; ---------------------------------------------------------------------------
.text:0040693C                 align 10h
.text:00406940
.text:00406940 ; =============== S U B R O U T I N E =======================================
.text:00406940
.text:00406940
.text:00406940 ; int __cdecl sub_406940(char *, void *Buf)
.text:00406940 sub_406940      proc near               ; DATA XREF: .data:0040809C↓o
.text:00406940
.text:00406940 FileName        = dword ptr -6Ch
.text:00406940 OpenFlag        = dword ptr -68h
.text:00406940 MaxCharCount    = dword ptr -64h
.text:00406940 Origin          = dword ptr -60h
.text:00406940 var_50          = dword ptr -50h
.text:00406940 var_2C          = word ptr -2Ch
.text:00406940 var_2A          = word ptr -2Ah
.text:00406940 arg_0           = dword ptr  4
.text:00406940 Buf             = dword ptr  8
.text:00406940
.text:00406940                 push    ebp
.text:00406941                 push    edi
.text:00406942                 push    esi
.text:00406943                 push    ebx
.text:00406944                 sub     esp, 5Ch
.text:00406947                 mov     edx, [esp+6Ch+arg_0]
.text:0040694B                 mov     [esp+6Ch+var_50], 0FFFFFFFFh
.text:00406953                 mov     [esp+6Ch+OpenFlag], 1 ; OpenFlag
.text:0040695B                 mov     [esp+6Ch+FileName], edx ; FileName
.text:0040695E                 call    _open
.text:00406963                 mov     ebp, eax
.text:00406965                 test    ebp, ebp
.text:00406967                 mov     eax, 0FFFFFFFFh
.text:0040696C                 js      loc_406A7D
.text:00406972                 cld
.text:00406973                 xor     eax, eax
.text:00406975                 lea     edi, [esp+6Ch+var_2C]
.text:00406979                 mov     ecx, 4
.text:0040697E                 rep stosd
.text:00406980                 mov     [esp+6Ch+var_2C], 2
.text:00406987                 lea     edi, [esp+6Ch+var_2C]
.text:0040698B                 mov     [esp+6Ch+var_2A], 0
.text:00406992                 mov     [esp+6Ch+MaxCharCount], edi
.text:00406996                 mov     [esp+6Ch+OpenFlag], 9
.text:0040699E                 mov     [esp+6Ch+FileName], ebp
.text:004069A1                 call    sub_406F20
.text:004069A6                 test    eax, eax
.text:004069A8                 js      loc_406A71
.text:004069AE                 mov     [esp+6Ch+Origin], 2 ; Origin
.text:004069B6                 mov     [esp+6Ch+OpenFlag], 0 ; Offset
.text:004069BE                 mov     [esp+6Ch+MaxCharCount], 0
.text:004069C6                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:004069C9                 call    _lseeki64
.text:004069CE                 mov     [esp+6Ch+FileName], eax
.text:004069D1                 mov     esi, eax
.text:004069D3                 mov     ebx, eax
.text:004069D5                 mov     [esp+6Ch+MaxCharCount], 180h
.text:004069DD                 sar     esi, 1Fh
.text:004069E0                 mov     [esp+6Ch+Origin], 0
.text:004069E8                 mov     [esp+6Ch+OpenFlag], esi
.text:004069EC                 call    sub_407590
.text:004069F1                 mov     ecx, edx
.text:004069F3                 or      ecx, eax
.text:004069F5                 jz      short loc_406A2F
.text:004069F7                 mov     [esp+6Ch+FileName], ebp
.text:004069FA                 sub     ebx, eax
.text:004069FC                 sbb     esi, edx
.text:004069FE                 mov     [esp+6Ch+OpenFlag], ebx
.text:00406A02                 mov     [esp+6Ch+MaxCharCount], esi
.text:00406A06                 call    sub_406D50
.text:00406A0B                 mov     [esp+6Ch+Origin], 2 ; Origin
.text:00406A13                 mov     [esp+6Ch+OpenFlag], 0 ; Offset
.text:00406A1B                 mov     [esp+6Ch+MaxCharCount], 0
.text:00406A23                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:00406A26                 call    _lseeki64
.text:00406A2B                 test    eax, eax
.text:00406A2D                 js      short loc_406A56
.text:00406A2F
.text:00406A2F loc_406A2F:                             ; CODE XREF: sub_406940+B5↑j
.text:00406A2F                 mov     [esp+6Ch+MaxCharCount], 180h ; MaxCharCount
.text:00406A37                 mov     edx, [esp+6Ch+Buf]
.text:00406A3B                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:00406A3E                 mov     [esp+6Ch+OpenFlag], edx ; Buf
.text:00406A42                 call    _write
.text:00406A47                 cmp     eax, 180h
.text:00406A4C                 jnz     short loc_406A85
.text:00406A4E                 mov     [esp+6Ch+var_50], 0
.text:00406A56
.text:00406A56 loc_406A56:                             ; CODE XREF: sub_406940+ED↑j
.text:00406A56                                         ; sub_406940+155↓j
.text:00406A56                 mov     [esp+6Ch+var_2C], 3
.text:00406A5D                 mov     [esp+6Ch+MaxCharCount], edi
.text:00406A61                 mov     [esp+6Ch+OpenFlag], 9
.text:00406A69                 mov     [esp+6Ch+FileName], ebp
.text:00406A6C                 call    sub_406F20
.text:00406A71
.text:00406A71 loc_406A71:                             ; CODE XREF: sub_406940+68↑j
.text:00406A71                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:00406A74                 call    _close
.text:00406A79                 mov     eax, [esp+6Ch+var_50]
.text:00406A7D
.text:00406A7D loc_406A7D:                             ; CODE XREF: sub_406940+2C↑j
.text:00406A7D                 add     esp, 5Ch
.text:00406A80                 pop     ebx
.text:00406A81                 pop     esi
.text:00406A82                 pop     edi
.text:00406A83                 pop     ebp
.text:00406A84                 retn
.text:00406A85 ; ---------------------------------------------------------------------------
.text:00406A85
.text:00406A85 loc_406A85:                             ; CODE XREF: sub_406940+10C↑j
.text:00406A85                 mov     [esp+6Ch+OpenFlag], ebx
.text:00406A89                 mov     [esp+6Ch+MaxCharCount], esi
.text:00406A8D                 mov     [esp+6Ch+FileName], ebp
.text:00406A90                 call    sub_406D50
.text:00406A95                 jmp     short loc_406A56
.text:00406A95 sub_406940      endp
.text:00406A95
.text:00406A95 ; ---------------------------------------------------------------------------
.text:00406A97                 align 10h
.text:00406AA0
.text:00406AA0 ; =============== S U B R O U T I N E =======================================
.text:00406AA0
.text:00406AA0
.text:00406AA0 sub_406AA0      proc near               ; CODE XREF: sub_4059D0+33↑p
.text:00406AA0                                         ; DATA XREF: .data:off_40808C↓o
.text:00406AA0
.text:00406AA0 var_1C          = dword ptr -1Ch
.text:00406AA0 var_18          = dword ptr -18h
.text:00406AA0 var_14          = dword ptr -14h
.text:00406AA0 var_10          = dword ptr -10h
.text:00406AA0 var_C           = dword ptr -0Ch
.text:00406AA0 var_8           = dword ptr -8
.text:00406AA0 var_4           = dword ptr -4
.text:00406AA0 arg_0           = dword ptr  4
.text:00406AA0 arg_4           = dword ptr  8
.text:00406AA0 arg_8           = dword ptr  0Ch
.text:00406AA0
.text:00406AA0                 sub     esp, 1Ch
.text:00406AA3                 mov     edx, FileHandle
.text:00406AA9                 mov     [esp+1Ch+var_10], ebx
.text:00406AAD                 mov     ebx, [esp+1Ch+arg_4]
.text:00406AB1                 test    edx, edx
.text:00406AB3                 mov     [esp+1Ch+var_4], ebp
.text:00406AB7                 mov     ebp, [esp+1Ch+arg_8]
.text:00406ABB                 mov     [esp+1Ch+var_C], esi
.text:00406ABF                 mov     [esp+1Ch+var_8], edi
.text:00406AC3                 js      short loc_406B42
.text:00406AC5                 mov     ecx, ds:dword_409200
.text:00406ACB                 mov     eax, ds:dword_409204
.text:00406AD0                 and     ecx, eax
.text:00406AD2                 inc     ecx
.text:00406AD3                 jz      short loc_406B34
.text:00406AD5                 mov     [esp+1Ch+var_18], offset dword_409210 ; void *
.text:00406ADD                 mov     edx, [esp+1Ch+arg_0]
.text:00406AE1                 mov     [esp+1Ch+var_1C], edx ; int
.text:00406AE4                 call    sub_406BA0
.text:00406AE9                 test    eax, eax
.text:00406AEB                 js      short loc_406B34
.text:00406AED                 test    bl, 4
.text:00406AF0                 mov     edi, ebx
.text:00406AF2                 mov     esi, offset dword_409210
.text:00406AF7                 mov     eax, 180h
.text:00406AFC                 jz      short loc_406B13
.text:00406AFE                 mov     esi, ds:dword_409210
.text:00406B04                 lea     edi, [ebx+4]
.text:00406B07                 mov     eax, 17Ch
.text:00406B0C                 mov     [ebx], esi
.text:00406B0E                 mov     esi, offset unk_409214
.text:00406B13
.text:00406B13 loc_406B13:                             ; CODE XREF: sub_406AA0+5C↑j
.text:00406B13                 cld
.text:00406B14                 mov     ecx, eax
.text:00406B16                 shr     ecx, 2
.text:00406B19                 rep movsd
.text:00406B1B                 mov     [ebp+0], ebx
.text:00406B1E                 xor     eax, eax
.text:00406B20
.text:00406B20 loc_406B20:                             ; CODE XREF: sub_406AA0+A0↓j
.text:00406B20                 mov     ebx, [esp+1Ch+var_10]
.text:00406B24                 mov     esi, [esp+1Ch+var_C]
.text:00406B28                 mov     edi, [esp+1Ch+var_8]
.text:00406B2C                 mov     ebp, [esp+1Ch+var_4]
.text:00406B30                 add     esp, 1Ch
.text:00406B33                 retn
.text:00406B34 ; ---------------------------------------------------------------------------
.text:00406B34
.text:00406B34 loc_406B34:                             ; CODE XREF: sub_406AA0+33↑j
.text:00406B34                                         ; sub_406AA0+4B↑j
.text:00406B34                 mov     dword ptr [ebp+0], 0
.text:00406B3B                 mov     eax, 0FFFFFFFFh
.text:00406B40                 jmp     short loc_406B20
.text:00406B42 ; ---------------------------------------------------------------------------
.text:00406B42
.text:00406B42 loc_406B42:                             ; CODE XREF: sub_406AA0+23↑j
.text:00406B42                 mov     [esp+1Ch+var_14], 10Eh
.text:00406B4A                 mov     [esp+1Ch+var_18], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:00406B52                 mov     [esp+1Ch+var_1C], offset aFileFd0 ; "file_fd >= 0"
.text:00406B59                 call    _assert
.text:00406B59 sub_406AA0      endp
.text:00406B59
.text:00406B59 ; ---------------------------------------------------------------------------
.text:00406B5E                 align 10h
.text:00406B60
.text:00406B60 ; =============== S U B R O U T I N E =======================================
.text:00406B60
.text:00406B60
.text:00406B60 sub_406B60      proc near               ; DATA XREF: .data:00408098↓o
.text:00406B60
.text:00406B60 FileHandle      = dword ptr -0Ch
.text:00406B60 var_8           = dword ptr -8
.text:00406B60 var_4           = dword ptr -4
.text:00406B60
.text:00406B60                 sub     esp, 0Ch
.text:00406B63                 mov     eax, FileHandle
.text:00406B68                 test    eax, eax
.text:00406B6A                 js      short loc_406B83
.text:00406B6C                 mov     [esp+0Ch+FileHandle], eax ; FileHandle
.text:00406B6F                 call    _close
.text:00406B74                 mov     edx, 0FFFFFFFFh
.text:00406B79                 mov     FileHandle, edx
.text:00406B7F                 add     esp, 0Ch
.text:00406B82                 retn
.text:00406B83 ; ---------------------------------------------------------------------------
.text:00406B83
.text:00406B83 loc_406B83:                             ; CODE XREF: sub_406B60+A↑j
.text:00406B83                 mov     [esp+0Ch+var_4], 1A8h
.text:00406B8B                 mov     [esp+0Ch+var_8], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:00406B93                 mov     [esp+0Ch+FileHandle], offset aFileFd0 ; "file_fd >= 0"
.text:00406B9A                 call    _assert
.text:00406B9A sub_406B60      endp
.text:00406B9A
.text:00406B9A ; ---------------------------------------------------------------------------
.text:00406B9F                 align 10h
.text:00406BA0
.text:00406BA0 ; =============== S U B R O U T I N E =======================================
.text:00406BA0
.text:00406BA0
.text:00406BA0 ; int __cdecl sub_406BA0(int, void *)
.text:00406BA0 sub_406BA0      proc near               ; CODE XREF: sub_406610+2AB↑p
.text:00406BA0                                         ; sub_406AA0+44↑p
.text:00406BA0
.text:00406BA0 FileHandle      = dword ptr -5Ch
.text:00406BA0 DstBuf          = dword ptr -58h
.text:00406BA0 MaxCharCount    = dword ptr -54h
.text:00406BA0 var_2C          = word ptr -2Ch
.text:00406BA0 var_2A          = word ptr -2Ah
.text:00406BA0 arg_0           = dword ptr  4
.text:00406BA0 arg_4           = dword ptr  8
.text:00406BA0
.text:00406BA0                 push    ebp
.text:00406BA1                 xor     eax, eax
.text:00406BA3                 mov     ecx, 4
.text:00406BA8                 push    edi
.text:00406BA9                 mov     ebp, 0FFFFFFFFh
.text:00406BAE                 push    esi
.text:00406BAF                 push    ebx
.text:00406BB0                 sub     esp, 4Ch
.text:00406BB3                 lea     edi, [esp+5Ch+var_2C]
.text:00406BB7                 cld
.text:00406BB8                 mov     esi, [esp+5Ch+arg_0]
.text:00406BBC                 mov     ebx, [esp+5Ch+arg_4]
.text:00406BC0                 rep stosd
.text:00406BC2                 mov     [esp+5Ch+var_2C], 1
.text:00406BC9                 mov     edx, FileHandle
.text:00406BCF                 lea     edi, [esp+5Ch+var_2C]
.text:00406BD3                 mov     [esp+5Ch+var_2A], 0
.text:00406BDA                 mov     [esp+5Ch+MaxCharCount], edi
.text:00406BDE                 mov     [esp+5Ch+DstBuf], 9
.text:00406BE6                 mov     [esp+5Ch+FileHandle], edx
.text:00406BE9                 call    sub_406F20
.text:00406BEE                 test    eax, eax
.text:00406BF0                 js      loc_406CBB
.text:00406BF6                 movzx   edx, word ptr [esi]
.text:00406BF9                 lea     ecx, [edx-1]
.text:00406BFC                 cmp     cx, 1
.text:00406C00                 jbe     loc_406D00
.text:00406C06                 cmp     dx, 4
.text:00406C0A                 jz      loc_406D00
.text:00406C10                 cmp     dx, 3
.text:00406C14                 jz      loc_406D00
.text:00406C1A                 lea     esi, [esi+0]
.text:00406C20
.text:00406C20 loc_406C20:                             ; CODE XREF: sub_406BA0+C0↓j
.text:00406C20                                         ; sub_406BA0+CC↓j ...
.text:00406C20                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:00406C28                 mov     edx, FileHandle
.text:00406C2E                 mov     [esp+5Ch+DstBuf], ebx ; DstBuf
.text:00406C32                 mov     [esp+5Ch+FileHandle], edx ; FileHandle
.text:00406C35                 call    _read
.text:00406C3A                 cmp     eax, 180h
.text:00406C3F                 jnz     loc_406CD9
.text:00406C45                 movzx   ecx, word ptr [ebx]
.text:00406C48                 add     ds:dword_409200, 180h
.text:00406C52                 adc     ds:dword_409204, 0
.text:00406C59                 sub     ecx, 5
.text:00406C5C                 cmp     cx, 3
.text:00406C60                 ja      short loc_406C20
.text:00406C62                 movzx   edx, word ptr [esi]
.text:00406C65                 sub     edx, 5
.text:00406C68                 cmp     dx, 3
.text:00406C6C                 ja      short loc_406C20
.text:00406C6E                 cmp     byte ptr [ebx+28h], 0
.text:00406C72                 jz      short loc_406C7A
.text:00406C74                 cmp     byte ptr [esi+28h], 0
.text:00406C78                 jnz     short loc_406CC5
.text:00406C7A
.text:00406C7A loc_406C7A:                             ; CODE XREF: sub_406BA0+D2↑j
.text:00406C7A                 mov     [esp+5Ch+MaxCharCount], 20h ; ' ' ; MaxCount
.text:00406C82                 lea     edx, [esi+8]
.text:00406C85                 lea     eax, [ebx+8]
.text:00406C88                 mov     [esp+5Ch+DstBuf], edx ; Str2
.text:00406C8C
.text:00406C8C loc_406C8C:                             ; CODE XREF: sub_406BA0+137↓j
.text:00406C8C                 mov     [esp+5Ch+FileHandle], eax ; Str1
.text:00406C8F                 call    strncmp
.text:00406C94                 test    eax, eax
.text:00406C96                 jnz     short loc_406C20
.text:00406C98
.text:00406C98 loc_406C98:                             ; CODE XREF: sub_406BA0+19A↓j
.text:00406C98                 xor     ebp, ebp
.text:00406C9A
.text:00406C9A loc_406C9A:                             ; CODE XREF: sub_406BA0+159↓j
.text:00406C9A                 mov     [esp+5Ch+var_2C], 3
.text:00406CA1                 mov     esi, FileHandle
.text:00406CA7                 mov     [esp+5Ch+MaxCharCount], edi
.text:00406CAB                 mov     [esp+5Ch+DstBuf], 9
.text:00406CB3                 mov     [esp+5Ch+FileHandle], esi
.text:00406CB6                 call    sub_406F20
.text:00406CBB
.text:00406CBB loc_406CBB:                             ; CODE XREF: sub_406BA0+50↑j
.text:00406CBB                 add     esp, 4Ch
.text:00406CBE                 mov     eax, ebp
.text:00406CC0                 pop     ebx
.text:00406CC1                 pop     esi
.text:00406CC2                 pop     edi
.text:00406CC3                 pop     ebp
.text:00406CC4                 retn
.text:00406CC5 ; ---------------------------------------------------------------------------
.text:00406CC5
.text:00406CC5 loc_406CC5:                             ; CODE XREF: sub_406BA0+D8↑j
.text:00406CC5                 mov     [esp+5Ch+MaxCharCount], 4
.text:00406CCD                 lea     ecx, [esi+28h]
.text:00406CD0                 lea     eax, [ebx+28h]
.text:00406CD3                 mov     [esp+5Ch+DstBuf], ecx
.text:00406CD7                 jmp     short loc_406C8C
.text:00406CD9 ; ---------------------------------------------------------------------------
.text:00406CD9
.text:00406CD9 loc_406CD9:                             ; CODE XREF: sub_406BA0+9F↑j
.text:00406CD9                                         ; sub_406BA0+17F↓j
.text:00406CD9                 call    _errno
.text:00406CDE                 mov     dword ptr [eax], 3
.text:00406CE4                 mov     ebx, 0FFFFFFFFh
.text:00406CE9                 mov     eax, 0FFFFFFFFh
.text:00406CEE                 mov     ds:dword_409200, eax
.text:00406CF3                 mov     ds:dword_409204, ebx
.text:00406CF9                 jmp     short loc_406C9A
.text:00406CF9 ; ---------------------------------------------------------------------------
.text:00406CFB                 align 10h
.text:00406D00
.text:00406D00 loc_406D00:                             ; CODE XREF: sub_406BA0+60↑j
.text:00406D00                                         ; sub_406BA0+6A↑j ...
.text:00406D00                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:00406D08                 mov     edx, FileHandle
.text:00406D0E                 mov     [esp+5Ch+DstBuf], ebx ; DstBuf
.text:00406D12                 mov     [esp+5Ch+FileHandle], edx ; FileHandle
.text:00406D15                 call    _read
.text:00406D1A                 cmp     eax, 180h
.text:00406D1F                 jnz     short loc_406CD9
.text:00406D21                 add     ds:dword_409200, 180h
.text:00406D2B                 movzx   ecx, word ptr [ebx]
.text:00406D2E                 adc     ds:dword_409204, 0
.text:00406D35                 cmp     [esi], cx
.text:00406D38                 jnz     short loc_406D00
.text:00406D3A                 jmp     loc_406C98
.text:00406D3A sub_406BA0      endp
.text:00406D3A
.text:00406D3A ; ---------------------------------------------------------------------------
.text:00406D3F                 db 11h dup(90h)
.text:00406D50
.text:00406D50 ; =============== S U B R O U T I N E =======================================
.text:00406D50
.text:00406D50
.text:00406D50 sub_406D50      proc near               ; CODE XREF: sub_406610+1BF↑p
.text:00406D50                                         ; sub_406610+263↑p ...
.text:00406D50
.text:00406D50 FileHandle      = dword ptr -2Ch
.text:00406D50 Offset          = qword ptr -28h
.text:00406D50 Origin          = dword ptr -20h
.text:00406D50 var_10          = dword ptr -10h
.text:00406D50 var_C           = dword ptr -0Ch
.text:00406D50 var_8           = dword ptr -8
.text:00406D50 var_4           = dword ptr -4
.text:00406D50 arg_0           = dword ptr  4
.text:00406D50 arg_4           = qword ptr  8
.text:00406D50
.text:00406D50                 sub     esp, 2Ch
.text:00406D53                 mov     [esp+2Ch+var_4], ebp
.text:00406D57                 mov     ebp, [esp+2Ch+arg_0]
.text:00406D5B                 mov     [esp+2Ch+var_10], ebx
.text:00406D5F                 mov     ebx, dword ptr [esp+2Ch+arg_4]
.text:00406D63                 mov     [esp+2Ch+var_C], esi
.text:00406D67                 mov     esi, dword ptr [esp+2Ch+arg_4+4]
.text:00406D6B                 mov     [esp+2Ch+var_8], edi
.text:00406D6F                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:00406D72                 call    _get_osfhandle
.text:00406D77                 cmp     eax, 0FFFFFFFFh
.text:00406D7A                 mov     edi, eax
.text:00406D7C                 jz      short loc_406DE6
.text:00406D7E                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:00406D81                 mov     [esp+2Ch+Origin], 0 ; Origin
.text:00406D89                 mov     dword ptr [esp+2Ch+Offset], ebx ; Offset
.text:00406D8D                 mov     dword ptr [esp+2Ch+Offset+4], esi
.text:00406D91                 call    _lseeki64
.text:00406D96                 mov     ebp, edx
.text:00406D98                 xor     eax, ebx
.text:00406D9A                 xor     ebp, esi
.text:00406D9C                 or      ebp, eax
.text:00406D9E                 jnz     short loc_406DD9
.text:00406DA0                 mov     [esp+2Ch+FileHandle], edi ; hFile
.text:00406DA3                 call    SetEndOfFile
.text:00406DA8                 sub     esp, 4
.text:00406DAB                 xor     edx, edx
.text:00406DAD                 test    eax, eax
.text:00406DAF                 jz      short loc_406DC7
.text:00406DB1
.text:00406DB1 loc_406DB1:                             ; CODE XREF: sub_406D50+87↓j
.text:00406DB1                 mov     ebx, [esp+2Ch+var_10]
.text:00406DB5                 mov     eax, edx
.text:00406DB7                 mov     esi, [esp+2Ch+var_C]
.text:00406DBB                 mov     edi, [esp+2Ch+var_8]
.text:00406DBF                 mov     ebp, [esp+2Ch+var_4]
.text:00406DC3                 add     esp, 2Ch
.text:00406DC6                 retn
.text:00406DC7 ; ---------------------------------------------------------------------------
.text:00406DC7
.text:00406DC7 loc_406DC7:                             ; CODE XREF: sub_406D50+5F↑j
.text:00406DC7                 call    _errno
.text:00406DCC                 mov     dword ptr [eax], offset sub_4073F0
.text:00406DD2
.text:00406DD2 loc_406DD2:                             ; CODE XREF: sub_406D50+94↓j
.text:00406DD2                                         ; sub_406D50+A1↓j
.text:00406DD2                 mov     edx, 0FFFFFFFFh
.text:00406DD7                 jmp     short loc_406DB1
.text:00406DD9 ; ---------------------------------------------------------------------------
.text:00406DD9
.text:00406DD9 loc_406DD9:                             ; CODE XREF: sub_406D50+4E↑j
.text:00406DD9                 call    _errno
.text:00406DDE                 mov     dword ptr [eax], 16h
.text:00406DE4                 jmp     short loc_406DD2
.text:00406DE6 ; ---------------------------------------------------------------------------
.text:00406DE6
.text:00406DE6 loc_406DE6:                             ; CODE XREF: sub_406D50+2C↑j
.text:00406DE6                 call    _errno
.text:00406DEB                 mov     dword ptr [eax], 9
.text:00406DF1                 jmp     short loc_406DD2
.text:00406DF1 sub_406D50      endp
.text:00406DF1
.text:00406DF1 ; ---------------------------------------------------------------------------
.text:00406DF3                 align 10h
.text:00406E00
.text:00406E00 ; =============== S U B R O U T I N E =======================================
.text:00406E00
.text:00406E00
.text:00406E00 sub_406E00      proc near               ; CODE XREF: sub_406F20+152↓p
.text:00406E00                                         ; .text:004070EB↓p
.text:00406E00
.text:00406E00 FileHandle      = dword ptr -2Ch
.text:00406E00 Offset          = qword ptr -28h
.text:00406E00 Origin          = dword ptr -20h
.text:00406E00 nNumberOfBytesToUnlockHigh= dword ptr -1Ch
.text:00406E00 hFile           = dword ptr -14h
.text:00406E00 arg_0           = dword ptr  4
.text:00406E00 arg_4           = dword ptr  8
.text:00406E00 arg_8           = dword ptr  0Ch
.text:00406E00
.text:00406E00                 push    ebp
.text:00406E01                 push    edi
.text:00406E02                 push    esi
.text:00406E03                 push    ebx
.text:00406E04                 sub     esp, 1Ch
.text:00406E07                 mov     ebp, [esp+2Ch+arg_8]
.text:00406E0B                 mov     edi, [esp+2Ch+arg_0]
.text:00406E0F                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:00406E12                 call    _get_osfhandle
.text:00406E17                 movsx   edx, word ptr [ebp+2]
.text:00406E1B                 mov     [esp+2Ch+hFile], eax
.text:00406E1F                 mov     dword ptr [esp+2Ch+Offset], 0 ; Offset
.text:00406E27                 mov     dword ptr [esp+2Ch+Offset+4], 0
.text:00406E2F                 mov     [esp+2Ch+Origin], edx ; Origin
.text:00406E33                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:00406E36                 call    _lseeki64
.text:00406E3B                 mov     ebx, eax
.text:00406E3D                 mov     esi, edx
.text:00406E3F                 mov     edx, [ebp+14h]
.text:00406E42                 add     ebx, [ebp+8]
.text:00406E45                 mov     eax, [ebp+10h]
.text:00406E48                 mov     ecx, edx
.text:00406E4A                 adc     esi, [ebp+0Ch]
.text:00406E4D                 or      ecx, eax
.text:00406E4F                 jz      loc_406F10
.text:00406E55                 add     eax, ebx
.text:00406E57                 adc     edx, esi
.text:00406E59
.text:00406E59 loc_406E59:                             ; CODE XREF: sub_406E00+118↓j
.text:00406E59                 cmp     [esp+2Ch+arg_4], 7
.text:00406E5E                 jz      loc_406EFE
.text:00406E64                 cmp     [esp+2Ch+arg_4], 7
.text:00406E69                 jl      short loc_406E85
.text:00406E6B                 cmp     [esp+2Ch+arg_4], 9
.text:00406E70                 jg      short loc_406E85
.text:00406E72                 movsx   ecx, word ptr [ebp+0]
.text:00406E76                 cmp     ecx, 1
.text:00406E79                 jl      short loc_406E85
.text:00406E7B                 cmp     ecx, 2
.text:00406E7E                 jle     short loc_406EE0
.text:00406E80                 cmp     ecx, 3
.text:00406E83                 jz      short loc_406E9D
.text:00406E85
.text:00406E85 loc_406E85:                             ; CODE XREF: sub_406E00+69↑j
.text:00406E85                                         ; sub_406E00+70↑j ...
.text:00406E85                 call    _errno
.text:00406E8A                 mov     dword ptr [eax], 16h
.text:00406E90
.text:00406E90 loc_406E90:                             ; CODE XREF: sub_406E00+D9↓j
.text:00406E90                                         ; sub_406E00+109↓j
.text:00406E90                 mov     eax, 0FFFFFFFFh
.text:00406E95
.text:00406E95 loc_406E95:                             ; CODE XREF: sub_406E00+C9↓j
.text:00406E95                 add     esp, 1Ch
.text:00406E98                 pop     ebx
.text:00406E99                 pop     esi
.text:00406E9A                 pop     edi
.text:00406E9B                 pop     ebp
.text:00406E9C                 retn
.text:00406E9D ; ---------------------------------------------------------------------------
.text:00406E9D
.text:00406E9D loc_406E9D:                             ; CODE XREF: sub_406E00+83↑j
.text:00406E9D                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToUnlockLow
.text:00406EA1                 mov     eax, [esp+2Ch+hFile]
.text:00406EA5                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:00406EA9                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:00406EAD                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:00406EB1                 mov     [esp+2Ch+FileHandle], eax ; hFile
.text:00406EB4                 call    UnlockFile
.text:00406EB9                 lea     esi, [esi+0]
.text:00406EC0
.text:00406EC0 loc_406EC0:                             ; CODE XREF: sub_406E00+FC↓j
.text:00406EC0                 mov     ecx, eax
.text:00406EC2                 sub     esp, 14h
.text:00406EC5                 xor     eax, eax
.text:00406EC7                 test    ecx, ecx
.text:00406EC9                 jnz     short loc_406E95
.text:00406ECB                 call    sub_4073F0
.text:00406ED0                 mov     esi, eax
.text:00406ED2                 call    _errno
.text:00406ED7                 mov     [eax], esi
.text:00406ED9                 jmp     short loc_406E90
.text:00406ED9 ; ---------------------------------------------------------------------------
.text:00406EDB                 align 10h
.text:00406EE0
.text:00406EE0 loc_406EE0:                             ; CODE XREF: sub_406E00+7E↑j
.text:00406EE0                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToLockHigh
.text:00406EE4                 mov     edx, [esp+2Ch+hFile]
.text:00406EE8                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:00406EEC                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:00406EF0                 mov     [esp+2Ch+FileHandle], edx ; hFile
.text:00406EF3                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToLockLow
.text:00406EF7                 call    LockFile
.text:00406EFC                 jmp     short loc_406EC0
.text:00406EFE ; ---------------------------------------------------------------------------
.text:00406EFE
.text:00406EFE loc_406EFE:                             ; CODE XREF: sub_406E00+5E↑j
.text:00406EFE                 call    _errno
.text:00406F03                 mov     dword ptr [eax], 28h ; '('
.text:00406F09                 jmp     short loc_406E90
.text:00406F09 ; ---------------------------------------------------------------------------
.text:00406F0B                 align 10h
.text:00406F10
.text:00406F10 loc_406F10:                             ; CODE XREF: sub_406E00+4F↑j
.text:00406F10                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:00406F13                 call    _filelengthi64
.text:00406F18                 jmp     loc_406E59
.text:00406F18 sub_406E00      endp
.text:00406F18
.text:00406F18 ; ---------------------------------------------------------------------------
.text:00406F1D                 align 10h
.text:00406F20
.text:00406F20 ; =============== S U B R O U T I N E =======================================
.text:00406F20
.text:00406F20
.text:00406F20 sub_406F20      proc near               ; CODE XREF: sub_4061D0+97↑p
.text:00406F20                                         ; sub_4061D0+B8↑p ...
.text:00406F20
.text:00406F20 FileHandle      = dword ptr -1Ch
.text:00406F20 var_18          = dword ptr -18h
.text:00406F20 var_14          = dword ptr -14h
.text:00406F20 var_4           = dword ptr -4
.text:00406F20 arg_0           = dword ptr  4
.text:00406F20 arg_4           = dword ptr  8
.text:00406F20 arg_8           = byte ptr  0Ch
.text:00406F20
.text:00406F20                 sub     esp, 1Ch
.text:00406F23                 mov     ecx, [esp+1Ch+arg_0]
.text:00406F27                 mov     [esp+1Ch+var_4], ebx
.text:00406F2B                 mov     edx, [esp+1Ch+arg_4]
.text:00406F2F                 test    ecx, ecx
.text:00406F31                 js      loc_407089
.text:00406F37                 cmp     edx, 9          ; switch 10 cases
.text:00406F3A                 lea     eax, [esp+1Ch+arg_8]
.text:00406F3E                 ja      def_406F44      ; jumptable 00406F44 default case
.text:00406F44                 jmp     ds:jpt_406F44[edx*4] ; switch jump
.text:00406F44 ; ---------------------------------------------------------------------------
.text:00406F4B                 align 4
.text:00406F4C jpt_406F44      dd offset loc_406F74    ; DATA XREF: sub_406F20+24↑r
.text:00406F4C                 dd offset loc_406F88    ; jump table for switch statement
.text:00406F4C                 dd offset loc_406FA8
.text:00406F4C                 dd offset loc_406FD0
.text:00406F4C                 dd offset loc_407018
.text:00406F4C                 dd offset loc_407050
.text:00406F4C                 dd offset loc_407050
.text:00406F4C                 dd offset loc_407050
.text:00406F4C                 dd offset loc_407065
.text:00406F4C                 dd offset loc_407065
.text:00406F74 ; ---------------------------------------------------------------------------
.text:00406F74
.text:00406F74 loc_406F74:                             ; CODE XREF: sub_406F20+24↑j
.text:00406F74                                         ; DATA XREF: sub_406F20:jpt_406F44↑o
.text:00406F74                 mov     [esp+1Ch+FileHandle], ecx ; jumptable 00406F44 case 0
.text:00406F77                 call    _dup
.text:00406F7C                 lea     esi, [esi+0]
.text:00406F80
.text:00406F80 loc_406F80:                             ; CODE XREF: sub_406F20+86↓j
.text:00406F80                                         ; sub_406F20+AC↓j ...
.text:00406F80                 mov     ebx, [esp+1Ch+var_4]
.text:00406F84                 add     esp, 1Ch
.text:00406F87                 retn
.text:00406F88 ; ---------------------------------------------------------------------------
.text:00406F88
.text:00406F88 loc_406F88:                             ; CODE XREF: sub_406F20+24↑j
.text:00406F88                                         ; DATA XREF: sub_406F20:jpt_406F44↑o
.text:00406F88                 mov     eax, ds:__pioinfo ; jumptable 00406F44 case 1
.text:00406F8D                 mov     edx, ecx
.text:00406F8F                 sar     edx, 5
.text:00406F92                 and     ecx, 1Fh
.text:00406F95                 mov     ebx, [eax+edx*4]
.text:00406F98                 lea     eax, [ecx+ecx*8]
.text:00406F9B                 test    byte ptr [ebx+eax*4+4], 10h
.text:00406FA0                 setnz   dl
.text:00406FA3                 movzx   eax, dl
.text:00406FA6                 jmp     short loc_406F80
.text:00406FA8 ; ---------------------------------------------------------------------------
.text:00406FA8
.text:00406FA8 loc_406FA8:                             ; CODE XREF: sub_406F20+24↑j
.text:00406FA8                                         ; DATA XREF: sub_406F20:jpt_406F44↑o
.text:00406FA8                 test    bl, 1           ; jumptable 00406F44 case 2
.text:00406FAB                 jz      short loc_406FB3
.text:00406FAD                 and     ebx, 0FFFFFFFEh
.text:00406FB0                 or      ebx, 10h
.text:00406FB3
.text:00406FB3 loc_406FB3:                             ; CODE XREF: sub_406F20+8B↑j
.text:00406FB3                 mov     eax, ds:__pioinfo
.text:00406FB8                 mov     edx, ecx
.text:00406FBA                 sar     edx, 5
.text:00406FBD                 and     ecx, 1Fh
.text:00406FC0                 mov     edx, [eax+edx*4]
.text:00406FC3                 lea     eax, [ecx+ecx*8]
.text:00406FC6                 mov     [edx+eax*4+4], bl
.text:00406FCA
.text:00406FCA loc_406FCA:                             ; CODE XREF: sub_406F20+121↓j
.text:00406FCA                 xor     eax, eax
.text:00406FCC                 jmp     short loc_406F80
.text:00406FCC ; ---------------------------------------------------------------------------
.text:00406FCE                 align 10h
.text:00406FD0
.text:00406FD0 loc_406FD0:                             ; CODE XREF: sub_406F20+24↑j
.text:00406FD0                                         ; DATA XREF: sub_406F20:jpt_406F44↑o
.text:00406FD0                 mov     eax, ds:__pioinfo ; jumptable 00406F44 case 3
.text:00406FD5                 mov     ebx, ecx
.text:00406FD7                 sar     ebx, 5
.text:00406FDA                 and     ecx, 1Fh
.text:00406FDD                 mov     edx, [eax+ebx*4]
.text:00406FE0                 lea     ebx, [ecx+ecx*8]
.text:00406FE3                 movsx   eax, byte ptr [edx+ebx*4+4]
.text:00406FE8                 xor     edx, edx
.text:00406FEA                 test    al, 1
.text:00406FEC                 jz      short loc_406FF7
.text:00406FEE                 mov     edx, 2
.text:00406FF3
.text:00406FF3 loc_406FF3:                             ; CODE XREF: sub_406F20+E0↓j
.text:00406FF3                                         ; sub_406F20+EB↓j ...
.text:00406FF3                 mov     eax, edx
.text:00406FF5                 jmp     short loc_406F80
.text:00406FF7 ; ---------------------------------------------------------------------------
.text:00406FF7
.text:00406FF7 loc_406FF7:                             ; CODE XREF: sub_406F20+CC↑j
.text:00406FF7                 test    al, 20h
.text:00406FF9                 jz      short loc_407002
.text:00406FFB                 mov     edx, 8
.text:00407000                 jmp     short loc_406FF3
.text:00407002 ; ---------------------------------------------------------------------------
.text:00407002
.text:00407002 loc_407002:                             ; CODE XREF: sub_406F20+D9↑j
.text:00407002                 test    al, 10h
.text:00407004                 jz      short loc_40700D
.text:00407006                 mov     edx, 80h ; '€'
.text:0040700B                 jmp     short loc_406FF3
.text:0040700D ; ---------------------------------------------------------------------------
.text:0040700D
.text:0040700D loc_40700D:                             ; CODE XREF: sub_406F20+E4↑j
.text:0040700D                 test    al, al
.text:0040700F                 jns     short loc_406FF3
.text:00407011                 mov     edx, 4000h
.text:00407016                 jmp     short loc_406FF3
.text:00407018 ; ---------------------------------------------------------------------------
.text:00407018
.text:00407018 loc_407018:                             ; CODE XREF: sub_406F20+24↑j
.text:00407018                                         ; DATA XREF: sub_406F20:jpt_406F44↑o
.text:00407018                 mov     edx, ds:__pioinfo ; jumptable 00406F44 case 4
.text:0040701E                 mov     ebx, [eax]
.text:00407020                 mov     eax, ecx
.text:00407022                 sar     eax, 5
.text:00407025                 and     ecx, 1Fh
.text:00407028                 mov     edx, [edx+eax*4]
.text:0040702B                 lea     eax, [ecx+ecx*8]
.text:0040702E                 shl     eax, 2
.text:00407031                 xor     ecx, ecx
.text:00407033                 test    bl, 8
.text:00407036                 jz      short loc_407043
.text:00407038                 mov     ecx, 20h ; ' '
.text:0040703D
.text:0040703D loc_40703D:                             ; CODE XREF: sub_406F20+126↓j
.text:0040703D                                         ; sub_406F20+12D↓j
.text:0040703D                 mov     [edx+eax+4], cl
.text:00407041                 jmp     short loc_406FCA
.text:00407043 ; ---------------------------------------------------------------------------
.text:00407043
.text:00407043 loc_407043:                             ; CODE XREF: sub_406F20+116↑j
.text:00407043                 test    bh, 40h
.text:00407046                 jz      short loc_40703D
.text:00407048                 mov     ecx, 80h ; '€'
.text:0040704D                 jmp     short loc_40703D
.text:0040704D ; ---------------------------------------------------------------------------
.text:0040704F                 align 10h
.text:00407050
.text:00407050 loc_407050:                             ; CODE XREF: sub_406F20+24↑j
.text:00407050                                         ; DATA XREF: sub_406F20:jpt_406F44↑o
.text:00407050                 call    _errno          ; jumptable 00406F44 cases 5-7
.text:00407055                 mov     dword ptr [eax], 28h ; '('
.text:0040705B
.text:0040705B loc_40705B:                             ; CODE XREF: sub_406F20+167↓j
.text:0040705B                                         ; sub_406F20+174↓j
.text:0040705B                 mov     eax, 0FFFFFFFFh
.text:00407060                 jmp     loc_406F80
.text:00407065 ; ---------------------------------------------------------------------------
.text:00407065
.text:00407065 loc_407065:                             ; CODE XREF: sub_406F20+24↑j
.text:00407065                                         ; DATA XREF: sub_406F20:jpt_406F44↑o
.text:00407065                 mov     ebx, [eax]      ; jumptable 00406F44 cases 8,9
.text:00407067                 mov     [esp+1Ch+var_18], edx
.text:0040706B                 mov     [esp+1Ch+FileHandle], ecx
.text:0040706E                 mov     [esp+1Ch+var_14], ebx
.text:00407072                 call    sub_406E00
.text:00407077                 jmp     loc_406F80
.text:0040707C ; ---------------------------------------------------------------------------
.text:0040707C
.text:0040707C def_406F44:                             ; CODE XREF: sub_406F20+1E↑j
.text:0040707C                 call    _errno          ; jumptable 00406F44 default case
.text:00407081                 mov     dword ptr [eax], 16h
.text:00407087                 jmp     short loc_40705B
.text:00407089 ; ---------------------------------------------------------------------------
.text:00407089
.text:00407089 loc_407089:                             ; CODE XREF: sub_406F20+11↑j
.text:00407089                 call    _errno
.text:0040708E                 mov     dword ptr [eax], 9
.text:00407094                 jmp     short loc_40705B
.text:00407094 sub_406F20      endp
.text:00407094
.text:00407094 ; ---------------------------------------------------------------------------
.text:00407096                 align 10h
.text:004070A0                 sub     esp, 3Ch
.text:004070A3                 mov     edx, [esp+48h]
.text:004070A7                 mov     eax, [edx+4]
.text:004070AA                 movzx   ecx, word ptr [edx]
.text:004070AD                 mov     [esp+18h], eax
.text:004070B1                 mov     [esp+10h], cx
.text:004070B6                 movzx   ecx, word ptr [edx+2]
.text:004070BA                 mov     [esp+12h], cx
.text:004070BF                 mov     ecx, eax
.text:004070C1                 mov     eax, [edx+8]
.text:004070C4                 sar     ecx, 1Fh
.text:004070C7                 mov     [esp+1Ch], ecx
.text:004070CB                 cdq
.text:004070CC                 lea     ecx, [esp+10h]
.text:004070D0                 mov     [esp+24h], edx
.text:004070D4                 mov     edx, [esp+44h]
.text:004070D8                 mov     [esp+20h], eax
.text:004070DC                 mov     [esp+8], ecx
.text:004070E0                 mov     [esp+4], edx
.text:004070E4                 mov     edx, [esp+40h]
.text:004070E8                 mov     [esp], edx
.text:004070EB                 call    sub_406E00
.text:004070F0                 add     esp, 3Ch
.text:004070F3                 retn
.text:004070F3 ; ---------------------------------------------------------------------------
.text:004070F4                 align 10h
.text:00407100                 mov     edx, [esp+4]
.text:00407104                 xor     eax, eax
.text:00407106                 test    dl, 1
.text:00407109                 jz      short loc_407111
.text:0040710B                 mov     eax, 2
.text:00407110                 retn
.text:00407111 ; ---------------------------------------------------------------------------
.text:00407111
.text:00407111 loc_407111:                             ; CODE XREF: .text:00407109↑j
.text:00407111                 test    dl, 20h
.text:00407114                 jz      short loc_407120
.text:00407116                 mov     eax, 8
.text:0040711B                 retn
.text:0040711B ; ---------------------------------------------------------------------------
.text:0040711C                 align 10h
.text:00407120
.text:00407120 loc_407120:                             ; CODE XREF: .text:00407114↑j
.text:00407120                 test    dl, 10h
.text:00407123                 jz      short loc_407130
.text:00407125                 mov     eax, 80h ; '€'
.text:0040712A                 retn
.text:0040712A ; ---------------------------------------------------------------------------
.text:0040712B                 align 10h
.text:00407130
.text:00407130 loc_407130:                             ; CODE XREF: .text:00407123↑j
.text:00407130                 test    dl, dl
.text:00407132                 jns     short locret_407139
.text:00407134                 mov     eax, 4000h
.text:00407139
.text:00407139 locret_407139:                          ; CODE XREF: .text:00407132↑j
.text:00407139                 retn
.text:00407139 ; ---------------------------------------------------------------------------
.text:0040713A                 align 10h
.text:00407140                 mov     edx, [esp+4]
.text:00407144                 xor     eax, eax
.text:00407146                 test    dl, 8
.text:00407149                 jz      short loc_407151
.text:0040714B                 mov     eax, 20h ; ' '
.text:00407150                 retn
.text:00407151 ; ---------------------------------------------------------------------------
.text:00407151
.text:00407151 loc_407151:                             ; CODE XREF: .text:00407149↑j
.text:00407151                 test    dh, 40h
.text:00407154                 jz      short locret_40715B
.text:00407156                 mov     eax, 80h ; '€'
.text:0040715B
.text:0040715B locret_40715B:                          ; CODE XREF: .text:00407154↑j
.text:0040715B                 retn
.text:0040715B ; ---------------------------------------------------------------------------
.text:0040715C                 align 10h
.text:00407160
.text:00407160 ; =============== S U B R O U T I N E =======================================
.text:00407160
.text:00407160 ; Attributes: info_from_lumina
.text:00407160
.text:00407160 ___get_errno    proc near               ; CODE XREF: sub_4073F0+B↓p
.text:00407160
.text:00407160 arg_0           = dword ptr  4
.text:00407160
.text:00407160                 mov     eax, [esp+arg_0]
.text:00407164                 cmp     eax, 53h ; 'S'
.text:00407167                 jg      loc_407260
.text:0040716D                 cmp     eax, 52h ; 'R'
.text:00407170                 jge     short loc_4071C2
.text:00407172                 cmp     eax, 0Fh
.text:00407175                 jz      short loc_407190
.text:00407177                 cmp     eax, 0Fh
.text:0040717A                 jg      short loc_4071F0
.text:0040717C                 cmp     eax, 9
.text:0040717F                 jg      short loc_4071D0
.text:00407181                 cmp     eax, 7
.text:00407184                 jge     short loc_4071C9
.text:00407186                 cmp     eax, 3
.text:00407189                 jg      short loc_4071AA
.text:0040718B                 cmp     eax, 2
.text:0040718E                 jl      short loc_4071A3
.text:00407190
.text:00407190 loc_407190:                             ; CODE XREF: ___get_errno+15↑j
.text:00407190                                         ; ___get_errno+9D↓j ...
.text:00407190                 mov     edx, 2
.text:00407195                 lea     esi, [esi+0]
.text:00407199                 lea     edi, [edi+0]
.text:004071A0
.text:004071A0 loc_4071A0:                             ; CODE XREF: ___get_errno+48↓j
.text:004071A0                                         ; ___get_errno+59↓j ...
.text:004071A0                 mov     eax, edx
.text:004071A2                 retn
.text:004071A3 ; ---------------------------------------------------------------------------
.text:004071A3
.text:004071A3 loc_4071A3:                             ; CODE XREF: ___get_errno+2E↑j
.text:004071A3                                         ; ___get_errno+78↓j ...
.text:004071A3                 mov     edx, 16h
.text:004071A8                 jmp     short loc_4071A0
.text:004071AA ; ---------------------------------------------------------------------------
.text:004071AA
.text:004071AA loc_4071AA:                             ; CODE XREF: ___get_errno+29↑j
.text:004071AA                 cmp     eax, 5
.text:004071AD                 jz      short loc_4071C2
.text:004071AF                 cmp     eax, 5
.text:004071B2                 jg      short loc_4071BB
.text:004071B4                 mov     edx, 18h
.text:004071B9                 jmp     short loc_4071A0
.text:004071BB ; ---------------------------------------------------------------------------
.text:004071BB
.text:004071BB loc_4071BB:                             ; CODE XREF: ___get_errno+52↑j
.text:004071BB                                         ; ___get_errno+180↓j
.text:004071BB                 mov     edx, 9
.text:004071C0                 jmp     short loc_4071A0
.text:004071C2 ; ---------------------------------------------------------------------------
.text:004071C2
.text:004071C2 loc_4071C2:                             ; CODE XREF: ___get_errno+10↑j
.text:004071C2                                         ; ___get_errno+4D↑j ...
.text:004071C2                 mov     edx, 0Dh
.text:004071C7                 jmp     short loc_4071A0
.text:004071C9 ; ---------------------------------------------------------------------------
.text:004071C9
.text:004071C9 loc_4071C9:                             ; CODE XREF: ___get_errno+24↑j
.text:004071C9                                         ; ___get_errno+73↓j ...
.text:004071C9                 mov     edx, 0Ch
.text:004071CE                 jmp     short loc_4071A0
.text:004071D0 ; ---------------------------------------------------------------------------
.text:004071D0
.text:004071D0 loc_4071D0:                             ; CODE XREF: ___get_errno+1F↑j
.text:004071D0                 cmp     eax, 0Dh
.text:004071D3                 jg      short loc_4071C9
.text:004071D5                 cmp     eax, 0Ch
.text:004071D8                 jge     short loc_4071A3
.text:004071DA                 cmp     eax, 0Ah
.text:004071DD                 mov     edx, 7
.text:004071E2                 jz      short loc_4071A0
.text:004071E4                 cmp     eax, 0Bh
.text:004071E7                 jnz     short loc_4071A3
.text:004071E9
.text:004071E9 loc_4071E9:                             ; CODE XREF: ___get_errno+21A↓j
.text:004071E9                 mov     edx, 8
.text:004071EE                 jmp     short loc_4071A0
.text:004071F0 ; ---------------------------------------------------------------------------
.text:004071F0
.text:004071F0 loc_4071F0:                             ; CODE XREF: ___get_errno+1A↑j
.text:004071F0                 cmp     eax, 22h ; '"'
.text:004071F3                 jg      short loc_407224
.text:004071F5                 cmp     eax, 16h
.text:004071F8                 jge     short loc_4071C2
.text:004071FA                 cmp     eax, 12h
.text:004071FD                 jz      short loc_407190
.text:004071FF                 cmp     eax, 12h
.text:00407202                 jg      short loc_407215
.text:00407204                 cmp     eax, 10h
.text:00407207                 jz      short loc_4071C2
.text:00407209                 mov     edx, 12h
.text:0040720E                 cmp     eax, 11h
.text:00407211
.text:00407211 loc_407211:                             ; CODE XREF: ___get_errno+172↓j
.text:00407211                                         ; ___get_errno+24C↓j ...
.text:00407211                 jnz     short loc_4071A3
.text:00407213                 jmp     short loc_4071A0
.text:00407215 ; ---------------------------------------------------------------------------
.text:00407215
.text:00407215 loc_407215:                             ; CODE XREF: ___get_errno+A2↑j
.text:00407215                 cmp     eax, 14h
.text:00407218                 jle     short loc_4071C2
.text:0040721A
.text:0040721A loc_40721A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040721A                 mov     edx, 10h
.text:0040721F                 jmp     loc_4071A0
.text:00407224 ; ---------------------------------------------------------------------------
.text:00407224
.text:00407224 loc_407224:                             ; CODE XREF: ___get_errno+93↑j
.text:00407224                 cmp     eax, 41h ; 'A'
.text:00407227                 jz      short loc_4071C2
.text:00407229                 cmp     eax, 41h ; 'A'
.text:0040722C                 jg      short loc_407241
.text:0040722E                 cmp     eax, 24h ; '$'
.text:00407231                 jz      short loc_4071C2
.text:00407233                 cmp     eax, 35h ; '5'
.text:00407236                 jnz     loc_4071A3
.text:0040723C                 jmp     loc_407190
.text:00407241 ; ---------------------------------------------------------------------------
.text:00407241
.text:00407241 loc_407241:                             ; CODE XREF: ___get_errno+CC↑j
.text:00407241                 cmp     eax, 43h ; 'C'
.text:00407244                 jz      loc_407190
.text:0040724A                 cmp     eax, 50h ; 'P'
.text:0040724D                 jnz     loc_4071A3
.text:00407253
.text:00407253 loc_407253:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00407253                 mov     edx, 11h
.text:00407258                 jmp     loc_4071A0
.text:00407258 ; ---------------------------------------------------------------------------
.text:0040725D                 align 10h
.text:00407260
.text:00407260 loc_407260:                             ; CODE XREF: ___get_errno+7↑j
.text:00407260                 cmp     eax, 0A1h ; '¡'
.text:00407265                 jz      loc_407190
.text:0040726B                 cmp     eax, 0A1h ; '¡'
.text:00407270                 jg      loc_407320
.text:00407276                 cmp     eax, 81h
.text:0040727B                 jg      short loc_4072E5
.text:0040727D                 cmp     eax, 80h ; '€'
.text:00407282                 mov     edx, 0Ah
.text:00407287                 jge     loc_4071A0
.text:0040728D                 cmp     eax, 6Ch ; 'l'
.text:00407290                 jz      loc_4071C2
.text:00407296                 cmp     eax, 6Ch ; 'l'
.text:00407299                 jg      short loc_4072B7
.text:0040729B                 cmp     eax, 57h ; 'W'
.text:0040729E                 jz      loc_4071A3
.text:004072A4                 cmp     eax, 59h ; 'Y'
.text:004072A7                 jnz     loc_4071A3
.text:004072AD
.text:004072AD loc_4072AD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:004072AD                                         ; ___get_errno+23C↓j
.text:004072AD                 mov     edx, 0Bh
.text:004072B2                 jmp     loc_4071A0
.text:004072B7 ; ---------------------------------------------------------------------------
.text:004072B7
.text:004072B7 loc_4072B7:                             ; CODE XREF: ___get_errno+139↑j
.text:004072B7                 cmp     eax, 70h ; 'p'
.text:004072BA                 mov     edx, 1Ch
.text:004072BF                 jz      loc_4071A0
.text:004072C5                 cmp     eax, 70h ; 'p'
.text:004072C8                 jg      short loc_4072D7
.text:004072CA                 mov     edx, 20h ; ' '
.text:004072CF                 cmp     eax, 6Dh ; 'm'
.text:004072D2                 jmp     loc_407211
.text:004072D7 ; ---------------------------------------------------------------------------
.text:004072D7
.text:004072D7 loc_4072D7:                             ; CODE XREF: ___get_errno+168↑j
.text:004072D7                 cmp     eax, 72h ; 'r'
.text:004072DA
.text:004072DA loc_4072DA:                             ; CODE XREF: ___get_errno+19C↓j
.text:004072DA                 jnz     loc_4071A3
.text:004072E0                 jmp     loc_4071BB
.text:004072E5 ; ---------------------------------------------------------------------------
.text:004072E5
.text:004072E5 loc_4072E5:                             ; CODE XREF: ___get_errno+11B↑j
.text:004072E5                 cmp     eax, 84h ; '„'
.text:004072EA                 jz      loc_4071C2
.text:004072F0                 cmp     eax, 84h ; '„'
.text:004072F5                 jg      short loc_4072FE
.text:004072F7                 cmp     eax, 82h ; '‚'
.text:004072FC                 jmp     short loc_4072DA
.text:004072FE ; ---------------------------------------------------------------------------
.text:004072FE
.text:004072FE loc_4072FE:                             ; CODE XREF: ___get_errno+195↑j
.text:004072FE                 cmp     eax, 91h ; '‘'
.text:00407303                 mov     edx, 29h ; ')'
.text:00407308                 jz      loc_4071A0
.text:0040730E                 cmp     eax, 9Eh ; 'ž'
.text:00407313
.text:00407313 loc_407313:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00407313                 jnz     loc_4071A3
.text:00407319                 jmp     loc_4071C2
.text:00407319 ; ---------------------------------------------------------------------------
.text:0040731E                 align 10h
.text:00407320
.text:00407320 loc_407320:                             ; CODE XREF: ___get_errno+110↑j
.text:00407320                 cmp     eax, 0CEh ; 'Î'
.text:00407325                 jz      loc_407190
.text:0040732B                 cmp     eax, 0CEh ; 'Î'
.text:00407330                 jg      short loc_407380
.text:00407332                 cmp     eax, 0AAh ; 'ª'
.text:00407337                 jz      loc_40721A
.text:0040733D                 cmp     eax, 0AAh ; 'ª'
.text:00407342                 jg      short loc_407356
.text:00407344                 cmp     eax, 0A4h ; '¤'
.text:00407349                 jz      loc_4072AD
.text:0040734F                 cmp     eax, 0A7h ; '§'
.text:00407354                 jmp     short loc_407313
.text:00407356 ; ---------------------------------------------------------------------------
.text:00407356
.text:00407356 loc_407356:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00407356                 cmp     eax, 0B7h ; '·'
.text:0040735B                 jz      loc_407253
.text:00407361                 cmp     eax, 0B7h ; '·'
.text:00407366                 jl      loc_4071A3
.text:0040736C                 sub     eax, 0BCh ; '¼'
.text:00407371                 cmp     eax, 0Eh
.text:00407374                 ja      loc_4071A3
.text:0040737A                 jmp     loc_4071E9
.text:0040737A ; ---------------------------------------------------------------------------
.text:0040737F                 align 10h
.text:00407380
.text:00407380 loc_407380:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00407380                 cmp     eax, 46Bh
.text:00407385                 mov     edx, 24h ; '$'
.text:0040738A                 jz      loc_4071A0
.text:00407390                 cmp     eax, 46Bh
.text:00407395                 jg      short loc_4073B1
.text:00407397                 cmp     eax, 0D7h ; '×'
.text:0040739C                 jz      loc_4072AD
.text:004073A2                 mov     edx, 5
.text:004073A7                 cmp     eax, 45Dh
.text:004073AC                 jmp     loc_407211
.text:004073B1 ; ---------------------------------------------------------------------------
.text:004073B1
.text:004073B1 loc_4073B1:                             ; CODE XREF: ___get_errno+235↑j
.text:004073B1                 cmp     eax, 4D5h
.text:004073B6                 mov     edx, 4
.text:004073BB                 jz      loc_4071A0
.text:004073C1                 cmp     eax, 4D5h
.text:004073C6                 jg      short loc_4073D7
.text:004073C8                 mov     edx, 13h
.text:004073CD                 cmp     eax, 4B0h
.text:004073D2                 jmp     loc_407211
.text:004073D7 ; ---------------------------------------------------------------------------
.text:004073D7
.text:004073D7 loc_4073D7:                             ; CODE XREF: ___get_errno+266↑j
.text:004073D7                 cmp     eax, 718h
.text:004073DC                 jnz     loc_4071A3
.text:004073E2                 jmp     loc_4071C9
.text:004073E2 ___get_errno    endp
.text:004073E2
.text:004073E2 ; ---------------------------------------------------------------------------
.text:004073E7                 align 10h
.text:004073F0
.text:004073F0 ; =============== S U B R O U T I N E =======================================
.text:004073F0
.text:004073F0
.text:004073F0 sub_4073F0      proc near               ; CODE XREF: sub_406E00+CB↑p
.text:004073F0                                         ; DATA XREF: sub_406D50+7C↑o
.text:004073F0
.text:004073F0 var_C           = dword ptr -0Ch
.text:004073F0
.text:004073F0                 sub     esp, 0Ch
.text:004073F3                 call    GetLastError
.text:004073F8                 mov     [esp+0Ch+var_C], eax
.text:004073FB                 call    ___get_errno
.text:00407400                 add     esp, 0Ch
.text:00407403                 retn
.text:00407403 sub_4073F0      endp
.text:00407403
.text:00407403 ; ---------------------------------------------------------------------------
.text:00407404                 align 10h
.text:00407410
.text:00407410 ; =============== S U B R O U T I N E =======================================
.text:00407410
.text:00407410 ; Attributes: thunk
.text:00407410
.text:00407410 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00407410 mbrtowc         proc near               ; CODE XREF: sub_4031F0+757↑p
.text:00407410
.text:00407410 DstCh           = dword ptr  4
.text:00407410 SrcCh           = dword ptr  8
.text:00407410 SizeInBytes     = dword ptr  0Ch
.text:00407410 State           = dword ptr  10h
.text:00407410
.text:00407410                 jmp     ds:__imp_mbrtowc
.text:00407410 mbrtowc         endp
.text:00407410
.text:00407410 ; ---------------------------------------------------------------------------
.text:00407416                 align 10h
.text:00407420
.text:00407420 ; =============== S U B R O U T I N E =======================================
.text:00407420
.text:00407420 ; Attributes: bp-based frame
.text:00407420
.text:00407420 sub_407420      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00407420                 push    ebp
.text:00407421                 mov     ecx, offset dword_409000
.text:00407426                 cmp     ecx, offset dword_409000
.text:0040742C                 mov     ebp, esp
.text:0040742E                 jnb     short loc_407446
.text:00407430
.text:00407430 loc_407430:                             ; CODE XREF: sub_407420+24↓j
.text:00407430                 mov     edx, [ecx+4]
.text:00407433                 mov     eax, [ecx]
.text:00407435                 add     ecx, 8
.text:00407438                 add     [edx+400000h], eax
.text:0040743E                 cmp     ecx, offset dword_409000
.text:00407444                 jb      short loc_407430
.text:00407446
.text:00407446 loc_407446:                             ; CODE XREF: sub_407420+E↑j
.text:00407446                 pop     ebp
.text:00407447                 retn
.text:00407447 sub_407420      endp
.text:00407447
.text:00407447 ; ---------------------------------------------------------------------------
.text:00407448                 align 10h
.text:00407450
.text:00407450 ; =============== S U B R O U T I N E =======================================
.text:00407450
.text:00407450 ; Attributes: bp-based frame
.text:00407450
.text:00407450 sub_407450      proc near               ; CODE XREF: sub_401080+16↑p
.text:00407450                                         ; TopLevelExceptionFilter+D7↑p
.text:00407450                 push    ebp
.text:00407451                 mov     ebp, esp
.text:00407453                 fninit
.text:00407455                 pop     ebp
.text:00407456                 retn
.text:00407456 sub_407450      endp
.text:00407456
.text:00407456 ; ---------------------------------------------------------------------------
.text:00407457                 align 10h
.text:00407460
.text:00407460 ; =============== S U B R O U T I N E =======================================
.text:00407460
.text:00407460 ; Attributes: bp-based frame
.text:00407460
.text:00407460 ; void __cdecl sub_407460()
.text:00407460 sub_407460      proc near               ; DATA XREF: .text:loc_4074A9↓o
.text:00407460                                         ; sub_4074F0:loc_40751E↓o
.text:00407460                 push    ebp
.text:00407461                 mov     ebp, esp
.text:00407463                 sub     esp, 8
.text:00407466                 mov     eax, off_4080D4
.text:0040746B                 mov     edx, [eax]
.text:0040746D                 test    edx, edx
.text:0040746F                 jnz     short loc_407475
.text:00407471
.text:00407471 loc_407471:                             ; CODE XREF: sub_407460+2C↓j
.text:00407471                 mov     esp, ebp
.text:00407473                 pop     ebp
.text:00407474                 retn
.text:00407475 ; ---------------------------------------------------------------------------
.text:00407475
.text:00407475 loc_407475:                             ; CODE XREF: sub_407460+F↑j
.text:00407475                                         ; sub_407460+2A↓j
.text:00407475                 call    dword ptr [eax]
.text:00407477                 mov     edx, off_4080D4
.text:0040747D                 mov     ecx, [edx+4]
.text:00407480                 lea     eax, [edx+4]
.text:00407483                 mov     off_4080D4, eax
.text:00407488                 test    ecx, ecx
.text:0040748A                 jnz     short loc_407475
.text:0040748C                 jmp     short loc_407471
.text:0040748C sub_407460      endp
.text:0040748C
.text:0040748C ; ---------------------------------------------------------------------------
.text:0040748E                 align 10h
.text:00407490                 push    ebp
.text:00407491                 mov     ebp, esp
.text:00407493                 sub     esp, 8
.text:00407496                 mov     [ebp-4], ebx
.text:00407499                 mov     eax, ds:dword_407A70
.text:0040749E                 cmp     eax, 0FFFFFFFFh
.text:004074A1                 jz      short loc_4074CC
.text:004074A3
.text:004074A3 loc_4074A3:                             ; CODE XREF: .text:004074D6↓j
.text:004074A3                                         ; .text:004074E9↓j
.text:004074A3                 test    eax, eax
.text:004074A5                 mov     ebx, eax
.text:004074A7                 jnz     short loc_4074C0
.text:004074A9
.text:004074A9 loc_4074A9:                             ; CODE XREF: .text:004074CA↓j
.text:004074A9                 mov     dword ptr [esp], offset sub_407460
.text:004074B0                 call    sub_401040
.text:004074B5                 mov     ebx, [ebp-4]
.text:004074B8                 mov     esp, ebp
.text:004074BA                 pop     ebp
.text:004074BB                 retn
.text:004074BB ; ---------------------------------------------------------------------------
.text:004074BC                 align 10h
.text:004074C0
.text:004074C0 loc_4074C0:                             ; CODE XREF: .text:004074A7↑j
.text:004074C0                                         ; .text:004074C8↓j
.text:004074C0                 call    ds:dword_407A70[ebx*4]
.text:004074C7                 dec     ebx
.text:004074C8                 jnz     short loc_4074C0
.text:004074CA                 jmp     short loc_4074A9
.text:004074CC ; ---------------------------------------------------------------------------
.text:004074CC
.text:004074CC loc_4074CC:                             ; CODE XREF: .text:004074A1↑j
.text:004074CC                 mov     ecx, ds:dword_407A74
.text:004074D2                 xor     eax, eax
.text:004074D4                 test    ecx, ecx
.text:004074D6                 jz      short loc_4074A3
.text:004074D8                 mov     edx, offset dword_407A70
.text:004074DD                 lea     esi, [esi+0]
.text:004074E0
.text:004074E0 loc_4074E0:                             ; CODE XREF: .text:004074E7↓j
.text:004074E0                 inc     eax
.text:004074E1                 mov     ecx, [edx+eax*4+4]
.text:004074E5                 test    ecx, ecx
.text:004074E7                 jnz     short loc_4074E0
.text:004074E9                 jmp     short loc_4074A3
.text:004074E9 ; ---------------------------------------------------------------------------
.text:004074EB                 align 10h
.text:004074F0
.text:004074F0 ; =============== S U B R O U T I N E =======================================
.text:004074F0
.text:004074F0 ; Attributes: bp-based frame
.text:004074F0
.text:004074F0 sub_4074F0      proc near               ; CODE XREF: sub_401360+18↑p
.text:004074F0
.text:004074F0 var_8           = dword ptr -8
.text:004074F0 var_4           = dword ptr -4
.text:004074F0
.text:004074F0                 push    ebp
.text:004074F1                 mov     ebp, esp
.text:004074F3                 sub     esp, 8
.text:004074F6                 mov     [ebp+var_4], ebx
.text:004074F9                 mov     edx, dword_4080D0
.text:004074FF                 test    edx, edx
.text:00407501                 jnz     short loc_40752A
.text:00407503                 mov     eax, ds:dword_407A70
.text:00407508                 mov     edx, 1
.text:0040750D                 mov     dword_4080D0, edx
.text:00407513                 cmp     eax, 0FFFFFFFFh
.text:00407516                 jz      short loc_40753D
.text:00407518
.text:00407518 loc_407518:                             ; CODE XREF: sub_4074F0+57↓j
.text:00407518                                         ; sub_4074F0+69↓j
.text:00407518                 test    eax, eax
.text:0040751A                 mov     ebx, eax
.text:0040751C                 jnz     short loc_407531
.text:0040751E
.text:0040751E loc_40751E:                             ; CODE XREF: sub_4074F0+4B↓j
.text:0040751E                 mov     [esp+8+var_8], offset sub_407460 ; void (__cdecl *)()
.text:00407525                 call    sub_401040
.text:0040752A
.text:0040752A loc_40752A:                             ; CODE XREF: sub_4074F0+11↑j
.text:0040752A                 mov     ebx, [ebp+var_4]
.text:0040752D                 mov     esp, ebp
.text:0040752F                 pop     ebp
.text:00407530                 retn
.text:00407531 ; ---------------------------------------------------------------------------
.text:00407531
.text:00407531 loc_407531:                             ; CODE XREF: sub_4074F0+2C↑j
.text:00407531                                         ; sub_4074F0+49↓j
.text:00407531                 call    ds:dword_407A70[ebx*4]
.text:00407538                 dec     ebx
.text:00407539                 jnz     short loc_407531
.text:0040753B                 jmp     short loc_40751E
.text:0040753D ; ---------------------------------------------------------------------------
.text:0040753D
.text:0040753D loc_40753D:                             ; CODE XREF: sub_4074F0+26↑j
.text:0040753D                 mov     ecx, ds:dword_407A74
.text:00407543                 xor     eax, eax
.text:00407545                 test    ecx, ecx
.text:00407547                 jz      short loc_407518
.text:00407549                 mov     edx, offset dword_407A70
.text:0040754E                 mov     esi, esi
.text:00407550
.text:00407550 loc_407550:                             ; CODE XREF: sub_4074F0+67↓j
.text:00407550                 inc     eax
.text:00407551                 mov     ebx, [edx+eax*4+4]
.text:00407555                 test    ebx, ebx
.text:00407557                 jnz     short loc_407550
.text:00407559                 jmp     short loc_407518
.text:00407559 sub_4074F0      endp
.text:00407559
.text:00407559 ; ---------------------------------------------------------------------------
.text:0040755B                 align 10h
.text:00407560
.text:00407560 ; =============== S U B R O U T I N E =======================================
.text:00407560
.text:00407560 ; Attributes: info_from_lumina
.text:00407560
.text:00407560 ; void *__cdecl _alloca(size_t Size)
.text:00407560 __alloca        proc near               ; CODE XREF: sub_401360+13↑p
.text:00407560                 push    ecx
.text:00407561                 mov     ecx, esp
.text:00407563                 add     ecx, 8
.text:00407566
.text:00407566 loc_407566:                             ; CODE XREF: __alloca+1B↓j
.text:00407566                 cmp     eax, 1000h
.text:0040756B                 jb      short loc_40757D
.text:0040756D                 sub     ecx, 1000h
.text:00407573                 or      dword ptr [ecx], 0
.text:00407576                 sub     eax, 1000h
.text:0040757B                 jmp     short loc_407566
.text:0040757D ; ---------------------------------------------------------------------------
.text:0040757D
.text:0040757D loc_40757D:                             ; CODE XREF: __alloca+B↑j
.text:0040757D                 sub     ecx, eax
.text:0040757F                 or      dword ptr [ecx], 0
.text:00407582                 mov     eax, esp
.text:00407584                 mov     esp, ecx
.text:00407586                 mov     ecx, [eax]
.text:00407588                 mov     eax, [eax+4]
.text:0040758B                 jmp     eax
.text:0040758B __alloca        endp
.text:0040758B
.text:0040758B ; ---------------------------------------------------------------------------
.text:0040758D                 align 10h
.text:00407590
.text:00407590 ; =============== S U B R O U T I N E =======================================
.text:00407590
.text:00407590 ; Attributes: bp-based frame
.text:00407590
.text:00407590 sub_407590      proc near               ; CODE XREF: sub_406610+22F↑p
.text:00407590                                         ; sub_406940+AC↑p
.text:00407590
.text:00407590 var_3C          = dword ptr -3Ch
.text:00407590 var_34          = dword ptr -34h
.text:00407590 var_30          = dword ptr -30h
.text:00407590 var_2C          = dword ptr -2Ch
.text:00407590 var_28          = dword ptr -28h
.text:00407590 var_24          = dword ptr -24h
.text:00407590 var_1C          = dword ptr -1Ch
.text:00407590 var_18          = dword ptr -18h
.text:00407590 var_14          = dword ptr -14h
.text:00407590 arg_0           = dword ptr  8
.text:00407590 arg_4           = dword ptr  0Ch
.text:00407590 arg_8           = dword ptr  10h
.text:00407590 arg_C           = dword ptr  14h
.text:00407590
.text:00407590                 push    ebp
.text:00407591                 mov     ebp, esp
.text:00407593                 push    edi
.text:00407594                 push    esi
.text:00407595                 push    ebx
.text:00407596                 sub     esp, 34h
.text:00407599                 mov     ebx, [ebp+arg_4]
.text:0040759C                 mov     [ebp+var_28], 0
.text:004075A3                 mov     ecx, [ebp+arg_0]
.text:004075A6                 mov     eax, [ebp+arg_8]
.text:004075A9                 mov     [ebp+var_24], 0
.text:004075B0                 test    ebx, ebx
.text:004075B2                 mov     edx, [ebp+arg_C]
.text:004075B5                 mov     [ebp+var_1C], 0
.text:004075BC                 js      loc_407734
.text:004075C2
.text:004075C2 loc_4075C2:                             ; CODE XREF: sub_407590+1B2↓j
.text:004075C2                 test    edx, edx
.text:004075C4                 js      loc_407728
.text:004075CA
.text:004075CA loc_4075CA:                             ; CODE XREF: sub_407590+19F↓j
.text:004075CA                 mov     [ebp+var_2C], edx
.text:004075CD                 test    edx, edx
.text:004075CF                 mov     esi, eax
.text:004075D1                 mov     [ebp+var_30], ecx
.text:004075D4                 mov     edi, ebx
.text:004075D6                 jnz     short loc_407641
.text:004075D8                 cmp     eax, ebx
.text:004075DA                 jbe     short loc_407624
.text:004075DC                 mov     eax, ecx
.text:004075DE                 mov     edx, ebx
.text:004075E0                 div     esi
.text:004075E2
.text:004075E2 loc_4075E2:                             ; CODE XREF: sub_407590+AF↓j
.text:004075E2                 mov     [ebp+var_30], edx
.text:004075E5                 lea     ecx, [ebp+var_18]
.text:004075E8                 test    ecx, ecx
.text:004075EA                 jz      short loc_407605
.text:004075EC                 mov     [ebp+var_24], 0
.text:004075F3
.text:004075F3 loc_4075F3:                             ; CODE XREF: sub_407590+FE↓j
.text:004075F3                 mov     eax, [ebp+var_30]
.text:004075F6                 mov     [ebp+var_28], eax
.text:004075F9                 mov     edx, [ebp+var_28]
.text:004075FC                 mov     ecx, [ebp+var_24]
.text:004075FF                 mov     [ebp+var_18], edx
.text:00407602                 mov     [ebp+var_14], ecx
.text:00407605
.text:00407605 loc_407605:                             ; CODE XREF: sub_407590+5A↑j
.text:00407605                                         ; sub_407590+C8↓j ...
.text:00407605                 mov     eax, [ebp+var_1C]
.text:00407608                 test    eax, eax
.text:0040760A                 jz      short loc_407616
.text:0040760C                 neg     [ebp+var_18]
.text:0040760F                 adc     [ebp+var_14], 0
.text:00407613                 neg     [ebp+var_14]
.text:00407616
.text:00407616 loc_407616:                             ; CODE XREF: sub_407590+7A↑j
.text:00407616                 mov     eax, [ebp+var_18]
.text:00407619                 mov     edx, [ebp+var_14]
.text:0040761C                 add     esp, 34h
.text:0040761F                 pop     ebx
.text:00407620                 pop     esi
.text:00407621                 pop     edi
.text:00407622                 pop     ebp
.text:00407623                 retn
.text:00407624 ; ---------------------------------------------------------------------------
.text:00407624
.text:00407624 loc_407624:                             ; CODE XREF: sub_407590+4A↑j
.text:00407624                 test    eax, eax
.text:00407626                 jnz     short loc_407633
.text:00407628                 mov     eax, 1
.text:0040762D                 xor     edx, edx
.text:0040762F                 div     esi
.text:00407631                 mov     esi, eax
.text:00407633
.text:00407633 loc_407633:                             ; CODE XREF: sub_407590+96↑j
.text:00407633                 mov     eax, edi
.text:00407635                 mov     edx, [ebp+var_2C]
.text:00407638                 div     esi
.text:0040763A                 mov     eax, [ebp+var_30]
.text:0040763D                 div     esi
.text:0040763F                 jmp     short loc_4075E2
.text:00407641 ; ---------------------------------------------------------------------------
.text:00407641
.text:00407641 loc_407641:                             ; CODE XREF: sub_407590+46↑j
.text:00407641                 cmp     [ebp+var_2C], ebx
.text:00407644                 jbe     short loc_407660
.text:00407646                 mov     [ebp+var_28], ecx
.text:00407649
.text:00407649 loc_407649:                             ; CODE XREF: sub_407590+17E↓j
.text:00407649                 mov     [ebp+var_24], edi
.text:0040764C                 mov     eax, [ebp+var_28]
.text:0040764F                 mov     edx, [ebp+var_24]
.text:00407652                 mov     [ebp+var_18], eax
.text:00407655                 mov     [ebp+var_14], edx
.text:00407658                 jmp     short loc_407605
.text:00407658 ; ---------------------------------------------------------------------------
.text:0040765A                 align 10h
.text:00407660
.text:00407660 loc_407660:                             ; CODE XREF: sub_407590+B4↑j
.text:00407660                 bsr     eax, [ebp+var_2C]
.text:00407664                 mov     ebx, eax
.text:00407666                 xor     ebx, 1Fh
.text:00407669                 jnz     short loc_407693
.text:0040766B                 cmp     edi, [ebp+var_2C]
.text:0040766E                 ja      short loc_407675
.text:00407670                 cmp     [ebp+var_30], esi
.text:00407673                 jb      short loc_407680
.text:00407675
.text:00407675 loc_407675:                             ; CODE XREF: sub_407590+DE↑j
.text:00407675                 mov     edx, [ebp+var_30]
.text:00407678                 sub     edx, esi
.text:0040767A                 sbb     edi, [ebp+var_2C]
.text:0040767D                 mov     [ebp+var_30], edx
.text:00407680
.text:00407680 loc_407680:                             ; CODE XREF: sub_407590+E3↑j
.text:00407680                 lea     ecx, [ebp+var_18]
.text:00407683                 test    ecx, ecx
.text:00407685                 jz      loc_407605
.text:0040768B                 mov     [ebp+var_24], edi
.text:0040768E                 jmp     loc_4075F3
.text:00407693 ; ---------------------------------------------------------------------------
.text:00407693
.text:00407693 loc_407693:                             ; CODE XREF: sub_407590+D9↑j
.text:00407693                 mov     edx, [ebp+var_2C]
.text:00407696                 mov     eax, 20h ; ' '
.text:0040769B                 mov     cl, bl
.text:0040769D                 sub     eax, ebx
.text:0040769F                 mov     [ebp+var_34], eax
.text:004076A2                 shl     edx, cl
.text:004076A4                 mov     eax, esi
.text:004076A6                 movzx   ecx, byte ptr [ebp+var_34]
.text:004076AA                 shr     eax, cl
.text:004076AC                 mov     cl, bl
.text:004076AE                 shl     esi, cl
.text:004076B0                 or      edx, eax
.text:004076B2                 mov     eax, [ebp+var_30]
.text:004076B5                 movzx   ecx, byte ptr [ebp+var_34]
.text:004076B9                 mov     [ebp+var_2C], edx
.text:004076BC                 mov     edx, edi
.text:004076BE                 shr     edx, cl
.text:004076C0                 mov     cl, bl
.text:004076C2                 shl     edi, cl
.text:004076C4                 movzx   ecx, byte ptr [ebp+var_34]
.text:004076C8                 shr     eax, cl
.text:004076CA                 or      edi, eax
.text:004076CC                 mov     eax, edi
.text:004076CE                 mov     cl, bl
.text:004076D0                 div     [ebp+var_2C]
.text:004076D3                 shl     [ebp+var_30], cl
.text:004076D6                 mov     edi, edx
.text:004076D8                 mul     esi
.text:004076DA                 mov     [ebp+var_3C], eax
.text:004076DD                 cmp     edx, edi
.text:004076DF                 ja      short loc_40771B
.text:004076E1                 cmp     edx, edi
.text:004076E3                 jz      short loc_407713
.text:004076E5
.text:004076E5 loc_4076E5:                             ; CODE XREF: sub_407590+189↓j
.text:004076E5                                         ; sub_407590+196↓j
.text:004076E5                 lea     eax, [ebp+var_18]
.text:004076E8                 test    eax, eax
.text:004076EA                 jz      loc_407605
.text:004076F0                 movzx   ecx, byte ptr [ebp+var_34]
.text:004076F4                 mov     eax, [ebp+var_30]
.text:004076F7                 sub     eax, [ebp+var_3C]
.text:004076FA                 sbb     edi, edx
.text:004076FC                 mov     [ebp+var_30], eax
.text:004076FF                 mov     edx, edi
.text:00407701                 shl     edx, cl
.text:00407703                 mov     cl, bl
.text:00407705                 shr     eax, cl
.text:00407707                 or      edx, eax
.text:00407709                 mov     [ebp+var_28], edx
.text:0040770C                 shr     edi, cl
.text:0040770E                 jmp     loc_407649
.text:00407713 ; ---------------------------------------------------------------------------
.text:00407713
.text:00407713 loc_407713:                             ; CODE XREF: sub_407590+153↑j
.text:00407713                 mov     eax, [ebp+var_30]
.text:00407716                 cmp     [ebp+var_3C], eax
.text:00407719                 jbe     short loc_4076E5
.text:0040771B
.text:0040771B loc_40771B:                             ; CODE XREF: sub_407590+14F↑j
.text:0040771B                 mov     ecx, [ebp+var_3C]
.text:0040771E                 sub     ecx, esi
.text:00407720                 sbb     edx, [ebp+var_2C]
.text:00407723                 mov     [ebp+var_3C], ecx
.text:00407726                 jmp     short loc_4076E5
.text:00407728 ; ---------------------------------------------------------------------------
.text:00407728
.text:00407728 loc_407728:                             ; CODE XREF: sub_407590+34↑j
.text:00407728                 neg     eax
.text:0040772A                 adc     edx, 0
.text:0040772D                 neg     edx
.text:0040772F                 jmp     loc_4075CA
.text:00407734 ; ---------------------------------------------------------------------------
.text:00407734
.text:00407734 loc_407734:                             ; CODE XREF: sub_407590+2C↑j
.text:00407734                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:0040773B                 neg     ecx
.text:0040773D                 adc     ebx, 0
.text:00407740                 neg     ebx
.text:00407742                 jmp     loc_4075C2
.text:00407742 sub_407590      endp
.text:00407742
.text:00407742 ; ---------------------------------------------------------------------------
.text:00407747                 align 10h
.text:00407750
.text:00407750 ; =============== S U B R O U T I N E =======================================
.text:00407750
.text:00407750 ; Attributes: thunk
.text:00407750
.text:00407750 ; int __cdecl dup(int FileHandle)
.text:00407750 _dup            proc near               ; CODE XREF: sub_406F20+57↑p
.text:00407750
.text:00407750 FileHandle      = dword ptr  4
.text:00407750
.text:00407750                 jmp     ds:__imp__dup
.text:00407750 _dup            endp
.text:00407750
.text:00407750 ; ---------------------------------------------------------------------------
.text:00407756                 align 10h
.text:00407760                 jmp     ds:__set_app_type
.text:00407760 ; ---------------------------------------------------------------------------
.text:00407766                 align 10h
.text:00407770
.text:00407770 ; =============== S U B R O U T I N E =======================================
.text:00407770
.text:00407770 ; Attributes: thunk
.text:00407770
.text:00407770 ; void __cdecl cexit()
.text:00407770 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00407770                 jmp     ds:__imp__cexit
.text:00407770 _cexit          endp
.text:00407770
.text:00407770 ; ---------------------------------------------------------------------------
.text:00407776                 align 10h
.text:00407780
.text:00407780 ; =============== S U B R O U T I N E =======================================
.text:00407780
.text:00407780 ; Attributes: thunk
.text:00407780
.text:00407780 ; char ***__cdecl _p__environ()
.text:00407780 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00407780                 jmp     ds:__imp___p__environ
.text:00407780 __p__environ    endp
.text:00407780
.text:00407780 ; ---------------------------------------------------------------------------
.text:00407786                 align 10h
.text:00407790
.text:00407790 ; =============== S U B R O U T I N E =======================================
.text:00407790
.text:00407790 ; Attributes: thunk
.text:00407790
.text:00407790 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00407790 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00407790                                         ; TopLevelExceptionFilter+88↑p ...
.text:00407790
.text:00407790 Signal          = dword ptr  4
.text:00407790 Function        = dword ptr  8
.text:00407790
.text:00407790                 jmp     ds:__imp_signal
.text:00407790 signal          endp
.text:00407790
.text:00407790 ; ---------------------------------------------------------------------------
.text:00407796                 align 10h
.text:004077A0
.text:004077A0 ; =============== S U B R O U T I N E =======================================
.text:004077A0
.text:004077A0 ; Attributes: thunk
.text:004077A0
.text:004077A0 ; int *__cdecl _p__fmode()
.text:004077A0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004077A0                 jmp     ds:__imp___p__fmode
.text:004077A0 __p__fmode      endp
.text:004077A0
.text:004077A0 ; ---------------------------------------------------------------------------
.text:004077A6                 align 10h
.text:004077B0
.text:004077B0 ; =============== S U B R O U T I N E =======================================
.text:004077B0
.text:004077B0 ; Attributes: thunk
.text:004077B0
.text:004077B0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004077B0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004077B0                                         ; sub_401080+90↑p ...
.text:004077B0
.text:004077B0 FileHandle      = dword ptr  4
.text:004077B0 Mode            = dword ptr  8
.text:004077B0
.text:004077B0                 jmp     ds:__imp__setmode
.text:004077B0 _setmode        endp
.text:004077B0
.text:004077B0 ; ---------------------------------------------------------------------------
.text:004077B6                 align 10h
.text:004077C0
.text:004077C0 ; =============== S U B R O U T I N E =======================================
.text:004077C0
.text:004077C0 ; Attributes: thunk
.text:004077C0
.text:004077C0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004077C0                 jmp     ds:__imp___getmainargs
.text:004077C0 __getmainargs   endp
.text:004077C0
.text:004077C0 ; ---------------------------------------------------------------------------
.text:004077C6                 align 10h
.text:004077D0
.text:004077D0 ; =============== S U B R O U T I N E =======================================
.text:004077D0
.text:004077D0 ; Attributes: thunk
.text:004077D0
.text:004077D0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004077D0 setlocale       proc near               ; CODE XREF: sub_401360+34↑p
.text:004077D0
.text:004077D0 Category        = dword ptr  4
.text:004077D0 Locale          = dword ptr  8
.text:004077D0
.text:004077D0                 jmp     ds:__imp_setlocale
.text:004077D0 setlocale       endp
.text:004077D0
.text:004077D0 ; ---------------------------------------------------------------------------
.text:004077D6                 align 10h
.text:004077E0
.text:004077E0 ; =============== S U B R O U T I N E =======================================
.text:004077E0
.text:004077E0 ; Attributes: noreturn thunk
.text:004077E0
.text:004077E0 ; void __cdecl __noreturn exit(int Code)
.text:004077E0 exit            proc near               ; CODE XREF: sub_401360:loc_401489↑p
.text:004077E0                                         ; sub_4016F0+3E↑p ...
.text:004077E0
.text:004077E0 Code            = dword ptr  4
.text:004077E0
.text:004077E0                 jmp     ds:__imp_exit
.text:004077E0 exit            endp
.text:004077E0
.text:004077E0 ; ---------------------------------------------------------------------------
.text:004077E6                 align 10h
.text:004077F0
.text:004077F0 ; =============== S U B R O U T I N E =======================================
.text:004077F0
.text:004077F0 ; Attributes: thunk
.text:004077F0
.text:004077F0 ; int printf(const char *const Format, ...)
.text:004077F0 printf          proc near               ; CODE XREF: sub_4016F0+5D↑p
.text:004077F0                                         ; sub_4016F0+82↑p ...
.text:004077F0
.text:004077F0 Format          = dword ptr  4
.text:004077F0
.text:004077F0                 jmp     ds:__imp_printf
.text:004077F0 printf          endp
.text:004077F0
.text:004077F0 ; ---------------------------------------------------------------------------
.text:004077F6                 align 10h
.text:00407800
.text:00407800 ; =============== S U B R O U T I N E =======================================
.text:00407800
.text:00407800 ; Attributes: thunk
.text:00407800
.text:00407800 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00407800 fprintf         proc near               ; CODE XREF: sub_401360+1B3↑p
.text:00407800                                         ; sub_4016F0+36↑p ...
.text:00407800
.text:00407800 Stream          = dword ptr  4
.text:00407800 Format          = dword ptr  8
.text:00407800
.text:00407800                 jmp     ds:__imp_fprintf
.text:00407800 fprintf         endp
.text:00407800
.text:00407800 ; ---------------------------------------------------------------------------
.text:00407806                 align 10h
.text:00407810
.text:00407810 ; =============== S U B R O U T I N E =======================================
.text:00407810
.text:00407810 ; Attributes: thunk
.text:00407810
.text:00407810 ; int *__cdecl errno()
.text:00407810 _errno          proc near               ; CODE XREF: sub_401360:loc_401490↑p
.text:00407810                                         ; sub_401360:loc_40155C↑p ...
.text:00407810                 jmp     ds:__imp__errno
.text:00407810 _errno          endp
.text:00407810
.text:00407810 ; ---------------------------------------------------------------------------
.text:00407816                 align 10h
.text:00407820
.text:00407820 ; =============== S U B R O U T I N E =======================================
.text:00407820
.text:00407820 ; Attributes: thunk
.text:00407820
.text:00407820 ; void __cdecl free(void *Block)
.text:00407820 free            proc near               ; CODE XREF: sub_401360+11D↑p
.text:00407820                                         ; sub_4017E0+DF↑j ...
.text:00407820
.text:00407820 Block           = dword ptr  4
.text:00407820
.text:00407820                 jmp     ds:__imp_free
.text:00407820 free            endp
.text:00407820
.text:00407820 ; ---------------------------------------------------------------------------
.text:00407826                 align 10h
.text:00407830
.text:00407830 ; =============== S U B R O U T I N E =======================================
.text:00407830
.text:00407830 ; Attributes: thunk
.text:00407830
.text:00407830 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00407830 fputs           proc near               ; CODE XREF: sub_4016F0+A4↑p
.text:00407830                                         ; sub_4016F0+C6↑p ...
.text:00407830
.text:00407830 Buffer          = dword ptr  4
.text:00407830 Stream          = dword ptr  8
.text:00407830
.text:00407830                 jmp     ds:__imp_fputs
.text:00407830 fputs           endp
.text:00407830
.text:00407830 ; ---------------------------------------------------------------------------
.text:00407836                 align 10h
.text:00407840
.text:00407840 ; =============== S U B R O U T I N E =======================================
.text:00407840
.text:00407840 ; Attributes: thunk
.text:00407840
.text:00407840 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00407840 strcmp          proc near               ; CODE XREF: .text:00401924↑j
.text:00407840                                         ; sub_404BB4+180↑p ...
.text:00407840
.text:00407840 Str1            = dword ptr  4
.text:00407840 Str2            = dword ptr  8
.text:00407840
.text:00407840                 jmp     ds:__imp_strcmp
.text:00407840 strcmp          endp
.text:00407840
.text:00407840 ; ---------------------------------------------------------------------------
.text:00407846                 align 10h
.text:00407850
.text:00407850 ; =============== S U B R O U T I N E =======================================
.text:00407850
.text:00407850 ; Attributes: thunk
.text:00407850
.text:00407850 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00407850 _flsbuf         proc near               ; CODE XREF: sub_4017E0+10B↑p
.text:00407850                                         ; sub_4047F0+128↑p ...
.text:00407850
.text:00407850 File            = dword ptr  8
.text:00407850
.text:00407850                 jmp     ds:__imp__flsbuf
.text:00407850 _flsbuf         endp
.text:00407850
.text:00407850 ; ---------------------------------------------------------------------------
.text:00407856                 align 10h
.text:00407860
.text:00407860 ; =============== S U B R O U T I N E =======================================
.text:00407860
.text:00407860 ; Attributes: thunk
.text:00407860
.text:00407860 ; size_t __cdecl strlen(const char *Str)
.text:00407860 strlen          proc near               ; CODE XREF: sub_401940+37↑p
.text:00407860                                         ; sub_401CF0+2A9↑p ...
.text:00407860
.text:00407860 Str             = dword ptr  4
.text:00407860
.text:00407860                 jmp     ds:__imp_strlen
.text:00407860 strlen          endp
.text:00407860
.text:00407860 ; ---------------------------------------------------------------------------
.text:00407866                 align 10h
.text:00407870
.text:00407870 ; =============== S U B R O U T I N E =======================================
.text:00407870
.text:00407870 ; Attributes: thunk
.text:00407870
.text:00407870 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00407870 strncpy         proc near               ; CODE XREF: sub_401940+2B↑p
.text:00407870
.text:00407870 Destination     = dword ptr  4
.text:00407870 Source          = dword ptr  8
.text:00407870 Count           = dword ptr  0Ch
.text:00407870
.text:00407870                 jmp     ds:__imp_strncpy
.text:00407870 strncpy         endp
.text:00407870
.text:00407870 ; ---------------------------------------------------------------------------
.text:00407876                 align 10h
.text:00407880
.text:00407880 ; =============== S U B R O U T I N E =======================================
.text:00407880
.text:00407880 ; Attributes: thunk
.text:00407880
.text:00407880 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00407880 strncmp         proc near               ; CODE XREF: sub_401CF0+23F↑p
.text:00407880                                         ; sub_401CF0+699↑p ...
.text:00407880
.text:00407880 Str1            = dword ptr  4
.text:00407880 Str2            = dword ptr  8
.text:00407880 MaxCount        = dword ptr  0Ch
.text:00407880
.text:00407880                 jmp     ds:__imp_strncmp
.text:00407880 strncmp         endp
.text:00407880
.text:00407880 ; ---------------------------------------------------------------------------
.text:00407886                 align 10h
.text:00407890
.text:00407890 ; =============== S U B R O U T I N E =======================================
.text:00407890
.text:00407890 ; Attributes: thunk
.text:00407890
.text:00407890 ; char *__cdecl getenv(const char *VarName)
.text:00407890 getenv          proc near               ; CODE XREF: sub_401CF0+B57↑p
.text:00407890
.text:00407890 VarName         = dword ptr  4
.text:00407890
.text:00407890                 jmp     ds:__imp_getenv
.text:00407890 getenv          endp
.text:00407890
.text:00407890 ; ---------------------------------------------------------------------------
.text:00407896                 align 10h
.text:004078A0
.text:004078A0 ; =============== S U B R O U T I N E =======================================
.text:004078A0
.text:004078A0 ; Attributes: thunk
.text:004078A0
.text:004078A0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004078A0 strchr          proc near               ; CODE XREF: sub_401CF0+469↑p
.text:004078A0                                         ; sub_401CF0+53A↑p ...
.text:004078A0
.text:004078A0 Str             = dword ptr  4
.text:004078A0 Val             = dword ptr  8
.text:004078A0
.text:004078A0                 jmp     ds:__imp_strchr
.text:004078A0 strchr          endp
.text:004078A0
.text:004078A0 ; ---------------------------------------------------------------------------
.text:004078A6                 align 10h
.text:004078B0
.text:004078B0 ; =============== S U B R O U T I N E =======================================
.text:004078B0
.text:004078B0 ; Attributes: thunk
.text:004078B0
.text:004078B0 ; int __cdecl fclose(FILE *Stream)
.text:004078B0 fclose          proc near               ; CODE XREF: sub_402DB0+27↑p
.text:004078B0
.text:004078B0 Stream          = dword ptr  4
.text:004078B0
.text:004078B0                 jmp     ds:__imp_fclose
.text:004078B0 fclose          endp
.text:004078B0
.text:004078B0 ; ---------------------------------------------------------------------------
.text:004078B6                 align 10h
.text:004078C0
.text:004078C0 ; =============== S U B R O U T I N E =======================================
.text:004078C0
.text:004078C0 ; Attributes: thunk
.text:004078C0
.text:004078C0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004078C0 memcpy          proc near               ; CODE XREF: .text:00403078↑p
.text:004078C0                                         ; .text:004030C1↑p ...
.text:004078C0
.text:004078C0 Src             = dword ptr  8
.text:004078C0 Size            = dword ptr  0Ch
.text:004078C0
.text:004078C0                 jmp     ds:__imp_memcpy
.text:004078C0 memcpy          endp
.text:004078C0
.text:004078C0 ; ---------------------------------------------------------------------------
.text:004078C6                 align 10h
.text:004078D0
.text:004078D0 ; =============== S U B R O U T I N E =======================================
.text:004078D0
.text:004078D0 ; Attributes: thunk
.text:004078D0
.text:004078D0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004078D0 memset          proc near               ; CODE XREF: .text:00402FF6↑p
.text:004078D0
.text:004078D0 Val             = dword ptr  8
.text:004078D0 Size            = dword ptr  0Ch
.text:004078D0
.text:004078D0                 jmp     ds:__imp_memset
.text:004078D0 memset          endp
.text:004078D0
.text:004078D0 ; ---------------------------------------------------------------------------
.text:004078D6                 align 10h
.text:004078E0
.text:004078E0 ; =============== S U B R O U T I N E =======================================
.text:004078E0
.text:004078E0 ; Attributes: thunk
.text:004078E0
.text:004078E0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:004078E0 calloc          proc near               ; CODE XREF: .text:00403033↑p
.text:004078E0
.text:004078E0 Count           = dword ptr  4
.text:004078E0 Size            = dword ptr  8
.text:004078E0
.text:004078E0                 jmp     ds:__imp_calloc
.text:004078E0 calloc          endp
.text:004078E0
.text:004078E0 ; ---------------------------------------------------------------------------
.text:004078E6                 align 10h
.text:004078F0
.text:004078F0 ; =============== S U B R O U T I N E =======================================
.text:004078F0
.text:004078F0 ; Attributes: thunk
.text:004078F0
.text:004078F0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004078F0 realloc         proc near               ; CODE XREF: sub_402F00+30↑p
.text:004078F0                                         ; sub_402F60+16↑p ...
.text:004078F0
.text:004078F0 Block           = dword ptr  4
.text:004078F0 Size            = dword ptr  8
.text:004078F0
.text:004078F0                 jmp     ds:__imp_realloc
.text:004078F0 realloc         endp
.text:004078F0
.text:004078F0 ; ---------------------------------------------------------------------------
.text:004078F6                 align 10h
.text:00407900
.text:00407900 ; =============== S U B R O U T I N E =======================================
.text:00407900
.text:00407900 ; Attributes: thunk
.text:00407900
.text:00407900 ; void *__cdecl malloc(size_t Size)
.text:00407900 malloc          proc near               ; CODE XREF: sub_402E90+24↑p
.text:00407900                                         ; sub_402ED0+E↑p ...
.text:00407900
.text:00407900 Size            = dword ptr  4
.text:00407900
.text:00407900                 jmp     ds:__imp_malloc
.text:00407900 malloc          endp
.text:00407900
.text:00407900 ; ---------------------------------------------------------------------------
.text:00407906                 align 10h
.text:00407910
.text:00407910 ; =============== S U B R O U T I N E =======================================
.text:00407910
.text:00407910 ; Attributes: noreturn thunk
.text:00407910
.text:00407910 ; void __cdecl __noreturn abort()
.text:00407910 abort           proc near               ; CODE XREF: sub_404330:loc_4044EA↑p
.text:00407910                                         ; sub_4047F0:loc_40488C↑p ...
.text:00407910                 jmp     ds:__imp_abort
.text:00407910 abort           endp
.text:00407910
.text:00407910 ; ---------------------------------------------------------------------------
.text:00407916                 align 10h
.text:00407920
.text:00407920 ; =============== S U B R O U T I N E =======================================
.text:00407920
.text:00407920 ; Attributes: thunk
.text:00407920
.text:00407920 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00407920 iswctype        proc near               ; CODE XREF: sub_4031F0+78B↑p
.text:00407920
.text:00407920 C               = word ptr  4
.text:00407920 Type            = word ptr  8
.text:00407920
.text:00407920                 jmp     ds:__imp_iswctype
.text:00407920 iswctype        endp
.text:00407920
.text:00407920 ; ---------------------------------------------------------------------------
.text:00407926                 align 10h
.text:00407930
.text:00407930 ; =============== S U B R O U T I N E =======================================
.text:00407930
.text:00407930 ; Attributes: thunk
.text:00407930
.text:00407930 ; int __cdecl isctype(int C, int Type)
.text:00407930 _isctype        proc near               ; CODE XREF: sub_4031F0+610↑p
.text:00407930
.text:00407930 C               = dword ptr  4
.text:00407930 Type            = dword ptr  8
.text:00407930
.text:00407930                 jmp     ds:__imp__isctype
.text:00407930 _isctype        endp
.text:00407930
.text:00407930 ; ---------------------------------------------------------------------------
.text:00407936                 align 10h
.text:00407940
.text:00407940 ; =============== S U B R O U T I N E =======================================
.text:00407940
.text:00407940 ; Attributes: thunk
.text:00407940
.text:00407940 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00407940 vfprintf        proc near               ; CODE XREF: sub_4047F0+C1↑p
.text:00407940                                         ; sub_404AB0+49↑p ...
.text:00407940
.text:00407940 Stream          = dword ptr  4
.text:00407940 Format          = dword ptr  8
.text:00407940 ArgList         = dword ptr  0Ch
.text:00407940
.text:00407940                 jmp     ds:__imp_vfprintf
.text:00407940 vfprintf        endp
.text:00407940
.text:00407940 ; ---------------------------------------------------------------------------
.text:00407946                 align 10h
.text:00407950
.text:00407950 ; =============== S U B R O U T I N E =======================================
.text:00407950
.text:00407950 ; Attributes: thunk
.text:00407950
.text:00407950 ; int __cdecl fflush(FILE *Stream)
.text:00407950 fflush          proc near               ; CODE XREF: sub_404AB0+19↑p
.text:00407950                                         ; sub_404AB0+81↑p ...
.text:00407950
.text:00407950 Stream          = dword ptr  4
.text:00407950
.text:00407950                 jmp     ds:__imp_fflush
.text:00407950 fflush          endp
.text:00407950
.text:00407950 ; ---------------------------------------------------------------------------
.text:00407956                 align 10h
.text:00407960
.text:00407960 ; =============== S U B R O U T I N E =======================================
.text:00407960
.text:00407960 ; Attributes: thunk
.text:00407960
.text:00407960 ; char *__cdecl strerror(int ErrorMessage)
.text:00407960 strerror        proc near               ; CODE XREF: sub_404AB0+A5↑p
.text:00407960                                         ; sub_404BB4+10F↑p
.text:00407960
.text:00407960 ErrorMessage    = dword ptr  4
.text:00407960
.text:00407960                 jmp     ds:__imp_strerror
.text:00407960 strerror        endp
.text:00407960
.text:00407960 ; ---------------------------------------------------------------------------
.text:00407966                 align 10h
.text:00407970
.text:00407970 ; =============== S U B R O U T I N E =======================================
.text:00407970
.text:00407970 ; Attributes: thunk
.text:00407970
.text:00407970 ; char *__cdecl strdup(const char *String)
.text:00407970 _strdup         proc near               ; CODE XREF: sub_405B10+88↑p
.text:00407970
.text:00407970 String          = dword ptr  4
.text:00407970
.text:00407970                 jmp     ds:__imp__strdup
.text:00407970 _strdup         endp
.text:00407970
.text:00407970 ; ---------------------------------------------------------------------------
.text:00407976                 align 10h
.text:00407980
.text:00407980 ; =============== S U B R O U T I N E =======================================
.text:00407980
.text:00407980 ; Attributes: thunk
.text:00407980
.text:00407980 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:00407980 _lseeki64       proc near               ; CODE XREF: sub_4061D0+30↑p
.text:00407980                                         ; sub_406610+144↑p ...
.text:00407980
.text:00407980 FileHandle      = dword ptr  4
.text:00407980 Offset          = qword ptr  8
.text:00407980 Origin          = dword ptr  10h
.text:00407980
.text:00407980                 jmp     ds:__imp__lseeki64
.text:00407980 _lseeki64       endp
.text:00407980
.text:00407980 ; ---------------------------------------------------------------------------
.text:00407986                 align 10h
.text:00407990
.text:00407990 ; =============== S U B R O U T I N E =======================================
.text:00407990
.text:00407990 ; Attributes: thunk
.text:00407990
.text:00407990 ; int open(const char *FileName, int OpenFlag, ...)
.text:00407990 _open           proc near               ; CODE XREF: sub_4061D0+71↑p
.text:00407990                                         ; sub_4061D0+EA↑p ...
.text:00407990
.text:00407990 FileName        = dword ptr  4
.text:00407990 OpenFlag        = dword ptr  8
.text:00407990
.text:00407990                 jmp     ds:__imp__open
.text:00407990 _open           endp
.text:00407990
.text:00407990 ; ---------------------------------------------------------------------------
.text:00407996                 align 10h
.text:004079A0
.text:004079A0 ; =============== S U B R O U T I N E =======================================
.text:004079A0
.text:004079A0 ; Attributes: thunk
.text:004079A0
.text:004079A0 ; int __cdecl close(int FileHandle)
.text:004079A0 _close          proc near               ; CODE XREF: sub_4061D0+D3↑p
.text:004079A0                                         ; sub_406940+134↑p ...
.text:004079A0
.text:004079A0 FileHandle      = dword ptr  4
.text:004079A0
.text:004079A0                 jmp     ds:__imp__close
.text:004079A0 _close          endp
.text:004079A0
.text:004079A0 ; ---------------------------------------------------------------------------
.text:004079A6                 align 10h
.text:004079B0
.text:004079B0 ; =============== S U B R O U T I N E =======================================
.text:004079B0
.text:004079B0 ; Attributes: thunk
.text:004079B0
.text:004079B0 ; int __cdecl write(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.text:004079B0 _write          proc near               ; CODE XREF: sub_406610+15E↑p
.text:004079B0                                         ; sub_406940+102↑p
.text:004079B0
.text:004079B0 FileHandle      = dword ptr  4
.text:004079B0 Buf             = dword ptr  8
.text:004079B0 MaxCharCount    = dword ptr  0Ch
.text:004079B0
.text:004079B0                 jmp     ds:__imp__write
.text:004079B0 _write          endp
.text:004079B0
.text:004079B0 ; ---------------------------------------------------------------------------
.text:004079B6                 align 10h
.text:004079C0
.text:004079C0 ; =============== S U B R O U T I N E =======================================
.text:004079C0
.text:004079C0 ; Attributes: noreturn thunk
.text:004079C0
.text:004079C0 _assert         proc near               ; CODE XREF: sub_406310+145↑p
.text:004079C0                                         ; sub_406460+1A5↑p ...
.text:004079C0                 jmp     ds:__imp__assert
.text:004079C0 _assert         endp
.text:004079C0
.text:004079C0 ; ---------------------------------------------------------------------------
.text:004079C6                 align 10h
.text:004079D0
.text:004079D0 ; =============== S U B R O U T I N E =======================================
.text:004079D0
.text:004079D0 ; Attributes: thunk
.text:004079D0
.text:004079D0 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:004079D0 _read           proc near               ; CODE XREF: sub_406310+86↑p
.text:004079D0                                         ; sub_406460+89↑p ...
.text:004079D0
.text:004079D0 FileHandle      = dword ptr  4
.text:004079D0 DstBuf          = dword ptr  8
.text:004079D0 MaxCharCount    = dword ptr  0Ch
.text:004079D0
.text:004079D0                 jmp     ds:__imp__read
.text:004079D0 _read           endp
.text:004079D0
.text:004079D0 ; ---------------------------------------------------------------------------
.text:004079D6                 align 10h
.text:004079E0
.text:004079E0 ; =============== S U B R O U T I N E =======================================
.text:004079E0
.text:004079E0 ; Attributes: thunk
.text:004079E0
.text:004079E0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:004079E0 _get_osfhandle  proc near               ; CODE XREF: sub_406D50+22↑p
.text:004079E0                                         ; sub_406E00+12↑p
.text:004079E0
.text:004079E0 FileHandle      = dword ptr  4
.text:004079E0
.text:004079E0                 jmp     ds:__imp__get_osfhandle
.text:004079E0 _get_osfhandle  endp
.text:004079E0
.text:004079E0 ; ---------------------------------------------------------------------------
.text:004079E6                 align 10h
.text:004079F0
.text:004079F0 ; =============== S U B R O U T I N E =======================================
.text:004079F0
.text:004079F0 ; Attributes: thunk
.text:004079F0
.text:004079F0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:004079F0 _filelengthi64  proc near               ; CODE XREF: sub_406E00+113↑p
.text:004079F0
.text:004079F0 FileHandle      = dword ptr  4
.text:004079F0
.text:004079F0                 jmp     ds:__imp__filelengthi64
.text:004079F0 _filelengthi64  endp
.text:004079F0
.text:004079F0 ; ---------------------------------------------------------------------------
.text:004079F6                 align 10h
.text:00407A00
.text:00407A00 ; =============== S U B R O U T I N E =======================================
.text:00407A00
.text:00407A00 ; Attributes: thunk
.text:00407A00
.text:00407A00 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00407A00 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00407A00
.text:00407A00 lpTopLevelExceptionFilter= dword ptr  4
.text:00407A00
.text:00407A00                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00407A00 SetUnhandledExceptionFilter endp
.text:00407A00
.text:00407A00 ; ---------------------------------------------------------------------------
.text:00407A06                 align 10h
.text:00407A10
.text:00407A10 ; =============== S U B R O U T I N E =======================================
.text:00407A10
.text:00407A10 ; Attributes: noreturn thunk
.text:00407A10
.text:00407A10 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00407A10 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00407A10
.text:00407A10 uExitCode       = dword ptr  4
.text:00407A10
.text:00407A10                 jmp     ds:__imp_ExitProcess
.text:00407A10 ExitProcess     endp
.text:00407A10
.text:00407A10 ; ---------------------------------------------------------------------------
.text:00407A16                 align 10h
.text:00407A20
.text:00407A20 ; =============== S U B R O U T I N E =======================================
.text:00407A20
.text:00407A20 ; Attributes: thunk
.text:00407A20
.text:00407A20 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:00407A20 GetSystemInfo   proc near               ; CODE XREF: sub_405BC0+3A↑p
.text:00407A20                                         ; sub_405C10+3A↑p ...
.text:00407A20
.text:00407A20 lpSystemInfo    = dword ptr  4
.text:00407A20
.text:00407A20                 jmp     ds:__imp_GetSystemInfo
.text:00407A20 GetSystemInfo   endp
.text:00407A20
.text:00407A20 ; ---------------------------------------------------------------------------
.text:00407A26                 align 10h
.text:00407A30
.text:00407A30 ; =============== S U B R O U T I N E =======================================
.text:00407A30
.text:00407A30 ; Attributes: thunk
.text:00407A30
.text:00407A30 ; BOOL __stdcall SetEndOfFile(HANDLE hFile)
.text:00407A30 SetEndOfFile    proc near               ; CODE XREF: sub_406D50+53↑p
.text:00407A30
.text:00407A30 hFile           = dword ptr  4
.text:00407A30
.text:00407A30                 jmp     ds:__imp_SetEndOfFile
.text:00407A30 SetEndOfFile    endp
.text:00407A30
.text:00407A30 ; ---------------------------------------------------------------------------
.text:00407A36                 align 10h
.text:00407A40
.text:00407A40 ; =============== S U B R O U T I N E =======================================
.text:00407A40
.text:00407A40 ; Attributes: thunk
.text:00407A40
.text:00407A40 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00407A40 UnlockFile      proc near               ; CODE XREF: sub_406E00+B4↑p
.text:00407A40
.text:00407A40 hFile           = dword ptr  4
.text:00407A40 dwFileOffsetLow = dword ptr  8
.text:00407A40 dwFileOffsetHigh= dword ptr  0Ch
.text:00407A40 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00407A40 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00407A40
.text:00407A40                 jmp     ds:__imp_UnlockFile
.text:00407A40 UnlockFile      endp
.text:00407A40
.text:00407A40 ; ---------------------------------------------------------------------------
.text:00407A46                 align 10h
.text:00407A50
.text:00407A50 ; =============== S U B R O U T I N E =======================================
.text:00407A50
.text:00407A50 ; Attributes: thunk
.text:00407A50
.text:00407A50 ; BOOL __stdcall LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.text:00407A50 LockFile        proc near               ; CODE XREF: sub_406E00+F7↑p
.text:00407A50
.text:00407A50 hFile           = dword ptr  4
.text:00407A50 dwFileOffsetLow = dword ptr  8
.text:00407A50 dwFileOffsetHigh= dword ptr  0Ch
.text:00407A50 nNumberOfBytesToLockLow= dword ptr  10h
.text:00407A50 nNumberOfBytesToLockHigh= dword ptr  14h
.text:00407A50
.text:00407A50                 jmp     ds:__imp_LockFile
.text:00407A50 LockFile        endp
.text:00407A50
.text:00407A50 ; ---------------------------------------------------------------------------
.text:00407A56                 align 10h
.text:00407A60
.text:00407A60 ; =============== S U B R O U T I N E =======================================
.text:00407A60
.text:00407A60 ; Attributes: thunk
.text:00407A60
.text:00407A60 ; DWORD __stdcall GetLastError()
.text:00407A60 GetLastError    proc near               ; CODE XREF: sub_4073F0+3↑p
.text:00407A60                 jmp     ds:__imp_GetLastError
.text:00407A60 GetLastError    endp
.text:00407A60
.text:00407A60 ; ---------------------------------------------------------------------------
.text:00407A66                 align 10h
.text:00407A70 dword_407A70    dd 0FFFFFFFFh           ; DATA XREF: .text:00407499↑r
.text:00407A70                                         ; .text:loc_4074C0↑r ...
.text:00407A74 dword_407A74    dd 0                    ; DATA XREF: .text:loc_4074CC↑r
.text:00407A74                                         ; sub_4074F0:loc_40753D↑r
.text:00407A78                 dd 0FFFFFFFFh
.text:00407A7C dword_407A7C    dd 61h dup(0)           ; DATA XREF: .data:off_4080D4↓o
.text:00407C00                 dd 100h dup(?)
.text:00407C00 _text           ends
.text:00407C00
.data:00408000 ; Section 2. (virtual address 00008000)
.data:00408000 ; Virtual size                  : 000000F0 (    240.)
.data:00408000 ; Section size in file          : 00000200 (    512.)
.data:00408000 ; Offset to raw data for section: 00007000
.data:00408000 ; Flags C0000040: Data Readable Writable
.data:00408000 ; Alignment     : default
.data:00408000 ; ===========================================================================
.data:00408000
.data:00408000 ; Segment type: Pure data
.data:00408000 ; Segment permissions: Read/Write
.data:00408000 _data           segment para public 'DATA' use32
.data:00408000                 assume cs:_data
.data:00408000                 ;org 408000h
.data:00408000 dword_408000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00408000                                         ; sub_401080+CC↑r
.data:00408004 dword_408004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00408004                                         ; sub_401080+D4↑r
.data:00408008                 align 10h
.data:00408010 dword_408010    dd 1                    ; DATA XREF: sub_401360+D6↑r
.data:00408010                                         ; sub_402880+3↑r ...
.data:00408014 dword_408014    dd 1                    ; DATA XREF: sub_402880+11↑r
.data:00408014                                         ; .text:00402921↑r ...
.data:00408018 dword_408018    dd 3Fh                  ; DATA XREF: sub_402880+7D↑w
.data:00408018                                         ; .text:0040298D↑w
.data:0040801C                 align 10h
.data:00408020 dword_408020    dd 1                    ; DATA XREF: sub_404330+22↑r
.data:00408020                                         ; sub_404330+65↑r ...
.data:00408024 dword_408024    dd 100h                 ; DATA XREF: sub_404330+3F↑o
.data:00408024                                         ; sub_404330+1A2↑r ...
.data:00408028 off_408028      dd offset unk_409040    ; DATA XREF: sub_404330+1AA↑r
.data:0040802C ; void *off_40802C
.data:0040802C off_40802C      dd offset dword_408024  ; DATA XREF: sub_404330+39↑r
.data:0040802C                                         ; sub_404330+60↑w ...
.data:00408030 ; char *Buffer
.data:00408030 Buffer          dd offset aCopyrightC2005
.data:00408030                                         ; DATA XREF: sub_4047F0+DC↑r
.data:00408030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00408034                 align 10h
.data:00408040 ; int Code
.data:00408040 Code            dd 1                    ; DATA XREF: sub_402DB0+6D↑r
.data:00408040                                         ; sub_402DB0+9A↑r ...
.data:00408044                 align 10h
.data:00408050 off_408050      dd offset sub_405960    ; DATA XREF: sub_405940+C↑o
.data:00408050                                         ; sub_405B10+26↑o ...
.data:00408054                 dd offset sub_405980
.data:00408058                 dd offset sub_4059D0
.data:0040805C                 dd offset sub_405A20
.data:00408060                 dd offset sub_405A70
.data:00408064                 dd offset nullsub_1
.data:00408068                 db    0
.data:00408069                 db    0
.data:0040806A                 db    0
.data:0040806B                 db    0
.data:0040806C off_40806C      dd offset off_408050    ; DATA XREF: sub_4058F0+3↑r
.data:0040806C                                         ; sub_405900+7↑r ...
.data:00408070 ; char *FileName
.data:00408070 FileName        dd offset aVarRunUtmp_0 ; DATA XREF: sub_405B10+20↑r
.data:00408070                                         ; sub_405B10+64↑r ...
.data:00408070                                         ; "/var/run/utmp"
.data:00408074                 align 10h
.data:00408080 ; int FileHandle
.data:00408080 FileHandle      dd 0FFFFFFFFh           ; DATA XREF: sub_4061D0+3↑r
.data:00408080                                         ; sub_4061D0+76↑w ...
.data:00408084 off_408084      dd offset sub_4061D0    ; DATA XREF: sub_405960+3↑r
.data:00408084                                         ; sub_405960+D↑o ...
.data:00408088 off_408088      dd offset sub_406310    ; DATA XREF: sub_405980+2A↑r
.data:0040808C off_40808C      dd offset sub_406AA0    ; DATA XREF: sub_4059D0+33↑r
.data:00408090 off_408090      dd offset sub_406460    ; DATA XREF: sub_405A20+33↑r
.data:00408094 off_408094      dd offset sub_406610    ; DATA XREF: sub_405A70+21↑r
.data:00408098                 dd offset sub_406B60
.data:0040809C                 dd offset sub_406940
.data:004080A0 dword_4080A0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004080A4                 align 10h
.data:004080B0 ; int Mode
.data:004080B0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004080B0                                         ; sub_401080+80↑r ...
.data:004080B4                 align 10h
.data:004080C0 dword_4080C0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004080C0                                         ; sub_401080+BA↑r
.data:004080C4                 align 10h
.data:004080D0 dword_4080D0    dd 0                    ; DATA XREF: sub_4074F0+9↑r
.data:004080D0                                         ; sub_4074F0+1D↑w
.data:004080D4 off_4080D4      dd offset dword_407A7C  ; DATA XREF: sub_407460+6↑r
.data:004080D4                                         ; sub_407460+17↑r ...
.data:004080D8                 align 1000h
.data:004080D8 _data           ends
.data:004080D8
.bss:00409000 ; Section 3. (virtual address 00009000)
.bss:00409000 ; Virtual size                  : 00000440 (   1088.)
.bss:00409000 ; Section size in file          : 00000000 (      0.)
.bss:00409000 ; Offset to raw data for section: 00000000
.bss:00409000 ; Flags C0000080: Bss Readable Writable
.bss:00409000 ; Alignment     : default
.bss:00409000 ; ===========================================================================
.bss:00409000
.bss:00409000 ; Segment type: Uninitialized
.bss:00409000 ; Segment permissions: Read/Write
.bss:00409000 _bss            segment para public 'BSS' use32
.bss:00409000                 assume cs:_bss
.bss:00409000                 ;org 409000h
.bss:00409000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00409000 dword_409000    dd ?                    ; DATA XREF: sub_402880+9↑o
.bss:00409000                                         ; sub_402880+17↑w ...
.bss:00409004 dword_409004    dd ?                    ; DATA XREF: sub_402880+21↑w
.bss:00409004                                         ; .text:00402939↑w
.bss:00409008 dword_409008    dd ?                    ; DATA XREF: sub_402880+77↑r
.bss:00409008                                         ; .text:00402987↑r
.bss:0040900C dword_40900C    dd ?                    ; DATA XREF: sub_402880+6B↑r
.bss:0040900C                                         ; .text:0040297B↑r
.bss:00409010                 db    ? ;
.bss:00409011                 db    ? ;
.bss:00409012                 db    ? ;
.bss:00409013                 db    ? ;
.bss:00409014                 db    ? ;
.bss:00409015                 db    ? ;
.bss:00409016                 db    ? ;
.bss:00409017                 db    ? ;
.bss:00409018                 db    ? ;
.bss:00409019                 db    ? ;
.bss:0040901A                 db    ? ;
.bss:0040901B                 db    ? ;
.bss:0040901C                 db    ? ;
.bss:0040901D                 db    ? ;
.bss:0040901E                 db    ? ;
.bss:0040901F                 db    ? ;
.bss:00409020                 db    ? ;
.bss:00409021                 db    ? ;
.bss:00409022                 db    ? ;
.bss:00409023                 db    ? ;
.bss:00409024                 db    ? ;
.bss:00409025                 db    ? ;
.bss:00409026                 db    ? ;
.bss:00409027                 db    ? ;
.bss:00409028                 db    ? ;
.bss:00409029                 db    ? ;
.bss:0040902A                 db    ? ;
.bss:0040902B                 db    ? ;
.bss:0040902C                 db    ? ;
.bss:0040902D                 db    ? ;
.bss:0040902E                 db    ? ;
.bss:0040902F                 db    ? ;
.bss:00409030 ; char *dword_409030
.bss:00409030 dword_409030    dd ?                    ; DATA XREF: .text:00402D84↑w
.bss:00409030                                         ; sub_402DB0+58↑r
.bss:00409034                 align 10h
.bss:00409040 unk_409040      db    ? ;               ; DATA XREF: sub_404330+100↑o
.bss:00409040                                         ; .data:off_408028↑o
.bss:00409041                 db    ? ;
.bss:00409042                 db    ? ;
.bss:00409043                 db    ? ;
.bss:00409044                 db    ? ;
.bss:00409045                 db    ? ;
.bss:00409046                 db    ? ;
.bss:00409047                 db    ? ;
.bss:00409048                 db    ? ;
.bss:00409049                 db    ? ;
.bss:0040904A                 db    ? ;
.bss:0040904B                 db    ? ;
.bss:0040904C                 db    ? ;
.bss:0040904D                 db    ? ;
.bss:0040904E                 db    ? ;
.bss:0040904F                 db    ? ;
.bss:00409050                 db    ? ;
.bss:00409051                 db    ? ;
.bss:00409052                 db    ? ;
.bss:00409053                 db    ? ;
.bss:00409054                 db    ? ;
.bss:00409055                 db    ? ;
.bss:00409056                 db    ? ;
.bss:00409057                 db    ? ;
.bss:00409058                 db    ? ;
.bss:00409059                 db    ? ;
.bss:0040905A                 db    ? ;
.bss:0040905B                 db    ? ;
.bss:0040905C                 db    ? ;
.bss:0040905D                 db    ? ;
.bss:0040905E                 db    ? ;
.bss:0040905F                 db    ? ;
.bss:00409060                 db    ? ;
.bss:00409061                 db    ? ;
.bss:00409062                 db    ? ;
.bss:00409063                 db    ? ;
.bss:00409064                 db    ? ;
.bss:00409065                 db    ? ;
.bss:00409066                 db    ? ;
.bss:00409067                 db    ? ;
.bss:00409068                 db    ? ;
.bss:00409069                 db    ? ;
.bss:0040906A                 db    ? ;
.bss:0040906B                 db    ? ;
.bss:0040906C                 db    ? ;
.bss:0040906D                 db    ? ;
.bss:0040906E                 db    ? ;
.bss:0040906F                 db    ? ;
.bss:00409070                 db    ? ;
.bss:00409071                 db    ? ;
.bss:00409072                 db    ? ;
.bss:00409073                 db    ? ;
.bss:00409074                 db    ? ;
.bss:00409075                 db    ? ;
.bss:00409076                 db    ? ;
.bss:00409077                 db    ? ;
.bss:00409078                 db    ? ;
.bss:00409079                 db    ? ;
.bss:0040907A                 db    ? ;
.bss:0040907B                 db    ? ;
.bss:0040907C                 db    ? ;
.bss:0040907D                 db    ? ;
.bss:0040907E                 db    ? ;
.bss:0040907F                 db    ? ;
.bss:00409080                 db    ? ;
.bss:00409081                 db    ? ;
.bss:00409082                 db    ? ;
.bss:00409083                 db    ? ;
.bss:00409084                 db    ? ;
.bss:00409085                 db    ? ;
.bss:00409086                 db    ? ;
.bss:00409087                 db    ? ;
.bss:00409088                 db    ? ;
.bss:00409089                 db    ? ;
.bss:0040908A                 db    ? ;
.bss:0040908B                 db    ? ;
.bss:0040908C                 db    ? ;
.bss:0040908D                 db    ? ;
.bss:0040908E                 db    ? ;
.bss:0040908F                 db    ? ;
.bss:00409090                 db    ? ;
.bss:00409091                 db    ? ;
.bss:00409092                 db    ? ;
.bss:00409093                 db    ? ;
.bss:00409094                 db    ? ;
.bss:00409095                 db    ? ;
.bss:00409096                 db    ? ;
.bss:00409097                 db    ? ;
.bss:00409098                 db    ? ;
.bss:00409099                 db    ? ;
.bss:0040909A                 db    ? ;
.bss:0040909B                 db    ? ;
.bss:0040909C                 db    ? ;
.bss:0040909D                 db    ? ;
.bss:0040909E                 db    ? ;
.bss:0040909F                 db    ? ;
.bss:004090A0                 db    ? ;
.bss:004090A1                 db    ? ;
.bss:004090A2                 db    ? ;
.bss:004090A3                 db    ? ;
.bss:004090A4                 db    ? ;
.bss:004090A5                 db    ? ;
.bss:004090A6                 db    ? ;
.bss:004090A7                 db    ? ;
.bss:004090A8                 db    ? ;
.bss:004090A9                 db    ? ;
.bss:004090AA                 db    ? ;
.bss:004090AB                 db    ? ;
.bss:004090AC                 db    ? ;
.bss:004090AD                 db    ? ;
.bss:004090AE                 db    ? ;
.bss:004090AF                 db    ? ;
.bss:004090B0                 db    ? ;
.bss:004090B1                 db    ? ;
.bss:004090B2                 db    ? ;
.bss:004090B3                 db    ? ;
.bss:004090B4                 db    ? ;
.bss:004090B5                 db    ? ;
.bss:004090B6                 db    ? ;
.bss:004090B7                 db    ? ;
.bss:004090B8                 db    ? ;
.bss:004090B9                 db    ? ;
.bss:004090BA                 db    ? ;
.bss:004090BB                 db    ? ;
.bss:004090BC                 db    ? ;
.bss:004090BD                 db    ? ;
.bss:004090BE                 db    ? ;
.bss:004090BF                 db    ? ;
.bss:004090C0                 db    ? ;
.bss:004090C1                 db    ? ;
.bss:004090C2                 db    ? ;
.bss:004090C3                 db    ? ;
.bss:004090C4                 db    ? ;
.bss:004090C5                 db    ? ;
.bss:004090C6                 db    ? ;
.bss:004090C7                 db    ? ;
.bss:004090C8                 db    ? ;
.bss:004090C9                 db    ? ;
.bss:004090CA                 db    ? ;
.bss:004090CB                 db    ? ;
.bss:004090CC                 db    ? ;
.bss:004090CD                 db    ? ;
.bss:004090CE                 db    ? ;
.bss:004090CF                 db    ? ;
.bss:004090D0                 db    ? ;
.bss:004090D1                 db    ? ;
.bss:004090D2                 db    ? ;
.bss:004090D3                 db    ? ;
.bss:004090D4                 db    ? ;
.bss:004090D5                 db    ? ;
.bss:004090D6                 db    ? ;
.bss:004090D7                 db    ? ;
.bss:004090D8                 db    ? ;
.bss:004090D9                 db    ? ;
.bss:004090DA                 db    ? ;
.bss:004090DB                 db    ? ;
.bss:004090DC                 db    ? ;
.bss:004090DD                 db    ? ;
.bss:004090DE                 db    ? ;
.bss:004090DF                 db    ? ;
.bss:004090E0                 db    ? ;
.bss:004090E1                 db    ? ;
.bss:004090E2                 db    ? ;
.bss:004090E3                 db    ? ;
.bss:004090E4                 db    ? ;
.bss:004090E5                 db    ? ;
.bss:004090E6                 db    ? ;
.bss:004090E7                 db    ? ;
.bss:004090E8                 db    ? ;
.bss:004090E9                 db    ? ;
.bss:004090EA                 db    ? ;
.bss:004090EB                 db    ? ;
.bss:004090EC                 db    ? ;
.bss:004090ED                 db    ? ;
.bss:004090EE                 db    ? ;
.bss:004090EF                 db    ? ;
.bss:004090F0                 db    ? ;
.bss:004090F1                 db    ? ;
.bss:004090F2                 db    ? ;
.bss:004090F3                 db    ? ;
.bss:004090F4                 db    ? ;
.bss:004090F5                 db    ? ;
.bss:004090F6                 db    ? ;
.bss:004090F7                 db    ? ;
.bss:004090F8                 db    ? ;
.bss:004090F9                 db    ? ;
.bss:004090FA                 db    ? ;
.bss:004090FB                 db    ? ;
.bss:004090FC                 db    ? ;
.bss:004090FD                 db    ? ;
.bss:004090FE                 db    ? ;
.bss:004090FF                 db    ? ;
.bss:00409100                 db    ? ;
.bss:00409101                 db    ? ;
.bss:00409102                 db    ? ;
.bss:00409103                 db    ? ;
.bss:00409104                 db    ? ;
.bss:00409105                 db    ? ;
.bss:00409106                 db    ? ;
.bss:00409107                 db    ? ;
.bss:00409108                 db    ? ;
.bss:00409109                 db    ? ;
.bss:0040910A                 db    ? ;
.bss:0040910B                 db    ? ;
.bss:0040910C                 db    ? ;
.bss:0040910D                 db    ? ;
.bss:0040910E                 db    ? ;
.bss:0040910F                 db    ? ;
.bss:00409110                 db    ? ;
.bss:00409111                 db    ? ;
.bss:00409112                 db    ? ;
.bss:00409113                 db    ? ;
.bss:00409114                 db    ? ;
.bss:00409115                 db    ? ;
.bss:00409116                 db    ? ;
.bss:00409117                 db    ? ;
.bss:00409118                 db    ? ;
.bss:00409119                 db    ? ;
.bss:0040911A                 db    ? ;
.bss:0040911B                 db    ? ;
.bss:0040911C                 db    ? ;
.bss:0040911D                 db    ? ;
.bss:0040911E                 db    ? ;
.bss:0040911F                 db    ? ;
.bss:00409120                 db    ? ;
.bss:00409121                 db    ? ;
.bss:00409122                 db    ? ;
.bss:00409123                 db    ? ;
.bss:00409124                 db    ? ;
.bss:00409125                 db    ? ;
.bss:00409126                 db    ? ;
.bss:00409127                 db    ? ;
.bss:00409128                 db    ? ;
.bss:00409129                 db    ? ;
.bss:0040912A                 db    ? ;
.bss:0040912B                 db    ? ;
.bss:0040912C                 db    ? ;
.bss:0040912D                 db    ? ;
.bss:0040912E                 db    ? ;
.bss:0040912F                 db    ? ;
.bss:00409130                 db    ? ;
.bss:00409131                 db    ? ;
.bss:00409132                 db    ? ;
.bss:00409133                 db    ? ;
.bss:00409134                 db    ? ;
.bss:00409135                 db    ? ;
.bss:00409136                 db    ? ;
.bss:00409137                 db    ? ;
.bss:00409138                 db    ? ;
.bss:00409139                 db    ? ;
.bss:0040913A                 db    ? ;
.bss:0040913B                 db    ? ;
.bss:0040913C                 db    ? ;
.bss:0040913D                 db    ? ;
.bss:0040913E                 db    ? ;
.bss:0040913F                 db    ? ;
.bss:00409140 dword_409140    dd ?                    ; DATA XREF: .text:loc_403CC1↑o
.bss:00409140                                         ; .text:loc_403CE0↑o ...
.bss:00409144 dword_409144    dd ?                    ; DATA XREF: .text:loc_403D60↑o
.bss:00409144                                         ; .text:004041E8↑r ...
.bss:00409148 dword_409148    dd ?                    ; DATA XREF: .text:004041E2↑r
.bss:00409148                                         ; sub_404290+2C↑r
.bss:0040914C dword_40914C    dd ?                    ; DATA XREF: .text:004041D6↑r
.bss:0040914C                                         ; sub_404290+22↑r
.bss:00409150 dword_409150    dd ?                    ; DATA XREF: .text:004041F2↑r
.bss:00409150                                         ; sub_404290+36↑r
.bss:00409154 dword_409154    dd ?                    ; DATA XREF: .text:00404202↑r
.bss:00409154                                         ; sub_404290+4E↑r
.bss:00409158 dword_409158    dd ?                    ; DATA XREF: .text:0040421F↑r
.bss:00409158                                         ; sub_404290+62↑r
.bss:0040915C dword_40915C    dd ?                    ; DATA XREF: .text:00404215↑r
.bss:0040915C                                         ; sub_404290+70↑r
.bss:00409160 dword_409160    dd ?                    ; DATA XREF: .text:004041F8↑r
.bss:00409160                                         ; sub_404290+7A↑r
.bss:00409164                 align 10h
.bss:00409170 ; char *Str1
.bss:00409170 Str1            dd ?                    ; DATA XREF: sub_404BB4:loc_404BED↑w
.bss:00409170                                         ; sub_404BB4:loc_404D20↑r
.bss:00409174                 align 10h
.bss:00409180 dword_409180    dd ?                    ; DATA XREF: sub_404BB4+2D↑r
.bss:00409180                                         ; sub_404BB4+3F↑w
.bss:00409184                 align 10h
.bss:00409190 dword_409190    dd ?                    ; DATA XREF: sub_404F40+38↑r
.bss:00409190                                         ; sub_404F40+FC↑w ...
.bss:00409194                 align 10h
.bss:004091A0 dword_4091A0    dd ?                    ; DATA XREF: sub_404F40+4A↑r
.bss:004091A0                                         ; sub_404F40+123↑w
.bss:004091A4                 align 10h
.bss:004091B0 dword_4091B0    dd ?                    ; DATA XREF: sub_405AB0+3↑r
.bss:004091B0                                         ; sub_405AB0+19↑w
.bss:004091B4                 align 10h
.bss:004091C0 dword_4091C0    dd ?                    ; DATA XREF: sub_405BC0+7↑r
.bss:004091C0                                         ; sub_405BC0+2B↑w ...
.bss:004091C4                 align 10h
.bss:004091D0 ; struct _SYSTEM_INFO SystemInfo
.bss:004091D0 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_405BC0+21↑o
.bss:004091D0                                         ; sub_405BC0+33↑o ...
.bss:004091F4                 align 10h
.bss:00409200 dword_409200    dd ?                    ; DATA XREF: sub_4061D0+40↑w
.bss:00409200                                         ; sub_406310+1D↑r ...
.bss:00409204 dword_409204    dd ?                    ; DATA XREF: sub_4061D0+4B↑w
.bss:00409204                                         ; sub_406310+23↑r ...
.bss:00409208                 align 10h
.bss:00409210 dword_409210    dd ?                    ; DATA XREF: sub_4061D0+35↑w
.bss:00409210                                         ; sub_406310+7B↑o ...
.bss:00409214 unk_409214      db    ? ;               ; DATA XREF: sub_406310+DE↑o
.bss:00409214                                         ; sub_406460+FF↑o ...
.bss:00409215                 db    ? ;
.bss:00409216                 db    ? ;
.bss:00409217                 db    ? ;
.bss:00409218 ; char Str2[32]
.bss:00409218 Str2            db 20h dup(?)           ; DATA XREF: sub_406460+C5↑o
.bss:00409218                                         ; sub_406610+89↑o
.bss:00409238 byte_409238     db ?                    ; DATA XREF: sub_406610+67↑r
.bss:00409238                                         ; sub_406610+2CE↑o
.bss:00409239                 db    ? ;
.bss:0040923A                 db    ? ;
.bss:0040923B                 db    ? ;
.bss:0040923C                 db    ? ;
.bss:0040923D                 db    ? ;
.bss:0040923E                 db    ? ;
.bss:0040923F                 db    ? ;
.bss:00409240                 db    ? ;
.bss:00409241                 db    ? ;
.bss:00409242                 db    ? ;
.bss:00409243                 db    ? ;
.bss:00409244                 db    ? ;
.bss:00409245                 db    ? ;
.bss:00409246                 db    ? ;
.bss:00409247                 db    ? ;
.bss:00409248                 db    ? ;
.bss:00409249                 db    ? ;
.bss:0040924A                 db    ? ;
.bss:0040924B                 db    ? ;
.bss:0040924C                 db    ? ;
.bss:0040924D                 db    ? ;
.bss:0040924E                 db    ? ;
.bss:0040924F                 db    ? ;
.bss:00409250                 db    ? ;
.bss:00409251                 db    ? ;
.bss:00409252                 db    ? ;
.bss:00409253                 db    ? ;
.bss:00409254                 db    ? ;
.bss:00409255                 db    ? ;
.bss:00409256                 db    ? ;
.bss:00409257                 db    ? ;
.bss:00409258                 db    ? ;
.bss:00409259                 db    ? ;
.bss:0040925A                 db    ? ;
.bss:0040925B                 db    ? ;
.bss:0040925C                 db    ? ;
.bss:0040925D                 db    ? ;
.bss:0040925E                 db    ? ;
.bss:0040925F                 db    ? ;
.bss:00409260                 db    ? ;
.bss:00409261                 db    ? ;
.bss:00409262                 db    ? ;
.bss:00409263                 db    ? ;
.bss:00409264                 db    ? ;
.bss:00409265                 db    ? ;
.bss:00409266                 db    ? ;
.bss:00409267                 db    ? ;
.bss:00409268                 db    ? ;
.bss:00409269                 db    ? ;
.bss:0040926A                 db    ? ;
.bss:0040926B                 db    ? ;
.bss:0040926C                 db    ? ;
.bss:0040926D                 db    ? ;
.bss:0040926E                 db    ? ;
.bss:0040926F                 db    ? ;
.bss:00409270                 db    ? ;
.bss:00409271                 db    ? ;
.bss:00409272                 db    ? ;
.bss:00409273                 db    ? ;
.bss:00409274                 db    ? ;
.bss:00409275                 db    ? ;
.bss:00409276                 db    ? ;
.bss:00409277                 db    ? ;
.bss:00409278                 db    ? ;
.bss:00409279                 db    ? ;
.bss:0040927A                 db    ? ;
.bss:0040927B                 db    ? ;
.bss:0040927C                 db    ? ;
.bss:0040927D                 db    ? ;
.bss:0040927E                 db    ? ;
.bss:0040927F                 db    ? ;
.bss:00409280                 db    ? ;
.bss:00409281                 db    ? ;
.bss:00409282                 db    ? ;
.bss:00409283                 db    ? ;
.bss:00409284                 db    ? ;
.bss:00409285                 db    ? ;
.bss:00409286                 db    ? ;
.bss:00409287                 db    ? ;
.bss:00409288                 db    ? ;
.bss:00409289                 db    ? ;
.bss:0040928A                 db    ? ;
.bss:0040928B                 db    ? ;
.bss:0040928C                 db    ? ;
.bss:0040928D                 db    ? ;
.bss:0040928E                 db    ? ;
.bss:0040928F                 db    ? ;
.bss:00409290                 db    ? ;
.bss:00409291                 db    ? ;
.bss:00409292                 db    ? ;
.bss:00409293                 db    ? ;
.bss:00409294                 db    ? ;
.bss:00409295                 db    ? ;
.bss:00409296                 db    ? ;
.bss:00409297                 db    ? ;
.bss:00409298                 db    ? ;
.bss:00409299                 db    ? ;
.bss:0040929A                 db    ? ;
.bss:0040929B                 db    ? ;
.bss:0040929C                 db    ? ;
.bss:0040929D                 db    ? ;
.bss:0040929E                 db    ? ;
.bss:0040929F                 db    ? ;
.bss:004092A0                 db    ? ;
.bss:004092A1                 db    ? ;
.bss:004092A2                 db    ? ;
.bss:004092A3                 db    ? ;
.bss:004092A4                 db    ? ;
.bss:004092A5                 db    ? ;
.bss:004092A6                 db    ? ;
.bss:004092A7                 db    ? ;
.bss:004092A8                 db    ? ;
.bss:004092A9                 db    ? ;
.bss:004092AA                 db    ? ;
.bss:004092AB                 db    ? ;
.bss:004092AC                 db    ? ;
.bss:004092AD                 db    ? ;
.bss:004092AE                 db    ? ;
.bss:004092AF                 db    ? ;
.bss:004092B0                 db    ? ;
.bss:004092B1                 db    ? ;
.bss:004092B2                 db    ? ;
.bss:004092B3                 db    ? ;
.bss:004092B4                 db    ? ;
.bss:004092B5                 db    ? ;
.bss:004092B6                 db    ? ;
.bss:004092B7                 db    ? ;
.bss:004092B8                 db    ? ;
.bss:004092B9                 db    ? ;
.bss:004092BA                 db    ? ;
.bss:004092BB                 db    ? ;
.bss:004092BC                 db    ? ;
.bss:004092BD                 db    ? ;
.bss:004092BE                 db    ? ;
.bss:004092BF                 db    ? ;
.bss:004092C0                 db    ? ;
.bss:004092C1                 db    ? ;
.bss:004092C2                 db    ? ;
.bss:004092C3                 db    ? ;
.bss:004092C4                 db    ? ;
.bss:004092C5                 db    ? ;
.bss:004092C6                 db    ? ;
.bss:004092C7                 db    ? ;
.bss:004092C8                 db    ? ;
.bss:004092C9                 db    ? ;
.bss:004092CA                 db    ? ;
.bss:004092CB                 db    ? ;
.bss:004092CC                 db    ? ;
.bss:004092CD                 db    ? ;
.bss:004092CE                 db    ? ;
.bss:004092CF                 db    ? ;
.bss:004092D0                 db    ? ;
.bss:004092D1                 db    ? ;
.bss:004092D2                 db    ? ;
.bss:004092D3                 db    ? ;
.bss:004092D4                 db    ? ;
.bss:004092D5                 db    ? ;
.bss:004092D6                 db    ? ;
.bss:004092D7                 db    ? ;
.bss:004092D8                 db    ? ;
.bss:004092D9                 db    ? ;
.bss:004092DA                 db    ? ;
.bss:004092DB                 db    ? ;
.bss:004092DC                 db    ? ;
.bss:004092DD                 db    ? ;
.bss:004092DE                 db    ? ;
.bss:004092DF                 db    ? ;
.bss:004092E0                 db    ? ;
.bss:004092E1                 db    ? ;
.bss:004092E2                 db    ? ;
.bss:004092E3                 db    ? ;
.bss:004092E4                 db    ? ;
.bss:004092E5                 db    ? ;
.bss:004092E6                 db    ? ;
.bss:004092E7                 db    ? ;
.bss:004092E8                 db    ? ;
.bss:004092E9                 db    ? ;
.bss:004092EA                 db    ? ;
.bss:004092EB                 db    ? ;
.bss:004092EC                 db    ? ;
.bss:004092ED                 db    ? ;
.bss:004092EE                 db    ? ;
.bss:004092EF                 db    ? ;
.bss:004092F0                 db    ? ;
.bss:004092F1                 db    ? ;
.bss:004092F2                 db    ? ;
.bss:004092F3                 db    ? ;
.bss:004092F4                 db    ? ;
.bss:004092F5                 db    ? ;
.bss:004092F6                 db    ? ;
.bss:004092F7                 db    ? ;
.bss:004092F8                 db    ? ;
.bss:004092F9                 db    ? ;
.bss:004092FA                 db    ? ;
.bss:004092FB                 db    ? ;
.bss:004092FC                 db    ? ;
.bss:004092FD                 db    ? ;
.bss:004092FE                 db    ? ;
.bss:004092FF                 db    ? ;
.bss:00409300                 db    ? ;
.bss:00409301                 db    ? ;
.bss:00409302                 db    ? ;
.bss:00409303                 db    ? ;
.bss:00409304                 db    ? ;
.bss:00409305                 db    ? ;
.bss:00409306                 db    ? ;
.bss:00409307                 db    ? ;
.bss:00409308                 db    ? ;
.bss:00409309                 db    ? ;
.bss:0040930A                 db    ? ;
.bss:0040930B                 db    ? ;
.bss:0040930C                 db    ? ;
.bss:0040930D                 db    ? ;
.bss:0040930E                 db    ? ;
.bss:0040930F                 db    ? ;
.bss:00409310                 db    ? ;
.bss:00409311                 db    ? ;
.bss:00409312                 db    ? ;
.bss:00409313                 db    ? ;
.bss:00409314                 db    ? ;
.bss:00409315                 db    ? ;
.bss:00409316                 db    ? ;
.bss:00409317                 db    ? ;
.bss:00409318                 db    ? ;
.bss:00409319                 db    ? ;
.bss:0040931A                 db    ? ;
.bss:0040931B                 db    ? ;
.bss:0040931C                 db    ? ;
.bss:0040931D                 db    ? ;
.bss:0040931E                 db    ? ;
.bss:0040931F                 db    ? ;
.bss:00409320                 db    ? ;
.bss:00409321                 db    ? ;
.bss:00409322                 db    ? ;
.bss:00409323                 db    ? ;
.bss:00409324                 db    ? ;
.bss:00409325                 db    ? ;
.bss:00409326                 db    ? ;
.bss:00409327                 db    ? ;
.bss:00409328                 db    ? ;
.bss:00409329                 db    ? ;
.bss:0040932A                 db    ? ;
.bss:0040932B                 db    ? ;
.bss:0040932C                 db    ? ;
.bss:0040932D                 db    ? ;
.bss:0040932E                 db    ? ;
.bss:0040932F                 db    ? ;
.bss:00409330                 db    ? ;
.bss:00409331                 db    ? ;
.bss:00409332                 db    ? ;
.bss:00409333                 db    ? ;
.bss:00409334                 db    ? ;
.bss:00409335                 db    ? ;
.bss:00409336                 db    ? ;
.bss:00409337                 db    ? ;
.bss:00409338                 db    ? ;
.bss:00409339                 db    ? ;
.bss:0040933A                 db    ? ;
.bss:0040933B                 db    ? ;
.bss:0040933C                 db    ? ;
.bss:0040933D                 db    ? ;
.bss:0040933E                 db    ? ;
.bss:0040933F                 db    ? ;
.bss:00409340                 db    ? ;
.bss:00409341                 db    ? ;
.bss:00409342                 db    ? ;
.bss:00409343                 db    ? ;
.bss:00409344                 db    ? ;
.bss:00409345                 db    ? ;
.bss:00409346                 db    ? ;
.bss:00409347                 db    ? ;
.bss:00409348                 db    ? ;
.bss:00409349                 db    ? ;
.bss:0040934A                 db    ? ;
.bss:0040934B                 db    ? ;
.bss:0040934C                 db    ? ;
.bss:0040934D                 db    ? ;
.bss:0040934E                 db    ? ;
.bss:0040934F                 db    ? ;
.bss:00409350                 db    ? ;
.bss:00409351                 db    ? ;
.bss:00409352                 db    ? ;
.bss:00409353                 db    ? ;
.bss:00409354                 db    ? ;
.bss:00409355                 db    ? ;
.bss:00409356                 db    ? ;
.bss:00409357                 db    ? ;
.bss:00409358                 db    ? ;
.bss:00409359                 db    ? ;
.bss:0040935A                 db    ? ;
.bss:0040935B                 db    ? ;
.bss:0040935C                 db    ? ;
.bss:0040935D                 db    ? ;
.bss:0040935E                 db    ? ;
.bss:0040935F                 db    ? ;
.bss:00409360                 db    ? ;
.bss:00409361                 db    ? ;
.bss:00409362                 db    ? ;
.bss:00409363                 db    ? ;
.bss:00409364                 db    ? ;
.bss:00409365                 db    ? ;
.bss:00409366                 db    ? ;
.bss:00409367                 db    ? ;
.bss:00409368                 db    ? ;
.bss:00409369                 db    ? ;
.bss:0040936A                 db    ? ;
.bss:0040936B                 db    ? ;
.bss:0040936C                 db    ? ;
.bss:0040936D                 db    ? ;
.bss:0040936E                 db    ? ;
.bss:0040936F                 db    ? ;
.bss:00409370                 db    ? ;
.bss:00409371                 db    ? ;
.bss:00409372                 db    ? ;
.bss:00409373                 db    ? ;
.bss:00409374                 db    ? ;
.bss:00409375                 db    ? ;
.bss:00409376                 db    ? ;
.bss:00409377                 db    ? ;
.bss:00409378                 db    ? ;
.bss:00409379                 db    ? ;
.bss:0040937A                 db    ? ;
.bss:0040937B                 db    ? ;
.bss:0040937C                 db    ? ;
.bss:0040937D                 db    ? ;
.bss:0040937E                 db    ? ;
.bss:0040937F                 db    ? ;
.bss:00409380                 db    ? ;
.bss:00409381                 db    ? ;
.bss:00409382                 db    ? ;
.bss:00409383                 db    ? ;
.bss:00409384                 db    ? ;
.bss:00409385                 db    ? ;
.bss:00409386                 db    ? ;
.bss:00409387                 db    ? ;
.bss:00409388                 db    ? ;
.bss:00409389                 db    ? ;
.bss:0040938A                 db    ? ;
.bss:0040938B                 db    ? ;
.bss:0040938C                 db    ? ;
.bss:0040938D                 db    ? ;
.bss:0040938E                 db    ? ;
.bss:0040938F                 db    ? ;
.bss:00409390 dword_409390    dd ?                    ; DATA XREF: sub_401360+2E↑w
.bss:00409390                                         ; sub_401360+19F↑r ...
.bss:00409394                 db    ? ;
.bss:00409395                 db    ? ;
.bss:00409396                 db    ? ;
.bss:00409397                 db    ? ;
.bss:00409398                 db    ? ;
.bss:00409399                 db    ? ;
.bss:0040939A                 db    ? ;
.bss:0040939B                 db    ? ;
.bss:0040939C                 db    ? ;
.bss:0040939D                 db    ? ;
.bss:0040939E                 db    ? ;
.bss:0040939F                 db    ? ;
.bss:004093A0                 db    ? ;
.bss:004093A1                 db    ? ;
.bss:004093A2                 db    ? ;
.bss:004093A3                 db    ? ;
.bss:004093A4                 db    ? ;
.bss:004093A5                 db    ? ;
.bss:004093A6                 db    ? ;
.bss:004093A7                 db    ? ;
.bss:004093A8                 db    ? ;
.bss:004093A9                 db    ? ;
.bss:004093AA                 db    ? ;
.bss:004093AB                 db    ? ;
.bss:004093AC                 db    ? ;
.bss:004093AD                 db    ? ;
.bss:004093AE                 db    ? ;
.bss:004093AF                 db    ? ;
.bss:004093B0 dword_4093B0    dd ?                    ; DATA XREF: sub_402880+71↑w
.bss:004093B0                                         ; .text:00402981↑w
.bss:004093B4                 align 10h
.bss:004093C0 dword_4093C0    dd ?                    ; CODE XREF: sub_404BB4+63↑p
.bss:004093C0                                         ; DATA XREF: sub_404AB0+1E↑r ...
.bss:004093C4                 align 10h
.bss:004093D0 dword_4093D0    dd ?                    ; DATA XREF: sub_404AB0+4E↑w
.bss:004093D0                                         ; sub_404BB4+AB↑w
.bss:004093D4                 align 40h
.bss:00409400 dword_409400    dd ?                    ; DATA XREF: sub_404BB4+13↑r
.bss:00409404                 align 10h
.bss:00409410 dword_409410    dd ?                    ; DATA XREF: sub_405D20+A↑w
.bss:00409414                 align 1000h
.bss:00409414 _bss            ends
.bss:00409414
.idata:0040A000 ; Section 4. (virtual address 0000A000)
.idata:0040A000 ; Virtual size                  : 00000700 (   1792.)
.idata:0040A000 ; Section size in file          : 00000800 (   2048.)
.idata:0040A000 ; Offset to raw data for section: 00007200
.idata:0040A000 ; Flags C0000040: Data Readable Writable
.idata:0040A000 ; Alignment     : default
.idata:0040A000 ; ===========================================================================
.idata:0040A000
.idata:0040A000 ; Segment type: Externs
.idata:0040A000 ; _idata
.idata:0040A000
.idata:0040A001
.idata:0040A194 ;
.idata:0040A194 ; Imports from libintl3.dll
.idata:0040A194 ;
.idata:0040A194                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040A194                                         ; CODE XREF: sub_401360+48↑p
.idata:0040A194                                         ; DATA XREF: sub_401360+48↑r ...
.idata:0040A198                 extrn libintl_gettext:dword
.idata:0040A198                                         ; CODE XREF: sub_401360+16A↑p
.idata:0040A198                                         ; sub_401360+193↑p ...
.idata:0040A19C                 extrn libintl_textdomain:dword
.idata:0040A19C                                         ; CODE XREF: sub_401360+55↑p
.idata:0040A19C                                         ; DATA XREF: sub_401360+55↑r ...
.idata:0040A1A0
.idata:0040A1A8 ;
.idata:0040A1A8 ; Imports from KERNEL32.dll
.idata:0040A1A8 ;
.idata:0040A1A8 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040A1A8                 extrn __imp_ExitProcess:dword
.idata:0040A1A8                                         ; DATA XREF: ExitProcess↑r
.idata:0040A1AC ; DWORD (__stdcall *GetLastError)()
.idata:0040A1AC                 extrn __imp_GetLastError:dword
.idata:0040A1AC                                         ; DATA XREF: GetLastError↑r
.idata:0040A1B0 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:0040A1B0                 extrn __imp_GetSystemInfo:dword
.idata:0040A1B0                                         ; DATA XREF: GetSystemInfo↑r
.idata:0040A1B4 ; BOOL (__stdcall *LockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.idata:0040A1B4                 extrn __imp_LockFile:dword
.idata:0040A1B4                                         ; DATA XREF: LockFile↑r
.idata:0040A1B8 ; BOOL (__stdcall *SetEndOfFile)(HANDLE hFile)
.idata:0040A1B8                 extrn __imp_SetEndOfFile:dword
.idata:0040A1B8                                         ; DATA XREF: SetEndOfFile↑r
.idata:0040A1BC ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040A1BC                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040A1BC                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040A1C0 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:0040A1C0                 extrn __imp_UnlockFile:dword
.idata:0040A1C0                                         ; DATA XREF: UnlockFile↑r
.idata:0040A1C4
.idata:0040A1CC ;
.idata:0040A1CC ; Imports from msvcrt.dll
.idata:0040A1CC ;
.idata:0040A1CC ; int (__cdecl *_dup)(int FileHandle)
.idata:0040A1CC                 extrn __imp__dup:dword  ; DATA XREF: _dup↑r
.idata:0040A1D0
.idata:0040A1D8 ;
.idata:0040A1D8 ; Imports from MSVCP60.DLL
.idata:0040A1D8 ;
.idata:0040A1D8 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040A1D8                 extrn __imp_mbrtowc:dword
.idata:0040A1D8                                         ; DATA XREF: mbrtowc↑r
.idata:0040A1DC
.idata:0040A1E4 ;
.idata:0040A1E4 ; Imports from msvcrt.dll
.idata:0040A1E4 ;
.idata:0040A1E4                 extrn __imp___getmainargs:dword
.idata:0040A1E4                                         ; DATA XREF: __getmainargs↑r
.idata:0040A1E8 ; int _mb_cur_max
.idata:0040A1E8                 extrn __mb_cur_max:dword
.idata:0040A1E8                                         ; DATA XREF: sub_4031F0+7↑r
.idata:0040A1E8                                         ; sub_4031F0+5F3↑r
.idata:0040A1EC ; char ***(__cdecl *__p__environ)()
.idata:0040A1EC                 extrn __imp___p__environ:dword
.idata:0040A1EC                                         ; DATA XREF: __p__environ↑r
.idata:0040A1F0 ; int *(__cdecl *__p__fmode)()
.idata:0040A1F0                 extrn __imp___p__fmode:dword
.idata:0040A1F0                                         ; DATA XREF: __p__fmode↑r
.idata:0040A1F4                 extrn __pioinfo:dword   ; DATA XREF: sub_406F20:loc_406F88↑r
.idata:0040A1F4                                         ; sub_406F20:loc_406FB3↑r ...
.idata:0040A1F8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040A1F8                 extrn __set_app_type:dword
.idata:0040A1F8                                         ; CODE XREF: start+D↑p
.idata:0040A1F8                                         ; .text:0040102D↑p
.idata:0040A1F8                                         ; DATA XREF: ...
.idata:0040A1FC                 extrn __imp__assert:dword
.idata:0040A1FC                                         ; DATA XREF: _assert↑r
.idata:0040A200 ; void (__cdecl *_cexit)()
.idata:0040A200                 extrn __imp__cexit:dword
.idata:0040A200                                         ; DATA XREF: _cexit↑r
.idata:0040A204 ; int (__cdecl *_close)(int FileHandle)
.idata:0040A204                 extrn __imp__close:dword
.idata:0040A204                                         ; DATA XREF: _close↑r
.idata:0040A208 ; int *(__cdecl *_errno)()
.idata:0040A208                 extrn __imp__errno:dword
.idata:0040A208                                         ; DATA XREF: _errno↑r
.idata:0040A20C ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:0040A20C                 extrn __imp__filelengthi64:dword
.idata:0040A20C                                         ; DATA XREF: _filelengthi64↑r
.idata:0040A210 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0040A210                 extrn __imp__flsbuf:dword
.idata:0040A210                                         ; DATA XREF: _flsbuf↑r
.idata:0040A214 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:0040A214                 extrn __imp__get_osfhandle:dword
.idata:0040A214                                         ; DATA XREF: _get_osfhandle↑r
.idata:0040A218 ; FILE iob[]
.idata:0040A218                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040A218                                         ; sub_401080+75↑r ...
.idata:0040A21C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040A21C                 extrn __imp__isctype:dword
.idata:0040A21C                                         ; DATA XREF: _isctype↑r
.idata:0040A220 ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:0040A220                 extrn __imp__lseeki64:dword
.idata:0040A220                                         ; DATA XREF: _lseeki64↑r
.idata:0040A224 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0040A224                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0040A224                                         ; DATA XREF: .text:0040106C↑r
.idata:0040A228 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0040A228                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0040A22C ; const unsigned __int16 *pctype
.idata:0040A22C                 extrn _pctype:dword     ; DATA XREF: sub_4031F0:loc_4038E4↑r
.idata:0040A230 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:0040A230                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:0040A234 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0040A234                 extrn __imp__setmode:dword
.idata:0040A234                                         ; DATA XREF: _setmode↑r
.idata:0040A238 ; char *(__cdecl *_strdup)(const char *String)
.idata:0040A238                 extrn __imp__strdup:dword
.idata:0040A238                                         ; DATA XREF: _strdup↑r
.idata:0040A23C ; int (__cdecl *_write)(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.idata:0040A23C                 extrn __imp__write:dword
.idata:0040A23C                                         ; DATA XREF: _write↑r
.idata:0040A240 ; void (__cdecl __noreturn *abort)()
.idata:0040A240                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0040A244 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0040A244                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0040A244                                         ; DATA XREF: sub_401040+C↑r
.idata:0040A248 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0040A248                 extrn __imp_calloc:dword
.idata:0040A248                                         ; DATA XREF: calloc↑r
.idata:0040A24C ; void (__cdecl __noreturn *exit)(int Code)
.idata:0040A24C                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0040A250 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0040A250                 extrn __imp_fclose:dword
.idata:0040A250                                         ; DATA XREF: fclose↑r
.idata:0040A254 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0040A254                 extrn __imp_fflush:dword
.idata:0040A254                                         ; DATA XREF: fflush↑r
.idata:0040A258 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0040A258                 extrn __imp_fprintf:dword
.idata:0040A258                                         ; DATA XREF: fprintf↑r
.idata:0040A25C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0040A25C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0040A260 ; void (__cdecl *free)(void *Block)
.idata:0040A260                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0040A264 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0040A264                 extrn __imp_getenv:dword
.idata:0040A264                                         ; DATA XREF: getenv↑r
.idata:0040A268 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0040A268                 extrn __imp_iswctype:dword
.idata:0040A268                                         ; DATA XREF: iswctype↑r
.idata:0040A26C ; void *(__cdecl *malloc)(size_t Size)
.idata:0040A26C                 extrn __imp_malloc:dword
.idata:0040A26C                                         ; DATA XREF: malloc↑r
.idata:0040A270 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0040A270                 extrn __imp_memcpy:dword
.idata:0040A270                                         ; DATA XREF: memcpy↑r
.idata:0040A274 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040A274                 extrn __imp_memset:dword
.idata:0040A274                                         ; DATA XREF: memset↑r
.idata:0040A278 ; int (*printf)(const char *const Format, ...)
.idata:0040A278                 extrn __imp_printf:dword
.idata:0040A278                                         ; DATA XREF: printf↑r
.idata:0040A27C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040A27C                 extrn __imp_realloc:dword
.idata:0040A27C                                         ; DATA XREF: realloc↑r
.idata:0040A280 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040A280                 extrn __imp_setlocale:dword
.idata:0040A280                                         ; DATA XREF: setlocale↑r
.idata:0040A284 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040A284                 extrn __imp_signal:dword
.idata:0040A284                                         ; DATA XREF: signal↑r
.idata:0040A288 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040A288                 extrn __imp_strchr:dword
.idata:0040A288                                         ; DATA XREF: strchr↑r
.idata:0040A28C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040A28C                 extrn __imp_strcmp:dword
.idata:0040A28C                                         ; DATA XREF: strcmp↑r
.idata:0040A290 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040A290                 extrn __imp_strerror:dword
.idata:0040A290                                         ; DATA XREF: strerror↑r
.idata:0040A294 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040A294                 extrn __imp_strlen:dword
.idata:0040A294                                         ; DATA XREF: strlen↑r
.idata:0040A298 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040A298                 extrn __imp_strncmp:dword
.idata:0040A298                                         ; DATA XREF: strncmp↑r
.idata:0040A29C ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0040A29C                 extrn __imp_strncpy:dword
.idata:0040A29C                                         ; DATA XREF: strncpy↑r
.idata:0040A2A0 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040A2A0                 extrn __imp_vfprintf:dword
.idata:0040A2A0                                         ; DATA XREF: vfprintf↑r
.idata:0040A2A4
.idata:0040A2A4
.idata:0040A2A4
.idata:0040A2A4                 end start
