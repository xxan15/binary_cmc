.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 562D1336170447149B2FF4ACF5C2CF09EE11D1784C166540C83ABB1675D3C8F1
.text:00401000 ; Input MD5    : A61D4F569D6725208C9BD3B6DFF36B44
.text:00401000 ; Input CRC32  : 9898D502
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/pathchk.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A26C (Wed Apr 20 18:41:48 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000C120 (  49440.)
.text:00401000 ; Section size in file          : 0000C200 (  49664.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401520+6A↓p
.text:00401040                                         ; .text:0040C3D0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40C370
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_40E000
.text:004010A2                 mov     edx, dword_40E090
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_40E004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_40E0B0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_40E0B0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40C340
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_40E000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_40E004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401520
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40C370
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aPortability    db 'portability',0      ; DATA XREF: .text:off_4012A0↓o
.text:0040128C aHelp           db 'help',0             ; DATA XREF: .text:004012B0↓o
.text:00401291 aVersion        db 'version',0          ; DATA XREF: .text:004012C0↓o
.text:00401299                 align 10h
.text:004012A0 off_4012A0      dd offset aPortability  ; DATA XREF: sub_401520+78↓o
.text:004012A0                                         ; "portability"
.text:004012A4                 dd 2 dup(0)
.text:004012AC                 dd 70h
.text:004012B0                 dd offset aHelp         ; "help"
.text:004012B4                 dd 2 dup(0)
.text:004012BC                 dd 0FFFFFF7Eh
.text:004012C0                 dd offset aVersion      ; "version"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004012E0 ; const char Locale
.text:004012E0 Locale          db 0                    ; DATA XREF: sub_401520+27↓o
.text:004012E1                 align 20h
.text:00401300 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401300                                         ; DATA XREF: sub_401520+41↓o
.text:00401323 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401520+49↓o
.text:00401323                                         ; sub_401520+56↓o
.text:0040132D aP              db '+p',0               ; DATA XREF: sub_401520+80↓o
.text:00401330                 align 20h
.text:00401340 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401340                                         ; DATA XREF: sub_401520:loc_4015D8↓o
.text:00401340                                         ; .text:00401D4F↓o
.text:00401367 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401520+105↓o
.text:00401374 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401520+10D↓o
.text:00401384 aPaulEggert     db 'Paul Eggert',0      ; DATA XREF: sub_401520+118↓o
.text:00401390 a530            db '5.3.0',0            ; DATA XREF: sub_401520+120↓o
.text:00401396 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401520+128↓o
.text:004013A4 ; const FILE stru_4013A4
.text:004013A4 stru_4013A4     FILE <68746170h, 6B6863h, 90909090h, 90909090h, 90909090h, 90909090h, \
.text:004013A4                                         ; DATA XREF: sub_401520+130↓o
.text:004013A4                       90909090h, 67617355h>
.text:004013C4                 db  65h ; e
.text:004013C5                 db  3Ah ; :
.text:004013C6                 db  20h
.text:004013C7                 db  25h ; %
.text:004013C8                 db  73h ; s
.text:004013C9                 db  20h
.text:004013CA                 db  5Bh ; [
.text:004013CB                 db  4Fh ; O
.text:004013CC                 db  50h ; P
.text:004013CD                 db  54h ; T
.text:004013CE                 db  49h ; I
.text:004013CF                 db  4Fh ; O
.text:004013D0                 db  4Eh ; N
.text:004013D1                 db  5Dh ; ]
.text:004013D2                 db  2Eh ; .
.text:004013D3                 db  2Eh ; .
.text:004013D4                 db  2Eh ; .
.text:004013D5                 db  20h
.text:004013D6                 db  4Eh ; N
.text:004013D7                 db  41h ; A
.text:004013D8                 db  4Dh ; M
.text:004013D9                 db  45h ; E
.text:004013DA                 db  2Eh ; .
.text:004013DB                 db  2Eh ; .
.text:004013DC                 db  2Eh ; .
.text:004013DD                 db  0Ah
.text:004013DE                 db    0
.text:004013DF                 align 10h
.text:004013E0 aDiagnoseUnport db 'Diagnose unportable constructs in NAME.',0Ah
.text:004013E0                                         ; DATA XREF: sub_401520+168↓o
.text:004013E0                                         ; .text:00401DA2↓o
.text:004013E0                 db 0Ah
.text:004013E0                 db '  -p, --portability   check for all POSIX systems, not only this '
.text:004013E0                 db 'one',0Ah,0
.text:0040144F                 align 20h
.text:00401460 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401460                                         ; DATA XREF: sub_401520+18A↓o
.text:00401460                                         ; .text:00401DC4↓o
.text:0040148D                 align 20h
.text:004014A0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004014A0                                         ; DATA XREF: sub_401520+1AC↓o
.text:004014A0                                         ; .text:00401DE6↓o
.text:004014D6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401520+1CE↓o
.text:004014D6                                         ; .text:00401E08↓o
.text:004014D6                 db 'Report bugs to <%s>.',0Ah,0
.text:004014ED aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004014ED                                         ; DATA XREF: sub_401520+1DB↓o
.text:004014ED                                         ; .text:00401E15↓o
.text:00401503 aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401520+1FA↓o
.text:00401513                 align 10h
.text:00401520
.text:00401520 ; =============== S U B R O U T I N E =======================================
.text:00401520
.text:00401520 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401520
.text:00401520 sub_401520      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401520
.text:00401520 Category        = dword ptr -38h
.text:00401520 Locale          = dword ptr -34h
.text:00401520 var_30          = dword ptr -30h
.text:00401520 var_2C          = byte ptr -2Ch
.text:00401520 var_28          = byte ptr -28h
.text:00401520 var_24          = dword ptr -24h
.text:00401520 var_20          = dword ptr -20h
.text:00401520 var_1C          = dword ptr -1Ch
.text:00401520 var_B           = byte ptr -0Bh
.text:00401520 var_A           = byte ptr -0Ah
.text:00401520 var_9           = byte ptr -9
.text:00401520 arg_0           = dword ptr  8
.text:00401520 arg_4           = dword ptr  0Ch
.text:00401520
.text:00401520                 push    ebp
.text:00401521                 xor     eax, eax
.text:00401523                 mov     ebp, esp
.text:00401525                 push    esi
.text:00401526                 push    ebx
.text:00401527                 sub     esp, 30h
.text:0040152A                 mov     ebx, [ebp+arg_4]
.text:0040152D                 and     esp, 0FFFFFFF0h
.text:00401530                 mov     esi, [ebp+arg_0]
.text:00401533                 call    __alloca
.text:00401538                 call    sub_40C410
.text:0040153D                 mov     [ebp+var_9], 1
.text:00401541                 mov     edx, [ebx]
.text:00401543                 mov     [ebp+var_A], 0
.text:00401547                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:0040154F                 mov     ds:dword_40F4B0, edx
.text:00401555                 mov     [esp+38h+Category], 0 ; Category
.text:0040155C                 call    setlocale
.text:00401561                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401569                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401570                 call    ds:__imp_libintl_bindtextdomain
.text:00401576                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:0040157D                 call    ds:libintl_textdomain
.text:00401583                 mov     [esp+38h+Category], offset sub_4048D0 ; void (__cdecl *)()
.text:0040158A                 call    sub_401040
.text:0040158F                 nop
.text:00401590
.text:00401590 loc_401590:                             ; CODE XREF: sub_401520+B6↓j
.text:00401590                 mov     dword ptr [esp+38h+var_28], 0
.text:00401598                 mov     dword ptr [esp+38h+var_2C], offset off_4012A0 ; char
.text:004015A0                 mov     [esp+38h+var_30], offset aP ; "+p"
.text:004015A8                 mov     [esp+38h+Locale], ebx
.text:004015AC                 mov     [esp+38h+Category], esi
.text:004015AF                 call    sub_404760
.text:004015B4                 cmp     eax, 0FFFFFFFFh
.text:004015B7                 jz      loc_401710
.text:004015BD                 cmp     eax, 0FFFFFF7Eh
.text:004015C2                 jz      loc_401669
.text:004015C8                 cmp     eax, 0FFFFFF7Eh
.text:004015CD                 jle     short loc_401610
.text:004015CF                 mov     [ebp+var_A], 1
.text:004015D3                 cmp     eax, 70h ; 'p'
.text:004015D6                 jz      short loc_401590
.text:004015D8
.text:004015D8 loc_4015D8:                             ; CODE XREF: sub_401520+F5↓j
.text:004015D8                                         ; sub_401520+21F↓j
.text:004015D8                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004015DF                 call    ds:libintl_gettext
.text:004015E5                 mov     ebx, ds:_iob
.text:004015EB                 mov     esi, ds:dword_40F4B0
.text:004015F1                 add     ebx, 40h ; '@'
.text:004015F4                 mov     [esp+38h+var_30], esi
.text:004015F8                 mov     [esp+38h+Locale], eax ; Format
.text:004015FC                 mov     [esp+38h+Category], ebx ; Stream
.text:004015FF                 call    fprintf
.text:00401604                 mov     [esp+38h+Category], 1 ; Code
.text:0040160B
.text:0040160B loc_40160B:                             ; CODE XREF: sub_401520+147↓j
.text:0040160B                                         ; sub_401520+234↓j
.text:0040160B                 call    exit
.text:00401610 ; ---------------------------------------------------------------------------
.text:00401610
.text:00401610 loc_401610:                             ; CODE XREF: sub_401520+AD↑j
.text:00401610                 cmp     eax, 0FFFFFF7Dh
.text:00401615                 jnz     short loc_4015D8
.text:00401617                 mov     [esp+38h+var_1C], 0
.text:0040161F                 mov     edx, ds:_iob
.text:00401625                 mov     [esp+38h+var_20], offset aJimMeyering ; "Jim Meyering"
.text:0040162D                 mov     [esp+38h+var_24], offset aDavidMackenzie ; "David MacKenzie"
.text:00401635                 add     edx, 20h ; ' '
.text:00401638                 mov     dword ptr [esp+38h+var_28], offset aPaulEggert ; "Paul Eggert"
.text:00401640                 mov     dword ptr [esp+38h+var_2C], offset a530 ; "5.3.0"
.text:00401648                 mov     [esp+38h+var_30], offset aGnuCoreutils ; "GNU coreutils"
.text:00401650                 mov     [esp+38h+Locale], offset stru_4013A4 ; FILE *
.text:00401658                 mov     [esp+38h+Category], edx ; FILE *
.text:0040165B                 call    sub_404720
.text:00401660
.text:00401660 loc_401660:                             ; CODE XREF: sub_401520+1EB↓j
.text:00401660                 mov     [esp+38h+Category], 0
.text:00401667                 jmp     short loc_40160B
.text:00401669 ; ---------------------------------------------------------------------------
.text:00401669
.text:00401669 loc_401669:                             ; CODE XREF: sub_401520+A2↑j
.text:00401669                 mov     [esp+38h+Category], offset stru_4013A4._tmpfname
.text:00401670                 call    ds:libintl_gettext
.text:00401676                 mov     ecx, ds:dword_40F4B0
.text:0040167C                 mov     [esp+38h+Category], eax ; Format
.text:0040167F                 mov     [esp+38h+Locale], ecx
.text:00401683                 call    printf
.text:00401688                 mov     [esp+38h+Category], offset aDiagnoseUnport ; "Diagnose unportable constructs in NAME."...
.text:0040168F                 call    ds:libintl_gettext
.text:00401695                 mov     esi, ds:_iob
.text:0040169B                 add     esi, 20h ; ' '
.text:0040169E                 mov     [esp+38h+Locale], esi ; Stream
.text:004016A2                 mov     [esp+38h+Category], eax ; Buffer
.text:004016A5                 call    fputs
.text:004016AA                 mov     [esp+38h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004016B1                 call    ds:libintl_gettext
.text:004016B7                 mov     ebx, ds:_iob
.text:004016BD                 add     ebx, 20h ; ' '
.text:004016C0                 mov     [esp+38h+Locale], ebx ; Stream
.text:004016C4                 mov     [esp+38h+Category], eax ; Buffer
.text:004016C7                 call    fputs
.text:004016CC                 mov     [esp+38h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004016D3                 call    ds:libintl_gettext
.text:004016D9                 mov     ecx, ds:_iob
.text:004016DF                 add     ecx, 20h ; ' '
.text:004016E2                 mov     [esp+38h+Locale], ecx ; Stream
.text:004016E6                 mov     [esp+38h+Category], eax ; Buffer
.text:004016E9                 call    fputs
.text:004016EE                 mov     [esp+38h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004016F5                 call    ds:libintl_gettext
.text:004016FB                 mov     [esp+38h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401703                 mov     [esp+38h+Category], eax ; Format
.text:00401706                 call    printf
.text:0040170B                 jmp     loc_401660
.text:00401710 ; ---------------------------------------------------------------------------
.text:00401710
.text:00401710 loc_401710:                             ; CODE XREF: sub_401520+97↑j
.text:00401710                 mov     edx, dword_40E020
.text:00401716                 cmp     edx, esi
.text:00401718                 jnz     short loc_401744
.text:0040171A                 mov     [esp+38h+Category], offset aMissingOperand ; "missing operand"
.text:00401721                 call    ds:libintl_gettext
.text:00401727                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:0040172F                 mov     [esp+38h+Category], 0 ; Code
.text:00401736                 mov     [esp+38h+var_30], eax ; char *
.text:0040173A                 call    sub_404D30
.text:0040173F                 jmp     loc_4015D8
.text:00401744 ; ---------------------------------------------------------------------------
.text:00401744
.text:00401744 loc_401744:                             ; CODE XREF: sub_401520+1F8↑j
.text:00401744                 cmp     edx, esi
.text:00401746                 jl      short loc_401759
.text:00401748
.text:00401748 loc_401748:                             ; CODE XREF: sub_401520+278↓j
.text:00401748                 xor     ebx, ebx
.text:0040174A                 cmp     [ebp+var_9], 0
.text:0040174E                 setz    bl
.text:00401751                 mov     [esp+38h+Category], ebx
.text:00401754                 jmp     loc_40160B
.text:00401759 ; ---------------------------------------------------------------------------
.text:00401759
.text:00401759 loc_401759:                             ; CODE XREF: sub_401520+226↑j
.text:00401759                                         ; sub_401520+276↓j
.text:00401759                 movzx   ecx, [ebp+var_A]
.text:0040175D                 mov     [ebp+var_B], 0
.text:00401761                 mov     [esp+38h+Locale], ecx ; char
.text:00401765                 mov     ecx, [ebx+edx*4]
.text:00401768                 mov     [esp+38h+Category], ecx ; char *
.text:0040176B                 call    sub_4018F0
.text:00401770                 test    al, al
.text:00401772                 jz      short loc_40177E
.text:00401774                 cmp     [ebp+var_9], 0
.text:00401778                 jz      short loc_40177E
.text:0040177A                 mov     [ebp+var_B], 1
.text:0040177E
.text:0040177E loc_40177E:                             ; CODE XREF: sub_401520+252↑j
.text:0040177E                                         ; sub_401520+258↑j
.text:0040177E                 movzx   edx, [ebp+var_B]
.text:00401782                 mov     ecx, dword_40E020
.text:00401788                 inc     ecx
.text:00401789                 mov     [ebp+var_9], dl
.text:0040178C                 cmp     ecx, esi
.text:0040178E                 mov     edx, ecx
.text:00401790                 mov     dword_40E020, ecx
.text:00401796                 jl      short loc_401759
.text:00401798                 jmp     short loc_401748
.text:00401798 sub_401520      endp
.text:00401798
.text:00401798 ; ---------------------------------------------------------------------------
.text:0040179A word_40179A     dw 2Fh                  ; DATA XREF: sub_4018F0+60↓o
.text:0040179C dword_40179C    dd 0F689002Eh           ; DATA XREF: sub_4018F0+67↓o
.text:0040179C                                         ; sub_4018F0:loc_401B5D↓o
.text:004017A0 aLimitLuExceede db 'limit %lu exceeded by length %lu of file name component %s',0
.text:004017A0                                         ; DATA XREF: sub_4018F0+197↓o
.text:004017DB ; const char aS[]
.text:004017DB aS              db '%s',0               ; DATA XREF: sub_4018F0+23F↓o
.text:004017DB                                         ; sub_4018F0+2DF↓o
.text:004017DE                 align 10h
.text:004017E0 aLimitLuExceede_0 db 'limit %lu exceeded by length %lu of file name %s',0
.text:004017E0                                         ; DATA XREF: sub_4018F0+31B↓o
.text:00401811                 db 0EBh, 0Dh, 90h
.text:00401814                 align 10h
.text:00401820 aSUnableToDeter db '%s: unable to determine maximum file name length',0
.text:00401820                                         ; DATA XREF: sub_4018F0+362↓o
.text:00401851                 db 0EBh, 0Dh, 90h
.text:00401854                 align 10h
.text:00401860 ; const char Control[]
.text:00401860 Control         db '/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789._'
.text:00401860                                         ; DATA XREF: sub_4018F0:loc_401C73↓o
.text:00401860                 db '-',0
.text:004018A3                 align 20h
.text:004018C0 aNonportableCha db 'nonportable character %s in file name %s',0
.text:004018C0                                         ; DATA XREF: sub_4018F0+40D↓o
.text:004018E9                 align 10h
.text:004018F0
.text:004018F0 ; =============== S U B R O U T I N E =======================================
.text:004018F0
.text:004018F0
.text:004018F0 ; int __cdecl sub_4018F0(char *, char)
.text:004018F0 sub_4018F0      proc near               ; CODE XREF: sub_401520+24B↑p
.text:004018F0
.text:004018F0 Str             = dword ptr -0BCh
.text:004018F0 Control         = dword ptr -0B8h
.text:004018F0 State           = dword ptr -0B4h
.text:004018F0 var_B0          = byte ptr -0B0h
.text:004018F0 var_AC          = dword ptr -0ACh
.text:004018F0 var_A8          = dword ptr -0A8h
.text:004018F0 var_9C          = dword ptr -9Ch
.text:004018F0 var_98          = byte ptr -98h
.text:004018F0 var_92          = byte ptr -92h
.text:004018F0 var_91          = byte ptr -91h
.text:004018F0 var_90          = mbstate_t ptr -90h
.text:004018F0 arg_0           = dword ptr  4
.text:004018F0 arg_4           = byte ptr  8
.text:004018F0
.text:004018F0                 push    ebp
.text:004018F1                 push    edi
.text:004018F2                 push    esi
.text:004018F3                 push    ebx
.text:004018F4                 sub     esp, 0ACh
.text:004018FA                 mov     eax, [esp+0BCh+arg_0]
.text:00401901                 movzx   edx, [esp+0BCh+arg_4]
.text:00401909                 mov     [esp+0BCh+Str], eax ; Str
.text:0040190C                 mov     [esp+0BCh+var_91], dl
.text:00401910                 call    strlen
.text:00401915                 cmp     [esp+0BCh+var_91], 0
.text:0040191A                 mov     edi, eax
.text:0040191C                 jnz     loc_401C73
.text:00401922
.text:00401922 loc_401922:                             ; CODE XREF: sub_4018F0+3A6↓j
.text:00401922                 mov     ecx, [esp+0BCh+arg_0]
.text:00401929                 mov     eax, 1
.text:0040192E                 movzx   edx, byte ptr [ecx]
.text:00401931                 test    dl, dl
.text:00401933                 jz      loc_401AC4
.text:00401939                 cmp     [esp+0BCh+var_91], 0
.text:0040193E                 mov     eax, 100h
.text:00401943                 jnz     short loc_401983
.text:00401945                 cmp     edi, 0FFh
.text:0040194B                 jbe     short loc_40198B
.text:0040194D                 cmp     dl, 2Fh ; '/'
.text:00401950                 mov     esi, offset word_40179A
.text:00401955                 jz      short loc_40195C
.text:00401957                 mov     esi, offset dword_40179C
.text:0040195C
.text:0040195C loc_40195C:                             ; CODE XREF: sub_4018F0+65↑j
.text:0040195C                 call    _errno
.text:00401961                 mov     dword ptr [eax], 0
.text:00401967                 mov     [esp+0BCh+Control], 4
.text:0040196F                 mov     [esp+0BCh+Str], esi
.text:00401972                 call    sub_405050
.text:00401977                 test    eax, eax
.text:00401979                 mov     ebx, eax
.text:0040197B                 js      loc_401C43
.text:00401981
.text:00401981 loc_401981:                             ; CODE XREF: sub_4018F0+35C↓j
.text:00401981                 mov     eax, ebx
.text:00401983
.text:00401983 loc_401983:                             ; CODE XREF: sub_4018F0+53↑j
.text:00401983                 cmp     eax, edi
.text:00401985                 jbe     loc_401BF9
.text:0040198B
.text:0040198B loc_40198B:                             ; CODE XREF: sub_4018F0+5B↑j
.text:0040198B                 cmp     [esp+0BCh+var_91], 0
.text:00401990                 jz      loc_401B9D
.text:00401996
.text:00401996 loc_401996:                             ; CODE XREF: sub_4018F0+2C6↓j
.text:00401996                                         ; sub_4018F0+2D4↓j
.text:00401996                 movzx   ebx, [esp+0BCh+var_91]
.text:0040199B                 test    bl, bl
.text:0040199D                 mov     [esp+0BCh+var_92], bl
.text:004019A1                 jnz     short loc_4019EC
.text:004019A3                 mov     edx, [esp+0BCh+arg_0]
.text:004019AA                 lea     esi, [esi+0]
.text:004019B0
.text:004019B0 loc_4019B0:                             ; CODE XREF: sub_4018F0+FA↓j
.text:004019B0                 cmp     byte ptr [edx], 2Fh ; '/'
.text:004019B3                 mov     ecx, edx
.text:004019B5                 jz      loc_401B90
.text:004019BB                 movzx   eax, byte ptr [edx]
.text:004019BE
.text:004019BE loc_4019BE:                             ; CODE XREF: sub_4018F0+2A8↓j
.text:004019BE                 test    al, al
.text:004019C0                 jz      loc_401B7F
.text:004019C6                 movzx   eax, byte ptr [ecx+1]
.text:004019CA                 mov     ebx, 1
.text:004019CF                 cmp     al, 2Fh ; '/'
.text:004019D1                 jz      short loc_4019E4
.text:004019D3                 test    al, al
.text:004019D5                 jz      short loc_4019E4
.text:004019D7
.text:004019D7 loc_4019D7:                             ; CODE XREF: sub_4018F0+F2↓j
.text:004019D7                 inc     ebx
.text:004019D8                 movzx   eax, byte ptr [ebx+ecx]
.text:004019DC                 cmp     al, 2Fh ; '/'
.text:004019DE                 jz      short loc_4019E4
.text:004019E0                 test    al, al
.text:004019E2                 jnz     short loc_4019D7
.text:004019E4
.text:004019E4 loc_4019E4:                             ; CODE XREF: sub_4018F0+E1↑j
.text:004019E4                                         ; sub_4018F0+E5↑j ...
.text:004019E4                 cmp     ebx, 0Eh
.text:004019E7                 lea     edx, [ebx+ecx]
.text:004019EA                 jbe     short loc_4019B0
.text:004019EC
.text:004019EC loc_4019EC:                             ; CODE XREF: sub_4018F0+B1↑j
.text:004019EC                                         ; sub_4018F0+296↓j
.text:004019EC                 cmp     [esp+0BCh+var_91], 0
.text:004019F1                 mov     dword ptr [esp+0BCh+var_98], 0Eh
.text:004019F9                 mov     [esp+0BCh+var_9C], 0Eh
.text:00401A01                 jnz     short loc_401A0B
.text:00401A03                 mov     [esp+0BCh+var_9C], 0
.text:00401A0B
.text:00401A0B loc_401A0B:                             ; CODE XREF: sub_4018F0+111↑j
.text:00401A0B                 mov     edx, [esp+0BCh+arg_0]
.text:00401A12                 lea     esi, [esi+0]
.text:00401A19                 lea     edi, [edi+0]
.text:00401A20
.text:00401A20 loc_401A20:                             ; CODE XREF: sub_4018F0+183↓j
.text:00401A20                 cmp     byte ptr [edx], 2Fh ; '/'
.text:00401A23                 mov     edi, edx
.text:00401A25                 jz      loc_401B71
.text:00401A2B                 movzx   ebx, byte ptr [edx]
.text:00401A2E
.text:00401A2E loc_401A2E:                             ; CODE XREF: sub_4018F0+28A↓j
.text:00401A2E                 test    bl, bl
.text:00401A30                 jz      loc_401B67
.text:00401A36                 mov     ebp, [esp+0BCh+var_9C]
.text:00401A3A                 test    ebp, ebp
.text:00401A3C                 jz      loc_401AD0
.text:00401A42                 mov     eax, [esp+0BCh+var_9C]
.text:00401A46
.text:00401A46 loc_401A46:                             ; CODE XREF: sub_4018F0+211↓j
.text:00401A46                 mov     dword ptr [esp+0BCh+var_98], eax
.text:00401A4A
.text:00401A4A loc_401A4A:                             ; CODE XREF: sub_4018F0+22D↓j
.text:00401A4A                                         ; sub_4018F0+268↓j
.text:00401A4A                 movzx   eax, byte ptr [edi+1]
.text:00401A4E                 mov     ebp, 1
.text:00401A53                 cmp     al, 2Fh ; '/'
.text:00401A55                 jz      short loc_401A69
.text:00401A57                 test    al, al
.text:00401A59                 jz      short loc_401A69
.text:00401A5B
.text:00401A5B loc_401A5B:                             ; CODE XREF: sub_4018F0+177↓j
.text:00401A5B                 inc     ebp
.text:00401A5C                 movzx   eax, byte ptr [ebp+edi+0]
.text:00401A61                 cmp     al, 2Fh ; '/'
.text:00401A63                 jz      short loc_401A69
.text:00401A65                 test    al, al
.text:00401A67                 jnz     short loc_401A5B
.text:00401A69
.text:00401A69 loc_401A69:                             ; CODE XREF: sub_4018F0+165↑j
.text:00401A69                                         ; sub_4018F0+169↑j ...
.text:00401A69                 cmp     dword ptr [esp+0BCh+var_98], ebp
.text:00401A6D                 jb      short loc_401A75
.text:00401A6F                 lea     edx, [ebp+edi+0]
.text:00401A73                 jmp     short loc_401A20
.text:00401A75 ; ---------------------------------------------------------------------------
.text:00401A75
.text:00401A75 loc_401A75:                             ; CODE XREF: sub_4018F0+17D↑j
.text:00401A75                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00401A7A                 mov     byte ptr [ebp+edi+0], 0
.text:00401A7F                 mov     [esp+0BCh+Str], edi ; char *
.text:00401A82                 call    sub_404230
.text:00401A87                 mov     [esp+0BCh+Str], offset aLimitLuExceede ; "limit %lu exceeded by length %lu of fil"...
.text:00401A8E                 mov     esi, eax
.text:00401A90                 call    ds:libintl_gettext
.text:00401A96                 mov     [esp+0BCh+var_A8], esi
.text:00401A9A                 mov     esi, dword ptr [esp+0BCh+var_98]
.text:00401A9E                 mov     [esp+0BCh+var_AC], ebp
.text:00401AA2                 mov     [esp+0BCh+State], eax ; char *
.text:00401AA6                 mov     dword ptr [esp+0BCh+var_B0], esi ; char
.text:00401AAA                 mov     [esp+0BCh+Control], 0 ; ErrorMessage
.text:00401AB2                 mov     [esp+0BCh+Str], 0 ; Code
.text:00401AB9                 call    sub_404D30
.text:00401ABE                 mov     [ebp+edi+0], bl
.text:00401AC2
.text:00401AC2 loc_401AC2:                             ; CODE XREF: sub_4018F0+25B↓j
.text:00401AC2                                         ; sub_4018F0+304↓j ...
.text:00401AC2                 xor     eax, eax
.text:00401AC4
.text:00401AC4 loc_401AC4:                             ; CODE XREF: sub_4018F0+43↑j
.text:00401AC4                                         ; sub_4018F0+27C↓j
.text:00401AC4                 add     esp, 0ACh
.text:00401ACA                 pop     ebx
.text:00401ACB                 pop     esi
.text:00401ACC                 pop     edi
.text:00401ACD                 pop     ebp
.text:00401ACE                 retn
.text:00401ACE ; ---------------------------------------------------------------------------
.text:00401ACF                 align 10h
.text:00401AD0
.text:00401AD0 loc_401AD0:                             ; CODE XREF: sub_4018F0+14C↑j
.text:00401AD0                 mov     esi, [esp+0BCh+arg_0]
.text:00401AD7                 cmp     edi, esi
.text:00401AD9                 jz      loc_401B5D
.text:00401ADF
.text:00401ADF loc_401ADF:                             ; CODE XREF: sub_4018F0+272↓j
.text:00401ADF                 call    _errno
.text:00401AE4                 mov     dword ptr [eax], 0
.text:00401AEA                 mov     byte ptr [edi], 0
.text:00401AED                 mov     [esp+0BCh+Control], 3
.text:00401AF5                 mov     [esp+0BCh+Str], esi
.text:00401AF8                 call    sub_405050
.text:00401AFD                 mov     [edi], bl
.text:00401AFF                 test    eax, eax
.text:00401B01                 jns     loc_401A46
.text:00401B07                 call    _errno
.text:00401B0C                 mov     eax, [eax]
.text:00401B0E                 test    eax, eax
.text:00401B10                 jz      short loc_401B50
.text:00401B12                 mov     ecx, dword ptr [esp+0BCh+var_98]
.text:00401B16                 cmp     eax, 2
.text:00401B19                 mov     [esp+0BCh+var_9C], ecx
.text:00401B1D                 jz      loc_401A4A
.text:00401B23                 mov     byte ptr [edi], 0
.text:00401B26                 call    _errno
.text:00401B2B                 mov     dword ptr [esp+0BCh+var_B0], esi ; char
.text:00401B2F                 mov     [esp+0BCh+State], offset aS ; "%s"
.text:00401B37                 mov     edx, [eax]
.text:00401B39                 mov     [esp+0BCh+Str], 0 ; Code
.text:00401B40                 mov     [esp+0BCh+Control], edx ; ErrorMessage
.text:00401B44                 call    sub_404D30
.text:00401B49                 mov     [edi], bl
.text:00401B4B                 jmp     loc_401AC2
.text:00401B50 ; ---------------------------------------------------------------------------
.text:00401B50
.text:00401B50 loc_401B50:                             ; CODE XREF: sub_4018F0+220↑j
.text:00401B50                 mov     dword ptr [esp+0BCh+var_98], 0FFFFFFFFh
.text:00401B58                 jmp     loc_401A4A
.text:00401B5D ; ---------------------------------------------------------------------------
.text:00401B5D
.text:00401B5D loc_401B5D:                             ; CODE XREF: sub_4018F0+1E9↑j
.text:00401B5D                 mov     esi, offset dword_40179C
.text:00401B62                 jmp     loc_401ADF
.text:00401B67 ; ---------------------------------------------------------------------------
.text:00401B67
.text:00401B67 loc_401B67:                             ; CODE XREF: sub_4018F0+140↑j
.text:00401B67                                         ; sub_4018F0+294↓j
.text:00401B67                 mov     eax, 1
.text:00401B6C                 jmp     loc_401AC4
.text:00401B71 ; ---------------------------------------------------------------------------
.text:00401B71
.text:00401B71 loc_401B71:                             ; CODE XREF: sub_4018F0+135↑j
.text:00401B71                                         ; sub_4018F0+288↓j
.text:00401B71                 inc     edi
.text:00401B72                 movzx   ebx, byte ptr [edi]
.text:00401B75                 cmp     bl, 2Fh ; '/'
.text:00401B78                 jz      short loc_401B71
.text:00401B7A                 jmp     loc_401A2E
.text:00401B7F ; ---------------------------------------------------------------------------
.text:00401B7F
.text:00401B7F loc_401B7F:                             ; CODE XREF: sub_4018F0+D0↑j
.text:00401B7F                 cmp     [esp+0BCh+var_92], 0
.text:00401B84                 jz      short loc_401B67
.text:00401B86                 jmp     loc_4019EC
.text:00401B86 ; ---------------------------------------------------------------------------
.text:00401B8B                 align 10h
.text:00401B90
.text:00401B90 loc_401B90:                             ; CODE XREF: sub_4018F0+C5↑j
.text:00401B90                                         ; sub_4018F0+2A6↓j
.text:00401B90                 inc     ecx
.text:00401B91                 movzx   eax, byte ptr [ecx]
.text:00401B94                 cmp     al, 2Fh ; '/'
.text:00401B96                 jz      short loc_401B90
.text:00401B98                 jmp     loc_4019BE
.text:00401B9D ; ---------------------------------------------------------------------------
.text:00401B9D
.text:00401B9D loc_401B9D:                             ; CODE XREF: sub_4018F0+A0↑j
.text:00401B9D                 mov     edx, [esp+0BCh+arg_0]
.text:00401BA4                 lea     esi, [esp+0BCh+var_90._Byte]
.text:00401BA8                 mov     [esp+0BCh+Control], esi
.text:00401BAC                 mov     [esp+0BCh+Str], edx
.text:00401BAF                 call    sub_404FD0
.text:00401BB4                 test    eax, eax
.text:00401BB6                 jz      loc_401996
.text:00401BBC                 call    _errno
.text:00401BC1                 cmp     dword ptr [eax], 2
.text:00401BC4                 jz      loc_401996
.text:00401BCA                 call    _errno
.text:00401BCF                 mov     [esp+0BCh+State], offset aS ; "%s"
.text:00401BD7                 mov     ecx, [esp+0BCh+arg_0]
.text:00401BDE                 mov     dword ptr [esp+0BCh+var_B0], ecx ; char
.text:00401BE2
.text:00401BE2 loc_401BE2:                             ; CODE XREF: sub_4018F0+37E↓j
.text:00401BE2                 mov     edi, [eax]
.text:00401BE4                 mov     [esp+0BCh+Str], 0 ; Code
.text:00401BEB                 mov     [esp+0BCh+Control], edi ; ErrorMessage
.text:00401BEF                 call    sub_404D30
.text:00401BF4                 jmp     loc_401AC2
.text:00401BF9 ; ---------------------------------------------------------------------------
.text:00401BF9
.text:00401BF9 loc_401BF9:                             ; CODE XREF: sub_4018F0+95↑j
.text:00401BF9                 lea     ebp, [eax-1]
.text:00401BFC                 mov     eax, [esp+0BCh+arg_0]
.text:00401C03                 mov     [esp+0BCh+Str], eax ; char *
.text:00401C06                 call    sub_404230
.text:00401C0B                 mov     [esp+0BCh+Str], offset aLimitLuExceede_0 ; "limit %lu exceeded by length %lu of fil"...
.text:00401C12                 mov     ebx, eax
.text:00401C14                 call    ds:libintl_gettext
.text:00401C1A                 mov     [esp+0BCh+var_A8], ebx
.text:00401C1E                 mov     [esp+0BCh+var_AC], edi
.text:00401C22                 mov     dword ptr [esp+0BCh+var_B0], ebp ; char
.text:00401C26                 mov     [esp+0BCh+State], eax ; char *
.text:00401C2A                 mov     [esp+0BCh+Control], 0 ; ErrorMessage
.text:00401C32                 mov     [esp+0BCh+Str], 0 ; Code
.text:00401C39                 call    sub_404D30
.text:00401C3E                 jmp     loc_401AC2
.text:00401C43 ; ---------------------------------------------------------------------------
.text:00401C43
.text:00401C43 loc_401C43:                             ; CODE XREF: sub_4018F0+8B↑j
.text:00401C43                 call    _errno
.text:00401C48                 mov     ebp, [eax]
.text:00401C4A                 test    ebp, ebp
.text:00401C4C                 jz      loc_401981
.text:00401C52                 mov     [esp+0BCh+Str], offset aSUnableToDeter ; "%s: unable to determine maximum file na"...
.text:00401C59                 call    ds:libintl_gettext
.text:00401C5F                 mov     edi, eax
.text:00401C61                 call    _errno
.text:00401C66                 mov     dword ptr [esp+0BCh+var_B0], esi
.text:00401C6A                 mov     [esp+0BCh+State], edi
.text:00401C6E                 jmp     loc_401BE2
.text:00401C73 ; ---------------------------------------------------------------------------
.text:00401C73
.text:00401C73 loc_401C73:                             ; CODE XREF: sub_4018F0+2C↑j
.text:00401C73                 mov     [esp+0BCh+Control], offset Control ; "/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkl"...
.text:00401C7B                 mov     ecx, [esp+0BCh+arg_0]
.text:00401C82                 mov     [esp+0BCh+Str], ecx ; Str
.text:00401C85                 call    strspn
.text:00401C8A                 mov     esi, [esp+0BCh+arg_0]
.text:00401C91                 add     esi, eax
.text:00401C93                 cmp     byte ptr [esi], 0
.text:00401C96                 jz      loc_401922
.text:00401C9C                 mov     [esp+0BCh+var_90._Wchar], 0
.text:00401CA4                 sub     edi, eax
.text:00401CA6                 lea     ebx, [esp+0BCh+var_90]
.text:00401CAA                 mov     [esp+0BCh+Control], edi ; SizeInBytes
.text:00401CAE                 mov     [esp+0BCh+State], ebx ; State
.text:00401CB2                 mov     [esp+0BCh+Str], esi ; Ch
.text:00401CB5                 call    mbrlen
.text:00401CBA                 mov     [esp+0BCh+Str], 0 ; int
.text:00401CC1                 mov     ebp, eax
.text:00401CC3                 mov     eax, [esp+0BCh+arg_0]
.text:00401CCA                 mov     [esp+0BCh+Control], eax ; char *
.text:00401CCE                 call    sub_404200
.text:00401CD3                 cmp     ebp, 2
.text:00401CD6                 mov     edi, eax
.text:00401CD8                 mov     eax, ebp
.text:00401CDA                 jbe     short loc_401CE1
.text:00401CDC                 mov     eax, 1
.text:00401CE1
.text:00401CE1 loc_401CE1:                             ; CODE XREF: sub_4018F0+3EA↑j
.text:00401CE1                 mov     [esp+0BCh+State], esi ; char *
.text:00401CE5                 mov     dword ptr [esp+0BCh+var_B0], eax ; int
.text:00401CE9                 mov     [esp+0BCh+Control], 5 ; int
.text:00401CF1                 mov     [esp+0BCh+Str], 1 ; int
.text:00401CF8                 call    sub_402CE0
.text:00401CFD                 mov     [esp+0BCh+Str], offset aNonportableCha ; "nonportable character %s in file name %"...
.text:00401D04                 mov     esi, eax
.text:00401D06                 call    ds:libintl_gettext
.text:00401D0C                 mov     [esp+0BCh+var_AC], edi
.text:00401D10                 mov     dword ptr [esp+0BCh+var_B0], esi ; char
.text:00401D14                 mov     [esp+0BCh+Control], 0 ; ErrorMessage
.text:00401D1C                 mov     [esp+0BCh+State], eax ; char *
.text:00401D20                 mov     [esp+0BCh+Str], 0 ; Code
.text:00401D27                 call    sub_404D30
.text:00401D2C                 jmp     loc_401AC2
.text:00401D2C sub_4018F0      endp
.text:00401D2C
.text:00401D31 ; ---------------------------------------------------------------------------
.text:00401D31                 jmp     short loc_401D40
.text:00401D31 ; ---------------------------------------------------------------------------
.text:00401D33                 align 10h
.text:00401D40
.text:00401D40 loc_401D40:                             ; CODE XREF: .text:00401D31↑j
.text:00401D40                 sub     esp, 1Ch
.text:00401D43                 mov     [esp+18h], ebx
.text:00401D47                 mov     ebx, [esp+20h]
.text:00401D4B                 test    ebx, ebx
.text:00401D4D                 jz      short loc_401D83
.text:00401D4F                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401D56                 call    ds:libintl_gettext
.text:00401D5C                 mov     edx, ds:_iob
.text:00401D62                 mov     ecx, ds:dword_40F4B0
.text:00401D68                 add     edx, 40h ; '@'
.text:00401D6B                 mov     [esp+8], ecx
.text:00401D6F                 mov     [esp+4], eax
.text:00401D73                 mov     [esp], edx
.text:00401D76                 call    fprintf
.text:00401D7B
.text:00401D7B loc_401D7B:                             ; CODE XREF: .text:00401E25↓j
.text:00401D7B                 mov     [esp], ebx
.text:00401D7E                 call    exit
.text:00401D83 ; ---------------------------------------------------------------------------
.text:00401D83
.text:00401D83 loc_401D83:                             ; CODE XREF: .text:00401D4D↑j
.text:00401D83                 mov     dword ptr [esp], offset stru_4013A4._tmpfname
.text:00401D8A                 call    ds:libintl_gettext
.text:00401D90                 mov     ecx, ds:dword_40F4B0
.text:00401D96                 mov     [esp], eax
.text:00401D99                 mov     [esp+4], ecx
.text:00401D9D                 call    printf
.text:00401DA2                 mov     dword ptr [esp], offset aDiagnoseUnport ; "Diagnose unportable constructs in NAME."...
.text:00401DA9                 call    ds:libintl_gettext
.text:00401DAF                 mov     ecx, ds:_iob
.text:00401DB5                 add     ecx, 20h ; ' '
.text:00401DB8                 mov     [esp+4], ecx
.text:00401DBC                 mov     [esp], eax
.text:00401DBF                 call    fputs
.text:00401DC4                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401DCB                 call    ds:libintl_gettext
.text:00401DD1                 mov     ecx, ds:_iob
.text:00401DD7                 add     ecx, 20h ; ' '
.text:00401DDA                 mov     [esp+4], ecx
.text:00401DDE                 mov     [esp], eax
.text:00401DE1                 call    fputs
.text:00401DE6                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401DED                 call    ds:libintl_gettext
.text:00401DF3                 mov     ecx, ds:_iob
.text:00401DF9                 add     ecx, 20h ; ' '
.text:00401DFC                 mov     [esp+4], ecx
.text:00401E00                 mov     [esp], eax
.text:00401E03                 call    fputs
.text:00401E08                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401E0F                 call    ds:libintl_gettext
.text:00401E15                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401E1D                 mov     [esp], eax
.text:00401E20                 call    printf
.text:00401E25                 jmp     loc_401D7B
.text:00401E25 ; ---------------------------------------------------------------------------
.text:00401E2A                 align 20h
.text:00401E40 aLiteral        db 'literal',0          ; DATA XREF: .text:00401E80↓o
.text:00401E48 aShell          db 'shell',0            ; DATA XREF: .text:00401E84↓o
.text:00401E4E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00401E88↓o
.text:00401E5B aC              db 'c',0                ; DATA XREF: .text:00401E8C↓o
.text:00401E5D aEscape         db 'escape',0           ; DATA XREF: .text:00401E90↓o
.text:00401E64 aLocale         db 'locale',0           ; DATA XREF: .text:00401E94↓o
.text:00401E6B aClocale        db 'clocale',0          ; DATA XREF: .text:00401E98↓o
.text:00401E73                 align 10h
.text:00401E80                 dd offset aLiteral      ; "literal"
.text:00401E84                 dd offset aShell        ; "shell"
.text:00401E88                 dd offset aShellAlways  ; "shell-always"
.text:00401E8C                 dd offset aC            ; "c"
.text:00401E90                 dd offset aEscape       ; "escape"
.text:00401E94                 dd offset aLocale       ; "locale"
.text:00401E98                 dd offset aClocale      ; "clocale"
.text:00401E9C                 dd 2 dup(0)
.text:00401EA4                 dd 1, 2, 3, 4, 5, 6
.text:00401EBC asc_401EBC:                             ; DATA XREF: sub_401ED0+7E↓o
.text:00401EBC                                         ; sub_401ED0+A39↓o ...
.text:00401EBC                 text "UTF-16LE", '"',27h,'`'
.text:00401EC2                 align 10h
.text:00401ED0
.text:00401ED0 ; =============== S U B R O U T I N E =======================================
.text:00401ED0
.text:00401ED0
.text:00401ED0 ; int __cdecl sub_401ED0(int, int, char *Str, int, int, int)
.text:00401ED0 sub_401ED0      proc near               ; CODE XREF: sub_401ED0+43A↓p
.text:00401ED0                                         ; .text:00402A93↓p ...
.text:00401ED0
.text:00401ED0 C               = dword ptr -4Ch
.text:00401ED0 Type            = dword ptr -48h
.text:00401ED0 SizeInBytes     = dword ptr -44h
.text:00401ED0 State           = dword ptr -40h
.text:00401ED0 var_3C          = dword ptr -3Ch
.text:00401ED0 var_38          = dword ptr -38h
.text:00401ED0 var_34          = dword ptr -34h
.text:00401ED0 var_30          = dword ptr -30h
.text:00401ED0 var_29          = byte ptr -29h
.text:00401ED0 var_28          = dword ptr -28h
.text:00401ED0 var_22          = byte ptr -22h
.text:00401ED0 var_21          = byte ptr -21h
.text:00401ED0 var_20          = dword ptr -20h
.text:00401ED0 var_1C          = dword ptr -1Ch
.text:00401ED0 var_18          = mbstate_t ptr -18h
.text:00401ED0 arg_0           = dword ptr  4
.text:00401ED0 arg_4           = dword ptr  8
.text:00401ED0 Str             = dword ptr  0Ch
.text:00401ED0 arg_C           = dword ptr  10h
.text:00401ED0 arg_10          = dword ptr  14h
.text:00401ED0 arg_14          = dword ptr  18h
.text:00401ED0
.text:00401ED0                 push    ebp
.text:00401ED1                 push    edi
.text:00401ED2                 push    esi
.text:00401ED3                 push    ebx
.text:00401ED4                 sub     esp, 3Ch
.text:00401ED7                 mov     edx, ds:__mb_cur_max
.text:00401EDD                 mov     [esp+4Ch+var_34], 0
.text:00401EE5                 mov     [esp+4Ch+var_1C], 0
.text:00401EED                 cmp     dword ptr [edx], 1
.text:00401EF0                 mov     [esp+4Ch+var_20], 0
.text:00401EF8                 mov     [esp+4Ch+var_21], 0
.text:00401EFD                 setz    [esp+4Ch+var_22]
.text:00401F02                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00401F07                 ja      short def_401F0D ; jumptable 00401F0D default case, cases 0,1
.text:00401F09                 mov     edx, [esp+4Ch+arg_10]
.text:00401F0D                 jmp     ds:jpt_401F0D[edx*4] ; switch jump
.text:00401F0D ; ---------------------------------------------------------------------------
.text:00401F14 jpt_401F0D      dd offset def_401F0D    ; DATA XREF: sub_401ED0+3D↑r
.text:00401F14                 dd offset def_401F0D    ; jump table for switch statement
.text:00401F14                 dd offset loc_402855
.text:00401F14                 dd offset loc_401F30
.text:00401F14                 dd offset loc_40287B
.text:00401F14                 dd offset loc_402885
.text:00401F14                 dd offset loc_402885
.text:00401F30 ; ---------------------------------------------------------------------------
.text:00401F30
.text:00401F30 loc_401F30:                             ; CODE XREF: sub_401ED0+3D↑j
.text:00401F30                                         ; DATA XREF: sub_401ED0:jpt_401F0D↑o
.text:00401F30                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00401F0D case 3
.text:00401F34                 cmp     [esp+4Ch+var_34], eax
.text:00401F38                 jnb     short loc_401F41
.text:00401F3A                 mov     ebx, [esp+4Ch+arg_0]
.text:00401F3E                 mov     byte ptr [ebx], 22h ; '"'
.text:00401F41
.text:00401F41 loc_401F41:                             ; CODE XREF: sub_401ED0+68↑j
.text:00401F41                 mov     [esp+4Ch+var_34], 1
.text:00401F49                 mov     [esp+4Ch+var_21], 1
.text:00401F4E                 mov     [esp+4Ch+var_1C], offset asc_401EBC ; "\"'`"
.text:00401F56
.text:00401F56 loc_401F56:                             ; CODE XREF: sub_401ED0+9A6↓j
.text:00401F56                 mov     [esp+4Ch+var_20], 1
.text:00401F5E
.text:00401F5E def_401F0D:                             ; CODE XREF: sub_401ED0+37↑j
.text:00401F5E                                         ; sub_401ED0+3D↑j ...
.text:00401F5E                 xor     ebp, ebp        ; jumptable 00401F0D default case, cases 0,1
.text:00401F60
.text:00401F60 loc_401F60:                             ; CODE XREF: sub_401ED0+3DB↓j
.text:00401F60                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00401F65                 jz      loc_402847
.text:00401F6B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00401F6F
.text:00401F6F loc_401F6F:                             ; CODE XREF: sub_401ED0+980↓j
.text:00401F6F                 jz      loc_4027DE
.text:00401F75                 cmp     [esp+4Ch+var_21], 0
.text:00401F7A                 jz      short loc_401FC0
.text:00401F7C                 mov     esi, [esp+4Ch+var_20]
.text:00401F80                 test    esi, esi
.text:00401F82                 jz      short loc_401FC0
.text:00401F84                 mov     ecx, [esp+4Ch+var_20]
.text:00401F88                 lea     edi, [ecx+ebp]
.text:00401F8B                 cmp     edi, [esp+4Ch+arg_C]
.text:00401F8F                 ja      short loc_401FC0
.text:00401F91                 cld
.text:00401F92                 mov     ebx, [esp+4Ch+Str]
.text:00401F96                 mov     edi, [esp+4Ch+var_1C]
.text:00401F9A                 add     ebx, ebp
.text:00401F9C                 mov     esi, ebx
.text:00401F9E                 cmp     ecx, ecx
.text:00401FA0                 repe cmpsb
.text:00401FA2                 jnz     short loc_401FC0
.text:00401FA4                 mov     edx, [esp+4Ch+arg_4]
.text:00401FA8                 cmp     [esp+4Ch+var_34], edx
.text:00401FAC                 jnb     short loc_401FBA
.text:00401FAE                 mov     ecx, [esp+4Ch+arg_0]
.text:00401FB2                 mov     eax, [esp+4Ch+var_34]
.text:00401FB6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00401FBA
.text:00401FBA loc_401FBA:                             ; CODE XREF: sub_401ED0+DC↑j
.text:00401FBA                 inc     [esp+4Ch+var_34]
.text:00401FBE                 mov     esi, esi
.text:00401FC0
.text:00401FC0 loc_401FC0:                             ; CODE XREF: sub_401ED0+AA↑j
.text:00401FC0                                         ; sub_401ED0+B2↑j ...
.text:00401FC0                 mov     edi, [esp+4Ch+Str]
.text:00401FC4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00401FC9                 movzx   eax, bl
.text:00401FCC                 cmp     eax, 7Eh        ; switch 127 cases
.text:00401FCF                 ja      def_401FD5      ; jumptable 00401FD5 default case, cases 1-6,14-31,64
.text:00401FD5                 jmp     ds:jpt_401FD5[eax*4] ; switch jump
.text:00401FD5 ; ---------------------------------------------------------------------------
.text:00401FDC jpt_401FD5      dd offset loc_4021D8, offset def_401FD5, offset def_401FD5
.text:00401FDC                                         ; DATA XREF: sub_401ED0+105↑r
.text:00401FDC                 dd offset def_401FD5, offset def_401FD5, offset def_401FD5 ; jump table for switch statement
.text:00401FDC                 dd offset def_401FD5, offset loc_4022B0, offset loc_4022CE
.text:00401FDC                 dd offset loc_4022D2, offset loc_402317, offset loc_40231B
.text:00401FDC                 dd offset loc_40231F, offset loc_402323, offset def_401FD5
.text:00401FDC                 dd offset def_401FD5, offset def_401FD5, offset def_401FD5
.text:00401FDC                 dd offset def_401FD5, offset def_401FD5, offset def_401FD5
.text:00401FDC                 dd offset def_401FD5, offset def_401FD5, offset def_401FD5
.text:00401FDC                 dd offset def_401FD5, offset def_401FD5, offset def_401FD5
.text:00401FDC                 dd offset def_401FD5, offset def_401FD5, offset def_401FD5
.text:00401FDC                 dd offset def_401FD5, offset def_401FD5, offset loc_4027A8
.text:00401FDC                 dd offset loc_4027A8, offset loc_4027A8, offset loc_4027CA
.text:00401FDC                 dd offset loc_4027A8, offset def_4023D2, offset loc_4027A8
.text:00401FDC                 dd offset loc_402327, offset loc_4027A8, offset loc_4027A8
.text:00401FDC                 dd offset loc_4027A8, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset loc_4027A8
.text:00401FDC                 dd offset loc_4027A8, offset loc_4027A8, offset loc_4027A8
.text:00401FDC                 dd offset loc_40238C, offset def_401FD5, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset loc_4027A8, offset loc_4027A1
.text:00401FDC                 dd offset def_4023D2, offset loc_4027A8, offset def_4023D2
.text:00401FDC                 dd offset loc_4027A8, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset def_4023D2, offset def_4023D2, offset def_4023D2
.text:00401FDC                 dd offset loc_4027B8, offset loc_4027A8, offset loc_4027B8
.text:00401FDC                 dd offset loc_4027CA
.text:004021D8 ; ---------------------------------------------------------------------------
.text:004021D8
.text:004021D8 loc_4021D8:                             ; CODE XREF: sub_401ED0+105↑j
.text:004021D8                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:004021D8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00401FD5 case 0
.text:004021DD                 lea     eax, [ebp+1]
.text:004021E0                 jz      loc_402290
.text:004021E6                 mov     esi, [esp+4Ch+arg_4]
.text:004021EA                 cmp     [esp+4Ch+var_34], esi
.text:004021EE                 jnb     short loc_4021FC
.text:004021F0                 mov     eax, [esp+4Ch+arg_0]
.text:004021F4                 mov     ebx, [esp+4Ch+var_34]
.text:004021F8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004021FC
.text:004021FC loc_4021FC:                             ; CODE XREF: sub_401ED0+31E↑j
.text:004021FC                 inc     [esp+4Ch+var_34]
.text:00402200                 mov     edx, [esp+4Ch+arg_4]
.text:00402204                 cmp     [esp+4Ch+var_34], edx
.text:00402208                 jnb     short loc_402216
.text:0040220A                 mov     edi, [esp+4Ch+arg_0]
.text:0040220E                 mov     ecx, [esp+4Ch+var_34]
.text:00402212                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00402216
.text:00402216 loc_402216:                             ; CODE XREF: sub_401ED0+338↑j
.text:00402216                 inc     [esp+4Ch+var_34]
.text:0040221A                 mov     esi, [esp+4Ch+arg_4]
.text:0040221E                 cmp     [esp+4Ch+var_34], esi
.text:00402222                 jnb     short loc_402230
.text:00402224                 mov     ebx, [esp+4Ch+arg_0]
.text:00402228                 mov     eax, [esp+4Ch+var_34]
.text:0040222C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00402230
.text:00402230 loc_402230:                             ; CODE XREF: sub_401ED0+352↑j
.text:00402230                 inc     [esp+4Ch+var_34]
.text:00402234                 mov     bl, 30h ; '0'
.text:00402236                 lea     esi, [esi+0]
.text:00402239                 lea     edi, [edi+0]
.text:00402240
.text:00402240 def_4023D2:                             ; CODE XREF: sub_401ED0+105↑j
.text:00402240                                         ; sub_401ED0+463↓j ...
.text:00402240                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00401FD5 cases 37,43-58,65-90,93,95,97-122
.text:00402240                                         ; jumptable 004023D2 default case, cases 34-38,42-44,46,48-59
.text:00402245                 lea     eax, [ebp+1]
.text:00402248                 jz      short loc_402290
.text:0040224A                 mov     cl, bl
.text:0040224C                 mov     edi, [esp+4Ch+arg_14]
.text:00402250                 mov     esi, 1
.text:00402255                 shr     cl, 5
.text:00402258                 movzx   edx, cl
.text:0040225B                 mov     ecx, ebx
.text:0040225D                 and     ecx, 1Fh
.text:00402260                 shl     esi, cl
.text:00402262                 test    [edi+edx*4+4], esi
.text:00402266                 jz      short loc_402282
.text:00402268
.text:00402268 loc_402268:                             ; CODE XREF: sub_401ED0+3FC↓j
.text:00402268                 mov     edx, [esp+4Ch+arg_4]
.text:0040226C                 cmp     [esp+4Ch+var_34], edx
.text:00402270                 jnb     short loc_40227E
.text:00402272                 mov     edi, [esp+4Ch+arg_0]
.text:00402276                 mov     esi, [esp+4Ch+var_34]
.text:0040227A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040227E
.text:0040227E loc_40227E:                             ; CODE XREF: sub_401ED0+3A0↑j
.text:0040227E                 inc     [esp+4Ch+var_34]
.text:00402282
.text:00402282 loc_402282:                             ; CODE XREF: sub_401ED0+396↑j
.text:00402282                 lea     eax, [ebp+1]
.text:00402285                 lea     esi, [esi+0]
.text:00402289                 lea     edi, [edi+0]
.text:00402290
.text:00402290 loc_402290:                             ; CODE XREF: sub_401ED0+310↑j
.text:00402290                                         ; sub_401ED0+378↑j ...
.text:00402290                 mov     ebp, [esp+4Ch+arg_4]
.text:00402294                 cmp     [esp+4Ch+var_34], ebp
.text:00402298                 jnb     short loc_4022A5
.text:0040229A                 mov     edx, [esp+4Ch+arg_0]
.text:0040229E                 mov     ecx, [esp+4Ch+var_34]
.text:004022A2                 mov     [ecx+edx], bl
.text:004022A5
.text:004022A5 loc_4022A5:                             ; CODE XREF: sub_401ED0+3C8↑j
.text:004022A5                 inc     [esp+4Ch+var_34]
.text:004022A9                 mov     ebp, eax
.text:004022AB                 jmp     loc_401F60
.text:004022B0 ; ---------------------------------------------------------------------------
.text:004022B0
.text:004022B0 loc_4022B0:                             ; CODE XREF: sub_401ED0+105↑j
.text:004022B0                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:004022B0                 mov     dl, 61h ; 'a'   ; jumptable 00401FD5 case 7
.text:004022B2                 lea     esi, [esi+0]
.text:004022B9                 lea     edi, [edi+0]
.text:004022C0
.text:004022C0 loc_4022C0:                             ; CODE XREF: sub_401ED0+400↓j
.text:004022C0                                         ; sub_401ED0+409↓j ...
.text:004022C0                 cmp     [esp+4Ch+var_21], 0
.text:004022C5                 lea     eax, [ebp+1]
.text:004022C8                 jz      short loc_402290
.text:004022CA                 mov     bl, dl
.text:004022CC                 jmp     short loc_402268
.text:004022CE ; ---------------------------------------------------------------------------
.text:004022CE
.text:004022CE loc_4022CE:                             ; CODE XREF: sub_401ED0+105↑j
.text:004022CE                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:004022CE                 mov     dl, 62h ; 'b'   ; jumptable 00401FD5 case 8
.text:004022D0                 jmp     short loc_4022C0
.text:004022D2 ; ---------------------------------------------------------------------------
.text:004022D2
.text:004022D2 loc_4022D2:                             ; CODE XREF: sub_401ED0+105↑j
.text:004022D2                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:004022D2                 mov     dl, 74h ; 't'   ; jumptable 00401FD5 case 9
.text:004022D4
.text:004022D4 loc_4022D4:                             ; CODE XREF: sub_401ED0+449↓j
.text:004022D4                                         ; sub_401ED0+455↓j ...
.text:004022D4                 cmp     [esp+4Ch+arg_10], 1
.text:004022D9                 jnz     short loc_4022C0
.text:004022DB
.text:004022DB loc_4022DB:                             ; CODE XREF: sub_401ED0+45C↓j
.text:004022DB                                         ; sub_401ED0+4C1↓j ...
.text:004022DB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004026A2 cases 91,92,94,96,124
.text:004022E3                 mov     eax, [esp+4Ch+arg_14]
.text:004022E7                 mov     edx, [esp+4Ch+arg_C]
.text:004022EB                 mov     ecx, [esp+4Ch+Str]
.text:004022EF                 mov     ebx, [esp+4Ch+arg_4]
.text:004022F3                 mov     [esp+4Ch+var_38], eax ; int
.text:004022F7                 mov     ebp, [esp+4Ch+arg_0]
.text:004022FB                 mov     [esp+4Ch+State], edx ; int
.text:004022FF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00402303                 mov     [esp+4Ch+Type], ebx ; int
.text:00402307                 mov     [esp+4Ch+C], ebp ; int
.text:0040230A                 call    sub_401ED0
.text:0040230F
.text:0040230F loc_40230F:                             ; CODE XREF: sub_401ED0+972↓j
.text:0040230F                 add     esp, 3Ch
.text:00402312                 pop     ebx
.text:00402313                 pop     esi
.text:00402314                 pop     edi
.text:00402315                 pop     ebp
.text:00402316                 retn
.text:00402317 ; ---------------------------------------------------------------------------
.text:00402317
.text:00402317 loc_402317:                             ; CODE XREF: sub_401ED0+105↑j
.text:00402317                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:00402317                 mov     dl, 6Eh ; 'n'   ; jumptable 00401FD5 case 10
.text:00402319                 jmp     short loc_4022D4
.text:0040231B ; ---------------------------------------------------------------------------
.text:0040231B
.text:0040231B loc_40231B:                             ; CODE XREF: sub_401ED0+105↑j
.text:0040231B                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:0040231B                 mov     dl, 76h ; 'v'   ; jumptable 00401FD5 case 11
.text:0040231D                 jmp     short loc_4022C0
.text:0040231F ; ---------------------------------------------------------------------------
.text:0040231F
.text:0040231F loc_40231F:                             ; CODE XREF: sub_401ED0+105↑j
.text:0040231F                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:0040231F                 mov     dl, 66h ; 'f'   ; jumptable 00401FD5 case 12
.text:00402321                 jmp     short loc_4022C0
.text:00402323 ; ---------------------------------------------------------------------------
.text:00402323
.text:00402323 loc_402323:                             ; CODE XREF: sub_401ED0+105↑j
.text:00402323                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:00402323                 mov     dl, 72h ; 'r'   ; jumptable 00401FD5 case 13
.text:00402325                 jmp     short loc_4022D4
.text:00402327 ; ---------------------------------------------------------------------------
.text:00402327
.text:00402327 loc_402327:                             ; CODE XREF: sub_401ED0+105↑j
.text:00402327                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:00402327                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00401FD5 case 39
.text:0040232C                 jz      short loc_4022DB ; jumptable 004026A2 cases 91,92,94,96,124
.text:0040232E                 cmp     [esp+4Ch+arg_10], 2
.text:00402333                 jnz     def_4023D2      ; jumptable 00401FD5 cases 37,43-58,65-90,93,95,97-122
.text:00402333                                         ; jumptable 004023D2 default case, cases 34-38,42-44,46,48-59
.text:00402339                 mov     edx, [esp+4Ch+arg_4]
.text:0040233D                 cmp     [esp+4Ch+var_34], edx
.text:00402341                 jnb     short loc_40234F
.text:00402343                 mov     ecx, [esp+4Ch+arg_0]
.text:00402347                 mov     edi, [esp+4Ch+var_34]
.text:0040234B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040234F
.text:0040234F loc_40234F:                             ; CODE XREF: sub_401ED0+471↑j
.text:0040234F                 inc     [esp+4Ch+var_34]
.text:00402353                 mov     eax, [esp+4Ch+arg_4]
.text:00402357                 cmp     [esp+4Ch+var_34], eax
.text:0040235B                 jnb     short loc_402369
.text:0040235D                 mov     esi, [esp+4Ch+arg_0]
.text:00402361                 mov     edx, [esp+4Ch+var_34]
.text:00402365                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00402369
.text:00402369 loc_402369:                             ; CODE XREF: sub_401ED0+48B↑j
.text:00402369                 inc     [esp+4Ch+var_34]
.text:0040236D                 mov     edi, [esp+4Ch+arg_4]
.text:00402371                 cmp     [esp+4Ch+var_34], edi
.text:00402375                 jnb     short loc_402383
.text:00402377                 mov     ecx, [esp+4Ch+arg_0]
.text:0040237B                 mov     eax, [esp+4Ch+var_34]
.text:0040237F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00402383
.text:00402383 loc_402383:                             ; CODE XREF: sub_401ED0+4A5↑j
.text:00402383                                         ; sub_401ED0+5C4↓j ...
.text:00402383                 inc     [esp+4Ch+var_34]
.text:00402387                 jmp     def_4023D2      ; jumptable 00401FD5 cases 37,43-58,65-90,93,95,97-122
.text:00402387                                         ; jumptable 004023D2 default case, cases 34-38,42-44,46,48-59
.text:0040238C ; ---------------------------------------------------------------------------
.text:0040238C
.text:0040238C loc_40238C:                             ; CODE XREF: sub_401ED0+105↑j
.text:0040238C                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:0040238C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00401FD5 case 63
.text:00402391                 jz      loc_4022DB      ; jumptable 004026A2 cases 91,92,94,96,124
.text:00402397                 cmp     [esp+4Ch+arg_10], 3
.text:0040239C                 jnz     def_4023D2      ; jumptable 00401FD5 cases 37,43-58,65-90,93,95,97-122
.text:0040239C                                         ; jumptable 004023D2 default case, cases 34-38,42-44,46,48-59
.text:004023A2                 lea     edx, [ebp+2]
.text:004023A5                 cmp     edx, [esp+4Ch+arg_C]
.text:004023A9                 jnb     def_4023D2      ; jumptable 00401FD5 cases 37,43-58,65-90,93,95,97-122
.text:004023A9                                         ; jumptable 004023D2 default case, cases 34-38,42-44,46,48-59
.text:004023AF                 mov     esi, [esp+4Ch+Str]
.text:004023B3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004023B8                 jnz     def_4023D2      ; jumptable 00401FD5 cases 37,43-58,65-90,93,95,97-122
.text:004023B8                                         ; jumptable 004023D2 default case, cases 34-38,42-44,46,48-59
.text:004023BE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004023C3                 movsx   eax, cl
.text:004023C6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004023C9                 cmp     eax, 1Dh
.text:004023CC                 ja      def_4023D2      ; jumptable 00401FD5 cases 37,43-58,65-90,93,95,97-122
.text:004023CC                                         ; jumptable 004023D2 default case, cases 34-38,42-44,46,48-59
.text:004023D2                 jmp     ds:jpt_4023D2[eax*4] ; switch jump
.text:004023D2 ; ---------------------------------------------------------------------------
.text:004023D9                 align 4
.text:004023DC jpt_4023D2      dd offset loc_402454    ; DATA XREF: sub_401ED0+502↑r
.text:004023DC                 dd offset def_4023D2    ; jump table for switch statement
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset loc_402454
.text:004023DC                 dd offset loc_402454
.text:004023DC                 dd offset loc_402454
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset loc_402454
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset loc_402454
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset def_4023D2
.text:004023DC                 dd offset loc_402454
.text:004023DC                 dd offset loc_402454
.text:004023DC                 dd offset loc_402454
.text:00402454 ; ---------------------------------------------------------------------------
.text:00402454
.text:00402454 loc_402454:                             ; CODE XREF: sub_401ED0+502↑j
.text:00402454                                         ; DATA XREF: sub_401ED0:jpt_4023D2↑o
.text:00402454                 mov     ebp, edx        ; jumptable 004023D2 cases 33,39-41,45,47,60-62
.text:00402456                 mov     bl, cl
.text:00402458                 mov     edx, [esp+4Ch+arg_4]
.text:0040245C                 cmp     [esp+4Ch+var_34], edx
.text:00402460                 jnb     short loc_40246E
.text:00402462                 mov     ecx, [esp+4Ch+arg_0]
.text:00402466                 mov     edi, [esp+4Ch+var_34]
.text:0040246A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040246E
.text:0040246E loc_40246E:                             ; CODE XREF: sub_401ED0+590↑j
.text:0040246E                 inc     [esp+4Ch+var_34]
.text:00402472                 mov     eax, [esp+4Ch+arg_4]
.text:00402476                 cmp     [esp+4Ch+var_34], eax
.text:0040247A                 jnb     short loc_402488
.text:0040247C                 mov     edx, [esp+4Ch+arg_0]
.text:00402480                 mov     esi, [esp+4Ch+var_34]
.text:00402484                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00402488
.text:00402488 loc_402488:                             ; CODE XREF: sub_401ED0+5AA↑j
.text:00402488                 inc     [esp+4Ch+var_34]
.text:0040248C                 mov     edi, [esp+4Ch+arg_4]
.text:00402490                 cmp     [esp+4Ch+var_34], edi
.text:00402494                 jnb     loc_402383
.text:0040249A                 mov     eax, [esp+4Ch+arg_0]
.text:0040249E                 mov     ecx, [esp+4Ch+var_34]
.text:004024A2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004024A6                 jmp     loc_402383
.text:004024A6 ; ---------------------------------------------------------------------------
.text:004024AB                 align 10h
.text:004024B0
.text:004024B0 def_401FD5:                             ; CODE XREF: sub_401ED0+FF↑j
.text:004024B0                                         ; sub_401ED0+105↑j
.text:004024B0                                         ; DATA XREF: ...
.text:004024B0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00401FD5 default case, cases 1-6,14-31,64
.text:004024B5                 jz      loc_4025E0
.text:004024BB                 mov     [esp+4Ch+var_28], 1
.text:004024C3                 mov     esi, ds:__mb_cur_max
.text:004024C9                 movzx   edx, bl
.text:004024CC                 cmp     dword ptr [esi], 1
.text:004024CF                 jz      loc_4025C4
.text:004024D5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004024DD                 mov     [esp+4Ch+C], edx ; C
.text:004024E0                 call    _isctype
.text:004024E5
.text:004024E5 loc_4024E5:                             ; CODE XREF: sub_401ED0+705↓j
.text:004024E5                 test    eax, eax
.text:004024E7                 setnz   [esp+4Ch+var_29]
.text:004024EC
.text:004024EC loc_4024EC:                             ; CODE XREF: sub_401ED0+7A5↓j
.text:004024EC                 cmp     [esp+4Ch+var_21], 0
.text:004024F1                 lea     eax, [ebp+1]
.text:004024F4                 jz      loc_402290
.text:004024FA                 cmp     [esp+4Ch+var_29], 0
.text:004024FF                 jnz     def_4023D2      ; jumptable 00401FD5 cases 37,43-58,65-90,93,95,97-122
.text:004024FF                                         ; jumptable 004023D2 default case, cases 34-38,42-44,46,48-59
.text:00402505
.text:00402505 loc_402505:                             ; CODE XREF: sub_401ED0+7AB↓j
.text:00402505                 mov     eax, [esp+4Ch+var_28]
.text:00402509                 lea     edx, [eax+ebp]
.text:0040250C                 lea     esi, [esi+0]
.text:00402510
.text:00402510 loc_402510:                             ; CODE XREF: sub_401ED0+6EF↓j
.text:00402510                 cmp     [esp+4Ch+var_21], 0
.text:00402515                 jz      short loc_402590
.text:00402517                 cmp     [esp+4Ch+var_29], 0
.text:0040251C                 jnz     short loc_402590
.text:0040251E                 mov     edi, [esp+4Ch+arg_4]
.text:00402522                 cmp     [esp+4Ch+var_34], edi
.text:00402526                 jnb     short loc_402534
.text:00402528                 mov     esi, [esp+4Ch+arg_0]
.text:0040252C                 mov     eax, [esp+4Ch+var_34]
.text:00402530                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00402534
.text:00402534 loc_402534:                             ; CODE XREF: sub_401ED0+656↑j
.text:00402534                 inc     [esp+4Ch+var_34]
.text:00402538                 mov     ecx, [esp+4Ch+arg_4]
.text:0040253C                 cmp     [esp+4Ch+var_34], ecx
.text:00402540                 jnb     short loc_402555
.text:00402542                 mov     cl, bl
.text:00402544                 mov     esi, [esp+4Ch+arg_0]
.text:00402548                 mov     edi, [esp+4Ch+var_34]
.text:0040254C                 shr     cl, 6
.text:0040254F                 add     cl, 30h ; '0'
.text:00402552                 mov     [edi+esi], cl
.text:00402555
.text:00402555 loc_402555:                             ; CODE XREF: sub_401ED0+670↑j
.text:00402555                 inc     [esp+4Ch+var_34]
.text:00402559                 mov     edi, [esp+4Ch+arg_4]
.text:0040255D                 cmp     [esp+4Ch+var_34], edi
.text:00402561                 jnb     short loc_402579
.text:00402563                 mov     cl, bl
.text:00402565                 mov     esi, [esp+4Ch+arg_0]
.text:00402569                 shr     cl, 3
.text:0040256C                 mov     edi, [esp+4Ch+var_34]
.text:00402570                 and     cl, 7
.text:00402573                 add     cl, 30h ; '0'
.text:00402576                 mov     [edi+esi], cl
.text:00402579
.text:00402579 loc_402579:                             ; CODE XREF: sub_401ED0+691↑j
.text:00402579                 inc     [esp+4Ch+var_34]
.text:0040257D                 and     bl, 7
.text:00402580                 add     bl, 30h ; '0'
.text:00402583                 lea     esi, [esi+0]
.text:00402589                 lea     edi, [edi+0]
.text:00402590
.text:00402590 loc_402590:                             ; CODE XREF: sub_401ED0+645↑j
.text:00402590                                         ; sub_401ED0+64C↑j
.text:00402590                 lea     eax, [ebp+1]
.text:00402593                 cmp     edx, eax
.text:00402595                 jbe     loc_402290
.text:0040259B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040259F                 cmp     [esp+4Ch+var_34], ebp
.text:004025A3                 jnb     short loc_4025B0
.text:004025A5                 mov     ecx, [esp+4Ch+arg_0]
.text:004025A9                 mov     edi, [esp+4Ch+var_34]
.text:004025AD                 mov     [edi+ecx], bl
.text:004025B0
.text:004025B0 loc_4025B0:                             ; CODE XREF: sub_401ED0+6D3↑j
.text:004025B0                 inc     [esp+4Ch+var_34]
.text:004025B4                 mov     ebp, eax
.text:004025B6                 mov     eax, [esp+4Ch+Str]
.text:004025BA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004025BF                 jmp     loc_402510
.text:004025C4 ; ---------------------------------------------------------------------------
.text:004025C4
.text:004025C4 loc_4025C4:                             ; CODE XREF: sub_401ED0+5FF↑j
.text:004025C4                 mov     ecx, ds:_pctype
.text:004025CA                 mov     edi, [ecx]
.text:004025CC                 movzx   eax, word ptr [edi+edx*2]
.text:004025D0                 and     eax, 157h
.text:004025D5                 jmp     loc_4024E5
.text:004025D5 ; ---------------------------------------------------------------------------
.text:004025DA                 align 10h
.text:004025E0
.text:004025E0 loc_4025E0:                             ; CODE XREF: sub_401ED0+5E5↑j
.text:004025E0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004025E5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004025ED                 mov     [esp+4Ch+var_28], 0
.text:004025F5                 mov     [esp+4Ch+var_29], 1
.text:004025FA                 jz      loc_40278C
.text:00402600
.text:00402600 loc_402600:                             ; CODE XREF: sub_401ED0+8CC↓j
.text:00402600                 mov     ecx, [esp+4Ch+arg_C]
.text:00402604                 lea     edx, [esp+4Ch+var_18]
.text:00402608                 mov     edi, [esp+4Ch+Str]
.text:0040260C                 mov     [esp+4Ch+State], edx ; State
.text:00402610                 lea     esi, [esp+4Ch+var_18._State]
.text:00402614                 sub     ecx, ebp
.text:00402616                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040261A                 add     edi, ebp
.text:0040261C                 mov     [esp+4Ch+var_30], edi
.text:00402620                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00402624                 mov     [esp+4Ch+C], esi ; DstCh
.text:00402627                 call    mbrtowc
.text:0040262C                 test    eax, eax
.text:0040262E                 mov     edi, eax
.text:00402630                 jz      short loc_402670
.text:00402632                 cmp     eax, 0FFFFFFFFh
.text:00402635                 jz      loc_402782
.text:0040263B                 cmp     eax, 0FFFFFFFEh
.text:0040263E                 jz      loc_402742
.text:00402644                 cmp     [esp+4Ch+arg_10], 1
.text:00402649                 jz      short loc_402680
.text:0040264B
.text:0040264B loc_40264B:                             ; CODE XREF: sub_401ED0+7B9↓j
.text:0040264B                                         ; sub_401ED0+86D↓j
.text:0040264B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00402650                 mov     [esp+4Ch+Type], 157h ; Type
.text:00402658                 mov     [esp+4Ch+C], ecx ; C
.text:0040265B                 call    iswctype
.text:00402660                 test    eax, eax
.text:00402662                 jnz     short loc_402669
.text:00402664                 mov     [esp+4Ch+var_29], 0
.text:00402669
.text:00402669 loc_402669:                             ; CODE XREF: sub_401ED0+792↑j
.text:00402669                 mov     [esp+4Ch+var_28], edi
.text:0040266D                 lea     esi, [esi+0]
.text:00402670
.text:00402670 loc_402670:                             ; CODE XREF: sub_401ED0+760↑j
.text:00402670                                         ; sub_401ED0+87B↓j ...
.text:00402670                 cmp     [esp+4Ch+var_28], 1
.text:00402675                 jbe     loc_4024EC
.text:0040267B                 jmp     loc_402505
.text:00402680 ; ---------------------------------------------------------------------------
.text:00402680
.text:00402680 loc_402680:                             ; CODE XREF: sub_401ED0+779↑j
.text:00402680                 cmp     [esp+4Ch+arg_10], eax
.text:00402684                 mov     edx, 1
.text:00402689                 jnb     short loc_40264B
.text:0040268B
.text:0040268B loc_40268B:                             ; CODE XREF: sub_401ED0+867↓j
.text:0040268B                 mov     ecx, [esp+4Ch+Str]
.text:0040268F                 lea     esi, [edx+ebp]
.text:00402692                 movsx   eax, byte ptr [esi+ecx]
.text:00402696                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00402699                 cmp     eax, 21h
.text:0040269C                 ja      def_4026A2      ; jumptable 004026A2 default case, cases 93,95,97-123
.text:004026A2                 jmp     ds:jpt_4026A2[eax*4] ; switch jump
.text:004026A2 ; ---------------------------------------------------------------------------
.text:004026A9                 align 4
.text:004026AC jpt_4026A2      dd offset loc_4022DB    ; DATA XREF: sub_401ED0+7D2↑r
.text:004026AC                 dd offset loc_4022DB    ; jump table for switch statement
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset loc_4022DB
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset loc_4022DB
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset def_4026A2
.text:004026AC                 dd offset loc_4022DB
.text:00402734 ; ---------------------------------------------------------------------------
.text:00402734
.text:00402734 def_4026A2:                             ; CODE XREF: sub_401ED0+7CC↑j
.text:00402734                                         ; sub_401ED0+7D2↑j
.text:00402734                                         ; DATA XREF: ...
.text:00402734                 inc     edx             ; jumptable 004026A2 default case, cases 93,95,97-123
.text:00402735                 cmp     edx, edi
.text:00402737                 jb      loc_40268B
.text:0040273D                 jmp     loc_40264B
.text:00402742 ; ---------------------------------------------------------------------------
.text:00402742
.text:00402742 loc_402742:                             ; CODE XREF: sub_401ED0+76E↑j
.text:00402742                 cmp     ebp, [esp+4Ch+arg_C]
.text:00402746                 mov     [esp+4Ch+var_29], 0
.text:0040274B                 jnb     loc_402670
.text:00402751                 mov     eax, [esp+4Ch+var_30]
.text:00402755                 cmp     byte ptr [eax], 0
.text:00402758                 jz      loc_402670
.text:0040275E
.text:0040275E loc_40275E:                             ; CODE XREF: sub_401ED0+8AB↓j
.text:0040275E                 inc     [esp+4Ch+var_28]
.text:00402762                 mov     esi, [esp+4Ch+var_28]
.text:00402766                 lea     eax, [esi+ebp]
.text:00402769                 cmp     eax, [esp+4Ch+arg_C]
.text:0040276D                 jnb     loc_402670
.text:00402773                 mov     edi, [esp+4Ch+Str]
.text:00402777                 cmp     byte ptr [eax+edi], 0
.text:0040277B                 jnz     short loc_40275E
.text:0040277D                 jmp     loc_402670
.text:00402782 ; ---------------------------------------------------------------------------
.text:00402782
.text:00402782 loc_402782:                             ; CODE XREF: sub_401ED0+765↑j
.text:00402782                 mov     [esp+4Ch+var_29], 0
.text:00402787                 jmp     loc_402670
.text:0040278C ; ---------------------------------------------------------------------------
.text:0040278C
.text:0040278C loc_40278C:                             ; CODE XREF: sub_401ED0+72A↑j
.text:0040278C                 mov     edx, [esp+4Ch+Str]
.text:00402790                 mov     [esp+4Ch+C], edx ; Str
.text:00402793                 call    strlen
.text:00402798                 mov     [esp+4Ch+arg_C], eax
.text:0040279C                 jmp     loc_402600
.text:004027A1 ; ---------------------------------------------------------------------------
.text:004027A1
.text:004027A1 loc_4027A1:                             ; CODE XREF: sub_401ED0+105↑j
.text:004027A1                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:004027A1                 mov     dl, bl          ; jumptable 00401FD5 case 92
.text:004027A3                 jmp     loc_4022D4
.text:004027A8 ; ---------------------------------------------------------------------------
.text:004027A8
.text:004027A8 loc_4027A8:                             ; CODE XREF: sub_401ED0+105↑j
.text:004027A8                                         ; sub_401ED0+902↓j
.text:004027A8                                         ; DATA XREF: ...
.text:004027A8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00401FD5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004027AD                 jnz     def_4023D2      ; jumptable 00401FD5 cases 37,43-58,65-90,93,95,97-122
.text:004027AD                                         ; jumptable 004023D2 default case, cases 34-38,42-44,46,48-59
.text:004027B3                 jmp     loc_4022DB      ; jumptable 004026A2 cases 91,92,94,96,124
.text:004027B8 ; ---------------------------------------------------------------------------
.text:004027B8
.text:004027B8 loc_4027B8:                             ; CODE XREF: sub_401ED0+105↑j
.text:004027B8                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:004027B8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00401FD5 cases 123,125
.text:004027BD                 jz      short loc_4027D4
.text:004027BF                 cmp     [esp+4Ch+arg_C], 1
.text:004027C4
.text:004027C4 loc_4027C4:                             ; CODE XREF: sub_401ED0+90C↓j
.text:004027C4                 jnz     def_4023D2      ; jumptable 00401FD5 cases 37,43-58,65-90,93,95,97-122
.text:004027C4                                         ; jumptable 004023D2 default case, cases 34-38,42-44,46,48-59
.text:004027CA
.text:004027CA loc_4027CA:                             ; CODE XREF: sub_401ED0+105↑j
.text:004027CA                                         ; DATA XREF: sub_401ED0:jpt_401FD5↑o
.text:004027CA                 test    ebp, ebp        ; jumptable 00401FD5 cases 35,126
.text:004027CC                 jnz     def_4023D2      ; jumptable 00401FD5 cases 37,43-58,65-90,93,95,97-122
.text:004027CC                                         ; jumptable 004023D2 default case, cases 34-38,42-44,46,48-59
.text:004027D2                 jmp     short loc_4027A8 ; jumptable 00401FD5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004027D4 ; ---------------------------------------------------------------------------
.text:004027D4
.text:004027D4 loc_4027D4:                             ; CODE XREF: sub_401ED0+8ED↑j
.text:004027D4                 mov     esi, [esp+4Ch+Str]
.text:004027D8                 cmp     byte ptr [esi+1], 0
.text:004027DC                 jmp     short loc_4027C4
.text:004027DE ; ---------------------------------------------------------------------------
.text:004027DE
.text:004027DE loc_4027DE:                             ; CODE XREF: sub_401ED0:loc_401F6F↑j
.text:004027DE                 test    ebp, ebp
.text:004027E0                 jnz     short loc_4027ED
.text:004027E2                 cmp     [esp+4Ch+arg_10], 1
.text:004027E7                 jz      loc_4022DB      ; jumptable 004026A2 cases 91,92,94,96,124
.text:004027ED
.text:004027ED loc_4027ED:                             ; CODE XREF: sub_401ED0+910↑j
.text:004027ED                 mov     esi, [esp+4Ch+var_1C]
.text:004027F1                 test    esi, esi
.text:004027F3                 jz      short loc_402828
.text:004027F5                 mov     edi, [esp+4Ch+var_1C]
.text:004027F9                 movzx   eax, byte ptr [edi]
.text:004027FC                 test    al, al
.text:004027FE                 jz      short loc_402828
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_401ED0+956↓j
.text:00402800                 mov     ebp, [esp+4Ch+arg_4]
.text:00402804                 cmp     [esp+4Ch+var_34], ebp
.text:00402808                 jnb     short loc_402815
.text:0040280A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040280E                 mov     ebx, [esp+4Ch+var_34]
.text:00402812                 mov     [ebx+ecx], al
.text:00402815
.text:00402815 loc_402815:                             ; CODE XREF: sub_401ED0+938↑j
.text:00402815                 inc     [esp+4Ch+var_1C]
.text:00402819                 inc     [esp+4Ch+var_34]
.text:0040281D                 mov     edx, [esp+4Ch+var_1C]
.text:00402821                 movzx   eax, byte ptr [edx]
.text:00402824                 test    al, al
.text:00402826                 jnz     short loc_402800
.text:00402828
.text:00402828 loc_402828:                             ; CODE XREF: sub_401ED0+923↑j
.text:00402828                                         ; sub_401ED0+92E↑j
.text:00402828                 mov     eax, [esp+4Ch+arg_4]
.text:0040282C                 cmp     [esp+4Ch+var_34], eax
.text:00402830                 jnb     short loc_40283E
.text:00402832                 mov     edi, [esp+4Ch+arg_0]
.text:00402836                 mov     esi, [esp+4Ch+var_34]
.text:0040283A                 mov     byte ptr [esi+edi], 0
.text:0040283E
.text:0040283E loc_40283E:                             ; CODE XREF: sub_401ED0+960↑j
.text:0040283E                 mov     eax, [esp+4Ch+var_34]
.text:00402842                 jmp     loc_40230F
.text:00402847 ; ---------------------------------------------------------------------------
.text:00402847
.text:00402847 loc_402847:                             ; CODE XREF: sub_401ED0+95↑j
.text:00402847                 mov     ebx, [esp+4Ch+Str]
.text:0040284B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00402850                 jmp     loc_401F6F
.text:00402855 ; ---------------------------------------------------------------------------
.text:00402855
.text:00402855 loc_402855:                             ; CODE XREF: sub_401ED0+3D↑j
.text:00402855                                         ; DATA XREF: sub_401ED0:jpt_401F0D↑o
.text:00402855                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00401F0D case 2
.text:00402859                 cmp     [esp+4Ch+var_34], edx
.text:0040285D                 jnb     short loc_402866
.text:0040285F                 mov     ecx, [esp+4Ch+arg_0]
.text:00402863                 mov     byte ptr [ecx], 27h ; '''
.text:00402866
.text:00402866 loc_402866:                             ; CODE XREF: sub_401ED0+98D↑j
.text:00402866                 mov     [esp+4Ch+var_34], 1
.text:0040286E                 mov     [esp+4Ch+var_1C], 401EBEh
.text:00402876                 jmp     loc_401F56
.text:0040287B ; ---------------------------------------------------------------------------
.text:0040287B
.text:0040287B loc_40287B:                             ; CODE XREF: sub_401ED0+3D↑j
.text:0040287B                                         ; DATA XREF: sub_401ED0:jpt_401F0D↑o
.text:0040287B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00401F0D case 4
.text:00402880                 jmp     def_401F0D      ; jumptable 00401F0D default case, cases 0,1
.text:00402885 ; ---------------------------------------------------------------------------
.text:00402885
.text:00402885 loc_402885:                             ; CODE XREF: sub_401ED0+3D↑j
.text:00402885                                         ; DATA XREF: sub_401ED0:jpt_401F0D↑o
.text:00402885                 mov     [esp+4Ch+C], 401EC0h ; jumptable 00401F0D cases 5,6
.text:0040288C                 call    ds:libintl_gettext
.text:00402892                 cmp     eax, 401EC0h
.text:00402897                 mov     edi, eax
.text:00402899                 jz      short loc_402910
.text:0040289B
.text:0040289B loc_40289B:                             ; CODE XREF: sub_401ED0+A45↓j
.text:0040289B                                         ; sub_401ED0+A4C↓j
.text:0040289B                 mov     [esp+4Ch+C], 401EBEh
.text:004028A2                 call    ds:libintl_gettext
.text:004028A8                 cmp     eax, 401EBEh
.text:004028AD                 mov     edx, eax
.text:004028AF                 jz      short loc_402902
.text:004028B1
.text:004028B1 loc_4028B1:                             ; CODE XREF: sub_401ED0+A37↓j
.text:004028B1                                         ; sub_401ED0+A3E↓j
.text:004028B1                 mov     [esp+4Ch+var_1C], edi
.text:004028B5                 cmp     byte ptr [edi], 0
.text:004028B8                 jz      short loc_4028E8
.text:004028BA
.text:004028BA loc_4028BA:                             ; CODE XREF: sub_401ED0+A16↓j
.text:004028BA                 mov     ecx, [esp+4Ch+arg_4]
.text:004028BE                 cmp     [esp+4Ch+var_34], ecx
.text:004028C2                 jnb     short loc_4028D7
.text:004028C4                 mov     ebp, [esp+4Ch+var_1C]
.text:004028C8                 mov     edi, [esp+4Ch+arg_0]
.text:004028CC                 mov     esi, [esp+4Ch+var_34]
.text:004028D0                 movzx   ebx, byte ptr [ebp+0]
.text:004028D4                 mov     [esi+edi], bl
.text:004028D7
.text:004028D7 loc_4028D7:                             ; CODE XREF: sub_401ED0+9F2↑j
.text:004028D7                 inc     [esp+4Ch+var_1C]
.text:004028DB                 inc     [esp+4Ch+var_34]
.text:004028DF                 mov     eax, [esp+4Ch+var_1C]
.text:004028E3                 cmp     byte ptr [eax], 0
.text:004028E6                 jnz     short loc_4028BA
.text:004028E8
.text:004028E8 loc_4028E8:                             ; CODE XREF: sub_401ED0+9E8↑j
.text:004028E8                 mov     [esp+4Ch+var_21], 1
.text:004028ED                 mov     [esp+4Ch+var_1C], edx
.text:004028F1                 mov     [esp+4Ch+C], edx ; Str
.text:004028F4                 call    strlen
.text:004028F9                 mov     [esp+4Ch+var_20], eax
.text:004028FD                 jmp     def_401F0D      ; jumptable 00401F0D default case, cases 0,1
.text:00402902 ; ---------------------------------------------------------------------------
.text:00402902
.text:00402902 loc_402902:                             ; CODE XREF: sub_401ED0+9DF↑j
.text:00402902                 cmp     [esp+4Ch+arg_10], 6
.text:00402907                 jnz     short loc_4028B1
.text:00402909                 mov     edx, offset asc_401EBC ; "\"'`"
.text:0040290E                 jmp     short loc_4028B1
.text:00402910 ; ---------------------------------------------------------------------------
.text:00402910
.text:00402910 loc_402910:                             ; CODE XREF: sub_401ED0+9C9↑j
.text:00402910                 cmp     [esp+4Ch+arg_10], 6
.text:00402915                 jnz     short loc_40289B
.text:00402917                 mov     edi, offset asc_401EBC ; "\"'`"
.text:0040291C                 jmp     loc_40289B
.text:0040291C sub_401ED0      endp
.text:0040291C
.text:00402921 ; ---------------------------------------------------------------------------
.text:00402921                 jmp     short loc_402930
.text:00402921 ; ---------------------------------------------------------------------------
.text:00402923                 align 10h
.text:00402930
.text:00402930 loc_402930:                             ; CODE XREF: .text:00402921↑j
.text:00402930                 sub     esp, 0Ch
.text:00402933                 mov     [esp+4], ebx
.text:00402937                 mov     [esp+8], esi
.text:0040293B                 call    _errno
.text:00402940                 mov     esi, [eax]
.text:00402942                 mov     dword ptr [esp], 24h ; '$'
.text:00402949                 call    sub_4049F0
.text:0040294E                 mov     edx, [esp+10h]
.text:00402952                 mov     ebx, eax
.text:00402954                 test    edx, edx
.text:00402956                 jz      short loc_4029A1
.text:00402958
.text:00402958 loc_402958:                             ; CODE XREF: .text:004029A6↓j
.text:00402958                 mov     ecx, [edx]
.text:0040295A                 mov     [ebx], ecx
.text:0040295C                 mov     ecx, [edx+4]
.text:0040295F                 mov     [ebx+4], ecx
.text:00402962                 mov     ecx, [edx+8]
.text:00402965                 mov     [ebx+8], ecx
.text:00402968                 mov     ecx, [edx+0Ch]
.text:0040296B                 mov     [ebx+0Ch], ecx
.text:0040296E                 mov     ecx, [edx+10h]
.text:00402971                 mov     [ebx+10h], ecx
.text:00402974                 mov     ecx, [edx+14h]
.text:00402977                 mov     [ebx+14h], ecx
.text:0040297A                 mov     ecx, [edx+18h]
.text:0040297D                 mov     [ebx+18h], ecx
.text:00402980                 mov     ecx, [edx+1Ch]
.text:00402983                 mov     [ebx+1Ch], ecx
.text:00402986                 mov     ecx, [edx+20h]
.text:00402989                 mov     [ebx+20h], ecx
.text:0040298C                 call    _errno
.text:00402991                 mov     [eax], esi
.text:00402993                 mov     esi, [esp+8]
.text:00402997                 mov     eax, ebx
.text:00402999                 mov     ebx, [esp+4]
.text:0040299D                 add     esp, 0Ch
.text:004029A0                 retn
.text:004029A1 ; ---------------------------------------------------------------------------
.text:004029A1
.text:004029A1 loc_4029A1:                             ; CODE XREF: .text:00402956↑j
.text:004029A1                 mov     edx, offset dword_40F100
.text:004029A6                 jmp     short loc_402958
.text:004029A6 ; ---------------------------------------------------------------------------
.text:004029A8                 align 10h
.text:004029B0                 mov     eax, [esp+4]
.text:004029B4                 test    eax, eax
.text:004029B6                 jz      short loc_4029C0
.text:004029B8
.text:004029B8 loc_4029B8:                             ; CODE XREF: .text:004029C5↓j
.text:004029B8                 mov     eax, [eax]
.text:004029BA                 retn
.text:004029BA ; ---------------------------------------------------------------------------
.text:004029BB                 align 10h
.text:004029C0
.text:004029C0 loc_4029C0:                             ; CODE XREF: .text:004029B6↑j
.text:004029C0                 mov     eax, offset dword_40F100
.text:004029C5                 jmp     short loc_4029B8
.text:004029C5 ; ---------------------------------------------------------------------------
.text:004029C7                 align 10h
.text:004029D0                 mov     edx, [esp+4]
.text:004029D4                 test    edx, edx
.text:004029D6                 jz      short loc_4029E0
.text:004029D8
.text:004029D8 loc_4029D8:                             ; CODE XREF: .text:004029E5↓j
.text:004029D8                 mov     ecx, [esp+8]
.text:004029DC                 mov     [edx], ecx
.text:004029DE                 retn
.text:004029DE ; ---------------------------------------------------------------------------
.text:004029DF                 align 10h
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: .text:004029D6↑j
.text:004029E0                 mov     edx, offset dword_40F100
.text:004029E5                 jmp     short loc_4029D8
.text:004029E5 ; ---------------------------------------------------------------------------
.text:004029E7                 align 10h
.text:004029F0                 sub     esp, 8
.text:004029F3                 mov     eax, [esp+0Ch]
.text:004029F7                 movzx   ecx, byte ptr [esp+10h]
.text:004029FC                 mov     [esp], ebx
.text:004029FF                 mov     ebx, [esp+14h]
.text:00402A03                 mov     [esp+4], esi
.text:00402A07                 mov     dl, cl
.text:00402A09                 shr     dl, 5
.text:00402A0C                 movzx   edx, dl
.text:00402A0F                 shl     edx, 2
.text:00402A12                 test    eax, eax
.text:00402A14                 lea     esi, [edx+eax+4]
.text:00402A18                 jz      short loc_402A40
.text:00402A1A
.text:00402A1A loc_402A1A:                             ; CODE XREF: .text:00402A46↓j
.text:00402A1A                 mov     edx, [esi]
.text:00402A1C                 and     ecx, 1Fh
.text:00402A1F                 and     ebx, 1
.text:00402A22                 mov     eax, edx
.text:00402A24                 shr     eax, cl
.text:00402A26                 and     eax, 1
.text:00402A29                 xor     ebx, eax
.text:00402A2B                 shl     ebx, cl
.text:00402A2D                 xor     edx, ebx
.text:00402A2F                 mov     [esi], edx
.text:00402A31                 mov     ebx, [esp]
.text:00402A34                 mov     esi, [esp+4]
.text:00402A38                 add     esp, 8
.text:00402A3B                 retn
.text:00402A3B ; ---------------------------------------------------------------------------
.text:00402A3C                 align 10h
.text:00402A40
.text:00402A40 loc_402A40:                             ; CODE XREF: .text:00402A18↑j
.text:00402A40                 lea     esi, dword_40F104[edx]
.text:00402A46                 jmp     short loc_402A1A
.text:00402A46 ; ---------------------------------------------------------------------------
.text:00402A48                 align 10h
.text:00402A50                 sub     esp, 2Ch
.text:00402A53                 mov     [esp+24h], ebx
.text:00402A57                 mov     ebx, [esp+40h]
.text:00402A5B                 mov     [esp+28h], esi
.text:00402A5F                 test    ebx, ebx
.text:00402A61                 jz      short loc_402AB0
.text:00402A63
.text:00402A63 loc_402A63:                             ; CODE XREF: .text:00402AB5↓j
.text:00402A63                 call    _errno
.text:00402A68                 mov     esi, [eax]
.text:00402A6A                 mov     [esp+14h], ebx
.text:00402A6E                 mov     edx, [ebx]
.text:00402A70                 mov     ecx, [esp+38h]
.text:00402A74                 mov     ebx, [esp+3Ch]
.text:00402A78                 mov     [esp+10h], edx
.text:00402A7C                 mov     edx, [esp+34h]
.text:00402A80                 mov     [esp+0Ch], ebx
.text:00402A84                 mov     [esp+8], ecx
.text:00402A88                 mov     [esp+4], edx
.text:00402A8C                 mov     edx, [esp+30h]
.text:00402A90                 mov     [esp], edx
.text:00402A93                 call    sub_401ED0
.text:00402A98                 mov     ebx, eax
.text:00402A9A                 call    _errno
.text:00402A9F                 mov     [eax], esi
.text:00402AA1                 mov     esi, [esp+28h]
.text:00402AA5                 mov     eax, ebx
.text:00402AA7                 mov     ebx, [esp+24h]
.text:00402AAB                 add     esp, 2Ch
.text:00402AAE                 retn
.text:00402AAE ; ---------------------------------------------------------------------------
.text:00402AAF                 align 10h
.text:00402AB0
.text:00402AB0 loc_402AB0:                             ; CODE XREF: .text:00402A61↑j
.text:00402AB0                 mov     ebx, offset dword_40F100
.text:00402AB5                 jmp     short loc_402A63
.text:00402AB5 ; ---------------------------------------------------------------------------
.text:00402AB7                 align 10h
.text:00402AC0                 push    ebp
.text:00402AC1                 push    edi
.text:00402AC2                 push    esi
.text:00402AC3                 push    ebx
.text:00402AC4                 sub     esp, 2Ch
.text:00402AC7                 mov     ebp, [esp+48h]
.text:00402ACB                 call    _errno
.text:00402AD0                 mov     edx, [eax]
.text:00402AD2                 test    ebp, ebp
.text:00402AD4                 mov     ebx, ebp
.text:00402AD6                 mov     [esp+28h], edx
.text:00402ADA                 jz      loc_402B90
.text:00402AE0
.text:00402AE0 loc_402AE0:                             ; CODE XREF: .text:00402B95↓j
.text:00402AE0                 call    _errno
.text:00402AE5                 mov     edi, [eax]
.text:00402AE7                 mov     esi, ebp
.text:00402AE9                 mov     [esp+14h], ebx
.text:00402AED                 mov     ecx, [ebx]
.text:00402AEF                 mov     dword ptr [esp], 0
.text:00402AF6                 mov     edx, [esp+44h]
.text:00402AFA                 mov     dword ptr [esp+4], 0
.text:00402B02                 mov     eax, [esp+40h]
.text:00402B06                 mov     [esp+10h], ecx
.text:00402B0A                 mov     [esp+0Ch], edx
.text:00402B0E                 mov     [esp+8], eax
.text:00402B12                 call    sub_401ED0
.text:00402B17                 mov     ebx, eax
.text:00402B19                 call    _errno
.text:00402B1E                 mov     [eax], edi
.text:00402B20                 lea     edi, [ebx+1]
.text:00402B23                 mov     [esp], edi
.text:00402B26                 call    sub_4049F0
.text:00402B2B                 mov     [esp+24h], eax
.text:00402B2F                 test    ebp, ebp
.text:00402B31                 jz      short loc_402B82
.text:00402B33
.text:00402B33 loc_402B33:                             ; CODE XREF: .text:00402B87↓j
.text:00402B33                 call    _errno
.text:00402B38                 mov     ebp, [eax]
.text:00402B3A                 mov     [esp+14h], esi
.text:00402B3E                 mov     ecx, [esi]
.text:00402B40                 mov     [esp+4], edi
.text:00402B44                 mov     edx, [esp+44h]
.text:00402B48                 mov     esi, [esp+24h]
.text:00402B4C                 mov     [esp+10h], ecx
.text:00402B50                 mov     eax, [esp+40h]
.text:00402B54                 mov     [esp+0Ch], edx
.text:00402B58                 mov     [esp], esi
.text:00402B5B                 mov     [esp+8], eax
.text:00402B5F                 call    sub_401ED0
.text:00402B64                 call    _errno
.text:00402B69                 mov     [eax], ebp
.text:00402B6B                 call    _errno
.text:00402B70                 mov     ebx, [esp+28h]
.text:00402B74                 mov     [eax], ebx
.text:00402B76                 mov     eax, [esp+24h]
.text:00402B7A                 add     esp, 2Ch
.text:00402B7D                 pop     ebx
.text:00402B7E                 pop     esi
.text:00402B7F                 pop     edi
.text:00402B80                 pop     ebp
.text:00402B81                 retn
.text:00402B82 ; ---------------------------------------------------------------------------
.text:00402B82
.text:00402B82 loc_402B82:                             ; CODE XREF: .text:00402B31↑j
.text:00402B82                 mov     esi, offset dword_40F100
.text:00402B87                 jmp     short loc_402B33
.text:00402B87 ; ---------------------------------------------------------------------------
.text:00402B89                 align 10h
.text:00402B90
.text:00402B90 loc_402B90:                             ; CODE XREF: .text:00402ADA↑j
.text:00402B90                 mov     ebx, offset dword_40F100
.text:00402B95                 jmp     loc_402AE0
.text:00402B95 ; ---------------------------------------------------------------------------
.text:00402B9A                 align 10h
.text:00402BA0                 sub     esp, 1Ch
.text:00402BA3                 mov     edx, [esp+24h]
.text:00402BA7                 mov     dword ptr [esp+0Ch], offset dword_40F100
.text:00402BAF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00402BB7                 mov     [esp+4], edx
.text:00402BBB                 mov     edx, [esp+20h]
.text:00402BBF                 mov     [esp], edx
.text:00402BC2                 call    sub_403010
.text:00402BC7                 add     esp, 1Ch
.text:00402BCA                 retn
.text:00402BCA ; ---------------------------------------------------------------------------
.text:00402BCB                 align 10h
.text:00402BD0                 sub     esp, 1Ch
.text:00402BD3                 mov     edx, [esp+20h]
.text:00402BD7                 mov     dword ptr [esp+0Ch], offset dword_40F100
.text:00402BDF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00402BE7                 mov     [esp+4], edx
.text:00402BEB                 mov     dword ptr [esp], 0
.text:00402BF2                 call    sub_403010
.text:00402BF7                 add     esp, 1Ch
.text:00402BFA                 retn
.text:00402BFA ; ---------------------------------------------------------------------------
.text:00402BFB                 align 10h
.text:00402C00
.text:00402C00 ; =============== S U B R O U T I N E =======================================
.text:00402C00
.text:00402C00
.text:00402C00 ; int __cdecl sub_402C00(int, int, char *)
.text:00402C00 sub_402C00      proc near               ; CODE XREF: sub_404200+1A↓p
.text:00402C00                                         ; sub_404230+1A↓p
.text:00402C00
.text:00402C00 var_BC          = dword ptr -0BCh
.text:00402C00 var_B8          = dword ptr -0B8h
.text:00402C00 var_B4          = dword ptr -0B4h
.text:00402C00 var_B0          = dword ptr -0B0h
.text:00402C00 var_AC          = dword ptr -0ACh
.text:00402C00 var_A8          = dword ptr -0A8h
.text:00402C00 var_A4          = dword ptr -0A4h
.text:00402C00 var_A0          = dword ptr -0A0h
.text:00402C00 var_9C          = dword ptr -9Ch
.text:00402C00 var_98          = dword ptr -98h
.text:00402C00 var_94          = dword ptr -94h
.text:00402C00 var_90          = dword ptr -90h
.text:00402C00 var_8C          = dword ptr -8Ch
.text:00402C00 var_7C          = dword ptr -7Ch
.text:00402C00 var_78          = dword ptr -78h
.text:00402C00 var_74          = dword ptr -74h
.text:00402C00 var_70          = dword ptr -70h
.text:00402C00 var_6C          = dword ptr -6Ch
.text:00402C00 var_68          = dword ptr -68h
.text:00402C00 var_64          = dword ptr -64h
.text:00402C00 var_60          = dword ptr -60h
.text:00402C00 var_5C          = dword ptr -5Ch
.text:00402C00 var_4C          = dword ptr -4Ch
.text:00402C00 var_48          = dword ptr -48h
.text:00402C00 var_44          = dword ptr -44h
.text:00402C00 var_40          = dword ptr -40h
.text:00402C00 var_3C          = dword ptr -3Ch
.text:00402C00 var_38          = dword ptr -38h
.text:00402C00 var_34          = dword ptr -34h
.text:00402C00 var_30          = dword ptr -30h
.text:00402C00 var_2C          = dword ptr -2Ch
.text:00402C00 arg_0           = dword ptr  4
.text:00402C00 arg_4           = dword ptr  8
.text:00402C00 arg_8           = dword ptr  0Ch
.text:00402C00
.text:00402C00                 push    ebp
.text:00402C01                 xor     eax, eax
.text:00402C03                 mov     ecx, 8
.text:00402C08                 push    edi
.text:00402C09                 push    esi
.text:00402C0A                 push    ebx
.text:00402C0B                 sub     esp, 0ACh
.text:00402C11                 mov     ebp, [esp+0BCh+arg_4]
.text:00402C18                 cld
.text:00402C19                 lea     edi, [esp+0BCh+var_A8]
.text:00402C1D                 mov     [esp+0BCh+var_AC], ebp
.text:00402C21                 rep stosd
.text:00402C23                 mov     eax, [esp+0BCh+var_8C]
.text:00402C27                 mov     edi, [esp+0BCh+var_AC]
.text:00402C2B                 mov     esi, [esp+0BCh+var_A8]
.text:00402C2F                 mov     [esp+0BCh+var_5C], eax
.text:00402C33                 mov     ebp, [esp+0BCh+var_A4]
.text:00402C37                 mov     eax, [esp+0BCh+var_AC]
.text:00402C3B                 mov     [esp+0BCh+var_7C], edi
.text:00402C3F                 mov     ecx, [esp+0BCh+var_94]
.text:00402C43                 mov     edi, [esp+0BCh+var_A0]
.text:00402C47                 mov     [esp+0BCh+var_78], esi
.text:00402C4B                 mov     edx, [esp+0BCh+var_90]
.text:00402C4F                 mov     esi, [esp+0BCh+var_9C]
.text:00402C53                 mov     [esp+0BCh+var_4C], eax
.text:00402C57                 mov     ebx, [esp+0BCh+var_98]
.text:00402C5B                 mov     eax, [esp+0BCh+var_A8]
.text:00402C5F                 mov     [esp+0BCh+var_74], ebp
.text:00402C63                 mov     [esp+0BCh+var_70], edi
.text:00402C67                 mov     [esp+0BCh+var_6C], esi
.text:00402C6B                 mov     [esp+0BCh+var_68], ebx
.text:00402C6F                 mov     [esp+0BCh+var_64], ecx
.text:00402C73                 mov     [esp+0BCh+var_60], edx
.text:00402C77                 mov     [esp+0BCh+var_48], eax
.text:00402C7B                 mov     [esp+0BCh+var_44], ebp
.text:00402C7F                 mov     [esp+0BCh+var_40], edi
.text:00402C83                 mov     [esp+0BCh+var_3C], esi
.text:00402C8A                 mov     [esp+0BCh+var_38], ebx
.text:00402C91                 mov     ebx, [esp+0BCh+var_8C]
.text:00402C95                 mov     [esp+0BCh+var_30], edx
.text:00402C9C                 mov     edx, [esp+0BCh+arg_8]
.text:00402CA3                 mov     [esp+0BCh+var_34], ecx
.text:00402CAA                 lea     ecx, [esp+0BCh+var_4C]
.text:00402CAE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00402CB2                 mov     edx, [esp+0BCh+arg_0]
.text:00402CB9                 mov     [esp+0BCh+var_2C], ebx
.text:00402CC0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00402CC4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00402CCC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00402CCF                 call    sub_403010
.text:00402CD4                 add     esp, 0ACh
.text:00402CDA                 pop     ebx
.text:00402CDB                 pop     esi
.text:00402CDC                 pop     edi
.text:00402CDD                 pop     ebp
.text:00402CDE                 retn
.text:00402CDE sub_402C00      endp
.text:00402CDE
.text:00402CDE ; ---------------------------------------------------------------------------
.text:00402CDF                 align 10h
.text:00402CE0
.text:00402CE0 ; =============== S U B R O U T I N E =======================================
.text:00402CE0
.text:00402CE0
.text:00402CE0 ; int __cdecl sub_402CE0(int, int, char *, int)
.text:00402CE0 sub_402CE0      proc near               ; CODE XREF: sub_4018F0+408↑p
.text:00402CE0
.text:00402CE0 var_BC          = dword ptr -0BCh
.text:00402CE0 var_B8          = dword ptr -0B8h
.text:00402CE0 var_B4          = dword ptr -0B4h
.text:00402CE0 var_B0          = dword ptr -0B0h
.text:00402CE0 var_AC          = dword ptr -0ACh
.text:00402CE0 var_A8          = dword ptr -0A8h
.text:00402CE0 var_A4          = dword ptr -0A4h
.text:00402CE0 var_A0          = dword ptr -0A0h
.text:00402CE0 var_9C          = dword ptr -9Ch
.text:00402CE0 var_98          = dword ptr -98h
.text:00402CE0 var_94          = dword ptr -94h
.text:00402CE0 var_90          = dword ptr -90h
.text:00402CE0 var_8C          = dword ptr -8Ch
.text:00402CE0 var_7C          = dword ptr -7Ch
.text:00402CE0 var_78          = dword ptr -78h
.text:00402CE0 var_74          = dword ptr -74h
.text:00402CE0 var_70          = dword ptr -70h
.text:00402CE0 var_6C          = dword ptr -6Ch
.text:00402CE0 var_68          = dword ptr -68h
.text:00402CE0 var_64          = dword ptr -64h
.text:00402CE0 var_60          = dword ptr -60h
.text:00402CE0 var_5C          = dword ptr -5Ch
.text:00402CE0 var_4C          = dword ptr -4Ch
.text:00402CE0 var_48          = dword ptr -48h
.text:00402CE0 var_44          = dword ptr -44h
.text:00402CE0 var_40          = dword ptr -40h
.text:00402CE0 var_3C          = dword ptr -3Ch
.text:00402CE0 var_38          = dword ptr -38h
.text:00402CE0 var_34          = dword ptr -34h
.text:00402CE0 var_30          = dword ptr -30h
.text:00402CE0 var_2C          = dword ptr -2Ch
.text:00402CE0 arg_0           = dword ptr  4
.text:00402CE0 arg_4           = dword ptr  8
.text:00402CE0 arg_8           = dword ptr  0Ch
.text:00402CE0 arg_C           = dword ptr  10h
.text:00402CE0
.text:00402CE0                 push    ebp
.text:00402CE1                 xor     eax, eax
.text:00402CE3                 mov     ecx, 8
.text:00402CE8                 push    edi
.text:00402CE9                 push    esi
.text:00402CEA                 push    ebx
.text:00402CEB                 sub     esp, 0ACh
.text:00402CF1                 mov     edx, [esp+0BCh+arg_4]
.text:00402CF8                 cld
.text:00402CF9                 lea     edi, [esp+0BCh+var_A8]
.text:00402CFD                 mov     [esp+0BCh+var_AC], edx
.text:00402D01                 rep stosd
.text:00402D03                 mov     eax, [esp+0BCh+var_8C]
.text:00402D07                 mov     ebp, [esp+0BCh+var_AC]
.text:00402D0B                 mov     edi, [esp+0BCh+var_A8]
.text:00402D0F                 mov     [esp+0BCh+var_5C], eax
.text:00402D13                 mov     esi, [esp+0BCh+var_9C]
.text:00402D17                 mov     eax, [esp+0BCh+var_AC]
.text:00402D1B                 mov     [esp+0BCh+var_7C], ebp
.text:00402D1F                 mov     ecx, [esp+0BCh+var_94]
.text:00402D23                 mov     ebp, [esp+0BCh+var_A4]
.text:00402D27                 mov     [esp+0BCh+var_78], edi
.text:00402D2B                 mov     edx, [esp+0BCh+var_90]
.text:00402D2F                 mov     edi, [esp+0BCh+var_A0]
.text:00402D33                 mov     [esp+0BCh+var_4C], eax
.text:00402D37                 mov     ebx, [esp+0BCh+var_98]
.text:00402D3B                 mov     eax, [esp+0BCh+var_A8]
.text:00402D3F                 mov     [esp+0BCh+var_74], ebp
.text:00402D43                 mov     [esp+0BCh+var_70], edi
.text:00402D47                 mov     [esp+0BCh+var_6C], esi
.text:00402D4B                 mov     [esp+0BCh+var_68], ebx
.text:00402D4F                 mov     [esp+0BCh+var_64], ecx
.text:00402D53                 mov     [esp+0BCh+var_60], edx
.text:00402D57                 mov     [esp+0BCh+var_48], eax
.text:00402D5B                 mov     [esp+0BCh+var_44], ebp
.text:00402D5F                 mov     [esp+0BCh+var_40], edi
.text:00402D63                 mov     [esp+0BCh+var_3C], esi
.text:00402D6A                 mov     [esp+0BCh+var_38], ebx
.text:00402D71                 mov     esi, [esp+0BCh+var_8C]
.text:00402D75                 lea     ebx, [esp+0BCh+var_4C]
.text:00402D79                 mov     [esp+0BCh+var_30], edx
.text:00402D80                 mov     edx, [esp+0BCh+arg_8]
.text:00402D87                 mov     [esp+0BCh+var_34], ecx
.text:00402D8E                 mov     ecx, [esp+0BCh+arg_C]
.text:00402D95                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00402D99                 mov     edx, [esp+0BCh+arg_0]
.text:00402DA0                 mov     [esp+0BCh+var_2C], esi
.text:00402DA7                 mov     [esp+0BCh+var_B0], ebx ; int
.text:00402DAB                 mov     [esp+0BCh+var_B4], ecx ; int
.text:00402DAF                 mov     [esp+0BCh+var_BC], edx ; int
.text:00402DB2                 call    sub_403010
.text:00402DB7                 add     esp, 0ACh
.text:00402DBD                 pop     ebx
.text:00402DBE                 pop     esi
.text:00402DBF                 pop     edi
.text:00402DC0                 pop     ebp
.text:00402DC1                 retn
.text:00402DC1 sub_402CE0      endp
.text:00402DC1
.text:00402DC1 ; ---------------------------------------------------------------------------
.text:00402DC2                 align 10h
.text:00402DD0                 push    ebp
.text:00402DD1                 xor     eax, eax
.text:00402DD3                 mov     ecx, 8
.text:00402DD8                 push    edi
.text:00402DD9                 push    esi
.text:00402DDA                 push    ebx
.text:00402DDB                 sub     esp, 0ACh
.text:00402DE1                 mov     edi, [esp+0C0h]
.text:00402DE8                 cld
.text:00402DE9                 mov     [esp+10h], edi
.text:00402DED                 lea     edi, [esp+14h]
.text:00402DF1                 rep stosd
.text:00402DF3                 mov     eax, [esp+30h]
.text:00402DF7                 mov     esi, [esp+10h]
.text:00402DFB                 mov     ebx, [esp+14h]
.text:00402DFF                 mov     [esp+60h], eax
.text:00402E03                 mov     ebp, [esp+18h]
.text:00402E07                 mov     eax, [esp+10h]
.text:00402E0B                 mov     [esp+40h], esi
.text:00402E0F                 mov     edi, [esp+1Ch]
.text:00402E13                 mov     esi, [esp+20h]
.text:00402E17                 mov     [esp+44h], ebx
.text:00402E1B                 mov     ecx, [esp+28h]
.text:00402E1F                 mov     edx, [esp+2Ch]
.text:00402E23                 mov     [esp+70h], eax
.text:00402E27                 mov     ebx, [esp+24h]
.text:00402E2B                 mov     eax, [esp+14h]
.text:00402E2F                 mov     [esp+48h], ebp
.text:00402E33                 mov     [esp+4Ch], edi
.text:00402E37                 mov     [esp+50h], esi
.text:00402E3B                 mov     [esp+54h], ebx
.text:00402E3F                 mov     [esp+58h], ecx
.text:00402E43                 mov     [esp+5Ch], edx
.text:00402E47                 mov     [esp+74h], eax
.text:00402E4B                 mov     [esp+78h], ebp
.text:00402E4F                 mov     [esp+7Ch], edi
.text:00402E53                 mov     [esp+80h], esi
.text:00402E5A                 mov     [esp+84h], ebx
.text:00402E61                 mov     [esp+8Ch], edx
.text:00402E68                 lea     edx, [esp+70h]
.text:00402E6C                 mov     [esp+88h], ecx
.text:00402E73                 mov     ecx, [esp+30h]
.text:00402E77                 mov     [esp+0Ch], edx
.text:00402E7B                 mov     edx, [esp+0C4h]
.text:00402E82                 mov     [esp+90h], ecx
.text:00402E89                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00402E91                 mov     [esp+4], edx
.text:00402E95                 mov     dword ptr [esp], 0
.text:00402E9C                 call    sub_403010
.text:00402EA1                 add     esp, 0ACh
.text:00402EA7                 pop     ebx
.text:00402EA8                 pop     esi
.text:00402EA9                 pop     edi
.text:00402EAA                 pop     ebp
.text:00402EAB                 retn
.text:00402EAB ; ---------------------------------------------------------------------------
.text:00402EAC                 align 10h
.text:00402EB0                 push    edi
.text:00402EB1                 push    esi
.text:00402EB2                 push    ebx
.text:00402EB3                 sub     esp, 40h
.text:00402EB6                 mov     edx, ds:dword_40F10C
.text:00402EBC                 mov     ebx, ds:dword_40F100
.text:00402EC2                 mov     esi, ds:dword_40F108
.text:00402EC8                 mov     edi, ds:dword_40F104
.text:00402ECE                 mov     [esp+1Ch], edx
.text:00402ED2                 mov     ecx, ds:dword_40F110
.text:00402ED8                 mov     edx, ds:dword_40F120
.text:00402EDE                 mov     [esp+10h], ebx
.text:00402EE2                 mov     ebx, ds:dword_40F114
.text:00402EE8                 mov     [esp+30h], edx
.text:00402EEC                 movzx   edx, byte ptr [esp+54h]
.text:00402EF1                 mov     [esp+18h], esi
.text:00402EF5                 mov     esi, ds:dword_40F11C
.text:00402EFB                 mov     [esp+14h], edi
.text:00402EFF                 mov     edi, ds:dword_40F118
.text:00402F05                 mov     [esp+20h], ecx
.text:00402F09                 mov     cl, dl
.text:00402F0B                 shr     cl, 5
.text:00402F0E                 mov     [esp+24h], ebx
.text:00402F12                 movzx   ebx, cl
.text:00402F15                 mov     [esp+2Ch], esi
.text:00402F19                 lea     esi, [esp+10h]
.text:00402F1D                 mov     [esp+28h], edi
.text:00402F21                 lea     edi, [esi+ebx*4]
.text:00402F24                 mov     ebx, edx
.text:00402F26                 mov     edx, [edi+4]
.text:00402F29                 and     ebx, 1Fh
.text:00402F2C                 mov     cl, bl
.text:00402F2E                 mov     eax, edx
.text:00402F30                 shr     eax, cl
.text:00402F32                 and     eax, 1
.text:00402F35                 xor     eax, 1
.text:00402F38                 shl     eax, cl
.text:00402F3A                 xor     edx, eax
.text:00402F3C                 mov     [edi+4], edx
.text:00402F3F                 mov     edx, [esp+50h]
.text:00402F43                 mov     [esp+0Ch], esi
.text:00402F47                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00402F4F                 mov     [esp+4], edx
.text:00402F53                 mov     dword ptr [esp], 0
.text:00402F5A                 call    sub_403010
.text:00402F5F                 add     esp, 40h
.text:00402F62                 pop     ebx
.text:00402F63                 pop     esi
.text:00402F64                 pop     edi
.text:00402F65                 retn
.text:00402F65 ; ---------------------------------------------------------------------------
.text:00402F66                 align 10h
.text:00402F70
.text:00402F70 ; =============== S U B R O U T I N E =======================================
.text:00402F70
.text:00402F70
.text:00402F70 ; int __cdecl sub_402F70(char *)
.text:00402F70 sub_402F70      proc near               ; CODE XREF: sub_4048D0+64↓p
.text:00402F70
.text:00402F70 var_4C          = dword ptr -4Ch
.text:00402F70 var_48          = dword ptr -48h
.text:00402F70 var_44          = dword ptr -44h
.text:00402F70 var_40          = dword ptr -40h
.text:00402F70 var_3C          = dword ptr -3Ch
.text:00402F70 var_38          = dword ptr -38h
.text:00402F70 var_34          = dword ptr -34h
.text:00402F70 var_30          = dword ptr -30h
.text:00402F70 var_2C          = dword ptr -2Ch
.text:00402F70 var_28          = dword ptr -28h
.text:00402F70 var_24          = dword ptr -24h
.text:00402F70 var_20          = dword ptr -20h
.text:00402F70 var_1C          = dword ptr -1Ch
.text:00402F70 arg_0           = dword ptr  4
.text:00402F70
.text:00402F70                 sub     esp, 4Ch
.text:00402F73                 mov     ecx, ds:dword_40F100
.text:00402F79                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00402F81                 mov     edx, ds:dword_40F104
.text:00402F87                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00402F8E                 mov     [esp+4Ch+var_3C], ecx
.text:00402F92                 mov     ecx, ds:dword_40F10C
.text:00402F98                 mov     [esp+4Ch+var_38], edx
.text:00402F9C                 mov     edx, ds:dword_40F108
.text:00402FA2                 mov     [esp+4Ch+var_30], ecx
.text:00402FA6                 mov     ecx, ds:dword_40F110
.text:00402FAC                 mov     eax, edx
.text:00402FAE                 shr     eax, 1Ah
.text:00402FB1                 and     eax, 1
.text:00402FB4                 xor     eax, 1
.text:00402FB7                 mov     [esp+4Ch+var_2C], ecx
.text:00402FBB                 shl     eax, 1Ah
.text:00402FBE                 mov     ecx, ds:dword_40F114
.text:00402FC4                 xor     edx, eax
.text:00402FC6                 mov     [esp+4Ch+var_34], edx
.text:00402FCA                 mov     edx, [esp+4Ch+arg_0]
.text:00402FCE                 mov     [esp+4Ch+var_28], ecx
.text:00402FD2                 mov     ecx, ds:dword_40F118
.text:00402FD8                 mov     [esp+4Ch+var_48], edx ; char *
.text:00402FDC                 mov     [esp+4Ch+var_24], ecx
.text:00402FE0                 mov     ecx, ds:dword_40F11C
.text:00402FE6                 mov     [esp+4Ch+var_20], ecx
.text:00402FEA                 mov     ecx, ds:dword_40F120
.text:00402FF0                 mov     [esp+4Ch+var_1C], ecx
.text:00402FF4                 lea     ecx, [esp+4Ch+var_3C]
.text:00402FF8                 mov     [esp+4Ch+var_40], ecx ; int
.text:00402FFC                 call    sub_403010
.text:00403001                 add     esp, 4Ch
.text:00403004                 retn
.text:00403004 sub_402F70      endp
.text:00403004
.text:00403004 ; ---------------------------------------------------------------------------
.text:00403005                 align 10h
.text:00403010
.text:00403010 ; =============== S U B R O U T I N E =======================================
.text:00403010
.text:00403010
.text:00403010 ; int __cdecl sub_403010(int, char *, int, int)
.text:00403010 sub_403010      proc near               ; CODE XREF: .text:00402BC2↑p
.text:00403010                                         ; .text:00402BF2↑p ...
.text:00403010
.text:00403010 Block           = dword ptr -2Ch
.text:00403010 var_28          = dword ptr -28h
.text:00403010 Str             = dword ptr -24h
.text:00403010 var_20          = dword ptr -20h
.text:00403010 var_1C          = dword ptr -1Ch
.text:00403010 var_18          = dword ptr -18h
.text:00403010 var_14          = dword ptr -14h
.text:00403010 arg_0           = dword ptr  4
.text:00403010 arg_4           = dword ptr  8
.text:00403010 arg_8           = dword ptr  0Ch
.text:00403010 arg_C           = dword ptr  10h
.text:00403010
.text:00403010                 push    ebp
.text:00403011                 push    edi
.text:00403012                 push    esi
.text:00403013                 push    ebx
.text:00403014                 sub     esp, 1Ch
.text:00403017                 call    _errno
.text:0040301C                 mov     edx, [eax]
.text:0040301E                 mov     eax, [esp+2Ch+arg_0]
.text:00403022                 mov     [esp+2Ch+var_14], edx
.text:00403026                 test    eax, eax
.text:00403028                 js      loc_4031CA
.text:0040302E                 mov     eax, [esp+2Ch+arg_0]
.text:00403032                 cmp     dword_40E010, eax
.text:00403038                 ja      short loc_4030B0
.text:0040303A                 mov     esi, eax
.text:0040303C                 inc     esi
.text:0040303D                 cmp     esi, 1FFFFFFFh
.text:00403043                 ja      loc_4031CF
.text:00403049                 mov     ebx, off_40E01C
.text:0040304F                 cmp     ebx, offset dword_40E014
.text:00403055                 jz      loc_4031A1
.text:0040305B
.text:0040305B loc_40305B:                             ; CODE XREF: sub_403010+1B5↓j
.text:0040305B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040305E                 lea     ecx, ds:0[esi*8]
.text:00403065                 mov     ebp, esi
.text:00403067                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040306B                 call    sub_404A80
.text:00403070                 mov     off_40E01C, eax
.text:00403075                 mov     ebx, dword_40E010
.text:0040307B                 sub     ebp, ebx
.text:0040307D                 lea     edi, [eax+ebx*8]
.text:00403080                 lea     eax, ds:0[ebp*8]
.text:00403087                 cmp     eax, 7
.text:0040308A                 jbe     short loc_4030A0
.text:0040308C                 test    edi, 4
.text:00403092                 jz      short loc_4030A0
.text:00403094                 mov     dword ptr [edi], 0
.text:0040309A                 sub     eax, 4
.text:0040309D                 add     edi, 4
.text:004030A0
.text:004030A0 loc_4030A0:                             ; CODE XREF: sub_403010+7A↑j
.text:004030A0                                         ; sub_403010+82↑j
.text:004030A0                 cld
.text:004030A1                 mov     ecx, eax
.text:004030A3                 shr     ecx, 2
.text:004030A6                 xor     eax, eax
.text:004030A8                 rep stosd
.text:004030AA                 mov     dword_40E010, esi
.text:004030B0
.text:004030B0 loc_4030B0:                             ; CODE XREF: sub_403010+28↑j
.text:004030B0                 mov     esi, off_40E01C
.text:004030B6                 mov     eax, [esp+2Ch+arg_0]
.text:004030BA                 mov     ebp, [esi+eax*8]
.text:004030BD                 mov     edi, [esi+eax*8+4]
.text:004030C1                 mov     esi, [esp+2Ch+arg_C]
.text:004030C5                 test    esi, esi
.text:004030C7                 jz      loc_403197
.text:004030CD
.text:004030CD loc_4030CD:                             ; CODE XREF: sub_403010+18C↓j
.text:004030CD                 call    _errno
.text:004030D2                 mov     ebx, [eax]
.text:004030D4                 mov     [esp+2Ch+var_18], esi ; int
.text:004030D8                 mov     ecx, [esi]
.text:004030DA                 mov     [esp+2Ch+Block], edi ; int
.text:004030DD                 mov     edx, [esp+2Ch+arg_8]
.text:004030E1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004030E5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004030E9                 mov     ecx, [esp+2Ch+arg_4]
.text:004030ED                 mov     [esp+2Ch+var_20], edx ; int
.text:004030F1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004030F5                 call    sub_401ED0
.text:004030FA                 mov     esi, eax
.text:004030FC                 call    _errno
.text:00403101                 mov     [eax], ebx
.text:00403103                 cmp     ebp, esi
.text:00403105                 ja      short loc_40317B
.text:00403107                 lea     ebp, [esi+1]
.text:0040310A                 mov     ebx, off_40E01C
.text:00403110                 cmp     edi, offset unk_40F000
.text:00403116                 mov     esi, [esp+2Ch+arg_0]
.text:0040311A                 mov     [ebx+esi*8], ebp
.text:0040311D                 jz      short loc_40312D
.text:0040311F                 mov     [esp+2Ch+Block], edi ; Block
.text:00403122                 call    free
.text:00403127                 mov     ebx, off_40E01C
.text:0040312D
.text:0040312D loc_40312D:                             ; CODE XREF: sub_403010+10D↑j
.text:0040312D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00403130                 call    sub_4049F0
.text:00403135                 mov     esi, [esp+2Ch+arg_C]
.text:00403139                 mov     edi, eax
.text:0040313B                 mov     eax, [esp+2Ch+arg_0]
.text:0040313F                 test    esi, esi
.text:00403141                 mov     [ebx+eax*8+4], edi
.text:00403145                 jz      short loc_403190
.text:00403147
.text:00403147 loc_403147:                             ; CODE XREF: sub_403010+185↓j
.text:00403147                 call    _errno
.text:0040314C                 mov     ebx, [eax]
.text:0040314E                 mov     [esp+2Ch+var_18], esi ; int
.text:00403152                 mov     ecx, [esi]
.text:00403154                 mov     [esp+2Ch+Block], edi ; int
.text:00403157                 mov     edx, [esp+2Ch+arg_8]
.text:0040315B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040315F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403163                 mov     ecx, [esp+2Ch+arg_4]
.text:00403167                 mov     [esp+2Ch+var_20], edx ; int
.text:0040316B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040316F                 call    sub_401ED0
.text:00403174                 call    _errno
.text:00403179                 mov     [eax], ebx
.text:0040317B
.text:0040317B loc_40317B:                             ; CODE XREF: sub_403010+F5↑j
.text:0040317B                 call    _errno
.text:00403180                 mov     ebp, [esp+2Ch+var_14]
.text:00403184                 mov     [eax], ebp
.text:00403186                 add     esp, 1Ch
.text:00403189                 mov     eax, edi
.text:0040318B                 pop     ebx
.text:0040318C                 pop     esi
.text:0040318D                 pop     edi
.text:0040318E                 pop     ebp
.text:0040318F                 retn
.text:00403190 ; ---------------------------------------------------------------------------
.text:00403190
.text:00403190 loc_403190:                             ; CODE XREF: sub_403010+135↑j
.text:00403190                 mov     esi, offset dword_40F100
.text:00403195                 jmp     short loc_403147
.text:00403197 ; ---------------------------------------------------------------------------
.text:00403197
.text:00403197 loc_403197:                             ; CODE XREF: sub_403010+B7↑j
.text:00403197                 mov     esi, offset dword_40F100
.text:0040319C                 jmp     loc_4030CD
.text:004031A1 ; ---------------------------------------------------------------------------
.text:004031A1
.text:004031A1 loc_4031A1:                             ; CODE XREF: sub_403010+45↑j
.text:004031A1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004031A8                 call    sub_4049F0
.text:004031AD                 mov     off_40E01C, eax
.text:004031B2                 mov     edi, dword_40E014
.text:004031B8                 mov     ebx, eax
.text:004031BA                 mov     ecx, off_40E018
.text:004031C0                 mov     [eax], edi
.text:004031C2                 mov     [eax+4], ecx
.text:004031C5                 jmp     loc_40305B
.text:004031CA ; ---------------------------------------------------------------------------
.text:004031CA
.text:004031CA loc_4031CA:                             ; CODE XREF: sub_403010+18↑j
.text:004031CA                 call    abort
.text:004031CF ; ---------------------------------------------------------------------------
.text:004031CF
.text:004031CF loc_4031CF:                             ; CODE XREF: sub_403010+33↑j
.text:004031CF                 call    sub_404CA0
.text:004031CF sub_403010      endp
.text:004031CF
.text:004031CF ; ---------------------------------------------------------------------------
.text:004031D4                 align 10h
.text:004031E0
.text:004031E0 ; =============== S U B R O U T I N E =======================================
.text:004031E0
.text:004031E0
.text:004031E0 sub_4031E0      proc near               ; DATA XREF: sub_403360+1B4↓o
.text:004031E0                 sub     eax, 9090002Dh
.text:004031E5                 nop
.text:004031E6                 nop
.text:004031E7                 nop
.text:004031E8                 nop
.text:004031E9                 nop
.text:004031EA                 nop
.text:004031EB                 nop
.text:004031EC                 nop
.text:004031ED                 nop
.text:004031EE                 nop
.text:004031EF                 nop
.text:004031F0                 nop
.text:004031F1                 nop
.text:004031F2                 nop
.text:004031F3                 nop
.text:004031F4                 nop
.text:004031F5                 nop
.text:004031F6                 nop
.text:004031F7                 nop
.text:004031F8                 nop
.text:004031F9                 nop
.text:004031FA                 nop
.text:004031FB                 nop
.text:004031FC                 nop
.text:004031FD                 nop
.text:004031FE                 nop
.text:004031FF                 nop
.text:004031FF sub_4031E0      endp
.text:004031FF
.text:00403200
.text:00403200 ; =============== S U B R O U T I N E =======================================
.text:00403200
.text:00403200
.text:00403200 sub_403200      proc near               ; DATA XREF: sub_403360+3CC↓o
.text:00403200                 and     eax, 6F203A73h
.text:00403205                 jo      short loc_40327B
.text:00403207                 imul    ebp, [edi+6Eh], 63256020h
.text:0040320E                 and     eax, 64202773h
.text:00403213                 outsd
.text:00403214                 db      65h
.text:00403214                 jnb     short loc_403285
.text:00403217                 daa
.text:00403218                 jz      short loc_40323A
.text:0040321A                 popa
.text:0040321B                 insb
.text:0040321C                 insb
.text:0040321D                 outsd
.text:0040321E                 ja      short sub_403240
.text:00403220                 popa
.text:00403221                 outsb
.text:00403222                 and     [ecx+72h], ah
.text:00403225                 db      67h
.text:00403225                 jnz     near ptr loc_403294+1
.text:00403228                 outs    dx, byte ptr gs:[esi]
.text:0040322A                 jz      short loc_403236
.text:0040322C                 add     [eax-6F6F6F70h], dl
.text:00403232                 nop
.text:00403233                 nop
.text:00403234                 nop
.text:00403235                 nop
.text:00403236
.text:00403236 loc_403236:                             ; CODE XREF: sub_403200+2A↑j
.text:00403236                 nop
.text:00403237                 nop
.text:00403238                 nop
.text:00403239                 nop
.text:0040323A
.text:0040323A loc_40323A:                             ; CODE XREF: sub_403200+18↑j
.text:0040323A                 nop
.text:0040323B                 nop
.text:0040323C                 nop
.text:0040323D                 nop
.text:0040323E                 nop
.text:0040323F                 nop
.text:0040323F sub_403200      endp ; sp-analysis failed
.text:0040323F
.text:00403240
.text:00403240 ; =============== S U B R O U T I N E =======================================
.text:00403240
.text:00403240
.text:00403240 sub_403240      proc near               ; CODE XREF: sub_403200+1E↑j
.text:00403240                                         ; DATA XREF: sub_403360:loc_403792↓o
.text:00403240                 and     eax, 6F203A73h
.text:00403245                 jo      short loc_4032BB
.text:00403247                 imul    ebp, [edi+6Eh], 2D2D6020h
.text:0040324E                 and     eax, 64202773h
.text:00403253                 outsd
.text:00403254                 db      65h
.text:00403254                 jnb     short loc_4032C5
.text:00403257                 daa
.text:00403258                 jz      short loc_40327A
.text:0040325A                 popa
.text:0040325B                 insb
.text:0040325C                 insb
.text:0040325D                 outsd
.text:0040325E                 ja      short sub_403280
.text:00403260                 popa
.text:00403261                 outsb
.text:00403262                 and     [ecx+72h], ah
.text:00403265                 db      67h
.text:00403265                 jnz     loc_4032D5
.text:00403268                 outs    dx, byte ptr gs:[esi]
.text:0040326A                 jz      short loc_403276
.text:0040326C                 add     [eax-6F6F6F70h], dl
.text:00403272                 nop
.text:00403273                 nop
.text:00403274                 nop
.text:00403275                 nop
.text:00403276
.text:00403276 loc_403276:                             ; CODE XREF: sub_403240+2A↑j
.text:00403276                 nop
.text:00403277                 nop
.text:00403278                 nop
.text:00403279                 nop
.text:0040327A
.text:0040327A loc_40327A:                             ; CODE XREF: sub_403240+18↑j
.text:0040327A                 nop
.text:0040327B
.text:0040327B loc_40327B:                             ; CODE XREF: sub_403200+5↑j
.text:0040327B                 nop
.text:0040327C                 nop
.text:0040327D                 nop
.text:0040327E                 nop
.text:0040327F                 nop
.text:0040327F sub_403240      endp ; sp-analysis failed
.text:0040327F
.text:00403280
.text:00403280 ; =============== S U B R O U T I N E =======================================
.text:00403280
.text:00403280
.text:00403280 sub_403280      proc near               ; CODE XREF: sub_403240+1E↑j
.text:00403280                                         ; DATA XREF: sub_403360:loc_403830↓o ...
.text:00403280                 and     eax, 6F203A73h
.text:00403285
.text:00403285 loc_403285:                             ; CODE XREF: sub_403200+14↑j
.text:00403285                 jo      short loc_4032FB
.text:00403287                 imul    ebp, [edi+6Eh], 73256020h
.text:0040328E                 daa
.text:0040328F                 and     [edx+65h], dh
.text:00403292                 jno     short near ptr loc_403308+1
.text:00403294
.text:00403294 loc_403294:                             ; CODE XREF: sub_403200+25↑j
.text:00403294                 imul    esi, [edx+65h], 6E612073h
.text:0040329B                 and     [ecx+72h], ah
.text:0040329E                 db      67h
.text:0040329E                 jnz     near ptr loc_40330C+2
.text:004032A1                 outs    dx, byte ptr gs:[esi]
.text:004032A3                 jz      short loc_4032AF
.text:004032A5                 add     [eax-6F6F6F70h], dl
.text:004032AB                 nop
.text:004032AC                 nop
.text:004032AD                 nop
.text:004032AE                 nop
.text:004032AF
.text:004032AF loc_4032AF:                             ; CODE XREF: sub_403280+23↑j
.text:004032AF                 nop
.text:004032B0                 nop
.text:004032B1                 nop
.text:004032B2                 nop
.text:004032B3                 nop
.text:004032B4                 nop
.text:004032B5                 nop
.text:004032B6                 nop
.text:004032B7                 nop
.text:004032B8                 nop
.text:004032B9                 nop
.text:004032BA                 nop
.text:004032BB
.text:004032BB loc_4032BB:                             ; CODE XREF: sub_403240+5↑j
.text:004032BB                 nop
.text:004032BC                 nop
.text:004032BD                 nop
.text:004032BE                 nop
.text:004032BF                 nop
.text:004032BF sub_403280      endp
.text:004032BF
.text:004032C0
.text:004032C0 ; =============== S U B R O U T I N E =======================================
.text:004032C0
.text:004032C0
.text:004032C0 sub_4032C0      proc near               ; DATA XREF: sub_403360+55E↓o
.text:004032C0                 and     eax, 75203A73h
.text:004032C5
.text:004032C5 loc_4032C5:                             ; CODE XREF: sub_403240+14↑j
.text:004032C5                 outsb
.text:004032C6                 jb      short near ptr loc_403327+6
.text:004032C8                 arpl    [edi+67h], bp
.text:004032CB                 outsb
.text:004032CC                 imul    edi, [edx+65h], 706F2064h
.text:004032D3                 jz      short loc_40333E
.text:004032D5
.text:004032D5 loc_4032D5:                             ; CODE XREF: sub_403240+25↑j
.text:004032D5                 outsd
.text:004032D6                 outsb
.text:004032D7                 and     [eax+25h], ah
.text:004032DA                 arpl    ds:0A2773h, sp
.text:004032E0
.text:004032E0 loc_4032E0:                             ; DATA XREF: sub_403360:loc_403901↓o
.text:004032E0                 add     [eax-6F6F6F70h], dl
.text:004032E6                 nop
.text:004032E7                 nop
.text:004032E8                 nop
.text:004032E9                 nop
.text:004032EA                 nop
.text:004032EB                 nop
.text:004032EC                 nop
.text:004032ED                 nop
.text:004032EE                 nop
.text:004032EF                 nop
.text:004032F0                 nop
.text:004032F1                 nop
.text:004032F2                 nop
.text:004032F3                 nop
.text:004032F4                 nop
.text:004032F5                 nop
.text:004032F6                 nop
.text:004032F7                 nop
.text:004032F8                 nop
.text:004032F9                 nop
.text:004032FA                 nop
.text:004032FB
.text:004032FB loc_4032FB:                             ; CODE XREF: sub_403280:loc_403285↑j
.text:004032FB                 nop
.text:004032FC                 nop
.text:004032FD                 nop
.text:004032FE                 nop
.text:004032FF                 nop
.text:004032FF sub_4032C0      endp
.text:004032FF
.text:00403300
.text:00403300 ; =============== S U B R O U T I N E =======================================
.text:00403300
.text:00403300
.text:00403300 sub_403300      proc near               ; DATA XREF: sub_403360:loc_40391A↓o
.text:00403300                 and     eax, 75203A73h
.text:00403305                 outsb
.text:00403306                 jb      short near ptr loc_403367+6
.text:00403308
.text:00403308 loc_403308:                             ; CODE XREF: sub_403280+12↑j
.text:00403308                 arpl    [edi+67h], bp
.text:0040330B                 outsb
.text:0040330C
.text:0040330C loc_40330C:                             ; CODE XREF: sub_403280+1E↑j
.text:0040330C                 imul    edi, [edx+65h], 706F2064h
.text:00403313                 jz      short loc_40337E
.text:00403315                 outsd
.text:00403316                 outsb
.text:00403317                 and     [eax+2Dh], ah
.text:0040331A                 sub     eax, 0A277325h
.text:0040331F                 add     ds:6F203A73h, ah
.text:00403325                 jo      short loc_40339B
.text:00403327
.text:00403327 loc_403327:                             ; CODE XREF: sub_4032C0+6↑j
.text:00403327                 imul    ebp, [edi+6Eh], 71657220h
.text:0040332E                 jnz     short loc_403399
.text:00403330                 jb      short loc_403397
.text:00403332                 jnb     short loc_403354
.text:00403334                 popa
.text:00403335                 outsb
.text:00403336                 and     [ecx+72h], ah
.text:00403339                 db      67h
.text:00403339                 jnz     near ptr loc_4033A7+2
.text:0040333C                 outs    dx, byte ptr gs:[esi]
.text:0040333E
.text:0040333E loc_40333E:                             ; CODE XREF: sub_4032C0+13↑j
.text:0040333E                 jz      short sub_403360
.text:00403340                 sub     eax, 6325202Dh
.text:00403345                 or      al, [eax]
.text:00403347                 nop
.text:00403348                 nop
.text:00403349                 nop
.text:0040334A                 nop
.text:0040334B                 nop
.text:0040334C                 nop
.text:0040334D                 nop
.text:0040334E                 nop
.text:0040334F                 nop
.text:00403350                 nop
.text:00403351                 nop
.text:00403352                 nop
.text:00403353                 nop
.text:00403354
.text:00403354 loc_403354:                             ; CODE XREF: sub_403300+32↑j
.text:00403354                 nop
.text:00403355                 nop
.text:00403356                 nop
.text:00403357                 nop
.text:00403358                 nop
.text:00403359                 nop
.text:0040335A                 nop
.text:0040335B                 nop
.text:0040335C                 nop
.text:0040335D                 nop
.text:0040335E                 nop
.text:0040335F                 nop
.text:0040335F sub_403300      endp ; sp-analysis failed
.text:0040335F
.text:00403360
.text:00403360 ; =============== S U B R O U T I N E =======================================
.text:00403360
.text:00403360
.text:00403360 ; int __cdecl sub_403360(char *Str2, size_t MaxCount, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char *Str, int, int, int, int)
.text:00403360 sub_403360      proc near               ; CODE XREF: sub_403300:loc_40333E↑j
.text:00403360                                         ; DATA XREF: sub_403360:loc_403B73↓o
.text:00403360
.text:00403360 Str2            = dword ptr  4
.text:00403360 MaxCount        = dword ptr  8
.text:00403360 arg_8           = dword ptr  0Ch
.text:00403360 arg_C           = dword ptr  10h
.text:00403360 arg_1C          = dword ptr  20h
.text:00403360 arg_20          = dword ptr  24h
.text:00403360 arg_24          = dword ptr  28h
.text:00403360 arg_28          = dword ptr  2Ch
.text:00403360 arg_2C          = dword ptr  30h
.text:00403360 arg_30          = dword ptr  34h
.text:00403360 arg_34          = dword ptr  38h
.text:00403360 arg_38          = dword ptr  3Ch
.text:00403360 arg_3C          = dword ptr  40h
.text:00403360 arg_40          = dword ptr  44h
.text:00403360 arg_44          = dword ptr  48h
.text:00403360 arg_5C          = dword ptr  60h
.text:00403360 arg_60          = dword ptr  64h
.text:00403360 Str             = dword ptr  68h
.text:00403360 arg_68          = dword ptr  6Ch
.text:00403360 arg_6C          = dword ptr  70h
.text:00403360 arg_70          = dword ptr  74h
.text:00403360 arg_74          = dword ptr  78h
.text:00403360
.text:00403360 ; FUNCTION CHUNK AT .text:004033DB SIZE 00000053 BYTES
.text:00403360 ; FUNCTION CHUNK AT .text:00403444 SIZE 0000014B BYTES
.text:00403360 ; FUNCTION CHUNK AT .text:00403590 SIZE 0000023A BYTES
.text:00403360 ; FUNCTION CHUNK AT .text:004037D0 SIZE 00000099 BYTES
.text:00403360 ; FUNCTION CHUNK AT .text:00403870 SIZE 000000DF BYTES
.text:00403360 ; FUNCTION CHUNK AT .text:00403950 SIZE 0000025B BYTES
.text:00403360 ; FUNCTION CHUNK AT .text:00403BB0 SIZE 000001AE BYTES
.text:00403360 ; FUNCTION CHUNK AT .text:00403D60 SIZE 000000F9 BYTES
.text:00403360 ; FUNCTION CHUNK AT .text:00403E60 SIZE 000000CE BYTES
.text:00403360 ; FUNCTION CHUNK AT .text:00403F30 SIZE 0000003A BYTES
.text:00403360 ; FUNCTION CHUNK AT .text:00403F70 SIZE 0000000B BYTES
.text:00403360 ; FUNCTION CHUNK AT .text:00403F80 SIZE 00000019 BYTES
.text:00403360 ; FUNCTION CHUNK AT .text:00403FA0 SIZE 00000011 BYTES
.text:00403360
.text:00403360                 and     eax, 6F203A73h
.text:00403365                 jo      short loc_4033DB
.text:00403367
.text:00403367 loc_403367:                             ; CODE XREF: sub_403300+6↑j
.text:00403367                 imul    ebp, [edi+6Eh], 572D6020h
.text:0040336E                 and     ds:64202773h, ah
.text:00403374                 outsd
.text:00403375                 db      65h
.text:00403375                 jnb     short near ptr loc_4033E4+2
.text:00403378                 daa
.text:00403379                 jz      short loc_40339B
.text:0040337B                 popa
.text:0040337C                 insb
.text:0040337D                 insb
.text:0040337E
.text:0040337E loc_40337E:                             ; CODE XREF: sub_403300+13↑j
.text:0040337E                 outsd
.text:0040337F                 ja      short near ptr sub_4033A0+1
.text:00403381                 popa
.text:00403382                 outsb
.text:00403383                 and     [ecx+72h], ah
.text:00403386                 db      67h
.text:00403386                 jnz     near ptr loc_4033F5+1
.text:00403389                 outs    dx, byte ptr gs:[esi]
.text:0040338B                 jz      short loc_403397
.text:0040338D                 add     [eax-6F6F6F70h], dl
.text:00403393                 nop
.text:00403394                 nop
.text:00403395                 nop
.text:00403396                 nop
.text:00403397
.text:00403397 loc_403397:                             ; CODE XREF: sub_403300+30↑j
.text:00403397                                         ; sub_403360+2B↑j
.text:00403397                 nop
.text:00403398                 nop
.text:00403399
.text:00403399 loc_403399:                             ; CODE XREF: sub_403300+2E↑j
.text:00403399                 nop
.text:0040339A                 nop
.text:0040339B
.text:0040339B loc_40339B:                             ; CODE XREF: sub_403300+25↑j
.text:0040339B                                         ; sub_403360+19↑j
.text:0040339B                 nop
.text:0040339C                 nop
.text:0040339D                 nop
.text:0040339E                 nop
.text:0040339F                 nop
.text:0040339F sub_403360      endp ; sp-analysis failed
.text:0040339F
.text:004033A0
.text:004033A0 ; =============== S U B R O U T I N E =======================================
.text:004033A0
.text:004033A0
.text:004033A0 sub_4033A0      proc near               ; CODE XREF: sub_403360+1F↑j
.text:004033A0                                         ; DATA XREF: sub_403360:loc_403C5F↓o
.text:004033A0
.text:004033A0 arg_A4          = dword ptr  0A8h
.text:004033A0 arg_B8          = dword ptr  0BCh
.text:004033A0
.text:004033A0 ; FUNCTION CHUNK AT .text:0040343A SIZE 0000000A BYTES
.text:004033A0
.text:004033A0                 and     eax, 6F203A73h
.text:004033A5                 jo      short loc_40341B
.text:004033A7
.text:004033A7 loc_4033A7:                             ; CODE XREF: sub_403300+39↑j
.text:004033A7                 imul    ebp, [edi+6Eh], 572D6020h
.text:004033AE                 and     ds:69202773h, ah
.text:004033B4                 jnb     short near ptr loc_4033D3+3
.text:004033B6                 popa
.text:004033B7                 insd
.text:004033B8                 bound   ebp, [ecx+67h]
.text:004033BB                 jnz     short near ptr loc_403428+4
.text:004033BD                 jnz     short near ptr loc_403431+1
.text:004033BF                 or      al, [eax]
.text:004033C1
.text:004033C1 loc_4033C1:                             ; DATA XREF: sub_403360+A0F↓o
.text:004033C1                 and     eax, 69203A73h
.text:004033C6                 insb
.text:004033C7                 insb
.text:004033C8                 db      65h, 67h
.text:004033C8                 popa
.text:004033CB                 insb
.text:004033CC                 and     [edi+70h], ch
.text:004033CF                 jz      short loc_40343A
.text:004033D1                 outsd
.text:004033D2                 outsb
.text:004033D3
.text:004033D3 loc_4033D3:                             ; CODE XREF: sub_4033A0+14↑j
.text:004033D3                 and     ds:6325202Dh, ch
.text:004033D9                 or      al, [eax]
.text:004033D9 sub_4033A0      endp ; sp-analysis failed
.text:004033D9
.text:004033DB ; START OF FUNCTION CHUNK FOR sub_403360
.text:004033DB
.text:004033DB loc_4033DB:                             ; CODE XREF: sub_403360+5↑j
.text:004033DB                                         ; DATA XREF: sub_403360:loc_403DA7↓o
.text:004033DB                 and     eax, 69203A73h
.text:004033E0                 outsb
.text:004033E1                 jbe     short loc_403444
.text:004033E3                 insb
.text:004033E4
.text:004033E4 loc_4033E4:                             ; CODE XREF: sub_403360+15↑j
.text:004033E4                 imul    esp, [eax+6Fh], 6F697470h
.text:004033EC                 outsb
.text:004033ED                 and     ds:6325202Dh, ch
.text:004033F3                 or      al, [eax]
.text:004033F5
.text:004033F5 loc_4033F5:                             ; CODE XREF: sub_403360+26↑j
.text:004033F5                                         ; DATA XREF: sub_403360:loc_403DCE↓o
.text:004033F5                 and     eax, 6F203A73h
.text:004033FA                 jo      short near ptr loc_40346F+1
.text:004033FC                 imul    ebp, [edi+6Eh], 73256020h
.text:00403403                 daa
.text:00403404                 and     [ecx+73h], ch
.text:00403407                 and     [ecx+6Dh], ah
.text:0040340A                 bound   ebp, [ecx+67h]
.text:0040340D                 jnz     short near ptr loc_40347C+2
.text:0040340F                 jnz     short near ptr loc_403483+1
.text:00403411                 or      al, [eax]
.text:00403413
.text:00403413 loc_403413:                             ; DATA XREF: sub_403360:loc_403F80↓o
.text:00403413                 push    eax
.text:00403414                 dec     edi
.text:00403415                 push    ebx
.text:00403416                 dec     ecx
.text:00403417                 pop     eax
.text:00403418                 dec     esp
.text:00403419                 pop     ecx
.text:0040341A                 pop     edi
.text:0040341B
.text:0040341B loc_40341B:                             ; CODE XREF: sub_4033A0+5↑j
.text:0040341B                 inc     ebx
.text:0040341C                 dec     edi
.text:0040341D                 push    edx
.text:0040341E                 push    edx
.text:0040341F                 inc     ebp
.text:00403420                 inc     ebx
.text:00403421                 push    esp
.text:00403422                 add     [ebp+0B6h], cl
.text:00403428
.text:00403428 loc_403428:                             ; CODE XREF: sub_4033A0+1B↑j
.text:00403428                 add     [ebp+27BCh], cl
.text:00403428 ; END OF FUNCTION CHUNK FOR sub_403360
.text:00403428 ; ---------------------------------------------------------------------------
.text:0040342E                 dw 0
.text:00403430 ; ---------------------------------------------------------------------------
.text:00403430
.text:00403430 loc_403430:                             ; CODE XREF: sub_403FC0+5A↓p
.text:00403430                                         ; .text:004040AA↓p ...
.text:00403430                 push    ebp
.text:00403431
.text:00403431 loc_403431:                             ; CODE XREF: sub_4033A0+1D↑j
.text:00403431                 mov     eax, 0FFFFFFFFh
.text:00403436                 push    edi
.text:00403437                 push    esi
.text:00403438                 push    ebx
.text:00403438 ; ---------------------------------------------------------------------------
.text:00403439                 db 83h
.text:0040343A ; ---------------------------------------------------------------------------
.text:0040343A ; START OF FUNCTION CHUNK FOR sub_4033A0
.text:0040343A
.text:0040343A loc_40343A:                             ; CODE XREF: sub_4033A0+2F↑j
.text:0040343A                 in      al, dx
.text:0040343B                 dec     esp
.text:0040343C                 mov     esi, [esp-40h+arg_A4]
.text:00403440                 mov     ebp, [esp-40h+arg_B8]
.text:00403440 ; END OF FUNCTION CHUNK FOR sub_4033A0
.text:00403444 ; START OF FUNCTION CHUNK FOR sub_403360
.text:00403444
.text:00403444 loc_403444:                             ; CODE XREF: sub_403360+81↑j
.text:00403444                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00403447                 mov     ebx, [ebp+4]
.text:0040344A                 setz    dl
.text:0040344D                 movzx   ecx, dl
.text:00403450                 dec     ecx
.text:00403451                 and     ecx, ebx
.text:00403453                 mov     [esp+arg_44], ecx
.text:00403457                 mov     ecx, [esp+arg_5C]
.text:0040345B                 test    ecx, ecx
.text:0040345D                 jle     loc_403587
.text:00403463                 mov     dword ptr [ebp+0Ch], 0
.text:0040346A                 mov     ebx, [ebp+0]
.text:0040346D                 test    ebx, ebx
.text:0040346F
.text:0040346F loc_40346F:                             ; CODE XREF: sub_403360+9A↑j
.text:0040346F                 jz      loc_403FA0
.text:00403475                 mov     edi, [ebp+10h]
.text:00403478                 test    edi, edi
.text:0040347A                 jnz     short loc_4034D3
.text:0040347C
.text:0040347C loc_40347C:                             ; CODE XREF: sub_403360+AD↑j
.text:0040347C                 lea     esi, [esi+0]
.text:00403480
.text:00403480 loc_403480:                             ; CODE XREF: sub_403360+C4C↓j
.text:00403480                 mov     [ebp+24h], ebx
.text:00403483
.text:00403483 loc_403483:                             ; CODE XREF: sub_403360+AF↑j
.text:00403483                 mov     esi, [esp+Str]
.text:00403487                 mov     [ebp+20h], ebx
.text:0040348A                 mov     ecx, [esp+arg_74]
.text:0040348E                 xor     ebx, ebx
.text:00403490                 mov     dword ptr [ebp+14h], 0
.text:00403497                 test    ecx, ecx
.text:00403499                 jz      loc_403F80
.text:0040349F
.text:0040349F loc_40349F:                             ; CODE XREF: sub_403360+C34↓j
.text:0040349F                 mov     ebx, 1
.text:004034A4
.text:004034A4 loc_4034A4:                             ; CODE XREF: sub_403360+C2E↓j
.text:004034A4                 mov     [ebp+1Ch], ebx
.text:004034A7                 mov     ecx, [esp+Str]
.text:004034AB                 movzx   eax, byte ptr [ecx]
.text:004034AE                 cmp     al, 2Dh ; '-'
.text:004034B0                 jz      loc_403F70
.text:004034B6                 cmp     al, 2Bh ; '+'
.text:004034B8                 jz      loc_403F59
.text:004034BE                 xor     edx, edx
.text:004034C0                 test    ebx, ebx
.text:004034C2                 setz    dl
.text:004034C5                 mov     [ebp+18h], edx
.text:004034C8
.text:004034C8 loc_4034C8:                             ; CODE XREF: sub_403360+C05↓j
.text:004034C8                 mov     [esp+Str], esi
.text:004034CC                 mov     dword ptr [ebp+10h], 1
.text:004034D3
.text:004034D3 loc_4034D3:                             ; CODE XREF: sub_403360+11A↑j
.text:004034D3                 mov     eax, [ebp+14h]
.text:004034D6                 test    eax, eax
.text:004034D8                 jz      short loc_4034E3
.text:004034DA                 cmp     byte ptr [eax], 0
.text:004034DD                 jnz     loc_4035C0
.text:004034E3
.text:004034E3 loc_4034E3:                             ; CODE XREF: sub_403360+178↑j
.text:004034E3                 mov     ebx, [ebp+0]
.text:004034E6                 cmp     [ebp+24h], ebx
.text:004034E9                 jle     short loc_4034EE
.text:004034EB                 mov     [ebp+24h], ebx
.text:004034EE
.text:004034EE loc_4034EE:                             ; CODE XREF: sub_403360+189↑j
.text:004034EE                 cmp     [ebp+20h], ebx
.text:004034F1                 jle     short loc_4034F6
.text:004034F3                 mov     [ebp+20h], ebx
.text:004034F6
.text:004034F6 loc_4034F6:                             ; CODE XREF: sub_403360+191↑j
.text:004034F6                 cmp     dword ptr [ebp+18h], 1
.text:004034FA                 jz      loc_403ED0
.text:00403500
.text:00403500 loc_403500:                             ; CODE XREF: sub_403360+BE3↓j
.text:00403500                 cmp     ebx, [esp+arg_5C]
.text:00403504                 jz      loc_403EB4
.text:0040350A                 cld
.text:0040350B                 mov     ecx, [esp+arg_60]
.text:0040350F                 mov     edx, 3
.text:00403514                 mov     edi, offset sub_4031E0
.text:00403519                 mov     esi, [ecx+ebx*4]
.text:0040351C                 mov     ecx, edx
.text:0040351E                 repe cmpsb
.text:00403520                 jnz     short loc_40355C
.text:00403522                 mov     edx, [ebp+24h]
.text:00403525                 lea     eax, [ebx+1]
.text:00403528                 cmp     [ebp+20h], edx
.text:0040352B                 mov     [ebp+0], eax
.text:0040352E                 jz      loc_403EC8
.text:00403534                 cmp     edx, eax
.text:00403536                 jz      short loc_403550
.text:00403538                 mov     [esp+Str2], ebp
.text:0040353C                 mov     ebx, [esp+arg_60]
.text:00403540                 mov     [esp+0], ebx
.text:00403543                 call    sub_4040E0
.text:00403548                 nop
.text:00403549                 lea     esi, [esi+0]
.text:00403550
.text:00403550 loc_403550:                             ; CODE XREF: sub_403360+1D6↑j
.text:00403550                                         ; sub_403360+B6B↓j
.text:00403550                 mov     eax, [esp+arg_5C]
.text:00403554                 mov     ebx, eax
.text:00403556                 mov     [ebp+24h], eax
.text:00403559                 mov     [ebp+0], eax
.text:0040355C
.text:0040355C loc_40355C:                             ; CODE XREF: sub_403360+1C0↑j
.text:0040355C                 cmp     ebx, [esp+arg_5C]
.text:00403560                 jz      loc_403EB4
.text:00403566                 mov     esi, [esp+arg_60]
.text:0040356A                 mov     eax, [esi+ebx*4]
.text:0040356D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403570                 jz      short loc_403597
.text:00403572
.text:00403572 loc_403572:                             ; CODE XREF: sub_403360+23D↓j
.text:00403572                 mov     edx, [ebp+18h]
.text:00403575                 test    edx, edx
.text:00403577                 jz      short loc_403590
.text:00403579                 mov     [ebp+0Ch], eax
.text:0040357C                 lea     edi, [ebx+1]
.text:0040357F                 mov     eax, 1
.text:00403584                 mov     [ebp+0], edi
.text:00403587
.text:00403587 loc_403587:                             ; CODE XREF: sub_403360+FD↑j
.text:00403587                                         ; sub_403360+235↓j ...
.text:00403587                 add     esp, 4Ch
.text:0040358A                 pop     ebx
.text:0040358B                 pop     esi
.text:0040358C                 pop     edi
.text:0040358D                 pop     ebp
.text:0040358E                 retn
.text:0040358E ; END OF FUNCTION CHUNK FOR sub_403360
.text:0040358E ; ---------------------------------------------------------------------------
.text:0040358F                 align 10h
.text:00403590 ; START OF FUNCTION CHUNK FOR sub_403360
.text:00403590
.text:00403590 loc_403590:                             ; CODE XREF: sub_403360+217↑j
.text:00403590                                         ; sub_403360+B5A↓j ...
.text:00403590                 mov     eax, 0FFFFFFFFh
.text:00403595                 jmp     short loc_403587
.text:00403597 ; ---------------------------------------------------------------------------
.text:00403597
.text:00403597 loc_403597:                             ; CODE XREF: sub_403360+210↑j
.text:00403597                 movzx   edx, byte ptr [eax+1]
.text:0040359B                 test    dl, dl
.text:0040359D                 jz      short loc_403572
.text:0040359F                 mov     ebx, [esp+arg_68]
.text:004035A3                 xor     ecx, ecx
.text:004035A5                 test    ebx, ebx
.text:004035A7                 jz      short loc_4035B2
.text:004035A9                 cmp     dl, 2Dh ; '-'
.text:004035AC                 jz      loc_403EAA
.text:004035B2
.text:004035B2 loc_4035B2:                             ; CODE XREF: sub_403360+247↑j
.text:004035B2                                         ; sub_403360+B4F↓j
.text:004035B2                 lea     esi, [ecx+eax+1]
.text:004035B6                 mov     [ebp+14h], esi
.text:004035B9                 lea     esi, [esi+0]
.text:004035C0
.text:004035C0 loc_4035C0:                             ; CODE XREF: sub_403360+17D↑j
.text:004035C0                 mov     ecx, [esp+arg_68]
.text:004035C4                 test    ecx, ecx
.text:004035C6                 jz      loc_403950
.text:004035CC                 mov     edx, [ebp+0]
.text:004035CF                 mov     edi, [esp+arg_60]
.text:004035D3                 mov     eax, [edi+edx*4]
.text:004035D6                 movzx   edx, byte ptr [eax+1]
.text:004035DA                 cmp     dl, 2Dh ; '-'
.text:004035DD                 jz      short loc_4035F5
.text:004035DF                 mov     ebx, [esp+arg_70]
.text:004035E3                 test    ebx, ebx
.text:004035E5                 jz      loc_403950
.text:004035EB                 cmp     byte ptr [eax+2], 0
.text:004035EF                 jz      loc_403E8A
.text:004035F5
.text:004035F5 loc_4035F5:                             ; CODE XREF: sub_403360+27D↑j
.text:004035F5                                         ; sub_403360+B45↓j
.text:004035F5                 mov     [esp+arg_40], 0
.text:004035FD                 mov     ecx, [ebp+14h]
.text:00403600                 mov     [esp+arg_3C], 0
.text:00403608                 mov     [esp+arg_38], 0
.text:00403610                 mov     edi, ecx
.text:00403612                 mov     [esp+arg_34], 0FFFFFFFFh
.text:0040361A                 movzx   eax, byte ptr [ecx]
.text:0040361D                 test    al, al
.text:0040361F                 jz      short loc_40363C
.text:00403621                 cmp     al, 3Dh ; '='
.text:00403623                 jz      short loc_40363C
.text:00403625                 lea     esi, [esi+0]
.text:00403629                 lea     edi, [edi+0]
.text:00403630
.text:00403630 loc_403630:                             ; CODE XREF: sub_403360+2DA↓j
.text:00403630                 inc     edi
.text:00403631                 movzx   eax, byte ptr [edi]
.text:00403634                 test    al, al
.text:00403636                 jz      short loc_40363C
.text:00403638                 cmp     al, 3Dh ; '='
.text:0040363A                 jnz     short loc_403630
.text:0040363C
.text:0040363C loc_40363C:                             ; CODE XREF: sub_403360+2BF↑j
.text:0040363C                                         ; sub_403360+2C3↑j ...
.text:0040363C                 mov     [esp+arg_30], 0
.text:00403644                 mov     esi, [esp+arg_68]
.text:00403648                 mov     ebx, [esi]
.text:0040364A                 test    ebx, ebx
.text:0040364C                 mov     edx, ebx
.text:0040364E                 jz      loc_403870
.text:00403654                 lea     esi, [esi+0]
.text:0040365A                 lea     edi, [edi+0]
.text:00403660
.text:00403660 loc_403660:                             ; CODE XREF: sub_403360+32E↓j
.text:00403660                 mov     [esp+Str2], ecx ; Str2
.text:00403664                 mov     ebx, edi
.text:00403666                 sub     ebx, ecx
.text:00403668                 mov     [esp+MaxCount], ebx ; MaxCount
.text:0040366C                 mov     [esp+0], edx    ; Str1
.text:0040366F                 call    strncmp
.text:00403674                 test    eax, eax
.text:00403676                 jz      loc_403E06
.text:0040367C
.text:0040367C loc_40367C:                             ; CODE XREF: sub_403360+ADF↓j
.text:0040367C                                         ; sub_403360+AF4↓j ...
.text:0040367C                 inc     [esp+arg_30]
.text:00403680                 add     esi, 10h
.text:00403683                 mov     ecx, [esi]
.text:00403685                 test    ecx, ecx
.text:00403687                 mov     edx, ecx
.text:00403689                 jz      short loc_403690
.text:0040368B                 mov     ecx, [ebp+14h]
.text:0040368E                 jmp     short loc_403660
.text:00403690 ; ---------------------------------------------------------------------------
.text:00403690
.text:00403690 loc_403690:                             ; CODE XREF: sub_403360+329↑j
.text:00403690                                         ; sub_403360+B25↓j
.text:00403690                 mov     esi, [esp+arg_38]
.text:00403694                 test    esi, esi
.text:00403696                 jz      short loc_4036A4
.text:00403698                 mov     edx, [esp+arg_3C]
.text:0040369C                 test    edx, edx
.text:0040369E                 jz      loc_403DB0
.text:004036A4
.text:004036A4 loc_4036A4:                             ; CODE XREF: sub_403360+336↑j
.text:004036A4                 mov     eax, [esp+arg_40]
.text:004036A8                 test    eax, eax
.text:004036AA                 jz      loc_403870
.text:004036B0                 mov     ecx, [ebp+0]
.text:004036B3                 lea     eax, [ecx+1]
.text:004036B6                 mov     [ebp+0], eax
.text:004036B9                 cmp     byte ptr [edi], 0
.text:004036BC                 jz      loc_4037D0
.text:004036C2                 mov     ecx, [esp+arg_40]
.text:004036C6                 mov     esi, [ecx+4]
.text:004036C9                 test    esi, esi
.text:004036CB                 jz      short loc_403716
.text:004036CD                 lea     ebx, [edi+1]
.text:004036D0                 mov     [ebp+0Ch], ebx
.text:004036D3
.text:004036D3 loc_4036D3:                             ; CODE XREF: sub_403360+478↓j
.text:004036D3                                         ; sub_403360+494↓j
.text:004036D3                 mov     ebx, [ebp+14h]
.text:004036D6                 mov     [esp+0], ebx    ; Str
.text:004036D9                 call    strlen
.text:004036DE                 add     [ebp+14h], eax
.text:004036E1                 mov     esi, [esp+arg_6C]
.text:004036E5                 test    esi, esi
.text:004036E7                 jz      short loc_4036F3
.text:004036E9                 mov     ebp, [esp+arg_34]
.text:004036ED                 mov     ecx, [esp+arg_6C]
.text:004036F1                 mov     [ecx], ebp
.text:004036F3
.text:004036F3 loc_4036F3:                             ; CODE XREF: sub_403360+387↑j
.text:004036F3                 mov     eax, [esp+arg_40]
.text:004036F7                 mov     ecx, [eax+8]
.text:004036FA                 test    ecx, ecx
.text:004036FC                 jnz     short loc_40370A
.text:004036FE                 mov     ecx, [esp+arg_40]
.text:00403702
.text:00403702 loc_403702:                             ; CODE XREF: sub_403360+7F3↓j
.text:00403702                 mov     eax, [ecx+0Ch]
.text:00403705                 jmp     loc_403587
.text:0040370A ; ---------------------------------------------------------------------------
.text:0040370A
.text:0040370A loc_40370A:                             ; CODE XREF: sub_403360+39C↑j
.text:0040370A                                         ; sub_403360+7E9↓j
.text:0040370A                 mov     esi, [eax+0Ch]
.text:0040370D                 xor     eax, eax
.text:0040370F                 mov     [ecx], esi
.text:00403711                 jmp     loc_403587
.text:00403716 ; ---------------------------------------------------------------------------
.text:00403716
.text:00403716 loc_403716:                             ; CODE XREF: sub_403360+36B↑j
.text:00403716                 mov     edi, [esp+arg_44]
.text:0040371A                 test    edi, edi
.text:0040371C                 jz      short loc_403770
.text:0040371E                 mov     esi, [esp+arg_60]
.text:00403722                 mov     edx, [esi+eax*4-4]
.text:00403726                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040372A                 jz      short loc_403792
.text:0040372C                 mov     dword ptr [esp+0], offset sub_403200
.text:00403733                 call    ds:libintl_gettext
.text:00403739                 mov     edx, [esp+arg_40]
.text:0040373D                 mov     edi, [edx]
.text:0040373F                 mov     [esp+arg_C], edi
.text:00403743                 mov     ebx, [ebp+0]
.text:00403746                 mov     edi, [esp+arg_60]
.text:0040374A                 mov     ecx, [edi+ebx*4-4]
.text:0040374E                 movsx   esi, byte ptr [ecx]
.text:00403751                 mov     ecx, ds:_iob
.text:00403757                 add     ecx, 40h ; '@'
.text:0040375A                 mov     [esp+arg_8], esi
.text:0040375E                 mov     ebx, [edi]
.text:00403760                 mov     [esp+Str2], eax ; Format
.text:00403764                 mov     [esp+0], ecx    ; Stream
.text:00403767                 mov     [esp+MaxCount], ebx
.text:0040376B                 call    fprintf
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: sub_403360+3BC↑j
.text:00403770                                         ; sub_403360+468↓j
.text:00403770                 mov     ecx, [ebp+14h]
.text:00403773                 mov     [esp+0], ecx    ; Str
.text:00403776                 call    strlen
.text:0040377B                 add     [ebp+14h], eax
.text:0040377E                 mov     eax, [esp+arg_40]
.text:00403782                 mov     esi, [eax+0Ch]
.text:00403785                 mov     [ebp+8], esi
.text:00403788
.text:00403788 loc_403788:                             ; CODE XREF: sub_403360+5B5↓j
.text:00403788                                         ; sub_403360+80E↓j ...
.text:00403788                 mov     eax, 3Fh ; '?'
.text:0040378D                 jmp     loc_403587
.text:00403792 ; ---------------------------------------------------------------------------
.text:00403792
.text:00403792 loc_403792:                             ; CODE XREF: sub_403360+3CA↑j
.text:00403792                 mov     dword ptr [esp+0], offset sub_403240
.text:00403799                 call    ds:libintl_gettext
.text:0040379F                 mov     edx, [esp+arg_40]
.text:004037A3                 mov     edi, [esp+arg_60]
.text:004037A7                 mov     ecx, ds:_iob
.text:004037AD                 mov     esi, [edx]
.text:004037AF                 add     ecx, 40h ; '@'
.text:004037B2                 mov     [esp+arg_8], esi
.text:004037B6                 mov     ebx, [edi]
.text:004037B8                 mov     [esp+Str2], eax ; Format
.text:004037BC                 mov     [esp+0], ecx    ; Stream
.text:004037BF                 mov     [esp+MaxCount], ebx
.text:004037C3                 call    fprintf
.text:004037C8                 jmp     short loc_403770
.text:004037C8 ; END OF FUNCTION CHUNK FOR sub_403360
.text:004037C8 ; ---------------------------------------------------------------------------
.text:004037CA                 align 10h
.text:004037D0 ; START OF FUNCTION CHUNK FOR sub_403360
.text:004037D0
.text:004037D0 loc_4037D0:                             ; CODE XREF: sub_403360+35C↑j
.text:004037D0                 mov     ebx, [esp+arg_40]
.text:004037D4                 cmp     dword ptr [ebx+4], 1
.text:004037D8                 jnz     loc_4036D3
.text:004037DE                 cmp     eax, [esp+arg_5C]
.text:004037E2                 jge     short loc_4037F9
.text:004037E4                 mov     ebx, [esp+arg_60]
.text:004037E8                 lea     edi, [ecx+2]
.text:004037EB                 mov     [ebp+0], edi
.text:004037EE                 mov     esi, [ebx+eax*4]
.text:004037F1                 mov     [ebp+0Ch], esi
.text:004037F4                 jmp     loc_4036D3
.text:004037F9 ; ---------------------------------------------------------------------------
.text:004037F9
.text:004037F9 loc_4037F9:                             ; CODE XREF: sub_403360+482↑j
.text:004037F9                 mov     edx, [esp+arg_44]
.text:004037FD                 test    edx, edx
.text:004037FF                 jnz     short loc_403830
.text:00403801
.text:00403801 loc_403801:                             ; CODE XREF: sub_403360+507↓j
.text:00403801                 mov     edx, [ebp+14h]
.text:00403804                 mov     [esp+0], edx    ; Str
.text:00403807                 call    strlen
.text:0040380C                 add     [ebp+14h], eax
.text:0040380F                 mov     eax, [esp+arg_40]
.text:00403813                 mov     edi, [eax+0Ch]
.text:00403816                 mov     [ebp+8], edi
.text:00403819
.text:00403819 loc_403819:                             ; CODE XREF: sub_403360+892↓j
.text:00403819                 mov     ebp, [esp+Str]
.text:0040381D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403821                 setnz   bl
.text:00403824                 movzx   esi, bl
.text:00403827                 lea     eax, [esi+esi*4+3Ah]
.text:0040382B                 jmp     loc_403587
.text:00403830 ; ---------------------------------------------------------------------------
.text:00403830
.text:00403830 loc_403830:                             ; CODE XREF: sub_403360+49F↑j
.text:00403830                 mov     dword ptr [esp+0], offset sub_403280
.text:00403837                 call    ds:libintl_gettext
.text:0040383D                 mov     ecx, [ebp+0]
.text:00403840                 mov     esi, [esp+arg_60]
.text:00403844                 mov     ebx, [esi+ecx*4-4]
.text:00403848                 mov     ecx, ds:_iob
.text:0040384E                 mov     [esp+arg_8], ebx
.text:00403852                 mov     edi, [esi]
.text:00403854                 add     ecx, 40h ; '@'
.text:00403857                 mov     [esp+Str2], eax ; Format
.text:0040385B                 mov     [esp+0], ecx    ; Stream
.text:0040385E                 mov     [esp+MaxCount], edi
.text:00403862                 call    fprintf
.text:00403867                 jmp     short loc_403801
.text:00403867 ; END OF FUNCTION CHUNK FOR sub_403360
.text:00403867 ; ---------------------------------------------------------------------------
.text:00403869                 align 10h
.text:00403870 ; START OF FUNCTION CHUNK FOR sub_403360
.text:00403870
.text:00403870 loc_403870:                             ; CODE XREF: sub_403360+2EE↑j
.text:00403870                                         ; sub_403360+34A↑j
.text:00403870                 mov     eax, [esp+arg_70]
.text:00403874                 test    eax, eax
.text:00403876                 jz      short loc_4038A6
.text:00403878                 mov     ebx, [ebp+0]
.text:0040387B                 mov     esi, [esp+arg_60]
.text:0040387F                 mov     edi, [esi+ebx*4]
.text:00403882                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00403886                 jz      short loc_4038A9
.text:00403888                 mov     ecx, [ebp+14h]
.text:0040388B                 mov     edx, [esp+Str]
.text:0040388F                 movsx   ebx, byte ptr [ecx]
.text:00403892                 mov     [esp+0], edx    ; Str
.text:00403895                 mov     [esp+Str2], ebx ; Val
.text:00403899                 call    strchr
.text:0040389E                 test    eax, eax
.text:004038A0                 jnz     loc_403950
.text:004038A6
.text:004038A6 loc_4038A6:                             ; CODE XREF: sub_403360+516↑j
.text:004038A6                 mov     ebx, [ebp+0]
.text:004038A9
.text:004038A9 loc_4038A9:                             ; CODE XREF: sub_403360+526↑j
.text:004038A9                 mov     eax, [esp+arg_44]
.text:004038AD                 test    eax, eax
.text:004038AF                 jz      short loc_403901
.text:004038B1                 mov     esi, [esp+arg_60]
.text:004038B5                 mov     edi, [esi+ebx*4]
.text:004038B8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004038BC                 jz      short loc_40391A
.text:004038BE                 mov     dword ptr [esp+0], offset sub_4032C0
.text:004038C5                 call    ds:libintl_gettext
.text:004038CB                 mov     edi, [ebp+14h]
.text:004038CE                 mov     [esp+arg_C], edi
.text:004038D2                 mov     ebx, [ebp+0]
.text:004038D5                 mov     edi, [esp+arg_60]
.text:004038D9                 mov     esi, [edi+ebx*4]
.text:004038DC                 movsx   ecx, byte ptr [esi]
.text:004038DF                 mov     esi, ds:_iob
.text:004038E5                 add     esi, 40h ; '@'
.text:004038E8                 mov     [esp+arg_8], ecx
.text:004038EC                 mov     ebx, [edi]
.text:004038EE                 mov     [esp+Str2], eax ; Format
.text:004038F2                 mov     [esp+0], esi    ; Stream
.text:004038F5                 mov     [esp+MaxCount], ebx
.text:004038F9                 call    fprintf
.text:004038FE
.text:004038FE loc_4038FE:                             ; CODE XREF: sub_403360+5ED↓j
.text:004038FE                 mov     ebx, [ebp+0]
.text:00403901
.text:00403901 loc_403901:                             ; CODE XREF: sub_403360+54F↑j
.text:00403901                 mov     dword ptr [ebp+14h], offset loc_4032E0
.text:00403908                 lea     edx, [ebx+1]
.text:0040390B                 mov     [ebp+0], edx
.text:0040390E
.text:0040390E loc_40390E:                             ; CODE XREF: sub_403360+A69↓j
.text:0040390E                 mov     dword ptr [ebp+8], 0
.text:00403915                 jmp     loc_403788
.text:0040391A ; ---------------------------------------------------------------------------
.text:0040391A
.text:0040391A loc_40391A:                             ; CODE XREF: sub_403360+55C↑j
.text:0040391A                 mov     dword ptr [esp+0], offset sub_403300
.text:00403921                 call    ds:libintl_gettext
.text:00403927                 mov     ecx, [ebp+14h]
.text:0040392A                 mov     edi, [esp+arg_60]
.text:0040392E                 mov     edx, ds:_iob
.text:00403934                 mov     [esp+arg_8], ecx
.text:00403938                 mov     ebx, [edi]
.text:0040393A                 add     edx, 40h ; '@'
.text:0040393D                 mov     [esp+Str2], eax ; Format
.text:00403941                 mov     [esp+MaxCount], ebx
.text:00403945                 mov     [esp+0], edx    ; Stream
.text:00403948                 call    fprintf
.text:0040394D                 jmp     short loc_4038FE
.text:0040394D ; END OF FUNCTION CHUNK FOR sub_403360
.text:0040394D ; ---------------------------------------------------------------------------
.text:0040394F                 align 10h
.text:00403950 ; START OF FUNCTION CHUNK FOR sub_403360
.text:00403950
.text:00403950 loc_403950:                             ; CODE XREF: sub_403360+266↑j
.text:00403950                                         ; sub_403360+285↑j ...
.text:00403950                 mov     esi, [ebp+14h]
.text:00403953                 movzx   ebx, byte ptr [esi]
.text:00403956                 inc     esi
.text:00403957                 mov     [ebp+14h], esi
.text:0040395A                 mov     ecx, [esp+Str]
.text:0040395E                 movsx   esi, bl
.text:00403961                 mov     [esp+Str2], esi ; Val
.text:00403965                 mov     edi, esi
.text:00403967                 mov     [esp+0], ecx    ; Str
.text:0040396A                 call    strchr
.text:0040396F                 mov     ecx, [ebp+14h]
.text:00403972                 cmp     byte ptr [ecx], 0
.text:00403975                 jnz     short loc_40397A
.text:00403977                 inc     dword ptr [ebp+0]
.text:0040397A
.text:0040397A loc_40397A:                             ; CODE XREF: sub_403360+615↑j
.text:0040397A                 test    eax, eax
.text:0040397C                 jz      loc_403D60
.text:00403982                 cmp     bl, 3Ah ; ':'
.text:00403985                 jz      loc_403D60
.text:0040398B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040398E                 jz      loc_403A46
.text:00403994                 movzx   edx, byte ptr [eax+1]
.text:00403998
.text:00403998 loc_403998:                             ; CODE XREF: sub_403360+6ED↓j
.text:00403998                 cmp     dl, 3Ah ; ':'
.text:0040399B                 jz      short loc_4039A4
.text:0040399D
.text:0040399D loc_40399D:                             ; CODE XREF: sub_403360+660↓j
.text:0040399D                 mov     eax, esi
.text:0040399F                 jmp     loc_403587
.text:004039A4 ; ---------------------------------------------------------------------------
.text:004039A4
.text:004039A4 loc_4039A4:                             ; CODE XREF: sub_403360+63B↑j
.text:004039A4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004039A8                 jz      loc_403A31
.text:004039AE                 cmp     byte ptr [ecx], 0
.text:004039B1                 jz      short loc_4039C2
.text:004039B3
.text:004039B3 loc_4039B3:                             ; CODE XREF: sub_403360+6D4↓j
.text:004039B3                 inc     dword ptr [ebp+0]
.text:004039B6                 mov     [ebp+0Ch], ecx
.text:004039B9
.text:004039B9 loc_4039B9:                             ; CODE XREF: sub_403360+67B↓j
.text:004039B9                                         ; sub_403360+696↓j ...
.text:004039B9                 mov     dword ptr [ebp+14h], 0
.text:004039C0                 jmp     short loc_40399D
.text:004039C2 ; ---------------------------------------------------------------------------
.text:004039C2
.text:004039C2 loc_4039C2:                             ; CODE XREF: sub_403360+651↑j
.text:004039C2                 mov     ecx, [ebp+0]
.text:004039C5                 cmp     ecx, [esp+arg_5C]
.text:004039C9                 jz      short loc_4039DD
.text:004039CB                 mov     eax, [esp+arg_60]
.text:004039CF                 lea     edx, [ecx+1]
.text:004039D2                 mov     [ebp+0], edx
.text:004039D5                 mov     ebx, [eax+ecx*4]
.text:004039D8                 mov     [ebp+0Ch], ebx
.text:004039DB                 jmp     short loc_4039B9
.text:004039DD ; ---------------------------------------------------------------------------
.text:004039DD
.text:004039DD loc_4039DD:                             ; CODE XREF: sub_403360+669↑j
.text:004039DD                 mov     ecx, [esp+arg_44]
.text:004039E1                 test    ecx, ecx
.text:004039E3                 jnz     short loc_4039FF
.text:004039E5
.text:004039E5 loc_4039E5:                             ; CODE XREF: sub_403360+6CF↓j
.text:004039E5                 mov     [ebp+8], edi
.text:004039E8                 mov     edi, [esp+Str]
.text:004039EC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004039EF                 jz      short loc_4039F8
.text:004039F1                 mov     esi, 3Fh ; '?'
.text:004039F6                 jmp     short loc_4039B9
.text:004039F8 ; ---------------------------------------------------------------------------
.text:004039F8
.text:004039F8 loc_4039F8:                             ; CODE XREF: sub_403360+68F↑j
.text:004039F8                 mov     esi, 3Ah ; ':'
.text:004039FD                 jmp     short loc_4039B9
.text:004039FF ; ---------------------------------------------------------------------------
.text:004039FF
.text:004039FF loc_4039FF:                             ; CODE XREF: sub_403360+683↑j
.text:004039FF                 mov     dword ptr [esp+0], 403320h
.text:00403A06                 call    ds:libintl_gettext
.text:00403A0C                 mov     [esp+arg_8], edi
.text:00403A10                 mov     ebx, [esp+arg_60]
.text:00403A14                 mov     edx, ds:_iob
.text:00403A1A                 mov     esi, [ebx]
.text:00403A1C                 add     edx, 40h ; '@'
.text:00403A1F                 mov     [esp+Str2], eax ; Format
.text:00403A23                 mov     [esp+MaxCount], esi
.text:00403A27                 mov     [esp+0], edx    ; Stream
.text:00403A2A                 call    fprintf
.text:00403A2F                 jmp     short loc_4039E5
.text:00403A31 ; ---------------------------------------------------------------------------
.text:00403A31
.text:00403A31 loc_403A31:                             ; CODE XREF: sub_403360+648↑j
.text:00403A31                 cmp     byte ptr [ecx], 0
.text:00403A34                 jnz     loc_4039B3
.text:00403A3A                 mov     dword ptr [ebp+0Ch], 0
.text:00403A41                 jmp     loc_4039B9
.text:00403A46 ; ---------------------------------------------------------------------------
.text:00403A46
.text:00403A46 loc_403A46:                             ; CODE XREF: sub_403360+62E↑j
.text:00403A46                 movzx   edx, byte ptr [eax+1]
.text:00403A4A                 cmp     dl, 3Bh ; ';'
.text:00403A4D                 jnz     loc_403998
.text:00403A53                 mov     [esp+arg_2C], 0
.text:00403A5B                 mov     [esp+arg_28], 0
.text:00403A63                 mov     [esp+arg_24], 0
.text:00403A6B                 mov     [esp+arg_20], 0
.text:00403A73                 cmp     byte ptr [ecx], 0
.text:00403A76                 jz      loc_403CEB
.text:00403A7C                 inc     dword ptr [ebp+0]
.text:00403A7F                 mov     [ebp+0Ch], ecx
.text:00403A82
.text:00403A82 loc_403A82:                             ; CODE XREF: sub_403360+9A4↓j
.text:00403A82                 mov     edi, [ebp+0Ch]
.text:00403A85                 mov     [ebp+14h], edi
.text:00403A88                 movzx   eax, byte ptr [edi]
.text:00403A8B                 test    al, al
.text:00403A8D                 jz      short loc_403A9F
.text:00403A8F                 cmp     al, 3Dh ; '='
.text:00403A91                 jz      short loc_403A9F
.text:00403A93
.text:00403A93 loc_403A93:                             ; CODE XREF: sub_403360+73D↓j
.text:00403A93                 inc     edi
.text:00403A94                 movzx   eax, byte ptr [edi]
.text:00403A97                 test    al, al
.text:00403A99                 jz      short loc_403A9F
.text:00403A9B                 cmp     al, 3Dh ; '='
.text:00403A9D                 jnz     short loc_403A93
.text:00403A9F
.text:00403A9F loc_403A9F:                             ; CODE XREF: sub_403360+72D↑j
.text:00403A9F                                         ; sub_403360+731↑j ...
.text:00403A9F                 mov     [esp+arg_1C], 0
.text:00403AA7                 mov     esi, [esp+arg_68]
.text:00403AAB                 mov     eax, [esi]
.text:00403AAD                 test    eax, eax
.text:00403AAF                 jz      loc_403C30
.text:00403AB5                 mov     ecx, eax
.text:00403AB7
.text:00403AB7 loc_403AB7:                             ; CODE XREF: sub_403360+783↓j
.text:00403AB7                 mov     ebx, [ebp+14h]
.text:00403ABA                 mov     eax, edi
.text:00403ABC                 mov     [esp+0], ecx    ; Str1
.text:00403ABF                 sub     eax, ebx
.text:00403AC1                 mov     [esp+MaxCount], eax ; MaxCount
.text:00403AC5                 mov     [esp+Str2], ebx ; Str2
.text:00403AC9                 call    strncmp
.text:00403ACE                 test    eax, eax
.text:00403AD0                 jz      loc_403C97
.text:00403AD6
.text:00403AD6 loc_403AD6:                             ; CODE XREF: sub_403360+95C↓j
.text:00403AD6                                         ; sub_403360+96D↓j
.text:00403AD6                 inc     [esp+arg_1C]
.text:00403ADA                 add     esi, 10h
.text:00403ADD                 mov     edx, [esi]
.text:00403ADF                 test    edx, edx
.text:00403AE1                 mov     ecx, edx
.text:00403AE3                 jnz     short loc_403AB7
.text:00403AE5
.text:00403AE5 loc_403AE5:                             ; CODE XREF: sub_403360+986↓j
.text:00403AE5                 mov     esi, [esp+arg_24]
.text:00403AE9                 test    esi, esi
.text:00403AEB                 jz      short loc_403AF9
.text:00403AED                 mov     ebx, [esp+arg_28]
.text:00403AF1                 test    ebx, ebx
.text:00403AF3                 jz      loc_403C41
.text:00403AF9
.text:00403AF9 loc_403AF9:                             ; CODE XREF: sub_403360+78B↑j
.text:00403AF9                 mov     esi, [esp+arg_2C]
.text:00403AFD                 test    esi, esi
.text:00403AFF                 jz      loc_403C30
.text:00403B05                 cmp     byte ptr [edi], 0
.text:00403B08                 jz      loc_403BB0
.text:00403B0E                 mov     ecx, [esp+arg_2C]
.text:00403B12                 mov     ebx, [ecx+4]
.text:00403B15                 test    ebx, ebx
.text:00403B17                 jz      short loc_403B58
.text:00403B19                 lea     edx, [edi+1]
.text:00403B1C                 mov     [ebp+0Ch], edx
.text:00403B1F
.text:00403B1F loc_403B1F:                             ; CODE XREF: sub_403360+858↓j
.text:00403B1F                                         ; sub_403360+877↓j
.text:00403B1F                 mov     edi, [ebp+14h]
.text:00403B22                 mov     [esp+0], edi    ; Str
.text:00403B25                 call    strlen
.text:00403B2A                 add     [ebp+14h], eax
.text:00403B2D                 mov     eax, [esp+arg_6C]
.text:00403B31                 test    eax, eax
.text:00403B33                 jz      short loc_403B40
.text:00403B35                 mov     edx, [esp+arg_20]
.text:00403B39                 mov     ebp, [esp+arg_6C]
.text:00403B3D                 mov     [ebp+0], edx
.text:00403B40
.text:00403B40 loc_403B40:                             ; CODE XREF: sub_403360+7D3↑j
.text:00403B40                 mov     eax, [esp+arg_2C]
.text:00403B44                 mov     ecx, [eax+8]
.text:00403B47                 test    ecx, ecx
.text:00403B49                 jnz     loc_40370A
.text:00403B4F                 mov     ecx, [esp+arg_2C]
.text:00403B53                 jmp     loc_403702
.text:00403B58 ; ---------------------------------------------------------------------------
.text:00403B58
.text:00403B58 loc_403B58:                             ; CODE XREF: sub_403360+7B7↑j
.text:00403B58                 mov     eax, [esp+arg_44]
.text:00403B5C                 test    eax, eax
.text:00403B5E                 jnz     short loc_403B73
.text:00403B60
.text:00403B60 loc_403B60:                             ; CODE XREF: sub_403360+849↓j
.text:00403B60                 mov     ecx, [ebp+14h]
.text:00403B63                 mov     [esp+0], ecx    ; Str
.text:00403B66                 call    strlen
.text:00403B6B                 add     [ebp+14h], eax
.text:00403B6E                 jmp     loc_403788
.text:00403B73 ; ---------------------------------------------------------------------------
.text:00403B73
.text:00403B73 loc_403B73:                             ; CODE XREF: sub_403360+7FE↑j
.text:00403B73                 mov     dword ptr [esp+0], offset sub_403360
.text:00403B7A                 call    ds:libintl_gettext
.text:00403B80                 mov     edx, [esp+arg_2C]
.text:00403B84                 mov     ebx, [esp+arg_60]
.text:00403B88                 mov     edi, [edx]
.text:00403B8A                 mov     [esp+arg_8], edi
.text:00403B8E                 mov     edi, ds:_iob
.text:00403B94                 mov     esi, [ebx]
.text:00403B96                 mov     [esp+Str2], eax ; Format
.text:00403B9A                 add     edi, 40h ; '@'
.text:00403B9D                 mov     [esp+MaxCount], esi
.text:00403BA1                 mov     [esp+0], edi    ; Stream
.text:00403BA4                 call    fprintf
.text:00403BA9                 jmp     short loc_403B60
.text:00403BA9 ; END OF FUNCTION CHUNK FOR sub_403360
.text:00403BA9 ; ---------------------------------------------------------------------------
.text:00403BAB                 align 10h
.text:00403BB0 ; START OF FUNCTION CHUNK FOR sub_403360
.text:00403BB0
.text:00403BB0 loc_403BB0:                             ; CODE XREF: sub_403360+7A8↑j
.text:00403BB0                 mov     esi, [esp+arg_2C]
.text:00403BB4                 cmp     dword ptr [esi+4], 1
.text:00403BB8                 jnz     loc_403B1F
.text:00403BBE                 mov     ecx, [ebp+0]
.text:00403BC1                 cmp     ecx, [esp+arg_5C]
.text:00403BC5                 jge     short loc_403BDC
.text:00403BC7                 mov     eax, [esp+arg_60]
.text:00403BCB                 lea     ebx, [ecx+1]
.text:00403BCE                 mov     [ebp+0], ebx
.text:00403BD1                 mov     edi, [eax+ecx*4]
.text:00403BD4                 mov     [ebp+0Ch], edi
.text:00403BD7                 jmp     loc_403B1F
.text:00403BDC ; ---------------------------------------------------------------------------
.text:00403BDC
.text:00403BDC loc_403BDC:                             ; CODE XREF: sub_403360+865↑j
.text:00403BDC                 mov     edx, [esp+arg_44]
.text:00403BE0                 test    edx, edx
.text:00403BE2                 jnz     short loc_403BF7
.text:00403BE4
.text:00403BE4 loc_403BE4:                             ; CODE XREF: sub_403360+8CE↓j
.text:00403BE4                 mov     edx, [ebp+14h]
.text:00403BE7                 mov     [esp+0], edx    ; Str
.text:00403BEA                 call    strlen
.text:00403BEF                 add     [ebp+14h], eax
.text:00403BF2                 jmp     loc_403819
.text:00403BF7 ; ---------------------------------------------------------------------------
.text:00403BF7
.text:00403BF7 loc_403BF7:                             ; CODE XREF: sub_403360+882↑j
.text:00403BF7                 mov     dword ptr [esp+0], offset sub_403280
.text:00403BFE                 call    ds:libintl_gettext
.text:00403C04                 mov     ecx, [ebp+0]
.text:00403C07                 mov     ebx, [esp+arg_60]
.text:00403C0B                 mov     edi, [ebx+ecx*4-4]
.text:00403C0F                 mov     ecx, ds:_iob
.text:00403C15                 mov     [esp+arg_8], edi
.text:00403C19                 mov     esi, [ebx]
.text:00403C1B                 add     ecx, 40h ; '@'
.text:00403C1E                 mov     [esp+Str2], eax ; Format
.text:00403C22                 mov     [esp+0], ecx    ; Stream
.text:00403C25                 mov     [esp+MaxCount], esi
.text:00403C29                 call    fprintf
.text:00403C2E                 jmp     short loc_403BE4
.text:00403C30 ; ---------------------------------------------------------------------------
.text:00403C30
.text:00403C30 loc_403C30:                             ; CODE XREF: sub_403360+74F↑j
.text:00403C30                                         ; sub_403360+79F↑j
.text:00403C30                 mov     dword ptr [ebp+14h], 0
.text:00403C37                 mov     eax, 57h ; 'W'
.text:00403C3C                 jmp     loc_403587
.text:00403C41 ; ---------------------------------------------------------------------------
.text:00403C41
.text:00403C41 loc_403C41:                             ; CODE XREF: sub_403360+793↑j
.text:00403C41                 mov     edi, [esp+arg_44]
.text:00403C45                 test    edi, edi
.text:00403C47                 jnz     short loc_403C5F
.text:00403C49
.text:00403C49 loc_403C49:                             ; CODE XREF: sub_403360+935↓j
.text:00403C49                 mov     edx, [ebp+14h]
.text:00403C4C                 mov     [esp+0], edx    ; Str
.text:00403C4F                 call    strlen
.text:00403C54                 add     [ebp+14h], eax
.text:00403C57                 inc     dword ptr [ebp+0]
.text:00403C5A                 jmp     loc_403788
.text:00403C5F ; ---------------------------------------------------------------------------
.text:00403C5F
.text:00403C5F loc_403C5F:                             ; CODE XREF: sub_403360+8E7↑j
.text:00403C5F                 mov     dword ptr [esp+0], offset sub_4033A0
.text:00403C66                 call    ds:libintl_gettext
.text:00403C6C                 mov     ecx, [ebp+0]
.text:00403C6F                 mov     ebx, [esp+arg_60]
.text:00403C73                 mov     edi, [ebx+ecx*4]
.text:00403C76                 mov     ecx, ds:_iob
.text:00403C7C                 mov     [esp+arg_8], edi
.text:00403C80                 mov     esi, [ebx]
.text:00403C82                 add     ecx, 40h ; '@'
.text:00403C85                 mov     [esp+Str2], eax ; Format
.text:00403C89                 mov     [esp+0], ecx    ; Stream
.text:00403C8C                 mov     [esp+MaxCount], esi
.text:00403C90                 call    fprintf
.text:00403C95                 jmp     short loc_403C49
.text:00403C97 ; ---------------------------------------------------------------------------
.text:00403C97
.text:00403C97 loc_403C97:                             ; CODE XREF: sub_403360+770↑j
.text:00403C97                 mov     edx, [ebp+14h]
.text:00403C9A                 mov     ebx, edi
.text:00403C9C                 mov     ecx, [esi]
.text:00403C9E                 sub     ebx, edx
.text:00403CA0                 mov     [esp+0], ecx    ; Str
.text:00403CA3                 call    strlen
.text:00403CA8                 cmp     ebx, eax
.text:00403CAA                 jz      short loc_403CD2
.text:00403CAC                 mov     ebx, [esp+arg_2C]
.text:00403CB0                 test    ebx, ebx
.text:00403CB2                 jz      short loc_403CC1
.text:00403CB4                 mov     [esp+arg_24], 1
.text:00403CBC                 jmp     loc_403AD6
.text:00403CC1 ; ---------------------------------------------------------------------------
.text:00403CC1
.text:00403CC1 loc_403CC1:                             ; CODE XREF: sub_403360+952↑j
.text:00403CC1                 mov     [esp+arg_2C], esi
.text:00403CC5                 mov     ecx, [esp+arg_1C]
.text:00403CC9                 mov     [esp+arg_20], ecx
.text:00403CCD                 jmp     loc_403AD6
.text:00403CD2 ; ---------------------------------------------------------------------------
.text:00403CD2
.text:00403CD2 loc_403CD2:                             ; CODE XREF: sub_403360+94A↑j
.text:00403CD2                 mov     [esp+arg_2C], esi
.text:00403CD6                 mov     eax, [esp+arg_1C]
.text:00403CDA                 mov     [esp+arg_28], 1
.text:00403CE2                 mov     [esp+arg_20], eax
.text:00403CE6                 jmp     loc_403AE5
.text:00403CEB ; ---------------------------------------------------------------------------
.text:00403CEB
.text:00403CEB loc_403CEB:                             ; CODE XREF: sub_403360+716↑j
.text:00403CEB                 mov     edx, [ebp+0]
.text:00403CEE                 cmp     edx, [esp+arg_5C]
.text:00403CF2                 jz      short loc_403D09
.text:00403CF4                 mov     ebx, [esp+arg_60]
.text:00403CF8                 lea     esi, [edx+1]
.text:00403CFB                 mov     [ebp+0], esi
.text:00403CFE                 mov     edi, [ebx+edx*4]
.text:00403D01                 mov     [ebp+0Ch], edi
.text:00403D04                 jmp     loc_403A82
.text:00403D09 ; ---------------------------------------------------------------------------
.text:00403D09
.text:00403D09 loc_403D09:                             ; CODE XREF: sub_403360+992↑j
.text:00403D09                 mov     edi, [esp+arg_44]
.text:00403D0D                 test    edi, edi
.text:00403D0F                 jnz     short loc_403D2C
.text:00403D11
.text:00403D11 loc_403D11:                             ; CODE XREF: sub_403360+9FC↓j
.text:00403D11                 mov     [ebp+8], esi
.text:00403D14                 mov     ebp, [esp+Str]
.text:00403D18                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403D1C                 jz      short loc_403D28
.text:00403D1E                 mov     bl, 3Fh ; '?'
.text:00403D20
.text:00403D20 loc_403D20:                             ; CODE XREF: sub_403360+9CA↓j
.text:00403D20                 movsx   eax, bl
.text:00403D23                 jmp     loc_403587
.text:00403D28 ; ---------------------------------------------------------------------------
.text:00403D28
.text:00403D28 loc_403D28:                             ; CODE XREF: sub_403360+9BC↑j
.text:00403D28                 mov     bl, 3Ah ; ':'
.text:00403D2A                 jmp     short loc_403D20
.text:00403D2C ; ---------------------------------------------------------------------------
.text:00403D2C
.text:00403D2C loc_403D2C:                             ; CODE XREF: sub_403360+9AF↑j
.text:00403D2C                 mov     dword ptr [esp+0], 403320h
.text:00403D33                 call    ds:libintl_gettext
.text:00403D39                 mov     [esp+arg_8], esi
.text:00403D3D                 mov     edx, [esp+arg_60]
.text:00403D41                 mov     ecx, ds:_iob
.text:00403D47                 mov     ebx, [edx]
.text:00403D49                 add     ecx, 40h ; '@'
.text:00403D4C                 mov     [esp+Str2], eax ; Format
.text:00403D50                 mov     [esp+MaxCount], ebx
.text:00403D54                 mov     [esp+0], ecx    ; Stream
.text:00403D57                 call    fprintf
.text:00403D5C                 jmp     short loc_403D11
.text:00403D5C ; END OF FUNCTION CHUNK FOR sub_403360
.text:00403D5C ; ---------------------------------------------------------------------------
.text:00403D5E                 align 10h
.text:00403D60 ; START OF FUNCTION CHUNK FOR sub_403360
.text:00403D60
.text:00403D60 loc_403D60:                             ; CODE XREF: sub_403360+61C↑j
.text:00403D60                                         ; sub_403360+625↑j
.text:00403D60                 mov     eax, [esp+arg_44]
.text:00403D64                 test    eax, eax
.text:00403D66                 jz      short loc_403D9F
.text:00403D68                 mov     ebx, [ebp+1Ch]
.text:00403D6B                 test    ebx, ebx
.text:00403D6D                 jz      short loc_403DA7
.text:00403D6F                 mov     dword ptr [esp+0], offset loc_4033C1
.text:00403D76
.text:00403D76 loc_403D76:                             ; CODE XREF: sub_403360+A4E↓j
.text:00403D76                 call    ds:libintl_gettext
.text:00403D7C                 mov     [esp+arg_8], esi
.text:00403D80                 mov     ebx, [esp+arg_60]
.text:00403D84                 mov     edx, ds:_iob
.text:00403D8A                 mov     esi, [ebx]
.text:00403D8C                 add     edx, 40h ; '@'
.text:00403D8F                 mov     [esp+Str2], eax ; Format
.text:00403D93                 mov     [esp+MaxCount], esi
.text:00403D97                 mov     [esp+0], edx    ; Stream
.text:00403D9A                 call    fprintf
.text:00403D9F
.text:00403D9F loc_403D9F:                             ; CODE XREF: sub_403360+A06↑j
.text:00403D9F                 mov     [ebp+8], edi
.text:00403DA2                 jmp     loc_403788
.text:00403DA7 ; ---------------------------------------------------------------------------
.text:00403DA7
.text:00403DA7 loc_403DA7:                             ; CODE XREF: sub_403360+A0D↑j
.text:00403DA7                 mov     dword ptr [esp+0], offset loc_4033DB
.text:00403DAE                 jmp     short loc_403D76
.text:00403DB0 ; ---------------------------------------------------------------------------
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: sub_403360+33E↑j
.text:00403DB0                 mov     edi, [esp+arg_44]
.text:00403DB4                 test    edi, edi
.text:00403DB6                 jnz     short loc_403DCE
.text:00403DB8
.text:00403DB8 loc_403DB8:                             ; CODE XREF: sub_403360+AA4↓j
.text:00403DB8                 mov     edx, [ebp+14h]
.text:00403DBB                 mov     [esp+0], edx    ; Str
.text:00403DBE                 call    strlen
.text:00403DC3                 add     [ebp+14h], eax
.text:00403DC6                 inc     dword ptr [ebp+0]
.text:00403DC9                 jmp     loc_40390E
.text:00403DCE ; ---------------------------------------------------------------------------
.text:00403DCE
.text:00403DCE loc_403DCE:                             ; CODE XREF: sub_403360+A56↑j
.text:00403DCE                 mov     dword ptr [esp+0], offset loc_4033F5
.text:00403DD5                 call    ds:libintl_gettext
.text:00403DDB                 mov     ebx, [ebp+0]
.text:00403DDE                 mov     edi, [esp+arg_60]
.text:00403DE2                 mov     ecx, [edi+ebx*4]
.text:00403DE5                 mov     ebx, ds:_iob
.text:00403DEB                 mov     [esp+arg_8], ecx
.text:00403DEF                 mov     esi, [edi]
.text:00403DF1                 add     ebx, 40h ; '@'
.text:00403DF4                 mov     [esp+Str2], eax ; Format
.text:00403DF8                 mov     [esp+0], ebx    ; Stream
.text:00403DFB                 mov     [esp+MaxCount], esi
.text:00403DFF                 call    fprintf
.text:00403E04                 jmp     short loc_403DB8
.text:00403E06 ; ---------------------------------------------------------------------------
.text:00403E06
.text:00403E06 loc_403E06:                             ; CODE XREF: sub_403360+316↑j
.text:00403E06                 mov     ecx, [ebp+14h]
.text:00403E09                 mov     ebx, edi
.text:00403E0B                 mov     edx, [esi]
.text:00403E0D                 sub     ebx, ecx
.text:00403E0F                 mov     [esp+0], edx    ; Str
.text:00403E12                 call    strlen
.text:00403E17                 cmp     ebx, eax
.text:00403E19                 jz      short loc_403E71
.text:00403E1B                 mov     ebx, [esp+arg_40]
.text:00403E1F                 test    ebx, ebx
.text:00403E21                 jz      short loc_403E60
.text:00403E23                 mov     edx, [esp+arg_70]
.text:00403E27                 test    edx, edx
.text:00403E29                 jnz     short loc_403E37
.text:00403E2B                 mov     ecx, [esp+arg_40]
.text:00403E2F                 mov     ebx, [esi+4]
.text:00403E32                 cmp     [ecx+4], ebx
.text:00403E35                 jz      short loc_403E44
.text:00403E37
.text:00403E37 loc_403E37:                             ; CODE XREF: sub_403360+AC9↑j
.text:00403E37                                         ; sub_403360+AEA↓j ...
.text:00403E37                 mov     [esp+arg_38], 1
.text:00403E3F                 jmp     loc_40367C
.text:00403E44 ; ---------------------------------------------------------------------------
.text:00403E44
.text:00403E44 loc_403E44:                             ; CODE XREF: sub_403360+AD5↑j
.text:00403E44                 mov     edx, [esi+8]
.text:00403E47                 cmp     [ecx+8], edx
.text:00403E4A                 jnz     short loc_403E37
.text:00403E4C                 mov     ebx, [esi+0Ch]
.text:00403E4F                 cmp     [ecx+0Ch], ebx
.text:00403E52                 jnz     short loc_403E37
.text:00403E54                 jmp     loc_40367C
.text:00403E54 ; END OF FUNCTION CHUNK FOR sub_403360
.text:00403E54 ; ---------------------------------------------------------------------------
.text:00403E59                 align 10h
.text:00403E60 ; START OF FUNCTION CHUNK FOR sub_403360
.text:00403E60
.text:00403E60 loc_403E60:                             ; CODE XREF: sub_403360+AC1↑j
.text:00403E60                 mov     [esp+arg_40], esi
.text:00403E64                 mov     eax, [esp+arg_30]
.text:00403E68                 mov     [esp+arg_34], eax
.text:00403E6C                 jmp     loc_40367C
.text:00403E71 ; ---------------------------------------------------------------------------
.text:00403E71
.text:00403E71 loc_403E71:                             ; CODE XREF: sub_403360+AB9↑j
.text:00403E71                 mov     [esp+arg_40], esi
.text:00403E75                 mov     ecx, [esp+arg_30]
.text:00403E79                 mov     [esp+arg_3C], 1
.text:00403E81                 mov     [esp+arg_34], ecx
.text:00403E85                 jmp     loc_403690
.text:00403E8A ; ---------------------------------------------------------------------------
.text:00403E8A
.text:00403E8A loc_403E8A:                             ; CODE XREF: sub_403360+28F↑j
.text:00403E8A                 mov     eax, [esp+Str]
.text:00403E8E                 movsx   esi, dl
.text:00403E91                 mov     [esp+Str2], esi ; Val
.text:00403E95                 mov     [esp+0], eax    ; Str
.text:00403E98                 call    strchr
.text:00403E9D                 test    eax, eax
.text:00403E9F                 jnz     loc_403950
.text:00403EA5                 jmp     loc_4035F5
.text:00403EAA ; ---------------------------------------------------------------------------
.text:00403EAA
.text:00403EAA loc_403EAA:                             ; CODE XREF: sub_403360+24C↑j
.text:00403EAA                 mov     ecx, 1
.text:00403EAF                 jmp     loc_4035B2
.text:00403EB4 ; ---------------------------------------------------------------------------
.text:00403EB4
.text:00403EB4 loc_403EB4:                             ; CODE XREF: sub_403360+1A4↑j
.text:00403EB4                                         ; sub_403360+200↑j
.text:00403EB4                 mov     eax, [ebp+20h]
.text:00403EB7                 cmp     eax, [ebp+24h]
.text:00403EBA                 jz      loc_403590
.text:00403EC0                 mov     [ebp+0], eax
.text:00403EC3                 jmp     loc_403590
.text:00403EC8 ; ---------------------------------------------------------------------------
.text:00403EC8
.text:00403EC8 loc_403EC8:                             ; CODE XREF: sub_403360+1CE↑j
.text:00403EC8                 mov     [ebp+20h], eax
.text:00403ECB                 jmp     loc_403550
.text:00403ED0 ; ---------------------------------------------------------------------------
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403360+19A↑j
.text:00403ED0                 mov     edx, [ebp+20h]
.text:00403ED3                 mov     eax, [ebp+24h]
.text:00403ED6                 cmp     edx, eax
.text:00403ED8                 jz      short loc_403F50
.text:00403EDA                 cmp     eax, ebx
.text:00403EDC                 jz      short loc_403EF1
.text:00403EDE                 mov     [esp+Str2], ebp
.text:00403EE2                 mov     ebx, [esp+arg_60]
.text:00403EE6                 mov     [esp+0], ebx
.text:00403EE9                 call    sub_4040E0
.text:00403EEE                 mov     ebx, [ebp+0]
.text:00403EF1
.text:00403EF1 loc_403EF1:                             ; CODE XREF: sub_403360+B7C↑j
.text:00403EF1                                         ; sub_403360+BF2↓j ...
.text:00403EF1                 cmp     ebx, [esp+arg_5C]
.text:00403EF5                 jge     short loc_403F40
.text:00403EF7                 mov     esi, [esp+arg_60]
.text:00403EFB                 mov     eax, [esi+ebx*4]
.text:00403EFE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403F01                 jz      short loc_403F48
.text:00403F03                 lea     esi, [esi+0]
.text:00403F09                 lea     edi, [edi+0]
.text:00403F10
.text:00403F10 loc_403F10:                             ; CODE XREF: sub_403360+BCC↓j
.text:00403F10                                         ; sub_403360+BEC↓j
.text:00403F10                 lea     eax, [ebx+1]
.text:00403F13                 mov     ebx, eax
.text:00403F15                 mov     [ebp+0], eax
.text:00403F18                 cmp     eax, [esp+arg_5C]
.text:00403F1C                 jge     short loc_403F40
.text:00403F1E                 mov     edi, [esp+arg_60]
.text:00403F22                 mov     edx, [edi+eax*4]
.text:00403F25                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00403F28                 jz      short loc_403F30
.text:00403F2A
.text:00403F2A loc_403F2A:                             ; CODE XREF: sub_403360+BD4↓j
.text:00403F2A                 mov     ebx, eax
.text:00403F2C                 jmp     short loc_403F10
.text:00403F2C ; END OF FUNCTION CHUNK FOR sub_403360
.text:00403F2C ; ---------------------------------------------------------------------------
.text:00403F2E                 align 10h
.text:00403F30 ; START OF FUNCTION CHUNK FOR sub_403360
.text:00403F30
.text:00403F30 loc_403F30:                             ; CODE XREF: sub_403360+BC8↑j
.text:00403F30                 cmp     byte ptr [edx+1], 0
.text:00403F34                 jz      short loc_403F2A
.text:00403F36                 lea     esi, [esi+0]
.text:00403F39                 lea     edi, [edi+0]
.text:00403F40
.text:00403F40 loc_403F40:                             ; CODE XREF: sub_403360+B95↑j
.text:00403F40                                         ; sub_403360+BBC↑j ...
.text:00403F40                 mov     [ebp+24h], ebx
.text:00403F43                 jmp     loc_403500
.text:00403F48 ; ---------------------------------------------------------------------------
.text:00403F48
.text:00403F48 loc_403F48:                             ; CODE XREF: sub_403360+BA1↑j
.text:00403F48                 cmp     byte ptr [eax+1], 0
.text:00403F4C                 jz      short loc_403F10
.text:00403F4E                 jmp     short loc_403F40
.text:00403F50 ; ---------------------------------------------------------------------------
.text:00403F50
.text:00403F50 loc_403F50:                             ; CODE XREF: sub_403360+B78↑j
.text:00403F50                 cmp     edx, ebx
.text:00403F52                 jz      short loc_403EF1
.text:00403F54                 mov     [ebp+20h], ebx
.text:00403F57                 jmp     short loc_403EF1
.text:00403F59 ; ---------------------------------------------------------------------------
.text:00403F59
.text:00403F59 loc_403F59:                             ; CODE XREF: sub_403360+158↑j
.text:00403F59                 mov     dword ptr [ebp+18h], 0
.text:00403F60                 mov     esi, [esp+Str]
.text:00403F64
.text:00403F64 loc_403F64:                             ; CODE XREF: sub_403360+C19↓j
.text:00403F64                 inc     esi
.text:00403F65                 jmp     loc_4034C8
.text:00403F65 ; END OF FUNCTION CHUNK FOR sub_403360
.text:00403F65 ; ---------------------------------------------------------------------------
.text:00403F6A                 align 10h
.text:00403F70 ; START OF FUNCTION CHUNK FOR sub_403360
.text:00403F70
.text:00403F70 loc_403F70:                             ; CODE XREF: sub_403360+150↑j
.text:00403F70                 mov     dword ptr [ebp+18h], 2
.text:00403F77                 mov     esi, ecx
.text:00403F79                 jmp     short loc_403F64
.text:00403F79 ; END OF FUNCTION CHUNK FOR sub_403360
.text:00403F79 ; ---------------------------------------------------------------------------
.text:00403F7B                 align 10h
.text:00403F80 ; START OF FUNCTION CHUNK FOR sub_403360
.text:00403F80
.text:00403F80 loc_403F80:                             ; CODE XREF: sub_403360+139↑j
.text:00403F80                 mov     dword ptr [esp+0], offset loc_403413 ; VarName
.text:00403F87                 call    getenv
.text:00403F8C                 test    eax, eax
.text:00403F8E                 jz      loc_4034A4
.text:00403F94                 jmp     loc_40349F
.text:00403F94 ; END OF FUNCTION CHUNK FOR sub_403360
.text:00403F94 ; ---------------------------------------------------------------------------
.text:00403F99                 align 10h
.text:00403FA0 ; START OF FUNCTION CHUNK FOR sub_403360
.text:00403FA0
.text:00403FA0 loc_403FA0:                             ; CODE XREF: sub_403360:loc_40346F↑j
.text:00403FA0                 mov     dword ptr [ebp+0], 1
.text:00403FA7                 mov     ebx, 1
.text:00403FAC                 jmp     loc_403480
.text:00403FAC ; END OF FUNCTION CHUNK FOR sub_403360
.text:00403FB1 ; ---------------------------------------------------------------------------
.text:00403FB1                 jmp     short sub_403FC0
.text:00403FB1 ; ---------------------------------------------------------------------------
.text:00403FB3                 align 10h
.text:00403FC0
.text:00403FC0 ; =============== S U B R O U T I N E =======================================
.text:00403FC0
.text:00403FC0
.text:00403FC0 sub_403FC0      proc near               ; CODE XREF: .text:00403FB1↑j
.text:00403FC0                                         ; sub_404760+3A↓p ...
.text:00403FC0
.text:00403FC0 var_2C          = dword ptr -2Ch
.text:00403FC0 var_28          = dword ptr -28h
.text:00403FC0 var_24          = dword ptr -24h
.text:00403FC0 var_20          = dword ptr -20h
.text:00403FC0 var_1C          = dword ptr -1Ch
.text:00403FC0 var_18          = dword ptr -18h
.text:00403FC0 var_14          = dword ptr -14h
.text:00403FC0 var_10          = dword ptr -10h
.text:00403FC0 arg_0           = dword ptr  4
.text:00403FC0 arg_4           = dword ptr  8
.text:00403FC0 arg_8           = dword ptr  0Ch
.text:00403FC0 arg_C           = dword ptr  10h
.text:00403FC0 arg_10          = dword ptr  14h
.text:00403FC0 arg_14          = dword ptr  18h
.text:00403FC0 arg_18          = dword ptr  1Ch
.text:00403FC0
.text:00403FC0                 sub     esp, 2Ch
.text:00403FC3                 mov     edx, dword_40E020
.text:00403FC9                 mov     [esp+2Ch+var_10], offset dword_40F130
.text:00403FD1                 mov     ecx, dword_40E024
.text:00403FD7                 mov     ds:dword_40F130, edx
.text:00403FDD                 mov     edx, [esp+2Ch+arg_18]
.text:00403FE1                 mov     ds:dword_40F134, ecx
.text:00403FE7                 mov     ecx, [esp+2Ch+arg_14]
.text:00403FEB                 mov     [esp+2Ch+var_14], edx
.text:00403FEF                 mov     edx, [esp+2Ch+arg_10]
.text:00403FF3                 mov     [esp+2Ch+var_18], ecx
.text:00403FF7                 mov     ecx, [esp+2Ch+arg_C]
.text:00403FFB                 mov     [esp+2Ch+var_1C], edx
.text:00403FFF                 mov     edx, [esp+2Ch+arg_8]
.text:00404003                 mov     [esp+2Ch+var_20], ecx
.text:00404007                 mov     ecx, [esp+2Ch+arg_4]
.text:0040400B                 mov     [esp+2Ch+var_24], edx
.text:0040400F                 mov     edx, [esp+2Ch+arg_0]
.text:00404013                 mov     [esp+2Ch+var_28], ecx
.text:00404017                 mov     [esp+2Ch+var_2C], edx
.text:0040401A                 call    loc_403430
.text:0040401F                 mov     ecx, ds:dword_40F130
.text:00404025                 mov     dword_40E020, ecx
.text:0040402B                 mov     ecx, ds:dword_40F13C
.text:00404031                 mov     ds:dword_40F4D0, ecx
.text:00404037                 mov     ecx, ds:dword_40F138
.text:0040403D                 mov     dword_40E028, ecx
.text:00404043                 add     esp, 2Ch
.text:00404046                 retn
.text:00404046 sub_403FC0      endp
.text:00404046
.text:00404046 ; ---------------------------------------------------------------------------
.text:00404047                 align 10h
.text:00404050                 sub     esp, 2Ch
.text:00404053                 mov     edx, dword_40E020
.text:00404059                 mov     dword ptr [esp+1Ch], offset dword_40F130
.text:00404061                 mov     ecx, dword_40E024
.text:00404067                 mov     dword ptr [esp+18h], 1
.text:0040406F                 mov     ds:dword_40F130, edx
.text:00404075                 mov     edx, [esp+38h]
.text:00404079                 mov     ds:dword_40F134, ecx
.text:0040407F                 mov     ecx, [esp+34h]
.text:00404083                 mov     [esp+8], edx
.text:00404087                 mov     edx, [esp+30h]
.text:0040408B                 mov     [esp+4], ecx
.text:0040408F                 mov     dword ptr [esp+14h], 0
.text:00404097                 mov     dword ptr [esp+10h], 0
.text:0040409F                 mov     dword ptr [esp+0Ch], 0
.text:004040A7                 mov     [esp], edx
.text:004040AA                 call    loc_403430
.text:004040AF                 mov     ecx, ds:dword_40F130
.text:004040B5                 mov     dword_40E020, ecx
.text:004040BB                 mov     ecx, ds:dword_40F13C
.text:004040C1                 mov     ds:dword_40F4D0, ecx
.text:004040C7                 mov     ecx, ds:dword_40F138
.text:004040CD                 mov     dword_40E028, ecx
.text:004040D3                 add     esp, 2Ch
.text:004040D6                 retn
.text:004040D6 ; ---------------------------------------------------------------------------
.text:004040D7                 align 10h
.text:004040E0
.text:004040E0 ; =============== S U B R O U T I N E =======================================
.text:004040E0
.text:004040E0
.text:004040E0 sub_4040E0      proc near               ; CODE XREF: sub_403360+1E3↑p
.text:004040E0                                         ; sub_403360+B89↑p
.text:004040E0
.text:004040E0 var_2C          = dword ptr -2Ch
.text:004040E0 var_28          = dword ptr -28h
.text:004040E0 var_24          = dword ptr -24h
.text:004040E0 var_20          = dword ptr -20h
.text:004040E0 var_1C          = dword ptr -1Ch
.text:004040E0 var_18          = dword ptr -18h
.text:004040E0 var_14          = dword ptr -14h
.text:004040E0 arg_0           = dword ptr  4
.text:004040E0 arg_4           = dword ptr  8
.text:004040E0
.text:004040E0                 push    ebp
.text:004040E1                 push    edi
.text:004040E2                 push    esi
.text:004040E3                 push    ebx
.text:004040E4                 sub     esp, 1Ch
.text:004040E7                 mov     ecx, [esp+2Ch+arg_4]
.text:004040EB                 mov     eax, [esp+2Ch+arg_4]
.text:004040EF                 mov     ebx, [esp+2Ch+arg_4]
.text:004040F3                 mov     edx, [ecx+20h]
.text:004040F6                 mov     edi, [esp+2Ch+arg_0]
.text:004040FA                 mov     ecx, [ebx]
.text:004040FC                 mov     [esp+2Ch+var_2C], edx
.text:004040FF                 mov     [esp+2Ch+var_14], edx
.text:00404103                 mov     edx, [eax+24h]
.text:00404106                 mov     [esp+2Ch+var_28], ecx
.text:0040410A                 mov     [esp+2Ch+var_1C], ecx
.text:0040410E                 cmp     ecx, edx
.text:00404110                 mov     [esp+2Ch+var_18], edx
.text:00404114                 jle     short loc_404190
.text:00404116                 mov     esi, [esp+2Ch+var_2C]
.text:00404119                 cmp     edx, esi
.text:0040411B                 jle     short loc_404190
.text:0040411D                 lea     esi, [esi+0]
.text:00404120
.text:00404120 loc_404120:                             ; CODE XREF: sub_4040E0+A1↓j
.text:00404120                 mov     ebx, [esp+2Ch+var_1C]
.text:00404124                 mov     edx, [esp+2Ch+var_18]
.text:00404128                 mov     ebp, [esp+2Ch+var_18]
.text:0040412C                 mov     eax, [esp+2Ch+var_14]
.text:00404130                 sub     ebx, edx
.text:00404132                 mov     [esp+2Ch+var_20], ebx
.text:00404136                 sub     ebp, eax
.text:00404138                 cmp     ebx, ebp
.text:0040413A                 jle     short loc_4041B5
.text:0040413C                 xor     esi, esi
.text:0040413E                 cmp     esi, ebp
.text:00404140                 jge     short loc_40416D
.text:00404142                 mov     ecx, [esp+2Ch+var_1C]
.text:00404146                 sub     ecx, ebp
.text:00404148                 mov     [esp+2Ch+var_24], ecx
.text:0040414C                 lea     esi, [esi+0]
.text:00404150
.text:00404150 loc_404150:                             ; CODE XREF: sub_4040E0+8B↓j
.text:00404150                 mov     ecx, [esp+2Ch+var_14]
.text:00404154                 mov     edx, [esp+2Ch+var_24]
.text:00404158                 add     ecx, esi
.text:0040415A                 add     edx, esi
.text:0040415C                 mov     ebx, [edi+ecx*4]
.text:0040415F                 mov     eax, [edi+edx*4]
.text:00404162                 inc     esi
.text:00404163                 cmp     esi, ebp
.text:00404165                 mov     [edi+ecx*4], eax
.text:00404168                 mov     [edi+edx*4], ebx
.text:0040416B                 jl      short loc_404150
.text:0040416D
.text:0040416D loc_40416D:                             ; CODE XREF: sub_4040E0+60↑j
.text:0040416D                 sub     [esp+2Ch+var_1C], ebp
.text:00404171
.text:00404171 loc_404171:                             ; CODE XREF: sub_4040E0+107↓j
.text:00404171                 mov     eax, [esp+2Ch+var_18]
.text:00404175                 cmp     [esp+2Ch+var_1C], eax
.text:00404179                 jle     short loc_404190
.text:0040417B                 mov     ebp, [esp+2Ch+var_14]
.text:0040417F                 cmp     eax, ebp
.text:00404181                 jg      short loc_404120
.text:00404183                 lea     esi, [esi+0]
.text:00404189                 lea     edi, [edi+0]
.text:00404190
.text:00404190 loc_404190:                             ; CODE XREF: sub_4040E0+34↑j
.text:00404190                                         ; sub_4040E0+3B↑j ...
.text:00404190                 mov     esi, [esp+2Ch+var_28]
.text:00404194                 mov     ecx, [esp+2Ch+var_18]
.text:00404198                 mov     eax, [esp+2Ch+var_2C]
.text:0040419B                 mov     edi, [esp+2Ch+arg_4]
.text:0040419F                 mov     edx, [esp+2Ch+var_28]
.text:004041A3                 sub     esi, ecx
.text:004041A5                 add     esi, eax
.text:004041A7                 mov     [edi+20h], esi
.text:004041AA                 mov     [edi+24h], edx
.text:004041AD                 add     esp, 1Ch
.text:004041B0                 pop     ebx
.text:004041B1                 pop     esi
.text:004041B2                 pop     edi
.text:004041B3                 pop     ebp
.text:004041B4                 retn
.text:004041B5 ; ---------------------------------------------------------------------------
.text:004041B5
.text:004041B5 loc_4041B5:                             ; CODE XREF: sub_4040E0+5A↑j
.text:004041B5                 xor     esi, esi
.text:004041B7                 cmp     esi, [esp+2Ch+var_20]
.text:004041BB                 jge     short loc_4041DF
.text:004041BD                 lea     esi, [esi+0]
.text:004041C0
.text:004041C0 loc_4041C0:                             ; CODE XREF: sub_4040E0+FD↓j
.text:004041C0                 mov     ebx, [esp+2Ch+var_14]
.text:004041C4                 mov     ebp, [esp+2Ch+var_18]
.text:004041C8                 add     ebx, esi
.text:004041CA                 add     ebp, esi
.text:004041CC                 mov     edx, [edi+ebx*4]
.text:004041CF                 inc     esi
.text:004041D0                 cmp     esi, [esp+2Ch+var_20]
.text:004041D4                 mov     ecx, [edi+ebp*4]
.text:004041D7                 mov     [edi+ebx*4], ecx
.text:004041DA                 mov     [edi+ebp*4], edx
.text:004041DD                 jl      short loc_4041C0
.text:004041DF
.text:004041DF loc_4041DF:                             ; CODE XREF: sub_4040E0+DB↑j
.text:004041DF                 mov     esi, [esp+2Ch+var_20]
.text:004041E3                 add     [esp+2Ch+var_14], esi
.text:004041E7                 jmp     short loc_404171
.text:004041E7 sub_4040E0      endp
.text:004041E7
.text:004041E7 ; ---------------------------------------------------------------------------
.text:004041E9                 align 20h
.text:00404200
.text:00404200 ; =============== S U B R O U T I N E =======================================
.text:00404200
.text:00404200
.text:00404200 ; int __cdecl sub_404200(int, char *)
.text:00404200 sub_404200      proc near               ; CODE XREF: sub_4018F0+3DE↑p
.text:00404200
.text:00404200 var_C           = dword ptr -0Ch
.text:00404200 var_8           = dword ptr -8
.text:00404200 var_4           = dword ptr -4
.text:00404200 arg_0           = dword ptr  4
.text:00404200 arg_4           = dword ptr  8
.text:00404200
.text:00404200                 sub     esp, 0Ch
.text:00404203                 mov     edx, [esp+0Ch+arg_4]
.text:00404207                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040420F                 mov     [esp+0Ch+var_4], edx ; char *
.text:00404213                 mov     edx, [esp+0Ch+arg_0]
.text:00404217                 mov     [esp+0Ch+var_C], edx ; int
.text:0040421A                 call    sub_402C00
.text:0040421F                 add     esp, 0Ch
.text:00404222                 retn
.text:00404222 sub_404200      endp
.text:00404222
.text:00404222 ; ---------------------------------------------------------------------------
.text:00404223                 align 10h
.text:00404230
.text:00404230 ; =============== S U B R O U T I N E =======================================
.text:00404230
.text:00404230
.text:00404230 ; int __cdecl sub_404230(char *)
.text:00404230 sub_404230      proc near               ; CODE XREF: sub_4018F0+192↑p
.text:00404230                                         ; sub_4018F0+316↑p
.text:00404230
.text:00404230 var_C           = dword ptr -0Ch
.text:00404230 var_8           = dword ptr -8
.text:00404230 var_4           = dword ptr -4
.text:00404230 arg_0           = dword ptr  4
.text:00404230
.text:00404230                 sub     esp, 0Ch
.text:00404233                 mov     edx, [esp+0Ch+arg_0]
.text:00404237                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040423F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00404246                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040424A                 call    sub_402C00
.text:0040424F                 add     esp, 0Ch
.text:00404252                 retn
.text:00404252 sub_404230      endp
.text:00404252
.text:00404252 ; ---------------------------------------------------------------------------
.text:00404253                 align 10h
.text:00404260 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404260                                         ; DATA XREF: .data:Buffer↓o
.text:00404292 ; const char Format[]
.text:00404292 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404550+50↓o
.text:0040429E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040429E                                         ; DATA XREF: sub_404550:loc_4045F1↓o
.text:004042AE                 align 20h
.text:004042C0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004042C0                                         ; DATA XREF: sub_404550+100↓o
.text:004042C0                 db 'ere is NO',0Ah
.text:004042C0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004042C0                 db 'R PURPOSE.',0Ah,0
.text:00404358 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00404358                                         ; DATA XREF: sub_404550:loc_404691↓o
.text:0040436F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040436F                                         ; DATA XREF: sub_404550:loc_40469D↓o
.text:0040438B                 align 20h
.text:004043A0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004043A0                                         ; DATA XREF: sub_404550:loc_4046A9↓o
.text:004043A0                 db 'and %s.',0Ah,0
.text:004043C0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004043C0                                         ; DATA XREF: sub_404550:loc_4046B5↓o
.text:004043C0                 db '%s, and %s.',0Ah,0
.text:004043E4                 align 20h
.text:00404400 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00404400                                         ; DATA XREF: sub_404550:loc_4046C1↓o
.text:00404400                 db '%s, %s, and %s.',0Ah,0
.text:00404428                 align 20h
.text:00404440 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00404440                                         ; DATA XREF: sub_404550:loc_4046CD↓o
.text:00404440                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040446C                 align 20h
.text:00404480 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00404480                                         ; DATA XREF: sub_404550:loc_4046D9↓o
.text:00404480                 db '%s, %s, %s, %s,',0Ah
.text:00404480                 db 'and %s.',0Ah,0
.text:004044B0                 align 20h
.text:004044C0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004044C0                                         ; DATA XREF: sub_404550:loc_4046E5↓o
.text:004044C0                 db '%s, %s, %s, %s,',0Ah
.text:004044C0                 db '%s, and %s.',0Ah,0
.text:004044F4                 align 10h
.text:00404500 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00404500                                         ; DATA XREF: sub_404550:def_4045BD↓o
.text:00404500                 db '%s, %s, %s, %s,',0Ah
.text:00404500                 db '%s, %s, and others.',0Ah,0
.text:0040453C ; const char aSS[]
.text:0040453C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_404550+1B5↓o
.text:00404543                 align 10h
.text:00404550
.text:00404550 ; =============== S U B R O U T I N E =======================================
.text:00404550
.text:00404550
.text:00404550 ; int __cdecl sub_404550(FILE *, FILE *, int, int, va_list)
.text:00404550 sub_404550      proc near               ; CODE XREF: sub_404720+2A↓p
.text:00404550
.text:00404550 Stream          = dword ptr -2Ch
.text:00404550 Format          = dword ptr -28h
.text:00404550 ArgList         = dword ptr -24h
.text:00404550 var_20          = dword ptr -20h
.text:00404550 var_1C          = dword ptr -1Ch
.text:00404550 var_14          = dword ptr -14h
.text:00404550 arg_0           = dword ptr  4
.text:00404550 arg_4           = dword ptr  8
.text:00404550 arg_8           = dword ptr  0Ch
.text:00404550 arg_C           = dword ptr  10h
.text:00404550 arg_10          = dword ptr  14h
.text:00404550
.text:00404550                 push    ebp
.text:00404551                 push    edi
.text:00404552                 push    esi
.text:00404553                 push    ebx
.text:00404554                 sub     esp, 1Ch
.text:00404557                 xor     ebx, ebx
.text:00404559                 mov     edi, [esp+2Ch+arg_10]
.text:0040455D                 mov     edx, [esp+2Ch+arg_8]
.text:00404561                 mov     esi, [esp+2Ch+arg_0]
.text:00404565                 mov     eax, [edi]
.text:00404567                 mov     ecx, [esp+2Ch+arg_4]
.text:0040456B                 mov     [esp+2Ch+var_14], edx
.text:0040456F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404573                 lea     edx, [edi+4]
.text:00404576                 test    eax, eax
.text:00404578                 jz      short loc_40458C
.text:0040457A                 lea     esi, [esi+0]
.text:00404580
.text:00404580 loc_404580:                             ; CODE XREF: sub_404550+3A↓j
.text:00404580                 mov     eax, edx
.text:00404582                 inc     ebx
.text:00404583                 mov     eax, [eax]
.text:00404585                 add     edx, 4
.text:00404588                 test    eax, eax
.text:0040458A                 jnz     short loc_404580
.text:0040458C
.text:0040458C loc_40458C:                             ; CODE XREF: sub_404550+28↑j
.text:0040458C                 test    ecx, ecx
.text:0040458E                 jz      loc_4046FD
.text:00404594                 mov     [esp+2Ch+var_1C], ebp
.text:00404598                 mov     edx, [esp+2Ch+var_14]
.text:0040459C                 mov     [esp+2Ch+ArgList], ecx
.text:004045A0                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:004045A8                 mov     [esp+2Ch+var_20], edx
.text:004045AC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004045AF                 call    fprintf
.text:004045B4
.text:004045B4 loc_4045B4:                             ; CODE XREF: sub_404550+1C9↓j
.text:004045B4                 cmp     ebx, 9          ; switch 10 cases
.text:004045B7                 ja      def_4045BD      ; jumptable 004045BD default case
.text:004045BD                 jmp     ds:jpt_4045BD[ebx*4] ; switch jump
.text:004045BD ; ---------------------------------------------------------------------------
.text:004045C4 jpt_4045BD      dd offset loc_4045EC    ; DATA XREF: sub_404550+6D↑r
.text:004045C4                 dd offset loc_4045F1    ; jump table for switch statement
.text:004045C4                 dd offset loc_404691
.text:004045C4                 dd offset loc_40469D
.text:004045C4                 dd offset loc_4046A9
.text:004045C4                 dd offset loc_4046B5
.text:004045C4                 dd offset loc_4046C1
.text:004045C4                 dd offset loc_4046CD
.text:004045C4                 dd offset loc_4046D9
.text:004045C4                 dd offset loc_4046E5
.text:004045EC ; ---------------------------------------------------------------------------
.text:004045EC
.text:004045EC loc_4045EC:                             ; CODE XREF: sub_404550+6D↑j
.text:004045EC                                         ; DATA XREF: sub_404550:jpt_4045BD↑o
.text:004045EC                 call    abort           ; jumptable 004045BD case 0
.text:004045F1 ; ---------------------------------------------------------------------------
.text:004045F1
.text:004045F1 loc_4045F1:                             ; CODE XREF: sub_404550+6D↑j
.text:004045F1                                         ; DATA XREF: sub_404550:jpt_4045BD↑o
.text:004045F1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004045BD case 1
.text:004045F8                 nop
.text:004045F9                 lea     esi, [esi+0]
.text:00404600
.text:00404600 loc_404600:                             ; CODE XREF: sub_404550+148↓j
.text:00404600                                         ; sub_404550+154↓j ...
.text:00404600                 call    ds:libintl_gettext
.text:00404606                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040460A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040460D                 mov     [esp+2Ch+Format], eax ; Format
.text:00404611                 call    vfprintf
.text:00404616                 mov     ebx, [esi+4]
.text:00404619                 dec     ebx
.text:0040461A                 test    ebx, ebx
.text:0040461C                 mov     [esi+4], ebx
.text:0040461F                 js      short loc_40467F
.text:00404621                 mov     edi, [esi]
.text:00404623                 mov     byte ptr [edi], 0Ah
.text:00404626                 inc     dword ptr [esi]
.text:00404628
.text:00404628 loc_404628:                             ; CODE XREF: sub_404550+13F↓j
.text:00404628                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040462C                 mov     edx, Buffer
.text:00404632                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00404635                 call    fputs
.text:0040463A                 mov     ebp, [esi+4]
.text:0040463D                 dec     ebp
.text:0040463E                 test    ebp, ebp
.text:00404640                 mov     [esi+4], ebp
.text:00404643                 js      short loc_40466D
.text:00404645                 mov     ecx, [esi]
.text:00404647                 mov     byte ptr [ecx], 0Ah
.text:0040464A                 inc     dword ptr [esi]
.text:0040464C
.text:0040464C loc_40464C:                             ; CODE XREF: sub_404550+12D↓j
.text:0040464C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404650                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00404657                 call    ds:libintl_gettext
.text:0040465D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404661                 add     esp, 1Ch
.text:00404664                 pop     ebx
.text:00404665                 pop     esi
.text:00404666                 pop     edi
.text:00404667                 pop     ebp
.text:00404668                 jmp     fputs
.text:0040466D ; ---------------------------------------------------------------------------
.text:0040466D
.text:0040466D loc_40466D:                             ; CODE XREF: sub_404550+F3↑j
.text:0040466D                 mov     [esp+2Ch+Format], esi ; File
.text:00404671                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404678                 call    _flsbuf
.text:0040467D                 jmp     short loc_40464C
.text:0040467F ; ---------------------------------------------------------------------------
.text:0040467F
.text:0040467F loc_40467F:                             ; CODE XREF: sub_404550+CF↑j
.text:0040467F                 mov     [esp+2Ch+Format], esi ; File
.text:00404683                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040468A                 call    _flsbuf
.text:0040468F                 jmp     short loc_404628
.text:00404691 ; ---------------------------------------------------------------------------
.text:00404691
.text:00404691 loc_404691:                             ; CODE XREF: sub_404550+6D↑j
.text:00404691                                         ; DATA XREF: sub_404550:jpt_4045BD↑o
.text:00404691                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004045BD case 2
.text:00404698                 jmp     loc_404600
.text:0040469D ; ---------------------------------------------------------------------------
.text:0040469D
.text:0040469D loc_40469D:                             ; CODE XREF: sub_404550+6D↑j
.text:0040469D                                         ; DATA XREF: sub_404550:jpt_4045BD↑o
.text:0040469D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004045BD case 3
.text:004046A4                 jmp     loc_404600
.text:004046A9 ; ---------------------------------------------------------------------------
.text:004046A9
.text:004046A9 loc_4046A9:                             ; CODE XREF: sub_404550+6D↑j
.text:004046A9                                         ; DATA XREF: sub_404550:jpt_4045BD↑o
.text:004046A9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004045BD case 4
.text:004046B0                 jmp     loc_404600
.text:004046B5 ; ---------------------------------------------------------------------------
.text:004046B5
.text:004046B5 loc_4046B5:                             ; CODE XREF: sub_404550+6D↑j
.text:004046B5                                         ; DATA XREF: sub_404550:jpt_4045BD↑o
.text:004046B5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004045BD case 5
.text:004046BC                 jmp     loc_404600
.text:004046C1 ; ---------------------------------------------------------------------------
.text:004046C1
.text:004046C1 loc_4046C1:                             ; CODE XREF: sub_404550+6D↑j
.text:004046C1                                         ; DATA XREF: sub_404550:jpt_4045BD↑o
.text:004046C1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004045BD case 6
.text:004046C8                 jmp     loc_404600
.text:004046CD ; ---------------------------------------------------------------------------
.text:004046CD
.text:004046CD loc_4046CD:                             ; CODE XREF: sub_404550+6D↑j
.text:004046CD                                         ; DATA XREF: sub_404550:jpt_4045BD↑o
.text:004046CD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004045BD case 7
.text:004046D4                 jmp     loc_404600
.text:004046D9 ; ---------------------------------------------------------------------------
.text:004046D9
.text:004046D9 loc_4046D9:                             ; CODE XREF: sub_404550+6D↑j
.text:004046D9                                         ; DATA XREF: sub_404550:jpt_4045BD↑o
.text:004046D9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004045BD case 8
.text:004046E0                 jmp     loc_404600
.text:004046E5 ; ---------------------------------------------------------------------------
.text:004046E5
.text:004046E5 loc_4046E5:                             ; CODE XREF: sub_404550+6D↑j
.text:004046E5                                         ; DATA XREF: sub_404550:jpt_4045BD↑o
.text:004046E5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004045BD case 9
.text:004046EC                 jmp     loc_404600
.text:004046F1 ; ---------------------------------------------------------------------------
.text:004046F1
.text:004046F1 def_4045BD:                             ; CODE XREF: sub_404550+67↑j
.text:004046F1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004045BD default case
.text:004046F8                 jmp     loc_404600
.text:004046FD ; ---------------------------------------------------------------------------
.text:004046FD
.text:004046FD loc_4046FD:                             ; CODE XREF: sub_404550+3E↑j
.text:004046FD                 mov     [esp+2Ch+var_20], ebp
.text:00404701                 mov     ecx, [esp+2Ch+var_14]
.text:00404705                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040470D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404710                 mov     [esp+2Ch+ArgList], ecx
.text:00404714                 call    fprintf
.text:00404719                 jmp     loc_4045B4
.text:00404719 sub_404550      endp
.text:00404719
.text:00404719 ; ---------------------------------------------------------------------------
.text:0040471E                 align 10h
.text:00404720
.text:00404720 ; =============== S U B R O U T I N E =======================================
.text:00404720
.text:00404720
.text:00404720 ; int __cdecl sub_404720(FILE *, FILE *, int, int, char)
.text:00404720 sub_404720      proc near               ; CODE XREF: sub_401520+13B↑p
.text:00404720
.text:00404720 var_1C          = dword ptr -1Ch
.text:00404720 var_18          = dword ptr -18h
.text:00404720 var_14          = dword ptr -14h
.text:00404720 var_10          = dword ptr -10h
.text:00404720 var_C           = dword ptr -0Ch
.text:00404720 arg_0           = dword ptr  4
.text:00404720 arg_4           = dword ptr  8
.text:00404720 arg_8           = dword ptr  0Ch
.text:00404720 arg_C           = dword ptr  10h
.text:00404720 arg_10          = byte ptr  14h
.text:00404720
.text:00404720                 sub     esp, 1Ch
.text:00404723                 mov     edx, [esp+1Ch+arg_C]
.text:00404727                 lea     ecx, [esp+1Ch+arg_10]
.text:0040472B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040472F                 mov     ecx, [esp+1Ch+arg_8]
.text:00404733                 mov     [esp+1Ch+var_10], edx ; int
.text:00404737                 mov     edx, [esp+1Ch+arg_4]
.text:0040473B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040473F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00404743                 mov     edx, [esp+1Ch+arg_0]
.text:00404747                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040474A                 call    sub_404550
.text:0040474F                 add     esp, 1Ch
.text:00404752                 retn
.text:00404752 sub_404720      endp
.text:00404752
.text:00404752 ; ---------------------------------------------------------------------------
.text:00404753                 align 10h
.text:00404760
.text:00404760 ; =============== S U B R O U T I N E =======================================
.text:00404760
.text:00404760
.text:00404760 sub_404760      proc near               ; CODE XREF: sub_401520+8F↑p
.text:00404760
.text:00404760 var_1C          = dword ptr -1Ch
.text:00404760 var_18          = dword ptr -18h
.text:00404760 var_14          = dword ptr -14h
.text:00404760 var_10          = dword ptr -10h
.text:00404760 var_C           = dword ptr -0Ch
.text:00404760 var_8           = dword ptr -8
.text:00404760 var_4           = dword ptr -4
.text:00404760 arg_0           = dword ptr  4
.text:00404760 arg_4           = dword ptr  8
.text:00404760 arg_8           = dword ptr  0Ch
.text:00404760 arg_C           = dword ptr  10h
.text:00404760 arg_10          = dword ptr  14h
.text:00404760
.text:00404760                 sub     esp, 1Ch
.text:00404763                 mov     edx, [esp+1Ch+arg_C]
.text:00404767                 mov     [esp+1Ch+var_4], 0
.text:0040476F                 mov     ecx, [esp+1Ch+arg_10]
.text:00404773                 mov     [esp+1Ch+var_8], 0
.text:0040477B                 mov     [esp+1Ch+var_10], edx
.text:0040477F                 mov     edx, [esp+1Ch+arg_4]
.text:00404783                 mov     [esp+1Ch+var_C], ecx
.text:00404787                 mov     ecx, [esp+1Ch+arg_8]
.text:0040478B                 mov     [esp+1Ch+var_18], edx
.text:0040478F                 mov     edx, [esp+1Ch+arg_0]
.text:00404793                 mov     [esp+1Ch+var_14], ecx
.text:00404797                 mov     [esp+1Ch+var_1C], edx
.text:0040479A                 call    sub_403FC0
.text:0040479F                 add     esp, 1Ch
.text:004047A2                 retn
.text:004047A2 sub_404760      endp
.text:004047A2
.text:004047A2 ; ---------------------------------------------------------------------------
.text:004047A3                 align 10h
.text:004047B0                 sub     esp, 2Ch
.text:004047B3                 mov     edx, [esp+44h]
.text:004047B7                 mov     dword ptr [esp+18h], 0
.text:004047BF                 mov     ecx, [esp+40h]
.text:004047C3                 mov     dword ptr [esp+14h], 0
.text:004047CB                 mov     [esp+1Ch], edx
.text:004047CF                 mov     edx, [esp+3Ch]
.text:004047D3                 mov     [esp+10h], ecx
.text:004047D7                 mov     ecx, [esp+38h]
.text:004047DB                 mov     [esp+0Ch], edx
.text:004047DF                 mov     edx, [esp+34h]
.text:004047E3                 mov     [esp+8], ecx
.text:004047E7                 mov     [esp+4], edx
.text:004047EB                 mov     edx, [esp+30h]
.text:004047EF                 mov     [esp], edx
.text:004047F2                 call    loc_403430
.text:004047F7                 add     esp, 2Ch
.text:004047FA                 retn
.text:004047FA ; ---------------------------------------------------------------------------
.text:004047FB                 align 10h
.text:00404800                 sub     esp, 1Ch
.text:00404803                 mov     edx, [esp+2Ch]
.text:00404807                 mov     dword ptr [esp+18h], 0
.text:0040480F                 mov     ecx, [esp+30h]
.text:00404813                 mov     dword ptr [esp+14h], 1
.text:0040481B                 mov     [esp+0Ch], edx
.text:0040481F                 mov     edx, [esp+24h]
.text:00404823                 mov     [esp+10h], ecx
.text:00404827                 mov     ecx, [esp+28h]
.text:0040482B                 mov     [esp+4], edx
.text:0040482F                 mov     edx, [esp+20h]
.text:00404833                 mov     [esp+8], ecx
.text:00404837                 mov     [esp], edx
.text:0040483A                 call    sub_403FC0
.text:0040483F                 add     esp, 1Ch
.text:00404842                 retn
.text:00404842 ; ---------------------------------------------------------------------------
.text:00404843                 align 10h
.text:00404850                 sub     esp, 2Ch
.text:00404853                 mov     edx, [esp+44h]
.text:00404857                 mov     dword ptr [esp+18h], 0
.text:0040485F                 mov     ecx, [esp+40h]
.text:00404863                 mov     dword ptr [esp+14h], 1
.text:0040486B                 mov     [esp+1Ch], edx
.text:0040486F                 mov     edx, [esp+3Ch]
.text:00404873                 mov     [esp+10h], ecx
.text:00404877                 mov     ecx, [esp+38h]
.text:0040487B                 mov     [esp+0Ch], edx
.text:0040487F                 mov     edx, [esp+34h]
.text:00404883                 mov     [esp+8], ecx
.text:00404887                 mov     [esp+4], edx
.text:0040488B                 mov     edx, [esp+30h]
.text:0040488F                 mov     [esp], edx
.text:00404892                 call    loc_403430
.text:00404897                 add     esp, 2Ch
.text:0040489A                 retn
.text:0040489A ; ---------------------------------------------------------------------------
.text:0040489B                 align 10h
.text:004048A0                 mov     edx, [esp+4]
.text:004048A4                 mov     ds:dword_40F160, edx
.text:004048AA                 retn
.text:004048AA ; ---------------------------------------------------------------------------
.text:004048AB aWriteError     db 'write error',0      ; DATA XREF: sub_4048D0:loc_404919↓o
.text:004048B7 ; const char aSS_0[]
.text:004048B7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_4048D0+77↓o
.text:004048BE ; const char aS_3[]
.text:004048BE aS_3            db '%s',0               ; DATA XREF: sub_4048D0+A0↓o
.text:004048C1 ; ---------------------------------------------------------------------------
.text:004048C1                 jmp     short sub_4048D0
.text:004048C1 ; ---------------------------------------------------------------------------
.text:004048C3                 align 10h
.text:004048D0
.text:004048D0 ; =============== S U B R O U T I N E =======================================
.text:004048D0
.text:004048D0
.text:004048D0 ; void __cdecl sub_4048D0()
.text:004048D0 sub_4048D0      proc near               ; CODE XREF: .text:004048C1↑j
.text:004048D0                                         ; DATA XREF: sub_401520+63↑o
.text:004048D0
.text:004048D0 Stream          = dword ptr -2Ch
.text:004048D0 ErrorMessage    = dword ptr -28h
.text:004048D0 var_24          = dword ptr -24h
.text:004048D0 var_20          = byte ptr -20h
.text:004048D0 var_1C          = dword ptr -1Ch
.text:004048D0 var_9           = byte ptr -9
.text:004048D0
.text:004048D0                 push    esi
.text:004048D1                 push    ebx
.text:004048D2                 sub     esp, 24h
.text:004048D5                 mov     edx, ds:_iob
.text:004048DB                 mov     ecx, [edx+2Ch]
.text:004048DE                 lea     esi, [edx+20h]
.text:004048E1                 shr     ecx, 5
.text:004048E4                 mov     bl, cl
.text:004048E6                 mov     ecx, [edx+20h]
.text:004048E9                 and     bl, 1
.text:004048EC                 cmp     ecx, [esi+8]
.text:004048EF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004048F2                 setz    [esp+2Ch+var_9]
.text:004048F7                 call    fclose
.text:004048FC                 test    eax, eax
.text:004048FE                 setnz   al
.text:00404901                 test    bl, bl
.text:00404903                 jnz     loc_404993
.text:00404909                 test    al, al
.text:0040490B                 jz      short loc_404960
.text:0040490D
.text:0040490D loc_40490D:                             ; CODE XREF: sub_4048D0+CD↓j
.text:0040490D                 call    _errno
.text:00404912                 mov     esi, [eax]
.text:00404914
.text:00404914 loc_404914:                             ; CODE XREF: sub_4048D0+C7↓j
.text:00404914                 cmp     esi, 9
.text:00404917                 jz      short loc_404986
.text:00404919
.text:00404919 loc_404919:                             ; CODE XREF: sub_4048D0+B8↓j
.text:00404919                                         ; sub_4048D0+C1↓j
.text:00404919                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00404920                 call    ds:libintl_gettext
.text:00404926                 mov     ebx, eax
.text:00404928                 mov     eax, ds:dword_40F160
.text:0040492D                 test    eax, eax
.text:0040492F                 jz      short loc_404966
.text:00404931                 mov     [esp+2Ch+Stream], eax ; char *
.text:00404934                 call    sub_402F70
.text:00404939                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040493D                 mov     edx, Code
.text:00404943                 mov     [esp+2Ch+var_1C], ebx
.text:00404947                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040494F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404953                 mov     [esp+2Ch+Stream], edx ; Code
.text:00404956                 call    sub_404D30
.text:0040495B                 nop
.text:0040495C                 lea     esi, [esi+0]
.text:00404960
.text:00404960 loc_404960:                             ; CODE XREF: sub_4048D0+3B↑j
.text:00404960                                         ; sub_4048D0+B4↓j ...
.text:00404960                 add     esp, 24h
.text:00404963                 pop     ebx
.text:00404964                 pop     esi
.text:00404965                 retn
.text:00404966 ; ---------------------------------------------------------------------------
.text:00404966
.text:00404966 loc_404966:                             ; CODE XREF: sub_4048D0+5F↑j
.text:00404966                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040496A                 mov     ebx, Code
.text:00404970                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00404978                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040497C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040497F                 call    sub_404D30
.text:00404984                 jmp     short loc_404960
.text:00404986 ; ---------------------------------------------------------------------------
.text:00404986
.text:00404986 loc_404986:                             ; CODE XREF: sub_4048D0+47↑j
.text:00404986                 test    bl, bl
.text:00404988                 jnz     short loc_404919
.text:0040498A                 cmp     [esp+2Ch+var_9], 0
.text:0040498F                 jnz     short loc_404960
.text:00404991                 jmp     short loc_404919
.text:00404993 ; ---------------------------------------------------------------------------
.text:00404993
.text:00404993 loc_404993:                             ; CODE XREF: sub_4048D0+33↑j
.text:00404993                 xor     esi, esi
.text:00404995                 test    al, al
.text:00404997                 jz      loc_404914
.text:0040499D                 jmp     loc_40490D
.text:0040499D sub_4048D0      endp
.text:0040499D
.text:0040499D ; ---------------------------------------------------------------------------
.text:004049A2                 align 10h
.text:004049B0                 sub     esp, 0Ch
.text:004049B3                 xor     edx, edx
.text:004049B5                 mov     ecx, [esp+14h]
.text:004049B9                 mov     [esp+8], ebx
.text:004049BD                 mov     eax, 0FFFFFFFFh
.text:004049C2                 mov     ebx, [esp+10h]
.text:004049C6                 div     ecx
.text:004049C8                 cmp     eax, ebx
.text:004049CA                 jb      short loc_4049E9
.text:004049CC                 mov     edx, ebx
.text:004049CE                 imul    edx, ecx
.text:004049D1                 mov     [esp], edx
.text:004049D4                 call    malloc
.text:004049D9                 test    eax, eax
.text:004049DB                 jz      short loc_4049E5
.text:004049DD
.text:004049DD loc_4049DD:                             ; CODE XREF: .text:004049E7↓j
.text:004049DD                 mov     ebx, [esp+8]
.text:004049E1                 add     esp, 0Ch
.text:004049E4                 retn
.text:004049E5 ; ---------------------------------------------------------------------------
.text:004049E5
.text:004049E5 loc_4049E5:                             ; CODE XREF: .text:004049DB↑j
.text:004049E5                 test    ebx, ebx
.text:004049E7                 jz      short loc_4049DD
.text:004049E9
.text:004049E9 loc_4049E9:                             ; CODE XREF: .text:004049CA↑j
.text:004049E9                 call    sub_404CA0
.text:004049E9 ; ---------------------------------------------------------------------------
.text:004049EE                 align 10h
.text:004049F0
.text:004049F0 ; =============== S U B R O U T I N E =======================================
.text:004049F0
.text:004049F0
.text:004049F0 ; int __cdecl sub_4049F0(size_t)
.text:004049F0 sub_4049F0      proc near               ; CODE XREF: .text:00402949↑p
.text:004049F0                                         ; .text:00402B26↑p ...
.text:004049F0
.text:004049F0 Size            = dword ptr -0Ch
.text:004049F0 var_4           = dword ptr -4
.text:004049F0 arg_0           = dword ptr  4
.text:004049F0
.text:004049F0                 sub     esp, 0Ch
.text:004049F3                 mov     [esp+0Ch+var_4], ebx
.text:004049F7                 mov     ebx, [esp+0Ch+arg_0]
.text:004049FB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004049FE                 call    malloc
.text:00404A03                 test    eax, eax
.text:00404A05                 jz      short loc_404A10
.text:00404A07
.text:00404A07 loc_404A07:                             ; CODE XREF: sub_4049F0+22↓j
.text:00404A07                 mov     ebx, [esp+0Ch+var_4]
.text:00404A0B                 add     esp, 0Ch
.text:00404A0E                 retn
.text:00404A0E ; ---------------------------------------------------------------------------
.text:00404A0F                 align 10h
.text:00404A10
.text:00404A10 loc_404A10:                             ; CODE XREF: sub_4049F0+15↑j
.text:00404A10                 test    ebx, ebx
.text:00404A12                 jz      short loc_404A07
.text:00404A14                 call    sub_404CA0
.text:00404A14 sub_4049F0      endp
.text:00404A14
.text:00404A14 ; ---------------------------------------------------------------------------
.text:00404A19                 align 10h
.text:00404A20                 sub     esp, 1Ch
.text:00404A23                 xor     edx, edx
.text:00404A25                 mov     eax, 0FFFFFFFFh
.text:00404A2A                 mov     [esp+14h], ebx
.text:00404A2E                 mov     ecx, [esp+20h]
.text:00404A32                 mov     ebx, [esp+28h]
.text:00404A36                 mov     [esp+18h], esi
.text:00404A3A                 mov     esi, [esp+24h]
.text:00404A3E                 div     ebx
.text:00404A40                 cmp     eax, esi
.text:00404A42                 jb      short loc_404A74
.text:00404A44                 mov     [esp], ecx
.text:00404A47                 mov     edx, esi
.text:00404A49                 imul    edx, ebx
.text:00404A4C                 mov     [esp+4], edx
.text:00404A50                 call    realloc
.text:00404A55                 test    eax, eax
.text:00404A57                 mov     ecx, eax
.text:00404A59                 jz      short loc_404A70
.text:00404A5B
.text:00404A5B loc_404A5B:                             ; CODE XREF: .text:00404A72↓j
.text:00404A5B                 mov     ebx, [esp+14h]
.text:00404A5F                 mov     eax, ecx
.text:00404A61                 mov     esi, [esp+18h]
.text:00404A65                 add     esp, 1Ch
.text:00404A68                 retn
.text:00404A68 ; ---------------------------------------------------------------------------
.text:00404A69                 align 10h
.text:00404A70
.text:00404A70 loc_404A70:                             ; CODE XREF: .text:00404A59↑j
.text:00404A70                 test    esi, esi
.text:00404A72                 jz      short loc_404A5B
.text:00404A74
.text:00404A74 loc_404A74:                             ; CODE XREF: .text:00404A42↑j
.text:00404A74                 call    sub_404CA0
.text:00404A74 ; ---------------------------------------------------------------------------
.text:00404A79                 align 10h
.text:00404A80
.text:00404A80 ; =============== S U B R O U T I N E =======================================
.text:00404A80
.text:00404A80
.text:00404A80 ; int __cdecl sub_404A80(void *, size_t)
.text:00404A80 sub_404A80      proc near               ; CODE XREF: sub_403010+5B↑p
.text:00404A80
.text:00404A80 Block           = dword ptr -0Ch
.text:00404A80 Size            = dword ptr -8
.text:00404A80 var_4           = dword ptr -4
.text:00404A80 arg_0           = dword ptr  4
.text:00404A80 arg_4           = dword ptr  8
.text:00404A80
.text:00404A80                 sub     esp, 0Ch
.text:00404A83                 mov     edx, [esp+0Ch+arg_0]
.text:00404A87                 mov     [esp+0Ch+var_4], ebx
.text:00404A8B                 mov     ebx, [esp+0Ch+arg_4]
.text:00404A8F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404A92                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404A96                 call    realloc
.text:00404A9B                 test    eax, eax
.text:00404A9D                 jz      short loc_404AA7
.text:00404A9F
.text:00404A9F loc_404A9F:                             ; CODE XREF: sub_404A80+29↓j
.text:00404A9F                 mov     ebx, [esp+0Ch+var_4]
.text:00404AA3                 add     esp, 0Ch
.text:00404AA6                 retn
.text:00404AA7 ; ---------------------------------------------------------------------------
.text:00404AA7
.text:00404AA7 loc_404AA7:                             ; CODE XREF: sub_404A80+1D↑j
.text:00404AA7                 test    ebx, ebx
.text:00404AA9                 jz      short loc_404A9F
.text:00404AAB                 call    sub_404CA0
.text:00404AAB sub_404A80      endp
.text:00404AAB
.text:00404AB0 ; ---------------------------------------------------------------------------
.text:00404AB0                 jmp     sub_404C00
.text:00404AB0 ; ---------------------------------------------------------------------------
.text:00404AB5                 align 10h
.text:00404AC0                 sub     esp, 0Ch
.text:00404AC3                 mov     edx, [esp+14h]
.text:00404AC7                 mov     dword ptr [esp+8], 1
.text:00404ACF                 mov     [esp+4], edx
.text:00404AD3                 mov     edx, [esp+10h]
.text:00404AD7                 mov     [esp], edx
.text:00404ADA                 call    sub_404C00
.text:00404ADF                 add     esp, 0Ch
.text:00404AE2                 retn
.text:00404AE2 ; ---------------------------------------------------------------------------
.text:00404AE3                 align 10h
.text:00404AF0                 sub     esp, 1Ch
.text:00404AF3                 mov     [esp+18h], ebx
.text:00404AF7                 mov     ebx, [esp+20h]
.text:00404AFB                 mov     [esp], ebx
.text:00404AFE                 call    malloc
.text:00404B03                 test    eax, eax
.text:00404B05                 jz      short loc_404B23
.text:00404B07
.text:00404B07 loc_404B07:                             ; CODE XREF: .text:00404B25↓j
.text:00404B07                 mov     [esp+8], ebx
.text:00404B0B                 mov     dword ptr [esp+4], 0
.text:00404B13                 mov     [esp], eax
.text:00404B16                 call    memset
.text:00404B1B                 mov     ebx, [esp+18h]
.text:00404B1F                 add     esp, 1Ch
.text:00404B22                 retn
.text:00404B23 ; ---------------------------------------------------------------------------
.text:00404B23
.text:00404B23 loc_404B23:                             ; CODE XREF: .text:00404B05↑j
.text:00404B23                 test    ebx, ebx
.text:00404B25                 jz      short loc_404B07
.text:00404B27                 call    sub_404CA0
.text:00404B27 ; ---------------------------------------------------------------------------
.text:00404B2C                 align 10h
.text:00404B30                 sub     esp, 0Ch
.text:00404B33                 xor     edx, edx
.text:00404B35                 mov     ecx, [esp+14h]
.text:00404B39                 mov     [esp+8], ebx
.text:00404B3D                 mov     eax, 0FFFFFFFFh
.text:00404B42                 mov     ebx, [esp+10h]
.text:00404B46                 div     ecx
.text:00404B48                 cmp     eax, ebx
.text:00404B4A                 jb      short loc_404B68
.text:00404B4C                 mov     [esp+4], ecx
.text:00404B50                 mov     [esp], ebx
.text:00404B53                 call    calloc
.text:00404B58                 test    eax, eax
.text:00404B5A                 jz      short loc_404B64
.text:00404B5C
.text:00404B5C loc_404B5C:                             ; CODE XREF: .text:00404B66↓j
.text:00404B5C                 mov     ebx, [esp+8]
.text:00404B60                 add     esp, 0Ch
.text:00404B63                 retn
.text:00404B64 ; ---------------------------------------------------------------------------
.text:00404B64
.text:00404B64 loc_404B64:                             ; CODE XREF: .text:00404B5A↑j
.text:00404B64                 test    ebx, ebx
.text:00404B66                 jz      short loc_404B5C
.text:00404B68
.text:00404B68 loc_404B68:                             ; CODE XREF: .text:00404B4A↑j
.text:00404B68                 call    sub_404CA0
.text:00404B68 ; ---------------------------------------------------------------------------
.text:00404B6D                 align 10h
.text:00404B70                 sub     esp, 1Ch
.text:00404B73                 mov     [esp+18h], ebx
.text:00404B77                 mov     ebx, [esp+24h]
.text:00404B7B                 mov     [esp], ebx
.text:00404B7E                 call    malloc
.text:00404B83                 test    eax, eax
.text:00404B85                 mov     edx, eax
.text:00404B87                 jz      short loc_404BA5
.text:00404B89
.text:00404B89 loc_404B89:                             ; CODE XREF: .text:00404BA7↓j
.text:00404B89                 mov     [esp+8], ebx
.text:00404B8D                 mov     ecx, [esp+20h]
.text:00404B91                 mov     [esp], edx
.text:00404B94                 mov     [esp+4], ecx
.text:00404B98                 call    memcpy
.text:00404B9D                 mov     ebx, [esp+18h]
.text:00404BA1                 add     esp, 1Ch
.text:00404BA4                 retn
.text:00404BA5 ; ---------------------------------------------------------------------------
.text:00404BA5
.text:00404BA5 loc_404BA5:                             ; CODE XREF: .text:00404B87↑j
.text:00404BA5                 test    ebx, ebx
.text:00404BA7                 jz      short loc_404B89
.text:00404BA9                 call    sub_404CA0
.text:00404BA9 ; ---------------------------------------------------------------------------
.text:00404BAE                 align 10h
.text:00404BB0                 sub     esp, 1Ch
.text:00404BB3                 mov     [esp+18h], esi
.text:00404BB7                 mov     esi, [esp+20h]
.text:00404BBB                 mov     [esp+14h], ebx
.text:00404BBF                 mov     [esp], esi
.text:00404BC2                 call    strlen
.text:00404BC7                 lea     ebx, [eax+1]
.text:00404BCA                 mov     [esp], ebx
.text:00404BCD                 call    malloc
.text:00404BD2                 test    eax, eax
.text:00404BD4                 jz      short loc_404BF2
.text:00404BD6
.text:00404BD6 loc_404BD6:                             ; CODE XREF: .text:00404BF4↓j
.text:00404BD6                 mov     [esp+8], ebx
.text:00404BDA                 mov     [esp+4], esi
.text:00404BDE                 mov     [esp], eax
.text:00404BE1                 call    memcpy
.text:00404BE6                 mov     ebx, [esp+14h]
.text:00404BEA                 mov     esi, [esp+18h]
.text:00404BEE                 add     esp, 1Ch
.text:00404BF1                 retn
.text:00404BF2 ; ---------------------------------------------------------------------------
.text:00404BF2
.text:00404BF2 loc_404BF2:                             ; CODE XREF: .text:00404BD4↑j
.text:00404BF2                 test    ebx, ebx
.text:00404BF4                 jz      short loc_404BD6
.text:00404BF6                 call    sub_404CA0
.text:00404BF6 ; ---------------------------------------------------------------------------
.text:00404BFB                 align 10h
.text:00404C00
.text:00404C00 ; =============== S U B R O U T I N E =======================================
.text:00404C00
.text:00404C00
.text:00404C00 ; int __cdecl sub_404C00(void *, int, int)
.text:00404C00 sub_404C00      proc near               ; CODE XREF: .text:00404AB0↑j
.text:00404C00                                         ; .text:00404ADA↑p
.text:00404C00
.text:00404C00 Block           = dword ptr -1Ch
.text:00404C00 Size            = dword ptr -18h
.text:00404C00 var_C           = dword ptr -0Ch
.text:00404C00 var_8           = dword ptr -8
.text:00404C00 var_4           = dword ptr -4
.text:00404C00 arg_0           = dword ptr  4
.text:00404C00 arg_4           = dword ptr  8
.text:00404C00 arg_8           = dword ptr  0Ch
.text:00404C00
.text:00404C00                 sub     esp, 1Ch
.text:00404C03                 mov     [esp+1Ch+var_8], esi
.text:00404C07                 mov     esi, [esp+1Ch+arg_0]
.text:00404C0B                 mov     [esp+1Ch+var_4], edi
.text:00404C0F                 mov     edi, [esp+1Ch+arg_4]
.text:00404C13                 test    esi, esi
.text:00404C15                 mov     [esp+1Ch+var_C], ebx
.text:00404C19                 mov     ecx, [edi]
.text:00404C1B                 mov     ebx, [esp+1Ch+arg_8]
.text:00404C1F                 jz      short loc_404C60
.text:00404C21                 xor     edx, edx
.text:00404C23                 mov     eax, 7FFFFFFFh
.text:00404C28                 div     ebx
.text:00404C2A                 cmp     eax, ecx
.text:00404C2C                 jb      short loc_404C59
.text:00404C2E                 add     ecx, ecx
.text:00404C30
.text:00404C30 loc_404C30:                             ; CODE XREF: sub_404C00+62↓j
.text:00404C30                                         ; sub_404C00+71↓j ...
.text:00404C30                 mov     [edi], ecx
.text:00404C32                 imul    ebx, ecx
.text:00404C35                 mov     [esp+1Ch+Block], esi ; Block
.text:00404C38                 mov     [esp+1Ch+Size], ebx ; Size
.text:00404C3C                 call    realloc
.text:00404C41                 test    eax, eax
.text:00404C43                 jz      short loc_404C55
.text:00404C45
.text:00404C45 loc_404C45:                             ; CODE XREF: sub_404C00+57↓j
.text:00404C45                 mov     ebx, [esp+1Ch+var_C]
.text:00404C49                 mov     esi, [esp+1Ch+var_8]
.text:00404C4D                 mov     edi, [esp+1Ch+var_4]
.text:00404C51                 add     esp, 1Ch
.text:00404C54                 retn
.text:00404C55 ; ---------------------------------------------------------------------------
.text:00404C55
.text:00404C55 loc_404C55:                             ; CODE XREF: sub_404C00+43↑j
.text:00404C55                 test    ebx, ebx
.text:00404C57                 jz      short loc_404C45
.text:00404C59
.text:00404C59 loc_404C59:                             ; CODE XREF: sub_404C00+2C↑j
.text:00404C59                 call    sub_404CA0
.text:00404C59 ; ---------------------------------------------------------------------------
.text:00404C5E                 align 10h
.text:00404C60
.text:00404C60 loc_404C60:                             ; CODE XREF: sub_404C00+1F↑j
.text:00404C60                 test    ecx, ecx
.text:00404C62                 jnz     short loc_404C30
.text:00404C64                 xor     edx, edx
.text:00404C66                 mov     eax, 40h ; '@'
.text:00404C6B                 div     ebx
.text:00404C6D                 test    eax, eax
.text:00404C6F                 mov     ecx, eax
.text:00404C71                 jnz     short loc_404C30
.text:00404C73                 mov     ecx, 1
.text:00404C78                 jmp     short loc_404C30
.text:00404C78 sub_404C00      endp
.text:00404C78
.text:00404C78 ; ---------------------------------------------------------------------------
.text:00404C7A                 align 10h
.text:00404C80 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404CA0+3↓o
.text:00404C91 ; const char aS_0[]
.text:00404C91 aS_0            db '%s',0               ; DATA XREF: sub_404CA0+10↓o
.text:00404C94                 align 10h
.text:00404CA0
.text:00404CA0 ; =============== S U B R O U T I N E =======================================
.text:00404CA0
.text:00404CA0 ; Attributes: noreturn
.text:00404CA0
.text:00404CA0 sub_404CA0      proc near               ; CODE XREF: sub_403010:loc_4031CF↑p
.text:00404CA0                                         ; .text:loc_4049E9↑p ...
.text:00404CA0
.text:00404CA0 Code            = dword ptr -1Ch
.text:00404CA0 ErrorMessage    = dword ptr -18h
.text:00404CA0 var_14          = dword ptr -14h
.text:00404CA0 var_10          = byte ptr -10h
.text:00404CA0
.text:00404CA0                 sub     esp, 1Ch
.text:00404CA3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00404CAA                 call    ds:libintl_gettext
.text:00404CB0                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00404CB8                 mov     edx, Code
.text:00404CBE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404CC6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00404CCA                 mov     [esp+1Ch+Code], edx ; Code
.text:00404CCD                 call    sub_404D30
.text:00404CD2                 call    abort
.text:00404CD2 sub_404CA0      endp
.text:00404CD2
.text:00404CD2 ; ---------------------------------------------------------------------------
.text:00404CD7                 align 10h
.text:00404CE0
.text:00404CE0 ; =============== S U B R O U T I N E =======================================
.text:00404CE0
.text:00404CE0 ; Attributes: thunk
.text:00404CE0
.text:00404CE0 libintl_bindtextdomain proc near
.text:00404CE0                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404CE0 libintl_bindtextdomain endp
.text:00404CE0
.text:00404CE0 ; ---------------------------------------------------------------------------
.text:00404CE6                 align 10h
.text:00404CF0                 jmp     ds:libintl_textdomain
.text:00404CF0 ; ---------------------------------------------------------------------------
.text:00404CF6                 align 10h
.text:00404D00                 jmp     ds:libintl_gettext
.text:00404D00 ; ---------------------------------------------------------------------------
.text:00404D06                 align 10h
.text:00404D10 ; const char aS_1[]
.text:00404D10 aS_1            db ': %s',0             ; DATA XREF: sub_404D30+B8↓o
.text:00404D10                                         ; sub_404E34+122↓o
.text:00404D15 aUnknownSystemE db 'Unknown system error',0
.text:00404D15                                         ; DATA XREF: sub_404D30:loc_404DFD↓o
.text:00404D15                                         ; sub_404E34:loc_404F6E↓o
.text:00404D2A ; const char aS_2[]
.text:00404D2A aS_2            db '%s: ',0             ; DATA XREF: sub_404D30:loc_404E04↓o
.text:00404D2F                 align 10h
.text:00404D30
.text:00404D30 ; =============== S U B R O U T I N E =======================================
.text:00404D30
.text:00404D30
.text:00404D30 ; int __cdecl sub_404D30(int Code, int ErrorMessage, char *, char)
.text:00404D30 sub_404D30      proc near               ; CODE XREF: sub_401520+21A↑p
.text:00404D30                                         ; sub_4018F0+1C9↑p ...
.text:00404D30
.text:00404D30 Stream          = dword ptr -1Ch
.text:00404D30 Format          = dword ptr -18h
.text:00404D30 ArgList         = dword ptr -14h
.text:00404D30 Code            = dword ptr  4
.text:00404D30 ErrorMessage    = dword ptr  8
.text:00404D30 arg_8           = dword ptr  0Ch
.text:00404D30 arg_C           = byte ptr  10h
.text:00404D30
.text:00404D30                 push    esi
.text:00404D31                 push    ebx
.text:00404D32                 sub     esp, 14h
.text:00404D35                 mov     edx, ds:_iob
.text:00404D3B                 mov     esi, [esp+1Ch+Code]
.text:00404D3F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404D43                 add     edx, 20h ; ' '
.text:00404D46                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404D49                 call    fflush
.text:00404D4E                 mov     eax, ds:dword_40F4E0
.text:00404D53                 test    eax, eax
.text:00404D55                 jz      loc_404E04
.text:00404D5B                 call    eax ; dword_40F4E0
.text:00404D5D
.text:00404D5D loc_404D5D:                             ; CODE XREF: sub_404D30+F7↓j
.text:00404D5D                 lea     edx, [esp+1Ch+arg_C]
.text:00404D61                 mov     ecx, [esp+1Ch+arg_8]
.text:00404D65                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404D69                 mov     edx, ds:_iob
.text:00404D6F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404D73                 add     edx, 40h ; '@'
.text:00404D76                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404D79                 call    vfprintf
.text:00404D7E                 inc     ds:dword_40F4F0
.text:00404D84                 test    ebx, ebx
.text:00404D86                 jnz     short loc_404DD2
.text:00404D88
.text:00404D88 loc_404D88:                             ; CODE XREF: sub_404D30+CB↓j
.text:00404D88                 mov     edx, ds:_iob
.text:00404D8E                 lea     ecx, [edx+40h]
.text:00404D91                 mov     ebx, [ecx+4]
.text:00404D94                 dec     ebx
.text:00404D95                 test    ebx, ebx
.text:00404D97                 mov     [ecx+4], ebx
.text:00404D9A                 js      short loc_404DC0
.text:00404D9C                 mov     ecx, [edx+40h]
.text:00404D9F                 mov     byte ptr [ecx], 0Ah
.text:00404DA2                 inc     dword ptr [edx+40h]
.text:00404DA5
.text:00404DA5 loc_404DA5:                             ; CODE XREF: sub_404D30+A0↓j
.text:00404DA5                 mov     edx, ds:_iob
.text:00404DAB                 add     edx, 40h ; '@'
.text:00404DAE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404DB1                 call    fflush
.text:00404DB6                 test    esi, esi
.text:00404DB8                 jnz     short loc_404E2C
.text:00404DBA                 add     esp, 14h
.text:00404DBD                 pop     ebx
.text:00404DBE                 pop     esi
.text:00404DBF                 retn
.text:00404DC0 ; ---------------------------------------------------------------------------
.text:00404DC0
.text:00404DC0 loc_404DC0:                             ; CODE XREF: sub_404D30+6A↑j
.text:00404DC0                 mov     [esp+1Ch+Format], ecx ; File
.text:00404DC4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00404DCB                 call    _flsbuf
.text:00404DD0                 jmp     short loc_404DA5
.text:00404DD2 ; ---------------------------------------------------------------------------
.text:00404DD2
.text:00404DD2 loc_404DD2:                             ; CODE XREF: sub_404D30+56↑j
.text:00404DD2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404DD5                 call    strerror
.text:00404DDA                 test    eax, eax
.text:00404DDC                 jz      short loc_404DFD
.text:00404DDE
.text:00404DDE loc_404DDE:                             ; CODE XREF: sub_404D30+D2↓j
.text:00404DDE                 mov     [esp+1Ch+ArgList], eax
.text:00404DE2                 mov     ebx, ds:_iob
.text:00404DE8                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00404DF0                 add     ebx, 40h ; '@'
.text:00404DF3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404DF6                 call    fprintf
.text:00404DFB                 jmp     short loc_404D88
.text:00404DFD ; ---------------------------------------------------------------------------
.text:00404DFD
.text:00404DFD loc_404DFD:                             ; CODE XREF: sub_404D30+AC↑j
.text:00404DFD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404E02                 jmp     short loc_404DDE
.text:00404E04 ; ---------------------------------------------------------------------------
.text:00404E04
.text:00404E04 loc_404E04:                             ; CODE XREF: sub_404D30+25↑j
.text:00404E04                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:00404E0C                 mov     edx, ds:_iob
.text:00404E12                 mov     ecx, ds:dword_40F4B0
.text:00404E18                 add     edx, 40h ; '@'
.text:00404E1B                 mov     [esp+1Ch+ArgList], ecx
.text:00404E1F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404E22                 call    fprintf
.text:00404E27                 jmp     loc_404D5D
.text:00404E2C ; ---------------------------------------------------------------------------
.text:00404E2C
.text:00404E2C loc_404E2C:                             ; CODE XREF: sub_404D30+88↑j
.text:00404E2C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00404E2F                 call    exit
.text:00404E2F sub_404D30      endp
.text:00404E2F
.text:00404E34
.text:00404E34 ; =============== S U B R O U T I N E =======================================
.text:00404E34
.text:00404E34
.text:00404E34 ; int __cdecl sub_404E34(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404E34 sub_404E34      proc near               ; DATA XREF: sub_404E34+77↓o
.text:00404E34
.text:00404E34 Stream          = dword ptr -28h
.text:00404E34 Format          = dword ptr -24h
.text:00404E34 ArgList         = dword ptr -20h
.text:00404E34 var_1C          = dword ptr -1Ch
.text:00404E34 Code            = dword ptr  8
.text:00404E34 ErrorMessage    = dword ptr  0Ch
.text:00404E34 Str2            = dword ptr  10h
.text:00404E34 arg_10          = dword ptr  14h
.text:00404E34 arg_14          = dword ptr  18h
.text:00404E34 arg_18          = byte ptr  1Ch
.text:00404E34
.text:00404E34                 and     eax, 64253A73h
.text:00404E39                 cmp     ah, [eax]
.text:00404E3B
.text:00404E3B loc_404E3B:                             ; DATA XREF: sub_404E34:loc_404F75↓o
.text:00404E3B                 add     ds:55003A73h, ah
.text:00404E41                 push    edi
.text:00404E42                 push    esi
.text:00404E43                 push    ebx
.text:00404E44                 sub     esp, 1Ch
.text:00404E47                 mov     edx, ds:dword_40F520
.text:00404E4D                 mov     ebp, [esp+28h+Code]
.text:00404E51                 mov     edi, [esp+28h+ErrorMessage]
.text:00404E55                 test    edx, edx
.text:00404E57                 mov     ebx, [esp+28h+Str2]
.text:00404E5B                 mov     esi, [esp+28h+arg_10]
.text:00404E5F                 jz      short loc_404E79
.text:00404E61                 cmp     ds:dword_40F180, esi
.text:00404E67                 jz      loc_404FA0
.text:00404E6D
.text:00404E6D loc_404E6D:                             ; CODE XREF: sub_404E34+18D↓j
.text:00404E6D                 mov     ds:Str1, ebx
.text:00404E73                 mov     ds:dword_40F180, esi
.text:00404E79
.text:00404E79 loc_404E79:                             ; CODE XREF: sub_404E34+2B↑j
.text:00404E79                 mov     edx, ds:_iob
.text:00404E7F                 add     edx, 20h ; ' '
.text:00404E82                 mov     [esp+28h+Stream], edx ; Stream
.text:00404E85                 call    fflush
.text:00404E8A                 mov     eax, ds:dword_40F4E0
.text:00404E8F                 test    eax, eax
.text:00404E91                 jz      loc_404F75
.text:00404E97                 call    eax ; dword_40F4E0
.text:00404E99
.text:00404E99 loc_404E99:                             ; CODE XREF: sub_404E34+164↓j
.text:00404E99                 test    ebx, ebx
.text:00404E9B                 jz      short loc_404EBE
.text:00404E9D                 mov     [esp+28h+ArgList], ebx
.text:00404EA1                 mov     ebx, ds:_iob
.text:00404EA7                 mov     [esp+28h+var_1C], esi
.text:00404EAB                 mov     [esp+28h+Format], offset sub_404E34 ; Format
.text:00404EB3                 add     ebx, 40h ; '@'
.text:00404EB6                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404EB9                 call    fprintf
.text:00404EBE
.text:00404EBE loc_404EBE:                             ; CODE XREF: sub_404E34+67↑j
.text:00404EBE                 mov     esi, ds:_iob
.text:00404EC4                 lea     edx, [esp+28h+arg_18]
.text:00404EC8                 mov     ecx, [esp+28h+arg_14]
.text:00404ECC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404ED0                 add     esi, 40h ; '@'
.text:00404ED3                 mov     [esp+28h+Format], ecx ; Format
.text:00404ED7                 mov     [esp+28h+Stream], esi ; Stream
.text:00404EDA                 call    vfprintf
.text:00404EDF                 inc     ds:dword_40F4F0
.text:00404EE5                 test    edi, edi
.text:00404EE7                 jnz     short loc_404F40
.text:00404EE9
.text:00404EE9 loc_404EE9:                             ; CODE XREF: sub_404E34+135↓j
.text:00404EE9                 mov     edx, ds:_iob
.text:00404EEF                 lea     ecx, [edx+40h]
.text:00404EF2                 mov     ebx, [ecx+4]
.text:00404EF5                 dec     ebx
.text:00404EF6                 test    ebx, ebx
.text:00404EF8                 mov     [ecx+4], ebx
.text:00404EFB                 js      short loc_404F27
.text:00404EFD                 mov     esi, [edx+40h]
.text:00404F00                 mov     byte ptr [esi], 0Ah
.text:00404F03                 inc     dword ptr [edx+40h]
.text:00404F06
.text:00404F06 loc_404F06:                             ; CODE XREF: sub_404E34+103↓j
.text:00404F06                 mov     ecx, ds:_iob
.text:00404F0C                 add     ecx, 40h ; '@'
.text:00404F0F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404F12                 call    fflush
.text:00404F17                 test    ebp, ebp
.text:00404F19                 jnz     loc_404FC6
.text:00404F1F
.text:00404F1F loc_404F1F:                             ; CODE XREF: sub_404E34+173↓j
.text:00404F1F                                         ; sub_404E34+187↓j
.text:00404F1F                 add     esp, 1Ch
.text:00404F22                 pop     ebx
.text:00404F23                 pop     esi
.text:00404F24                 pop     edi
.text:00404F25                 pop     ebp
.text:00404F26                 retn
.text:00404F27 ; ---------------------------------------------------------------------------
.text:00404F27
.text:00404F27 loc_404F27:                             ; CODE XREF: sub_404E34+C7↑j
.text:00404F27                 mov     [esp+28h+Format], ecx ; File
.text:00404F2B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404F32                 call    _flsbuf
.text:00404F37                 jmp     short loc_404F06
.text:00404F37 ; ---------------------------------------------------------------------------
.text:00404F39                 align 10h
.text:00404F40
.text:00404F40 loc_404F40:                             ; CODE XREF: sub_404E34+B3↑j
.text:00404F40                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404F43                 call    strerror
.text:00404F48                 test    eax, eax
.text:00404F4A                 jz      short loc_404F6E
.text:00404F4C
.text:00404F4C loc_404F4C:                             ; CODE XREF: sub_404E34+13F↓j
.text:00404F4C                 mov     [esp+28h+ArgList], eax
.text:00404F50                 mov     edi, ds:_iob
.text:00404F56                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:00404F5E                 add     edi, 40h ; '@'
.text:00404F61                 mov     [esp+28h+Stream], edi ; Stream
.text:00404F64                 call    fprintf
.text:00404F69                 jmp     loc_404EE9
.text:00404F6E ; ---------------------------------------------------------------------------
.text:00404F6E
.text:00404F6E loc_404F6E:                             ; CODE XREF: sub_404E34+116↑j
.text:00404F6E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404F73                 jmp     short loc_404F4C
.text:00404F75 ; ---------------------------------------------------------------------------
.text:00404F75
.text:00404F75 loc_404F75:                             ; CODE XREF: sub_404E34+5D↑j
.text:00404F75                 mov     [esp+28h+Format], (offset loc_404E3B+1) ; Format
.text:00404F7D                 mov     ecx, ds:_iob
.text:00404F83                 mov     edx, ds:dword_40F4B0
.text:00404F89                 add     ecx, 40h ; '@'
.text:00404F8C                 mov     [esp+28h+ArgList], edx
.text:00404F90                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404F93                 call    fprintf
.text:00404F98                 jmp     loc_404E99
.text:00404F98 ; ---------------------------------------------------------------------------
.text:00404F9D                 align 10h
.text:00404FA0
.text:00404FA0 loc_404FA0:                             ; CODE XREF: sub_404E34+33↑j
.text:00404FA0                 mov     eax, ds:Str1
.text:00404FA5                 cmp     ebx, eax
.text:00404FA7                 jz      loc_404F1F
.text:00404FAD                 mov     [esp+28h+Format], ebx ; Str2
.text:00404FB1                 mov     [esp+28h+Stream], eax ; Str1
.text:00404FB4                 call    strcmp
.text:00404FB9                 test    eax, eax
.text:00404FBB                 jz      loc_404F1F
.text:00404FC1                 jmp     loc_404E6D
.text:00404FC6 ; ---------------------------------------------------------------------------
.text:00404FC6
.text:00404FC6 loc_404FC6:                             ; CODE XREF: sub_404E34+E5↑j
.text:00404FC6                 mov     [esp+28h+Stream], ebp ; Code
.text:00404FC9                 call    exit
.text:00404FC9 sub_404E34      endp ; sp-analysis failed
.text:00404FC9
.text:00404FC9 ; ---------------------------------------------------------------------------
.text:00404FCE                 align 10h
.text:00404FD0
.text:00404FD0 ; =============== S U B R O U T I N E =======================================
.text:00404FD0
.text:00404FD0
.text:00404FD0 sub_404FD0      proc near               ; CODE XREF: sub_4018F0+2BF↑p
.text:00404FD0
.text:00404FD0 var_C           = dword ptr -0Ch
.text:00404FD0 var_8           = dword ptr -8
.text:00404FD0 var_4           = dword ptr -4
.text:00404FD0 arg_0           = dword ptr  4
.text:00404FD0 arg_4           = dword ptr  8
.text:00404FD0
.text:00404FD0                 sub     esp, 0Ch
.text:00404FD3                 mov     edx, [esp+0Ch+arg_4]
.text:00404FD7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:00404FDE                 mov     [esp+0Ch+var_4], edx ; int
.text:00404FE2                 mov     edx, [esp+0Ch+arg_0]
.text:00404FE6                 mov     [esp+0Ch+var_8], edx ; int
.text:00404FEA                 call    sub_405000
.text:00404FEF                 add     esp, 0Ch
.text:00404FF2                 retn
.text:00404FF2 sub_404FD0      endp
.text:00404FF2
.text:00404FF2 ; ---------------------------------------------------------------------------
.text:00404FF3                 align 10h
.text:00405000
.text:00405000 ; =============== S U B R O U T I N E =======================================
.text:00405000
.text:00405000
.text:00405000 ; int __cdecl sub_405000(LPCSTR, int, int)
.text:00405000 sub_405000      proc near               ; CODE XREF: sub_404FD0+1A↑p
.text:00405000                                         ; sub_40A4B0+30E↓p ...
.text:00405000
.text:00405000 lpFileName      = dword ptr -2Ch
.text:00405000 dwDesiredAccess = dword ptr -28h
.text:00405000 dwShareMode     = dword ptr -24h
.text:00405000 lpSecurityAttributes= dword ptr -20h
.text:00405000 dwCreationDisposition= dword ptr -1Ch
.text:00405000 dwFlagsAndAttributes= dword ptr -18h
.text:00405000 hTemplateFile   = dword ptr -14h
.text:00405000 var_10          = dword ptr -10h
.text:00405000 var_C           = dword ptr -0Ch
.text:00405000 var_8           = dword ptr -8
.text:00405000 var_4           = dword ptr -4
.text:00405000 arg_0           = dword ptr  4
.text:00405000 arg_4           = dword ptr  8
.text:00405000 arg_8           = dword ptr  0Ch
.text:00405000
.text:00405000 ; FUNCTION CHUNK AT .text:00406A70 SIZE 0000013A BYTES
.text:00405000
.text:00405000                 sub     esp, 0Ch
.text:00405003                 mov     ecx, [esp+0Ch+arg_0]
.text:00405007                 mov     edx, [esp+0Ch+arg_4]
.text:0040500B                 mov     eax, [esp+0Ch+arg_8]
.text:0040500F                 test    ecx, ecx
.text:00405011                 jnz     short loc_405030
.text:00405013                 test    edx, edx
.text:00405015                 jz      short loc_405030
.text:00405017                 test    eax, eax
.text:00405019                 jz      short loc_405030
.text:0040501B                 mov     [esp+0Ch+arg_4], eax
.text:0040501F                 mov     [esp+0Ch+arg_0], edx
.text:00405023                 add     esp, 0Ch
.text:00405026                 jmp     loc_406A70
.text:00405026 ; ---------------------------------------------------------------------------
.text:0040502B                 align 10h
.text:00405030
.text:00405030 loc_405030:                             ; CODE XREF: sub_405000+11↑j
.text:00405030                                         ; sub_405000+15↑j ...
.text:00405030                 call    _errno
.text:00405035                 mov     dword ptr [eax], 16h
.text:0040503B                 mov     eax, 0FFFFFFFFh
.text:00405040                 add     esp, 0Ch
.text:00405043                 retn
.text:00405043 sub_405000      endp
.text:00405043
.text:00405043 ; ---------------------------------------------------------------------------
.text:00405044                 align 10h
.text:00405050
.text:00405050 ; =============== S U B R O U T I N E =======================================
.text:00405050
.text:00405050
.text:00405050 sub_405050      proc near               ; CODE XREF: sub_4018F0+82↑p
.text:00405050                                         ; sub_4018F0+208↑p
.text:00405050
.text:00405050 arg_0           = dword ptr  4
.text:00405050
.text:00405050                 sub     esp, 0Ch
.text:00405053                 mov     edx, [esp+0Ch+arg_0]
.text:00405057                 test    edx, edx
.text:00405059                 jz      short loc_40506B
.text:0040505B                 mov     [esp+0Ch+arg_0], 0
.text:00405063                 add     esp, 0Ch
.text:00405066                 jmp     sub_406BB0
.text:0040506B ; ---------------------------------------------------------------------------
.text:0040506B
.text:0040506B loc_40506B:                             ; CODE XREF: sub_405050+9↑j
.text:0040506B                 call    _errno
.text:00405070                 mov     dword ptr [eax], 16h
.text:00405076                 mov     eax, 0FFFFFFFFh
.text:0040507B                 add     esp, 0Ch
.text:0040507E                 retn
.text:0040507E sub_405050      endp
.text:0040507E
.text:0040507E ; ---------------------------------------------------------------------------
.text:0040507F                 align 10h
.text:00405080 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00405080                                         ; DATA XREF: .data:off_40E054↓o
.text:00405094 ; const CHAR LibFileName[]
.text:00405094 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_4050C0+11↓o
.text:00405094                                         ; sub_405230+C↓o ...
.text:004050A1 ; const CHAR ProcName[]
.text:004050A1 ProcName        db 'GetFileAttributesExA',0
.text:004050A1                                         ; DATA XREF: sub_4050C0+28↓o
.text:004050B6                 align 10h
.text:004050C0
.text:004050C0 ; =============== S U B R O U T I N E =======================================
.text:004050C0
.text:004050C0
.text:004050C0 ; int __cdecl sub_4050C0(LPCSTR lpFileName, int)
.text:004050C0 sub_4050C0      proc near               ; CODE XREF: .text:00406264↓p
.text:004050C0                                         ; sub_406660+37↓p
.text:004050C0
.text:004050C0 lpModuleName    = dword ptr -18Ch
.text:004050C0 lpProcName      = dword ptr -188h
.text:004050C0 var_184         = dword ptr -184h
.text:004050C0 var_170         = dword ptr -170h
.text:004050C0 var_164         = dword ptr -164h
.text:004050C0 hModule         = dword ptr -160h
.text:004050C0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004050C0 lpFileName      = dword ptr  4
.text:004050C0 arg_4           = dword ptr  8
.text:004050C0
.text:004050C0                 push    ebp
.text:004050C1                 push    edi
.text:004050C2                 push    esi
.text:004050C3                 push    ebx
.text:004050C4                 sub     esp, 17Ch
.text:004050CA                 mov     ebx, [esp+18Ch+arg_4]
.text:004050D1                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:004050D8                 call    GetModuleHandleA
.text:004050DD                 sub     esp, 4
.text:004050E0                 mov     [esp+18Ch+hModule], eax
.text:004050E4                 mov     edx, [esp+18Ch+hModule]
.text:004050E8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:004050F0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:004050F3                 call    GetProcAddress
.text:004050F8                 sub     esp, 8
.text:004050FB                 mov     ebp, eax
.text:004050FD                 mov     eax, [esp+18Ch+lpFileName]
.text:00405104                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00405107                 call    GetFileAttributesA
.text:0040510C                 sub     esp, 4
.text:0040510F                 mov     [esp+18Ch+var_164], eax
.text:00405113                 xor     eax, eax
.text:00405115                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040511A                 jz      short loc_405171
.text:0040511C                 cld
.text:0040511D                 mov     ecx, 50h ; 'P'
.text:00405122                 lea     esi, [esp+18Ch+FindFileData]
.text:00405126                 mov     edi, esi
.text:00405128                 test    ebp, ebp
.text:0040512A                 rep stosd
.text:0040512C                 mov     [esp+18Ch+var_170], 0
.text:00405134                 jz      short loc_405155
.text:00405136                 mov     [esp+18Ch+var_184], ebx
.text:0040513A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00405141                 mov     [esp+18Ch+lpProcName], 0
.text:00405149                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040514C                 call    ebp
.text:0040514E                 sub     esp, 0Ch
.text:00405151                 mov     [esp+18Ch+var_170], eax
.text:00405155
.text:00405155 loc_405155:                             ; CODE XREF: sub_4050C0+74↑j
.text:00405155                 mov     eax, [esp+18Ch+var_170]
.text:00405159                 test    eax, eax
.text:0040515B                 jz      short loc_405180
.text:0040515D
.text:0040515D loc_40515D:                             ; CODE XREF: sub_4050C0+131↓j
.text:0040515D                                         ; sub_4050C0+14B↓j
.text:0040515D                 mov     ebx, [esp+18Ch+hModule]
.text:00405161                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00405164                 call    FreeLibrary
.text:00405169                 sub     esp, 4
.text:0040516C                 mov     eax, 1
.text:00405171
.text:00405171 loc_405171:                             ; CODE XREF: sub_4050C0+5A↑j
.text:00405171                 add     esp, 17Ch
.text:00405177                 pop     ebx
.text:00405178                 pop     esi
.text:00405179                 pop     edi
.text:0040517A                 pop     ebp
.text:0040517B                 retn
.text:0040517B ; ---------------------------------------------------------------------------
.text:0040517C                 align 10h
.text:00405180
.text:00405180 loc_405180:                             ; CODE XREF: sub_4050C0+9B↑j
.text:00405180                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:00405184                 mov     edx, [esp+18Ch+lpFileName]
.text:0040518B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040518E                 call    FindFirstFileA
.text:00405193                 sub     esp, 8
.text:00405196                 xor     ecx, ecx
.text:00405198                 cmp     eax, 0FFFFFFFFh
.text:0040519B                 setnz   cl
.text:0040519E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:004051A2                 mov     [ebx], edi
.text:004051A4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:004051A8                 mov     [esp+18Ch+var_170], ecx
.text:004051AC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:004051B0                 mov     [ebx+8], esi
.text:004051B3                 mov     [ebx+4], ecx
.text:004051B6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:004051BA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:004051BE                 mov     [ebx+0Ch], ebp
.text:004051C1                 mov     [ebx+10h], edi
.text:004051C4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:004051C8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:004051CC                 mov     [ebx+18h], esi
.text:004051CF                 mov     [ebx+14h], ecx
.text:004051D2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:004051D6                 mov     [ebx+1Ch], ebp
.text:004051D9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:004051DD                 mov     [ebx+20h], edi
.text:004051E0                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:004051E3                 call    FindClose
.text:004051E8                 sub     esp, 4
.text:004051EB                 mov     esi, [esp+18Ch+var_170]
.text:004051EF                 test    esi, esi
.text:004051F1                 jnz     loc_40515D
.text:004051F7                 cld
.text:004051F8                 mov     eax, [esp+18Ch+var_170]
.text:004051FC                 mov     ecx, 9
.text:00405201                 mov     edi, ebx
.text:00405203                 rep stosd
.text:00405205                 mov     ebp, [esp+18Ch+var_164]
.text:00405209                 mov     [ebx], ebp
.text:0040520B                 jmp     loc_40515D
.text:0040520B sub_4050C0      endp
.text:0040520B
.text:0040520B ; ---------------------------------------------------------------------------
.text:00405210 ; const CHAR aFindfirstfilee[]
.text:00405210 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_405230+23↓o
.text:00405221 ; const char Source[]
.text:00405221 Source          db '\*',0               ; DATA XREF: sub_405230:loc_4052BD↓o
.text:00405224                 align 10h
.text:00405230
.text:00405230 ; =============== S U B R O U T I N E =======================================
.text:00405230
.text:00405230
.text:00405230 ; int __cdecl sub_405230(char *Str)
.text:00405230 sub_405230      proc near               ; CODE XREF: .text:00406363↓p
.text:00405230                                         ; sub_406660+3FA↓p ...
.text:00405230
.text:00405230 lpLibFileName   = dword ptr -18Ch
.text:00405230 lpProcName      = dword ptr -188h
.text:00405230 var_184         = dword ptr -184h
.text:00405230 var_180         = dword ptr -180h
.text:00405230 var_17C         = dword ptr -17Ch
.text:00405230 var_178         = dword ptr -178h
.text:00405230 var_164         = dword ptr -164h
.text:00405230 hModule         = dword ptr -160h
.text:00405230 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00405230 Str             = dword ptr  4
.text:00405230
.text:00405230                 push    ebp
.text:00405231                 push    edi
.text:00405232                 xor     edi, edi
.text:00405234                 push    esi
.text:00405235                 push    ebx
.text:00405236                 sub     esp, 17Ch
.text:0040523C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00405243                 call    LoadLibraryA
.text:00405248                 sub     esp, 4
.text:0040524B                 mov     [esp+18Ch+hModule], eax
.text:0040524F                 mov     ecx, [esp+18Ch+hModule]
.text:00405253                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040525B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040525E                 call    GetProcAddress
.text:00405263                 sub     esp, 8
.text:00405266                 mov     edx, [esp+18Ch+Str]
.text:0040526D                 mov     [esp+18Ch+var_164], eax
.text:00405271                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00405274                 call    strlen
.text:00405279                 lea     edx, [eax+5]
.text:0040527C                 mov     ebx, eax
.text:0040527E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00405281                 call    malloc
.text:00405286                 mov     esi, eax
.text:00405288                 test    esi, esi
.text:0040528A                 mov     eax, 1
.text:0040528F                 jz      loc_40536D
.text:00405295                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00405298                 mov     ebp, [esp+18Ch+Str]
.text:0040529F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:004052A3                 call    strcpy
.text:004052A8                 movzx   eax, byte ptr [ebx+esi-1]
.text:004052AD                 cmp     al, 2Fh ; '/'
.text:004052AF                 jz      loc_40539B
.text:004052B5                 cmp     al, 5Ch ; '\'
.text:004052B7                 jz      loc_40539B
.text:004052BD
.text:004052BD loc_4052BD:                             ; CODE XREF: sub_405230+170↓j
.text:004052BD                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:004052C5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:004052C8                 call    strcat
.text:004052CD                 mov     eax, [esp+18Ch+var_164]
.text:004052D1                 test    eax, eax
.text:004052D3                 jz      loc_405395
.text:004052D9                 mov     [esp+18Ch+var_178], 0
.text:004052E1                 lea     ebp, [esp+18Ch+FindFileData]
.text:004052E5                 mov     [esp+18Ch+var_17C], 0
.text:004052ED                 mov     [esp+18Ch+var_180], 1
.text:004052F5                 mov     [esp+18Ch+var_184], ebp
.text:004052F9                 mov     [esp+18Ch+lpProcName], 0
.text:00405301                 mov     [esp+18Ch+lpLibFileName], esi
.text:00405304                 call    [esp+18Ch+var_164]
.text:00405308                 sub     esp, 18h
.text:0040530B                 mov     ebx, eax
.text:0040530D                 cmp     eax, 0FFFFFFFFh
.text:00405310                 jz      short loc_405378
.text:00405312                 lea     esi, [esi+0]
.text:00405319                 lea     edi, [edi+0]
.text:00405320
.text:00405320 loc_405320:                             ; CODE XREF: sub_405230+109↓j
.text:00405320                                         ; sub_405230+161↓j
.text:00405320                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00405325                 jz      short loc_405328
.text:00405327                 inc     edi
.text:00405328
.text:00405328 loc_405328:                             ; CODE XREF: sub_405230+F5↑j
.text:00405328                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040532C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040532F                 call    FindNextFileA
.text:00405334                 sub     esp, 8
.text:00405337                 test    eax, eax
.text:00405339                 jnz     short loc_405320
.text:0040533B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040533E                 call    FindClose
.text:00405343                 sub     esp, 4
.text:00405346                 mov     esi, [esp+18Ch+hModule]
.text:0040534A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040534D                 call    FreeLibrary
.text:00405352                 sub     esp, 4
.text:00405355                 mov     ebx, [esp+18Ch+Str]
.text:0040535C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040535F                 call    sub_4074E0
.text:00405364                 test    eax, eax
.text:00405366                 jz      short loc_40536B
.text:00405368                 add     edi, 2
.text:0040536B
.text:0040536B loc_40536B:                             ; CODE XREF: sub_405230+136↑j
.text:0040536B                 mov     eax, edi
.text:0040536D
.text:0040536D loc_40536D:                             ; CODE XREF: sub_405230+5F↑j
.text:0040536D                                         ; sub_405230+163↓j
.text:0040536D                 add     esp, 17Ch
.text:00405373                 pop     ebx
.text:00405374                 pop     esi
.text:00405375                 pop     edi
.text:00405376                 pop     ebp
.text:00405377                 retn
.text:00405378 ; ---------------------------------------------------------------------------
.text:00405378
.text:00405378 loc_405378:                             ; CODE XREF: sub_405230+E0↑j
.text:00405378                                         ; sub_405230+169↓j
.text:00405378                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040537C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040537F                 call    FindFirstFileA
.text:00405384                 mov     ebx, eax
.text:00405386                 sub     esp, 8
.text:00405389                 cmp     ebx, 0FFFFFFFFh
.text:0040538C                 mov     eax, 2
.text:00405391                 jnz     short loc_405320
.text:00405393                 jmp     short loc_40536D
.text:00405395 ; ---------------------------------------------------------------------------
.text:00405395
.text:00405395 loc_405395:                             ; CODE XREF: sub_405230+A3↑j
.text:00405395                 lea     ebp, [esp+18Ch+FindFileData]
.text:00405399                 jmp     short loc_405378
.text:0040539B ; ---------------------------------------------------------------------------
.text:0040539B
.text:0040539B loc_40539B:                             ; CODE XREF: sub_405230+7F↑j
.text:0040539B                                         ; sub_405230+87↑j
.text:0040539B                 mov     byte ptr [ebx+esi-1], 0
.text:004053A0                 jmp     loc_4052BD
.text:004053A0 sub_405230      endp
.text:004053A0
.text:004053A0 ; ---------------------------------------------------------------------------
.text:004053A5                 align 10h
.text:004053B0
.text:004053B0 ; =============== S U B R O U T I N E =======================================
.text:004053B0
.text:004053B0
.text:004053B0 ; int __cdecl sub_4053B0(HANDLE hNamedPipe, int)
.text:004053B0 sub_4053B0      proc near               ; CODE XREF: sub_405000+1B27↓p
.text:004053B0                                         ; sub_409380+52↓j
.text:004053B0
.text:004053B0 hFile           = dword ptr -0ECh
.text:004053B0 lpFileInformation= dword ptr -0E8h
.text:004053B0 nBufferSize     = dword ptr -0E4h
.text:004053B0 lpBytesRead     = dword ptr -0E0h
.text:004053B0 lpTotalBytesAvail= dword ptr -0DCh
.text:004053B0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:004053B0 var_C4          = dword ptr -0C4h
.text:004053B0 var_C0          = dword ptr -0C0h
.text:004053B0 var_BC          = dword ptr -0BCh
.text:004053B0 var_B8          = dword ptr -0B8h
.text:004053B0 var_B4          = dword ptr -0B4h
.text:004053B0 var_B0          = dword ptr -0B0h
.text:004053B0 var_AC          = dword ptr -0ACh
.text:004053B0 var_A8          = dword ptr -0A8h
.text:004053B0 TotalBytesAvail = dword ptr -0A0h
.text:004053B0 var_9C          = dword ptr -9Ch
.text:004053B0 var_98          = dword ptr -98h
.text:004053B0 var_94          = dword ptr -94h
.text:004053B0 var_90          = dword ptr -90h
.text:004053B0 var_8C          = dword ptr -8Ch
.text:004053B0 var_88          = dword ptr -88h
.text:004053B0 var_84          = dword ptr -84h
.text:004053B0 var_80          = dword ptr -80h
.text:004053B0 var_7C          = dword ptr -7Ch
.text:004053B0 var_78          = dword ptr -78h
.text:004053B0 var_74          = dword ptr -74h
.text:004053B0 var_70          = dword ptr -70h
.text:004053B0 var_6C          = dword ptr -6Ch
.text:004053B0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:004053B0 hNamedPipe      = dword ptr  4
.text:004053B0 arg_4           = dword ptr  8
.text:004053B0
.text:004053B0                 push    ebp
.text:004053B1                 mov     eax, 0FFFFFFFFh
.text:004053B6                 push    edi
.text:004053B7                 push    esi
.text:004053B8                 push    ebx
.text:004053B9                 sub     esp, 0DCh
.text:004053BF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:004053C6                 mov     ebp, [esp+0ECh+arg_4]
.text:004053CD                 cmp     esi, 0FFFFFFFFh
.text:004053D0                 jz      loc_405751
.text:004053D6                 cld
.text:004053D7                 xor     eax, eax
.text:004053D9                 lea     ebx, [esp+0ECh+FileInformation]
.text:004053E0                 mov     ecx, 0Dh
.text:004053E5                 mov     edi, ebx
.text:004053E7                 rep stosd
.text:004053E9                 mov     dword ptr [ebp+18h], 1
.text:004053F0                 mov     [esp+0ECh+hFile], esi ; hFile
.text:004053F3                 call    GetFileType
.text:004053F8                 sub     esp, 4
.text:004053FB                 xor     edx, edx
.text:004053FD                 cmp     eax, 2
.text:00405400                 jz      loc_405830
.text:00405406                 cmp     eax, 3
.text:00405409                 jz      loc_405820
.text:0040540F
.text:0040540F loc_40540F:                             ; CODE XREF: sub_4053B0+475↓j
.text:0040540F                                         ; sub_4053B0+485↓j
.text:0040540F                 or      [ebp+0], edx
.text:00405412                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00405416                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00405419                 call    GetFileInformationByHandle
.text:0040541E                 sub     esp, 8
.text:00405421                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00405428                 test    ecx, ecx
.text:0040542A                 jnz     short loc_405460
.text:0040542C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00405433                 test    edx, edx
.text:00405435                 jnz     short loc_405460
.text:00405437                 mov     edx, [ebp+0]
.text:0040543A                 and     edx, 0F000h
.text:00405440                 cmp     edx, 1000h
.text:00405446                 jz      loc_4057B6
.text:0040544C
.text:0040544C loc_40544C:                             ; CODE XREF: sub_4053B0+459↓j
.text:0040544C                                         ; sub_4053B0+465↓j
.text:0040544C                 test    ecx, ecx
.text:0040544E                 jnz     short loc_405460
.text:00405450                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00405457                 test    edx, edx
.text:00405459                 jz      loc_405794
.text:0040545F                 nop
.text:00405460
.text:00405460 loc_405460:                             ; CODE XREF: sub_4053B0+7A↑j
.text:00405460                                         ; sub_4053B0+85↑j ...
.text:00405460                 cld
.text:00405461                 mov     esi, ebx
.text:00405463                 mov     dword ptr [ebp+14h], 0
.text:0040546A                 lea     edi, [esp+0ECh+var_9C]
.text:0040546E                 mov     ecx, 0Dh
.text:00405473                 rep movsd
.text:00405475                 xor     ebx, ebx
.text:00405477                 xor     edi, edi
.text:00405479                 mov     edx, [esp+0ECh+var_6C]
.text:00405480                 mov     esi, [esp+0ECh+var_70]
.text:00405484                 or      edx, ebx
.text:00405486                 mov     ebx, [esp+0ECh+var_9C]
.text:0040548A                 mov     [ebp+8], edx
.text:0040548D                 or      edi, esi
.text:0040548F                 xor     edx, edx
.text:00405491                 mov     [ebp+0Ch], edi
.text:00405494                 test    bl, 10h
.text:00405497                 mov     esi, [esp+0ECh+var_80]
.text:0040549B                 setz    dl
.text:0040549E                 mov     [ebp+10h], esi
.text:004054A1                 dec     edx
.text:004054A2                 and     edx, 0FFFFC000h
.text:004054A8                 add     edx, 8000h
.text:004054AE                 or      edx, 124h
.text:004054B4                 test    bl, 1
.text:004054B7                 movzx   eax, dx
.text:004054BA                 jnz     short loc_4054C1
.text:004054BC                 or      eax, 92h
.text:004054C1
.text:004054C1 loc_4054C1:                             ; CODE XREF: sub_4053B0+10A↑j
.text:004054C1                 or      [ebp+0], eax
.text:004054C4                 xor     edx, edx
.text:004054C6                 mov     ebx, [esp+0ECh+var_7C]
.text:004054CA                 mov     ecx, [esp+0ECh+var_78]
.text:004054CE                 mov     eax, edx
.text:004054D0                 xor     esi, esi
.text:004054D2                 mov     edx, [esp+0ECh+var_8C]
.text:004054D6                 mov     edi, ebx
.text:004054D8                 or      eax, edi
.text:004054DA                 mov     [esp+0ECh+var_A8], eax
.text:004054DE                 mov     ebx, ecx
.text:004054E0                 mov     edi, [esp+0ECh+var_74]
.text:004054E4                 or      ebx, esi
.text:004054E6                 mov     esi, [esp+0ECh+var_A8]
.text:004054EA                 mov     [esp+0ECh+var_AC], ebx
.text:004054EE                 xor     ebx, ebx
.text:004054F0                 mov     ecx, [esp+0ECh+var_AC]
.text:004054F4                 mov     [ebp+34h], esi
.text:004054F7                 mov     esi, [esp+0ECh+var_90]
.text:004054FB                 mov     [ebp+18h], edi
.text:004054FE                 xor     edi, edi
.text:00405500                 or      esi, ebx
.text:00405502                 mov     [ebp+30h], ecx
.text:00405505                 or      edi, edx
.text:00405507                 mov     edx, esi
.text:00405509                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405511                 sub     edx, 0D53E8000h
.text:00405517                 mov     ebx, edi
.text:00405519                 sbb     ebx, 19DB1DEh
.text:0040551F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00405523                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040552B                 mov     [esp+0ECh+hFile], edx
.text:0040552E                 call    sub_40C4B0
.text:00405533                 mov     ecx, eax
.text:00405535                 shr     eax, 1Fh
.text:00405538                 dec     eax
.text:00405539                 and     ecx, eax
.text:0040553B                 mov     [ebp+38h], ecx
.text:0040553E                 mov     [esp+0ECh+hFile], esi
.text:00405541                 mov     [esp+0ECh+lpFileInformation], edi
.text:00405545                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040554D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405555                 call    sub_40C5D0
.text:0040555A                 lea     ebx, [eax+eax*4]
.text:0040555D                 xor     ecx, ecx
.text:0040555F                 lea     esi, [ebx+ebx*4]
.text:00405562                 shl     esi, 2
.text:00405565                 mov     edi, esi
.text:00405567                 shr     edi, 1Fh
.text:0040556A                 dec     edi
.text:0040556B                 and     edi, esi
.text:0040556D                 mov     [ebp+3Ch], edi
.text:00405570                 mov     esi, [esp+0ECh+var_98]
.text:00405574                 xor     edi, edi
.text:00405576                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040557E                 mov     edx, [esp+0ECh+var_94]
.text:00405582                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040558A                 or      esi, ecx
.text:0040558C                 or      edi, edx
.text:0040558E                 mov     edx, esi
.text:00405590                 mov     ecx, edi
.text:00405592                 sub     edx, 0D53E8000h
.text:00405598                 sbb     ecx, 19DB1DEh
.text:0040559E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004055A2                 mov     [esp+0ECh+hFile], edx
.text:004055A5                 call    sub_40C4B0
.text:004055AA                 mov     ebx, eax
.text:004055AC                 shr     eax, 1Fh
.text:004055AF                 dec     eax
.text:004055B0                 and     ebx, eax
.text:004055B2                 mov     [ebp+48h], ebx
.text:004055B5                 xor     ebx, ebx
.text:004055B7                 mov     [esp+0ECh+hFile], esi
.text:004055BA                 mov     [esp+0ECh+lpFileInformation], edi
.text:004055BE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004055C6                 mov     [esp+0ECh+lpBytesRead], 0
.text:004055CE                 call    sub_40C5D0
.text:004055D3                 lea     ecx, [eax+eax*4]
.text:004055D6                 lea     esi, [ecx+ecx*4]
.text:004055D9                 shl     esi, 2
.text:004055DC                 mov     edi, esi
.text:004055DE                 shr     edi, 1Fh
.text:004055E1                 dec     edi
.text:004055E2                 and     edi, esi
.text:004055E4                 mov     [ebp+4Ch], edi
.text:004055E7                 mov     esi, [esp+0ECh+var_88]
.text:004055EB                 xor     edi, edi
.text:004055ED                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004055F5                 mov     edx, [esp+0ECh+var_84]
.text:004055F9                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405601                 or      esi, ebx
.text:00405603                 or      edi, edx
.text:00405605                 mov     edx, esi
.text:00405607                 mov     ebx, edi
.text:00405609                 sub     edx, 0D53E8000h
.text:0040560F                 sbb     ebx, 19DB1DEh
.text:00405615                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00405619                 mov     [esp+0ECh+hFile], edx
.text:0040561C                 call    sub_40C4B0
.text:00405621                 mov     ecx, eax
.text:00405623                 shr     eax, 1Fh
.text:00405626                 dec     eax
.text:00405627                 and     ecx, eax
.text:00405629                 mov     [ebp+40h], ecx
.text:0040562C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00405630                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405638                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405640                 mov     [esp+0ECh+hFile], esi
.text:00405643                 call    sub_40C5D0
.text:00405648                 mov     dword ptr [ebp+50h], 200h
.text:0040564F                 lea     ebx, [eax+eax*4]
.text:00405652                 mov     edi, [esp+0ECh+var_A8]
.text:00405656                 lea     edx, [ebx+ebx*4]
.text:00405659                 mov     eax, [esp+0ECh+var_AC]
.text:0040565D                 shl     edx, 2
.text:00405660                 mov     ecx, edx
.text:00405662                 shr     ecx, 1Fh
.text:00405665                 dec     ecx
.text:00405666                 and     ecx, edx
.text:00405668                 test    edi, edi
.text:0040566A                 mov     edx, [esp+0ECh+var_A8]
.text:0040566E                 mov     [ebp+44h], ecx
.text:00405671                 js      loc_405787
.text:00405677
.text:00405677 loc_405677:                             ; CODE XREF: sub_4053B0+3DF↓j
.text:00405677                 mov     edi, [esp+0ECh+var_AC]
.text:0040567B                 xor     esi, esi
.text:0040567D                 mov     ecx, eax
.text:0040567F                 shrd    ecx, edx, 9
.text:00405683                 mov     ebx, edx
.text:00405685                 mov     eax, esi
.text:00405687                 and     edi, 1FFh
.text:0040568D                 sar     ebx, 9
.text:00405690                 or      eax, edi
.text:00405692                 jz      short loc_40569A
.text:00405694                 add     ecx, 1
.text:00405697                 adc     ebx, 0
.text:0040569A
.text:0040569A loc_40569A:                             ; CODE XREF: sub_4053B0+2E2↑j
.text:0040569A                 mov     [ebp+5Ch], ebx
.text:0040569D                 mov     esi, dword_40E050
.text:004056A3                 xor     edi, edi
.text:004056A5                 mov     [ebp+58h], ecx
.text:004056A8                 mov     ebx, dword_40E050
.text:004056AE                 mov     ecx, [esp+0ECh+var_A8]
.text:004056B2                 mov     edx, [esp+0ECh+var_AC]
.text:004056B6                 mov     [ebp+50h], ebx
.text:004056B9                 shr     ebx, 9
.text:004056BC                 mov     [esp+0ECh+lpBytesRead], edi
.text:004056C0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004056C4                 mov     [esp+0ECh+nBufferSize], esi
.text:004056C8                 mov     [esp+0ECh+hFile], edx
.text:004056CB                 call    sub_40C4B0
.text:004056D0                 mov     [esp+0ECh+lpBytesRead], edi
.text:004056D4                 mov     ecx, [esp+0ECh+var_AC]
.text:004056D8                 mov     edi, [esp+0ECh+var_A8]
.text:004056DC                 mov     [esp+0ECh+var_BC], ebx
.text:004056E0                 mov     [esp+0ECh+var_B4], eax
.text:004056E4                 mov     [esp+0ECh+var_B0], edx
.text:004056E8                 mov     [esp+0ECh+var_B8], 0
.text:004056F0                 mov     [esp+0ECh+nBufferSize], esi
.text:004056F4                 mov     [esp+0ECh+hFile], ecx
.text:004056F7                 mov     [esp+0ECh+lpFileInformation], edi
.text:004056FB                 call    sub_40C5D0
.text:00405700                 mov     ebx, edx
.text:00405702                 or      ebx, eax
.text:00405704                 jz      short loc_405760
.text:00405706                 mov     edi, [esp+0ECh+var_B4]
.text:0040570A                 mov     esi, [esp+0ECh+var_B0]
.text:0040570E                 mov     eax, [esp+0ECh+var_BC]
.text:00405712                 mov     [esp+0ECh+var_C4], edi
.text:00405716                 mov     ecx, [esp+0ECh+var_B8]
.text:0040571A                 add     [esp+0ECh+var_C4], 1
.text:0040571F                 mov     [esp+0ECh+var_C0], esi
.text:00405723                 adc     [esp+0ECh+var_C0], 0
.text:00405728                 mul     [esp+0ECh+var_C4]
.text:0040572C                 mov     edi, [esp+0ECh+var_C0]
.text:00405730                 mov     ebx, edx
.text:00405732                 mov     edx, [esp+0ECh+var_C4]
.text:00405736                 mov     esi, eax
.text:00405738                 mov     eax, ebx
.text:0040573A                 imul    ecx, edx
.text:0040573D                 mov     edx, [esp+0ECh+var_BC]
.text:00405741                 imul    edx, edi
.text:00405744                 add     eax, ecx
.text:00405746                 lea     edi, [edx+eax]
.text:00405749
.text:00405749 loc_405749:                             ; CODE XREF: sub_4053B0+3D5↓j
.text:00405749                 mov     [ebp+58h], esi
.text:0040574C                 xor     eax, eax
.text:0040574E                 mov     [ebp+5Ch], edi
.text:00405751
.text:00405751 loc_405751:                             ; CODE XREF: sub_4053B0+20↑j
.text:00405751                 add     esp, 0DCh
.text:00405757                 pop     ebx
.text:00405758                 pop     esi
.text:00405759                 pop     edi
.text:0040575A                 pop     ebp
.text:0040575B                 retn
.text:0040575B ; ---------------------------------------------------------------------------
.text:0040575C                 align 10h
.text:00405760
.text:00405760 loc_405760:                             ; CODE XREF: sub_4053B0+354↑j
.text:00405760                 mov     eax, [esp+0ECh+var_B4]
.text:00405764                 mov     edi, [esp+0ECh+var_B8]
.text:00405768                 mov     ebx, [esp+0ECh+var_B4]
.text:0040576C                 mul     [esp+0ECh+var_BC]
.text:00405770                 mov     ecx, [esp+0ECh+var_BC]
.text:00405774                 imul    ebx, edi
.text:00405777                 mov     esi, eax
.text:00405779                 mov     eax, [esp+0ECh+var_B0]
.text:0040577D                 add     edx, ebx
.text:0040577F                 imul    ecx, eax
.text:00405782                 lea     edi, [ecx+edx]
.text:00405785                 jmp     short loc_405749
.text:00405787 ; ---------------------------------------------------------------------------
.text:00405787
.text:00405787 loc_405787:                             ; CODE XREF: sub_4053B0+2C1↑j
.text:00405787                 add     eax, 1FFh
.text:0040578C                 adc     edx, 0
.text:0040578F                 jmp     loc_405677
.text:00405794 ; ---------------------------------------------------------------------------
.text:00405794
.text:00405794 loc_405794:                             ; CODE XREF: sub_4053B0+A9↑j
.text:00405794                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00405797                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040579E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:004057A2                 call    GetFileSize
.text:004057A7                 sub     esp, 8
.text:004057AA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:004057B1                 jmp     loc_405460
.text:004057B6 ; ---------------------------------------------------------------------------
.text:004057B6
.text:004057B6 loc_4057B6:                             ; CODE XREF: sub_4053B0+96↑j
.text:004057B6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:004057BE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:004057C2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:004057CA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:004057CE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:004057D6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:004057DE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:004057E6                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:004057E9                 call    PeekNamedPipe
.text:004057EE                 sub     esp, 18h
.text:004057F1                 test    eax, eax
.text:004057F3                 jz      short loc_40580E
.text:004057F5                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:004057F9                 xor     eax, eax
.text:004057FB                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00405802                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00405809                 jmp     loc_40544C
.text:0040580E ; ---------------------------------------------------------------------------
.text:0040580E
.text:0040580E loc_40580E:                             ; CODE XREF: sub_4053B0+443↑j
.text:0040580E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00405815                 jmp     loc_40544C
.text:00405815 ; ---------------------------------------------------------------------------
.text:0040581A                 align 10h
.text:00405820
.text:00405820 loc_405820:                             ; CODE XREF: sub_4053B0+59↑j
.text:00405820                 mov     edx, 1000h
.text:00405825                 jmp     loc_40540F
.text:00405825 ; ---------------------------------------------------------------------------
.text:0040582A                 align 10h
.text:00405830
.text:00405830 loc_405830:                             ; CODE XREF: sub_4053B0+50↑j
.text:00405830                 mov     edx, 2000h
.text:00405835                 jmp     loc_40540F
.text:00405835 sub_4053B0      endp
.text:00405835
.text:00405835 ; ---------------------------------------------------------------------------
.text:0040583A aLnk            db '.lnk',0             ; DATA XREF: sub_405880+E0↓o
.text:0040583A                                         ; .text:00405F2A↓o ...
.text:0040583F ; const CHAR aKernel32[]
.text:0040583F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_405880+12D↓o
.text:0040583F                                         ; .text:004065DB↓o
.text:00405848 ; const CHAR aGetcompressedf[]
.text:00405848 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00405848                                         ; DATA XREF: sub_405880+13E↓o
.text:00405848                                         ; .text:004065EC↓o
.text:0040585F ; const CHAR aGetbinarytypea[]
.text:0040585F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_405880+333↓o
.text:0040585F                                         ; .text:00405F86↓o ...
.text:0040586E ; const char VarName[]
.text:0040586E VarName         db 'PATHEXT',0          ; DATA XREF: sub_405880:loc_405C67↓o
.text:0040586E                                         ; .text:loc_406030↓o ...
.text:00405876                 align 10h
.text:00405880
.text:00405880 ; =============== S U B R O U T I N E =======================================
.text:00405880
.text:00405880
.text:00405880 ; int __cdecl sub_405880(char *String1, int)
.text:00405880 sub_405880      proc near               ; CODE XREF: sub_406660+3CD↓p
.text:00405880                                         ; sub_405000+1B45↓p
.text:00405880
.text:00405880 Str             = dword ptr -6Ch
.text:00405880 lpProcName      = dword ptr -68h
.text:00405880 var_64          = dword ptr -64h
.text:00405880 var_60          = dword ptr -60h
.text:00405880 var_5C          = dword ptr -5Ch
.text:00405880 var_4C          = dword ptr -4Ch
.text:00405880 var_48          = dword ptr -48h
.text:00405880 var_44          = dword ptr -44h
.text:00405880 var_40          = dword ptr -40h
.text:00405880 var_3C          = dword ptr -3Ch
.text:00405880 var_38          = dword ptr -38h
.text:00405880 lpRootPathName  = dword ptr -30h
.text:00405880 var_2C          = byte ptr -2Ch
.text:00405880 var_28          = dword ptr -28h
.text:00405880 var_24          = dword ptr -24h
.text:00405880 var_20          = dword ptr -20h
.text:00405880 var_1C          = dword ptr -1Ch
.text:00405880 var_18          = byte ptr -18h
.text:00405880 String1         = dword ptr  4
.text:00405880 arg_4           = dword ptr  8
.text:00405880
.text:00405880                 push    ebp
.text:00405881                 push    edi
.text:00405882                 push    esi
.text:00405883                 push    ebx
.text:00405884                 sub     esp, 5Ch
.text:00405887                 mov     edx, [esp+6Ch+String1]
.text:0040588B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040588E                 call    sub_407110
.text:00405893                 mov     [esp+6Ch+Str], eax
.text:00405896                 call    sub_408220
.text:0040589B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040589F                 test    eax, eax
.text:004058A1                 jz      loc_405AD3
.text:004058A7                 mov     [esp+6Ch+Str], eax ; Str
.text:004058AA                 call    strlen
.text:004058AF                 mov     edx, [esp+6Ch+arg_4]
.text:004058B3                 mov     ebx, eax
.text:004058B5                 mov     esi, [edx+0Ch]
.text:004058B8                 mov     edi, [edx+8]
.text:004058BB                 mov     eax, esi
.text:004058BD                 or      eax, edi
.text:004058BF                 jz      loc_405CE0
.text:004058C5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:004058C9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:004058CC                 call    GetDriveTypeA
.text:004058D1                 sub     esp, 4
.text:004058D4                 cmp     eax, 4
.text:004058D7                 jz      loc_405CE0
.text:004058DD
.text:004058DD loc_4058DD:                             ; CODE XREF: sub_405880+48A↓j
.text:004058DD                                         ; sub_405880+4B2↓j
.text:004058DD                 mov     edx, [esp+6Ch+arg_4]
.text:004058E1                 mov     esi, [edx+14h]
.text:004058E4                 mov     edi, [edx+10h]
.text:004058E7                 mov     ecx, esi
.text:004058E9                 or      ecx, edi
.text:004058EB                 jnz     short loc_405915
.text:004058ED                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:004058F1                 xor     esi, esi
.text:004058F3                 xor     edi, edi
.text:004058F5                 test    ebp, ebp
.text:004058F7                 jz      short loc_405907
.text:004058F9                 movzx   ebx, byte ptr [ebp+0]
.text:004058FD                 test    bl, bl
.text:004058FF                 mov     cl, bl
.text:00405901                 jnz     loc_405C91
.text:00405907
.text:00405907 loc_405907:                             ; CODE XREF: sub_405880+77↑j
.text:00405907                 xor     eax, eax
.text:00405909                 xor     edx, edx
.text:0040590B
.text:0040590B loc_40590B:                             ; CODE XREF: sub_405880+458↓j
.text:0040590B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040590F                 mov     [ebp+10h], eax
.text:00405912                 mov     [ebp+14h], edx
.text:00405915
.text:00405915 loc_405915:                             ; CODE XREF: sub_405880+6B↑j
.text:00405915                 mov     edi, [esp+6Ch+String1]
.text:00405919                 xor     ebx, ebx
.text:0040591B                 test    edi, edi
.text:0040591D                 jz      loc_405B93
.text:00405923                 mov     esi, [esp+6Ch+String1]
.text:00405927                 cmp     byte ptr [esi], 0
.text:0040592A                 jnz     loc_405BA0
.text:00405930
.text:00405930 loc_405930:                             ; CODE XREF: sub_405880+38C↓j
.text:00405930                                         ; sub_405880+397↓j
.text:00405930                 mov     ebp, [esp+6Ch+String1]
.text:00405934                 test    ebp, ebp
.text:00405936                 jz      loc_405B93
.text:0040593C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00405944                 mov     edi, [esp+6Ch+String1]
.text:00405948                 mov     [esp+6Ch+Str], edi ; Str
.text:0040594B                 call    strrchr
.text:00405950                 test    eax, eax
.text:00405952                 jz      loc_405B93
.text:00405958                 cld
.text:00405959                 mov     ecx, 5
.text:0040595E                 mov     esi, eax
.text:00405960                 mov     edi, offset aLnk ; ".lnk"
.text:00405965                 repe cmpsb
.text:00405967                 setz    cl
.text:0040596A                 movzx   eax, cl
.text:0040596D                 lea     esi, [esi+0]
.text:00405970
.text:00405970 loc_405970:                             ; CODE XREF: sub_405880+315↓j
.text:00405970                 test    eax, eax
.text:00405972                 jz      short loc_40597A
.text:00405974                 or      ebx, 0A000h
.text:0040597A
.text:0040597A loc_40597A:                             ; CODE XREF: sub_405880+F2↑j
.text:0040597A                 mov     esi, [esp+6Ch+arg_4]
.text:0040597E                 xor     ecx, ecx
.text:00405980                 mov     edi, ds:dword_40F190
.text:00405986                 or      [esi], ebx
.text:00405988                 mov     ebx, [esi+14h]
.text:0040598B                 mov     ebp, [esi+10h]
.text:0040598E                 mov     eax, ebx
.text:00405990                 xor     eax, ecx
.text:00405992                 xor     ebp, edi
.text:00405994                 or      eax, ebp
.text:00405996                 jnz     loc_405B20
.text:0040599C
.text:0040599C loc_40599C:                             ; CODE XREF: sub_405880+30E↓j
.text:0040599C                 mov     ecx, dword_40E050
.text:004059A2                 xor     esi, esi
.text:004059A4                 xor     edi, edi
.text:004059A6                 mov     edx, [esp+6Ch+arg_4]
.text:004059AA                 mov     [edx+50h], ecx
.text:004059AD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:004059B4                 call    LoadLibraryA
.text:004059B9                 sub     esp, 4
.text:004059BC                 mov     ebp, eax
.text:004059BE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004059C6                 mov     [esp+6Ch+Str], eax ; hModule
.text:004059C9                 call    GetProcAddress
.text:004059CE                 sub     esp, 8
.text:004059D1                 test    eax, eax
.text:004059D3                 jz      short loc_405A08
.text:004059D5                 mov     ebx, [esp+6Ch+String1]
.text:004059D9                 lea     esi, [esp+6Ch+var_2C]
.text:004059DD                 mov     [esp+6Ch+lpProcName], esi
.text:004059E1                 mov     [esp+6Ch+Str], ebx
.text:004059E4                 call    eax
.text:004059E6                 sub     esp, 8
.text:004059E9                 mov     ebx, eax
.text:004059EB                 cmp     eax, 0FFFFFFFFh
.text:004059EE                 jz      loc_405B09
.text:004059F4
.text:004059F4 loc_4059F4:                             ; CODE XREF: sub_405880+29A↓j
.text:004059F4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:004059F8                 mov     ecx, ebx
.text:004059FA                 xor     edi, edi
.text:004059FC                 xor     ebx, ebx
.text:004059FE                 mov     edx, esi
.text:00405A00                 mov     esi, ecx
.text:00405A02                 or      esi, edi
.text:00405A04                 mov     edi, ebx
.text:00405A06                 or      edi, edx
.text:00405A08
.text:00405A08 loc_405A08:                             ; CODE XREF: sub_405880+153↑j
.text:00405A08                                         ; sub_405880+294↓j
.text:00405A08                 test    ebp, ebp
.text:00405A0A                 jz      short loc_405A17
.text:00405A0C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:00405A0F                 call    FreeLibrary
.text:00405A14                 sub     esp, 4
.text:00405A17
.text:00405A17 loc_405A17:                             ; CODE XREF: sub_405880+18A↑j
.text:00405A17                 mov     ebp, edi
.text:00405A19                 mov     edx, ebp
.text:00405A1B                 mov     edi, esi
.text:00405A1D                 or      edx, esi
.text:00405A1F                 jnz     short loc_405A2B
.text:00405A21                 mov     eax, [esp+6Ch+arg_4]
.text:00405A25                 mov     edi, [eax+30h]
.text:00405A28                 mov     ebp, [eax+34h]
.text:00405A2B
.text:00405A2B loc_405A2B:                             ; CODE XREF: sub_405880+19F↑j
.text:00405A2B                 mov     [esp+6Ch+lpProcName], ebp
.text:00405A2F                 mov     ebx, dword_40E050
.text:00405A35                 xor     esi, esi
.text:00405A37                 mov     [esp+6Ch+var_60], esi
.text:00405A3B                 mov     [esp+6Ch+Str], edi
.text:00405A3E                 mov     [esp+6Ch+var_64], ebx
.text:00405A42                 call    sub_40C4B0
.text:00405A47                 mov     [esp+6Ch+var_3C], eax
.text:00405A4B                 mov     ecx, dword_40E050
.text:00405A51                 mov     [esp+6Ch+lpProcName], ebp
.text:00405A55                 mov     [esp+6Ch+var_38], edx
.text:00405A59                 shr     ecx, 9
.text:00405A5C                 mov     [esp+6Ch+var_44], ecx
.text:00405A60                 mov     [esp+6Ch+var_40], 0
.text:00405A68                 mov     [esp+6Ch+var_64], ebx
.text:00405A6C                 mov     [esp+6Ch+var_60], esi
.text:00405A70                 mov     [esp+6Ch+Str], edi
.text:00405A73                 call    sub_40C5D0
.text:00405A78                 mov     ebp, edx
.text:00405A7A                 or      ebp, eax
.text:00405A7C                 jz      short loc_405AE0
.text:00405A7E                 mov     ebp, [esp+6Ch+var_3C]
.text:00405A82                 mov     esi, [esp+6Ch+var_38]
.text:00405A86                 mov     eax, [esp+6Ch+var_44]
.text:00405A8A                 mov     [esp+6Ch+var_4C], ebp
.text:00405A8E                 mov     ecx, [esp+6Ch+var_40]
.text:00405A92                 mov     ebx, [esp+6Ch+var_44]
.text:00405A96                 add     [esp+6Ch+var_4C], 1
.text:00405A9B                 mov     [esp+6Ch+var_48], esi
.text:00405A9F                 mov     edi, [esp+6Ch+var_4C]
.text:00405AA3                 adc     [esp+6Ch+var_48], 0
.text:00405AA8                 mul     [esp+6Ch+var_4C]
.text:00405AAC                 imul    ecx, edi
.text:00405AAF                 mov     esi, eax
.text:00405AB1                 mov     eax, [esp+6Ch+var_48]
.text:00405AB5                 add     edx, ecx
.text:00405AB7                 imul    ebx, eax
.text:00405ABA                 lea     edi, [ebx+edx]
.text:00405ABD
.text:00405ABD loc_405ABD:                             ; CODE XREF: sub_405880+287↓j
.text:00405ABD                 mov     ebx, [esp+6Ch+arg_4]
.text:00405AC1                 mov     [ebx+58h], esi
.text:00405AC4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00405AC8                 mov     [ebx+5Ch], edi
.text:00405ACB                 mov     [esp+6Ch+Str], esi ; Block
.text:00405ACE                 call    free
.text:00405AD3
.text:00405AD3 loc_405AD3:                             ; CODE XREF: sub_405880+21↑j
.text:00405AD3                 add     esp, 5Ch
.text:00405AD6                 xor     eax, eax
.text:00405AD8                 pop     ebx
.text:00405AD9                 pop     esi
.text:00405ADA                 pop     edi
.text:00405ADB                 pop     ebp
.text:00405ADC                 retn
.text:00405ADC ; ---------------------------------------------------------------------------
.text:00405ADD                 align 10h
.text:00405AE0
.text:00405AE0 loc_405AE0:                             ; CODE XREF: sub_405880+1FC↑j
.text:00405AE0                 mov     eax, [esp+6Ch+var_3C]
.text:00405AE4                 mov     edi, [esp+6Ch+var_40]
.text:00405AE8                 mov     ecx, [esp+6Ch+var_3C]
.text:00405AEC                 mul     [esp+6Ch+var_44]
.text:00405AF0                 mov     ebx, [esp+6Ch+var_44]
.text:00405AF4                 imul    ecx, edi
.text:00405AF7                 mov     ebp, edx
.text:00405AF9                 mov     esi, eax
.text:00405AFB                 mov     edx, [esp+6Ch+var_38]
.text:00405AFF                 add     ebp, ecx
.text:00405B01                 imul    ebx, edx
.text:00405B04                 lea     edi, [ebx+ebp]
.text:00405B07                 jmp     short loc_405ABD
.text:00405B09 ; ---------------------------------------------------------------------------
.text:00405B09
.text:00405B09 loc_405B09:                             ; CODE XREF: sub_405880+16E↑j
.text:00405B09                 call    GetLastError
.text:00405B0E                 xor     esi, esi
.text:00405B10                 xor     edi, edi
.text:00405B12                 test    eax, eax
.text:00405B14                 jnz     loc_405A08
.text:00405B1A                 jmp     loc_4059F4
.text:00405B1A ; ---------------------------------------------------------------------------
.text:00405B1F                 align 10h
.text:00405B20
.text:00405B20 loc_405B20:                             ; CODE XREF: sub_405880+116↑j
.text:00405B20                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00405B24                 lea     ecx, [esp+6Ch+var_20]
.text:00405B28                 lea     ebx, [esp+6Ch+var_1C]
.text:00405B2C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00405B30                 lea     edi, [esp+6Ch+var_24]
.text:00405B34                 lea     ebp, [esp+6Ch+var_28]
.text:00405B38                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:00405B3C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00405B40                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00405B44                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00405B47                 call    sub_407B30
.text:00405B4C                 test    eax, eax
.text:00405B4E                 jnz     short loc_405B70
.text:00405B50                 mov     [esp+6Ch+var_28], 1
.text:00405B58                 mov     [esp+6Ch+var_24], 200h
.text:00405B60                 mov     [esp+6Ch+var_20], 0
.text:00405B68                 mov     [esp+6Ch+var_1C], 0
.text:00405B70
.text:00405B70 loc_405B70:                             ; CODE XREF: sub_405880+2CE↑j
.text:00405B70                 mov     ebp, [esp+6Ch+var_24]
.text:00405B74                 mov     edi, [esp+6Ch+var_28]
.text:00405B78                 mov     eax, [esp+6Ch+arg_4]
.text:00405B7C                 imul    ebp, edi
.text:00405B7F                 mov     esi, [eax+10h]
.text:00405B82                 mov     dword_40E050, ebp
.text:00405B88                 mov     ds:dword_40F190, esi
.text:00405B8E                 jmp     loc_40599C
.text:00405B93 ; ---------------------------------------------------------------------------
.text:00405B93
.text:00405B93 loc_405B93:                             ; CODE XREF: sub_405880+9D↑j
.text:00405B93                                         ; sub_405880+B6↑j ...
.text:00405B93                 xor     eax, eax
.text:00405B95                 jmp     loc_405970
.text:00405B95 ; ---------------------------------------------------------------------------
.text:00405B9A                 align 10h
.text:00405BA0
.text:00405BA0 loc_405BA0:                             ; CODE XREF: sub_405880+AA↑j
.text:00405BA0                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:00405BA7                 xor     ebp, ebp
.text:00405BA9                 call    GetModuleHandleA
.text:00405BAE                 sub     esp, 4
.text:00405BB1                 mov     edi, eax
.text:00405BB3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00405BBB                 mov     [esp+6Ch+Str], eax ; hModule
.text:00405BBE                 call    GetProcAddress
.text:00405BC3                 sub     esp, 8
.text:00405BC6                 mov     edx, eax
.text:00405BC8                 test    eax, eax
.text:00405BCA                 jz      short loc_405BE4
.text:00405BCC                 mov     eax, [esp+6Ch+String1]
.text:00405BD0                 lea     ecx, [esp+6Ch+var_18]
.text:00405BD4                 mov     [esp+6Ch+lpProcName], ecx
.text:00405BD8                 mov     [esp+6Ch+Str], eax
.text:00405BDB                 call    edx
.text:00405BDD                 sub     esp, 8
.text:00405BE0                 test    eax, eax
.text:00405BE2                 jnz     short loc_405C48
.text:00405BE4
.text:00405BE4 loc_405BE4:                             ; CODE XREF: sub_405880+34A↑j
.text:00405BE4                 mov     edx, ds:Str
.text:00405BEA                 test    edx, edx
.text:00405BEC                 jz      short loc_405C67
.text:00405BEE
.text:00405BEE loc_405BEE:                             ; CODE XREF: sub_405880+3FA↓j
.text:00405BEE                                         ; sub_405880+40C↓j
.text:00405BEE                 mov     eax, [esp+6Ch+String1]
.text:00405BF2                 test    eax, eax
.text:00405BF4                 jz      short loc_405BFF
.text:00405BF6                 mov     esi, [esp+6Ch+String1]
.text:00405BFA                 cmp     byte ptr [esi], 0
.text:00405BFD                 jnz     short loc_405C1C
.text:00405BFF
.text:00405BFF loc_405BFF:                             ; CODE XREF: sub_405880+374↑j
.text:00405BFF                                         ; sub_405880+3B0↓j ...
.text:00405BFF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00405C02                 call    FreeLibrary
.text:00405C07                 sub     esp, 4
.text:00405C0A                 test    ebp, ebp
.text:00405C0C                 jz      loc_405930
.text:00405C12                 mov     ebx, 49h ; 'I'
.text:00405C17                 jmp     loc_405930
.text:00405C1C ; ---------------------------------------------------------------------------
.text:00405C1C
.text:00405C1C loc_405C1C:                             ; CODE XREF: sub_405880+37D↑j
.text:00405C1C                 mov     [esp+6Ch+Str], esi ; Str
.text:00405C1F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00405C27                 call    strrchr
.text:00405C2C                 test    eax, eax
.text:00405C2E                 mov     esi, eax
.text:00405C30                 jz      short loc_405BFF
.text:00405C32                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00405C36                 mov     ecx, ds:Str
.text:00405C3C                 mov     [esp+6Ch+Str], ecx ; Str
.text:00405C3F                 call    strstr
.text:00405C44                 test    eax, eax
.text:00405C46                 jz      short loc_405C4F
.text:00405C48
.text:00405C48 loc_405C48:                             ; CODE XREF: sub_405880+362↑j
.text:00405C48                                         ; sub_405880+3E5↓j
.text:00405C48                 mov     ebp, 1
.text:00405C4D                 jmp     short loc_405BFF
.text:00405C4F ; ---------------------------------------------------------------------------
.text:00405C4F
.text:00405C4F loc_405C4F:                             ; CODE XREF: sub_405880+3C6↑j
.text:00405C4F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00405C53                 mov     edx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:00405C59                 mov     [esp+6Ch+Str], edx ; Str
.text:00405C5C                 call    strstr
.text:00405C61                 test    eax, eax
.text:00405C63                 jz      short loc_405BFF
.text:00405C65                 jmp     short loc_405C48
.text:00405C67 ; ---------------------------------------------------------------------------
.text:00405C67
.text:00405C67 loc_405C67:                             ; CODE XREF: sub_405880+36C↑j
.text:00405C67                 mov     [esp+6Ch+Str], offset VarName ; "PATHEXT"
.text:00405C6E                 call    getenv
.text:00405C73                 mov     ds:Str, eax
.text:00405C78                 test    eax, eax
.text:00405C7A                 jnz     loc_405BEE
.text:00405C80                 mov     esi, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:00405C86                 mov     ds:Str, esi
.text:00405C8C                 jmp     loc_405BEE
.text:00405C91 ; ---------------------------------------------------------------------------
.text:00405C91
.text:00405C91 loc_405C91:                             ; CODE XREF: sub_405880+81↑j
.text:00405C91                                         ; sub_405880+452↓j
.text:00405C91                 shld    edi, esi, 8
.text:00405C95                 movsx   eax, cl
.text:00405C98                 shl     esi, 8
.text:00405C9B                 cdq
.text:00405C9C                 add     esi, eax
.text:00405C9E                 adc     edi, edx
.text:00405CA0                 mov     edx, edi
.text:00405CA2                 xor     ebx, ebx
.text:00405CA4                 and     edx, 0FF000000h
.text:00405CAA                 mov     eax, edx
.text:00405CAC                 or      eax, ebx
.text:00405CAE                 jz      short loc_405CC9
.text:00405CB0                 mov     ecx, edx
.text:00405CB2                 xor     eax, eax
.text:00405CB4                 shr     ecx, 10h
.text:00405CB7                 mov     edx, esi
.text:00405CB9                 xor     edx, ecx
.text:00405CBB                 mov     ecx, edi
.text:00405CBD                 xor     ecx, eax
.text:00405CBF                 mov     esi, edx
.text:00405CC1                 mov     edi, ecx
.text:00405CC3                 and     edi, 0FFFFFFh
.text:00405CC9
.text:00405CC9 loc_405CC9:                             ; CODE XREF: sub_405880+42E↑j
.text:00405CC9                 inc     ebp
.text:00405CCA                 movzx   ebx, byte ptr [ebp+0]
.text:00405CCE                 test    bl, bl
.text:00405CD0                 mov     cl, bl
.text:00405CD2                 jnz     short loc_405C91
.text:00405CD4                 mov     eax, esi
.text:00405CD6                 mov     edx, edi
.text:00405CD8                 jmp     loc_40590B
.text:00405CD8 ; ---------------------------------------------------------------------------
.text:00405CDD                 align 10h
.text:00405CE0
.text:00405CE0 loc_405CE0:                             ; CODE XREF: sub_405880+3F↑j
.text:00405CE0                                         ; sub_405880+57↑j
.text:00405CE0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00405CE4                 mov     ebp, [esp+6Ch+String1]
.text:00405CE8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:00405CEC                 mov     [esp+6Ch+Str], ebp ; String1
.text:00405CEF                 call    _stricmp
.text:00405CF4                 test    eax, eax
.text:00405CF6                 jnz     short loc_405D10
.text:00405CF8                 mov     ebx, [esp+6Ch+arg_4]
.text:00405CFC                 mov     dword ptr [ebx+8], 5
.text:00405D03                 mov     dword ptr [ebx+0Ch], 50000h
.text:00405D0A                 jmp     loc_4058DD
.text:00405D0A ; ---------------------------------------------------------------------------
.text:00405D0F                 align 10h
.text:00405D10
.text:00405D10 loc_405D10:                             ; CODE XREF: sub_405880+476↑j
.text:00405D10                 mov     ebp, [esp+6Ch+String1]
.text:00405D14                 xor     esi, esi
.text:00405D16                 xor     edi, edi
.text:00405D18                 add     ebp, ebx
.text:00405D1A                 jz      short loc_405D24
.text:00405D1C                 movzx   ecx, byte ptr [ebp+0]
.text:00405D20                 test    cl, cl
.text:00405D22                 jnz     short loc_405D37
.text:00405D24
.text:00405D24 loc_405D24:                             ; CODE XREF: sub_405880+49A↑j
.text:00405D24                 xor     eax, eax
.text:00405D26                 xor     edx, edx
.text:00405D28
.text:00405D28 loc_405D28:                             ; CODE XREF: sub_405880+4FE↓j
.text:00405D28                 mov     ebp, [esp+6Ch+arg_4]
.text:00405D2C                 mov     [ebp+8], eax
.text:00405D2F                 mov     [ebp+0Ch], edx
.text:00405D32                 jmp     loc_4058DD
.text:00405D37 ; ---------------------------------------------------------------------------
.text:00405D37
.text:00405D37 loc_405D37:                             ; CODE XREF: sub_405880+4A2↑j
.text:00405D37                                         ; sub_405880+4F8↓j
.text:00405D37                 shld    edi, esi, 8
.text:00405D3B                 movsx   eax, cl
.text:00405D3E                 shl     esi, 8
.text:00405D41                 cdq
.text:00405D42                 add     esi, eax
.text:00405D44                 adc     edi, edx
.text:00405D46                 mov     edx, edi
.text:00405D48                 xor     ebx, ebx
.text:00405D4A                 and     edx, 0FF000000h
.text:00405D50                 mov     eax, edx
.text:00405D52                 or      eax, ebx
.text:00405D54                 jz      short loc_405D6F
.text:00405D56                 mov     ecx, edx
.text:00405D58                 xor     eax, eax
.text:00405D5A                 shr     ecx, 10h
.text:00405D5D                 mov     edx, esi
.text:00405D5F                 xor     edx, ecx
.text:00405D61                 mov     ecx, edi
.text:00405D63                 xor     ecx, eax
.text:00405D65                 mov     esi, edx
.text:00405D67                 mov     edi, ecx
.text:00405D69                 and     edi, 0FFFFFFh
.text:00405D6F
.text:00405D6F loc_405D6F:                             ; CODE XREF: sub_405880+4D4↑j
.text:00405D6F                 inc     ebp
.text:00405D70                 movzx   ebx, byte ptr [ebp+0]
.text:00405D74                 test    bl, bl
.text:00405D76                 mov     cl, bl
.text:00405D78                 jnz     short loc_405D37
.text:00405D7A                 mov     eax, esi
.text:00405D7C                 mov     edx, edi
.text:00405D7E                 jmp     short loc_405D28
.text:00405D7E sub_405880      endp
.text:00405D7E
.text:00405D80
.text:00405D80 ; =============== S U B R O U T I N E =======================================
.text:00405D80
.text:00405D80
.text:00405D80 ; int __cdecl sub_405D80(LPCSTR)
.text:00405D80 sub_405D80      proc near               ; CODE XREF: sub_407230+CA↓p
.text:00405D80
.text:00405D80 lpRootPathName  = dword ptr -83Ch
.text:00405D80 lpVolumeNameBuffer= dword ptr -838h
.text:00405D80 nVolumeNameSize = dword ptr -834h
.text:00405D80 lpVolumeSerialNumber= dword ptr -830h
.text:00405D80 lpMaximumComponentLength= dword ptr -82Ch
.text:00405D80 lpFileSystemFlags= dword ptr -828h
.text:00405D80 lpFileSystemNameBuffer= dword ptr -824h
.text:00405D80 nFileSystemNameSize= dword ptr -820h
.text:00405D80 VolumeSerialNumber= dword ptr -818h
.text:00405D80 MaximumComponentLength= dword ptr -814h
.text:00405D80 FileSystemFlags = dword ptr -810h
.text:00405D80 FileSystemNameBuffer= byte ptr -80Ch
.text:00405D80 VolumeNameBuffer= byte ptr -40Ch
.text:00405D80 var_4           = dword ptr -4
.text:00405D80 arg_0           = dword ptr  4
.text:00405D80
.text:00405D80                 sub     esp, 83Ch
.text:00405D86                 mov     [esp+83Ch+var_4], ebx
.text:00405D8D                 mov     ebx, [esp+83Ch+arg_0]
.text:00405D94                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00405D97                 call    sub_407110
.text:00405D9C                 mov     [esp+83Ch+lpRootPathName], eax
.text:00405D9F                 call    sub_408220
.text:00405DA4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:00405DA7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:00405DAB                 mov     ebx, eax
.text:00405DAD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:00405DB1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:00405DB5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:00405DB9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:00405DBD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00405DC1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00405DC5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:00405DCC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00405DD0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00405DD4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00405DDC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00405DE4                 call    GetVolumeInformationA
.text:00405DE9                 sub     esp, 20h
.text:00405DEC                 test    eax, eax
.text:00405DEE                 setz    cl
.text:00405DF1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00405DF4                 movzx   edx, cl
.text:00405DF7                 dec     edx
.text:00405DF8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:00405DFC                 call    free
.text:00405E01                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00405E05                 mov     ebx, [esp+83Ch+var_4]
.text:00405E0C                 add     esp, 83Ch
.text:00405E12                 retn
.text:00405E12 sub_405D80      endp
.text:00405E12
.text:00405E12 ; ---------------------------------------------------------------------------
.text:00405E13                 align 10h
.text:00405E20                 push    ebp
.text:00405E21                 push    edi
.text:00405E22                 xor     edi, edi
.text:00405E24                 push    esi
.text:00405E25                 xor     esi, esi
.text:00405E27                 push    ebx
.text:00405E28                 mov     ebp, [esp+14h]
.text:00405E2C                 test    ebp, ebp
.text:00405E2E                 jz      short loc_405E38
.text:00405E30                 movzx   ecx, byte ptr [ebp+0]
.text:00405E34                 test    cl, cl
.text:00405E36                 jnz     short loc_405E41
.text:00405E38
.text:00405E38 loc_405E38:                             ; CODE XREF: .text:00405E2E↑j
.text:00405E38                 xor     eax, eax
.text:00405E3A                 xor     edx, edx
.text:00405E3C
.text:00405E3C loc_405E3C:                             ; CODE XREF: .text:00405E88↓j
.text:00405E3C                 pop     ebx
.text:00405E3D                 pop     esi
.text:00405E3E                 pop     edi
.text:00405E3F                 pop     ebp
.text:00405E40                 retn
.text:00405E41 ; ---------------------------------------------------------------------------
.text:00405E41
.text:00405E41 loc_405E41:                             ; CODE XREF: .text:00405E36↑j
.text:00405E41                                         ; .text:00405E82↓j
.text:00405E41                 shld    edi, esi, 8
.text:00405E45                 movsx   eax, cl
.text:00405E48                 shl     esi, 8
.text:00405E4B                 cdq
.text:00405E4C                 add     esi, eax
.text:00405E4E                 adc     edi, edx
.text:00405E50                 mov     edx, edi
.text:00405E52                 xor     ebx, ebx
.text:00405E54                 and     edx, 0FF000000h
.text:00405E5A                 mov     eax, edx
.text:00405E5C                 or      eax, ebx
.text:00405E5E                 jz      short loc_405E79
.text:00405E60                 mov     ecx, edx
.text:00405E62                 xor     eax, eax
.text:00405E64                 shr     ecx, 10h
.text:00405E67                 mov     edx, esi
.text:00405E69                 xor     edx, ecx
.text:00405E6B                 mov     ecx, edi
.text:00405E6D                 xor     ecx, eax
.text:00405E6F                 mov     esi, edx
.text:00405E71                 mov     edi, ecx
.text:00405E73                 and     edi, 0FFFFFFh
.text:00405E79
.text:00405E79 loc_405E79:                             ; CODE XREF: .text:00405E5E↑j
.text:00405E79                 inc     ebp
.text:00405E7A                 movzx   ebx, byte ptr [ebp+0]
.text:00405E7E                 test    bl, bl
.text:00405E80                 mov     cl, bl
.text:00405E82                 jnz     short loc_405E41
.text:00405E84                 mov     eax, esi
.text:00405E86                 mov     edx, edi
.text:00405E88                 jmp     short loc_405E3C
.text:00405E88 ; ---------------------------------------------------------------------------
.text:00405E8A                 align 10h
.text:00405E90                 sub     esp, 2Ch
.text:00405E93                 lea     edx, [esp+24h]
.text:00405E97                 lea     ecx, [esp+28h]
.text:00405E9B                 mov     [esp+0Ch], edx
.text:00405E9F                 lea     edx, [esp+1Ch]
.text:00405EA3                 mov     [esp+4], edx
.text:00405EA7                 mov     edx, [esp+30h]
.text:00405EAB                 mov     [esp+10h], ecx
.text:00405EAF                 lea     ecx, [esp+20h]
.text:00405EB3                 mov     [esp+8], ecx
.text:00405EB7                 mov     [esp], edx
.text:00405EBA                 call    sub_407B30
.text:00405EBF                 test    eax, eax
.text:00405EC1                 jnz     short loc_405EE3
.text:00405EC3                 mov     dword ptr [esp+1Ch], 1
.text:00405ECB                 mov     dword ptr [esp+20h], 200h
.text:00405ED3                 mov     dword ptr [esp+24h], 0
.text:00405EDB                 mov     dword ptr [esp+28h], 0
.text:00405EE3
.text:00405EE3 loc_405EE3:                             ; CODE XREF: .text:00405EC1↑j
.text:00405EE3                 mov     eax, [esp+20h]
.text:00405EE7                 mov     ecx, [esp+1Ch]
.text:00405EEB                 add     esp, 2Ch
.text:00405EEE                 imul    eax, ecx
.text:00405EF1                 retn
.text:00405EF1 ; ---------------------------------------------------------------------------
.text:00405EF2                 align 10h
.text:00405F00                 sub     esp, 1Ch
.text:00405F03                 mov     eax, [esp+20h]
.text:00405F07                 mov     [esp+14h], esi
.text:00405F0B                 mov     [esp+18h], edi
.text:00405F0F                 test    eax, eax
.text:00405F11                 jz      short loc_405F50
.text:00405F13                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00405F1B                 mov     [esp], eax
.text:00405F1E                 call    strrchr
.text:00405F23                 test    eax, eax
.text:00405F25                 jz      short loc_405F50
.text:00405F27                 cld
.text:00405F28                 mov     esi, eax
.text:00405F2A                 mov     edi, offset aLnk ; ".lnk"
.text:00405F2F                 mov     ecx, 5
.text:00405F34                 repe cmpsb
.text:00405F36                 setz    dl
.text:00405F39                 movzx   eax, dl
.text:00405F3C                 lea     esi, [esi+0]
.text:00405F40
.text:00405F40 loc_405F40:                             ; CODE XREF: .text:00405F52↓j
.text:00405F40                 mov     esi, [esp+14h]
.text:00405F44                 mov     edi, [esp+18h]
.text:00405F48                 add     esp, 1Ch
.text:00405F4B                 retn
.text:00405F4B ; ---------------------------------------------------------------------------
.text:00405F4C                 align 10h
.text:00405F50
.text:00405F50 loc_405F50:                             ; CODE XREF: .text:00405F11↑j
.text:00405F50                                         ; .text:00405F25↑j
.text:00405F50                 xor     eax, eax
.text:00405F52                 jmp     short loc_405F40
.text:00405F52 ; ---------------------------------------------------------------------------
.text:00405F54                 align 10h
.text:00405F60                 sub     esp, 1Ch
.text:00405F63                 mov     [esp+10h], ebx
.text:00405F67                 mov     ebx, [esp+20h]
.text:00405F6B                 mov     [esp+14h], esi
.text:00405F6F                 mov     [esp+18h], edi
.text:00405F73                 xor     edi, edi
.text:00405F75                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:00405F7C                 call    GetModuleHandleA
.text:00405F81                 sub     esp, 4
.text:00405F84                 mov     esi, eax
.text:00405F86                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00405F8E                 mov     [esp], eax
.text:00405F91                 call    GetProcAddress
.text:00405F96                 sub     esp, 8
.text:00405F99                 test    eax, eax
.text:00405F9B                 jz      short loc_405FB1
.text:00405F9D                 mov     [esp], ebx
.text:00405FA0                 lea     ecx, [esp+0Ch]
.text:00405FA4                 mov     [esp+4], ecx
.text:00405FA8                 call    eax
.text:00405FAA                 sub     esp, 8
.text:00405FAD                 test    eax, eax
.text:00405FAF                 jnz     short loc_406010
.text:00405FB1
.text:00405FB1 loc_405FB1:                             ; CODE XREF: .text:00405F9B↑j
.text:00405FB1                 mov     eax, ds:Str
.text:00405FB6                 test    eax, eax
.text:00405FB8                 jz      short loc_406030
.text:00405FBA
.text:00405FBA loc_405FBA:                             ; CODE XREF: .text:00406043↓j
.text:00405FBA                                         ; .text:00406055↓j
.text:00405FBA                 test    ebx, ebx
.text:00405FBC                 jz      short loc_405FC3
.text:00405FBE                 cmp     byte ptr [ebx], 0
.text:00405FC1                 jnz     short loc_405FE0
.text:00405FC3
.text:00405FC3 loc_405FC3:                             ; CODE XREF: .text:00405FBC↑j
.text:00405FC3                                         ; .text:00405FF4↓j ...
.text:00405FC3                 mov     [esp], esi
.text:00405FC6                 call    FreeLibrary
.text:00405FCB                 sub     esp, 4
.text:00405FCE                 mov     eax, edi
.text:00405FD0                 mov     ebx, [esp+10h]
.text:00405FD4                 mov     esi, [esp+14h]
.text:00405FD8                 mov     edi, [esp+18h]
.text:00405FDC                 add     esp, 1Ch
.text:00405FDF                 retn
.text:00405FE0 ; ---------------------------------------------------------------------------
.text:00405FE0
.text:00405FE0 loc_405FE0:                             ; CODE XREF: .text:00405FC1↑j
.text:00405FE0                 mov     [esp], ebx
.text:00405FE3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00405FEB                 call    strrchr
.text:00405FF0                 test    eax, eax
.text:00405FF2                 mov     ebx, eax
.text:00405FF4                 jz      short loc_405FC3
.text:00405FF6                 mov     [esp+4], eax
.text:00405FFA                 mov     ecx, ds:Str
.text:00406000                 mov     [esp], ecx
.text:00406003                 call    strstr
.text:00406008                 test    eax, eax
.text:0040600A                 jz      short loc_406017
.text:0040600C                 lea     esi, [esi+0]
.text:00406010
.text:00406010 loc_406010:                             ; CODE XREF: .text:00405FAF↑j
.text:00406010                                         ; .text:0040602D↓j
.text:00406010                 mov     edi, 1
.text:00406015                 jmp     short loc_405FC3
.text:00406017 ; ---------------------------------------------------------------------------
.text:00406017
.text:00406017 loc_406017:                             ; CODE XREF: .text:0040600A↑j
.text:00406017                 mov     [esp+4], ebx
.text:0040601B                 mov     ebx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:00406021                 mov     [esp], ebx
.text:00406024                 call    strstr
.text:00406029                 test    eax, eax
.text:0040602B                 jz      short loc_405FC3
.text:0040602D                 jmp     short loc_406010
.text:0040602D ; ---------------------------------------------------------------------------
.text:0040602F                 align 10h
.text:00406030
.text:00406030 loc_406030:                             ; CODE XREF: .text:00405FB8↑j
.text:00406030                 mov     dword ptr [esp], offset VarName ; "PATHEXT"
.text:00406037                 call    getenv
.text:0040603C                 mov     ds:Str, eax
.text:00406041                 test    eax, eax
.text:00406043                 jnz     loc_405FBA
.text:00406049                 mov     edx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:0040604F                 mov     ds:Str, edx
.text:00406055                 jmp     loc_405FBA
.text:00406055 ; ---------------------------------------------------------------------------
.text:0040605A                 align 10h
.text:00406060                 sub     esp, 0Ch
.text:00406063                 mov     edx, [esp+10h]
.text:00406067                 mov     [esp], edx
.text:0040606A                 call    GetFileType
.text:0040606F                 sub     esp, 4
.text:00406072                 xor     edx, edx
.text:00406074                 cmp     eax, 2
.text:00406077                 jz      short loc_406090
.text:00406079                 cmp     eax, 3
.text:0040607C                 jz      short loc_406084
.text:0040607E
.text:0040607E loc_40607E:                             ; CODE XREF: .text:00406089↓j
.text:0040607E                                         ; .text:00406095↓j
.text:0040607E                 mov     eax, edx
.text:00406080                 add     esp, 0Ch
.text:00406083                 retn
.text:00406084 ; ---------------------------------------------------------------------------
.text:00406084
.text:00406084 loc_406084:                             ; CODE XREF: .text:0040607C↑j
.text:00406084                 mov     edx, 1000h
.text:00406089                 jmp     short loc_40607E
.text:00406089 ; ---------------------------------------------------------------------------
.text:0040608B                 align 10h
.text:00406090
.text:00406090 loc_406090:                             ; CODE XREF: .text:00406077↑j
.text:00406090                 mov     edx, 2000h
.text:00406095                 jmp     short loc_40607E
.text:00406095 ; ---------------------------------------------------------------------------
.text:00406097                 align 10h
.text:004060A0                 mov     ecx, [esp+4]
.text:004060A4                 xor     edx, edx
.text:004060A6                 test    cl, 10h
.text:004060A9                 setz    dl
.text:004060AC                 dec     edx
.text:004060AD                 and     edx, 0FFFFC000h
.text:004060B3                 add     edx, 8000h
.text:004060B9                 or      edx, 124h
.text:004060BF                 test    cl, 1
.text:004060C2                 movzx   eax, dx
.text:004060C5                 jnz     short locret_4060CC
.text:004060C7                 or      eax, 92h
.text:004060CC
.text:004060CC locret_4060CC:                          ; CODE XREF: .text:004060C5↑j
.text:004060CC                 retn
.text:004060CC ; ---------------------------------------------------------------------------
.text:004060CD                 align 10h
.text:004060D0                 sub     esp, 2Ch
.text:004060D3                 mov     [esp+20h], esi
.text:004060D7                 mov     esi, [esp+30h]
.text:004060DB                 mov     [esp+1Ch], ebx
.text:004060DF                 xor     ebx, ebx
.text:004060E1                 test    esi, esi
.text:004060E3                 mov     [esp+24h], edi
.text:004060E7                 mov     [esp+28h], ebp
.text:004060EB                 jz      short loc_406140
.text:004060ED                 cmp     byte ptr [esi], 0
.text:004060F0                 jnz     short loc_406144
.text:004060F2
.text:004060F2 loc_4060F2:                             ; CODE XREF: .text:004061AC↓j
.text:004060F2                                         ; .text:004061B7↓j
.text:004060F2                 test    esi, esi
.text:004060F4                 jz      short loc_406140
.text:004060F6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004060FE                 mov     [esp], esi
.text:00406101                 call    strrchr
.text:00406106                 test    eax, eax
.text:00406108                 jz      short loc_406140
.text:0040610A                 cld
.text:0040610B                 mov     ecx, 5
.text:00406110                 mov     esi, eax
.text:00406112                 mov     edi, offset aLnk ; ".lnk"
.text:00406117                 repe cmpsb
.text:00406119                 setz    cl
.text:0040611C                 movzx   eax, cl
.text:0040611F                 nop
.text:00406120
.text:00406120 loc_406120:                             ; CODE XREF: .text:00406142↓j
.text:00406120                 test    eax, eax
.text:00406122                 jz      short loc_40612A
.text:00406124                 or      ebx, 0A000h
.text:0040612A
.text:0040612A loc_40612A:                             ; CODE XREF: .text:00406122↑j
.text:0040612A                 mov     eax, ebx
.text:0040612C                 mov     esi, [esp+20h]
.text:00406130                 mov     ebx, [esp+1Ch]
.text:00406134                 mov     edi, [esp+24h]
.text:00406138                 mov     ebp, [esp+28h]
.text:0040613C                 add     esp, 2Ch
.text:0040613F                 retn
.text:00406140 ; ---------------------------------------------------------------------------
.text:00406140
.text:00406140 loc_406140:                             ; CODE XREF: .text:004060EB↑j
.text:00406140                                         ; .text:004060F4↑j ...
.text:00406140                 xor     eax, eax
.text:00406142                 jmp     short loc_406120
.text:00406144 ; ---------------------------------------------------------------------------
.text:00406144
.text:00406144 loc_406144:                             ; CODE XREF: .text:004060F0↑j
.text:00406144                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040614B                 call    GetModuleHandleA
.text:00406150                 sub     esp, 4
.text:00406153                 mov     ebp, eax
.text:00406155                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040615D                 mov     [esp], eax
.text:00406160                 call    GetProcAddress
.text:00406165                 sub     esp, 8
.text:00406168                 test    eax, eax
.text:0040616A                 mov     dword ptr [esp+14h], 0
.text:00406172                 jz      short loc_406188
.text:00406174                 mov     [esp], esi
.text:00406177                 lea     ecx, [esp+18h]
.text:0040617B                 mov     [esp+4], ecx
.text:0040617F                 call    eax
.text:00406181                 sub     esp, 8
.text:00406184                 test    eax, eax
.text:00406186                 jnz     short loc_4061E8
.text:00406188
.text:00406188 loc_406188:                             ; CODE XREF: .text:00406172↑j
.text:00406188                 mov     edx, ds:Str
.text:0040618E                 test    edx, edx
.text:00406190                 jz      short loc_406210
.text:00406192
.text:00406192 loc_406192:                             ; CODE XREF: .text:00406223↓j
.text:00406192                                         ; .text:00406235↓j
.text:00406192                 test    esi, esi
.text:00406194                 jz      short loc_40619B
.text:00406196                 cmp     byte ptr [esi], 0
.text:00406199                 jnz     short loc_4061BC
.text:0040619B
.text:0040619B loc_40619B:                             ; CODE XREF: .text:00406194↑j
.text:0040619B                                         ; .text:004061D0↓j ...
.text:0040619B                 mov     [esp], ebp
.text:0040619E                 call    FreeLibrary
.text:004061A3                 sub     esp, 4
.text:004061A6                 mov     eax, [esp+14h]
.text:004061AA                 test    eax, eax
.text:004061AC                 jz      loc_4060F2
.text:004061B2                 mov     ebx, 49h ; 'I'
.text:004061B7                 jmp     loc_4060F2
.text:004061BC ; ---------------------------------------------------------------------------
.text:004061BC
.text:004061BC loc_4061BC:                             ; CODE XREF: .text:00406199↑j
.text:004061BC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004061C4                 mov     [esp], esi
.text:004061C7                 call    strrchr
.text:004061CC                 test    eax, eax
.text:004061CE                 mov     edi, eax
.text:004061D0                 jz      short loc_40619B
.text:004061D2                 mov     [esp+4], eax
.text:004061D6                 mov     edx, ds:Str
.text:004061DC                 mov     [esp], edx
.text:004061DF                 call    strstr
.text:004061E4                 test    eax, eax
.text:004061E6                 jz      short loc_4061F2
.text:004061E8
.text:004061E8 loc_4061E8:                             ; CODE XREF: .text:00406186↑j
.text:004061E8                                         ; .text:00406208↓j
.text:004061E8                 mov     dword ptr [esp+14h], 1
.text:004061F0                 jmp     short loc_40619B
.text:004061F2 ; ---------------------------------------------------------------------------
.text:004061F2
.text:004061F2 loc_4061F2:                             ; CODE XREF: .text:004061E6↑j
.text:004061F2                 mov     [esp+4], edi
.text:004061F6                 mov     edi, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:004061FC                 mov     [esp], edi
.text:004061FF                 call    strstr
.text:00406204                 test    eax, eax
.text:00406206                 jz      short loc_40619B
.text:00406208                 jmp     short loc_4061E8
.text:00406208 ; ---------------------------------------------------------------------------
.text:0040620A                 align 10h
.text:00406210
.text:00406210 loc_406210:                             ; CODE XREF: .text:00406190↑j
.text:00406210                 mov     dword ptr [esp], offset VarName ; "PATHEXT"
.text:00406217                 call    getenv
.text:0040621C                 mov     ds:Str, eax
.text:00406221                 test    eax, eax
.text:00406223                 jnz     loc_406192
.text:00406229                 mov     ecx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:0040622F                 mov     ds:Str, ecx
.text:00406235                 jmp     loc_406192
.text:00406235 ; ---------------------------------------------------------------------------
.text:0040623A                 align 10h
.text:00406240                 push    esi
.text:00406241                 push    ebx
.text:00406242                 sub     esp, 864h
.text:00406248                 mov     ebx, [esp+870h]
.text:0040624F                 lea     edx, [esp+830h]
.text:00406256                 mov     esi, [esp+874h]
.text:0040625D                 mov     [esp+4], edx
.text:00406261                 mov     [esp], ebx
.text:00406264                 call    sub_4050C0
.text:00406269                 xor     edx, edx
.text:0040626B                 test    eax, eax
.text:0040626D                 jz      loc_406355
.text:00406273                 mov     ecx, [esp+830h]
.text:0040627A                 test    cl, 10h
.text:0040627D                 mov     [esi], ecx
.text:0040627F                 mov     eax, [esp+834h]
.text:00406286                 mov     edx, [esp+838h]
.text:0040628D                 mov     [esi+4], eax
.text:00406290                 mov     [esi+8], edx
.text:00406293                 mov     eax, [esp+83Ch]
.text:0040629A                 mov     edx, [esp+840h]
.text:004062A1                 mov     [esi+0Ch], eax
.text:004062A4                 mov     [esi+10h], edx
.text:004062A7                 mov     edx, [esp+848h]
.text:004062AE                 mov     eax, [esp+844h]
.text:004062B5                 mov     [esi+18h], edx
.text:004062B8                 mov     [esi+14h], eax
.text:004062BB                 mov     edx, [esp+84Ch]
.text:004062C2                 mov     [esi+20h], edx
.text:004062C5                 mov     edx, [esp+850h]
.text:004062CC                 mov     [esi+24h], edx
.text:004062CF                 jnz     loc_406360
.text:004062D5                 mov     dword ptr [esi+28h], 1
.text:004062DC
.text:004062DC loc_4062DC:                             ; CODE XREF: .text:0040636B↓j
.text:004062DC                 mov     [esp], ebx
.text:004062DF                 call    sub_407110
.text:004062E4                 mov     [esp], eax
.text:004062E7                 call    sub_408220
.text:004062EC                 mov     [esp], eax
.text:004062EF                 lea     edx, [esp+30h]
.text:004062F3                 mov     ebx, eax
.text:004062F5                 mov     [esp+18h], edx
.text:004062F9                 lea     ecx, [esp+2Ch]
.text:004062FD                 lea     edx, [esp+28h]
.text:00406301                 mov     [esp+14h], ecx
.text:00406305                 lea     ecx, [esp+24h]
.text:00406309                 mov     [esp+10h], edx
.text:0040630D                 lea     edx, [esp+430h]
.text:00406314                 mov     [esp+0Ch], ecx
.text:00406318                 mov     [esp+4], edx
.text:0040631C                 mov     dword ptr [esp+1Ch], 400h
.text:00406324                 mov     dword ptr [esp+8], 400h
.text:0040632C                 call    GetVolumeInformationA
.text:00406331                 sub     esp, 20h
.text:00406334                 test    eax, eax
.text:00406336                 setz    cl
.text:00406339                 mov     [esp], ebx
.text:0040633C                 movzx   edx, cl
.text:0040633F                 dec     edx
.text:00406340                 and     [esp+24h], edx
.text:00406344                 call    free
.text:00406349                 mov     ecx, [esp+24h]
.text:0040634D                 mov     edx, 1
.text:00406352                 mov     [esi+1Ch], ecx
.text:00406355
.text:00406355 loc_406355:                             ; CODE XREF: .text:0040626D↑j
.text:00406355                 add     esp, 864h
.text:0040635B                 mov     eax, edx
.text:0040635D                 pop     ebx
.text:0040635E                 pop     esi
.text:0040635F                 retn
.text:00406360 ; ---------------------------------------------------------------------------
.text:00406360
.text:00406360 loc_406360:                             ; CODE XREF: .text:004062CF↑j
.text:00406360                 mov     [esp], ebx
.text:00406363                 call    sub_405230
.text:00406368                 mov     [esi+28h], eax
.text:0040636B                 jmp     loc_4062DC
.text:00406370 ; ---------------------------------------------------------------------------
.text:00406370                 push    ebp
.text:00406371                 xor     edx, edx
.text:00406373                 push    edi
.text:00406374                 push    esi
.text:00406375                 xor     esi, esi
.text:00406377                 push    ebx
.text:00406378                 sub     esp, 1Ch
.text:0040637B                 mov     ebx, [esp+5Ch]
.text:0040637F                 mov     ecx, [esp+30h]
.text:00406383                 mov     edi, [esp+60h]
.text:00406387                 or      esi, ebx
.text:00406389                 mov     eax, [esp+4Ch]
.text:0040638D                 or      edi, edx
.text:0040638F                 mov     ebx, [esp+64h]
.text:00406393                 xor     edx, edx
.text:00406395                 test    cl, 10h
.text:00406398                 setz    dl
.text:0040639B                 mov     [ebx+10h], eax
.text:0040639E                 mov     [ebx+8], edi
.text:004063A1                 mov     [ebx+0Ch], esi
.text:004063A4                 dec     edx
.text:004063A5                 and     edx, 0FFFFC000h
.text:004063AB                 mov     dword ptr [ebx+14h], 0
.text:004063B2                 add     edx, 8000h
.text:004063B8                 or      edx, 124h
.text:004063BE                 test    cl, 1
.text:004063C1                 movzx   eax, dx
.text:004063C4                 jnz     short loc_4063CB
.text:004063C6                 or      eax, 92h
.text:004063CB
.text:004063CB loc_4063CB:                             ; CODE XREF: .text:004063C4↑j
.text:004063CB                 mov     ebx, [esp+54h]
.text:004063CF                 xor     edx, edx
.text:004063D1                 xor     ebp, ebp
.text:004063D3                 mov     edi, [esp+50h]
.text:004063D7                 mov     ecx, [esp+64h]
.text:004063DB                 mov     esi, edi
.text:004063DD                 or      [ecx], eax
.text:004063DF                 mov     edi, ebx
.text:004063E1                 or      edi, ebp
.text:004063E3                 mov     ebp, edx
.text:004063E5                 mov     ebx, [esp+64h]
.text:004063E9                 or      ebp, esi
.text:004063EB                 mov     esi, [esp+58h]
.text:004063EF                 mov     edx, [esp+40h]
.text:004063F3                 mov     [ebx+30h], edi
.text:004063F6                 mov     [ebx+18h], esi
.text:004063F9                 mov     ecx, edx
.text:004063FB                 xor     esi, esi
.text:004063FD                 mov     [ebx+34h], ebp
.text:00406400                 xor     edx, edx
.text:00406402                 or      esi, ecx
.text:00406404                 mov     dword ptr [esp+8], 989680h
.text:0040640C                 mov     ebx, [esp+3Ch]
.text:00406410                 mov     ecx, esi
.text:00406412                 mov     dword ptr [esp+0Ch], 0
.text:0040641A                 or      ebx, edx
.text:0040641C                 mov     edx, ebx
.text:0040641E                 sub     edx, 0D53E8000h
.text:00406424                 sbb     ecx, 19DB1DEh
.text:0040642A                 mov     [esp+4], ecx
.text:0040642E                 mov     [esp], edx
.text:00406431                 call    sub_40C4B0
.text:00406436                 mov     edx, eax
.text:00406438                 mov     ecx, [esp+64h]
.text:0040643C                 shr     eax, 1Fh
.text:0040643F                 dec     eax
.text:00406440                 and     edx, eax
.text:00406442                 mov     [ecx+38h], edx
.text:00406445                 mov     [esp], ebx
.text:00406448                 mov     [esp+4], esi
.text:0040644C                 mov     dword ptr [esp+8], 989680h
.text:00406454                 mov     dword ptr [esp+0Ch], 0
.text:0040645C                 call    sub_40C5D0
.text:00406461                 lea     ecx, [eax+eax*4]
.text:00406464                 lea     esi, [ecx+ecx*4]
.text:00406467                 mov     eax, [esp+64h]
.text:0040646B                 shl     esi, 2
.text:0040646E                 mov     ebx, esi
.text:00406470                 shr     ebx, 1Fh
.text:00406473                 dec     ebx
.text:00406474                 and     ebx, esi
.text:00406476                 xor     esi, esi
.text:00406478                 mov     [eax+3Ch], ebx
.text:0040647B                 mov     edx, [esp+38h]
.text:0040647F                 mov     dword ptr [esp+8], 989680h
.text:00406487                 mov     ebx, [esp+34h]
.text:0040648B                 mov     dword ptr [esp+0Ch], 0
.text:00406493                 mov     ecx, edx
.text:00406495                 xor     edx, edx
.text:00406497                 or      ebx, edx
.text:00406499                 or      esi, ecx
.text:0040649B                 mov     edx, ebx
.text:0040649D                 sub     edx, 0D53E8000h
.text:004064A3                 mov     ecx, esi
.text:004064A5                 sbb     ecx, 19DB1DEh
.text:004064AB                 mov     [esp+4], ecx
.text:004064AF                 mov     [esp], edx
.text:004064B2                 call    sub_40C4B0
.text:004064B7                 mov     edx, eax
.text:004064B9                 mov     ecx, [esp+64h]
.text:004064BD                 shr     eax, 1Fh
.text:004064C0                 dec     eax
.text:004064C1                 and     edx, eax
.text:004064C3                 mov     [ecx+48h], edx
.text:004064C6                 mov     [esp], ebx
.text:004064C9                 mov     [esp+4], esi
.text:004064CD                 mov     dword ptr [esp+8], 989680h
.text:004064D5                 mov     dword ptr [esp+0Ch], 0
.text:004064DD                 call    sub_40C5D0
.text:004064E2                 lea     edx, [eax+eax*4]
.text:004064E5                 mov     ebx, [esp+64h]
.text:004064E9                 lea     ecx, [edx+edx*4]
.text:004064EC                 shl     ecx, 2
.text:004064EF                 mov     esi, ecx
.text:004064F1                 shr     esi, 1Fh
.text:004064F4                 dec     esi
.text:004064F5                 and     esi, ecx
.text:004064F7                 mov     [ebx+4Ch], esi
.text:004064FA                 mov     edx, [esp+48h]
.text:004064FE                 xor     esi, esi
.text:00406500                 mov     dword ptr [esp+8], 989680h
.text:00406508                 mov     ebx, [esp+44h]
.text:0040650C                 mov     dword ptr [esp+0Ch], 0
.text:00406514                 mov     ecx, edx
.text:00406516                 xor     edx, edx
.text:00406518                 or      ebx, edx
.text:0040651A                 or      esi, ecx
.text:0040651C                 mov     edx, ebx
.text:0040651E                 sub     edx, 0D53E8000h
.text:00406524                 mov     ecx, esi
.text:00406526                 sbb     ecx, 19DB1DEh
.text:0040652C                 mov     [esp+4], ecx
.text:00406530                 mov     [esp], edx
.text:00406533                 call    sub_40C4B0
.text:00406538                 mov     edx, eax
.text:0040653A                 mov     ecx, [esp+64h]
.text:0040653E                 shr     eax, 1Fh
.text:00406541                 dec     eax
.text:00406542                 and     edx, eax
.text:00406544                 mov     [ecx+40h], edx
.text:00406547                 mov     [esp+4], esi
.text:0040654B                 mov     dword ptr [esp+8], 989680h
.text:00406553                 mov     dword ptr [esp+0Ch], 0
.text:0040655B                 mov     [esp], ebx
.text:0040655E                 call    sub_40C5D0
.text:00406563                 lea     edx, [eax+eax*4]
.text:00406566                 lea     esi, [edx+edx*4]
.text:00406569                 mov     eax, [esp+64h]
.text:0040656D                 shl     esi, 2
.text:00406570                 mov     edx, ebp
.text:00406572                 mov     ecx, esi
.text:00406574                 mov     dword ptr [eax+50h], 200h
.text:0040657B                 shr     ecx, 1Fh
.text:0040657E                 dec     ecx
.text:0040657F                 and     ecx, esi
.text:00406581                 test    ebp, ebp
.text:00406583                 mov     [eax+44h], ecx
.text:00406586                 mov     eax, edi
.text:00406588                 js      short loc_4065C2
.text:0040658A
.text:0040658A loc_40658A:                             ; CODE XREF: .text:004065CA↓j
.text:0040658A                 xor     esi, esi
.text:0040658C                 mov     ebp, edi
.text:0040658E                 mov     ecx, eax
.text:00406590                 shrd    ecx, edx, 9
.text:00406594                 mov     ebx, edx
.text:00406596                 and     ebp, 1FFh
.text:0040659C                 mov     eax, esi
.text:0040659E                 sar     ebx, 9
.text:004065A1                 or      eax, ebp
.text:004065A3                 jz      short loc_4065AB
.text:004065A5                 add     ecx, 1
.text:004065A8                 adc     ebx, 0
.text:004065AB
.text:004065AB loc_4065AB:                             ; CODE XREF: .text:004065A3↑j
.text:004065AB                 mov     edx, [esp+64h]
.text:004065AF                 mov     eax, 1
.text:004065B4                 mov     [edx+58h], ecx
.text:004065B7                 mov     [edx+5Ch], ebx
.text:004065BA                 add     esp, 1Ch
.text:004065BD                 pop     ebx
.text:004065BE                 pop     esi
.text:004065BF                 pop     edi
.text:004065C0                 pop     ebp
.text:004065C1                 retn
.text:004065C2 ; ---------------------------------------------------------------------------
.text:004065C2
.text:004065C2 loc_4065C2:                             ; CODE XREF: .text:00406588↑j
.text:004065C2                 add     eax, 1FFh
.text:004065C7                 adc     edx, 0
.text:004065CA                 jmp     short loc_40658A
.text:004065CA ; ---------------------------------------------------------------------------
.text:004065CC                 align 10h
.text:004065D0                 push    ebp
.text:004065D1                 push    edi
.text:004065D2                 xor     edi, edi
.text:004065D4                 push    esi
.text:004065D5                 xor     esi, esi
.text:004065D7                 push    ebx
.text:004065D8                 sub     esp, 0Ch
.text:004065DB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:004065E2                 call    LoadLibraryA
.text:004065E7                 sub     esp, 4
.text:004065EA                 mov     ebp, eax
.text:004065EC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004065F4                 mov     [esp], eax
.text:004065F7                 call    GetProcAddress
.text:004065FC                 sub     esp, 8
.text:004065FF                 test    eax, eax
.text:00406601                 jz      short loc_406632
.text:00406603                 lea     ecx, [esp+8]
.text:00406607                 mov     [esp+4], ecx
.text:0040660B                 mov     ecx, [esp+20h]
.text:0040660F                 mov     [esp], ecx
.text:00406612                 call    eax
.text:00406614                 sub     esp, 8
.text:00406617                 mov     ebx, eax
.text:00406619                 cmp     eax, 0FFFFFFFFh
.text:0040661C                 jz      short loc_40664D
.text:0040661E
.text:0040661E loc_40661E:                             ; CODE XREF: .text:00406656↓j
.text:0040661E                 mov     esi, [esp+8]
.text:00406622                 mov     ecx, ebx
.text:00406624                 xor     edi, edi
.text:00406626                 xor     ebx, ebx
.text:00406628                 mov     edx, esi
.text:0040662A                 mov     esi, ecx
.text:0040662C                 or      esi, edi
.text:0040662E                 mov     edi, ebx
.text:00406630                 or      edi, edx
.text:00406632
.text:00406632 loc_406632:                             ; CODE XREF: .text:00406601↑j
.text:00406632                                         ; .text:00406654↓j
.text:00406632                 test    ebp, ebp
.text:00406634                 jz      short loc_406641
.text:00406636                 mov     [esp], ebp
.text:00406639                 call    FreeLibrary
.text:0040663E                 sub     esp, 4
.text:00406641
.text:00406641 loc_406641:                             ; CODE XREF: .text:00406634↑j
.text:00406641                 add     esp, 0Ch
.text:00406644                 mov     eax, esi
.text:00406646                 mov     edx, edi
.text:00406648                 pop     ebx
.text:00406649                 pop     esi
.text:0040664A                 pop     edi
.text:0040664B                 pop     ebp
.text:0040664C                 retn
.text:0040664D ; ---------------------------------------------------------------------------
.text:0040664D
.text:0040664D loc_40664D:                             ; CODE XREF: .text:0040661C↑j
.text:0040664D                 call    GetLastError
.text:00406652                 test    eax, eax
.text:00406654                 jnz     short loc_406632
.text:00406656                 jmp     short loc_40661E
.text:00406656 ; ---------------------------------------------------------------------------
.text:00406658                 align 10h
.text:00406660
.text:00406660 ; =============== S U B R O U T I N E =======================================
.text:00406660
.text:00406660
.text:00406660 ; int __cdecl sub_406660(LPCSTR lpFileName, int)
.text:00406660 sub_406660      proc near               ; CODE XREF: sub_405000+1BA1↓p
.text:00406660
.text:00406660 lpRootPathName  = dword ptr -8FCh
.text:00406660 lpVolumeNameBuffer= dword ptr -8F8h
.text:00406660 nVolumeNameSize = dword ptr -8F4h
.text:00406660 lpVolumeSerialNumber= dword ptr -8F0h
.text:00406660 lpMaximumComponentLength= dword ptr -8ECh
.text:00406660 lpFileSystemFlags= dword ptr -8E8h
.text:00406660 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00406660 nFileSystemNameSize= dword ptr -8E0h
.text:00406660 VolumeSerialNumber= dword ptr -8D8h
.text:00406660 MaximumComponentLength= dword ptr -8D4h
.text:00406660 FileSystemFlags = dword ptr -8D0h
.text:00406660 var_8CC         = dword ptr -8CCh
.text:00406660 var_8C8         = dword ptr -8C8h
.text:00406660 var_8C4         = dword ptr -8C4h
.text:00406660 var_8C0         = dword ptr -8C0h
.text:00406660 var_8BC         = dword ptr -8BCh
.text:00406660 var_8B8         = dword ptr -8B8h
.text:00406660 var_8B4         = dword ptr -8B4h
.text:00406660 var_8B0         = dword ptr -8B0h
.text:00406660 var_8AC         = dword ptr -8ACh
.text:00406660 var_8A8         = dword ptr -8A8h
.text:00406660 var_8A4         = dword ptr -8A4h
.text:00406660 var_8A0         = dword ptr -8A0h
.text:00406660 var_89C         = dword ptr -89Ch
.text:00406660 FileSystemNameBuffer= byte ptr -88Ch
.text:00406660 VolumeNameBuffer= byte ptr -48Ch
.text:00406660 var_8C          = dword ptr -8Ch
.text:00406660 var_88          = dword ptr -88h
.text:00406660 var_84          = dword ptr -84h
.text:00406660 var_80          = dword ptr -80h
.text:00406660 var_7C          = dword ptr -7Ch
.text:00406660 var_78          = dword ptr -78h
.text:00406660 var_74          = dword ptr -74h
.text:00406660 var_70          = dword ptr -70h
.text:00406660 var_6C          = dword ptr -6Ch
.text:00406660 var_5C          = dword ptr -5Ch
.text:00406660 var_58          = dword ptr -58h
.text:00406660 var_54          = dword ptr -54h
.text:00406660 var_50          = dword ptr -50h
.text:00406660 var_4C          = dword ptr -4Ch
.text:00406660 var_48          = dword ptr -48h
.text:00406660 var_44          = dword ptr -44h
.text:00406660 var_3C          = dword ptr -3Ch
.text:00406660 var_38          = dword ptr -38h
.text:00406660 var_34          = dword ptr -34h
.text:00406660 lpFileName      = dword ptr  4
.text:00406660 arg_4           = dword ptr  8
.text:00406660
.text:00406660                 push    ebp
.text:00406661                 xor     eax, eax
.text:00406663                 mov     ecx, 0Dh
.text:00406668                 push    edi
.text:00406669                 push    esi
.text:0040666A                 push    ebx
.text:0040666B                 sub     esp, 8ECh
.text:00406671                 lea     edi, [esp+8FCh+var_5C]
.text:00406678                 cld
.text:00406679                 lea     edx, [esp+8FCh+var_8C]
.text:00406680                 rep stosd
.text:00406682                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00406686                 lea     esi, [esp+8FCh+var_5C]
.text:0040668D                 mov     edx, [esp+8FCh+lpFileName]
.text:00406694                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00406697                 call    sub_4050C0
.text:0040669C                 test    eax, eax
.text:0040669E                 mov     edx, 0FFFFFFFFh
.text:004066A3                 jz      loc_406A34
.text:004066A9                 mov     edx, [esp+8FCh+var_88]
.text:004066B0                 mov     ebp, [esp+8FCh+var_84]
.text:004066B7                 mov     edi, [esp+8FCh+var_80]
.text:004066BE                 mov     [esp+8FCh+var_58], edx
.text:004066C5                 mov     ecx, [esp+8FCh+var_7C]
.text:004066CC                 mov     ebx, [esp+8FCh+var_8C]
.text:004066D3                 mov     [esp+8FCh+var_54], ebp
.text:004066DA                 mov     edx, [esp+8FCh+var_78]
.text:004066E1                 mov     ebp, [esp+8FCh+var_74]
.text:004066E8                 mov     [esp+8FCh+var_50], edi
.text:004066EF                 test    bl, 10h
.text:004066F2                 mov     edi, [esp+8FCh+var_70]
.text:004066F9                 mov     [esp+8FCh+var_4C], ecx
.text:00406700                 mov     ecx, [esp+8FCh+var_6C]
.text:00406707                 mov     [esp+8FCh+var_5C], ebx
.text:0040670E                 mov     [esp+8FCh+var_48], edx
.text:00406715                 mov     [esp+8FCh+var_44], ebp
.text:0040671C                 mov     [esp+8FCh+var_3C], edi
.text:00406723                 mov     [esp+8FCh+var_38], ecx
.text:0040672A                 jnz     loc_406A50
.text:00406730                 mov     ebx, 1
.text:00406735                 mov     [esp+8FCh+var_34], ebx
.text:0040673C
.text:0040673C loc_40673C:                             ; CODE XREF: sub_406660+406↓j
.text:0040673C                 mov     eax, [esp+8FCh+lpFileName]
.text:00406743                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00406747                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040674B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040674E                 call    sub_407110
.text:00406753                 mov     [esp+8FCh+lpRootPathName], eax
.text:00406756                 call    sub_408220
.text:0040675B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040675F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00406763                 mov     ebp, eax
.text:00406765                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00406769                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040676D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00406774                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00406778                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040677C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00406780                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00406788                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00406790                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00406793                 call    GetVolumeInformationA
.text:00406798                 sub     esp, 20h
.text:0040679B                 test    eax, eax
.text:0040679D                 lea     edi, [esp+8FCh+var_8CC]
.text:004067A1                 setz    bl
.text:004067A4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:004067A7                 xor     ebp, ebp
.text:004067A9                 movzx   edx, bl
.text:004067AC                 dec     edx
.text:004067AD                 xor     ebx, ebx
.text:004067AF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:004067B3                 call    free
.text:004067B8                 cld
.text:004067B9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004067BD                 mov     [esi+1Ch], ecx
.text:004067C0                 mov     ecx, 0Dh
.text:004067C5                 rep movsd
.text:004067C7                 mov     edi, [esp+8FCh+var_8A0]
.text:004067CB                 mov     edx, [esp+8FCh+var_89C]
.text:004067CF                 mov     ecx, [esp+8FCh+var_8CC]
.text:004067D3                 or      ebp, edi
.text:004067D5                 mov     esi, [esp+8FCh+var_8B0]
.text:004067D9                 mov     edi, [esp+8FCh+arg_4]
.text:004067E0                 or      edx, ebx
.text:004067E2                 mov     [edi+8], edx
.text:004067E5                 xor     edx, edx
.text:004067E7                 test    cl, 10h
.text:004067EA                 setz    dl
.text:004067ED                 mov     [edi+0Ch], ebp
.text:004067F0                 mov     [edi+10h], esi
.text:004067F3                 mov     dword ptr [edi+14h], 0
.text:004067FA                 dec     edx
.text:004067FB                 and     edx, 0FFFFC000h
.text:00406801                 add     edx, 8000h
.text:00406807                 or      edx, 124h
.text:0040680D                 test    cl, 1
.text:00406810                 movzx   eax, dx
.text:00406813                 jnz     short loc_40681A
.text:00406815                 or      eax, 92h
.text:0040681A
.text:0040681A loc_40681A:                             ; CODE XREF: sub_406660+1B3↑j
.text:0040681A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040681E                 xor     edx, edx
.text:00406820                 xor     ebp, ebp
.text:00406822                 mov     edi, [esp+8FCh+var_8AC]
.text:00406826                 mov     ecx, [esp+8FCh+arg_4]
.text:0040682D                 mov     esi, edi
.text:0040682F                 or      [ecx], eax
.text:00406831                 mov     edi, ebx
.text:00406833                 or      edi, ebp
.text:00406835                 mov     ebp, edx
.text:00406837                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040683B                 or      ebp, esi
.text:0040683D                 mov     esi, [esp+8FCh+arg_4]
.text:00406844                 mov     edx, [esp+8FCh+var_8BC]
.text:00406848                 mov     [esi+18h], ebx
.text:0040684B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040684F                 mov     ecx, edx
.text:00406851                 mov     [esi+30h], edi
.text:00406854                 xor     edx, edx
.text:00406856                 mov     [esi+34h], ebp
.text:00406859                 or      ebx, edx
.text:0040685B                 xor     esi, esi
.text:0040685D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00406865                 or      esi, ecx
.text:00406867                 mov     edx, ebx
.text:00406869                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00406871                 sub     edx, 0D53E8000h
.text:00406877                 mov     ecx, esi
.text:00406879                 sbb     ecx, 19DB1DEh
.text:0040687F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00406883                 mov     [esp+8FCh+lpRootPathName], edx
.text:00406886                 call    sub_40C4B0
.text:0040688B                 mov     edx, eax
.text:0040688D                 mov     ecx, [esp+8FCh+arg_4]
.text:00406894                 shr     eax, 1Fh
.text:00406897                 dec     eax
.text:00406898                 and     edx, eax
.text:0040689A                 mov     [ecx+38h], edx
.text:0040689D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004068A0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004068A4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004068AC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004068B4                 call    sub_40C5D0
.text:004068B9                 lea     ecx, [eax+eax*4]
.text:004068BC                 lea     ebx, [ecx+ecx*4]
.text:004068BF                 mov     eax, [esp+8FCh+arg_4]
.text:004068C6                 shl     ebx, 2
.text:004068C9                 mov     esi, ebx
.text:004068CB                 shr     esi, 1Fh
.text:004068CE                 dec     esi
.text:004068CF                 and     esi, ebx
.text:004068D1                 mov     [eax+3Ch], esi
.text:004068D4                 mov     edx, [esp+8FCh+var_8C4]
.text:004068D8                 xor     esi, esi
.text:004068DA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004068E2                 mov     ebx, [esp+8FCh+var_8C8]
.text:004068E6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004068EE                 mov     ecx, edx
.text:004068F0                 xor     edx, edx
.text:004068F2                 or      ebx, edx
.text:004068F4                 or      esi, ecx
.text:004068F6                 mov     edx, ebx
.text:004068F8                 sub     edx, 0D53E8000h
.text:004068FE                 mov     ecx, esi
.text:00406900                 sbb     ecx, 19DB1DEh
.text:00406906                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040690A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040690D                 call    sub_40C4B0
.text:00406912                 mov     edx, eax
.text:00406914                 mov     ecx, [esp+8FCh+arg_4]
.text:0040691B                 shr     eax, 1Fh
.text:0040691E                 dec     eax
.text:0040691F                 and     edx, eax
.text:00406921                 mov     [ecx+48h], edx
.text:00406924                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00406927                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040692B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00406933                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040693B                 call    sub_40C5D0
.text:00406940                 lea     ecx, [eax+eax*4]
.text:00406943                 lea     ebx, [ecx+ecx*4]
.text:00406946                 mov     eax, [esp+8FCh+arg_4]
.text:0040694D                 shl     ebx, 2
.text:00406950                 mov     esi, ebx
.text:00406952                 shr     esi, 1Fh
.text:00406955                 dec     esi
.text:00406956                 and     esi, ebx
.text:00406958                 mov     [eax+4Ch], esi
.text:0040695B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040695F                 xor     esi, esi
.text:00406961                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00406969                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040696D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00406975                 mov     ecx, edx
.text:00406977                 xor     edx, edx
.text:00406979                 or      ebx, edx
.text:0040697B                 or      esi, ecx
.text:0040697D                 mov     edx, ebx
.text:0040697F                 sub     edx, 0D53E8000h
.text:00406985                 mov     ecx, esi
.text:00406987                 sbb     ecx, 19DB1DEh
.text:0040698D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00406991                 mov     [esp+8FCh+lpRootPathName], edx
.text:00406994                 call    sub_40C4B0
.text:00406999                 mov     edx, eax
.text:0040699B                 mov     ecx, [esp+8FCh+arg_4]
.text:004069A2                 shr     eax, 1Fh
.text:004069A5                 dec     eax
.text:004069A6                 and     edx, eax
.text:004069A8                 mov     [ecx+40h], edx
.text:004069AB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004069AE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004069B2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004069BA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004069C2                 call    sub_40C5D0
.text:004069C7                 lea     ebx, [eax+eax*4]
.text:004069CA                 mov     esi, [esp+8FCh+arg_4]
.text:004069D1                 lea     edx, [ebx+ebx*4]
.text:004069D4                 shl     edx, 2
.text:004069D7                 mov     eax, edi
.text:004069D9                 mov     ecx, edx
.text:004069DB                 mov     dword ptr [esi+50h], 200h
.text:004069E2                 shr     ecx, 1Fh
.text:004069E5                 dec     ecx
.text:004069E6                 and     ecx, edx
.text:004069E8                 test    ebp, ebp
.text:004069EA                 mov     edx, ebp
.text:004069EC                 mov     [esi+44h], ecx
.text:004069EF                 js      short loc_406A41
.text:004069F1
.text:004069F1 loc_4069F1:                             ; CODE XREF: sub_406660+3E9↓j
.text:004069F1                 xor     esi, esi
.text:004069F3                 mov     ebp, edi
.text:004069F5                 mov     ecx, eax
.text:004069F7                 shrd    ecx, edx, 9
.text:004069FB                 mov     ebx, edx
.text:004069FD                 and     ebp, 1FFh
.text:00406A03                 mov     eax, esi
.text:00406A05                 sar     ebx, 9
.text:00406A08                 or      eax, ebp
.text:00406A0A                 jz      short loc_406A12
.text:00406A0C                 add     ecx, 1
.text:00406A0F                 adc     ebx, 0
.text:00406A12
.text:00406A12 loc_406A12:                             ; CODE XREF: sub_406660+3AA↑j
.text:00406A12                 mov     edx, [esp+8FCh+arg_4]
.text:00406A19                 mov     [edx+5Ch], ebx
.text:00406A1C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00406A23                 mov     [edx+58h], ecx
.text:00406A26                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00406A2A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:00406A2D                 call    sub_405880
.text:00406A32                 xor     edx, edx
.text:00406A34
.text:00406A34 loc_406A34:                             ; CODE XREF: sub_406660+43↑j
.text:00406A34                 add     esp, 8ECh
.text:00406A3A                 mov     eax, edx
.text:00406A3C                 pop     ebx
.text:00406A3D                 pop     esi
.text:00406A3E                 pop     edi
.text:00406A3F                 pop     ebp
.text:00406A40                 retn
.text:00406A41 ; ---------------------------------------------------------------------------
.text:00406A41
.text:00406A41 loc_406A41:                             ; CODE XREF: sub_406660+38F↑j
.text:00406A41                 add     eax, 1FFh
.text:00406A46                 adc     edx, 0
.text:00406A49                 jmp     short loc_4069F1
.text:00406A49 ; ---------------------------------------------------------------------------
.text:00406A4B                 align 10h
.text:00406A50
.text:00406A50 loc_406A50:                             ; CODE XREF: sub_406660+CA↑j
.text:00406A50                 mov     eax, [esp+8FCh+lpFileName]
.text:00406A57                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:00406A5A                 call    sub_405230
.text:00406A5F                 mov     [esp+8FCh+var_34], eax
.text:00406A66                 jmp     loc_40673C
.text:00406A66 sub_406660      endp
.text:00406A66
.text:00406A66 ; ---------------------------------------------------------------------------
.text:00406A6B                 align 10h
.text:00406A70 ; START OF FUNCTION CHUNK FOR sub_405000
.text:00406A70
.text:00406A70 loc_406A70:                             ; CODE XREF: sub_405000+26↑j
.text:00406A70                 cld
.text:00406A71                 sub     esp, 2Ch
.text:00406A74                 xor     eax, eax
.text:00406A76                 mov     [esp+2Ch+var_10], ebx
.text:00406A7A                 mov     ecx, 18h
.text:00406A7F                 mov     ebx, [esp+2Ch+arg_0]
.text:00406A83                 mov     [esp+2Ch+var_C], esi
.text:00406A87                 mov     esi, [esp+2Ch+arg_4]
.text:00406A8B                 test    ebx, ebx
.text:00406A8D                 mov     [esp+2Ch+var_8], edi
.text:00406A91                 mov     edi, esi
.text:00406A93                 mov     [esp+2Ch+var_4], ebp
.text:00406A97                 rep stosd
.text:00406A99                 jz      short loc_406AA0
.text:00406A9B                 cmp     byte ptr [ebx], 0
.text:00406A9E                 jnz     short loc_406AB8
.text:00406AA0
.text:00406AA0 loc_406AA0:                             ; CODE XREF: sub_405000+1A99↑j
.text:00406AA0                 xor     edx, edx
.text:00406AA2
.text:00406AA2 loc_406AA2:                             ; CODE XREF: sub_405000+1ACF↓j
.text:00406AA2                                         ; sub_405000+1B78↓j
.text:00406AA2                 mov     ebx, [esp+2Ch+var_10]
.text:00406AA6                 mov     eax, edx
.text:00406AA8                 mov     esi, [esp+2Ch+var_C]
.text:00406AAC                 mov     edi, [esp+2Ch+var_8]
.text:00406AB0                 mov     ebp, [esp+2Ch+var_4]
.text:00406AB4                 add     esp, 2Ch
.text:00406AB7                 retn
.text:00406AB8 ; ---------------------------------------------------------------------------
.text:00406AB8
.text:00406AB8 loc_406AB8:                             ; CODE XREF: sub_405000+1A9E↑j
.text:00406AB8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00406AC0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00406AC3                 call    sub_407030
.text:00406AC8                 test    eax, eax
.text:00406ACA                 mov     edx, 0FFFFFFFFh
.text:00406ACF                 jnz     short loc_406AA2
.text:00406AD1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00406AD4                 call    sub_406EE0
.text:00406AD9                 mov     [esp+2Ch+lpFileName], eax
.text:00406ADC                 call    sub_408220
.text:00406AE1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00406AE4                 mov     ebp, eax
.text:00406AE6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:00406AEE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00406AF6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:00406AFE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00406B06                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:00406B0E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00406B16                 call    CreateFileA
.text:00406B1B                 sub     esp, 1Ch
.text:00406B1E                 mov     ebx, eax
.text:00406B20                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00406B24                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00406B27                 call    sub_4053B0
.text:00406B2C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:00406B2F                 mov     edi, eax
.text:00406B31                 call    CloseHandle
.text:00406B36                 sub     esp, 4
.text:00406B39                 cmp     edi, 0FFFFFFFFh
.text:00406B3C                 jz      short loc_406B9A
.text:00406B3E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00406B42                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00406B45                 call    sub_405880
.text:00406B4A
.text:00406B4A loc_406B4A:                             ; CODE XREF: sub_405000+1BA8↓j
.text:00406B4A                 mov     edx, [esi]
.text:00406B4C                 and     edx, 0F000h
.text:00406B52                 cmp     edx, 4000h
.text:00406B58                 jz      short loc_406B8D
.text:00406B5A
.text:00406B5A loc_406B5A:                             ; CODE XREF: sub_405000+1B98↓j
.text:00406B5A                 cmp     edi, 0FFFFFFFFh
.text:00406B5D                 jz      short loc_406B7D
.text:00406B5F
.text:00406B5F loc_406B5F:                             ; CODE XREF: sub_405000+1B8B↓j
.text:00406B5F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00406B66                 call    SetErrorMode
.text:00406B6B                 sub     esp, 4
.text:00406B6E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00406B71                 call    free
.text:00406B76                 mov     edx, edi
.text:00406B78                 jmp     loc_406AA2
.text:00406B7D ; ---------------------------------------------------------------------------
.text:00406B7D
.text:00406B7D loc_406B7D:                             ; CODE XREF: sub_405000+1B5D↑j
.text:00406B7D                 call    sub_406E90
.text:00406B82                 mov     esi, eax
.text:00406B84                 call    _errno
.text:00406B89                 mov     [eax], esi
.text:00406B8B                 jmp     short loc_406B5F
.text:00406B8D ; ---------------------------------------------------------------------------
.text:00406B8D
.text:00406B8D loc_406B8D:                             ; CODE XREF: sub_405000+1B58↑j
.text:00406B8D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00406B90                 call    sub_405230
.text:00406B95                 mov     [esi+18h], eax
.text:00406B98                 jmp     short loc_406B5A
.text:00406B9A ; ---------------------------------------------------------------------------
.text:00406B9A
.text:00406B9A loc_406B9A:                             ; CODE XREF: sub_405000+1B3C↑j
.text:00406B9A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00406B9E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:00406BA1                 call    sub_406660
.text:00406BA6                 mov     edi, eax
.text:00406BA8                 jmp     short loc_406B4A
.text:00406BA8 ; END OF FUNCTION CHUNK FOR sub_405000
.text:00406BA8 ; ---------------------------------------------------------------------------
.text:00406BAA                 align 10h
.text:00406BB0
.text:00406BB0 ; =============== S U B R O U T I N E =======================================
.text:00406BB0
.text:00406BB0
.text:00406BB0 sub_406BB0      proc near               ; CODE XREF: sub_405050+16↑j
.text:00406BB0
.text:00406BB0 arg_0           = dword ptr  4
.text:00406BB0 arg_4           = dword ptr  8
.text:00406BB0
.text:00406BB0                 sub     esp, 0Ch
.text:00406BB3                 mov     ecx, [esp+0Ch+arg_0]
.text:00406BB7                 mov     eax, [esp+0Ch+arg_4]
.text:00406BBB                 test    ecx, ecx
.text:00406BBD                 js      short loc_406BEE
.text:00406BBF                 test    eax, eax
.text:00406BC1                 js      short loc_406BCD
.text:00406BC3                 cmp     eax, 8
.text:00406BC6                 jle     short loc_406BE1
.text:00406BC8                 cmp     eax, 0Ch
.text:00406BCB                 jz      short loc_406BE1
.text:00406BCD
.text:00406BCD loc_406BCD:                             ; CODE XREF: sub_406BB0+11↑j
.text:00406BCD                 call    _errno
.text:00406BD2                 mov     dword ptr [eax], 16h
.text:00406BD8
.text:00406BD8 loc_406BD8:                             ; CODE XREF: sub_406BB0+3C↓j
.text:00406BD8                                         ; sub_406BB0+49↓j
.text:00406BD8                 mov     eax, 0FFFFFFFFh
.text:00406BDD                 add     esp, 0Ch
.text:00406BE0                 retn
.text:00406BE1 ; ---------------------------------------------------------------------------
.text:00406BE1
.text:00406BE1 loc_406BE1:                             ; CODE XREF: sub_406BB0+16↑j
.text:00406BE1                                         ; sub_406BB0+1B↑j
.text:00406BE1                 call    _errno
.text:00406BE6                 mov     dword ptr [eax], 28h ; '('
.text:00406BEC                 jmp     short loc_406BD8
.text:00406BEE ; ---------------------------------------------------------------------------
.text:00406BEE
.text:00406BEE loc_406BEE:                             ; CODE XREF: sub_406BB0+D↑j
.text:00406BEE                 call    _errno
.text:00406BF3                 mov     dword ptr [eax], 9
.text:00406BF9                 jmp     short loc_406BD8
.text:00406BF9 sub_406BB0      endp
.text:00406BF9
.text:00406BF9 ; ---------------------------------------------------------------------------
.text:00406BFB                 align 10h
.text:00406C00
.text:00406C00 ; =============== S U B R O U T I N E =======================================
.text:00406C00
.text:00406C00 ; Attributes: info_from_lumina
.text:00406C00
.text:00406C00 ___get_errno    proc near               ; CODE XREF: sub_406E90+B↓p
.text:00406C00
.text:00406C00 arg_0           = dword ptr  4
.text:00406C00
.text:00406C00                 mov     eax, [esp+arg_0]
.text:00406C04                 cmp     eax, 53h ; 'S'
.text:00406C07                 jg      loc_406D00
.text:00406C0D                 cmp     eax, 52h ; 'R'
.text:00406C10                 jge     short loc_406C62
.text:00406C12                 cmp     eax, 0Fh
.text:00406C15                 jz      short loc_406C30
.text:00406C17                 cmp     eax, 0Fh
.text:00406C1A                 jg      short loc_406C90
.text:00406C1C                 cmp     eax, 9
.text:00406C1F                 jg      short loc_406C70
.text:00406C21                 cmp     eax, 7
.text:00406C24                 jge     short loc_406C69
.text:00406C26                 cmp     eax, 3
.text:00406C29                 jg      short loc_406C4A
.text:00406C2B                 cmp     eax, 2
.text:00406C2E                 jl      short loc_406C43
.text:00406C30
.text:00406C30 loc_406C30:                             ; CODE XREF: ___get_errno+15↑j
.text:00406C30                                         ; ___get_errno+9D↓j ...
.text:00406C30                 mov     edx, 2
.text:00406C35                 lea     esi, [esi+0]
.text:00406C39                 lea     edi, [edi+0]
.text:00406C40
.text:00406C40 loc_406C40:                             ; CODE XREF: ___get_errno+48↓j
.text:00406C40                                         ; ___get_errno+59↓j ...
.text:00406C40                 mov     eax, edx
.text:00406C42                 retn
.text:00406C43 ; ---------------------------------------------------------------------------
.text:00406C43
.text:00406C43 loc_406C43:                             ; CODE XREF: ___get_errno+2E↑j
.text:00406C43                                         ; ___get_errno+78↓j ...
.text:00406C43                 mov     edx, 16h
.text:00406C48                 jmp     short loc_406C40
.text:00406C4A ; ---------------------------------------------------------------------------
.text:00406C4A
.text:00406C4A loc_406C4A:                             ; CODE XREF: ___get_errno+29↑j
.text:00406C4A                 cmp     eax, 5
.text:00406C4D                 jz      short loc_406C62
.text:00406C4F                 cmp     eax, 5
.text:00406C52                 jg      short loc_406C5B
.text:00406C54                 mov     edx, 18h
.text:00406C59                 jmp     short loc_406C40
.text:00406C5B ; ---------------------------------------------------------------------------
.text:00406C5B
.text:00406C5B loc_406C5B:                             ; CODE XREF: ___get_errno+52↑j
.text:00406C5B                                         ; ___get_errno+180↓j
.text:00406C5B                 mov     edx, 9
.text:00406C60                 jmp     short loc_406C40
.text:00406C62 ; ---------------------------------------------------------------------------
.text:00406C62
.text:00406C62 loc_406C62:                             ; CODE XREF: ___get_errno+10↑j
.text:00406C62                                         ; ___get_errno+4D↑j ...
.text:00406C62                 mov     edx, 0Dh
.text:00406C67                 jmp     short loc_406C40
.text:00406C69 ; ---------------------------------------------------------------------------
.text:00406C69
.text:00406C69 loc_406C69:                             ; CODE XREF: ___get_errno+24↑j
.text:00406C69                                         ; ___get_errno+73↓j ...
.text:00406C69                 mov     edx, 0Ch
.text:00406C6E                 jmp     short loc_406C40
.text:00406C70 ; ---------------------------------------------------------------------------
.text:00406C70
.text:00406C70 loc_406C70:                             ; CODE XREF: ___get_errno+1F↑j
.text:00406C70                 cmp     eax, 0Dh
.text:00406C73                 jg      short loc_406C69
.text:00406C75                 cmp     eax, 0Ch
.text:00406C78                 jge     short loc_406C43
.text:00406C7A                 cmp     eax, 0Ah
.text:00406C7D                 mov     edx, 7
.text:00406C82                 jz      short loc_406C40
.text:00406C84                 cmp     eax, 0Bh
.text:00406C87                 jnz     short loc_406C43
.text:00406C89
.text:00406C89 loc_406C89:                             ; CODE XREF: ___get_errno+21A↓j
.text:00406C89                 mov     edx, 8
.text:00406C8E                 jmp     short loc_406C40
.text:00406C90 ; ---------------------------------------------------------------------------
.text:00406C90
.text:00406C90 loc_406C90:                             ; CODE XREF: ___get_errno+1A↑j
.text:00406C90                 cmp     eax, 22h ; '"'
.text:00406C93                 jg      short loc_406CC4
.text:00406C95                 cmp     eax, 16h
.text:00406C98                 jge     short loc_406C62
.text:00406C9A                 cmp     eax, 12h
.text:00406C9D                 jz      short loc_406C30
.text:00406C9F                 cmp     eax, 12h
.text:00406CA2                 jg      short loc_406CB5
.text:00406CA4                 cmp     eax, 10h
.text:00406CA7                 jz      short loc_406C62
.text:00406CA9                 mov     edx, 12h
.text:00406CAE                 cmp     eax, 11h
.text:00406CB1
.text:00406CB1 loc_406CB1:                             ; CODE XREF: ___get_errno+172↓j
.text:00406CB1                                         ; ___get_errno+24C↓j ...
.text:00406CB1                 jnz     short loc_406C43
.text:00406CB3                 jmp     short loc_406C40
.text:00406CB5 ; ---------------------------------------------------------------------------
.text:00406CB5
.text:00406CB5 loc_406CB5:                             ; CODE XREF: ___get_errno+A2↑j
.text:00406CB5                 cmp     eax, 14h
.text:00406CB8                 jle     short loc_406C62
.text:00406CBA
.text:00406CBA loc_406CBA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00406CBA                 mov     edx, 10h
.text:00406CBF                 jmp     loc_406C40
.text:00406CC4 ; ---------------------------------------------------------------------------
.text:00406CC4
.text:00406CC4 loc_406CC4:                             ; CODE XREF: ___get_errno+93↑j
.text:00406CC4                 cmp     eax, 41h ; 'A'
.text:00406CC7                 jz      short loc_406C62
.text:00406CC9                 cmp     eax, 41h ; 'A'
.text:00406CCC                 jg      short loc_406CE1
.text:00406CCE                 cmp     eax, 24h ; '$'
.text:00406CD1                 jz      short loc_406C62
.text:00406CD3                 cmp     eax, 35h ; '5'
.text:00406CD6                 jnz     loc_406C43
.text:00406CDC                 jmp     loc_406C30
.text:00406CE1 ; ---------------------------------------------------------------------------
.text:00406CE1
.text:00406CE1 loc_406CE1:                             ; CODE XREF: ___get_errno+CC↑j
.text:00406CE1                 cmp     eax, 43h ; 'C'
.text:00406CE4                 jz      loc_406C30
.text:00406CEA                 cmp     eax, 50h ; 'P'
.text:00406CED                 jnz     loc_406C43
.text:00406CF3
.text:00406CF3 loc_406CF3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00406CF3                 mov     edx, 11h
.text:00406CF8                 jmp     loc_406C40
.text:00406CF8 ; ---------------------------------------------------------------------------
.text:00406CFD                 align 10h
.text:00406D00
.text:00406D00 loc_406D00:                             ; CODE XREF: ___get_errno+7↑j
.text:00406D00                 cmp     eax, 0A1h ; '¡'
.text:00406D05                 jz      loc_406C30
.text:00406D0B                 cmp     eax, 0A1h ; '¡'
.text:00406D10                 jg      loc_406DC0
.text:00406D16                 cmp     eax, 81h
.text:00406D1B                 jg      short loc_406D85
.text:00406D1D                 cmp     eax, 80h ; '€'
.text:00406D22                 mov     edx, 0Ah
.text:00406D27                 jge     loc_406C40
.text:00406D2D                 cmp     eax, 6Ch ; 'l'
.text:00406D30                 jz      loc_406C62
.text:00406D36                 cmp     eax, 6Ch ; 'l'
.text:00406D39                 jg      short loc_406D57
.text:00406D3B                 cmp     eax, 57h ; 'W'
.text:00406D3E                 jz      loc_406C43
.text:00406D44                 cmp     eax, 59h ; 'Y'
.text:00406D47                 jnz     loc_406C43
.text:00406D4D
.text:00406D4D loc_406D4D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00406D4D                                         ; ___get_errno+23C↓j
.text:00406D4D                 mov     edx, 0Bh
.text:00406D52                 jmp     loc_406C40
.text:00406D57 ; ---------------------------------------------------------------------------
.text:00406D57
.text:00406D57 loc_406D57:                             ; CODE XREF: ___get_errno+139↑j
.text:00406D57                 cmp     eax, 70h ; 'p'
.text:00406D5A                 mov     edx, 1Ch
.text:00406D5F                 jz      loc_406C40
.text:00406D65                 cmp     eax, 70h ; 'p'
.text:00406D68                 jg      short loc_406D77
.text:00406D6A                 mov     edx, 20h ; ' '
.text:00406D6F                 cmp     eax, 6Dh ; 'm'
.text:00406D72                 jmp     loc_406CB1
.text:00406D77 ; ---------------------------------------------------------------------------
.text:00406D77
.text:00406D77 loc_406D77:                             ; CODE XREF: ___get_errno+168↑j
.text:00406D77                 cmp     eax, 72h ; 'r'
.text:00406D7A
.text:00406D7A loc_406D7A:                             ; CODE XREF: ___get_errno+19C↓j
.text:00406D7A                 jnz     loc_406C43
.text:00406D80                 jmp     loc_406C5B
.text:00406D85 ; ---------------------------------------------------------------------------
.text:00406D85
.text:00406D85 loc_406D85:                             ; CODE XREF: ___get_errno+11B↑j
.text:00406D85                 cmp     eax, 84h ; '„'
.text:00406D8A                 jz      loc_406C62
.text:00406D90                 cmp     eax, 84h ; '„'
.text:00406D95                 jg      short loc_406D9E
.text:00406D97                 cmp     eax, 82h ; '‚'
.text:00406D9C                 jmp     short loc_406D7A
.text:00406D9E ; ---------------------------------------------------------------------------
.text:00406D9E
.text:00406D9E loc_406D9E:                             ; CODE XREF: ___get_errno+195↑j
.text:00406D9E                 cmp     eax, 91h ; '‘'
.text:00406DA3                 mov     edx, 29h ; ')'
.text:00406DA8                 jz      loc_406C40
.text:00406DAE                 cmp     eax, 9Eh ; 'ž'
.text:00406DB3
.text:00406DB3 loc_406DB3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00406DB3                 jnz     loc_406C43
.text:00406DB9                 jmp     loc_406C62
.text:00406DB9 ; ---------------------------------------------------------------------------
.text:00406DBE                 align 10h
.text:00406DC0
.text:00406DC0 loc_406DC0:                             ; CODE XREF: ___get_errno+110↑j
.text:00406DC0                 cmp     eax, 0CEh ; 'Î'
.text:00406DC5                 jz      loc_406C30
.text:00406DCB                 cmp     eax, 0CEh ; 'Î'
.text:00406DD0                 jg      short loc_406E20
.text:00406DD2                 cmp     eax, 0AAh ; 'ª'
.text:00406DD7                 jz      loc_406CBA
.text:00406DDD                 cmp     eax, 0AAh ; 'ª'
.text:00406DE2                 jg      short loc_406DF6
.text:00406DE4                 cmp     eax, 0A4h ; '¤'
.text:00406DE9                 jz      loc_406D4D
.text:00406DEF                 cmp     eax, 0A7h ; '§'
.text:00406DF4                 jmp     short loc_406DB3
.text:00406DF6 ; ---------------------------------------------------------------------------
.text:00406DF6
.text:00406DF6 loc_406DF6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00406DF6                 cmp     eax, 0B7h ; '·'
.text:00406DFB                 jz      loc_406CF3
.text:00406E01                 cmp     eax, 0B7h ; '·'
.text:00406E06                 jl      loc_406C43
.text:00406E0C                 sub     eax, 0BCh ; '¼'
.text:00406E11                 cmp     eax, 0Eh
.text:00406E14                 ja      loc_406C43
.text:00406E1A                 jmp     loc_406C89
.text:00406E1A ; ---------------------------------------------------------------------------
.text:00406E1F                 align 10h
.text:00406E20
.text:00406E20 loc_406E20:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00406E20                 cmp     eax, 46Bh
.text:00406E25                 mov     edx, 24h ; '$'
.text:00406E2A                 jz      loc_406C40
.text:00406E30                 cmp     eax, 46Bh
.text:00406E35                 jg      short loc_406E51
.text:00406E37                 cmp     eax, 0D7h ; '×'
.text:00406E3C                 jz      loc_406D4D
.text:00406E42                 mov     edx, 5
.text:00406E47                 cmp     eax, 45Dh
.text:00406E4C                 jmp     loc_406CB1
.text:00406E51 ; ---------------------------------------------------------------------------
.text:00406E51
.text:00406E51 loc_406E51:                             ; CODE XREF: ___get_errno+235↑j
.text:00406E51                 cmp     eax, 4D5h
.text:00406E56                 mov     edx, 4
.text:00406E5B                 jz      loc_406C40
.text:00406E61                 cmp     eax, 4D5h
.text:00406E66                 jg      short loc_406E77
.text:00406E68                 mov     edx, 13h
.text:00406E6D                 cmp     eax, 4B0h
.text:00406E72                 jmp     loc_406CB1
.text:00406E77 ; ---------------------------------------------------------------------------
.text:00406E77
.text:00406E77 loc_406E77:                             ; CODE XREF: ___get_errno+266↑j
.text:00406E77                 cmp     eax, 718h
.text:00406E7C                 jnz     loc_406C43
.text:00406E82                 jmp     loc_406C69
.text:00406E82 ___get_errno    endp
.text:00406E82
.text:00406E82 ; ---------------------------------------------------------------------------
.text:00406E87                 align 10h
.text:00406E90
.text:00406E90 ; =============== S U B R O U T I N E =======================================
.text:00406E90
.text:00406E90
.text:00406E90 sub_406E90      proc near               ; CODE XREF: sub_405000:loc_406B7D↑p
.text:00406E90                                         ; sub_406F00:loc_406FFA↓p ...
.text:00406E90
.text:00406E90 var_C           = dword ptr -0Ch
.text:00406E90
.text:00406E90                 sub     esp, 0Ch
.text:00406E93                 call    GetLastError
.text:00406E98                 mov     [esp+0Ch+var_C], eax
.text:00406E9B                 call    ___get_errno
.text:00406EA0                 add     esp, 0Ch
.text:00406EA3                 retn
.text:00406EA3 sub_406E90      endp
.text:00406EA3
.text:00406EA3 ; ---------------------------------------------------------------------------
.text:00406EA4                 align 10h
.text:00406EB0
.text:00406EB0 ; =============== S U B R O U T I N E =======================================
.text:00406EB0
.text:00406EB0
.text:00406EB0 sub_406EB0      proc near               ; CODE XREF: .text:004082B3↓p
.text:00406EB0                                         ; .text:00408303↓p
.text:00406EB0
.text:00406EB0 arg_4           = dword ptr  8
.text:00406EB0
.text:00406EB0                 sub     esp, 0Ch
.text:00406EB3                 mov     edx, [esp+0Ch+arg_4]
.text:00406EB7                 test    edx, edx
.text:00406EB9                 jz      short loc_406EC0
.text:00406EBB                 add     esp, 0Ch
.text:00406EBE                 jmp     short sub_406F00
.text:00406EC0 ; ---------------------------------------------------------------------------
.text:00406EC0
.text:00406EC0 loc_406EC0:                             ; CODE XREF: sub_406EB0+9↑j
.text:00406EC0                 call    _errno
.text:00406EC5                 mov     dword ptr [eax], 16h
.text:00406ECB                 xor     eax, eax
.text:00406ECD                 add     esp, 0Ch
.text:00406ED0                 retn
.text:00406ED0 sub_406EB0      endp
.text:00406ED0
.text:00406ED1 ; ---------------------------------------------------------------------------
.text:00406ED1                 jmp     short sub_406EE0
.text:00406ED1 ; ---------------------------------------------------------------------------
.text:00406ED3                 align 10h
.text:00406EE0
.text:00406EE0 ; =============== S U B R O U T I N E =======================================
.text:00406EE0
.text:00406EE0
.text:00406EE0 ; int __cdecl sub_406EE0(LPCSTR)
.text:00406EE0 sub_406EE0      proc near               ; CODE XREF: sub_405000+1AD4↑p
.text:00406EE0                                         ; .text:00406ED1↑j ...
.text:00406EE0
.text:00406EE0 lpFileName      = dword ptr -0Ch
.text:00406EE0 Destination     = dword ptr -8
.text:00406EE0 arg_0           = dword ptr  4
.text:00406EE0
.text:00406EE0                 sub     esp, 0Ch
.text:00406EE3                 mov     edx, [esp+0Ch+arg_0]
.text:00406EE7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:00406EEF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:00406EF2                 call    sub_406F00
.text:00406EF7                 add     esp, 0Ch
.text:00406EFA                 retn
.text:00406EFA sub_406EE0      endp
.text:00406EFA
.text:00406EFA ; ---------------------------------------------------------------------------
.text:00406EFB                 align 10h
.text:00406F00
.text:00406F00 ; =============== S U B R O U T I N E =======================================
.text:00406F00
.text:00406F00
.text:00406F00 ; int __cdecl sub_406F00(LPCSTR lpFileName, char *Destination)
.text:00406F00 sub_406F00      proc near               ; CODE XREF: sub_406EB0+E↑j
.text:00406F00                                         ; sub_406EE0+12↑p
.text:00406F00
.text:00406F00 Size            = dword ptr -2Ch
.text:00406F00 nBufferLength   = dword ptr -28h
.text:00406F00 lpBuffer        = dword ptr -24h
.text:00406F00 lpFilePart      = dword ptr -20h
.text:00406F00 FilePart        = dword ptr -14h
.text:00406F00 lpFileName      = dword ptr  4
.text:00406F00 Destination     = dword ptr  8
.text:00406F00
.text:00406F00                 push    ebp
.text:00406F01                 push    edi
.text:00406F02                 push    esi
.text:00406F03                 push    ebx
.text:00406F04                 sub     esp, 1Ch
.text:00406F07                 mov     edi, [esp+2Ch+lpFileName]
.text:00406F0B                 mov     ebp, [esp+2Ch+Destination]
.text:00406F0F                 test    edi, edi
.text:00406F11                 jz      loc_407019
.text:00406F17                 cmp     byte ptr [edi], 0
.text:00406F1A                 jz      loc_40700C
.text:00406F20                 mov     [esp+2Ch+Size], 104h ; Size
.text:00406F27                 call    malloc
.text:00406F2C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00406F30                 lea     edx, [esp+2Ch+FilePart]
.text:00406F34                 mov     ebx, eax
.text:00406F36                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00406F3A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:00406F42                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00406F45                 call    GetFullPathNameA
.text:00406F4A                 sub     esp, 10h
.text:00406F4D                 mov     esi, eax
.text:00406F4F                 test    eax, eax
.text:00406F51                 jz      loc_406FFA
.text:00406F57                 cmp     eax, 104h
.text:00406F5C                 jle     short loc_406F6D
.text:00406F5E                 test    ebp, ebp
.text:00406F60                 jz      short loc_406FC9
.text:00406F62                 call    _errno
.text:00406F67                 mov     dword ptr [eax], 26h ; '&'
.text:00406F6D
.text:00406F6D loc_406F6D:                             ; CODE XREF: sub_406F00+5C↑j
.text:00406F6D                                         ; sub_406F00+F5↓j
.text:00406F6D                 call    _errno
.text:00406F72                 mov     edi, [eax]
.text:00406F74                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:00406F7C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:00406F7F                 call    sub_407030
.text:00406F84                 test    eax, eax
.text:00406F86                 jnz     short loc_406FA0
.text:00406F88                 movzx   eax, byte ptr [esi+ebx-1]
.text:00406F8D                 cmp     al, 2Fh ; '/'
.text:00406F8F                 jz      short loc_406FA0
.text:00406F91                 cmp     al, 5Ch ; '\'
.text:00406F93                 jz      short loc_406FA0
.text:00406F95                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00406F99                 mov     byte ptr [esi+ebx+1], 0
.text:00406F9E                 mov     esi, esi
.text:00406FA0
.text:00406FA0 loc_406FA0:                             ; CODE XREF: sub_406F00+86↑j
.text:00406FA0                                         ; sub_406F00+8F↑j ...
.text:00406FA0                 call    _errno
.text:00406FA5                 mov     [eax], edi
.text:00406FA7                 mov     [esp+2Ch+Size], ebx
.text:00406FAA                 call    sub_4081A0
.text:00406FAF                 test    ebp, ebp
.text:00406FB1                 mov     eax, ebx
.text:00406FB3                 jz      short loc_406FC1
.text:00406FB5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00406FB9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:00406FBC                 call    strcpy
.text:00406FC1
.text:00406FC1 loc_406FC1:                             ; CODE XREF: sub_406F00+B3↑j
.text:00406FC1                                         ; sub_406F00+10A↓j
.text:00406FC1                 add     esp, 1Ch
.text:00406FC4                 pop     ebx
.text:00406FC5                 pop     esi
.text:00406FC6                 pop     edi
.text:00406FC7                 pop     ebp
.text:00406FC8                 retn
.text:00406FC9 ; ---------------------------------------------------------------------------
.text:00406FC9
.text:00406FC9 loc_406FC9:                             ; CODE XREF: sub_406F00+60↑j
.text:00406FC9                 mov     [esp+2Ch+Size], ebx ; Block
.text:00406FCC                 lea     ecx, [eax+2]
.text:00406FCF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00406FD3                 call    realloc
.text:00406FD8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00406FDC                 lea     edx, [esp+2Ch+FilePart]
.text:00406FE0                 mov     ebx, eax
.text:00406FE2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00406FE6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:00406FEA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00406FED                 call    GetFullPathNameA
.text:00406FF2                 sub     esp, 10h
.text:00406FF5                 jmp     loc_406F6D
.text:00406FFA ; ---------------------------------------------------------------------------
.text:00406FFA
.text:00406FFA loc_406FFA:                             ; CODE XREF: sub_406F00+51↑j
.text:00406FFA                 call    sub_406E90
.text:00406FFF                 mov     esi, eax
.text:00407001                 call    _errno
.text:00407006                 mov     [eax], esi
.text:00407008
.text:00407008 loc_407008:                             ; CODE XREF: sub_406F00+117↓j
.text:00407008                                         ; sub_406F00+124↓j
.text:00407008                 xor     eax, eax
.text:0040700A                 jmp     short loc_406FC1
.text:0040700C ; ---------------------------------------------------------------------------
.text:0040700C
.text:0040700C loc_40700C:                             ; CODE XREF: sub_406F00+1A↑j
.text:0040700C                 call    _errno
.text:00407011                 mov     dword ptr [eax], 2
.text:00407017                 jmp     short loc_407008
.text:00407019 ; ---------------------------------------------------------------------------
.text:00407019
.text:00407019 loc_407019:                             ; CODE XREF: sub_406F00+11↑j
.text:00407019                 call    _errno
.text:0040701E                 mov     dword ptr [eax], 16h
.text:00407024                 jmp     short loc_407008
.text:00407024 sub_406F00      endp
.text:00407024
.text:00407024 ; ---------------------------------------------------------------------------
.text:00407026                 align 10h
.text:00407030
.text:00407030 ; =============== S U B R O U T I N E =======================================
.text:00407030
.text:00407030
.text:00407030 ; int __cdecl sub_407030(LPCSTR lpFileName, int)
.text:00407030 sub_407030      proc near               ; CODE XREF: sub_405000+1AC3↑p
.text:00407030                                         ; sub_406F00+7F↑p ...
.text:00407030
.text:00407030 uMode           = dword ptr -1Ch
.text:00407030 var_10          = dword ptr -10h
.text:00407030 var_C           = dword ptr -0Ch
.text:00407030 var_8           = dword ptr -8
.text:00407030 var_4           = dword ptr -4
.text:00407030 lpFileName      = dword ptr  4
.text:00407030 arg_4           = dword ptr  8
.text:00407030
.text:00407030                 sub     esp, 1Ch
.text:00407033                 mov     [esp+1Ch+var_10], ebx
.text:00407037                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040703B                 mov     [esp+1Ch+var_4], ebp
.text:0040703F                 xor     ebp, ebp
.text:00407041                 test    ebx, ebx
.text:00407043                 mov     [esp+1Ch+var_C], esi
.text:00407047                 mov     esi, [esp+1Ch+arg_4]
.text:0040704B                 mov     [esp+1Ch+var_8], edi
.text:0040704F                 jz      short loc_407059
.text:00407051                 test    esi, 0FFFFFFE8h
.text:00407057                 jz      short loc_407080
.text:00407059
.text:00407059 loc_407059:                             ; CODE XREF: sub_407030+1F↑j
.text:00407059                 call    _errno
.text:0040705E                 mov     dword ptr [eax], 16h
.text:00407064
.text:00407064 loc_407064:                             ; CODE XREF: sub_407030+B1↓j
.text:00407064                 mov     eax, 0FFFFFFFFh
.text:00407069
.text:00407069 loc_407069:                             ; CODE XREF: sub_407030+86↓j
.text:00407069                                         ; sub_407030+A4↓j
.text:00407069                 mov     ebx, [esp+1Ch+var_10]
.text:0040706D                 mov     esi, [esp+1Ch+var_C]
.text:00407071                 mov     edi, [esp+1Ch+var_8]
.text:00407075                 mov     ebp, [esp+1Ch+var_4]
.text:00407079                 add     esp, 1Ch
.text:0040707C                 retn
.text:0040707C ; ---------------------------------------------------------------------------
.text:0040707D                 align 10h
.text:00407080
.text:00407080 loc_407080:                             ; CODE XREF: sub_407030+27↑j
.text:00407080                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00407087                 call    SetErrorMode
.text:0040708C                 sub     esp, 4
.text:0040708F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00407092                 call    GetFileAttributesA
.text:00407097                 sub     esp, 4
.text:0040709A                 mov     edi, eax
.text:0040709C                 cmp     eax, 0FFFFFFFFh
.text:0040709F                 jz      short loc_4070E3
.text:004070A1
.text:004070A1 loc_4070A1:                             ; CODE XREF: sub_407030+C6↓j
.text:004070A1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:004070A8                 call    SetErrorMode
.text:004070AD                 sub     esp, 4
.text:004070B0                 mov     eax, 0FFFFFFFFh
.text:004070B5                 inc     ebp
.text:004070B6                 jz      short loc_407069
.text:004070B8                 test    esi, 10h
.text:004070BE                 jz      short loc_4070C8
.text:004070C0                 test    edi, 10h
.text:004070C6                 jz      short loc_4070D6
.text:004070C8
.text:004070C8 loc_4070C8:                             ; CODE XREF: sub_407030+8E↑j
.text:004070C8                 and     esi, 2
.text:004070CB                 jz      short loc_4070D2
.text:004070CD                 and     edi, 1
.text:004070D0                 jnz     short loc_4070D6
.text:004070D2
.text:004070D2 loc_4070D2:                             ; CODE XREF: sub_407030+9B↑j
.text:004070D2                 xor     eax, eax
.text:004070D4                 jmp     short loc_407069
.text:004070D6 ; ---------------------------------------------------------------------------
.text:004070D6
.text:004070D6 loc_4070D6:                             ; CODE XREF: sub_407030+96↑j
.text:004070D6                                         ; sub_407030+A0↑j
.text:004070D6                 call    _errno
.text:004070DB                 mov     dword ptr [eax], 0Dh
.text:004070E1                 jmp     short loc_407064
.text:004070E3 ; ---------------------------------------------------------------------------
.text:004070E3
.text:004070E3 loc_4070E3:                             ; CODE XREF: sub_407030+6F↑j
.text:004070E3                 call    sub_406E90
.text:004070E8                 mov     ebp, eax
.text:004070EA                 call    _errno
.text:004070EF                 mov     [eax], ebp
.text:004070F1                 mov     ebp, 0FFFFFFFFh
.text:004070F6                 jmp     short loc_4070A1
.text:004070F6 sub_407030      endp
.text:004070F6
.text:004070F6 ; ---------------------------------------------------------------------------
.text:004070F8                 align 10h
.text:00407100 ; const char String[4]
.text:00407100 String          db ' :/',0              ; DATA XREF: sub_407110+FA↓o
.text:00407104                 align 10h
.text:00407110
.text:00407110 ; =============== S U B R O U T I N E =======================================
.text:00407110
.text:00407110
.text:00407110 ; int __cdecl sub_407110(LPCSTR)
.text:00407110 sub_407110      proc near               ; CODE XREF: sub_405880+E↑p
.text:00407110                                         ; sub_405D80+17↑p ...
.text:00407110
.text:00407110 Str             = dword ptr -1Ch
.text:00407110 Val             = dword ptr -18h
.text:00407110 Count           = dword ptr -14h
.text:00407110 var_10          = dword ptr -10h
.text:00407110 var_C           = dword ptr -0Ch
.text:00407110 var_8           = dword ptr -8
.text:00407110 var_4           = dword ptr -4
.text:00407110 arg_0           = dword ptr  4
.text:00407110
.text:00407110                 sub     esp, 1Ch
.text:00407113                 mov     edx, [esp+1Ch+arg_0]
.text:00407117                 mov     [esp+1Ch+var_8], edi
.text:0040711B                 mov     [esp+1Ch+var_10], ebx
.text:0040711F                 mov     [esp+1Ch+var_C], esi
.text:00407123                 mov     [esp+1Ch+var_4], ebp
.text:00407127                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040712A                 call    sub_406EE0
.text:0040712F                 test    eax, eax
.text:00407131                 mov     edi, eax
.text:00407133                 jz      short loc_407170
.text:00407135                 mov     [esp+1Ch+Str], eax ; Str
.text:00407138                 call    strlen
.text:0040713D                 cmp     eax, 2
.text:00407140                 jbe     short loc_40714C
.text:00407142                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00407146                 jz      loc_407200
.text:0040714C
.text:0040714C loc_40714C:                             ; CODE XREF: sub_407110+30↑j
.text:0040714C                                         ; sub_407110+F4↓j
.text:0040714C                 test    edi, edi
.text:0040714E                 jz      short loc_407170
.text:00407150                 mov     [esp+1Ch+Str], edi ; Str
.text:00407153                 call    strlen
.text:00407158                 cmp     eax, 4
.text:0040715B                 mov     ebp, eax
.text:0040715D                 jle     short loc_407170
.text:0040715F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00407162                 jz      short loc_407190
.text:00407164                 lea     esi, [esi+0]
.text:0040716A                 lea     edi, [edi+0]
.text:00407170
.text:00407170 loc_407170:                             ; CODE XREF: sub_407110+23↑j
.text:00407170                                         ; sub_407110+3E↑j ...
.text:00407170                 xor     esi, esi
.text:00407172
.text:00407172 loc_407172:                             ; CODE XREF: sub_407110+CD↓j
.text:00407172                                         ; sub_407110+115↓j
.text:00407172                 mov     [esp+1Ch+Str], edi ; Block
.text:00407175                 call    free
.text:0040717A                 mov     eax, esi
.text:0040717C                 mov     ebx, [esp+1Ch+var_10]
.text:00407180                 mov     esi, [esp+1Ch+var_C]
.text:00407184                 mov     edi, [esp+1Ch+var_8]
.text:00407188                 mov     ebp, [esp+1Ch+var_4]
.text:0040718C                 add     esp, 1Ch
.text:0040718F                 retn
.text:00407190 ; ---------------------------------------------------------------------------
.text:00407190
.text:00407190 loc_407190:                             ; CODE XREF: sub_407110+52↑j
.text:00407190                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00407194                 jnz     short loc_407170
.text:00407196                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040719E                 lea     ecx, [edi+2]
.text:004071A1                 mov     [esp+1Ch+Str], ecx ; Str
.text:004071A4                 call    strchr
.text:004071A9                 test    eax, eax
.text:004071AB                 jnz     short loc_4071DF
.text:004071AD
.text:004071AD loc_4071AD:                             ; CODE XREF: sub_407110+E2↓j
.text:004071AD                 inc     ebp
.text:004071AE
.text:004071AE loc_4071AE:                             ; CODE XREF: sub_407110+E9↓j
.text:004071AE                 mov     [esp+1Ch+Val], 1 ; Size
.text:004071B6                 lea     ebx, [ebp+1]
.text:004071B9                 mov     [esp+1Ch+Str], ebx ; Count
.text:004071BC                 call    calloc
.text:004071C1                 mov     [esp+1Ch+Str], eax ; Destination
.text:004071C4                 mov     esi, eax
.text:004071C6                 mov     [esp+1Ch+Count], ebx ; Count
.text:004071CA                 mov     [esp+1Ch+Val], edi ; Source
.text:004071CE                 call    strncpy
.text:004071D3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:004071D8                 mov     byte ptr [ebp+esi+0], 0
.text:004071DD                 jmp     short loc_407172
.text:004071DF ; ---------------------------------------------------------------------------
.text:004071DF
.text:004071DF loc_4071DF:                             ; CODE XREF: sub_407110+9B↑j
.text:004071DF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:004071E7                 inc     eax
.text:004071E8                 mov     [esp+1Ch+Str], eax ; Str
.text:004071EB                 call    strchr
.text:004071F0                 test    eax, eax
.text:004071F2                 jz      short loc_4071AD
.text:004071F4                 sub     eax, edi
.text:004071F6                 lea     ebp, [eax+1]
.text:004071F9                 jmp     short loc_4071AE
.text:004071F9 ; ---------------------------------------------------------------------------
.text:004071FB                 align 10h
.text:00407200
.text:00407200 loc_407200:                             ; CODE XREF: sub_407110+36↑j
.text:00407200                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:00407204                 jnz     loc_40714C
.text:0040720A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:00407211                 call    _strdup
.text:00407216                 movsx   edx, byte ptr [edi]
.text:00407219                 mov     esi, eax
.text:0040721B                 mov     [esp+1Ch+Str], edx ; C
.text:0040721E                 call    toupper
.text:00407223                 mov     [esi], al
.text:00407225                 jmp     loc_407172
.text:00407225 sub_407110      endp
.text:00407225
.text:00407225 ; ---------------------------------------------------------------------------
.text:0040722A                 align 10h
.text:00407230
.text:00407230 ; =============== S U B R O U T I N E =======================================
.text:00407230
.text:00407230
.text:00407230 sub_407230      proc near               ; CODE XREF: .text:00407384↓p
.text:00407230                                         ; .text:00407468↓p
.text:00407230
.text:00407230 Str             = dword ptr -2Ch
.text:00407230 Val             = dword ptr -28h
.text:00407230 var_18          = dword ptr -18h
.text:00407230 var_11          = byte ptr -11h
.text:00407230 arg_0           = dword ptr  4
.text:00407230
.text:00407230                 push    ebp
.text:00407231                 push    edi
.text:00407232                 push    esi
.text:00407233                 push    ebx
.text:00407234                 sub     esp, 1Ch
.text:00407237                 mov     edx, [esp+2Ch+arg_0]
.text:0040723B                 cmp     edx, ds:dword_40F1C0
.text:00407241                 mov     [esp+2Ch+var_11], 0
.text:00407246                 jz      loc_407344
.text:0040724C                 mov     ebx, ds:dword_40F1B0
.text:00407252                 test    ebx, ebx
.text:00407254                 jz      short loc_4072C2
.text:00407256
.text:00407256 loc_407256:                             ; CODE XREF: sub_407230+10F↓j
.text:00407256                 mov     ebx, [esp+2Ch+arg_0]
.text:0040725A                 xor     edi, edi
.text:0040725C                 xor     esi, esi
.text:0040725E                 mov     ebp, offset dword_40F1D8
.text:00407263                 lea     esi, [esi+0]
.text:00407269                 lea     edi, [edi+0]
.text:00407270
.text:00407270 loc_407270:                             ; CODE XREF: sub_407230+60↓j
.text:00407270                 mov     edx, [ebp+4]
.text:00407273                 mov     ecx, edi
.text:00407275                 mov     eax, [ebp+0]
.text:00407278                 shl     ecx, 4
.text:0040727B                 mov     [esp+2Ch+var_18], ecx
.text:0040727F                 mov     ecx, edx
.text:00407281                 xor     eax, ebx
.text:00407283                 xor     ecx, esi
.text:00407285                 or      ecx, eax
.text:00407287                 jz      short loc_4072B1
.text:00407289                 inc     edi
.text:0040728A                 add     ebp, 10h
.text:0040728D                 cmp     edi, 20h ; ' '
.text:00407290                 jle     short loc_407270
.text:00407292
.text:00407292 loc_407292:                             ; CODE XREF: sub_407230+90↓j
.text:00407292                 movzx   ebx, [esp+2Ch+var_11]
.text:00407297                 mov     eax, [esp+2Ch+arg_0]
.text:0040729B                 mov     byte_40E060, bl
.text:004072A1                 mov     ds:dword_40F1C0, eax
.text:004072A6                 movsx   eax, bl
.text:004072A9
.text:004072A9 loc_4072A9:                             ; CODE XREF: sub_407230+11B↓j
.text:004072A9                 add     esp, 1Ch
.text:004072AC                 pop     ebx
.text:004072AD                 pop     esi
.text:004072AE                 pop     edi
.text:004072AF                 pop     ebp
.text:004072B0                 retn
.text:004072B1 ; ---------------------------------------------------------------------------
.text:004072B1
.text:004072B1 loc_4072B1:                             ; CODE XREF: sub_407230+57↑j
.text:004072B1                 mov     edx, [esp+2Ch+var_18]
.text:004072B5                 movzx   eax, byte ptr ds:dword_40F1D0[edx]
.text:004072BC                 mov     [esp+2Ch+var_11], al
.text:004072C0                 jmp     short loc_407292
.text:004072C2 ; ---------------------------------------------------------------------------
.text:004072C2
.text:004072C2 loc_4072C2:                             ; CODE XREF: sub_407230+24↑j
.text:004072C2                 mov     [esp+2Ch+Str], 0
.text:004072C9                 call    sub_409170
.text:004072CE                 test    eax, eax
.text:004072D0                 mov     ebx, eax
.text:004072D2                 jz      short loc_40732C
.text:004072D4                 movzx   ecx, byte ptr [eax]
.text:004072D7                 mov     esi, 0FFFFFFF0h
.text:004072DC                 test    cl, cl
.text:004072DE                 jz      short loc_40732C
.text:004072E0
.text:004072E0 loc_4072E0:                             ; CODE XREF: sub_407230+FA↓j
.text:004072E0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:004072E3                 movsx   ebp, cl
.text:004072E6                 add     esi, 10h
.text:004072E9                 mov     ds:dword_40F1D0[esi], ebp
.text:004072EF                 mov     edi, ebp
.text:004072F1                 sar     edi, 1Fh
.text:004072F4                 mov     ds:dword_40F1D4[esi], edi
.text:004072FA                 call    sub_405D80
.text:004072FF                 mov     ds:dword_40F1D8[esi], eax
.text:00407305                 xor     ecx, ecx
.text:00407307                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040730A                 mov     ds:dword_40F1DC[esi], ecx
.text:00407310                 mov     [esp+2Ch+Val], 0 ; Val
.text:00407318                 call    strchr
.text:0040731D                 mov     ebx, eax
.text:0040731F                 inc     ebx
.text:00407320                 jz      short loc_40732C
.text:00407322                 movzx   edx, byte ptr [eax+1]
.text:00407326                 test    dl, dl
.text:00407328                 mov     cl, dl
.text:0040732A                 jnz     short loc_4072E0
.text:0040732C
.text:0040732C loc_40732C:                             ; CODE XREF: sub_407230+A2↑j
.text:0040732C                                         ; sub_407230+AE↑j ...
.text:0040732C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040732F                 mov     esi, 1
.text:00407334                 mov     ds:dword_40F1B0, esi
.text:0040733A                 call    free
.text:0040733F                 jmp     loc_407256
.text:00407344 ; ---------------------------------------------------------------------------
.text:00407344
.text:00407344 loc_407344:                             ; CODE XREF: sub_407230+16↑j
.text:00407344                 movsx   eax, byte_40E060
.text:0040734B                 jmp     loc_4072A9
.text:0040734B sub_407230      endp
.text:0040734B
.text:0040734B ; ---------------------------------------------------------------------------
.text:00407350 dword_407350    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:00407350                                         ; DATA XREF: .text:00407373↓o
.text:00407350                                         ; .text:00407453↓o
.text:00407360 ; ---------------------------------------------------------------------------
.text:00407360                 sub     esp, 1Ch
.text:00407363                 mov     [esp+14h], esi
.text:00407367                 mov     esi, [esp+20h]
.text:0040736B                 mov     [esp+18h], edi
.text:0040736F                 mov     [esp+10h], ebx
.text:00407373                 mov     dword ptr [esp], offset dword_407350
.text:0040737A                 call    _strdup
.text:0040737F                 mov     [esp], esi
.text:00407382                 mov     edi, eax
.text:00407384                 call    sub_407230
.text:00407389                 mov     [edi], al
.text:0040738B                 test    al, al
.text:0040738D                 jz      short loc_4073A1
.text:0040738F                 mov     eax, edi
.text:00407391                 mov     ebx, [esp+10h]
.text:00407395                 mov     esi, [esp+14h]
.text:00407399                 mov     edi, [esp+18h]
.text:0040739D                 add     esp, 1Ch
.text:004073A0                 retn
.text:004073A1 ; ---------------------------------------------------------------------------
.text:004073A1
.text:004073A1 loc_4073A1:                             ; CODE XREF: .text:0040738D↑j
.text:004073A1                 mov     [esp], edi
.text:004073A4                 call    free
.text:004073A9                 mov     dword ptr [esp+4], 0
.text:004073B1                 mov     dword ptr [esp], 0
.text:004073B8                 call    GetCurrentDirectoryA
.text:004073BD                 sub     esp, 8
.text:004073C0                 lea     esi, [eax+1]
.text:004073C3                 mov     [esp], esi
.text:004073C6                 call    malloc
.text:004073CB                 mov     [esp+4], eax
.text:004073CF                 mov     edi, eax
.text:004073D1                 mov     [esp], esi
.text:004073D4                 call    GetCurrentDirectoryA
.text:004073D9                 sub     esp, 8
.text:004073DC                 test    eax, eax
.text:004073DE                 jnz     short loc_407400
.text:004073E0                 mov     dword ptr [esp+20h], 407354h
.text:004073E8                 mov     ebx, [esp+10h]
.text:004073EC                 mov     esi, [esp+14h]
.text:004073F0                 mov     edi, [esp+18h]
.text:004073F4                 add     esp, 1Ch
.text:004073F7                 jmp     _strdup
.text:004073F7 ; ---------------------------------------------------------------------------
.text:004073FC                 align 10h
.text:00407400
.text:00407400 loc_407400:                             ; CODE XREF: .text:004073DE↑j
.text:00407400                 mov     [esp+20h], edi
.text:00407404                 mov     ebx, [esp+10h]
.text:00407408                 mov     esi, [esp+14h]
.text:0040740C                 mov     edi, [esp+18h]
.text:00407410                 add     esp, 1Ch
.text:00407413                 jmp     sub_407110
.text:00407413 ; ---------------------------------------------------------------------------
.text:00407418                 align 10h
.text:00407420                 sub     esp, 7Ch
.text:00407423                 lea     edx, [esp+10h]
.text:00407427                 mov     [esp+8], edx
.text:0040742B                 mov     edx, [esp+80h]
.text:00407432                 mov     [esp+70h], ebx
.text:00407436                 mov     [esp+74h], esi
.text:0040743A                 mov     [esp+4], edx
.text:0040743E                 mov     [esp+78h], edi
.text:00407442                 mov     dword ptr [esp], 0
.text:00407449                 call    sub_409380
.text:0040744E                 xor     edx, edx
.text:00407450                 inc     eax
.text:00407451                 jz      short loc_407475
.text:00407453                 mov     dword ptr [esp], offset dword_407350
.text:0040745A                 mov     esi, [esp+20h]
.text:0040745E                 call    _strdup
.text:00407463                 mov     edi, eax
.text:00407465                 mov     [esp], esi
.text:00407468                 call    sub_407230
.text:0040746D                 mov     [edi], al
.text:0040746F                 test    al, al
.text:00407471                 mov     edx, edi
.text:00407473                 jz      short loc_407487
.text:00407475
.text:00407475 loc_407475:                             ; CODE XREF: .text:00407451↑j
.text:00407475                                         ; .text:004074D4↓j
.text:00407475                 mov     ebx, [esp+70h]
.text:00407479                 mov     eax, edx
.text:0040747B                 mov     esi, [esp+74h]
.text:0040747F                 mov     edi, [esp+78h]
.text:00407483                 add     esp, 7Ch
.text:00407486                 retn
.text:00407487 ; ---------------------------------------------------------------------------
.text:00407487
.text:00407487 loc_407487:                             ; CODE XREF: .text:00407473↑j
.text:00407487                 mov     [esp], edi
.text:0040748A                 call    free
.text:0040748F                 mov     dword ptr [esp+4], 0
.text:00407497                 mov     dword ptr [esp], 0
.text:0040749E                 call    GetCurrentDirectoryA
.text:004074A3                 sub     esp, 8
.text:004074A6                 lea     esi, [eax+1]
.text:004074A9                 mov     [esp], esi
.text:004074AC                 call    malloc
.text:004074B1                 mov     [esp+4], eax
.text:004074B5                 mov     edi, eax
.text:004074B7                 mov     [esp], esi
.text:004074BA                 call    GetCurrentDirectoryA
.text:004074BF                 sub     esp, 8
.text:004074C2                 test    eax, eax
.text:004074C4                 jnz     short loc_4074D6
.text:004074C6                 mov     dword ptr [esp], 407354h
.text:004074CD                 call    _strdup
.text:004074D2
.text:004074D2 loc_4074D2:                             ; CODE XREF: .text:004074DE↓j
.text:004074D2                 mov     edx, eax
.text:004074D4                 jmp     short loc_407475
.text:004074D6 ; ---------------------------------------------------------------------------
.text:004074D6
.text:004074D6 loc_4074D6:                             ; CODE XREF: .text:004074C4↑j
.text:004074D6                 mov     [esp], edi
.text:004074D9                 call    sub_407110
.text:004074DE                 jmp     short loc_4074D2
.text:004074E0
.text:004074E0 ; =============== S U B R O U T I N E =======================================
.text:004074E0
.text:004074E0
.text:004074E0 ; int __cdecl sub_4074E0(LPCSTR)
.text:004074E0 sub_4074E0      proc near               ; CODE XREF: sub_405230+12F↑p
.text:004074E0
.text:004074E0 String1         = dword ptr -1Ch
.text:004074E0 String2         = dword ptr -18h
.text:004074E0 var_C           = dword ptr -0Ch
.text:004074E0 var_8           = dword ptr -8
.text:004074E0 var_4           = dword ptr -4
.text:004074E0 arg_0           = dword ptr  4
.text:004074E0
.text:004074E0                 sub     esp, 1Ch
.text:004074E3                 mov     [esp+1Ch+var_4], edi
.text:004074E7                 mov     edi, [esp+1Ch+arg_0]
.text:004074EB                 mov     [esp+1Ch+var_C], ebx
.text:004074EF                 mov     [esp+1Ch+var_8], esi
.text:004074F3                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:004074F6                 call    sub_406EE0
.text:004074FB                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:004074FE                 mov     esi, eax
.text:00407500                 call    sub_407110
.text:00407505                 mov     [esp+1Ch+String2], eax ; String2
.text:00407509                 mov     ebx, eax
.text:0040750B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040750E                 call    _stricmp
.text:00407513                 test    eax, eax
.text:00407515                 setz    dl
.text:00407518                 test    esi, esi
.text:0040751A                 movzx   edi, dl
.text:0040751D                 jz      short loc_407527
.text:0040751F                 mov     [esp+1Ch+String1], esi ; Block
.text:00407522                 call    free
.text:00407527
.text:00407527 loc_407527:                             ; CODE XREF: sub_4074E0+3D↑j
.text:00407527                 test    ebx, ebx
.text:00407529                 jz      short loc_407533
.text:0040752B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040752E                 call    free
.text:00407533
.text:00407533 loc_407533:                             ; CODE XREF: sub_4074E0+49↑j
.text:00407533                 mov     eax, edi
.text:00407535                 mov     ebx, [esp+1Ch+var_C]
.text:00407539                 mov     esi, [esp+1Ch+var_8]
.text:0040753D                 mov     edi, [esp+1Ch+var_4]
.text:00407541                 add     esp, 1Ch
.text:00407544                 retn
.text:00407544 sub_4074E0      endp
.text:00407544
.text:00407544 ; ---------------------------------------------------------------------------
.text:00407545                 align 10h
.text:00407550 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:004075A1↓o
.text:00407559 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:00407559                                         ; DATA XREF: .text:004075B2↓o
.text:0040756D ; const CHAR FileName[]
.text:0040756D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:004076FC↓o
.text:0040756D                                         ; sub_407B30+17C↓o
.text:00407578 ; ---------------------------------------------------------------------------
.text:00407578
.text:00407578 loc_407578:                             ; DATA XREF: .text:00407812↓o
.text:00407578                 dec     esi
.text:00407579                 push    esp
.text:0040757A                 inc     esi
.text:0040757B                 push    ebx
.text:0040757C                 add     [esi+41h], al
.text:0040757F                 push    esp
.text:00407580                 xor     esi, [edx]
.text:00407582                 add     [esi+41h], al
.text:00407585                 push    esp
.text:00407586                 add     [ebx+44h], al
.text:00407589                 inc     esi
.text:0040758A                 push    ebx
.text:0040758B
.text:0040758B loc_40758B:                             ; CODE XREF: sub_407B30+101↓p
.text:0040758B                 add     [ebp+55002674h], cl
.text:00407591                 push    edi
.text:00407592                 push    esi
.text:00407593                 push    ebx
.text:00407594                 sub     esp, 8BCh
.text:0040759A                 mov     ebp, [esp+8D0h]
.text:004075A1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:004075A8                 call    LoadLibraryA
.text:004075AD                 sub     esp, 4
.text:004075B0                 mov     edi, eax
.text:004075B2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:004075BA                 mov     [esp], eax
.text:004075BD                 call    GetProcAddress
.text:004075C2                 sub     esp, 8
.text:004075C5                 mov     esi, eax
.text:004075C7                 test    ebp, ebp
.text:004075C9                 mov     dword ptr [esp+20h], 0
.text:004075D1                 jz      loc_407B11
.text:004075D7                 mov     [esp], ebp
.text:004075DA                 call    sub_408220
.text:004075DF                 mov     [esp], eax
.text:004075E2                 mov     ebp, eax
.text:004075E4                 call    strlen
.text:004075E9                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:004075EE                 mov     ebx, eax
.text:004075F0                 jz      short loc_40760C
.text:004075F2                 mov     [esp], ebp
.text:004075F5                 lea     edx, [eax+1]
.text:004075F8                 mov     [esp+4], edx
.text:004075FC                 call    realloc
.text:00407601                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00407605                 mov     ebp, eax
.text:00407607                 mov     byte ptr [ebx+eax+1], 0
.text:0040760C
.text:0040760C loc_40760C:                             ; CODE XREF: .text:004075F0↑j
.text:0040760C                 mov     dword ptr [esp+1Ch], 400h
.text:00407614                 lea     edx, [esp+0B0h]
.text:0040761B                 lea     ebx, [esp+5Ch]
.text:0040761F                 mov     [esp+18h], edx
.text:00407623                 lea     ecx, [esp+58h]
.text:00407627                 lea     edx, [esp+54h]
.text:0040762B                 mov     [esp+14h], ebx
.text:0040762F                 lea     eax, [esp+4B0h]
.text:00407636                 mov     [esp+10h], ecx
.text:0040763A                 mov     [esp+0Ch], edx
.text:0040763E                 mov     dword ptr [esp+8], 400h
.text:00407646                 mov     [esp+4], eax
.text:0040764A                 mov     [esp], ebp
.text:0040764D                 call    GetVolumeInformationA
.text:00407652                 sub     esp, 20h
.text:00407655                 test    eax, eax
.text:00407657                 jz      loc_407AEE
.text:0040765D                 test    esi, esi
.text:0040765F                 jz      short loc_407685
.text:00407661                 mov     [esp], ebp
.text:00407664                 lea     edx, [esp+48h]
.text:00407668                 lea     ebx, [esp+40h]
.text:0040766C                 mov     [esp+0Ch], edx
.text:00407670                 lea     ecx, [esp+38h]
.text:00407674                 mov     [esp+8], ebx
.text:00407678                 mov     [esp+4], ecx
.text:0040767C                 call    esi
.text:0040767E                 sub     esp, 10h
.text:00407681                 mov     [esp+20h], eax
.text:00407685
.text:00407685 loc_407685:                             ; CODE XREF: .text:0040765F↑j
.text:00407685                 test    edi, edi
.text:00407687                 jz      short loc_407694
.text:00407689                 mov     [esp], edi
.text:0040768C                 call    FreeLibrary
.text:00407691                 sub     esp, 4
.text:00407694
.text:00407694 loc_407694:                             ; CODE XREF: .text:00407687↑j
.text:00407694                 call    sub_409CA0
.text:00407699                 test    eax, eax
.text:0040769B                 lea     esi, [esp+28h]
.text:0040769F                 jz      loc_407AD0
.text:004076A5                 call    sub_409CA0
.text:004076AA                 test    eax, eax
.text:004076AC                 jz      short loc_4076BC
.text:004076AE                 call    sub_409BF0
.text:004076B3                 cmp     eax, 0Bh
.text:004076B6                 jle     loc_407AA4
.text:004076BC
.text:004076BC loc_4076BC:                             ; CODE XREF: .text:004076AC↑j
.text:004076BC                 cld
.text:004076BD                 xor     eax, eax
.text:004076BF                 lea     ebx, [esp+60h]
.text:004076C3                 mov     ecx, 7
.text:004076C8                 mov     edi, ebx
.text:004076CA                 rep stosd
.text:004076CC                 mov     dword ptr [esp+18h], 0
.text:004076D4                 mov     dword ptr [esp+14h], 4000000h
.text:004076DC                 mov     dword ptr [esp+10h], 0
.text:004076E4                 mov     dword ptr [esp+0Ch], 0
.text:004076EC                 mov     dword ptr [esp+8], 0
.text:004076F4                 mov     dword ptr [esp+4], 0
.text:004076FC                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00407703                 call    CreateFileA
.text:00407708                 sub     esp, 1Ch
.text:0040770B                 mov     edi, eax
.text:0040770D                 cmp     eax, 0FFFFFFFFh
.text:00407710                 jz      short loc_407790
.text:00407712                 mov     [esp+10h], ebx
.text:00407716                 lea     edx, [esp+80h]
.text:0040771D                 lea     ecx, [esp+24h]
.text:00407721                 mov     [esp+70h], edx
.text:00407725                 mov     [esp+18h], ecx
.text:00407729                 mov     [esp+8], ebx
.text:0040772D                 mov     dword ptr [esp+6Ch], 7303h
.text:00407735                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040773D                 mov     [esp+64h], ebp
.text:00407741                 mov     dword ptr [esp+78h], 1
.text:00407749                 mov     dword ptr [esp+1Ch], 0
.text:00407751                 mov     dword ptr [esp+14h], 1Ch
.text:00407759                 mov     dword ptr [esp+0Ch], 1Ch
.text:00407761                 mov     dword ptr [esp+4], 6
.text:00407769                 mov     [esp], eax
.text:0040776C                 call    DeviceIoControl
.text:00407771                 sub     esp, 20h
.text:00407774                 mov     ebx, eax
.text:00407776                 mov     [esp], edi
.text:00407779                 call    CloseHandle
.text:0040777E                 sub     esp, 4
.text:00407781                 test    ebx, ebx
.text:00407783                 jz      short loc_407790
.text:00407785                 test    byte ptr [esp+78h], 1
.text:0040778A                 jz      loc_407A70
.text:00407790
.text:00407790 loc_407790:                             ; CODE XREF: .text:00407710↑j
.text:00407790                                         ; .text:00407783↑j
.text:00407790                 call    sub_406E90
.text:00407795                 mov     edi, eax
.text:00407797                 call    _errno
.text:0040779C                 mov     [eax], edi
.text:0040779E                 xor     eax, eax
.text:004077A0
.text:004077A0 loc_4077A0:                             ; CODE XREF: .text:00407A9F↓j
.text:004077A0                                         ; .text:00407ACB↓j
.text:004077A0                 test    eax, eax
.text:004077A2                 jnz     short loc_4077C4
.text:004077A4                 mov     dword ptr [esp+34h], 1
.text:004077AC                 mov     dword ptr [esp+30h], 200h
.text:004077B4                 mov     dword ptr [esp+2Ch], 0
.text:004077BC                 mov     dword ptr [esp+28h], 0
.text:004077C4
.text:004077C4 loc_4077C4:                             ; CODE XREF: .text:004077A2↑j
.text:004077C4                 mov     edx, [esp+30h]
.text:004077C8                 mov     edi, [esp+34h]
.text:004077CC                 mov     ecx, [esp+20h]
.text:004077D0                 imul    edi, edx
.text:004077D3                 test    ecx, ecx
.text:004077D5                 jnz     short loc_4077FD
.text:004077D7                 mov     eax, [esp+28h]
.text:004077DB                 mul     edi
.text:004077DD                 mov     esi, eax
.text:004077DF                 mov     eax, [esp+2Ch]
.text:004077E3                 mov     [esp+44h], edx
.text:004077E7                 mov     [esp+40h], esi
.text:004077EB                 mul     edi
.text:004077ED                 mov     [esp+48h], eax
.text:004077F1                 mov     [esp+4Ch], edx
.text:004077F5                 mov     [esp+38h], eax
.text:004077F9                 mov     [esp+3Ch], edx
.text:004077FD
.text:004077FD loc_4077FD:                             ; CODE XREF: .text:004077D5↑j
.text:004077FD                 mov     ebx, [esp+5Ch]
.text:00407801                 lea     edx, [esp+0B0h]
.text:00407808                 mov     ecx, [esp+8D4h]
.text:0040780F                 mov     [ecx+48h], ebx
.text:00407812                 mov     dword ptr [esp+4], offset loc_407578
.text:0040781A                 mov     [esp], edx
.text:0040781D                 call    _stricmp
.text:00407822                 test    eax, eax
.text:00407824                 jnz     loc_4079E0
.text:0040782A                 mov     esi, [esp+8D4h]
.text:00407831                 mov     dword ptr [esi], 5346544Eh
.text:00407837
.text:00407837 loc_407837:                             ; CODE XREF: .text:00407A08↓j
.text:00407837                                         ; .text:00407A35↓j ...
.text:00407837                 mov     ebx, [esp+30h]
.text:0040783B                 mov     esi, [esp+8D4h]
.text:00407842                 mov     [esi+4], ebx
.text:00407845                 mov     [esi+8], ebx
.text:00407848                 mov     ebx, [esi+8]
.text:0040784B                 mov     [esi+0Ch], edi
.text:0040784E                 mov     ecx, [esp+44h]
.text:00407852                 xor     esi, esi
.text:00407854                 mov     [esp+8], ebx
.text:00407858                 mov     edx, [esp+40h]
.text:0040785C                 mov     [esp+0Ch], esi
.text:00407860                 mov     [esp+4], ecx
.text:00407864                 mov     [esp], edx
.text:00407867                 call    sub_40C4B0
.text:0040786C                 mov     ecx, [esp+8D4h]
.text:00407873                 mov     [ecx+10h], eax
.text:00407876                 mov     [ecx+14h], edx
.text:00407879                 mov     ecx, [esp+4Ch]
.text:0040787D                 mov     [esp+8], ebx
.text:00407881                 mov     edx, [esp+48h]
.text:00407885                 mov     [esp+0Ch], esi
.text:00407889                 mov     [esp+4], ecx
.text:0040788D                 mov     [esp], edx
.text:00407890                 call    sub_40C4B0
.text:00407895                 mov     ecx, [esp+8D4h]
.text:0040789C                 mov     [ecx+18h], eax
.text:0040789F                 mov     [ecx+1Ch], edx
.text:004078A2                 mov     ecx, [esp+38h]
.text:004078A6                 mov     [esp+8], ebx
.text:004078AA                 mov     ebx, [esp+3Ch]
.text:004078AE                 mov     [esp+0Ch], esi
.text:004078B2                 mov     [esp], ecx
.text:004078B5                 mov     [esp+4], ebx
.text:004078B9                 call    sub_40C4B0
.text:004078BE                 mov     esi, [esp+8D4h]
.text:004078C5                 mov     [esi+20h], eax
.text:004078C8                 mov     [esi+24h], edx
.text:004078CB                 mov     ecx, [esp+44h]
.text:004078CF                 mov     esi, edi
.text:004078D1                 mov     [esp+8], esi
.text:004078D5                 mov     edx, [esp+40h]
.text:004078D9                 xor     edi, edi
.text:004078DB                 mov     [esp+0Ch], edi
.text:004078DF                 mov     [esp+4], ecx
.text:004078E3                 mov     [esp], edx
.text:004078E6                 call    sub_40C4B0
.text:004078EB                 mov     ebx, [esp+8D4h]
.text:004078F2                 mov     [ebx+28h], eax
.text:004078F5                 mov     [ebx+2Ch], edx
.text:004078F8                 mov     ecx, [esp+4Ch]
.text:004078FC                 mov     [esp+8], esi
.text:00407900                 mov     edx, [esp+48h]
.text:00407904                 mov     [esp+0Ch], edi
.text:00407908                 mov     [esp+4], ecx
.text:0040790C                 mov     [esp], edx
.text:0040790F                 call    sub_40C4B0
.text:00407914                 mov     ebx, [esp+8D4h]
.text:0040791B                 mov     [ebx+30h], eax
.text:0040791E                 mov     [ebx+34h], edx
.text:00407921                 mov     ecx, [esp+3Ch]
.text:00407925                 mov     [esp+8], esi
.text:00407929                 mov     edx, [esp+38h]
.text:0040792D                 mov     [esp+0Ch], edi
.text:00407931                 mov     [esp+4], ecx
.text:00407935                 mov     [esp], edx
.text:00407938                 call    sub_40C4B0
.text:0040793D                 mov     edx, [esp+8D4h]
.text:00407944                 lea     ecx, [esp+0B0h]
.text:0040794B                 mov     [edx+38h], eax
.text:0040794E                 mov     esi, [esp+58h]
.text:00407952                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00407959                 mov     [edx+110h], esi
.text:0040795F                 mov     esi, edx
.text:00407961                 add     esi, 4Ch ; 'L'
.text:00407964                 movzx   ebx, word ptr [esp+56h]
.text:00407969                 movzx   edi, word ptr [esp+54h]
.text:0040796E                 mov     [edx+3Ch], ebx
.text:00407971                 lea     ebx, [esp+4B0h]
.text:00407978                 mov     [edx+40h], edi
.text:0040797B                 mov     [esp+4], ecx
.text:0040797F                 mov     dword ptr [esp+8], 10h
.text:00407987                 mov     [esp], esi
.text:0040798A                 call    strncpy
.text:0040798F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00407997                 mov     edi, [esp+8D4h]
.text:0040799E                 mov     [esp+4], ebx
.text:004079A2                 add     edi, 5Ch ; '\'
.text:004079A5                 mov     [esp], edi
.text:004079A8                 call    strncpy
.text:004079AD                 mov     [esp+4], ebp
.text:004079B1                 mov     ebp, [esp+8D4h]
.text:004079B8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:004079C0                 add     ebp, 0B6h ; '¶'
.text:004079C6                 mov     [esp], ebp
.text:004079C9                 call    strncpy
.text:004079CE                 xor     eax, eax
.text:004079D0
.text:004079D0 loc_4079D0:                             ; CODE XREF: .text:00407B0C↓j
.text:004079D0                 add     esp, 8BCh
.text:004079D6                 pop     ebx
.text:004079D7                 pop     esi
.text:004079D8                 pop     edi
.text:004079D9                 pop     ebp
.text:004079DA                 retn
.text:004079DA ; ---------------------------------------------------------------------------
.text:004079DB                 align 10h
.text:004079E0
.text:004079E0 loc_4079E0:                             ; CODE XREF: .text:00407824↑j
.text:004079E0                 mov     dword ptr [esp+4], 40757Dh
.text:004079E8                 lea     eax, [esp+0B0h]
.text:004079EF                 mov     [esp], eax
.text:004079F2                 call    _stricmp
.text:004079F7                 test    eax, eax
.text:004079F9                 jnz     short loc_407A0D
.text:004079FB                 mov     edx, [esp+8D4h]
.text:00407A02                 mov     dword ptr [edx], 4008h
.text:00407A08                 jmp     loc_407837
.text:00407A0D ; ---------------------------------------------------------------------------
.text:00407A0D
.text:00407A0D loc_407A0D:                             ; CODE XREF: .text:004079F9↑j
.text:00407A0D                 mov     dword ptr [esp+4], 407583h
.text:00407A15                 lea     ecx, [esp+0B0h]
.text:00407A1C                 mov     [esp], ecx
.text:00407A1F                 call    _stricmp
.text:00407A24                 test    eax, eax
.text:00407A26                 jnz     short loc_407A3A
.text:00407A28                 mov     ebx, [esp+8D4h]
.text:00407A2F                 mov     dword ptr [ebx], 4006h
.text:00407A35                 jmp     loc_407837
.text:00407A3A ; ---------------------------------------------------------------------------
.text:00407A3A
.text:00407A3A loc_407A3A:                             ; CODE XREF: .text:00407A26↑j
.text:00407A3A                 mov     dword ptr [esp+4], 407587h
.text:00407A42                 lea     eax, [esp+0B0h]
.text:00407A49                 mov     [esp], eax
.text:00407A4C                 call    _stricmp
.text:00407A51                 test    eax, eax
.text:00407A53                 mov     esi, [esp+8D4h]
.text:00407A5A                 setnz   cl
.text:00407A5D                 movzx   edx, cl
.text:00407A60                 dec     edx
.text:00407A61                 and     edx, 4000h
.text:00407A67                 mov     [esi], edx
.text:00407A69                 jmp     loc_407837
.text:00407A69 ; ---------------------------------------------------------------------------
.text:00407A6E                 align 10h
.text:00407A70
.text:00407A70 loc_407A70:                             ; CODE XREF: .text:0040778A↑j
.text:00407A70                 mov     edi, [esp+84h]
.text:00407A77                 mov     eax, 1
.text:00407A7C                 mov     edx, [esp+88h]
.text:00407A83                 mov     ecx, [esp+8Ch]
.text:00407A8A                 mov     ebx, [esp+90h]
.text:00407A91                 mov     [esp+34h], edi
.text:00407A95                 mov     [esp+30h], edx
.text:00407A99                 mov     [esp+2Ch], ecx
.text:00407A9D                 mov     [esi], ebx
.text:00407A9F                 jmp     loc_4077A0
.text:00407AA4 ; ---------------------------------------------------------------------------
.text:00407AA4
.text:00407AA4 loc_407AA4:                             ; CODE XREF: .text:004076B6↑j
.text:00407AA4                 mov     [esp+10h], esi
.text:00407AA8                 lea     eax, [esp+2Ch]
.text:00407AAC                 lea     esi, [esp+30h]
.text:00407AB0                 mov     [esp+0Ch], eax
.text:00407AB4                 lea     edi, [esp+34h]
.text:00407AB8                 mov     [esp+8], esi
.text:00407ABC                 mov     [esp+4], edi
.text:00407AC0
.text:00407AC0 loc_407AC0:                             ; CODE XREF: .text:00407AEC↓j
.text:00407AC0                 mov     [esp], ebp
.text:00407AC3                 call    GetDiskFreeSpaceA
.text:00407AC8                 sub     esp, 14h
.text:00407ACB                 jmp     loc_4077A0
.text:00407AD0 ; ---------------------------------------------------------------------------
.text:00407AD0
.text:00407AD0 loc_407AD0:                             ; CODE XREF: .text:0040769F↑j
.text:00407AD0                 mov     [esp+10h], esi
.text:00407AD4                 lea     ebx, [esp+2Ch]
.text:00407AD8                 lea     eax, [esp+30h]
.text:00407ADC                 mov     [esp+0Ch], ebx
.text:00407AE0                 lea     esi, [esp+34h]
.text:00407AE4                 mov     [esp+8], eax
.text:00407AE8                 mov     [esp+4], esi
.text:00407AEC                 jmp     short loc_407AC0
.text:00407AEE ; ---------------------------------------------------------------------------
.text:00407AEE
.text:00407AEE loc_407AEE:                             ; CODE XREF: .text:00407657↑j
.text:00407AEE                 mov     [esp], edi
.text:00407AF1                 call    FreeLibrary
.text:00407AF6                 sub     esp, 4
.text:00407AF9                 call    sub_406E90
.text:00407AFE                 mov     esi, eax
.text:00407B00                 call    _errno
.text:00407B05                 mov     [eax], esi
.text:00407B07
.text:00407B07 loc_407B07:                             ; CODE XREF: .text:00407B27↓j
.text:00407B07                 mov     eax, 0FFFFFFFFh
.text:00407B0C                 jmp     loc_4079D0
.text:00407B11 ; ---------------------------------------------------------------------------
.text:00407B11
.text:00407B11 loc_407B11:                             ; CODE XREF: .text:004075D1↑j
.text:00407B11                 mov     [esp], edi
.text:00407B14                 call    FreeLibrary
.text:00407B19                 sub     esp, 4
.text:00407B1C                 call    _errno
.text:00407B21                 mov     dword ptr [eax], 2
.text:00407B27                 jmp     short loc_407B07
.text:00407B27 ; ---------------------------------------------------------------------------
.text:00407B29                 align 10h
.text:00407B30
.text:00407B30 ; =============== S U B R O U T I N E =======================================
.text:00407B30
.text:00407B30
.text:00407B30 ; int __cdecl sub_407B30(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00407B30 sub_407B30      proc near               ; CODE XREF: sub_405880+2C7↑p
.text:00407B30                                         ; .text:00405EBA↑p
.text:00407B30
.text:00407B30 lpFileName      = dword ptr -9Ch
.text:00407B30 dwDesiredAccess = dword ptr -98h
.text:00407B30 dwShareMode     = dword ptr -94h
.text:00407B30 lpSecurityAttributes= dword ptr -90h
.text:00407B30 dwCreationDisposition= dword ptr -8Ch
.text:00407B30 dwFlagsAndAttributes= dword ptr -88h
.text:00407B30 hTemplateFile   = dword ptr -84h
.text:00407B30 lpOverlapped    = dword ptr -80h
.text:00407B30 BytesReturned   = dword ptr -70h
.text:00407B30 InBuffer        = byte ptr -6Ch
.text:00407B30 var_68          = dword ptr -68h
.text:00407B30 var_64          = dword ptr -64h
.text:00407B30 var_60          = dword ptr -60h
.text:00407B30 var_5C          = dword ptr -5Ch
.text:00407B30 var_54          = dword ptr -54h
.text:00407B30 var_4C          = byte ptr -4Ch
.text:00407B30 var_48          = dword ptr -48h
.text:00407B30 var_44          = dword ptr -44h
.text:00407B30 var_40          = dword ptr -40h
.text:00407B30 var_3C          = dword ptr -3Ch
.text:00407B30 lpRootPathName  = dword ptr -2Ch
.text:00407B30 lpSectorsPerCluster= dword ptr -28h
.text:00407B30 lpBytesPerSector= dword ptr -24h
.text:00407B30 lpNumberOfFreeClusters= dword ptr -20h
.text:00407B30 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00407B30 var_18          = dword ptr -18h
.text:00407B30 var_14          = dword ptr -14h
.text:00407B30 var_10          = dword ptr -10h
.text:00407B30 var_C           = dword ptr -0Ch
.text:00407B30 var_8           = dword ptr -8
.text:00407B30 var_4           = dword ptr -4
.text:00407B30 arg_0           = dword ptr  4
.text:00407B30 arg_4           = dword ptr  8
.text:00407B30 arg_8           = dword ptr  0Ch
.text:00407B30 arg_C           = dword ptr  10h
.text:00407B30 arg_10          = dword ptr  14h
.text:00407B30
.text:00407B30                 sub     esp, 2Ch
.text:00407B33                 mov     edx, [esp+2Ch+arg_0]
.text:00407B37                 mov     [esp+2Ch+var_10], ebx
.text:00407B3B                 mov     ebx, [esp+2Ch+arg_10]
.text:00407B3F                 mov     [esp+2Ch+var_C], esi
.text:00407B43                 mov     esi, [esp+2Ch+arg_C]
.text:00407B47                 mov     [esp+2Ch+var_8], edi
.text:00407B4B                 mov     edi, [esp+2Ch+arg_8]
.text:00407B4F                 mov     [esp+2Ch+var_4], ebp
.text:00407B53                 mov     ebp, [esp+2Ch+arg_4]
.text:00407B57                 mov     [esp+2Ch+var_14], edx
.text:00407B5B                 call    sub_409CA0
.text:00407B60                 test    eax, eax
.text:00407B62                 jz      short loc_407B94
.text:00407B64                 mov     [esp+2Ch+arg_10], ebx
.text:00407B68                 mov     edx, [esp+2Ch+var_14]
.text:00407B6C                 mov     ebx, [esp+2Ch+var_10]
.text:00407B70                 mov     [esp+2Ch+arg_C], esi
.text:00407B74                 mov     esi, [esp+2Ch+var_C]
.text:00407B78                 mov     [esp+2Ch+arg_8], edi
.text:00407B7C                 mov     edi, [esp+2Ch+var_8]
.text:00407B80                 mov     [esp+2Ch+arg_4], ebp
.text:00407B84                 mov     ebp, [esp+2Ch+var_4]
.text:00407B88                 mov     [esp+2Ch+arg_0], edx
.text:00407B8C                 add     esp, 2Ch
.text:00407B8F                 jmp     loc_407C40
.text:00407B94 ; ---------------------------------------------------------------------------
.text:00407B94
.text:00407B94 loc_407B94:                             ; CODE XREF: sub_407B30+32↑j
.text:00407B94                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00407B98                 mov     ecx, [esp+2Ch+var_14]
.text:00407B9C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00407BA0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00407BA4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00407BA8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:00407BAB                 call    GetDiskFreeSpaceA
.text:00407BB0                 sub     esp, 14h
.text:00407BB3                 mov     ebx, [esp+2Ch+var_10]
.text:00407BB7                 mov     esi, [esp+2Ch+var_C]
.text:00407BBB                 mov     edi, [esp+2Ch+var_8]
.text:00407BBF                 mov     ebp, [esp+2Ch+var_4]
.text:00407BC3                 add     esp, 2Ch
.text:00407BC6                 retn
.text:00407BC6 ; ---------------------------------------------------------------------------
.text:00407BC7                 align 10h
.text:00407BD0
.text:00407BD0 loc_407BD0:                             ; CODE XREF: .text:004086AD↓p
.text:00407BD0                 sub     esp, 1Ch
.text:00407BD3                 mov     [esp+1Ch+var_4], esi
.text:00407BD7                 mov     esi, [esp+1Ch+arg_0]
.text:00407BDB                 mov     [esp+1Ch+var_8], ebx
.text:00407BDF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00407BE2                 call    sub_407110
.text:00407BE7                 test    eax, eax
.text:00407BE9                 mov     ebx, eax
.text:00407BEB                 jz      short loc_407C00
.text:00407BED                 cmp     byte ptr [eax], 0
.text:00407BF0                 jz      short loc_407C00
.text:00407BF2                 test    esi, esi
.text:00407BF4                 jz      short loc_407C00
.text:00407BF6                 cmp     byte ptr [esi], 0
.text:00407BF9                 jnz     short loc_407C26
.text:00407BFB                 nop
.text:00407BFC                 lea     esi, [esi+0]
.text:00407C00
.text:00407C00 loc_407C00:                             ; CODE XREF: sub_407B30+BB↑j
.text:00407C00                                         ; sub_407B30+C0↑j ...
.text:00407C00                 call    _errno
.text:00407C05                 mov     dword ptr [eax], 2
.text:00407C0B                 mov     esi, 0FFFFFFFFh
.text:00407C10
.text:00407C10 loc_407C10:                             ; CODE XREF: sub_407B30+108↓j
.text:00407C10                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00407C13                 call    free
.text:00407C18                 mov     eax, esi
.text:00407C1A                 mov     ebx, [esp+1Ch+var_8]
.text:00407C1E                 mov     esi, [esp+1Ch+var_4]
.text:00407C22                 add     esp, 1Ch
.text:00407C25                 retn
.text:00407C26 ; ---------------------------------------------------------------------------
.text:00407C26
.text:00407C26 loc_407C26:                             ; CODE XREF: sub_407B30+C9↑j
.text:00407C26                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00407C29                 mov     edx, [esp+1Ch+arg_4]
.text:00407C2D                 mov     [esp+1Ch+var_18], edx
.text:00407C31                 call    near ptr loc_40758B+5
.text:00407C36                 mov     esi, eax
.text:00407C38                 jmp     short loc_407C10
.text:00407C38 ; ---------------------------------------------------------------------------
.text:00407C3A                 align 10h
.text:00407C40
.text:00407C40 loc_407C40:                             ; CODE XREF: sub_407B30+5F↑j
.text:00407C40                 push    ebp
.text:00407C41                 push    edi
.text:00407C42                 push    esi
.text:00407C43                 push    ebx
.text:00407C44                 sub     esp, 8Ch
.text:00407C4A                 mov     ebp, [esp+9Ch+arg_0]
.text:00407C51                 call    sub_409CA0
.text:00407C56                 test    eax, eax
.text:00407C58                 jz      short loc_407C68
.text:00407C5A                 call    sub_409BF0
.text:00407C5F                 cmp     eax, 0Bh
.text:00407C62                 jle     loc_407D90
.text:00407C68
.text:00407C68 loc_407C68:                             ; CODE XREF: sub_407B30+128↑j
.text:00407C68                 cld
.text:00407C69                 xor     eax, eax
.text:00407C6B                 lea     ebx, [esp+9Ch+InBuffer]
.text:00407C6F                 mov     ecx, 7
.text:00407C74                 mov     edi, ebx
.text:00407C76                 lea     esi, [esp+9Ch+var_4C]
.text:00407C7A                 rep stosd
.text:00407C7C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00407C84                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:00407C8C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00407C94                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00407C9C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00407CA4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00407CAC                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00407CB3                 call    CreateFileA
.text:00407CB8                 sub     esp, 1Ch
.text:00407CBB                 mov     edi, eax
.text:00407CBD                 cmp     eax, 0FFFFFFFFh
.text:00407CC0                 jz      short loc_407D35
.text:00407CC2                 mov     [esp+9Ch+var_68], ebp
.text:00407CC6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:00407CCA                 mov     [esp+9Ch+var_5C], esi
.text:00407CCE                 mov     [esp+9Ch+var_60], 7303h
.text:00407CD6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:00407CDE                 mov     [esp+9Ch+var_54], 1
.text:00407CE6                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:00407CEE                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:00407CF2                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:00407CFA                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:00407CFE                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:00407D06                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:00407D0A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00407D12                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00407D15                 call    DeviceIoControl
.text:00407D1A                 sub     esp, 20h
.text:00407D1D                 mov     esi, eax
.text:00407D1F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00407D22                 call    CloseHandle
.text:00407D27                 sub     esp, 4
.text:00407D2A                 test    esi, esi
.text:00407D2C                 jz      short loc_407D35
.text:00407D2E                 test    byte ptr [esp+9Ch+var_54], 1
.text:00407D33                 jz      short loc_407D50
.text:00407D35
.text:00407D35 loc_407D35:                             ; CODE XREF: sub_407B30+190↑j
.text:00407D35                                         ; sub_407B30+1FC↑j
.text:00407D35                 call    sub_406E90
.text:00407D3A                 mov     edi, eax
.text:00407D3C                 call    _errno
.text:00407D41                 mov     [eax], edi
.text:00407D43                 xor     eax, eax
.text:00407D45
.text:00407D45 loc_407D45:                             ; CODE XREF: sub_407B30+25A↓j
.text:00407D45                                         ; sub_407B30+297↓j
.text:00407D45                 add     esp, 8Ch
.text:00407D4B                 pop     ebx
.text:00407D4C                 pop     esi
.text:00407D4D                 pop     edi
.text:00407D4E                 pop     ebp
.text:00407D4F                 retn
.text:00407D50 ; ---------------------------------------------------------------------------
.text:00407D50
.text:00407D50 loc_407D50:                             ; CODE XREF: sub_407B30+203↑j
.text:00407D50                 mov     edx, [esp+9Ch+var_48]
.text:00407D54                 mov     eax, 1
.text:00407D59                 mov     ebx, [esp+9Ch+arg_4]
.text:00407D60                 mov     ebp, [esp+9Ch+arg_8]
.text:00407D67                 mov     ecx, [esp+9Ch+arg_C]
.text:00407D6E                 mov     [ebx], edx
.text:00407D70                 mov     edi, [esp+9Ch+var_44]
.text:00407D74                 mov     ebx, [esp+9Ch+arg_10]
.text:00407D7B                 mov     [ebp+0], edi
.text:00407D7E                 mov     esi, [esp+9Ch+var_40]
.text:00407D82                 mov     [ecx], esi
.text:00407D84                 mov     edx, [esp+9Ch+var_3C]
.text:00407D88                 mov     [ebx], edx
.text:00407D8A                 jmp     short loc_407D45
.text:00407D8A ; ---------------------------------------------------------------------------
.text:00407D8C                 align 10h
.text:00407D90
.text:00407D90 loc_407D90:                             ; CODE XREF: sub_407B30+132↑j
.text:00407D90                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00407D93                 mov     eax, [esp+9Ch+arg_C]
.text:00407D9A                 mov     ecx, [esp+9Ch+arg_10]
.text:00407DA1                 mov     edx, [esp+9Ch+arg_8]
.text:00407DA8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:00407DAC                 mov     eax, [esp+9Ch+arg_4]
.text:00407DB3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00407DB7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:00407DBB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:00407DBF                 call    GetDiskFreeSpaceA
.text:00407DC4                 sub     esp, 14h
.text:00407DC7                 jmp     loc_407D45
.text:00407DC7 sub_407B30      endp ; sp-analysis failed
.text:00407DC7
.text:00407DC7 ; ---------------------------------------------------------------------------
.text:00407DCC                 align 10h
.text:00407DD0
.text:00407DD0 ; =============== S U B R O U T I N E =======================================
.text:00407DD0
.text:00407DD0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00407DD0
.text:00407DD0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00407DD0 _win32_longpath proc near               ; CODE XREF: .text:00408594↓p
.text:00407DD0
.text:00407DD0 C               = dword ptr -278h
.text:00407DD0 lpFindFileData  = dword ptr -274h
.text:00407DD0 Destination     = byte ptr -268h
.text:00407DD0 var_267         = byte ptr -267h
.text:00407DD0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00407DD0 lpFileName      = dword ptr  8
.text:00407DD0
.text:00407DD0                 push    ebp
.text:00407DD1                 xor     eax, eax
.text:00407DD3                 push    edi
.text:00407DD4                 push    esi
.text:00407DD5                 push    ebx
.text:00407DD6                 sub     esp, 26Ch
.text:00407DDC                 mov     esi, [esp+278h+lpFileName]
.text:00407DE3                 lea     ebp, [esp+278h+Destination]
.text:00407DE7                 test    esi, esi
.text:00407DE9                 jz      loc_407F47
.text:00407DEF                 movsx   edx, byte ptr [esi]
.text:00407DF2                 mov     [esp+278h+C], edx ; C
.text:00407DF5                 call    isalpha
.text:00407DFA                 test    eax, eax
.text:00407DFC                 jz      short loc_407E0F
.text:00407DFE                 mov     eax, [esp+278h+lpFileName]
.text:00407E05                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00407E09                 jz      loc_40814B
.text:00407E0F
.text:00407E0F loc_407E0F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:00407E0F                 mov     edx, [esp+278h+lpFileName]
.text:00407E16                 movzx   eax, byte ptr [edx]
.text:00407E19                 cmp     al, 2Fh ; '/'
.text:00407E1B                 jz      loc_40802B
.text:00407E21                 cmp     al, 5Ch ; '\'
.text:00407E23                 jz      loc_40802B
.text:00407E29
.text:00407E29 loc_407E29:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00407E29                                         ; _win32_longpath+2B1↓j ...
.text:00407E29                 mov     [ebp+268h+Destination], 0
.text:00407E2D                 movzx   ebx, byte ptr [esi]
.text:00407E30                 test    bl, bl
.text:00407E32                 jz      loc_407F29
.text:00407E38                 nop
.text:00407E39                 lea     esi, [esi+0]
.text:00407E40
.text:00407E40 loc_407E40:                             ; CODE XREF: _win32_longpath+153↓j
.text:00407E40                 cmp     bl, 2Fh ; '/'
.text:00407E43                 jz      loc_407FE0
.text:00407E49                 cmp     bl, 5Ch ; '\'
.text:00407E4C                 jz      loc_407FE0
.text:00407E52
.text:00407E52 loc_407E52:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00407E52                                         ; _win32_longpath+22C↓j ...
.text:00407E52                 cmp     bl, 2Eh ; '.'
.text:00407E55                 jz      loc_407F80
.text:00407E5B
.text:00407E5B loc_407E5B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:00407E5B                                         ; _win32_longpath+203↓j
.text:00407E5B                 test    bl, bl
.text:00407E5D                 jz      loc_407F29
.text:00407E63                 cmp     bl, 2Fh ; '/'
.text:00407E66                 jz      short loc_407E82
.text:00407E68                 cmp     bl, 5Ch ; '\'
.text:00407E6B                 jz      short loc_407E82
.text:00407E6D                 lea     esi, [esi+0]
.text:00407E70
.text:00407E70 loc_407E70:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00407E70                 inc     esi
.text:00407E71                 movzx   ebx, byte ptr [esi]
.text:00407E74                 test    bl, bl
.text:00407E76                 jz      short loc_407E82
.text:00407E78                 cmp     bl, 2Fh ; '/'
.text:00407E7B                 jz      short loc_407E82
.text:00407E7D                 cmp     bl, 5Ch ; '\'
.text:00407E80                 jnz     short loc_407E70
.text:00407E82
.text:00407E82 loc_407E82:                             ; CODE XREF: _win32_longpath+96↑j
.text:00407E82                                         ; _win32_longpath+9B↑j ...
.text:00407E82                 mov     byte ptr [esi], 0
.text:00407E85                 lea     edx, [esp+278h+FindFileData]
.text:00407E8C                 mov     eax, [esp+278h+lpFileName]
.text:00407E93                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00407E97                 mov     [esp+278h+C], eax ; lpFileName
.text:00407E9A                 call    FindFirstFileA
.text:00407E9F                 mov     [esi], bl
.text:00407EA1                 sub     esp, 8
.text:00407EA4                 mov     edi, eax
.text:00407EA6                 cmp     eax, 0FFFFFFFFh
.text:00407EA9                 jz      loc_407F6C
.text:00407EAF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00407EB6                 mov     ecx, ebx
.text:00407EB8                 nop
.text:00407EB9                 lea     esi, [esi+0]
.text:00407EC0
.text:00407EC0 loc_407EC0:                             ; CODE XREF: _win32_longpath+105↓j
.text:00407EC0                 mov     eax, [ebx]
.text:00407EC2                 add     ebx, 4
.text:00407EC5                 lea     edx, [eax-1010101h]
.text:00407ECB                 not     eax
.text:00407ECD                 and     edx, eax
.text:00407ECF                 and     edx, 80808080h
.text:00407ED5                 jz      short loc_407EC0
.text:00407ED7                 test    edx, 8080h
.text:00407EDD                 jnz     short loc_407EE5
.text:00407EDF                 shr     edx, 10h
.text:00407EE2                 add     ebx, 2
.text:00407EE5
.text:00407EE5 loc_407EE5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00407EE5                 add     dl, dl
.text:00407EE7                 sbb     ebx, 3
.text:00407EEA                 sub     ebx, ecx
.text:00407EEC                 lea     ecx, [esp+278h+Destination]
.text:00407EF0                 sub     ecx, ebp
.text:00407EF2                 add     ecx, 105h
.text:00407EF8                 cmp     ecx, ebx
.text:00407EFA                 jle     short loc_407F52
.text:00407EFC                 mov     [esp+278h+C], ebp ; Destination
.text:00407EFF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00407F06                 add     ebp, ebx
.text:00407F08                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:00407F0C                 call    strcpy
.text:00407F11                 mov     [esp+278h+C], edi ; hFindFile
.text:00407F14                 call    FindClose
.text:00407F19                 sub     esp, 4
.text:00407F1C
.text:00407F1C loc_407F1C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:00407F1C                 movzx   ecx, byte ptr [esi]
.text:00407F1F                 test    cl, cl
.text:00407F21                 mov     bl, cl
.text:00407F23                 jnz     loc_407E40
.text:00407F29
.text:00407F29 loc_407F29:                             ; CODE XREF: _win32_longpath+62↑j
.text:00407F29                                         ; _win32_longpath+8D↑j
.text:00407F29                 mov     esi, [esp+278h+lpFileName]
.text:00407F30                 lea     ebp, [esp+278h+Destination]
.text:00407F34                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00407F38                 mov     [esp+278h+C], esi ; Destination
.text:00407F3B                 call    strcpy
.text:00407F40                 mov     eax, [esp+278h+lpFileName]
.text:00407F47
.text:00407F47 loc_407F47:                             ; CODE XREF: _win32_longpath+19↑j
.text:00407F47                                         ; _win32_longpath+19A↓j
.text:00407F47                 add     esp, 26Ch
.text:00407F4D                 pop     ebx
.text:00407F4E                 pop     esi
.text:00407F4F                 pop     edi
.text:00407F50                 pop     ebp
.text:00407F51                 retn
.text:00407F52 ; ---------------------------------------------------------------------------
.text:00407F52
.text:00407F52 loc_407F52:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00407F52                 mov     [esp+278h+C], edi ; hFindFile
.text:00407F55                 call    FindClose
.text:00407F5A                 sub     esp, 4
.text:00407F5D                 call    _errno
.text:00407F62                 mov     dword ptr [eax], 22h ; '"'
.text:00407F68
.text:00407F68 loc_407F68:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00407F68                 xor     eax, eax
.text:00407F6A                 jmp     short loc_407F47
.text:00407F6C ; ---------------------------------------------------------------------------
.text:00407F6C
.text:00407F6C loc_407F6C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:00407F6C                 call    _errno
.text:00407F71                 mov     dword ptr [eax], 16h
.text:00407F77                 jmp     short loc_407F68
.text:00407F77 ; ---------------------------------------------------------------------------
.text:00407F79                 align 10h
.text:00407F80
.text:00407F80 loc_407F80:                             ; CODE XREF: _win32_longpath+85↑j
.text:00407F80                 movzx   eax, byte ptr [esi+1]
.text:00407F84                 test    al, al
.text:00407F86                 jnz     short loc_407FB5
.text:00407F88
.text:00407F88 loc_407F88:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00407F88                                         ; _win32_longpath+1EB↓j ...
.text:00407F88                 test    bl, bl
.text:00407F8A                 jz      short loc_407FAC
.text:00407F8C                 cmp     bl, 2Fh ; '/'
.text:00407F8F                 jz      short loc_407FAC
.text:00407F91                 cmp     bl, 5Ch ; '\'
.text:00407F94                 jz      short loc_407FAC
.text:00407F96
.text:00407F96 loc_407F96:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00407F96                 mov     [ebp+268h+Destination], bl
.text:00407F99                 inc     esi
.text:00407F9A                 inc     ebp
.text:00407F9B                 movzx   ebx, byte ptr [esi]
.text:00407F9E                 test    bl, bl
.text:00407FA0                 jz      short loc_407FAC
.text:00407FA2                 cmp     bl, 2Fh ; '/'
.text:00407FA5                 jz      short loc_407FAC
.text:00407FA7                 cmp     bl, 5Ch ; '\'
.text:00407FAA                 jnz     short loc_407F96
.text:00407FAC
.text:00407FAC loc_407FAC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:00407FAC                                         ; _win32_longpath+1BF↑j ...
.text:00407FAC                 mov     [ebp+268h+Destination], 0
.text:00407FB0                 jmp     loc_407F1C
.text:00407FB5 ; ---------------------------------------------------------------------------
.text:00407FB5
.text:00407FB5 loc_407FB5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00407FB5                 cmp     al, 2Fh ; '/'
.text:00407FB7                 jz      short loc_407F88
.text:00407FB9                 cmp     al, 5Ch ; '\'
.text:00407FBB                 jz      short loc_407F88
.text:00407FBD                 cmp     al, 2Eh ; '.'
.text:00407FBF                 jnz     loc_407E5B
.text:00407FC5                 movzx   eax, byte ptr [esi+2]
.text:00407FC9                 test    al, al
.text:00407FCB                 jz      short loc_407F88
.text:00407FCD                 cmp     al, 2Fh ; '/'
.text:00407FCF                 jz      short loc_407F88
.text:00407FD1                 cmp     al, 5Ch ; '\'
.text:00407FD3                 jnz     loc_407E5B
.text:00407FD9                 jmp     short loc_407F88
.text:00407FD9 ; ---------------------------------------------------------------------------
.text:00407FDB                 align 10h
.text:00407FE0
.text:00407FE0 loc_407FE0:                             ; CODE XREF: _win32_longpath+73↑j
.text:00407FE0                                         ; _win32_longpath+7C↑j
.text:00407FE0                 mov     [ebp+268h+Destination], bl
.text:00407FE3                 inc     esi
.text:00407FE4                 inc     ebp
.text:00407FE5                 mov     [ebp+268h+Destination], 0
.text:00407FE9                 movzx   ebx, byte ptr [esi]
.text:00407FEC                 test    bl, bl
.text:00407FEE                 jz      loc_407E52
.text:00407FF4                 cmp     bl, 2Fh ; '/'
.text:00407FF7                 jz      short loc_408010
.text:00407FF9                 cmp     bl, 5Ch ; '\'
.text:00407FFC                 jnz     loc_407E52
.text:00408002                 lea     esi, [esi+0]
.text:00408009                 lea     edi, [edi+0]
.text:00408010
.text:00408010 loc_408010:                             ; CODE XREF: _win32_longpath+227↑j
.text:00408010                                         ; _win32_longpath+24F↓j ...
.text:00408010                 inc     esi
.text:00408011                 movzx   ebx, byte ptr [esi]
.text:00408014                 test    bl, bl
.text:00408016                 jz      loc_407E52
.text:0040801C                 cmp     bl, 2Fh ; '/'
.text:0040801F                 jz      short loc_408010
.text:00408021                 cmp     bl, 5Ch ; '\'
.text:00408024                 jz      short loc_408010
.text:00408026                 jmp     loc_407E52
.text:0040802B ; ---------------------------------------------------------------------------
.text:0040802B
.text:0040802B loc_40802B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040802B                                         ; _win32_longpath+53↑j
.text:0040802B                 mov     edi, [esp+278h+lpFileName]
.text:00408032                 movzx   edx, byte ptr [edi+1]
.text:00408036                 cmp     dl, 2Fh ; '/'
.text:00408039                 jz      short loc_408044
.text:0040803B                 cmp     dl, 5Ch ; '\'
.text:0040803E                 jnz     loc_407E29
.text:00408044
.text:00408044 loc_408044:                             ; CODE XREF: _win32_longpath+269↑j
.text:00408044                 mov     esi, [esp+278h+lpFileName]
.text:0040804B                 mov     [ebp+268h+Destination], al
.text:0040804E                 mov     ecx, [esp+278h+lpFileName]
.text:00408055                 inc     ebp
.text:00408056                 add     esi, 2
.text:00408059                 movzx   ebx, byte ptr [ecx+1]
.text:0040805D                 mov     [ebp+268h+Destination], bl
.text:00408060                 inc     ebp
.text:00408061                 movzx   eax, byte ptr [ecx+2]
.text:00408065                 test    al, al
.text:00408067                 jz      loc_408143
.text:0040806D                 cmp     al, 2Fh ; '/'
.text:0040806F                 jz      loc_408128
.text:00408075                 cmp     al, 5Ch ; '\'
.text:00408077                 mov     bl, al
.text:00408079                 jz      loc_408128
.text:0040807F
.text:0040807F loc_40807F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040807F                                         ; _win32_longpath+376↓j
.text:0040807F                 test    bl, bl
.text:00408081                 jz      loc_407E29
.text:00408087                 cmp     bl, 2Fh ; '/'
.text:0040808A                 jz      short loc_4080AB
.text:0040808C                 cmp     bl, 5Ch ; '\'
.text:0040808F                 jz      short loc_4080AB
.text:00408091
.text:00408091 loc_408091:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00408091                 mov     [ebp+268h+Destination], bl
.text:00408094                 inc     esi
.text:00408095                 inc     ebp
.text:00408096                 movzx   ebx, byte ptr [esi]
.text:00408099                 test    bl, bl
.text:0040809B                 jz      loc_407E29
.text:004080A1                 cmp     bl, 2Fh ; '/'
.text:004080A4                 jz      short loc_4080AB
.text:004080A6                 cmp     bl, 5Ch ; '\'
.text:004080A9                 jnz     short loc_408091
.text:004080AB
.text:004080AB loc_4080AB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:004080AB                                         ; _win32_longpath+2BF↑j ...
.text:004080AB                 test    bl, bl
.text:004080AD                 jz      loc_407E29
.text:004080B3                 mov     [ebp+268h+Destination], bl
.text:004080B6                 inc     esi
.text:004080B7                 inc     ebp
.text:004080B8                 movzx   ebx, byte ptr [esi]
.text:004080BB                 test    bl, bl
.text:004080BD                 jz      loc_407E29
.text:004080C3                 cmp     bl, 2Fh ; '/'
.text:004080C6                 jz      short loc_408110
.text:004080C8                 cmp     bl, 5Ch ; '\'
.text:004080CB                 jz      short loc_408110
.text:004080CD
.text:004080CD loc_4080CD:                             ; CODE XREF: _win32_longpath+356↓j
.text:004080CD                 test    bl, bl
.text:004080CF                 jz      loc_407E29
.text:004080D5                 cmp     bl, 2Fh ; '/'
.text:004080D8                 jz      loc_407E29
.text:004080DE                 cmp     bl, 5Ch ; '\'
.text:004080E1                 jz      loc_407E29
.text:004080E7
.text:004080E7 loc_4080E7:                             ; CODE XREF: _win32_longpath+333↓j
.text:004080E7                 mov     [ebp+268h+Destination], bl
.text:004080EA                 inc     esi
.text:004080EB                 inc     ebp
.text:004080EC                 movzx   ebx, byte ptr [esi]
.text:004080EF                 test    bl, bl
.text:004080F1                 jz      loc_407E29
.text:004080F7                 cmp     bl, 2Fh ; '/'
.text:004080FA                 jz      loc_407E29
.text:00408100                 cmp     bl, 5Ch ; '\'
.text:00408103                 jnz     short loc_4080E7
.text:00408105                 jmp     loc_407E29
.text:00408105 ; ---------------------------------------------------------------------------
.text:0040810A                 align 10h
.text:00408110
.text:00408110 loc_408110:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00408110                                         ; _win32_longpath+2FB↑j ...
.text:00408110                 inc     esi
.text:00408111                 movzx   ebx, byte ptr [esi]
.text:00408114                 test    bl, bl
.text:00408116                 jz      loc_407E29
.text:0040811C                 cmp     bl, 2Fh ; '/'
.text:0040811F                 jz      short loc_408110
.text:00408121                 cmp     bl, 5Ch ; '\'
.text:00408124                 jz      short loc_408110
.text:00408126                 jmp     short loc_4080CD
.text:00408128 ; ---------------------------------------------------------------------------
.text:00408128
.text:00408128 loc_408128:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00408128                                         ; _win32_longpath+2A9↑j ...
.text:00408128                 inc     esi
.text:00408129                 movzx   ebx, byte ptr [esi]
.text:0040812C                 test    bl, bl
.text:0040812E                 jz      loc_407E29
.text:00408134                 cmp     bl, 2Fh ; '/'
.text:00408137                 jz      short loc_408128
.text:00408139                 cmp     bl, 5Ch ; '\'
.text:0040813C                 jz      short loc_408128
.text:0040813E                 jmp     loc_40807F
.text:00408143 ; ---------------------------------------------------------------------------
.text:00408143
.text:00408143 loc_408143:                             ; CODE XREF: _win32_longpath+297↑j
.text:00408143                 movzx   ebx, byte ptr [esi]
.text:00408146                 jmp     loc_40807F
.text:0040814B ; ---------------------------------------------------------------------------
.text:0040814B
.text:0040814B loc_40814B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040814B                 movzx   ecx, byte ptr [eax]
.text:0040814E                 mov     esi, eax
.text:00408150                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00408155                 add     esi, 2
.text:00408158                 lea     ebp, [esp+12h]
.text:0040815C                 mov     [esp+278h+Destination], cl
.text:00408160                 jmp     loc_407E29
.text:00408160 _win32_longpath endp
.text:00408160
.text:00408160 ; ---------------------------------------------------------------------------
.text:00408165                 align 10h
.text:00408170                 sub     esp, 0Ch
.text:00408173                 mov     edx, [esp+10h]
.text:00408177                 mov     dword ptr [esp+4], 0
.text:0040817F                 mov     [esp], edx
.text:00408182                 call    sub_407030
.text:00408187                 inc     eax
.text:00408188                 setnz   dl
.text:0040818B                 add     esp, 0Ch
.text:0040818E                 movzx   eax, dl
.text:00408191                 retn
.text:00408191 ; ---------------------------------------------------------------------------
.text:00408192                 align 10h
.text:004081A0
.text:004081A0 ; =============== S U B R O U T I N E =======================================
.text:004081A0
.text:004081A0
.text:004081A0 sub_4081A0      proc near               ; CODE XREF: sub_406F00+AA↑p
.text:004081A0                                         ; sub_40AD60+B4↓p
.text:004081A0
.text:004081A0 arg_0           = dword ptr  4
.text:004081A0
.text:004081A0                 mov     ecx, [esp+arg_0]
.text:004081A4                 mov     edx, ecx
.text:004081A6                 movzx   eax, byte ptr [ecx]
.text:004081A9                 test    al, al
.text:004081AB                 jz      short loc_4081BC
.text:004081AD                 lea     esi, [esi+0]
.text:004081B0
.text:004081B0 loc_4081B0:                             ; CODE XREF: sub_4081A0+1A↓j
.text:004081B0                 cmp     al, 5Ch ; '\'
.text:004081B2                 jz      short loc_4081C0
.text:004081B4
.text:004081B4 loc_4081B4:                             ; CODE XREF: sub_4081A0+23↓j
.text:004081B4                 inc     edx
.text:004081B5                 movzx   eax, byte ptr [edx]
.text:004081B8                 test    al, al
.text:004081BA                 jnz     short loc_4081B0
.text:004081BC
.text:004081BC loc_4081BC:                             ; CODE XREF: sub_4081A0+B↑j
.text:004081BC                 mov     eax, ecx
.text:004081BE                 retn
.text:004081BE ; ---------------------------------------------------------------------------
.text:004081BF                 align 10h
.text:004081C0
.text:004081C0 loc_4081C0:                             ; CODE XREF: sub_4081A0+12↑j
.text:004081C0                 mov     byte ptr [edx], 2Fh ; '/'
.text:004081C3                 jmp     short loc_4081B4
.text:004081C3 sub_4081A0      endp
.text:004081C3
.text:004081C3 ; ---------------------------------------------------------------------------
.text:004081C5                 align 10h
.text:004081D0                 push    ebx
.text:004081D1                 sub     esp, 8
.text:004081D4                 mov     ebx, [esp+14h]
.text:004081D8                 mov     edx, [esp+10h]
.text:004081DC                 mov     [esp], ebx
.text:004081DF                 mov     [esp+4], edx
.text:004081E3                 call    strcpy
.text:004081E8                 movzx   eax, byte ptr [ebx]
.text:004081EB                 mov     edx, ebx
.text:004081ED                 test    al, al
.text:004081EF                 jz      short loc_40820C
.text:004081F1                 jmp     short loc_408200
.text:004081F1 ; ---------------------------------------------------------------------------
.text:004081F3                 align 10h
.text:00408200
.text:00408200 loc_408200:                             ; CODE XREF: .text:004081F1↑j
.text:00408200                                         ; .text:0040820A↓j
.text:00408200                 cmp     al, 5Ch ; '\'
.text:00408202                 jz      short loc_408213
.text:00408204
.text:00408204 loc_408204:                             ; CODE XREF: .text:00408216↓j
.text:00408204                 inc     edx
.text:00408205                 movzx   eax, byte ptr [edx]
.text:00408208                 test    al, al
.text:0040820A                 jnz     short loc_408200
.text:0040820C
.text:0040820C loc_40820C:                             ; CODE XREF: .text:004081EF↑j
.text:0040820C                 add     esp, 8
.text:0040820F                 xor     eax, eax
.text:00408211                 pop     ebx
.text:00408212                 retn
.text:00408213 ; ---------------------------------------------------------------------------
.text:00408213
.text:00408213 loc_408213:                             ; CODE XREF: .text:00408202↑j
.text:00408213                 mov     byte ptr [edx], 2Fh ; '/'
.text:00408216                 jmp     short loc_408204
.text:00408216 ; ---------------------------------------------------------------------------
.text:00408218                 align 10h
.text:00408220
.text:00408220 ; =============== S U B R O U T I N E =======================================
.text:00408220
.text:00408220
.text:00408220 sub_408220      proc near               ; CODE XREF: sub_405880+16↑p
.text:00408220                                         ; sub_405D80+1F↑p ...
.text:00408220
.text:00408220 arg_0           = dword ptr  4
.text:00408220
.text:00408220                 mov     ecx, [esp+arg_0]
.text:00408224                 mov     edx, ecx
.text:00408226                 movzx   eax, byte ptr [ecx]
.text:00408229                 test    al, al
.text:0040822B                 jz      short loc_40823C
.text:0040822D                 lea     esi, [esi+0]
.text:00408230
.text:00408230 loc_408230:                             ; CODE XREF: sub_408220+1A↓j
.text:00408230                 cmp     al, 2Fh ; '/'
.text:00408232                 jz      short loc_408240
.text:00408234
.text:00408234 loc_408234:                             ; CODE XREF: sub_408220+23↓j
.text:00408234                 inc     edx
.text:00408235                 movzx   eax, byte ptr [edx]
.text:00408238                 test    al, al
.text:0040823A                 jnz     short loc_408230
.text:0040823C
.text:0040823C loc_40823C:                             ; CODE XREF: sub_408220+B↑j
.text:0040823C                 mov     eax, ecx
.text:0040823E                 retn
.text:0040823E ; ---------------------------------------------------------------------------
.text:0040823F                 align 10h
.text:00408240
.text:00408240 loc_408240:                             ; CODE XREF: sub_408220+12↑j
.text:00408240                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408243                 jmp     short loc_408234
.text:00408243 sub_408220      endp
.text:00408243
.text:00408243 ; ---------------------------------------------------------------------------
.text:00408245                 align 10h
.text:00408250                 push    ebx
.text:00408251                 sub     esp, 8
.text:00408254                 mov     ebx, [esp+14h]
.text:00408258                 mov     edx, [esp+10h]
.text:0040825C                 mov     [esp], ebx
.text:0040825F                 mov     [esp+4], edx
.text:00408263                 call    strcpy
.text:00408268                 movzx   eax, byte ptr [ebx]
.text:0040826B                 mov     edx, ebx
.text:0040826D                 test    al, al
.text:0040826F                 jz      short loc_40828C
.text:00408271                 jmp     short loc_408280
.text:00408271 ; ---------------------------------------------------------------------------
.text:00408273                 align 10h
.text:00408280
.text:00408280 loc_408280:                             ; CODE XREF: .text:00408271↑j
.text:00408280                                         ; .text:0040828A↓j
.text:00408280                 cmp     al, 2Fh ; '/'
.text:00408282                 jz      short loc_408293
.text:00408284
.text:00408284 loc_408284:                             ; CODE XREF: .text:00408296↓j
.text:00408284                 inc     edx
.text:00408285                 movzx   eax, byte ptr [edx]
.text:00408288                 test    al, al
.text:0040828A                 jnz     short loc_408280
.text:0040828C
.text:0040828C loc_40828C:                             ; CODE XREF: .text:0040826F↑j
.text:0040828C                 add     esp, 8
.text:0040828F                 xor     eax, eax
.text:00408291                 pop     ebx
.text:00408292                 retn
.text:00408293 ; ---------------------------------------------------------------------------
.text:00408293
.text:00408293 loc_408293:                             ; CODE XREF: .text:00408282↑j
.text:00408293                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408296                 jmp     short loc_408284
.text:00408296 ; ---------------------------------------------------------------------------
.text:00408298                 align 10h
.text:004082A0                 push    ebx
.text:004082A1                 sub     esp, 8
.text:004082A4                 mov     ebx, [esp+14h]
.text:004082A8                 mov     edx, [esp+10h]
.text:004082AC                 mov     [esp+4], ebx
.text:004082B0                 mov     [esp], edx
.text:004082B3                 call    sub_406EB0
.text:004082B8                 movzx   eax, byte ptr [ebx]
.text:004082BB                 mov     edx, ebx
.text:004082BD                 test    al, al
.text:004082BF                 jz      short loc_4082DC
.text:004082C1                 jmp     short loc_4082D0
.text:004082C1 ; ---------------------------------------------------------------------------
.text:004082C3                 align 10h
.text:004082D0
.text:004082D0 loc_4082D0:                             ; CODE XREF: .text:004082C1↑j
.text:004082D0                                         ; .text:004082DA↓j
.text:004082D0                 cmp     al, 2Fh ; '/'
.text:004082D2                 jz      short loc_4082E3
.text:004082D4
.text:004082D4 loc_4082D4:                             ; CODE XREF: .text:004082E6↓j
.text:004082D4                 inc     edx
.text:004082D5                 movzx   eax, byte ptr [edx]
.text:004082D8                 test    al, al
.text:004082DA                 jnz     short loc_4082D0
.text:004082DC
.text:004082DC loc_4082DC:                             ; CODE XREF: .text:004082BF↑j
.text:004082DC                 add     esp, 8
.text:004082DF                 xor     eax, eax
.text:004082E1                 pop     ebx
.text:004082E2                 retn
.text:004082E3 ; ---------------------------------------------------------------------------
.text:004082E3
.text:004082E3 loc_4082E3:                             ; CODE XREF: .text:004082D2↑j
.text:004082E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004082E6                 jmp     short loc_4082D4
.text:004082E6 ; ---------------------------------------------------------------------------
.text:004082E8                 align 10h
.text:004082F0                 push    ebx
.text:004082F1                 sub     esp, 8
.text:004082F4                 mov     ebx, [esp+14h]
.text:004082F8                 mov     edx, [esp+10h]
.text:004082FC                 mov     [esp], ebx
.text:004082FF                 mov     [esp+4], edx
.text:00408303                 call    sub_406EB0
.text:00408308                 movzx   eax, byte ptr [ebx]
.text:0040830B                 mov     edx, ebx
.text:0040830D                 test    al, al
.text:0040830F                 jz      short loc_40832C
.text:00408311                 jmp     short loc_408320
.text:00408311 ; ---------------------------------------------------------------------------
.text:00408313                 align 10h
.text:00408320
.text:00408320 loc_408320:                             ; CODE XREF: .text:00408311↑j
.text:00408320                                         ; .text:0040832A↓j
.text:00408320                 cmp     al, 5Ch ; '\'
.text:00408322                 jz      short loc_408331
.text:00408324
.text:00408324 loc_408324:                             ; CODE XREF: .text:00408334↓j
.text:00408324                 inc     edx
.text:00408325                 movzx   eax, byte ptr [edx]
.text:00408328                 test    al, al
.text:0040832A                 jnz     short loc_408320
.text:0040832C
.text:0040832C loc_40832C:                             ; CODE XREF: .text:0040830F↑j
.text:0040832C                 add     esp, 8
.text:0040832F                 pop     ebx
.text:00408330                 retn
.text:00408331 ; ---------------------------------------------------------------------------
.text:00408331
.text:00408331 loc_408331:                             ; CODE XREF: .text:00408322↑j
.text:00408331                 mov     byte ptr [edx], 2Fh ; '/'
.text:00408334                 jmp     short loc_408324
.text:00408334 ; ---------------------------------------------------------------------------
.text:00408336                 align 10h
.text:00408340
.text:00408340 ; =============== S U B R O U T I N E =======================================
.text:00408340
.text:00408340
.text:00408340 ; int __cdecl sub_408340(LPSTR)
.text:00408340 sub_408340      proc near               ; CODE XREF: .text:004083CE↓p
.text:00408340                                         ; .text:0040840E↓p ...
.text:00408340
.text:00408340 hModule         = dword ptr -1Ch
.text:00408340 lpFilename      = dword ptr -18h
.text:00408340 nSize           = dword ptr -14h
.text:00408340 arg_0           = dword ptr  4
.text:00408340
.text:00408340                 push    esi
.text:00408341                 push    ebx
.text:00408342                 sub     esp, 14h
.text:00408345                 mov     esi, [esp+1Ch+arg_0]
.text:00408349                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00408351                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00408358                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040835C                 call    GetModuleFileNameA
.text:00408361                 sub     esp, 0Ch
.text:00408364                 test    eax, eax
.text:00408366                 jz      short loc_4083A8
.text:00408368                 cmp     eax, 104h
.text:0040836D                 jg      short loc_408399
.text:0040836F
.text:0040836F loc_40836F:                             ; CODE XREF: sub_408340+66↓j
.text:0040836F                                         ; sub_408340+78↓j
.text:0040836F                 movzx   eax, byte ptr [esi]
.text:00408372                 mov     edx, esi
.text:00408374                 test    al, al
.text:00408376                 jz      short loc_40838C
.text:00408378                 nop
.text:00408379                 lea     esi, [esi+0]
.text:00408380
.text:00408380 loc_408380:                             ; CODE XREF: sub_408340+4A↓j
.text:00408380                 cmp     al, 5Ch ; '\'
.text:00408382                 jz      short loc_408394
.text:00408384
.text:00408384 loc_408384:                             ; CODE XREF: sub_408340+57↓j
.text:00408384                 inc     edx
.text:00408385                 movzx   eax, byte ptr [edx]
.text:00408388                 test    al, al
.text:0040838A                 jnz     short loc_408380
.text:0040838C
.text:0040838C loc_40838C:                             ; CODE XREF: sub_408340+36↑j
.text:0040838C                 add     esp, 14h
.text:0040838F                 mov     eax, esi
.text:00408391                 pop     ebx
.text:00408392                 pop     esi
.text:00408393                 retn
.text:00408394 ; ---------------------------------------------------------------------------
.text:00408394
.text:00408394 loc_408394:                             ; CODE XREF: sub_408340+42↑j
.text:00408394                 mov     byte ptr [edx], 2Fh ; '/'
.text:00408397                 jmp     short loc_408384
.text:00408399 ; ---------------------------------------------------------------------------
.text:00408399
.text:00408399 loc_408399:                             ; CODE XREF: sub_408340+2D↑j
.text:00408399                 call    _errno
.text:0040839E                 mov     dword ptr [eax], 26h ; '&'
.text:004083A4                 xor     esi, esi
.text:004083A6                 jmp     short loc_40836F
.text:004083A8 ; ---------------------------------------------------------------------------
.text:004083A8
.text:004083A8 loc_4083A8:                             ; CODE XREF: sub_408340+26↑j
.text:004083A8                 call    sub_406E90
.text:004083AD                 mov     ebx, eax
.text:004083AF                 xor     esi, esi
.text:004083B1                 call    _errno
.text:004083B6                 mov     [eax], ebx
.text:004083B8                 jmp     short loc_40836F
.text:004083B8 sub_408340      endp
.text:004083B8
.text:004083B8 ; ---------------------------------------------------------------------------
.text:004083BA                 align 10h
.text:004083C0                 sub     esp, 0Ch
.text:004083C3                 mov     [esp+8], ebx
.text:004083C7                 mov     ebx, [esp+10h]
.text:004083CB                 mov     [esp], ebx
.text:004083CE                 call    sub_408340
.text:004083D3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004083DB                 mov     [esp], ebx
.text:004083DE                 call    strrchr
.text:004083E3                 test    eax, eax
.text:004083E5                 jz      short loc_4083EA
.text:004083E7                 lea     ebx, [eax+1]
.text:004083EA
.text:004083EA loc_4083EA:                             ; CODE XREF: .text:004083E5↑j
.text:004083EA                 mov     eax, ebx
.text:004083EC                 mov     ebx, [esp+8]
.text:004083F0                 add     esp, 0Ch
.text:004083F3                 retn
.text:004083F3 ; ---------------------------------------------------------------------------
.text:004083F4                 align 10h
.text:00408400                 sub     esp, 0Ch
.text:00408403                 mov     [esp+8], ebx
.text:00408407                 mov     ebx, [esp+10h]
.text:0040840B                 mov     [esp], ebx
.text:0040840E                 call    sub_408340
.text:00408413                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040841B                 mov     [esp], ebx
.text:0040841E                 call    strrchr
.text:00408423                 test    eax, eax
.text:00408425                 jz      short loc_40842A
.text:00408427                 mov     byte ptr [eax], 0
.text:0040842A
.text:0040842A loc_40842A:                             ; CODE XREF: .text:00408425↑j
.text:0040842A                 mov     eax, ebx
.text:0040842C                 mov     ebx, [esp+8]
.text:00408430                 add     esp, 0Ch
.text:00408433                 retn
.text:00408433 ; ---------------------------------------------------------------------------
.text:00408434                 align 10h
.text:00408440                 sub     esp, 0Ch
.text:00408443                 mov     [esp+8], ebx
.text:00408447                 mov     ebx, [esp+10h]
.text:0040844B                 mov     [esp], ebx
.text:0040844E                 call    sub_408340
.text:00408453                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040845B                 mov     [esp], ebx
.text:0040845E                 call    strrchr
.text:00408463                 test    eax, eax
.text:00408465                 jz      short loc_40846A
.text:00408467                 mov     byte ptr [eax], 0
.text:0040846A
.text:0040846A loc_40846A:                             ; CODE XREF: .text:00408465↑j
.text:0040846A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00408472                 mov     [esp], ebx
.text:00408475                 call    strrchr
.text:0040847A                 test    eax, eax
.text:0040847C                 jz      short loc_408481
.text:0040847E                 mov     byte ptr [eax], 0
.text:00408481
.text:00408481 loc_408481:                             ; CODE XREF: .text:0040847C↑j
.text:00408481                 mov     eax, ebx
.text:00408483                 mov     ebx, [esp+8]
.text:00408487                 add     esp, 0Ch
.text:0040848A                 retn
.text:0040848A ; ---------------------------------------------------------------------------
.text:0040848B                 align 10h
.text:00408490                 sub     esp, 1Ch
.text:00408493                 mov     edx, [esp+20h]
.text:00408497                 mov     [esp+10h], ebx
.text:0040849B                 xor     ebx, ebx
.text:0040849D                 mov     [esp+14h], esi
.text:004084A1                 mov     [esp+18h], edi
.text:004084A5                 mov     [esp], edx
.text:004084A8                 call    sub_406EE0
.text:004084AD                 mov     edx, [esp+24h]
.text:004084B1                 mov     edi, eax
.text:004084B3                 mov     [esp], edx
.text:004084B6                 call    sub_406EE0
.text:004084BB                 mov     [esp+4], eax
.text:004084BF                 mov     esi, eax
.text:004084C1                 mov     [esp], edi
.text:004084C4                 call    _stricmp_0
.text:004084C9                 mov     [esp], edi
.text:004084CC                 test    eax, eax
.text:004084CE                 setz    bl
.text:004084D1                 call    free
.text:004084D6                 mov     [esp], esi
.text:004084D9                 call    free
.text:004084DE                 mov     eax, ebx
.text:004084E0                 mov     esi, [esp+14h]
.text:004084E4                 mov     ebx, [esp+10h]
.text:004084E8                 mov     edi, [esp+18h]
.text:004084EC                 add     esp, 1Ch
.text:004084EF                 retn
.text:004084F0 ; ---------------------------------------------------------------------------
.text:004084F0                 xor     eax, eax
.text:004084F2                 retn
.text:004084F2 ; ---------------------------------------------------------------------------
.text:004084F3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00408527↓o
.text:00408500 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00408536↓o
.text:00408510 ; ---------------------------------------------------------------------------
.text:00408510                 sub     esp, 1Ch
.text:00408513                 mov     [esp+10h], ebx
.text:00408517                 mov     ebx, [esp+20h]
.text:0040851B                 mov     [esp+18h], edi
.text:0040851F                 mov     edi, [esp+24h]
.text:00408523                 mov     [esp+14h], esi
.text:00408527                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040852E                 call    GetModuleHandleA
.text:00408533                 sub     esp, 4
.text:00408536                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040853E                 mov     [esp], eax
.text:00408541                 call    GetProcAddress
.text:00408546                 sub     esp, 8
.text:00408549                 test    eax, eax
.text:0040854B                 jz      short loc_408563
.text:0040854D                 mov     dword ptr [esp+8], 104h
.text:00408555                 mov     [esp+4], ebx
.text:00408559                 mov     [esp], edi
.text:0040855C                 call    eax
.text:0040855E                 sub     esp, 0Ch
.text:00408561                 mov     esi, eax
.text:00408563
.text:00408563 loc_408563:                             ; CODE XREF: .text:0040854B↑j
.text:00408563                 test    esi, esi
.text:00408565                 jz      short loc_408580
.text:00408567
.text:00408567 loc_408567:                             ; CODE XREF: .text:0040859B↓j
.text:00408567                 mov     eax, ebx
.text:00408569                 mov     esi, [esp+14h]
.text:0040856D                 mov     ebx, [esp+10h]
.text:00408571                 mov     edi, [esp+18h]
.text:00408575                 add     esp, 1Ch
.text:00408578                 retn
.text:00408578 ; ---------------------------------------------------------------------------
.text:00408579                 align 10h
.text:00408580
.text:00408580 loc_408580:                             ; CODE XREF: .text:00408565↑j
.text:00408580                 call    sub_409CA0
.text:00408585                 mov     [esp], ebx
.text:00408588                 mov     [esp+4], edi
.text:0040858C                 call    strcpy
.text:00408591                 mov     [esp], ebx
.text:00408594                 call    _win32_longpath
.text:00408599                 mov     ebx, eax
.text:0040859B                 jmp     short loc_408567
.text:0040859B ; ---------------------------------------------------------------------------
.text:0040859D                 align 10h
.text:004085A0                 sub     esp, 1Ch
.text:004085A3                 mov     [esp+18h], edi
.text:004085A7                 mov     edi, [esp+20h]
.text:004085AB                 mov     [esp+10h], ebx
.text:004085AF                 mov     [esp+14h], esi
.text:004085B3                 mov     dword ptr [esp+8], 0
.text:004085BB                 mov     dword ptr [esp+4], 0
.text:004085C3                 mov     [esp], edi
.text:004085C6                 call    GetShortPathNameA
.text:004085CB                 sub     esp, 0Ch
.text:004085CE                 mov     ebx, eax
.text:004085D0                 test    eax, eax
.text:004085D2                 jz      short loc_408620
.text:004085D4                 lea     edx, [eax+1]
.text:004085D7                 mov     [esp], edx
.text:004085DA                 call    malloc
.text:004085DF                 test    eax, eax
.text:004085E1                 mov     esi, eax
.text:004085E3                 jz      short loc_408620
.text:004085E5                 mov     [esp+8], ebx
.text:004085E9                 mov     [esp+4], eax
.text:004085ED                 mov     [esp], edi
.text:004085F0                 call    GetShortPathNameA
.text:004085F5                 sub     esp, 0Ch
.text:004085F8                 mov     edx, esi
.text:004085FA                 test    eax, eax
.text:004085FC                 jz      short loc_408612
.text:004085FE                 mov     esi, esi
.text:00408600
.text:00408600 loc_408600:                             ; CODE XREF: .text:00408630↓j
.text:00408600                 mov     ebx, [esp+10h]
.text:00408604                 mov     eax, edx
.text:00408606                 mov     esi, [esp+14h]
.text:0040860A                 mov     edi, [esp+18h]
.text:0040860E                 add     esp, 1Ch
.text:00408611                 retn
.text:00408612 ; ---------------------------------------------------------------------------
.text:00408612
.text:00408612 loc_408612:                             ; CODE XREF: .text:004085FC↑j
.text:00408612                 mov     [esp], esi
.text:00408615                 call    free
.text:0040861A                 lea     esi, [esi+0]
.text:00408620
.text:00408620 loc_408620:                             ; CODE XREF: .text:004085D2↑j
.text:00408620                                         ; .text:004085E3↑j
.text:00408620                 call    sub_406E90
.text:00408625                 mov     esi, eax
.text:00408627                 call    _errno
.text:0040862C                 mov     [eax], esi
.text:0040862E                 mov     edx, edi
.text:00408630                 jmp     short loc_408600
.text:00408630 ; ---------------------------------------------------------------------------
.text:00408632                 align 10h
.text:00408640 aNotset         db 'notset',0           ; DATA XREF: .data:off_40E070↓o
.text:00408640                                         ; .data:off_40E074↓o
.text:00408647 ; ---------------------------------------------------------------------------
.text:00408647
.text:00408647 loc_408647:                             ; DATA XREF: .text:loc_4086E5↓o
.text:00408647                 jb      short loc_4086C0
.text:00408649                 add     [eax], ah
.text:0040864B                 or      [eax], eax
.text:0040864D
.text:0040864D loc_40864D:                             ; DATA XREF: .text:00408738↓o
.text:0040864D                                         ; .text:0040879E↓o ...
.text:0040864D                 add     [eax], ah
.text:0040864F                 and     eax, 64252064h
.text:00408654                 and     [eax], al
.text:00408656                 lea     esi, [esi+0]
.text:00408659                 lea     edi, [edi+0]
.text:00408660                 push    ebp
.text:00408661                 push    edi
.text:00408662                 push    esi
.text:00408663                 push    ebx
.text:00408664                 sub     esp, 14Ch
.text:0040866A                 mov     edx, off_40E070 ; "notset"
.text:00408670                 mov     edi, [esp+164h]
.text:00408677                 mov     ebp, [esp+168h]
.text:0040867E                 mov     [esp+4], edx
.text:00408682                 mov     edx, off_40E074 ; "notset"
.text:00408688                 mov     [esp], edx
.text:0040868B                 call    strcmp
.text:00408690                 test    eax, eax
.text:00408692                 jz      loc_408A80
.text:00408698
.text:00408698 loc_408698:                             ; CODE XREF: .text:00408ACC↓j
.text:00408698                 lea     ebx, [esp+20h]
.text:0040869C                 lea     esi, [esi+0]
.text:004086A0
.text:004086A0 loc_4086A0:                             ; CODE XREF: .text:004086D6↓j
.text:004086A0                 mov     [esp+4], ebx
.text:004086A4                 mov     ecx, off_40E074 ; "notset"
.text:004086AA                 mov     [esp], ecx
.text:004086AD                 call    loc_407BD0
.text:004086B2                 test    eax, eax
.text:004086B4                 jns     short loc_4086E5
.text:004086B6                 mov     eax, off_40E074 ; "notset"
.text:004086BB                 cmp     byte ptr [eax], 0
.text:004086BE                 jz      short loc_4086D8
.text:004086C0
.text:004086C0 loc_4086C0:                             ; CODE XREF: .text:loc_408647↑j
.text:004086C0                 mov     dword ptr [esp+4], 0
.text:004086C8                 mov     [esp], eax
.text:004086CB                 call    strchr
.text:004086D0                 inc     eax
.text:004086D1                 mov     off_40E074, eax ; "notset"
.text:004086D6                 jmp     short loc_4086A0
.text:004086D8 ; ---------------------------------------------------------------------------
.text:004086D8
.text:004086D8 loc_4086D8:                             ; CODE XREF: .text:004086BE↑j
.text:004086D8                 xor     eax, eax
.text:004086DA
.text:004086DA loc_4086DA:                             ; CODE XREF: .text:0040889C↓j
.text:004086DA                 add     esp, 14Ch
.text:004086E0                 pop     ebx
.text:004086E1                 pop     esi
.text:004086E2                 pop     edi
.text:004086E3                 pop     ebp
.text:004086E4                 retn
.text:004086E5 ; ---------------------------------------------------------------------------
.text:004086E5
.text:004086E5 loc_4086E5:                             ; CODE XREF: .text:004086B4↑j
.text:004086E5                 mov     dword ptr [edi+0Ch], offset loc_408647
.text:004086EC                 lea     ecx, [esp+0D6h]
.text:004086F3                 lea     edx, [esp+6Ch]
.text:004086F7                 mov     [edi+4], ecx
.text:004086FA                 lea     ebx, [esp+7Ch]
.text:004086FE                 mov     [edi+8], edx
.text:00408701                 mov     [edi], ebx
.text:00408703                 mov     [esp], ebp
.text:00408706                 mov     [esp+4], edi
.text:0040870A                 call    ___addmntentstr
.text:0040870F                 mov     [esp], ebp
.text:00408712                 mov     dword ptr [esp+4], 40864Ah
.text:0040871A                 call    strspn
.text:0040871F                 mov     dword ptr [esp+4], 0
.text:00408727                 mov     ebx, off_40E074 ; "notset"
.text:0040872D                 lea     esi, [eax+ebp]
.text:00408730                 mov     [esp+1Ch], esi
.text:00408734                 lea     ebp, [esp+1Ch]
.text:00408738                 mov     esi, offset loc_40864D
.text:0040873D                 mov     [esp], ebx
.text:00408740                 call    strchr
.text:00408745                 mov     dword ptr [esp+4], 40864Ah
.text:0040874D                 inc     eax
.text:0040874E                 mov     off_40E074, eax ; "notset"
.text:00408753                 mov     [esp], ebp
.text:00408756                 call    sub_409FC0
.text:0040875B                 test    eax, eax
.text:0040875D                 mov     ebx, eax
.text:0040875F                 jz      short loc_408788
.text:00408761                 mov     edx, eax
.text:00408763                 mov     ecx, eax
.text:00408765                 lea     esi, [esi+0]
.text:00408769                 lea     edi, [edi+0]
.text:00408770
.text:00408770 loc_408770:                             ; CODE XREF: .text:00408786↓j
.text:00408770                 movzx   eax, byte ptr [edx]
.text:00408773                 cmp     al, 5Ch ; '\'
.text:00408775                 jz      loc_408A24
.text:0040877B
.text:0040877B loc_40877B:                             ; CODE XREF: .text:00408A2C↓j
.text:0040877B                                         ; .text:00408A3A↓j ...
.text:0040877B                 mov     [ecx], al
.text:0040877D
.text:0040877D loc_40877D:                             ; CODE XREF: .text:00408A4E↓j
.text:0040877D                 inc     ecx
.text:0040877E
.text:0040877E loc_40877E:                             ; CODE XREF: .text:00408A66↓j
.text:0040877E                 movzx   eax, byte ptr [edx]
.text:00408781                 mov     esi, ebx
.text:00408783                 inc     edx
.text:00408784                 test    al, al
.text:00408786                 jnz     short loc_408770
.text:00408788
.text:00408788 loc_408788:                             ; CODE XREF: .text:0040875F↑j
.text:00408788                 mov     [edi], esi
.text:0040878A                 mov     eax, [esp+1Ch]
.text:0040878E                 test    eax, eax
.text:00408790                 jnz     loc_408A0B
.text:00408796
.text:00408796 loc_408796:                             ; CODE XREF: .text:00408A1F↓j
.text:00408796                 mov     dword ptr [esp+4], 40864Ah
.text:0040879E                 mov     esi, offset loc_40864D
.text:004087A3                 mov     [esp], ebp
.text:004087A6                 call    sub_409FC0
.text:004087AB                 test    eax, eax
.text:004087AD                 mov     ebx, eax
.text:004087AF                 jz      short loc_4087D8
.text:004087B1                 mov     edx, eax
.text:004087B3                 mov     ecx, eax
.text:004087B5                 lea     esi, [esi+0]
.text:004087B9                 lea     edi, [edi+0]
.text:004087C0
.text:004087C0 loc_4087C0:                             ; CODE XREF: .text:004087D6↓j
.text:004087C0                 movzx   eax, byte ptr [edx]
.text:004087C3                 cmp     al, 5Ch ; '\'
.text:004087C5                 jz      loc_4089B3
.text:004087CB
.text:004087CB loc_4087CB:                             ; CODE XREF: .text:004089BB↓j
.text:004087CB                                         ; .text:004089C9↓j ...
.text:004087CB                 mov     [ecx], al
.text:004087CD
.text:004087CD loc_4087CD:                             ; CODE XREF: .text:004089DD↓j
.text:004087CD                 inc     ecx
.text:004087CE
.text:004087CE loc_4087CE:                             ; CODE XREF: .text:004089F5↓j
.text:004087CE                 movzx   eax, byte ptr [edx]
.text:004087D1                 mov     esi, ebx
.text:004087D3                 inc     edx
.text:004087D4                 test    al, al
.text:004087D6                 jnz     short loc_4087C0
.text:004087D8
.text:004087D8 loc_4087D8:                             ; CODE XREF: .text:004087AF↑j
.text:004087D8                 mov     [edi+4], esi
.text:004087DB                 mov     eax, [esp+1Ch]
.text:004087DF                 test    eax, eax
.text:004087E1                 jnz     loc_40899A
.text:004087E7
.text:004087E7 loc_4087E7:                             ; CODE XREF: .text:004089AE↓j
.text:004087E7                 mov     dword ptr [esp+4], 40864Ah
.text:004087EF                 mov     esi, offset loc_40864D
.text:004087F4                 mov     [esp], ebp
.text:004087F7                 call    sub_409FC0
.text:004087FC                 test    eax, eax
.text:004087FE                 mov     ebx, eax
.text:00408800                 jz      short loc_408828
.text:00408802                 mov     edx, eax
.text:00408804                 mov     ecx, eax
.text:00408806                 lea     esi, [esi+0]
.text:00408809                 lea     edi, [edi+0]
.text:00408810
.text:00408810 loc_408810:                             ; CODE XREF: .text:00408826↓j
.text:00408810                 movzx   eax, byte ptr [edx]
.text:00408813                 cmp     al, 5Ch ; '\'
.text:00408815                 jz      loc_408942
.text:0040881B
.text:0040881B loc_40881B:                             ; CODE XREF: .text:0040894A↓j
.text:0040881B                                         ; .text:00408958↓j ...
.text:0040881B                 mov     [ecx], al
.text:0040881D
.text:0040881D loc_40881D:                             ; CODE XREF: .text:0040896C↓j
.text:0040881D                 inc     ecx
.text:0040881E
.text:0040881E loc_40881E:                             ; CODE XREF: .text:00408984↓j
.text:0040881E                 movzx   eax, byte ptr [edx]
.text:00408821                 mov     esi, ebx
.text:00408823                 inc     edx
.text:00408824                 test    al, al
.text:00408826                 jnz     short loc_408810
.text:00408828
.text:00408828 loc_408828:                             ; CODE XREF: .text:00408800↑j
.text:00408828                 mov     [edi+8], esi
.text:0040882B                 mov     eax, [esp+1Ch]
.text:0040882F                 test    eax, eax
.text:00408831                 jnz     loc_408929
.text:00408837
.text:00408837 loc_408837:                             ; CODE XREF: .text:0040893D↓j
.text:00408837                 mov     dword ptr [esp+4], 40864Ah
.text:0040883F                 mov     esi, offset loc_40864D
.text:00408844                 mov     [esp], ebp
.text:00408847                 call    sub_409FC0
.text:0040884C                 test    eax, eax
.text:0040884E                 mov     ebx, eax
.text:00408850                 jz      short loc_408874
.text:00408852                 mov     edx, eax
.text:00408854                 mov     ecx, eax
.text:00408856                 lea     esi, [esi+0]
.text:00408859                 lea     edi, [edi+0]
.text:00408860
.text:00408860 loc_408860:                             ; CODE XREF: .text:00408872↓j
.text:00408860                 movzx   eax, byte ptr [edx]
.text:00408863                 cmp     al, 5Ch ; '\'
.text:00408865                 jz      short loc_4088D5
.text:00408867
.text:00408867 loc_408867:                             ; CODE XREF: .text:004088DD↓j
.text:00408867                                         ; .text:004088E7↓j ...
.text:00408867                 mov     [ecx], al
.text:00408869
.text:00408869 loc_408869:                             ; CODE XREF: .text:004088FB↓j
.text:00408869                 inc     ecx
.text:0040886A
.text:0040886A loc_40886A:                             ; CODE XREF: .text:00408913↓j
.text:0040886A                 movzx   eax, byte ptr [edx]
.text:0040886D                 mov     esi, ebx
.text:0040886F                 inc     edx
.text:00408870                 test    al, al
.text:00408872                 jnz     short loc_408860
.text:00408874
.text:00408874 loc_408874:                             ; CODE XREF: .text:00408850↑j
.text:00408874                 mov     [edi+0Ch], esi
.text:00408877                 xor     eax, eax
.text:00408879                 mov     edx, [esp+1Ch]
.text:0040887D                 test    edx, edx
.text:0040887F                 jnz     short loc_4088B5
.text:00408881
.text:00408881 loc_408881:                             ; CODE XREF: .text:004088D3↓j
.text:00408881                 cmp     eax, 1
.text:00408884                 jz      short loc_4088AC
.text:00408886                 cmp     eax, 1
.text:00408889                 jle     short loc_4088A1
.text:0040888B
.text:0040888B loc_40888B:                             ; CODE XREF: .text:004088A3↓j
.text:0040888B                                         ; .text:004088B3↓j
.text:0040888B                 mov     edx, [esp+160h]
.text:00408892                 mov     [esp], edx
.text:00408895                 call    sub_409F60
.text:0040889A                 mov     eax, edi
.text:0040889C                 jmp     loc_4086DA
.text:004088A1 ; ---------------------------------------------------------------------------
.text:004088A1
.text:004088A1 loc_4088A1:                             ; CODE XREF: .text:00408889↑j
.text:004088A1                 test    eax, eax
.text:004088A3                 jnz     short loc_40888B
.text:004088A5                 mov     dword ptr [edi+10h], 0
.text:004088AC
.text:004088AC loc_4088AC:                             ; CODE XREF: .text:00408884↑j
.text:004088AC                 mov     dword ptr [edi+14h], 0
.text:004088B3                 jmp     short loc_40888B
.text:004088B5 ; ---------------------------------------------------------------------------
.text:004088B5
.text:004088B5 loc_4088B5:                             ; CODE XREF: .text:0040887F↑j
.text:004088B5                 mov     dword ptr [esp+4], 40864Eh
.text:004088BD                 lea     esi, [edi+14h]
.text:004088C0                 lea     ebp, [edi+10h]
.text:004088C3                 mov     [esp+0Ch], esi
.text:004088C7                 mov     [esp+8], ebp
.text:004088CB                 mov     [esp], edx
.text:004088CE                 call    sscanf
.text:004088D3                 jmp     short loc_408881
.text:004088D5 ; ---------------------------------------------------------------------------
.text:004088D5
.text:004088D5 loc_4088D5:                             ; CODE XREF: .text:00408865↑j
.text:004088D5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004088D9                 jz      short loc_408918
.text:004088DB
.text:004088DB loc_4088DB:                             ; CODE XREF: .text:0040891C↓j
.text:004088DB                                         ; .text:00408922↓j
.text:004088DB                 cmp     al, 5Ch ; '\'
.text:004088DD                 jnz     short loc_408867
.text:004088DF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004088E3                 jz      short loc_408900
.text:004088E5
.text:004088E5 loc_4088E5:                             ; CODE XREF: .text:00408904↓j
.text:004088E5                                         ; .text:0040890A↓j
.text:004088E5                 cmp     al, 5Ch ; '\'
.text:004088E7                 jnz     loc_408867
.text:004088ED                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:004088F1                 jnz     loc_408867
.text:004088F7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:004088FA                 inc     edx
.text:004088FB                 jmp     loc_408869
.text:00408900 ; ---------------------------------------------------------------------------
.text:00408900
.text:00408900 loc_408900:                             ; CODE XREF: .text:004088E3↑j
.text:00408900                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00408904                 jnz     short loc_4088E5
.text:00408906                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040890A                 jnz     short loc_4088E5
.text:0040890C                 mov     byte ptr [ecx], 9
.text:0040890F
.text:0040890F loc_40890F:                             ; CODE XREF: .text:00408927↓j
.text:0040890F                 inc     ecx
.text:00408910                 add     edx, 3
.text:00408913                 jmp     loc_40886A
.text:00408918 ; ---------------------------------------------------------------------------
.text:00408918
.text:00408918 loc_408918:                             ; CODE XREF: .text:004088D9↑j
.text:00408918                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040891C                 jnz     short loc_4088DB
.text:0040891E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00408922                 jnz     short loc_4088DB
.text:00408924                 mov     byte ptr [ecx], 20h ; ' '
.text:00408927                 jmp     short loc_40890F
.text:00408929 ; ---------------------------------------------------------------------------
.text:00408929
.text:00408929 loc_408929:                             ; CODE XREF: .text:00408831↑j
.text:00408929                 mov     dword ptr [esp+4], 40864Ah
.text:00408931                 mov     [esp], eax
.text:00408934                 call    strspn
.text:00408939                 add     [esp+1Ch], eax
.text:0040893D                 jmp     loc_408837
.text:00408942 ; ---------------------------------------------------------------------------
.text:00408942
.text:00408942 loc_408942:                             ; CODE XREF: .text:00408815↑j
.text:00408942                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00408946                 jz      short loc_408989
.text:00408948
.text:00408948 loc_408948:                             ; CODE XREF: .text:0040898D↓j
.text:00408948                                         ; .text:00408993↓j
.text:00408948                 cmp     al, 5Ch ; '\'
.text:0040894A                 jnz     loc_40881B
.text:00408950                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00408954                 jz      short loc_408971
.text:00408956
.text:00408956 loc_408956:                             ; CODE XREF: .text:00408975↓j
.text:00408956                                         ; .text:0040897B↓j
.text:00408956                 cmp     al, 5Ch ; '\'
.text:00408958                 jnz     loc_40881B
.text:0040895E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00408962                 jnz     loc_40881B
.text:00408968                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040896B                 inc     edx
.text:0040896C                 jmp     loc_40881D
.text:00408971 ; ---------------------------------------------------------------------------
.text:00408971
.text:00408971 loc_408971:                             ; CODE XREF: .text:00408954↑j
.text:00408971                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00408975                 jnz     short loc_408956
.text:00408977                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040897B                 jnz     short loc_408956
.text:0040897D                 mov     byte ptr [ecx], 9
.text:00408980
.text:00408980 loc_408980:                             ; CODE XREF: .text:00408998↓j
.text:00408980                 inc     ecx
.text:00408981                 add     edx, 3
.text:00408984                 jmp     loc_40881E
.text:00408989 ; ---------------------------------------------------------------------------
.text:00408989
.text:00408989 loc_408989:                             ; CODE XREF: .text:00408946↑j
.text:00408989                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040898D                 jnz     short loc_408948
.text:0040898F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00408993                 jnz     short loc_408948
.text:00408995                 mov     byte ptr [ecx], 20h ; ' '
.text:00408998                 jmp     short loc_408980
.text:0040899A ; ---------------------------------------------------------------------------
.text:0040899A
.text:0040899A loc_40899A:                             ; CODE XREF: .text:004087E1↑j
.text:0040899A                 mov     dword ptr [esp+4], 40864Ah
.text:004089A2                 mov     [esp], eax
.text:004089A5                 call    strspn
.text:004089AA                 add     [esp+1Ch], eax
.text:004089AE                 jmp     loc_4087E7
.text:004089B3 ; ---------------------------------------------------------------------------
.text:004089B3
.text:004089B3 loc_4089B3:                             ; CODE XREF: .text:004087C5↑j
.text:004089B3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004089B7                 jz      short loc_4089FA
.text:004089B9
.text:004089B9 loc_4089B9:                             ; CODE XREF: .text:004089FE↓j
.text:004089B9                                         ; .text:00408A04↓j
.text:004089B9                 cmp     al, 5Ch ; '\'
.text:004089BB                 jnz     loc_4087CB
.text:004089C1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004089C5                 jz      short loc_4089E2
.text:004089C7
.text:004089C7 loc_4089C7:                             ; CODE XREF: .text:004089E6↓j
.text:004089C7                                         ; .text:004089EC↓j
.text:004089C7                 cmp     al, 5Ch ; '\'
.text:004089C9                 jnz     loc_4087CB
.text:004089CF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:004089D3                 jnz     loc_4087CB
.text:004089D9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:004089DC                 inc     edx
.text:004089DD                 jmp     loc_4087CD
.text:004089E2 ; ---------------------------------------------------------------------------
.text:004089E2
.text:004089E2 loc_4089E2:                             ; CODE XREF: .text:004089C5↑j
.text:004089E2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:004089E6                 jnz     short loc_4089C7
.text:004089E8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:004089EC                 jnz     short loc_4089C7
.text:004089EE                 mov     byte ptr [ecx], 9
.text:004089F1
.text:004089F1 loc_4089F1:                             ; CODE XREF: .text:00408A09↓j
.text:004089F1                 inc     ecx
.text:004089F2                 add     edx, 3
.text:004089F5                 jmp     loc_4087CE
.text:004089FA ; ---------------------------------------------------------------------------
.text:004089FA
.text:004089FA loc_4089FA:                             ; CODE XREF: .text:004089B7↑j
.text:004089FA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:004089FE                 jnz     short loc_4089B9
.text:00408A00                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00408A04                 jnz     short loc_4089B9
.text:00408A06                 mov     byte ptr [ecx], 20h ; ' '
.text:00408A09                 jmp     short loc_4089F1
.text:00408A0B ; ---------------------------------------------------------------------------
.text:00408A0B
.text:00408A0B loc_408A0B:                             ; CODE XREF: .text:00408790↑j
.text:00408A0B                 mov     dword ptr [esp+4], 40864Ah
.text:00408A13                 mov     [esp], eax
.text:00408A16                 call    strspn
.text:00408A1B                 add     [esp+1Ch], eax
.text:00408A1F                 jmp     loc_408796
.text:00408A24 ; ---------------------------------------------------------------------------
.text:00408A24
.text:00408A24 loc_408A24:                             ; CODE XREF: .text:00408775↑j
.text:00408A24                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00408A28                 jz      short loc_408A6B
.text:00408A2A
.text:00408A2A loc_408A2A:                             ; CODE XREF: .text:00408A6F↓j
.text:00408A2A                                         ; .text:00408A75↓j
.text:00408A2A                 cmp     al, 5Ch ; '\'
.text:00408A2C                 jnz     loc_40877B
.text:00408A32                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00408A36                 jz      short loc_408A53
.text:00408A38
.text:00408A38 loc_408A38:                             ; CODE XREF: .text:00408A57↓j
.text:00408A38                                         ; .text:00408A5D↓j
.text:00408A38                 cmp     al, 5Ch ; '\'
.text:00408A3A                 jnz     loc_40877B
.text:00408A40                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00408A44                 jnz     loc_40877B
.text:00408A4A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00408A4D                 inc     edx
.text:00408A4E                 jmp     loc_40877D
.text:00408A53 ; ---------------------------------------------------------------------------
.text:00408A53
.text:00408A53 loc_408A53:                             ; CODE XREF: .text:00408A36↑j
.text:00408A53                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00408A57                 jnz     short loc_408A38
.text:00408A59                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00408A5D                 jnz     short loc_408A38
.text:00408A5F                 mov     byte ptr [ecx], 9
.text:00408A62
.text:00408A62 loc_408A62:                             ; CODE XREF: .text:00408A7A↓j
.text:00408A62                 inc     ecx
.text:00408A63                 add     edx, 3
.text:00408A66                 jmp     loc_40877E
.text:00408A6B ; ---------------------------------------------------------------------------
.text:00408A6B
.text:00408A6B loc_408A6B:                             ; CODE XREF: .text:00408A28↑j
.text:00408A6B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00408A6F                 jnz     short loc_408A2A
.text:00408A71                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00408A75                 jnz     short loc_408A2A
.text:00408A77                 mov     byte ptr [ecx], 20h ; ' '
.text:00408A7A                 jmp     short loc_408A62
.text:00408A7A ; ---------------------------------------------------------------------------
.text:00408A7C                 align 10h
.text:00408A80
.text:00408A80 loc_408A80:                             ; CODE XREF: .text:00408692↑j
.text:00408A80                 mov     dword ptr [esp+4], 0
.text:00408A88                 mov     dword ptr [esp], 0
.text:00408A8F                 call    GetLogicalDriveStringsA
.text:00408A94                 sub     esp, 8
.text:00408A97                 mov     ebx, eax
.text:00408A99                 call    GetProcessHeap
.text:00408A9E                 mov     [esp], eax
.text:00408AA1                 mov     [esp+8], ebx
.text:00408AA5                 mov     dword ptr [esp+4], 0
.text:00408AAD                 call    HeapAlloc
.text:00408AB2                 sub     esp, 0Ch
.text:00408AB5                 mov     esi, eax
.text:00408AB7                 mov     [esp+4], eax
.text:00408ABB                 mov     [esp], ebx
.text:00408ABE                 call    GetLogicalDriveStringsA
.text:00408AC3                 mov     off_40E074, esi ; "notset"
.text:00408AC9                 sub     esp, 8
.text:00408ACC                 jmp     loc_408698
.text:00408ACC ; ---------------------------------------------------------------------------
.text:00408AD1 ; const char aSSSSDD[]
.text:00408AD1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:00408AD1                                         ; DATA XREF: .text:00408C10↓o
.text:00408AD1                                         ; ___addmntentstr+F0↓o
.text:00408AE4                 align 10h
.text:00408AF0                 push    esi
.text:00408AF1                 push    ebx
.text:00408AF2                 sub     esp, 44h
.text:00408AF5                 mov     ebx, [esp+54h]
.text:00408AF9                 mov     esi, [esp+50h]
.text:00408AFD                 mov     edx, [ebx]
.text:00408AFF                 mov     [esp+20h], edx
.text:00408B03                 mov     ecx, [ebx+4]
.text:00408B06                 mov     [esp+24h], ecx
.text:00408B0A                 mov     edx, [ebx+8]
.text:00408B0D                 mov     [esp+28h], edx
.text:00408B11                 mov     ecx, [ebx+0Ch]
.text:00408B14                 mov     [esp+2Ch], ecx
.text:00408B18                 mov     edx, [ebx+10h]
.text:00408B1B                 mov     [esp+30h], edx
.text:00408B1F                 mov     ecx, [ebx+14h]
.text:00408B22                 mov     dword ptr [esp+8], 2
.text:00408B2A                 mov     dword ptr [esp+4], 0
.text:00408B32                 mov     [esp+34h], ecx
.text:00408B36                 mov     [esp], esi
.text:00408B39                 call    sub_409F50
.text:00408B3E ; ---------------------------------------------------------------------------
.text:00408B3E                 test    eax, eax
.text:00408B40                 mov     edx, 1
.text:00408B45                 jnz     loc_408C45
.text:00408B4B                 mov     ebx, [esp+20h]
.text:00408B4F                 mov     edx, ebx
.text:00408B51                 movzx   eax, byte ptr [ebx]
.text:00408B54                 test    al, al
.text:00408B56                 jz      short loc_408B80
.text:00408B58                 nop
.text:00408B59                 lea     esi, [esi+0]
.text:00408B60
.text:00408B60 loc_408B60:                             ; CODE XREF: .text:00408B7E↓j
.text:00408B60                 cmp     al, 20h ; ' '
.text:00408B62                 jz      loc_408DBA
.text:00408B68                 cmp     al, 9
.text:00408B6A                 jz      loc_408DBA
.text:00408B70                 cmp     al, 5Ch ; '\'
.text:00408B72                 jz      loc_408DBA
.text:00408B78                 inc     ebx
.text:00408B79                 movzx   eax, byte ptr [ebx]
.text:00408B7C                 test    al, al
.text:00408B7E                 jnz     short loc_408B60
.text:00408B80
.text:00408B80 loc_408B80:                             ; CODE XREF: .text:00408B56↑j
.text:00408B80                                         ; .text:00408DBC↓j ...
.text:00408B80                 mov     ebx, [esp+24h]
.text:00408B84                 mov     edx, ebx
.text:00408B86                 movzx   eax, byte ptr [ebx]
.text:00408B89                 test    al, al
.text:00408B8B                 jz      short loc_408BB0
.text:00408B8D                 lea     esi, [esi+0]
.text:00408B90
.text:00408B90 loc_408B90:                             ; CODE XREF: .text:00408BAE↓j
.text:00408B90                 cmp     al, 20h ; ' '
.text:00408B92                 jz      loc_408D3A
.text:00408B98                 cmp     al, 9
.text:00408B9A                 jz      loc_408D3A
.text:00408BA0                 cmp     al, 5Ch ; '\'
.text:00408BA2                 jz      loc_408D3A
.text:00408BA8                 inc     ebx
.text:00408BA9                 movzx   eax, byte ptr [ebx]
.text:00408BAC                 test    al, al
.text:00408BAE                 jnz     short loc_408B90
.text:00408BB0
.text:00408BB0 loc_408BB0:                             ; CODE XREF: .text:00408B8B↑j
.text:00408BB0                                         ; .text:00408D3C↓j ...
.text:00408BB0                 mov     ebx, [esp+28h]
.text:00408BB4                 mov     edx, ebx
.text:00408BB6                 movzx   eax, byte ptr [ebx]
.text:00408BB9                 test    al, al
.text:00408BBB                 jz      short loc_408BE0
.text:00408BBD                 lea     esi, [esi+0]
.text:00408BC0
.text:00408BC0 loc_408BC0:                             ; CODE XREF: .text:00408BDE↓j
.text:00408BC0                 cmp     al, 20h ; ' '
.text:00408BC2                 jz      loc_408CBE
.text:00408BC8                 cmp     al, 9
.text:00408BCA                 jz      loc_408CBE
.text:00408BD0                 cmp     al, 5Ch ; '\'
.text:00408BD2                 jz      loc_408CBE
.text:00408BD8                 inc     ebx
.text:00408BD9                 movzx   eax, byte ptr [ebx]
.text:00408BDC                 test    al, al
.text:00408BDE                 jnz     short loc_408BC0
.text:00408BE0
.text:00408BE0 loc_408BE0:                             ; CODE XREF: .text:00408BBB↑j
.text:00408BE0                                         ; .text:00408CC0↓j ...
.text:00408BE0                 mov     edx, [esp+2Ch]
.text:00408BE4                 mov     ebx, edx
.text:00408BE6                 movzx   eax, byte ptr [edx]
.text:00408BE9                 test    al, al
.text:00408BEB                 jz      short loc_408C04
.text:00408BED                 lea     esi, [esi+0]
.text:00408BF0
.text:00408BF0 loc_408BF0:                             ; CODE XREF: .text:00408C02↓j
.text:00408BF0                 cmp     al, 20h ; ' '
.text:00408BF2                 jz      short loc_408C4D
.text:00408BF4                 cmp     al, 9
.text:00408BF6                 jz      short loc_408C4D
.text:00408BF8                 cmp     al, 5Ch ; '\'
.text:00408BFA                 jz      short loc_408C4D
.text:00408BFC                 inc     ebx
.text:00408BFD                 movzx   eax, byte ptr [ebx]
.text:00408C00                 test    al, al
.text:00408C02                 jnz     short loc_408BF0
.text:00408C04
.text:00408C04 loc_408C04:                             ; CODE XREF: .text:00408BEB↑j
.text:00408C04                                         ; .text:00408C4F↓j ...
.text:00408C04                 mov     [esp+14h], edx
.text:00408C08                 mov     ecx, [esp+34h]
.text:00408C0C                 mov     ebx, [esp+30h]
.text:00408C10                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00408C18                 mov     edx, [esp+24h]
.text:00408C1C                 mov     [esp+1Ch], ecx
.text:00408C20                 mov     ecx, [esp+28h]
.text:00408C24                 mov     [esp+18h], ebx
.text:00408C28                 mov     ebx, [esp+20h]
.text:00408C2C                 mov     [esp+0Ch], edx
.text:00408C30                 mov     [esp+10h], ecx
.text:00408C34                 mov     [esp+8], ebx
.text:00408C38                 mov     [esp], esi
.text:00408C3B                 call    fprintf
.text:00408C40                 mov     edx, eax
.text:00408C42                 shr     edx, 1Fh
.text:00408C45
.text:00408C45 loc_408C45:                             ; CODE XREF: .text:00408B45↑j
.text:00408C45                 add     esp, 44h
.text:00408C48                 mov     eax, edx
.text:00408C4A                 pop     ebx
.text:00408C4B                 pop     esi
.text:00408C4C                 retn
.text:00408C4D ; ---------------------------------------------------------------------------
.text:00408C4D
.text:00408C4D loc_408C4D:                             ; CODE XREF: .text:00408BF2↑j
.text:00408C4D                                         ; .text:00408BF6↑j ...
.text:00408C4D                 test    al, al
.text:00408C4F                 jz      short loc_408C04
.text:00408C51                 mov     [esp], edx
.text:00408C54                 mov     ebx, edx
.text:00408C56                 call    strlen
.text:00408C5B                 lea     edx, ds:1[eax*4]
.text:00408C62                 mov     [esp], edx
.text:00408C65                 call    malloc
.text:00408C6A                 mov     [esp+2Ch], eax
.text:00408C6E                 mov     edx, eax
.text:00408C70
.text:00408C70 loc_408C70:                             ; CODE XREF: .text:00408C88↓j
.text:00408C70                 movzx   eax, byte ptr [ebx]
.text:00408C73                 cmp     al, 20h ; ' '
.text:00408C75                 jz      short loc_408CAD
.text:00408C77                 cmp     al, 9
.text:00408C79                 jz      short loc_408C9C
.text:00408C7B                 cmp     al, 5Ch ; '\'
.text:00408C7D                 jz      short loc_408C93
.text:00408C7F                 mov     [edx], al
.text:00408C81
.text:00408C81 loc_408C81:                             ; CODE XREF: .text:00408C9A↓j
.text:00408C81                                         ; .text:00408CAB↓j ...
.text:00408C81                 movzx   ecx, byte ptr [ebx]
.text:00408C84                 inc     edx
.text:00408C85                 inc     ebx
.text:00408C86                 test    cl, cl
.text:00408C88                 jnz     short loc_408C70
.text:00408C8A                 mov     edx, [esp+2Ch]
.text:00408C8E                 jmp     loc_408C04
.text:00408C93 ; ---------------------------------------------------------------------------
.text:00408C93
.text:00408C93 loc_408C93:                             ; CODE XREF: .text:00408C7D↑j
.text:00408C93                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408C96                 inc     edx
.text:00408C97                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408C9A                 jmp     short loc_408C81
.text:00408C9C ; ---------------------------------------------------------------------------
.text:00408C9C
.text:00408C9C loc_408C9C:                             ; CODE XREF: .text:00408C79↑j
.text:00408C9C                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408C9F                 inc     edx
.text:00408CA0                 mov     byte ptr [edx], 30h ; '0'
.text:00408CA3                 inc     edx
.text:00408CA4                 mov     byte ptr [edx], 31h ; '1'
.text:00408CA7                 inc     edx
.text:00408CA8                 mov     byte ptr [edx], 32h ; '2'
.text:00408CAB                 jmp     short loc_408C81
.text:00408CAD ; ---------------------------------------------------------------------------
.text:00408CAD
.text:00408CAD loc_408CAD:                             ; CODE XREF: .text:00408C75↑j
.text:00408CAD                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408CB0                 inc     edx
.text:00408CB1                 mov     byte ptr [edx], 30h ; '0'
.text:00408CB4                 inc     edx
.text:00408CB5                 mov     byte ptr [edx], 34h ; '4'
.text:00408CB8                 inc     edx
.text:00408CB9                 mov     byte ptr [edx], 30h ; '0'
.text:00408CBC                 jmp     short loc_408C81
.text:00408CBE ; ---------------------------------------------------------------------------
.text:00408CBE
.text:00408CBE loc_408CBE:                             ; CODE XREF: .text:00408BC2↑j
.text:00408CBE                                         ; .text:00408BCA↑j ...
.text:00408CBE                 test    al, al
.text:00408CC0                 jz      loc_408BE0
.text:00408CC6                 mov     [esp], edx
.text:00408CC9                 mov     ebx, edx
.text:00408CCB                 call    strlen
.text:00408CD0                 lea     edx, ds:1[eax*4]
.text:00408CD7                 mov     [esp], edx
.text:00408CDA                 call    malloc
.text:00408CDF                 mov     [esp+28h], eax
.text:00408CE3                 mov     edx, eax
.text:00408CE5                 lea     esi, [esi+0]
.text:00408CE9                 lea     edi, [edi+0]
.text:00408CF0
.text:00408CF0 loc_408CF0:                             ; CODE XREF: .text:00408D08↓j
.text:00408CF0                 movzx   eax, byte ptr [ebx]
.text:00408CF3                 cmp     al, 20h ; ' '
.text:00408CF5                 jz      short loc_408D29
.text:00408CF7                 cmp     al, 9
.text:00408CF9                 jz      short loc_408D18
.text:00408CFB                 cmp     al, 5Ch ; '\'
.text:00408CFD                 jz      short loc_408D0F
.text:00408CFF                 mov     [edx], al
.text:00408D01
.text:00408D01 loc_408D01:                             ; CODE XREF: .text:00408D16↓j
.text:00408D01                                         ; .text:00408D27↓j ...
.text:00408D01                 movzx   ecx, byte ptr [ebx]
.text:00408D04                 inc     edx
.text:00408D05                 inc     ebx
.text:00408D06                 test    cl, cl
.text:00408D08                 jnz     short loc_408CF0
.text:00408D0A                 jmp     loc_408BE0
.text:00408D0F ; ---------------------------------------------------------------------------
.text:00408D0F
.text:00408D0F loc_408D0F:                             ; CODE XREF: .text:00408CFD↑j
.text:00408D0F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408D12                 inc     edx
.text:00408D13                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408D16                 jmp     short loc_408D01
.text:00408D18 ; ---------------------------------------------------------------------------
.text:00408D18
.text:00408D18 loc_408D18:                             ; CODE XREF: .text:00408CF9↑j
.text:00408D18                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408D1B                 inc     edx
.text:00408D1C                 mov     byte ptr [edx], 30h ; '0'
.text:00408D1F                 inc     edx
.text:00408D20                 mov     byte ptr [edx], 31h ; '1'
.text:00408D23                 inc     edx
.text:00408D24                 mov     byte ptr [edx], 32h ; '2'
.text:00408D27                 jmp     short loc_408D01
.text:00408D29 ; ---------------------------------------------------------------------------
.text:00408D29
.text:00408D29 loc_408D29:                             ; CODE XREF: .text:00408CF5↑j
.text:00408D29                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408D2C                 inc     edx
.text:00408D2D                 mov     byte ptr [edx], 30h ; '0'
.text:00408D30                 inc     edx
.text:00408D31                 mov     byte ptr [edx], 34h ; '4'
.text:00408D34                 inc     edx
.text:00408D35                 mov     byte ptr [edx], 30h ; '0'
.text:00408D38                 jmp     short loc_408D01
.text:00408D3A ; ---------------------------------------------------------------------------
.text:00408D3A
.text:00408D3A loc_408D3A:                             ; CODE XREF: .text:00408B92↑j
.text:00408D3A                                         ; .text:00408B9A↑j ...
.text:00408D3A                 test    al, al
.text:00408D3C                 jz      loc_408BB0
.text:00408D42                 mov     [esp], edx
.text:00408D45                 mov     ebx, edx
.text:00408D47                 call    strlen
.text:00408D4C                 lea     edx, ds:1[eax*4]
.text:00408D53                 mov     [esp], edx
.text:00408D56                 call    malloc
.text:00408D5B                 mov     [esp+24h], eax
.text:00408D5F                 mov     edx, eax
.text:00408D61                 jmp     short loc_408D70
.text:00408D61 ; ---------------------------------------------------------------------------
.text:00408D63                 align 10h
.text:00408D70
.text:00408D70 loc_408D70:                             ; CODE XREF: .text:00408D61↑j
.text:00408D70                                         ; .text:00408D88↓j
.text:00408D70                 movzx   eax, byte ptr [ebx]
.text:00408D73                 cmp     al, 20h ; ' '
.text:00408D75                 jz      short loc_408DA9
.text:00408D77                 cmp     al, 9
.text:00408D79                 jz      short loc_408D98
.text:00408D7B                 cmp     al, 5Ch ; '\'
.text:00408D7D                 jz      short loc_408D8F
.text:00408D7F                 mov     [edx], al
.text:00408D81
.text:00408D81 loc_408D81:                             ; CODE XREF: .text:00408D96↓j
.text:00408D81                                         ; .text:00408DA7↓j ...
.text:00408D81                 movzx   ecx, byte ptr [ebx]
.text:00408D84                 inc     edx
.text:00408D85                 inc     ebx
.text:00408D86                 test    cl, cl
.text:00408D88                 jnz     short loc_408D70
.text:00408D8A                 jmp     loc_408BB0
.text:00408D8F ; ---------------------------------------------------------------------------
.text:00408D8F
.text:00408D8F loc_408D8F:                             ; CODE XREF: .text:00408D7D↑j
.text:00408D8F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408D92                 inc     edx
.text:00408D93                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408D96                 jmp     short loc_408D81
.text:00408D98 ; ---------------------------------------------------------------------------
.text:00408D98
.text:00408D98 loc_408D98:                             ; CODE XREF: .text:00408D79↑j
.text:00408D98                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408D9B                 inc     edx
.text:00408D9C                 mov     byte ptr [edx], 30h ; '0'
.text:00408D9F                 inc     edx
.text:00408DA0                 mov     byte ptr [edx], 31h ; '1'
.text:00408DA3                 inc     edx
.text:00408DA4                 mov     byte ptr [edx], 32h ; '2'
.text:00408DA7                 jmp     short loc_408D81
.text:00408DA9 ; ---------------------------------------------------------------------------
.text:00408DA9
.text:00408DA9 loc_408DA9:                             ; CODE XREF: .text:00408D75↑j
.text:00408DA9                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408DAC                 inc     edx
.text:00408DAD                 mov     byte ptr [edx], 30h ; '0'
.text:00408DB0                 inc     edx
.text:00408DB1                 mov     byte ptr [edx], 34h ; '4'
.text:00408DB4                 inc     edx
.text:00408DB5                 mov     byte ptr [edx], 30h ; '0'
.text:00408DB8                 jmp     short loc_408D81
.text:00408DBA ; ---------------------------------------------------------------------------
.text:00408DBA
.text:00408DBA loc_408DBA:                             ; CODE XREF: .text:00408B62↑j
.text:00408DBA                                         ; .text:00408B6A↑j ...
.text:00408DBA                 test    al, al
.text:00408DBC                 jz      loc_408B80
.text:00408DC2                 mov     [esp], edx
.text:00408DC5                 mov     ebx, edx
.text:00408DC7                 call    strlen
.text:00408DCC                 lea     ecx, ds:1[eax*4]
.text:00408DD3                 mov     [esp], ecx
.text:00408DD6                 call    malloc
.text:00408DDB                 mov     [esp+20h], eax
.text:00408DDF                 mov     edx, eax
.text:00408DE1                 jmp     short loc_408DF0
.text:00408DE1 ; ---------------------------------------------------------------------------
.text:00408DE3                 align 10h
.text:00408DF0
.text:00408DF0 loc_408DF0:                             ; CODE XREF: .text:00408DE1↑j
.text:00408DF0                                         ; .text:00408E08↓j
.text:00408DF0                 movzx   eax, byte ptr [ebx]
.text:00408DF3                 cmp     al, 20h ; ' '
.text:00408DF5                 jz      short loc_408E29
.text:00408DF7                 cmp     al, 9
.text:00408DF9                 jz      short loc_408E18
.text:00408DFB                 cmp     al, 5Ch ; '\'
.text:00408DFD                 jz      short loc_408E0F
.text:00408DFF                 mov     [edx], al
.text:00408E01
.text:00408E01 loc_408E01:                             ; CODE XREF: .text:00408E16↓j
.text:00408E01                                         ; .text:00408E27↓j ...
.text:00408E01                 movzx   ecx, byte ptr [ebx]
.text:00408E04                 inc     edx
.text:00408E05                 inc     ebx
.text:00408E06                 test    cl, cl
.text:00408E08                 jnz     short loc_408DF0
.text:00408E0A                 jmp     loc_408B80
.text:00408E0F ; ---------------------------------------------------------------------------
.text:00408E0F
.text:00408E0F loc_408E0F:                             ; CODE XREF: .text:00408DFD↑j
.text:00408E0F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408E12                 inc     edx
.text:00408E13                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408E16                 jmp     short loc_408E01
.text:00408E18 ; ---------------------------------------------------------------------------
.text:00408E18
.text:00408E18 loc_408E18:                             ; CODE XREF: .text:00408DF9↑j
.text:00408E18                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408E1B                 inc     edx
.text:00408E1C                 mov     byte ptr [edx], 30h ; '0'
.text:00408E1F                 inc     edx
.text:00408E20                 mov     byte ptr [edx], 31h ; '1'
.text:00408E23                 inc     edx
.text:00408E24                 mov     byte ptr [edx], 32h ; '2'
.text:00408E27                 jmp     short loc_408E01
.text:00408E29 ; ---------------------------------------------------------------------------
.text:00408E29
.text:00408E29 loc_408E29:                             ; CODE XREF: .text:00408DF5↑j
.text:00408E29                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408E2C                 inc     edx
.text:00408E2D                 mov     byte ptr [edx], 30h ; '0'
.text:00408E30                 inc     edx
.text:00408E31                 mov     byte ptr [edx], 34h ; '4'
.text:00408E34                 inc     edx
.text:00408E35                 mov     byte ptr [edx], 30h ; '0'
.text:00408E38                 jmp     short loc_408E01
.text:00408E38 ; ---------------------------------------------------------------------------
.text:00408E3A                 align 10h
.text:00408E40
.text:00408E40 ; =============== S U B R O U T I N E =======================================
.text:00408E40
.text:00408E40 ; Attributes: info_from_lumina
.text:00408E40
.text:00408E40 ; int __cdecl __addmntentstr(char *, int)
.text:00408E40 ___addmntentstr proc near               ; CODE XREF: .text:0040870A↑p
.text:00408E40
.text:00408E40 Buffer          = dword ptr -4Ch
.text:00408E40 Format          = dword ptr -48h
.text:00408E40 var_44          = dword ptr -44h
.text:00408E40 var_40          = dword ptr -40h
.text:00408E40 var_3C          = dword ptr -3Ch
.text:00408E40 var_38          = dword ptr -38h
.text:00408E40 var_34          = dword ptr -34h
.text:00408E40 var_30          = dword ptr -30h
.text:00408E40 var_2C          = dword ptr -2Ch
.text:00408E40 var_28          = dword ptr -28h
.text:00408E40 var_24          = dword ptr -24h
.text:00408E40 Str             = dword ptr -20h
.text:00408E40 var_1C          = dword ptr -1Ch
.text:00408E40 var_18          = dword ptr -18h
.text:00408E40 arg_0           = dword ptr  4
.text:00408E40 arg_4           = dword ptr  8
.text:00408E40
.text:00408E40                 push    ebx
.text:00408E41                 sub     esp, 48h
.text:00408E44                 mov     edx, [esp+4Ch+arg_4]
.text:00408E48                 mov     ecx, [edx]
.text:00408E4A                 mov     [esp+4Ch+var_2C], ecx
.text:00408E4E                 mov     ebx, [edx+4]
.text:00408E51                 mov     [esp+4Ch+var_28], ebx
.text:00408E55                 mov     ebx, [edx+8]
.text:00408E58                 mov     [esp+4Ch+var_24], ebx
.text:00408E5C                 mov     ebx, [edx+0Ch]
.text:00408E5F                 mov     [esp+4Ch+Str], ebx
.text:00408E63                 mov     ebx, [edx+10h]
.text:00408E66                 mov     [esp+4Ch+var_1C], ebx
.text:00408E6A                 mov     ebx, [edx+14h]
.text:00408E6D                 mov     [esp+4Ch+var_18], ebx
.text:00408E71                 mov     ebx, ecx
.text:00408E73                 movzx   eax, byte ptr [ecx]
.text:00408E76                 test    al, al
.text:00408E78                 jz      loc_409161
.text:00408E7E                 mov     esi, esi
.text:00408E80
.text:00408E80 loc_408E80:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:00408E80                 cmp     al, 20h ; ' '
.text:00408E82                 jz      loc_4090E0
.text:00408E88                 cmp     al, 9
.text:00408E8A                 jz      loc_4090E0
.text:00408E90                 cmp     al, 5Ch ; '\'
.text:00408E92                 jz      loc_4090E0
.text:00408E98                 inc     ebx
.text:00408E99                 movzx   eax, byte ptr [ebx]
.text:00408E9C                 test    al, al
.text:00408E9E                 jnz     short loc_408E80
.text:00408EA0
.text:00408EA0 loc_408EA0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:00408EA0                                         ; ___addmntentstr+2EA↓j
.text:00408EA0                 mov     ebx, [esp+4Ch+var_28]
.text:00408EA4                 mov     edx, ebx
.text:00408EA6                 movzx   eax, byte ptr [ebx]
.text:00408EA9                 test    al, al
.text:00408EAB                 jz      short loc_408ED0
.text:00408EAD                 lea     esi, [esi+0]
.text:00408EB0
.text:00408EB0 loc_408EB0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:00408EB0                 cmp     al, 20h ; ' '
.text:00408EB2                 jz      loc_40905A
.text:00408EB8                 cmp     al, 9
.text:00408EBA                 jz      loc_40905A
.text:00408EC0                 cmp     al, 5Ch ; '\'
.text:00408EC2                 jz      loc_40905A
.text:00408EC8                 inc     ebx
.text:00408EC9                 movzx   eax, byte ptr [ebx]
.text:00408ECC                 test    al, al
.text:00408ECE                 jnz     short loc_408EB0
.text:00408ED0
.text:00408ED0 loc_408ED0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:00408ED0                                         ; ___addmntentstr+21C↓j ...
.text:00408ED0                 mov     ebx, [esp+4Ch+var_24]
.text:00408ED4                 mov     edx, ebx
.text:00408ED6                 movzx   eax, byte ptr [ebx]
.text:00408ED9                 test    al, al
.text:00408EDB                 jz      short loc_408F00
.text:00408EDD                 lea     esi, [esi+0]
.text:00408EE0
.text:00408EE0 loc_408EE0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:00408EE0                 cmp     al, 20h ; ' '
.text:00408EE2                 jz      loc_408FDE
.text:00408EE8                 cmp     al, 9
.text:00408EEA                 jz      loc_408FDE
.text:00408EF0                 cmp     al, 5Ch ; '\'
.text:00408EF2                 jz      loc_408FDE
.text:00408EF8                 inc     ebx
.text:00408EF9                 movzx   eax, byte ptr [ebx]
.text:00408EFC                 test    al, al
.text:00408EFE                 jnz     short loc_408EE0
.text:00408F00
.text:00408F00 loc_408F00:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:00408F00                                         ; ___addmntentstr+1A0↓j ...
.text:00408F00                 mov     edx, [esp+4Ch+Str]
.text:00408F04                 mov     ebx, edx
.text:00408F06                 movzx   eax, byte ptr [edx]
.text:00408F09                 test    al, al
.text:00408F0B                 jz      short loc_408F24
.text:00408F0D                 lea     esi, [esi+0]
.text:00408F10
.text:00408F10 loc_408F10:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:00408F10                 cmp     al, 20h ; ' '
.text:00408F12                 jz      short loc_408F6C
.text:00408F14                 cmp     al, 9
.text:00408F16                 jz      short loc_408F6C
.text:00408F18                 cmp     al, 5Ch ; '\'
.text:00408F1A                 jz      short loc_408F6C
.text:00408F1C                 inc     ebx
.text:00408F1D                 movzx   eax, byte ptr [ebx]
.text:00408F20                 test    al, al
.text:00408F22                 jnz     short loc_408F10
.text:00408F24
.text:00408F24 loc_408F24:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:00408F24                                         ; ___addmntentstr+12E↓j ...
.text:00408F24                 mov     [esp+4Ch+var_38], edx
.text:00408F28                 mov     ebx, [esp+4Ch+var_18]
.text:00408F2C                 mov     ecx, [esp+4Ch+var_1C]
.text:00408F30                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00408F38                 mov     edx, [esp+4Ch+var_2C]
.text:00408F3C                 mov     [esp+4Ch+var_30], ebx
.text:00408F40                 mov     ebx, [esp+4Ch+var_24]
.text:00408F44                 mov     [esp+4Ch+var_34], ecx
.text:00408F48                 mov     ecx, [esp+4Ch+var_28]
.text:00408F4C                 mov     [esp+4Ch+var_3C], ebx
.text:00408F50                 mov     ebx, [esp+4Ch+arg_0]
.text:00408F54                 mov     [esp+4Ch+var_40], ecx
.text:00408F58                 mov     [esp+4Ch+var_44], edx
.text:00408F5C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:00408F5F                 call    sprintf
.text:00408F64                 add     esp, 48h
.text:00408F67                 shr     eax, 1Fh
.text:00408F6A                 pop     ebx
.text:00408F6B                 retn
.text:00408F6C ; ---------------------------------------------------------------------------
.text:00408F6C
.text:00408F6C loc_408F6C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:00408F6C                                         ; ___addmntentstr+D6↑j ...
.text:00408F6C                 test    al, al
.text:00408F6E                 jz      short loc_408F24
.text:00408F70                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00408F73                 mov     ebx, edx
.text:00408F75                 call    strlen
.text:00408F7A                 lea     edx, ds:1[eax*4]
.text:00408F81                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00408F84                 call    malloc
.text:00408F89                 mov     [esp+4Ch+Str], eax
.text:00408F8D                 mov     edx, eax
.text:00408F8F                 nop
.text:00408F90
.text:00408F90 loc_408F90:                             ; CODE XREF: ___addmntentstr+168↓j
.text:00408F90                 movzx   eax, byte ptr [ebx]
.text:00408F93                 cmp     al, 20h ; ' '
.text:00408F95                 jz      short loc_408FCD
.text:00408F97                 cmp     al, 9
.text:00408F99                 jz      short loc_408FBC
.text:00408F9B                 cmp     al, 5Ch ; '\'
.text:00408F9D                 jz      short loc_408FB3
.text:00408F9F                 mov     [edx], al
.text:00408FA1
.text:00408FA1 loc_408FA1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:00408FA1                                         ; ___addmntentstr+18B↓j ...
.text:00408FA1                 movzx   ecx, byte ptr [ebx]
.text:00408FA4                 inc     edx
.text:00408FA5                 inc     ebx
.text:00408FA6                 test    cl, cl
.text:00408FA8                 jnz     short loc_408F90
.text:00408FAA                 mov     edx, [esp+4Ch+Str]
.text:00408FAE                 jmp     loc_408F24
.text:00408FB3 ; ---------------------------------------------------------------------------
.text:00408FB3
.text:00408FB3 loc_408FB3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:00408FB3                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408FB6                 inc     edx
.text:00408FB7                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408FBA                 jmp     short loc_408FA1
.text:00408FBC ; ---------------------------------------------------------------------------
.text:00408FBC
.text:00408FBC loc_408FBC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:00408FBC                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408FBF                 inc     edx
.text:00408FC0                 mov     byte ptr [edx], 30h ; '0'
.text:00408FC3                 inc     edx
.text:00408FC4                 mov     byte ptr [edx], 31h ; '1'
.text:00408FC7                 inc     edx
.text:00408FC8                 mov     byte ptr [edx], 32h ; '2'
.text:00408FCB                 jmp     short loc_408FA1
.text:00408FCD ; ---------------------------------------------------------------------------
.text:00408FCD
.text:00408FCD loc_408FCD:                             ; CODE XREF: ___addmntentstr+155↑j
.text:00408FCD                 mov     byte ptr [edx], 5Ch ; '\'
.text:00408FD0                 inc     edx
.text:00408FD1                 mov     byte ptr [edx], 30h ; '0'
.text:00408FD4                 inc     edx
.text:00408FD5                 mov     byte ptr [edx], 34h ; '4'
.text:00408FD8                 inc     edx
.text:00408FD9                 mov     byte ptr [edx], 30h ; '0'
.text:00408FDC                 jmp     short loc_408FA1
.text:00408FDE ; ---------------------------------------------------------------------------
.text:00408FDE
.text:00408FDE loc_408FDE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:00408FDE                                         ; ___addmntentstr+AA↑j ...
.text:00408FDE                 test    al, al
.text:00408FE0                 jz      loc_408F00
.text:00408FE6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00408FE9                 mov     ebx, edx
.text:00408FEB                 call    strlen
.text:00408FF0                 lea     edx, ds:1[eax*4]
.text:00408FF7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00408FFA                 call    malloc
.text:00408FFF                 mov     [esp+4Ch+var_24], eax
.text:00409003                 mov     edx, eax
.text:00409005                 lea     esi, [esi+0]
.text:00409009                 lea     edi, [edi+0]
.text:00409010
.text:00409010 loc_409010:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:00409010                 movzx   eax, byte ptr [ebx]
.text:00409013                 cmp     al, 20h ; ' '
.text:00409015                 jz      short loc_409049
.text:00409017                 cmp     al, 9
.text:00409019                 jz      short loc_409038
.text:0040901B                 cmp     al, 5Ch ; '\'
.text:0040901D                 jz      short loc_40902F
.text:0040901F                 mov     [edx], al
.text:00409021
.text:00409021 loc_409021:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:00409021                                         ; ___addmntentstr+207↓j ...
.text:00409021                 movzx   ecx, byte ptr [ebx]
.text:00409024                 inc     edx
.text:00409025                 inc     ebx
.text:00409026                 test    cl, cl
.text:00409028                 jnz     short loc_409010
.text:0040902A                 jmp     loc_408F00
.text:0040902F ; ---------------------------------------------------------------------------
.text:0040902F
.text:0040902F loc_40902F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040902F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409032                 inc     edx
.text:00409033                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409036                 jmp     short loc_409021
.text:00409038 ; ---------------------------------------------------------------------------
.text:00409038
.text:00409038 loc_409038:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:00409038                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040903B                 inc     edx
.text:0040903C                 mov     byte ptr [edx], 30h ; '0'
.text:0040903F                 inc     edx
.text:00409040                 mov     byte ptr [edx], 31h ; '1'
.text:00409043                 inc     edx
.text:00409044                 mov     byte ptr [edx], 32h ; '2'
.text:00409047                 jmp     short loc_409021
.text:00409049 ; ---------------------------------------------------------------------------
.text:00409049
.text:00409049 loc_409049:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:00409049                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040904C                 inc     edx
.text:0040904D                 mov     byte ptr [edx], 30h ; '0'
.text:00409050                 inc     edx
.text:00409051                 mov     byte ptr [edx], 34h ; '4'
.text:00409054                 inc     edx
.text:00409055                 mov     byte ptr [edx], 30h ; '0'
.text:00409058                 jmp     short loc_409021
.text:0040905A ; ---------------------------------------------------------------------------
.text:0040905A
.text:0040905A loc_40905A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040905A                                         ; ___addmntentstr+7A↑j ...
.text:0040905A                 test    al, al
.text:0040905C                 jz      loc_408ED0
.text:00409062                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00409065                 mov     ebx, edx
.text:00409067                 call    strlen
.text:0040906C                 lea     edx, ds:1[eax*4]
.text:00409073                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00409076                 call    malloc
.text:0040907B                 mov     [esp+4Ch+var_28], eax
.text:0040907F                 mov     edx, eax
.text:00409081                 jmp     short loc_409090
.text:00409081 ; ---------------------------------------------------------------------------
.text:00409083                 align 10h
.text:00409090
.text:00409090 loc_409090:                             ; CODE XREF: ___addmntentstr+241↑j
.text:00409090                                         ; ___addmntentstr+268↓j
.text:00409090                 movzx   eax, byte ptr [ebx]
.text:00409093                 cmp     al, 20h ; ' '
.text:00409095                 jz      short loc_4090C9
.text:00409097                 cmp     al, 9
.text:00409099                 jz      short loc_4090B8
.text:0040909B                 cmp     al, 5Ch ; '\'
.text:0040909D                 jz      short loc_4090AF
.text:0040909F                 mov     [edx], al
.text:004090A1
.text:004090A1 loc_4090A1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:004090A1                                         ; ___addmntentstr+287↓j ...
.text:004090A1                 movzx   ecx, byte ptr [ebx]
.text:004090A4                 inc     edx
.text:004090A5                 inc     ebx
.text:004090A6                 test    cl, cl
.text:004090A8                 jnz     short loc_409090
.text:004090AA                 jmp     loc_408ED0
.text:004090AF ; ---------------------------------------------------------------------------
.text:004090AF
.text:004090AF loc_4090AF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:004090AF                 mov     byte ptr [edx], 5Ch ; '\'
.text:004090B2                 inc     edx
.text:004090B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004090B6                 jmp     short loc_4090A1
.text:004090B8 ; ---------------------------------------------------------------------------
.text:004090B8
.text:004090B8 loc_4090B8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:004090B8                 mov     byte ptr [edx], 5Ch ; '\'
.text:004090BB                 inc     edx
.text:004090BC                 mov     byte ptr [edx], 30h ; '0'
.text:004090BF                 inc     edx
.text:004090C0                 mov     byte ptr [edx], 31h ; '1'
.text:004090C3                 inc     edx
.text:004090C4                 mov     byte ptr [edx], 32h ; '2'
.text:004090C7                 jmp     short loc_4090A1
.text:004090C9 ; ---------------------------------------------------------------------------
.text:004090C9
.text:004090C9 loc_4090C9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:004090C9                 mov     byte ptr [edx], 5Ch ; '\'
.text:004090CC                 inc     edx
.text:004090CD                 mov     byte ptr [edx], 30h ; '0'
.text:004090D0                 inc     edx
.text:004090D1                 mov     byte ptr [edx], 34h ; '4'
.text:004090D4                 inc     edx
.text:004090D5                 mov     byte ptr [edx], 30h ; '0'
.text:004090D8                 jmp     short loc_4090A1
.text:004090D8 ; ---------------------------------------------------------------------------
.text:004090DA                 align 10h
.text:004090E0
.text:004090E0 loc_4090E0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:004090E0                                         ; ___addmntentstr+4A↑j ...
.text:004090E0                 test    al, al
.text:004090E2                 jz      loc_408EA0
.text:004090E8                 mov     ebx, [esp+4Ch+var_2C]
.text:004090EC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:004090EF                 call    strlen
.text:004090F4                 lea     edx, ds:1[eax*4]
.text:004090FB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004090FE                 call    malloc
.text:00409103                 mov     [esp+4Ch+var_2C], eax
.text:00409107                 mov     edx, eax
.text:00409109                 lea     esi, [esi+0]
.text:00409110
.text:00409110 loc_409110:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:00409110                 movzx   eax, byte ptr [ebx]
.text:00409113                 cmp     al, 20h ; ' '
.text:00409115                 jz      short loc_409150
.text:00409117                 cmp     al, 9
.text:00409119                 jz      short loc_409138
.text:0040911B                 cmp     al, 5Ch ; '\'
.text:0040911D                 jz      short loc_40912F
.text:0040911F                 mov     [edx], al
.text:00409121
.text:00409121 loc_409121:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:00409121                                         ; ___addmntentstr+307↓j ...
.text:00409121                 movzx   ecx, byte ptr [ebx]
.text:00409124                 inc     edx
.text:00409125                 inc     ebx
.text:00409126                 test    cl, cl
.text:00409128                 jnz     short loc_409110
.text:0040912A                 jmp     loc_408EA0
.text:0040912F ; ---------------------------------------------------------------------------
.text:0040912F
.text:0040912F loc_40912F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040912F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409132                 inc     edx
.text:00409133                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409136                 jmp     short loc_409121
.text:00409138 ; ---------------------------------------------------------------------------
.text:00409138
.text:00409138 loc_409138:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:00409138                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040913B                 inc     edx
.text:0040913C                 mov     byte ptr [edx], 30h ; '0'
.text:0040913F                 inc     edx
.text:00409140                 mov     byte ptr [edx], 31h ; '1'
.text:00409143                 inc     edx
.text:00409144                 mov     byte ptr [edx], 32h ; '2'
.text:00409147                 jmp     short loc_409121
.text:00409147 ; ---------------------------------------------------------------------------
.text:00409149                 align 10h
.text:00409150
.text:00409150 loc_409150:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:00409150                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409153                 inc     edx
.text:00409154                 mov     byte ptr [edx], 30h ; '0'
.text:00409157                 inc     edx
.text:00409158                 mov     byte ptr [edx], 34h ; '4'
.text:0040915B                 inc     edx
.text:0040915C                 mov     byte ptr [edx], 30h ; '0'
.text:0040915F                 jmp     short loc_409121
.text:00409161 ; ---------------------------------------------------------------------------
.text:00409161
.text:00409161 loc_409161:                             ; CODE XREF: ___addmntentstr+38↑j
.text:00409161                 movzx   eax, byte ptr [ecx]
.text:00409164                 jmp     loc_4090E0
.text:00409164 ___addmntentstr endp
.text:00409164
.text:00409164 ; ---------------------------------------------------------------------------
.text:00409169                 align 10h
.text:00409170
.text:00409170 ; =============== S U B R O U T I N E =======================================
.text:00409170
.text:00409170
.text:00409170 sub_409170      proc near               ; CODE XREF: sub_407230+99↑p
.text:00409170
.text:00409170 nBufferLength   = dword ptr -1Ch
.text:00409170 lpBuffer        = dword ptr -18h
.text:00409170 dwBytes         = dword ptr -14h
.text:00409170 var_8           = dword ptr -8
.text:00409170 var_4           = dword ptr -4
.text:00409170
.text:00409170                 sub     esp, 1Ch
.text:00409173                 mov     [esp+1Ch+var_8], ebx
.text:00409177                 mov     [esp+1Ch+var_4], esi
.text:0040917B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:00409183                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040918A                 call    GetLogicalDriveStringsA
.text:0040918F                 sub     esp, 8
.text:00409192                 mov     ebx, eax
.text:00409194                 call    GetProcessHeap
.text:00409199                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040919C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:004091A0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:004091A8                 call    HeapAlloc
.text:004091AD                 sub     esp, 0Ch
.text:004091B0                 mov     esi, eax
.text:004091B2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:004091B5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:004091B9                 call    GetLogicalDriveStringsA
.text:004091BE                 sub     esp, 8
.text:004091C1                 mov     eax, esi
.text:004091C3                 mov     ebx, [esp+1Ch+var_8]
.text:004091C7                 mov     esi, [esp+1Ch+var_4]
.text:004091CB                 add     esp, 1Ch
.text:004091CE                 retn
.text:004091CE sub_409170      endp
.text:004091CE
.text:004091CF
.text:004091CF ; =============== S U B R O U T I N E =======================================
.text:004091CF
.text:004091CF
.text:004091CF ; int __cdecl sub_4091CF(char *, char *)
.text:004091CF sub_4091CF      proc near               ; DATA XREF: sub_4091CF:loc_40925D↓o
.text:004091CF
.text:004091CF FileName        = dword ptr -1Ch
.text:004091CF Mode            = dword ptr -18h
.text:004091CF dwBytes         = dword ptr -14h
.text:004091CF arg_0           = dword ptr  4
.text:004091CF arg_4           = dword ptr  8
.text:004091CF
.text:004091CF                 ja      short $+2
.text:004091D1
.text:004091D1 loc_4091D1:                             ; CODE XREF: sub_4091CF↑j
.text:004091D1                 jmp     short loc_4091E0
.text:004091D1 ; ---------------------------------------------------------------------------
.text:004091D3                 align 10h
.text:004091E0
.text:004091E0 loc_4091E0:                             ; CODE XREF: sub_4091CF:loc_4091D1↑j
.text:004091E0                 push    edi
.text:004091E1                 push    esi
.text:004091E2                 push    ebx
.text:004091E3                 sub     esp, 10h
.text:004091E6                 mov     ebx, [esp+1Ch+arg_0]
.text:004091EA                 mov     edx, [esp+1Ch+arg_4]
.text:004091EE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:004091F1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:004091F5                 call    fopen
.text:004091FA                 test    eax, eax
.text:004091FC                 mov     edi, eax
.text:004091FE                 jz      short loc_40925D
.text:00409200
.text:00409200 loc_409200:                             ; CODE XREF: sub_4091CF+A2↓j
.text:00409200                                         ; sub_4091CF+AB↓j
.text:00409200                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:00409208                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040920F                 call    GetLogicalDriveStringsA
.text:00409214                 sub     esp, 8
.text:00409217                 mov     esi, eax
.text:00409219                 call    GetProcessHeap
.text:0040921E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:00409221                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:00409225                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040922D                 call    HeapAlloc
.text:00409232                 sub     esp, 0Ch
.text:00409235                 mov     ebx, eax
.text:00409237                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040923A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040923E                 call    GetLogicalDriveStringsA
.text:00409243                 mov     off_40E074, ebx ; "notset"
.text:00409249                 sub     esp, 8
.text:0040924C                 xor     eax, eax
.text:0040924E                 test    ebx, ebx
.text:00409250                 setz    al
.text:00409253                 add     esp, 10h
.text:00409256                 pop     ebx
.text:00409257                 dec     eax
.text:00409258                 and     eax, edi
.text:0040925A                 pop     esi
.text:0040925B                 pop     edi
.text:0040925C                 retn
.text:0040925D ; ---------------------------------------------------------------------------
.text:0040925D
.text:0040925D loc_40925D:                             ; CODE XREF: sub_4091CF+2F↑j
.text:0040925D                 mov     [esp+1Ch+Mode], offset sub_4091CF ; Mode
.text:00409265                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00409268                 call    fopen
.text:0040926D                 test    eax, eax
.text:0040926F                 mov     edi, eax
.text:00409271                 jnz     short loc_409200
.text:00409273                 call    sub_40A060
.text:00409278                 mov     edi, eax
.text:0040927A                 jmp     short loc_409200
.text:0040927A sub_4091CF      endp
.text:0040927A
.text:0040927A ; ---------------------------------------------------------------------------
.text:0040927C                 align 10h
.text:00409280                 sub     esp, 0Ch
.text:00409283                 mov     eax, [esp+10h]
.text:00409287                 test    eax, eax
.text:00409289                 jz      short loc_409293
.text:0040928B                 mov     [esp], eax
.text:0040928E                 call    fclose
.text:00409293
.text:00409293 loc_409293:                             ; CODE XREF: .text:00409289↑j
.text:00409293                 call    GetProcessHeap
.text:00409298                 mov     [esp], eax
.text:0040929B                 mov     ecx, off_40E074 ; "notset"
.text:004092A1                 mov     dword ptr [esp+4], 0
.text:004092A9                 mov     [esp+8], ecx
.text:004092AD                 call    HeapFree
.text:004092B2                 mov     edx, off_40E070 ; "notset"
.text:004092B8                 sub     esp, 0Ch
.text:004092BB                 mov     eax, 1
.text:004092C0                 mov     off_40E074, edx ; "notset"
.text:004092C6                 add     esp, 0Ch
.text:004092C9                 retn
.text:004092C9 ; ---------------------------------------------------------------------------
.text:004092CA                 align 10h
.text:004092D0                 push    edi
.text:004092D1                 push    esi
.text:004092D2                 push    ebx
.text:004092D3                 sub     esp, 10h
.text:004092D6                 mov     edi, [esp+24h]
.text:004092DA                 mov     [esp], edi
.text:004092DD                 call    strlen
.text:004092E2                 mov     edx, [esp+20h]
.text:004092E6                 mov     esi, eax
.text:004092E8                 mov     ebx, [edx+0Ch]
.text:004092EB                 nop
.text:004092EC                 lea     esi, [esi+0]
.text:004092F0
.text:004092F0 loc_4092F0:                             ; CODE XREF: .text:00409321↓j
.text:004092F0                 mov     [esp+4], edi
.text:004092F4                 mov     [esp], ebx
.text:004092F7                 call    strstr
.text:004092FC                 test    eax, eax
.text:004092FE                 jz      short loc_409323
.text:00409300                 cmp     eax, ebx
.text:00409302                 jz      short loc_409325
.text:00409304                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:00409308                 jz      short loc_409330
.text:0040930A
.text:0040930A loc_40930A:                             ; CODE XREF: .text:00409340↓j
.text:0040930A                 mov     [esp], ebx
.text:0040930D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:00409315                 call    strchr
.text:0040931A                 test    eax, eax
.text:0040931C                 mov     ebx, eax
.text:0040931E                 jz      short loc_409323
.text:00409320                 inc     ebx
.text:00409321                 jmp     short loc_4092F0
.text:00409323 ; ---------------------------------------------------------------------------
.text:00409323
.text:00409323 loc_409323:                             ; CODE XREF: .text:004092FE↑j
.text:00409323                                         ; .text:0040931E↑j
.text:00409323                 xor     eax, eax
.text:00409325
.text:00409325 loc_409325:                             ; CODE XREF: .text:00409302↑j
.text:00409325                                         ; .text:00409336↓j ...
.text:00409325                 add     esp, 10h
.text:00409328                 pop     ebx
.text:00409329                 pop     esi
.text:0040932A                 pop     edi
.text:0040932B                 retn
.text:0040932B ; ---------------------------------------------------------------------------
.text:0040932C                 align 10h
.text:00409330
.text:00409330 loc_409330:                             ; CODE XREF: .text:00409308↑j
.text:00409330                 movzx   edx, byte ptr [esi+eax]
.text:00409334                 test    dl, dl
.text:00409336                 jz      short loc_409325
.text:00409338                 cmp     dl, 3Dh ; '='
.text:0040933B                 jz      short loc_409325
.text:0040933D                 cmp     dl, 2Ch ; ','
.text:00409340                 jnz     short loc_40930A
.text:00409342                 jmp     short loc_409325
.text:00409342 ; ---------------------------------------------------------------------------
.text:00409344                 align 10h
.text:00409350 ; const char aFxstat64BadFil[]
.text:00409350 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:00409350                                         ; DATA XREF: sub_409380+7B↓o
.text:00409374                 align 10h
.text:00409380
.text:00409380 ; =============== S U B R O U T I N E =======================================
.text:00409380
.text:00409380
.text:00409380 ; int __cdecl sub_409380(HANDLE hNamedPipe, int, int)
.text:00409380 sub_409380      proc near               ; CODE XREF: .text:00407449↑p
.text:00409380
.text:00409380 FileHandle      = dword ptr -1Ch
.text:00409380 var_18          = dword ptr -18h
.text:00409380 var_C           = dword ptr -0Ch
.text:00409380 var_8           = dword ptr -8
.text:00409380 var_4           = dword ptr -4
.text:00409380 hNamedPipe      = dword ptr  4
.text:00409380 arg_4           = dword ptr  8
.text:00409380 arg_8           = dword ptr  0Ch
.text:00409380
.text:00409380                 sub     esp, 1Ch
.text:00409383                 mov     edx, [esp+1Ch+arg_4]
.text:00409387                 mov     [esp+1Ch+var_C], ebx
.text:0040938B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040938F                 mov     [esp+1Ch+var_8], esi
.text:00409393                 mov     esi, [esp+1Ch+arg_8]
.text:00409397                 test    ebx, ebx
.text:00409399                 mov     [esp+1Ch+var_4], edi
.text:0040939D                 jnz     short loc_4093D7
.text:0040939F                 test    edx, edx
.text:004093A1                 js      short loc_4093F7
.text:004093A3                 test    esi, esi
.text:004093A5                 jz      short loc_4093D7
.text:004093A7                 cld
.text:004093A8                 mov     eax, ebx
.text:004093AA                 mov     edi, esi
.text:004093AC                 mov     ecx, 18h
.text:004093B1                 rep stosd
.text:004093B3                 mov     [esp+1Ch+arg_4], esi ; int
.text:004093B7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:004093BA                 call    _get_osfhandle
.text:004093BF                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:004093C3                 mov     ebx, [esp+1Ch+var_C]
.text:004093C7                 mov     esi, [esp+1Ch+var_8]
.text:004093CB                 mov     edi, [esp+1Ch+var_4]
.text:004093CF                 add     esp, 1Ch
.text:004093D2                 jmp     sub_4053B0
.text:004093D7 ; ---------------------------------------------------------------------------
.text:004093D7
.text:004093D7 loc_4093D7:                             ; CODE XREF: sub_409380+1D↑j
.text:004093D7                                         ; sub_409380+25↑j
.text:004093D7                 call    _errno
.text:004093DC                 mov     dword ptr [eax], 16h
.text:004093E2
.text:004093E2 loc_4093E2:                             ; CODE XREF: sub_409380+92↓j
.text:004093E2                 mov     ebx, [esp+1Ch+var_C]
.text:004093E6                 mov     eax, 0FFFFFFFFh
.text:004093EB                 mov     esi, [esp+1Ch+var_8]
.text:004093EF                 mov     edi, [esp+1Ch+var_4]
.text:004093F3                 add     esp, 1Ch
.text:004093F6                 retn
.text:004093F7 ; ---------------------------------------------------------------------------
.text:004093F7
.text:004093F7 loc_4093F7:                             ; CODE XREF: sub_409380+21↑j
.text:004093F7                 mov     [esp+1Ch+var_18], edx
.text:004093FB                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:00409402                 call    printf
.text:00409407                 call    _errno
.text:0040940C                 mov     dword ptr [eax], 9
.text:00409412                 jmp     short loc_4093E2
.text:00409412 sub_409380      endp
.text:00409412
.text:00409412 ; ---------------------------------------------------------------------------
.text:00409414                 db 1Ch dup(90h)
.text:00409430 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040964F↓o
.text:0040943C aLu             db '%lu',0              ; DATA XREF: .text:0040965F↓o
.text:00409440 asc_409440      db ' ',0                ; DATA XREF: .text:loc_409748↓o
.text:00409442                 align 10h
.text:00409450 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00409450                                         ; DATA XREF: .text:0040977F↓o
.text:00409470 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40978D↓o
.text:0040947C aServer         db ' Server',0          ; DATA XREF: .text:004097B6↓o
.text:0040947C                                         ; .text:loc_40992E↓o
.text:00409484 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_4097C8↓o
.text:00409495 aDatacenterServ db ' Datacenter Server',0
.text:00409495                                         ; DATA XREF: .text:loc_4097D2↓o
.text:004094A8 aStandardEditio db ' Standard Edition',0
.text:004094A8                                         ; DATA XREF: .text:004097FA↓o
.text:004094BA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_409804↓o
.text:004094C7 aEnterpriseEdit db ' Enterprise Edition',0
.text:004094C7                                         ; DATA XREF: .text:loc_40980E↓o
.text:004094DB aDatacenterEdit db ' Datacenter Edition',0
.text:004094DB                                         ; DATA XREF: .text:loc_409818↓o
.text:004094EF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040982B↓o
.text:004094FD aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_409835↓o
.text:004094FD                                         ; .text:loc_409940↓o
.text:0040950B                 align 10h
.text:00409510 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00409510                                         ; DATA XREF: .text:00409862↓o
.text:00409540 aProducttype    db 'ProductType',0      ; DATA XREF: .text:004098A9↓o
.text:0040954C aWinnt          db 'WINNT',0            ; DATA XREF: .text:004098E4↓o
.text:00409552 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:004098FB↓o
.text:0040955B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00409912↓o
.text:00409564                 align 10h
.text:00409570 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00409570                                         ; DATA XREF: .text:00409A87↓o
.text:00409593                 db 1Dh dup(90h)
.text:004095B0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:004095B0                                         ; DATA XREF: .text:00409AE6↓o
.text:004095D6 ; ---------------------------------------------------------------------------
.text:004095D6
.text:004095D6 loc_4095D6:                             ; DATA XREF: .text:loc_409B51↓o
.text:004095D6                 and     [ebx+45h], dl
.text:004095D9                 add     [eax], ah
.text:004095DB                 push    ebx
.text:004095DC                 push    eax
.text:004095DD                 xor     [eax], eax
.text:004095DF
.text:004095DF loc_4095DF:                             ; DATA XREF: .text:loc_409BCB↓o
.text:004095DF                 and     [edi+53h], cl
.text:004095E2                 push    edx
.text:004095E3                 xor     al, [eax]
.text:004095E5                 lea     esi, [esi+0]
.text:004095E9                 lea     edi, [edi+0]
.text:004095F0                 push    edi
.text:004095F1                 push    esi
.text:004095F2                 push    ebx
.text:004095F3                 sub     esp, 130h
.text:004095F9                 mov     ebx, [esp+140h]
.text:00409600                 call    sub_409D00
.text:00409605                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040960A                 cmp     eax, 1
.text:0040960D                 jz      loc_409AB0
.text:00409613                 cmp     eax, 1
.text:00409616                 jb      loc_409A86
.text:0040961C                 cmp     eax, 2
.text:0040961F                 jz      loc_4096D0
.text:00409625                 cmp     eax, 3
.text:00409628                 jz      short loc_40968F
.text:0040962A                 lea     esi, [esi+0]
.text:00409630
.text:00409630 loc_409630:                             ; CODE XREF: .text:004096C5↓j
.text:00409630                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409636                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040963C
.text:0040963C loc_40963C:                             ; CODE XREF: .text:00409ACF↓j
.text:0040963C                 mov     [esp+10h], edx
.text:00409640                 mov     ebx, [esp+144h]
.text:00409647                 mov     [esp+0Ch], ecx
.text:0040964B                 mov     [esp+8], eax
.text:0040964F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00409657                 mov     [esp], ebx
.text:0040965A                 call    sprintf
.text:0040965F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00409667                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040966D                 mov     ecx, [esp+148h]
.text:00409674                 mov     [esp+8], edi
.text:00409678                 mov     [esp], ecx
.text:0040967B                 call    sprintf
.text:00409680                 mov     eax, 1
.text:00409685
.text:00409685 loc_409685:                             ; CODE XREF: .text:0040987F↓j
.text:00409685                                         ; .text:004098CC↓j
.text:00409685                 add     esp, 130h
.text:0040968B                 pop     ebx
.text:0040968C                 pop     esi
.text:0040968D                 pop     edi
.text:0040968E                 retn
.text:0040968F ; ---------------------------------------------------------------------------
.text:0040968F
.text:0040968F loc_40968F:                             ; CODE XREF: .text:00409628↑j
.text:0040968F                 mov     dword ptr [ebx], 7263694Dh
.text:00409695                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040969C                 mov     dword ptr [ebx+8], 69572074h
.text:004096A3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004096AA                 mov     dword ptr [ebx+10h], 45432073h
.text:004096B1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:004096B7                 mov     esi, esi
.text:004096B9                 lea     edi, [edi+0]
.text:004096C0
.text:004096C0 loc_4096C0:                             ; CODE XREF: .text:00409768↓j
.text:004096C0                                         ; .text:00409AA9↓j ...
.text:004096C0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004096C5                 jmp     loc_409630
.text:004096C5 ; ---------------------------------------------------------------------------
.text:004096CA                 align 10h
.text:004096D0
.text:004096D0 loc_4096D0:                             ; CODE XREF: .text:0040961F↑j
.text:004096D0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:004096D6                 cmp     edx, 3
.text:004096D9                 mov     eax, edx
.text:004096DB                 jz      loc_409A45
.text:004096E1
.text:004096E1 loc_4096E1:                             ; CODE XREF: .text:00409A4C↓j
.text:004096E1                 cmp     eax, 4
.text:004096E4                 jz      loc_409A05
.text:004096EA
.text:004096EA loc_4096EA:                             ; CODE XREF: .text:00409A0D↓j
.text:004096EA                 cmp     eax, 4
.text:004096ED                 ja      loc_409952
.text:004096F3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004096F9                 test    ecx, ecx
.text:004096FB                 jnz     loc_409952
.text:00409701                 mov     dword ptr [ebx], 7263694Dh
.text:00409707                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040970E                 mov     dword ptr [ebx+8], 69572074h
.text:00409715                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040971C                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409723
.text:00409723 loc_409723:                             ; CODE XREF: .text:004099C5↓j
.text:00409723                 mov     byte ptr [ebx+14h], 0
.text:00409727
.text:00409727 loc_409727:                             ; CODE XREF: .text:00409955↓j
.text:00409727                                         ; .text:0040996C↓j ...
.text:00409727                 mov     esi, dword_40E080
.text:0040972D                 test    esi, esi
.text:0040972F                 jz      loc_409842
.text:00409735                 movzx   eax, ds:byte_40F47A
.text:0040973C                 cmp     al, 1
.text:0040973E                 jz      loc_409822
.text:00409744                 cmp     al, 3
.text:00409746                 jz      short loc_40976D
.text:00409748
.text:00409748 loc_409748:                             ; CODE XREF: .text:0040978B↓j
.text:00409748                                         ; .text:004097C6↓j ...
.text:00409748                 mov     dword ptr [esp+4], offset asc_409440 ; " "
.text:00409750                 mov     [esp], ebx
.text:00409753                 call    strcat
.text:00409758                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00409760                 mov     [esp], ebx
.text:00409763                 call    strcat
.text:00409768                 jmp     loc_4096C0
.text:0040976D ; ---------------------------------------------------------------------------
.text:0040976D
.text:0040976D loc_40976D:                             ; CODE XREF: .text:00409746↑j
.text:0040976D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00409774                 jz      short loc_409796
.text:00409776
.text:00409776 loc_409776:                             ; CODE XREF: .text:004097A2↓j
.text:00409776                 test    byte ptr ds:word_40F478, 2
.text:0040977D                 jz      short loc_40978D
.text:0040977F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00409786
.text:00409786 loc_409786:                             ; CODE XREF: .text:00409794↓j
.text:00409786                 call    printf
.text:0040978B                 jmp     short loc_409748
.text:0040978D ; ---------------------------------------------------------------------------
.text:0040978D
.text:0040978D loc_40978D:                             ; CODE XREF: .text:0040977D↑j
.text:0040978D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:00409794                 jmp     short loc_409786
.text:00409796 ; ---------------------------------------------------------------------------
.text:00409796
.text:00409796 loc_409796:                             ; CODE XREF: .text:00409774↑j
.text:00409796                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040979B                 cmp     eax, 2
.text:0040979E                 jz      short loc_4097E0
.text:004097A0                 test    eax, eax
.text:004097A2                 jnz     short loc_409776
.text:004097A4                 cmp     byte ptr ds:word_40F478, 0
.text:004097AB                 js      short loc_4097D2
.text:004097AD                 test    byte ptr ds:word_40F478, 2
.text:004097B4                 jnz     short loc_4097C8
.text:004097B6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:004097BE
.text:004097BE loc_4097BE:                             ; CODE XREF: .text:004097D0↓j
.text:004097BE                                         ; .text:004097DA↓j ...
.text:004097BE                 mov     [esp], ebx
.text:004097C1                 call    strcat
.text:004097C6                 jmp     short loc_409748
.text:004097C8 ; ---------------------------------------------------------------------------
.text:004097C8
.text:004097C8 loc_4097C8:                             ; CODE XREF: .text:004097B4↑j
.text:004097C8                                         ; .text:00409929↓j
.text:004097C8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:004097D0                 jmp     short loc_4097BE
.text:004097D2 ; ---------------------------------------------------------------------------
.text:004097D2
.text:004097D2 loc_4097D2:                             ; CODE XREF: .text:004097AB↑j
.text:004097D2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:004097DA                 jmp     short loc_4097BE
.text:004097DA ; ---------------------------------------------------------------------------
.text:004097DC                 align 10h
.text:004097E0
.text:004097E0 loc_4097E0:                             ; CODE XREF: .text:0040979E↑j
.text:004097E0                 cmp     byte ptr ds:word_40F478, 0
.text:004097E7                 js      short loc_409818
.text:004097E9                 movzx   eax, ds:word_40F478
.text:004097F0                 test    al, 2
.text:004097F2                 jnz     short loc_40980E
.text:004097F4                 cmp     ax, 400h
.text:004097F8                 jz      short loc_409804
.text:004097FA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:00409802                 jmp     short loc_4097BE
.text:00409804 ; ---------------------------------------------------------------------------
.text:00409804
.text:00409804 loc_409804:                             ; CODE XREF: .text:004097F8↑j
.text:00409804                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040980C                 jmp     short loc_4097BE
.text:0040980E ; ---------------------------------------------------------------------------
.text:0040980E
.text:0040980E loc_40980E:                             ; CODE XREF: .text:004097F2↑j
.text:0040980E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00409816                 jmp     short loc_4097BE
.text:00409818 ; ---------------------------------------------------------------------------
.text:00409818
.text:00409818 loc_409818:                             ; CODE XREF: .text:004097E7↑j
.text:00409818                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00409820                 jmp     short loc_4097BE
.text:00409822 ; ---------------------------------------------------------------------------
.text:00409822
.text:00409822 loc_409822:                             ; CODE XREF: .text:0040973E↑j
.text:00409822                 test    byte ptr ds:word_40F478+1, 2
.text:00409829                 jz      short loc_409835
.text:0040982B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00409833                 jmp     short loc_4097BE
.text:00409835 ; ---------------------------------------------------------------------------
.text:00409835
.text:00409835 loc_409835:                             ; CODE XREF: .text:00409829↑j
.text:00409835                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040983D                 jmp     loc_4097BE
.text:00409842 ; ---------------------------------------------------------------------------
.text:00409842
.text:00409842 loc_409842:                             ; CODE XREF: .text:0040972F↑j
.text:00409842                 mov     dword ptr [esp+28h], 0FFh
.text:0040984A                 lea     edx, [esp+2Ch]
.text:0040984E                 mov     [esp+10h], edx
.text:00409852                 mov     dword ptr [esp+0Ch], 1
.text:0040985A                 mov     dword ptr [esp+8], 0
.text:00409862                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040986A                 mov     dword ptr [esp], 80000002h
.text:00409871                 call    RegOpenKeyExA
.text:00409876                 mov     edi, eax
.text:00409878                 sub     esp, 14h
.text:0040987B                 xor     eax, eax
.text:0040987D                 test    edi, edi
.text:0040987F                 jnz     loc_409685
.text:00409885                 mov     dword ptr [esp+0Ch], 0
.text:0040988D                 mov     edi, [esp+2Ch]
.text:00409891                 lea     esi, [esp+28h]
.text:00409895                 mov     [esp+14h], esi
.text:00409899                 lea     esi, [esp+30h]
.text:0040989D                 mov     [esp+10h], esi
.text:004098A1                 mov     dword ptr [esp+8], 0
.text:004098A9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:004098B1                 mov     [esp], edi
.text:004098B4                 call    RegQueryValueExA
.text:004098B9                 sub     esp, 18h
.text:004098BC                 test    eax, eax
.text:004098BE                 jnz     short loc_4098CA
.text:004098C0                 cmp     dword ptr [esp+28h], 0FFh
.text:004098C8                 jbe     short loc_4098D1
.text:004098CA
.text:004098CA loc_4098CA:                             ; CODE XREF: .text:004098BE↑j
.text:004098CA                 xor     eax, eax
.text:004098CC                 jmp     loc_409685
.text:004098D1 ; ---------------------------------------------------------------------------
.text:004098D1
.text:004098D1 loc_4098D1:                             ; CODE XREF: .text:004098C8↑j
.text:004098D1                 mov     edx, [esp+2Ch]
.text:004098D5                 mov     [esp], edx
.text:004098D8                 call    RegCloseKey
.text:004098DD                 sub     esp, 4
.text:004098E0                 mov     [esp+4], esi
.text:004098E4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:004098EB                 call    lstrcmpiA
.text:004098F0                 sub     esp, 8
.text:004098F3                 test    eax, eax
.text:004098F5                 jz      short loc_409940
.text:004098F7
.text:004098F7 loc_4098F7:                             ; CODE XREF: .text:00409950↓j
.text:004098F7                 mov     [esp+4], esi
.text:004098FB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:00409902                 call    lstrcmpiA
.text:00409907                 sub     esp, 8
.text:0040990A                 test    eax, eax
.text:0040990C                 jz      short loc_40992E
.text:0040990E
.text:0040990E loc_40990E:                             ; CODE XREF: .text:0040993E↓j
.text:0040990E                 mov     [esp+4], esi
.text:00409912                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00409919                 call    lstrcmpiA
.text:0040991E                 sub     esp, 8
.text:00409921                 test    eax, eax
.text:00409923                 jnz     loc_409748
.text:00409929                 jmp     loc_4097C8
.text:0040992E ; ---------------------------------------------------------------------------
.text:0040992E
.text:0040992E loc_40992E:                             ; CODE XREF: .text:0040990C↑j
.text:0040992E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00409936                 mov     [esp], ebx
.text:00409939                 call    strcat
.text:0040993E                 jmp     short loc_40990E
.text:00409940 ; ---------------------------------------------------------------------------
.text:00409940
.text:00409940 loc_409940:                             ; CODE XREF: .text:004098F5↑j
.text:00409940                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00409948                 mov     [esp], ebx
.text:0040994B                 call    strcat
.text:00409950                 jmp     short loc_4098F7
.text:00409952 ; ---------------------------------------------------------------------------
.text:00409952
.text:00409952 loc_409952:                             ; CODE XREF: .text:004096ED↑j
.text:00409952                                         ; .text:004096FB↑j
.text:00409952                 cmp     eax, 5
.text:00409955                 jnz     loc_409727
.text:0040995B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409960                 cmp     eax, 2
.text:00409963                 jz      short loc_4099CA
.text:00409965                 cmp     eax, 1
.text:00409968                 jz      short loc_4099A3
.text:0040996A                 test    eax, eax
.text:0040996C                 jnz     loc_409727
.text:00409972                 mov     dword ptr [ebx], 7263694Dh
.text:00409978                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040997F                 mov     dword ptr [ebx+8], 69572074h
.text:00409986                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040998D                 mov     dword ptr [ebx+10h], 30322073h
.text:00409994                 mov     word ptr [ebx+14h], 3030h
.text:0040999A                 mov     byte ptr [ebx+16h], 0
.text:0040999E                 jmp     loc_409727
.text:004099A3 ; ---------------------------------------------------------------------------
.text:004099A3
.text:004099A3 loc_4099A3:                             ; CODE XREF: .text:00409968↑j
.text:004099A3                 mov     dword ptr [ebx], 7263694Dh
.text:004099A9                 mov     dword ptr [ebx+4], 666F736Fh
.text:004099B0                 mov     dword ptr [ebx+8], 69572074h
.text:004099B7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004099BE                 mov     dword ptr [ebx+10h], 50582073h
.text:004099C5                 jmp     loc_409723
.text:004099CA ; ---------------------------------------------------------------------------
.text:004099CA
.text:004099CA loc_4099CA:                             ; CODE XREF: .text:00409963↑j
.text:004099CA                 mov     dword ptr [ebx], 7263694Dh
.text:004099D0                 mov     dword ptr [ebx+4], 666F736Fh
.text:004099D7                 mov     dword ptr [ebx+8], 69572074h
.text:004099DE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004099E5                 mov     dword ptr [ebx+10h], 65532073h
.text:004099EC                 mov     dword ptr [ebx+14h], 72657672h
.text:004099F3                 mov     dword ptr [ebx+18h], 30303220h
.text:004099FA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00409A00                 jmp     loc_409727
.text:00409A05 ; ---------------------------------------------------------------------------
.text:00409A05
.text:00409A05 loc_409A05:                             ; CODE XREF: .text:004096E4↑j
.text:00409A05                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409A0B                 test    edx, edx
.text:00409A0D                 jnz     loc_4096EA
.text:00409A13                 mov     dword ptr [ebx], 7263694Dh
.text:00409A19                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409A20                 mov     dword ptr [ebx+8], 69572074h
.text:00409A27                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409A2E                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409A35                 mov     dword ptr [ebx+14h], 302E3420h
.text:00409A3C                 mov     byte ptr [ebx+18h], 0
.text:00409A40                 jmp     loc_409727
.text:00409A45 ; ---------------------------------------------------------------------------
.text:00409A45
.text:00409A45 loc_409A45:                             ; CODE XREF: .text:004096DB↑j
.text:00409A45                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:00409A4C                 jnz     loc_4096E1
.text:00409A52                 mov     dword ptr [ebx], 7263694Dh
.text:00409A58                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409A5F                 mov     dword ptr [ebx+8], 69572074h
.text:00409A66                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409A6D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409A74                 mov     dword ptr [ebx+14h], 352E3320h
.text:00409A7B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00409A81                 jmp     loc_409727
.text:00409A86 ; ---------------------------------------------------------------------------
.text:00409A86
.text:00409A86 loc_409A86:                             ; CODE XREF: .text:00409616↑j
.text:00409A86                 cld
.text:00409A87                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:00409A8C                 mov     ecx, 8
.text:00409A91                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00409A98                 mov     edi, ebx
.text:00409A9A                 rep movsd
.text:00409A9C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00409AA3                 mov     [edi+2], dl
.text:00409AA6                 mov     [edi], si
.text:00409AA9                 jmp     loc_4096C0
.text:00409AA9 ; ---------------------------------------------------------------------------
.text:00409AAE                 align 10h
.text:00409AB0
.text:00409AB0 loc_409AB0:                             ; CODE XREF: .text:0040960D↑j
.text:00409AB0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409AB6                 cmp     ecx, 4
.text:00409AB9                 jz      loc_409B70
.text:00409ABF
.text:00409ABF loc_409ABF:                             ; CODE XREF: .text:00409BC6↓j
.text:00409ABF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409AC5
.text:00409AC5 loc_409AC5:                             ; CODE XREF: .text:00409B78↓j
.text:00409AC5                 cmp     ecx, 4
.text:00409AC8                 jz      short loc_409AD4
.text:00409ACA
.text:00409ACA loc_409ACA:                             ; CODE XREF: .text:00409ADC↓j
.text:00409ACA                                         ; .text:00409AE1↓j
.text:00409ACA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409ACF                 jmp     loc_40963C
.text:00409AD4 ; ---------------------------------------------------------------------------
.text:00409AD4
.text:00409AD4 loc_409AD4:                             ; CODE XREF: .text:00409AC8↑j
.text:00409AD4                 cmp     edx, 0Ah
.text:00409AD7                 jz      short loc_409B01
.text:00409AD9
.text:00409AD9 loc_409AD9:                             ; CODE XREF: .text:00409B4F↓j
.text:00409AD9                 cmp     ecx, 4
.text:00409ADC                 jnz     short loc_409ACA
.text:00409ADE                 cmp     edx, 5Ah ; 'Z'
.text:00409AE1                 jnz     short loc_409ACA
.text:00409AE3                 cld
.text:00409AE4                 mov     edi, ebx
.text:00409AE6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:00409AEB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00409AF2                 mov     ecx, 9
.text:00409AF7                 rep movsd
.text:00409AF9                 mov     [edi], bx
.text:00409AFC                 jmp     loc_4096C0
.text:00409B01 ; ---------------------------------------------------------------------------
.text:00409B01
.text:00409B01 loc_409B01:                             ; CODE XREF: .text:00409AD7↑j
.text:00409B01                 mov     dword ptr [ebx], 7263694Dh
.text:00409B07                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409B0E                 mov     dword ptr [ebx+8], 69572074h
.text:00409B15                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409B1C                 mov     dword ptr [ebx+10h], 38392073h
.text:00409B23                 mov     byte ptr [ebx+14h], 0
.text:00409B27                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00409B2D                 lea     edi, [edx-7CFh]
.text:00409B33                 cmp     edi, 0B7h ; '·'
.text:00409B39                 jbe     short loc_409B63
.text:00409B3B                 cmp     edx, 886h
.text:00409B41                 ja      short loc_409B51
.text:00409B43
.text:00409B43 loc_409B43:                             ; CODE XREF: .text:00409B61↓j
.text:00409B43                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409B49                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409B4F                 jmp     short loc_409AD9
.text:00409B51 ; ---------------------------------------------------------------------------
.text:00409B51
.text:00409B51 loc_409B51:                             ; CODE XREF: .text:00409B41↑j
.text:00409B51                 mov     dword ptr [esp+4], offset loc_4095D6
.text:00409B59
.text:00409B59 loc_409B59:                             ; CODE XREF: .text:00409B6B↓j
.text:00409B59                 mov     [esp], ebx
.text:00409B5C                 call    strcat
.text:00409B61                 jmp     short loc_409B43
.text:00409B63 ; ---------------------------------------------------------------------------
.text:00409B63
.text:00409B63 loc_409B63:                             ; CODE XREF: .text:00409B39↑j
.text:00409B63                 mov     dword ptr [esp+4], 4095DAh
.text:00409B6B                 jmp     short loc_409B59
.text:00409B6B ; ---------------------------------------------------------------------------
.text:00409B6D                 align 10h
.text:00409B70
.text:00409B70 loc_409B70:                             ; CODE XREF: .text:00409AB9↑j
.text:00409B70                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409B76                 test    edx, edx
.text:00409B78                 jnz     loc_409AC5
.text:00409B7E                 mov     dword ptr [ebx], 7263694Dh
.text:00409B84                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409B8B                 mov     dword ptr [ebx+8], 69572074h
.text:00409B92                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409B99                 mov     dword ptr [ebx+10h], 35392073h
.text:00409BA0                 mov     byte ptr [ebx+14h], 0
.text:00409BA4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00409BAA                 lea     ecx, [edx-3B7h]
.text:00409BB0                 cmp     ecx, 81h
.text:00409BB6                 jbe     short loc_409BDD
.text:00409BB8                 cmp     edx, 438h
.text:00409BBE                 ja      short loc_409BCB
.text:00409BC0
.text:00409BC0 loc_409BC0:                             ; CODE XREF: .text:00409BDB↓j
.text:00409BC0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409BC6                 jmp     loc_409ABF
.text:00409BCB ; ---------------------------------------------------------------------------
.text:00409BCB
.text:00409BCB loc_409BCB:                             ; CODE XREF: .text:00409BBE↑j
.text:00409BCB                 mov     dword ptr [esp+4], offset loc_4095DF
.text:00409BD3
.text:00409BD3 loc_409BD3:                             ; CODE XREF: .text:00409BE5↓j
.text:00409BD3                 mov     [esp], ebx
.text:00409BD6                 call    strcat
.text:00409BDB                 jmp     short loc_409BC0
.text:00409BDD ; ---------------------------------------------------------------------------
.text:00409BDD
.text:00409BDD loc_409BDD:                             ; CODE XREF: .text:00409BB6↑j
.text:00409BDD                 mov     dword ptr [esp+4], 4095DAh
.text:00409BE5                 jmp     short loc_409BD3
.text:00409BE5 ; ---------------------------------------------------------------------------
.text:00409BE7                 align 10h
.text:00409BF0
.text:00409BF0 ; =============== S U B R O U T I N E =======================================
.text:00409BF0
.text:00409BF0
.text:00409BF0 sub_409BF0      proc near               ; CODE XREF: .text:004076AE↑p
.text:00409BF0                                         ; sub_407B30+12A↑p
.text:00409BF0                 sub     esp, 0Ch
.text:00409BF3                 call    sub_409D00
.text:00409BF8                 mov     eax, ds:dword_40F3D0
.text:00409BFD                 add     esp, 0Ch
.text:00409C00                 retn
.text:00409C00 sub_409BF0      endp
.text:00409C00
.text:00409C01 ; ---------------------------------------------------------------------------
.text:00409C01                 jmp     short loc_409C10
.text:00409C01 ; ---------------------------------------------------------------------------
.text:00409C03                 align 10h
.text:00409C10
.text:00409C10 loc_409C10:                             ; CODE XREF: .text:00409C01↑j
.text:00409C10                 sub     esp, 0Ch
.text:00409C13                 call    sub_409D00
.text:00409C18                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409C1D                 add     esp, 0Ch
.text:00409C20                 retn
.text:00409C21 ; ---------------------------------------------------------------------------
.text:00409C21                 jmp     short loc_409C30
.text:00409C21 ; ---------------------------------------------------------------------------
.text:00409C23                 align 10h
.text:00409C30
.text:00409C30 loc_409C30:                             ; CODE XREF: .text:00409C21↑j
.text:00409C30                 sub     esp, 0Ch
.text:00409C33                 call    sub_409D00
.text:00409C38                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00409C3D                 add     esp, 0Ch
.text:00409C40                 retn
.text:00409C41 ; ---------------------------------------------------------------------------
.text:00409C41                 jmp     short loc_409C50
.text:00409C41 ; ---------------------------------------------------------------------------
.text:00409C43                 align 10h
.text:00409C50
.text:00409C50 loc_409C50:                             ; CODE XREF: .text:00409C41↑j
.text:00409C50                 sub     esp, 0Ch
.text:00409C53                 call    sub_409D00
.text:00409C58                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409C5D                 add     esp, 0Ch
.text:00409C60                 retn
.text:00409C61 ; ---------------------------------------------------------------------------
.text:00409C61                 jmp     short loc_409C70
.text:00409C61 ; ---------------------------------------------------------------------------
.text:00409C63                 align 10h
.text:00409C70
.text:00409C70 loc_409C70:                             ; CODE XREF: .text:00409C61↑j
.text:00409C70                 sub     esp, 0Ch
.text:00409C73                 call    GetVersion
.text:00409C78                 shr     eax, 10h
.text:00409C7B                 add     esp, 0Ch
.text:00409C7E                 retn
.text:00409C7E ; ---------------------------------------------------------------------------
.text:00409C7F                 align 10h
.text:00409C80                 sub     esp, 0Ch
.text:00409C83                 call    sub_409D00
.text:00409C88                 xor     eax, eax
.text:00409C8A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:00409C91                 setz    al
.text:00409C94                 add     esp, 0Ch
.text:00409C97                 retn
.text:00409C97 ; ---------------------------------------------------------------------------
.text:00409C98                 align 10h
.text:00409CA0
.text:00409CA0 ; =============== S U B R O U T I N E =======================================
.text:00409CA0
.text:00409CA0
.text:00409CA0 sub_409CA0      proc near               ; CODE XREF: .text:loc_407694↑p
.text:00409CA0                                         ; .text:004076A5↑p ...
.text:00409CA0                 sub     esp, 0Ch
.text:00409CA3                 call    sub_409D00
.text:00409CA8                 xor     eax, eax
.text:00409CAA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00409CB1                 setz    al
.text:00409CB4                 add     esp, 0Ch
.text:00409CB7                 retn
.text:00409CB7 sub_409CA0      endp
.text:00409CB7
.text:00409CB7 ; ---------------------------------------------------------------------------
.text:00409CB8                 align 10h
.text:00409CC0                 sub     esp, 0Ch
.text:00409CC3                 call    sub_409D00
.text:00409CC8                 xor     eax, eax
.text:00409CCA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:00409CD1                 setz    al
.text:00409CD4                 add     esp, 0Ch
.text:00409CD7                 retn
.text:00409CD7 ; ---------------------------------------------------------------------------
.text:00409CD8                 align 10h
.text:00409CE0                 sub     esp, 0Ch
.text:00409CE3                 call    sub_409D00
.text:00409CE8                 xor     eax, eax
.text:00409CEA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00409CF1                 setz    al
.text:00409CF4                 add     esp, 0Ch
.text:00409CF7                 retn
.text:00409CF7 ; ---------------------------------------------------------------------------
.text:00409CF8                 align 10h
.text:00409D00
.text:00409D00 ; =============== S U B R O U T I N E =======================================
.text:00409D00
.text:00409D00
.text:00409D00 sub_409D00      proc near               ; CODE XREF: .text:00409600↑p
.text:00409D00                                         ; sub_409BF0+3↑p ...
.text:00409D00
.text:00409D00 lpVersionInformation= dword ptr -0BCh
.text:00409D00 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00409D00
.text:00409D00                 sub     esp, 0BCh
.text:00409D06                 mov     edx, ds:dword_40F480
.text:00409D0C                 test    edx, edx
.text:00409D0E                 jz      short loc_409D20
.text:00409D10
.text:00409D10 loc_409D10:                             ; CODE XREF: sub_409D00+7B↓j
.text:00409D10                 mov     edx, 1
.text:00409D15
.text:00409D15 loc_409D15:                             ; CODE XREF: sub_409D00+217↓j
.text:00409D15                 mov     eax, edx
.text:00409D17                 add     esp, 0BCh
.text:00409D1D                 retn
.text:00409D1D ; ---------------------------------------------------------------------------
.text:00409D1E                 align 10h
.text:00409D20
.text:00409D20 loc_409D20:                             ; CODE XREF: sub_409D00+E↑j
.text:00409D20                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00409D27                 mov     edx, 9Ch ; 'œ'
.text:00409D2C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00409D32                 call    GetVersionExA
.text:00409D37                 sub     esp, 4
.text:00409D3A                 test    eax, eax
.text:00409D3C                 jz      loc_409EF4
.text:00409D42
.text:00409D42 loc_409D42:                             ; CODE XREF: sub_409D00+245↓j
.text:00409D42                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00409D49                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409D4E                 cmp     eax, 1
.text:00409D51                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00409D57                 jz      loc_409E40
.text:00409D5D                 cmp     eax, 1
.text:00409D60                 jb      loc_409E30
.text:00409D66                 cmp     eax, 2
.text:00409D69                 jz      short loc_409D8A
.text:00409D6B                 cmp     eax, 3
.text:00409D6E                 jz      short loc_409D7D
.text:00409D70
.text:00409D70 loc_409D70:                             ; CODE XREF: sub_409D00+88↓j
.text:00409D70                                         ; sub_409D00+C0↓j ...
.text:00409D70                 mov     edx, 1
.text:00409D75                 mov     ds:dword_40F480, edx
.text:00409D7B                 jmp     short loc_409D10
.text:00409D7D ; ---------------------------------------------------------------------------
.text:00409D7D
.text:00409D7D loc_409D7D:                             ; CODE XREF: sub_409D00+6E↑j
.text:00409D7D                 mov     ecx, 17h
.text:00409D82
.text:00409D82 loc_409D82:                             ; CODE XREF: sub_409D00+1A7↓j
.text:00409D82                 mov     ds:dword_40F3D0, ecx
.text:00409D88                 jmp     short loc_409D70
.text:00409D8A ; ---------------------------------------------------------------------------
.text:00409D8A
.text:00409D8A loc_409D8A:                             ; CODE XREF: sub_409D00+69↑j
.text:00409D8A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00409D8F                 cmp     eax, 3
.text:00409D92                 jz      short loc_409E0B
.text:00409D94                 cmp     eax, 4
.text:00409D97                 jz      short loc_409DFA
.text:00409D99
.text:00409D99 loc_409D99:                             ; CODE XREF: sub_409D00+102↓j
.text:00409D99                 cmp     eax, 4
.text:00409D9C                 ja      short loc_409DC2
.text:00409D9E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00409DA4                 test    ecx, ecx
.text:00409DA6                 jnz     short loc_409DC2
.text:00409DA8                 mov     edx, 1Eh
.text:00409DAD
.text:00409DAD loc_409DAD:                             ; CODE XREF: sub_409D00+DF↓j
.text:00409DAD                 mov     ds:dword_40F3D0, edx
.text:00409DB3
.text:00409DB3 loc_409DB3:                             ; CODE XREF: sub_409D00+C5↓j
.text:00409DB3                                         ; sub_409D00+D8↓j ...
.text:00409DB3                 movzx   ecx, ds:word_40F474
.text:00409DBA                 add     ds:dword_40F3D0, ecx
.text:00409DC0                 jmp     short loc_409D70
.text:00409DC2 ; ---------------------------------------------------------------------------
.text:00409DC2
.text:00409DC2 loc_409DC2:                             ; CODE XREF: sub_409D00+9C↑j
.text:00409DC2                                         ; sub_409D00+A6↑j
.text:00409DC2                 cmp     eax, 5
.text:00409DC5                 jnz     short loc_409DB3
.text:00409DC7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409DCC                 cmp     eax, 2
.text:00409DCF                 jz      short loc_409DEE
.text:00409DD1                 cmp     eax, 1
.text:00409DD4                 jz      short loc_409DE1
.text:00409DD6                 test    eax, eax
.text:00409DD8                 jnz     short loc_409DB3
.text:00409DDA                 mov     edx, 32h ; '2'
.text:00409DDF                 jmp     short loc_409DAD
.text:00409DE1 ; ---------------------------------------------------------------------------
.text:00409DE1
.text:00409DE1 loc_409DE1:                             ; CODE XREF: sub_409D00+D4↑j
.text:00409DE1                 mov     ecx, 3Ch ; '<'
.text:00409DE6
.text:00409DE6 loc_409DE6:                             ; CODE XREF: sub_409D00+122↓j
.text:00409DE6                 mov     ds:dword_40F3D0, ecx
.text:00409DEC                 jmp     short loc_409DB3
.text:00409DEE ; ---------------------------------------------------------------------------
.text:00409DEE
.text:00409DEE loc_409DEE:                             ; CODE XREF: sub_409D00+CF↑j
.text:00409DEE                 mov     eax, 46h ; 'F'
.text:00409DF3
.text:00409DF3 loc_409DF3:                             ; CODE XREF: sub_409D00+109↓j
.text:00409DF3                                         ; sub_409D00+129↓j
.text:00409DF3                 mov     ds:dword_40F3D0, eax
.text:00409DF8                 jmp     short loc_409DB3
.text:00409DFA ; ---------------------------------------------------------------------------
.text:00409DFA
.text:00409DFA loc_409DFA:                             ; CODE XREF: sub_409D00+97↑j
.text:00409DFA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00409E00                 test    ecx, ecx
.text:00409E02                 jnz     short loc_409D99
.text:00409E04                 mov     eax, 28h ; '('
.text:00409E09                 jmp     short loc_409DF3
.text:00409E0B ; ---------------------------------------------------------------------------
.text:00409E0B
.text:00409E0B loc_409E0B:                             ; CODE XREF: sub_409D00+92↑j
.text:00409E0B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409E10                 cmp     eax, 33h ; '3'
.text:00409E13                 jz      short loc_409E24
.text:00409E15                 cmp     eax, 5
.text:00409E18                 setz    cl
.text:00409E1B                 movzx   edx, cl
.text:00409E1E                 lea     ecx, [edx+edx*4+1Eh]
.text:00409E22                 jmp     short loc_409DE6
.text:00409E24 ; ---------------------------------------------------------------------------
.text:00409E24
.text:00409E24 loc_409E24:                             ; CODE XREF: sub_409D00+113↑j
.text:00409E24                 mov     eax, 24h ; '$'
.text:00409E29                 jmp     short loc_409DF3
.text:00409E29 ; ---------------------------------------------------------------------------
.text:00409E2B                 align 10h
.text:00409E30
.text:00409E30 loc_409E30:                             ; CODE XREF: sub_409D00+60↑j
.text:00409E30                 mov     edx, 2
.text:00409E35                 mov     ds:dword_40F3D0, edx
.text:00409E3B                 jmp     loc_409D70
.text:00409E40 ; ---------------------------------------------------------------------------
.text:00409E40
.text:00409E40 loc_409E40:                             ; CODE XREF: sub_409D00+57↑j
.text:00409E40                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409E46                 cmp     ecx, 4
.text:00409E49                 jnz     loc_409D70
.text:00409E4F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409E54                 test    eax, eax
.text:00409E56                 jnz     short loc_409E7A
.text:00409E58                 mov     eax, 0Ah
.text:00409E5D                 mov     ds:dword_40F3D0, eax
.text:00409E62                 lea     eax, [edx-3B7h]
.text:00409E68                 cmp     eax, 81h
.text:00409E6D                 ja      short loc_409EE5
.text:00409E6F                 mov     edx, 0Bh
.text:00409E74
.text:00409E74 loc_409E74:                             ; CODE XREF: sub_409D00+1F2↓j
.text:00409E74                 mov     ds:dword_40F3D0, edx
.text:00409E7A
.text:00409E7A loc_409E7A:                             ; CODE XREF: sub_409D00+156↑j
.text:00409E7A                                         ; sub_409D00+1EB↓j
.text:00409E7A                 cmp     ecx, 4
.text:00409E7D                 jnz     loc_409D70
.text:00409E83                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:00409E8A                 jz      short loc_409EAC
.text:00409E8C
.text:00409E8C loc_409E8C:                             ; CODE XREF: sub_409D00+1D4↓j
.text:00409E8C                                         ; sub_409D00+1DC↓j
.text:00409E8C                 cmp     ecx, 4
.text:00409E8F                 jnz     loc_409D70
.text:00409E95                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:00409E9C                 jnz     loc_409D70
.text:00409EA2                 mov     ecx, 12h
.text:00409EA7                 jmp     loc_409D82
.text:00409EAC ; ---------------------------------------------------------------------------
.text:00409EAC
.text:00409EAC loc_409EAC:                             ; CODE XREF: sub_409D00+18A↑j
.text:00409EAC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00409EB2                 mov     eax, 0Eh
.text:00409EB7                 mov     ds:dword_40F3D0, eax
.text:00409EBC                 lea     eax, [edx-7CFh]
.text:00409EC2                 cmp     eax, 0B7h ; '·'
.text:00409EC7                 ja      short loc_409ED6
.text:00409EC9                 mov     edx, 0Fh
.text:00409ECE
.text:00409ECE loc_409ECE:                             ; CODE XREF: sub_409D00+1E3↓j
.text:00409ECE                 mov     ds:dword_40F3D0, edx
.text:00409ED4                 jmp     short loc_409E8C
.text:00409ED6 ; ---------------------------------------------------------------------------
.text:00409ED6
.text:00409ED6 loc_409ED6:                             ; CODE XREF: sub_409D00+1C7↑j
.text:00409ED6                 cmp     edx, 886h
.text:00409EDC                 jbe     short loc_409E8C
.text:00409EDE                 mov     edx, 10h
.text:00409EE3                 jmp     short loc_409ECE
.text:00409EE5 ; ---------------------------------------------------------------------------
.text:00409EE5
.text:00409EE5 loc_409EE5:                             ; CODE XREF: sub_409D00+16D↑j
.text:00409EE5                 cmp     edx, 438h
.text:00409EEB                 jbe     short loc_409E7A
.text:00409EED                 mov     edx, 0Ch
.text:00409EF2                 jmp     short loc_409E74
.text:00409EF4 ; ---------------------------------------------------------------------------
.text:00409EF4
.text:00409EF4 loc_409EF4:                             ; CODE XREF: sub_409D00+3C↑j
.text:00409EF4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:00409EFC                 xor     edx, edx
.text:00409EFE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00409F02                 mov     dword_40E080, edx
.text:00409F08                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:00409F0B                 call    GetVersionExA
.text:00409F10                 sub     esp, 4
.text:00409F13                 xor     edx, edx
.text:00409F15                 test    eax, eax
.text:00409F17                 jz      loc_409D15
.text:00409F1D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00409F21                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00409F25                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:00409F2B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:00409F2F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00409F35                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00409F39                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00409F3F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00409F45                 jmp     loc_409D42
.text:00409F45 sub_409D00      endp
.text:00409F45
.text:00409F45 ; ---------------------------------------------------------------------------
.text:00409F4A                 align 10h
.text:00409F50
.text:00409F50 ; =============== S U B R O U T I N E =======================================
.text:00409F50
.text:00409F50 ; Attributes: noreturn
.text:00409F50
.text:00409F50 sub_409F50      proc near               ; CODE XREF: .text:00408B39↑p
.text:00409F50                                         ; sub_409F50↓j
.text:00409F50                 jmp     short sub_409F50
.text:00409F50 sub_409F50      endp
.text:00409F50
.text:00409F50 ; ---------------------------------------------------------------------------
.text:00409F52                 align 10h
.text:00409F60
.text:00409F60 ; =============== S U B R O U T I N E =======================================
.text:00409F60
.text:00409F60
.text:00409F60 sub_409F60      proc near               ; CODE XREF: .text:00408895↑p
.text:00409F60
.text:00409F60 FileHandle      = dword ptr -1Ch
.text:00409F60 dwFileOffsetLow = dword ptr -18h
.text:00409F60 dwFileOffsetHigh= dword ptr -14h
.text:00409F60 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:00409F60 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:00409F60 var_8           = dword ptr -8
.text:00409F60 var_4           = dword ptr -4
.text:00409F60 arg_0           = dword ptr  4
.text:00409F60
.text:00409F60                 sub     esp, 1Ch
.text:00409F63                 mov     edx, [esp+1Ch+arg_0]
.text:00409F67                 mov     [esp+1Ch+var_4], esi
.text:00409F6B                 mov     [esp+1Ch+var_8], ebx
.text:00409F6F                 mov     ebx, [edx+10h]
.text:00409F72                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:00409F75                 call    _get_osfhandle
.text:00409F7A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:00409F7D                 mov     esi, eax
.text:00409F7F                 call    _filelengthi64
.text:00409F84                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:00409F88                 cdq
.text:00409F89                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:00409F8C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:00409F90                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:00409F98                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:00409FA0                 call    UnlockFile
.text:00409FA5                 sub     esp, 14h
.text:00409FA8                 mov     ebx, [esp+1Ch+var_8]
.text:00409FAC                 mov     esi, [esp+1Ch+var_4]
.text:00409FB0                 add     esp, 1Ch
.text:00409FB3                 retn
.text:00409FB3 sub_409F60      endp
.text:00409FB3
.text:00409FB3 ; ---------------------------------------------------------------------------
.text:00409FB4                 align 10h
.text:00409FC0
.text:00409FC0 ; =============== S U B R O U T I N E =======================================
.text:00409FC0
.text:00409FC0
.text:00409FC0 ; int __cdecl sub_409FC0(int, char *Control)
.text:00409FC0 sub_409FC0      proc near               ; CODE XREF: .text:00408756↑p
.text:00409FC0                                         ; .text:004087A6↑p ...
.text:00409FC0
.text:00409FC0 Str             = dword ptr -1Ch
.text:00409FC0 Val             = dword ptr -18h
.text:00409FC0 var_8           = dword ptr -8
.text:00409FC0 var_4           = dword ptr -4
.text:00409FC0 arg_0           = dword ptr  4
.text:00409FC0 Control         = dword ptr  8
.text:00409FC0
.text:00409FC0                 sub     esp, 1Ch
.text:00409FC3                 xor     eax, eax
.text:00409FC5                 mov     edx, [esp+1Ch+Control]
.text:00409FC9                 mov     [esp+1Ch+var_4], esi
.text:00409FCD                 mov     esi, [esp+1Ch+arg_0]
.text:00409FD1                 mov     [esp+1Ch+var_8], ebx
.text:00409FD5                 mov     ebx, [esi]
.text:00409FD7                 test    ebx, ebx
.text:00409FD9                 jz      short loc_40A008
.text:00409FDB                 movzx   eax, byte ptr [edx]
.text:00409FDE                 test    al, al
.text:00409FE0                 jz      short loc_40A000
.text:00409FE2                 cmp     byte ptr [edx+1], 0
.text:00409FE6                 jnz     short loc_40A040
.text:00409FE8                 movzx   ecx, byte ptr [ebx]
.text:00409FEB                 mov     edx, ebx
.text:00409FED                 cmp     cl, al
.text:00409FEF                 jz      short loc_40A032
.text:00409FF1                 test    cl, cl
.text:00409FF3                 jnz     short loc_40A014
.text:00409FF5                 lea     esi, [esi+0]
.text:00409FF9                 lea     edi, [edi+0]
.text:0040A000
.text:0040A000 loc_40A000:                             ; CODE XREF: sub_409FC0+20↑j
.text:0040A000                                         ; sub_409FC0+74↓j
.text:0040A000                 mov     dword ptr [esi], 0
.text:0040A006
.text:0040A006 loc_40A006:                             ; CODE XREF: sub_409FC0+7C↓j
.text:0040A006                 mov     eax, ebx
.text:0040A008
.text:0040A008 loc_40A008:                             ; CODE XREF: sub_409FC0+19↑j
.text:0040A008                 mov     ebx, [esp+1Ch+var_8]
.text:0040A00C                 mov     esi, [esp+1Ch+var_4]
.text:0040A010                 add     esp, 1Ch
.text:0040A013                 retn
.text:0040A014 ; ---------------------------------------------------------------------------
.text:0040A014
.text:0040A014 loc_40A014:                             ; CODE XREF: sub_409FC0+33↑j
.text:0040A014                 movsx   edx, al
.text:0040A017                 mov     [esp+1Ch+Val], edx ; Val
.text:0040A01B                 lea     edx, [ebx+1]
.text:0040A01E                 mov     [esp+1Ch+Str], edx ; Str
.text:0040A021                 call    strchr
.text:0040A026                 lea     esi, [esi+0]
.text:0040A029                 lea     edi, [edi+0]
.text:0040A030
.text:0040A030 loc_40A030:                             ; CODE XREF: sub_409FC0+8C↓j
.text:0040A030                 mov     edx, eax
.text:0040A032
.text:0040A032 loc_40A032:                             ; CODE XREF: sub_409FC0+2F↑j
.text:0040A032                 test    edx, edx
.text:0040A034                 jz      short loc_40A000
.text:0040A036                 mov     byte ptr [edx], 0
.text:0040A039                 inc     edx
.text:0040A03A                 mov     [esi], edx
.text:0040A03C                 jmp     short loc_40A006
.text:0040A03C ; ---------------------------------------------------------------------------
.text:0040A03E                 align 10h
.text:0040A040
.text:0040A040 loc_40A040:                             ; CODE XREF: sub_409FC0+26↑j
.text:0040A040                 mov     [esp+1Ch+Val], edx ; Control
.text:0040A044                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040A047                 call    strpbrk
.text:0040A04C                 jmp     short loc_40A030
.text:0040A04C sub_409FC0      endp
.text:0040A04C
.text:0040A04C ; ---------------------------------------------------------------------------
.text:0040A04E                 align 10h
.text:0040A050 ; const char aTmpf[]
.text:0040A050 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40A060+20↓o
.text:0040A055 ; const char aWBd[]
.text:0040A055 aWBd            db 'w+bD',0             ; DATA XREF: sub_40A060+5E↓o
.text:0040A05A                 align 10h
.text:0040A060
.text:0040A060 ; =============== S U B R O U T I N E =======================================
.text:0040A060
.text:0040A060
.text:0040A060 sub_40A060      proc near               ; CODE XREF: sub_4091CF+A4↑p
.text:0040A060
.text:0040A060 FileHandle      = dword ptr -13Ch
.text:0040A060 Format          = dword ptr -138h
.text:0040A060 var_134         = dword ptr -134h
.text:0040A060 var_130         = dword ptr -130h
.text:0040A060 var_12C         = dword ptr -12Ch
.text:0040A060 FileName        = byte ptr -11Ch
.text:0040A060 var_8           = dword ptr -8
.text:0040A060 var_4           = dword ptr -4
.text:0040A060
.text:0040A060                 sub     esp, 13Ch
.text:0040A066                 mov     [esp+13Ch+var_8], ebx
.text:0040A06D                 lea     ebx, [esp+13Ch+FileName]
.text:0040A071                 mov     [esp+13Ch+var_4], esi
.text:0040A078                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040A080                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040A088                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040A090                 mov     [esp+13Ch+Format], 104h ; int
.text:0040A098                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040A09B                 call    sub_40A130
.text:0040A0A0                 xor     edx, edx
.text:0040A0A2                 test    eax, eax
.text:0040A0A4                 jnz     short loc_40A0D6
.text:0040A0A6                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040A0A9                 mov     [esp+13Ch+Format], 0 ; int
.text:0040A0B1                 call    sub_40A4B0
.text:0040A0B6                 xor     edx, edx
.text:0040A0B8                 mov     ebx, eax
.text:0040A0BA                 test    eax, eax
.text:0040A0BC                 js      short loc_40A0D6
.text:0040A0BE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040A0C6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040A0C9                 call    _fdopen
.text:0040A0CE                 test    eax, eax
.text:0040A0D0                 mov     esi, eax
.text:0040A0D2                 jz      short loc_40A0ED
.text:0040A0D4
.text:0040A0D4 loc_40A0D4:                             ; CODE XREF: sub_40A060+95↓j
.text:0040A0D4                 mov     edx, esi
.text:0040A0D6
.text:0040A0D6 loc_40A0D6:                             ; CODE XREF: sub_40A060+44↑j
.text:0040A0D6                                         ; sub_40A060+5C↑j
.text:0040A0D6                 mov     ebx, [esp+13Ch+var_8]
.text:0040A0DD                 mov     eax, edx
.text:0040A0DF                 mov     esi, [esp+13Ch+var_4]
.text:0040A0E6                 add     esp, 13Ch
.text:0040A0EC                 retn
.text:0040A0ED ; ---------------------------------------------------------------------------
.text:0040A0ED
.text:0040A0ED loc_40A0ED:                             ; CODE XREF: sub_40A060+72↑j
.text:0040A0ED                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040A0F0                 call    _close
.text:0040A0F5                 jmp     short loc_40A0D4
.text:0040A0F5 sub_40A060      endp
.text:0040A0F5
.text:0040A0F5 ; ---------------------------------------------------------------------------
.text:0040A0F7                 align 10h
.text:0040A100 aFile           db 'file',0             ; DATA XREF: sub_40A130:loc_40A15C↓o
.text:0040A105 ; const char aSSxxxxxx[]
.text:0040A105 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40A130+9B↓o
.text:0040A115 ; const char aTemp[]
.text:0040A115 aTemp           db 'TEMP',0             ; DATA XREF: sub_40A130:loc_40A212↓o
.text:0040A115                                         ; sub_40A130:loc_40A252↓o ...
.text:0040A11A ; const char aTmp[]
.text:0040A11A aTmp            db '/tmp',0             ; DATA XREF: sub_40A130+12F↓o
.text:0040A11A                                         ; sub_40A130+141↓o ...
.text:0040A11F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40A130:loc_40A2D0↓o
.text:0040A126 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40A130:loc_40A360↓o
.text:0040A12A                 align 10h
.text:0040A130
.text:0040A130 ; =============== S U B R O U T I N E =======================================
.text:0040A130
.text:0040A130
.text:0040A130 ; int __cdecl sub_40A130(char *Buffer, int, char *, char *, int)
.text:0040A130 sub_40A130      proc near               ; CODE XREF: sub_40A060+3B↑p
.text:0040A130
.text:0040A130 Str             = dword ptr -1BCh
.text:0040A130 Format          = dword ptr -1B8h
.text:0040A130 var_1B4         = dword ptr -1B4h
.text:0040A130 var_1B0         = dword ptr -1B0h
.text:0040A130 var_1AC         = dword ptr -1ACh
.text:0040A130 var_1A8         = dword ptr -1A8h
.text:0040A130 var_19C         = dword ptr -19Ch
.text:0040A130 var_13C         = dword ptr -13Ch
.text:0040A130 var_DC          = dword ptr -0DCh
.text:0040A130 var_7C          = dword ptr -7Ch
.text:0040A130 Buffer          = dword ptr  4
.text:0040A130 arg_4           = dword ptr  8
.text:0040A130 arg_8           = dword ptr  0Ch
.text:0040A130 arg_C           = dword ptr  10h
.text:0040A130 arg_10          = dword ptr  14h
.text:0040A130
.text:0040A130                 push    ebp
.text:0040A131                 push    edi
.text:0040A132                 push    esi
.text:0040A133                 push    ebx
.text:0040A134                 sub     esp, 1ACh
.text:0040A13A                 mov     eax, [esp+1BCh+arg_C]
.text:0040A141                 mov     esi, [esp+1BCh+arg_8]
.text:0040A148                 test    eax, eax
.text:0040A14A                 jz      short loc_40A15C
.text:0040A14C                 mov     edx, [esp+1BCh+arg_C]
.text:0040A153                 cmp     byte ptr [edx], 0
.text:0040A156                 jnz     loc_40A390
.text:0040A15C
.text:0040A15C loc_40A15C:                             ; CODE XREF: sub_40A130+1A↑j
.text:0040A15C                 mov     eax, offset aFile ; "file"
.text:0040A161                 mov     ebp, 4
.text:0040A166                 mov     [esp+1BCh+arg_C], eax
.text:0040A16D
.text:0040A16D loc_40A16D:                             ; CODE XREF: sub_40A130+274↓j
.text:0040A16D                                         ; sub_40A130+27F↓j
.text:0040A16D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040A174                 test    ebx, ebx
.text:0040A176                 jnz     loc_40A2D0
.text:0040A17C
.text:0040A17C loc_40A17C:                             ; CODE XREF: sub_40A130+21C↓j
.text:0040A17C                                         ; sub_40A130+224↓j ...
.text:0040A17C                 test    esi, esi
.text:0040A17E                 jz      loc_40A212
.text:0040A184
.text:0040A184 loc_40A184:                             ; CODE XREF: sub_40A130+176↓j
.text:0040A184                                         ; sub_40A130+19A↓j
.text:0040A184                 mov     [esp+1BCh+Str], esi ; Str
.text:0040A187                 call    strlen
.text:0040A18C                 test    eax, eax
.text:0040A18E                 mov     edx, eax
.text:0040A190                 jz      short loc_40A1A0
.text:0040A192                 movzx   eax, byte ptr [eax+esi-1]
.text:0040A197                 cmp     al, 2Fh ; '/'
.text:0040A199                 jz      short loc_40A200
.text:0040A19B                 cmp     al, 5Ch ; '\'
.text:0040A19D                 jz      short loc_40A200
.text:0040A19F                 nop
.text:0040A1A0
.text:0040A1A0 loc_40A1A0:                             ; CODE XREF: sub_40A130+60↑j
.text:0040A1A0                                         ; sub_40A130+D1↓j ...
.text:0040A1A0                 lea     edi, [ebp+edx+8]
.text:0040A1A4                 cmp     [esp+1BCh+arg_4], edi
.text:0040A1AB                 jb      short loc_40A1E8
.text:0040A1AD                 mov     [esp+1BCh+var_1AC], ebp
.text:0040A1B1                 mov     ecx, [esp+1BCh+arg_C]
.text:0040A1B8                 mov     ebp, [esp+1BCh+Buffer]
.text:0040A1BF                 mov     [esp+1BCh+var_1B0], esi
.text:0040A1C3                 mov     [esp+1BCh+var_1A8], ecx
.text:0040A1C7                 mov     [esp+1BCh+var_1B4], edx
.text:0040A1CB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040A1D3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040A1D6                 call    sprintf
.text:0040A1DB                 xor     eax, eax
.text:0040A1DD
.text:0040A1DD loc_40A1DD:                             ; CODE XREF: sub_40A130+C8↓j
.text:0040A1DD                 add     esp, 1ACh
.text:0040A1E3                 pop     ebx
.text:0040A1E4                 pop     esi
.text:0040A1E5                 pop     edi
.text:0040A1E6                 pop     ebp
.text:0040A1E7                 retn
.text:0040A1E8 ; ---------------------------------------------------------------------------
.text:0040A1E8
.text:0040A1E8 loc_40A1E8:                             ; CODE XREF: sub_40A130+7B↑j
.text:0040A1E8                 call    _errno
.text:0040A1ED                 mov     dword ptr [eax], 16h
.text:0040A1F3
.text:0040A1F3 loc_40A1F3:                             ; CODE XREF: sub_40A130+187↓j
.text:0040A1F3                 mov     eax, 0FFFFFFFFh
.text:0040A1F8                 jmp     short loc_40A1DD
.text:0040A1F8 ; ---------------------------------------------------------------------------
.text:0040A1FA                 align 10h
.text:0040A200
.text:0040A200 loc_40A200:                             ; CODE XREF: sub_40A130+69↑j
.text:0040A200                                         ; sub_40A130+6D↑j ...
.text:0040A200                 dec     edx
.text:0040A201                 jz      short loc_40A1A0
.text:0040A203                 movzx   eax, byte ptr [edx+esi-1]
.text:0040A208                 cmp     al, 2Fh ; '/'
.text:0040A20A                 jz      short loc_40A200
.text:0040A20C                 cmp     al, 5Ch ; '\'
.text:0040A20E                 jz      short loc_40A200
.text:0040A210                 jmp     short loc_40A1A0
.text:0040A212 ; ---------------------------------------------------------------------------
.text:0040A212
.text:0040A212 loc_40A212:                             ; CODE XREF: sub_40A130+4E↑j
.text:0040A212                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040A219                 lea     esi, [esp+1BCh+var_13C]
.text:0040A220                 call    getenv
.text:0040A225                 mov     [esp+1BCh+Format], eax ; char *
.text:0040A229                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040A22D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040A234                 call    sub_40A9E0
.text:0040A239                 test    eax, eax
.text:0040A23B                 jnz     short loc_40A252
.text:0040A23D                 mov     edi, [esp+1BCh+var_13C]
.text:0040A244                 and     edi, 0F000h
.text:0040A24A                 cmp     edi, 4000h
.text:0040A250                 jz      short loc_40A2BC
.text:0040A252
.text:0040A252 loc_40A252:                             ; CODE XREF: sub_40A130+10B↑j
.text:0040A252                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040A259                 call    getenv
.text:0040A25E                 cld
.text:0040A25F                 mov     edx, offset aTmp ; "/tmp"
.text:0040A264                 mov     esi, eax
.text:0040A266                 mov     ecx, 5
.text:0040A26B                 mov     edi, edx
.text:0040A26D                 repe cmpsb
.text:0040A26F                 jz      short loc_40A2AC
.text:0040A271                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040A279                 lea     ecx, [esp+1BCh+var_19C]
.text:0040A27D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040A281                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040A288                 call    sub_40A9E0
.text:0040A28D                 test    eax, eax
.text:0040A28F                 jnz     short loc_40A2AC
.text:0040A291                 mov     ebx, [esp+1BCh+var_19C]
.text:0040A295                 mov     esi, offset aTmp ; "/tmp"
.text:0040A29A                 and     ebx, 0F000h
.text:0040A2A0                 cmp     ebx, 4000h
.text:0040A2A6                 jz      loc_40A184
.text:0040A2AC
.text:0040A2AC loc_40A2AC:                             ; CODE XREF: sub_40A130+13F↑j
.text:0040A2AC                                         ; sub_40A130+15F↑j
.text:0040A2AC                 call    _errno
.text:0040A2B1                 mov     dword ptr [eax], 2
.text:0040A2B7                 jmp     loc_40A1F3
.text:0040A2BC ; ---------------------------------------------------------------------------
.text:0040A2BC
.text:0040A2BC loc_40A2BC:                             ; CODE XREF: sub_40A130+120↑j
.text:0040A2BC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040A2C3                 call    getenv
.text:0040A2C8                 mov     esi, eax
.text:0040A2CA                 jmp     loc_40A184
.text:0040A2CA ; ---------------------------------------------------------------------------
.text:0040A2CF                 align 10h
.text:0040A2D0
.text:0040A2D0 loc_40A2D0:                             ; CODE XREF: sub_40A130+46↑j
.text:0040A2D0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040A2D7                 call    sub_40A9C0
.text:0040A2DC                 test    eax, eax
.text:0040A2DE                 mov     ebx, eax
.text:0040A2E0                 jz      short loc_40A360
.text:0040A2E2
.text:0040A2E2 loc_40A2E2:                             ; CODE XREF: sub_40A130+240↓j
.text:0040A2E2                                         ; sub_40A130+256↓j
.text:0040A2E2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040A2E6                 lea     edi, [esp+1BCh+var_7C]
.text:0040A2ED                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040A2F1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040A2F8                 call    sub_40A9E0
.text:0040A2FD                 test    eax, eax
.text:0040A2FF                 jnz     short loc_40A316
.text:0040A301                 mov     edx, [esp+1BCh+var_7C]
.text:0040A308                 and     edx, 0F000h
.text:0040A30E                 cmp     edx, 4000h
.text:0040A314                 jz      short loc_40A359
.text:0040A316
.text:0040A316 loc_40A316:                             ; CODE XREF: sub_40A130+1CF↑j
.text:0040A316                                         ; sub_40A130+25C↓j
.text:0040A316                 test    esi, esi
.text:0040A318                 jz      short loc_40A352
.text:0040A31A                 mov     [esp+1BCh+Format], esi ; char *
.text:0040A31E                 lea     ecx, [esp+1BCh+var_DC]
.text:0040A325                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040A329                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040A330                 call    sub_40A9E0
.text:0040A335                 test    eax, eax
.text:0040A337                 jnz     short loc_40A352
.text:0040A339                 mov     ebx, [esp+1BCh+var_DC]
.text:0040A340                 and     ebx, 0F000h
.text:0040A346                 cmp     ebx, 4000h
.text:0040A34C                 jz      loc_40A17C
.text:0040A352
.text:0040A352 loc_40A352:                             ; CODE XREF: sub_40A130+1E8↑j
.text:0040A352                                         ; sub_40A130+207↑j
.text:0040A352                 xor     esi, esi
.text:0040A354                 jmp     loc_40A17C
.text:0040A359 ; ---------------------------------------------------------------------------
.text:0040A359
.text:0040A359 loc_40A359:                             ; CODE XREF: sub_40A130+1E4↑j
.text:0040A359                 mov     esi, ebx
.text:0040A35B                 jmp     loc_40A17C
.text:0040A360 ; ---------------------------------------------------------------------------
.text:0040A360
.text:0040A360 loc_40A360:                             ; CODE XREF: sub_40A130+1B0↑j
.text:0040A360                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040A367                 call    sub_40A9C0
.text:0040A36C                 test    eax, eax
.text:0040A36E                 mov     ebx, eax
.text:0040A370                 jnz     loc_40A2E2
.text:0040A376                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040A37D                 call    sub_40A9C0
.text:0040A382                 test    eax, eax
.text:0040A384                 mov     ebx, eax
.text:0040A386                 jnz     loc_40A2E2
.text:0040A38C                 jmp     short loc_40A316
.text:0040A38C ; ---------------------------------------------------------------------------
.text:0040A38E                 align 10h
.text:0040A390
.text:0040A390 loc_40A390:                             ; CODE XREF: sub_40A130+26↑j
.text:0040A390                 mov     ecx, [esp+1BCh+arg_C]
.text:0040A397                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040A39A                 call    strlen
.text:0040A39F                 cmp     eax, 5
.text:0040A3A2                 mov     ebp, eax
.text:0040A3A4                 jbe     loc_40A16D
.text:0040A3AA                 mov     ebp, 5
.text:0040A3AF                 jmp     loc_40A16D
.text:0040A3AF sub_40A130      endp
.text:0040A3AF
.text:0040A3AF ; ---------------------------------------------------------------------------
.text:0040A3B4                 align 10h
.text:0040A3C0 byte_40A3C0     db 61h                  ; DATA XREF: sub_40A4B0+DC↓r
.text:0040A3C0                                         ; sub_40A4B0+122↓r ...
.text:0040A3C1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040A3FF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40A4B0+39↓o
.text:0040A406                 align 20h
.text:0040A420 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040A420                                         ; DATA XREF: sub_40A4B0:loc_40A728↓o
.text:0040A43F                 align 10h
.text:0040A440 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040A440                                         ; DATA XREF: sub_40A4B0+405↓o
.text:0040A46B                 align 20h
.text:0040A480 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040A480                                         ; DATA XREF: sub_40A4B0+40D↓o
.text:0040A4A3                 align 10h
.text:0040A4B0
.text:0040A4B0 ; =============== S U B R O U T I N E =======================================
.text:0040A4B0
.text:0040A4B0
.text:0040A4B0 ; int __cdecl sub_40A4B0(char *FileName, int)
.text:0040A4B0 sub_40A4B0      proc near               ; CODE XREF: sub_40A060+51↑p
.text:0040A4B0
.text:0040A4B0 Str             = dword ptr -9Ch
.text:0040A4B0 OpenFlag        = dword ptr -98h
.text:0040A4B0 var_94          = dword ptr -94h
.text:0040A4B0 var_90          = dword ptr -90h
.text:0040A4B0 var_8C          = dword ptr -8Ch
.text:0040A4B0 var_88          = dword ptr -88h
.text:0040A4B0 var_84          = dword ptr -84h
.text:0040A4B0 var_80          = dword ptr -80h
.text:0040A4B0 var_7C          = dword ptr -7Ch
.text:0040A4B0 FileName        = dword ptr  4
.text:0040A4B0 arg_4           = dword ptr  8
.text:0040A4B0
.text:0040A4B0                 push    ebp
.text:0040A4B1                 push    edi
.text:0040A4B2                 push    esi
.text:0040A4B3                 push    ebx
.text:0040A4B4                 sub     esp, 8Ch
.text:0040A4BA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040A4C2                 call    _errno
.text:0040A4C7                 mov     edx, [eax]
.text:0040A4C9                 mov     [esp+9Ch+var_8C], edx
.text:0040A4CD                 mov     edx, [esp+9Ch+FileName]
.text:0040A4D4                 mov     [esp+9Ch+Str], edx ; Str
.text:0040A4D7                 call    strlen
.text:0040A4DC                 cmp     eax, 5
.text:0040A4DF                 jle     short loc_40A4FD
.text:0040A4E1                 cld
.text:0040A4E2                 mov     ecx, [esp+9Ch+FileName]
.text:0040A4E9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040A4EE                 lea     esi, [eax+ecx-6]
.text:0040A4F2                 mov     ecx, 7
.text:0040A4F7                 mov     ebp, esi
.text:0040A4F9                 repe cmpsb
.text:0040A4FB                 jz      short loc_40A518
.text:0040A4FD
.text:0040A4FD loc_40A4FD:                             ; CODE XREF: sub_40A4B0+2F↑j
.text:0040A4FD                 call    _errno
.text:0040A502                 mov     dword ptr [eax], 16h
.text:0040A508
.text:0040A508 loc_40A508:                             ; CODE XREF: sub_40A4B0+295↓j
.text:0040A508                                         ; sub_40A4B0+2D8↓j ...
.text:0040A508                 mov     eax, 0FFFFFFFFh
.text:0040A50D
.text:0040A50D loc_40A50D:                             ; CODE XREF: sub_40A4B0+2EF↓j
.text:0040A50D                                         ; sub_40A4B0+332↓j
.text:0040A50D                 add     esp, 8Ch
.text:0040A513                 pop     ebx
.text:0040A514                 pop     esi
.text:0040A515                 pop     edi
.text:0040A516                 pop     ebp
.text:0040A517                 retn
.text:0040A518 ; ---------------------------------------------------------------------------
.text:0040A518
.text:0040A518 loc_40A518:                             ; CODE XREF: sub_40A4B0+4B↑j
.text:0040A518                 mov     ecx, ds:dword_40F494
.text:0040A51E                 mov     edi, ds:dword_40F490
.text:0040A524                 mov     eax, ecx
.text:0040A526                 or      eax, edi
.text:0040A528                 jz      loc_40A863
.text:0040A52E
.text:0040A52E loc_40A52E:                             ; CODE XREF: sub_40A4B0+3F8↓j
.text:0040A52E                 rdtsc
.text:0040A530                 mov     edi, edx
.text:0040A532                 mov     esi, eax
.text:0040A534                 call    _getpid
.text:0040A539                 mov     ebx, eax
.text:0040A53B                 mov     edx, esi
.text:0040A53D                 sar     ebx, 1Fh
.text:0040A540                 xor     edx, eax
.text:0040A542                 mov     ecx, edi
.text:0040A544                 xor     ecx, ebx
.text:0040A546                 mov     ebx, edx
.text:0040A548                 mov     esi, ecx
.text:0040A54A                 add     ebx, ds:dword_40F490
.text:0040A550                 adc     esi, ds:dword_40F494
.text:0040A556                 xor     edi, edi
.text:0040A558                 mov     ds:dword_40F490, ebx
.text:0040A55E                 mov     ds:dword_40F494, esi
.text:0040A564                 lea     esi, [esi+0]
.text:0040A56A                 lea     edi, [edi+0]
.text:0040A570
.text:0040A570 loc_40A570:                             ; CODE XREF: sub_40A4B0+2C7↓j
.text:0040A570                 mov     [esp+9Ch+Str], ebx
.text:0040A573                 mov     [esp+9Ch+OpenFlag], esi
.text:0040A577                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040A57F                 mov     [esp+9Ch+var_90], 0
.text:0040A587                 call    sub_40C5D0
.text:0040A58C                 movzx   ecx, ds:byte_40A3C0[eax]
.text:0040A593                 mov     [ebp+0], cl
.text:0040A596                 mov     [esp+9Ch+Str], ebx
.text:0040A599                 mov     [esp+9Ch+OpenFlag], esi
.text:0040A59D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040A5A5                 mov     [esp+9Ch+var_90], 0
.text:0040A5AD                 call    sub_40C4B0
.text:0040A5B2                 mov     [esp+9Ch+Str], eax
.text:0040A5B5                 mov     ebx, eax
.text:0040A5B7                 mov     esi, edx
.text:0040A5B9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040A5C1                 mov     [esp+9Ch+var_90], 0
.text:0040A5C9                 mov     [esp+9Ch+OpenFlag], edx
.text:0040A5CD                 call    sub_40C5D0
.text:0040A5D2                 movzx   edx, ds:byte_40A3C0[eax]
.text:0040A5D9                 mov     [ebp+1], dl
.text:0040A5DC                 mov     [esp+9Ch+Str], ebx
.text:0040A5DF                 mov     [esp+9Ch+OpenFlag], esi
.text:0040A5E3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040A5EB                 mov     [esp+9Ch+var_90], 0
.text:0040A5F3                 call    sub_40C4B0
.text:0040A5F8                 mov     [esp+9Ch+Str], eax
.text:0040A5FB                 mov     ebx, eax
.text:0040A5FD                 mov     esi, edx
.text:0040A5FF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040A607                 mov     [esp+9Ch+var_90], 0
.text:0040A60F                 mov     [esp+9Ch+OpenFlag], edx
.text:0040A613                 call    sub_40C5D0
.text:0040A618                 movzx   ecx, ds:byte_40A3C0[eax]
.text:0040A61F                 mov     [ebp+2], cl
.text:0040A622                 mov     [esp+9Ch+Str], ebx
.text:0040A625                 mov     [esp+9Ch+OpenFlag], esi
.text:0040A629                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040A631                 mov     [esp+9Ch+var_90], 0
.text:0040A639                 call    sub_40C4B0
.text:0040A63E                 mov     [esp+9Ch+Str], eax
.text:0040A641                 mov     ebx, eax
.text:0040A643                 mov     esi, edx
.text:0040A645                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040A64D                 mov     [esp+9Ch+var_90], 0
.text:0040A655                 mov     [esp+9Ch+OpenFlag], edx
.text:0040A659                 call    sub_40C5D0
.text:0040A65E                 movzx   edx, ds:byte_40A3C0[eax]
.text:0040A665                 mov     [ebp+3], dl
.text:0040A668                 mov     [esp+9Ch+Str], ebx
.text:0040A66B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040A66F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040A677                 mov     [esp+9Ch+var_90], 0
.text:0040A67F                 call    sub_40C4B0
.text:0040A684                 mov     [esp+9Ch+Str], eax
.text:0040A687                 mov     ebx, eax
.text:0040A689                 mov     esi, edx
.text:0040A68B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040A693                 mov     [esp+9Ch+var_90], 0
.text:0040A69B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040A69F                 call    sub_40C5D0
.text:0040A6A4                 movzx   ecx, ds:byte_40A3C0[eax]
.text:0040A6AB                 mov     [ebp+4], cl
.text:0040A6AE                 mov     [esp+9Ch+Str], ebx
.text:0040A6B1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040A6B9                 mov     [esp+9Ch+var_90], 0
.text:0040A6C1                 mov     [esp+9Ch+OpenFlag], esi
.text:0040A6C5                 call    sub_40C4B0
.text:0040A6CA                 mov     [esp+9Ch+Str], eax
.text:0040A6CD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040A6D5                 mov     [esp+9Ch+var_90], 0
.text:0040A6DD                 mov     [esp+9Ch+OpenFlag], edx
.text:0040A6E1                 call    sub_40C5D0
.text:0040A6E6                 movzx   ebx, ds:byte_40A3C0[eax]
.text:0040A6ED                 mov     [ebp+5], bl
.text:0040A6F0                 cmp     [esp+9Ch+arg_4], 1
.text:0040A6F8                 jz      loc_40A847
.text:0040A6FE                 cmp     [esp+9Ch+arg_4], 1
.text:0040A706                 jle     loc_40A810
.text:0040A70C                 cmp     [esp+9Ch+arg_4], 2
.text:0040A714                 jz      loc_40A7E7
.text:0040A71A                 cmp     [esp+9Ch+arg_4], 3
.text:0040A722                 jz      loc_40A7A4
.text:0040A728
.text:0040A728 loc_40A728:                             ; CODE XREF: sub_40A4B0+369↓j
.text:0040A728                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040A72D                 test    ebx, ebx
.text:0040A72F                 jnz     loc_40A8AD
.text:0040A735
.text:0040A735 loc_40A735:                             ; CODE XREF: sub_40A4B0+354↓j
.text:0040A735                 mov     eax, [esp+9Ch+var_88]
.text:0040A739                 test    eax, eax
.text:0040A73B                 jns     short loc_40A790
.text:0040A73D                 call    _errno
.text:0040A742                 cmp     dword ptr [eax], 11h
.text:0040A745                 jnz     loc_40A508
.text:0040A74B
.text:0040A74B loc_40A74B:                             ; CODE XREF: sub_40A4B0+315↓j
.text:0040A74B                 mov     edx, ds:dword_40F490
.text:0040A751                 mov     ecx, ds:dword_40F494
.text:0040A757                 add     edx, 1E61h
.text:0040A75D                 adc     ecx, 0
.text:0040A760                 mov     ebx, edx
.text:0040A762                 inc     edi
.text:0040A763                 mov     ds:dword_40F490, edx
.text:0040A769                 cmp     edi, 3A2F8h
.text:0040A76F                 mov     esi, ecx
.text:0040A771                 mov     ds:dword_40F494, ecx
.text:0040A777                 jb      loc_40A570
.text:0040A77D                 call    _errno
.text:0040A782                 mov     dword ptr [eax], 11h
.text:0040A788                 jmp     loc_40A508
.text:0040A788 ; ---------------------------------------------------------------------------
.text:0040A78D                 align 10h
.text:0040A790
.text:0040A790 loc_40A790:                             ; CODE XREF: sub_40A4B0+28B↑j
.text:0040A790                 call    _errno
.text:0040A795                 mov     esi, [esp+9Ch+var_8C]
.text:0040A799                 mov     [eax], esi
.text:0040A79B                 mov     eax, [esp+9Ch+var_88]
.text:0040A79F                 jmp     loc_40A50D
.text:0040A7A4 ; ---------------------------------------------------------------------------
.text:0040A7A4
.text:0040A7A4 loc_40A7A4:                             ; CODE XREF: sub_40A4B0+272↑j
.text:0040A7A4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040A7AB                 mov     ecx, [esp+9Ch+FileName]
.text:0040A7B2                 lea     esi, [esp+9Ch+var_7C]
.text:0040A7B6                 mov     [esp+9Ch+var_94], esi ; int
.text:0040A7BA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040A7BE                 call    sub_405000
.text:0040A7C3                 test    eax, eax
.text:0040A7C5                 jns     short loc_40A74B
.text:0040A7C7                 call    _errno
.text:0040A7CC                 cmp     dword ptr [eax], 2
.text:0040A7CF                 jnz     loc_40A508
.text:0040A7D5                 call    _errno
.text:0040A7DA                 mov     ebx, [esp+9Ch+var_8C]
.text:0040A7DE                 mov     [eax], ebx
.text:0040A7E0                 xor     eax, eax
.text:0040A7E2                 jmp     loc_40A50D
.text:0040A7E7 ; ---------------------------------------------------------------------------
.text:0040A7E7
.text:0040A7E7 loc_40A7E7:                             ; CODE XREF: sub_40A4B0+264↑j
.text:0040A7E7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040A7EF                 mov     edx, [esp+9Ch+FileName]
.text:0040A7F6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040A7F9                 call    sub_40A8E0
.text:0040A7FE                 mov     esi, esi
.text:0040A800
.text:0040A800 loc_40A800:                             ; CODE XREF: sub_40A4B0+395↓j
.text:0040A800                 mov     [esp+9Ch+var_88], eax
.text:0040A804                 jmp     loc_40A735
.text:0040A804 ; ---------------------------------------------------------------------------
.text:0040A809                 align 10h
.text:0040A810
.text:0040A810 loc_40A810:                             ; CODE XREF: sub_40A4B0+256↑j
.text:0040A810                 mov     eax, [esp+9Ch+arg_4]
.text:0040A817                 test    eax, eax
.text:0040A819                 jnz     loc_40A728
.text:0040A81F                 mov     [esp+9Ch+var_94], 180h
.text:0040A827                 mov     esi, [esp+9Ch+FileName]
.text:0040A82E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040A836                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040A839                 lea     esi, [esi+0]
.text:0040A840
.text:0040A840 loc_40A840:                             ; CODE XREF: sub_40A4B0+3B1↓j
.text:0040A840                 call    _open
.text:0040A845                 jmp     short loc_40A800
.text:0040A847 ; ---------------------------------------------------------------------------
.text:0040A847
.text:0040A847 loc_40A847:                             ; CODE XREF: sub_40A4B0+248↑j
.text:0040A847                 mov     [esp+9Ch+var_94], 180h
.text:0040A84F                 mov     ebx, [esp+9Ch+FileName]
.text:0040A856                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040A85E                 mov     [esp+9Ch+Str], ebx
.text:0040A861                 jmp     short loc_40A840
.text:0040A863 ; ---------------------------------------------------------------------------
.text:0040A863
.text:0040A863 loc_40A863:                             ; CODE XREF: sub_40A4B0+78↑j
.text:0040A863                 mov     [esp+9Ch+OpenFlag], 0
.text:0040A86B                 lea     ebx, [esp+9Ch+var_84]
.text:0040A86F                 mov     [esp+9Ch+Str], ebx
.text:0040A872                 call    sub_40A960
.text:0040A877                 mov     edi, [esp+9Ch+var_80]
.text:0040A87B                 mov     edx, [esp+9Ch+var_84]
.text:0040A87F                 mov     ecx, edi
.text:0040A881                 mov     ebx, edi
.text:0040A883                 shl     ecx, 10h
.text:0040A886                 sar     ebx, 1Fh
.text:0040A889                 shld    ebx, edi, 10h
.text:0040A88D                 mov     esi, edx
.text:0040A88F                 mov     edi, edx
.text:0040A891                 mov     edx, ecx
.text:0040A893                 sar     edi, 1Fh
.text:0040A896                 xor     edx, esi
.text:0040A898                 mov     ds:dword_40F490, edx
.text:0040A89E                 mov     esi, ebx
.text:0040A8A0                 xor     esi, edi
.text:0040A8A2                 mov     ds:dword_40F494, esi
.text:0040A8A8                 jmp     loc_40A52E
.text:0040A8AD ; ---------------------------------------------------------------------------
.text:0040A8AD
.text:0040A8AD loc_40A8AD:                             ; CODE XREF: sub_40A4B0+27F↑j
.text:0040A8AD                 mov     [esp+9Ch+var_94], 151h
.text:0040A8B5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040A8BD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040A8C4                 call    _assert
.text:0040A8C4 sub_40A4B0      endp
.text:0040A8C4
.text:0040A8C4 ; ---------------------------------------------------------------------------
.text:0040A8C9                 align 20h
.text:0040A8E0
.text:0040A8E0 ; =============== S U B R O U T I N E =======================================
.text:0040A8E0
.text:0040A8E0
.text:0040A8E0 ; int __cdecl sub_40A8E0(LPCSTR, int AccessMode)
.text:0040A8E0 sub_40A8E0      proc near               ; CODE XREF: sub_40A4B0+349↑p
.text:0040A8E0
.text:0040A8E0 lpPathName      = dword ptr -1Ch
.text:0040A8E0 lpSecurityAttributes= dword ptr -18h
.text:0040A8E0 var_8           = dword ptr -8
.text:0040A8E0 var_4           = dword ptr -4
.text:0040A8E0 arg_0           = dword ptr  4
.text:0040A8E0 AccessMode      = dword ptr  8
.text:0040A8E0
.text:0040A8E0                 sub     esp, 1Ch
.text:0040A8E3                 mov     [esp+1Ch+var_8], ebx
.text:0040A8E7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040A8EB                 mov     [esp+1Ch+var_4], esi
.text:0040A8EF                 mov     esi, [esp+1Ch+AccessMode]
.text:0040A8F3                 test    ebx, ebx
.text:0040A8F5                 jz      short loc_40A945
.text:0040A8F7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040A8FF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040A902                 call    CreateDirectoryA
.text:0040A907                 sub     esp, 8
.text:0040A90A                 test    eax, eax
.text:0040A90C                 jz      short loc_40A926
.text:0040A90E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040A912                 mov     esi, [esp+1Ch+var_4]
.text:0040A916                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040A91A                 mov     ebx, [esp+1Ch+var_8]
.text:0040A91E                 add     esp, 1Ch
.text:0040A921                 jmp     _chmod
.text:0040A926 ; ---------------------------------------------------------------------------
.text:0040A926
.text:0040A926 loc_40A926:                             ; CODE XREF: sub_40A8E0+2C↑j
.text:0040A926                 call    sub_406E90
.text:0040A92B                 mov     esi, eax
.text:0040A92D                 call    _errno
.text:0040A932                 mov     [eax], esi
.text:0040A934
.text:0040A934 loc_40A934:                             ; CODE XREF: sub_40A8E0+70↓j
.text:0040A934                 mov     ebx, [esp+1Ch+var_8]
.text:0040A938                 mov     eax, 0FFFFFFFFh
.text:0040A93D                 mov     esi, [esp+1Ch+var_4]
.text:0040A941                 add     esp, 1Ch
.text:0040A944                 retn
.text:0040A945 ; ---------------------------------------------------------------------------
.text:0040A945
.text:0040A945 loc_40A945:                             ; CODE XREF: sub_40A8E0+15↑j
.text:0040A945                 call    _errno
.text:0040A94A                 mov     dword ptr [eax], 16h
.text:0040A950                 jmp     short loc_40A934
.text:0040A950 sub_40A8E0      endp
.text:0040A950
.text:0040A950 ; ---------------------------------------------------------------------------
.text:0040A952                 align 10h
.text:0040A960
.text:0040A960 ; =============== S U B R O U T I N E =======================================
.text:0040A960
.text:0040A960
.text:0040A960 sub_40A960      proc near               ; CODE XREF: sub_40A4B0+3C2↑p
.text:0040A960
.text:0040A960 var_1C          = dword ptr -1Ch
.text:0040A960 var_18          = dword ptr -18h
.text:0040A960 var_C           = dword ptr -0Ch
.text:0040A960 var_8           = dword ptr -8
.text:0040A960 var_4           = dword ptr -4
.text:0040A960 arg_0           = dword ptr  4
.text:0040A960 arg_4           = dword ptr  8
.text:0040A960
.text:0040A960                 sub     esp, 1Ch
.text:0040A963                 mov     edx, [esp+1Ch+arg_4]
.text:0040A967                 mov     [esp+1Ch+var_4], ebx
.text:0040A96B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040A96F                 mov     [esp+1Ch+var_18], edx
.text:0040A973                 lea     edx, [esp+1Ch+var_C]
.text:0040A977                 mov     [esp+1Ch+var_1C], edx
.text:0040A97A                 call    sub_40AAA0
.text:0040A97F                 test    eax, eax
.text:0040A981                 mov     edx, 0FFFFFFFFh
.text:0040A986                 jnz     short loc_40A9AA
.text:0040A988                 mov     ecx, [esp+1Ch+var_C]
.text:0040A98C                 mov     edx, 10624DD3h
.text:0040A991                 mov     [ebx], ecx
.text:0040A993                 mov     ecx, [esp+1Ch+var_8]
.text:0040A997                 mov     eax, ecx
.text:0040A999                 imul    edx
.text:0040A99B                 mov     eax, ecx
.text:0040A99D                 sar     eax, 1Fh
.text:0040A9A0                 sar     edx, 6
.text:0040A9A3                 sub     edx, eax
.text:0040A9A5                 mov     [ebx+4], edx
.text:0040A9A8                 xor     edx, edx
.text:0040A9AA
.text:0040A9AA loc_40A9AA:                             ; CODE XREF: sub_40A960+26↑j
.text:0040A9AA                 mov     ebx, [esp+1Ch+var_4]
.text:0040A9AE                 mov     eax, edx
.text:0040A9B0                 add     esp, 1Ch
.text:0040A9B3                 retn
.text:0040A9B3 sub_40A960      endp
.text:0040A9B3
.text:0040A9B3 ; ---------------------------------------------------------------------------
.text:0040A9B4                 align 10h
.text:0040A9C0
.text:0040A9C0 ; =============== S U B R O U T I N E =======================================
.text:0040A9C0
.text:0040A9C0
.text:0040A9C0 sub_40A9C0      proc near               ; CODE XREF: sub_40A130+1A7↑p
.text:0040A9C0                                         ; sub_40A130+237↑p ...
.text:0040A9C0                 mov     edx, ds:dword_40F4A0
.text:0040A9C6                 test    edx, edx
.text:0040A9C8                 jnz     short loc_40A9D0
.text:0040A9CA                 jmp     getenv
.text:0040A9CA ; ---------------------------------------------------------------------------
.text:0040A9CF                 align 10h
.text:0040A9D0
.text:0040A9D0 loc_40A9D0:                             ; CODE XREF: sub_40A9C0+8↑j
.text:0040A9D0                 xor     eax, eax
.text:0040A9D2                 retn
.text:0040A9D2 sub_40A9C0      endp
.text:0040A9D2
.text:0040A9D2 ; ---------------------------------------------------------------------------
.text:0040A9D3                 align 10h
.text:0040A9E0
.text:0040A9E0 ; =============== S U B R O U T I N E =======================================
.text:0040A9E0
.text:0040A9E0
.text:0040A9E0 ; int __cdecl sub_40A9E0(LPCSTR, char *, int)
.text:0040A9E0 sub_40A9E0      proc near               ; CODE XREF: sub_40A130+104↑p
.text:0040A9E0                                         ; sub_40A130+158↑p ...
.text:0040A9E0
.text:0040A9E0 var_13C         = dword ptr -13Ch
.text:0040A9E0 lpString1       = dword ptr -138h
.text:0040A9E0 var_134         = dword ptr -134h
.text:0040A9E0 String1         = byte ptr -12Ch
.text:0040A9E0 var_10          = dword ptr -10h
.text:0040A9E0 var_C           = dword ptr -0Ch
.text:0040A9E0 var_8           = dword ptr -8
.text:0040A9E0 var_4           = dword ptr -4
.text:0040A9E0 arg_0           = dword ptr  4
.text:0040A9E0 arg_4           = dword ptr  8
.text:0040A9E0 arg_8           = dword ptr  0Ch
.text:0040A9E0
.text:0040A9E0                 sub     esp, 13Ch
.text:0040A9E6                 mov     [esp+13Ch+var_10], ebx
.text:0040A9ED                 mov     ebx, [esp+13Ch+arg_8]
.text:0040A9F4                 mov     [esp+13Ch+var_C], esi
.text:0040A9FB                 mov     esi, [esp+13Ch+arg_4]
.text:0040AA02                 mov     [esp+13Ch+var_8], edi
.text:0040AA09                 mov     edi, [esp+13Ch+arg_0]
.text:0040AA10                 mov     [esp+13Ch+var_4], ebp
.text:0040AA17                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040AA1B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040AA1F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040AA22                 call    sub_405000
.text:0040AA27                 cmp     eax, 0FFFFFFFFh
.text:0040AA2A                 mov     edx, eax
.text:0040AA2C                 jz      short loc_40AA3E
.text:0040AA2E                 mov     ecx, [ebx]
.text:0040AA30                 and     ecx, 0F000h
.text:0040AA36                 cmp     ecx, 0A000h
.text:0040AA3C                 jz      short loc_40AA63
.text:0040AA3E
.text:0040AA3E loc_40AA3E:                             ; CODE XREF: sub_40A9E0+4C↑j
.text:0040AA3E                                         ; sub_40A9E0+A1↓j ...
.text:0040AA3E                 mov     ebx, [esp+13Ch+var_10]
.text:0040AA45                 mov     eax, edx
.text:0040AA47                 mov     esi, [esp+13Ch+var_C]
.text:0040AA4E                 mov     edi, [esp+13Ch+var_8]
.text:0040AA55                 mov     ebp, [esp+13Ch+var_4]
.text:0040AA5C                 add     esp, 13Ch
.text:0040AA62                 retn
.text:0040AA63 ; ---------------------------------------------------------------------------
.text:0040AA63
.text:0040AA63 loc_40AA63:                             ; CODE XREF: sub_40A9E0+5C↑j
.text:0040AA63                 mov     [esp+13Ch+var_134], 104h
.text:0040AA6B                 lea     ebp, [esp+13Ch+String1]
.text:0040AA6F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040AA73                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040AA76                 call    sub_40AD60
.text:0040AA7B                 inc     eax
.text:0040AA7C                 mov     edx, 0FFFFFFFFh
.text:0040AA81                 jz      short loc_40AA3E
.text:0040AA83                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040AA87                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040AA8B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040AA8E                 call    sub_405000
.text:0040AA93                 mov     edx, eax
.text:0040AA95                 jmp     short loc_40AA3E
.text:0040AA95 sub_40A9E0      endp
.text:0040AA95
.text:0040AA95 ; ---------------------------------------------------------------------------
.text:0040AA97                 align 10h
.text:0040AAA0
.text:0040AAA0 ; =============== S U B R O U T I N E =======================================
.text:0040AAA0
.text:0040AAA0
.text:0040AAA0 sub_40AAA0      proc near               ; CODE XREF: sub_40A960+1A↑p
.text:0040AAA0
.text:0040AAA0 lpTimeZoneInformation= dword ptr -0DCh
.text:0040AAA0 var_D8          = dword ptr -0D8h
.text:0040AAA0 var_D4          = dword ptr -0D4h
.text:0040AAA0 var_D0          = dword ptr -0D0h
.text:0040AAA0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040AAA0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040AAA0 arg_0           = dword ptr  4
.text:0040AAA0 arg_4           = dword ptr  8
.text:0040AAA0
.text:0040AAA0                 push    edi
.text:0040AAA1                 push    esi
.text:0040AAA2                 push    ebx
.text:0040AAA3                 sub     esp, 0D0h
.text:0040AAA9                 mov     ebx, [esp+0DCh+arg_4]
.text:0040AAB0                 mov     edi, [esp+0DCh+arg_0]
.text:0040AAB7                 test    ebx, ebx
.text:0040AAB9                 jz      short loc_40AAE4
.text:0040AABB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040AABF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040AAC2                 call    GetTimeZoneInformation
.text:0040AAC7                 sub     esp, 4
.text:0040AACA                 cmp     eax, 0FFFFFFFFh
.text:0040AACD                 jz      loc_40AB65
.text:0040AAD3                 xor     ecx, ecx
.text:0040AAD5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040AAD9                 cmp     eax, 2
.text:0040AADC                 setz    cl
.text:0040AADF                 mov     [ebx], esi
.text:0040AAE1                 mov     [ebx+4], ecx
.text:0040AAE4
.text:0040AAE4 loc_40AAE4:                             ; CODE XREF: sub_40AAA0+19↑j
.text:0040AAE4                                         ; sub_40AAA0+E0↓j
.text:0040AAE4                 test    edi, edi
.text:0040AAE6                 jz      short loc_40AB59
.text:0040AAE8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040AAEC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040AAEF                 call    GetSystemTimeAsFileTime
.text:0040AAF4                 sub     esp, 4
.text:0040AAF7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040AAFB                 mov     [esp+0DCh+var_D4], 989680h
.text:0040AB03                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040AB07                 mov     [esp+0DCh+var_D0], 0
.text:0040AB0F                 add     ebx, 2AC18000h
.text:0040AB15                 adc     esi, 0FE624E21h
.text:0040AB1B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040AB1F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040AB22                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040AB26                 mov     [esp+0DCh+var_D8], esi
.text:0040AB2A                 call    sub_40C4B0
.text:0040AB2F                 mov     [edi], eax
.text:0040AB31                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040AB34                 mov     [esp+0DCh+var_D4], 989680h
.text:0040AB3C                 mov     [esp+0DCh+var_D0], 0
.text:0040AB44                 mov     [esp+0DCh+var_D8], esi
.text:0040AB48                 call    sub_40C5D0
.text:0040AB4D                 lea     ebx, [eax+eax*4]
.text:0040AB50                 lea     edx, [ebx+ebx*4]
.text:0040AB53                 shl     edx, 2
.text:0040AB56                 mov     [edi+4], edx
.text:0040AB59
.text:0040AB59 loc_40AB59:                             ; CODE XREF: sub_40AAA0+46↑j
.text:0040AB59                 add     esp, 0D0h
.text:0040AB5F                 xor     eax, eax
.text:0040AB61                 pop     ebx
.text:0040AB62                 pop     esi
.text:0040AB63                 pop     edi
.text:0040AB64                 retn
.text:0040AB65 ; ---------------------------------------------------------------------------
.text:0040AB65
.text:0040AB65 loc_40AB65:                             ; CODE XREF: sub_40AAA0+2D↑j
.text:0040AB65                 mov     dword ptr [ebx], 0
.text:0040AB6B                 mov     dword ptr [ebx+4], 0
.text:0040AB72                 call    sub_406E90
.text:0040AB77                 mov     esi, eax
.text:0040AB79                 call    _errno
.text:0040AB7E                 mov     [eax], esi
.text:0040AB80                 jmp     loc_40AAE4
.text:0040AB80 sub_40AAA0      endp
.text:0040AB80
.text:0040AB80 ; ---------------------------------------------------------------------------
.text:0040AB85                 align 10h
.text:0040AB90                 sub     esp, 0Ch
.text:0040AB93                 mov     [esp+4], ebx
.text:0040AB97                 mov     [esp+8], esi
.text:0040AB9B                 xor     esi, esi
.text:0040AB9D                 call    sub_40AE70
.text:0040ABA2                 mov     ebx, eax
.text:0040ABA4                 call    sub_40AE60
.text:0040ABA9                 cmp     ebx, eax
.text:0040ABAB                 jz      short loc_40ABC4
.text:0040ABAD
.text:0040ABAD loc_40ABAD:                             ; CODE XREF: .text:0040ABD2↓j
.text:0040ABAD                 mov     esi, 1
.text:0040ABB2
.text:0040ABB2 loc_40ABB2:                             ; CODE XREF: .text:0040ABD4↓j
.text:0040ABB2                 mov     ds:dword_40F4A0, esi
.text:0040ABB8                 mov     ebx, [esp+4]
.text:0040ABBC                 mov     esi, [esp+8]
.text:0040ABC0                 add     esp, 0Ch
.text:0040ABC3                 retn
.text:0040ABC4 ; ---------------------------------------------------------------------------
.text:0040ABC4
.text:0040ABC4 loc_40ABC4:                             ; CODE XREF: .text:0040ABAB↑j
.text:0040ABC4                 call    sub_40AE50
.text:0040ABC9                 mov     ebx, eax
.text:0040ABCB                 call    sub_40AE40
.text:0040ABD0                 cmp     ebx, eax
.text:0040ABD2                 jnz     short loc_40ABAD
.text:0040ABD4                 jmp     short loc_40ABB2
.text:0040ABD4 ; ---------------------------------------------------------------------------
.text:0040ABD6                 align 10h
.text:0040ABE0
.text:0040ABE0 ; =============== S U B R O U T I N E =======================================
.text:0040ABE0
.text:0040ABE0
.text:0040ABE0 ; int __cdecl sub_40ABE0(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040ABE0 sub_40ABE0      proc near               ; CODE XREF: sub_40AD60+93↓p
.text:0040ABE0
.text:0040ABE0 pvReserved      = dword ptr -35Ch
.text:0040ABE0 pUnkOuter       = dword ptr -358h
.text:0040ABE0 dwClsContext    = dword ptr -354h
.text:0040ABE0 riid            = dword ptr -350h
.text:0040ABE0 ppv             = dword ptr -34Ch
.text:0040ABE0 cchWideChar     = dword ptr -348h
.text:0040ABE0 var_334         = byte ptr -334h
.text:0040ABE0 var_330         = dword ptr -330h
.text:0040ABE0 String2         = byte ptr -32Ch
.text:0040ABE0 WideCharStr     = word ptr -21Ch
.text:0040ABE0 lpMultiByteStr  = dword ptr  4
.text:0040ABE0 lpString1       = dword ptr  8
.text:0040ABE0
.text:0040ABE0                 push    edi
.text:0040ABE1                 push    esi
.text:0040ABE2                 push    ebx
.text:0040ABE3                 sub     esp, 350h
.text:0040ABE9                 mov     edi, [esp+35Ch+lpString1]
.text:0040ABF0                 mov     byte ptr [edi], 0
.text:0040ABF3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040ABFA                 call    OleInitialize
.text:0040ABFF                 sub     esp, 4
.text:0040AC02                 cmp     eax, 1
.text:0040AC05                 ja      loc_40AD3F
.text:0040AC0B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040AC13                 lea     ecx, [esp+35Ch+var_330]
.text:0040AC17                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040AC1B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040AC23                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040AC2B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040AC32                 call    CoCreateInstance
.text:0040AC37                 sub     esp, 14h
.text:0040AC3A                 test    eax, eax
.text:0040AC3C                 js      loc_40AD3F
.text:0040AC42                 mov     ebx, [esp+35Ch+var_330]
.text:0040AC46                 lea     edx, [esp+35Ch+var_334]
.text:0040AC4A                 mov     esi, [ebx]
.text:0040AC4C                 mov     [esp+35Ch+dwClsContext], edx
.text:0040AC50                 mov     [esp+35Ch+pvReserved], ebx
.text:0040AC53                 xor     ebx, ebx
.text:0040AC55                 mov     [esp+35Ch+pUnkOuter], offset dword_40BC50
.text:0040AC5D                 call    dword ptr [esi]
.text:0040AC5F                 sub     esp, 0Ch
.text:0040AC62                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040AC69                 call    AreFileApisANSI
.text:0040AC6E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040AC76                 test    eax, eax
.text:0040AC78                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040AC7F                 setz    bl
.text:0040AC82                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040AC86                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040AC8E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040AC92                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040AC9A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040AC9D                 call    MultiByteToWideChar
.text:0040ACA2                 sub     esp, 18h
.text:0040ACA5                 test    eax, eax
.text:0040ACA7                 js      loc_40AD3F
.text:0040ACAD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040ACB1                 mov     ebx, [edx]
.text:0040ACB3                 mov     [esp+35Ch+dwClsContext], 0
.text:0040ACBB                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040ACBF                 mov     [esp+35Ch+pvReserved], edx
.text:0040ACC2                 call    dword ptr [ebx+14h]
.text:0040ACC5                 sub     esp, 0Ch
.text:0040ACC8                 test    eax, eax
.text:0040ACCA                 js      short loc_40AD3F
.text:0040ACCC                 mov     ebx, [esp+35Ch+var_330]
.text:0040ACD0                 lea     esi, [esp+35Ch+String2]
.text:0040ACD4                 mov     ecx, [ebx]
.text:0040ACD6                 mov     [esp+35Ch+pvReserved], ebx
.text:0040ACD9                 mov     [esp+35Ch+ppv], 0
.text:0040ACE1                 mov     [esp+35Ch+riid], 0
.text:0040ACE9                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040ACF1                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040ACF5                 call    dword ptr [ecx+0Ch]
.text:0040ACF8                 sub     esp, 14h
.text:0040ACFB                 mov     ebx, eax
.text:0040ACFD                 test    eax, eax
.text:0040ACFF                 js      short loc_40AD3F
.text:0040AD01                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040AD05                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040AD08                 call    lstrcpyA
.text:0040AD0D                 sub     esp, 8
.text:0040AD10                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040AD14                 mov     ecx, [edi]
.text:0040AD16                 mov     [esp+35Ch+pvReserved], edi
.text:0040AD19                 call    dword ptr [ecx+8]
.text:0040AD1C                 sub     esp, 4
.text:0040AD1F                 mov     edx, [esp+35Ch+var_330]
.text:0040AD23                 mov     esi, [edx]
.text:0040AD25                 mov     [esp+35Ch+pvReserved], edx
.text:0040AD28                 call    dword ptr [esi+8]
.text:0040AD2B                 sub     esp, 4
.text:0040AD2E                 call    CoUninitialize
.text:0040AD33                 mov     eax, ebx
.text:0040AD35
.text:0040AD35 loc_40AD35:                             ; CODE XREF: sub_40ABE0+177↓j
.text:0040AD35                 add     esp, 350h
.text:0040AD3B                 pop     ebx
.text:0040AD3C                 pop     esi
.text:0040AD3D                 pop     edi
.text:0040AD3E                 retn
.text:0040AD3F ; ---------------------------------------------------------------------------
.text:0040AD3F
.text:0040AD3F loc_40AD3F:                             ; CODE XREF: sub_40ABE0+25↑j
.text:0040AD3F                                         ; sub_40ABE0+5C↑j ...
.text:0040AD3F                 call    sub_406E90
.text:0040AD44                 mov     edi, eax
.text:0040AD46                 call    _errno
.text:0040AD4B                 mov     [eax], edi
.text:0040AD4D                 call    CoUninitialize
.text:0040AD52                 mov     eax, 0FFFFFFFFh
.text:0040AD57                 jmp     short loc_40AD35
.text:0040AD57 sub_40ABE0      endp
.text:0040AD57
.text:0040AD57 ; ---------------------------------------------------------------------------
.text:0040AD59 ; const char aLnk_0[]
.text:0040AD59 aLnk_0          db '.lnk',0             ; DATA XREF: sub_40AD60+53↓o
.text:0040AD59                                         ; sub_40AD60:loc_40ADC5↓o
.text:0040AD5E                 align 10h
.text:0040AD60
.text:0040AD60 ; =============== S U B R O U T I N E =======================================
.text:0040AD60
.text:0040AD60
.text:0040AD60 ; int __cdecl sub_40AD60(char *, LPSTR lpString1)
.text:0040AD60 sub_40AD60      proc near               ; CODE XREF: sub_40A9E0+96↑p
.text:0040AD60
.text:0040AD60 Str             = dword ptr -1Ch
.text:0040AD60 Source          = dword ptr -18h
.text:0040AD60 Destination     = dword ptr -14h
.text:0040AD60 arg_0           = dword ptr  4
.text:0040AD60 lpString1       = dword ptr  8
.text:0040AD60
.text:0040AD60                 push    ebp
.text:0040AD61                 push    edi
.text:0040AD62                 push    esi
.text:0040AD63                 push    ebx
.text:0040AD64                 sub     esp, 0Ch
.text:0040AD67                 mov     ebx, [esp+1Ch+arg_0]
.text:0040AD6B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040AD6F                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040AD72                 call    strlen
.text:0040AD77                 add     eax, 5
.text:0040AD7A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040AD7D                 call    malloc
.text:0040AD82                 mov     [esp+1Ch+Destination], eax
.text:0040AD86                 test    eax, eax
.text:0040AD88                 jz      loc_40AE30
.text:0040AD8E                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040AD92                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040AD95                 call    strcpy
.text:0040AD9A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040ADA2                 mov     eax, [esp+1Ch+Destination]
.text:0040ADA6                 mov     [esp+1Ch+Str], eax ; Str
.text:0040ADA9                 call    strrchr
.text:0040ADAE                 test    eax, eax
.text:0040ADB0                 jz      short loc_40ADC5
.text:0040ADB2                 cld
.text:0040ADB3                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:0040ADB8                 mov     ecx, 5
.text:0040ADBD                 mov     esi, eax
.text:0040ADBF                 mov     edi, ebx
.text:0040ADC1                 repe cmpsb
.text:0040ADC3                 jz      short loc_40ADD9
.text:0040ADC5
.text:0040ADC5 loc_40ADC5:                             ; CODE XREF: sub_40AD60+50↑j
.text:0040ADC5                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0040ADCD                 mov     edx, [esp+1Ch+Destination]
.text:0040ADD1                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040ADD4                 call    strcat
.text:0040ADD9
.text:0040ADD9 loc_40ADD9:                             ; CODE XREF: sub_40AD60+63↑j
.text:0040ADD9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040ADE0                 call    SetErrorMode
.text:0040ADE5                 sub     esp, 4
.text:0040ADE8                 mov     ebx, [esp+1Ch+Destination]
.text:0040ADEC                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040ADF0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040ADF3                 call    sub_40ABE0
.text:0040ADF8                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040ADFB                 mov     esi, eax
.text:0040ADFD                 call    free
.text:0040AE02                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040AE09                 call    SetErrorMode
.text:0040AE0E                 sub     esp, 4
.text:0040AE11                 mov     [esp+1Ch+Str], ebp
.text:0040AE14                 call    sub_4081A0
.text:0040AE19                 inc     esi
.text:0040AE1A                 jz      short loc_40AE30
.text:0040AE1C                 mov     [esp+1Ch+arg_0], ebp
.text:0040AE20                 add     esp, 0Ch
.text:0040AE23                 pop     ebx
.text:0040AE24                 pop     esi
.text:0040AE25                 pop     edi
.text:0040AE26                 pop     ebp
.text:0040AE27                 jmp     strlen
.text:0040AE27 ; ---------------------------------------------------------------------------
.text:0040AE2C                 align 10h
.text:0040AE30
.text:0040AE30 loc_40AE30:                             ; CODE XREF: sub_40AD60+28↑j
.text:0040AE30                                         ; sub_40AD60+BA↑j
.text:0040AE30                 add     esp, 0Ch
.text:0040AE33                 mov     eax, 0FFFFFFFFh
.text:0040AE38                 pop     ebx
.text:0040AE39                 pop     esi
.text:0040AE3A                 pop     edi
.text:0040AE3B                 pop     ebp
.text:0040AE3C                 retn
.text:0040AE3C sub_40AD60      endp
.text:0040AE3C
.text:0040AE3C ; ---------------------------------------------------------------------------
.text:0040AE3D                 align 10h
.text:0040AE40
.text:0040AE40 ; =============== S U B R O U T I N E =======================================
.text:0040AE40
.text:0040AE40
.text:0040AE40 sub_40AE40      proc near               ; CODE XREF: .text:0040ABCB↑p
.text:0040AE40                 xor     eax, eax
.text:0040AE42                 retn
.text:0040AE42 sub_40AE40      endp
.text:0040AE42
.text:0040AE42 ; ---------------------------------------------------------------------------
.text:0040AE43                 align 10h
.text:0040AE50
.text:0040AE50 ; =============== S U B R O U T I N E =======================================
.text:0040AE50
.text:0040AE50
.text:0040AE50 sub_40AE50      proc near               ; CODE XREF: .text:loc_40ABC4↑p
.text:0040AE50                 xor     eax, eax
.text:0040AE52                 retn
.text:0040AE52 sub_40AE50      endp
.text:0040AE52
.text:0040AE52 ; ---------------------------------------------------------------------------
.text:0040AE53                 align 10h
.text:0040AE60
.text:0040AE60 ; =============== S U B R O U T I N E =======================================
.text:0040AE60
.text:0040AE60
.text:0040AE60 sub_40AE60      proc near               ; CODE XREF: .text:0040ABA4↑p
.text:0040AE60                 xor     eax, eax
.text:0040AE62                 retn
.text:0040AE62 sub_40AE60      endp
.text:0040AE62
.text:0040AE62 ; ---------------------------------------------------------------------------
.text:0040AE63                 align 10h
.text:0040AE70
.text:0040AE70 ; =============== S U B R O U T I N E =======================================
.text:0040AE70
.text:0040AE70
.text:0040AE70 sub_40AE70      proc near               ; CODE XREF: .text:0040AB9D↑p
.text:0040AE70                 xor     eax, eax
.text:0040AE72                 retn
.text:0040AE72 sub_40AE70      endp
.text:0040AE72
.text:0040AE72 ; ---------------------------------------------------------------------------
.text:0040AE73                 align 10h
.text:0040AE80
.text:0040AE80 ; =============== S U B R O U T I N E =======================================
.text:0040AE80
.text:0040AE80 ; Attributes: thunk
.text:0040AE80
.text:0040AE80 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040AE80 OleInitialize   proc near               ; CODE XREF: sub_40ABE0+1A↑p
.text:0040AE80
.text:0040AE80 pvReserved      = dword ptr  4
.text:0040AE80
.text:0040AE80                 jmp     ds:__imp_OleInitialize
.text:0040AE80 OleInitialize   endp
.text:0040AE80
.text:0040AE80 ; ---------------------------------------------------------------------------
.text:0040AE86                 align 10h
.text:0040AE90
.text:0040AE90 ; =============== S U B R O U T I N E =======================================
.text:0040AE90
.text:0040AE90 ; Attributes: thunk
.text:0040AE90
.text:0040AE90 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040AE90 CoCreateInstance proc near              ; CODE XREF: sub_40ABE0+52↑p
.text:0040AE90
.text:0040AE90 rclsid          = dword ptr  4
.text:0040AE90 pUnkOuter       = dword ptr  8
.text:0040AE90 dwClsContext    = dword ptr  0Ch
.text:0040AE90 riid            = dword ptr  10h
.text:0040AE90 ppv             = dword ptr  14h
.text:0040AE90
.text:0040AE90                 jmp     ds:__imp_CoCreateInstance
.text:0040AE90 CoCreateInstance endp
.text:0040AE90
.text:0040AE90 ; ---------------------------------------------------------------------------
.text:0040AE96                 align 10h
.text:0040AEA0
.text:0040AEA0 ; =============== S U B R O U T I N E =======================================
.text:0040AEA0
.text:0040AEA0 ; Attributes: thunk
.text:0040AEA0
.text:0040AEA0 ; void __stdcall CoUninitialize()
.text:0040AEA0 CoUninitialize  proc near               ; CODE XREF: sub_40ABE0+14E↑p
.text:0040AEA0                                         ; sub_40ABE0+16D↑p
.text:0040AEA0                 jmp     ds:__imp_CoUninitialize
.text:0040AEA0 CoUninitialize  endp
.text:0040AEA0
.text:0040AEA0 ; ---------------------------------------------------------------------------
.text:0040AEA6                 align 10h
.text:0040AEB0                 add     al, 0BAh ; 'º'
.text:0040AEB2                 retf
.text:0040AEB2 ; ---------------------------------------------------------------------------
.text:0040AEB3                 db 7Eh
.text:0040AEB4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040AEB4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040AEB4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040AEB4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040AEB4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040AEB4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040AEB4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040AEB4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040AEB4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040AEB4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040AEB4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040AEB4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040AEB4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040AEB4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040AEB4                 dd 0C4426C00h, 330h, 0
.text:0040AFE8                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040AFE8                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040AFE8                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040AFE8                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040B038                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B038                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040B038                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040B038                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040B038                 dd 0BA94B00h, 1Bh, 0
.text:0040B098                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040B0A8                 dd 0C0h, 46000000h, 331h, 0
.text:0040B0B8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B0B8                 dd 312h, 0
.text:0040B0D8                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040B0E8                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040B0F8                 dd 0C0h, 46000000h, 311h, 0
.text:0040B108                 dd 0C0h, 46000000h, 313h, 0
.text:0040B118                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040B128                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040B138                 dd 0C0h, 46000000h, 310h, 0
.text:0040B148                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B148                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040B178                 dd 0C0h, 46000000h, 319h, 0
.text:0040B188                 dd 0C0h, 46000000h, 315h, 0
.text:0040B198                 dd 0C0h, 46000000h, 316h, 0
.text:0040B1A8                 dd 0C0h, 46000000h, 315h, 0
.text:0040B1B8                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040B1C8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040B1C8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040B1C8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040B208                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040B208                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040B208                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040B208                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040B208                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040B208                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040B208                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040B208                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040B208                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040B208                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040B208                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040B208                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040B208                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040B208                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040B208                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040B208                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040B208                 dd 2DE81h, 0
.text:0040B358                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040B370                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040B370                 dd 0
.text:0040B388                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040B388                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040B388                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040B388                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040B388                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040B388                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040B388                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040B388                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040B388                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040B388                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040B388                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040B388                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040B388                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040B388                 dd 10Fh, 0
.text:0040B498                 dd 0C0h, 46000000h, 125h, 0
.text:0040B4A8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040B4A8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040B4A8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040B4E8                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040B4E8                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B4E8                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040B4E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040B4E8                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040B548                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040B558                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040B558                 dd 140h, 0
.text:0040B578                 dd 0C0h, 46000000h, 1, 0
.text:0040B588                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040B588                 dd 71D3400h, 13Dh, 0
.text:0040B5A8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040B5A8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040B5A8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040B5A8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040B5F8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040B5F8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040B5F8                 dd 20405h, 0
.text:0040B628                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040B638                 dd 0C0h, 46000000h, 20406h, 0
.text:0040B648                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040B658                 dd 0C0h, 46000000h, 110h, 0
.text:0040B668                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040B678                 dd 0C0h, 46000000h, 123h, 0
.text:0040B688                 dd 0C0h, 46000000h, 124h, 0
.text:0040B698                 dd 0C0h, 46000000h, 13h, 0
.text:0040B6A8                 dd 0C0h, 46000000h, 14h, 0
.text:0040B6B8                 dd 0C0h, 46000000h, 15h, 0
.text:0040B6C8                 dd 0C0h, 46000000h, 20400h, 0
.text:0040B6D8                 dd 0C0h, 46000000h, 121h, 0
.text:0040B6E8                 dd 0C0h, 46000000h, 122h, 0
.text:0040B6F8                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040B708                 dd 0C0h, 46000000h, 108h, 0
.text:0040B718                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040B718                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040B718                 dd 103h, 0
.text:0040B748                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040B758                 dd 0C0h, 46000000h, 106h, 0
.text:0040B768                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B768                 dd 107h, 0
.text:0040B788                 dd 0C0h, 46000000h, 102h, 0
.text:0040B798                 dd 0C0h, 46000000h, 104h, 0
.text:0040B7A8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040B7A8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040B7A8                 dd 105h, 0
.text:0040B7D8                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040B7E8                 dd 0C0h, 46000000h, 139h, 0
.text:0040B7F8                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040B808                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040B808                 dd 101h, 0
.text:0040B828                 dd 0C0h, 46000000h, 100h, 0
.text:0040B838                 dd 0C0h, 46000000h, 20404h, 0
.text:0040B848                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040B848                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040B878                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040B878                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040B878                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040B878                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040B8C8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B8C8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040B8C8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040B8C8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040B8C8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B8C8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040B948                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040B948                 dd 0Ah, 0
.text:0040B968                 dd 0C0h, 46000000h, 2, 0
.text:0040B978                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040B988                 dd 0C0h, 46000000h, 3, 0
.text:0040B998                 dd 0C0h, 46000000h, 16h, 0
.text:0040B9A8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040B9A8                 dd 1608D74Fh, 0Fh, 0
.text:0040B9C8                 dd 0C0h, 46000000h, 20h, 0
.text:0040B9D8                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040B9D8                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040B9D8                 dd 0
.text:0040BA08                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040BA18                 dd 0C0h, 46000000h, 128h, 0
.text:0040BA28                 dd 0C0h, 46000000h, 129h, 0
.text:0040BA38                 dd 0C0h, 46000000h, 118h, 0
.text:0040BA48                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040BA48                 dd 70474000h, 11Bh, 0
.text:0040BA68                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040BA68                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040BA68                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040BA68                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040BA68                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040BAC8                 dd 0C0h, 46000000h, 116h, 0
.text:0040BAD8                 dd 0C0h, 46000000h, 113h, 0
.text:0040BAE8                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040BAE8                 dd 119h, 0
.text:0040BB08                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040BB08                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040BB08                 dd 0
.text:0040BB38                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040BB48                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040BB58                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040BB68                 dd 0C0h, 46000000h, 112h, 0
.text:0040BB78                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040BB78                 dd 18E6000h, 120h, 0
.text:0040BB98                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040BB98                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040BB98                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040BBD8                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040BBD8                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040BC08                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040BC08                 dd 11Ah, 0
.text:0040BC28                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040BC28                 dd 10Ch, 0
.text:0040BC48                 dd 0C0h, 46000000h
.text:0040BC50 dword_40BC50    dd 10Bh, 0              ; DATA XREF: sub_40ABE0+75↑o
.text:0040BC58                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040BC58                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040BC58                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040BC58                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040BCA8                 dd 0C0h, 46000000h, 109h, 0
.text:0040BCB8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040BCB8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040BCB8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040BCB8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040BCB8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040BCB8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040BCB8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040BCB8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040BCB8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040BCB8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040BCB8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040BD98                 dd 0C0h, 46000000h, 138h, 0
.text:0040BDA8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040BDA8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040BDA8                 dd 27h, 0
.text:0040BDD8                 dd 0C0h, 46000000h, 8, 0
.text:0040BDE8                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040BDE8                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040BDE8                 dd 20D00h, 0
.text:0040BE18                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040BE28                 dd 0C0h, 46000000h, 12h, 0
.text:0040BE38                 dd 0C0h, 46000000h, 4, 0
.text:0040BE48                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040BE48                 dd 7, 0
.text:0040BE68                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040BE68                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040BE98                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040BE98                 dd 126h, 0
.text:0040BEB8                 dd 0C0h, 46000000h, 10h, 0
.text:0040BEC8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040BEC8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040BEF8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040BEF8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040BEF8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040BF38                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040BF48                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040BF58                 dd 0C0h, 46000000h, 26h, 0
.text:0040BF68                 dd 0C0h, 46000000h, 6, 0
.text:0040BF78                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040BF78                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040BF78                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040BFB8                 dd 0C0h, 46000000h, 20403h, 0
.text:0040BFC8                 dd 0C0h, 46000000h, 20401h, 0
.text:0040BFD8                 dd 0C0h, 46000000h, 20412h, 0
.text:0040BFE8                 dd 0C0h, 46000000h, 20402h, 0
.text:0040BFF8                 dd 0C0h, 46000000h, 20411h, 0
.text:0040C008                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040C018                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040C018                 dd 10Dh, 0
.text:0040C038                 dd 0C0h, 46000000h, 127h, 0
.text:0040C048                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040C048                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040C048                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040C088                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040C088                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040C088                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040C0C8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040C0D8                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040C0E8                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040C0F8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040C108                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040C118                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040C128                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040C138                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040C148                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040C158                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040C168                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040C178                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040C188                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040C198                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040C1A8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040C1B8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040C1C8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040C1D8                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040C1E8                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040C1F8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040C208                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040C218                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040C228                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040C238                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040C248                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040C258                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040C268                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040C278                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040C288                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040C298                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040C2A8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040C2B8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040C2C8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040C2D8                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040C2E8                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040C2F8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040C2F8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040C320
.text:0040C320 ; =============== S U B R O U T I N E =======================================
.text:0040C320
.text:0040C320 ; Attributes: thunk
.text:0040C320
.text:0040C320 ; size_t __cdecl mbrlen(const char *Ch, size_t SizeInBytes, mbstate_t *State)
.text:0040C320 mbrlen          proc near               ; CODE XREF: sub_4018F0+3C5↑p
.text:0040C320
.text:0040C320 SizeInBytes     = dword ptr  8
.text:0040C320 State           = dword ptr  0Ch
.text:0040C320
.text:0040C320                 jmp     ds:__imp_mbrlen
.text:0040C320 mbrlen          endp
.text:0040C320
.text:0040C320 ; ---------------------------------------------------------------------------
.text:0040C326                 align 10h
.text:0040C330
.text:0040C330 ; =============== S U B R O U T I N E =======================================
.text:0040C330
.text:0040C330 ; Attributes: thunk
.text:0040C330
.text:0040C330 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040C330 mbrtowc         proc near               ; CODE XREF: sub_401ED0+757↑p
.text:0040C330
.text:0040C330 DstCh           = dword ptr  4
.text:0040C330 SrcCh           = dword ptr  8
.text:0040C330 SizeInBytes     = dword ptr  0Ch
.text:0040C330 State           = dword ptr  10h
.text:0040C330
.text:0040C330                 jmp     ds:__imp_mbrtowc
.text:0040C330 mbrtowc         endp
.text:0040C330
.text:0040C330 ; ---------------------------------------------------------------------------
.text:0040C336                 align 10h
.text:0040C340
.text:0040C340 ; =============== S U B R O U T I N E =======================================
.text:0040C340
.text:0040C340 ; Attributes: bp-based frame
.text:0040C340
.text:0040C340 sub_40C340      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040C340                 push    ebp
.text:0040C341                 mov     ecx, offset unk_40F000
.text:0040C346                 cmp     ecx, offset unk_40F000
.text:0040C34C                 mov     ebp, esp
.text:0040C34E                 jnb     short loc_40C366
.text:0040C350
.text:0040C350 loc_40C350:                             ; CODE XREF: sub_40C340+24↓j
.text:0040C350                 mov     edx, [ecx+4]
.text:0040C353                 mov     eax, [ecx]
.text:0040C355                 add     ecx, 8
.text:0040C358                 add     [edx+400000h], eax
.text:0040C35E                 cmp     ecx, offset unk_40F000
.text:0040C364                 jb      short loc_40C350
.text:0040C366
.text:0040C366 loc_40C366:                             ; CODE XREF: sub_40C340+E↑j
.text:0040C366                 pop     ebp
.text:0040C367                 retn
.text:0040C367 sub_40C340      endp
.text:0040C367
.text:0040C367 ; ---------------------------------------------------------------------------
.text:0040C368                 align 10h
.text:0040C370
.text:0040C370 ; =============== S U B R O U T I N E =======================================
.text:0040C370
.text:0040C370 ; Attributes: bp-based frame
.text:0040C370
.text:0040C370 sub_40C370      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040C370                                         ; TopLevelExceptionFilter+D7↑p
.text:0040C370                 push    ebp
.text:0040C371                 mov     ebp, esp
.text:0040C373                 fninit
.text:0040C375                 pop     ebp
.text:0040C376                 retn
.text:0040C376 sub_40C370      endp
.text:0040C376
.text:0040C376 ; ---------------------------------------------------------------------------
.text:0040C377                 align 10h
.text:0040C380
.text:0040C380 ; =============== S U B R O U T I N E =======================================
.text:0040C380
.text:0040C380 ; Attributes: bp-based frame
.text:0040C380
.text:0040C380 ; void __cdecl sub_40C380()
.text:0040C380 sub_40C380      proc near               ; DATA XREF: .text:loc_40C3C9↓o
.text:0040C380                                         ; sub_40C410:loc_40C43E↓o
.text:0040C380                 push    ebp
.text:0040C381                 mov     ebp, esp
.text:0040C383                 sub     esp, 8
.text:0040C386                 mov     eax, off_40E0C4
.text:0040C38B                 mov     edx, [eax]
.text:0040C38D                 test    edx, edx
.text:0040C38F                 jnz     short loc_40C395
.text:0040C391
.text:0040C391 loc_40C391:                             ; CODE XREF: sub_40C380+2C↓j
.text:0040C391                 mov     esp, ebp
.text:0040C393                 pop     ebp
.text:0040C394                 retn
.text:0040C395 ; ---------------------------------------------------------------------------
.text:0040C395
.text:0040C395 loc_40C395:                             ; CODE XREF: sub_40C380+F↑j
.text:0040C395                                         ; sub_40C380+2A↓j
.text:0040C395                 call    dword ptr [eax]
.text:0040C397                 mov     edx, off_40E0C4
.text:0040C39D                 mov     ecx, [edx+4]
.text:0040C3A0                 lea     eax, [edx+4]
.text:0040C3A3                 mov     off_40E0C4, eax
.text:0040C3A8                 test    ecx, ecx
.text:0040C3AA                 jnz     short loc_40C395
.text:0040C3AC                 jmp     short loc_40C391
.text:0040C3AC sub_40C380      endp
.text:0040C3AC
.text:0040C3AC ; ---------------------------------------------------------------------------
.text:0040C3AE                 align 10h
.text:0040C3B0                 push    ebp
.text:0040C3B1                 mov     ebp, esp
.text:0040C3B3                 sub     esp, 8
.text:0040C3B6                 mov     [ebp-4], ebx
.text:0040C3B9                 mov     eax, ds:dword_40D110
.text:0040C3BE                 cmp     eax, 0FFFFFFFFh
.text:0040C3C1                 jz      short loc_40C3EC
.text:0040C3C3
.text:0040C3C3 loc_40C3C3:                             ; CODE XREF: .text:0040C3F6↓j
.text:0040C3C3                                         ; .text:0040C409↓j
.text:0040C3C3                 test    eax, eax
.text:0040C3C5                 mov     ebx, eax
.text:0040C3C7                 jnz     short loc_40C3E0
.text:0040C3C9
.text:0040C3C9 loc_40C3C9:                             ; CODE XREF: .text:0040C3EA↓j
.text:0040C3C9                 mov     dword ptr [esp], offset sub_40C380
.text:0040C3D0                 call    sub_401040
.text:0040C3D5                 mov     ebx, [ebp-4]
.text:0040C3D8                 mov     esp, ebp
.text:0040C3DA                 pop     ebp
.text:0040C3DB                 retn
.text:0040C3DB ; ---------------------------------------------------------------------------
.text:0040C3DC                 align 10h
.text:0040C3E0
.text:0040C3E0 loc_40C3E0:                             ; CODE XREF: .text:0040C3C7↑j
.text:0040C3E0                                         ; .text:0040C3E8↓j
.text:0040C3E0                 call    ds:dword_40D110[ebx*4]
.text:0040C3E7                 dec     ebx
.text:0040C3E8                 jnz     short loc_40C3E0
.text:0040C3EA                 jmp     short loc_40C3C9
.text:0040C3EC ; ---------------------------------------------------------------------------
.text:0040C3EC
.text:0040C3EC loc_40C3EC:                             ; CODE XREF: .text:0040C3C1↑j
.text:0040C3EC                 mov     ecx, ds:dword_40D114
.text:0040C3F2                 xor     eax, eax
.text:0040C3F4                 test    ecx, ecx
.text:0040C3F6                 jz      short loc_40C3C3
.text:0040C3F8                 mov     edx, offset dword_40D110
.text:0040C3FD                 lea     esi, [esi+0]
.text:0040C400
.text:0040C400 loc_40C400:                             ; CODE XREF: .text:0040C407↓j
.text:0040C400                 inc     eax
.text:0040C401                 mov     ecx, [edx+eax*4+4]
.text:0040C405                 test    ecx, ecx
.text:0040C407                 jnz     short loc_40C400
.text:0040C409                 jmp     short loc_40C3C3
.text:0040C409 ; ---------------------------------------------------------------------------
.text:0040C40B                 align 10h
.text:0040C410
.text:0040C410 ; =============== S U B R O U T I N E =======================================
.text:0040C410
.text:0040C410 ; Attributes: bp-based frame
.text:0040C410
.text:0040C410 sub_40C410      proc near               ; CODE XREF: sub_401520+18↑p
.text:0040C410
.text:0040C410 var_8           = dword ptr -8
.text:0040C410 var_4           = dword ptr -4
.text:0040C410
.text:0040C410                 push    ebp
.text:0040C411                 mov     ebp, esp
.text:0040C413                 sub     esp, 8
.text:0040C416                 mov     [ebp+var_4], ebx
.text:0040C419                 mov     edx, dword_40E0C0
.text:0040C41F                 test    edx, edx
.text:0040C421                 jnz     short loc_40C44A
.text:0040C423                 mov     eax, ds:dword_40D110
.text:0040C428                 mov     edx, 1
.text:0040C42D                 mov     dword_40E0C0, edx
.text:0040C433                 cmp     eax, 0FFFFFFFFh
.text:0040C436                 jz      short loc_40C45D
.text:0040C438
.text:0040C438 loc_40C438:                             ; CODE XREF: sub_40C410+57↓j
.text:0040C438                                         ; sub_40C410+69↓j
.text:0040C438                 test    eax, eax
.text:0040C43A                 mov     ebx, eax
.text:0040C43C                 jnz     short loc_40C451
.text:0040C43E
.text:0040C43E loc_40C43E:                             ; CODE XREF: sub_40C410+4B↓j
.text:0040C43E                 mov     [esp+8+var_8], offset sub_40C380 ; void (__cdecl *)()
.text:0040C445                 call    sub_401040
.text:0040C44A
.text:0040C44A loc_40C44A:                             ; CODE XREF: sub_40C410+11↑j
.text:0040C44A                 mov     ebx, [ebp+var_4]
.text:0040C44D                 mov     esp, ebp
.text:0040C44F                 pop     ebp
.text:0040C450                 retn
.text:0040C451 ; ---------------------------------------------------------------------------
.text:0040C451
.text:0040C451 loc_40C451:                             ; CODE XREF: sub_40C410+2C↑j
.text:0040C451                                         ; sub_40C410+49↓j
.text:0040C451                 call    ds:dword_40D110[ebx*4]
.text:0040C458                 dec     ebx
.text:0040C459                 jnz     short loc_40C451
.text:0040C45B                 jmp     short loc_40C43E
.text:0040C45D ; ---------------------------------------------------------------------------
.text:0040C45D
.text:0040C45D loc_40C45D:                             ; CODE XREF: sub_40C410+26↑j
.text:0040C45D                 mov     ecx, ds:dword_40D114
.text:0040C463                 xor     eax, eax
.text:0040C465                 test    ecx, ecx
.text:0040C467                 jz      short loc_40C438
.text:0040C469                 mov     edx, offset dword_40D110
.text:0040C46E                 mov     esi, esi
.text:0040C470
.text:0040C470 loc_40C470:                             ; CODE XREF: sub_40C410+67↓j
.text:0040C470                 inc     eax
.text:0040C471                 mov     ebx, [edx+eax*4+4]
.text:0040C475                 test    ebx, ebx
.text:0040C477                 jnz     short loc_40C470
.text:0040C479                 jmp     short loc_40C438
.text:0040C479 sub_40C410      endp
.text:0040C479
.text:0040C479 ; ---------------------------------------------------------------------------
.text:0040C47B                 align 10h
.text:0040C480
.text:0040C480 ; =============== S U B R O U T I N E =======================================
.text:0040C480
.text:0040C480 ; Attributes: info_from_lumina
.text:0040C480
.text:0040C480 ; void *__cdecl _alloca(size_t Size)
.text:0040C480 __alloca        proc near               ; CODE XREF: sub_401520+13↑p
.text:0040C480                 push    ecx
.text:0040C481                 mov     ecx, esp
.text:0040C483                 add     ecx, 8
.text:0040C486
.text:0040C486 loc_40C486:                             ; CODE XREF: __alloca+1B↓j
.text:0040C486                 cmp     eax, 1000h
.text:0040C48B                 jb      short loc_40C49D
.text:0040C48D                 sub     ecx, 1000h
.text:0040C493                 or      dword ptr [ecx], 0
.text:0040C496                 sub     eax, 1000h
.text:0040C49B                 jmp     short loc_40C486
.text:0040C49D ; ---------------------------------------------------------------------------
.text:0040C49D
.text:0040C49D loc_40C49D:                             ; CODE XREF: __alloca+B↑j
.text:0040C49D                 sub     ecx, eax
.text:0040C49F                 or      dword ptr [ecx], 0
.text:0040C4A2                 mov     eax, esp
.text:0040C4A4                 mov     esp, ecx
.text:0040C4A6                 mov     ecx, [eax]
.text:0040C4A8                 mov     eax, [eax+4]
.text:0040C4AB                 jmp     eax
.text:0040C4AB __alloca        endp
.text:0040C4AB
.text:0040C4AB ; ---------------------------------------------------------------------------
.text:0040C4AD                 align 10h
.text:0040C4B0
.text:0040C4B0 ; =============== S U B R O U T I N E =======================================
.text:0040C4B0
.text:0040C4B0 ; Attributes: bp-based frame
.text:0040C4B0
.text:0040C4B0 sub_40C4B0      proc near               ; CODE XREF: sub_4053B0+17E↑p
.text:0040C4B0                                         ; sub_4053B0+1F5↑p ...
.text:0040C4B0
.text:0040C4B0 var_24          = dword ptr -24h
.text:0040C4B0 var_20          = dword ptr -20h
.text:0040C4B0 var_1C          = dword ptr -1Ch
.text:0040C4B0 var_18          = dword ptr -18h
.text:0040C4B0 var_14          = dword ptr -14h
.text:0040C4B0 var_C           = dword ptr -0Ch
.text:0040C4B0 var_8           = dword ptr -8
.text:0040C4B0 var_4           = dword ptr -4
.text:0040C4B0 arg_0           = dword ptr  8
.text:0040C4B0 arg_4           = dword ptr  0Ch
.text:0040C4B0 arg_8           = dword ptr  10h
.text:0040C4B0 arg_C           = dword ptr  14h
.text:0040C4B0
.text:0040C4B0                 push    ebp
.text:0040C4B1                 mov     ebp, esp
.text:0040C4B3                 sub     esp, 28h
.text:0040C4B6                 mov     [ebp+var_C], ebx
.text:0040C4B9                 mov     edx, [ebp+arg_C]
.text:0040C4BC                 mov     ecx, [ebp+arg_0]
.text:0040C4BF                 mov     [ebp+var_8], esi
.text:0040C4C2                 mov     eax, [ebp+arg_8]
.text:0040C4C5                 test    edx, edx
.text:0040C4C7                 mov     [ebp+var_4], edi
.text:0040C4CA                 mov     ebx, [ebp+arg_4]
.text:0040C4CD                 mov     esi, eax
.text:0040C4CF                 mov     [ebp+var_18], 0
.text:0040C4D6                 mov     [ebp+var_14], 0
.text:0040C4DD                 mov     [ebp+var_1C], ecx
.text:0040C4E0                 jnz     short loc_40C532
.text:0040C4E2                 cmp     eax, ebx
.text:0040C4E4                 jbe     short loc_40C510
.text:0040C4E6                 mov     eax, ecx
.text:0040C4E8                 mov     edx, ebx
.text:0040C4EA                 div     esi
.text:0040C4EC                 mov     edi, eax
.text:0040C4EE                 mov     esi, esi
.text:0040C4F0
.text:0040C4F0 loc_40C4F0:                             ; CODE XREF: sub_40C4B0+88↓j
.text:0040C4F0                                         ; sub_40C4B0+A4↓j ...
.text:0040C4F0                 xor     ecx, ecx
.text:0040C4F2
.text:0040C4F2 loc_40C4F2:                             ; CODE XREF: sub_40C4B0+80↓j
.text:0040C4F2                 mov     [ebp+var_18], edi
.text:0040C4F5                 mov     ebx, [ebp+var_C]
.text:0040C4F8                 mov     eax, [ebp+var_18]
.text:0040C4FB                 mov     [ebp+var_14], ecx
.text:0040C4FE                 mov     esi, [ebp+var_8]
.text:0040C501                 mov     edx, [ebp+var_14]
.text:0040C504                 mov     edi, [ebp+var_4]
.text:0040C507                 mov     esp, ebp
.text:0040C509                 pop     ebp
.text:0040C50A                 retn
.text:0040C50A ; ---------------------------------------------------------------------------
.text:0040C50B                 align 10h
.text:0040C510
.text:0040C510 loc_40C510:                             ; CODE XREF: sub_40C4B0+34↑j
.text:0040C510                 test    eax, eax
.text:0040C512                 jnz     short loc_40C521
.text:0040C514                 mov     eax, 1
.text:0040C519                 xor     ecx, ecx
.text:0040C51B                 xor     edx, edx
.text:0040C51D                 div     ecx
.text:0040C51F                 mov     esi, eax
.text:0040C521
.text:0040C521 loc_40C521:                             ; CODE XREF: sub_40C4B0+62↑j
.text:0040C521                 mov     eax, ebx
.text:0040C523                 xor     edx, edx
.text:0040C525                 div     esi
.text:0040C527                 mov     ecx, eax
.text:0040C529                 mov     eax, [ebp+var_1C]
.text:0040C52C                 div     esi
.text:0040C52E                 mov     edi, eax
.text:0040C530                 jmp     short loc_40C4F2
.text:0040C532 ; ---------------------------------------------------------------------------
.text:0040C532
.text:0040C532 loc_40C532:                             ; CODE XREF: sub_40C4B0+30↑j
.text:0040C532                 cmp     edx, ebx
.text:0040C534                 jbe     short loc_40C540
.text:0040C536                 xor     edi, edi
.text:0040C538                 jmp     short loc_40C4F0
.text:0040C538 ; ---------------------------------------------------------------------------
.text:0040C53A                 align 10h
.text:0040C540
.text:0040C540 loc_40C540:                             ; CODE XREF: sub_40C4B0+84↑j
.text:0040C540                 bsr     eax, edx
.text:0040C543                 xor     eax, 1Fh
.text:0040C546                 mov     [ebp+var_20], eax
.text:0040C549                 jnz     short loc_40C560
.text:0040C54B                 cmp     ebx, edx
.text:0040C54D                 ja      short loc_40C556
.text:0040C54F                 xor     edi, edi
.text:0040C551                 cmp     [ebp+var_1C], esi
.text:0040C554                 jb      short loc_40C4F0
.text:0040C556
.text:0040C556 loc_40C556:                             ; CODE XREF: sub_40C4B0+9D↑j
.text:0040C556                 mov     edi, 1
.text:0040C55B                 jmp     short loc_40C4F0
.text:0040C55B ; ---------------------------------------------------------------------------
.text:0040C55D                 align 10h
.text:0040C560
.text:0040C560 loc_40C560:                             ; CODE XREF: sub_40C4B0+99↑j
.text:0040C560                 mov     eax, [ebp+var_20]
.text:0040C563                 mov     ecx, 20h ; ' '
.text:0040C568                 sub     ecx, eax
.text:0040C56A                 mov     [ebp+var_24], ecx
.text:0040C56D                 mov     eax, esi
.text:0040C56F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040C573                 shl     edx, cl
.text:0040C575                 mov     edi, edx
.text:0040C577                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040C57B                 mov     edx, ebx
.text:0040C57D                 shr     eax, cl
.text:0040C57F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040C583                 or      edi, eax
.text:0040C585                 mov     eax, [ebp+var_1C]
.text:0040C588                 shl     esi, cl
.text:0040C58A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040C58E                 shr     edx, cl
.text:0040C590                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040C594                 shl     ebx, cl
.text:0040C596                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040C59A                 shr     eax, cl
.text:0040C59C                 or      ebx, eax
.text:0040C59E                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040C5A2                 mov     eax, ebx
.text:0040C5A4                 div     edi
.text:0040C5A6                 mov     ebx, edx
.text:0040C5A8                 mov     edi, eax
.text:0040C5AA                 shl     [ebp+var_1C], cl
.text:0040C5AD                 mul     esi
.text:0040C5AF                 cmp     edx, ebx
.text:0040C5B1                 ja      short loc_40C5C4
.text:0040C5B3                 cmp     edx, ebx
.text:0040C5B5                 jnz     loc_40C4F0
.text:0040C5BB                 cmp     eax, [ebp+var_1C]
.text:0040C5BE                 jbe     loc_40C4F0
.text:0040C5C4
.text:0040C5C4 loc_40C5C4:                             ; CODE XREF: sub_40C4B0+101↑j
.text:0040C5C4                 dec     edi
.text:0040C5C5                 jmp     loc_40C4F0
.text:0040C5C5 sub_40C4B0      endp
.text:0040C5C5
.text:0040C5C5 ; ---------------------------------------------------------------------------
.text:0040C5CA                 align 10h
.text:0040C5D0
.text:0040C5D0 ; =============== S U B R O U T I N E =======================================
.text:0040C5D0
.text:0040C5D0 ; Attributes: bp-based frame
.text:0040C5D0
.text:0040C5D0 sub_40C5D0      proc near               ; CODE XREF: sub_4053B0+1A5↑p
.text:0040C5D0                                         ; sub_4053B0+21E↑p ...
.text:0040C5D0
.text:0040C5D0 var_34          = dword ptr -34h
.text:0040C5D0 var_2C          = dword ptr -2Ch
.text:0040C5D0 var_28          = dword ptr -28h
.text:0040C5D0 var_24          = dword ptr -24h
.text:0040C5D0 var_20          = dword ptr -20h
.text:0040C5D0 var_1C          = dword ptr -1Ch
.text:0040C5D0 var_18          = dword ptr -18h
.text:0040C5D0 var_14          = dword ptr -14h
.text:0040C5D0 arg_0           = dword ptr  8
.text:0040C5D0 arg_4           = dword ptr  0Ch
.text:0040C5D0 arg_8           = dword ptr  10h
.text:0040C5D0 arg_C           = dword ptr  14h
.text:0040C5D0
.text:0040C5D0                 push    ebp
.text:0040C5D1                 mov     ebp, esp
.text:0040C5D3                 push    edi
.text:0040C5D4                 push    esi
.text:0040C5D5                 push    ebx
.text:0040C5D6                 sub     esp, 2Ch
.text:0040C5D9                 mov     edx, [ebp+arg_C]
.text:0040C5DC                 mov     [ebp+var_20], 0
.text:0040C5E3                 mov     ecx, [ebp+arg_0]
.text:0040C5E6                 mov     ebx, [ebp+arg_4]
.text:0040C5E9                 mov     [ebp+var_1C], 0
.text:0040C5F0                 mov     eax, [ebp+arg_8]
.text:0040C5F3                 test    edx, edx
.text:0040C5F5                 mov     [ebp+var_24], edx
.text:0040C5F8                 mov     edi, ebx
.text:0040C5FA                 mov     esi, eax
.text:0040C5FC                 mov     [ebp+var_28], ecx
.text:0040C5FF                 jnz     short loc_40C660
.text:0040C601                 cmp     eax, ebx
.text:0040C603                 jbe     short loc_40C640
.text:0040C605                 mov     eax, ecx
.text:0040C607                 mov     edx, ebx
.text:0040C609                 div     esi
.text:0040C60B
.text:0040C60B loc_40C60B:                             ; CODE XREF: sub_40C5D0+8B↓j
.text:0040C60B                 mov     [ebp+var_28], edx
.text:0040C60E                 lea     ecx, [ebp+var_18]
.text:0040C611                 test    ecx, ecx
.text:0040C613                 jz      short loc_40C62E
.text:0040C615                 mov     [ebp+var_1C], 0
.text:0040C61C
.text:0040C61C loc_40C61C:                             ; CODE XREF: sub_40C5D0+DA↓j
.text:0040C61C                 mov     eax, [ebp+var_28]
.text:0040C61F                 mov     [ebp+var_20], eax
.text:0040C622                 mov     edx, [ebp+var_20]
.text:0040C625                 mov     ecx, [ebp+var_1C]
.text:0040C628                 mov     [ebp+var_18], edx
.text:0040C62B                 mov     [ebp+var_14], ecx
.text:0040C62E
.text:0040C62E loc_40C62E:                             ; CODE XREF: sub_40C5D0+43↑j
.text:0040C62E                                         ; sub_40C5D0+A7↓j ...
.text:0040C62E                 mov     eax, [ebp+var_18]
.text:0040C631                 mov     edx, [ebp+var_14]
.text:0040C634                 add     esp, 2Ch
.text:0040C637                 pop     ebx
.text:0040C638                 pop     esi
.text:0040C639                 pop     edi
.text:0040C63A                 pop     ebp
.text:0040C63B                 retn
.text:0040C63B ; ---------------------------------------------------------------------------
.text:0040C63C                 align 10h
.text:0040C640
.text:0040C640 loc_40C640:                             ; CODE XREF: sub_40C5D0+33↑j
.text:0040C640                 test    eax, eax
.text:0040C642                 jnz     short loc_40C64F
.text:0040C644                 mov     eax, 1
.text:0040C649                 xor     edx, edx
.text:0040C64B                 div     esi
.text:0040C64D                 mov     esi, eax
.text:0040C64F
.text:0040C64F loc_40C64F:                             ; CODE XREF: sub_40C5D0+72↑j
.text:0040C64F                 mov     eax, edi
.text:0040C651                 mov     edx, [ebp+var_24]
.text:0040C654                 div     esi
.text:0040C656                 mov     eax, [ebp+var_28]
.text:0040C659                 div     esi
.text:0040C65B                 jmp     short loc_40C60B
.text:0040C65B ; ---------------------------------------------------------------------------
.text:0040C65D                 align 10h
.text:0040C660
.text:0040C660 loc_40C660:                             ; CODE XREF: sub_40C5D0+2F↑j
.text:0040C660                 cmp     [ebp+var_24], ebx
.text:0040C663                 jbe     short loc_40C680
.text:0040C665                 mov     [ebp+var_20], ecx
.text:0040C668
.text:0040C668 loc_40C668:                             ; CODE XREF: sub_40C5D0+15B↓j
.text:0040C668                 mov     [ebp+var_1C], edi
.text:0040C66B                 mov     eax, [ebp+var_20]
.text:0040C66E                 mov     edx, [ebp+var_1C]
.text:0040C671                 mov     [ebp+var_18], eax
.text:0040C674                 mov     [ebp+var_14], edx
.text:0040C677                 jmp     short loc_40C62E
.text:0040C677 ; ---------------------------------------------------------------------------
.text:0040C679                 align 10h
.text:0040C680
.text:0040C680 loc_40C680:                             ; CODE XREF: sub_40C5D0+93↑j
.text:0040C680                 bsr     eax, [ebp+var_24]
.text:0040C684                 mov     ebx, eax
.text:0040C686                 xor     ebx, 1Fh
.text:0040C689                 jnz     short loc_40C6B0
.text:0040C68B                 cmp     edi, [ebp+var_24]
.text:0040C68E                 ja      short loc_40C695
.text:0040C690                 cmp     [ebp+var_28], esi
.text:0040C693                 jb      short loc_40C6A0
.text:0040C695
.text:0040C695 loc_40C695:                             ; CODE XREF: sub_40C5D0+BE↑j
.text:0040C695                 mov     edx, [ebp+var_28]
.text:0040C698                 sub     edx, esi
.text:0040C69A                 sbb     edi, [ebp+var_24]
.text:0040C69D                 mov     [ebp+var_28], edx
.text:0040C6A0
.text:0040C6A0 loc_40C6A0:                             ; CODE XREF: sub_40C5D0+C3↑j
.text:0040C6A0                 lea     ecx, [ebp+var_18]
.text:0040C6A3                 test    ecx, ecx
.text:0040C6A5                 jz      short loc_40C62E
.text:0040C6A7                 mov     [ebp+var_1C], edi
.text:0040C6AA                 jmp     loc_40C61C
.text:0040C6AA ; ---------------------------------------------------------------------------
.text:0040C6AF                 align 10h
.text:0040C6B0
.text:0040C6B0 loc_40C6B0:                             ; CODE XREF: sub_40C5D0+B9↑j
.text:0040C6B0                 mov     edx, [ebp+var_24]
.text:0040C6B3                 mov     eax, 20h ; ' '
.text:0040C6B8                 mov     cl, bl
.text:0040C6BA                 sub     eax, ebx
.text:0040C6BC                 mov     [ebp+var_2C], eax
.text:0040C6BF                 shl     edx, cl
.text:0040C6C1                 mov     eax, esi
.text:0040C6C3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040C6C7                 shr     eax, cl
.text:0040C6C9                 mov     cl, bl
.text:0040C6CB                 shl     esi, cl
.text:0040C6CD                 or      edx, eax
.text:0040C6CF                 mov     eax, [ebp+var_28]
.text:0040C6D2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040C6D6                 mov     [ebp+var_24], edx
.text:0040C6D9                 mov     edx, edi
.text:0040C6DB                 shr     edx, cl
.text:0040C6DD                 mov     cl, bl
.text:0040C6DF                 shl     edi, cl
.text:0040C6E1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040C6E5                 shr     eax, cl
.text:0040C6E7                 or      edi, eax
.text:0040C6E9                 mov     eax, edi
.text:0040C6EB                 mov     cl, bl
.text:0040C6ED                 div     [ebp+var_24]
.text:0040C6F0                 shl     [ebp+var_28], cl
.text:0040C6F3                 mov     edi, edx
.text:0040C6F5                 mul     esi
.text:0040C6F7                 mov     [ebp+var_34], eax
.text:0040C6FA                 cmp     edx, edi
.text:0040C6FC                 ja      short loc_40C738
.text:0040C6FE                 cmp     edx, edi
.text:0040C700                 jz      short loc_40C730
.text:0040C702
.text:0040C702 loc_40C702:                             ; CODE XREF: sub_40C5D0+166↓j
.text:0040C702                                         ; sub_40C5D0+173↓j
.text:0040C702                 lea     eax, [ebp+var_18]
.text:0040C705                 test    eax, eax
.text:0040C707                 jz      loc_40C62E
.text:0040C70D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040C711                 mov     eax, [ebp+var_28]
.text:0040C714                 sub     eax, [ebp+var_34]
.text:0040C717                 sbb     edi, edx
.text:0040C719                 mov     [ebp+var_28], eax
.text:0040C71C                 mov     edx, edi
.text:0040C71E                 shl     edx, cl
.text:0040C720                 mov     cl, bl
.text:0040C722                 shr     eax, cl
.text:0040C724                 or      edx, eax
.text:0040C726                 mov     [ebp+var_20], edx
.text:0040C729                 shr     edi, cl
.text:0040C72B                 jmp     loc_40C668
.text:0040C730 ; ---------------------------------------------------------------------------
.text:0040C730
.text:0040C730 loc_40C730:                             ; CODE XREF: sub_40C5D0+130↑j
.text:0040C730                 mov     eax, [ebp+var_28]
.text:0040C733                 cmp     [ebp+var_34], eax
.text:0040C736                 jbe     short loc_40C702
.text:0040C738
.text:0040C738 loc_40C738:                             ; CODE XREF: sub_40C5D0+12C↑j
.text:0040C738                 mov     ecx, [ebp+var_34]
.text:0040C73B                 sub     ecx, esi
.text:0040C73D                 sbb     edx, [ebp+var_24]
.text:0040C740                 mov     [ebp+var_34], ecx
.text:0040C743                 jmp     short loc_40C702
.text:0040C743 sub_40C5D0      endp
.text:0040C743
.text:0040C743 ; ---------------------------------------------------------------------------
.text:0040C745                 align 10h
.text:0040C750
.text:0040C750 ; =============== S U B R O U T I N E =======================================
.text:0040C750
.text:0040C750 ; Attributes: thunk
.text:0040C750
.text:0040C750 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040C750 _stricmp        proc near               ; CODE XREF: sub_405880+46F↑p
.text:0040C750                                         ; sub_4074E0+2E↑p ...
.text:0040C750
.text:0040C750 String1         = dword ptr  4
.text:0040C750 String2         = dword ptr  8
.text:0040C750
.text:0040C750                 jmp     ds:__imp__stricmp
.text:0040C750 _stricmp        endp
.text:0040C750
.text:0040C750 ; ---------------------------------------------------------------------------
.text:0040C756                 align 10h
.text:0040C760
.text:0040C760 ; =============== S U B R O U T I N E =======================================
.text:0040C760
.text:0040C760 ; Attributes: thunk
.text:0040C760
.text:0040C760 ; char *__cdecl strdup(const char *String)
.text:0040C760 _strdup         proc near               ; CODE XREF: sub_407110+101↑p
.text:0040C760                                         ; .text:0040737A↑p ...
.text:0040C760
.text:0040C760 String          = dword ptr  4
.text:0040C760
.text:0040C760                 jmp     ds:__imp__strdup
.text:0040C760 _strdup         endp
.text:0040C760
.text:0040C760 ; ---------------------------------------------------------------------------
.text:0040C766                 align 10h
.text:0040C770
.text:0040C770 ; =============== S U B R O U T I N E =======================================
.text:0040C770
.text:0040C770 ; Attributes: thunk
.text:0040C770
.text:0040C770 ; int __cdecl getpid()
.text:0040C770 _getpid         proc near               ; CODE XREF: sub_40A4B0+84↑p
.text:0040C770                 jmp     ds:__imp__getpid
.text:0040C770 _getpid         endp
.text:0040C770
.text:0040C770 ; ---------------------------------------------------------------------------
.text:0040C776                 align 10h
.text:0040C780
.text:0040C780 ; =============== S U B R O U T I N E =======================================
.text:0040C780
.text:0040C780 ; Attributes: thunk
.text:0040C780
.text:0040C780 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040C780 _chmod          proc near               ; CODE XREF: sub_40A8E0+41↑j
.text:0040C780
.text:0040C780 FileName        = dword ptr  4
.text:0040C780 AccessMode      = dword ptr  8
.text:0040C780
.text:0040C780                 jmp     ds:__imp__chmod
.text:0040C780 _chmod          endp
.text:0040C780
.text:0040C780 ; ---------------------------------------------------------------------------
.text:0040C786                 align 10h
.text:0040C790                 jmp     ds:__set_app_type
.text:0040C790 ; ---------------------------------------------------------------------------
.text:0040C796                 align 10h
.text:0040C7A0
.text:0040C7A0 ; =============== S U B R O U T I N E =======================================
.text:0040C7A0
.text:0040C7A0 ; Attributes: thunk
.text:0040C7A0
.text:0040C7A0 ; void __cdecl cexit()
.text:0040C7A0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040C7A0                 jmp     ds:__imp__cexit
.text:0040C7A0 _cexit          endp
.text:0040C7A0
.text:0040C7A0 ; ---------------------------------------------------------------------------
.text:0040C7A6                 align 10h
.text:0040C7B0
.text:0040C7B0 ; =============== S U B R O U T I N E =======================================
.text:0040C7B0
.text:0040C7B0 ; Attributes: thunk
.text:0040C7B0
.text:0040C7B0 ; char ***__cdecl _p__environ()
.text:0040C7B0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040C7B0                 jmp     ds:__imp___p__environ
.text:0040C7B0 __p__environ    endp
.text:0040C7B0
.text:0040C7B0 ; ---------------------------------------------------------------------------
.text:0040C7B6                 align 10h
.text:0040C7C0
.text:0040C7C0 ; =============== S U B R O U T I N E =======================================
.text:0040C7C0
.text:0040C7C0 ; Attributes: thunk
.text:0040C7C0
.text:0040C7C0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040C7C0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040C7C0                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040C7C0
.text:0040C7C0 Signal          = dword ptr  4
.text:0040C7C0 Function        = dword ptr  8
.text:0040C7C0
.text:0040C7C0                 jmp     ds:__imp_signal
.text:0040C7C0 signal          endp
.text:0040C7C0
.text:0040C7C0 ; ---------------------------------------------------------------------------
.text:0040C7C6                 align 10h
.text:0040C7D0
.text:0040C7D0 ; =============== S U B R O U T I N E =======================================
.text:0040C7D0
.text:0040C7D0 ; Attributes: thunk
.text:0040C7D0
.text:0040C7D0 ; int *__cdecl _p__fmode()
.text:0040C7D0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040C7D0                 jmp     ds:__imp___p__fmode
.text:0040C7D0 __p__fmode      endp
.text:0040C7D0
.text:0040C7D0 ; ---------------------------------------------------------------------------
.text:0040C7D6                 align 10h
.text:0040C7E0
.text:0040C7E0 ; =============== S U B R O U T I N E =======================================
.text:0040C7E0
.text:0040C7E0 ; Attributes: thunk
.text:0040C7E0
.text:0040C7E0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040C7E0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040C7E0                                         ; sub_401080+90↑p ...
.text:0040C7E0
.text:0040C7E0 FileHandle      = dword ptr  4
.text:0040C7E0 Mode            = dword ptr  8
.text:0040C7E0
.text:0040C7E0                 jmp     ds:__imp__setmode
.text:0040C7E0 _setmode        endp
.text:0040C7E0
.text:0040C7E0 ; ---------------------------------------------------------------------------
.text:0040C7E6                 align 10h
.text:0040C7F0
.text:0040C7F0 ; =============== S U B R O U T I N E =======================================
.text:0040C7F0
.text:0040C7F0 ; Attributes: thunk
.text:0040C7F0
.text:0040C7F0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040C7F0                 jmp     ds:__imp___getmainargs
.text:0040C7F0 __getmainargs   endp
.text:0040C7F0
.text:0040C7F0 ; ---------------------------------------------------------------------------
.text:0040C7F6                 align 10h
.text:0040C800
.text:0040C800 ; =============== S U B R O U T I N E =======================================
.text:0040C800
.text:0040C800 ; Attributes: thunk
.text:0040C800
.text:0040C800 ; int *__cdecl errno()
.text:0040C800 _errno          proc near               ; CODE XREF: sub_4018F0:loc_40195C↑p
.text:0040C800                                         ; sub_4018F0:loc_401ADF↑p ...
.text:0040C800                 jmp     ds:__imp__errno
.text:0040C800 _errno          endp
.text:0040C800
.text:0040C800 ; ---------------------------------------------------------------------------
.text:0040C806                 align 10h
.text:0040C810
.text:0040C810 ; =============== S U B R O U T I N E =======================================
.text:0040C810
.text:0040C810 ; Attributes: thunk
.text:0040C810
.text:0040C810 ; size_t __cdecl strlen(const char *Str)
.text:0040C810 strlen          proc near               ; CODE XREF: sub_4018F0+20↑p
.text:0040C810                                         ; sub_401ED0+8C3↑p ...
.text:0040C810
.text:0040C810 Str             = dword ptr  4
.text:0040C810
.text:0040C810                 jmp     ds:__imp_strlen
.text:0040C810 strlen          endp
.text:0040C810
.text:0040C810 ; ---------------------------------------------------------------------------
.text:0040C816                 align 10h
.text:0040C820
.text:0040C820 ; =============== S U B R O U T I N E =======================================
.text:0040C820
.text:0040C820 ; Attributes: thunk
.text:0040C820
.text:0040C820 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0040C820 strspn          proc near               ; CODE XREF: sub_4018F0+395↑p
.text:0040C820                                         ; .text:0040871A↑p ...
.text:0040C820
.text:0040C820 Str             = dword ptr  4
.text:0040C820 Control         = dword ptr  8
.text:0040C820
.text:0040C820                 jmp     ds:__imp_strspn
.text:0040C820 strspn          endp
.text:0040C820
.text:0040C820 ; ---------------------------------------------------------------------------
.text:0040C826                 align 10h
.text:0040C830
.text:0040C830 ; =============== S U B R O U T I N E =======================================
.text:0040C830
.text:0040C830 ; Attributes: thunk
.text:0040C830
.text:0040C830 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040C830 setlocale       proc near               ; CODE XREF: sub_401520+3C↑p
.text:0040C830
.text:0040C830 Category        = dword ptr  4
.text:0040C830 Locale          = dword ptr  8
.text:0040C830
.text:0040C830                 jmp     ds:__imp_setlocale
.text:0040C830 setlocale       endp
.text:0040C830
.text:0040C830 ; ---------------------------------------------------------------------------
.text:0040C836                 align 10h
.text:0040C840
.text:0040C840 ; =============== S U B R O U T I N E =======================================
.text:0040C840
.text:0040C840 ; Attributes: noreturn thunk
.text:0040C840
.text:0040C840 ; void __cdecl __noreturn exit(int Code)
.text:0040C840 exit            proc near               ; CODE XREF: sub_401520:loc_40160B↑p
.text:0040C840                                         ; .text:00401D7E↑p ...
.text:0040C840
.text:0040C840 Code            = dword ptr  4
.text:0040C840
.text:0040C840                 jmp     ds:__imp_exit
.text:0040C840 exit            endp
.text:0040C840
.text:0040C840 ; ---------------------------------------------------------------------------
.text:0040C846                 align 10h
.text:0040C850
.text:0040C850 ; =============== S U B R O U T I N E =======================================
.text:0040C850
.text:0040C850 ; Attributes: thunk
.text:0040C850
.text:0040C850 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040C850 fputs           proc near               ; CODE XREF: sub_401520+185↑p
.text:0040C850                                         ; sub_401520+1A7↑p ...
.text:0040C850
.text:0040C850 Buffer          = dword ptr  4
.text:0040C850 Stream          = dword ptr  8
.text:0040C850
.text:0040C850                 jmp     ds:__imp_fputs
.text:0040C850 fputs           endp
.text:0040C850
.text:0040C850 ; ---------------------------------------------------------------------------
.text:0040C856                 align 10h
.text:0040C860
.text:0040C860 ; =============== S U B R O U T I N E =======================================
.text:0040C860
.text:0040C860 ; Attributes: thunk
.text:0040C860
.text:0040C860 ; int printf(const char *const Format, ...)
.text:0040C860 printf          proc near               ; CODE XREF: sub_401520+163↑p
.text:0040C860                                         ; sub_401520+1E6↑p ...
.text:0040C860
.text:0040C860 Format          = dword ptr  4
.text:0040C860
.text:0040C860                 jmp     ds:__imp_printf
.text:0040C860 printf          endp
.text:0040C860
.text:0040C860 ; ---------------------------------------------------------------------------
.text:0040C866                 align 10h
.text:0040C870
.text:0040C870 ; =============== S U B R O U T I N E =======================================
.text:0040C870
.text:0040C870 ; Attributes: thunk
.text:0040C870
.text:0040C870 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040C870 fprintf         proc near               ; CODE XREF: sub_401520+DF↑p
.text:0040C870                                         ; .text:00401D76↑p ...
.text:0040C870
.text:0040C870 Stream          = dword ptr  4
.text:0040C870 Format          = dword ptr  8
.text:0040C870
.text:0040C870                 jmp     ds:__imp_fprintf
.text:0040C870 fprintf         endp
.text:0040C870
.text:0040C870 ; ---------------------------------------------------------------------------
.text:0040C876                 align 10h
.text:0040C880
.text:0040C880 ; =============== S U B R O U T I N E =======================================
.text:0040C880
.text:0040C880 ; Attributes: thunk
.text:0040C880
.text:0040C880 ; void __cdecl free(void *Block)
.text:0040C880 free            proc near               ; CODE XREF: sub_403010+112↑p
.text:0040C880                                         ; sub_405880+24E↑p ...
.text:0040C880
.text:0040C880 Block           = dword ptr  4
.text:0040C880
.text:0040C880                 jmp     ds:__imp_free
.text:0040C880 free            endp
.text:0040C880
.text:0040C880 ; ---------------------------------------------------------------------------
.text:0040C886                 align 10h
.text:0040C890
.text:0040C890 ; =============== S U B R O U T I N E =======================================
.text:0040C890
.text:0040C890 ; Attributes: noreturn thunk
.text:0040C890
.text:0040C890 ; void __cdecl __noreturn abort()
.text:0040C890 abort           proc near               ; CODE XREF: sub_403010:loc_4031CA↑p
.text:0040C890                                         ; sub_404550:loc_4045EC↑p ...
.text:0040C890                 jmp     ds:__imp_abort
.text:0040C890 abort           endp
.text:0040C890
.text:0040C890 ; ---------------------------------------------------------------------------
.text:0040C896                 align 10h
.text:0040C8A0
.text:0040C8A0 ; =============== S U B R O U T I N E =======================================
.text:0040C8A0
.text:0040C8A0 ; Attributes: thunk
.text:0040C8A0
.text:0040C8A0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040C8A0 iswctype        proc near               ; CODE XREF: sub_401ED0+78B↑p
.text:0040C8A0
.text:0040C8A0 C               = word ptr  4
.text:0040C8A0 Type            = word ptr  8
.text:0040C8A0
.text:0040C8A0                 jmp     ds:__imp_iswctype
.text:0040C8A0 iswctype        endp
.text:0040C8A0
.text:0040C8A0 ; ---------------------------------------------------------------------------
.text:0040C8A6                 align 10h
.text:0040C8B0
.text:0040C8B0 ; =============== S U B R O U T I N E =======================================
.text:0040C8B0
.text:0040C8B0 ; Attributes: thunk
.text:0040C8B0
.text:0040C8B0 ; int __cdecl isctype(int C, int Type)
.text:0040C8B0 _isctype        proc near               ; CODE XREF: sub_401ED0+610↑p
.text:0040C8B0
.text:0040C8B0 C               = dword ptr  4
.text:0040C8B0 Type            = dword ptr  8
.text:0040C8B0
.text:0040C8B0                 jmp     ds:__imp__isctype
.text:0040C8B0 _isctype        endp
.text:0040C8B0
.text:0040C8B0 ; ---------------------------------------------------------------------------
.text:0040C8B6                 align 10h
.text:0040C8C0
.text:0040C8C0 ; =============== S U B R O U T I N E =======================================
.text:0040C8C0
.text:0040C8C0 ; Attributes: thunk
.text:0040C8C0
.text:0040C8C0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040C8C0 strncmp         proc near               ; CODE XREF: sub_403360+30F↑p
.text:0040C8C0                                         ; sub_403360+769↑p
.text:0040C8C0
.text:0040C8C0 Str1            = dword ptr  4
.text:0040C8C0 Str2            = dword ptr  8
.text:0040C8C0 MaxCount        = dword ptr  0Ch
.text:0040C8C0
.text:0040C8C0                 jmp     ds:__imp_strncmp
.text:0040C8C0 strncmp         endp
.text:0040C8C0
.text:0040C8C0 ; ---------------------------------------------------------------------------
.text:0040C8C6                 align 10h
.text:0040C8D0
.text:0040C8D0 ; =============== S U B R O U T I N E =======================================
.text:0040C8D0
.text:0040C8D0 ; Attributes: thunk
.text:0040C8D0
.text:0040C8D0 ; char *__cdecl getenv(const char *VarName)
.text:0040C8D0 getenv          proc near               ; CODE XREF: sub_403360+C27↑p
.text:0040C8D0                                         ; sub_405880+3EE↑p ...
.text:0040C8D0
.text:0040C8D0 VarName         = dword ptr  4
.text:0040C8D0
.text:0040C8D0                 jmp     ds:__imp_getenv
.text:0040C8D0 getenv          endp
.text:0040C8D0
.text:0040C8D0 ; ---------------------------------------------------------------------------
.text:0040C8D6                 align 10h
.text:0040C8E0
.text:0040C8E0 ; =============== S U B R O U T I N E =======================================
.text:0040C8E0
.text:0040C8E0 ; Attributes: thunk
.text:0040C8E0
.text:0040C8E0 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040C8E0 strchr          proc near               ; CODE XREF: sub_403360+539↑p
.text:0040C8E0                                         ; sub_403360+60A↑p ...
.text:0040C8E0
.text:0040C8E0 Str             = dword ptr  4
.text:0040C8E0 Val             = dword ptr  8
.text:0040C8E0
.text:0040C8E0                 jmp     ds:__imp_strchr
.text:0040C8E0 strchr          endp
.text:0040C8E0
.text:0040C8E0 ; ---------------------------------------------------------------------------
.text:0040C8E6                 align 10h
.text:0040C8F0
.text:0040C8F0 ; =============== S U B R O U T I N E =======================================
.text:0040C8F0
.text:0040C8F0 ; Attributes: thunk
.text:0040C8F0
.text:0040C8F0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040C8F0 vfprintf        proc near               ; CODE XREF: sub_404550+C1↑p
.text:0040C8F0                                         ; sub_404D30+49↑p ...
.text:0040C8F0
.text:0040C8F0 Stream          = dword ptr  4
.text:0040C8F0 Format          = dword ptr  8
.text:0040C8F0 ArgList         = dword ptr  0Ch
.text:0040C8F0
.text:0040C8F0                 jmp     ds:__imp_vfprintf
.text:0040C8F0 vfprintf        endp
.text:0040C8F0
.text:0040C8F0 ; ---------------------------------------------------------------------------
.text:0040C8F6                 align 10h
.text:0040C900
.text:0040C900 ; =============== S U B R O U T I N E =======================================
.text:0040C900
.text:0040C900 ; Attributes: thunk
.text:0040C900
.text:0040C900 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040C900 _flsbuf         proc near               ; CODE XREF: sub_404550+128↑p
.text:0040C900                                         ; sub_404550+13A↑p ...
.text:0040C900
.text:0040C900 File            = dword ptr  8
.text:0040C900
.text:0040C900                 jmp     ds:__imp__flsbuf
.text:0040C900 _flsbuf         endp
.text:0040C900
.text:0040C900 ; ---------------------------------------------------------------------------
.text:0040C906                 align 10h
.text:0040C910
.text:0040C910 ; =============== S U B R O U T I N E =======================================
.text:0040C910
.text:0040C910 ; Attributes: thunk
.text:0040C910
.text:0040C910 ; int __cdecl fclose(FILE *Stream)
.text:0040C910 fclose          proc near               ; CODE XREF: sub_4048D0+27↑p
.text:0040C910                                         ; .text:0040928E↑p
.text:0040C910
.text:0040C910 Stream          = dword ptr  4
.text:0040C910
.text:0040C910                 jmp     ds:__imp_fclose
.text:0040C910 fclose          endp
.text:0040C910
.text:0040C910 ; ---------------------------------------------------------------------------
.text:0040C916                 align 10h
.text:0040C920
.text:0040C920 ; =============== S U B R O U T I N E =======================================
.text:0040C920
.text:0040C920 ; Attributes: thunk
.text:0040C920
.text:0040C920 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040C920 memcpy          proc near               ; CODE XREF: .text:00404B98↑p
.text:0040C920                                         ; .text:00404BE1↑p
.text:0040C920
.text:0040C920 Src             = dword ptr  8
.text:0040C920 Size            = dword ptr  0Ch
.text:0040C920
.text:0040C920                 jmp     ds:__imp_memcpy
.text:0040C920 memcpy          endp
.text:0040C920
.text:0040C920 ; ---------------------------------------------------------------------------
.text:0040C926                 align 10h
.text:0040C930
.text:0040C930 ; =============== S U B R O U T I N E =======================================
.text:0040C930
.text:0040C930 ; Attributes: thunk
.text:0040C930
.text:0040C930 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040C930 memset          proc near               ; CODE XREF: .text:00404B16↑p
.text:0040C930
.text:0040C930 Val             = dword ptr  8
.text:0040C930 Size            = dword ptr  0Ch
.text:0040C930
.text:0040C930                 jmp     ds:__imp_memset
.text:0040C930 memset          endp
.text:0040C930
.text:0040C930 ; ---------------------------------------------------------------------------
.text:0040C936                 align 10h
.text:0040C940
.text:0040C940 ; =============== S U B R O U T I N E =======================================
.text:0040C940
.text:0040C940 ; Attributes: thunk
.text:0040C940
.text:0040C940 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040C940 calloc          proc near               ; CODE XREF: .text:00404B53↑p
.text:0040C940                                         ; sub_407110+AC↑p
.text:0040C940
.text:0040C940 Count           = dword ptr  4
.text:0040C940 Size            = dword ptr  8
.text:0040C940
.text:0040C940                 jmp     ds:__imp_calloc
.text:0040C940 calloc          endp
.text:0040C940
.text:0040C940 ; ---------------------------------------------------------------------------
.text:0040C946                 align 10h
.text:0040C950
.text:0040C950 ; =============== S U B R O U T I N E =======================================
.text:0040C950
.text:0040C950 ; Attributes: thunk
.text:0040C950
.text:0040C950 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040C950 realloc         proc near               ; CODE XREF: .text:00404A50↑p
.text:0040C950                                         ; sub_404A80+16↑p ...
.text:0040C950
.text:0040C950 Block           = dword ptr  4
.text:0040C950 Size            = dword ptr  8
.text:0040C950
.text:0040C950                 jmp     ds:__imp_realloc
.text:0040C950 realloc         endp
.text:0040C950
.text:0040C950 ; ---------------------------------------------------------------------------
.text:0040C956                 align 10h
.text:0040C960
.text:0040C960 ; =============== S U B R O U T I N E =======================================
.text:0040C960
.text:0040C960 ; Attributes: thunk
.text:0040C960
.text:0040C960 ; void *__cdecl malloc(size_t Size)
.text:0040C960 malloc          proc near               ; CODE XREF: .text:004049D4↑p
.text:0040C960                                         ; sub_4049F0+E↑p ...
.text:0040C960
.text:0040C960 Size            = dword ptr  4
.text:0040C960
.text:0040C960                 jmp     ds:__imp_malloc
.text:0040C960 malloc          endp
.text:0040C960
.text:0040C960 ; ---------------------------------------------------------------------------
.text:0040C966                 align 10h
.text:0040C970
.text:0040C970 ; =============== S U B R O U T I N E =======================================
.text:0040C970
.text:0040C970 ; Attributes: thunk
.text:0040C970
.text:0040C970 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040C970 strcmp          proc near               ; CODE XREF: sub_404E34+180↑p
.text:0040C970                                         ; .text:0040868B↑p
.text:0040C970
.text:0040C970 Str1            = dword ptr  4
.text:0040C970 Str2            = dword ptr  8
.text:0040C970
.text:0040C970                 jmp     ds:__imp_strcmp
.text:0040C970 strcmp          endp
.text:0040C970
.text:0040C970 ; ---------------------------------------------------------------------------
.text:0040C976                 align 10h
.text:0040C980
.text:0040C980 ; =============== S U B R O U T I N E =======================================
.text:0040C980
.text:0040C980 ; Attributes: thunk
.text:0040C980
.text:0040C980 ; int __cdecl fflush(FILE *Stream)
.text:0040C980 fflush          proc near               ; CODE XREF: sub_404D30+19↑p
.text:0040C980                                         ; sub_404D30+81↑p ...
.text:0040C980
.text:0040C980 Stream          = dword ptr  4
.text:0040C980
.text:0040C980                 jmp     ds:__imp_fflush
.text:0040C980 fflush          endp
.text:0040C980
.text:0040C980 ; ---------------------------------------------------------------------------
.text:0040C986                 align 10h
.text:0040C990
.text:0040C990 ; =============== S U B R O U T I N E =======================================
.text:0040C990
.text:0040C990 ; Attributes: thunk
.text:0040C990
.text:0040C990 ; char *__cdecl strerror(int ErrorMessage)
.text:0040C990 strerror        proc near               ; CODE XREF: sub_404D30+A5↑p
.text:0040C990                                         ; sub_404E34+10F↑p
.text:0040C990
.text:0040C990 ErrorMessage    = dword ptr  4
.text:0040C990
.text:0040C990                 jmp     ds:__imp_strerror
.text:0040C990 strerror        endp
.text:0040C990
.text:0040C990 ; ---------------------------------------------------------------------------
.text:0040C996                 align 10h
.text:0040C9A0
.text:0040C9A0 ; =============== S U B R O U T I N E =======================================
.text:0040C9A0
.text:0040C9A0 ; Attributes: thunk
.text:0040C9A0
.text:0040C9A0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0040C9A0 strcat          proc near               ; CODE XREF: sub_405230+98↑p
.text:0040C9A0                                         ; .text:00409753↑p ...
.text:0040C9A0
.text:0040C9A0 Destination     = dword ptr  4
.text:0040C9A0 Source          = dword ptr  8
.text:0040C9A0
.text:0040C9A0                 jmp     ds:__imp_strcat
.text:0040C9A0 strcat          endp
.text:0040C9A0
.text:0040C9A0 ; ---------------------------------------------------------------------------
.text:0040C9A6                 align 10h
.text:0040C9B0
.text:0040C9B0 ; =============== S U B R O U T I N E =======================================
.text:0040C9B0
.text:0040C9B0 ; Attributes: thunk
.text:0040C9B0
.text:0040C9B0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0040C9B0 strcpy          proc near               ; CODE XREF: sub_405230+73↑p
.text:0040C9B0                                         ; sub_406F00+BC↑p ...
.text:0040C9B0
.text:0040C9B0 Destination     = dword ptr  4
.text:0040C9B0 Source          = dword ptr  8
.text:0040C9B0
.text:0040C9B0                 jmp     ds:__imp_strcpy
.text:0040C9B0 strcpy          endp
.text:0040C9B0
.text:0040C9B0 ; ---------------------------------------------------------------------------
.text:0040C9B6                 align 10h
.text:0040C9C0
.text:0040C9C0 ; =============== S U B R O U T I N E =======================================
.text:0040C9C0
.text:0040C9C0 ; Attributes: thunk
.text:0040C9C0
.text:0040C9C0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0040C9C0 strstr          proc near               ; CODE XREF: sub_405880+3BF↑p
.text:0040C9C0                                         ; sub_405880+3DC↑p ...
.text:0040C9C0
.text:0040C9C0 Str             = dword ptr  4
.text:0040C9C0 SubStr          = dword ptr  8
.text:0040C9C0
.text:0040C9C0                 jmp     ds:__imp_strstr
.text:0040C9C0 strstr          endp
.text:0040C9C0
.text:0040C9C0 ; ---------------------------------------------------------------------------
.text:0040C9C6                 align 10h
.text:0040C9D0
.text:0040C9D0 ; =============== S U B R O U T I N E =======================================
.text:0040C9D0
.text:0040C9D0 ; Attributes: thunk
.text:0040C9D0
.text:0040C9D0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0040C9D0 strrchr         proc near               ; CODE XREF: sub_405880+CB↑p
.text:0040C9D0                                         ; sub_405880+3A7↑p ...
.text:0040C9D0
.text:0040C9D0 Str             = dword ptr  4
.text:0040C9D0
.text:0040C9D0                 jmp     ds:__imp_strrchr
.text:0040C9D0 strrchr         endp
.text:0040C9D0
.text:0040C9D0 ; ---------------------------------------------------------------------------
.text:0040C9D6                 align 10h
.text:0040C9E0
.text:0040C9E0 ; =============== S U B R O U T I N E =======================================
.text:0040C9E0
.text:0040C9E0 ; Attributes: thunk
.text:0040C9E0
.text:0040C9E0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040C9E0 strncpy         proc near               ; CODE XREF: sub_407110+BE↑p
.text:0040C9E0                                         ; .text:0040798A↑p ...
.text:0040C9E0
.text:0040C9E0 Destination     = dword ptr  4
.text:0040C9E0 Source          = dword ptr  8
.text:0040C9E0 Count           = dword ptr  0Ch
.text:0040C9E0
.text:0040C9E0                 jmp     ds:__imp_strncpy
.text:0040C9E0 strncpy         endp
.text:0040C9E0
.text:0040C9E0 ; ---------------------------------------------------------------------------
.text:0040C9E6                 align 10h
.text:0040C9F0
.text:0040C9F0 ; =============== S U B R O U T I N E =======================================
.text:0040C9F0
.text:0040C9F0 ; Attributes: thunk
.text:0040C9F0
.text:0040C9F0 ; int __cdecl toupper(int C)
.text:0040C9F0 toupper         proc near               ; CODE XREF: sub_407110+10E↑p
.text:0040C9F0
.text:0040C9F0 C               = dword ptr  4
.text:0040C9F0
.text:0040C9F0                 jmp     ds:__imp_toupper
.text:0040C9F0 toupper         endp
.text:0040C9F0
.text:0040C9F0 ; ---------------------------------------------------------------------------
.text:0040C9F6                 align 10h
.text:0040CA00
.text:0040CA00 ; =============== S U B R O U T I N E =======================================
.text:0040CA00
.text:0040CA00 ; Attributes: thunk
.text:0040CA00
.text:0040CA00 ; int __cdecl isalpha(int C)
.text:0040CA00 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0040CA00
.text:0040CA00 C               = dword ptr  4
.text:0040CA00
.text:0040CA00                 jmp     ds:__imp_isalpha
.text:0040CA00 isalpha         endp
.text:0040CA00
.text:0040CA00 ; ---------------------------------------------------------------------------
.text:0040CA06                 align 10h
.text:0040CA10
.text:0040CA10 ; =============== S U B R O U T I N E =======================================
.text:0040CA10
.text:0040CA10 ; Attributes: thunk
.text:0040CA10
.text:0040CA10 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0040CA10 _stricmp_0      proc near               ; CODE XREF: .text:004084C4↑p
.text:0040CA10
.text:0040CA10 String1         = dword ptr  4
.text:0040CA10 String2         = dword ptr  8
.text:0040CA10
.text:0040CA10                 jmp     ds:__imp__stricmp_0
.text:0040CA10 _stricmp_0      endp
.text:0040CA10
.text:0040CA10 ; ---------------------------------------------------------------------------
.text:0040CA16                 align 10h
.text:0040CA20
.text:0040CA20 ; =============== S U B R O U T I N E =======================================
.text:0040CA20
.text:0040CA20 ; Attributes: thunk
.text:0040CA20
.text:0040CA20 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0040CA20 sprintf         proc near               ; CODE XREF: ___addmntentstr+11F↑p
.text:0040CA20                                         ; .text:0040965A↑p ...
.text:0040CA20
.text:0040CA20 Buffer          = dword ptr  4
.text:0040CA20 Format          = dword ptr  8
.text:0040CA20
.text:0040CA20                 jmp     ds:__imp_sprintf
.text:0040CA20 sprintf         endp
.text:0040CA20
.text:0040CA20 ; ---------------------------------------------------------------------------
.text:0040CA26                 align 10h
.text:0040CA30
.text:0040CA30 ; =============== S U B R O U T I N E =======================================
.text:0040CA30
.text:0040CA30 ; Attributes: thunk
.text:0040CA30
.text:0040CA30 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040CA30 sscanf          proc near               ; CODE XREF: .text:004088CE↑p
.text:0040CA30
.text:0040CA30 Buffer          = dword ptr  4
.text:0040CA30 Format          = dword ptr  8
.text:0040CA30
.text:0040CA30                 jmp     ds:__imp_sscanf
.text:0040CA30 sscanf          endp
.text:0040CA30
.text:0040CA30 ; ---------------------------------------------------------------------------
.text:0040CA36                 align 10h
.text:0040CA40
.text:0040CA40 ; =============== S U B R O U T I N E =======================================
.text:0040CA40
.text:0040CA40 ; Attributes: thunk
.text:0040CA40
.text:0040CA40 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0040CA40 fopen           proc near               ; CODE XREF: sub_4091CF+26↑p
.text:0040CA40                                         ; sub_4091CF+99↑p
.text:0040CA40
.text:0040CA40 FileName        = dword ptr  4
.text:0040CA40 Mode            = dword ptr  8
.text:0040CA40
.text:0040CA40                 jmp     ds:__imp_fopen
.text:0040CA40 fopen           endp
.text:0040CA40
.text:0040CA40 ; ---------------------------------------------------------------------------
.text:0040CA46                 align 10h
.text:0040CA50
.text:0040CA50 ; =============== S U B R O U T I N E =======================================
.text:0040CA50
.text:0040CA50 ; Attributes: thunk
.text:0040CA50
.text:0040CA50 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040CA50 _get_osfhandle  proc near               ; CODE XREF: sub_409380+3A↑p
.text:0040CA50                                         ; sub_409F60+15↑p
.text:0040CA50
.text:0040CA50 FileHandle      = dword ptr  4
.text:0040CA50
.text:0040CA50                 jmp     ds:__imp__get_osfhandle
.text:0040CA50 _get_osfhandle  endp
.text:0040CA50
.text:0040CA50 ; ---------------------------------------------------------------------------
.text:0040CA56                 align 10h
.text:0040CA60
.text:0040CA60 ; =============== S U B R O U T I N E =======================================
.text:0040CA60
.text:0040CA60 ; Attributes: thunk
.text:0040CA60
.text:0040CA60 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040CA60 _filelengthi64  proc near               ; CODE XREF: sub_409F60+1F↑p
.text:0040CA60
.text:0040CA60 FileHandle      = dword ptr  4
.text:0040CA60
.text:0040CA60                 jmp     ds:__imp__filelengthi64
.text:0040CA60 _filelengthi64  endp
.text:0040CA60
.text:0040CA60 ; ---------------------------------------------------------------------------
.text:0040CA66                 align 10h
.text:0040CA70
.text:0040CA70 ; =============== S U B R O U T I N E =======================================
.text:0040CA70
.text:0040CA70 ; Attributes: thunk
.text:0040CA70
.text:0040CA70 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0040CA70 strpbrk         proc near               ; CODE XREF: sub_409FC0+87↑p
.text:0040CA70
.text:0040CA70 Str             = dword ptr  4
.text:0040CA70 Control         = dword ptr  8
.text:0040CA70
.text:0040CA70                 jmp     ds:__imp_strpbrk
.text:0040CA70 strpbrk         endp
.text:0040CA70
.text:0040CA70 ; ---------------------------------------------------------------------------
.text:0040CA76                 align 10h
.text:0040CA80
.text:0040CA80 ; =============== S U B R O U T I N E =======================================
.text:0040CA80
.text:0040CA80 ; Attributes: thunk
.text:0040CA80
.text:0040CA80 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0040CA80 _fdopen         proc near               ; CODE XREF: sub_40A060+69↑p
.text:0040CA80
.text:0040CA80 FileHandle      = dword ptr  4
.text:0040CA80 Format          = dword ptr  8
.text:0040CA80
.text:0040CA80                 jmp     ds:__imp__fdopen
.text:0040CA80 _fdopen         endp
.text:0040CA80
.text:0040CA80 ; ---------------------------------------------------------------------------
.text:0040CA86                 align 10h
.text:0040CA90
.text:0040CA90 ; =============== S U B R O U T I N E =======================================
.text:0040CA90
.text:0040CA90 ; Attributes: thunk
.text:0040CA90
.text:0040CA90 ; int __cdecl close(int FileHandle)
.text:0040CA90 _close          proc near               ; CODE XREF: sub_40A060+90↑p
.text:0040CA90
.text:0040CA90 FileHandle      = dword ptr  4
.text:0040CA90
.text:0040CA90                 jmp     ds:__imp__close
.text:0040CA90 _close          endp
.text:0040CA90
.text:0040CA90 ; ---------------------------------------------------------------------------
.text:0040CA96                 align 10h
.text:0040CAA0
.text:0040CAA0 ; =============== S U B R O U T I N E =======================================
.text:0040CAA0
.text:0040CAA0 ; Attributes: thunk
.text:0040CAA0
.text:0040CAA0 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040CAA0 _open           proc near               ; CODE XREF: sub_40A4B0:loc_40A840↑p
.text:0040CAA0
.text:0040CAA0 FileName        = dword ptr  4
.text:0040CAA0 OpenFlag        = dword ptr  8
.text:0040CAA0
.text:0040CAA0                 jmp     ds:__imp__open
.text:0040CAA0 _open           endp
.text:0040CAA0
.text:0040CAA0 ; ---------------------------------------------------------------------------
.text:0040CAA6                 align 10h
.text:0040CAB0
.text:0040CAB0 ; =============== S U B R O U T I N E =======================================
.text:0040CAB0
.text:0040CAB0 ; Attributes: noreturn thunk
.text:0040CAB0
.text:0040CAB0 _assert         proc near               ; CODE XREF: sub_40A4B0+414↑p
.text:0040CAB0                 jmp     ds:__imp__assert
.text:0040CAB0 _assert         endp
.text:0040CAB0
.text:0040CAB0 ; ---------------------------------------------------------------------------
.text:0040CAB6                 align 10h
.text:0040CAC0
.text:0040CAC0 ; =============== S U B R O U T I N E =======================================
.text:0040CAC0
.text:0040CAC0 ; Attributes: thunk
.text:0040CAC0
.text:0040CAC0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040CAC0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040CAC0
.text:0040CAC0 lpTopLevelExceptionFilter= dword ptr  4
.text:0040CAC0
.text:0040CAC0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040CAC0 SetUnhandledExceptionFilter endp
.text:0040CAC0
.text:0040CAC0 ; ---------------------------------------------------------------------------
.text:0040CAC6                 align 10h
.text:0040CAD0
.text:0040CAD0 ; =============== S U B R O U T I N E =======================================
.text:0040CAD0
.text:0040CAD0 ; Attributes: noreturn thunk
.text:0040CAD0
.text:0040CAD0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040CAD0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040CAD0
.text:0040CAD0 uExitCode       = dword ptr  4
.text:0040CAD0
.text:0040CAD0                 jmp     ds:__imp_ExitProcess
.text:0040CAD0 ExitProcess     endp
.text:0040CAD0
.text:0040CAD0 ; ---------------------------------------------------------------------------
.text:0040CAD6                 align 10h
.text:0040CAE0
.text:0040CAE0 ; =============== S U B R O U T I N E =======================================
.text:0040CAE0
.text:0040CAE0 ; Attributes: thunk
.text:0040CAE0
.text:0040CAE0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0040CAE0 GetModuleHandleA proc near              ; CODE XREF: sub_4050C0+18↑p
.text:0040CAE0                                         ; sub_405880+329↑p ...
.text:0040CAE0
.text:0040CAE0 lpModuleName    = dword ptr  4
.text:0040CAE0
.text:0040CAE0                 jmp     ds:__imp_GetModuleHandleA
.text:0040CAE0 GetModuleHandleA endp
.text:0040CAE0
.text:0040CAE0 ; ---------------------------------------------------------------------------
.text:0040CAE6                 align 10h
.text:0040CAF0
.text:0040CAF0 ; =============== S U B R O U T I N E =======================================
.text:0040CAF0
.text:0040CAF0 ; Attributes: thunk
.text:0040CAF0
.text:0040CAF0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0040CAF0 GetProcAddress  proc near               ; CODE XREF: sub_4050C0+33↑p
.text:0040CAF0                                         ; sub_405230+2E↑p ...
.text:0040CAF0
.text:0040CAF0 hModule         = dword ptr  4
.text:0040CAF0 lpProcName      = dword ptr  8
.text:0040CAF0
.text:0040CAF0                 jmp     ds:__imp_GetProcAddress
.text:0040CAF0 GetProcAddress  endp
.text:0040CAF0
.text:0040CAF0 ; ---------------------------------------------------------------------------
.text:0040CAF6                 align 10h
.text:0040CB00
.text:0040CB00 ; =============== S U B R O U T I N E =======================================
.text:0040CB00
.text:0040CB00 ; Attributes: thunk
.text:0040CB00
.text:0040CB00 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0040CB00 GetFileAttributesA proc near            ; CODE XREF: sub_4050C0+47↑p
.text:0040CB00                                         ; sub_407030+62↑p
.text:0040CB00
.text:0040CB00 lpFileName      = dword ptr  4
.text:0040CB00
.text:0040CB00                 jmp     ds:__imp_GetFileAttributesA
.text:0040CB00 GetFileAttributesA endp
.text:0040CB00
.text:0040CB00 ; ---------------------------------------------------------------------------
.text:0040CB06                 align 10h
.text:0040CB10
.text:0040CB10 ; =============== S U B R O U T I N E =======================================
.text:0040CB10
.text:0040CB10 ; Attributes: thunk
.text:0040CB10
.text:0040CB10 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0040CB10 FreeLibrary     proc near               ; CODE XREF: sub_4050C0+A4↑p
.text:0040CB10                                         ; sub_405230+11D↑p ...
.text:0040CB10
.text:0040CB10 hLibModule      = dword ptr  4
.text:0040CB10
.text:0040CB10                 jmp     ds:__imp_FreeLibrary
.text:0040CB10 FreeLibrary     endp
.text:0040CB10
.text:0040CB10 ; ---------------------------------------------------------------------------
.text:0040CB16                 align 10h
.text:0040CB20
.text:0040CB20 ; =============== S U B R O U T I N E =======================================
.text:0040CB20
.text:0040CB20 ; Attributes: thunk
.text:0040CB20
.text:0040CB20 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040CB20 FindFirstFileA  proc near               ; CODE XREF: sub_4050C0+CE↑p
.text:0040CB20                                         ; sub_405230+14F↑p ...
.text:0040CB20
.text:0040CB20 lpFileName      = dword ptr  4
.text:0040CB20 lpFindFileData  = dword ptr  8
.text:0040CB20
.text:0040CB20                 jmp     ds:__imp_FindFirstFileA
.text:0040CB20 FindFirstFileA  endp
.text:0040CB20
.text:0040CB20 ; ---------------------------------------------------------------------------
.text:0040CB26                 align 10h
.text:0040CB30
.text:0040CB30 ; =============== S U B R O U T I N E =======================================
.text:0040CB30
.text:0040CB30 ; Attributes: thunk
.text:0040CB30
.text:0040CB30 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0040CB30 FindClose       proc near               ; CODE XREF: sub_4050C0+123↑p
.text:0040CB30                                         ; sub_405230+10E↑p ...
.text:0040CB30
.text:0040CB30 hFindFile       = dword ptr  4
.text:0040CB30
.text:0040CB30                 jmp     ds:__imp_FindClose
.text:0040CB30 FindClose       endp
.text:0040CB30
.text:0040CB30 ; ---------------------------------------------------------------------------
.text:0040CB36                 align 10h
.text:0040CB40
.text:0040CB40 ; =============== S U B R O U T I N E =======================================
.text:0040CB40
.text:0040CB40 ; Attributes: thunk
.text:0040CB40
.text:0040CB40 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0040CB40 LoadLibraryA    proc near               ; CODE XREF: sub_405230+13↑p
.text:0040CB40                                         ; sub_405880+134↑p ...
.text:0040CB40
.text:0040CB40 lpLibFileName   = dword ptr  4
.text:0040CB40
.text:0040CB40                 jmp     ds:__imp_LoadLibraryA
.text:0040CB40 LoadLibraryA    endp
.text:0040CB40
.text:0040CB40 ; ---------------------------------------------------------------------------
.text:0040CB46                 align 10h
.text:0040CB50
.text:0040CB50 ; =============== S U B R O U T I N E =======================================
.text:0040CB50
.text:0040CB50 ; Attributes: thunk
.text:0040CB50
.text:0040CB50 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040CB50 FindNextFileA   proc near               ; CODE XREF: sub_405230+FF↑p
.text:0040CB50
.text:0040CB50 hFindFile       = dword ptr  4
.text:0040CB50 lpFindFileData  = dword ptr  8
.text:0040CB50
.text:0040CB50                 jmp     ds:__imp_FindNextFileA
.text:0040CB50 FindNextFileA   endp
.text:0040CB50
.text:0040CB50 ; ---------------------------------------------------------------------------
.text:0040CB56                 align 10h
.text:0040CB60
.text:0040CB60 ; =============== S U B R O U T I N E =======================================
.text:0040CB60
.text:0040CB60 ; Attributes: thunk
.text:0040CB60
.text:0040CB60 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0040CB60 GetFileType     proc near               ; CODE XREF: sub_4053B0+43↑p
.text:0040CB60                                         ; .text:0040606A↑p
.text:0040CB60
.text:0040CB60 hFile           = dword ptr  4
.text:0040CB60
.text:0040CB60                 jmp     ds:__imp_GetFileType
.text:0040CB60 GetFileType     endp
.text:0040CB60
.text:0040CB60 ; ---------------------------------------------------------------------------
.text:0040CB66                 align 10h
.text:0040CB70
.text:0040CB70 ; =============== S U B R O U T I N E =======================================
.text:0040CB70
.text:0040CB70 ; Attributes: thunk
.text:0040CB70
.text:0040CB70 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0040CB70 GetFileInformationByHandle proc near    ; CODE XREF: sub_4053B0+69↑p
.text:0040CB70
.text:0040CB70 hFile           = dword ptr  4
.text:0040CB70 lpFileInformation= dword ptr  8
.text:0040CB70
.text:0040CB70                 jmp     ds:__imp_GetFileInformationByHandle
.text:0040CB70 GetFileInformationByHandle endp
.text:0040CB70
.text:0040CB70 ; ---------------------------------------------------------------------------
.text:0040CB76                 align 10h
.text:0040CB80
.text:0040CB80 ; =============== S U B R O U T I N E =======================================
.text:0040CB80
.text:0040CB80 ; Attributes: thunk
.text:0040CB80
.text:0040CB80 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0040CB80 GetFileSize     proc near               ; CODE XREF: sub_4053B0+3F2↑p
.text:0040CB80
.text:0040CB80 hFile           = dword ptr  4
.text:0040CB80 lpFileSizeHigh  = dword ptr  8
.text:0040CB80
.text:0040CB80                 jmp     ds:__imp_GetFileSize
.text:0040CB80 GetFileSize     endp
.text:0040CB80
.text:0040CB80 ; ---------------------------------------------------------------------------
.text:0040CB86                 align 10h
.text:0040CB90
.text:0040CB90 ; =============== S U B R O U T I N E =======================================
.text:0040CB90
.text:0040CB90 ; Attributes: thunk
.text:0040CB90
.text:0040CB90 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0040CB90 PeekNamedPipe   proc near               ; CODE XREF: sub_4053B0+439↑p
.text:0040CB90
.text:0040CB90 hNamedPipe      = dword ptr  4
.text:0040CB90 lpBuffer        = dword ptr  8
.text:0040CB90 nBufferSize     = dword ptr  0Ch
.text:0040CB90 lpBytesRead     = dword ptr  10h
.text:0040CB90 lpTotalBytesAvail= dword ptr  14h
.text:0040CB90 lpBytesLeftThisMessage= dword ptr  18h
.text:0040CB90
.text:0040CB90                 jmp     ds:__imp_PeekNamedPipe
.text:0040CB90 PeekNamedPipe   endp
.text:0040CB90
.text:0040CB90 ; ---------------------------------------------------------------------------
.text:0040CB96                 align 10h
.text:0040CBA0
.text:0040CBA0 ; =============== S U B R O U T I N E =======================================
.text:0040CBA0
.text:0040CBA0 ; Attributes: thunk
.text:0040CBA0
.text:0040CBA0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0040CBA0 GetDriveTypeA   proc near               ; CODE XREF: sub_405880+4C↑p
.text:0040CBA0
.text:0040CBA0 lpRootPathName  = dword ptr  4
.text:0040CBA0
.text:0040CBA0                 jmp     ds:__imp_GetDriveTypeA
.text:0040CBA0 GetDriveTypeA   endp
.text:0040CBA0
.text:0040CBA0 ; ---------------------------------------------------------------------------
.text:0040CBA6                 align 10h
.text:0040CBB0
.text:0040CBB0 ; =============== S U B R O U T I N E =======================================
.text:0040CBB0
.text:0040CBB0 ; Attributes: thunk
.text:0040CBB0
.text:0040CBB0 ; DWORD __stdcall GetLastError()
.text:0040CBB0 GetLastError    proc near               ; CODE XREF: sub_405880:loc_405B09↑p
.text:0040CBB0                                         ; .text:loc_40664D↑p ...
.text:0040CBB0                 jmp     ds:__imp_GetLastError
.text:0040CBB0 GetLastError    endp
.text:0040CBB0
.text:0040CBB0 ; ---------------------------------------------------------------------------
.text:0040CBB6                 align 10h
.text:0040CBC0
.text:0040CBC0 ; =============== S U B R O U T I N E =======================================
.text:0040CBC0
.text:0040CBC0 ; Attributes: thunk
.text:0040CBC0
.text:0040CBC0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0040CBC0 GetVolumeInformationA proc near         ; CODE XREF: sub_405D80+64↑p
.text:0040CBC0                                         ; .text:0040632C↑p ...
.text:0040CBC0
.text:0040CBC0 lpRootPathName  = dword ptr  4
.text:0040CBC0 lpVolumeNameBuffer= dword ptr  8
.text:0040CBC0 nVolumeNameSize = dword ptr  0Ch
.text:0040CBC0 lpVolumeSerialNumber= dword ptr  10h
.text:0040CBC0 lpMaximumComponentLength= dword ptr  14h
.text:0040CBC0 lpFileSystemFlags= dword ptr  18h
.text:0040CBC0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0040CBC0 nFileSystemNameSize= dword ptr  20h
.text:0040CBC0
.text:0040CBC0                 jmp     ds:__imp_GetVolumeInformationA
.text:0040CBC0 GetVolumeInformationA endp
.text:0040CBC0
.text:0040CBC0 ; ---------------------------------------------------------------------------
.text:0040CBC6                 align 10h
.text:0040CBD0
.text:0040CBD0 ; =============== S U B R O U T I N E =======================================
.text:0040CBD0
.text:0040CBD0 ; Attributes: thunk
.text:0040CBD0
.text:0040CBD0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0040CBD0 CreateFileA     proc near               ; CODE XREF: sub_405000+1B16↑p
.text:0040CBD0                                         ; .text:00407703↑p ...
.text:0040CBD0
.text:0040CBD0 lpFileName      = dword ptr  4
.text:0040CBD0 dwDesiredAccess = dword ptr  8
.text:0040CBD0 dwShareMode     = dword ptr  0Ch
.text:0040CBD0 lpSecurityAttributes= dword ptr  10h
.text:0040CBD0 dwCreationDisposition= dword ptr  14h
.text:0040CBD0 dwFlagsAndAttributes= dword ptr  18h
.text:0040CBD0 hTemplateFile   = dword ptr  1Ch
.text:0040CBD0
.text:0040CBD0                 jmp     ds:__imp_CreateFileA
.text:0040CBD0 CreateFileA     endp
.text:0040CBD0
.text:0040CBD0 ; ---------------------------------------------------------------------------
.text:0040CBD6                 align 10h
.text:0040CBE0
.text:0040CBE0 ; =============== S U B R O U T I N E =======================================
.text:0040CBE0
.text:0040CBE0 ; Attributes: thunk
.text:0040CBE0
.text:0040CBE0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0040CBE0 CloseHandle     proc near               ; CODE XREF: sub_405000+1B31↑p
.text:0040CBE0                                         ; .text:00407779↑p ...
.text:0040CBE0
.text:0040CBE0 hObject         = dword ptr  4
.text:0040CBE0
.text:0040CBE0                 jmp     ds:__imp_CloseHandle
.text:0040CBE0 CloseHandle     endp
.text:0040CBE0
.text:0040CBE0 ; ---------------------------------------------------------------------------
.text:0040CBE6                 align 10h
.text:0040CBF0
.text:0040CBF0 ; =============== S U B R O U T I N E =======================================
.text:0040CBF0
.text:0040CBF0 ; Attributes: thunk
.text:0040CBF0
.text:0040CBF0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0040CBF0 SetErrorMode    proc near               ; CODE XREF: sub_405000+1B66↑p
.text:0040CBF0                                         ; sub_407030+57↑p ...
.text:0040CBF0
.text:0040CBF0 uMode           = dword ptr  4
.text:0040CBF0
.text:0040CBF0                 jmp     ds:__imp_SetErrorMode
.text:0040CBF0 SetErrorMode    endp
.text:0040CBF0
.text:0040CBF0 ; ---------------------------------------------------------------------------
.text:0040CBF6                 align 10h
.text:0040CC00
.text:0040CC00 ; =============== S U B R O U T I N E =======================================
.text:0040CC00
.text:0040CC00 ; Attributes: thunk
.text:0040CC00
.text:0040CC00 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0040CC00 GetFullPathNameA proc near              ; CODE XREF: sub_406F00+45↑p
.text:0040CC00                                         ; sub_406F00+ED↑p
.text:0040CC00
.text:0040CC00 lpFileName      = dword ptr  4
.text:0040CC00 nBufferLength   = dword ptr  8
.text:0040CC00 lpBuffer        = dword ptr  0Ch
.text:0040CC00 lpFilePart      = dword ptr  10h
.text:0040CC00
.text:0040CC00                 jmp     ds:__imp_GetFullPathNameA
.text:0040CC00 GetFullPathNameA endp
.text:0040CC00
.text:0040CC00 ; ---------------------------------------------------------------------------
.text:0040CC06                 align 10h
.text:0040CC10
.text:0040CC10 ; =============== S U B R O U T I N E =======================================
.text:0040CC10
.text:0040CC10 ; Attributes: thunk
.text:0040CC10
.text:0040CC10 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040CC10 GetCurrentDirectoryA proc near          ; CODE XREF: .text:004073B8↑p
.text:0040CC10                                         ; .text:004073D4↑p ...
.text:0040CC10
.text:0040CC10 nBufferLength   = dword ptr  4
.text:0040CC10 lpBuffer        = dword ptr  8
.text:0040CC10
.text:0040CC10                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0040CC10 GetCurrentDirectoryA endp
.text:0040CC10
.text:0040CC10 ; ---------------------------------------------------------------------------
.text:0040CC16                 align 10h
.text:0040CC20
.text:0040CC20 ; =============== S U B R O U T I N E =======================================
.text:0040CC20
.text:0040CC20 ; Attributes: thunk
.text:0040CC20
.text:0040CC20 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0040CC20 DeviceIoControl proc near               ; CODE XREF: .text:0040776C↑p
.text:0040CC20                                         ; sub_407B30+1E5↑p
.text:0040CC20
.text:0040CC20 hDevice         = dword ptr  4
.text:0040CC20 dwIoControlCode = dword ptr  8
.text:0040CC20 lpInBuffer      = dword ptr  0Ch
.text:0040CC20 nInBufferSize   = dword ptr  10h
.text:0040CC20 lpOutBuffer     = dword ptr  14h
.text:0040CC20 nOutBufferSize  = dword ptr  18h
.text:0040CC20 lpBytesReturned = dword ptr  1Ch
.text:0040CC20 lpOverlapped    = dword ptr  20h
.text:0040CC20
.text:0040CC20                 jmp     ds:__imp_DeviceIoControl
.text:0040CC20 DeviceIoControl endp
.text:0040CC20
.text:0040CC20 ; ---------------------------------------------------------------------------
.text:0040CC26                 align 10h
.text:0040CC30
.text:0040CC30 ; =============== S U B R O U T I N E =======================================
.text:0040CC30
.text:0040CC30 ; Attributes: thunk
.text:0040CC30
.text:0040CC30 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040CC30 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00407AC3↑p
.text:0040CC30                                         ; sub_407B30+7B↑p ...
.text:0040CC30
.text:0040CC30 lpRootPathName  = dword ptr  4
.text:0040CC30 lpSectorsPerCluster= dword ptr  8
.text:0040CC30 lpBytesPerSector= dword ptr  0Ch
.text:0040CC30 lpNumberOfFreeClusters= dword ptr  10h
.text:0040CC30 lpTotalNumberOfClusters= dword ptr  14h
.text:0040CC30
.text:0040CC30                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0040CC30 GetDiskFreeSpaceA endp
.text:0040CC30
.text:0040CC30 ; ---------------------------------------------------------------------------
.text:0040CC36                 align 10h
.text:0040CC40
.text:0040CC40 ; =============== S U B R O U T I N E =======================================
.text:0040CC40
.text:0040CC40 ; Attributes: thunk
.text:0040CC40
.text:0040CC40 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0040CC40 GetModuleFileNameA proc near            ; CODE XREF: sub_408340+1C↑p
.text:0040CC40
.text:0040CC40 hModule         = dword ptr  4
.text:0040CC40 lpFilename      = dword ptr  8
.text:0040CC40 nSize           = dword ptr  0Ch
.text:0040CC40
.text:0040CC40                 jmp     ds:__imp_GetModuleFileNameA
.text:0040CC40 GetModuleFileNameA endp
.text:0040CC40
.text:0040CC40 ; ---------------------------------------------------------------------------
.text:0040CC46                 align 10h
.text:0040CC50
.text:0040CC50 ; =============== S U B R O U T I N E =======================================
.text:0040CC50
.text:0040CC50 ; Attributes: thunk
.text:0040CC50
.text:0040CC50 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0040CC50 GetShortPathNameA proc near             ; CODE XREF: .text:004085C6↑p
.text:0040CC50                                         ; .text:004085F0↑p
.text:0040CC50
.text:0040CC50 lpszLongPath    = dword ptr  4
.text:0040CC50 lpszShortPath   = dword ptr  8
.text:0040CC50 cchBuffer       = dword ptr  0Ch
.text:0040CC50
.text:0040CC50                 jmp     ds:__imp_GetShortPathNameA
.text:0040CC50 GetShortPathNameA endp
.text:0040CC50
.text:0040CC50 ; ---------------------------------------------------------------------------
.text:0040CC56                 align 10h
.text:0040CC60
.text:0040CC60 ; =============== S U B R O U T I N E =======================================
.text:0040CC60
.text:0040CC60 ; Attributes: thunk
.text:0040CC60
.text:0040CC60 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040CC60 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:00408A8F↑p
.text:0040CC60                                         ; .text:00408ABE↑p ...
.text:0040CC60
.text:0040CC60 nBufferLength   = dword ptr  4
.text:0040CC60 lpBuffer        = dword ptr  8
.text:0040CC60
.text:0040CC60                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0040CC60 GetLogicalDriveStringsA endp
.text:0040CC60
.text:0040CC60 ; ---------------------------------------------------------------------------
.text:0040CC66                 align 10h
.text:0040CC70
.text:0040CC70 ; =============== S U B R O U T I N E =======================================
.text:0040CC70
.text:0040CC70 ; Attributes: thunk
.text:0040CC70
.text:0040CC70 ; HANDLE __stdcall GetProcessHeap()
.text:0040CC70 GetProcessHeap  proc near               ; CODE XREF: .text:00408A99↑p
.text:0040CC70                                         ; sub_409170+24↑p ...
.text:0040CC70                 jmp     ds:__imp_GetProcessHeap
.text:0040CC70 GetProcessHeap  endp
.text:0040CC70
.text:0040CC70 ; ---------------------------------------------------------------------------
.text:0040CC76                 align 10h
.text:0040CC80
.text:0040CC80 ; =============== S U B R O U T I N E =======================================
.text:0040CC80
.text:0040CC80 ; Attributes: thunk
.text:0040CC80
.text:0040CC80 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0040CC80 HeapAlloc       proc near               ; CODE XREF: .text:00408AAD↑p
.text:0040CC80                                         ; sub_409170+38↑p ...
.text:0040CC80
.text:0040CC80 hHeap           = dword ptr  4
.text:0040CC80 dwFlags         = dword ptr  8
.text:0040CC80 dwBytes         = dword ptr  0Ch
.text:0040CC80
.text:0040CC80                 jmp     ds:__imp_HeapAlloc
.text:0040CC80 HeapAlloc       endp
.text:0040CC80
.text:0040CC80 ; ---------------------------------------------------------------------------
.text:0040CC86                 align 10h
.text:0040CC90
.text:0040CC90 ; =============== S U B R O U T I N E =======================================
.text:0040CC90
.text:0040CC90 ; Attributes: thunk
.text:0040CC90
.text:0040CC90 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0040CC90 HeapFree        proc near               ; CODE XREF: .text:004092AD↑p
.text:0040CC90
.text:0040CC90 hHeap           = dword ptr  4
.text:0040CC90 dwFlags         = dword ptr  8
.text:0040CC90 lpMem           = dword ptr  0Ch
.text:0040CC90
.text:0040CC90                 jmp     ds:__imp_HeapFree
.text:0040CC90 HeapFree        endp
.text:0040CC90
.text:0040CC90 ; ---------------------------------------------------------------------------
.text:0040CC96                 align 10h
.text:0040CCA0
.text:0040CCA0 ; =============== S U B R O U T I N E =======================================
.text:0040CCA0
.text:0040CCA0 ; Attributes: thunk
.text:0040CCA0
.text:0040CCA0 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0040CCA0 lstrcmpiA       proc near               ; CODE XREF: .text:004098EB↑p
.text:0040CCA0                                         ; .text:00409902↑p ...
.text:0040CCA0
.text:0040CCA0 lpString1       = dword ptr  4
.text:0040CCA0 lpString2       = dword ptr  8
.text:0040CCA0
.text:0040CCA0                 jmp     ds:__imp_lstrcmpiA
.text:0040CCA0 lstrcmpiA       endp
.text:0040CCA0
.text:0040CCA0 ; ---------------------------------------------------------------------------
.text:0040CCA6                 align 10h
.text:0040CCB0
.text:0040CCB0 ; =============== S U B R O U T I N E =======================================
.text:0040CCB0
.text:0040CCB0 ; Attributes: thunk
.text:0040CCB0
.text:0040CCB0 ; DWORD __stdcall GetVersion()
.text:0040CCB0 GetVersion      proc near               ; CODE XREF: .text:00409C73↑p
.text:0040CCB0                 jmp     ds:__imp_GetVersion
.text:0040CCB0 GetVersion      endp
.text:0040CCB0
.text:0040CCB0 ; ---------------------------------------------------------------------------
.text:0040CCB6                 align 10h
.text:0040CCC0
.text:0040CCC0 ; =============== S U B R O U T I N E =======================================
.text:0040CCC0
.text:0040CCC0 ; Attributes: thunk
.text:0040CCC0
.text:0040CCC0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0040CCC0 GetVersionExA   proc near               ; CODE XREF: sub_409D00+32↑p
.text:0040CCC0                                         ; sub_409D00+20B↑p
.text:0040CCC0
.text:0040CCC0 lpVersionInformation= dword ptr  4
.text:0040CCC0
.text:0040CCC0                 jmp     ds:__imp_GetVersionExA
.text:0040CCC0 GetVersionExA   endp
.text:0040CCC0
.text:0040CCC0 ; ---------------------------------------------------------------------------
.text:0040CCC6                 align 10h
.text:0040CCD0
.text:0040CCD0 ; =============== S U B R O U T I N E =======================================
.text:0040CCD0
.text:0040CCD0 ; Attributes: thunk
.text:0040CCD0
.text:0040CCD0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0040CCD0 UnlockFile      proc near               ; CODE XREF: sub_409F60+40↑p
.text:0040CCD0
.text:0040CCD0 hFile           = dword ptr  4
.text:0040CCD0 dwFileOffsetLow = dword ptr  8
.text:0040CCD0 dwFileOffsetHigh= dword ptr  0Ch
.text:0040CCD0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0040CCD0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0040CCD0
.text:0040CCD0                 jmp     ds:__imp_UnlockFile
.text:0040CCD0 UnlockFile      endp
.text:0040CCD0
.text:0040CCD0 ; ---------------------------------------------------------------------------
.text:0040CCD6                 align 10h
.text:0040CCE0
.text:0040CCE0 ; =============== S U B R O U T I N E =======================================
.text:0040CCE0
.text:0040CCE0 ; Attributes: thunk
.text:0040CCE0
.text:0040CCE0 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040CCE0 CreateDirectoryA proc near              ; CODE XREF: sub_40A8E0+22↑p
.text:0040CCE0
.text:0040CCE0 lpPathName      = dword ptr  4
.text:0040CCE0 lpSecurityAttributes= dword ptr  8
.text:0040CCE0
.text:0040CCE0                 jmp     ds:__imp_CreateDirectoryA
.text:0040CCE0 CreateDirectoryA endp
.text:0040CCE0
.text:0040CCE0 ; ---------------------------------------------------------------------------
.text:0040CCE6                 align 10h
.text:0040CCF0
.text:0040CCF0 ; =============== S U B R O U T I N E =======================================
.text:0040CCF0
.text:0040CCF0 ; Attributes: thunk
.text:0040CCF0
.text:0040CCF0 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0040CCF0 GetTimeZoneInformation proc near        ; CODE XREF: sub_40AAA0+22↑p
.text:0040CCF0
.text:0040CCF0 lpTimeZoneInformation= dword ptr  4
.text:0040CCF0
.text:0040CCF0                 jmp     ds:__imp_GetTimeZoneInformation
.text:0040CCF0 GetTimeZoneInformation endp
.text:0040CCF0
.text:0040CCF0 ; ---------------------------------------------------------------------------
.text:0040CCF6                 align 10h
.text:0040CD00
.text:0040CD00 ; =============== S U B R O U T I N E =======================================
.text:0040CD00
.text:0040CD00 ; Attributes: thunk
.text:0040CD00
.text:0040CD00 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0040CD00 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40AAA0+4F↑p
.text:0040CD00
.text:0040CD00 lpSystemTimeAsFileTime= dword ptr  4
.text:0040CD00
.text:0040CD00                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0040CD00 GetSystemTimeAsFileTime endp
.text:0040CD00
.text:0040CD00 ; ---------------------------------------------------------------------------
.text:0040CD06                 align 10h
.text:0040CD10
.text:0040CD10 ; =============== S U B R O U T I N E =======================================
.text:0040CD10
.text:0040CD10 ; Attributes: thunk
.text:0040CD10
.text:0040CD10 ; BOOL __stdcall AreFileApisANSI()
.text:0040CD10 AreFileApisANSI proc near               ; CODE XREF: sub_40ABE0+89↑p
.text:0040CD10                 jmp     ds:__imp_AreFileApisANSI
.text:0040CD10 AreFileApisANSI endp
.text:0040CD10
.text:0040CD10 ; ---------------------------------------------------------------------------
.text:0040CD16                 align 10h
.text:0040CD20
.text:0040CD20 ; =============== S U B R O U T I N E =======================================
.text:0040CD20
.text:0040CD20 ; Attributes: thunk
.text:0040CD20
.text:0040CD20 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0040CD20 MultiByteToWideChar proc near           ; CODE XREF: sub_40ABE0+BD↑p
.text:0040CD20
.text:0040CD20 CodePage        = dword ptr  4
.text:0040CD20 dwFlags         = dword ptr  8
.text:0040CD20 lpMultiByteStr  = dword ptr  0Ch
.text:0040CD20 cbMultiByte     = dword ptr  10h
.text:0040CD20 lpWideCharStr   = dword ptr  14h
.text:0040CD20 cchWideChar     = dword ptr  18h
.text:0040CD20
.text:0040CD20                 jmp     ds:__imp_MultiByteToWideChar
.text:0040CD20 MultiByteToWideChar endp
.text:0040CD20
.text:0040CD20 ; ---------------------------------------------------------------------------
.text:0040CD26                 align 10h
.text:0040CD30
.text:0040CD30 ; =============== S U B R O U T I N E =======================================
.text:0040CD30
.text:0040CD30 ; Attributes: thunk
.text:0040CD30
.text:0040CD30 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0040CD30 lstrcpyA        proc near               ; CODE XREF: sub_40ABE0+128↑p
.text:0040CD30
.text:0040CD30 lpString1       = dword ptr  4
.text:0040CD30 lpString2       = dword ptr  8
.text:0040CD30
.text:0040CD30                 jmp     ds:__imp_lstrcpyA
.text:0040CD30 lstrcpyA        endp
.text:0040CD30
.text:0040CD30 ; ---------------------------------------------------------------------------
.text:0040CD36                 align 10h
.text:0040CD40
.text:0040CD40 ; =============== S U B R O U T I N E =======================================
.text:0040CD40
.text:0040CD40 ; Attributes: thunk
.text:0040CD40
.text:0040CD40 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0040CD40 RegOpenKeyExA   proc near               ; CODE XREF: .text:00409871↑p
.text:0040CD40
.text:0040CD40 hKey            = dword ptr  4
.text:0040CD40 lpSubKey        = dword ptr  8
.text:0040CD40 ulOptions       = dword ptr  0Ch
.text:0040CD40 samDesired      = dword ptr  10h
.text:0040CD40 phkResult       = dword ptr  14h
.text:0040CD40
.text:0040CD40                 jmp     ds:__imp_RegOpenKeyExA
.text:0040CD40 RegOpenKeyExA   endp
.text:0040CD40
.text:0040CD40 ; ---------------------------------------------------------------------------
.text:0040CD46                 align 10h
.text:0040CD50
.text:0040CD50 ; =============== S U B R O U T I N E =======================================
.text:0040CD50
.text:0040CD50 ; Attributes: thunk
.text:0040CD50
.text:0040CD50 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0040CD50 RegQueryValueExA proc near              ; CODE XREF: .text:004098B4↑p
.text:0040CD50
.text:0040CD50 hKey            = dword ptr  4
.text:0040CD50 lpValueName     = dword ptr  8
.text:0040CD50 lpReserved      = dword ptr  0Ch
.text:0040CD50 lpType          = dword ptr  10h
.text:0040CD50 lpData          = dword ptr  14h
.text:0040CD50 lpcbData        = dword ptr  18h
.text:0040CD50
.text:0040CD50                 jmp     ds:__imp_RegQueryValueExA
.text:0040CD50 RegQueryValueExA endp
.text:0040CD50
.text:0040CD50 ; ---------------------------------------------------------------------------
.text:0040CD56                 align 10h
.text:0040CD60
.text:0040CD60 ; =============== S U B R O U T I N E =======================================
.text:0040CD60
.text:0040CD60 ; Attributes: thunk
.text:0040CD60
.text:0040CD60 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0040CD60 RegCloseKey     proc near               ; CODE XREF: .text:004098D8↑p
.text:0040CD60
.text:0040CD60 hKey            = dword ptr  4
.text:0040CD60
.text:0040CD60                 jmp     ds:__imp_RegCloseKey
.text:0040CD60 RegCloseKey     endp
.text:0040CD60
.text:0040CD60 ; ---------------------------------------------------------------------------
.text:0040CD66                 db 2 dup(90h)
.text:0040CD68                 dd 2 dup(0)
.text:0040CD70                 dd 21400h, 0
.text:0040CD78                 dd 0C0h, 46000000h
.text:0040CD80 ; const IID rclsid
.text:0040CD80 rclsid          dd 21401h               ; Data1
.text:0040CD80                                         ; DATA XREF: sub_40ABE0+4B↑o
.text:0040CD80                 dw 0                    ; Data2
.text:0040CD80                 dw 0                    ; Data3
.text:0040CD80                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040CD90                 dd 214A0h, 0
.text:0040CD98                 dd 0C0h, 46000000h, 214A1h, 0
.text:0040CDA8                 dd 0C0h, 46000000h, 214D0h, 0
.text:0040CDB8                 dd 0C0h, 46000000h, 214D1h, 0
.text:0040CDC8                 dd 0C0h, 46000000h, 214D2h, 0
.text:0040CDD8                 dd 0C0h, 46000000h, 214E1h, 0
.text:0040CDE8                 dd 0C0h, 46000000h, 214E2h, 0
.text:0040CDF8                 dd 0C0h, 46000000h, 214E3h, 0
.text:0040CE08                 dd 0C0h, 46000000h, 214E4h, 0
.text:0040CE18                 dd 0C0h, 46000000h, 21500h, 0
.text:0040CE28                 dd 0C0h, 46000000h, 214E5h, 0
.text:0040CE38                 dd 0C0h, 46000000h, 214E6h, 0
.text:0040CE48                 dd 0C0h, 46000000h, 214E8h, 0
.text:0040CE58                 dd 0C0h, 46000000h, 214E9h, 0
.text:0040CE68                 dd 0C0h, 46000000h, 214EAh, 0
.text:0040CE78                 dd 0C0h, 46000000h, 214EBh, 0
.text:0040CE88                 dd 0C0h, 46000000h
.text:0040CE90 ; const IID riid
.text:0040CE90 riid            dd 214EEh               ; Data1
.text:0040CE90                                         ; DATA XREF: sub_40ABE0+2B↑o
.text:0040CE90                 dw 0                    ; Data2
.text:0040CE90                 dw 0                    ; Data3
.text:0040CE90                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040CEA0                 dd 214EFh, 0
.text:0040CEA8                 dd 0C0h, 46000000h, 214F0h, 0
.text:0040CEB8                 dd 0C0h, 46000000h, 214F1h, 0
.text:0040CEC8                 dd 0C0h, 46000000h, 214F2h, 0
.text:0040CED8                 dd 0C0h, 46000000h, 214F3h, 0
.text:0040CEE8                 dd 0C0h, 46000000h, 214F4h, 0
.text:0040CEF8                 dd 0C0h, 46000000h, 214F5h, 0
.text:0040CF08                 dd 0C0h, 46000000h, 214F6h, 0
.text:0040CF18                 dd 0C0h, 46000000h, 214F7h, 0
.text:0040CF28                 dd 0C0h, 46000000h, 214F8h, 0
.text:0040CF38                 dd 0C0h, 46000000h, 214F9h, 0
.text:0040CF48                 dd 0C0h, 46000000h, 214FAh, 0
.text:0040CF58                 dd 0C0h, 46000000h, 214FBh, 0
.text:0040CF68                 dd 0C0h, 46000000h, 214FCh, 0
.text:0040CF78                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0040CF78                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0040CF78                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0040CF78                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0040CF78                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040CF78                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0040CF78                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0040CF78                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040CF78                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0040CF78                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0040D048                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0040D058                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0040D068                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0040D078                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0040D088                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0040D088                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0040D088                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0040D088                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0040D088                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0040D088                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0040D088                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0040D110 dword_40D110    dd 0FFFFFFFFh           ; DATA XREF: .text:0040C3B9↑r
.text:0040D110                                         ; .text:loc_40C3E0↑r ...
.text:0040D114 dword_40D114    dd 0                    ; DATA XREF: .text:loc_40C3EC↑r
.text:0040D114                                         ; sub_40C410:loc_40C45D↑r
.text:0040D118                 dd 0FFFFFFFFh
.text:0040D11C dword_40D11C    dd 39h dup(0)           ; DATA XREF: .data:off_40E0C4↓o
.text:0040D200                 dd 380h dup(?)
.text:0040D200 _text           ends
.text:0040D200
.data:0040E000 ; Section 2. (virtual address 0000E000)
.data:0040E000 ; Virtual size                  : 000000E0 (    224.)
.data:0040E000 ; Section size in file          : 00000200 (    512.)
.data:0040E000 ; Offset to raw data for section: 0000C600
.data:0040E000 ; Flags C0000040: Data Readable Writable
.data:0040E000 ; Alignment     : default
.data:0040E000 ; ===========================================================================
.data:0040E000
.data:0040E000 ; Segment type: Pure data
.data:0040E000 ; Segment permissions: Read/Write
.data:0040E000 _data           segment para public 'DATA' use32
.data:0040E000                 assume cs:_data
.data:0040E000                 ;org 40E000h
.data:0040E000 dword_40E000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0040E000                                         ; sub_401080+CC↑r
.data:0040E004 dword_40E004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0040E004                                         ; sub_401080+D4↑r
.data:0040E008                 align 10h
.data:0040E010 dword_40E010    dd 1                    ; DATA XREF: sub_403010+22↑r
.data:0040E010                                         ; sub_403010+65↑r ...
.data:0040E014 dword_40E014    dd 100h                 ; DATA XREF: sub_403010+3F↑o
.data:0040E014                                         ; sub_403010+1A2↑r ...
.data:0040E018 off_40E018      dd offset unk_40F000    ; DATA XREF: sub_403010+1AA↑r
.data:0040E01C ; void *off_40E01C
.data:0040E01C off_40E01C      dd offset dword_40E014  ; DATA XREF: sub_403010+39↑r
.data:0040E01C                                         ; sub_403010+60↑w ...
.data:0040E020 dword_40E020    dd 1                    ; DATA XREF: sub_401520:loc_401710↑r
.data:0040E020                                         ; sub_401520+262↑r ...
.data:0040E024 dword_40E024    dd 1                    ; DATA XREF: sub_403FC0+11↑r
.data:0040E024                                         ; .text:00404061↑r
.data:0040E028 dword_40E028    dd 3Fh                  ; DATA XREF: sub_403FC0+7D↑w
.data:0040E028                                         ; .text:004040CD↑w
.data:0040E02C                 align 10h
.data:0040E030 ; char *Buffer
.data:0040E030 Buffer          dd offset aCopyrightC2005
.data:0040E030                                         ; DATA XREF: sub_404550+DC↑r
.data:0040E030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0040E034                 align 10h
.data:0040E040 ; int Code
.data:0040E040 Code            dd 1                    ; DATA XREF: sub_4048D0+6D↑r
.data:0040E040                                         ; sub_4048D0+9A↑r ...
.data:0040E044                 align 10h
.data:0040E050 dword_40E050    dd 200h                 ; DATA XREF: sub_4053B0+2ED↑r
.data:0040E050                                         ; sub_4053B0+2F8↑r ...
.data:0040E054 ; char *off_40E054
.data:0040E054 off_40E054      dd offset aComExeBatCmd ; DATA XREF: sub_405880+3D3↑r
.data:0040E054                                         ; sub_405880+400↑r ...
.data:0040E054                                         ; ".com;.exe;.bat;.cmd"
.data:0040E058                 align 10h
.data:0040E060 byte_40E060     db 41h                  ; DATA XREF: sub_407230+6B↑w
.data:0040E060                                         ; sub_407230:loc_407344↑r
.data:0040E061                 align 10h
.data:0040E070 off_40E070      dd offset aNotset       ; DATA XREF: .text:0040866A↑r
.data:0040E070                                         ; .text:004092B2↑r
.data:0040E070                                         ; "notset"
.data:0040E074 off_40E074      dd offset aNotset       ; DATA XREF: .text:00408682↑r
.data:0040E074                                         ; .text:004086A4↑r ...
.data:0040E074                                         ; "notset"
.data:0040E078                 align 10h
.data:0040E080 dword_40E080    dd 1                    ; DATA XREF: .text:loc_409727↑r
.data:0040E080                                         ; sub_409D00+202↑w
.data:0040E084                 align 10h
.data:0040E090 dword_40E090    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0040E094                 align 10h
.data:0040E0A0 ; int Mode
.data:0040E0A0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0040E0A0                                         ; sub_401080+80↑r ...
.data:0040E0A4                 align 10h
.data:0040E0B0 dword_40E0B0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0040E0B0                                         ; sub_401080+BA↑r
.data:0040E0B4                 align 10h
.data:0040E0C0 dword_40E0C0    dd 0                    ; DATA XREF: sub_40C410+9↑r
.data:0040E0C0                                         ; sub_40C410+1D↑w
.data:0040E0C4 off_40E0C4      dd offset dword_40D11C  ; DATA XREF: sub_40C380+6↑r
.data:0040E0C4                                         ; sub_40C380+17↑r ...
.data:0040E0C8                 align 1000h
.data:0040E0C8 _data           ends
.data:0040E0C8
.bss:0040F000 ; Section 3. (virtual address 0000F000)
.bss:0040F000 ; Virtual size                  : 00000550 (   1360.)
.bss:0040F000 ; Section size in file          : 00000000 (      0.)
.bss:0040F000 ; Offset to raw data for section: 00000000
.bss:0040F000 ; Flags C0000080: Bss Readable Writable
.bss:0040F000 ; Alignment     : default
.bss:0040F000 ; ===========================================================================
.bss:0040F000
.bss:0040F000 ; Segment type: Uninitialized
.bss:0040F000 ; Segment permissions: Read/Write
.bss:0040F000 _bss            segment para public 'BSS' use32
.bss:0040F000                 assume cs:_bss
.bss:0040F000                 ;org 40F000h
.bss:0040F000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0040F000 unk_40F000      db    ? ;               ; DATA XREF: sub_403010+100↑o
.bss:0040F000                                         ; sub_40C340+1↑o ...
.bss:0040F001                 db    ? ;
.bss:0040F002                 db    ? ;
.bss:0040F003                 db    ? ;
.bss:0040F004                 db    ? ;
.bss:0040F005                 db    ? ;
.bss:0040F006                 db    ? ;
.bss:0040F007                 db    ? ;
.bss:0040F008                 db    ? ;
.bss:0040F009                 db    ? ;
.bss:0040F00A                 db    ? ;
.bss:0040F00B                 db    ? ;
.bss:0040F00C                 db    ? ;
.bss:0040F00D                 db    ? ;
.bss:0040F00E                 db    ? ;
.bss:0040F00F                 db    ? ;
.bss:0040F010                 db    ? ;
.bss:0040F011                 db    ? ;
.bss:0040F012                 db    ? ;
.bss:0040F013                 db    ? ;
.bss:0040F014                 db    ? ;
.bss:0040F015                 db    ? ;
.bss:0040F016                 db    ? ;
.bss:0040F017                 db    ? ;
.bss:0040F018                 db    ? ;
.bss:0040F019                 db    ? ;
.bss:0040F01A                 db    ? ;
.bss:0040F01B                 db    ? ;
.bss:0040F01C                 db    ? ;
.bss:0040F01D                 db    ? ;
.bss:0040F01E                 db    ? ;
.bss:0040F01F                 db    ? ;
.bss:0040F020                 db    ? ;
.bss:0040F021                 db    ? ;
.bss:0040F022                 db    ? ;
.bss:0040F023                 db    ? ;
.bss:0040F024                 db    ? ;
.bss:0040F025                 db    ? ;
.bss:0040F026                 db    ? ;
.bss:0040F027                 db    ? ;
.bss:0040F028                 db    ? ;
.bss:0040F029                 db    ? ;
.bss:0040F02A                 db    ? ;
.bss:0040F02B                 db    ? ;
.bss:0040F02C                 db    ? ;
.bss:0040F02D                 db    ? ;
.bss:0040F02E                 db    ? ;
.bss:0040F02F                 db    ? ;
.bss:0040F030                 db    ? ;
.bss:0040F031                 db    ? ;
.bss:0040F032                 db    ? ;
.bss:0040F033                 db    ? ;
.bss:0040F034                 db    ? ;
.bss:0040F035                 db    ? ;
.bss:0040F036                 db    ? ;
.bss:0040F037                 db    ? ;
.bss:0040F038                 db    ? ;
.bss:0040F039                 db    ? ;
.bss:0040F03A                 db    ? ;
.bss:0040F03B                 db    ? ;
.bss:0040F03C                 db    ? ;
.bss:0040F03D                 db    ? ;
.bss:0040F03E                 db    ? ;
.bss:0040F03F                 db    ? ;
.bss:0040F040                 db    ? ;
.bss:0040F041                 db    ? ;
.bss:0040F042                 db    ? ;
.bss:0040F043                 db    ? ;
.bss:0040F044                 db    ? ;
.bss:0040F045                 db    ? ;
.bss:0040F046                 db    ? ;
.bss:0040F047                 db    ? ;
.bss:0040F048                 db    ? ;
.bss:0040F049                 db    ? ;
.bss:0040F04A                 db    ? ;
.bss:0040F04B                 db    ? ;
.bss:0040F04C                 db    ? ;
.bss:0040F04D                 db    ? ;
.bss:0040F04E                 db    ? ;
.bss:0040F04F                 db    ? ;
.bss:0040F050                 db    ? ;
.bss:0040F051                 db    ? ;
.bss:0040F052                 db    ? ;
.bss:0040F053                 db    ? ;
.bss:0040F054                 db    ? ;
.bss:0040F055                 db    ? ;
.bss:0040F056                 db    ? ;
.bss:0040F057                 db    ? ;
.bss:0040F058                 db    ? ;
.bss:0040F059                 db    ? ;
.bss:0040F05A                 db    ? ;
.bss:0040F05B                 db    ? ;
.bss:0040F05C                 db    ? ;
.bss:0040F05D                 db    ? ;
.bss:0040F05E                 db    ? ;
.bss:0040F05F                 db    ? ;
.bss:0040F060                 db    ? ;
.bss:0040F061                 db    ? ;
.bss:0040F062                 db    ? ;
.bss:0040F063                 db    ? ;
.bss:0040F064                 db    ? ;
.bss:0040F065                 db    ? ;
.bss:0040F066                 db    ? ;
.bss:0040F067                 db    ? ;
.bss:0040F068                 db    ? ;
.bss:0040F069                 db    ? ;
.bss:0040F06A                 db    ? ;
.bss:0040F06B                 db    ? ;
.bss:0040F06C                 db    ? ;
.bss:0040F06D                 db    ? ;
.bss:0040F06E                 db    ? ;
.bss:0040F06F                 db    ? ;
.bss:0040F070                 db    ? ;
.bss:0040F071                 db    ? ;
.bss:0040F072                 db    ? ;
.bss:0040F073                 db    ? ;
.bss:0040F074                 db    ? ;
.bss:0040F075                 db    ? ;
.bss:0040F076                 db    ? ;
.bss:0040F077                 db    ? ;
.bss:0040F078                 db    ? ;
.bss:0040F079                 db    ? ;
.bss:0040F07A                 db    ? ;
.bss:0040F07B                 db    ? ;
.bss:0040F07C                 db    ? ;
.bss:0040F07D                 db    ? ;
.bss:0040F07E                 db    ? ;
.bss:0040F07F                 db    ? ;
.bss:0040F080                 db    ? ;
.bss:0040F081                 db    ? ;
.bss:0040F082                 db    ? ;
.bss:0040F083                 db    ? ;
.bss:0040F084                 db    ? ;
.bss:0040F085                 db    ? ;
.bss:0040F086                 db    ? ;
.bss:0040F087                 db    ? ;
.bss:0040F088                 db    ? ;
.bss:0040F089                 db    ? ;
.bss:0040F08A                 db    ? ;
.bss:0040F08B                 db    ? ;
.bss:0040F08C                 db    ? ;
.bss:0040F08D                 db    ? ;
.bss:0040F08E                 db    ? ;
.bss:0040F08F                 db    ? ;
.bss:0040F090                 db    ? ;
.bss:0040F091                 db    ? ;
.bss:0040F092                 db    ? ;
.bss:0040F093                 db    ? ;
.bss:0040F094                 db    ? ;
.bss:0040F095                 db    ? ;
.bss:0040F096                 db    ? ;
.bss:0040F097                 db    ? ;
.bss:0040F098                 db    ? ;
.bss:0040F099                 db    ? ;
.bss:0040F09A                 db    ? ;
.bss:0040F09B                 db    ? ;
.bss:0040F09C                 db    ? ;
.bss:0040F09D                 db    ? ;
.bss:0040F09E                 db    ? ;
.bss:0040F09F                 db    ? ;
.bss:0040F0A0                 db    ? ;
.bss:0040F0A1                 db    ? ;
.bss:0040F0A2                 db    ? ;
.bss:0040F0A3                 db    ? ;
.bss:0040F0A4                 db    ? ;
.bss:0040F0A5                 db    ? ;
.bss:0040F0A6                 db    ? ;
.bss:0040F0A7                 db    ? ;
.bss:0040F0A8                 db    ? ;
.bss:0040F0A9                 db    ? ;
.bss:0040F0AA                 db    ? ;
.bss:0040F0AB                 db    ? ;
.bss:0040F0AC                 db    ? ;
.bss:0040F0AD                 db    ? ;
.bss:0040F0AE                 db    ? ;
.bss:0040F0AF                 db    ? ;
.bss:0040F0B0                 db    ? ;
.bss:0040F0B1                 db    ? ;
.bss:0040F0B2                 db    ? ;
.bss:0040F0B3                 db    ? ;
.bss:0040F0B4                 db    ? ;
.bss:0040F0B5                 db    ? ;
.bss:0040F0B6                 db    ? ;
.bss:0040F0B7                 db    ? ;
.bss:0040F0B8                 db    ? ;
.bss:0040F0B9                 db    ? ;
.bss:0040F0BA                 db    ? ;
.bss:0040F0BB                 db    ? ;
.bss:0040F0BC                 db    ? ;
.bss:0040F0BD                 db    ? ;
.bss:0040F0BE                 db    ? ;
.bss:0040F0BF                 db    ? ;
.bss:0040F0C0                 db    ? ;
.bss:0040F0C1                 db    ? ;
.bss:0040F0C2                 db    ? ;
.bss:0040F0C3                 db    ? ;
.bss:0040F0C4                 db    ? ;
.bss:0040F0C5                 db    ? ;
.bss:0040F0C6                 db    ? ;
.bss:0040F0C7                 db    ? ;
.bss:0040F0C8                 db    ? ;
.bss:0040F0C9                 db    ? ;
.bss:0040F0CA                 db    ? ;
.bss:0040F0CB                 db    ? ;
.bss:0040F0CC                 db    ? ;
.bss:0040F0CD                 db    ? ;
.bss:0040F0CE                 db    ? ;
.bss:0040F0CF                 db    ? ;
.bss:0040F0D0                 db    ? ;
.bss:0040F0D1                 db    ? ;
.bss:0040F0D2                 db    ? ;
.bss:0040F0D3                 db    ? ;
.bss:0040F0D4                 db    ? ;
.bss:0040F0D5                 db    ? ;
.bss:0040F0D6                 db    ? ;
.bss:0040F0D7                 db    ? ;
.bss:0040F0D8                 db    ? ;
.bss:0040F0D9                 db    ? ;
.bss:0040F0DA                 db    ? ;
.bss:0040F0DB                 db    ? ;
.bss:0040F0DC                 db    ? ;
.bss:0040F0DD                 db    ? ;
.bss:0040F0DE                 db    ? ;
.bss:0040F0DF                 db    ? ;
.bss:0040F0E0                 db    ? ;
.bss:0040F0E1                 db    ? ;
.bss:0040F0E2                 db    ? ;
.bss:0040F0E3                 db    ? ;
.bss:0040F0E4                 db    ? ;
.bss:0040F0E5                 db    ? ;
.bss:0040F0E6                 db    ? ;
.bss:0040F0E7                 db    ? ;
.bss:0040F0E8                 db    ? ;
.bss:0040F0E9                 db    ? ;
.bss:0040F0EA                 db    ? ;
.bss:0040F0EB                 db    ? ;
.bss:0040F0EC                 db    ? ;
.bss:0040F0ED                 db    ? ;
.bss:0040F0EE                 db    ? ;
.bss:0040F0EF                 db    ? ;
.bss:0040F0F0                 db    ? ;
.bss:0040F0F1                 db    ? ;
.bss:0040F0F2                 db    ? ;
.bss:0040F0F3                 db    ? ;
.bss:0040F0F4                 db    ? ;
.bss:0040F0F5                 db    ? ;
.bss:0040F0F6                 db    ? ;
.bss:0040F0F7                 db    ? ;
.bss:0040F0F8                 db    ? ;
.bss:0040F0F9                 db    ? ;
.bss:0040F0FA                 db    ? ;
.bss:0040F0FB                 db    ? ;
.bss:0040F0FC                 db    ? ;
.bss:0040F0FD                 db    ? ;
.bss:0040F0FE                 db    ? ;
.bss:0040F0FF                 db    ? ;
.bss:0040F100 dword_40F100    dd ?                    ; DATA XREF: .text:loc_4029A1↑o
.bss:0040F100                                         ; .text:loc_4029C0↑o ...
.bss:0040F104 dword_40F104    dd ?                    ; DATA XREF: .text:loc_402A40↑o
.bss:0040F104                                         ; .text:00402EC8↑r ...
.bss:0040F108 dword_40F108    dd ?                    ; DATA XREF: .text:00402EC2↑r
.bss:0040F108                                         ; sub_402F70+2C↑r
.bss:0040F10C dword_40F10C    dd ?                    ; DATA XREF: .text:00402EB6↑r
.bss:0040F10C                                         ; sub_402F70+22↑r
.bss:0040F110 dword_40F110    dd ?                    ; DATA XREF: .text:00402ED2↑r
.bss:0040F110                                         ; sub_402F70+36↑r
.bss:0040F114 dword_40F114    dd ?                    ; DATA XREF: .text:00402EE2↑r
.bss:0040F114                                         ; sub_402F70+4E↑r
.bss:0040F118 dword_40F118    dd ?                    ; DATA XREF: .text:00402EFF↑r
.bss:0040F118                                         ; sub_402F70+62↑r
.bss:0040F11C dword_40F11C    dd ?                    ; DATA XREF: .text:00402EF5↑r
.bss:0040F11C                                         ; sub_402F70+70↑r
.bss:0040F120 dword_40F120    dd ?                    ; DATA XREF: .text:00402ED8↑r
.bss:0040F120                                         ; sub_402F70+7A↑r
.bss:0040F124                 align 10h
.bss:0040F130 dword_40F130    dd ?                    ; DATA XREF: sub_403FC0+9↑o
.bss:0040F130                                         ; sub_403FC0+17↑w ...
.bss:0040F134 dword_40F134    dd ?                    ; DATA XREF: sub_403FC0+21↑w
.bss:0040F134                                         ; .text:00404079↑w
.bss:0040F138 dword_40F138    dd ?                    ; DATA XREF: sub_403FC0+77↑r
.bss:0040F138                                         ; .text:004040C7↑r
.bss:0040F13C dword_40F13C    dd ?                    ; DATA XREF: sub_403FC0+6B↑r
.bss:0040F13C                                         ; .text:004040BB↑r
.bss:0040F140                 db    ? ;
.bss:0040F141                 db    ? ;
.bss:0040F142                 db    ? ;
.bss:0040F143                 db    ? ;
.bss:0040F144                 db    ? ;
.bss:0040F145                 db    ? ;
.bss:0040F146                 db    ? ;
.bss:0040F147                 db    ? ;
.bss:0040F148                 db    ? ;
.bss:0040F149                 db    ? ;
.bss:0040F14A                 db    ? ;
.bss:0040F14B                 db    ? ;
.bss:0040F14C                 db    ? ;
.bss:0040F14D                 db    ? ;
.bss:0040F14E                 db    ? ;
.bss:0040F14F                 db    ? ;
.bss:0040F150                 db    ? ;
.bss:0040F151                 db    ? ;
.bss:0040F152                 db    ? ;
.bss:0040F153                 db    ? ;
.bss:0040F154                 db    ? ;
.bss:0040F155                 db    ? ;
.bss:0040F156                 db    ? ;
.bss:0040F157                 db    ? ;
.bss:0040F158                 db    ? ;
.bss:0040F159                 db    ? ;
.bss:0040F15A                 db    ? ;
.bss:0040F15B                 db    ? ;
.bss:0040F15C                 db    ? ;
.bss:0040F15D                 db    ? ;
.bss:0040F15E                 db    ? ;
.bss:0040F15F                 db    ? ;
.bss:0040F160 ; char *dword_40F160
.bss:0040F160 dword_40F160    dd ?                    ; DATA XREF: .text:004048A4↑w
.bss:0040F160                                         ; sub_4048D0+58↑r
.bss:0040F164                 align 10h
.bss:0040F170 ; char *Str1
.bss:0040F170 Str1            dd ?                    ; DATA XREF: sub_404E34:loc_404E6D↑w
.bss:0040F170                                         ; sub_404E34:loc_404FA0↑r
.bss:0040F174                 align 10h
.bss:0040F180 dword_40F180    dd ?                    ; DATA XREF: sub_404E34+2D↑r
.bss:0040F180                                         ; sub_404E34+3F↑w
.bss:0040F184                 align 10h
.bss:0040F190 dword_40F190    dd ?                    ; DATA XREF: sub_405880+100↑r
.bss:0040F190                                         ; sub_405880+308↑w
.bss:0040F194                 align 10h
.bss:0040F1A0 ; char *Str
.bss:0040F1A0 Str             dd ?                    ; DATA XREF: sub_405880:loc_405BE4↑r
.bss:0040F1A0                                         ; sub_405880+3B6↑r ...
.bss:0040F1A4                 align 10h
.bss:0040F1B0 dword_40F1B0    dd ?                    ; DATA XREF: sub_407230+1C↑r
.bss:0040F1B0                                         ; sub_407230+104↑w
.bss:0040F1B4                 align 10h
.bss:0040F1C0 dword_40F1C0    dd ?                    ; DATA XREF: sub_407230+B↑r
.bss:0040F1C0                                         ; sub_407230+71↑w
.bss:0040F1C4                 align 10h
.bss:0040F1D0 dword_40F1D0    dd ?                    ; DATA XREF: sub_407230+85↑r
.bss:0040F1D0                                         ; sub_407230+B9↑w
.bss:0040F1D4 dword_40F1D4    dd ?                    ; DATA XREF: sub_407230+C4↑w
.bss:0040F1D8 dword_40F1D8    dd ?                    ; DATA XREF: sub_407230+2E↑o
.bss:0040F1D8                                         ; sub_407230+CF↑w
.bss:0040F1DC dword_40F1DC    dd ?                    ; DATA XREF: sub_407230+DA↑w
.bss:0040F1E0                 db    ? ;
.bss:0040F1E1                 db    ? ;
.bss:0040F1E2                 db    ? ;
.bss:0040F1E3                 db    ? ;
.bss:0040F1E4                 db    ? ;
.bss:0040F1E5                 db    ? ;
.bss:0040F1E6                 db    ? ;
.bss:0040F1E7                 db    ? ;
.bss:0040F1E8                 db    ? ;
.bss:0040F1E9                 db    ? ;
.bss:0040F1EA                 db    ? ;
.bss:0040F1EB                 db    ? ;
.bss:0040F1EC                 db    ? ;
.bss:0040F1ED                 db    ? ;
.bss:0040F1EE                 db    ? ;
.bss:0040F1EF                 db    ? ;
.bss:0040F1F0                 db    ? ;
.bss:0040F1F1                 db    ? ;
.bss:0040F1F2                 db    ? ;
.bss:0040F1F3                 db    ? ;
.bss:0040F1F4                 db    ? ;
.bss:0040F1F5                 db    ? ;
.bss:0040F1F6                 db    ? ;
.bss:0040F1F7                 db    ? ;
.bss:0040F1F8                 db    ? ;
.bss:0040F1F9                 db    ? ;
.bss:0040F1FA                 db    ? ;
.bss:0040F1FB                 db    ? ;
.bss:0040F1FC                 db    ? ;
.bss:0040F1FD                 db    ? ;
.bss:0040F1FE                 db    ? ;
.bss:0040F1FF                 db    ? ;
.bss:0040F200                 db    ? ;
.bss:0040F201                 db    ? ;
.bss:0040F202                 db    ? ;
.bss:0040F203                 db    ? ;
.bss:0040F204                 db    ? ;
.bss:0040F205                 db    ? ;
.bss:0040F206                 db    ? ;
.bss:0040F207                 db    ? ;
.bss:0040F208                 db    ? ;
.bss:0040F209                 db    ? ;
.bss:0040F20A                 db    ? ;
.bss:0040F20B                 db    ? ;
.bss:0040F20C                 db    ? ;
.bss:0040F20D                 db    ? ;
.bss:0040F20E                 db    ? ;
.bss:0040F20F                 db    ? ;
.bss:0040F210                 db    ? ;
.bss:0040F211                 db    ? ;
.bss:0040F212                 db    ? ;
.bss:0040F213                 db    ? ;
.bss:0040F214                 db    ? ;
.bss:0040F215                 db    ? ;
.bss:0040F216                 db    ? ;
.bss:0040F217                 db    ? ;
.bss:0040F218                 db    ? ;
.bss:0040F219                 db    ? ;
.bss:0040F21A                 db    ? ;
.bss:0040F21B                 db    ? ;
.bss:0040F21C                 db    ? ;
.bss:0040F21D                 db    ? ;
.bss:0040F21E                 db    ? ;
.bss:0040F21F                 db    ? ;
.bss:0040F220                 db    ? ;
.bss:0040F221                 db    ? ;
.bss:0040F222                 db    ? ;
.bss:0040F223                 db    ? ;
.bss:0040F224                 db    ? ;
.bss:0040F225                 db    ? ;
.bss:0040F226                 db    ? ;
.bss:0040F227                 db    ? ;
.bss:0040F228                 db    ? ;
.bss:0040F229                 db    ? ;
.bss:0040F22A                 db    ? ;
.bss:0040F22B                 db    ? ;
.bss:0040F22C                 db    ? ;
.bss:0040F22D                 db    ? ;
.bss:0040F22E                 db    ? ;
.bss:0040F22F                 db    ? ;
.bss:0040F230                 db    ? ;
.bss:0040F231                 db    ? ;
.bss:0040F232                 db    ? ;
.bss:0040F233                 db    ? ;
.bss:0040F234                 db    ? ;
.bss:0040F235                 db    ? ;
.bss:0040F236                 db    ? ;
.bss:0040F237                 db    ? ;
.bss:0040F238                 db    ? ;
.bss:0040F239                 db    ? ;
.bss:0040F23A                 db    ? ;
.bss:0040F23B                 db    ? ;
.bss:0040F23C                 db    ? ;
.bss:0040F23D                 db    ? ;
.bss:0040F23E                 db    ? ;
.bss:0040F23F                 db    ? ;
.bss:0040F240                 db    ? ;
.bss:0040F241                 db    ? ;
.bss:0040F242                 db    ? ;
.bss:0040F243                 db    ? ;
.bss:0040F244                 db    ? ;
.bss:0040F245                 db    ? ;
.bss:0040F246                 db    ? ;
.bss:0040F247                 db    ? ;
.bss:0040F248                 db    ? ;
.bss:0040F249                 db    ? ;
.bss:0040F24A                 db    ? ;
.bss:0040F24B                 db    ? ;
.bss:0040F24C                 db    ? ;
.bss:0040F24D                 db    ? ;
.bss:0040F24E                 db    ? ;
.bss:0040F24F                 db    ? ;
.bss:0040F250                 db    ? ;
.bss:0040F251                 db    ? ;
.bss:0040F252                 db    ? ;
.bss:0040F253                 db    ? ;
.bss:0040F254                 db    ? ;
.bss:0040F255                 db    ? ;
.bss:0040F256                 db    ? ;
.bss:0040F257                 db    ? ;
.bss:0040F258                 db    ? ;
.bss:0040F259                 db    ? ;
.bss:0040F25A                 db    ? ;
.bss:0040F25B                 db    ? ;
.bss:0040F25C                 db    ? ;
.bss:0040F25D                 db    ? ;
.bss:0040F25E                 db    ? ;
.bss:0040F25F                 db    ? ;
.bss:0040F260                 db    ? ;
.bss:0040F261                 db    ? ;
.bss:0040F262                 db    ? ;
.bss:0040F263                 db    ? ;
.bss:0040F264                 db    ? ;
.bss:0040F265                 db    ? ;
.bss:0040F266                 db    ? ;
.bss:0040F267                 db    ? ;
.bss:0040F268                 db    ? ;
.bss:0040F269                 db    ? ;
.bss:0040F26A                 db    ? ;
.bss:0040F26B                 db    ? ;
.bss:0040F26C                 db    ? ;
.bss:0040F26D                 db    ? ;
.bss:0040F26E                 db    ? ;
.bss:0040F26F                 db    ? ;
.bss:0040F270                 db    ? ;
.bss:0040F271                 db    ? ;
.bss:0040F272                 db    ? ;
.bss:0040F273                 db    ? ;
.bss:0040F274                 db    ? ;
.bss:0040F275                 db    ? ;
.bss:0040F276                 db    ? ;
.bss:0040F277                 db    ? ;
.bss:0040F278                 db    ? ;
.bss:0040F279                 db    ? ;
.bss:0040F27A                 db    ? ;
.bss:0040F27B                 db    ? ;
.bss:0040F27C                 db    ? ;
.bss:0040F27D                 db    ? ;
.bss:0040F27E                 db    ? ;
.bss:0040F27F                 db    ? ;
.bss:0040F280                 db    ? ;
.bss:0040F281                 db    ? ;
.bss:0040F282                 db    ? ;
.bss:0040F283                 db    ? ;
.bss:0040F284                 db    ? ;
.bss:0040F285                 db    ? ;
.bss:0040F286                 db    ? ;
.bss:0040F287                 db    ? ;
.bss:0040F288                 db    ? ;
.bss:0040F289                 db    ? ;
.bss:0040F28A                 db    ? ;
.bss:0040F28B                 db    ? ;
.bss:0040F28C                 db    ? ;
.bss:0040F28D                 db    ? ;
.bss:0040F28E                 db    ? ;
.bss:0040F28F                 db    ? ;
.bss:0040F290                 db    ? ;
.bss:0040F291                 db    ? ;
.bss:0040F292                 db    ? ;
.bss:0040F293                 db    ? ;
.bss:0040F294                 db    ? ;
.bss:0040F295                 db    ? ;
.bss:0040F296                 db    ? ;
.bss:0040F297                 db    ? ;
.bss:0040F298                 db    ? ;
.bss:0040F299                 db    ? ;
.bss:0040F29A                 db    ? ;
.bss:0040F29B                 db    ? ;
.bss:0040F29C                 db    ? ;
.bss:0040F29D                 db    ? ;
.bss:0040F29E                 db    ? ;
.bss:0040F29F                 db    ? ;
.bss:0040F2A0                 db    ? ;
.bss:0040F2A1                 db    ? ;
.bss:0040F2A2                 db    ? ;
.bss:0040F2A3                 db    ? ;
.bss:0040F2A4                 db    ? ;
.bss:0040F2A5                 db    ? ;
.bss:0040F2A6                 db    ? ;
.bss:0040F2A7                 db    ? ;
.bss:0040F2A8                 db    ? ;
.bss:0040F2A9                 db    ? ;
.bss:0040F2AA                 db    ? ;
.bss:0040F2AB                 db    ? ;
.bss:0040F2AC                 db    ? ;
.bss:0040F2AD                 db    ? ;
.bss:0040F2AE                 db    ? ;
.bss:0040F2AF                 db    ? ;
.bss:0040F2B0                 db    ? ;
.bss:0040F2B1                 db    ? ;
.bss:0040F2B2                 db    ? ;
.bss:0040F2B3                 db    ? ;
.bss:0040F2B4                 db    ? ;
.bss:0040F2B5                 db    ? ;
.bss:0040F2B6                 db    ? ;
.bss:0040F2B7                 db    ? ;
.bss:0040F2B8                 db    ? ;
.bss:0040F2B9                 db    ? ;
.bss:0040F2BA                 db    ? ;
.bss:0040F2BB                 db    ? ;
.bss:0040F2BC                 db    ? ;
.bss:0040F2BD                 db    ? ;
.bss:0040F2BE                 db    ? ;
.bss:0040F2BF                 db    ? ;
.bss:0040F2C0                 db    ? ;
.bss:0040F2C1                 db    ? ;
.bss:0040F2C2                 db    ? ;
.bss:0040F2C3                 db    ? ;
.bss:0040F2C4                 db    ? ;
.bss:0040F2C5                 db    ? ;
.bss:0040F2C6                 db    ? ;
.bss:0040F2C7                 db    ? ;
.bss:0040F2C8                 db    ? ;
.bss:0040F2C9                 db    ? ;
.bss:0040F2CA                 db    ? ;
.bss:0040F2CB                 db    ? ;
.bss:0040F2CC                 db    ? ;
.bss:0040F2CD                 db    ? ;
.bss:0040F2CE                 db    ? ;
.bss:0040F2CF                 db    ? ;
.bss:0040F2D0                 db    ? ;
.bss:0040F2D1                 db    ? ;
.bss:0040F2D2                 db    ? ;
.bss:0040F2D3                 db    ? ;
.bss:0040F2D4                 db    ? ;
.bss:0040F2D5                 db    ? ;
.bss:0040F2D6                 db    ? ;
.bss:0040F2D7                 db    ? ;
.bss:0040F2D8                 db    ? ;
.bss:0040F2D9                 db    ? ;
.bss:0040F2DA                 db    ? ;
.bss:0040F2DB                 db    ? ;
.bss:0040F2DC                 db    ? ;
.bss:0040F2DD                 db    ? ;
.bss:0040F2DE                 db    ? ;
.bss:0040F2DF                 db    ? ;
.bss:0040F2E0                 db    ? ;
.bss:0040F2E1                 db    ? ;
.bss:0040F2E2                 db    ? ;
.bss:0040F2E3                 db    ? ;
.bss:0040F2E4                 db    ? ;
.bss:0040F2E5                 db    ? ;
.bss:0040F2E6                 db    ? ;
.bss:0040F2E7                 db    ? ;
.bss:0040F2E8                 db    ? ;
.bss:0040F2E9                 db    ? ;
.bss:0040F2EA                 db    ? ;
.bss:0040F2EB                 db    ? ;
.bss:0040F2EC                 db    ? ;
.bss:0040F2ED                 db    ? ;
.bss:0040F2EE                 db    ? ;
.bss:0040F2EF                 db    ? ;
.bss:0040F2F0                 db    ? ;
.bss:0040F2F1                 db    ? ;
.bss:0040F2F2                 db    ? ;
.bss:0040F2F3                 db    ? ;
.bss:0040F2F4                 db    ? ;
.bss:0040F2F5                 db    ? ;
.bss:0040F2F6                 db    ? ;
.bss:0040F2F7                 db    ? ;
.bss:0040F2F8                 db    ? ;
.bss:0040F2F9                 db    ? ;
.bss:0040F2FA                 db    ? ;
.bss:0040F2FB                 db    ? ;
.bss:0040F2FC                 db    ? ;
.bss:0040F2FD                 db    ? ;
.bss:0040F2FE                 db    ? ;
.bss:0040F2FF                 db    ? ;
.bss:0040F300                 db    ? ;
.bss:0040F301                 db    ? ;
.bss:0040F302                 db    ? ;
.bss:0040F303                 db    ? ;
.bss:0040F304                 db    ? ;
.bss:0040F305                 db    ? ;
.bss:0040F306                 db    ? ;
.bss:0040F307                 db    ? ;
.bss:0040F308                 db    ? ;
.bss:0040F309                 db    ? ;
.bss:0040F30A                 db    ? ;
.bss:0040F30B                 db    ? ;
.bss:0040F30C                 db    ? ;
.bss:0040F30D                 db    ? ;
.bss:0040F30E                 db    ? ;
.bss:0040F30F                 db    ? ;
.bss:0040F310                 db    ? ;
.bss:0040F311                 db    ? ;
.bss:0040F312                 db    ? ;
.bss:0040F313                 db    ? ;
.bss:0040F314                 db    ? ;
.bss:0040F315                 db    ? ;
.bss:0040F316                 db    ? ;
.bss:0040F317                 db    ? ;
.bss:0040F318                 db    ? ;
.bss:0040F319                 db    ? ;
.bss:0040F31A                 db    ? ;
.bss:0040F31B                 db    ? ;
.bss:0040F31C                 db    ? ;
.bss:0040F31D                 db    ? ;
.bss:0040F31E                 db    ? ;
.bss:0040F31F                 db    ? ;
.bss:0040F320                 db    ? ;
.bss:0040F321                 db    ? ;
.bss:0040F322                 db    ? ;
.bss:0040F323                 db    ? ;
.bss:0040F324                 db    ? ;
.bss:0040F325                 db    ? ;
.bss:0040F326                 db    ? ;
.bss:0040F327                 db    ? ;
.bss:0040F328                 db    ? ;
.bss:0040F329                 db    ? ;
.bss:0040F32A                 db    ? ;
.bss:0040F32B                 db    ? ;
.bss:0040F32C                 db    ? ;
.bss:0040F32D                 db    ? ;
.bss:0040F32E                 db    ? ;
.bss:0040F32F                 db    ? ;
.bss:0040F330                 db    ? ;
.bss:0040F331                 db    ? ;
.bss:0040F332                 db    ? ;
.bss:0040F333                 db    ? ;
.bss:0040F334                 db    ? ;
.bss:0040F335                 db    ? ;
.bss:0040F336                 db    ? ;
.bss:0040F337                 db    ? ;
.bss:0040F338                 db    ? ;
.bss:0040F339                 db    ? ;
.bss:0040F33A                 db    ? ;
.bss:0040F33B                 db    ? ;
.bss:0040F33C                 db    ? ;
.bss:0040F33D                 db    ? ;
.bss:0040F33E                 db    ? ;
.bss:0040F33F                 db    ? ;
.bss:0040F340                 db    ? ;
.bss:0040F341                 db    ? ;
.bss:0040F342                 db    ? ;
.bss:0040F343                 db    ? ;
.bss:0040F344                 db    ? ;
.bss:0040F345                 db    ? ;
.bss:0040F346                 db    ? ;
.bss:0040F347                 db    ? ;
.bss:0040F348                 db    ? ;
.bss:0040F349                 db    ? ;
.bss:0040F34A                 db    ? ;
.bss:0040F34B                 db    ? ;
.bss:0040F34C                 db    ? ;
.bss:0040F34D                 db    ? ;
.bss:0040F34E                 db    ? ;
.bss:0040F34F                 db    ? ;
.bss:0040F350                 db    ? ;
.bss:0040F351                 db    ? ;
.bss:0040F352                 db    ? ;
.bss:0040F353                 db    ? ;
.bss:0040F354                 db    ? ;
.bss:0040F355                 db    ? ;
.bss:0040F356                 db    ? ;
.bss:0040F357                 db    ? ;
.bss:0040F358                 db    ? ;
.bss:0040F359                 db    ? ;
.bss:0040F35A                 db    ? ;
.bss:0040F35B                 db    ? ;
.bss:0040F35C                 db    ? ;
.bss:0040F35D                 db    ? ;
.bss:0040F35E                 db    ? ;
.bss:0040F35F                 db    ? ;
.bss:0040F360                 db    ? ;
.bss:0040F361                 db    ? ;
.bss:0040F362                 db    ? ;
.bss:0040F363                 db    ? ;
.bss:0040F364                 db    ? ;
.bss:0040F365                 db    ? ;
.bss:0040F366                 db    ? ;
.bss:0040F367                 db    ? ;
.bss:0040F368                 db    ? ;
.bss:0040F369                 db    ? ;
.bss:0040F36A                 db    ? ;
.bss:0040F36B                 db    ? ;
.bss:0040F36C                 db    ? ;
.bss:0040F36D                 db    ? ;
.bss:0040F36E                 db    ? ;
.bss:0040F36F                 db    ? ;
.bss:0040F370                 db    ? ;
.bss:0040F371                 db    ? ;
.bss:0040F372                 db    ? ;
.bss:0040F373                 db    ? ;
.bss:0040F374                 db    ? ;
.bss:0040F375                 db    ? ;
.bss:0040F376                 db    ? ;
.bss:0040F377                 db    ? ;
.bss:0040F378                 db    ? ;
.bss:0040F379                 db    ? ;
.bss:0040F37A                 db    ? ;
.bss:0040F37B                 db    ? ;
.bss:0040F37C                 db    ? ;
.bss:0040F37D                 db    ? ;
.bss:0040F37E                 db    ? ;
.bss:0040F37F                 db    ? ;
.bss:0040F380                 db    ? ;
.bss:0040F381                 db    ? ;
.bss:0040F382                 db    ? ;
.bss:0040F383                 db    ? ;
.bss:0040F384                 db    ? ;
.bss:0040F385                 db    ? ;
.bss:0040F386                 db    ? ;
.bss:0040F387                 db    ? ;
.bss:0040F388                 db    ? ;
.bss:0040F389                 db    ? ;
.bss:0040F38A                 db    ? ;
.bss:0040F38B                 db    ? ;
.bss:0040F38C                 db    ? ;
.bss:0040F38D                 db    ? ;
.bss:0040F38E                 db    ? ;
.bss:0040F38F                 db    ? ;
.bss:0040F390                 db    ? ;
.bss:0040F391                 db    ? ;
.bss:0040F392                 db    ? ;
.bss:0040F393                 db    ? ;
.bss:0040F394                 db    ? ;
.bss:0040F395                 db    ? ;
.bss:0040F396                 db    ? ;
.bss:0040F397                 db    ? ;
.bss:0040F398                 db    ? ;
.bss:0040F399                 db    ? ;
.bss:0040F39A                 db    ? ;
.bss:0040F39B                 db    ? ;
.bss:0040F39C                 db    ? ;
.bss:0040F39D                 db    ? ;
.bss:0040F39E                 db    ? ;
.bss:0040F39F                 db    ? ;
.bss:0040F3A0                 db    ? ;
.bss:0040F3A1                 db    ? ;
.bss:0040F3A2                 db    ? ;
.bss:0040F3A3                 db    ? ;
.bss:0040F3A4                 db    ? ;
.bss:0040F3A5                 db    ? ;
.bss:0040F3A6                 db    ? ;
.bss:0040F3A7                 db    ? ;
.bss:0040F3A8                 db    ? ;
.bss:0040F3A9                 db    ? ;
.bss:0040F3AA                 db    ? ;
.bss:0040F3AB                 db    ? ;
.bss:0040F3AC                 db    ? ;
.bss:0040F3AD                 db    ? ;
.bss:0040F3AE                 db    ? ;
.bss:0040F3AF                 db    ? ;
.bss:0040F3B0                 db    ? ;
.bss:0040F3B1                 db    ? ;
.bss:0040F3B2                 db    ? ;
.bss:0040F3B3                 db    ? ;
.bss:0040F3B4                 db    ? ;
.bss:0040F3B5                 db    ? ;
.bss:0040F3B6                 db    ? ;
.bss:0040F3B7                 db    ? ;
.bss:0040F3B8                 db    ? ;
.bss:0040F3B9                 db    ? ;
.bss:0040F3BA                 db    ? ;
.bss:0040F3BB                 db    ? ;
.bss:0040F3BC                 db    ? ;
.bss:0040F3BD                 db    ? ;
.bss:0040F3BE                 db    ? ;
.bss:0040F3BF                 db    ? ;
.bss:0040F3C0                 db    ? ;
.bss:0040F3C1                 db    ? ;
.bss:0040F3C2                 db    ? ;
.bss:0040F3C3                 db    ? ;
.bss:0040F3C4                 db    ? ;
.bss:0040F3C5                 db    ? ;
.bss:0040F3C6                 db    ? ;
.bss:0040F3C7                 db    ? ;
.bss:0040F3C8                 db    ? ;
.bss:0040F3C9                 db    ? ;
.bss:0040F3CA                 db    ? ;
.bss:0040F3CB                 db    ? ;
.bss:0040F3CC                 db    ? ;
.bss:0040F3CD                 db    ? ;
.bss:0040F3CE                 db    ? ;
.bss:0040F3CF                 db    ? ;
.bss:0040F3D0 dword_40F3D0    dd ?                    ; DATA XREF: sub_409BF0+8↑r
.bss:0040F3D0                                         ; sub_409D00:loc_409D82↑w ...
.bss:0040F3D4                 align 10h
.bss:0040F3E0 ; struct _OSVERSIONINFOA VersionInformation
.bss:0040F3E0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_409D00:loc_409D20↑o
.bss:0040F3E0                                         ; sub_409D00+2C↑w ...
.bss:0040F474 word_40F474     dw ?                    ; DATA XREF: sub_409D00:loc_409DB3↑r
.bss:0040F476                 align 4
.bss:0040F478 word_40F478     dw ?                    ; DATA XREF: .text:loc_409776↑r
.bss:0040F478                                         ; .text:004097A4↑r ...
.bss:0040F47A byte_40F47A     db ?                    ; DATA XREF: .text:00409735↑r
.bss:0040F47B                 align 10h
.bss:0040F480 dword_40F480    dd ?                    ; DATA XREF: sub_409D00+6↑r
.bss:0040F480                                         ; sub_409D00+75↑w
.bss:0040F484                 align 10h
.bss:0040F490 dword_40F490    dd ?                    ; DATA XREF: sub_40A4B0+6E↑r
.bss:0040F490                                         ; sub_40A4B0+9A↑r ...
.bss:0040F494 dword_40F494    dd ?                    ; DATA XREF: sub_40A4B0:loc_40A518↑r
.bss:0040F494                                         ; sub_40A4B0+A0↑r ...
.bss:0040F498                 align 10h
.bss:0040F4A0 dword_40F4A0    dd ?                    ; DATA XREF: sub_40A9C0↑r
.bss:0040F4A0                                         ; .text:loc_40ABB2↑w
.bss:0040F4A4                 align 10h
.bss:0040F4B0 dword_40F4B0    dd ?                    ; DATA XREF: sub_401520+2F↑w
.bss:0040F4B0                                         ; sub_401520+CB↑r ...
.bss:0040F4B4                 db    ? ;
.bss:0040F4B5                 db    ? ;
.bss:0040F4B6                 db    ? ;
.bss:0040F4B7                 db    ? ;
.bss:0040F4B8                 db    ? ;
.bss:0040F4B9                 db    ? ;
.bss:0040F4BA                 db    ? ;
.bss:0040F4BB                 db    ? ;
.bss:0040F4BC                 db    ? ;
.bss:0040F4BD                 db    ? ;
.bss:0040F4BE                 db    ? ;
.bss:0040F4BF                 db    ? ;
.bss:0040F4C0                 db    ? ;
.bss:0040F4C1                 db    ? ;
.bss:0040F4C2                 db    ? ;
.bss:0040F4C3                 db    ? ;
.bss:0040F4C4                 db    ? ;
.bss:0040F4C5                 db    ? ;
.bss:0040F4C6                 db    ? ;
.bss:0040F4C7                 db    ? ;
.bss:0040F4C8                 db    ? ;
.bss:0040F4C9                 db    ? ;
.bss:0040F4CA                 db    ? ;
.bss:0040F4CB                 db    ? ;
.bss:0040F4CC                 db    ? ;
.bss:0040F4CD                 db    ? ;
.bss:0040F4CE                 db    ? ;
.bss:0040F4CF                 db    ? ;
.bss:0040F4D0 dword_40F4D0    dd ?                    ; DATA XREF: sub_403FC0+71↑w
.bss:0040F4D0                                         ; .text:004040C1↑w
.bss:0040F4D4                 align 10h
.bss:0040F4E0 dword_40F4E0    dd ?                    ; CODE XREF: sub_404E34+63↑p
.bss:0040F4E0                                         ; DATA XREF: sub_404D30+1E↑r ...
.bss:0040F4E4                 align 10h
.bss:0040F4F0 dword_40F4F0    dd ?                    ; DATA XREF: sub_404D30+4E↑w
.bss:0040F4F0                                         ; sub_404E34+AB↑w
.bss:0040F4F4                 db    ? ;
.bss:0040F4F5                 db    ? ;
.bss:0040F4F6                 db    ? ;
.bss:0040F4F7                 db    ? ;
.bss:0040F4F8                 db    ? ;
.bss:0040F4F9                 db    ? ;
.bss:0040F4FA                 db    ? ;
.bss:0040F4FB                 db    ? ;
.bss:0040F4FC                 db    ? ;
.bss:0040F4FD                 db    ? ;
.bss:0040F4FE                 db    ? ;
.bss:0040F4FF                 db    ? ;
.bss:0040F500                 db    ? ;
.bss:0040F501                 db    ? ;
.bss:0040F502                 db    ? ;
.bss:0040F503                 db    ? ;
.bss:0040F504                 db    ? ;
.bss:0040F505                 db    ? ;
.bss:0040F506                 db    ? ;
.bss:0040F507                 db    ? ;
.bss:0040F508                 db    ? ;
.bss:0040F509                 db    ? ;
.bss:0040F50A                 db    ? ;
.bss:0040F50B                 db    ? ;
.bss:0040F50C                 db    ? ;
.bss:0040F50D                 db    ? ;
.bss:0040F50E                 db    ? ;
.bss:0040F50F                 db    ? ;
.bss:0040F510                 db    ? ;
.bss:0040F511                 db    ? ;
.bss:0040F512                 db    ? ;
.bss:0040F513                 db    ? ;
.bss:0040F514                 db    ? ;
.bss:0040F515                 db    ? ;
.bss:0040F516                 db    ? ;
.bss:0040F517                 db    ? ;
.bss:0040F518                 db    ? ;
.bss:0040F519                 db    ? ;
.bss:0040F51A                 db    ? ;
.bss:0040F51B                 db    ? ;
.bss:0040F51C                 db    ? ;
.bss:0040F51D                 db    ? ;
.bss:0040F51E                 db    ? ;
.bss:0040F51F                 db    ? ;
.bss:0040F520 dword_40F520    dd ?                    ; DATA XREF: sub_404E34+13↑r
.bss:0040F524                 align 1000h
.bss:0040F524 _bss            ends
.bss:0040F524
.idata:00410000 ; Section 4. (virtual address 00010000)
.idata:00410000 ; Virtual size                  : 00000D4C (   3404.)
.idata:00410000 ; Section size in file          : 00000E00 (   3584.)
.idata:00410000 ; Offset to raw data for section: 0000C800
.idata:00410000 ; Flags C0000040: Data Readable Writable
.idata:00410000 ; Alignment     : default
.idata:00410000 ; ===========================================================================
.idata:00410000
.idata:00410000 ; Segment type: Externs
.idata:00410000 ; _idata
.idata:00410000
.idata:00410001
.idata:00410298 ;
.idata:00410298 ; Imports from libintl3.dll
.idata:00410298 ;
.idata:00410298                 extrn __imp_libintl_bindtextdomain:dword
.idata:00410298                                         ; CODE XREF: sub_401520+50↑p
.idata:00410298                                         ; DATA XREF: sub_401520+50↑r ...
.idata:0041029C                 extrn libintl_gettext:dword
.idata:0041029C                                         ; CODE XREF: sub_401520+BF↑p
.idata:0041029C                                         ; sub_401520+150↑p ...
.idata:004102A0                 extrn libintl_textdomain:dword
.idata:004102A0                                         ; CODE XREF: sub_401520+5D↑p
.idata:004102A0                                         ; DATA XREF: sub_401520+5D↑r ...
.idata:004102A4
.idata:004102AC ;
.idata:004102AC ; Imports from ADVAPI32.DLL
.idata:004102AC ;
.idata:004102AC ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004102AC                 extrn __imp_RegCloseKey:dword
.idata:004102AC                                         ; DATA XREF: RegCloseKey↑r
.idata:004102B0 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004102B0                 extrn __imp_RegOpenKeyExA:dword
.idata:004102B0                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004102B4 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004102B4                 extrn __imp_RegQueryValueExA:dword
.idata:004102B4                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004102B8
.idata:004102C0 ;
.idata:004102C0 ; Imports from KERNEL32.dll
.idata:004102C0 ;
.idata:004102C0 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004102C0                 extrn __imp_AreFileApisANSI:dword
.idata:004102C0                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004102C4 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004102C4                 extrn __imp_CloseHandle:dword
.idata:004102C4                                         ; DATA XREF: CloseHandle↑r
.idata:004102C8 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004102C8                 extrn __imp_CreateDirectoryA:dword
.idata:004102C8                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004102CC ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004102CC                 extrn __imp_CreateFileA:dword
.idata:004102CC                                         ; DATA XREF: CreateFileA↑r
.idata:004102D0 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004102D0                 extrn __imp_DeviceIoControl:dword
.idata:004102D0                                         ; DATA XREF: DeviceIoControl↑r
.idata:004102D4 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004102D4                 extrn __imp_ExitProcess:dword
.idata:004102D4                                         ; DATA XREF: ExitProcess↑r
.idata:004102D8 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004102D8                 extrn __imp_FindClose:dword
.idata:004102D8                                         ; DATA XREF: FindClose↑r
.idata:004102DC ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004102DC                 extrn __imp_FindFirstFileA:dword
.idata:004102DC                                         ; DATA XREF: FindFirstFileA↑r
.idata:004102E0 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004102E0                 extrn __imp_FindNextFileA:dword
.idata:004102E0                                         ; DATA XREF: FindNextFileA↑r
.idata:004102E4 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:004102E4                 extrn __imp_FreeLibrary:dword
.idata:004102E4                                         ; DATA XREF: FreeLibrary↑r
.idata:004102E8 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:004102E8                 extrn __imp_GetCurrentDirectoryA:dword
.idata:004102E8                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:004102EC ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:004102EC                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:004102EC                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:004102F0 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:004102F0                 extrn __imp_GetDriveTypeA:dword
.idata:004102F0                                         ; DATA XREF: GetDriveTypeA↑r
.idata:004102F4 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:004102F4                 extrn __imp_GetFileAttributesA:dword
.idata:004102F4                                         ; DATA XREF: GetFileAttributesA↑r
.idata:004102F8 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:004102F8                 extrn __imp_GetFileInformationByHandle:dword
.idata:004102F8                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:004102FC ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:004102FC                 extrn __imp_GetFileSize:dword
.idata:004102FC                                         ; DATA XREF: GetFileSize↑r
.idata:00410300 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00410300                 extrn __imp_GetFileType:dword
.idata:00410300                                         ; DATA XREF: GetFileType↑r
.idata:00410304 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00410304                 extrn __imp_GetFullPathNameA:dword
.idata:00410304                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00410308 ; DWORD (__stdcall *GetLastError)()
.idata:00410308                 extrn __imp_GetLastError:dword
.idata:00410308                                         ; DATA XREF: GetLastError↑r
.idata:0041030C ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041030C                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041030C                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00410310 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00410310                 extrn __imp_GetModuleFileNameA:dword
.idata:00410310                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00410314 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00410314                 extrn __imp_GetModuleHandleA:dword
.idata:00410314                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00410318 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00410318                 extrn __imp_GetProcAddress:dword
.idata:00410318                                         ; DATA XREF: GetProcAddress↑r
.idata:0041031C ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041031C                 extrn __imp_GetProcessHeap:dword
.idata:0041031C                                         ; DATA XREF: GetProcessHeap↑r
.idata:00410320 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00410320                 extrn __imp_GetShortPathNameA:dword
.idata:00410320                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00410324 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00410324                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00410324                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00410328 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00410328                 extrn __imp_GetTimeZoneInformation:dword
.idata:00410328                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041032C ; DWORD (__stdcall *GetVersion)()
.idata:0041032C                 extrn __imp_GetVersion:dword
.idata:0041032C                                         ; DATA XREF: GetVersion↑r
.idata:00410330 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00410330                 extrn __imp_GetVersionExA:dword
.idata:00410330                                         ; DATA XREF: GetVersionExA↑r
.idata:00410334 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00410334                 extrn __imp_GetVolumeInformationA:dword
.idata:00410334                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00410338 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00410338                 extrn __imp_HeapAlloc:dword
.idata:00410338                                         ; DATA XREF: HeapAlloc↑r
.idata:0041033C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041033C                 extrn __imp_HeapFree:dword
.idata:0041033C                                         ; DATA XREF: HeapFree↑r
.idata:00410340 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00410340                 extrn __imp_LoadLibraryA:dword
.idata:00410340                                         ; DATA XREF: LoadLibraryA↑r
.idata:00410344 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00410344                 extrn __imp_MultiByteToWideChar:dword
.idata:00410344                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00410348 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00410348                 extrn __imp_PeekNamedPipe:dword
.idata:00410348                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041034C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041034C                 extrn __imp_SetErrorMode:dword
.idata:0041034C                                         ; DATA XREF: SetErrorMode↑r
.idata:00410350 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00410350                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00410350                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00410354 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00410354                 extrn __imp_UnlockFile:dword
.idata:00410354                                         ; DATA XREF: UnlockFile↑r
.idata:00410358 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00410358                 extrn __imp_lstrcmpiA:dword
.idata:00410358                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041035C ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041035C                 extrn __imp_lstrcpyA:dword
.idata:0041035C                                         ; DATA XREF: lstrcpyA↑r
.idata:00410360
.idata:00410368 ;
.idata:00410368 ; Imports from msvcrt.dll
.idata:00410368 ;
.idata:00410368 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00410368                 extrn __imp__chmod:dword
.idata:00410368                                         ; DATA XREF: _chmod↑r
.idata:0041036C ; int (__cdecl *_getpid)()
.idata:0041036C                 extrn __imp__getpid:dword
.idata:0041036C                                         ; DATA XREF: _getpid↑r
.idata:00410370 ; char *(__cdecl *_strdup)(const char *String)
.idata:00410370                 extrn __imp__strdup:dword
.idata:00410370                                         ; DATA XREF: _strdup↑r
.idata:00410374 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:00410374                 extrn __imp__stricmp:dword
.idata:00410374                                         ; DATA XREF: _stricmp↑r
.idata:00410378
.idata:00410380 ;
.idata:00410380 ; Imports from MSVCP60.DLL
.idata:00410380 ;
.idata:00410380 ; size_t (__cdecl *mbrlen)(const char *Ch, size_t SizeInBytes, mbstate_t *State)
.idata:00410380                 extrn __imp_mbrlen:dword
.idata:00410380                                         ; DATA XREF: mbrlen↑r
.idata:00410384 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00410384                 extrn __imp_mbrtowc:dword
.idata:00410384                                         ; DATA XREF: mbrtowc↑r
.idata:00410388
.idata:00410390 ;
.idata:00410390 ; Imports from msvcrt.dll
.idata:00410390 ;
.idata:00410390                 extrn __imp___getmainargs:dword
.idata:00410390                                         ; DATA XREF: __getmainargs↑r
.idata:00410394 ; int _mb_cur_max
.idata:00410394                 extrn __mb_cur_max:dword
.idata:00410394                                         ; DATA XREF: sub_401ED0+7↑r
.idata:00410394                                         ; sub_401ED0+5F3↑r
.idata:00410398 ; char ***(__cdecl *__p__environ)()
.idata:00410398                 extrn __imp___p__environ:dword
.idata:00410398                                         ; DATA XREF: __p__environ↑r
.idata:0041039C ; int *(__cdecl *__p__fmode)()
.idata:0041039C                 extrn __imp___p__fmode:dword
.idata:0041039C                                         ; DATA XREF: __p__fmode↑r
.idata:004103A0 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004103A0                 extrn __set_app_type:dword
.idata:004103A0                                         ; CODE XREF: start+D↑p
.idata:004103A0                                         ; .text:0040102D↑p
.idata:004103A0                                         ; DATA XREF: ...
.idata:004103A4                 extrn __imp__assert:dword
.idata:004103A4                                         ; DATA XREF: _assert↑r
.idata:004103A8 ; void (__cdecl *_cexit)()
.idata:004103A8                 extrn __imp__cexit:dword
.idata:004103A8                                         ; DATA XREF: _cexit↑r
.idata:004103AC ; int (__cdecl *_close)(int FileHandle)
.idata:004103AC                 extrn __imp__close:dword
.idata:004103AC                                         ; DATA XREF: _close↑r
.idata:004103B0 ; int *(__cdecl *_errno)()
.idata:004103B0                 extrn __imp__errno:dword
.idata:004103B0                                         ; DATA XREF: _errno↑r
.idata:004103B4 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004103B4                 extrn __imp__fdopen:dword
.idata:004103B4                                         ; DATA XREF: _fdopen↑r
.idata:004103B8 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004103B8                 extrn __imp__filelengthi64:dword
.idata:004103B8                                         ; DATA XREF: _filelengthi64↑r
.idata:004103BC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004103BC                 extrn __imp__flsbuf:dword
.idata:004103BC                                         ; DATA XREF: _flsbuf↑r
.idata:004103C0 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004103C0                 extrn __imp__get_osfhandle:dword
.idata:004103C0                                         ; DATA XREF: _get_osfhandle↑r
.idata:004103C4 ; FILE iob[]
.idata:004103C4                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004103C4                                         ; sub_401080+75↑r ...
.idata:004103C8 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004103C8                 extrn __imp__isctype:dword
.idata:004103C8                                         ; DATA XREF: _isctype↑r
.idata:004103CC ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004103CC                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004103CC                                         ; DATA XREF: .text:0040106C↑r
.idata:004103D0 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004103D0                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004103D4 ; const unsigned __int16 *pctype
.idata:004103D4                 extrn _pctype:dword     ; DATA XREF: sub_401ED0:loc_4025C4↑r
.idata:004103D8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004103D8                 extrn __imp__setmode:dword
.idata:004103D8                                         ; DATA XREF: _setmode↑r
.idata:004103DC ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:004103DC                 extrn __imp__stricmp_0:dword
.idata:004103DC                                         ; DATA XREF: _stricmp_0↑r
.idata:004103E0 ; void (__cdecl __noreturn *abort)()
.idata:004103E0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004103E4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004103E4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004103E4                                         ; DATA XREF: sub_401040+C↑r
.idata:004103E8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004103E8                 extrn __imp_calloc:dword
.idata:004103E8                                         ; DATA XREF: calloc↑r
.idata:004103EC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004103EC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004103F0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004103F0                 extrn __imp_fclose:dword
.idata:004103F0                                         ; DATA XREF: fclose↑r
.idata:004103F4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004103F4                 extrn __imp_fflush:dword
.idata:004103F4                                         ; DATA XREF: fflush↑r
.idata:004103F8 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004103F8                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004103FC ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004103FC                 extrn __imp_fprintf:dword
.idata:004103FC                                         ; DATA XREF: fprintf↑r
.idata:00410400 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00410400                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00410404 ; void (__cdecl *free)(void *Block)
.idata:00410404                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00410408 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00410408                 extrn __imp_getenv:dword
.idata:00410408                                         ; DATA XREF: getenv↑r
.idata:0041040C ; int (__cdecl *isalpha)(int C)
.idata:0041040C                 extrn __imp_isalpha:dword
.idata:0041040C                                         ; DATA XREF: isalpha↑r
.idata:00410410 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00410410                 extrn __imp_iswctype:dword
.idata:00410410                                         ; DATA XREF: iswctype↑r
.idata:00410414 ; void *(__cdecl *malloc)(size_t Size)
.idata:00410414                 extrn __imp_malloc:dword
.idata:00410414                                         ; DATA XREF: malloc↑r
.idata:00410418 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00410418                 extrn __imp_memcpy:dword
.idata:00410418                                         ; DATA XREF: memcpy↑r
.idata:0041041C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041041C                 extrn __imp_memset:dword
.idata:0041041C                                         ; DATA XREF: memset↑r
.idata:00410420 ; int (*printf)(const char *const Format, ...)
.idata:00410420                 extrn __imp_printf:dword
.idata:00410420                                         ; DATA XREF: printf↑r
.idata:00410424 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00410424                 extrn __imp_realloc:dword
.idata:00410424                                         ; DATA XREF: realloc↑r
.idata:00410428 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00410428                 extrn __imp_setlocale:dword
.idata:00410428                                         ; DATA XREF: setlocale↑r
.idata:0041042C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041042C                 extrn __imp_signal:dword
.idata:0041042C                                         ; DATA XREF: signal↑r
.idata:00410430 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00410430                 extrn __imp_sprintf:dword
.idata:00410430                                         ; DATA XREF: sprintf↑r
.idata:00410434 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00410434                 extrn __imp_sscanf:dword
.idata:00410434                                         ; DATA XREF: sscanf↑r
.idata:00410438 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00410438                 extrn __imp_strcat:dword
.idata:00410438                                         ; DATA XREF: strcat↑r
.idata:0041043C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041043C                 extrn __imp_strchr:dword
.idata:0041043C                                         ; DATA XREF: strchr↑r
.idata:00410440 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00410440                 extrn __imp_strcmp:dword
.idata:00410440                                         ; DATA XREF: strcmp↑r
.idata:00410444 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00410444                 extrn __imp_strcpy:dword
.idata:00410444                                         ; DATA XREF: strcpy↑r
.idata:00410448 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00410448                 extrn __imp_strerror:dword
.idata:00410448                                         ; DATA XREF: strerror↑r
.idata:0041044C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041044C                 extrn __imp_strlen:dword
.idata:0041044C                                         ; DATA XREF: strlen↑r
.idata:00410450 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00410450                 extrn __imp_strncmp:dword
.idata:00410450                                         ; DATA XREF: strncmp↑r
.idata:00410454 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00410454                 extrn __imp_strncpy:dword
.idata:00410454                                         ; DATA XREF: strncpy↑r
.idata:00410458 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:00410458                 extrn __imp_strpbrk:dword
.idata:00410458                                         ; DATA XREF: strpbrk↑r
.idata:0041045C ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:0041045C                 extrn __imp_strrchr:dword
.idata:0041045C                                         ; DATA XREF: strrchr↑r
.idata:00410460 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00410460                 extrn __imp_strspn:dword
.idata:00410460                                         ; DATA XREF: strspn↑r
.idata:00410464 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:00410464                 extrn __imp_strstr:dword
.idata:00410464                                         ; DATA XREF: strstr↑r
.idata:00410468 ; int (__cdecl *toupper)(int C)
.idata:00410468                 extrn __imp_toupper:dword
.idata:00410468                                         ; DATA XREF: toupper↑r
.idata:0041046C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041046C                 extrn __imp_vfprintf:dword
.idata:0041046C                                         ; DATA XREF: vfprintf↑r
.idata:00410470
.idata:00410478 ;
.idata:00410478 ; Imports from OLE32.dll
.idata:00410478 ;
.idata:00410478 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00410478                 extrn __imp_CoCreateInstance:dword
.idata:00410478                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041047C ; void (__stdcall *CoUninitialize)()
.idata:0041047C                 extrn __imp_CoUninitialize:dword
.idata:0041047C                                         ; DATA XREF: CoUninitialize↑r
.idata:00410480 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00410480                 extrn __imp_OleInitialize:dword
.idata:00410480                                         ; DATA XREF: OleInitialize↑r
.idata:00410484
.idata:00410484
.idata:00410484
.idata:00410484                 end start
