.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 6A44E99BBF859405F63AD65620B35E9565E445C1B0C8611EDDAABA43B7E074CE
.text:00401000 ; Input MD5    : 5F3FCA1FACD1D4A593A2A1C5C5BBCC53
.text:00401000 ; Input CRC32  : 83AD50FF
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/ln.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A245 (Wed Apr 20 18:41:09 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000168B0 (  92336.)
.text:00401000 ; Section size in file          : 00016A00 (  92672.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401FB0+84↓p
.text:00401040                                         ; .text:00416A90↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_416A30
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_418000
.text:004010A2                 mov     edx, dword_4180D0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_418004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4180F0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4180F0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_416A00
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_418000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_418004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401FB0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_416A30
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aBackup         db 'backup',0           ; DATA XREF: .text:off_401320↓o
.text:00401287 aDirectory      db 'directory',0        ; DATA XREF: .text:00401330↓o
.text:00401291 aNoDereference  db 'no-dereference',0   ; DATA XREF: .text:00401340↓o
.text:004012A0 aNoTargetDirect db 'no-target-directory',0
.text:004012A0                                         ; DATA XREF: .text:00401350↓o
.text:004012B4 aForce          db 'force',0            ; DATA XREF: .text:00401360↓o
.text:004012BA aInteractive    db 'interactive',0      ; DATA XREF: .text:00401370↓o
.text:004012C6 aSuffix         db 'suffix',0           ; DATA XREF: .text:00401380↓o
.text:004012CD aTargetDirector db 'target-directory',0 ; DATA XREF: .text:00401390↓o
.text:004012DE aSymbolic       db 'symbolic',0         ; DATA XREF: .text:004013A0↓o
.text:004012E7 aVerbose        db 'verbose',0          ; DATA XREF: .text:004013B0↓o
.text:004012EF aVersionControl_1 db 'version-control',0
.text:004012EF                                         ; DATA XREF: .text:004013C0↓o
.text:004012FF aHelp           db 'help',0             ; DATA XREF: .text:004013D0↓o
.text:00401304 aVersion        db 'version',0          ; DATA XREF: .text:004013E0↓o
.text:0040130C                 align 20h
.text:00401320 off_401320      dd offset aBackup       ; DATA XREF: sub_401FB0+C8↓o
.text:00401320                                         ; "backup"
.text:00401324                 dd 2, 0
.text:0040132C                 dd 62h
.text:00401330                 dd offset aDirectory    ; "directory"
.text:00401334                 dd 2 dup(0)
.text:0040133C                 dd 46h
.text:00401340                 dd offset aNoDereference ; "no-dereference"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 6Eh
.text:00401350                 dd offset aNoTargetDirect ; "no-target-directory"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 54h
.text:00401360                 dd offset aForce        ; "force"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 66h
.text:00401370                 dd offset aInteractive  ; "interactive"
.text:00401374                 dd 2 dup(0)
.text:0040137C                 dd 69h
.text:00401380                 dd offset aSuffix       ; "suffix"
.text:00401384                 dd 1, 0
.text:0040138C                 dd 53h
.text:00401390                 dd offset aTargetDirector ; "target-directory"
.text:00401394                 dd 1, 0
.text:0040139C                 dd 74h
.text:004013A0                 dd offset aSymbolic     ; "symbolic"
.text:004013A4                 dd 2 dup(0)
.text:004013AC                 dd 73h
.text:004013B0                 dd offset aVerbose      ; "verbose"
.text:004013B4                 dd 2 dup(0)
.text:004013BC                 dd 76h
.text:004013C0                 dd offset aVersionControl_1 ; "version-control"
.text:004013C4                 dd 1, 0
.text:004013CC                 dd 56h
.text:004013D0                 dd offset aHelp         ; "help"
.text:004013D4                 dd 2 dup(0)
.text:004013DC                 dd 0FFFFFF7Eh
.text:004013E0                 dd offset aVersion      ; "version"
.text:004013E4                 dd 2 dup(0)
.text:004013EC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401400 ; const char Locale
.text:00401400 Locale          db 0                    ; DATA XREF: sub_401FB0+47↓o
.text:00401401                 align 20h
.text:00401420 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401420                                         ; DATA XREF: sub_401FB0+5B↓o
.text:00401443 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401FB0+63↓o
.text:00401443                                         ; sub_401FB0+70↓o
.text:0040144D ; const char VarName[]
.text:0040144D VarName         db 'SIMPLE_BACKUP_SUFFIX',0
.text:0040144D                                         ; DATA XREF: sub_401FB0+89↓o
.text:00401462 ; const char aBdfinstVfsTv[]
.text:00401462 aBdfinstVfsTv   db 'bdfinst:vFS:TV:',0  ; DATA XREF: sub_401FB0+D0↓o
.text:00401472                 align 10h
.text:00401480 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401480                                         ; DATA XREF: sub_401FB0:loc_4020E8↓o
.text:00401480                                         ; sub_402900+C↓o
.text:004014A7                 align 20h
.text:004014C0 aWarningVersion db 'warning: --version-control (-V) is obsolete;  support for it',0Ah
.text:004014C0                                         ; DATA XREF: sub_401FB0+175↓o
.text:004014C0                 db 'will be removed in some future release.  Use --backup=%s instead.'
.text:004014C0                 db 0
.text:0040153F                 align 10h
.text:00401540 aUsageSOptionTT db 'Usage: %s [OPTION]... [-T] TARGET LINK_NAME   (1st form)',0Ah
.text:00401540                                         ; DATA XREF: sub_401FB0+1F1↓o
.text:00401540                                         ; sub_402900:loc_402940↓o
.text:00401540                 db '  or:  %s [OPTION]... TARGET                  (2nd form)',0Ah
.text:00401540                 db '  or:  %s [OPTION]... TARGET... DIRECTORY     (3rd form)',0Ah
.text:00401540                 db '  or:  %s [OPTION]... -t DIRECTORY TARGET...  (4th form)',0Ah,0
.text:00401625                 align 20h
.text:00401640 aInThe1stFormCr db 'In the 1st form, create a link to TARGET with the name LINK_NAME.'
.text:00401640                                         ; DATA XREF: sub_401FB0+21C↓o
.text:00401640                                         ; sub_402900+6B↓o
.text:00401640                 db 0Ah
.text:00401640                 db 'In the 2nd form, create a link to TARGET in the current directory'
.text:00401640                 db '.',0Ah
.text:00401640                 db 'In the 3rd and 4th forms, create links to each TARGET in DIRECTOR'
.text:00401640                 db 'Y.',0Ah
.text:00401640                 db 'Create hard links by default, symbolic links with --symbolic.',0Ah
.text:00401640                 db 'When creating hard links, each TARGET must exist.',0Ah
.text:00401640                 db 0Ah,0
.text:0040177B                 align 10h
.text:00401780 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401780                                         ; DATA XREF: sub_401FB0+23E↓o
.text:00401780                                         ; sub_402900+8D↓o
.text:00401780                 db 'ns too.',0Ah,0
.text:004017CA                 align 20h
.text:004017E0 aBackupControlM db '      --backup[=CONTROL]      make a backup of each existing dest'
.text:004017E0                                         ; DATA XREF: sub_401FB0+260↓o
.text:004017E0                                         ; sub_402900+AF↓o
.text:004017E0                 db 'ination file',0Ah
.text:004017E0                 db '  -b                          like --backup but does not accept a'
.text:004017E0                 db 'n argument',0Ah
.text:004017E0                 db '  -d, -F, --directory         allow the superuser to attempt to h'
.text:004017E0                 db 'ard link',0Ah
.text:004017E0                 db '                                directories (note: will probably '
.text:004017E0                 db 'fail due to',0Ah
.text:004017E0                 db '                                system restrictions, even for the'
.text:004017E0                 db ' superuser)',0Ah
.text:004017E0                 db '  -f, --force                 remove existing destination files',0Ah
.text:004017E0                 db 0
.text:0040199F                 align 10h
.text:004019A0 aNNoDereference db '  -n, --no-dereference        treat destination that is a symlink'
.text:004019A0                                         ; DATA XREF: sub_401FB0+282↓o
.text:004019A0                                         ; sub_402900+D1↓o
.text:004019A0                 db ' to a',0Ah
.text:004019A0                 db '                                directory as if it were a normal '
.text:004019A0                 db 'file',0Ah
.text:004019A0                 db '  -i, --interactive           prompt whether to remove destinatio'
.text:004019A0                 db 'ns',0Ah
.text:004019A0                 db '  -s, --symbolic              make symbolic links instead of hard'
.text:004019A0                 db ' links',0Ah,0
.text:00401ABA                 align 10h
.text:00401AC0 aSSuffixSuffixO db '  -S, --suffix=SUFFIX         override the usual backup suffix',0Ah
.text:00401AC0                                         ; DATA XREF: sub_401FB0+2A4↓o
.text:00401AC0                                         ; sub_402900+F3↓o
.text:00401AC0                 db '  -t, --target-directory=DIRECTORY  specify the DIRECTORY in whic'
.text:00401AC0                 db 'h to create',0Ah
.text:00401AC0                 db '                                the links',0Ah
.text:00401AC0                 db '  -T, --no-target-directory   treat LINK_NAME as a normal file',0Ah
.text:00401AC0                 db '  -v, --verbose               print name of each file before link'
.text:00401AC0                 db 'ing',0Ah,0
.text:00401BFB                 align 10h
.text:00401C00 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401C00                                         ; DATA XREF: sub_401FB0+2C6↓o
.text:00401C00                                         ; sub_402900+115↓o
.text:00401C2D                 align 20h
.text:00401C40 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401C40                                         ; DATA XREF: sub_401FB0+2E8↓o
.text:00401C40                                         ; sub_402900+137↓o
.text:00401C76                 align 10h
.text:00401C80 aTheBackupSuffi db 0Ah                  ; DATA XREF: sub_401FB0+30A↓o
.text:00401C80                                         ; sub_402900+159↓o
.text:00401C80                 db 'The backup suffix is `~',27h,', unless set with --suffix or SIMPL'
.text:00401C80                 db 'E_BACKUP_SUFFIX.',0Ah
.text:00401C80                 db 'The version control method may be selected via the --backup optio'
.text:00401C80                 db 'n or through',0Ah
.text:00401C80                 db 'the VERSION_CONTROL environment variable.  Here are the values:',0Ah
.text:00401C80                 db 0Ah,0
.text:00401D5D                 align 10h
.text:00401D60 aNoneOffNeverMa db '  none, off       never make backups (even if --backup is given)',0Ah
.text:00401D60                                         ; DATA XREF: sub_401FB0+32C↓o
.text:00401D60                                         ; sub_402900+17B↓o
.text:00401D60                 db '  numbered, t     make numbered backups',0Ah
.text:00401D60                 db '  existing, nil   numbered if numbered backups exist, simple othe'
.text:00401D60                 db 'rwise',0Ah
.text:00401D60                 db '  simple, never   always make simple backups',0Ah,0
.text:00401E3E aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401FB0+34E↓o
.text:00401E3E                                         ; sub_402900+19D↓o
.text:00401E3E                 db 'Report bugs to <%s>.',0Ah,0
.text:00401E55 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401E55                                         ; DATA XREF: sub_401FB0+35B↓o
.text:00401E55                                         ; sub_402900+1AA↓o
.text:00401E6B aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401FB0+385↓o
.text:00401E7B aMikeParker     db 'Mike Parker',0      ; DATA XREF: sub_401FB0+38D↓o
.text:00401E87 a530            db '5.3.0',0            ; DATA XREF: sub_401FB0+398↓o
.text:00401E8D aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401FB0+3A0↓o
.text:00401E9B ; const FILE stru_401E9B
.text:00401E9B stru_401E9B     FILE <89006E6Ch, 6C756DF6h, 6C706974h, 61742065h, 74656772h, \
.text:00401E9B                                         ; DATA XREF: sub_401FB0+3A8↓o
.text:00401E9B                                         ; sub_401FB0+45F↓o
.text:00401E9B                       72696420h, 6F746365h, 73656972h>
.text:00401EBB                 db  20h
.text:00401EBC                 db  73h ; s
.text:00401EBD                 db  70h ; p
.text:00401EBE                 db  65h ; e
.text:00401EBF                 db  63h ; c
.text:00401EC0                 db  69h ; i
.text:00401EC1                 db  66h ; f
.text:00401EC2                 db  69h ; i
.text:00401EC3                 db  65h ; e
.text:00401EC4                 db  64h ; d
.text:00401EC5                 db    0
.text:00401EC6 aTargetSIsNotAD db 'target %s is not a directory',0
.text:00401EC6                                         ; DATA XREF: sub_401FB0+4D3↓o
.text:00401EC6                                         ; sub_401FB0+817↓o ...
.text:00401EE3 aAccessingS     db 'accessing %s',0     ; DATA XREF: sub_401FB0+514↓o
.text:00401EE3                                         ; sub_401FB0+8AE↓o ...
.text:00401EF0                 align 20h
.text:00401F00 aCannotCombineT db 'Cannot combine --target-directory and --no-target-directory',0
.text:00401F00                                         ; DATA XREF: sub_401FB0+586↓o
.text:00401F3C aBackupType     db 'backup type',0      ; DATA XREF: sub_401FB0:loc_402647↓o
.text:00401F48 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_401FB0+6D9↓o
.text:00401F59                 align 10h
.text:00401F60 aMissingDestina db 'missing destination file operand after %s',0
.text:00401F60                                         ; DATA XREF: sub_401FB0+713↓o
.text:00401F8A asc_401F8A      db '.',0                ; DATA XREF: sub_401FB0:loc_4028B8↓o
.text:00401F8C aMissingFileOpe db 'missing file operand',0
.text:00401F8C                                         ; DATA XREF: sub_401FB0:loc_4028C8↓o
.text:00401FA1 ; ---------------------------------------------------------------------------
.text:00401FA1                 jmp     short sub_401FB0
.text:00401FA1 ; ---------------------------------------------------------------------------
.text:00401FA3                 align 10h
.text:00401FB0
.text:00401FB0 ; =============== S U B R O U T I N E =======================================
.text:00401FB0
.text:00401FB0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401FB0
.text:00401FB0 sub_401FB0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401FB0                                         ; .text:00401FA1↑j
.text:00401FB0
.text:00401FB0 Category        = dword ptr -0D8h
.text:00401FB0 Locale          = dword ptr -0D4h
.text:00401FB0 var_D0          = dword ptr -0D0h
.text:00401FB0 var_CC          = byte ptr -0CCh
.text:00401FB0 var_C8          = byte ptr -0C8h
.text:00401FB0 var_C4          = dword ptr -0C4h
.text:00401FB0 var_C0          = dword ptr -0C0h
.text:00401FB0 var_AE          = byte ptr -0AEh
.text:00401FB0 var_AD          = byte ptr -0ADh
.text:00401FB0 ErrorMessage    = dword ptr -0ACh
.text:00401FB0 var_A5          = byte ptr -0A5h
.text:00401FB0 var_A4          = dword ptr -0A4h
.text:00401FB0 var_A0          = byte ptr -0A0h
.text:00401FB0 var_99          = byte ptr -99h
.text:00401FB0 lpFileName      = dword ptr -98h
.text:00401FB0 var_94          = dword ptr -94h
.text:00401FB0 var_90          = dword ptr -90h
.text:00401FB0 var_8A          = byte ptr -8Ah
.text:00401FB0 var_89          = byte ptr -89h
.text:00401FB0 var_88          = dword ptr -88h
.text:00401FB0 arg_0           = dword ptr  8
.text:00401FB0 arg_4           = dword ptr  0Ch
.text:00401FB0
.text:00401FB0                 push    ebp
.text:00401FB1                 xor     eax, eax
.text:00401FB3                 mov     ebp, esp
.text:00401FB5                 push    edi
.text:00401FB6                 push    esi
.text:00401FB7                 push    ebx
.text:00401FB8                 sub     esp, 0CCh
.text:00401FBE                 mov     edi, [ebp+arg_4]
.text:00401FC1                 and     esp, 0FFFFFFF0h
.text:00401FC4                 mov     esi, [ebp+arg_0]
.text:00401FC7                 call    __alloca
.text:00401FCC                 call    sub_416AD0
.text:00401FD1                 mov     [ebp+var_8A], 0
.text:00401FD8                 xor     edx, edx
.text:00401FDA                 xor     ecx, ecx
.text:00401FDC                 mov     [ebp+lpFileName], edx
.text:00401FE2                 mov     edx, [edi]
.text:00401FE4                 mov     [ebp+var_94], ecx
.text:00401FEA                 mov     [ebp+var_99], 0
.text:00401FF1                 mov     ds:dword_4196A0, edx
.text:00401FF7                 mov     [esp+0D8h+Locale], offset Locale ; Locale
.text:00401FFF                 mov     [esp+0D8h+Category], 0 ; Category
.text:00402006                 call    setlocale
.text:0040200B                 mov     [esp+0D8h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00402013                 mov     [esp+0D8h+Category], offset aCoreutils ; "coreutils"
.text:0040201A                 call    ds:libintl_bindtextdomain
.text:00402020                 mov     [esp+0D8h+Category], offset aCoreutils ; "coreutils"
.text:00402027                 call    ds:libintl_textdomain
.text:0040202D                 mov     [esp+0D8h+Category], offset sub_405490 ; void (__cdecl *)()
.text:00402034                 call    sub_401040
.text:00402039                 mov     [esp+0D8h+Category], offset VarName ; "SIMPLE_BACKUP_SUFFIX"
.text:00402040                 call    getenv
.text:00402045                 mov     [ebp+var_90], eax
.text:0040204B                 mov     ds:byte_419060, 0
.text:00402052                 mov     ds:byte_419050, 0
.text:00402059                 mov     ds:byte_419030, 0
.text:00402060                 mov     ds:byte_419040, 0
.text:00402067                 mov     ds:byte_419020, 0
.text:0040206E                 mov     esi, esi
.text:00402070
.text:00402070 loc_402070:                             ; CODE XREF: sub_401FB0+136↓j
.text:00402070                                         ; sub_401FB0+1BE↓j ...
.text:00402070                 mov     dword ptr [esp+0D8h+var_C8], 0 ; int
.text:00402078                 mov     dword ptr [esp+0D8h+var_CC], offset off_401320 ; char
.text:00402080                 mov     [esp+0D8h+var_D0], offset aBdfinstVfsTv ; "bdfinst:vFS:TV:"
.text:00402088                 mov     [esp+0D8h+Locale], edi ; int
.text:0040208C                 mov     [esp+0D8h+Category], esi ; int
.text:0040208F                 call    sub_405320
.text:00402094                 cmp     eax, 0FFFFFFFFh
.text:00402097                 jz      loc_40250C
.text:0040209D                 cmp     eax, 62h ; 'b'
.text:004020A0                 jz      loc_402160
.text:004020A6                 cmp     eax, 62h ; 'b'
.text:004020A9                 jg      loc_402380
.text:004020AF                 cmp     eax, 46h ; 'F'
.text:004020B2                 jz      loc_402370
.text:004020B8                 cmp     eax, 46h ; 'F'
.text:004020BB                 jle     loc_40218B
.text:004020C1                 cmp     eax, 54h ; 'T'
.text:004020C4                 jz      loc_40217F
.text:004020CA                 cmp     eax, 54h ; 'T'
.text:004020CD                 jg      short loc_402120
.text:004020CF                 cmp     eax, 53h ; 'S'
.text:004020D2                 jnz     short loc_4020E8
.text:004020D4                 mov     [ebp+var_8A], 1
.text:004020DB                 mov     eax, ds:dword_4196C0
.text:004020E0                 mov     [ebp+var_90], eax
.text:004020E6                 jmp     short loc_402070
.text:004020E8 ; ---------------------------------------------------------------------------
.text:004020E8
.text:004020E8 loc_4020E8:                             ; CODE XREF: sub_401FB0+122↑j
.text:004020E8                                         ; sub_401FB0+173↓j ...
.text:004020E8                 mov     [esp+0D8h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004020EF                 call    ds:libintl_gettext
.text:004020F5                 mov     ebx, ds:_iob
.text:004020FB                 mov     esi, ds:dword_4196A0
.text:00402101                 add     ebx, 40h ; '@'
.text:00402104                 mov     [esp+0D8h+var_D0], esi
.text:00402108                 mov     [esp+0D8h+Locale], eax ; Format
.text:0040210C                 mov     [esp+0D8h+Category], ebx ; Stream
.text:0040210F                 call    fprintf
.text:00402114                 mov     [esp+0D8h+Category], 1 ; Code
.text:0040211B
.text:0040211B loc_40211B:                             ; CODE XREF: sub_401FB0+372↓j
.text:0040211B                                         ; sub_401FB0+622↓j
.text:0040211B                 call    exit
.text:00402120 ; ---------------------------------------------------------------------------
.text:00402120
.text:00402120 loc_402120:                             ; CODE XREF: sub_401FB0+11D↑j
.text:00402120                 cmp     eax, 56h ; 'V'
.text:00402123                 jnz     short loc_4020E8
.text:00402125                 mov     [esp+0D8h+Category], offset aWarningVersion ; "warning: --version-control (-V) is obso"...
.text:0040212C                 call    ds:libintl_gettext
.text:00402132                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:0040213A                 mov     ebx, ds:dword_4196C0
.text:00402140                 mov     [esp+0D8h+Category], 0 ; Code
.text:00402147                 mov     dword ptr [esp+0D8h+var_CC], ebx ; char
.text:0040214B                 mov     [esp+0D8h+var_D0], eax ; char *
.text:0040214F                 call    sub_40E040
.text:00402154                 lea     esi, [esi+0]
.text:0040215A                 lea     edi, [edi+0]
.text:00402160
.text:00402160 loc_402160:                             ; CODE XREF: sub_401FB0+F0↑j
.text:00402160                 mov     [ebp+var_8A], 1
.text:00402167                 mov     eax, ds:dword_4196C0
.text:0040216C                 test    eax, eax
.text:0040216E                 jz      loc_402070
.text:00402174                 mov     [ebp+var_94], eax
.text:0040217A                 jmp     loc_402070
.text:0040217F ; ---------------------------------------------------------------------------
.text:0040217F
.text:0040217F loc_40217F:                             ; CODE XREF: sub_401FB0+114↑j
.text:0040217F                 mov     [ebp+var_99], 1
.text:00402186                 jmp     loc_402070
.text:0040218B ; ---------------------------------------------------------------------------
.text:0040218B
.text:0040218B loc_40218B:                             ; CODE XREF: sub_401FB0+10B↑j
.text:0040218B                 cmp     eax, 0FFFFFF7Dh
.text:00402190                 jz      loc_402327
.text:00402196                 cmp     eax, 0FFFFFF7Eh
.text:0040219B                 jnz     loc_4020E8
.text:004021A1                 mov     [esp+0D8h+Category], offset aUsageSOptionTT ; "Usage: %s [OPTION]... [-T] TARGET LINK_"...
.text:004021A8                 call    ds:libintl_gettext
.text:004021AE                 mov     edi, ds:dword_4196A0
.text:004021B4                 mov     [esp+0D8h+Category], eax ; Format
.text:004021B7                 mov     dword ptr [esp+0D8h+var_C8], edi
.text:004021BB                 mov     dword ptr [esp+0D8h+var_CC], edi
.text:004021BF                 mov     [esp+0D8h+var_D0], edi
.text:004021C3                 mov     [esp+0D8h+Locale], edi
.text:004021C7                 call    printf
.text:004021CC                 mov     [esp+0D8h+Category], offset aInThe1stFormCr ; "In the 1st form, create a link to TARGE"...
.text:004021D3                 call    ds:libintl_gettext
.text:004021D9                 mov     esi, ds:_iob
.text:004021DF                 add     esi, 20h ; ' '
.text:004021E2                 mov     [esp+0D8h+Locale], esi ; Stream
.text:004021E6                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004021E9                 call    fputs
.text:004021EE                 mov     [esp+0D8h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:004021F5                 call    ds:libintl_gettext
.text:004021FB                 mov     ebx, ds:_iob
.text:00402201                 add     ebx, 20h ; ' '
.text:00402204                 mov     [esp+0D8h+Locale], ebx ; Stream
.text:00402208                 mov     [esp+0D8h+Category], eax ; Buffer
.text:0040220B                 call    fputs
.text:00402210                 mov     [esp+0D8h+Category], offset aBackupControlM ; "      --backup[=CONTROL]      make a ba"...
.text:00402217                 call    ds:libintl_gettext
.text:0040221D                 mov     ecx, ds:_iob
.text:00402223                 add     ecx, 20h ; ' '
.text:00402226                 mov     [esp+0D8h+Locale], ecx ; Stream
.text:0040222A                 mov     [esp+0D8h+Category], eax ; Buffer
.text:0040222D                 call    fputs
.text:00402232                 mov     [esp+0D8h+Category], offset aNNoDereference ; "  -n, --no-dereference        treat des"...
.text:00402239                 call    ds:libintl_gettext
.text:0040223F                 mov     edi, ds:_iob
.text:00402245                 add     edi, 20h ; ' '
.text:00402248                 mov     [esp+0D8h+Locale], edi ; Stream
.text:0040224C                 mov     [esp+0D8h+Category], eax ; Buffer
.text:0040224F                 call    fputs
.text:00402254                 mov     [esp+0D8h+Category], offset aSSuffixSuffixO ; "  -S, --suffix=SUFFIX         override "...
.text:0040225B                 call    ds:libintl_gettext
.text:00402261                 mov     esi, ds:_iob
.text:00402267                 add     esi, 20h ; ' '
.text:0040226A                 mov     [esp+0D8h+Locale], esi ; Stream
.text:0040226E                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00402271                 call    fputs
.text:00402276                 mov     [esp+0D8h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040227D                 call    ds:libintl_gettext
.text:00402283                 mov     ebx, ds:_iob
.text:00402289                 add     ebx, 20h ; ' '
.text:0040228C                 mov     [esp+0D8h+Locale], ebx ; Stream
.text:00402290                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00402293                 call    fputs
.text:00402298                 mov     [esp+0D8h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040229F                 call    ds:libintl_gettext
.text:004022A5                 mov     ecx, ds:_iob
.text:004022AB                 add     ecx, 20h ; ' '
.text:004022AE                 mov     [esp+0D8h+Locale], ecx ; Stream
.text:004022B2                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004022B5                 call    fputs
.text:004022BA                 mov     [esp+0D8h+Category], offset aTheBackupSuffi ; "\nThe backup suffix is `~', unless set "...
.text:004022C1                 call    ds:libintl_gettext
.text:004022C7                 mov     edi, ds:_iob
.text:004022CD                 add     edi, 20h ; ' '
.text:004022D0                 mov     [esp+0D8h+Locale], edi ; Stream
.text:004022D4                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004022D7                 call    fputs
.text:004022DC                 mov     [esp+0D8h+Category], offset aNoneOffNeverMa ; "  none, off       never make backups (e"...
.text:004022E3                 call    ds:libintl_gettext
.text:004022E9                 mov     esi, ds:_iob
.text:004022EF                 add     esi, 20h ; ' '
.text:004022F2                 mov     [esp+0D8h+Locale], esi ; Stream
.text:004022F6                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004022F9                 call    fputs
.text:004022FE                 mov     [esp+0D8h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402305                 call    ds:libintl_gettext
.text:0040230B                 mov     [esp+0D8h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402313                 mov     [esp+0D8h+Category], eax ; Format
.text:00402316                 call    printf
.text:0040231B
.text:0040231B loc_40231B:                             ; CODE XREF: sub_401FB0+3B8↓j
.text:0040231B                 mov     [esp+0D8h+Category], 0
.text:00402322                 jmp     loc_40211B
.text:00402327 ; ---------------------------------------------------------------------------
.text:00402327
.text:00402327 loc_402327:                             ; CODE XREF: sub_401FB0+1E0↑j
.text:00402327                 mov     [esp+0D8h+var_C0], 0
.text:0040232F                 mov     edx, ds:_iob
.text:00402335                 mov     [esp+0D8h+var_C4], offset aDavidMackenzie ; "David MacKenzie"
.text:0040233D                 mov     dword ptr [esp+0D8h+var_C8], offset aMikeParker ; "Mike Parker"
.text:00402345                 add     edx, 20h ; ' '
.text:00402348                 mov     dword ptr [esp+0D8h+var_CC], offset a530 ; "5.3.0"
.text:00402350                 mov     [esp+0D8h+var_D0], offset aGnuCoreutils ; "GNU coreutils"
.text:00402358                 mov     [esp+0D8h+Locale], offset stru_401E9B ; FILE *
.text:00402360                 mov     [esp+0D8h+Category], edx ; FILE *
.text:00402363                 call    sub_4052E0
.text:00402368                 jmp     short loc_40231B
.text:00402368 ; ---------------------------------------------------------------------------
.text:0040236A                 align 10h
.text:00402370
.text:00402370 loc_402370:                             ; CODE XREF: sub_401FB0+102↑j
.text:00402370                                         ; sub_401FB0+3EB↓j
.text:00402370                 mov     ds:byte_419060, 1
.text:00402377                 jmp     loc_402070
.text:00402377 ; ---------------------------------------------------------------------------
.text:0040237C                 align 10h
.text:00402380
.text:00402380 loc_402380:                             ; CODE XREF: sub_401FB0+F9↑j
.text:00402380                 cmp     eax, 6Eh ; 'n'
.text:00402383                 jz      loc_402500
.text:00402389                 cmp     eax, 6Eh ; 'n'
.text:0040238C                 jg      short loc_4023D1
.text:0040238E                 cmp     eax, 66h ; 'f'
.text:00402391                 jz      short loc_4023BE
.text:00402393                 cmp     eax, 66h ; 'f'
.text:00402396                 jg      short loc_4023A2
.text:00402398                 cmp     eax, 64h ; 'd'
.text:0040239B                 jz      short loc_402370
.text:0040239D                 jmp     loc_4020E8
.text:004023A2 ; ---------------------------------------------------------------------------
.text:004023A2
.text:004023A2 loc_4023A2:                             ; CODE XREF: sub_401FB0+3E6↑j
.text:004023A2                 cmp     eax, 69h ; 'i'
.text:004023A5                 jnz     loc_4020E8
.text:004023AB                 mov     ds:byte_419040, 0
.text:004023B2                 mov     ds:byte_419030, 1
.text:004023B9                 jmp     loc_402070
.text:004023BE ; ---------------------------------------------------------------------------
.text:004023BE
.text:004023BE loc_4023BE:                             ; CODE XREF: sub_401FB0+3E1↑j
.text:004023BE                 mov     ds:byte_419040, 1
.text:004023C5                 mov     ds:byte_419030, 0
.text:004023CC                 jmp     loc_402070
.text:004023D1 ; ---------------------------------------------------------------------------
.text:004023D1
.text:004023D1 loc_4023D1:                             ; CODE XREF: sub_401FB0+3DC↑j
.text:004023D1                 cmp     eax, 74h ; 't'
.text:004023D4                 jz      short loc_402405
.text:004023D6                 cmp     eax, 74h ; 't'
.text:004023D9                 jg      short loc_4023F0
.text:004023DB                 cmp     eax, 73h ; 's'
.text:004023DE                 jnz     loc_4020E8
.text:004023E4                 mov     ds:byte_419020, 1
.text:004023EB                 jmp     loc_402070
.text:004023F0 ; ---------------------------------------------------------------------------
.text:004023F0
.text:004023F0 loc_4023F0:                             ; CODE XREF: sub_401FB0+429↑j
.text:004023F0                 cmp     eax, 76h ; 'v'
.text:004023F3                 jnz     loc_4020E8
.text:004023F9                 mov     ds:byte_419050, 1
.text:00402400                 jmp     loc_402070
.text:00402405 ; ---------------------------------------------------------------------------
.text:00402405
.text:00402405 loc_402405:                             ; CODE XREF: sub_401FB0+424↑j
.text:00402405                 mov     edx, [ebp+lpFileName]
.text:0040240B                 test    edx, edx
.text:0040240D                 jz      short loc_402445
.text:0040240F                 mov     [esp+0D8h+Category], (offset stru_401E9B._cnt+1)
.text:00402416                 call    ds:libintl_gettext
.text:0040241C                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00402424                 mov     [esp+0D8h+Category], 1 ; Code
.text:0040242B                 mov     [esp+0D8h+var_D0], eax ; char *
.text:0040242F                 call    sub_40E040
.text:00402434
.text:00402434 loc_402434:                             ; CODE XREF: sub_401FB0+4C3↓j
.text:00402434                                         ; sub_401FB0+4FE↓j
.text:00402434                 mov     ebx, ds:dword_4196C0
.text:0040243A                 mov     [ebp+lpFileName], ebx
.text:00402440                 jmp     loc_402070
.text:00402445 ; ---------------------------------------------------------------------------
.text:00402445
.text:00402445 loc_402445:                             ; CODE XREF: sub_401FB0+45D↑j
.text:00402445                 mov     ecx, ds:dword_4196C0
.text:0040244B                 lea     ebx, [ebp+var_88]
.text:00402451                 mov     [esp+0D8h+Locale], ebx ; int
.text:00402455                 mov     [esp+0D8h+Category], ecx ; char *
.text:00402458                 call    sub_40F0C0
.text:0040245D                 test    eax, eax
.text:0040245F                 jnz     short loc_4024B0
.text:00402461
.text:00402461 loc_402461:                             ; CODE XREF: sub_401FB0+548↓j
.text:00402461                 mov     edx, [ebp+var_88]
.text:00402467                 and     edx, 0F000h
.text:0040246D                 cmp     edx, 4000h
.text:00402473                 jz      short loc_402434
.text:00402475                 mov     ecx, ds:dword_4196C0
.text:0040247B                 mov     [esp+0D8h+Category], ecx ; char *
.text:0040247E                 call    sub_405670
.text:00402483                 mov     [esp+0D8h+Category], offset aTargetSIsNotAD ; "target %s is not a directory"
.text:0040248A                 mov     ebx, eax
.text:0040248C                 call    ds:libintl_gettext
.text:00402492                 mov     dword ptr [esp+0D8h+var_CC], ebx ; char
.text:00402496                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:0040249E                 mov     [esp+0D8h+Category], 1 ; Code
.text:004024A5                 mov     [esp+0D8h+var_D0], eax ; char *
.text:004024A9                 call    sub_40E040
.text:004024AE                 jmp     short loc_402434
.text:004024B0 ; ---------------------------------------------------------------------------
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: sub_401FB0+4AF↑j
.text:004024B0                 mov     ebx, ds:dword_4196C0
.text:004024B6                 mov     [esp+0D8h+Category], ebx ; char *
.text:004024B9                 call    sub_405670
.text:004024BE                 mov     dword ptr [ebp+var_A0], eax
.text:004024C4                 mov     [esp+0D8h+Category], offset aAccessingS ; "accessing %s"
.text:004024CB                 call    ds:libintl_gettext
.text:004024D1                 mov     ebx, eax
.text:004024D3                 call    _errno
.text:004024D8                 mov     [esp+0D8h+var_D0], ebx ; char *
.text:004024DC                 mov     ecx, dword ptr [ebp+var_A0]
.text:004024E2                 mov     dword ptr [esp+0D8h+var_CC], ecx ; char
.text:004024E6                 mov     edx, [eax]
.text:004024E8                 mov     [esp+0D8h+Category], 1 ; Code
.text:004024EF                 mov     [esp+0D8h+Locale], edx ; ErrorMessage
.text:004024F3                 call    sub_40E040
.text:004024F8                 jmp     loc_402461
.text:004024F8 ; ---------------------------------------------------------------------------
.text:004024FD                 align 10h
.text:00402500
.text:00402500 loc_402500:                             ; CODE XREF: sub_401FB0+3D3↑j
.text:00402500                 mov     byte_418010, 0
.text:00402507                 jmp     loc_402070
.text:0040250C ; ---------------------------------------------------------------------------
.text:0040250C
.text:0040250C loc_40250C:                             ; CODE XREF: sub_401FB0+E7↑j
.text:0040250C                 mov     ecx, dword_418020
.text:00402512                 sub     esi, ecx
.text:00402514                 lea     edi, [edi+ecx*4]
.text:00402517                 test    esi, esi
.text:00402519                 jle     loc_4028C8
.text:0040251F                 cmp     [ebp+var_99], 0
.text:00402526                 jz      loc_4026D0
.text:0040252C                 mov     edx, [ebp+lpFileName]
.text:00402532                 test    edx, edx
.text:00402534                 jz      short loc_40255B
.text:00402536                 mov     [esp+0D8h+Category], offset aCannotCombineT ; "Cannot combine --target-directory and -"...
.text:0040253D                 call    ds:libintl_gettext
.text:00402543                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:0040254B                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402552                 mov     [esp+0D8h+var_D0], eax ; char *
.text:00402556                 call    sub_40E040
.text:0040255B
.text:0040255B loc_40255B:                             ; CODE XREF: sub_401FB0+584↑j
.text:0040255B                 cmp     esi, 2
.text:0040255E                 jnz     loc_40267B
.text:00402564
.text:00402564 loc_402564:                             ; CODE XREF: sub_401FB0+728↓j
.text:00402564                                         ; sub_401FB0+7FD↓j ...
.text:00402564                 cmp     ds:byte_419020, 0
.text:0040256B                 jz      loc_40266B
.text:00402571                 mov     eax, offset sub_40F2B0
.text:00402576                 mov     ds:dword_419010, eax
.text:0040257B
.text:0040257B loc_40257B:                             ; CODE XREF: sub_401FB0+6C6↓j
.text:0040257B                 mov     ecx, [ebp+var_90]
.text:00402581                 test    ecx, ecx
.text:00402583                 jz      short loc_402598
.text:00402585                 mov     ebx, [ebp+var_90]
.text:0040258B                 mov     [esp+0D8h+Category], ebx ; char *
.text:0040258E                 call    sub_404D50
.text:00402593                 mov     Src, eax
.text:00402598
.text:00402598 loc_402598:                             ; CODE XREF: sub_401FB0+5D3↑j
.text:00402598                 xor     eax, eax
.text:0040259A                 cmp     [ebp+var_8A], 0
.text:004025A1                 jnz     loc_402647
.text:004025A7
.text:004025A7 loc_4025A7:                             ; CODE XREF: sub_401FB0+6B6↓j
.text:004025A7                 mov     ds:dword_419000, eax
.text:004025AC                 mov     edx, [ebp+lpFileName]
.text:004025B2                 test    edx, edx
.text:004025B4                 jz      short loc_402623
.text:004025B6                 mov     [ebp+var_89], 1
.text:004025BD                 xor     ebx, ebx
.text:004025BF                 cmp     ebx, esi
.text:004025C1                 jl      short loc_4025D7
.text:004025C3
.text:004025C3 loc_4025C3:                             ; CODE XREF: sub_401FB0+671↓j
.text:004025C3                                         ; sub_401FB0+692↓j
.text:004025C3                 xor     ecx, ecx
.text:004025C5                 cmp     [ebp+var_89], 0
.text:004025CC                 setz    cl
.text:004025CF                 mov     [esp+0D8h+Category], ecx
.text:004025D2                 jmp     loc_40211B
.text:004025D7 ; ---------------------------------------------------------------------------
.text:004025D7
.text:004025D7 loc_4025D7:                             ; CODE XREF: sub_401FB0+611↑j
.text:004025D7                                         ; sub_401FB0+66F↓j
.text:004025D7                 mov     [esp+0D8h+var_D0], 1 ; char
.text:004025DF                 mov     edx, [ebp+lpFileName]
.text:004025E5                 mov     [ebp+var_AE], 0
.text:004025EC                 mov     [esp+0D8h+Locale], edx ; lpFileName
.text:004025F0                 mov     ecx, [edi+ebx*4]
.text:004025F3                 mov     [esp+0D8h+Category], ecx ; Str
.text:004025F6                 call    sub_402C30
.text:004025FB                 test    al, al
.text:004025FD                 jz      short loc_40260F
.text:004025FF                 cmp     [ebp+var_89], 0
.text:00402606                 jz      short loc_40260F
.text:00402608                 mov     [ebp+var_AE], 1
.text:0040260F
.text:0040260F loc_40260F:                             ; CODE XREF: sub_401FB0+64D↑j
.text:0040260F                                         ; sub_401FB0+656↑j
.text:0040260F                 movzx   eax, [ebp+var_AE]
.text:00402616                 inc     ebx
.text:00402617                 cmp     ebx, esi
.text:00402619                 mov     [ebp+var_89], al
.text:0040261F                 jl      short loc_4025D7
.text:00402621                 jmp     short loc_4025C3
.text:00402623 ; ---------------------------------------------------------------------------
.text:00402623
.text:00402623 loc_402623:                             ; CODE XREF: sub_401FB0+604↑j
.text:00402623                 mov     [esp+0D8h+var_D0], 0 ; char
.text:0040262B                 mov     ebx, [edi+4]
.text:0040262E                 mov     [esp+0D8h+Locale], ebx ; lpFileName
.text:00402632                 mov     esi, [edi]
.text:00402634                 mov     [esp+0D8h+Category], esi ; Str
.text:00402637                 call    sub_402C30
.text:0040263C                 mov     [ebp+var_89], al
.text:00402642                 jmp     loc_4025C3
.text:00402647 ; ---------------------------------------------------------------------------
.text:00402647
.text:00402647 loc_402647:                             ; CODE XREF: sub_401FB0+5F1↑j
.text:00402647                 mov     [esp+0D8h+Category], offset aBackupType ; "backup type"
.text:0040264E                 call    ds:libintl_gettext
.text:00402654                 mov     ecx, [ebp+var_94]
.text:0040265A                 mov     [esp+0D8h+Category], eax
.text:0040265D                 mov     [esp+0D8h+Locale], ecx
.text:00402661                 call    sub_404750
.text:00402666                 jmp     loc_4025A7
.text:0040266B ; ---------------------------------------------------------------------------
.text:0040266B
.text:0040266B loc_40266B:                             ; CODE XREF: sub_401FB0+5BB↑j
.text:0040266B                 mov     edx, offset sub_40E4C0
.text:00402670                 mov     ds:dword_419010, edx
.text:00402676                 jmp     loc_40257B
.text:0040267B ; ---------------------------------------------------------------------------
.text:0040267B
.text:0040267B loc_40267B:                             ; CODE XREF: sub_401FB0+5AE↑j
.text:0040267B                 dec     esi
.text:0040267C                 jle     short loc_4026B9
.text:0040267E                 mov     ebx, [edi+8]
.text:00402681                 mov     [esp+0D8h+Category], ebx ; char *
.text:00402684                 call    sub_405670
.text:00402689                 mov     [esp+0D8h+Category], offset aExtraOperandS ; "extra operand %s"
.text:00402690
.text:00402690 loc_402690:                             ; CODE XREF: sub_401FB0+71A↓j
.text:00402690                 mov     ebx, eax
.text:00402692                 call    ds:libintl_gettext
.text:00402698                 mov     dword ptr [esp+0D8h+var_CC], ebx ; char
.text:0040269C                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:004026A4                 mov     [esp+0D8h+Category], 0 ; Code
.text:004026AB                 mov     [esp+0D8h+var_D0], eax ; char *
.text:004026AF                 call    sub_40E040
.text:004026B4                 jmp     loc_4020E8
.text:004026B9 ; ---------------------------------------------------------------------------
.text:004026B9
.text:004026B9 loc_4026B9:                             ; CODE XREF: sub_401FB0+6CC↑j
.text:004026B9                 mov     ecx, [edi]
.text:004026BB                 mov     [esp+0D8h+Category], ecx ; char *
.text:004026BE                 call    sub_405670
.text:004026C3                 mov     [esp+0D8h+Category], offset aMissingDestina ; "missing destination file operand after "...
.text:004026CA                 jmp     short loc_402690
.text:004026CA ; ---------------------------------------------------------------------------
.text:004026CC                 align 10h
.text:004026D0
.text:004026D0 loc_4026D0:                             ; CODE XREF: sub_401FB0+576↑j
.text:004026D0                 mov     eax, [ebp+lpFileName]
.text:004026D6                 test    eax, eax
.text:004026D8                 jnz     loc_402564
.text:004026DE                 cmp     esi, 1
.text:004026E1                 jle     loc_4028B8
.text:004026E7                 mov     ecx, [edi+esi*4-4]
.text:004026EB                 mov     [ebp+var_A4], ecx
.text:004026F1                 mov     [esp+0D8h+Category], ecx
.text:004026F4                 call    sub_4056E0
.text:004026F9                 mov     [esp+0D8h+Category], eax ; Str
.text:004026FC                 mov     ebx, eax
.text:004026FE                 call    strlen
.text:00402703                 mov     [ebp+var_A5], 0
.text:0040270A                 test    eax, eax
.text:0040270C                 jz      loc_4028AC
.text:00402712                 movzx   eax, byte ptr [eax+ebx-1]
.text:00402717                 cmp     al, 2Fh ; '/'
.text:00402719                 jz      loc_4028AC
.text:0040271F                 cmp     al, 5Ch ; '\'
.text:00402721                 jz      loc_4028AC
.text:00402727
.text:00402727 loc_402727:                             ; CODE XREF: sub_401FB0+903↓j
.text:00402727                 cmp     byte_418010, 0
.text:0040272E                 jz      loc_4028A2
.text:00402734                 mov     edx, offset sub_40F0C0
.text:00402739
.text:00402739 loc_402739:                             ; CODE XREF: sub_401FB0+8F7↓j
.text:00402739                 mov     ecx, [ebp+var_A4]
.text:0040273F                 lea     ebx, [ebp+var_88]
.text:00402745                 mov     [esp+0D8h+Locale], ebx ; int
.text:00402749                 xor     ebx, ebx
.text:0040274B                 mov     [esp+0D8h+Category], ecx ; char *
.text:0040274E                 call    edx ; sub_40F0C0
.text:00402750                 mov     [ebp+ErrorMessage], ebx
.text:00402756                 test    eax, eax
.text:00402758                 jnz     loc_402890
.text:0040275E
.text:0040275E loc_40275E:                             ; CODE XREF: sub_401FB0+8ED↓j
.text:0040275E                 mov     [ebp+var_AD], 0
.text:00402765                 mov     ecx, [ebp+ErrorMessage]
.text:0040276B                 test    ecx, ecx
.text:0040276D                 jnz     loc_402843
.text:00402773                 mov     ebx, [ebp+var_88]
.text:00402779                 and     ebx, 0F000h
.text:0040277F                 cmp     ebx, 4000h
.text:00402785                 jz      loc_402837
.text:0040278B
.text:0040278B loc_40278B:                             ; CODE XREF: sub_401FB0+88E↓j
.text:0040278B                                         ; sub_401FB0+89A↓j ...
.text:0040278B                 movzx   ecx, [ebp+var_A5]
.text:00402792                 cmp     [ebp+var_AD], cl
.text:00402798                 jb      short loc_4027F7
.text:0040279A
.text:0040279A loc_40279A:                             ; CODE XREF: sub_401FB0+882↓j
.text:0040279A                 cmp     [ebp+var_AD], 0
.text:004027A1                 jz      short loc_4027B2
.text:004027A3                 dec     esi
.text:004027A4                 mov     ecx, [edi+esi*4]
.text:004027A7                 mov     [ebp+lpFileName], ecx
.text:004027AD                 jmp     loc_402564
.text:004027B2 ; ---------------------------------------------------------------------------
.text:004027B2
.text:004027B2 loc_4027B2:                             ; CODE XREF: sub_401FB0+7F1↑j
.text:004027B2                 cmp     esi, 2
.text:004027B5                 jle     loc_402564
.text:004027BB                 mov     ebx, [edi+esi*4-4]
.text:004027BF                 mov     [esp+0D8h+Category], ebx ; char *
.text:004027C2                 call    sub_405670
.text:004027C7                 mov     [esp+0D8h+Category], offset aTargetSIsNotAD ; "target %s is not a directory"
.text:004027CE                 mov     ebx, eax
.text:004027D0                 call    ds:libintl_gettext
.text:004027D6                 mov     dword ptr [esp+0D8h+var_CC], ebx ; char
.text:004027DA                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:004027E2                 mov     [esp+0D8h+Category], 1 ; Code
.text:004027E9                 mov     [esp+0D8h+var_D0], eax ; char *
.text:004027ED                 call    sub_40E040
.text:004027F2                 jmp     loc_402564
.text:004027F7 ; ---------------------------------------------------------------------------
.text:004027F7
.text:004027F7 loc_4027F7:                             ; CODE XREF: sub_401FB0+7E8↑j
.text:004027F7                 mov     edx, [ebp+var_A4]
.text:004027FD                 mov     [esp+0D8h+Category], edx ; char *
.text:00402800                 call    sub_405670
.text:00402805                 mov     [esp+0D8h+Category], offset aTargetSIsNotAD ; "target %s is not a directory"
.text:0040280C                 mov     ebx, eax
.text:0040280E                 call    ds:libintl_gettext
.text:00402814                 mov     dword ptr [esp+0D8h+var_CC], ebx ; char
.text:00402818                 mov     ebx, [ebp+ErrorMessage]
.text:0040281E                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402825                 mov     [esp+0D8h+var_D0], eax ; char *
.text:00402829                 mov     [esp+0D8h+Locale], ebx ; ErrorMessage
.text:0040282D                 call    sub_40E040
.text:00402832                 jmp     loc_40279A
.text:00402837 ; ---------------------------------------------------------------------------
.text:00402837
.text:00402837 loc_402837:                             ; CODE XREF: sub_401FB0+7D5↑j
.text:00402837                 mov     [ebp+var_AD], 1
.text:0040283E                 jmp     loc_40278B
.text:00402843 ; ---------------------------------------------------------------------------
.text:00402843
.text:00402843 loc_402843:                             ; CODE XREF: sub_401FB0+7BD↑j
.text:00402843                 cmp     [ebp+ErrorMessage], 2
.text:0040284A                 jz      loc_40278B
.text:00402850                 mov     eax, [ebp+var_A4]
.text:00402856                 mov     [esp+0D8h+Category], eax ; char *
.text:00402859                 call    sub_405670
.text:0040285E                 mov     [esp+0D8h+Category], offset aAccessingS ; "accessing %s"
.text:00402865                 mov     ebx, eax
.text:00402867                 call    ds:libintl_gettext
.text:0040286D                 mov     dword ptr [esp+0D8h+var_CC], ebx ; char
.text:00402871                 mov     edx, [ebp+ErrorMessage]
.text:00402877                 mov     [esp+0D8h+Category], 1 ; Code
.text:0040287E                 mov     [esp+0D8h+var_D0], eax ; char *
.text:00402882                 mov     [esp+0D8h+Locale], edx ; ErrorMessage
.text:00402886                 call    sub_40E040
.text:0040288B                 jmp     loc_40278B
.text:00402890 ; ---------------------------------------------------------------------------
.text:00402890
.text:00402890 loc_402890:                             ; CODE XREF: sub_401FB0+7A8↑j
.text:00402890                 call    _errno
.text:00402895                 mov     edx, [eax]
.text:00402897                 mov     [ebp+ErrorMessage], edx
.text:0040289D                 jmp     loc_40275E
.text:004028A2 ; ---------------------------------------------------------------------------
.text:004028A2
.text:004028A2 loc_4028A2:                             ; CODE XREF: sub_401FB0+77E↑j
.text:004028A2                 mov     edx, offset sub_40E5E0
.text:004028A7                 jmp     loc_402739
.text:004028AC ; ---------------------------------------------------------------------------
.text:004028AC
.text:004028AC loc_4028AC:                             ; CODE XREF: sub_401FB0+75C↑j
.text:004028AC                                         ; sub_401FB0+769↑j ...
.text:004028AC                 mov     [ebp+var_A5], 1
.text:004028B3                 jmp     loc_402727
.text:004028B8 ; ---------------------------------------------------------------------------
.text:004028B8
.text:004028B8 loc_4028B8:                             ; CODE XREF: sub_401FB0+731↑j
.text:004028B8                 mov     edx, offset asc_401F8A ; "."
.text:004028BD                 mov     [ebp+lpFileName], edx
.text:004028C3                 jmp     loc_402564
.text:004028C8 ; ---------------------------------------------------------------------------
.text:004028C8
.text:004028C8 loc_4028C8:                             ; CODE XREF: sub_401FB0+569↑j
.text:004028C8                 mov     [esp+0D8h+Category], offset aMissingFileOpe ; "missing file operand"
.text:004028CF                 call    ds:libintl_gettext
.text:004028D5                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:004028DD                 mov     [esp+0D8h+Category], 0 ; Code
.text:004028E4                 mov     [esp+0D8h+var_D0], eax ; char *
.text:004028E8                 call    sub_40E040
.text:004028ED                 jmp     loc_4020E8
.text:004028ED sub_401FB0      endp
.text:004028ED
.text:004028ED ; ---------------------------------------------------------------------------
.text:004028F2                 align 10h
.text:00402900
.text:00402900 ; =============== S U B R O U T I N E =======================================
.text:00402900
.text:00402900 ; Attributes: noreturn
.text:00402900
.text:00402900 ; void __cdecl __noreturn sub_402900(int Code)
.text:00402900 sub_402900      proc near               ; CODE XREF: sub_405E60+A↓p
.text:00402900
.text:00402900 Stream          = dword ptr -1Ch
.text:00402900 Format          = dword ptr -18h
.text:00402900 var_14          = dword ptr -14h
.text:00402900 var_10          = dword ptr -10h
.text:00402900 var_C           = dword ptr -0Ch
.text:00402900 Code            = dword ptr  4
.text:00402900
.text:00402900                 push    ebx
.text:00402901                 sub     esp, 18h
.text:00402904                 mov     ebx, [esp+1Ch+Code]
.text:00402908                 test    ebx, ebx
.text:0040290A                 jz      short loc_402940
.text:0040290C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402913                 call    ds:libintl_gettext
.text:00402919                 mov     edx, ds:_iob
.text:0040291F                 mov     ecx, ds:dword_4196A0
.text:00402925                 add     edx, 40h ; '@'
.text:00402928                 mov     [esp+1Ch+var_14], ecx
.text:0040292C                 mov     [esp+1Ch+Format], eax ; Format
.text:00402930                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00402933                 call    fprintf
.text:00402938
.text:00402938 loc_402938:                             ; CODE XREF: sub_402900+1BA↓j
.text:00402938                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040293B                 call    exit
.text:00402940 ; ---------------------------------------------------------------------------
.text:00402940
.text:00402940 loc_402940:                             ; CODE XREF: sub_402900+A↑j
.text:00402940                 mov     [esp+1Ch+Stream], offset aUsageSOptionTT ; "Usage: %s [OPTION]... [-T] TARGET LINK_"...
.text:00402947                 call    ds:libintl_gettext
.text:0040294D                 mov     ecx, ds:dword_4196A0
.text:00402953                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402956                 mov     [esp+1Ch+var_C], ecx
.text:0040295A                 mov     [esp+1Ch+var_10], ecx
.text:0040295E                 mov     [esp+1Ch+var_14], ecx
.text:00402962                 mov     [esp+1Ch+Format], ecx
.text:00402966                 call    printf
.text:0040296B                 mov     [esp+1Ch+Stream], offset aInThe1stFormCr ; "In the 1st form, create a link to TARGE"...
.text:00402972                 call    ds:libintl_gettext
.text:00402978                 mov     ecx, ds:_iob
.text:0040297E                 add     ecx, 20h ; ' '
.text:00402981                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402985                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402988                 call    fputs
.text:0040298D                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00402994                 call    ds:libintl_gettext
.text:0040299A                 mov     ecx, ds:_iob
.text:004029A0                 add     ecx, 20h ; ' '
.text:004029A3                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004029A7                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004029AA                 call    fputs
.text:004029AF                 mov     [esp+1Ch+Stream], offset aBackupControlM ; "      --backup[=CONTROL]      make a ba"...
.text:004029B6                 call    ds:libintl_gettext
.text:004029BC                 mov     ecx, ds:_iob
.text:004029C2                 add     ecx, 20h ; ' '
.text:004029C5                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004029C9                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004029CC                 call    fputs
.text:004029D1                 mov     [esp+1Ch+Stream], offset aNNoDereference ; "  -n, --no-dereference        treat des"...
.text:004029D8                 call    ds:libintl_gettext
.text:004029DE                 mov     ecx, ds:_iob
.text:004029E4                 add     ecx, 20h ; ' '
.text:004029E7                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004029EB                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004029EE                 call    fputs
.text:004029F3                 mov     [esp+1Ch+Stream], offset aSSuffixSuffixO ; "  -S, --suffix=SUFFIX         override "...
.text:004029FA                 call    ds:libintl_gettext
.text:00402A00                 mov     ecx, ds:_iob
.text:00402A06                 add     ecx, 20h ; ' '
.text:00402A09                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402A0D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A10                 call    fputs
.text:00402A15                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402A1C                 call    ds:libintl_gettext
.text:00402A22                 mov     ecx, ds:_iob
.text:00402A28                 add     ecx, 20h ; ' '
.text:00402A2B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402A2F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A32                 call    fputs
.text:00402A37                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402A3E                 call    ds:libintl_gettext
.text:00402A44                 mov     ecx, ds:_iob
.text:00402A4A                 add     ecx, 20h ; ' '
.text:00402A4D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402A51                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A54                 call    fputs
.text:00402A59                 mov     [esp+1Ch+Stream], offset aTheBackupSuffi ; "\nThe backup suffix is `~', unless set "...
.text:00402A60                 call    ds:libintl_gettext
.text:00402A66                 mov     ecx, ds:_iob
.text:00402A6C                 add     ecx, 20h ; ' '
.text:00402A6F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402A73                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A76                 call    fputs
.text:00402A7B                 mov     [esp+1Ch+Stream], offset aNoneOffNeverMa ; "  none, off       never make backups (e"...
.text:00402A82                 call    ds:libintl_gettext
.text:00402A88                 mov     ecx, ds:_iob
.text:00402A8E                 add     ecx, 20h ; ' '
.text:00402A91                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402A95                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A98                 call    fputs
.text:00402A9D                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402AA4                 call    ds:libintl_gettext
.text:00402AAA                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402AB2                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402AB5                 call    printf
.text:00402ABA                 jmp     loc_402938
.text:00402ABA sub_402900      endp
.text:00402ABA
.text:00402ABA ; ---------------------------------------------------------------------------
.text:00402ABF aSAndSAreTheSam db '%s and %s are the same file',0
.text:00402ABF                                         ; DATA XREF: sub_402C30+13D↓o
.text:00402ADB                 align 10h
.text:00402AE0 aCreatingSymbol db 'creating symbolic link %s to %s',0
.text:00402AE0                                         ; DATA XREF: sub_402C30+22C↓o
.text:00402B00 aCannotUnBackup db 'cannot un-backup %s',0
.text:00402B00                                         ; DATA XREF: sub_402C30+294↓o
.text:00402B14 aCreatingHardLi db 'creating hard link %s to %s',0
.text:00402B14                                         ; DATA XREF: sub_402C30:loc_402EFE↓o
.text:00402B30 aCannotRemoveS  db 'cannot remove %s',0 ; DATA XREF: sub_402C30+305↓o
.text:00402B41 aCreateSymbolic db 'create symbolic link %s to %s',0
.text:00402B41                                         ; DATA XREF: sub_402C30+364↓o
.text:00402B5F aBackupS        db ' (backup: %s)',0    ; DATA XREF: sub_402C30+399↓o
.text:00402B6D aCreateHardLink db 'create hard link %s to %s',0
.text:00402B6D                                         ; DATA XREF: sub_402C30:loc_403027↓o
.text:00402B87 aCannotBackupS  db 'cannot backup %s',0 ; DATA XREF: sub_402C30+475↓o
.text:00402B98 aSReplaceS      db '%s: replace %s? ',0 ; DATA XREF: sub_402C30+496↓o
.text:00402BA9                 align 20h
.text:00402BC0 aSCannotOverwri db '%s: cannot overwrite directory',0
.text:00402BC0                                         ; DATA XREF: sub_402C30+4E7↓o
.text:00402BDF asc_402BDF      db '/',0                ; DATA XREF: sub_402C30+5CB↓o
.text:00402BE1                 align 20h
.text:00402C00 aSHardLinkNotAl db '%s: hard link not allowed for directory',0
.text:00402C00                                         ; DATA XREF: sub_402C30+639↓o
.text:00402C28                 align 10h
.text:00402C30
.text:00402C30 ; =============== S U B R O U T I N E =======================================
.text:00402C30
.text:00402C30 ; Attributes: bp-based frame
.text:00402C30
.text:00402C30 ; int __cdecl sub_402C30(char *Str, LPCSTR lpFileName, char)
.text:00402C30 sub_402C30      proc near               ; CODE XREF: sub_401FB0+646↑p
.text:00402C30                                         ; sub_401FB0+687↑p
.text:00402C30
.text:00402C30 Format          = dword ptr -128h
.text:00402C30 File            = dword ptr -124h
.text:00402C30 Size            = dword ptr -120h
.text:00402C30 var_11C         = byte ptr -11Ch
.text:00402C30 var_118         = dword ptr -118h
.text:00402C30 var_114         = byte ptr -114h
.text:00402C30 var_104         = dword ptr -104h
.text:00402C30 var_FD          = byte ptr -0FDh
.text:00402C30 var_FC          = dword ptr -0FCh
.text:00402C30 var_F8          = dword ptr -0F8h
.text:00402C30 var_F0          = dword ptr -0F0h
.text:00402C30 var_EC          = dword ptr -0ECh
.text:00402C30 var_E8          = dword ptr -0E8h
.text:00402C30 var_E4          = dword ptr -0E4h
.text:00402C30 var_88          = dword ptr -88h
.text:00402C30 var_80          = dword ptr -80h
.text:00402C30 var_7C          = dword ptr -7Ch
.text:00402C30 var_78          = dword ptr -78h
.text:00402C30 var_74          = dword ptr -74h
.text:00402C30 var_70          = dword ptr -70h
.text:00402C30 Str             = dword ptr  8
.text:00402C30 lpFileName      = dword ptr  0Ch
.text:00402C30 arg_8           = byte ptr  10h
.text:00402C30
.text:00402C30                 push    ebp
.text:00402C31                 xor     edx, edx
.text:00402C33                 mov     ebp, esp
.text:00402C35                 push    edi
.text:00402C36                 push    esi
.text:00402C37                 push    ebx
.text:00402C38                 sub     esp, 11Ch
.text:00402C3E                 mov     edi, [ebp+lpFileName]
.text:00402C41                 cmp     ds:byte_419020, 0
.text:00402C48                 movzx   ebx, [ebp+arg_8]
.text:00402C4C                 mov     [ebp+var_FC], edx
.text:00402C52                 mov     [ebp+var_FD], 0
.text:00402C59                 jz      loc_403220
.text:00402C5F
.text:00402C5F loc_402C5F:                             ; CODE XREF: sub_402C30+610↓j
.text:00402C5F                                         ; sub_402C30+628↓j
.text:00402C5F                 test    bl, bl
.text:00402C61                 jnz     loc_403186
.text:00402C67
.text:00402C67 loc_402C67:                             ; CODE XREF: sub_402C30+5E4↓j
.text:00402C67                 movzx   eax, ds:byte_419040
.text:00402C6E                 test    al, al
.text:00402C70                 jnz     short loc_402C90
.text:00402C72                 cmp     ds:byte_419030, 0
.text:00402C79                 jnz     short loc_402C90
.text:00402C7B                 mov     ebx, ds:dword_419000
.text:00402C81                 test    ebx, ebx
.text:00402C83                 jz      short loc_402CBF
.text:00402C85                 lea     esi, [esi+0]
.text:00402C89                 lea     edi, [edi+0]
.text:00402C90
.text:00402C90 loc_402C90:                             ; CODE XREF: sub_402C30+40↑j
.text:00402C90                                         ; sub_402C30+49↑j
.text:00402C90                 mov     [esp+128h+Format], edi
.text:00402C93                 lea     esi, [ebp+var_F8]
.text:00402C99                 mov     [esp+128h+File], esi
.text:00402C9D                 call    sub_40E5E0
.text:00402CA2                 test    eax, eax
.text:00402CA4                 setz    [ebp+var_FD]
.text:00402CAB                 cmp     [ebp+var_FD], 0
.text:00402CB2                 jz      loc_403164
.text:00402CB8
.text:00402CB8 loc_402CB8:                             ; CODE XREF: sub_402C30+53C↓j
.text:00402CB8                 movzx   eax, ds:byte_419040
.text:00402CBF
.text:00402CBF loc_402CBF:                             ; CODE XREF: sub_402C30+53↑j
.text:00402CBF                 test    al, al
.text:00402CC1                 jz      loc_402DB0
.text:00402CC7                 cmp     [ebp+var_FD], 0
.text:00402CCE                 jz      loc_402DF0
.text:00402CD4                 mov     edx, ds:dword_419000
.text:00402CDA                 test    edx, edx
.text:00402CDC                 jz      loc_40313B
.text:00402CE2                 cmp     ds:byte_419020, 0
.text:00402CE9
.text:00402CE9 loc_402CE9:                             ; CODE XREF: sub_402C30+52F↓j
.text:00402CE9                 jnz     loc_402DB0
.text:00402CEF
.text:00402CEF loc_402CEF:                             ; CODE XREF: sub_402C30+512↓j
.text:00402CEF                 mov     ebx, [ebp+var_7C]
.text:00402CF2                 mov     ecx, [ebp+var_80]
.text:00402CF5                 mov     eax, [ebp+var_F0]
.text:00402CFB                 mov     edx, [ebp+var_EC]
.text:00402D01                 mov     esi, ebx
.text:00402D03                 xor     eax, ecx
.text:00402D05                 xor     esi, edx
.text:00402D07                 or      esi, eax
.text:00402D09                 jnz     loc_402DB0
.text:00402D0F                 mov     ebx, [ebp+var_74]
.text:00402D12                 mov     ecx, [ebp+var_78]
.text:00402D15                 mov     eax, [ebp+var_E8]
.text:00402D1B                 mov     edx, [ebp+var_E4]
.text:00402D21                 mov     esi, ebx
.text:00402D23                 xor     eax, ecx
.text:00402D25                 xor     esi, edx
.text:00402D27                 or      esi, eax
.text:00402D29                 jnz     loc_402DB0
.text:00402D2F                 cmp     [ebp+var_70], 1
.text:00402D33                 jz      short loc_402D48
.text:00402D35                 mov     [esp+128h+File], edi ; void *
.text:00402D39                 mov     esi, [ebp+Str]
.text:00402D3C                 mov     [esp+128h+Format], esi ; void *
.text:00402D3F                 call    sub_403290
.text:00402D44                 test    al, al
.text:00402D46                 jz      short loc_402DB0
.text:00402D48
.text:00402D48 loc_402D48:                             ; CODE XREF: sub_402C30+103↑j
.text:00402D48                 mov     [esp+128h+File], edi ; char *
.text:00402D4C                 mov     [esp+128h+Format], 1 ; int
.text:00402D53                 call    sub_405640
.text:00402D58                 mov     [esp+128h+Format], 0 ; int
.text:00402D5F                 mov     ebx, eax
.text:00402D61                 mov     eax, [ebp+Str]
.text:00402D64                 mov     [esp+128h+File], eax ; char *
.text:00402D68                 call    sub_405640
.text:00402D6D                 mov     [esp+128h+Format], offset aSAndSAreTheSam ; "%s and %s are the same file"
.text:00402D74                 mov     edi, eax
.text:00402D76                 call    ds:libintl_gettext
.text:00402D7C                 mov     [esp+128h+var_118], ebx
.text:00402D80                 mov     dword ptr [esp+128h+var_11C], edi ; char
.text:00402D84                 mov     [esp+128h+File], 0 ; ErrorMessage
.text:00402D8C                 mov     [esp+128h+Size], eax ; char *
.text:00402D90                 mov     [esp+128h+Format], 0 ; Code
.text:00402D97                 call    sub_40E040
.text:00402D9C                 lea     esi, [esi+0]
.text:00402DA0
.text:00402DA0 loc_402DA0:                             ; CODE XREF: sub_402C30+26C↓j
.text:00402DA0                                         ; sub_402C30+286↓j ...
.text:00402DA0                 xor     edx, edx
.text:00402DA2
.text:00402DA2 loc_402DA2:                             ; CODE XREF: sub_402C30+1E4↓j
.text:00402DA2                                         ; sub_402C30+325↓j ...
.text:00402DA2                 lea     esp, [ebp-0Ch]
.text:00402DA5                 mov     eax, edx
.text:00402DA7                 pop     ebx
.text:00402DA8                 pop     esi
.text:00402DA9                 pop     edi
.text:00402DAA                 pop     ebp
.text:00402DAB                 retn
.text:00402DAB ; ---------------------------------------------------------------------------
.text:00402DAC                 align 10h
.text:00402DB0
.text:00402DB0 loc_402DB0:                             ; CODE XREF: sub_402C30+91↑j
.text:00402DB0                                         ; sub_402C30:loc_402CE9↑j ...
.text:00402DB0                 cmp     [ebp+var_FD], 0
.text:00402DB7                 jz      short loc_402DF0
.text:00402DB9                 mov     edx, [ebp+var_F8]
.text:00402DBF                 and     edx, 0F000h
.text:00402DC5                 cmp     edx, 4000h
.text:00402DCB                 jz      loc_40310F
.text:00402DD1                 cmp     ds:byte_419030, 0
.text:00402DD8                 jnz     loc_4030BE
.text:00402DDE
.text:00402DDE loc_402DDE:                             ; CODE XREF: sub_402C30+4DA↓j
.text:00402DDE                 mov     eax, ds:dword_419000
.text:00402DE3                 test    eax, eax
.text:00402DE5                 jnz     loc_403033
.text:00402DEB                 nop
.text:00402DEC                 lea     esi, [esi+0]
.text:00402DF0
.text:00402DF0 loc_402DF0:                             ; CODE XREF: sub_402C30+9E↑j
.text:00402DF0                                         ; sub_402C30+187↑j ...
.text:00402DF0                 cmp     ds:byte_419050, 0
.text:00402DF7                 jnz     loc_402F60
.text:00402DFD
.text:00402DFD loc_402DFD:                             ; CODE XREF: sub_402C30+3D4↓j
.text:00402DFD                                         ; sub_402C30+3F2↓j
.text:00402DFD                 mov     [esp+128h+File], edi
.text:00402E01                 mov     ebx, [ebp+Str]
.text:00402E04                 mov     [esp+128h+Format], ebx
.text:00402E07                 call    ds:dword_419010
.text:00402E0D                 mov     edx, 1
.text:00402E12                 test    eax, eax
.text:00402E14                 jz      short loc_402DA2
.text:00402E16                 call    _errno
.text:00402E1B                 cmp     dword ptr [eax], 11h
.text:00402E1E                 jz      loc_402F0A
.text:00402E24
.text:00402E24 loc_402E24:                             ; CODE XREF: sub_402C30+2EB↓j
.text:00402E24                                         ; sub_402C30+32B↓j
.text:00402E24                 mov     [esp+128h+Format], 1 ; int
.text:00402E2B                 mov     ecx, [ebp+Str]
.text:00402E2E                 mov     [esp+128h+File], ecx ; char *
.text:00402E32                 call    sub_405640
.text:00402E37                 mov     [ebp+var_104], eax
.text:00402E3D                 mov     [esp+128h+File], edi ; char *
.text:00402E41                 mov     [esp+128h+Format], 0 ; int
.text:00402E48                 call    sub_405640
.text:00402E4D                 cmp     ds:byte_419020, 0
.text:00402E54                 mov     esi, eax
.text:00402E56                 jz      loc_402EFE
.text:00402E5C                 mov     [esp+128h+Format], offset aCreatingSymbol ; "creating symbolic link %s to %s"
.text:00402E63
.text:00402E63 loc_402E63:                             ; CODE XREF: sub_402C30+2D5↓j
.text:00402E63                 call    ds:libintl_gettext
.text:00402E69                 mov     ebx, eax
.text:00402E6B                 call    _errno
.text:00402E70                 mov     [esp+128h+Size], ebx ; char *
.text:00402E74                 mov     ecx, [ebp+var_104]
.text:00402E7A                 mov     dword ptr [esp+128h+var_11C], esi ; char
.text:00402E7E                 mov     [esp+128h+var_118], ecx
.text:00402E82                 mov     edx, [eax]
.text:00402E84                 mov     [esp+128h+Format], 0 ; Code
.text:00402E8B                 mov     [esp+128h+File], edx ; ErrorMessage
.text:00402E8F                 call    sub_40E040
.text:00402E94                 mov     ebx, [ebp+var_FC]
.text:00402E9A                 test    ebx, ebx
.text:00402E9C                 jz      loc_402DA0
.text:00402EA2                 mov     [esp+128h+File], edi ; lpFileName
.text:00402EA6                 mov     esi, [ebp+var_FC]
.text:00402EAC                 mov     [esp+128h+Format], esi ; LPCSTR
.text:00402EAF                 call    sub_40F540
.text:00402EB4                 test    eax, eax
.text:00402EB6                 jz      loc_402DA0
.text:00402EBC                 mov     [esp+128h+Format], edi ; char *
.text:00402EBF                 call    sub_405670
.text:00402EC4                 mov     [esp+128h+Format], offset aCannotUnBackup ; "cannot un-backup %s"
.text:00402ECB                 nop
.text:00402ECC                 lea     esi, [esi+0]
.text:00402ED0
.text:00402ED0 loc_402ED0:                             ; CODE XREF: sub_402C30+30C↓j
.text:00402ED0                                         ; sub_402C30+47C↓j ...
.text:00402ED0                 mov     esi, eax
.text:00402ED2                 call    ds:libintl_gettext
.text:00402ED8                 mov     edi, eax
.text:00402EDA                 call    _errno
.text:00402EDF                 mov     dword ptr [esp+128h+var_11C], esi ; char
.text:00402EE3                 mov     [esp+128h+Size], edi ; char *
.text:00402EE7                 mov     edi, [eax]
.text:00402EE9                 mov     [esp+128h+File], edi ; ErrorMessage
.text:00402EED
.text:00402EED loc_402EED:                             ; CODE XREF: sub_402C30+506↓j
.text:00402EED                 mov     [esp+128h+Format], 0 ; Code
.text:00402EF4                 call    sub_40E040
.text:00402EF9                 jmp     loc_402DA0
.text:00402EFE ; ---------------------------------------------------------------------------
.text:00402EFE
.text:00402EFE loc_402EFE:                             ; CODE XREF: sub_402C30+226↑j
.text:00402EFE                 mov     [esp+128h+Format], offset aCreatingHardLi ; "creating hard link %s to %s"
.text:00402F05                 jmp     loc_402E63
.text:00402F0A ; ---------------------------------------------------------------------------
.text:00402F0A
.text:00402F0A loc_402F0A:                             ; CODE XREF: sub_402C30+1EE↑j
.text:00402F0A                 cmp     ds:byte_419040, 0
.text:00402F11                 jnz     short loc_402F21
.text:00402F13                 mov     edx, [ebp+var_FC]
.text:00402F19                 test    edx, edx
.text:00402F1B                 jz      loc_402E24
.text:00402F21
.text:00402F21 loc_402F21:                             ; CODE XREF: sub_402C30+2E1↑j
.text:00402F21                 mov     [esp+128h+Format], edi ; LPCSTR
.text:00402F24                 call    sub_40F3D0
.text:00402F29                 test    eax, eax
.text:00402F2B                 jz      short loc_402F3E
.text:00402F2D                 mov     [esp+128h+Format], edi ; char *
.text:00402F30                 call    sub_405670
.text:00402F35                 mov     [esp+128h+Format], offset aCannotRemoveS ; "cannot remove %s"
.text:00402F3C                 jmp     short loc_402ED0
.text:00402F3E ; ---------------------------------------------------------------------------
.text:00402F3E
.text:00402F3E loc_402F3E:                             ; CODE XREF: sub_402C30+2FB↑j
.text:00402F3E                 mov     [esp+128h+File], edi
.text:00402F42                 mov     esi, [ebp+Str]
.text:00402F45                 mov     [esp+128h+Format], esi
.text:00402F48                 call    ds:dword_419010
.text:00402F4E                 mov     edx, 1
.text:00402F53                 test    eax, eax
.text:00402F55                 jz      loc_402DA2
.text:00402F5B                 jmp     loc_402E24
.text:00402F60 ; ---------------------------------------------------------------------------
.text:00402F60
.text:00402F60 loc_402F60:                             ; CODE XREF: sub_402C30+1C7↑j
.text:00402F60                 mov     [esp+128h+Format], 1 ; int
.text:00402F67                 mov     edx, [ebp+Str]
.text:00402F6A                 mov     [esp+128h+File], edx ; char *
.text:00402F6E                 call    sub_405640
.text:00402F73                 mov     [esp+128h+File], edi ; char *
.text:00402F77                 mov     esi, eax
.text:00402F79                 mov     [esp+128h+Format], 0 ; int
.text:00402F80                 call    sub_405640
.text:00402F85                 cmp     ds:byte_419020, 0
.text:00402F8C                 mov     ebx, eax
.text:00402F8E                 jz      loc_403027
.text:00402F94                 mov     [esp+128h+Format], offset aCreateSymbolic ; "create symbolic link %s to %s"
.text:00402F9B
.text:00402F9B loc_402F9B:                             ; CODE XREF: sub_402C30+3FE↓j
.text:00402F9B                 call    ds:libintl_gettext
.text:00402FA1                 mov     [esp+128h+Size], esi
.text:00402FA5                 mov     [esp+128h+File], ebx
.text:00402FA9                 mov     [esp+128h+Format], eax ; Format
.text:00402FAC                 call    printf
.text:00402FB1                 mov     esi, [ebp+var_FC]
.text:00402FB7                 test    esi, esi
.text:00402FB9                 jz      short loc_402FE4
.text:00402FBB                 mov     ecx, [ebp+var_FC]
.text:00402FC1                 mov     [esp+128h+Format], ecx ; char *
.text:00402FC4                 call    sub_405670
.text:00402FC9                 mov     [esp+128h+Format], offset aBackupS ; " (backup: %s)"
.text:00402FD0                 mov     esi, eax
.text:00402FD2                 call    ds:libintl_gettext
.text:00402FD8                 mov     [esp+128h+File], esi
.text:00402FDC                 mov     [esp+128h+Format], eax ; Format
.text:00402FDF                 call    printf
.text:00402FE4
.text:00402FE4 loc_402FE4:                             ; CODE XREF: sub_402C30+389↑j
.text:00402FE4                 mov     edx, ds:_iob
.text:00402FEA                 mov     ebx, [edx+24h]
.text:00402FED                 dec     ebx
.text:00402FEE                 mov     [edx+24h], ebx
.text:00402FF1                 test    ebx, ebx
.text:00402FF3                 js      short loc_403009
.text:00402FF5                 mov     esi, ds:_iob
.text:00402FFB                 mov     eax, [esi+20h]
.text:00402FFE                 mov     byte ptr [eax], 0Ah
.text:00403001                 inc     dword ptr [esi+20h]
.text:00403004                 jmp     loc_402DFD
.text:00403009 ; ---------------------------------------------------------------------------
.text:00403009
.text:00403009 loc_403009:                             ; CODE XREF: sub_402C30+3C3↑j
.text:00403009                 mov     [esp+128h+Format], 0Ah ; Ch
.text:00403010                 mov     ecx, ds:_iob
.text:00403016                 add     ecx, 20h ; ' '
.text:00403019                 mov     [esp+128h+File], ecx ; File
.text:0040301D                 call    _flsbuf
.text:00403022                 jmp     loc_402DFD
.text:00403027 ; ---------------------------------------------------------------------------
.text:00403027
.text:00403027 loc_403027:                             ; CODE XREF: sub_402C30+35E↑j
.text:00403027                 mov     [esp+128h+Format], offset aCreateHardLink ; "create hard link %s to %s"
.text:0040302E                 jmp     loc_402F9B
.text:00403033 ; ---------------------------------------------------------------------------
.text:00403033
.text:00403033 loc_403033:                             ; CODE XREF: sub_402C30+1B5↑j
.text:00403033                 mov     [esp+128h+File], eax ; int
.text:00403037                 mov     [esp+128h+Format], edi ; char *
.text:0040303A                 call    sub_404560
.text:0040303F                 mov     [esp+128h+Format], eax ; Size
.text:00403042                 mov     esi, eax
.text:00403044                 call    strlen
.text:00403049                 lea     ebx, [eax+1]
.text:0040304C                 add     eax, 10h
.text:0040304F                 and     eax, 0FFFFFFF0h
.text:00403052                 call    __alloca
.text:00403057                 mov     [esp+128h+Size], ebx ; Size
.text:0040305B                 lea     ecx, [esp+128h+var_114]
.text:0040305F                 mov     [ebp+var_FC], ecx
.text:00403065                 mov     [esp+128h+Format], ecx ; void *
.text:00403068                 mov     [esp+128h+File], esi ; Src
.text:0040306C                 call    memcpy
.text:00403071                 mov     [esp+128h+Format], esi ; Block
.text:00403074                 call    free
.text:00403079                 mov     [esp+128h+Format], edi ; LPCSTR
.text:0040307C                 mov     ebx, [ebp+var_FC]
.text:00403082                 mov     [esp+128h+File], ebx ; lpFileName
.text:00403086                 call    sub_40F540
.text:0040308B                 test    eax, eax
.text:0040308D                 jz      loc_402DF0
.text:00403093                 call    _errno
.text:00403098                 cmp     dword ptr [eax], 2
.text:0040309B                 jz      short loc_4030B1
.text:0040309D                 mov     [esp+128h+Format], edi ; char *
.text:004030A0                 call    sub_405670
.text:004030A5                 mov     [esp+128h+Format], offset aCannotBackupS ; "cannot backup %s"
.text:004030AC                 jmp     loc_402ED0
.text:004030B1 ; ---------------------------------------------------------------------------
.text:004030B1
.text:004030B1 loc_4030B1:                             ; CODE XREF: sub_402C30+46B↑j
.text:004030B1                 xor     eax, eax
.text:004030B3                 mov     [ebp+var_FC], eax
.text:004030B9                 jmp     loc_402DF0
.text:004030BE ; ---------------------------------------------------------------------------
.text:004030BE
.text:004030BE loc_4030BE:                             ; CODE XREF: sub_402C30+1A8↑j
.text:004030BE                 mov     [esp+128h+Format], edi ; char *
.text:004030C1                 call    sub_405670
.text:004030C6                 mov     [esp+128h+Format], offset aSReplaceS ; "%s: replace %s? "
.text:004030CD                 mov     esi, eax
.text:004030CF                 call    ds:libintl_gettext
.text:004030D5                 mov     dword ptr [esp+128h+var_11C], esi
.text:004030D9                 mov     ecx, ds:_iob
.text:004030DF                 mov     esi, ds:dword_4196A0
.text:004030E5                 mov     [esp+128h+File], eax ; Format
.text:004030E9                 add     ecx, 40h ; '@'
.text:004030EC                 mov     [esp+128h+Format], ecx ; Stream
.text:004030EF                 mov     [esp+128h+Size], esi
.text:004030F3                 call    fprintf
.text:004030F8                 call    sub_405570
.text:004030FD                 test    al, al
.text:004030FF                 mov     edx, 1
.text:00403104                 jz      loc_402DA2
.text:0040310A                 jmp     loc_402DDE
.text:0040310F ; ---------------------------------------------------------------------------
.text:0040310F
.text:0040310F loc_40310F:                             ; CODE XREF: sub_402C30+19B↑j
.text:0040310F                 mov     [esp+128h+Format], edi ; char *
.text:00403112                 call    sub_405670
.text:00403117                 mov     [esp+128h+Format], offset aSCannotOverwri ; "%s: cannot overwrite directory"
.text:0040311E
.text:0040311E loc_40311E:                             ; CODE XREF: sub_402C30+640↓j
.text:0040311E                 mov     ebx, eax
.text:00403120                 call    ds:libintl_gettext
.text:00403126                 mov     dword ptr [esp+128h+var_11C], ebx
.text:0040312A                 mov     [esp+128h+File], 0
.text:00403132                 mov     [esp+128h+Size], eax
.text:00403136                 jmp     loc_402EED
.text:0040313B ; ---------------------------------------------------------------------------
.text:0040313B
.text:0040313B loc_40313B:                             ; CODE XREF: sub_402C30+AC↑j
.text:0040313B                 cmp     ds:byte_419020, 0
.text:00403142                 jz      loc_402CEF
.text:00403148                 mov     ecx, [ebp+Str]
.text:0040314B                 lea     ebx, [ebp+var_88]
.text:00403151                 mov     [esp+128h+File], ebx ; int
.text:00403155                 mov     [esp+128h+Format], ecx ; char *
.text:00403158                 call    sub_40F0C0
.text:0040315D                 test    eax, eax
.text:0040315F                 jmp     loc_402CE9
.text:00403164 ; ---------------------------------------------------------------------------
.text:00403164
.text:00403164 loc_403164:                             ; CODE XREF: sub_402C30+82↑j
.text:00403164                 call    _errno
.text:00403169                 cmp     dword ptr [eax], 2
.text:0040316C                 jz      loc_402CB8
.text:00403172                 mov     [esp+128h+Format], edi ; char *
.text:00403175
.text:00403175 loc_403175:                             ; CODE XREF: sub_402C30+64B↓j
.text:00403175                 call    sub_405670
.text:0040317A                 mov     [esp+128h+Format], offset aAccessingS ; "accessing %s"
.text:00403181                 jmp     loc_402ED0
.text:00403186 ; ---------------------------------------------------------------------------
.text:00403186
.text:00403186 loc_403186:                             ; CODE XREF: sub_402C30+31↑j
.text:00403186                 mov     eax, [ebp+Str]
.text:00403189                 mov     [esp+128h+Format], eax ; Size
.text:0040318C                 call    strlen
.text:00403191                 lea     ecx, [eax+1]
.text:00403194                 mov     edx, [ebp+Str]
.text:00403197                 add     eax, 10h
.text:0040319A                 and     eax, 0FFFFFFF0h
.text:0040319D                 call    __alloca
.text:004031A2                 mov     [esp+128h+Size], ecx ; Size
.text:004031A6                 lea     esi, [esp+128h+var_114]
.text:004031AA                 mov     [esp+128h+File], edx ; Src
.text:004031AE                 mov     [esp+128h+Format], esi ; void *
.text:004031B1                 call    memcpy
.text:004031B6                 mov     [esp+128h+Format], esi
.text:004031B9                 call    sub_4056A0
.text:004031BE                 mov     [esp+128h+Format], esi
.text:004031C1                 call    sub_4056E0
.text:004031C6                 mov     [esp+128h+Format], edi ; Str
.text:004031C9                 mov     esi, eax
.text:004031CB                 call    strlen
.text:004031D0                 mov     [esp+128h+Format], esi ; Size
.text:004031D3                 mov     ebx, eax
.text:004031D5                 call    strlen
.text:004031DA                 lea     eax, [eax+ebx+11h]
.text:004031DE                 and     eax, 0FFFFFFF0h
.text:004031E1                 call    __alloca
.text:004031E6                 mov     [esp+128h+File], edi
.text:004031EA                 lea     ebx, [esp+128h+var_114]
.text:004031EE                 mov     edi, ebx
.text:004031F0                 mov     [esp+128h+Format], ebx
.text:004031F3                 call    sub_40F5C0
.text:004031F8                 mov     [esp+128h+Format], eax
.text:004031FB                 mov     [esp+128h+File], offset asc_402BDF ; "/"
.text:00403203                 call    sub_40F5C0
.text:00403208                 mov     [esp+128h+Format], eax
.text:0040320B                 mov     [esp+128h+File], esi
.text:0040320F                 call    sub_40F5C0
.text:00403214                 jmp     loc_402C67
.text:00403214 ; ---------------------------------------------------------------------------
.text:00403219                 align 10h
.text:00403220
.text:00403220 loc_403220:                             ; CODE XREF: sub_402C30+29↑j
.text:00403220                 mov     edx, [ebp+Str]
.text:00403223                 lea     ecx, [ebp+var_88]
.text:00403229                 mov     [esp+128h+File], ecx
.text:0040322D                 mov     [esp+128h+Format], edx
.text:00403230                 call    sub_40E5E0
.text:00403235                 test    eax, eax
.text:00403237                 jnz     short loc_403275
.text:00403239                 cmp     ds:byte_419060, 0
.text:00403240                 jnz     loc_402C5F
.text:00403246                 mov     esi, [ebp+var_88]
.text:0040324C                 and     esi, 0F000h
.text:00403252                 cmp     esi, 4000h
.text:00403258                 jnz     loc_402C5F
.text:0040325E                 mov     ebx, [ebp+Str]
.text:00403261                 mov     [esp+128h+Format], ebx ; char *
.text:00403264                 call    sub_405670
.text:00403269                 mov     [esp+128h+Format], offset aSHardLinkNotAl ; "%s: hard link not allowed for directory"
.text:00403270                 jmp     loc_40311E
.text:00403275 ; ---------------------------------------------------------------------------
.text:00403275
.text:00403275 loc_403275:                             ; CODE XREF: sub_402C30+607↑j
.text:00403275                 mov     eax, [ebp+Str]
.text:00403278                 mov     [esp+128h+Format], eax
.text:0040327B                 jmp     loc_403175
.text:0040327B sub_402C30      endp
.text:0040327B
.text:0040327B ; ---------------------------------------------------------------------------
.text:00403280 ; const char dword_403280[]
.text:00403280 dword_403280    dd 8D007325h, 0B6h, 27BC8D00h, 0
.text:00403280                                         ; DATA XREF: sub_403290+1FA↓o
.text:00403280                                         ; sub_403290+225↓o ...
.text:00403290
.text:00403290 ; =============== S U B R O U T I N E =======================================
.text:00403290
.text:00403290
.text:00403290 ; int __cdecl sub_403290(void *, void *)
.text:00403290 sub_403290      proc near               ; CODE XREF: sub_402C30+10F↑p
.text:00403290
.text:00403290 Block           = dword ptr -12Ch
.text:00403290 ErrorMessage    = dword ptr -128h
.text:00403290 var_124         = dword ptr -124h
.text:00403290 var_120         = byte ptr -120h
.text:00403290 var_111         = byte ptr -111h
.text:00403290 var_110         = dword ptr -110h
.text:00403290 var_10C         = dword ptr -10Ch
.text:00403290 var_107         = byte ptr -107h
.text:00403290 var_106         = byte ptr -106h
.text:00403290 var_105         = byte ptr -105h
.text:00403290 var_104         = dword ptr -104h
.text:00403290 var_100         = dword ptr -100h
.text:00403290 var_FC          = dword ptr -0FCh
.text:00403290 var_F4          = dword ptr -0F4h
.text:00403290 var_F0          = dword ptr -0F0h
.text:00403290 var_EC          = dword ptr -0ECh
.text:00403290 var_E8          = dword ptr -0E8h
.text:00403290 var_8C          = dword ptr -8Ch
.text:00403290 var_84          = dword ptr -84h
.text:00403290 var_80          = dword ptr -80h
.text:00403290 var_7C          = dword ptr -7Ch
.text:00403290 var_78          = dword ptr -78h
.text:00403290 arg_0           = dword ptr  4
.text:00403290 arg_4           = dword ptr  8
.text:00403290
.text:00403290                 push    ebp
.text:00403291                 push    edi
.text:00403292                 push    esi
.text:00403293                 push    ebx
.text:00403294                 sub     esp, 11Ch
.text:0040329A                 mov     ecx, [esp+12Ch+arg_0]
.text:004032A1                 mov     [esp+12Ch+Block], ecx
.text:004032A4                 call    sub_4056E0
.text:004032A9                 mov     [esp+12Ch+var_100], eax
.text:004032AD                 mov     eax, [esp+12Ch+arg_4]
.text:004032B4                 mov     [esp+12Ch+Block], eax
.text:004032B7                 call    sub_4056E0
.text:004032BC                 mov     [esp+12Ch+var_104], eax
.text:004032C0                 mov     edx, [esp+12Ch+var_100]
.text:004032C4                 mov     [esp+12Ch+Block], edx ; char *
.text:004032C7                 call    sub_405740
.text:004032CC                 mov     ebx, eax
.text:004032CE                 mov     eax, [esp+12Ch+var_104]
.text:004032D2                 mov     [esp+12Ch+Block], eax ; char *
.text:004032D5                 call    sub_405740
.text:004032DA                 mov     [esp+12Ch+var_105], 0
.text:004032DF                 cmp     ebx, eax
.text:004032E1                 mov     ebp, eax
.text:004032E3                 jz      loc_403508
.text:004032E9
.text:004032E9 loc_4032E9:                             ; CODE XREF: sub_403290+287↓j
.text:004032E9                                         ; sub_403290+292↓j
.text:004032E9                 movzx   edx, [esp+12Ch+var_105]
.text:004032EE                 cmp     ebp, ebx
.text:004032F0                 mov     [esp+12Ch+var_107], 0
.text:004032F5                 mov     eax, 0FFh
.text:004032FA                 mov     [esp+12Ch+var_106], dl
.text:004032FE                 jbe     short loc_403302
.text:00403300                 mov     ebp, ebx
.text:00403302
.text:00403302 loc_403302:                             ; CODE XREF: sub_403290+6E↑j
.text:00403302                 cmp     eax, ebp
.text:00403304                 ja      short loc_403330
.text:00403306                 cld
.text:00403307                 mov     esi, [esp+12Ch+var_100]
.text:0040330B                 mov     ecx, 0FFh
.text:00403310                 mov     edi, [esp+12Ch+var_104]
.text:00403314                 cmp     eax, 0FFh
.text:00403319                 repe cmpsb
.text:0040331B                 jnz     short loc_403330
.text:0040331D                 mov     [esp+12Ch+var_106], 1
.text:00403322                 lea     esi, [esi+0]
.text:00403329                 lea     edi, [edi+0]
.text:00403330
.text:00403330 loc_403330:                             ; CODE XREF: sub_403290+74↑j
.text:00403330                                         ; sub_403290+8B↑j
.text:00403330                 cmp     [esp+12Ch+var_106], 0
.text:00403335                 jnz     short loc_403347
.text:00403337
.text:00403337 loc_403337:                             ; CODE XREF: sub_403290+19C↓j
.text:00403337                 movzx   eax, [esp+12Ch+var_107]
.text:0040333C                 add     esp, 11Ch
.text:00403342                 pop     ebx
.text:00403343                 pop     esi
.text:00403344                 pop     edi
.text:00403345                 pop     ebp
.text:00403346                 retn
.text:00403347 ; ---------------------------------------------------------------------------
.text:00403347
.text:00403347 loc_403347:                             ; CODE XREF: sub_403290+A5↑j
.text:00403347                 mov     eax, [esp+12Ch+arg_0]
.text:0040334E                 lea     esi, [esp+12Ch+var_8C]
.text:00403355                 mov     [esp+12Ch+Block], eax ; void *
.text:00403358                 call    sub_405800
.text:0040335D                 mov     [esp+12Ch+var_10C], eax
.text:00403361                 mov     edi, [esp+12Ch+arg_4]
.text:00403368                 mov     [esp+12Ch+Block], edi ; void *
.text:0040336B                 call    sub_405800
.text:00403370                 mov     [esp+12Ch+var_110], eax
.text:00403374                 mov     ebx, [esp+12Ch+var_10C]
.text:00403378                 mov     [esp+12Ch+ErrorMessage], esi ; int
.text:0040337C                 mov     [esp+12Ch+Block], ebx ; char *
.text:0040337F                 call    sub_40F0C0
.text:00403384                 test    eax, eax
.text:00403386                 jnz     loc_4034DC
.text:0040338C
.text:0040338C loc_40338C:                             ; CODE XREF: sub_403290+273↓j
.text:0040338C                 mov     edx, [esp+12Ch+var_110]
.text:00403390                 lea     esi, [esp+12Ch+var_FC]
.text:00403394                 mov     [esp+12Ch+ErrorMessage], esi ; int
.text:00403398                 mov     [esp+12Ch+Block], edx ; char *
.text:0040339B                 call    sub_40F0C0
.text:004033A0                 test    eax, eax
.text:004033A2                 jnz     loc_4034B0
.text:004033A8
.text:004033A8 loc_4033A8:                             ; CODE XREF: sub_403290+247↓j
.text:004033A8                 mov     [esp+12Ch+var_111], 0
.text:004033AD                 mov     edx, [esp+12Ch+var_80]
.text:004033B4                 mov     esi, [esp+12Ch+var_84]
.text:004033BB                 mov     edi, [esp+12Ch+var_F4]
.text:004033BF                 mov     ecx, [esp+12Ch+var_F0]
.text:004033C3                 mov     eax, edx
.text:004033C5                 xor     edi, esi
.text:004033C7                 xor     eax, ecx
.text:004033C9                 or      eax, edi
.text:004033CB                 jnz     short loc_403400
.text:004033CD                 mov     edx, [esp+12Ch+var_78]
.text:004033D4                 mov     esi, [esp+12Ch+var_7C]
.text:004033DB                 mov     edi, [esp+12Ch+var_EC]
.text:004033DF                 mov     ecx, [esp+12Ch+var_E8]
.text:004033E3                 mov     eax, edx
.text:004033E5                 xor     edi, esi
.text:004033E7                 xor     eax, ecx
.text:004033E9                 or      eax, edi
.text:004033EB                 jnz     short loc_403400
.text:004033ED                 mov     [esp+12Ch+var_111], 1
.text:004033F2                 lea     esi, [esi+0]
.text:004033F9                 lea     edi, [edi+0]
.text:00403400
.text:00403400 loc_403400:                             ; CODE XREF: sub_403290+13B↑j
.text:00403400                                         ; sub_403290+15B↑j
.text:00403400                 movzx   ebx, [esp+12Ch+var_111]
.text:00403405                 test    bl, bl
.text:00403407                 mov     [esp+12Ch+var_107], bl
.text:0040340B                 jz      short loc_403414
.text:0040340D                 cmp     [esp+12Ch+var_105], 0
.text:00403412                 jz      short loc_403431
.text:00403414
.text:00403414 loc_403414:                             ; CODE XREF: sub_403290+17B↑j
.text:00403414                                         ; sub_403290+1E1↓j ...
.text:00403414                 mov     edx, [esp+12Ch+var_10C]
.text:00403418                 mov     [esp+12Ch+Block], edx ; Block
.text:0040341B                 call    free
.text:00403420                 mov     eax, [esp+12Ch+var_110]
.text:00403424                 mov     [esp+12Ch+Block], eax ; Block
.text:00403427                 call    free
.text:0040342C                 jmp     loc_403337
.text:00403431 ; ---------------------------------------------------------------------------
.text:00403431
.text:00403431 loc_403431:                             ; CODE XREF: sub_403290+182↑j
.text:00403431                 call    _errno
.text:00403436                 mov     dword ptr [eax], 0
.text:0040343C                 mov     edi, [esp+12Ch+var_110]
.text:00403440                 mov     [esp+12Ch+ErrorMessage], 3
.text:00403448                 mov     [esp+12Ch+Block], edi
.text:0040344B                 call    sub_40F5F0
.text:00403450                 test    eax, eax
.text:00403452                 js      short loc_403473
.text:00403454                 xor     ebx, ebx
.text:00403456                 cmp     eax, ebp
.text:00403458                 ja      short loc_40346D
.text:0040345A                 cld
.text:0040345B                 mov     esi, [esp+12Ch+var_100]
.text:0040345F                 cmp     eax, eax
.text:00403461                 mov     edi, [esp+12Ch+var_104]
.text:00403465                 mov     ecx, eax
.text:00403467                 repe cmpsb
.text:00403469                 jnz     short loc_40346D
.text:0040346B                 mov     bl, 1
.text:0040346D
.text:0040346D loc_40346D:                             ; CODE XREF: sub_403290+1C8↑j
.text:0040346D                                         ; sub_403290+1D9↑j
.text:0040346D                 mov     [esp+12Ch+var_107], bl
.text:00403471                 jmp     short loc_403414
.text:00403473 ; ---------------------------------------------------------------------------
.text:00403473
.text:00403473 loc_403473:                             ; CODE XREF: sub_403290+1C2↑j
.text:00403473                 call    _errno
.text:00403478                 mov     ebp, [eax]
.text:0040347A                 test    ebp, ebp
.text:0040347C                 jnz     short loc_403485
.text:0040347E
.text:0040347E loc_40347E:                             ; CODE XREF: sub_403290+21C↓j
.text:0040347E                 mov     [esp+12Ch+var_107], 0
.text:00403483                 jmp     short loc_403414
.text:00403485 ; ---------------------------------------------------------------------------
.text:00403485
.text:00403485 loc_403485:                             ; CODE XREF: sub_403290+1EC↑j
.text:00403485                 call    _errno
.text:0040348A                 mov     [esp+12Ch+var_124], offset dword_403280 ; char *
.text:00403492                 mov     ecx, [esp+12Ch+var_110]
.text:00403496                 mov     dword ptr [esp+12Ch+var_120], ecx ; char
.text:0040349A                 mov     esi, [eax]
.text:0040349C                 mov     [esp+12Ch+Block], 1 ; Code
.text:004034A3                 mov     [esp+12Ch+ErrorMessage], esi ; ErrorMessage
.text:004034A7                 call    sub_40E040
.text:004034AC                 jmp     short loc_40347E
.text:004034AC ; ---------------------------------------------------------------------------
.text:004034AE                 align 10h
.text:004034B0
.text:004034B0 loc_4034B0:                             ; CODE XREF: sub_403290+112↑j
.text:004034B0                 call    _errno
.text:004034B5                 mov     [esp+12Ch+var_124], offset dword_403280 ; char *
.text:004034BD                 mov     ecx, [esp+12Ch+var_110]
.text:004034C1                 mov     dword ptr [esp+12Ch+var_120], ecx ; char
.text:004034C5                 mov     edi, [eax]
.text:004034C7                 mov     [esp+12Ch+Block], 1 ; Code
.text:004034CE                 mov     [esp+12Ch+ErrorMessage], edi ; ErrorMessage
.text:004034D2                 call    sub_40E040
.text:004034D7                 jmp     loc_4033A8
.text:004034DC ; ---------------------------------------------------------------------------
.text:004034DC
.text:004034DC loc_4034DC:                             ; CODE XREF: sub_403290+F6↑j
.text:004034DC                 call    _errno
.text:004034E1                 mov     [esp+12Ch+var_124], offset dword_403280 ; char *
.text:004034E9                 mov     ebx, [esp+12Ch+var_10C]
.text:004034ED                 mov     dword ptr [esp+12Ch+var_120], ebx ; char
.text:004034F1                 mov     ecx, [eax]
.text:004034F3                 mov     [esp+12Ch+Block], 1 ; Code
.text:004034FA                 mov     [esp+12Ch+ErrorMessage], ecx ; ErrorMessage
.text:004034FE                 call    sub_40E040
.text:00403503                 jmp     loc_40338C
.text:00403508 ; ---------------------------------------------------------------------------
.text:00403508
.text:00403508 loc_403508:                             ; CODE XREF: sub_403290+53↑j
.text:00403508                 cld
.text:00403509                 mov     esi, [esp+12Ch+var_100]
.text:0040350D                 cmp     ebx, ebx
.text:0040350F                 mov     edi, [esp+12Ch+var_104]
.text:00403513                 mov     ecx, ebx
.text:00403515                 repe cmpsb
.text:00403517                 jnz     loc_4032E9
.text:0040351D                 mov     [esp+12Ch+var_105], 1
.text:00403522                 jmp     loc_4032E9
.text:00403522 sub_403290      endp
.text:00403522
.text:00403522 ; ---------------------------------------------------------------------------
.text:00403527                 align 10h
.text:00403530 dword_403530    dd 90002D2Dh, 7 dup(90909090h)
.text:00403530                                         ; DATA XREF: sub_403780+E4↓o
.text:00403550 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403550                                         ; DATA XREF: sub_403780+2FC↓o
.text:0040357D                 db 13h dup(90h)
.text:00403590 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403590                                         ; DATA XREF: sub_403780:loc_403AE2↓o
.text:004035BD                 db 13h dup(90h)
.text:004035D0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004035D0                                         ; DATA XREF: sub_403780:loc_403B80↓o
.text:004035D0                                         ; sub_403780:loc_403F47↓o
.text:004035F6                 db 1Ah dup(90h)
.text:00403610 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00403610                                         ; DATA XREF: sub_403780+48E↓o
.text:00403630 dword_403630    dd 90909000h, 7 dup(90909090h)
.text:00403630                                         ; DATA XREF: sub_403780:loc_403C51↓o
.text:00403650 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00403650                                         ; DATA XREF: sub_403780:loc_403C6A↓o
.text:00403670 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00403670                                         ; DATA XREF: sub_403780:loc_403D4F↓o
.text:00403670                                         ; sub_403780:loc_40407C↓o
.text:00403697                 db 19h dup(90h)
.text:004036B0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004036B0                                         ; DATA XREF: sub_403780:loc_403EC3↓o
.text:004036DE                 db 12h dup(90h)
.text:004036F0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004036F0                                         ; DATA XREF: sub_403780:loc_403FAF↓o
.text:00403711 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00403711                                         ; DATA XREF: sub_403780+93F↓o
.text:0040372B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040372B                                         ; DATA XREF: sub_403780:loc_4040F7↓o
.text:00403745 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00403745                                         ; DATA XREF: sub_403780:loc_40411E↓o
.text:00403763 ; const char aPosixlyCorrect[]
.text:00403763 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_403780:loc_4042D0↓o
.text:00403773                 align 10h
.text:00403780
.text:00403780 ; =============== S U B R O U T I N E =======================================
.text:00403780
.text:00403780
.text:00403780 ; int __cdecl sub_403780(int, int, char *Str, int, int, int, int, int)
.text:00403780 sub_403780      proc near               ; CODE XREF: sub_404310+5A↓p
.text:00403780                                         ; .text:004043FA↓p ...
.text:00403780
.text:00403780 Str1            = dword ptr -5Ch
.text:00403780 Str2            = dword ptr -58h
.text:00403780 MaxCount        = dword ptr -54h
.text:00403780 var_50          = dword ptr -50h
.text:00403780 var_4C          = dword ptr -4Ch
.text:00403780 var_3C          = dword ptr -3Ch
.text:00403780 var_38          = dword ptr -38h
.text:00403780 var_34          = dword ptr -34h
.text:00403780 var_30          = dword ptr -30h
.text:00403780 var_2C          = dword ptr -2Ch
.text:00403780 var_28          = dword ptr -28h
.text:00403780 var_24          = dword ptr -24h
.text:00403780 var_20          = dword ptr -20h
.text:00403780 var_1C          = dword ptr -1Ch
.text:00403780 var_18          = dword ptr -18h
.text:00403780 var_14          = dword ptr -14h
.text:00403780 arg_0           = dword ptr  4
.text:00403780 arg_4           = dword ptr  8
.text:00403780 Str             = dword ptr  0Ch
.text:00403780 arg_C           = dword ptr  10h
.text:00403780 arg_10          = dword ptr  14h
.text:00403780 arg_14          = dword ptr  18h
.text:00403780 arg_18          = dword ptr  1Ch
.text:00403780 arg_1C          = dword ptr  20h
.text:00403780
.text:00403780                 push    ebp
.text:00403781                 mov     eax, 0FFFFFFFFh
.text:00403786                 push    edi
.text:00403787                 push    esi
.text:00403788                 push    ebx
.text:00403789                 sub     esp, 4Ch
.text:0040378C                 mov     esi, [esp+5Ch+Str]
.text:00403790                 mov     ebp, [esp+5Ch+arg_1C]
.text:00403794                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00403797                 mov     ebx, [ebp+4]
.text:0040379A                 setz    dl
.text:0040379D                 movzx   ecx, dl
.text:004037A0                 dec     ecx
.text:004037A1                 and     ecx, ebx
.text:004037A3                 mov     [esp+5Ch+var_14], ecx
.text:004037A7                 mov     ecx, [esp+5Ch+arg_0]
.text:004037AB                 test    ecx, ecx
.text:004037AD                 jle     loc_4038D7
.text:004037B3                 mov     dword ptr [ebp+0Ch], 0
.text:004037BA                 mov     ebx, [ebp+0]
.text:004037BD                 test    ebx, ebx
.text:004037BF                 jz      loc_4042F0
.text:004037C5                 mov     edi, [ebp+10h]
.text:004037C8                 test    edi, edi
.text:004037CA                 jnz     short loc_403823
.text:004037CC                 lea     esi, [esi+0]
.text:004037D0
.text:004037D0 loc_4037D0:                             ; CODE XREF: sub_403780+B7C↓j
.text:004037D0                 mov     [ebp+24h], ebx
.text:004037D3                 mov     esi, [esp+5Ch+Str]
.text:004037D7                 mov     [ebp+20h], ebx
.text:004037DA                 mov     ecx, [esp+5Ch+arg_18]
.text:004037DE                 xor     ebx, ebx
.text:004037E0                 mov     dword ptr [ebp+14h], 0
.text:004037E7                 test    ecx, ecx
.text:004037E9                 jz      loc_4042D0
.text:004037EF
.text:004037EF loc_4037EF:                             ; CODE XREF: sub_403780+B64↓j
.text:004037EF                 mov     ebx, 1
.text:004037F4
.text:004037F4 loc_4037F4:                             ; CODE XREF: sub_403780+B5E↓j
.text:004037F4                 mov     [ebp+1Ch], ebx
.text:004037F7                 mov     ecx, [esp+5Ch+Str]
.text:004037FB                 movzx   eax, byte ptr [ecx]
.text:004037FE                 cmp     al, 2Dh ; '-'
.text:00403800                 jz      loc_4042C0
.text:00403806                 cmp     al, 2Bh ; '+'
.text:00403808                 jz      loc_4042A9
.text:0040380E                 xor     edx, edx
.text:00403810                 test    ebx, ebx
.text:00403812                 setz    dl
.text:00403815                 mov     [ebp+18h], edx
.text:00403818
.text:00403818 loc_403818:                             ; CODE XREF: sub_403780+B35↓j
.text:00403818                 mov     [esp+5Ch+Str], esi
.text:0040381C                 mov     dword ptr [ebp+10h], 1
.text:00403823
.text:00403823 loc_403823:                             ; CODE XREF: sub_403780+4A↑j
.text:00403823                 mov     eax, [ebp+14h]
.text:00403826                 test    eax, eax
.text:00403828                 jz      short loc_403833
.text:0040382A                 cmp     byte ptr [eax], 0
.text:0040382D                 jnz     loc_403910
.text:00403833
.text:00403833 loc_403833:                             ; CODE XREF: sub_403780+A8↑j
.text:00403833                 mov     ebx, [ebp+0]
.text:00403836                 cmp     [ebp+24h], ebx
.text:00403839                 jle     short loc_40383E
.text:0040383B                 mov     [ebp+24h], ebx
.text:0040383E
.text:0040383E loc_40383E:                             ; CODE XREF: sub_403780+B9↑j
.text:0040383E                 cmp     [ebp+20h], ebx
.text:00403841                 jle     short loc_403846
.text:00403843                 mov     [ebp+20h], ebx
.text:00403846
.text:00403846 loc_403846:                             ; CODE XREF: sub_403780+C1↑j
.text:00403846                 cmp     dword ptr [ebp+18h], 1
.text:0040384A                 jz      loc_404220
.text:00403850
.text:00403850 loc_403850:                             ; CODE XREF: sub_403780+B13↓j
.text:00403850                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403854                 jz      loc_404204
.text:0040385A                 cld
.text:0040385B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040385F                 mov     edx, 3
.text:00403864                 mov     edi, offset dword_403530
.text:00403869                 mov     esi, [ecx+ebx*4]
.text:0040386C                 mov     ecx, edx
.text:0040386E                 repe cmpsb
.text:00403870                 jnz     short loc_4038AC
.text:00403872                 mov     edx, [ebp+24h]
.text:00403875                 lea     eax, [ebx+1]
.text:00403878                 cmp     [ebp+20h], edx
.text:0040387B                 mov     [ebp+0], eax
.text:0040387E                 jz      loc_404218
.text:00403884                 cmp     edx, eax
.text:00403886                 jz      short loc_4038A0
.text:00403888                 mov     [esp+5Ch+Str2], ebp
.text:0040388C                 mov     ebx, [esp+5Ch+arg_4]
.text:00403890                 mov     [esp+5Ch+Str1], ebx
.text:00403893                 call    sub_404430
.text:00403898                 nop
.text:00403899                 lea     esi, [esi+0]
.text:004038A0
.text:004038A0 loc_4038A0:                             ; CODE XREF: sub_403780+106↑j
.text:004038A0                                         ; sub_403780+A9B↓j
.text:004038A0                 mov     eax, [esp+5Ch+arg_0]
.text:004038A4                 mov     ebx, eax
.text:004038A6                 mov     [ebp+24h], eax
.text:004038A9                 mov     [ebp+0], eax
.text:004038AC
.text:004038AC loc_4038AC:                             ; CODE XREF: sub_403780+F0↑j
.text:004038AC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004038B0                 jz      loc_404204
.text:004038B6                 mov     esi, [esp+5Ch+arg_4]
.text:004038BA                 mov     eax, [esi+ebx*4]
.text:004038BD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004038C0                 jz      short loc_4038E7
.text:004038C2
.text:004038C2 loc_4038C2:                             ; CODE XREF: sub_403780+16D↓j
.text:004038C2                 mov     edx, [ebp+18h]
.text:004038C5                 test    edx, edx
.text:004038C7                 jz      short loc_4038E0
.text:004038C9                 mov     [ebp+0Ch], eax
.text:004038CC                 lea     edi, [ebx+1]
.text:004038CF                 mov     eax, 1
.text:004038D4                 mov     [ebp+0], edi
.text:004038D7
.text:004038D7 loc_4038D7:                             ; CODE XREF: sub_403780+2D↑j
.text:004038D7                                         ; sub_403780+165↓j ...
.text:004038D7                 add     esp, 4Ch
.text:004038DA                 pop     ebx
.text:004038DB                 pop     esi
.text:004038DC                 pop     edi
.text:004038DD                 pop     ebp
.text:004038DE                 retn
.text:004038DE ; ---------------------------------------------------------------------------
.text:004038DF                 align 10h
.text:004038E0
.text:004038E0 loc_4038E0:                             ; CODE XREF: sub_403780+147↑j
.text:004038E0                                         ; sub_403780+A8A↓j ...
.text:004038E0                 mov     eax, 0FFFFFFFFh
.text:004038E5                 jmp     short loc_4038D7
.text:004038E7 ; ---------------------------------------------------------------------------
.text:004038E7
.text:004038E7 loc_4038E7:                             ; CODE XREF: sub_403780+140↑j
.text:004038E7                 movzx   edx, byte ptr [eax+1]
.text:004038EB                 test    dl, dl
.text:004038ED                 jz      short loc_4038C2
.text:004038EF                 mov     ebx, [esp+5Ch+arg_C]
.text:004038F3                 xor     ecx, ecx
.text:004038F5                 test    ebx, ebx
.text:004038F7                 jz      short loc_403902
.text:004038F9                 cmp     dl, 2Dh ; '-'
.text:004038FC                 jz      loc_4041FA
.text:00403902
.text:00403902 loc_403902:                             ; CODE XREF: sub_403780+177↑j
.text:00403902                                         ; sub_403780+A7F↓j
.text:00403902                 lea     esi, [ecx+eax+1]
.text:00403906                 mov     [ebp+14h], esi
.text:00403909                 lea     esi, [esi+0]
.text:00403910
.text:00403910 loc_403910:                             ; CODE XREF: sub_403780+AD↑j
.text:00403910                 mov     ecx, [esp+5Ch+arg_C]
.text:00403914                 test    ecx, ecx
.text:00403916                 jz      loc_403CA0
.text:0040391C                 mov     edx, [ebp+0]
.text:0040391F                 mov     edi, [esp+5Ch+arg_4]
.text:00403923                 mov     eax, [edi+edx*4]
.text:00403926                 movzx   edx, byte ptr [eax+1]
.text:0040392A                 cmp     dl, 2Dh ; '-'
.text:0040392D                 jz      short loc_403945
.text:0040392F                 mov     ebx, [esp+5Ch+arg_14]
.text:00403933                 test    ebx, ebx
.text:00403935                 jz      loc_403CA0
.text:0040393B                 cmp     byte ptr [eax+2], 0
.text:0040393F                 jz      loc_4041DA
.text:00403945
.text:00403945 loc_403945:                             ; CODE XREF: sub_403780+1AD↑j
.text:00403945                                         ; sub_403780+A75↓j
.text:00403945                 mov     [esp+5Ch+var_18], 0
.text:0040394D                 mov     ecx, [ebp+14h]
.text:00403950                 mov     [esp+5Ch+var_1C], 0
.text:00403958                 mov     [esp+5Ch+var_20], 0
.text:00403960                 mov     edi, ecx
.text:00403962                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040396A                 movzx   eax, byte ptr [ecx]
.text:0040396D                 test    al, al
.text:0040396F                 jz      short loc_40398C
.text:00403971                 cmp     al, 3Dh ; '='
.text:00403973                 jz      short loc_40398C
.text:00403975                 lea     esi, [esi+0]
.text:00403979                 lea     edi, [edi+0]
.text:00403980
.text:00403980 loc_403980:                             ; CODE XREF: sub_403780+20A↓j
.text:00403980                 inc     edi
.text:00403981                 movzx   eax, byte ptr [edi]
.text:00403984                 test    al, al
.text:00403986                 jz      short loc_40398C
.text:00403988                 cmp     al, 3Dh ; '='
.text:0040398A                 jnz     short loc_403980
.text:0040398C
.text:0040398C loc_40398C:                             ; CODE XREF: sub_403780+1EF↑j
.text:0040398C                                         ; sub_403780+1F3↑j ...
.text:0040398C                 mov     [esp+5Ch+var_28], 0
.text:00403994                 mov     esi, [esp+5Ch+arg_C]
.text:00403998                 mov     ebx, [esi]
.text:0040399A                 test    ebx, ebx
.text:0040399C                 mov     edx, ebx
.text:0040399E                 jz      loc_403BC0
.text:004039A4                 lea     esi, [esi+0]
.text:004039AA                 lea     edi, [edi+0]
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: sub_403780+25E↓j
.text:004039B0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004039B4                 mov     ebx, edi
.text:004039B6                 sub     ebx, ecx
.text:004039B8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004039BC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004039BF                 call    strncmp
.text:004039C4                 test    eax, eax
.text:004039C6                 jz      loc_404156
.text:004039CC
.text:004039CC loc_4039CC:                             ; CODE XREF: sub_403780+A0F↓j
.text:004039CC                                         ; sub_403780+A24↓j ...
.text:004039CC                 inc     [esp+5Ch+var_28]
.text:004039D0                 add     esi, 10h
.text:004039D3                 mov     ecx, [esi]
.text:004039D5                 test    ecx, ecx
.text:004039D7                 mov     edx, ecx
.text:004039D9                 jz      short loc_4039E0
.text:004039DB                 mov     ecx, [ebp+14h]
.text:004039DE                 jmp     short loc_4039B0
.text:004039E0 ; ---------------------------------------------------------------------------
.text:004039E0
.text:004039E0 loc_4039E0:                             ; CODE XREF: sub_403780+259↑j
.text:004039E0                                         ; sub_403780+A55↓j
.text:004039E0                 mov     esi, [esp+5Ch+var_20]
.text:004039E4                 test    esi, esi
.text:004039E6                 jz      short loc_4039F4
.text:004039E8                 mov     edx, [esp+5Ch+var_1C]
.text:004039EC                 test    edx, edx
.text:004039EE                 jz      loc_404100
.text:004039F4
.text:004039F4 loc_4039F4:                             ; CODE XREF: sub_403780+266↑j
.text:004039F4                 mov     eax, [esp+5Ch+var_18]
.text:004039F8                 test    eax, eax
.text:004039FA                 jz      loc_403BC0
.text:00403A00                 mov     ecx, [ebp+0]
.text:00403A03                 lea     eax, [ecx+1]
.text:00403A06                 mov     [ebp+0], eax
.text:00403A09                 cmp     byte ptr [edi], 0
.text:00403A0C                 jz      loc_403B20
.text:00403A12                 mov     ecx, [esp+5Ch+var_18]
.text:00403A16                 mov     esi, [ecx+4]
.text:00403A19                 test    esi, esi
.text:00403A1B                 jz      short loc_403A66
.text:00403A1D                 lea     ebx, [edi+1]
.text:00403A20                 mov     [ebp+0Ch], ebx
.text:00403A23
.text:00403A23 loc_403A23:                             ; CODE XREF: sub_403780+3A8↓j
.text:00403A23                                         ; sub_403780+3C4↓j
.text:00403A23                 mov     ebx, [ebp+14h]
.text:00403A26                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00403A29                 call    strlen
.text:00403A2E                 add     [ebp+14h], eax
.text:00403A31                 mov     esi, [esp+5Ch+arg_10]
.text:00403A35                 test    esi, esi
.text:00403A37                 jz      short loc_403A43
.text:00403A39                 mov     ebp, [esp+5Ch+var_24]
.text:00403A3D                 mov     ecx, [esp+5Ch+arg_10]
.text:00403A41                 mov     [ecx], ebp
.text:00403A43
.text:00403A43 loc_403A43:                             ; CODE XREF: sub_403780+2B7↑j
.text:00403A43                 mov     eax, [esp+5Ch+var_18]
.text:00403A47                 mov     ecx, [eax+8]
.text:00403A4A                 test    ecx, ecx
.text:00403A4C                 jnz     short loc_403A5A
.text:00403A4E                 mov     ecx, [esp+5Ch+var_18]
.text:00403A52
.text:00403A52 loc_403A52:                             ; CODE XREF: sub_403780+723↓j
.text:00403A52                 mov     eax, [ecx+0Ch]
.text:00403A55                 jmp     loc_4038D7
.text:00403A5A ; ---------------------------------------------------------------------------
.text:00403A5A
.text:00403A5A loc_403A5A:                             ; CODE XREF: sub_403780+2CC↑j
.text:00403A5A                                         ; sub_403780+719↓j
.text:00403A5A                 mov     esi, [eax+0Ch]
.text:00403A5D                 xor     eax, eax
.text:00403A5F                 mov     [ecx], esi
.text:00403A61                 jmp     loc_4038D7
.text:00403A66 ; ---------------------------------------------------------------------------
.text:00403A66
.text:00403A66 loc_403A66:                             ; CODE XREF: sub_403780+29B↑j
.text:00403A66                 mov     edi, [esp+5Ch+var_14]
.text:00403A6A                 test    edi, edi
.text:00403A6C                 jz      short loc_403AC0
.text:00403A6E                 mov     esi, [esp+5Ch+arg_4]
.text:00403A72                 mov     edx, [esi+eax*4-4]
.text:00403A76                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00403A7A                 jz      short loc_403AE2
.text:00403A7C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00403A83                 call    ds:libintl_gettext
.text:00403A89                 mov     edx, [esp+5Ch+var_18]
.text:00403A8D                 mov     edi, [edx]
.text:00403A8F                 mov     [esp+5Ch+var_4C], edi
.text:00403A93                 mov     ebx, [ebp+0]
.text:00403A96                 mov     edi, [esp+5Ch+arg_4]
.text:00403A9A                 mov     ecx, [edi+ebx*4-4]
.text:00403A9E                 movsx   esi, byte ptr [ecx]
.text:00403AA1                 mov     ecx, ds:_iob
.text:00403AA7                 add     ecx, 40h ; '@'
.text:00403AAA                 mov     [esp+5Ch+var_50], esi
.text:00403AAE                 mov     ebx, [edi]
.text:00403AB0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403AB4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403AB7                 mov     [esp+5Ch+MaxCount], ebx
.text:00403ABB                 call    fprintf
.text:00403AC0
.text:00403AC0 loc_403AC0:                             ; CODE XREF: sub_403780+2EC↑j
.text:00403AC0                                         ; sub_403780+398↓j
.text:00403AC0                 mov     ecx, [ebp+14h]
.text:00403AC3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403AC6                 call    strlen
.text:00403ACB                 add     [ebp+14h], eax
.text:00403ACE                 mov     eax, [esp+5Ch+var_18]
.text:00403AD2                 mov     esi, [eax+0Ch]
.text:00403AD5                 mov     [ebp+8], esi
.text:00403AD8
.text:00403AD8 loc_403AD8:                             ; CODE XREF: sub_403780+4E5↓j
.text:00403AD8                                         ; sub_403780+73E↓j ...
.text:00403AD8                 mov     eax, 3Fh ; '?'
.text:00403ADD                 jmp     loc_4038D7
.text:00403AE2 ; ---------------------------------------------------------------------------
.text:00403AE2
.text:00403AE2 loc_403AE2:                             ; CODE XREF: sub_403780+2FA↑j
.text:00403AE2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00403AE9                 call    ds:libintl_gettext
.text:00403AEF                 mov     edx, [esp+5Ch+var_18]
.text:00403AF3                 mov     edi, [esp+5Ch+arg_4]
.text:00403AF7                 mov     ecx, ds:_iob
.text:00403AFD                 mov     esi, [edx]
.text:00403AFF                 add     ecx, 40h ; '@'
.text:00403B02                 mov     [esp+5Ch+var_50], esi
.text:00403B06                 mov     ebx, [edi]
.text:00403B08                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403B0C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403B0F                 mov     [esp+5Ch+MaxCount], ebx
.text:00403B13                 call    fprintf
.text:00403B18                 jmp     short loc_403AC0
.text:00403B18 ; ---------------------------------------------------------------------------
.text:00403B1A                 align 10h
.text:00403B20
.text:00403B20 loc_403B20:                             ; CODE XREF: sub_403780+28C↑j
.text:00403B20                 mov     ebx, [esp+5Ch+var_18]
.text:00403B24                 cmp     dword ptr [ebx+4], 1
.text:00403B28                 jnz     loc_403A23
.text:00403B2E                 cmp     eax, [esp+5Ch+arg_0]
.text:00403B32                 jge     short loc_403B49
.text:00403B34                 mov     ebx, [esp+5Ch+arg_4]
.text:00403B38                 lea     edi, [ecx+2]
.text:00403B3B                 mov     [ebp+0], edi
.text:00403B3E                 mov     esi, [ebx+eax*4]
.text:00403B41                 mov     [ebp+0Ch], esi
.text:00403B44                 jmp     loc_403A23
.text:00403B49 ; ---------------------------------------------------------------------------
.text:00403B49
.text:00403B49 loc_403B49:                             ; CODE XREF: sub_403780+3B2↑j
.text:00403B49                 mov     edx, [esp+5Ch+var_14]
.text:00403B4D                 test    edx, edx
.text:00403B4F                 jnz     short loc_403B80
.text:00403B51
.text:00403B51 loc_403B51:                             ; CODE XREF: sub_403780+437↓j
.text:00403B51                 mov     edx, [ebp+14h]
.text:00403B54                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403B57                 call    strlen
.text:00403B5C                 add     [ebp+14h], eax
.text:00403B5F                 mov     eax, [esp+5Ch+var_18]
.text:00403B63                 mov     edi, [eax+0Ch]
.text:00403B66                 mov     [ebp+8], edi
.text:00403B69
.text:00403B69 loc_403B69:                             ; CODE XREF: sub_403780+7C2↓j
.text:00403B69                 mov     ebp, [esp+5Ch+Str]
.text:00403B6D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403B71                 setnz   bl
.text:00403B74                 movzx   esi, bl
.text:00403B77                 lea     eax, [esi+esi*4+3Ah]
.text:00403B7B                 jmp     loc_4038D7
.text:00403B80 ; ---------------------------------------------------------------------------
.text:00403B80
.text:00403B80 loc_403B80:                             ; CODE XREF: sub_403780+3CF↑j
.text:00403B80                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00403B87                 call    ds:libintl_gettext
.text:00403B8D                 mov     ecx, [ebp+0]
.text:00403B90                 mov     esi, [esp+5Ch+arg_4]
.text:00403B94                 mov     ebx, [esi+ecx*4-4]
.text:00403B98                 mov     ecx, ds:_iob
.text:00403B9E                 mov     [esp+5Ch+var_50], ebx
.text:00403BA2                 mov     edi, [esi]
.text:00403BA4                 add     ecx, 40h ; '@'
.text:00403BA7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403BAB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403BAE                 mov     [esp+5Ch+MaxCount], edi
.text:00403BB2                 call    fprintf
.text:00403BB7                 jmp     short loc_403B51
.text:00403BB7 ; ---------------------------------------------------------------------------
.text:00403BB9                 align 10h
.text:00403BC0
.text:00403BC0 loc_403BC0:                             ; CODE XREF: sub_403780+21E↑j
.text:00403BC0                                         ; sub_403780+27A↑j
.text:00403BC0                 mov     eax, [esp+5Ch+arg_14]
.text:00403BC4                 test    eax, eax
.text:00403BC6                 jz      short loc_403BF6
.text:00403BC8                 mov     ebx, [ebp+0]
.text:00403BCB                 mov     esi, [esp+5Ch+arg_4]
.text:00403BCF                 mov     edi, [esi+ebx*4]
.text:00403BD2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00403BD6                 jz      short loc_403BF9
.text:00403BD8                 mov     ecx, [ebp+14h]
.text:00403BDB                 mov     edx, [esp+5Ch+Str]
.text:00403BDF                 movsx   ebx, byte ptr [ecx]
.text:00403BE2                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403BE5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00403BE9                 call    strchr
.text:00403BEE                 test    eax, eax
.text:00403BF0                 jnz     loc_403CA0
.text:00403BF6
.text:00403BF6 loc_403BF6:                             ; CODE XREF: sub_403780+446↑j
.text:00403BF6                 mov     ebx, [ebp+0]
.text:00403BF9
.text:00403BF9 loc_403BF9:                             ; CODE XREF: sub_403780+456↑j
.text:00403BF9                 mov     eax, [esp+5Ch+var_14]
.text:00403BFD                 test    eax, eax
.text:00403BFF                 jz      short loc_403C51
.text:00403C01                 mov     esi, [esp+5Ch+arg_4]
.text:00403C05                 mov     edi, [esi+ebx*4]
.text:00403C08                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00403C0C                 jz      short loc_403C6A
.text:00403C0E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00403C15                 call    ds:libintl_gettext
.text:00403C1B                 mov     edi, [ebp+14h]
.text:00403C1E                 mov     [esp+5Ch+var_4C], edi
.text:00403C22                 mov     ebx, [ebp+0]
.text:00403C25                 mov     edi, [esp+5Ch+arg_4]
.text:00403C29                 mov     esi, [edi+ebx*4]
.text:00403C2C                 movsx   ecx, byte ptr [esi]
.text:00403C2F                 mov     esi, ds:_iob
.text:00403C35                 add     esi, 40h ; '@'
.text:00403C38                 mov     [esp+5Ch+var_50], ecx
.text:00403C3C                 mov     ebx, [edi]
.text:00403C3E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403C42                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00403C45                 mov     [esp+5Ch+MaxCount], ebx
.text:00403C49                 call    fprintf
.text:00403C4E
.text:00403C4E loc_403C4E:                             ; CODE XREF: sub_403780+51D↓j
.text:00403C4E                 mov     ebx, [ebp+0]
.text:00403C51
.text:00403C51 loc_403C51:                             ; CODE XREF: sub_403780+47F↑j
.text:00403C51                 mov     dword ptr [ebp+14h], offset dword_403630
.text:00403C58                 lea     edx, [ebx+1]
.text:00403C5B                 mov     [ebp+0], edx
.text:00403C5E
.text:00403C5E loc_403C5E:                             ; CODE XREF: sub_403780+999↓j
.text:00403C5E                 mov     dword ptr [ebp+8], 0
.text:00403C65                 jmp     loc_403AD8
.text:00403C6A ; ---------------------------------------------------------------------------
.text:00403C6A
.text:00403C6A loc_403C6A:                             ; CODE XREF: sub_403780+48C↑j
.text:00403C6A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00403C71                 call    ds:libintl_gettext
.text:00403C77                 mov     ecx, [ebp+14h]
.text:00403C7A                 mov     edi, [esp+5Ch+arg_4]
.text:00403C7E                 mov     edx, ds:_iob
.text:00403C84                 mov     [esp+5Ch+var_50], ecx
.text:00403C88                 mov     ebx, [edi]
.text:00403C8A                 add     edx, 40h ; '@'
.text:00403C8D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403C91                 mov     [esp+5Ch+MaxCount], ebx
.text:00403C95                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00403C98                 call    fprintf
.text:00403C9D                 jmp     short loc_403C4E
.text:00403C9D ; ---------------------------------------------------------------------------
.text:00403C9F                 align 10h
.text:00403CA0
.text:00403CA0 loc_403CA0:                             ; CODE XREF: sub_403780+196↑j
.text:00403CA0                                         ; sub_403780+1B5↑j ...
.text:00403CA0                 mov     esi, [ebp+14h]
.text:00403CA3                 movzx   ebx, byte ptr [esi]
.text:00403CA6                 inc     esi
.text:00403CA7                 mov     [ebp+14h], esi
.text:00403CAA                 mov     ecx, [esp+5Ch+Str]
.text:00403CAE                 movsx   esi, bl
.text:00403CB1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403CB5                 mov     edi, esi
.text:00403CB7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403CBA                 call    strchr
.text:00403CBF                 mov     ecx, [ebp+14h]
.text:00403CC2                 cmp     byte ptr [ecx], 0
.text:00403CC5                 jnz     short loc_403CCA
.text:00403CC7                 inc     dword ptr [ebp+0]
.text:00403CCA
.text:00403CCA loc_403CCA:                             ; CODE XREF: sub_403780+545↑j
.text:00403CCA                 test    eax, eax
.text:00403CCC                 jz      loc_4040B0
.text:00403CD2                 cmp     bl, 3Ah ; ':'
.text:00403CD5                 jz      loc_4040B0
.text:00403CDB                 cmp     byte ptr [eax], 57h ; 'W'
.text:00403CDE                 jz      loc_403D96
.text:00403CE4                 movzx   edx, byte ptr [eax+1]
.text:00403CE8
.text:00403CE8 loc_403CE8:                             ; CODE XREF: sub_403780+61D↓j
.text:00403CE8                 cmp     dl, 3Ah ; ':'
.text:00403CEB                 jz      short loc_403CF4
.text:00403CED
.text:00403CED loc_403CED:                             ; CODE XREF: sub_403780+590↓j
.text:00403CED                 mov     eax, esi
.text:00403CEF                 jmp     loc_4038D7
.text:00403CF4 ; ---------------------------------------------------------------------------
.text:00403CF4
.text:00403CF4 loc_403CF4:                             ; CODE XREF: sub_403780+56B↑j
.text:00403CF4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00403CF8                 jz      loc_403D81
.text:00403CFE                 cmp     byte ptr [ecx], 0
.text:00403D01                 jz      short loc_403D12
.text:00403D03
.text:00403D03 loc_403D03:                             ; CODE XREF: sub_403780+604↓j
.text:00403D03                 inc     dword ptr [ebp+0]
.text:00403D06                 mov     [ebp+0Ch], ecx
.text:00403D09
.text:00403D09 loc_403D09:                             ; CODE XREF: sub_403780+5AB↓j
.text:00403D09                                         ; sub_403780+5C6↓j ...
.text:00403D09                 mov     dword ptr [ebp+14h], 0
.text:00403D10                 jmp     short loc_403CED
.text:00403D12 ; ---------------------------------------------------------------------------
.text:00403D12
.text:00403D12 loc_403D12:                             ; CODE XREF: sub_403780+581↑j
.text:00403D12                 mov     ecx, [ebp+0]
.text:00403D15                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403D19                 jz      short loc_403D2D
.text:00403D1B                 mov     eax, [esp+5Ch+arg_4]
.text:00403D1F                 lea     edx, [ecx+1]
.text:00403D22                 mov     [ebp+0], edx
.text:00403D25                 mov     ebx, [eax+ecx*4]
.text:00403D28                 mov     [ebp+0Ch], ebx
.text:00403D2B                 jmp     short loc_403D09
.text:00403D2D ; ---------------------------------------------------------------------------
.text:00403D2D
.text:00403D2D loc_403D2D:                             ; CODE XREF: sub_403780+599↑j
.text:00403D2D                 mov     ecx, [esp+5Ch+var_14]
.text:00403D31                 test    ecx, ecx
.text:00403D33                 jnz     short loc_403D4F
.text:00403D35
.text:00403D35 loc_403D35:                             ; CODE XREF: sub_403780+5FF↓j
.text:00403D35                 mov     [ebp+8], edi
.text:00403D38                 mov     edi, [esp+5Ch+Str]
.text:00403D3C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00403D3F                 jz      short loc_403D48
.text:00403D41                 mov     esi, 3Fh ; '?'
.text:00403D46                 jmp     short loc_403D09
.text:00403D48 ; ---------------------------------------------------------------------------
.text:00403D48
.text:00403D48 loc_403D48:                             ; CODE XREF: sub_403780+5BF↑j
.text:00403D48                 mov     esi, 3Ah ; ':'
.text:00403D4D                 jmp     short loc_403D09
.text:00403D4F ; ---------------------------------------------------------------------------
.text:00403D4F
.text:00403D4F loc_403D4F:                             ; CODE XREF: sub_403780+5B3↑j
.text:00403D4F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403D56                 call    ds:libintl_gettext
.text:00403D5C                 mov     [esp+5Ch+var_50], edi
.text:00403D60                 mov     ebx, [esp+5Ch+arg_4]
.text:00403D64                 mov     edx, ds:_iob
.text:00403D6A                 mov     esi, [ebx]
.text:00403D6C                 add     edx, 40h ; '@'
.text:00403D6F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403D73                 mov     [esp+5Ch+MaxCount], esi
.text:00403D77                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00403D7A                 call    fprintf
.text:00403D7F                 jmp     short loc_403D35
.text:00403D81 ; ---------------------------------------------------------------------------
.text:00403D81
.text:00403D81 loc_403D81:                             ; CODE XREF: sub_403780+578↑j
.text:00403D81                 cmp     byte ptr [ecx], 0
.text:00403D84                 jnz     loc_403D03
.text:00403D8A                 mov     dword ptr [ebp+0Ch], 0
.text:00403D91                 jmp     loc_403D09
.text:00403D96 ; ---------------------------------------------------------------------------
.text:00403D96
.text:00403D96 loc_403D96:                             ; CODE XREF: sub_403780+55E↑j
.text:00403D96                 movzx   edx, byte ptr [eax+1]
.text:00403D9A                 cmp     dl, 3Bh ; ';'
.text:00403D9D                 jnz     loc_403CE8
.text:00403DA3                 mov     [esp+5Ch+var_2C], 0
.text:00403DAB                 mov     [esp+5Ch+var_30], 0
.text:00403DB3                 mov     [esp+5Ch+var_34], 0
.text:00403DBB                 mov     [esp+5Ch+var_38], 0
.text:00403DC3                 cmp     byte ptr [ecx], 0
.text:00403DC6                 jz      loc_40403B
.text:00403DCC                 inc     dword ptr [ebp+0]
.text:00403DCF                 mov     [ebp+0Ch], ecx
.text:00403DD2
.text:00403DD2 loc_403DD2:                             ; CODE XREF: sub_403780+8D4↓j
.text:00403DD2                 mov     edi, [ebp+0Ch]
.text:00403DD5                 mov     [ebp+14h], edi
.text:00403DD8                 movzx   eax, byte ptr [edi]
.text:00403DDB                 test    al, al
.text:00403DDD                 jz      short loc_403DEF
.text:00403DDF                 cmp     al, 3Dh ; '='
.text:00403DE1                 jz      short loc_403DEF
.text:00403DE3
.text:00403DE3 loc_403DE3:                             ; CODE XREF: sub_403780+66D↓j
.text:00403DE3                 inc     edi
.text:00403DE4                 movzx   eax, byte ptr [edi]
.text:00403DE7                 test    al, al
.text:00403DE9                 jz      short loc_403DEF
.text:00403DEB                 cmp     al, 3Dh ; '='
.text:00403DED                 jnz     short loc_403DE3
.text:00403DEF
.text:00403DEF loc_403DEF:                             ; CODE XREF: sub_403780+65D↑j
.text:00403DEF                                         ; sub_403780+661↑j ...
.text:00403DEF                 mov     [esp+5Ch+var_3C], 0
.text:00403DF7                 mov     esi, [esp+5Ch+arg_C]
.text:00403DFB                 mov     eax, [esi]
.text:00403DFD                 test    eax, eax
.text:00403DFF                 jz      loc_403F80
.text:00403E05                 mov     ecx, eax
.text:00403E07
.text:00403E07 loc_403E07:                             ; CODE XREF: sub_403780+6B3↓j
.text:00403E07                 mov     ebx, [ebp+14h]
.text:00403E0A                 mov     eax, edi
.text:00403E0C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00403E0F                 sub     eax, ebx
.text:00403E11                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00403E15                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00403E19                 call    strncmp
.text:00403E1E                 test    eax, eax
.text:00403E20                 jz      loc_403FE7
.text:00403E26
.text:00403E26 loc_403E26:                             ; CODE XREF: sub_403780+88C↓j
.text:00403E26                                         ; sub_403780+89D↓j
.text:00403E26                 inc     [esp+5Ch+var_3C]
.text:00403E2A                 add     esi, 10h
.text:00403E2D                 mov     edx, [esi]
.text:00403E2F                 test    edx, edx
.text:00403E31                 mov     ecx, edx
.text:00403E33                 jnz     short loc_403E07
.text:00403E35
.text:00403E35 loc_403E35:                             ; CODE XREF: sub_403780+8B6↓j
.text:00403E35                 mov     esi, [esp+5Ch+var_34]
.text:00403E39                 test    esi, esi
.text:00403E3B                 jz      short loc_403E49
.text:00403E3D                 mov     ebx, [esp+5Ch+var_30]
.text:00403E41                 test    ebx, ebx
.text:00403E43                 jz      loc_403F91
.text:00403E49
.text:00403E49 loc_403E49:                             ; CODE XREF: sub_403780+6BB↑j
.text:00403E49                 mov     esi, [esp+5Ch+var_2C]
.text:00403E4D                 test    esi, esi
.text:00403E4F                 jz      loc_403F80
.text:00403E55                 cmp     byte ptr [edi], 0
.text:00403E58                 jz      loc_403F00
.text:00403E5E                 mov     ecx, [esp+5Ch+var_2C]
.text:00403E62                 mov     ebx, [ecx+4]
.text:00403E65                 test    ebx, ebx
.text:00403E67                 jz      short loc_403EA8
.text:00403E69                 lea     edx, [edi+1]
.text:00403E6C                 mov     [ebp+0Ch], edx
.text:00403E6F
.text:00403E6F loc_403E6F:                             ; CODE XREF: sub_403780+788↓j
.text:00403E6F                                         ; sub_403780+7A7↓j
.text:00403E6F                 mov     edi, [ebp+14h]
.text:00403E72                 mov     [esp+5Ch+Str1], edi ; Str
.text:00403E75                 call    strlen
.text:00403E7A                 add     [ebp+14h], eax
.text:00403E7D                 mov     eax, [esp+5Ch+arg_10]
.text:00403E81                 test    eax, eax
.text:00403E83                 jz      short loc_403E90
.text:00403E85                 mov     edx, [esp+5Ch+var_38]
.text:00403E89                 mov     ebp, [esp+5Ch+arg_10]
.text:00403E8D                 mov     [ebp+0], edx
.text:00403E90
.text:00403E90 loc_403E90:                             ; CODE XREF: sub_403780+703↑j
.text:00403E90                 mov     eax, [esp+5Ch+var_2C]
.text:00403E94                 mov     ecx, [eax+8]
.text:00403E97                 test    ecx, ecx
.text:00403E99                 jnz     loc_403A5A
.text:00403E9F                 mov     ecx, [esp+5Ch+var_2C]
.text:00403EA3                 jmp     loc_403A52
.text:00403EA8 ; ---------------------------------------------------------------------------
.text:00403EA8
.text:00403EA8 loc_403EA8:                             ; CODE XREF: sub_403780+6E7↑j
.text:00403EA8                 mov     eax, [esp+5Ch+var_14]
.text:00403EAC                 test    eax, eax
.text:00403EAE                 jnz     short loc_403EC3
.text:00403EB0
.text:00403EB0 loc_403EB0:                             ; CODE XREF: sub_403780+779↓j
.text:00403EB0                 mov     ecx, [ebp+14h]
.text:00403EB3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403EB6                 call    strlen
.text:00403EBB                 add     [ebp+14h], eax
.text:00403EBE                 jmp     loc_403AD8
.text:00403EC3 ; ---------------------------------------------------------------------------
.text:00403EC3
.text:00403EC3 loc_403EC3:                             ; CODE XREF: sub_403780+72E↑j
.text:00403EC3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00403ECA                 call    ds:libintl_gettext
.text:00403ED0                 mov     edx, [esp+5Ch+var_2C]
.text:00403ED4                 mov     ebx, [esp+5Ch+arg_4]
.text:00403ED8                 mov     edi, [edx]
.text:00403EDA                 mov     [esp+5Ch+var_50], edi
.text:00403EDE                 mov     edi, ds:_iob
.text:00403EE4                 mov     esi, [ebx]
.text:00403EE6                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403EEA                 add     edi, 40h ; '@'
.text:00403EED                 mov     [esp+5Ch+MaxCount], esi
.text:00403EF1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00403EF4                 call    fprintf
.text:00403EF9                 jmp     short loc_403EB0
.text:00403EF9 ; ---------------------------------------------------------------------------
.text:00403EFB                 align 10h
.text:00403F00
.text:00403F00 loc_403F00:                             ; CODE XREF: sub_403780+6D8↑j
.text:00403F00                 mov     esi, [esp+5Ch+var_2C]
.text:00403F04                 cmp     dword ptr [esi+4], 1
.text:00403F08                 jnz     loc_403E6F
.text:00403F0E                 mov     ecx, [ebp+0]
.text:00403F11                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403F15                 jge     short loc_403F2C
.text:00403F17                 mov     eax, [esp+5Ch+arg_4]
.text:00403F1B                 lea     ebx, [ecx+1]
.text:00403F1E                 mov     [ebp+0], ebx
.text:00403F21                 mov     edi, [eax+ecx*4]
.text:00403F24                 mov     [ebp+0Ch], edi
.text:00403F27                 jmp     loc_403E6F
.text:00403F2C ; ---------------------------------------------------------------------------
.text:00403F2C
.text:00403F2C loc_403F2C:                             ; CODE XREF: sub_403780+795↑j
.text:00403F2C                 mov     edx, [esp+5Ch+var_14]
.text:00403F30                 test    edx, edx
.text:00403F32                 jnz     short loc_403F47
.text:00403F34
.text:00403F34 loc_403F34:                             ; CODE XREF: sub_403780+7FE↓j
.text:00403F34                 mov     edx, [ebp+14h]
.text:00403F37                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403F3A                 call    strlen
.text:00403F3F                 add     [ebp+14h], eax
.text:00403F42                 jmp     loc_403B69
.text:00403F47 ; ---------------------------------------------------------------------------
.text:00403F47
.text:00403F47 loc_403F47:                             ; CODE XREF: sub_403780+7B2↑j
.text:00403F47                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00403F4E                 call    ds:libintl_gettext
.text:00403F54                 mov     ecx, [ebp+0]
.text:00403F57                 mov     ebx, [esp+5Ch+arg_4]
.text:00403F5B                 mov     edi, [ebx+ecx*4-4]
.text:00403F5F                 mov     ecx, ds:_iob
.text:00403F65                 mov     [esp+5Ch+var_50], edi
.text:00403F69                 mov     esi, [ebx]
.text:00403F6B                 add     ecx, 40h ; '@'
.text:00403F6E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403F72                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403F75                 mov     [esp+5Ch+MaxCount], esi
.text:00403F79                 call    fprintf
.text:00403F7E                 jmp     short loc_403F34
.text:00403F80 ; ---------------------------------------------------------------------------
.text:00403F80
.text:00403F80 loc_403F80:                             ; CODE XREF: sub_403780+67F↑j
.text:00403F80                                         ; sub_403780+6CF↑j
.text:00403F80                 mov     dword ptr [ebp+14h], 0
.text:00403F87                 mov     eax, 57h ; 'W'
.text:00403F8C                 jmp     loc_4038D7
.text:00403F91 ; ---------------------------------------------------------------------------
.text:00403F91
.text:00403F91 loc_403F91:                             ; CODE XREF: sub_403780+6C3↑j
.text:00403F91                 mov     edi, [esp+5Ch+var_14]
.text:00403F95                 test    edi, edi
.text:00403F97                 jnz     short loc_403FAF
.text:00403F99
.text:00403F99 loc_403F99:                             ; CODE XREF: sub_403780+865↓j
.text:00403F99                 mov     edx, [ebp+14h]
.text:00403F9C                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403F9F                 call    strlen
.text:00403FA4                 add     [ebp+14h], eax
.text:00403FA7                 inc     dword ptr [ebp+0]
.text:00403FAA                 jmp     loc_403AD8
.text:00403FAF ; ---------------------------------------------------------------------------
.text:00403FAF
.text:00403FAF loc_403FAF:                             ; CODE XREF: sub_403780+817↑j
.text:00403FAF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00403FB6                 call    ds:libintl_gettext
.text:00403FBC                 mov     ecx, [ebp+0]
.text:00403FBF                 mov     ebx, [esp+5Ch+arg_4]
.text:00403FC3                 mov     edi, [ebx+ecx*4]
.text:00403FC6                 mov     ecx, ds:_iob
.text:00403FCC                 mov     [esp+5Ch+var_50], edi
.text:00403FD0                 mov     esi, [ebx]
.text:00403FD2                 add     ecx, 40h ; '@'
.text:00403FD5                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403FD9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403FDC                 mov     [esp+5Ch+MaxCount], esi
.text:00403FE0                 call    fprintf
.text:00403FE5                 jmp     short loc_403F99
.text:00403FE7 ; ---------------------------------------------------------------------------
.text:00403FE7
.text:00403FE7 loc_403FE7:                             ; CODE XREF: sub_403780+6A0↑j
.text:00403FE7                 mov     edx, [ebp+14h]
.text:00403FEA                 mov     ebx, edi
.text:00403FEC                 mov     ecx, [esi]
.text:00403FEE                 sub     ebx, edx
.text:00403FF0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403FF3                 call    strlen
.text:00403FF8                 cmp     ebx, eax
.text:00403FFA                 jz      short loc_404022
.text:00403FFC                 mov     ebx, [esp+5Ch+var_2C]
.text:00404000                 test    ebx, ebx
.text:00404002                 jz      short loc_404011
.text:00404004                 mov     [esp+5Ch+var_34], 1
.text:0040400C                 jmp     loc_403E26
.text:00404011 ; ---------------------------------------------------------------------------
.text:00404011
.text:00404011 loc_404011:                             ; CODE XREF: sub_403780+882↑j
.text:00404011                 mov     [esp+5Ch+var_2C], esi
.text:00404015                 mov     ecx, [esp+5Ch+var_3C]
.text:00404019                 mov     [esp+5Ch+var_38], ecx
.text:0040401D                 jmp     loc_403E26
.text:00404022 ; ---------------------------------------------------------------------------
.text:00404022
.text:00404022 loc_404022:                             ; CODE XREF: sub_403780+87A↑j
.text:00404022                 mov     [esp+5Ch+var_2C], esi
.text:00404026                 mov     eax, [esp+5Ch+var_3C]
.text:0040402A                 mov     [esp+5Ch+var_30], 1
.text:00404032                 mov     [esp+5Ch+var_38], eax
.text:00404036                 jmp     loc_403E35
.text:0040403B ; ---------------------------------------------------------------------------
.text:0040403B
.text:0040403B loc_40403B:                             ; CODE XREF: sub_403780+646↑j
.text:0040403B                 mov     edx, [ebp+0]
.text:0040403E                 cmp     edx, [esp+5Ch+arg_0]
.text:00404042                 jz      short loc_404059
.text:00404044                 mov     ebx, [esp+5Ch+arg_4]
.text:00404048                 lea     esi, [edx+1]
.text:0040404B                 mov     [ebp+0], esi
.text:0040404E                 mov     edi, [ebx+edx*4]
.text:00404051                 mov     [ebp+0Ch], edi
.text:00404054                 jmp     loc_403DD2
.text:00404059 ; ---------------------------------------------------------------------------
.text:00404059
.text:00404059 loc_404059:                             ; CODE XREF: sub_403780+8C2↑j
.text:00404059                 mov     edi, [esp+5Ch+var_14]
.text:0040405D                 test    edi, edi
.text:0040405F                 jnz     short loc_40407C
.text:00404061
.text:00404061 loc_404061:                             ; CODE XREF: sub_403780+92C↓j
.text:00404061                 mov     [ebp+8], esi
.text:00404064                 mov     ebp, [esp+5Ch+Str]
.text:00404068                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040406C                 jz      short loc_404078
.text:0040406E                 mov     bl, 3Fh ; '?'
.text:00404070
.text:00404070 loc_404070:                             ; CODE XREF: sub_403780+8FA↓j
.text:00404070                 movsx   eax, bl
.text:00404073                 jmp     loc_4038D7
.text:00404078 ; ---------------------------------------------------------------------------
.text:00404078
.text:00404078 loc_404078:                             ; CODE XREF: sub_403780+8EC↑j
.text:00404078                 mov     bl, 3Ah ; ':'
.text:0040407A                 jmp     short loc_404070
.text:0040407C ; ---------------------------------------------------------------------------
.text:0040407C
.text:0040407C loc_40407C:                             ; CODE XREF: sub_403780+8DF↑j
.text:0040407C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00404083                 call    ds:libintl_gettext
.text:00404089                 mov     [esp+5Ch+var_50], esi
.text:0040408D                 mov     edx, [esp+5Ch+arg_4]
.text:00404091                 mov     ecx, ds:_iob
.text:00404097                 mov     ebx, [edx]
.text:00404099                 add     ecx, 40h ; '@'
.text:0040409C                 mov     [esp+5Ch+Str2], eax ; Format
.text:004040A0                 mov     [esp+5Ch+MaxCount], ebx
.text:004040A4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004040A7                 call    fprintf
.text:004040AC                 jmp     short loc_404061
.text:004040AC ; ---------------------------------------------------------------------------
.text:004040AE                 align 10h
.text:004040B0
.text:004040B0 loc_4040B0:                             ; CODE XREF: sub_403780+54C↑j
.text:004040B0                                         ; sub_403780+555↑j
.text:004040B0                 mov     eax, [esp+5Ch+var_14]
.text:004040B4                 test    eax, eax
.text:004040B6                 jz      short loc_4040EF
.text:004040B8                 mov     ebx, [ebp+1Ch]
.text:004040BB                 test    ebx, ebx
.text:004040BD                 jz      short loc_4040F7
.text:004040BF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004040C6
.text:004040C6 loc_4040C6:                             ; CODE XREF: sub_403780+97E↓j
.text:004040C6                 call    ds:libintl_gettext
.text:004040CC                 mov     [esp+5Ch+var_50], esi
.text:004040D0                 mov     ebx, [esp+5Ch+arg_4]
.text:004040D4                 mov     edx, ds:_iob
.text:004040DA                 mov     esi, [ebx]
.text:004040DC                 add     edx, 40h ; '@'
.text:004040DF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004040E3                 mov     [esp+5Ch+MaxCount], esi
.text:004040E7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004040EA                 call    fprintf
.text:004040EF
.text:004040EF loc_4040EF:                             ; CODE XREF: sub_403780+936↑j
.text:004040EF                 mov     [ebp+8], edi
.text:004040F2                 jmp     loc_403AD8
.text:004040F7 ; ---------------------------------------------------------------------------
.text:004040F7
.text:004040F7 loc_4040F7:                             ; CODE XREF: sub_403780+93D↑j
.text:004040F7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:004040FE                 jmp     short loc_4040C6
.text:00404100 ; ---------------------------------------------------------------------------
.text:00404100
.text:00404100 loc_404100:                             ; CODE XREF: sub_403780+26E↑j
.text:00404100                 mov     edi, [esp+5Ch+var_14]
.text:00404104                 test    edi, edi
.text:00404106                 jnz     short loc_40411E
.text:00404108
.text:00404108 loc_404108:                             ; CODE XREF: sub_403780+9D4↓j
.text:00404108                 mov     edx, [ebp+14h]
.text:0040410B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040410E                 call    strlen
.text:00404113                 add     [ebp+14h], eax
.text:00404116                 inc     dword ptr [ebp+0]
.text:00404119                 jmp     loc_403C5E
.text:0040411E ; ---------------------------------------------------------------------------
.text:0040411E
.text:0040411E loc_40411E:                             ; CODE XREF: sub_403780+986↑j
.text:0040411E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00404125                 call    ds:libintl_gettext
.text:0040412B                 mov     ebx, [ebp+0]
.text:0040412E                 mov     edi, [esp+5Ch+arg_4]
.text:00404132                 mov     ecx, [edi+ebx*4]
.text:00404135                 mov     ebx, ds:_iob
.text:0040413B                 mov     [esp+5Ch+var_50], ecx
.text:0040413F                 mov     esi, [edi]
.text:00404141                 add     ebx, 40h ; '@'
.text:00404144                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404148                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040414B                 mov     [esp+5Ch+MaxCount], esi
.text:0040414F                 call    fprintf
.text:00404154                 jmp     short loc_404108
.text:00404156 ; ---------------------------------------------------------------------------
.text:00404156
.text:00404156 loc_404156:                             ; CODE XREF: sub_403780+246↑j
.text:00404156                 mov     ecx, [ebp+14h]
.text:00404159                 mov     ebx, edi
.text:0040415B                 mov     edx, [esi]
.text:0040415D                 sub     ebx, ecx
.text:0040415F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404162                 call    strlen
.text:00404167                 cmp     ebx, eax
.text:00404169                 jz      short loc_4041C1
.text:0040416B                 mov     ebx, [esp+5Ch+var_18]
.text:0040416F                 test    ebx, ebx
.text:00404171                 jz      short loc_4041B0
.text:00404173                 mov     edx, [esp+5Ch+arg_14]
.text:00404177                 test    edx, edx
.text:00404179                 jnz     short loc_404187
.text:0040417B                 mov     ecx, [esp+5Ch+var_18]
.text:0040417F                 mov     ebx, [esi+4]
.text:00404182                 cmp     [ecx+4], ebx
.text:00404185                 jz      short loc_404194
.text:00404187
.text:00404187 loc_404187:                             ; CODE XREF: sub_403780+9F9↑j
.text:00404187                                         ; sub_403780+A1A↓j ...
.text:00404187                 mov     [esp+5Ch+var_20], 1
.text:0040418F                 jmp     loc_4039CC
.text:00404194 ; ---------------------------------------------------------------------------
.text:00404194
.text:00404194 loc_404194:                             ; CODE XREF: sub_403780+A05↑j
.text:00404194                 mov     edx, [esi+8]
.text:00404197                 cmp     [ecx+8], edx
.text:0040419A                 jnz     short loc_404187
.text:0040419C                 mov     ebx, [esi+0Ch]
.text:0040419F                 cmp     [ecx+0Ch], ebx
.text:004041A2                 jnz     short loc_404187
.text:004041A4                 jmp     loc_4039CC
.text:004041A4 ; ---------------------------------------------------------------------------
.text:004041A9                 align 10h
.text:004041B0
.text:004041B0 loc_4041B0:                             ; CODE XREF: sub_403780+9F1↑j
.text:004041B0                 mov     [esp+5Ch+var_18], esi
.text:004041B4                 mov     eax, [esp+5Ch+var_28]
.text:004041B8                 mov     [esp+5Ch+var_24], eax
.text:004041BC                 jmp     loc_4039CC
.text:004041C1 ; ---------------------------------------------------------------------------
.text:004041C1
.text:004041C1 loc_4041C1:                             ; CODE XREF: sub_403780+9E9↑j
.text:004041C1                 mov     [esp+5Ch+var_18], esi
.text:004041C5                 mov     ecx, [esp+5Ch+var_28]
.text:004041C9                 mov     [esp+5Ch+var_1C], 1
.text:004041D1                 mov     [esp+5Ch+var_24], ecx
.text:004041D5                 jmp     loc_4039E0
.text:004041DA ; ---------------------------------------------------------------------------
.text:004041DA
.text:004041DA loc_4041DA:                             ; CODE XREF: sub_403780+1BF↑j
.text:004041DA                 mov     eax, [esp+5Ch+Str]
.text:004041DE                 movsx   esi, dl
.text:004041E1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004041E5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004041E8                 call    strchr
.text:004041ED                 test    eax, eax
.text:004041EF                 jnz     loc_403CA0
.text:004041F5                 jmp     loc_403945
.text:004041FA ; ---------------------------------------------------------------------------
.text:004041FA
.text:004041FA loc_4041FA:                             ; CODE XREF: sub_403780+17C↑j
.text:004041FA                 mov     ecx, 1
.text:004041FF                 jmp     loc_403902
.text:00404204 ; ---------------------------------------------------------------------------
.text:00404204
.text:00404204 loc_404204:                             ; CODE XREF: sub_403780+D4↑j
.text:00404204                                         ; sub_403780+130↑j
.text:00404204                 mov     eax, [ebp+20h]
.text:00404207                 cmp     eax, [ebp+24h]
.text:0040420A                 jz      loc_4038E0
.text:00404210                 mov     [ebp+0], eax
.text:00404213                 jmp     loc_4038E0
.text:00404218 ; ---------------------------------------------------------------------------
.text:00404218
.text:00404218 loc_404218:                             ; CODE XREF: sub_403780+FE↑j
.text:00404218                 mov     [ebp+20h], eax
.text:0040421B                 jmp     loc_4038A0
.text:00404220 ; ---------------------------------------------------------------------------
.text:00404220
.text:00404220 loc_404220:                             ; CODE XREF: sub_403780+CA↑j
.text:00404220                 mov     edx, [ebp+20h]
.text:00404223                 mov     eax, [ebp+24h]
.text:00404226                 cmp     edx, eax
.text:00404228                 jz      short loc_4042A0
.text:0040422A                 cmp     eax, ebx
.text:0040422C                 jz      short loc_404241
.text:0040422E                 mov     [esp+5Ch+Str2], ebp
.text:00404232                 mov     ebx, [esp+5Ch+arg_4]
.text:00404236                 mov     [esp+5Ch+Str1], ebx
.text:00404239                 call    sub_404430
.text:0040423E                 mov     ebx, [ebp+0]
.text:00404241
.text:00404241 loc_404241:                             ; CODE XREF: sub_403780+AAC↑j
.text:00404241                                         ; sub_403780+B22↓j ...
.text:00404241                 cmp     ebx, [esp+5Ch+arg_0]
.text:00404245                 jge     short loc_404290
.text:00404247                 mov     esi, [esp+5Ch+arg_4]
.text:0040424B                 mov     eax, [esi+ebx*4]
.text:0040424E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00404251                 jz      short loc_404298
.text:00404253                 lea     esi, [esi+0]
.text:00404259                 lea     edi, [edi+0]
.text:00404260
.text:00404260 loc_404260:                             ; CODE XREF: sub_403780+AFC↓j
.text:00404260                                         ; sub_403780+B1C↓j
.text:00404260                 lea     eax, [ebx+1]
.text:00404263                 mov     ebx, eax
.text:00404265                 mov     [ebp+0], eax
.text:00404268                 cmp     eax, [esp+5Ch+arg_0]
.text:0040426C                 jge     short loc_404290
.text:0040426E                 mov     edi, [esp+5Ch+arg_4]
.text:00404272                 mov     edx, [edi+eax*4]
.text:00404275                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00404278                 jz      short loc_404280
.text:0040427A
.text:0040427A loc_40427A:                             ; CODE XREF: sub_403780+B04↓j
.text:0040427A                 mov     ebx, eax
.text:0040427C                 jmp     short loc_404260
.text:0040427C ; ---------------------------------------------------------------------------
.text:0040427E                 align 10h
.text:00404280
.text:00404280 loc_404280:                             ; CODE XREF: sub_403780+AF8↑j
.text:00404280                 cmp     byte ptr [edx+1], 0
.text:00404284                 jz      short loc_40427A
.text:00404286                 lea     esi, [esi+0]
.text:00404289                 lea     edi, [edi+0]
.text:00404290
.text:00404290 loc_404290:                             ; CODE XREF: sub_403780+AC5↑j
.text:00404290                                         ; sub_403780+AEC↑j ...
.text:00404290                 mov     [ebp+24h], ebx
.text:00404293                 jmp     loc_403850
.text:00404298 ; ---------------------------------------------------------------------------
.text:00404298
.text:00404298 loc_404298:                             ; CODE XREF: sub_403780+AD1↑j
.text:00404298                 cmp     byte ptr [eax+1], 0
.text:0040429C                 jz      short loc_404260
.text:0040429E                 jmp     short loc_404290
.text:004042A0 ; ---------------------------------------------------------------------------
.text:004042A0
.text:004042A0 loc_4042A0:                             ; CODE XREF: sub_403780+AA8↑j
.text:004042A0                 cmp     edx, ebx
.text:004042A2                 jz      short loc_404241
.text:004042A4                 mov     [ebp+20h], ebx
.text:004042A7                 jmp     short loc_404241
.text:004042A9 ; ---------------------------------------------------------------------------
.text:004042A9
.text:004042A9 loc_4042A9:                             ; CODE XREF: sub_403780+88↑j
.text:004042A9                 mov     dword ptr [ebp+18h], 0
.text:004042B0                 mov     esi, [esp+5Ch+Str]
.text:004042B4
.text:004042B4 loc_4042B4:                             ; CODE XREF: sub_403780+B49↓j
.text:004042B4                 inc     esi
.text:004042B5                 jmp     loc_403818
.text:004042B5 ; ---------------------------------------------------------------------------
.text:004042BA                 align 10h
.text:004042C0
.text:004042C0 loc_4042C0:                             ; CODE XREF: sub_403780+80↑j
.text:004042C0                 mov     dword ptr [ebp+18h], 2
.text:004042C7                 mov     esi, ecx
.text:004042C9                 jmp     short loc_4042B4
.text:004042C9 ; ---------------------------------------------------------------------------
.text:004042CB                 align 10h
.text:004042D0
.text:004042D0 loc_4042D0:                             ; CODE XREF: sub_403780+69↑j
.text:004042D0                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:004042D7                 call    getenv
.text:004042DC                 test    eax, eax
.text:004042DE                 jz      loc_4037F4
.text:004042E4                 jmp     loc_4037EF
.text:004042E4 ; ---------------------------------------------------------------------------
.text:004042E9                 align 10h
.text:004042F0
.text:004042F0 loc_4042F0:                             ; CODE XREF: sub_403780+3F↑j
.text:004042F0                 mov     dword ptr [ebp+0], 1
.text:004042F7                 mov     ebx, 1
.text:004042FC                 jmp     loc_4037D0
.text:004042FC sub_403780      endp
.text:004042FC
.text:00404301 ; ---------------------------------------------------------------------------
.text:00404301                 jmp     short sub_404310
.text:00404301 ; ---------------------------------------------------------------------------
.text:00404303                 align 10h
.text:00404310
.text:00404310 ; =============== S U B R O U T I N E =======================================
.text:00404310
.text:00404310
.text:00404310 ; int __cdecl sub_404310(int, int, char *, int, int, int, int)
.text:00404310 sub_404310      proc near               ; CODE XREF: .text:00404301↑j
.text:00404310                                         ; sub_405320+3A↓p ...
.text:00404310
.text:00404310 var_2C          = dword ptr -2Ch
.text:00404310 var_28          = dword ptr -28h
.text:00404310 Str             = dword ptr -24h
.text:00404310 var_20          = dword ptr -20h
.text:00404310 var_1C          = dword ptr -1Ch
.text:00404310 var_18          = dword ptr -18h
.text:00404310 var_14          = dword ptr -14h
.text:00404310 var_10          = dword ptr -10h
.text:00404310 arg_0           = dword ptr  4
.text:00404310 arg_4           = dword ptr  8
.text:00404310 arg_8           = dword ptr  0Ch
.text:00404310 arg_C           = dword ptr  10h
.text:00404310 arg_10          = dword ptr  14h
.text:00404310 arg_14          = dword ptr  18h
.text:00404310 arg_18          = dword ptr  1Ch
.text:00404310
.text:00404310                 sub     esp, 2Ch
.text:00404313                 mov     edx, dword_418020
.text:00404319                 mov     [esp+2Ch+var_10], offset dword_419070 ; int
.text:00404321                 mov     ecx, dword_418024
.text:00404327                 mov     ds:dword_419070, edx
.text:0040432D                 mov     edx, [esp+2Ch+arg_18]
.text:00404331                 mov     ds:dword_419074, ecx
.text:00404337                 mov     ecx, [esp+2Ch+arg_14]
.text:0040433B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040433F                 mov     edx, [esp+2Ch+arg_10]
.text:00404343                 mov     [esp+2Ch+var_18], ecx ; int
.text:00404347                 mov     ecx, [esp+2Ch+arg_C]
.text:0040434B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040434F                 mov     edx, [esp+2Ch+arg_8]
.text:00404353                 mov     [esp+2Ch+var_20], ecx ; int
.text:00404357                 mov     ecx, [esp+2Ch+arg_4]
.text:0040435B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040435F                 mov     edx, [esp+2Ch+arg_0]
.text:00404363                 mov     [esp+2Ch+var_28], ecx ; int
.text:00404367                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040436A                 call    sub_403780
.text:0040436F                 mov     ecx, ds:dword_419070
.text:00404375                 mov     dword_418020, ecx
.text:0040437B                 mov     ecx, ds:dword_41907C
.text:00404381                 mov     ds:dword_4196C0, ecx
.text:00404387                 mov     ecx, ds:dword_419078
.text:0040438D                 mov     dword_418028, ecx
.text:00404393                 add     esp, 2Ch
.text:00404396                 retn
.text:00404396 sub_404310      endp
.text:00404396
.text:00404396 ; ---------------------------------------------------------------------------
.text:00404397                 align 10h
.text:004043A0                 sub     esp, 2Ch
.text:004043A3                 mov     edx, dword_418020
.text:004043A9                 mov     dword ptr [esp+1Ch], offset dword_419070
.text:004043B1                 mov     ecx, dword_418024
.text:004043B7                 mov     dword ptr [esp+18h], 1
.text:004043BF                 mov     ds:dword_419070, edx
.text:004043C5                 mov     edx, [esp+38h]
.text:004043C9                 mov     ds:dword_419074, ecx
.text:004043CF                 mov     ecx, [esp+34h]
.text:004043D3                 mov     [esp+8], edx
.text:004043D7                 mov     edx, [esp+30h]
.text:004043DB                 mov     [esp+4], ecx
.text:004043DF                 mov     dword ptr [esp+14h], 0
.text:004043E7                 mov     dword ptr [esp+10h], 0
.text:004043EF                 mov     dword ptr [esp+0Ch], 0
.text:004043F7                 mov     [esp], edx
.text:004043FA                 call    sub_403780
.text:004043FF                 mov     ecx, ds:dword_419070
.text:00404405                 mov     dword_418020, ecx
.text:0040440B                 mov     ecx, ds:dword_41907C
.text:00404411                 mov     ds:dword_4196C0, ecx
.text:00404417                 mov     ecx, ds:dword_419078
.text:0040441D                 mov     dword_418028, ecx
.text:00404423                 add     esp, 2Ch
.text:00404426                 retn
.text:00404426 ; ---------------------------------------------------------------------------
.text:00404427                 align 10h
.text:00404430
.text:00404430 ; =============== S U B R O U T I N E =======================================
.text:00404430
.text:00404430
.text:00404430 sub_404430      proc near               ; CODE XREF: sub_403780+113↑p
.text:00404430                                         ; sub_403780+AB9↑p
.text:00404430
.text:00404430 var_2C          = dword ptr -2Ch
.text:00404430 var_28          = dword ptr -28h
.text:00404430 var_24          = dword ptr -24h
.text:00404430 var_20          = dword ptr -20h
.text:00404430 var_1C          = dword ptr -1Ch
.text:00404430 var_18          = dword ptr -18h
.text:00404430 var_14          = dword ptr -14h
.text:00404430 arg_0           = dword ptr  4
.text:00404430 arg_4           = dword ptr  8
.text:00404430
.text:00404430                 push    ebp
.text:00404431                 push    edi
.text:00404432                 push    esi
.text:00404433                 push    ebx
.text:00404434                 sub     esp, 1Ch
.text:00404437                 mov     ecx, [esp+2Ch+arg_4]
.text:0040443B                 mov     eax, [esp+2Ch+arg_4]
.text:0040443F                 mov     ebx, [esp+2Ch+arg_4]
.text:00404443                 mov     edx, [ecx+20h]
.text:00404446                 mov     edi, [esp+2Ch+arg_0]
.text:0040444A                 mov     ecx, [ebx]
.text:0040444C                 mov     [esp+2Ch+var_2C], edx
.text:0040444F                 mov     [esp+2Ch+var_14], edx
.text:00404453                 mov     edx, [eax+24h]
.text:00404456                 mov     [esp+2Ch+var_28], ecx
.text:0040445A                 mov     [esp+2Ch+var_1C], ecx
.text:0040445E                 cmp     ecx, edx
.text:00404460                 mov     [esp+2Ch+var_18], edx
.text:00404464                 jle     short loc_4044E0
.text:00404466                 mov     esi, [esp+2Ch+var_2C]
.text:00404469                 cmp     edx, esi
.text:0040446B                 jle     short loc_4044E0
.text:0040446D                 lea     esi, [esi+0]
.text:00404470
.text:00404470 loc_404470:                             ; CODE XREF: sub_404430+A1↓j
.text:00404470                 mov     ebx, [esp+2Ch+var_1C]
.text:00404474                 mov     edx, [esp+2Ch+var_18]
.text:00404478                 mov     ebp, [esp+2Ch+var_18]
.text:0040447C                 mov     eax, [esp+2Ch+var_14]
.text:00404480                 sub     ebx, edx
.text:00404482                 mov     [esp+2Ch+var_20], ebx
.text:00404486                 sub     ebp, eax
.text:00404488                 cmp     ebx, ebp
.text:0040448A                 jle     short loc_404505
.text:0040448C                 xor     esi, esi
.text:0040448E                 cmp     esi, ebp
.text:00404490                 jge     short loc_4044BD
.text:00404492                 mov     ecx, [esp+2Ch+var_1C]
.text:00404496                 sub     ecx, ebp
.text:00404498                 mov     [esp+2Ch+var_24], ecx
.text:0040449C                 lea     esi, [esi+0]
.text:004044A0
.text:004044A0 loc_4044A0:                             ; CODE XREF: sub_404430+8B↓j
.text:004044A0                 mov     ecx, [esp+2Ch+var_14]
.text:004044A4                 mov     edx, [esp+2Ch+var_24]
.text:004044A8                 add     ecx, esi
.text:004044AA                 add     edx, esi
.text:004044AC                 mov     ebx, [edi+ecx*4]
.text:004044AF                 mov     eax, [edi+edx*4]
.text:004044B2                 inc     esi
.text:004044B3                 cmp     esi, ebp
.text:004044B5                 mov     [edi+ecx*4], eax
.text:004044B8                 mov     [edi+edx*4], ebx
.text:004044BB                 jl      short loc_4044A0
.text:004044BD
.text:004044BD loc_4044BD:                             ; CODE XREF: sub_404430+60↑j
.text:004044BD                 sub     [esp+2Ch+var_1C], ebp
.text:004044C1
.text:004044C1 loc_4044C1:                             ; CODE XREF: sub_404430+107↓j
.text:004044C1                 mov     eax, [esp+2Ch+var_18]
.text:004044C5                 cmp     [esp+2Ch+var_1C], eax
.text:004044C9                 jle     short loc_4044E0
.text:004044CB                 mov     ebp, [esp+2Ch+var_14]
.text:004044CF                 cmp     eax, ebp
.text:004044D1                 jg      short loc_404470
.text:004044D3                 lea     esi, [esi+0]
.text:004044D9                 lea     edi, [edi+0]
.text:004044E0
.text:004044E0 loc_4044E0:                             ; CODE XREF: sub_404430+34↑j
.text:004044E0                                         ; sub_404430+3B↑j ...
.text:004044E0                 mov     esi, [esp+2Ch+var_28]
.text:004044E4                 mov     ecx, [esp+2Ch+var_18]
.text:004044E8                 mov     eax, [esp+2Ch+var_2C]
.text:004044EB                 mov     edi, [esp+2Ch+arg_4]
.text:004044EF                 mov     edx, [esp+2Ch+var_28]
.text:004044F3                 sub     esi, ecx
.text:004044F5                 add     esi, eax
.text:004044F7                 mov     [edi+20h], esi
.text:004044FA                 mov     [edi+24h], edx
.text:004044FD                 add     esp, 1Ch
.text:00404500                 pop     ebx
.text:00404501                 pop     esi
.text:00404502                 pop     edi
.text:00404503                 pop     ebp
.text:00404504                 retn
.text:00404505 ; ---------------------------------------------------------------------------
.text:00404505
.text:00404505 loc_404505:                             ; CODE XREF: sub_404430+5A↑j
.text:00404505                 xor     esi, esi
.text:00404507                 cmp     esi, [esp+2Ch+var_20]
.text:0040450B                 jge     short loc_40452F
.text:0040450D                 lea     esi, [esi+0]
.text:00404510
.text:00404510 loc_404510:                             ; CODE XREF: sub_404430+FD↓j
.text:00404510                 mov     ebx, [esp+2Ch+var_14]
.text:00404514                 mov     ebp, [esp+2Ch+var_18]
.text:00404518                 add     ebx, esi
.text:0040451A                 add     ebp, esi
.text:0040451C                 mov     edx, [edi+ebx*4]
.text:0040451F                 inc     esi
.text:00404520                 cmp     esi, [esp+2Ch+var_20]
.text:00404524                 mov     ecx, [edi+ebp*4]
.text:00404527                 mov     [edi+ebx*4], ecx
.text:0040452A                 mov     [edi+ebp*4], edx
.text:0040452D                 jl      short loc_404510
.text:0040452F
.text:0040452F loc_40452F:                             ; CODE XREF: sub_404430+DB↑j
.text:0040452F                 mov     esi, [esp+2Ch+var_20]
.text:00404533                 add     [esp+2Ch+var_14], esi
.text:00404537                 jmp     short loc_4044C1
.text:00404537 sub_404430      endp
.text:00404537
.text:00404537 ; ---------------------------------------------------------------------------
.text:00404539                 db 17h dup(90h)
.text:00404550
.text:00404550 ; =============== S U B R O U T I N E =======================================
.text:00404550
.text:00404550
.text:00404550 sub_404550      proc near               ; DATA XREF: .data:Src↓o
.text:00404550                 jle     short $+2
.text:00404552
.text:00404552 loc_404552:                             ; CODE XREF: sub_404550↑j
.text:00404552                 lea     esi, [esi+0]
.text:00404559                 lea     edi, [edi+0]
.text:00404559 sub_404550      endp
.text:00404559
.text:00404560
.text:00404560 ; =============== S U B R O U T I N E =======================================
.text:00404560
.text:00404560
.text:00404560 ; int __cdecl sub_404560(char *, int)
.text:00404560 sub_404560      proc near               ; CODE XREF: sub_402C30+40A↑p
.text:00404560
.text:00404560 Str             = dword ptr -2Ch
.text:00404560 Src             = dword ptr -28h
.text:00404560 Size            = dword ptr -24h
.text:00404560 var_14          = dword ptr -14h
.text:00404560 arg_0           = dword ptr  4
.text:00404560 arg_4           = dword ptr  8
.text:00404560
.text:00404560                 push    ebp
.text:00404561                 push    edi
.text:00404562                 push    esi
.text:00404563                 push    ebx
.text:00404564                 sub     esp, 1Ch
.text:00404567                 mov     ebp, [esp+2Ch+arg_0]
.text:0040456B                 mov     [esp+2Ch+Str], ebp ; Str
.text:0040456E                 call    strlen
.text:00404573                 mov     edx, Src
.text:00404579                 mov     ebx, eax
.text:0040457B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040457E                 call    strlen
.text:00404583                 lea     esi, [eax+1]
.text:00404586                 cmp     esi, 8
.text:00404589                 mov     eax, esi
.text:0040458B                 ja      short loc_404592
.text:0040458D                 mov     eax, 9
.text:00404592
.text:00404592 loc_404592:                             ; CODE XREF: sub_404560+2B↑j
.text:00404592                 lea     edi, [eax+ebx+1]
.text:00404596                 mov     [esp+2Ch+Str], edi ; size_t
.text:00404599                 call    sub_404B90
.text:0040459E                 mov     [esp+2Ch+var_14], eax
.text:004045A2                 lea     ecx, [ebx+1]
.text:004045A5                 mov     [esp+2Ch+Size], ecx ; Size
.text:004045A9                 mov     [esp+2Ch+Src], ebp ; Src
.text:004045AD                 mov     [esp+2Ch+Str], eax ; void *
.text:004045B0                 call    memcpy
.text:004045B5                 cmp     [esp+2Ch+arg_4], 1
.text:004045BA                 jz      short loc_4045E0
.text:004045BC                 mov     [esp+2Ch+Size], ebx
.text:004045C0                 lea     edx, [esp+2Ch+var_14]
.text:004045C4                 mov     [esp+2Ch+Src], edi
.text:004045C8                 mov     [esp+2Ch+Str], edx
.text:004045CB                 call    sub_4048B0
.text:004045D0                 cmp     eax, 1
.text:004045D3                 jz      short loc_4045FC
.text:004045D5                 cmp     eax, 1
.text:004045D8                 jb      short loc_404614
.text:004045DA                 cmp     eax, 2
.text:004045DD                 jz      short loc_404620
.text:004045DF                 nop
.text:004045E0
.text:004045E0 loc_4045E0:                             ; CODE XREF: sub_404560+5A↑j
.text:004045E0                                         ; sub_404560+C7↓j
.text:004045E0                 mov     [esp+2Ch+Size], esi ; Size
.text:004045E4                 mov     edi, [esp+2Ch+var_14]
.text:004045E8                 mov     esi, Src
.text:004045EE                 add     edi, ebx
.text:004045F0                 mov     [esp+2Ch+Src], esi ; Src
.text:004045F4                 mov     [esp+2Ch+Str], edi ; void *
.text:004045F7                 call    memcpy
.text:004045FC
.text:004045FC loc_4045FC:                             ; CODE XREF: sub_404560+73↑j
.text:004045FC                                         ; sub_404560+C5↓j
.text:004045FC                 mov     [esp+2Ch+Src], ebx
.text:00404600                 mov     ebx, [esp+2Ch+var_14]
.text:00404604                 mov     [esp+2Ch+Size], 7Eh ; '~'
.text:0040460C                 mov     [esp+2Ch+Str], ebx
.text:0040460F                 call    sub_4047F0
.text:00404614
.text:00404614 loc_404614:                             ; CODE XREF: sub_404560+78↑j
.text:00404614                 mov     eax, [esp+2Ch+var_14]
.text:00404618                 add     esp, 1Ch
.text:0040461B                 pop     ebx
.text:0040461C                 pop     esi
.text:0040461D                 pop     edi
.text:0040461E                 pop     ebp
.text:0040461F                 retn
.text:00404620 ; ---------------------------------------------------------------------------
.text:00404620
.text:00404620 loc_404620:                             ; CODE XREF: sub_404560+7D↑j
.text:00404620                 cmp     [esp+2Ch+arg_4], 2
.text:00404625                 jnz     short loc_4045FC
.text:00404627                 jmp     short loc_4045E0
.text:00404627 sub_404560      endp
.text:00404627
.text:00404627 ; ---------------------------------------------------------------------------
.text:00404629 aNone           db 'none',0             ; DATA XREF: .text:off_404670↓o
.text:0040462E aOff            db 'off',0              ; DATA XREF: .text:00404674↓o
.text:00404632 aSimple         db 'simple',0           ; DATA XREF: .text:00404678↓o
.text:00404639 aNever          db 'never',0            ; DATA XREF: .text:0040467C↓o
.text:0040463F aExisting       db 'existing',0         ; DATA XREF: .text:00404680↓o
.text:00404648 aNil            db 'nil',0              ; DATA XREF: .text:00404684↓o
.text:0040464C aNumbered       db 'numbered',0         ; DATA XREF: .text:00404688↓o
.text:00404655 aT              db 't',0                ; DATA XREF: .text:0040468C↓o
.text:00404657                 db 19h dup(90h)
.text:00404670 off_404670      dd offset aNone         ; DATA XREF: .text:00404712↓o
.text:00404670                                         ; sub_404750+46↓o ...
.text:00404670                                         ; "none"
.text:00404674                 dd offset aOff          ; "off"
.text:00404678                 dd offset aSimple       ; "simple"
.text:0040467C                 dd offset aNever        ; "never"
.text:00404680                 dd offset aExisting     ; "existing"
.text:00404684                 dd offset aNil          ; "nil"
.text:00404688                 dd offset aNumbered     ; "numbered"
.text:0040468C                 dd offset aT            ; "t"
.text:00404690                 dd 0
.text:00404694                 db 1Ch dup(90h)
.text:004046B0 dword_4046B0    dd 0                    ; DATA XREF: .text:0040470A↓o
.text:004046B0                                         ; .text:00404722↓r ...
.text:004046B4                 align 8
.text:004046B8                 dd 2 dup(1), 2 dup(2), 2 dup(3), 8B1CEC83h, 85242454h
.text:004046B8                 dd 800574D2h, 1075003Ah, 2B8h
.text:004046E4                 db 0
.text:004046E5 ; ---------------------------------------------------------------------------
.text:004046E5
.text:004046E5 loc_4046E5:                             ; CODE XREF: .text:00404729↓j
.text:004046E5                 add     esp, 1Ch
.text:004046E8                 retn
.text:004046E8 ; ---------------------------------------------------------------------------
.text:004046E9                 align 10h
.text:004046F0                 mov     [esp+4], edx
.text:004046F4                 mov     ecx, off_418050
.text:004046FA                 mov     edx, [esp+20h]
.text:004046FE                 mov     dword ptr [esp+10h], 4
.text:00404706                 mov     [esp+14h], ecx
.text:0040470A                 mov     dword ptr [esp+0Ch], offset dword_4046B0
.text:00404712                 mov     dword ptr [esp+8], offset off_404670 ; "none"
.text:0040471A                 mov     [esp], edx
.text:0040471D                 call    sub_405BF0
.text:00404722                 mov     eax, ds:dword_4046B0[eax*4]
.text:00404729                 jmp     short loc_4046E5
.text:00404729 ; ---------------------------------------------------------------------------
.text:0040472B ; const char aVersionControl[]
.text:0040472B aVersionControl db 'VERSION_CONTROL',0  ; DATA XREF: sub_404750:loc_404760↓o
.text:0040473B ; const char aVersionControl_0[]
.text:0040473B aVersionControl_0 db '$VERSION_CONTROL',0
.text:0040473B                                         ; DATA XREF: sub_404750+56↓o
.text:0040474C                 align 10h
.text:00404750
.text:00404750 ; =============== S U B R O U T I N E =======================================
.text:00404750
.text:00404750
.text:00404750 sub_404750      proc near               ; CODE XREF: sub_401FB0+6B1↑p
.text:00404750
.text:00404750 VarName         = dword ptr -1Ch
.text:00404750 var_18          = dword ptr -18h
.text:00404750 var_14          = dword ptr -14h
.text:00404750 var_10          = dword ptr -10h
.text:00404750 var_C           = dword ptr -0Ch
.text:00404750 var_8           = dword ptr -8
.text:00404750 arg_0           = dword ptr  4
.text:00404750 arg_4           = dword ptr  8
.text:00404750
.text:00404750                 sub     esp, 1Ch
.text:00404753                 mov     edx, [esp+1Ch+arg_4]
.text:00404757                 test    edx, edx
.text:00404759                 jz      short loc_404760
.text:0040475B                 cmp     byte ptr [edx], 0
.text:0040475E                 jnz     short loc_4047C0
.text:00404760
.text:00404760 loc_404760:                             ; CODE XREF: sub_404750+9↑j
.text:00404760                 mov     [esp+1Ch+VarName], offset aVersionControl ; "VERSION_CONTROL"
.text:00404767                 call    getenv
.text:0040476C                 test    eax, eax
.text:0040476E                 jz      short loc_404775
.text:00404770                 cmp     byte ptr [eax], 0
.text:00404773                 jnz     short loc_404780
.text:00404775
.text:00404775 loc_404775:                             ; CODE XREF: sub_404750+1E↑j
.text:00404775                 mov     eax, 2
.text:0040477A
.text:0040477A loc_40477A:                             ; CODE XREF: sub_404750+69↓j
.text:0040477A                 add     esp, 1Ch
.text:0040477D                 retn
.text:0040477D ; ---------------------------------------------------------------------------
.text:0040477E                 align 10h
.text:00404780
.text:00404780 loc_404780:                             ; CODE XREF: sub_404750+23↑j
.text:00404780                 mov     [esp+1Ch+var_C], 4 ; int
.text:00404788                 mov     ecx, off_418050
.text:0040478E                 mov     [esp+1Ch+var_10], offset dword_4046B0 ; int
.text:00404796                 mov     [esp+1Ch+var_14], offset off_404670 ; int
.text:0040479E                 mov     [esp+1Ch+var_8], ecx ; int
.text:004047A2                 mov     [esp+1Ch+var_18], eax ; char *
.text:004047A6                 mov     [esp+1Ch+VarName], offset aVersionControl_0 ; "$VERSION_CONTROL"
.text:004047AD
.text:004047AD loc_4047AD:                             ; CODE XREF: sub_404750+9D↓j
.text:004047AD                 call    sub_405BF0
.text:004047B2                 mov     eax, ds:dword_4046B0[eax*4]
.text:004047B9                 jmp     short loc_40477A
.text:004047B9 ; ---------------------------------------------------------------------------
.text:004047BB                 align 10h
.text:004047C0
.text:004047C0 loc_4047C0:                             ; CODE XREF: sub_404750+E↑j
.text:004047C0                 mov     [esp+1Ch+var_18], edx
.text:004047C4                 mov     ecx, off_418050
.text:004047CA                 mov     edx, [esp+1Ch+arg_0]
.text:004047CE                 mov     [esp+1Ch+var_C], 4
.text:004047D6                 mov     [esp+1Ch+var_8], ecx
.text:004047DA                 mov     [esp+1Ch+var_10], offset dword_4046B0
.text:004047E2                 mov     [esp+1Ch+var_14], offset off_404670 ; "none"
.text:004047EA                 mov     [esp+1Ch+VarName], edx
.text:004047ED                 jmp     short loc_4047AD
.text:004047ED sub_404750      endp
.text:004047ED
.text:004047ED ; ---------------------------------------------------------------------------
.text:004047EF                 align 10h
.text:004047F0
.text:004047F0 ; =============== S U B R O U T I N E =======================================
.text:004047F0
.text:004047F0
.text:004047F0 sub_4047F0      proc near               ; CODE XREF: sub_404560+AF↑p
.text:004047F0
.text:004047F0 var_1C          = dword ptr -1Ch
.text:004047F0 var_18          = dword ptr -18h
.text:004047F0 var_14          = dword ptr -14h
.text:004047F0 var_10          = dword ptr -10h
.text:004047F0 var_C           = dword ptr -0Ch
.text:004047F0 var_8           = dword ptr -8
.text:004047F0 var_4           = dword ptr -4
.text:004047F0 arg_0           = dword ptr  4
.text:004047F0 arg_4           = dword ptr  8
.text:004047F0 arg_8           = byte ptr  0Ch
.text:004047F0
.text:004047F0                 sub     esp, 1Ch
.text:004047F3                 movzx   edx, [esp+1Ch+arg_8]
.text:004047F8                 mov     [esp+1Ch+var_10], ebx
.text:004047FC                 mov     [esp+1Ch+var_C], esi
.text:00404800                 mov     [esp+1Ch+var_8], edi
.text:00404804                 mov     edi, 0FFh
.text:00404809                 mov     byte ptr [esp+1Ch+var_14+3], dl
.text:0040480D                 mov     edx, [esp+1Ch+arg_0]
.text:00404811                 mov     [esp+1Ch+var_4], ebp
.text:00404815                 mov     [esp+1Ch+var_1C], edx
.text:00404818                 call    sub_4056E0
.text:0040481D                 mov     [esp+1Ch+var_1C], eax ; char *
.text:00404820                 mov     esi, eax
.text:00404822                 call    sub_405740
.text:00404827                 cmp     eax, 0Eh
.text:0040482A                 mov     ebx, eax
.text:0040482C                 ja      short loc_404866
.text:0040482E
.text:0040482E loc_40482E:                             ; CODE XREF: sub_4047F0+B1↓j
.text:0040482E                 cmp     edi, ebx
.text:00404830                 jnb     short loc_404852
.text:00404832                 mov     ebx, [esp+1Ch+arg_0]
.text:00404836                 mov     ebp, [esp+1Ch+arg_4]
.text:0040483A                 add     ebx, ebp
.text:0040483C                 sub     ebx, esi
.text:0040483E                 cmp     edi, ebx
.text:00404840                 ja      short loc_404845
.text:00404842                 lea     ebx, [edi-1]
.text:00404845
.text:00404845 loc_404845:                             ; CODE XREF: sub_4047F0+50↑j
.text:00404845                 movzx   ecx, byte ptr [esp+1Ch+var_14+3]
.text:0040484A                 mov     byte ptr [ebx+esi+1], 0
.text:0040484F                 mov     [ebx+esi], cl
.text:00404852
.text:00404852 loc_404852:                             ; CODE XREF: sub_4047F0+40↑j
.text:00404852                 mov     ebx, [esp+1Ch+var_10]
.text:00404856                 mov     esi, [esp+1Ch+var_C]
.text:0040485A                 mov     edi, [esp+1Ch+var_8]
.text:0040485E                 mov     ebp, [esp+1Ch+var_4]
.text:00404862                 add     esp, 1Ch
.text:00404865                 retn
.text:00404866 ; ---------------------------------------------------------------------------
.text:00404866
.text:00404866 loc_404866:                             ; CODE XREF: sub_4047F0+3C↑j
.text:00404866                 movzx   ebp, word ptr [esi]
.text:00404869                 mov     word ptr [esp+1Ch+var_14], bp
.text:0040486E                 mov     word ptr [esi], 2Eh ; '.'
.text:00404873                 call    _errno
.text:00404878                 mov     dword ptr [eax], 0
.text:0040487E                 mov     ecx, [esp+1Ch+arg_0]
.text:00404882                 mov     [esp+1Ch+var_18], 3
.text:0040488A                 mov     [esp+1Ch+var_1C], ecx
.text:0040488D                 call    sub_40F5F0
.text:00404892                 test    eax, eax
.text:00404894                 mov     ebp, eax
.text:00404896                 js      short loc_4048A3
.text:00404898
.text:00404898 loc_404898:                             ; CODE XREF: sub_4047F0+BE↓j
.text:00404898                 mov     edi, ebp
.text:0040489A
.text:0040489A loc_40489A:                             ; CODE XREF: sub_4047F0+BC↓j
.text:0040489A                 mov     edx, [esp+1Ch+var_14]
.text:0040489E                 mov     [esi], dx
.text:004048A1                 jmp     short loc_40482E
.text:004048A3 ; ---------------------------------------------------------------------------
.text:004048A3
.text:004048A3 loc_4048A3:                             ; CODE XREF: sub_4047F0+A6↑j
.text:004048A3                 call    _errno
.text:004048A8                 mov     ecx, [eax]
.text:004048AA                 test    ecx, ecx
.text:004048AC                 jnz     short loc_40489A
.text:004048AE                 jmp     short loc_404898
.text:004048AE sub_4047F0      endp
.text:004048AE
.text:004048B0
.text:004048B0 ; =============== S U B R O U T I N E =======================================
.text:004048B0
.text:004048B0
.text:004048B0 sub_4048B0      proc near               ; CODE XREF: sub_404560+6B↑p
.text:004048B0
.text:004048B0 var_3C          = dword ptr -3Ch
.text:004048B0 Src             = dword ptr -38h
.text:004048B0 Size            = dword ptr -34h
.text:004048B0 var_29          = byte ptr -29h
.text:004048B0 var_28          = dword ptr -28h
.text:004048B0 var_24          = dword ptr -24h
.text:004048B0 var_20          = dword ptr -20h
.text:004048B0 var_1C          = dword ptr -1Ch
.text:004048B0 var_18          = dword ptr -18h
.text:004048B0 var_14          = dword ptr -14h
.text:004048B0 arg_0           = dword ptr  4
.text:004048B0 arg_4           = dword ptr  8
.text:004048B0 arg_8           = dword ptr  0Ch
.text:004048B0
.text:004048B0                 push    ebp
.text:004048B1                 push    edi
.text:004048B2                 push    esi
.text:004048B3                 push    ebx
.text:004048B4                 sub     esp, 2Ch
.text:004048B7                 mov     edx, [esp+3Ch+arg_0]
.text:004048BB                 mov     [esp+3Ch+var_14], 2
.text:004048C3                 mov     [esp+3Ch+var_20], 1
.text:004048CB                 mov     ebp, [edx]
.text:004048CD                 mov     [esp+3Ch+var_1C], ebp
.text:004048D1                 mov     [esp+3Ch+var_3C], ebp
.text:004048D4                 call    sub_4056E0
.text:004048D9                 mov     [esp+3Ch+var_3C], eax ; char *
.text:004048DC                 mov     esi, [esp+3Ch+var_1C]
.text:004048E0                 mov     ecx, eax
.text:004048E2                 mov     edi, eax
.text:004048E4                 sub     ecx, esi
.text:004048E6                 mov     [esp+3Ch+var_24], ecx
.text:004048EA                 call    sub_405740
.text:004048EF                 mov     [esp+3Ch+var_28], eax
.text:004048F3                 movzx   ebx, word ptr [edi]
.text:004048F6                 mov     word ptr [edi], 2Eh ; '.'
.text:004048FB                 mov     eax, [esp+3Ch+var_1C]
.text:004048FF                 mov     [esp+3Ch+var_3C], eax ; LPCSTR
.text:00404902                 call    sub_40F690
.text:00404907                 mov     [esp+3Ch+var_18], eax
.text:0040490B                 mov     eax, 2
.text:00404910                 mov     [edi], bx
.text:00404913                 mov     edx, [esp+3Ch+var_28]
.text:00404917                 mov     dword ptr [edx+edi], 7E317E2Eh
.text:0040491E                 mov     byte ptr [edx+edi+4], 0
.text:00404923                 mov     edx, [esp+3Ch+var_18]
.text:00404927                 test    edx, edx
.text:00404929                 jz      loc_404B2C
.text:0040492F                 nop
.text:00404930
.text:00404930 loc_404930:                             ; CODE XREF: sub_4048B0+9F↓j
.text:00404930                                         ; sub_4048B0+E5↓j ...
.text:00404930                 mov     ebx, [esp+3Ch+var_18]
.text:00404934                 mov     [esp+3Ch+var_3C], ebx
.text:00404937                 call    sub_40EEE0
.text:0040493C                 test    eax, eax
.text:0040493E                 mov     ebx, eax
.text:00404940                 jz      loc_404B11
.text:00404946                 mov     ecx, [ebx+4]
.text:00404949                 mov     edi, [ebx]
.text:0040494B                 mov     eax, ecx
.text:0040494D                 or      eax, edi
.text:0040494F                 jz      short loc_404930
.text:00404951                 lea     ebp, [ebx+0Ch]
.text:00404954                 mov     ecx, ebp
.text:00404956                 mov     esi, ebp
.text:00404958                 nop
.text:00404959                 lea     esi, [esi+0]
.text:00404960
.text:00404960 loc_404960:                             ; CODE XREF: sub_4048B0+C5↓j
.text:00404960                 mov     edi, [ecx]
.text:00404962                 add     ecx, 4
.text:00404965                 lea     edx, [edi-1010101h]
.text:0040496B                 not     edi
.text:0040496D                 and     edx, edi
.text:0040496F                 and     edx, 80808080h
.text:00404975                 jz      short loc_404960
.text:00404977                 test    edx, 8080h
.text:0040497D                 jnz     short loc_404985
.text:0040497F                 shr     edx, 10h
.text:00404982                 add     ecx, 2
.text:00404985
.text:00404985 loc_404985:                             ; CODE XREF: sub_4048B0+CD↑j
.text:00404985                 add     dl, dl
.text:00404987                 sbb     ecx, 3
.text:0040498A                 sub     ecx, esi
.text:0040498C                 mov     esi, [esp+3Ch+var_28]
.text:00404990                 add     esi, 4
.text:00404993                 cmp     ecx, esi
.text:00404995                 jb      short loc_404930
.text:00404997                 cld
.text:00404998                 mov     ecx, [esp+3Ch+var_28]
.text:0040499C                 mov     edi, ebp
.text:0040499E                 mov     esi, [esp+3Ch+var_1C]
.text:004049A2                 mov     edx, [esp+3Ch+var_24]
.text:004049A6                 add     ecx, 2
.text:004049A9                 add     esi, edx
.text:004049AB                 cmp     ecx, ecx
.text:004049AD                 repe cmpsb
.text:004049AF                 jnz     loc_404930
.text:004049B5                 mov     ebp, [esp+3Ch+var_28]
.text:004049B9                 lea     edx, [ebp+ebx+0]
.text:004049BD                 lea     ebp, [edx+0Eh]
.text:004049C0                 movzx   ecx, byte ptr [edx+0Eh]
.text:004049C4                 mov     bl, cl
.text:004049C6                 sub     bl, 31h ; '1'
.text:004049C9                 cmp     bl, 8
.text:004049CC                 ja      loc_404930
.text:004049D2                 cmp     cl, 39h ; '9'
.text:004049D5                 mov     ebx, 1
.text:004049DA                 setz    [esp+3Ch+var_29]
.text:004049DF                 movsx   ecx, byte ptr [edx+0Fh]
.text:004049E3                 sub     ecx, 30h ; '0'
.text:004049E6                 cmp     ecx, 9
.text:004049E9                 ja      loc_404B08
.text:004049EF                 movzx   edx, byte ptr [ebp+1]
.text:004049F3
.text:004049F3 loc_4049F3:                             ; CODE XREF: sub_4048B0+160↓j
.text:004049F3                 xor     eax, eax
.text:004049F5                 cmp     dl, 39h ; '9'
.text:004049F8                 jz      loc_404AF6
.text:004049FE
.text:004049FE loc_4049FE:                             ; CODE XREF: sub_4048B0+24B↓j
.text:004049FE                                         ; sub_4048B0+253↓j
.text:004049FE                 mov     [esp+3Ch+var_29], al
.text:00404A02                 inc     ebx
.text:00404A03                 movzx   edx, byte ptr [ebx+ebp]
.text:00404A07                 movsx   edi, dl
.text:00404A0A                 sub     edi, 30h ; '0'
.text:00404A0D                 cmp     edi, 9
.text:00404A10                 jbe     short loc_4049F3
.text:00404A12
.text:00404A12 loc_404A12:                             ; CODE XREF: sub_4048B0+25C↓j
.text:00404A12                 cmp     dl, 7Eh ; '~'
.text:00404A15                 jnz     loc_404930
.text:00404A1B                 cmp     byte ptr [ebx+ebp+1], 0
.text:00404A20                 jnz     loc_404930
.text:00404A26                 cmp     [esp+3Ch+var_20], ebx
.text:00404A2A                 jb      short loc_404A5B
.text:00404A2C                 cmp     [esp+3Ch+var_20], ebx
.text:00404A30                 jnz     loc_404930
.text:00404A36                 cld
.text:00404A37                 mov     edi, [esp+3Ch+var_1C]
.text:00404A3B                 mov     ecx, ebx
.text:00404A3D                 mov     eax, [esp+3Ch+arg_8]
.text:00404A41                 cmp     ebx, ebx
.text:00404A43                 lea     esi, [eax+edi+2]
.text:00404A47                 mov     edi, ebp
.text:00404A49                 repe cmpsb
.text:00404A4B                 setnbe  dl
.text:00404A4E                 setb    cl
.text:00404A51                 sub     dl, cl
.text:00404A53                 test    dl, dl
.text:00404A55                 jg      loc_404930
.text:00404A5B
.text:00404A5B loc_404A5B:                             ; CODE XREF: sub_4048B0+17A↑j
.text:00404A5B                 movzx   edi, [esp+3Ch+var_29]
.text:00404A60                 xor     edx, edx
.text:00404A62                 mov     ecx, [esp+3Ch+arg_8]
.text:00404A66                 cmp     [esp+3Ch+var_29], 0
.text:00404A6B                 lea     esi, [ebx+edi]
.text:00404A6E                 mov     [esp+3Ch+var_20], esi
.text:00404A72                 mov     eax, [esp+3Ch+var_20]
.text:00404A76                 setnz   dl
.text:00404A79                 lea     esi, [eax+ecx+3]
.text:00404A7D                 cmp     [esp+3Ch+arg_4], esi
.text:00404A81                 mov     [esp+3Ch+var_14], edx
.text:00404A85                 jbe     short loc_404AD2
.text:00404A87
.text:00404A87 loc_404A87:                             ; CODE XREF: sub_4048B0+244↓j
.text:00404A87                 mov     esi, [esp+3Ch+var_1C]
.text:00404A8B                 mov     eax, [esp+3Ch+arg_8]
.text:00404A8F                 add     esi, eax
.text:00404A91                 mov     byte ptr [esi], 2Eh ; '.'
.text:00404A94                 inc     esi
.text:00404A95                 mov     byte ptr [esi], 7Eh ; '~'
.text:00404A98                 inc     esi
.text:00404A99                 mov     byte ptr [esi], 30h ; '0'
.text:00404A9C                 add     esi, edi
.text:00404A9E                 lea     edi, [ebx+2]
.text:00404AA1                 mov     [esp+3Ch+var_3C], esi ; void *
.text:00404AA4                 lea     esi, [ebx+esi-1]
.text:00404AA8                 mov     [esp+3Ch+Size], edi ; Size
.text:00404AAC                 mov     [esp+3Ch+Src], ebp ; Src
.text:00404AB0                 call    memcpy
.text:00404AB5                 movzx   eax, byte ptr [esi]
.text:00404AB8                 cmp     al, 39h ; '9'
.text:00404ABA                 jz      short loc_404AC5
.text:00404ABC
.text:00404ABC loc_404ABC:                             ; CODE XREF: sub_4048B0+220↓j
.text:00404ABC                 inc     al
.text:00404ABE                 mov     [esi], al
.text:00404AC0                 jmp     loc_404930
.text:00404AC5 ; ---------------------------------------------------------------------------
.text:00404AC5
.text:00404AC5 loc_404AC5:                             ; CODE XREF: sub_4048B0+20A↑j
.text:00404AC5                                         ; sub_4048B0+21E↓j
.text:00404AC5                 mov     byte ptr [esi], 30h ; '0'
.text:00404AC8                 dec     esi
.text:00404AC9                 movzx   eax, byte ptr [esi]
.text:00404ACC                 cmp     al, 39h ; '9'
.text:00404ACE                 jz      short loc_404AC5
.text:00404AD0                 jmp     short loc_404ABC
.text:00404AD2 ; ---------------------------------------------------------------------------
.text:00404AD2
.text:00404AD2 loc_404AD2:                             ; CODE XREF: sub_4048B0+1D5↑j
.text:00404AD2                 mov     [esp+3Ch+Size], esi ; int
.text:00404AD6                 mov     ecx, [esp+3Ch+var_1C]
.text:00404ADA                 add     esi, esi
.text:00404ADC                 mov     [esp+3Ch+Src], 2 ; int
.text:00404AE4                 mov     [esp+3Ch+var_3C], ecx ; void *
.text:00404AE7                 call    sub_404BC0
.text:00404AEC                 mov     [esp+3Ch+var_1C], eax
.text:00404AF0                 mov     [esp+3Ch+arg_4], esi
.text:00404AF4                 jmp     short loc_404A87
.text:00404AF6 ; ---------------------------------------------------------------------------
.text:00404AF6
.text:00404AF6 loc_404AF6:                             ; CODE XREF: sub_4048B0+148↑j
.text:00404AF6                 cmp     [esp+3Ch+var_29], 0
.text:00404AFB                 jz      loc_4049FE
.text:00404B01                 mov     al, 1
.text:00404B03                 jmp     loc_4049FE
.text:00404B08 ; ---------------------------------------------------------------------------
.text:00404B08
.text:00404B08 loc_404B08:                             ; CODE XREF: sub_4048B0+139↑j
.text:00404B08                 movzx   edx, byte ptr [ebp+1]
.text:00404B0C                 jmp     loc_404A12
.text:00404B11 ; ---------------------------------------------------------------------------
.text:00404B11
.text:00404B11 loc_404B11:                             ; CODE XREF: sub_4048B0+90↑j
.text:00404B11                 mov     edx, [esp+3Ch+var_18]
.text:00404B15                 mov     [esp+3Ch+var_3C], edx ; void *
.text:00404B18                 call    sub_40F620
.text:00404B1D                 mov     esi, [esp+3Ch+var_1C]
.text:00404B21                 mov     ebp, [esp+3Ch+arg_0]
.text:00404B25                 mov     eax, [esp+3Ch+var_14]
.text:00404B29                 mov     [ebp+0], esi
.text:00404B2C
.text:00404B2C loc_404B2C:                             ; CODE XREF: sub_4048B0+79↑j
.text:00404B2C                 add     esp, 2Ch
.text:00404B2F                 pop     ebx
.text:00404B30                 pop     esi
.text:00404B31                 pop     edi
.text:00404B32                 pop     ebp
.text:00404B33                 retn
.text:00404B33 sub_4048B0      endp
.text:00404B33
.text:00404B33 ; ---------------------------------------------------------------------------
.text:00404B34                 db 1Ch dup(90h)
.text:00404B50 ; ---------------------------------------------------------------------------
.text:00404B50                 sub     esp, 0Ch
.text:00404B53                 xor     edx, edx
.text:00404B55                 mov     ecx, [esp+14h]
.text:00404B59                 mov     [esp+8], ebx
.text:00404B5D                 mov     eax, 0FFFFFFFFh
.text:00404B62                 mov     ebx, [esp+10h]
.text:00404B66                 div     ecx
.text:00404B68                 cmp     eax, ebx
.text:00404B6A                 jb      short loc_404B89
.text:00404B6C                 mov     edx, ebx
.text:00404B6E                 imul    edx, ecx
.text:00404B71                 mov     [esp], edx
.text:00404B74                 call    malloc
.text:00404B79                 test    eax, eax
.text:00404B7B                 jz      short loc_404B85
.text:00404B7D
.text:00404B7D loc_404B7D:                             ; CODE XREF: .text:00404B87↓j
.text:00404B7D                 mov     ebx, [esp+8]
.text:00404B81                 add     esp, 0Ch
.text:00404B84                 retn
.text:00404B85 ; ---------------------------------------------------------------------------
.text:00404B85
.text:00404B85 loc_404B85:                             ; CODE XREF: .text:00404B7B↑j
.text:00404B85                 test    ebx, ebx
.text:00404B87                 jz      short loc_404B7D
.text:00404B89
.text:00404B89 loc_404B89:                             ; CODE XREF: .text:00404B6A↑j
.text:00404B89                 call    sub_405EA0
.text:00404B89 ; ---------------------------------------------------------------------------
.text:00404B8E                 align 10h
.text:00404B90
.text:00404B90 ; =============== S U B R O U T I N E =======================================
.text:00404B90
.text:00404B90
.text:00404B90 ; int __cdecl sub_404B90(size_t)
.text:00404B90 sub_404B90      proc near               ; CODE XREF: sub_404560+39↑p
.text:00404B90                                         ; sub_405800+77↓p ...
.text:00404B90
.text:00404B90 Size            = dword ptr -0Ch
.text:00404B90 var_4           = dword ptr -4
.text:00404B90 arg_0           = dword ptr  4
.text:00404B90
.text:00404B90                 sub     esp, 0Ch
.text:00404B93                 mov     [esp+0Ch+var_4], ebx
.text:00404B97                 mov     ebx, [esp+0Ch+arg_0]
.text:00404B9B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404B9E                 call    malloc
.text:00404BA3                 test    eax, eax
.text:00404BA5                 jz      short loc_404BB0
.text:00404BA7
.text:00404BA7 loc_404BA7:                             ; CODE XREF: sub_404B90+22↓j
.text:00404BA7                 mov     ebx, [esp+0Ch+var_4]
.text:00404BAB                 add     esp, 0Ch
.text:00404BAE                 retn
.text:00404BAE ; ---------------------------------------------------------------------------
.text:00404BAF                 align 10h
.text:00404BB0
.text:00404BB0 loc_404BB0:                             ; CODE XREF: sub_404B90+15↑j
.text:00404BB0                 test    ebx, ebx
.text:00404BB2                 jz      short loc_404BA7
.text:00404BB4                 call    sub_405EA0
.text:00404BB4 sub_404B90      endp
.text:00404BB4
.text:00404BB4 ; ---------------------------------------------------------------------------
.text:00404BB9                 align 10h
.text:00404BC0
.text:00404BC0 ; =============== S U B R O U T I N E =======================================
.text:00404BC0
.text:00404BC0
.text:00404BC0 ; int __cdecl sub_404BC0(void *, int, int)
.text:00404BC0 sub_404BC0      proc near               ; CODE XREF: sub_4048B0+237↑p
.text:00404BC0
.text:00404BC0 Block           = dword ptr -1Ch
.text:00404BC0 Size            = dword ptr -18h
.text:00404BC0 var_8           = dword ptr -8
.text:00404BC0 var_4           = dword ptr -4
.text:00404BC0 arg_0           = dword ptr  4
.text:00404BC0 arg_4           = dword ptr  8
.text:00404BC0 arg_8           = dword ptr  0Ch
.text:00404BC0
.text:00404BC0                 sub     esp, 1Ch
.text:00404BC3                 xor     edx, edx
.text:00404BC5                 mov     eax, 0FFFFFFFFh
.text:00404BCA                 mov     [esp+1Ch+var_8], ebx
.text:00404BCE                 mov     ecx, [esp+1Ch+arg_0]
.text:00404BD2                 mov     ebx, [esp+1Ch+arg_8]
.text:00404BD6                 mov     [esp+1Ch+var_4], esi
.text:00404BDA                 mov     esi, [esp+1Ch+arg_4]
.text:00404BDE                 div     ebx
.text:00404BE0                 cmp     eax, esi
.text:00404BE2                 jb      short loc_404C14
.text:00404BE4                 mov     [esp+1Ch+Block], ecx ; Block
.text:00404BE7                 mov     edx, esi
.text:00404BE9                 imul    edx, ebx
.text:00404BEC                 mov     [esp+1Ch+Size], edx ; Size
.text:00404BF0                 call    realloc
.text:00404BF5                 test    eax, eax
.text:00404BF7                 mov     ecx, eax
.text:00404BF9                 jz      short loc_404C10
.text:00404BFB
.text:00404BFB loc_404BFB:                             ; CODE XREF: sub_404BC0+52↓j
.text:00404BFB                 mov     ebx, [esp+1Ch+var_8]
.text:00404BFF                 mov     eax, ecx
.text:00404C01                 mov     esi, [esp+1Ch+var_4]
.text:00404C05                 add     esp, 1Ch
.text:00404C08                 retn
.text:00404C08 ; ---------------------------------------------------------------------------
.text:00404C09                 align 10h
.text:00404C10
.text:00404C10 loc_404C10:                             ; CODE XREF: sub_404BC0+39↑j
.text:00404C10                 test    esi, esi
.text:00404C12                 jz      short loc_404BFB
.text:00404C14
.text:00404C14 loc_404C14:                             ; CODE XREF: sub_404BC0+22↑j
.text:00404C14                 call    sub_405EA0
.text:00404C14 sub_404BC0      endp
.text:00404C14
.text:00404C14 ; ---------------------------------------------------------------------------
.text:00404C19                 align 10h
.text:00404C20
.text:00404C20 ; =============== S U B R O U T I N E =======================================
.text:00404C20
.text:00404C20
.text:00404C20 ; int __cdecl sub_404C20(void *, size_t)
.text:00404C20 sub_404C20      proc near               ; CODE XREF: sub_4070B0+5B↓p
.text:00404C20
.text:00404C20 Block           = dword ptr -0Ch
.text:00404C20 Size            = dword ptr -8
.text:00404C20 var_4           = dword ptr -4
.text:00404C20 arg_0           = dword ptr  4
.text:00404C20 arg_4           = dword ptr  8
.text:00404C20
.text:00404C20                 sub     esp, 0Ch
.text:00404C23                 mov     edx, [esp+0Ch+arg_0]
.text:00404C27                 mov     [esp+0Ch+var_4], ebx
.text:00404C2B                 mov     ebx, [esp+0Ch+arg_4]
.text:00404C2F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404C32                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404C36                 call    realloc
.text:00404C3B                 test    eax, eax
.text:00404C3D                 jz      short loc_404C47
.text:00404C3F
.text:00404C3F loc_404C3F:                             ; CODE XREF: sub_404C20+29↓j
.text:00404C3F                 mov     ebx, [esp+0Ch+var_4]
.text:00404C43                 add     esp, 0Ch
.text:00404C46                 retn
.text:00404C47 ; ---------------------------------------------------------------------------
.text:00404C47
.text:00404C47 loc_404C47:                             ; CODE XREF: sub_404C20+1D↑j
.text:00404C47                 test    ebx, ebx
.text:00404C49                 jz      short loc_404C3F
.text:00404C4B                 call    sub_405EA0
.text:00404C4B sub_404C20      endp
.text:00404C4B
.text:00404C50 ; ---------------------------------------------------------------------------
.text:00404C50                 jmp     sub_404DA0
.text:00404C50 ; ---------------------------------------------------------------------------
.text:00404C55                 align 10h
.text:00404C60                 sub     esp, 0Ch
.text:00404C63                 mov     edx, [esp+14h]
.text:00404C67                 mov     dword ptr [esp+8], 1
.text:00404C6F                 mov     [esp+4], edx
.text:00404C73                 mov     edx, [esp+10h]
.text:00404C77                 mov     [esp], edx
.text:00404C7A                 call    sub_404DA0
.text:00404C7F                 add     esp, 0Ch
.text:00404C82                 retn
.text:00404C82 ; ---------------------------------------------------------------------------
.text:00404C83                 align 10h
.text:00404C90                 sub     esp, 1Ch
.text:00404C93                 mov     [esp+18h], ebx
.text:00404C97                 mov     ebx, [esp+20h]
.text:00404C9B                 mov     [esp], ebx
.text:00404C9E                 call    malloc
.text:00404CA3                 test    eax, eax
.text:00404CA5                 jz      short loc_404CC3
.text:00404CA7
.text:00404CA7 loc_404CA7:                             ; CODE XREF: .text:00404CC5↓j
.text:00404CA7                 mov     [esp+8], ebx
.text:00404CAB                 mov     dword ptr [esp+4], 0
.text:00404CB3                 mov     [esp], eax
.text:00404CB6                 call    memset
.text:00404CBB                 mov     ebx, [esp+18h]
.text:00404CBF                 add     esp, 1Ch
.text:00404CC2                 retn
.text:00404CC3 ; ---------------------------------------------------------------------------
.text:00404CC3
.text:00404CC3 loc_404CC3:                             ; CODE XREF: .text:00404CA5↑j
.text:00404CC3                 test    ebx, ebx
.text:00404CC5                 jz      short loc_404CA7
.text:00404CC7                 call    sub_405EA0
.text:00404CC7 ; ---------------------------------------------------------------------------
.text:00404CCC                 align 10h
.text:00404CD0                 sub     esp, 0Ch
.text:00404CD3                 xor     edx, edx
.text:00404CD5                 mov     ecx, [esp+14h]
.text:00404CD9                 mov     [esp+8], ebx
.text:00404CDD                 mov     eax, 0FFFFFFFFh
.text:00404CE2                 mov     ebx, [esp+10h]
.text:00404CE6                 div     ecx
.text:00404CE8                 cmp     eax, ebx
.text:00404CEA                 jb      short loc_404D08
.text:00404CEC                 mov     [esp+4], ecx
.text:00404CF0                 mov     [esp], ebx
.text:00404CF3                 call    calloc
.text:00404CF8                 test    eax, eax
.text:00404CFA                 jz      short loc_404D04
.text:00404CFC
.text:00404CFC loc_404CFC:                             ; CODE XREF: .text:00404D06↓j
.text:00404CFC                 mov     ebx, [esp+8]
.text:00404D00                 add     esp, 0Ch
.text:00404D03                 retn
.text:00404D04 ; ---------------------------------------------------------------------------
.text:00404D04
.text:00404D04 loc_404D04:                             ; CODE XREF: .text:00404CFA↑j
.text:00404D04                 test    ebx, ebx
.text:00404D06                 jz      short loc_404CFC
.text:00404D08
.text:00404D08 loc_404D08:                             ; CODE XREF: .text:00404CEA↑j
.text:00404D08                 call    sub_405EA0
.text:00404D08 ; ---------------------------------------------------------------------------
.text:00404D0D                 align 10h
.text:00404D10                 sub     esp, 1Ch
.text:00404D13                 mov     [esp+18h], ebx
.text:00404D17                 mov     ebx, [esp+24h]
.text:00404D1B                 mov     [esp], ebx
.text:00404D1E                 call    malloc
.text:00404D23                 test    eax, eax
.text:00404D25                 mov     edx, eax
.text:00404D27                 jz      short loc_404D45
.text:00404D29
.text:00404D29 loc_404D29:                             ; CODE XREF: .text:00404D47↓j
.text:00404D29                 mov     [esp+8], ebx
.text:00404D2D                 mov     ecx, [esp+20h]
.text:00404D31                 mov     [esp], edx
.text:00404D34                 mov     [esp+4], ecx
.text:00404D38                 call    memcpy
.text:00404D3D                 mov     ebx, [esp+18h]
.text:00404D41                 add     esp, 1Ch
.text:00404D44                 retn
.text:00404D45 ; ---------------------------------------------------------------------------
.text:00404D45
.text:00404D45 loc_404D45:                             ; CODE XREF: .text:00404D27↑j
.text:00404D45                 test    ebx, ebx
.text:00404D47                 jz      short loc_404D29
.text:00404D49                 call    sub_405EA0
.text:00404D49 ; ---------------------------------------------------------------------------
.text:00404D4E                 align 10h
.text:00404D50
.text:00404D50 ; =============== S U B R O U T I N E =======================================
.text:00404D50
.text:00404D50
.text:00404D50 ; int __cdecl sub_404D50(char *)
.text:00404D50 sub_404D50      proc near               ; CODE XREF: sub_401FB0+5DE↑p
.text:00404D50
.text:00404D50 Str             = dword ptr -1Ch
.text:00404D50 Src             = dword ptr -18h
.text:00404D50 Size            = dword ptr -14h
.text:00404D50 var_8           = dword ptr -8
.text:00404D50 var_4           = dword ptr -4
.text:00404D50 arg_0           = dword ptr  4
.text:00404D50
.text:00404D50                 sub     esp, 1Ch
.text:00404D53                 mov     [esp+1Ch+var_4], esi
.text:00404D57                 mov     esi, [esp+1Ch+arg_0]
.text:00404D5B                 mov     [esp+1Ch+var_8], ebx
.text:00404D5F                 mov     [esp+1Ch+Str], esi ; Str
.text:00404D62                 call    strlen
.text:00404D67                 lea     ebx, [eax+1]
.text:00404D6A                 mov     [esp+1Ch+Str], ebx ; Size
.text:00404D6D                 call    malloc
.text:00404D72                 test    eax, eax
.text:00404D74                 jz      short loc_404D92
.text:00404D76
.text:00404D76 loc_404D76:                             ; CODE XREF: sub_404D50+44↓j
.text:00404D76                 mov     [esp+1Ch+Size], ebx ; Size
.text:00404D7A                 mov     [esp+1Ch+Src], esi ; Src
.text:00404D7E                 mov     [esp+1Ch+Str], eax ; void *
.text:00404D81                 call    memcpy
.text:00404D86                 mov     ebx, [esp+1Ch+var_8]
.text:00404D8A                 mov     esi, [esp+1Ch+var_4]
.text:00404D8E                 add     esp, 1Ch
.text:00404D91                 retn
.text:00404D92 ; ---------------------------------------------------------------------------
.text:00404D92
.text:00404D92 loc_404D92:                             ; CODE XREF: sub_404D50+24↑j
.text:00404D92                 test    ebx, ebx
.text:00404D94                 jz      short loc_404D76
.text:00404D96                 call    sub_405EA0
.text:00404D96 sub_404D50      endp
.text:00404D96
.text:00404D96 ; ---------------------------------------------------------------------------
.text:00404D9B                 align 10h
.text:00404DA0
.text:00404DA0 ; =============== S U B R O U T I N E =======================================
.text:00404DA0
.text:00404DA0
.text:00404DA0 ; int __cdecl sub_404DA0(void *, int, int)
.text:00404DA0 sub_404DA0      proc near               ; CODE XREF: .text:00404C50↑j
.text:00404DA0                                         ; .text:00404C7A↑p
.text:00404DA0
.text:00404DA0 Block           = dword ptr -1Ch
.text:00404DA0 Size            = dword ptr -18h
.text:00404DA0 var_C           = dword ptr -0Ch
.text:00404DA0 var_8           = dword ptr -8
.text:00404DA0 var_4           = dword ptr -4
.text:00404DA0 arg_0           = dword ptr  4
.text:00404DA0 arg_4           = dword ptr  8
.text:00404DA0 arg_8           = dword ptr  0Ch
.text:00404DA0
.text:00404DA0                 sub     esp, 1Ch
.text:00404DA3                 mov     [esp+1Ch+var_8], esi
.text:00404DA7                 mov     esi, [esp+1Ch+arg_0]
.text:00404DAB                 mov     [esp+1Ch+var_4], edi
.text:00404DAF                 mov     edi, [esp+1Ch+arg_4]
.text:00404DB3                 test    esi, esi
.text:00404DB5                 mov     [esp+1Ch+var_C], ebx
.text:00404DB9                 mov     ecx, [edi]
.text:00404DBB                 mov     ebx, [esp+1Ch+arg_8]
.text:00404DBF                 jz      short loc_404E00
.text:00404DC1                 xor     edx, edx
.text:00404DC3                 mov     eax, 7FFFFFFFh
.text:00404DC8                 div     ebx
.text:00404DCA                 cmp     eax, ecx
.text:00404DCC                 jb      short loc_404DF9
.text:00404DCE                 add     ecx, ecx
.text:00404DD0
.text:00404DD0 loc_404DD0:                             ; CODE XREF: sub_404DA0+62↓j
.text:00404DD0                                         ; sub_404DA0+71↓j ...
.text:00404DD0                 mov     [edi], ecx
.text:00404DD2                 imul    ebx, ecx
.text:00404DD5                 mov     [esp+1Ch+Block], esi ; Block
.text:00404DD8                 mov     [esp+1Ch+Size], ebx ; Size
.text:00404DDC                 call    realloc
.text:00404DE1                 test    eax, eax
.text:00404DE3                 jz      short loc_404DF5
.text:00404DE5
.text:00404DE5 loc_404DE5:                             ; CODE XREF: sub_404DA0+57↓j
.text:00404DE5                 mov     ebx, [esp+1Ch+var_C]
.text:00404DE9                 mov     esi, [esp+1Ch+var_8]
.text:00404DED                 mov     edi, [esp+1Ch+var_4]
.text:00404DF1                 add     esp, 1Ch
.text:00404DF4                 retn
.text:00404DF5 ; ---------------------------------------------------------------------------
.text:00404DF5
.text:00404DF5 loc_404DF5:                             ; CODE XREF: sub_404DA0+43↑j
.text:00404DF5                 test    ebx, ebx
.text:00404DF7                 jz      short loc_404DE5
.text:00404DF9
.text:00404DF9 loc_404DF9:                             ; CODE XREF: sub_404DA0+2C↑j
.text:00404DF9                 call    sub_405EA0
.text:00404DF9 ; ---------------------------------------------------------------------------
.text:00404DFE                 align 10h
.text:00404E00
.text:00404E00 loc_404E00:                             ; CODE XREF: sub_404DA0+1F↑j
.text:00404E00                 test    ecx, ecx
.text:00404E02                 jnz     short loc_404DD0
.text:00404E04                 xor     edx, edx
.text:00404E06                 mov     eax, 40h ; '@'
.text:00404E0B                 div     ebx
.text:00404E0D                 test    eax, eax
.text:00404E0F                 mov     ecx, eax
.text:00404E11                 jnz     short loc_404DD0
.text:00404E13                 mov     ecx, 1
.text:00404E18                 jmp     short loc_404DD0
.text:00404E18 sub_404DA0      endp
.text:00404E18
.text:00404E18 ; ---------------------------------------------------------------------------
.text:00404E1A                 align 10h
.text:00404E20 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404E20                                         ; DATA XREF: .data:Buffer↓o
.text:00404E52 ; const char Format[]
.text:00404E52 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_405110+50↓o
.text:00404E5E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00404E5E                                         ; DATA XREF: sub_405110:loc_4051B1↓o
.text:00404E6E                 align 20h
.text:00404E80 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00404E80                                         ; DATA XREF: sub_405110+100↓o
.text:00404E80                 db 'ere is NO',0Ah
.text:00404E80                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00404E80                 db 'R PURPOSE.',0Ah,0
.text:00404F18 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00404F18                                         ; DATA XREF: sub_405110:loc_405251↓o
.text:00404F2F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00404F2F                                         ; DATA XREF: sub_405110:loc_40525D↓o
.text:00404F4B                 align 20h
.text:00404F60 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00404F60                                         ; DATA XREF: sub_405110:loc_405269↓o
.text:00404F60                 db 'and %s.',0Ah,0
.text:00404F80 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00404F80                                         ; DATA XREF: sub_405110:loc_405275↓o
.text:00404F80                 db '%s, and %s.',0Ah,0
.text:00404FA4                 align 20h
.text:00404FC0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00404FC0                                         ; DATA XREF: sub_405110:loc_405281↓o
.text:00404FC0                 db '%s, %s, and %s.',0Ah,0
.text:00404FE8                 align 20h
.text:00405000 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00405000                                         ; DATA XREF: sub_405110:loc_40528D↓o
.text:00405000                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040502C                 align 20h
.text:00405040 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00405040                                         ; DATA XREF: sub_405110:loc_405299↓o
.text:00405040                 db '%s, %s, %s, %s,',0Ah
.text:00405040                 db 'and %s.',0Ah,0
.text:00405070                 align 20h
.text:00405080 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00405080                                         ; DATA XREF: sub_405110:loc_4052A5↓o
.text:00405080                 db '%s, %s, %s, %s,',0Ah
.text:00405080                 db '%s, and %s.',0Ah,0
.text:004050B4                 align 10h
.text:004050C0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004050C0                                         ; DATA XREF: sub_405110:def_40517D↓o
.text:004050C0                 db '%s, %s, %s, %s,',0Ah
.text:004050C0                 db '%s, %s, and others.',0Ah,0
.text:004050FC ; const char aSS[]
.text:004050FC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_405110+1B5↓o
.text:00405103                 align 10h
.text:00405110
.text:00405110 ; =============== S U B R O U T I N E =======================================
.text:00405110
.text:00405110
.text:00405110 ; int __cdecl sub_405110(FILE *, FILE *, int, int, va_list)
.text:00405110 sub_405110      proc near               ; CODE XREF: sub_4052E0+2A↓p
.text:00405110
.text:00405110 Stream          = dword ptr -2Ch
.text:00405110 Format          = dword ptr -28h
.text:00405110 ArgList         = dword ptr -24h
.text:00405110 var_20          = dword ptr -20h
.text:00405110 var_1C          = dword ptr -1Ch
.text:00405110 var_14          = dword ptr -14h
.text:00405110 arg_0           = dword ptr  4
.text:00405110 arg_4           = dword ptr  8
.text:00405110 arg_8           = dword ptr  0Ch
.text:00405110 arg_C           = dword ptr  10h
.text:00405110 arg_10          = dword ptr  14h
.text:00405110
.text:00405110                 push    ebp
.text:00405111                 push    edi
.text:00405112                 push    esi
.text:00405113                 push    ebx
.text:00405114                 sub     esp, 1Ch
.text:00405117                 xor     ebx, ebx
.text:00405119                 mov     edi, [esp+2Ch+arg_10]
.text:0040511D                 mov     edx, [esp+2Ch+arg_8]
.text:00405121                 mov     esi, [esp+2Ch+arg_0]
.text:00405125                 mov     eax, [edi]
.text:00405127                 mov     ecx, [esp+2Ch+arg_4]
.text:0040512B                 mov     [esp+2Ch+var_14], edx
.text:0040512F                 mov     ebp, [esp+2Ch+arg_C]
.text:00405133                 lea     edx, [edi+4]
.text:00405136                 test    eax, eax
.text:00405138                 jz      short loc_40514C
.text:0040513A                 lea     esi, [esi+0]
.text:00405140
.text:00405140 loc_405140:                             ; CODE XREF: sub_405110+3A↓j
.text:00405140                 mov     eax, edx
.text:00405142                 inc     ebx
.text:00405143                 mov     eax, [eax]
.text:00405145                 add     edx, 4
.text:00405148                 test    eax, eax
.text:0040514A                 jnz     short loc_405140
.text:0040514C
.text:0040514C loc_40514C:                             ; CODE XREF: sub_405110+28↑j
.text:0040514C                 test    ecx, ecx
.text:0040514E                 jz      loc_4052BD
.text:00405154                 mov     [esp+2Ch+var_1C], ebp
.text:00405158                 mov     edx, [esp+2Ch+var_14]
.text:0040515C                 mov     [esp+2Ch+ArgList], ecx
.text:00405160                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00405168                 mov     [esp+2Ch+var_20], edx
.text:0040516C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040516F                 call    fprintf
.text:00405174
.text:00405174 loc_405174:                             ; CODE XREF: sub_405110+1C9↓j
.text:00405174                 cmp     ebx, 9          ; switch 10 cases
.text:00405177                 ja      def_40517D      ; jumptable 0040517D default case
.text:0040517D                 jmp     ds:jpt_40517D[ebx*4] ; switch jump
.text:0040517D ; ---------------------------------------------------------------------------
.text:00405184 jpt_40517D      dd offset loc_4051AC    ; DATA XREF: sub_405110+6D↑r
.text:00405184                 dd offset loc_4051B1    ; jump table for switch statement
.text:00405184                 dd offset loc_405251
.text:00405184                 dd offset loc_40525D
.text:00405184                 dd offset loc_405269
.text:00405184                 dd offset loc_405275
.text:00405184                 dd offset loc_405281
.text:00405184                 dd offset loc_40528D
.text:00405184                 dd offset loc_405299
.text:00405184                 dd offset loc_4052A5
.text:004051AC ; ---------------------------------------------------------------------------
.text:004051AC
.text:004051AC loc_4051AC:                             ; CODE XREF: sub_405110+6D↑j
.text:004051AC                                         ; DATA XREF: sub_405110:jpt_40517D↑o
.text:004051AC                 call    abort           ; jumptable 0040517D case 0
.text:004051B1 ; ---------------------------------------------------------------------------
.text:004051B1
.text:004051B1 loc_4051B1:                             ; CODE XREF: sub_405110+6D↑j
.text:004051B1                                         ; DATA XREF: sub_405110:jpt_40517D↑o
.text:004051B1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040517D case 1
.text:004051B8                 nop
.text:004051B9                 lea     esi, [esi+0]
.text:004051C0
.text:004051C0 loc_4051C0:                             ; CODE XREF: sub_405110+148↓j
.text:004051C0                                         ; sub_405110+154↓j ...
.text:004051C0                 call    ds:libintl_gettext
.text:004051C6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004051CA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004051CD                 mov     [esp+2Ch+Format], eax ; Format
.text:004051D1                 call    vfprintf
.text:004051D6                 mov     ebx, [esi+4]
.text:004051D9                 dec     ebx
.text:004051DA                 test    ebx, ebx
.text:004051DC                 mov     [esi+4], ebx
.text:004051DF                 js      short loc_40523F
.text:004051E1                 mov     edi, [esi]
.text:004051E3                 mov     byte ptr [edi], 0Ah
.text:004051E6                 inc     dword ptr [esi]
.text:004051E8
.text:004051E8 loc_4051E8:                             ; CODE XREF: sub_405110+13F↓j
.text:004051E8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004051EC                 mov     edx, Buffer
.text:004051F2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004051F5                 call    fputs
.text:004051FA                 mov     ebp, [esi+4]
.text:004051FD                 dec     ebp
.text:004051FE                 test    ebp, ebp
.text:00405200                 mov     [esi+4], ebp
.text:00405203                 js      short loc_40522D
.text:00405205                 mov     ecx, [esi]
.text:00405207                 mov     byte ptr [ecx], 0Ah
.text:0040520A                 inc     dword ptr [esi]
.text:0040520C
.text:0040520C loc_40520C:                             ; CODE XREF: sub_405110+12D↓j
.text:0040520C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00405210                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00405217                 call    ds:libintl_gettext
.text:0040521D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00405221                 add     esp, 1Ch
.text:00405224                 pop     ebx
.text:00405225                 pop     esi
.text:00405226                 pop     edi
.text:00405227                 pop     ebp
.text:00405228                 jmp     fputs
.text:0040522D ; ---------------------------------------------------------------------------
.text:0040522D
.text:0040522D loc_40522D:                             ; CODE XREF: sub_405110+F3↑j
.text:0040522D                 mov     [esp+2Ch+Format], esi ; File
.text:00405231                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00405238                 call    _flsbuf
.text:0040523D                 jmp     short loc_40520C
.text:0040523F ; ---------------------------------------------------------------------------
.text:0040523F
.text:0040523F loc_40523F:                             ; CODE XREF: sub_405110+CF↑j
.text:0040523F                 mov     [esp+2Ch+Format], esi ; File
.text:00405243                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040524A                 call    _flsbuf
.text:0040524F                 jmp     short loc_4051E8
.text:00405251 ; ---------------------------------------------------------------------------
.text:00405251
.text:00405251 loc_405251:                             ; CODE XREF: sub_405110+6D↑j
.text:00405251                                         ; DATA XREF: sub_405110:jpt_40517D↑o
.text:00405251                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040517D case 2
.text:00405258                 jmp     loc_4051C0
.text:0040525D ; ---------------------------------------------------------------------------
.text:0040525D
.text:0040525D loc_40525D:                             ; CODE XREF: sub_405110+6D↑j
.text:0040525D                                         ; DATA XREF: sub_405110:jpt_40517D↑o
.text:0040525D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040517D case 3
.text:00405264                 jmp     loc_4051C0
.text:00405269 ; ---------------------------------------------------------------------------
.text:00405269
.text:00405269 loc_405269:                             ; CODE XREF: sub_405110+6D↑j
.text:00405269                                         ; DATA XREF: sub_405110:jpt_40517D↑o
.text:00405269                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040517D case 4
.text:00405270                 jmp     loc_4051C0
.text:00405275 ; ---------------------------------------------------------------------------
.text:00405275
.text:00405275 loc_405275:                             ; CODE XREF: sub_405110+6D↑j
.text:00405275                                         ; DATA XREF: sub_405110:jpt_40517D↑o
.text:00405275                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040517D case 5
.text:0040527C                 jmp     loc_4051C0
.text:00405281 ; ---------------------------------------------------------------------------
.text:00405281
.text:00405281 loc_405281:                             ; CODE XREF: sub_405110+6D↑j
.text:00405281                                         ; DATA XREF: sub_405110:jpt_40517D↑o
.text:00405281                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040517D case 6
.text:00405288                 jmp     loc_4051C0
.text:0040528D ; ---------------------------------------------------------------------------
.text:0040528D
.text:0040528D loc_40528D:                             ; CODE XREF: sub_405110+6D↑j
.text:0040528D                                         ; DATA XREF: sub_405110:jpt_40517D↑o
.text:0040528D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040517D case 7
.text:00405294                 jmp     loc_4051C0
.text:00405299 ; ---------------------------------------------------------------------------
.text:00405299
.text:00405299 loc_405299:                             ; CODE XREF: sub_405110+6D↑j
.text:00405299                                         ; DATA XREF: sub_405110:jpt_40517D↑o
.text:00405299                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040517D case 8
.text:004052A0                 jmp     loc_4051C0
.text:004052A5 ; ---------------------------------------------------------------------------
.text:004052A5
.text:004052A5 loc_4052A5:                             ; CODE XREF: sub_405110+6D↑j
.text:004052A5                                         ; DATA XREF: sub_405110:jpt_40517D↑o
.text:004052A5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040517D case 9
.text:004052AC                 jmp     loc_4051C0
.text:004052B1 ; ---------------------------------------------------------------------------
.text:004052B1
.text:004052B1 def_40517D:                             ; CODE XREF: sub_405110+67↑j
.text:004052B1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040517D default case
.text:004052B8                 jmp     loc_4051C0
.text:004052BD ; ---------------------------------------------------------------------------
.text:004052BD
.text:004052BD loc_4052BD:                             ; CODE XREF: sub_405110+3E↑j
.text:004052BD                 mov     [esp+2Ch+var_20], ebp
.text:004052C1                 mov     ecx, [esp+2Ch+var_14]
.text:004052C5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:004052CD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004052D0                 mov     [esp+2Ch+ArgList], ecx
.text:004052D4                 call    fprintf
.text:004052D9                 jmp     loc_405174
.text:004052D9 sub_405110      endp
.text:004052D9
.text:004052D9 ; ---------------------------------------------------------------------------
.text:004052DE                 align 10h
.text:004052E0
.text:004052E0 ; =============== S U B R O U T I N E =======================================
.text:004052E0
.text:004052E0
.text:004052E0 ; int __cdecl sub_4052E0(FILE *, FILE *, int, int, char)
.text:004052E0 sub_4052E0      proc near               ; CODE XREF: sub_401FB0+3B3↑p
.text:004052E0
.text:004052E0 var_1C          = dword ptr -1Ch
.text:004052E0 var_18          = dword ptr -18h
.text:004052E0 var_14          = dword ptr -14h
.text:004052E0 var_10          = dword ptr -10h
.text:004052E0 var_C           = dword ptr -0Ch
.text:004052E0 arg_0           = dword ptr  4
.text:004052E0 arg_4           = dword ptr  8
.text:004052E0 arg_8           = dword ptr  0Ch
.text:004052E0 arg_C           = dword ptr  10h
.text:004052E0 arg_10          = byte ptr  14h
.text:004052E0
.text:004052E0                 sub     esp, 1Ch
.text:004052E3                 mov     edx, [esp+1Ch+arg_C]
.text:004052E7                 lea     ecx, [esp+1Ch+arg_10]
.text:004052EB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:004052EF                 mov     ecx, [esp+1Ch+arg_8]
.text:004052F3                 mov     [esp+1Ch+var_10], edx ; int
.text:004052F7                 mov     edx, [esp+1Ch+arg_4]
.text:004052FB                 mov     [esp+1Ch+var_14], ecx ; int
.text:004052FF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00405303                 mov     edx, [esp+1Ch+arg_0]
.text:00405307                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040530A                 call    sub_405110
.text:0040530F                 add     esp, 1Ch
.text:00405312                 retn
.text:00405312 sub_4052E0      endp
.text:00405312
.text:00405312 ; ---------------------------------------------------------------------------
.text:00405313                 align 10h
.text:00405320
.text:00405320 ; =============== S U B R O U T I N E =======================================
.text:00405320
.text:00405320
.text:00405320 ; int __cdecl sub_405320(int, int, char *, int, int)
.text:00405320 sub_405320      proc near               ; CODE XREF: sub_401FB0+DF↑p
.text:00405320
.text:00405320 var_1C          = dword ptr -1Ch
.text:00405320 var_18          = dword ptr -18h
.text:00405320 var_14          = dword ptr -14h
.text:00405320 var_10          = dword ptr -10h
.text:00405320 var_C           = dword ptr -0Ch
.text:00405320 var_8           = dword ptr -8
.text:00405320 var_4           = dword ptr -4
.text:00405320 arg_0           = dword ptr  4
.text:00405320 arg_4           = dword ptr  8
.text:00405320 arg_8           = dword ptr  0Ch
.text:00405320 arg_C           = dword ptr  10h
.text:00405320 arg_10          = dword ptr  14h
.text:00405320
.text:00405320                 sub     esp, 1Ch
.text:00405323                 mov     edx, [esp+1Ch+arg_C]
.text:00405327                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040532F                 mov     ecx, [esp+1Ch+arg_10]
.text:00405333                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040533B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040533F                 mov     edx, [esp+1Ch+arg_4]
.text:00405343                 mov     [esp+1Ch+var_C], ecx ; int
.text:00405347                 mov     ecx, [esp+1Ch+arg_8]
.text:0040534B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040534F                 mov     edx, [esp+1Ch+arg_0]
.text:00405353                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00405357                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040535A                 call    sub_404310
.text:0040535F                 add     esp, 1Ch
.text:00405362                 retn
.text:00405362 sub_405320      endp
.text:00405362
.text:00405362 ; ---------------------------------------------------------------------------
.text:00405363                 align 10h
.text:00405370                 sub     esp, 2Ch
.text:00405373                 mov     edx, [esp+44h]
.text:00405377                 mov     dword ptr [esp+18h], 0
.text:0040537F                 mov     ecx, [esp+40h]
.text:00405383                 mov     dword ptr [esp+14h], 0
.text:0040538B                 mov     [esp+1Ch], edx
.text:0040538F                 mov     edx, [esp+3Ch]
.text:00405393                 mov     [esp+10h], ecx
.text:00405397                 mov     ecx, [esp+38h]
.text:0040539B                 mov     [esp+0Ch], edx
.text:0040539F                 mov     edx, [esp+34h]
.text:004053A3                 mov     [esp+8], ecx
.text:004053A7                 mov     [esp+4], edx
.text:004053AB                 mov     edx, [esp+30h]
.text:004053AF                 mov     [esp], edx
.text:004053B2                 call    sub_403780
.text:004053B7                 add     esp, 2Ch
.text:004053BA                 retn
.text:004053BA ; ---------------------------------------------------------------------------
.text:004053BB                 align 10h
.text:004053C0                 sub     esp, 1Ch
.text:004053C3                 mov     edx, [esp+2Ch]
.text:004053C7                 mov     dword ptr [esp+18h], 0
.text:004053CF                 mov     ecx, [esp+30h]
.text:004053D3                 mov     dword ptr [esp+14h], 1
.text:004053DB                 mov     [esp+0Ch], edx
.text:004053DF                 mov     edx, [esp+24h]
.text:004053E3                 mov     [esp+10h], ecx
.text:004053E7                 mov     ecx, [esp+28h]
.text:004053EB                 mov     [esp+4], edx
.text:004053EF                 mov     edx, [esp+20h]
.text:004053F3                 mov     [esp+8], ecx
.text:004053F7                 mov     [esp], edx
.text:004053FA                 call    sub_404310
.text:004053FF                 add     esp, 1Ch
.text:00405402                 retn
.text:00405402 ; ---------------------------------------------------------------------------
.text:00405403                 align 10h
.text:00405410                 sub     esp, 2Ch
.text:00405413                 mov     edx, [esp+44h]
.text:00405417                 mov     dword ptr [esp+18h], 0
.text:0040541F                 mov     ecx, [esp+40h]
.text:00405423                 mov     dword ptr [esp+14h], 1
.text:0040542B                 mov     [esp+1Ch], edx
.text:0040542F                 mov     edx, [esp+3Ch]
.text:00405433                 mov     [esp+10h], ecx
.text:00405437                 mov     ecx, [esp+38h]
.text:0040543B                 mov     [esp+0Ch], edx
.text:0040543F                 mov     edx, [esp+34h]
.text:00405443                 mov     [esp+8], ecx
.text:00405447                 mov     [esp+4], edx
.text:0040544B                 mov     edx, [esp+30h]
.text:0040544F                 mov     [esp], edx
.text:00405452                 call    sub_403780
.text:00405457                 add     esp, 2Ch
.text:0040545A                 retn
.text:0040545A ; ---------------------------------------------------------------------------
.text:0040545B                 align 10h
.text:00405460                 mov     edx, [esp+4]
.text:00405464                 mov     ds:dword_4190A0, edx
.text:0040546A                 retn
.text:0040546A ; ---------------------------------------------------------------------------
.text:0040546B aWriteError     db 'write error',0      ; DATA XREF: sub_405490:loc_4054D9↓o
.text:00405477 ; const char aSS_0[]
.text:00405477 aSS_0           db '%s: %s',0           ; DATA XREF: sub_405490+77↓o
.text:0040547E ; const char aS_4[]
.text:0040547E aS_4            db '%s',0               ; DATA XREF: sub_405490+A0↓o
.text:00405481 ; ---------------------------------------------------------------------------
.text:00405481                 jmp     short sub_405490
.text:00405481 ; ---------------------------------------------------------------------------
.text:00405483                 align 10h
.text:00405490
.text:00405490 ; =============== S U B R O U T I N E =======================================
.text:00405490
.text:00405490
.text:00405490 ; void __cdecl sub_405490()
.text:00405490 sub_405490      proc near               ; CODE XREF: .text:00405481↑j
.text:00405490                                         ; DATA XREF: sub_401FB0+7D↑o
.text:00405490
.text:00405490 Stream          = dword ptr -2Ch
.text:00405490 ErrorMessage    = dword ptr -28h
.text:00405490 var_24          = dword ptr -24h
.text:00405490 var_20          = byte ptr -20h
.text:00405490 var_1C          = dword ptr -1Ch
.text:00405490 var_9           = byte ptr -9
.text:00405490
.text:00405490                 push    esi
.text:00405491                 push    ebx
.text:00405492                 sub     esp, 24h
.text:00405495                 mov     edx, ds:_iob
.text:0040549B                 mov     ecx, [edx+2Ch]
.text:0040549E                 lea     esi, [edx+20h]
.text:004054A1                 shr     ecx, 5
.text:004054A4                 mov     bl, cl
.text:004054A6                 mov     ecx, [edx+20h]
.text:004054A9                 and     bl, 1
.text:004054AC                 cmp     ecx, [esi+8]
.text:004054AF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004054B2                 setz    [esp+2Ch+var_9]
.text:004054B7                 call    fclose
.text:004054BC                 test    eax, eax
.text:004054BE                 setnz   al
.text:004054C1                 test    bl, bl
.text:004054C3                 jnz     loc_405553
.text:004054C9                 test    al, al
.text:004054CB                 jz      short loc_405520
.text:004054CD
.text:004054CD loc_4054CD:                             ; CODE XREF: sub_405490+CD↓j
.text:004054CD                 call    _errno
.text:004054D2                 mov     esi, [eax]
.text:004054D4
.text:004054D4 loc_4054D4:                             ; CODE XREF: sub_405490+C7↓j
.text:004054D4                 cmp     esi, 9
.text:004054D7                 jz      short loc_405546
.text:004054D9
.text:004054D9 loc_4054D9:                             ; CODE XREF: sub_405490+B8↓j
.text:004054D9                                         ; sub_405490+C1↓j
.text:004054D9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:004054E0                 call    ds:libintl_gettext
.text:004054E6                 mov     ebx, eax
.text:004054E8                 mov     eax, ds:dword_4190A0
.text:004054ED                 test    eax, eax
.text:004054EF                 jz      short loc_405526
.text:004054F1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004054F4                 call    sub_407010
.text:004054F9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004054FD                 mov     edx, Code
.text:00405503                 mov     [esp+2Ch+var_1C], ebx
.text:00405507                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040550F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00405513                 mov     [esp+2Ch+Stream], edx ; Code
.text:00405516                 call    sub_40E040
.text:0040551B                 nop
.text:0040551C                 lea     esi, [esi+0]
.text:00405520
.text:00405520 loc_405520:                             ; CODE XREF: sub_405490+3B↑j
.text:00405520                                         ; sub_405490+B4↓j ...
.text:00405520                 add     esp, 24h
.text:00405523                 pop     ebx
.text:00405524                 pop     esi
.text:00405525                 retn
.text:00405526 ; ---------------------------------------------------------------------------
.text:00405526
.text:00405526 loc_405526:                             ; CODE XREF: sub_405490+5F↑j
.text:00405526                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040552A                 mov     ebx, Code
.text:00405530                 mov     [esp+2Ch+var_24], offset aS_4 ; "%s"
.text:00405538                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040553C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040553F                 call    sub_40E040
.text:00405544                 jmp     short loc_405520
.text:00405546 ; ---------------------------------------------------------------------------
.text:00405546
.text:00405546 loc_405546:                             ; CODE XREF: sub_405490+47↑j
.text:00405546                 test    bl, bl
.text:00405548                 jnz     short loc_4054D9
.text:0040554A                 cmp     [esp+2Ch+var_9], 0
.text:0040554F                 jnz     short loc_405520
.text:00405551                 jmp     short loc_4054D9
.text:00405553 ; ---------------------------------------------------------------------------
.text:00405553
.text:00405553 loc_405553:                             ; CODE XREF: sub_405490+33↑j
.text:00405553                 xor     esi, esi
.text:00405555                 test    al, al
.text:00405557                 jz      loc_4054D4
.text:0040555D                 jmp     loc_4054CD
.text:0040555D sub_405490      endp
.text:0040555D
.text:0040555D ; ---------------------------------------------------------------------------
.text:00405562                 align 10h
.text:00405570
.text:00405570 ; =============== S U B R O U T I N E =======================================
.text:00405570
.text:00405570
.text:00405570 sub_405570      proc near               ; CODE XREF: sub_402C30+4C8↑p
.text:00405570
.text:00405570 C               = dword ptr -9Ch
.text:00405570 Type            = dword ptr -98h
.text:00405570 var_8C          = byte ptr -8Ch
.text:00405570
.text:00405570                 push    esi
.text:00405571                 xor     esi, esi
.text:00405573                 push    ebx
.text:00405574                 sub     esp, 94h
.text:0040557A                 lea     esi, [esi+0]
.text:00405580
.text:00405580 loc_405580:                             ; CODE XREF: sub_405570+47↓j
.text:00405580                                         ; sub_405570+66↓j ...
.text:00405580                 mov     ecx, ds:_iob
.text:00405586                 mov     ebx, [ecx+4]
.text:00405589                 dec     ebx
.text:0040558A                 mov     [ecx+4], ebx
.text:0040558D                 test    ebx, ebx
.text:0040558F                 js      loc_405620
.text:00405595                 mov     ecx, ds:_iob
.text:0040559B                 mov     edx, [ecx]
.text:0040559D                 movzx   ebx, byte ptr [edx]
.text:004055A0                 inc     edx
.text:004055A1                 mov     [ecx], edx
.text:004055A3
.text:004055A3 loc_4055A3:                             ; CODE XREF: sub_405570+C0↓j
.text:004055A3                 cmp     ebx, 0FFFFFFFFh
.text:004055A6                 jz      short loc_4055F8
.text:004055A8                 cmp     ebx, 0Ah
.text:004055AB                 jz      short loc_4055F8
.text:004055AD                 lea     edx, [esi-1]
.text:004055B0                 cmp     edx, 7Dh ; '}'
.text:004055B3                 jbe     short loc_4055E0
.text:004055B5                 test    esi, esi
.text:004055B7                 jnz     short loc_405580
.text:004055B9                 mov     edx, ds:__mb_cur_max
.text:004055BF                 cmp     dword ptr [edx], 1
.text:004055C2                 jz      short loc_4055E7
.text:004055C4                 mov     [esp+9Ch+Type], 8 ; Type
.text:004055CC                 mov     [esp+9Ch+C], ebx ; C
.text:004055CF                 call    _isctype
.text:004055D4
.text:004055D4 loc_4055D4:                             ; CODE XREF: sub_405570+86↓j
.text:004055D4                 test    eax, eax
.text:004055D6                 jnz     short loc_405580
.text:004055D8                 nop
.text:004055D9                 lea     esi, [esi+0]
.text:004055E0
.text:004055E0 loc_4055E0:                             ; CODE XREF: sub_405570+43↑j
.text:004055E0                 mov     [esp+esi+9Ch+var_8C], bl
.text:004055E4                 inc     esi
.text:004055E5                 jmp     short loc_405580
.text:004055E7 ; ---------------------------------------------------------------------------
.text:004055E7
.text:004055E7 loc_4055E7:                             ; CODE XREF: sub_405570+52↑j
.text:004055E7                 mov     edx, ds:_pctype
.text:004055ED                 mov     ecx, [edx]
.text:004055EF                 movzx   eax, word ptr [ecx+ebx*2]
.text:004055F3                 and     eax, 8
.text:004055F6                 jmp     short loc_4055D4
.text:004055F8 ; ---------------------------------------------------------------------------
.text:004055F8
.text:004055F8 loc_4055F8:                             ; CODE XREF: sub_405570+36↑j
.text:004055F8                                         ; sub_405570+3B↑j
.text:004055F8                 mov     [esp+esi+9Ch+var_8C], 0
.text:004055FD                 lea     esi, [esp+9Ch+var_8C]
.text:00405601                 mov     [esp+9Ch+C], esi
.text:00405604                 call    near ptr loc_40728B+5
.text:00405609                 dec     eax
.text:0040560A                 setz    cl
.text:0040560D                 add     esp, 94h
.text:00405613                 pop     ebx
.text:00405614                 movzx   eax, cl
.text:00405617                 pop     esi
.text:00405618                 retn
.text:00405618 ; ---------------------------------------------------------------------------
.text:00405619                 align 10h
.text:00405620
.text:00405620 loc_405620:                             ; CODE XREF: sub_405570+1F↑j
.text:00405620                 mov     ebx, ds:_iob
.text:00405626                 mov     [esp+9Ch+C], ebx ; File
.text:00405629                 call    _filbuf
.text:0040562E                 mov     ebx, eax
.text:00405630                 jmp     loc_4055A3
.text:00405630 sub_405570      endp
.text:00405630
.text:00405630 ; ---------------------------------------------------------------------------
.text:00405635                 align 10h
.text:00405640
.text:00405640 ; =============== S U B R O U T I N E =======================================
.text:00405640
.text:00405640
.text:00405640 ; int __cdecl sub_405640(int, char *)
.text:00405640 sub_405640      proc near               ; CODE XREF: sub_402C30+123↑p
.text:00405640                                         ; sub_402C30+138↑p ...
.text:00405640
.text:00405640 var_C           = dword ptr -0Ch
.text:00405640 var_8           = dword ptr -8
.text:00405640 var_4           = dword ptr -4
.text:00405640 arg_0           = dword ptr  4
.text:00405640 arg_4           = dword ptr  8
.text:00405640
.text:00405640                 sub     esp, 0Ch
.text:00405643                 mov     edx, [esp+0Ch+arg_4]
.text:00405647                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040564F                 mov     [esp+0Ch+var_4], edx ; char *
.text:00405653                 mov     edx, [esp+0Ch+arg_0]
.text:00405657                 mov     [esp+0Ch+var_C], edx ; int
.text:0040565A                 call    sub_406CA0
.text:0040565F                 add     esp, 0Ch
.text:00405662                 retn
.text:00405662 sub_405640      endp
.text:00405662
.text:00405662 ; ---------------------------------------------------------------------------
.text:00405663                 align 10h
.text:00405670
.text:00405670 ; =============== S U B R O U T I N E =======================================
.text:00405670
.text:00405670
.text:00405670 ; int __cdecl sub_405670(char *)
.text:00405670 sub_405670      proc near               ; CODE XREF: sub_401FB0+4CE↑p
.text:00405670                                         ; sub_401FB0+509↑p ...
.text:00405670
.text:00405670 var_C           = dword ptr -0Ch
.text:00405670 var_8           = dword ptr -8
.text:00405670 var_4           = dword ptr -4
.text:00405670 arg_0           = dword ptr  4
.text:00405670
.text:00405670                 sub     esp, 0Ch
.text:00405673                 mov     edx, [esp+0Ch+arg_0]
.text:00405677                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040567F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00405686                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040568A                 call    sub_406CA0
.text:0040568F                 add     esp, 0Ch
.text:00405692                 retn
.text:00405692 sub_405670      endp
.text:00405692
.text:00405692 ; ---------------------------------------------------------------------------
.text:00405693                 align 10h
.text:004056A0
.text:004056A0 ; =============== S U B R O U T I N E =======================================
.text:004056A0
.text:004056A0
.text:004056A0 sub_4056A0      proc near               ; CODE XREF: sub_402C30+589↑p
.text:004056A0
.text:004056A0 var_C           = dword ptr -0Ch
.text:004056A0 var_4           = dword ptr -4
.text:004056A0 arg_0           = dword ptr  4
.text:004056A0
.text:004056A0                 sub     esp, 0Ch
.text:004056A3                 mov     edx, [esp+0Ch+arg_0]
.text:004056A7                 mov     [esp+0Ch+var_4], ebx
.text:004056AB                 mov     [esp+0Ch+var_C], edx
.text:004056AE                 call    sub_4056E0
.text:004056B3                 mov     [esp+0Ch+var_C], eax ; char *
.text:004056B6                 mov     ebx, eax
.text:004056B8                 call    sub_405740
.text:004056BD                 lea     edx, [eax+ebx]
.text:004056C0                 cmp     byte ptr [edx], 0
.text:004056C3                 mov     byte ptr [edx], 0
.text:004056C6                 mov     ebx, [esp+0Ch+var_4]
.text:004056CA                 setnz   cl
.text:004056CD                 add     esp, 0Ch
.text:004056D0                 movzx   eax, cl
.text:004056D3                 retn
.text:004056D3 sub_4056A0      endp
.text:004056D3
.text:004056D3 ; ---------------------------------------------------------------------------
.text:004056D4                 align 10h
.text:004056E0
.text:004056E0 ; =============== S U B R O U T I N E =======================================
.text:004056E0
.text:004056E0
.text:004056E0 sub_4056E0      proc near               ; CODE XREF: sub_401FB0+744↑p
.text:004056E0                                         ; sub_402C30+591↑p ...
.text:004056E0
.text:004056E0 arg_0           = dword ptr  4
.text:004056E0
.text:004056E0                 mov     ecx, [esp+arg_0]
.text:004056E4                 movzx   eax, byte ptr [ecx]
.text:004056E7                 test    al, al
.text:004056E9                 jz      short loc_4056F1
.text:004056EB                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:004056EF                 jz      short loc_405737
.text:004056F1
.text:004056F1 loc_4056F1:                             ; CODE XREF: sub_4056E0+9↑j
.text:004056F1                                         ; sub_4056E0+5D↓j
.text:004056F1                 test    al, al
.text:004056F3                 mov     edx, ecx
.text:004056F5                 jz      short loc_405710
.text:004056F7                 movzx   eax, byte ptr [ecx]
.text:004056FA                 lea     esi, [esi+0]
.text:00405700
.text:00405700 loc_405700:                             ; CODE XREF: sub_4056E0+2E↓j
.text:00405700                 cmp     al, 2Fh ; '/'
.text:00405702                 jz      short loc_405713
.text:00405704                 cmp     al, 5Ch ; '\'
.text:00405706                 jz      short loc_405713
.text:00405708
.text:00405708 loc_405708:                             ; CODE XREF: sub_4056E0+45↓j
.text:00405708                 inc     edx
.text:00405709                 movzx   eax, byte ptr [edx]
.text:0040570C                 test    al, al
.text:0040570E                 jnz     short loc_405700
.text:00405710
.text:00405710 loc_405710:                             ; CODE XREF: sub_4056E0+15↑j
.text:00405710                                         ; sub_4056E0+50↓j ...
.text:00405710                 mov     eax, ecx
.text:00405712                 retn
.text:00405713 ; ---------------------------------------------------------------------------
.text:00405713
.text:00405713 loc_405713:                             ; CODE XREF: sub_4056E0+22↑j
.text:00405713                                         ; sub_4056E0+26↑j ...
.text:00405713                 inc     edx
.text:00405714                 movzx   eax, byte ptr [edx]
.text:00405717                 cmp     al, 2Fh ; '/'
.text:00405719                 jz      short loc_405713
.text:0040571B                 cmp     al, 5Ch ; '\'
.text:0040571D                 jz      short loc_405713
.text:0040571F                 test    al, al
.text:00405721                 jz      short loc_405727
.text:00405723                 mov     ecx, edx
.text:00405725                 jmp     short loc_405708
.text:00405727 ; ---------------------------------------------------------------------------
.text:00405727
.text:00405727 loc_405727:                             ; CODE XREF: sub_4056E0+41↑j
.text:00405727                 movzx   eax, byte ptr [ecx]
.text:0040572A                 cmp     al, 2Fh ; '/'
.text:0040572C                 jz      short loc_405732
.text:0040572E                 cmp     al, 5Ch ; '\'
.text:00405730                 jnz     short loc_405710
.text:00405732
.text:00405732 loc_405732:                             ; CODE XREF: sub_4056E0+4C↑j
.text:00405732                 lea     ecx, [edx-1]
.text:00405735                 jmp     short loc_405710
.text:00405737 ; ---------------------------------------------------------------------------
.text:00405737
.text:00405737 loc_405737:                             ; CODE XREF: sub_4056E0+F↑j
.text:00405737                 add     ecx, 2
.text:0040573A                 movzx   eax, byte ptr [ecx]
.text:0040573D                 jmp     short loc_4056F1
.text:0040573D sub_4056E0      endp
.text:0040573D
.text:0040573D ; ---------------------------------------------------------------------------
.text:0040573F                 align 10h
.text:00405740
.text:00405740 ; =============== S U B R O U T I N E =======================================
.text:00405740
.text:00405740
.text:00405740 ; int __cdecl sub_405740(char *)
.text:00405740 sub_405740      proc near               ; CODE XREF: sub_403290+37↑p
.text:00405740                                         ; sub_403290+45↑p ...
.text:00405740
.text:00405740 Str             = dword ptr -0Ch
.text:00405740 arg_0           = dword ptr  4
.text:00405740
.text:00405740                 push    ebx
.text:00405741                 sub     esp, 8
.text:00405744                 mov     ebx, [esp+0Ch+arg_0]
.text:00405748                 mov     [esp+0Ch+Str], ebx ; Str
.text:0040574B                 call    strlen
.text:00405750                 cmp     eax, 1
.text:00405753                 jbe     short loc_405770
.text:00405755                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040575A                 cmp     dl, 2Fh ; '/'
.text:0040575D                 jz      short loc_405775
.text:0040575F                 cmp     dl, 5Ch ; '\'
.text:00405762                 jz      short loc_405775
.text:00405764                 lea     esi, [esi+0]
.text:0040576A                 lea     edi, [edi+0]
.text:00405770
.text:00405770 loc_405770:                             ; CODE XREF: sub_405740+13↑j
.text:00405770                                         ; sub_405740+39↓j ...
.text:00405770                 add     esp, 8
.text:00405773                 pop     ebx
.text:00405774                 retn
.text:00405775 ; ---------------------------------------------------------------------------
.text:00405775
.text:00405775 loc_405775:                             ; CODE XREF: sub_405740+1D↑j
.text:00405775                                         ; sub_405740+22↑j ...
.text:00405775                 dec     eax
.text:00405776                 cmp     eax, 1
.text:00405779                 jbe     short loc_405770
.text:0040577B                 movzx   edx, byte ptr [eax+ebx-1]
.text:00405780                 cmp     dl, 2Fh ; '/'
.text:00405783                 jz      short loc_405775
.text:00405785                 cmp     dl, 5Ch ; '\'
.text:00405788                 jz      short loc_405775
.text:0040578A                 jmp     short loc_405770
.text:0040578A sub_405740      endp
.text:0040578A
.text:0040578A ; ---------------------------------------------------------------------------
.text:0040578C                 align 10h
.text:00405790                 push    esi
.text:00405791                 push    ebx
.text:00405792                 sub     esp, 4
.text:00405795                 mov     ebx, [esp+10h]
.text:00405799                 cmp     byte ptr [ebx], 0
.text:0040579C                 jz      short loc_4057A4
.text:0040579E                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:004057A2                 jz      short loc_4057F6
.text:004057A4
.text:004057A4 loc_4057A4:                             ; CODE XREF: .text:0040579C↑j
.text:004057A4                 xor     esi, esi
.text:004057A6
.text:004057A6 loc_4057A6:                             ; CODE XREF: .text:004057FB↓j
.text:004057A6                 mov     [esp], ebx
.text:004057A9                 call    sub_4056E0
.text:004057AE                 sub     eax, ebx
.text:004057B0                 cmp     esi, eax
.text:004057B2                 jnb     short loc_4057D6
.text:004057B4                 lea     esi, [esi+0]
.text:004057BA                 lea     edi, [edi+0]
.text:004057C0
.text:004057C0 loc_4057C0:                             ; CODE XREF: .text:004057D4↓j
.text:004057C0                 movzx   edx, byte ptr [eax+ebx-1]
.text:004057C5                 cmp     dl, 2Fh ; '/'
.text:004057C8                 jz      short loc_4057D1
.text:004057CA                 cmp     dl, 5Ch ; '\'
.text:004057CD                 mov     ecx, eax
.text:004057CF                 jnz     short loc_4057E9
.text:004057D1
.text:004057D1 loc_4057D1:                             ; CODE XREF: .text:004057C8↑j
.text:004057D1                 dec     eax
.text:004057D2                 cmp     esi, eax
.text:004057D4                 jb      short loc_4057C0
.text:004057D6
.text:004057D6 loc_4057D6:                             ; CODE XREF: .text:004057B2↑j
.text:004057D6                 movzx   edx, byte ptr [esi+ebx]
.text:004057DA                 xor     eax, eax
.text:004057DC                 cmp     dl, 2Fh ; '/'
.text:004057DF                 jz      short loc_4057EF
.text:004057E1                 cmp     dl, 5Ch ; '\'
.text:004057E4                 jz      short loc_4057EF
.text:004057E6
.text:004057E6 loc_4057E6:                             ; CODE XREF: .text:004057F4↓j
.text:004057E6                 lea     ecx, [eax+esi]
.text:004057E9
.text:004057E9 loc_4057E9:                             ; CODE XREF: .text:004057CF↑j
.text:004057E9                 pop     edx
.text:004057EA                 mov     eax, ecx
.text:004057EC                 pop     ebx
.text:004057ED                 pop     esi
.text:004057EE                 retn
.text:004057EF ; ---------------------------------------------------------------------------
.text:004057EF
.text:004057EF loc_4057EF:                             ; CODE XREF: .text:004057DF↑j
.text:004057EF                                         ; .text:004057E4↑j
.text:004057EF                 mov     eax, 1
.text:004057F4                 jmp     short loc_4057E6
.text:004057F6 ; ---------------------------------------------------------------------------
.text:004057F6
.text:004057F6 loc_4057F6:                             ; CODE XREF: .text:004057A2↑j
.text:004057F6                 mov     esi, 2
.text:004057FB                 jmp     short loc_4057A6
.text:004057FB ; ---------------------------------------------------------------------------
.text:004057FD                 align 10h
.text:00405800
.text:00405800 ; =============== S U B R O U T I N E =======================================
.text:00405800
.text:00405800
.text:00405800 ; int __cdecl sub_405800(void *)
.text:00405800 sub_405800      proc near               ; CODE XREF: sub_403290+C8↑p
.text:00405800                                         ; sub_403290+DB↑p
.text:00405800
.text:00405800 var_2C          = dword ptr -2Ch
.text:00405800 Src             = dword ptr -28h
.text:00405800 Size            = dword ptr -24h
.text:00405800 var_11          = byte ptr -11h
.text:00405800 arg_0           = dword ptr  4
.text:00405800
.text:00405800                 push    ebp
.text:00405801                 push    edi
.text:00405802                 push    esi
.text:00405803                 push    ebx
.text:00405804                 sub     esp, 1Ch
.text:00405807                 mov     edi, [esp+2Ch+arg_0]
.text:0040580B                 cmp     byte ptr [edi], 0
.text:0040580E                 jz      short loc_40581A
.text:00405810                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00405814                 jz      loc_4058B7
.text:0040581A
.text:0040581A loc_40581A:                             ; CODE XREF: sub_405800+E↑j
.text:0040581A                 xor     esi, esi
.text:0040581C
.text:0040581C loc_40581C:                             ; CODE XREF: sub_405800+BC↓j
.text:0040581C                 mov     [esp+2Ch+var_2C], edi
.text:0040581F                 call    sub_4056E0
.text:00405824                 sub     eax, edi
.text:00405826                 cmp     esi, eax
.text:00405828                 jnb     short loc_405846
.text:0040582A                 lea     esi, [esi+0]
.text:00405830
.text:00405830 loc_405830:                             ; CODE XREF: sub_405800+44↓j
.text:00405830                 movzx   edx, byte ptr [eax+edi-1]
.text:00405835                 cmp     dl, 2Fh ; '/'
.text:00405838                 jz      short loc_405841
.text:0040583A                 cmp     dl, 5Ch ; '\'
.text:0040583D                 mov     ebx, eax
.text:0040583F                 jnz     short loc_405857
.text:00405841
.text:00405841 loc_405841:                             ; CODE XREF: sub_405800+38↑j
.text:00405841                 dec     eax
.text:00405842                 cmp     esi, eax
.text:00405844                 jb      short loc_405830
.text:00405846
.text:00405846 loc_405846:                             ; CODE XREF: sub_405800+28↑j
.text:00405846                 movzx   eax, byte ptr [esi+edi]
.text:0040584A                 xor     edx, edx
.text:0040584C                 cmp     al, 2Fh ; '/'
.text:0040584E                 jz      short loc_4058B0
.text:00405850                 cmp     al, 5Ch ; '\'
.text:00405852                 jz      short loc_4058B0
.text:00405854
.text:00405854 loc_405854:                             ; CODE XREF: sub_405800+B5↓j
.text:00405854                 lea     ebx, [edx+esi]
.text:00405857
.text:00405857 loc_405857:                             ; CODE XREF: sub_405800+3F↑j
.text:00405857                 cmp     byte ptr [edi], 0
.text:0040585A                 mov     ebp, ebx
.text:0040585C                 jz      short loc_405864
.text:0040585E                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00405862                 jz      short loc_4058AB
.text:00405864
.text:00405864 loc_405864:                             ; CODE XREF: sub_405800+5C↑j
.text:00405864                 test    ebx, ebx
.text:00405866
.text:00405866 loc_405866:                             ; CODE XREF: sub_405800+AE↓j
.text:00405866                 setz    [esp+2Ch+var_11]
.text:0040586B                 movzx   ecx, [esp+2Ch+var_11]
.text:00405870                 lea     edx, [ecx+ebx+1]
.text:00405874                 mov     [esp+2Ch+var_2C], edx ; size_t
.text:00405877                 call    sub_404B90
.text:0040587C                 mov     [esp+2Ch+var_2C], eax ; void *
.text:0040587F                 mov     esi, eax
.text:00405881                 mov     [esp+2Ch+Size], ebx ; Size
.text:00405885                 mov     [esp+2Ch+Src], edi ; Src
.text:00405889                 call    memcpy
.text:0040588E                 cmp     [esp+2Ch+var_11], 0
.text:00405893                 jz      short loc_40589C
.text:00405895                 mov     byte ptr [ebx+esi], 2Eh ; '.'
.text:00405899                 lea     ebp, [ebx+1]
.text:0040589C
.text:0040589C loc_40589C:                             ; CODE XREF: sub_405800+93↑j
.text:0040589C                 mov     byte ptr [ebp+esi+0], 0
.text:004058A1                 mov     eax, esi
.text:004058A3                 add     esp, 1Ch
.text:004058A6                 pop     ebx
.text:004058A7                 pop     esi
.text:004058A8                 pop     edi
.text:004058A9                 pop     ebp
.text:004058AA                 retn
.text:004058AB ; ---------------------------------------------------------------------------
.text:004058AB
.text:004058AB loc_4058AB:                             ; CODE XREF: sub_405800+62↑j
.text:004058AB                 cmp     ebx, 2
.text:004058AE                 jmp     short loc_405866
.text:004058B0 ; ---------------------------------------------------------------------------
.text:004058B0
.text:004058B0 loc_4058B0:                             ; CODE XREF: sub_405800+4E↑j
.text:004058B0                                         ; sub_405800+52↑j
.text:004058B0                 mov     edx, 1
.text:004058B5                 jmp     short loc_405854
.text:004058B7 ; ---------------------------------------------------------------------------
.text:004058B7
.text:004058B7 loc_4058B7:                             ; CODE XREF: sub_405800+14↑j
.text:004058B7                 mov     esi, 2
.text:004058BC                 jmp     loc_40581C
.text:004058BC sub_405800      endp
.text:004058BC
.text:004058BC ; ---------------------------------------------------------------------------
.text:004058C1                 align 10h
.text:004058D0
.text:004058D0 ; =============== S U B R O U T I N E =======================================
.text:004058D0
.text:004058D0
.text:004058D0 ; int __cdecl sub_4058D0(char *, int, int, int)
.text:004058D0 sub_4058D0      proc near               ; CODE XREF: sub_405BF0+32↓p
.text:004058D0
.text:004058D0 Str             = dword ptr -2Ch
.text:004058D0 Str2            = dword ptr -28h
.text:004058D0 MaxCount        = dword ptr -24h
.text:004058D0 var_20          = dword ptr -20h
.text:004058D0 var_19          = byte ptr -19h
.text:004058D0 var_18          = dword ptr -18h
.text:004058D0 var_14          = dword ptr -14h
.text:004058D0 arg_0           = dword ptr  4
.text:004058D0 arg_4           = dword ptr  8
.text:004058D0 arg_8           = dword ptr  0Ch
.text:004058D0 arg_C           = dword ptr  10h
.text:004058D0
.text:004058D0                 push    ebp
.text:004058D1                 push    edi
.text:004058D2                 push    esi
.text:004058D3                 push    ebx
.text:004058D4                 sub     esp, 1Ch
.text:004058D7                 xor     ebx, ebx
.text:004058D9                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:004058E1                 mov     edx, [esp+2Ch+arg_0]
.text:004058E5                 mov     ebp, [esp+2Ch+arg_C]
.text:004058E9                 mov     [esp+2Ch+var_19], 0
.text:004058EE                 mov     [esp+2Ch+Str], edx ; Str
.text:004058F1                 call    strlen
.text:004058F6                 mov     [esp+2Ch+var_14], eax
.text:004058FA                 mov     ecx, [esp+2Ch+arg_4]
.text:004058FE                 mov     eax, [ecx]
.text:00405900                 test    eax, eax
.text:00405902                 jz      short loc_405948
.text:00405904                 mov     [esp+2Ch+var_20], 0
.text:0040590C                 lea     esi, [esi+0]
.text:00405910
.text:00405910 loc_405910:                             ; CODE XREF: sub_4058D0+6A↓j
.text:00405910                 mov     [esp+2Ch+Str], eax ; Str1
.text:00405913                 mov     esi, [esp+2Ch+var_14]
.text:00405917                 mov     ecx, [esp+2Ch+arg_0]
.text:0040591B                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:0040591F                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:00405923                 call    strncmp
.text:00405928                 test    eax, eax
.text:0040592A                 jz      short loc_405956
.text:0040592C
.text:0040592C loc_40592C:                             ; CODE XREF: sub_4058D0+CA↓j
.text:0040592C                                         ; sub_4058D0+D1↓j ...
.text:0040592C                 add     [esp+2Ch+var_20], ebp
.text:00405930                 inc     ebx
.text:00405931                 mov     esi, [esp+2Ch+arg_4]
.text:00405935                 mov     eax, [esi+ebx*4]
.text:00405938                 test    eax, eax
.text:0040593A                 jnz     short loc_405910
.text:0040593C                 cmp     [esp+2Ch+var_19], 0
.text:00405941                 mov     edx, 0FFFFFFFEh
.text:00405946                 jnz     short loc_40594C
.text:00405948
.text:00405948 loc_405948:                             ; CODE XREF: sub_4058D0+32↑j
.text:00405948                 mov     edx, [esp+2Ch+var_18]
.text:0040594C
.text:0040594C loc_40594C:                             ; CODE XREF: sub_4058D0+76↑j
.text:0040594C                                         ; sub_4058D0+9B↓j
.text:0040594C                 add     esp, 1Ch
.text:0040594F                 mov     eax, edx
.text:00405951                 pop     ebx
.text:00405952                 pop     esi
.text:00405953                 pop     edi
.text:00405954                 pop     ebp
.text:00405955                 retn
.text:00405956 ; ---------------------------------------------------------------------------
.text:00405956
.text:00405956 loc_405956:                             ; CODE XREF: sub_4058D0+5A↑j
.text:00405956                 mov     eax, [esp+2Ch+arg_4]
.text:0040595A                 mov     edi, [eax+ebx*4]
.text:0040595D                 mov     [esp+2Ch+Str], edi ; Str
.text:00405960                 call    strlen
.text:00405965                 cmp     eax, [esp+2Ch+var_14]
.text:00405969                 mov     edx, ebx
.text:0040596B                 jz      short loc_40594C
.text:0040596D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00405972                 jz      short loc_4059A3
.text:00405974                 mov     ecx, [esp+2Ch+arg_8]
.text:00405978                 test    ecx, ecx
.text:0040597A                 jz      short loc_40599C
.text:0040597C                 cld
.text:0040597D                 mov     edi, [esp+2Ch+var_18]
.text:00405981                 mov     ecx, ebp
.text:00405983                 mov     esi, [esp+2Ch+arg_8]
.text:00405987                 mov     edx, [esp+2Ch+var_20]
.text:0040598B                 imul    edi, ebp
.text:0040598E                 add     esi, edi
.text:00405990                 mov     edi, [esp+2Ch+arg_8]
.text:00405994                 add     edi, edx
.text:00405996                 cmp     ebp, ebp
.text:00405998                 repe cmpsb
.text:0040599A                 jz      short loc_40592C
.text:0040599C
.text:0040599C loc_40599C:                             ; CODE XREF: sub_4058D0+AA↑j
.text:0040599C                 mov     [esp+2Ch+var_19], 1
.text:004059A1                 jmp     short loc_40592C
.text:004059A3 ; ---------------------------------------------------------------------------
.text:004059A3
.text:004059A3 loc_4059A3:                             ; CODE XREF: sub_4058D0+A2↑j
.text:004059A3                 mov     [esp+2Ch+var_18], ebx
.text:004059A7                 jmp     short loc_40592C
.text:004059A7 sub_4058D0      endp
.text:004059A7
.text:004059A7 ; ---------------------------------------------------------------------------
.text:004059A9 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:004059A9                                         ; DATA XREF: .text:00405A02↓o
.text:004059A9                                         ; sub_405BF0+5A↓o
.text:004059C6 aInvalidArgumen db 'invalid argument %s for %s',0
.text:004059C6                                         ; DATA XREF: .text:loc_405A70↓o
.text:004059C6                                         ; sub_405BF0:loc_405DE6↓o
.text:004059E1 ; ---------------------------------------------------------------------------
.text:004059E1                 jmp     short loc_4059F0
.text:004059E1 ; ---------------------------------------------------------------------------
.text:004059E3                 align 10h
.text:004059F0
.text:004059F0 loc_4059F0:                             ; CODE XREF: .text:004059E1↑j
.text:004059F0                 sub     esp, 1Ch
.text:004059F3                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:004059F8                 mov     [esp+14h], ebx
.text:004059FC                 mov     [esp+18h], esi
.text:00405A00                 jz      short loc_405A70
.text:00405A02                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00405A09
.text:00405A09 loc_405A09:                             ; CODE XREF: .text:00405A77↓j
.text:00405A09                 call    ds:libintl_gettext
.text:00405A0F                 mov     dword ptr [esp], 1
.text:00405A16                 mov     edx, [esp+20h]
.text:00405A1A                 mov     esi, eax
.text:00405A1C                 mov     [esp+4], edx
.text:00405A20                 call    sub_405640
.text:00405A25                 mov     dword ptr [esp+4], 5
.text:00405A2D                 mov     edx, [esp+24h]
.text:00405A31                 mov     ebx, eax
.text:00405A33                 mov     dword ptr [esp], 0
.text:00405A3A                 mov     [esp+8], edx
.text:00405A3E                 call    sub_406CA0
.text:00405A43                 mov     [esp+0Ch], eax
.text:00405A47                 mov     [esp+10h], ebx
.text:00405A4B                 mov     [esp+8], esi
.text:00405A4F                 mov     dword ptr [esp+4], 0
.text:00405A57                 mov     dword ptr [esp], 0
.text:00405A5E                 call    sub_40E040
.text:00405A63                 mov     ebx, [esp+14h]
.text:00405A67                 mov     esi, [esp+18h]
.text:00405A6B                 add     esp, 1Ch
.text:00405A6E                 retn
.text:00405A6E ; ---------------------------------------------------------------------------
.text:00405A6F                 align 10h
.text:00405A70
.text:00405A70 loc_405A70:                             ; CODE XREF: .text:00405A00↑j
.text:00405A70                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00405A77                 jmp     short loc_405A09
.text:00405A77 ; ---------------------------------------------------------------------------
.text:00405A79 aValidArguments db 'Valid arguments are:',0
.text:00405A79                                         ; DATA XREF: .text:00405AC3↓o
.text:00405A79                                         ; sub_405BF0+CB↓o
.text:00405A8E ; const char aS[]
.text:00405A8E aS              db 0Ah                  ; DATA XREF: .text:00405B3D↓o
.text:00405A8E                                         ; sub_405BF0:loc_405D28↓o
.text:00405A8E                 db '  - `%s',27h,0
.text:00405A98 ; const char aS_0[]
.text:00405A98 aS_0            db ', `%s',27h,0        ; DATA XREF: .text:00405BCA↓o
.text:00405A98                                         ; sub_405BF0:loc_405DC0↓o
.text:00405A9F                 align 10h
.text:00405AA0                 push    ebp
.text:00405AA1                 push    edi
.text:00405AA2                 push    esi
.text:00405AA3                 push    ebx
.text:00405AA4                 sub     esp, 2Ch
.text:00405AA7                 mov     ecx, [esp+40h]
.text:00405AAB                 mov     dword ptr [esp+1Ch], 0
.text:00405AB3                 mov     eax, [esp+44h]
.text:00405AB7                 mov     ebp, [esp+48h]
.text:00405ABB                 mov     [esp+28h], ecx
.text:00405ABF                 mov     [esp+24h], eax
.text:00405AC3                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:00405ACA                 call    ds:libintl_gettext
.text:00405AD0                 mov     edx, ds:_iob
.text:00405AD6                 add     edx, 40h ; '@'
.text:00405AD9                 mov     [esp], edx
.text:00405ADC                 mov     [esp+4], eax
.text:00405AE0                 call    fprintf
.text:00405AE5                 mov     dword ptr [esp+20h], 0
.text:00405AED                 mov     edx, [esp+28h]
.text:00405AF1                 mov     eax, [edx]
.text:00405AF3                 test    eax, eax
.text:00405AF5                 jz      short loc_405B75
.text:00405AF7                 mov     dword ptr [esp+14h], 0
.text:00405AFF                 mov     esi, [esp+24h]
.text:00405B03                 mov     ebx, eax
.text:00405B05                 mov     [esp+18h], esi
.text:00405B09                 lea     esi, [esi+0]
.text:00405B10
.text:00405B10 loc_405B10:                             ; CODE XREF: .text:00405B73↓j
.text:00405B10                 mov     edi, [esp+20h]
.text:00405B14                 test    edi, edi
.text:00405B16                 jz      short loc_405B33
.text:00405B18                 cld
.text:00405B19                 mov     edi, [esp+24h]
.text:00405B1D                 mov     ecx, ebp
.text:00405B1F                 mov     edx, [esp+14h]
.text:00405B23                 mov     esi, [esp+1Ch]
.text:00405B27                 add     edi, edx
.text:00405B29                 cmp     ebp, ebp
.text:00405B2B                 repe cmpsb
.text:00405B2D                 jz      loc_405BC0
.text:00405B33
.text:00405B33 loc_405B33:                             ; CODE XREF: .text:00405B16↑j
.text:00405B33                 mov     [esp+8], ebx
.text:00405B37                 mov     ecx, ds:_iob
.text:00405B3D                 mov     dword ptr [esp+4], offset aS ; "\n  - `%s'"
.text:00405B45                 add     ecx, 40h ; '@'
.text:00405B48                 mov     [esp], ecx
.text:00405B4B                 call    fprintf
.text:00405B50                 mov     ebx, [esp+18h]
.text:00405B54                 mov     [esp+1Ch], ebx
.text:00405B58
.text:00405B58 loc_405B58:                             ; CODE XREF: .text:00405BDD↓j
.text:00405B58                 inc     dword ptr [esp+20h]
.text:00405B5C                 mov     eax, [esp+28h]
.text:00405B60                 add     [esp+14h], ebp
.text:00405B64                 mov     edx, [esp+20h]
.text:00405B68                 add     [esp+18h], ebp
.text:00405B6C                 mov     edi, [eax+edx*4]
.text:00405B6F                 test    edi, edi
.text:00405B71                 mov     ebx, edi
.text:00405B73                 jnz     short loc_405B10
.text:00405B75
.text:00405B75 loc_405B75:                             ; CODE XREF: .text:00405AF5↑j
.text:00405B75                 mov     ebx, ds:_iob
.text:00405B7B                 mov     ebp, [ebx+44h]
.text:00405B7E                 dec     ebp
.text:00405B7F                 mov     [ebx+44h], ebp
.text:00405B82                 test    ebp, ebp
.text:00405B84                 js      short loc_405B9D
.text:00405B86                 mov     ecx, ds:_iob
.text:00405B8C                 mov     esi, [ecx+40h]
.text:00405B8F                 mov     byte ptr [esi], 0Ah
.text:00405B92                 inc     dword ptr [ecx+40h]
.text:00405B95                 add     esp, 2Ch
.text:00405B98                 pop     ebx
.text:00405B99                 pop     esi
.text:00405B9A                 pop     edi
.text:00405B9B                 pop     ebp
.text:00405B9C                 retn
.text:00405B9D ; ---------------------------------------------------------------------------
.text:00405B9D
.text:00405B9D loc_405B9D:                             ; CODE XREF: .text:00405B84↑j
.text:00405B9D                 mov     dword ptr [esp+40h], 0Ah
.text:00405BA5                 mov     edi, ds:_iob
.text:00405BAB                 add     edi, 40h ; '@'
.text:00405BAE                 mov     [esp+44h], edi
.text:00405BB2                 add     esp, 2Ch
.text:00405BB5                 pop     ebx
.text:00405BB6                 pop     esi
.text:00405BB7                 pop     edi
.text:00405BB8                 pop     ebp
.text:00405BB9                 jmp     _flsbuf
.text:00405BB9 ; ---------------------------------------------------------------------------
.text:00405BBE                 align 10h
.text:00405BC0
.text:00405BC0 loc_405BC0:                             ; CODE XREF: .text:00405B2D↑j
.text:00405BC0                 mov     [esp+8], ebx
.text:00405BC4                 mov     esi, ds:_iob
.text:00405BCA                 mov     dword ptr [esp+4], offset aS_0 ; ", `%s'"
.text:00405BD2                 add     esi, 40h ; '@'
.text:00405BD5                 mov     [esp], esi
.text:00405BD8                 call    fprintf
.text:00405BDD                 jmp     loc_405B58
.text:00405BDD ; ---------------------------------------------------------------------------
.text:00405BE2                 align 10h
.text:00405BF0
.text:00405BF0 ; =============== S U B R O U T I N E =======================================
.text:00405BF0
.text:00405BF0
.text:00405BF0 ; int __cdecl sub_405BF0(char *, char *, int, int, int, int)
.text:00405BF0 sub_405BF0      proc near               ; CODE XREF: .text:0040471D↑p
.text:00405BF0                                         ; sub_404750:loc_4047AD↑p
.text:00405BF0
.text:00405BF0 Stream          = dword ptr -4Ch
.text:00405BF0 Format          = dword ptr -48h
.text:00405BF0 var_44          = dword ptr -44h
.text:00405BF0 var_40          = byte ptr -40h
.text:00405BF0 var_3C          = dword ptr -3Ch
.text:00405BF0 var_2C          = dword ptr -2Ch
.text:00405BF0 var_28          = dword ptr -28h
.text:00405BF0 var_24          = dword ptr -24h
.text:00405BF0 var_20          = dword ptr -20h
.text:00405BF0 var_1C          = dword ptr -1Ch
.text:00405BF0 var_18          = dword ptr -18h
.text:00405BF0 var_14          = dword ptr -14h
.text:00405BF0 var_10          = dword ptr -10h
.text:00405BF0 var_C           = dword ptr -0Ch
.text:00405BF0 var_8           = dword ptr -8
.text:00405BF0 var_4           = dword ptr -4
.text:00405BF0 arg_0           = dword ptr  4
.text:00405BF0 arg_4           = dword ptr  8
.text:00405BF0 arg_8           = dword ptr  0Ch
.text:00405BF0 arg_C           = dword ptr  10h
.text:00405BF0 arg_10          = dword ptr  14h
.text:00405BF0 arg_14          = dword ptr  18h
.text:00405BF0
.text:00405BF0                 sub     esp, 4Ch
.text:00405BF3                 mov     edx, [esp+4Ch+arg_10]
.text:00405BF7                 mov     [esp+4Ch+var_10], ebx
.text:00405BFB                 mov     ebx, [esp+4Ch+arg_C]
.text:00405BFF                 mov     [esp+4Ch+var_C], esi
.text:00405C03                 mov     esi, [esp+4Ch+arg_4]
.text:00405C07                 mov     [esp+4Ch+var_4], ebp
.text:00405C0B                 mov     ebp, [esp+4Ch+arg_8]
.text:00405C0F                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:00405C13                 mov     [esp+4Ch+var_8], edi
.text:00405C17                 mov     [esp+4Ch+var_44], ebx ; int
.text:00405C1B                 mov     [esp+4Ch+Format], ebp ; int
.text:00405C1F                 mov     [esp+4Ch+Stream], esi ; char *
.text:00405C22                 call    sub_4058D0
.text:00405C27                 test    eax, eax
.text:00405C29                 mov     edx, eax
.text:00405C2B                 js      short loc_405C43
.text:00405C2D
.text:00405C2D loc_405C2D:                             ; CODE XREF: sub_405BF0+1AA↓j
.text:00405C2D                 mov     ebx, [esp+4Ch+var_10]
.text:00405C31                 mov     eax, edx
.text:00405C33                 mov     esi, [esp+4Ch+var_C]
.text:00405C37                 mov     edi, [esp+4Ch+var_8]
.text:00405C3B                 mov     ebp, [esp+4Ch+var_4]
.text:00405C3F                 add     esp, 4Ch
.text:00405C42                 retn
.text:00405C43 ; ---------------------------------------------------------------------------
.text:00405C43
.text:00405C43 loc_405C43:                             ; CODE XREF: sub_405BF0+3B↑j
.text:00405C43                 inc     eax
.text:00405C44                 jz      loc_405DE6
.text:00405C4A                 mov     [esp+4Ch+Stream], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00405C51
.text:00405C51 loc_405C51:                             ; CODE XREF: sub_405BF0+1FD↓j
.text:00405C51                 call    ds:libintl_gettext
.text:00405C57                 mov     [esp+4Ch+Stream], 1 ; int
.text:00405C5E                 mov     edi, [esp+4Ch+arg_0]
.text:00405C62                 mov     [esp+4Ch+var_14], eax
.text:00405C66                 mov     [esp+4Ch+Format], edi ; char *
.text:00405C6A                 call    sub_405640
.text:00405C6F                 mov     [esp+4Ch+var_18], eax
.text:00405C73                 mov     [esp+4Ch+var_44], esi ; char *
.text:00405C77                 mov     [esp+4Ch+Format], 5 ; int
.text:00405C7F                 mov     [esp+4Ch+Stream], 0 ; int
.text:00405C86                 call    sub_406CA0
.text:00405C8B                 mov     dword ptr [esp+4Ch+var_40], eax ; char
.text:00405C8F                 mov     ecx, [esp+4Ch+var_18]
.text:00405C93                 mov     eax, [esp+4Ch+var_14]
.text:00405C97                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:00405C9F                 mov     [esp+4Ch+var_3C], ecx
.text:00405CA3                 mov     [esp+4Ch+var_44], eax ; char *
.text:00405CA7                 mov     [esp+4Ch+Stream], 0 ; Code
.text:00405CAE                 call    sub_40E040
.text:00405CB3                 mov     [esp+4Ch+var_20], 0
.text:00405CBB                 mov     [esp+4Ch+Stream], offset aValidArguments ; "Valid arguments are:"
.text:00405CC2                 call    ds:libintl_gettext
.text:00405CC8                 mov     edx, ds:_iob
.text:00405CCE                 add     edx, 40h ; '@'
.text:00405CD1                 mov     [esp+4Ch+Format], eax ; Format
.text:00405CD5                 mov     [esp+4Ch+Stream], edx ; Stream
.text:00405CD8                 call    fprintf
.text:00405CDD                 mov     [esp+4Ch+var_1C], 0
.text:00405CE5                 mov     eax, [ebp+0]
.text:00405CE8                 test    eax, eax
.text:00405CEA                 jz      loc_405D71
.text:00405CF0                 mov     [esp+4Ch+var_24], eax
.text:00405CF4                 mov     [esp+4Ch+var_28], ebx
.text:00405CF8                 mov     [esp+4Ch+var_2C], 0
.text:00405D00
.text:00405D00 loc_405D00:                             ; CODE XREF: sub_405BF0+17F↓j
.text:00405D00                 mov     esi, [esp+4Ch+var_1C]
.text:00405D04                 test    esi, esi
.text:00405D06                 jz      short loc_405D28
.text:00405D08                 cld
.text:00405D09                 mov     eax, [esp+4Ch+var_2C]
.text:00405D0D                 mov     edx, [esp+4Ch+arg_10]
.text:00405D11                 mov     esi, [esp+4Ch+var_20]
.text:00405D15                 lea     ecx, [eax+ebx]
.text:00405D18                 mov     edi, ecx
.text:00405D1A                 mov     ecx, [esp+4Ch+arg_10]
.text:00405D1E                 cmp     edx, edx
.text:00405D20                 repe cmpsb
.text:00405D22                 jz      loc_405DC0
.text:00405D28
.text:00405D28 loc_405D28:                             ; CODE XREF: sub_405BF0+116↑j
.text:00405D28                 mov     [esp+4Ch+Format], offset aS ; "\n  - `%s'"
.text:00405D30                 mov     esi, ds:_iob
.text:00405D36                 mov     ecx, [esp+4Ch+var_24]
.text:00405D3A                 add     esi, 40h ; '@'
.text:00405D3D                 mov     [esp+4Ch+var_44], ecx
.text:00405D41                 mov     [esp+4Ch+Stream], esi ; Stream
.text:00405D44                 call    fprintf
.text:00405D49                 mov     edi, [esp+4Ch+var_28]
.text:00405D4D                 mov     [esp+4Ch+var_20], edi
.text:00405D51
.text:00405D51 loc_405D51:                             ; CODE XREF: sub_405BF0+1F1↓j
.text:00405D51                 inc     [esp+4Ch+var_1C]
.text:00405D55                 mov     ecx, [esp+4Ch+arg_10]
.text:00405D59                 add     [esp+4Ch+var_2C], ecx
.text:00405D5D                 mov     esi, [esp+4Ch+var_1C]
.text:00405D61                 add     [esp+4Ch+var_28], ecx
.text:00405D65                 mov     edi, [ebp+esi*4+0]
.text:00405D69                 test    edi, edi
.text:00405D6B                 mov     [esp+4Ch+var_24], edi
.text:00405D6F                 jnz     short loc_405D00
.text:00405D71
.text:00405D71 loc_405D71:                             ; CODE XREF: sub_405BF0+FA↑j
.text:00405D71                 mov     ebp, ds:_iob
.text:00405D77                 mov     ebx, [ebp+44h]
.text:00405D7A                 dec     ebx
.text:00405D7B                 mov     [ebp+44h], ebx
.text:00405D7E                 test    ebx, ebx
.text:00405D80                 js      short loc_405D9F
.text:00405D82                 mov     edi, ds:_iob
.text:00405D88                 mov     eax, [edi+40h]
.text:00405D8B                 mov     byte ptr [eax], 0Ah
.text:00405D8E                 inc     dword ptr [edi+40h]
.text:00405D91
.text:00405D91 loc_405D91:                             ; CODE XREF: sub_405BF0+1C8↓j
.text:00405D91                 call    [esp+4Ch+arg_14]
.text:00405D95                 mov     edx, 0FFFFFFFFh
.text:00405D9A                 jmp     loc_405C2D
.text:00405D9F ; ---------------------------------------------------------------------------
.text:00405D9F
.text:00405D9F loc_405D9F:                             ; CODE XREF: sub_405BF0+190↑j
.text:00405D9F                 mov     [esp+4Ch+Stream], 0Ah ; Ch
.text:00405DA6                 mov     edx, ds:_iob
.text:00405DAC                 add     edx, 40h ; '@'
.text:00405DAF                 mov     [esp+4Ch+Format], edx ; File
.text:00405DB3                 call    _flsbuf
.text:00405DB8                 jmp     short loc_405D91
.text:00405DB8 ; ---------------------------------------------------------------------------
.text:00405DBA                 align 10h
.text:00405DC0
.text:00405DC0 loc_405DC0:                             ; CODE XREF: sub_405BF0+132↑j
.text:00405DC0                 mov     [esp+4Ch+Format], offset aS_0 ; ", `%s'"
.text:00405DC8                 mov     edx, ds:_iob
.text:00405DCE                 mov     eax, [esp+4Ch+var_24]
.text:00405DD2                 add     edx, 40h ; '@'
.text:00405DD5                 mov     [esp+4Ch+var_44], eax
.text:00405DD9                 mov     [esp+4Ch+Stream], edx ; Stream
.text:00405DDC                 call    fprintf
.text:00405DE1                 jmp     loc_405D51
.text:00405DE6 ; ---------------------------------------------------------------------------
.text:00405DE6
.text:00405DE6 loc_405DE6:                             ; CODE XREF: sub_405BF0+54↑j
.text:00405DE6                 mov     [esp+4Ch+Stream], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00405DED                 jmp     loc_405C51
.text:00405DED sub_405BF0      endp
.text:00405DED
.text:00405DED ; ---------------------------------------------------------------------------
.text:00405DF2                 align 10h
.text:00405E00                 push    ebp
.text:00405E01                 push    edi
.text:00405E02                 push    esi
.text:00405E03                 push    ebx
.text:00405E04                 sub     esp, 4
.text:00405E07                 mov     ecx, [esp+1Ch]
.text:00405E0B                 mov     dword ptr [esp], 0
.text:00405E12                 mov     ebx, [esp+24h]
.text:00405E16                 mov     edx, [ecx]
.text:00405E18                 test    edx, edx
.text:00405E1A                 jz      short loc_405E45
.text:00405E1C                 cld
.text:00405E1D                 xor     ebp, ebp
.text:00405E1F                 nop
.text:00405E20
.text:00405E20 loc_405E20:                             ; CODE XREF: .text:00405E43↓j
.text:00405E20                 mov     edi, [esp+20h]
.text:00405E24                 mov     ecx, ebx
.text:00405E26                 mov     esi, [esp+18h]
.text:00405E2A                 add     edi, ebp
.text:00405E2C                 cmp     ebx, ebx
.text:00405E2E                 repe cmpsb
.text:00405E30                 jz      short loc_405E4D
.text:00405E32                 inc     dword ptr [esp]
.text:00405E35                 add     ebp, ebx
.text:00405E37                 mov     eax, [esp+1Ch]
.text:00405E3B                 mov     ecx, [esp]
.text:00405E3E                 mov     edi, [eax+ecx*4]
.text:00405E41                 test    edi, edi
.text:00405E43                 jnz     short loc_405E20
.text:00405E45
.text:00405E45 loc_405E45:                             ; CODE XREF: .text:00405E1A↑j
.text:00405E45                 xor     eax, eax
.text:00405E47
.text:00405E47 loc_405E47:                             ; CODE XREF: .text:00405E57↓j
.text:00405E47                 pop     ebp
.text:00405E48                 pop     ebx
.text:00405E49                 pop     esi
.text:00405E4A                 pop     edi
.text:00405E4B                 pop     ebp
.text:00405E4C                 retn
.text:00405E4D ; ---------------------------------------------------------------------------
.text:00405E4D
.text:00405E4D loc_405E4D:                             ; CODE XREF: .text:00405E30↑j
.text:00405E4D                 mov     esi, [esp]
.text:00405E50                 mov     ebx, [esp+1Ch]
.text:00405E54                 mov     eax, [ebx+esi*4]
.text:00405E57                 jmp     short loc_405E47
.text:00405E57 ; ---------------------------------------------------------------------------
.text:00405E59                 align 10h
.text:00405E60
.text:00405E60 ; =============== S U B R O U T I N E =======================================
.text:00405E60
.text:00405E60 ; Attributes: noreturn
.text:00405E60
.text:00405E60 sub_405E60      proc near               ; DATA XREF: .data:off_418050↓o
.text:00405E60
.text:00405E60 Code            = dword ptr -0Ch
.text:00405E60
.text:00405E60                 sub     esp, 0Ch
.text:00405E63                 mov     [esp+0Ch+Code], 1 ; Code
.text:00405E6A                 call    sub_402900
.text:00405E6A sub_405E60      endp
.text:00405E6A
.text:00405E6A ; ---------------------------------------------------------------------------
.text:00405E6F                 db  83h ; ƒ
.text:00405E70                 db 0C4h ; Ä
.text:00405E71                 db  0Ch
.text:00405E72                 db 0C3h ; Ã
.text:00405E73                 align 10h
.text:00405E80 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_405EA0+3↓o
.text:00405E91 ; const char aS_1[]
.text:00405E91 aS_1            db '%s',0               ; DATA XREF: sub_405EA0+10↓o
.text:00405E94                 align 10h
.text:00405EA0
.text:00405EA0 ; =============== S U B R O U T I N E =======================================
.text:00405EA0
.text:00405EA0 ; Attributes: noreturn
.text:00405EA0
.text:00405EA0 sub_405EA0      proc near               ; CODE XREF: .text:loc_404B89↑p
.text:00405EA0                                         ; sub_404B90+24↑p ...
.text:00405EA0
.text:00405EA0 Code            = dword ptr -1Ch
.text:00405EA0 ErrorMessage    = dword ptr -18h
.text:00405EA0 var_14          = dword ptr -14h
.text:00405EA0 var_10          = byte ptr -10h
.text:00405EA0
.text:00405EA0                 sub     esp, 1Ch
.text:00405EA3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00405EAA                 call    ds:libintl_gettext
.text:00405EB0                 mov     [esp+1Ch+var_14], offset aS_1 ; "%s"
.text:00405EB8                 mov     edx, Code
.text:00405EBE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405EC6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00405ECA                 mov     [esp+1Ch+Code], edx ; Code
.text:00405ECD                 call    sub_40E040
.text:00405ED2                 call    abort
.text:00405ED2 sub_405EA0      endp
.text:00405ED2
.text:00405ED2 ; ---------------------------------------------------------------------------
.text:00405ED7                 align 10h
.text:00405EE0 aLiteral        db 'literal',0          ; DATA XREF: .text:00405F20↓o
.text:00405EE8 aShell          db 'shell',0            ; DATA XREF: .text:00405F24↓o
.text:00405EEE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00405F28↓o
.text:00405EFB aC              db 'c',0                ; DATA XREF: .text:00405F2C↓o
.text:00405EFD aEscape         db 'escape',0           ; DATA XREF: .text:00405F30↓o
.text:00405F04 aLocale         db 'locale',0           ; DATA XREF: .text:00405F34↓o
.text:00405F0B aClocale        db 'clocale',0          ; DATA XREF: .text:00405F38↓o
.text:00405F13                 align 10h
.text:00405F20                 dd offset aLiteral      ; "literal"
.text:00405F24                 dd offset aShell        ; "shell"
.text:00405F28                 dd offset aShellAlways  ; "shell-always"
.text:00405F2C                 dd offset aC            ; "c"
.text:00405F30                 dd offset aEscape       ; "escape"
.text:00405F34                 dd offset aLocale       ; "locale"
.text:00405F38                 dd offset aClocale      ; "clocale"
.text:00405F3C                 dd 2 dup(0)
.text:00405F44                 dd 1, 2, 3, 4, 5, 6
.text:00405F5C asc_405F5C:                             ; DATA XREF: sub_405F70+7E↓o
.text:00405F5C                                         ; sub_405F70+A39↓o ...
.text:00405F5C                 text "UTF-16LE", '"',27h,'`'
.text:00405F62                 align 10h
.text:00405F70
.text:00405F70 ; =============== S U B R O U T I N E =======================================
.text:00405F70
.text:00405F70
.text:00405F70 ; int __cdecl sub_405F70(int, int, char *Str, int, int, int)
.text:00405F70 sub_405F70      proc near               ; CODE XREF: sub_405F70+43A↓p
.text:00405F70                                         ; .text:00406B33↓p ...
.text:00405F70
.text:00405F70 C               = dword ptr -4Ch
.text:00405F70 Type            = dword ptr -48h
.text:00405F70 SizeInBytes     = dword ptr -44h
.text:00405F70 State           = dword ptr -40h
.text:00405F70 var_3C          = dword ptr -3Ch
.text:00405F70 var_38          = dword ptr -38h
.text:00405F70 var_34          = dword ptr -34h
.text:00405F70 var_30          = dword ptr -30h
.text:00405F70 var_29          = byte ptr -29h
.text:00405F70 var_28          = dword ptr -28h
.text:00405F70 var_22          = byte ptr -22h
.text:00405F70 var_21          = byte ptr -21h
.text:00405F70 var_20          = dword ptr -20h
.text:00405F70 var_1C          = dword ptr -1Ch
.text:00405F70 var_18          = mbstate_t ptr -18h
.text:00405F70 arg_0           = dword ptr  4
.text:00405F70 arg_4           = dword ptr  8
.text:00405F70 Str             = dword ptr  0Ch
.text:00405F70 arg_C           = dword ptr  10h
.text:00405F70 arg_10          = dword ptr  14h
.text:00405F70 arg_14          = dword ptr  18h
.text:00405F70
.text:00405F70                 push    ebp
.text:00405F71                 push    edi
.text:00405F72                 push    esi
.text:00405F73                 push    ebx
.text:00405F74                 sub     esp, 3Ch
.text:00405F77                 mov     edx, ds:__mb_cur_max
.text:00405F7D                 mov     [esp+4Ch+var_34], 0
.text:00405F85                 mov     [esp+4Ch+var_1C], 0
.text:00405F8D                 cmp     dword ptr [edx], 1
.text:00405F90                 mov     [esp+4Ch+var_20], 0
.text:00405F98                 mov     [esp+4Ch+var_21], 0
.text:00405F9D                 setz    [esp+4Ch+var_22]
.text:00405FA2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00405FA7                 ja      short def_405FAD ; jumptable 00405FAD default case, cases 0,1
.text:00405FA9                 mov     edx, [esp+4Ch+arg_10]
.text:00405FAD                 jmp     ds:jpt_405FAD[edx*4] ; switch jump
.text:00405FAD ; ---------------------------------------------------------------------------
.text:00405FB4 jpt_405FAD      dd offset def_405FAD    ; DATA XREF: sub_405F70+3D↑r
.text:00405FB4                 dd offset def_405FAD    ; jump table for switch statement
.text:00405FB4                 dd offset loc_4068F5
.text:00405FB4                 dd offset loc_405FD0
.text:00405FB4                 dd offset loc_40691B
.text:00405FB4                 dd offset loc_406925
.text:00405FB4                 dd offset loc_406925
.text:00405FD0 ; ---------------------------------------------------------------------------
.text:00405FD0
.text:00405FD0 loc_405FD0:                             ; CODE XREF: sub_405F70+3D↑j
.text:00405FD0                                         ; DATA XREF: sub_405F70:jpt_405FAD↑o
.text:00405FD0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00405FAD case 3
.text:00405FD4                 cmp     [esp+4Ch+var_34], eax
.text:00405FD8                 jnb     short loc_405FE1
.text:00405FDA                 mov     ebx, [esp+4Ch+arg_0]
.text:00405FDE                 mov     byte ptr [ebx], 22h ; '"'
.text:00405FE1
.text:00405FE1 loc_405FE1:                             ; CODE XREF: sub_405F70+68↑j
.text:00405FE1                 mov     [esp+4Ch+var_34], 1
.text:00405FE9                 mov     [esp+4Ch+var_21], 1
.text:00405FEE                 mov     [esp+4Ch+var_1C], offset asc_405F5C ; "\"'`"
.text:00405FF6
.text:00405FF6 loc_405FF6:                             ; CODE XREF: sub_405F70+9A6↓j
.text:00405FF6                 mov     [esp+4Ch+var_20], 1
.text:00405FFE
.text:00405FFE def_405FAD:                             ; CODE XREF: sub_405F70+37↑j
.text:00405FFE                                         ; sub_405F70+3D↑j ...
.text:00405FFE                 xor     ebp, ebp        ; jumptable 00405FAD default case, cases 0,1
.text:00406000
.text:00406000 loc_406000:                             ; CODE XREF: sub_405F70+3DB↓j
.text:00406000                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00406005                 jz      loc_4068E7
.text:0040600B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040600F
.text:0040600F loc_40600F:                             ; CODE XREF: sub_405F70+980↓j
.text:0040600F                 jz      loc_40687E
.text:00406015                 cmp     [esp+4Ch+var_21], 0
.text:0040601A                 jz      short loc_406060
.text:0040601C                 mov     esi, [esp+4Ch+var_20]
.text:00406020                 test    esi, esi
.text:00406022                 jz      short loc_406060
.text:00406024                 mov     ecx, [esp+4Ch+var_20]
.text:00406028                 lea     edi, [ecx+ebp]
.text:0040602B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040602F                 ja      short loc_406060
.text:00406031                 cld
.text:00406032                 mov     ebx, [esp+4Ch+Str]
.text:00406036                 mov     edi, [esp+4Ch+var_1C]
.text:0040603A                 add     ebx, ebp
.text:0040603C                 mov     esi, ebx
.text:0040603E                 cmp     ecx, ecx
.text:00406040                 repe cmpsb
.text:00406042                 jnz     short loc_406060
.text:00406044                 mov     edx, [esp+4Ch+arg_4]
.text:00406048                 cmp     [esp+4Ch+var_34], edx
.text:0040604C                 jnb     short loc_40605A
.text:0040604E                 mov     ecx, [esp+4Ch+arg_0]
.text:00406052                 mov     eax, [esp+4Ch+var_34]
.text:00406056                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040605A
.text:0040605A loc_40605A:                             ; CODE XREF: sub_405F70+DC↑j
.text:0040605A                 inc     [esp+4Ch+var_34]
.text:0040605E                 mov     esi, esi
.text:00406060
.text:00406060 loc_406060:                             ; CODE XREF: sub_405F70+AA↑j
.text:00406060                                         ; sub_405F70+B2↑j ...
.text:00406060                 mov     edi, [esp+4Ch+Str]
.text:00406064                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00406069                 movzx   eax, bl
.text:0040606C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040606F                 ja      def_406075      ; jumptable 00406075 default case, cases 1-6,14-31,64
.text:00406075                 jmp     ds:jpt_406075[eax*4] ; switch jump
.text:00406075 ; ---------------------------------------------------------------------------
.text:0040607C jpt_406075      dd offset loc_406278, offset def_406075, offset def_406075
.text:0040607C                                         ; DATA XREF: sub_405F70+105↑r
.text:0040607C                 dd offset def_406075, offset def_406075, offset def_406075 ; jump table for switch statement
.text:0040607C                 dd offset def_406075, offset loc_406350, offset loc_40636E
.text:0040607C                 dd offset loc_406372, offset loc_4063B7, offset loc_4063BB
.text:0040607C                 dd offset loc_4063BF, offset loc_4063C3, offset def_406075
.text:0040607C                 dd offset def_406075, offset def_406075, offset def_406075
.text:0040607C                 dd offset def_406075, offset def_406075, offset def_406075
.text:0040607C                 dd offset def_406075, offset def_406075, offset def_406075
.text:0040607C                 dd offset def_406075, offset def_406075, offset def_406075
.text:0040607C                 dd offset def_406075, offset def_406075, offset def_406075
.text:0040607C                 dd offset def_406075, offset def_406075, offset loc_406848
.text:0040607C                 dd offset loc_406848, offset loc_406848, offset loc_40686A
.text:0040607C                 dd offset loc_406848, offset def_406472, offset loc_406848
.text:0040607C                 dd offset loc_4063C7, offset loc_406848, offset loc_406848
.text:0040607C                 dd offset loc_406848, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset loc_406848
.text:0040607C                 dd offset loc_406848, offset loc_406848, offset loc_406848
.text:0040607C                 dd offset loc_40642C, offset def_406075, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset loc_406848, offset loc_406841
.text:0040607C                 dd offset def_406472, offset loc_406848, offset def_406472
.text:0040607C                 dd offset loc_406848, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset def_406472, offset def_406472, offset def_406472
.text:0040607C                 dd offset loc_406858, offset loc_406848, offset loc_406858
.text:0040607C                 dd offset loc_40686A
.text:00406278 ; ---------------------------------------------------------------------------
.text:00406278
.text:00406278 loc_406278:                             ; CODE XREF: sub_405F70+105↑j
.text:00406278                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:00406278                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00406075 case 0
.text:0040627D                 lea     eax, [ebp+1]
.text:00406280                 jz      loc_406330
.text:00406286                 mov     esi, [esp+4Ch+arg_4]
.text:0040628A                 cmp     [esp+4Ch+var_34], esi
.text:0040628E                 jnb     short loc_40629C
.text:00406290                 mov     eax, [esp+4Ch+arg_0]
.text:00406294                 mov     ebx, [esp+4Ch+var_34]
.text:00406298                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040629C
.text:0040629C loc_40629C:                             ; CODE XREF: sub_405F70+31E↑j
.text:0040629C                 inc     [esp+4Ch+var_34]
.text:004062A0                 mov     edx, [esp+4Ch+arg_4]
.text:004062A4                 cmp     [esp+4Ch+var_34], edx
.text:004062A8                 jnb     short loc_4062B6
.text:004062AA                 mov     edi, [esp+4Ch+arg_0]
.text:004062AE                 mov     ecx, [esp+4Ch+var_34]
.text:004062B2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004062B6
.text:004062B6 loc_4062B6:                             ; CODE XREF: sub_405F70+338↑j
.text:004062B6                 inc     [esp+4Ch+var_34]
.text:004062BA                 mov     esi, [esp+4Ch+arg_4]
.text:004062BE                 cmp     [esp+4Ch+var_34], esi
.text:004062C2                 jnb     short loc_4062D0
.text:004062C4                 mov     ebx, [esp+4Ch+arg_0]
.text:004062C8                 mov     eax, [esp+4Ch+var_34]
.text:004062CC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004062D0
.text:004062D0 loc_4062D0:                             ; CODE XREF: sub_405F70+352↑j
.text:004062D0                 inc     [esp+4Ch+var_34]
.text:004062D4                 mov     bl, 30h ; '0'
.text:004062D6                 lea     esi, [esi+0]
.text:004062D9                 lea     edi, [edi+0]
.text:004062E0
.text:004062E0 def_406472:                             ; CODE XREF: sub_405F70+105↑j
.text:004062E0                                         ; sub_405F70+463↓j ...
.text:004062E0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00406075 cases 37,43-58,65-90,93,95,97-122
.text:004062E0                                         ; jumptable 00406472 default case, cases 34-38,42-44,46,48-59
.text:004062E5                 lea     eax, [ebp+1]
.text:004062E8                 jz      short loc_406330
.text:004062EA                 mov     cl, bl
.text:004062EC                 mov     edi, [esp+4Ch+arg_14]
.text:004062F0                 mov     esi, 1
.text:004062F5                 shr     cl, 5
.text:004062F8                 movzx   edx, cl
.text:004062FB                 mov     ecx, ebx
.text:004062FD                 and     ecx, 1Fh
.text:00406300                 shl     esi, cl
.text:00406302                 test    [edi+edx*4+4], esi
.text:00406306                 jz      short loc_406322
.text:00406308
.text:00406308 loc_406308:                             ; CODE XREF: sub_405F70+3FC↓j
.text:00406308                 mov     edx, [esp+4Ch+arg_4]
.text:0040630C                 cmp     [esp+4Ch+var_34], edx
.text:00406310                 jnb     short loc_40631E
.text:00406312                 mov     edi, [esp+4Ch+arg_0]
.text:00406316                 mov     esi, [esp+4Ch+var_34]
.text:0040631A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040631E
.text:0040631E loc_40631E:                             ; CODE XREF: sub_405F70+3A0↑j
.text:0040631E                 inc     [esp+4Ch+var_34]
.text:00406322
.text:00406322 loc_406322:                             ; CODE XREF: sub_405F70+396↑j
.text:00406322                 lea     eax, [ebp+1]
.text:00406325                 lea     esi, [esi+0]
.text:00406329                 lea     edi, [edi+0]
.text:00406330
.text:00406330 loc_406330:                             ; CODE XREF: sub_405F70+310↑j
.text:00406330                                         ; sub_405F70+378↑j ...
.text:00406330                 mov     ebp, [esp+4Ch+arg_4]
.text:00406334                 cmp     [esp+4Ch+var_34], ebp
.text:00406338                 jnb     short loc_406345
.text:0040633A                 mov     edx, [esp+4Ch+arg_0]
.text:0040633E                 mov     ecx, [esp+4Ch+var_34]
.text:00406342                 mov     [ecx+edx], bl
.text:00406345
.text:00406345 loc_406345:                             ; CODE XREF: sub_405F70+3C8↑j
.text:00406345                 inc     [esp+4Ch+var_34]
.text:00406349                 mov     ebp, eax
.text:0040634B                 jmp     loc_406000
.text:00406350 ; ---------------------------------------------------------------------------
.text:00406350
.text:00406350 loc_406350:                             ; CODE XREF: sub_405F70+105↑j
.text:00406350                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:00406350                 mov     dl, 61h ; 'a'   ; jumptable 00406075 case 7
.text:00406352                 lea     esi, [esi+0]
.text:00406359                 lea     edi, [edi+0]
.text:00406360
.text:00406360 loc_406360:                             ; CODE XREF: sub_405F70+400↓j
.text:00406360                                         ; sub_405F70+409↓j ...
.text:00406360                 cmp     [esp+4Ch+var_21], 0
.text:00406365                 lea     eax, [ebp+1]
.text:00406368                 jz      short loc_406330
.text:0040636A                 mov     bl, dl
.text:0040636C                 jmp     short loc_406308
.text:0040636E ; ---------------------------------------------------------------------------
.text:0040636E
.text:0040636E loc_40636E:                             ; CODE XREF: sub_405F70+105↑j
.text:0040636E                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:0040636E                 mov     dl, 62h ; 'b'   ; jumptable 00406075 case 8
.text:00406370                 jmp     short loc_406360
.text:00406372 ; ---------------------------------------------------------------------------
.text:00406372
.text:00406372 loc_406372:                             ; CODE XREF: sub_405F70+105↑j
.text:00406372                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:00406372                 mov     dl, 74h ; 't'   ; jumptable 00406075 case 9
.text:00406374
.text:00406374 loc_406374:                             ; CODE XREF: sub_405F70+449↓j
.text:00406374                                         ; sub_405F70+455↓j ...
.text:00406374                 cmp     [esp+4Ch+arg_10], 1
.text:00406379                 jnz     short loc_406360
.text:0040637B
.text:0040637B loc_40637B:                             ; CODE XREF: sub_405F70+45C↓j
.text:0040637B                                         ; sub_405F70+4C1↓j ...
.text:0040637B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00406742 cases 91,92,94,96,124
.text:00406383                 mov     eax, [esp+4Ch+arg_14]
.text:00406387                 mov     edx, [esp+4Ch+arg_C]
.text:0040638B                 mov     ecx, [esp+4Ch+Str]
.text:0040638F                 mov     ebx, [esp+4Ch+arg_4]
.text:00406393                 mov     [esp+4Ch+var_38], eax ; int
.text:00406397                 mov     ebp, [esp+4Ch+arg_0]
.text:0040639B                 mov     [esp+4Ch+State], edx ; int
.text:0040639F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004063A3                 mov     [esp+4Ch+Type], ebx ; int
.text:004063A7                 mov     [esp+4Ch+C], ebp ; int
.text:004063AA                 call    sub_405F70
.text:004063AF
.text:004063AF loc_4063AF:                             ; CODE XREF: sub_405F70+972↓j
.text:004063AF                 add     esp, 3Ch
.text:004063B2                 pop     ebx
.text:004063B3                 pop     esi
.text:004063B4                 pop     edi
.text:004063B5                 pop     ebp
.text:004063B6                 retn
.text:004063B7 ; ---------------------------------------------------------------------------
.text:004063B7
.text:004063B7 loc_4063B7:                             ; CODE XREF: sub_405F70+105↑j
.text:004063B7                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:004063B7                 mov     dl, 6Eh ; 'n'   ; jumptable 00406075 case 10
.text:004063B9                 jmp     short loc_406374
.text:004063BB ; ---------------------------------------------------------------------------
.text:004063BB
.text:004063BB loc_4063BB:                             ; CODE XREF: sub_405F70+105↑j
.text:004063BB                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:004063BB                 mov     dl, 76h ; 'v'   ; jumptable 00406075 case 11
.text:004063BD                 jmp     short loc_406360
.text:004063BF ; ---------------------------------------------------------------------------
.text:004063BF
.text:004063BF loc_4063BF:                             ; CODE XREF: sub_405F70+105↑j
.text:004063BF                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:004063BF                 mov     dl, 66h ; 'f'   ; jumptable 00406075 case 12
.text:004063C1                 jmp     short loc_406360
.text:004063C3 ; ---------------------------------------------------------------------------
.text:004063C3
.text:004063C3 loc_4063C3:                             ; CODE XREF: sub_405F70+105↑j
.text:004063C3                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:004063C3                 mov     dl, 72h ; 'r'   ; jumptable 00406075 case 13
.text:004063C5                 jmp     short loc_406374
.text:004063C7 ; ---------------------------------------------------------------------------
.text:004063C7
.text:004063C7 loc_4063C7:                             ; CODE XREF: sub_405F70+105↑j
.text:004063C7                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:004063C7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00406075 case 39
.text:004063CC                 jz      short loc_40637B ; jumptable 00406742 cases 91,92,94,96,124
.text:004063CE                 cmp     [esp+4Ch+arg_10], 2
.text:004063D3                 jnz     def_406472      ; jumptable 00406075 cases 37,43-58,65-90,93,95,97-122
.text:004063D3                                         ; jumptable 00406472 default case, cases 34-38,42-44,46,48-59
.text:004063D9                 mov     edx, [esp+4Ch+arg_4]
.text:004063DD                 cmp     [esp+4Ch+var_34], edx
.text:004063E1                 jnb     short loc_4063EF
.text:004063E3                 mov     ecx, [esp+4Ch+arg_0]
.text:004063E7                 mov     edi, [esp+4Ch+var_34]
.text:004063EB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004063EF
.text:004063EF loc_4063EF:                             ; CODE XREF: sub_405F70+471↑j
.text:004063EF                 inc     [esp+4Ch+var_34]
.text:004063F3                 mov     eax, [esp+4Ch+arg_4]
.text:004063F7                 cmp     [esp+4Ch+var_34], eax
.text:004063FB                 jnb     short loc_406409
.text:004063FD                 mov     esi, [esp+4Ch+arg_0]
.text:00406401                 mov     edx, [esp+4Ch+var_34]
.text:00406405                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00406409
.text:00406409 loc_406409:                             ; CODE XREF: sub_405F70+48B↑j
.text:00406409                 inc     [esp+4Ch+var_34]
.text:0040640D                 mov     edi, [esp+4Ch+arg_4]
.text:00406411                 cmp     [esp+4Ch+var_34], edi
.text:00406415                 jnb     short loc_406423
.text:00406417                 mov     ecx, [esp+4Ch+arg_0]
.text:0040641B                 mov     eax, [esp+4Ch+var_34]
.text:0040641F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00406423
.text:00406423 loc_406423:                             ; CODE XREF: sub_405F70+4A5↑j
.text:00406423                                         ; sub_405F70+5C4↓j ...
.text:00406423                 inc     [esp+4Ch+var_34]
.text:00406427                 jmp     def_406472      ; jumptable 00406075 cases 37,43-58,65-90,93,95,97-122
.text:00406427                                         ; jumptable 00406472 default case, cases 34-38,42-44,46,48-59
.text:0040642C ; ---------------------------------------------------------------------------
.text:0040642C
.text:0040642C loc_40642C:                             ; CODE XREF: sub_405F70+105↑j
.text:0040642C                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:0040642C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00406075 case 63
.text:00406431                 jz      loc_40637B      ; jumptable 00406742 cases 91,92,94,96,124
.text:00406437                 cmp     [esp+4Ch+arg_10], 3
.text:0040643C                 jnz     def_406472      ; jumptable 00406075 cases 37,43-58,65-90,93,95,97-122
.text:0040643C                                         ; jumptable 00406472 default case, cases 34-38,42-44,46,48-59
.text:00406442                 lea     edx, [ebp+2]
.text:00406445                 cmp     edx, [esp+4Ch+arg_C]
.text:00406449                 jnb     def_406472      ; jumptable 00406075 cases 37,43-58,65-90,93,95,97-122
.text:00406449                                         ; jumptable 00406472 default case, cases 34-38,42-44,46,48-59
.text:0040644F                 mov     esi, [esp+4Ch+Str]
.text:00406453                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00406458                 jnz     def_406472      ; jumptable 00406075 cases 37,43-58,65-90,93,95,97-122
.text:00406458                                         ; jumptable 00406472 default case, cases 34-38,42-44,46,48-59
.text:0040645E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00406463                 movsx   eax, cl
.text:00406466                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00406469                 cmp     eax, 1Dh
.text:0040646C                 ja      def_406472      ; jumptable 00406075 cases 37,43-58,65-90,93,95,97-122
.text:0040646C                                         ; jumptable 00406472 default case, cases 34-38,42-44,46,48-59
.text:00406472                 jmp     ds:jpt_406472[eax*4] ; switch jump
.text:00406472 ; ---------------------------------------------------------------------------
.text:00406479                 align 4
.text:0040647C jpt_406472      dd offset loc_4064F4    ; DATA XREF: sub_405F70+502↑r
.text:0040647C                 dd offset def_406472    ; jump table for switch statement
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset loc_4064F4
.text:0040647C                 dd offset loc_4064F4
.text:0040647C                 dd offset loc_4064F4
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset loc_4064F4
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset loc_4064F4
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset def_406472
.text:0040647C                 dd offset loc_4064F4
.text:0040647C                 dd offset loc_4064F4
.text:0040647C                 dd offset loc_4064F4
.text:004064F4 ; ---------------------------------------------------------------------------
.text:004064F4
.text:004064F4 loc_4064F4:                             ; CODE XREF: sub_405F70+502↑j
.text:004064F4                                         ; DATA XREF: sub_405F70:jpt_406472↑o
.text:004064F4                 mov     ebp, edx        ; jumptable 00406472 cases 33,39-41,45,47,60-62
.text:004064F6                 mov     bl, cl
.text:004064F8                 mov     edx, [esp+4Ch+arg_4]
.text:004064FC                 cmp     [esp+4Ch+var_34], edx
.text:00406500                 jnb     short loc_40650E
.text:00406502                 mov     ecx, [esp+4Ch+arg_0]
.text:00406506                 mov     edi, [esp+4Ch+var_34]
.text:0040650A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040650E
.text:0040650E loc_40650E:                             ; CODE XREF: sub_405F70+590↑j
.text:0040650E                 inc     [esp+4Ch+var_34]
.text:00406512                 mov     eax, [esp+4Ch+arg_4]
.text:00406516                 cmp     [esp+4Ch+var_34], eax
.text:0040651A                 jnb     short loc_406528
.text:0040651C                 mov     edx, [esp+4Ch+arg_0]
.text:00406520                 mov     esi, [esp+4Ch+var_34]
.text:00406524                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00406528
.text:00406528 loc_406528:                             ; CODE XREF: sub_405F70+5AA↑j
.text:00406528                 inc     [esp+4Ch+var_34]
.text:0040652C                 mov     edi, [esp+4Ch+arg_4]
.text:00406530                 cmp     [esp+4Ch+var_34], edi
.text:00406534                 jnb     loc_406423
.text:0040653A                 mov     eax, [esp+4Ch+arg_0]
.text:0040653E                 mov     ecx, [esp+4Ch+var_34]
.text:00406542                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00406546                 jmp     loc_406423
.text:00406546 ; ---------------------------------------------------------------------------
.text:0040654B                 align 10h
.text:00406550
.text:00406550 def_406075:                             ; CODE XREF: sub_405F70+FF↑j
.text:00406550                                         ; sub_405F70+105↑j
.text:00406550                                         ; DATA XREF: ...
.text:00406550                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00406075 default case, cases 1-6,14-31,64
.text:00406555                 jz      loc_406680
.text:0040655B                 mov     [esp+4Ch+var_28], 1
.text:00406563                 mov     esi, ds:__mb_cur_max
.text:00406569                 movzx   edx, bl
.text:0040656C                 cmp     dword ptr [esi], 1
.text:0040656F                 jz      loc_406664
.text:00406575                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040657D                 mov     [esp+4Ch+C], edx ; C
.text:00406580                 call    _isctype
.text:00406585
.text:00406585 loc_406585:                             ; CODE XREF: sub_405F70+705↓j
.text:00406585                 test    eax, eax
.text:00406587                 setnz   [esp+4Ch+var_29]
.text:0040658C
.text:0040658C loc_40658C:                             ; CODE XREF: sub_405F70+7A5↓j
.text:0040658C                 cmp     [esp+4Ch+var_21], 0
.text:00406591                 lea     eax, [ebp+1]
.text:00406594                 jz      loc_406330
.text:0040659A                 cmp     [esp+4Ch+var_29], 0
.text:0040659F                 jnz     def_406472      ; jumptable 00406075 cases 37,43-58,65-90,93,95,97-122
.text:0040659F                                         ; jumptable 00406472 default case, cases 34-38,42-44,46,48-59
.text:004065A5
.text:004065A5 loc_4065A5:                             ; CODE XREF: sub_405F70+7AB↓j
.text:004065A5                 mov     eax, [esp+4Ch+var_28]
.text:004065A9                 lea     edx, [eax+ebp]
.text:004065AC                 lea     esi, [esi+0]
.text:004065B0
.text:004065B0 loc_4065B0:                             ; CODE XREF: sub_405F70+6EF↓j
.text:004065B0                 cmp     [esp+4Ch+var_21], 0
.text:004065B5                 jz      short loc_406630
.text:004065B7                 cmp     [esp+4Ch+var_29], 0
.text:004065BC                 jnz     short loc_406630
.text:004065BE                 mov     edi, [esp+4Ch+arg_4]
.text:004065C2                 cmp     [esp+4Ch+var_34], edi
.text:004065C6                 jnb     short loc_4065D4
.text:004065C8                 mov     esi, [esp+4Ch+arg_0]
.text:004065CC                 mov     eax, [esp+4Ch+var_34]
.text:004065D0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004065D4
.text:004065D4 loc_4065D4:                             ; CODE XREF: sub_405F70+656↑j
.text:004065D4                 inc     [esp+4Ch+var_34]
.text:004065D8                 mov     ecx, [esp+4Ch+arg_4]
.text:004065DC                 cmp     [esp+4Ch+var_34], ecx
.text:004065E0                 jnb     short loc_4065F5
.text:004065E2                 mov     cl, bl
.text:004065E4                 mov     esi, [esp+4Ch+arg_0]
.text:004065E8                 mov     edi, [esp+4Ch+var_34]
.text:004065EC                 shr     cl, 6
.text:004065EF                 add     cl, 30h ; '0'
.text:004065F2                 mov     [edi+esi], cl
.text:004065F5
.text:004065F5 loc_4065F5:                             ; CODE XREF: sub_405F70+670↑j
.text:004065F5                 inc     [esp+4Ch+var_34]
.text:004065F9                 mov     edi, [esp+4Ch+arg_4]
.text:004065FD                 cmp     [esp+4Ch+var_34], edi
.text:00406601                 jnb     short loc_406619
.text:00406603                 mov     cl, bl
.text:00406605                 mov     esi, [esp+4Ch+arg_0]
.text:00406609                 shr     cl, 3
.text:0040660C                 mov     edi, [esp+4Ch+var_34]
.text:00406610                 and     cl, 7
.text:00406613                 add     cl, 30h ; '0'
.text:00406616                 mov     [edi+esi], cl
.text:00406619
.text:00406619 loc_406619:                             ; CODE XREF: sub_405F70+691↑j
.text:00406619                 inc     [esp+4Ch+var_34]
.text:0040661D                 and     bl, 7
.text:00406620                 add     bl, 30h ; '0'
.text:00406623                 lea     esi, [esi+0]
.text:00406629                 lea     edi, [edi+0]
.text:00406630
.text:00406630 loc_406630:                             ; CODE XREF: sub_405F70+645↑j
.text:00406630                                         ; sub_405F70+64C↑j
.text:00406630                 lea     eax, [ebp+1]
.text:00406633                 cmp     edx, eax
.text:00406635                 jbe     loc_406330
.text:0040663B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040663F                 cmp     [esp+4Ch+var_34], ebp
.text:00406643                 jnb     short loc_406650
.text:00406645                 mov     ecx, [esp+4Ch+arg_0]
.text:00406649                 mov     edi, [esp+4Ch+var_34]
.text:0040664D                 mov     [edi+ecx], bl
.text:00406650
.text:00406650 loc_406650:                             ; CODE XREF: sub_405F70+6D3↑j
.text:00406650                 inc     [esp+4Ch+var_34]
.text:00406654                 mov     ebp, eax
.text:00406656                 mov     eax, [esp+4Ch+Str]
.text:0040665A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040665F                 jmp     loc_4065B0
.text:00406664 ; ---------------------------------------------------------------------------
.text:00406664
.text:00406664 loc_406664:                             ; CODE XREF: sub_405F70+5FF↑j
.text:00406664                 mov     ecx, ds:_pctype
.text:0040666A                 mov     edi, [ecx]
.text:0040666C                 movzx   eax, word ptr [edi+edx*2]
.text:00406670                 and     eax, 157h
.text:00406675                 jmp     loc_406585
.text:00406675 ; ---------------------------------------------------------------------------
.text:0040667A                 align 10h
.text:00406680
.text:00406680 loc_406680:                             ; CODE XREF: sub_405F70+5E5↑j
.text:00406680                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00406685                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040668D                 mov     [esp+4Ch+var_28], 0
.text:00406695                 mov     [esp+4Ch+var_29], 1
.text:0040669A                 jz      loc_40682C
.text:004066A0
.text:004066A0 loc_4066A0:                             ; CODE XREF: sub_405F70+8CC↓j
.text:004066A0                 mov     ecx, [esp+4Ch+arg_C]
.text:004066A4                 lea     edx, [esp+4Ch+var_18]
.text:004066A8                 mov     edi, [esp+4Ch+Str]
.text:004066AC                 mov     [esp+4Ch+State], edx ; State
.text:004066B0                 lea     esi, [esp+4Ch+var_18._State]
.text:004066B4                 sub     ecx, ebp
.text:004066B6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004066BA                 add     edi, ebp
.text:004066BC                 mov     [esp+4Ch+var_30], edi
.text:004066C0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004066C4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004066C7                 call    mbrtowc
.text:004066CC                 test    eax, eax
.text:004066CE                 mov     edi, eax
.text:004066D0                 jz      short loc_406710
.text:004066D2                 cmp     eax, 0FFFFFFFFh
.text:004066D5                 jz      loc_406822
.text:004066DB                 cmp     eax, 0FFFFFFFEh
.text:004066DE                 jz      loc_4067E2
.text:004066E4                 cmp     [esp+4Ch+arg_10], 1
.text:004066E9                 jz      short loc_406720
.text:004066EB
.text:004066EB loc_4066EB:                             ; CODE XREF: sub_405F70+7B9↓j
.text:004066EB                                         ; sub_405F70+86D↓j
.text:004066EB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004066F0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004066F8                 mov     [esp+4Ch+C], ecx ; C
.text:004066FB                 call    iswctype
.text:00406700                 test    eax, eax
.text:00406702                 jnz     short loc_406709
.text:00406704                 mov     [esp+4Ch+var_29], 0
.text:00406709
.text:00406709 loc_406709:                             ; CODE XREF: sub_405F70+792↑j
.text:00406709                 mov     [esp+4Ch+var_28], edi
.text:0040670D                 lea     esi, [esi+0]
.text:00406710
.text:00406710 loc_406710:                             ; CODE XREF: sub_405F70+760↑j
.text:00406710                                         ; sub_405F70+87B↓j ...
.text:00406710                 cmp     [esp+4Ch+var_28], 1
.text:00406715                 jbe     loc_40658C
.text:0040671B                 jmp     loc_4065A5
.text:00406720 ; ---------------------------------------------------------------------------
.text:00406720
.text:00406720 loc_406720:                             ; CODE XREF: sub_405F70+779↑j
.text:00406720                 cmp     [esp+4Ch+arg_10], eax
.text:00406724                 mov     edx, 1
.text:00406729                 jnb     short loc_4066EB
.text:0040672B
.text:0040672B loc_40672B:                             ; CODE XREF: sub_405F70+867↓j
.text:0040672B                 mov     ecx, [esp+4Ch+Str]
.text:0040672F                 lea     esi, [edx+ebp]
.text:00406732                 movsx   eax, byte ptr [esi+ecx]
.text:00406736                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00406739                 cmp     eax, 21h
.text:0040673C                 ja      def_406742      ; jumptable 00406742 default case, cases 93,95,97-123
.text:00406742                 jmp     ds:jpt_406742[eax*4] ; switch jump
.text:00406742 ; ---------------------------------------------------------------------------
.text:00406749                 align 4
.text:0040674C jpt_406742      dd offset loc_40637B    ; DATA XREF: sub_405F70+7D2↑r
.text:0040674C                 dd offset loc_40637B    ; jump table for switch statement
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset loc_40637B
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset loc_40637B
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset def_406742
.text:0040674C                 dd offset loc_40637B
.text:004067D4 ; ---------------------------------------------------------------------------
.text:004067D4
.text:004067D4 def_406742:                             ; CODE XREF: sub_405F70+7CC↑j
.text:004067D4                                         ; sub_405F70+7D2↑j
.text:004067D4                                         ; DATA XREF: ...
.text:004067D4                 inc     edx             ; jumptable 00406742 default case, cases 93,95,97-123
.text:004067D5                 cmp     edx, edi
.text:004067D7                 jb      loc_40672B
.text:004067DD                 jmp     loc_4066EB
.text:004067E2 ; ---------------------------------------------------------------------------
.text:004067E2
.text:004067E2 loc_4067E2:                             ; CODE XREF: sub_405F70+76E↑j
.text:004067E2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004067E6                 mov     [esp+4Ch+var_29], 0
.text:004067EB                 jnb     loc_406710
.text:004067F1                 mov     eax, [esp+4Ch+var_30]
.text:004067F5                 cmp     byte ptr [eax], 0
.text:004067F8                 jz      loc_406710
.text:004067FE
.text:004067FE loc_4067FE:                             ; CODE XREF: sub_405F70+8AB↓j
.text:004067FE                 inc     [esp+4Ch+var_28]
.text:00406802                 mov     esi, [esp+4Ch+var_28]
.text:00406806                 lea     eax, [esi+ebp]
.text:00406809                 cmp     eax, [esp+4Ch+arg_C]
.text:0040680D                 jnb     loc_406710
.text:00406813                 mov     edi, [esp+4Ch+Str]
.text:00406817                 cmp     byte ptr [eax+edi], 0
.text:0040681B                 jnz     short loc_4067FE
.text:0040681D                 jmp     loc_406710
.text:00406822 ; ---------------------------------------------------------------------------
.text:00406822
.text:00406822 loc_406822:                             ; CODE XREF: sub_405F70+765↑j
.text:00406822                 mov     [esp+4Ch+var_29], 0
.text:00406827                 jmp     loc_406710
.text:0040682C ; ---------------------------------------------------------------------------
.text:0040682C
.text:0040682C loc_40682C:                             ; CODE XREF: sub_405F70+72A↑j
.text:0040682C                 mov     edx, [esp+4Ch+Str]
.text:00406830                 mov     [esp+4Ch+C], edx ; Str
.text:00406833                 call    strlen
.text:00406838                 mov     [esp+4Ch+arg_C], eax
.text:0040683C                 jmp     loc_4066A0
.text:00406841 ; ---------------------------------------------------------------------------
.text:00406841
.text:00406841 loc_406841:                             ; CODE XREF: sub_405F70+105↑j
.text:00406841                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:00406841                 mov     dl, bl          ; jumptable 00406075 case 92
.text:00406843                 jmp     loc_406374
.text:00406848 ; ---------------------------------------------------------------------------
.text:00406848
.text:00406848 loc_406848:                             ; CODE XREF: sub_405F70+105↑j
.text:00406848                                         ; sub_405F70+902↓j
.text:00406848                                         ; DATA XREF: ...
.text:00406848                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00406075 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040684D                 jnz     def_406472      ; jumptable 00406075 cases 37,43-58,65-90,93,95,97-122
.text:0040684D                                         ; jumptable 00406472 default case, cases 34-38,42-44,46,48-59
.text:00406853                 jmp     loc_40637B      ; jumptable 00406742 cases 91,92,94,96,124
.text:00406858 ; ---------------------------------------------------------------------------
.text:00406858
.text:00406858 loc_406858:                             ; CODE XREF: sub_405F70+105↑j
.text:00406858                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:00406858                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00406075 cases 123,125
.text:0040685D                 jz      short loc_406874
.text:0040685F                 cmp     [esp+4Ch+arg_C], 1
.text:00406864
.text:00406864 loc_406864:                             ; CODE XREF: sub_405F70+90C↓j
.text:00406864                 jnz     def_406472      ; jumptable 00406075 cases 37,43-58,65-90,93,95,97-122
.text:00406864                                         ; jumptable 00406472 default case, cases 34-38,42-44,46,48-59
.text:0040686A
.text:0040686A loc_40686A:                             ; CODE XREF: sub_405F70+105↑j
.text:0040686A                                         ; DATA XREF: sub_405F70:jpt_406075↑o
.text:0040686A                 test    ebp, ebp        ; jumptable 00406075 cases 35,126
.text:0040686C                 jnz     def_406472      ; jumptable 00406075 cases 37,43-58,65-90,93,95,97-122
.text:0040686C                                         ; jumptable 00406472 default case, cases 34-38,42-44,46,48-59
.text:00406872                 jmp     short loc_406848 ; jumptable 00406075 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00406874 ; ---------------------------------------------------------------------------
.text:00406874
.text:00406874 loc_406874:                             ; CODE XREF: sub_405F70+8ED↑j
.text:00406874                 mov     esi, [esp+4Ch+Str]
.text:00406878                 cmp     byte ptr [esi+1], 0
.text:0040687C                 jmp     short loc_406864
.text:0040687E ; ---------------------------------------------------------------------------
.text:0040687E
.text:0040687E loc_40687E:                             ; CODE XREF: sub_405F70:loc_40600F↑j
.text:0040687E                 test    ebp, ebp
.text:00406880                 jnz     short loc_40688D
.text:00406882                 cmp     [esp+4Ch+arg_10], 1
.text:00406887                 jz      loc_40637B      ; jumptable 00406742 cases 91,92,94,96,124
.text:0040688D
.text:0040688D loc_40688D:                             ; CODE XREF: sub_405F70+910↑j
.text:0040688D                 mov     esi, [esp+4Ch+var_1C]
.text:00406891                 test    esi, esi
.text:00406893                 jz      short loc_4068C8
.text:00406895                 mov     edi, [esp+4Ch+var_1C]
.text:00406899                 movzx   eax, byte ptr [edi]
.text:0040689C                 test    al, al
.text:0040689E                 jz      short loc_4068C8
.text:004068A0
.text:004068A0 loc_4068A0:                             ; CODE XREF: sub_405F70+956↓j
.text:004068A0                 mov     ebp, [esp+4Ch+arg_4]
.text:004068A4                 cmp     [esp+4Ch+var_34], ebp
.text:004068A8                 jnb     short loc_4068B5
.text:004068AA                 mov     ecx, [esp+4Ch+arg_0]
.text:004068AE                 mov     ebx, [esp+4Ch+var_34]
.text:004068B2                 mov     [ebx+ecx], al
.text:004068B5
.text:004068B5 loc_4068B5:                             ; CODE XREF: sub_405F70+938↑j
.text:004068B5                 inc     [esp+4Ch+var_1C]
.text:004068B9                 inc     [esp+4Ch+var_34]
.text:004068BD                 mov     edx, [esp+4Ch+var_1C]
.text:004068C1                 movzx   eax, byte ptr [edx]
.text:004068C4                 test    al, al
.text:004068C6                 jnz     short loc_4068A0
.text:004068C8
.text:004068C8 loc_4068C8:                             ; CODE XREF: sub_405F70+923↑j
.text:004068C8                                         ; sub_405F70+92E↑j
.text:004068C8                 mov     eax, [esp+4Ch+arg_4]
.text:004068CC                 cmp     [esp+4Ch+var_34], eax
.text:004068D0                 jnb     short loc_4068DE
.text:004068D2                 mov     edi, [esp+4Ch+arg_0]
.text:004068D6                 mov     esi, [esp+4Ch+var_34]
.text:004068DA                 mov     byte ptr [esi+edi], 0
.text:004068DE
.text:004068DE loc_4068DE:                             ; CODE XREF: sub_405F70+960↑j
.text:004068DE                 mov     eax, [esp+4Ch+var_34]
.text:004068E2                 jmp     loc_4063AF
.text:004068E7 ; ---------------------------------------------------------------------------
.text:004068E7
.text:004068E7 loc_4068E7:                             ; CODE XREF: sub_405F70+95↑j
.text:004068E7                 mov     ebx, [esp+4Ch+Str]
.text:004068EB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004068F0                 jmp     loc_40600F
.text:004068F5 ; ---------------------------------------------------------------------------
.text:004068F5
.text:004068F5 loc_4068F5:                             ; CODE XREF: sub_405F70+3D↑j
.text:004068F5                                         ; DATA XREF: sub_405F70:jpt_405FAD↑o
.text:004068F5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00405FAD case 2
.text:004068F9                 cmp     [esp+4Ch+var_34], edx
.text:004068FD                 jnb     short loc_406906
.text:004068FF                 mov     ecx, [esp+4Ch+arg_0]
.text:00406903                 mov     byte ptr [ecx], 27h ; '''
.text:00406906
.text:00406906 loc_406906:                             ; CODE XREF: sub_405F70+98D↑j
.text:00406906                 mov     [esp+4Ch+var_34], 1
.text:0040690E                 mov     [esp+4Ch+var_1C], 405F5Eh
.text:00406916                 jmp     loc_405FF6
.text:0040691B ; ---------------------------------------------------------------------------
.text:0040691B
.text:0040691B loc_40691B:                             ; CODE XREF: sub_405F70+3D↑j
.text:0040691B                                         ; DATA XREF: sub_405F70:jpt_405FAD↑o
.text:0040691B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00405FAD case 4
.text:00406920                 jmp     def_405FAD      ; jumptable 00405FAD default case, cases 0,1
.text:00406925 ; ---------------------------------------------------------------------------
.text:00406925
.text:00406925 loc_406925:                             ; CODE XREF: sub_405F70+3D↑j
.text:00406925                                         ; DATA XREF: sub_405F70:jpt_405FAD↑o
.text:00406925                 mov     [esp+4Ch+C], 405F60h ; jumptable 00405FAD cases 5,6
.text:0040692C                 call    ds:libintl_gettext
.text:00406932                 cmp     eax, 405F60h
.text:00406937                 mov     edi, eax
.text:00406939                 jz      short loc_4069B0
.text:0040693B
.text:0040693B loc_40693B:                             ; CODE XREF: sub_405F70+A45↓j
.text:0040693B                                         ; sub_405F70+A4C↓j
.text:0040693B                 mov     [esp+4Ch+C], 405F5Eh
.text:00406942                 call    ds:libintl_gettext
.text:00406948                 cmp     eax, 405F5Eh
.text:0040694D                 mov     edx, eax
.text:0040694F                 jz      short loc_4069A2
.text:00406951
.text:00406951 loc_406951:                             ; CODE XREF: sub_405F70+A37↓j
.text:00406951                                         ; sub_405F70+A3E↓j
.text:00406951                 mov     [esp+4Ch+var_1C], edi
.text:00406955                 cmp     byte ptr [edi], 0
.text:00406958                 jz      short loc_406988
.text:0040695A
.text:0040695A loc_40695A:                             ; CODE XREF: sub_405F70+A16↓j
.text:0040695A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040695E                 cmp     [esp+4Ch+var_34], ecx
.text:00406962                 jnb     short loc_406977
.text:00406964                 mov     ebp, [esp+4Ch+var_1C]
.text:00406968                 mov     edi, [esp+4Ch+arg_0]
.text:0040696C                 mov     esi, [esp+4Ch+var_34]
.text:00406970                 movzx   ebx, byte ptr [ebp+0]
.text:00406974                 mov     [esi+edi], bl
.text:00406977
.text:00406977 loc_406977:                             ; CODE XREF: sub_405F70+9F2↑j
.text:00406977                 inc     [esp+4Ch+var_1C]
.text:0040697B                 inc     [esp+4Ch+var_34]
.text:0040697F                 mov     eax, [esp+4Ch+var_1C]
.text:00406983                 cmp     byte ptr [eax], 0
.text:00406986                 jnz     short loc_40695A
.text:00406988
.text:00406988 loc_406988:                             ; CODE XREF: sub_405F70+9E8↑j
.text:00406988                 mov     [esp+4Ch+var_21], 1
.text:0040698D                 mov     [esp+4Ch+var_1C], edx
.text:00406991                 mov     [esp+4Ch+C], edx ; Str
.text:00406994                 call    strlen
.text:00406999                 mov     [esp+4Ch+var_20], eax
.text:0040699D                 jmp     def_405FAD      ; jumptable 00405FAD default case, cases 0,1
.text:004069A2 ; ---------------------------------------------------------------------------
.text:004069A2
.text:004069A2 loc_4069A2:                             ; CODE XREF: sub_405F70+9DF↑j
.text:004069A2                 cmp     [esp+4Ch+arg_10], 6
.text:004069A7                 jnz     short loc_406951
.text:004069A9                 mov     edx, offset asc_405F5C ; "\"'`"
.text:004069AE                 jmp     short loc_406951
.text:004069B0 ; ---------------------------------------------------------------------------
.text:004069B0
.text:004069B0 loc_4069B0:                             ; CODE XREF: sub_405F70+9C9↑j
.text:004069B0                 cmp     [esp+4Ch+arg_10], 6
.text:004069B5                 jnz     short loc_40693B
.text:004069B7                 mov     edi, offset asc_405F5C ; "\"'`"
.text:004069BC                 jmp     loc_40693B
.text:004069BC sub_405F70      endp
.text:004069BC
.text:004069C1 ; ---------------------------------------------------------------------------
.text:004069C1                 jmp     short loc_4069D0
.text:004069C1 ; ---------------------------------------------------------------------------
.text:004069C3                 align 10h
.text:004069D0
.text:004069D0 loc_4069D0:                             ; CODE XREF: .text:004069C1↑j
.text:004069D0                 sub     esp, 0Ch
.text:004069D3                 mov     [esp+4], ebx
.text:004069D7                 mov     [esp+8], esi
.text:004069DB                 call    _errno
.text:004069E0                 mov     esi, [eax]
.text:004069E2                 mov     dword ptr [esp], 24h ; '$'
.text:004069E9                 call    sub_404B90
.text:004069EE                 mov     edx, [esp+10h]
.text:004069F2                 mov     ebx, eax
.text:004069F4                 test    edx, edx
.text:004069F6                 jz      short loc_406A41
.text:004069F8
.text:004069F8 loc_4069F8:                             ; CODE XREF: .text:00406A46↓j
.text:004069F8                 mov     ecx, [edx]
.text:004069FA                 mov     [ebx], ecx
.text:004069FC                 mov     ecx, [edx+4]
.text:004069FF                 mov     [ebx+4], ecx
.text:00406A02                 mov     ecx, [edx+8]
.text:00406A05                 mov     [ebx+8], ecx
.text:00406A08                 mov     ecx, [edx+0Ch]
.text:00406A0B                 mov     [ebx+0Ch], ecx
.text:00406A0E                 mov     ecx, [edx+10h]
.text:00406A11                 mov     [ebx+10h], ecx
.text:00406A14                 mov     ecx, [edx+14h]
.text:00406A17                 mov     [ebx+14h], ecx
.text:00406A1A                 mov     ecx, [edx+18h]
.text:00406A1D                 mov     [ebx+18h], ecx
.text:00406A20                 mov     ecx, [edx+1Ch]
.text:00406A23                 mov     [ebx+1Ch], ecx
.text:00406A26                 mov     ecx, [edx+20h]
.text:00406A29                 mov     [ebx+20h], ecx
.text:00406A2C                 call    _errno
.text:00406A31                 mov     [eax], esi
.text:00406A33                 mov     esi, [esp+8]
.text:00406A37                 mov     eax, ebx
.text:00406A39                 mov     ebx, [esp+4]
.text:00406A3D                 add     esp, 0Ch
.text:00406A40                 retn
.text:00406A41 ; ---------------------------------------------------------------------------
.text:00406A41
.text:00406A41 loc_406A41:                             ; CODE XREF: .text:004069F6↑j
.text:00406A41                 mov     edx, offset dword_4191B0
.text:00406A46                 jmp     short loc_4069F8
.text:00406A46 ; ---------------------------------------------------------------------------
.text:00406A48                 align 10h
.text:00406A50                 mov     eax, [esp+4]
.text:00406A54                 test    eax, eax
.text:00406A56                 jz      short loc_406A60
.text:00406A58
.text:00406A58 loc_406A58:                             ; CODE XREF: .text:00406A65↓j
.text:00406A58                 mov     eax, [eax]
.text:00406A5A                 retn
.text:00406A5A ; ---------------------------------------------------------------------------
.text:00406A5B                 align 10h
.text:00406A60
.text:00406A60 loc_406A60:                             ; CODE XREF: .text:00406A56↑j
.text:00406A60                 mov     eax, offset dword_4191B0
.text:00406A65                 jmp     short loc_406A58
.text:00406A65 ; ---------------------------------------------------------------------------
.text:00406A67                 align 10h
.text:00406A70                 mov     edx, [esp+4]
.text:00406A74                 test    edx, edx
.text:00406A76                 jz      short loc_406A80
.text:00406A78
.text:00406A78 loc_406A78:                             ; CODE XREF: .text:00406A85↓j
.text:00406A78                 mov     ecx, [esp+8]
.text:00406A7C                 mov     [edx], ecx
.text:00406A7E                 retn
.text:00406A7E ; ---------------------------------------------------------------------------
.text:00406A7F                 align 10h
.text:00406A80
.text:00406A80 loc_406A80:                             ; CODE XREF: .text:00406A76↑j
.text:00406A80                 mov     edx, offset dword_4191B0
.text:00406A85                 jmp     short loc_406A78
.text:00406A85 ; ---------------------------------------------------------------------------
.text:00406A87                 align 10h
.text:00406A90                 sub     esp, 8
.text:00406A93                 mov     eax, [esp+0Ch]
.text:00406A97                 movzx   ecx, byte ptr [esp+10h]
.text:00406A9C                 mov     [esp], ebx
.text:00406A9F                 mov     ebx, [esp+14h]
.text:00406AA3                 mov     [esp+4], esi
.text:00406AA7                 mov     dl, cl
.text:00406AA9                 shr     dl, 5
.text:00406AAC                 movzx   edx, dl
.text:00406AAF                 shl     edx, 2
.text:00406AB2                 test    eax, eax
.text:00406AB4                 lea     esi, [edx+eax+4]
.text:00406AB8                 jz      short loc_406AE0
.text:00406ABA
.text:00406ABA loc_406ABA:                             ; CODE XREF: .text:00406AE6↓j
.text:00406ABA                 mov     edx, [esi]
.text:00406ABC                 and     ecx, 1Fh
.text:00406ABF                 and     ebx, 1
.text:00406AC2                 mov     eax, edx
.text:00406AC4                 shr     eax, cl
.text:00406AC6                 and     eax, 1
.text:00406AC9                 xor     ebx, eax
.text:00406ACB                 shl     ebx, cl
.text:00406ACD                 xor     edx, ebx
.text:00406ACF                 mov     [esi], edx
.text:00406AD1                 mov     ebx, [esp]
.text:00406AD4                 mov     esi, [esp+4]
.text:00406AD8                 add     esp, 8
.text:00406ADB                 retn
.text:00406ADB ; ---------------------------------------------------------------------------
.text:00406ADC                 align 10h
.text:00406AE0
.text:00406AE0 loc_406AE0:                             ; CODE XREF: .text:00406AB8↑j
.text:00406AE0                 lea     esi, dword_4191B4[edx]
.text:00406AE6                 jmp     short loc_406ABA
.text:00406AE6 ; ---------------------------------------------------------------------------
.text:00406AE8                 align 10h
.text:00406AF0                 sub     esp, 2Ch
.text:00406AF3                 mov     [esp+24h], ebx
.text:00406AF7                 mov     ebx, [esp+40h]
.text:00406AFB                 mov     [esp+28h], esi
.text:00406AFF                 test    ebx, ebx
.text:00406B01                 jz      short loc_406B50
.text:00406B03
.text:00406B03 loc_406B03:                             ; CODE XREF: .text:00406B55↓j
.text:00406B03                 call    _errno
.text:00406B08                 mov     esi, [eax]
.text:00406B0A                 mov     [esp+14h], ebx
.text:00406B0E                 mov     edx, [ebx]
.text:00406B10                 mov     ecx, [esp+38h]
.text:00406B14                 mov     ebx, [esp+3Ch]
.text:00406B18                 mov     [esp+10h], edx
.text:00406B1C                 mov     edx, [esp+34h]
.text:00406B20                 mov     [esp+0Ch], ebx
.text:00406B24                 mov     [esp+8], ecx
.text:00406B28                 mov     [esp+4], edx
.text:00406B2C                 mov     edx, [esp+30h]
.text:00406B30                 mov     [esp], edx
.text:00406B33                 call    sub_405F70
.text:00406B38                 mov     ebx, eax
.text:00406B3A                 call    _errno
.text:00406B3F                 mov     [eax], esi
.text:00406B41                 mov     esi, [esp+28h]
.text:00406B45                 mov     eax, ebx
.text:00406B47                 mov     ebx, [esp+24h]
.text:00406B4B                 add     esp, 2Ch
.text:00406B4E                 retn
.text:00406B4E ; ---------------------------------------------------------------------------
.text:00406B4F                 align 10h
.text:00406B50
.text:00406B50 loc_406B50:                             ; CODE XREF: .text:00406B01↑j
.text:00406B50                 mov     ebx, offset dword_4191B0
.text:00406B55                 jmp     short loc_406B03
.text:00406B55 ; ---------------------------------------------------------------------------
.text:00406B57                 align 10h
.text:00406B60                 push    ebp
.text:00406B61                 push    edi
.text:00406B62                 push    esi
.text:00406B63                 push    ebx
.text:00406B64                 sub     esp, 2Ch
.text:00406B67                 mov     ebp, [esp+48h]
.text:00406B6B                 call    _errno
.text:00406B70                 mov     edx, [eax]
.text:00406B72                 test    ebp, ebp
.text:00406B74                 mov     ebx, ebp
.text:00406B76                 mov     [esp+28h], edx
.text:00406B7A                 jz      loc_406C30
.text:00406B80
.text:00406B80 loc_406B80:                             ; CODE XREF: .text:00406C35↓j
.text:00406B80                 call    _errno
.text:00406B85                 mov     edi, [eax]
.text:00406B87                 mov     esi, ebp
.text:00406B89                 mov     [esp+14h], ebx
.text:00406B8D                 mov     ecx, [ebx]
.text:00406B8F                 mov     dword ptr [esp], 0
.text:00406B96                 mov     edx, [esp+44h]
.text:00406B9A                 mov     dword ptr [esp+4], 0
.text:00406BA2                 mov     eax, [esp+40h]
.text:00406BA6                 mov     [esp+10h], ecx
.text:00406BAA                 mov     [esp+0Ch], edx
.text:00406BAE                 mov     [esp+8], eax
.text:00406BB2                 call    sub_405F70
.text:00406BB7                 mov     ebx, eax
.text:00406BB9                 call    _errno
.text:00406BBE                 mov     [eax], edi
.text:00406BC0                 lea     edi, [ebx+1]
.text:00406BC3                 mov     [esp], edi
.text:00406BC6                 call    sub_404B90
.text:00406BCB                 mov     [esp+24h], eax
.text:00406BCF                 test    ebp, ebp
.text:00406BD1                 jz      short loc_406C22
.text:00406BD3
.text:00406BD3 loc_406BD3:                             ; CODE XREF: .text:00406C27↓j
.text:00406BD3                 call    _errno
.text:00406BD8                 mov     ebp, [eax]
.text:00406BDA                 mov     [esp+14h], esi
.text:00406BDE                 mov     ecx, [esi]
.text:00406BE0                 mov     [esp+4], edi
.text:00406BE4                 mov     edx, [esp+44h]
.text:00406BE8                 mov     esi, [esp+24h]
.text:00406BEC                 mov     [esp+10h], ecx
.text:00406BF0                 mov     eax, [esp+40h]
.text:00406BF4                 mov     [esp+0Ch], edx
.text:00406BF8                 mov     [esp], esi
.text:00406BFB                 mov     [esp+8], eax
.text:00406BFF                 call    sub_405F70
.text:00406C04                 call    _errno
.text:00406C09                 mov     [eax], ebp
.text:00406C0B                 call    _errno
.text:00406C10                 mov     ebx, [esp+28h]
.text:00406C14                 mov     [eax], ebx
.text:00406C16                 mov     eax, [esp+24h]
.text:00406C1A                 add     esp, 2Ch
.text:00406C1D                 pop     ebx
.text:00406C1E                 pop     esi
.text:00406C1F                 pop     edi
.text:00406C20                 pop     ebp
.text:00406C21                 retn
.text:00406C22 ; ---------------------------------------------------------------------------
.text:00406C22
.text:00406C22 loc_406C22:                             ; CODE XREF: .text:00406BD1↑j
.text:00406C22                 mov     esi, offset dword_4191B0
.text:00406C27                 jmp     short loc_406BD3
.text:00406C27 ; ---------------------------------------------------------------------------
.text:00406C29                 align 10h
.text:00406C30
.text:00406C30 loc_406C30:                             ; CODE XREF: .text:00406B7A↑j
.text:00406C30                 mov     ebx, offset dword_4191B0
.text:00406C35                 jmp     loc_406B80
.text:00406C35 ; ---------------------------------------------------------------------------
.text:00406C3A                 align 10h
.text:00406C40                 sub     esp, 1Ch
.text:00406C43                 mov     edx, [esp+24h]
.text:00406C47                 mov     dword ptr [esp+0Ch], offset dword_4191B0
.text:00406C4F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406C57                 mov     [esp+4], edx
.text:00406C5B                 mov     edx, [esp+20h]
.text:00406C5F                 mov     [esp], edx
.text:00406C62                 call    sub_4070B0
.text:00406C67                 add     esp, 1Ch
.text:00406C6A                 retn
.text:00406C6A ; ---------------------------------------------------------------------------
.text:00406C6B                 align 10h
.text:00406C70                 sub     esp, 1Ch
.text:00406C73                 mov     edx, [esp+20h]
.text:00406C77                 mov     dword ptr [esp+0Ch], offset dword_4191B0
.text:00406C7F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406C87                 mov     [esp+4], edx
.text:00406C8B                 mov     dword ptr [esp], 0
.text:00406C92                 call    sub_4070B0
.text:00406C97                 add     esp, 1Ch
.text:00406C9A                 retn
.text:00406C9A ; ---------------------------------------------------------------------------
.text:00406C9B                 align 10h
.text:00406CA0
.text:00406CA0 ; =============== S U B R O U T I N E =======================================
.text:00406CA0
.text:00406CA0
.text:00406CA0 ; int __cdecl sub_406CA0(int, int, char *)
.text:00406CA0 sub_406CA0      proc near               ; CODE XREF: sub_405640+1A↑p
.text:00406CA0                                         ; sub_405670+1A↑p ...
.text:00406CA0
.text:00406CA0 var_BC          = dword ptr -0BCh
.text:00406CA0 var_B8          = dword ptr -0B8h
.text:00406CA0 var_B4          = dword ptr -0B4h
.text:00406CA0 var_B0          = dword ptr -0B0h
.text:00406CA0 var_AC          = dword ptr -0ACh
.text:00406CA0 var_A8          = dword ptr -0A8h
.text:00406CA0 var_A4          = dword ptr -0A4h
.text:00406CA0 var_A0          = dword ptr -0A0h
.text:00406CA0 var_9C          = dword ptr -9Ch
.text:00406CA0 var_98          = dword ptr -98h
.text:00406CA0 var_94          = dword ptr -94h
.text:00406CA0 var_90          = dword ptr -90h
.text:00406CA0 var_8C          = dword ptr -8Ch
.text:00406CA0 var_7C          = dword ptr -7Ch
.text:00406CA0 var_78          = dword ptr -78h
.text:00406CA0 var_74          = dword ptr -74h
.text:00406CA0 var_70          = dword ptr -70h
.text:00406CA0 var_6C          = dword ptr -6Ch
.text:00406CA0 var_68          = dword ptr -68h
.text:00406CA0 var_64          = dword ptr -64h
.text:00406CA0 var_60          = dword ptr -60h
.text:00406CA0 var_5C          = dword ptr -5Ch
.text:00406CA0 var_4C          = dword ptr -4Ch
.text:00406CA0 var_48          = dword ptr -48h
.text:00406CA0 var_44          = dword ptr -44h
.text:00406CA0 var_40          = dword ptr -40h
.text:00406CA0 var_3C          = dword ptr -3Ch
.text:00406CA0 var_38          = dword ptr -38h
.text:00406CA0 var_34          = dword ptr -34h
.text:00406CA0 var_30          = dword ptr -30h
.text:00406CA0 var_2C          = dword ptr -2Ch
.text:00406CA0 arg_0           = dword ptr  4
.text:00406CA0 arg_4           = dword ptr  8
.text:00406CA0 arg_8           = dword ptr  0Ch
.text:00406CA0
.text:00406CA0                 push    ebp
.text:00406CA1                 xor     eax, eax
.text:00406CA3                 mov     ecx, 8
.text:00406CA8                 push    edi
.text:00406CA9                 push    esi
.text:00406CAA                 push    ebx
.text:00406CAB                 sub     esp, 0ACh
.text:00406CB1                 mov     ebp, [esp+0BCh+arg_4]
.text:00406CB8                 cld
.text:00406CB9                 lea     edi, [esp+0BCh+var_A8]
.text:00406CBD                 mov     [esp+0BCh+var_AC], ebp
.text:00406CC1                 rep stosd
.text:00406CC3                 mov     eax, [esp+0BCh+var_8C]
.text:00406CC7                 mov     edi, [esp+0BCh+var_AC]
.text:00406CCB                 mov     esi, [esp+0BCh+var_A8]
.text:00406CCF                 mov     [esp+0BCh+var_5C], eax
.text:00406CD3                 mov     ebp, [esp+0BCh+var_A4]
.text:00406CD7                 mov     eax, [esp+0BCh+var_AC]
.text:00406CDB                 mov     [esp+0BCh+var_7C], edi
.text:00406CDF                 mov     ecx, [esp+0BCh+var_94]
.text:00406CE3                 mov     edi, [esp+0BCh+var_A0]
.text:00406CE7                 mov     [esp+0BCh+var_78], esi
.text:00406CEB                 mov     edx, [esp+0BCh+var_90]
.text:00406CEF                 mov     esi, [esp+0BCh+var_9C]
.text:00406CF3                 mov     [esp+0BCh+var_4C], eax
.text:00406CF7                 mov     ebx, [esp+0BCh+var_98]
.text:00406CFB                 mov     eax, [esp+0BCh+var_A8]
.text:00406CFF                 mov     [esp+0BCh+var_74], ebp
.text:00406D03                 mov     [esp+0BCh+var_70], edi
.text:00406D07                 mov     [esp+0BCh+var_6C], esi
.text:00406D0B                 mov     [esp+0BCh+var_68], ebx
.text:00406D0F                 mov     [esp+0BCh+var_64], ecx
.text:00406D13                 mov     [esp+0BCh+var_60], edx
.text:00406D17                 mov     [esp+0BCh+var_48], eax
.text:00406D1B                 mov     [esp+0BCh+var_44], ebp
.text:00406D1F                 mov     [esp+0BCh+var_40], edi
.text:00406D23                 mov     [esp+0BCh+var_3C], esi
.text:00406D2A                 mov     [esp+0BCh+var_38], ebx
.text:00406D31                 mov     ebx, [esp+0BCh+var_8C]
.text:00406D35                 mov     [esp+0BCh+var_30], edx
.text:00406D3C                 mov     edx, [esp+0BCh+arg_8]
.text:00406D43                 mov     [esp+0BCh+var_34], ecx
.text:00406D4A                 lea     ecx, [esp+0BCh+var_4C]
.text:00406D4E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00406D52                 mov     edx, [esp+0BCh+arg_0]
.text:00406D59                 mov     [esp+0BCh+var_2C], ebx
.text:00406D60                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00406D64                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00406D6C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00406D6F                 call    sub_4070B0
.text:00406D74                 add     esp, 0ACh
.text:00406D7A                 pop     ebx
.text:00406D7B                 pop     esi
.text:00406D7C                 pop     edi
.text:00406D7D                 pop     ebp
.text:00406D7E                 retn
.text:00406D7E sub_406CA0      endp
.text:00406D7E
.text:00406D7E ; ---------------------------------------------------------------------------
.text:00406D7F                 align 10h
.text:00406D80                 push    ebp
.text:00406D81                 xor     eax, eax
.text:00406D83                 mov     ecx, 8
.text:00406D88                 push    edi
.text:00406D89                 push    esi
.text:00406D8A                 push    ebx
.text:00406D8B                 sub     esp, 0ACh
.text:00406D91                 mov     edx, [esp+0C4h]
.text:00406D98                 cld
.text:00406D99                 lea     edi, [esp+14h]
.text:00406D9D                 mov     [esp+10h], edx
.text:00406DA1                 rep stosd
.text:00406DA3                 mov     eax, [esp+30h]
.text:00406DA7                 mov     ebp, [esp+10h]
.text:00406DAB                 mov     edi, [esp+14h]
.text:00406DAF                 mov     [esp+60h], eax
.text:00406DB3                 mov     esi, [esp+20h]
.text:00406DB7                 mov     eax, [esp+10h]
.text:00406DBB                 mov     [esp+40h], ebp
.text:00406DBF                 mov     ecx, [esp+28h]
.text:00406DC3                 mov     ebp, [esp+18h]
.text:00406DC7                 mov     [esp+44h], edi
.text:00406DCB                 mov     edx, [esp+2Ch]
.text:00406DCF                 mov     edi, [esp+1Ch]
.text:00406DD3                 mov     [esp+70h], eax
.text:00406DD7                 mov     ebx, [esp+24h]
.text:00406DDB                 mov     eax, [esp+14h]
.text:00406DDF                 mov     [esp+48h], ebp
.text:00406DE3                 mov     [esp+4Ch], edi
.text:00406DE7                 mov     [esp+50h], esi
.text:00406DEB                 mov     [esp+54h], ebx
.text:00406DEF                 mov     [esp+58h], ecx
.text:00406DF3                 mov     [esp+5Ch], edx
.text:00406DF7                 mov     [esp+74h], eax
.text:00406DFB                 mov     [esp+78h], ebp
.text:00406DFF                 mov     [esp+7Ch], edi
.text:00406E03                 mov     [esp+80h], esi
.text:00406E0A                 mov     [esp+84h], ebx
.text:00406E11                 mov     esi, [esp+30h]
.text:00406E15                 lea     ebx, [esp+70h]
.text:00406E19                 mov     [esp+8Ch], edx
.text:00406E20                 mov     edx, [esp+0C8h]
.text:00406E27                 mov     [esp+88h], ecx
.text:00406E2E                 mov     ecx, [esp+0CCh]
.text:00406E35                 mov     [esp+4], edx
.text:00406E39                 mov     edx, [esp+0C0h]
.text:00406E40                 mov     [esp+90h], esi
.text:00406E47                 mov     [esp+0Ch], ebx
.text:00406E4B                 mov     [esp+8], ecx
.text:00406E4F                 mov     [esp], edx
.text:00406E52                 call    sub_4070B0
.text:00406E57                 add     esp, 0ACh
.text:00406E5D                 pop     ebx
.text:00406E5E                 pop     esi
.text:00406E5F                 pop     edi
.text:00406E60                 pop     ebp
.text:00406E61                 retn
.text:00406E61 ; ---------------------------------------------------------------------------
.text:00406E62                 align 10h
.text:00406E70                 push    ebp
.text:00406E71                 xor     eax, eax
.text:00406E73                 mov     ecx, 8
.text:00406E78                 push    edi
.text:00406E79                 push    esi
.text:00406E7A                 push    ebx
.text:00406E7B                 sub     esp, 0ACh
.text:00406E81                 mov     edi, [esp+0C0h]
.text:00406E88                 cld
.text:00406E89                 mov     [esp+10h], edi
.text:00406E8D                 lea     edi, [esp+14h]
.text:00406E91                 rep stosd
.text:00406E93                 mov     eax, [esp+30h]
.text:00406E97                 mov     esi, [esp+10h]
.text:00406E9B                 mov     ebx, [esp+14h]
.text:00406E9F                 mov     [esp+60h], eax
.text:00406EA3                 mov     ebp, [esp+18h]
.text:00406EA7                 mov     eax, [esp+10h]
.text:00406EAB                 mov     [esp+40h], esi
.text:00406EAF                 mov     edi, [esp+1Ch]
.text:00406EB3                 mov     esi, [esp+20h]
.text:00406EB7                 mov     [esp+44h], ebx
.text:00406EBB                 mov     ecx, [esp+28h]
.text:00406EBF                 mov     edx, [esp+2Ch]
.text:00406EC3                 mov     [esp+70h], eax
.text:00406EC7                 mov     ebx, [esp+24h]
.text:00406ECB                 mov     eax, [esp+14h]
.text:00406ECF                 mov     [esp+48h], ebp
.text:00406ED3                 mov     [esp+4Ch], edi
.text:00406ED7                 mov     [esp+50h], esi
.text:00406EDB                 mov     [esp+54h], ebx
.text:00406EDF                 mov     [esp+58h], ecx
.text:00406EE3                 mov     [esp+5Ch], edx
.text:00406EE7                 mov     [esp+74h], eax
.text:00406EEB                 mov     [esp+78h], ebp
.text:00406EEF                 mov     [esp+7Ch], edi
.text:00406EF3                 mov     [esp+80h], esi
.text:00406EFA                 mov     [esp+84h], ebx
.text:00406F01                 mov     [esp+8Ch], edx
.text:00406F08                 lea     edx, [esp+70h]
.text:00406F0C                 mov     [esp+88h], ecx
.text:00406F13                 mov     ecx, [esp+30h]
.text:00406F17                 mov     [esp+0Ch], edx
.text:00406F1B                 mov     edx, [esp+0C4h]
.text:00406F22                 mov     [esp+90h], ecx
.text:00406F29                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406F31                 mov     [esp+4], edx
.text:00406F35                 mov     dword ptr [esp], 0
.text:00406F3C                 call    sub_4070B0
.text:00406F41                 add     esp, 0ACh
.text:00406F47                 pop     ebx
.text:00406F48                 pop     esi
.text:00406F49                 pop     edi
.text:00406F4A                 pop     ebp
.text:00406F4B                 retn
.text:00406F4B ; ---------------------------------------------------------------------------
.text:00406F4C                 align 10h
.text:00406F50                 push    edi
.text:00406F51                 push    esi
.text:00406F52                 push    ebx
.text:00406F53                 sub     esp, 40h
.text:00406F56                 mov     edx, ds:dword_4191BC
.text:00406F5C                 mov     ebx, ds:dword_4191B0
.text:00406F62                 mov     esi, ds:dword_4191B8
.text:00406F68                 mov     edi, ds:dword_4191B4
.text:00406F6E                 mov     [esp+1Ch], edx
.text:00406F72                 mov     ecx, ds:dword_4191C0
.text:00406F78                 mov     edx, ds:dword_4191D0
.text:00406F7E                 mov     [esp+10h], ebx
.text:00406F82                 mov     ebx, ds:dword_4191C4
.text:00406F88                 mov     [esp+30h], edx
.text:00406F8C                 movzx   edx, byte ptr [esp+54h]
.text:00406F91                 mov     [esp+18h], esi
.text:00406F95                 mov     esi, ds:dword_4191CC
.text:00406F9B                 mov     [esp+14h], edi
.text:00406F9F                 mov     edi, ds:dword_4191C8
.text:00406FA5                 mov     [esp+20h], ecx
.text:00406FA9                 mov     cl, dl
.text:00406FAB                 shr     cl, 5
.text:00406FAE                 mov     [esp+24h], ebx
.text:00406FB2                 movzx   ebx, cl
.text:00406FB5                 mov     [esp+2Ch], esi
.text:00406FB9                 lea     esi, [esp+10h]
.text:00406FBD                 mov     [esp+28h], edi
.text:00406FC1                 lea     edi, [esi+ebx*4]
.text:00406FC4                 mov     ebx, edx
.text:00406FC6                 mov     edx, [edi+4]
.text:00406FC9                 and     ebx, 1Fh
.text:00406FCC                 mov     cl, bl
.text:00406FCE                 mov     eax, edx
.text:00406FD0                 shr     eax, cl
.text:00406FD2                 and     eax, 1
.text:00406FD5                 xor     eax, 1
.text:00406FD8                 shl     eax, cl
.text:00406FDA                 xor     edx, eax
.text:00406FDC                 mov     [edi+4], edx
.text:00406FDF                 mov     edx, [esp+50h]
.text:00406FE3                 mov     [esp+0Ch], esi
.text:00406FE7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406FEF                 mov     [esp+4], edx
.text:00406FF3                 mov     dword ptr [esp], 0
.text:00406FFA                 call    sub_4070B0
.text:00406FFF                 add     esp, 40h
.text:00407002                 pop     ebx
.text:00407003                 pop     esi
.text:00407004                 pop     edi
.text:00407005                 retn
.text:00407005 ; ---------------------------------------------------------------------------
.text:00407006                 align 10h
.text:00407010
.text:00407010 ; =============== S U B R O U T I N E =======================================
.text:00407010
.text:00407010
.text:00407010 ; int __cdecl sub_407010(char *)
.text:00407010 sub_407010      proc near               ; CODE XREF: sub_405490+64↑p
.text:00407010
.text:00407010 var_4C          = dword ptr -4Ch
.text:00407010 var_48          = dword ptr -48h
.text:00407010 var_44          = dword ptr -44h
.text:00407010 var_40          = dword ptr -40h
.text:00407010 var_3C          = dword ptr -3Ch
.text:00407010 var_38          = dword ptr -38h
.text:00407010 var_34          = dword ptr -34h
.text:00407010 var_30          = dword ptr -30h
.text:00407010 var_2C          = dword ptr -2Ch
.text:00407010 var_28          = dword ptr -28h
.text:00407010 var_24          = dword ptr -24h
.text:00407010 var_20          = dword ptr -20h
.text:00407010 var_1C          = dword ptr -1Ch
.text:00407010 arg_0           = dword ptr  4
.text:00407010
.text:00407010                 sub     esp, 4Ch
.text:00407013                 mov     ecx, ds:dword_4191B0
.text:00407019                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00407021                 mov     edx, ds:dword_4191B4
.text:00407027                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040702E                 mov     [esp+4Ch+var_3C], ecx
.text:00407032                 mov     ecx, ds:dword_4191BC
.text:00407038                 mov     [esp+4Ch+var_38], edx
.text:0040703C                 mov     edx, ds:dword_4191B8
.text:00407042                 mov     [esp+4Ch+var_30], ecx
.text:00407046                 mov     ecx, ds:dword_4191C0
.text:0040704C                 mov     eax, edx
.text:0040704E                 shr     eax, 1Ah
.text:00407051                 and     eax, 1
.text:00407054                 xor     eax, 1
.text:00407057                 mov     [esp+4Ch+var_2C], ecx
.text:0040705B                 shl     eax, 1Ah
.text:0040705E                 mov     ecx, ds:dword_4191C4
.text:00407064                 xor     edx, eax
.text:00407066                 mov     [esp+4Ch+var_34], edx
.text:0040706A                 mov     edx, [esp+4Ch+arg_0]
.text:0040706E                 mov     [esp+4Ch+var_28], ecx
.text:00407072                 mov     ecx, ds:dword_4191C8
.text:00407078                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040707C                 mov     [esp+4Ch+var_24], ecx
.text:00407080                 mov     ecx, ds:dword_4191CC
.text:00407086                 mov     [esp+4Ch+var_20], ecx
.text:0040708A                 mov     ecx, ds:dword_4191D0
.text:00407090                 mov     [esp+4Ch+var_1C], ecx
.text:00407094                 lea     ecx, [esp+4Ch+var_3C]
.text:00407098                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040709C                 call    sub_4070B0
.text:004070A1                 add     esp, 4Ch
.text:004070A4                 retn
.text:004070A4 sub_407010      endp
.text:004070A4
.text:004070A4 ; ---------------------------------------------------------------------------
.text:004070A5                 align 10h
.text:004070B0
.text:004070B0 ; =============== S U B R O U T I N E =======================================
.text:004070B0
.text:004070B0
.text:004070B0 ; int __cdecl sub_4070B0(int, char *, int, int)
.text:004070B0 sub_4070B0      proc near               ; CODE XREF: .text:00406C62↑p
.text:004070B0                                         ; .text:00406C92↑p ...
.text:004070B0
.text:004070B0 Block           = dword ptr -2Ch
.text:004070B0 var_28          = dword ptr -28h
.text:004070B0 Str             = dword ptr -24h
.text:004070B0 var_20          = dword ptr -20h
.text:004070B0 var_1C          = dword ptr -1Ch
.text:004070B0 var_18          = dword ptr -18h
.text:004070B0 var_14          = dword ptr -14h
.text:004070B0 arg_0           = dword ptr  4
.text:004070B0 arg_4           = dword ptr  8
.text:004070B0 arg_8           = dword ptr  0Ch
.text:004070B0 arg_C           = dword ptr  10h
.text:004070B0
.text:004070B0                 push    ebp
.text:004070B1                 push    edi
.text:004070B2                 push    esi
.text:004070B3                 push    ebx
.text:004070B4                 sub     esp, 1Ch
.text:004070B7                 call    _errno
.text:004070BC                 mov     edx, [eax]
.text:004070BE                 mov     eax, [esp+2Ch+arg_0]
.text:004070C2                 mov     [esp+2Ch+var_14], edx
.text:004070C6                 test    eax, eax
.text:004070C8                 js      loc_40726A
.text:004070CE                 mov     eax, [esp+2Ch+arg_0]
.text:004070D2                 cmp     dword_418070, eax
.text:004070D8                 ja      short loc_407150
.text:004070DA                 mov     esi, eax
.text:004070DC                 inc     esi
.text:004070DD                 cmp     esi, 1FFFFFFFh
.text:004070E3                 ja      loc_40726F
.text:004070E9                 mov     ebx, off_41807C
.text:004070EF                 cmp     ebx, offset dword_418074
.text:004070F5                 jz      loc_407241
.text:004070FB
.text:004070FB loc_4070FB:                             ; CODE XREF: sub_4070B0+1B5↓j
.text:004070FB                 mov     [esp+2Ch+Block], ebx ; void *
.text:004070FE                 lea     ecx, ds:0[esi*8]
.text:00407105                 mov     ebp, esi
.text:00407107                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040710B                 call    sub_404C20
.text:00407110                 mov     off_41807C, eax
.text:00407115                 mov     ebx, dword_418070
.text:0040711B                 sub     ebp, ebx
.text:0040711D                 lea     edi, [eax+ebx*8]
.text:00407120                 lea     eax, ds:0[ebp*8]
.text:00407127                 cmp     eax, 7
.text:0040712A                 jbe     short loc_407140
.text:0040712C                 test    edi, 4
.text:00407132                 jz      short loc_407140
.text:00407134                 mov     dword ptr [edi], 0
.text:0040713A                 sub     eax, 4
.text:0040713D                 add     edi, 4
.text:00407140
.text:00407140 loc_407140:                             ; CODE XREF: sub_4070B0+7A↑j
.text:00407140                                         ; sub_4070B0+82↑j
.text:00407140                 cld
.text:00407141                 mov     ecx, eax
.text:00407143                 shr     ecx, 2
.text:00407146                 xor     eax, eax
.text:00407148                 rep stosd
.text:0040714A                 mov     dword_418070, esi
.text:00407150
.text:00407150 loc_407150:                             ; CODE XREF: sub_4070B0+28↑j
.text:00407150                 mov     esi, off_41807C
.text:00407156                 mov     eax, [esp+2Ch+arg_0]
.text:0040715A                 mov     ebp, [esi+eax*8]
.text:0040715D                 mov     edi, [esi+eax*8+4]
.text:00407161                 mov     esi, [esp+2Ch+arg_C]
.text:00407165                 test    esi, esi
.text:00407167                 jz      loc_407237
.text:0040716D
.text:0040716D loc_40716D:                             ; CODE XREF: sub_4070B0+18C↓j
.text:0040716D                 call    _errno
.text:00407172                 mov     ebx, [eax]
.text:00407174                 mov     [esp+2Ch+var_18], esi ; int
.text:00407178                 mov     ecx, [esi]
.text:0040717A                 mov     [esp+2Ch+Block], edi ; int
.text:0040717D                 mov     edx, [esp+2Ch+arg_8]
.text:00407181                 mov     [esp+2Ch+var_28], ebp ; int
.text:00407185                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00407189                 mov     ecx, [esp+2Ch+arg_4]
.text:0040718D                 mov     [esp+2Ch+var_20], edx ; int
.text:00407191                 mov     [esp+2Ch+Str], ecx ; Str
.text:00407195                 call    sub_405F70
.text:0040719A                 mov     esi, eax
.text:0040719C                 call    _errno
.text:004071A1                 mov     [eax], ebx
.text:004071A3                 cmp     ebp, esi
.text:004071A5                 ja      short loc_40721B
.text:004071A7                 lea     ebp, [esi+1]
.text:004071AA                 mov     ebx, off_41807C
.text:004071B0                 cmp     edi, offset unk_4190B0
.text:004071B6                 mov     esi, [esp+2Ch+arg_0]
.text:004071BA                 mov     [ebx+esi*8], ebp
.text:004071BD                 jz      short loc_4071CD
.text:004071BF                 mov     [esp+2Ch+Block], edi ; Block
.text:004071C2                 call    free
.text:004071C7                 mov     ebx, off_41807C
.text:004071CD
.text:004071CD loc_4071CD:                             ; CODE XREF: sub_4070B0+10D↑j
.text:004071CD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:004071D0                 call    sub_404B90
.text:004071D5                 mov     esi, [esp+2Ch+arg_C]
.text:004071D9                 mov     edi, eax
.text:004071DB                 mov     eax, [esp+2Ch+arg_0]
.text:004071DF                 test    esi, esi
.text:004071E1                 mov     [ebx+eax*8+4], edi
.text:004071E5                 jz      short loc_407230
.text:004071E7
.text:004071E7 loc_4071E7:                             ; CODE XREF: sub_4070B0+185↓j
.text:004071E7                 call    _errno
.text:004071EC                 mov     ebx, [eax]
.text:004071EE                 mov     [esp+2Ch+var_18], esi ; int
.text:004071F2                 mov     ecx, [esi]
.text:004071F4                 mov     [esp+2Ch+Block], edi ; int
.text:004071F7                 mov     edx, [esp+2Ch+arg_8]
.text:004071FB                 mov     [esp+2Ch+var_28], ebp ; int
.text:004071FF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00407203                 mov     ecx, [esp+2Ch+arg_4]
.text:00407207                 mov     [esp+2Ch+var_20], edx ; int
.text:0040720B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040720F                 call    sub_405F70
.text:00407214                 call    _errno
.text:00407219                 mov     [eax], ebx
.text:0040721B
.text:0040721B loc_40721B:                             ; CODE XREF: sub_4070B0+F5↑j
.text:0040721B                 call    _errno
.text:00407220                 mov     ebp, [esp+2Ch+var_14]
.text:00407224                 mov     [eax], ebp
.text:00407226                 add     esp, 1Ch
.text:00407229                 mov     eax, edi
.text:0040722B                 pop     ebx
.text:0040722C                 pop     esi
.text:0040722D                 pop     edi
.text:0040722E                 pop     ebp
.text:0040722F                 retn
.text:00407230 ; ---------------------------------------------------------------------------
.text:00407230
.text:00407230 loc_407230:                             ; CODE XREF: sub_4070B0+135↑j
.text:00407230                 mov     esi, offset dword_4191B0
.text:00407235                 jmp     short loc_4071E7
.text:00407237 ; ---------------------------------------------------------------------------
.text:00407237
.text:00407237 loc_407237:                             ; CODE XREF: sub_4070B0+B7↑j
.text:00407237                 mov     esi, offset dword_4191B0
.text:0040723C                 jmp     loc_40716D
.text:00407241 ; ---------------------------------------------------------------------------
.text:00407241
.text:00407241 loc_407241:                             ; CODE XREF: sub_4070B0+45↑j
.text:00407241                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00407248                 call    sub_404B90
.text:0040724D                 mov     off_41807C, eax
.text:00407252                 mov     edi, dword_418074
.text:00407258                 mov     ebx, eax
.text:0040725A                 mov     ecx, off_418078
.text:00407260                 mov     [eax], edi
.text:00407262                 mov     [eax+4], ecx
.text:00407265                 jmp     loc_4070FB
.text:0040726A ; ---------------------------------------------------------------------------
.text:0040726A
.text:0040726A loc_40726A:                             ; CODE XREF: sub_4070B0+18↑j
.text:0040726A                 call    abort
.text:0040726F ; ---------------------------------------------------------------------------
.text:0040726F
.text:0040726F loc_40726F:                             ; CODE XREF: sub_4070B0+33↑j
.text:0040726F                 call    sub_405EA0
.text:0040726F sub_4070B0      endp
.text:0040726F
.text:0040726F ; ---------------------------------------------------------------------------
.text:00407274                 align 10h
.text:00407280
.text:00407280 ; =============== S U B R O U T I N E =======================================
.text:00407280
.text:00407280
.text:00407280 sub_407280      proc near               ; DATA XREF: .text:00407299↓o
.text:00407280                 pop     esi
.text:00407281                 pop     ebx
.text:00407282                 jns     short near ptr loc_4072DA+3
.text:00407284                 pop     ebp
.text:00407285                 add     [esi+5Bh], bl
.text:00407288                 outsb
.text:00407289                 dec     esi
.text:0040728A                 pop     ebp
.text:0040728B
.text:0040728B loc_40728B:                             ; CODE XREF: sub_405570+94↑p
.text:0040728B                 add     [ebp+56002674h], cl
.text:0040728B sub_407280      endp ; sp-analysis failed
.text:0040728B
.text:00407291                 push    ebx
.text:00407292                 sub     esp, 14h
.text:00407295                 mov     esi, [esp+20h]
.text:00407299                 mov     dword ptr [esp], offset sub_407280
.text:004072A0                 call    ds:libintl_gettext
.text:004072A6                 mov     ebx, eax
.text:004072A8                 mov     eax, ds:dword_4191E0
.text:004072AD                 cmp     ebx, eax
.text:004072AF                 jz      short loc_4072E0
.text:004072B1                 test    eax, eax
.text:004072B3                 jnz     loc_4073B0
.text:004072B9
.text:004072B9 loc_4072B9:                             ; CODE XREF: .text:004073C3↓j
.text:004072B9                 mov     dword ptr [esp+8], 1
.text:004072C1                 mov     [esp+4], ebx
.text:004072C5                 mov     dword ptr [esp], offset unk_419200
.text:004072CC                 call    sub_40A030
.text:004072D1                 test    eax, eax
.text:004072D3                 mov     edx, 0FFFFFFFFh
.text:004072D8                 jnz     short loc_40730F
.text:004072DA
.text:004072DA loc_4072DA:                             ; CODE XREF: sub_407280+2↑j
.text:004072DA                 mov     ds:dword_4191E0, ebx
.text:004072E0
.text:004072E0 loc_4072E0:                             ; CODE XREF: .text:004072AF↑j
.text:004072E0                 mov     dword ptr [esp+10h], 0
.text:004072E8                 mov     dword ptr [esp+0Ch], 0
.text:004072F0                 mov     dword ptr [esp+8], 0
.text:004072F8                 mov     [esp+4], esi
.text:004072FC                 mov     dword ptr [esp], offset unk_419200
.text:00407303                 call    sub_40A1B0
.text:00407308                 xor     edx, edx
.text:0040730A                 test    eax, eax
.text:0040730C                 setz    dl
.text:0040730F
.text:0040730F loc_40730F:                             ; CODE XREF: .text:004072D8↑j
.text:0040730F                 test    edx, edx
.text:00407311                 mov     eax, edx
.text:00407313                 jz      short loc_407320
.text:00407315
.text:00407315 loc_407315:                             ; CODE XREF: .text:00407395↓j
.text:00407315                 add     esp, 14h
.text:00407318                 pop     ebx
.text:00407319                 pop     esi
.text:0040731A                 retn
.text:0040731A ; ---------------------------------------------------------------------------
.text:0040731B                 align 10h
.text:00407320
.text:00407320 loc_407320:                             ; CODE XREF: .text:00407313↑j
.text:00407320                 mov     dword ptr [esp], 407286h
.text:00407327                 call    ds:libintl_gettext
.text:0040732D                 mov     ebx, eax
.text:0040732F                 mov     eax, ds:dword_4191F0
.text:00407334                 cmp     ebx, eax
.text:00407336                 jz      short loc_407363
.text:00407338                 test    eax, eax
.text:0040733A                 jnz     short loc_40739A
.text:0040733C
.text:0040733C loc_40733C:                             ; CODE XREF: .text:004073AE↓j
.text:0040733C                 mov     dword ptr [esp+8], 1
.text:00407344                 mov     [esp+4], ebx
.text:00407348                 mov     dword ptr [esp], offset unk_419220
.text:0040734F                 call    sub_40A030
.text:00407354                 test    eax, eax
.text:00407356                 mov     edx, 0FFFFFFFFh
.text:0040735B                 jnz     short loc_407393
.text:0040735D                 mov     ds:dword_4191F0, ebx
.text:00407363
.text:00407363 loc_407363:                             ; CODE XREF: .text:00407336↑j
.text:00407363                 mov     dword ptr [esp+10h], 0
.text:0040736B                 mov     dword ptr [esp+0Ch], 0
.text:00407373                 mov     dword ptr [esp+8], 0
.text:0040737B                 mov     [esp+4], esi
.text:0040737F                 mov     dword ptr [esp], offset unk_419220
.text:00407386                 call    sub_40A1B0
.text:0040738B                 xor     edx, edx
.text:0040738D                 test    eax, eax
.text:0040738F                 setz    dl
.text:00407392                 dec     edx
.text:00407393
.text:00407393 loc_407393:                             ; CODE XREF: .text:0040735B↑j
.text:00407393                 mov     eax, edx
.text:00407395                 jmp     loc_407315
.text:0040739A ; ---------------------------------------------------------------------------
.text:0040739A
.text:0040739A loc_40739A:                             ; CODE XREF: .text:0040733A↑j
.text:0040739A                 mov     dword ptr [esp], offset unk_419220
.text:004073A1                 call    sub_40A570
.text:004073A6                 xor     edx, edx
.text:004073A8                 mov     ds:dword_4191F0, edx
.text:004073AE                 jmp     short loc_40733C
.text:004073B0 ; ---------------------------------------------------------------------------
.text:004073B0
.text:004073B0 loc_4073B0:                             ; CODE XREF: .text:004072B3↑j
.text:004073B0                 mov     dword ptr [esp], offset unk_419200
.text:004073B7                 call    sub_40A570
.text:004073BC                 xor     eax, eax
.text:004073BE                 mov     ds:dword_4191E0, eax
.text:004073C3                 jmp     loc_4072B9
.text:004073C3 ; ---------------------------------------------------------------------------
.text:004073C8                 align 10h
.text:004073D0
.text:004073D0 ; =============== S U B R O U T I N E =======================================
.text:004073D0
.text:004073D0
.text:004073D0 sub_4073D0      proc near               ; CODE XREF: sub_407420+3A↓j
.text:004073D0                                         ; sub_40A600+46B↓p ...
.text:004073D0
.text:004073D0 arg_0           = dword ptr  4
.text:004073D0 arg_4           = dword ptr  8
.text:004073D0 arg_8           = dword ptr  0Ch
.text:004073D0
.text:004073D0                 mov     edx, [esp+arg_8]
.text:004073D4                 mov     ecx, [esp+arg_4]
.text:004073D8                 mov     eax, [esp+arg_0]
.text:004073DC                 mov     [ecx+1], dl
.text:004073DF                 sar     edx, 8
.text:004073E2                 mov     [ecx], al
.text:004073E4                 mov     [ecx+2], dl
.text:004073E7                 retn
.text:004073E7 sub_4073D0      endp
.text:004073E7
.text:004073E7 ; ---------------------------------------------------------------------------
.text:004073E8                 align 10h
.text:004073F0
.text:004073F0 ; =============== S U B R O U T I N E =======================================
.text:004073F0
.text:004073F0
.text:004073F0 sub_4073F0      proc near               ; CODE XREF: sub_407460+3F↓j
.text:004073F0                                         ; sub_40A600+313B↓p
.text:004073F0
.text:004073F0 arg_0           = dword ptr  4
.text:004073F0 arg_4           = dword ptr  8
.text:004073F0 arg_8           = dword ptr  0Ch
.text:004073F0 arg_C           = dword ptr  10h
.text:004073F0
.text:004073F0                 push    ebx
.text:004073F1                 mov     edx, [esp+4+arg_8]
.text:004073F5                 mov     ebx, [esp+4+arg_C]
.text:004073F9                 mov     ecx, [esp+4+arg_4]
.text:004073FD                 mov     eax, [esp+4+arg_0]
.text:00407401                 mov     [ecx+1], dl
.text:00407404                 sar     edx, 8
.text:00407407                 mov     [ecx+3], bl
.text:0040740A                 sar     ebx, 8
.text:0040740D                 mov     [ecx], al
.text:0040740F                 mov     [ecx+2], dl
.text:00407412                 mov     [ecx+4], bl
.text:00407415                 pop     ebx
.text:00407416                 retn
.text:00407416 sub_4073F0      endp
.text:00407416
.text:00407416 ; ---------------------------------------------------------------------------
.text:00407417                 align 10h
.text:00407420
.text:00407420 ; =============== S U B R O U T I N E =======================================
.text:00407420
.text:00407420
.text:00407420 sub_407420      proc near               ; CODE XREF: sub_40A600+967↓p
.text:00407420                                         ; sub_40A600+137C↓p ...
.text:00407420
.text:00407420 arg_0           = dword ptr  4
.text:00407420 arg_4           = dword ptr  8
.text:00407420 arg_8           = dword ptr  0Ch
.text:00407420 arg_C           = dword ptr  10h
.text:00407420
.text:00407420                 push    edi
.text:00407421                 push    esi
.text:00407422                 push    ebx
.text:00407423                 mov     edx, [esp+0Ch+arg_C]
.text:00407427                 mov     ebx, [esp+0Ch+arg_4]
.text:0040742B                 mov     edi, [esp+0Ch+arg_0]
.text:0040742F                 mov     esi, [esp+0Ch+arg_8]
.text:00407433                 lea     ecx, [edx+3]
.text:00407436                 cmp     edx, ebx
.text:00407438                 jz      short loc_40744B
.text:0040743A                 lea     esi, [esi+0]
.text:00407440
.text:00407440 loc_407440:                             ; CODE XREF: sub_407420+29↓j
.text:00407440                 dec     edx
.text:00407441                 dec     ecx
.text:00407442                 cmp     edx, ebx
.text:00407444                 movzx   eax, byte ptr [edx]
.text:00407447                 mov     [ecx], al
.text:00407449                 jnz     short loc_407440
.text:0040744B
.text:0040744B loc_40744B:                             ; CODE XREF: sub_407420+18↑j
.text:0040744B                 mov     [esp+0Ch+arg_8], esi
.text:0040744F                 mov     [esp+0Ch+arg_0], edi
.text:00407453                 mov     [esp+0Ch+arg_4], ebx
.text:00407457                 pop     ebx
.text:00407458                 pop     esi
.text:00407459                 pop     edi
.text:0040745A                 jmp     sub_4073D0
.text:0040745A sub_407420      endp
.text:0040745A
.text:0040745A ; ---------------------------------------------------------------------------
.text:0040745F                 align 10h
.text:00407460
.text:00407460 ; =============== S U B R O U T I N E =======================================
.text:00407460
.text:00407460
.text:00407460 sub_407460      proc near               ; CODE XREF: sub_40A600+30CC↓p
.text:00407460                                         ; sub_40A600+30F8↓p ...
.text:00407460
.text:00407460 arg_0           = dword ptr  4
.text:00407460 arg_4           = dword ptr  8
.text:00407460 arg_8           = dword ptr  0Ch
.text:00407460 arg_C           = dword ptr  10h
.text:00407460 arg_10          = dword ptr  14h
.text:00407460
.text:00407460                 push    ebp
.text:00407461                 push    edi
.text:00407462                 push    esi
.text:00407463                 push    ebx
.text:00407464                 mov     edx, [esp+10h+arg_10]
.text:00407468                 mov     ebx, [esp+10h+arg_4]
.text:0040746C                 mov     ebp, [esp+10h+arg_0]
.text:00407470                 mov     edi, [esp+10h+arg_8]
.text:00407474                 lea     ecx, [edx+5]
.text:00407477                 cmp     edx, ebx
.text:00407479                 mov     esi, [esp+10h+arg_C]
.text:0040747D                 jz      short loc_40748B
.text:0040747F                 nop
.text:00407480
.text:00407480 loc_407480:                             ; CODE XREF: sub_407460+29↓j
.text:00407480                 dec     edx
.text:00407481                 dec     ecx
.text:00407482                 cmp     edx, ebx
.text:00407484                 movzx   eax, byte ptr [edx]
.text:00407487                 mov     [ecx], al
.text:00407489                 jnz     short loc_407480
.text:0040748B
.text:0040748B loc_40748B:                             ; CODE XREF: sub_407460+1D↑j
.text:0040748B                 mov     [esp+10h+arg_C], esi
.text:0040748F                 mov     [esp+10h+arg_8], edi
.text:00407493                 mov     [esp+10h+arg_0], ebp
.text:00407497                 mov     [esp+10h+arg_4], ebx
.text:0040749B                 pop     ebx
.text:0040749C                 pop     esi
.text:0040749D                 pop     edi
.text:0040749E                 pop     ebp
.text:0040749F                 jmp     sub_4073F0
.text:0040749F sub_407460      endp
.text:0040749F
.text:0040749F ; ---------------------------------------------------------------------------
.text:004074A4                 align 10h
.text:004074B0
.text:004074B0 ; =============== S U B R O U T I N E =======================================
.text:004074B0
.text:004074B0
.text:004074B0 sub_4074B0      proc near               ; CODE XREF: sub_40A600+5C6↓p
.text:004074B0
.text:004074B0 arg_0           = dword ptr  4
.text:004074B0 arg_4           = dword ptr  8
.text:004074B0 arg_8           = dword ptr  0Ch
.text:004074B0
.text:004074B0                 push    ebx
.text:004074B1                 mov     edx, [esp+4+arg_4]
.text:004074B5                 xor     ebx, ebx
.text:004074B7                 mov     ecx, [esp+4+arg_8]
.text:004074BB                 sub     edx, 2
.text:004074BE                 cmp     edx, [esp+4+arg_0]
.text:004074C2                 jbe     short loc_4074CA
.text:004074C4                 cmp     byte ptr [edx-1], 5Ch ; '\'
.text:004074C8                 jz      short loc_407502
.text:004074CA
.text:004074CA loc_4074CA:                             ; CODE XREF: sub_4074B0+12↑j
.text:004074CA                                         ; sub_4074B0+54↓j
.text:004074CA                 movzx   edx, byte ptr [edx]
.text:004074CD                 xor     eax, eax
.text:004074CF                 cmp     dl, 28h ; '('
.text:004074D2                 jz      short loc_4074F7
.text:004074D4
.text:004074D4 loc_4074D4:                             ; CODE XREF: sub_4074B0+50↓j
.text:004074D4                 cmp     dl, 7Ch ; '|'
.text:004074D7                 jz      short loc_4074E0
.text:004074D9
.text:004074D9 loc_4074D9:                             ; CODE XREF: sub_4074B0+3D↓j
.text:004074D9                                         ; sub_4074B0+45↓j
.text:004074D9                 pop     ebx
.text:004074DA                 retn
.text:004074DA ; ---------------------------------------------------------------------------
.text:004074DB                 align 10h
.text:004074E0
.text:004074E0 loc_4074E0:                             ; CODE XREF: sub_4074B0+27↑j
.text:004074E0                 and     ecx, 0FFFF8000h
.text:004074E6                 test    cx, cx
.text:004074E9                 jnz     short loc_4074F0
.text:004074EB                 test    bl, bl
.text:004074ED                 jz      short loc_4074D9
.text:004074EF                 nop
.text:004074F0
.text:004074F0 loc_4074F0:                             ; CODE XREF: sub_4074B0+39↑j
.text:004074F0                                         ; sub_4074B0+4A↓j ...
.text:004074F0                 mov     eax, 1
.text:004074F5                 jmp     short loc_4074D9
.text:004074F7 ; ---------------------------------------------------------------------------
.text:004074F7
.text:004074F7 loc_4074F7:                             ; CODE XREF: sub_4074B0+22↑j
.text:004074F7                 test    ch, 20h
.text:004074FA                 jnz     short loc_4074F0
.text:004074FC                 test    bl, bl
.text:004074FE                 jnz     short loc_4074F0
.text:00407500                 jmp     short loc_4074D4
.text:00407502 ; ---------------------------------------------------------------------------
.text:00407502
.text:00407502 loc_407502:                             ; CODE XREF: sub_4074B0+18↑j
.text:00407502                 mov     bl, 1
.text:00407504                 jmp     short loc_4074CA
.text:00407504 sub_4074B0      endp
.text:00407504
.text:00407504 ; ---------------------------------------------------------------------------
.text:00407506                 align 10h
.text:00407510
.text:00407510 ; =============== S U B R O U T I N E =======================================
.text:00407510
.text:00407510
.text:00407510 sub_407510      proc near               ; CODE XREF: sub_40A600+B9A↓p
.text:00407510
.text:00407510 var_9           = byte ptr -9
.text:00407510 var_8           = dword ptr -8
.text:00407510 var_4           = dword ptr -4
.text:00407510 arg_0           = dword ptr  4
.text:00407510 arg_4           = dword ptr  8
.text:00407510 arg_8           = dword ptr  0Ch
.text:00407510
.text:00407510                 sub     esp, 0Ch
.text:00407513                 mov     edx, [esp+0Ch+arg_8]
.text:00407517                 mov     [esp+0Ch+var_4], esi
.text:0040751B                 mov     esi, [esp+0Ch+arg_0]
.text:0040751F                 mov     [esp+0Ch+var_8], ebx
.text:00407523                 lea     eax, [esi+1]
.text:00407526                 movzx   ebx, byte ptr [esi]
.text:00407529                 cmp     bl, 5Ch ; '\'
.text:0040752C                 setz    [esp+0Ch+var_9]
.text:00407531                 cmp     eax, [esp+0Ch+arg_4]
.text:00407535                 sbb     ecx, ecx
.text:00407537                 and     ecx, eax
.text:00407539                 xor     eax, eax
.text:0040753B                 test    dh, 20h
.text:0040753E                 jz      short loc_407578
.text:00407540                 cmp     bl, 29h ; ')'
.text:00407543
.text:00407543 loc_407543:                             ; CODE XREF: sub_407510+76↓j
.text:00407543                 jz      short loc_407561
.text:00407545
.text:00407545 loc_407545:                             ; CODE XREF: sub_407510+6D↓j
.text:00407545                                         ; sub_407510+71↓j
.text:00407545                 and     edx, 0FFFF8000h
.text:0040754B                 test    dx, dx
.text:0040754E                 jz      short loc_407568
.text:00407550                 cmp     byte ptr [esi], 7Ch ; '|'
.text:00407553
.text:00407553 loc_407553:                             ; CODE XREF: sub_407510+66↓j
.text:00407553                 jz      short loc_407561
.text:00407555
.text:00407555 loc_407555:                             ; CODE XREF: sub_407510+56↓j
.text:00407555                                         ; sub_407510+5D↓j ...
.text:00407555                 mov     ebx, [esp+0Ch+var_8]
.text:00407559                 mov     esi, [esp+0Ch+var_4]
.text:0040755D                 add     esp, 0Ch
.text:00407560                 retn
.text:00407561 ; ---------------------------------------------------------------------------
.text:00407561
.text:00407561 loc_407561:                             ; CODE XREF: sub_407510:loc_407543↑j
.text:00407561                                         ; sub_407510:loc_407553↑j
.text:00407561                 mov     eax, 1
.text:00407566                 jmp     short loc_407555
.text:00407568 ; ---------------------------------------------------------------------------
.text:00407568
.text:00407568 loc_407568:                             ; CODE XREF: sub_407510+3E↑j
.text:00407568                 cmp     [esp+0Ch+var_9], 0
.text:0040756D                 jz      short loc_407555
.text:0040756F                 test    ecx, ecx
.text:00407571                 jz      short loc_407555
.text:00407573                 cmp     byte ptr [ecx], 7Ch ; '|'
.text:00407576                 jmp     short loc_407553
.text:00407578 ; ---------------------------------------------------------------------------
.text:00407578
.text:00407578 loc_407578:                             ; CODE XREF: sub_407510+2E↑j
.text:00407578                 cmp     [esp+0Ch+var_9], 0
.text:0040757D                 jz      short loc_407545
.text:0040757F                 test    ecx, ecx
.text:00407581                 jz      short loc_407545
.text:00407583                 cmp     byte ptr [ecx], 29h ; ')'
.text:00407586                 jmp     short loc_407543
.text:00407586 sub_407510      endp
.text:00407586
.text:00407586 ; ---------------------------------------------------------------------------
.text:00407588                 align 10h
.text:00407590
.text:00407590 ; =============== S U B R O U T I N E =======================================
.text:00407590
.text:00407590
.text:00407590 sub_407590      proc near               ; CODE XREF: sub_40A600:loc_40C6E3↓p
.text:00407590
.text:00407590 arg_0           = dword ptr  4
.text:00407590 arg_4           = dword ptr  8
.text:00407590 arg_8           = dword ptr  0Ch
.text:00407590 arg_C           = dword ptr  10h
.text:00407590 arg_10          = dword ptr  14h
.text:00407590 arg_14          = dword ptr  18h
.text:00407590
.text:00407590                 push    ebp
.text:00407591                 push    edi
.text:00407592                 push    esi
.text:00407593                 push    ebx
.text:00407594                 mov     ecx, [esp+10h+arg_4]
.text:00407598                 mov     esi, [esp+10h+arg_0]
.text:0040759C                 mov     ebx, [esp+10h+arg_C]
.text:004075A0                 mov     edx, [ecx]
.text:004075A2                 cmp     edx, [esp+10h+arg_8]
.text:004075A6                 jz      loc_40765A
.text:004075AC                 lea     edi, [edx+1]
.text:004075AF                 mov     [ecx], edi
.text:004075B1                 xor     ecx, ecx
.text:004075B3                 test    [esp+10h+arg_10], 10000h
.text:004075BB                 setz    cl
.text:004075BE                 dec     ecx
.text:004075BF                 and     ecx, 0Bh
.text:004075C2                 test    ebx, ebx
.text:004075C4                 jz      loc_407655
.text:004075CA                 movzx   edi, byte ptr [edx]
.text:004075CD                 and     esi, 0FFh
.text:004075D3                 movsx   esi, byte ptr [esi+ebx]
.text:004075D7                 movzx   ebp, byte ptr [edi+ebx]
.text:004075DB
.text:004075DB loc_4075DB:                             ; CODE XREF: sub_407590+C8↓j
.text:004075DB                 cmp     esi, ebp
.text:004075DD                 mov     edx, esi
.text:004075DF                 ja      short loc_40764E
.text:004075E1                 jmp     short loc_4075F0
.text:004075E1 ; ---------------------------------------------------------------------------
.text:004075E3                 align 10h
.text:004075F0
.text:004075F0 loc_4075F0:                             ; CODE XREF: sub_407590+51↑j
.text:004075F0                                         ; sub_407590+BC↓j
.text:004075F0                 test    ebx, ebx
.text:004075F2                 movzx   eax, dl
.text:004075F5                 jz      short loc_4075FE
.text:004075F7                 movzx   ecx, dl
.text:004075FA                 movzx   eax, byte ptr [ecx+ebx]
.text:004075FE
.text:004075FE loc_4075FE:                             ; CODE XREF: sub_407590+65↑j
.text:004075FE                 mov     edi, [esp+10h+arg_14]
.text:00407602                 sar     eax, 3
.text:00407605                 add     edi, eax
.text:00407607                 test    ebx, ebx
.text:00407609                 movzx   eax, dl
.text:0040760C                 jz      short loc_407615
.text:0040760E                 movzx   esi, dl
.text:00407611                 movzx   eax, byte ptr [esi+ebx]
.text:00407615
.text:00407615 loc_407615:                             ; CODE XREF: sub_407590+7C↑j
.text:00407615                 mov     esi, [esp+10h+arg_14]
.text:00407619                 sar     eax, 3
.text:0040761C                 movzx   ecx, dl
.text:0040761F                 add     eax, esi
.text:00407621                 test    ebx, ebx
.text:00407623                 movzx   esi, byte ptr [eax]
.text:00407626                 jz      short loc_40762F
.text:00407628                 movzx   eax, dl
.text:0040762B                 movzx   ecx, byte ptr [eax+ebx]
.text:0040762F
.text:0040762F loc_40762F:                             ; CODE XREF: sub_407590+96↑j
.text:0040762F                 mov     eax, ecx
.text:00407631                 inc     edx
.text:00407632                 and     eax, 1F8h
.text:00407637                 sub     ecx, eax
.text:00407639                 mov     eax, 1
.text:0040763E                 shl     eax, cl
.text:00407640                 mov     ecx, eax
.text:00407642                 mov     eax, esi
.text:00407644                 or      al, cl
.text:00407646                 mov     [edi], al
.text:00407648
.text:00407648 loc_407648:                             ; CODE XREF: .text:004076BC↓j
.text:00407648                 xor     ecx, ecx
.text:0040764A                 cmp     edx, ebp
.text:0040764C                 jbe     short loc_4075F0
.text:0040764E
.text:0040764E loc_40764E:                             ; CODE XREF: sub_407590+4F↑j
.text:0040764E                 mov     eax, ecx
.text:00407650
.text:00407650 loc_407650:                             ; CODE XREF: sub_407590+CF↓j
.text:00407650                 pop     ebx
.text:00407651                 pop     esi
.text:00407652                 pop     edi
.text:00407653                 pop     ebp
.text:00407654                 retn
.text:00407655 ; ---------------------------------------------------------------------------
.text:00407655
.text:00407655 loc_407655:                             ; CODE XREF: sub_407590+34↑j
.text:00407655                 movzx   ebp, byte ptr [edx]
.text:00407658                 jmp     short loc_4075DB
.text:0040765A ; ---------------------------------------------------------------------------
.text:0040765A
.text:0040765A loc_40765A:                             ; CODE XREF: sub_407590+16↑j
.text:0040765A                 mov     eax, 0Bh
.text:0040765F                 jmp     short loc_407650
.text:0040765F sub_407590      endp
.text:0040765F
.text:0040765F ; ---------------------------------------------------------------------------
.text:00407661                 db 0EBh, 0Dh, 90h
.text:00407664                 align 10h
.text:00407670 jpt_407967      dd offset loc_407F1B    ; DATA XREF: sub_4076F0:loc_407960↓r
.text:00407670                                         ; sub_4076F0+BEF↓r ...
.text:00407670                 dd offset loc_407F33    ; jump table for switch statement
.text:00407670                 dd offset loc_407F38
.text:00407670                 dd offset loc_408033
.text:00407670                 dd offset loc_409896
.text:00407670                 dd offset loc_4097A0
.text:00407688 jpt_4080F4      dd offset loc_4096B4    ; DATA XREF: sub_4076F0+9FD↓r
.text:00407688                 dd offset loc_4092B0    ; jump table for switch statement
.text:00407690 ; ---------------------------------------------------------------------------
.text:00407690                 adc     edx, [ecx-6F36FFC0h]
.text:00407696                 inc     eax
.text:00407697                 add     [ebp-70h], ch
.text:0040769A                 inc     eax
.text:0040769B                 add     [eax], dh
.text:0040769D                 nop
.text:0040769E                 inc     eax
.text:0040769F                 add     [esi], dl
.text:004076A1                 nop
.text:004076A2                 inc     eax
.text:004076A3                 add     [edx+11004086h], cl
.text:004076A9                 nop
.text:004076AA                 inc     eax
.text:004076AB                 add     [eax+edx*4], cl
.text:004076AE                 inc     eax
.text:004076AF                 add     [ecx-6AFFBF72h], dl
.text:004076B5                 mov     word ptr [eax+0], es
.text:004076B8                 cld
.text:004076B9                 mov     eax, [eax+0]
.text:004076BC                 jbe     short loc_407648
.text:004076BE                 inc     eax
.text:004076BF                 add     al, dh
.text:004076C1                 mov     [eax+0], al
.text:004076C4                 test    al, 86h
.text:004076C6                 inc     eax
.text:004076C7                 add     [edi-7Ah], bl
.text:004076CA                 inc     eax
.text:004076CB                 add     [edi], al
.text:004076CD                 xchg    al, [eax+0]
.text:004076D0                 push    edi
.text:004076D1                 test    [eax+0], eax
.text:004076D4                 cmpsb
.text:004076D5                 test    [eax+0], al
.text:004076D8                 mov     edx, 0E8004083h
.text:004076DD                 add     byte ptr [eax+0], 0E2h ; 'â'
.text:004076E1                 add     dword ptr [eax+0], offset loc_4080F6
.text:004076E8                 nop
.text:004076E9                 lea     esi, [esi+0]
.text:004076F0
.text:004076F0 ; =============== S U B R O U T I N E =======================================
.text:004076F0
.text:004076F0
.text:004076F0 sub_4076F0      proc near               ; CODE XREF: .text:0040A44E↓p
.text:004076F0                                         ; .text:0040A460↓j ...
.text:004076F0
.text:004076F0 Size            = dword ptr -0BCh
.text:004076F0 var_B8          = dword ptr -0B8h
.text:004076F0 var_B4          = dword ptr -0B4h
.text:004076F0 var_B0          = dword ptr -0B0h
.text:004076F0 var_A5          = byte ptr -0A5h
.text:004076F0 var_A4          = dword ptr -0A4h
.text:004076F0 var_A0          = dword ptr -0A0h
.text:004076F0 var_9C          = dword ptr -9Ch
.text:004076F0 var_97          = byte ptr -97h
.text:004076F0 var_96          = byte ptr -96h
.text:004076F0 var_95          = byte ptr -95h
.text:004076F0 var_94          = dword ptr -94h
.text:004076F0 var_90          = dword ptr -90h
.text:004076F0 var_8C          = dword ptr -8Ch
.text:004076F0 var_88          = dword ptr -88h
.text:004076F0 var_84          = dword ptr -84h
.text:004076F0 var_80          = dword ptr -80h
.text:004076F0 var_7C          = dword ptr -7Ch
.text:004076F0 var_78          = dword ptr -78h
.text:004076F0 var_74          = dword ptr -74h
.text:004076F0 var_70          = dword ptr -70h
.text:004076F0 var_6C          = dword ptr -6Ch
.text:004076F0 var_68          = dword ptr -68h
.text:004076F0 var_64          = dword ptr -64h
.text:004076F0 var_60          = dword ptr -60h
.text:004076F0 var_5C          = dword ptr -5Ch
.text:004076F0 var_58          = dword ptr -58h
.text:004076F0 var_54          = dword ptr -54h
.text:004076F0 var_50          = dword ptr -50h
.text:004076F0 var_4C          = dword ptr -4Ch
.text:004076F0 var_48          = dword ptr -48h
.text:004076F0 var_44          = dword ptr -44h
.text:004076F0 var_40          = dword ptr -40h
.text:004076F0 var_3C          = dword ptr -3Ch
.text:004076F0 var_38          = dword ptr -38h
.text:004076F0 var_34          = dword ptr -34h
.text:004076F0 var_30          = dword ptr -30h
.text:004076F0 Src             = dword ptr -2Ch
.text:004076F0 var_28          = dword ptr -28h
.text:004076F0 var_24          = dword ptr -24h
.text:004076F0 arg_0           = dword ptr  4
.text:004076F0 arg_4           = dword ptr  8
.text:004076F0 arg_8           = dword ptr  0Ch
.text:004076F0 arg_C           = dword ptr  10h
.text:004076F0 arg_10          = dword ptr  14h
.text:004076F0 arg_14          = dword ptr  18h
.text:004076F0 arg_18          = dword ptr  1Ch
.text:004076F0 arg_1C          = dword ptr  20h
.text:004076F0
.text:004076F0                 push    ebp
.text:004076F1                 push    edi
.text:004076F2                 push    esi
.text:004076F3                 push    ebx
.text:004076F4                 sub     esp, 0ACh
.text:004076FA                 mov     ebx, [esp+0BCh+arg_0]
.text:00407701                 mov     [esp+0BCh+var_54], 0
.text:00407709                 mov     ecx, [esp+0BCh+arg_0]
.text:00407710                 mov     esi, [esp+0BCh+arg_1C]
.text:00407717                 mov     [esp+0BCh+var_60], 101h
.text:0040771F                 mov     ebp, [ebx+8]
.text:00407722                 mov     edi, [ecx]
.text:00407724                 mov     [esp+0BCh+var_64], 100h
.text:0040772C                 mov     eax, [ebx+18h]
.text:0040772F                 mov     edx, [ebx+14h]
.text:00407732                 mov     [esp+0BCh+var_4C], edi
.text:00407736                 inc     eax
.text:00407737                 add     edi, ebp
.text:00407739                 mov     [esp+0BCh+var_58], edx
.text:0040773D                 mov     [esp+0BCh+var_50], edi
.text:00407741                 mov     [esp+0BCh+var_5C], eax
.text:00407745                 mov     [esp+0BCh+var_7C], 0
.text:0040774D                 mov     [esp+0BCh+var_88], 0
.text:00407755                 mov     [esp+0BCh+var_8C], 0
.text:0040775D                 mov     [esp+0BCh+Size], 14h ; Size
.text:00407764                 call    malloc
.text:00407769                 mov     [esp+0BCh+Src], eax
.text:00407770                 mov     edx, eax
.text:00407772                 test    edx, edx
.text:00407774                 mov     eax, 0FFFFFFFEh
.text:00407779                 jz      loc_407E47
.text:0040777F                 mov     edx, [esp+0BCh+arg_0]
.text:00407786                 xor     edi, edi
.text:00407788                 mov     ebp, 5
.text:0040778D                 mov     [esp+0BCh+var_28], ebp
.text:00407794                 mov     [esp+0BCh+var_24], edi
.text:0040779B                 mov     ebx, [edx+18h]
.text:0040779E                 test    ebx, ebx
.text:004077A0                 jnz     loc_409987
.text:004077A6                 mov     [esp+0BCh+var_90], 0
.text:004077AE                 mov     [esp+0BCh+var_84], 0
.text:004077B6                 mov     [esp+0BCh+var_80], 0
.text:004077BE                 mov     [esp+0BCh+var_74], 0
.text:004077C6                 mov     [esp+0BCh+var_70], 0
.text:004077CE                 mov     [esp+0BCh+var_6C], 0
.text:004077D6                 mov     [esp+0BCh+var_68], 0
.text:004077DE                 mov     [esp+0BCh+var_94], 0
.text:004077E6                 mov     [esp+0BCh+var_78], 0
.text:004077EE
.text:004077EE loc_4077EE:                             ; CODE XREF: sub_4076F0+236C↓j
.text:004077EE                 mov     eax, [esp+0BCh+arg_14]
.text:004077F5                 test    eax, eax
.text:004077F7                 js      loc_407EE5
.text:004077FD                 mov     ebp, [esp+0BCh+arg_8]
.text:00407804                 mov     ecx, [esp+0BCh+arg_10]
.text:0040780B                 add     ebp, ecx
.text:0040780D                 cmp     [esp+0BCh+arg_14], ebp
.text:00407814                 jg      loc_407EE5
.text:0040781A                 mov     ebp, 1
.text:0040781F                 cmp     ebp, [esp+0BCh+var_5C]
.text:00407823                 jnb     short loc_407868
.text:00407825                 mov     eax, [esp+0BCh+var_78]
.text:00407829                 add     eax, 4
.text:0040782C
.text:0040782C loc_40782C:                             ; CODE XREF: sub_4076F0+176↓j
.text:0040782C                 mov     ecx, [esp+0BCh+var_74]
.text:00407830                 mov     ebx, [esp+0BCh+var_70]
.text:00407834                 mov     edx, [esp+0BCh+var_6C]
.text:00407838                 mov     dword ptr [ecx+ebp*4], offset unk_419350
.text:0040783F                 mov     edi, [esp+0BCh+var_68]
.text:00407843                 mov     dword ptr [ebx+ebp*4], offset unk_419350
.text:0040784A                 mov     dword ptr [edx+ebp*4], offset unk_419350
.text:00407851                 mov     dword ptr [edi+ebp*4], offset unk_419350
.text:00407858                 inc     ebp
.text:00407859                 or      dword ptr [eax], 3
.text:0040785C                 and     byte ptr [eax], 0E3h
.text:0040785F                 add     eax, 4
.text:00407862                 cmp     ebp, [esp+0BCh+var_5C]
.text:00407866                 jb      short loc_40782C
.text:00407868
.text:00407868 loc_407868:                             ; CODE XREF: sub_4076F0+133↑j
.text:00407868                 mov     eax, [esp+0BCh+arg_10]
.text:0040786F                 test    eax, eax
.text:00407871                 jnz     short loc_4078AC
.text:00407873                 mov     ebp, [esp+0BCh+arg_4]
.text:0040787A                 test    ebp, ebp
.text:0040787C                 jz      short loc_4078AC
.text:0040787E                 mov     ebx, [esp+0BCh+arg_4]
.text:00407885                 xor     edx, edx
.text:00407887                 xor     edi, edi
.text:00407889                 mov     [esp+0BCh+arg_4], edx
.text:00407890                 mov     ecx, [esp+0BCh+arg_8]
.text:00407897                 mov     [esp+0BCh+arg_8], edi
.text:0040789E                 mov     [esp+0BCh+arg_C], ebx
.text:004078A5                 mov     [esp+0BCh+arg_10], ecx
.text:004078AC
.text:004078AC loc_4078AC:                             ; CODE XREF: sub_4076F0+181↑j
.text:004078AC                                         ; sub_4076F0+18C↑j
.text:004078AC                 mov     ecx, [esp+0BCh+arg_4]
.text:004078B3                 mov     eax, [esp+0BCh+arg_8]
.text:004078BA                 mov     ebp, [esp+0BCh+arg_C]
.text:004078C1                 mov     edi, [esp+0BCh+arg_10]
.text:004078C8                 add     ecx, eax
.text:004078CA                 mov     [esp+0BCh+var_34], ecx
.text:004078D1                 add     ebp, edi
.text:004078D3                 cmp     esi, [esp+0BCh+arg_8]
.text:004078DA                 mov     [esp+0BCh+var_38], ebp
.text:004078E1                 jg      loc_409962
.text:004078E7                 mov     edx, [esp+0BCh+arg_4]
.text:004078EE                 add     esi, edx
.text:004078F0                 mov     [esp+0BCh+var_3C], esi
.text:004078F7                 mov     esi, [esp+0BCh+arg_C]
.text:004078FE
.text:004078FE loc_4078FE:                             ; CODE XREF: sub_4076F0+2292↓j
.text:004078FE                 mov     [esp+0BCh+var_40], esi
.text:00407902                 mov     ecx, [esp+0BCh+arg_8]
.text:00407909                 test    ecx, ecx
.text:0040790B                 jle     loc_409938
.text:00407911                 mov     eax, [esp+0BCh+arg_8]
.text:00407918                 cmp     [esp+0BCh+arg_14], eax
.text:0040791F                 jg      loc_409938
.text:00407925                 mov     edx, [esp+0BCh+arg_4]
.text:0040792C                 mov     ebx, [esp+0BCh+arg_14]
.text:00407933                 mov     esi, [esp+0BCh+var_3C]
.text:0040793A                 add     edx, ebx
.text:0040793C                 mov     [esp+0BCh+var_44], edx
.text:00407940                 mov     [esp+0BCh+var_48], esi
.text:00407944
.text:00407944 loc_407944:                             ; CODE XREF: sub_4076F0+469↓j
.text:00407944                                         ; sub_4076F0+47A↓j ...
.text:00407944                 mov     edx, [esp+0BCh+var_50]
.text:00407948                 mov     eax, offset loc_407969
.text:0040794D                 cmp     [esp+0BCh+var_4C], edx
.text:00407951                 jz      short loc_407967
.text:00407953
.text:00407953 loc_407953:                             ; CODE XREF: sub_4076F0+838↓j
.text:00407953                 mov     ebp, [esp+0BCh+var_4C]
.text:00407957                 movzx   ebx, byte ptr [ebp+0]
.text:0040795B                 inc     ebp
.text:0040795C                 mov     [esp+0BCh+var_4C], ebp
.text:00407960
.text:00407960 loc_407960:                             ; CODE XREF: sub_4076F0+1CA0↓j
.text:00407960                 mov     eax, ds:jpt_407967[ebx*4] ; switch 6 cases
.text:00407967
.text:00407967 loc_407967:                             ; CODE XREF: sub_4076F0+261↑j
.text:00407967                                         ; sub_4076F0+83E↓j ...
.text:00407967                 jmp     eax             ; switch jump
.text:00407969 ; ---------------------------------------------------------------------------
.text:00407969
.text:00407969 loc_407969:                             ; DATA XREF: sub_4076F0+258↑o
.text:00407969                                         ; sub_4076F0+82F↓o ...
.text:00407969                 mov     eax, [esp+0BCh+var_40]
.text:0040796D                 cmp     [esp+0BCh+var_44], eax
.text:00407971                 jz      loc_407BF9
.text:00407977                 mov     edi, [esp+0BCh+arg_8]
.text:0040797E                 xor     edx, edx
.text:00407980                 test    edi, edi
.text:00407982                 jz      short loc_40799C
.text:00407984                 mov     eax, [esp+0BCh+var_88]
.text:00407988                 cmp     [esp+0BCh+arg_4], eax
.text:0040798F                 ja      short loc_40799C
.text:00407991                 mov     esi, [esp+0BCh+var_34]
.text:00407998                 cmp     eax, esi
.text:0040799A                 jbe     short loc_40799E
.text:0040799C
.text:0040799C loc_40799C:                             ; CODE XREF: sub_4076F0+292↑j
.text:0040799C                                         ; sub_4076F0+29F↑j
.text:0040799C                 mov     dl, 1
.text:0040799E
.text:0040799E loc_40799E:                             ; CODE XREF: sub_4076F0+2AA↑j
.text:0040799E                 mov     ebp, [esp+0BCh+var_3C]
.text:004079A5                 cmp     [esp+0BCh+var_48], ebp
.text:004079A9                 setz    cl
.text:004079AC                 cmp     dl, cl
.text:004079AE                 jz      loc_407F08
.text:004079B4                 mov     edx, [esp+0BCh+var_88]
.text:004079B8                 cmp     [esp+0BCh+var_44], edx
.text:004079BC                 setnbe  al
.text:004079BF
.text:004079BF loc_4079BF:                             ; CODE XREF: sub_4076F0+826↓j
.text:004079BF                 mov     esi, [esp+0BCh+var_24]
.text:004079C6                 test    esi, esi
.text:004079C8                 jz      loc_407EEF
.text:004079CE                 mov     ecx, [esp+0BCh+var_7C]
.text:004079D2                 test    ecx, ecx
.text:004079D4                 jz      short loc_4079DA
.text:004079D6                 test    al, al
.text:004079D8                 jz      short loc_407A20
.text:004079DA
.text:004079DA loc_4079DA:                             ; CODE XREF: sub_4076F0+2E4↑j
.text:004079DA                 mov     [esp+0BCh+var_7C], 1
.text:004079E2                 mov     eax, [esp+0BCh+var_5C]
.text:004079E6                 mov     ebp, 1
.text:004079EB                 mov     edi, [esp+0BCh+var_44]
.text:004079EF                 cmp     ebp, eax
.text:004079F1                 mov     [esp+0BCh+var_88], edi
.text:004079F5                 jnb     short loc_407A20
.text:004079F7
.text:004079F7 loc_4079F7:                             ; CODE XREF: sub_4076F0+328↓j
.text:004079F7                 mov     edx, [esp+0BCh+var_68]
.text:004079FB                 mov     ecx, [esp+0BCh+var_80]
.text:004079FF                 mov     eax, [esp+0BCh+var_6C]
.text:00407A03                 mov     edi, [edx+ebp*4]
.text:00407A06                 mov     edx, [esp+0BCh+var_84]
.text:00407A0A                 mov     [ecx+ebp*4], edi
.text:00407A0D                 mov     ebx, [eax+ebp*4]
.text:00407A10                 mov     [edx+ebp*4], ebx
.text:00407A13                 inc     ebp
.text:00407A14                 cmp     ebp, [esp+0BCh+var_5C]
.text:00407A18                 jb      short loc_4079F7
.text:00407A1A                 lea     esi, [esi+0]
.text:00407A20
.text:00407A20 loc_407A20:                             ; CODE XREF: sub_4076F0+2E8↑j
.text:00407A20                                         ; sub_4076F0+305↑j ...
.text:00407A20                 test    esi, esi
.text:00407A22                 mov     eax, esi
.text:00407A24                 jz      loc_407B8E
.text:00407A2A                 mov     ebx, [esp+0BCh+Src]
.text:00407A31                 dec     esi
.text:00407A32                 mov     [esp+0BCh+var_24], esi
.text:00407A39                 mov     esi, [ebx+esi*4]
.text:00407A3C                 test    esi, esi
.text:00407A3E                 jz      short loc_407A44
.text:00407A40                 mov     [esp+0BCh+var_44], esi
.text:00407A44
.text:00407A44 loc_407A44:                             ; CODE XREF: sub_4076F0+34E↑j
.text:00407A44                 lea     ecx, [eax-2]
.text:00407A47                 lea     edx, [eax-3]
.text:00407A4A                 mov     [esp+0BCh+var_24], ecx
.text:00407A51                 mov     ebp, [ebx+ecx*4]
.text:00407A54                 lea     ecx, [eax-4]
.text:00407A57                 mov     [esp+0BCh+var_24], edx
.text:00407A5E                 mov     [esp+0BCh+var_4C], ebp
.text:00407A62                 mov     edi, [ebx+edx*4]
.text:00407A65                 mov     [esp+0BCh+var_24], ecx
.text:00407A6C                 mov     [esp+0BCh+var_64], edi
.text:00407A70                 mov     ebp, [ebx+ecx*4]
.text:00407A73                 mov     ecx, [esp+0BCh+var_64]
.text:00407A77                 mov     [esp+0BCh+var_60], ebp
.text:00407A7B                 cmp     ecx, ebp
.text:00407A7D                 jb      short loc_407AD9
.text:00407A7F                 nop
.text:00407A80
.text:00407A80 loc_407A80:                             ; CODE XREF: sub_4076F0+3E7↓j
.text:00407A80                 mov     eax, [esp+0BCh+var_24]
.text:00407A87                 mov     ebp, [esp+0BCh+var_78]
.text:00407A8B                 dec     eax
.text:00407A8C                 mov     [esp+0BCh+var_24], eax
.text:00407A93                 mov     edi, [ebx+eax*4]
.text:00407A96                 mov     [ebp+ecx*4+0], edi
.text:00407A9A                 mov     ebp, [esp+0BCh+var_24]
.text:00407AA1                 mov     esi, [esp+0BCh+Src]
.text:00407AA8                 lea     edx, [ebp-1]
.text:00407AAB                 sub     ebp, 2
.text:00407AAE                 mov     ebx, esi
.text:00407AB0                 mov     [esp+0BCh+var_24], edx
.text:00407AB7                 mov     edi, [esi+edx*4]
.text:00407ABA                 mov     edx, [esp+0BCh+var_6C]
.text:00407ABE                 mov     [esp+0BCh+var_24], ebp
.text:00407AC5                 mov     [edx+ecx*4], edi
.text:00407AC8                 mov     edi, [esi+ebp*4]
.text:00407ACB                 mov     esi, [esp+0BCh+var_68]
.text:00407ACF                 mov     [esi+ecx*4], edi
.text:00407AD2                 dec     ecx
.text:00407AD3                 cmp     ecx, [esp+0BCh+var_60]
.text:00407AD7                 jnb     short loc_407A80
.text:00407AD9
.text:00407AD9 loc_407AD9:                             ; CODE XREF: sub_4076F0+38D↑j
.text:00407AD9                 mov     [esp+0BCh+var_8C], 0
.text:00407AE1                 mov     ebx, [esp+0BCh+var_4C]
.text:00407AE5                 test    ebx, ebx
.text:00407AE7                 jz      short loc_407B42
.text:00407AE9                 mov     edx, [esp+0BCh+var_50]
.text:00407AED                 cmp     [esp+0BCh+var_4C], edx
.text:00407AF1                 jnb     short loc_407B4E
.text:00407AF3                 mov     ecx, [esp+0BCh+var_4C]
.text:00407AF7                 xor     edx, edx
.text:00407AF9                 movzx   eax, byte ptr [ecx]
.text:00407AFC                 cmp     eax, 12h
.text:00407AFF                 ja      loc_407B85
.text:00407B05                 cmp     eax, 11h
.text:00407B08                 jnb     short loc_407B10
.text:00407B0A                 cmp     eax, 0Dh
.text:00407B0D                 jnz     short loc_407B4E
.text:00407B0F                 nop
.text:00407B10
.text:00407B10 loc_407B10:                             ; CODE XREF: sub_4076F0+418↑j
.text:00407B10                                         ; sub_4076F0+49C↓j
.text:00407B10                 mov     ebp, [esp+0BCh+var_4C]
.text:00407B14                 mov     ecx, [esp+0BCh+var_4C]
.text:00407B18                 inc     ebp
.text:00407B19                 mov     [esp+0BCh+var_30], ebp
.text:00407B20                 movsx   esi, byte ptr [ebp+1]
.text:00407B24                 movzx   eax, byte ptr [ecx+1]
.text:00407B28                 shl     esi, 8
.text:00407B2B                 lea     edi, [esi+eax]
.text:00407B2E                 lea     eax, [edi+ecx+3]
.text:00407B32                 test    dl, dl
.text:00407B34                 mov     [esp+0BCh+var_30], eax
.text:00407B3B                 jz      short loc_407B80
.text:00407B3D                 cmp     byte ptr [eax], 15h
.text:00407B40
.text:00407B40 loc_407B40:                             ; CODE XREF: sub_4076F0+493↓j
.text:00407B40                 jnz     short loc_407B4E
.text:00407B42
.text:00407B42 loc_407B42:                             ; CODE XREF: sub_4076F0+3F7↑j
.text:00407B42                                         ; sub_4076F0+889↓j ...
.text:00407B42                 mov     esi, [esp+0BCh+var_24]
.text:00407B49                 jmp     loc_407A20
.text:00407B4E ; ---------------------------------------------------------------------------
.text:00407B4E
.text:00407B4E loc_407B4E:                             ; CODE XREF: sub_4076F0+401↑j
.text:00407B4E                                         ; sub_4076F0+41D↑j ...
.text:00407B4E                 mov     ebx, [esp+0BCh+arg_4]
.text:00407B55                 cmp     [esp+0BCh+var_44], ebx
.text:00407B59                 jb      loc_407944
.text:00407B5F                 mov     edi, [esp+0BCh+var_34]
.text:00407B66                 cmp     [esp+0BCh+var_44], edi
.text:00407B6A                 ja      loc_407944
.text:00407B70                 mov     edx, [esp+0BCh+var_3C]
.text:00407B77                 mov     [esp+0BCh+var_48], edx
.text:00407B7B                 jmp     loc_407944
.text:00407B80 ; ---------------------------------------------------------------------------
.text:00407B80
.text:00407B80 loc_407B80:                             ; CODE XREF: sub_4076F0+44B↑j
.text:00407B80                 cmp     byte ptr [eax], 0Fh
.text:00407B83                 jmp     short loc_407B40
.text:00407B85 ; ---------------------------------------------------------------------------
.text:00407B85
.text:00407B85 loc_407B85:                             ; CODE XREF: sub_4076F0+40F↑j
.text:00407B85                 cmp     eax, 16h
.text:00407B88                 jnz     short loc_407B4E
.text:00407B8A                 mov     dl, 1
.text:00407B8C                 jmp     short loc_407B10
.text:00407B8E ; ---------------------------------------------------------------------------
.text:00407B8E
.text:00407B8E loc_407B8E:                             ; CODE XREF: sub_4076F0+334↑j
.text:00407B8E                 mov     ecx, [esp+0BCh+var_7C]
.text:00407B92                 test    ecx, ecx
.text:00407B94                 jz      loc_407EE5
.text:00407B9A
.text:00407B9A loc_407B9A:                             ; CODE XREF: sub_4076F0+813↓j
.text:00407B9A                 mov     esi, [esp+0BCh+var_88]
.text:00407B9E                 mov     ebx, [esp+0BCh+arg_4]
.text:00407BA5                 mov     [esp+0BCh+var_44], esi
.text:00407BA9                 cmp     esi, ebx
.text:00407BAB                 jb      short loc_407BC3
.text:00407BAD                 mov     eax, [esp+0BCh+var_34]
.text:00407BB4                 mov     ecx, [esp+0BCh+var_3C]
.text:00407BBB                 cmp     esi, eax
.text:00407BBD                 mov     [esp+0BCh+var_48], ecx
.text:00407BC1                 jbe     short loc_407BCB
.text:00407BC3
.text:00407BC3 loc_407BC3:                             ; CODE XREF: sub_4076F0+4BB↑j
.text:00407BC3                 mov     esi, [esp+0BCh+var_40]
.text:00407BC7                 mov     [esp+0BCh+var_48], esi
.text:00407BCB
.text:00407BCB loc_407BCB:                             ; CODE XREF: sub_4076F0+4D1↑j
.text:00407BCB                 mov     ebp, 1
.text:00407BD0                 cmp     ebp, [esp+0BCh+var_5C]
.text:00407BD4                 jnb     short loc_407BF9
.text:00407BD6
.text:00407BD6 loc_407BD6:                             ; CODE XREF: sub_4076F0+507↓j
.text:00407BD6                 mov     eax, [esp+0BCh+var_80]
.text:00407BDA                 mov     ecx, [esp+0BCh+var_68]
.text:00407BDE                 mov     ebx, [esp+0BCh+var_84]
.text:00407BE2                 mov     edi, [eax+ebp*4]
.text:00407BE5                 mov     [ecx+ebp*4], edi
.text:00407BE8                 mov     edx, [ebx+ebp*4]
.text:00407BEB                 mov     edi, [esp+0BCh+var_6C]
.text:00407BEF                 mov     [edi+ebp*4], edx
.text:00407BF2                 inc     ebp
.text:00407BF3                 cmp     ebp, [esp+0BCh+var_5C]
.text:00407BF7                 jb      short loc_407BD6
.text:00407BF9
.text:00407BF9 loc_407BF9:                             ; CODE XREF: sub_4076F0+281↑j
.text:00407BF9                                         ; sub_4076F0+4E4↑j ...
.text:00407BF9                 mov     ebp, [esp+0BCh+arg_18]
.text:00407C00                 test    ebp, ebp
.text:00407C02                 jz      loc_407E12
.text:00407C08                 mov     edx, [esp+0BCh+arg_0]
.text:00407C0F                 movzx   eax, byte ptr [edx+1Ch]
.text:00407C13                 test    al, 10h
.text:00407C15                 jnz     loc_407E12
.text:00407C1B                 shr     al, 1
.text:00407C1D                 and     eax, 3
.text:00407C20                 jnz     loc_407E78
.text:00407C26                 mov     eax, [esp+0BCh+var_5C]
.text:00407C2A                 inc     eax
.text:00407C2B                 cmp     eax, 1Eh
.text:00407C2E                 jnb     short loc_407C35
.text:00407C30                 mov     eax, 1Eh
.text:00407C35
.text:00407C35 loc_407C35:                             ; CODE XREF: sub_4076F0+53E↑j
.text:00407C35                 mov     ebp, [esp+0BCh+arg_18]
.text:00407C3C                 mov     [ebp+0], eax
.text:00407C3F                 shl     eax, 2
.text:00407C42                 mov     [esp+0BCh+Size], eax ; Size
.text:00407C45                 call    malloc
.text:00407C4A                 mov     edi, [esp+0BCh+arg_18]
.text:00407C51                 mov     ebx, [edi]
.text:00407C53                 mov     [edi+4], eax
.text:00407C56                 shl     ebx, 2
.text:00407C59                 mov     [esp+0BCh+Size], ebx ; Size
.text:00407C5C                 call    malloc
.text:00407C61                 mov     ecx, [esp+0BCh+arg_18]
.text:00407C68                 mov     esi, [ecx+4]
.text:00407C6B                 mov     [ecx+8], eax
.text:00407C6E                 test    esi, esi
.text:00407C70                 jz      loc_407E71
.text:00407C76                 test    eax, eax
.text:00407C78                 jz      loc_407E71
.text:00407C7E                 mov     edx, [esp+0BCh+arg_0]
.text:00407C85                 movzx   ecx, byte ptr [edx+1Ch]
.text:00407C89                 and     cl, 0F9h
.text:00407C8C                 or      cl, 2
.text:00407C8F                 mov     [edx+1Ch], cl
.text:00407C92
.text:00407C92 loc_407C92:                             ; CODE XREF: sub_4076F0+7ED↓j
.text:00407C92                 mov     ecx, [esp+0BCh+arg_18]
.text:00407C99                 mov     edx, [ecx]
.text:00407C9B
.text:00407C9B loc_407C9B:                             ; CODE XREF: sub_4076F0+794↓j
.text:00407C9B                                         ; sub_4076F0+7A9↓j
.text:00407C9B                 test    edx, edx
.text:00407C9D                 jz      short loc_407CE8
.text:00407C9F                 mov     esi, [esp+0BCh+arg_18]
.text:00407CA6                 mov     edi, [esp+0BCh+var_3C]
.text:00407CAD                 mov     edx, [esp+0BCh+arg_14]
.text:00407CB4                 cmp     [esp+0BCh+var_48], edi
.text:00407CB8                 mov     ebp, [esi+4]
.text:00407CBB                 mov     [ebp+0], edx
.text:00407CBE                 mov     edx, [esi+8]
.text:00407CC1                 jz      loc_407E5F
.text:00407CC7                 mov     eax, [esp+0BCh+var_44]
.text:00407CCB                 mov     esi, [esp+0BCh+arg_C]
.text:00407CD2                 mov     ecx, [esp+0BCh+arg_8]
.text:00407CD9                 sub     eax, esi
.text:00407CDB                 add     eax, ecx
.text:00407CDD
.text:00407CDD loc_407CDD:                             ; CODE XREF: sub_4076F0+77C↓j
.text:00407CDD                 mov     [edx], eax
.text:00407CDF                 mov     edi, [esp+0BCh+arg_18]
.text:00407CE6                 mov     edx, [edi]
.text:00407CE8
.text:00407CE8 loc_407CE8:                             ; CODE XREF: sub_4076F0+5AD↑j
.text:00407CE8                 mov     ebp, 1
.text:00407CED
.text:00407CED loc_407CED:                             ; CODE XREF: sub_4076F0+6A8↓j
.text:00407CED                 cmp     edx, [esp+0BCh+var_5C]
.text:00407CF1                 mov     eax, edx
.text:00407CF3                 jbe     short loc_407CF9
.text:00407CF5                 mov     eax, [esp+0BCh+var_5C]
.text:00407CF9
.text:00407CF9 loc_407CF9:                             ; CODE XREF: sub_4076F0+603↑j
.text:00407CF9                 cmp     ebp, eax
.text:00407CFB                 jnb     loc_407DE3
.text:00407D01                 mov     ebx, [esp+0BCh+var_68]
.text:00407D05                 mov     eax, [ebx+ebp*4]
.text:00407D08                 cmp     eax, offset unk_419350
.text:00407D0D                 jz      loc_407DC6
.text:00407D13                 mov     esi, [esp+0BCh+var_6C]
.text:00407D17                 mov     edx, [esi+ebp*4]
.text:00407D1A                 cmp     edx, offset unk_419350
.text:00407D20                 jz      loc_407DC6
.text:00407D26                 mov     edi, [esp+0BCh+arg_8]
.text:00407D2D                 mov     ebx, [esp+0BCh+arg_18]
.text:00407D34                 test    edi, edi
.text:00407D36                 mov     ecx, [ebx+4]
.text:00407D39                 jz      short loc_407DB2
.text:00407D3B                 cmp     [esp+0BCh+arg_4], eax
.text:00407D42                 ja      short loc_407DB2
.text:00407D44                 cmp     eax, [esp+0BCh+var_34]
.text:00407D4B                 ja      short loc_407DB2
.text:00407D4D                 mov     esi, [esp+0BCh+arg_4]
.text:00407D54                 sub     eax, esi
.text:00407D56
.text:00407D56 loc_407D56:                             ; CODE XREF: sub_4076F0+6D4↓j
.text:00407D56                 mov     [ecx+ebp*4], eax
.text:00407D59                 mov     esi, [esp+0BCh+arg_18]
.text:00407D60                 mov     eax, [esp+0BCh+arg_8]
.text:00407D67                 mov     ecx, [esi+8]
.text:00407D6A                 test    eax, eax
.text:00407D6C                 jz      short loc_407D9D
.text:00407D6E                 cmp     [esp+0BCh+arg_4], edx
.text:00407D75                 ja      short loc_407D9D
.text:00407D77                 cmp     edx, [esp+0BCh+var_34]
.text:00407D7E                 ja      short loc_407D9D
.text:00407D80                 mov     eax, edx
.text:00407D82                 mov     edx, [esp+0BCh+arg_4]
.text:00407D89                 sub     eax, edx
.text:00407D8B
.text:00407D8B loc_407D8B:                             ; CODE XREF: sub_4076F0+6C0↓j
.text:00407D8B                 mov     [ecx+ebp*4], eax
.text:00407D8E
.text:00407D8E loc_407D8E:                             ; CODE XREF: sub_4076F0+6F1↓j
.text:00407D8E                 mov     ecx, [esp+0BCh+arg_18]
.text:00407D95                 inc     ebp
.text:00407D96                 mov     edx, [ecx]
.text:00407D98                 jmp     loc_407CED
.text:00407D9D ; ---------------------------------------------------------------------------
.text:00407D9D
.text:00407D9D loc_407D9D:                             ; CODE XREF: sub_4076F0+67C↑j
.text:00407D9D                                         ; sub_4076F0+685↑j ...
.text:00407D9D                 mov     eax, [esp+0BCh+arg_C]
.text:00407DA4                 mov     edi, [esp+0BCh+arg_8]
.text:00407DAB                 sub     edx, eax
.text:00407DAD                 lea     eax, [edi+edx]
.text:00407DB0                 jmp     short loc_407D8B
.text:00407DB2 ; ---------------------------------------------------------------------------
.text:00407DB2
.text:00407DB2 loc_407DB2:                             ; CODE XREF: sub_4076F0+649↑j
.text:00407DB2                                         ; sub_4076F0+652↑j ...
.text:00407DB2                 mov     ebx, [esp+0BCh+arg_C]
.text:00407DB9                 mov     edi, [esp+0BCh+arg_8]
.text:00407DC0                 sub     eax, ebx
.text:00407DC2                 add     eax, edi
.text:00407DC4                 jmp     short loc_407D56
.text:00407DC6 ; ---------------------------------------------------------------------------
.text:00407DC6
.text:00407DC6 loc_407DC6:                             ; CODE XREF: sub_4076F0+61D↑j
.text:00407DC6                                         ; sub_4076F0+630↑j
.text:00407DC6                 mov     eax, [esp+0BCh+arg_18]
.text:00407DCD                 mov     ecx, [eax+4]
.text:00407DD0                 mov     edx, [eax+8]
.text:00407DD3                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:00407DDA                 mov     dword ptr [ecx+ebp*4], 0FFFFFFFFh
.text:00407DE1                 jmp     short loc_407D8E
.text:00407DE3 ; ---------------------------------------------------------------------------
.text:00407DE3
.text:00407DE3 loc_407DE3:                             ; CODE XREF: sub_4076F0+60B↑j
.text:00407DE3                 mov     ebp, [esp+0BCh+var_5C]
.text:00407DE7                 cmp     ebp, edx
.text:00407DE9                 jnb     short loc_407E12
.text:00407DEB                 mov     esi, [esp+0BCh+arg_18]
.text:00407DF2                 mov     edx, [esi+4]
.text:00407DF5                 mov     eax, [esi+8]
.text:00407DF8
.text:00407DF8 loc_407DF8:                             ; CODE XREF: sub_4076F0+720↓j
.text:00407DF8                 mov     dword ptr [eax+ebp*4], 0FFFFFFFFh
.text:00407DFF                 mov     edi, [esp+0BCh+arg_18]
.text:00407E06                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:00407E0D                 inc     ebp
.text:00407E0E                 cmp     ebp, [edi]
.text:00407E10                 jb      short loc_407DF8
.text:00407E12
.text:00407E12 loc_407E12:                             ; CODE XREF: sub_4076F0+512↑j
.text:00407E12                                         ; sub_4076F0+525↑j ...
.text:00407E12                 mov     eax, [esp+0BCh+var_44]
.text:00407E16                 mov     ecx, [esp+0BCh+arg_14]
.text:00407E1D                 mov     ebp, [esp+0BCh+var_3C]
.text:00407E24                 sub     eax, ecx
.text:00407E26                 cmp     [esp+0BCh+var_48], ebp
.text:00407E2A                 jz      short loc_407E52
.text:00407E2C                 mov     ebx, [esp+0BCh+arg_8]
.text:00407E33                 mov     ebp, eax
.text:00407E35                 sub     [esp+0BCh+arg_C], ebx
.text:00407E3C                 mov     edx, [esp+0BCh+arg_C]
.text:00407E43                 sub     ebp, edx
.text:00407E45
.text:00407E45 loc_407E45:                             ; CODE XREF: sub_4076F0+76D↓j
.text:00407E45                 mov     eax, ebp
.text:00407E47
.text:00407E47 loc_407E47:                             ; CODE XREF: sub_4076F0+89↑j
.text:00407E47                                         ; sub_4076F0+786↓j ...
.text:00407E47                 add     esp, 0ACh
.text:00407E4D                 pop     ebx
.text:00407E4E                 pop     esi
.text:00407E4F                 pop     edi
.text:00407E50                 pop     ebp
.text:00407E51                 retn
.text:00407E52 ; ---------------------------------------------------------------------------
.text:00407E52
.text:00407E52 loc_407E52:                             ; CODE XREF: sub_4076F0+73A↑j
.text:00407E52                 mov     esi, [esp+0BCh+arg_4]
.text:00407E59                 mov     ebp, eax
.text:00407E5B                 sub     ebp, esi
.text:00407E5D                 jmp     short loc_407E45
.text:00407E5F ; ---------------------------------------------------------------------------
.text:00407E5F
.text:00407E5F loc_407E5F:                             ; CODE XREF: sub_4076F0+5D1↑j
.text:00407E5F                 mov     eax, [esp+0BCh+var_44]
.text:00407E63                 mov     ebx, [esp+0BCh+arg_4]
.text:00407E6A                 sub     eax, ebx
.text:00407E6C                 jmp     loc_407CDD
.text:00407E71 ; ---------------------------------------------------------------------------
.text:00407E71
.text:00407E71 loc_407E71:                             ; CODE XREF: sub_4076F0+580↑j
.text:00407E71                                         ; sub_4076F0+588↑j ...
.text:00407E71                 mov     eax, 0FFFFFFFEh
.text:00407E76                 jmp     short loc_407E47
.text:00407E78 ; ---------------------------------------------------------------------------
.text:00407E78
.text:00407E78 loc_407E78:                             ; CODE XREF: sub_4076F0+530↑j
.text:00407E78                 dec     eax
.text:00407E79                 jz      short loc_407E89
.text:00407E7B                 mov     eax, [esp+0BCh+arg_18]
.text:00407E82                 mov     edx, [eax]
.text:00407E84                 jmp     loc_407C9B
.text:00407E89 ; ---------------------------------------------------------------------------
.text:00407E89
.text:00407E89 loc_407E89:                             ; CODE XREF: sub_4076F0+789↑j
.text:00407E89                 mov     ecx, [esp+0BCh+arg_18]
.text:00407E90                 mov     eax, [esp+0BCh+var_5C]
.text:00407E94                 mov     edx, [ecx]
.text:00407E96                 inc     eax
.text:00407E97                 cmp     edx, eax
.text:00407E99                 jnb     loc_407C9B
.text:00407E9F                 mov     [ecx], eax
.text:00407EA1                 shl     eax, 2
.text:00407EA4                 mov     [esp+0BCh+var_B8], eax ; Size
.text:00407EA8                 mov     edx, [ecx+4]
.text:00407EAB                 mov     [esp+0BCh+Size], edx ; Block
.text:00407EAE                 call    realloc
.text:00407EB3                 mov     edi, [esp+0BCh+arg_18]
.text:00407EBA                 mov     ebp, [edi]
.text:00407EBC                 mov     [edi+4], eax
.text:00407EBF                 shl     ebp, 2
.text:00407EC2                 mov     [esp+0BCh+var_B8], ebp ; Size
.text:00407EC6                 mov     ebx, [edi+8]
.text:00407EC9                 mov     [esp+0BCh+Size], ebx ; Block
.text:00407ECC                 call    realloc
.text:00407ED1                 mov     [edi+8], eax
.text:00407ED4                 mov     esi, [edi+4]
.text:00407ED7                 test    esi, esi
.text:00407ED9                 jz      short loc_407E71
.text:00407EDB                 test    eax, eax
.text:00407EDD                 jnz     loc_407C92
.text:00407EE3                 jmp     short loc_407E71
.text:00407EE5 ; ---------------------------------------------------------------------------
.text:00407EE5
.text:00407EE5 loc_407EE5:                             ; CODE XREF: sub_4076F0+107↑j
.text:00407EE5                                         ; sub_4076F0+124↑j ...
.text:00407EE5                 mov     eax, 0FFFFFFFFh
.text:00407EEA                 jmp     loc_407E47
.text:00407EEF ; ---------------------------------------------------------------------------
.text:00407EEF
.text:00407EEF loc_407EEF:                             ; CODE XREF: sub_4076F0+2D8↑j
.text:00407EEF                 mov     ebp, [esp+0BCh+var_7C]
.text:00407EF3                 test    ebp, ebp
.text:00407EF5                 jz      loc_407BF9
.text:00407EFB                 test    al, al
.text:00407EFD                 jnz     loc_407BF9
.text:00407F03                 jmp     loc_407B9A
.text:00407F08 ; ---------------------------------------------------------------------------
.text:00407F08
.text:00407F08 loc_407F08:                             ; CODE XREF: sub_4076F0+2BE↑j
.text:00407F08                 mov     ebx, [esp+0BCh+var_3C]
.text:00407F0F                 cmp     [esp+0BCh+var_48], ebx
.text:00407F13                 setnz   al
.text:00407F16                 jmp     loc_4079BF
.text:00407F1B ; ---------------------------------------------------------------------------
.text:00407F1B
.text:00407F1B loc_407F1B:                             ; CODE XREF: sub_4076F0:loc_407967↑j
.text:00407F1B                                         ; sub_4076F0+898↓j ...
.text:00407F1B                 mov     edx, [esp+0BCh+var_50] ; jumptable 00407967 case 0
.text:00407F1B                                         ; jumptable 004082E6 case 0
.text:00407F1B                                         ; jumptable 004083B8 case 0
.text:00407F1F                 mov     eax, offset loc_407969
.text:00407F24                 cmp     [esp+0BCh+var_4C], edx
.text:00407F28                 jnz     loc_407953
.text:00407F2E                 jmp     loc_407967
.text:00407F33 ; ---------------------------------------------------------------------------
.text:00407F33
.text:00407F33 loc_407F33:                             ; CODE XREF: sub_4076F0:loc_407967↑j
.text:00407F33                                         ; sub_4076F0+BF6↓j ...
.text:00407F33                 jmp     loc_407BF9      ; jumptable 00407967 case 1
.text:00407F33                                         ; jumptable 004082E6 case 1
.text:00407F33                                         ; jumptable 004083B8 case 1
.text:00407F38 ; ---------------------------------------------------------------------------
.text:00407F38
.text:00407F38 loc_407F38:                             ; CODE XREF: sub_4076F0:loc_407967↑j
.text:00407F38                                         ; sub_4076F0+BF6↓j ...
.text:00407F38                 mov     eax, [esp+0BCh+var_4C] ; jumptable 00407967 case 2
.text:00407F38                                         ; jumptable 004082E6 case 2
.text:00407F38                                         ; jumptable 004083B8 case 2
.text:00407F3C                 mov     edi, [esp+0BCh+var_58]
.text:00407F40                 movzx   ebp, byte ptr [eax]
.text:00407F43                 inc     eax
.text:00407F44                 test    edi, edi
.text:00407F46                 mov     [esp+0BCh+var_4C], eax
.text:00407F4A                 jz      loc_407FD9
.text:00407F50
.text:00407F50 loc_407F50:                             ; CODE XREF: sub_4076F0+890↓j
.text:00407F50                 mov     ecx, [esp+0BCh+var_48]
.text:00407F54                 cmp     [esp+0BCh+var_44], ecx
.text:00407F58                 jz      short loc_407FB6
.text:00407F5A
.text:00407F5A loc_407F5A:                             ; CODE XREF: sub_4076F0+8E7↓j
.text:00407F5A                 mov     ecx, [esp+0BCh+var_44]
.text:00407F5E                 mov     ebx, [esp+0BCh+var_4C]
.text:00407F62                 mov     edx, [esp+0BCh+var_58]
.text:00407F66                 movzx   edi, byte ptr [ecx]
.text:00407F69                 inc     ecx
.text:00407F6A                 movzx   eax, byte ptr [ebx]
.text:00407F6D                 inc     ebx
.text:00407F6E                 mov     [esp+0BCh+var_4C], ebx
.text:00407F72                 mov     [esp+0BCh+var_44], ecx
.text:00407F76                 cmp     [edi+edx], al
.text:00407F79                 jnz     loc_407B42
.text:00407F7F                 dec     ebp
.text:00407F80                 jnz     short loc_407F50
.text:00407F82
.text:00407F82 loc_407F82:                             ; CODE XREF: sub_4076F0+916↓j
.text:00407F82                 mov     ebp, [esp+0BCh+var_8C]
.text:00407F86                 test    ebp, ebp
.text:00407F88                 jnz     short loc_407F1B ; jumptable 00407967 case 0
.text:00407F88                                         ; jumptable 004082E6 case 0
.text:00407F88                                         ; jumptable 004083B8 case 0
.text:00407F8A                 mov     [esp+0BCh+var_8C], 1
.text:00407F92                 mov     eax, [esp+0BCh+var_60]
.text:00407F96                 mov     edx, [esp+0BCh+var_64]
.text:00407F9A                 cmp     eax, edx
.text:00407F9C                 ja      loc_407F1B      ; jumptable 00407967 case 0
.text:00407F9C                                         ; jumptable 004082E6 case 0
.text:00407F9C                                         ; jumptable 004083B8 case 0
.text:00407FA2
.text:00407FA2 loc_407FA2:                             ; CODE XREF: sub_4076F0+8BF↓j
.text:00407FA2                 mov     esi, [esp+0BCh+var_78]
.text:00407FA6                 or      byte ptr [esi+eax*4], 18h
.text:00407FAA                 inc     eax
.text:00407FAB                 cmp     eax, [esp+0BCh+var_64]
.text:00407FAF                 jbe     short loc_407FA2
.text:00407FB1                 jmp     loc_407F1B      ; jumptable 00407967 case 0
.text:00407FB1                                         ; jumptable 004082E6 case 0
.text:00407FB1                                         ; jumptable 004083B8 case 0
.text:00407FB6 ; ---------------------------------------------------------------------------
.text:00407FB6
.text:00407FB6 loc_407FB6:                             ; CODE XREF: sub_4076F0+868↑j
.text:00407FB6                                         ; sub_4076F0+8E5↓j
.text:00407FB6                 mov     edx, [esp+0BCh+var_40]
.text:00407FBA                 cmp     [esp+0BCh+var_48], edx
.text:00407FBE                 jz      loc_407B42
.text:00407FC4                 mov     [esp+0BCh+var_48], edx
.text:00407FC8                 mov     ebx, [esp+0BCh+arg_C]
.text:00407FCF                 cmp     ebx, edx
.text:00407FD1                 mov     [esp+0BCh+var_44], ebx
.text:00407FD5                 jz      short loc_407FB6
.text:00407FD7                 jmp     short loc_407F5A
.text:00407FD9 ; ---------------------------------------------------------------------------
.text:00407FD9
.text:00407FD9 loc_407FD9:                             ; CODE XREF: sub_4076F0+85A↑j
.text:00407FD9                                         ; sub_4076F0+914↓j
.text:00407FD9                 mov     esi, [esp+0BCh+var_48]
.text:00407FDD                 cmp     [esp+0BCh+var_44], esi
.text:00407FE1                 jz      short loc_408010
.text:00407FE3
.text:00407FE3 loc_407FE3:                             ; CODE XREF: sub_4076F0+941↓j
.text:00407FE3                 mov     ebx, [esp+0BCh+var_4C]
.text:00407FE7                 mov     eax, [esp+0BCh+var_44]
.text:00407FEB                 movzx   edx, byte ptr [ebx]
.text:00407FEE                 inc     ebx
.text:00407FEF                 mov     [esp+0BCh+var_4C], ebx
.text:00407FF3                 movzx   ecx, byte ptr [eax]
.text:00407FF6                 inc     eax
.text:00407FF7                 mov     [esp+0BCh+var_44], eax
.text:00407FFB                 cmp     cl, dl
.text:00407FFD                 jnz     loc_407B42
.text:00408003                 dec     ebp
.text:00408004                 jnz     short loc_407FD9
.text:00408006                 jmp     loc_407F82
.text:00408006 ; ---------------------------------------------------------------------------
.text:0040800B                 align 10h
.text:00408010
.text:00408010 loc_408010:                             ; CODE XREF: sub_4076F0+8F1↑j
.text:00408010                                         ; sub_4076F0+93F↓j
.text:00408010                 mov     esi, [esp+0BCh+var_40]
.text:00408014                 cmp     [esp+0BCh+var_48], esi
.text:00408018                 jz      loc_407B42
.text:0040801E                 mov     [esp+0BCh+var_48], esi
.text:00408022                 mov     edi, [esp+0BCh+arg_C]
.text:00408029                 cmp     edi, esi
.text:0040802B                 mov     [esp+0BCh+var_44], edi
.text:0040802F                 jz      short loc_408010
.text:00408031                 jmp     short loc_407FE3
.text:00408033 ; ---------------------------------------------------------------------------
.text:00408033
.text:00408033 loc_408033:                             ; CODE XREF: sub_4076F0:loc_407967↑j
.text:00408033                                         ; sub_4076F0+BF6↓j ...
.text:00408033                 mov     edi, [esp+0BCh+var_48] ; jumptable 00407967 case 3
.text:00408033                                         ; jumptable 004082E6 case 3
.text:00408033                                         ; jumptable 004083B8 case 3
.text:00408037                 cmp     [esp+0BCh+var_44], edi
.text:0040803B                 jz      loc_409912
.text:00408041
.text:00408041 loc_408041:                             ; CODE XREF: sub_4076F0+2243↓j
.text:00408041                 mov     eax, [esp+0BCh+arg_0]
.text:00408048                 test    byte ptr [eax+0Ch], 40h
.text:0040804C                 jnz     short loc_408070
.text:0040804E                 mov     ebx, [esp+0BCh+var_58]
.text:00408052                 test    ebx, ebx
.text:00408054                 jz      loc_409906
.text:0040805A                 mov     esi, [esp+0BCh+var_44]
.text:0040805E                 mov     edx, [esp+0BCh+var_58]
.text:00408062                 movzx   ebp, byte ptr [esi]
.text:00408065                 cmp     byte ptr [ebp+edx+0], 0Ah
.text:0040806A
.text:0040806A loc_40806A:                             ; CODE XREF: sub_4076F0+221D↓j
.text:0040806A                 jz      loc_407B42
.text:00408070
.text:00408070 loc_408070:                             ; CODE XREF: sub_4076F0+95C↑j
.text:00408070                 mov     ecx, [esp+0BCh+arg_0]
.text:00408077                 cmp     byte ptr [ecx+0Ch], 0
.text:0040807B                 jns     short loc_40809F
.text:0040807D                 mov     ebx, [esp+0BCh+var_58]
.text:00408081                 test    ebx, ebx
.text:00408083                 jz      loc_4098FA
.text:00408089                 mov     edx, [esp+0BCh+var_44]
.text:0040808D                 mov     eax, [esp+0BCh+var_58]
.text:00408091                 movzx   ebp, byte ptr [edx]
.text:00408094                 cmp     byte ptr [ebp+eax+0], 0
.text:00408099
.text:00408099 loc_408099:                             ; CODE XREF: sub_4076F0+2211↓j
.text:00408099                 jz      loc_407B42
.text:0040809F
.text:0040809F loc_40809F:                             ; CODE XREF: sub_4076F0+98B↑j
.text:0040809F                 mov     esi, [esp+0BCh+var_8C]
.text:004080A3                 test    esi, esi
.text:004080A5                 jnz     short loc_4080CA
.text:004080A7                 mov     [esp+0BCh+var_8C], 1
.text:004080AF                 mov     eax, [esp+0BCh+var_60]
.text:004080B3                 mov     ecx, [esp+0BCh+var_64]
.text:004080B7                 cmp     eax, ecx
.text:004080B9                 ja      short loc_4080CA
.text:004080BB
.text:004080BB loc_4080BB:                             ; CODE XREF: sub_4076F0+9D8↓j
.text:004080BB                 mov     ebx, [esp+0BCh+var_78]
.text:004080BF                 or      byte ptr [ebx+eax*4], 18h
.text:004080C3                 inc     eax
.text:004080C4                 cmp     eax, [esp+0BCh+var_64]
.text:004080C8                 jbe     short loc_4080BB
.text:004080CA
.text:004080CA loc_4080CA:                             ; CODE XREF: sub_4076F0+9B5↑j
.text:004080CA                                         ; sub_4076F0+9C9↑j
.text:004080CA                 inc     [esp+0BCh+var_44]
.text:004080CE
.text:004080CE loc_4080CE:                             ; CODE XREF: sub_4076F0:loc_408194↓j
.text:004080CE                                         ; sub_4076F0+B8C↓j ...
.text:004080CE                 mov     edx, [esp+0BCh+var_50]
.text:004080D2                 mov     eax, offset loc_407969
.text:004080D7                 cmp     [esp+0BCh+var_4C], edx
.text:004080DB                 jz      loc_407967
.text:004080E1                 mov     esi, [esp+0BCh+var_4C]
.text:004080E5
.text:004080E5 loc_4080E5:                             ; CODE XREF: sub_4076F0+F64↓j
.text:004080E5                 movzx   edi, byte ptr [esi]
.text:004080E8                 inc     esi
.text:004080E9                 mov     [esp+0BCh+var_4C], esi
.text:004080ED                 mov     eax, ds:(jpt_4080F4-18h)[edi*4] ; switch 2 cases
.text:004080F4                 jmp     eax             ; switch jump
.text:004080F6 ; ---------------------------------------------------------------------------
.text:004080F6
.text:004080F6 loc_4080F6:                             ; DATA XREF: .text:004076E1↑o
.text:004080F6                 mov     edx, [esp+0BCh+arg_8]
.text:004080FD                 test    edx, edx
.text:004080FF                 jz      loc_4081D2
.text:00408105                 mov     edi, [esp+0BCh+arg_4]
.text:0040810C                 cmp     [esp+0BCh+var_44], edi
.text:00408110
.text:00408110 loc_408110:                             ; CODE XREF: sub_4076F0+AED↓j
.text:00408110                 jz      loc_407B42
.text:00408116                 mov     ecx, [esp+0BCh+arg_10]
.text:0040811D                 test    ecx, ecx
.text:0040811F                 jz      loc_407B42
.text:00408125                 mov     ebp, [esp+0BCh+var_38]
.text:0040812C                 cmp     [esp+0BCh+var_44], ebp
.text:00408130                 jz      loc_407B42
.text:00408136                 mov     edx, [esp+0BCh+var_44]
.text:0040813A                 dec     edx
.text:0040813B                 cmp     edx, [esp+0BCh+var_34]
.text:00408142                 jz      loc_4081C6
.text:00408148                 mov     ebx, [esp+0BCh+arg_C]
.text:0040814F                 dec     ebx
.text:00408150                 cmp     edx, ebx
.text:00408152                 jz      short loc_4081B9
.text:00408154                 mov     edi, [esp+0BCh+var_44]
.text:00408158                 movzx   eax, byte ptr [edi-1]
.text:0040815C
.text:0040815C loc_40815C:                             ; CODE XREF: sub_4076F0+AD4↓j
.text:0040815C                                         ; sub_4076F0+AE0↓j
.text:0040815C                 cmp     ds:byte_419250[eax], 1
.text:00408163                 mov     eax, [esp+0BCh+var_34]
.text:0040816A                 setz    dl
.text:0040816D                 cmp     [esp+0BCh+var_44], eax
.text:00408171                 jz      short loc_4081AD
.text:00408173                 mov     ebp, [esp+0BCh+arg_C]
.text:0040817A                 dec     ebp
.text:0040817B                 cmp     [esp+0BCh+var_44], ebp
.text:0040817F                 jz      short loc_4081A0
.text:00408181                 mov     esi, [esp+0BCh+var_44]
.text:00408185                 movzx   eax, byte ptr [esi]
.text:00408188
.text:00408188 loc_408188:                             ; CODE XREF: sub_4076F0+ABB↓j
.text:00408188                                         ; sub_4076F0+AC7↓j
.text:00408188                 cmp     ds:byte_419250[eax], 1
.text:0040818F                 setz    cl
.text:00408192                 cmp     dl, cl
.text:00408194
.text:00408194 loc_408194:                             ; CODE XREF: sub_4076F0+1A07↓j
.text:00408194                 jz      loc_4080CE
.text:0040819A                 jmp     loc_407B42
.text:0040819A ; ---------------------------------------------------------------------------
.text:0040819F                 align 10h
.text:004081A0
.text:004081A0 loc_4081A0:                             ; CODE XREF: sub_4076F0+A8F↑j
.text:004081A0                 mov     ebx, [esp+0BCh+var_34]
.text:004081A7                 movzx   eax, byte ptr [ebx-1]
.text:004081AB                 jmp     short loc_408188
.text:004081AD ; ---------------------------------------------------------------------------
.text:004081AD
.text:004081AD loc_4081AD:                             ; CODE XREF: sub_4076F0+A81↑j
.text:004081AD                 mov     ecx, [esp+0BCh+arg_C]
.text:004081B4                 movzx   eax, byte ptr [ecx]
.text:004081B7                 jmp     short loc_408188
.text:004081B9 ; ---------------------------------------------------------------------------
.text:004081B9
.text:004081B9 loc_4081B9:                             ; CODE XREF: sub_4076F0+A62↑j
.text:004081B9                 mov     edx, [esp+0BCh+var_34]
.text:004081C0                 movzx   eax, byte ptr [edx-1]
.text:004081C4                 jmp     short loc_40815C
.text:004081C6 ; ---------------------------------------------------------------------------
.text:004081C6
.text:004081C6 loc_4081C6:                             ; CODE XREF: sub_4076F0+A52↑j
.text:004081C6                 mov     esi, [esp+0BCh+arg_C]
.text:004081CD                 movzx   eax, byte ptr [esi]
.text:004081D0                 jmp     short loc_40815C
.text:004081D2 ; ---------------------------------------------------------------------------
.text:004081D2
.text:004081D2 loc_4081D2:                             ; CODE XREF: sub_4076F0+A0F↑j
.text:004081D2                 mov     eax, [esp+0BCh+arg_C]
.text:004081D9                 cmp     [esp+0BCh+var_44], eax
.text:004081DD                 jmp     loc_408110
.text:004081E2 ; ---------------------------------------------------------------------------
.text:004081E2                 mov     esi, [esp+0BCh+arg_8]
.text:004081E9                 test    esi, esi
.text:004081EB                 jz      loc_4098EA
.text:004081F1                 mov     ebp, [esp+0BCh+arg_4]
.text:004081F8                 cmp     [esp+0BCh+var_44], ebp
.text:004081FC
.text:004081FC loc_4081FC:                             ; CODE XREF: sub_4076F0+2205↓j
.text:004081FC                 jz      loc_4082C0
.text:00408202                 mov     edi, [esp+0BCh+arg_10]
.text:00408209                 test    edi, edi
.text:0040820B                 jz      loc_4082C0
.text:00408211                 mov     edx, [esp+0BCh+var_38]
.text:00408218                 cmp     [esp+0BCh+var_44], edx
.text:0040821C                 jz      loc_4082C0
.text:00408222                 mov     edx, [esp+0BCh+var_44]
.text:00408226                 dec     edx
.text:00408227                 cmp     edx, [esp+0BCh+var_34]
.text:0040822E                 jz      short loc_4082AD
.text:00408230                 mov     esi, [esp+0BCh+arg_C]
.text:00408237                 dec     esi
.text:00408238                 cmp     edx, esi
.text:0040823A                 jz      short loc_4082A0
.text:0040823C                 mov     ebx, [esp+0BCh+var_44]
.text:00408240                 movzx   eax, byte ptr [ebx-1]
.text:00408244
.text:00408244 loc_408244:                             ; CODE XREF: sub_4076F0+BBB↓j
.text:00408244                                         ; sub_4076F0+BC7↓j
.text:00408244                 cmp     ds:byte_419250[eax], 1
.text:0040824B                 mov     eax, [esp+0BCh+var_34]
.text:00408252                 setz    dl
.text:00408255                 cmp     [esp+0BCh+var_44], eax
.text:00408259                 jz      short loc_408294
.text:0040825B                 mov     ecx, [esp+0BCh+arg_C]
.text:00408262                 dec     ecx
.text:00408263                 cmp     [esp+0BCh+var_44], ecx
.text:00408267                 jz      short loc_408287
.text:00408269                 mov     esi, [esp+0BCh+var_44]
.text:0040826D                 movzx   eax, byte ptr [esi]
.text:00408270
.text:00408270 loc_408270:                             ; CODE XREF: sub_4076F0+BA2↓j
.text:00408270                                         ; sub_4076F0+BAE↓j
.text:00408270                 cmp     ds:byte_419250[eax], 1
.text:00408277                 setz    bl
.text:0040827A                 cmp     dl, bl
.text:0040827C                 jnz     loc_4080CE
.text:00408282                 jmp     loc_407B42
.text:00408287 ; ---------------------------------------------------------------------------
.text:00408287
.text:00408287 loc_408287:                             ; CODE XREF: sub_4076F0+B77↑j
.text:00408287                 mov     ebp, [esp+0BCh+var_34]
.text:0040828E                 movzx   eax, byte ptr [ebp-1]
.text:00408292                 jmp     short loc_408270
.text:00408294 ; ---------------------------------------------------------------------------
.text:00408294
.text:00408294 loc_408294:                             ; CODE XREF: sub_4076F0+B69↑j
.text:00408294                 mov     edi, [esp+0BCh+arg_C]
.text:0040829B                 movzx   eax, byte ptr [edi]
.text:0040829E                 jmp     short loc_408270
.text:004082A0 ; ---------------------------------------------------------------------------
.text:004082A0
.text:004082A0 loc_4082A0:                             ; CODE XREF: sub_4076F0+B4A↑j
.text:004082A0                 mov     ebp, [esp+0BCh+var_34]
.text:004082A7                 movzx   eax, byte ptr [ebp-1]
.text:004082AB                 jmp     short loc_408244
.text:004082AD ; ---------------------------------------------------------------------------
.text:004082AD
.text:004082AD loc_4082AD:                             ; CODE XREF: sub_4076F0+B3E↑j
.text:004082AD                 mov     ecx, [esp+0BCh+arg_C]
.text:004082B4                 movzx   eax, byte ptr [ecx]
.text:004082B7                 jmp     short loc_408244
.text:004082B7 ; ---------------------------------------------------------------------------
.text:004082B9                 align 10h
.text:004082C0
.text:004082C0 loc_4082C0:                             ; CODE XREF: sub_4076F0:loc_4081FC↑j
.text:004082C0                                         ; sub_4076F0+B1B↑j ...
.text:004082C0                 mov     ebp, [esp+0BCh+var_50]
.text:004082C4                 mov     eax, offset loc_407969
.text:004082C9                 cmp     [esp+0BCh+var_4C], ebp
.text:004082CD                 jz      loc_407967
.text:004082D3                 mov     ebx, [esp+0BCh+var_4C]
.text:004082D7                 movzx   esi, byte ptr [ebx]
.text:004082DA                 inc     ebx
.text:004082DB                 mov     [esp+0BCh+var_4C], ebx
.text:004082DF                 mov     eax, ds:jpt_407967[esi*4] ; switch 6 cases
.text:004082E6                 jmp     eax             ; switch jump
.text:004082E8 ; ---------------------------------------------------------------------------
.text:004082E8                 mov     ecx, [esp+0BCh+arg_8]
.text:004082EF                 test    ecx, ecx
.text:004082F1                 jz      loc_4098DA
.text:004082F7                 mov     eax, [esp+0BCh+arg_4]
.text:004082FE                 cmp     [esp+0BCh+var_44], eax
.text:00408302
.text:00408302 loc_408302:                             ; CODE XREF: sub_4076F0+21F5↓j
.text:00408302                 jz      loc_407B42
.text:00408308                 mov     edi, [esp+0BCh+arg_10]
.text:0040830F                 test    edi, edi
.text:00408311                 jz      loc_407B42
.text:00408317                 mov     edx, [esp+0BCh+var_44]
.text:0040831B                 dec     edx
.text:0040831C                 cmp     edx, [esp+0BCh+var_34]
.text:00408323                 jz      loc_4098CA
.text:00408329                 mov     ebx, [esp+0BCh+arg_C]
.text:00408330                 dec     ebx
.text:00408331                 cmp     edx, ebx
.text:00408333                 jz      loc_4098BA
.text:00408339                 mov     ecx, [esp+0BCh+var_44]
.text:0040833D                 movzx   eax, byte ptr [ecx-1]
.text:00408341
.text:00408341 loc_408341:                             ; CODE XREF: sub_4076F0+21D5↓j
.text:00408341                                         ; sub_4076F0+21E5↓j
.text:00408341                 cmp     ds:byte_419250[eax], 1
.text:00408348                 jnz     loc_407B42
.text:0040834E                 mov     eax, [esp+0BCh+var_38]
.text:00408355                 cmp     [esp+0BCh+var_44], eax
.text:00408359                 jz      short loc_408392
.text:0040835B                 mov     edx, [esp+0BCh+var_34]
.text:00408362                 cmp     [esp+0BCh+var_44], edx
.text:00408366                 jz      loc_4098AB
.text:0040836C                 mov     ebp, [esp+0BCh+arg_C]
.text:00408373                 dec     ebp
.text:00408374                 cmp     [esp+0BCh+var_44], ebp
.text:00408378                 jz      loc_40989B
.text:0040837E                 mov     esi, [esp+0BCh+var_44]
.text:00408382                 movzx   eax, byte ptr [esi]
.text:00408385
.text:00408385 loc_408385:                             ; CODE XREF: sub_4076F0+21B6↓j
.text:00408385                                         ; sub_4076F0+21C5↓j
.text:00408385                 cmp     ds:byte_419250[eax], 1
.text:0040838C                 jz      loc_407B42
.text:00408392
.text:00408392 loc_408392:                             ; CODE XREF: sub_4076F0+C69↑j
.text:00408392                                         ; sub_4076F0+E23↓j ...
.text:00408392                 mov     ecx, [esp+0BCh+var_50]
.text:00408396                 mov     eax, offset loc_407969
.text:0040839B                 cmp     [esp+0BCh+var_4C], ecx
.text:0040839F                 jz      loc_407967
.text:004083A5                 mov     edi, [esp+0BCh+var_4C]
.text:004083A9                 movzx   edx, byte ptr [edi]
.text:004083AC                 inc     edi
.text:004083AD                 mov     [esp+0BCh+var_4C], edi
.text:004083B1                 mov     eax, ds:jpt_407967[edx*4] ; switch 6 cases
.text:004083B8                 jmp     eax             ; switch jump
.text:004083BA ; ---------------------------------------------------------------------------
.text:004083BA                 mov     ebp, [esp+0BCh+var_38]
.text:004083C1                 cmp     [esp+0BCh+var_44], ebp
.text:004083C5                 jz      loc_407B42
.text:004083CB                 mov     eax, [esp+0BCh+var_34]
.text:004083D2                 cmp     [esp+0BCh+var_44], eax
.text:004083D6                 jz      loc_408497
.text:004083DC                 mov     esi, [esp+0BCh+arg_C]
.text:004083E3                 dec     esi
.text:004083E4                 cmp     [esp+0BCh+var_44], esi
.text:004083E8                 jz      loc_408487
.text:004083EE                 mov     edx, [esp+0BCh+var_44]
.text:004083F2                 movzx   eax, byte ptr [edx]
.text:004083F5
.text:004083F5 loc_4083F5:                             ; CODE XREF: sub_4076F0+DA2↓j
.text:004083F5                                         ; sub_4076F0+DB1↓j
.text:004083F5                 cmp     ds:byte_419250[eax], 1
.text:004083FC                 jnz     loc_407B42
.text:00408402                 mov     edi, [esp+0BCh+arg_8]
.text:00408409                 test    edi, edi
.text:0040840B                 jz      short loc_40847A
.text:0040840D                 mov     ebp, [esp+0BCh+arg_4]
.text:00408414                 cmp     [esp+0BCh+var_44], ebp
.text:00408418
.text:00408418 loc_408418:                             ; CODE XREF: sub_4076F0+D95↓j
.text:00408418                 jz      loc_4082C0
.text:0040841E                 mov     ebx, [esp+0BCh+arg_10]
.text:00408425                 test    ebx, ebx
.text:00408427                 jz      loc_4082C0
.text:0040842D                 mov     edx, [esp+0BCh+var_44]
.text:00408431                 dec     edx
.text:00408432                 cmp     edx, [esp+0BCh+var_34]
.text:00408439                 jz      short loc_40846E
.text:0040843B                 mov     ecx, [esp+0BCh+arg_C]
.text:00408442                 dec     ecx
.text:00408443                 cmp     edx, ecx
.text:00408445                 jz      short loc_408461
.text:00408447                 mov     edi, [esp+0BCh+var_44]
.text:0040844B                 movzx   eax, byte ptr [edi-1]
.text:0040844F
.text:0040844F loc_40844F:                             ; CODE XREF: sub_4076F0+D7C↓j
.text:0040844F                                         ; sub_4076F0+D88↓j
.text:0040844F                 cmp     ds:byte_419250[eax], 1
.text:00408456                 jnz     loc_4082C0
.text:0040845C                 jmp     loc_407B42
.text:00408461 ; ---------------------------------------------------------------------------
.text:00408461
.text:00408461 loc_408461:                             ; CODE XREF: sub_4076F0+D55↑j
.text:00408461                 mov     edx, [esp+0BCh+var_34]
.text:00408468                 movzx   eax, byte ptr [edx-1]
.text:0040846C                 jmp     short loc_40844F
.text:0040846E ; ---------------------------------------------------------------------------
.text:0040846E
.text:0040846E loc_40846E:                             ; CODE XREF: sub_4076F0+D49↑j
.text:0040846E                 mov     esi, [esp+0BCh+arg_C]
.text:00408475                 movzx   eax, byte ptr [esi]
.text:00408478                 jmp     short loc_40844F
.text:0040847A ; ---------------------------------------------------------------------------
.text:0040847A
.text:0040847A loc_40847A:                             ; CODE XREF: sub_4076F0+D1B↑j
.text:0040847A                 mov     eax, [esp+0BCh+arg_C]
.text:00408481                 cmp     [esp+0BCh+var_44], eax
.text:00408485                 jmp     short loc_408418
.text:00408487 ; ---------------------------------------------------------------------------
.text:00408487
.text:00408487 loc_408487:                             ; CODE XREF: sub_4076F0+CF8↑j
.text:00408487                 mov     ecx, [esp+0BCh+var_34]
.text:0040848E                 movzx   eax, byte ptr [ecx-1]
.text:00408492                 jmp     loc_4083F5
.text:00408497 ; ---------------------------------------------------------------------------
.text:00408497
.text:00408497 loc_408497:                             ; CODE XREF: sub_4076F0+CE6↑j
.text:00408497                 mov     ebx, [esp+0BCh+arg_C]
.text:0040849E                 movzx   eax, byte ptr [ebx]
.text:004084A1                 jmp     loc_4083F5
.text:004084A6 ; ---------------------------------------------------------------------------
.text:004084A6                 mov     ebp, [esp+0BCh+var_48]
.text:004084AA                 cmp     [esp+0BCh+var_44], ebp
.text:004084AE                 jz      loc_408531
.text:004084B4
.text:004084B4 loc_4084B4:                             ; CODE XREF: sub_4076F0+E62↓j
.text:004084B4                 mov     esi, [esp+0BCh+var_34]
.text:004084BB                 cmp     [esp+0BCh+var_44], esi
.text:004084BF                 jz      short loc_408525
.text:004084C1                 mov     edi, [esp+0BCh+arg_C]
.text:004084C8                 dec     edi
.text:004084C9                 cmp     [esp+0BCh+var_44], edi
.text:004084CD                 jz      short loc_408518
.text:004084CF                 mov     ebp, [esp+0BCh+var_44]
.text:004084D3                 movzx   eax, byte ptr [ebp+0]
.text:004084D7
.text:004084D7 loc_4084D7:                             ; CODE XREF: sub_4076F0+E33↓j
.text:004084D7                                         ; sub_4076F0+E3F↓j
.text:004084D7                 cmp     ds:byte_419250[eax], 1
.text:004084DE                 jz      loc_407B42
.text:004084E4                 mov     eax, [esp+0BCh+var_8C]
.text:004084E8                 test    eax, eax
.text:004084EA                 jnz     short loc_40850F
.text:004084EC                 mov     [esp+0BCh+var_8C], 1
.text:004084F4                 mov     eax, [esp+0BCh+var_60]
.text:004084F8                 mov     ebx, [esp+0BCh+var_64]
.text:004084FC                 cmp     eax, ebx
.text:004084FE                 ja      short loc_40850F
.text:00408500
.text:00408500 loc_408500:                             ; CODE XREF: sub_4076F0+E1D↓j
.text:00408500                 mov     esi, [esp+0BCh+var_78]
.text:00408504                 or      byte ptr [esi+eax*4], 18h
.text:00408508                 inc     eax
.text:00408509                 cmp     eax, [esp+0BCh+var_64]
.text:0040850D                 jbe     short loc_408500
.text:0040850F
.text:0040850F loc_40850F:                             ; CODE XREF: sub_4076F0+DFA↑j
.text:0040850F                                         ; sub_4076F0+E0E↑j ...
.text:0040850F                 inc     [esp+0BCh+var_44]
.text:00408513                 jmp     loc_408392
.text:00408518 ; ---------------------------------------------------------------------------
.text:00408518
.text:00408518 loc_408518:                             ; CODE XREF: sub_4076F0+DDD↑j
.text:00408518                 mov     edx, [esp+0BCh+var_34]
.text:0040851F                 movzx   eax, byte ptr [edx-1]
.text:00408523                 jmp     short loc_4084D7
.text:00408525 ; ---------------------------------------------------------------------------
.text:00408525
.text:00408525 loc_408525:                             ; CODE XREF: sub_4076F0+DCF↑j
.text:00408525                 mov     ecx, [esp+0BCh+arg_C]
.text:0040852C                 movzx   eax, byte ptr [ecx]
.text:0040852F                 jmp     short loc_4084D7
.text:00408531 ; ---------------------------------------------------------------------------
.text:00408531
.text:00408531 loc_408531:                             ; CODE XREF: sub_4076F0+DBE↑j
.text:00408531                                         ; sub_4076F0+E60↓j
.text:00408531                 mov     eax, [esp+0BCh+var_40]
.text:00408535                 cmp     [esp+0BCh+var_48], eax
.text:00408539                 jz      loc_407B42
.text:0040853F                 mov     [esp+0BCh+var_48], eax
.text:00408543                 mov     ebx, [esp+0BCh+arg_C]
.text:0040854A                 cmp     ebx, eax
.text:0040854C                 mov     [esp+0BCh+var_44], ebx
.text:00408550                 jz      short loc_408531
.text:00408552                 jmp     loc_4084B4
.text:00408557 ; ---------------------------------------------------------------------------
.text:00408557                 mov     eax, [esp+0BCh+var_48]
.text:0040855B                 cmp     [esp+0BCh+var_44], eax
.text:0040855F                 jz      loc_4085E1
.text:00408565
.text:00408565 loc_408565:                             ; CODE XREF: sub_4076F0+F12↓j
.text:00408565                 mov     edx, [esp+0BCh+var_34]
.text:0040856C                 cmp     [esp+0BCh+var_44], edx
.text:00408570                 jz      short loc_4085D5
.text:00408572                 mov     ebp, [esp+0BCh+arg_C]
.text:00408579                 dec     ebp
.text:0040857A                 cmp     [esp+0BCh+var_44], ebp
.text:0040857E                 jz      short loc_4085C8
.text:00408580                 mov     esi, [esp+0BCh+var_44]
.text:00408584                 movzx   eax, byte ptr [esi]
.text:00408587
.text:00408587 loc_408587:                             ; CODE XREF: sub_4076F0+EE3↓j
.text:00408587                                         ; sub_4076F0+EEF↓j
.text:00408587                 cmp     ds:byte_419250[eax], 1
.text:0040858E                 jnz     loc_407B42
.text:00408594                 mov     eax, [esp+0BCh+var_8C]
.text:00408598                 test    eax, eax
.text:0040859A                 jnz     short loc_4085BF
.text:0040859C                 mov     [esp+0BCh+var_8C], 1
.text:004085A4                 mov     eax, [esp+0BCh+var_60]
.text:004085A8                 mov     ecx, [esp+0BCh+var_64]
.text:004085AC                 cmp     eax, ecx
.text:004085AE                 ja      short loc_4085BF
.text:004085B0
.text:004085B0 loc_4085B0:                             ; CODE XREF: sub_4076F0+ECD↓j
.text:004085B0                 mov     edi, [esp+0BCh+var_78]
.text:004085B4                 or      byte ptr [edi+eax*4], 18h
.text:004085B8                 inc     eax
.text:004085B9                 cmp     eax, [esp+0BCh+var_64]
.text:004085BD                 jbe     short loc_4085B0
.text:004085BF
.text:004085BF loc_4085BF:                             ; CODE XREF: sub_4076F0+EAA↑j
.text:004085BF                                         ; sub_4076F0+EBE↑j
.text:004085BF                 inc     [esp+0BCh+var_44]
.text:004085C3                 jmp     loc_407F1B      ; jumptable 00407967 case 0
.text:004085C3                                         ; jumptable 004082E6 case 0
.text:004085C3                                         ; jumptable 004083B8 case 0
.text:004085C8 ; ---------------------------------------------------------------------------
.text:004085C8
.text:004085C8 loc_4085C8:                             ; CODE XREF: sub_4076F0+E8E↑j
.text:004085C8                 mov     ebx, [esp+0BCh+var_34]
.text:004085CF                 movzx   eax, byte ptr [ebx-1]
.text:004085D3                 jmp     short loc_408587
.text:004085D5 ; ---------------------------------------------------------------------------
.text:004085D5
.text:004085D5 loc_4085D5:                             ; CODE XREF: sub_4076F0+E80↑j
.text:004085D5                 mov     edi, [esp+0BCh+arg_C]
.text:004085DC                 movzx   eax, byte ptr [edi]
.text:004085DF                 jmp     short loc_408587
.text:004085E1 ; ---------------------------------------------------------------------------
.text:004085E1
.text:004085E1 loc_4085E1:                             ; CODE XREF: sub_4076F0+E6F↑j
.text:004085E1                                         ; sub_4076F0+F10↓j
.text:004085E1                 mov     ebx, [esp+0BCh+var_40]
.text:004085E5                 cmp     [esp+0BCh+var_48], ebx
.text:004085E9                 jz      loc_407B42
.text:004085EF                 mov     [esp+0BCh+var_48], ebx
.text:004085F3                 mov     ecx, [esp+0BCh+arg_C]
.text:004085FA                 cmp     ecx, ebx
.text:004085FC                 mov     [esp+0BCh+var_44], ecx
.text:00408600                 jz      short loc_4085E1
.text:00408602                 jmp     loc_408565
.text:00408607 ; ---------------------------------------------------------------------------
.text:00408607                 mov     esi, [esp+0BCh+var_4C]
.text:0040860B                 movsx   ecx, byte ptr [esi+1]
.text:0040860F                 movzx   eax, byte ptr [esi]
.text:00408612                 add     esi, 2
.text:00408615                 mov     ebp, esi
.text:00408617                 shl     ecx, 8
.text:0040861A                 lea     edi, [ecx+eax]
.text:0040861D                 add     ebp, edi
.text:0040861F                 mov     [esp+0BCh+var_30], ebp
.text:00408626                 mov     eax, offset loc_407969
.text:0040862B                 movsx   edx, byte ptr [esi+1]
.text:0040862F                 movzx   ecx, byte ptr [esi]
.text:00408632                 add     esi, 2
.text:00408635                 mov     [esp+0BCh+var_4C], esi
.text:00408639                 shl     edx, 8
.text:0040863C                 add     ecx, edx
.text:0040863E                 mov     [ebp+0], cl
.text:00408641                 mov     edi, [esp+0BCh+var_30]
.text:00408648                 sar     ecx, 8
.text:0040864B                 mov     [edi+1], cl
.text:0040864E                 mov     edx, [esp+0BCh+var_50]
.text:00408652                 cmp     esi, edx
.text:00408654                 jnz     loc_4080E5
.text:0040865A                 jmp     loc_407967
.text:0040865F ; ---------------------------------------------------------------------------
.text:0040865F                 mov     esi, [esp+0BCh+var_4C]
.text:00408663                 movsx   edi, byte ptr [esi+3]
.text:00408667                 movzx   ebp, byte ptr [esi+2]
.text:0040866B                 shl     edi, 8
.text:0040866E                 add     ebp, edi
.text:00408670                 jnz     short loc_40867C
.text:00408672                 add     [esp+0BCh+var_4C], 4
.text:00408677                 jmp     loc_407F1B      ; jumptable 00407967 case 0
.text:00408677                                         ; jumptable 004082E6 case 0
.text:00408677                                         ; jumptable 004083B8 case 0
.text:0040867C ; ---------------------------------------------------------------------------
.text:0040867C
.text:0040867C loc_40867C:                             ; CODE XREF: sub_4076F0+F80↑j
.text:0040867C                 dec     ebp
.text:0040867D                 mov     ebx, ebp
.text:0040867F                 sar     ebp, 8
.text:00408682                 mov     [esi+2], bl
.text:00408685                 mov     ecx, ebp
.text:00408687                 mov     [esi+3], cl
.text:0040868A
.text:0040868A loc_40868A:                             ; CODE XREF: sub_4076F0+14FE↓j
.text:0040868A                                         ; sub_4076F0+15A0↓j ...
.text:0040868A                 mov     ebx, [esp+0BCh+var_4C]
.text:0040868E                 movsx   ecx, byte ptr [ebx+1]
.text:00408692                 movzx   edx, byte ptr [ebx]
.text:00408695                 shl     ecx, 8
.text:00408698                 lea     esi, [ecx+edx]
.text:0040869B                 lea     edi, [esi+ebx+2]
.text:0040869F                 mov     [esp+0BCh+var_4C], edi
.text:004086A3                 jmp     loc_4080CE
.text:004086A8 ; ---------------------------------------------------------------------------
.text:004086A8                 mov     ecx, [esp+0BCh+var_4C]
.text:004086AC                 movsx   ebx, byte ptr [ecx+3]
.text:004086B0                 movzx   ebp, byte ptr [ecx+2]
.text:004086B4                 shl     ebx, 8
.text:004086B7                 add     ebp, ebx
.text:004086B9                 test    ebp, ebp
.text:004086BB                 jle     short loc_4086D9
.text:004086BD                 dec     ebp
.text:004086BE                 add     ecx, 2
.text:004086C1                 mov     eax, ebp
.text:004086C3                 mov     [ecx], al
.text:004086C5                 sar     ebp, 8
.text:004086C8                 mov     edx, ebp
.text:004086CA                 mov     [ecx+1], dl
.text:004086CD                 add     ecx, 2
.text:004086D0                 mov     [esp+0BCh+var_4C], ecx
.text:004086D4                 jmp     loc_407F1B      ; jumptable 00407967 case 0
.text:004086D4                                         ; jumptable 004082E6 case 0
.text:004086D4                                         ; jumptable 004083B8 case 0
.text:004086D9 ; ---------------------------------------------------------------------------
.text:004086D9
.text:004086D9 loc_4086D9:                             ; CODE XREF: sub_4076F0+FCB↑j
.text:004086D9                 test    ebp, ebp
.text:004086DB                 jnz     loc_407F1B      ; jumptable 00407967 case 0
.text:004086DB                                         ; jumptable 004082E6 case 0
.text:004086DB                                         ; jumptable 004083B8 case 0
.text:004086E1                 mov     ebp, [esp+0BCh+var_4C]
.text:004086E5                 mov     byte ptr [ebp+2], 0
.text:004086E9                 mov     byte ptr [ebp+3], 0
.text:004086ED
.text:004086ED loc_4086ED:                             ; CODE XREF: sub_4076F0+191C↓j
.text:004086ED                 mov     edx, [esp+0BCh+var_4C]
.text:004086F1                 movsx   ecx, byte ptr [edx+1]
.text:004086F5                 movzx   ebp, byte ptr [edx]
.text:004086F8                 add     edx, 2
.text:004086FB                 mov     ebx, edx
.text:004086FD                 mov     [esp+0BCh+var_4C], edx
.text:00408701                 shl     ecx, 8
.text:00408704                 add     ebp, ecx
.text:00408706                 cmp     edx, [esp+0BCh+var_50]
.text:0040870A                 mov     [esp+0BCh+var_30], edx
.text:00408711                 jnb     short loc_408742
.text:00408713                 cmp     byte ptr [edx], 0
.text:00408716                 jnz     short loc_408733
.text:00408718                 lea     eax, [edx+1]
.text:0040871B
.text:0040871B loc_40871B:                             ; CODE XREF: sub_4076F0+1041↓j
.text:0040871B                 mov     [esp+0BCh+var_30], eax
.text:00408722                 mov     ebx, eax
.text:00408724                 lea     eax, [eax+1]
.text:00408727                 cmp     ebx, [esp+0BCh+var_50]
.text:0040872B                 jnb     short loc_408742
.text:0040872D                 cmp     byte ptr [eax-1], 0
.text:00408731                 jz      short loc_40871B
.text:00408733
.text:00408733 loc_408733:                             ; CODE XREF: sub_4076F0+1026↑j
.text:00408733                 cmp     ebx, [esp+0BCh+var_50]
.text:00408737                 jnb     short loc_408742
.text:00408739                 cmp     byte ptr [ebx], 6
.text:0040873C                 jz      loc_4088CA
.text:00408742
.text:00408742 loc_408742:                             ; CODE XREF: sub_4076F0+1021↑j
.text:00408742                                         ; sub_4076F0+103B↑j ...
.text:00408742                 mov     edi, [esp+0BCh+var_60]
.text:00408746                 mov     ebx, [esp+0BCh+var_64]
.text:0040874A                 mov     ecx, [esp+0BCh+var_28]
.text:00408751                 mov     esi, [esp+0BCh+var_24]
.text:00408758                 sub     ebx, edi
.text:0040875A                 mov     edx, ecx
.text:0040875C                 lea     edi, [ebx+ebx]
.text:0040875F                 sub     edx, esi
.text:00408761                 lea     eax, [ebx+edi+7]
.text:00408765                 cmp     edx, eax
.text:00408767                 jnb     short loc_4087DD
.text:00408769                 mov     edi, eax
.text:0040876B
.text:0040876B loc_40876B:                             ; CODE XREF: sub_4076F0+10EB↓j
.text:0040876B                 mov     edx, dword_418080
.text:00408771                 lea     ebx, [edx+edx*8]
.text:00408774                 lea     esi, [edx+ebx*2]
.text:00408777                 cmp     ecx, esi
.text:00408779                 ja      loc_407E71
.text:0040877F                 lea     edx, ds:0[ecx*8]
.text:00408786                 mov     [esp+0BCh+Size], edx ; Size
.text:00408789                 call    malloc
.text:0040878E                 mov     [esp+0BCh+Size], eax ; void *
.text:00408791                 mov     ebx, [esp+0BCh+var_28]
.text:00408798                 mov     esi, [esp+0BCh+Src]
.text:0040879F                 shl     ebx, 2
.text:004087A2                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:004087A6                 mov     [esp+0BCh+var_B8], esi ; Src
.text:004087AA                 call    memcpy
.text:004087AF                 mov     [esp+0BCh+Src], eax
.text:004087B6                 test    eax, eax
.text:004087B8                 jz      loc_407E71
.text:004087BE                 mov     ebx, [esp+0BCh+var_28]
.text:004087C5                 mov     esi, [esp+0BCh+var_24]
.text:004087CC                 add     ebx, ebx
.text:004087CE                 mov     [esp+0BCh+var_28], ebx
.text:004087D5                 mov     ecx, ebx
.text:004087D7                 sub     ebx, esi
.text:004087D9                 cmp     ebx, edi
.text:004087DB                 jb      short loc_40876B
.text:004087DD
.text:004087DD loc_4087DD:                             ; CODE XREF: sub_4076F0+1077↑j
.text:004087DD                 mov     ecx, [esp+0BCh+var_60]
.text:004087E1                 mov     eax, [esp+0BCh+var_64]
.text:004087E5                 cmp     ecx, eax
.text:004087E7                 ja      loc_4088C1
.text:004087ED                 mov     ebx, [esp+0BCh+Src]
.text:004087F4
.text:004087F4 loc_4087F4:                             ; CODE XREF: sub_4076F0+1162↓j
.text:004087F4                 mov     eax, [esp+0BCh+var_68]
.text:004087F8                 mov     edi, [eax+ecx*4]
.text:004087FB                 mov     [ebx+esi*4], edi
.text:004087FE                 mov     edx, [esp+0BCh+var_6C]
.text:00408802                 mov     edi, [esp+0BCh+var_24]
.text:00408809                 mov     ebx, [esp+0BCh+Src]
.text:00408810                 mov     esi, [edx+ecx*4]
.text:00408813                 inc     edi
.text:00408814                 mov     [esp+0BCh+var_24], edi
.text:0040881B                 mov     [ebx+edi*4], esi
.text:0040881E                 mov     edi, [esp+0BCh+var_24]
.text:00408825                 mov     eax, [esp+0BCh+var_78]
.text:00408829                 mov     ebx, [esp+0BCh+Src]
.text:00408830                 inc     edi
.text:00408831                 mov     [esp+0BCh+var_24], edi
.text:00408838                 mov     esi, [eax+ecx*4]
.text:0040883B                 inc     ecx
.text:0040883C                 mov     [ebx+edi*4], esi
.text:0040883F                 mov     esi, [esp+0BCh+var_24]
.text:00408846                 inc     esi
.text:00408847                 cmp     ecx, [esp+0BCh+var_64]
.text:0040884B                 mov     [esp+0BCh+var_24], esi
.text:00408852                 jbe     short loc_4087F4
.text:00408854
.text:00408854 loc_408854:                             ; CODE XREF: sub_4076F0+11D8↓j
.text:00408854                 mov     eax, [esp+0BCh+var_60]
.text:00408858                 mov     [ebx+esi*4], eax
.text:0040885B                 mov     ecx, [esp+0BCh+var_24]
.text:00408862                 mov     edi, [esp+0BCh+var_64]
.text:00408866                 mov     edx, [esp+0BCh+Src]
.text:0040886D                 inc     ecx
.text:0040886E                 mov     [esp+0BCh+var_24], ecx
.text:00408875                 mov     [edx+ecx*4], edi
.text:00408878                 mov     eax, [esp+0BCh+var_24]
.text:0040887F                 mov     esi, [esp+0BCh+var_4C]
.text:00408883                 mov     edi, [esp+0BCh+Src]
.text:0040888A                 inc     eax
.text:0040888B                 add     esi, ebp
.text:0040888D                 mov     [esp+0BCh+var_24], eax
.text:00408894                 mov     [edi+eax*4], esi
.text:00408897                 mov     ecx, [esp+0BCh+var_24]
.text:0040889E                 mov     ebp, [esp+0BCh+Src]
.text:004088A5                 mov     ebx, [esp+0BCh+var_44]
.text:004088A9                 inc     ecx
.text:004088AA                 mov     [esp+0BCh+var_24], ecx
.text:004088B1                 mov     [ebp+ecx*4+0], ebx
.text:004088B5                 inc     [esp+0BCh+var_24]
.text:004088BC                 jmp     loc_407F1B      ; jumptable 00407967 case 0
.text:004088BC                                         ; jumptable 004082E6 case 0
.text:004088BC                                         ; jumptable 004083B8 case 0
.text:004088C1 ; ---------------------------------------------------------------------------
.text:004088C1
.text:004088C1 loc_4088C1:                             ; CODE XREF: sub_4076F0+10F7↑j
.text:004088C1                 mov     ebx, [esp+0BCh+Src]
.text:004088C8                 jmp     short loc_408854
.text:004088CA ; ---------------------------------------------------------------------------
.text:004088CA
.text:004088CA loc_4088CA:                             ; CODE XREF: sub_4076F0+104C↑j
.text:004088CA                 movzx   edx, byte ptr [ebx+1]
.text:004088CE                 movzx   edi, byte ptr [ebx+2]
.text:004088D2                 cmp     [esp+0BCh+var_60], 101h
.text:004088DA                 lea     ebx, [edi+edx]
.text:004088DD                 mov     [esp+0BCh+var_64], ebx
.text:004088E1                 jnz     loc_408742
.text:004088E7                 mov     [esp+0BCh+var_60], edx
.text:004088EB                 jmp     loc_408742
.text:004088F0 ; ---------------------------------------------------------------------------
.text:004088F0                 mov     eax, [esp+0BCh+var_60]
.text:004088F4                 mov     edx, [esp+0BCh+var_64]
.text:004088F8                 mov     ecx, [esp+0BCh+var_28]
.text:004088FF                 mov     esi, [esp+0BCh+var_24]
.text:00408906                 sub     edx, eax
.text:00408908                 mov     ebp, ecx
.text:0040890A                 lea     ebx, [edx+edx]
.text:0040890D                 sub     ebp, esi
.text:0040890F                 lea     eax, [edx+ebx+7]
.text:00408913                 cmp     ebp, eax
.text:00408915                 jnb     short loc_40898B
.text:00408917                 mov     edi, eax
.text:00408919
.text:00408919 loc_408919:                             ; CODE XREF: sub_4076F0+1299↓j
.text:00408919                 mov     edx, dword_418080
.text:0040891F                 lea     ebp, [edx+edx*8]
.text:00408922                 lea     esi, [edx+ebp*2]
.text:00408925                 cmp     ecx, esi
.text:00408927                 ja      loc_407E71
.text:0040892D                 lea     ebp, ds:0[ecx*8]
.text:00408934                 mov     [esp+0BCh+Size], ebp ; Size
.text:00408937                 call    malloc
.text:0040893C                 mov     [esp+0BCh+Size], eax ; void *
.text:0040893F                 mov     esi, [esp+0BCh+var_28]
.text:00408946                 mov     ebx, [esp+0BCh+Src]
.text:0040894D                 shl     esi, 2
.text:00408950                 mov     [esp+0BCh+var_B4], esi ; Size
.text:00408954                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:00408958                 call    memcpy
.text:0040895D                 mov     [esp+0BCh+Src], eax
.text:00408964                 test    eax, eax
.text:00408966                 jz      loc_407E71
.text:0040896C                 mov     edx, [esp+0BCh+var_28]
.text:00408973                 mov     esi, [esp+0BCh+var_24]
.text:0040897A                 add     edx, edx
.text:0040897C                 mov     [esp+0BCh+var_28], edx
.text:00408983                 mov     ecx, edx
.text:00408985                 sub     edx, esi
.text:00408987                 cmp     edx, edi
.text:00408989                 jb      short loc_408919
.text:0040898B
.text:0040898B loc_40898B:                             ; CODE XREF: sub_4076F0+1225↑j
.text:0040898B                 mov     ecx, [esp+0BCh+var_60]
.text:0040898F                 mov     edi, [esp+0BCh+var_64]
.text:00408993                 cmp     ecx, edi
.text:00408995                 ja      loc_408A6D
.text:0040899B                 mov     ebx, [esp+0BCh+Src]
.text:004089A2
.text:004089A2 loc_4089A2:                             ; CODE XREF: sub_4076F0+1310↓j
.text:004089A2                 mov     eax, [esp+0BCh+var_68]
.text:004089A6                 mov     edi, [eax+ecx*4]
.text:004089A9                 mov     [ebx+esi*4], edi
.text:004089AC                 mov     edx, [esp+0BCh+var_6C]
.text:004089B0                 mov     edi, [esp+0BCh+var_24]
.text:004089B7                 mov     ebx, [esp+0BCh+Src]
.text:004089BE                 mov     ebp, [edx+ecx*4]
.text:004089C1                 inc     edi
.text:004089C2                 mov     [esp+0BCh+var_24], edi
.text:004089C9                 mov     [ebx+edi*4], ebp
.text:004089CC                 mov     ebp, [esp+0BCh+var_24]
.text:004089D3                 mov     eax, [esp+0BCh+var_78]
.text:004089D7                 mov     ebx, [esp+0BCh+Src]
.text:004089DE                 inc     ebp
.text:004089DF                 mov     [esp+0BCh+var_24], ebp
.text:004089E6                 mov     esi, [eax+ecx*4]
.text:004089E9                 inc     ecx
.text:004089EA                 mov     [ebx+ebp*4], esi
.text:004089ED                 mov     esi, [esp+0BCh+var_24]
.text:004089F4                 inc     esi
.text:004089F5                 cmp     ecx, [esp+0BCh+var_64]
.text:004089F9                 mov     [esp+0BCh+var_24], esi
.text:00408A00                 jbe     short loc_4089A2
.text:00408A02
.text:00408A02 loc_408A02:                             ; CODE XREF: sub_4076F0+1384↓j
.text:00408A02                 mov     edi, [esp+0BCh+var_60]
.text:00408A06                 mov     [ebx+esi*4], edi
.text:00408A09                 mov     edx, [esp+0BCh+var_24]
.text:00408A10                 mov     ebp, [esp+0BCh+Src]
.text:00408A17                 mov     esi, [esp+0BCh+var_64]
.text:00408A1B                 inc     edx
.text:00408A1C                 mov     [esp+0BCh+var_24], edx
.text:00408A23                 mov     [ebp+edx*4+0], esi
.text:00408A27                 mov     ebx, [esp+0BCh+var_24]
.text:00408A2E                 mov     ecx, [esp+0BCh+Src]
.text:00408A35                 inc     ebx
.text:00408A36                 mov     [esp+0BCh+var_24], ebx
.text:00408A3D                 mov     dword ptr [ecx+ebx*4], 0
.text:00408A44
.text:00408A44 loc_408A44:                             ; CODE XREF: sub_4076F0+190E↓j
.text:00408A44                 mov     eax, [esp+0BCh+var_24]
.text:00408A4B                 mov     ecx, [esp+0BCh+Src]
.text:00408A52                 inc     eax
.text:00408A53                 mov     [esp+0BCh+var_24], eax
.text:00408A5A                 mov     dword ptr [ecx+eax*4], 0
.text:00408A61                 inc     [esp+0BCh+var_24]
.text:00408A68                 jmp     loc_408392
.text:00408A6D ; ---------------------------------------------------------------------------
.text:00408A6D
.text:00408A6D loc_408A6D:                             ; CODE XREF: sub_4076F0+12A5↑j
.text:00408A6D                 mov     ebx, [esp+0BCh+Src]
.text:00408A74                 jmp     short loc_408A02
.text:00408A76 ; ---------------------------------------------------------------------------
.text:00408A76                 mov     eax, [esp+0BCh+var_60]
.text:00408A7A                 mov     ebx, [esp+0BCh+var_64]
.text:00408A7E                 mov     ecx, [esp+0BCh+var_28]
.text:00408A85                 mov     esi, [esp+0BCh+var_24]
.text:00408A8C                 sub     ebx, eax
.text:00408A8E                 mov     edx, ecx
.text:00408A90                 lea     ebp, [ebx+ebx]
.text:00408A93                 sub     edx, esi
.text:00408A95                 lea     eax, [ebx+ebp+7]
.text:00408A99                 cmp     edx, eax
.text:00408A9B                 jnb     short loc_408B11
.text:00408A9D                 mov     edi, eax
.text:00408A9F
.text:00408A9F loc_408A9F:                             ; CODE XREF: sub_4076F0+141F↓j
.text:00408A9F                 mov     edx, dword_418080
.text:00408AA5                 lea     ebx, [edx+edx*8]
.text:00408AA8                 lea     esi, [edx+ebx*2]
.text:00408AAB                 cmp     ecx, esi
.text:00408AAD                 ja      loc_407E71
.text:00408AB3                 lea     ebx, ds:0[ecx*8]
.text:00408ABA                 mov     [esp+0BCh+Size], ebx ; Size
.text:00408ABD                 call    malloc
.text:00408AC2                 mov     [esp+0BCh+Size], eax ; void *
.text:00408AC5                 mov     esi, [esp+0BCh+var_28]
.text:00408ACC                 mov     ebp, [esp+0BCh+Src]
.text:00408AD3                 shl     esi, 2
.text:00408AD6                 mov     [esp+0BCh+var_B4], esi ; Size
.text:00408ADA                 mov     [esp+0BCh+var_B8], ebp ; Src
.text:00408ADE                 call    memcpy
.text:00408AE3                 mov     [esp+0BCh+Src], eax
.text:00408AEA                 test    eax, eax
.text:00408AEC                 jz      loc_407E71
.text:00408AF2                 mov     edx, [esp+0BCh+var_28]
.text:00408AF9                 mov     esi, [esp+0BCh+var_24]
.text:00408B00                 add     edx, edx
.text:00408B02                 mov     [esp+0BCh+var_28], edx
.text:00408B09                 mov     ecx, edx
.text:00408B0B                 sub     edx, esi
.text:00408B0D                 cmp     edx, edi
.text:00408B0F                 jb      short loc_408A9F
.text:00408B11
.text:00408B11 loc_408B11:                             ; CODE XREF: sub_4076F0+13AB↑j
.text:00408B11                 mov     ecx, [esp+0BCh+var_60]
.text:00408B15                 mov     edi, [esp+0BCh+var_64]
.text:00408B19                 cmp     ecx, edi
.text:00408B1B                 ja      loc_408BF3
.text:00408B21                 mov     ebx, [esp+0BCh+Src]
.text:00408B28
.text:00408B28 loc_408B28:                             ; CODE XREF: sub_4076F0+1496↓j
.text:00408B28                 mov     eax, [esp+0BCh+var_68]
.text:00408B2C                 mov     edi, [eax+ecx*4]
.text:00408B2F                 mov     [ebx+esi*4], edi
.text:00408B32                 mov     edx, [esp+0BCh+var_6C]
.text:00408B36                 mov     edi, [esp+0BCh+var_24]
.text:00408B3D                 mov     ebx, [esp+0BCh+Src]
.text:00408B44                 mov     ebp, [edx+ecx*4]
.text:00408B47                 inc     edi
.text:00408B48                 mov     [esp+0BCh+var_24], edi
.text:00408B4F                 mov     [ebx+edi*4], ebp
.text:00408B52                 mov     ebp, [esp+0BCh+var_24]
.text:00408B59                 mov     eax, [esp+0BCh+var_78]
.text:00408B5D                 mov     ebx, [esp+0BCh+Src]
.text:00408B64                 inc     ebp
.text:00408B65                 mov     [esp+0BCh+var_24], ebp
.text:00408B6C                 mov     esi, [eax+ecx*4]
.text:00408B6F                 inc     ecx
.text:00408B70                 mov     [ebx+ebp*4], esi
.text:00408B73                 mov     esi, [esp+0BCh+var_24]
.text:00408B7A                 inc     esi
.text:00408B7B                 cmp     ecx, [esp+0BCh+var_64]
.text:00408B7F                 mov     [esp+0BCh+var_24], esi
.text:00408B86                 jbe     short loc_408B28
.text:00408B88
.text:00408B88 loc_408B88:                             ; CODE XREF: sub_4076F0+150A↓j
.text:00408B88                 mov     ebp, [esp+0BCh+var_60]
.text:00408B8C                 mov     [ebx+esi*4], ebp
.text:00408B8F                 mov     eax, [esp+0BCh+var_24]
.text:00408B96                 mov     edi, [esp+0BCh+Src]
.text:00408B9D                 mov     esi, [esp+0BCh+var_64]
.text:00408BA1                 inc     eax
.text:00408BA2                 mov     [esp+0BCh+var_24], eax
.text:00408BA9                 mov     [edi+eax*4], esi
.text:00408BAC                 mov     edx, [esp+0BCh+var_24]
.text:00408BB3                 mov     ebp, [esp+0BCh+Src]
.text:00408BBA                 inc     edx
.text:00408BBB                 mov     [esp+0BCh+var_24], edx
.text:00408BC2                 mov     dword ptr [ebp+edx*4+0], 0
.text:00408BCA                 mov     ebx, [esp+0BCh+var_24]
.text:00408BD1                 mov     ecx, [esp+0BCh+Src]
.text:00408BD8                 inc     ebx
.text:00408BD9                 mov     [esp+0BCh+var_24], ebx
.text:00408BE0                 mov     dword ptr [ecx+ebx*4], 0
.text:00408BE7                 inc     [esp+0BCh+var_24]
.text:00408BEE                 jmp     loc_40868A
.text:00408BF3 ; ---------------------------------------------------------------------------
.text:00408BF3
.text:00408BF3 loc_408BF3:                             ; CODE XREF: sub_4076F0+142B↑j
.text:00408BF3                 mov     ebx, [esp+0BCh+Src]
.text:00408BFA                 jmp     short loc_408B88
.text:00408BFC ; ---------------------------------------------------------------------------
.text:00408BFC                 mov     esi, [esp+0BCh+var_4C]
.text:00408C00                 movsx   ebx, byte ptr [esi+1]
.text:00408C04                 movzx   ebp, byte ptr [esi]
.text:00408C07                 add     esi, 2
.text:00408C0A                 mov     [esp+0BCh+var_4C], esi
.text:00408C0E                 shl     ebx, 8
.text:00408C11                 add     ebp, ebx
.text:00408C13
.text:00408C13 loc_408C13:                             ; CODE XREF: sub_4076F0+153A↓j
.text:00408C13                                         ; sub_4076F0+154C↓j
.text:00408C13                 lea     edx, [esi+2]
.text:00408C16                 cmp     edx, [esp+0BCh+var_50]
.text:00408C1A                 jnb     short def_4080F4 ; jumptable 004080F4 default case
.text:00408C1C                 movzx   ecx, byte ptr [esi]
.text:00408C1F                 sub     cl, 6
.text:00408C22                 cmp     cl, 1
.text:00408C25                 ja      short def_4080F4 ; jumptable 004080F4 default case
.text:00408C27                 add     esi, 3
.text:00408C2A                 jmp     short loc_408C13
.text:00408C2C ; ---------------------------------------------------------------------------
.text:00408C2C
.text:00408C2C def_4080F4:                             ; CODE XREF: sub_4076F0+152A↑j
.text:00408C2C                                         ; sub_4076F0+1535↑j
.text:00408C2C                 lea     eax, [esi+6]    ; jumptable 004080F4 default case
.text:00408C2F                 cmp     eax, [esp+0BCh+var_50]
.text:00408C33                 jnb     short loc_408C3E
.text:00408C35                 cmp     byte ptr [esi], 13h
.text:00408C38                 jnz     short loc_408C3E
.text:00408C3A                 mov     esi, eax
.text:00408C3C                 jmp     short loc_408C13
.text:00408C3E ; ---------------------------------------------------------------------------
.text:00408C3E
.text:00408C3E loc_408C3E:                             ; CODE XREF: sub_4076F0+1543↑j
.text:00408C3E                                         ; sub_4076F0+1548↑j
.text:00408C3E                 mov     edi, [esp+0BCh+var_4C]
.text:00408C42                 add     edi, ebp
.text:00408C44                 cmp     esi, [esp+0BCh+var_50]
.text:00408C48                 mov     [esp+0BCh+var_30], edi
.text:00408C4F                 jz      loc_408DD5
.text:00408C55                 movzx   eax, byte ptr [esi]
.text:00408C58                 cmp     al, 2
.text:00408C5A                 jz      loc_408E8B
.text:00408C60                 mov     ebp, [esp+0BCh+arg_0]
.text:00408C67                 test    byte ptr [ebp+1Ch], 80h
.text:00408C6B                 jz      short loc_408C75
.text:00408C6D                 cmp     al, 0Ah
.text:00408C6F                 jz      loc_408E1B
.text:00408C75
.text:00408C75 loc_408C75:                             ; CODE XREF: sub_4076F0+157B↑j
.text:00408C75                 cmp     al, 4
.text:00408C77                 jz      loc_408D25
.text:00408C7D
.text:00408C7D loc_408C7D:                             ; CODE XREF: sub_4076F0+1652↓j
.text:00408C7D                                         ; sub_4076F0:loc_408D84↓j ...
.text:00408C7D                 sub     [esp+0BCh+var_4C], 2
.text:00408C82                 mov     esi, [esp+0BCh+var_4C]
.text:00408C86                 cmp     byte ptr [esi-1], 11h
.text:00408C8A                 jz      short loc_408C95
.text:00408C8C                 mov     byte ptr [esi-1], 0Dh
.text:00408C90                 jmp     loc_40868A
.text:00408C95 ; ---------------------------------------------------------------------------
.text:00408C95
.text:00408C95 loc_408C95:                             ; CODE XREF: sub_4076F0+159A↑j
.text:00408C95                 mov     edi, [esp+0BCh+var_24]
.text:00408C9C                 mov     ebx, [esp+0BCh+Src]
.text:00408CA3                 lea     eax, [edi-3]
.text:00408CA6                 mov     [esp+0BCh+var_24], eax
.text:00408CAD                 lea     ecx, [edi-4]
.text:00408CB0                 mov     ebp, [ebx+eax*4]
.text:00408CB3                 mov     [esp+0BCh+var_24], ecx
.text:00408CBA                 mov     edi, [ebx+ecx*4]
.text:00408CBD                 mov     ecx, ebp
.text:00408CBF                 cmp     ebp, edi
.text:00408CC1                 jb      short loc_408D18
.text:00408CC3
.text:00408CC3 loc_408CC3:                             ; CODE XREF: sub_4076F0+1626↓j
.text:00408CC3                 mov     eax, [esp+0BCh+var_24]
.text:00408CCA                 dec     eax
.text:00408CCB                 mov     [esp+0BCh+var_24], eax
.text:00408CD2                 mov     edx, [ebx+eax*4]
.text:00408CD5                 mov     ebx, [esp+0BCh+var_94]
.text:00408CD9                 mov     [ebx+ecx*4], edx
.text:00408CDC                 mov     edx, [esp+0BCh+var_24]
.text:00408CE3                 mov     ebx, [esp+0BCh+Src]
.text:00408CEA                 mov     esi, [esp+0BCh+var_90]
.text:00408CEE                 lea     ebp, [edx-1]
.text:00408CF1                 mov     [esp+0BCh+var_24], ebp
.text:00408CF8                 mov     eax, [ebx+ebp*4]
.text:00408CFB                 mov     ebp, [esp+0BCh+var_90]
.text:00408CFF                 mov     [ebp+ecx*4+0], eax
.text:00408D03                 lea     ebp, [edx-2]
.text:00408D06                 mov     [esp+0BCh+var_24], ebp
.text:00408D0D                 mov     edx, [ebx+ebp*4]
.text:00408D10                 mov     [esi+ecx*4], edx
.text:00408D13                 dec     ecx
.text:00408D14                 cmp     ecx, edi
.text:00408D16                 jnb     short loc_408CC3
.text:00408D18
.text:00408D18 loc_408D18:                             ; CODE XREF: sub_4076F0+15D1↑j
.text:00408D18                 mov     [esp+0BCh+var_8C], 0
.text:00408D20                 jmp     loc_40868A
.text:00408D25 ; ---------------------------------------------------------------------------
.text:00408D25
.text:00408D25 loc_408D25:                             ; CODE XREF: sub_4076F0+1587↑j
.text:00408D25                 mov     ebx, [esp+0BCh+var_30]
.text:00408D2C                 mov     edi, ebx
.text:00408D2E                 cmp     byte ptr [ebx+3], 2
.text:00408D32                 jz      loc_408DE2
.text:00408D38
.text:00408D38 loc_408D38:                             ; CODE XREF: sub_4076F0+1718↓j
.text:00408D38                 movzx   eax, byte ptr [edi+3]
.text:00408D3C                 cmp     al, 5
.text:00408D3E                 jz      short loc_408D97
.text:00408D40                 cmp     al, 4
.text:00408D42                 jnz     loc_408C7D
.text:00408D48                 movzx   eax, byte ptr [esi+1]
.text:00408D4C                 xor     edx, edx
.text:00408D4E                 movzx   ebx, al
.text:00408D51                 mov     [esp+0BCh+var_A5], al
.text:00408D55                 cmp     edx, ebx
.text:00408D57                 jge     short loc_408D75
.text:00408D59                 movzx   ecx, byte ptr [edi+4]
.text:00408D5D                 cmp     edx, ecx
.text:00408D5F                 jge     short loc_408D75
.text:00408D61
.text:00408D61 loc_408D61:                             ; CODE XREF: sub_4076F0+1683↓j
.text:00408D61                 movzx   eax, byte ptr [edx+edi+5]
.text:00408D66                 test    [edx+esi+2], al
.text:00408D6A                 jnz     short loc_408D75
.text:00408D6C                 inc     edx
.text:00408D6D                 cmp     edx, ebx
.text:00408D6F                 jge     short loc_408D75
.text:00408D71                 cmp     edx, ecx
.text:00408D73                 jl      short loc_408D61
.text:00408D75
.text:00408D75 loc_408D75:                             ; CODE XREF: sub_4076F0+1667↑j
.text:00408D75                                         ; sub_4076F0+166F↑j ...
.text:00408D75                 movzx   ebp, [esp+0BCh+var_A5]
.text:00408D7A                 cmp     edx, ebp
.text:00408D7C                 jz      short loc_408D8A
.text:00408D7E                 movzx   ebx, byte ptr [edi+4]
.text:00408D82                 cmp     edx, ebx
.text:00408D84
.text:00408D84 loc_408D84:                             ; CODE XREF: sub_4076F0+1784↓j
.text:00408D84                 jnz     loc_408C7D
.text:00408D8A
.text:00408D8A loc_408D8A:                             ; CODE XREF: sub_4076F0+168C↑j
.text:00408D8A                 mov     edx, [esp+0BCh+var_4C]
.text:00408D8E                 mov     byte ptr [edx-3], 11h
.text:00408D92                 jmp     loc_408C7D
.text:00408D97 ; ---------------------------------------------------------------------------
.text:00408D97
.text:00408D97 loc_408D97:                             ; CODE XREF: sub_4076F0+164E↑j
.text:00408D97                 movzx   ebx, byte ptr [esi+1]
.text:00408D9B                 xor     ecx, ecx
.text:00408D9D                 movzx   eax, bl
.text:00408DA0                 cmp     ecx, eax
.text:00408DA2                 jge     short loc_408DCA
.text:00408DA4                 mov     ebp, eax
.text:00408DA6
.text:00408DA6 loc_408DA6:                             ; CODE XREF: sub_4076F0+16D8↓j
.text:00408DA6                 movzx   edx, byte ptr [ecx+esi+2]
.text:00408DAB                 test    dl, dl
.text:00408DAD                 jz      short loc_408DC5
.text:00408DAF                 movzx   eax, byte ptr [edi+4]
.text:00408DB3                 cmp     ecx, eax
.text:00408DB5                 jge     short loc_408DCA
.text:00408DB7                 movzx   eax, byte ptr [ecx+edi+5]
.text:00408DBC                 movzx   edx, dl
.text:00408DBF                 not     eax
.text:00408DC1                 test    eax, edx
.text:00408DC3                 jnz     short loc_408DCA
.text:00408DC5
.text:00408DC5 loc_408DC5:                             ; CODE XREF: sub_4076F0+16BD↑j
.text:00408DC5                 inc     ecx
.text:00408DC6                 cmp     ecx, ebp
.text:00408DC8                 jl      short loc_408DA6
.text:00408DCA
.text:00408DCA loc_408DCA:                             ; CODE XREF: sub_4076F0+16B2↑j
.text:00408DCA                                         ; sub_4076F0+16C5↑j ...
.text:00408DCA                 movzx   esi, bl
.text:00408DCD                 cmp     ecx, esi
.text:00408DCF                 jnz     loc_408C7D
.text:00408DD5
.text:00408DD5 loc_408DD5:                             ; CODE XREF: sub_4076F0+155F↑j
.text:00408DD5                 mov     ecx, [esp+0BCh+var_4C]
.text:00408DD9                 mov     byte ptr [ecx-3], 11h
.text:00408DDD                 jmp     loc_408C7D
.text:00408DE2 ; ---------------------------------------------------------------------------
.text:00408DE2
.text:00408DE2 loc_408DE2:                             ; CODE XREF: sub_4076F0+1642↑j
.text:00408DE2                 movzx   edx, byte ptr [esi+1]
.text:00408DE6                 movzx   ecx, byte ptr [ebx+5]
.text:00408DEA                 shl     edx, 3
.text:00408DED                 movzx   ebp, cl
.text:00408DF0                 cmp     edx, ebp
.text:00408DF2                 jle     short loc_408E0E
.text:00408DF4                 mov     dl, cl
.text:00408DF6                 shr     dl, 3
.text:00408DF9                 and     ecx, 7
.text:00408DFC                 movzx   ebx, dl
.text:00408DFF                 movzx   eax, byte ptr [ebx+esi+2]
.text:00408E04                 sar     eax, cl
.text:00408E06                 test    al, 1
.text:00408E08                 jnz     loc_408D38
.text:00408E0E
.text:00408E0E loc_408E0E:                             ; CODE XREF: sub_4076F0+1702↑j
.text:00408E0E                 mov     edi, [esp+0BCh+var_4C]
.text:00408E12                 mov     byte ptr [edi-3], 11h
.text:00408E16                 jmp     loc_408C7D
.text:00408E1B ; ---------------------------------------------------------------------------
.text:00408E1B
.text:00408E1B loc_408E1B:                             ; CODE XREF: sub_4076F0+157F↑j
.text:00408E1B                 mov     cl, 0Ah
.text:00408E1D
.text:00408E1D loc_408E1D:                             ; CODE XREF: sub_4076F0+179F↓j
.text:00408E1D                 mov     ebx, [esp+0BCh+var_30]
.text:00408E24                 mov     esi, ebx
.text:00408E26                 cmp     byte ptr [ebx+3], 2
.text:00408E2A                 jz      short loc_408E79
.text:00408E2C
.text:00408E2C loc_408E2C:                             ; CODE XREF: sub_4076F0+178C↓j
.text:00408E2C                 movzx   edx, byte ptr [esi+3]
.text:00408E30                 mov     bl, dl
.text:00408E32                 sub     bl, 4
.text:00408E35                 cmp     bl, 1
.text:00408E38                 ja      loc_408C7D
.text:00408E3E                 movzx   edi, byte ptr [esi+4]
.text:00408E42                 xor     ebx, ebx
.text:00408E44                 cmp     dl, 5
.text:00408E47                 setz    bl
.text:00408E4A                 movzx   eax, cl
.text:00408E4D                 shl     edi, 3
.text:00408E50                 cmp     eax, edi
.text:00408E52                 jnb     short loc_408E72
.text:00408E54                 mov     al, cl
.text:00408E56                 shr     al, 3
.text:00408E59                 and     ecx, 7
.text:00408E5C                 movzx   edx, al
.text:00408E5F                 movzx   eax, byte ptr [edx+esi+5]
.text:00408E64                 sar     eax, cl
.text:00408E66                 test    al, 1
.text:00408E68                 jz      short loc_408E72
.text:00408E6A                 test    ebx, ebx
.text:00408E6C                 setz    cl
.text:00408E6F                 movzx   ebx, cl
.text:00408E72
.text:00408E72 loc_408E72:                             ; CODE XREF: sub_4076F0+1762↑j
.text:00408E72                                         ; sub_4076F0+1778↑j
.text:00408E72                 test    ebx, ebx
.text:00408E74                 jmp     loc_408D84
.text:00408E79 ; ---------------------------------------------------------------------------
.text:00408E79
.text:00408E79 loc_408E79:                             ; CODE XREF: sub_4076F0+173A↑j
.text:00408E79                 cmp     [ebx+5], cl
.text:00408E7C                 jz      short loc_408E2C
.text:00408E7E                 mov     esi, [esp+0BCh+var_4C]
.text:00408E82                 mov     byte ptr [esi-3], 11h
.text:00408E86                 jmp     loc_408C7D
.text:00408E8B ; ---------------------------------------------------------------------------
.text:00408E8B
.text:00408E8B loc_408E8B:                             ; CODE XREF: sub_4076F0+156A↑j
.text:00408E8B                 movzx   ecx, byte ptr [esi+2]
.text:00408E8F                 jmp     short loc_408E1D
.text:00408E91 ; ---------------------------------------------------------------------------
.text:00408E91                 mov     edx, [esp+0BCh+var_4C]
.text:00408E95                 mov     edi, [esp+0BCh+var_60]
.text:00408E99                 mov     ebx, [esp+0BCh+var_64]
.text:00408E9D                 movsx   ecx, byte ptr [edx+1]
.text:00408EA1                 mov     esi, [esp+0BCh+var_24]
.text:00408EA8                 sub     ebx, edi
.text:00408EAA                 movzx   ebp, byte ptr [edx]
.text:00408EAD                 lea     edi, [ebx+ebx]
.text:00408EB0                 shl     ecx, 8
.text:00408EB3                 add     edx, 2
.text:00408EB6                 lea     eax, [ebx+edi+7]
.text:00408EBA                 mov     [esp+0BCh+var_4C], edx
.text:00408EBE                 add     ebp, ecx
.text:00408EC0                 mov     ecx, [esp+0BCh+var_28]
.text:00408EC7                 mov     edx, ecx
.text:00408EC9                 sub     edx, esi
.text:00408ECB                 cmp     edx, eax
.text:00408ECD                 jnb     short loc_408F43
.text:00408ECF                 mov     edi, eax
.text:00408ED1
.text:00408ED1 loc_408ED1:                             ; CODE XREF: sub_4076F0+1851↓j
.text:00408ED1                 mov     edx, dword_418080
.text:00408ED7                 lea     esi, [edx+edx*8]
.text:00408EDA                 lea     ebx, [edx+esi*2]
.text:00408EDD                 cmp     ecx, ebx
.text:00408EDF                 ja      loc_407E71
.text:00408EE5                 lea     edx, ds:0[ecx*8]
.text:00408EEC                 mov     [esp+0BCh+Size], edx ; Size
.text:00408EEF                 call    malloc
.text:00408EF4                 mov     [esp+0BCh+Size], eax ; void *
.text:00408EF7                 mov     esi, [esp+0BCh+var_28]
.text:00408EFE                 mov     ebx, [esp+0BCh+Src]
.text:00408F05                 shl     esi, 2
.text:00408F08                 mov     [esp+0BCh+var_B4], esi ; Size
.text:00408F0C                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:00408F10                 call    memcpy
.text:00408F15                 mov     [esp+0BCh+Src], eax
.text:00408F1C                 test    eax, eax
.text:00408F1E                 jz      loc_407E71
.text:00408F24                 mov     ebx, [esp+0BCh+var_28]
.text:00408F2B                 mov     esi, [esp+0BCh+var_24]
.text:00408F32                 add     ebx, ebx
.text:00408F34                 mov     [esp+0BCh+var_28], ebx
.text:00408F3B                 mov     ecx, ebx
.text:00408F3D                 sub     ebx, esi
.text:00408F3F                 cmp     ebx, edi
.text:00408F41                 jb      short loc_408ED1
.text:00408F43
.text:00408F43 loc_408F43:                             ; CODE XREF: sub_4076F0+17DD↑j
.text:00408F43                 mov     ecx, [esp+0BCh+var_60]
.text:00408F47                 mov     eax, [esp+0BCh+var_64]
.text:00408F4B                 cmp     ecx, eax
.text:00408F4D                 ja      loc_409003
.text:00408F53                 mov     ebx, [esp+0BCh+Src]
.text:00408F5A
.text:00408F5A loc_408F5A:                             ; CODE XREF: sub_4076F0+18C8↓j
.text:00408F5A                 mov     eax, [esp+0BCh+var_68]
.text:00408F5E                 mov     edi, [eax+ecx*4]
.text:00408F61                 mov     [ebx+esi*4], edi
.text:00408F64                 mov     edx, [esp+0BCh+var_6C]
.text:00408F68                 mov     edi, [esp+0BCh+var_24]
.text:00408F6F                 mov     ebx, [esp+0BCh+Src]
.text:00408F76                 mov     esi, [edx+ecx*4]
.text:00408F79                 inc     edi
.text:00408F7A                 mov     [esp+0BCh+var_24], edi
.text:00408F81                 mov     [ebx+edi*4], esi
.text:00408F84                 mov     edi, [esp+0BCh+var_24]
.text:00408F8B                 mov     eax, [esp+0BCh+var_78]
.text:00408F8F                 mov     ebx, [esp+0BCh+Src]
.text:00408F96                 inc     edi
.text:00408F97                 mov     [esp+0BCh+var_24], edi
.text:00408F9E                 mov     esi, [eax+ecx*4]
.text:00408FA1                 inc     ecx
.text:00408FA2                 mov     [ebx+edi*4], esi
.text:00408FA5                 mov     esi, [esp+0BCh+var_24]
.text:00408FAC                 inc     esi
.text:00408FAD                 cmp     ecx, [esp+0BCh+var_64]
.text:00408FB1                 mov     [esp+0BCh+var_24], esi
.text:00408FB8                 jbe     short loc_408F5A
.text:00408FBA
.text:00408FBA loc_408FBA:                             ; CODE XREF: sub_4076F0+191A↓j
.text:00408FBA                 mov     eax, [esp+0BCh+var_60]
.text:00408FBE                 mov     [ebx+esi*4], eax
.text:00408FC1                 mov     edi, [esp+0BCh+var_24]
.text:00408FC8                 mov     edx, [esp+0BCh+Src]
.text:00408FCF                 mov     esi, [esp+0BCh+var_64]
.text:00408FD3                 inc     edi
.text:00408FD4                 mov     [esp+0BCh+var_24], edi
.text:00408FDB                 mov     [edx+edi*4], esi
.text:00408FDE                 mov     ebx, [esp+0BCh+var_4C]
.text:00408FE2                 mov     ecx, [esp+0BCh+var_24]
.text:00408FE9                 add     ebx, ebp
.text:00408FEB                 mov     ebp, [esp+0BCh+Src]
.text:00408FF2                 inc     ecx
.text:00408FF3                 mov     [esp+0BCh+var_24], ecx
.text:00408FFA                 mov     [ebp+ecx*4+0], ebx
.text:00408FFE                 jmp     loc_408A44
.text:00409003 ; ---------------------------------------------------------------------------
.text:00409003
.text:00409003 loc_409003:                             ; CODE XREF: sub_4076F0+185D↑j
.text:00409003                 mov     ebx, [esp+0BCh+Src]
.text:0040900A                 jmp     short loc_408FBA
.text:0040900C ; ---------------------------------------------------------------------------
.text:0040900C                 jmp     loc_4086ED
.text:00409011 ; ---------------------------------------------------------------------------
.text:00409011                 jmp     loc_40868A
.text:00409016 ; ---------------------------------------------------------------------------
.text:00409016                 mov     eax, [esp+0BCh+var_38]
.text:0040901D                 cmp     [esp+0BCh+var_44], eax
.text:00409021                 jz      loc_408392
.text:00409027                 jmp     loc_407B42
.text:00409027 ; ---------------------------------------------------------------------------
.text:0040902C                 align 10h
.text:00409030                 mov     ecx, [esp+0BCh+arg_8]
.text:00409037                 test    ecx, ecx
.text:00409039                 jz      short loc_409060
.text:0040903B                 mov     ebx, [esp+0BCh+arg_4]
.text:00409042                 cmp     [esp+0BCh+var_44], ebx
.text:00409046
.text:00409046 loc_409046:                             ; CODE XREF: sub_4076F0+197B↓j
.text:00409046                 jz      loc_4082C0
.text:0040904C                 mov     edi, [esp+0BCh+arg_10]
.text:00409053                 test    edi, edi
.text:00409055
.text:00409055 loc_409055:                             ; CODE XREF: sub_4076F0+19D7↓j
.text:00409055                 jz      loc_4082C0
.text:0040905B                 jmp     loc_407B42
.text:00409060 ; ---------------------------------------------------------------------------
.text:00409060
.text:00409060 loc_409060:                             ; CODE XREF: sub_4076F0+1949↑j
.text:00409060                 mov     esi, [esp+0BCh+arg_C]
.text:00409067                 cmp     [esp+0BCh+var_44], esi
.text:0040906B                 jmp     short loc_409046
.text:0040906D ; ---------------------------------------------------------------------------
.text:0040906D                 mov     ebx, [esp+0BCh+var_38]
.text:00409074                 cmp     [esp+0BCh+var_44], ebx
.text:00409078                 jz      short loc_4090BC
.text:0040907A                 mov     edi, [esp+0BCh+var_34]
.text:00409081                 cmp     [esp+0BCh+var_44], edi
.text:00409085                 jz      short loc_4090B0
.text:00409087                 mov     edx, [esp+0BCh+var_44]
.text:0040908B                 cmp     byte ptr [edx], 0Ah
.text:0040908E
.text:0040908E loc_40908E:                             ; CODE XREF: sub_4076F0+19CA↓j
.text:0040908E                                         ; sub_4076F0+1A14↓j
.text:0040908E                 jnz     loc_407B42
.text:00409094                 mov     ebp, [esp+0BCh+arg_0]
.text:0040909B                 test    byte ptr [ebp+1Ch], 80h
.text:0040909F                 jnz     loc_407F1B      ; jumptable 00407967 case 0
.text:0040909F                                         ; jumptable 004082E6 case 0
.text:0040909F                                         ; jumptable 004083B8 case 0
.text:004090A5                 jmp     loc_407B42
.text:004090A5 ; ---------------------------------------------------------------------------
.text:004090AA                 align 10h
.text:004090B0
.text:004090B0 loc_4090B0:                             ; CODE XREF: sub_4076F0+1995↑j
.text:004090B0                 mov     eax, [esp+0BCh+arg_C]
.text:004090B7                 cmp     byte ptr [eax], 0Ah
.text:004090BA                 jmp     short loc_40908E
.text:004090BC ; ---------------------------------------------------------------------------
.text:004090BC
.text:004090BC loc_4090BC:                             ; CODE XREF: sub_4076F0+1988↑j
.text:004090BC                 mov     esi, [esp+0BCh+arg_0]
.text:004090C3                 test    byte ptr [esi+1Ch], 40h
.text:004090C7                 jmp     short loc_409055
.text:004090C9 ; ---------------------------------------------------------------------------
.text:004090C9                 mov     ebx, [esp+0BCh+arg_8]
.text:004090D0                 test    ebx, ebx
.text:004090D2                 jz      short loc_409106
.text:004090D4                 mov     edi, [esp+0BCh+arg_4]
.text:004090DB                 cmp     [esp+0BCh+var_44], edi
.text:004090DF
.text:004090DF loc_4090DF:                             ; CODE XREF: sub_4076F0+1A21↓j
.text:004090DF                 jz      short loc_4090EC
.text:004090E1                 mov     edx, [esp+0BCh+arg_10]
.text:004090E8                 test    edx, edx
.text:004090EA                 jnz     short loc_4090FC
.text:004090EC
.text:004090EC loc_4090EC:                             ; CODE XREF: sub_4076F0:loc_4090DF↑j
.text:004090EC                 mov     ebp, [esp+0BCh+arg_0]
.text:004090F3                 test    byte ptr [ebp+1Ch], 20h
.text:004090F7                 jmp     loc_408194
.text:004090FC ; ---------------------------------------------------------------------------
.text:004090FC
.text:004090FC loc_4090FC:                             ; CODE XREF: sub_4076F0+19FA↑j
.text:004090FC                 mov     ecx, [esp+0BCh+var_44]
.text:00409100                 cmp     byte ptr [ecx-1], 0Ah
.text:00409104                 jmp     short loc_40908E
.text:00409106 ; ---------------------------------------------------------------------------
.text:00409106
.text:00409106 loc_409106:                             ; CODE XREF: sub_4076F0+19E2↑j
.text:00409106                 mov     eax, [esp+0BCh+arg_C]
.text:0040910D                 cmp     [esp+0BCh+var_44], eax
.text:00409111                 jmp     short loc_4090DF
.text:00409113 ; ---------------------------------------------------------------------------
.text:00409113                 mov     eax, [esp+0BCh+var_4C]
.text:00409117                 mov     ecx, [esp+0BCh+var_68]
.text:0040911B                 movzx   esi, byte ptr [eax]
.text:0040911E                 inc     [esp+0BCh+var_4C]
.text:00409122                 mov     edi, [ecx+esi*4]
.text:00409125                 mov     [esp+0BCh+var_A4], esi
.text:00409129                 cmp     edi, offset unk_419350
.text:0040912F                 jz      loc_407B42
.text:00409135                 mov     ebp, [esp+0BCh+var_6C]
.text:00409139                 mov     eax, [ebp+esi*4+0]
.text:0040913D                 cmp     eax, offset unk_419350
.text:00409142                 jz      loc_407B42
.text:00409148                 mov     [esp+0BCh+var_A0], edi
.text:0040914C                 mov     esi, [esp+0BCh+arg_8]
.text:00409153                 xor     ecx, ecx
.text:00409155                 test    esi, esi
.text:00409157                 jz      short loc_40916D
.text:00409159                 cmp     [esp+0BCh+arg_4], edi
.text:00409160                 ja      short loc_40916D
.text:00409162                 mov     edx, [esp+0BCh+var_34]
.text:00409169                 cmp     edi, edx
.text:0040916B                 jbe     short loc_409172
.text:0040916D
.text:0040916D loc_40916D:                             ; CODE XREF: sub_4076F0+1A67↑j
.text:0040916D                                         ; sub_4076F0+1A70↑j
.text:0040916D                 mov     ecx, 1
.text:00409172
.text:00409172 loc_409172:                             ; CODE XREF: sub_4076F0+1A7B↑j
.text:00409172                 mov     edi, [esp+0BCh+arg_8]
.text:00409179                 xor     edx, edx
.text:0040917B                 test    edi, edi
.text:0040917D                 jz      short loc_409196
.text:0040917F                 cmp     [esp+0BCh+arg_4], eax
.text:00409186                 ja      short loc_409196
.text:00409188                 cmp     eax, [esp+0BCh+var_34]
.text:0040918F                 ja      short loc_409196
.text:00409191                 mov     edx, 1
.text:00409196
.text:00409196 loc_409196:                             ; CODE XREF: sub_4076F0+1A8D↑j
.text:00409196                                         ; sub_4076F0+1A96↑j ...
.text:00409196                 cmp     ecx, edx
.text:00409198                 mov     ebx, eax
.text:0040919A                 jnz     short loc_4091A3
.text:0040919C                 mov     ebx, [esp+0BCh+var_3C]
.text:004091A3
.text:004091A3 loc_4091A3:                             ; CODE XREF: sub_4076F0+1AAA↑j
.text:004091A3                                         ; sub_4076F0+1B21↓j ...
.text:004091A3                 cmp     [esp+0BCh+var_A0], ebx
.text:004091A7                 jz      loc_409276
.text:004091AD
.text:004091AD loc_4091AD:                             ; CODE XREF: sub_4076F0+1BAC↓j
.text:004091AD                                         ; sub_4076F0+1BB5↓j
.text:004091AD                 mov     eax, [esp+0BCh+var_48]
.text:004091B1                 cmp     [esp+0BCh+var_44], eax
.text:004091B5                 jz      loc_409250
.text:004091BB
.text:004091BB loc_4091BB:                             ; CODE XREF: sub_4076F0+1B81↓j
.text:004091BB                 mov     ecx, [esp+0BCh+var_44]
.text:004091BF                 mov     ebp, [esp+0BCh+var_48]
.text:004091C3                 mov     edx, [esp+0BCh+var_A0]
.text:004091C7                 sub     ebp, ecx
.text:004091C9                 mov     ecx, ebx
.text:004091CB                 sub     ecx, edx
.text:004091CD                 cmp     ebp, ecx
.text:004091CF                 jle     short loc_4091D3
.text:004091D1                 mov     ebp, ecx
.text:004091D3
.text:004091D3 loc_4091D3:                             ; CODE XREF: sub_4076F0+1ADF↑j
.text:004091D3                 mov     esi, [esp+0BCh+var_58]
.text:004091D7                 test    esi, esi
.text:004091D9                 jz      short loc_40923F
.text:004091DB                 mov     [esp+0BCh+var_B4], ebp
.text:004091DF                 mov     edx, [esp+0BCh+var_58]
.text:004091E3                 mov     eax, [esp+0BCh+var_A0]
.text:004091E7                 mov     edi, [esp+0BCh+var_44]
.text:004091EB                 mov     [esp+0BCh+var_B0], edx
.text:004091EF                 mov     [esp+0BCh+var_B8], eax
.text:004091F3                 mov     [esp+0BCh+Size], edi
.text:004091F6                 call    sub_409DB0
.text:004091FB                 test    eax, eax
.text:004091FD
.text:004091FD loc_4091FD:                             ; CODE XREF: sub_4076F0+1B5E↓j
.text:004091FD                 jnz     loc_407B42
.text:00409203                 add     [esp+0BCh+var_44], ebp
.text:00409207                 add     [esp+0BCh+var_A0], ebp
.text:0040920B                 mov     ebp, [esp+0BCh+var_8C]
.text:0040920F                 test    ebp, ebp
.text:00409211                 jnz     short loc_4091A3
.text:00409213                 mov     [esp+0BCh+var_8C], 1
.text:0040921B                 mov     eax, [esp+0BCh+var_60]
.text:0040921F                 mov     ecx, [esp+0BCh+var_64]
.text:00409223                 cmp     eax, ecx
.text:00409225                 ja      loc_4091A3
.text:0040922B
.text:0040922B loc_40922B:                             ; CODE XREF: sub_4076F0+1B48↓j
.text:0040922B                 mov     esi, [esp+0BCh+var_78]
.text:0040922F                 or      byte ptr [esi+eax*4], 18h
.text:00409233                 inc     eax
.text:00409234                 cmp     eax, [esp+0BCh+var_64]
.text:00409238                 jbe     short loc_40922B
.text:0040923A                 jmp     loc_4091A3
.text:0040923F ; ---------------------------------------------------------------------------
.text:0040923F
.text:0040923F loc_40923F:                             ; CODE XREF: sub_4076F0+1AE9↑j
.text:0040923F                 cld
.text:00409240                 mov     esi, [esp+0BCh+var_44]
.text:00409244                 cmp     ebp, ebp
.text:00409246                 mov     edi, [esp+0BCh+var_A0]
.text:0040924A                 mov     ecx, ebp
.text:0040924C                 repe cmpsb
.text:0040924E                 jmp     short loc_4091FD
.text:00409250 ; ---------------------------------------------------------------------------
.text:00409250
.text:00409250 loc_409250:                             ; CODE XREF: sub_4076F0+1AC5↑j
.text:00409250                                         ; sub_4076F0+1B7F↓j
.text:00409250                 mov     eax, [esp+0BCh+var_40]
.text:00409254                 cmp     [esp+0BCh+var_48], eax
.text:00409258                 jz      loc_407B42
.text:0040925E                 mov     [esp+0BCh+var_48], eax
.text:00409262                 mov     edi, [esp+0BCh+arg_C]
.text:00409269                 cmp     edi, eax
.text:0040926B                 mov     [esp+0BCh+var_44], edi
.text:0040926F                 jz      short loc_409250
.text:00409271                 jmp     loc_4091BB
.text:00409276 ; ---------------------------------------------------------------------------
.text:00409276
.text:00409276 loc_409276:                             ; CODE XREF: sub_4076F0+1AB7↑j
.text:00409276                                         ; sub_4076F0+1BAA↓j
.text:00409276                 cmp     ebx, [esp+0BCh+var_40]
.text:0040927A                 jz      short loc_4092A1
.text:0040927C                 mov     ebp, [esp+0BCh+var_A4]
.text:00409280                 mov     ecx, [esp+0BCh+var_6C]
.text:00409284                 mov     eax, [ecx+ebp*4]
.text:00409287                 cmp     ebx, eax
.text:00409289                 jz      short loc_4092A1
.text:0040928B                 mov     esi, [esp+0BCh+arg_C]
.text:00409292                 mov     ebx, eax
.text:00409294                 cmp     esi, eax
.text:00409296                 mov     [esp+0BCh+var_A0], esi
.text:0040929A                 jz      short loc_409276
.text:0040929C                 jmp     loc_4091AD
.text:004092A1 ; ---------------------------------------------------------------------------
.text:004092A1
.text:004092A1 loc_4092A1:                             ; CODE XREF: sub_4076F0+1B8A↑j
.text:004092A1                                         ; sub_4076F0+1B99↑j
.text:004092A1                 cmp     [esp+0BCh+var_A0], ebx
.text:004092A5                 jnz     loc_4091AD
.text:004092AB                 jmp     loc_4080CE
.text:004092B0 ; ---------------------------------------------------------------------------
.text:004092B0
.text:004092B0 loc_4092B0:                             ; CODE XREF: sub_4076F0+A04↑j
.text:004092B0                                         ; DATA XREF: .text:jpt_4080F4↑o
.text:004092B0                 mov     esi, [esp+0BCh+var_4C] ; jumptable 004080F4 case 7
.text:004092B4                 mov     ebx, [esp+0BCh+var_78]
.text:004092B8                 movzx   edx, byte ptr [esi]
.text:004092BB                 test    byte ptr [ebx+edx*4], 3
.text:004092BF                 jz      loc_4096A7
.text:004092C5                 mov     edi, [esp+0BCh+var_6C]
.text:004092C9                 mov     eax, [edi+edx*4]
.text:004092CC                 cmp     eax, offset unk_419350
.text:004092D1                 jz      loc_40969E
.text:004092D7
.text:004092D7 loc_4092D7:                             ; CODE XREF: sub_4076F0+1FB2↓j
.text:004092D7                                         ; sub_4076F0+1FBF↓j
.text:004092D7                 mov     ecx, [esp+0BCh+var_74]
.text:004092DB                 mov     edi, [esp+0BCh+var_6C]
.text:004092DF                 mov     ebx, [esp+0BCh+var_78]
.text:004092E3                 mov     [ecx+edx*4], eax
.text:004092E6                 mov     edx, [esp+0BCh+var_4C]
.text:004092EA                 mov     eax, [esp+0BCh+var_44]
.text:004092EE                 movzx   ebp, byte ptr [edx]
.text:004092F1                 mov     [edi+ebp*4], eax
.text:004092F4                 movzx   esi, byte ptr [edx]
.text:004092F7                 and     byte ptr [ebx+esi*4], 0FBh
.text:004092FB                 mov     [esp+0BCh+var_8C], 0
.text:00409303                 mov     ecx, [esp+0BCh+var_64]
.text:00409307                 cmp     [esp+0BCh+var_60], ecx
.text:0040930B                 jz      loc_409686
.text:00409311                 mov     ebx, [esp+0BCh+var_4C]
.text:00409315                 movzx   ecx, byte ptr [ebx]
.text:00409318                 mov     dl, cl
.text:0040931A                 dec     dl
.text:0040931C                 jz      short loc_409345
.text:0040931E                 mov     esi, [esp+0BCh+var_78]
.text:00409322                 movzx   edi, dl
.text:00409325                 test    byte ptr [esi+edi*4], 4
.text:00409329                 jnz     short loc_40933D
.text:0040932B
.text:0040932B loc_40932B:                             ; CODE XREF: sub_4076F0+1C4B↓j
.text:0040932B                 dec     dl
.text:0040932D                 jz      short loc_409345
.text:0040932F                 mov     ebp, [esp+0BCh+var_78]
.text:00409333                 movzx   ebx, dl
.text:00409336                 test    byte ptr [ebp+ebx*4+0], 4
.text:0040933B                 jz      short loc_40932B
.text:0040933D
.text:0040933D loc_40933D:                             ; CODE XREF: sub_4076F0+1C39↑j
.text:0040933D                 test    dl, dl
.text:0040933F                 jnz     loc_40967A
.text:00409345
.text:00409345 loc_409345:                             ; CODE XREF: sub_4076F0+1C2C↑j
.text:00409345                                         ; sub_4076F0+1C3D↑j
.text:00409345                 mov     [esp+0BCh+var_60], 101h
.text:0040934D                 mov     [esp+0BCh+var_64], 100h
.text:00409355
.text:00409355 loc_409355:                             ; CODE XREF: sub_4076F0+1F91↓j
.text:00409355                                         ; sub_4076F0+1FA9↓j
.text:00409355                 movzx   edx, cl
.text:00409358                 mov     ecx, [esp+0BCh+var_78]
.text:0040935C                 test    byte ptr [ecx+edx*4], 8
.text:00409360                 jz      short loc_409395
.text:00409362                 mov     esi, [esp+0BCh+var_4C]
.text:00409366                 mov     edi, [esp+0BCh+var_4C]
.text:0040936A                 dec     esi
.text:0040936B                 cmp     [esp+0BCh+var_54], esi
.text:0040936F                 lea     ecx, [edi+2]
.text:00409372                 jz      short loc_409395
.text:00409374
.text:00409374 loc_409374:                             ; CODE XREF: sub_4076F0+1CB0↓j
.text:00409374                                         ; sub_4076F0+1D01↓j ...
.text:00409374                 mov     [esp+0BCh+var_4C], ecx
.text:00409378                 mov     ebp, [esp+0BCh+var_50]
.text:0040937C                 mov     eax, offset loc_407969
.text:00409381                 cmp     ecx, ebp
.text:00409383                 jz      loc_407967
.text:00409389                 movzx   ebx, byte ptr [ecx]
.text:0040938C                 inc     [esp+0BCh+var_4C]
.text:00409390                 jmp     loc_407960
.text:00409395 ; ---------------------------------------------------------------------------
.text:00409395
.text:00409395 loc_409395:                             ; CODE XREF: sub_4076F0+1C70↑j
.text:00409395                                         ; sub_4076F0+1C82↑j
.text:00409395                 mov     ecx, [esp+0BCh+var_4C]
.text:00409399                 add     ecx, 2
.text:0040939C                 cmp     ecx, [esp+0BCh+var_50]
.text:004093A0                 jnb     short loc_409374
.text:004093A2                 mov     [esp+0BCh+var_30], ecx
.text:004093A9                 mov     ebx, [esp+0BCh+var_4C]
.text:004093AD                 xor     ebp, ebp
.text:004093AF                 mov     [esp+0BCh+var_97], 0
.text:004093B4                 mov     edx, ebx
.text:004093B6                 add     edx, 3
.text:004093B9                 movzx   eax, byte ptr [ebx+2]
.text:004093BD                 mov     [esp+0BCh+var_30], edx
.text:004093C4                 cmp     eax, 13h
.text:004093C7                 ja      loc_40966A
.text:004093CD                 cmp     eax, 11h
.text:004093D0                 jnb     loc_409633
.text:004093D6                 cmp     eax, 0Dh
.text:004093D9                 jz      loc_409633
.text:004093DF
.text:004093DF loc_4093DF:                             ; CODE XREF: sub_4076F0+1F65↓j
.text:004093DF                                         ; sub_4076F0+1F75↓j ...
.text:004093DF                 mov     ebx, [esp+0BCh+var_30]
.text:004093E6                 add     ebx, ebp
.text:004093E8                 test    ebp, ebp
.text:004093EA                 mov     [esp+0BCh+var_30], ebx
.text:004093F1                 jns     short loc_409374
.text:004093F3                 cmp     byte ptr [ebx], 0Fh
.text:004093F6                 jnz     loc_409374
.text:004093FC                 cmp     byte ptr [ebx+3], 6
.text:00409400                 jnz     loc_409374
.text:00409406                 movzx   eax, byte ptr [ebx+4]
.text:0040940A                 mov     ebp, [esp+0BCh+var_4C]
.text:0040940E                 cmp     al, [ebp+0]
.text:00409411                 jnz     loc_409374
.text:00409417                 mov     ecx, [esp+0BCh+var_78]
.text:0040941B                 movzx   edx, al
.text:0040941E                 movzx   eax, byte ptr [ecx+edx*4]
.text:00409422                 test    al, 10h
.text:00409424                 jz      short loc_409478
.text:00409426                 and     al, 0EFh
.text:00409428                 mov     [ecx+edx*4], al
.text:0040942B                 mov     eax, [esp+0BCh+var_4C]
.text:0040942F                 movzx   ecx, byte ptr [eax]
.text:00409432                 movzx   esi, byte ptr [eax+1]
.text:00409436                 lea     edx, [esi+ecx]
.text:00409439                 cmp     ecx, edx
.text:0040943B                 jnb     short loc_409471
.text:0040943D
.text:0040943D loc_40943D:                             ; CODE XREF: sub_4076F0+1D7F↓j
.text:0040943D                 mov     edx, [esp+0BCh+var_70]
.text:00409441                 mov     ebx, [esp+0BCh+var_68]
.text:00409445                 mov     ebp, [esp+0BCh+var_74]
.text:00409449                 mov     edi, [edx+ecx*4]
.text:0040944C                 mov     [ebx+ecx*4], edi
.text:0040944F                 mov     edx, [ebp+ecx*4+0]
.text:00409453                 cmp     edx, edi
.text:00409455                 jb      short loc_40945E
.text:00409457                 mov     eax, [esp+0BCh+var_6C]
.text:0040945B                 mov     [eax+ecx*4], edx
.text:0040945E
.text:0040945E loc_40945E:                             ; CODE XREF: sub_4076F0+1D65↑j
.text:0040945E                 mov     ebp, [esp+0BCh+var_4C]
.text:00409462                 inc     ecx
.text:00409463                 movzx   esi, byte ptr [ebp+0]
.text:00409467                 movzx   edi, byte ptr [ebp+1]
.text:0040946B                 add     esi, edi
.text:0040946D                 cmp     ecx, esi
.text:0040946F                 jb      short loc_40943D
.text:00409471
.text:00409471 loc_409471:                             ; CODE XREF: sub_4076F0+1D4B↑j
.text:00409471                 mov     ebx, [esp+0BCh+var_30]
.text:00409478
.text:00409478 loc_409478:                             ; CODE XREF: sub_4076F0+1D34↑j
.text:00409478                 mov     esi, ebx
.text:0040947A                 mov     eax, [esp+0BCh+var_60]
.text:0040947E                 inc     ebx
.text:0040947F                 mov     [esp+0BCh+var_30], ebx
.text:00409486                 lea     ecx, [esi+3]
.text:00409489                 mov     edi, [esp+0BCh+var_28]
.text:00409490                 movsx   edx, byte ptr [ebx+1]
.text:00409494                 movzx   ebp, byte ptr [esi+1]
.text:00409498                 mov     esi, [esp+0BCh+var_24]
.text:0040949F                 mov     [esp+0BCh+var_30], ecx
.text:004094A6                 mov     ecx, [esp+0BCh+var_64]
.text:004094AA                 shl     edx, 8
.text:004094AD                 add     ebp, edx
.text:004094AF                 mov     edx, edi
.text:004094B1                 sub     ecx, eax
.text:004094B3                 lea     ebx, [ecx+ecx]
.text:004094B6                 sub     edx, esi
.text:004094B8                 lea     eax, [ecx+ebx+7]
.text:004094BC                 cmp     edx, eax
.text:004094BE                 jnb     short loc_409538
.text:004094C0                 mov     [esp+0BCh+var_9C], eax
.text:004094C4
.text:004094C4 loc_4094C4:                             ; CODE XREF: sub_4076F0+1E46↓j
.text:004094C4                 mov     edx, dword_418080
.text:004094CA                 lea     esi, [edx+edx*8]
.text:004094CD                 lea     ebx, [edx+esi*2]
.text:004094D0                 cmp     edi, ebx
.text:004094D2                 ja      loc_407E71
.text:004094D8                 lea     esi, ds:0[edi*8]
.text:004094DF                 mov     [esp+0BCh+Size], esi ; Size
.text:004094E2                 call    malloc
.text:004094E7                 mov     [esp+0BCh+Size], eax ; void *
.text:004094EA                 mov     ebx, [esp+0BCh+var_28]
.text:004094F1                 mov     ecx, [esp+0BCh+Src]
.text:004094F8                 shl     ebx, 2
.text:004094FB                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:004094FF                 mov     [esp+0BCh+var_B8], ecx ; Src
.text:00409503                 call    memcpy
.text:00409508                 mov     [esp+0BCh+Src], eax
.text:0040950F                 test    eax, eax
.text:00409511                 jz      loc_407E71
.text:00409517                 mov     edx, [esp+0BCh+var_28]
.text:0040951E                 mov     esi, [esp+0BCh+var_24]
.text:00409525                 add     edx, edx
.text:00409527                 mov     [esp+0BCh+var_28], edx
.text:0040952E                 mov     edi, edx
.text:00409530                 sub     edx, esi
.text:00409532                 cmp     edx, [esp+0BCh+var_9C]
.text:00409536                 jb      short loc_4094C4
.text:00409538
.text:00409538 loc_409538:                             ; CODE XREF: sub_4076F0+1DCE↑j
.text:00409538                 mov     ecx, [esp+0BCh+var_60]
.text:0040953C                 mov     eax, [esp+0BCh+var_64]
.text:00409540                 cmp     ecx, eax
.text:00409542                 ja      loc_409627
.text:00409548                 mov     ebx, [esp+0BCh+Src]
.text:0040954F
.text:0040954F loc_40954F:                             ; CODE XREF: sub_4076F0+1EBD↓j
.text:0040954F                 mov     eax, [esp+0BCh+var_68]
.text:00409553                 mov     edi, [eax+ecx*4]
.text:00409556                 mov     [ebx+esi*4], edi
.text:00409559                 mov     edx, [esp+0BCh+var_6C]
.text:0040955D                 mov     edi, [esp+0BCh+var_24]
.text:00409564                 mov     ebx, [esp+0BCh+Src]
.text:0040956B                 mov     esi, [edx+ecx*4]
.text:0040956E                 inc     edi
.text:0040956F                 mov     [esp+0BCh+var_24], edi
.text:00409576                 mov     [ebx+edi*4], esi
.text:00409579                 mov     edi, [esp+0BCh+var_24]
.text:00409580                 mov     eax, [esp+0BCh+var_78]
.text:00409584                 mov     ebx, [esp+0BCh+Src]
.text:0040958B                 inc     edi
.text:0040958C                 mov     [esp+0BCh+var_24], edi
.text:00409593                 mov     esi, [eax+ecx*4]
.text:00409596                 inc     ecx
.text:00409597                 mov     [ebx+edi*4], esi
.text:0040959A                 mov     esi, [esp+0BCh+var_24]
.text:004095A1                 inc     esi
.text:004095A2                 cmp     ecx, [esp+0BCh+var_64]
.text:004095A6                 mov     [esp+0BCh+var_24], esi
.text:004095AD                 jbe     short loc_40954F
.text:004095AF
.text:004095AF loc_4095AF:                             ; CODE XREF: sub_4076F0+1F3E↓j
.text:004095AF                 mov     edi, [esp+0BCh+var_60]
.text:004095B3                 mov     [ebx+esi*4], edi
.text:004095B6                 mov     eax, [esp+0BCh+var_24]
.text:004095BD                 mov     ecx, [esp+0BCh+Src]
.text:004095C4                 mov     edx, [esp+0BCh+var_64]
.text:004095C8                 inc     eax
.text:004095C9                 mov     [esp+0BCh+var_24], eax
.text:004095D0                 mov     [ecx+eax*4], edx
.text:004095D3                 mov     edi, [esp+0BCh+var_24]
.text:004095DA                 mov     esi, [esp+0BCh+var_30]
.text:004095E1                 mov     edx, [esp+0BCh+Src]
.text:004095E8                 inc     edi
.text:004095E9                 add     ebp, esi
.text:004095EB                 mov     [esp+0BCh+var_24], edi
.text:004095F2                 mov     [edx+edi*4], ebp
.text:004095F5                 mov     ecx, [esp+0BCh+var_24]
.text:004095FC                 mov     ebp, [esp+0BCh+Src]
.text:00409603                 mov     ebx, [esp+0BCh+var_44]
.text:00409607                 inc     ecx
.text:00409608                 mov     [esp+0BCh+var_24], ecx
.text:0040960F                 mov     [ebp+ecx*4+0], ebx
.text:00409613                 mov     esi, [esp+0BCh+var_24]
.text:0040961A                 inc     esi
.text:0040961B                 mov     [esp+0BCh+var_24], esi
.text:00409622                 jmp     loc_407A20
.text:00409627 ; ---------------------------------------------------------------------------
.text:00409627
.text:00409627 loc_409627:                             ; CODE XREF: sub_4076F0+1E52↑j
.text:00409627                 mov     ebx, [esp+0BCh+Src]
.text:0040962E                 jmp     loc_4095AF
.text:00409633 ; ---------------------------------------------------------------------------
.text:00409633
.text:00409633 loc_409633:                             ; CODE XREF: sub_4076F0+1CE0↑j
.text:00409633                                         ; sub_4076F0+1CE9↑j ...
.text:00409633                 mov     edx, [esp+0BCh+var_30]
.text:0040963A                 lea     eax, [edx+2]
.text:0040963D                 movsx   esi, byte ptr [edx+1]
.text:00409641                 movzx   ebp, byte ptr [edx]
.text:00409644                 mov     [esp+0BCh+var_30], eax
.text:0040964B                 shl     esi, 8
.text:0040964E                 add     ebp, esi
.text:00409650                 cmp     [esp+0BCh+var_97], 0
.text:00409655                 jz      loc_4093DF
.text:0040965B                 lea     edi, [edx+4]
.text:0040965E                 mov     [esp+0BCh+var_30], edi
.text:00409665                 jmp     loc_4093DF
.text:0040966A ; ---------------------------------------------------------------------------
.text:0040966A
.text:0040966A loc_40966A:                             ; CODE XREF: sub_4076F0+1CD7↑j
.text:0040966A                 cmp     eax, 16h
.text:0040966D                 jnz     loc_4093DF
.text:00409673                 mov     [esp+0BCh+var_97], 1
.text:00409678                 jmp     short loc_409633
.text:0040967A ; ---------------------------------------------------------------------------
.text:0040967A
.text:0040967A loc_40967A:                             ; CODE XREF: sub_4076F0+1C4F↑j
.text:0040967A                 movzx   eax, dl
.text:0040967D                 mov     [esp+0BCh+var_64], eax
.text:00409681                 jmp     loc_409355
.text:00409686 ; ---------------------------------------------------------------------------
.text:00409686
.text:00409686 loc_409686:                             ; CODE XREF: sub_4076F0+1C1B↑j
.text:00409686                 mov     [esp+0BCh+var_60], 101h
.text:0040968E                 mov     [esp+0BCh+var_64], 100h
.text:00409696                 movzx   ecx, byte ptr [edx]
.text:00409699                 jmp     loc_409355
.text:0040969E ; ---------------------------------------------------------------------------
.text:0040969E
.text:0040969E loc_40969E:                             ; CODE XREF: sub_4076F0+1BE1↑j
.text:0040969E                 mov     eax, [esp+0BCh+var_44]
.text:004096A2                 jmp     loc_4092D7
.text:004096A7 ; ---------------------------------------------------------------------------
.text:004096A7
.text:004096A7 loc_4096A7:                             ; CODE XREF: sub_4076F0+1BCF↑j
.text:004096A7                 mov     ebp, [esp+0BCh+var_6C]
.text:004096AB                 mov     eax, [ebp+edx*4+0]
.text:004096AF                 jmp     loc_4092D7
.text:004096B4 ; ---------------------------------------------------------------------------
.text:004096B4
.text:004096B4 loc_4096B4:                             ; CODE XREF: sub_4076F0+A04↑j
.text:004096B4                                         ; DATA XREF: .text:jpt_4080F4↑o
.text:004096B4                 mov     ebx, [esp+0BCh+var_4C] ; jumptable 004080F4 case 6
.text:004096B8                 mov     edx, [esp+0BCh+var_78]
.text:004096BC                 mov     [esp+0BCh+var_30], ebx
.text:004096C3                 movzx   ecx, byte ptr [ebx]
.text:004096C6                 movzx   esi, cl
.text:004096C9                 movzx   ebp, byte ptr [edx+esi*4]
.text:004096CD                 and     ebp, 3
.text:004096D0                 cmp     ebp, 3
.text:004096D3                 jz      loc_409764
.text:004096D9
.text:004096D9 loc_4096D9:                             ; CODE XREF: sub_4076F0+20A6↓j
.text:004096D9                 mov     esi, [esp+0BCh+var_78]
.text:004096DD                 movzx   edx, cl
.text:004096E0                 test    byte ptr [esi+edx*4], 3
.text:004096E4                 jz      short loc_40975B
.text:004096E6                 mov     ebx, [esp+0BCh+var_68]
.text:004096EA                 mov     eax, [ebx+edx*4]
.text:004096ED                 cmp     eax, offset unk_419350
.text:004096F2                 jz      short loc_409755
.text:004096F4
.text:004096F4 loc_4096F4:                             ; CODE XREF: sub_4076F0+2069↓j
.text:004096F4                                         ; sub_4076F0+2072↓j
.text:004096F4                 mov     ebp, [esp+0BCh+var_70]
.text:004096F8                 mov     ebx, [esp+0BCh+var_68]
.text:004096FC                 mov     ecx, [esp+0BCh+var_78]
.text:00409700                 mov     [ebp+edx*4+0], eax
.text:00409704                 mov     ebp, [esp+0BCh+var_4C]
.text:00409708                 mov     eax, [esp+0BCh+var_44]
.text:0040970C                 movzx   edi, byte ptr [ebp+0]
.text:00409710                 mov     [ebx+edi*4], eax
.text:00409713                 movzx   esi, byte ptr [ebp+0]
.text:00409717                 or      byte ptr [ecx+esi*4], 4
.text:0040971B                 movzx   edx, byte ptr [ebp+0]
.text:0040971F                 and     byte ptr [ecx+edx*4], 0F7h
.text:00409723                 mov     [esp+0BCh+var_8C], 0
.text:0040972B                 movzx   esi, byte ptr [ebp+0]
.text:0040972F                 cmp     [esp+0BCh+var_60], 101h
.text:00409737                 mov     [esp+0BCh+var_64], esi
.text:0040973B                 jz      short loc_40974F
.text:0040973D
.text:0040973D loc_40973D:                             ; CODE XREF: sub_4076F0+2063↓j
.text:0040973D                 add     [esp+0BCh+var_4C], 2
.text:00409742                 mov     ecx, [esp+0BCh+var_4C]
.text:00409746                 mov     [esp+0BCh+var_54], ecx
.text:0040974A                 jmp     loc_4082C0
.text:0040974F ; ---------------------------------------------------------------------------
.text:0040974F
.text:0040974F loc_40974F:                             ; CODE XREF: sub_4076F0+204B↑j
.text:0040974F                 mov     [esp+0BCh+var_60], esi
.text:00409753                 jmp     short loc_40973D
.text:00409755 ; ---------------------------------------------------------------------------
.text:00409755
.text:00409755 loc_409755:                             ; CODE XREF: sub_4076F0+2002↑j
.text:00409755                 mov     eax, [esp+0BCh+var_44]
.text:00409759                 jmp     short loc_4096F4
.text:0040975B ; ---------------------------------------------------------------------------
.text:0040975B
.text:0040975B loc_40975B:                             ; CODE XREF: sub_4076F0+1FF4↑j
.text:0040975B                 mov     edi, [esp+0BCh+var_68]
.text:0040975F                 mov     eax, [edi+edx*4]
.text:00409762                 jmp     short loc_4096F4
.text:00409764 ; ---------------------------------------------------------------------------
.text:00409764
.text:00409764 loc_409764:                             ; CODE XREF: sub_4076F0+1FE3↑j
.text:00409764                 mov     [esp+0BCh+var_B4], edx
.text:00409768                 mov     eax, [esp+0BCh+var_50]
.text:0040976C                 lea     edx, [esp+0BCh+var_30]
.text:00409773                 mov     [esp+0BCh+Size], edx
.text:00409776                 mov     [esp+0BCh+var_B8], eax
.text:0040977A                 call    sub_409A70
.text:0040977F                 mov     edi, [esp+0BCh+var_78]
.text:00409783                 mov     ebp, eax
.text:00409785                 and     ebp, 3
.text:00409788                 mov     ecx, [edi+esi*4]
.text:0040978B                 and     ecx, 0FFFFFFFCh
.text:0040978E                 or      ecx, ebp
.text:00409790                 mov     [edi+esi*4], ecx
.text:00409793                 movzx   ecx, byte ptr [ebx]
.text:00409796                 jmp     loc_4096D9
.text:00409796 ; ---------------------------------------------------------------------------
.text:0040979B                 align 10h
.text:004097A0
.text:004097A0 loc_4097A0:                             ; CODE XREF: sub_4076F0:loc_407967↑j
.text:004097A0                                         ; sub_4076F0+BF6↑j ...
.text:004097A0                 mov     edx, [esp+0BCh+var_4C] ; jumptable 00407967 case 5
.text:004097A0                                         ; jumptable 004082E6 case 5
.text:004097A0                                         ; jumptable 004083B8 case 5
.text:004097A4                 mov     ebp, [esp+0BCh+var_48]
.text:004097A8                 cmp     byte ptr [edx-1], 5
.text:004097AC                 setz    [esp+0BCh+var_95]
.text:004097B1                 cmp     [esp+0BCh+var_44], ebp
.text:004097B5                 jz      loc_409870
.text:004097BB
.text:004097BB loc_4097BB:                             ; CODE XREF: sub_4076F0+21A1↓j
.text:004097BB                 mov     esi, [esp+0BCh+var_58]
.text:004097BF                 test    esi, esi
.text:004097C1                 jz      loc_40985F
.text:004097C7                 mov     ebx, [esp+0BCh+var_44]
.text:004097CB                 mov     ecx, [esp+0BCh+var_58]
.text:004097CF                 movzx   edi, byte ptr [ebx]
.text:004097D2                 movzx   ebx, byte ptr [edi+ecx]
.text:004097D6
.text:004097D6 loc_4097D6:                             ; CODE XREF: sub_4076F0+2177↓j
.text:004097D6                 mov     esi, [esp+0BCh+var_4C]
.text:004097DA                 movzx   eax, bl
.text:004097DD                 movzx   edx, byte ptr [esi]
.text:004097E0                 movzx   edi, dl
.text:004097E3                 shl     edi, 3
.text:004097E6                 mov     [esp+0BCh+var_96], dl
.text:004097EA                 cmp     eax, edi
.text:004097EC                 jnb     short loc_40980B
.text:004097EE                 mov     dl, bl
.text:004097F0                 shr     dl, 3
.text:004097F3                 movzx   ecx, dl
.text:004097F6                 movzx   eax, byte ptr [ecx+esi+1]
.text:004097FB                 mov     ecx, ebx
.text:004097FD                 and     ecx, 7
.text:00409800                 sar     eax, cl
.text:00409802                 test    al, 1
.text:00409804                 jz      short loc_40980B
.text:00409806                 xor     [esp+0BCh+var_95], 1
.text:0040980B
.text:0040980B loc_40980B:                             ; CODE XREF: sub_4076F0+20FC↑j
.text:0040980B                                         ; sub_4076F0+2114↑j
.text:0040980B                 movzx   ebx, [esp+0BCh+var_96]
.text:00409810                 mov     ebp, [esp+0BCh+var_4C]
.text:00409814                 cmp     [esp+0BCh+var_95], 0
.text:00409819                 lea     esi, [ebx+ebp+1]
.text:0040981D                 mov     [esp+0BCh+var_4C], esi
.text:00409821                 jz      loc_407B42
.text:00409827                 mov     edi, [esp+0BCh+var_8C]
.text:0040982B                 test    edi, edi
.text:0040982D                 jnz     loc_40850F
.text:00409833                 mov     [esp+0BCh+var_8C], 1
.text:0040983B                 mov     eax, [esp+0BCh+var_60]
.text:0040983F                 mov     edx, [esp+0BCh+var_64]
.text:00409843                 cmp     eax, edx
.text:00409845                 ja      loc_40850F
.text:0040984B
.text:0040984B loc_40984B:                             ; CODE XREF: sub_4076F0+2168↓j
.text:0040984B                 mov     ecx, [esp+0BCh+var_78]
.text:0040984F                 or      byte ptr [ecx+eax*4], 18h
.text:00409853                 inc     eax
.text:00409854                 cmp     eax, [esp+0BCh+var_64]
.text:00409858                 jbe     short loc_40984B
.text:0040985A                 jmp     loc_40850F
.text:0040985F ; ---------------------------------------------------------------------------
.text:0040985F
.text:0040985F loc_40985F:                             ; CODE XREF: sub_4076F0+20D1↑j
.text:0040985F                 mov     ebp, [esp+0BCh+var_44]
.text:00409863                 movzx   ebx, byte ptr [ebp+0]
.text:00409867                 jmp     loc_4097D6
.text:00409867 ; ---------------------------------------------------------------------------
.text:0040986C                 align 10h
.text:00409870
.text:00409870 loc_409870:                             ; CODE XREF: sub_4076F0+20C5↑j
.text:00409870                                         ; sub_4076F0+219F↓j
.text:00409870                 mov     ecx, [esp+0BCh+var_40]
.text:00409874                 cmp     [esp+0BCh+var_48], ecx
.text:00409878                 jz      loc_407B42
.text:0040987E                 mov     [esp+0BCh+var_48], ecx
.text:00409882                 mov     eax, [esp+0BCh+arg_C]
.text:00409889                 cmp     eax, ecx
.text:0040988B                 mov     [esp+0BCh+var_44], eax
.text:0040988F                 jz      short loc_409870
.text:00409891                 jmp     loc_4097BB
.text:00409896 ; ---------------------------------------------------------------------------
.text:00409896
.text:00409896 loc_409896:                             ; CODE XREF: sub_4076F0:loc_407967↑j
.text:00409896                                         ; sub_4076F0+BF6↑j ...
.text:00409896                 jmp     loc_4097A0      ; jumptable 00407967 case 4
.text:00409896                                         ; jumptable 004082E6 case 4
.text:00409896                                         ; jumptable 004083B8 case 4
.text:0040989B ; ---------------------------------------------------------------------------
.text:0040989B
.text:0040989B loc_40989B:                             ; CODE XREF: sub_4076F0+C88↑j
.text:0040989B                 mov     ebx, [esp+0BCh+var_34]
.text:004098A2                 movzx   eax, byte ptr [ebx-1]
.text:004098A6                 jmp     loc_408385
.text:004098AB ; ---------------------------------------------------------------------------
.text:004098AB
.text:004098AB loc_4098AB:                             ; CODE XREF: sub_4076F0+C76↑j
.text:004098AB                 mov     edi, [esp+0BCh+arg_C]
.text:004098B2                 movzx   eax, byte ptr [edi]
.text:004098B5                 jmp     loc_408385
.text:004098BA ; ---------------------------------------------------------------------------
.text:004098BA
.text:004098BA loc_4098BA:                             ; CODE XREF: sub_4076F0+C43↑j
.text:004098BA                 mov     esi, [esp+0BCh+var_34]
.text:004098C1                 movzx   eax, byte ptr [esi-1]
.text:004098C5                 jmp     loc_408341
.text:004098CA ; ---------------------------------------------------------------------------
.text:004098CA
.text:004098CA loc_4098CA:                             ; CODE XREF: sub_4076F0+C33↑j
.text:004098CA                 mov     ebp, [esp+0BCh+arg_C]
.text:004098D1                 movzx   eax, byte ptr [ebp+0]
.text:004098D5                 jmp     loc_408341
.text:004098DA ; ---------------------------------------------------------------------------
.text:004098DA
.text:004098DA loc_4098DA:                             ; CODE XREF: sub_4076F0+C01↑j
.text:004098DA                 mov     edx, [esp+0BCh+arg_C]
.text:004098E1                 cmp     [esp+0BCh+var_44], edx
.text:004098E5                 jmp     loc_408302
.text:004098EA ; ---------------------------------------------------------------------------
.text:004098EA
.text:004098EA loc_4098EA:                             ; CODE XREF: sub_4076F0+AFB↑j
.text:004098EA                 mov     ebx, [esp+0BCh+arg_C]
.text:004098F1                 cmp     [esp+0BCh+var_44], ebx
.text:004098F5                 jmp     loc_4081FC
.text:004098FA ; ---------------------------------------------------------------------------
.text:004098FA
.text:004098FA loc_4098FA:                             ; CODE XREF: sub_4076F0+993↑j
.text:004098FA                 mov     edi, [esp+0BCh+var_44]
.text:004098FE                 cmp     byte ptr [edi], 0
.text:00409901                 jmp     loc_408099
.text:00409906 ; ---------------------------------------------------------------------------
.text:00409906
.text:00409906 loc_409906:                             ; CODE XREF: sub_4076F0+964↑j
.text:00409906                 mov     edi, [esp+0BCh+var_44]
.text:0040990A                 cmp     byte ptr [edi], 0Ah
.text:0040990D                 jmp     loc_40806A
.text:00409912 ; ---------------------------------------------------------------------------
.text:00409912
.text:00409912 loc_409912:                             ; CODE XREF: sub_4076F0+94B↑j
.text:00409912                                         ; sub_4076F0+2241↓j
.text:00409912                 mov     eax, [esp+0BCh+var_40]
.text:00409916                 cmp     [esp+0BCh+var_48], eax
.text:0040991A                 jz      loc_407B42
.text:00409920                 mov     [esp+0BCh+var_48], eax
.text:00409924                 mov     ecx, [esp+0BCh+arg_C]
.text:0040992B                 cmp     ecx, eax
.text:0040992D                 mov     [esp+0BCh+var_44], ecx
.text:00409931                 jz      short loc_409912
.text:00409933                 jmp     loc_408041
.text:00409938 ; ---------------------------------------------------------------------------
.text:00409938
.text:00409938 loc_409938:                             ; CODE XREF: sub_4076F0+21B↑j
.text:00409938                                         ; sub_4076F0+22F↑j
.text:00409938                 mov     edi, [esp+0BCh+arg_C]
.text:0040993F                 mov     esi, [esp+0BCh+arg_14]
.text:00409946                 mov     ecx, [esp+0BCh+arg_8]
.text:0040994D                 mov     ebp, [esp+0BCh+var_40]
.text:00409951                 add     edi, esi
.text:00409953                 sub     edi, ecx
.text:00409955                 mov     [esp+0BCh+var_44], edi
.text:00409959                 mov     [esp+0BCh+var_48], ebp
.text:0040995D                 jmp     loc_407944
.text:00409962 ; ---------------------------------------------------------------------------
.text:00409962
.text:00409962 loc_409962:                             ; CODE XREF: sub_4076F0+1F1↑j
.text:00409962                 mov     ebp, [esp+0BCh+arg_C]
.text:00409969                 mov     ebx, [esp+0BCh+arg_8]
.text:00409970                 mov     edi, [esp+0BCh+var_34]
.text:00409977                 add     esi, ebp
.text:00409979                 sub     esi, ebx
.text:0040997B                 mov     [esp+0BCh+var_3C], edi
.text:00409982                 jmp     loc_4078FE
.text:00409987 ; ---------------------------------------------------------------------------
.text:00409987
.text:00409987 loc_409987:                             ; CODE XREF: sub_4076F0+B0↑j
.text:00409987                 mov     edi, [esp+0BCh+var_5C]
.text:0040998B                 shl     edi, 2
.text:0040998E                 mov     [esp+0BCh+Size], edi ; Size
.text:00409991                 call    malloc
.text:00409996                 mov     [esp+0BCh+var_68], eax
.text:0040999A                 mov     [esp+0BCh+Size], edi ; Size
.text:0040999D                 call    malloc
.text:004099A2                 mov     [esp+0BCh+var_6C], eax
.text:004099A6                 mov     [esp+0BCh+Size], edi ; Size
.text:004099A9                 call    malloc
.text:004099AE                 mov     [esp+0BCh+var_70], eax
.text:004099B2                 mov     [esp+0BCh+Size], edi ; Size
.text:004099B5                 call    malloc
.text:004099BA                 mov     [esp+0BCh+var_74], eax
.text:004099BE                 mov     [esp+0BCh+Size], edi ; Size
.text:004099C1                 call    malloc
.text:004099C6                 mov     [esp+0BCh+var_80], eax
.text:004099CA                 mov     [esp+0BCh+Size], edi ; Size
.text:004099CD                 call    malloc
.text:004099D2                 mov     [esp+0BCh+var_84], eax
.text:004099D6                 mov     [esp+0BCh+Size], edi ; Size
.text:004099D9                 call    malloc
.text:004099DE                 mov     [esp+0BCh+var_78], eax
.text:004099E2                 mov     [esp+0BCh+Size], edi ; Size
.text:004099E5                 call    malloc
.text:004099EA                 mov     [esp+0BCh+var_90], eax
.text:004099EE                 mov     [esp+0BCh+Size], edi ; Size
.text:004099F1                 call    malloc
.text:004099F6                 mov     [esp+0BCh+var_94], eax
.text:004099FA                 mov     ecx, [esp+0BCh+var_68]
.text:004099FE                 test    ecx, ecx
.text:00409A00                 jz      loc_407E71
.text:00409A06                 mov     ebx, [esp+0BCh+var_6C]
.text:00409A0A                 test    ebx, ebx
.text:00409A0C                 jz      loc_407E71
.text:00409A12                 mov     edx, [esp+0BCh+var_70]
.text:00409A16                 test    edx, edx
.text:00409A18                 jz      loc_407E71
.text:00409A1E                 mov     ebp, [esp+0BCh+var_74]
.text:00409A22                 test    ebp, ebp
.text:00409A24                 jz      loc_407E71
.text:00409A2A                 mov     ecx, [esp+0BCh+var_78]
.text:00409A2E                 test    ecx, ecx
.text:00409A30                 jz      loc_407E71
.text:00409A36                 mov     edi, [esp+0BCh+var_80]
.text:00409A3A                 test    edi, edi
.text:00409A3C                 jz      loc_407E71
.text:00409A42                 mov     ebx, [esp+0BCh+var_84]
.text:00409A46                 test    ebx, ebx
.text:00409A48                 jz      loc_407E71
.text:00409A4E                 mov     edx, [esp+0BCh+var_90]
.text:00409A52                 test    edx, edx
.text:00409A54                 jz      loc_407E71
.text:00409A5A                 test    eax, eax
.text:00409A5C                 jnz     loc_4077EE
.text:00409A62                 jmp     loc_407E71
.text:00409A62 sub_4076F0      endp
.text:00409A62
.text:00409A62 ; ---------------------------------------------------------------------------
.text:00409A67                 align 10h
.text:00409A70
.text:00409A70 ; =============== S U B R O U T I N E =======================================
.text:00409A70
.text:00409A70
.text:00409A70 sub_409A70      proc near               ; CODE XREF: sub_4076F0+208A↑p
.text:00409A70                                         ; sub_409C20+CA↓p
.text:00409A70
.text:00409A70 var_2C          = dword ptr -2Ch
.text:00409A70 var_28          = dword ptr -28h
.text:00409A70 var_24          = dword ptr -24h
.text:00409A70 var_14          = dword ptr -14h
.text:00409A70 arg_0           = dword ptr  4
.text:00409A70 arg_4           = dword ptr  8
.text:00409A70 arg_8           = dword ptr  0Ch
.text:00409A70
.text:00409A70                 push    ebp
.text:00409A71                 push    edi
.text:00409A72                 push    esi
.text:00409A73                 push    ebx
.text:00409A74                 sub     esp, 1Ch
.text:00409A77                 mov     ebp, [esp+2Ch+arg_0]
.text:00409A7B                 mov     edi, [esp+2Ch+arg_4]
.text:00409A7F                 mov     esi, [esp+2Ch+arg_8]
.text:00409A83                 mov     eax, [ebp+0]
.text:00409A86                 add     eax, 2
.text:00409A89                 cmp     eax, edi
.text:00409A8B                 mov     ecx, eax
.text:00409A8D                 mov     [esp+2Ch+var_14], eax
.text:00409A91                 jnb     short loc_409AD3
.text:00409A93                 lea     esi, [esi+0]
.text:00409A99                 lea     edi, [edi+0]
.text:00409AA0
.text:00409AA0 loc_409AA0:                             ; CODE XREF: sub_409A70+61↓j
.text:00409AA0                 movzx   eax, byte ptr [ecx]
.text:00409AA3                 cmp     eax, 7
.text:00409AA6                 jz      loc_409B83
.text:00409AAC                 cmp     eax, 0Fh
.text:00409AAF                 jz      short loc_409AE0
.text:00409AB1                 mov     [esp+2Ch+var_24], esi
.text:00409AB5                 lea     ebx, [esp+2Ch+var_14]
.text:00409AB9                 mov     [esp+2Ch+var_28], edi
.text:00409ABD                 mov     [esp+2Ch+var_2C], ebx
.text:00409AC0                 call    sub_409C20
.text:00409AC5                 xor     edx, edx
.text:00409AC7                 test    al, al
.text:00409AC9                 jz      short loc_409AD5
.text:00409ACB
.text:00409ACB loc_409ACB:                             ; CODE XREF: sub_409A70+8B↓j
.text:00409ACB                                         ; sub_409A70+BE↓j
.text:00409ACB                 mov     ecx, [esp+2Ch+var_14]
.text:00409ACF                 cmp     ecx, edi
.text:00409AD1                 jb      short loc_409AA0
.text:00409AD3
.text:00409AD3 loc_409AD3:                             ; CODE XREF: sub_409A70+21↑j
.text:00409AD3                 xor     edx, edx
.text:00409AD5
.text:00409AD5 loc_409AD5:                             ; CODE XREF: sub_409A70+59↑j
.text:00409AD5                                         ; sub_409A70+B8↓j ...
.text:00409AD5                 add     esp, 1Ch
.text:00409AD8                 mov     eax, edx
.text:00409ADA                 pop     ebx
.text:00409ADB                 pop     esi
.text:00409ADC                 pop     edi
.text:00409ADD                 pop     ebp
.text:00409ADE                 retn
.text:00409ADE ; ---------------------------------------------------------------------------
.text:00409ADF                 align 10h
.text:00409AE0
.text:00409AE0 loc_409AE0:                             ; CODE XREF: sub_409A70+3F↑j
.text:00409AE0                 lea     edx, [ecx+1]
.text:00409AE3                 mov     [esp+2Ch+var_14], edx
.text:00409AE7                 movsx   eax, byte ptr [edx+1]
.text:00409AEB                 lea     edx, [ecx+3]
.text:00409AEE                 movzx   ebx, byte ptr [ecx+1]
.text:00409AF2                 mov     [esp+2Ch+var_14], edx
.text:00409AF6                 shl     eax, 8
.text:00409AF9                 add     ebx, eax
.text:00409AFB                 js      short loc_409ACB
.text:00409AFD                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:00409B02                 jz      short loc_409B30
.text:00409B04
.text:00409B04 loc_409B04:                             ; CODE XREF: sub_409A70+E9↓j
.text:00409B04                                         ; sub_409A70+111↓j
.text:00409B04                 movsx   ecx, byte ptr [edx-1]
.text:00409B08                 movzx   ebx, byte ptr [edx-2]
.text:00409B0C                 mov     [esp+2Ch+var_2C], edx
.text:00409B0F                 mov     [esp+2Ch+var_24], esi
.text:00409B13                 shl     ecx, 8
.text:00409B16                 add     ebx, ecx
.text:00409B18                 lea     ecx, [ebx+edx]
.text:00409B1B                 mov     [esp+2Ch+var_28], ecx
.text:00409B1F                 call    sub_409BA0
.text:00409B24                 xor     edx, edx
.text:00409B26                 test    al, al
.text:00409B28                 jz      short loc_409AD5
.text:00409B2A                 add     [esp+2Ch+var_14], ebx
.text:00409B2E                 jmp     short loc_409ACB
.text:00409B30 ; ---------------------------------------------------------------------------
.text:00409B30
.text:00409B30 loc_409B30:                             ; CODE XREF: sub_409A70+92↑j
.text:00409B30                                         ; sub_409A70+109↓j
.text:00409B30                 mov     [esp+2Ch+var_2C], edx
.text:00409B33                 lea     ecx, [ebx+edx-3]
.text:00409B37                 mov     [esp+2Ch+var_24], esi
.text:00409B3B                 mov     [esp+2Ch+var_28], ecx
.text:00409B3F                 call    sub_409BA0
.text:00409B44                 xor     edx, edx
.text:00409B46                 test    al, al
.text:00409B48                 jz      short loc_409AD5
.text:00409B4A                 mov     ecx, [esp+2Ch+var_14]
.text:00409B4E                 add     ecx, ebx
.text:00409B50                 mov     edx, ecx
.text:00409B52                 mov     [esp+2Ch+var_14], ecx
.text:00409B56                 cmp     byte ptr [ecx], 0Fh
.text:00409B59                 jnz     short loc_409B04
.text:00409B5B                 inc     edx
.text:00409B5C                 mov     [esp+2Ch+var_14], edx
.text:00409B60                 movsx   eax, byte ptr [edx+1]
.text:00409B64                 lea     edx, [ecx+3]
.text:00409B67                 movzx   ebx, byte ptr [ecx+1]
.text:00409B6B                 mov     [esp+2Ch+var_14], edx
.text:00409B6F                 shl     eax, 8
.text:00409B72                 add     ebx, eax
.text:00409B74                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:00409B79                 jz      short loc_409B30
.text:00409B7B                 mov     [esp+2Ch+var_14], ecx
.text:00409B7F                 mov     edx, ecx
.text:00409B81                 jmp     short loc_409B04
.text:00409B83 ; ---------------------------------------------------------------------------
.text:00409B83
.text:00409B83 loc_409B83:                             ; CODE XREF: sub_409A70+36↑j
.text:00409B83                 lea     edx, [ecx+2]
.text:00409B86                 mov     [ebp+0], edx
.text:00409B89                 mov     edx, 1
.text:00409B8E                 jmp     loc_409AD5
.text:00409B8E sub_409A70      endp
.text:00409B8E
.text:00409B8E ; ---------------------------------------------------------------------------
.text:00409B93                 align 10h
.text:00409BA0
.text:00409BA0 ; =============== S U B R O U T I N E =======================================
.text:00409BA0
.text:00409BA0
.text:00409BA0 sub_409BA0      proc near               ; CODE XREF: sub_409A70+AF↑p
.text:00409BA0                                         ; sub_409A70+CF↑p
.text:00409BA0
.text:00409BA0 var_1C          = dword ptr -1Ch
.text:00409BA0 var_18          = dword ptr -18h
.text:00409BA0 var_14          = dword ptr -14h
.text:00409BA0 var_C           = dword ptr -0Ch
.text:00409BA0 arg_0           = dword ptr  4
.text:00409BA0 arg_4           = dword ptr  8
.text:00409BA0 arg_8           = dword ptr  0Ch
.text:00409BA0
.text:00409BA0                 push    esi
.text:00409BA1                 push    ebx
.text:00409BA2                 sub     esp, 14h
.text:00409BA5                 mov     edx, [esp+1Ch+arg_0]
.text:00409BA9                 mov     ebx, [esp+1Ch+arg_4]
.text:00409BAD                 mov     esi, [esp+1Ch+arg_8]
.text:00409BB1                 mov     ecx, edx
.text:00409BB3                 mov     [esp+1Ch+var_C], edx
.text:00409BB7                 cmp     edx, ebx
.text:00409BB9                 jnb     short loc_409BE7
.text:00409BBB                 nop
.text:00409BBC                 lea     esi, [esi+0]
.text:00409BC0
.text:00409BC0 loc_409BC0:                             ; CODE XREF: sub_409BA0+45↓j
.text:00409BC0                 cmp     byte ptr [ecx], 0Fh
.text:00409BC3                 jz      short loc_409BF4
.text:00409BC5                 mov     [esp+1Ch+var_14], esi
.text:00409BC9                 lea     edx, [esp+1Ch+var_C]
.text:00409BCD                 mov     [esp+1Ch+var_1C], edx
.text:00409BD0                 mov     [esp+1Ch+var_18], ebx
.text:00409BD4                 call    sub_409C20
.text:00409BD9                 xor     edx, edx
.text:00409BDB                 test    al, al
.text:00409BDD                 jz      short loc_409BEC
.text:00409BDF
.text:00409BDF loc_409BDF:                             ; CODE XREF: sub_409BA0+70↓j
.text:00409BDF                 mov     ecx, [esp+1Ch+var_C]
.text:00409BE3                 cmp     ecx, ebx
.text:00409BE5                 jb      short loc_409BC0
.text:00409BE7
.text:00409BE7 loc_409BE7:                             ; CODE XREF: sub_409BA0+19↑j
.text:00409BE7                 mov     edx, 1
.text:00409BEC
.text:00409BEC loc_409BEC:                             ; CODE XREF: sub_409BA0+3D↑j
.text:00409BEC                 add     esp, 14h
.text:00409BEF                 mov     eax, edx
.text:00409BF1                 pop     ebx
.text:00409BF2                 pop     esi
.text:00409BF3                 retn
.text:00409BF4 ; ---------------------------------------------------------------------------
.text:00409BF4
.text:00409BF4 loc_409BF4:                             ; CODE XREF: sub_409BA0+23↑j
.text:00409BF4                 lea     eax, [ecx+1]
.text:00409BF7                 mov     [esp+1Ch+var_C], eax
.text:00409BFB                 movsx   eax, byte ptr [eax+1]
.text:00409BFF                 movzx   edx, byte ptr [ecx+1]
.text:00409C03                 shl     eax, 8
.text:00409C06                 add     edx, eax
.text:00409C08                 lea     eax, [edx+ecx+3]
.text:00409C0C                 mov     [esp+1Ch+var_C], eax
.text:00409C10                 jmp     short loc_409BDF
.text:00409C10 sub_409BA0      endp
.text:00409C10
.text:00409C10 ; ---------------------------------------------------------------------------
.text:00409C12                 align 10h
.text:00409C20
.text:00409C20 ; =============== S U B R O U T I N E =======================================
.text:00409C20
.text:00409C20
.text:00409C20 sub_409C20      proc near               ; CODE XREF: sub_409A70+50↑p
.text:00409C20                                         ; sub_409BA0+34↑p
.text:00409C20
.text:00409C20 var_1C          = dword ptr -1Ch
.text:00409C20 var_18          = dword ptr -18h
.text:00409C20 var_14          = dword ptr -14h
.text:00409C20 var_10          = dword ptr -10h
.text:00409C20 var_C           = dword ptr -0Ch
.text:00409C20 var_8           = dword ptr -8
.text:00409C20 var_4           = dword ptr -4
.text:00409C20 arg_0           = dword ptr  4
.text:00409C20 arg_4           = dword ptr  8
.text:00409C20 arg_8           = dword ptr  0Ch
.text:00409C20
.text:00409C20                 sub     esp, 1Ch
.text:00409C23                 mov     [esp+1Ch+var_4], edi
.text:00409C27                 mov     edi, [esp+1Ch+arg_0]
.text:00409C2B                 mov     [esp+1Ch+var_C], ebx
.text:00409C2F                 mov     ebx, [esp+1Ch+arg_8]
.text:00409C33                 mov     [esp+1Ch+var_8], esi
.text:00409C37                 mov     edx, [edi]
.text:00409C39                 mov     [esp+1Ch+var_10], edx
.text:00409C3D                 movzx   eax, byte ptr [edx]
.text:00409C40                 inc     edx
.text:00409C41                 mov     [esp+1Ch+var_10], edx
.text:00409C45                 cmp     eax, 1Dh        ; switch 30 cases
.text:00409C48                 ja      def_409C4E      ; jumptable 00409C4E default case, cases 1-5,7,14-20,22,24,25
.text:00409C4E                 jmp     ds:jpt_409C4E[eax*4] ; switch jump
.text:00409C4E ; ---------------------------------------------------------------------------
.text:00409C55                 align 4
.text:00409C58 jpt_409C4E      dd offset loc_409D03    ; DATA XREF: sub_409C20+2E↑r
.text:00409C58                 dd offset def_409C4E    ; jump table for switch statement
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset loc_409CD0
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset loc_409D32
.text:00409C58                 dd offset loc_409D03
.text:00409C58                 dd offset loc_409D03
.text:00409C58                 dd offset loc_409D03
.text:00409C58                 dd offset loc_409D03
.text:00409C58                 dd offset loc_409D44
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset loc_409D65
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset loc_409DA1
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset def_409C4E
.text:00409C58                 dd offset loc_409D03
.text:00409C58                 dd offset loc_409D03
.text:00409C58                 dd offset loc_409D03
.text:00409C58                 dd offset loc_409D03
.text:00409CD0 ; ---------------------------------------------------------------------------
.text:00409CD0
.text:00409CD0 loc_409CD0:                             ; CODE XREF: sub_409C20+2E↑j
.text:00409CD0                                         ; DATA XREF: sub_409C20:jpt_409C4E↑o
.text:00409CD0                 mov     ecx, [esp+1Ch+var_10] ; jumptable 00409C4E case 6
.text:00409CD4                 mov     edx, [esp+1Ch+arg_4]
.text:00409CD8                 movzx   esi, byte ptr [ecx]
.text:00409CDB                 lea     ecx, [esp+1Ch+var_10]
.text:00409CDF                 mov     [esp+1Ch+var_18], edx
.text:00409CE3                 mov     [esp+1Ch+var_1C], ecx
.text:00409CE6                 mov     [esp+1Ch+var_14], ebx
.text:00409CEA                 call    sub_409A70
.text:00409CEF                 movzx   edx, byte ptr [ebx+esi*4]
.text:00409CF3                 mov     cl, al
.text:00409CF5                 and     edx, 3
.text:00409CF8                 cmp     edx, 3
.text:00409CFB                 jz      short loc_409D20
.text:00409CFD
.text:00409CFD loc_409CFD:                             ; CODE XREF: sub_409C20+110↓j
.text:00409CFD                 xor     eax, eax
.text:00409CFF                 test    cl, cl
.text:00409D01                 jz      short loc_409D10
.text:00409D03
.text:00409D03 loc_409D03:                             ; CODE XREF: sub_409C20+2E↑j
.text:00409D03                                         ; DATA XREF: sub_409C20:jpt_409C4E↑o
.text:00409D03                 mov     ecx, [esp+1Ch+var_10] ; jumptable 00409C4E cases 0,9-12,26-29
.text:00409D07
.text:00409D07 loc_409D07:                             ; CODE XREF: sub_409C20+11D↓j
.text:00409D07                                         ; sub_409C20+143↓j
.text:00409D07                 mov     [edi], ecx
.text:00409D09                 mov     eax, 1
.text:00409D0E                 mov     esi, esi
.text:00409D10
.text:00409D10 loc_409D10:                             ; CODE XREF: sub_409C20+E1↑j
.text:00409D10                                         ; sub_409C20+122↓j ...
.text:00409D10                 mov     ebx, [esp+1Ch+var_C]
.text:00409D14                 mov     esi, [esp+1Ch+var_8]
.text:00409D18                 mov     edi, [esp+1Ch+var_4]
.text:00409D1C                 add     esp, 1Ch
.text:00409D1F                 retn
.text:00409D20 ; ---------------------------------------------------------------------------
.text:00409D20
.text:00409D20 loc_409D20:                             ; CODE XREF: sub_409C20+DB↑j
.text:00409D20                 mov     eax, [ebx+esi*4]
.text:00409D23                 mov     edx, ecx
.text:00409D25                 and     edx, 3
.text:00409D28                 and     eax, 0FFFFFFFCh
.text:00409D2B                 or      eax, edx
.text:00409D2D                 mov     [ebx+esi*4], eax
.text:00409D30                 jmp     short loc_409CFD
.text:00409D32 ; ---------------------------------------------------------------------------
.text:00409D32
.text:00409D32 loc_409D32:                             ; CODE XREF: sub_409C20+2E↑j
.text:00409D32                                         ; DATA XREF: sub_409C20:jpt_409C4E↑o
.text:00409D32                 mov     ecx, [esp+1Ch+var_10] ; jumptable 00409C4E case 8
.text:00409D36                 movzx   esi, byte ptr [ecx]
.text:00409D39                 test    byte ptr [ebx+esi*4], 3
.text:00409D3D                 jnz     short loc_409D07
.text:00409D3F                 nop
.text:00409D40
.text:00409D40 def_409C4E:                             ; CODE XREF: sub_409C20+28↑j
.text:00409D40                                         ; sub_409C20+2E↑j ...
.text:00409D40                 xor     eax, eax        ; jumptable 00409C4E default case, cases 1-5,7,14-20,22,24,25
.text:00409D42                 jmp     short loc_409D10
.text:00409D44 ; ---------------------------------------------------------------------------
.text:00409D44
.text:00409D44 loc_409D44:                             ; CODE XREF: sub_409C20+2E↑j
.text:00409D44                                         ; DATA XREF: sub_409C20:jpt_409C4E↑o
.text:00409D44                 mov     edx, [esp+1Ch+var_10] ; jumptable 00409C4E case 13
.text:00409D48                 lea     ecx, [edx+2]
.text:00409D4B                 movsx   esi, byte ptr [edx+1]
.text:00409D4F                 movzx   ebx, byte ptr [edx]
.text:00409D52                 mov     [esp+1Ch+var_10], ecx
.text:00409D56                 shl     esi, 8
.text:00409D59                 add     ebx, esi
.text:00409D5B                 js      short def_409C4E ; jumptable 00409C4E default case, cases 1-5,7,14-20,22,24,25
.text:00409D5D                 add     ecx, ebx
.text:00409D5F
.text:00409D5F loc_409D5F:                             ; CODE XREF: sub_409C20+17F↓j
.text:00409D5F                 mov     [esp+1Ch+var_10], ecx
.text:00409D63                 jmp     short loc_409D07
.text:00409D65 ; ---------------------------------------------------------------------------
.text:00409D65
.text:00409D65 loc_409D65:                             ; CODE XREF: sub_409C20+2E↑j
.text:00409D65                                         ; DATA XREF: sub_409C20:jpt_409C4E↑o
.text:00409D65                 mov     edx, [esp+1Ch+var_10] ; jumptable 00409C4E case 21
.text:00409D69                 lea     esi, [edx+2]
.text:00409D6C                 mov     [esp+1Ch+var_10], esi
.text:00409D70                 movsx   eax, byte ptr [esi+1]
.text:00409D74                 movzx   ebx, byte ptr [edx+2]
.text:00409D78                 shl     eax, 8
.text:00409D7B                 add     ebx, eax
.text:00409D7D                 lea     eax, [edx+4]
.text:00409D80                 mov     [esp+1Ch+var_10], eax
.text:00409D84                 xor     eax, eax
.text:00409D86                 test    ebx, ebx
.text:00409D88                 jnz     short loc_409D10
.text:00409D8A                 mov     [esp+1Ch+var_10], edx
.text:00409D8E                 mov     eax, edx
.text:00409D90                 movsx   ebx, byte ptr [eax+1]
.text:00409D94                 movzx   edx, byte ptr [edx]
.text:00409D97                 shl     ebx, 8
.text:00409D9A                 add     edx, ebx
.text:00409D9C                 lea     ecx, [edx+esi]
.text:00409D9F                 jmp     short loc_409D5F
.text:00409DA1 ; ---------------------------------------------------------------------------
.text:00409DA1
.text:00409DA1 loc_409DA1:                             ; CODE XREF: sub_409C20+2E↑j
.text:00409DA1                                         ; DATA XREF: sub_409C20:jpt_409C4E↑o
.text:00409DA1                 add     [esp+1Ch+var_10], 4 ; jumptable 00409C4E case 23
.text:00409DA6                 jmp     short def_409C4E ; jumptable 00409C4E default case, cases 1-5,7,14-20,22,24,25
.text:00409DA6 sub_409C20      endp
.text:00409DA6
.text:00409DA6 ; ---------------------------------------------------------------------------
.text:00409DA8                 align 10h
.text:00409DB0
.text:00409DB0 ; =============== S U B R O U T I N E =======================================
.text:00409DB0
.text:00409DB0
.text:00409DB0 sub_409DB0      proc near               ; CODE XREF: sub_4076F0+1B06↑p
.text:00409DB0
.text:00409DB0 arg_0           = dword ptr  4
.text:00409DB0 arg_4           = dword ptr  8
.text:00409DB0 arg_8           = dword ptr  0Ch
.text:00409DB0 arg_C           = dword ptr  10h
.text:00409DB0
.text:00409DB0                 push    edi
.text:00409DB1                 push    esi
.text:00409DB2                 push    ebx
.text:00409DB3                 mov     esi, [esp+0Ch+arg_8]
.text:00409DB7                 mov     edi, [esp+0Ch+arg_C]
.text:00409DBB                 mov     ebx, [esp+0Ch+arg_0]
.text:00409DBF                 test    esi, esi
.text:00409DC1                 mov     ecx, [esp+0Ch+arg_4]
.text:00409DC5                 jz      short loc_409DE4
.text:00409DC7                 mov     esi, esi
.text:00409DC9                 lea     edi, [edi+0]
.text:00409DD0
.text:00409DD0 loc_409DD0:                             ; CODE XREF: sub_409DB0+32↓j
.text:00409DD0                 movzx   eax, byte ptr [ecx]
.text:00409DD3                 inc     ecx
.text:00409DD4                 movzx   edx, byte ptr [ebx]
.text:00409DD7                 inc     ebx
.text:00409DD8                 movzx   eax, byte ptr [eax+edi]
.text:00409DDC                 cmp     [edx+edi], al
.text:00409DDF                 jnz     short loc_409DEA
.text:00409DE1                 dec     esi
.text:00409DE2                 jnz     short loc_409DD0
.text:00409DE4
.text:00409DE4 loc_409DE4:                             ; CODE XREF: sub_409DB0+15↑j
.text:00409DE4                 xor     eax, eax
.text:00409DE6
.text:00409DE6 loc_409DE6:                             ; CODE XREF: sub_409DB0+3F↓j
.text:00409DE6                 pop     ebx
.text:00409DE7                 pop     esi
.text:00409DE8                 pop     edi
.text:00409DE9                 retn
.text:00409DEA ; ---------------------------------------------------------------------------
.text:00409DEA
.text:00409DEA loc_409DEA:                             ; CODE XREF: sub_409DB0+2F↑j
.text:00409DEA                 mov     eax, 1
.text:00409DEF                 jmp     short loc_409DE6
.text:00409DEF sub_409DB0      endp
.text:00409DEF
.text:00409DEF ; ---------------------------------------------------------------------------
.text:00409DF1                 db 1Fh dup(90h)
.text:00409E10 aSuccess        db 'Success',0          ; DATA XREF: .text:0040A4B1↓o
.text:00409E10                                         ; .text:0040A4FB↓o
.text:00409E18 aNoMatch        db 'No match',0
.text:00409E21 aInvalidRegular db 'Invalid regular expression',0
.text:00409E3C aInvalidCollati db 'Invalid collation character',0
.text:00409E58 aInvalidCharact db 'Invalid character class name',0
.text:00409E75 aTrailingBacksl db 'Trailing backslash',0
.text:00409E88 aInvalidBackRef db 'Invalid back reference',0
.text:00409E9F aUnmatchedOr    db 'Unmatched [ or [^',0
.text:00409EB1 aUnmatchedOr_0  db 'Unmatched ( or \(',0
.text:00409EC3 aUnmatched      db 'Unmatched \{',0
.text:00409ED0 aInvalidContent db 'Invalid content of \{\}',0
.text:00409EE8 aInvalidRangeEn db 'Invalid range end',0
.text:00409EFA aMemoryExhauste_0 db 'Memory exhausted',0
.text:00409F0B aInvalidPrecedi db 'Invalid preceding regular expression',0
.text:00409F30 aPrematureEndOf db 'Premature end of regular expression',0
.text:00409F54 aRegularExpress db 'Regular expression too big',0
.text:00409F6F aUnmatchedOr_1  db 'Unmatched ) or \)',0
.text:00409F81                 db 0EBh, 0Dh, 90h
.text:00409F84                 db 0Ch dup(90h)
.text:00409F90 dword_409F90    dd 0                    ; DATA XREF: .text:0040A4AA↓r
.text:00409F90                                         ; .text:0040A4F4↓r
.text:00409F94                 dd 8, 11h, 2Ch, 48h, 65h, 78h, 8Fh, 0A1h, 0B3h, 0C0h, 0D8h
.text:00409F94                 dd 0EAh, 0FBh, 120h, 144h, 15Fh, 0B68Dh, 0BF8D0000h, 0
.text:00409FE0
.text:00409FE0 ; =============== S U B R O U T I N E =======================================
.text:00409FE0
.text:00409FE0
.text:00409FE0 sub_409FE0      proc near               ; CODE XREF: sub_40A600+25A0↓p
.text:00409FE0
.text:00409FE0 arg_0           = dword ptr  4
.text:00409FE0 arg_8           = dword ptr  0Ch
.text:00409FE0 arg_C           = dword ptr  10h
.text:00409FE0
.text:00409FE0                 mov     edx, [esp+arg_8]
.text:00409FE4                 mov     ecx, [esp+arg_C]
.text:00409FE8                 dec     edx
.text:00409FE9                 js      short loc_40A00A
.text:00409FEB                 lea     eax, [edx+edx*4]
.text:00409FEE                 shl     eax, 2
.text:00409FF1                 add     eax, [esp+arg_0]
.text:00409FF5                 add     eax, 10h
.text:00409FF8                 nop
.text:00409FF9                 lea     esi, [esi+0]
.text:0040A000
.text:0040A000 loc_40A000:                             ; CODE XREF: sub_409FE0+28↓j
.text:0040A000                 cmp     [eax], ecx
.text:0040A002                 jz      short loc_40A00D
.text:0040A004                 sub     eax, 14h
.text:0040A007                 dec     edx
.text:0040A008                 jns     short loc_40A000
.text:0040A00A
.text:0040A00A loc_40A00A:                             ; CODE XREF: sub_409FE0+9↑j
.text:0040A00A                 xor     eax, eax
.text:0040A00C                 retn
.text:0040A00D ; ---------------------------------------------------------------------------
.text:0040A00D
.text:0040A00D loc_40A00D:                             ; CODE XREF: sub_409FE0+22↑j
.text:0040A00D                 mov     eax, 1
.text:0040A012                 retn
.text:0040A012 sub_409FE0      endp
.text:0040A012
.text:0040A012 ; ---------------------------------------------------------------------------
.text:0040A013                 align 10h
.text:0040A020
.text:0040A020 ; =============== S U B R O U T I N E =======================================
.text:0040A020
.text:0040A020 ; Attributes: thunk
.text:0040A020
.text:0040A020 sub_40A020      proc near               ; CODE XREF: sub_40A030+D1↓p
.text:0040A020                                         ; sub_40D970+258↓p
.text:0040A020                 jmp     sub_40DC10
.text:0040A020 sub_40A020      endp
.text:0040A020
.text:0040A020 ; ---------------------------------------------------------------------------
.text:0040A025                 align 10h
.text:0040A030
.text:0040A030 ; =============== S U B R O U T I N E =======================================
.text:0040A030
.text:0040A030
.text:0040A030 ; int __cdecl sub_40A030(int, char *Str, int)
.text:0040A030 sub_40A030      proc near               ; CODE XREF: .text:004072CC↑p
.text:0040A030                                         ; .text:0040734F↑p
.text:0040A030
.text:0040A030 Size            = dword ptr -2Ch
.text:0040A030 Type            = dword ptr -28h
.text:0040A030 var_24          = dword ptr -24h
.text:0040A030 var_20          = dword ptr -20h
.text:0040A030 arg_0           = dword ptr  4
.text:0040A030 Str             = dword ptr  8
.text:0040A030 arg_8           = dword ptr  0Ch
.text:0040A030
.text:0040A030                 push    ebp
.text:0040A031                 push    edi
.text:0040A032                 push    esi
.text:0040A033                 push    ebx
.text:0040A034                 sub     esp, 1Ch
.text:0040A037                 mov     edi, [esp+2Ch+arg_0]
.text:0040A03B                 test    byte ptr [esp+2Ch+arg_8], 1
.text:0040A040                 mov     dword ptr [edi], 0
.text:0040A046                 setnz   dl
.text:0040A049                 mov     dword ptr [edi+4], 0
.text:0040A050                 mov     dword ptr [edi+8], 0
.text:0040A057                 mov     [esp+2Ch+Size], 100h ; Size
.text:0040A05E                 movzx   ebp, dl
.text:0040A061                 dec     ebp
.text:0040A062                 and     ebp, 0FFFD4FCAh
.text:0040A068                 add     ebp, 3B2FCh
.text:0040A06E                 call    malloc
.text:0040A073                 test    byte ptr [esp+2Ch+arg_8], 2
.text:0040A078                 mov     [edi+10h], eax
.text:0040A07B                 jnz     loc_40A130
.text:0040A081                 mov     dword ptr [edi+14h], 0
.text:0040A088
.text:0040A088 loc_40A088:                             ; CODE XREF: sub_40A030+150↓j
.text:0040A088                 test    byte ptr [esp+2Ch+arg_8], 4
.text:0040A08D                 jz      loc_40A127
.text:0040A093                 or      byte ptr [edi+1Ch], 80h
.text:0040A097                 and     ebp, 0FFFFFFBFh
.text:0040A09A                 or      ebp, 100h
.text:0040A0A0
.text:0040A0A0 loc_40A0A0:                             ; CODE XREF: sub_40A030+FB↓j
.text:0040A0A0                 shr     [esp+2Ch+arg_8], 3
.text:0040A0A5                 movzx   edx, byte ptr [esp+2Ch+arg_8]
.text:0040A0AA                 movzx   ecx, byte ptr [edi+1Ch]
.text:0040A0AE                 and     dl, 1
.text:0040A0B1                 shl     dl, 4
.text:0040A0B4                 and     cl, 0EFh
.text:0040A0B7                 or      cl, dl
.text:0040A0B9                 mov     [edi+1Ch], cl
.text:0040A0BC                 mov     esi, [esp+2Ch+Str]
.text:0040A0C0                 mov     [esp+2Ch+Size], esi ; Str
.text:0040A0C3                 call    strlen
.text:0040A0C8                 mov     [esp+2Ch+Type], eax
.text:0040A0CC                 mov     ebx, [esp+2Ch+Str]
.text:0040A0D0                 mov     [esp+2Ch+var_20], edi
.text:0040A0D4                 mov     [esp+2Ch+var_24], ebp
.text:0040A0D8                 mov     [esp+2Ch+Size], ebx
.text:0040A0DB                 call    sub_40A600
.text:0040A0E0                 cmp     eax, 10h
.text:0040A0E3                 mov     ebx, eax
.text:0040A0E5                 jz      short loc_40A120
.text:0040A0E7
.text:0040A0E7 loc_40A0E7:                             ; CODE XREF: sub_40A030+F5↓j
.text:0040A0E7                 test    ebx, ebx
.text:0040A0E9                 jnz     short loc_40A0F2
.text:0040A0EB                 mov     ebp, [edi+10h]
.text:0040A0EE                 test    ebp, ebp
.text:0040A0F0                 jnz     short loc_40A0FE
.text:0040A0F2
.text:0040A0F2 loc_40A0F2:                             ; CODE XREF: sub_40A030+B9↑j
.text:0040A0F2                                         ; sub_40A030+D9↓j ...
.text:0040A0F2                 mov     edx, ebx
.text:0040A0F4
.text:0040A0F4 loc_40A0F4:                             ; CODE XREF: sub_40A030+116↓j
.text:0040A0F4                 add     esp, 1Ch
.text:0040A0F7                 mov     eax, edx
.text:0040A0F9                 pop     ebx
.text:0040A0FA                 pop     esi
.text:0040A0FB                 pop     edi
.text:0040A0FC                 pop     ebp
.text:0040A0FD                 retn
.text:0040A0FE ; ---------------------------------------------------------------------------
.text:0040A0FE
.text:0040A0FE loc_40A0FE:                             ; CODE XREF: sub_40A030+C0↑j
.text:0040A0FE                 mov     [esp+2Ch+Size], edi
.text:0040A101                 call    sub_40A020
.text:0040A106                 cmp     eax, 0FFFFFFFEh
.text:0040A109                 jnz     short loc_40A0F2
.text:0040A10B                 mov     esi, [edi+10h]
.text:0040A10E                 mov     [esp+2Ch+Size], esi ; Block
.text:0040A111                 call    free
.text:0040A116                 mov     dword ptr [edi+10h], 0
.text:0040A11D                 jmp     short loc_40A0F2
.text:0040A11D ; ---------------------------------------------------------------------------
.text:0040A11F                 align 10h
.text:0040A120
.text:0040A120 loc_40A120:                             ; CODE XREF: sub_40A030+B5↑j
.text:0040A120                 mov     ebx, 8
.text:0040A125                 jmp     short loc_40A0E7
.text:0040A127 ; ---------------------------------------------------------------------------
.text:0040A127
.text:0040A127 loc_40A127:                             ; CODE XREF: sub_40A030+5D↑j
.text:0040A127                 and     byte ptr [edi+1Ch], 7Fh
.text:0040A12B                 jmp     loc_40A0A0
.text:0040A130 ; ---------------------------------------------------------------------------
.text:0040A130
.text:0040A130 loc_40A130:                             ; CODE XREF: sub_40A030+4B↑j
.text:0040A130                 mov     [esp+2Ch+Size], 100h ; Size
.text:0040A137                 call    malloc
.text:0040A13C                 mov     [edi+14h], eax
.text:0040A13F                 test    eax, eax
.text:0040A141                 mov     edx, 0Ch
.text:0040A146                 jz      short loc_40A0F4
.text:0040A148                 xor     ebx, ebx
.text:0040A14A                 lea     esi, [esi+0]
.text:0040A150
.text:0040A150 loc_40A150:                             ; CODE XREF: sub_40A030+14E↓j
.text:0040A150                 mov     edx, ds:__mb_cur_max
.text:0040A156                 mov     esi, [edi+14h]
.text:0040A159                 cmp     dword ptr [edx], 1
.text:0040A15C                 jz      short loc_40A191
.text:0040A15E                 mov     [esp+2Ch+Type], 1 ; Type
.text:0040A166                 mov     [esp+2Ch+Size], ebx ; C
.text:0040A169                 call    _isctype
.text:0040A16E
.text:0040A16E loc_40A16E:                             ; CODE XREF: sub_40A030+170↓j
.text:0040A16E                 test    eax, eax
.text:0040A170                 mov     dl, bl
.text:0040A172                 jnz     short loc_40A185
.text:0040A174
.text:0040A174 loc_40A174:                             ; CODE XREF: sub_40A030+15F↓j
.text:0040A174                 mov     [ebx+esi], dl
.text:0040A177                 inc     ebx
.text:0040A178                 cmp     ebx, 0FFh
.text:0040A17E                 jbe     short loc_40A150
.text:0040A180                 jmp     loc_40A088
.text:0040A185 ; ---------------------------------------------------------------------------
.text:0040A185
.text:0040A185 loc_40A185:                             ; CODE XREF: sub_40A030+142↑j
.text:0040A185                 mov     [esp+2Ch+Size], ebx ; C
.text:0040A188                 call    tolower
.text:0040A18D                 mov     dl, al
.text:0040A18F                 jmp     short loc_40A174
.text:0040A191 ; ---------------------------------------------------------------------------
.text:0040A191
.text:0040A191 loc_40A191:                             ; CODE XREF: sub_40A030+12C↑j
.text:0040A191                 mov     edx, ds:_pctype
.text:0040A197                 mov     ecx, [edx]
.text:0040A199                 movzx   eax, word ptr [ecx+ebx*2]
.text:0040A19D                 and     eax, 1
.text:0040A1A0                 jmp     short loc_40A16E
.text:0040A1A0 sub_40A030      endp
.text:0040A1A0
.text:0040A1A0 ; ---------------------------------------------------------------------------
.text:0040A1A2                 align 10h
.text:0040A1B0
.text:0040A1B0 ; =============== S U B R O U T I N E =======================================
.text:0040A1B0
.text:0040A1B0
.text:0040A1B0 ; int __cdecl sub_40A1B0(int, char *, int, int, int)
.text:0040A1B0 sub_40A1B0      proc near               ; CODE XREF: .text:00407303↑p
.text:0040A1B0                                         ; .text:00407386↑p
.text:0040A1B0
.text:0040A1B0 Str             = dword ptr -8Ch
.text:0040A1B0 var_88          = dword ptr -88h
.text:0040A1B0 var_84          = dword ptr -84h
.text:0040A1B0 var_80          = dword ptr -80h
.text:0040A1B0 var_7C          = dword ptr -7Ch
.text:0040A1B0 var_78          = dword ptr -78h
.text:0040A1B0 var_74          = dword ptr -74h
.text:0040A1B0 var_70          = dword ptr -70h
.text:0040A1B0 var_6C          = dword ptr -6Ch
.text:0040A1B0 var_4D          = byte ptr -4Dh
.text:0040A1B0 var_4C          = dword ptr -4Ch
.text:0040A1B0 var_48          = dword ptr -48h
.text:0040A1B0 var_44          = dword ptr -44h
.text:0040A1B0 var_40          = dword ptr -40h
.text:0040A1B0 var_3C          = dword ptr -3Ch
.text:0040A1B0 var_38          = dword ptr -38h
.text:0040A1B0 var_34          = dword ptr -34h
.text:0040A1B0 var_30          = dword ptr -30h
.text:0040A1B0 var_2C          = dword ptr -2Ch
.text:0040A1B0 Block           = dword ptr -28h
.text:0040A1B0 var_24          = dword ptr -24h
.text:0040A1B0 arg_0           = dword ptr  4
.text:0040A1B0 arg_4           = dword ptr  8
.text:0040A1B0 arg_8           = dword ptr  0Ch
.text:0040A1B0 arg_C           = dword ptr  10h
.text:0040A1B0 arg_10          = dword ptr  14h
.text:0040A1B0
.text:0040A1B0                 push    ebp
.text:0040A1B1                 push    edi
.text:0040A1B2                 push    esi
.text:0040A1B3                 push    ebx
.text:0040A1B4                 sub     esp, 7Ch
.text:0040A1B7                 mov     ebx, [esp+8Ch+arg_0]
.text:0040A1BE                 mov     edx, [esp+8Ch+arg_4]
.text:0040A1C5                 mov     ebp, [esp+8Ch+arg_8]
.text:0040A1CC                 mov     esi, [esp+8Ch+arg_10]
.text:0040A1D3                 mov     [esp+8Ch+Str], edx ; Str
.text:0040A1D6                 call    strlen
.text:0040A1DB                 test    byte ptr [ebx+1Ch], 10h
.text:0040A1DF                 mov     edi, eax
.text:0040A1E1                 mov     [esp+8Ch+var_4D], 0
.text:0040A1E6                 jnz     short loc_40A200
.text:0040A1E8                 test    ebp, ebp
.text:0040A1EA                 jz      short loc_40A200
.text:0040A1EC                 mov     [esp+8Ch+var_4D], 1
.text:0040A1F1                 jmp     short loc_40A200
.text:0040A1F1 ; ---------------------------------------------------------------------------
.text:0040A1F3                 align 10h
.text:0040A200
.text:0040A200 loc_40A200:                             ; CODE XREF: sub_40A1B0+36↑j
.text:0040A200                                         ; sub_40A1B0+3A↑j ...
.text:0040A200                 mov     edx, [ebx]
.text:0040A202                 mov     [esp+8Ch+var_4C], edx
.text:0040A206                 mov     ecx, [ebx+4]
.text:0040A209                 mov     [esp+8Ch+var_48], ecx
.text:0040A20D                 mov     edx, [ebx+8]
.text:0040A210                 mov     [esp+8Ch+var_44], edx
.text:0040A214                 mov     ecx, [ebx+0Ch]
.text:0040A217                 mov     [esp+8Ch+var_40], ecx
.text:0040A21B                 mov     edx, [ebx+10h]
.text:0040A21E                 mov     [esp+8Ch+var_3C], edx
.text:0040A222                 mov     ecx, [ebx+14h]
.text:0040A225                 mov     [esp+8Ch+var_38], ecx
.text:0040A229                 mov     edx, [ebx+18h]
.text:0040A22C                 mov     [esp+8Ch+var_34], edx
.text:0040A230                 mov     ecx, [ebx+1Ch]
.text:0040A233                 mov     edx, esi
.text:0040A235                 shr     esi, 1
.text:0040A237                 and     dl, 1
.text:0040A23A                 mov     eax, esi
.text:0040A23C                 mov     [esp+8Ch+var_30], ecx
.text:0040A240                 shl     dl, 5
.text:0040A243                 and     al, 1
.text:0040A245                 movzx   ebx, byte ptr [esp+8Ch+var_30]
.text:0040A24A                 shl     al, 6
.text:0040A24D                 and     bl, 9Fh
.text:0040A250                 or      bl, dl
.text:0040A252                 or      bl, al
.text:0040A254                 and     bl, 0F9h
.text:0040A257                 or      bl, 4
.text:0040A25A                 cmp     [esp+8Ch+var_4D], 0
.text:0040A25F                 mov     byte ptr [esp+8Ch+var_30], bl
.text:0040A263                 jnz     loc_40A316
.text:0040A269
.text:0040A269 loc_40A269:                             ; CODE XREF: sub_40A1B0+18F↓j
.text:0040A269                 movzx   ecx, [esp+8Ch+var_4D]
.text:0040A26E                 lea     esi, [esp+8Ch+var_2C]
.text:0040A272                 mov     [esp+8Ch+var_6C], edi
.text:0040A276                 lea     ebx, [esp+8Ch+var_4C]
.text:0040A27A                 mov     [esp+8Ch+var_74], edi
.text:0040A27E                 mov     [esp+8Ch+var_78], 0
.text:0040A286                 xor     cl, 1
.text:0040A289                 movzx   edx, cl
.text:0040A28C                 mov     [esp+8Ch+var_7C], edi
.text:0040A290                 mov     ecx, [esp+8Ch+arg_4]
.text:0040A297                 dec     edx
.text:0040A298                 mov     [esp+8Ch+var_84], 0
.text:0040A2A0                 and     esi, edx
.text:0040A2A2                 mov     [esp+8Ch+var_70], esi
.text:0040A2A6                 mov     [esp+8Ch+var_80], ecx
.text:0040A2AA                 mov     [esp+8Ch+var_88], 0
.text:0040A2B2                 mov     [esp+8Ch+Str], ebx
.text:0040A2B5                 call    sub_40D970
.text:0040A2BA                 cmp     [esp+8Ch+var_4D], 0
.text:0040A2BF                 mov     esi, eax
.text:0040A2C1                 jz      short loc_40A301
.text:0040A2C3                 test    eax, eax
.text:0040A2C5                 js      short loc_40A310
.text:0040A2C7                 xor     edx, edx
.text:0040A2C9                 cmp     edx, ebp
.text:0040A2CB                 jnb     short loc_40A310
.text:0040A2CD                 mov     ecx, [esp+8Ch+Block]
.text:0040A2D1                 mov     ebx, [esp+8Ch+var_24]
.text:0040A2D5                 lea     esi, [esi+0]
.text:0040A2D9                 lea     edi, [edi+0]
.text:0040A2E0
.text:0040A2E0 loc_40A2E0:                             ; CODE XREF: sub_40A1B0+147↓j
.text:0040A2E0                 mov     eax, [ecx+edx*4]
.text:0040A2E3                 mov     edi, [esp+8Ch+arg_C]
.text:0040A2EA                 mov     [edi+edx*8], eax
.text:0040A2ED                 mov     eax, [ebx+edx*4]
.text:0040A2F0                 mov     [edi+edx*8+4], eax
.text:0040A2F4                 inc     edx
.text:0040A2F5                 cmp     edx, ebp
.text:0040A2F7                 jb      short loc_40A2E0
.text:0040A2F9
.text:0040A2F9 loc_40A2F9:                             ; CODE XREF: sub_40A1B0+164↓j
.text:0040A2F9                 mov     [esp+8Ch+Str], ecx ; Block
.text:0040A2FC                 call    free
.text:0040A301
.text:0040A301 loc_40A301:                             ; CODE XREF: sub_40A1B0+111↑j
.text:0040A301                 mov     eax, esi
.text:0040A303                 shr     eax, 1Fh
.text:0040A306
.text:0040A306 loc_40A306:                             ; CODE XREF: sub_40A1B0+186↓j
.text:0040A306                 add     esp, 7Ch
.text:0040A309                 pop     ebx
.text:0040A30A                 pop     esi
.text:0040A30B                 pop     edi
.text:0040A30C                 pop     ebp
.text:0040A30D                 retn
.text:0040A30D ; ---------------------------------------------------------------------------
.text:0040A30E                 align 10h
.text:0040A310
.text:0040A310 loc_40A310:                             ; CODE XREF: sub_40A1B0+115↑j
.text:0040A310                                         ; sub_40A1B0+11B↑j
.text:0040A310                 mov     ecx, [esp+8Ch+Block]
.text:0040A314                 jmp     short loc_40A2F9
.text:0040A316 ; ---------------------------------------------------------------------------
.text:0040A316
.text:0040A316 loc_40A316:                             ; CODE XREF: sub_40A1B0+B3↑j
.text:0040A316                 mov     [esp+8Ch+var_2C], ebp
.text:0040A31A                 lea     esi, ds:0[ebp*8]
.text:0040A321                 mov     [esp+8Ch+Str], esi ; Size
.text:0040A324                 call    malloc
.text:0040A329                 mov     [esp+8Ch+Block], eax
.text:0040A32D                 mov     ecx, eax
.text:0040A32F                 test    ecx, ecx
.text:0040A331                 mov     eax, 1
.text:0040A336                 jz      short loc_40A306
.text:0040A338                 lea     eax, [ecx+ebp*4]
.text:0040A33B                 mov     [esp+8Ch+var_24], eax
.text:0040A33F                 jmp     loc_40A269
.text:0040A33F sub_40A1B0      endp
.text:0040A33F
.text:0040A33F ; ---------------------------------------------------------------------------
.text:0040A344                 align 10h
.text:0040A350                 mov     eax, ds:dword_4196D0
.text:0040A355                 mov     ecx, [esp+4]
.text:0040A359                 mov     ds:dword_4196D0, ecx
.text:0040A35F                 retn
.text:0040A360 ; ---------------------------------------------------------------------------
.text:0040A360                 push    ebx
.text:0040A361                 mov     ebx, [esp+10h]
.text:0040A365                 mov     edx, [esp+8]
.text:0040A369                 mov     ecx, [esp+0Ch]
.text:0040A36D                 test    ebx, ebx
.text:0040A36F                 jz      short loc_40A390
.text:0040A371                 movzx   eax, byte ptr [edx+1Ch]
.text:0040A375                 and     al, 0F9h
.text:0040A377                 or      al, 2
.text:0040A379                 mov     [edx+1Ch], al
.text:0040A37C                 mov     edx, [esp+14h]
.text:0040A380                 mov     [ecx], ebx
.text:0040A382                 mov     [ecx+4], edx
.text:0040A385                 mov     edx, [esp+18h]
.text:0040A389                 mov     [ecx+8], edx
.text:0040A38C
.text:0040A38C loc_40A38C:                             ; CODE XREF: .text:0040A3A8↓j
.text:0040A38C                 pop     ebx
.text:0040A38D                 retn
.text:0040A38D ; ---------------------------------------------------------------------------
.text:0040A38E                 align 10h
.text:0040A390
.text:0040A390 loc_40A390:                             ; CODE XREF: .text:0040A36F↑j
.text:0040A390                 and     byte ptr [edx+1Ch], 0F9h
.text:0040A394                 mov     dword ptr [ecx], 0
.text:0040A39A                 mov     dword ptr [ecx+8], 0
.text:0040A3A1                 mov     dword ptr [ecx+4], 0
.text:0040A3A8                 jmp     short loc_40A38C
.text:0040A3A8 ; ---------------------------------------------------------------------------
.text:0040A3AA                 align 10h
.text:0040A3B0                 sub     esp, 2Ch
.text:0040A3B3                 mov     edx, [esp+44h]
.text:0040A3B7                 mov     dword ptr [esp+8], 0
.text:0040A3BF                 mov     ecx, [esp+38h]
.text:0040A3C3                 mov     dword ptr [esp+4], 0
.text:0040A3CB                 mov     [esp+1Ch], edx
.text:0040A3CF                 mov     edx, [esp+40h]
.text:0040A3D3                 mov     [esp+20h], ecx
.text:0040A3D7                 mov     [esp+10h], ecx
.text:0040A3DB                 mov     [esp+18h], edx
.text:0040A3DF                 mov     edx, [esp+3Ch]
.text:0040A3E3                 mov     [esp+14h], edx
.text:0040A3E7                 mov     edx, [esp+34h]
.text:0040A3EB                 mov     [esp+0Ch], edx
.text:0040A3EF                 mov     edx, [esp+30h]
.text:0040A3F3                 mov     [esp], edx
.text:0040A3F6                 call    sub_40D970
.text:0040A3FB                 add     esp, 2Ch
.text:0040A3FE                 retn
.text:0040A3FE ; ---------------------------------------------------------------------------
.text:0040A3FF                 align 10h
.text:0040A400                 jmp     sub_40D970
.text:0040A400 ; ---------------------------------------------------------------------------
.text:0040A405                 align 10h
.text:0040A410                 sub     esp, 2Ch
.text:0040A413                 mov     edx, [esp+40h]
.text:0040A417                 mov     dword ptr [esp+8], 0
.text:0040A41F                 mov     ecx, [esp+38h]
.text:0040A423                 mov     dword ptr [esp+4], 0
.text:0040A42B                 mov     [esp+18h], edx
.text:0040A42F                 mov     edx, [esp+3Ch]
.text:0040A433                 mov     [esp+1Ch], ecx
.text:0040A437                 mov     [esp+10h], ecx
.text:0040A43B                 mov     [esp+14h], edx
.text:0040A43F                 mov     edx, [esp+34h]
.text:0040A443                 mov     [esp+0Ch], edx
.text:0040A447                 mov     edx, [esp+30h]
.text:0040A44B                 mov     [esp], edx
.text:0040A44E                 call    sub_4076F0
.text:0040A453                 add     esp, 2Ch
.text:0040A456                 retn
.text:0040A456 ; ---------------------------------------------------------------------------
.text:0040A457                 align 10h
.text:0040A460                 jmp     sub_4076F0
.text:0040A460 ; ---------------------------------------------------------------------------
.text:0040A465                 align 10h
.text:0040A470                 sub     esp, 1Ch
.text:0040A473                 mov     ecx, [esp+28h]
.text:0040A477                 movzx   edx, byte ptr [ecx+1Ch]
.text:0040A47B                 and     dl, 0E9h
.text:0040A47E                 or      dl, 80h
.text:0040A481                 mov     [ecx+1Ch], dl
.text:0040A484                 mov     edx, [esp+24h]
.text:0040A488                 mov     [esp+0Ch], ecx
.text:0040A48C                 mov     ecx, ds:dword_4196D0
.text:0040A492                 mov     [esp+4], edx
.text:0040A496                 mov     edx, [esp+20h]
.text:0040A49A                 mov     [esp+8], ecx
.text:0040A49E                 mov     [esp], edx
.text:0040A4A1                 call    sub_40A600
.text:0040A4A6                 test    eax, eax
.text:0040A4A8                 jz      short loc_40A4C4
.text:0040A4AA                 mov     ecx, ds:dword_409F90[eax*4]
.text:0040A4B1                 add     ecx, offset aSuccess ; "Success"
.text:0040A4B7                 mov     [esp+20h], ecx
.text:0040A4BB                 add     esp, 1Ch
.text:0040A4BE                 jmp     ds:libintl_gettext
.text:0040A4C4 ; ---------------------------------------------------------------------------
.text:0040A4C4
.text:0040A4C4 loc_40A4C4:                             ; CODE XREF: .text:0040A4A8↑j
.text:0040A4C4                 xor     eax, eax
.text:0040A4C6                 add     esp, 1Ch
.text:0040A4C9                 retn
.text:0040A4C9 ; ---------------------------------------------------------------------------
.text:0040A4CA                 align 10h
.text:0040A4D0                 sub     esp, 1Ch
.text:0040A4D3                 mov     eax, [esp+20h]
.text:0040A4D7                 mov     [esp+14h], edi
.text:0040A4DB                 mov     edi, [esp+2Ch]
.text:0040A4DF                 cmp     eax, 10h
.text:0040A4E2                 mov     [esp+18h], ebp
.text:0040A4E6                 mov     ebp, [esp+28h]
.text:0040A4EA                 mov     [esp+0Ch], ebx
.text:0040A4EE                 mov     [esp+10h], esi
.text:0040A4F2                 ja      short loc_40A568
.text:0040A4F4                 mov     edx, ds:dword_409F90[eax*4]
.text:0040A4FB                 add     edx, offset aSuccess ; "Success"
.text:0040A501                 mov     [esp], edx
.text:0040A504                 call    ds:libintl_gettext
.text:0040A50A                 mov     [esp], eax
.text:0040A50D                 mov     ebx, eax
.text:0040A50F                 call    strlen
.text:0040A514                 test    edi, edi
.text:0040A516                 lea     esi, [eax+1]
.text:0040A519                 jz      short loc_40A540
.text:0040A51B                 cmp     esi, edi
.text:0040A51D                 jbe     short loc_40A556
.text:0040A51F                 mov     [esp+4], ebx
.text:0040A523                 lea     edx, [edi-1]
.text:0040A526                 mov     [esp+8], edx
.text:0040A52A                 mov     [esp], ebp
.text:0040A52D                 call    sub_40F7F0
.text:0040A532                 mov     byte ptr [eax], 0
.text:0040A535                 lea     esi, [esi+0]
.text:0040A539                 lea     edi, [edi+0]
.text:0040A540
.text:0040A540 loc_40A540:                             ; CODE XREF: .text:0040A519↑j
.text:0040A540                                         ; .text:0040A566↓j
.text:0040A540                 mov     eax, esi
.text:0040A542                 mov     ebx, [esp+0Ch]
.text:0040A546                 mov     esi, [esp+10h]
.text:0040A54A                 mov     edi, [esp+14h]
.text:0040A54E                 mov     ebp, [esp+18h]
.text:0040A552                 add     esp, 1Ch
.text:0040A555                 retn
.text:0040A556 ; ---------------------------------------------------------------------------
.text:0040A556
.text:0040A556 loc_40A556:                             ; CODE XREF: .text:0040A51D↑j
.text:0040A556                 mov     [esp+8], esi
.text:0040A55A                 mov     [esp+4], ebx
.text:0040A55E                 mov     [esp], ebp
.text:0040A561                 call    memcpy
.text:0040A566                 jmp     short loc_40A540
.text:0040A568 ; ---------------------------------------------------------------------------
.text:0040A568
.text:0040A568 loc_40A568:                             ; CODE XREF: .text:0040A4F2↑j
.text:0040A568                 call    abort
.text:0040A568 ; ---------------------------------------------------------------------------
.text:0040A56D                 align 10h
.text:0040A570
.text:0040A570 ; =============== S U B R O U T I N E =======================================
.text:0040A570
.text:0040A570
.text:0040A570 sub_40A570      proc near               ; CODE XREF: .text:004073A1↑p
.text:0040A570                                         ; .text:004073B7↑p
.text:0040A570
.text:0040A570 Block           = dword ptr -0Ch
.text:0040A570 var_4           = dword ptr -4
.text:0040A570 arg_0           = dword ptr  4
.text:0040A570
.text:0040A570                 sub     esp, 0Ch
.text:0040A573                 mov     [esp+0Ch+var_4], ebx
.text:0040A577                 mov     ebx, [esp+0Ch+arg_0]
.text:0040A57B                 mov     eax, [ebx]
.text:0040A57D                 test    eax, eax
.text:0040A57F                 jnz     short loc_40A5E0
.text:0040A581
.text:0040A581 loc_40A581:                             ; CODE XREF: sub_40A570+78↓j
.text:0040A581                 mov     dword ptr [ebx], 0
.text:0040A587                 mov     eax, [ebx+10h]
.text:0040A58A                 mov     dword ptr [ebx+4], 0
.text:0040A591                 mov     dword ptr [ebx+8], 0
.text:0040A598                 test    eax, eax
.text:0040A59A                 jnz     short loc_40A5D0
.text:0040A59C
.text:0040A59C loc_40A59C:                             ; CODE XREF: sub_40A570+68↓j
.text:0040A59C                 and     byte ptr [ebx+1Ch], 0F7h
.text:0040A5A0                 mov     eax, [ebx+14h]
.text:0040A5A3                 mov     dword ptr [ebx+10h], 0
.text:0040A5AA                 test    eax, eax
.text:0040A5AC                 jnz     short loc_40A5C0
.text:0040A5AE
.text:0040A5AE loc_40A5AE:                             ; CODE XREF: sub_40A570+58↓j
.text:0040A5AE                 mov     dword ptr [ebx+14h], 0
.text:0040A5B5                 mov     ebx, [esp+0Ch+var_4]
.text:0040A5B9                 add     esp, 0Ch
.text:0040A5BC                 retn
.text:0040A5BC ; ---------------------------------------------------------------------------
.text:0040A5BD                 align 10h
.text:0040A5C0
.text:0040A5C0 loc_40A5C0:                             ; CODE XREF: sub_40A570+3C↑j
.text:0040A5C0                 mov     [esp+0Ch+Block], eax ; Block
.text:0040A5C3                 call    free
.text:0040A5C8                 jmp     short loc_40A5AE
.text:0040A5C8 ; ---------------------------------------------------------------------------
.text:0040A5CA                 align 10h
.text:0040A5D0
.text:0040A5D0 loc_40A5D0:                             ; CODE XREF: sub_40A570+2A↑j
.text:0040A5D0                 mov     [esp+0Ch+Block], eax ; Block
.text:0040A5D3                 call    free
.text:0040A5D8                 jmp     short loc_40A59C
.text:0040A5D8 ; ---------------------------------------------------------------------------
.text:0040A5DA                 align 10h
.text:0040A5E0
.text:0040A5E0 loc_40A5E0:                             ; CODE XREF: sub_40A570+F↑j
.text:0040A5E0                 mov     [esp+0Ch+Block], eax ; Block
.text:0040A5E3                 call    free
.text:0040A5E8                 jmp     short loc_40A581
.text:0040A5E8 sub_40A570      endp
.text:0040A5E8
.text:0040A5E8 ; ---------------------------------------------------------------------------
.text:0040A5EA aLower          db 'lower',0            ; DATA XREF: sub_40A600+1EEB↓o
.text:0040A5F0 aUpper          db 'upper',0            ; DATA XREF: sub_40A600+1F11↓o
.text:0040A5F6                 align 10h
.text:0040A600
.text:0040A600 ; =============== S U B R O U T I N E =======================================
.text:0040A600
.text:0040A600
.text:0040A600 sub_40A600      proc near               ; CODE XREF: sub_40A030+AB↑p
.text:0040A600                                         ; .text:0040A4A1↑p
.text:0040A600
.text:0040A600 Size            = dword ptr -97Ch
.text:0040A600 var_978         = dword ptr -978h
.text:0040A600 var_974         = dword ptr -974h
.text:0040A600 var_970         = dword ptr -970h
.text:0040A600 var_96C         = dword ptr -96Ch
.text:0040A600 var_968         = dword ptr -968h
.text:0040A600 var_950         = dword ptr -950h
.text:0040A600 var_940         = dword ptr -940h
.text:0040A600 var_93C         = dword ptr -93Ch
.text:0040A600 var_938         = dword ptr -938h
.text:0040A600 var_934         = dword ptr -934h
.text:0040A600 var_930         = dword ptr -930h
.text:0040A600 Type            = word ptr -92Ch
.text:0040A600 var_926         = byte ptr -926h
.text:0040A600 var_925         = byte ptr -925h
.text:0040A600 var_924         = dword ptr -924h
.text:0040A600 var_91E         = byte ptr -91Eh
.text:0040A600 var_91D         = byte ptr -91Dh
.text:0040A600 var_91C         = byte ptr -91Ch
.text:0040A600 var_90C         = dword ptr -90Ch
.text:0040A600 var_908         = dword ptr -908h
.text:0040A600 var_904         = dword ptr -904h
.text:0040A600 var_900         = dword ptr -900h
.text:0040A600 var_8FC         = dword ptr -8FCh
.text:0040A600 var_8F8         = dword ptr -8F8h
.text:0040A600 var_8F4         = dword ptr -8F4h
.text:0040A600 var_8F0         = dword ptr -8F0h
.text:0040A600 var_8EC         = byte ptr -8ECh
.text:0040A600 var_8D0         = dword ptr -8D0h
.text:0040A600 var_8CC         = byte ptr -8CCh
.text:0040A600 var_84C         = byte ptr -84Ch
.text:0040A600 name            = byte ptr -83Ch
.text:0040A600 Block           = dword ptr -2Ch
.text:0040A600 var_28          = dword ptr -28h
.text:0040A600 var_24          = dword ptr -24h
.text:0040A600 arg_0           = dword ptr  4
.text:0040A600 arg_4           = dword ptr  8
.text:0040A600 arg_8           = dword ptr  0Ch
.text:0040A600 arg_C           = dword ptr  10h
.text:0040A600
.text:0040A600                 push    ebp
.text:0040A601                 mov     ebp, 0Ch
.text:0040A606                 push    edi
.text:0040A607                 push    esi
.text:0040A608                 push    ebx
.text:0040A609                 sub     esp, 96Ch
.text:0040A60F                 mov     eax, [esp+97Ch+arg_0]
.text:0040A616                 mov     [esp+97Ch+var_900], 0
.text:0040A61E                 mov     ecx, [esp+97Ch+arg_C]
.text:0040A625                 mov     ebx, [esp+97Ch+arg_4]
.text:0040A62C                 mov     [esp+97Ch+var_8D0], eax
.text:0040A633                 mov     edx, [ecx+14h]
.text:0040A636                 add     eax, ebx
.text:0040A638                 mov     [esp+97Ch+var_8F4], eax
.text:0040A63F                 xor     eax, eax
.text:0040A641                 mov     [esp+97Ch+var_8F8], edx
.text:0040A648                 mov     [esp+97Ch+var_8FC], eax
.text:0040A64F                 mov     [esp+97Ch+var_908], 0
.text:0040A657                 mov     [esp+97Ch+var_90C], 0
.text:0040A65F                 mov     [esp+97Ch+Size], 280h ; Size
.text:0040A666                 call    malloc
.text:0040A66B                 mov     [esp+97Ch+Block], eax
.text:0040A672                 test    eax, eax
.text:0040A674                 jz      loc_40AA16
.text:0040A67A                 mov     edi, [esp+97Ch+arg_C]
.text:0040A681                 xor     edx, edx
.text:0040A683                 mov     ecx, 20h ; ' '
.text:0040A688                 mov     [esp+97Ch+var_28], ecx
.text:0040A68F                 mov     ebp, [esp+97Ch+arg_8]
.text:0040A696                 mov     [esp+97Ch+var_24], edx
.text:0040A69D                 and     byte ptr [edi+1Ch], 97h
.text:0040A6A1                 mov     [edi+0Ch], ebp
.text:0040A6A4                 mov     dword ptr [edi+8], 0
.text:0040A6AB                 mov     esi, ds:dword_419240
.text:0040A6B1                 mov     dword ptr [edi+18h], 0
.text:0040A6B8                 test    esi, esi
.text:0040A6BA                 jz      loc_40D8F1
.text:0040A6C0
.text:0040A6C0 loc_40A6C0:                             ; CODE XREF: sub_40A600+3351↓j
.text:0040A6C0                 mov     ebx, [esp+97Ch+arg_C]
.text:0040A6C7                 mov     edx, [ebx+4]
.text:0040A6CA                 test    edx, edx
.text:0040A6CC                 jnz     loc_40D8E2
.text:0040A6D2                 mov     eax, [ebx]
.text:0040A6D4                 test    eax, eax
.text:0040A6D6                 jz      loc_40D8C8
.text:0040A6DC                 mov     [esp+97Ch+var_978], 20h ; ' ' ; Size
.text:0040A6E4                 mov     [esp+97Ch+Size], eax ; Block
.text:0040A6E7                 call    realloc
.text:0040A6EC                 mov     [ebx], eax
.text:0040A6EE
.text:0040A6EE loc_40A6EE:                             ; CODE XREF: sub_40A600+32DD↓j
.text:0040A6EE                 mov     esi, [esp+97Ch+arg_C]
.text:0040A6F5                 mov     edi, [esi]
.text:0040A6F7                 test    edi, edi
.text:0040A6F9                 jz      loc_40D8B7
.text:0040A6FF                 mov     eax, [esp+97Ch+arg_C]
.text:0040A706                 mov     dword ptr [eax+4], 20h ; ' '
.text:0040A70D
.text:0040A70D loc_40A70D:                             ; CODE XREF: sub_40A600+32EC↓j
.text:0040A70D                 mov     [esp+97Ch+var_950], edi
.text:0040A711                 mov     [esp+97Ch+var_904], edi
.text:0040A715                 mov     edi, [esp+97Ch+var_8D0]
.text:0040A71C                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040A723                 jz      loc_40AA70
.text:0040A729
.text:0040A729 loc_40A729:                             ; CODE XREF: sub_40A600+43D↓j
.text:0040A729                 movzx   ebx, byte ptr [edi]
.text:0040A72C                 inc     edi
.text:0040A72D                 mov     edx, [esp+97Ch+var_8F8]
.text:0040A734                 mov     [esp+97Ch+var_8D0], edi
.text:0040A73B                 test    edx, edx
.text:0040A73D                 mov     [esp+97Ch+var_8EC], bl
.text:0040A744                 jz      short loc_40A75B
.text:0040A746                 mov     edi, [esp+97Ch+var_8F8]
.text:0040A74D                 movzx   ecx, bl
.text:0040A750                 movzx   ebx, byte ptr [ecx+edi]
.text:0040A754                 mov     [esp+97Ch+var_8EC], bl
.text:0040A75B
.text:0040A75B loc_40A75B:                             ; CODE XREF: sub_40A600+144↑j
.text:0040A75B                 movzx   eax, [esp+97Ch+var_8EC]
.text:0040A763                 sub     eax, 0Ah        ; switch 115 cases
.text:0040A766                 cmp     eax, 72h
.text:0040A769                 ja      def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A76F                 jmp     ds:jpt_40A76F[eax*4] ; switch jump
.text:0040A76F ; ---------------------------------------------------------------------------
.text:0040A776                 align 4
.text:0040A778 jpt_40A76F      dd offset loc_40AE65, offset def_40A76F, offset def_40A76F
.text:0040A778                                         ; DATA XREF: sub_40A600+16F↑r
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F ; jump table for switch statement
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset loc_40B09D
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset loc_40B1AC, offset loc_40B396, offset loc_40B660
.text:0040A778                 dd offset loc_40BCD4, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset loc_40BBF0, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset loc_40BCD4
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset loc_40BCEA, offset loc_40C876, offset def_40A76F
.text:0040A778                 dd offset loc_40A944, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset def_40A76F
.text:0040A778                 dd offset def_40A76F, offset def_40A76F, offset loc_40D884
.text:0040A778                 dd offset loc_40D8A2
.text:0040A944 ; ---------------------------------------------------------------------------
.text:0040A944
.text:0040A944 loc_40A944:                             ; CODE XREF: sub_40A600+16F↑j
.text:0040A944                                         ; DATA XREF: sub_40A600:jpt_40A76F↑o
.text:0040A944                 mov     esi, [esp+97Ch+arg_0] ; jumptable 0040A76F case 94
.text:0040A94B                 mov     edx, [esp+97Ch+var_8D0]
.text:0040A952                 inc     esi
.text:0040A953                 cmp     edx, esi
.text:0040A955                 jz      short loc_40A965
.text:0040A957                 test    byte ptr [esp+97Ch+arg_8], 8
.text:0040A95F                 jz      loc_40ABAD
.text:0040A965
.text:0040A965 loc_40A965:                             ; CODE XREF: sub_40A600+355↑j
.text:0040A965                                         ; sub_40A600+3D7↓j ...
.text:0040A965                 mov     eax, [esp+97Ch+arg_C]
.text:0040A96C                 mov     ebp, [esp+97Ch+var_950]
.text:0040A970                 mov     edi, [eax]
.text:0040A972                 mov     edx, [eax+4]
.text:0040A975                 sub     ebp, edi
.text:0040A977                 inc     ebp
.text:0040A978                 cmp     ebp, edx
.text:0040A97A                 jbe     loc_40AA23
.text:0040A980                 cmp     edx, 10000h
.text:0040A986                 mov     ebp, 0Fh
.text:0040A98B                 jz      loc_40AA16
.text:0040A991                 lea     ebx, [edx+edx]
.text:0040A994                 mov     edx, [esp+97Ch+arg_C]
.text:0040A99B                 cmp     ebx, 10000h
.text:0040A9A1                 mov     [edx+4], ebx
.text:0040A9A4                 jbe     short loc_40A9AD
.text:0040A9A6                 mov     dword ptr [edx+4], 10000h
.text:0040A9AD
.text:0040A9AD loc_40A9AD:                             ; CODE XREF: sub_40A600+3A4↑j
.text:0040A9AD                 mov     ebp, [esp+97Ch+arg_C]
.text:0040A9B4                 mov     esi, [ebp+4]
.text:0040A9B7                 mov     ebp, 0Ch
.text:0040A9BC                 mov     [esp+97Ch+Size], edi ; Block
.text:0040A9BF                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040A9C3                 call    realloc
.text:0040A9C8                 mov     edx, [esp+97Ch+arg_C]
.text:0040A9CF                 test    eax, eax
.text:0040A9D1                 mov     [edx], eax
.text:0040A9D3                 jz      short loc_40AA16
.text:0040A9D5                 cmp     edi, eax
.text:0040A9D7                 jz      short loc_40A965
.text:0040A9D9                 mov     ecx, [esp+97Ch+var_908]
.text:0040A9DD                 sub     eax, edi
.text:0040A9DF                 add     [esp+97Ch+var_950], eax
.text:0040A9E3                 add     [esp+97Ch+var_904], eax
.text:0040A9E7                 test    ecx, ecx
.text:0040A9E9                 jz      short loc_40A9EF
.text:0040A9EB                 add     [esp+97Ch+var_908], eax
.text:0040A9EF
.text:0040A9EF loc_40A9EF:                             ; CODE XREF: sub_40A600+3E9↑j
.text:0040A9EF                 mov     ebx, [esp+97Ch+var_900]
.text:0040A9F3                 test    ebx, ebx
.text:0040A9F5                 jz      short loc_40A9FB
.text:0040A9F7                 add     [esp+97Ch+var_900], eax
.text:0040A9FB
.text:0040A9FB loc_40A9FB:                             ; CODE XREF: sub_40A600+3F5↑j
.text:0040A9FB                 mov     edi, [esp+97Ch+var_8FC]
.text:0040AA02                 test    edi, edi
.text:0040AA04                 jz      loc_40A965
.text:0040AA0A                 add     [esp+97Ch+var_8FC], eax
.text:0040AA11                 jmp     loc_40A965
.text:0040AA16 ; ---------------------------------------------------------------------------
.text:0040AA16
.text:0040AA16 loc_40AA16:                             ; CODE XREF: sub_40A600+74↑j
.text:0040AA16                                         ; sub_40A600+38B↑j ...
.text:0040AA16                 add     esp, 96Ch
.text:0040AA1C                 mov     eax, ebp
.text:0040AA1E                 pop     ebx
.text:0040AA1F                 pop     esi
.text:0040AA20                 pop     edi
.text:0040AA21                 pop     ebp
.text:0040AA22                 retn
.text:0040AA23 ; ---------------------------------------------------------------------------
.text:0040AA23
.text:0040AA23 loc_40AA23:                             ; CODE XREF: sub_40A600+37A↑j
.text:0040AA23                 mov     edi, [esp+97Ch+var_950]
.text:0040AA27                 mov     byte ptr [edi], 9
.text:0040AA2A
.text:0040AA2A loc_40AA2A:                             ; CODE XREF: sub_40A600+16CF↓j
.text:0040AA2A                                         ; sub_40A600+2518↓j ...
.text:0040AA2A                 inc     edi
.text:0040AA2B
.text:0040AA2B loc_40AA2B:                             ; CODE XREF: sub_40A600+1496↓j
.text:0040AA2B                 mov     [esp+97Ch+var_950], edi
.text:0040AA2F
.text:0040AA2F loc_40AA2F:                             ; CODE XREF: sub_40A600+7DA↓j
.text:0040AA2F                                         ; sub_40A600+A98↓j ...
.text:0040AA2F                 mov     edi, [esp+97Ch+var_8D0]
.text:0040AA36                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040AA3D                 jnz     loc_40A729
.text:0040AA43                 mov     ebx, [esp+97Ch+var_908]
.text:0040AA47                 test    ebx, ebx
.text:0040AA49                 jz      short loc_40AA70
.text:0040AA4B                 mov     [esp+97Ch+Size], 0Eh
.text:0040AA52                 mov     ebp, [esp+97Ch+var_950]
.text:0040AA56                 mov     edx, [esp+97Ch+var_908]
.text:0040AA5A                 mov     esi, [esp+97Ch+var_908]
.text:0040AA5E                 sub     ebp, edx
.text:0040AA60                 sub     ebp, 3
.text:0040AA63                 mov     [esp+97Ch+var_974], ebp
.text:0040AA67                 mov     [esp+97Ch+var_978], esi
.text:0040AA6B                 call    sub_4073D0
.text:0040AA70
.text:0040AA70 loc_40AA70:                             ; CODE XREF: sub_40A600+123↑j
.text:0040AA70                                         ; sub_40A600+449↑j
.text:0040AA70                 mov     eax, [esp+97Ch+var_24]
.text:0040AA77                 test    eax, eax
.text:0040AA79                 jnz     loc_40AB94
.text:0040AA7F                 test    [esp+97Ch+arg_8], 40000h
.text:0040AA8A                 jz      loc_40AB63
.text:0040AA90                 mov     ecx, [esp+97Ch+arg_C]
.text:0040AA97                 mov     ebp, [esp+97Ch+var_950]
.text:0040AA9B                 mov     ebx, [ecx]
.text:0040AA9D                 mov     edx, [ecx+4]
.text:0040AAA0                 sub     ebp, ebx
.text:0040AAA2                 mov     edi, ebx
.text:0040AAA4                 inc     ebp
.text:0040AAA5                 cmp     ebp, edx
.text:0040AAA7                 jbe     loc_40AB57
.text:0040AAAD
.text:0040AAAD loc_40AAAD:                             ; CODE XREF: sub_40A600+551↓j
.text:0040AAAD                 cmp     edx, 10000h
.text:0040AAB3                 mov     ebp, 0Fh
.text:0040AAB8                 jz      loc_40AA16
.text:0040AABE                 mov     esi, [esp+97Ch+arg_C]
.text:0040AAC5                 lea     ebp, [edx+edx]
.text:0040AAC8                 cmp     ebp, 10000h
.text:0040AACE                 mov     [esi+4], ebp
.text:0040AAD1                 jbe     short loc_40AADA
.text:0040AAD3                 mov     dword ptr [esi+4], 10000h
.text:0040AADA
.text:0040AADA loc_40AADA:                             ; CODE XREF: sub_40A600+4D1↑j
.text:0040AADA                 mov     eax, [esp+97Ch+arg_C]
.text:0040AAE1                 mov     ebp, 0Ch
.text:0040AAE6                 mov     esi, [eax+4]
.text:0040AAE9                 mov     [esp+97Ch+Size], edi ; Block
.text:0040AAEC                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040AAF0                 call    realloc
.text:0040AAF5                 mov     edx, [esp+97Ch+arg_C]
.text:0040AAFC                 test    eax, eax
.text:0040AAFE                 mov     [edx], eax
.text:0040AB00                 jz      loc_40AA16
.text:0040AB06                 cmp     ebx, eax
.text:0040AB08                 jz      short loc_40AB3A
.text:0040AB0A                 mov     edi, [esp+97Ch+var_908]
.text:0040AB0E                 sub     eax, ebx
.text:0040AB10                 add     [esp+97Ch+var_950], eax
.text:0040AB14                 test    edi, edi
.text:0040AB16                 jz      short loc_40AB1C
.text:0040AB18                 add     [esp+97Ch+var_908], eax
.text:0040AB1C
.text:0040AB1C loc_40AB1C:                             ; CODE XREF: sub_40A600+516↑j
.text:0040AB1C                 mov     ebx, [esp+97Ch+var_900]
.text:0040AB20                 test    ebx, ebx
.text:0040AB22                 jz      short loc_40AB28
.text:0040AB24                 add     [esp+97Ch+var_900], eax
.text:0040AB28
.text:0040AB28 loc_40AB28:                             ; CODE XREF: sub_40A600+522↑j
.text:0040AB28                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040AB2F                 test    ecx, ecx
.text:0040AB31                 jz      short loc_40AB3A
.text:0040AB33                 add     [esp+97Ch+var_8FC], eax
.text:0040AB3A
.text:0040AB3A loc_40AB3A:                             ; CODE XREF: sub_40A600+508↑j
.text:0040AB3A                                         ; sub_40A600+531↑j
.text:0040AB3A                 mov     eax, [esp+97Ch+arg_C]
.text:0040AB41                 mov     ebp, [esp+97Ch+var_950]
.text:0040AB45                 mov     ebx, [eax]
.text:0040AB47                 mov     edx, [eax+4]
.text:0040AB4A                 sub     ebp, ebx
.text:0040AB4C                 mov     edi, ebx
.text:0040AB4E                 inc     ebp
.text:0040AB4F                 cmp     ebp, edx
.text:0040AB51                 ja      loc_40AAAD
.text:0040AB57
.text:0040AB57 loc_40AB57:                             ; CODE XREF: sub_40A600+4A7↑j
.text:0040AB57                 mov     edx, [esp+97Ch+var_950]
.text:0040AB5B                 mov     byte ptr [edx], 1
.text:0040AB5E                 inc     edx
.text:0040AB5F                 mov     [esp+97Ch+var_950], edx
.text:0040AB63
.text:0040AB63 loc_40AB63:                             ; CODE XREF: sub_40A600+48A↑j
.text:0040AB63                 mov     ebp, [esp+97Ch+Block]
.text:0040AB6A                 mov     [esp+97Ch+Size], ebp ; Block
.text:0040AB6D                 xor     ebp, ebp
.text:0040AB6F                 call    free
.text:0040AB74                 mov     ecx, [esp+97Ch+arg_C]
.text:0040AB7B                 mov     esi, [esp+97Ch+arg_C]
.text:0040AB82                 mov     ebx, [ecx]
.text:0040AB84                 sub     [esp+97Ch+var_950], ebx
.text:0040AB88                 mov     edi, [esp+97Ch+var_950]
.text:0040AB8C                 mov     [esi+8], edi
.text:0040AB8F                 jmp     loc_40AA16
.text:0040AB94 ; ---------------------------------------------------------------------------
.text:0040AB94
.text:0040AB94 loc_40AB94:                             ; CODE XREF: sub_40A600+479↑j
.text:0040AB94                 mov     edi, [esp+97Ch+Block]
.text:0040AB9B                 mov     ebp, 8
.text:0040ABA0
.text:0040ABA0 loc_40ABA0:                             ; CODE XREF: sub_40A600+15BC↓j
.text:0040ABA0                                         ; sub_40A600+32C3↓j
.text:0040ABA0                 mov     [esp+97Ch+Size], edi ; Block
.text:0040ABA3
.text:0040ABA3 loc_40ABA3:                             ; CODE XREF: sub_40A600+EDF↓j
.text:0040ABA3                                         ; sub_40A600+1C4C↓j ...
.text:0040ABA3                 call    free
.text:0040ABA8                 jmp     loc_40AA16
.text:0040ABAD ; ---------------------------------------------------------------------------
.text:0040ABAD
.text:0040ABAD loc_40ABAD:                             ; CODE XREF: sub_40A600+35F↑j
.text:0040ABAD                 mov     [esp+97Ch+var_978], edx
.text:0040ABB1                 mov     eax, [esp+97Ch+arg_8]
.text:0040ABB8                 mov     ebp, [esp+97Ch+arg_0]
.text:0040ABBF                 mov     [esp+97Ch+var_974], eax
.text:0040ABC3                 mov     [esp+97Ch+Size], ebp
.text:0040ABC6                 call    sub_4074B0
.text:0040ABCB                 test    al, al
.text:0040ABCD                 jnz     loc_40A965
.text:0040ABD3
.text:0040ABD3 def_40A76F:                             ; CODE XREF: sub_40A600+169↑j
.text:0040ABD3                                         ; sub_40A600+16F↑j ...
.text:0040ABD3                 mov     edx, [esp+97Ch+var_8FC] ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040ABDA                 test    edx, edx
.text:0040ABDC                 jz      short loc_40ABF9
.text:0040ABDE                 mov     eax, [esp+97Ch+var_8FC]
.text:0040ABE5                 movzx   edx, byte ptr [eax]
.text:0040ABE8                 movzx   ebx, dl
.text:0040ABEB                 lea     ebp, [ebx+eax+1]
.text:0040ABEF                 cmp     ebp, [esp+97Ch+var_950]
.text:0040ABF3                 jz      loc_40ADDF
.text:0040ABF9
.text:0040ABF9 loc_40ABF9:                             ; CODE XREF: sub_40A600+5DC↑j
.text:0040ABF9                                         ; sub_40A600+7E1↓j ...
.text:0040ABF9                 mov     edi, [esp+97Ch+var_950]
.text:0040ABFD                 mov     ebp, [esp+97Ch+arg_C]
.text:0040AC04                 mov     ecx, [esp+97Ch+var_950]
.text:0040AC08                 mov     [esp+97Ch+var_900], edi
.text:0040AC0C                 mov     edi, [ebp+0]
.text:0040AC0F                 mov     edx, [ebp+4]
.text:0040AC12                 sub     ecx, edi
.text:0040AC14                 mov     ebx, edi
.text:0040AC16                 add     ecx, 2
.text:0040AC19                 cmp     ecx, edx
.text:0040AC1B                 jbe     loc_40ACD8
.text:0040AC21
.text:0040AC21 loc_40AC21:                             ; CODE XREF: sub_40A600+6D2↓j
.text:0040AC21                 cmp     edx, 10000h
.text:0040AC27                 mov     ebp, 0Fh
.text:0040AC2C                 jz      loc_40AA16
.text:0040AC32                 lea     esi, [edx+edx]
.text:0040AC35                 mov     edx, [esp+97Ch+arg_C]
.text:0040AC3C                 cmp     esi, 10000h
.text:0040AC42                 mov     [edx+4], esi
.text:0040AC45                 jbe     short loc_40AC4E
.text:0040AC47                 mov     dword ptr [edx+4], 10000h
.text:0040AC4E
.text:0040AC4E loc_40AC4E:                             ; CODE XREF: sub_40A600+645↑j
.text:0040AC4E                 mov     eax, [esp+97Ch+arg_C]
.text:0040AC55                 mov     ebp, [eax+4]
.text:0040AC58                 mov     [esp+97Ch+Size], edi ; Block
.text:0040AC5B                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040AC5F                 mov     ebp, 0Ch
.text:0040AC64                 call    realloc
.text:0040AC69                 mov     edx, [esp+97Ch+arg_C]
.text:0040AC70                 test    eax, eax
.text:0040AC72                 mov     [edx], eax
.text:0040AC74                 jz      loc_40AA16
.text:0040AC7A                 cmp     ebx, eax
.text:0040AC7C                 jz      short loc_40ACB2
.text:0040AC7E                 sub     eax, ebx
.text:0040AC80                 mov     ebx, [esp+97Ch+var_908]
.text:0040AC84                 add     [esp+97Ch+var_950], eax
.text:0040AC88                 add     [esp+97Ch+var_904], eax
.text:0040AC8C                 test    ebx, ebx
.text:0040AC8E                 jz      short loc_40AC94
.text:0040AC90                 add     [esp+97Ch+var_908], eax
.text:0040AC94
.text:0040AC94 loc_40AC94:                             ; CODE XREF: sub_40A600+68E↑j
.text:0040AC94                 mov     ecx, [esp+97Ch+var_900]
.text:0040AC98                 test    ecx, ecx
.text:0040AC9A                 jz      short loc_40ACA0
.text:0040AC9C                 add     [esp+97Ch+var_900], eax
.text:0040ACA0
.text:0040ACA0 loc_40ACA0:                             ; CODE XREF: sub_40A600+69A↑j
.text:0040ACA0                 mov     edi, [esp+97Ch+var_8FC]
.text:0040ACA7                 test    edi, edi
.text:0040ACA9                 jz      short loc_40ACB2
.text:0040ACAB                 add     [esp+97Ch+var_8FC], eax
.text:0040ACB2
.text:0040ACB2 loc_40ACB2:                             ; CODE XREF: sub_40A600+67C↑j
.text:0040ACB2                                         ; sub_40A600+6A9↑j
.text:0040ACB2                 mov     edx, [esp+97Ch+arg_C]
.text:0040ACB9                 mov     ebp, [esp+97Ch+arg_C]
.text:0040ACC0                 mov     esi, [esp+97Ch+var_950]
.text:0040ACC4                 mov     edi, [edx]
.text:0040ACC6                 mov     edx, [ebp+4]
.text:0040ACC9                 sub     esi, edi
.text:0040ACCB                 add     esi, 2
.text:0040ACCE                 mov     ebx, edi
.text:0040ACD0                 cmp     esi, edx
.text:0040ACD2                 ja      loc_40AC21
.text:0040ACD8
.text:0040ACD8 loc_40ACD8:                             ; CODE XREF: sub_40A600+61B↑j
.text:0040ACD8                 mov     eax, [esp+97Ch+var_950]
.text:0040ACDC                 mov     byte ptr [eax], 2
.text:0040ACDF                 inc     eax
.text:0040ACE0                 mov     byte ptr [eax], 0
.text:0040ACE3                 mov     ecx, [esp+97Ch+arg_C]
.text:0040ACEA                 inc     eax
.text:0040ACEB                 mov     [esp+97Ch+var_950], eax
.text:0040ACEF                 dec     eax
.text:0040ACF0                 mov     edi, [ecx]
.text:0040ACF2                 mov     [esp+97Ch+var_8FC], eax
.text:0040ACF9                 mov     edx, [ecx+4]
.text:0040ACFC                 mov     eax, [esp+97Ch+var_950]
.text:0040AD00                 mov     ebx, edi
.text:0040AD02                 sub     eax, edi
.text:0040AD04
.text:0040AD04 loc_40AD04:                             ; CODE XREF: sub_40A600+7B9↓j
.text:0040AD04                 inc     eax
.text:0040AD05                 cmp     eax, edx
.text:0040AD07                 jbe     loc_40ADBE
.text:0040AD0D                 cmp     edx, 10000h
.text:0040AD13                 mov     ebp, 0Fh
.text:0040AD18                 jz      loc_40AA16
.text:0040AD1E                 lea     esi, [edx+edx]
.text:0040AD21                 mov     edx, [esp+97Ch+arg_C]
.text:0040AD28                 cmp     esi, 10000h
.text:0040AD2E                 mov     [edx+4], esi
.text:0040AD31                 jbe     short loc_40AD3A
.text:0040AD33                 mov     dword ptr [edx+4], 10000h
.text:0040AD3A
.text:0040AD3A loc_40AD3A:                             ; CODE XREF: sub_40A600+731↑j
.text:0040AD3A                 mov     edx, [esp+97Ch+arg_C]
.text:0040AD41                 mov     ebp, [edx+4]
.text:0040AD44                 mov     [esp+97Ch+Size], edi ; Block
.text:0040AD47                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040AD4B                 mov     ebp, 0Ch
.text:0040AD50                 call    realloc
.text:0040AD55                 mov     edi, [esp+97Ch+arg_C]
.text:0040AD5C                 test    eax, eax
.text:0040AD5E                 mov     [edi], eax
.text:0040AD60                 jz      loc_40AA16
.text:0040AD66                 cmp     ebx, eax
.text:0040AD68                 jz      short loc_40AD9E
.text:0040AD6A                 mov     ecx, [esp+97Ch+var_908]
.text:0040AD6E                 sub     eax, ebx
.text:0040AD70                 add     [esp+97Ch+var_950], eax
.text:0040AD74                 add     [esp+97Ch+var_904], eax
.text:0040AD78                 test    ecx, ecx
.text:0040AD7A                 jz      short loc_40AD80
.text:0040AD7C                 add     [esp+97Ch+var_908], eax
.text:0040AD80
.text:0040AD80 loc_40AD80:                             ; CODE XREF: sub_40A600+77A↑j
.text:0040AD80                 mov     ebx, [esp+97Ch+var_900]
.text:0040AD84                 test    ebx, ebx
.text:0040AD86                 jz      short loc_40AD8C
.text:0040AD88                 add     [esp+97Ch+var_900], eax
.text:0040AD8C
.text:0040AD8C loc_40AD8C:                             ; CODE XREF: sub_40A600+786↑j
.text:0040AD8C                 mov     esi, [esp+97Ch+var_8FC]
.text:0040AD93                 test    esi, esi
.text:0040AD95                 jz      short loc_40AD9E
.text:0040AD97                 add     [esp+97Ch+var_8FC], eax
.text:0040AD9E
.text:0040AD9E loc_40AD9E:                             ; CODE XREF: sub_40A600+768↑j
.text:0040AD9E                                         ; sub_40A600+795↑j ...
.text:0040AD9E                 mov     edx, [esp+97Ch+arg_C]
.text:0040ADA5                 mov     ebp, [esp+97Ch+arg_C]
.text:0040ADAC                 mov     eax, [esp+97Ch+var_950]
.text:0040ADB0                 mov     edi, [edx]
.text:0040ADB2                 mov     edx, [ebp+4]
.text:0040ADB5                 sub     eax, edi
.text:0040ADB7                 mov     ebx, edi
.text:0040ADB9                 jmp     loc_40AD04
.text:0040ADBE ; ---------------------------------------------------------------------------
.text:0040ADBE
.text:0040ADBE loc_40ADBE:                             ; CODE XREF: sub_40A600+707↑j
.text:0040ADBE                 movzx   ecx, [esp+97Ch+var_8EC]
.text:0040ADC6                 mov     edi, [esp+97Ch+var_950]
.text:0040ADCA                 mov     [edi], cl
.text:0040ADCC                 mov     eax, [esp+97Ch+var_8FC]
.text:0040ADD3                 inc     edi
.text:0040ADD4                 mov     [esp+97Ch+var_950], edi
.text:0040ADD8                 inc     byte ptr [eax]
.text:0040ADDA                 jmp     loc_40AA2F
.text:0040ADDF ; ---------------------------------------------------------------------------
.text:0040ADDF
.text:0040ADDF loc_40ADDF:                             ; CODE XREF: sub_40A600+5F3↑j
.text:0040ADDF                 inc     dl
.text:0040ADE1                 jz      loc_40ABF9
.text:0040ADE7                 mov     edi, [esp+97Ch+var_8D0]
.text:0040ADEE                 mov     edx, edi
.text:0040ADF0                 movzx   eax, byte ptr [edi]
.text:0040ADF3                 cmp     al, 2Ah ; '*'
.text:0040ADF5                 jz      loc_40ABF9
.text:0040ADFB                 cmp     al, 5Eh ; '^'
.text:0040ADFD                 jz      loc_40ABF9
.text:0040AE03                 test    byte ptr [esp+97Ch+arg_8], 2
.text:0040AE0B                 jz      short loc_40AE54
.text:0040AE0D                 cmp     al, 5Ch ; '\'
.text:0040AE0F                 jz      short loc_40AE50
.text:0040AE11
.text:0040AE11 loc_40AE11:                             ; CODE XREF: sub_40A600+85E↓j
.text:0040AE11                 test    [esp+97Ch+arg_8], 200h
.text:0040AE1C                 jz      short loc_40AD9E
.text:0040AE1E                 test    [esp+97Ch+arg_8], 1000h
.text:0040AE29                 jz      short loc_40AE40
.text:0040AE2B                 cmp     byte ptr [edx], 7Bh ; '{'
.text:0040AE2E
.text:0040AE2E loc_40AE2E:                             ; CODE XREF: sub_40A600+84D↓j
.text:0040AE2E                 jnz     loc_40AD9E
.text:0040AE34                 jmp     loc_40ABF9
.text:0040AE34 ; ---------------------------------------------------------------------------
.text:0040AE39                 align 10h
.text:0040AE40
.text:0040AE40 loc_40AE40:                             ; CODE XREF: sub_40A600+829↑j
.text:0040AE40                 cmp     byte ptr [edx], 5Ch ; '\'
.text:0040AE43                 jnz     loc_40AD9E
.text:0040AE49                 cmp     byte ptr [edx+1], 7Bh ; '{'
.text:0040AE4D                 jmp     short loc_40AE2E
.text:0040AE4D ; ---------------------------------------------------------------------------
.text:0040AE4F                 align 10h
.text:0040AE50
.text:0040AE50 loc_40AE50:                             ; CODE XREF: sub_40A600+80F↑j
.text:0040AE50                 movzx   eax, byte ptr [edi+1]
.text:0040AE54
.text:0040AE54 loc_40AE54:                             ; CODE XREF: sub_40A600+80B↑j
.text:0040AE54                 cmp     al, 2Bh ; '+'
.text:0040AE56                 jz      loc_40ABF9
.text:0040AE5C                 cmp     al, 3Fh ; '?'
.text:0040AE5E                 jnz     short loc_40AE11
.text:0040AE60                 jmp     loc_40ABF9
.text:0040AE65 ; ---------------------------------------------------------------------------
.text:0040AE65
.text:0040AE65 loc_40AE65:                             ; CODE XREF: sub_40A600+16F↑j
.text:0040AE65                                         ; DATA XREF: sub_40A600:jpt_40A76F↑o
.text:0040AE65                 test    [esp+97Ch+arg_8], 800h ; jumptable 0040A76F case 10
.text:0040AE70
.text:0040AE70 loc_40AE70:                             ; CODE XREF: sub_40A600+32B2↓j
.text:0040AE70                 jz      def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040AE76
.text:0040AE76 loc_40AE76:                             ; CODE XREF: sub_40A600+3279↓j
.text:0040AE76                 test    [esp+97Ch+arg_8], 400h
.text:0040AE81                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040AE87
.text:0040AE87 loc_40AE87:                             ; CODE XREF: sub_40A600+8FF↓j
.text:0040AE87                                         ; sub_40A600+92C↓j ...
.text:0040AE87                 mov     eax, [esp+97Ch+arg_C]
.text:0040AE8E                 mov     ebp, [esp+97Ch+var_950]
.text:0040AE92                 mov     edi, [eax]
.text:0040AE94                 mov     edx, [eax+4]
.text:0040AE97                 sub     ebp, edi
.text:0040AE99                 add     ebp, 3
.text:0040AE9C                 cmp     ebp, edx
.text:0040AE9E                 jbe     loc_40AF3E
.text:0040AEA4                 cmp     edx, 10000h
.text:0040AEAA                 mov     ebp, 0Fh
.text:0040AEAF                 jz      loc_40AA16
.text:0040AEB5                 lea     ebx, [edx+edx]
.text:0040AEB8                 mov     edx, [esp+97Ch+arg_C]
.text:0040AEBF                 cmp     ebx, 10000h
.text:0040AEC5                 mov     [edx+4], ebx
.text:0040AEC8                 jbe     short loc_40AED1
.text:0040AECA                 mov     dword ptr [edx+4], 10000h
.text:0040AED1
.text:0040AED1 loc_40AED1:                             ; CODE XREF: sub_40A600+8C8↑j
.text:0040AED1                 mov     eax, [esp+97Ch+arg_C]
.text:0040AED8                 mov     ebp, [eax+4]
.text:0040AEDB                 mov     [esp+97Ch+Size], edi ; Block
.text:0040AEDE                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040AEE2                 mov     ebp, 0Ch
.text:0040AEE7                 call    realloc
.text:0040AEEC                 mov     esi, [esp+97Ch+arg_C]
.text:0040AEF3                 test    eax, eax
.text:0040AEF5                 mov     [esi], eax
.text:0040AEF7                 jz      loc_40AA16
.text:0040AEFD                 cmp     edi, eax
.text:0040AEFF                 jz      short loc_40AE87
.text:0040AF01                 mov     ecx, [esp+97Ch+var_908]
.text:0040AF05                 sub     eax, edi
.text:0040AF07                 add     [esp+97Ch+var_950], eax
.text:0040AF0B                 add     [esp+97Ch+var_904], eax
.text:0040AF0F                 test    ecx, ecx
.text:0040AF11                 jz      short loc_40AF17
.text:0040AF13                 add     [esp+97Ch+var_908], eax
.text:0040AF17
.text:0040AF17 loc_40AF17:                             ; CODE XREF: sub_40A600+911↑j
.text:0040AF17                 mov     edx, [esp+97Ch+var_900]
.text:0040AF1B                 test    edx, edx
.text:0040AF1D                 jz      short loc_40AF23
.text:0040AF1F                 add     [esp+97Ch+var_900], eax
.text:0040AF23
.text:0040AF23 loc_40AF23:                             ; CODE XREF: sub_40A600+91D↑j
.text:0040AF23                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040AF2A                 test    ebx, ebx
.text:0040AF2C                 jz      loc_40AE87
.text:0040AF32                 add     [esp+97Ch+var_8FC], eax
.text:0040AF39                 jmp     loc_40AE87
.text:0040AF3E ; ---------------------------------------------------------------------------
.text:0040AF3E
.text:0040AF3E loc_40AF3E:                             ; CODE XREF: sub_40A600+89E↑j
.text:0040AF3E                 mov     [esp+97Ch+Size], 0Fh
.text:0040AF45                 mov     edi, [esp+97Ch+var_950]
.text:0040AF49                 mov     ebp, [esp+97Ch+var_904]
.text:0040AF4D                 mov     edx, [esp+97Ch+var_904]
.text:0040AF51                 mov     ebx, edi
.text:0040AF53                 sub     ebx, ebp
.text:0040AF55                 mov     [esp+97Ch+var_970], edi
.text:0040AF59                 add     ebx, 3
.text:0040AF5C                 add     edi, 3
.text:0040AF5F                 mov     [esp+97Ch+var_974], ebx
.text:0040AF63                 mov     [esp+97Ch+var_978], edx
.text:0040AF67                 call    sub_407420
.text:0040AF6C                 mov     [esp+97Ch+var_950], edi
.text:0040AF70                 mov     esi, [esp+97Ch+var_908]
.text:0040AF74                 xor     ecx, ecx
.text:0040AF76                 mov     [esp+97Ch+var_8FC], ecx
.text:0040AF7D                 test    esi, esi
.text:0040AF7F                 jz      short loc_40AFA4
.text:0040AF81                 mov     [esp+97Ch+Size], 0Eh
.text:0040AF88                 mov     eax, [esp+97Ch+var_908]
.text:0040AF8C                 mov     esi, edi
.text:0040AF8E                 mov     edi, [esp+97Ch+var_908]
.text:0040AF92                 sub     esi, eax
.text:0040AF94                 sub     esi, 3
.text:0040AF97                 mov     [esp+97Ch+var_974], esi
.text:0040AF9B                 mov     [esp+97Ch+var_978], edi
.text:0040AF9F                 call    sub_4073D0
.text:0040AFA4
.text:0040AFA4 loc_40AFA4:                             ; CODE XREF: sub_40A600+97F↑j
.text:0040AFA4                 mov     esi, [esp+97Ch+arg_C]
.text:0040AFAB                 mov     edx, [esp+97Ch+var_950]
.text:0040AFAF                 mov     ecx, [esp+97Ch+arg_C]
.text:0040AFB6                 mov     edi, [esi]
.text:0040AFB8                 mov     ebp, edx
.text:0040AFBA                 mov     [esp+97Ch+var_908], edx
.text:0040AFBE                 mov     edx, [ecx+4]
.text:0040AFC1                 sub     ebp, edi
.text:0040AFC3                 add     ebp, 3
.text:0040AFC6                 mov     ebx, edi
.text:0040AFC8                 cmp     ebp, edx
.text:0040AFCA                 jbe     loc_40B083
.text:0040AFD0
.text:0040AFD0 loc_40AFD0:                             ; CODE XREF: sub_40A600+A7D↓j
.text:0040AFD0                 cmp     edx, 10000h
.text:0040AFD6                 mov     ebp, 0Fh
.text:0040AFDB                 jz      loc_40AA16
.text:0040AFE1                 lea     ebp, [edx+edx]
.text:0040AFE4                 mov     edx, [esp+97Ch+arg_C]
.text:0040AFEB                 cmp     ebp, 10000h
.text:0040AFF1                 mov     [edx+4], ebp
.text:0040AFF4                 jbe     short loc_40AFFD
.text:0040AFF6                 mov     dword ptr [edx+4], 10000h
.text:0040AFFD
.text:0040AFFD loc_40AFFD:                             ; CODE XREF: sub_40A600+9F4↑j
.text:0040AFFD                 mov     eax, [esp+97Ch+arg_C]
.text:0040B004                 mov     ebp, 0Ch
.text:0040B009                 mov     edx, [eax+4]
.text:0040B00C                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B00F                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040B013                 call    realloc
.text:0040B018                 mov     edi, [esp+97Ch+arg_C]
.text:0040B01F                 test    eax, eax
.text:0040B021                 mov     [edi], eax
.text:0040B023                 jz      loc_40AA16
.text:0040B029                 cmp     ebx, eax
.text:0040B02B                 jz      short loc_40B05D
.text:0040B02D                 sub     eax, ebx
.text:0040B02F                 mov     ebx, [esp+97Ch+var_908]
.text:0040B033                 add     [esp+97Ch+var_950], eax
.text:0040B037                 test    ebx, ebx
.text:0040B039                 jz      short loc_40B03F
.text:0040B03B                 add     [esp+97Ch+var_908], eax
.text:0040B03F
.text:0040B03F loc_40B03F:                             ; CODE XREF: sub_40A600+A39↑j
.text:0040B03F                 mov     ecx, [esp+97Ch+var_900]
.text:0040B043                 test    ecx, ecx
.text:0040B045                 jz      short loc_40B04B
.text:0040B047                 add     [esp+97Ch+var_900], eax
.text:0040B04B
.text:0040B04B loc_40B04B:                             ; CODE XREF: sub_40A600+A45↑j
.text:0040B04B                 mov     ebp, [esp+97Ch+var_8FC]
.text:0040B052                 test    ebp, ebp
.text:0040B054                 jz      short loc_40B05D
.text:0040B056                 add     [esp+97Ch+var_8FC], eax
.text:0040B05D
.text:0040B05D loc_40B05D:                             ; CODE XREF: sub_40A600+A2B↑j
.text:0040B05D                                         ; sub_40A600+A54↑j
.text:0040B05D                 mov     edx, [esp+97Ch+arg_C]
.text:0040B064                 mov     eax, [esp+97Ch+arg_C]
.text:0040B06B                 mov     esi, [esp+97Ch+var_950]
.text:0040B06F                 mov     edi, [edx]
.text:0040B071                 mov     edx, [eax+4]
.text:0040B074                 sub     esi, edi
.text:0040B076                 add     esi, 3
.text:0040B079                 mov     ebx, edi
.text:0040B07B                 cmp     esi, edx
.text:0040B07D                 ja      loc_40AFD0
.text:0040B083
.text:0040B083 loc_40B083:                             ; CODE XREF: sub_40A600+9CA↑j
.text:0040B083                 add     [esp+97Ch+var_950], 3
.text:0040B088                 mov     [esp+97Ch+var_900], 0
.text:0040B090                 mov     edi, [esp+97Ch+var_950]
.text:0040B094                 mov     [esp+97Ch+var_904], edi
.text:0040B098                 jmp     loc_40AA2F
.text:0040B09D ; ---------------------------------------------------------------------------
.text:0040B09D
.text:0040B09D loc_40B09D:                             ; CODE XREF: sub_40A600+16F↑j
.text:0040B09D                                         ; DATA XREF: sub_40A600:jpt_40A76F↑o
.text:0040B09D                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 0040A76F case 36
.text:0040B0A4                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040B0AB                 jz      short loc_40B0BB
.text:0040B0AD                 test    byte ptr [esp+97Ch+arg_8], 8
.text:0040B0B5                 jz      loc_40B181
.text:0040B0BB
.text:0040B0BB loc_40B0BB:                             ; CODE XREF: sub_40A600+AAB↑j
.text:0040B0BB                                         ; sub_40A600+B31↓j ...
.text:0040B0BB                 mov     ecx, [esp+97Ch+arg_C]
.text:0040B0C2                 mov     eax, [esp+97Ch+arg_C]
.text:0040B0C9                 mov     ebx, [esp+97Ch+var_950]
.text:0040B0CD                 mov     edi, [ecx]
.text:0040B0CF                 mov     edx, [eax+4]
.text:0040B0D2                 sub     ebx, edi
.text:0040B0D4                 inc     ebx
.text:0040B0D5                 cmp     ebx, edx
.text:0040B0D7                 jbe     loc_40B170
.text:0040B0DD                 cmp     edx, 10000h
.text:0040B0E3                 mov     ebp, 0Fh
.text:0040B0E8                 jz      loc_40AA16
.text:0040B0EE                 mov     ebx, [esp+97Ch+arg_C]
.text:0040B0F5                 lea     ecx, [edx+edx]
.text:0040B0F8                 cmp     ecx, 10000h
.text:0040B0FE                 mov     [ebx+4], ecx
.text:0040B101                 jbe     short loc_40B10A
.text:0040B103                 mov     dword ptr [ebx+4], 10000h
.text:0040B10A
.text:0040B10A loc_40B10A:                             ; CODE XREF: sub_40A600+B01↑j
.text:0040B10A                 mov     ebx, [esp+97Ch+arg_C]
.text:0040B111                 mov     ebp, [ebx+4]
.text:0040B114                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B117                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040B11B                 mov     ebp, 0Ch
.text:0040B120                 call    realloc
.text:0040B125                 mov     [ebx], eax
.text:0040B127                 test    eax, eax
.text:0040B129                 jz      loc_40AA16
.text:0040B12F                 cmp     edi, eax
.text:0040B131                 jz      short loc_40B0BB
.text:0040B133                 sub     eax, edi
.text:0040B135                 mov     edi, [esp+97Ch+var_908]
.text:0040B139                 add     [esp+97Ch+var_950], eax
.text:0040B13D                 add     [esp+97Ch+var_904], eax
.text:0040B141                 test    edi, edi
.text:0040B143                 jz      short loc_40B149
.text:0040B145                 add     [esp+97Ch+var_908], eax
.text:0040B149
.text:0040B149 loc_40B149:                             ; CODE XREF: sub_40A600+B43↑j
.text:0040B149                 mov     edx, [esp+97Ch+var_900]
.text:0040B14D                 test    edx, edx
.text:0040B14F                 jz      short loc_40B155
.text:0040B151                 add     [esp+97Ch+var_900], eax
.text:0040B155
.text:0040B155 loc_40B155:                             ; CODE XREF: sub_40A600+B4F↑j
.text:0040B155                 mov     esi, [esp+97Ch+var_8FC]
.text:0040B15C                 test    esi, esi
.text:0040B15E                 jz      loc_40B0BB
.text:0040B164                 add     [esp+97Ch+var_8FC], eax
.text:0040B16B                 jmp     loc_40B0BB
.text:0040B170 ; ---------------------------------------------------------------------------
.text:0040B170
.text:0040B170 loc_40B170:                             ; CODE XREF: sub_40A600+AD7↑j
.text:0040B170                 mov     ebx, [esp+97Ch+var_950]
.text:0040B174                 mov     byte ptr [ebx], 0Ah
.text:0040B177
.text:0040B177 loc_40B177:                             ; CODE XREF: sub_40A600+1059↓j
.text:0040B177                 inc     ebx
.text:0040B178                 mov     [esp+97Ch+var_950], ebx
.text:0040B17C                 jmp     loc_40AA2F
.text:0040B181 ; ---------------------------------------------------------------------------
.text:0040B181
.text:0040B181 loc_40B181:                             ; CODE XREF: sub_40A600+AB5↑j
.text:0040B181                 mov     [esp+97Ch+Size], eax
.text:0040B184                 mov     esi, [esp+97Ch+arg_8]
.text:0040B18B                 mov     edx, [esp+97Ch+var_8F4]
.text:0040B192                 mov     [esp+97Ch+var_974], esi
.text:0040B196                 mov     [esp+97Ch+var_978], edx
.text:0040B19A                 call    sub_407510
.text:0040B19F                 test    al, al
.text:0040B1A1                 jnz     loc_40B0BB
.text:0040B1A7                 jmp     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040B1AC ; ---------------------------------------------------------------------------
.text:0040B1AC
.text:0040B1AC loc_40B1AC:                             ; CODE XREF: sub_40A600+16F↑j
.text:0040B1AC                                         ; DATA XREF: sub_40A600:jpt_40A76F↑o
.text:0040B1AC                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040A76F case 40
.text:0040B1B7                 jz      def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040B1BD
.text:0040B1BD loc_40B1BD:                             ; CODE XREF: sub_40A600+2417↓j
.text:0040B1BD                 inc     [esp+97Ch+var_90C]
.text:0040B1C1                 mov     eax, [esp+97Ch+arg_C]
.text:0040B1C8                 inc     dword ptr [eax+18h]
.text:0040B1CB                 mov     ecx, [esp+97Ch+var_24]
.text:0040B1D2                 cmp     ecx, [esp+97Ch+var_28]
.text:0040B1D9                 jz      loc_40B356
.text:0040B1DF
.text:0040B1DF loc_40B1DF:                             ; CODE XREF: sub_40A600+D91↓j
.text:0040B1DF                 mov     edx, [esp+97Ch+arg_C]
.text:0040B1E6                 lea     edi, [ecx+ecx*4]
.text:0040B1E9                 xor     eax, eax
.text:0040B1EB                 lea     ebp, ds:0[edi*4]
.text:0040B1F2                 mov     ebx, [esp+97Ch+Block]
.text:0040B1F9                 mov     edi, [edx]
.text:0040B1FB                 sub     [esp+97Ch+var_904], edi
.text:0040B1FF                 mov     edx, edi
.text:0040B201                 mov     esi, [esp+97Ch+var_904]
.text:0040B205                 mov     [ebx+ebp], esi
.text:0040B208                 mov     esi, [esp+97Ch+var_908]
.text:0040B20C                 test    esi, esi
.text:0040B20E                 jz      short loc_40B217
.text:0040B210                 mov     eax, [esp+97Ch+var_908]
.text:0040B214                 sub     eax, edi
.text:0040B216                 inc     eax
.text:0040B217
.text:0040B217 loc_40B217:                             ; CODE XREF: sub_40A600+C0E↑j
.text:0040B217                 mov     [ebx+ebp+4], eax
.text:0040B21B                 lea     esi, [ecx+ecx*4]
.text:0040B21E                 mov     ebp, [esp+97Ch+var_90C]
.text:0040B222                 mov     ecx, [esp+97Ch+var_950]
.text:0040B226                 shl     esi, 2
.text:0040B229                 mov     [ebx+esi+10h], ebp
.text:0040B22D                 sub     ecx, edx
.text:0040B22F                 cmp     ebp, 0FFh
.text:0040B235                 mov     [ebx+esi+0Ch], ecx
.text:0040B239                 ja      loc_40B329
.text:0040B23F                 mov     edx, [esp+97Ch+var_24]
.text:0040B246                 lea     esi, [ecx+2]
.text:0040B249                 mov     eax, [esp+97Ch+arg_C]
.text:0040B250                 lea     ebp, [edx+edx*4]
.text:0040B253                 lea     edx, [ecx+3]
.text:0040B256                 mov     [ebx+ebp*4+8], esi
.text:0040B25A                 mov     ecx, [eax+4]
.text:0040B25D                 cmp     edx, ecx
.text:0040B25F                 jbe     loc_40B311
.text:0040B265
.text:0040B265 loc_40B265:                             ; CODE XREF: sub_40A600+D0B↓j
.text:0040B265                 cmp     ecx, 10000h
.text:0040B26B                 mov     ebp, 0Fh
.text:0040B270                 jz      loc_40AA16
.text:0040B276                 mov     esi, [esp+97Ch+arg_C]
.text:0040B27D                 lea     ebx, [ecx+ecx]
.text:0040B280                 cmp     ebx, 10000h
.text:0040B286                 mov     [esi+4], ebx
.text:0040B289                 jbe     short loc_40B292
.text:0040B28B                 mov     dword ptr [esi+4], 10000h
.text:0040B292
.text:0040B292 loc_40B292:                             ; CODE XREF: sub_40A600+C89↑j
.text:0040B292                 mov     eax, [esp+97Ch+arg_C]
.text:0040B299                 mov     ecx, [eax+4]
.text:0040B29C                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B29F                 mov     [esp+97Ch+var_978], ecx ; Size
.text:0040B2A3                 call    realloc
.text:0040B2A8                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B2AF                 test    eax, eax
.text:0040B2B1                 mov     [ebp+0], eax
.text:0040B2B4                 mov     ebp, 0Ch
.text:0040B2B9                 jz      loc_40AA16
.text:0040B2BF                 cmp     edi, eax
.text:0040B2C1                 jz      short loc_40B2F3
.text:0040B2C3                 sub     eax, edi
.text:0040B2C5                 mov     edi, [esp+97Ch+var_908]
.text:0040B2C9                 add     [esp+97Ch+var_950], eax
.text:0040B2CD                 test    edi, edi
.text:0040B2CF                 jz      short loc_40B2D5
.text:0040B2D1                 add     [esp+97Ch+var_908], eax
.text:0040B2D5
.text:0040B2D5 loc_40B2D5:                             ; CODE XREF: sub_40A600+CCF↑j
.text:0040B2D5                 mov     esi, [esp+97Ch+var_900]
.text:0040B2D9                 test    esi, esi
.text:0040B2DB                 jz      short loc_40B2E1
.text:0040B2DD                 add     [esp+97Ch+var_900], eax
.text:0040B2E1
.text:0040B2E1 loc_40B2E1:                             ; CODE XREF: sub_40A600+CDB↑j
.text:0040B2E1                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040B2E8                 test    ebx, ebx
.text:0040B2EA                 jz      short loc_40B2F3
.text:0040B2EC                 add     [esp+97Ch+var_8FC], eax
.text:0040B2F3
.text:0040B2F3 loc_40B2F3:                             ; CODE XREF: sub_40A600+CC1↑j
.text:0040B2F3                                         ; sub_40A600+CEA↑j
.text:0040B2F3                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B2FA                 mov     edx, [esp+97Ch+var_950]
.text:0040B2FE                 mov     edi, [ebp+0]
.text:0040B301                 mov     ecx, [ebp+4]
.text:0040B304                 sub     edx, edi
.text:0040B306                 add     edx, 3
.text:0040B309                 cmp     edx, ecx
.text:0040B30B                 ja      loc_40B265
.text:0040B311
.text:0040B311 loc_40B311:                             ; CODE XREF: sub_40A600+C5F↑j
.text:0040B311                 mov     ecx, [esp+97Ch+var_950]
.text:0040B315                 mov     byte ptr [ecx], 6
.text:0040B318                 inc     ecx
.text:0040B319                 movzx   ebx, byte ptr [esp+97Ch+var_90C]
.text:0040B31E                 mov     [ecx], bl
.text:0040B320                 inc     ecx
.text:0040B321                 mov     byte ptr [ecx], 0
.text:0040B324                 inc     ecx
.text:0040B325                 mov     [esp+97Ch+var_950], ecx
.text:0040B329
.text:0040B329 loc_40B329:                             ; CODE XREF: sub_40A600+C39↑j
.text:0040B329                 inc     [esp+97Ch+var_24]
.text:0040B330                 mov     eax, [esp+97Ch+var_950]
.text:0040B334                 mov     [esp+97Ch+var_908], 0
.text:0040B33C                 mov     [esp+97Ch+var_900], 0
.text:0040B344                 mov     [esp+97Ch+var_904], eax
.text:0040B348
.text:0040B348 loc_40B348:                             ; CODE XREF: sub_40A600+2F9A↓j
.text:0040B348                                         ; sub_40A600+3107↓j ...
.text:0040B348                 xor     eax, eax
.text:0040B34A                 mov     [esp+97Ch+var_8FC], eax
.text:0040B351                 jmp     loc_40AA2F
.text:0040B356 ; ---------------------------------------------------------------------------
.text:0040B356
.text:0040B356 loc_40B356:                             ; CODE XREF: sub_40A600+BD9↑j
.text:0040B356                 mov     ebp, [esp+97Ch+Block]
.text:0040B35D                 lea     edi, [ecx+ecx*4]
.text:0040B360                 shl     edi, 3
.text:0040B363                 mov     [esp+97Ch+var_978], edi ; Size
.text:0040B367                 mov     [esp+97Ch+Size], ebp ; Block
.text:0040B36A                 mov     ebp, 0Ch
.text:0040B36F                 call    realloc
.text:0040B374                 mov     [esp+97Ch+Block], eax
.text:0040B37B                 test    eax, eax
.text:0040B37D                 jz      loc_40AA16
.text:0040B383                 shl     [esp+97Ch+var_28], 1
.text:0040B38A                 mov     ecx, [esp+97Ch+var_24]
.text:0040B391                 jmp     loc_40B1DF
.text:0040B396 ; ---------------------------------------------------------------------------
.text:0040B396
.text:0040B396 loc_40B396:                             ; CODE XREF: sub_40A600+16F↑j
.text:0040B396                                         ; DATA XREF: sub_40A600:jpt_40A76F↑o
.text:0040B396                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040A76F case 41
.text:0040B3A1                 jz      def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040B3A7
.text:0040B3A7 loc_40B3A7:                             ; CODE XREF: sub_40A600+2537↓j
.text:0040B3A7                 mov     esi, [esp+97Ch+var_908]
.text:0040B3AB                 test    esi, esi
.text:0040B3AD                 jz      loc_40B4B4
.text:0040B3B3                 mov     eax, [esp+97Ch+arg_C]
.text:0040B3BA                 mov     ebp, [esp+97Ch+var_950]
.text:0040B3BE                 mov     edi, [eax]
.text:0040B3C0                 mov     edx, [eax+4]
.text:0040B3C3                 sub     ebp, edi
.text:0040B3C5                 mov     ebx, edi
.text:0040B3C7                 inc     ebp
.text:0040B3C8                 cmp     ebp, edx
.text:0040B3CA                 jbe     loc_40B485
.text:0040B3D0
.text:0040B3D0 loc_40B3D0:                             ; CODE XREF: sub_40A600+E7F↓j
.text:0040B3D0                 cmp     edx, 10000h
.text:0040B3D6                 mov     ebp, 0Fh
.text:0040B3DB                 jz      loc_40AA16
.text:0040B3E1                 mov     esi, [esp+97Ch+arg_C]
.text:0040B3E8                 lea     ecx, [edx+edx]
.text:0040B3EB                 cmp     ecx, 10000h
.text:0040B3F1                 mov     [esi+4], ecx
.text:0040B3F4                 jbe     short loc_40B3FD
.text:0040B3F6                 mov     dword ptr [esi+4], 10000h
.text:0040B3FD
.text:0040B3FD loc_40B3FD:                             ; CODE XREF: sub_40A600+DF4↑j
.text:0040B3FD                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B404                 mov     esi, [ebp+4]
.text:0040B407                 mov     ebp, 0Ch
.text:0040B40C                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B40F                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040B413                 call    realloc
.text:0040B418                 mov     edx, [esp+97Ch+arg_C]
.text:0040B41F                 test    eax, eax
.text:0040B421                 mov     [edx], eax
.text:0040B423                 jz      loc_40AA16
.text:0040B429                 cmp     ebx, eax
.text:0040B42B                 jz      short loc_40B461
.text:0040B42D                 sub     eax, ebx
.text:0040B42F                 mov     ebx, [esp+97Ch+var_908]
.text:0040B433                 add     [esp+97Ch+var_950], eax
.text:0040B437                 add     [esp+97Ch+var_904], eax
.text:0040B43B                 test    ebx, ebx
.text:0040B43D                 jz      short loc_40B443
.text:0040B43F                 add     [esp+97Ch+var_908], eax
.text:0040B443
.text:0040B443 loc_40B443:                             ; CODE XREF: sub_40A600+E3D↑j
.text:0040B443                 mov     edi, [esp+97Ch+var_900]
.text:0040B447                 test    edi, edi
.text:0040B449                 jz      short loc_40B44F
.text:0040B44B                 add     [esp+97Ch+var_900], eax
.text:0040B44F
.text:0040B44F loc_40B44F:                             ; CODE XREF: sub_40A600+E49↑j
.text:0040B44F                 mov     edx, [esp+97Ch+var_8FC]
.text:0040B456                 test    edx, edx
.text:0040B458                 jz      short loc_40B461
.text:0040B45A                 add     [esp+97Ch+var_8FC], eax
.text:0040B461
.text:0040B461 loc_40B461:                             ; CODE XREF: sub_40A600+E2B↑j
.text:0040B461                                         ; sub_40A600+E58↑j
.text:0040B461                 mov     esi, [esp+97Ch+arg_C]
.text:0040B468                 mov     eax, [esp+97Ch+arg_C]
.text:0040B46F                 mov     ecx, [esp+97Ch+var_950]
.text:0040B473                 mov     edi, [esi]
.text:0040B475                 mov     edx, [eax+4]
.text:0040B478                 sub     ecx, edi
.text:0040B47A                 inc     ecx
.text:0040B47B                 mov     ebx, edi
.text:0040B47D                 cmp     ecx, edx
.text:0040B47F                 ja      loc_40B3D0
.text:0040B485
.text:0040B485 loc_40B485:                             ; CODE XREF: sub_40A600+DCA↑j
.text:0040B485                 mov     edx, [esp+97Ch+var_950]
.text:0040B489                 mov     byte ptr [edx], 14h
.text:0040B48C                 mov     edi, [esp+97Ch+var_908]
.text:0040B490                 inc     edx
.text:0040B491                 mov     [esp+97Ch+var_950], edx
.text:0040B495                 mov     ebx, edx
.text:0040B497                 mov     ebp, [esp+97Ch+var_908]
.text:0040B49B                 mov     [esp+97Ch+Size], 0Eh
.text:0040B4A2                 sub     ebx, edi
.text:0040B4A4                 sub     ebx, 4
.text:0040B4A7                 mov     [esp+97Ch+var_974], ebx
.text:0040B4AB                 mov     [esp+97Ch+var_978], ebp
.text:0040B4AF                 call    sub_4073D0
.text:0040B4B4
.text:0040B4B4 loc_40B4B4:                             ; CODE XREF: sub_40A600+DAD↑j
.text:0040B4B4                 mov     eax, [esp+97Ch+var_24]
.text:0040B4BB                 test    eax, eax
.text:0040B4BD                 jnz     short loc_40B4E4
.text:0040B4BF                 test    [esp+97Ch+arg_8], 20000h
.text:0040B4CA                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040B4D0
.text:0040B4D0 loc_40B4D0:                             ; CODE XREF: sub_40A600+254E↓j
.text:0040B4D0                 mov     ecx, [esp+97Ch+Block]
.text:0040B4D7                 mov     ebp, 10h
.text:0040B4DC
.text:0040B4DC loc_40B4DC:                             ; CODE XREF: sub_40A600+15EA↓j
.text:0040B4DC                                         ; sub_40A600+21AF↓j
.text:0040B4DC                 mov     [esp+97Ch+Size], ecx
.text:0040B4DF                 jmp     loc_40ABA3
.text:0040B4E4 ; ---------------------------------------------------------------------------
.text:0040B4E4
.text:0040B4E4 loc_40B4E4:                             ; CODE XREF: sub_40A600+EBD↑j
.text:0040B4E4                 dec     eax
.text:0040B4E5                 mov     edx, [esp+97Ch+Block]
.text:0040B4EC                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B4F3                 mov     [esp+97Ch+var_24], eax
.text:0040B4FA                 lea     esi, [eax+eax*4]
.text:0040B4FD                 shl     esi, 2
.text:0040B500                 mov     ebx, [ebp+0]
.text:0040B503                 mov     edi, [edx+esi]
.text:0040B506                 mov     ebp, [edx+esi+4]
.text:0040B50A                 mov     ecx, ebx
.text:0040B50C                 add     edi, ebx
.text:0040B50E                 test    ebp, ebp
.text:0040B510                 mov     [esp+97Ch+var_904], edi
.text:0040B514                 lea     edi, [ebp+ebx-1]
.text:0040B518                 setz    bl
.text:0040B51B                 movzx   esi, bl
.text:0040B51E                 mov     ebx, [esp+97Ch+var_24]
.text:0040B525                 dec     esi
.text:0040B526                 and     edi, esi
.text:0040B528                 lea     eax, [ebx+ebx*4]
.text:0040B52B                 mov     [esp+97Ch+var_908], edi
.text:0040B52F                 shl     eax, 2
.text:0040B532                 xor     esi, esi
.text:0040B534                 mov     [esp+97Ch+var_8FC], esi
.text:0040B53B                 mov     ebx, [edx+eax+10h]
.text:0040B53F                 mov     ebp, [edx+eax+0Ch]
.text:0040B543                 mov     [esp+97Ch+var_930], ebx
.text:0040B547                 add     ebp, ecx
.text:0040B549                 cmp     ebx, 0FFh
.text:0040B54F                 mov     [esp+97Ch+var_900], ebp
.text:0040B553                 ja      loc_40AA2F
.text:0040B559                 mov     esi, [edx+eax+8]
.text:0040B55D                 movzx   edx, byte ptr [esp+97Ch+var_90C]
.text:0040B562                 add     ecx, esi
.text:0040B564                 sub     dl, bl
.text:0040B566                 mov     [ecx], dl
.text:0040B568                 mov     eax, [esp+97Ch+arg_C]
.text:0040B56F                 mov     ecx, [esp+97Ch+var_950]
.text:0040B573                 mov     edi, [eax]
.text:0040B575                 mov     edx, [eax+4]
.text:0040B578                 sub     ecx, edi
.text:0040B57A                 add     ecx, 3
.text:0040B57D                 mov     ebx, edi
.text:0040B57F                 cmp     ecx, edx
.text:0040B581                 jbe     loc_40B63E
.text:0040B587
.text:0040B587 loc_40B587:                             ; CODE XREF: sub_40A600+1038↓j
.text:0040B587                 cmp     edx, 10000h
.text:0040B58D                 mov     ebp, 0Fh
.text:0040B592                 jz      loc_40AA16
.text:0040B598                 lea     ebp, [edx+edx]
.text:0040B59B                 mov     edx, [esp+97Ch+arg_C]
.text:0040B5A2                 cmp     ebp, 10000h
.text:0040B5A8                 mov     [edx+4], ebp
.text:0040B5AB                 jbe     short loc_40B5B4
.text:0040B5AD                 mov     dword ptr [edx+4], 10000h
.text:0040B5B4
.text:0040B5B4 loc_40B5B4:                             ; CODE XREF: sub_40A600+FAB↑j
.text:0040B5B4                 mov     eax, [esp+97Ch+arg_C]
.text:0040B5BB                 mov     ebp, 0Ch
.text:0040B5C0                 mov     edx, [eax+4]
.text:0040B5C3                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B5C6                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040B5CA                 call    realloc
.text:0040B5CF                 mov     edi, [esp+97Ch+arg_C]
.text:0040B5D6                 test    eax, eax
.text:0040B5D8                 mov     [edi], eax
.text:0040B5DA                 jz      loc_40AA16
.text:0040B5E0                 cmp     ebx, eax
.text:0040B5E2                 jz      short loc_40B618
.text:0040B5E4                 sub     eax, ebx
.text:0040B5E6                 mov     ebx, [esp+97Ch+var_908]
.text:0040B5EA                 add     [esp+97Ch+var_950], eax
.text:0040B5EE                 add     [esp+97Ch+var_904], eax
.text:0040B5F2                 test    ebx, ebx
.text:0040B5F4                 jz      short loc_40B5FA
.text:0040B5F6                 add     [esp+97Ch+var_908], eax
.text:0040B5FA
.text:0040B5FA loc_40B5FA:                             ; CODE XREF: sub_40A600+FF4↑j
.text:0040B5FA                 mov     ecx, [esp+97Ch+var_900]
.text:0040B5FE                 test    ecx, ecx
.text:0040B600                 jz      short loc_40B606
.text:0040B602                 add     [esp+97Ch+var_900], eax
.text:0040B606
.text:0040B606 loc_40B606:                             ; CODE XREF: sub_40A600+1000↑j
.text:0040B606                 mov     esi, [esp+97Ch+var_8FC]
.text:0040B60D                 test    esi, esi
.text:0040B60F                 jz      short loc_40B618
.text:0040B611                 add     [esp+97Ch+var_8FC], eax
.text:0040B618
.text:0040B618 loc_40B618:                             ; CODE XREF: sub_40A600+FE2↑j
.text:0040B618                                         ; sub_40A600+100F↑j
.text:0040B618                 mov     edx, [esp+97Ch+arg_C]
.text:0040B61F                 mov     eax, [esp+97Ch+arg_C]
.text:0040B626                 mov     ebp, [esp+97Ch+var_950]
.text:0040B62A                 mov     edi, [edx]
.text:0040B62C                 mov     edx, [eax+4]
.text:0040B62F                 sub     ebp, edi
.text:0040B631                 add     ebp, 3
.text:0040B634                 mov     ebx, edi
.text:0040B636                 cmp     ebp, edx
.text:0040B638                 ja      loc_40B587
.text:0040B63E
.text:0040B63E loc_40B63E:                             ; CODE XREF: sub_40A600+F81↑j
.text:0040B63E                 mov     ebx, [esp+97Ch+var_950]
.text:0040B642                 mov     byte ptr [ebx], 7
.text:0040B645                 inc     ebx
.text:0040B646                 movzx   edx, byte ptr [esp+97Ch+var_930]
.text:0040B64B                 mov     [ebx], dl
.text:0040B64D                 inc     ebx
.text:0040B64E                 movzx   ecx, byte ptr [esp+97Ch+var_90C]
.text:0040B653                 sub     cl, byte ptr [esp+97Ch+var_930]
.text:0040B657                 mov     [ebx], cl
.text:0040B659                 jmp     loc_40B177
.text:0040B659 ; ---------------------------------------------------------------------------
.text:0040B65E                 align 10h
.text:0040B660
.text:0040B660 loc_40B660:                             ; CODE XREF: sub_40A600+16F↑j
.text:0040B660                                         ; sub_40A600+16DF↓j ...
.text:0040B660                 mov     ebp, [esp+97Ch+var_900] ; jumptable 0040A76F case 42
.text:0040B664                 test    ebp, ebp
.text:0040B666                 jz      loc_40BBC1
.text:0040B66C
.text:0040B66C loc_40B66C:                             ; CODE XREF: sub_40A600+15D3↓j
.text:0040B66C                 mov     [esp+97Ch+var_91C], 0
.text:0040B671                 xor     ecx, ecx
.text:0040B673                 mov     [esp+97Ch+var_91D], 0
.text:0040B678
.text:0040B678 loc_40B678:                             ; CODE XREF: sub_40A600+10ED↓j
.text:0040B678                                         ; sub_40A600+1105↓j ...
.text:0040B678                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:0040B680                 movsx   eax, [esp+97Ch+var_91D]
.text:0040B685                 jz      short loc_40B68A
.text:0040B687                 or      eax, 1
.text:0040B68A
.text:0040B68A loc_40B68A:                             ; CODE XREF: sub_40A600+1085↑j
.text:0040B68A                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:0040B692                 mov     [esp+97Ch+var_91D], al
.text:0040B696                 movsx   eax, cl
.text:0040B699                 jz      short loc_40B69E
.text:0040B69B                 or      eax, 1
.text:0040B69E
.text:0040B69E loc_40B69E:                             ; CODE XREF: sub_40A600+1099↑j
.text:0040B69E                 mov     edx, [esp+97Ch+var_8D0]
.text:0040B6A5                 mov     cl, al
.text:0040B6A7                 cmp     edx, [esp+97Ch+var_8F4]
.text:0040B6AE                 jz      short loc_40B720
.text:0040B6B0                 movzx   eax, byte ptr [edx]
.text:0040B6B3                 lea     edi, [edx+1]
.text:0040B6B6                 mov     esi, [esp+97Ch+var_8F8]
.text:0040B6BD                 mov     [esp+97Ch+var_8D0], edi
.text:0040B6C4                 test    esi, esi
.text:0040B6C6                 mov     [esp+97Ch+var_8EC], al
.text:0040B6CD                 jz      short loc_40B6E5
.text:0040B6CF                 mov     esi, [esp+97Ch+var_8F8]
.text:0040B6D6                 movzx   ebp, al
.text:0040B6D9                 movzx   eax, byte ptr [ebp+esi+0]
.text:0040B6DE                 mov     [esp+97Ch+var_8EC], al
.text:0040B6E5
.text:0040B6E5 loc_40B6E5:                             ; CODE XREF: sub_40A600+10CD↑j
.text:0040B6E5                 cmp     [esp+97Ch+var_8EC], 2Ah ; '*'
.text:0040B6ED                 jz      short loc_40B678
.text:0040B6EF                 test    byte ptr [esp+97Ch+arg_8], 2
.text:0040B6F7                 jnz     loc_40BB50
.text:0040B6FD                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:0040B705                 jz      loc_40B678
.text:0040B70B                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:0040B713                 jz      loc_40B678
.text:0040B719
.text:0040B719 loc_40B719:                             ; CODE XREF: sub_40A600+1558↓j
.text:0040B719                 dec     [esp+97Ch+var_8D0]
.text:0040B720
.text:0040B720 loc_40B720:                             ; CODE XREF: sub_40A600+10AE↑j
.text:0040B720                                         ; sub_40A600+15AB↓j
.text:0040B720                 mov     edx, [esp+97Ch+var_900]
.text:0040B724                 test    edx, edx
.text:0040B726                 jz      loc_40AA2F
.text:0040B72C                 test    cl, cl
.text:0040B72E                 jz      loc_40B933
.text:0040B734                 mov     ebx, [esp+97Ch+arg_C]
.text:0040B73B                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B742                 mov     esi, [esp+97Ch+var_950]
.text:0040B746                 mov     edi, [ebx]
.text:0040B748                 mov     edx, [ebp+4]
.text:0040B74B                 sub     esi, edi
.text:0040B74D                 add     esi, 3
.text:0040B750                 mov     ebx, edi
.text:0040B752                 cmp     esi, edx
.text:0040B754                 jbe     loc_40B811
.text:0040B75A
.text:0040B75A loc_40B75A:                             ; CODE XREF: sub_40A600+120B↓j
.text:0040B75A                 cmp     edx, 10000h
.text:0040B760                 mov     ebp, 0Fh
.text:0040B765                 jz      loc_40AA16
.text:0040B76B                 mov     esi, [esp+97Ch+arg_C]
.text:0040B772                 lea     ecx, [edx+edx]
.text:0040B775                 cmp     ecx, 10000h
.text:0040B77B                 mov     [esi+4], ecx
.text:0040B77E                 jbe     short loc_40B787
.text:0040B780                 mov     dword ptr [esi+4], 10000h
.text:0040B787
.text:0040B787 loc_40B787:                             ; CODE XREF: sub_40A600+117E↑j
.text:0040B787                 mov     eax, [esp+97Ch+arg_C]
.text:0040B78E                 mov     ebp, 0Ch
.text:0040B793                 mov     esi, [eax+4]
.text:0040B796                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B799                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040B79D                 call    realloc
.text:0040B7A2                 mov     edi, [esp+97Ch+arg_C]
.text:0040B7A9                 test    eax, eax
.text:0040B7AB                 mov     [edi], eax
.text:0040B7AD                 jz      loc_40AA16
.text:0040B7B3                 cmp     ebx, eax
.text:0040B7B5                 jz      short loc_40B7EB
.text:0040B7B7                 mov     edx, [esp+97Ch+var_908]
.text:0040B7BB                 sub     eax, ebx
.text:0040B7BD                 add     [esp+97Ch+var_950], eax
.text:0040B7C1                 add     [esp+97Ch+var_904], eax
.text:0040B7C5                 test    edx, edx
.text:0040B7C7                 jz      short loc_40B7CD
.text:0040B7C9                 add     [esp+97Ch+var_908], eax
.text:0040B7CD
.text:0040B7CD loc_40B7CD:                             ; CODE XREF: sub_40A600+11C7↑j
.text:0040B7CD                 mov     ebp, [esp+97Ch+var_900]
.text:0040B7D1                 test    ebp, ebp
.text:0040B7D3                 jz      short loc_40B7D9
.text:0040B7D5                 add     [esp+97Ch+var_900], eax
.text:0040B7D9
.text:0040B7D9 loc_40B7D9:                             ; CODE XREF: sub_40A600+11D3↑j
.text:0040B7D9                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040B7E0                 test    ebx, ebx
.text:0040B7E2                 jz      short loc_40B7EB
.text:0040B7E4                 add     [esp+97Ch+var_8FC], eax
.text:0040B7EB
.text:0040B7EB loc_40B7EB:                             ; CODE XREF: sub_40A600+11B5↑j
.text:0040B7EB                                         ; sub_40A600+11E2↑j
.text:0040B7EB                 mov     esi, [esp+97Ch+arg_C]
.text:0040B7F2                 mov     eax, [esp+97Ch+arg_C]
.text:0040B7F9                 mov     ecx, [esp+97Ch+var_950]
.text:0040B7FD                 mov     edi, [esi]
.text:0040B7FF                 mov     edx, [eax+4]
.text:0040B802                 sub     ecx, edi
.text:0040B804                 add     ecx, 3
.text:0040B807                 mov     ebx, edi
.text:0040B809                 cmp     ecx, edx
.text:0040B80B                 ja      loc_40B75A
.text:0040B811
.text:0040B811 loc_40B811:                             ; CODE XREF: sub_40A600+1154↑j
.text:0040B811                 mov     edi, [esp+97Ch+var_8F8]
.text:0040B818                 test    edi, edi
.text:0040B81A                 jz      loc_40BB3A
.text:0040B820                 mov     edi, [esp+97Ch+var_8D0]
.text:0040B827                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040B82E                 movzx   ebp, byte ptr [edi-2]
.text:0040B832                 movsx   edx, byte ptr [ebp+ebx+0]
.text:0040B837
.text:0040B837 loc_40B837:                             ; CODE XREF: sub_40A600+1545↓j
.text:0040B837                 mov     ecx, [esp+97Ch+var_8F8]
.text:0040B83E                 test    ecx, ecx
.text:0040B840                 jz      loc_40BB32
.text:0040B846                 mov     eax, [esp+97Ch+var_8F8]
.text:0040B84D                 movsx   esi, byte ptr [eax+2Eh]
.text:0040B851                 cmp     edx, esi
.text:0040B853
.text:0040B853 loc_40B853:                             ; CODE XREF: sub_40A600+1535↓j
.text:0040B853                 jz      loc_40BA9B
.text:0040B859
.text:0040B859 loc_40B859:                             ; CODE XREF: sub_40A600+14A0↓j
.text:0040B859                                         ; sub_40A600+14AD↓j ...
.text:0040B859                 mov     [esp+97Ch+Size], 12h
.text:0040B860                 mov     ebx, [esp+97Ch+var_900]
.text:0040B864                 mov     ecx, [esp+97Ch+var_950]
.text:0040B868                 mov     edi, [esp+97Ch+var_950]
.text:0040B86C                 sub     ebx, ecx
.text:0040B86E                 sub     ebx, 6
.text:0040B871                 mov     [esp+97Ch+var_974], ebx
.text:0040B875                 mov     [esp+97Ch+var_978], edi
.text:0040B879                 call    sub_4073D0
.text:0040B87E
.text:0040B87E loc_40B87E:                             ; CODE XREF: sub_40A600+1523↓j
.text:0040B87E                 add     [esp+97Ch+var_950], 3
.text:0040B883                 mov     esi, [esp+97Ch+arg_C]
.text:0040B88A                 mov     eax, [esp+97Ch+var_950]
.text:0040B88E                 mov     edi, [esi]
.text:0040B890                 mov     edx, [esi+4]
.text:0040B893
.text:0040B893 loc_40B893:                             ; CODE XREF: sub_40A600+134A↓j
.text:0040B893                 sub     eax, edi
.text:0040B895                 mov     ebx, edi
.text:0040B897                 add     eax, 3
.text:0040B89A                 cmp     eax, edx
.text:0040B89C                 jbe     loc_40B94F
.text:0040B8A2                 cmp     edx, 10000h
.text:0040B8A8                 mov     ebp, 0Fh
.text:0040B8AD                 jz      loc_40AA16
.text:0040B8B3                 mov     esi, [esp+97Ch+arg_C]
.text:0040B8BA                 lea     ebp, [edx+edx]
.text:0040B8BD                 cmp     ebp, 10000h
.text:0040B8C3                 mov     [esi+4], ebp
.text:0040B8C6                 jbe     short loc_40B8CF
.text:0040B8C8                 mov     dword ptr [esi+4], 10000h
.text:0040B8CF
.text:0040B8CF loc_40B8CF:                             ; CODE XREF: sub_40A600+12C6↑j
.text:0040B8CF                 mov     eax, [esp+97Ch+arg_C]
.text:0040B8D6                 mov     ebp, 0Ch
.text:0040B8DB                 mov     ecx, [eax+4]
.text:0040B8DE                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B8E1                 mov     [esp+97Ch+var_978], ecx ; Size
.text:0040B8E5                 call    realloc
.text:0040B8EA                 mov     edx, [esp+97Ch+arg_C]
.text:0040B8F1                 test    eax, eax
.text:0040B8F3                 mov     [edx], eax
.text:0040B8F5                 jz      loc_40AA16
.text:0040B8FB                 cmp     ebx, eax
.text:0040B8FD                 jz      short loc_40B933
.text:0040B8FF                 mov     edi, [esp+97Ch+var_908]
.text:0040B903                 sub     eax, ebx
.text:0040B905                 add     [esp+97Ch+var_950], eax
.text:0040B909                 add     [esp+97Ch+var_904], eax
.text:0040B90D                 test    edi, edi
.text:0040B90F                 jz      short loc_40B915
.text:0040B911                 add     [esp+97Ch+var_908], eax
.text:0040B915
.text:0040B915 loc_40B915:                             ; CODE XREF: sub_40A600+130F↑j
.text:0040B915                 mov     ebx, [esp+97Ch+var_900]
.text:0040B919                 test    ebx, ebx
.text:0040B91B                 jz      short loc_40B921
.text:0040B91D                 add     [esp+97Ch+var_900], eax
.text:0040B921
.text:0040B921 loc_40B921:                             ; CODE XREF: sub_40A600+131B↑j
.text:0040B921                 mov     esi, [esp+97Ch+var_8FC]
.text:0040B928                 test    esi, esi
.text:0040B92A                 jz      short loc_40B933
.text:0040B92C                 add     [esp+97Ch+var_8FC], eax
.text:0040B933
.text:0040B933 loc_40B933:                             ; CODE XREF: sub_40A600+112E↑j
.text:0040B933                                         ; sub_40A600+12FD↑j ...
.text:0040B933                 mov     edx, [esp+97Ch+arg_C]
.text:0040B93A                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B941                 mov     eax, [esp+97Ch+var_950]
.text:0040B945                 mov     edi, [edx]
.text:0040B947                 mov     edx, [ebp+4]
.text:0040B94A                 jmp     loc_40B893
.text:0040B94F ; ---------------------------------------------------------------------------
.text:0040B94F
.text:0040B94F loc_40B94F:                             ; CODE XREF: sub_40A600+129C↑j
.text:0040B94F                 movzx   edx, [esp+97Ch+var_91C]
.text:0040B954                 mov     ebx, [esp+97Ch+var_950]
.text:0040B958                 mov     eax, [esp+97Ch+var_900]
.text:0040B95C                 mov     edi, [esp+97Ch+var_900]
.text:0040B960                 mov     esi, ebx
.text:0040B962                 and     edx, 1
.text:0040B965                 mov     [esp+97Ch+var_970], ebx
.text:0040B969                 sub     esi, eax
.text:0040B96B                 add     edx, 0Fh
.text:0040B96E                 mov     [esp+97Ch+var_974], esi
.text:0040B972                 add     ebx, 3
.text:0040B975                 mov     [esp+97Ch+var_978], edi
.text:0040B979                 mov     [esp+97Ch+Size], edx
.text:0040B97C                 call    sub_407420
.text:0040B981                 mov     [esp+97Ch+var_950], ebx
.text:0040B985                 xor     ecx, ecx
.text:0040B987                 cmp     [esp+97Ch+var_91D], 0
.text:0040B98C                 mov     [esp+97Ch+var_8FC], ecx
.text:0040B993                 jnz     loc_40AA2F
.text:0040B999                 mov     ecx, [esp+97Ch+arg_C]
.text:0040B9A0                 mov     ebp, [esp+97Ch+var_950]
.text:0040B9A4                 mov     edi, [ecx]
.text:0040B9A6                 mov     edx, [ecx+4]
.text:0040B9A9                 sub     ebp, edi
.text:0040B9AB                 mov     ebx, edi
.text:0040B9AD                 add     ebp, 3
.text:0040B9B0                 cmp     ebp, edx
.text:0040B9B2                 jbe     loc_40BA6F
.text:0040B9B8
.text:0040B9B8 loc_40B9B8:                             ; CODE XREF: sub_40A600+1469↓j
.text:0040B9B8                 cmp     edx, 10000h
.text:0040B9BE                 mov     ebp, 0Fh
.text:0040B9C3                 jz      loc_40AA16
.text:0040B9C9                 mov     esi, [esp+97Ch+arg_C]
.text:0040B9D0                 lea     ebp, [edx+edx]
.text:0040B9D3                 cmp     ebp, 10000h
.text:0040B9D9                 mov     [esi+4], ebp
.text:0040B9DC                 jbe     short loc_40B9E5
.text:0040B9DE                 mov     dword ptr [esi+4], 10000h
.text:0040B9E5
.text:0040B9E5 loc_40B9E5:                             ; CODE XREF: sub_40A600+13DC↑j
.text:0040B9E5                 mov     eax, [esp+97Ch+arg_C]
.text:0040B9EC                 mov     ebp, 0Ch
.text:0040B9F1                 mov     esi, [eax+4]
.text:0040B9F4                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B9F7                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040B9FB                 call    realloc
.text:0040BA00                 mov     edx, [esp+97Ch+arg_C]
.text:0040BA07                 test    eax, eax
.text:0040BA09                 mov     [edx], eax
.text:0040BA0B                 jz      loc_40AA16
.text:0040BA11                 cmp     ebx, eax
.text:0040BA13                 jz      short loc_40BA49
.text:0040BA15                 mov     edi, [esp+97Ch+var_908]
.text:0040BA19                 sub     eax, ebx
.text:0040BA1B                 add     [esp+97Ch+var_950], eax
.text:0040BA1F                 add     [esp+97Ch+var_904], eax
.text:0040BA23                 test    edi, edi
.text:0040BA25                 jz      short loc_40BA2B
.text:0040BA27                 add     [esp+97Ch+var_908], eax
.text:0040BA2B
.text:0040BA2B loc_40BA2B:                             ; CODE XREF: sub_40A600+1425↑j
.text:0040BA2B                 mov     ebx, [esp+97Ch+var_900]
.text:0040BA2F                 test    ebx, ebx
.text:0040BA31                 jz      short loc_40BA37
.text:0040BA33                 add     [esp+97Ch+var_900], eax
.text:0040BA37
.text:0040BA37 loc_40BA37:                             ; CODE XREF: sub_40A600+1431↑j
.text:0040BA37                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040BA3E                 test    ecx, ecx
.text:0040BA40                 jz      short loc_40BA49
.text:0040BA42                 add     [esp+97Ch+var_8FC], eax
.text:0040BA49
.text:0040BA49 loc_40BA49:                             ; CODE XREF: sub_40A600+1413↑j
.text:0040BA49                                         ; sub_40A600+1440↑j
.text:0040BA49                 mov     edx, [esp+97Ch+arg_C]
.text:0040BA50                 mov     eax, [esp+97Ch+arg_C]
.text:0040BA57                 mov     ebp, [esp+97Ch+var_950]
.text:0040BA5B                 mov     edi, [edx]
.text:0040BA5D                 mov     edx, [eax+4]
.text:0040BA60                 sub     ebp, edi
.text:0040BA62                 add     ebp, 3
.text:0040BA65                 mov     ebx, edi
.text:0040BA67                 cmp     ebp, edx
.text:0040BA69                 ja      loc_40B9B8
.text:0040BA6F
.text:0040BA6F loc_40BA6F:                             ; CODE XREF: sub_40A600+13B2↑j
.text:0040BA6F                 mov     [esp+97Ch+var_974], 3
.text:0040BA77                 mov     edi, [esp+97Ch+var_950]
.text:0040BA7B                 mov     esi, [esp+97Ch+var_900]
.text:0040BA7F                 mov     [esp+97Ch+Size], 13h
.text:0040BA86                 mov     [esp+97Ch+var_970], edi
.text:0040BA8A                 add     edi, 3
.text:0040BA8D                 mov     [esp+97Ch+var_978], esi
.text:0040BA91                 call    sub_407420
.text:0040BA96                 jmp     loc_40AA2B
.text:0040BA9B ; ---------------------------------------------------------------------------
.text:0040BA9B
.text:0040BA9B loc_40BA9B:                             ; CODE XREF: sub_40A600:loc_40B853↑j
.text:0040BA9B                 cmp     [esp+97Ch+var_91D], 0
.text:0040BAA0                 jz      loc_40B859
.text:0040BAA6                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BAAD                 jnb     loc_40B859
.text:0040BAB3                 mov     edx, [esp+97Ch+var_8F8]
.text:0040BABA                 test    edx, edx
.text:0040BABC                 jz      short loc_40BB2D
.text:0040BABE                 movzx   ebp, byte ptr [edi]
.text:0040BAC1                 mov     edi, [esp+97Ch+var_8F8]
.text:0040BAC8                 movsx   edx, byte ptr [ebp+edi+0]
.text:0040BACD
.text:0040BACD loc_40BACD:                             ; CODE XREF: sub_40A600+1530↓j
.text:0040BACD                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040BAD4                 test    ebx, ebx
.text:0040BAD6                 jz      short loc_40BB28
.text:0040BAD8                 mov     esi, [esp+97Ch+var_8F8]
.text:0040BADF                 movsx   ecx, byte ptr [esi+0Ah]
.text:0040BAE3                 cmp     edx, ecx
.text:0040BAE5
.text:0040BAE5 loc_40BAE5:                             ; CODE XREF: sub_40A600+152B↓j
.text:0040BAE5                 jnz     loc_40B859
.text:0040BAEB                 test    byte ptr [esp+97Ch+arg_8], 40h
.text:0040BAF3                 jnz     loc_40B859
.text:0040BAF9                 mov     [esp+97Ch+Size], 0Dh
.text:0040BB00                 mov     ebp, [esp+97Ch+var_900]
.text:0040BB04                 mov     eax, [esp+97Ch+var_950]
.text:0040BB08                 mov     edx, [esp+97Ch+var_950]
.text:0040BB0C                 sub     ebp, eax
.text:0040BB0E                 sub     ebp, 3
.text:0040BB11                 mov     [esp+97Ch+var_974], ebp
.text:0040BB15                 mov     [esp+97Ch+var_978], edx
.text:0040BB19                 call    sub_4073D0
.text:0040BB1E                 mov     [esp+97Ch+var_91C], 1
.text:0040BB23                 jmp     loc_40B87E
.text:0040BB28 ; ---------------------------------------------------------------------------
.text:0040BB28
.text:0040BB28 loc_40BB28:                             ; CODE XREF: sub_40A600+14D6↑j
.text:0040BB28                 cmp     edx, 0Ah
.text:0040BB2B                 jmp     short loc_40BAE5
.text:0040BB2D ; ---------------------------------------------------------------------------
.text:0040BB2D
.text:0040BB2D loc_40BB2D:                             ; CODE XREF: sub_40A600+14BC↑j
.text:0040BB2D                 movsx   edx, byte ptr [edi]
.text:0040BB30                 jmp     short loc_40BACD
.text:0040BB32 ; ---------------------------------------------------------------------------
.text:0040BB32
.text:0040BB32 loc_40BB32:                             ; CODE XREF: sub_40A600+1240↑j
.text:0040BB32                 cmp     edx, 2Eh ; '.'
.text:0040BB35                 jmp     loc_40B853
.text:0040BB3A ; ---------------------------------------------------------------------------
.text:0040BB3A
.text:0040BB3A loc_40BB3A:                             ; CODE XREF: sub_40A600+121A↑j
.text:0040BB3A                 mov     edi, [esp+97Ch+var_8D0]
.text:0040BB41                 movsx   edx, byte ptr [edi-2]
.text:0040BB45                 jmp     loc_40B837
.text:0040BB45 ; ---------------------------------------------------------------------------
.text:0040BB4A                 align 10h
.text:0040BB50
.text:0040BB50 loc_40BB50:                             ; CODE XREF: sub_40A600+10F7↑j
.text:0040BB50                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:0040BB58                 jnz     loc_40B719
.text:0040BB5E                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BB65                 jz      short loc_40BBB0
.text:0040BB67                 movzx   ebx, byte ptr [edx+1]
.text:0040BB6B                 lea     ebp, [edx+2]
.text:0040BB6E                 mov     eax, [esp+97Ch+var_8F8]
.text:0040BB75                 mov     [esp+97Ch+var_8D0], ebp
.text:0040BB7C                 test    eax, eax
.text:0040BB7E                 jz      short loc_40BB8E
.text:0040BB80                 mov     eax, [esp+97Ch+var_8F8]
.text:0040BB87                 movzx   edi, bl
.text:0040BB8A                 movzx   ebx, byte ptr [edi+eax]
.text:0040BB8E
.text:0040BB8E loc_40BB8E:                             ; CODE XREF: sub_40A600+157E↑j
.text:0040BB8E                 cmp     bl, 2Bh ; '+'
.text:0040BB91                 jz      short loc_40BB98
.text:0040BB93                 cmp     bl, 3Fh ; '?'
.text:0040BB96                 jnz     short loc_40BBA4
.text:0040BB98
.text:0040BB98 loc_40BB98:                             ; CODE XREF: sub_40A600+1591↑j
.text:0040BB98                 mov     [esp+97Ch+var_8EC], bl
.text:0040BB9F                 jmp     loc_40B678
.text:0040BBA4 ; ---------------------------------------------------------------------------
.text:0040BBA4
.text:0040BBA4 loc_40BBA4:                             ; CODE XREF: sub_40A600+1596↑j
.text:0040BBA4                 mov     [esp+97Ch+var_8D0], edx
.text:0040BBAB                 jmp     loc_40B720
.text:0040BBB0 ; ---------------------------------------------------------------------------
.text:0040BBB0
.text:0040BBB0 loc_40BBB0:                             ; CODE XREF: sub_40A600+1565↑j
.text:0040BBB0                                         ; sub_40A600+21FF↓j ...
.text:0040BBB0                 mov     edi, [esp+97Ch+Block]
.text:0040BBB7                 mov     ebp, 5
.text:0040BBBC                 jmp     loc_40ABA0
.text:0040BBC1 ; ---------------------------------------------------------------------------
.text:0040BBC1
.text:0040BBC1 loc_40BBC1:                             ; CODE XREF: sub_40A600+1066↑j
.text:0040BBC1                 test    byte ptr [esp+97Ch+arg_8], 20h
.text:0040BBC9                 jnz     short loc_40BBDE
.text:0040BBCB                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:0040BBD3                 jnz     loc_40B66C
.text:0040BBD9                 jmp     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040BBDE ; ---------------------------------------------------------------------------
.text:0040BBDE
.text:0040BBDE loc_40BBDE:                             ; CODE XREF: sub_40A600+15C9↑j
.text:0040BBDE                                         ; sub_40A600+31A3↓j
.text:0040BBDE                 mov     ecx, [esp+97Ch+Block]
.text:0040BBE5                 mov     ebp, 0Dh
.text:0040BBEA                 jmp     loc_40B4DC
.text:0040BBEA ; ---------------------------------------------------------------------------
.text:0040BBEF                 align 10h
.text:0040BBF0
.text:0040BBF0 loc_40BBF0:                             ; CODE XREF: sub_40A600+16F↑j
.text:0040BBF0                                         ; DATA XREF: sub_40A600:jpt_40A76F↑o
.text:0040BBF0                 mov     eax, [esp+97Ch+arg_C] ; jumptable 0040A76F case 46
.text:0040BBF7                 mov     ecx, [esp+97Ch+var_950]
.text:0040BBFB                 mov     edi, [eax]
.text:0040BBFD                 mov     [esp+97Ch+var_900], ecx
.text:0040BC01                 mov     ebp, ecx
.text:0040BC03                 mov     edx, [eax+4]
.text:0040BC06                 sub     ebp, edi
.text:0040BC08                 mov     ebx, edi
.text:0040BC0A                 inc     ebp
.text:0040BC0B                 cmp     ebp, edx
.text:0040BC0D                 jbe     loc_40BCC8
.text:0040BC13
.text:0040BC13 loc_40BC13:                             ; CODE XREF: sub_40A600+16C2↓j
.text:0040BC13                 cmp     edx, 10000h
.text:0040BC19                 mov     ebp, 0Fh
.text:0040BC1E                 jz      loc_40AA16
.text:0040BC24                 mov     esi, [esp+97Ch+arg_C]
.text:0040BC2B                 lea     ebp, [edx+edx]
.text:0040BC2E                 cmp     ebp, 10000h
.text:0040BC34                 mov     [esi+4], ebp
.text:0040BC37                 jbe     short loc_40BC40
.text:0040BC39                 mov     dword ptr [esi+4], 10000h
.text:0040BC40
.text:0040BC40 loc_40BC40:                             ; CODE XREF: sub_40A600+1637↑j
.text:0040BC40                 mov     eax, [esp+97Ch+arg_C]
.text:0040BC47                 mov     ebp, 0Ch
.text:0040BC4C                 mov     esi, [eax+4]
.text:0040BC4F                 mov     [esp+97Ch+Size], edi ; Block
.text:0040BC52                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040BC56                 call    realloc
.text:0040BC5B                 mov     edi, [esp+97Ch+arg_C]
.text:0040BC62                 test    eax, eax
.text:0040BC64                 mov     [edi], eax
.text:0040BC66                 jz      loc_40AA16
.text:0040BC6C                 cmp     ebx, eax
.text:0040BC6E                 jz      short loc_40BCA4
.text:0040BC70                 sub     eax, ebx
.text:0040BC72                 mov     ebx, [esp+97Ch+var_908]
.text:0040BC76                 add     [esp+97Ch+var_950], eax
.text:0040BC7A                 add     [esp+97Ch+var_904], eax
.text:0040BC7E                 test    ebx, ebx
.text:0040BC80                 jz      short loc_40BC86
.text:0040BC82                 add     [esp+97Ch+var_908], eax
.text:0040BC86
.text:0040BC86 loc_40BC86:                             ; CODE XREF: sub_40A600+1680↑j
.text:0040BC86                 mov     edx, [esp+97Ch+var_900]
.text:0040BC8A                 test    edx, edx
.text:0040BC8C                 jz      short loc_40BC92
.text:0040BC8E                 add     [esp+97Ch+var_900], eax
.text:0040BC92
.text:0040BC92 loc_40BC92:                             ; CODE XREF: sub_40A600+168C↑j
.text:0040BC92                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040BC99                 test    ecx, ecx
.text:0040BC9B                 jz      short loc_40BCA4
.text:0040BC9D                 add     [esp+97Ch+var_8FC], eax
.text:0040BCA4
.text:0040BCA4 loc_40BCA4:                             ; CODE XREF: sub_40A600+166E↑j
.text:0040BCA4                                         ; sub_40A600+169B↑j
.text:0040BCA4                 mov     esi, [esp+97Ch+arg_C]
.text:0040BCAB                 mov     eax, [esp+97Ch+arg_C]
.text:0040BCB2                 mov     ebp, [esp+97Ch+var_950]
.text:0040BCB6                 mov     edi, [esi]
.text:0040BCB8                 mov     edx, [eax+4]
.text:0040BCBB                 sub     ebp, edi
.text:0040BCBD                 inc     ebp
.text:0040BCBE                 mov     ebx, edi
.text:0040BCC0                 cmp     ebp, edx
.text:0040BCC2                 ja      loc_40BC13
.text:0040BCC8
.text:0040BCC8 loc_40BCC8:                             ; CODE XREF: sub_40A600+160D↑j
.text:0040BCC8                 mov     edi, [esp+97Ch+var_950]
.text:0040BCCC                 mov     byte ptr [edi], 3
.text:0040BCCF                 jmp     loc_40AA2A
.text:0040BCD4 ; ---------------------------------------------------------------------------
.text:0040BCD4
.text:0040BCD4 loc_40BCD4:                             ; CODE XREF: sub_40A600+16F↑j
.text:0040BCD4                                         ; DATA XREF: sub_40A600:jpt_40A76F↑o
.text:0040BCD4                 test    [esp+97Ch+arg_8], 402h ; jumptable 0040A76F cases 43,63
.text:0040BCDF                 jz      loc_40B660      ; jumptable 0040A76F case 42
.text:0040BCE5                 jmp     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040BCEA ; ---------------------------------------------------------------------------
.text:0040BCEA
.text:0040BCEA loc_40BCEA:                             ; CODE XREF: sub_40A600+16F↑j
.text:0040BCEA                                         ; DATA XREF: sub_40A600:jpt_40A76F↑o
.text:0040BCEA                 mov     [esp+97Ch+var_91E], 0 ; jumptable 0040A76F case 91
.text:0040BCEF                 mov     edi, [esp+97Ch+var_8F4]
.text:0040BCF6                 cmp     [esp+97Ch+var_8D0], edi
.text:0040BCFD                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:0040BD05                 jz      loc_40C25F
.text:0040BD0B
.text:0040BD0B loc_40BD0B:                             ; CODE XREF: sub_40A600+1784↓j
.text:0040BD0B                                         ; sub_40A600+17B1↓j ...
.text:0040BD0B                 mov     ebp, [esp+97Ch+arg_C]
.text:0040BD12                 mov     ecx, [esp+97Ch+var_950]
.text:0040BD16                 mov     edi, [ebp+0]
.text:0040BD19                 mov     edx, [ebp+4]
.text:0040BD1C                 sub     ecx, edi
.text:0040BD1E                 lea     ebx, [ecx+22h]
.text:0040BD21                 cmp     ebx, edx
.text:0040BD23                 jbe     loc_40BDC3
.text:0040BD29                 cmp     edx, 10000h
.text:0040BD2F                 mov     ebp, 0Fh
.text:0040BD34                 jz      loc_40AA16
.text:0040BD3A                 lea     ebx, [edx+edx]
.text:0040BD3D                 mov     edx, [esp+97Ch+arg_C]
.text:0040BD44                 cmp     ebx, 10000h
.text:0040BD4A                 mov     [edx+4], ebx
.text:0040BD4D                 jbe     short loc_40BD56
.text:0040BD4F                 mov     dword ptr [edx+4], 10000h
.text:0040BD56
.text:0040BD56 loc_40BD56:                             ; CODE XREF: sub_40A600+174D↑j
.text:0040BD56                 mov     eax, [esp+97Ch+arg_C]
.text:0040BD5D                 mov     ebp, [eax+4]
.text:0040BD60                 mov     [esp+97Ch+Size], edi ; Block
.text:0040BD63                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040BD67                 mov     ebp, 0Ch
.text:0040BD6C                 call    realloc
.text:0040BD71                 mov     edx, [esp+97Ch+arg_C]
.text:0040BD78                 test    eax, eax
.text:0040BD7A                 mov     [edx], eax
.text:0040BD7C                 jz      loc_40AA16
.text:0040BD82                 cmp     edi, eax
.text:0040BD84                 jz      short loc_40BD0B
.text:0040BD86                 mov     ecx, [esp+97Ch+var_908]
.text:0040BD8A                 sub     eax, edi
.text:0040BD8C                 add     [esp+97Ch+var_950], eax
.text:0040BD90                 add     [esp+97Ch+var_904], eax
.text:0040BD94                 test    ecx, ecx
.text:0040BD96                 jz      short loc_40BD9C
.text:0040BD98                 add     [esp+97Ch+var_908], eax
.text:0040BD9C
.text:0040BD9C loc_40BD9C:                             ; CODE XREF: sub_40A600+1796↑j
.text:0040BD9C                 mov     esi, [esp+97Ch+var_900]
.text:0040BDA0                 test    esi, esi
.text:0040BDA2                 jz      short loc_40BDA8
.text:0040BDA4                 add     [esp+97Ch+var_900], eax
.text:0040BDA8
.text:0040BDA8 loc_40BDA8:                             ; CODE XREF: sub_40A600+17A2↑j
.text:0040BDA8                 mov     edi, [esp+97Ch+var_8FC]
.text:0040BDAF                 test    edi, edi
.text:0040BDB1                 jz      loc_40BD0B
.text:0040BDB7                 add     [esp+97Ch+var_8FC], eax
.text:0040BDBE                 jmp     loc_40BD0B
.text:0040BDC3 ; ---------------------------------------------------------------------------
.text:0040BDC3
.text:0040BDC3 loc_40BDC3:                             ; CODE XREF: sub_40A600+1723↑j
.text:0040BDC3                 mov     ebx, [esp+97Ch+var_950]
.text:0040BDC7                 lea     esi, [ecx+1]
.text:0040BDCA                 cmp     esi, edx
.text:0040BDCC                 mov     [esp+97Ch+var_900], ebx
.text:0040BDD0                 mov     ebx, edi
.text:0040BDD2                 jbe     loc_40BE8D
.text:0040BDD8
.text:0040BDD8 loc_40BDD8:                             ; CODE XREF: sub_40A600+1887↓j
.text:0040BDD8                 cmp     edx, 10000h
.text:0040BDDE                 mov     ebp, 0Fh
.text:0040BDE3                 jz      loc_40AA16
.text:0040BDE9                 lea     ecx, [edx+edx]
.text:0040BDEC                 mov     edx, [esp+97Ch+arg_C]
.text:0040BDF3                 cmp     ecx, 10000h
.text:0040BDF9                 mov     [edx+4], ecx
.text:0040BDFC                 jbe     short loc_40BE05
.text:0040BDFE                 mov     dword ptr [edx+4], 10000h
.text:0040BE05
.text:0040BE05 loc_40BE05:                             ; CODE XREF: sub_40A600+17FC↑j
.text:0040BE05                 mov     eax, [esp+97Ch+arg_C]
.text:0040BE0C                 mov     ebp, [eax+4]
.text:0040BE0F                 mov     [esp+97Ch+Size], edi ; Block
.text:0040BE12                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040BE16                 mov     ebp, 0Ch
.text:0040BE1B                 call    realloc
.text:0040BE20                 mov     edx, [esp+97Ch+arg_C]
.text:0040BE27                 test    eax, eax
.text:0040BE29                 mov     [edx], eax
.text:0040BE2B                 jz      loc_40AA16
.text:0040BE31                 cmp     ebx, eax
.text:0040BE33                 jz      short loc_40BE69
.text:0040BE35                 mov     edi, [esp+97Ch+var_908]
.text:0040BE39                 sub     eax, ebx
.text:0040BE3B                 add     [esp+97Ch+var_950], eax
.text:0040BE3F                 add     [esp+97Ch+var_904], eax
.text:0040BE43                 test    edi, edi
.text:0040BE45                 jz      short loc_40BE4B
.text:0040BE47                 add     [esp+97Ch+var_908], eax
.text:0040BE4B
.text:0040BE4B loc_40BE4B:                             ; CODE XREF: sub_40A600+1845↑j
.text:0040BE4B                 mov     esi, [esp+97Ch+var_900]
.text:0040BE4F                 test    esi, esi
.text:0040BE51                 jz      short loc_40BE57
.text:0040BE53                 add     [esp+97Ch+var_900], eax
.text:0040BE57
.text:0040BE57 loc_40BE57:                             ; CODE XREF: sub_40A600+1851↑j
.text:0040BE57                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040BE5E                 test    ebx, ebx
.text:0040BE60                 jz      short loc_40BE69
.text:0040BE62                 add     [esp+97Ch+var_8FC], eax
.text:0040BE69
.text:0040BE69 loc_40BE69:                             ; CODE XREF: sub_40A600+1833↑j
.text:0040BE69                                         ; sub_40A600+1860↑j
.text:0040BE69                 mov     ecx, [esp+97Ch+arg_C]
.text:0040BE70                 mov     eax, [esp+97Ch+arg_C]
.text:0040BE77                 mov     ebp, [esp+97Ch+var_950]
.text:0040BE7B                 mov     edi, [ecx]
.text:0040BE7D                 mov     edx, [eax+4]
.text:0040BE80                 sub     ebp, edi
.text:0040BE82                 inc     ebp
.text:0040BE83                 mov     ebx, edi
.text:0040BE85                 cmp     ebp, edx
.text:0040BE87                 ja      loc_40BDD8
.text:0040BE8D
.text:0040BE8D loc_40BE8D:                             ; CODE XREF: sub_40A600+17D2↑j
.text:0040BE8D                 mov     edi, [esp+97Ch+var_950]
.text:0040BE91                 mov     bl, 5
.text:0040BE93                 mov     edx, [esp+97Ch+var_8D0]
.text:0040BE9A                 inc     [esp+97Ch+var_950]
.text:0040BE9E                 cmp     byte ptr [edx], 5Eh ; '^'
.text:0040BEA1                 setnz   al
.text:0040BEA4                 sub     bl, al
.text:0040BEA6                 mov     [edi], bl
.text:0040BEA8                 mov     edi, [esp+97Ch+var_8D0]
.text:0040BEAF                 cmp     byte ptr [edi], 5Eh ; '^'
.text:0040BEB2                 jz      loc_40C869
.text:0040BEB8
.text:0040BEB8 loc_40BEB8:                             ; CODE XREF: sub_40A600+2271↓j
.text:0040BEB8                 mov     [esp+97Ch+var_8F0], edi
.text:0040BEBF                 mov     esi, [esp+97Ch+arg_C]
.text:0040BEC6                 mov     ecx, [esp+97Ch+arg_C]
.text:0040BECD                 mov     ebp, [esp+97Ch+var_950]
.text:0040BED1                 mov     edi, [esi]
.text:0040BED3                 mov     edx, [ecx+4]
.text:0040BED6                 sub     ebp, edi
.text:0040BED8                 mov     ebx, edi
.text:0040BEDA                 inc     ebp
.text:0040BEDB                 cmp     ebp, edx
.text:0040BEDD                 jbe     loc_40BF98
.text:0040BEE3
.text:0040BEE3 loc_40BEE3:                             ; CODE XREF: sub_40A600+1992↓j
.text:0040BEE3                 cmp     edx, 10000h
.text:0040BEE9                 mov     ebp, 0Fh
.text:0040BEEE                 jz      loc_40AA16
.text:0040BEF4                 lea     ebp, [edx+edx]
.text:0040BEF7                 mov     edx, [esp+97Ch+arg_C]
.text:0040BEFE                 cmp     ebp, 10000h
.text:0040BF04                 mov     [edx+4], ebp
.text:0040BF07                 jbe     short loc_40BF10
.text:0040BF09                 mov     dword ptr [edx+4], 10000h
.text:0040BF10
.text:0040BF10 loc_40BF10:                             ; CODE XREF: sub_40A600+1907↑j
.text:0040BF10                 mov     eax, [esp+97Ch+arg_C]
.text:0040BF17                 mov     ebp, 0Ch
.text:0040BF1C                 mov     edx, [eax+4]
.text:0040BF1F                 mov     [esp+97Ch+Size], edi ; Block
.text:0040BF22                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040BF26                 call    realloc
.text:0040BF2B                 mov     edi, [esp+97Ch+arg_C]
.text:0040BF32                 test    eax, eax
.text:0040BF34                 mov     [edi], eax
.text:0040BF36                 jz      loc_40AA16
.text:0040BF3C                 cmp     ebx, eax
.text:0040BF3E                 jz      short loc_40BF74
.text:0040BF40                 mov     ecx, [esp+97Ch+var_908]
.text:0040BF44                 sub     eax, ebx
.text:0040BF46                 add     [esp+97Ch+var_950], eax
.text:0040BF4A                 add     [esp+97Ch+var_904], eax
.text:0040BF4E                 test    ecx, ecx
.text:0040BF50                 jz      short loc_40BF56
.text:0040BF52                 add     [esp+97Ch+var_908], eax
.text:0040BF56
.text:0040BF56 loc_40BF56:                             ; CODE XREF: sub_40A600+1950↑j
.text:0040BF56                 mov     ebx, [esp+97Ch+var_900]
.text:0040BF5A                 test    ebx, ebx
.text:0040BF5C                 jz      short loc_40BF62
.text:0040BF5E                 add     [esp+97Ch+var_900], eax
.text:0040BF62
.text:0040BF62 loc_40BF62:                             ; CODE XREF: sub_40A600+195C↑j
.text:0040BF62                 mov     esi, [esp+97Ch+var_8FC]
.text:0040BF69                 test    esi, esi
.text:0040BF6B                 jz      short loc_40BF74
.text:0040BF6D                 add     [esp+97Ch+var_8FC], eax
.text:0040BF74
.text:0040BF74 loc_40BF74:                             ; CODE XREF: sub_40A600+193E↑j
.text:0040BF74                                         ; sub_40A600+196B↑j
.text:0040BF74                 mov     edx, [esp+97Ch+arg_C]
.text:0040BF7B                 mov     eax, [esp+97Ch+arg_C]
.text:0040BF82                 mov     ebp, [esp+97Ch+var_950]
.text:0040BF86                 mov     edi, [edx]
.text:0040BF88                 mov     edx, [eax+4]
.text:0040BF8B                 sub     ebp, edi
.text:0040BF8D                 inc     ebp
.text:0040BF8E                 mov     ebx, edi
.text:0040BF90                 cmp     ebp, edx
.text:0040BF92                 ja      loc_40BEE3
.text:0040BF98
.text:0040BF98 loc_40BF98:                             ; CODE XREF: sub_40A600+18DD↑j
.text:0040BF98                 cld
.text:0040BF99                 mov     ebx, [esp+97Ch+var_950]
.text:0040BF9D                 xor     eax, eax
.text:0040BF9F                 mov     ecx, 8
.text:0040BFA4                 mov     byte ptr [ebx], 20h ; ' '
.text:0040BFA7                 inc     ebx
.text:0040BFA8                 mov     edi, ebx
.text:0040BFAA                 mov     [esp+97Ch+var_950], ebx
.text:0040BFAE                 rep stosd
.text:0040BFB0                 cmp     byte ptr [ebx-2], 5
.text:0040BFB4                 jz      loc_40C84F
.text:0040BFBA
.text:0040BFBA loc_40BFBA:                             ; CODE XREF: sub_40A600+1ACD↓j
.text:0040BFBA                                         ; sub_40A600+1BD8↓j ...
.text:0040BFBA                 mov     edx, [esp+97Ch+var_8D0]
.text:0040BFC1                 cmp     edx, [esp+97Ch+var_8F4]
.text:0040BFC8                 jz      loc_40C25F
.text:0040BFCE                 movzx   eax, byte ptr [edx]
.text:0040BFD1                 lea     edi, [edx+1]
.text:0040BFD4                 mov     ecx, [esp+97Ch+var_8F8]
.text:0040BFDB                 mov     [esp+97Ch+var_8D0], edi
.text:0040BFE2                 test    ecx, ecx
.text:0040BFE4                 mov     [esp+97Ch+var_8EC], al
.text:0040BFEB                 jz      short loc_40C002
.text:0040BFED                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040BFF4                 movzx   esi, al
.text:0040BFF7                 movzx   ebx, byte ptr [esi+ebp]
.text:0040BFFB                 mov     [esp+97Ch+var_8EC], bl
.text:0040C002
.text:0040C002 loc_40C002:                             ; CODE XREF: sub_40A600+19EB↑j
.text:0040C002                 test    byte ptr [esp+97Ch+arg_8], 1
.text:0040C00A                 jz      short loc_40C01A
.text:0040C00C                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:0040C014                 jz      loc_40C7F8
.text:0040C01A
.text:0040C01A loc_40C01A:                             ; CODE XREF: sub_40A600+1A0A↑j
.text:0040C01A                 cmp     [esp+97Ch+var_8EC], 5Dh ; ']'
.text:0040C022                 jz      loc_40C7B4
.text:0040C028                 mov     edi, [esp+97Ch+var_8D0]
.text:0040C02F
.text:0040C02F loc_40C02F:                             ; CODE XREF: sub_40A600+21C5↓j
.text:0040C02F                 cmp     [esp+97Ch+var_91E], 0
.text:0040C034                 jz      loc_40C719
.text:0040C03A                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:0040C042                 jz      loc_40C710
.text:0040C048
.text:0040C048 loc_40C048:                             ; CODE XREF: sub_40A600+2121↓j
.text:0040C048                                         ; sub_40A600+2137↓j ...
.text:0040C048                 cmp     byte ptr [edi], 2Dh ; '-'
.text:0040C04B                 jz      loc_40C680
.text:0040C051
.text:0040C051 loc_40C051:                             ; CODE XREF: sub_40A600+2084↓j
.text:0040C051                 test    byte ptr [esp+97Ch+arg_8], 4
.text:0040C059                 jz      short loc_40C069
.text:0040C05B                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:0040C063                 jz      loc_40C3E6
.text:0040C069
.text:0040C069 loc_40C069:                             ; CODE XREF: sub_40A600+1A59↑j
.text:0040C069                                         ; sub_40A600+1DE9↓j
.text:0040C069                 test    byte ptr [esp+97Ch+arg_8], 4
.text:0040C071                 jz      short loc_40C081
.text:0040C073                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:0040C07B                 jz      loc_40C273
.text:0040C081
.text:0040C081 loc_40C081:                             ; CODE XREF: sub_40A600+1A71↑j
.text:0040C081                                         ; sub_40A600+1C76↓j
.text:0040C081                 test    byte ptr [esp+97Ch+arg_8], 4
.text:0040C089                 jz      short loc_40C095
.text:0040C08B                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:0040C093                 jz      short loc_40C0D2
.text:0040C095
.text:0040C095 loc_40C095:                             ; CODE XREF: sub_40A600+1A89↑j
.text:0040C095                                         ; sub_40A600+1AD5↓j
.text:0040C095                 movzx   ecx, [esp+97Ch+var_8EC]
.text:0040C09D                 mov     edx, 1
.text:0040C0A2                 mov     [esp+97Ch+var_91E], 0
.text:0040C0A7                 mov     esi, [esp+97Ch+var_950]
.text:0040C0AB                 shr     cl, 3
.text:0040C0AE                 movzx   edi, cl
.text:0040C0B1                 movzx   ecx, [esp+97Ch+var_8EC]
.text:0040C0B9                 and     ecx, 7
.text:0040C0BC                 shl     edx, cl
.text:0040C0BE                 or      [edi+esi], dl
.text:0040C0C1                 movzx   ebx, [esp+97Ch+var_8EC]
.text:0040C0C9
.text:0040C0C9 loc_40C0C9:                             ; CODE XREF: sub_40A600+224A↓j
.text:0040C0C9                 mov     [esp+97Ch+var_924], ebx
.text:0040C0CD                 jmp     loc_40BFBA
.text:0040C0D2 ; ---------------------------------------------------------------------------
.text:0040C0D2
.text:0040C0D2 loc_40C0D2:                             ; CODE XREF: sub_40A600+1A93↑j
.text:0040C0D2                 cmp     byte ptr [edi], 2Eh ; '.'
.text:0040C0D5                 jnz     short loc_40C095
.text:0040C0D7                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C0DE                 mov     ebp, 0Eh
.text:0040C0E3                 jz      loc_40AA16
.text:0040C0E9                 inc     edi
.text:0040C0EA                 xor     ebx, ebx
.text:0040C0EC                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C0F3                 mov     [esp+97Ch+var_8D0], edi
.text:0040C0FA                 jz      loc_40C25F
.text:0040C100
.text:0040C100 loc_40C100:                             ; CODE XREF: sub_40A600+1B75↓j
.text:0040C100                 movzx   eax, byte ptr [edi]
.text:0040C103                 inc     edi
.text:0040C104                 mov     esi, [esp+97Ch+var_8F8]
.text:0040C10B                 mov     [esp+97Ch+var_8D0], edi
.text:0040C112                 test    esi, esi
.text:0040C114                 mov     [esp+97Ch+var_8EC], al
.text:0040C11B                 jz      short loc_40C133
.text:0040C11D                 mov     esi, [esp+97Ch+var_8F8]
.text:0040C124                 movzx   ebp, al
.text:0040C127                 movzx   ecx, byte ptr [ebp+esi+0]
.text:0040C12C                 mov     [esp+97Ch+var_8EC], cl
.text:0040C133
.text:0040C133 loc_40C133:                             ; CODE XREF: sub_40A600+1B1B↑j
.text:0040C133                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:0040C13B                 jz      loc_40C251
.text:0040C141
.text:0040C141 loc_40C141:                             ; CODE XREF: sub_40A600+1C54↓j
.text:0040C141                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C148                 jz      short loc_40C18A
.text:0040C14A                 test    bl, bl
.text:0040C14C                 js      short loc_40C180
.text:0040C14E                 movzx   eax, [esp+97Ch+var_8EC]
.text:0040C156                 movzx   edx, bl
.text:0040C159                 inc     bl
.text:0040C15B                 mov     [esp+edx+97Ch+var_8CC], al
.text:0040C162                 mov     edi, [esp+97Ch+var_8D0]
.text:0040C169
.text:0040C169 loc_40C169:                             ; CODE XREF: sub_40A600+1B88↓j
.text:0040C169                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C170                 mov     ebp, 0Eh
.text:0040C175                 jnz     short loc_40C100
.text:0040C177                 jmp     loc_40AA16
.text:0040C177 ; ---------------------------------------------------------------------------
.text:0040C17C                 align 10h
.text:0040C180
.text:0040C180 loc_40C180:                             ; CODE XREF: sub_40A600+1B4C↑j
.text:0040C180                 mov     [esp+97Ch+var_8CC], 0
.text:0040C188                 jmp     short loc_40C169
.text:0040C18A ; ---------------------------------------------------------------------------
.text:0040C18A
.text:0040C18A loc_40C18A:                             ; CODE XREF: sub_40A600+1B48↑j
.text:0040C18A                                         ; sub_40A600+1C5A↓j
.text:0040C18A                 xor     ecx, ecx
.text:0040C18C                 movzx   edi, bl
.text:0040C18F                 mov     [esp+edi+97Ch+var_8CC], cl
.text:0040C196                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:0040C19E                 jz      short loc_40C1DD
.text:0040C1A0
.text:0040C1A0 loc_40C1A0:                             ; CODE XREF: sub_40A600+1BE7↓j
.text:0040C1A0                                         ; sub_40A600+1BF3↓j
.text:0040C1A0                 cmp     bl, 0FFh
.text:0040C1A3                 jz      short loc_40C1BF
.text:0040C1A5                 mov     eax, [esp+97Ch+var_8D0]
.text:0040C1AC
.text:0040C1AC loc_40C1AC:                             ; CODE XREF: sub_40A600+1BB6↓j
.text:0040C1AC                 dec     bl
.text:0040C1AE                 lea     edi, [eax-1]
.text:0040C1B1                 cmp     bl, 0FFh
.text:0040C1B4                 mov     eax, edi
.text:0040C1B6                 jnz     short loc_40C1AC
.text:0040C1B8                 mov     [esp+97Ch+var_8D0], edi
.text:0040C1BF
.text:0040C1BF loc_40C1BF:                             ; CODE XREF: sub_40A600+1BA3↑j
.text:0040C1BF                 mov     eax, [esp+97Ch+var_950]
.text:0040C1C3                 or      byte ptr [eax+0Bh], 8
.text:0040C1C7                 or      byte ptr [eax+5], 40h
.text:0040C1CB                 mov     [esp+97Ch+var_924], 2Eh ; '.'
.text:0040C1D3
.text:0040C1D3 loc_40C1D3:                             ; CODE XREF: sub_40A600+1C3B↓j
.text:0040C1D3                                         ; sub_40A600+1D73↓j ...
.text:0040C1D3                 mov     [esp+97Ch+var_91E], 0
.text:0040C1D8                 jmp     loc_40BFBA
.text:0040C1DD ; ---------------------------------------------------------------------------
.text:0040C1DD
.text:0040C1DD loc_40C1DD:                             ; CODE XREF: sub_40A600+1B9E↑j
.text:0040C1DD                 mov     eax, [esp+97Ch+var_8D0]
.text:0040C1E4                 cmp     byte ptr [eax], 5Dh ; ']'
.text:0040C1E7                 jnz     short loc_40C1A0
.text:0040C1E9                 movzx   ecx, [esp+97Ch+var_8CC]
.text:0040C1F1                 test    cl, cl
.text:0040C1F3                 jz      short loc_40C1A0
.text:0040C1F5                 dec     bl
.text:0040C1F7                 jnz     short loc_40C23D
.text:0040C1F9                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040C200                 mov     ebp, 0Eh
.text:0040C205                 jz      loc_40AA16
.text:0040C20B                 mov     bl, cl
.text:0040C20D                 mov     esi, [esp+97Ch+var_950]
.text:0040C211                 lea     ebp, [eax+1]
.text:0040C214                 mov     [esp+97Ch+var_8D0], ebp
.text:0040C21B                 shr     bl, 3
.text:0040C21E                 and     ecx, 7
.text:0040C221                 mov     edx, 1
.text:0040C226                 movzx   ebp, bl
.text:0040C229                 shl     edx, cl
.text:0040C22B                 or      [ebp+esi+0], dl
.text:0040C22F                 movzx   ebx, [esp+97Ch+var_8CC]
.text:0040C237                 mov     [esp+97Ch+var_924], ebx
.text:0040C23B                 jmp     short loc_40C1D3
.text:0040C23D ; ---------------------------------------------------------------------------
.text:0040C23D
.text:0040C23D loc_40C23D:                             ; CODE XREF: sub_40A600+1BF7↑j
.text:0040C23D                                         ; sub_40A600+1D92↓j
.text:0040C23D                 mov     edx, [esp+97Ch+Block]
.text:0040C244                 mov     ebp, 3
.text:0040C249                 mov     [esp+97Ch+Size], edx
.text:0040C24C                 jmp     loc_40ABA3
.text:0040C251 ; ---------------------------------------------------------------------------
.text:0040C251
.text:0040C251 loc_40C251:                             ; CODE XREF: sub_40A600+1B3B↑j
.text:0040C251                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040C254                 jnz     loc_40C141
.text:0040C25A                 jmp     loc_40C18A
.text:0040C25F ; ---------------------------------------------------------------------------
.text:0040C25F
.text:0040C25F loc_40C25F:                             ; CODE XREF: sub_40A600+1705↑j
.text:0040C25F                                         ; sub_40A600+19C8↑j ...
.text:0040C25F                 mov     ebp, [esp+97Ch+Block]
.text:0040C266                 mov     [esp+97Ch+Size], ebp
.text:0040C269                 mov     ebp, 7
.text:0040C26E                 jmp     loc_40ABA3
.text:0040C273 ; ---------------------------------------------------------------------------
.text:0040C273
.text:0040C273 loc_40C273:                             ; CODE XREF: sub_40A600+1A7B↑j
.text:0040C273                 cmp     byte ptr [edi], 3Dh ; '='
.text:0040C276                 jnz     loc_40C081
.text:0040C27C                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C283                 mov     ebp, 0Eh
.text:0040C288                 jz      loc_40AA16
.text:0040C28E                 inc     edi
.text:0040C28F                 xor     ebx, ebx
.text:0040C291                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C298                 mov     [esp+97Ch+var_8D0], edi
.text:0040C29F                 jz      short loc_40C25F
.text:0040C2A1
.text:0040C2A1 loc_40C2A1:                             ; CODE XREF: sub_40A600+1D17↓j
.text:0040C2A1                 movzx   eax, byte ptr [edi]
.text:0040C2A4                 inc     edi
.text:0040C2A5                 mov     esi, [esp+97Ch+var_8F8]
.text:0040C2AC                 mov     [esp+97Ch+var_8D0], edi
.text:0040C2B3                 test    esi, esi
.text:0040C2B5                 mov     [esp+97Ch+var_8EC], al
.text:0040C2BC                 jz      short loc_40C2D4
.text:0040C2BE                 mov     esi, [esp+97Ch+var_8F8]
.text:0040C2C5                 movzx   ebp, al
.text:0040C2C8                 movzx   ecx, byte ptr [ebp+esi+0]
.text:0040C2CD                 mov     [esp+97Ch+var_8EC], cl
.text:0040C2D4
.text:0040C2D4 loc_40C2D4:                             ; CODE XREF: sub_40A600+1CBC↑j
.text:0040C2D4                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:0040C2DC                 jz      loc_40C3D8
.text:0040C2E2
.text:0040C2E2 loc_40C2E2:                             ; CODE XREF: sub_40A600+1DDB↓j
.text:0040C2E2                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C2E9                 jz      short loc_40C32A
.text:0040C2EB                 cmp     bl, 1
.text:0040C2EE                 ja      short loc_40C320
.text:0040C2F0                 movzx   edx, [esp+97Ch+var_8EC]
.text:0040C2F8                 movzx   edi, bl
.text:0040C2FB                 inc     bl
.text:0040C2FD                 mov     [esp+edi+97Ch+var_84C], dl
.text:0040C304                 mov     edi, [esp+97Ch+var_8D0]
.text:0040C30B
.text:0040C30B loc_40C30B:                             ; CODE XREF: sub_40A600+1D28↓j
.text:0040C30B                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C312                 mov     ebp, 0Eh
.text:0040C317                 jnz     short loc_40C2A1
.text:0040C319                 jmp     loc_40AA16
.text:0040C319 ; ---------------------------------------------------------------------------
.text:0040C31E                 align 10h
.text:0040C320
.text:0040C320 loc_40C320:                             ; CODE XREF: sub_40A600+1CEE↑j
.text:0040C320                 mov     [esp+97Ch+var_84C], 0
.text:0040C328                 jmp     short loc_40C30B
.text:0040C32A ; ---------------------------------------------------------------------------
.text:0040C32A
.text:0040C32A loc_40C32A:                             ; CODE XREF: sub_40A600+1CE9↑j
.text:0040C32A                                         ; sub_40A600+1DE1↓j
.text:0040C32A                 xor     eax, eax
.text:0040C32C                 movzx   ecx, bl
.text:0040C32F                 mov     [esp+ecx+97Ch+var_84C], al
.text:0040C336                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:0040C33E                 jz      short loc_40C378
.text:0040C340
.text:0040C340 loc_40C340:                             ; CODE XREF: sub_40A600+1D82↓j
.text:0040C340                                         ; sub_40A600+1D8E↓j
.text:0040C340                 cmp     bl, 0FFh
.text:0040C343                 jz      short loc_40C35F
.text:0040C345                 mov     eax, [esp+97Ch+var_8D0]
.text:0040C34C
.text:0040C34C loc_40C34C:                             ; CODE XREF: sub_40A600+1D56↓j
.text:0040C34C                 dec     bl
.text:0040C34E                 lea     edi, [eax-1]
.text:0040C351                 cmp     bl, 0FFh
.text:0040C354                 mov     eax, edi
.text:0040C356                 jnz     short loc_40C34C
.text:0040C358                 mov     [esp+97Ch+var_8D0], edi
.text:0040C35F
.text:0040C35F loc_40C35F:                             ; CODE XREF: sub_40A600+1D43↑j
.text:0040C35F                 mov     edi, [esp+97Ch+var_950]
.text:0040C363                 or      byte ptr [edi+0Bh], 8
.text:0040C367                 or      byte ptr [edi+7], 20h
.text:0040C36B                 mov     [esp+97Ch+var_924], 3Dh ; '='
.text:0040C373                 jmp     loc_40C1D3
.text:0040C378 ; ---------------------------------------------------------------------------
.text:0040C378
.text:0040C378 loc_40C378:                             ; CODE XREF: sub_40A600+1D3E↑j
.text:0040C378                 mov     eax, [esp+97Ch+var_8D0]
.text:0040C37F                 cmp     byte ptr [eax], 5Dh ; ']'
.text:0040C382                 jnz     short loc_40C340
.text:0040C384                 movzx   ecx, [esp+97Ch+var_84C]
.text:0040C38C                 test    cl, cl
.text:0040C38E                 jz      short loc_40C340
.text:0040C390                 dec     bl
.text:0040C392                 jnz     loc_40C23D
.text:0040C398                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040C39F                 mov     ebp, 0Eh
.text:0040C3A4                 jz      loc_40AA16
.text:0040C3AA                 mov     dl, cl
.text:0040C3AC                 mov     esi, [esp+97Ch+var_950]
.text:0040C3B0                 lea     ebp, [eax+1]
.text:0040C3B3                 mov     [esp+97Ch+var_8D0], ebp
.text:0040C3BA                 shr     dl, 3
.text:0040C3BD                 and     ecx, 7
.text:0040C3C0                 mov     ebx, 1
.text:0040C3C5                 movzx   ebp, dl
.text:0040C3C8                 shl     ebx, cl
.text:0040C3CA                 or      [ebp+esi+0], bl
.text:0040C3CE                 mov     [esp+97Ch+var_91E], 1
.text:0040C3D3                 jmp     loc_40BFBA
.text:0040C3D8 ; ---------------------------------------------------------------------------
.text:0040C3D8
.text:0040C3D8 loc_40C3D8:                             ; CODE XREF: sub_40A600+1CDC↑j
.text:0040C3D8                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040C3DB                 jnz     loc_40C2E2
.text:0040C3E1                 jmp     loc_40C32A
.text:0040C3E6 ; ---------------------------------------------------------------------------
.text:0040C3E6
.text:0040C3E6 loc_40C3E6:                             ; CODE XREF: sub_40A600+1A63↑j
.text:0040C3E6                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040C3E9                 jnz     loc_40C069
.text:0040C3EF                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C3F6                 mov     ebp, 0Eh
.text:0040C3FB                 jz      loc_40AA16
.text:0040C401                 inc     edi
.text:0040C402                 xor     ebx, ebx
.text:0040C404                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C40B                 mov     [esp+97Ch+var_8D0], edi
.text:0040C412                 jz      loc_40C25F
.text:0040C418
.text:0040C418 loc_40C418:                             ; CODE XREF: sub_40A600+1E89↓j
.text:0040C418                 movzx   ecx, byte ptr [edi]
.text:0040C41B                 inc     edi
.text:0040C41C                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040C423                 mov     [esp+97Ch+var_8D0], edi
.text:0040C42A                 test    ebp, ebp
.text:0040C42C                 mov     [esp+97Ch+var_8EC], cl
.text:0040C433                 jz      short loc_40C44B
.text:0040C435                 movzx   ebp, cl
.text:0040C438                 mov     ecx, [esp+97Ch+var_8F8]
.text:0040C43F                 movzx   edx, byte ptr [ebp+ecx+0]
.text:0040C444                 mov     [esp+97Ch+var_8EC], dl
.text:0040C44B
.text:0040C44B loc_40C44B:                             ; CODE XREF: sub_40A600+1E33↑j
.text:0040C44B                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:0040C453                 jz      loc_40C670
.text:0040C459
.text:0040C459 loc_40C459:                             ; CODE XREF: sub_40A600+2073↓j
.text:0040C459                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C460                 jz      short loc_40C490
.text:0040C462                 movzx   eax, [esp+97Ch+var_8EC]
.text:0040C46A                 movzx   esi, bl
.text:0040C46D                 inc     bl
.text:0040C46F                 mov     ebp, 0Eh
.text:0040C474                 mov     [esp+esi+97Ch+name], al
.text:0040C47B                 mov     edi, [esp+97Ch+var_8D0]
.text:0040C482                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C489                 jnz     short loc_40C418
.text:0040C48B                 jmp     loc_40AA16
.text:0040C490 ; ---------------------------------------------------------------------------
.text:0040C490
.text:0040C490 loc_40C490:                             ; CODE XREF: sub_40A600+1E60↑j
.text:0040C490                                         ; sub_40A600+2079↓j
.text:0040C490                 xor     eax, eax
.text:0040C492                 movzx   edi, bl
.text:0040C495                 mov     [esp+edi+97Ch+name], al
.text:0040C49C                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:0040C4A4                 jz      short loc_40C4DE
.text:0040C4A6
.text:0040C4A6 loc_40C4A6:                             ; CODE XREF: sub_40A600+1EE8↓j
.text:0040C4A6                 cmp     bl, 0FFh
.text:0040C4A9                 jz      short loc_40C4C5
.text:0040C4AB                 mov     eax, [esp+97Ch+var_8D0]
.text:0040C4B2
.text:0040C4B2 loc_40C4B2:                             ; CODE XREF: sub_40A600+1EBC↓j
.text:0040C4B2                 dec     bl
.text:0040C4B4                 lea     edi, [eax-1]
.text:0040C4B7                 cmp     bl, 0FFh
.text:0040C4BA                 mov     eax, edi
.text:0040C4BC                 jnz     short loc_40C4B2
.text:0040C4BE                 mov     [esp+97Ch+var_8D0], edi
.text:0040C4C5
.text:0040C4C5 loc_40C4C5:                             ; CODE XREF: sub_40A600+1EA9↑j
.text:0040C4C5                 mov     eax, [esp+97Ch+var_950]
.text:0040C4C9                 or      byte ptr [eax+0Bh], 8
.text:0040C4CD                 or      byte ptr [eax+7], 4
.text:0040C4D1                 mov     [esp+97Ch+var_924], 3Ah ; ':'
.text:0040C4D9                 jmp     loc_40C1D3
.text:0040C4DE ; ---------------------------------------------------------------------------
.text:0040C4DE
.text:0040C4DE loc_40C4DE:                             ; CODE XREF: sub_40A600+1EA4↑j
.text:0040C4DE                 mov     esi, [esp+97Ch+var_8D0]
.text:0040C4E5                 cmp     byte ptr [esi], 5Dh ; ']'
.text:0040C4E8                 jnz     short loc_40C4A6
.text:0040C4EA                 cld
.text:0040C4EB                 mov     edi, offset aLower ; "lower"
.text:0040C4F0                 lea     ebx, [esp+97Ch+name]
.text:0040C4F7                 mov     esi, ebx
.text:0040C4F9                 mov     ecx, 6
.text:0040C4FE                 lea     ebp, [esp+97Ch+name]
.text:0040C505                 repe cmpsb
.text:0040C507                 setz    [esp+97Ch+var_925]
.text:0040C50C                 mov     ecx, 6
.text:0040C511                 mov     edi, offset aUpper ; "upper"
.text:0040C516                 mov     esi, ebp
.text:0040C518                 lea     edx, [esp+97Ch+name]
.text:0040C51F                 repe cmpsb
.text:0040C521                 setz    [esp+97Ch+var_926]
.text:0040C526                 mov     [esp+97Ch+Size], edx ; name
.text:0040C529                 call    wctype
.text:0040C52E                 movzx   ebx, ax
.text:0040C531                 test    bx, bx
.text:0040C534                 mov     dword ptr [esp+97Ch+Type], ebx
.text:0040C538                 jz      loc_40C65C
.text:0040C53E                 mov     eax, [esp+97Ch+var_8D0]
.text:0040C545                 mov     ebp, 0Eh
.text:0040C54A                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040C551                 jz      loc_40AA16
.text:0040C557                 lea     ecx, [eax+1]
.text:0040C55A                 cmp     ecx, [esp+97Ch+var_8F4]
.text:0040C561                 mov     [esp+97Ch+var_8D0], ecx
.text:0040C568                 jz      loc_40C25F
.text:0040C56E                 xor     edi, edi
.text:0040C570
.text:0040C570 loc_40C570:                             ; CODE XREF: sub_40A600+202E↓j
.text:0040C570                 mov     [esp+97Ch+Size], edi ; Ch
.text:0040C573                 call    btowc
.text:0040C578                 mov     ebp, dword ptr [esp+97Ch+Type]
.text:0040C57C                 movzx   esi, ax
.text:0040C57F                 mov     [esp+97Ch+Size], esi ; C
.text:0040C582                 mov     [esp+97Ch+var_978], ebp ; Type
.text:0040C586                 call    iswctype
.text:0040C58B                 test    eax, eax
.text:0040C58D                 jz      short loc_40C5AC
.text:0040C58F                 mov     ecx, edi
.text:0040C591                 mov     ebx, edi
.text:0040C593                 mov     edx, [esp+97Ch+var_950]
.text:0040C597                 shr     cl, 3
.text:0040C59A                 movzx   esi, cl
.text:0040C59D                 mov     ecx, ebx
.text:0040C59F                 and     ecx, 7
.text:0040C5A2                 mov     ebx, 1
.text:0040C5A7                 shl     ebx, cl
.text:0040C5A9                 or      [esi+edx], bl
.text:0040C5AC
.text:0040C5AC loc_40C5AC:                             ; CODE XREF: sub_40A600+1F8D↑j
.text:0040C5AC                 mov     eax, [esp+97Ch+var_8F8]
.text:0040C5B3                 test    eax, eax
.text:0040C5B5                 jz      short loc_40C622
.text:0040C5B7                 cmp     [esp+97Ch+var_926], 0
.text:0040C5BC                 jnz     short loc_40C5C5
.text:0040C5BE                 cmp     [esp+97Ch+var_925], 0
.text:0040C5C3                 jz      short loc_40C622
.text:0040C5C5
.text:0040C5C5 loc_40C5C5:                             ; CODE XREF: sub_40A600+1FBC↑j
.text:0040C5C5                 mov     ebp, ds:__mb_cur_max
.text:0040C5CB                 cmp     dword ptr [ebp+0], 1
.text:0040C5CF                 jz      short loc_40C64B
.text:0040C5D1                 mov     [esp+97Ch+var_978], 1 ; Type
.text:0040C5D9                 mov     [esp+97Ch+Size], edi ; C
.text:0040C5DC                 call    _isctype
.text:0040C5E1
.text:0040C5E1 loc_40C5E1:                             ; CODE XREF: sub_40A600+205A↓j
.text:0040C5E1                 test    eax, eax
.text:0040C5E3                 jnz     short loc_40C604
.text:0040C5E5                 mov     ebx, ds:__mb_cur_max
.text:0040C5EB                 cmp     dword ptr [ebx], 1
.text:0040C5EE                 jz      short loc_40C639
.text:0040C5F0                 mov     [esp+97Ch+var_978], 2 ; Type
.text:0040C5F8                 mov     [esp+97Ch+Size], edi ; C
.text:0040C5FB                 call    _isctype
.text:0040C600
.text:0040C600 loc_40C600:                             ; CODE XREF: sub_40A600+2049↓j
.text:0040C600                 test    eax, eax
.text:0040C602                 jz      short loc_40C622
.text:0040C604
.text:0040C604 loc_40C604:                             ; CODE XREF: sub_40A600+1FE3↑j
.text:0040C604                 mov     ecx, edi
.text:0040C606                 mov     ebx, edi
.text:0040C608                 mov     edx, [esp+97Ch+var_950]
.text:0040C60C                 shr     cl, 3
.text:0040C60F                 movzx   ebp, cl
.text:0040C612                 mov     ecx, ebx
.text:0040C614                 and     ecx, 7
.text:0040C617                 mov     ebx, 1
.text:0040C61C                 shl     ebx, cl
.text:0040C61E                 or      [ebp+edx+0], bl
.text:0040C622
.text:0040C622 loc_40C622:                             ; CODE XREF: sub_40A600+1FB5↑j
.text:0040C622                                         ; sub_40A600+1FC3↑j ...
.text:0040C622                 mov     [esp+97Ch+var_91E], 1
.text:0040C627                 inc     edi
.text:0040C628                 cmp     edi, 0FFh
.text:0040C62E                 jle     loc_40C570
.text:0040C634                 jmp     loc_40BFBA
.text:0040C639 ; ---------------------------------------------------------------------------
.text:0040C639
.text:0040C639 loc_40C639:                             ; CODE XREF: sub_40A600+1FEE↑j
.text:0040C639                 mov     ebp, ds:_pctype
.text:0040C63F                 mov     ecx, [ebp+0]
.text:0040C642                 movzx   eax, word ptr [ecx+edi*2]
.text:0040C646                 and     eax, 2
.text:0040C649                 jmp     short loc_40C600
.text:0040C64B ; ---------------------------------------------------------------------------
.text:0040C64B
.text:0040C64B loc_40C64B:                             ; CODE XREF: sub_40A600+1FCF↑j
.text:0040C64B                 mov     edx, ds:_pctype
.text:0040C651                 mov     esi, [edx]
.text:0040C653                 movzx   eax, word ptr [esi+edi*2]
.text:0040C657                 and     eax, 1
.text:0040C65A                 jmp     short loc_40C5E1
.text:0040C65C ; ---------------------------------------------------------------------------
.text:0040C65C
.text:0040C65C loc_40C65C:                             ; CODE XREF: sub_40A600+1F38↑j
.text:0040C65C                 mov     ebx, [esp+97Ch+Block]
.text:0040C663                 mov     ebp, 4
.text:0040C668
.text:0040C668 loc_40C668:                             ; CODE XREF: sub_40A600+26A5↓j
.text:0040C668                 mov     [esp+97Ch+Size], ebx
.text:0040C66B                 jmp     loc_40ABA3
.text:0040C670 ; ---------------------------------------------------------------------------
.text:0040C670
.text:0040C670 loc_40C670:                             ; CODE XREF: sub_40A600+1E53↑j
.text:0040C670                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040C673                 jnz     loc_40C459
.text:0040C679                 jmp     loc_40C490
.text:0040C679 ; ---------------------------------------------------------------------------
.text:0040C67E                 align 10h
.text:0040C680
.text:0040C680 loc_40C680:                             ; CODE XREF: sub_40A600+1A4B↑j
.text:0040C680                 cmp     byte ptr [edi+1], 5Dh ; ']'
.text:0040C684                 jz      loc_40C051
.text:0040C68A                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C691                 mov     ebp, 0Eh
.text:0040C696                 jz      loc_40AA16
.text:0040C69C                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040C6A4                 inc     edi
.text:0040C6A5                 mov     ecx, [esp+97Ch+var_950]
.text:0040C6A9                 mov     [esp+97Ch+var_8D0], edi
.text:0040C6B0                 mov     edx, [esp+97Ch+arg_8]
.text:0040C6B7                 lea     edi, [esp+97Ch+var_8D0]
.text:0040C6BE                 mov     [esp+97Ch+var_978], edi
.text:0040C6C2                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040C6C9                 mov     eax, [esp+97Ch+var_8F4]
.text:0040C6D0                 mov     [esp+97Ch+var_968], ecx
.text:0040C6D4                 mov     [esp+97Ch+var_96C], edx
.text:0040C6D8                 mov     [esp+97Ch+var_970], ebx
.text:0040C6DC                 mov     [esp+97Ch+var_974], eax
.text:0040C6E0                 mov     [esp+97Ch+Size], ebp
.text:0040C6E3
.text:0040C6E3 loc_40C6E3:                             ; CODE XREF: sub_40A600+2193↓j
.text:0040C6E3                 call    sub_407590
.text:0040C6E8                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:0040C6F0                 test    eax, eax
.text:0040C6F2                 mov     ebx, eax
.text:0040C6F4                 jz      loc_40BFBA
.text:0040C6FA                 mov     esi, [esp+97Ch+Block]
.text:0040C701                 mov     ebp, ebx
.text:0040C703
.text:0040C703 loc_40C703:                             ; CODE XREF: sub_40A600+318E↓j
.text:0040C703                 mov     [esp+97Ch+Size], esi
.text:0040C706                 jmp     loc_40ABA3
.text:0040C706 ; ---------------------------------------------------------------------------
.text:0040C70B                 align 10h
.text:0040C710
.text:0040C710 loc_40C710:                             ; CODE XREF: sub_40A600+1A42↑j
.text:0040C710                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040C713                 jnz     loc_40C7A3
.text:0040C719
.text:0040C719 loc_40C719:                             ; CODE XREF: sub_40A600+1A34↑j
.text:0040C719                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:0040C721                 jnz     loc_40C048
.text:0040C727                 lea     esi, [edi-2]
.text:0040C72A                 cmp     esi, [esp+97Ch+arg_0]
.text:0040C731                 jb      short loc_40C73D
.text:0040C733                 cmp     byte ptr [edi-2], 5Bh ; '['
.text:0040C737                 jz      loc_40C048
.text:0040C73D
.text:0040C73D loc_40C73D:                             ; CODE XREF: sub_40A600+2131↑j
.text:0040C73D                 lea     ebp, [edi-3]
.text:0040C740                 cmp     ebp, [esp+97Ch+arg_0]
.text:0040C747                 jb      short loc_40C74F
.text:0040C749                 cmp     byte ptr [edi-3], 5Bh ; '['
.text:0040C74D                 jz      short loc_40C798
.text:0040C74F
.text:0040C74F loc_40C74F:                             ; CODE XREF: sub_40A600+2147↑j
.text:0040C74F                                         ; sub_40A600+219C↓j
.text:0040C74F                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040C752                 jz      loc_40C048
.text:0040C758                 mov     esi, [esp+97Ch+var_950]
.text:0040C75C                 lea     edi, [esp+97Ch+var_8D0]
.text:0040C763                 mov     ecx, [esp+97Ch+arg_8]
.text:0040C76A                 mov     [esp+97Ch+var_978], edi
.text:0040C76E                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040C775                 mov     edx, [esp+97Ch+var_8F4]
.text:0040C77C                 mov     [esp+97Ch+var_968], esi
.text:0040C780                 mov     eax, [esp+97Ch+var_924]
.text:0040C784                 mov     [esp+97Ch+var_96C], ecx
.text:0040C788                 mov     [esp+97Ch+var_970], ebx
.text:0040C78C                 mov     [esp+97Ch+var_974], edx
.text:0040C790                 mov     [esp+97Ch+Size], eax
.text:0040C793                 jmp     loc_40C6E3
.text:0040C798 ; ---------------------------------------------------------------------------
.text:0040C798
.text:0040C798 loc_40C798:                             ; CODE XREF: sub_40A600+214D↑j
.text:0040C798                 cmp     byte ptr [edi-2], 5Eh ; '^'
.text:0040C79C                 jnz     short loc_40C74F
.text:0040C79E                 jmp     loc_40C048
.text:0040C7A3 ; ---------------------------------------------------------------------------
.text:0040C7A3
.text:0040C7A3 loc_40C7A3:                             ; CODE XREF: sub_40A600+2113↑j
.text:0040C7A3                 mov     ecx, [esp+97Ch+Block]
.text:0040C7AA                 mov     ebp, 0Bh
.text:0040C7AF                 jmp     loc_40B4DC
.text:0040C7B4 ; ---------------------------------------------------------------------------
.text:0040C7B4
.text:0040C7B4 loc_40C7B4:                             ; CODE XREF: sub_40A600+1A22↑j
.text:0040C7B4                 mov     ebx, [esp+97Ch+var_8F0]
.text:0040C7BB                 mov     edi, [esp+97Ch+var_8D0]
.text:0040C7C2                 inc     ebx
.text:0040C7C3                 cmp     edi, ebx
.text:0040C7C5                 jz      loc_40C02F
.text:0040C7CB
.text:0040C7CB loc_40C7CB:                             ; CODE XREF: sub_40A600+21EA↓j
.text:0040C7CB                 mov     edi, [esp+97Ch+var_950]
.text:0040C7CF                 movzx   edx, byte ptr [edi-1]
.text:0040C7D3                 test    dl, dl
.text:0040C7D5                 jz      short loc_40C7EC
.text:0040C7D7                 movzx   ebp, dl
.text:0040C7DA                 cmp     byte ptr [ebp+edi-1], 0
.text:0040C7DF                 jnz     short loc_40C7EC
.text:0040C7E1                 mov     ebx, [esp+97Ch+var_950]
.text:0040C7E5                 dec     dl
.text:0040C7E7                 mov     [ebx-1], dl
.text:0040C7EA                 jmp     short loc_40C7CB
.text:0040C7EC ; ---------------------------------------------------------------------------
.text:0040C7EC
.text:0040C7EC loc_40C7EC:                             ; CODE XREF: sub_40A600+21D5↑j
.text:0040C7EC                                         ; sub_40A600+21DF↑j
.text:0040C7EC                 movzx   edi, dl
.text:0040C7EF                 add     [esp+97Ch+var_950], edi
.text:0040C7F3                 jmp     loc_40AA2F
.text:0040C7F8 ; ---------------------------------------------------------------------------
.text:0040C7F8
.text:0040C7F8 loc_40C7F8:                             ; CODE XREF: sub_40A600+1A14↑j
.text:0040C7F8                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C7FF                 jz      loc_40BBB0
.text:0040C805                 movzx   ebx, byte ptr [edx+1]
.text:0040C809                 lea     ecx, [edx+2]
.text:0040C80C                 mov     eax, [esp+97Ch+var_8F8]
.text:0040C813                 mov     [esp+97Ch+var_8D0], ecx
.text:0040C81A                 test    eax, eax
.text:0040C81C                 jz      short loc_40C82C
.text:0040C81E                 mov     edx, [esp+97Ch+var_8F8]
.text:0040C825                 movzx   edi, bl
.text:0040C828                 movzx   ebx, byte ptr [edi+edx]
.text:0040C82C
.text:0040C82C loc_40C82C:                             ; CODE XREF: sub_40A600+221C↑j
.text:0040C82C                 mov     cl, bl
.text:0040C82E                 mov     ebp, [esp+97Ch+var_950]
.text:0040C832                 mov     edx, 1
.text:0040C837                 shr     cl, 3
.text:0040C83A                 movzx   esi, cl
.text:0040C83D                 mov     ecx, ebx
.text:0040C83F                 and     ecx, 7
.text:0040C842                 movzx   ebx, bl
.text:0040C845                 shl     edx, cl
.text:0040C847                 or      [esi+ebp], dl
.text:0040C84A                 jmp     loc_40C0C9
.text:0040C84F ; ---------------------------------------------------------------------------
.text:0040C84F
.text:0040C84F loc_40C84F:                             ; CODE XREF: sub_40A600+19B4↑j
.text:0040C84F                 test    [esp+97Ch+arg_8], 100h
.text:0040C85A                 jz      loc_40BFBA
.text:0040C860                 or      byte ptr [ebx+1], 4
.text:0040C864                 jmp     loc_40BFBA
.text:0040C869 ; ---------------------------------------------------------------------------
.text:0040C869
.text:0040C869 loc_40C869:                             ; CODE XREF: sub_40A600+18B2↑j
.text:0040C869                 inc     edi
.text:0040C86A                 mov     [esp+97Ch+var_8D0], edi
.text:0040C871                 jmp     loc_40BEB8
.text:0040C876 ; ---------------------------------------------------------------------------
.text:0040C876
.text:0040C876 loc_40C876:                             ; CODE XREF: sub_40A600+16F↑j
.text:0040C876                                         ; DATA XREF: sub_40A600:jpt_40A76F↑o
.text:0040C876                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 0040A76F case 92
.text:0040C87D                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040C884                 jz      loc_40BBB0
.text:0040C88A                 movzx   ecx, byte ptr [eax]
.text:0040C88D                 lea     ebx, [eax+1]
.text:0040C890                 mov     [esp+97Ch+var_8D0], ebx
.text:0040C897                 movzx   eax, cl
.text:0040C89A                 sub     eax, 27h ; '''  ; switch 86 cases
.text:0040C89D                 mov     [esp+97Ch+var_8EC], cl
.text:0040C8A4                 cmp     eax, 55h
.text:0040C8A7                 ja      def_40C8AD      ; jumptable 0040C8AD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040C8AD                 jmp     ds:jpt_40C8AD[eax*4] ; switch jump
.text:0040C8AD ; ---------------------------------------------------------------------------
.text:0040C8B4 jpt_40C8AD      dd offset loc_40CA4B, offset loc_40CA0C, offset loc_40CB1D
.text:0040C8B4                                         ; DATA XREF: sub_40A600+22AD↑r
.text:0040C8B4                 dd offset def_40C8AD, offset loc_40CE4E, offset def_40C8AD ; jump table for switch statement
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset loc_40CB53, offset loc_40CB53
.text:0040C8B4                 dd offset loc_40CB53, offset loc_40CB53, offset loc_40CB53
.text:0040C8B4                 dd offset loc_40CB53, offset loc_40CB53, offset loc_40CB53
.text:0040C8B4                 dd offset loc_40CB53, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset loc_40CCAA, offset def_40C8AD, offset loc_40CD7C
.text:0040C8B4                 dd offset loc_40CE4E, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset loc_40CE61, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset loc_40CF33, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset loc_40D026, offset def_40C8AD, offset loc_40D0F8
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset loc_40D1CA
.text:0040C8B4                 dd offset def_40C8AD, offset def_40C8AD, offset def_40C8AD
.text:0040C8B4                 dd offset loc_40D2BF, offset loc_40D869
.text:0040CA0C ; ---------------------------------------------------------------------------
.text:0040CA0C
.text:0040CA0C loc_40CA0C:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040CA0C                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040CA0C                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040C8AD case 40
.text:0040CA17                 jz      loc_40B1BD
.text:0040CA1D
.text:0040CA1D def_40C8AD:                             ; CODE XREF: sub_40A600+22A7↑j
.text:0040CA1D                                         ; sub_40A600+22AD↑j ...
.text:0040CA1D                 mov     ebx, [esp+97Ch+var_8F8] ; jumptable 0040C8AD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040CA24                 test    ebx, ebx
.text:0040CA26                 jz      def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CA2C                 movzx   edi, [esp+97Ch+var_8EC]
.text:0040CA34                 mov     esi, [esp+97Ch+var_8F8]
.text:0040CA3B                 movzx   ecx, byte ptr [edi+esi]
.text:0040CA3F                 mov     [esp+97Ch+var_8EC], cl
.text:0040CA46                 jmp     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CA4B ; ---------------------------------------------------------------------------
.text:0040CA4B
.text:0040CA4B loc_40CA4B:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040CA4B                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040CA4B                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C8AD case 39
.text:0040CA56                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CA5C
.text:0040CA5C loc_40CA5C:                             ; CODE XREF: sub_40A600+24D2↓j
.text:0040CA5C                                         ; sub_40A600+24FF↓j ...
.text:0040CA5C                 mov     eax, [esp+97Ch+arg_C]
.text:0040CA63                 mov     ebp, [esp+97Ch+var_950]
.text:0040CA67                 mov     edi, [eax]
.text:0040CA69                 mov     edx, [eax+4]
.text:0040CA6C                 sub     ebp, edi
.text:0040CA6E                 inc     ebp
.text:0040CA6F                 cmp     ebp, edx
.text:0040CA71                 jbe     loc_40CB11
.text:0040CA77                 cmp     edx, 10000h
.text:0040CA7D                 mov     ebp, 0Fh
.text:0040CA82                 jz      loc_40AA16
.text:0040CA88                 lea     ebp, [edx+edx]
.text:0040CA8B                 mov     edx, [esp+97Ch+arg_C]
.text:0040CA92                 cmp     ebp, 10000h
.text:0040CA98                 mov     [edx+4], ebp
.text:0040CA9B                 jbe     short loc_40CAA4
.text:0040CA9D                 mov     dword ptr [edx+4], 10000h
.text:0040CAA4
.text:0040CAA4 loc_40CAA4:                             ; CODE XREF: sub_40A600+249B↑j
.text:0040CAA4                 mov     ebx, [esp+97Ch+arg_C]
.text:0040CAAB                 mov     ebp, 0Ch
.text:0040CAB0                 mov     esi, [ebx+4]
.text:0040CAB3                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CAB6                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040CABA                 call    realloc
.text:0040CABF                 mov     edx, [esp+97Ch+arg_C]
.text:0040CAC6                 test    eax, eax
.text:0040CAC8                 mov     [edx], eax
.text:0040CACA                 jz      loc_40AA16
.text:0040CAD0                 cmp     edi, eax
.text:0040CAD2                 jz      short loc_40CA5C
.text:0040CAD4                 sub     eax, edi
.text:0040CAD6                 mov     edi, [esp+97Ch+var_908]
.text:0040CADA                 add     [esp+97Ch+var_950], eax
.text:0040CADE                 add     [esp+97Ch+var_904], eax
.text:0040CAE2                 test    edi, edi
.text:0040CAE4                 jz      short loc_40CAEA
.text:0040CAE6                 add     [esp+97Ch+var_908], eax
.text:0040CAEA
.text:0040CAEA loc_40CAEA:                             ; CODE XREF: sub_40A600+24E4↑j
.text:0040CAEA                 mov     ecx, [esp+97Ch+var_900]
.text:0040CAEE                 test    ecx, ecx
.text:0040CAF0                 jz      short loc_40CAF6
.text:0040CAF2                 add     [esp+97Ch+var_900], eax
.text:0040CAF6
.text:0040CAF6 loc_40CAF6:                             ; CODE XREF: sub_40A600+24F0↑j
.text:0040CAF6                 mov     edx, [esp+97Ch+var_8FC]
.text:0040CAFD                 test    edx, edx
.text:0040CAFF                 jz      loc_40CA5C
.text:0040CB05                 add     [esp+97Ch+var_8FC], eax
.text:0040CB0C                 jmp     loc_40CA5C
.text:0040CB11 ; ---------------------------------------------------------------------------
.text:0040CB11
.text:0040CB11 loc_40CB11:                             ; CODE XREF: sub_40A600+2471↑j
.text:0040CB11                 mov     edi, [esp+97Ch+var_950]
.text:0040CB15                 mov     byte ptr [edi], 0Ch
.text:0040CB18                 jmp     loc_40AA2A
.text:0040CB1D ; ---------------------------------------------------------------------------
.text:0040CB1D
.text:0040CB1D loc_40CB1D:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040CB1D                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040CB1D                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040C8AD case 41
.text:0040CB28                 jnz     def_40C8AD      ; jumptable 0040C8AD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040CB2E                 mov     edi, [esp+97Ch+var_24]
.text:0040CB35                 test    edi, edi
.text:0040CB37                 jnz     loc_40B3A7
.text:0040CB3D                 test    [esp+97Ch+arg_8], 20000h
.text:0040CB48                 jnz     def_40C8AD      ; jumptable 0040C8AD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040CB4E                 jmp     loc_40B4D0
.text:0040CB53 ; ---------------------------------------------------------------------------
.text:0040CB53
.text:0040CB53 loc_40CB53:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040CB53                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040CB53                 test    [esp+97Ch+arg_8], 4000h ; jumptable 0040C8AD cases 49-57
.text:0040CB5E                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CB64                 movzx   ebx, [esp+97Ch+var_8EC]
.text:0040CB6C                 sub     bl, 30h ; '0'
.text:0040CB6F                 movzx   eax, bl
.text:0040CB72                 cmp     eax, [esp+97Ch+var_90C]
.text:0040CB76                 ja      loc_40CC99
.text:0040CB7C                 mov     [esp+97Ch+var_970], eax
.text:0040CB80                 mov     ecx, [esp+97Ch+Block]
.text:0040CB87                 mov     edi, [esp+97Ch+var_28]
.text:0040CB8E                 mov     esi, [esp+97Ch+var_24]
.text:0040CB95                 mov     [esp+97Ch+Size], ecx
.text:0040CB98                 mov     [esp+97Ch+var_978], edi
.text:0040CB9C                 mov     [esp+97Ch+var_974], esi
.text:0040CBA0                 call    sub_409FE0
.text:0040CBA5                 test    al, al
.text:0040CBA7                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CBAD                 mov     esi, [esp+97Ch+arg_C]
.text:0040CBB4                 mov     ebp, [esp+97Ch+var_950]
.text:0040CBB8                 mov     edi, [esi]
.text:0040CBBA                 mov     [esp+97Ch+var_900], ebp
.text:0040CBBE                 mov     edx, [esi+4]
.text:0040CBC1                 sub     ebp, edi
.text:0040CBC3                 mov     [esp+97Ch+var_940], edi
.text:0040CBC7                 add     ebp, 2
.text:0040CBCA                 cmp     ebp, edx
.text:0040CBCC                 jbe     loc_40CC8A
.text:0040CBD2
.text:0040CBD2 loc_40CBD2:                             ; CODE XREF: sub_40A600+2684↓j
.text:0040CBD2                 cmp     edx, 10000h
.text:0040CBD8                 mov     ebp, 0Fh
.text:0040CBDD                 jz      loc_40AA16
.text:0040CBE3                 mov     esi, [esp+97Ch+arg_C]
.text:0040CBEA                 lea     ecx, [edx+edx]
.text:0040CBED                 cmp     ecx, 10000h
.text:0040CBF3                 mov     [esi+4], ecx
.text:0040CBF6                 jbe     short loc_40CBFF
.text:0040CBF8                 mov     dword ptr [esi+4], 10000h
.text:0040CBFF
.text:0040CBFF loc_40CBFF:                             ; CODE XREF: sub_40A600+25F6↑j
.text:0040CBFF                 mov     eax, [esp+97Ch+arg_C]
.text:0040CC06                 mov     ebp, [eax+4]
.text:0040CC09                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CC0C                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040CC10                 mov     ebp, 0Ch
.text:0040CC15                 call    realloc
.text:0040CC1A                 mov     edx, [esp+97Ch+arg_C]
.text:0040CC21                 test    eax, eax
.text:0040CC23                 mov     [edx], eax
.text:0040CC25                 jz      loc_40AA16
.text:0040CC2B                 cmp     [esp+97Ch+var_940], eax
.text:0040CC2F                 jz      short loc_40CC69
.text:0040CC31                 mov     esi, [esp+97Ch+var_940]
.text:0040CC35                 mov     edi, [esp+97Ch+var_908]
.text:0040CC39                 sub     eax, esi
.text:0040CC3B                 add     [esp+97Ch+var_950], eax
.text:0040CC3F                 add     [esp+97Ch+var_904], eax
.text:0040CC43                 test    edi, edi
.text:0040CC45                 jz      short loc_40CC4B
.text:0040CC47                 add     [esp+97Ch+var_908], eax
.text:0040CC4B
.text:0040CC4B loc_40CC4B:                             ; CODE XREF: sub_40A600+2645↑j
.text:0040CC4B                 mov     edx, [esp+97Ch+var_900]
.text:0040CC4F                 test    edx, edx
.text:0040CC51                 jz      short loc_40CC57
.text:0040CC53                 add     [esp+97Ch+var_900], eax
.text:0040CC57
.text:0040CC57 loc_40CC57:                             ; CODE XREF: sub_40A600+2651↑j
.text:0040CC57                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040CC5E                 test    ecx, ecx
.text:0040CC60                 jz      short loc_40CC69
.text:0040CC62                 add     [esp+97Ch+var_8FC], eax
.text:0040CC69
.text:0040CC69 loc_40CC69:                             ; CODE XREF: sub_40A600+262F↑j
.text:0040CC69                                         ; sub_40A600+2660↑j
.text:0040CC69                 mov     eax, [esp+97Ch+arg_C]
.text:0040CC70                 mov     ebp, [esp+97Ch+var_950]
.text:0040CC74                 mov     edi, [eax]
.text:0040CC76                 mov     edx, [eax+4]
.text:0040CC79                 sub     ebp, edi
.text:0040CC7B                 add     ebp, 2
.text:0040CC7E                 mov     [esp+97Ch+var_940], edi
.text:0040CC82                 cmp     ebp, edx
.text:0040CC84                 ja      loc_40CBD2
.text:0040CC8A
.text:0040CC8A loc_40CC8A:                             ; CODE XREF: sub_40A600+25CC↑j
.text:0040CC8A                 mov     edi, [esp+97Ch+var_950]
.text:0040CC8E                 mov     byte ptr [edi], 8
.text:0040CC91                 inc     edi
.text:0040CC92                 mov     [edi], bl
.text:0040CC94                 jmp     loc_40AA2A
.text:0040CC99 ; ---------------------------------------------------------------------------
.text:0040CC99
.text:0040CC99 loc_40CC99:                             ; CODE XREF: sub_40A600+2576↑j
.text:0040CC99                 mov     ebx, [esp+97Ch+Block]
.text:0040CCA0                 mov     ebp, 6
.text:0040CCA5                 jmp     loc_40C668
.text:0040CCAA ; ---------------------------------------------------------------------------
.text:0040CCAA
.text:0040CCAA loc_40CCAA:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040CCAA                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040CCAA                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C8AD case 60
.text:0040CCB5                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CCBB
.text:0040CCBB loc_40CCBB:                             ; CODE XREF: sub_40A600+2731↓j
.text:0040CCBB                                         ; sub_40A600+275E↓j ...
.text:0040CCBB                 mov     eax, [esp+97Ch+arg_C]
.text:0040CCC2                 mov     ebx, [esp+97Ch+var_950]
.text:0040CCC6                 mov     edi, [eax]
.text:0040CCC8                 mov     edx, [eax+4]
.text:0040CCCB                 sub     ebx, edi
.text:0040CCCD                 inc     ebx
.text:0040CCCE                 cmp     ebx, edx
.text:0040CCD0                 jbe     loc_40CD70
.text:0040CCD6                 cmp     edx, 10000h
.text:0040CCDC                 mov     ebp, 0Fh
.text:0040CCE1                 jz      loc_40AA16
.text:0040CCE7                 lea     ebx, [edx+edx]
.text:0040CCEA                 mov     edx, [esp+97Ch+arg_C]
.text:0040CCF1                 cmp     ebx, 10000h
.text:0040CCF7                 mov     [edx+4], ebx
.text:0040CCFA                 jbe     short loc_40CD03
.text:0040CCFC                 mov     dword ptr [edx+4], 10000h
.text:0040CD03
.text:0040CD03 loc_40CD03:                             ; CODE XREF: sub_40A600+26FA↑j
.text:0040CD03                 mov     ebp, [esp+97Ch+arg_C]
.text:0040CD0A                 mov     edx, [ebp+4]
.text:0040CD0D                 mov     ebp, 0Ch
.text:0040CD12                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CD15                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040CD19                 call    realloc
.text:0040CD1E                 mov     ecx, [esp+97Ch+arg_C]
.text:0040CD25                 test    eax, eax
.text:0040CD27                 mov     [ecx], eax
.text:0040CD29                 jz      loc_40AA16
.text:0040CD2F                 cmp     edi, eax
.text:0040CD31                 jz      short loc_40CCBB
.text:0040CD33                 mov     esi, [esp+97Ch+var_908]
.text:0040CD37                 sub     eax, edi
.text:0040CD39                 add     [esp+97Ch+var_950], eax
.text:0040CD3D                 add     [esp+97Ch+var_904], eax
.text:0040CD41                 test    esi, esi
.text:0040CD43                 jz      short loc_40CD49
.text:0040CD45                 add     [esp+97Ch+var_908], eax
.text:0040CD49
.text:0040CD49 loc_40CD49:                             ; CODE XREF: sub_40A600+2743↑j
.text:0040CD49                 mov     edi, [esp+97Ch+var_900]
.text:0040CD4D                 test    edi, edi
.text:0040CD4F                 jz      short loc_40CD55
.text:0040CD51                 add     [esp+97Ch+var_900], eax
.text:0040CD55
.text:0040CD55 loc_40CD55:                             ; CODE XREF: sub_40A600+274F↑j
.text:0040CD55                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040CD5C                 test    ecx, ecx
.text:0040CD5E                 jz      loc_40CCBB
.text:0040CD64                 add     [esp+97Ch+var_8FC], eax
.text:0040CD6B                 jmp     loc_40CCBB
.text:0040CD70 ; ---------------------------------------------------------------------------
.text:0040CD70
.text:0040CD70 loc_40CD70:                             ; CODE XREF: sub_40A600+26D0↑j
.text:0040CD70                 mov     edi, [esp+97Ch+var_950]
.text:0040CD74                 mov     byte ptr [edi], 1Ah
.text:0040CD77                 jmp     loc_40AA2A
.text:0040CD7C ; ---------------------------------------------------------------------------
.text:0040CD7C
.text:0040CD7C loc_40CD7C:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040CD7C                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040CD7C                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C8AD case 62
.text:0040CD87                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CD8D
.text:0040CD8D loc_40CD8D:                             ; CODE XREF: sub_40A600+2803↓j
.text:0040CD8D                                         ; sub_40A600+2830↓j ...
.text:0040CD8D                 mov     eax, [esp+97Ch+arg_C]
.text:0040CD94                 mov     ebp, [esp+97Ch+var_950]
.text:0040CD98                 mov     edi, [eax]
.text:0040CD9A                 mov     edx, [eax+4]
.text:0040CD9D                 sub     ebp, edi
.text:0040CD9F                 inc     ebp
.text:0040CDA0                 cmp     ebp, edx
.text:0040CDA2                 jbe     loc_40CE42
.text:0040CDA8                 cmp     edx, 10000h
.text:0040CDAE                 mov     ebp, 0Fh
.text:0040CDB3                 jz      loc_40AA16
.text:0040CDB9                 lea     ebp, [edx+edx]
.text:0040CDBC                 mov     edx, [esp+97Ch+arg_C]
.text:0040CDC3                 cmp     ebp, 10000h
.text:0040CDC9                 mov     [edx+4], ebp
.text:0040CDCC                 jbe     short loc_40CDD5
.text:0040CDCE                 mov     dword ptr [edx+4], 10000h
.text:0040CDD5
.text:0040CDD5 loc_40CDD5:                             ; CODE XREF: sub_40A600+27CC↑j
.text:0040CDD5                 mov     ebx, [esp+97Ch+arg_C]
.text:0040CDDC                 mov     ebp, 0Ch
.text:0040CDE1                 mov     esi, [ebx+4]
.text:0040CDE4                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CDE7                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040CDEB                 call    realloc
.text:0040CDF0                 mov     edx, [esp+97Ch+arg_C]
.text:0040CDF7                 test    eax, eax
.text:0040CDF9                 mov     [edx], eax
.text:0040CDFB                 jz      loc_40AA16
.text:0040CE01                 cmp     edi, eax
.text:0040CE03                 jz      short loc_40CD8D
.text:0040CE05                 sub     eax, edi
.text:0040CE07                 mov     edi, [esp+97Ch+var_908]
.text:0040CE0B                 add     [esp+97Ch+var_950], eax
.text:0040CE0F                 add     [esp+97Ch+var_904], eax
.text:0040CE13                 test    edi, edi
.text:0040CE15                 jz      short loc_40CE1B
.text:0040CE17                 add     [esp+97Ch+var_908], eax
.text:0040CE1B
.text:0040CE1B loc_40CE1B:                             ; CODE XREF: sub_40A600+2815↑j
.text:0040CE1B                 mov     ecx, [esp+97Ch+var_900]
.text:0040CE1F                 test    ecx, ecx
.text:0040CE21                 jz      short loc_40CE27
.text:0040CE23                 add     [esp+97Ch+var_900], eax
.text:0040CE27
.text:0040CE27 loc_40CE27:                             ; CODE XREF: sub_40A600+2821↑j
.text:0040CE27                 mov     edx, [esp+97Ch+var_8FC]
.text:0040CE2E                 test    edx, edx
.text:0040CE30                 jz      loc_40CD8D
.text:0040CE36                 add     [esp+97Ch+var_8FC], eax
.text:0040CE3D                 jmp     loc_40CD8D
.text:0040CE42 ; ---------------------------------------------------------------------------
.text:0040CE42
.text:0040CE42 loc_40CE42:                             ; CODE XREF: sub_40A600+27A2↑j
.text:0040CE42                 mov     edi, [esp+97Ch+var_950]
.text:0040CE46                 mov     byte ptr [edi], 1Bh
.text:0040CE49                 jmp     loc_40AA2A
.text:0040CE4E ; ---------------------------------------------------------------------------
.text:0040CE4E
.text:0040CE4E loc_40CE4E:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040CE4E                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040CE4E                 test    byte ptr [esp+97Ch+arg_8], 2 ; jumptable 0040C8AD cases 43,63
.text:0040CE56                 jz      def_40C8AD      ; jumptable 0040C8AD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040CE5C                 jmp     loc_40B660      ; jumptable 0040A76F case 42
.text:0040CE61 ; ---------------------------------------------------------------------------
.text:0040CE61
.text:0040CE61 loc_40CE61:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040CE61                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040CE61                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C8AD case 66
.text:0040CE6C                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CE72
.text:0040CE72 loc_40CE72:                             ; CODE XREF: sub_40A600+28E8↓j
.text:0040CE72                                         ; sub_40A600+2915↓j ...
.text:0040CE72                 mov     eax, [esp+97Ch+arg_C]
.text:0040CE79                 mov     ebp, [esp+97Ch+var_950]
.text:0040CE7D                 mov     edi, [eax]
.text:0040CE7F                 mov     edx, [eax+4]
.text:0040CE82                 sub     ebp, edi
.text:0040CE84                 inc     ebp
.text:0040CE85                 cmp     ebp, edx
.text:0040CE87                 jbe     loc_40CF27
.text:0040CE8D                 cmp     edx, 10000h
.text:0040CE93                 mov     ebp, 0Fh
.text:0040CE98                 jz      loc_40AA16
.text:0040CE9E                 lea     ebx, [edx+edx]
.text:0040CEA1                 mov     edx, [esp+97Ch+arg_C]
.text:0040CEA8                 cmp     ebx, 10000h
.text:0040CEAE                 mov     [edx+4], ebx
.text:0040CEB1                 jbe     short loc_40CEBA
.text:0040CEB3                 mov     dword ptr [edx+4], 10000h
.text:0040CEBA
.text:0040CEBA loc_40CEBA:                             ; CODE XREF: sub_40A600+28B1↑j
.text:0040CEBA                 mov     esi, [esp+97Ch+arg_C]
.text:0040CEC1                 mov     ebp, [esi+4]
.text:0040CEC4                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CEC7                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040CECB                 mov     ebp, 0Ch
.text:0040CED0                 call    realloc
.text:0040CED5                 mov     edx, [esp+97Ch+arg_C]
.text:0040CEDC                 test    eax, eax
.text:0040CEDE                 mov     [edx], eax
.text:0040CEE0                 jz      loc_40AA16
.text:0040CEE6                 cmp     edi, eax
.text:0040CEE8                 jz      short loc_40CE72
.text:0040CEEA                 sub     eax, edi
.text:0040CEEC                 mov     edi, [esp+97Ch+var_908]
.text:0040CEF0                 add     [esp+97Ch+var_950], eax
.text:0040CEF4                 add     [esp+97Ch+var_904], eax
.text:0040CEF8                 test    edi, edi
.text:0040CEFA                 jz      short loc_40CF00
.text:0040CEFC                 add     [esp+97Ch+var_908], eax
.text:0040CF00
.text:0040CF00 loc_40CF00:                             ; CODE XREF: sub_40A600+28FA↑j
.text:0040CF00                 mov     ecx, [esp+97Ch+var_900]
.text:0040CF04                 test    ecx, ecx
.text:0040CF06                 jz      short loc_40CF0C
.text:0040CF08                 add     [esp+97Ch+var_900], eax
.text:0040CF0C
.text:0040CF0C loc_40CF0C:                             ; CODE XREF: sub_40A600+2906↑j
.text:0040CF0C                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040CF13                 test    ebx, ebx
.text:0040CF15                 jz      loc_40CE72
.text:0040CF1B                 add     [esp+97Ch+var_8FC], eax
.text:0040CF22                 jmp     loc_40CE72
.text:0040CF27 ; ---------------------------------------------------------------------------
.text:0040CF27
.text:0040CF27 loc_40CF27:                             ; CODE XREF: sub_40A600+2887↑j
.text:0040CF27                 mov     edi, [esp+97Ch+var_950]
.text:0040CF2B                 mov     byte ptr [edi], 1Dh
.text:0040CF2E                 jmp     loc_40AA2A
.text:0040CF33 ; ---------------------------------------------------------------------------
.text:0040CF33
.text:0040CF33 loc_40CF33:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040CF33                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040CF33                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C8AD case 87
.text:0040CF3E                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CF44                 mov     ecx, [esp+97Ch+arg_C]
.text:0040CF4B                 mov     esi, [esp+97Ch+var_950]
.text:0040CF4F                 mov     edi, [ecx]
.text:0040CF51                 mov     [esp+97Ch+var_900], esi
.text:0040CF55                 mov     edx, [ecx+4]
.text:0040CF58                 sub     esi, edi
.text:0040CF5A                 inc     esi
.text:0040CF5B                 mov     ebx, edi
.text:0040CF5D                 cmp     esi, edx
.text:0040CF5F                 jbe     loc_40D01A
.text:0040CF65
.text:0040CF65 loc_40CF65:                             ; CODE XREF: sub_40A600+2A14↓j
.text:0040CF65                 cmp     edx, 10000h
.text:0040CF6B                 mov     ebp, 0Fh
.text:0040CF70                 jz      loc_40AA16
.text:0040CF76                 mov     esi, [esp+97Ch+arg_C]
.text:0040CF7D                 lea     ebp, [edx+edx]
.text:0040CF80                 cmp     ebp, 10000h
.text:0040CF86                 mov     [esi+4], ebp
.text:0040CF89                 jbe     short loc_40CF92
.text:0040CF8B                 mov     dword ptr [esi+4], 10000h
.text:0040CF92
.text:0040CF92 loc_40CF92:                             ; CODE XREF: sub_40A600+2989↑j
.text:0040CF92                 mov     eax, [esp+97Ch+arg_C]
.text:0040CF99                 mov     ebp, 0Ch
.text:0040CF9E                 mov     esi, [eax+4]
.text:0040CFA1                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CFA4                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040CFA8                 call    realloc
.text:0040CFAD                 mov     edi, [esp+97Ch+arg_C]
.text:0040CFB4                 test    eax, eax
.text:0040CFB6                 mov     [edi], eax
.text:0040CFB8                 jz      loc_40AA16
.text:0040CFBE                 cmp     ebx, eax
.text:0040CFC0                 jz      short loc_40CFF6
.text:0040CFC2                 sub     eax, ebx
.text:0040CFC4                 mov     ebx, [esp+97Ch+var_908]
.text:0040CFC8                 add     [esp+97Ch+var_950], eax
.text:0040CFCC                 add     [esp+97Ch+var_904], eax
.text:0040CFD0                 test    ebx, ebx
.text:0040CFD2                 jz      short loc_40CFD8
.text:0040CFD4                 add     [esp+97Ch+var_908], eax
.text:0040CFD8
.text:0040CFD8 loc_40CFD8:                             ; CODE XREF: sub_40A600+29D2↑j
.text:0040CFD8                 mov     ecx, [esp+97Ch+var_900]
.text:0040CFDC                 test    ecx, ecx
.text:0040CFDE                 jz      short loc_40CFE4
.text:0040CFE0                 add     [esp+97Ch+var_900], eax
.text:0040CFE4
.text:0040CFE4 loc_40CFE4:                             ; CODE XREF: sub_40A600+29DE↑j
.text:0040CFE4                 mov     edx, [esp+97Ch+var_8FC]
.text:0040CFEB                 test    edx, edx
.text:0040CFED                 jz      short loc_40CFF6
.text:0040CFEF                 add     [esp+97Ch+var_8FC], eax
.text:0040CFF6
.text:0040CFF6 loc_40CFF6:                             ; CODE XREF: sub_40A600+29C0↑j
.text:0040CFF6                                         ; sub_40A600+29ED↑j
.text:0040CFF6                 mov     esi, [esp+97Ch+arg_C]
.text:0040CFFD                 mov     eax, [esp+97Ch+arg_C]
.text:0040D004                 mov     ebp, [esp+97Ch+var_950]
.text:0040D008                 mov     edi, [esi]
.text:0040D00A                 mov     edx, [eax+4]
.text:0040D00D                 sub     ebp, edi
.text:0040D00F                 inc     ebp
.text:0040D010                 mov     ebx, edi
.text:0040D012                 cmp     ebp, edx
.text:0040D014                 ja      loc_40CF65
.text:0040D01A
.text:0040D01A loc_40D01A:                             ; CODE XREF: sub_40A600+295F↑j
.text:0040D01A                 mov     edi, [esp+97Ch+var_950]
.text:0040D01E                 mov     byte ptr [edi], 19h
.text:0040D021                 jmp     loc_40AA2A
.text:0040D026 ; ---------------------------------------------------------------------------
.text:0040D026
.text:0040D026 loc_40D026:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040D026                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040D026                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C8AD case 96
.text:0040D031                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040D037
.text:0040D037 loc_40D037:                             ; CODE XREF: sub_40A600+2AAD↓j
.text:0040D037                                         ; sub_40A600+2ADA↓j ...
.text:0040D037                 mov     eax, [esp+97Ch+arg_C]
.text:0040D03E                 mov     ebx, [esp+97Ch+var_950]
.text:0040D042                 mov     edi, [eax]
.text:0040D044                 mov     edx, [eax+4]
.text:0040D047                 sub     ebx, edi
.text:0040D049                 inc     ebx
.text:0040D04A                 cmp     ebx, edx
.text:0040D04C                 jbe     loc_40D0EC
.text:0040D052                 cmp     edx, 10000h
.text:0040D058                 mov     ebp, 0Fh
.text:0040D05D                 jz      loc_40AA16
.text:0040D063                 lea     esi, [edx+edx]
.text:0040D066                 mov     edx, [esp+97Ch+arg_C]
.text:0040D06D                 cmp     esi, 10000h
.text:0040D073                 mov     [edx+4], esi
.text:0040D076                 jbe     short loc_40D07F
.text:0040D078                 mov     dword ptr [edx+4], 10000h
.text:0040D07F
.text:0040D07F loc_40D07F:                             ; CODE XREF: sub_40A600+2A76↑j
.text:0040D07F                 mov     ebp, [esp+97Ch+arg_C]
.text:0040D086                 mov     ebx, [ebp+4]
.text:0040D089                 mov     ebp, 0Ch
.text:0040D08E                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D091                 mov     [esp+97Ch+var_978], ebx ; Size
.text:0040D095                 call    realloc
.text:0040D09A                 mov     edx, [esp+97Ch+arg_C]
.text:0040D0A1                 test    eax, eax
.text:0040D0A3                 mov     [edx], eax
.text:0040D0A5                 jz      loc_40AA16
.text:0040D0AB                 cmp     edi, eax
.text:0040D0AD                 jz      short loc_40D037
.text:0040D0AF                 mov     ecx, [esp+97Ch+var_908]
.text:0040D0B3                 sub     eax, edi
.text:0040D0B5                 add     [esp+97Ch+var_950], eax
.text:0040D0B9                 add     [esp+97Ch+var_904], eax
.text:0040D0BD                 test    ecx, ecx
.text:0040D0BF                 jz      short loc_40D0C5
.text:0040D0C1                 add     [esp+97Ch+var_908], eax
.text:0040D0C5
.text:0040D0C5 loc_40D0C5:                             ; CODE XREF: sub_40A600+2ABF↑j
.text:0040D0C5                 mov     edi, [esp+97Ch+var_900]
.text:0040D0C9                 test    edi, edi
.text:0040D0CB                 jz      short loc_40D0D1
.text:0040D0CD                 add     [esp+97Ch+var_900], eax
.text:0040D0D1
.text:0040D0D1 loc_40D0D1:                             ; CODE XREF: sub_40A600+2ACB↑j
.text:0040D0D1                 mov     esi, [esp+97Ch+var_8FC]
.text:0040D0D8                 test    esi, esi
.text:0040D0DA                 jz      loc_40D037
.text:0040D0E0                 add     [esp+97Ch+var_8FC], eax
.text:0040D0E7                 jmp     loc_40D037
.text:0040D0EC ; ---------------------------------------------------------------------------
.text:0040D0EC
.text:0040D0EC loc_40D0EC:                             ; CODE XREF: sub_40A600+2A4C↑j
.text:0040D0EC                 mov     edi, [esp+97Ch+var_950]
.text:0040D0F0                 mov     byte ptr [edi], 0Bh
.text:0040D0F3                 jmp     loc_40AA2A
.text:0040D0F8 ; ---------------------------------------------------------------------------
.text:0040D0F8
.text:0040D0F8 loc_40D0F8:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040D0F8                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040D0F8                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C8AD case 98
.text:0040D103                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040D109
.text:0040D109 loc_40D109:                             ; CODE XREF: sub_40A600+2B7F↓j
.text:0040D109                                         ; sub_40A600+2BAC↓j ...
.text:0040D109                 mov     eax, [esp+97Ch+arg_C]
.text:0040D110                 mov     ecx, [esp+97Ch+var_950]
.text:0040D114                 mov     edi, [eax]
.text:0040D116                 mov     edx, [eax+4]
.text:0040D119                 sub     ecx, edi
.text:0040D11B                 inc     ecx
.text:0040D11C                 cmp     ecx, edx
.text:0040D11E                 jbe     loc_40D1BE
.text:0040D124                 cmp     edx, 10000h
.text:0040D12A                 mov     ebp, 0Fh
.text:0040D12F                 jz      loc_40AA16
.text:0040D135                 lea     esi, [edx+edx]
.text:0040D138                 mov     edx, [esp+97Ch+arg_C]
.text:0040D13F                 cmp     esi, 10000h
.text:0040D145                 mov     [edx+4], esi
.text:0040D148                 jbe     short loc_40D151
.text:0040D14A                 mov     dword ptr [edx+4], 10000h
.text:0040D151
.text:0040D151 loc_40D151:                             ; CODE XREF: sub_40A600+2B48↑j
.text:0040D151                 mov     edx, [esp+97Ch+arg_C]
.text:0040D158                 mov     ebp, 0Ch
.text:0040D15D                 mov     ebx, [edx+4]
.text:0040D160                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D163                 mov     [esp+97Ch+var_978], ebx ; Size
.text:0040D167                 call    realloc
.text:0040D16C                 mov     ecx, [esp+97Ch+arg_C]
.text:0040D173                 test    eax, eax
.text:0040D175                 mov     [ecx], eax
.text:0040D177                 jz      loc_40AA16
.text:0040D17D                 cmp     edi, eax
.text:0040D17F                 jz      short loc_40D109
.text:0040D181                 mov     ebp, [esp+97Ch+var_908]
.text:0040D185                 sub     eax, edi
.text:0040D187                 add     [esp+97Ch+var_950], eax
.text:0040D18B                 add     [esp+97Ch+var_904], eax
.text:0040D18F                 test    ebp, ebp
.text:0040D191                 jz      short loc_40D197
.text:0040D193                 add     [esp+97Ch+var_908], eax
.text:0040D197
.text:0040D197 loc_40D197:                             ; CODE XREF: sub_40A600+2B91↑j
.text:0040D197                 mov     edi, [esp+97Ch+var_900]
.text:0040D19B                 test    edi, edi
.text:0040D19D                 jz      short loc_40D1A3
.text:0040D19F                 add     [esp+97Ch+var_900], eax
.text:0040D1A3
.text:0040D1A3 loc_40D1A3:                             ; CODE XREF: sub_40A600+2B9D↑j
.text:0040D1A3                 mov     esi, [esp+97Ch+var_8FC]
.text:0040D1AA                 test    esi, esi
.text:0040D1AC                 jz      loc_40D109
.text:0040D1B2                 add     [esp+97Ch+var_8FC], eax
.text:0040D1B9                 jmp     loc_40D109
.text:0040D1BE ; ---------------------------------------------------------------------------
.text:0040D1BE
.text:0040D1BE loc_40D1BE:                             ; CODE XREF: sub_40A600+2B1E↑j
.text:0040D1BE                 mov     edi, [esp+97Ch+var_950]
.text:0040D1C2                 mov     byte ptr [edi], 1Ch
.text:0040D1C5                 jmp     loc_40AA2A
.text:0040D1CA ; ---------------------------------------------------------------------------
.text:0040D1CA
.text:0040D1CA loc_40D1CA:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040D1CA                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040D1CA                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C8AD case 119
.text:0040D1D5                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040D1DB                 mov     eax, [esp+97Ch+arg_C]
.text:0040D1E2                 mov     ecx, [esp+97Ch+var_950]
.text:0040D1E6                 mov     edi, [eax]
.text:0040D1E8                 mov     [esp+97Ch+var_900], ecx
.text:0040D1EC                 mov     esi, ecx
.text:0040D1EE                 mov     edx, [eax+4]
.text:0040D1F1                 sub     esi, edi
.text:0040D1F3                 mov     ebx, edi
.text:0040D1F5                 inc     esi
.text:0040D1F6                 cmp     esi, edx
.text:0040D1F8                 jbe     loc_40D2B3
.text:0040D1FE
.text:0040D1FE loc_40D1FE:                             ; CODE XREF: sub_40A600+2CAD↓j
.text:0040D1FE                 cmp     edx, 10000h
.text:0040D204                 mov     ebp, 0Fh
.text:0040D209                 jz      loc_40AA16
.text:0040D20F                 mov     esi, [esp+97Ch+arg_C]
.text:0040D216                 lea     ebp, [edx+edx]
.text:0040D219                 cmp     ebp, 10000h
.text:0040D21F                 mov     [esi+4], ebp
.text:0040D222                 jbe     short loc_40D22B
.text:0040D224                 mov     dword ptr [esi+4], 10000h
.text:0040D22B
.text:0040D22B loc_40D22B:                             ; CODE XREF: sub_40A600+2C22↑j
.text:0040D22B                 mov     eax, [esp+97Ch+arg_C]
.text:0040D232                 mov     ebp, 0Ch
.text:0040D237                 mov     esi, [eax+4]
.text:0040D23A                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D23D                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040D241                 call    realloc
.text:0040D246                 mov     edx, [esp+97Ch+arg_C]
.text:0040D24D                 test    eax, eax
.text:0040D24F                 mov     [edx], eax
.text:0040D251                 jz      loc_40AA16
.text:0040D257                 cmp     ebx, eax
.text:0040D259                 jz      short loc_40D28F
.text:0040D25B                 sub     eax, ebx
.text:0040D25D                 mov     ebx, [esp+97Ch+var_908]
.text:0040D261                 add     [esp+97Ch+var_950], eax
.text:0040D265                 add     [esp+97Ch+var_904], eax
.text:0040D269                 test    ebx, ebx
.text:0040D26B                 jz      short loc_40D271
.text:0040D26D                 add     [esp+97Ch+var_908], eax
.text:0040D271
.text:0040D271 loc_40D271:                             ; CODE XREF: sub_40A600+2C6B↑j
.text:0040D271                 mov     edi, [esp+97Ch+var_900]
.text:0040D275                 test    edi, edi
.text:0040D277                 jz      short loc_40D27D
.text:0040D279                 add     [esp+97Ch+var_900], eax
.text:0040D27D
.text:0040D27D loc_40D27D:                             ; CODE XREF: sub_40A600+2C77↑j
.text:0040D27D                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040D284                 test    ecx, ecx
.text:0040D286                 jz      short loc_40D28F
.text:0040D288                 add     [esp+97Ch+var_8FC], eax
.text:0040D28F
.text:0040D28F loc_40D28F:                             ; CODE XREF: sub_40A600+2C59↑j
.text:0040D28F                                         ; sub_40A600+2C86↑j
.text:0040D28F                 mov     edx, [esp+97Ch+arg_C]
.text:0040D296                 mov     eax, [esp+97Ch+arg_C]
.text:0040D29D                 mov     ebp, [esp+97Ch+var_950]
.text:0040D2A1                 mov     edi, [edx]
.text:0040D2A3                 mov     edx, [eax+4]
.text:0040D2A6                 sub     ebp, edi
.text:0040D2A8                 inc     ebp
.text:0040D2A9                 mov     ebx, edi
.text:0040D2AB                 cmp     ebp, edx
.text:0040D2AD                 ja      loc_40D1FE
.text:0040D2B3
.text:0040D2B3 loc_40D2B3:                             ; CODE XREF: sub_40A600+2BF8↑j
.text:0040D2B3                 mov     edi, [esp+97Ch+var_950]
.text:0040D2B7                 mov     byte ptr [edi], 18h
.text:0040D2BA                 jmp     loc_40AA2A
.text:0040D2BF ; ---------------------------------------------------------------------------
.text:0040D2BF
.text:0040D2BF loc_40D2BF:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040D2BF                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040D2BF                 mov     ebx, [esp+97Ch+arg_8] ; jumptable 0040C8AD case 123
.text:0040D2C6                 and     ebx, 1200h
.text:0040D2CC                 cmp     ebx, 200h
.text:0040D2D2                 jnz     def_40C8AD      ; jumptable 0040C8AD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040D2D8
.text:0040D2D8 loc_40D2D8:                             ; CODE XREF: sub_40A600+329D↓j
.text:0040D2D8                 mov     [esp+97Ch+var_934], 0FFFFFFFFh
.text:0040D2E0                 mov     edi, [esp+97Ch+var_8D0]
.text:0040D2E7                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040D2EE                 mov     [esp+97Ch+var_938], 0FFFFFFFFh
.text:0040D2F6                 mov     ecx, edi
.text:0040D2F8                 jz      loc_40D3B9
.text:0040D2FE
.text:0040D2FE loc_40D2FE:                             ; CODE XREF: sub_40A600+2D74↓j
.text:0040D2FE                 movzx   eax, byte ptr [edi]
.text:0040D301                 inc     edi
.text:0040D302                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040D309                 mov     [esp+97Ch+var_8D0], edi
.text:0040D310                 test    ebp, ebp
.text:0040D312                 mov     [esp+97Ch+var_8EC], al
.text:0040D319                 jz      short loc_40D330
.text:0040D31B                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040D322                 movzx   esi, al
.text:0040D325                 movzx   ebx, byte ptr [esi+ebp]
.text:0040D329                 mov     [esp+97Ch+var_8EC], bl
.text:0040D330
.text:0040D330 loc_40D330:                             ; CODE XREF: sub_40A600+2D19↑j
.text:0040D330                 movzx   edx, [esp+97Ch+var_8EC]
.text:0040D338                 sub     dl, 30h ; '0'
.text:0040D33B                 cmp     dl, 9
.text:0040D33E                 ja      short loc_40D376
.text:0040D340                 cmp     [esp+97Ch+var_934], 7FFFh
.text:0040D348                 jg      short loc_40D36D
.text:0040D34A                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040D352                 mov     edx, [esp+97Ch+var_934]
.text:0040D356                 shr     edx, 1Fh
.text:0040D359                 dec     edx
.text:0040D35A                 and     [esp+97Ch+var_934], edx
.text:0040D35E                 mov     eax, [esp+97Ch+var_934]
.text:0040D362                 lea     esi, [eax+eax*4]
.text:0040D365                 lea     ebx, [ebp+esi*2-30h]
.text:0040D369                 mov     [esp+97Ch+var_934], ebx
.text:0040D36D
.text:0040D36D loc_40D36D:                             ; CODE XREF: sub_40A600+2D48↑j
.text:0040D36D                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040D374                 jnz     short loc_40D2FE
.text:0040D376
.text:0040D376 loc_40D376:                             ; CODE XREF: sub_40A600+2D3E↑j
.text:0040D376                 cmp     [esp+97Ch+var_8EC], 2Ch ; ','
.text:0040D37E                 jz      loc_40D7C4
.text:0040D384                 mov     ebx, [esp+97Ch+var_934]
.text:0040D388                 mov     [esp+97Ch+var_938], ebx
.text:0040D38C
.text:0040D38C loc_40D38C:                             ; CODE XREF: sub_40A600+3256↓j
.text:0040D38C                                         ; sub_40A600+3264↓j
.text:0040D38C                 mov     esi, [esp+97Ch+var_934]
.text:0040D390                 test    esi, esi
.text:0040D392                 js      short loc_40D3B9
.text:0040D394                 mov     ebp, [esp+97Ch+var_938]
.text:0040D398                 cmp     [esp+97Ch+var_934], ebp
.text:0040D39C                 jg      short loc_40D3B9
.text:0040D39E                 test    [esp+97Ch+arg_8], 1000h
.text:0040D3A9                 jnz     loc_40D45A
.text:0040D3AF                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:0040D3B7                 jz      short loc_40D416
.text:0040D3B9
.text:0040D3B9 loc_40D3B9:                             ; CODE XREF: sub_40A600+2CF8↑j
.text:0040D3B9                                         ; sub_40A600+2D92↑j ...
.text:0040D3B9                 test    [esp+97Ch+arg_8], 200000h
.text:0040D3C4                 jz      short loc_40D3EB
.text:0040D3C6
.text:0040D3C6 loc_40D3C6:                             ; CODE XREF: sub_40A600+31B1↓j
.text:0040D3C6                 test    [esp+97Ch+arg_8], 1000h
.text:0040D3D1                 mov     [esp+97Ch+var_8D0], ecx
.text:0040D3D8                 mov     [esp+97Ch+var_8EC], 7Bh ; '{'
.text:0040D3E0                 jz      def_40C8AD      ; jumptable 0040C8AD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040D3E6                 jmp     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040D3EB ; ---------------------------------------------------------------------------
.text:0040D3EB
.text:0040D3EB loc_40D3EB:                             ; CODE XREF: sub_40A600+2DC4↑j
.text:0040D3EB                 mov     edi, [esp+97Ch+Block]
.text:0040D3F2                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D3F5                 call    free
.text:0040D3FA                 mov     ebp, [esp+97Ch+var_8F4]
.text:0040D401                 cmp     [esp+97Ch+var_8D0], ebp
.text:0040D408                 setnz   cl
.text:0040D40B                 movzx   ebx, cl
.text:0040D40E                 lea     ebp, [ebx+9]
.text:0040D411                 jmp     loc_40AA16
.text:0040D416 ; ---------------------------------------------------------------------------
.text:0040D416
.text:0040D416 loc_40D416:                             ; CODE XREF: sub_40A600+2DB7↑j
.text:0040D416                 mov     eax, [esp+97Ch+var_8D0]
.text:0040D41D                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040D424                 jz      short loc_40D3B9
.text:0040D426                 movzx   edx, byte ptr [eax]
.text:0040D429                 lea     ebx, [eax+1]
.text:0040D42C                 mov     eax, [esp+97Ch+var_8F8]
.text:0040D433                 mov     [esp+97Ch+var_8D0], ebx
.text:0040D43A                 test    eax, eax
.text:0040D43C                 mov     [esp+97Ch+var_8EC], dl
.text:0040D443                 jz      short loc_40D45A
.text:0040D445                 mov     esi, [esp+97Ch+var_8F8]
.text:0040D44C                 movzx   edi, dl
.text:0040D44F                 movzx   edx, byte ptr [edi+esi]
.text:0040D453                 mov     [esp+97Ch+var_8EC], dl
.text:0040D45A
.text:0040D45A loc_40D45A:                             ; CODE XREF: sub_40A600+2DA9↑j
.text:0040D45A                                         ; sub_40A600+2E43↑j
.text:0040D45A                 cmp     [esp+97Ch+var_8EC], 7Dh ; '}'
.text:0040D462                 jnz     loc_40D3B9
.text:0040D468                 mov     ebp, [esp+97Ch+var_900]
.text:0040D46C                 test    ebp, ebp
.text:0040D46E                 jz      loc_40D793
.text:0040D474
.text:0040D474 loc_40D474:                             ; CODE XREF: sub_40A600+31BF↓j
.text:0040D474                 cmp     [esp+97Ch+var_938], 7FFFh
.text:0040D47C                 jg      loc_40D782
.text:0040D482                 mov     eax, [esp+97Ch+var_938]
.text:0040D486                 test    eax, eax
.text:0040D488                 jnz     loc_40D59F
.text:0040D48E                 mov     edx, [esp+97Ch+arg_C]
.text:0040D495                 mov     ebp, [esp+97Ch+arg_C]
.text:0040D49C                 mov     esi, [esp+97Ch+var_950]
.text:0040D4A0                 mov     edi, [edx]
.text:0040D4A2                 mov     edx, [ebp+4]
.text:0040D4A5                 sub     esi, edi
.text:0040D4A7                 add     esi, 3
.text:0040D4AA                 mov     ebx, edi
.text:0040D4AC                 cmp     esi, edx
.text:0040D4AE                 jbe     loc_40D56B
.text:0040D4B4
.text:0040D4B4 loc_40D4B4:                             ; CODE XREF: sub_40A600+2F65↓j
.text:0040D4B4                 cmp     edx, 10000h
.text:0040D4BA                 mov     ebp, 0Fh
.text:0040D4BF                 jz      loc_40AA16
.text:0040D4C5                 mov     esi, [esp+97Ch+arg_C]
.text:0040D4CC                 lea     ecx, [edx+edx]
.text:0040D4CF                 cmp     ecx, 10000h
.text:0040D4D5                 mov     [esi+4], ecx
.text:0040D4D8                 jbe     short loc_40D4E1
.text:0040D4DA                 mov     dword ptr [esi+4], 10000h
.text:0040D4E1
.text:0040D4E1 loc_40D4E1:                             ; CODE XREF: sub_40A600+2ED8↑j
.text:0040D4E1                 mov     eax, [esp+97Ch+arg_C]
.text:0040D4E8                 mov     ebp, 0Ch
.text:0040D4ED                 mov     esi, [eax+4]
.text:0040D4F0                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D4F3                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040D4F7                 call    realloc
.text:0040D4FC                 mov     edi, [esp+97Ch+arg_C]
.text:0040D503                 test    eax, eax
.text:0040D505                 mov     [edi], eax
.text:0040D507                 jz      loc_40AA16
.text:0040D50D                 cmp     ebx, eax
.text:0040D50F                 jz      short loc_40D545
.text:0040D511                 sub     eax, ebx
.text:0040D513                 mov     ebx, [esp+97Ch+var_908]
.text:0040D517                 add     [esp+97Ch+var_950], eax
.text:0040D51B                 add     [esp+97Ch+var_904], eax
.text:0040D51F                 test    ebx, ebx
.text:0040D521                 jz      short loc_40D527
.text:0040D523                 add     [esp+97Ch+var_908], eax
.text:0040D527
.text:0040D527 loc_40D527:                             ; CODE XREF: sub_40A600+2F21↑j
.text:0040D527                 mov     edx, [esp+97Ch+var_900]
.text:0040D52B                 test    edx, edx
.text:0040D52D                 jz      short loc_40D533
.text:0040D52F                 add     [esp+97Ch+var_900], eax
.text:0040D533
.text:0040D533 loc_40D533:                             ; CODE XREF: sub_40A600+2F2D↑j
.text:0040D533                 mov     ebp, [esp+97Ch+var_8FC]
.text:0040D53A                 test    ebp, ebp
.text:0040D53C                 jz      short loc_40D545
.text:0040D53E                 add     [esp+97Ch+var_8FC], eax
.text:0040D545
.text:0040D545 loc_40D545:                             ; CODE XREF: sub_40A600+2F0F↑j
.text:0040D545                                         ; sub_40A600+2F3C↑j
.text:0040D545                 mov     esi, [esp+97Ch+arg_C]
.text:0040D54C                 mov     eax, [esp+97Ch+arg_C]
.text:0040D553                 mov     ecx, [esp+97Ch+var_950]
.text:0040D557                 mov     edi, [esi]
.text:0040D559                 mov     edx, [eax+4]
.text:0040D55C                 sub     ecx, edi
.text:0040D55E                 add     ecx, 3
.text:0040D561                 mov     ebx, edi
.text:0040D563                 cmp     ecx, edx
.text:0040D565                 ja      loc_40D4B4
.text:0040D56B
.text:0040D56B loc_40D56B:                             ; CODE XREF: sub_40A600+2EAE↑j
.text:0040D56B                 mov     [esp+97Ch+Size], 0Dh
.text:0040D572                 mov     ebx, [esp+97Ch+var_950]
.text:0040D576                 mov     ebp, [esp+97Ch+var_900]
.text:0040D57A                 mov     edi, [esp+97Ch+var_900]
.text:0040D57E                 mov     edx, ebx
.text:0040D580                 sub     edx, ebp
.text:0040D582                 mov     [esp+97Ch+var_970], ebx
.text:0040D586                 add     ebx, 3
.text:0040D589                 mov     [esp+97Ch+var_974], edx
.text:0040D58D                 mov     [esp+97Ch+var_978], edi
.text:0040D591                 call    sub_407420
.text:0040D596                 mov     [esp+97Ch+var_950], ebx
.text:0040D59A                 jmp     loc_40B348
.text:0040D59F ; ---------------------------------------------------------------------------
.text:0040D59F
.text:0040D59F loc_40D59F:                             ; CODE XREF: sub_40A600+2E88↑j
.text:0040D59F                 cmp     [esp+97Ch+var_938], 1
.text:0040D5A4                 mov     [esp+97Ch+var_93C], 14h
.text:0040D5AC                 jg      loc_40D66A
.text:0040D5B2                 mov     [esp+97Ch+var_93C], 0Ah
.text:0040D5BA                 mov     ecx, [esp+97Ch+arg_C]
.text:0040D5C1                 mov     eax, [esp+97Ch+var_950]
.text:0040D5C5                 mov     edi, [ecx]
.text:0040D5C7                 mov     edx, [ecx+4]
.text:0040D5CA                 sub     eax, edi
.text:0040D5CC                 mov     ebx, edi
.text:0040D5CE                 add     eax, 0Ah
.text:0040D5D1
.text:0040D5D1 loc_40D5D1:                             ; CODE XREF: sub_40A600+308B↓j
.text:0040D5D1                 cmp     eax, edx
.text:0040D5D3                 jbe     loc_40D690
.text:0040D5D9                 cmp     edx, 10000h
.text:0040D5DF                 mov     ebp, 0Fh
.text:0040D5E4                 jz      loc_40AA16
.text:0040D5EA                 mov     esi, [esp+97Ch+arg_C]
.text:0040D5F1                 lea     ebp, [edx+edx]
.text:0040D5F4                 cmp     ebp, 10000h
.text:0040D5FA                 mov     [esi+4], ebp
.text:0040D5FD                 jbe     short loc_40D606
.text:0040D5FF                 mov     dword ptr [esi+4], 10000h
.text:0040D606
.text:0040D606 loc_40D606:                             ; CODE XREF: sub_40A600+2FFD↑j
.text:0040D606                 mov     eax, [esp+97Ch+arg_C]
.text:0040D60D                 mov     ebp, 0Ch
.text:0040D612                 mov     esi, [eax+4]
.text:0040D615                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D618                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040D61C                 call    realloc
.text:0040D621                 mov     edi, [esp+97Ch+arg_C]
.text:0040D628                 test    eax, eax
.text:0040D62A                 mov     [edi], eax
.text:0040D62C                 jz      loc_40AA16
.text:0040D632                 cmp     ebx, eax
.text:0040D634                 jz      short loc_40D66A
.text:0040D636                 mov     edx, [esp+97Ch+var_908]
.text:0040D63A                 sub     eax, ebx
.text:0040D63C                 add     [esp+97Ch+var_950], eax
.text:0040D640                 add     [esp+97Ch+var_904], eax
.text:0040D644                 test    edx, edx
.text:0040D646                 jz      short loc_40D64C
.text:0040D648                 add     [esp+97Ch+var_908], eax
.text:0040D64C
.text:0040D64C loc_40D64C:                             ; CODE XREF: sub_40A600+3046↑j
.text:0040D64C                 mov     ebx, [esp+97Ch+var_900]
.text:0040D650                 test    ebx, ebx
.text:0040D652                 jz      short loc_40D658
.text:0040D654                 add     [esp+97Ch+var_900], eax
.text:0040D658
.text:0040D658 loc_40D658:                             ; CODE XREF: sub_40A600+3052↑j
.text:0040D658                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040D65F                 test    ecx, ecx
.text:0040D661                 jz      short loc_40D66A
.text:0040D663                 add     [esp+97Ch+var_8FC], eax
.text:0040D66A
.text:0040D66A loc_40D66A:                             ; CODE XREF: sub_40A600+2FAC↑j
.text:0040D66A                                         ; sub_40A600+3034↑j ...
.text:0040D66A                 mov     eax, [esp+97Ch+arg_C]
.text:0040D671                 mov     ebp, [esp+97Ch+arg_C]
.text:0040D678                 mov     esi, [esp+97Ch+var_93C]
.text:0040D67C                 mov     edi, [eax]
.text:0040D67E                 mov     eax, [esp+97Ch+var_950]
.text:0040D682                 mov     edx, [ebp+4]
.text:0040D685                 mov     ebx, edi
.text:0040D687                 sub     eax, edi
.text:0040D689                 add     eax, esi
.text:0040D68B                 jmp     loc_40D5D1
.text:0040D690 ; ---------------------------------------------------------------------------
.text:0040D690
.text:0040D690 loc_40D690:                             ; CODE XREF: sub_40A600+2FD3↑j
.text:0040D690                 mov     edi, [esp+97Ch+var_950]
.text:0040D694                 mov     edx, [esp+97Ch+var_934]
.text:0040D698                 mov     [esp+97Ch+var_96C], edi
.text:0040D69C                 add     edi, 5
.text:0040D69F                 cmp     [esp+97Ch+var_938], 1
.text:0040D6A4                 mov     [esp+97Ch+var_970], edx
.text:0040D6A8                 jle     loc_40D772
.text:0040D6AE                 mov     ebx, [esp+97Ch+var_900]
.text:0040D6B2                 mov     eax, edi
.text:0040D6B4                 sub     eax, ebx
.text:0040D6B6                 add     eax, 2
.text:0040D6B9
.text:0040D6B9 loc_40D6B9:                             ; CODE XREF: sub_40A600+317D↓j
.text:0040D6B9                 mov     [esp+97Ch+var_974], eax
.text:0040D6BD                 mov     esi, [esp+97Ch+var_900]
.text:0040D6C1                 mov     [esp+97Ch+Size], 15h
.text:0040D6C8                 mov     [esp+97Ch+var_978], esi
.text:0040D6CC                 call    sub_407460
.text:0040D6D1                 mov     [esp+97Ch+var_950], edi
.text:0040D6D5                 mov     ebp, [esp+97Ch+var_934]
.text:0040D6D9                 mov     [esp+97Ch+var_96C], edi
.text:0040D6DD                 mov     edi, [esp+97Ch+var_900]
.text:0040D6E1                 mov     [esp+97Ch+var_970], ebp
.text:0040D6E5                 mov     [esp+97Ch+var_974], 5
.text:0040D6ED                 mov     [esp+97Ch+var_978], edi
.text:0040D6F1                 mov     [esp+97Ch+Size], 17h
.text:0040D6F8                 call    sub_407460
.text:0040D6FD                 add     [esp+97Ch+var_950], 5
.text:0040D702                 cmp     [esp+97Ch+var_938], 1
.text:0040D707                 jle     loc_40B348
.text:0040D70D                 mov     [esp+97Ch+Size], 16h
.text:0040D714                 mov     edx, [esp+97Ch+var_900]
.text:0040D718                 mov     esi, [esp+97Ch+var_950]
.text:0040D71C                 mov     edi, [esp+97Ch+var_938]
.text:0040D720                 mov     ebp, [esp+97Ch+var_950]
.text:0040D724                 sub     edx, esi
.text:0040D726                 add     edx, 2
.text:0040D729                 dec     edi
.text:0040D72A                 mov     [esp+97Ch+var_974], edx
.text:0040D72E                 mov     [esp+97Ch+var_978], ebp
.text:0040D732                 add     ebp, 5
.text:0040D735                 mov     ebx, ebp
.text:0040D737                 mov     [esp+97Ch+var_970], edi
.text:0040D73B                 call    sub_4073F0
.text:0040D740                 mov     [esp+97Ch+var_96C], ebp
.text:0040D744                 mov     ecx, [esp+97Ch+var_900]
.text:0040D748                 add     ebp, 5
.text:0040D74B                 mov     [esp+97Ch+var_970], edi
.text:0040D74F                 mov     eax, [esp+97Ch+var_900]
.text:0040D753                 mov     [esp+97Ch+Size], 17h
.text:0040D75A                 sub     ebx, ecx
.text:0040D75C                 mov     [esp+97Ch+var_974], ebx
.text:0040D760                 mov     [esp+97Ch+var_978], eax
.text:0040D764                 call    sub_407460
.text:0040D769                 mov     [esp+97Ch+var_950], ebp
.text:0040D76D                 jmp     loc_40B348
.text:0040D772 ; ---------------------------------------------------------------------------
.text:0040D772
.text:0040D772 loc_40D772:                             ; CODE XREF: sub_40A600+30A8↑j
.text:0040D772                 mov     ecx, [esp+97Ch+var_900]
.text:0040D776                 mov     eax, edi
.text:0040D778                 sub     eax, ecx
.text:0040D77A                 sub     eax, 3
.text:0040D77D                 jmp     loc_40D6B9
.text:0040D782 ; ---------------------------------------------------------------------------
.text:0040D782
.text:0040D782 loc_40D782:                             ; CODE XREF: sub_40A600+2E7C↑j
.text:0040D782                 mov     esi, [esp+97Ch+Block]
.text:0040D789                 mov     ebp, 0Ah
.text:0040D78E                 jmp     loc_40C703
.text:0040D793 ; ---------------------------------------------------------------------------
.text:0040D793
.text:0040D793 loc_40D793:                             ; CODE XREF: sub_40A600+2E6E↑j
.text:0040D793                 mov     ebx, [esp+97Ch+arg_8]
.text:0040D79A                 and     ebx, 200020h
.text:0040D7A0                 cmp     ebx, 20h ; ' '
.text:0040D7A3                 jz      loc_40BBDE
.text:0040D7A9                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:0040D7B1                 jz      loc_40D3C6
.text:0040D7B7                 mov     ecx, [esp+97Ch+var_950]
.text:0040D7BB                 mov     [esp+97Ch+var_900], ecx
.text:0040D7BF                 jmp     loc_40D474
.text:0040D7C4 ; ---------------------------------------------------------------------------
.text:0040D7C4
.text:0040D7C4 loc_40D7C4:                             ; CODE XREF: sub_40A600+2D7E↑j
.text:0040D7C4                 mov     edi, [esp+97Ch+var_8D0]
.text:0040D7CB                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040D7D2                 jz      loc_40D85C
.text:0040D7D8
.text:0040D7D8 loc_40D7D8:                             ; CODE XREF: sub_40A600+324E↓j
.text:0040D7D8                 movzx   eax, byte ptr [edi]
.text:0040D7DB                 inc     edi
.text:0040D7DC                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040D7E3                 mov     [esp+97Ch+var_8D0], edi
.text:0040D7EA                 test    ebx, ebx
.text:0040D7EC                 mov     [esp+97Ch+var_8EC], al
.text:0040D7F3                 jz      short loc_40D80A
.text:0040D7F5                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040D7FC                 movzx   esi, al
.text:0040D7FF                 movzx   ebx, byte ptr [esi+ebp]
.text:0040D803                 mov     [esp+97Ch+var_8EC], bl
.text:0040D80A
.text:0040D80A loc_40D80A:                             ; CODE XREF: sub_40A600+31F3↑j
.text:0040D80A                 movzx   edx, [esp+97Ch+var_8EC]
.text:0040D812                 sub     dl, 30h ; '0'
.text:0040D815                 cmp     dl, 9
.text:0040D818                 ja      short loc_40D850
.text:0040D81A                 cmp     [esp+97Ch+var_938], 7FFFh
.text:0040D822                 jg      short loc_40D847
.text:0040D824                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040D82C                 mov     edx, [esp+97Ch+var_938]
.text:0040D830                 shr     edx, 1Fh
.text:0040D833                 dec     edx
.text:0040D834                 and     [esp+97Ch+var_938], edx
.text:0040D838                 mov     eax, [esp+97Ch+var_938]
.text:0040D83C                 lea     esi, [eax+eax*4]
.text:0040D83F                 lea     ebx, [ebp+esi*2-30h]
.text:0040D843                 mov     [esp+97Ch+var_938], ebx
.text:0040D847
.text:0040D847 loc_40D847:                             ; CODE XREF: sub_40A600+3222↑j
.text:0040D847                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040D84E                 jnz     short loc_40D7D8
.text:0040D850
.text:0040D850 loc_40D850:                             ; CODE XREF: sub_40A600+3218↑j
.text:0040D850                 mov     edi, [esp+97Ch+var_938]
.text:0040D854                 test    edi, edi
.text:0040D856                 jns     loc_40D38C
.text:0040D85C
.text:0040D85C loc_40D85C:                             ; CODE XREF: sub_40A600+31D2↑j
.text:0040D85C                 mov     [esp+97Ch+var_938], 7FFFh
.text:0040D864                 jmp     loc_40D38C
.text:0040D869 ; ---------------------------------------------------------------------------
.text:0040D869
.text:0040D869 loc_40D869:                             ; CODE XREF: sub_40A600+22AD↑j
.text:0040D869                                         ; DATA XREF: sub_40A600:jpt_40C8AD↑o
.text:0040D869                 mov     edi, [esp+97Ch+arg_8] ; jumptable 0040C8AD case 124
.text:0040D870                 and     edi, 0FFFF8400h
.text:0040D876                 test    di, di
.text:0040D879                 jz      loc_40AE76
.text:0040D87F                 jmp     def_40C8AD      ; jumptable 0040C8AD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040D884 ; ---------------------------------------------------------------------------
.text:0040D884
.text:0040D884 loc_40D884:                             ; CODE XREF: sub_40A600+16F↑j
.text:0040D884                                         ; DATA XREF: sub_40A600:jpt_40A76F↑o
.text:0040D884                 mov     edx, [esp+97Ch+arg_8] ; jumptable 0040A76F case 123
.text:0040D88B                 and     edx, 1200h
.text:0040D891                 cmp     edx, 1200h
.text:0040D897                 jnz     def_40A76F      ; jumptable 0040A76F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040D89D                 jmp     loc_40D2D8
.text:0040D8A2 ; ---------------------------------------------------------------------------
.text:0040D8A2
.text:0040D8A2 loc_40D8A2:                             ; CODE XREF: sub_40A600+16F↑j
.text:0040D8A2                                         ; DATA XREF: sub_40A600:jpt_40A76F↑o
.text:0040D8A2                 mov     esi, [esp+97Ch+arg_8] ; jumptable 0040A76F case 124
.text:0040D8A9                 and     esi, 0FFFF8000h
.text:0040D8AF                 test    si, si
.text:0040D8B2                 jmp     loc_40AE70
.text:0040D8B7 ; ---------------------------------------------------------------------------
.text:0040D8B7
.text:0040D8B7 loc_40D8B7:                             ; CODE XREF: sub_40A600+F9↑j
.text:0040D8B7                 mov     edi, [esp+97Ch+Block]
.text:0040D8BE                 mov     ebp, 0Ch
.text:0040D8C3                 jmp     loc_40ABA0
.text:0040D8C8 ; ---------------------------------------------------------------------------
.text:0040D8C8
.text:0040D8C8 loc_40D8C8:                             ; CODE XREF: sub_40A600+D6↑j
.text:0040D8C8                 mov     [esp+97Ch+Size], 20h ; ' ' ; Size
.text:0040D8CF                 call    malloc
.text:0040D8D4                 mov     ecx, [esp+97Ch+arg_C]
.text:0040D8DB                 mov     [ecx], eax
.text:0040D8DD                 jmp     loc_40A6EE
.text:0040D8E2 ; ---------------------------------------------------------------------------
.text:0040D8E2
.text:0040D8E2 loc_40D8E2:                             ; CODE XREF: sub_40A600+CC↑j
.text:0040D8E2                 mov     ebp, [esp+97Ch+arg_C]
.text:0040D8E9                 mov     edi, [ebp+0]
.text:0040D8EC                 jmp     loc_40A70D
.text:0040D8F1 ; ---------------------------------------------------------------------------
.text:0040D8F1
.text:0040D8F1 loc_40D8F1:                             ; CODE XREF: sub_40A600+BA↑j
.text:0040D8F1                 mov     [esp+97Ch+var_974], 100h ; Size
.text:0040D8F9                 xor     ebx, ebx
.text:0040D8FB                 mov     [esp+97Ch+var_978], 0 ; Val
.text:0040D903                 mov     [esp+97Ch+Size], offset byte_419250 ; void *
.text:0040D90A                 call    memset
.text:0040D90F                 nop
.text:0040D910
.text:0040D910 loc_40D910:                             ; CODE XREF: sub_40A600+333D↓j
.text:0040D910                 mov     esi, ds:__mb_cur_max
.text:0040D916                 cmp     dword ptr [esi], 1
.text:0040D919                 jz      short loc_40D956
.text:0040D91B                 mov     [esp+97Ch+var_978], 107h ; Type
.text:0040D923                 mov     [esp+97Ch+Size], ebx ; C
.text:0040D926                 call    _isctype
.text:0040D92B
.text:0040D92B loc_40D92B:                             ; CODE XREF: sub_40A600+3368↓j
.text:0040D92B                 test    eax, eax
.text:0040D92D                 jz      short loc_40D936
.text:0040D92F                 mov     ds:byte_419250[ebx], 1
.text:0040D936
.text:0040D936 loc_40D936:                             ; CODE XREF: sub_40A600+332D↑j
.text:0040D936                 inc     ebx
.text:0040D937                 cmp     ebx, 0FFh
.text:0040D93D                 jle     short loc_40D910
.text:0040D93F                 mov     ds:byte_4192AF, 1
.text:0040D946                 mov     ebx, 1
.text:0040D94B                 mov     ds:dword_419240, ebx
.text:0040D951                 jmp     loc_40A6C0
.text:0040D956 ; ---------------------------------------------------------------------------
.text:0040D956
.text:0040D956 loc_40D956:                             ; CODE XREF: sub_40A600+3319↑j
.text:0040D956                 mov     ebp, ds:_pctype
.text:0040D95C                 mov     edi, [ebp+0]
.text:0040D95F                 movzx   eax, word ptr [edi+ebx*2]
.text:0040D963                 and     eax, 107h
.text:0040D968                 jmp     short loc_40D92B
.text:0040D968 sub_40A600      endp
.text:0040D968
.text:0040D968 ; ---------------------------------------------------------------------------
.text:0040D96A                 align 10h
.text:0040D970
.text:0040D970 ; =============== S U B R O U T I N E =======================================
.text:0040D970
.text:0040D970
.text:0040D970 sub_40D970      proc near               ; CODE XREF: sub_40A1B0+105↑p
.text:0040D970                                         ; .text:0040A3F6↑p ...
.text:0040D970
.text:0040D970 var_4C          = dword ptr -4Ch
.text:0040D970 var_48          = dword ptr -48h
.text:0040D970 var_44          = dword ptr -44h
.text:0040D970 var_40          = dword ptr -40h
.text:0040D970 var_3C          = dword ptr -3Ch
.text:0040D970 var_38          = dword ptr -38h
.text:0040D970 var_34          = dword ptr -34h
.text:0040D970 var_30          = dword ptr -30h
.text:0040D970 var_20          = dword ptr -20h
.text:0040D970 var_1C          = dword ptr -1Ch
.text:0040D970 var_18          = dword ptr -18h
.text:0040D970 var_14          = dword ptr -14h
.text:0040D970 arg_0           = dword ptr  4
.text:0040D970 arg_4           = dword ptr  8
.text:0040D970 arg_8           = dword ptr  0Ch
.text:0040D970 arg_C           = dword ptr  10h
.text:0040D970 arg_10          = dword ptr  14h
.text:0040D970 arg_14          = dword ptr  18h
.text:0040D970 arg_18          = dword ptr  1Ch
.text:0040D970 arg_1C          = dword ptr  20h
.text:0040D970 arg_20          = dword ptr  24h
.text:0040D970
.text:0040D970                 push    ebp
.text:0040D971                 push    edi
.text:0040D972                 push    esi
.text:0040D973                 push    ebx
.text:0040D974                 sub     esp, 3Ch
.text:0040D977                 mov     edi, [esp+4Ch+arg_0]
.text:0040D97B                 mov     ebx, [esp+4Ch+arg_14]
.text:0040D97F                 mov     ecx, [esp+4Ch+arg_10]
.text:0040D983                 mov     edx, [edi+14h]
.text:0040D986                 mov     esi, [esp+4Ch+arg_18]
.text:0040D98A                 mov     ebp, [edi+10h]
.text:0040D98D                 mov     [esp+4Ch+var_14], edx
.text:0040D991                 mov     edx, [esp+4Ch+arg_8]
.text:0040D995                 lea     eax, [esi+ebx]
.text:0040D998                 add     edx, ecx
.text:0040D99A                 test    ebx, ebx
.text:0040D99C                 mov     [esp+4Ch+var_18], edx
.text:0040D9A0                 js      loc_40DB40
.text:0040D9A6                 cmp     ebx, edx
.text:0040D9A8                 jg      loc_40DB40
.text:0040D9AE                 test    eax, eax
.text:0040D9B0                 js      loc_40DC01
.text:0040D9B6                 cmp     eax, [esp+4Ch+var_18]
.text:0040D9BA                 jle     short loc_40D9C2
.text:0040D9BC                 mov     esi, [esp+4Ch+var_18]
.text:0040D9C0                 sub     esi, ebx
.text:0040D9C2
.text:0040D9C2 loc_40D9C2:                             ; CODE XREF: sub_40D970+4A↑j
.text:0040D9C2                                         ; sub_40D970+295↓j
.text:0040D9C2                 mov     eax, [edi+8]
.text:0040D9C5                 test    eax, eax
.text:0040D9C7                 jz      short loc_40D9F0
.text:0040D9C9                 test    esi, esi
.text:0040D9CB                 jle     short loc_40D9F0
.text:0040D9CD                 mov     ecx, [edi]
.text:0040D9CF                 movzx   eax, byte ptr [ecx]
.text:0040D9D2                 cmp     al, 0Bh
.text:0040D9D4                 jz      loc_40DBEA
.text:0040D9DA                 cmp     al, 9
.text:0040D9DC                 jz      loc_40DBE0
.text:0040D9E2                 lea     esi, [esi+0]
.text:0040D9E9                 lea     edi, [edi+0]
.text:0040D9F0
.text:0040D9F0 loc_40D9F0:                             ; CODE XREF: sub_40D970+57↑j
.text:0040D9F0                                         ; sub_40D970+5B↑j ...
.text:0040D9F0                 test    ebp, ebp
.text:0040D9F2                 jz      loc_40DAB0
.text:0040D9F8                 test    byte ptr [edi+1Ch], 8
.text:0040D9FC                 jz      loc_40DBC5
.text:0040DA02
.text:0040DA02 loc_40DA02:                             ; CODE XREF: sub_40D970+1AF↓j
.text:0040DA02                                         ; sub_40D970+1B6↓j ...
.text:0040DA02                 test    ebp, ebp
.text:0040DA04                 jz      loc_40DAB0
.text:0040DA0A                 cmp     ebx, [esp+4Ch+var_18]
.text:0040DA0E                 jge     loc_40DAB0
.text:0040DA14                 test    byte ptr [edi+1Ch], 1
.text:0040DA18                 jnz     loc_40DAB0
.text:0040DA1E                 test    esi, esi
.text:0040DA20                 jle     loc_40DB74
.text:0040DA26                 cmp     ebx, [esp+4Ch+arg_8]
.text:0040DA2A                 mov     [esp+4Ch+var_20], 0
.text:0040DA32                 mov     [esp+4Ch+var_1C], esi
.text:0040DA36                 jge     loc_40DB62
.text:0040DA3C                 lea     edx, [esi+ebx]
.text:0040DA3F                 cmp     edx, [esp+4Ch+arg_8]
.text:0040DA43                 jl      short loc_40DA53
.text:0040DA45                 mov     ecx, [esp+4Ch+arg_8]
.text:0040DA49                 mov     edx, esi
.text:0040DA4B                 sub     ecx, ebx
.text:0040DA4D                 sub     edx, ecx
.text:0040DA4F                 mov     [esp+4Ch+var_20], edx
.text:0040DA53
.text:0040DA53 loc_40DA53:                             ; CODE XREF: sub_40D970+D3↑j
.text:0040DA53                 mov     edx, [esp+4Ch+arg_4]
.text:0040DA57                 add     edx, ebx
.text:0040DA59
.text:0040DA59 loc_40DA59:                             ; CODE XREF: sub_40D970+1FF↓j
.text:0040DA59                 mov     ecx, [esp+4Ch+var_14]
.text:0040DA5D                 test    ecx, ecx
.text:0040DA5F                 jz      loc_40DB47
.text:0040DA65                 cmp     esi, [esp+4Ch+var_20]
.text:0040DA69                 jle     short loc_40DA99
.text:0040DA6B                 movzx   eax, byte ptr [edx]
.text:0040DA6E                 inc     edx
.text:0040DA6F                 mov     ecx, [esp+4Ch+var_14]
.text:0040DA73                 movzx   ecx, byte ptr [eax+ecx]
.text:0040DA77                 cmp     byte ptr [ecx+ebp], 0
.text:0040DA7B                 jnz     short loc_40DA99
.text:0040DA7D                 lea     esi, [esi+0]
.text:0040DA80
.text:0040DA80 loc_40DA80:                             ; CODE XREF: sub_40D970+127↓j
.text:0040DA80                 dec     esi
.text:0040DA81                 cmp     esi, [esp+4Ch+var_20]
.text:0040DA85                 jle     short loc_40DA99
.text:0040DA87                 movzx   eax, byte ptr [edx]
.text:0040DA8A                 inc     edx
.text:0040DA8B                 mov     ecx, [esp+4Ch+var_14]
.text:0040DA8F                 movzx   eax, byte ptr [eax+ecx]
.text:0040DA93                 cmp     byte ptr [eax+ebp], 0
.text:0040DA97                 jz      short loc_40DA80
.text:0040DA99
.text:0040DA99 loc_40DA99:                             ; CODE XREF: sub_40D970+F9↑j
.text:0040DA99                                         ; sub_40D970+10B↑j ...
.text:0040DA99                 sub     [esp+4Ch+var_1C], esi
.text:0040DA9D                 mov     edx, [esp+4Ch+var_1C]
.text:0040DAA1                 add     ebx, edx
.text:0040DAA3                 lea     esi, [esi+0]
.text:0040DAA9                 lea     edi, [edi+0]
.text:0040DAB0
.text:0040DAB0 loc_40DAB0:                             ; CODE XREF: sub_40D970+82↑j
.text:0040DAB0                                         ; sub_40D970+94↑j ...
.text:0040DAB0                 test    esi, esi
.text:0040DAB2                 js      short loc_40DABA
.text:0040DAB4                 cmp     ebx, [esp+4Ch+var_18]
.text:0040DAB8                 jz      short loc_40DB30
.text:0040DABA
.text:0040DABA loc_40DABA:                             ; CODE XREF: sub_40D970+142↑j
.text:0040DABA                                         ; sub_40D970+1C2↓j ...
.text:0040DABA                 mov     [esp+4Ch+var_38], ebx
.text:0040DABE                 mov     edx, [esp+4Ch+arg_20]
.text:0040DAC2                 mov     ecx, [esp+4Ch+arg_1C]
.text:0040DAC6                 mov     [esp+4Ch+var_4C], edi
.text:0040DAC9                 mov     eax, [esp+4Ch+arg_10]
.text:0040DACD                 mov     [esp+4Ch+var_30], edx
.text:0040DAD1                 mov     edx, [esp+4Ch+arg_C]
.text:0040DAD5                 mov     [esp+4Ch+var_34], ecx
.text:0040DAD9                 mov     ecx, [esp+4Ch+arg_8]
.text:0040DADD                 mov     [esp+4Ch+var_3C], eax
.text:0040DAE1                 mov     eax, [esp+4Ch+arg_4]
.text:0040DAE5                 mov     [esp+4Ch+var_40], edx
.text:0040DAE9                 mov     [esp+4Ch+var_44], ecx
.text:0040DAED                 mov     [esp+4Ch+var_48], eax
.text:0040DAF1                 call    sub_4076F0
.text:0040DAF6                 test    eax, eax
.text:0040DAF8                 mov     edx, ebx
.text:0040DAFA                 js      short loc_40DB06
.text:0040DAFC
.text:0040DAFC loc_40DAFC:                             ; CODE XREF: sub_40D970+19E↓j
.text:0040DAFC                                         ; sub_40D970+1A7↓j ...
.text:0040DAFC                 add     esp, 3Ch
.text:0040DAFF                 mov     eax, edx
.text:0040DB01                 pop     ebx
.text:0040DB02                 pop     esi
.text:0040DB03                 pop     edi
.text:0040DB04                 pop     ebp
.text:0040DB05                 retn
.text:0040DB06 ; ---------------------------------------------------------------------------
.text:0040DB06
.text:0040DB06 loc_40DB06:                             ; CODE XREF: sub_40D970+18A↑j
.text:0040DB06                 cmp     eax, 0FFFFFFFEh
.text:0040DB09                 mov     edx, 0FFFFFFFEh
.text:0040DB0E                 jz      short loc_40DAFC
.text:0040DB10
.text:0040DB10 loc_40DB10:                             ; CODE XREF: sub_40D970+241↓j
.text:0040DB10                 test    esi, esi
.text:0040DB12                 mov     edx, 0FFFFFFFFh
.text:0040DB17                 jz      short loc_40DAFC
.text:0040DB19                 test    esi, esi
.text:0040DB1B                 jle     short loc_40DB24
.text:0040DB1D                 dec     esi
.text:0040DB1E                 inc     ebx
.text:0040DB1F                 jmp     loc_40DA02
.text:0040DB24 ; ---------------------------------------------------------------------------
.text:0040DB24
.text:0040DB24 loc_40DB24:                             ; CODE XREF: sub_40D970+1AB↑j
.text:0040DB24                 inc     esi
.text:0040DB25                 dec     ebx
.text:0040DB26                 jmp     loc_40DA02
.text:0040DB26 ; ---------------------------------------------------------------------------
.text:0040DB2B                 align 10h
.text:0040DB30
.text:0040DB30 loc_40DB30:                             ; CODE XREF: sub_40D970+148↑j
.text:0040DB30                 test    ebp, ebp
.text:0040DB32                 jz      short loc_40DABA
.text:0040DB34                 test    byte ptr [edi+1Ch], 1
.text:0040DB38                 jnz     short loc_40DABA
.text:0040DB3A                 lea     esi, [esi+0]
.text:0040DB40
.text:0040DB40 loc_40DB40:                             ; CODE XREF: sub_40D970+30↑j
.text:0040DB40                                         ; sub_40D970+38↑j
.text:0040DB40                 mov     edx, 0FFFFFFFFh
.text:0040DB45                 jmp     short loc_40DAFC
.text:0040DB47 ; ---------------------------------------------------------------------------
.text:0040DB47
.text:0040DB47 loc_40DB47:                             ; CODE XREF: sub_40D970+EF↑j
.text:0040DB47                                         ; sub_40D970+1F0↓j
.text:0040DB47                 cmp     esi, [esp+4Ch+var_20]
.text:0040DB4B                 jle     loc_40DA99
.text:0040DB51                 movzx   ecx, byte ptr [edx]
.text:0040DB54                 inc     edx
.text:0040DB55                 cmp     byte ptr [ecx+ebp], 0
.text:0040DB59                 jnz     loc_40DA99
.text:0040DB5F                 dec     esi
.text:0040DB60                 jmp     short loc_40DB47
.text:0040DB62 ; ---------------------------------------------------------------------------
.text:0040DB62
.text:0040DB62 loc_40DB62:                             ; CODE XREF: sub_40D970+C6↑j
.text:0040DB62                 mov     ecx, [esp+4Ch+arg_C]
.text:0040DB66                 mov     eax, [esp+4Ch+arg_8]
.text:0040DB6A                 sub     ecx, eax
.text:0040DB6C                 lea     edx, [ebx+ecx]
.text:0040DB6F                 jmp     loc_40DA59
.text:0040DB74 ; ---------------------------------------------------------------------------
.text:0040DB74
.text:0040DB74 loc_40DB74:                             ; CODE XREF: sub_40D970+B0↑j
.text:0040DB74                 mov     ecx, [esp+4Ch+arg_8]
.text:0040DB78                 test    ecx, ecx
.text:0040DB7A                 jz      short loc_40DB82
.text:0040DB7C                 cmp     ebx, [esp+4Ch+arg_8]
.text:0040DB80                 jl      short loc_40DBBB
.text:0040DB82
.text:0040DB82 loc_40DB82:                             ; CODE XREF: sub_40D970+20A↑j
.text:0040DB82                 mov     edx, [esp+4Ch+arg_8]
.text:0040DB86                 mov     eax, ebx
.text:0040DB88                 mov     ecx, [esp+4Ch+arg_C]
.text:0040DB8C                 sub     eax, edx
.text:0040DB8E                 movzx   eax, byte ptr [eax+ecx]
.text:0040DB92
.text:0040DB92 loc_40DB92:                             ; CODE XREF: sub_40D970+253↓j
.text:0040DB92                 mov     ecx, [esp+4Ch+var_14]
.text:0040DB96                 test    ecx, ecx
.text:0040DB98                 jz      short loc_40DBB6
.text:0040DB9A                 mov     edx, [esp+4Ch+var_14]
.text:0040DB9E                 movzx   ecx, al
.text:0040DBA1                 movzx   eax, byte ptr [ecx+edx]
.text:0040DBA5
.text:0040DBA5 loc_40DBA5:                             ; CODE XREF: sub_40D970+249↓j
.text:0040DBA5                 lea     edx, [eax+ebp]
.text:0040DBA8                 cmp     byte ptr [edx], 0
.text:0040DBAB                 jnz     loc_40DAB0
.text:0040DBB1                 jmp     loc_40DB10
.text:0040DBB6 ; ---------------------------------------------------------------------------
.text:0040DBB6
.text:0040DBB6 loc_40DBB6:                             ; CODE XREF: sub_40D970+228↑j
.text:0040DBB6                 movzx   eax, al
.text:0040DBB9                 jmp     short loc_40DBA5
.text:0040DBBB ; ---------------------------------------------------------------------------
.text:0040DBBB
.text:0040DBBB loc_40DBBB:                             ; CODE XREF: sub_40D970+210↑j
.text:0040DBBB                 mov     edx, [esp+4Ch+arg_4]
.text:0040DBBF                 movzx   eax, byte ptr [ebx+edx]
.text:0040DBC3                 jmp     short loc_40DB92
.text:0040DBC5 ; ---------------------------------------------------------------------------
.text:0040DBC5
.text:0040DBC5 loc_40DBC5:                             ; CODE XREF: sub_40D970+8C↑j
.text:0040DBC5                 mov     [esp+4Ch+var_4C], edi
.text:0040DBC8                 call    sub_40A020
.text:0040DBCD                 cmp     eax, 0FFFFFFFEh
.text:0040DBD0                 mov     edx, 0FFFFFFFEh
.text:0040DBD5                 jnz     loc_40DA02
.text:0040DBDB                 jmp     loc_40DAFC
.text:0040DBE0 ; ---------------------------------------------------------------------------
.text:0040DBE0
.text:0040DBE0 loc_40DBE0:                             ; CODE XREF: sub_40D970+6C↑j
.text:0040DBE0                 test    byte ptr [edi+1Ch], 80h
.text:0040DBE4                 jnz     loc_40D9F0
.text:0040DBEA
.text:0040DBEA loc_40DBEA:                             ; CODE XREF: sub_40D970+64↑j
.text:0040DBEA                 test    ebx, ebx
.text:0040DBEC                 mov     edx, 0FFFFFFFFh
.text:0040DBF1                 jg      loc_40DAFC
.text:0040DBF7                 mov     esi, 1
.text:0040DBFC                 jmp     loc_40D9F0
.text:0040DC01 ; ---------------------------------------------------------------------------
.text:0040DC01
.text:0040DC01 loc_40DC01:                             ; CODE XREF: sub_40D970+40↑j
.text:0040DC01                 mov     esi, ebx
.text:0040DC03                 neg     esi
.text:0040DC05                 jmp     loc_40D9C2
.text:0040DC05 sub_40D970      endp
.text:0040DC05
.text:0040DC05 ; ---------------------------------------------------------------------------
.text:0040DC0A                 align 10h
.text:0040DC10
.text:0040DC10 ; =============== S U B R O U T I N E =======================================
.text:0040DC10
.text:0040DC10
.text:0040DC10 sub_40DC10      proc near               ; CODE XREF: sub_40A020↑j
.text:0040DC10
.text:0040DC10 Size            = dword ptr -6Ch
.text:0040DC10 Val             = dword ptr -68h
.text:0040DC10 var_64          = dword ptr -64h
.text:0040DC10 var_4D          = byte ptr -4Dh
.text:0040DC10 var_4C          = byte ptr -4Ch
.text:0040DC10 var_30          = dword ptr -30h
.text:0040DC10 Src             = dword ptr -2Ch
.text:0040DC10 var_28          = dword ptr -28h
.text:0040DC10 var_24          = dword ptr -24h
.text:0040DC10 arg_0           = dword ptr  4
.text:0040DC10
.text:0040DC10                 push    ebp
.text:0040DC11                 push    edi
.text:0040DC12                 push    esi
.text:0040DC13                 push    ebx
.text:0040DC14                 sub     esp, 5Ch
.text:0040DC17                 mov     ebp, [esp+6Ch+arg_0]
.text:0040DC1B                 mov     [esp+6Ch+var_4C], 1
.text:0040DC20                 mov     [esp+6Ch+var_4D], 0
.text:0040DC25                 mov     ecx, [ebp+0]
.text:0040DC28                 mov     eax, [ebp+8]
.text:0040DC2B                 mov     esi, [ebp+10h]
.text:0040DC2E                 mov     edi, ecx
.text:0040DC30                 add     eax, ecx
.text:0040DC32                 mov     [esp+6Ch+var_30], eax
.text:0040DC36                 mov     [esp+6Ch+Size], 14h ; Size
.text:0040DC3D                 call    malloc
.text:0040DC42                 mov     [esp+6Ch+Src], eax
.text:0040DC46                 test    eax, eax
.text:0040DC48                 mov     edx, 0FFFFFFFEh
.text:0040DC4D                 jz      loc_40DD32
.text:0040DC53                 mov     [esp+6Ch+var_28], 5
.text:0040DC5B                 mov     [esp+6Ch+var_24], 0
.text:0040DC63                 mov     [esp+6Ch+var_64], 100h ; Size
.text:0040DC6B                 mov     [esp+6Ch+Val], 0 ; Val
.text:0040DC73                 mov     [esp+6Ch+Size], esi ; void *
.text:0040DC76                 call    memset
.text:0040DC7B                 movzx   edx, byte ptr [ebp+1Ch]
.text:0040DC7F                 or      dl, 8
.text:0040DC82                 and     dl, 0FEh
.text:0040DC85                 mov     [ebp+1Ch], dl
.text:0040DC88
.text:0040DC88 loc_40DC88:                             ; CODE XREF: sub_40DC10+9A↓j
.text:0040DC88                                         ; sub_40DC10+13D↓j ...
.text:0040DC88                 cmp     edi, [esp+6Ch+var_30] ; jumptable 0040DCAA cases 0,9-12,20,26-29
.text:0040DC8C                 jz      loc_40DF90
.text:0040DC92                 movzx   eax, byte ptr [edi]
.text:0040DC95                 cmp     al, 1
.text:0040DC97                 jz      loc_40DF90
.text:0040DC9D                 movzx   eax, al
.text:0040DCA0                 inc     edi
.text:0040DCA1                 cmp     eax, 1Dh        ; switch 30 cases
.text:0040DCA4                 ja      def_40DCAA      ; jumptable 0040DCAA default case, case 1
.text:0040DCAA                 jmp     ds:jpt_40DCAA[eax*4] ; switch jump
.text:0040DCAA ; ---------------------------------------------------------------------------
.text:0040DCB1                 align 4
.text:0040DCB4 jpt_40DCAA      dd offset loc_40DC88    ; DATA XREF: sub_40DC10+9A↑r
.text:0040DCB4                 dd offset def_40DCAA    ; jump table for switch statement
.text:0040DCB4                 dd offset loc_40DD3C
.text:0040DCB4                 dd offset loc_40DD52
.text:0040DCB4                 dd offset loc_40DD80
.text:0040DCB4                 dd offset loc_40DDB8
.text:0040DCB4                 dd offset loc_40DE1C
.text:0040DCB4                 dd offset loc_40DE1C
.text:0040DCB4                 dd offset loc_40DD2C
.text:0040DCB4                 dd offset loc_40DC88
.text:0040DCB4                 dd offset loc_40DC88
.text:0040DCB4                 dd offset loc_40DC88
.text:0040DCB4                 dd offset loc_40DC88
.text:0040DCB4                 dd offset loc_40DEE5
.text:0040DCB4                 dd offset loc_40DEE5
.text:0040DCB4                 dd offset loc_40DE24
.text:0040DCB4                 dd offset loc_40DE24
.text:0040DCB4                 dd offset loc_40DEE5
.text:0040DCB4                 dd offset loc_40DEE5
.text:0040DCB4                 dd offset loc_40DEE5
.text:0040DCB4                 dd offset loc_40DC88
.text:0040DCB4                 dd offset loc_40DEBE
.text:0040DCB4                 dd offset loc_40DEE5
.text:0040DCB4                 dd offset loc_40DF43
.text:0040DCB4                 dd offset loc_40DF4B
.text:0040DCB4                 dd offset loc_40DF6D
.text:0040DCB4                 dd offset loc_40DC88
.text:0040DCB4                 dd offset loc_40DC88
.text:0040DCB4                 dd offset loc_40DC88
.text:0040DCB4                 dd offset loc_40DC88
.text:0040DD2C ; ---------------------------------------------------------------------------
.text:0040DD2C
.text:0040DD2C loc_40DD2C:                             ; CODE XREF: sub_40DC10+9A↑j
.text:0040DD2C                                         ; DATA XREF: sub_40DC10:jpt_40DCAA↑o
.text:0040DD2C                 or      byte ptr [ebp+1Ch], 1 ; jumptable 0040DCAA case 8
.text:0040DD30
.text:0040DD30 loc_40DD30:                             ; CODE XREF: sub_40DC10+16E↓j
.text:0040DD30                                         ; sub_40DC10+3C8↓j
.text:0040DD30                 xor     edx, edx
.text:0040DD32
.text:0040DD32 loc_40DD32:                             ; CODE XREF: sub_40DC10+3D↑j
.text:0040DD32                                         ; sub_40DC10+2A3↓j
.text:0040DD32                 add     esp, 5Ch
.text:0040DD35                 mov     eax, edx
.text:0040DD37                 pop     ebx
.text:0040DD38                 pop     esi
.text:0040DD39                 pop     edi
.text:0040DD3A                 pop     ebp
.text:0040DD3B                 retn
.text:0040DD3C ; ---------------------------------------------------------------------------
.text:0040DD3C
.text:0040DD3C loc_40DD3C:                             ; CODE XREF: sub_40DC10+9A↑j
.text:0040DD3C                                         ; DATA XREF: sub_40DC10:jpt_40DCAA↑o
.text:0040DD3C                 movzx   ecx, byte ptr [edi+1] ; jumptable 0040DCAA case 2
.text:0040DD40                 mov     byte ptr [ecx+esi], 1
.text:0040DD44
.text:0040DD44 loc_40DD44:                             ; CODE XREF: sub_40DC10+166↓j
.text:0040DD44                                         ; sub_40DC10+16C↓j ...
.text:0040DD44                 mov     [esp+6Ch+var_4C], 0
.text:0040DD49                 mov     edi, [esp+6Ch+var_30]
.text:0040DD4D                 jmp     loc_40DC88      ; jumptable 0040DCAA cases 0,9-12,20,26-29
.text:0040DD52 ; ---------------------------------------------------------------------------
.text:0040DD52
.text:0040DD52 loc_40DD52:                             ; CODE XREF: sub_40DC10+9A↑j
.text:0040DD52                                         ; DATA XREF: sub_40DC10:jpt_40DCAA↑o
.text:0040DD52                 movsx   eax, byte ptr [esi+0Ah] ; jumptable 0040DCAA case 3
.text:0040DD56                 xor     ebx, ebx
.text:0040DD58                 nop
.text:0040DD59                 lea     esi, [esi+0]
.text:0040DD60
.text:0040DD60 loc_40DD60:                             ; CODE XREF: sub_40DC10+15B↓j
.text:0040DD60                 mov     byte ptr [ebx+esi], 1
.text:0040DD64                 inc     ebx
.text:0040DD65                 cmp     ebx, 0FFh
.text:0040DD6B                 jle     short loc_40DD60
.text:0040DD6D                 test    byte ptr [ebp+0Ch], 40h
.text:0040DD71                 jnz     short loc_40DD78
.text:0040DD73                 mov     [esi+0Ah], al
.text:0040DD76                 jmp     short loc_40DD44
.text:0040DD78 ; ---------------------------------------------------------------------------
.text:0040DD78
.text:0040DD78 loc_40DD78:                             ; CODE XREF: sub_40DC10+161↑j
.text:0040DD78                 test    byte ptr [ebp+1Ch], 1
.text:0040DD7C                 jz      short loc_40DD44
.text:0040DD7E                 jmp     short loc_40DD30
.text:0040DD80 ; ---------------------------------------------------------------------------
.text:0040DD80
.text:0040DD80 loc_40DD80:                             ; CODE XREF: sub_40DC10+9A↑j
.text:0040DD80                                         ; DATA XREF: sub_40DC10:jpt_40DCAA↑o
.text:0040DD80                 movzx   edx, byte ptr [edi] ; jumptable 0040DCAA case 4
.text:0040DD83                 inc     edi
.text:0040DD84                 lea     ebx, ds:0FFFFFFFFh[edx*8]
.text:0040DD8B                 test    ebx, ebx
.text:0040DD8D                 js      short loc_40DD44
.text:0040DD8F
.text:0040DD8F loc_40DD8F:                             ; CODE XREF: sub_40DC10+19F↓j
.text:0040DD8F                 test    ebx, ebx
.text:0040DD91                 mov     eax, ebx
.text:0040DD93                 js      short loc_40DDB3
.text:0040DD95
.text:0040DD95 loc_40DD95:                             ; CODE XREF: sub_40DC10+1A6↓j
.text:0040DD95                 sar     eax, 3
.text:0040DD98                 mov     ecx, ebx
.text:0040DD9A                 movzx   edx, byte ptr [eax+edi]
.text:0040DD9E                 shl     eax, 3
.text:0040DDA1                 sub     ecx, eax
.text:0040DDA3                 sar     edx, cl
.text:0040DDA5                 test    dl, 1
.text:0040DDA8                 jz      short loc_40DDAE
.text:0040DDAA                 mov     byte ptr [ebx+esi], 1
.text:0040DDAE
.text:0040DDAE loc_40DDAE:                             ; CODE XREF: sub_40DC10+198↑j
.text:0040DDAE                 dec     ebx
.text:0040DDAF                 jns     short loc_40DD8F
.text:0040DDB1                 jmp     short loc_40DD44
.text:0040DDB3 ; ---------------------------------------------------------------------------
.text:0040DDB3
.text:0040DDB3 loc_40DDB3:                             ; CODE XREF: sub_40DC10+183↑j
.text:0040DDB3                 lea     eax, [ebx+7]
.text:0040DDB6                 jmp     short loc_40DD95
.text:0040DDB8 ; ---------------------------------------------------------------------------
.text:0040DDB8
.text:0040DDB8 loc_40DDB8:                             ; CODE XREF: sub_40DC10+9A↑j
.text:0040DDB8                                         ; DATA XREF: sub_40DC10:jpt_40DCAA↑o
.text:0040DDB8                 movzx   edx, byte ptr [edi] ; jumptable 0040DCAA case 5
.text:0040DDBB                 movzx   ecx, dl
.text:0040DDBE                 lea     ebx, ds:0[ecx*8]
.text:0040DDC5                 cmp     ebx, 0FFh
.text:0040DDCB                 jg      short loc_40DDDD
.text:0040DDCD
.text:0040DDCD loc_40DDCD:                             ; CODE XREF: sub_40DC10+1C8↓j
.text:0040DDCD                 mov     byte ptr [ebx+esi], 1
.text:0040DDD1                 inc     ebx
.text:0040DDD2                 cmp     ebx, 0FFh
.text:0040DDD8                 jle     short loc_40DDCD
.text:0040DDDA                 movzx   edx, byte ptr [edi]
.text:0040DDDD
.text:0040DDDD loc_40DDDD:                             ; CODE XREF: sub_40DC10+1BB↑j
.text:0040DDDD                 movzx   ecx, dl
.text:0040DDE0                 inc     edi
.text:0040DDE1                 lea     ebx, ds:0FFFFFFFFh[ecx*8]
.text:0040DDE8                 test    ebx, ebx
.text:0040DDEA                 js      loc_40DD44
.text:0040DDF0
.text:0040DDF0 loc_40DDF0:                             ; CODE XREF: sub_40DC10+200↓j
.text:0040DDF0                 test    ebx, ebx
.text:0040DDF2                 mov     eax, ebx
.text:0040DDF4                 js      short loc_40DE17
.text:0040DDF6
.text:0040DDF6 loc_40DDF6:                             ; CODE XREF: sub_40DC10+20A↓j
.text:0040DDF6                 sar     eax, 3
.text:0040DDF9                 mov     ecx, ebx
.text:0040DDFB                 movzx   edx, byte ptr [eax+edi]
.text:0040DDFF                 shl     eax, 3
.text:0040DE02                 sub     ecx, eax
.text:0040DE04                 sar     edx, cl
.text:0040DE06                 test    dl, 1
.text:0040DE09                 jnz     short loc_40DE0F
.text:0040DE0B                 mov     byte ptr [ebx+esi], 1
.text:0040DE0F
.text:0040DE0F loc_40DE0F:                             ; CODE XREF: sub_40DC10+1F9↑j
.text:0040DE0F                 dec     ebx
.text:0040DE10                 jns     short loc_40DDF0
.text:0040DE12                 jmp     loc_40DD44
.text:0040DE17 ; ---------------------------------------------------------------------------
.text:0040DE17
.text:0040DE17 loc_40DE17:                             ; CODE XREF: sub_40DC10+1E4↑j
.text:0040DE17                 lea     eax, [ebx+7]
.text:0040DE1A                 jmp     short loc_40DDF6
.text:0040DE1C ; ---------------------------------------------------------------------------
.text:0040DE1C
.text:0040DE1C loc_40DE1C:                             ; CODE XREF: sub_40DC10+9A↑j
.text:0040DE1C                                         ; sub_40DC10+251↓j
.text:0040DE1C                                         ; DATA XREF: ...
.text:0040DE1C                 add     edi, 2          ; jumptable 0040DCAA cases 6,7
.text:0040DE1F                 jmp     loc_40DC88      ; jumptable 0040DCAA cases 0,9-12,20,26-29
.text:0040DE24 ; ---------------------------------------------------------------------------
.text:0040DE24
.text:0040DE24 loc_40DE24:                             ; CODE XREF: sub_40DC10+9A↑j
.text:0040DE24                                         ; sub_40DC10+2D0↓j
.text:0040DE24                                         ; DATA XREF: ...
.text:0040DE24                 movsx   ecx, byte ptr [edi+1] ; jumptable 0040DCAA cases 15,16
.text:0040DE28                 movzx   edx, byte ptr [edi]
.text:0040DE2B                 add     edi, 2
.text:0040DE2E                 shl     ecx, 8
.text:0040DE31                 add     edx, ecx
.text:0040DE33                 lea     ebx, [edx+edi]
.text:0040DE36                 cmp     ebx, [esp+6Ch+var_30]
.text:0040DE3A                 jnb     short loc_40DEB8
.text:0040DE3C                 mov     ecx, [esp+6Ch+var_24]
.text:0040DE40                 cmp     ecx, [esp+6Ch+var_28]
.text:0040DE44                 jz      short loc_40DE63
.text:0040DE46
.text:0040DE46 loc_40DE46:                             ; CODE XREF: sub_40DC10+29C↓j
.text:0040DE46                 mov     edx, [esp+6Ch+Src]
.text:0040DE4A                 mov     [edx+ecx*4], ebx
.text:0040DE4D                 inc     [esp+6Ch+var_24]
.text:0040DE51
.text:0040DE51 loc_40DE51:                             ; CODE XREF: sub_40DC10+2AC↓j
.text:0040DE51                 cmp     [esp+6Ch+var_4D], 0
.text:0040DE56                 jz      loc_40DC88      ; jumptable 0040DCAA cases 0,9-12,20,26-29
.text:0040DE5C                 mov     [esp+6Ch+var_4D], 0
.text:0040DE61                 jmp     short loc_40DE1C ; jumptable 0040DCAA cases 6,7
.text:0040DE63 ; ---------------------------------------------------------------------------
.text:0040DE63
.text:0040DE63 loc_40DE63:                             ; CODE XREF: sub_40DC10+234↑j
.text:0040DE63                 mov     eax, dword_418080
.text:0040DE68                 lea     edx, [eax+eax*8]
.text:0040DE6B                 lea     edx, [eax+edx*2]
.text:0040DE6E                 cmp     ecx, edx
.text:0040DE70                 ja      short loc_40DEAE
.text:0040DE72                 lea     edx, ds:0[ecx*8]
.text:0040DE79                 mov     [esp+6Ch+Size], edx ; Size
.text:0040DE7C                 call    malloc
.text:0040DE81                 mov     [esp+6Ch+Size], eax ; void *
.text:0040DE84                 mov     ecx, [esp+6Ch+var_28]
.text:0040DE88                 shl     ecx, 2
.text:0040DE8B                 mov     [esp+6Ch+var_64], ecx ; Size
.text:0040DE8F                 mov     ecx, [esp+6Ch+Src]
.text:0040DE93                 mov     [esp+6Ch+Val], ecx ; Src
.text:0040DE97                 call    memcpy
.text:0040DE9C                 mov     [esp+6Ch+Src], eax
.text:0040DEA0                 test    eax, eax
.text:0040DEA2                 jz      short loc_40DEAE
.text:0040DEA4                 shl     [esp+6Ch+var_28], 1
.text:0040DEA8                 mov     ecx, [esp+6Ch+var_24]
.text:0040DEAC                 jmp     short loc_40DE46
.text:0040DEAE ; ---------------------------------------------------------------------------
.text:0040DEAE
.text:0040DEAE loc_40DEAE:                             ; CODE XREF: sub_40DC10+260↑j
.text:0040DEAE                                         ; sub_40DC10+292↑j
.text:0040DEAE                 mov     edx, 0FFFFFFFEh
.text:0040DEB3                 jmp     loc_40DD32
.text:0040DEB8 ; ---------------------------------------------------------------------------
.text:0040DEB8
.text:0040DEB8 loc_40DEB8:                             ; CODE XREF: sub_40DC10+22A↑j
.text:0040DEB8                 or      byte ptr [ebp+1Ch], 1
.text:0040DEBC                 jmp     short loc_40DE51
.text:0040DEBE ; ---------------------------------------------------------------------------
.text:0040DEBE
.text:0040DEBE loc_40DEBE:                             ; CODE XREF: sub_40DC10+9A↑j
.text:0040DEBE                                         ; DATA XREF: sub_40DC10:jpt_40DCAA↑o
.text:0040DEBE                 add     edi, 2          ; jumptable 0040DCAA case 21
.text:0040DEC1                 movsx   ecx, byte ptr [edi+1]
.text:0040DEC5                 movzx   ebx, byte ptr [edi]
.text:0040DEC8                 add     edi, 2
.text:0040DECB                 shl     ecx, 8
.text:0040DECE                 add     ebx, ecx
.text:0040DED0                 test    ebx, ebx
.text:0040DED2                 jnz     loc_40DC88      ; jumptable 0040DCAA cases 0,9-12,20,26-29
.text:0040DED8                 mov     [esp+6Ch+var_4D], 1
.text:0040DEDD                 sub     edi, 4
.text:0040DEE0                 jmp     loc_40DE24      ; jumptable 0040DCAA cases 15,16
.text:0040DEE5 ; ---------------------------------------------------------------------------
.text:0040DEE5
.text:0040DEE5 loc_40DEE5:                             ; CODE XREF: sub_40DC10+9A↑j
.text:0040DEE5                                         ; DATA XREF: sub_40DC10:jpt_40DCAA↑o
.text:0040DEE5                 movsx   ebx, byte ptr [edi+1] ; jumptable 0040DCAA cases 13,14,17-19,22
.text:0040DEE9                 movzx   ecx, byte ptr [edi]
.text:0040DEEC                 shl     ebx, 8
.text:0040DEEF                 add     ecx, ebx
.text:0040DEF1                 test    ecx, ecx
.text:0040DEF3                 lea     edi, [ecx+edi+2]
.text:0040DEF7                 jg      loc_40DC88      ; jumptable 0040DCAA cases 0,9-12,20,26-29
.text:0040DEFD                 movzx   eax, byte ptr [edi]
.text:0040DF00                 cmp     al, 0Fh
.text:0040DF02                 jz      short loc_40DF0C
.text:0040DF04                 cmp     al, 15h
.text:0040DF06                 jnz     loc_40DC88      ; jumptable 0040DCAA cases 0,9-12,20,26-29
.text:0040DF0C
.text:0040DF0C loc_40DF0C:                             ; CODE XREF: sub_40DC10+2F2↑j
.text:0040DF0C                 inc     edi
.text:0040DF0D                 movsx   ecx, byte ptr [edi+1]
.text:0040DF11                 movzx   edx, byte ptr [edi]
.text:0040DF14                 shl     ecx, 8
.text:0040DF17                 add     edx, ecx
.text:0040DF19                 lea     edi, [edx+edi+2]
.text:0040DF1D                 mov     edx, [esp+6Ch+var_24]
.text:0040DF21                 test    edx, edx
.text:0040DF23                 jz      loc_40DC88      ; jumptable 0040DCAA cases 0,9-12,20,26-29
.text:0040DF29                 mov     ebx, [esp+6Ch+Src]
.text:0040DF2D                 cmp     [ebx+edx*4-4], edi
.text:0040DF31                 jnz     loc_40DC88      ; jumptable 0040DCAA cases 0,9-12,20,26-29
.text:0040DF37                 lea     eax, [edx-1]
.text:0040DF3A                 mov     [esp+6Ch+var_24], eax
.text:0040DF3E                 jmp     loc_40DC88      ; jumptable 0040DCAA cases 0,9-12,20,26-29
.text:0040DF43 ; ---------------------------------------------------------------------------
.text:0040DF43
.text:0040DF43 loc_40DF43:                             ; CODE XREF: sub_40DC10+9A↑j
.text:0040DF43                                         ; DATA XREF: sub_40DC10:jpt_40DCAA↑o
.text:0040DF43                 add     edi, 4          ; jumptable 0040DCAA case 23
.text:0040DF46                 jmp     loc_40DC88      ; jumptable 0040DCAA cases 0,9-12,20,26-29
.text:0040DF4B ; ---------------------------------------------------------------------------
.text:0040DF4B
.text:0040DF4B loc_40DF4B:                             ; CODE XREF: sub_40DC10+9A↑j
.text:0040DF4B                                         ; DATA XREF: sub_40DC10:jpt_40DCAA↑o
.text:0040DF4B                 xor     ebx, ebx        ; jumptable 0040DCAA case 24
.text:0040DF4D
.text:0040DF4D loc_40DF4D:                             ; CODE XREF: sub_40DC10+350↓j
.text:0040DF4D                 movzx   edi, bl
.text:0040DF50                 cmp     ds:byte_419250[edi], 1
.text:0040DF57                 jz      short loc_40DF67
.text:0040DF59
.text:0040DF59 loc_40DF59:                             ; CODE XREF: sub_40DC10+35B↓j
.text:0040DF59                 inc     ebx
.text:0040DF5A                 cmp     ebx, 0FFh
.text:0040DF60                 jle     short loc_40DF4D
.text:0040DF62                 jmp     loc_40DD44
.text:0040DF67 ; ---------------------------------------------------------------------------
.text:0040DF67
.text:0040DF67 loc_40DF67:                             ; CODE XREF: sub_40DC10+347↑j
.text:0040DF67                 mov     byte ptr [ebx+esi], 1
.text:0040DF6B                 jmp     short loc_40DF59
.text:0040DF6D ; ---------------------------------------------------------------------------
.text:0040DF6D
.text:0040DF6D loc_40DF6D:                             ; CODE XREF: sub_40DC10+9A↑j
.text:0040DF6D                                         ; DATA XREF: sub_40DC10:jpt_40DCAA↑o
.text:0040DF6D                 xor     ebx, ebx        ; jumptable 0040DCAA case 25
.text:0040DF6F
.text:0040DF6F loc_40DF6F:                             ; CODE XREF: sub_40DC10+376↓j
.text:0040DF6F                 movzx   edx, bl
.text:0040DF72                 cmp     ds:byte_419250[edx], 1
.text:0040DF79                 jz      short loc_40DF7F
.text:0040DF7B                 mov     byte ptr [ebx+esi], 1
.text:0040DF7F
.text:0040DF7F loc_40DF7F:                             ; CODE XREF: sub_40DC10+369↑j
.text:0040DF7F                 inc     ebx
.text:0040DF80                 cmp     ebx, 0FFh
.text:0040DF86                 jle     short loc_40DF6F
.text:0040DF88                 jmp     loc_40DD44
.text:0040DF88 ; ---------------------------------------------------------------------------
.text:0040DF8D                 align 10h
.text:0040DF90
.text:0040DF90 loc_40DF90:                             ; CODE XREF: sub_40DC10+7C↑j
.text:0040DF90                                         ; sub_40DC10+87↑j
.text:0040DF90                 mov     ecx, [esp+6Ch+var_24]
.text:0040DF94                 test    ecx, ecx
.text:0040DF96                 jz      short loc_40DFC3
.text:0040DF98                 movzx   ebx, byte ptr [ebp+1Ch]
.text:0040DF9C                 dec     ecx
.text:0040DF9D                 movzx   eax, [esp+6Ch+var_4C]
.text:0040DFA2                 or      eax, ebx
.text:0040DFA4                 and     al, 1
.text:0040DFA6                 and     bl, 0FEh
.text:0040DFA9                 or      bl, al
.text:0040DFAB                 mov     [ebp+1Ch], bl
.text:0040DFAE                 mov     ebx, [esp+6Ch+Src]
.text:0040DFB2                 mov     [esp+6Ch+var_4C], 1
.text:0040DFB7                 mov     [esp+6Ch+var_24], ecx
.text:0040DFBB                 mov     edi, [ebx+ecx*4]
.text:0040DFBE                 jmp     loc_40DC88      ; jumptable 0040DCAA cases 0,9-12,20,26-29
.text:0040DFC3 ; ---------------------------------------------------------------------------
.text:0040DFC3
.text:0040DFC3 loc_40DFC3:                             ; CODE XREF: sub_40DC10+386↑j
.text:0040DFC3                 movzx   ebx, byte ptr [ebp+1Ch]
.text:0040DFC7                 movzx   eax, [esp+6Ch+var_4C]
.text:0040DFCC                 or      eax, ebx
.text:0040DFCE                 and     al, 1
.text:0040DFD0                 and     bl, 0FEh
.text:0040DFD3                 or      bl, al
.text:0040DFD5                 mov     [ebp+1Ch], bl
.text:0040DFD8                 jmp     loc_40DD30
.text:0040DFDD ; ---------------------------------------------------------------------------
.text:0040DFDD
.text:0040DFDD def_40DCAA:                             ; CODE XREF: sub_40DC10+94↑j
.text:0040DFDD                                         ; sub_40DC10+9A↑j
.text:0040DFDD                                         ; DATA XREF: ...
.text:0040DFDD                 call    abort           ; jumptable 0040DCAA default case, case 1
.text:0040DFDD sub_40DC10      endp
.text:0040DFDD
.text:0040DFDD ; ---------------------------------------------------------------------------
.text:0040DFE2                 align 10h
.text:0040DFF0                 jmp     ds:libintl_bindtextdomain
.text:0040DFF0 ; ---------------------------------------------------------------------------
.text:0040DFF6                 align 10h
.text:0040E000                 jmp     ds:libintl_textdomain
.text:0040E000 ; ---------------------------------------------------------------------------
.text:0040E006                 align 10h
.text:0040E010                 jmp     ds:libintl_gettext
.text:0040E010 ; ---------------------------------------------------------------------------
.text:0040E016                 align 10h
.text:0040E020 ; const char aS_2[]
.text:0040E020 aS_2            db ': %s',0             ; DATA XREF: sub_40E040+B8↓o
.text:0040E020                                         ; sub_40E144+122↓o
.text:0040E025 aUnknownSystemE db 'Unknown system error',0
.text:0040E025                                         ; DATA XREF: sub_40E040:loc_40E10D↓o
.text:0040E025                                         ; sub_40E144:loc_40E27E↓o
.text:0040E03A ; const char aS_3[]
.text:0040E03A aS_3            db '%s: ',0             ; DATA XREF: sub_40E040:loc_40E114↓o
.text:0040E03F                 align 10h
.text:0040E040
.text:0040E040 ; =============== S U B R O U T I N E =======================================
.text:0040E040
.text:0040E040
.text:0040E040 ; int __cdecl sub_40E040(int Code, int ErrorMessage, char *, char)
.text:0040E040 sub_40E040      proc near               ; CODE XREF: sub_401FB0+19F↑p
.text:0040E040                                         ; sub_401FB0+47F↑p ...
.text:0040E040
.text:0040E040 Stream          = dword ptr -1Ch
.text:0040E040 Format          = dword ptr -18h
.text:0040E040 ArgList         = dword ptr -14h
.text:0040E040 Code            = dword ptr  4
.text:0040E040 ErrorMessage    = dword ptr  8
.text:0040E040 arg_8           = dword ptr  0Ch
.text:0040E040 arg_C           = byte ptr  10h
.text:0040E040
.text:0040E040                 push    esi
.text:0040E041                 push    ebx
.text:0040E042                 sub     esp, 14h
.text:0040E045                 mov     edx, ds:_iob
.text:0040E04B                 mov     esi, [esp+1Ch+Code]
.text:0040E04F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:0040E053                 add     edx, 20h ; ' '
.text:0040E056                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040E059                 call    fflush
.text:0040E05E                 mov     eax, ds:dword_4196E0
.text:0040E063                 test    eax, eax
.text:0040E065                 jz      loc_40E114
.text:0040E06B                 call    eax ; dword_4196E0
.text:0040E06D
.text:0040E06D loc_40E06D:                             ; CODE XREF: sub_40E040+F7↓j
.text:0040E06D                 lea     edx, [esp+1Ch+arg_C]
.text:0040E071                 mov     ecx, [esp+1Ch+arg_8]
.text:0040E075                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:0040E079                 mov     edx, ds:_iob
.text:0040E07F                 mov     [esp+1Ch+Format], ecx ; Format
.text:0040E083                 add     edx, 40h ; '@'
.text:0040E086                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040E089                 call    vfprintf
.text:0040E08E                 inc     ds:dword_4196F0
.text:0040E094                 test    ebx, ebx
.text:0040E096                 jnz     short loc_40E0E2
.text:0040E098
.text:0040E098 loc_40E098:                             ; CODE XREF: sub_40E040+CB↓j
.text:0040E098                 mov     edx, ds:_iob
.text:0040E09E                 lea     ecx, [edx+40h]
.text:0040E0A1                 mov     ebx, [ecx+4]
.text:0040E0A4                 dec     ebx
.text:0040E0A5                 test    ebx, ebx
.text:0040E0A7                 mov     [ecx+4], ebx
.text:0040E0AA                 js      short loc_40E0D0
.text:0040E0AC                 mov     ecx, [edx+40h]
.text:0040E0AF                 mov     byte ptr [ecx], 0Ah
.text:0040E0B2                 inc     dword ptr [edx+40h]
.text:0040E0B5
.text:0040E0B5 loc_40E0B5:                             ; CODE XREF: sub_40E040+A0↓j
.text:0040E0B5                 mov     edx, ds:_iob
.text:0040E0BB                 add     edx, 40h ; '@'
.text:0040E0BE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040E0C1                 call    fflush
.text:0040E0C6                 test    esi, esi
.text:0040E0C8                 jnz     short loc_40E13C
.text:0040E0CA                 add     esp, 14h
.text:0040E0CD                 pop     ebx
.text:0040E0CE                 pop     esi
.text:0040E0CF                 retn
.text:0040E0D0 ; ---------------------------------------------------------------------------
.text:0040E0D0
.text:0040E0D0 loc_40E0D0:                             ; CODE XREF: sub_40E040+6A↑j
.text:0040E0D0                 mov     [esp+1Ch+Format], ecx ; File
.text:0040E0D4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040E0DB                 call    _flsbuf
.text:0040E0E0                 jmp     short loc_40E0B5
.text:0040E0E2 ; ---------------------------------------------------------------------------
.text:0040E0E2
.text:0040E0E2 loc_40E0E2:                             ; CODE XREF: sub_40E040+56↑j
.text:0040E0E2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:0040E0E5                 call    strerror
.text:0040E0EA                 test    eax, eax
.text:0040E0EC                 jz      short loc_40E10D
.text:0040E0EE
.text:0040E0EE loc_40E0EE:                             ; CODE XREF: sub_40E040+D2↓j
.text:0040E0EE                 mov     [esp+1Ch+ArgList], eax
.text:0040E0F2                 mov     ebx, ds:_iob
.text:0040E0F8                 mov     [esp+1Ch+Format], offset aS_2 ; ": %s"
.text:0040E100                 add     ebx, 40h ; '@'
.text:0040E103                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:0040E106                 call    fprintf
.text:0040E10B                 jmp     short loc_40E098
.text:0040E10D ; ---------------------------------------------------------------------------
.text:0040E10D
.text:0040E10D loc_40E10D:                             ; CODE XREF: sub_40E040+AC↑j
.text:0040E10D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040E112                 jmp     short loc_40E0EE
.text:0040E114 ; ---------------------------------------------------------------------------
.text:0040E114
.text:0040E114 loc_40E114:                             ; CODE XREF: sub_40E040+25↑j
.text:0040E114                 mov     [esp+1Ch+Format], offset aS_3 ; "%s: "
.text:0040E11C                 mov     edx, ds:_iob
.text:0040E122                 mov     ecx, ds:dword_4196A0
.text:0040E128                 add     edx, 40h ; '@'
.text:0040E12B                 mov     [esp+1Ch+ArgList], ecx
.text:0040E12F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040E132                 call    fprintf
.text:0040E137                 jmp     loc_40E06D
.text:0040E13C ; ---------------------------------------------------------------------------
.text:0040E13C
.text:0040E13C loc_40E13C:                             ; CODE XREF: sub_40E040+88↑j
.text:0040E13C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040E13F                 call    exit
.text:0040E13F sub_40E040      endp
.text:0040E13F
.text:0040E144
.text:0040E144 ; =============== S U B R O U T I N E =======================================
.text:0040E144
.text:0040E144
.text:0040E144 ; int __cdecl sub_40E144(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:0040E144 sub_40E144      proc near               ; DATA XREF: sub_40E144+77↓o
.text:0040E144
.text:0040E144 Stream          = dword ptr -28h
.text:0040E144 Format          = dword ptr -24h
.text:0040E144 ArgList         = dword ptr -20h
.text:0040E144 var_1C          = dword ptr -1Ch
.text:0040E144 Code            = dword ptr  8
.text:0040E144 ErrorMessage    = dword ptr  0Ch
.text:0040E144 Str2            = dword ptr  10h
.text:0040E144 arg_10          = dword ptr  14h
.text:0040E144 arg_14          = dword ptr  18h
.text:0040E144 arg_18          = byte ptr  1Ch
.text:0040E144
.text:0040E144                 and     eax, 64253A73h
.text:0040E149                 cmp     ah, [eax]
.text:0040E14B
.text:0040E14B loc_40E14B:                             ; DATA XREF: sub_40E144:loc_40E285↓o
.text:0040E14B                 add     ds:55003A73h, ah
.text:0040E151                 push    edi
.text:0040E152                 push    esi
.text:0040E153                 push    ebx
.text:0040E154                 sub     esp, 1Ch
.text:0040E157                 mov     edx, ds:dword_419720
.text:0040E15D                 mov     ebp, [esp+28h+Code]
.text:0040E161                 mov     edi, [esp+28h+ErrorMessage]
.text:0040E165                 test    edx, edx
.text:0040E167                 mov     ebx, [esp+28h+Str2]
.text:0040E16B                 mov     esi, [esp+28h+arg_10]
.text:0040E16F                 jz      short loc_40E189
.text:0040E171                 cmp     ds:dword_419370, esi
.text:0040E177                 jz      loc_40E2B0
.text:0040E17D
.text:0040E17D loc_40E17D:                             ; CODE XREF: sub_40E144+18D↓j
.text:0040E17D                 mov     ds:Str1, ebx
.text:0040E183                 mov     ds:dword_419370, esi
.text:0040E189
.text:0040E189 loc_40E189:                             ; CODE XREF: sub_40E144+2B↑j
.text:0040E189                 mov     edx, ds:_iob
.text:0040E18F                 add     edx, 20h ; ' '
.text:0040E192                 mov     [esp+28h+Stream], edx ; Stream
.text:0040E195                 call    fflush
.text:0040E19A                 mov     eax, ds:dword_4196E0
.text:0040E19F                 test    eax, eax
.text:0040E1A1                 jz      loc_40E285
.text:0040E1A7                 call    eax ; dword_4196E0
.text:0040E1A9
.text:0040E1A9 loc_40E1A9:                             ; CODE XREF: sub_40E144+164↓j
.text:0040E1A9                 test    ebx, ebx
.text:0040E1AB                 jz      short loc_40E1CE
.text:0040E1AD                 mov     [esp+28h+ArgList], ebx
.text:0040E1B1                 mov     ebx, ds:_iob
.text:0040E1B7                 mov     [esp+28h+var_1C], esi
.text:0040E1BB                 mov     [esp+28h+Format], offset sub_40E144 ; Format
.text:0040E1C3                 add     ebx, 40h ; '@'
.text:0040E1C6                 mov     [esp+28h+Stream], ebx ; Stream
.text:0040E1C9                 call    fprintf
.text:0040E1CE
.text:0040E1CE loc_40E1CE:                             ; CODE XREF: sub_40E144+67↑j
.text:0040E1CE                 mov     esi, ds:_iob
.text:0040E1D4                 lea     edx, [esp+28h+arg_18]
.text:0040E1D8                 mov     ecx, [esp+28h+arg_14]
.text:0040E1DC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:0040E1E0                 add     esi, 40h ; '@'
.text:0040E1E3                 mov     [esp+28h+Format], ecx ; Format
.text:0040E1E7                 mov     [esp+28h+Stream], esi ; Stream
.text:0040E1EA                 call    vfprintf
.text:0040E1EF                 inc     ds:dword_4196F0
.text:0040E1F5                 test    edi, edi
.text:0040E1F7                 jnz     short loc_40E250
.text:0040E1F9
.text:0040E1F9 loc_40E1F9:                             ; CODE XREF: sub_40E144+135↓j
.text:0040E1F9                 mov     edx, ds:_iob
.text:0040E1FF                 lea     ecx, [edx+40h]
.text:0040E202                 mov     ebx, [ecx+4]
.text:0040E205                 dec     ebx
.text:0040E206                 test    ebx, ebx
.text:0040E208                 mov     [ecx+4], ebx
.text:0040E20B                 js      short loc_40E237
.text:0040E20D                 mov     esi, [edx+40h]
.text:0040E210                 mov     byte ptr [esi], 0Ah
.text:0040E213                 inc     dword ptr [edx+40h]
.text:0040E216
.text:0040E216 loc_40E216:                             ; CODE XREF: sub_40E144+103↓j
.text:0040E216                 mov     ecx, ds:_iob
.text:0040E21C                 add     ecx, 40h ; '@'
.text:0040E21F                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040E222                 call    fflush
.text:0040E227                 test    ebp, ebp
.text:0040E229                 jnz     loc_40E2D6
.text:0040E22F
.text:0040E22F loc_40E22F:                             ; CODE XREF: sub_40E144+173↓j
.text:0040E22F                                         ; sub_40E144+187↓j
.text:0040E22F                 add     esp, 1Ch
.text:0040E232                 pop     ebx
.text:0040E233                 pop     esi
.text:0040E234                 pop     edi
.text:0040E235                 pop     ebp
.text:0040E236                 retn
.text:0040E237 ; ---------------------------------------------------------------------------
.text:0040E237
.text:0040E237 loc_40E237:                             ; CODE XREF: sub_40E144+C7↑j
.text:0040E237                 mov     [esp+28h+Format], ecx ; File
.text:0040E23B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:0040E242                 call    _flsbuf
.text:0040E247                 jmp     short loc_40E216
.text:0040E247 ; ---------------------------------------------------------------------------
.text:0040E249                 align 10h
.text:0040E250
.text:0040E250 loc_40E250:                             ; CODE XREF: sub_40E144+B3↑j
.text:0040E250                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:0040E253                 call    strerror
.text:0040E258                 test    eax, eax
.text:0040E25A                 jz      short loc_40E27E
.text:0040E25C
.text:0040E25C loc_40E25C:                             ; CODE XREF: sub_40E144+13F↓j
.text:0040E25C                 mov     [esp+28h+ArgList], eax
.text:0040E260                 mov     edi, ds:_iob
.text:0040E266                 mov     [esp+28h+Format], offset aS_2 ; ": %s"
.text:0040E26E                 add     edi, 40h ; '@'
.text:0040E271                 mov     [esp+28h+Stream], edi ; Stream
.text:0040E274                 call    fprintf
.text:0040E279                 jmp     loc_40E1F9
.text:0040E27E ; ---------------------------------------------------------------------------
.text:0040E27E
.text:0040E27E loc_40E27E:                             ; CODE XREF: sub_40E144+116↑j
.text:0040E27E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040E283                 jmp     short loc_40E25C
.text:0040E285 ; ---------------------------------------------------------------------------
.text:0040E285
.text:0040E285 loc_40E285:                             ; CODE XREF: sub_40E144+5D↑j
.text:0040E285                 mov     [esp+28h+Format], (offset loc_40E14B+1) ; Format
.text:0040E28D                 mov     ecx, ds:_iob
.text:0040E293                 mov     edx, ds:dword_4196A0
.text:0040E299                 add     ecx, 40h ; '@'
.text:0040E29C                 mov     [esp+28h+ArgList], edx
.text:0040E2A0                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040E2A3                 call    fprintf
.text:0040E2A8                 jmp     loc_40E1A9
.text:0040E2A8 ; ---------------------------------------------------------------------------
.text:0040E2AD                 align 10h
.text:0040E2B0
.text:0040E2B0 loc_40E2B0:                             ; CODE XREF: sub_40E144+33↑j
.text:0040E2B0                 mov     eax, ds:Str1
.text:0040E2B5                 cmp     ebx, eax
.text:0040E2B7                 jz      loc_40E22F
.text:0040E2BD                 mov     [esp+28h+Format], ebx ; Str2
.text:0040E2C1                 mov     [esp+28h+Stream], eax ; Str1
.text:0040E2C4                 call    strcmp
.text:0040E2C9                 test    eax, eax
.text:0040E2CB                 jz      loc_40E22F
.text:0040E2D1                 jmp     loc_40E17D
.text:0040E2D6 ; ---------------------------------------------------------------------------
.text:0040E2D6
.text:0040E2D6 loc_40E2D6:                             ; CODE XREF: sub_40E144+E5↑j
.text:0040E2D6                 mov     [esp+28h+Stream], ebp ; Code
.text:0040E2D9                 call    exit
.text:0040E2D9 sub_40E144      endp ; sp-analysis failed
.text:0040E2D9
.text:0040E2D9 ; ---------------------------------------------------------------------------
.text:0040E2DE                 align 10h
.text:0040E2E0
.text:0040E2E0 ; =============== S U B R O U T I N E =======================================
.text:0040E2E0
.text:0040E2E0
.text:0040E2E0 ; int __cdecl sub_40E2E0(LPCSTR, LPCSTR)
.text:0040E2E0 sub_40E2E0      proc near               ; CODE XREF: sub_40E4C0+A7↓p
.text:0040E2E0
.text:0040E2E0 lpFileName      = dword ptr -27Ch
.text:0040E2E0 dwDesiredAccess = dword ptr -278h
.text:0040E2E0 dwShareMode     = dword ptr -274h
.text:0040E2E0 lpSecurityAttributes= dword ptr -270h
.text:0040E2E0 dwCreationDisposition= dword ptr -26Ch
.text:0040E2E0 dwFlagsAndAttributes= dword ptr -268h
.text:0040E2E0 hTemplateFile   = dword ptr -264h
.text:0040E2E0 NumberOfBytesWritten= dword ptr -254h
.text:0040E2E0 Context         = dword ptr -250h
.text:0040E2E0 Dest            = word ptr -24Ch
.text:0040E2E0 Buffer          = byte ptr -3Ch
.text:0040E2E0 var_38          = dword ptr -38h
.text:0040E2E0 var_34          = dword ptr -34h
.text:0040E2E0 var_30          = dword ptr -30h
.text:0040E2E0 var_2C          = dword ptr -2Ch
.text:0040E2E0 arg_0           = dword ptr  4
.text:0040E2E0 arg_4           = dword ptr  8
.text:0040E2E0
.text:0040E2E0                 push    ebp
.text:0040E2E1                 push    edi
.text:0040E2E2                 push    esi
.text:0040E2E3                 push    ebx
.text:0040E2E4                 sub     esp, 26Ch
.text:0040E2EA                 mov     edx, [esp+27Ch+arg_0]
.text:0040E2F1                 mov     [esp+27Ch+Context], 0
.text:0040E2F9                 mov     [esp+27Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040E301                 mov     [esp+27Ch+dwFlagsAndAttributes], 3000000h ; dwFlagsAndAttributes
.text:0040E309                 mov     [esp+27Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040E311                 mov     [esp+27Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040E319                 mov     [esp+27Ch+dwShareMode], 0 ; dwShareMode
.text:0040E321                 mov     [esp+27Ch+dwDesiredAccess], 40000000h ; dwDesiredAccess
.text:0040E329                 mov     [esp+27Ch+lpFileName], edx ; lpFileName
.text:0040E32C                 call    CreateFileA
.text:0040E331                 sub     esp, 1Ch
.text:0040E334                 mov     ebx, eax
.text:0040E336                 cmp     eax, 0FFFFFFFFh
.text:0040E339                 jz      loc_40E497
.text:0040E33F                 mov     edx, [esp+27Ch+arg_4]
.text:0040E346                 lea     esi, [esp+27Ch+Dest]
.text:0040E34A                 xor     edi, edi
.text:0040E34C                 mov     ebp, 5
.text:0040E351                 mov     [esp+27Ch+lpFileName], edx ; LPCSTR
.text:0040E354                 call    sub_40F8C0
.text:0040E359                 mov     [esp+27Ch+lpFileName], eax
.text:0040E35C                 call    sub_40EAB0
.text:0040E361                 mov     [esp+27Ch+dwDesiredAccess], eax ; Source
.text:0040E365                 mov     [esp+27Ch+lpFileName], esi ; Dest
.text:0040E368                 mov     [esp+27Ch+dwShareMode], 104h ; MaxCount
.text:0040E370                 call    mbstowcs
.text:0040E375                 mov     dword ptr [esp+27Ch+Buffer], ebp
.text:0040E37C                 lea     esi, [eax+eax]
.text:0040E37F                 xor     eax, eax
.text:0040E381                 mov     [esp+27Ch+var_2C], edi
.text:0040E388                 mov     ecx, esi
.text:0040E38A                 lea     ebp, [esp+27Ch+Context]
.text:0040E38E                 mov     [esp+27Ch+var_38], eax
.text:0040E395                 sar     ecx, 1Fh
.text:0040E398                 lea     edi, [esp+27Ch+NumberOfBytesWritten]
.text:0040E39C                 mov     [esp+27Ch+var_34], esi
.text:0040E3A3                 lea     edx, [esp+27Ch+Buffer]
.text:0040E3AA                 mov     [esp+27Ch+var_30], ecx
.text:0040E3B1                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:0040E3B5                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:0040E3BD                 mov     [esp+27Ch+dwCreationDisposition], 0 ; bAbort
.text:0040E3C5                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:0040E3C9                 mov     [esp+27Ch+dwShareMode], 14h ; nNumberOfBytesToWrite
.text:0040E3D1                 mov     [esp+27Ch+dwDesiredAccess], edx ; lpBuffer
.text:0040E3D5                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:0040E3D8                 call    BackupWrite
.text:0040E3DD                 sub     esp, 1Ch
.text:0040E3E0                 test    eax, eax
.text:0040E3E2                 jz      loc_40E477
.text:0040E3E8                 cmp     [esp+27Ch+NumberOfBytesWritten], 14h
.text:0040E3ED                 jnz     loc_40E477
.text:0040E3F3                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:0040E3F7                 lea     ecx, [esp+27Ch+Dest]
.text:0040E3FB                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:0040E403                 mov     [esp+27Ch+dwCreationDisposition], 0 ; bAbort
.text:0040E40B                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:0040E40F                 mov     [esp+27Ch+dwShareMode], esi ; nNumberOfBytesToWrite
.text:0040E413                 mov     [esp+27Ch+dwDesiredAccess], ecx ; lpBuffer
.text:0040E417                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:0040E41A                 call    BackupWrite
.text:0040E41F                 sub     esp, 1Ch
.text:0040E422                 test    eax, eax
.text:0040E424                 jz      short loc_40E477
.text:0040E426                 cmp     [esp+27Ch+NumberOfBytesWritten], esi
.text:0040E42A                 jnz     short loc_40E477
.text:0040E42C                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:0040E430                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:0040E438                 mov     [esp+27Ch+dwCreationDisposition], 1 ; bAbort
.text:0040E440                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:0040E444                 mov     [esp+27Ch+dwShareMode], 0 ; nNumberOfBytesToWrite
.text:0040E44C                 mov     [esp+27Ch+dwDesiredAccess], 0 ; lpBuffer
.text:0040E454                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:0040E457                 call    BackupWrite
.text:0040E45C                 sub     esp, 1Ch
.text:0040E45F                 mov     [esp+27Ch+lpFileName], ebx ; hObject
.text:0040E462                 call    CloseHandle
.text:0040E467                 sub     esp, 4
.text:0040E46A                 xor     eax, eax
.text:0040E46C
.text:0040E46C loc_40E46C:                             ; CODE XREF: sub_40E2E0+1B5↓j
.text:0040E46C                 add     esp, 26Ch
.text:0040E472                 pop     ebx
.text:0040E473                 pop     esi
.text:0040E474                 pop     edi
.text:0040E475                 pop     ebp
.text:0040E476                 retn
.text:0040E477 ; ---------------------------------------------------------------------------
.text:0040E477
.text:0040E477 loc_40E477:                             ; CODE XREF: sub_40E2E0+102↑j
.text:0040E477                                         ; sub_40E2E0+10D↑j ...
.text:0040E477                 mov     [esp+27Ch+lpFileName], ebx ; hObject
.text:0040E47A
.text:0040E47A loc_40E47A:                             ; CODE XREF: sub_40E2E0+1BE↓j
.text:0040E47A                 call    CloseHandle
.text:0040E47F                 sub     esp, 4
.text:0040E482                 call    sub_40FCA0
.text:0040E487                 mov     edi, eax
.text:0040E489                 call    _errno
.text:0040E48E                 mov     [eax], edi
.text:0040E490                 mov     eax, 0FFFFFFFFh
.text:0040E495                 jmp     short loc_40E46C
.text:0040E497 ; ---------------------------------------------------------------------------
.text:0040E497
.text:0040E497 loc_40E497:                             ; CODE XREF: sub_40E2E0+59↑j
.text:0040E497                 mov     [esp+27Ch+lpFileName], 0FFFFFFFFh
.text:0040E49E                 jmp     short loc_40E47A
.text:0040E49E sub_40E2E0      endp
.text:0040E49E
.text:0040E49E ; ---------------------------------------------------------------------------
.text:0040E4A0 ; const CHAR LibFileName[]
.text:0040E4A0 LibFileName     db 'KERNEL32',0         ; DATA XREF: sub_40E4C0+2C↓o
.text:0040E4A9 ; const CHAR ProcName[]
.text:0040E4A9 ProcName        db 'CreateHardLinkA',0  ; DATA XREF: sub_40E4C0+41↓o
.text:0040E4B9                 align 10h
.text:0040E4C0
.text:0040E4C0 ; =============== S U B R O U T I N E =======================================
.text:0040E4C0
.text:0040E4C0
.text:0040E4C0 ; int __cdecl sub_40E4C0(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.text:0040E4C0 sub_40E4C0      proc near               ; DATA XREF: sub_401FB0:loc_40266B↑o
.text:0040E4C0
.text:0040E4C0 lpLibFileName   = dword ptr -1Ch
.text:0040E4C0 lpProcName      = dword ptr -18h
.text:0040E4C0 bFailIfExists   = dword ptr -14h
.text:0040E4C0 var_C           = dword ptr -0Ch
.text:0040E4C0 var_8           = dword ptr -8
.text:0040E4C0 var_4           = dword ptr -4
.text:0040E4C0 lpExistingFileName= dword ptr  4
.text:0040E4C0 lpNewFileName   = dword ptr  8
.text:0040E4C0
.text:0040E4C0                 sub     esp, 1Ch
.text:0040E4C3                 mov     [esp+1Ch+var_4], edi
.text:0040E4C7                 mov     edi, [esp+1Ch+lpExistingFileName]
.text:0040E4CB                 mov     [esp+1Ch+var_C], ebx
.text:0040E4CF                 mov     ebx, [esp+1Ch+lpNewFileName]
.text:0040E4D3                 test    edi, edi
.text:0040E4D5                 mov     [esp+1Ch+var_8], esi
.text:0040E4D9                 mov     esi, 0FFFFFFFFh
.text:0040E4DE                 jz      loc_40E5B0
.text:0040E4E4                 test    ebx, ebx
.text:0040E4E6                 jz      loc_40E5B0
.text:0040E4EC                 mov     [esp+1Ch+lpLibFileName], offset LibFileName ; "KERNEL32"
.text:0040E4F3                 call    LoadLibraryA
.text:0040E4F8                 sub     esp, 4
.text:0040E4FB                 xor     edx, edx
.text:0040E4FD                 test    eax, eax
.text:0040E4FF                 jz      short loc_40E516
.text:0040E501                 mov     [esp+1Ch+lpProcName], offset ProcName ; "CreateHardLinkA"
.text:0040E509                 mov     [esp+1Ch+lpLibFileName], eax ; hModule
.text:0040E50C                 call    GetProcAddress
.text:0040E511                 sub     esp, 8
.text:0040E514                 mov     edx, eax
.text:0040E516
.text:0040E516 loc_40E516:                             ; CODE XREF: sub_40E4C0+3F↑j
.text:0040E516                 test    edx, edx
.text:0040E518                 jz      short loc_40E560
.text:0040E51A                 mov     [esp+1Ch+bFailIfExists], 0
.text:0040E522                 mov     [esp+1Ch+lpProcName], edi
.text:0040E526                 mov     [esp+1Ch+lpLibFileName], ebx
.text:0040E529                 call    edx
.text:0040E52B                 sub     esp, 0Ch
.text:0040E52E                 test    eax, eax
.text:0040E530                 jz      short loc_40E552
.text:0040E532                 xor     esi, esi
.text:0040E534                 lea     esi, [esi+0]
.text:0040E53A                 lea     edi, [edi+0]
.text:0040E540
.text:0040E540 loc_40E540:                             ; CODE XREF: sub_40E4C0+95↓j
.text:0040E540                                         ; sub_40E4C0+B1↓j ...
.text:0040E540                 mov     eax, esi
.text:0040E542
.text:0040E542 loc_40E542:                             ; CODE XREF: sub_40E4C0+100↓j
.text:0040E542                 mov     ebx, [esp+1Ch+var_C]
.text:0040E546                 mov     esi, [esp+1Ch+var_8]
.text:0040E54A                 mov     edi, [esp+1Ch+var_4]
.text:0040E54E                 add     esp, 1Ch
.text:0040E551                 retn
.text:0040E552 ; ---------------------------------------------------------------------------
.text:0040E552
.text:0040E552 loc_40E552:                             ; CODE XREF: sub_40E4C0+70↑j
.text:0040E552                 cmp     esi, 0FFFFFFFFh
.text:0040E555                 jnz     short loc_40E540
.text:0040E557                 mov     esi, esi
.text:0040E559                 lea     edi, [edi+0]
.text:0040E560
.text:0040E560 loc_40E560:                             ; CODE XREF: sub_40E4C0+58↑j
.text:0040E560                 mov     [esp+1Ch+lpProcName], ebx ; LPCSTR
.text:0040E564                 mov     [esp+1Ch+lpLibFileName], edi ; LPCSTR
.text:0040E567                 call    sub_40E2E0
.text:0040E56C                 cmp     eax, 0FFFFFFFFh
.text:0040E56F                 mov     esi, eax
.text:0040E571                 jnz     short loc_40E540
.text:0040E573                 mov     [esp+1Ch+bFailIfExists], 1 ; bFailIfExists
.text:0040E57B                 mov     [esp+1Ch+lpProcName], ebx ; lpNewFileName
.text:0040E57F                 mov     [esp+1Ch+lpLibFileName], edi ; lpExistingFileName
.text:0040E582                 call    CopyFileA
.text:0040E587                 sub     esp, 0Ch
.text:0040E58A                 test    eax, eax
.text:0040E58C                 setnz   cl
.text:0040E58F                 movzx   edx, cl
.text:0040E592                 lea     esi, [edx-1]
.text:0040E595                 cmp     esi, 0FFFFFFFFh
.text:0040E598                 jnz     short loc_40E540
.text:0040E59A                 call    sub_40FCA0
.text:0040E59F                 mov     edi, eax
.text:0040E5A1                 call    _errno
.text:0040E5A6                 mov     [eax], edi
.text:0040E5A8                 jmp     short loc_40E540
.text:0040E5A8 ; ---------------------------------------------------------------------------
.text:0040E5AA                 align 10h
.text:0040E5B0
.text:0040E5B0 loc_40E5B0:                             ; CODE XREF: sub_40E4C0+1E↑j
.text:0040E5B0                                         ; sub_40E4C0+26↑j
.text:0040E5B0                 call    _errno
.text:0040E5B5                 mov     dword ptr [eax], 16h
.text:0040E5BB                 mov     eax, 0FFFFFFFFh
.text:0040E5C0                 jmp     short loc_40E542
.text:0040E5C0 sub_40E4C0      endp
.text:0040E5C0
.text:0040E5C0 ; ---------------------------------------------------------------------------
.text:0040E5C2                 align 10h
.text:0040E5D0                 retn
.text:0040E5D0 ; ---------------------------------------------------------------------------
.text:0040E5D1                 align 10h
.text:0040E5E0
.text:0040E5E0 ; =============== S U B R O U T I N E =======================================
.text:0040E5E0
.text:0040E5E0
.text:0040E5E0 sub_40E5E0      proc near               ; CODE XREF: sub_402C30+6D↑p
.text:0040E5E0                                         ; sub_402C30+600↑p
.text:0040E5E0                                         ; DATA XREF: ...
.text:0040E5E0
.text:0040E5E0 var_C           = dword ptr -0Ch
.text:0040E5E0 var_8           = dword ptr -8
.text:0040E5E0 var_4           = dword ptr -4
.text:0040E5E0 arg_0           = dword ptr  4
.text:0040E5E0 arg_4           = dword ptr  8
.text:0040E5E0
.text:0040E5E0                 sub     esp, 0Ch
.text:0040E5E3                 mov     edx, [esp+0Ch+arg_4]
.text:0040E5E7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040E5EE                 mov     [esp+0Ch+var_4], edx ; int
.text:0040E5F2                 mov     edx, [esp+0Ch+arg_0]
.text:0040E5F6                 mov     [esp+0Ch+var_8], edx ; int
.text:0040E5FA                 call    sub_40E610
.text:0040E5FF                 add     esp, 0Ch
.text:0040E602                 retn
.text:0040E602 sub_40E5E0      endp
.text:0040E602
.text:0040E602 ; ---------------------------------------------------------------------------
.text:0040E603                 align 10h
.text:0040E610
.text:0040E610 ; =============== S U B R O U T I N E =======================================
.text:0040E610
.text:0040E610
.text:0040E610 ; int __cdecl sub_40E610(LPCSTR, int, int)
.text:0040E610 sub_40E610      proc near               ; CODE XREF: sub_40E5E0+1A↑p
.text:0040E610                                         ; sub_40EEE0+90↓p ...
.text:0040E610
.text:0040E610 lpFileName      = dword ptr -2Ch
.text:0040E610 dwDesiredAccess = dword ptr -28h
.text:0040E610 dwShareMode     = dword ptr -24h
.text:0040E610 lpSecurityAttributes= dword ptr -20h
.text:0040E610 dwCreationDisposition= dword ptr -1Ch
.text:0040E610 dwFlagsAndAttributes= dword ptr -18h
.text:0040E610 hTemplateFile   = dword ptr -14h
.text:0040E610 var_10          = dword ptr -10h
.text:0040E610 var_C           = dword ptr -0Ch
.text:0040E610 var_8           = dword ptr -8
.text:0040E610 var_4           = dword ptr -4
.text:0040E610 arg_0           = dword ptr  4
.text:0040E610 arg_4           = dword ptr  8
.text:0040E610 arg_8           = dword ptr  0Ch
.text:0040E610
.text:0040E610 ; FUNCTION CHUNK AT .text:004116B0 SIZE 0000013A BYTES
.text:0040E610
.text:0040E610                 sub     esp, 0Ch
.text:0040E613                 mov     ecx, [esp+0Ch+arg_0]
.text:0040E617                 mov     edx, [esp+0Ch+arg_4]
.text:0040E61B                 mov     eax, [esp+0Ch+arg_8]
.text:0040E61F                 test    ecx, ecx
.text:0040E621                 jnz     short loc_40E640
.text:0040E623                 test    edx, edx
.text:0040E625                 jz      short loc_40E640
.text:0040E627                 test    eax, eax
.text:0040E629                 jz      short loc_40E640
.text:0040E62B                 mov     [esp+0Ch+arg_4], eax
.text:0040E62F                 mov     [esp+0Ch+arg_0], edx
.text:0040E633                 add     esp, 0Ch
.text:0040E636                 jmp     loc_4116B0
.text:0040E636 ; ---------------------------------------------------------------------------
.text:0040E63B                 align 10h
.text:0040E640
.text:0040E640 loc_40E640:                             ; CODE XREF: sub_40E610+11↑j
.text:0040E640                                         ; sub_40E610+15↑j ...
.text:0040E640                 call    _errno
.text:0040E645                 mov     dword ptr [eax], 16h
.text:0040E64B                 mov     eax, 0FFFFFFFFh
.text:0040E650                 add     esp, 0Ch
.text:0040E653                 retn
.text:0040E653 sub_40E610      endp
.text:0040E653
.text:0040E653 ; ---------------------------------------------------------------------------
.text:0040E654                 align 10h
.text:0040E660
.text:0040E660 ; =============== S U B R O U T I N E =======================================
.text:0040E660
.text:0040E660 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040E660
.text:0040E660 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040E660 _win32_longpath proc near               ; CODE XREF: .text:0040EE24↓p
.text:0040E660
.text:0040E660 C               = dword ptr -278h
.text:0040E660 lpFindFileData  = dword ptr -274h
.text:0040E660 Destination     = byte ptr -268h
.text:0040E660 var_267         = byte ptr -267h
.text:0040E660 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040E660 lpFileName      = dword ptr  8
.text:0040E660
.text:0040E660                 push    ebp
.text:0040E661                 xor     eax, eax
.text:0040E663                 push    edi
.text:0040E664                 push    esi
.text:0040E665                 push    ebx
.text:0040E666                 sub     esp, 26Ch
.text:0040E66C                 mov     esi, [esp+278h+lpFileName]
.text:0040E673                 lea     ebp, [esp+278h+Destination]
.text:0040E677                 test    esi, esi
.text:0040E679                 jz      loc_40E7D7
.text:0040E67F                 movsx   edx, byte ptr [esi]
.text:0040E682                 mov     [esp+278h+C], edx ; C
.text:0040E685                 call    isalpha
.text:0040E68A                 test    eax, eax
.text:0040E68C                 jz      short loc_40E69F
.text:0040E68E                 mov     eax, [esp+278h+lpFileName]
.text:0040E695                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040E699                 jz      loc_40E9DB
.text:0040E69F
.text:0040E69F loc_40E69F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040E69F                 mov     edx, [esp+278h+lpFileName]
.text:0040E6A6                 movzx   eax, byte ptr [edx]
.text:0040E6A9                 cmp     al, 2Fh ; '/'
.text:0040E6AB                 jz      loc_40E8BB
.text:0040E6B1                 cmp     al, 5Ch ; '\'
.text:0040E6B3                 jz      loc_40E8BB
.text:0040E6B9
.text:0040E6B9 loc_40E6B9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040E6B9                                         ; _win32_longpath+2B1↓j ...
.text:0040E6B9                 mov     [ebp+268h+Destination], 0
.text:0040E6BD                 movzx   ebx, byte ptr [esi]
.text:0040E6C0                 test    bl, bl
.text:0040E6C2                 jz      loc_40E7B9
.text:0040E6C8                 nop
.text:0040E6C9                 lea     esi, [esi+0]
.text:0040E6D0
.text:0040E6D0 loc_40E6D0:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040E6D0                 cmp     bl, 2Fh ; '/'
.text:0040E6D3                 jz      loc_40E870
.text:0040E6D9                 cmp     bl, 5Ch ; '\'
.text:0040E6DC                 jz      loc_40E870
.text:0040E6E2
.text:0040E6E2 loc_40E6E2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040E6E2                                         ; _win32_longpath+22C↓j ...
.text:0040E6E2                 cmp     bl, 2Eh ; '.'
.text:0040E6E5                 jz      loc_40E810
.text:0040E6EB
.text:0040E6EB loc_40E6EB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040E6EB                                         ; _win32_longpath+203↓j
.text:0040E6EB                 test    bl, bl
.text:0040E6ED                 jz      loc_40E7B9
.text:0040E6F3                 cmp     bl, 2Fh ; '/'
.text:0040E6F6                 jz      short loc_40E712
.text:0040E6F8                 cmp     bl, 5Ch ; '\'
.text:0040E6FB                 jz      short loc_40E712
.text:0040E6FD                 lea     esi, [esi+0]
.text:0040E700
.text:0040E700 loc_40E700:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040E700                 inc     esi
.text:0040E701                 movzx   ebx, byte ptr [esi]
.text:0040E704                 test    bl, bl
.text:0040E706                 jz      short loc_40E712
.text:0040E708                 cmp     bl, 2Fh ; '/'
.text:0040E70B                 jz      short loc_40E712
.text:0040E70D                 cmp     bl, 5Ch ; '\'
.text:0040E710                 jnz     short loc_40E700
.text:0040E712
.text:0040E712 loc_40E712:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040E712                                         ; _win32_longpath+9B↑j ...
.text:0040E712                 mov     byte ptr [esi], 0
.text:0040E715                 lea     edx, [esp+278h+FindFileData]
.text:0040E71C                 mov     eax, [esp+278h+lpFileName]
.text:0040E723                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040E727                 mov     [esp+278h+C], eax ; lpFileName
.text:0040E72A                 call    FindFirstFileA
.text:0040E72F                 mov     [esi], bl
.text:0040E731                 sub     esp, 8
.text:0040E734                 mov     edi, eax
.text:0040E736                 cmp     eax, 0FFFFFFFFh
.text:0040E739                 jz      loc_40E7FC
.text:0040E73F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040E746                 mov     ecx, ebx
.text:0040E748                 nop
.text:0040E749                 lea     esi, [esi+0]
.text:0040E750
.text:0040E750 loc_40E750:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040E750                 mov     eax, [ebx]
.text:0040E752                 add     ebx, 4
.text:0040E755                 lea     edx, [eax-1010101h]
.text:0040E75B                 not     eax
.text:0040E75D                 and     edx, eax
.text:0040E75F                 and     edx, 80808080h
.text:0040E765                 jz      short loc_40E750
.text:0040E767                 test    edx, 8080h
.text:0040E76D                 jnz     short loc_40E775
.text:0040E76F                 shr     edx, 10h
.text:0040E772                 add     ebx, 2
.text:0040E775
.text:0040E775 loc_40E775:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040E775                 add     dl, dl
.text:0040E777                 sbb     ebx, 3
.text:0040E77A                 sub     ebx, ecx
.text:0040E77C                 lea     ecx, [esp+278h+Destination]
.text:0040E780                 sub     ecx, ebp
.text:0040E782                 add     ecx, 105h
.text:0040E788                 cmp     ecx, ebx
.text:0040E78A                 jle     short loc_40E7E2
.text:0040E78C                 mov     [esp+278h+C], ebp ; Destination
.text:0040E78F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040E796                 add     ebp, ebx
.text:0040E798                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040E79C                 call    strcpy
.text:0040E7A1                 mov     [esp+278h+C], edi ; hFindFile
.text:0040E7A4                 call    FindClose
.text:0040E7A9                 sub     esp, 4
.text:0040E7AC
.text:0040E7AC loc_40E7AC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040E7AC                 movzx   ecx, byte ptr [esi]
.text:0040E7AF                 test    cl, cl
.text:0040E7B1                 mov     bl, cl
.text:0040E7B3                 jnz     loc_40E6D0
.text:0040E7B9
.text:0040E7B9 loc_40E7B9:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040E7B9                                         ; _win32_longpath+8D↑j
.text:0040E7B9                 mov     esi, [esp+278h+lpFileName]
.text:0040E7C0                 lea     ebp, [esp+278h+Destination]
.text:0040E7C4                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040E7C8                 mov     [esp+278h+C], esi ; Destination
.text:0040E7CB                 call    strcpy
.text:0040E7D0                 mov     eax, [esp+278h+lpFileName]
.text:0040E7D7
.text:0040E7D7 loc_40E7D7:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040E7D7                                         ; _win32_longpath+19A↓j
.text:0040E7D7                 add     esp, 26Ch
.text:0040E7DD                 pop     ebx
.text:0040E7DE                 pop     esi
.text:0040E7DF                 pop     edi
.text:0040E7E0                 pop     ebp
.text:0040E7E1                 retn
.text:0040E7E2 ; ---------------------------------------------------------------------------
.text:0040E7E2
.text:0040E7E2 loc_40E7E2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040E7E2                 mov     [esp+278h+C], edi ; hFindFile
.text:0040E7E5                 call    FindClose
.text:0040E7EA                 sub     esp, 4
.text:0040E7ED                 call    _errno
.text:0040E7F2                 mov     dword ptr [eax], 22h ; '"'
.text:0040E7F8
.text:0040E7F8 loc_40E7F8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040E7F8                 xor     eax, eax
.text:0040E7FA                 jmp     short loc_40E7D7
.text:0040E7FC ; ---------------------------------------------------------------------------
.text:0040E7FC
.text:0040E7FC loc_40E7FC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040E7FC                 call    _errno
.text:0040E801                 mov     dword ptr [eax], 16h
.text:0040E807                 jmp     short loc_40E7F8
.text:0040E807 ; ---------------------------------------------------------------------------
.text:0040E809                 align 10h
.text:0040E810
.text:0040E810 loc_40E810:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040E810                 movzx   eax, byte ptr [esi+1]
.text:0040E814                 test    al, al
.text:0040E816                 jnz     short loc_40E845
.text:0040E818
.text:0040E818 loc_40E818:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040E818                                         ; _win32_longpath+1EB↓j ...
.text:0040E818                 test    bl, bl
.text:0040E81A                 jz      short loc_40E83C
.text:0040E81C                 cmp     bl, 2Fh ; '/'
.text:0040E81F                 jz      short loc_40E83C
.text:0040E821                 cmp     bl, 5Ch ; '\'
.text:0040E824                 jz      short loc_40E83C
.text:0040E826
.text:0040E826 loc_40E826:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040E826                 mov     [ebp+268h+Destination], bl
.text:0040E829                 inc     esi
.text:0040E82A                 inc     ebp
.text:0040E82B                 movzx   ebx, byte ptr [esi]
.text:0040E82E                 test    bl, bl
.text:0040E830                 jz      short loc_40E83C
.text:0040E832                 cmp     bl, 2Fh ; '/'
.text:0040E835                 jz      short loc_40E83C
.text:0040E837                 cmp     bl, 5Ch ; '\'
.text:0040E83A                 jnz     short loc_40E826
.text:0040E83C
.text:0040E83C loc_40E83C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040E83C                                         ; _win32_longpath+1BF↑j ...
.text:0040E83C                 mov     [ebp+268h+Destination], 0
.text:0040E840                 jmp     loc_40E7AC
.text:0040E845 ; ---------------------------------------------------------------------------
.text:0040E845
.text:0040E845 loc_40E845:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040E845                 cmp     al, 2Fh ; '/'
.text:0040E847                 jz      short loc_40E818
.text:0040E849                 cmp     al, 5Ch ; '\'
.text:0040E84B                 jz      short loc_40E818
.text:0040E84D                 cmp     al, 2Eh ; '.'
.text:0040E84F                 jnz     loc_40E6EB
.text:0040E855                 movzx   eax, byte ptr [esi+2]
.text:0040E859                 test    al, al
.text:0040E85B                 jz      short loc_40E818
.text:0040E85D                 cmp     al, 2Fh ; '/'
.text:0040E85F                 jz      short loc_40E818
.text:0040E861                 cmp     al, 5Ch ; '\'
.text:0040E863                 jnz     loc_40E6EB
.text:0040E869                 jmp     short loc_40E818
.text:0040E869 ; ---------------------------------------------------------------------------
.text:0040E86B                 align 10h
.text:0040E870
.text:0040E870 loc_40E870:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040E870                                         ; _win32_longpath+7C↑j
.text:0040E870                 mov     [ebp+268h+Destination], bl
.text:0040E873                 inc     esi
.text:0040E874                 inc     ebp
.text:0040E875                 mov     [ebp+268h+Destination], 0
.text:0040E879                 movzx   ebx, byte ptr [esi]
.text:0040E87C                 test    bl, bl
.text:0040E87E                 jz      loc_40E6E2
.text:0040E884                 cmp     bl, 2Fh ; '/'
.text:0040E887                 jz      short loc_40E8A0
.text:0040E889                 cmp     bl, 5Ch ; '\'
.text:0040E88C                 jnz     loc_40E6E2
.text:0040E892                 lea     esi, [esi+0]
.text:0040E899                 lea     edi, [edi+0]
.text:0040E8A0
.text:0040E8A0 loc_40E8A0:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040E8A0                                         ; _win32_longpath+24F↓j ...
.text:0040E8A0                 inc     esi
.text:0040E8A1                 movzx   ebx, byte ptr [esi]
.text:0040E8A4                 test    bl, bl
.text:0040E8A6                 jz      loc_40E6E2
.text:0040E8AC                 cmp     bl, 2Fh ; '/'
.text:0040E8AF                 jz      short loc_40E8A0
.text:0040E8B1                 cmp     bl, 5Ch ; '\'
.text:0040E8B4                 jz      short loc_40E8A0
.text:0040E8B6                 jmp     loc_40E6E2
.text:0040E8BB ; ---------------------------------------------------------------------------
.text:0040E8BB
.text:0040E8BB loc_40E8BB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040E8BB                                         ; _win32_longpath+53↑j
.text:0040E8BB                 mov     edi, [esp+278h+lpFileName]
.text:0040E8C2                 movzx   edx, byte ptr [edi+1]
.text:0040E8C6                 cmp     dl, 2Fh ; '/'
.text:0040E8C9                 jz      short loc_40E8D4
.text:0040E8CB                 cmp     dl, 5Ch ; '\'
.text:0040E8CE                 jnz     loc_40E6B9
.text:0040E8D4
.text:0040E8D4 loc_40E8D4:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040E8D4                 mov     esi, [esp+278h+lpFileName]
.text:0040E8DB                 mov     [ebp+268h+Destination], al
.text:0040E8DE                 mov     ecx, [esp+278h+lpFileName]
.text:0040E8E5                 inc     ebp
.text:0040E8E6                 add     esi, 2
.text:0040E8E9                 movzx   ebx, byte ptr [ecx+1]
.text:0040E8ED                 mov     [ebp+268h+Destination], bl
.text:0040E8F0                 inc     ebp
.text:0040E8F1                 movzx   eax, byte ptr [ecx+2]
.text:0040E8F5                 test    al, al
.text:0040E8F7                 jz      loc_40E9D3
.text:0040E8FD                 cmp     al, 2Fh ; '/'
.text:0040E8FF                 jz      loc_40E9B8
.text:0040E905                 cmp     al, 5Ch ; '\'
.text:0040E907                 mov     bl, al
.text:0040E909                 jz      loc_40E9B8
.text:0040E90F
.text:0040E90F loc_40E90F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040E90F                                         ; _win32_longpath+376↓j
.text:0040E90F                 test    bl, bl
.text:0040E911                 jz      loc_40E6B9
.text:0040E917                 cmp     bl, 2Fh ; '/'
.text:0040E91A                 jz      short loc_40E93B
.text:0040E91C                 cmp     bl, 5Ch ; '\'
.text:0040E91F                 jz      short loc_40E93B
.text:0040E921
.text:0040E921 loc_40E921:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040E921                 mov     [ebp+268h+Destination], bl
.text:0040E924                 inc     esi
.text:0040E925                 inc     ebp
.text:0040E926                 movzx   ebx, byte ptr [esi]
.text:0040E929                 test    bl, bl
.text:0040E92B                 jz      loc_40E6B9
.text:0040E931                 cmp     bl, 2Fh ; '/'
.text:0040E934                 jz      short loc_40E93B
.text:0040E936                 cmp     bl, 5Ch ; '\'
.text:0040E939                 jnz     short loc_40E921
.text:0040E93B
.text:0040E93B loc_40E93B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040E93B                                         ; _win32_longpath+2BF↑j ...
.text:0040E93B                 test    bl, bl
.text:0040E93D                 jz      loc_40E6B9
.text:0040E943                 mov     [ebp+268h+Destination], bl
.text:0040E946                 inc     esi
.text:0040E947                 inc     ebp
.text:0040E948                 movzx   ebx, byte ptr [esi]
.text:0040E94B                 test    bl, bl
.text:0040E94D                 jz      loc_40E6B9
.text:0040E953                 cmp     bl, 2Fh ; '/'
.text:0040E956                 jz      short loc_40E9A0
.text:0040E958                 cmp     bl, 5Ch ; '\'
.text:0040E95B                 jz      short loc_40E9A0
.text:0040E95D
.text:0040E95D loc_40E95D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040E95D                 test    bl, bl
.text:0040E95F                 jz      loc_40E6B9
.text:0040E965                 cmp     bl, 2Fh ; '/'
.text:0040E968                 jz      loc_40E6B9
.text:0040E96E                 cmp     bl, 5Ch ; '\'
.text:0040E971                 jz      loc_40E6B9
.text:0040E977
.text:0040E977 loc_40E977:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040E977                 mov     [ebp+268h+Destination], bl
.text:0040E97A                 inc     esi
.text:0040E97B                 inc     ebp
.text:0040E97C                 movzx   ebx, byte ptr [esi]
.text:0040E97F                 test    bl, bl
.text:0040E981                 jz      loc_40E6B9
.text:0040E987                 cmp     bl, 2Fh ; '/'
.text:0040E98A                 jz      loc_40E6B9
.text:0040E990                 cmp     bl, 5Ch ; '\'
.text:0040E993                 jnz     short loc_40E977
.text:0040E995                 jmp     loc_40E6B9
.text:0040E995 ; ---------------------------------------------------------------------------
.text:0040E99A                 align 10h
.text:0040E9A0
.text:0040E9A0 loc_40E9A0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040E9A0                                         ; _win32_longpath+2FB↑j ...
.text:0040E9A0                 inc     esi
.text:0040E9A1                 movzx   ebx, byte ptr [esi]
.text:0040E9A4                 test    bl, bl
.text:0040E9A6                 jz      loc_40E6B9
.text:0040E9AC                 cmp     bl, 2Fh ; '/'
.text:0040E9AF                 jz      short loc_40E9A0
.text:0040E9B1                 cmp     bl, 5Ch ; '\'
.text:0040E9B4                 jz      short loc_40E9A0
.text:0040E9B6                 jmp     short loc_40E95D
.text:0040E9B8 ; ---------------------------------------------------------------------------
.text:0040E9B8
.text:0040E9B8 loc_40E9B8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040E9B8                                         ; _win32_longpath+2A9↑j ...
.text:0040E9B8                 inc     esi
.text:0040E9B9                 movzx   ebx, byte ptr [esi]
.text:0040E9BC                 test    bl, bl
.text:0040E9BE                 jz      loc_40E6B9
.text:0040E9C4                 cmp     bl, 2Fh ; '/'
.text:0040E9C7                 jz      short loc_40E9B8
.text:0040E9C9                 cmp     bl, 5Ch ; '\'
.text:0040E9CC                 jz      short loc_40E9B8
.text:0040E9CE                 jmp     loc_40E90F
.text:0040E9D3 ; ---------------------------------------------------------------------------
.text:0040E9D3
.text:0040E9D3 loc_40E9D3:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040E9D3                 movzx   ebx, byte ptr [esi]
.text:0040E9D6                 jmp     loc_40E90F
.text:0040E9DB ; ---------------------------------------------------------------------------
.text:0040E9DB
.text:0040E9DB loc_40E9DB:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040E9DB                 movzx   ecx, byte ptr [eax]
.text:0040E9DE                 mov     esi, eax
.text:0040E9E0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040E9E5                 add     esi, 2
.text:0040E9E8                 lea     ebp, [esp+12h]
.text:0040E9EC                 mov     [esp+278h+Destination], cl
.text:0040E9F0                 jmp     loc_40E6B9
.text:0040E9F0 _win32_longpath endp
.text:0040E9F0
.text:0040E9F0 ; ---------------------------------------------------------------------------
.text:0040E9F5                 align 10h
.text:0040EA00                 sub     esp, 0Ch
.text:0040EA03                 mov     edx, [esp+10h]
.text:0040EA07                 mov     dword ptr [esp+4], 0
.text:0040EA0F                 mov     [esp], edx
.text:0040EA12                 call    sub_412310
.text:0040EA17                 inc     eax
.text:0040EA18                 setnz   dl
.text:0040EA1B                 add     esp, 0Ch
.text:0040EA1E                 movzx   eax, dl
.text:0040EA21                 retn
.text:0040EA21 ; ---------------------------------------------------------------------------
.text:0040EA22                 align 10h
.text:0040EA30
.text:0040EA30 ; =============== S U B R O U T I N E =======================================
.text:0040EA30
.text:0040EA30
.text:0040EA30 sub_40EA30      proc near               ; CODE XREF: sub_40F2B0+CE↓p
.text:0040EA30                                         ; sub_40F8E0+AA↓p ...
.text:0040EA30
.text:0040EA30 arg_0           = dword ptr  4
.text:0040EA30
.text:0040EA30                 mov     ecx, [esp+arg_0]
.text:0040EA34                 mov     edx, ecx
.text:0040EA36                 movzx   eax, byte ptr [ecx]
.text:0040EA39                 test    al, al
.text:0040EA3B                 jz      short loc_40EA4C
.text:0040EA3D                 lea     esi, [esi+0]
.text:0040EA40
.text:0040EA40 loc_40EA40:                             ; CODE XREF: sub_40EA30+1A↓j
.text:0040EA40                 cmp     al, 5Ch ; '\'
.text:0040EA42                 jz      short loc_40EA50
.text:0040EA44
.text:0040EA44 loc_40EA44:                             ; CODE XREF: sub_40EA30+23↓j
.text:0040EA44                 inc     edx
.text:0040EA45                 movzx   eax, byte ptr [edx]
.text:0040EA48                 test    al, al
.text:0040EA4A                 jnz     short loc_40EA40
.text:0040EA4C
.text:0040EA4C loc_40EA4C:                             ; CODE XREF: sub_40EA30+B↑j
.text:0040EA4C                 mov     eax, ecx
.text:0040EA4E                 retn
.text:0040EA4E ; ---------------------------------------------------------------------------
.text:0040EA4F                 align 10h
.text:0040EA50
.text:0040EA50 loc_40EA50:                             ; CODE XREF: sub_40EA30+12↑j
.text:0040EA50                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040EA53                 jmp     short loc_40EA44
.text:0040EA53 sub_40EA30      endp
.text:0040EA53
.text:0040EA53 ; ---------------------------------------------------------------------------
.text:0040EA55                 align 10h
.text:0040EA60                 push    ebx
.text:0040EA61                 sub     esp, 8
.text:0040EA64                 mov     ebx, [esp+14h]
.text:0040EA68                 mov     edx, [esp+10h]
.text:0040EA6C                 mov     [esp], ebx
.text:0040EA6F                 mov     [esp+4], edx
.text:0040EA73                 call    strcpy
.text:0040EA78                 movzx   eax, byte ptr [ebx]
.text:0040EA7B                 mov     edx, ebx
.text:0040EA7D                 test    al, al
.text:0040EA7F                 jz      short loc_40EA9C
.text:0040EA81                 jmp     short loc_40EA90
.text:0040EA81 ; ---------------------------------------------------------------------------
.text:0040EA83                 align 10h
.text:0040EA90
.text:0040EA90 loc_40EA90:                             ; CODE XREF: .text:0040EA81↑j
.text:0040EA90                                         ; .text:0040EA9A↓j
.text:0040EA90                 cmp     al, 5Ch ; '\'
.text:0040EA92                 jz      short loc_40EAA3
.text:0040EA94
.text:0040EA94 loc_40EA94:                             ; CODE XREF: .text:0040EAA6↓j
.text:0040EA94                 inc     edx
.text:0040EA95                 movzx   eax, byte ptr [edx]
.text:0040EA98                 test    al, al
.text:0040EA9A                 jnz     short loc_40EA90
.text:0040EA9C
.text:0040EA9C loc_40EA9C:                             ; CODE XREF: .text:0040EA7F↑j
.text:0040EA9C                 add     esp, 8
.text:0040EA9F                 xor     eax, eax
.text:0040EAA1                 pop     ebx
.text:0040EAA2                 retn
.text:0040EAA3 ; ---------------------------------------------------------------------------
.text:0040EAA3
.text:0040EAA3 loc_40EAA3:                             ; CODE XREF: .text:0040EA92↑j
.text:0040EAA3                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040EAA6                 jmp     short loc_40EA94
.text:0040EAA6 ; ---------------------------------------------------------------------------
.text:0040EAA8                 align 10h
.text:0040EAB0
.text:0040EAB0 ; =============== S U B R O U T I N E =======================================
.text:0040EAB0
.text:0040EAB0
.text:0040EAB0 sub_40EAB0      proc near               ; CODE XREF: sub_40E2E0+7C↑p
.text:0040EAB0                                         ; sub_40EEE0+199↓p ...
.text:0040EAB0
.text:0040EAB0 arg_0           = dword ptr  4
.text:0040EAB0
.text:0040EAB0                 mov     ecx, [esp+arg_0]
.text:0040EAB4                 mov     edx, ecx
.text:0040EAB6                 movzx   eax, byte ptr [ecx]
.text:0040EAB9                 test    al, al
.text:0040EABB                 jz      short loc_40EACC
.text:0040EABD                 lea     esi, [esi+0]
.text:0040EAC0
.text:0040EAC0 loc_40EAC0:                             ; CODE XREF: sub_40EAB0+1A↓j
.text:0040EAC0                 cmp     al, 2Fh ; '/'
.text:0040EAC2                 jz      short loc_40EAD0
.text:0040EAC4
.text:0040EAC4 loc_40EAC4:                             ; CODE XREF: sub_40EAB0+23↓j
.text:0040EAC4                 inc     edx
.text:0040EAC5                 movzx   eax, byte ptr [edx]
.text:0040EAC8                 test    al, al
.text:0040EACA                 jnz     short loc_40EAC0
.text:0040EACC
.text:0040EACC loc_40EACC:                             ; CODE XREF: sub_40EAB0+B↑j
.text:0040EACC                 mov     eax, ecx
.text:0040EACE                 retn
.text:0040EACE ; ---------------------------------------------------------------------------
.text:0040EACF                 align 10h
.text:0040EAD0
.text:0040EAD0 loc_40EAD0:                             ; CODE XREF: sub_40EAB0+12↑j
.text:0040EAD0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EAD3                 jmp     short loc_40EAC4
.text:0040EAD3 sub_40EAB0      endp
.text:0040EAD3
.text:0040EAD3 ; ---------------------------------------------------------------------------
.text:0040EAD5                 align 10h
.text:0040EAE0                 push    ebx
.text:0040EAE1                 sub     esp, 8
.text:0040EAE4                 mov     ebx, [esp+14h]
.text:0040EAE8                 mov     edx, [esp+10h]
.text:0040EAEC                 mov     [esp], ebx
.text:0040EAEF                 mov     [esp+4], edx
.text:0040EAF3                 call    strcpy
.text:0040EAF8                 movzx   eax, byte ptr [ebx]
.text:0040EAFB                 mov     edx, ebx
.text:0040EAFD                 test    al, al
.text:0040EAFF                 jz      short loc_40EB1C
.text:0040EB01                 jmp     short loc_40EB10
.text:0040EB01 ; ---------------------------------------------------------------------------
.text:0040EB03                 align 10h
.text:0040EB10
.text:0040EB10 loc_40EB10:                             ; CODE XREF: .text:0040EB01↑j
.text:0040EB10                                         ; .text:0040EB1A↓j
.text:0040EB10                 cmp     al, 2Fh ; '/'
.text:0040EB12                 jz      short loc_40EB23
.text:0040EB14
.text:0040EB14 loc_40EB14:                             ; CODE XREF: .text:0040EB26↓j
.text:0040EB14                 inc     edx
.text:0040EB15                 movzx   eax, byte ptr [edx]
.text:0040EB18                 test    al, al
.text:0040EB1A                 jnz     short loc_40EB10
.text:0040EB1C
.text:0040EB1C loc_40EB1C:                             ; CODE XREF: .text:0040EAFF↑j
.text:0040EB1C                 add     esp, 8
.text:0040EB1F                 xor     eax, eax
.text:0040EB21                 pop     ebx
.text:0040EB22                 retn
.text:0040EB23 ; ---------------------------------------------------------------------------
.text:0040EB23
.text:0040EB23 loc_40EB23:                             ; CODE XREF: .text:0040EB12↑j
.text:0040EB23                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EB26                 jmp     short loc_40EB14
.text:0040EB26 ; ---------------------------------------------------------------------------
.text:0040EB28                 align 10h
.text:0040EB30                 push    ebx
.text:0040EB31                 sub     esp, 8
.text:0040EB34                 mov     ebx, [esp+14h]
.text:0040EB38                 mov     edx, [esp+10h]
.text:0040EB3C                 mov     [esp+4], ebx
.text:0040EB40                 mov     [esp], edx
.text:0040EB43                 call    sub_40F890
.text:0040EB48                 movzx   eax, byte ptr [ebx]
.text:0040EB4B                 mov     edx, ebx
.text:0040EB4D                 test    al, al
.text:0040EB4F                 jz      short loc_40EB6C
.text:0040EB51                 jmp     short loc_40EB60
.text:0040EB51 ; ---------------------------------------------------------------------------
.text:0040EB53                 align 10h
.text:0040EB60
.text:0040EB60 loc_40EB60:                             ; CODE XREF: .text:0040EB51↑j
.text:0040EB60                                         ; .text:0040EB6A↓j
.text:0040EB60                 cmp     al, 2Fh ; '/'
.text:0040EB62                 jz      short loc_40EB73
.text:0040EB64
.text:0040EB64 loc_40EB64:                             ; CODE XREF: .text:0040EB76↓j
.text:0040EB64                 inc     edx
.text:0040EB65                 movzx   eax, byte ptr [edx]
.text:0040EB68                 test    al, al
.text:0040EB6A                 jnz     short loc_40EB60
.text:0040EB6C
.text:0040EB6C loc_40EB6C:                             ; CODE XREF: .text:0040EB4F↑j
.text:0040EB6C                 add     esp, 8
.text:0040EB6F                 xor     eax, eax
.text:0040EB71                 pop     ebx
.text:0040EB72                 retn
.text:0040EB73 ; ---------------------------------------------------------------------------
.text:0040EB73
.text:0040EB73 loc_40EB73:                             ; CODE XREF: .text:0040EB62↑j
.text:0040EB73                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040EB76                 jmp     short loc_40EB64
.text:0040EB76 ; ---------------------------------------------------------------------------
.text:0040EB78                 align 10h
.text:0040EB80                 push    ebx
.text:0040EB81                 sub     esp, 8
.text:0040EB84                 mov     ebx, [esp+14h]
.text:0040EB88                 mov     edx, [esp+10h]
.text:0040EB8C                 mov     [esp], ebx
.text:0040EB8F                 mov     [esp+4], edx
.text:0040EB93                 call    sub_40F890
.text:0040EB98                 movzx   eax, byte ptr [ebx]
.text:0040EB9B                 mov     edx, ebx
.text:0040EB9D                 test    al, al
.text:0040EB9F                 jz      short loc_40EBBC
.text:0040EBA1                 jmp     short loc_40EBB0
.text:0040EBA1 ; ---------------------------------------------------------------------------
.text:0040EBA3                 align 10h
.text:0040EBB0
.text:0040EBB0 loc_40EBB0:                             ; CODE XREF: .text:0040EBA1↑j
.text:0040EBB0                                         ; .text:0040EBBA↓j
.text:0040EBB0                 cmp     al, 5Ch ; '\'
.text:0040EBB2                 jz      short loc_40EBC1
.text:0040EBB4
.text:0040EBB4 loc_40EBB4:                             ; CODE XREF: .text:0040EBC4↓j
.text:0040EBB4                 inc     edx
.text:0040EBB5                 movzx   eax, byte ptr [edx]
.text:0040EBB8                 test    al, al
.text:0040EBBA                 jnz     short loc_40EBB0
.text:0040EBBC
.text:0040EBBC loc_40EBBC:                             ; CODE XREF: .text:0040EB9F↑j
.text:0040EBBC                 add     esp, 8
.text:0040EBBF                 pop     ebx
.text:0040EBC0                 retn
.text:0040EBC1 ; ---------------------------------------------------------------------------
.text:0040EBC1
.text:0040EBC1 loc_40EBC1:                             ; CODE XREF: .text:0040EBB2↑j
.text:0040EBC1                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040EBC4                 jmp     short loc_40EBB4
.text:0040EBC4 ; ---------------------------------------------------------------------------
.text:0040EBC6                 align 10h
.text:0040EBD0
.text:0040EBD0 ; =============== S U B R O U T I N E =======================================
.text:0040EBD0
.text:0040EBD0
.text:0040EBD0 ; int __cdecl sub_40EBD0(LPSTR)
.text:0040EBD0 sub_40EBD0      proc near               ; CODE XREF: .text:0040EC5E↓p
.text:0040EBD0                                         ; .text:0040EC9E↓p ...
.text:0040EBD0
.text:0040EBD0 hModule         = dword ptr -1Ch
.text:0040EBD0 lpFilename      = dword ptr -18h
.text:0040EBD0 nSize           = dword ptr -14h
.text:0040EBD0 arg_0           = dword ptr  4
.text:0040EBD0
.text:0040EBD0                 push    esi
.text:0040EBD1                 push    ebx
.text:0040EBD2                 sub     esp, 14h
.text:0040EBD5                 mov     esi, [esp+1Ch+arg_0]
.text:0040EBD9                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040EBE1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040EBE8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040EBEC                 call    GetModuleFileNameA
.text:0040EBF1                 sub     esp, 0Ch
.text:0040EBF4                 test    eax, eax
.text:0040EBF6                 jz      short loc_40EC38
.text:0040EBF8                 cmp     eax, 104h
.text:0040EBFD                 jg      short loc_40EC29
.text:0040EBFF
.text:0040EBFF loc_40EBFF:                             ; CODE XREF: sub_40EBD0+66↓j
.text:0040EBFF                                         ; sub_40EBD0+78↓j
.text:0040EBFF                 movzx   eax, byte ptr [esi]
.text:0040EC02                 mov     edx, esi
.text:0040EC04                 test    al, al
.text:0040EC06                 jz      short loc_40EC1C
.text:0040EC08                 nop
.text:0040EC09                 lea     esi, [esi+0]
.text:0040EC10
.text:0040EC10 loc_40EC10:                             ; CODE XREF: sub_40EBD0+4A↓j
.text:0040EC10                 cmp     al, 5Ch ; '\'
.text:0040EC12                 jz      short loc_40EC24
.text:0040EC14
.text:0040EC14 loc_40EC14:                             ; CODE XREF: sub_40EBD0+57↓j
.text:0040EC14                 inc     edx
.text:0040EC15                 movzx   eax, byte ptr [edx]
.text:0040EC18                 test    al, al
.text:0040EC1A                 jnz     short loc_40EC10
.text:0040EC1C
.text:0040EC1C loc_40EC1C:                             ; CODE XREF: sub_40EBD0+36↑j
.text:0040EC1C                 add     esp, 14h
.text:0040EC1F                 mov     eax, esi
.text:0040EC21                 pop     ebx
.text:0040EC22                 pop     esi
.text:0040EC23                 retn
.text:0040EC24 ; ---------------------------------------------------------------------------
.text:0040EC24
.text:0040EC24 loc_40EC24:                             ; CODE XREF: sub_40EBD0+42↑j
.text:0040EC24                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040EC27                 jmp     short loc_40EC14
.text:0040EC29 ; ---------------------------------------------------------------------------
.text:0040EC29
.text:0040EC29 loc_40EC29:                             ; CODE XREF: sub_40EBD0+2D↑j
.text:0040EC29                 call    _errno
.text:0040EC2E                 mov     dword ptr [eax], 26h ; '&'
.text:0040EC34                 xor     esi, esi
.text:0040EC36                 jmp     short loc_40EBFF
.text:0040EC38 ; ---------------------------------------------------------------------------
.text:0040EC38
.text:0040EC38 loc_40EC38:                             ; CODE XREF: sub_40EBD0+26↑j
.text:0040EC38                 call    sub_40FCA0
.text:0040EC3D                 mov     ebx, eax
.text:0040EC3F                 xor     esi, esi
.text:0040EC41                 call    _errno
.text:0040EC46                 mov     [eax], ebx
.text:0040EC48                 jmp     short loc_40EBFF
.text:0040EC48 sub_40EBD0      endp
.text:0040EC48
.text:0040EC48 ; ---------------------------------------------------------------------------
.text:0040EC4A                 align 10h
.text:0040EC50                 sub     esp, 0Ch
.text:0040EC53                 mov     [esp+8], ebx
.text:0040EC57                 mov     ebx, [esp+10h]
.text:0040EC5B                 mov     [esp], ebx
.text:0040EC5E                 call    sub_40EBD0
.text:0040EC63                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040EC6B                 mov     [esp], ebx
.text:0040EC6E                 call    strrchr
.text:0040EC73                 test    eax, eax
.text:0040EC75                 jz      short loc_40EC7A
.text:0040EC77                 lea     ebx, [eax+1]
.text:0040EC7A
.text:0040EC7A loc_40EC7A:                             ; CODE XREF: .text:0040EC75↑j
.text:0040EC7A                 mov     eax, ebx
.text:0040EC7C                 mov     ebx, [esp+8]
.text:0040EC80                 add     esp, 0Ch
.text:0040EC83                 retn
.text:0040EC83 ; ---------------------------------------------------------------------------
.text:0040EC84                 align 10h
.text:0040EC90                 sub     esp, 0Ch
.text:0040EC93                 mov     [esp+8], ebx
.text:0040EC97                 mov     ebx, [esp+10h]
.text:0040EC9B                 mov     [esp], ebx
.text:0040EC9E                 call    sub_40EBD0
.text:0040ECA3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040ECAB                 mov     [esp], ebx
.text:0040ECAE                 call    strrchr
.text:0040ECB3                 test    eax, eax
.text:0040ECB5                 jz      short loc_40ECBA
.text:0040ECB7                 mov     byte ptr [eax], 0
.text:0040ECBA
.text:0040ECBA loc_40ECBA:                             ; CODE XREF: .text:0040ECB5↑j
.text:0040ECBA                 mov     eax, ebx
.text:0040ECBC                 mov     ebx, [esp+8]
.text:0040ECC0                 add     esp, 0Ch
.text:0040ECC3                 retn
.text:0040ECC3 ; ---------------------------------------------------------------------------
.text:0040ECC4                 align 10h
.text:0040ECD0                 sub     esp, 0Ch
.text:0040ECD3                 mov     [esp+8], ebx
.text:0040ECD7                 mov     ebx, [esp+10h]
.text:0040ECDB                 mov     [esp], ebx
.text:0040ECDE                 call    sub_40EBD0
.text:0040ECE3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040ECEB                 mov     [esp], ebx
.text:0040ECEE                 call    strrchr
.text:0040ECF3                 test    eax, eax
.text:0040ECF5                 jz      short loc_40ECFA
.text:0040ECF7                 mov     byte ptr [eax], 0
.text:0040ECFA
.text:0040ECFA loc_40ECFA:                             ; CODE XREF: .text:0040ECF5↑j
.text:0040ECFA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040ED02                 mov     [esp], ebx
.text:0040ED05                 call    strrchr
.text:0040ED0A                 test    eax, eax
.text:0040ED0C                 jz      short loc_40ED11
.text:0040ED0E                 mov     byte ptr [eax], 0
.text:0040ED11
.text:0040ED11 loc_40ED11:                             ; CODE XREF: .text:0040ED0C↑j
.text:0040ED11                 mov     eax, ebx
.text:0040ED13                 mov     ebx, [esp+8]
.text:0040ED17                 add     esp, 0Ch
.text:0040ED1A                 retn
.text:0040ED1A ; ---------------------------------------------------------------------------
.text:0040ED1B                 align 10h
.text:0040ED20                 sub     esp, 1Ch
.text:0040ED23                 mov     edx, [esp+20h]
.text:0040ED27                 mov     [esp+10h], ebx
.text:0040ED2B                 xor     ebx, ebx
.text:0040ED2D                 mov     [esp+14h], esi
.text:0040ED31                 mov     [esp+18h], edi
.text:0040ED35                 mov     [esp], edx
.text:0040ED38                 call    sub_40F8C0
.text:0040ED3D                 mov     edx, [esp+24h]
.text:0040ED41                 mov     edi, eax
.text:0040ED43                 mov     [esp], edx
.text:0040ED46                 call    sub_40F8C0
.text:0040ED4B                 mov     [esp+4], eax
.text:0040ED4F                 mov     esi, eax
.text:0040ED51                 mov     [esp], edi
.text:0040ED54                 call    _stricmp_0
.text:0040ED59                 mov     [esp], edi
.text:0040ED5C                 test    eax, eax
.text:0040ED5E                 setz    bl
.text:0040ED61                 call    free
.text:0040ED66                 mov     [esp], esi
.text:0040ED69                 call    free
.text:0040ED6E                 mov     eax, ebx
.text:0040ED70                 mov     esi, [esp+14h]
.text:0040ED74                 mov     ebx, [esp+10h]
.text:0040ED78                 mov     edi, [esp+18h]
.text:0040ED7C                 add     esp, 1Ch
.text:0040ED7F                 retn
.text:0040ED80 ; ---------------------------------------------------------------------------
.text:0040ED80                 xor     eax, eax
.text:0040ED82                 retn
.text:0040ED82 ; ---------------------------------------------------------------------------
.text:0040ED83 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040EDB7↓o
.text:0040ED90 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040EDC6↓o
.text:0040EDA0 ; ---------------------------------------------------------------------------
.text:0040EDA0                 sub     esp, 1Ch
.text:0040EDA3                 mov     [esp+10h], ebx
.text:0040EDA7                 mov     ebx, [esp+20h]
.text:0040EDAB                 mov     [esp+18h], edi
.text:0040EDAF                 mov     edi, [esp+24h]
.text:0040EDB3                 mov     [esp+14h], esi
.text:0040EDB7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040EDBE                 call    GetModuleHandleA
.text:0040EDC3                 sub     esp, 4
.text:0040EDC6                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040EDCE                 mov     [esp], eax
.text:0040EDD1                 call    GetProcAddress
.text:0040EDD6                 sub     esp, 8
.text:0040EDD9                 test    eax, eax
.text:0040EDDB                 jz      short loc_40EDF3
.text:0040EDDD                 mov     dword ptr [esp+8], 104h
.text:0040EDE5                 mov     [esp+4], ebx
.text:0040EDE9                 mov     [esp], edi
.text:0040EDEC                 call    eax
.text:0040EDEE                 sub     esp, 0Ch
.text:0040EDF1                 mov     esi, eax
.text:0040EDF3
.text:0040EDF3 loc_40EDF3:                             ; CODE XREF: .text:0040EDDB↑j
.text:0040EDF3                 test    esi, esi
.text:0040EDF5                 jz      short loc_40EE10
.text:0040EDF7
.text:0040EDF7 loc_40EDF7:                             ; CODE XREF: .text:0040EE2B↓j
.text:0040EDF7                 mov     eax, ebx
.text:0040EDF9                 mov     esi, [esp+14h]
.text:0040EDFD                 mov     ebx, [esp+10h]
.text:0040EE01                 mov     edi, [esp+18h]
.text:0040EE05                 add     esp, 1Ch
.text:0040EE08                 retn
.text:0040EE08 ; ---------------------------------------------------------------------------
.text:0040EE09                 align 10h
.text:0040EE10
.text:0040EE10 loc_40EE10:                             ; CODE XREF: .text:0040EDF5↑j
.text:0040EE10                 call    sub_412060
.text:0040EE15                 mov     [esp], ebx
.text:0040EE18                 mov     [esp+4], edi
.text:0040EE1C                 call    strcpy
.text:0040EE21                 mov     [esp], ebx
.text:0040EE24                 call    _win32_longpath
.text:0040EE29                 mov     ebx, eax
.text:0040EE2B                 jmp     short loc_40EDF7
.text:0040EE2B ; ---------------------------------------------------------------------------
.text:0040EE2D                 align 10h
.text:0040EE30                 sub     esp, 1Ch
.text:0040EE33                 mov     [esp+18h], edi
.text:0040EE37                 mov     edi, [esp+20h]
.text:0040EE3B                 mov     [esp+10h], ebx
.text:0040EE3F                 mov     [esp+14h], esi
.text:0040EE43                 mov     dword ptr [esp+8], 0
.text:0040EE4B                 mov     dword ptr [esp+4], 0
.text:0040EE53                 mov     [esp], edi
.text:0040EE56                 call    GetShortPathNameA
.text:0040EE5B                 sub     esp, 0Ch
.text:0040EE5E                 mov     ebx, eax
.text:0040EE60                 test    eax, eax
.text:0040EE62                 jz      short loc_40EEB0
.text:0040EE64                 lea     edx, [eax+1]
.text:0040EE67                 mov     [esp], edx
.text:0040EE6A                 call    malloc
.text:0040EE6F                 test    eax, eax
.text:0040EE71                 mov     esi, eax
.text:0040EE73                 jz      short loc_40EEB0
.text:0040EE75                 mov     [esp+8], ebx
.text:0040EE79                 mov     [esp+4], eax
.text:0040EE7D                 mov     [esp], edi
.text:0040EE80                 call    GetShortPathNameA
.text:0040EE85                 sub     esp, 0Ch
.text:0040EE88                 mov     edx, esi
.text:0040EE8A                 test    eax, eax
.text:0040EE8C                 jz      short loc_40EEA2
.text:0040EE8E                 mov     esi, esi
.text:0040EE90
.text:0040EE90 loc_40EE90:                             ; CODE XREF: .text:0040EEC0↓j
.text:0040EE90                 mov     ebx, [esp+10h]
.text:0040EE94                 mov     eax, edx
.text:0040EE96                 mov     esi, [esp+14h]
.text:0040EE9A                 mov     edi, [esp+18h]
.text:0040EE9E                 add     esp, 1Ch
.text:0040EEA1                 retn
.text:0040EEA2 ; ---------------------------------------------------------------------------
.text:0040EEA2
.text:0040EEA2 loc_40EEA2:                             ; CODE XREF: .text:0040EE8C↑j
.text:0040EEA2                 mov     [esp], esi
.text:0040EEA5                 call    free
.text:0040EEAA                 lea     esi, [esi+0]
.text:0040EEB0
.text:0040EEB0 loc_40EEB0:                             ; CODE XREF: .text:0040EE62↑j
.text:0040EEB0                                         ; .text:0040EE73↑j
.text:0040EEB0                 call    sub_40FCA0
.text:0040EEB5                 mov     esi, eax
.text:0040EEB7                 call    _errno
.text:0040EEBC                 mov     [eax], esi
.text:0040EEBE                 mov     edx, edi
.text:0040EEC0                 jmp     short loc_40EE90
.text:0040EEC0 ; ---------------------------------------------------------------------------
.text:0040EEC2                 align 10h
.text:0040EED0
.text:0040EED0 ; =============== S U B R O U T I N E =======================================
.text:0040EED0
.text:0040EED0
.text:0040EED0 sub_40EED0      proc near               ; DATA XREF: sub_40EEE0+186↓o
.text:0040EED0                 sub     al, [eax]
.text:0040EED2                 lea     esi, [esi+0]
.text:0040EED9                 lea     edi, [edi+0]
.text:0040EED9 sub_40EED0      endp
.text:0040EED9
.text:0040EEE0
.text:0040EEE0 ; =============== S U B R O U T I N E =======================================
.text:0040EEE0
.text:0040EEE0
.text:0040EEE0 sub_40EEE0      proc near               ; CODE XREF: sub_4048B0+87↑p
.text:0040EEE0
.text:0040EEE0 hFindFile       = dword ptr -2DCh
.text:0040EEE0 lpFindFileData  = dword ptr -2D8h
.text:0040EEE0 Count           = dword ptr -2D4h
.text:0040EEE0 Destination     = byte ptr -2CCh
.text:0040EEE0 var_1BC         = dword ptr -1BCh
.text:0040EEE0 var_1B4         = dword ptr -1B4h
.text:0040EEE0 var_1B0         = dword ptr -1B0h
.text:0040EEE0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040EEE0 arg_0           = dword ptr  4
.text:0040EEE0
.text:0040EEE0                 push    ebp
.text:0040EEE1                 push    edi
.text:0040EEE2                 push    esi
.text:0040EEE3                 push    ebx
.text:0040EEE4                 sub     esp, 2CCh
.text:0040EEEA                 mov     ebp, [esp+2DCh+arg_0]
.text:0040EEF1                 test    ebp, ebp
.text:0040EEF3                 mov     ebx, [ebp+4]
.text:0040EEF6                 jz      loc_40F0AD
.text:0040EEFC                 mov     edx, [ebp+0]
.text:0040EEFF                 cmp     edx, 0FFFFFFFFh
.text:0040EF02                 jz      loc_40F037
.text:0040EF08                 mov     [esp+2DCh+hFindFile], edx ; hFindFile
.text:0040EF0B                 lea     ecx, [esp+2DCh+FindFileData]
.text:0040EF12                 mov     [esp+2DCh+lpFindFileData], ecx ; lpFindFileData
.text:0040EF16                 call    FindNextFileA
.text:0040EF1B                 sub     esp, 8
.text:0040EF1E                 test    eax, eax
.text:0040EF20                 jz      loc_40F02B
.text:0040EF26
.text:0040EF26 loc_40EF26:                             ; CODE XREF: sub_40EEE0+1BC↓j
.text:0040EF26                 mov     [esp+2DCh+Count], 104h ; Count
.text:0040EF2E                 lea     edi, [esp+2DCh+FindFileData.cFileName]
.text:0040EF35                 mov     esi, [ebx]
.text:0040EF37                 mov     [esp+2DCh+lpFindFileData], esi ; Source
.text:0040EF3B                 lea     esi, [ebx+14h]
.text:0040EF3E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040EF41                 call    strncpy
.text:0040EF46                 mov     [esp+2DCh+Count], 104h ; Count
.text:0040EF4E                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:0040EF52                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040EF55                 call    strncat
.text:0040EF5A                 mov     [esp+2DCh+lpFindFileData], esi ; int
.text:0040EF5E                 lea     edx, [esp+2DCh+var_1BC]
.text:0040EF65                 mov     [esp+2DCh+Count], edx ; int
.text:0040EF69                 mov     [esp+2DCh+hFindFile], 0 ; LPCSTR
.text:0040EF70                 call    sub_40E610
.text:0040EF75                 test    eax, eax
.text:0040EF77                 jnz     loc_40F019
.text:0040EF7D                 mov     ecx, [esp+2DCh+var_1BC]
.text:0040EF84                 and     ecx, 0F000h
.text:0040EF8A                 shr     ecx, 0Ch
.text:0040EF8D                 mov     [ebx+12h], cl
.text:0040EF90                 mov     ecx, edi
.text:0040EF92                 lea     esi, [esi+0]
.text:0040EF99                 lea     edi, [edi+0]
.text:0040EFA0
.text:0040EFA0 loc_40EFA0:                             ; CODE XREF: sub_40EEE0+D5↓j
.text:0040EFA0                 mov     eax, [ecx]
.text:0040EFA2                 add     ecx, 4
.text:0040EFA5                 lea     edx, [eax-1010101h]
.text:0040EFAB                 not     eax
.text:0040EFAD                 and     edx, eax
.text:0040EFAF                 and     edx, 80808080h
.text:0040EFB5                 jz      short loc_40EFA0
.text:0040EFB7                 test    edx, 8080h
.text:0040EFBD                 jnz     short loc_40EFC5
.text:0040EFBF                 shr     edx, 10h
.text:0040EFC2                 add     ecx, 2
.text:0040EFC5
.text:0040EFC5 loc_40EFC5:                             ; CODE XREF: sub_40EEE0+DD↑j
.text:0040EFC5                 mov     word ptr [ebx+10h], 110h
.text:0040EFCB                 add     dl, dl
.text:0040EFCD                 sbb     ecx, 3
.text:0040EFD0                 sub     ecx, edi
.text:0040EFD2                 mov     [ebx+13h], cl
.text:0040EFD5                 mov     edx, [esp+2DCh+var_1B4]
.text:0040EFDC                 mov     ecx, [esp+2DCh+var_1B0]
.text:0040EFE3                 mov     [ebx+8], edx
.text:0040EFE6                 mov     [ebx+0Ch], ecx
.text:0040EFE9                 mov     [esp+2DCh+Count], 104h ; Count
.text:0040EFF1                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:0040EFF5                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040EFF8                 call    strncpy
.text:0040EFFD                 inc     dword ptr [ebp+14h]
.text:0040F000                 call    _errno
.text:0040F005                 mov     dword ptr [eax], 0
.text:0040F00B                 lea     eax, [ebx+8]
.text:0040F00E
.text:0040F00E loc_40F00E:                             ; CODE XREF: sub_40EEE0+149↓j
.text:0040F00E                 add     esp, 2CCh
.text:0040F014                 pop     ebx
.text:0040F015                 pop     esi
.text:0040F016                 pop     edi
.text:0040F017                 pop     ebp
.text:0040F018                 retn
.text:0040F019 ; ---------------------------------------------------------------------------
.text:0040F019
.text:0040F019 loc_40F019:                             ; CODE XREF: sub_40EEE0+97↑j
.text:0040F019                                         ; sub_40EEE0+153↓j ...
.text:0040F019                 call    sub_40FCA0
.text:0040F01E                 mov     ebp, eax
.text:0040F020                 call    _errno
.text:0040F025                 mov     [eax], ebp
.text:0040F027
.text:0040F027 loc_40F027:                             ; CODE XREF: sub_40EEE0+155↓j
.text:0040F027                                         ; sub_40EEE0+1D8↓j
.text:0040F027                 xor     eax, eax
.text:0040F029                 jmp     short loc_40F00E
.text:0040F02B ; ---------------------------------------------------------------------------
.text:0040F02B
.text:0040F02B loc_40F02B:                             ; CODE XREF: sub_40EEE0+40↑j
.text:0040F02B                 call    GetLastError
.text:0040F030                 cmp     eax, 12h
.text:0040F033                 jnz     short loc_40F019
.text:0040F035                 jmp     short loc_40F027
.text:0040F037 ; ---------------------------------------------------------------------------
.text:0040F037
.text:0040F037 loc_40F037:                             ; CODE XREF: sub_40EEE0+22↑j
.text:0040F037                 mov     edx, [ebx]
.text:0040F039                 lea     esi, [esp+2DCh+Destination]
.text:0040F03D                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040F040                 mov     [esp+2DCh+lpFindFileData], edx ; Source
.text:0040F044                 call    strcpy
.text:0040F049                 mov     ecx, esi
.text:0040F04B                 nop
.text:0040F04C                 lea     esi, [esi+0]
.text:0040F050
.text:0040F050 loc_40F050:                             ; CODE XREF: sub_40EEE0+184↓j
.text:0040F050                 mov     edi, [ecx]
.text:0040F052                 add     ecx, 4
.text:0040F055                 lea     eax, [edi-1010101h]
.text:0040F05B                 not     edi
.text:0040F05D                 and     eax, edi
.text:0040F05F                 test    eax, 80808080h
.text:0040F064                 jz      short loc_40F050
.text:0040F066                 mov     [esp+2DCh+lpFindFileData], offset sub_40EED0 ; Source
.text:0040F06E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040F071                 call    strcat
.text:0040F076                 mov     [esp+2DCh+hFindFile], esi
.text:0040F079                 call    sub_40EAB0
.text:0040F07E                 mov     [esp+2DCh+hFindFile], esi ; lpFileName
.text:0040F081                 lea     edx, [esp+2DCh+FindFileData]
.text:0040F088                 mov     [esp+2DCh+lpFindFileData], edx ; lpFindFileData
.text:0040F08C                 call    FindFirstFileA
.text:0040F091                 sub     esp, 8
.text:0040F094                 cmp     eax, 0FFFFFFFFh
.text:0040F097                 jz      short loc_40F0A1
.text:0040F099                 mov     [ebp+0], eax
.text:0040F09C                 jmp     loc_40EF26
.text:0040F0A1 ; ---------------------------------------------------------------------------
.text:0040F0A1
.text:0040F0A1 loc_40F0A1:                             ; CODE XREF: sub_40EEE0+1B7↑j
.text:0040F0A1                 mov     dword ptr [ebp+0], 0FFFFFFFFh
.text:0040F0A8                 jmp     loc_40F019
.text:0040F0AD ; ---------------------------------------------------------------------------
.text:0040F0AD
.text:0040F0AD loc_40F0AD:                             ; CODE XREF: sub_40EEE0+16↑j
.text:0040F0AD                 call    _errno
.text:0040F0B2                 mov     dword ptr [eax], 9
.text:0040F0B8                 jmp     loc_40F027
.text:0040F0B8 sub_40EEE0      endp
.text:0040F0B8
.text:0040F0B8 ; ---------------------------------------------------------------------------
.text:0040F0BD                 align 10h
.text:0040F0C0
.text:0040F0C0 ; =============== S U B R O U T I N E =======================================
.text:0040F0C0
.text:0040F0C0
.text:0040F0C0 ; int __cdecl sub_40F0C0(char *, int)
.text:0040F0C0 sub_40F0C0      proc near               ; CODE XREF: sub_401FB0+4A8↑p
.text:0040F0C0                                         ; sub_401FB0+79E↑p ...
.text:0040F0C0
.text:0040F0C0 var_C           = dword ptr -0Ch
.text:0040F0C0 var_8           = dword ptr -8
.text:0040F0C0 var_4           = dword ptr -4
.text:0040F0C0 arg_0           = dword ptr  4
.text:0040F0C0 arg_4           = dword ptr  8
.text:0040F0C0
.text:0040F0C0                 sub     esp, 0Ch
.text:0040F0C3                 mov     edx, [esp+0Ch+arg_4]
.text:0040F0C7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040F0CE                 mov     [esp+0Ch+var_4], edx ; int
.text:0040F0D2                 mov     edx, [esp+0Ch+arg_0]
.text:0040F0D6                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040F0DA                 call    sub_40F480
.text:0040F0DF                 add     esp, 0Ch
.text:0040F0E2                 retn
.text:0040F0E2 sub_40F0C0      endp
.text:0040F0E2
.text:0040F0E2 ; ---------------------------------------------------------------------------
.text:0040F0E3                 align 10h
.text:0040F0F0
.text:0040F0F0 ; =============== S U B R O U T I N E =======================================
.text:0040F0F0
.text:0040F0F0
.text:0040F0F0 ; int __cdecl sub_40F0F0(int, LPCSTR lpMultiByteStr, int, int)
.text:0040F0F0 sub_40F0F0      proc near               ; CODE XREF: sub_40F2B0+E8↓p
.text:0040F0F0
.text:0040F0F0 var_254         = dword ptr -254h
.text:0040F0F0 lpFileName      = dword ptr -24Ch
.text:0040F0F0 dwFileAttributes= dword ptr -248h
.text:0040F0F0 dwClsContext    = dword ptr -244h
.text:0040F0F0 riid            = dword ptr -240h
.text:0040F0F0 ppv             = dword ptr -23Ch
.text:0040F0F0 cchWideChar     = dword ptr -238h
.text:0040F0F0 var_22C         = dword ptr -22Ch
.text:0040F0F0 var_224         = dword ptr -224h
.text:0040F0F0 var_220         = dword ptr -220h
.text:0040F0F0 WideCharStr     = word ptr -21Ch
.text:0040F0F0 arg_0           = dword ptr  4
.text:0040F0F0 lpMultiByteStr  = dword ptr  8
.text:0040F0F0 arg_C           = dword ptr  10h
.text:0040F0F0
.text:0040F0F0                 push    edi
.text:0040F0F1                 push    esi
.text:0040F0F2                 push    ebx
.text:0040F0F3                 sub     esp, 240h
.text:0040F0F9                 mov     edi, [esp+24Ch+lpMultiByteStr]
.text:0040F100                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:0040F103                 call    GetFileAttributesA
.text:0040F108                 sub     esp, 4
.text:0040F10B                 cmp     eax, 0FFFFFFFFh
.text:0040F10E                 jz      short loc_40F12A
.text:0040F110                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:0040F113                 and     eax, 0FFFFFFFEh
.text:0040F116                 mov     [esp+24Ch+dwFileAttributes], eax ; dwFileAttributes
.text:0040F11A                 call    SetFileAttributesA
.text:0040F11F                 sub     esp, 8
.text:0040F122                 test    eax, eax
.text:0040F124                 jz      loc_40F296
.text:0040F12A
.text:0040F12A loc_40F12A:                             ; CODE XREF: sub_40F0F0+1E↑j
.text:0040F12A                                         ; sub_40F0F0+1AE↓j
.text:0040F12A                 mov     [esp+24Ch+lpFileName], 0 ; pvReserved
.text:0040F131                 call    OleInitialize
.text:0040F136                 sub     esp, 4
.text:0040F139                 cmp     eax, 1
.text:0040F13C                 ja      loc_40F27C
.text:0040F142                 mov     [esp+24Ch+riid], offset riid ; riid
.text:0040F14A                 lea     ecx, [esp+24Ch+var_220]
.text:0040F14E                 mov     [esp+24Ch+ppv], ecx ; ppv
.text:0040F152                 mov     [esp+24Ch+dwClsContext], 1 ; dwClsContext
.text:0040F15A                 mov     [esp+24Ch+dwFileAttributes], 0 ; pUnkOuter
.text:0040F162                 mov     [esp+24Ch+lpFileName], offset rclsid ; rclsid
.text:0040F169                 call    CoCreateInstance
.text:0040F16E                 sub     esp, 14h
.text:0040F171                 test    eax, eax
.text:0040F173                 js      loc_40F27C
.text:0040F179                 mov     ebx, [esp+24Ch+var_220]
.text:0040F17D                 mov     edx, [esp+24Ch+arg_0]
.text:0040F184                 mov     esi, [ebx]
.text:0040F186                 mov     [esp+24Ch+dwFileAttributes], edx
.text:0040F18A                 mov     [esp+24Ch+lpFileName], ebx
.text:0040F18D                 call    dword ptr [esi+50h]
.text:0040F190                 sub     esp, 8
.text:0040F193                 mov     ebx, dword ptr [esp+248h+WideCharStr]
.text:0040F197                 mov     ecx, [esp+248h+arg_C]
.text:0040F19E                 mov     esi, [ebx]
.text:0040F1A0                 mov     [esp+248h+dwClsContext], ecx
.text:0040F1A4                 mov     [esp+248h+dwFileAttributes], ebx
.text:0040F1A7                 call    dword ptr [esi+1Ch]
.text:0040F1AA                 sub     esp, 8
.text:0040F1AD                 mov     ecx, dword ptr [esp+248h+WideCharStr]
.text:0040F1B1                 lea     edx, [esp+248h+var_220]
.text:0040F1B5                 mov     ebx, [ecx]
.text:0040F1B7                 mov     [esp+248h+riid], edx
.text:0040F1BB                 mov     [esp+248h+dwClsContext], offset dword_416300
.text:0040F1C3                 mov     [esp+248h+dwFileAttributes], ecx
.text:0040F1C6                 call    dword ptr [ebx]
.text:0040F1C8                 sub     esp, 0Ch
.text:0040F1CB                 test    eax, eax
.text:0040F1CD                 js      loc_40F27C
.text:0040F1D3                 call    AreFileApisANSI
.text:0040F1D8                 mov     [esp+24Ch+cchWideChar], 104h ; cchWideChar
.text:0040F1E0                 test    eax, eax
.text:0040F1E2                 lea     esi, [esp+24Ch+WideCharStr]
.text:0040F1E6                 setz    dl
.text:0040F1E9                 mov     [esp+24Ch+ppv], esi ; lpWideCharStr
.text:0040F1ED                 mov     [esp+24Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040F1F5                 mov     [esp+24Ch+dwClsContext], edi ; lpMultiByteStr
.text:0040F1F9                 movzx   ebx, dl
.text:0040F1FC                 mov     [esp+24Ch+dwFileAttributes], 0 ; dwFlags
.text:0040F204                 mov     [esp+24Ch+lpFileName], ebx ; CodePage
.text:0040F207                 call    MultiByteToWideChar
.text:0040F20C                 sub     esp, 18h
.text:0040F20F                 test    eax, eax
.text:0040F211                 js      short loc_40F27C
.text:0040F213                 mov     ecx, [esp+24Ch+var_224]
.text:0040F217                 mov     ebx, [ecx]
.text:0040F219                 mov     [esp+24Ch+dwFileAttributes], esi
.text:0040F21D                 mov     [esp+24Ch+lpFileName], ecx
.text:0040F220                 mov     [esp+24Ch+dwClsContext], 1
.text:0040F228                 call    dword ptr [ebx+18h]
.text:0040F22B                 sub     esp, 0Ch
.text:0040F22E                 mov     esi, eax
.text:0040F230                 mov     edx, [esp+254h+var_22C]
.text:0040F234                 mov     ecx, [edx]
.text:0040F236                 mov     [esp+254h+var_254], edx
.text:0040F239                 call    dword ptr [ecx+8]
.text:0040F23C                 sub     esp, 4
.text:0040F23F                 mov     ebx, [esp+24Ch+var_220]
.text:0040F243                 mov     ecx, [ebx]
.text:0040F245                 mov     [esp+24Ch+lpFileName], ebx
.text:0040F248                 call    dword ptr [ecx+8]
.text:0040F24B                 sub     esp, 4
.text:0040F24E                 call    CoUninitialize
.text:0040F253                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:0040F256                 call    GetFileAttributesA
.text:0040F25B                 sub     esp, 4
.text:0040F25E                 or      eax, 1
.text:0040F261                 mov     [esp+24Ch+dwFileAttributes], eax ; dwFileAttributes
.text:0040F265                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:0040F268                 call    SetFileAttributesA
.text:0040F26D                 sub     esp, 8
.text:0040F270                 mov     eax, esi
.text:0040F272
.text:0040F272 loc_40F272:                             ; CODE XREF: sub_40F0F0+1A4↓j
.text:0040F272                 add     esp, 240h
.text:0040F278                 pop     ebx
.text:0040F279                 pop     esi
.text:0040F27A                 pop     edi
.text:0040F27B                 retn
.text:0040F27C ; ---------------------------------------------------------------------------
.text:0040F27C
.text:0040F27C loc_40F27C:                             ; CODE XREF: sub_40F0F0+4C↑j
.text:0040F27C                                         ; sub_40F0F0+83↑j ...
.text:0040F27C                 call    sub_40FCA0
.text:0040F281                 mov     edi, eax
.text:0040F283                 call    _errno
.text:0040F288                 mov     [eax], edi
.text:0040F28A                 call    CoUninitialize
.text:0040F28F                 mov     eax, 0FFFFFFFFh
.text:0040F294                 jmp     short loc_40F272
.text:0040F296 ; ---------------------------------------------------------------------------
.text:0040F296
.text:0040F296 loc_40F296:                             ; CODE XREF: sub_40F0F0+34↑j
.text:0040F296                 mov     [esp+24Ch+lpFileName], edi
.text:0040F299                 call    sub_4124E0
.text:0040F29E                 jmp     loc_40F12A
.text:0040F29E sub_40F0F0      endp
.text:0040F29E
.text:0040F29E ; ---------------------------------------------------------------------------
.text:0040F2A3 ; const char Source[]
.text:0040F2A3 Source          db '.lnk',0             ; DATA XREF: sub_40F2B0+7F↓o
.text:0040F2A3                                         ; sub_40F2B0:loc_40F33F↓o
.text:0040F2A8                 align 10h
.text:0040F2B0
.text:0040F2B0 ; =============== S U B R O U T I N E =======================================
.text:0040F2B0
.text:0040F2B0
.text:0040F2B0 ; int __cdecl sub_40F2B0(char *String, char *)
.text:0040F2B0 sub_40F2B0      proc near               ; DATA XREF: sub_401FB0+5C1↑o
.text:0040F2B0
.text:0040F2B0 Str             = dword ptr -2Ch
.text:0040F2B0 Source          = dword ptr -28h
.text:0040F2B0 var_24          = dword ptr -24h
.text:0040F2B0 Destination     = dword ptr -18h
.text:0040F2B0 Block           = dword ptr -14h
.text:0040F2B0 String          = dword ptr  4
.text:0040F2B0 arg_4           = dword ptr  8
.text:0040F2B0
.text:0040F2B0                 push    ebp
.text:0040F2B1                 push    edi
.text:0040F2B2                 push    esi
.text:0040F2B3                 push    ebx
.text:0040F2B4                 sub     esp, 1Ch
.text:0040F2B7                 mov     ebp, [esp+2Ch+String]
.text:0040F2BB                 mov     ebx, [esp+2Ch+arg_4]
.text:0040F2BF                 mov     [esp+2Ch+Str], ebp ; LPCSTR
.text:0040F2C2                 call    sub_40F8C0
.text:0040F2C7                 mov     [esp+2Ch+Block], eax
.text:0040F2CB                 mov     edx, [esp+2Ch+Block]
.text:0040F2CF                 mov     eax, 0FFFFFFFFh
.text:0040F2D4                 test    edx, edx
.text:0040F2D6                 jz      loc_40F3C1
.text:0040F2DC                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040F2DF                 call    strlen
.text:0040F2E4                 add     eax, 5
.text:0040F2E7                 mov     [esp+2Ch+Str], eax ; Size
.text:0040F2EA                 call    malloc
.text:0040F2EF                 mov     [esp+2Ch+Destination], eax
.text:0040F2F3                 mov     ecx, [esp+2Ch+Destination]
.text:0040F2F7                 mov     eax, 0FFFFFFFFh
.text:0040F2FC                 test    ecx, ecx
.text:0040F2FE                 jz      loc_40F3C1
.text:0040F304                 mov     [esp+2Ch+Source], ebx ; Source
.text:0040F308                 mov     edx, [esp+2Ch+Destination]
.text:0040F30C                 mov     [esp+2Ch+Str], edx ; Destination
.text:0040F30F                 call    strcpy
.text:0040F314                 mov     [esp+2Ch+Source], 2Eh ; '.' ; Ch
.text:0040F31C                 mov     eax, [esp+2Ch+Destination]
.text:0040F320                 mov     [esp+2Ch+Str], eax ; Str
.text:0040F323                 call    strrchr
.text:0040F328                 test    eax, eax
.text:0040F32A                 mov     esi, eax
.text:0040F32C                 jz      short loc_40F33F
.text:0040F32E                 cld
.text:0040F32F                 mov     ebx, offset Source ; ".lnk"
.text:0040F334                 mov     ecx, 5
.text:0040F339                 mov     edi, ebx
.text:0040F33B                 repe cmpsb
.text:0040F33D                 jz      short loc_40F353
.text:0040F33F
.text:0040F33F loc_40F33F:                             ; CODE XREF: sub_40F2B0+7C↑j
.text:0040F33F                 mov     [esp+2Ch+Source], offset Source ; ".lnk"
.text:0040F347                 mov     esi, [esp+2Ch+Destination]
.text:0040F34B                 mov     [esp+2Ch+Str], esi ; Destination
.text:0040F34E                 call    strcat
.text:0040F353
.text:0040F353 loc_40F353:                             ; CODE XREF: sub_40F2B0+8D↑j
.text:0040F353                 mov     esi, [esp+2Ch+Block]
.text:0040F357                 mov     [esp+2Ch+Str], esi
.text:0040F35A                 call    sub_40EAB0
.text:0040F35F                 mov     [esp+2Ch+Block], eax
.text:0040F363                 mov     ebx, [esp+2Ch+Destination]
.text:0040F367                 mov     [esp+2Ch+Str], ebx
.text:0040F36A                 call    sub_40EAB0
.text:0040F36F                 mov     [esp+2Ch+Destination], eax
.text:0040F373                 mov     [esp+2Ch+Str], ebp ; String
.text:0040F376                 call    _strdup
.text:0040F37B                 mov     [esp+2Ch+Str], eax
.text:0040F37E                 call    sub_40EA30
.text:0040F383                 mov     [esp+2Ch+var_24], eax ; int
.text:0040F387                 mov     ebp, eax
.text:0040F389                 mov     edx, [esp+2Ch+Block]
.text:0040F38D                 mov     eax, [esp+2Ch+Destination]
.text:0040F391                 mov     [esp+2Ch+Str], edx ; int
.text:0040F394                 mov     [esp+2Ch+Source], eax ; lpMultiByteStr
.text:0040F398                 call    sub_40F0F0
.text:0040F39D                 mov     ecx, [esp+2Ch+Block]
.text:0040F3A1                 mov     esi, eax
.text:0040F3A3                 mov     [esp+2Ch+Str], ecx ; Block
.text:0040F3A6                 call    free
.text:0040F3AB                 mov     edi, [esp+2Ch+Destination]
.text:0040F3AF                 mov     [esp+2Ch+Str], edi ; Block
.text:0040F3B2                 call    free
.text:0040F3B7                 mov     [esp+2Ch+Str], ebp ; Block
.text:0040F3BA                 call    free
.text:0040F3BF                 mov     eax, esi
.text:0040F3C1
.text:0040F3C1 loc_40F3C1:                             ; CODE XREF: sub_40F2B0+26↑j
.text:0040F3C1                                         ; sub_40F2B0+4E↑j
.text:0040F3C1                 add     esp, 1Ch
.text:0040F3C4                 pop     ebx
.text:0040F3C5                 pop     esi
.text:0040F3C6                 pop     edi
.text:0040F3C7                 pop     ebp
.text:0040F3C8                 retn
.text:0040F3C8 sub_40F2B0      endp
.text:0040F3C8
.text:0040F3C8 ; ---------------------------------------------------------------------------
.text:0040F3C9                 align 10h
.text:0040F3D0
.text:0040F3D0 ; =============== S U B R O U T I N E =======================================
.text:0040F3D0
.text:0040F3D0
.text:0040F3D0 ; int __cdecl sub_40F3D0(LPCSTR)
.text:0040F3D0 sub_40F3D0      proc near               ; CODE XREF: sub_402C30+2F4↑p
.text:0040F3D0                                         ; sub_40F540+6A↓p
.text:0040F3D0
.text:0040F3D0 lpFileName      = dword ptr -1Ch
.text:0040F3D0 AccessMode      = dword ptr -18h
.text:0040F3D0 var_8           = dword ptr -8
.text:0040F3D0 var_4           = dword ptr -4
.text:0040F3D0 arg_0           = dword ptr  4
.text:0040F3D0
.text:0040F3D0                 sub     esp, 1Ch
.text:0040F3D3                 mov     [esp+1Ch+var_8], ebx
.text:0040F3D7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040F3DB                 mov     [esp+1Ch+var_4], esi
.text:0040F3DF                 test    ebx, ebx
.text:0040F3E1                 jz      loc_40F472
.text:0040F3E7                 call    _errno
.text:0040F3EC                 mov     esi, [eax]
.text:0040F3EE                 mov     [esp+1Ch+AccessMode], 2 ; int
.text:0040F3F6                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0040F3F9                 call    sub_412310
.text:0040F3FE                 test    eax, eax
.text:0040F400                 jnz     short loc_40F460
.text:0040F402
.text:0040F402 loc_40F402:                             ; CODE XREF: sub_40F3D0+A0↓j
.text:0040F402                 mov     [esp+1Ch+AccessMode], 10h ; int
.text:0040F40A                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0040F40D                 call    sub_412310
.text:0040F412                 test    eax, eax
.text:0040F414                 jz      short loc_40F451
.text:0040F416                 call    _errno
.text:0040F41B                 mov     [eax], esi
.text:0040F41D                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0040F420                 call    DeleteFileA
.text:0040F425                 sub     esp, 4
.text:0040F428                 xor     edx, edx
.text:0040F42A                 test    eax, eax
.text:0040F42C                 jz      short loc_40F43C
.text:0040F42E
.text:0040F42E loc_40F42E:                             ; CODE XREF: sub_40F3D0+7F↓j
.text:0040F42E                 mov     ebx, [esp+1Ch+var_8]
.text:0040F432                 mov     eax, edx
.text:0040F434                 mov     esi, [esp+1Ch+var_4]
.text:0040F438                 add     esp, 1Ch
.text:0040F43B                 retn
.text:0040F43C ; ---------------------------------------------------------------------------
.text:0040F43C
.text:0040F43C loc_40F43C:                             ; CODE XREF: sub_40F3D0+5C↑j
.text:0040F43C                 call    sub_40FCA0
.text:0040F441                 mov     esi, eax
.text:0040F443                 call    _errno
.text:0040F448                 mov     [eax], esi
.text:0040F44A
.text:0040F44A loc_40F44A:                             ; CODE XREF: sub_40F3D0+8C↓j
.text:0040F44A                                         ; sub_40F3D0+AD↓j
.text:0040F44A                 mov     edx, 0FFFFFFFFh
.text:0040F44F                 jmp     short loc_40F42E
.text:0040F451 ; ---------------------------------------------------------------------------
.text:0040F451
.text:0040F451 loc_40F451:                             ; CODE XREF: sub_40F3D0+44↑j
.text:0040F451                 call    _errno
.text:0040F456                 mov     dword ptr [eax], 15h
.text:0040F45C                 jmp     short loc_40F44A
.text:0040F45C ; ---------------------------------------------------------------------------
.text:0040F45E                 align 10h
.text:0040F460
.text:0040F460 loc_40F460:                             ; CODE XREF: sub_40F3D0+30↑j
.text:0040F460                 mov     [esp+1Ch+AccessMode], 180h ; AccessMode
.text:0040F468                 mov     [esp+1Ch+lpFileName], ebx ; FileName
.text:0040F46B                 call    _chmod_0
.text:0040F470                 jmp     short loc_40F402
.text:0040F472 ; ---------------------------------------------------------------------------
.text:0040F472
.text:0040F472 loc_40F472:                             ; CODE XREF: sub_40F3D0+11↑j
.text:0040F472                 call    _errno
.text:0040F477                 mov     dword ptr [eax], 16h
.text:0040F47D                 jmp     short loc_40F44A
.text:0040F47D sub_40F3D0      endp
.text:0040F47D
.text:0040F47D ; ---------------------------------------------------------------------------
.text:0040F47F                 align 10h
.text:0040F480
.text:0040F480 ; =============== S U B R O U T I N E =======================================
.text:0040F480
.text:0040F480
.text:0040F480 ; int __cdecl sub_40F480(LPCSTR, char *, int)
.text:0040F480 sub_40F480      proc near               ; CODE XREF: sub_40F0C0+1A↑p
.text:0040F480                                         ; sub_414B00+104↓p ...
.text:0040F480
.text:0040F480 var_13C         = dword ptr -13Ch
.text:0040F480 lpString1       = dword ptr -138h
.text:0040F480 var_134         = dword ptr -134h
.text:0040F480 String1         = byte ptr -12Ch
.text:0040F480 var_10          = dword ptr -10h
.text:0040F480 var_C           = dword ptr -0Ch
.text:0040F480 var_8           = dword ptr -8
.text:0040F480 var_4           = dword ptr -4
.text:0040F480 arg_0           = dword ptr  4
.text:0040F480 arg_4           = dword ptr  8
.text:0040F480 arg_8           = dword ptr  0Ch
.text:0040F480
.text:0040F480                 sub     esp, 13Ch
.text:0040F486                 mov     [esp+13Ch+var_10], ebx
.text:0040F48D                 mov     ebx, [esp+13Ch+arg_8]
.text:0040F494                 mov     [esp+13Ch+var_C], esi
.text:0040F49B                 mov     esi, [esp+13Ch+arg_4]
.text:0040F4A2                 mov     [esp+13Ch+var_8], edi
.text:0040F4A9                 mov     edi, [esp+13Ch+arg_0]
.text:0040F4B0                 mov     [esp+13Ch+var_4], ebp
.text:0040F4B7                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040F4BB                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040F4BF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040F4C2                 call    sub_40E610
.text:0040F4C7                 cmp     eax, 0FFFFFFFFh
.text:0040F4CA                 mov     edx, eax
.text:0040F4CC                 jz      short loc_40F4DE
.text:0040F4CE                 mov     ecx, [ebx]
.text:0040F4D0                 and     ecx, 0F000h
.text:0040F4D6                 cmp     ecx, 0A000h
.text:0040F4DC                 jz      short loc_40F503
.text:0040F4DE
.text:0040F4DE loc_40F4DE:                             ; CODE XREF: sub_40F480+4C↑j
.text:0040F4DE                                         ; sub_40F480+A1↓j ...
.text:0040F4DE                 mov     ebx, [esp+13Ch+var_10]
.text:0040F4E5                 mov     eax, edx
.text:0040F4E7                 mov     esi, [esp+13Ch+var_C]
.text:0040F4EE                 mov     edi, [esp+13Ch+var_8]
.text:0040F4F5                 mov     ebp, [esp+13Ch+var_4]
.text:0040F4FC                 add     esp, 13Ch
.text:0040F502                 retn
.text:0040F503 ; ---------------------------------------------------------------------------
.text:0040F503
.text:0040F503 loc_40F503:                             ; CODE XREF: sub_40F480+5C↑j
.text:0040F503                 mov     [esp+13Ch+var_134], 104h
.text:0040F50B                 lea     ebp, [esp+13Ch+String1]
.text:0040F50F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040F513                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040F516                 call    sub_412840
.text:0040F51B                 inc     eax
.text:0040F51C                 mov     edx, 0FFFFFFFFh
.text:0040F521                 jz      short loc_40F4DE
.text:0040F523                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040F527                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040F52B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040F52E                 call    sub_40E610
.text:0040F533                 mov     edx, eax
.text:0040F535                 jmp     short loc_40F4DE
.text:0040F535 sub_40F480      endp
.text:0040F535
.text:0040F535 ; ---------------------------------------------------------------------------
.text:0040F537                 align 10h
.text:0040F540
.text:0040F540 ; =============== S U B R O U T I N E =======================================
.text:0040F540
.text:0040F540
.text:0040F540 ; int __cdecl sub_40F540(LPCSTR, LPCSTR lpFileName)
.text:0040F540 sub_40F540      proc near               ; CODE XREF: sub_402C30+27F↑p
.text:0040F540                                         ; sub_402C30+456↑p
.text:0040F540
.text:0040F540 lpExistingFileName= dword ptr -1Ch
.text:0040F540 lpNewFileName   = dword ptr -18h
.text:0040F540 var_8           = dword ptr -8
.text:0040F540 var_4           = dword ptr -4
.text:0040F540 arg_0           = dword ptr  4
.text:0040F540 lpFileName      = dword ptr  8
.text:0040F540
.text:0040F540                 sub     esp, 1Ch
.text:0040F543                 mov     [esp+1Ch+var_4], esi
.text:0040F547                 mov     esi, [esp+1Ch+arg_0]
.text:0040F54B                 mov     [esp+1Ch+var_8], ebx
.text:0040F54F                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040F553                 test    esi, esi
.text:0040F555                 jz      short loc_40F5B1
.text:0040F557                 test    ebx, ebx
.text:0040F559                 jz      short loc_40F5B1
.text:0040F55B                 mov     [esp+1Ch+lpNewFileName], 0 ; int
.text:0040F563                 mov     [esp+1Ch+lpExistingFileName], ebx ; lpFileName
.text:0040F566                 call    sub_412310
.text:0040F56B                 test    eax, eax
.text:0040F56D                 jz      short loc_40F5A7
.text:0040F56F
.text:0040F56F loc_40F56F:                             ; CODE XREF: sub_40F540+6F↓j
.text:0040F56F                 mov     [esp+1Ch+lpNewFileName], ebx ; lpNewFileName
.text:0040F573                 mov     [esp+1Ch+lpExistingFileName], esi ; lpExistingFileName
.text:0040F576                 call    MoveFileA
.text:0040F57B                 sub     esp, 8
.text:0040F57E                 xor     edx, edx
.text:0040F580                 test    eax, eax
.text:0040F582                 jz      short loc_40F592
.text:0040F584
.text:0040F584 loc_40F584:                             ; CODE XREF: sub_40F540+65↓j
.text:0040F584                 mov     ebx, [esp+1Ch+var_8]
.text:0040F588                 mov     eax, edx
.text:0040F58A                 mov     esi, [esp+1Ch+var_4]
.text:0040F58E                 add     esp, 1Ch
.text:0040F591                 retn
.text:0040F592 ; ---------------------------------------------------------------------------
.text:0040F592
.text:0040F592 loc_40F592:                             ; CODE XREF: sub_40F540+42↑j
.text:0040F592                 call    sub_40FCA0
.text:0040F597                 mov     esi, eax
.text:0040F599                 call    _errno
.text:0040F59E                 mov     [eax], esi
.text:0040F5A0
.text:0040F5A0 loc_40F5A0:                             ; CODE XREF: sub_40F540+7C↓j
.text:0040F5A0                 mov     edx, 0FFFFFFFFh
.text:0040F5A5                 jmp     short loc_40F584
.text:0040F5A7 ; ---------------------------------------------------------------------------
.text:0040F5A7
.text:0040F5A7 loc_40F5A7:                             ; CODE XREF: sub_40F540+2D↑j
.text:0040F5A7                 mov     [esp+1Ch+lpExistingFileName], ebx ; LPCSTR
.text:0040F5AA                 call    sub_40F3D0
.text:0040F5AF                 jmp     short loc_40F56F
.text:0040F5B1 ; ---------------------------------------------------------------------------
.text:0040F5B1
.text:0040F5B1 loc_40F5B1:                             ; CODE XREF: sub_40F540+15↑j
.text:0040F5B1                                         ; sub_40F540+19↑j
.text:0040F5B1                 call    _errno
.text:0040F5B6                 mov     dword ptr [eax], 16h
.text:0040F5BC                 jmp     short loc_40F5A0
.text:0040F5BC sub_40F540      endp
.text:0040F5BC
.text:0040F5BC ; ---------------------------------------------------------------------------
.text:0040F5BE                 align 10h
.text:0040F5C0
.text:0040F5C0 ; =============== S U B R O U T I N E =======================================
.text:0040F5C0
.text:0040F5C0
.text:0040F5C0 sub_40F5C0      proc near               ; CODE XREF: sub_402C30+5C3↑p
.text:0040F5C0                                         ; sub_402C30+5D3↑p ...
.text:0040F5C0
.text:0040F5C0 arg_0           = dword ptr  4
.text:0040F5C0 arg_4           = dword ptr  8
.text:0040F5C0
.text:0040F5C0                 mov     ecx, [esp+arg_0]
.text:0040F5C4                 mov     edx, [esp+arg_4]
.text:0040F5C8                 nop
.text:0040F5C9                 lea     esi, [esi+0]
.text:0040F5D0
.text:0040F5D0 loc_40F5D0:                             ; CODE XREF: sub_40F5C0+1C↓j
.text:0040F5D0                 movzx   eax, byte ptr [edx]
.text:0040F5D3                 mov     [ecx], al
.text:0040F5D5                 inc     ecx
.text:0040F5D6                 movzx   eax, byte ptr [edx]
.text:0040F5D9                 inc     edx
.text:0040F5DA                 test    al, al
.text:0040F5DC                 jnz     short loc_40F5D0
.text:0040F5DE                 lea     eax, [ecx-1]
.text:0040F5E1                 retn
.text:0040F5E1 sub_40F5C0      endp
.text:0040F5E1
.text:0040F5E1 ; ---------------------------------------------------------------------------
.text:0040F5E2                 align 10h
.text:0040F5F0
.text:0040F5F0 ; =============== S U B R O U T I N E =======================================
.text:0040F5F0
.text:0040F5F0
.text:0040F5F0 sub_40F5F0      proc near               ; CODE XREF: sub_403290+1BB↑p
.text:0040F5F0                                         ; sub_4047F0+9D↑p
.text:0040F5F0
.text:0040F5F0 arg_0           = dword ptr  4
.text:0040F5F0
.text:0040F5F0                 sub     esp, 0Ch
.text:0040F5F3                 mov     edx, [esp+0Ch+arg_0]
.text:0040F5F7                 test    edx, edx
.text:0040F5F9                 jz      short loc_40F60B
.text:0040F5FB                 mov     [esp+0Ch+arg_0], 0
.text:0040F603                 add     esp, 0Ch
.text:0040F606                 jmp     sub_412920
.text:0040F60B ; ---------------------------------------------------------------------------
.text:0040F60B
.text:0040F60B loc_40F60B:                             ; CODE XREF: sub_40F5F0+9↑j
.text:0040F60B                 call    _errno
.text:0040F610                 mov     dword ptr [eax], 16h
.text:0040F616                 mov     eax, 0FFFFFFFFh
.text:0040F61B                 add     esp, 0Ch
.text:0040F61E                 retn
.text:0040F61E sub_40F5F0      endp
.text:0040F61E
.text:0040F61E ; ---------------------------------------------------------------------------
.text:0040F61F                 align 10h
.text:0040F620
.text:0040F620 ; =============== S U B R O U T I N E =======================================
.text:0040F620
.text:0040F620
.text:0040F620 ; int __cdecl sub_40F620(void *)
.text:0040F620 sub_40F620      proc near               ; CODE XREF: sub_4048B0+268↑p
.text:0040F620
.text:0040F620 Block           = dword ptr -0Ch
.text:0040F620 var_4           = dword ptr -4
.text:0040F620 arg_0           = dword ptr  4
.text:0040F620
.text:0040F620                 sub     esp, 0Ch
.text:0040F623                 mov     [esp+0Ch+var_4], ebx
.text:0040F627                 mov     ebx, [esp+0Ch+arg_0]
.text:0040F62B                 test    ebx, ebx
.text:0040F62D                 jz      short loc_40F66B
.text:0040F62F                 cmp     dword ptr [ebx], 0FFFFFFFFh
.text:0040F632                 jz      short loc_40F659
.text:0040F634                 mov     [esp+0Ch+Block], ebx
.text:0040F637                 call    sub_412970
.text:0040F63C                 mov     edx, [ebx+4]
.text:0040F63F                 mov     [esp+0Ch+Block], edx ; Block
.text:0040F642                 call    free
.text:0040F647                 mov     [esp+0Ch+Block], ebx ; Block
.text:0040F64A                 call    free
.text:0040F64F                 xor     eax, eax
.text:0040F651
.text:0040F651 loc_40F651:                             ; CODE XREF: sub_40F620+49↓j
.text:0040F651                 mov     ebx, [esp+0Ch+var_4]
.text:0040F655                 add     esp, 0Ch
.text:0040F658                 retn
.text:0040F659 ; ---------------------------------------------------------------------------
.text:0040F659
.text:0040F659 loc_40F659:                             ; CODE XREF: sub_40F620+12↑j
.text:0040F659                 call    _errno
.text:0040F65E                 mov     dword ptr [eax], 9
.text:0040F664
.text:0040F664 loc_40F664:                             ; CODE XREF: sub_40F620+56↓j
.text:0040F664                 mov     eax, 0FFFFFFFFh
.text:0040F669                 jmp     short loc_40F651
.text:0040F66B ; ---------------------------------------------------------------------------
.text:0040F66B
.text:0040F66B loc_40F66B:                             ; CODE XREF: sub_40F620+D↑j
.text:0040F66B                 call    _errno
.text:0040F670                 mov     dword ptr [eax], 16h
.text:0040F676                 jmp     short loc_40F664
.text:0040F676 sub_40F620      endp
.text:0040F676
.text:0040F676 ; ---------------------------------------------------------------------------
.text:0040F678                 align 10h
.text:0040F680 ; const char asc_40F680[2]
.text:0040F680 asc_40F680      db '\',0                ; DATA XREF: sub_40F690+D2↓o
.text:0040F682                 align 10h
.text:0040F690
.text:0040F690 ; =============== S U B R O U T I N E =======================================
.text:0040F690
.text:0040F690
.text:0040F690 ; int __cdecl sub_40F690(LPCSTR)
.text:0040F690 sub_40F690      proc near               ; CODE XREF: sub_4048B0+52↑p
.text:0040F690
.text:0040F690 lpFileName      = dword ptr -13Ch
.text:0040F690 Source          = dword ptr -138h
.text:0040F690 Destination     = byte ptr -12Ch
.text:0040F690 var_10          = dword ptr -10h
.text:0040F690 var_C           = dword ptr -0Ch
.text:0040F690 var_8           = dword ptr -8
.text:0040F690 var_4           = dword ptr -4
.text:0040F690 arg_0           = dword ptr  4
.text:0040F690
.text:0040F690                 sub     esp, 13Ch
.text:0040F696                 mov     [esp+13Ch+var_C], esi
.text:0040F69D                 mov     esi, [esp+13Ch+arg_0]
.text:0040F6A4                 mov     [esp+13Ch+var_10], ebx
.text:0040F6AB                 mov     [esp+13Ch+var_8], edi
.text:0040F6B2                 test    esi, esi
.text:0040F6B4                 mov     [esp+13Ch+var_4], ebp
.text:0040F6BB                 jz      short loc_40F6C2
.text:0040F6BD                 cmp     byte ptr [esi], 0
.text:0040F6C0                 jnz     short loc_40F6F2
.text:0040F6C2
.text:0040F6C2 loc_40F6C2:                             ; CODE XREF: sub_40F690+2B↑j
.text:0040F6C2                 call    _errno
.text:0040F6C7                 mov     dword ptr [eax], 2
.text:0040F6CD
.text:0040F6CD loc_40F6CD:                             ; CODE XREF: sub_40F690+139↓j
.text:0040F6CD                                         ; sub_40F690+14C↓j
.text:0040F6CD                 xor     eax, eax
.text:0040F6CF
.text:0040F6CF loc_40F6CF:                             ; CODE XREF: sub_40F690+90↓j
.text:0040F6CF                                         ; sub_40F690+A4↓j ...
.text:0040F6CF                 mov     ebx, [esp+13Ch+var_10]
.text:0040F6D6                 mov     esi, [esp+13Ch+var_C]
.text:0040F6DD                 mov     edi, [esp+13Ch+var_8]
.text:0040F6E4                 mov     ebp, [esp+13Ch+var_4]
.text:0040F6EB                 add     esp, 13Ch
.text:0040F6F1                 retn
.text:0040F6F2 ; ---------------------------------------------------------------------------
.text:0040F6F2
.text:0040F6F2 loc_40F6F2:                             ; CODE XREF: sub_40F690+30↑j
.text:0040F6F2                 mov     [esp+13Ch+lpFileName], esi ; lpFileName
.text:0040F6F5                 call    GetFileAttributesA
.text:0040F6FA                 sub     esp, 4
.text:0040F6FD                 cmp     eax, 0FFFFFFFFh
.text:0040F700                 jz      loc_40F7CE
.text:0040F706                 test    al, 10h
.text:0040F708                 jz      loc_40F7BE
.text:0040F70E                 mov     [esp+13Ch+lpFileName], 18h ; Size
.text:0040F715                 call    malloc
.text:0040F71A                 mov     ebx, eax
.text:0040F71C                 xor     eax, eax
.text:0040F71E                 test    ebx, ebx
.text:0040F720                 jz      short loc_40F6CF
.text:0040F722                 mov     [esp+13Ch+lpFileName], 118h ; Size
.text:0040F729                 call    malloc
.text:0040F72E                 mov     edi, eax
.text:0040F730                 xor     eax, eax
.text:0040F732                 test    edi, edi
.text:0040F734                 jz      short loc_40F6CF
.text:0040F736                 mov     [esp+13Ch+Source], esi ; Source
.text:0040F73A                 lea     ebp, [esp+13Ch+Destination]
.text:0040F73E                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0040F741                 call    strcpy
.text:0040F746                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:0040F749                 call    strlen
.text:0040F74E                 cmp     byte ptr [eax+esi], 2Fh ; '/'
.text:0040F752                 jz      short loc_40F780
.text:0040F754                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:0040F757                 call    strlen
.text:0040F75C                 cmp     byte ptr [eax+esi], 5Ch ; '\'
.text:0040F760                 jz      short loc_40F780
.text:0040F762                 mov     [esp+13Ch+Source], offset asc_40F680 ; "\\"
.text:0040F76A                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0040F76D                 call    strcat
.text:0040F772                 lea     esi, [esi+0]
.text:0040F779                 lea     edi, [edi+0]
.text:0040F780
.text:0040F780 loc_40F780:                             ; CODE XREF: sub_40F690+C2↑j
.text:0040F780                                         ; sub_40F690+D0↑j
.text:0040F780                 mov     [esp+13Ch+lpFileName], esi ; LPCSTR
.text:0040F783                 call    sub_40F8C0
.text:0040F788                 mov     [esp+13Ch+lpFileName], eax
.text:0040F78B                 call    sub_40EAB0
.text:0040F790                 mov     [edi], eax
.text:0040F792                 mov     eax, ebx
.text:0040F794                 mov     [ebx+4], edi
.text:0040F797                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:0040F79D                 mov     dword ptr [ebx+8], 118h
.text:0040F7A4                 mov     dword ptr [ebx+0Ch], 118h
.text:0040F7AB                 mov     dword ptr [ebx+10h], 8
.text:0040F7B2                 mov     dword ptr [ebx+14h], 1
.text:0040F7B9                 jmp     loc_40F6CF
.text:0040F7BE ; ---------------------------------------------------------------------------
.text:0040F7BE
.text:0040F7BE loc_40F7BE:                             ; CODE XREF: sub_40F690+78↑j
.text:0040F7BE                 call    _errno
.text:0040F7C3                 mov     dword ptr [eax], 14h
.text:0040F7C9                 jmp     loc_40F6CD
.text:0040F7CE ; ---------------------------------------------------------------------------
.text:0040F7CE
.text:0040F7CE loc_40F7CE:                             ; CODE XREF: sub_40F690+70↑j
.text:0040F7CE                 call    sub_40FCA0
.text:0040F7D3                 mov     esi, eax
.text:0040F7D5                 call    _errno
.text:0040F7DA                 mov     [eax], esi
.text:0040F7DC                 jmp     loc_40F6CD
.text:0040F7DC sub_40F690      endp
.text:0040F7DC
.text:0040F7DC ; ---------------------------------------------------------------------------
.text:0040F7E1                 align 10h
.text:0040F7F0
.text:0040F7F0 ; =============== S U B R O U T I N E =======================================
.text:0040F7F0
.text:0040F7F0
.text:0040F7F0 sub_40F7F0      proc near               ; CODE XREF: .text:0040A52D↑p
.text:0040F7F0
.text:0040F7F0 var_1C          = dword ptr -1Ch
.text:0040F7F0 var_18          = dword ptr -18h
.text:0040F7F0 var_14          = dword ptr -14h
.text:0040F7F0 arg_0           = dword ptr  4
.text:0040F7F0 arg_4           = dword ptr  8
.text:0040F7F0 arg_8           = dword ptr  0Ch
.text:0040F7F0
.text:0040F7F0                 push    edi
.text:0040F7F1                 push    esi
.text:0040F7F2                 push    ebx
.text:0040F7F3                 sub     esp, 10h
.text:0040F7F6                 mov     edi, [esp+1Ch+arg_8]
.text:0040F7FA                 mov     esi, [esp+1Ch+arg_0]
.text:0040F7FE                 mov     ebx, [esp+1Ch+arg_4]
.text:0040F802                 cmp     edi, 0Fh
.text:0040F805                 jbe     short loc_40F850
.text:0040F807                 mov     ecx, esi
.text:0040F809                 neg     ecx
.text:0040F80B                 and     ecx, 3
.text:0040F80E                 sub     edi, ecx
.text:0040F810                 mov     edx, ecx
.text:0040F812                 test    ecx, ecx
.text:0040F814                 jz      short loc_40F82A
.text:0040F816                 lea     esi, [esi+0]
.text:0040F819                 lea     edi, [edi+0]
.text:0040F820
.text:0040F820 loc_40F820:                             ; CODE XREF: sub_40F7F0+38↓j
.text:0040F820                 movzx   ecx, byte ptr [ebx]
.text:0040F823                 inc     ebx
.text:0040F824                 mov     [esi], cl
.text:0040F826                 inc     esi
.text:0040F827                 dec     edx
.text:0040F828                 jnz     short loc_40F820
.text:0040F82A
.text:0040F82A loc_40F82A:                             ; CODE XREF: sub_40F7F0+24↑j
.text:0040F82A                 test    bl, 3
.text:0040F82D                 jnz     short loc_40F873
.text:0040F82F                 mov     [esp+1Ch+var_18], ebx
.text:0040F833                 mov     edx, edi
.text:0040F835                 shr     edx, 2
.text:0040F838                 mov     [esp+1Ch+var_14], edx
.text:0040F83C                 mov     [esp+1Ch+var_1C], esi
.text:0040F83F                 call    sub_4129D0
.text:0040F844
.text:0040F844 loc_40F844:                             ; CODE XREF: sub_40F7F0+98↓j
.text:0040F844                 mov     edx, edi
.text:0040F846                 and     edx, 0FFFFFFFCh
.text:0040F849                 and     edi, 3
.text:0040F84C                 add     ebx, edx
.text:0040F84E                 add     esi, edx
.text:0040F850
.text:0040F850 loc_40F850:                             ; CODE XREF: sub_40F7F0+15↑j
.text:0040F850                 test    edi, edi
.text:0040F852                 mov     edx, edi
.text:0040F854                 jz      short loc_40F86A
.text:0040F856                 lea     esi, [esi+0]
.text:0040F859                 lea     edi, [edi+0]
.text:0040F860
.text:0040F860 loc_40F860:                             ; CODE XREF: sub_40F7F0+78↓j
.text:0040F860                 movzx   ecx, byte ptr [ebx]
.text:0040F863                 inc     ebx
.text:0040F864                 mov     [esi], cl
.text:0040F866                 inc     esi
.text:0040F867                 dec     edx
.text:0040F868                 jnz     short loc_40F860
.text:0040F86A
.text:0040F86A loc_40F86A:                             ; CODE XREF: sub_40F7F0+64↑j
.text:0040F86A                 add     esp, 10h
.text:0040F86D                 mov     eax, esi
.text:0040F86F                 pop     ebx
.text:0040F870                 pop     esi
.text:0040F871                 pop     edi
.text:0040F872                 retn
.text:0040F873 ; ---------------------------------------------------------------------------
.text:0040F873
.text:0040F873 loc_40F873:                             ; CODE XREF: sub_40F7F0+3D↑j
.text:0040F873                 mov     [esp+1Ch+var_18], ebx
.text:0040F877                 mov     ecx, edi
.text:0040F879                 shr     ecx, 2
.text:0040F87C                 mov     [esp+1Ch+var_14], ecx
.text:0040F880                 mov     [esp+1Ch+var_1C], esi
.text:0040F883                 call    sub_412AD0
.text:0040F888                 jmp     short loc_40F844
.text:0040F888 sub_40F7F0      endp
.text:0040F888
.text:0040F888 ; ---------------------------------------------------------------------------
.text:0040F88A                 align 10h
.text:0040F890
.text:0040F890 ; =============== S U B R O U T I N E =======================================
.text:0040F890
.text:0040F890
.text:0040F890 sub_40F890      proc near               ; CODE XREF: .text:0040EB43↑p
.text:0040F890                                         ; .text:0040EB93↑p
.text:0040F890
.text:0040F890 arg_4           = dword ptr  8
.text:0040F890
.text:0040F890                 sub     esp, 0Ch
.text:0040F893                 mov     edx, [esp+0Ch+arg_4]
.text:0040F897                 test    edx, edx
.text:0040F899                 jz      short loc_40F8A0
.text:0040F89B                 add     esp, 0Ch
.text:0040F89E                 jmp     short sub_40F8E0
.text:0040F8A0 ; ---------------------------------------------------------------------------
.text:0040F8A0
.text:0040F8A0 loc_40F8A0:                             ; CODE XREF: sub_40F890+9↑j
.text:0040F8A0                 call    _errno
.text:0040F8A5                 mov     dword ptr [eax], 16h
.text:0040F8AB                 xor     eax, eax
.text:0040F8AD                 add     esp, 0Ch
.text:0040F8B0                 retn
.text:0040F8B0 sub_40F890      endp
.text:0040F8B0
.text:0040F8B1 ; ---------------------------------------------------------------------------
.text:0040F8B1                 jmp     short sub_40F8C0
.text:0040F8B1 ; ---------------------------------------------------------------------------
.text:0040F8B3                 align 10h
.text:0040F8C0
.text:0040F8C0 ; =============== S U B R O U T I N E =======================================
.text:0040F8C0
.text:0040F8C0
.text:0040F8C0 ; int __cdecl sub_40F8C0(LPCSTR)
.text:0040F8C0 sub_40F8C0      proc near               ; CODE XREF: sub_40E2E0+74↑p
.text:0040F8C0                                         ; .text:0040ED38↑p ...
.text:0040F8C0
.text:0040F8C0 lpFileName      = dword ptr -0Ch
.text:0040F8C0 Destination     = dword ptr -8
.text:0040F8C0 arg_0           = dword ptr  4
.text:0040F8C0
.text:0040F8C0                 sub     esp, 0Ch
.text:0040F8C3                 mov     edx, [esp+0Ch+arg_0]
.text:0040F8C7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040F8CF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040F8D2                 call    sub_40F8E0
.text:0040F8D7                 add     esp, 0Ch
.text:0040F8DA                 retn
.text:0040F8DA sub_40F8C0      endp
.text:0040F8DA
.text:0040F8DA ; ---------------------------------------------------------------------------
.text:0040F8DB                 align 10h
.text:0040F8E0
.text:0040F8E0 ; =============== S U B R O U T I N E =======================================
.text:0040F8E0
.text:0040F8E0
.text:0040F8E0 ; int __cdecl sub_40F8E0(LPCSTR lpFileName, char *Destination)
.text:0040F8E0 sub_40F8E0      proc near               ; CODE XREF: sub_40F890+E↑j
.text:0040F8E0                                         ; sub_40F8C0+12↑p
.text:0040F8E0
.text:0040F8E0 Size            = dword ptr -2Ch
.text:0040F8E0 nBufferLength   = dword ptr -28h
.text:0040F8E0 lpBuffer        = dword ptr -24h
.text:0040F8E0 lpFilePart      = dword ptr -20h
.text:0040F8E0 FilePart        = dword ptr -14h
.text:0040F8E0 lpFileName      = dword ptr  4
.text:0040F8E0 Destination     = dword ptr  8
.text:0040F8E0
.text:0040F8E0                 push    ebp
.text:0040F8E1                 push    edi
.text:0040F8E2                 push    esi
.text:0040F8E3                 push    ebx
.text:0040F8E4                 sub     esp, 1Ch
.text:0040F8E7                 mov     edi, [esp+2Ch+lpFileName]
.text:0040F8EB                 mov     ebp, [esp+2Ch+Destination]
.text:0040F8EF                 test    edi, edi
.text:0040F8F1                 jz      loc_40F9F9
.text:0040F8F7                 cmp     byte ptr [edi], 0
.text:0040F8FA                 jz      loc_40F9EC
.text:0040F900                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040F907                 call    malloc
.text:0040F90C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040F910                 lea     edx, [esp+2Ch+FilePart]
.text:0040F914                 mov     ebx, eax
.text:0040F916                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040F91A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040F922                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040F925                 call    GetFullPathNameA
.text:0040F92A                 sub     esp, 10h
.text:0040F92D                 mov     esi, eax
.text:0040F92F                 test    eax, eax
.text:0040F931                 jz      loc_40F9DA
.text:0040F937                 cmp     eax, 104h
.text:0040F93C                 jle     short loc_40F94D
.text:0040F93E                 test    ebp, ebp
.text:0040F940                 jz      short loc_40F9A9
.text:0040F942                 call    _errno
.text:0040F947                 mov     dword ptr [eax], 26h ; '&'
.text:0040F94D
.text:0040F94D loc_40F94D:                             ; CODE XREF: sub_40F8E0+5C↑j
.text:0040F94D                                         ; sub_40F8E0+F5↓j
.text:0040F94D                 call    _errno
.text:0040F952                 mov     edi, [eax]
.text:0040F954                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040F95C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040F95F                 call    sub_412310
.text:0040F964                 test    eax, eax
.text:0040F966                 jnz     short loc_40F980
.text:0040F968                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040F96D                 cmp     al, 2Fh ; '/'
.text:0040F96F                 jz      short loc_40F980
.text:0040F971                 cmp     al, 5Ch ; '\'
.text:0040F973                 jz      short loc_40F980
.text:0040F975                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040F979                 mov     byte ptr [esi+ebx+1], 0
.text:0040F97E                 mov     esi, esi
.text:0040F980
.text:0040F980 loc_40F980:                             ; CODE XREF: sub_40F8E0+86↑j
.text:0040F980                                         ; sub_40F8E0+8F↑j ...
.text:0040F980                 call    _errno
.text:0040F985                 mov     [eax], edi
.text:0040F987                 mov     [esp+2Ch+Size], ebx
.text:0040F98A                 call    sub_40EA30
.text:0040F98F                 test    ebp, ebp
.text:0040F991                 mov     eax, ebx
.text:0040F993                 jz      short loc_40F9A1
.text:0040F995                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040F999                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040F99C                 call    strcpy
.text:0040F9A1
.text:0040F9A1 loc_40F9A1:                             ; CODE XREF: sub_40F8E0+B3↑j
.text:0040F9A1                                         ; sub_40F8E0+10A↓j
.text:0040F9A1                 add     esp, 1Ch
.text:0040F9A4                 pop     ebx
.text:0040F9A5                 pop     esi
.text:0040F9A6                 pop     edi
.text:0040F9A7                 pop     ebp
.text:0040F9A8                 retn
.text:0040F9A9 ; ---------------------------------------------------------------------------
.text:0040F9A9
.text:0040F9A9 loc_40F9A9:                             ; CODE XREF: sub_40F8E0+60↑j
.text:0040F9A9                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040F9AC                 lea     ecx, [eax+2]
.text:0040F9AF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040F9B3                 call    realloc
.text:0040F9B8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040F9BC                 lea     edx, [esp+2Ch+FilePart]
.text:0040F9C0                 mov     ebx, eax
.text:0040F9C2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040F9C6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040F9CA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040F9CD                 call    GetFullPathNameA
.text:0040F9D2                 sub     esp, 10h
.text:0040F9D5                 jmp     loc_40F94D
.text:0040F9DA ; ---------------------------------------------------------------------------
.text:0040F9DA
.text:0040F9DA loc_40F9DA:                             ; CODE XREF: sub_40F8E0+51↑j
.text:0040F9DA                 call    sub_40FCA0
.text:0040F9DF                 mov     esi, eax
.text:0040F9E1                 call    _errno
.text:0040F9E6                 mov     [eax], esi
.text:0040F9E8
.text:0040F9E8 loc_40F9E8:                             ; CODE XREF: sub_40F8E0+117↓j
.text:0040F9E8                                         ; sub_40F8E0+124↓j
.text:0040F9E8                 xor     eax, eax
.text:0040F9EA                 jmp     short loc_40F9A1
.text:0040F9EC ; ---------------------------------------------------------------------------
.text:0040F9EC
.text:0040F9EC loc_40F9EC:                             ; CODE XREF: sub_40F8E0+1A↑j
.text:0040F9EC                 call    _errno
.text:0040F9F1                 mov     dword ptr [eax], 2
.text:0040F9F7                 jmp     short loc_40F9E8
.text:0040F9F9 ; ---------------------------------------------------------------------------
.text:0040F9F9
.text:0040F9F9 loc_40F9F9:                             ; CODE XREF: sub_40F8E0+11↑j
.text:0040F9F9                 call    _errno
.text:0040F9FE                 mov     dword ptr [eax], 16h
.text:0040FA04                 jmp     short loc_40F9E8
.text:0040FA04 sub_40F8E0      endp
.text:0040FA04
.text:0040FA04 ; ---------------------------------------------------------------------------
.text:0040FA06                 align 10h
.text:0040FA10
.text:0040FA10 ; =============== S U B R O U T I N E =======================================
.text:0040FA10
.text:0040FA10 ; Attributes: info_from_lumina
.text:0040FA10
.text:0040FA10 ___get_errno    proc near               ; CODE XREF: sub_40FCA0+B↓p
.text:0040FA10
.text:0040FA10 arg_0           = dword ptr  4
.text:0040FA10
.text:0040FA10                 mov     eax, [esp+arg_0]
.text:0040FA14                 cmp     eax, 53h ; 'S'
.text:0040FA17                 jg      loc_40FB10
.text:0040FA1D                 cmp     eax, 52h ; 'R'
.text:0040FA20                 jge     short loc_40FA72
.text:0040FA22                 cmp     eax, 0Fh
.text:0040FA25                 jz      short loc_40FA40
.text:0040FA27                 cmp     eax, 0Fh
.text:0040FA2A                 jg      short loc_40FAA0
.text:0040FA2C                 cmp     eax, 9
.text:0040FA2F                 jg      short loc_40FA80
.text:0040FA31                 cmp     eax, 7
.text:0040FA34                 jge     short loc_40FA79
.text:0040FA36                 cmp     eax, 3
.text:0040FA39                 jg      short loc_40FA5A
.text:0040FA3B                 cmp     eax, 2
.text:0040FA3E                 jl      short loc_40FA53
.text:0040FA40
.text:0040FA40 loc_40FA40:                             ; CODE XREF: ___get_errno+15↑j
.text:0040FA40                                         ; ___get_errno+9D↓j ...
.text:0040FA40                 mov     edx, 2
.text:0040FA45                 lea     esi, [esi+0]
.text:0040FA49                 lea     edi, [edi+0]
.text:0040FA50
.text:0040FA50 loc_40FA50:                             ; CODE XREF: ___get_errno+48↓j
.text:0040FA50                                         ; ___get_errno+59↓j ...
.text:0040FA50                 mov     eax, edx
.text:0040FA52                 retn
.text:0040FA53 ; ---------------------------------------------------------------------------
.text:0040FA53
.text:0040FA53 loc_40FA53:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040FA53                                         ; ___get_errno+78↓j ...
.text:0040FA53                 mov     edx, 16h
.text:0040FA58                 jmp     short loc_40FA50
.text:0040FA5A ; ---------------------------------------------------------------------------
.text:0040FA5A
.text:0040FA5A loc_40FA5A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040FA5A                 cmp     eax, 5
.text:0040FA5D                 jz      short loc_40FA72
.text:0040FA5F                 cmp     eax, 5
.text:0040FA62                 jg      short loc_40FA6B
.text:0040FA64                 mov     edx, 18h
.text:0040FA69                 jmp     short loc_40FA50
.text:0040FA6B ; ---------------------------------------------------------------------------
.text:0040FA6B
.text:0040FA6B loc_40FA6B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040FA6B                                         ; ___get_errno+180↓j
.text:0040FA6B                 mov     edx, 9
.text:0040FA70                 jmp     short loc_40FA50
.text:0040FA72 ; ---------------------------------------------------------------------------
.text:0040FA72
.text:0040FA72 loc_40FA72:                             ; CODE XREF: ___get_errno+10↑j
.text:0040FA72                                         ; ___get_errno+4D↑j ...
.text:0040FA72                 mov     edx, 0Dh
.text:0040FA77                 jmp     short loc_40FA50
.text:0040FA79 ; ---------------------------------------------------------------------------
.text:0040FA79
.text:0040FA79 loc_40FA79:                             ; CODE XREF: ___get_errno+24↑j
.text:0040FA79                                         ; ___get_errno+73↓j ...
.text:0040FA79                 mov     edx, 0Ch
.text:0040FA7E                 jmp     short loc_40FA50
.text:0040FA80 ; ---------------------------------------------------------------------------
.text:0040FA80
.text:0040FA80 loc_40FA80:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040FA80                 cmp     eax, 0Dh
.text:0040FA83                 jg      short loc_40FA79
.text:0040FA85                 cmp     eax, 0Ch
.text:0040FA88                 jge     short loc_40FA53
.text:0040FA8A                 cmp     eax, 0Ah
.text:0040FA8D                 mov     edx, 7
.text:0040FA92                 jz      short loc_40FA50
.text:0040FA94                 cmp     eax, 0Bh
.text:0040FA97                 jnz     short loc_40FA53
.text:0040FA99
.text:0040FA99 loc_40FA99:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040FA99                 mov     edx, 8
.text:0040FA9E                 jmp     short loc_40FA50
.text:0040FAA0 ; ---------------------------------------------------------------------------
.text:0040FAA0
.text:0040FAA0 loc_40FAA0:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040FAA0                 cmp     eax, 22h ; '"'
.text:0040FAA3                 jg      short loc_40FAD4
.text:0040FAA5                 cmp     eax, 16h
.text:0040FAA8                 jge     short loc_40FA72
.text:0040FAAA                 cmp     eax, 12h
.text:0040FAAD                 jz      short loc_40FA40
.text:0040FAAF                 cmp     eax, 12h
.text:0040FAB2                 jg      short loc_40FAC5
.text:0040FAB4                 cmp     eax, 10h
.text:0040FAB7                 jz      short loc_40FA72
.text:0040FAB9                 mov     edx, 12h
.text:0040FABE                 cmp     eax, 11h
.text:0040FAC1
.text:0040FAC1 loc_40FAC1:                             ; CODE XREF: ___get_errno+172↓j
.text:0040FAC1                                         ; ___get_errno+24C↓j ...
.text:0040FAC1                 jnz     short loc_40FA53
.text:0040FAC3                 jmp     short loc_40FA50
.text:0040FAC5 ; ---------------------------------------------------------------------------
.text:0040FAC5
.text:0040FAC5 loc_40FAC5:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040FAC5                 cmp     eax, 14h
.text:0040FAC8                 jle     short loc_40FA72
.text:0040FACA
.text:0040FACA loc_40FACA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040FACA                 mov     edx, 10h
.text:0040FACF                 jmp     loc_40FA50
.text:0040FAD4 ; ---------------------------------------------------------------------------
.text:0040FAD4
.text:0040FAD4 loc_40FAD4:                             ; CODE XREF: ___get_errno+93↑j
.text:0040FAD4                 cmp     eax, 41h ; 'A'
.text:0040FAD7                 jz      short loc_40FA72
.text:0040FAD9                 cmp     eax, 41h ; 'A'
.text:0040FADC                 jg      short loc_40FAF1
.text:0040FADE                 cmp     eax, 24h ; '$'
.text:0040FAE1                 jz      short loc_40FA72
.text:0040FAE3                 cmp     eax, 35h ; '5'
.text:0040FAE6                 jnz     loc_40FA53
.text:0040FAEC                 jmp     loc_40FA40
.text:0040FAF1 ; ---------------------------------------------------------------------------
.text:0040FAF1
.text:0040FAF1 loc_40FAF1:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040FAF1                 cmp     eax, 43h ; 'C'
.text:0040FAF4                 jz      loc_40FA40
.text:0040FAFA                 cmp     eax, 50h ; 'P'
.text:0040FAFD                 jnz     loc_40FA53
.text:0040FB03
.text:0040FB03 loc_40FB03:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040FB03                 mov     edx, 11h
.text:0040FB08                 jmp     loc_40FA50
.text:0040FB08 ; ---------------------------------------------------------------------------
.text:0040FB0D                 align 10h
.text:0040FB10
.text:0040FB10 loc_40FB10:                             ; CODE XREF: ___get_errno+7↑j
.text:0040FB10                 cmp     eax, 0A1h ; '¡'
.text:0040FB15                 jz      loc_40FA40
.text:0040FB1B                 cmp     eax, 0A1h ; '¡'
.text:0040FB20                 jg      loc_40FBD0
.text:0040FB26                 cmp     eax, 81h
.text:0040FB2B                 jg      short loc_40FB95
.text:0040FB2D                 cmp     eax, 80h ; '€'
.text:0040FB32                 mov     edx, 0Ah
.text:0040FB37                 jge     loc_40FA50
.text:0040FB3D                 cmp     eax, 6Ch ; 'l'
.text:0040FB40                 jz      loc_40FA72
.text:0040FB46                 cmp     eax, 6Ch ; 'l'
.text:0040FB49                 jg      short loc_40FB67
.text:0040FB4B                 cmp     eax, 57h ; 'W'
.text:0040FB4E                 jz      loc_40FA53
.text:0040FB54                 cmp     eax, 59h ; 'Y'
.text:0040FB57                 jnz     loc_40FA53
.text:0040FB5D
.text:0040FB5D loc_40FB5D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040FB5D                                         ; ___get_errno+23C↓j
.text:0040FB5D                 mov     edx, 0Bh
.text:0040FB62                 jmp     loc_40FA50
.text:0040FB67 ; ---------------------------------------------------------------------------
.text:0040FB67
.text:0040FB67 loc_40FB67:                             ; CODE XREF: ___get_errno+139↑j
.text:0040FB67                 cmp     eax, 70h ; 'p'
.text:0040FB6A                 mov     edx, 1Ch
.text:0040FB6F                 jz      loc_40FA50
.text:0040FB75                 cmp     eax, 70h ; 'p'
.text:0040FB78                 jg      short loc_40FB87
.text:0040FB7A                 mov     edx, 20h ; ' '
.text:0040FB7F                 cmp     eax, 6Dh ; 'm'
.text:0040FB82                 jmp     loc_40FAC1
.text:0040FB87 ; ---------------------------------------------------------------------------
.text:0040FB87
.text:0040FB87 loc_40FB87:                             ; CODE XREF: ___get_errno+168↑j
.text:0040FB87                 cmp     eax, 72h ; 'r'
.text:0040FB8A
.text:0040FB8A loc_40FB8A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040FB8A                 jnz     loc_40FA53
.text:0040FB90                 jmp     loc_40FA6B
.text:0040FB95 ; ---------------------------------------------------------------------------
.text:0040FB95
.text:0040FB95 loc_40FB95:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040FB95                 cmp     eax, 84h ; '„'
.text:0040FB9A                 jz      loc_40FA72
.text:0040FBA0                 cmp     eax, 84h ; '„'
.text:0040FBA5                 jg      short loc_40FBAE
.text:0040FBA7                 cmp     eax, 82h ; '‚'
.text:0040FBAC                 jmp     short loc_40FB8A
.text:0040FBAE ; ---------------------------------------------------------------------------
.text:0040FBAE
.text:0040FBAE loc_40FBAE:                             ; CODE XREF: ___get_errno+195↑j
.text:0040FBAE                 cmp     eax, 91h ; '‘'
.text:0040FBB3                 mov     edx, 29h ; ')'
.text:0040FBB8                 jz      loc_40FA50
.text:0040FBBE                 cmp     eax, 9Eh ; 'ž'
.text:0040FBC3
.text:0040FBC3 loc_40FBC3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040FBC3                 jnz     loc_40FA53
.text:0040FBC9                 jmp     loc_40FA72
.text:0040FBC9 ; ---------------------------------------------------------------------------
.text:0040FBCE                 align 10h
.text:0040FBD0
.text:0040FBD0 loc_40FBD0:                             ; CODE XREF: ___get_errno+110↑j
.text:0040FBD0                 cmp     eax, 0CEh ; 'Î'
.text:0040FBD5                 jz      loc_40FA40
.text:0040FBDB                 cmp     eax, 0CEh ; 'Î'
.text:0040FBE0                 jg      short loc_40FC30
.text:0040FBE2                 cmp     eax, 0AAh ; 'ª'
.text:0040FBE7                 jz      loc_40FACA
.text:0040FBED                 cmp     eax, 0AAh ; 'ª'
.text:0040FBF2                 jg      short loc_40FC06
.text:0040FBF4                 cmp     eax, 0A4h ; '¤'
.text:0040FBF9                 jz      loc_40FB5D
.text:0040FBFF                 cmp     eax, 0A7h ; '§'
.text:0040FC04                 jmp     short loc_40FBC3
.text:0040FC06 ; ---------------------------------------------------------------------------
.text:0040FC06
.text:0040FC06 loc_40FC06:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040FC06                 cmp     eax, 0B7h ; '·'
.text:0040FC0B                 jz      loc_40FB03
.text:0040FC11                 cmp     eax, 0B7h ; '·'
.text:0040FC16                 jl      loc_40FA53
.text:0040FC1C                 sub     eax, 0BCh ; '¼'
.text:0040FC21                 cmp     eax, 0Eh
.text:0040FC24                 ja      loc_40FA53
.text:0040FC2A                 jmp     loc_40FA99
.text:0040FC2A ; ---------------------------------------------------------------------------
.text:0040FC2F                 align 10h
.text:0040FC30
.text:0040FC30 loc_40FC30:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040FC30                 cmp     eax, 46Bh
.text:0040FC35                 mov     edx, 24h ; '$'
.text:0040FC3A                 jz      loc_40FA50
.text:0040FC40                 cmp     eax, 46Bh
.text:0040FC45                 jg      short loc_40FC61
.text:0040FC47                 cmp     eax, 0D7h ; '×'
.text:0040FC4C                 jz      loc_40FB5D
.text:0040FC52                 mov     edx, 5
.text:0040FC57                 cmp     eax, 45Dh
.text:0040FC5C                 jmp     loc_40FAC1
.text:0040FC61 ; ---------------------------------------------------------------------------
.text:0040FC61
.text:0040FC61 loc_40FC61:                             ; CODE XREF: ___get_errno+235↑j
.text:0040FC61                 cmp     eax, 4D5h
.text:0040FC66                 mov     edx, 4
.text:0040FC6B                 jz      loc_40FA50
.text:0040FC71                 cmp     eax, 4D5h
.text:0040FC76                 jg      short loc_40FC87
.text:0040FC78                 mov     edx, 13h
.text:0040FC7D                 cmp     eax, 4B0h
.text:0040FC82                 jmp     loc_40FAC1
.text:0040FC87 ; ---------------------------------------------------------------------------
.text:0040FC87
.text:0040FC87 loc_40FC87:                             ; CODE XREF: ___get_errno+266↑j
.text:0040FC87                 cmp     eax, 718h
.text:0040FC8C                 jnz     loc_40FA53
.text:0040FC92                 jmp     loc_40FA79
.text:0040FC92 ___get_errno    endp
.text:0040FC92
.text:0040FC92 ; ---------------------------------------------------------------------------
.text:0040FC97                 align 10h
.text:0040FCA0
.text:0040FCA0 ; =============== S U B R O U T I N E =======================================
.text:0040FCA0
.text:0040FCA0
.text:0040FCA0 sub_40FCA0      proc near               ; CODE XREF: sub_40E2E0+1A2↑p
.text:0040FCA0                                         ; sub_40E4C0+DA↑p ...
.text:0040FCA0
.text:0040FCA0 var_C           = dword ptr -0Ch
.text:0040FCA0
.text:0040FCA0                 sub     esp, 0Ch
.text:0040FCA3                 call    GetLastError
.text:0040FCA8                 mov     [esp+0Ch+var_C], eax
.text:0040FCAB                 call    ___get_errno
.text:0040FCB0                 add     esp, 0Ch
.text:0040FCB3                 retn
.text:0040FCB3 sub_40FCA0      endp
.text:0040FCB3
.text:0040FCB3 ; ---------------------------------------------------------------------------
.text:0040FCB4                 align 10h
.text:0040FCC0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:0040FCC0                                         ; DATA XREF: .data:off_418094↓o
.text:0040FCD4 ; const CHAR ModuleName[]
.text:0040FCD4 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_40FD00+11↓o
.text:0040FCD4                                         ; sub_40FE70+C↓o ...
.text:0040FCE1 ; const CHAR aGetfileattribu[]
.text:0040FCE1 aGetfileattribu db 'GetFileAttributesExA',0
.text:0040FCE1                                         ; DATA XREF: sub_40FD00+28↓o
.text:0040FCF6                 align 10h
.text:0040FD00
.text:0040FD00 ; =============== S U B R O U T I N E =======================================
.text:0040FD00
.text:0040FD00
.text:0040FD00 ; int __cdecl sub_40FD00(LPCSTR lpFileName, int)
.text:0040FD00 sub_40FD00      proc near               ; CODE XREF: .text:00410EA4↓p
.text:0040FD00                                         ; sub_4112A0+37↓p
.text:0040FD00
.text:0040FD00 lpModuleName    = dword ptr -18Ch
.text:0040FD00 lpProcName      = dword ptr -188h
.text:0040FD00 var_184         = dword ptr -184h
.text:0040FD00 var_170         = dword ptr -170h
.text:0040FD00 var_164         = dword ptr -164h
.text:0040FD00 hModule         = dword ptr -160h
.text:0040FD00 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040FD00 lpFileName      = dword ptr  4
.text:0040FD00 arg_4           = dword ptr  8
.text:0040FD00
.text:0040FD00                 push    ebp
.text:0040FD01                 push    edi
.text:0040FD02                 push    esi
.text:0040FD03                 push    ebx
.text:0040FD04                 sub     esp, 17Ch
.text:0040FD0A                 mov     ebx, [esp+18Ch+arg_4]
.text:0040FD11                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:0040FD18                 call    GetModuleHandleA
.text:0040FD1D                 sub     esp, 4
.text:0040FD20                 mov     [esp+18Ch+hModule], eax
.text:0040FD24                 mov     edx, [esp+18Ch+hModule]
.text:0040FD28                 mov     [esp+18Ch+lpProcName], offset aGetfileattribu ; "GetFileAttributesExA"
.text:0040FD30                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:0040FD33                 call    GetProcAddress
.text:0040FD38                 sub     esp, 8
.text:0040FD3B                 mov     ebp, eax
.text:0040FD3D                 mov     eax, [esp+18Ch+lpFileName]
.text:0040FD44                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:0040FD47                 call    GetFileAttributesA
.text:0040FD4C                 sub     esp, 4
.text:0040FD4F                 mov     [esp+18Ch+var_164], eax
.text:0040FD53                 xor     eax, eax
.text:0040FD55                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040FD5A                 jz      short loc_40FDB1
.text:0040FD5C                 cld
.text:0040FD5D                 mov     ecx, 50h ; 'P'
.text:0040FD62                 lea     esi, [esp+18Ch+FindFileData]
.text:0040FD66                 mov     edi, esi
.text:0040FD68                 test    ebp, ebp
.text:0040FD6A                 rep stosd
.text:0040FD6C                 mov     [esp+18Ch+var_170], 0
.text:0040FD74                 jz      short loc_40FD95
.text:0040FD76                 mov     [esp+18Ch+var_184], ebx
.text:0040FD7A                 mov     ecx, [esp+18Ch+lpFileName]
.text:0040FD81                 mov     [esp+18Ch+lpProcName], 0
.text:0040FD89                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040FD8C                 call    ebp
.text:0040FD8E                 sub     esp, 0Ch
.text:0040FD91                 mov     [esp+18Ch+var_170], eax
.text:0040FD95
.text:0040FD95 loc_40FD95:                             ; CODE XREF: sub_40FD00+74↑j
.text:0040FD95                 mov     eax, [esp+18Ch+var_170]
.text:0040FD99                 test    eax, eax
.text:0040FD9B                 jz      short loc_40FDC0
.text:0040FD9D
.text:0040FD9D loc_40FD9D:                             ; CODE XREF: sub_40FD00+131↓j
.text:0040FD9D                                         ; sub_40FD00+14B↓j
.text:0040FD9D                 mov     ebx, [esp+18Ch+hModule]
.text:0040FDA1                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:0040FDA4                 call    FreeLibrary
.text:0040FDA9                 sub     esp, 4
.text:0040FDAC                 mov     eax, 1
.text:0040FDB1
.text:0040FDB1 loc_40FDB1:                             ; CODE XREF: sub_40FD00+5A↑j
.text:0040FDB1                 add     esp, 17Ch
.text:0040FDB7                 pop     ebx
.text:0040FDB8                 pop     esi
.text:0040FDB9                 pop     edi
.text:0040FDBA                 pop     ebp
.text:0040FDBB                 retn
.text:0040FDBB ; ---------------------------------------------------------------------------
.text:0040FDBC                 align 10h
.text:0040FDC0
.text:0040FDC0 loc_40FDC0:                             ; CODE XREF: sub_40FD00+9B↑j
.text:0040FDC0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:0040FDC4                 mov     edx, [esp+18Ch+lpFileName]
.text:0040FDCB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040FDCE                 call    FindFirstFileA
.text:0040FDD3                 sub     esp, 8
.text:0040FDD6                 xor     ecx, ecx
.text:0040FDD8                 cmp     eax, 0FFFFFFFFh
.text:0040FDDB                 setnz   cl
.text:0040FDDE                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:0040FDE2                 mov     [ebx], edi
.text:0040FDE4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:0040FDE8                 mov     [esp+18Ch+var_170], ecx
.text:0040FDEC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:0040FDF0                 mov     [ebx+8], esi
.text:0040FDF3                 mov     [ebx+4], ecx
.text:0040FDF6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040FDFA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040FDFE                 mov     [ebx+0Ch], ebp
.text:0040FE01                 mov     [ebx+10h], edi
.text:0040FE04                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:0040FE08                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040FE0C                 mov     [ebx+18h], esi
.text:0040FE0F                 mov     [ebx+14h], ecx
.text:0040FE12                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:0040FE16                 mov     [ebx+1Ch], ebp
.text:0040FE19                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040FE1D                 mov     [ebx+20h], edi
.text:0040FE20                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:0040FE23                 call    FindClose
.text:0040FE28                 sub     esp, 4
.text:0040FE2B                 mov     esi, [esp+18Ch+var_170]
.text:0040FE2F                 test    esi, esi
.text:0040FE31                 jnz     loc_40FD9D
.text:0040FE37                 cld
.text:0040FE38                 mov     eax, [esp+18Ch+var_170]
.text:0040FE3C                 mov     ecx, 9
.text:0040FE41                 mov     edi, ebx
.text:0040FE43                 rep stosd
.text:0040FE45                 mov     ebp, [esp+18Ch+var_164]
.text:0040FE49                 mov     [ebx], ebp
.text:0040FE4B                 jmp     loc_40FD9D
.text:0040FE4B sub_40FD00      endp
.text:0040FE4B
.text:0040FE4B ; ---------------------------------------------------------------------------
.text:0040FE50 ; const CHAR aFindfirstfilee[]
.text:0040FE50 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_40FE70+23↓o
.text:0040FE61 ; const char asc_40FE61[]
.text:0040FE61 asc_40FE61      db '\*',0               ; DATA XREF: sub_40FE70:loc_40FEFD↓o
.text:0040FE64                 align 10h
.text:0040FE70
.text:0040FE70 ; =============== S U B R O U T I N E =======================================
.text:0040FE70
.text:0040FE70
.text:0040FE70 ; int __cdecl sub_40FE70(char *Str)
.text:0040FE70 sub_40FE70      proc near               ; CODE XREF: .text:00410FA3↓p
.text:0040FE70                                         ; sub_4112A0+3FA↓p ...
.text:0040FE70
.text:0040FE70 lpLibFileName   = dword ptr -18Ch
.text:0040FE70 lpProcName      = dword ptr -188h
.text:0040FE70 var_184         = dword ptr -184h
.text:0040FE70 var_180         = dword ptr -180h
.text:0040FE70 var_17C         = dword ptr -17Ch
.text:0040FE70 var_178         = dword ptr -178h
.text:0040FE70 var_164         = dword ptr -164h
.text:0040FE70 hModule         = dword ptr -160h
.text:0040FE70 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040FE70 Str             = dword ptr  4
.text:0040FE70
.text:0040FE70                 push    ebp
.text:0040FE71                 push    edi
.text:0040FE72                 xor     edi, edi
.text:0040FE74                 push    esi
.text:0040FE75                 push    ebx
.text:0040FE76                 sub     esp, 17Ch
.text:0040FE7C                 mov     [esp+18Ch+lpLibFileName], offset ModuleName ; "KERNEL32.DLL"
.text:0040FE83                 call    LoadLibraryA
.text:0040FE88                 sub     esp, 4
.text:0040FE8B                 mov     [esp+18Ch+hModule], eax
.text:0040FE8F                 mov     ecx, [esp+18Ch+hModule]
.text:0040FE93                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040FE9B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040FE9E                 call    GetProcAddress
.text:0040FEA3                 sub     esp, 8
.text:0040FEA6                 mov     edx, [esp+18Ch+Str]
.text:0040FEAD                 mov     [esp+18Ch+var_164], eax
.text:0040FEB1                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:0040FEB4                 call    strlen
.text:0040FEB9                 lea     edx, [eax+5]
.text:0040FEBC                 mov     ebx, eax
.text:0040FEBE                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:0040FEC1                 call    malloc
.text:0040FEC6                 mov     esi, eax
.text:0040FEC8                 test    esi, esi
.text:0040FECA                 mov     eax, 1
.text:0040FECF                 jz      loc_40FFAD
.text:0040FED5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040FED8                 mov     ebp, [esp+18Ch+Str]
.text:0040FEDF                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:0040FEE3                 call    strcpy
.text:0040FEE8                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040FEED                 cmp     al, 2Fh ; '/'
.text:0040FEEF                 jz      loc_40FFDB
.text:0040FEF5                 cmp     al, 5Ch ; '\'
.text:0040FEF7                 jz      loc_40FFDB
.text:0040FEFD
.text:0040FEFD loc_40FEFD:                             ; CODE XREF: sub_40FE70+170↓j
.text:0040FEFD                 mov     [esp+18Ch+lpProcName], offset asc_40FE61 ; "\\*"
.text:0040FF05                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040FF08                 call    strcat
.text:0040FF0D                 mov     eax, [esp+18Ch+var_164]
.text:0040FF11                 test    eax, eax
.text:0040FF13                 jz      loc_40FFD5
.text:0040FF19                 mov     [esp+18Ch+var_178], 0
.text:0040FF21                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040FF25                 mov     [esp+18Ch+var_17C], 0
.text:0040FF2D                 mov     [esp+18Ch+var_180], 1
.text:0040FF35                 mov     [esp+18Ch+var_184], ebp
.text:0040FF39                 mov     [esp+18Ch+lpProcName], 0
.text:0040FF41                 mov     [esp+18Ch+lpLibFileName], esi
.text:0040FF44                 call    [esp+18Ch+var_164]
.text:0040FF48                 sub     esp, 18h
.text:0040FF4B                 mov     ebx, eax
.text:0040FF4D                 cmp     eax, 0FFFFFFFFh
.text:0040FF50                 jz      short loc_40FFB8
.text:0040FF52                 lea     esi, [esi+0]
.text:0040FF59                 lea     edi, [edi+0]
.text:0040FF60
.text:0040FF60 loc_40FF60:                             ; CODE XREF: sub_40FE70+109↓j
.text:0040FF60                                         ; sub_40FE70+161↓j
.text:0040FF60                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:0040FF65                 jz      short loc_40FF68
.text:0040FF67                 inc     edi
.text:0040FF68
.text:0040FF68 loc_40FF68:                             ; CODE XREF: sub_40FE70+F5↑j
.text:0040FF68                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040FF6C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040FF6F                 call    FindNextFileA
.text:0040FF74                 sub     esp, 8
.text:0040FF77                 test    eax, eax
.text:0040FF79                 jnz     short loc_40FF60
.text:0040FF7B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040FF7E                 call    FindClose
.text:0040FF83                 sub     esp, 4
.text:0040FF86                 mov     esi, [esp+18Ch+hModule]
.text:0040FF8A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040FF8D                 call    FreeLibrary
.text:0040FF92                 sub     esp, 4
.text:0040FF95                 mov     ebx, [esp+18Ch+Str]
.text:0040FF9C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040FF9F                 call    sub_413240
.text:0040FFA4                 test    eax, eax
.text:0040FFA6                 jz      short loc_40FFAB
.text:0040FFA8                 add     edi, 2
.text:0040FFAB
.text:0040FFAB loc_40FFAB:                             ; CODE XREF: sub_40FE70+136↑j
.text:0040FFAB                 mov     eax, edi
.text:0040FFAD
.text:0040FFAD loc_40FFAD:                             ; CODE XREF: sub_40FE70+5F↑j
.text:0040FFAD                                         ; sub_40FE70+163↓j
.text:0040FFAD                 add     esp, 17Ch
.text:0040FFB3                 pop     ebx
.text:0040FFB4                 pop     esi
.text:0040FFB5                 pop     edi
.text:0040FFB6                 pop     ebp
.text:0040FFB7                 retn
.text:0040FFB8 ; ---------------------------------------------------------------------------
.text:0040FFB8
.text:0040FFB8 loc_40FFB8:                             ; CODE XREF: sub_40FE70+E0↑j
.text:0040FFB8                                         ; sub_40FE70+169↓j
.text:0040FFB8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040FFBC                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040FFBF                 call    FindFirstFileA
.text:0040FFC4                 mov     ebx, eax
.text:0040FFC6                 sub     esp, 8
.text:0040FFC9                 cmp     ebx, 0FFFFFFFFh
.text:0040FFCC                 mov     eax, 2
.text:0040FFD1                 jnz     short loc_40FF60
.text:0040FFD3                 jmp     short loc_40FFAD
.text:0040FFD5 ; ---------------------------------------------------------------------------
.text:0040FFD5
.text:0040FFD5 loc_40FFD5:                             ; CODE XREF: sub_40FE70+A3↑j
.text:0040FFD5                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040FFD9                 jmp     short loc_40FFB8
.text:0040FFDB ; ---------------------------------------------------------------------------
.text:0040FFDB
.text:0040FFDB loc_40FFDB:                             ; CODE XREF: sub_40FE70+7F↑j
.text:0040FFDB                                         ; sub_40FE70+87↑j
.text:0040FFDB                 mov     byte ptr [ebx+esi-1], 0
.text:0040FFE0                 jmp     loc_40FEFD
.text:0040FFE0 sub_40FE70      endp
.text:0040FFE0
.text:0040FFE0 ; ---------------------------------------------------------------------------
.text:0040FFE5                 align 10h
.text:0040FFF0
.text:0040FFF0 ; =============== S U B R O U T I N E =======================================
.text:0040FFF0
.text:0040FFF0
.text:0040FFF0 ; int __cdecl sub_40FFF0(HANDLE hNamedPipe, int)
.text:0040FFF0 sub_40FFF0      proc near               ; CODE XREF: sub_40E610+3157↓p
.text:0040FFF0                                         ; sub_414870+52↓j
.text:0040FFF0
.text:0040FFF0 hFile           = dword ptr -0ECh
.text:0040FFF0 lpFileInformation= dword ptr -0E8h
.text:0040FFF0 nBufferSize     = dword ptr -0E4h
.text:0040FFF0 lpBytesRead     = dword ptr -0E0h
.text:0040FFF0 lpTotalBytesAvail= dword ptr -0DCh
.text:0040FFF0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:0040FFF0 var_C4          = dword ptr -0C4h
.text:0040FFF0 var_C0          = dword ptr -0C0h
.text:0040FFF0 var_BC          = dword ptr -0BCh
.text:0040FFF0 var_B8          = dword ptr -0B8h
.text:0040FFF0 var_B4          = dword ptr -0B4h
.text:0040FFF0 var_B0          = dword ptr -0B0h
.text:0040FFF0 var_AC          = dword ptr -0ACh
.text:0040FFF0 var_A8          = dword ptr -0A8h
.text:0040FFF0 TotalBytesAvail = dword ptr -0A0h
.text:0040FFF0 var_9C          = dword ptr -9Ch
.text:0040FFF0 var_98          = dword ptr -98h
.text:0040FFF0 var_94          = dword ptr -94h
.text:0040FFF0 var_90          = dword ptr -90h
.text:0040FFF0 var_8C          = dword ptr -8Ch
.text:0040FFF0 var_88          = dword ptr -88h
.text:0040FFF0 var_84          = dword ptr -84h
.text:0040FFF0 var_80          = dword ptr -80h
.text:0040FFF0 var_7C          = dword ptr -7Ch
.text:0040FFF0 var_78          = dword ptr -78h
.text:0040FFF0 var_74          = dword ptr -74h
.text:0040FFF0 var_70          = dword ptr -70h
.text:0040FFF0 var_6C          = dword ptr -6Ch
.text:0040FFF0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:0040FFF0 hNamedPipe      = dword ptr  4
.text:0040FFF0 arg_4           = dword ptr  8
.text:0040FFF0
.text:0040FFF0                 push    ebp
.text:0040FFF1                 mov     eax, 0FFFFFFFFh
.text:0040FFF6                 push    edi
.text:0040FFF7                 push    esi
.text:0040FFF8                 push    ebx
.text:0040FFF9                 sub     esp, 0DCh
.text:0040FFFF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00410006                 mov     ebp, [esp+0ECh+arg_4]
.text:0041000D                 cmp     esi, 0FFFFFFFFh
.text:00410010                 jz      loc_410391
.text:00410016                 cld
.text:00410017                 xor     eax, eax
.text:00410019                 lea     ebx, [esp+0ECh+FileInformation]
.text:00410020                 mov     ecx, 0Dh
.text:00410025                 mov     edi, ebx
.text:00410027                 rep stosd
.text:00410029                 mov     dword ptr [ebp+18h], 1
.text:00410030                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00410033                 call    GetFileType
.text:00410038                 sub     esp, 4
.text:0041003B                 xor     edx, edx
.text:0041003D                 cmp     eax, 2
.text:00410040                 jz      loc_410470
.text:00410046                 cmp     eax, 3
.text:00410049                 jz      loc_410460
.text:0041004F
.text:0041004F loc_41004F:                             ; CODE XREF: sub_40FFF0+475↓j
.text:0041004F                                         ; sub_40FFF0+485↓j
.text:0041004F                 or      [ebp+0], edx
.text:00410052                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00410056                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00410059                 call    GetFileInformationByHandle
.text:0041005E                 sub     esp, 8
.text:00410061                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00410068                 test    ecx, ecx
.text:0041006A                 jnz     short loc_4100A0
.text:0041006C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00410073                 test    edx, edx
.text:00410075                 jnz     short loc_4100A0
.text:00410077                 mov     edx, [ebp+0]
.text:0041007A                 and     edx, 0F000h
.text:00410080                 cmp     edx, 1000h
.text:00410086                 jz      loc_4103F6
.text:0041008C
.text:0041008C loc_41008C:                             ; CODE XREF: sub_40FFF0+459↓j
.text:0041008C                                         ; sub_40FFF0+465↓j
.text:0041008C                 test    ecx, ecx
.text:0041008E                 jnz     short loc_4100A0
.text:00410090                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00410097                 test    edx, edx
.text:00410099                 jz      loc_4103D4
.text:0041009F                 nop
.text:004100A0
.text:004100A0 loc_4100A0:                             ; CODE XREF: sub_40FFF0+7A↑j
.text:004100A0                                         ; sub_40FFF0+85↑j ...
.text:004100A0                 cld
.text:004100A1                 mov     esi, ebx
.text:004100A3                 mov     dword ptr [ebp+14h], 0
.text:004100AA                 lea     edi, [esp+0ECh+var_9C]
.text:004100AE                 mov     ecx, 0Dh
.text:004100B3                 rep movsd
.text:004100B5                 xor     ebx, ebx
.text:004100B7                 xor     edi, edi
.text:004100B9                 mov     edx, [esp+0ECh+var_6C]
.text:004100C0                 mov     esi, [esp+0ECh+var_70]
.text:004100C4                 or      edx, ebx
.text:004100C6                 mov     ebx, [esp+0ECh+var_9C]
.text:004100CA                 mov     [ebp+8], edx
.text:004100CD                 or      edi, esi
.text:004100CF                 xor     edx, edx
.text:004100D1                 mov     [ebp+0Ch], edi
.text:004100D4                 test    bl, 10h
.text:004100D7                 mov     esi, [esp+0ECh+var_80]
.text:004100DB                 setz    dl
.text:004100DE                 mov     [ebp+10h], esi
.text:004100E1                 dec     edx
.text:004100E2                 and     edx, 0FFFFC000h
.text:004100E8                 add     edx, 8000h
.text:004100EE                 or      edx, 124h
.text:004100F4                 test    bl, 1
.text:004100F7                 movzx   eax, dx
.text:004100FA                 jnz     short loc_410101
.text:004100FC                 or      eax, 92h
.text:00410101
.text:00410101 loc_410101:                             ; CODE XREF: sub_40FFF0+10A↑j
.text:00410101                 or      [ebp+0], eax
.text:00410104                 xor     edx, edx
.text:00410106                 mov     ebx, [esp+0ECh+var_7C]
.text:0041010A                 mov     ecx, [esp+0ECh+var_78]
.text:0041010E                 mov     eax, edx
.text:00410110                 xor     esi, esi
.text:00410112                 mov     edx, [esp+0ECh+var_8C]
.text:00410116                 mov     edi, ebx
.text:00410118                 or      eax, edi
.text:0041011A                 mov     [esp+0ECh+var_A8], eax
.text:0041011E                 mov     ebx, ecx
.text:00410120                 mov     edi, [esp+0ECh+var_74]
.text:00410124                 or      ebx, esi
.text:00410126                 mov     esi, [esp+0ECh+var_A8]
.text:0041012A                 mov     [esp+0ECh+var_AC], ebx
.text:0041012E                 xor     ebx, ebx
.text:00410130                 mov     ecx, [esp+0ECh+var_AC]
.text:00410134                 mov     [ebp+34h], esi
.text:00410137                 mov     esi, [esp+0ECh+var_90]
.text:0041013B                 mov     [ebp+18h], edi
.text:0041013E                 xor     edi, edi
.text:00410140                 or      esi, ebx
.text:00410142                 mov     [ebp+30h], ecx
.text:00410145                 or      edi, edx
.text:00410147                 mov     edx, esi
.text:00410149                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00410151                 sub     edx, 0D53E8000h
.text:00410157                 mov     ebx, edi
.text:00410159                 sbb     ebx, 19DB1DEh
.text:0041015F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00410163                 mov     [esp+0ECh+lpBytesRead], 0
.text:0041016B                 mov     [esp+0ECh+hFile], edx
.text:0041016E                 call    sub_416B70
.text:00410173                 mov     ecx, eax
.text:00410175                 shr     eax, 1Fh
.text:00410178                 dec     eax
.text:00410179                 and     ecx, eax
.text:0041017B                 mov     [ebp+38h], ecx
.text:0041017E                 mov     [esp+0ECh+hFile], esi
.text:00410181                 mov     [esp+0ECh+lpFileInformation], edi
.text:00410185                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0041018D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00410195                 call    sub_416C90
.text:0041019A                 lea     ebx, [eax+eax*4]
.text:0041019D                 xor     ecx, ecx
.text:0041019F                 lea     esi, [ebx+ebx*4]
.text:004101A2                 shl     esi, 2
.text:004101A5                 mov     edi, esi
.text:004101A7                 shr     edi, 1Fh
.text:004101AA                 dec     edi
.text:004101AB                 and     edi, esi
.text:004101AD                 mov     [ebp+3Ch], edi
.text:004101B0                 mov     esi, [esp+0ECh+var_98]
.text:004101B4                 xor     edi, edi
.text:004101B6                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004101BE                 mov     edx, [esp+0ECh+var_94]
.text:004101C2                 mov     [esp+0ECh+lpBytesRead], 0
.text:004101CA                 or      esi, ecx
.text:004101CC                 or      edi, edx
.text:004101CE                 mov     edx, esi
.text:004101D0                 mov     ecx, edi
.text:004101D2                 sub     edx, 0D53E8000h
.text:004101D8                 sbb     ecx, 19DB1DEh
.text:004101DE                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004101E2                 mov     [esp+0ECh+hFile], edx
.text:004101E5                 call    sub_416B70
.text:004101EA                 mov     ebx, eax
.text:004101EC                 shr     eax, 1Fh
.text:004101EF                 dec     eax
.text:004101F0                 and     ebx, eax
.text:004101F2                 mov     [ebp+48h], ebx
.text:004101F5                 xor     ebx, ebx
.text:004101F7                 mov     [esp+0ECh+hFile], esi
.text:004101FA                 mov     [esp+0ECh+lpFileInformation], edi
.text:004101FE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00410206                 mov     [esp+0ECh+lpBytesRead], 0
.text:0041020E                 call    sub_416C90
.text:00410213                 lea     ecx, [eax+eax*4]
.text:00410216                 lea     esi, [ecx+ecx*4]
.text:00410219                 shl     esi, 2
.text:0041021C                 mov     edi, esi
.text:0041021E                 shr     edi, 1Fh
.text:00410221                 dec     edi
.text:00410222                 and     edi, esi
.text:00410224                 mov     [ebp+4Ch], edi
.text:00410227                 mov     esi, [esp+0ECh+var_88]
.text:0041022B                 xor     edi, edi
.text:0041022D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00410235                 mov     edx, [esp+0ECh+var_84]
.text:00410239                 mov     [esp+0ECh+lpBytesRead], 0
.text:00410241                 or      esi, ebx
.text:00410243                 or      edi, edx
.text:00410245                 mov     edx, esi
.text:00410247                 mov     ebx, edi
.text:00410249                 sub     edx, 0D53E8000h
.text:0041024F                 sbb     ebx, 19DB1DEh
.text:00410255                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00410259                 mov     [esp+0ECh+hFile], edx
.text:0041025C                 call    sub_416B70
.text:00410261                 mov     ecx, eax
.text:00410263                 shr     eax, 1Fh
.text:00410266                 dec     eax
.text:00410267                 and     ecx, eax
.text:00410269                 mov     [ebp+40h], ecx
.text:0041026C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00410270                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00410278                 mov     [esp+0ECh+lpBytesRead], 0
.text:00410280                 mov     [esp+0ECh+hFile], esi
.text:00410283                 call    sub_416C90
.text:00410288                 mov     dword ptr [ebp+50h], 200h
.text:0041028F                 lea     ebx, [eax+eax*4]
.text:00410292                 mov     edi, [esp+0ECh+var_A8]
.text:00410296                 lea     edx, [ebx+ebx*4]
.text:00410299                 mov     eax, [esp+0ECh+var_AC]
.text:0041029D                 shl     edx, 2
.text:004102A0                 mov     ecx, edx
.text:004102A2                 shr     ecx, 1Fh
.text:004102A5                 dec     ecx
.text:004102A6                 and     ecx, edx
.text:004102A8                 test    edi, edi
.text:004102AA                 mov     edx, [esp+0ECh+var_A8]
.text:004102AE                 mov     [ebp+44h], ecx
.text:004102B1                 js      loc_4103C7
.text:004102B7
.text:004102B7 loc_4102B7:                             ; CODE XREF: sub_40FFF0+3DF↓j
.text:004102B7                 mov     edi, [esp+0ECh+var_AC]
.text:004102BB                 xor     esi, esi
.text:004102BD                 mov     ecx, eax
.text:004102BF                 shrd    ecx, edx, 9
.text:004102C3                 mov     ebx, edx
.text:004102C5                 mov     eax, esi
.text:004102C7                 and     edi, 1FFh
.text:004102CD                 sar     ebx, 9
.text:004102D0                 or      eax, edi
.text:004102D2                 jz      short loc_4102DA
.text:004102D4                 add     ecx, 1
.text:004102D7                 adc     ebx, 0
.text:004102DA
.text:004102DA loc_4102DA:                             ; CODE XREF: sub_40FFF0+2E2↑j
.text:004102DA                 mov     [ebp+5Ch], ebx
.text:004102DD                 mov     esi, dword_418090
.text:004102E3                 xor     edi, edi
.text:004102E5                 mov     [ebp+58h], ecx
.text:004102E8                 mov     ebx, dword_418090
.text:004102EE                 mov     ecx, [esp+0ECh+var_A8]
.text:004102F2                 mov     edx, [esp+0ECh+var_AC]
.text:004102F6                 mov     [ebp+50h], ebx
.text:004102F9                 shr     ebx, 9
.text:004102FC                 mov     [esp+0ECh+lpBytesRead], edi
.text:00410300                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00410304                 mov     [esp+0ECh+nBufferSize], esi
.text:00410308                 mov     [esp+0ECh+hFile], edx
.text:0041030B                 call    sub_416B70
.text:00410310                 mov     [esp+0ECh+lpBytesRead], edi
.text:00410314                 mov     ecx, [esp+0ECh+var_AC]
.text:00410318                 mov     edi, [esp+0ECh+var_A8]
.text:0041031C                 mov     [esp+0ECh+var_BC], ebx
.text:00410320                 mov     [esp+0ECh+var_B4], eax
.text:00410324                 mov     [esp+0ECh+var_B0], edx
.text:00410328                 mov     [esp+0ECh+var_B8], 0
.text:00410330                 mov     [esp+0ECh+nBufferSize], esi
.text:00410334                 mov     [esp+0ECh+hFile], ecx
.text:00410337                 mov     [esp+0ECh+lpFileInformation], edi
.text:0041033B                 call    sub_416C90
.text:00410340                 mov     ebx, edx
.text:00410342                 or      ebx, eax
.text:00410344                 jz      short loc_4103A0
.text:00410346                 mov     edi, [esp+0ECh+var_B4]
.text:0041034A                 mov     esi, [esp+0ECh+var_B0]
.text:0041034E                 mov     eax, [esp+0ECh+var_BC]
.text:00410352                 mov     [esp+0ECh+var_C4], edi
.text:00410356                 mov     ecx, [esp+0ECh+var_B8]
.text:0041035A                 add     [esp+0ECh+var_C4], 1
.text:0041035F                 mov     [esp+0ECh+var_C0], esi
.text:00410363                 adc     [esp+0ECh+var_C0], 0
.text:00410368                 mul     [esp+0ECh+var_C4]
.text:0041036C                 mov     edi, [esp+0ECh+var_C0]
.text:00410370                 mov     ebx, edx
.text:00410372                 mov     edx, [esp+0ECh+var_C4]
.text:00410376                 mov     esi, eax
.text:00410378                 mov     eax, ebx
.text:0041037A                 imul    ecx, edx
.text:0041037D                 mov     edx, [esp+0ECh+var_BC]
.text:00410381                 imul    edx, edi
.text:00410384                 add     eax, ecx
.text:00410386                 lea     edi, [edx+eax]
.text:00410389
.text:00410389 loc_410389:                             ; CODE XREF: sub_40FFF0+3D5↓j
.text:00410389                 mov     [ebp+58h], esi
.text:0041038C                 xor     eax, eax
.text:0041038E                 mov     [ebp+5Ch], edi
.text:00410391
.text:00410391 loc_410391:                             ; CODE XREF: sub_40FFF0+20↑j
.text:00410391                 add     esp, 0DCh
.text:00410397                 pop     ebx
.text:00410398                 pop     esi
.text:00410399                 pop     edi
.text:0041039A                 pop     ebp
.text:0041039B                 retn
.text:0041039B ; ---------------------------------------------------------------------------
.text:0041039C                 align 10h
.text:004103A0
.text:004103A0 loc_4103A0:                             ; CODE XREF: sub_40FFF0+354↑j
.text:004103A0                 mov     eax, [esp+0ECh+var_B4]
.text:004103A4                 mov     edi, [esp+0ECh+var_B8]
.text:004103A8                 mov     ebx, [esp+0ECh+var_B4]
.text:004103AC                 mul     [esp+0ECh+var_BC]
.text:004103B0                 mov     ecx, [esp+0ECh+var_BC]
.text:004103B4                 imul    ebx, edi
.text:004103B7                 mov     esi, eax
.text:004103B9                 mov     eax, [esp+0ECh+var_B0]
.text:004103BD                 add     edx, ebx
.text:004103BF                 imul    ecx, eax
.text:004103C2                 lea     edi, [ecx+edx]
.text:004103C5                 jmp     short loc_410389
.text:004103C7 ; ---------------------------------------------------------------------------
.text:004103C7
.text:004103C7 loc_4103C7:                             ; CODE XREF: sub_40FFF0+2C1↑j
.text:004103C7                 add     eax, 1FFh
.text:004103CC                 adc     edx, 0
.text:004103CF                 jmp     loc_4102B7
.text:004103D4 ; ---------------------------------------------------------------------------
.text:004103D4
.text:004103D4 loc_4103D4:                             ; CODE XREF: sub_40FFF0+A9↑j
.text:004103D4                 mov     [esp+0ECh+hFile], esi ; hFile
.text:004103D7                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:004103DE                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:004103E2                 call    GetFileSize
.text:004103E7                 sub     esp, 8
.text:004103EA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:004103F1                 jmp     loc_4100A0
.text:004103F6 ; ---------------------------------------------------------------------------
.text:004103F6
.text:004103F6 loc_4103F6:                             ; CODE XREF: sub_40FFF0+96↑j
.text:004103F6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:004103FE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:00410402                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:0041040A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:0041040E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00410416                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0041041E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00410426                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00410429                 call    PeekNamedPipe
.text:0041042E                 sub     esp, 18h
.text:00410431                 test    eax, eax
.text:00410433                 jz      short loc_41044E
.text:00410435                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00410439                 xor     eax, eax
.text:0041043B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00410442                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00410449                 jmp     loc_41008C
.text:0041044E ; ---------------------------------------------------------------------------
.text:0041044E
.text:0041044E loc_41044E:                             ; CODE XREF: sub_40FFF0+443↑j
.text:0041044E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00410455                 jmp     loc_41008C
.text:00410455 ; ---------------------------------------------------------------------------
.text:0041045A                 align 10h
.text:00410460
.text:00410460 loc_410460:                             ; CODE XREF: sub_40FFF0+59↑j
.text:00410460                 mov     edx, 1000h
.text:00410465                 jmp     loc_41004F
.text:00410465 ; ---------------------------------------------------------------------------
.text:0041046A                 align 10h
.text:00410470
.text:00410470 loc_410470:                             ; CODE XREF: sub_40FFF0+50↑j
.text:00410470                 mov     edx, 2000h
.text:00410475                 jmp     loc_41004F
.text:00410475 sub_40FFF0      endp
.text:00410475
.text:00410475 ; ---------------------------------------------------------------------------
.text:0041047A aLnk            db '.lnk',0             ; DATA XREF: sub_4104C0+E0↓o
.text:0041047A                                         ; .text:00410B6A↓o ...
.text:0041047F ; const CHAR aKernel32[]
.text:0041047F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_4104C0+12D↓o
.text:0041047F                                         ; .text:0041121B↓o
.text:00410488 ; const CHAR aGetcompressedf[]
.text:00410488 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00410488                                         ; DATA XREF: sub_4104C0+13E↓o
.text:00410488                                         ; .text:0041122C↓o
.text:0041049F ; const CHAR aGetbinarytypea[]
.text:0041049F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_4104C0+333↓o
.text:0041049F                                         ; .text:00410BC6↓o ...
.text:004104AE ; const char aPathext[]
.text:004104AE aPathext        db 'PATHEXT',0          ; DATA XREF: sub_4104C0:loc_4108A7↓o
.text:004104AE                                         ; .text:loc_410C70↓o ...
.text:004104B6                 align 10h
.text:004104C0
.text:004104C0 ; =============== S U B R O U T I N E =======================================
.text:004104C0
.text:004104C0
.text:004104C0 ; int __cdecl sub_4104C0(char *String1, int)
.text:004104C0 sub_4104C0      proc near               ; CODE XREF: sub_4112A0+3CD↓p
.text:004104C0                                         ; sub_40E610+3175↓p
.text:004104C0
.text:004104C0 Str             = dword ptr -6Ch
.text:004104C0 lpProcName      = dword ptr -68h
.text:004104C0 var_64          = dword ptr -64h
.text:004104C0 var_60          = dword ptr -60h
.text:004104C0 var_5C          = dword ptr -5Ch
.text:004104C0 var_4C          = dword ptr -4Ch
.text:004104C0 var_48          = dword ptr -48h
.text:004104C0 var_44          = dword ptr -44h
.text:004104C0 var_40          = dword ptr -40h
.text:004104C0 var_3C          = dword ptr -3Ch
.text:004104C0 var_38          = dword ptr -38h
.text:004104C0 lpRootPathName  = dword ptr -30h
.text:004104C0 var_2C          = byte ptr -2Ch
.text:004104C0 var_28          = dword ptr -28h
.text:004104C0 var_24          = dword ptr -24h
.text:004104C0 var_20          = dword ptr -20h
.text:004104C0 var_1C          = dword ptr -1Ch
.text:004104C0 var_18          = byte ptr -18h
.text:004104C0 String1         = dword ptr  4
.text:004104C0 arg_4           = dword ptr  8
.text:004104C0
.text:004104C0                 push    ebp
.text:004104C1                 push    edi
.text:004104C2                 push    esi
.text:004104C3                 push    ebx
.text:004104C4                 sub     esp, 5Ch
.text:004104C7                 mov     edx, [esp+6Ch+String1]
.text:004104CB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004104CE                 call    sub_412E70
.text:004104D3                 mov     [esp+6Ch+Str], eax
.text:004104D6                 call    sub_40EAB0
.text:004104DB                 mov     [esp+6Ch+lpRootPathName], eax
.text:004104DF                 test    eax, eax
.text:004104E1                 jz      loc_410713
.text:004104E7                 mov     [esp+6Ch+Str], eax ; Str
.text:004104EA                 call    strlen
.text:004104EF                 mov     edx, [esp+6Ch+arg_4]
.text:004104F3                 mov     ebx, eax
.text:004104F5                 mov     esi, [edx+0Ch]
.text:004104F8                 mov     edi, [edx+8]
.text:004104FB                 mov     eax, esi
.text:004104FD                 or      eax, edi
.text:004104FF                 jz      loc_410920
.text:00410505                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00410509                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0041050C                 call    GetDriveTypeA
.text:00410511                 sub     esp, 4
.text:00410514                 cmp     eax, 4
.text:00410517                 jz      loc_410920
.text:0041051D
.text:0041051D loc_41051D:                             ; CODE XREF: sub_4104C0+48A↓j
.text:0041051D                                         ; sub_4104C0+4B2↓j
.text:0041051D                 mov     edx, [esp+6Ch+arg_4]
.text:00410521                 mov     esi, [edx+14h]
.text:00410524                 mov     edi, [edx+10h]
.text:00410527                 mov     ecx, esi
.text:00410529                 or      ecx, edi
.text:0041052B                 jnz     short loc_410555
.text:0041052D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00410531                 xor     esi, esi
.text:00410533                 xor     edi, edi
.text:00410535                 test    ebp, ebp
.text:00410537                 jz      short loc_410547
.text:00410539                 movzx   ebx, byte ptr [ebp+0]
.text:0041053D                 test    bl, bl
.text:0041053F                 mov     cl, bl
.text:00410541                 jnz     loc_4108D1
.text:00410547
.text:00410547 loc_410547:                             ; CODE XREF: sub_4104C0+77↑j
.text:00410547                 xor     eax, eax
.text:00410549                 xor     edx, edx
.text:0041054B
.text:0041054B loc_41054B:                             ; CODE XREF: sub_4104C0+458↓j
.text:0041054B                 mov     ebp, [esp+6Ch+arg_4]
.text:0041054F                 mov     [ebp+10h], eax
.text:00410552                 mov     [ebp+14h], edx
.text:00410555
.text:00410555 loc_410555:                             ; CODE XREF: sub_4104C0+6B↑j
.text:00410555                 mov     edi, [esp+6Ch+String1]
.text:00410559                 xor     ebx, ebx
.text:0041055B                 test    edi, edi
.text:0041055D                 jz      loc_4107D3
.text:00410563                 mov     esi, [esp+6Ch+String1]
.text:00410567                 cmp     byte ptr [esi], 0
.text:0041056A                 jnz     loc_4107E0
.text:00410570
.text:00410570 loc_410570:                             ; CODE XREF: sub_4104C0+38C↓j
.text:00410570                                         ; sub_4104C0+397↓j
.text:00410570                 mov     ebp, [esp+6Ch+String1]
.text:00410574                 test    ebp, ebp
.text:00410576                 jz      loc_4107D3
.text:0041057C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00410584                 mov     edi, [esp+6Ch+String1]
.text:00410588                 mov     [esp+6Ch+Str], edi ; Str
.text:0041058B                 call    strrchr
.text:00410590                 test    eax, eax
.text:00410592                 jz      loc_4107D3
.text:00410598                 cld
.text:00410599                 mov     ecx, 5
.text:0041059E                 mov     esi, eax
.text:004105A0                 mov     edi, offset aLnk ; ".lnk"
.text:004105A5                 repe cmpsb
.text:004105A7                 setz    cl
.text:004105AA                 movzx   eax, cl
.text:004105AD                 lea     esi, [esi+0]
.text:004105B0
.text:004105B0 loc_4105B0:                             ; CODE XREF: sub_4104C0+315↓j
.text:004105B0                 test    eax, eax
.text:004105B2                 jz      short loc_4105BA
.text:004105B4                 or      ebx, 0A000h
.text:004105BA
.text:004105BA loc_4105BA:                             ; CODE XREF: sub_4104C0+F2↑j
.text:004105BA                 mov     esi, [esp+6Ch+arg_4]
.text:004105BE                 xor     ecx, ecx
.text:004105C0                 mov     edi, ds:dword_419380
.text:004105C6                 or      [esi], ebx
.text:004105C8                 mov     ebx, [esi+14h]
.text:004105CB                 mov     ebp, [esi+10h]
.text:004105CE                 mov     eax, ebx
.text:004105D0                 xor     eax, ecx
.text:004105D2                 xor     ebp, edi
.text:004105D4                 or      eax, ebp
.text:004105D6                 jnz     loc_410760
.text:004105DC
.text:004105DC loc_4105DC:                             ; CODE XREF: sub_4104C0+30E↓j
.text:004105DC                 mov     ecx, dword_418090
.text:004105E2                 xor     esi, esi
.text:004105E4                 xor     edi, edi
.text:004105E6                 mov     edx, [esp+6Ch+arg_4]
.text:004105EA                 mov     [edx+50h], ecx
.text:004105ED                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:004105F4                 call    LoadLibraryA
.text:004105F9                 sub     esp, 4
.text:004105FC                 mov     ebp, eax
.text:004105FE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00410606                 mov     [esp+6Ch+Str], eax ; hModule
.text:00410609                 call    GetProcAddress
.text:0041060E                 sub     esp, 8
.text:00410611                 test    eax, eax
.text:00410613                 jz      short loc_410648
.text:00410615                 mov     ebx, [esp+6Ch+String1]
.text:00410619                 lea     esi, [esp+6Ch+var_2C]
.text:0041061D                 mov     [esp+6Ch+lpProcName], esi
.text:00410621                 mov     [esp+6Ch+Str], ebx
.text:00410624                 call    eax
.text:00410626                 sub     esp, 8
.text:00410629                 mov     ebx, eax
.text:0041062B                 cmp     eax, 0FFFFFFFFh
.text:0041062E                 jz      loc_410749
.text:00410634
.text:00410634 loc_410634:                             ; CODE XREF: sub_4104C0+29A↓j
.text:00410634                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00410638                 mov     ecx, ebx
.text:0041063A                 xor     edi, edi
.text:0041063C                 xor     ebx, ebx
.text:0041063E                 mov     edx, esi
.text:00410640                 mov     esi, ecx
.text:00410642                 or      esi, edi
.text:00410644                 mov     edi, ebx
.text:00410646                 or      edi, edx
.text:00410648
.text:00410648 loc_410648:                             ; CODE XREF: sub_4104C0+153↑j
.text:00410648                                         ; sub_4104C0+294↓j
.text:00410648                 test    ebp, ebp
.text:0041064A                 jz      short loc_410657
.text:0041064C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0041064F                 call    FreeLibrary
.text:00410654                 sub     esp, 4
.text:00410657
.text:00410657 loc_410657:                             ; CODE XREF: sub_4104C0+18A↑j
.text:00410657                 mov     ebp, edi
.text:00410659                 mov     edx, ebp
.text:0041065B                 mov     edi, esi
.text:0041065D                 or      edx, esi
.text:0041065F                 jnz     short loc_41066B
.text:00410661                 mov     eax, [esp+6Ch+arg_4]
.text:00410665                 mov     edi, [eax+30h]
.text:00410668                 mov     ebp, [eax+34h]
.text:0041066B
.text:0041066B loc_41066B:                             ; CODE XREF: sub_4104C0+19F↑j
.text:0041066B                 mov     [esp+6Ch+lpProcName], ebp
.text:0041066F                 mov     ebx, dword_418090
.text:00410675                 xor     esi, esi
.text:00410677                 mov     [esp+6Ch+var_60], esi
.text:0041067B                 mov     [esp+6Ch+Str], edi
.text:0041067E                 mov     [esp+6Ch+var_64], ebx
.text:00410682                 call    sub_416B70
.text:00410687                 mov     [esp+6Ch+var_3C], eax
.text:0041068B                 mov     ecx, dword_418090
.text:00410691                 mov     [esp+6Ch+lpProcName], ebp
.text:00410695                 mov     [esp+6Ch+var_38], edx
.text:00410699                 shr     ecx, 9
.text:0041069C                 mov     [esp+6Ch+var_44], ecx
.text:004106A0                 mov     [esp+6Ch+var_40], 0
.text:004106A8                 mov     [esp+6Ch+var_64], ebx
.text:004106AC                 mov     [esp+6Ch+var_60], esi
.text:004106B0                 mov     [esp+6Ch+Str], edi
.text:004106B3                 call    sub_416C90
.text:004106B8                 mov     ebp, edx
.text:004106BA                 or      ebp, eax
.text:004106BC                 jz      short loc_410720
.text:004106BE                 mov     ebp, [esp+6Ch+var_3C]
.text:004106C2                 mov     esi, [esp+6Ch+var_38]
.text:004106C6                 mov     eax, [esp+6Ch+var_44]
.text:004106CA                 mov     [esp+6Ch+var_4C], ebp
.text:004106CE                 mov     ecx, [esp+6Ch+var_40]
.text:004106D2                 mov     ebx, [esp+6Ch+var_44]
.text:004106D6                 add     [esp+6Ch+var_4C], 1
.text:004106DB                 mov     [esp+6Ch+var_48], esi
.text:004106DF                 mov     edi, [esp+6Ch+var_4C]
.text:004106E3                 adc     [esp+6Ch+var_48], 0
.text:004106E8                 mul     [esp+6Ch+var_4C]
.text:004106EC                 imul    ecx, edi
.text:004106EF                 mov     esi, eax
.text:004106F1                 mov     eax, [esp+6Ch+var_48]
.text:004106F5                 add     edx, ecx
.text:004106F7                 imul    ebx, eax
.text:004106FA                 lea     edi, [ebx+edx]
.text:004106FD
.text:004106FD loc_4106FD:                             ; CODE XREF: sub_4104C0+287↓j
.text:004106FD                 mov     ebx, [esp+6Ch+arg_4]
.text:00410701                 mov     [ebx+58h], esi
.text:00410704                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00410708                 mov     [ebx+5Ch], edi
.text:0041070B                 mov     [esp+6Ch+Str], esi ; Block
.text:0041070E                 call    free
.text:00410713
.text:00410713 loc_410713:                             ; CODE XREF: sub_4104C0+21↑j
.text:00410713                 add     esp, 5Ch
.text:00410716                 xor     eax, eax
.text:00410718                 pop     ebx
.text:00410719                 pop     esi
.text:0041071A                 pop     edi
.text:0041071B                 pop     ebp
.text:0041071C                 retn
.text:0041071C ; ---------------------------------------------------------------------------
.text:0041071D                 align 10h
.text:00410720
.text:00410720 loc_410720:                             ; CODE XREF: sub_4104C0+1FC↑j
.text:00410720                 mov     eax, [esp+6Ch+var_3C]
.text:00410724                 mov     edi, [esp+6Ch+var_40]
.text:00410728                 mov     ecx, [esp+6Ch+var_3C]
.text:0041072C                 mul     [esp+6Ch+var_44]
.text:00410730                 mov     ebx, [esp+6Ch+var_44]
.text:00410734                 imul    ecx, edi
.text:00410737                 mov     ebp, edx
.text:00410739                 mov     esi, eax
.text:0041073B                 mov     edx, [esp+6Ch+var_38]
.text:0041073F                 add     ebp, ecx
.text:00410741                 imul    ebx, edx
.text:00410744                 lea     edi, [ebx+ebp]
.text:00410747                 jmp     short loc_4106FD
.text:00410749 ; ---------------------------------------------------------------------------
.text:00410749
.text:00410749 loc_410749:                             ; CODE XREF: sub_4104C0+16E↑j
.text:00410749                 call    GetLastError
.text:0041074E                 xor     esi, esi
.text:00410750                 xor     edi, edi
.text:00410752                 test    eax, eax
.text:00410754                 jnz     loc_410648
.text:0041075A                 jmp     loc_410634
.text:0041075A ; ---------------------------------------------------------------------------
.text:0041075F                 align 10h
.text:00410760
.text:00410760 loc_410760:                             ; CODE XREF: sub_4104C0+116↑j
.text:00410760                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00410764                 lea     ecx, [esp+6Ch+var_20]
.text:00410768                 lea     ebx, [esp+6Ch+var_1C]
.text:0041076C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00410770                 lea     edi, [esp+6Ch+var_24]
.text:00410774                 lea     ebp, [esp+6Ch+var_28]
.text:00410778                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0041077C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00410780                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00410784                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00410787                 call    sub_413890
.text:0041078C                 test    eax, eax
.text:0041078E                 jnz     short loc_4107B0
.text:00410790                 mov     [esp+6Ch+var_28], 1
.text:00410798                 mov     [esp+6Ch+var_24], 200h
.text:004107A0                 mov     [esp+6Ch+var_20], 0
.text:004107A8                 mov     [esp+6Ch+var_1C], 0
.text:004107B0
.text:004107B0 loc_4107B0:                             ; CODE XREF: sub_4104C0+2CE↑j
.text:004107B0                 mov     ebp, [esp+6Ch+var_24]
.text:004107B4                 mov     edi, [esp+6Ch+var_28]
.text:004107B8                 mov     eax, [esp+6Ch+arg_4]
.text:004107BC                 imul    ebp, edi
.text:004107BF                 mov     esi, [eax+10h]
.text:004107C2                 mov     dword_418090, ebp
.text:004107C8                 mov     ds:dword_419380, esi
.text:004107CE                 jmp     loc_4105DC
.text:004107D3 ; ---------------------------------------------------------------------------
.text:004107D3
.text:004107D3 loc_4107D3:                             ; CODE XREF: sub_4104C0+9D↑j
.text:004107D3                                         ; sub_4104C0+B6↑j ...
.text:004107D3                 xor     eax, eax
.text:004107D5                 jmp     loc_4105B0
.text:004107D5 ; ---------------------------------------------------------------------------
.text:004107DA                 align 10h
.text:004107E0
.text:004107E0 loc_4107E0:                             ; CODE XREF: sub_4104C0+AA↑j
.text:004107E0                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:004107E7                 xor     ebp, ebp
.text:004107E9                 call    GetModuleHandleA
.text:004107EE                 sub     esp, 4
.text:004107F1                 mov     edi, eax
.text:004107F3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004107FB                 mov     [esp+6Ch+Str], eax ; hModule
.text:004107FE                 call    GetProcAddress
.text:00410803                 sub     esp, 8
.text:00410806                 mov     edx, eax
.text:00410808                 test    eax, eax
.text:0041080A                 jz      short loc_410824
.text:0041080C                 mov     eax, [esp+6Ch+String1]
.text:00410810                 lea     ecx, [esp+6Ch+var_18]
.text:00410814                 mov     [esp+6Ch+lpProcName], ecx
.text:00410818                 mov     [esp+6Ch+Str], eax
.text:0041081B                 call    edx
.text:0041081D                 sub     esp, 8
.text:00410820                 test    eax, eax
.text:00410822                 jnz     short loc_410888
.text:00410824
.text:00410824 loc_410824:                             ; CODE XREF: sub_4104C0+34A↑j
.text:00410824                 mov     edx, ds:Str
.text:0041082A                 test    edx, edx
.text:0041082C                 jz      short loc_4108A7
.text:0041082E
.text:0041082E loc_41082E:                             ; CODE XREF: sub_4104C0+3FA↓j
.text:0041082E                                         ; sub_4104C0+40C↓j
.text:0041082E                 mov     eax, [esp+6Ch+String1]
.text:00410832                 test    eax, eax
.text:00410834                 jz      short loc_41083F
.text:00410836                 mov     esi, [esp+6Ch+String1]
.text:0041083A                 cmp     byte ptr [esi], 0
.text:0041083D                 jnz     short loc_41085C
.text:0041083F
.text:0041083F loc_41083F:                             ; CODE XREF: sub_4104C0+374↑j
.text:0041083F                                         ; sub_4104C0+3B0↓j ...
.text:0041083F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00410842                 call    FreeLibrary
.text:00410847                 sub     esp, 4
.text:0041084A                 test    ebp, ebp
.text:0041084C                 jz      loc_410570
.text:00410852                 mov     ebx, 49h ; 'I'
.text:00410857                 jmp     loc_410570
.text:0041085C ; ---------------------------------------------------------------------------
.text:0041085C
.text:0041085C loc_41085C:                             ; CODE XREF: sub_4104C0+37D↑j
.text:0041085C                 mov     [esp+6Ch+Str], esi ; Str
.text:0041085F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00410867                 call    strrchr
.text:0041086C                 test    eax, eax
.text:0041086E                 mov     esi, eax
.text:00410870                 jz      short loc_41083F
.text:00410872                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00410876                 mov     ecx, ds:Str
.text:0041087C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0041087F                 call    strstr
.text:00410884                 test    eax, eax
.text:00410886                 jz      short loc_41088F
.text:00410888
.text:00410888 loc_410888:                             ; CODE XREF: sub_4104C0+362↑j
.text:00410888                                         ; sub_4104C0+3E5↓j
.text:00410888                 mov     ebp, 1
.text:0041088D                 jmp     short loc_41083F
.text:0041088F ; ---------------------------------------------------------------------------
.text:0041088F
.text:0041088F loc_41088F:                             ; CODE XREF: sub_4104C0+3C6↑j
.text:0041088F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00410893                 mov     edx, off_418094 ; ".com;.exe;.bat;.cmd"
.text:00410899                 mov     [esp+6Ch+Str], edx ; Str
.text:0041089C                 call    strstr
.text:004108A1                 test    eax, eax
.text:004108A3                 jz      short loc_41083F
.text:004108A5                 jmp     short loc_410888
.text:004108A7 ; ---------------------------------------------------------------------------
.text:004108A7
.text:004108A7 loc_4108A7:                             ; CODE XREF: sub_4104C0+36C↑j
.text:004108A7                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:004108AE                 call    getenv
.text:004108B3                 mov     ds:Str, eax
.text:004108B8                 test    eax, eax
.text:004108BA                 jnz     loc_41082E
.text:004108C0                 mov     esi, off_418094 ; ".com;.exe;.bat;.cmd"
.text:004108C6                 mov     ds:Str, esi
.text:004108CC                 jmp     loc_41082E
.text:004108D1 ; ---------------------------------------------------------------------------
.text:004108D1
.text:004108D1 loc_4108D1:                             ; CODE XREF: sub_4104C0+81↑j
.text:004108D1                                         ; sub_4104C0+452↓j
.text:004108D1                 shld    edi, esi, 8
.text:004108D5                 movsx   eax, cl
.text:004108D8                 shl     esi, 8
.text:004108DB                 cdq
.text:004108DC                 add     esi, eax
.text:004108DE                 adc     edi, edx
.text:004108E0                 mov     edx, edi
.text:004108E2                 xor     ebx, ebx
.text:004108E4                 and     edx, 0FF000000h
.text:004108EA                 mov     eax, edx
.text:004108EC                 or      eax, ebx
.text:004108EE                 jz      short loc_410909
.text:004108F0                 mov     ecx, edx
.text:004108F2                 xor     eax, eax
.text:004108F4                 shr     ecx, 10h
.text:004108F7                 mov     edx, esi
.text:004108F9                 xor     edx, ecx
.text:004108FB                 mov     ecx, edi
.text:004108FD                 xor     ecx, eax
.text:004108FF                 mov     esi, edx
.text:00410901                 mov     edi, ecx
.text:00410903                 and     edi, 0FFFFFFh
.text:00410909
.text:00410909 loc_410909:                             ; CODE XREF: sub_4104C0+42E↑j
.text:00410909                 inc     ebp
.text:0041090A                 movzx   ebx, byte ptr [ebp+0]
.text:0041090E                 test    bl, bl
.text:00410910                 mov     cl, bl
.text:00410912                 jnz     short loc_4108D1
.text:00410914                 mov     eax, esi
.text:00410916                 mov     edx, edi
.text:00410918                 jmp     loc_41054B
.text:00410918 ; ---------------------------------------------------------------------------
.text:0041091D                 align 10h
.text:00410920
.text:00410920 loc_410920:                             ; CODE XREF: sub_4104C0+3F↑j
.text:00410920                                         ; sub_4104C0+57↑j
.text:00410920                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00410924                 mov     ebp, [esp+6Ch+String1]
.text:00410928                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0041092C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0041092F                 call    _stricmp
.text:00410934                 test    eax, eax
.text:00410936                 jnz     short loc_410950
.text:00410938                 mov     ebx, [esp+6Ch+arg_4]
.text:0041093C                 mov     dword ptr [ebx+8], 5
.text:00410943                 mov     dword ptr [ebx+0Ch], 50000h
.text:0041094A                 jmp     loc_41051D
.text:0041094A ; ---------------------------------------------------------------------------
.text:0041094F                 align 10h
.text:00410950
.text:00410950 loc_410950:                             ; CODE XREF: sub_4104C0+476↑j
.text:00410950                 mov     ebp, [esp+6Ch+String1]
.text:00410954                 xor     esi, esi
.text:00410956                 xor     edi, edi
.text:00410958                 add     ebp, ebx
.text:0041095A                 jz      short loc_410964
.text:0041095C                 movzx   ecx, byte ptr [ebp+0]
.text:00410960                 test    cl, cl
.text:00410962                 jnz     short loc_410977
.text:00410964
.text:00410964 loc_410964:                             ; CODE XREF: sub_4104C0+49A↑j
.text:00410964                 xor     eax, eax
.text:00410966                 xor     edx, edx
.text:00410968
.text:00410968 loc_410968:                             ; CODE XREF: sub_4104C0+4FE↓j
.text:00410968                 mov     ebp, [esp+6Ch+arg_4]
.text:0041096C                 mov     [ebp+8], eax
.text:0041096F                 mov     [ebp+0Ch], edx
.text:00410972                 jmp     loc_41051D
.text:00410977 ; ---------------------------------------------------------------------------
.text:00410977
.text:00410977 loc_410977:                             ; CODE XREF: sub_4104C0+4A2↑j
.text:00410977                                         ; sub_4104C0+4F8↓j
.text:00410977                 shld    edi, esi, 8
.text:0041097B                 movsx   eax, cl
.text:0041097E                 shl     esi, 8
.text:00410981                 cdq
.text:00410982                 add     esi, eax
.text:00410984                 adc     edi, edx
.text:00410986                 mov     edx, edi
.text:00410988                 xor     ebx, ebx
.text:0041098A                 and     edx, 0FF000000h
.text:00410990                 mov     eax, edx
.text:00410992                 or      eax, ebx
.text:00410994                 jz      short loc_4109AF
.text:00410996                 mov     ecx, edx
.text:00410998                 xor     eax, eax
.text:0041099A                 shr     ecx, 10h
.text:0041099D                 mov     edx, esi
.text:0041099F                 xor     edx, ecx
.text:004109A1                 mov     ecx, edi
.text:004109A3                 xor     ecx, eax
.text:004109A5                 mov     esi, edx
.text:004109A7                 mov     edi, ecx
.text:004109A9                 and     edi, 0FFFFFFh
.text:004109AF
.text:004109AF loc_4109AF:                             ; CODE XREF: sub_4104C0+4D4↑j
.text:004109AF                 inc     ebp
.text:004109B0                 movzx   ebx, byte ptr [ebp+0]
.text:004109B4                 test    bl, bl
.text:004109B6                 mov     cl, bl
.text:004109B8                 jnz     short loc_410977
.text:004109BA                 mov     eax, esi
.text:004109BC                 mov     edx, edi
.text:004109BE                 jmp     short loc_410968
.text:004109BE sub_4104C0      endp
.text:004109BE
.text:004109C0
.text:004109C0 ; =============== S U B R O U T I N E =======================================
.text:004109C0
.text:004109C0
.text:004109C0 ; int __cdecl sub_4109C0(LPCSTR)
.text:004109C0 sub_4109C0      proc near               ; CODE XREF: sub_412F90+CA↓p
.text:004109C0
.text:004109C0 lpRootPathName  = dword ptr -83Ch
.text:004109C0 lpVolumeNameBuffer= dword ptr -838h
.text:004109C0 nVolumeNameSize = dword ptr -834h
.text:004109C0 lpVolumeSerialNumber= dword ptr -830h
.text:004109C0 lpMaximumComponentLength= dword ptr -82Ch
.text:004109C0 lpFileSystemFlags= dword ptr -828h
.text:004109C0 lpFileSystemNameBuffer= dword ptr -824h
.text:004109C0 nFileSystemNameSize= dword ptr -820h
.text:004109C0 VolumeSerialNumber= dword ptr -818h
.text:004109C0 MaximumComponentLength= dword ptr -814h
.text:004109C0 FileSystemFlags = dword ptr -810h
.text:004109C0 FileSystemNameBuffer= byte ptr -80Ch
.text:004109C0 VolumeNameBuffer= byte ptr -40Ch
.text:004109C0 var_4           = dword ptr -4
.text:004109C0 arg_0           = dword ptr  4
.text:004109C0
.text:004109C0                 sub     esp, 83Ch
.text:004109C6                 mov     [esp+83Ch+var_4], ebx
.text:004109CD                 mov     ebx, [esp+83Ch+arg_0]
.text:004109D4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:004109D7                 call    sub_412E70
.text:004109DC                 mov     [esp+83Ch+lpRootPathName], eax
.text:004109DF                 call    sub_40EAB0
.text:004109E4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:004109E7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:004109EB                 mov     ebx, eax
.text:004109ED                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:004109F1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:004109F5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:004109F9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:004109FD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00410A01                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00410A05                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:00410A0C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00410A10                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00410A14                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00410A1C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00410A24                 call    GetVolumeInformationA
.text:00410A29                 sub     esp, 20h
.text:00410A2C                 test    eax, eax
.text:00410A2E                 setz    cl
.text:00410A31                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00410A34                 movzx   edx, cl
.text:00410A37                 dec     edx
.text:00410A38                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:00410A3C                 call    free
.text:00410A41                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00410A45                 mov     ebx, [esp+83Ch+var_4]
.text:00410A4C                 add     esp, 83Ch
.text:00410A52                 retn
.text:00410A52 sub_4109C0      endp
.text:00410A52
.text:00410A52 ; ---------------------------------------------------------------------------
.text:00410A53                 align 10h
.text:00410A60                 push    ebp
.text:00410A61                 push    edi
.text:00410A62                 xor     edi, edi
.text:00410A64                 push    esi
.text:00410A65                 xor     esi, esi
.text:00410A67                 push    ebx
.text:00410A68                 mov     ebp, [esp+14h]
.text:00410A6C                 test    ebp, ebp
.text:00410A6E                 jz      short loc_410A78
.text:00410A70                 movzx   ecx, byte ptr [ebp+0]
.text:00410A74                 test    cl, cl
.text:00410A76                 jnz     short loc_410A81
.text:00410A78
.text:00410A78 loc_410A78:                             ; CODE XREF: .text:00410A6E↑j
.text:00410A78                 xor     eax, eax
.text:00410A7A                 xor     edx, edx
.text:00410A7C
.text:00410A7C loc_410A7C:                             ; CODE XREF: .text:00410AC8↓j
.text:00410A7C                 pop     ebx
.text:00410A7D                 pop     esi
.text:00410A7E                 pop     edi
.text:00410A7F                 pop     ebp
.text:00410A80                 retn
.text:00410A81 ; ---------------------------------------------------------------------------
.text:00410A81
.text:00410A81 loc_410A81:                             ; CODE XREF: .text:00410A76↑j
.text:00410A81                                         ; .text:00410AC2↓j
.text:00410A81                 shld    edi, esi, 8
.text:00410A85                 movsx   eax, cl
.text:00410A88                 shl     esi, 8
.text:00410A8B                 cdq
.text:00410A8C                 add     esi, eax
.text:00410A8E                 adc     edi, edx
.text:00410A90                 mov     edx, edi
.text:00410A92                 xor     ebx, ebx
.text:00410A94                 and     edx, 0FF000000h
.text:00410A9A                 mov     eax, edx
.text:00410A9C                 or      eax, ebx
.text:00410A9E                 jz      short loc_410AB9
.text:00410AA0                 mov     ecx, edx
.text:00410AA2                 xor     eax, eax
.text:00410AA4                 shr     ecx, 10h
.text:00410AA7                 mov     edx, esi
.text:00410AA9                 xor     edx, ecx
.text:00410AAB                 mov     ecx, edi
.text:00410AAD                 xor     ecx, eax
.text:00410AAF                 mov     esi, edx
.text:00410AB1                 mov     edi, ecx
.text:00410AB3                 and     edi, 0FFFFFFh
.text:00410AB9
.text:00410AB9 loc_410AB9:                             ; CODE XREF: .text:00410A9E↑j
.text:00410AB9                 inc     ebp
.text:00410ABA                 movzx   ebx, byte ptr [ebp+0]
.text:00410ABE                 test    bl, bl
.text:00410AC0                 mov     cl, bl
.text:00410AC2                 jnz     short loc_410A81
.text:00410AC4                 mov     eax, esi
.text:00410AC6                 mov     edx, edi
.text:00410AC8                 jmp     short loc_410A7C
.text:00410AC8 ; ---------------------------------------------------------------------------
.text:00410ACA                 align 10h
.text:00410AD0                 sub     esp, 2Ch
.text:00410AD3                 lea     edx, [esp+24h]
.text:00410AD7                 lea     ecx, [esp+28h]
.text:00410ADB                 mov     [esp+0Ch], edx
.text:00410ADF                 lea     edx, [esp+1Ch]
.text:00410AE3                 mov     [esp+4], edx
.text:00410AE7                 mov     edx, [esp+30h]
.text:00410AEB                 mov     [esp+10h], ecx
.text:00410AEF                 lea     ecx, [esp+20h]
.text:00410AF3                 mov     [esp+8], ecx
.text:00410AF7                 mov     [esp], edx
.text:00410AFA                 call    sub_413890
.text:00410AFF                 test    eax, eax
.text:00410B01                 jnz     short loc_410B23
.text:00410B03                 mov     dword ptr [esp+1Ch], 1
.text:00410B0B                 mov     dword ptr [esp+20h], 200h
.text:00410B13                 mov     dword ptr [esp+24h], 0
.text:00410B1B                 mov     dword ptr [esp+28h], 0
.text:00410B23
.text:00410B23 loc_410B23:                             ; CODE XREF: .text:00410B01↑j
.text:00410B23                 mov     eax, [esp+20h]
.text:00410B27                 mov     ecx, [esp+1Ch]
.text:00410B2B                 add     esp, 2Ch
.text:00410B2E                 imul    eax, ecx
.text:00410B31                 retn
.text:00410B31 ; ---------------------------------------------------------------------------
.text:00410B32                 align 10h
.text:00410B40                 sub     esp, 1Ch
.text:00410B43                 mov     eax, [esp+20h]
.text:00410B47                 mov     [esp+14h], esi
.text:00410B4B                 mov     [esp+18h], edi
.text:00410B4F                 test    eax, eax
.text:00410B51                 jz      short loc_410B90
.text:00410B53                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00410B5B                 mov     [esp], eax
.text:00410B5E                 call    strrchr
.text:00410B63                 test    eax, eax
.text:00410B65                 jz      short loc_410B90
.text:00410B67                 cld
.text:00410B68                 mov     esi, eax
.text:00410B6A                 mov     edi, offset aLnk ; ".lnk"
.text:00410B6F                 mov     ecx, 5
.text:00410B74                 repe cmpsb
.text:00410B76                 setz    dl
.text:00410B79                 movzx   eax, dl
.text:00410B7C                 lea     esi, [esi+0]
.text:00410B80
.text:00410B80 loc_410B80:                             ; CODE XREF: .text:00410B92↓j
.text:00410B80                 mov     esi, [esp+14h]
.text:00410B84                 mov     edi, [esp+18h]
.text:00410B88                 add     esp, 1Ch
.text:00410B8B                 retn
.text:00410B8B ; ---------------------------------------------------------------------------
.text:00410B8C                 align 10h
.text:00410B90
.text:00410B90 loc_410B90:                             ; CODE XREF: .text:00410B51↑j
.text:00410B90                                         ; .text:00410B65↑j
.text:00410B90                 xor     eax, eax
.text:00410B92                 jmp     short loc_410B80
.text:00410B92 ; ---------------------------------------------------------------------------
.text:00410B94                 align 10h
.text:00410BA0                 sub     esp, 1Ch
.text:00410BA3                 mov     [esp+10h], ebx
.text:00410BA7                 mov     ebx, [esp+20h]
.text:00410BAB                 mov     [esp+14h], esi
.text:00410BAF                 mov     [esp+18h], edi
.text:00410BB3                 xor     edi, edi
.text:00410BB5                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:00410BBC                 call    GetModuleHandleA
.text:00410BC1                 sub     esp, 4
.text:00410BC4                 mov     esi, eax
.text:00410BC6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00410BCE                 mov     [esp], eax
.text:00410BD1                 call    GetProcAddress
.text:00410BD6                 sub     esp, 8
.text:00410BD9                 test    eax, eax
.text:00410BDB                 jz      short loc_410BF1
.text:00410BDD                 mov     [esp], ebx
.text:00410BE0                 lea     ecx, [esp+0Ch]
.text:00410BE4                 mov     [esp+4], ecx
.text:00410BE8                 call    eax
.text:00410BEA                 sub     esp, 8
.text:00410BED                 test    eax, eax
.text:00410BEF                 jnz     short loc_410C50
.text:00410BF1
.text:00410BF1 loc_410BF1:                             ; CODE XREF: .text:00410BDB↑j
.text:00410BF1                 mov     eax, ds:Str
.text:00410BF6                 test    eax, eax
.text:00410BF8                 jz      short loc_410C70
.text:00410BFA
.text:00410BFA loc_410BFA:                             ; CODE XREF: .text:00410C83↓j
.text:00410BFA                                         ; .text:00410C95↓j
.text:00410BFA                 test    ebx, ebx
.text:00410BFC                 jz      short loc_410C03
.text:00410BFE                 cmp     byte ptr [ebx], 0
.text:00410C01                 jnz     short loc_410C20
.text:00410C03
.text:00410C03 loc_410C03:                             ; CODE XREF: .text:00410BFC↑j
.text:00410C03                                         ; .text:00410C34↓j ...
.text:00410C03                 mov     [esp], esi
.text:00410C06                 call    FreeLibrary
.text:00410C0B                 sub     esp, 4
.text:00410C0E                 mov     eax, edi
.text:00410C10                 mov     ebx, [esp+10h]
.text:00410C14                 mov     esi, [esp+14h]
.text:00410C18                 mov     edi, [esp+18h]
.text:00410C1C                 add     esp, 1Ch
.text:00410C1F                 retn
.text:00410C20 ; ---------------------------------------------------------------------------
.text:00410C20
.text:00410C20 loc_410C20:                             ; CODE XREF: .text:00410C01↑j
.text:00410C20                 mov     [esp], ebx
.text:00410C23                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00410C2B                 call    strrchr
.text:00410C30                 test    eax, eax
.text:00410C32                 mov     ebx, eax
.text:00410C34                 jz      short loc_410C03
.text:00410C36                 mov     [esp+4], eax
.text:00410C3A                 mov     ecx, ds:Str
.text:00410C40                 mov     [esp], ecx
.text:00410C43                 call    strstr
.text:00410C48                 test    eax, eax
.text:00410C4A                 jz      short loc_410C57
.text:00410C4C                 lea     esi, [esi+0]
.text:00410C50
.text:00410C50 loc_410C50:                             ; CODE XREF: .text:00410BEF↑j
.text:00410C50                                         ; .text:00410C6D↓j
.text:00410C50                 mov     edi, 1
.text:00410C55                 jmp     short loc_410C03
.text:00410C57 ; ---------------------------------------------------------------------------
.text:00410C57
.text:00410C57 loc_410C57:                             ; CODE XREF: .text:00410C4A↑j
.text:00410C57                 mov     [esp+4], ebx
.text:00410C5B                 mov     ebx, off_418094 ; ".com;.exe;.bat;.cmd"
.text:00410C61                 mov     [esp], ebx
.text:00410C64                 call    strstr
.text:00410C69                 test    eax, eax
.text:00410C6B                 jz      short loc_410C03
.text:00410C6D                 jmp     short loc_410C50
.text:00410C6D ; ---------------------------------------------------------------------------
.text:00410C6F                 align 10h
.text:00410C70
.text:00410C70 loc_410C70:                             ; CODE XREF: .text:00410BF8↑j
.text:00410C70                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00410C77                 call    getenv
.text:00410C7C                 mov     ds:Str, eax
.text:00410C81                 test    eax, eax
.text:00410C83                 jnz     loc_410BFA
.text:00410C89                 mov     edx, off_418094 ; ".com;.exe;.bat;.cmd"
.text:00410C8F                 mov     ds:Str, edx
.text:00410C95                 jmp     loc_410BFA
.text:00410C95 ; ---------------------------------------------------------------------------
.text:00410C9A                 align 10h
.text:00410CA0                 sub     esp, 0Ch
.text:00410CA3                 mov     edx, [esp+10h]
.text:00410CA7                 mov     [esp], edx
.text:00410CAA                 call    GetFileType
.text:00410CAF                 sub     esp, 4
.text:00410CB2                 xor     edx, edx
.text:00410CB4                 cmp     eax, 2
.text:00410CB7                 jz      short loc_410CD0
.text:00410CB9                 cmp     eax, 3
.text:00410CBC                 jz      short loc_410CC4
.text:00410CBE
.text:00410CBE loc_410CBE:                             ; CODE XREF: .text:00410CC9↓j
.text:00410CBE                                         ; .text:00410CD5↓j
.text:00410CBE                 mov     eax, edx
.text:00410CC0                 add     esp, 0Ch
.text:00410CC3                 retn
.text:00410CC4 ; ---------------------------------------------------------------------------
.text:00410CC4
.text:00410CC4 loc_410CC4:                             ; CODE XREF: .text:00410CBC↑j
.text:00410CC4                 mov     edx, 1000h
.text:00410CC9                 jmp     short loc_410CBE
.text:00410CC9 ; ---------------------------------------------------------------------------
.text:00410CCB                 align 10h
.text:00410CD0
.text:00410CD0 loc_410CD0:                             ; CODE XREF: .text:00410CB7↑j
.text:00410CD0                 mov     edx, 2000h
.text:00410CD5                 jmp     short loc_410CBE
.text:00410CD5 ; ---------------------------------------------------------------------------
.text:00410CD7                 align 10h
.text:00410CE0                 mov     ecx, [esp+4]
.text:00410CE4                 xor     edx, edx
.text:00410CE6                 test    cl, 10h
.text:00410CE9                 setz    dl
.text:00410CEC                 dec     edx
.text:00410CED                 and     edx, 0FFFFC000h
.text:00410CF3                 add     edx, 8000h
.text:00410CF9                 or      edx, 124h
.text:00410CFF                 test    cl, 1
.text:00410D02                 movzx   eax, dx
.text:00410D05                 jnz     short locret_410D0C
.text:00410D07                 or      eax, 92h
.text:00410D0C
.text:00410D0C locret_410D0C:                          ; CODE XREF: .text:00410D05↑j
.text:00410D0C                 retn
.text:00410D0C ; ---------------------------------------------------------------------------
.text:00410D0D                 align 10h
.text:00410D10                 sub     esp, 2Ch
.text:00410D13                 mov     [esp+20h], esi
.text:00410D17                 mov     esi, [esp+30h]
.text:00410D1B                 mov     [esp+1Ch], ebx
.text:00410D1F                 xor     ebx, ebx
.text:00410D21                 test    esi, esi
.text:00410D23                 mov     [esp+24h], edi
.text:00410D27                 mov     [esp+28h], ebp
.text:00410D2B                 jz      short loc_410D80
.text:00410D2D                 cmp     byte ptr [esi], 0
.text:00410D30                 jnz     short loc_410D84
.text:00410D32
.text:00410D32 loc_410D32:                             ; CODE XREF: .text:00410DEC↓j
.text:00410D32                                         ; .text:00410DF7↓j
.text:00410D32                 test    esi, esi
.text:00410D34                 jz      short loc_410D80
.text:00410D36                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00410D3E                 mov     [esp], esi
.text:00410D41                 call    strrchr
.text:00410D46                 test    eax, eax
.text:00410D48                 jz      short loc_410D80
.text:00410D4A                 cld
.text:00410D4B                 mov     ecx, 5
.text:00410D50                 mov     esi, eax
.text:00410D52                 mov     edi, offset aLnk ; ".lnk"
.text:00410D57                 repe cmpsb
.text:00410D59                 setz    cl
.text:00410D5C                 movzx   eax, cl
.text:00410D5F                 nop
.text:00410D60
.text:00410D60 loc_410D60:                             ; CODE XREF: .text:00410D82↓j
.text:00410D60                 test    eax, eax
.text:00410D62                 jz      short loc_410D6A
.text:00410D64                 or      ebx, 0A000h
.text:00410D6A
.text:00410D6A loc_410D6A:                             ; CODE XREF: .text:00410D62↑j
.text:00410D6A                 mov     eax, ebx
.text:00410D6C                 mov     esi, [esp+20h]
.text:00410D70                 mov     ebx, [esp+1Ch]
.text:00410D74                 mov     edi, [esp+24h]
.text:00410D78                 mov     ebp, [esp+28h]
.text:00410D7C                 add     esp, 2Ch
.text:00410D7F                 retn
.text:00410D80 ; ---------------------------------------------------------------------------
.text:00410D80
.text:00410D80 loc_410D80:                             ; CODE XREF: .text:00410D2B↑j
.text:00410D80                                         ; .text:00410D34↑j ...
.text:00410D80                 xor     eax, eax
.text:00410D82                 jmp     short loc_410D60
.text:00410D84 ; ---------------------------------------------------------------------------
.text:00410D84
.text:00410D84 loc_410D84:                             ; CODE XREF: .text:00410D30↑j
.text:00410D84                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:00410D8B                 call    GetModuleHandleA
.text:00410D90                 sub     esp, 4
.text:00410D93                 mov     ebp, eax
.text:00410D95                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00410D9D                 mov     [esp], eax
.text:00410DA0                 call    GetProcAddress
.text:00410DA5                 sub     esp, 8
.text:00410DA8                 test    eax, eax
.text:00410DAA                 mov     dword ptr [esp+14h], 0
.text:00410DB2                 jz      short loc_410DC8
.text:00410DB4                 mov     [esp], esi
.text:00410DB7                 lea     ecx, [esp+18h]
.text:00410DBB                 mov     [esp+4], ecx
.text:00410DBF                 call    eax
.text:00410DC1                 sub     esp, 8
.text:00410DC4                 test    eax, eax
.text:00410DC6                 jnz     short loc_410E28
.text:00410DC8
.text:00410DC8 loc_410DC8:                             ; CODE XREF: .text:00410DB2↑j
.text:00410DC8                 mov     edx, ds:Str
.text:00410DCE                 test    edx, edx
.text:00410DD0                 jz      short loc_410E50
.text:00410DD2
.text:00410DD2 loc_410DD2:                             ; CODE XREF: .text:00410E63↓j
.text:00410DD2                                         ; .text:00410E75↓j
.text:00410DD2                 test    esi, esi
.text:00410DD4                 jz      short loc_410DDB
.text:00410DD6                 cmp     byte ptr [esi], 0
.text:00410DD9                 jnz     short loc_410DFC
.text:00410DDB
.text:00410DDB loc_410DDB:                             ; CODE XREF: .text:00410DD4↑j
.text:00410DDB                                         ; .text:00410E10↓j ...
.text:00410DDB                 mov     [esp], ebp
.text:00410DDE                 call    FreeLibrary
.text:00410DE3                 sub     esp, 4
.text:00410DE6                 mov     eax, [esp+14h]
.text:00410DEA                 test    eax, eax
.text:00410DEC                 jz      loc_410D32
.text:00410DF2                 mov     ebx, 49h ; 'I'
.text:00410DF7                 jmp     loc_410D32
.text:00410DFC ; ---------------------------------------------------------------------------
.text:00410DFC
.text:00410DFC loc_410DFC:                             ; CODE XREF: .text:00410DD9↑j
.text:00410DFC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00410E04                 mov     [esp], esi
.text:00410E07                 call    strrchr
.text:00410E0C                 test    eax, eax
.text:00410E0E                 mov     edi, eax
.text:00410E10                 jz      short loc_410DDB
.text:00410E12                 mov     [esp+4], eax
.text:00410E16                 mov     edx, ds:Str
.text:00410E1C                 mov     [esp], edx
.text:00410E1F                 call    strstr
.text:00410E24                 test    eax, eax
.text:00410E26                 jz      short loc_410E32
.text:00410E28
.text:00410E28 loc_410E28:                             ; CODE XREF: .text:00410DC6↑j
.text:00410E28                                         ; .text:00410E48↓j
.text:00410E28                 mov     dword ptr [esp+14h], 1
.text:00410E30                 jmp     short loc_410DDB
.text:00410E32 ; ---------------------------------------------------------------------------
.text:00410E32
.text:00410E32 loc_410E32:                             ; CODE XREF: .text:00410E26↑j
.text:00410E32                 mov     [esp+4], edi
.text:00410E36                 mov     edi, off_418094 ; ".com;.exe;.bat;.cmd"
.text:00410E3C                 mov     [esp], edi
.text:00410E3F                 call    strstr
.text:00410E44                 test    eax, eax
.text:00410E46                 jz      short loc_410DDB
.text:00410E48                 jmp     short loc_410E28
.text:00410E48 ; ---------------------------------------------------------------------------
.text:00410E4A                 align 10h
.text:00410E50
.text:00410E50 loc_410E50:                             ; CODE XREF: .text:00410DD0↑j
.text:00410E50                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00410E57                 call    getenv
.text:00410E5C                 mov     ds:Str, eax
.text:00410E61                 test    eax, eax
.text:00410E63                 jnz     loc_410DD2
.text:00410E69                 mov     ecx, off_418094 ; ".com;.exe;.bat;.cmd"
.text:00410E6F                 mov     ds:Str, ecx
.text:00410E75                 jmp     loc_410DD2
.text:00410E75 ; ---------------------------------------------------------------------------
.text:00410E7A                 align 10h
.text:00410E80                 push    esi
.text:00410E81                 push    ebx
.text:00410E82                 sub     esp, 864h
.text:00410E88                 mov     ebx, [esp+870h]
.text:00410E8F                 lea     edx, [esp+830h]
.text:00410E96                 mov     esi, [esp+874h]
.text:00410E9D                 mov     [esp+4], edx
.text:00410EA1                 mov     [esp], ebx
.text:00410EA4                 call    sub_40FD00
.text:00410EA9                 xor     edx, edx
.text:00410EAB                 test    eax, eax
.text:00410EAD                 jz      loc_410F95
.text:00410EB3                 mov     ecx, [esp+830h]
.text:00410EBA                 test    cl, 10h
.text:00410EBD                 mov     [esi], ecx
.text:00410EBF                 mov     eax, [esp+834h]
.text:00410EC6                 mov     edx, [esp+838h]
.text:00410ECD                 mov     [esi+4], eax
.text:00410ED0                 mov     [esi+8], edx
.text:00410ED3                 mov     eax, [esp+83Ch]
.text:00410EDA                 mov     edx, [esp+840h]
.text:00410EE1                 mov     [esi+0Ch], eax
.text:00410EE4                 mov     [esi+10h], edx
.text:00410EE7                 mov     edx, [esp+848h]
.text:00410EEE                 mov     eax, [esp+844h]
.text:00410EF5                 mov     [esi+18h], edx
.text:00410EF8                 mov     [esi+14h], eax
.text:00410EFB                 mov     edx, [esp+84Ch]
.text:00410F02                 mov     [esi+20h], edx
.text:00410F05                 mov     edx, [esp+850h]
.text:00410F0C                 mov     [esi+24h], edx
.text:00410F0F                 jnz     loc_410FA0
.text:00410F15                 mov     dword ptr [esi+28h], 1
.text:00410F1C
.text:00410F1C loc_410F1C:                             ; CODE XREF: .text:00410FAB↓j
.text:00410F1C                 mov     [esp], ebx
.text:00410F1F                 call    sub_412E70
.text:00410F24                 mov     [esp], eax
.text:00410F27                 call    sub_40EAB0
.text:00410F2C                 mov     [esp], eax
.text:00410F2F                 lea     edx, [esp+30h]
.text:00410F33                 mov     ebx, eax
.text:00410F35                 mov     [esp+18h], edx
.text:00410F39                 lea     ecx, [esp+2Ch]
.text:00410F3D                 lea     edx, [esp+28h]
.text:00410F41                 mov     [esp+14h], ecx
.text:00410F45                 lea     ecx, [esp+24h]
.text:00410F49                 mov     [esp+10h], edx
.text:00410F4D                 lea     edx, [esp+430h]
.text:00410F54                 mov     [esp+0Ch], ecx
.text:00410F58                 mov     [esp+4], edx
.text:00410F5C                 mov     dword ptr [esp+1Ch], 400h
.text:00410F64                 mov     dword ptr [esp+8], 400h
.text:00410F6C                 call    GetVolumeInformationA
.text:00410F71                 sub     esp, 20h
.text:00410F74                 test    eax, eax
.text:00410F76                 setz    cl
.text:00410F79                 mov     [esp], ebx
.text:00410F7C                 movzx   edx, cl
.text:00410F7F                 dec     edx
.text:00410F80                 and     [esp+24h], edx
.text:00410F84                 call    free
.text:00410F89                 mov     ecx, [esp+24h]
.text:00410F8D                 mov     edx, 1
.text:00410F92                 mov     [esi+1Ch], ecx
.text:00410F95
.text:00410F95 loc_410F95:                             ; CODE XREF: .text:00410EAD↑j
.text:00410F95                 add     esp, 864h
.text:00410F9B                 mov     eax, edx
.text:00410F9D                 pop     ebx
.text:00410F9E                 pop     esi
.text:00410F9F                 retn
.text:00410FA0 ; ---------------------------------------------------------------------------
.text:00410FA0
.text:00410FA0 loc_410FA0:                             ; CODE XREF: .text:00410F0F↑j
.text:00410FA0                 mov     [esp], ebx
.text:00410FA3                 call    sub_40FE70
.text:00410FA8                 mov     [esi+28h], eax
.text:00410FAB                 jmp     loc_410F1C
.text:00410FB0 ; ---------------------------------------------------------------------------
.text:00410FB0                 push    ebp
.text:00410FB1                 xor     edx, edx
.text:00410FB3                 push    edi
.text:00410FB4                 push    esi
.text:00410FB5                 xor     esi, esi
.text:00410FB7                 push    ebx
.text:00410FB8                 sub     esp, 1Ch
.text:00410FBB                 mov     ebx, [esp+5Ch]
.text:00410FBF                 mov     ecx, [esp+30h]
.text:00410FC3                 mov     edi, [esp+60h]
.text:00410FC7                 or      esi, ebx
.text:00410FC9                 mov     eax, [esp+4Ch]
.text:00410FCD                 or      edi, edx
.text:00410FCF                 mov     ebx, [esp+64h]
.text:00410FD3                 xor     edx, edx
.text:00410FD5                 test    cl, 10h
.text:00410FD8                 setz    dl
.text:00410FDB                 mov     [ebx+10h], eax
.text:00410FDE                 mov     [ebx+8], edi
.text:00410FE1                 mov     [ebx+0Ch], esi
.text:00410FE4                 dec     edx
.text:00410FE5                 and     edx, 0FFFFC000h
.text:00410FEB                 mov     dword ptr [ebx+14h], 0
.text:00410FF2                 add     edx, 8000h
.text:00410FF8                 or      edx, 124h
.text:00410FFE                 test    cl, 1
.text:00411001                 movzx   eax, dx
.text:00411004                 jnz     short loc_41100B
.text:00411006                 or      eax, 92h
.text:0041100B
.text:0041100B loc_41100B:                             ; CODE XREF: .text:00411004↑j
.text:0041100B                 mov     ebx, [esp+54h]
.text:0041100F                 xor     edx, edx
.text:00411011                 xor     ebp, ebp
.text:00411013                 mov     edi, [esp+50h]
.text:00411017                 mov     ecx, [esp+64h]
.text:0041101B                 mov     esi, edi
.text:0041101D                 or      [ecx], eax
.text:0041101F                 mov     edi, ebx
.text:00411021                 or      edi, ebp
.text:00411023                 mov     ebp, edx
.text:00411025                 mov     ebx, [esp+64h]
.text:00411029                 or      ebp, esi
.text:0041102B                 mov     esi, [esp+58h]
.text:0041102F                 mov     edx, [esp+40h]
.text:00411033                 mov     [ebx+30h], edi
.text:00411036                 mov     [ebx+18h], esi
.text:00411039                 mov     ecx, edx
.text:0041103B                 xor     esi, esi
.text:0041103D                 mov     [ebx+34h], ebp
.text:00411040                 xor     edx, edx
.text:00411042                 or      esi, ecx
.text:00411044                 mov     dword ptr [esp+8], 989680h
.text:0041104C                 mov     ebx, [esp+3Ch]
.text:00411050                 mov     ecx, esi
.text:00411052                 mov     dword ptr [esp+0Ch], 0
.text:0041105A                 or      ebx, edx
.text:0041105C                 mov     edx, ebx
.text:0041105E                 sub     edx, 0D53E8000h
.text:00411064                 sbb     ecx, 19DB1DEh
.text:0041106A                 mov     [esp+4], ecx
.text:0041106E                 mov     [esp], edx
.text:00411071                 call    sub_416B70
.text:00411076                 mov     edx, eax
.text:00411078                 mov     ecx, [esp+64h]
.text:0041107C                 shr     eax, 1Fh
.text:0041107F                 dec     eax
.text:00411080                 and     edx, eax
.text:00411082                 mov     [ecx+38h], edx
.text:00411085                 mov     [esp], ebx
.text:00411088                 mov     [esp+4], esi
.text:0041108C                 mov     dword ptr [esp+8], 989680h
.text:00411094                 mov     dword ptr [esp+0Ch], 0
.text:0041109C                 call    sub_416C90
.text:004110A1                 lea     ecx, [eax+eax*4]
.text:004110A4                 lea     esi, [ecx+ecx*4]
.text:004110A7                 mov     eax, [esp+64h]
.text:004110AB                 shl     esi, 2
.text:004110AE                 mov     ebx, esi
.text:004110B0                 shr     ebx, 1Fh
.text:004110B3                 dec     ebx
.text:004110B4                 and     ebx, esi
.text:004110B6                 xor     esi, esi
.text:004110B8                 mov     [eax+3Ch], ebx
.text:004110BB                 mov     edx, [esp+38h]
.text:004110BF                 mov     dword ptr [esp+8], 989680h
.text:004110C7                 mov     ebx, [esp+34h]
.text:004110CB                 mov     dword ptr [esp+0Ch], 0
.text:004110D3                 mov     ecx, edx
.text:004110D5                 xor     edx, edx
.text:004110D7                 or      ebx, edx
.text:004110D9                 or      esi, ecx
.text:004110DB                 mov     edx, ebx
.text:004110DD                 sub     edx, 0D53E8000h
.text:004110E3                 mov     ecx, esi
.text:004110E5                 sbb     ecx, 19DB1DEh
.text:004110EB                 mov     [esp+4], ecx
.text:004110EF                 mov     [esp], edx
.text:004110F2                 call    sub_416B70
.text:004110F7                 mov     edx, eax
.text:004110F9                 mov     ecx, [esp+64h]
.text:004110FD                 shr     eax, 1Fh
.text:00411100                 dec     eax
.text:00411101                 and     edx, eax
.text:00411103                 mov     [ecx+48h], edx
.text:00411106                 mov     [esp], ebx
.text:00411109                 mov     [esp+4], esi
.text:0041110D                 mov     dword ptr [esp+8], 989680h
.text:00411115                 mov     dword ptr [esp+0Ch], 0
.text:0041111D                 call    sub_416C90
.text:00411122                 lea     edx, [eax+eax*4]
.text:00411125                 mov     ebx, [esp+64h]
.text:00411129                 lea     ecx, [edx+edx*4]
.text:0041112C                 shl     ecx, 2
.text:0041112F                 mov     esi, ecx
.text:00411131                 shr     esi, 1Fh
.text:00411134                 dec     esi
.text:00411135                 and     esi, ecx
.text:00411137                 mov     [ebx+4Ch], esi
.text:0041113A                 mov     edx, [esp+48h]
.text:0041113E                 xor     esi, esi
.text:00411140                 mov     dword ptr [esp+8], 989680h
.text:00411148                 mov     ebx, [esp+44h]
.text:0041114C                 mov     dword ptr [esp+0Ch], 0
.text:00411154                 mov     ecx, edx
.text:00411156                 xor     edx, edx
.text:00411158                 or      ebx, edx
.text:0041115A                 or      esi, ecx
.text:0041115C                 mov     edx, ebx
.text:0041115E                 sub     edx, 0D53E8000h
.text:00411164                 mov     ecx, esi
.text:00411166                 sbb     ecx, 19DB1DEh
.text:0041116C                 mov     [esp+4], ecx
.text:00411170                 mov     [esp], edx
.text:00411173                 call    sub_416B70
.text:00411178                 mov     edx, eax
.text:0041117A                 mov     ecx, [esp+64h]
.text:0041117E                 shr     eax, 1Fh
.text:00411181                 dec     eax
.text:00411182                 and     edx, eax
.text:00411184                 mov     [ecx+40h], edx
.text:00411187                 mov     [esp+4], esi
.text:0041118B                 mov     dword ptr [esp+8], 989680h
.text:00411193                 mov     dword ptr [esp+0Ch], 0
.text:0041119B                 mov     [esp], ebx
.text:0041119E                 call    sub_416C90
.text:004111A3                 lea     edx, [eax+eax*4]
.text:004111A6                 lea     esi, [edx+edx*4]
.text:004111A9                 mov     eax, [esp+64h]
.text:004111AD                 shl     esi, 2
.text:004111B0                 mov     edx, ebp
.text:004111B2                 mov     ecx, esi
.text:004111B4                 mov     dword ptr [eax+50h], 200h
.text:004111BB                 shr     ecx, 1Fh
.text:004111BE                 dec     ecx
.text:004111BF                 and     ecx, esi
.text:004111C1                 test    ebp, ebp
.text:004111C3                 mov     [eax+44h], ecx
.text:004111C6                 mov     eax, edi
.text:004111C8                 js      short loc_411202
.text:004111CA
.text:004111CA loc_4111CA:                             ; CODE XREF: .text:0041120A↓j
.text:004111CA                 xor     esi, esi
.text:004111CC                 mov     ebp, edi
.text:004111CE                 mov     ecx, eax
.text:004111D0                 shrd    ecx, edx, 9
.text:004111D4                 mov     ebx, edx
.text:004111D6                 and     ebp, 1FFh
.text:004111DC                 mov     eax, esi
.text:004111DE                 sar     ebx, 9
.text:004111E1                 or      eax, ebp
.text:004111E3                 jz      short loc_4111EB
.text:004111E5                 add     ecx, 1
.text:004111E8                 adc     ebx, 0
.text:004111EB
.text:004111EB loc_4111EB:                             ; CODE XREF: .text:004111E3↑j
.text:004111EB                 mov     edx, [esp+64h]
.text:004111EF                 mov     eax, 1
.text:004111F4                 mov     [edx+58h], ecx
.text:004111F7                 mov     [edx+5Ch], ebx
.text:004111FA                 add     esp, 1Ch
.text:004111FD                 pop     ebx
.text:004111FE                 pop     esi
.text:004111FF                 pop     edi
.text:00411200                 pop     ebp
.text:00411201                 retn
.text:00411202 ; ---------------------------------------------------------------------------
.text:00411202
.text:00411202 loc_411202:                             ; CODE XREF: .text:004111C8↑j
.text:00411202                 add     eax, 1FFh
.text:00411207                 adc     edx, 0
.text:0041120A                 jmp     short loc_4111CA
.text:0041120A ; ---------------------------------------------------------------------------
.text:0041120C                 align 10h
.text:00411210                 push    ebp
.text:00411211                 push    edi
.text:00411212                 xor     edi, edi
.text:00411214                 push    esi
.text:00411215                 xor     esi, esi
.text:00411217                 push    ebx
.text:00411218                 sub     esp, 0Ch
.text:0041121B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00411222                 call    LoadLibraryA
.text:00411227                 sub     esp, 4
.text:0041122A                 mov     ebp, eax
.text:0041122C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00411234                 mov     [esp], eax
.text:00411237                 call    GetProcAddress
.text:0041123C                 sub     esp, 8
.text:0041123F                 test    eax, eax
.text:00411241                 jz      short loc_411272
.text:00411243                 lea     ecx, [esp+8]
.text:00411247                 mov     [esp+4], ecx
.text:0041124B                 mov     ecx, [esp+20h]
.text:0041124F                 mov     [esp], ecx
.text:00411252                 call    eax
.text:00411254                 sub     esp, 8
.text:00411257                 mov     ebx, eax
.text:00411259                 cmp     eax, 0FFFFFFFFh
.text:0041125C                 jz      short loc_41128D
.text:0041125E
.text:0041125E loc_41125E:                             ; CODE XREF: .text:00411296↓j
.text:0041125E                 mov     esi, [esp+8]
.text:00411262                 mov     ecx, ebx
.text:00411264                 xor     edi, edi
.text:00411266                 xor     ebx, ebx
.text:00411268                 mov     edx, esi
.text:0041126A                 mov     esi, ecx
.text:0041126C                 or      esi, edi
.text:0041126E                 mov     edi, ebx
.text:00411270                 or      edi, edx
.text:00411272
.text:00411272 loc_411272:                             ; CODE XREF: .text:00411241↑j
.text:00411272                                         ; .text:00411294↓j
.text:00411272                 test    ebp, ebp
.text:00411274                 jz      short loc_411281
.text:00411276                 mov     [esp], ebp
.text:00411279                 call    FreeLibrary
.text:0041127E                 sub     esp, 4
.text:00411281
.text:00411281 loc_411281:                             ; CODE XREF: .text:00411274↑j
.text:00411281                 add     esp, 0Ch
.text:00411284                 mov     eax, esi
.text:00411286                 mov     edx, edi
.text:00411288                 pop     ebx
.text:00411289                 pop     esi
.text:0041128A                 pop     edi
.text:0041128B                 pop     ebp
.text:0041128C                 retn
.text:0041128D ; ---------------------------------------------------------------------------
.text:0041128D
.text:0041128D loc_41128D:                             ; CODE XREF: .text:0041125C↑j
.text:0041128D                 call    GetLastError
.text:00411292                 test    eax, eax
.text:00411294                 jnz     short loc_411272
.text:00411296                 jmp     short loc_41125E
.text:00411296 ; ---------------------------------------------------------------------------
.text:00411298                 align 10h
.text:004112A0
.text:004112A0 ; =============== S U B R O U T I N E =======================================
.text:004112A0
.text:004112A0
.text:004112A0 ; int __cdecl sub_4112A0(LPCSTR lpFileName, int)
.text:004112A0 sub_4112A0      proc near               ; CODE XREF: sub_40E610+31D1↓p
.text:004112A0
.text:004112A0 lpRootPathName  = dword ptr -8FCh
.text:004112A0 lpVolumeNameBuffer= dword ptr -8F8h
.text:004112A0 nVolumeNameSize = dword ptr -8F4h
.text:004112A0 lpVolumeSerialNumber= dword ptr -8F0h
.text:004112A0 lpMaximumComponentLength= dword ptr -8ECh
.text:004112A0 lpFileSystemFlags= dword ptr -8E8h
.text:004112A0 lpFileSystemNameBuffer= dword ptr -8E4h
.text:004112A0 nFileSystemNameSize= dword ptr -8E0h
.text:004112A0 VolumeSerialNumber= dword ptr -8D8h
.text:004112A0 MaximumComponentLength= dword ptr -8D4h
.text:004112A0 FileSystemFlags = dword ptr -8D0h
.text:004112A0 var_8CC         = dword ptr -8CCh
.text:004112A0 var_8C8         = dword ptr -8C8h
.text:004112A0 var_8C4         = dword ptr -8C4h
.text:004112A0 var_8C0         = dword ptr -8C0h
.text:004112A0 var_8BC         = dword ptr -8BCh
.text:004112A0 var_8B8         = dword ptr -8B8h
.text:004112A0 var_8B4         = dword ptr -8B4h
.text:004112A0 var_8B0         = dword ptr -8B0h
.text:004112A0 var_8AC         = dword ptr -8ACh
.text:004112A0 var_8A8         = dword ptr -8A8h
.text:004112A0 var_8A4         = dword ptr -8A4h
.text:004112A0 var_8A0         = dword ptr -8A0h
.text:004112A0 var_89C         = dword ptr -89Ch
.text:004112A0 FileSystemNameBuffer= byte ptr -88Ch
.text:004112A0 VolumeNameBuffer= byte ptr -48Ch
.text:004112A0 var_8C          = dword ptr -8Ch
.text:004112A0 var_88          = dword ptr -88h
.text:004112A0 var_84          = dword ptr -84h
.text:004112A0 var_80          = dword ptr -80h
.text:004112A0 var_7C          = dword ptr -7Ch
.text:004112A0 var_78          = dword ptr -78h
.text:004112A0 var_74          = dword ptr -74h
.text:004112A0 var_70          = dword ptr -70h
.text:004112A0 var_6C          = dword ptr -6Ch
.text:004112A0 var_5C          = dword ptr -5Ch
.text:004112A0 var_58          = dword ptr -58h
.text:004112A0 var_54          = dword ptr -54h
.text:004112A0 var_50          = dword ptr -50h
.text:004112A0 var_4C          = dword ptr -4Ch
.text:004112A0 var_48          = dword ptr -48h
.text:004112A0 var_44          = dword ptr -44h
.text:004112A0 var_3C          = dword ptr -3Ch
.text:004112A0 var_38          = dword ptr -38h
.text:004112A0 var_34          = dword ptr -34h
.text:004112A0 lpFileName      = dword ptr  4
.text:004112A0 arg_4           = dword ptr  8
.text:004112A0
.text:004112A0                 push    ebp
.text:004112A1                 xor     eax, eax
.text:004112A3                 mov     ecx, 0Dh
.text:004112A8                 push    edi
.text:004112A9                 push    esi
.text:004112AA                 push    ebx
.text:004112AB                 sub     esp, 8ECh
.text:004112B1                 lea     edi, [esp+8FCh+var_5C]
.text:004112B8                 cld
.text:004112B9                 lea     edx, [esp+8FCh+var_8C]
.text:004112C0                 rep stosd
.text:004112C2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:004112C6                 lea     esi, [esp+8FCh+var_5C]
.text:004112CD                 mov     edx, [esp+8FCh+lpFileName]
.text:004112D4                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:004112D7                 call    sub_40FD00
.text:004112DC                 test    eax, eax
.text:004112DE                 mov     edx, 0FFFFFFFFh
.text:004112E3                 jz      loc_411674
.text:004112E9                 mov     edx, [esp+8FCh+var_88]
.text:004112F0                 mov     ebp, [esp+8FCh+var_84]
.text:004112F7                 mov     edi, [esp+8FCh+var_80]
.text:004112FE                 mov     [esp+8FCh+var_58], edx
.text:00411305                 mov     ecx, [esp+8FCh+var_7C]
.text:0041130C                 mov     ebx, [esp+8FCh+var_8C]
.text:00411313                 mov     [esp+8FCh+var_54], ebp
.text:0041131A                 mov     edx, [esp+8FCh+var_78]
.text:00411321                 mov     ebp, [esp+8FCh+var_74]
.text:00411328                 mov     [esp+8FCh+var_50], edi
.text:0041132F                 test    bl, 10h
.text:00411332                 mov     edi, [esp+8FCh+var_70]
.text:00411339                 mov     [esp+8FCh+var_4C], ecx
.text:00411340                 mov     ecx, [esp+8FCh+var_6C]
.text:00411347                 mov     [esp+8FCh+var_5C], ebx
.text:0041134E                 mov     [esp+8FCh+var_48], edx
.text:00411355                 mov     [esp+8FCh+var_44], ebp
.text:0041135C                 mov     [esp+8FCh+var_3C], edi
.text:00411363                 mov     [esp+8FCh+var_38], ecx
.text:0041136A                 jnz     loc_411690
.text:00411370                 mov     ebx, 1
.text:00411375                 mov     [esp+8FCh+var_34], ebx
.text:0041137C
.text:0041137C loc_41137C:                             ; CODE XREF: sub_4112A0+406↓j
.text:0041137C                 mov     eax, [esp+8FCh+lpFileName]
.text:00411383                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00411387                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0041138B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0041138E                 call    sub_412E70
.text:00411393                 mov     [esp+8FCh+lpRootPathName], eax
.text:00411396                 call    sub_40EAB0
.text:0041139B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0041139F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004113A3                 mov     ebp, eax
.text:004113A5                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004113A9                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:004113AD                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:004113B4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:004113B8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004113BC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:004113C0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004113C8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:004113D0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:004113D3                 call    GetVolumeInformationA
.text:004113D8                 sub     esp, 20h
.text:004113DB                 test    eax, eax
.text:004113DD                 lea     edi, [esp+8FCh+var_8CC]
.text:004113E1                 setz    bl
.text:004113E4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:004113E7                 xor     ebp, ebp
.text:004113E9                 movzx   edx, bl
.text:004113EC                 dec     edx
.text:004113ED                 xor     ebx, ebx
.text:004113EF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:004113F3                 call    free
.text:004113F8                 cld
.text:004113F9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004113FD                 mov     [esi+1Ch], ecx
.text:00411400                 mov     ecx, 0Dh
.text:00411405                 rep movsd
.text:00411407                 mov     edi, [esp+8FCh+var_8A0]
.text:0041140B                 mov     edx, [esp+8FCh+var_89C]
.text:0041140F                 mov     ecx, [esp+8FCh+var_8CC]
.text:00411413                 or      ebp, edi
.text:00411415                 mov     esi, [esp+8FCh+var_8B0]
.text:00411419                 mov     edi, [esp+8FCh+arg_4]
.text:00411420                 or      edx, ebx
.text:00411422                 mov     [edi+8], edx
.text:00411425                 xor     edx, edx
.text:00411427                 test    cl, 10h
.text:0041142A                 setz    dl
.text:0041142D                 mov     [edi+0Ch], ebp
.text:00411430                 mov     [edi+10h], esi
.text:00411433                 mov     dword ptr [edi+14h], 0
.text:0041143A                 dec     edx
.text:0041143B                 and     edx, 0FFFFC000h
.text:00411441                 add     edx, 8000h
.text:00411447                 or      edx, 124h
.text:0041144D                 test    cl, 1
.text:00411450                 movzx   eax, dx
.text:00411453                 jnz     short loc_41145A
.text:00411455                 or      eax, 92h
.text:0041145A
.text:0041145A loc_41145A:                             ; CODE XREF: sub_4112A0+1B3↑j
.text:0041145A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0041145E                 xor     edx, edx
.text:00411460                 xor     ebp, ebp
.text:00411462                 mov     edi, [esp+8FCh+var_8AC]
.text:00411466                 mov     ecx, [esp+8FCh+arg_4]
.text:0041146D                 mov     esi, edi
.text:0041146F                 or      [ecx], eax
.text:00411471                 mov     edi, ebx
.text:00411473                 or      edi, ebp
.text:00411475                 mov     ebp, edx
.text:00411477                 mov     ebx, [esp+8FCh+var_8A4]
.text:0041147B                 or      ebp, esi
.text:0041147D                 mov     esi, [esp+8FCh+arg_4]
.text:00411484                 mov     edx, [esp+8FCh+var_8BC]
.text:00411488                 mov     [esi+18h], ebx
.text:0041148B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0041148F                 mov     ecx, edx
.text:00411491                 mov     [esi+30h], edi
.text:00411494                 xor     edx, edx
.text:00411496                 mov     [esi+34h], ebp
.text:00411499                 or      ebx, edx
.text:0041149B                 xor     esi, esi
.text:0041149D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004114A5                 or      esi, ecx
.text:004114A7                 mov     edx, ebx
.text:004114A9                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004114B1                 sub     edx, 0D53E8000h
.text:004114B7                 mov     ecx, esi
.text:004114B9                 sbb     ecx, 19DB1DEh
.text:004114BF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004114C3                 mov     [esp+8FCh+lpRootPathName], edx
.text:004114C6                 call    sub_416B70
.text:004114CB                 mov     edx, eax
.text:004114CD                 mov     ecx, [esp+8FCh+arg_4]
.text:004114D4                 shr     eax, 1Fh
.text:004114D7                 dec     eax
.text:004114D8                 and     edx, eax
.text:004114DA                 mov     [ecx+38h], edx
.text:004114DD                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004114E0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004114E4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004114EC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004114F4                 call    sub_416C90
.text:004114F9                 lea     ecx, [eax+eax*4]
.text:004114FC                 lea     ebx, [ecx+ecx*4]
.text:004114FF                 mov     eax, [esp+8FCh+arg_4]
.text:00411506                 shl     ebx, 2
.text:00411509                 mov     esi, ebx
.text:0041150B                 shr     esi, 1Fh
.text:0041150E                 dec     esi
.text:0041150F                 and     esi, ebx
.text:00411511                 mov     [eax+3Ch], esi
.text:00411514                 mov     edx, [esp+8FCh+var_8C4]
.text:00411518                 xor     esi, esi
.text:0041151A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00411522                 mov     ebx, [esp+8FCh+var_8C8]
.text:00411526                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0041152E                 mov     ecx, edx
.text:00411530                 xor     edx, edx
.text:00411532                 or      ebx, edx
.text:00411534                 or      esi, ecx
.text:00411536                 mov     edx, ebx
.text:00411538                 sub     edx, 0D53E8000h
.text:0041153E                 mov     ecx, esi
.text:00411540                 sbb     ecx, 19DB1DEh
.text:00411546                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0041154A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0041154D                 call    sub_416B70
.text:00411552                 mov     edx, eax
.text:00411554                 mov     ecx, [esp+8FCh+arg_4]
.text:0041155B                 shr     eax, 1Fh
.text:0041155E                 dec     eax
.text:0041155F                 and     edx, eax
.text:00411561                 mov     [ecx+48h], edx
.text:00411564                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00411567                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0041156B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00411573                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0041157B                 call    sub_416C90
.text:00411580                 lea     ecx, [eax+eax*4]
.text:00411583                 lea     ebx, [ecx+ecx*4]
.text:00411586                 mov     eax, [esp+8FCh+arg_4]
.text:0041158D                 shl     ebx, 2
.text:00411590                 mov     esi, ebx
.text:00411592                 shr     esi, 1Fh
.text:00411595                 dec     esi
.text:00411596                 and     esi, ebx
.text:00411598                 mov     [eax+4Ch], esi
.text:0041159B                 mov     edx, [esp+8FCh+var_8B4]
.text:0041159F                 xor     esi, esi
.text:004115A1                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004115A9                 mov     ebx, [esp+8FCh+var_8B8]
.text:004115AD                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004115B5                 mov     ecx, edx
.text:004115B7                 xor     edx, edx
.text:004115B9                 or      ebx, edx
.text:004115BB                 or      esi, ecx
.text:004115BD                 mov     edx, ebx
.text:004115BF                 sub     edx, 0D53E8000h
.text:004115C5                 mov     ecx, esi
.text:004115C7                 sbb     ecx, 19DB1DEh
.text:004115CD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004115D1                 mov     [esp+8FCh+lpRootPathName], edx
.text:004115D4                 call    sub_416B70
.text:004115D9                 mov     edx, eax
.text:004115DB                 mov     ecx, [esp+8FCh+arg_4]
.text:004115E2                 shr     eax, 1Fh
.text:004115E5                 dec     eax
.text:004115E6                 and     edx, eax
.text:004115E8                 mov     [ecx+40h], edx
.text:004115EB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004115EE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004115F2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004115FA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00411602                 call    sub_416C90
.text:00411607                 lea     ebx, [eax+eax*4]
.text:0041160A                 mov     esi, [esp+8FCh+arg_4]
.text:00411611                 lea     edx, [ebx+ebx*4]
.text:00411614                 shl     edx, 2
.text:00411617                 mov     eax, edi
.text:00411619                 mov     ecx, edx
.text:0041161B                 mov     dword ptr [esi+50h], 200h
.text:00411622                 shr     ecx, 1Fh
.text:00411625                 dec     ecx
.text:00411626                 and     ecx, edx
.text:00411628                 test    ebp, ebp
.text:0041162A                 mov     edx, ebp
.text:0041162C                 mov     [esi+44h], ecx
.text:0041162F                 js      short loc_411681
.text:00411631
.text:00411631 loc_411631:                             ; CODE XREF: sub_4112A0+3E9↓j
.text:00411631                 xor     esi, esi
.text:00411633                 mov     ebp, edi
.text:00411635                 mov     ecx, eax
.text:00411637                 shrd    ecx, edx, 9
.text:0041163B                 mov     ebx, edx
.text:0041163D                 and     ebp, 1FFh
.text:00411643                 mov     eax, esi
.text:00411645                 sar     ebx, 9
.text:00411648                 or      eax, ebp
.text:0041164A                 jz      short loc_411652
.text:0041164C                 add     ecx, 1
.text:0041164F                 adc     ebx, 0
.text:00411652
.text:00411652 loc_411652:                             ; CODE XREF: sub_4112A0+3AA↑j
.text:00411652                 mov     edx, [esp+8FCh+arg_4]
.text:00411659                 mov     [edx+5Ch], ebx
.text:0041165C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00411663                 mov     [edx+58h], ecx
.text:00411666                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0041166A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0041166D                 call    sub_4104C0
.text:00411672                 xor     edx, edx
.text:00411674
.text:00411674 loc_411674:                             ; CODE XREF: sub_4112A0+43↑j
.text:00411674                 add     esp, 8ECh
.text:0041167A                 mov     eax, edx
.text:0041167C                 pop     ebx
.text:0041167D                 pop     esi
.text:0041167E                 pop     edi
.text:0041167F                 pop     ebp
.text:00411680                 retn
.text:00411681 ; ---------------------------------------------------------------------------
.text:00411681
.text:00411681 loc_411681:                             ; CODE XREF: sub_4112A0+38F↑j
.text:00411681                 add     eax, 1FFh
.text:00411686                 adc     edx, 0
.text:00411689                 jmp     short loc_411631
.text:00411689 ; ---------------------------------------------------------------------------
.text:0041168B                 align 10h
.text:00411690
.text:00411690 loc_411690:                             ; CODE XREF: sub_4112A0+CA↑j
.text:00411690                 mov     eax, [esp+8FCh+lpFileName]
.text:00411697                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0041169A                 call    sub_40FE70
.text:0041169F                 mov     [esp+8FCh+var_34], eax
.text:004116A6                 jmp     loc_41137C
.text:004116A6 sub_4112A0      endp
.text:004116A6
.text:004116A6 ; ---------------------------------------------------------------------------
.text:004116AB                 align 10h
.text:004116B0 ; START OF FUNCTION CHUNK FOR sub_40E610
.text:004116B0
.text:004116B0 loc_4116B0:                             ; CODE XREF: sub_40E610+26↑j
.text:004116B0                 cld
.text:004116B1                 sub     esp, 2Ch
.text:004116B4                 xor     eax, eax
.text:004116B6                 mov     [esp+2Ch+var_10], ebx
.text:004116BA                 mov     ecx, 18h
.text:004116BF                 mov     ebx, [esp+2Ch+arg_0]
.text:004116C3                 mov     [esp+2Ch+var_C], esi
.text:004116C7                 mov     esi, [esp+2Ch+arg_4]
.text:004116CB                 test    ebx, ebx
.text:004116CD                 mov     [esp+2Ch+var_8], edi
.text:004116D1                 mov     edi, esi
.text:004116D3                 mov     [esp+2Ch+var_4], ebp
.text:004116D7                 rep stosd
.text:004116D9                 jz      short loc_4116E0
.text:004116DB                 cmp     byte ptr [ebx], 0
.text:004116DE                 jnz     short loc_4116F8
.text:004116E0
.text:004116E0 loc_4116E0:                             ; CODE XREF: sub_40E610+30C9↑j
.text:004116E0                 xor     edx, edx
.text:004116E2
.text:004116E2 loc_4116E2:                             ; CODE XREF: sub_40E610+30FF↓j
.text:004116E2                                         ; sub_40E610+31A8↓j
.text:004116E2                 mov     ebx, [esp+2Ch+var_10]
.text:004116E6                 mov     eax, edx
.text:004116E8                 mov     esi, [esp+2Ch+var_C]
.text:004116EC                 mov     edi, [esp+2Ch+var_8]
.text:004116F0                 mov     ebp, [esp+2Ch+var_4]
.text:004116F4                 add     esp, 2Ch
.text:004116F7                 retn
.text:004116F8 ; ---------------------------------------------------------------------------
.text:004116F8
.text:004116F8 loc_4116F8:                             ; CODE XREF: sub_40E610+30CE↑j
.text:004116F8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00411700                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00411703                 call    sub_412310
.text:00411708                 test    eax, eax
.text:0041170A                 mov     edx, 0FFFFFFFFh
.text:0041170F                 jnz     short loc_4116E2
.text:00411711                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00411714                 call    sub_40F8C0
.text:00411719                 mov     [esp+2Ch+lpFileName], eax
.text:0041171C                 call    sub_40EAB0
.text:00411721                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00411724                 mov     ebp, eax
.text:00411726                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0041172E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00411736                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0041173E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00411746                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0041174E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00411756                 call    CreateFileA
.text:0041175B                 sub     esp, 1Ch
.text:0041175E                 mov     ebx, eax
.text:00411760                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00411764                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00411767                 call    sub_40FFF0
.text:0041176C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0041176F                 mov     edi, eax
.text:00411771                 call    CloseHandle
.text:00411776                 sub     esp, 4
.text:00411779                 cmp     edi, 0FFFFFFFFh
.text:0041177C                 jz      short loc_4117DA
.text:0041177E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00411782                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00411785                 call    sub_4104C0
.text:0041178A
.text:0041178A loc_41178A:                             ; CODE XREF: sub_40E610+31D8↓j
.text:0041178A                 mov     edx, [esi]
.text:0041178C                 and     edx, 0F000h
.text:00411792                 cmp     edx, 4000h
.text:00411798                 jz      short loc_4117CD
.text:0041179A
.text:0041179A loc_41179A:                             ; CODE XREF: sub_40E610+31C8↓j
.text:0041179A                 cmp     edi, 0FFFFFFFFh
.text:0041179D                 jz      short loc_4117BD
.text:0041179F
.text:0041179F loc_41179F:                             ; CODE XREF: sub_40E610+31BB↓j
.text:0041179F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:004117A6                 call    SetErrorMode
.text:004117AB                 sub     esp, 4
.text:004117AE                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:004117B1                 call    free
.text:004117B6                 mov     edx, edi
.text:004117B8                 jmp     loc_4116E2
.text:004117BD ; ---------------------------------------------------------------------------
.text:004117BD
.text:004117BD loc_4117BD:                             ; CODE XREF: sub_40E610+318D↑j
.text:004117BD                 call    sub_40FCA0
.text:004117C2                 mov     esi, eax
.text:004117C4                 call    _errno
.text:004117C9                 mov     [eax], esi
.text:004117CB                 jmp     short loc_41179F
.text:004117CD ; ---------------------------------------------------------------------------
.text:004117CD
.text:004117CD loc_4117CD:                             ; CODE XREF: sub_40E610+3188↑j
.text:004117CD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:004117D0                 call    sub_40FE70
.text:004117D5                 mov     [esi+18h], eax
.text:004117D8                 jmp     short loc_41179A
.text:004117DA ; ---------------------------------------------------------------------------
.text:004117DA
.text:004117DA loc_4117DA:                             ; CODE XREF: sub_40E610+316C↑j
.text:004117DA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:004117DE                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:004117E1                 call    sub_4112A0
.text:004117E6                 mov     edi, eax
.text:004117E8                 jmp     short loc_41178A
.text:004117E8 ; END OF FUNCTION CHUNK FOR sub_40E610
.text:004117E8 ; ---------------------------------------------------------------------------
.text:004117EA                 align 10h
.text:004117F0 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:00411A0F↓o
.text:004117FC aLu             db '%lu',0              ; DATA XREF: .text:00411A1F↓o
.text:00411800 asc_411800      db ' ',0                ; DATA XREF: .text:loc_411B08↓o
.text:00411802                 align 10h
.text:00411810 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00411810                                         ; DATA XREF: .text:00411B3F↓o
.text:00411830 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_411B4D↓o
.text:0041183C aServer         db ' Server',0          ; DATA XREF: .text:00411B76↓o
.text:0041183C                                         ; .text:loc_411CEE↓o
.text:00411844 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_411B88↓o
.text:00411855 aDatacenterServ db ' Datacenter Server',0
.text:00411855                                         ; DATA XREF: .text:loc_411B92↓o
.text:00411868 aStandardEditio db ' Standard Edition',0
.text:00411868                                         ; DATA XREF: .text:00411BBA↓o
.text:0041187A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_411BC4↓o
.text:00411887 aEnterpriseEdit db ' Enterprise Edition',0
.text:00411887                                         ; DATA XREF: .text:loc_411BCE↓o
.text:0041189B aDatacenterEdit db ' Datacenter Edition',0
.text:0041189B                                         ; DATA XREF: .text:loc_411BD8↓o
.text:004118AF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:00411BEB↓o
.text:004118BD aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_411BF5↓o
.text:004118BD                                         ; .text:loc_411D00↓o
.text:004118CB                 align 10h
.text:004118D0 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:004118D0                                         ; DATA XREF: .text:00411C22↓o
.text:00411900 aProducttype    db 'ProductType',0      ; DATA XREF: .text:00411C69↓o
.text:0041190C aWinnt          db 'WINNT',0            ; DATA XREF: .text:00411CA4↓o
.text:00411912 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:00411CBB↓o
.text:0041191B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00411CD2↓o
.text:00411924                 align 10h
.text:00411930 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00411930                                         ; DATA XREF: .text:00411E47↓o
.text:00411953                 db 1Dh dup(90h)
.text:00411970 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:00411970                                         ; DATA XREF: .text:00411EA6↓o
.text:00411996 ; ---------------------------------------------------------------------------
.text:00411996
.text:00411996 loc_411996:                             ; DATA XREF: .text:loc_411F11↓o
.text:00411996                 and     [ebx+45h], dl
.text:00411999                 add     [eax], ah
.text:0041199B                 push    ebx
.text:0041199C                 push    eax
.text:0041199D                 xor     [eax], eax
.text:0041199F
.text:0041199F loc_41199F:                             ; DATA XREF: .text:loc_411F8B↓o
.text:0041199F                 and     [edi+53h], cl
.text:004119A2                 push    edx
.text:004119A3                 xor     al, [eax]
.text:004119A5                 lea     esi, [esi+0]
.text:004119A9                 lea     edi, [edi+0]
.text:004119B0                 push    edi
.text:004119B1                 push    esi
.text:004119B2                 push    ebx
.text:004119B3                 sub     esp, 130h
.text:004119B9                 mov     ebx, [esp+140h]
.text:004119C0                 call    sub_4120C0
.text:004119C5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004119CA                 cmp     eax, 1
.text:004119CD                 jz      loc_411E70
.text:004119D3                 cmp     eax, 1
.text:004119D6                 jb      loc_411E46
.text:004119DC                 cmp     eax, 2
.text:004119DF                 jz      loc_411A90
.text:004119E5                 cmp     eax, 3
.text:004119E8                 jz      short loc_411A4F
.text:004119EA                 lea     esi, [esi+0]
.text:004119F0
.text:004119F0 loc_4119F0:                             ; CODE XREF: .text:00411A85↓j
.text:004119F0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004119F6                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004119FC
.text:004119FC loc_4119FC:                             ; CODE XREF: .text:00411E8F↓j
.text:004119FC                 mov     [esp+10h], edx
.text:00411A00                 mov     ebx, [esp+144h]
.text:00411A07                 mov     [esp+0Ch], ecx
.text:00411A0B                 mov     [esp+8], eax
.text:00411A0F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00411A17                 mov     [esp], ebx
.text:00411A1A                 call    sprintf
.text:00411A1F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00411A27                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:00411A2D                 mov     ecx, [esp+148h]
.text:00411A34                 mov     [esp+8], edi
.text:00411A38                 mov     [esp], ecx
.text:00411A3B                 call    sprintf
.text:00411A40                 mov     eax, 1
.text:00411A45
.text:00411A45 loc_411A45:                             ; CODE XREF: .text:00411C3F↓j
.text:00411A45                                         ; .text:00411C8C↓j
.text:00411A45                 add     esp, 130h
.text:00411A4B                 pop     ebx
.text:00411A4C                 pop     esi
.text:00411A4D                 pop     edi
.text:00411A4E                 retn
.text:00411A4F ; ---------------------------------------------------------------------------
.text:00411A4F
.text:00411A4F loc_411A4F:                             ; CODE XREF: .text:004119E8↑j
.text:00411A4F                 mov     dword ptr [ebx], 7263694Dh
.text:00411A55                 mov     dword ptr [ebx+4], 666F736Fh
.text:00411A5C                 mov     dword ptr [ebx+8], 69572074h
.text:00411A63                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00411A6A                 mov     dword ptr [ebx+10h], 45432073h
.text:00411A71                 mov     word ptr [ebx+14h], 20h ; ' '
.text:00411A77                 mov     esi, esi
.text:00411A79                 lea     edi, [edi+0]
.text:00411A80
.text:00411A80 loc_411A80:                             ; CODE XREF: .text:00411B28↓j
.text:00411A80                                         ; .text:00411E69↓j ...
.text:00411A80                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00411A85                 jmp     loc_4119F0
.text:00411A85 ; ---------------------------------------------------------------------------
.text:00411A8A                 align 10h
.text:00411A90
.text:00411A90 loc_411A90:                             ; CODE XREF: .text:004119DF↑j
.text:00411A90                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:00411A96                 cmp     edx, 3
.text:00411A99                 mov     eax, edx
.text:00411A9B                 jz      loc_411E05
.text:00411AA1
.text:00411AA1 loc_411AA1:                             ; CODE XREF: .text:00411E0C↓j
.text:00411AA1                 cmp     eax, 4
.text:00411AA4                 jz      loc_411DC5
.text:00411AAA
.text:00411AAA loc_411AAA:                             ; CODE XREF: .text:00411DCD↓j
.text:00411AAA                 cmp     eax, 4
.text:00411AAD                 ja      loc_411D12
.text:00411AB3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00411AB9                 test    ecx, ecx
.text:00411ABB                 jnz     loc_411D12
.text:00411AC1                 mov     dword ptr [ebx], 7263694Dh
.text:00411AC7                 mov     dword ptr [ebx+4], 666F736Fh
.text:00411ACE                 mov     dword ptr [ebx+8], 69572074h
.text:00411AD5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00411ADC                 mov     dword ptr [ebx+10h], 544E2073h
.text:00411AE3
.text:00411AE3 loc_411AE3:                             ; CODE XREF: .text:00411D85↓j
.text:00411AE3                 mov     byte ptr [ebx+14h], 0
.text:00411AE7
.text:00411AE7 loc_411AE7:                             ; CODE XREF: .text:00411D15↓j
.text:00411AE7                                         ; .text:00411D2C↓j ...
.text:00411AE7                 mov     esi, dword_4180A0
.text:00411AED                 test    esi, esi
.text:00411AEF                 jz      loc_411C02
.text:00411AF5                 movzx   eax, ds:byte_41944A
.text:00411AFC                 cmp     al, 1
.text:00411AFE                 jz      loc_411BE2
.text:00411B04                 cmp     al, 3
.text:00411B06                 jz      short loc_411B2D
.text:00411B08
.text:00411B08 loc_411B08:                             ; CODE XREF: .text:00411B4B↓j
.text:00411B08                                         ; .text:00411B86↓j ...
.text:00411B08                 mov     dword ptr [esp+4], offset asc_411800 ; " "
.text:00411B10                 mov     [esp], ebx
.text:00411B13                 call    strcat
.text:00411B18                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00411B20                 mov     [esp], ebx
.text:00411B23                 call    strcat
.text:00411B28                 jmp     loc_411A80
.text:00411B2D ; ---------------------------------------------------------------------------
.text:00411B2D
.text:00411B2D loc_411B2D:                             ; CODE XREF: .text:00411B06↑j
.text:00411B2D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00411B34                 jz      short loc_411B56
.text:00411B36
.text:00411B36 loc_411B36:                             ; CODE XREF: .text:00411B62↓j
.text:00411B36                 test    byte ptr ds:word_419448, 2
.text:00411B3D                 jz      short loc_411B4D
.text:00411B3F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00411B46
.text:00411B46 loc_411B46:                             ; CODE XREF: .text:00411B54↓j
.text:00411B46                 call    printf
.text:00411B4B                 jmp     short loc_411B08
.text:00411B4D ; ---------------------------------------------------------------------------
.text:00411B4D
.text:00411B4D loc_411B4D:                             ; CODE XREF: .text:00411B3D↑j
.text:00411B4D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:00411B54                 jmp     short loc_411B46
.text:00411B56 ; ---------------------------------------------------------------------------
.text:00411B56
.text:00411B56 loc_411B56:                             ; CODE XREF: .text:00411B34↑j
.text:00411B56                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00411B5B                 cmp     eax, 2
.text:00411B5E                 jz      short loc_411BA0
.text:00411B60                 test    eax, eax
.text:00411B62                 jnz     short loc_411B36
.text:00411B64                 cmp     byte ptr ds:word_419448, 0
.text:00411B6B                 js      short loc_411B92
.text:00411B6D                 test    byte ptr ds:word_419448, 2
.text:00411B74                 jnz     short loc_411B88
.text:00411B76                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00411B7E
.text:00411B7E loc_411B7E:                             ; CODE XREF: .text:00411B90↓j
.text:00411B7E                                         ; .text:00411B9A↓j ...
.text:00411B7E                 mov     [esp], ebx
.text:00411B81                 call    strcat
.text:00411B86                 jmp     short loc_411B08
.text:00411B88 ; ---------------------------------------------------------------------------
.text:00411B88
.text:00411B88 loc_411B88:                             ; CODE XREF: .text:00411B74↑j
.text:00411B88                                         ; .text:00411CE9↓j
.text:00411B88                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:00411B90                 jmp     short loc_411B7E
.text:00411B92 ; ---------------------------------------------------------------------------
.text:00411B92
.text:00411B92 loc_411B92:                             ; CODE XREF: .text:00411B6B↑j
.text:00411B92                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:00411B9A                 jmp     short loc_411B7E
.text:00411B9A ; ---------------------------------------------------------------------------
.text:00411B9C                 align 10h
.text:00411BA0
.text:00411BA0 loc_411BA0:                             ; CODE XREF: .text:00411B5E↑j
.text:00411BA0                 cmp     byte ptr ds:word_419448, 0
.text:00411BA7                 js      short loc_411BD8
.text:00411BA9                 movzx   eax, ds:word_419448
.text:00411BB0                 test    al, 2
.text:00411BB2                 jnz     short loc_411BCE
.text:00411BB4                 cmp     ax, 400h
.text:00411BB8                 jz      short loc_411BC4
.text:00411BBA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:00411BC2                 jmp     short loc_411B7E
.text:00411BC4 ; ---------------------------------------------------------------------------
.text:00411BC4
.text:00411BC4 loc_411BC4:                             ; CODE XREF: .text:00411BB8↑j
.text:00411BC4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:00411BCC                 jmp     short loc_411B7E
.text:00411BCE ; ---------------------------------------------------------------------------
.text:00411BCE
.text:00411BCE loc_411BCE:                             ; CODE XREF: .text:00411BB2↑j
.text:00411BCE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00411BD6                 jmp     short loc_411B7E
.text:00411BD8 ; ---------------------------------------------------------------------------
.text:00411BD8
.text:00411BD8 loc_411BD8:                             ; CODE XREF: .text:00411BA7↑j
.text:00411BD8                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00411BE0                 jmp     short loc_411B7E
.text:00411BE2 ; ---------------------------------------------------------------------------
.text:00411BE2
.text:00411BE2 loc_411BE2:                             ; CODE XREF: .text:00411AFE↑j
.text:00411BE2                 test    byte ptr ds:word_419448+1, 2
.text:00411BE9                 jz      short loc_411BF5
.text:00411BEB                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00411BF3                 jmp     short loc_411B7E
.text:00411BF5 ; ---------------------------------------------------------------------------
.text:00411BF5
.text:00411BF5 loc_411BF5:                             ; CODE XREF: .text:00411BE9↑j
.text:00411BF5                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00411BFD                 jmp     loc_411B7E
.text:00411C02 ; ---------------------------------------------------------------------------
.text:00411C02
.text:00411C02 loc_411C02:                             ; CODE XREF: .text:00411AEF↑j
.text:00411C02                 mov     dword ptr [esp+28h], 0FFh
.text:00411C0A                 lea     edx, [esp+2Ch]
.text:00411C0E                 mov     [esp+10h], edx
.text:00411C12                 mov     dword ptr [esp+0Ch], 1
.text:00411C1A                 mov     dword ptr [esp+8], 0
.text:00411C22                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:00411C2A                 mov     dword ptr [esp], 80000002h
.text:00411C31                 call    RegOpenKeyExA
.text:00411C36                 mov     edi, eax
.text:00411C38                 sub     esp, 14h
.text:00411C3B                 xor     eax, eax
.text:00411C3D                 test    edi, edi
.text:00411C3F                 jnz     loc_411A45
.text:00411C45                 mov     dword ptr [esp+0Ch], 0
.text:00411C4D                 mov     edi, [esp+2Ch]
.text:00411C51                 lea     esi, [esp+28h]
.text:00411C55                 mov     [esp+14h], esi
.text:00411C59                 lea     esi, [esp+30h]
.text:00411C5D                 mov     [esp+10h], esi
.text:00411C61                 mov     dword ptr [esp+8], 0
.text:00411C69                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:00411C71                 mov     [esp], edi
.text:00411C74                 call    RegQueryValueExA
.text:00411C79                 sub     esp, 18h
.text:00411C7C                 test    eax, eax
.text:00411C7E                 jnz     short loc_411C8A
.text:00411C80                 cmp     dword ptr [esp+28h], 0FFh
.text:00411C88                 jbe     short loc_411C91
.text:00411C8A
.text:00411C8A loc_411C8A:                             ; CODE XREF: .text:00411C7E↑j
.text:00411C8A                 xor     eax, eax
.text:00411C8C                 jmp     loc_411A45
.text:00411C91 ; ---------------------------------------------------------------------------
.text:00411C91
.text:00411C91 loc_411C91:                             ; CODE XREF: .text:00411C88↑j
.text:00411C91                 mov     edx, [esp+2Ch]
.text:00411C95                 mov     [esp], edx
.text:00411C98                 call    RegCloseKey
.text:00411C9D                 sub     esp, 4
.text:00411CA0                 mov     [esp+4], esi
.text:00411CA4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:00411CAB                 call    lstrcmpiA
.text:00411CB0                 sub     esp, 8
.text:00411CB3                 test    eax, eax
.text:00411CB5                 jz      short loc_411D00
.text:00411CB7
.text:00411CB7 loc_411CB7:                             ; CODE XREF: .text:00411D10↓j
.text:00411CB7                 mov     [esp+4], esi
.text:00411CBB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:00411CC2                 call    lstrcmpiA
.text:00411CC7                 sub     esp, 8
.text:00411CCA                 test    eax, eax
.text:00411CCC                 jz      short loc_411CEE
.text:00411CCE
.text:00411CCE loc_411CCE:                             ; CODE XREF: .text:00411CFE↓j
.text:00411CCE                 mov     [esp+4], esi
.text:00411CD2                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00411CD9                 call    lstrcmpiA
.text:00411CDE                 sub     esp, 8
.text:00411CE1                 test    eax, eax
.text:00411CE3                 jnz     loc_411B08
.text:00411CE9                 jmp     loc_411B88
.text:00411CEE ; ---------------------------------------------------------------------------
.text:00411CEE
.text:00411CEE loc_411CEE:                             ; CODE XREF: .text:00411CCC↑j
.text:00411CEE                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00411CF6                 mov     [esp], ebx
.text:00411CF9                 call    strcat
.text:00411CFE                 jmp     short loc_411CCE
.text:00411D00 ; ---------------------------------------------------------------------------
.text:00411D00
.text:00411D00 loc_411D00:                             ; CODE XREF: .text:00411CB5↑j
.text:00411D00                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00411D08                 mov     [esp], ebx
.text:00411D0B                 call    strcat
.text:00411D10                 jmp     short loc_411CB7
.text:00411D12 ; ---------------------------------------------------------------------------
.text:00411D12
.text:00411D12 loc_411D12:                             ; CODE XREF: .text:00411AAD↑j
.text:00411D12                                         ; .text:00411ABB↑j
.text:00411D12                 cmp     eax, 5
.text:00411D15                 jnz     loc_411AE7
.text:00411D1B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00411D20                 cmp     eax, 2
.text:00411D23                 jz      short loc_411D8A
.text:00411D25                 cmp     eax, 1
.text:00411D28                 jz      short loc_411D63
.text:00411D2A                 test    eax, eax
.text:00411D2C                 jnz     loc_411AE7
.text:00411D32                 mov     dword ptr [ebx], 7263694Dh
.text:00411D38                 mov     dword ptr [ebx+4], 666F736Fh
.text:00411D3F                 mov     dword ptr [ebx+8], 69572074h
.text:00411D46                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00411D4D                 mov     dword ptr [ebx+10h], 30322073h
.text:00411D54                 mov     word ptr [ebx+14h], 3030h
.text:00411D5A                 mov     byte ptr [ebx+16h], 0
.text:00411D5E                 jmp     loc_411AE7
.text:00411D63 ; ---------------------------------------------------------------------------
.text:00411D63
.text:00411D63 loc_411D63:                             ; CODE XREF: .text:00411D28↑j
.text:00411D63                 mov     dword ptr [ebx], 7263694Dh
.text:00411D69                 mov     dword ptr [ebx+4], 666F736Fh
.text:00411D70                 mov     dword ptr [ebx+8], 69572074h
.text:00411D77                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00411D7E                 mov     dword ptr [ebx+10h], 50582073h
.text:00411D85                 jmp     loc_411AE3
.text:00411D8A ; ---------------------------------------------------------------------------
.text:00411D8A
.text:00411D8A loc_411D8A:                             ; CODE XREF: .text:00411D23↑j
.text:00411D8A                 mov     dword ptr [ebx], 7263694Dh
.text:00411D90                 mov     dword ptr [ebx+4], 666F736Fh
.text:00411D97                 mov     dword ptr [ebx+8], 69572074h
.text:00411D9E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00411DA5                 mov     dword ptr [ebx+10h], 65532073h
.text:00411DAC                 mov     dword ptr [ebx+14h], 72657672h
.text:00411DB3                 mov     dword ptr [ebx+18h], 30303220h
.text:00411DBA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00411DC0                 jmp     loc_411AE7
.text:00411DC5 ; ---------------------------------------------------------------------------
.text:00411DC5
.text:00411DC5 loc_411DC5:                             ; CODE XREF: .text:00411AA4↑j
.text:00411DC5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00411DCB                 test    edx, edx
.text:00411DCD                 jnz     loc_411AAA
.text:00411DD3                 mov     dword ptr [ebx], 7263694Dh
.text:00411DD9                 mov     dword ptr [ebx+4], 666F736Fh
.text:00411DE0                 mov     dword ptr [ebx+8], 69572074h
.text:00411DE7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00411DEE                 mov     dword ptr [ebx+10h], 544E2073h
.text:00411DF5                 mov     dword ptr [ebx+14h], 302E3420h
.text:00411DFC                 mov     byte ptr [ebx+18h], 0
.text:00411E00                 jmp     loc_411AE7
.text:00411E05 ; ---------------------------------------------------------------------------
.text:00411E05
.text:00411E05 loc_411E05:                             ; CODE XREF: .text:00411A9B↑j
.text:00411E05                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:00411E0C                 jnz     loc_411AA1
.text:00411E12                 mov     dword ptr [ebx], 7263694Dh
.text:00411E18                 mov     dword ptr [ebx+4], 666F736Fh
.text:00411E1F                 mov     dword ptr [ebx+8], 69572074h
.text:00411E26                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00411E2D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00411E34                 mov     dword ptr [ebx+14h], 352E3320h
.text:00411E3B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00411E41                 jmp     loc_411AE7
.text:00411E46 ; ---------------------------------------------------------------------------
.text:00411E46
.text:00411E46 loc_411E46:                             ; CODE XREF: .text:004119D6↑j
.text:00411E46                 cld
.text:00411E47                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:00411E4C                 mov     ecx, 8
.text:00411E51                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00411E58                 mov     edi, ebx
.text:00411E5A                 rep movsd
.text:00411E5C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00411E63                 mov     [edi+2], dl
.text:00411E66                 mov     [edi], si
.text:00411E69                 jmp     loc_411A80
.text:00411E69 ; ---------------------------------------------------------------------------
.text:00411E6E                 align 10h
.text:00411E70
.text:00411E70 loc_411E70:                             ; CODE XREF: .text:004119CD↑j
.text:00411E70                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00411E76                 cmp     ecx, 4
.text:00411E79                 jz      loc_411F30
.text:00411E7F
.text:00411E7F loc_411E7F:                             ; CODE XREF: .text:00411F86↓j
.text:00411E7F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00411E85
.text:00411E85 loc_411E85:                             ; CODE XREF: .text:00411F38↓j
.text:00411E85                 cmp     ecx, 4
.text:00411E88                 jz      short loc_411E94
.text:00411E8A
.text:00411E8A loc_411E8A:                             ; CODE XREF: .text:00411E9C↓j
.text:00411E8A                                         ; .text:00411EA1↓j
.text:00411E8A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00411E8F                 jmp     loc_4119FC
.text:00411E94 ; ---------------------------------------------------------------------------
.text:00411E94
.text:00411E94 loc_411E94:                             ; CODE XREF: .text:00411E88↑j
.text:00411E94                 cmp     edx, 0Ah
.text:00411E97                 jz      short loc_411EC1
.text:00411E99
.text:00411E99 loc_411E99:                             ; CODE XREF: .text:00411F0F↓j
.text:00411E99                 cmp     ecx, 4
.text:00411E9C                 jnz     short loc_411E8A
.text:00411E9E                 cmp     edx, 5Ah ; 'Z'
.text:00411EA1                 jnz     short loc_411E8A
.text:00411EA3                 cld
.text:00411EA4                 mov     edi, ebx
.text:00411EA6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:00411EAB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00411EB2                 mov     ecx, 9
.text:00411EB7                 rep movsd
.text:00411EB9                 mov     [edi], bx
.text:00411EBC                 jmp     loc_411A80
.text:00411EC1 ; ---------------------------------------------------------------------------
.text:00411EC1
.text:00411EC1 loc_411EC1:                             ; CODE XREF: .text:00411E97↑j
.text:00411EC1                 mov     dword ptr [ebx], 7263694Dh
.text:00411EC7                 mov     dword ptr [ebx+4], 666F736Fh
.text:00411ECE                 mov     dword ptr [ebx+8], 69572074h
.text:00411ED5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00411EDC                 mov     dword ptr [ebx+10h], 38392073h
.text:00411EE3                 mov     byte ptr [ebx+14h], 0
.text:00411EE7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00411EED                 lea     edi, [edx-7CFh]
.text:00411EF3                 cmp     edi, 0B7h ; '·'
.text:00411EF9                 jbe     short loc_411F23
.text:00411EFB                 cmp     edx, 886h
.text:00411F01                 ja      short loc_411F11
.text:00411F03
.text:00411F03 loc_411F03:                             ; CODE XREF: .text:00411F21↓j
.text:00411F03                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00411F09                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00411F0F                 jmp     short loc_411E99
.text:00411F11 ; ---------------------------------------------------------------------------
.text:00411F11
.text:00411F11 loc_411F11:                             ; CODE XREF: .text:00411F01↑j
.text:00411F11                 mov     dword ptr [esp+4], offset loc_411996
.text:00411F19
.text:00411F19 loc_411F19:                             ; CODE XREF: .text:00411F2B↓j
.text:00411F19                 mov     [esp], ebx
.text:00411F1C                 call    strcat
.text:00411F21                 jmp     short loc_411F03
.text:00411F23 ; ---------------------------------------------------------------------------
.text:00411F23
.text:00411F23 loc_411F23:                             ; CODE XREF: .text:00411EF9↑j
.text:00411F23                 mov     dword ptr [esp+4], 41199Ah
.text:00411F2B                 jmp     short loc_411F19
.text:00411F2B ; ---------------------------------------------------------------------------
.text:00411F2D                 align 10h
.text:00411F30
.text:00411F30 loc_411F30:                             ; CODE XREF: .text:00411E79↑j
.text:00411F30                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00411F36                 test    edx, edx
.text:00411F38                 jnz     loc_411E85
.text:00411F3E                 mov     dword ptr [ebx], 7263694Dh
.text:00411F44                 mov     dword ptr [ebx+4], 666F736Fh
.text:00411F4B                 mov     dword ptr [ebx+8], 69572074h
.text:00411F52                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00411F59                 mov     dword ptr [ebx+10h], 35392073h
.text:00411F60                 mov     byte ptr [ebx+14h], 0
.text:00411F64                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00411F6A                 lea     ecx, [edx-3B7h]
.text:00411F70                 cmp     ecx, 81h
.text:00411F76                 jbe     short loc_411F9D
.text:00411F78                 cmp     edx, 438h
.text:00411F7E                 ja      short loc_411F8B
.text:00411F80
.text:00411F80 loc_411F80:                             ; CODE XREF: .text:00411F9B↓j
.text:00411F80                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00411F86                 jmp     loc_411E7F
.text:00411F8B ; ---------------------------------------------------------------------------
.text:00411F8B
.text:00411F8B loc_411F8B:                             ; CODE XREF: .text:00411F7E↑j
.text:00411F8B                 mov     dword ptr [esp+4], offset loc_41199F
.text:00411F93
.text:00411F93 loc_411F93:                             ; CODE XREF: .text:00411FA5↓j
.text:00411F93                 mov     [esp], ebx
.text:00411F96                 call    strcat
.text:00411F9B                 jmp     short loc_411F80
.text:00411F9D ; ---------------------------------------------------------------------------
.text:00411F9D
.text:00411F9D loc_411F9D:                             ; CODE XREF: .text:00411F76↑j
.text:00411F9D                 mov     dword ptr [esp+4], 41199Ah
.text:00411FA5                 jmp     short loc_411F93
.text:00411FA5 ; ---------------------------------------------------------------------------
.text:00411FA7                 align 10h
.text:00411FB0
.text:00411FB0 ; =============== S U B R O U T I N E =======================================
.text:00411FB0
.text:00411FB0
.text:00411FB0 sub_411FB0      proc near               ; CODE XREF: .text:0041340E↓p
.text:00411FB0                                         ; sub_413890+12A↓p
.text:00411FB0                 sub     esp, 0Ch
.text:00411FB3                 call    sub_4120C0
.text:00411FB8                 mov     eax, ds:dword_4193A0
.text:00411FBD                 add     esp, 0Ch
.text:00411FC0                 retn
.text:00411FC0 sub_411FB0      endp
.text:00411FC0
.text:00411FC1 ; ---------------------------------------------------------------------------
.text:00411FC1                 jmp     short loc_411FD0
.text:00411FC1 ; ---------------------------------------------------------------------------
.text:00411FC3                 align 10h
.text:00411FD0
.text:00411FD0 loc_411FD0:                             ; CODE XREF: .text:00411FC1↑j
.text:00411FD0                 sub     esp, 0Ch
.text:00411FD3                 call    sub_4120C0
.text:00411FD8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00411FDD                 add     esp, 0Ch
.text:00411FE0                 retn
.text:00411FE1 ; ---------------------------------------------------------------------------
.text:00411FE1                 jmp     short loc_411FF0
.text:00411FE1 ; ---------------------------------------------------------------------------
.text:00411FE3                 align 10h
.text:00411FF0
.text:00411FF0 loc_411FF0:                             ; CODE XREF: .text:00411FE1↑j
.text:00411FF0                 sub     esp, 0Ch
.text:00411FF3                 call    sub_4120C0
.text:00411FF8                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00411FFD                 add     esp, 0Ch
.text:00412000                 retn
.text:00412001 ; ---------------------------------------------------------------------------
.text:00412001                 jmp     short loc_412010
.text:00412001 ; ---------------------------------------------------------------------------
.text:00412003                 align 10h
.text:00412010
.text:00412010 loc_412010:                             ; CODE XREF: .text:00412001↑j
.text:00412010                 sub     esp, 0Ch
.text:00412013                 call    sub_4120C0
.text:00412018                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041201D                 add     esp, 0Ch
.text:00412020                 retn
.text:00412021 ; ---------------------------------------------------------------------------
.text:00412021                 jmp     short loc_412030
.text:00412021 ; ---------------------------------------------------------------------------
.text:00412023                 align 10h
.text:00412030
.text:00412030 loc_412030:                             ; CODE XREF: .text:00412021↑j
.text:00412030                 sub     esp, 0Ch
.text:00412033                 call    GetVersion
.text:00412038                 shr     eax, 10h
.text:0041203B                 add     esp, 0Ch
.text:0041203E                 retn
.text:0041203E ; ---------------------------------------------------------------------------
.text:0041203F                 align 10h
.text:00412040                 sub     esp, 0Ch
.text:00412043                 call    sub_4120C0
.text:00412048                 xor     eax, eax
.text:0041204A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:00412051                 setz    al
.text:00412054                 add     esp, 0Ch
.text:00412057                 retn
.text:00412057 ; ---------------------------------------------------------------------------
.text:00412058                 align 10h
.text:00412060
.text:00412060 ; =============== S U B R O U T I N E =======================================
.text:00412060
.text:00412060
.text:00412060 sub_412060      proc near               ; CODE XREF: .text:loc_40EE10↑p
.text:00412060                                         ; .text:loc_4133F4↓p ...
.text:00412060                 sub     esp, 0Ch
.text:00412063                 call    sub_4120C0
.text:00412068                 xor     eax, eax
.text:0041206A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00412071                 setz    al
.text:00412074                 add     esp, 0Ch
.text:00412077                 retn
.text:00412077 sub_412060      endp
.text:00412077
.text:00412077 ; ---------------------------------------------------------------------------
.text:00412078                 align 10h
.text:00412080                 sub     esp, 0Ch
.text:00412083                 call    sub_4120C0
.text:00412088                 xor     eax, eax
.text:0041208A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:00412091                 setz    al
.text:00412094                 add     esp, 0Ch
.text:00412097                 retn
.text:00412097 ; ---------------------------------------------------------------------------
.text:00412098                 align 10h
.text:004120A0                 sub     esp, 0Ch
.text:004120A3                 call    sub_4120C0
.text:004120A8                 xor     eax, eax
.text:004120AA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:004120B1                 setz    al
.text:004120B4                 add     esp, 0Ch
.text:004120B7                 retn
.text:004120B7 ; ---------------------------------------------------------------------------
.text:004120B8                 align 10h
.text:004120C0
.text:004120C0 ; =============== S U B R O U T I N E =======================================
.text:004120C0
.text:004120C0
.text:004120C0 sub_4120C0      proc near               ; CODE XREF: .text:004119C0↑p
.text:004120C0                                         ; sub_411FB0+3↑p ...
.text:004120C0
.text:004120C0 lpVersionInformation= dword ptr -0BCh
.text:004120C0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:004120C0
.text:004120C0                 sub     esp, 0BCh
.text:004120C6                 mov     edx, ds:dword_419450
.text:004120CC                 test    edx, edx
.text:004120CE                 jz      short loc_4120E0
.text:004120D0
.text:004120D0 loc_4120D0:                             ; CODE XREF: sub_4120C0+7B↓j
.text:004120D0                 mov     edx, 1
.text:004120D5
.text:004120D5 loc_4120D5:                             ; CODE XREF: sub_4120C0+217↓j
.text:004120D5                 mov     eax, edx
.text:004120D7                 add     esp, 0BCh
.text:004120DD                 retn
.text:004120DD ; ---------------------------------------------------------------------------
.text:004120DE                 align 10h
.text:004120E0
.text:004120E0 loc_4120E0:                             ; CODE XREF: sub_4120C0+E↑j
.text:004120E0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:004120E7                 mov     edx, 9Ch ; 'œ'
.text:004120EC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:004120F2                 call    GetVersionExA
.text:004120F7                 sub     esp, 4
.text:004120FA                 test    eax, eax
.text:004120FC                 jz      loc_4122B4
.text:00412102
.text:00412102 loc_412102:                             ; CODE XREF: sub_4120C0+245↓j
.text:00412102                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00412109                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041210E                 cmp     eax, 1
.text:00412111                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00412117                 jz      loc_412200
.text:0041211D                 cmp     eax, 1
.text:00412120                 jb      loc_4121F0
.text:00412126                 cmp     eax, 2
.text:00412129                 jz      short loc_41214A
.text:0041212B                 cmp     eax, 3
.text:0041212E                 jz      short loc_41213D
.text:00412130
.text:00412130 loc_412130:                             ; CODE XREF: sub_4120C0+88↓j
.text:00412130                                         ; sub_4120C0+C0↓j ...
.text:00412130                 mov     edx, 1
.text:00412135                 mov     ds:dword_419450, edx
.text:0041213B                 jmp     short loc_4120D0
.text:0041213D ; ---------------------------------------------------------------------------
.text:0041213D
.text:0041213D loc_41213D:                             ; CODE XREF: sub_4120C0+6E↑j
.text:0041213D                 mov     ecx, 17h
.text:00412142
.text:00412142 loc_412142:                             ; CODE XREF: sub_4120C0+1A7↓j
.text:00412142                 mov     ds:dword_4193A0, ecx
.text:00412148                 jmp     short loc_412130
.text:0041214A ; ---------------------------------------------------------------------------
.text:0041214A
.text:0041214A loc_41214A:                             ; CODE XREF: sub_4120C0+69↑j
.text:0041214A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0041214F                 cmp     eax, 3
.text:00412152                 jz      short loc_4121CB
.text:00412154                 cmp     eax, 4
.text:00412157                 jz      short loc_4121BA
.text:00412159
.text:00412159 loc_412159:                             ; CODE XREF: sub_4120C0+102↓j
.text:00412159                 cmp     eax, 4
.text:0041215C                 ja      short loc_412182
.text:0041215E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00412164                 test    ecx, ecx
.text:00412166                 jnz     short loc_412182
.text:00412168                 mov     edx, 1Eh
.text:0041216D
.text:0041216D loc_41216D:                             ; CODE XREF: sub_4120C0+DF↓j
.text:0041216D                 mov     ds:dword_4193A0, edx
.text:00412173
.text:00412173 loc_412173:                             ; CODE XREF: sub_4120C0+C5↓j
.text:00412173                                         ; sub_4120C0+D8↓j ...
.text:00412173                 movzx   ecx, ds:word_419444
.text:0041217A                 add     ds:dword_4193A0, ecx
.text:00412180                 jmp     short loc_412130
.text:00412182 ; ---------------------------------------------------------------------------
.text:00412182
.text:00412182 loc_412182:                             ; CODE XREF: sub_4120C0+9C↑j
.text:00412182                                         ; sub_4120C0+A6↑j
.text:00412182                 cmp     eax, 5
.text:00412185                 jnz     short loc_412173
.text:00412187                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041218C                 cmp     eax, 2
.text:0041218F                 jz      short loc_4121AE
.text:00412191                 cmp     eax, 1
.text:00412194                 jz      short loc_4121A1
.text:00412196                 test    eax, eax
.text:00412198                 jnz     short loc_412173
.text:0041219A                 mov     edx, 32h ; '2'
.text:0041219F                 jmp     short loc_41216D
.text:004121A1 ; ---------------------------------------------------------------------------
.text:004121A1
.text:004121A1 loc_4121A1:                             ; CODE XREF: sub_4120C0+D4↑j
.text:004121A1                 mov     ecx, 3Ch ; '<'
.text:004121A6
.text:004121A6 loc_4121A6:                             ; CODE XREF: sub_4120C0+122↓j
.text:004121A6                 mov     ds:dword_4193A0, ecx
.text:004121AC                 jmp     short loc_412173
.text:004121AE ; ---------------------------------------------------------------------------
.text:004121AE
.text:004121AE loc_4121AE:                             ; CODE XREF: sub_4120C0+CF↑j
.text:004121AE                 mov     eax, 46h ; 'F'
.text:004121B3
.text:004121B3 loc_4121B3:                             ; CODE XREF: sub_4120C0+109↓j
.text:004121B3                                         ; sub_4120C0+129↓j
.text:004121B3                 mov     ds:dword_4193A0, eax
.text:004121B8                 jmp     short loc_412173
.text:004121BA ; ---------------------------------------------------------------------------
.text:004121BA
.text:004121BA loc_4121BA:                             ; CODE XREF: sub_4120C0+97↑j
.text:004121BA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004121C0                 test    ecx, ecx
.text:004121C2                 jnz     short loc_412159
.text:004121C4                 mov     eax, 28h ; '('
.text:004121C9                 jmp     short loc_4121B3
.text:004121CB ; ---------------------------------------------------------------------------
.text:004121CB
.text:004121CB loc_4121CB:                             ; CODE XREF: sub_4120C0+92↑j
.text:004121CB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004121D0                 cmp     eax, 33h ; '3'
.text:004121D3                 jz      short loc_4121E4
.text:004121D5                 cmp     eax, 5
.text:004121D8                 setz    cl
.text:004121DB                 movzx   edx, cl
.text:004121DE                 lea     ecx, [edx+edx*4+1Eh]
.text:004121E2                 jmp     short loc_4121A6
.text:004121E4 ; ---------------------------------------------------------------------------
.text:004121E4
.text:004121E4 loc_4121E4:                             ; CODE XREF: sub_4120C0+113↑j
.text:004121E4                 mov     eax, 24h ; '$'
.text:004121E9                 jmp     short loc_4121B3
.text:004121E9 ; ---------------------------------------------------------------------------
.text:004121EB                 align 10h
.text:004121F0
.text:004121F0 loc_4121F0:                             ; CODE XREF: sub_4120C0+60↑j
.text:004121F0                 mov     edx, 2
.text:004121F5                 mov     ds:dword_4193A0, edx
.text:004121FB                 jmp     loc_412130
.text:00412200 ; ---------------------------------------------------------------------------
.text:00412200
.text:00412200 loc_412200:                             ; CODE XREF: sub_4120C0+57↑j
.text:00412200                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00412206                 cmp     ecx, 4
.text:00412209                 jnz     loc_412130
.text:0041220F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00412214                 test    eax, eax
.text:00412216                 jnz     short loc_41223A
.text:00412218                 mov     eax, 0Ah
.text:0041221D                 mov     ds:dword_4193A0, eax
.text:00412222                 lea     eax, [edx-3B7h]
.text:00412228                 cmp     eax, 81h
.text:0041222D                 ja      short loc_4122A5
.text:0041222F                 mov     edx, 0Bh
.text:00412234
.text:00412234 loc_412234:                             ; CODE XREF: sub_4120C0+1F2↓j
.text:00412234                 mov     ds:dword_4193A0, edx
.text:0041223A
.text:0041223A loc_41223A:                             ; CODE XREF: sub_4120C0+156↑j
.text:0041223A                                         ; sub_4120C0+1EB↓j
.text:0041223A                 cmp     ecx, 4
.text:0041223D                 jnz     loc_412130
.text:00412243                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0041224A                 jz      short loc_41226C
.text:0041224C
.text:0041224C loc_41224C:                             ; CODE XREF: sub_4120C0+1D4↓j
.text:0041224C                                         ; sub_4120C0+1DC↓j
.text:0041224C                 cmp     ecx, 4
.text:0041224F                 jnz     loc_412130
.text:00412255                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0041225C                 jnz     loc_412130
.text:00412262                 mov     ecx, 12h
.text:00412267                 jmp     loc_412142
.text:0041226C ; ---------------------------------------------------------------------------
.text:0041226C
.text:0041226C loc_41226C:                             ; CODE XREF: sub_4120C0+18A↑j
.text:0041226C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00412272                 mov     eax, 0Eh
.text:00412277                 mov     ds:dword_4193A0, eax
.text:0041227C                 lea     eax, [edx-7CFh]
.text:00412282                 cmp     eax, 0B7h ; '·'
.text:00412287                 ja      short loc_412296
.text:00412289                 mov     edx, 0Fh
.text:0041228E
.text:0041228E loc_41228E:                             ; CODE XREF: sub_4120C0+1E3↓j
.text:0041228E                 mov     ds:dword_4193A0, edx
.text:00412294                 jmp     short loc_41224C
.text:00412296 ; ---------------------------------------------------------------------------
.text:00412296
.text:00412296 loc_412296:                             ; CODE XREF: sub_4120C0+1C7↑j
.text:00412296                 cmp     edx, 886h
.text:0041229C                 jbe     short loc_41224C
.text:0041229E                 mov     edx, 10h
.text:004122A3                 jmp     short loc_41228E
.text:004122A5 ; ---------------------------------------------------------------------------
.text:004122A5
.text:004122A5 loc_4122A5:                             ; CODE XREF: sub_4120C0+16D↑j
.text:004122A5                 cmp     edx, 438h
.text:004122AB                 jbe     short loc_41223A
.text:004122AD                 mov     edx, 0Ch
.text:004122B2                 jmp     short loc_412234
.text:004122B4 ; ---------------------------------------------------------------------------
.text:004122B4
.text:004122B4 loc_4122B4:                             ; CODE XREF: sub_4120C0+3C↑j
.text:004122B4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:004122BC                 xor     edx, edx
.text:004122BE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:004122C2                 mov     dword_4180A0, edx
.text:004122C8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:004122CB                 call    GetVersionExA
.text:004122D0                 sub     esp, 4
.text:004122D3                 xor     edx, edx
.text:004122D5                 test    eax, eax
.text:004122D7                 jz      loc_4120D5
.text:004122DD                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:004122E1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:004122E5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:004122EB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:004122EF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:004122F5                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:004122F9                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:004122FF                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00412305                 jmp     loc_412102
.text:00412305 sub_4120C0      endp
.text:00412305
.text:00412305 ; ---------------------------------------------------------------------------
.text:0041230A                 align 10h
.text:00412310
.text:00412310 ; =============== S U B R O U T I N E =======================================
.text:00412310
.text:00412310
.text:00412310 ; int __cdecl sub_412310(LPCSTR lpFileName, int)
.text:00412310 sub_412310      proc near               ; CODE XREF: .text:0040EA12↑p
.text:00412310                                         ; sub_40F3D0+29↑p ...
.text:00412310
.text:00412310 uMode           = dword ptr -1Ch
.text:00412310 var_10          = dword ptr -10h
.text:00412310 var_C           = dword ptr -0Ch
.text:00412310 var_8           = dword ptr -8
.text:00412310 var_4           = dword ptr -4
.text:00412310 lpFileName      = dword ptr  4
.text:00412310 arg_4           = dword ptr  8
.text:00412310
.text:00412310                 sub     esp, 1Ch
.text:00412313                 mov     [esp+1Ch+var_10], ebx
.text:00412317                 mov     ebx, [esp+1Ch+lpFileName]
.text:0041231B                 mov     [esp+1Ch+var_4], ebp
.text:0041231F                 xor     ebp, ebp
.text:00412321                 test    ebx, ebx
.text:00412323                 mov     [esp+1Ch+var_C], esi
.text:00412327                 mov     esi, [esp+1Ch+arg_4]
.text:0041232B                 mov     [esp+1Ch+var_8], edi
.text:0041232F                 jz      short loc_412339
.text:00412331                 test    esi, 0FFFFFFE8h
.text:00412337                 jz      short loc_412360
.text:00412339
.text:00412339 loc_412339:                             ; CODE XREF: sub_412310+1F↑j
.text:00412339                 call    _errno
.text:0041233E                 mov     dword ptr [eax], 16h
.text:00412344
.text:00412344 loc_412344:                             ; CODE XREF: sub_412310+B1↓j
.text:00412344                 mov     eax, 0FFFFFFFFh
.text:00412349
.text:00412349 loc_412349:                             ; CODE XREF: sub_412310+86↓j
.text:00412349                                         ; sub_412310+A4↓j
.text:00412349                 mov     ebx, [esp+1Ch+var_10]
.text:0041234D                 mov     esi, [esp+1Ch+var_C]
.text:00412351                 mov     edi, [esp+1Ch+var_8]
.text:00412355                 mov     ebp, [esp+1Ch+var_4]
.text:00412359                 add     esp, 1Ch
.text:0041235C                 retn
.text:0041235C ; ---------------------------------------------------------------------------
.text:0041235D                 align 10h
.text:00412360
.text:00412360 loc_412360:                             ; CODE XREF: sub_412310+27↑j
.text:00412360                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00412367                 call    SetErrorMode
.text:0041236C                 sub     esp, 4
.text:0041236F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00412372                 call    GetFileAttributesA
.text:00412377                 sub     esp, 4
.text:0041237A                 mov     edi, eax
.text:0041237C                 cmp     eax, 0FFFFFFFFh
.text:0041237F                 jz      short loc_4123C3
.text:00412381
.text:00412381 loc_412381:                             ; CODE XREF: sub_412310+C6↓j
.text:00412381                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00412388                 call    SetErrorMode
.text:0041238D                 sub     esp, 4
.text:00412390                 mov     eax, 0FFFFFFFFh
.text:00412395                 inc     ebp
.text:00412396                 jz      short loc_412349
.text:00412398                 test    esi, 10h
.text:0041239E                 jz      short loc_4123A8
.text:004123A0                 test    edi, 10h
.text:004123A6                 jz      short loc_4123B6
.text:004123A8
.text:004123A8 loc_4123A8:                             ; CODE XREF: sub_412310+8E↑j
.text:004123A8                 and     esi, 2
.text:004123AB                 jz      short loc_4123B2
.text:004123AD                 and     edi, 1
.text:004123B0                 jnz     short loc_4123B6
.text:004123B2
.text:004123B2 loc_4123B2:                             ; CODE XREF: sub_412310+9B↑j
.text:004123B2                 xor     eax, eax
.text:004123B4                 jmp     short loc_412349
.text:004123B6 ; ---------------------------------------------------------------------------
.text:004123B6
.text:004123B6 loc_4123B6:                             ; CODE XREF: sub_412310+96↑j
.text:004123B6                                         ; sub_412310+A0↑j
.text:004123B6                 call    _errno
.text:004123BB                 mov     dword ptr [eax], 0Dh
.text:004123C1                 jmp     short loc_412344
.text:004123C3 ; ---------------------------------------------------------------------------
.text:004123C3
.text:004123C3 loc_4123C3:                             ; CODE XREF: sub_412310+6F↑j
.text:004123C3                 call    sub_40FCA0
.text:004123C8                 mov     ebp, eax
.text:004123CA                 call    _errno
.text:004123CF                 mov     [eax], ebp
.text:004123D1                 mov     ebp, 0FFFFFFFFh
.text:004123D6                 jmp     short loc_412381
.text:004123D6 sub_412310      endp
.text:004123D6
.text:004123D6 ; ---------------------------------------------------------------------------
.text:004123D8                 align 10h
.text:004123E0                 sub     esp, 2Ch
.text:004123E3                 lea     edx, [esp+28h]
.text:004123E7                 mov     [esp+10h], edx
.text:004123EB                 mov     edx, [esp+30h]
.text:004123EF                 mov     dword ptr [esp+18h], 0
.text:004123F7                 mov     dword ptr [esp+14h], 0
.text:004123FF                 mov     dword ptr [esp+0Ch], 400h
.text:00412407                 mov     [esp+8], edx
.text:0041240B                 mov     dword ptr [esp+4], 0
.text:00412413                 mov     dword ptr [esp], 13FFh
.text:0041241A                 call    FormatMessageA
.text:0041241F                 sub     esp, 1Ch
.text:00412422                 mov     eax, [esp+28h]
.text:00412426                 add     esp, 2Ch
.text:00412429                 retn
.text:00412429 ; ---------------------------------------------------------------------------
.text:0041242A ; const char aSWindowsErrorL[]
.text:0041242A aSWindowsErrorL db '%s: Windows error %ld: %s',0Ah,0
.text:0041242A                                         ; DATA XREF: .text:004124A6↓o
.text:0041242A                                         ; sub_4124E0+59↓o ...
.text:00412445                 align 10h
.text:00412450                 sub     esp, 2Ch
.text:00412453                 lea     ecx, [esp+20h]
.text:00412457                 mov     [esp+28h], esi
.text:0041245B                 mov     esi, [esp+34h]
.text:0041245F                 mov     [esp+10h], ecx
.text:00412463                 mov     [esp+24h], ebx
.text:00412467                 mov     [esp+8], esi
.text:0041246B                 mov     dword ptr [esp+18h], 0
.text:00412473                 mov     dword ptr [esp+14h], 0
.text:0041247B                 mov     dword ptr [esp+0Ch], 400h
.text:00412483                 mov     dword ptr [esp+4], 0
.text:0041248B                 mov     dword ptr [esp], 13FFh
.text:00412492                 call    FormatMessageA
.text:00412497                 sub     esp, 1Ch
.text:0041249A                 mov     edx, [esp+30h]
.text:0041249E                 mov     [esp+0Ch], esi
.text:004124A2                 mov     ebx, [esp+20h]
.text:004124A6                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:004124AE                 mov     [esp+8], edx
.text:004124B2                 mov     edx, ds:_iob
.text:004124B8                 mov     [esp+10h], ebx
.text:004124BC                 add     edx, 40h ; '@'
.text:004124BF                 mov     [esp], edx
.text:004124C2                 call    fprintf
.text:004124C7                 mov     [esp], ebx
.text:004124CA                 call    LocalFree
.text:004124CF                 sub     esp, 4
.text:004124D2                 mov     ebx, [esp+24h]
.text:004124D6                 mov     esi, [esp+28h]
.text:004124DA                 add     esp, 2Ch
.text:004124DD                 retn
.text:004124DD ; ---------------------------------------------------------------------------
.text:004124DE                 align 10h
.text:004124E0
.text:004124E0 ; =============== S U B R O U T I N E =======================================
.text:004124E0
.text:004124E0
.text:004124E0 sub_4124E0      proc near               ; CODE XREF: sub_40F0F0+1A9↑p
.text:004124E0
.text:004124E0 dwFlags         = dword ptr -2Ch
.text:004124E0 lpSource        = dword ptr -28h
.text:004124E0 dwMessageId     = dword ptr -24h
.text:004124E0 dwLanguageId    = dword ptr -20h
.text:004124E0 lpBuffer        = dword ptr -1Ch
.text:004124E0 nSize           = dword ptr -18h
.text:004124E0 Arguments       = dword ptr -14h
.text:004124E0 Buffer          = byte ptr -0Ch
.text:004124E0 var_8           = dword ptr -8
.text:004124E0 var_4           = dword ptr -4
.text:004124E0 arg_0           = dword ptr  4
.text:004124E0
.text:004124E0                 sub     esp, 2Ch
.text:004124E3                 mov     [esp+2Ch+var_8], ebx
.text:004124E7                 mov     [esp+2Ch+var_4], esi
.text:004124EB                 call    GetLastError
.text:004124F0                 mov     [esp+2Ch+dwMessageId], eax ; dwMessageId
.text:004124F4                 lea     ecx, [esp+2Ch+Buffer]
.text:004124F8                 mov     esi, eax
.text:004124FA                 mov     [esp+2Ch+lpBuffer], ecx ; lpBuffer
.text:004124FE                 mov     [esp+2Ch+Arguments], 0 ; Arguments
.text:00412506                 mov     [esp+2Ch+nSize], 0 ; nSize
.text:0041250E                 mov     [esp+2Ch+dwLanguageId], 400h ; dwLanguageId
.text:00412516                 mov     [esp+2Ch+lpSource], 0 ; lpSource
.text:0041251E                 mov     [esp+2Ch+dwFlags], 13FFh ; dwFlags
.text:00412525                 call    FormatMessageA
.text:0041252A                 sub     esp, 1Ch
.text:0041252D                 mov     edx, [esp+2Ch+arg_0]
.text:00412531                 mov     [esp+2Ch+dwLanguageId], esi
.text:00412535                 mov     ebx, dword ptr [esp+2Ch+Buffer]
.text:00412539                 mov     [esp+2Ch+lpSource], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:00412541                 mov     [esp+2Ch+dwMessageId], edx
.text:00412545                 mov     edx, ds:_iob
.text:0041254B                 mov     [esp+2Ch+lpBuffer], ebx
.text:0041254F                 add     edx, 40h ; '@'
.text:00412552                 mov     [esp+2Ch+dwFlags], edx ; Stream
.text:00412555                 call    fprintf
.text:0041255A                 mov     [esp+2Ch+dwFlags], ebx ; hMem
.text:0041255D                 call    LocalFree
.text:00412562                 sub     esp, 4
.text:00412565                 mov     ebx, [esp+2Ch+var_8]
.text:00412569                 mov     esi, [esp+2Ch+var_4]
.text:0041256D                 add     esp, 2Ch
.text:00412570                 retn
.text:00412570 sub_4124E0      endp
.text:00412570
.text:00412570 ; ---------------------------------------------------------------------------
.text:00412571 aNtdllDll       db 'ntdll.dll',0        ; DATA XREF: .text:004125A3↓o
.text:00412571                                         ; .text:004125FB↓o
.text:0041257B aRtlntstatustod db 'RtlNtStatusToDosError',0
.text:0041257B                                         ; DATA XREF: .text:004125B2↓o
.text:0041257B                                         ; .text:0041260A↓o
.text:00412591 ; ---------------------------------------------------------------------------
.text:00412591                 jmp     short loc_4125A0
.text:00412591 ; ---------------------------------------------------------------------------
.text:00412593                 align 10h
.text:004125A0
.text:004125A0 loc_4125A0:                             ; CODE XREF: .text:00412591↑j
.text:004125A0                 sub     esp, 0Ch
.text:004125A3                 mov     dword ptr [esp], offset aNtdllDll ; "ntdll.dll"
.text:004125AA                 call    GetModuleHandleA
.text:004125AF                 sub     esp, 4
.text:004125B2                 mov     dword ptr [esp+4], offset aRtlntstatustod ; "RtlNtStatusToDosError"
.text:004125BA                 mov     [esp], eax
.text:004125BD                 call    GetProcAddress
.text:004125C2                 sub     esp, 8
.text:004125C5                 test    eax, eax
.text:004125C7                 jz      short loc_4125E0
.text:004125C9                 mov     ecx, [esp+10h]
.text:004125CD                 mov     [esp], ecx
.text:004125D0                 call    eax
.text:004125D2                 sub     esp, 4
.text:004125D5                 mov     [esp], eax
.text:004125D8                 call    SetLastError
.text:004125DD                 sub     esp, 4
.text:004125E0
.text:004125E0 loc_4125E0:                             ; CODE XREF: .text:004125C7↑j
.text:004125E0                 add     esp, 0Ch
.text:004125E3                 retn
.text:004125E3 ; ---------------------------------------------------------------------------
.text:004125E4                 align 10h
.text:004125F0                 sub     esp, 2Ch
.text:004125F3                 mov     [esp+24h], ebx
.text:004125F7                 mov     [esp+28h], esi
.text:004125FB                 mov     dword ptr [esp], offset aNtdllDll ; "ntdll.dll"
.text:00412602                 call    GetModuleHandleA
.text:00412607                 sub     esp, 4
.text:0041260A                 mov     dword ptr [esp+4], offset aRtlntstatustod ; "RtlNtStatusToDosError"
.text:00412612                 mov     [esp], eax
.text:00412615                 call    GetProcAddress
.text:0041261A                 sub     esp, 8
.text:0041261D                 test    eax, eax
.text:0041261F                 jz      loc_4126A6
.text:00412625                 mov     ebx, [esp+34h]
.text:00412629                 mov     [esp], ebx
.text:0041262C                 call    eax
.text:0041262E                 sub     esp, 4
.text:00412631                 mov     esi, eax
.text:00412633                 lea     ecx, [esp+20h]
.text:00412637                 mov     [esp+10h], ecx
.text:0041263B                 mov     dword ptr [esp+18h], 0
.text:00412643                 mov     dword ptr [esp+14h], 0
.text:0041264B                 mov     dword ptr [esp+0Ch], 400h
.text:00412653                 mov     [esp+8], eax
.text:00412657                 mov     dword ptr [esp+4], 0
.text:0041265F                 mov     dword ptr [esp], 13FFh
.text:00412666                 call    FormatMessageA
.text:0041266B                 sub     esp, 1Ch
.text:0041266E                 mov     edx, [esp+30h]
.text:00412672                 mov     [esp+0Ch], esi
.text:00412676                 mov     ebx, [esp+20h]
.text:0041267A                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:00412682                 mov     [esp+8], edx
.text:00412686                 mov     edx, ds:_iob
.text:0041268C                 mov     [esp+10h], ebx
.text:00412690                 add     edx, 40h ; '@'
.text:00412693                 mov     [esp], edx
.text:00412696                 call    fprintf
.text:0041269B                 mov     [esp], ebx
.text:0041269E                 call    LocalFree
.text:004126A3                 sub     esp, 4
.text:004126A6
.text:004126A6 loc_4126A6:                             ; CODE XREF: .text:0041261F↑j
.text:004126A6                 mov     ebx, [esp+24h]
.text:004126AA                 mov     esi, [esp+28h]
.text:004126AE                 add     esp, 2Ch
.text:004126B1                 retn
.text:004126B1 ; ---------------------------------------------------------------------------
.text:004126B2                 align 10h
.text:004126C0
.text:004126C0 ; =============== S U B R O U T I N E =======================================
.text:004126C0
.text:004126C0
.text:004126C0 ; int __cdecl sub_4126C0(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:004126C0 sub_4126C0      proc near               ; CODE XREF: sub_412840+93↓p
.text:004126C0
.text:004126C0 pvReserved      = dword ptr -35Ch
.text:004126C0 pUnkOuter       = dword ptr -358h
.text:004126C0 dwClsContext    = dword ptr -354h
.text:004126C0 riid            = dword ptr -350h
.text:004126C0 ppv             = dword ptr -34Ch
.text:004126C0 cchWideChar     = dword ptr -348h
.text:004126C0 var_334         = byte ptr -334h
.text:004126C0 var_330         = dword ptr -330h
.text:004126C0 String2         = byte ptr -32Ch
.text:004126C0 WideCharStr     = word ptr -21Ch
.text:004126C0 lpMultiByteStr  = dword ptr  4
.text:004126C0 lpString1       = dword ptr  8
.text:004126C0
.text:004126C0                 push    edi
.text:004126C1                 push    esi
.text:004126C2                 push    ebx
.text:004126C3                 sub     esp, 350h
.text:004126C9                 mov     edi, [esp+35Ch+lpString1]
.text:004126D0                 mov     byte ptr [edi], 0
.text:004126D3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:004126DA                 call    OleInitialize
.text:004126DF                 sub     esp, 4
.text:004126E2                 cmp     eax, 1
.text:004126E5                 ja      loc_41281F
.text:004126EB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:004126F3                 lea     ecx, [esp+35Ch+var_330]
.text:004126F7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:004126FB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00412703                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0041270B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00412712                 call    CoCreateInstance
.text:00412717                 sub     esp, 14h
.text:0041271A                 test    eax, eax
.text:0041271C                 js      loc_41281F
.text:00412722                 mov     ebx, [esp+35Ch+var_330]
.text:00412726                 lea     edx, [esp+35Ch+var_334]
.text:0041272A                 mov     esi, [ebx]
.text:0041272C                 mov     [esp+35Ch+dwClsContext], edx
.text:00412730                 mov     [esp+35Ch+pvReserved], ebx
.text:00412733                 xor     ebx, ebx
.text:00412735                 mov     [esp+35Ch+pUnkOuter], offset dword_416300
.text:0041273D                 call    dword ptr [esi]
.text:0041273F                 sub     esp, 0Ch
.text:00412742                 lea     esi, [esp+35Ch+WideCharStr]
.text:00412749                 call    AreFileApisANSI
.text:0041274E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00412756                 test    eax, eax
.text:00412758                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0041275F                 setz    bl
.text:00412762                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00412766                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0041276E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00412772                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0041277A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0041277D                 call    MultiByteToWideChar
.text:00412782                 sub     esp, 18h
.text:00412785                 test    eax, eax
.text:00412787                 js      loc_41281F
.text:0041278D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00412791                 mov     ebx, [edx]
.text:00412793                 mov     [esp+35Ch+dwClsContext], 0
.text:0041279B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0041279F                 mov     [esp+35Ch+pvReserved], edx
.text:004127A2                 call    dword ptr [ebx+14h]
.text:004127A5                 sub     esp, 0Ch
.text:004127A8                 test    eax, eax
.text:004127AA                 js      short loc_41281F
.text:004127AC                 mov     ebx, [esp+35Ch+var_330]
.text:004127B0                 lea     esi, [esp+35Ch+String2]
.text:004127B4                 mov     ecx, [ebx]
.text:004127B6                 mov     [esp+35Ch+pvReserved], ebx
.text:004127B9                 mov     [esp+35Ch+ppv], 0
.text:004127C1                 mov     [esp+35Ch+riid], 0
.text:004127C9                 mov     [esp+35Ch+dwClsContext], 104h
.text:004127D1                 mov     [esp+35Ch+pUnkOuter], esi
.text:004127D5                 call    dword ptr [ecx+0Ch]
.text:004127D8                 sub     esp, 14h
.text:004127DB                 mov     ebx, eax
.text:004127DD                 test    eax, eax
.text:004127DF                 js      short loc_41281F
.text:004127E1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:004127E5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:004127E8                 call    lstrcpyA
.text:004127ED                 sub     esp, 8
.text:004127F0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:004127F4                 mov     ecx, [edi]
.text:004127F6                 mov     [esp+35Ch+pvReserved], edi
.text:004127F9                 call    dword ptr [ecx+8]
.text:004127FC                 sub     esp, 4
.text:004127FF                 mov     edx, [esp+35Ch+var_330]
.text:00412803                 mov     esi, [edx]
.text:00412805                 mov     [esp+35Ch+pvReserved], edx
.text:00412808                 call    dword ptr [esi+8]
.text:0041280B                 sub     esp, 4
.text:0041280E                 call    CoUninitialize
.text:00412813                 mov     eax, ebx
.text:00412815
.text:00412815 loc_412815:                             ; CODE XREF: sub_4126C0+177↓j
.text:00412815                 add     esp, 350h
.text:0041281B                 pop     ebx
.text:0041281C                 pop     esi
.text:0041281D                 pop     edi
.text:0041281E                 retn
.text:0041281F ; ---------------------------------------------------------------------------
.text:0041281F
.text:0041281F loc_41281F:                             ; CODE XREF: sub_4126C0+25↑j
.text:0041281F                                         ; sub_4126C0+5C↑j ...
.text:0041281F                 call    sub_40FCA0
.text:00412824                 mov     edi, eax
.text:00412826                 call    _errno
.text:0041282B                 mov     [eax], edi
.text:0041282D                 call    CoUninitialize
.text:00412832                 mov     eax, 0FFFFFFFFh
.text:00412837                 jmp     short loc_412815
.text:00412837 sub_4126C0      endp
.text:00412837
.text:00412837 ; ---------------------------------------------------------------------------
.text:00412839 ; const char aLnk_0[]
.text:00412839 aLnk_0          db '.lnk',0             ; DATA XREF: sub_412840+53↓o
.text:00412839                                         ; sub_412840:loc_4128A5↓o
.text:0041283E                 align 10h
.text:00412840
.text:00412840 ; =============== S U B R O U T I N E =======================================
.text:00412840
.text:00412840
.text:00412840 ; int __cdecl sub_412840(char *, LPSTR lpString1)
.text:00412840 sub_412840      proc near               ; CODE XREF: sub_40F480+96↑p
.text:00412840
.text:00412840 Str             = dword ptr -1Ch
.text:00412840 Source          = dword ptr -18h
.text:00412840 Destination     = dword ptr -14h
.text:00412840 arg_0           = dword ptr  4
.text:00412840 lpString1       = dword ptr  8
.text:00412840
.text:00412840                 push    ebp
.text:00412841                 push    edi
.text:00412842                 push    esi
.text:00412843                 push    ebx
.text:00412844                 sub     esp, 0Ch
.text:00412847                 mov     ebx, [esp+1Ch+arg_0]
.text:0041284B                 mov     ebp, [esp+1Ch+lpString1]
.text:0041284F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00412852                 call    strlen
.text:00412857                 add     eax, 5
.text:0041285A                 mov     [esp+1Ch+Str], eax ; Size
.text:0041285D                 call    malloc
.text:00412862                 mov     [esp+1Ch+Destination], eax
.text:00412866                 test    eax, eax
.text:00412868                 jz      loc_412910
.text:0041286E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00412872                 mov     [esp+1Ch+Str], eax ; Destination
.text:00412875                 call    strcpy
.text:0041287A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00412882                 mov     eax, [esp+1Ch+Destination]
.text:00412886                 mov     [esp+1Ch+Str], eax ; Str
.text:00412889                 call    strrchr
.text:0041288E                 test    eax, eax
.text:00412890                 jz      short loc_4128A5
.text:00412892                 cld
.text:00412893                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:00412898                 mov     ecx, 5
.text:0041289D                 mov     esi, eax
.text:0041289F                 mov     edi, ebx
.text:004128A1                 repe cmpsb
.text:004128A3                 jz      short loc_4128B9
.text:004128A5
.text:004128A5 loc_4128A5:                             ; CODE XREF: sub_412840+50↑j
.text:004128A5                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:004128AD                 mov     edx, [esp+1Ch+Destination]
.text:004128B1                 mov     [esp+1Ch+Str], edx ; Destination
.text:004128B4                 call    strcat
.text:004128B9
.text:004128B9 loc_4128B9:                             ; CODE XREF: sub_412840+63↑j
.text:004128B9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:004128C0                 call    SetErrorMode
.text:004128C5                 sub     esp, 4
.text:004128C8                 mov     ebx, [esp+1Ch+Destination]
.text:004128CC                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:004128D0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:004128D3                 call    sub_4126C0
.text:004128D8                 mov     [esp+1Ch+Str], ebx ; Block
.text:004128DB                 mov     esi, eax
.text:004128DD                 call    free
.text:004128E2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:004128E9                 call    SetErrorMode
.text:004128EE                 sub     esp, 4
.text:004128F1                 mov     [esp+1Ch+Str], ebp
.text:004128F4                 call    sub_40EA30
.text:004128F9                 inc     esi
.text:004128FA                 jz      short loc_412910
.text:004128FC                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:00412900                 add     esp, 0Ch
.text:00412903                 pop     ebx
.text:00412904                 pop     esi
.text:00412905                 pop     edi
.text:00412906                 pop     ebp
.text:00412907                 jmp     strlen
.text:00412907 ; ---------------------------------------------------------------------------
.text:0041290C                 align 10h
.text:00412910
.text:00412910 loc_412910:                             ; CODE XREF: sub_412840+28↑j
.text:00412910                                         ; sub_412840+BA↑j
.text:00412910                 add     esp, 0Ch
.text:00412913                 mov     eax, 0FFFFFFFFh
.text:00412918                 pop     ebx
.text:00412919                 pop     esi
.text:0041291A                 pop     edi
.text:0041291B                 pop     ebp
.text:0041291C                 retn
.text:0041291C sub_412840      endp
.text:0041291C
.text:0041291C ; ---------------------------------------------------------------------------
.text:0041291D                 align 10h
.text:00412920
.text:00412920 ; =============== S U B R O U T I N E =======================================
.text:00412920
.text:00412920
.text:00412920 sub_412920      proc near               ; CODE XREF: sub_40F5F0+16↑j
.text:00412920
.text:00412920 arg_0           = dword ptr  4
.text:00412920 arg_4           = dword ptr  8
.text:00412920
.text:00412920                 sub     esp, 0Ch
.text:00412923                 mov     ecx, [esp+0Ch+arg_0]
.text:00412927                 mov     eax, [esp+0Ch+arg_4]
.text:0041292B                 test    ecx, ecx
.text:0041292D                 js      short loc_41295E
.text:0041292F                 test    eax, eax
.text:00412931                 js      short loc_41293D
.text:00412933                 cmp     eax, 8
.text:00412936                 jle     short loc_412951
.text:00412938                 cmp     eax, 0Ch
.text:0041293B                 jz      short loc_412951
.text:0041293D
.text:0041293D loc_41293D:                             ; CODE XREF: sub_412920+11↑j
.text:0041293D                 call    _errno
.text:00412942                 mov     dword ptr [eax], 16h
.text:00412948
.text:00412948 loc_412948:                             ; CODE XREF: sub_412920+3C↓j
.text:00412948                                         ; sub_412920+49↓j
.text:00412948                 mov     eax, 0FFFFFFFFh
.text:0041294D                 add     esp, 0Ch
.text:00412950                 retn
.text:00412951 ; ---------------------------------------------------------------------------
.text:00412951
.text:00412951 loc_412951:                             ; CODE XREF: sub_412920+16↑j
.text:00412951                                         ; sub_412920+1B↑j
.text:00412951                 call    _errno
.text:00412956                 mov     dword ptr [eax], 28h ; '('
.text:0041295C                 jmp     short loc_412948
.text:0041295E ; ---------------------------------------------------------------------------
.text:0041295E
.text:0041295E loc_41295E:                             ; CODE XREF: sub_412920+D↑j
.text:0041295E                 call    _errno
.text:00412963                 mov     dword ptr [eax], 9
.text:00412969                 jmp     short loc_412948
.text:00412969 sub_412920      endp
.text:00412969
.text:00412969 ; ---------------------------------------------------------------------------
.text:0041296B                 align 10h
.text:00412970
.text:00412970 ; =============== S U B R O U T I N E =======================================
.text:00412970
.text:00412970
.text:00412970 sub_412970      proc near               ; CODE XREF: sub_40F620+17↑p
.text:00412970
.text:00412970 hFindFile       = dword ptr -0Ch
.text:00412970 var_8           = dword ptr -8
.text:00412970 var_4           = dword ptr -4
.text:00412970 arg_0           = dword ptr  4
.text:00412970
.text:00412970                 sub     esp, 0Ch
.text:00412973                 mov     [esp+0Ch+var_4], esi
.text:00412977                 mov     esi, [esp+0Ch+arg_0]
.text:0041297B                 mov     [esp+0Ch+var_8], ebx
.text:0041297F                 test    esi, esi
.text:00412981                 jz      short loc_4129C2
.text:00412983                 mov     eax, [esi]
.text:00412985                 cmp     eax, 0FFFFFFFFh
.text:00412988                 jz      short loc_41299F
.text:0041298A                 mov     [esp+0Ch+hFindFile], eax ; hFindFile
.text:0041298D                 call    FindClose
.text:00412992                 sub     esp, 4
.text:00412995                 test    eax, eax
.text:00412997                 jz      short loc_4129B2
.text:00412999
.text:00412999 loc_412999:                             ; CODE XREF: sub_412970+50↓j
.text:00412999                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0041299F
.text:0041299F loc_41299F:                             ; CODE XREF: sub_412970+18↑j
.text:0041299F                 mov     dword ptr [esi+14h], 1
.text:004129A6
.text:004129A6 loc_4129A6:                             ; CODE XREF: sub_412970+5D↓j
.text:004129A6                 mov     ebx, [esp+0Ch+var_8]
.text:004129AA                 mov     esi, [esp+0Ch+var_4]
.text:004129AE                 add     esp, 0Ch
.text:004129B1                 retn
.text:004129B2 ; ---------------------------------------------------------------------------
.text:004129B2
.text:004129B2 loc_4129B2:                             ; CODE XREF: sub_412970+27↑j
.text:004129B2                 call    sub_40FCA0
.text:004129B7                 mov     ebx, eax
.text:004129B9                 call    _errno
.text:004129BE                 mov     [eax], ebx
.text:004129C0                 jmp     short loc_412999
.text:004129C2 ; ---------------------------------------------------------------------------
.text:004129C2
.text:004129C2 loc_4129C2:                             ; CODE XREF: sub_412970+11↑j
.text:004129C2                 call    _errno
.text:004129C7                 mov     dword ptr [eax], 16h
.text:004129CD                 jmp     short loc_4129A6
.text:004129CD sub_412970      endp
.text:004129CD
.text:004129CD ; ---------------------------------------------------------------------------
.text:004129CF                 align 10h
.text:004129D0
.text:004129D0 ; =============== S U B R O U T I N E =======================================
.text:004129D0
.text:004129D0
.text:004129D0 sub_4129D0      proc near               ; CODE XREF: sub_40F7F0+4F↑p
.text:004129D0
.text:004129D0 var_8           = dword ptr -8
.text:004129D0 var_4           = dword ptr -4
.text:004129D0 arg_0           = dword ptr  4
.text:004129D0 arg_4           = dword ptr  8
.text:004129D0 arg_8           = dword ptr  0Ch
.text:004129D0
.text:004129D0                 sub     esp, 8
.text:004129D3                 mov     ecx, [esp+8+arg_0]
.text:004129D7                 mov     [esp+8+var_8], ebx
.text:004129DA                 mov     ebx, [esp+8+arg_8]
.text:004129DE                 mov     [esp+8+var_4], esi
.text:004129E2                 mov     edx, [esp+8+arg_4]
.text:004129E6                 mov     eax, ebx
.text:004129E8                 and     eax, 7
.text:004129EB                 cmp     eax, 7          ; switch 8 cases
.text:004129EE                 ja      short def_4129F0 ; jumptable 004129F0 default case
.text:004129F0                 jmp     ds:jpt_4129F0[eax*4] ; switch jump
.text:004129F0 ; ---------------------------------------------------------------------------
.text:004129F7                 align 4
.text:004129F8 jpt_4129F0      dd offset loc_412A7A    ; DATA XREF: sub_4129D0+20↑r
.text:004129F8                 dd offset loc_412A81    ; jump table for switch statement
.text:004129F8                 dd offset loc_412A18
.text:004129F8                 dd offset loc_412A89
.text:004129F8                 dd offset loc_412A96
.text:004129F8                 dd offset loc_412AA3
.text:004129F8                 dd offset loc_412AB0
.text:004129F8                 dd offset loc_412ABD
.text:00412A18 ; ---------------------------------------------------------------------------
.text:00412A18
.text:00412A18 loc_412A18:                             ; CODE XREF: sub_4129D0+20↑j
.text:00412A18                                         ; DATA XREF: sub_4129D0:jpt_4129F0↑o
.text:00412A18                 mov     eax, [edx]      ; jumptable 004129F0 case 2
.text:00412A1A                 sub     ecx, 1Ch
.text:00412A1D                 add     ebx, 6
.text:00412A20                 sub     edx, 18h
.text:00412A23                 lea     esi, [esi+0]
.text:00412A29                 lea     edi, [edi+0]
.text:00412A30
.text:00412A30 loc_412A30:                             ; CODE XREF: sub_4129D0+A8↓j
.text:00412A30                 mov     esi, [edx+1Ch]
.text:00412A33                 add     edx, 20h ; ' '
.text:00412A36                 mov     [ecx+1Ch], eax
.text:00412A39                 add     ecx, 20h ; ' '
.text:00412A3C                 sub     ebx, 8
.text:00412A3F                 jnz     short def_4129F0 ; jumptable 004129F0 default case
.text:00412A41                 mov     [ecx], esi
.text:00412A43                 mov     ebx, [esp+8+var_8]
.text:00412A46                 mov     esi, [esp+8+var_4]
.text:00412A4A                 add     esp, 8
.text:00412A4D                 retn
.text:00412A4D ; ---------------------------------------------------------------------------
.text:00412A4E                 align 10h
.text:00412A50
.text:00412A50 def_4129F0:                             ; CODE XREF: sub_4129D0+1E↑j
.text:00412A50                                         ; sub_4129D0+6F↑j ...
.text:00412A50                 mov     eax, [edx]      ; jumptable 004129F0 default case
.text:00412A52                 mov     [ecx], esi
.text:00412A54
.text:00412A54 loc_412A54:                             ; CODE XREF: sub_4129D0+AF↓j
.text:00412A54                 mov     esi, [edx+4]
.text:00412A57                 mov     [ecx+4], eax
.text:00412A5A
.text:00412A5A loc_412A5A:                             ; CODE XREF: sub_4129D0+F6↓j
.text:00412A5A                 mov     eax, [edx+8]
.text:00412A5D                 mov     [ecx+8], esi
.text:00412A60
.text:00412A60 loc_412A60:                             ; CODE XREF: sub_4129D0+EB↓j
.text:00412A60                 mov     esi, [edx+0Ch]
.text:00412A63                 mov     [ecx+0Ch], eax
.text:00412A66
.text:00412A66 loc_412A66:                             ; CODE XREF: sub_4129D0+DE↓j
.text:00412A66                 mov     eax, [edx+10h]
.text:00412A69                 mov     [ecx+10h], esi
.text:00412A6C
.text:00412A6C loc_412A6C:                             ; CODE XREF: sub_4129D0+D1↓j
.text:00412A6C                 mov     esi, [edx+14h]
.text:00412A6F                 mov     [ecx+14h], eax
.text:00412A72
.text:00412A72 loc_412A72:                             ; CODE XREF: sub_4129D0+C4↓j
.text:00412A72                 mov     eax, [edx+18h]
.text:00412A75                 mov     [ecx+18h], esi
.text:00412A78                 jmp     short loc_412A30
.text:00412A7A ; ---------------------------------------------------------------------------
.text:00412A7A
.text:00412A7A loc_412A7A:                             ; CODE XREF: sub_4129D0+20↑j
.text:00412A7A                                         ; DATA XREF: sub_4129D0:jpt_4129F0↑o
.text:00412A7A                 mov     eax, [edx]      ; jumptable 004129F0 case 0
.text:00412A7C                 sub     ecx, 4
.text:00412A7F                 jmp     short loc_412A54
.text:00412A81 ; ---------------------------------------------------------------------------
.text:00412A81
.text:00412A81 loc_412A81:                             ; CODE XREF: sub_4129D0+20↑j
.text:00412A81                                         ; DATA XREF: sub_4129D0:jpt_4129F0↑o
.text:00412A81                 mov     esi, [edx]      ; jumptable 004129F0 case 1
.text:00412A83                 dec     ebx
.text:00412A84                 add     edx, 4
.text:00412A87                 jmp     short def_4129F0 ; jumptable 004129F0 default case
.text:00412A89 ; ---------------------------------------------------------------------------
.text:00412A89
.text:00412A89 loc_412A89:                             ; CODE XREF: sub_4129D0+20↑j
.text:00412A89                                         ; DATA XREF: sub_4129D0:jpt_4129F0↑o
.text:00412A89                 mov     esi, [edx]      ; jumptable 004129F0 case 3
.text:00412A8B                 sub     ecx, 18h
.text:00412A8E                 add     ebx, 5
.text:00412A91                 sub     edx, 14h
.text:00412A94                 jmp     short loc_412A72
.text:00412A96 ; ---------------------------------------------------------------------------
.text:00412A96
.text:00412A96 loc_412A96:                             ; CODE XREF: sub_4129D0+20↑j
.text:00412A96                                         ; DATA XREF: sub_4129D0:jpt_4129F0↑o
.text:00412A96                 mov     eax, [edx]      ; jumptable 004129F0 case 4
.text:00412A98                 sub     ecx, 14h
.text:00412A9B                 add     ebx, 4
.text:00412A9E                 sub     edx, 10h
.text:00412AA1                 jmp     short loc_412A6C
.text:00412AA3 ; ---------------------------------------------------------------------------
.text:00412AA3
.text:00412AA3 loc_412AA3:                             ; CODE XREF: sub_4129D0+20↑j
.text:00412AA3                                         ; DATA XREF: sub_4129D0:jpt_4129F0↑o
.text:00412AA3                 mov     esi, [edx]      ; jumptable 004129F0 case 5
.text:00412AA5                 sub     ecx, 10h
.text:00412AA8                 add     ebx, 3
.text:00412AAB                 sub     edx, 0Ch
.text:00412AAE                 jmp     short loc_412A66
.text:00412AB0 ; ---------------------------------------------------------------------------
.text:00412AB0
.text:00412AB0 loc_412AB0:                             ; CODE XREF: sub_4129D0+20↑j
.text:00412AB0                                         ; DATA XREF: sub_4129D0:jpt_4129F0↑o
.text:00412AB0                 mov     eax, [edx]      ; jumptable 004129F0 case 6
.text:00412AB2                 sub     ecx, 0Ch
.text:00412AB5                 add     ebx, 2
.text:00412AB8                 sub     edx, 8
.text:00412ABB                 jmp     short loc_412A60
.text:00412ABD ; ---------------------------------------------------------------------------
.text:00412ABD
.text:00412ABD loc_412ABD:                             ; CODE XREF: sub_4129D0+20↑j
.text:00412ABD                                         ; DATA XREF: sub_4129D0:jpt_4129F0↑o
.text:00412ABD                 mov     esi, [edx]      ; jumptable 004129F0 case 7
.text:00412ABF                 sub     ecx, 8
.text:00412AC2                 inc     ebx
.text:00412AC3                 sub     edx, 4
.text:00412AC6                 jmp     short loc_412A5A
.text:00412AC6 sub_4129D0      endp
.text:00412AC6
.text:00412AC6 ; ---------------------------------------------------------------------------
.text:00412AC8                 align 10h
.text:00412AD0
.text:00412AD0 ; =============== S U B R O U T I N E =======================================
.text:00412AD0
.text:00412AD0
.text:00412AD0 sub_412AD0      proc near               ; CODE XREF: sub_40F7F0+93↑p
.text:00412AD0
.text:00412AD0 var_1C          = dword ptr -1Ch
.text:00412AD0 var_18          = dword ptr -18h
.text:00412AD0 var_14          = dword ptr -14h
.text:00412AD0 arg_0           = dword ptr  4
.text:00412AD0 arg_4           = dword ptr  8
.text:00412AD0 arg_8           = dword ptr  0Ch
.text:00412AD0
.text:00412AD0                 push    ebp
.text:00412AD1                 push    edi
.text:00412AD2                 push    esi
.text:00412AD3                 push    ebx
.text:00412AD4                 sub     esp, 0Ch
.text:00412AD7                 mov     edx, [esp+1Ch+arg_4]
.text:00412ADB                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:00412AE3                 mov     eax, [esp+1Ch+arg_8]
.text:00412AE7                 mov     esi, [esp+1Ch+arg_0]
.text:00412AEB                 mov     ecx, edx
.text:00412AED                 and     ecx, 3
.text:00412AF0                 and     eax, 3
.text:00412AF3                 shl     ecx, 3
.text:00412AF6                 and     edx, 0FFFFFFFCh
.text:00412AF9                 sub     [esp+1Ch+var_14], ecx
.text:00412AFD                 cmp     eax, 1
.text:00412B00                 mov     [esp+1Ch+var_18], ecx
.text:00412B04                 jz      loc_412BF0
.text:00412B0A                 cmp     eax, 1
.text:00412B0D                 jb      loc_412BE0
.text:00412B13                 cmp     eax, 2
.text:00412B16                 jz      loc_412BC4
.text:00412B1C                 cmp     eax, 3
.text:00412B1F                 jz      loc_412BB3
.text:00412B25
.text:00412B25 loc_412B25:                             ; CODE XREF: sub_412AD0+C7↓j
.text:00412B25                                         ; sub_412AD0+12C↓j
.text:00412B25                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00412B2A                 mov     eax, edi
.text:00412B2C                 mov     ebx, [edx]
.text:00412B2E                 shr     ebp, cl
.text:00412B30                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00412B35                 shl     eax, cl
.text:00412B37                 or      ebp, eax
.text:00412B39                 mov     [esi], ebp
.text:00412B3B
.text:00412B3B loc_412B3B:                             ; CODE XREF: sub_412AD0+11B↓j
.text:00412B3B                 mov     ecx, [edx+4]
.text:00412B3E                 mov     ebp, ebx
.text:00412B40                 mov     [esp+1Ch+var_1C], ecx
.text:00412B43                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00412B48                 shr     edi, cl
.text:00412B4A                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00412B4F                 shl     ebp, cl
.text:00412B51                 or      edi, ebp
.text:00412B53                 mov     [esi+4], edi
.text:00412B56
.text:00412B56 loc_412B56:                             ; CODE XREF: sub_412AD0+F2↓j
.text:00412B56                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00412B5B                 mov     edi, [esp+1Ch+var_1C]
.text:00412B5E                 mov     ebp, [edx+8]
.text:00412B61                 shr     ebx, cl
.text:00412B63                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00412B68                 shl     edi, cl
.text:00412B6A                 or      ebx, edi
.text:00412B6C                 mov     [esi+8], ebx
.text:00412B6F
.text:00412B6F loc_412B6F:                             ; CODE XREF: sub_412AD0+107↓j
.text:00412B6F                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00412B74                 mov     ebx, ebp
.text:00412B76                 mov     edi, [edx+0Ch]
.text:00412B79                 add     edx, 10h
.text:00412B7C                 shr     [esp+1Ch+var_1C], cl
.text:00412B7F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00412B84                 shl     ebx, cl
.text:00412B86                 or      [esp+1Ch+var_1C], ebx
.text:00412B89                 mov     ebx, [esp+1Ch+var_1C]
.text:00412B8C                 mov     [esi+0Ch], ebx
.text:00412B8F                 add     esi, 10h
.text:00412B92                 sub     [esp+1Ch+arg_8], 4
.text:00412B97                 jnz     short loc_412B25
.text:00412B99                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00412B9E                 shr     ebp, cl
.text:00412BA0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00412BA5                 shl     edi, cl
.text:00412BA7                 or      ebp, edi
.text:00412BA9                 mov     [esi], ebp
.text:00412BAB                 add     esp, 0Ch
.text:00412BAE                 pop     ebx
.text:00412BAF                 pop     esi
.text:00412BB0                 pop     edi
.text:00412BB1                 pop     ebp
.text:00412BB2                 retn
.text:00412BB3 ; ---------------------------------------------------------------------------
.text:00412BB3
.text:00412BB3 loc_412BB3:                             ; CODE XREF: sub_412AD0+4F↑j
.text:00412BB3                 inc     [esp+1Ch+arg_8]
.text:00412BB7                 sub     esi, 8
.text:00412BBA                 mov     eax, [edx+4]
.text:00412BBD                 mov     ebx, [edx]
.text:00412BBF                 mov     [esp+1Ch+var_1C], eax
.text:00412BC2                 jmp     short loc_412B56
.text:00412BC4 ; ---------------------------------------------------------------------------
.text:00412BC4
.text:00412BC4 loc_412BC4:                             ; CODE XREF: sub_412AD0+46↑j
.text:00412BC4                 add     [esp+1Ch+arg_8], 2
.text:00412BC9                 sub     esi, 0Ch
.text:00412BCC                 mov     ecx, [edx]
.text:00412BCE                 mov     ebp, [edx+4]
.text:00412BD1                 sub     edx, 4
.text:00412BD4                 mov     [esp+1Ch+var_1C], ecx
.text:00412BD7                 jmp     short loc_412B6F
.text:00412BD7 ; ---------------------------------------------------------------------------
.text:00412BD9                 align 10h
.text:00412BE0
.text:00412BE0 loc_412BE0:                             ; CODE XREF: sub_412AD0+3D↑j
.text:00412BE0                 mov     edi, [edx]
.text:00412BE2                 sub     esi, 4
.text:00412BE5                 mov     ebx, [edx+4]
.text:00412BE8                 add     edx, 4
.text:00412BEB                 jmp     loc_412B3B
.text:00412BF0 ; ---------------------------------------------------------------------------
.text:00412BF0
.text:00412BF0 loc_412BF0:                             ; CODE XREF: sub_412AD0+34↑j
.text:00412BF0                 dec     [esp+1Ch+arg_8]
.text:00412BF4                 mov     ebp, [edx]
.text:00412BF6                 mov     edi, [edx+4]
.text:00412BF9                 add     edx, 8
.text:00412BFC                 jmp     loc_412B25
.text:00412BFC sub_412AD0      endp
.text:00412BFC
.text:00412C01 ; ---------------------------------------------------------------------------
.text:00412C01                 jmp     short loc_412C10
.text:00412C01 ; ---------------------------------------------------------------------------
.text:00412C03                 align 10h
.text:00412C10
.text:00412C10 loc_412C10:                             ; CODE XREF: .text:00412C01↑j
.text:00412C10                 sub     esp, 8
.text:00412C13                 mov     ecx, [esp+0Ch]
.text:00412C17                 mov     [esp+4], esi
.text:00412C1B                 mov     esi, [esp+14h]
.text:00412C1F                 mov     [esp], ebx
.text:00412C22                 mov     edx, [esp+10h]
.text:00412C26                 mov     eax, esi
.text:00412C28                 and     eax, 7
.text:00412C2B                 cmp     eax, 7          ; switch 8 cases
.text:00412C2E                 ja      short def_412C30 ; jumptable 00412C30 default case
.text:00412C30                 jmp     ds:jpt_412C30[eax*4] ; switch jump
.text:00412C30 ; ---------------------------------------------------------------------------
.text:00412C37                 align 4
.text:00412C38 jpt_412C30      dd offset loc_412CBC    ; DATA XREF: .text:00412C30↑r
.text:00412C38                 dd offset loc_412CC7    ; jump table for switch statement
.text:00412C38                 dd offset loc_412C58
.text:00412C38                 dd offset loc_412CD3
.text:00412C38                 dd offset loc_412CE1
.text:00412C38                 dd offset loc_412CEF
.text:00412C38                 dd offset loc_412CFD
.text:00412C38                 dd offset loc_412D0B
.text:00412C58 ; ---------------------------------------------------------------------------
.text:00412C58
.text:00412C58 loc_412C58:                             ; CODE XREF: .text:00412C30↑j
.text:00412C58                                         ; DATA XREF: .text:jpt_412C30↑o
.text:00412C58                 sub     edx, 8          ; jumptable 00412C30 case 2
.text:00412C5B                 sub     ecx, 4
.text:00412C5E                 mov     eax, [edx+4]
.text:00412C61                 add     esi, 6
.text:00412C64                 lea     esi, [esi+0]
.text:00412C6A                 lea     edi, [edi+0]
.text:00412C70
.text:00412C70 loc_412C70:                             ; CODE XREF: .text:00412CBA↓j
.text:00412C70                 mov     ebx, [edx]
.text:00412C72                 sub     edx, 20h ; ' '
.text:00412C75                 mov     [ecx], eax
.text:00412C77                 sub     ecx, 20h ; ' '
.text:00412C7A                 sub     esi, 8
.text:00412C7D                 jnz     short def_412C30 ; jumptable 00412C30 default case
.text:00412C7F                 mov     [ecx+1Ch], ebx
.text:00412C82                 mov     ebx, [esp]
.text:00412C85                 mov     esi, [esp+4]
.text:00412C89                 add     esp, 8
.text:00412C8C                 retn
.text:00412C8C ; ---------------------------------------------------------------------------
.text:00412C8D                 align 10h
.text:00412C90
.text:00412C90 def_412C30:                             ; CODE XREF: .text:00412C2E↑j
.text:00412C90                                         ; .text:00412C7D↑j ...
.text:00412C90                 mov     eax, [edx+1Ch]  ; jumptable 00412C30 default case
.text:00412C93                 mov     [ecx+1Ch], ebx
.text:00412C96
.text:00412C96 loc_412C96:                             ; CODE XREF: .text:00412CC5↓j
.text:00412C96                 mov     ebx, [edx+18h]
.text:00412C99                 mov     [ecx+18h], eax
.text:00412C9C
.text:00412C9C loc_412C9C:                             ; CODE XREF: .text:00412D15↓j
.text:00412C9C                 mov     eax, [edx+14h]
.text:00412C9F                 mov     [ecx+14h], ebx
.text:00412CA2
.text:00412CA2 loc_412CA2:                             ; CODE XREF: .text:00412D09↓j
.text:00412CA2                 mov     ebx, [edx+10h]
.text:00412CA5                 mov     [ecx+10h], eax
.text:00412CA8
.text:00412CA8 loc_412CA8:                             ; CODE XREF: .text:00412CFB↓j
.text:00412CA8                 mov     eax, [edx+0Ch]
.text:00412CAB                 mov     [ecx+0Ch], ebx
.text:00412CAE
.text:00412CAE loc_412CAE:                             ; CODE XREF: .text:00412CED↓j
.text:00412CAE                 mov     ebx, [edx+8]
.text:00412CB1                 mov     [ecx+8], eax
.text:00412CB4
.text:00412CB4 loc_412CB4:                             ; CODE XREF: .text:00412CDF↓j
.text:00412CB4                 mov     eax, [edx+4]
.text:00412CB7                 mov     [ecx+4], ebx
.text:00412CBA                 jmp     short loc_412C70
.text:00412CBC ; ---------------------------------------------------------------------------
.text:00412CBC
.text:00412CBC loc_412CBC:                             ; CODE XREF: .text:00412C30↑j
.text:00412CBC                                         ; DATA XREF: .text:jpt_412C30↑o
.text:00412CBC                 sub     edx, 20h ; ' '  ; jumptable 00412C30 case 0
.text:00412CBF                 sub     ecx, 1Ch
.text:00412CC2                 mov     eax, [edx+1Ch]
.text:00412CC5                 jmp     short loc_412C96
.text:00412CC7 ; ---------------------------------------------------------------------------
.text:00412CC7
.text:00412CC7 loc_412CC7:                             ; CODE XREF: .text:00412C30↑j
.text:00412CC7                                         ; DATA XREF: .text:jpt_412C30↑o
.text:00412CC7                 sub     edx, 24h ; '$'  ; jumptable 00412C30 case 1
.text:00412CCA                 sub     ecx, 20h ; ' '
.text:00412CCD                 mov     ebx, [edx+20h]
.text:00412CD0                 dec     esi
.text:00412CD1                 jmp     short def_412C30 ; jumptable 00412C30 default case
.text:00412CD3 ; ---------------------------------------------------------------------------
.text:00412CD3
.text:00412CD3 loc_412CD3:                             ; CODE XREF: .text:00412C30↑j
.text:00412CD3                                         ; DATA XREF: .text:jpt_412C30↑o
.text:00412CD3                 sub     edx, 0Ch        ; jumptable 00412C30 case 3
.text:00412CD6                 sub     ecx, 8
.text:00412CD9                 mov     ebx, [edx+8]
.text:00412CDC                 add     esi, 5
.text:00412CDF                 jmp     short loc_412CB4
.text:00412CE1 ; ---------------------------------------------------------------------------
.text:00412CE1
.text:00412CE1 loc_412CE1:                             ; CODE XREF: .text:00412C30↑j
.text:00412CE1                                         ; DATA XREF: .text:jpt_412C30↑o
.text:00412CE1                 sub     edx, 10h        ; jumptable 00412C30 case 4
.text:00412CE4                 sub     ecx, 0Ch
.text:00412CE7                 mov     eax, [edx+0Ch]
.text:00412CEA                 add     esi, 4
.text:00412CED                 jmp     short loc_412CAE
.text:00412CEF ; ---------------------------------------------------------------------------
.text:00412CEF
.text:00412CEF loc_412CEF:                             ; CODE XREF: .text:00412C30↑j
.text:00412CEF                                         ; DATA XREF: .text:jpt_412C30↑o
.text:00412CEF                 sub     edx, 14h        ; jumptable 00412C30 case 5
.text:00412CF2                 sub     ecx, 10h
.text:00412CF5                 mov     ebx, [edx+10h]
.text:00412CF8                 add     esi, 3
.text:00412CFB                 jmp     short loc_412CA8
.text:00412CFD ; ---------------------------------------------------------------------------
.text:00412CFD
.text:00412CFD loc_412CFD:                             ; CODE XREF: .text:00412C30↑j
.text:00412CFD                                         ; DATA XREF: .text:jpt_412C30↑o
.text:00412CFD                 sub     edx, 18h        ; jumptable 00412C30 case 6
.text:00412D00                 sub     ecx, 14h
.text:00412D03                 mov     eax, [edx+14h]
.text:00412D06                 add     esi, 2
.text:00412D09                 jmp     short loc_412CA2
.text:00412D0B ; ---------------------------------------------------------------------------
.text:00412D0B
.text:00412D0B loc_412D0B:                             ; CODE XREF: .text:00412C30↑j
.text:00412D0B                                         ; DATA XREF: .text:jpt_412C30↑o
.text:00412D0B                 sub     edx, 1Ch        ; jumptable 00412C30 case 7
.text:00412D0E                 sub     ecx, 18h
.text:00412D11                 mov     ebx, [edx+18h]
.text:00412D14                 inc     esi
.text:00412D15                 jmp     short loc_412C9C
.text:00412D15 ; ---------------------------------------------------------------------------
.text:00412D17                 align 10h
.text:00412D20                 push    ebp
.text:00412D21                 push    edi
.text:00412D22                 push    esi
.text:00412D23                 push    ebx
.text:00412D24                 sub     esp, 8
.text:00412D27                 mov     edx, [esp+20h]
.text:00412D2B                 mov     dword ptr [esp+4], 20h ; ' '
.text:00412D33                 mov     eax, [esp+24h]
.text:00412D37                 mov     ecx, edx
.text:00412D39                 and     ecx, 3
.text:00412D3C                 and     eax, 3
.text:00412D3F                 shl     ecx, 3
.text:00412D42                 sub     [esp+4], ecx
.text:00412D46                 and     edx, 0FFFFFFFCh
.text:00412D49                 add     edx, 4
.text:00412D4C                 mov     [esp], ecx
.text:00412D4F                 cmp     eax, 1
.text:00412D52                 jz      loc_412E48
.text:00412D58                 cmp     eax, 1
.text:00412D5B                 jb      loc_412E35
.text:00412D61                 cmp     eax, 2
.text:00412D64                 jz      loc_412E20
.text:00412D6A                 cmp     eax, 3
.text:00412D6D                 jz      loc_412E0C
.text:00412D73
.text:00412D73 loc_412D73:                             ; CODE XREF: .text:00412DEC↓j
.text:00412D73                                         ; .text:00412E5A↓j
.text:00412D73                 movzx   ecx, byte ptr [esp]
.text:00412D77                 mov     eax, edi
.text:00412D79                 mov     ebx, [esp+1Ch]
.text:00412D7D                 mov     esi, [edx+0Ch]
.text:00412D80                 shr     eax, cl
.text:00412D82                 movzx   ecx, byte ptr [esp+4]
.text:00412D87                 shl     ebp, cl
.text:00412D89                 or      eax, ebp
.text:00412D8B                 mov     [ebx+0Ch], eax
.text:00412D8E
.text:00412D8E loc_412D8E:                             ; CODE XREF: .text:00412E43↓j
.text:00412D8E                 movzx   ecx, byte ptr [esp]
.text:00412D92                 mov     ebp, esi
.text:00412D94                 mov     ebx, [edx+8]
.text:00412D97                 shr     ebp, cl
.text:00412D99                 movzx   ecx, byte ptr [esp+4]
.text:00412D9E                 shl     edi, cl
.text:00412DA0                 or      ebp, edi
.text:00412DA2                 mov     edi, [esp+1Ch]
.text:00412DA6                 mov     [edi+8], ebp
.text:00412DA9
.text:00412DA9 loc_412DA9:                             ; CODE XREF: .text:00412E1E↓j
.text:00412DA9                 movzx   ecx, byte ptr [esp]
.text:00412DAD                 mov     edi, ebx
.text:00412DAF                 mov     ebp, [edx+4]
.text:00412DB2                 shr     edi, cl
.text:00412DB4                 movzx   ecx, byte ptr [esp+4]
.text:00412DB9                 shl     esi, cl
.text:00412DBB                 or      edi, esi
.text:00412DBD                 mov     esi, [esp+1Ch]
.text:00412DC1                 mov     [esi+4], edi
.text:00412DC4
.text:00412DC4 loc_412DC4:                             ; CODE XREF: .text:00412E33↓j
.text:00412DC4                 movzx   ecx, byte ptr [esp]
.text:00412DC8                 mov     esi, ebp
.text:00412DCA                 mov     edi, [edx]
.text:00412DCC                 sub     edx, 10h
.text:00412DCF                 shr     esi, cl
.text:00412DD1                 movzx   ecx, byte ptr [esp+4]
.text:00412DD6                 shl     ebx, cl
.text:00412DD8                 or      esi, ebx
.text:00412DDA                 mov     ebx, [esp+1Ch]
.text:00412DDE                 mov     [ebx], esi
.text:00412DE0                 sub     ebx, 10h
.text:00412DE3                 sub     dword ptr [esp+24h], 4
.text:00412DE8                 mov     [esp+1Ch], ebx
.text:00412DEC                 jnz     short loc_412D73
.text:00412DEE                 movzx   ecx, byte ptr [esp]
.text:00412DF2                 mov     edx, [esp+1Ch]
.text:00412DF6                 shr     edi, cl
.text:00412DF8                 movzx   ecx, byte ptr [esp+4]
.text:00412DFD                 shl     ebp, cl
.text:00412DFF                 or      edi, ebp
.text:00412E01                 mov     [edx+0Ch], edi
.text:00412E04                 add     esp, 8
.text:00412E07                 pop     ebx
.text:00412E08                 pop     esi
.text:00412E09                 pop     edi
.text:00412E0A                 pop     ebp
.text:00412E0B                 retn
.text:00412E0C ; ---------------------------------------------------------------------------
.text:00412E0C
.text:00412E0C loc_412E0C:                             ; CODE XREF: .text:00412D6D↑j
.text:00412E0C                 sub     dword ptr [esp+1Ch], 8
.text:00412E11                 sub     edx, 10h
.text:00412E14                 inc     dword ptr [esp+24h]
.text:00412E18                 mov     esi, [edx+0Ch]
.text:00412E1B                 mov     ebx, [edx+8]
.text:00412E1E                 jmp     short loc_412DA9
.text:00412E20 ; ---------------------------------------------------------------------------
.text:00412E20
.text:00412E20 loc_412E20:                             ; CODE XREF: .text:00412D64↑j
.text:00412E20                 sub     dword ptr [esp+1Ch], 4
.text:00412E25                 sub     edx, 0Ch
.text:00412E28                 add     dword ptr [esp+24h], 2
.text:00412E2D                 mov     ebx, [edx+8]
.text:00412E30                 mov     ebp, [edx+4]
.text:00412E33                 jmp     short loc_412DC4
.text:00412E35 ; ---------------------------------------------------------------------------
.text:00412E35
.text:00412E35 loc_412E35:                             ; CODE XREF: .text:00412D5B↑j
.text:00412E35                 sub     dword ptr [esp+1Ch], 0Ch
.text:00412E3A                 sub     edx, 14h
.text:00412E3D                 mov     edi, [edx+10h]
.text:00412E40                 mov     esi, [edx+0Ch]
.text:00412E43                 jmp     loc_412D8E
.text:00412E48 ; ---------------------------------------------------------------------------
.text:00412E48
.text:00412E48 loc_412E48:                             ; CODE XREF: .text:00412D52↑j
.text:00412E48                 sub     dword ptr [esp+1Ch], 10h
.text:00412E4D                 sub     edx, 18h
.text:00412E50                 dec     dword ptr [esp+24h]
.text:00412E54                 mov     ebp, [edx+14h]
.text:00412E57                 mov     edi, [edx+10h]
.text:00412E5A                 jmp     loc_412D73
.text:00412E5A ; ---------------------------------------------------------------------------
.text:00412E5F                 align 10h
.text:00412E60 ; const char String[4]
.text:00412E60 String          db ' :/',0              ; DATA XREF: sub_412E70+FA↓o
.text:00412E64                 align 10h
.text:00412E70
.text:00412E70 ; =============== S U B R O U T I N E =======================================
.text:00412E70
.text:00412E70
.text:00412E70 ; int __cdecl sub_412E70(LPCSTR)
.text:00412E70 sub_412E70      proc near               ; CODE XREF: sub_4104C0+E↑p
.text:00412E70                                         ; sub_4109C0+17↑p ...
.text:00412E70
.text:00412E70 Str             = dword ptr -1Ch
.text:00412E70 Val             = dword ptr -18h
.text:00412E70 Count           = dword ptr -14h
.text:00412E70 var_10          = dword ptr -10h
.text:00412E70 var_C           = dword ptr -0Ch
.text:00412E70 var_8           = dword ptr -8
.text:00412E70 var_4           = dword ptr -4
.text:00412E70 arg_0           = dword ptr  4
.text:00412E70
.text:00412E70                 sub     esp, 1Ch
.text:00412E73                 mov     edx, [esp+1Ch+arg_0]
.text:00412E77                 mov     [esp+1Ch+var_8], edi
.text:00412E7B                 mov     [esp+1Ch+var_10], ebx
.text:00412E7F                 mov     [esp+1Ch+var_C], esi
.text:00412E83                 mov     [esp+1Ch+var_4], ebp
.text:00412E87                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:00412E8A                 call    sub_40F8C0
.text:00412E8F                 test    eax, eax
.text:00412E91                 mov     edi, eax
.text:00412E93                 jz      short loc_412ED0
.text:00412E95                 mov     [esp+1Ch+Str], eax ; Str
.text:00412E98                 call    strlen
.text:00412E9D                 cmp     eax, 2
.text:00412EA0                 jbe     short loc_412EAC
.text:00412EA2                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00412EA6                 jz      loc_412F60
.text:00412EAC
.text:00412EAC loc_412EAC:                             ; CODE XREF: sub_412E70+30↑j
.text:00412EAC                                         ; sub_412E70+F4↓j
.text:00412EAC                 test    edi, edi
.text:00412EAE                 jz      short loc_412ED0
.text:00412EB0                 mov     [esp+1Ch+Str], edi ; Str
.text:00412EB3                 call    strlen
.text:00412EB8                 cmp     eax, 4
.text:00412EBB                 mov     ebp, eax
.text:00412EBD                 jle     short loc_412ED0
.text:00412EBF                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00412EC2                 jz      short loc_412EF0
.text:00412EC4                 lea     esi, [esi+0]
.text:00412ECA                 lea     edi, [edi+0]
.text:00412ED0
.text:00412ED0 loc_412ED0:                             ; CODE XREF: sub_412E70+23↑j
.text:00412ED0                                         ; sub_412E70+3E↑j ...
.text:00412ED0                 xor     esi, esi
.text:00412ED2
.text:00412ED2 loc_412ED2:                             ; CODE XREF: sub_412E70+CD↓j
.text:00412ED2                                         ; sub_412E70+115↓j
.text:00412ED2                 mov     [esp+1Ch+Str], edi ; Block
.text:00412ED5                 call    free
.text:00412EDA                 mov     eax, esi
.text:00412EDC                 mov     ebx, [esp+1Ch+var_10]
.text:00412EE0                 mov     esi, [esp+1Ch+var_C]
.text:00412EE4                 mov     edi, [esp+1Ch+var_8]
.text:00412EE8                 mov     ebp, [esp+1Ch+var_4]
.text:00412EEC                 add     esp, 1Ch
.text:00412EEF                 retn
.text:00412EF0 ; ---------------------------------------------------------------------------
.text:00412EF0
.text:00412EF0 loc_412EF0:                             ; CODE XREF: sub_412E70+52↑j
.text:00412EF0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00412EF4                 jnz     short loc_412ED0
.text:00412EF6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00412EFE                 lea     ecx, [edi+2]
.text:00412F01                 mov     [esp+1Ch+Str], ecx ; Str
.text:00412F04                 call    strchr
.text:00412F09                 test    eax, eax
.text:00412F0B                 jnz     short loc_412F3F
.text:00412F0D
.text:00412F0D loc_412F0D:                             ; CODE XREF: sub_412E70+E2↓j
.text:00412F0D                 inc     ebp
.text:00412F0E
.text:00412F0E loc_412F0E:                             ; CODE XREF: sub_412E70+E9↓j
.text:00412F0E                 mov     [esp+1Ch+Val], 1 ; Size
.text:00412F16                 lea     ebx, [ebp+1]
.text:00412F19                 mov     [esp+1Ch+Str], ebx ; Count
.text:00412F1C                 call    calloc
.text:00412F21                 mov     [esp+1Ch+Str], eax ; Destination
.text:00412F24                 mov     esi, eax
.text:00412F26                 mov     [esp+1Ch+Count], ebx ; Count
.text:00412F2A                 mov     [esp+1Ch+Val], edi ; Source
.text:00412F2E                 call    strncpy
.text:00412F33                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:00412F38                 mov     byte ptr [ebp+esi+0], 0
.text:00412F3D                 jmp     short loc_412ED2
.text:00412F3F ; ---------------------------------------------------------------------------
.text:00412F3F
.text:00412F3F loc_412F3F:                             ; CODE XREF: sub_412E70+9B↑j
.text:00412F3F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00412F47                 inc     eax
.text:00412F48                 mov     [esp+1Ch+Str], eax ; Str
.text:00412F4B                 call    strchr
.text:00412F50                 test    eax, eax
.text:00412F52                 jz      short loc_412F0D
.text:00412F54                 sub     eax, edi
.text:00412F56                 lea     ebp, [eax+1]
.text:00412F59                 jmp     short loc_412F0E
.text:00412F59 ; ---------------------------------------------------------------------------
.text:00412F5B                 align 10h
.text:00412F60
.text:00412F60 loc_412F60:                             ; CODE XREF: sub_412E70+36↑j
.text:00412F60                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:00412F64                 jnz     loc_412EAC
.text:00412F6A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:00412F71                 call    _strdup
.text:00412F76                 movsx   edx, byte ptr [edi]
.text:00412F79                 mov     esi, eax
.text:00412F7B                 mov     [esp+1Ch+Str], edx ; C
.text:00412F7E                 call    toupper
.text:00412F83                 mov     [esi], al
.text:00412F85                 jmp     loc_412ED2
.text:00412F85 sub_412E70      endp
.text:00412F85
.text:00412F85 ; ---------------------------------------------------------------------------
.text:00412F8A                 align 10h
.text:00412F90
.text:00412F90 ; =============== S U B R O U T I N E =======================================
.text:00412F90
.text:00412F90
.text:00412F90 sub_412F90      proc near               ; CODE XREF: .text:004130E4↓p
.text:00412F90                                         ; .text:004131C8↓p
.text:00412F90
.text:00412F90 Str             = dword ptr -2Ch
.text:00412F90 Val             = dword ptr -28h
.text:00412F90 var_18          = dword ptr -18h
.text:00412F90 var_11          = byte ptr -11h
.text:00412F90 arg_0           = dword ptr  4
.text:00412F90
.text:00412F90                 push    ebp
.text:00412F91                 push    edi
.text:00412F92                 push    esi
.text:00412F93                 push    ebx
.text:00412F94                 sub     esp, 1Ch
.text:00412F97                 mov     edx, [esp+2Ch+arg_0]
.text:00412F9B                 cmp     edx, ds:dword_419470
.text:00412FA1                 mov     [esp+2Ch+var_11], 0
.text:00412FA6                 jz      loc_4130A4
.text:00412FAC                 mov     ebx, ds:dword_419460
.text:00412FB2                 test    ebx, ebx
.text:00412FB4                 jz      short loc_413022
.text:00412FB6
.text:00412FB6 loc_412FB6:                             ; CODE XREF: sub_412F90+10F↓j
.text:00412FB6                 mov     ebx, [esp+2Ch+arg_0]
.text:00412FBA                 xor     edi, edi
.text:00412FBC                 xor     esi, esi
.text:00412FBE                 mov     ebp, offset dword_419488
.text:00412FC3                 lea     esi, [esi+0]
.text:00412FC9                 lea     edi, [edi+0]
.text:00412FD0
.text:00412FD0 loc_412FD0:                             ; CODE XREF: sub_412F90+60↓j
.text:00412FD0                 mov     edx, [ebp+4]
.text:00412FD3                 mov     ecx, edi
.text:00412FD5                 mov     eax, [ebp+0]
.text:00412FD8                 shl     ecx, 4
.text:00412FDB                 mov     [esp+2Ch+var_18], ecx
.text:00412FDF                 mov     ecx, edx
.text:00412FE1                 xor     eax, ebx
.text:00412FE3                 xor     ecx, esi
.text:00412FE5                 or      ecx, eax
.text:00412FE7                 jz      short loc_413011
.text:00412FE9                 inc     edi
.text:00412FEA                 add     ebp, 10h
.text:00412FED                 cmp     edi, 20h ; ' '
.text:00412FF0                 jle     short loc_412FD0
.text:00412FF2
.text:00412FF2 loc_412FF2:                             ; CODE XREF: sub_412F90+90↓j
.text:00412FF2                 movzx   ebx, [esp+2Ch+var_11]
.text:00412FF7                 mov     eax, [esp+2Ch+arg_0]
.text:00412FFB                 mov     byte_4180B0, bl
.text:00413001                 mov     ds:dword_419470, eax
.text:00413006                 movsx   eax, bl
.text:00413009
.text:00413009 loc_413009:                             ; CODE XREF: sub_412F90+11B↓j
.text:00413009                 add     esp, 1Ch
.text:0041300C                 pop     ebx
.text:0041300D                 pop     esi
.text:0041300E                 pop     edi
.text:0041300F                 pop     ebp
.text:00413010                 retn
.text:00413011 ; ---------------------------------------------------------------------------
.text:00413011
.text:00413011 loc_413011:                             ; CODE XREF: sub_412F90+57↑j
.text:00413011                 mov     edx, [esp+2Ch+var_18]
.text:00413015                 movzx   eax, byte ptr ds:dword_419480[edx]
.text:0041301C                 mov     [esp+2Ch+var_11], al
.text:00413020                 jmp     short loc_412FF2
.text:00413022 ; ---------------------------------------------------------------------------
.text:00413022
.text:00413022 loc_413022:                             ; CODE XREF: sub_412F90+24↑j
.text:00413022                 mov     [esp+2Ch+Str], 0
.text:00413029                 call    sub_414660
.text:0041302E                 test    eax, eax
.text:00413030                 mov     ebx, eax
.text:00413032                 jz      short loc_41308C
.text:00413034                 movzx   ecx, byte ptr [eax]
.text:00413037                 mov     esi, 0FFFFFFF0h
.text:0041303C                 test    cl, cl
.text:0041303E                 jz      short loc_41308C
.text:00413040
.text:00413040 loc_413040:                             ; CODE XREF: sub_412F90+FA↓j
.text:00413040                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:00413043                 movsx   ebp, cl
.text:00413046                 add     esi, 10h
.text:00413049                 mov     ds:dword_419480[esi], ebp
.text:0041304F                 mov     edi, ebp
.text:00413051                 sar     edi, 1Fh
.text:00413054                 mov     ds:dword_419484[esi], edi
.text:0041305A                 call    sub_4109C0
.text:0041305F                 mov     ds:dword_419488[esi], eax
.text:00413065                 xor     ecx, ecx
.text:00413067                 mov     [esp+2Ch+Str], ebx ; Str
.text:0041306A                 mov     ds:dword_41948C[esi], ecx
.text:00413070                 mov     [esp+2Ch+Val], 0 ; Val
.text:00413078                 call    strchr
.text:0041307D                 mov     ebx, eax
.text:0041307F                 inc     ebx
.text:00413080                 jz      short loc_41308C
.text:00413082                 movzx   edx, byte ptr [eax+1]
.text:00413086                 test    dl, dl
.text:00413088                 mov     cl, dl
.text:0041308A                 jnz     short loc_413040
.text:0041308C
.text:0041308C loc_41308C:                             ; CODE XREF: sub_412F90+A2↑j
.text:0041308C                                         ; sub_412F90+AE↑j ...
.text:0041308C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0041308F                 mov     esi, 1
.text:00413094                 mov     ds:dword_419460, esi
.text:0041309A                 call    free
.text:0041309F                 jmp     loc_412FB6
.text:004130A4 ; ---------------------------------------------------------------------------
.text:004130A4
.text:004130A4 loc_4130A4:                             ; CODE XREF: sub_412F90+16↑j
.text:004130A4                 movsx   eax, byte_4180B0
.text:004130AB                 jmp     loc_413009
.text:004130AB sub_412F90      endp
.text:004130AB
.text:004130AB ; ---------------------------------------------------------------------------
.text:004130B0 dword_4130B0    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:004130B0                                         ; DATA XREF: .text:004130D3↓o
.text:004130B0                                         ; .text:004131B3↓o
.text:004130C0 ; ---------------------------------------------------------------------------
.text:004130C0                 sub     esp, 1Ch
.text:004130C3                 mov     [esp+14h], esi
.text:004130C7                 mov     esi, [esp+20h]
.text:004130CB                 mov     [esp+18h], edi
.text:004130CF                 mov     [esp+10h], ebx
.text:004130D3                 mov     dword ptr [esp], offset dword_4130B0
.text:004130DA                 call    _strdup
.text:004130DF                 mov     [esp], esi
.text:004130E2                 mov     edi, eax
.text:004130E4                 call    sub_412F90
.text:004130E9                 mov     [edi], al
.text:004130EB                 test    al, al
.text:004130ED                 jz      short loc_413101
.text:004130EF                 mov     eax, edi
.text:004130F1                 mov     ebx, [esp+10h]
.text:004130F5                 mov     esi, [esp+14h]
.text:004130F9                 mov     edi, [esp+18h]
.text:004130FD                 add     esp, 1Ch
.text:00413100                 retn
.text:00413101 ; ---------------------------------------------------------------------------
.text:00413101
.text:00413101 loc_413101:                             ; CODE XREF: .text:004130ED↑j
.text:00413101                 mov     [esp], edi
.text:00413104                 call    free
.text:00413109                 mov     dword ptr [esp+4], 0
.text:00413111                 mov     dword ptr [esp], 0
.text:00413118                 call    GetCurrentDirectoryA
.text:0041311D                 sub     esp, 8
.text:00413120                 lea     esi, [eax+1]
.text:00413123                 mov     [esp], esi
.text:00413126                 call    malloc
.text:0041312B                 mov     [esp+4], eax
.text:0041312F                 mov     edi, eax
.text:00413131                 mov     [esp], esi
.text:00413134                 call    GetCurrentDirectoryA
.text:00413139                 sub     esp, 8
.text:0041313C                 test    eax, eax
.text:0041313E                 jnz     short loc_413160
.text:00413140                 mov     dword ptr [esp+20h], 4130B4h
.text:00413148                 mov     ebx, [esp+10h]
.text:0041314C                 mov     esi, [esp+14h]
.text:00413150                 mov     edi, [esp+18h]
.text:00413154                 add     esp, 1Ch
.text:00413157                 jmp     _strdup
.text:00413157 ; ---------------------------------------------------------------------------
.text:0041315C                 align 10h
.text:00413160
.text:00413160 loc_413160:                             ; CODE XREF: .text:0041313E↑j
.text:00413160                 mov     [esp+20h], edi
.text:00413164                 mov     ebx, [esp+10h]
.text:00413168                 mov     esi, [esp+14h]
.text:0041316C                 mov     edi, [esp+18h]
.text:00413170                 add     esp, 1Ch
.text:00413173                 jmp     sub_412E70
.text:00413173 ; ---------------------------------------------------------------------------
.text:00413178                 align 10h
.text:00413180                 sub     esp, 7Ch
.text:00413183                 lea     edx, [esp+10h]
.text:00413187                 mov     [esp+8], edx
.text:0041318B                 mov     edx, [esp+80h]
.text:00413192                 mov     [esp+70h], ebx
.text:00413196                 mov     [esp+74h], esi
.text:0041319A                 mov     [esp+4], edx
.text:0041319E                 mov     [esp+78h], edi
.text:004131A2                 mov     dword ptr [esp], 0
.text:004131A9                 call    sub_414870
.text:004131AE                 xor     edx, edx
.text:004131B0                 inc     eax
.text:004131B1                 jz      short loc_4131D5
.text:004131B3                 mov     dword ptr [esp], offset dword_4130B0
.text:004131BA                 mov     esi, [esp+20h]
.text:004131BE                 call    _strdup
.text:004131C3                 mov     edi, eax
.text:004131C5                 mov     [esp], esi
.text:004131C8                 call    sub_412F90
.text:004131CD                 mov     [edi], al
.text:004131CF                 test    al, al
.text:004131D1                 mov     edx, edi
.text:004131D3                 jz      short loc_4131E7
.text:004131D5
.text:004131D5 loc_4131D5:                             ; CODE XREF: .text:004131B1↑j
.text:004131D5                                         ; .text:00413234↓j
.text:004131D5                 mov     ebx, [esp+70h]
.text:004131D9                 mov     eax, edx
.text:004131DB                 mov     esi, [esp+74h]
.text:004131DF                 mov     edi, [esp+78h]
.text:004131E3                 add     esp, 7Ch
.text:004131E6                 retn
.text:004131E7 ; ---------------------------------------------------------------------------
.text:004131E7
.text:004131E7 loc_4131E7:                             ; CODE XREF: .text:004131D3↑j
.text:004131E7                 mov     [esp], edi
.text:004131EA                 call    free
.text:004131EF                 mov     dword ptr [esp+4], 0
.text:004131F7                 mov     dword ptr [esp], 0
.text:004131FE                 call    GetCurrentDirectoryA
.text:00413203                 sub     esp, 8
.text:00413206                 lea     esi, [eax+1]
.text:00413209                 mov     [esp], esi
.text:0041320C                 call    malloc
.text:00413211                 mov     [esp+4], eax
.text:00413215                 mov     edi, eax
.text:00413217                 mov     [esp], esi
.text:0041321A                 call    GetCurrentDirectoryA
.text:0041321F                 sub     esp, 8
.text:00413222                 test    eax, eax
.text:00413224                 jnz     short loc_413236
.text:00413226                 mov     dword ptr [esp], 4130B4h
.text:0041322D                 call    _strdup
.text:00413232
.text:00413232 loc_413232:                             ; CODE XREF: .text:0041323E↓j
.text:00413232                 mov     edx, eax
.text:00413234                 jmp     short loc_4131D5
.text:00413236 ; ---------------------------------------------------------------------------
.text:00413236
.text:00413236 loc_413236:                             ; CODE XREF: .text:00413224↑j
.text:00413236                 mov     [esp], edi
.text:00413239                 call    sub_412E70
.text:0041323E                 jmp     short loc_413232
.text:00413240
.text:00413240 ; =============== S U B R O U T I N E =======================================
.text:00413240
.text:00413240
.text:00413240 ; int __cdecl sub_413240(LPCSTR)
.text:00413240 sub_413240      proc near               ; CODE XREF: sub_40FE70+12F↑p
.text:00413240
.text:00413240 String1         = dword ptr -1Ch
.text:00413240 String2         = dword ptr -18h
.text:00413240 var_C           = dword ptr -0Ch
.text:00413240 var_8           = dword ptr -8
.text:00413240 var_4           = dword ptr -4
.text:00413240 arg_0           = dword ptr  4
.text:00413240
.text:00413240                 sub     esp, 1Ch
.text:00413243                 mov     [esp+1Ch+var_4], edi
.text:00413247                 mov     edi, [esp+1Ch+arg_0]
.text:0041324B                 mov     [esp+1Ch+var_C], ebx
.text:0041324F                 mov     [esp+1Ch+var_8], esi
.text:00413253                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00413256                 call    sub_40F8C0
.text:0041325B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0041325E                 mov     esi, eax
.text:00413260                 call    sub_412E70
.text:00413265                 mov     [esp+1Ch+String2], eax ; String2
.text:00413269                 mov     ebx, eax
.text:0041326B                 mov     [esp+1Ch+String1], esi ; String1
.text:0041326E                 call    _stricmp
.text:00413273                 test    eax, eax
.text:00413275                 setz    dl
.text:00413278                 test    esi, esi
.text:0041327A                 movzx   edi, dl
.text:0041327D                 jz      short loc_413287
.text:0041327F                 mov     [esp+1Ch+String1], esi ; Block
.text:00413282                 call    free
.text:00413287
.text:00413287 loc_413287:                             ; CODE XREF: sub_413240+3D↑j
.text:00413287                 test    ebx, ebx
.text:00413289                 jz      short loc_413293
.text:0041328B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0041328E                 call    free
.text:00413293
.text:00413293 loc_413293:                             ; CODE XREF: sub_413240+49↑j
.text:00413293                 mov     eax, edi
.text:00413295                 mov     ebx, [esp+1Ch+var_C]
.text:00413299                 mov     esi, [esp+1Ch+var_8]
.text:0041329D                 mov     edi, [esp+1Ch+var_4]
.text:004132A1                 add     esp, 1Ch
.text:004132A4                 retn
.text:004132A4 sub_413240      endp
.text:004132A4
.text:004132A4 ; ---------------------------------------------------------------------------
.text:004132A5                 align 10h
.text:004132B0 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:00413301↓o
.text:004132B9 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:004132B9                                         ; DATA XREF: .text:00413312↓o
.text:004132CD ; const CHAR FileName[]
.text:004132CD FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0041345C↓o
.text:004132CD                                         ; sub_413890+17C↓o
.text:004132D8 ; ---------------------------------------------------------------------------
.text:004132D8
.text:004132D8 loc_4132D8:                             ; DATA XREF: .text:00413572↓o
.text:004132D8                 dec     esi
.text:004132D9                 push    esp
.text:004132DA                 inc     esi
.text:004132DB                 push    ebx
.text:004132DC                 add     [esi+41h], al
.text:004132DF                 push    esp
.text:004132E0                 xor     esi, [edx]
.text:004132E2                 add     [esi+41h], al
.text:004132E5                 push    esp
.text:004132E6                 add     [ebx+44h], al
.text:004132E9                 inc     esi
.text:004132EA                 push    ebx
.text:004132EB
.text:004132EB loc_4132EB:                             ; CODE XREF: sub_413890+101↓p
.text:004132EB                 add     [ebp+55002674h], cl
.text:004132F1                 push    edi
.text:004132F2                 push    esi
.text:004132F3                 push    ebx
.text:004132F4                 sub     esp, 8BCh
.text:004132FA                 mov     ebp, [esp+8D0h]
.text:00413301                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:00413308                 call    LoadLibraryA
.text:0041330D                 sub     esp, 4
.text:00413310                 mov     edi, eax
.text:00413312                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0041331A                 mov     [esp], eax
.text:0041331D                 call    GetProcAddress
.text:00413322                 sub     esp, 8
.text:00413325                 mov     esi, eax
.text:00413327                 test    ebp, ebp
.text:00413329                 mov     dword ptr [esp+20h], 0
.text:00413331                 jz      loc_413871
.text:00413337                 mov     [esp], ebp
.text:0041333A                 call    sub_40EAB0
.text:0041333F                 mov     [esp], eax
.text:00413342                 mov     ebp, eax
.text:00413344                 call    strlen
.text:00413349                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0041334E                 mov     ebx, eax
.text:00413350                 jz      short loc_41336C
.text:00413352                 mov     [esp], ebp
.text:00413355                 lea     edx, [eax+1]
.text:00413358                 mov     [esp+4], edx
.text:0041335C                 call    realloc
.text:00413361                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00413365                 mov     ebp, eax
.text:00413367                 mov     byte ptr [ebx+eax+1], 0
.text:0041336C
.text:0041336C loc_41336C:                             ; CODE XREF: .text:00413350↑j
.text:0041336C                 mov     dword ptr [esp+1Ch], 400h
.text:00413374                 lea     edx, [esp+0B0h]
.text:0041337B                 lea     ebx, [esp+5Ch]
.text:0041337F                 mov     [esp+18h], edx
.text:00413383                 lea     ecx, [esp+58h]
.text:00413387                 lea     edx, [esp+54h]
.text:0041338B                 mov     [esp+14h], ebx
.text:0041338F                 lea     eax, [esp+4B0h]
.text:00413396                 mov     [esp+10h], ecx
.text:0041339A                 mov     [esp+0Ch], edx
.text:0041339E                 mov     dword ptr [esp+8], 400h
.text:004133A6                 mov     [esp+4], eax
.text:004133AA                 mov     [esp], ebp
.text:004133AD                 call    GetVolumeInformationA
.text:004133B2                 sub     esp, 20h
.text:004133B5                 test    eax, eax
.text:004133B7                 jz      loc_41384E
.text:004133BD                 test    esi, esi
.text:004133BF                 jz      short loc_4133E5
.text:004133C1                 mov     [esp], ebp
.text:004133C4                 lea     edx, [esp+48h]
.text:004133C8                 lea     ebx, [esp+40h]
.text:004133CC                 mov     [esp+0Ch], edx
.text:004133D0                 lea     ecx, [esp+38h]
.text:004133D4                 mov     [esp+8], ebx
.text:004133D8                 mov     [esp+4], ecx
.text:004133DC                 call    esi
.text:004133DE                 sub     esp, 10h
.text:004133E1                 mov     [esp+20h], eax
.text:004133E5
.text:004133E5 loc_4133E5:                             ; CODE XREF: .text:004133BF↑j
.text:004133E5                 test    edi, edi
.text:004133E7                 jz      short loc_4133F4
.text:004133E9                 mov     [esp], edi
.text:004133EC                 call    FreeLibrary
.text:004133F1                 sub     esp, 4
.text:004133F4
.text:004133F4 loc_4133F4:                             ; CODE XREF: .text:004133E7↑j
.text:004133F4                 call    sub_412060
.text:004133F9                 test    eax, eax
.text:004133FB                 lea     esi, [esp+28h]
.text:004133FF                 jz      loc_413830
.text:00413405                 call    sub_412060
.text:0041340A                 test    eax, eax
.text:0041340C                 jz      short loc_41341C
.text:0041340E                 call    sub_411FB0
.text:00413413                 cmp     eax, 0Bh
.text:00413416                 jle     loc_413804
.text:0041341C
.text:0041341C loc_41341C:                             ; CODE XREF: .text:0041340C↑j
.text:0041341C                 cld
.text:0041341D                 xor     eax, eax
.text:0041341F                 lea     ebx, [esp+60h]
.text:00413423                 mov     ecx, 7
.text:00413428                 mov     edi, ebx
.text:0041342A                 rep stosd
.text:0041342C                 mov     dword ptr [esp+18h], 0
.text:00413434                 mov     dword ptr [esp+14h], 4000000h
.text:0041343C                 mov     dword ptr [esp+10h], 0
.text:00413444                 mov     dword ptr [esp+0Ch], 0
.text:0041344C                 mov     dword ptr [esp+8], 0
.text:00413454                 mov     dword ptr [esp+4], 0
.text:0041345C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00413463                 call    CreateFileA
.text:00413468                 sub     esp, 1Ch
.text:0041346B                 mov     edi, eax
.text:0041346D                 cmp     eax, 0FFFFFFFFh
.text:00413470                 jz      short loc_4134F0
.text:00413472                 mov     [esp+10h], ebx
.text:00413476                 lea     edx, [esp+80h]
.text:0041347D                 lea     ecx, [esp+24h]
.text:00413481                 mov     [esp+70h], edx
.text:00413485                 mov     [esp+18h], ecx
.text:00413489                 mov     [esp+8], ebx
.text:0041348D                 mov     dword ptr [esp+6Ch], 7303h
.text:00413495                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0041349D                 mov     [esp+64h], ebp
.text:004134A1                 mov     dword ptr [esp+78h], 1
.text:004134A9                 mov     dword ptr [esp+1Ch], 0
.text:004134B1                 mov     dword ptr [esp+14h], 1Ch
.text:004134B9                 mov     dword ptr [esp+0Ch], 1Ch
.text:004134C1                 mov     dword ptr [esp+4], 6
.text:004134C9                 mov     [esp], eax
.text:004134CC                 call    DeviceIoControl
.text:004134D1                 sub     esp, 20h
.text:004134D4                 mov     ebx, eax
.text:004134D6                 mov     [esp], edi
.text:004134D9                 call    CloseHandle
.text:004134DE                 sub     esp, 4
.text:004134E1                 test    ebx, ebx
.text:004134E3                 jz      short loc_4134F0
.text:004134E5                 test    byte ptr [esp+78h], 1
.text:004134EA                 jz      loc_4137D0
.text:004134F0
.text:004134F0 loc_4134F0:                             ; CODE XREF: .text:00413470↑j
.text:004134F0                                         ; .text:004134E3↑j
.text:004134F0                 call    sub_40FCA0
.text:004134F5                 mov     edi, eax
.text:004134F7                 call    _errno
.text:004134FC                 mov     [eax], edi
.text:004134FE                 xor     eax, eax
.text:00413500
.text:00413500 loc_413500:                             ; CODE XREF: .text:004137FF↓j
.text:00413500                                         ; .text:0041382B↓j
.text:00413500                 test    eax, eax
.text:00413502                 jnz     short loc_413524
.text:00413504                 mov     dword ptr [esp+34h], 1
.text:0041350C                 mov     dword ptr [esp+30h], 200h
.text:00413514                 mov     dword ptr [esp+2Ch], 0
.text:0041351C                 mov     dword ptr [esp+28h], 0
.text:00413524
.text:00413524 loc_413524:                             ; CODE XREF: .text:00413502↑j
.text:00413524                 mov     edx, [esp+30h]
.text:00413528                 mov     edi, [esp+34h]
.text:0041352C                 mov     ecx, [esp+20h]
.text:00413530                 imul    edi, edx
.text:00413533                 test    ecx, ecx
.text:00413535                 jnz     short loc_41355D
.text:00413537                 mov     eax, [esp+28h]
.text:0041353B                 mul     edi
.text:0041353D                 mov     esi, eax
.text:0041353F                 mov     eax, [esp+2Ch]
.text:00413543                 mov     [esp+44h], edx
.text:00413547                 mov     [esp+40h], esi
.text:0041354B                 mul     edi
.text:0041354D                 mov     [esp+48h], eax
.text:00413551                 mov     [esp+4Ch], edx
.text:00413555                 mov     [esp+38h], eax
.text:00413559                 mov     [esp+3Ch], edx
.text:0041355D
.text:0041355D loc_41355D:                             ; CODE XREF: .text:00413535↑j
.text:0041355D                 mov     ebx, [esp+5Ch]
.text:00413561                 lea     edx, [esp+0B0h]
.text:00413568                 mov     ecx, [esp+8D4h]
.text:0041356F                 mov     [ecx+48h], ebx
.text:00413572                 mov     dword ptr [esp+4], offset loc_4132D8
.text:0041357A                 mov     [esp], edx
.text:0041357D                 call    _stricmp
.text:00413582                 test    eax, eax
.text:00413584                 jnz     loc_413740
.text:0041358A                 mov     esi, [esp+8D4h]
.text:00413591                 mov     dword ptr [esi], 5346544Eh
.text:00413597
.text:00413597 loc_413597:                             ; CODE XREF: .text:00413768↓j
.text:00413597                                         ; .text:00413795↓j ...
.text:00413597                 mov     ebx, [esp+30h]
.text:0041359B                 mov     esi, [esp+8D4h]
.text:004135A2                 mov     [esi+4], ebx
.text:004135A5                 mov     [esi+8], ebx
.text:004135A8                 mov     ebx, [esi+8]
.text:004135AB                 mov     [esi+0Ch], edi
.text:004135AE                 mov     ecx, [esp+44h]
.text:004135B2                 xor     esi, esi
.text:004135B4                 mov     [esp+8], ebx
.text:004135B8                 mov     edx, [esp+40h]
.text:004135BC                 mov     [esp+0Ch], esi
.text:004135C0                 mov     [esp+4], ecx
.text:004135C4                 mov     [esp], edx
.text:004135C7                 call    sub_416B70
.text:004135CC                 mov     ecx, [esp+8D4h]
.text:004135D3                 mov     [ecx+10h], eax
.text:004135D6                 mov     [ecx+14h], edx
.text:004135D9                 mov     ecx, [esp+4Ch]
.text:004135DD                 mov     [esp+8], ebx
.text:004135E1                 mov     edx, [esp+48h]
.text:004135E5                 mov     [esp+0Ch], esi
.text:004135E9                 mov     [esp+4], ecx
.text:004135ED                 mov     [esp], edx
.text:004135F0                 call    sub_416B70
.text:004135F5                 mov     ecx, [esp+8D4h]
.text:004135FC                 mov     [ecx+18h], eax
.text:004135FF                 mov     [ecx+1Ch], edx
.text:00413602                 mov     ecx, [esp+38h]
.text:00413606                 mov     [esp+8], ebx
.text:0041360A                 mov     ebx, [esp+3Ch]
.text:0041360E                 mov     [esp+0Ch], esi
.text:00413612                 mov     [esp], ecx
.text:00413615                 mov     [esp+4], ebx
.text:00413619                 call    sub_416B70
.text:0041361E                 mov     esi, [esp+8D4h]
.text:00413625                 mov     [esi+20h], eax
.text:00413628                 mov     [esi+24h], edx
.text:0041362B                 mov     ecx, [esp+44h]
.text:0041362F                 mov     esi, edi
.text:00413631                 mov     [esp+8], esi
.text:00413635                 mov     edx, [esp+40h]
.text:00413639                 xor     edi, edi
.text:0041363B                 mov     [esp+0Ch], edi
.text:0041363F                 mov     [esp+4], ecx
.text:00413643                 mov     [esp], edx
.text:00413646                 call    sub_416B70
.text:0041364B                 mov     ebx, [esp+8D4h]
.text:00413652                 mov     [ebx+28h], eax
.text:00413655                 mov     [ebx+2Ch], edx
.text:00413658                 mov     ecx, [esp+4Ch]
.text:0041365C                 mov     [esp+8], esi
.text:00413660                 mov     edx, [esp+48h]
.text:00413664                 mov     [esp+0Ch], edi
.text:00413668                 mov     [esp+4], ecx
.text:0041366C                 mov     [esp], edx
.text:0041366F                 call    sub_416B70
.text:00413674                 mov     ebx, [esp+8D4h]
.text:0041367B                 mov     [ebx+30h], eax
.text:0041367E                 mov     [ebx+34h], edx
.text:00413681                 mov     ecx, [esp+3Ch]
.text:00413685                 mov     [esp+8], esi
.text:00413689                 mov     edx, [esp+38h]
.text:0041368D                 mov     [esp+0Ch], edi
.text:00413691                 mov     [esp+4], ecx
.text:00413695                 mov     [esp], edx
.text:00413698                 call    sub_416B70
.text:0041369D                 mov     edx, [esp+8D4h]
.text:004136A4                 lea     ecx, [esp+0B0h]
.text:004136AB                 mov     [edx+38h], eax
.text:004136AE                 mov     esi, [esp+58h]
.text:004136B2                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:004136B9                 mov     [edx+110h], esi
.text:004136BF                 mov     esi, edx
.text:004136C1                 add     esi, 4Ch ; 'L'
.text:004136C4                 movzx   ebx, word ptr [esp+56h]
.text:004136C9                 movzx   edi, word ptr [esp+54h]
.text:004136CE                 mov     [edx+3Ch], ebx
.text:004136D1                 lea     ebx, [esp+4B0h]
.text:004136D8                 mov     [edx+40h], edi
.text:004136DB                 mov     [esp+4], ecx
.text:004136DF                 mov     dword ptr [esp+8], 10h
.text:004136E7                 mov     [esp], esi
.text:004136EA                 call    strncpy
.text:004136EF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:004136F7                 mov     edi, [esp+8D4h]
.text:004136FE                 mov     [esp+4], ebx
.text:00413702                 add     edi, 5Ch ; '\'
.text:00413705                 mov     [esp], edi
.text:00413708                 call    strncpy
.text:0041370D                 mov     [esp+4], ebp
.text:00413711                 mov     ebp, [esp+8D4h]
.text:00413718                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00413720                 add     ebp, 0B6h ; '¶'
.text:00413726                 mov     [esp], ebp
.text:00413729                 call    strncpy
.text:0041372E                 xor     eax, eax
.text:00413730
.text:00413730 loc_413730:                             ; CODE XREF: .text:0041386C↓j
.text:00413730                 add     esp, 8BCh
.text:00413736                 pop     ebx
.text:00413737                 pop     esi
.text:00413738                 pop     edi
.text:00413739                 pop     ebp
.text:0041373A                 retn
.text:0041373A ; ---------------------------------------------------------------------------
.text:0041373B                 align 10h
.text:00413740
.text:00413740 loc_413740:                             ; CODE XREF: .text:00413584↑j
.text:00413740                 mov     dword ptr [esp+4], 4132DDh
.text:00413748                 lea     eax, [esp+0B0h]
.text:0041374F                 mov     [esp], eax
.text:00413752                 call    _stricmp
.text:00413757                 test    eax, eax
.text:00413759                 jnz     short loc_41376D
.text:0041375B                 mov     edx, [esp+8D4h]
.text:00413762                 mov     dword ptr [edx], 4008h
.text:00413768                 jmp     loc_413597
.text:0041376D ; ---------------------------------------------------------------------------
.text:0041376D
.text:0041376D loc_41376D:                             ; CODE XREF: .text:00413759↑j
.text:0041376D                 mov     dword ptr [esp+4], 4132E3h
.text:00413775                 lea     ecx, [esp+0B0h]
.text:0041377C                 mov     [esp], ecx
.text:0041377F                 call    _stricmp
.text:00413784                 test    eax, eax
.text:00413786                 jnz     short loc_41379A
.text:00413788                 mov     ebx, [esp+8D4h]
.text:0041378F                 mov     dword ptr [ebx], 4006h
.text:00413795                 jmp     loc_413597
.text:0041379A ; ---------------------------------------------------------------------------
.text:0041379A
.text:0041379A loc_41379A:                             ; CODE XREF: .text:00413786↑j
.text:0041379A                 mov     dword ptr [esp+4], 4132E7h
.text:004137A2                 lea     eax, [esp+0B0h]
.text:004137A9                 mov     [esp], eax
.text:004137AC                 call    _stricmp
.text:004137B1                 test    eax, eax
.text:004137B3                 mov     esi, [esp+8D4h]
.text:004137BA                 setnz   cl
.text:004137BD                 movzx   edx, cl
.text:004137C0                 dec     edx
.text:004137C1                 and     edx, 4000h
.text:004137C7                 mov     [esi], edx
.text:004137C9                 jmp     loc_413597
.text:004137C9 ; ---------------------------------------------------------------------------
.text:004137CE                 align 10h
.text:004137D0
.text:004137D0 loc_4137D0:                             ; CODE XREF: .text:004134EA↑j
.text:004137D0                 mov     edi, [esp+84h]
.text:004137D7                 mov     eax, 1
.text:004137DC                 mov     edx, [esp+88h]
.text:004137E3                 mov     ecx, [esp+8Ch]
.text:004137EA                 mov     ebx, [esp+90h]
.text:004137F1                 mov     [esp+34h], edi
.text:004137F5                 mov     [esp+30h], edx
.text:004137F9                 mov     [esp+2Ch], ecx
.text:004137FD                 mov     [esi], ebx
.text:004137FF                 jmp     loc_413500
.text:00413804 ; ---------------------------------------------------------------------------
.text:00413804
.text:00413804 loc_413804:                             ; CODE XREF: .text:00413416↑j
.text:00413804                 mov     [esp+10h], esi
.text:00413808                 lea     eax, [esp+2Ch]
.text:0041380C                 lea     esi, [esp+30h]
.text:00413810                 mov     [esp+0Ch], eax
.text:00413814                 lea     edi, [esp+34h]
.text:00413818                 mov     [esp+8], esi
.text:0041381C                 mov     [esp+4], edi
.text:00413820
.text:00413820 loc_413820:                             ; CODE XREF: .text:0041384C↓j
.text:00413820                 mov     [esp], ebp
.text:00413823                 call    GetDiskFreeSpaceA
.text:00413828                 sub     esp, 14h
.text:0041382B                 jmp     loc_413500
.text:00413830 ; ---------------------------------------------------------------------------
.text:00413830
.text:00413830 loc_413830:                             ; CODE XREF: .text:004133FF↑j
.text:00413830                 mov     [esp+10h], esi
.text:00413834                 lea     ebx, [esp+2Ch]
.text:00413838                 lea     eax, [esp+30h]
.text:0041383C                 mov     [esp+0Ch], ebx
.text:00413840                 lea     esi, [esp+34h]
.text:00413844                 mov     [esp+8], eax
.text:00413848                 mov     [esp+4], esi
.text:0041384C                 jmp     short loc_413820
.text:0041384E ; ---------------------------------------------------------------------------
.text:0041384E
.text:0041384E loc_41384E:                             ; CODE XREF: .text:004133B7↑j
.text:0041384E                 mov     [esp], edi
.text:00413851                 call    FreeLibrary
.text:00413856                 sub     esp, 4
.text:00413859                 call    sub_40FCA0
.text:0041385E                 mov     esi, eax
.text:00413860                 call    _errno
.text:00413865                 mov     [eax], esi
.text:00413867
.text:00413867 loc_413867:                             ; CODE XREF: .text:00413887↓j
.text:00413867                 mov     eax, 0FFFFFFFFh
.text:0041386C                 jmp     loc_413730
.text:00413871 ; ---------------------------------------------------------------------------
.text:00413871
.text:00413871 loc_413871:                             ; CODE XREF: .text:00413331↑j
.text:00413871                 mov     [esp], edi
.text:00413874                 call    FreeLibrary
.text:00413879                 sub     esp, 4
.text:0041387C                 call    _errno
.text:00413881                 mov     dword ptr [eax], 2
.text:00413887                 jmp     short loc_413867
.text:00413887 ; ---------------------------------------------------------------------------
.text:00413889                 align 10h
.text:00413890
.text:00413890 ; =============== S U B R O U T I N E =======================================
.text:00413890
.text:00413890
.text:00413890 ; int __cdecl sub_413890(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00413890 sub_413890      proc near               ; CODE XREF: sub_4104C0+2C7↑p
.text:00413890                                         ; .text:00410AFA↑p
.text:00413890
.text:00413890 lpFileName      = dword ptr -9Ch
.text:00413890 dwDesiredAccess = dword ptr -98h
.text:00413890 dwShareMode     = dword ptr -94h
.text:00413890 lpSecurityAttributes= dword ptr -90h
.text:00413890 dwCreationDisposition= dword ptr -8Ch
.text:00413890 dwFlagsAndAttributes= dword ptr -88h
.text:00413890 hTemplateFile   = dword ptr -84h
.text:00413890 lpOverlapped    = dword ptr -80h
.text:00413890 BytesReturned   = dword ptr -70h
.text:00413890 InBuffer        = byte ptr -6Ch
.text:00413890 var_68          = dword ptr -68h
.text:00413890 var_64          = dword ptr -64h
.text:00413890 var_60          = dword ptr -60h
.text:00413890 var_5C          = dword ptr -5Ch
.text:00413890 var_54          = dword ptr -54h
.text:00413890 var_4C          = byte ptr -4Ch
.text:00413890 var_48          = dword ptr -48h
.text:00413890 var_44          = dword ptr -44h
.text:00413890 var_40          = dword ptr -40h
.text:00413890 var_3C          = dword ptr -3Ch
.text:00413890 lpRootPathName  = dword ptr -2Ch
.text:00413890 lpSectorsPerCluster= dword ptr -28h
.text:00413890 lpBytesPerSector= dword ptr -24h
.text:00413890 lpNumberOfFreeClusters= dword ptr -20h
.text:00413890 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00413890 var_18          = dword ptr -18h
.text:00413890 var_14          = dword ptr -14h
.text:00413890 var_10          = dword ptr -10h
.text:00413890 var_C           = dword ptr -0Ch
.text:00413890 var_8           = dword ptr -8
.text:00413890 var_4           = dword ptr -4
.text:00413890 arg_0           = dword ptr  4
.text:00413890 arg_4           = dword ptr  8
.text:00413890 arg_8           = dword ptr  0Ch
.text:00413890 arg_C           = dword ptr  10h
.text:00413890 arg_10          = dword ptr  14h
.text:00413890
.text:00413890                 sub     esp, 2Ch
.text:00413893                 mov     edx, [esp+2Ch+arg_0]
.text:00413897                 mov     [esp+2Ch+var_10], ebx
.text:0041389B                 mov     ebx, [esp+2Ch+arg_10]
.text:0041389F                 mov     [esp+2Ch+var_C], esi
.text:004138A3                 mov     esi, [esp+2Ch+arg_C]
.text:004138A7                 mov     [esp+2Ch+var_8], edi
.text:004138AB                 mov     edi, [esp+2Ch+arg_8]
.text:004138AF                 mov     [esp+2Ch+var_4], ebp
.text:004138B3                 mov     ebp, [esp+2Ch+arg_4]
.text:004138B7                 mov     [esp+2Ch+var_14], edx
.text:004138BB                 call    sub_412060
.text:004138C0                 test    eax, eax
.text:004138C2                 jz      short loc_4138F4
.text:004138C4                 mov     [esp+2Ch+arg_10], ebx
.text:004138C8                 mov     edx, [esp+2Ch+var_14]
.text:004138CC                 mov     ebx, [esp+2Ch+var_10]
.text:004138D0                 mov     [esp+2Ch+arg_C], esi
.text:004138D4                 mov     esi, [esp+2Ch+var_C]
.text:004138D8                 mov     [esp+2Ch+arg_8], edi
.text:004138DC                 mov     edi, [esp+2Ch+var_8]
.text:004138E0                 mov     [esp+2Ch+arg_4], ebp
.text:004138E4                 mov     ebp, [esp+2Ch+var_4]
.text:004138E8                 mov     [esp+2Ch+arg_0], edx
.text:004138EC                 add     esp, 2Ch
.text:004138EF                 jmp     loc_4139A0
.text:004138F4 ; ---------------------------------------------------------------------------
.text:004138F4
.text:004138F4 loc_4138F4:                             ; CODE XREF: sub_413890+32↑j
.text:004138F4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:004138F8                 mov     ecx, [esp+2Ch+var_14]
.text:004138FC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00413900                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00413904                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00413908                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0041390B                 call    GetDiskFreeSpaceA
.text:00413910                 sub     esp, 14h
.text:00413913                 mov     ebx, [esp+2Ch+var_10]
.text:00413917                 mov     esi, [esp+2Ch+var_C]
.text:0041391B                 mov     edi, [esp+2Ch+var_8]
.text:0041391F                 mov     ebp, [esp+2Ch+var_4]
.text:00413923                 add     esp, 2Ch
.text:00413926                 retn
.text:00413926 ; ---------------------------------------------------------------------------
.text:00413927                 align 10h
.text:00413930
.text:00413930 loc_413930:                             ; CODE XREF: .text:00413B9D↓p
.text:00413930                 sub     esp, 1Ch
.text:00413933                 mov     [esp+1Ch+var_4], esi
.text:00413937                 mov     esi, [esp+1Ch+arg_0]
.text:0041393B                 mov     [esp+1Ch+var_8], ebx
.text:0041393F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00413942                 call    sub_412E70
.text:00413947                 test    eax, eax
.text:00413949                 mov     ebx, eax
.text:0041394B                 jz      short loc_413960
.text:0041394D                 cmp     byte ptr [eax], 0
.text:00413950                 jz      short loc_413960
.text:00413952                 test    esi, esi
.text:00413954                 jz      short loc_413960
.text:00413956                 cmp     byte ptr [esi], 0
.text:00413959                 jnz     short loc_413986
.text:0041395B                 nop
.text:0041395C                 lea     esi, [esi+0]
.text:00413960
.text:00413960 loc_413960:                             ; CODE XREF: sub_413890+BB↑j
.text:00413960                                         ; sub_413890+C0↑j ...
.text:00413960                 call    _errno
.text:00413965                 mov     dword ptr [eax], 2
.text:0041396B                 mov     esi, 0FFFFFFFFh
.text:00413970
.text:00413970 loc_413970:                             ; CODE XREF: sub_413890+108↓j
.text:00413970                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00413973                 call    free
.text:00413978                 mov     eax, esi
.text:0041397A                 mov     ebx, [esp+1Ch+var_8]
.text:0041397E                 mov     esi, [esp+1Ch+var_4]
.text:00413982                 add     esp, 1Ch
.text:00413985                 retn
.text:00413986 ; ---------------------------------------------------------------------------
.text:00413986
.text:00413986 loc_413986:                             ; CODE XREF: sub_413890+C9↑j
.text:00413986                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00413989                 mov     edx, [esp+1Ch+arg_4]
.text:0041398D                 mov     [esp+1Ch+var_18], edx
.text:00413991                 call    near ptr loc_4132EB+5
.text:00413996                 mov     esi, eax
.text:00413998                 jmp     short loc_413970
.text:00413998 ; ---------------------------------------------------------------------------
.text:0041399A                 align 10h
.text:004139A0
.text:004139A0 loc_4139A0:                             ; CODE XREF: sub_413890+5F↑j
.text:004139A0                 push    ebp
.text:004139A1                 push    edi
.text:004139A2                 push    esi
.text:004139A3                 push    ebx
.text:004139A4                 sub     esp, 8Ch
.text:004139AA                 mov     ebp, [esp+9Ch+arg_0]
.text:004139B1                 call    sub_412060
.text:004139B6                 test    eax, eax
.text:004139B8                 jz      short loc_4139C8
.text:004139BA                 call    sub_411FB0
.text:004139BF                 cmp     eax, 0Bh
.text:004139C2                 jle     loc_413AF0
.text:004139C8
.text:004139C8 loc_4139C8:                             ; CODE XREF: sub_413890+128↑j
.text:004139C8                 cld
.text:004139C9                 xor     eax, eax
.text:004139CB                 lea     ebx, [esp+9Ch+InBuffer]
.text:004139CF                 mov     ecx, 7
.text:004139D4                 mov     edi, ebx
.text:004139D6                 lea     esi, [esp+9Ch+var_4C]
.text:004139DA                 rep stosd
.text:004139DC                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:004139E4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:004139EC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:004139F4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:004139FC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00413A04                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00413A0C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00413A13                 call    CreateFileA
.text:00413A18                 sub     esp, 1Ch
.text:00413A1B                 mov     edi, eax
.text:00413A1D                 cmp     eax, 0FFFFFFFFh
.text:00413A20                 jz      short loc_413A95
.text:00413A22                 mov     [esp+9Ch+var_68], ebp
.text:00413A26                 lea     ebp, [esp+9Ch+BytesReturned]
.text:00413A2A                 mov     [esp+9Ch+var_5C], esi
.text:00413A2E                 mov     [esp+9Ch+var_60], 7303h
.text:00413A36                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:00413A3E                 mov     [esp+9Ch+var_54], 1
.text:00413A46                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:00413A4E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:00413A52                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:00413A5A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:00413A5E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:00413A66                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:00413A6A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00413A72                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00413A75                 call    DeviceIoControl
.text:00413A7A                 sub     esp, 20h
.text:00413A7D                 mov     esi, eax
.text:00413A7F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00413A82                 call    CloseHandle
.text:00413A87                 sub     esp, 4
.text:00413A8A                 test    esi, esi
.text:00413A8C                 jz      short loc_413A95
.text:00413A8E                 test    byte ptr [esp+9Ch+var_54], 1
.text:00413A93                 jz      short loc_413AB0
.text:00413A95
.text:00413A95 loc_413A95:                             ; CODE XREF: sub_413890+190↑j
.text:00413A95                                         ; sub_413890+1FC↑j
.text:00413A95                 call    sub_40FCA0
.text:00413A9A                 mov     edi, eax
.text:00413A9C                 call    _errno
.text:00413AA1                 mov     [eax], edi
.text:00413AA3                 xor     eax, eax
.text:00413AA5
.text:00413AA5 loc_413AA5:                             ; CODE XREF: sub_413890+25A↓j
.text:00413AA5                                         ; sub_413890+297↓j
.text:00413AA5                 add     esp, 8Ch
.text:00413AAB                 pop     ebx
.text:00413AAC                 pop     esi
.text:00413AAD                 pop     edi
.text:00413AAE                 pop     ebp
.text:00413AAF                 retn
.text:00413AB0 ; ---------------------------------------------------------------------------
.text:00413AB0
.text:00413AB0 loc_413AB0:                             ; CODE XREF: sub_413890+203↑j
.text:00413AB0                 mov     edx, [esp+9Ch+var_48]
.text:00413AB4                 mov     eax, 1
.text:00413AB9                 mov     ebx, [esp+9Ch+arg_4]
.text:00413AC0                 mov     ebp, [esp+9Ch+arg_8]
.text:00413AC7                 mov     ecx, [esp+9Ch+arg_C]
.text:00413ACE                 mov     [ebx], edx
.text:00413AD0                 mov     edi, [esp+9Ch+var_44]
.text:00413AD4                 mov     ebx, [esp+9Ch+arg_10]
.text:00413ADB                 mov     [ebp+0], edi
.text:00413ADE                 mov     esi, [esp+9Ch+var_40]
.text:00413AE2                 mov     [ecx], esi
.text:00413AE4                 mov     edx, [esp+9Ch+var_3C]
.text:00413AE8                 mov     [ebx], edx
.text:00413AEA                 jmp     short loc_413AA5
.text:00413AEA ; ---------------------------------------------------------------------------
.text:00413AEC                 align 10h
.text:00413AF0
.text:00413AF0 loc_413AF0:                             ; CODE XREF: sub_413890+132↑j
.text:00413AF0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00413AF3                 mov     eax, [esp+9Ch+arg_C]
.text:00413AFA                 mov     ecx, [esp+9Ch+arg_10]
.text:00413B01                 mov     edx, [esp+9Ch+arg_8]
.text:00413B08                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:00413B0C                 mov     eax, [esp+9Ch+arg_4]
.text:00413B13                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00413B17                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:00413B1B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:00413B1F                 call    GetDiskFreeSpaceA
.text:00413B24                 sub     esp, 14h
.text:00413B27                 jmp     loc_413AA5
.text:00413B27 sub_413890      endp ; sp-analysis failed
.text:00413B27
.text:00413B27 ; ---------------------------------------------------------------------------
.text:00413B2C                 align 10h
.text:00413B30 aNotset         db 'notset',0           ; DATA XREF: .data:off_4180C0↓o
.text:00413B30                                         ; .data:off_4180C4↓o
.text:00413B37 ; ---------------------------------------------------------------------------
.text:00413B37
.text:00413B37 loc_413B37:                             ; DATA XREF: .text:loc_413BD5↓o
.text:00413B37                 jb      short loc_413BB0
.text:00413B39                 add     [eax], ah
.text:00413B3B                 or      [eax], eax
.text:00413B3D
.text:00413B3D loc_413B3D:                             ; DATA XREF: .text:00413C28↓o
.text:00413B3D                                         ; .text:00413C8E↓o ...
.text:00413B3D                 add     [eax], ah
.text:00413B3F                 and     eax, 64252064h
.text:00413B44                 and     [eax], al
.text:00413B46                 lea     esi, [esi+0]
.text:00413B49                 lea     edi, [edi+0]
.text:00413B50                 push    ebp
.text:00413B51                 push    edi
.text:00413B52                 push    esi
.text:00413B53                 push    ebx
.text:00413B54                 sub     esp, 14Ch
.text:00413B5A                 mov     edx, off_4180C0 ; "notset"
.text:00413B60                 mov     edi, [esp+164h]
.text:00413B67                 mov     ebp, [esp+168h]
.text:00413B6E                 mov     [esp+4], edx
.text:00413B72                 mov     edx, off_4180C4 ; "notset"
.text:00413B78                 mov     [esp], edx
.text:00413B7B                 call    strcmp
.text:00413B80                 test    eax, eax
.text:00413B82                 jz      loc_413F70
.text:00413B88
.text:00413B88 loc_413B88:                             ; CODE XREF: .text:00413FBC↓j
.text:00413B88                 lea     ebx, [esp+20h]
.text:00413B8C                 lea     esi, [esi+0]
.text:00413B90
.text:00413B90 loc_413B90:                             ; CODE XREF: .text:00413BC6↓j
.text:00413B90                 mov     [esp+4], ebx
.text:00413B94                 mov     ecx, off_4180C4 ; "notset"
.text:00413B9A                 mov     [esp], ecx
.text:00413B9D                 call    loc_413930
.text:00413BA2                 test    eax, eax
.text:00413BA4                 jns     short loc_413BD5
.text:00413BA6                 mov     eax, off_4180C4 ; "notset"
.text:00413BAB                 cmp     byte ptr [eax], 0
.text:00413BAE                 jz      short loc_413BC8
.text:00413BB0
.text:00413BB0 loc_413BB0:                             ; CODE XREF: .text:loc_413B37↑j
.text:00413BB0                 mov     dword ptr [esp+4], 0
.text:00413BB8                 mov     [esp], eax
.text:00413BBB                 call    strchr
.text:00413BC0                 inc     eax
.text:00413BC1                 mov     off_4180C4, eax ; "notset"
.text:00413BC6                 jmp     short loc_413B90
.text:00413BC8 ; ---------------------------------------------------------------------------
.text:00413BC8
.text:00413BC8 loc_413BC8:                             ; CODE XREF: .text:00413BAE↑j
.text:00413BC8                 xor     eax, eax
.text:00413BCA
.text:00413BCA loc_413BCA:                             ; CODE XREF: .text:00413D8C↓j
.text:00413BCA                 add     esp, 14Ch
.text:00413BD0                 pop     ebx
.text:00413BD1                 pop     esi
.text:00413BD2                 pop     edi
.text:00413BD3                 pop     ebp
.text:00413BD4                 retn
.text:00413BD5 ; ---------------------------------------------------------------------------
.text:00413BD5
.text:00413BD5 loc_413BD5:                             ; CODE XREF: .text:00413BA4↑j
.text:00413BD5                 mov     dword ptr [edi+0Ch], offset loc_413B37
.text:00413BDC                 lea     ecx, [esp+0D6h]
.text:00413BE3                 lea     edx, [esp+6Ch]
.text:00413BE7                 mov     [edi+4], ecx
.text:00413BEA                 lea     ebx, [esp+7Ch]
.text:00413BEE                 mov     [edi+8], edx
.text:00413BF1                 mov     [edi], ebx
.text:00413BF3                 mov     [esp], ebp
.text:00413BF6                 mov     [esp+4], edi
.text:00413BFA                 call    ___addmntentstr
.text:00413BFF                 mov     [esp], ebp
.text:00413C02                 mov     dword ptr [esp+4], 413B3Ah
.text:00413C0A                 call    strspn
.text:00413C0F                 mov     dword ptr [esp+4], 0
.text:00413C17                 mov     ebx, off_4180C4 ; "notset"
.text:00413C1D                 lea     esi, [eax+ebp]
.text:00413C20                 mov     [esp+1Ch], esi
.text:00413C24                 lea     ebp, [esp+1Ch]
.text:00413C28                 mov     esi, offset loc_413B3D
.text:00413C2D                 mov     [esp], ebx
.text:00413C30                 call    strchr
.text:00413C35                 mov     dword ptr [esp+4], 413B3Ah
.text:00413C3D                 inc     eax
.text:00413C3E                 mov     off_4180C4, eax ; "notset"
.text:00413C43                 mov     [esp], ebp
.text:00413C46                 call    sub_414990
.text:00413C4B                 test    eax, eax
.text:00413C4D                 mov     ebx, eax
.text:00413C4F                 jz      short loc_413C78
.text:00413C51                 mov     edx, eax
.text:00413C53                 mov     ecx, eax
.text:00413C55                 lea     esi, [esi+0]
.text:00413C59                 lea     edi, [edi+0]
.text:00413C60
.text:00413C60 loc_413C60:                             ; CODE XREF: .text:00413C76↓j
.text:00413C60                 movzx   eax, byte ptr [edx]
.text:00413C63                 cmp     al, 5Ch ; '\'
.text:00413C65                 jz      loc_413F14
.text:00413C6B
.text:00413C6B loc_413C6B:                             ; CODE XREF: .text:00413F1C↓j
.text:00413C6B                                         ; .text:00413F2A↓j ...
.text:00413C6B                 mov     [ecx], al
.text:00413C6D
.text:00413C6D loc_413C6D:                             ; CODE XREF: .text:00413F3E↓j
.text:00413C6D                 inc     ecx
.text:00413C6E
.text:00413C6E loc_413C6E:                             ; CODE XREF: .text:00413F56↓j
.text:00413C6E                 movzx   eax, byte ptr [edx]
.text:00413C71                 mov     esi, ebx
.text:00413C73                 inc     edx
.text:00413C74                 test    al, al
.text:00413C76                 jnz     short loc_413C60
.text:00413C78
.text:00413C78 loc_413C78:                             ; CODE XREF: .text:00413C4F↑j
.text:00413C78                 mov     [edi], esi
.text:00413C7A                 mov     eax, [esp+1Ch]
.text:00413C7E                 test    eax, eax
.text:00413C80                 jnz     loc_413EFB
.text:00413C86
.text:00413C86 loc_413C86:                             ; CODE XREF: .text:00413F0F↓j
.text:00413C86                 mov     dword ptr [esp+4], 413B3Ah
.text:00413C8E                 mov     esi, offset loc_413B3D
.text:00413C93                 mov     [esp], ebp
.text:00413C96                 call    sub_414990
.text:00413C9B                 test    eax, eax
.text:00413C9D                 mov     ebx, eax
.text:00413C9F                 jz      short loc_413CC8
.text:00413CA1                 mov     edx, eax
.text:00413CA3                 mov     ecx, eax
.text:00413CA5                 lea     esi, [esi+0]
.text:00413CA9                 lea     edi, [edi+0]
.text:00413CB0
.text:00413CB0 loc_413CB0:                             ; CODE XREF: .text:00413CC6↓j
.text:00413CB0                 movzx   eax, byte ptr [edx]
.text:00413CB3                 cmp     al, 5Ch ; '\'
.text:00413CB5                 jz      loc_413EA3
.text:00413CBB
.text:00413CBB loc_413CBB:                             ; CODE XREF: .text:00413EAB↓j
.text:00413CBB                                         ; .text:00413EB9↓j ...
.text:00413CBB                 mov     [ecx], al
.text:00413CBD
.text:00413CBD loc_413CBD:                             ; CODE XREF: .text:00413ECD↓j
.text:00413CBD                 inc     ecx
.text:00413CBE
.text:00413CBE loc_413CBE:                             ; CODE XREF: .text:00413EE5↓j
.text:00413CBE                 movzx   eax, byte ptr [edx]
.text:00413CC1                 mov     esi, ebx
.text:00413CC3                 inc     edx
.text:00413CC4                 test    al, al
.text:00413CC6                 jnz     short loc_413CB0
.text:00413CC8
.text:00413CC8 loc_413CC8:                             ; CODE XREF: .text:00413C9F↑j
.text:00413CC8                 mov     [edi+4], esi
.text:00413CCB                 mov     eax, [esp+1Ch]
.text:00413CCF                 test    eax, eax
.text:00413CD1                 jnz     loc_413E8A
.text:00413CD7
.text:00413CD7 loc_413CD7:                             ; CODE XREF: .text:00413E9E↓j
.text:00413CD7                 mov     dword ptr [esp+4], 413B3Ah
.text:00413CDF                 mov     esi, offset loc_413B3D
.text:00413CE4                 mov     [esp], ebp
.text:00413CE7                 call    sub_414990
.text:00413CEC                 test    eax, eax
.text:00413CEE                 mov     ebx, eax
.text:00413CF0                 jz      short loc_413D18
.text:00413CF2                 mov     edx, eax
.text:00413CF4                 mov     ecx, eax
.text:00413CF6                 lea     esi, [esi+0]
.text:00413CF9                 lea     edi, [edi+0]
.text:00413D00
.text:00413D00 loc_413D00:                             ; CODE XREF: .text:00413D16↓j
.text:00413D00                 movzx   eax, byte ptr [edx]
.text:00413D03                 cmp     al, 5Ch ; '\'
.text:00413D05                 jz      loc_413E32
.text:00413D0B
.text:00413D0B loc_413D0B:                             ; CODE XREF: .text:00413E3A↓j
.text:00413D0B                                         ; .text:00413E48↓j ...
.text:00413D0B                 mov     [ecx], al
.text:00413D0D
.text:00413D0D loc_413D0D:                             ; CODE XREF: .text:00413E5C↓j
.text:00413D0D                 inc     ecx
.text:00413D0E
.text:00413D0E loc_413D0E:                             ; CODE XREF: .text:00413E74↓j
.text:00413D0E                 movzx   eax, byte ptr [edx]
.text:00413D11                 mov     esi, ebx
.text:00413D13                 inc     edx
.text:00413D14                 test    al, al
.text:00413D16                 jnz     short loc_413D00
.text:00413D18
.text:00413D18 loc_413D18:                             ; CODE XREF: .text:00413CF0↑j
.text:00413D18                 mov     [edi+8], esi
.text:00413D1B                 mov     eax, [esp+1Ch]
.text:00413D1F                 test    eax, eax
.text:00413D21                 jnz     loc_413E19
.text:00413D27
.text:00413D27 loc_413D27:                             ; CODE XREF: .text:00413E2D↓j
.text:00413D27                 mov     dword ptr [esp+4], 413B3Ah
.text:00413D2F                 mov     esi, offset loc_413B3D
.text:00413D34                 mov     [esp], ebp
.text:00413D37                 call    sub_414990
.text:00413D3C                 test    eax, eax
.text:00413D3E                 mov     ebx, eax
.text:00413D40                 jz      short loc_413D64
.text:00413D42                 mov     edx, eax
.text:00413D44                 mov     ecx, eax
.text:00413D46                 lea     esi, [esi+0]
.text:00413D49                 lea     edi, [edi+0]
.text:00413D50
.text:00413D50 loc_413D50:                             ; CODE XREF: .text:00413D62↓j
.text:00413D50                 movzx   eax, byte ptr [edx]
.text:00413D53                 cmp     al, 5Ch ; '\'
.text:00413D55                 jz      short loc_413DC5
.text:00413D57
.text:00413D57 loc_413D57:                             ; CODE XREF: .text:00413DCD↓j
.text:00413D57                                         ; .text:00413DD7↓j ...
.text:00413D57                 mov     [ecx], al
.text:00413D59
.text:00413D59 loc_413D59:                             ; CODE XREF: .text:00413DEB↓j
.text:00413D59                 inc     ecx
.text:00413D5A
.text:00413D5A loc_413D5A:                             ; CODE XREF: .text:00413E03↓j
.text:00413D5A                 movzx   eax, byte ptr [edx]
.text:00413D5D                 mov     esi, ebx
.text:00413D5F                 inc     edx
.text:00413D60                 test    al, al
.text:00413D62                 jnz     short loc_413D50
.text:00413D64
.text:00413D64 loc_413D64:                             ; CODE XREF: .text:00413D40↑j
.text:00413D64                 mov     [edi+0Ch], esi
.text:00413D67                 xor     eax, eax
.text:00413D69                 mov     edx, [esp+1Ch]
.text:00413D6D                 test    edx, edx
.text:00413D6F                 jnz     short loc_413DA5
.text:00413D71
.text:00413D71 loc_413D71:                             ; CODE XREF: .text:00413DC3↓j
.text:00413D71                 cmp     eax, 1
.text:00413D74                 jz      short loc_413D9C
.text:00413D76                 cmp     eax, 1
.text:00413D79                 jle     short loc_413D91
.text:00413D7B
.text:00413D7B loc_413D7B:                             ; CODE XREF: .text:00413D93↓j
.text:00413D7B                                         ; .text:00413DA3↓j
.text:00413D7B                 mov     edx, [esp+160h]
.text:00413D82                 mov     [esp], edx
.text:00413D85                 call    sub_414930
.text:00413D8A                 mov     eax, edi
.text:00413D8C                 jmp     loc_413BCA
.text:00413D91 ; ---------------------------------------------------------------------------
.text:00413D91
.text:00413D91 loc_413D91:                             ; CODE XREF: .text:00413D79↑j
.text:00413D91                 test    eax, eax
.text:00413D93                 jnz     short loc_413D7B
.text:00413D95                 mov     dword ptr [edi+10h], 0
.text:00413D9C
.text:00413D9C loc_413D9C:                             ; CODE XREF: .text:00413D74↑j
.text:00413D9C                 mov     dword ptr [edi+14h], 0
.text:00413DA3                 jmp     short loc_413D7B
.text:00413DA5 ; ---------------------------------------------------------------------------
.text:00413DA5
.text:00413DA5 loc_413DA5:                             ; CODE XREF: .text:00413D6F↑j
.text:00413DA5                 mov     dword ptr [esp+4], 413B3Eh
.text:00413DAD                 lea     esi, [edi+14h]
.text:00413DB0                 lea     ebp, [edi+10h]
.text:00413DB3                 mov     [esp+0Ch], esi
.text:00413DB7                 mov     [esp+8], ebp
.text:00413DBB                 mov     [esp], edx
.text:00413DBE                 call    sscanf
.text:00413DC3                 jmp     short loc_413D71
.text:00413DC5 ; ---------------------------------------------------------------------------
.text:00413DC5
.text:00413DC5 loc_413DC5:                             ; CODE XREF: .text:00413D55↑j
.text:00413DC5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413DC9                 jz      short loc_413E08
.text:00413DCB
.text:00413DCB loc_413DCB:                             ; CODE XREF: .text:00413E0C↓j
.text:00413DCB                                         ; .text:00413E12↓j
.text:00413DCB                 cmp     al, 5Ch ; '\'
.text:00413DCD                 jnz     short loc_413D57
.text:00413DCF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413DD3                 jz      short loc_413DF0
.text:00413DD5
.text:00413DD5 loc_413DD5:                             ; CODE XREF: .text:00413DF4↓j
.text:00413DD5                                         ; .text:00413DFA↓j
.text:00413DD5                 cmp     al, 5Ch ; '\'
.text:00413DD7                 jnz     loc_413D57
.text:00413DDD                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00413DE1                 jnz     loc_413D57
.text:00413DE7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00413DEA                 inc     edx
.text:00413DEB                 jmp     loc_413D59
.text:00413DF0 ; ---------------------------------------------------------------------------
.text:00413DF0
.text:00413DF0 loc_413DF0:                             ; CODE XREF: .text:00413DD3↑j
.text:00413DF0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00413DF4                 jnz     short loc_413DD5
.text:00413DF6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00413DFA                 jnz     short loc_413DD5
.text:00413DFC                 mov     byte ptr [ecx], 9
.text:00413DFF
.text:00413DFF loc_413DFF:                             ; CODE XREF: .text:00413E17↓j
.text:00413DFF                 inc     ecx
.text:00413E00                 add     edx, 3
.text:00413E03                 jmp     loc_413D5A
.text:00413E08 ; ---------------------------------------------------------------------------
.text:00413E08
.text:00413E08 loc_413E08:                             ; CODE XREF: .text:00413DC9↑j
.text:00413E08                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00413E0C                 jnz     short loc_413DCB
.text:00413E0E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00413E12                 jnz     short loc_413DCB
.text:00413E14                 mov     byte ptr [ecx], 20h ; ' '
.text:00413E17                 jmp     short loc_413DFF
.text:00413E19 ; ---------------------------------------------------------------------------
.text:00413E19
.text:00413E19 loc_413E19:                             ; CODE XREF: .text:00413D21↑j
.text:00413E19                 mov     dword ptr [esp+4], 413B3Ah
.text:00413E21                 mov     [esp], eax
.text:00413E24                 call    strspn
.text:00413E29                 add     [esp+1Ch], eax
.text:00413E2D                 jmp     loc_413D27
.text:00413E32 ; ---------------------------------------------------------------------------
.text:00413E32
.text:00413E32 loc_413E32:                             ; CODE XREF: .text:00413D05↑j
.text:00413E32                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413E36                 jz      short loc_413E79
.text:00413E38
.text:00413E38 loc_413E38:                             ; CODE XREF: .text:00413E7D↓j
.text:00413E38                                         ; .text:00413E83↓j
.text:00413E38                 cmp     al, 5Ch ; '\'
.text:00413E3A                 jnz     loc_413D0B
.text:00413E40                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413E44                 jz      short loc_413E61
.text:00413E46
.text:00413E46 loc_413E46:                             ; CODE XREF: .text:00413E65↓j
.text:00413E46                                         ; .text:00413E6B↓j
.text:00413E46                 cmp     al, 5Ch ; '\'
.text:00413E48                 jnz     loc_413D0B
.text:00413E4E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00413E52                 jnz     loc_413D0B
.text:00413E58                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00413E5B                 inc     edx
.text:00413E5C                 jmp     loc_413D0D
.text:00413E61 ; ---------------------------------------------------------------------------
.text:00413E61
.text:00413E61 loc_413E61:                             ; CODE XREF: .text:00413E44↑j
.text:00413E61                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00413E65                 jnz     short loc_413E46
.text:00413E67                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00413E6B                 jnz     short loc_413E46
.text:00413E6D                 mov     byte ptr [ecx], 9
.text:00413E70
.text:00413E70 loc_413E70:                             ; CODE XREF: .text:00413E88↓j
.text:00413E70                 inc     ecx
.text:00413E71                 add     edx, 3
.text:00413E74                 jmp     loc_413D0E
.text:00413E79 ; ---------------------------------------------------------------------------
.text:00413E79
.text:00413E79 loc_413E79:                             ; CODE XREF: .text:00413E36↑j
.text:00413E79                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00413E7D                 jnz     short loc_413E38
.text:00413E7F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00413E83                 jnz     short loc_413E38
.text:00413E85                 mov     byte ptr [ecx], 20h ; ' '
.text:00413E88                 jmp     short loc_413E70
.text:00413E8A ; ---------------------------------------------------------------------------
.text:00413E8A
.text:00413E8A loc_413E8A:                             ; CODE XREF: .text:00413CD1↑j
.text:00413E8A                 mov     dword ptr [esp+4], 413B3Ah
.text:00413E92                 mov     [esp], eax
.text:00413E95                 call    strspn
.text:00413E9A                 add     [esp+1Ch], eax
.text:00413E9E                 jmp     loc_413CD7
.text:00413EA3 ; ---------------------------------------------------------------------------
.text:00413EA3
.text:00413EA3 loc_413EA3:                             ; CODE XREF: .text:00413CB5↑j
.text:00413EA3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413EA7                 jz      short loc_413EEA
.text:00413EA9
.text:00413EA9 loc_413EA9:                             ; CODE XREF: .text:00413EEE↓j
.text:00413EA9                                         ; .text:00413EF4↓j
.text:00413EA9                 cmp     al, 5Ch ; '\'
.text:00413EAB                 jnz     loc_413CBB
.text:00413EB1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413EB5                 jz      short loc_413ED2
.text:00413EB7
.text:00413EB7 loc_413EB7:                             ; CODE XREF: .text:00413ED6↓j
.text:00413EB7                                         ; .text:00413EDC↓j
.text:00413EB7                 cmp     al, 5Ch ; '\'
.text:00413EB9                 jnz     loc_413CBB
.text:00413EBF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00413EC3                 jnz     loc_413CBB
.text:00413EC9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00413ECC                 inc     edx
.text:00413ECD                 jmp     loc_413CBD
.text:00413ED2 ; ---------------------------------------------------------------------------
.text:00413ED2
.text:00413ED2 loc_413ED2:                             ; CODE XREF: .text:00413EB5↑j
.text:00413ED2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00413ED6                 jnz     short loc_413EB7
.text:00413ED8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00413EDC                 jnz     short loc_413EB7
.text:00413EDE                 mov     byte ptr [ecx], 9
.text:00413EE1
.text:00413EE1 loc_413EE1:                             ; CODE XREF: .text:00413EF9↓j
.text:00413EE1                 inc     ecx
.text:00413EE2                 add     edx, 3
.text:00413EE5                 jmp     loc_413CBE
.text:00413EEA ; ---------------------------------------------------------------------------
.text:00413EEA
.text:00413EEA loc_413EEA:                             ; CODE XREF: .text:00413EA7↑j
.text:00413EEA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00413EEE                 jnz     short loc_413EA9
.text:00413EF0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00413EF4                 jnz     short loc_413EA9
.text:00413EF6                 mov     byte ptr [ecx], 20h ; ' '
.text:00413EF9                 jmp     short loc_413EE1
.text:00413EFB ; ---------------------------------------------------------------------------
.text:00413EFB
.text:00413EFB loc_413EFB:                             ; CODE XREF: .text:00413C80↑j
.text:00413EFB                 mov     dword ptr [esp+4], 413B3Ah
.text:00413F03                 mov     [esp], eax
.text:00413F06                 call    strspn
.text:00413F0B                 add     [esp+1Ch], eax
.text:00413F0F                 jmp     loc_413C86
.text:00413F14 ; ---------------------------------------------------------------------------
.text:00413F14
.text:00413F14 loc_413F14:                             ; CODE XREF: .text:00413C65↑j
.text:00413F14                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413F18                 jz      short loc_413F5B
.text:00413F1A
.text:00413F1A loc_413F1A:                             ; CODE XREF: .text:00413F5F↓j
.text:00413F1A                                         ; .text:00413F65↓j
.text:00413F1A                 cmp     al, 5Ch ; '\'
.text:00413F1C                 jnz     loc_413C6B
.text:00413F22                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00413F26                 jz      short loc_413F43
.text:00413F28
.text:00413F28 loc_413F28:                             ; CODE XREF: .text:00413F47↓j
.text:00413F28                                         ; .text:00413F4D↓j
.text:00413F28                 cmp     al, 5Ch ; '\'
.text:00413F2A                 jnz     loc_413C6B
.text:00413F30                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00413F34                 jnz     loc_413C6B
.text:00413F3A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00413F3D                 inc     edx
.text:00413F3E                 jmp     loc_413C6D
.text:00413F43 ; ---------------------------------------------------------------------------
.text:00413F43
.text:00413F43 loc_413F43:                             ; CODE XREF: .text:00413F26↑j
.text:00413F43                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00413F47                 jnz     short loc_413F28
.text:00413F49                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00413F4D                 jnz     short loc_413F28
.text:00413F4F                 mov     byte ptr [ecx], 9
.text:00413F52
.text:00413F52 loc_413F52:                             ; CODE XREF: .text:00413F6A↓j
.text:00413F52                 inc     ecx
.text:00413F53                 add     edx, 3
.text:00413F56                 jmp     loc_413C6E
.text:00413F5B ; ---------------------------------------------------------------------------
.text:00413F5B
.text:00413F5B loc_413F5B:                             ; CODE XREF: .text:00413F18↑j
.text:00413F5B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00413F5F                 jnz     short loc_413F1A
.text:00413F61                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00413F65                 jnz     short loc_413F1A
.text:00413F67                 mov     byte ptr [ecx], 20h ; ' '
.text:00413F6A                 jmp     short loc_413F52
.text:00413F6A ; ---------------------------------------------------------------------------
.text:00413F6C                 align 10h
.text:00413F70
.text:00413F70 loc_413F70:                             ; CODE XREF: .text:00413B82↑j
.text:00413F70                 mov     dword ptr [esp+4], 0
.text:00413F78                 mov     dword ptr [esp], 0
.text:00413F7F                 call    GetLogicalDriveStringsA
.text:00413F84                 sub     esp, 8
.text:00413F87                 mov     ebx, eax
.text:00413F89                 call    GetProcessHeap
.text:00413F8E                 mov     [esp], eax
.text:00413F91                 mov     [esp+8], ebx
.text:00413F95                 mov     dword ptr [esp+4], 0
.text:00413F9D                 call    HeapAlloc
.text:00413FA2                 sub     esp, 0Ch
.text:00413FA5                 mov     esi, eax
.text:00413FA7                 mov     [esp+4], eax
.text:00413FAB                 mov     [esp], ebx
.text:00413FAE                 call    GetLogicalDriveStringsA
.text:00413FB3                 mov     off_4180C4, esi ; "notset"
.text:00413FB9                 sub     esp, 8
.text:00413FBC                 jmp     loc_413B88
.text:00413FBC ; ---------------------------------------------------------------------------
.text:00413FC1 ; const char aSSSSDD[]
.text:00413FC1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:00413FC1                                         ; DATA XREF: .text:00414100↓o
.text:00413FC1                                         ; ___addmntentstr+F0↓o
.text:00413FD4                 align 10h
.text:00413FE0                 push    esi
.text:00413FE1                 push    ebx
.text:00413FE2                 sub     esp, 44h
.text:00413FE5                 mov     ebx, [esp+54h]
.text:00413FE9                 mov     esi, [esp+50h]
.text:00413FED                 mov     edx, [ebx]
.text:00413FEF                 mov     [esp+20h], edx
.text:00413FF3                 mov     ecx, [ebx+4]
.text:00413FF6                 mov     [esp+24h], ecx
.text:00413FFA                 mov     edx, [ebx+8]
.text:00413FFD                 mov     [esp+28h], edx
.text:00414001                 mov     ecx, [ebx+0Ch]
.text:00414004                 mov     [esp+2Ch], ecx
.text:00414008                 mov     edx, [ebx+10h]
.text:0041400B                 mov     [esp+30h], edx
.text:0041400F                 mov     ecx, [ebx+14h]
.text:00414012                 mov     dword ptr [esp+8], 2
.text:0041401A                 mov     dword ptr [esp+4], 0
.text:00414022                 mov     [esp+34h], ecx
.text:00414026                 mov     [esp], esi
.text:00414029                 call    sub_414920
.text:0041402E ; ---------------------------------------------------------------------------
.text:0041402E                 test    eax, eax
.text:00414030                 mov     edx, 1
.text:00414035                 jnz     loc_414135
.text:0041403B                 mov     ebx, [esp+20h]
.text:0041403F                 mov     edx, ebx
.text:00414041                 movzx   eax, byte ptr [ebx]
.text:00414044                 test    al, al
.text:00414046                 jz      short loc_414070
.text:00414048                 nop
.text:00414049                 lea     esi, [esi+0]
.text:00414050
.text:00414050 loc_414050:                             ; CODE XREF: .text:0041406E↓j
.text:00414050                 cmp     al, 20h ; ' '
.text:00414052                 jz      loc_4142AA
.text:00414058                 cmp     al, 9
.text:0041405A                 jz      loc_4142AA
.text:00414060                 cmp     al, 5Ch ; '\'
.text:00414062                 jz      loc_4142AA
.text:00414068                 inc     ebx
.text:00414069                 movzx   eax, byte ptr [ebx]
.text:0041406C                 test    al, al
.text:0041406E                 jnz     short loc_414050
.text:00414070
.text:00414070 loc_414070:                             ; CODE XREF: .text:00414046↑j
.text:00414070                                         ; .text:004142AC↓j ...
.text:00414070                 mov     ebx, [esp+24h]
.text:00414074                 mov     edx, ebx
.text:00414076                 movzx   eax, byte ptr [ebx]
.text:00414079                 test    al, al
.text:0041407B                 jz      short loc_4140A0
.text:0041407D                 lea     esi, [esi+0]
.text:00414080
.text:00414080 loc_414080:                             ; CODE XREF: .text:0041409E↓j
.text:00414080                 cmp     al, 20h ; ' '
.text:00414082                 jz      loc_41422A
.text:00414088                 cmp     al, 9
.text:0041408A                 jz      loc_41422A
.text:00414090                 cmp     al, 5Ch ; '\'
.text:00414092                 jz      loc_41422A
.text:00414098                 inc     ebx
.text:00414099                 movzx   eax, byte ptr [ebx]
.text:0041409C                 test    al, al
.text:0041409E                 jnz     short loc_414080
.text:004140A0
.text:004140A0 loc_4140A0:                             ; CODE XREF: .text:0041407B↑j
.text:004140A0                                         ; .text:0041422C↓j ...
.text:004140A0                 mov     ebx, [esp+28h]
.text:004140A4                 mov     edx, ebx
.text:004140A6                 movzx   eax, byte ptr [ebx]
.text:004140A9                 test    al, al
.text:004140AB                 jz      short loc_4140D0
.text:004140AD                 lea     esi, [esi+0]
.text:004140B0
.text:004140B0 loc_4140B0:                             ; CODE XREF: .text:004140CE↓j
.text:004140B0                 cmp     al, 20h ; ' '
.text:004140B2                 jz      loc_4141AE
.text:004140B8                 cmp     al, 9
.text:004140BA                 jz      loc_4141AE
.text:004140C0                 cmp     al, 5Ch ; '\'
.text:004140C2                 jz      loc_4141AE
.text:004140C8                 inc     ebx
.text:004140C9                 movzx   eax, byte ptr [ebx]
.text:004140CC                 test    al, al
.text:004140CE                 jnz     short loc_4140B0
.text:004140D0
.text:004140D0 loc_4140D0:                             ; CODE XREF: .text:004140AB↑j
.text:004140D0                                         ; .text:004141B0↓j ...
.text:004140D0                 mov     edx, [esp+2Ch]
.text:004140D4                 mov     ebx, edx
.text:004140D6                 movzx   eax, byte ptr [edx]
.text:004140D9                 test    al, al
.text:004140DB                 jz      short loc_4140F4
.text:004140DD                 lea     esi, [esi+0]
.text:004140E0
.text:004140E0 loc_4140E0:                             ; CODE XREF: .text:004140F2↓j
.text:004140E0                 cmp     al, 20h ; ' '
.text:004140E2                 jz      short loc_41413D
.text:004140E4                 cmp     al, 9
.text:004140E6                 jz      short loc_41413D
.text:004140E8                 cmp     al, 5Ch ; '\'
.text:004140EA                 jz      short loc_41413D
.text:004140EC                 inc     ebx
.text:004140ED                 movzx   eax, byte ptr [ebx]
.text:004140F0                 test    al, al
.text:004140F2                 jnz     short loc_4140E0
.text:004140F4
.text:004140F4 loc_4140F4:                             ; CODE XREF: .text:004140DB↑j
.text:004140F4                                         ; .text:0041413F↓j ...
.text:004140F4                 mov     [esp+14h], edx
.text:004140F8                 mov     ecx, [esp+34h]
.text:004140FC                 mov     ebx, [esp+30h]
.text:00414100                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00414108                 mov     edx, [esp+24h]
.text:0041410C                 mov     [esp+1Ch], ecx
.text:00414110                 mov     ecx, [esp+28h]
.text:00414114                 mov     [esp+18h], ebx
.text:00414118                 mov     ebx, [esp+20h]
.text:0041411C                 mov     [esp+0Ch], edx
.text:00414120                 mov     [esp+10h], ecx
.text:00414124                 mov     [esp+8], ebx
.text:00414128                 mov     [esp], esi
.text:0041412B                 call    fprintf
.text:00414130                 mov     edx, eax
.text:00414132                 shr     edx, 1Fh
.text:00414135
.text:00414135 loc_414135:                             ; CODE XREF: .text:00414035↑j
.text:00414135                 add     esp, 44h
.text:00414138                 mov     eax, edx
.text:0041413A                 pop     ebx
.text:0041413B                 pop     esi
.text:0041413C                 retn
.text:0041413D ; ---------------------------------------------------------------------------
.text:0041413D
.text:0041413D loc_41413D:                             ; CODE XREF: .text:004140E2↑j
.text:0041413D                                         ; .text:004140E6↑j ...
.text:0041413D                 test    al, al
.text:0041413F                 jz      short loc_4140F4
.text:00414141                 mov     [esp], edx
.text:00414144                 mov     ebx, edx
.text:00414146                 call    strlen
.text:0041414B                 lea     edx, ds:1[eax*4]
.text:00414152                 mov     [esp], edx
.text:00414155                 call    malloc
.text:0041415A                 mov     [esp+2Ch], eax
.text:0041415E                 mov     edx, eax
.text:00414160
.text:00414160 loc_414160:                             ; CODE XREF: .text:00414178↓j
.text:00414160                 movzx   eax, byte ptr [ebx]
.text:00414163                 cmp     al, 20h ; ' '
.text:00414165                 jz      short loc_41419D
.text:00414167                 cmp     al, 9
.text:00414169                 jz      short loc_41418C
.text:0041416B                 cmp     al, 5Ch ; '\'
.text:0041416D                 jz      short loc_414183
.text:0041416F                 mov     [edx], al
.text:00414171
.text:00414171 loc_414171:                             ; CODE XREF: .text:0041418A↓j
.text:00414171                                         ; .text:0041419B↓j ...
.text:00414171                 movzx   ecx, byte ptr [ebx]
.text:00414174                 inc     edx
.text:00414175                 inc     ebx
.text:00414176                 test    cl, cl
.text:00414178                 jnz     short loc_414160
.text:0041417A                 mov     edx, [esp+2Ch]
.text:0041417E                 jmp     loc_4140F4
.text:00414183 ; ---------------------------------------------------------------------------
.text:00414183
.text:00414183 loc_414183:                             ; CODE XREF: .text:0041416D↑j
.text:00414183                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414186                 inc     edx
.text:00414187                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041418A                 jmp     short loc_414171
.text:0041418C ; ---------------------------------------------------------------------------
.text:0041418C
.text:0041418C loc_41418C:                             ; CODE XREF: .text:00414169↑j
.text:0041418C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041418F                 inc     edx
.text:00414190                 mov     byte ptr [edx], 30h ; '0'
.text:00414193                 inc     edx
.text:00414194                 mov     byte ptr [edx], 31h ; '1'
.text:00414197                 inc     edx
.text:00414198                 mov     byte ptr [edx], 32h ; '2'
.text:0041419B                 jmp     short loc_414171
.text:0041419D ; ---------------------------------------------------------------------------
.text:0041419D
.text:0041419D loc_41419D:                             ; CODE XREF: .text:00414165↑j
.text:0041419D                 mov     byte ptr [edx], 5Ch ; '\'
.text:004141A0                 inc     edx
.text:004141A1                 mov     byte ptr [edx], 30h ; '0'
.text:004141A4                 inc     edx
.text:004141A5                 mov     byte ptr [edx], 34h ; '4'
.text:004141A8                 inc     edx
.text:004141A9                 mov     byte ptr [edx], 30h ; '0'
.text:004141AC                 jmp     short loc_414171
.text:004141AE ; ---------------------------------------------------------------------------
.text:004141AE
.text:004141AE loc_4141AE:                             ; CODE XREF: .text:004140B2↑j
.text:004141AE                                         ; .text:004140BA↑j ...
.text:004141AE                 test    al, al
.text:004141B0                 jz      loc_4140D0
.text:004141B6                 mov     [esp], edx
.text:004141B9                 mov     ebx, edx
.text:004141BB                 call    strlen
.text:004141C0                 lea     edx, ds:1[eax*4]
.text:004141C7                 mov     [esp], edx
.text:004141CA                 call    malloc
.text:004141CF                 mov     [esp+28h], eax
.text:004141D3                 mov     edx, eax
.text:004141D5                 lea     esi, [esi+0]
.text:004141D9                 lea     edi, [edi+0]
.text:004141E0
.text:004141E0 loc_4141E0:                             ; CODE XREF: .text:004141F8↓j
.text:004141E0                 movzx   eax, byte ptr [ebx]
.text:004141E3                 cmp     al, 20h ; ' '
.text:004141E5                 jz      short loc_414219
.text:004141E7                 cmp     al, 9
.text:004141E9                 jz      short loc_414208
.text:004141EB                 cmp     al, 5Ch ; '\'
.text:004141ED                 jz      short loc_4141FF
.text:004141EF                 mov     [edx], al
.text:004141F1
.text:004141F1 loc_4141F1:                             ; CODE XREF: .text:00414206↓j
.text:004141F1                                         ; .text:00414217↓j ...
.text:004141F1                 movzx   ecx, byte ptr [ebx]
.text:004141F4                 inc     edx
.text:004141F5                 inc     ebx
.text:004141F6                 test    cl, cl
.text:004141F8                 jnz     short loc_4141E0
.text:004141FA                 jmp     loc_4140D0
.text:004141FF ; ---------------------------------------------------------------------------
.text:004141FF
.text:004141FF loc_4141FF:                             ; CODE XREF: .text:004141ED↑j
.text:004141FF                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414202                 inc     edx
.text:00414203                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414206                 jmp     short loc_4141F1
.text:00414208 ; ---------------------------------------------------------------------------
.text:00414208
.text:00414208 loc_414208:                             ; CODE XREF: .text:004141E9↑j
.text:00414208                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041420B                 inc     edx
.text:0041420C                 mov     byte ptr [edx], 30h ; '0'
.text:0041420F                 inc     edx
.text:00414210                 mov     byte ptr [edx], 31h ; '1'
.text:00414213                 inc     edx
.text:00414214                 mov     byte ptr [edx], 32h ; '2'
.text:00414217                 jmp     short loc_4141F1
.text:00414219 ; ---------------------------------------------------------------------------
.text:00414219
.text:00414219 loc_414219:                             ; CODE XREF: .text:004141E5↑j
.text:00414219                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041421C                 inc     edx
.text:0041421D                 mov     byte ptr [edx], 30h ; '0'
.text:00414220                 inc     edx
.text:00414221                 mov     byte ptr [edx], 34h ; '4'
.text:00414224                 inc     edx
.text:00414225                 mov     byte ptr [edx], 30h ; '0'
.text:00414228                 jmp     short loc_4141F1
.text:0041422A ; ---------------------------------------------------------------------------
.text:0041422A
.text:0041422A loc_41422A:                             ; CODE XREF: .text:00414082↑j
.text:0041422A                                         ; .text:0041408A↑j ...
.text:0041422A                 test    al, al
.text:0041422C                 jz      loc_4140A0
.text:00414232                 mov     [esp], edx
.text:00414235                 mov     ebx, edx
.text:00414237                 call    strlen
.text:0041423C                 lea     edx, ds:1[eax*4]
.text:00414243                 mov     [esp], edx
.text:00414246                 call    malloc
.text:0041424B                 mov     [esp+24h], eax
.text:0041424F                 mov     edx, eax
.text:00414251                 jmp     short loc_414260
.text:00414251 ; ---------------------------------------------------------------------------
.text:00414253                 align 10h
.text:00414260
.text:00414260 loc_414260:                             ; CODE XREF: .text:00414251↑j
.text:00414260                                         ; .text:00414278↓j
.text:00414260                 movzx   eax, byte ptr [ebx]
.text:00414263                 cmp     al, 20h ; ' '
.text:00414265                 jz      short loc_414299
.text:00414267                 cmp     al, 9
.text:00414269                 jz      short loc_414288
.text:0041426B                 cmp     al, 5Ch ; '\'
.text:0041426D                 jz      short loc_41427F
.text:0041426F                 mov     [edx], al
.text:00414271
.text:00414271 loc_414271:                             ; CODE XREF: .text:00414286↓j
.text:00414271                                         ; .text:00414297↓j ...
.text:00414271                 movzx   ecx, byte ptr [ebx]
.text:00414274                 inc     edx
.text:00414275                 inc     ebx
.text:00414276                 test    cl, cl
.text:00414278                 jnz     short loc_414260
.text:0041427A                 jmp     loc_4140A0
.text:0041427F ; ---------------------------------------------------------------------------
.text:0041427F
.text:0041427F loc_41427F:                             ; CODE XREF: .text:0041426D↑j
.text:0041427F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414282                 inc     edx
.text:00414283                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414286                 jmp     short loc_414271
.text:00414288 ; ---------------------------------------------------------------------------
.text:00414288
.text:00414288 loc_414288:                             ; CODE XREF: .text:00414269↑j
.text:00414288                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041428B                 inc     edx
.text:0041428C                 mov     byte ptr [edx], 30h ; '0'
.text:0041428F                 inc     edx
.text:00414290                 mov     byte ptr [edx], 31h ; '1'
.text:00414293                 inc     edx
.text:00414294                 mov     byte ptr [edx], 32h ; '2'
.text:00414297                 jmp     short loc_414271
.text:00414299 ; ---------------------------------------------------------------------------
.text:00414299
.text:00414299 loc_414299:                             ; CODE XREF: .text:00414265↑j
.text:00414299                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041429C                 inc     edx
.text:0041429D                 mov     byte ptr [edx], 30h ; '0'
.text:004142A0                 inc     edx
.text:004142A1                 mov     byte ptr [edx], 34h ; '4'
.text:004142A4                 inc     edx
.text:004142A5                 mov     byte ptr [edx], 30h ; '0'
.text:004142A8                 jmp     short loc_414271
.text:004142AA ; ---------------------------------------------------------------------------
.text:004142AA
.text:004142AA loc_4142AA:                             ; CODE XREF: .text:00414052↑j
.text:004142AA                                         ; .text:0041405A↑j ...
.text:004142AA                 test    al, al
.text:004142AC                 jz      loc_414070
.text:004142B2                 mov     [esp], edx
.text:004142B5                 mov     ebx, edx
.text:004142B7                 call    strlen
.text:004142BC                 lea     ecx, ds:1[eax*4]
.text:004142C3                 mov     [esp], ecx
.text:004142C6                 call    malloc
.text:004142CB                 mov     [esp+20h], eax
.text:004142CF                 mov     edx, eax
.text:004142D1                 jmp     short loc_4142E0
.text:004142D1 ; ---------------------------------------------------------------------------
.text:004142D3                 align 10h
.text:004142E0
.text:004142E0 loc_4142E0:                             ; CODE XREF: .text:004142D1↑j
.text:004142E0                                         ; .text:004142F8↓j
.text:004142E0                 movzx   eax, byte ptr [ebx]
.text:004142E3                 cmp     al, 20h ; ' '
.text:004142E5                 jz      short loc_414319
.text:004142E7                 cmp     al, 9
.text:004142E9                 jz      short loc_414308
.text:004142EB                 cmp     al, 5Ch ; '\'
.text:004142ED                 jz      short loc_4142FF
.text:004142EF                 mov     [edx], al
.text:004142F1
.text:004142F1 loc_4142F1:                             ; CODE XREF: .text:00414306↓j
.text:004142F1                                         ; .text:00414317↓j ...
.text:004142F1                 movzx   ecx, byte ptr [ebx]
.text:004142F4                 inc     edx
.text:004142F5                 inc     ebx
.text:004142F6                 test    cl, cl
.text:004142F8                 jnz     short loc_4142E0
.text:004142FA                 jmp     loc_414070
.text:004142FF ; ---------------------------------------------------------------------------
.text:004142FF
.text:004142FF loc_4142FF:                             ; CODE XREF: .text:004142ED↑j
.text:004142FF                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414302                 inc     edx
.text:00414303                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414306                 jmp     short loc_4142F1
.text:00414308 ; ---------------------------------------------------------------------------
.text:00414308
.text:00414308 loc_414308:                             ; CODE XREF: .text:004142E9↑j
.text:00414308                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041430B                 inc     edx
.text:0041430C                 mov     byte ptr [edx], 30h ; '0'
.text:0041430F                 inc     edx
.text:00414310                 mov     byte ptr [edx], 31h ; '1'
.text:00414313                 inc     edx
.text:00414314                 mov     byte ptr [edx], 32h ; '2'
.text:00414317                 jmp     short loc_4142F1
.text:00414319 ; ---------------------------------------------------------------------------
.text:00414319
.text:00414319 loc_414319:                             ; CODE XREF: .text:004142E5↑j
.text:00414319                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041431C                 inc     edx
.text:0041431D                 mov     byte ptr [edx], 30h ; '0'
.text:00414320                 inc     edx
.text:00414321                 mov     byte ptr [edx], 34h ; '4'
.text:00414324                 inc     edx
.text:00414325                 mov     byte ptr [edx], 30h ; '0'
.text:00414328                 jmp     short loc_4142F1
.text:00414328 ; ---------------------------------------------------------------------------
.text:0041432A                 align 10h
.text:00414330
.text:00414330 ; =============== S U B R O U T I N E =======================================
.text:00414330
.text:00414330 ; Attributes: info_from_lumina
.text:00414330
.text:00414330 ; int __cdecl __addmntentstr(char *, int)
.text:00414330 ___addmntentstr proc near               ; CODE XREF: .text:00413BFA↑p
.text:00414330
.text:00414330 Buffer          = dword ptr -4Ch
.text:00414330 Format          = dword ptr -48h
.text:00414330 var_44          = dword ptr -44h
.text:00414330 var_40          = dword ptr -40h
.text:00414330 var_3C          = dword ptr -3Ch
.text:00414330 var_38          = dword ptr -38h
.text:00414330 var_34          = dword ptr -34h
.text:00414330 var_30          = dword ptr -30h
.text:00414330 var_2C          = dword ptr -2Ch
.text:00414330 var_28          = dword ptr -28h
.text:00414330 var_24          = dword ptr -24h
.text:00414330 Str             = dword ptr -20h
.text:00414330 var_1C          = dword ptr -1Ch
.text:00414330 var_18          = dword ptr -18h
.text:00414330 arg_0           = dword ptr  4
.text:00414330 arg_4           = dword ptr  8
.text:00414330
.text:00414330                 push    ebx
.text:00414331                 sub     esp, 48h
.text:00414334                 mov     edx, [esp+4Ch+arg_4]
.text:00414338                 mov     ecx, [edx]
.text:0041433A                 mov     [esp+4Ch+var_2C], ecx
.text:0041433E                 mov     ebx, [edx+4]
.text:00414341                 mov     [esp+4Ch+var_28], ebx
.text:00414345                 mov     ebx, [edx+8]
.text:00414348                 mov     [esp+4Ch+var_24], ebx
.text:0041434C                 mov     ebx, [edx+0Ch]
.text:0041434F                 mov     [esp+4Ch+Str], ebx
.text:00414353                 mov     ebx, [edx+10h]
.text:00414356                 mov     [esp+4Ch+var_1C], ebx
.text:0041435A                 mov     ebx, [edx+14h]
.text:0041435D                 mov     [esp+4Ch+var_18], ebx
.text:00414361                 mov     ebx, ecx
.text:00414363                 movzx   eax, byte ptr [ecx]
.text:00414366                 test    al, al
.text:00414368                 jz      loc_414651
.text:0041436E                 mov     esi, esi
.text:00414370
.text:00414370 loc_414370:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:00414370                 cmp     al, 20h ; ' '
.text:00414372                 jz      loc_4145D0
.text:00414378                 cmp     al, 9
.text:0041437A                 jz      loc_4145D0
.text:00414380                 cmp     al, 5Ch ; '\'
.text:00414382                 jz      loc_4145D0
.text:00414388                 inc     ebx
.text:00414389                 movzx   eax, byte ptr [ebx]
.text:0041438C                 test    al, al
.text:0041438E                 jnz     short loc_414370
.text:00414390
.text:00414390 loc_414390:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:00414390                                         ; ___addmntentstr+2EA↓j
.text:00414390                 mov     ebx, [esp+4Ch+var_28]
.text:00414394                 mov     edx, ebx
.text:00414396                 movzx   eax, byte ptr [ebx]
.text:00414399                 test    al, al
.text:0041439B                 jz      short loc_4143C0
.text:0041439D                 lea     esi, [esi+0]
.text:004143A0
.text:004143A0 loc_4143A0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:004143A0                 cmp     al, 20h ; ' '
.text:004143A2                 jz      loc_41454A
.text:004143A8                 cmp     al, 9
.text:004143AA                 jz      loc_41454A
.text:004143B0                 cmp     al, 5Ch ; '\'
.text:004143B2                 jz      loc_41454A
.text:004143B8                 inc     ebx
.text:004143B9                 movzx   eax, byte ptr [ebx]
.text:004143BC                 test    al, al
.text:004143BE                 jnz     short loc_4143A0
.text:004143C0
.text:004143C0 loc_4143C0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:004143C0                                         ; ___addmntentstr+21C↓j ...
.text:004143C0                 mov     ebx, [esp+4Ch+var_24]
.text:004143C4                 mov     edx, ebx
.text:004143C6                 movzx   eax, byte ptr [ebx]
.text:004143C9                 test    al, al
.text:004143CB                 jz      short loc_4143F0
.text:004143CD                 lea     esi, [esi+0]
.text:004143D0
.text:004143D0 loc_4143D0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:004143D0                 cmp     al, 20h ; ' '
.text:004143D2                 jz      loc_4144CE
.text:004143D8                 cmp     al, 9
.text:004143DA                 jz      loc_4144CE
.text:004143E0                 cmp     al, 5Ch ; '\'
.text:004143E2                 jz      loc_4144CE
.text:004143E8                 inc     ebx
.text:004143E9                 movzx   eax, byte ptr [ebx]
.text:004143EC                 test    al, al
.text:004143EE                 jnz     short loc_4143D0
.text:004143F0
.text:004143F0 loc_4143F0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:004143F0                                         ; ___addmntentstr+1A0↓j ...
.text:004143F0                 mov     edx, [esp+4Ch+Str]
.text:004143F4                 mov     ebx, edx
.text:004143F6                 movzx   eax, byte ptr [edx]
.text:004143F9                 test    al, al
.text:004143FB                 jz      short loc_414414
.text:004143FD                 lea     esi, [esi+0]
.text:00414400
.text:00414400 loc_414400:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:00414400                 cmp     al, 20h ; ' '
.text:00414402                 jz      short loc_41445C
.text:00414404                 cmp     al, 9
.text:00414406                 jz      short loc_41445C
.text:00414408                 cmp     al, 5Ch ; '\'
.text:0041440A                 jz      short loc_41445C
.text:0041440C                 inc     ebx
.text:0041440D                 movzx   eax, byte ptr [ebx]
.text:00414410                 test    al, al
.text:00414412                 jnz     short loc_414400
.text:00414414
.text:00414414 loc_414414:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:00414414                                         ; ___addmntentstr+12E↓j ...
.text:00414414                 mov     [esp+4Ch+var_38], edx
.text:00414418                 mov     ebx, [esp+4Ch+var_18]
.text:0041441C                 mov     ecx, [esp+4Ch+var_1C]
.text:00414420                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00414428                 mov     edx, [esp+4Ch+var_2C]
.text:0041442C                 mov     [esp+4Ch+var_30], ebx
.text:00414430                 mov     ebx, [esp+4Ch+var_24]
.text:00414434                 mov     [esp+4Ch+var_34], ecx
.text:00414438                 mov     ecx, [esp+4Ch+var_28]
.text:0041443C                 mov     [esp+4Ch+var_3C], ebx
.text:00414440                 mov     ebx, [esp+4Ch+arg_0]
.text:00414444                 mov     [esp+4Ch+var_40], ecx
.text:00414448                 mov     [esp+4Ch+var_44], edx
.text:0041444C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0041444F                 call    sprintf
.text:00414454                 add     esp, 48h
.text:00414457                 shr     eax, 1Fh
.text:0041445A                 pop     ebx
.text:0041445B                 retn
.text:0041445C ; ---------------------------------------------------------------------------
.text:0041445C
.text:0041445C loc_41445C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0041445C                                         ; ___addmntentstr+D6↑j ...
.text:0041445C                 test    al, al
.text:0041445E                 jz      short loc_414414
.text:00414460                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00414463                 mov     ebx, edx
.text:00414465                 call    strlen
.text:0041446A                 lea     edx, ds:1[eax*4]
.text:00414471                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00414474                 call    malloc
.text:00414479                 mov     [esp+4Ch+Str], eax
.text:0041447D                 mov     edx, eax
.text:0041447F                 nop
.text:00414480
.text:00414480 loc_414480:                             ; CODE XREF: ___addmntentstr+168↓j
.text:00414480                 movzx   eax, byte ptr [ebx]
.text:00414483                 cmp     al, 20h ; ' '
.text:00414485                 jz      short loc_4144BD
.text:00414487                 cmp     al, 9
.text:00414489                 jz      short loc_4144AC
.text:0041448B                 cmp     al, 5Ch ; '\'
.text:0041448D                 jz      short loc_4144A3
.text:0041448F                 mov     [edx], al
.text:00414491
.text:00414491 loc_414491:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:00414491                                         ; ___addmntentstr+18B↓j ...
.text:00414491                 movzx   ecx, byte ptr [ebx]
.text:00414494                 inc     edx
.text:00414495                 inc     ebx
.text:00414496                 test    cl, cl
.text:00414498                 jnz     short loc_414480
.text:0041449A                 mov     edx, [esp+4Ch+Str]
.text:0041449E                 jmp     loc_414414
.text:004144A3 ; ---------------------------------------------------------------------------
.text:004144A3
.text:004144A3 loc_4144A3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:004144A3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004144A6                 inc     edx
.text:004144A7                 mov     byte ptr [edx], 5Ch ; '\'
.text:004144AA                 jmp     short loc_414491
.text:004144AC ; ---------------------------------------------------------------------------
.text:004144AC
.text:004144AC loc_4144AC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:004144AC                 mov     byte ptr [edx], 5Ch ; '\'
.text:004144AF                 inc     edx
.text:004144B0                 mov     byte ptr [edx], 30h ; '0'
.text:004144B3                 inc     edx
.text:004144B4                 mov     byte ptr [edx], 31h ; '1'
.text:004144B7                 inc     edx
.text:004144B8                 mov     byte ptr [edx], 32h ; '2'
.text:004144BB                 jmp     short loc_414491
.text:004144BD ; ---------------------------------------------------------------------------
.text:004144BD
.text:004144BD loc_4144BD:                             ; CODE XREF: ___addmntentstr+155↑j
.text:004144BD                 mov     byte ptr [edx], 5Ch ; '\'
.text:004144C0                 inc     edx
.text:004144C1                 mov     byte ptr [edx], 30h ; '0'
.text:004144C4                 inc     edx
.text:004144C5                 mov     byte ptr [edx], 34h ; '4'
.text:004144C8                 inc     edx
.text:004144C9                 mov     byte ptr [edx], 30h ; '0'
.text:004144CC                 jmp     short loc_414491
.text:004144CE ; ---------------------------------------------------------------------------
.text:004144CE
.text:004144CE loc_4144CE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:004144CE                                         ; ___addmntentstr+AA↑j ...
.text:004144CE                 test    al, al
.text:004144D0                 jz      loc_4143F0
.text:004144D6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:004144D9                 mov     ebx, edx
.text:004144DB                 call    strlen
.text:004144E0                 lea     edx, ds:1[eax*4]
.text:004144E7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004144EA                 call    malloc
.text:004144EF                 mov     [esp+4Ch+var_24], eax
.text:004144F3                 mov     edx, eax
.text:004144F5                 lea     esi, [esi+0]
.text:004144F9                 lea     edi, [edi+0]
.text:00414500
.text:00414500 loc_414500:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:00414500                 movzx   eax, byte ptr [ebx]
.text:00414503                 cmp     al, 20h ; ' '
.text:00414505                 jz      short loc_414539
.text:00414507                 cmp     al, 9
.text:00414509                 jz      short loc_414528
.text:0041450B                 cmp     al, 5Ch ; '\'
.text:0041450D                 jz      short loc_41451F
.text:0041450F                 mov     [edx], al
.text:00414511
.text:00414511 loc_414511:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:00414511                                         ; ___addmntentstr+207↓j ...
.text:00414511                 movzx   ecx, byte ptr [ebx]
.text:00414514                 inc     edx
.text:00414515                 inc     ebx
.text:00414516                 test    cl, cl
.text:00414518                 jnz     short loc_414500
.text:0041451A                 jmp     loc_4143F0
.text:0041451F ; ---------------------------------------------------------------------------
.text:0041451F
.text:0041451F loc_41451F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0041451F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414522                 inc     edx
.text:00414523                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414526                 jmp     short loc_414511
.text:00414528 ; ---------------------------------------------------------------------------
.text:00414528
.text:00414528 loc_414528:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:00414528                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041452B                 inc     edx
.text:0041452C                 mov     byte ptr [edx], 30h ; '0'
.text:0041452F                 inc     edx
.text:00414530                 mov     byte ptr [edx], 31h ; '1'
.text:00414533                 inc     edx
.text:00414534                 mov     byte ptr [edx], 32h ; '2'
.text:00414537                 jmp     short loc_414511
.text:00414539 ; ---------------------------------------------------------------------------
.text:00414539
.text:00414539 loc_414539:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:00414539                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041453C                 inc     edx
.text:0041453D                 mov     byte ptr [edx], 30h ; '0'
.text:00414540                 inc     edx
.text:00414541                 mov     byte ptr [edx], 34h ; '4'
.text:00414544                 inc     edx
.text:00414545                 mov     byte ptr [edx], 30h ; '0'
.text:00414548                 jmp     short loc_414511
.text:0041454A ; ---------------------------------------------------------------------------
.text:0041454A
.text:0041454A loc_41454A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0041454A                                         ; ___addmntentstr+7A↑j ...
.text:0041454A                 test    al, al
.text:0041454C                 jz      loc_4143C0
.text:00414552                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00414555                 mov     ebx, edx
.text:00414557                 call    strlen
.text:0041455C                 lea     edx, ds:1[eax*4]
.text:00414563                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00414566                 call    malloc
.text:0041456B                 mov     [esp+4Ch+var_28], eax
.text:0041456F                 mov     edx, eax
.text:00414571                 jmp     short loc_414580
.text:00414571 ; ---------------------------------------------------------------------------
.text:00414573                 align 10h
.text:00414580
.text:00414580 loc_414580:                             ; CODE XREF: ___addmntentstr+241↑j
.text:00414580                                         ; ___addmntentstr+268↓j
.text:00414580                 movzx   eax, byte ptr [ebx]
.text:00414583                 cmp     al, 20h ; ' '
.text:00414585                 jz      short loc_4145B9
.text:00414587                 cmp     al, 9
.text:00414589                 jz      short loc_4145A8
.text:0041458B                 cmp     al, 5Ch ; '\'
.text:0041458D                 jz      short loc_41459F
.text:0041458F                 mov     [edx], al
.text:00414591
.text:00414591 loc_414591:                             ; CODE XREF: ___addmntentstr+276↓j
.text:00414591                                         ; ___addmntentstr+287↓j ...
.text:00414591                 movzx   ecx, byte ptr [ebx]
.text:00414594                 inc     edx
.text:00414595                 inc     ebx
.text:00414596                 test    cl, cl
.text:00414598                 jnz     short loc_414580
.text:0041459A                 jmp     loc_4143C0
.text:0041459F ; ---------------------------------------------------------------------------
.text:0041459F
.text:0041459F loc_41459F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0041459F                 mov     byte ptr [edx], 5Ch ; '\'
.text:004145A2                 inc     edx
.text:004145A3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004145A6                 jmp     short loc_414591
.text:004145A8 ; ---------------------------------------------------------------------------
.text:004145A8
.text:004145A8 loc_4145A8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:004145A8                 mov     byte ptr [edx], 5Ch ; '\'
.text:004145AB                 inc     edx
.text:004145AC                 mov     byte ptr [edx], 30h ; '0'
.text:004145AF                 inc     edx
.text:004145B0                 mov     byte ptr [edx], 31h ; '1'
.text:004145B3                 inc     edx
.text:004145B4                 mov     byte ptr [edx], 32h ; '2'
.text:004145B7                 jmp     short loc_414591
.text:004145B9 ; ---------------------------------------------------------------------------
.text:004145B9
.text:004145B9 loc_4145B9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:004145B9                 mov     byte ptr [edx], 5Ch ; '\'
.text:004145BC                 inc     edx
.text:004145BD                 mov     byte ptr [edx], 30h ; '0'
.text:004145C0                 inc     edx
.text:004145C1                 mov     byte ptr [edx], 34h ; '4'
.text:004145C4                 inc     edx
.text:004145C5                 mov     byte ptr [edx], 30h ; '0'
.text:004145C8                 jmp     short loc_414591
.text:004145C8 ; ---------------------------------------------------------------------------
.text:004145CA                 align 10h
.text:004145D0
.text:004145D0 loc_4145D0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:004145D0                                         ; ___addmntentstr+4A↑j ...
.text:004145D0                 test    al, al
.text:004145D2                 jz      loc_414390
.text:004145D8                 mov     ebx, [esp+4Ch+var_2C]
.text:004145DC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:004145DF                 call    strlen
.text:004145E4                 lea     edx, ds:1[eax*4]
.text:004145EB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004145EE                 call    malloc
.text:004145F3                 mov     [esp+4Ch+var_2C], eax
.text:004145F7                 mov     edx, eax
.text:004145F9                 lea     esi, [esi+0]
.text:00414600
.text:00414600 loc_414600:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:00414600                 movzx   eax, byte ptr [ebx]
.text:00414603                 cmp     al, 20h ; ' '
.text:00414605                 jz      short loc_414640
.text:00414607                 cmp     al, 9
.text:00414609                 jz      short loc_414628
.text:0041460B                 cmp     al, 5Ch ; '\'
.text:0041460D                 jz      short loc_41461F
.text:0041460F                 mov     [edx], al
.text:00414611
.text:00414611 loc_414611:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:00414611                                         ; ___addmntentstr+307↓j ...
.text:00414611                 movzx   ecx, byte ptr [ebx]
.text:00414614                 inc     edx
.text:00414615                 inc     ebx
.text:00414616                 test    cl, cl
.text:00414618                 jnz     short loc_414600
.text:0041461A                 jmp     loc_414390
.text:0041461F ; ---------------------------------------------------------------------------
.text:0041461F
.text:0041461F loc_41461F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0041461F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414622                 inc     edx
.text:00414623                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414626                 jmp     short loc_414611
.text:00414628 ; ---------------------------------------------------------------------------
.text:00414628
.text:00414628 loc_414628:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:00414628                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041462B                 inc     edx
.text:0041462C                 mov     byte ptr [edx], 30h ; '0'
.text:0041462F                 inc     edx
.text:00414630                 mov     byte ptr [edx], 31h ; '1'
.text:00414633                 inc     edx
.text:00414634                 mov     byte ptr [edx], 32h ; '2'
.text:00414637                 jmp     short loc_414611
.text:00414637 ; ---------------------------------------------------------------------------
.text:00414639                 align 10h
.text:00414640
.text:00414640 loc_414640:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:00414640                 mov     byte ptr [edx], 5Ch ; '\'
.text:00414643                 inc     edx
.text:00414644                 mov     byte ptr [edx], 30h ; '0'
.text:00414647                 inc     edx
.text:00414648                 mov     byte ptr [edx], 34h ; '4'
.text:0041464B                 inc     edx
.text:0041464C                 mov     byte ptr [edx], 30h ; '0'
.text:0041464F                 jmp     short loc_414611
.text:00414651 ; ---------------------------------------------------------------------------
.text:00414651
.text:00414651 loc_414651:                             ; CODE XREF: ___addmntentstr+38↑j
.text:00414651                 movzx   eax, byte ptr [ecx]
.text:00414654                 jmp     loc_4145D0
.text:00414654 ___addmntentstr endp
.text:00414654
.text:00414654 ; ---------------------------------------------------------------------------
.text:00414659                 align 10h
.text:00414660
.text:00414660 ; =============== S U B R O U T I N E =======================================
.text:00414660
.text:00414660
.text:00414660 sub_414660      proc near               ; CODE XREF: sub_412F90+99↑p
.text:00414660
.text:00414660 nBufferLength   = dword ptr -1Ch
.text:00414660 lpBuffer        = dword ptr -18h
.text:00414660 dwBytes         = dword ptr -14h
.text:00414660 var_8           = dword ptr -8
.text:00414660 var_4           = dword ptr -4
.text:00414660
.text:00414660                 sub     esp, 1Ch
.text:00414663                 mov     [esp+1Ch+var_8], ebx
.text:00414667                 mov     [esp+1Ch+var_4], esi
.text:0041466B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:00414673                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0041467A                 call    GetLogicalDriveStringsA
.text:0041467F                 sub     esp, 8
.text:00414682                 mov     ebx, eax
.text:00414684                 call    GetProcessHeap
.text:00414689                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0041468C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:00414690                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:00414698                 call    HeapAlloc
.text:0041469D                 sub     esp, 0Ch
.text:004146A0                 mov     esi, eax
.text:004146A2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:004146A5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:004146A9                 call    GetLogicalDriveStringsA
.text:004146AE                 sub     esp, 8
.text:004146B1                 mov     eax, esi
.text:004146B3                 mov     ebx, [esp+1Ch+var_8]
.text:004146B7                 mov     esi, [esp+1Ch+var_4]
.text:004146BB                 add     esp, 1Ch
.text:004146BE                 retn
.text:004146BE sub_414660      endp
.text:004146BE
.text:004146BF
.text:004146BF ; =============== S U B R O U T I N E =======================================
.text:004146BF
.text:004146BF
.text:004146BF ; int __cdecl sub_4146BF(char *, char *)
.text:004146BF sub_4146BF      proc near               ; DATA XREF: sub_4146BF:loc_41474D↓o
.text:004146BF
.text:004146BF FileName        = dword ptr -1Ch
.text:004146BF Mode            = dword ptr -18h
.text:004146BF dwBytes         = dword ptr -14h
.text:004146BF arg_0           = dword ptr  4
.text:004146BF arg_4           = dword ptr  8
.text:004146BF
.text:004146BF                 ja      short $+2
.text:004146C1
.text:004146C1 loc_4146C1:                             ; CODE XREF: sub_4146BF↑j
.text:004146C1                 jmp     short loc_4146D0
.text:004146C1 ; ---------------------------------------------------------------------------
.text:004146C3                 align 10h
.text:004146D0
.text:004146D0 loc_4146D0:                             ; CODE XREF: sub_4146BF:loc_4146C1↑j
.text:004146D0                 push    edi
.text:004146D1                 push    esi
.text:004146D2                 push    ebx
.text:004146D3                 sub     esp, 10h
.text:004146D6                 mov     ebx, [esp+1Ch+arg_0]
.text:004146DA                 mov     edx, [esp+1Ch+arg_4]
.text:004146DE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:004146E1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:004146E5                 call    fopen
.text:004146EA                 test    eax, eax
.text:004146EC                 mov     edi, eax
.text:004146EE                 jz      short loc_41474D
.text:004146F0
.text:004146F0 loc_4146F0:                             ; CODE XREF: sub_4146BF+A2↓j
.text:004146F0                                         ; sub_4146BF+AB↓j
.text:004146F0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:004146F8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:004146FF                 call    GetLogicalDriveStringsA
.text:00414704                 sub     esp, 8
.text:00414707                 mov     esi, eax
.text:00414709                 call    GetProcessHeap
.text:0041470E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:00414711                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:00414715                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0041471D                 call    HeapAlloc
.text:00414722                 sub     esp, 0Ch
.text:00414725                 mov     ebx, eax
.text:00414727                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0041472A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0041472E                 call    GetLogicalDriveStringsA
.text:00414733                 mov     off_4180C4, ebx ; "notset"
.text:00414739                 sub     esp, 8
.text:0041473C                 xor     eax, eax
.text:0041473E                 test    ebx, ebx
.text:00414740                 setz    al
.text:00414743                 add     esp, 10h
.text:00414746                 pop     ebx
.text:00414747                 dec     eax
.text:00414748                 and     eax, edi
.text:0041474A                 pop     esi
.text:0041474B                 pop     edi
.text:0041474C                 retn
.text:0041474D ; ---------------------------------------------------------------------------
.text:0041474D
.text:0041474D loc_41474D:                             ; CODE XREF: sub_4146BF+2F↑j
.text:0041474D                 mov     [esp+1Ch+Mode], offset sub_4146BF ; Mode
.text:00414755                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00414758                 call    fopen
.text:0041475D                 test    eax, eax
.text:0041475F                 mov     edi, eax
.text:00414761                 jnz     short loc_4146F0
.text:00414763                 call    sub_414A30
.text:00414768                 mov     edi, eax
.text:0041476A                 jmp     short loc_4146F0
.text:0041476A sub_4146BF      endp
.text:0041476A
.text:0041476A ; ---------------------------------------------------------------------------
.text:0041476C                 align 10h
.text:00414770                 sub     esp, 0Ch
.text:00414773                 mov     eax, [esp+10h]
.text:00414777                 test    eax, eax
.text:00414779                 jz      short loc_414783
.text:0041477B                 mov     [esp], eax
.text:0041477E                 call    fclose
.text:00414783
.text:00414783 loc_414783:                             ; CODE XREF: .text:00414779↑j
.text:00414783                 call    GetProcessHeap
.text:00414788                 mov     [esp], eax
.text:0041478B                 mov     ecx, off_4180C4 ; "notset"
.text:00414791                 mov     dword ptr [esp+4], 0
.text:00414799                 mov     [esp+8], ecx
.text:0041479D                 call    HeapFree
.text:004147A2                 mov     edx, off_4180C0 ; "notset"
.text:004147A8                 sub     esp, 0Ch
.text:004147AB                 mov     eax, 1
.text:004147B0                 mov     off_4180C4, edx ; "notset"
.text:004147B6                 add     esp, 0Ch
.text:004147B9                 retn
.text:004147B9 ; ---------------------------------------------------------------------------
.text:004147BA                 align 10h
.text:004147C0                 push    edi
.text:004147C1                 push    esi
.text:004147C2                 push    ebx
.text:004147C3                 sub     esp, 10h
.text:004147C6                 mov     edi, [esp+24h]
.text:004147CA                 mov     [esp], edi
.text:004147CD                 call    strlen
.text:004147D2                 mov     edx, [esp+20h]
.text:004147D6                 mov     esi, eax
.text:004147D8                 mov     ebx, [edx+0Ch]
.text:004147DB                 nop
.text:004147DC                 lea     esi, [esi+0]
.text:004147E0
.text:004147E0 loc_4147E0:                             ; CODE XREF: .text:00414811↓j
.text:004147E0                 mov     [esp+4], edi
.text:004147E4                 mov     [esp], ebx
.text:004147E7                 call    strstr
.text:004147EC                 test    eax, eax
.text:004147EE                 jz      short loc_414813
.text:004147F0                 cmp     eax, ebx
.text:004147F2                 jz      short loc_414815
.text:004147F4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:004147F8                 jz      short loc_414820
.text:004147FA
.text:004147FA loc_4147FA:                             ; CODE XREF: .text:00414830↓j
.text:004147FA                 mov     [esp], ebx
.text:004147FD                 mov     dword ptr [esp+4], 2Ch ; ','
.text:00414805                 call    strchr
.text:0041480A                 test    eax, eax
.text:0041480C                 mov     ebx, eax
.text:0041480E                 jz      short loc_414813
.text:00414810                 inc     ebx
.text:00414811                 jmp     short loc_4147E0
.text:00414813 ; ---------------------------------------------------------------------------
.text:00414813
.text:00414813 loc_414813:                             ; CODE XREF: .text:004147EE↑j
.text:00414813                                         ; .text:0041480E↑j
.text:00414813                 xor     eax, eax
.text:00414815
.text:00414815 loc_414815:                             ; CODE XREF: .text:004147F2↑j
.text:00414815                                         ; .text:00414826↓j ...
.text:00414815                 add     esp, 10h
.text:00414818                 pop     ebx
.text:00414819                 pop     esi
.text:0041481A                 pop     edi
.text:0041481B                 retn
.text:0041481B ; ---------------------------------------------------------------------------
.text:0041481C                 align 10h
.text:00414820
.text:00414820 loc_414820:                             ; CODE XREF: .text:004147F8↑j
.text:00414820                 movzx   edx, byte ptr [esi+eax]
.text:00414824                 test    dl, dl
.text:00414826                 jz      short loc_414815
.text:00414828                 cmp     dl, 3Dh ; '='
.text:0041482B                 jz      short loc_414815
.text:0041482D                 cmp     dl, 2Ch ; ','
.text:00414830                 jnz     short loc_4147FA
.text:00414832                 jmp     short loc_414815
.text:00414832 ; ---------------------------------------------------------------------------
.text:00414834                 align 10h
.text:00414840 ; const char aFxstat64BadFil[]
.text:00414840 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:00414840                                         ; DATA XREF: sub_414870+7B↓o
.text:00414864                 align 10h
.text:00414870
.text:00414870 ; =============== S U B R O U T I N E =======================================
.text:00414870
.text:00414870
.text:00414870 ; int __cdecl sub_414870(HANDLE hNamedPipe, int, int)
.text:00414870 sub_414870      proc near               ; CODE XREF: .text:004131A9↑p
.text:00414870
.text:00414870 FileHandle      = dword ptr -1Ch
.text:00414870 var_18          = dword ptr -18h
.text:00414870 var_C           = dword ptr -0Ch
.text:00414870 var_8           = dword ptr -8
.text:00414870 var_4           = dword ptr -4
.text:00414870 hNamedPipe      = dword ptr  4
.text:00414870 arg_4           = dword ptr  8
.text:00414870 arg_8           = dword ptr  0Ch
.text:00414870
.text:00414870                 sub     esp, 1Ch
.text:00414873                 mov     edx, [esp+1Ch+arg_4]
.text:00414877                 mov     [esp+1Ch+var_C], ebx
.text:0041487B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0041487F                 mov     [esp+1Ch+var_8], esi
.text:00414883                 mov     esi, [esp+1Ch+arg_8]
.text:00414887                 test    ebx, ebx
.text:00414889                 mov     [esp+1Ch+var_4], edi
.text:0041488D                 jnz     short loc_4148C7
.text:0041488F                 test    edx, edx
.text:00414891                 js      short loc_4148E7
.text:00414893                 test    esi, esi
.text:00414895                 jz      short loc_4148C7
.text:00414897                 cld
.text:00414898                 mov     eax, ebx
.text:0041489A                 mov     edi, esi
.text:0041489C                 mov     ecx, 18h
.text:004148A1                 rep stosd
.text:004148A3                 mov     [esp+1Ch+arg_4], esi ; int
.text:004148A7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:004148AA                 call    _get_osfhandle
.text:004148AF                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:004148B3                 mov     ebx, [esp+1Ch+var_C]
.text:004148B7                 mov     esi, [esp+1Ch+var_8]
.text:004148BB                 mov     edi, [esp+1Ch+var_4]
.text:004148BF                 add     esp, 1Ch
.text:004148C2                 jmp     sub_40FFF0
.text:004148C7 ; ---------------------------------------------------------------------------
.text:004148C7
.text:004148C7 loc_4148C7:                             ; CODE XREF: sub_414870+1D↑j
.text:004148C7                                         ; sub_414870+25↑j
.text:004148C7                 call    _errno
.text:004148CC                 mov     dword ptr [eax], 16h
.text:004148D2
.text:004148D2 loc_4148D2:                             ; CODE XREF: sub_414870+92↓j
.text:004148D2                 mov     ebx, [esp+1Ch+var_C]
.text:004148D6                 mov     eax, 0FFFFFFFFh
.text:004148DB                 mov     esi, [esp+1Ch+var_8]
.text:004148DF                 mov     edi, [esp+1Ch+var_4]
.text:004148E3                 add     esp, 1Ch
.text:004148E6                 retn
.text:004148E7 ; ---------------------------------------------------------------------------
.text:004148E7
.text:004148E7 loc_4148E7:                             ; CODE XREF: sub_414870+21↑j
.text:004148E7                 mov     [esp+1Ch+var_18], edx
.text:004148EB                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:004148F2                 call    printf
.text:004148F7                 call    _errno
.text:004148FC                 mov     dword ptr [eax], 9
.text:00414902                 jmp     short loc_4148D2
.text:00414902 sub_414870      endp
.text:00414902
.text:00414902 ; ---------------------------------------------------------------------------
.text:00414904                 align 20h
.text:00414920
.text:00414920 ; =============== S U B R O U T I N E =======================================
.text:00414920
.text:00414920 ; Attributes: noreturn
.text:00414920
.text:00414920 sub_414920      proc near               ; CODE XREF: .text:00414029↑p
.text:00414920                                         ; sub_414920↓j
.text:00414920                 jmp     short sub_414920
.text:00414920 sub_414920      endp
.text:00414920
.text:00414920 ; ---------------------------------------------------------------------------
.text:00414922                 align 10h
.text:00414930
.text:00414930 ; =============== S U B R O U T I N E =======================================
.text:00414930
.text:00414930
.text:00414930 sub_414930      proc near               ; CODE XREF: .text:00413D85↑p
.text:00414930
.text:00414930 FileHandle      = dword ptr -1Ch
.text:00414930 dwFileOffsetLow = dword ptr -18h
.text:00414930 dwFileOffsetHigh= dword ptr -14h
.text:00414930 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:00414930 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:00414930 var_8           = dword ptr -8
.text:00414930 var_4           = dword ptr -4
.text:00414930 arg_0           = dword ptr  4
.text:00414930
.text:00414930                 sub     esp, 1Ch
.text:00414933                 mov     edx, [esp+1Ch+arg_0]
.text:00414937                 mov     [esp+1Ch+var_4], esi
.text:0041493B                 mov     [esp+1Ch+var_8], ebx
.text:0041493F                 mov     ebx, [edx+10h]
.text:00414942                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:00414945                 call    _get_osfhandle
.text:0041494A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041494D                 mov     esi, eax
.text:0041494F                 call    _filelengthi64
.text:00414954                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:00414958                 cdq
.text:00414959                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0041495C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:00414960                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:00414968                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:00414970                 call    UnlockFile
.text:00414975                 sub     esp, 14h
.text:00414978                 mov     ebx, [esp+1Ch+var_8]
.text:0041497C                 mov     esi, [esp+1Ch+var_4]
.text:00414980                 add     esp, 1Ch
.text:00414983                 retn
.text:00414983 sub_414930      endp
.text:00414983
.text:00414983 ; ---------------------------------------------------------------------------
.text:00414984                 align 10h
.text:00414990
.text:00414990 ; =============== S U B R O U T I N E =======================================
.text:00414990
.text:00414990
.text:00414990 ; int __cdecl sub_414990(int, char *Control)
.text:00414990 sub_414990      proc near               ; CODE XREF: .text:00413C46↑p
.text:00414990                                         ; .text:00413C96↑p ...
.text:00414990
.text:00414990 Str             = dword ptr -1Ch
.text:00414990 Val             = dword ptr -18h
.text:00414990 var_8           = dword ptr -8
.text:00414990 var_4           = dword ptr -4
.text:00414990 arg_0           = dword ptr  4
.text:00414990 Control         = dword ptr  8
.text:00414990
.text:00414990                 sub     esp, 1Ch
.text:00414993                 xor     eax, eax
.text:00414995                 mov     edx, [esp+1Ch+Control]
.text:00414999                 mov     [esp+1Ch+var_4], esi
.text:0041499D                 mov     esi, [esp+1Ch+arg_0]
.text:004149A1                 mov     [esp+1Ch+var_8], ebx
.text:004149A5                 mov     ebx, [esi]
.text:004149A7                 test    ebx, ebx
.text:004149A9                 jz      short loc_4149D8
.text:004149AB                 movzx   eax, byte ptr [edx]
.text:004149AE                 test    al, al
.text:004149B0                 jz      short loc_4149D0
.text:004149B2                 cmp     byte ptr [edx+1], 0
.text:004149B6                 jnz     short loc_414A10
.text:004149B8                 movzx   ecx, byte ptr [ebx]
.text:004149BB                 mov     edx, ebx
.text:004149BD                 cmp     cl, al
.text:004149BF                 jz      short loc_414A02
.text:004149C1                 test    cl, cl
.text:004149C3                 jnz     short loc_4149E4
.text:004149C5                 lea     esi, [esi+0]
.text:004149C9                 lea     edi, [edi+0]
.text:004149D0
.text:004149D0 loc_4149D0:                             ; CODE XREF: sub_414990+20↑j
.text:004149D0                                         ; sub_414990+74↓j
.text:004149D0                 mov     dword ptr [esi], 0
.text:004149D6
.text:004149D6 loc_4149D6:                             ; CODE XREF: sub_414990+7C↓j
.text:004149D6                 mov     eax, ebx
.text:004149D8
.text:004149D8 loc_4149D8:                             ; CODE XREF: sub_414990+19↑j
.text:004149D8                 mov     ebx, [esp+1Ch+var_8]
.text:004149DC                 mov     esi, [esp+1Ch+var_4]
.text:004149E0                 add     esp, 1Ch
.text:004149E3                 retn
.text:004149E4 ; ---------------------------------------------------------------------------
.text:004149E4
.text:004149E4 loc_4149E4:                             ; CODE XREF: sub_414990+33↑j
.text:004149E4                 movsx   edx, al
.text:004149E7                 mov     [esp+1Ch+Val], edx ; Val
.text:004149EB                 lea     edx, [ebx+1]
.text:004149EE                 mov     [esp+1Ch+Str], edx ; Str
.text:004149F1                 call    strchr
.text:004149F6                 lea     esi, [esi+0]
.text:004149F9                 lea     edi, [edi+0]
.text:00414A00
.text:00414A00 loc_414A00:                             ; CODE XREF: sub_414990+8C↓j
.text:00414A00                 mov     edx, eax
.text:00414A02
.text:00414A02 loc_414A02:                             ; CODE XREF: sub_414990+2F↑j
.text:00414A02                 test    edx, edx
.text:00414A04                 jz      short loc_4149D0
.text:00414A06                 mov     byte ptr [edx], 0
.text:00414A09                 inc     edx
.text:00414A0A                 mov     [esi], edx
.text:00414A0C                 jmp     short loc_4149D6
.text:00414A0C ; ---------------------------------------------------------------------------
.text:00414A0E                 align 10h
.text:00414A10
.text:00414A10 loc_414A10:                             ; CODE XREF: sub_414990+26↑j
.text:00414A10                 mov     [esp+1Ch+Val], edx ; Control
.text:00414A14                 mov     [esp+1Ch+Str], ebx ; Str
.text:00414A17                 call    strpbrk
.text:00414A1C                 jmp     short loc_414A00
.text:00414A1C sub_414990      endp
.text:00414A1C
.text:00414A1C ; ---------------------------------------------------------------------------
.text:00414A1E                 align 10h
.text:00414A20 ; const char aTmpf[]
.text:00414A20 aTmpf           db 'tmpf',0             ; DATA XREF: sub_414A30+20↓o
.text:00414A25 ; const char aWBd[]
.text:00414A25 aWBd            db 'w+bD',0             ; DATA XREF: sub_414A30+5E↓o
.text:00414A2A                 align 10h
.text:00414A30
.text:00414A30 ; =============== S U B R O U T I N E =======================================
.text:00414A30
.text:00414A30
.text:00414A30 sub_414A30      proc near               ; CODE XREF: sub_4146BF+A4↑p
.text:00414A30
.text:00414A30 FileHandle      = dword ptr -13Ch
.text:00414A30 Format          = dword ptr -138h
.text:00414A30 var_134         = dword ptr -134h
.text:00414A30 var_130         = dword ptr -130h
.text:00414A30 var_12C         = dword ptr -12Ch
.text:00414A30 Buffer          = byte ptr -11Ch
.text:00414A30 var_8           = dword ptr -8
.text:00414A30 var_4           = dword ptr -4
.text:00414A30
.text:00414A30                 sub     esp, 13Ch
.text:00414A36                 mov     [esp+13Ch+var_8], ebx
.text:00414A3D                 lea     ebx, [esp+13Ch+Buffer]
.text:00414A41                 mov     [esp+13Ch+var_4], esi
.text:00414A48                 mov     [esp+13Ch+var_12C], 0 ; int
.text:00414A50                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:00414A58                 mov     [esp+13Ch+var_134], 0 ; char *
.text:00414A60                 mov     [esp+13Ch+Format], 104h ; int
.text:00414A68                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:00414A6B                 call    sub_414B00
.text:00414A70                 xor     edx, edx
.text:00414A72                 test    eax, eax
.text:00414A74                 jnz     short loc_414AA6
.text:00414A76                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:00414A79                 mov     [esp+13Ch+Format], 0 ; int
.text:00414A81                 call    sub_414E80
.text:00414A86                 xor     edx, edx
.text:00414A88                 mov     ebx, eax
.text:00414A8A                 test    eax, eax
.text:00414A8C                 js      short loc_414AA6
.text:00414A8E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:00414A96                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:00414A99                 call    _fdopen
.text:00414A9E                 test    eax, eax
.text:00414AA0                 mov     esi, eax
.text:00414AA2                 jz      short loc_414ABD
.text:00414AA4
.text:00414AA4 loc_414AA4:                             ; CODE XREF: sub_414A30+95↓j
.text:00414AA4                 mov     edx, esi
.text:00414AA6
.text:00414AA6 loc_414AA6:                             ; CODE XREF: sub_414A30+44↑j
.text:00414AA6                                         ; sub_414A30+5C↑j
.text:00414AA6                 mov     ebx, [esp+13Ch+var_8]
.text:00414AAD                 mov     eax, edx
.text:00414AAF                 mov     esi, [esp+13Ch+var_4]
.text:00414AB6                 add     esp, 13Ch
.text:00414ABC                 retn
.text:00414ABD ; ---------------------------------------------------------------------------
.text:00414ABD
.text:00414ABD loc_414ABD:                             ; CODE XREF: sub_414A30+72↑j
.text:00414ABD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:00414AC0                 call    _close
.text:00414AC5                 jmp     short loc_414AA4
.text:00414AC5 sub_414A30      endp
.text:00414AC5
.text:00414AC5 ; ---------------------------------------------------------------------------
.text:00414AC7                 align 10h
.text:00414AD0 aFile           db 'file',0             ; DATA XREF: sub_414B00:loc_414B2C↓o
.text:00414AD5 ; const char aSSxxxxxx[]
.text:00414AD5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_414B00+9B↓o
.text:00414AE5 ; const char aTemp[]
.text:00414AE5 aTemp           db 'TEMP',0             ; DATA XREF: sub_414B00:loc_414BE2↓o
.text:00414AE5                                         ; sub_414B00:loc_414C22↓o ...
.text:00414AEA ; const char aTmp[]
.text:00414AEA aTmp            db '/tmp',0             ; DATA XREF: sub_414B00+12F↓o
.text:00414AEA                                         ; sub_414B00+141↓o ...
.text:00414AEF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_414B00:loc_414CA0↓o
.text:00414AF6 aTmp_0          db 'TMP',0              ; DATA XREF: sub_414B00:loc_414D30↓o
.text:00414AFA                 align 10h
.text:00414B00
.text:00414B00 ; =============== S U B R O U T I N E =======================================
.text:00414B00
.text:00414B00
.text:00414B00 ; int __cdecl sub_414B00(char *Buffer, int, char *, char *, int)
.text:00414B00 sub_414B00      proc near               ; CODE XREF: sub_414A30+3B↑p
.text:00414B00
.text:00414B00 Str             = dword ptr -1BCh
.text:00414B00 Format          = dword ptr -1B8h
.text:00414B00 var_1B4         = dword ptr -1B4h
.text:00414B00 var_1B0         = dword ptr -1B0h
.text:00414B00 var_1AC         = dword ptr -1ACh
.text:00414B00 var_1A8         = dword ptr -1A8h
.text:00414B00 var_19C         = dword ptr -19Ch
.text:00414B00 var_13C         = dword ptr -13Ch
.text:00414B00 var_DC          = dword ptr -0DCh
.text:00414B00 var_7C          = dword ptr -7Ch
.text:00414B00 Buffer          = dword ptr  4
.text:00414B00 arg_4           = dword ptr  8
.text:00414B00 arg_8           = dword ptr  0Ch
.text:00414B00 arg_C           = dword ptr  10h
.text:00414B00 arg_10          = dword ptr  14h
.text:00414B00
.text:00414B00                 push    ebp
.text:00414B01                 push    edi
.text:00414B02                 push    esi
.text:00414B03                 push    ebx
.text:00414B04                 sub     esp, 1ACh
.text:00414B0A                 mov     eax, [esp+1BCh+arg_C]
.text:00414B11                 mov     esi, [esp+1BCh+arg_8]
.text:00414B18                 test    eax, eax
.text:00414B1A                 jz      short loc_414B2C
.text:00414B1C                 mov     edx, [esp+1BCh+arg_C]
.text:00414B23                 cmp     byte ptr [edx], 0
.text:00414B26                 jnz     loc_414D60
.text:00414B2C
.text:00414B2C loc_414B2C:                             ; CODE XREF: sub_414B00+1A↑j
.text:00414B2C                 mov     eax, offset aFile ; "file"
.text:00414B31                 mov     ebp, 4
.text:00414B36                 mov     [esp+1BCh+arg_C], eax
.text:00414B3D
.text:00414B3D loc_414B3D:                             ; CODE XREF: sub_414B00+274↓j
.text:00414B3D                                         ; sub_414B00+27F↓j
.text:00414B3D                 mov     ebx, [esp+1BCh+arg_10]
.text:00414B44                 test    ebx, ebx
.text:00414B46                 jnz     loc_414CA0
.text:00414B4C
.text:00414B4C loc_414B4C:                             ; CODE XREF: sub_414B00+21C↓j
.text:00414B4C                                         ; sub_414B00+224↓j ...
.text:00414B4C                 test    esi, esi
.text:00414B4E                 jz      loc_414BE2
.text:00414B54
.text:00414B54 loc_414B54:                             ; CODE XREF: sub_414B00+176↓j
.text:00414B54                                         ; sub_414B00+19A↓j
.text:00414B54                 mov     [esp+1BCh+Str], esi ; Str
.text:00414B57                 call    strlen
.text:00414B5C                 test    eax, eax
.text:00414B5E                 mov     edx, eax
.text:00414B60                 jz      short loc_414B70
.text:00414B62                 movzx   eax, byte ptr [eax+esi-1]
.text:00414B67                 cmp     al, 2Fh ; '/'
.text:00414B69                 jz      short loc_414BD0
.text:00414B6B                 cmp     al, 5Ch ; '\'
.text:00414B6D                 jz      short loc_414BD0
.text:00414B6F                 nop
.text:00414B70
.text:00414B70 loc_414B70:                             ; CODE XREF: sub_414B00+60↑j
.text:00414B70                                         ; sub_414B00+D1↓j ...
.text:00414B70                 lea     edi, [ebp+edx+8]
.text:00414B74                 cmp     [esp+1BCh+arg_4], edi
.text:00414B7B                 jb      short loc_414BB8
.text:00414B7D                 mov     [esp+1BCh+var_1AC], ebp
.text:00414B81                 mov     ecx, [esp+1BCh+arg_C]
.text:00414B88                 mov     ebp, [esp+1BCh+Buffer]
.text:00414B8F                 mov     [esp+1BCh+var_1B0], esi
.text:00414B93                 mov     [esp+1BCh+var_1A8], ecx
.text:00414B97                 mov     [esp+1BCh+var_1B4], edx
.text:00414B9B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00414BA3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00414BA6                 call    sprintf
.text:00414BAB                 xor     eax, eax
.text:00414BAD
.text:00414BAD loc_414BAD:                             ; CODE XREF: sub_414B00+C8↓j
.text:00414BAD                 add     esp, 1ACh
.text:00414BB3                 pop     ebx
.text:00414BB4                 pop     esi
.text:00414BB5                 pop     edi
.text:00414BB6                 pop     ebp
.text:00414BB7                 retn
.text:00414BB8 ; ---------------------------------------------------------------------------
.text:00414BB8
.text:00414BB8 loc_414BB8:                             ; CODE XREF: sub_414B00+7B↑j
.text:00414BB8                 call    _errno
.text:00414BBD                 mov     dword ptr [eax], 16h
.text:00414BC3
.text:00414BC3 loc_414BC3:                             ; CODE XREF: sub_414B00+187↓j
.text:00414BC3                 mov     eax, 0FFFFFFFFh
.text:00414BC8                 jmp     short loc_414BAD
.text:00414BC8 ; ---------------------------------------------------------------------------
.text:00414BCA                 align 10h
.text:00414BD0
.text:00414BD0 loc_414BD0:                             ; CODE XREF: sub_414B00+69↑j
.text:00414BD0                                         ; sub_414B00+6D↑j ...
.text:00414BD0                 dec     edx
.text:00414BD1                 jz      short loc_414B70
.text:00414BD3                 movzx   eax, byte ptr [edx+esi-1]
.text:00414BD8                 cmp     al, 2Fh ; '/'
.text:00414BDA                 jz      short loc_414BD0
.text:00414BDC                 cmp     al, 5Ch ; '\'
.text:00414BDE                 jz      short loc_414BD0
.text:00414BE0                 jmp     short loc_414B70
.text:00414BE2 ; ---------------------------------------------------------------------------
.text:00414BE2
.text:00414BE2 loc_414BE2:                             ; CODE XREF: sub_414B00+4E↑j
.text:00414BE2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00414BE9                 lea     esi, [esp+1BCh+var_13C]
.text:00414BF0                 call    getenv
.text:00414BF5                 mov     [esp+1BCh+Format], eax ; char *
.text:00414BF9                 mov     [esp+1BCh+var_1B4], esi ; int
.text:00414BFD                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00414C04                 call    sub_40F480
.text:00414C09                 test    eax, eax
.text:00414C0B                 jnz     short loc_414C22
.text:00414C0D                 mov     edi, [esp+1BCh+var_13C]
.text:00414C14                 and     edi, 0F000h
.text:00414C1A                 cmp     edi, 4000h
.text:00414C20                 jz      short loc_414C8C
.text:00414C22
.text:00414C22 loc_414C22:                             ; CODE XREF: sub_414B00+10B↑j
.text:00414C22                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00414C29                 call    getenv
.text:00414C2E                 cld
.text:00414C2F                 mov     edx, offset aTmp ; "/tmp"
.text:00414C34                 mov     esi, eax
.text:00414C36                 mov     ecx, 5
.text:00414C3B                 mov     edi, edx
.text:00414C3D                 repe cmpsb
.text:00414C3F                 jz      short loc_414C7C
.text:00414C41                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:00414C49                 lea     ecx, [esp+1BCh+var_19C]
.text:00414C4D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00414C51                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00414C58                 call    sub_40F480
.text:00414C5D                 test    eax, eax
.text:00414C5F                 jnz     short loc_414C7C
.text:00414C61                 mov     ebx, [esp+1BCh+var_19C]
.text:00414C65                 mov     esi, offset aTmp ; "/tmp"
.text:00414C6A                 and     ebx, 0F000h
.text:00414C70                 cmp     ebx, 4000h
.text:00414C76                 jz      loc_414B54
.text:00414C7C
.text:00414C7C loc_414C7C:                             ; CODE XREF: sub_414B00+13F↑j
.text:00414C7C                                         ; sub_414B00+15F↑j
.text:00414C7C                 call    _errno
.text:00414C81                 mov     dword ptr [eax], 2
.text:00414C87                 jmp     loc_414BC3
.text:00414C8C ; ---------------------------------------------------------------------------
.text:00414C8C
.text:00414C8C loc_414C8C:                             ; CODE XREF: sub_414B00+120↑j
.text:00414C8C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00414C93                 call    getenv
.text:00414C98                 mov     esi, eax
.text:00414C9A                 jmp     loc_414B54
.text:00414C9A ; ---------------------------------------------------------------------------
.text:00414C9F                 align 10h
.text:00414CA0
.text:00414CA0 loc_414CA0:                             ; CODE XREF: sub_414B00+46↑j
.text:00414CA0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:00414CA7                 call    sub_415390
.text:00414CAC                 test    eax, eax
.text:00414CAE                 mov     ebx, eax
.text:00414CB0                 jz      short loc_414D30
.text:00414CB2
.text:00414CB2 loc_414CB2:                             ; CODE XREF: sub_414B00+240↓j
.text:00414CB2                                         ; sub_414B00+256↓j
.text:00414CB2                 mov     [esp+1BCh+Format], ebx ; char *
.text:00414CB6                 lea     edi, [esp+1BCh+var_7C]
.text:00414CBD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00414CC1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00414CC8                 call    sub_40F480
.text:00414CCD                 test    eax, eax
.text:00414CCF                 jnz     short loc_414CE6
.text:00414CD1                 mov     edx, [esp+1BCh+var_7C]
.text:00414CD8                 and     edx, 0F000h
.text:00414CDE                 cmp     edx, 4000h
.text:00414CE4                 jz      short loc_414D29
.text:00414CE6
.text:00414CE6 loc_414CE6:                             ; CODE XREF: sub_414B00+1CF↑j
.text:00414CE6                                         ; sub_414B00+25C↓j
.text:00414CE6                 test    esi, esi
.text:00414CE8                 jz      short loc_414D22
.text:00414CEA                 mov     [esp+1BCh+Format], esi ; char *
.text:00414CEE                 lea     ecx, [esp+1BCh+var_DC]
.text:00414CF5                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00414CF9                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00414D00                 call    sub_40F480
.text:00414D05                 test    eax, eax
.text:00414D07                 jnz     short loc_414D22
.text:00414D09                 mov     ebx, [esp+1BCh+var_DC]
.text:00414D10                 and     ebx, 0F000h
.text:00414D16                 cmp     ebx, 4000h
.text:00414D1C                 jz      loc_414B4C
.text:00414D22
.text:00414D22 loc_414D22:                             ; CODE XREF: sub_414B00+1E8↑j
.text:00414D22                                         ; sub_414B00+207↑j
.text:00414D22                 xor     esi, esi
.text:00414D24                 jmp     loc_414B4C
.text:00414D29 ; ---------------------------------------------------------------------------
.text:00414D29
.text:00414D29 loc_414D29:                             ; CODE XREF: sub_414B00+1E4↑j
.text:00414D29                 mov     esi, ebx
.text:00414D2B                 jmp     loc_414B4C
.text:00414D30 ; ---------------------------------------------------------------------------
.text:00414D30
.text:00414D30 loc_414D30:                             ; CODE XREF: sub_414B00+1B0↑j
.text:00414D30                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:00414D37                 call    sub_415390
.text:00414D3C                 test    eax, eax
.text:00414D3E                 mov     ebx, eax
.text:00414D40                 jnz     loc_414CB2
.text:00414D46                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00414D4D                 call    sub_415390
.text:00414D52                 test    eax, eax
.text:00414D54                 mov     ebx, eax
.text:00414D56                 jnz     loc_414CB2
.text:00414D5C                 jmp     short loc_414CE6
.text:00414D5C ; ---------------------------------------------------------------------------
.text:00414D5E                 align 10h
.text:00414D60
.text:00414D60 loc_414D60:                             ; CODE XREF: sub_414B00+26↑j
.text:00414D60                 mov     ecx, [esp+1BCh+arg_C]
.text:00414D67                 mov     [esp+1BCh+Str], ecx ; Str
.text:00414D6A                 call    strlen
.text:00414D6F                 cmp     eax, 5
.text:00414D72                 mov     ebp, eax
.text:00414D74                 jbe     loc_414B3D
.text:00414D7A                 mov     ebp, 5
.text:00414D7F                 jmp     loc_414B3D
.text:00414D7F sub_414B00      endp
.text:00414D7F
.text:00414D7F ; ---------------------------------------------------------------------------
.text:00414D84                 align 10h
.text:00414D90 byte_414D90     db 61h                  ; DATA XREF: sub_414E80+DC↓r
.text:00414D90                                         ; sub_414E80+122↓r ...
.text:00414D91 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:00414DCF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_414E80+39↓o
.text:00414DD6                 db 1Ah dup(90h)
.text:00414DF0 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00414DF0                                         ; DATA XREF: sub_414E80:loc_4150F8↓o
.text:00414E0F                 align 10h
.text:00414E10 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:00414E10                                         ; DATA XREF: sub_414E80+405↓o
.text:00414E3B                 db 15h dup(90h)
.text:00414E50 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:00414E50                                         ; DATA XREF: sub_414E80+40D↓o
.text:00414E73                 align 10h
.text:00414E80
.text:00414E80 ; =============== S U B R O U T I N E =======================================
.text:00414E80
.text:00414E80
.text:00414E80 ; int __cdecl sub_414E80(char *FileName, int)
.text:00414E80 sub_414E80      proc near               ; CODE XREF: sub_414A30+51↑p
.text:00414E80
.text:00414E80 Str             = dword ptr -9Ch
.text:00414E80 OpenFlag        = dword ptr -98h
.text:00414E80 var_94          = dword ptr -94h
.text:00414E80 var_90          = dword ptr -90h
.text:00414E80 var_8C          = dword ptr -8Ch
.text:00414E80 var_88          = dword ptr -88h
.text:00414E80 var_84          = dword ptr -84h
.text:00414E80 var_80          = dword ptr -80h
.text:00414E80 var_7C          = dword ptr -7Ch
.text:00414E80 FileName        = dword ptr  4
.text:00414E80 arg_4           = dword ptr  8
.text:00414E80
.text:00414E80                 push    ebp
.text:00414E81                 push    edi
.text:00414E82                 push    esi
.text:00414E83                 push    ebx
.text:00414E84                 sub     esp, 8Ch
.text:00414E8A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:00414E92                 call    _errno
.text:00414E97                 mov     edx, [eax]
.text:00414E99                 mov     [esp+9Ch+var_8C], edx
.text:00414E9D                 mov     edx, [esp+9Ch+FileName]
.text:00414EA4                 mov     [esp+9Ch+Str], edx ; Str
.text:00414EA7                 call    strlen
.text:00414EAC                 cmp     eax, 5
.text:00414EAF                 jle     short loc_414ECD
.text:00414EB1                 cld
.text:00414EB2                 mov     ecx, [esp+9Ch+FileName]
.text:00414EB9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:00414EBE                 lea     esi, [eax+ecx-6]
.text:00414EC2                 mov     ecx, 7
.text:00414EC7                 mov     ebp, esi
.text:00414EC9                 repe cmpsb
.text:00414ECB                 jz      short loc_414EE8
.text:00414ECD
.text:00414ECD loc_414ECD:                             ; CODE XREF: sub_414E80+2F↑j
.text:00414ECD                 call    _errno
.text:00414ED2                 mov     dword ptr [eax], 16h
.text:00414ED8
.text:00414ED8 loc_414ED8:                             ; CODE XREF: sub_414E80+295↓j
.text:00414ED8                                         ; sub_414E80+2D8↓j ...
.text:00414ED8                 mov     eax, 0FFFFFFFFh
.text:00414EDD
.text:00414EDD loc_414EDD:                             ; CODE XREF: sub_414E80+2EF↓j
.text:00414EDD                                         ; sub_414E80+332↓j
.text:00414EDD                 add     esp, 8Ch
.text:00414EE3                 pop     ebx
.text:00414EE4                 pop     esi
.text:00414EE5                 pop     edi
.text:00414EE6                 pop     ebp
.text:00414EE7                 retn
.text:00414EE8 ; ---------------------------------------------------------------------------
.text:00414EE8
.text:00414EE8 loc_414EE8:                             ; CODE XREF: sub_414E80+4B↑j
.text:00414EE8                 mov     ecx, ds:dword_419684
.text:00414EEE                 mov     edi, ds:dword_419680
.text:00414EF4                 mov     eax, ecx
.text:00414EF6                 or      eax, edi
.text:00414EF8                 jz      loc_415233
.text:00414EFE
.text:00414EFE loc_414EFE:                             ; CODE XREF: sub_414E80+3F8↓j
.text:00414EFE                 rdtsc
.text:00414F00                 mov     edi, edx
.text:00414F02                 mov     esi, eax
.text:00414F04                 call    _getpid
.text:00414F09                 mov     ebx, eax
.text:00414F0B                 mov     edx, esi
.text:00414F0D                 sar     ebx, 1Fh
.text:00414F10                 xor     edx, eax
.text:00414F12                 mov     ecx, edi
.text:00414F14                 xor     ecx, ebx
.text:00414F16                 mov     ebx, edx
.text:00414F18                 mov     esi, ecx
.text:00414F1A                 add     ebx, ds:dword_419680
.text:00414F20                 adc     esi, ds:dword_419684
.text:00414F26                 xor     edi, edi
.text:00414F28                 mov     ds:dword_419680, ebx
.text:00414F2E                 mov     ds:dword_419684, esi
.text:00414F34                 lea     esi, [esi+0]
.text:00414F3A                 lea     edi, [edi+0]
.text:00414F40
.text:00414F40 loc_414F40:                             ; CODE XREF: sub_414E80+2C7↓j
.text:00414F40                 mov     [esp+9Ch+Str], ebx
.text:00414F43                 mov     [esp+9Ch+OpenFlag], esi
.text:00414F47                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414F4F                 mov     [esp+9Ch+var_90], 0
.text:00414F57                 call    sub_416C90
.text:00414F5C                 movzx   ecx, ds:byte_414D90[eax]
.text:00414F63                 mov     [ebp+0], cl
.text:00414F66                 mov     [esp+9Ch+Str], ebx
.text:00414F69                 mov     [esp+9Ch+OpenFlag], esi
.text:00414F6D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414F75                 mov     [esp+9Ch+var_90], 0
.text:00414F7D                 call    sub_416B70
.text:00414F82                 mov     [esp+9Ch+Str], eax
.text:00414F85                 mov     ebx, eax
.text:00414F87                 mov     esi, edx
.text:00414F89                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414F91                 mov     [esp+9Ch+var_90], 0
.text:00414F99                 mov     [esp+9Ch+OpenFlag], edx
.text:00414F9D                 call    sub_416C90
.text:00414FA2                 movzx   edx, ds:byte_414D90[eax]
.text:00414FA9                 mov     [ebp+1], dl
.text:00414FAC                 mov     [esp+9Ch+Str], ebx
.text:00414FAF                 mov     [esp+9Ch+OpenFlag], esi
.text:00414FB3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414FBB                 mov     [esp+9Ch+var_90], 0
.text:00414FC3                 call    sub_416B70
.text:00414FC8                 mov     [esp+9Ch+Str], eax
.text:00414FCB                 mov     ebx, eax
.text:00414FCD                 mov     esi, edx
.text:00414FCF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00414FD7                 mov     [esp+9Ch+var_90], 0
.text:00414FDF                 mov     [esp+9Ch+OpenFlag], edx
.text:00414FE3                 call    sub_416C90
.text:00414FE8                 movzx   ecx, ds:byte_414D90[eax]
.text:00414FEF                 mov     [ebp+2], cl
.text:00414FF2                 mov     [esp+9Ch+Str], ebx
.text:00414FF5                 mov     [esp+9Ch+OpenFlag], esi
.text:00414FF9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415001                 mov     [esp+9Ch+var_90], 0
.text:00415009                 call    sub_416B70
.text:0041500E                 mov     [esp+9Ch+Str], eax
.text:00415011                 mov     ebx, eax
.text:00415013                 mov     esi, edx
.text:00415015                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041501D                 mov     [esp+9Ch+var_90], 0
.text:00415025                 mov     [esp+9Ch+OpenFlag], edx
.text:00415029                 call    sub_416C90
.text:0041502E                 movzx   edx, ds:byte_414D90[eax]
.text:00415035                 mov     [ebp+3], dl
.text:00415038                 mov     [esp+9Ch+Str], ebx
.text:0041503B                 mov     [esp+9Ch+OpenFlag], esi
.text:0041503F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415047                 mov     [esp+9Ch+var_90], 0
.text:0041504F                 call    sub_416B70
.text:00415054                 mov     [esp+9Ch+Str], eax
.text:00415057                 mov     ebx, eax
.text:00415059                 mov     esi, edx
.text:0041505B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415063                 mov     [esp+9Ch+var_90], 0
.text:0041506B                 mov     [esp+9Ch+OpenFlag], edx
.text:0041506F                 call    sub_416C90
.text:00415074                 movzx   ecx, ds:byte_414D90[eax]
.text:0041507B                 mov     [ebp+4], cl
.text:0041507E                 mov     [esp+9Ch+Str], ebx
.text:00415081                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00415089                 mov     [esp+9Ch+var_90], 0
.text:00415091                 mov     [esp+9Ch+OpenFlag], esi
.text:00415095                 call    sub_416B70
.text:0041509A                 mov     [esp+9Ch+Str], eax
.text:0041509D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004150A5                 mov     [esp+9Ch+var_90], 0
.text:004150AD                 mov     [esp+9Ch+OpenFlag], edx
.text:004150B1                 call    sub_416C90
.text:004150B6                 movzx   ebx, ds:byte_414D90[eax]
.text:004150BD                 mov     [ebp+5], bl
.text:004150C0                 cmp     [esp+9Ch+arg_4], 1
.text:004150C8                 jz      loc_415217
.text:004150CE                 cmp     [esp+9Ch+arg_4], 1
.text:004150D6                 jle     loc_4151E0
.text:004150DC                 cmp     [esp+9Ch+arg_4], 2
.text:004150E4                 jz      loc_4151B7
.text:004150EA                 cmp     [esp+9Ch+arg_4], 3
.text:004150F2                 jz      loc_415174
.text:004150F8
.text:004150F8 loc_4150F8:                             ; CODE XREF: sub_414E80+369↓j
.text:004150F8                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:004150FD                 test    ebx, ebx
.text:004150FF                 jnz     loc_41527D
.text:00415105
.text:00415105 loc_415105:                             ; CODE XREF: sub_414E80+354↓j
.text:00415105                 mov     eax, [esp+9Ch+var_88]
.text:00415109                 test    eax, eax
.text:0041510B                 jns     short loc_415160
.text:0041510D                 call    _errno
.text:00415112                 cmp     dword ptr [eax], 11h
.text:00415115                 jnz     loc_414ED8
.text:0041511B
.text:0041511B loc_41511B:                             ; CODE XREF: sub_414E80+315↓j
.text:0041511B                 mov     edx, ds:dword_419680
.text:00415121                 mov     ecx, ds:dword_419684
.text:00415127                 add     edx, 1E61h
.text:0041512D                 adc     ecx, 0
.text:00415130                 mov     ebx, edx
.text:00415132                 inc     edi
.text:00415133                 mov     ds:dword_419680, edx
.text:00415139                 cmp     edi, 3A2F8h
.text:0041513F                 mov     esi, ecx
.text:00415141                 mov     ds:dword_419684, ecx
.text:00415147                 jb      loc_414F40
.text:0041514D                 call    _errno
.text:00415152                 mov     dword ptr [eax], 11h
.text:00415158                 jmp     loc_414ED8
.text:00415158 ; ---------------------------------------------------------------------------
.text:0041515D                 align 10h
.text:00415160
.text:00415160 loc_415160:                             ; CODE XREF: sub_414E80+28B↑j
.text:00415160                 call    _errno
.text:00415165                 mov     esi, [esp+9Ch+var_8C]
.text:00415169                 mov     [eax], esi
.text:0041516B                 mov     eax, [esp+9Ch+var_88]
.text:0041516F                 jmp     loc_414EDD
.text:00415174 ; ---------------------------------------------------------------------------
.text:00415174
.text:00415174 loc_415174:                             ; CODE XREF: sub_414E80+272↑j
.text:00415174                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0041517B                 mov     ecx, [esp+9Ch+FileName]
.text:00415182                 lea     esi, [esp+9Ch+var_7C]
.text:00415186                 mov     [esp+9Ch+var_94], esi ; int
.text:0041518A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0041518E                 call    sub_40E610
.text:00415193                 test    eax, eax
.text:00415195                 jns     short loc_41511B
.text:00415197                 call    _errno
.text:0041519C                 cmp     dword ptr [eax], 2
.text:0041519F                 jnz     loc_414ED8
.text:004151A5                 call    _errno
.text:004151AA                 mov     ebx, [esp+9Ch+var_8C]
.text:004151AE                 mov     [eax], ebx
.text:004151B0                 xor     eax, eax
.text:004151B2                 jmp     loc_414EDD
.text:004151B7 ; ---------------------------------------------------------------------------
.text:004151B7
.text:004151B7 loc_4151B7:                             ; CODE XREF: sub_414E80+264↑j
.text:004151B7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:004151BF                 mov     edx, [esp+9Ch+FileName]
.text:004151C6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:004151C9                 call    sub_4152B0
.text:004151CE                 mov     esi, esi
.text:004151D0
.text:004151D0 loc_4151D0:                             ; CODE XREF: sub_414E80+395↓j
.text:004151D0                 mov     [esp+9Ch+var_88], eax
.text:004151D4                 jmp     loc_415105
.text:004151D4 ; ---------------------------------------------------------------------------
.text:004151D9                 align 10h
.text:004151E0
.text:004151E0 loc_4151E0:                             ; CODE XREF: sub_414E80+256↑j
.text:004151E0                 mov     eax, [esp+9Ch+arg_4]
.text:004151E7                 test    eax, eax
.text:004151E9                 jnz     loc_4150F8
.text:004151EF                 mov     [esp+9Ch+var_94], 180h
.text:004151F7                 mov     esi, [esp+9Ch+FileName]
.text:004151FE                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00415206                 mov     [esp+9Ch+Str], esi ; FileName
.text:00415209                 lea     esi, [esi+0]
.text:00415210
.text:00415210 loc_415210:                             ; CODE XREF: sub_414E80+3B1↓j
.text:00415210                 call    _open
.text:00415215                 jmp     short loc_4151D0
.text:00415217 ; ---------------------------------------------------------------------------
.text:00415217
.text:00415217 loc_415217:                             ; CODE XREF: sub_414E80+248↑j
.text:00415217                 mov     [esp+9Ch+var_94], 180h
.text:0041521F                 mov     ebx, [esp+9Ch+FileName]
.text:00415226                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0041522E                 mov     [esp+9Ch+Str], ebx
.text:00415231                 jmp     short loc_415210
.text:00415233 ; ---------------------------------------------------------------------------
.text:00415233
.text:00415233 loc_415233:                             ; CODE XREF: sub_414E80+78↑j
.text:00415233                 mov     [esp+9Ch+OpenFlag], 0
.text:0041523B                 lea     ebx, [esp+9Ch+var_84]
.text:0041523F                 mov     [esp+9Ch+Str], ebx
.text:00415242                 call    sub_415330
.text:00415247                 mov     edi, [esp+9Ch+var_80]
.text:0041524B                 mov     edx, [esp+9Ch+var_84]
.text:0041524F                 mov     ecx, edi
.text:00415251                 mov     ebx, edi
.text:00415253                 shl     ecx, 10h
.text:00415256                 sar     ebx, 1Fh
.text:00415259                 shld    ebx, edi, 10h
.text:0041525D                 mov     esi, edx
.text:0041525F                 mov     edi, edx
.text:00415261                 mov     edx, ecx
.text:00415263                 sar     edi, 1Fh
.text:00415266                 xor     edx, esi
.text:00415268                 mov     ds:dword_419680, edx
.text:0041526E                 mov     esi, ebx
.text:00415270                 xor     esi, edi
.text:00415272                 mov     ds:dword_419684, esi
.text:00415278                 jmp     loc_414EFE
.text:0041527D ; ---------------------------------------------------------------------------
.text:0041527D
.text:0041527D loc_41527D:                             ; CODE XREF: sub_414E80+27F↑j
.text:0041527D                 mov     [esp+9Ch+var_94], 151h
.text:00415285                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0041528D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:00415294                 call    _assert
.text:00415294 sub_414E80      endp
.text:00415294
.text:00415294 ; ---------------------------------------------------------------------------
.text:00415299                 db 17h dup(90h)
.text:004152B0
.text:004152B0 ; =============== S U B R O U T I N E =======================================
.text:004152B0
.text:004152B0
.text:004152B0 ; int __cdecl sub_4152B0(LPCSTR, int AccessMode)
.text:004152B0 sub_4152B0      proc near               ; CODE XREF: sub_414E80+349↑p
.text:004152B0
.text:004152B0 lpPathName      = dword ptr -1Ch
.text:004152B0 lpSecurityAttributes= dword ptr -18h
.text:004152B0 var_8           = dword ptr -8
.text:004152B0 var_4           = dword ptr -4
.text:004152B0 arg_0           = dword ptr  4
.text:004152B0 AccessMode      = dword ptr  8
.text:004152B0
.text:004152B0                 sub     esp, 1Ch
.text:004152B3                 mov     [esp+1Ch+var_8], ebx
.text:004152B7                 mov     ebx, [esp+1Ch+arg_0]
.text:004152BB                 mov     [esp+1Ch+var_4], esi
.text:004152BF                 mov     esi, [esp+1Ch+AccessMode]
.text:004152C3                 test    ebx, ebx
.text:004152C5                 jz      short loc_415315
.text:004152C7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:004152CF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:004152D2                 call    CreateDirectoryA
.text:004152D7                 sub     esp, 8
.text:004152DA                 test    eax, eax
.text:004152DC                 jz      short loc_4152F6
.text:004152DE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:004152E2                 mov     esi, [esp+1Ch+var_4]
.text:004152E6                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:004152EA                 mov     ebx, [esp+1Ch+var_8]
.text:004152EE                 add     esp, 1Ch
.text:004152F1                 jmp     _chmod
.text:004152F6 ; ---------------------------------------------------------------------------
.text:004152F6
.text:004152F6 loc_4152F6:                             ; CODE XREF: sub_4152B0+2C↑j
.text:004152F6                 call    sub_40FCA0
.text:004152FB                 mov     esi, eax
.text:004152FD                 call    _errno
.text:00415302                 mov     [eax], esi
.text:00415304
.text:00415304 loc_415304:                             ; CODE XREF: sub_4152B0+70↓j
.text:00415304                 mov     ebx, [esp+1Ch+var_8]
.text:00415308                 mov     eax, 0FFFFFFFFh
.text:0041530D                 mov     esi, [esp+1Ch+var_4]
.text:00415311                 add     esp, 1Ch
.text:00415314                 retn
.text:00415315 ; ---------------------------------------------------------------------------
.text:00415315
.text:00415315 loc_415315:                             ; CODE XREF: sub_4152B0+15↑j
.text:00415315                 call    _errno
.text:0041531A                 mov     dword ptr [eax], 16h
.text:00415320                 jmp     short loc_415304
.text:00415320 sub_4152B0      endp
.text:00415320
.text:00415320 ; ---------------------------------------------------------------------------
.text:00415322                 align 10h
.text:00415330
.text:00415330 ; =============== S U B R O U T I N E =======================================
.text:00415330
.text:00415330
.text:00415330 sub_415330      proc near               ; CODE XREF: sub_414E80+3C2↑p
.text:00415330
.text:00415330 var_1C          = dword ptr -1Ch
.text:00415330 var_18          = dword ptr -18h
.text:00415330 var_C           = dword ptr -0Ch
.text:00415330 var_8           = dword ptr -8
.text:00415330 var_4           = dword ptr -4
.text:00415330 arg_0           = dword ptr  4
.text:00415330 arg_4           = dword ptr  8
.text:00415330
.text:00415330                 sub     esp, 1Ch
.text:00415333                 mov     edx, [esp+1Ch+arg_4]
.text:00415337                 mov     [esp+1Ch+var_4], ebx
.text:0041533B                 mov     ebx, [esp+1Ch+arg_0]
.text:0041533F                 mov     [esp+1Ch+var_18], edx
.text:00415343                 lea     edx, [esp+1Ch+var_C]
.text:00415347                 mov     [esp+1Ch+var_1C], edx
.text:0041534A                 call    sub_4153B0
.text:0041534F                 test    eax, eax
.text:00415351                 mov     edx, 0FFFFFFFFh
.text:00415356                 jnz     short loc_41537A
.text:00415358                 mov     ecx, [esp+1Ch+var_C]
.text:0041535C                 mov     edx, 10624DD3h
.text:00415361                 mov     [ebx], ecx
.text:00415363                 mov     ecx, [esp+1Ch+var_8]
.text:00415367                 mov     eax, ecx
.text:00415369                 imul    edx
.text:0041536B                 mov     eax, ecx
.text:0041536D                 sar     eax, 1Fh
.text:00415370                 sar     edx, 6
.text:00415373                 sub     edx, eax
.text:00415375                 mov     [ebx+4], edx
.text:00415378                 xor     edx, edx
.text:0041537A
.text:0041537A loc_41537A:                             ; CODE XREF: sub_415330+26↑j
.text:0041537A                 mov     ebx, [esp+1Ch+var_4]
.text:0041537E                 mov     eax, edx
.text:00415380                 add     esp, 1Ch
.text:00415383                 retn
.text:00415383 sub_415330      endp
.text:00415383
.text:00415383 ; ---------------------------------------------------------------------------
.text:00415384                 align 10h
.text:00415390
.text:00415390 ; =============== S U B R O U T I N E =======================================
.text:00415390
.text:00415390
.text:00415390 sub_415390      proc near               ; CODE XREF: sub_414B00+1A7↑p
.text:00415390                                         ; sub_414B00+237↑p ...
.text:00415390                 mov     edx, ds:dword_419690
.text:00415396                 test    edx, edx
.text:00415398                 jnz     short loc_4153A0
.text:0041539A                 jmp     getenv
.text:0041539A ; ---------------------------------------------------------------------------
.text:0041539F                 align 10h
.text:004153A0
.text:004153A0 loc_4153A0:                             ; CODE XREF: sub_415390+8↑j
.text:004153A0                 xor     eax, eax
.text:004153A2                 retn
.text:004153A2 sub_415390      endp
.text:004153A2
.text:004153A2 ; ---------------------------------------------------------------------------
.text:004153A3                 align 10h
.text:004153B0
.text:004153B0 ; =============== S U B R O U T I N E =======================================
.text:004153B0
.text:004153B0
.text:004153B0 sub_4153B0      proc near               ; CODE XREF: sub_415330+1A↑p
.text:004153B0
.text:004153B0 lpTimeZoneInformation= dword ptr -0DCh
.text:004153B0 var_D8          = dword ptr -0D8h
.text:004153B0 var_D4          = dword ptr -0D4h
.text:004153B0 var_D0          = dword ptr -0D0h
.text:004153B0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:004153B0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:004153B0 arg_0           = dword ptr  4
.text:004153B0 arg_4           = dword ptr  8
.text:004153B0
.text:004153B0                 push    edi
.text:004153B1                 push    esi
.text:004153B2                 push    ebx
.text:004153B3                 sub     esp, 0D0h
.text:004153B9                 mov     ebx, [esp+0DCh+arg_4]
.text:004153C0                 mov     edi, [esp+0DCh+arg_0]
.text:004153C7                 test    ebx, ebx
.text:004153C9                 jz      short loc_4153F4
.text:004153CB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:004153CF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:004153D2                 call    GetTimeZoneInformation
.text:004153D7                 sub     esp, 4
.text:004153DA                 cmp     eax, 0FFFFFFFFh
.text:004153DD                 jz      loc_415475
.text:004153E3                 xor     ecx, ecx
.text:004153E5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:004153E9                 cmp     eax, 2
.text:004153EC                 setz    cl
.text:004153EF                 mov     [ebx], esi
.text:004153F1                 mov     [ebx+4], ecx
.text:004153F4
.text:004153F4 loc_4153F4:                             ; CODE XREF: sub_4153B0+19↑j
.text:004153F4                                         ; sub_4153B0+E0↓j
.text:004153F4                 test    edi, edi
.text:004153F6                 jz      short loc_415469
.text:004153F8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:004153FC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:004153FF                 call    GetSystemTimeAsFileTime
.text:00415404                 sub     esp, 4
.text:00415407                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0041540B                 mov     [esp+0DCh+var_D4], 989680h
.text:00415413                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:00415417                 mov     [esp+0DCh+var_D0], 0
.text:0041541F                 add     ebx, 2AC18000h
.text:00415425                 adc     esi, 0FE624E21h
.text:0041542B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0041542F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00415432                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:00415436                 mov     [esp+0DCh+var_D8], esi
.text:0041543A                 call    sub_416B70
.text:0041543F                 mov     [edi], eax
.text:00415441                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00415444                 mov     [esp+0DCh+var_D4], 989680h
.text:0041544C                 mov     [esp+0DCh+var_D0], 0
.text:00415454                 mov     [esp+0DCh+var_D8], esi
.text:00415458                 call    sub_416C90
.text:0041545D                 lea     ebx, [eax+eax*4]
.text:00415460                 lea     edx, [ebx+ebx*4]
.text:00415463                 shl     edx, 2
.text:00415466                 mov     [edi+4], edx
.text:00415469
.text:00415469 loc_415469:                             ; CODE XREF: sub_4153B0+46↑j
.text:00415469                 add     esp, 0D0h
.text:0041546F                 xor     eax, eax
.text:00415471                 pop     ebx
.text:00415472                 pop     esi
.text:00415473                 pop     edi
.text:00415474                 retn
.text:00415475 ; ---------------------------------------------------------------------------
.text:00415475
.text:00415475 loc_415475:                             ; CODE XREF: sub_4153B0+2D↑j
.text:00415475                 mov     dword ptr [ebx], 0
.text:0041547B                 mov     dword ptr [ebx+4], 0
.text:00415482                 call    sub_40FCA0
.text:00415487                 mov     esi, eax
.text:00415489                 call    _errno
.text:0041548E                 mov     [eax], esi
.text:00415490                 jmp     loc_4153F4
.text:00415490 sub_4153B0      endp
.text:00415490
.text:00415490 ; ---------------------------------------------------------------------------
.text:00415495                 align 10h
.text:004154A0                 sub     esp, 0Ch
.text:004154A3                 mov     [esp+4], ebx
.text:004154A7                 mov     [esp+8], esi
.text:004154AB                 xor     esi, esi
.text:004154AD                 call    sub_415520
.text:004154B2                 mov     ebx, eax
.text:004154B4                 call    sub_415510
.text:004154B9                 cmp     ebx, eax
.text:004154BB                 jz      short loc_4154D4
.text:004154BD
.text:004154BD loc_4154BD:                             ; CODE XREF: .text:004154E2↓j
.text:004154BD                 mov     esi, 1
.text:004154C2
.text:004154C2 loc_4154C2:                             ; CODE XREF: .text:004154E4↓j
.text:004154C2                 mov     ds:dword_419690, esi
.text:004154C8                 mov     ebx, [esp+4]
.text:004154CC                 mov     esi, [esp+8]
.text:004154D0                 add     esp, 0Ch
.text:004154D3                 retn
.text:004154D4 ; ---------------------------------------------------------------------------
.text:004154D4
.text:004154D4 loc_4154D4:                             ; CODE XREF: .text:004154BB↑j
.text:004154D4                 call    sub_415500
.text:004154D9                 mov     ebx, eax
.text:004154DB                 call    sub_4154F0
.text:004154E0                 cmp     ebx, eax
.text:004154E2                 jnz     short loc_4154BD
.text:004154E4                 jmp     short loc_4154C2
.text:004154E4 ; ---------------------------------------------------------------------------
.text:004154E6                 align 10h
.text:004154F0
.text:004154F0 ; =============== S U B R O U T I N E =======================================
.text:004154F0
.text:004154F0
.text:004154F0 sub_4154F0      proc near               ; CODE XREF: .text:004154DB↑p
.text:004154F0                 xor     eax, eax
.text:004154F2                 retn
.text:004154F2 sub_4154F0      endp
.text:004154F2
.text:004154F2 ; ---------------------------------------------------------------------------
.text:004154F3                 align 10h
.text:00415500
.text:00415500 ; =============== S U B R O U T I N E =======================================
.text:00415500
.text:00415500
.text:00415500 sub_415500      proc near               ; CODE XREF: .text:loc_4154D4↑p
.text:00415500                 xor     eax, eax
.text:00415502                 retn
.text:00415502 sub_415500      endp
.text:00415502
.text:00415502 ; ---------------------------------------------------------------------------
.text:00415503                 align 10h
.text:00415510
.text:00415510 ; =============== S U B R O U T I N E =======================================
.text:00415510
.text:00415510
.text:00415510 sub_415510      proc near               ; CODE XREF: .text:004154B4↑p
.text:00415510                 xor     eax, eax
.text:00415512                 retn
.text:00415512 sub_415510      endp
.text:00415512
.text:00415512 ; ---------------------------------------------------------------------------
.text:00415513                 align 10h
.text:00415520
.text:00415520 ; =============== S U B R O U T I N E =======================================
.text:00415520
.text:00415520
.text:00415520 sub_415520      proc near               ; CODE XREF: .text:004154AD↑p
.text:00415520                 xor     eax, eax
.text:00415522                 retn
.text:00415522 sub_415520      endp
.text:00415522
.text:00415522 ; ---------------------------------------------------------------------------
.text:00415523                 align 10h
.text:00415530
.text:00415530 ; =============== S U B R O U T I N E =======================================
.text:00415530
.text:00415530 ; Attributes: thunk
.text:00415530
.text:00415530 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00415530 OleInitialize   proc near               ; CODE XREF: sub_40F0F0+41↑p
.text:00415530                                         ; sub_4126C0+1A↑p
.text:00415530
.text:00415530 pvReserved      = dword ptr  4
.text:00415530
.text:00415530                 jmp     ds:__imp_OleInitialize
.text:00415530 OleInitialize   endp
.text:00415530
.text:00415530 ; ---------------------------------------------------------------------------
.text:00415536                 align 10h
.text:00415540
.text:00415540 ; =============== S U B R O U T I N E =======================================
.text:00415540
.text:00415540 ; Attributes: thunk
.text:00415540
.text:00415540 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00415540 CoCreateInstance proc near              ; CODE XREF: sub_40F0F0+79↑p
.text:00415540                                         ; sub_4126C0+52↑p
.text:00415540
.text:00415540 rclsid          = dword ptr  4
.text:00415540 pUnkOuter       = dword ptr  8
.text:00415540 dwClsContext    = dword ptr  0Ch
.text:00415540 riid            = dword ptr  10h
.text:00415540 ppv             = dword ptr  14h
.text:00415540
.text:00415540                 jmp     ds:__imp_CoCreateInstance
.text:00415540 CoCreateInstance endp
.text:00415540
.text:00415540 ; ---------------------------------------------------------------------------
.text:00415546                 align 10h
.text:00415550
.text:00415550 ; =============== S U B R O U T I N E =======================================
.text:00415550
.text:00415550 ; Attributes: thunk
.text:00415550
.text:00415550 ; void __stdcall CoUninitialize()
.text:00415550 CoUninitialize  proc near               ; CODE XREF: sub_40F0F0+15E↑p
.text:00415550                                         ; sub_40F0F0+19A↑p ...
.text:00415550                 jmp     ds:__imp_CoUninitialize
.text:00415550 CoUninitialize  endp
.text:00415550
.text:00415550 ; ---------------------------------------------------------------------------
.text:00415556                 align 10h
.text:00415560                 add     al, 0BAh ; 'º'
.text:00415562                 retf
.text:00415562 ; ---------------------------------------------------------------------------
.text:00415563                 db 7Eh
.text:00415564                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:00415564                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:00415564                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:00415564                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:00415564                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:00415564                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:00415564                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:00415564                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:00415564                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:00415564                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:00415564                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:00415564                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:00415564                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:00415564                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:00415564                 dd 0C4426C00h, 330h, 0
.text:00415698                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00415698                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:00415698                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:00415698                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:004156E8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004156E8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:004156E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:004156E8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:004156E8                 dd 0BA94B00h, 1Bh, 0
.text:00415748                 dd 0C0h, 46000000h, 1Ch, 0
.text:00415758                 dd 0C0h, 46000000h, 331h, 0
.text:00415768                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00415768                 dd 312h, 0
.text:00415788                 dd 0C0h, 46000000h, 30Eh, 0
.text:00415798                 dd 0C0h, 46000000h, 30Dh, 0
.text:004157A8                 dd 0C0h, 46000000h, 311h, 0
.text:004157B8                 dd 0C0h, 46000000h, 313h, 0
.text:004157C8                 dd 0C0h, 46000000h, 30Ch, 0
.text:004157D8                 dd 0C0h, 46000000h, 30Fh, 0
.text:004157E8                 dd 0C0h, 46000000h, 310h, 0
.text:004157F8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004157F8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00415828                 dd 0C0h, 46000000h, 319h, 0
.text:00415838                 dd 0C0h, 46000000h, 315h, 0
.text:00415848                 dd 0C0h, 46000000h, 316h, 0
.text:00415858                 dd 0C0h, 46000000h, 315h, 0
.text:00415868                 dd 0C0h, 46000000h, 2E005h, 0
.text:00415878                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00415878                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00415878                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:004158B8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004158B8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:004158B8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:004158B8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:004158B8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:004158B8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:004158B8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:004158B8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:004158B8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:004158B8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:004158B8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:004158B8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:004158B8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:004158B8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:004158B8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:004158B8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:004158B8                 dd 2DE81h, 0
.text:00415A08                 dd 0C0h, 46000000h, 4 dup(0)
.text:00415A20                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00415A20                 dd 0
.text:00415A38                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00415A38                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00415A38                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00415A38                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00415A38                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00415A38                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00415A38                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00415A38                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00415A38                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00415A38                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00415A38                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00415A38                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00415A38                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00415A38                 dd 10Fh, 0
.text:00415B48                 dd 0C0h, 46000000h, 125h, 0
.text:00415B58                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00415B58                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00415B58                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00415B98                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00415B98                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00415B98                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00415B98                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00415B98                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:00415BF8                 dd 0C0h, 46000000h, 2E012h, 0
.text:00415C08                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00415C08                 dd 140h, 0
.text:00415C28                 dd 0C0h, 46000000h, 1, 0
.text:00415C38                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00415C38                 dd 71D3400h, 13Dh, 0
.text:00415C58                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00415C58                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00415C58                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00415C58                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00415CA8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00415CA8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00415CA8                 dd 20405h, 0
.text:00415CD8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:00415CE8                 dd 0C0h, 46000000h, 20406h, 0
.text:00415CF8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00415D08                 dd 0C0h, 46000000h, 110h, 0
.text:00415D18                 dd 0C0h, 46000000h, 10Eh, 0
.text:00415D28                 dd 0C0h, 46000000h, 123h, 0
.text:00415D38                 dd 0C0h, 46000000h, 124h, 0
.text:00415D48                 dd 0C0h, 46000000h, 13h, 0
.text:00415D58                 dd 0C0h, 46000000h, 14h, 0
.text:00415D68                 dd 0C0h, 46000000h, 15h, 0
.text:00415D78                 dd 0C0h, 46000000h, 20400h, 0
.text:00415D88                 dd 0C0h, 46000000h, 121h, 0
.text:00415D98                 dd 0C0h, 46000000h, 122h, 0
.text:00415DA8                 dd 0C0h, 46000000h, 2E011h, 0
.text:00415DB8                 dd 0C0h, 46000000h, 108h, 0
.text:00415DC8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:00415DC8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00415DC8                 dd 103h, 0
.text:00415DF8                 dd 0C0h, 46000000h, 2E000h, 0
.text:00415E08                 dd 0C0h, 46000000h, 106h, 0
.text:00415E18                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00415E18                 dd 107h, 0
.text:00415E38                 dd 0C0h, 46000000h, 102h, 0
.text:00415E48                 dd 0C0h, 46000000h, 104h, 0
.text:00415E58                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00415E58                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00415E58                 dd 105h, 0
.text:00415E88                 dd 0C0h, 46000000h, 13Bh, 0
.text:00415E98                 dd 0C0h, 46000000h, 139h, 0
.text:00415EA8                 dd 0C0h, 46000000h, 0Dh, 0
.text:00415EB8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00415EB8                 dd 101h, 0
.text:00415ED8                 dd 0C0h, 46000000h, 100h, 0
.text:00415EE8                 dd 0C0h, 46000000h, 20404h, 0
.text:00415EF8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00415EF8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00415F28                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00415F28                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00415F28                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00415F28                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00415F78                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00415F78                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00415F78                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00415F78                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00415F78                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00415F78                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:00415FF8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:00415FF8                 dd 0Ah, 0
.text:00416018                 dd 0C0h, 46000000h, 2, 0
.text:00416028                 dd 0C0h, 46000000h, 1Dh, 0
.text:00416038                 dd 0C0h, 46000000h, 3, 0
.text:00416048                 dd 0C0h, 46000000h, 16h, 0
.text:00416058                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00416058                 dd 1608D74Fh, 0Fh, 0
.text:00416078                 dd 0C0h, 46000000h, 20h, 0
.text:00416088                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00416088                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00416088                 dd 0
.text:004160B8                 dd 0C0h, 46000000h, 11Eh, 0
.text:004160C8                 dd 0C0h, 46000000h, 128h, 0
.text:004160D8                 dd 0C0h, 46000000h, 129h, 0
.text:004160E8                 dd 0C0h, 46000000h, 118h, 0
.text:004160F8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:004160F8                 dd 70474000h, 11Bh, 0
.text:00416118                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00416118                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00416118                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00416118                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00416118                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00416178                 dd 0C0h, 46000000h, 116h, 0
.text:00416188                 dd 0C0h, 46000000h, 113h, 0
.text:00416198                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00416198                 dd 119h, 0
.text:004161B8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:004161B8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:004161B8                 dd 0
.text:004161E8                 dd 0C0h, 46000000h, 11Ch, 0
.text:004161F8                 dd 0C0h, 46000000h, 11Dh, 0
.text:00416208                 dd 0C0h, 46000000h, 11Fh, 0
.text:00416218                 dd 0C0h, 46000000h, 112h, 0
.text:00416228                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00416228                 dd 18E6000h, 120h, 0
.text:00416248                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00416248                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00416248                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00416288                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00416288                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:004162B8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004162B8                 dd 11Ah, 0
.text:004162D8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:004162D8                 dd 10Ch, 0
.text:004162F8                 dd 0C0h, 46000000h
.text:00416300 dword_416300    dd 10Bh, 0              ; DATA XREF: sub_40F0F0+CB↑o
.text:00416300                                         ; sub_4126C0+75↑o
.text:00416308                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00416308                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00416308                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00416308                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00416358                 dd 0C0h, 46000000h, 109h, 0
.text:00416368                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00416368                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00416368                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00416368                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00416368                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00416368                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00416368                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00416368                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00416368                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00416368                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00416368                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00416448                 dd 0C0h, 46000000h, 138h, 0
.text:00416458                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00416458                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00416458                 dd 27h, 0
.text:00416488                 dd 0C0h, 46000000h, 8, 0
.text:00416498                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00416498                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00416498                 dd 20D00h, 0
.text:004164C8                 dd 0C0h, 46000000h, 20D03h, 0
.text:004164D8                 dd 0C0h, 46000000h, 12h, 0
.text:004164E8                 dd 0C0h, 46000000h, 4, 0
.text:004164F8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004164F8                 dd 7, 0
.text:00416518                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00416518                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00416548                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00416548                 dd 126h, 0
.text:00416568                 dd 0C0h, 46000000h, 10h, 0
.text:00416578                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00416578                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:004165A8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:004165A8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:004165A8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:004165E8                 dd 0C0h, 46000000h, 0Bh, 0
.text:004165F8                 dd 0C0h, 46000000h, 0Ch, 0
.text:00416608                 dd 0C0h, 46000000h, 26h, 0
.text:00416618                 dd 0C0h, 46000000h, 6, 0
.text:00416628                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00416628                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00416628                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:00416668                 dd 0C0h, 46000000h, 20403h, 0
.text:00416678                 dd 0C0h, 46000000h, 20401h, 0
.text:00416688                 dd 0C0h, 46000000h, 20412h, 0
.text:00416698                 dd 0C0h, 46000000h, 20402h, 0
.text:004166A8                 dd 0C0h, 46000000h, 20411h, 0
.text:004166B8                 dd 0C0h, 46000000h, 2 dup(0)
.text:004166C8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004166C8                 dd 10Dh, 0
.text:004166E8                 dd 0C0h, 46000000h, 127h, 0
.text:004166F8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:004166F8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:004166F8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00416738                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00416738                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00416738                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00416778                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00416788                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00416798                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:004167A8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:004167B8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:004167C8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:004167D8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:004167E8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:004167F8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00416808                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00416818                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00416828                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00416838                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00416848                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00416858                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00416868                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00416878                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00416888                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00416898                 dd 0C0h, 46000000h, 2DE10h, 0
.text:004168A8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:004168B8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:004168C8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:004168D8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:004168E8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:004168F8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00416908                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00416918                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00416928                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00416938                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00416948                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00416958                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00416968                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00416978                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00416988                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00416998                 dd 0C0h, 46000000h, 2DE08h, 0
.text:004169A8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:004169A8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:004169D0
.text:004169D0 ; =============== S U B R O U T I N E =======================================
.text:004169D0
.text:004169D0 ; Attributes: thunk
.text:004169D0
.text:004169D0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004169D0 mbrtowc         proc near               ; CODE XREF: sub_405F70+757↑p
.text:004169D0
.text:004169D0 DstCh           = dword ptr  4
.text:004169D0 SrcCh           = dword ptr  8
.text:004169D0 SizeInBytes     = dword ptr  0Ch
.text:004169D0 State           = dword ptr  10h
.text:004169D0
.text:004169D0                 jmp     ds:__imp_mbrtowc
.text:004169D0 mbrtowc         endp
.text:004169D0
.text:004169D0 ; ---------------------------------------------------------------------------
.text:004169D6                 align 10h
.text:004169E0
.text:004169E0 ; =============== S U B R O U T I N E =======================================
.text:004169E0
.text:004169E0 ; Attributes: thunk
.text:004169E0
.text:004169E0 ; wint_t __cdecl btowc(int Ch)
.text:004169E0 btowc           proc near               ; CODE XREF: sub_40A600+1F73↑p
.text:004169E0                 jmp     ds:__imp_btowc
.text:004169E0 btowc           endp
.text:004169E0
.text:004169E0 ; ---------------------------------------------------------------------------
.text:004169E6                 align 10h
.text:004169F0
.text:004169F0 ; =============== S U B R O U T I N E =======================================
.text:004169F0
.text:004169F0 ; Attributes: thunk
.text:004169F0
.text:004169F0 ; wctype_t __cdecl wctype(const char *name)
.text:004169F0 wctype          proc near               ; CODE XREF: sub_40A600+1F29↑p
.text:004169F0
.text:004169F0 name            = dword ptr  4
.text:004169F0
.text:004169F0                 jmp     ds:__imp_wctype
.text:004169F0 wctype          endp
.text:004169F0
.text:004169F0 ; ---------------------------------------------------------------------------
.text:004169F6                 align 10h
.text:00416A00
.text:00416A00 ; =============== S U B R O U T I N E =======================================
.text:00416A00
.text:00416A00 ; Attributes: bp-based frame
.text:00416A00
.text:00416A00 sub_416A00      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00416A00                 push    ebp
.text:00416A01                 mov     ecx, offset dword_419000
.text:00416A06                 cmp     ecx, offset dword_419000
.text:00416A0C                 mov     ebp, esp
.text:00416A0E                 jnb     short loc_416A26
.text:00416A10
.text:00416A10 loc_416A10:                             ; CODE XREF: sub_416A00+24↓j
.text:00416A10                 mov     edx, [ecx+4]
.text:00416A13                 mov     eax, [ecx]
.text:00416A15                 add     ecx, 8
.text:00416A18                 add     [edx+400000h], eax
.text:00416A1E                 cmp     ecx, offset dword_419000
.text:00416A24                 jb      short loc_416A10
.text:00416A26
.text:00416A26 loc_416A26:                             ; CODE XREF: sub_416A00+E↑j
.text:00416A26                 pop     ebp
.text:00416A27                 retn
.text:00416A27 sub_416A00      endp
.text:00416A27
.text:00416A27 ; ---------------------------------------------------------------------------
.text:00416A28                 align 10h
.text:00416A30
.text:00416A30 ; =============== S U B R O U T I N E =======================================
.text:00416A30
.text:00416A30 ; Attributes: bp-based frame
.text:00416A30
.text:00416A30 sub_416A30      proc near               ; CODE XREF: sub_401080+16↑p
.text:00416A30                                         ; TopLevelExceptionFilter+D7↑p
.text:00416A30                 push    ebp
.text:00416A31                 mov     ebp, esp
.text:00416A33                 fninit
.text:00416A35                 pop     ebp
.text:00416A36                 retn
.text:00416A36 sub_416A30      endp
.text:00416A36
.text:00416A36 ; ---------------------------------------------------------------------------
.text:00416A37                 align 10h
.text:00416A40
.text:00416A40 ; =============== S U B R O U T I N E =======================================
.text:00416A40
.text:00416A40 ; Attributes: bp-based frame
.text:00416A40
.text:00416A40 ; void __cdecl sub_416A40()
.text:00416A40 sub_416A40      proc near               ; DATA XREF: .text:loc_416A89↓o
.text:00416A40                                         ; sub_416AD0:loc_416AFE↓o
.text:00416A40                 push    ebp
.text:00416A41                 mov     ebp, esp
.text:00416A43                 sub     esp, 8
.text:00416A46                 mov     eax, off_418104
.text:00416A4B                 mov     edx, [eax]
.text:00416A4D                 test    edx, edx
.text:00416A4F                 jnz     short loc_416A55
.text:00416A51
.text:00416A51 loc_416A51:                             ; CODE XREF: sub_416A40+2C↓j
.text:00416A51                 mov     esp, ebp
.text:00416A53                 pop     ebp
.text:00416A54                 retn
.text:00416A55 ; ---------------------------------------------------------------------------
.text:00416A55
.text:00416A55 loc_416A55:                             ; CODE XREF: sub_416A40+F↑j
.text:00416A55                                         ; sub_416A40+2A↓j
.text:00416A55                 call    dword ptr [eax]
.text:00416A57                 mov     edx, off_418104
.text:00416A5D                 mov     ecx, [edx+4]
.text:00416A60                 lea     eax, [edx+4]
.text:00416A63                 mov     off_418104, eax
.text:00416A68                 test    ecx, ecx
.text:00416A6A                 jnz     short loc_416A55
.text:00416A6C                 jmp     short loc_416A51
.text:00416A6C sub_416A40      endp
.text:00416A6C
.text:00416A6C ; ---------------------------------------------------------------------------
.text:00416A6E                 align 10h
.text:00416A70                 push    ebp
.text:00416A71                 mov     ebp, esp
.text:00416A73                 sub     esp, 8
.text:00416A76                 mov     [ebp-4], ebx
.text:00416A79                 mov     eax, ds:dword_4178A0
.text:00416A7E                 cmp     eax, 0FFFFFFFFh
.text:00416A81                 jz      short loc_416AAC
.text:00416A83
.text:00416A83 loc_416A83:                             ; CODE XREF: .text:00416AB6↓j
.text:00416A83                                         ; .text:00416AC9↓j
.text:00416A83                 test    eax, eax
.text:00416A85                 mov     ebx, eax
.text:00416A87                 jnz     short loc_416AA0
.text:00416A89
.text:00416A89 loc_416A89:                             ; CODE XREF: .text:00416AAA↓j
.text:00416A89                 mov     dword ptr [esp], offset sub_416A40
.text:00416A90                 call    sub_401040
.text:00416A95                 mov     ebx, [ebp-4]
.text:00416A98                 mov     esp, ebp
.text:00416A9A                 pop     ebp
.text:00416A9B                 retn
.text:00416A9B ; ---------------------------------------------------------------------------
.text:00416A9C                 align 10h
.text:00416AA0
.text:00416AA0 loc_416AA0:                             ; CODE XREF: .text:00416A87↑j
.text:00416AA0                                         ; .text:00416AA8↓j
.text:00416AA0                 call    ds:dword_4178A0[ebx*4]
.text:00416AA7                 dec     ebx
.text:00416AA8                 jnz     short loc_416AA0
.text:00416AAA                 jmp     short loc_416A89
.text:00416AAC ; ---------------------------------------------------------------------------
.text:00416AAC
.text:00416AAC loc_416AAC:                             ; CODE XREF: .text:00416A81↑j
.text:00416AAC                 mov     ecx, ds:dword_4178A4
.text:00416AB2                 xor     eax, eax
.text:00416AB4                 test    ecx, ecx
.text:00416AB6                 jz      short loc_416A83
.text:00416AB8                 mov     edx, offset dword_4178A0
.text:00416ABD                 lea     esi, [esi+0]
.text:00416AC0
.text:00416AC0 loc_416AC0:                             ; CODE XREF: .text:00416AC7↓j
.text:00416AC0                 inc     eax
.text:00416AC1                 mov     ecx, [edx+eax*4+4]
.text:00416AC5                 test    ecx, ecx
.text:00416AC7                 jnz     short loc_416AC0
.text:00416AC9                 jmp     short loc_416A83
.text:00416AC9 ; ---------------------------------------------------------------------------
.text:00416ACB                 align 10h
.text:00416AD0
.text:00416AD0 ; =============== S U B R O U T I N E =======================================
.text:00416AD0
.text:00416AD0 ; Attributes: bp-based frame
.text:00416AD0
.text:00416AD0 sub_416AD0      proc near               ; CODE XREF: sub_401FB0+1C↑p
.text:00416AD0
.text:00416AD0 var_8           = dword ptr -8
.text:00416AD0 var_4           = dword ptr -4
.text:00416AD0
.text:00416AD0                 push    ebp
.text:00416AD1                 mov     ebp, esp
.text:00416AD3                 sub     esp, 8
.text:00416AD6                 mov     [ebp+var_4], ebx
.text:00416AD9                 mov     edx, dword_418100
.text:00416ADF                 test    edx, edx
.text:00416AE1                 jnz     short loc_416B0A
.text:00416AE3                 mov     eax, ds:dword_4178A0
.text:00416AE8                 mov     edx, 1
.text:00416AED                 mov     dword_418100, edx
.text:00416AF3                 cmp     eax, 0FFFFFFFFh
.text:00416AF6                 jz      short loc_416B1D
.text:00416AF8
.text:00416AF8 loc_416AF8:                             ; CODE XREF: sub_416AD0+57↓j
.text:00416AF8                                         ; sub_416AD0+69↓j
.text:00416AF8                 test    eax, eax
.text:00416AFA                 mov     ebx, eax
.text:00416AFC                 jnz     short loc_416B11
.text:00416AFE
.text:00416AFE loc_416AFE:                             ; CODE XREF: sub_416AD0+4B↓j
.text:00416AFE                 mov     [esp+8+var_8], offset sub_416A40 ; void (__cdecl *)()
.text:00416B05                 call    sub_401040
.text:00416B0A
.text:00416B0A loc_416B0A:                             ; CODE XREF: sub_416AD0+11↑j
.text:00416B0A                 mov     ebx, [ebp+var_4]
.text:00416B0D                 mov     esp, ebp
.text:00416B0F                 pop     ebp
.text:00416B10                 retn
.text:00416B11 ; ---------------------------------------------------------------------------
.text:00416B11
.text:00416B11 loc_416B11:                             ; CODE XREF: sub_416AD0+2C↑j
.text:00416B11                                         ; sub_416AD0+49↓j
.text:00416B11                 call    ds:dword_4178A0[ebx*4]
.text:00416B18                 dec     ebx
.text:00416B19                 jnz     short loc_416B11
.text:00416B1B                 jmp     short loc_416AFE
.text:00416B1D ; ---------------------------------------------------------------------------
.text:00416B1D
.text:00416B1D loc_416B1D:                             ; CODE XREF: sub_416AD0+26↑j
.text:00416B1D                 mov     ecx, ds:dword_4178A4
.text:00416B23                 xor     eax, eax
.text:00416B25                 test    ecx, ecx
.text:00416B27                 jz      short loc_416AF8
.text:00416B29                 mov     edx, offset dword_4178A0
.text:00416B2E                 mov     esi, esi
.text:00416B30
.text:00416B30 loc_416B30:                             ; CODE XREF: sub_416AD0+67↓j
.text:00416B30                 inc     eax
.text:00416B31                 mov     ebx, [edx+eax*4+4]
.text:00416B35                 test    ebx, ebx
.text:00416B37                 jnz     short loc_416B30
.text:00416B39                 jmp     short loc_416AF8
.text:00416B39 sub_416AD0      endp
.text:00416B39
.text:00416B39 ; ---------------------------------------------------------------------------
.text:00416B3B                 align 10h
.text:00416B40
.text:00416B40 ; =============== S U B R O U T I N E =======================================
.text:00416B40
.text:00416B40 ; Attributes: info_from_lumina
.text:00416B40
.text:00416B40 ; void *__cdecl _alloca(size_t Size)
.text:00416B40 __alloca        proc near               ; CODE XREF: sub_401FB0+17↑p
.text:00416B40                                         ; sub_402C30+422↑p ...
.text:00416B40                 push    ecx
.text:00416B41                 mov     ecx, esp
.text:00416B43                 add     ecx, 8
.text:00416B46
.text:00416B46 loc_416B46:                             ; CODE XREF: __alloca+1B↓j
.text:00416B46                 cmp     eax, 1000h
.text:00416B4B                 jb      short loc_416B5D
.text:00416B4D                 sub     ecx, 1000h
.text:00416B53                 or      dword ptr [ecx], 0
.text:00416B56                 sub     eax, 1000h
.text:00416B5B                 jmp     short loc_416B46
.text:00416B5D ; ---------------------------------------------------------------------------
.text:00416B5D
.text:00416B5D loc_416B5D:                             ; CODE XREF: __alloca+B↑j
.text:00416B5D                 sub     ecx, eax
.text:00416B5F                 or      dword ptr [ecx], 0
.text:00416B62                 mov     eax, esp
.text:00416B64                 mov     esp, ecx
.text:00416B66                 mov     ecx, [eax]
.text:00416B68                 mov     eax, [eax+4]
.text:00416B6B                 jmp     eax
.text:00416B6B __alloca        endp
.text:00416B6B
.text:00416B6B ; ---------------------------------------------------------------------------
.text:00416B6D                 align 10h
.text:00416B70
.text:00416B70 ; =============== S U B R O U T I N E =======================================
.text:00416B70
.text:00416B70 ; Attributes: bp-based frame
.text:00416B70
.text:00416B70 sub_416B70      proc near               ; CODE XREF: sub_40FFF0+17E↑p
.text:00416B70                                         ; sub_40FFF0+1F5↑p ...
.text:00416B70
.text:00416B70 var_24          = dword ptr -24h
.text:00416B70 var_20          = dword ptr -20h
.text:00416B70 var_1C          = dword ptr -1Ch
.text:00416B70 var_18          = dword ptr -18h
.text:00416B70 var_14          = dword ptr -14h
.text:00416B70 var_C           = dword ptr -0Ch
.text:00416B70 var_8           = dword ptr -8
.text:00416B70 var_4           = dword ptr -4
.text:00416B70 arg_0           = dword ptr  8
.text:00416B70 arg_4           = dword ptr  0Ch
.text:00416B70 arg_8           = dword ptr  10h
.text:00416B70 arg_C           = dword ptr  14h
.text:00416B70
.text:00416B70                 push    ebp
.text:00416B71                 mov     ebp, esp
.text:00416B73                 sub     esp, 28h
.text:00416B76                 mov     [ebp+var_C], ebx
.text:00416B79                 mov     edx, [ebp+arg_C]
.text:00416B7C                 mov     ecx, [ebp+arg_0]
.text:00416B7F                 mov     [ebp+var_8], esi
.text:00416B82                 mov     eax, [ebp+arg_8]
.text:00416B85                 test    edx, edx
.text:00416B87                 mov     [ebp+var_4], edi
.text:00416B8A                 mov     ebx, [ebp+arg_4]
.text:00416B8D                 mov     esi, eax
.text:00416B8F                 mov     [ebp+var_18], 0
.text:00416B96                 mov     [ebp+var_14], 0
.text:00416B9D                 mov     [ebp+var_1C], ecx
.text:00416BA0                 jnz     short loc_416BF2
.text:00416BA2                 cmp     eax, ebx
.text:00416BA4                 jbe     short loc_416BD0
.text:00416BA6                 mov     eax, ecx
.text:00416BA8                 mov     edx, ebx
.text:00416BAA                 div     esi
.text:00416BAC                 mov     edi, eax
.text:00416BAE                 mov     esi, esi
.text:00416BB0
.text:00416BB0 loc_416BB0:                             ; CODE XREF: sub_416B70+88↓j
.text:00416BB0                                         ; sub_416B70+A4↓j ...
.text:00416BB0                 xor     ecx, ecx
.text:00416BB2
.text:00416BB2 loc_416BB2:                             ; CODE XREF: sub_416B70+80↓j
.text:00416BB2                 mov     [ebp+var_18], edi
.text:00416BB5                 mov     ebx, [ebp+var_C]
.text:00416BB8                 mov     eax, [ebp+var_18]
.text:00416BBB                 mov     [ebp+var_14], ecx
.text:00416BBE                 mov     esi, [ebp+var_8]
.text:00416BC1                 mov     edx, [ebp+var_14]
.text:00416BC4                 mov     edi, [ebp+var_4]
.text:00416BC7                 mov     esp, ebp
.text:00416BC9                 pop     ebp
.text:00416BCA                 retn
.text:00416BCA ; ---------------------------------------------------------------------------
.text:00416BCB                 align 10h
.text:00416BD0
.text:00416BD0 loc_416BD0:                             ; CODE XREF: sub_416B70+34↑j
.text:00416BD0                 test    eax, eax
.text:00416BD2                 jnz     short loc_416BE1
.text:00416BD4                 mov     eax, 1
.text:00416BD9                 xor     ecx, ecx
.text:00416BDB                 xor     edx, edx
.text:00416BDD                 div     ecx
.text:00416BDF                 mov     esi, eax
.text:00416BE1
.text:00416BE1 loc_416BE1:                             ; CODE XREF: sub_416B70+62↑j
.text:00416BE1                 mov     eax, ebx
.text:00416BE3                 xor     edx, edx
.text:00416BE5                 div     esi
.text:00416BE7                 mov     ecx, eax
.text:00416BE9                 mov     eax, [ebp+var_1C]
.text:00416BEC                 div     esi
.text:00416BEE                 mov     edi, eax
.text:00416BF0                 jmp     short loc_416BB2
.text:00416BF2 ; ---------------------------------------------------------------------------
.text:00416BF2
.text:00416BF2 loc_416BF2:                             ; CODE XREF: sub_416B70+30↑j
.text:00416BF2                 cmp     edx, ebx
.text:00416BF4                 jbe     short loc_416C00
.text:00416BF6                 xor     edi, edi
.text:00416BF8                 jmp     short loc_416BB0
.text:00416BF8 ; ---------------------------------------------------------------------------
.text:00416BFA                 align 10h
.text:00416C00
.text:00416C00 loc_416C00:                             ; CODE XREF: sub_416B70+84↑j
.text:00416C00                 bsr     eax, edx
.text:00416C03                 xor     eax, 1Fh
.text:00416C06                 mov     [ebp+var_20], eax
.text:00416C09                 jnz     short loc_416C20
.text:00416C0B                 cmp     ebx, edx
.text:00416C0D                 ja      short loc_416C16
.text:00416C0F                 xor     edi, edi
.text:00416C11                 cmp     [ebp+var_1C], esi
.text:00416C14                 jb      short loc_416BB0
.text:00416C16
.text:00416C16 loc_416C16:                             ; CODE XREF: sub_416B70+9D↑j
.text:00416C16                 mov     edi, 1
.text:00416C1B                 jmp     short loc_416BB0
.text:00416C1B ; ---------------------------------------------------------------------------
.text:00416C1D                 align 10h
.text:00416C20
.text:00416C20 loc_416C20:                             ; CODE XREF: sub_416B70+99↑j
.text:00416C20                 mov     eax, [ebp+var_20]
.text:00416C23                 mov     ecx, 20h ; ' '
.text:00416C28                 sub     ecx, eax
.text:00416C2A                 mov     [ebp+var_24], ecx
.text:00416C2D                 mov     eax, esi
.text:00416C2F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00416C33                 shl     edx, cl
.text:00416C35                 mov     edi, edx
.text:00416C37                 movzx   ecx, byte ptr [ebp+var_24]
.text:00416C3B                 mov     edx, ebx
.text:00416C3D                 shr     eax, cl
.text:00416C3F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00416C43                 or      edi, eax
.text:00416C45                 mov     eax, [ebp+var_1C]
.text:00416C48                 shl     esi, cl
.text:00416C4A                 movzx   ecx, byte ptr [ebp+var_24]
.text:00416C4E                 shr     edx, cl
.text:00416C50                 movzx   ecx, byte ptr [ebp+var_20]
.text:00416C54                 shl     ebx, cl
.text:00416C56                 movzx   ecx, byte ptr [ebp+var_24]
.text:00416C5A                 shr     eax, cl
.text:00416C5C                 or      ebx, eax
.text:00416C5E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00416C62                 mov     eax, ebx
.text:00416C64                 div     edi
.text:00416C66                 mov     ebx, edx
.text:00416C68                 mov     edi, eax
.text:00416C6A                 shl     [ebp+var_1C], cl
.text:00416C6D                 mul     esi
.text:00416C6F                 cmp     edx, ebx
.text:00416C71                 ja      short loc_416C84
.text:00416C73                 cmp     edx, ebx
.text:00416C75                 jnz     loc_416BB0
.text:00416C7B                 cmp     eax, [ebp+var_1C]
.text:00416C7E                 jbe     loc_416BB0
.text:00416C84
.text:00416C84 loc_416C84:                             ; CODE XREF: sub_416B70+101↑j
.text:00416C84                 dec     edi
.text:00416C85                 jmp     loc_416BB0
.text:00416C85 sub_416B70      endp
.text:00416C85
.text:00416C85 ; ---------------------------------------------------------------------------
.text:00416C8A                 align 10h
.text:00416C90
.text:00416C90 ; =============== S U B R O U T I N E =======================================
.text:00416C90
.text:00416C90 ; Attributes: bp-based frame
.text:00416C90
.text:00416C90 sub_416C90      proc near               ; CODE XREF: sub_40FFF0+1A5↑p
.text:00416C90                                         ; sub_40FFF0+21E↑p ...
.text:00416C90
.text:00416C90 var_34          = dword ptr -34h
.text:00416C90 var_2C          = dword ptr -2Ch
.text:00416C90 var_28          = dword ptr -28h
.text:00416C90 var_24          = dword ptr -24h
.text:00416C90 var_20          = dword ptr -20h
.text:00416C90 var_1C          = dword ptr -1Ch
.text:00416C90 var_18          = dword ptr -18h
.text:00416C90 var_14          = dword ptr -14h
.text:00416C90 arg_0           = dword ptr  8
.text:00416C90 arg_4           = dword ptr  0Ch
.text:00416C90 arg_8           = dword ptr  10h
.text:00416C90 arg_C           = dword ptr  14h
.text:00416C90
.text:00416C90                 push    ebp
.text:00416C91                 mov     ebp, esp
.text:00416C93                 push    edi
.text:00416C94                 push    esi
.text:00416C95                 push    ebx
.text:00416C96                 sub     esp, 2Ch
.text:00416C99                 mov     edx, [ebp+arg_C]
.text:00416C9C                 mov     [ebp+var_20], 0
.text:00416CA3                 mov     ecx, [ebp+arg_0]
.text:00416CA6                 mov     ebx, [ebp+arg_4]
.text:00416CA9                 mov     [ebp+var_1C], 0
.text:00416CB0                 mov     eax, [ebp+arg_8]
.text:00416CB3                 test    edx, edx
.text:00416CB5                 mov     [ebp+var_24], edx
.text:00416CB8                 mov     edi, ebx
.text:00416CBA                 mov     esi, eax
.text:00416CBC                 mov     [ebp+var_28], ecx
.text:00416CBF                 jnz     short loc_416D20
.text:00416CC1                 cmp     eax, ebx
.text:00416CC3                 jbe     short loc_416D00
.text:00416CC5                 mov     eax, ecx
.text:00416CC7                 mov     edx, ebx
.text:00416CC9                 div     esi
.text:00416CCB
.text:00416CCB loc_416CCB:                             ; CODE XREF: sub_416C90+8B↓j
.text:00416CCB                 mov     [ebp+var_28], edx
.text:00416CCE                 lea     ecx, [ebp+var_18]
.text:00416CD1                 test    ecx, ecx
.text:00416CD3                 jz      short loc_416CEE
.text:00416CD5                 mov     [ebp+var_1C], 0
.text:00416CDC
.text:00416CDC loc_416CDC:                             ; CODE XREF: sub_416C90+DA↓j
.text:00416CDC                 mov     eax, [ebp+var_28]
.text:00416CDF                 mov     [ebp+var_20], eax
.text:00416CE2                 mov     edx, [ebp+var_20]
.text:00416CE5                 mov     ecx, [ebp+var_1C]
.text:00416CE8                 mov     [ebp+var_18], edx
.text:00416CEB                 mov     [ebp+var_14], ecx
.text:00416CEE
.text:00416CEE loc_416CEE:                             ; CODE XREF: sub_416C90+43↑j
.text:00416CEE                                         ; sub_416C90+A7↓j ...
.text:00416CEE                 mov     eax, [ebp+var_18]
.text:00416CF1                 mov     edx, [ebp+var_14]
.text:00416CF4                 add     esp, 2Ch
.text:00416CF7                 pop     ebx
.text:00416CF8                 pop     esi
.text:00416CF9                 pop     edi
.text:00416CFA                 pop     ebp
.text:00416CFB                 retn
.text:00416CFB ; ---------------------------------------------------------------------------
.text:00416CFC                 align 10h
.text:00416D00
.text:00416D00 loc_416D00:                             ; CODE XREF: sub_416C90+33↑j
.text:00416D00                 test    eax, eax
.text:00416D02                 jnz     short loc_416D0F
.text:00416D04                 mov     eax, 1
.text:00416D09                 xor     edx, edx
.text:00416D0B                 div     esi
.text:00416D0D                 mov     esi, eax
.text:00416D0F
.text:00416D0F loc_416D0F:                             ; CODE XREF: sub_416C90+72↑j
.text:00416D0F                 mov     eax, edi
.text:00416D11                 mov     edx, [ebp+var_24]
.text:00416D14                 div     esi
.text:00416D16                 mov     eax, [ebp+var_28]
.text:00416D19                 div     esi
.text:00416D1B                 jmp     short loc_416CCB
.text:00416D1B ; ---------------------------------------------------------------------------
.text:00416D1D                 align 10h
.text:00416D20
.text:00416D20 loc_416D20:                             ; CODE XREF: sub_416C90+2F↑j
.text:00416D20                 cmp     [ebp+var_24], ebx
.text:00416D23                 jbe     short loc_416D40
.text:00416D25                 mov     [ebp+var_20], ecx
.text:00416D28
.text:00416D28 loc_416D28:                             ; CODE XREF: sub_416C90+15B↓j
.text:00416D28                 mov     [ebp+var_1C], edi
.text:00416D2B                 mov     eax, [ebp+var_20]
.text:00416D2E                 mov     edx, [ebp+var_1C]
.text:00416D31                 mov     [ebp+var_18], eax
.text:00416D34                 mov     [ebp+var_14], edx
.text:00416D37                 jmp     short loc_416CEE
.text:00416D37 ; ---------------------------------------------------------------------------
.text:00416D39                 align 10h
.text:00416D40
.text:00416D40 loc_416D40:                             ; CODE XREF: sub_416C90+93↑j
.text:00416D40                 bsr     eax, [ebp+var_24]
.text:00416D44                 mov     ebx, eax
.text:00416D46                 xor     ebx, 1Fh
.text:00416D49                 jnz     short loc_416D70
.text:00416D4B                 cmp     edi, [ebp+var_24]
.text:00416D4E                 ja      short loc_416D55
.text:00416D50                 cmp     [ebp+var_28], esi
.text:00416D53                 jb      short loc_416D60
.text:00416D55
.text:00416D55 loc_416D55:                             ; CODE XREF: sub_416C90+BE↑j
.text:00416D55                 mov     edx, [ebp+var_28]
.text:00416D58                 sub     edx, esi
.text:00416D5A                 sbb     edi, [ebp+var_24]
.text:00416D5D                 mov     [ebp+var_28], edx
.text:00416D60
.text:00416D60 loc_416D60:                             ; CODE XREF: sub_416C90+C3↑j
.text:00416D60                 lea     ecx, [ebp+var_18]
.text:00416D63                 test    ecx, ecx
.text:00416D65                 jz      short loc_416CEE
.text:00416D67                 mov     [ebp+var_1C], edi
.text:00416D6A                 jmp     loc_416CDC
.text:00416D6A ; ---------------------------------------------------------------------------
.text:00416D6F                 align 10h
.text:00416D70
.text:00416D70 loc_416D70:                             ; CODE XREF: sub_416C90+B9↑j
.text:00416D70                 mov     edx, [ebp+var_24]
.text:00416D73                 mov     eax, 20h ; ' '
.text:00416D78                 mov     cl, bl
.text:00416D7A                 sub     eax, ebx
.text:00416D7C                 mov     [ebp+var_2C], eax
.text:00416D7F                 shl     edx, cl
.text:00416D81                 mov     eax, esi
.text:00416D83                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00416D87                 shr     eax, cl
.text:00416D89                 mov     cl, bl
.text:00416D8B                 shl     esi, cl
.text:00416D8D                 or      edx, eax
.text:00416D8F                 mov     eax, [ebp+var_28]
.text:00416D92                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00416D96                 mov     [ebp+var_24], edx
.text:00416D99                 mov     edx, edi
.text:00416D9B                 shr     edx, cl
.text:00416D9D                 mov     cl, bl
.text:00416D9F                 shl     edi, cl
.text:00416DA1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00416DA5                 shr     eax, cl
.text:00416DA7                 or      edi, eax
.text:00416DA9                 mov     eax, edi
.text:00416DAB                 mov     cl, bl
.text:00416DAD                 div     [ebp+var_24]
.text:00416DB0                 shl     [ebp+var_28], cl
.text:00416DB3                 mov     edi, edx
.text:00416DB5                 mul     esi
.text:00416DB7                 mov     [ebp+var_34], eax
.text:00416DBA                 cmp     edx, edi
.text:00416DBC                 ja      short loc_416DF8
.text:00416DBE                 cmp     edx, edi
.text:00416DC0                 jz      short loc_416DF0
.text:00416DC2
.text:00416DC2 loc_416DC2:                             ; CODE XREF: sub_416C90+166↓j
.text:00416DC2                                         ; sub_416C90+173↓j
.text:00416DC2                 lea     eax, [ebp+var_18]
.text:00416DC5                 test    eax, eax
.text:00416DC7                 jz      loc_416CEE
.text:00416DCD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00416DD1                 mov     eax, [ebp+var_28]
.text:00416DD4                 sub     eax, [ebp+var_34]
.text:00416DD7                 sbb     edi, edx
.text:00416DD9                 mov     [ebp+var_28], eax
.text:00416DDC                 mov     edx, edi
.text:00416DDE                 shl     edx, cl
.text:00416DE0                 mov     cl, bl
.text:00416DE2                 shr     eax, cl
.text:00416DE4                 or      edx, eax
.text:00416DE6                 mov     [ebp+var_20], edx
.text:00416DE9                 shr     edi, cl
.text:00416DEB                 jmp     loc_416D28
.text:00416DF0 ; ---------------------------------------------------------------------------
.text:00416DF0
.text:00416DF0 loc_416DF0:                             ; CODE XREF: sub_416C90+130↑j
.text:00416DF0                 mov     eax, [ebp+var_28]
.text:00416DF3                 cmp     [ebp+var_34], eax
.text:00416DF6                 jbe     short loc_416DC2
.text:00416DF8
.text:00416DF8 loc_416DF8:                             ; CODE XREF: sub_416C90+12C↑j
.text:00416DF8                 mov     ecx, [ebp+var_34]
.text:00416DFB                 sub     ecx, esi
.text:00416DFD                 sbb     edx, [ebp+var_24]
.text:00416E00                 mov     [ebp+var_34], ecx
.text:00416E03                 jmp     short loc_416DC2
.text:00416E03 sub_416C90      endp
.text:00416E03
.text:00416E03 ; ---------------------------------------------------------------------------
.text:00416E05                 align 10h
.text:00416E10
.text:00416E10 ; =============== S U B R O U T I N E =======================================
.text:00416E10
.text:00416E10 ; Attributes: thunk
.text:00416E10
.text:00416E10 ; char *__cdecl strdup(const char *String)
.text:00416E10 _strdup         proc near               ; CODE XREF: sub_40F2B0+C6↑p
.text:00416E10                                         ; sub_412E70+101↑p ...
.text:00416E10
.text:00416E10 String          = dword ptr  4
.text:00416E10
.text:00416E10                 jmp     ds:__imp__strdup
.text:00416E10 _strdup         endp
.text:00416E10
.text:00416E10 ; ---------------------------------------------------------------------------
.text:00416E16                 align 10h
.text:00416E20
.text:00416E20 ; =============== S U B R O U T I N E =======================================
.text:00416E20
.text:00416E20 ; Attributes: thunk
.text:00416E20
.text:00416E20 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00416E20 _stricmp        proc near               ; CODE XREF: sub_4104C0+46F↑p
.text:00416E20                                         ; sub_413240+2E↑p ...
.text:00416E20
.text:00416E20 String1         = dword ptr  4
.text:00416E20 String2         = dword ptr  8
.text:00416E20
.text:00416E20                 jmp     ds:__imp__stricmp
.text:00416E20 _stricmp        endp
.text:00416E20
.text:00416E20 ; ---------------------------------------------------------------------------
.text:00416E26                 align 10h
.text:00416E30
.text:00416E30 ; =============== S U B R O U T I N E =======================================
.text:00416E30
.text:00416E30 ; Attributes: thunk
.text:00416E30
.text:00416E30 ; int __cdecl getpid()
.text:00416E30 _getpid         proc near               ; CODE XREF: sub_414E80+84↑p
.text:00416E30                 jmp     ds:__imp__getpid
.text:00416E30 _getpid         endp
.text:00416E30
.text:00416E30 ; ---------------------------------------------------------------------------
.text:00416E36                 align 10h
.text:00416E40
.text:00416E40 ; =============== S U B R O U T I N E =======================================
.text:00416E40
.text:00416E40 ; Attributes: thunk
.text:00416E40
.text:00416E40 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00416E40 _chmod          proc near               ; CODE XREF: sub_4152B0+41↑j
.text:00416E40
.text:00416E40 FileName        = dword ptr  4
.text:00416E40 AccessMode      = dword ptr  8
.text:00416E40
.text:00416E40                 jmp     ds:__imp__chmod
.text:00416E40 _chmod          endp
.text:00416E40
.text:00416E40 ; ---------------------------------------------------------------------------
.text:00416E46                 align 10h
.text:00416E50                 jmp     ds:__set_app_type
.text:00416E50 ; ---------------------------------------------------------------------------
.text:00416E56                 align 10h
.text:00416E60
.text:00416E60 ; =============== S U B R O U T I N E =======================================
.text:00416E60
.text:00416E60 ; Attributes: thunk
.text:00416E60
.text:00416E60 ; void __cdecl cexit()
.text:00416E60 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00416E60                 jmp     ds:__imp__cexit
.text:00416E60 _cexit          endp
.text:00416E60
.text:00416E60 ; ---------------------------------------------------------------------------
.text:00416E66                 align 10h
.text:00416E70
.text:00416E70 ; =============== S U B R O U T I N E =======================================
.text:00416E70
.text:00416E70 ; Attributes: thunk
.text:00416E70
.text:00416E70 ; char ***__cdecl _p__environ()
.text:00416E70 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00416E70                 jmp     ds:__imp___p__environ
.text:00416E70 __p__environ    endp
.text:00416E70
.text:00416E70 ; ---------------------------------------------------------------------------
.text:00416E76                 align 10h
.text:00416E80
.text:00416E80 ; =============== S U B R O U T I N E =======================================
.text:00416E80
.text:00416E80 ; Attributes: thunk
.text:00416E80
.text:00416E80 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00416E80 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00416E80                                         ; TopLevelExceptionFilter+88↑p ...
.text:00416E80
.text:00416E80 Signal          = dword ptr  4
.text:00416E80 Function        = dword ptr  8
.text:00416E80
.text:00416E80                 jmp     ds:__imp_signal
.text:00416E80 signal          endp
.text:00416E80
.text:00416E80 ; ---------------------------------------------------------------------------
.text:00416E86                 align 10h
.text:00416E90
.text:00416E90 ; =============== S U B R O U T I N E =======================================
.text:00416E90
.text:00416E90 ; Attributes: thunk
.text:00416E90
.text:00416E90 ; int *__cdecl _p__fmode()
.text:00416E90 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00416E90                 jmp     ds:__imp___p__fmode
.text:00416E90 __p__fmode      endp
.text:00416E90
.text:00416E90 ; ---------------------------------------------------------------------------
.text:00416E96                 align 10h
.text:00416EA0
.text:00416EA0 ; =============== S U B R O U T I N E =======================================
.text:00416EA0
.text:00416EA0 ; Attributes: thunk
.text:00416EA0
.text:00416EA0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00416EA0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00416EA0                                         ; sub_401080+90↑p ...
.text:00416EA0
.text:00416EA0 FileHandle      = dword ptr  4
.text:00416EA0 Mode            = dword ptr  8
.text:00416EA0
.text:00416EA0                 jmp     ds:__imp__setmode
.text:00416EA0 _setmode        endp
.text:00416EA0
.text:00416EA0 ; ---------------------------------------------------------------------------
.text:00416EA6                 align 10h
.text:00416EB0
.text:00416EB0 ; =============== S U B R O U T I N E =======================================
.text:00416EB0
.text:00416EB0 ; Attributes: thunk
.text:00416EB0
.text:00416EB0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00416EB0                 jmp     ds:__imp___getmainargs
.text:00416EB0 __getmainargs   endp
.text:00416EB0
.text:00416EB0 ; ---------------------------------------------------------------------------
.text:00416EB6                 align 10h
.text:00416EC0
.text:00416EC0 ; =============== S U B R O U T I N E =======================================
.text:00416EC0
.text:00416EC0 ; Attributes: thunk
.text:00416EC0
.text:00416EC0 ; char *__cdecl getenv(const char *VarName)
.text:00416EC0 getenv          proc near               ; CODE XREF: sub_401FB0+90↑p
.text:00416EC0                                         ; sub_403780+B57↑p ...
.text:00416EC0
.text:00416EC0 VarName         = dword ptr  4
.text:00416EC0
.text:00416EC0                 jmp     ds:__imp_getenv
.text:00416EC0 getenv          endp
.text:00416EC0
.text:00416EC0 ; ---------------------------------------------------------------------------
.text:00416EC6                 align 10h
.text:00416ED0
.text:00416ED0 ; =============== S U B R O U T I N E =======================================
.text:00416ED0
.text:00416ED0 ; Attributes: thunk
.text:00416ED0
.text:00416ED0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00416ED0 setlocale       proc near               ; CODE XREF: sub_401FB0+56↑p
.text:00416ED0
.text:00416ED0 Category        = dword ptr  4
.text:00416ED0 Locale          = dword ptr  8
.text:00416ED0
.text:00416ED0                 jmp     ds:__imp_setlocale
.text:00416ED0 setlocale       endp
.text:00416ED0
.text:00416ED0 ; ---------------------------------------------------------------------------
.text:00416ED6                 align 10h
.text:00416EE0
.text:00416EE0 ; =============== S U B R O U T I N E =======================================
.text:00416EE0
.text:00416EE0 ; Attributes: noreturn thunk
.text:00416EE0
.text:00416EE0 ; void __cdecl __noreturn exit(int Code)
.text:00416EE0 exit            proc near               ; CODE XREF: sub_401FB0:loc_40211B↑p
.text:00416EE0                                         ; sub_402900+3B↑p ...
.text:00416EE0
.text:00416EE0 Code            = dword ptr  4
.text:00416EE0
.text:00416EE0                 jmp     ds:__imp_exit
.text:00416EE0 exit            endp
.text:00416EE0
.text:00416EE0 ; ---------------------------------------------------------------------------
.text:00416EE6                 align 10h
.text:00416EF0
.text:00416EF0 ; =============== S U B R O U T I N E =======================================
.text:00416EF0
.text:00416EF0 ; Attributes: thunk
.text:00416EF0
.text:00416EF0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00416EF0 fputs           proc near               ; CODE XREF: sub_401FB0+239↑p
.text:00416EF0                                         ; sub_401FB0+25B↑p ...
.text:00416EF0
.text:00416EF0 Buffer          = dword ptr  4
.text:00416EF0 Stream          = dword ptr  8
.text:00416EF0
.text:00416EF0                 jmp     ds:__imp_fputs
.text:00416EF0 fputs           endp
.text:00416EF0
.text:00416EF0 ; ---------------------------------------------------------------------------
.text:00416EF6                 align 10h
.text:00416F00
.text:00416F00 ; =============== S U B R O U T I N E =======================================
.text:00416F00
.text:00416F00 ; Attributes: thunk
.text:00416F00
.text:00416F00 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00416F00 memcpy          proc near               ; CODE XREF: sub_402C30+43C↑p
.text:00416F00                                         ; sub_402C30+581↑p ...
.text:00416F00
.text:00416F00 Src             = dword ptr  8
.text:00416F00 Size            = dword ptr  0Ch
.text:00416F00
.text:00416F00                 jmp     ds:__imp_memcpy
.text:00416F00 memcpy          endp
.text:00416F00
.text:00416F00 ; ---------------------------------------------------------------------------
.text:00416F06                 align 10h
.text:00416F10
.text:00416F10 ; =============== S U B R O U T I N E =======================================
.text:00416F10
.text:00416F10 ; Attributes: thunk
.text:00416F10
.text:00416F10 ; int printf(const char *const Format, ...)
.text:00416F10 printf          proc near               ; CODE XREF: sub_401FB0+217↑p
.text:00416F10                                         ; sub_401FB0+366↑p ...
.text:00416F10
.text:00416F10 Format          = dword ptr  4
.text:00416F10
.text:00416F10                 jmp     ds:__imp_printf
.text:00416F10 printf          endp
.text:00416F10
.text:00416F10 ; ---------------------------------------------------------------------------
.text:00416F16                 align 10h
.text:00416F20
.text:00416F20 ; =============== S U B R O U T I N E =======================================
.text:00416F20
.text:00416F20 ; Attributes: thunk
.text:00416F20
.text:00416F20 ; void __cdecl free(void *Block)
.text:00416F20 free            proc near               ; CODE XREF: sub_402C30+444↑p
.text:00416F20                                         ; sub_403290+18B↑p ...
.text:00416F20
.text:00416F20 Block           = dword ptr  4
.text:00416F20
.text:00416F20                 jmp     ds:__imp_free
.text:00416F20 free            endp
.text:00416F20
.text:00416F20 ; ---------------------------------------------------------------------------
.text:00416F26                 align 10h
.text:00416F30
.text:00416F30 ; =============== S U B R O U T I N E =======================================
.text:00416F30
.text:00416F30 ; Attributes: thunk
.text:00416F30
.text:00416F30 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00416F30 fprintf         proc near               ; CODE XREF: sub_401FB0+15F↑p
.text:00416F30                                         ; sub_402900+33↑p ...
.text:00416F30
.text:00416F30 Stream          = dword ptr  4
.text:00416F30 Format          = dword ptr  8
.text:00416F30
.text:00416F30                 jmp     ds:__imp_fprintf
.text:00416F30 fprintf         endp
.text:00416F30
.text:00416F30 ; ---------------------------------------------------------------------------
.text:00416F36                 align 10h
.text:00416F40
.text:00416F40 ; =============== S U B R O U T I N E =======================================
.text:00416F40
.text:00416F40 ; Attributes: thunk
.text:00416F40
.text:00416F40 ; int *__cdecl errno()
.text:00416F40 _errno          proc near               ; CODE XREF: sub_401FB0+523↑p
.text:00416F40                                         ; sub_401FB0:loc_402890↑p ...
.text:00416F40                 jmp     ds:__imp__errno
.text:00416F40 _errno          endp
.text:00416F40
.text:00416F40 ; ---------------------------------------------------------------------------
.text:00416F46                 align 10h
.text:00416F50
.text:00416F50 ; =============== S U B R O U T I N E =======================================
.text:00416F50
.text:00416F50 ; Attributes: thunk
.text:00416F50
.text:00416F50 ; size_t __cdecl strlen(const char *Str)
.text:00416F50 strlen          proc near               ; CODE XREF: sub_401FB0+74E↑p
.text:00416F50                                         ; sub_402C30+414↑p ...
.text:00416F50
.text:00416F50 Str             = dword ptr  4
.text:00416F50
.text:00416F50                 jmp     ds:__imp_strlen
.text:00416F50 strlen          endp
.text:00416F50
.text:00416F50 ; ---------------------------------------------------------------------------
.text:00416F56                 align 10h
.text:00416F60
.text:00416F60 ; =============== S U B R O U T I N E =======================================
.text:00416F60
.text:00416F60 ; Attributes: thunk
.text:00416F60
.text:00416F60 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00416F60 _flsbuf         proc near               ; CODE XREF: sub_402C30+3ED↑p
.text:00416F60                                         ; sub_405110+128↑p ...
.text:00416F60
.text:00416F60 File            = dword ptr  8
.text:00416F60
.text:00416F60                 jmp     ds:__imp__flsbuf
.text:00416F60 _flsbuf         endp
.text:00416F60
.text:00416F60 ; ---------------------------------------------------------------------------
.text:00416F66                 align 10h
.text:00416F70
.text:00416F70 ; =============== S U B R O U T I N E =======================================
.text:00416F70
.text:00416F70 ; Attributes: thunk
.text:00416F70
.text:00416F70 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00416F70 strncmp         proc near               ; CODE XREF: sub_403780+23F↑p
.text:00416F70                                         ; sub_403780+699↑p ...
.text:00416F70
.text:00416F70 Str1            = dword ptr  4
.text:00416F70 Str2            = dword ptr  8
.text:00416F70 MaxCount        = dword ptr  0Ch
.text:00416F70
.text:00416F70                 jmp     ds:__imp_strncmp
.text:00416F70 strncmp         endp
.text:00416F70
.text:00416F70 ; ---------------------------------------------------------------------------
.text:00416F76                 align 10h
.text:00416F80
.text:00416F80 ; =============== S U B R O U T I N E =======================================
.text:00416F80
.text:00416F80 ; Attributes: thunk
.text:00416F80
.text:00416F80 ; char *__cdecl strchr(const char *Str, int Val)
.text:00416F80 strchr          proc near               ; CODE XREF: sub_403780+469↑p
.text:00416F80                                         ; sub_403780+53A↑p ...
.text:00416F80
.text:00416F80 Str             = dword ptr  4
.text:00416F80 Val             = dword ptr  8
.text:00416F80
.text:00416F80                 jmp     ds:__imp_strchr
.text:00416F80 strchr          endp
.text:00416F80
.text:00416F80 ; ---------------------------------------------------------------------------
.text:00416F86                 align 10h
.text:00416F90
.text:00416F90 ; =============== S U B R O U T I N E =======================================
.text:00416F90
.text:00416F90 ; Attributes: thunk
.text:00416F90
.text:00416F90 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00416F90 memset          proc near               ; CODE XREF: .text:00404CB6↑p
.text:00416F90                                         ; sub_40A600+330A↑p ...
.text:00416F90
.text:00416F90 Val             = dword ptr  8
.text:00416F90 Size            = dword ptr  0Ch
.text:00416F90
.text:00416F90                 jmp     ds:__imp_memset
.text:00416F90 memset          endp
.text:00416F90
.text:00416F90 ; ---------------------------------------------------------------------------
.text:00416F96                 align 10h
.text:00416FA0
.text:00416FA0 ; =============== S U B R O U T I N E =======================================
.text:00416FA0
.text:00416FA0 ; Attributes: thunk
.text:00416FA0
.text:00416FA0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00416FA0 calloc          proc near               ; CODE XREF: .text:00404CF3↑p
.text:00416FA0                                         ; sub_412E70+AC↑p
.text:00416FA0
.text:00416FA0 Count           = dword ptr  4
.text:00416FA0 Size            = dword ptr  8
.text:00416FA0
.text:00416FA0                 jmp     ds:__imp_calloc
.text:00416FA0 calloc          endp
.text:00416FA0
.text:00416FA0 ; ---------------------------------------------------------------------------
.text:00416FA6                 align 10h
.text:00416FB0
.text:00416FB0 ; =============== S U B R O U T I N E =======================================
.text:00416FB0
.text:00416FB0 ; Attributes: thunk
.text:00416FB0
.text:00416FB0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00416FB0 realloc         proc near               ; CODE XREF: sub_404BC0+30↑p
.text:00416FB0                                         ; sub_404C20+16↑p ...
.text:00416FB0
.text:00416FB0 Block           = dword ptr  4
.text:00416FB0 Size            = dword ptr  8
.text:00416FB0
.text:00416FB0                 jmp     ds:__imp_realloc
.text:00416FB0 realloc         endp
.text:00416FB0
.text:00416FB0 ; ---------------------------------------------------------------------------
.text:00416FB6                 align 10h
.text:00416FC0
.text:00416FC0 ; =============== S U B R O U T I N E =======================================
.text:00416FC0
.text:00416FC0 ; Attributes: thunk
.text:00416FC0
.text:00416FC0 ; void *__cdecl malloc(size_t Size)
.text:00416FC0 malloc          proc near               ; CODE XREF: .text:00404B74↑p
.text:00416FC0                                         ; sub_404B90+E↑p ...
.text:00416FC0
.text:00416FC0 Size            = dword ptr  4
.text:00416FC0
.text:00416FC0                 jmp     ds:__imp_malloc
.text:00416FC0 malloc          endp
.text:00416FC0
.text:00416FC0 ; ---------------------------------------------------------------------------
.text:00416FC6                 align 10h
.text:00416FD0
.text:00416FD0 ; =============== S U B R O U T I N E =======================================
.text:00416FD0
.text:00416FD0 ; Attributes: thunk
.text:00416FD0
.text:00416FD0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00416FD0 vfprintf        proc near               ; CODE XREF: sub_405110+C1↑p
.text:00416FD0                                         ; sub_40E040+49↑p ...
.text:00416FD0
.text:00416FD0 Stream          = dword ptr  4
.text:00416FD0 Format          = dword ptr  8
.text:00416FD0 ArgList         = dword ptr  0Ch
.text:00416FD0
.text:00416FD0                 jmp     ds:__imp_vfprintf
.text:00416FD0 vfprintf        endp
.text:00416FD0
.text:00416FD0 ; ---------------------------------------------------------------------------
.text:00416FD6                 align 10h
.text:00416FE0
.text:00416FE0 ; =============== S U B R O U T I N E =======================================
.text:00416FE0
.text:00416FE0 ; Attributes: noreturn thunk
.text:00416FE0
.text:00416FE0 ; void __cdecl __noreturn abort()
.text:00416FE0 abort           proc near               ; CODE XREF: sub_405110:loc_4051AC↑p
.text:00416FE0                                         ; sub_405EA0+32↑p ...
.text:00416FE0                 jmp     ds:__imp_abort
.text:00416FE0 abort           endp
.text:00416FE0
.text:00416FE0 ; ---------------------------------------------------------------------------
.text:00416FE6                 align 10h
.text:00416FF0
.text:00416FF0 ; =============== S U B R O U T I N E =======================================
.text:00416FF0
.text:00416FF0 ; Attributes: thunk
.text:00416FF0
.text:00416FF0 ; int __cdecl fclose(FILE *Stream)
.text:00416FF0 fclose          proc near               ; CODE XREF: sub_405490+27↑p
.text:00416FF0                                         ; .text:0041477E↑p
.text:00416FF0
.text:00416FF0 Stream          = dword ptr  4
.text:00416FF0
.text:00416FF0                 jmp     ds:__imp_fclose
.text:00416FF0 fclose          endp
.text:00416FF0
.text:00416FF0 ; ---------------------------------------------------------------------------
.text:00416FF6                 align 10h
.text:00417000
.text:00417000 ; =============== S U B R O U T I N E =======================================
.text:00417000
.text:00417000 ; Attributes: thunk
.text:00417000
.text:00417000 ; int __cdecl filbuf(FILE *File)
.text:00417000 _filbuf         proc near               ; CODE XREF: sub_405570+B9↑p
.text:00417000
.text:00417000 File            = dword ptr  4
.text:00417000
.text:00417000                 jmp     ds:__imp__filbuf
.text:00417000 _filbuf         endp
.text:00417000
.text:00417000 ; ---------------------------------------------------------------------------
.text:00417006                 align 10h
.text:00417010
.text:00417010 ; =============== S U B R O U T I N E =======================================
.text:00417010
.text:00417010 ; Attributes: thunk
.text:00417010
.text:00417010 ; int __cdecl isctype(int C, int Type)
.text:00417010 _isctype        proc near               ; CODE XREF: sub_405570+5F↑p
.text:00417010                                         ; sub_405F70+610↑p ...
.text:00417010
.text:00417010 C               = dword ptr  4
.text:00417010 Type            = dword ptr  8
.text:00417010
.text:00417010                 jmp     ds:__imp__isctype
.text:00417010 _isctype        endp
.text:00417010
.text:00417010 ; ---------------------------------------------------------------------------
.text:00417016                 align 10h
.text:00417020
.text:00417020 ; =============== S U B R O U T I N E =======================================
.text:00417020
.text:00417020 ; Attributes: thunk
.text:00417020
.text:00417020 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00417020 iswctype        proc near               ; CODE XREF: sub_405F70+78B↑p
.text:00417020                                         ; sub_40A600+1F86↑p
.text:00417020
.text:00417020 C               = word ptr  4
.text:00417020 Type            = word ptr  8
.text:00417020
.text:00417020                 jmp     ds:__imp_iswctype
.text:00417020 iswctype        endp
.text:00417020
.text:00417020 ; ---------------------------------------------------------------------------
.text:00417026                 align 10h
.text:00417030
.text:00417030 ; =============== S U B R O U T I N E =======================================
.text:00417030
.text:00417030 ; Attributes: thunk
.text:00417030
.text:00417030 ; int __cdecl tolower(int C)
.text:00417030 tolower         proc near               ; CODE XREF: sub_40A030+158↑p
.text:00417030
.text:00417030 C               = dword ptr  4
.text:00417030
.text:00417030                 jmp     ds:__imp_tolower
.text:00417030 tolower         endp
.text:00417030
.text:00417030 ; ---------------------------------------------------------------------------
.text:00417036                 align 10h
.text:00417040
.text:00417040 ; =============== S U B R O U T I N E =======================================
.text:00417040
.text:00417040 ; Attributes: thunk
.text:00417040
.text:00417040 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00417040 strcmp          proc near               ; CODE XREF: sub_40E144+180↑p
.text:00417040                                         ; .text:00413B7B↑p
.text:00417040
.text:00417040 Str1            = dword ptr  4
.text:00417040 Str2            = dword ptr  8
.text:00417040
.text:00417040                 jmp     ds:__imp_strcmp
.text:00417040 strcmp          endp
.text:00417040
.text:00417040 ; ---------------------------------------------------------------------------
.text:00417046                 align 10h
.text:00417050
.text:00417050 ; =============== S U B R O U T I N E =======================================
.text:00417050
.text:00417050 ; Attributes: thunk
.text:00417050
.text:00417050 ; int __cdecl fflush(FILE *Stream)
.text:00417050 fflush          proc near               ; CODE XREF: sub_40E040+19↑p
.text:00417050                                         ; sub_40E040+81↑p ...
.text:00417050
.text:00417050 Stream          = dword ptr  4
.text:00417050
.text:00417050                 jmp     ds:__imp_fflush
.text:00417050 fflush          endp
.text:00417050
.text:00417050 ; ---------------------------------------------------------------------------
.text:00417056                 align 10h
.text:00417060
.text:00417060 ; =============== S U B R O U T I N E =======================================
.text:00417060
.text:00417060 ; Attributes: thunk
.text:00417060
.text:00417060 ; char *__cdecl strerror(int ErrorMessage)
.text:00417060 strerror        proc near               ; CODE XREF: sub_40E040+A5↑p
.text:00417060                                         ; sub_40E144+10F↑p
.text:00417060
.text:00417060 ErrorMessage    = dword ptr  4
.text:00417060
.text:00417060                 jmp     ds:__imp_strerror
.text:00417060 strerror        endp
.text:00417060
.text:00417060 ; ---------------------------------------------------------------------------
.text:00417066                 align 10h
.text:00417070
.text:00417070 ; =============== S U B R O U T I N E =======================================
.text:00417070
.text:00417070 ; Attributes: thunk
.text:00417070
.text:00417070 ; size_t __cdecl mbstowcs(wchar_t *Dest, const char *Source, size_t MaxCount)
.text:00417070 mbstowcs        proc near               ; CODE XREF: sub_40E2E0+90↑p
.text:00417070
.text:00417070 Dest            = dword ptr  4
.text:00417070 Source          = dword ptr  8
.text:00417070 MaxCount        = dword ptr  0Ch
.text:00417070
.text:00417070                 jmp     ds:__imp_mbstowcs
.text:00417070 mbstowcs        endp
.text:00417070
.text:00417070 ; ---------------------------------------------------------------------------
.text:00417076                 align 10h
.text:00417080
.text:00417080 ; =============== S U B R O U T I N E =======================================
.text:00417080
.text:00417080 ; Attributes: thunk
.text:00417080
.text:00417080 ; int __cdecl isalpha(int C)
.text:00417080 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00417080
.text:00417080 C               = dword ptr  4
.text:00417080
.text:00417080                 jmp     ds:__imp_isalpha
.text:00417080 isalpha         endp
.text:00417080
.text:00417080 ; ---------------------------------------------------------------------------
.text:00417086                 align 10h
.text:00417090
.text:00417090 ; =============== S U B R O U T I N E =======================================
.text:00417090
.text:00417090 ; Attributes: thunk
.text:00417090
.text:00417090 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:00417090 strcpy          proc near               ; CODE XREF: _win32_longpath+13C↑p
.text:00417090                                         ; _win32_longpath+16B↑p ...
.text:00417090
.text:00417090 Destination     = dword ptr  4
.text:00417090 Source          = dword ptr  8
.text:00417090
.text:00417090                 jmp     ds:__imp_strcpy
.text:00417090 strcpy          endp
.text:00417090
.text:00417090 ; ---------------------------------------------------------------------------
.text:00417096                 align 10h
.text:004170A0
.text:004170A0 ; =============== S U B R O U T I N E =======================================
.text:004170A0
.text:004170A0 ; Attributes: thunk
.text:004170A0
.text:004170A0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:004170A0 strrchr         proc near               ; CODE XREF: .text:0040EC6E↑p
.text:004170A0                                         ; .text:0040ECAE↑p ...
.text:004170A0
.text:004170A0 Str             = dword ptr  4
.text:004170A0
.text:004170A0                 jmp     ds:__imp_strrchr
.text:004170A0 strrchr         endp
.text:004170A0
.text:004170A0 ; ---------------------------------------------------------------------------
.text:004170A6                 align 10h
.text:004170B0
.text:004170B0 ; =============== S U B R O U T I N E =======================================
.text:004170B0
.text:004170B0 ; Attributes: thunk
.text:004170B0
.text:004170B0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:004170B0 _stricmp_0      proc near               ; CODE XREF: .text:0040ED54↑p
.text:004170B0
.text:004170B0 String1         = dword ptr  4
.text:004170B0 String2         = dword ptr  8
.text:004170B0
.text:004170B0                 jmp     ds:__imp__stricmp_0
.text:004170B0 _stricmp_0      endp
.text:004170B0
.text:004170B0 ; ---------------------------------------------------------------------------
.text:004170B6                 align 10h
.text:004170C0
.text:004170C0 ; =============== S U B R O U T I N E =======================================
.text:004170C0
.text:004170C0 ; Attributes: thunk
.text:004170C0
.text:004170C0 ; char *__cdecl strncat(char *Destination, const char *Source, size_t Count)
.text:004170C0 strncat         proc near               ; CODE XREF: sub_40EEE0+75↑p
.text:004170C0
.text:004170C0 Destination     = dword ptr  4
.text:004170C0 Source          = dword ptr  8
.text:004170C0 Count           = dword ptr  0Ch
.text:004170C0
.text:004170C0                 jmp     ds:__imp_strncat
.text:004170C0 strncat         endp
.text:004170C0
.text:004170C0 ; ---------------------------------------------------------------------------
.text:004170C6                 align 10h
.text:004170D0
.text:004170D0 ; =============== S U B R O U T I N E =======================================
.text:004170D0
.text:004170D0 ; Attributes: thunk
.text:004170D0
.text:004170D0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:004170D0 strncpy         proc near               ; CODE XREF: sub_40EEE0+61↑p
.text:004170D0                                         ; sub_40EEE0+118↑p ...
.text:004170D0
.text:004170D0 Destination     = dword ptr  4
.text:004170D0 Source          = dword ptr  8
.text:004170D0 Count           = dword ptr  0Ch
.text:004170D0
.text:004170D0                 jmp     ds:__imp_strncpy
.text:004170D0 strncpy         endp
.text:004170D0
.text:004170D0 ; ---------------------------------------------------------------------------
.text:004170D6                 align 10h
.text:004170E0
.text:004170E0 ; =============== S U B R O U T I N E =======================================
.text:004170E0
.text:004170E0 ; Attributes: thunk
.text:004170E0
.text:004170E0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:004170E0 strcat          proc near               ; CODE XREF: sub_40EEE0+191↑p
.text:004170E0                                         ; sub_40F2B0+9E↑p ...
.text:004170E0
.text:004170E0 Destination     = dword ptr  4
.text:004170E0 Source          = dword ptr  8
.text:004170E0
.text:004170E0                 jmp     ds:__imp_strcat
.text:004170E0 strcat          endp
.text:004170E0
.text:004170E0 ; ---------------------------------------------------------------------------
.text:004170E6                 align 10h
.text:004170F0
.text:004170F0 ; =============== S U B R O U T I N E =======================================
.text:004170F0
.text:004170F0 ; Attributes: thunk
.text:004170F0
.text:004170F0 ; int __cdecl chmod_0(const char *FileName, int AccessMode)
.text:004170F0 _chmod_0        proc near               ; CODE XREF: sub_40F3D0+9B↑p
.text:004170F0
.text:004170F0 FileName        = dword ptr  4
.text:004170F0 AccessMode      = dword ptr  8
.text:004170F0
.text:004170F0                 jmp     ds:__imp__chmod_0
.text:004170F0 _chmod_0        endp
.text:004170F0
.text:004170F0 ; ---------------------------------------------------------------------------
.text:004170F6                 align 10h
.text:00417100
.text:00417100 ; =============== S U B R O U T I N E =======================================
.text:00417100
.text:00417100 ; Attributes: thunk
.text:00417100
.text:00417100 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:00417100 strstr          proc near               ; CODE XREF: sub_4104C0+3BF↑p
.text:00417100                                         ; sub_4104C0+3DC↑p ...
.text:00417100
.text:00417100 Str             = dword ptr  4
.text:00417100 SubStr          = dword ptr  8
.text:00417100
.text:00417100                 jmp     ds:__imp_strstr
.text:00417100 strstr          endp
.text:00417100
.text:00417100 ; ---------------------------------------------------------------------------
.text:00417106                 align 10h
.text:00417110
.text:00417110 ; =============== S U B R O U T I N E =======================================
.text:00417110
.text:00417110 ; Attributes: thunk
.text:00417110
.text:00417110 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00417110 sprintf         proc near               ; CODE XREF: .text:00411A1A↑p
.text:00417110                                         ; .text:00411A3B↑p ...
.text:00417110
.text:00417110 Buffer          = dword ptr  4
.text:00417110 Format          = dword ptr  8
.text:00417110
.text:00417110                 jmp     ds:__imp_sprintf
.text:00417110 sprintf         endp
.text:00417110
.text:00417110 ; ---------------------------------------------------------------------------
.text:00417116                 align 10h
.text:00417120
.text:00417120 ; =============== S U B R O U T I N E =======================================
.text:00417120
.text:00417120 ; Attributes: thunk
.text:00417120
.text:00417120 ; int __cdecl toupper(int C)
.text:00417120 toupper         proc near               ; CODE XREF: sub_412E70+10E↑p
.text:00417120
.text:00417120 C               = dword ptr  4
.text:00417120
.text:00417120                 jmp     ds:__imp_toupper
.text:00417120 toupper         endp
.text:00417120
.text:00417120 ; ---------------------------------------------------------------------------
.text:00417126                 align 10h
.text:00417130
.text:00417130 ; =============== S U B R O U T I N E =======================================
.text:00417130
.text:00417130 ; Attributes: thunk
.text:00417130
.text:00417130 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00417130 sscanf          proc near               ; CODE XREF: .text:00413DBE↑p
.text:00417130
.text:00417130 Buffer          = dword ptr  4
.text:00417130 Format          = dword ptr  8
.text:00417130
.text:00417130                 jmp     ds:__imp_sscanf
.text:00417130 sscanf          endp
.text:00417130
.text:00417130 ; ---------------------------------------------------------------------------
.text:00417136                 align 10h
.text:00417140
.text:00417140 ; =============== S U B R O U T I N E =======================================
.text:00417140
.text:00417140 ; Attributes: thunk
.text:00417140
.text:00417140 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00417140 strspn          proc near               ; CODE XREF: .text:00413C0A↑p
.text:00417140                                         ; .text:00413E24↑p ...
.text:00417140
.text:00417140 Str             = dword ptr  4
.text:00417140 Control         = dword ptr  8
.text:00417140
.text:00417140                 jmp     ds:__imp_strspn
.text:00417140 strspn          endp
.text:00417140
.text:00417140 ; ---------------------------------------------------------------------------
.text:00417146                 align 10h
.text:00417150
.text:00417150 ; =============== S U B R O U T I N E =======================================
.text:00417150
.text:00417150 ; Attributes: thunk
.text:00417150
.text:00417150 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00417150 fopen           proc near               ; CODE XREF: sub_4146BF+26↑p
.text:00417150                                         ; sub_4146BF+99↑p
.text:00417150
.text:00417150 FileName        = dword ptr  4
.text:00417150 Mode            = dword ptr  8
.text:00417150
.text:00417150                 jmp     ds:__imp_fopen
.text:00417150 fopen           endp
.text:00417150
.text:00417150 ; ---------------------------------------------------------------------------
.text:00417156                 align 10h
.text:00417160
.text:00417160 ; =============== S U B R O U T I N E =======================================
.text:00417160
.text:00417160 ; Attributes: thunk
.text:00417160
.text:00417160 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00417160 _get_osfhandle  proc near               ; CODE XREF: sub_414870+3A↑p
.text:00417160                                         ; sub_414930+15↑p
.text:00417160
.text:00417160 FileHandle      = dword ptr  4
.text:00417160
.text:00417160                 jmp     ds:__imp__get_osfhandle
.text:00417160 _get_osfhandle  endp
.text:00417160
.text:00417160 ; ---------------------------------------------------------------------------
.text:00417166                 align 10h
.text:00417170
.text:00417170 ; =============== S U B R O U T I N E =======================================
.text:00417170
.text:00417170 ; Attributes: thunk
.text:00417170
.text:00417170 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00417170 _filelengthi64  proc near               ; CODE XREF: sub_414930+1F↑p
.text:00417170
.text:00417170 FileHandle      = dword ptr  4
.text:00417170
.text:00417170                 jmp     ds:__imp__filelengthi64
.text:00417170 _filelengthi64  endp
.text:00417170
.text:00417170 ; ---------------------------------------------------------------------------
.text:00417176                 align 10h
.text:00417180
.text:00417180 ; =============== S U B R O U T I N E =======================================
.text:00417180
.text:00417180 ; Attributes: thunk
.text:00417180
.text:00417180 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00417180 strpbrk         proc near               ; CODE XREF: sub_414990+87↑p
.text:00417180
.text:00417180 Str             = dword ptr  4
.text:00417180 Control         = dword ptr  8
.text:00417180
.text:00417180                 jmp     ds:__imp_strpbrk
.text:00417180 strpbrk         endp
.text:00417180
.text:00417180 ; ---------------------------------------------------------------------------
.text:00417186                 align 10h
.text:00417190
.text:00417190 ; =============== S U B R O U T I N E =======================================
.text:00417190
.text:00417190 ; Attributes: thunk
.text:00417190
.text:00417190 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:00417190 _fdopen         proc near               ; CODE XREF: sub_414A30+69↑p
.text:00417190
.text:00417190 FileHandle      = dword ptr  4
.text:00417190 Format          = dword ptr  8
.text:00417190
.text:00417190                 jmp     ds:__imp__fdopen
.text:00417190 _fdopen         endp
.text:00417190
.text:00417190 ; ---------------------------------------------------------------------------
.text:00417196                 align 10h
.text:004171A0
.text:004171A0 ; =============== S U B R O U T I N E =======================================
.text:004171A0
.text:004171A0 ; Attributes: thunk
.text:004171A0
.text:004171A0 ; int __cdecl close(int FileHandle)
.text:004171A0 _close          proc near               ; CODE XREF: sub_414A30+90↑p
.text:004171A0
.text:004171A0 FileHandle      = dword ptr  4
.text:004171A0
.text:004171A0                 jmp     ds:__imp__close
.text:004171A0 _close          endp
.text:004171A0
.text:004171A0 ; ---------------------------------------------------------------------------
.text:004171A6                 align 10h
.text:004171B0
.text:004171B0 ; =============== S U B R O U T I N E =======================================
.text:004171B0
.text:004171B0 ; Attributes: thunk
.text:004171B0
.text:004171B0 ; int open(const char *FileName, int OpenFlag, ...)
.text:004171B0 _open           proc near               ; CODE XREF: sub_414E80:loc_415210↑p
.text:004171B0
.text:004171B0 FileName        = dword ptr  4
.text:004171B0 OpenFlag        = dword ptr  8
.text:004171B0
.text:004171B0                 jmp     ds:__imp__open
.text:004171B0 _open           endp
.text:004171B0
.text:004171B0 ; ---------------------------------------------------------------------------
.text:004171B6                 align 10h
.text:004171C0
.text:004171C0 ; =============== S U B R O U T I N E =======================================
.text:004171C0
.text:004171C0 ; Attributes: noreturn thunk
.text:004171C0
.text:004171C0 _assert         proc near               ; CODE XREF: sub_414E80+414↑p
.text:004171C0                 jmp     ds:__imp__assert
.text:004171C0 _assert         endp
.text:004171C0
.text:004171C0 ; ---------------------------------------------------------------------------
.text:004171C6                 align 10h
.text:004171D0
.text:004171D0 ; =============== S U B R O U T I N E =======================================
.text:004171D0
.text:004171D0 ; Attributes: thunk
.text:004171D0
.text:004171D0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004171D0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004171D0
.text:004171D0 lpTopLevelExceptionFilter= dword ptr  4
.text:004171D0
.text:004171D0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004171D0 SetUnhandledExceptionFilter endp
.text:004171D0
.text:004171D0 ; ---------------------------------------------------------------------------
.text:004171D6                 align 10h
.text:004171E0
.text:004171E0 ; =============== S U B R O U T I N E =======================================
.text:004171E0
.text:004171E0 ; Attributes: noreturn thunk
.text:004171E0
.text:004171E0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004171E0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004171E0
.text:004171E0 uExitCode       = dword ptr  4
.text:004171E0
.text:004171E0                 jmp     ds:__imp_ExitProcess
.text:004171E0 ExitProcess     endp
.text:004171E0
.text:004171E0 ; ---------------------------------------------------------------------------
.text:004171E6                 align 10h
.text:004171F0
.text:004171F0 ; =============== S U B R O U T I N E =======================================
.text:004171F0
.text:004171F0 ; Attributes: thunk
.text:004171F0
.text:004171F0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:004171F0 CreateFileA     proc near               ; CODE XREF: sub_40E2E0+4C↑p
.text:004171F0                                         ; sub_40E610+3146↑p ...
.text:004171F0
.text:004171F0 lpFileName      = dword ptr  4
.text:004171F0 dwDesiredAccess = dword ptr  8
.text:004171F0 dwShareMode     = dword ptr  0Ch
.text:004171F0 lpSecurityAttributes= dword ptr  10h
.text:004171F0 dwCreationDisposition= dword ptr  14h
.text:004171F0 dwFlagsAndAttributes= dword ptr  18h
.text:004171F0 hTemplateFile   = dword ptr  1Ch
.text:004171F0
.text:004171F0                 jmp     ds:__imp_CreateFileA
.text:004171F0 CreateFileA     endp
.text:004171F0
.text:004171F0 ; ---------------------------------------------------------------------------
.text:004171F6                 align 10h
.text:00417200
.text:00417200 ; =============== S U B R O U T I N E =======================================
.text:00417200
.text:00417200 ; Attributes: thunk
.text:00417200
.text:00417200 ; BOOL __stdcall BackupWrite(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext)
.text:00417200 BackupWrite     proc near               ; CODE XREF: sub_40E2E0+F8↑p
.text:00417200                                         ; sub_40E2E0+13A↑p ...
.text:00417200
.text:00417200 hFile           = dword ptr  4
.text:00417200 lpBuffer        = dword ptr  8
.text:00417200 nNumberOfBytesToWrite= dword ptr  0Ch
.text:00417200 lpNumberOfBytesWritten= dword ptr  10h
.text:00417200 bAbort          = dword ptr  14h
.text:00417200 bProcessSecurity= dword ptr  18h
.text:00417200 lpContext       = dword ptr  1Ch
.text:00417200
.text:00417200                 jmp     ds:__imp_BackupWrite
.text:00417200 BackupWrite     endp
.text:00417200
.text:00417200 ; ---------------------------------------------------------------------------
.text:00417206                 align 10h
.text:00417210
.text:00417210 ; =============== S U B R O U T I N E =======================================
.text:00417210
.text:00417210 ; Attributes: thunk
.text:00417210
.text:00417210 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00417210 CloseHandle     proc near               ; CODE XREF: sub_40E2E0+182↑p
.text:00417210                                         ; sub_40E2E0:loc_40E47A↑p ...
.text:00417210
.text:00417210 hObject         = dword ptr  4
.text:00417210
.text:00417210                 jmp     ds:__imp_CloseHandle
.text:00417210 CloseHandle     endp
.text:00417210
.text:00417210 ; ---------------------------------------------------------------------------
.text:00417216                 align 10h
.text:00417220
.text:00417220 ; =============== S U B R O U T I N E =======================================
.text:00417220
.text:00417220 ; Attributes: thunk
.text:00417220
.text:00417220 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00417220 LoadLibraryA    proc near               ; CODE XREF: sub_40E4C0+33↑p
.text:00417220                                         ; sub_40FE70+13↑p ...
.text:00417220
.text:00417220 lpLibFileName   = dword ptr  4
.text:00417220
.text:00417220                 jmp     ds:__imp_LoadLibraryA
.text:00417220 LoadLibraryA    endp
.text:00417220
.text:00417220 ; ---------------------------------------------------------------------------
.text:00417226                 align 10h
.text:00417230
.text:00417230 ; =============== S U B R O U T I N E =======================================
.text:00417230
.text:00417230 ; Attributes: thunk
.text:00417230
.text:00417230 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00417230 GetProcAddress  proc near               ; CODE XREF: sub_40E4C0+4C↑p
.text:00417230                                         ; .text:0040EDD1↑p ...
.text:00417230
.text:00417230 hModule         = dword ptr  4
.text:00417230 lpProcName      = dword ptr  8
.text:00417230
.text:00417230                 jmp     ds:__imp_GetProcAddress
.text:00417230 GetProcAddress  endp
.text:00417230
.text:00417230 ; ---------------------------------------------------------------------------
.text:00417236                 align 10h
.text:00417240
.text:00417240 ; =============== S U B R O U T I N E =======================================
.text:00417240
.text:00417240 ; Attributes: thunk
.text:00417240
.text:00417240 ; BOOL __stdcall CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
.text:00417240 CopyFileA       proc near               ; CODE XREF: sub_40E4C0+C2↑p
.text:00417240
.text:00417240 lpExistingFileName= dword ptr  4
.text:00417240 lpNewFileName   = dword ptr  8
.text:00417240 bFailIfExists   = dword ptr  0Ch
.text:00417240
.text:00417240                 jmp     ds:__imp_CopyFileA
.text:00417240 CopyFileA       endp
.text:00417240
.text:00417240 ; ---------------------------------------------------------------------------
.text:00417246                 align 10h
.text:00417250
.text:00417250 ; =============== S U B R O U T I N E =======================================
.text:00417250
.text:00417250 ; Attributes: thunk
.text:00417250
.text:00417250 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00417250 FindFirstFileA  proc near               ; CODE XREF: _win32_longpath+CA↑p
.text:00417250                                         ; sub_40EEE0+1AC↑p ...
.text:00417250
.text:00417250 lpFileName      = dword ptr  4
.text:00417250 lpFindFileData  = dword ptr  8
.text:00417250
.text:00417250                 jmp     ds:__imp_FindFirstFileA
.text:00417250 FindFirstFileA  endp
.text:00417250
.text:00417250 ; ---------------------------------------------------------------------------
.text:00417256                 align 10h
.text:00417260
.text:00417260 ; =============== S U B R O U T I N E =======================================
.text:00417260
.text:00417260 ; Attributes: thunk
.text:00417260
.text:00417260 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00417260 FindClose       proc near               ; CODE XREF: _win32_longpath+144↑p
.text:00417260                                         ; _win32_longpath+185↑p ...
.text:00417260
.text:00417260 hFindFile       = dword ptr  4
.text:00417260
.text:00417260                 jmp     ds:__imp_FindClose
.text:00417260 FindClose       endp
.text:00417260
.text:00417260 ; ---------------------------------------------------------------------------
.text:00417266                 align 10h
.text:00417270
.text:00417270 ; =============== S U B R O U T I N E =======================================
.text:00417270
.text:00417270 ; Attributes: thunk
.text:00417270
.text:00417270 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00417270 GetModuleFileNameA proc near            ; CODE XREF: sub_40EBD0+1C↑p
.text:00417270
.text:00417270 hModule         = dword ptr  4
.text:00417270 lpFilename      = dword ptr  8
.text:00417270 nSize           = dword ptr  0Ch
.text:00417270
.text:00417270                 jmp     ds:__imp_GetModuleFileNameA
.text:00417270 GetModuleFileNameA endp
.text:00417270
.text:00417270 ; ---------------------------------------------------------------------------
.text:00417276                 align 10h
.text:00417280
.text:00417280 ; =============== S U B R O U T I N E =======================================
.text:00417280
.text:00417280 ; Attributes: thunk
.text:00417280
.text:00417280 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00417280 GetModuleHandleA proc near              ; CODE XREF: .text:0040EDBE↑p
.text:00417280                                         ; sub_40FD00+18↑p ...
.text:00417280
.text:00417280 lpModuleName    = dword ptr  4
.text:00417280
.text:00417280                 jmp     ds:__imp_GetModuleHandleA
.text:00417280 GetModuleHandleA endp
.text:00417280
.text:00417280 ; ---------------------------------------------------------------------------
.text:00417286                 align 10h
.text:00417290
.text:00417290 ; =============== S U B R O U T I N E =======================================
.text:00417290
.text:00417290 ; Attributes: thunk
.text:00417290
.text:00417290 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00417290 GetShortPathNameA proc near             ; CODE XREF: .text:0040EE56↑p
.text:00417290                                         ; .text:0040EE80↑p
.text:00417290
.text:00417290 lpszLongPath    = dword ptr  4
.text:00417290 lpszShortPath   = dword ptr  8
.text:00417290 cchBuffer       = dword ptr  0Ch
.text:00417290
.text:00417290                 jmp     ds:__imp_GetShortPathNameA
.text:00417290 GetShortPathNameA endp
.text:00417290
.text:00417290 ; ---------------------------------------------------------------------------
.text:00417296                 align 10h
.text:004172A0
.text:004172A0 ; =============== S U B R O U T I N E =======================================
.text:004172A0
.text:004172A0 ; Attributes: thunk
.text:004172A0
.text:004172A0 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:004172A0 FindNextFileA   proc near               ; CODE XREF: sub_40EEE0+36↑p
.text:004172A0                                         ; sub_40FE70+FF↑p
.text:004172A0
.text:004172A0 hFindFile       = dword ptr  4
.text:004172A0 lpFindFileData  = dword ptr  8
.text:004172A0
.text:004172A0                 jmp     ds:__imp_FindNextFileA
.text:004172A0 FindNextFileA   endp
.text:004172A0
.text:004172A0 ; ---------------------------------------------------------------------------
.text:004172A6                 align 10h
.text:004172B0
.text:004172B0 ; =============== S U B R O U T I N E =======================================
.text:004172B0
.text:004172B0 ; Attributes: thunk
.text:004172B0
.text:004172B0 ; DWORD __stdcall GetLastError()
.text:004172B0 GetLastError    proc near               ; CODE XREF: sub_40EEE0:loc_40F02B↑p
.text:004172B0                                         ; sub_40FCA0+3↑p ...
.text:004172B0                 jmp     ds:__imp_GetLastError
.text:004172B0 GetLastError    endp
.text:004172B0
.text:004172B0 ; ---------------------------------------------------------------------------
.text:004172B6                 align 10h
.text:004172C0
.text:004172C0 ; =============== S U B R O U T I N E =======================================
.text:004172C0
.text:004172C0 ; Attributes: thunk
.text:004172C0
.text:004172C0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:004172C0 GetFileAttributesA proc near            ; CODE XREF: sub_40F0F0+13↑p
.text:004172C0                                         ; sub_40F0F0+166↑p ...
.text:004172C0
.text:004172C0 lpFileName      = dword ptr  4
.text:004172C0
.text:004172C0                 jmp     ds:__imp_GetFileAttributesA
.text:004172C0 GetFileAttributesA endp
.text:004172C0
.text:004172C0 ; ---------------------------------------------------------------------------
.text:004172C6                 align 10h
.text:004172D0
.text:004172D0 ; =============== S U B R O U T I N E =======================================
.text:004172D0
.text:004172D0 ; Attributes: thunk
.text:004172D0
.text:004172D0 ; BOOL __stdcall SetFileAttributesA(LPCSTR lpFileName, DWORD dwFileAttributes)
.text:004172D0 SetFileAttributesA proc near            ; CODE XREF: sub_40F0F0+2A↑p
.text:004172D0                                         ; sub_40F0F0+178↑p
.text:004172D0
.text:004172D0 lpFileName      = dword ptr  4
.text:004172D0 dwFileAttributes= dword ptr  8
.text:004172D0
.text:004172D0                 jmp     ds:__imp_SetFileAttributesA
.text:004172D0 SetFileAttributesA endp
.text:004172D0
.text:004172D0 ; ---------------------------------------------------------------------------
.text:004172D6                 align 10h
.text:004172E0
.text:004172E0 ; =============== S U B R O U T I N E =======================================
.text:004172E0
.text:004172E0 ; Attributes: thunk
.text:004172E0
.text:004172E0 ; BOOL __stdcall AreFileApisANSI()
.text:004172E0 AreFileApisANSI proc near               ; CODE XREF: sub_40F0F0+E3↑p
.text:004172E0                                         ; sub_4126C0+89↑p
.text:004172E0                 jmp     ds:__imp_AreFileApisANSI
.text:004172E0 AreFileApisANSI endp
.text:004172E0
.text:004172E0 ; ---------------------------------------------------------------------------
.text:004172E6                 align 10h
.text:004172F0
.text:004172F0 ; =============== S U B R O U T I N E =======================================
.text:004172F0
.text:004172F0 ; Attributes: thunk
.text:004172F0
.text:004172F0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:004172F0 MultiByteToWideChar proc near           ; CODE XREF: sub_40F0F0+117↑p
.text:004172F0                                         ; sub_4126C0+BD↑p
.text:004172F0
.text:004172F0 CodePage        = dword ptr  4
.text:004172F0 dwFlags         = dword ptr  8
.text:004172F0 lpMultiByteStr  = dword ptr  0Ch
.text:004172F0 cbMultiByte     = dword ptr  10h
.text:004172F0 lpWideCharStr   = dword ptr  14h
.text:004172F0 cchWideChar     = dword ptr  18h
.text:004172F0
.text:004172F0                 jmp     ds:__imp_MultiByteToWideChar
.text:004172F0 MultiByteToWideChar endp
.text:004172F0
.text:004172F0 ; ---------------------------------------------------------------------------
.text:004172F6                 align 10h
.text:00417300
.text:00417300 ; =============== S U B R O U T I N E =======================================
.text:00417300
.text:00417300 ; Attributes: thunk
.text:00417300
.text:00417300 ; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
.text:00417300 DeleteFileA     proc near               ; CODE XREF: sub_40F3D0+50↑p
.text:00417300
.text:00417300 lpFileName      = dword ptr  4
.text:00417300
.text:00417300                 jmp     ds:__imp_DeleteFileA
.text:00417300 DeleteFileA     endp
.text:00417300
.text:00417300 ; ---------------------------------------------------------------------------
.text:00417306                 align 10h
.text:00417310
.text:00417310 ; =============== S U B R O U T I N E =======================================
.text:00417310
.text:00417310 ; Attributes: thunk
.text:00417310
.text:00417310 ; BOOL __stdcall MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.text:00417310 MoveFileA       proc near               ; CODE XREF: sub_40F540+36↑p
.text:00417310
.text:00417310 lpExistingFileName= dword ptr  4
.text:00417310 lpNewFileName   = dword ptr  8
.text:00417310
.text:00417310                 jmp     ds:__imp_MoveFileA
.text:00417310 MoveFileA       endp
.text:00417310
.text:00417310 ; ---------------------------------------------------------------------------
.text:00417316                 align 10h
.text:00417320
.text:00417320 ; =============== S U B R O U T I N E =======================================
.text:00417320
.text:00417320 ; Attributes: thunk
.text:00417320
.text:00417320 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00417320 GetFullPathNameA proc near              ; CODE XREF: sub_40F8E0+45↑p
.text:00417320                                         ; sub_40F8E0+ED↑p
.text:00417320
.text:00417320 lpFileName      = dword ptr  4
.text:00417320 nBufferLength   = dword ptr  8
.text:00417320 lpBuffer        = dword ptr  0Ch
.text:00417320 lpFilePart      = dword ptr  10h
.text:00417320
.text:00417320                 jmp     ds:__imp_GetFullPathNameA
.text:00417320 GetFullPathNameA endp
.text:00417320
.text:00417320 ; ---------------------------------------------------------------------------
.text:00417326                 align 10h
.text:00417330
.text:00417330 ; =============== S U B R O U T I N E =======================================
.text:00417330
.text:00417330 ; Attributes: thunk
.text:00417330
.text:00417330 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00417330 FreeLibrary     proc near               ; CODE XREF: sub_40FD00+A4↑p
.text:00417330                                         ; sub_40FE70+11D↑p ...
.text:00417330
.text:00417330 hLibModule      = dword ptr  4
.text:00417330
.text:00417330                 jmp     ds:__imp_FreeLibrary
.text:00417330 FreeLibrary     endp
.text:00417330
.text:00417330 ; ---------------------------------------------------------------------------
.text:00417336                 align 10h
.text:00417340
.text:00417340 ; =============== S U B R O U T I N E =======================================
.text:00417340
.text:00417340 ; Attributes: thunk
.text:00417340
.text:00417340 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00417340 GetFileType     proc near               ; CODE XREF: sub_40FFF0+43↑p
.text:00417340                                         ; .text:00410CAA↑p
.text:00417340
.text:00417340 hFile           = dword ptr  4
.text:00417340
.text:00417340                 jmp     ds:__imp_GetFileType
.text:00417340 GetFileType     endp
.text:00417340
.text:00417340 ; ---------------------------------------------------------------------------
.text:00417346                 align 10h
.text:00417350
.text:00417350 ; =============== S U B R O U T I N E =======================================
.text:00417350
.text:00417350 ; Attributes: thunk
.text:00417350
.text:00417350 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00417350 GetFileInformationByHandle proc near    ; CODE XREF: sub_40FFF0+69↑p
.text:00417350
.text:00417350 hFile           = dword ptr  4
.text:00417350 lpFileInformation= dword ptr  8
.text:00417350
.text:00417350                 jmp     ds:__imp_GetFileInformationByHandle
.text:00417350 GetFileInformationByHandle endp
.text:00417350
.text:00417350 ; ---------------------------------------------------------------------------
.text:00417356                 align 10h
.text:00417360
.text:00417360 ; =============== S U B R O U T I N E =======================================
.text:00417360
.text:00417360 ; Attributes: thunk
.text:00417360
.text:00417360 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00417360 GetFileSize     proc near               ; CODE XREF: sub_40FFF0+3F2↑p
.text:00417360
.text:00417360 hFile           = dword ptr  4
.text:00417360 lpFileSizeHigh  = dword ptr  8
.text:00417360
.text:00417360                 jmp     ds:__imp_GetFileSize
.text:00417360 GetFileSize     endp
.text:00417360
.text:00417360 ; ---------------------------------------------------------------------------
.text:00417366                 align 10h
.text:00417370
.text:00417370 ; =============== S U B R O U T I N E =======================================
.text:00417370
.text:00417370 ; Attributes: thunk
.text:00417370
.text:00417370 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00417370 PeekNamedPipe   proc near               ; CODE XREF: sub_40FFF0+439↑p
.text:00417370
.text:00417370 hNamedPipe      = dword ptr  4
.text:00417370 lpBuffer        = dword ptr  8
.text:00417370 nBufferSize     = dword ptr  0Ch
.text:00417370 lpBytesRead     = dword ptr  10h
.text:00417370 lpTotalBytesAvail= dword ptr  14h
.text:00417370 lpBytesLeftThisMessage= dword ptr  18h
.text:00417370
.text:00417370                 jmp     ds:__imp_PeekNamedPipe
.text:00417370 PeekNamedPipe   endp
.text:00417370
.text:00417370 ; ---------------------------------------------------------------------------
.text:00417376                 align 10h
.text:00417380
.text:00417380 ; =============== S U B R O U T I N E =======================================
.text:00417380
.text:00417380 ; Attributes: thunk
.text:00417380
.text:00417380 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00417380 GetDriveTypeA   proc near               ; CODE XREF: sub_4104C0+4C↑p
.text:00417380
.text:00417380 lpRootPathName  = dword ptr  4
.text:00417380
.text:00417380                 jmp     ds:__imp_GetDriveTypeA
.text:00417380 GetDriveTypeA   endp
.text:00417380
.text:00417380 ; ---------------------------------------------------------------------------
.text:00417386                 align 10h
.text:00417390
.text:00417390 ; =============== S U B R O U T I N E =======================================
.text:00417390
.text:00417390 ; Attributes: thunk
.text:00417390
.text:00417390 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00417390 GetVolumeInformationA proc near         ; CODE XREF: sub_4109C0+64↑p
.text:00417390                                         ; .text:00410F6C↑p ...
.text:00417390
.text:00417390 lpRootPathName  = dword ptr  4
.text:00417390 lpVolumeNameBuffer= dword ptr  8
.text:00417390 nVolumeNameSize = dword ptr  0Ch
.text:00417390 lpVolumeSerialNumber= dword ptr  10h
.text:00417390 lpMaximumComponentLength= dword ptr  14h
.text:00417390 lpFileSystemFlags= dword ptr  18h
.text:00417390 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00417390 nFileSystemNameSize= dword ptr  20h
.text:00417390
.text:00417390                 jmp     ds:__imp_GetVolumeInformationA
.text:00417390 GetVolumeInformationA endp
.text:00417390
.text:00417390 ; ---------------------------------------------------------------------------
.text:00417396                 align 10h
.text:004173A0
.text:004173A0 ; =============== S U B R O U T I N E =======================================
.text:004173A0
.text:004173A0 ; Attributes: thunk
.text:004173A0
.text:004173A0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:004173A0 SetErrorMode    proc near               ; CODE XREF: sub_40E610+3196↑p
.text:004173A0                                         ; sub_412310+57↑p ...
.text:004173A0
.text:004173A0 uMode           = dword ptr  4
.text:004173A0
.text:004173A0                 jmp     ds:__imp_SetErrorMode
.text:004173A0 SetErrorMode    endp
.text:004173A0
.text:004173A0 ; ---------------------------------------------------------------------------
.text:004173A6                 align 10h
.text:004173B0
.text:004173B0 ; =============== S U B R O U T I N E =======================================
.text:004173B0
.text:004173B0 ; Attributes: thunk
.text:004173B0
.text:004173B0 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:004173B0 lstrcmpiA       proc near               ; CODE XREF: .text:00411CAB↑p
.text:004173B0                                         ; .text:00411CC2↑p ...
.text:004173B0
.text:004173B0 lpString1       = dword ptr  4
.text:004173B0 lpString2       = dword ptr  8
.text:004173B0
.text:004173B0                 jmp     ds:__imp_lstrcmpiA
.text:004173B0 lstrcmpiA       endp
.text:004173B0
.text:004173B0 ; ---------------------------------------------------------------------------
.text:004173B6                 align 10h
.text:004173C0
.text:004173C0 ; =============== S U B R O U T I N E =======================================
.text:004173C0
.text:004173C0 ; Attributes: thunk
.text:004173C0
.text:004173C0 ; DWORD __stdcall GetVersion()
.text:004173C0 GetVersion      proc near               ; CODE XREF: .text:00412033↑p
.text:004173C0                 jmp     ds:__imp_GetVersion
.text:004173C0 GetVersion      endp
.text:004173C0
.text:004173C0 ; ---------------------------------------------------------------------------
.text:004173C6                 align 10h
.text:004173D0
.text:004173D0 ; =============== S U B R O U T I N E =======================================
.text:004173D0
.text:004173D0 ; Attributes: thunk
.text:004173D0
.text:004173D0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:004173D0 GetVersionExA   proc near               ; CODE XREF: sub_4120C0+32↑p
.text:004173D0                                         ; sub_4120C0+20B↑p
.text:004173D0
.text:004173D0 lpVersionInformation= dword ptr  4
.text:004173D0
.text:004173D0                 jmp     ds:__imp_GetVersionExA
.text:004173D0 GetVersionExA   endp
.text:004173D0
.text:004173D0 ; ---------------------------------------------------------------------------
.text:004173D6                 align 10h
.text:004173E0
.text:004173E0 ; =============== S U B R O U T I N E =======================================
.text:004173E0
.text:004173E0 ; Attributes: thunk
.text:004173E0
.text:004173E0 ; DWORD __stdcall FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
.text:004173E0 FormatMessageA  proc near               ; CODE XREF: .text:0041241A↑p
.text:004173E0                                         ; .text:00412492↑p ...
.text:004173E0
.text:004173E0 dwFlags         = dword ptr  4
.text:004173E0 lpSource        = dword ptr  8
.text:004173E0 dwMessageId     = dword ptr  0Ch
.text:004173E0 dwLanguageId    = dword ptr  10h
.text:004173E0 lpBuffer        = dword ptr  14h
.text:004173E0 nSize           = dword ptr  18h
.text:004173E0 Arguments       = dword ptr  1Ch
.text:004173E0
.text:004173E0                 jmp     ds:__imp_FormatMessageA
.text:004173E0 FormatMessageA  endp
.text:004173E0
.text:004173E0 ; ---------------------------------------------------------------------------
.text:004173E6                 align 10h
.text:004173F0
.text:004173F0 ; =============== S U B R O U T I N E =======================================
.text:004173F0
.text:004173F0 ; Attributes: thunk
.text:004173F0
.text:004173F0 ; HLOCAL __stdcall LocalFree(HLOCAL hMem)
.text:004173F0 LocalFree       proc near               ; CODE XREF: .text:004124CA↑p
.text:004173F0                                         ; sub_4124E0+7D↑p ...
.text:004173F0
.text:004173F0 hMem            = dword ptr  4
.text:004173F0
.text:004173F0                 jmp     ds:__imp_LocalFree
.text:004173F0 LocalFree       endp
.text:004173F0
.text:004173F0 ; ---------------------------------------------------------------------------
.text:004173F6                 align 10h
.text:00417400
.text:00417400 ; =============== S U B R O U T I N E =======================================
.text:00417400
.text:00417400 ; Attributes: thunk
.text:00417400
.text:00417400 ; void __stdcall SetLastError(DWORD dwErrCode)
.text:00417400 SetLastError    proc near               ; CODE XREF: .text:004125D8↑p
.text:00417400
.text:00417400 dwErrCode       = dword ptr  4
.text:00417400
.text:00417400                 jmp     ds:__imp_SetLastError
.text:00417400 SetLastError    endp
.text:00417400
.text:00417400 ; ---------------------------------------------------------------------------
.text:00417406                 align 10h
.text:00417410
.text:00417410 ; =============== S U B R O U T I N E =======================================
.text:00417410
.text:00417410 ; Attributes: thunk
.text:00417410
.text:00417410 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00417410 lstrcpyA        proc near               ; CODE XREF: sub_4126C0+128↑p
.text:00417410
.text:00417410 lpString1       = dword ptr  4
.text:00417410 lpString2       = dword ptr  8
.text:00417410
.text:00417410                 jmp     ds:__imp_lstrcpyA
.text:00417410 lstrcpyA        endp
.text:00417410
.text:00417410 ; ---------------------------------------------------------------------------
.text:00417416                 align 10h
.text:00417420
.text:00417420 ; =============== S U B R O U T I N E =======================================
.text:00417420
.text:00417420 ; Attributes: thunk
.text:00417420
.text:00417420 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00417420 GetCurrentDirectoryA proc near          ; CODE XREF: .text:00413118↑p
.text:00417420                                         ; .text:00413134↑p ...
.text:00417420
.text:00417420 nBufferLength   = dword ptr  4
.text:00417420 lpBuffer        = dword ptr  8
.text:00417420
.text:00417420                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00417420 GetCurrentDirectoryA endp
.text:00417420
.text:00417420 ; ---------------------------------------------------------------------------
.text:00417426                 align 10h
.text:00417430
.text:00417430 ; =============== S U B R O U T I N E =======================================
.text:00417430
.text:00417430 ; Attributes: thunk
.text:00417430
.text:00417430 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00417430 DeviceIoControl proc near               ; CODE XREF: .text:004134CC↑p
.text:00417430                                         ; sub_413890+1E5↑p
.text:00417430
.text:00417430 hDevice         = dword ptr  4
.text:00417430 dwIoControlCode = dword ptr  8
.text:00417430 lpInBuffer      = dword ptr  0Ch
.text:00417430 nInBufferSize   = dword ptr  10h
.text:00417430 lpOutBuffer     = dword ptr  14h
.text:00417430 nOutBufferSize  = dword ptr  18h
.text:00417430 lpBytesReturned = dword ptr  1Ch
.text:00417430 lpOverlapped    = dword ptr  20h
.text:00417430
.text:00417430                 jmp     ds:__imp_DeviceIoControl
.text:00417430 DeviceIoControl endp
.text:00417430
.text:00417430 ; ---------------------------------------------------------------------------
.text:00417436                 align 10h
.text:00417440
.text:00417440 ; =============== S U B R O U T I N E =======================================
.text:00417440
.text:00417440 ; Attributes: thunk
.text:00417440
.text:00417440 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00417440 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00413823↑p
.text:00417440                                         ; sub_413890+7B↑p ...
.text:00417440
.text:00417440 lpRootPathName  = dword ptr  4
.text:00417440 lpSectorsPerCluster= dword ptr  8
.text:00417440 lpBytesPerSector= dword ptr  0Ch
.text:00417440 lpNumberOfFreeClusters= dword ptr  10h
.text:00417440 lpTotalNumberOfClusters= dword ptr  14h
.text:00417440
.text:00417440                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00417440 GetDiskFreeSpaceA endp
.text:00417440
.text:00417440 ; ---------------------------------------------------------------------------
.text:00417446                 align 10h
.text:00417450
.text:00417450 ; =============== S U B R O U T I N E =======================================
.text:00417450
.text:00417450 ; Attributes: thunk
.text:00417450
.text:00417450 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00417450 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:00413F7F↑p
.text:00417450                                         ; .text:00413FAE↑p ...
.text:00417450
.text:00417450 nBufferLength   = dword ptr  4
.text:00417450 lpBuffer        = dword ptr  8
.text:00417450
.text:00417450                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00417450 GetLogicalDriveStringsA endp
.text:00417450
.text:00417450 ; ---------------------------------------------------------------------------
.text:00417456                 align 10h
.text:00417460
.text:00417460 ; =============== S U B R O U T I N E =======================================
.text:00417460
.text:00417460 ; Attributes: thunk
.text:00417460
.text:00417460 ; HANDLE __stdcall GetProcessHeap()
.text:00417460 GetProcessHeap  proc near               ; CODE XREF: .text:00413F89↑p
.text:00417460                                         ; sub_414660+24↑p ...
.text:00417460                 jmp     ds:__imp_GetProcessHeap
.text:00417460 GetProcessHeap  endp
.text:00417460
.text:00417460 ; ---------------------------------------------------------------------------
.text:00417466                 align 10h
.text:00417470
.text:00417470 ; =============== S U B R O U T I N E =======================================
.text:00417470
.text:00417470 ; Attributes: thunk
.text:00417470
.text:00417470 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00417470 HeapAlloc       proc near               ; CODE XREF: .text:00413F9D↑p
.text:00417470                                         ; sub_414660+38↑p ...
.text:00417470
.text:00417470 hHeap           = dword ptr  4
.text:00417470 dwFlags         = dword ptr  8
.text:00417470 dwBytes         = dword ptr  0Ch
.text:00417470
.text:00417470                 jmp     ds:__imp_HeapAlloc
.text:00417470 HeapAlloc       endp
.text:00417470
.text:00417470 ; ---------------------------------------------------------------------------
.text:00417476                 align 10h
.text:00417480
.text:00417480 ; =============== S U B R O U T I N E =======================================
.text:00417480
.text:00417480 ; Attributes: thunk
.text:00417480
.text:00417480 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00417480 HeapFree        proc near               ; CODE XREF: .text:0041479D↑p
.text:00417480
.text:00417480 hHeap           = dword ptr  4
.text:00417480 dwFlags         = dword ptr  8
.text:00417480 lpMem           = dword ptr  0Ch
.text:00417480
.text:00417480                 jmp     ds:__imp_HeapFree
.text:00417480 HeapFree        endp
.text:00417480
.text:00417480 ; ---------------------------------------------------------------------------
.text:00417486                 align 10h
.text:00417490
.text:00417490 ; =============== S U B R O U T I N E =======================================
.text:00417490
.text:00417490 ; Attributes: thunk
.text:00417490
.text:00417490 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00417490 UnlockFile      proc near               ; CODE XREF: sub_414930+40↑p
.text:00417490
.text:00417490 hFile           = dword ptr  4
.text:00417490 dwFileOffsetLow = dword ptr  8
.text:00417490 dwFileOffsetHigh= dword ptr  0Ch
.text:00417490 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00417490 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00417490
.text:00417490                 jmp     ds:__imp_UnlockFile
.text:00417490 UnlockFile      endp
.text:00417490
.text:00417490 ; ---------------------------------------------------------------------------
.text:00417496                 align 10h
.text:004174A0
.text:004174A0 ; =============== S U B R O U T I N E =======================================
.text:004174A0
.text:004174A0 ; Attributes: thunk
.text:004174A0
.text:004174A0 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:004174A0 CreateDirectoryA proc near              ; CODE XREF: sub_4152B0+22↑p
.text:004174A0
.text:004174A0 lpPathName      = dword ptr  4
.text:004174A0 lpSecurityAttributes= dword ptr  8
.text:004174A0
.text:004174A0                 jmp     ds:__imp_CreateDirectoryA
.text:004174A0 CreateDirectoryA endp
.text:004174A0
.text:004174A0 ; ---------------------------------------------------------------------------
.text:004174A6                 align 10h
.text:004174B0
.text:004174B0 ; =============== S U B R O U T I N E =======================================
.text:004174B0
.text:004174B0 ; Attributes: thunk
.text:004174B0
.text:004174B0 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:004174B0 GetTimeZoneInformation proc near        ; CODE XREF: sub_4153B0+22↑p
.text:004174B0
.text:004174B0 lpTimeZoneInformation= dword ptr  4
.text:004174B0
.text:004174B0                 jmp     ds:__imp_GetTimeZoneInformation
.text:004174B0 GetTimeZoneInformation endp
.text:004174B0
.text:004174B0 ; ---------------------------------------------------------------------------
.text:004174B6                 align 10h
.text:004174C0
.text:004174C0 ; =============== S U B R O U T I N E =======================================
.text:004174C0
.text:004174C0 ; Attributes: thunk
.text:004174C0
.text:004174C0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:004174C0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_4153B0+4F↑p
.text:004174C0
.text:004174C0 lpSystemTimeAsFileTime= dword ptr  4
.text:004174C0
.text:004174C0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:004174C0 GetSystemTimeAsFileTime endp
.text:004174C0
.text:004174C0 ; ---------------------------------------------------------------------------
.text:004174C6                 align 10h
.text:004174D0
.text:004174D0 ; =============== S U B R O U T I N E =======================================
.text:004174D0
.text:004174D0 ; Attributes: thunk
.text:004174D0
.text:004174D0 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:004174D0 RegOpenKeyExA   proc near               ; CODE XREF: .text:00411C31↑p
.text:004174D0
.text:004174D0 hKey            = dword ptr  4
.text:004174D0 lpSubKey        = dword ptr  8
.text:004174D0 ulOptions       = dword ptr  0Ch
.text:004174D0 samDesired      = dword ptr  10h
.text:004174D0 phkResult       = dword ptr  14h
.text:004174D0
.text:004174D0                 jmp     ds:__imp_RegOpenKeyExA
.text:004174D0 RegOpenKeyExA   endp
.text:004174D0
.text:004174D0 ; ---------------------------------------------------------------------------
.text:004174D6                 align 10h
.text:004174E0
.text:004174E0 ; =============== S U B R O U T I N E =======================================
.text:004174E0
.text:004174E0 ; Attributes: thunk
.text:004174E0
.text:004174E0 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:004174E0 RegQueryValueExA proc near              ; CODE XREF: .text:00411C74↑p
.text:004174E0
.text:004174E0 hKey            = dword ptr  4
.text:004174E0 lpValueName     = dword ptr  8
.text:004174E0 lpReserved      = dword ptr  0Ch
.text:004174E0 lpType          = dword ptr  10h
.text:004174E0 lpData          = dword ptr  14h
.text:004174E0 lpcbData        = dword ptr  18h
.text:004174E0
.text:004174E0                 jmp     ds:__imp_RegQueryValueExA
.text:004174E0 RegQueryValueExA endp
.text:004174E0
.text:004174E0 ; ---------------------------------------------------------------------------
.text:004174E6                 align 10h
.text:004174F0
.text:004174F0 ; =============== S U B R O U T I N E =======================================
.text:004174F0
.text:004174F0 ; Attributes: thunk
.text:004174F0
.text:004174F0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:004174F0 RegCloseKey     proc near               ; CODE XREF: .text:00411C98↑p
.text:004174F0
.text:004174F0 hKey            = dword ptr  4
.text:004174F0
.text:004174F0                 jmp     ds:__imp_RegCloseKey
.text:004174F0 RegCloseKey     endp
.text:004174F0
.text:004174F0 ; ---------------------------------------------------------------------------
.text:004174F6                 db 2 dup(90h)
.text:004174F8                 dd 2 dup(0)
.text:00417500                 dd 21400h, 0
.text:00417508                 dd 0C0h, 46000000h
.text:00417510 ; const IID rclsid
.text:00417510 rclsid          dd 21401h               ; Data1
.text:00417510                                         ; DATA XREF: sub_40F0F0+72↑o
.text:00417510                                         ; sub_4126C0+4B↑o
.text:00417510                 dw 0                    ; Data2
.text:00417510                 dw 0                    ; Data3
.text:00417510                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00417520                 dd 214A0h, 0
.text:00417528                 dd 0C0h, 46000000h, 214A1h, 0
.text:00417538                 dd 0C0h, 46000000h, 214D0h, 0
.text:00417548                 dd 0C0h, 46000000h, 214D1h, 0
.text:00417558                 dd 0C0h, 46000000h, 214D2h, 0
.text:00417568                 dd 0C0h, 46000000h, 214E1h, 0
.text:00417578                 dd 0C0h, 46000000h, 214E2h, 0
.text:00417588                 dd 0C0h, 46000000h, 214E3h, 0
.text:00417598                 dd 0C0h, 46000000h, 214E4h, 0
.text:004175A8                 dd 0C0h, 46000000h, 21500h, 0
.text:004175B8                 dd 0C0h, 46000000h, 214E5h, 0
.text:004175C8                 dd 0C0h, 46000000h, 214E6h, 0
.text:004175D8                 dd 0C0h, 46000000h, 214E8h, 0
.text:004175E8                 dd 0C0h, 46000000h, 214E9h, 0
.text:004175F8                 dd 0C0h, 46000000h, 214EAh, 0
.text:00417608                 dd 0C0h, 46000000h, 214EBh, 0
.text:00417618                 dd 0C0h, 46000000h
.text:00417620 ; const IID riid
.text:00417620 riid            dd 214EEh               ; Data1
.text:00417620                                         ; DATA XREF: sub_40F0F0+52↑o
.text:00417620                                         ; sub_4126C0+2B↑o
.text:00417620                 dw 0                    ; Data2
.text:00417620                 dw 0                    ; Data3
.text:00417620                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00417630                 dd 214EFh, 0
.text:00417638                 dd 0C0h, 46000000h, 214F0h, 0
.text:00417648                 dd 0C0h, 46000000h, 214F1h, 0
.text:00417658                 dd 0C0h, 46000000h, 214F2h, 0
.text:00417668                 dd 0C0h, 46000000h, 214F3h, 0
.text:00417678                 dd 0C0h, 46000000h, 214F4h, 0
.text:00417688                 dd 0C0h, 46000000h, 214F5h, 0
.text:00417698                 dd 0C0h, 46000000h, 214F6h, 0
.text:004176A8                 dd 0C0h, 46000000h, 214F7h, 0
.text:004176B8                 dd 0C0h, 46000000h, 214F8h, 0
.text:004176C8                 dd 0C0h, 46000000h, 214F9h, 0
.text:004176D8                 dd 0C0h, 46000000h, 214FAh, 0
.text:004176E8                 dd 0C0h, 46000000h, 214FBh, 0
.text:004176F8                 dd 0C0h, 46000000h, 214FCh, 0
.text:00417708                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00417708                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00417708                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00417708                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00417708                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00417708                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00417708                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00417708                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00417708                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00417708                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:004177D8                 dd 0C0h, 46000000h, 2DF05h, 0
.text:004177E8                 dd 0C0h, 46000000h, 2DF06h, 0
.text:004177F8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00417808                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00417818                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00417818                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00417818                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00417818                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00417818                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00417818                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00417818                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:004178A0 dword_4178A0    dd 0FFFFFFFFh           ; DATA XREF: .text:00416A79↑r
.text:004178A0                                         ; .text:loc_416AA0↑r ...
.text:004178A4 dword_4178A4    dd 0                    ; DATA XREF: .text:loc_416AAC↑r
.text:004178A4                                         ; sub_416AD0:loc_416B1D↑r
.text:004178A8                 dd 0FFFFFFFFh
.text:004178AC dword_4178AC    dd 55h dup(0)           ; DATA XREF: .data:off_418104↓o
.text:00417A00                 dd 180h dup(?)
.text:00417A00 _text           ends
.text:00417A00
.data:00418000 ; Section 2. (virtual address 00018000)
.data:00418000 ; Virtual size                  : 00000120 (    288.)
.data:00418000 ; Section size in file          : 00000200 (    512.)
.data:00418000 ; Offset to raw data for section: 00016E00
.data:00418000 ; Flags C0000040: Data Readable Writable
.data:00418000 ; Alignment     : default
.data:00418000 ; ===========================================================================
.data:00418000
.data:00418000 ; Segment type: Pure data
.data:00418000 ; Segment permissions: Read/Write
.data:00418000 _data           segment para public 'DATA' use32
.data:00418000                 assume cs:_data
.data:00418000                 ;org 418000h
.data:00418000 dword_418000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00418000                                         ; sub_401080+CC↑r
.data:00418004 dword_418004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00418004                                         ; sub_401080+D4↑r
.data:00418008                 align 10h
.data:00418010 byte_418010     db 1                    ; DATA XREF: sub_401FB0:loc_402500↑w
.data:00418010                                         ; sub_401FB0:loc_402727↑r
.data:00418011                 align 10h
.data:00418020 dword_418020    dd 1                    ; DATA XREF: sub_401FB0:loc_40250C↑r
.data:00418020                                         ; sub_404310+3↑r ...
.data:00418024 dword_418024    dd 1                    ; DATA XREF: sub_404310+11↑r
.data:00418024                                         ; .text:004043B1↑r
.data:00418028 dword_418028    dd 3Fh                  ; DATA XREF: sub_404310+7D↑w
.data:00418028                                         ; .text:0040441D↑w
.data:0041802C                 align 10h
.data:00418030 ; char *Src
.data:00418030 Src             dd offset sub_404550    ; DATA XREF: sub_401FB0+5E3↑w
.data:00418030                                         ; sub_404560+13↑r ...
.data:00418034                 align 10h
.data:00418040 ; char *Buffer
.data:00418040 Buffer          dd offset aCopyrightC2005
.data:00418040                                         ; DATA XREF: sub_405110+DC↑r
.data:00418040                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00418044                 align 10h
.data:00418050 ; int off_418050
.data:00418050 off_418050      dd offset sub_405E60    ; DATA XREF: .text:004046F4↑r
.data:00418050                                         ; sub_404750+38↑r ...
.data:00418054                 align 10h
.data:00418060 ; int Code
.data:00418060 Code            dd 1                    ; DATA XREF: sub_405490+6D↑r
.data:00418060                                         ; sub_405490+9A↑r ...
.data:00418064                 align 10h
.data:00418070 dword_418070    dd 1                    ; DATA XREF: sub_4070B0+22↑r
.data:00418070                                         ; sub_4070B0+65↑r ...
.data:00418074 dword_418074    dd 100h                 ; DATA XREF: sub_4070B0+3F↑o
.data:00418074                                         ; sub_4070B0+1A2↑r ...
.data:00418078 off_418078      dd offset unk_4190B0    ; DATA XREF: sub_4070B0+1AA↑r
.data:0041807C ; void *off_41807C
.data:0041807C off_41807C      dd offset dword_418074  ; DATA XREF: sub_4070B0+39↑r
.data:0041807C                                         ; sub_4070B0+60↑w ...
.data:00418080 dword_418080    dd 0FA0h                ; DATA XREF: sub_4076F0:loc_40876B↑r
.data:00418080                                         ; sub_4076F0:loc_408919↑r ...
.data:00418084                 align 10h
.data:00418090 dword_418090    dd 200h                 ; DATA XREF: sub_40FFF0+2ED↑r
.data:00418090                                         ; sub_40FFF0+2F8↑r ...
.data:00418094 ; char *off_418094
.data:00418094 off_418094      dd offset aComExeBatCmd ; DATA XREF: sub_4104C0+3D3↑r
.data:00418094                                         ; sub_4104C0+400↑r ...
.data:00418094                                         ; ".com;.exe;.bat;.cmd"
.data:00418098                 align 10h
.data:004180A0 dword_4180A0    dd 1                    ; DATA XREF: .text:loc_411AE7↑r
.data:004180A0                                         ; sub_4120C0+202↑w
.data:004180A4                 align 10h
.data:004180B0 byte_4180B0     db 41h                  ; DATA XREF: sub_412F90+6B↑w
.data:004180B0                                         ; sub_412F90:loc_4130A4↑r
.data:004180B1                 align 10h
.data:004180C0 off_4180C0      dd offset aNotset       ; DATA XREF: .text:00413B5A↑r
.data:004180C0                                         ; .text:004147A2↑r
.data:004180C0                                         ; "notset"
.data:004180C4 off_4180C4      dd offset aNotset       ; DATA XREF: .text:00413B72↑r
.data:004180C4                                         ; .text:00413B94↑r ...
.data:004180C4                                         ; "notset"
.data:004180C8                 align 10h
.data:004180D0 dword_4180D0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004180D4                 align 10h
.data:004180E0 ; int Mode
.data:004180E0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004180E0                                         ; sub_401080+80↑r ...
.data:004180E4                 align 10h
.data:004180F0 dword_4180F0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004180F0                                         ; sub_401080+BA↑r
.data:004180F4                 align 10h
.data:00418100 dword_418100    dd 0                    ; DATA XREF: sub_416AD0+9↑r
.data:00418100                                         ; sub_416AD0+1D↑w
.data:00418104 off_418104      dd offset dword_4178AC  ; DATA XREF: sub_416A40+6↑r
.data:00418104                                         ; sub_416A40+17↑r ...
.data:00418108                 align 1000h
.data:00418108 _data           ends
.data:00418108
.bss:00419000 ; Section 3. (virtual address 00019000)
.bss:00419000 ; Virtual size                  : 00000750 (   1872.)
.bss:00419000 ; Section size in file          : 00000000 (      0.)
.bss:00419000 ; Offset to raw data for section: 00000000
.bss:00419000 ; Flags C0000080: Bss Readable Writable
.bss:00419000 ; Alignment     : default
.bss:00419000 ; ===========================================================================
.bss:00419000
.bss:00419000 ; Segment type: Uninitialized
.bss:00419000 ; Segment permissions: Read/Write
.bss:00419000 _bss            segment para public 'BSS' use32
.bss:00419000                 assume cs:_bss
.bss:00419000                 ;org 419000h
.bss:00419000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00419000 ; int dword_419000
.bss:00419000 dword_419000    dd ?                    ; DATA XREF: sub_401FB0:loc_4025A7↑w
.bss:00419000                                         ; sub_402C30+4B↑r ...
.bss:00419004                 align 10h
.bss:00419010 dword_419010    dd ?                    ; DATA XREF: sub_401FB0+5C6↑w
.bss:00419010                                         ; sub_401FB0+6C0↑w ...
.bss:00419014                 align 10h
.bss:00419020 byte_419020     db ?                    ; DATA XREF: sub_401FB0+B7↑w
.bss:00419020                                         ; sub_401FB0+434↑w ...
.bss:00419021                 align 10h
.bss:00419030 byte_419030     db ?                    ; DATA XREF: sub_401FB0+A9↑w
.bss:00419030                                         ; sub_401FB0+402↑w ...
.bss:00419031                 align 10h
.bss:00419040 byte_419040     db ?                    ; DATA XREF: sub_401FB0+B0↑w
.bss:00419040                                         ; sub_401FB0+3FB↑w ...
.bss:00419041                 align 10h
.bss:00419050 byte_419050     db ?                    ; DATA XREF: sub_401FB0+A2↑w
.bss:00419050                                         ; sub_401FB0+449↑w ...
.bss:00419051                 align 10h
.bss:00419060 byte_419060     db ?                    ; DATA XREF: sub_401FB0+9B↑w
.bss:00419060                                         ; sub_401FB0:loc_402370↑w ...
.bss:00419061                 align 10h
.bss:00419070 dword_419070    dd ?                    ; DATA XREF: sub_404310+9↑o
.bss:00419070                                         ; sub_404310+17↑w ...
.bss:00419074 dword_419074    dd ?                    ; DATA XREF: sub_404310+21↑w
.bss:00419074                                         ; .text:004043C9↑w
.bss:00419078 dword_419078    dd ?                    ; DATA XREF: sub_404310+77↑r
.bss:00419078                                         ; .text:00404417↑r
.bss:0041907C dword_41907C    dd ?                    ; DATA XREF: sub_404310+6B↑r
.bss:0041907C                                         ; .text:0040440B↑r
.bss:00419080                 db    ? ;
.bss:00419081                 db    ? ;
.bss:00419082                 db    ? ;
.bss:00419083                 db    ? ;
.bss:00419084                 db    ? ;
.bss:00419085                 db    ? ;
.bss:00419086                 db    ? ;
.bss:00419087                 db    ? ;
.bss:00419088                 db    ? ;
.bss:00419089                 db    ? ;
.bss:0041908A                 db    ? ;
.bss:0041908B                 db    ? ;
.bss:0041908C                 db    ? ;
.bss:0041908D                 db    ? ;
.bss:0041908E                 db    ? ;
.bss:0041908F                 db    ? ;
.bss:00419090                 db    ? ;
.bss:00419091                 db    ? ;
.bss:00419092                 db    ? ;
.bss:00419093                 db    ? ;
.bss:00419094                 db    ? ;
.bss:00419095                 db    ? ;
.bss:00419096                 db    ? ;
.bss:00419097                 db    ? ;
.bss:00419098                 db    ? ;
.bss:00419099                 db    ? ;
.bss:0041909A                 db    ? ;
.bss:0041909B                 db    ? ;
.bss:0041909C                 db    ? ;
.bss:0041909D                 db    ? ;
.bss:0041909E                 db    ? ;
.bss:0041909F                 db    ? ;
.bss:004190A0 ; char *dword_4190A0
.bss:004190A0 dword_4190A0    dd ?                    ; DATA XREF: .text:00405464↑w
.bss:004190A0                                         ; sub_405490+58↑r
.bss:004190A4                 align 10h
.bss:004190B0 unk_4190B0      db    ? ;               ; DATA XREF: sub_4070B0+100↑o
.bss:004190B0                                         ; .data:off_418078↑o
.bss:004190B1                 db    ? ;
.bss:004190B2                 db    ? ;
.bss:004190B3                 db    ? ;
.bss:004190B4                 db    ? ;
.bss:004190B5                 db    ? ;
.bss:004190B6                 db    ? ;
.bss:004190B7                 db    ? ;
.bss:004190B8                 db    ? ;
.bss:004190B9                 db    ? ;
.bss:004190BA                 db    ? ;
.bss:004190BB                 db    ? ;
.bss:004190BC                 db    ? ;
.bss:004190BD                 db    ? ;
.bss:004190BE                 db    ? ;
.bss:004190BF                 db    ? ;
.bss:004190C0                 db    ? ;
.bss:004190C1                 db    ? ;
.bss:004190C2                 db    ? ;
.bss:004190C3                 db    ? ;
.bss:004190C4                 db    ? ;
.bss:004190C5                 db    ? ;
.bss:004190C6                 db    ? ;
.bss:004190C7                 db    ? ;
.bss:004190C8                 db    ? ;
.bss:004190C9                 db    ? ;
.bss:004190CA                 db    ? ;
.bss:004190CB                 db    ? ;
.bss:004190CC                 db    ? ;
.bss:004190CD                 db    ? ;
.bss:004190CE                 db    ? ;
.bss:004190CF                 db    ? ;
.bss:004190D0                 db    ? ;
.bss:004190D1                 db    ? ;
.bss:004190D2                 db    ? ;
.bss:004190D3                 db    ? ;
.bss:004190D4                 db    ? ;
.bss:004190D5                 db    ? ;
.bss:004190D6                 db    ? ;
.bss:004190D7                 db    ? ;
.bss:004190D8                 db    ? ;
.bss:004190D9                 db    ? ;
.bss:004190DA                 db    ? ;
.bss:004190DB                 db    ? ;
.bss:004190DC                 db    ? ;
.bss:004190DD                 db    ? ;
.bss:004190DE                 db    ? ;
.bss:004190DF                 db    ? ;
.bss:004190E0                 db    ? ;
.bss:004190E1                 db    ? ;
.bss:004190E2                 db    ? ;
.bss:004190E3                 db    ? ;
.bss:004190E4                 db    ? ;
.bss:004190E5                 db    ? ;
.bss:004190E6                 db    ? ;
.bss:004190E7                 db    ? ;
.bss:004190E8                 db    ? ;
.bss:004190E9                 db    ? ;
.bss:004190EA                 db    ? ;
.bss:004190EB                 db    ? ;
.bss:004190EC                 db    ? ;
.bss:004190ED                 db    ? ;
.bss:004190EE                 db    ? ;
.bss:004190EF                 db    ? ;
.bss:004190F0                 db    ? ;
.bss:004190F1                 db    ? ;
.bss:004190F2                 db    ? ;
.bss:004190F3                 db    ? ;
.bss:004190F4                 db    ? ;
.bss:004190F5                 db    ? ;
.bss:004190F6                 db    ? ;
.bss:004190F7                 db    ? ;
.bss:004190F8                 db    ? ;
.bss:004190F9                 db    ? ;
.bss:004190FA                 db    ? ;
.bss:004190FB                 db    ? ;
.bss:004190FC                 db    ? ;
.bss:004190FD                 db    ? ;
.bss:004190FE                 db    ? ;
.bss:004190FF                 db    ? ;
.bss:00419100                 db    ? ;
.bss:00419101                 db    ? ;
.bss:00419102                 db    ? ;
.bss:00419103                 db    ? ;
.bss:00419104                 db    ? ;
.bss:00419105                 db    ? ;
.bss:00419106                 db    ? ;
.bss:00419107                 db    ? ;
.bss:00419108                 db    ? ;
.bss:00419109                 db    ? ;
.bss:0041910A                 db    ? ;
.bss:0041910B                 db    ? ;
.bss:0041910C                 db    ? ;
.bss:0041910D                 db    ? ;
.bss:0041910E                 db    ? ;
.bss:0041910F                 db    ? ;
.bss:00419110                 db    ? ;
.bss:00419111                 db    ? ;
.bss:00419112                 db    ? ;
.bss:00419113                 db    ? ;
.bss:00419114                 db    ? ;
.bss:00419115                 db    ? ;
.bss:00419116                 db    ? ;
.bss:00419117                 db    ? ;
.bss:00419118                 db    ? ;
.bss:00419119                 db    ? ;
.bss:0041911A                 db    ? ;
.bss:0041911B                 db    ? ;
.bss:0041911C                 db    ? ;
.bss:0041911D                 db    ? ;
.bss:0041911E                 db    ? ;
.bss:0041911F                 db    ? ;
.bss:00419120                 db    ? ;
.bss:00419121                 db    ? ;
.bss:00419122                 db    ? ;
.bss:00419123                 db    ? ;
.bss:00419124                 db    ? ;
.bss:00419125                 db    ? ;
.bss:00419126                 db    ? ;
.bss:00419127                 db    ? ;
.bss:00419128                 db    ? ;
.bss:00419129                 db    ? ;
.bss:0041912A                 db    ? ;
.bss:0041912B                 db    ? ;
.bss:0041912C                 db    ? ;
.bss:0041912D                 db    ? ;
.bss:0041912E                 db    ? ;
.bss:0041912F                 db    ? ;
.bss:00419130                 db    ? ;
.bss:00419131                 db    ? ;
.bss:00419132                 db    ? ;
.bss:00419133                 db    ? ;
.bss:00419134                 db    ? ;
.bss:00419135                 db    ? ;
.bss:00419136                 db    ? ;
.bss:00419137                 db    ? ;
.bss:00419138                 db    ? ;
.bss:00419139                 db    ? ;
.bss:0041913A                 db    ? ;
.bss:0041913B                 db    ? ;
.bss:0041913C                 db    ? ;
.bss:0041913D                 db    ? ;
.bss:0041913E                 db    ? ;
.bss:0041913F                 db    ? ;
.bss:00419140                 db    ? ;
.bss:00419141                 db    ? ;
.bss:00419142                 db    ? ;
.bss:00419143                 db    ? ;
.bss:00419144                 db    ? ;
.bss:00419145                 db    ? ;
.bss:00419146                 db    ? ;
.bss:00419147                 db    ? ;
.bss:00419148                 db    ? ;
.bss:00419149                 db    ? ;
.bss:0041914A                 db    ? ;
.bss:0041914B                 db    ? ;
.bss:0041914C                 db    ? ;
.bss:0041914D                 db    ? ;
.bss:0041914E                 db    ? ;
.bss:0041914F                 db    ? ;
.bss:00419150                 db    ? ;
.bss:00419151                 db    ? ;
.bss:00419152                 db    ? ;
.bss:00419153                 db    ? ;
.bss:00419154                 db    ? ;
.bss:00419155                 db    ? ;
.bss:00419156                 db    ? ;
.bss:00419157                 db    ? ;
.bss:00419158                 db    ? ;
.bss:00419159                 db    ? ;
.bss:0041915A                 db    ? ;
.bss:0041915B                 db    ? ;
.bss:0041915C                 db    ? ;
.bss:0041915D                 db    ? ;
.bss:0041915E                 db    ? ;
.bss:0041915F                 db    ? ;
.bss:00419160                 db    ? ;
.bss:00419161                 db    ? ;
.bss:00419162                 db    ? ;
.bss:00419163                 db    ? ;
.bss:00419164                 db    ? ;
.bss:00419165                 db    ? ;
.bss:00419166                 db    ? ;
.bss:00419167                 db    ? ;
.bss:00419168                 db    ? ;
.bss:00419169                 db    ? ;
.bss:0041916A                 db    ? ;
.bss:0041916B                 db    ? ;
.bss:0041916C                 db    ? ;
.bss:0041916D                 db    ? ;
.bss:0041916E                 db    ? ;
.bss:0041916F                 db    ? ;
.bss:00419170                 db    ? ;
.bss:00419171                 db    ? ;
.bss:00419172                 db    ? ;
.bss:00419173                 db    ? ;
.bss:00419174                 db    ? ;
.bss:00419175                 db    ? ;
.bss:00419176                 db    ? ;
.bss:00419177                 db    ? ;
.bss:00419178                 db    ? ;
.bss:00419179                 db    ? ;
.bss:0041917A                 db    ? ;
.bss:0041917B                 db    ? ;
.bss:0041917C                 db    ? ;
.bss:0041917D                 db    ? ;
.bss:0041917E                 db    ? ;
.bss:0041917F                 db    ? ;
.bss:00419180                 db    ? ;
.bss:00419181                 db    ? ;
.bss:00419182                 db    ? ;
.bss:00419183                 db    ? ;
.bss:00419184                 db    ? ;
.bss:00419185                 db    ? ;
.bss:00419186                 db    ? ;
.bss:00419187                 db    ? ;
.bss:00419188                 db    ? ;
.bss:00419189                 db    ? ;
.bss:0041918A                 db    ? ;
.bss:0041918B                 db    ? ;
.bss:0041918C                 db    ? ;
.bss:0041918D                 db    ? ;
.bss:0041918E                 db    ? ;
.bss:0041918F                 db    ? ;
.bss:00419190                 db    ? ;
.bss:00419191                 db    ? ;
.bss:00419192                 db    ? ;
.bss:00419193                 db    ? ;
.bss:00419194                 db    ? ;
.bss:00419195                 db    ? ;
.bss:00419196                 db    ? ;
.bss:00419197                 db    ? ;
.bss:00419198                 db    ? ;
.bss:00419199                 db    ? ;
.bss:0041919A                 db    ? ;
.bss:0041919B                 db    ? ;
.bss:0041919C                 db    ? ;
.bss:0041919D                 db    ? ;
.bss:0041919E                 db    ? ;
.bss:0041919F                 db    ? ;
.bss:004191A0                 db    ? ;
.bss:004191A1                 db    ? ;
.bss:004191A2                 db    ? ;
.bss:004191A3                 db    ? ;
.bss:004191A4                 db    ? ;
.bss:004191A5                 db    ? ;
.bss:004191A6                 db    ? ;
.bss:004191A7                 db    ? ;
.bss:004191A8                 db    ? ;
.bss:004191A9                 db    ? ;
.bss:004191AA                 db    ? ;
.bss:004191AB                 db    ? ;
.bss:004191AC                 db    ? ;
.bss:004191AD                 db    ? ;
.bss:004191AE                 db    ? ;
.bss:004191AF                 db    ? ;
.bss:004191B0 dword_4191B0    dd ?                    ; DATA XREF: .text:loc_406A41↑o
.bss:004191B0                                         ; .text:loc_406A60↑o ...
.bss:004191B4 dword_4191B4    dd ?                    ; DATA XREF: .text:loc_406AE0↑o
.bss:004191B4                                         ; .text:00406F68↑r ...
.bss:004191B8 dword_4191B8    dd ?                    ; DATA XREF: .text:00406F62↑r
.bss:004191B8                                         ; sub_407010+2C↑r
.bss:004191BC dword_4191BC    dd ?                    ; DATA XREF: .text:00406F56↑r
.bss:004191BC                                         ; sub_407010+22↑r
.bss:004191C0 dword_4191C0    dd ?                    ; DATA XREF: .text:00406F72↑r
.bss:004191C0                                         ; sub_407010+36↑r
.bss:004191C4 dword_4191C4    dd ?                    ; DATA XREF: .text:00406F82↑r
.bss:004191C4                                         ; sub_407010+4E↑r
.bss:004191C8 dword_4191C8    dd ?                    ; DATA XREF: .text:00406F9F↑r
.bss:004191C8                                         ; sub_407010+62↑r
.bss:004191CC dword_4191CC    dd ?                    ; DATA XREF: .text:00406F95↑r
.bss:004191CC                                         ; sub_407010+70↑r
.bss:004191D0 dword_4191D0    dd ?                    ; DATA XREF: .text:00406F78↑r
.bss:004191D0                                         ; sub_407010+7A↑r
.bss:004191D4                 align 10h
.bss:004191E0 dword_4191E0    dd ?                    ; DATA XREF: .text:004072A8↑r
.bss:004191E0                                         ; .text:loc_4072DA↑w ...
.bss:004191E4                 align 10h
.bss:004191F0 dword_4191F0    dd ?                    ; DATA XREF: .text:0040732F↑r
.bss:004191F0                                         ; .text:0040735D↑w ...
.bss:004191F4                 align 10h
.bss:00419200 unk_419200      db    ? ;               ; DATA XREF: .text:004072C5↑o
.bss:00419200                                         ; .text:004072FC↑o ...
.bss:00419201                 db    ? ;
.bss:00419202                 db    ? ;
.bss:00419203                 db    ? ;
.bss:00419204                 db    ? ;
.bss:00419205                 db    ? ;
.bss:00419206                 db    ? ;
.bss:00419207                 db    ? ;
.bss:00419208                 db    ? ;
.bss:00419209                 db    ? ;
.bss:0041920A                 db    ? ;
.bss:0041920B                 db    ? ;
.bss:0041920C                 db    ? ;
.bss:0041920D                 db    ? ;
.bss:0041920E                 db    ? ;
.bss:0041920F                 db    ? ;
.bss:00419210                 db    ? ;
.bss:00419211                 db    ? ;
.bss:00419212                 db    ? ;
.bss:00419213                 db    ? ;
.bss:00419214                 db    ? ;
.bss:00419215                 db    ? ;
.bss:00419216                 db    ? ;
.bss:00419217                 db    ? ;
.bss:00419218                 db    ? ;
.bss:00419219                 db    ? ;
.bss:0041921A                 db    ? ;
.bss:0041921B                 db    ? ;
.bss:0041921C                 db    ? ;
.bss:0041921D                 db    ? ;
.bss:0041921E                 db    ? ;
.bss:0041921F                 db    ? ;
.bss:00419220 unk_419220      db    ? ;               ; DATA XREF: .text:00407348↑o
.bss:00419220                                         ; .text:0040737F↑o ...
.bss:00419221                 db    ? ;
.bss:00419222                 db    ? ;
.bss:00419223                 db    ? ;
.bss:00419224                 db    ? ;
.bss:00419225                 db    ? ;
.bss:00419226                 db    ? ;
.bss:00419227                 db    ? ;
.bss:00419228                 db    ? ;
.bss:00419229                 db    ? ;
.bss:0041922A                 db    ? ;
.bss:0041922B                 db    ? ;
.bss:0041922C                 db    ? ;
.bss:0041922D                 db    ? ;
.bss:0041922E                 db    ? ;
.bss:0041922F                 db    ? ;
.bss:00419230                 db    ? ;
.bss:00419231                 db    ? ;
.bss:00419232                 db    ? ;
.bss:00419233                 db    ? ;
.bss:00419234                 db    ? ;
.bss:00419235                 db    ? ;
.bss:00419236                 db    ? ;
.bss:00419237                 db    ? ;
.bss:00419238                 db    ? ;
.bss:00419239                 db    ? ;
.bss:0041923A                 db    ? ;
.bss:0041923B                 db    ? ;
.bss:0041923C                 db    ? ;
.bss:0041923D                 db    ? ;
.bss:0041923E                 db    ? ;
.bss:0041923F                 db    ? ;
.bss:00419240 dword_419240    dd ?                    ; DATA XREF: sub_40A600+AB↑r
.bss:00419240                                         ; sub_40A600+334B↑w
.bss:00419244                 align 10h
.bss:00419250 byte_419250     db ?                    ; DATA XREF: sub_4076F0:loc_40815C↑r
.bss:00419250                                         ; sub_4076F0:loc_408188↑r ...
.bss:00419251                 db    ? ;
.bss:00419252                 db    ? ;
.bss:00419253                 db    ? ;
.bss:00419254                 db    ? ;
.bss:00419255                 db    ? ;
.bss:00419256                 db    ? ;
.bss:00419257                 db    ? ;
.bss:00419258                 db    ? ;
.bss:00419259                 db    ? ;
.bss:0041925A                 db    ? ;
.bss:0041925B                 db    ? ;
.bss:0041925C                 db    ? ;
.bss:0041925D                 db    ? ;
.bss:0041925E                 db    ? ;
.bss:0041925F                 db    ? ;
.bss:00419260                 db    ? ;
.bss:00419261                 db    ? ;
.bss:00419262                 db    ? ;
.bss:00419263                 db    ? ;
.bss:00419264                 db    ? ;
.bss:00419265                 db    ? ;
.bss:00419266                 db    ? ;
.bss:00419267                 db    ? ;
.bss:00419268                 db    ? ;
.bss:00419269                 db    ? ;
.bss:0041926A                 db    ? ;
.bss:0041926B                 db    ? ;
.bss:0041926C                 db    ? ;
.bss:0041926D                 db    ? ;
.bss:0041926E                 db    ? ;
.bss:0041926F                 db    ? ;
.bss:00419270                 db    ? ;
.bss:00419271                 db    ? ;
.bss:00419272                 db    ? ;
.bss:00419273                 db    ? ;
.bss:00419274                 db    ? ;
.bss:00419275                 db    ? ;
.bss:00419276                 db    ? ;
.bss:00419277                 db    ? ;
.bss:00419278                 db    ? ;
.bss:00419279                 db    ? ;
.bss:0041927A                 db    ? ;
.bss:0041927B                 db    ? ;
.bss:0041927C                 db    ? ;
.bss:0041927D                 db    ? ;
.bss:0041927E                 db    ? ;
.bss:0041927F                 db    ? ;
.bss:00419280                 db    ? ;
.bss:00419281                 db    ? ;
.bss:00419282                 db    ? ;
.bss:00419283                 db    ? ;
.bss:00419284                 db    ? ;
.bss:00419285                 db    ? ;
.bss:00419286                 db    ? ;
.bss:00419287                 db    ? ;
.bss:00419288                 db    ? ;
.bss:00419289                 db    ? ;
.bss:0041928A                 db    ? ;
.bss:0041928B                 db    ? ;
.bss:0041928C                 db    ? ;
.bss:0041928D                 db    ? ;
.bss:0041928E                 db    ? ;
.bss:0041928F                 db    ? ;
.bss:00419290                 db    ? ;
.bss:00419291                 db    ? ;
.bss:00419292                 db    ? ;
.bss:00419293                 db    ? ;
.bss:00419294                 db    ? ;
.bss:00419295                 db    ? ;
.bss:00419296                 db    ? ;
.bss:00419297                 db    ? ;
.bss:00419298                 db    ? ;
.bss:00419299                 db    ? ;
.bss:0041929A                 db    ? ;
.bss:0041929B                 db    ? ;
.bss:0041929C                 db    ? ;
.bss:0041929D                 db    ? ;
.bss:0041929E                 db    ? ;
.bss:0041929F                 db    ? ;
.bss:004192A0                 db    ? ;
.bss:004192A1                 db    ? ;
.bss:004192A2                 db    ? ;
.bss:004192A3                 db    ? ;
.bss:004192A4                 db    ? ;
.bss:004192A5                 db    ? ;
.bss:004192A6                 db    ? ;
.bss:004192A7                 db    ? ;
.bss:004192A8                 db    ? ;
.bss:004192A9                 db    ? ;
.bss:004192AA                 db    ? ;
.bss:004192AB                 db    ? ;
.bss:004192AC                 db    ? ;
.bss:004192AD                 db    ? ;
.bss:004192AE                 db    ? ;
.bss:004192AF byte_4192AF     db ?                    ; DATA XREF: sub_40A600+333F↑w
.bss:004192B0                 db    ? ;
.bss:004192B1                 db    ? ;
.bss:004192B2                 db    ? ;
.bss:004192B3                 db    ? ;
.bss:004192B4                 db    ? ;
.bss:004192B5                 db    ? ;
.bss:004192B6                 db    ? ;
.bss:004192B7                 db    ? ;
.bss:004192B8                 db    ? ;
.bss:004192B9                 db    ? ;
.bss:004192BA                 db    ? ;
.bss:004192BB                 db    ? ;
.bss:004192BC                 db    ? ;
.bss:004192BD                 db    ? ;
.bss:004192BE                 db    ? ;
.bss:004192BF                 db    ? ;
.bss:004192C0                 db    ? ;
.bss:004192C1                 db    ? ;
.bss:004192C2                 db    ? ;
.bss:004192C3                 db    ? ;
.bss:004192C4                 db    ? ;
.bss:004192C5                 db    ? ;
.bss:004192C6                 db    ? ;
.bss:004192C7                 db    ? ;
.bss:004192C8                 db    ? ;
.bss:004192C9                 db    ? ;
.bss:004192CA                 db    ? ;
.bss:004192CB                 db    ? ;
.bss:004192CC                 db    ? ;
.bss:004192CD                 db    ? ;
.bss:004192CE                 db    ? ;
.bss:004192CF                 db    ? ;
.bss:004192D0                 db    ? ;
.bss:004192D1                 db    ? ;
.bss:004192D2                 db    ? ;
.bss:004192D3                 db    ? ;
.bss:004192D4                 db    ? ;
.bss:004192D5                 db    ? ;
.bss:004192D6                 db    ? ;
.bss:004192D7                 db    ? ;
.bss:004192D8                 db    ? ;
.bss:004192D9                 db    ? ;
.bss:004192DA                 db    ? ;
.bss:004192DB                 db    ? ;
.bss:004192DC                 db    ? ;
.bss:004192DD                 db    ? ;
.bss:004192DE                 db    ? ;
.bss:004192DF                 db    ? ;
.bss:004192E0                 db    ? ;
.bss:004192E1                 db    ? ;
.bss:004192E2                 db    ? ;
.bss:004192E3                 db    ? ;
.bss:004192E4                 db    ? ;
.bss:004192E5                 db    ? ;
.bss:004192E6                 db    ? ;
.bss:004192E7                 db    ? ;
.bss:004192E8                 db    ? ;
.bss:004192E9                 db    ? ;
.bss:004192EA                 db    ? ;
.bss:004192EB                 db    ? ;
.bss:004192EC                 db    ? ;
.bss:004192ED                 db    ? ;
.bss:004192EE                 db    ? ;
.bss:004192EF                 db    ? ;
.bss:004192F0                 db    ? ;
.bss:004192F1                 db    ? ;
.bss:004192F2                 db    ? ;
.bss:004192F3                 db    ? ;
.bss:004192F4                 db    ? ;
.bss:004192F5                 db    ? ;
.bss:004192F6                 db    ? ;
.bss:004192F7                 db    ? ;
.bss:004192F8                 db    ? ;
.bss:004192F9                 db    ? ;
.bss:004192FA                 db    ? ;
.bss:004192FB                 db    ? ;
.bss:004192FC                 db    ? ;
.bss:004192FD                 db    ? ;
.bss:004192FE                 db    ? ;
.bss:004192FF                 db    ? ;
.bss:00419300                 db    ? ;
.bss:00419301                 db    ? ;
.bss:00419302                 db    ? ;
.bss:00419303                 db    ? ;
.bss:00419304                 db    ? ;
.bss:00419305                 db    ? ;
.bss:00419306                 db    ? ;
.bss:00419307                 db    ? ;
.bss:00419308                 db    ? ;
.bss:00419309                 db    ? ;
.bss:0041930A                 db    ? ;
.bss:0041930B                 db    ? ;
.bss:0041930C                 db    ? ;
.bss:0041930D                 db    ? ;
.bss:0041930E                 db    ? ;
.bss:0041930F                 db    ? ;
.bss:00419310                 db    ? ;
.bss:00419311                 db    ? ;
.bss:00419312                 db    ? ;
.bss:00419313                 db    ? ;
.bss:00419314                 db    ? ;
.bss:00419315                 db    ? ;
.bss:00419316                 db    ? ;
.bss:00419317                 db    ? ;
.bss:00419318                 db    ? ;
.bss:00419319                 db    ? ;
.bss:0041931A                 db    ? ;
.bss:0041931B                 db    ? ;
.bss:0041931C                 db    ? ;
.bss:0041931D                 db    ? ;
.bss:0041931E                 db    ? ;
.bss:0041931F                 db    ? ;
.bss:00419320                 db    ? ;
.bss:00419321                 db    ? ;
.bss:00419322                 db    ? ;
.bss:00419323                 db    ? ;
.bss:00419324                 db    ? ;
.bss:00419325                 db    ? ;
.bss:00419326                 db    ? ;
.bss:00419327                 db    ? ;
.bss:00419328                 db    ? ;
.bss:00419329                 db    ? ;
.bss:0041932A                 db    ? ;
.bss:0041932B                 db    ? ;
.bss:0041932C                 db    ? ;
.bss:0041932D                 db    ? ;
.bss:0041932E                 db    ? ;
.bss:0041932F                 db    ? ;
.bss:00419330                 db    ? ;
.bss:00419331                 db    ? ;
.bss:00419332                 db    ? ;
.bss:00419333                 db    ? ;
.bss:00419334                 db    ? ;
.bss:00419335                 db    ? ;
.bss:00419336                 db    ? ;
.bss:00419337                 db    ? ;
.bss:00419338                 db    ? ;
.bss:00419339                 db    ? ;
.bss:0041933A                 db    ? ;
.bss:0041933B                 db    ? ;
.bss:0041933C                 db    ? ;
.bss:0041933D                 db    ? ;
.bss:0041933E                 db    ? ;
.bss:0041933F                 db    ? ;
.bss:00419340                 db    ? ;
.bss:00419341                 db    ? ;
.bss:00419342                 db    ? ;
.bss:00419343                 db    ? ;
.bss:00419344                 db    ? ;
.bss:00419345                 db    ? ;
.bss:00419346                 db    ? ;
.bss:00419347                 db    ? ;
.bss:00419348                 db    ? ;
.bss:00419349                 db    ? ;
.bss:0041934A                 db    ? ;
.bss:0041934B                 db    ? ;
.bss:0041934C                 db    ? ;
.bss:0041934D                 db    ? ;
.bss:0041934E                 db    ? ;
.bss:0041934F                 db    ? ;
.bss:00419350 unk_419350      db    ? ;               ; DATA XREF: sub_4076F0+148↑o
.bss:00419350                                         ; sub_4076F0+153↑o ...
.bss:00419351                 db    ? ;
.bss:00419352                 db    ? ;
.bss:00419353                 db    ? ;
.bss:00419354                 db    ? ;
.bss:00419355                 db    ? ;
.bss:00419356                 db    ? ;
.bss:00419357                 db    ? ;
.bss:00419358                 db    ? ;
.bss:00419359                 db    ? ;
.bss:0041935A                 db    ? ;
.bss:0041935B                 db    ? ;
.bss:0041935C                 db    ? ;
.bss:0041935D                 db    ? ;
.bss:0041935E                 db    ? ;
.bss:0041935F                 db    ? ;
.bss:00419360 ; char *Str1
.bss:00419360 Str1            dd ?                    ; DATA XREF: sub_40E144:loc_40E17D↑w
.bss:00419360                                         ; sub_40E144:loc_40E2B0↑r
.bss:00419364                 align 10h
.bss:00419370 dword_419370    dd ?                    ; DATA XREF: sub_40E144+2D↑r
.bss:00419370                                         ; sub_40E144+3F↑w
.bss:00419374                 align 10h
.bss:00419380 dword_419380    dd ?                    ; DATA XREF: sub_4104C0+100↑r
.bss:00419380                                         ; sub_4104C0+308↑w
.bss:00419384                 align 10h
.bss:00419390 ; char *Str
.bss:00419390 Str             dd ?                    ; DATA XREF: sub_4104C0:loc_410824↑r
.bss:00419390                                         ; sub_4104C0+3B6↑r ...
.bss:00419394                 align 10h
.bss:004193A0 dword_4193A0    dd ?                    ; DATA XREF: sub_411FB0+8↑r
.bss:004193A0                                         ; sub_4120C0:loc_412142↑w ...
.bss:004193A4                 align 10h
.bss:004193B0 ; struct _OSVERSIONINFOA VersionInformation
.bss:004193B0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_4120C0:loc_4120E0↑o
.bss:004193B0                                         ; sub_4120C0+2C↑w ...
.bss:00419444 word_419444     dw ?                    ; DATA XREF: sub_4120C0:loc_412173↑r
.bss:00419446                 align 4
.bss:00419448 word_419448     dw ?                    ; DATA XREF: .text:loc_411B36↑r
.bss:00419448                                         ; .text:00411B64↑r ...
.bss:0041944A byte_41944A     db ?                    ; DATA XREF: .text:00411AF5↑r
.bss:0041944B                 align 10h
.bss:00419450 dword_419450    dd ?                    ; DATA XREF: sub_4120C0+6↑r
.bss:00419450                                         ; sub_4120C0+75↑w
.bss:00419454                 align 10h
.bss:00419460 dword_419460    dd ?                    ; DATA XREF: sub_412F90+1C↑r
.bss:00419460                                         ; sub_412F90+104↑w
.bss:00419464                 align 10h
.bss:00419470 dword_419470    dd ?                    ; DATA XREF: sub_412F90+B↑r
.bss:00419470                                         ; sub_412F90+71↑w
.bss:00419474                 align 10h
.bss:00419480 dword_419480    dd ?                    ; DATA XREF: sub_412F90+85↑r
.bss:00419480                                         ; sub_412F90+B9↑w
.bss:00419484 dword_419484    dd ?                    ; DATA XREF: sub_412F90+C4↑w
.bss:00419488 dword_419488    dd ?                    ; DATA XREF: sub_412F90+2E↑o
.bss:00419488                                         ; sub_412F90+CF↑w
.bss:0041948C dword_41948C    dd ?                    ; DATA XREF: sub_412F90+DA↑w
.bss:00419490                 db    ? ;
.bss:00419491                 db    ? ;
.bss:00419492                 db    ? ;
.bss:00419493                 db    ? ;
.bss:00419494                 db    ? ;
.bss:00419495                 db    ? ;
.bss:00419496                 db    ? ;
.bss:00419497                 db    ? ;
.bss:00419498                 db    ? ;
.bss:00419499                 db    ? ;
.bss:0041949A                 db    ? ;
.bss:0041949B                 db    ? ;
.bss:0041949C                 db    ? ;
.bss:0041949D                 db    ? ;
.bss:0041949E                 db    ? ;
.bss:0041949F                 db    ? ;
.bss:004194A0                 db    ? ;
.bss:004194A1                 db    ? ;
.bss:004194A2                 db    ? ;
.bss:004194A3                 db    ? ;
.bss:004194A4                 db    ? ;
.bss:004194A5                 db    ? ;
.bss:004194A6                 db    ? ;
.bss:004194A7                 db    ? ;
.bss:004194A8                 db    ? ;
.bss:004194A9                 db    ? ;
.bss:004194AA                 db    ? ;
.bss:004194AB                 db    ? ;
.bss:004194AC                 db    ? ;
.bss:004194AD                 db    ? ;
.bss:004194AE                 db    ? ;
.bss:004194AF                 db    ? ;
.bss:004194B0                 db    ? ;
.bss:004194B1                 db    ? ;
.bss:004194B2                 db    ? ;
.bss:004194B3                 db    ? ;
.bss:004194B4                 db    ? ;
.bss:004194B5                 db    ? ;
.bss:004194B6                 db    ? ;
.bss:004194B7                 db    ? ;
.bss:004194B8                 db    ? ;
.bss:004194B9                 db    ? ;
.bss:004194BA                 db    ? ;
.bss:004194BB                 db    ? ;
.bss:004194BC                 db    ? ;
.bss:004194BD                 db    ? ;
.bss:004194BE                 db    ? ;
.bss:004194BF                 db    ? ;
.bss:004194C0                 db    ? ;
.bss:004194C1                 db    ? ;
.bss:004194C2                 db    ? ;
.bss:004194C3                 db    ? ;
.bss:004194C4                 db    ? ;
.bss:004194C5                 db    ? ;
.bss:004194C6                 db    ? ;
.bss:004194C7                 db    ? ;
.bss:004194C8                 db    ? ;
.bss:004194C9                 db    ? ;
.bss:004194CA                 db    ? ;
.bss:004194CB                 db    ? ;
.bss:004194CC                 db    ? ;
.bss:004194CD                 db    ? ;
.bss:004194CE                 db    ? ;
.bss:004194CF                 db    ? ;
.bss:004194D0                 db    ? ;
.bss:004194D1                 db    ? ;
.bss:004194D2                 db    ? ;
.bss:004194D3                 db    ? ;
.bss:004194D4                 db    ? ;
.bss:004194D5                 db    ? ;
.bss:004194D6                 db    ? ;
.bss:004194D7                 db    ? ;
.bss:004194D8                 db    ? ;
.bss:004194D9                 db    ? ;
.bss:004194DA                 db    ? ;
.bss:004194DB                 db    ? ;
.bss:004194DC                 db    ? ;
.bss:004194DD                 db    ? ;
.bss:004194DE                 db    ? ;
.bss:004194DF                 db    ? ;
.bss:004194E0                 db    ? ;
.bss:004194E1                 db    ? ;
.bss:004194E2                 db    ? ;
.bss:004194E3                 db    ? ;
.bss:004194E4                 db    ? ;
.bss:004194E5                 db    ? ;
.bss:004194E6                 db    ? ;
.bss:004194E7                 db    ? ;
.bss:004194E8                 db    ? ;
.bss:004194E9                 db    ? ;
.bss:004194EA                 db    ? ;
.bss:004194EB                 db    ? ;
.bss:004194EC                 db    ? ;
.bss:004194ED                 db    ? ;
.bss:004194EE                 db    ? ;
.bss:004194EF                 db    ? ;
.bss:004194F0                 db    ? ;
.bss:004194F1                 db    ? ;
.bss:004194F2                 db    ? ;
.bss:004194F3                 db    ? ;
.bss:004194F4                 db    ? ;
.bss:004194F5                 db    ? ;
.bss:004194F6                 db    ? ;
.bss:004194F7                 db    ? ;
.bss:004194F8                 db    ? ;
.bss:004194F9                 db    ? ;
.bss:004194FA                 db    ? ;
.bss:004194FB                 db    ? ;
.bss:004194FC                 db    ? ;
.bss:004194FD                 db    ? ;
.bss:004194FE                 db    ? ;
.bss:004194FF                 db    ? ;
.bss:00419500                 db    ? ;
.bss:00419501                 db    ? ;
.bss:00419502                 db    ? ;
.bss:00419503                 db    ? ;
.bss:00419504                 db    ? ;
.bss:00419505                 db    ? ;
.bss:00419506                 db    ? ;
.bss:00419507                 db    ? ;
.bss:00419508                 db    ? ;
.bss:00419509                 db    ? ;
.bss:0041950A                 db    ? ;
.bss:0041950B                 db    ? ;
.bss:0041950C                 db    ? ;
.bss:0041950D                 db    ? ;
.bss:0041950E                 db    ? ;
.bss:0041950F                 db    ? ;
.bss:00419510                 db    ? ;
.bss:00419511                 db    ? ;
.bss:00419512                 db    ? ;
.bss:00419513                 db    ? ;
.bss:00419514                 db    ? ;
.bss:00419515                 db    ? ;
.bss:00419516                 db    ? ;
.bss:00419517                 db    ? ;
.bss:00419518                 db    ? ;
.bss:00419519                 db    ? ;
.bss:0041951A                 db    ? ;
.bss:0041951B                 db    ? ;
.bss:0041951C                 db    ? ;
.bss:0041951D                 db    ? ;
.bss:0041951E                 db    ? ;
.bss:0041951F                 db    ? ;
.bss:00419520                 db    ? ;
.bss:00419521                 db    ? ;
.bss:00419522                 db    ? ;
.bss:00419523                 db    ? ;
.bss:00419524                 db    ? ;
.bss:00419525                 db    ? ;
.bss:00419526                 db    ? ;
.bss:00419527                 db    ? ;
.bss:00419528                 db    ? ;
.bss:00419529                 db    ? ;
.bss:0041952A                 db    ? ;
.bss:0041952B                 db    ? ;
.bss:0041952C                 db    ? ;
.bss:0041952D                 db    ? ;
.bss:0041952E                 db    ? ;
.bss:0041952F                 db    ? ;
.bss:00419530                 db    ? ;
.bss:00419531                 db    ? ;
.bss:00419532                 db    ? ;
.bss:00419533                 db    ? ;
.bss:00419534                 db    ? ;
.bss:00419535                 db    ? ;
.bss:00419536                 db    ? ;
.bss:00419537                 db    ? ;
.bss:00419538                 db    ? ;
.bss:00419539                 db    ? ;
.bss:0041953A                 db    ? ;
.bss:0041953B                 db    ? ;
.bss:0041953C                 db    ? ;
.bss:0041953D                 db    ? ;
.bss:0041953E                 db    ? ;
.bss:0041953F                 db    ? ;
.bss:00419540                 db    ? ;
.bss:00419541                 db    ? ;
.bss:00419542                 db    ? ;
.bss:00419543                 db    ? ;
.bss:00419544                 db    ? ;
.bss:00419545                 db    ? ;
.bss:00419546                 db    ? ;
.bss:00419547                 db    ? ;
.bss:00419548                 db    ? ;
.bss:00419549                 db    ? ;
.bss:0041954A                 db    ? ;
.bss:0041954B                 db    ? ;
.bss:0041954C                 db    ? ;
.bss:0041954D                 db    ? ;
.bss:0041954E                 db    ? ;
.bss:0041954F                 db    ? ;
.bss:00419550                 db    ? ;
.bss:00419551                 db    ? ;
.bss:00419552                 db    ? ;
.bss:00419553                 db    ? ;
.bss:00419554                 db    ? ;
.bss:00419555                 db    ? ;
.bss:00419556                 db    ? ;
.bss:00419557                 db    ? ;
.bss:00419558                 db    ? ;
.bss:00419559                 db    ? ;
.bss:0041955A                 db    ? ;
.bss:0041955B                 db    ? ;
.bss:0041955C                 db    ? ;
.bss:0041955D                 db    ? ;
.bss:0041955E                 db    ? ;
.bss:0041955F                 db    ? ;
.bss:00419560                 db    ? ;
.bss:00419561                 db    ? ;
.bss:00419562                 db    ? ;
.bss:00419563                 db    ? ;
.bss:00419564                 db    ? ;
.bss:00419565                 db    ? ;
.bss:00419566                 db    ? ;
.bss:00419567                 db    ? ;
.bss:00419568                 db    ? ;
.bss:00419569                 db    ? ;
.bss:0041956A                 db    ? ;
.bss:0041956B                 db    ? ;
.bss:0041956C                 db    ? ;
.bss:0041956D                 db    ? ;
.bss:0041956E                 db    ? ;
.bss:0041956F                 db    ? ;
.bss:00419570                 db    ? ;
.bss:00419571                 db    ? ;
.bss:00419572                 db    ? ;
.bss:00419573                 db    ? ;
.bss:00419574                 db    ? ;
.bss:00419575                 db    ? ;
.bss:00419576                 db    ? ;
.bss:00419577                 db    ? ;
.bss:00419578                 db    ? ;
.bss:00419579                 db    ? ;
.bss:0041957A                 db    ? ;
.bss:0041957B                 db    ? ;
.bss:0041957C                 db    ? ;
.bss:0041957D                 db    ? ;
.bss:0041957E                 db    ? ;
.bss:0041957F                 db    ? ;
.bss:00419580                 db    ? ;
.bss:00419581                 db    ? ;
.bss:00419582                 db    ? ;
.bss:00419583                 db    ? ;
.bss:00419584                 db    ? ;
.bss:00419585                 db    ? ;
.bss:00419586                 db    ? ;
.bss:00419587                 db    ? ;
.bss:00419588                 db    ? ;
.bss:00419589                 db    ? ;
.bss:0041958A                 db    ? ;
.bss:0041958B                 db    ? ;
.bss:0041958C                 db    ? ;
.bss:0041958D                 db    ? ;
.bss:0041958E                 db    ? ;
.bss:0041958F                 db    ? ;
.bss:00419590                 db    ? ;
.bss:00419591                 db    ? ;
.bss:00419592                 db    ? ;
.bss:00419593                 db    ? ;
.bss:00419594                 db    ? ;
.bss:00419595                 db    ? ;
.bss:00419596                 db    ? ;
.bss:00419597                 db    ? ;
.bss:00419598                 db    ? ;
.bss:00419599                 db    ? ;
.bss:0041959A                 db    ? ;
.bss:0041959B                 db    ? ;
.bss:0041959C                 db    ? ;
.bss:0041959D                 db    ? ;
.bss:0041959E                 db    ? ;
.bss:0041959F                 db    ? ;
.bss:004195A0                 db    ? ;
.bss:004195A1                 db    ? ;
.bss:004195A2                 db    ? ;
.bss:004195A3                 db    ? ;
.bss:004195A4                 db    ? ;
.bss:004195A5                 db    ? ;
.bss:004195A6                 db    ? ;
.bss:004195A7                 db    ? ;
.bss:004195A8                 db    ? ;
.bss:004195A9                 db    ? ;
.bss:004195AA                 db    ? ;
.bss:004195AB                 db    ? ;
.bss:004195AC                 db    ? ;
.bss:004195AD                 db    ? ;
.bss:004195AE                 db    ? ;
.bss:004195AF                 db    ? ;
.bss:004195B0                 db    ? ;
.bss:004195B1                 db    ? ;
.bss:004195B2                 db    ? ;
.bss:004195B3                 db    ? ;
.bss:004195B4                 db    ? ;
.bss:004195B5                 db    ? ;
.bss:004195B6                 db    ? ;
.bss:004195B7                 db    ? ;
.bss:004195B8                 db    ? ;
.bss:004195B9                 db    ? ;
.bss:004195BA                 db    ? ;
.bss:004195BB                 db    ? ;
.bss:004195BC                 db    ? ;
.bss:004195BD                 db    ? ;
.bss:004195BE                 db    ? ;
.bss:004195BF                 db    ? ;
.bss:004195C0                 db    ? ;
.bss:004195C1                 db    ? ;
.bss:004195C2                 db    ? ;
.bss:004195C3                 db    ? ;
.bss:004195C4                 db    ? ;
.bss:004195C5                 db    ? ;
.bss:004195C6                 db    ? ;
.bss:004195C7                 db    ? ;
.bss:004195C8                 db    ? ;
.bss:004195C9                 db    ? ;
.bss:004195CA                 db    ? ;
.bss:004195CB                 db    ? ;
.bss:004195CC                 db    ? ;
.bss:004195CD                 db    ? ;
.bss:004195CE                 db    ? ;
.bss:004195CF                 db    ? ;
.bss:004195D0                 db    ? ;
.bss:004195D1                 db    ? ;
.bss:004195D2                 db    ? ;
.bss:004195D3                 db    ? ;
.bss:004195D4                 db    ? ;
.bss:004195D5                 db    ? ;
.bss:004195D6                 db    ? ;
.bss:004195D7                 db    ? ;
.bss:004195D8                 db    ? ;
.bss:004195D9                 db    ? ;
.bss:004195DA                 db    ? ;
.bss:004195DB                 db    ? ;
.bss:004195DC                 db    ? ;
.bss:004195DD                 db    ? ;
.bss:004195DE                 db    ? ;
.bss:004195DF                 db    ? ;
.bss:004195E0                 db    ? ;
.bss:004195E1                 db    ? ;
.bss:004195E2                 db    ? ;
.bss:004195E3                 db    ? ;
.bss:004195E4                 db    ? ;
.bss:004195E5                 db    ? ;
.bss:004195E6                 db    ? ;
.bss:004195E7                 db    ? ;
.bss:004195E8                 db    ? ;
.bss:004195E9                 db    ? ;
.bss:004195EA                 db    ? ;
.bss:004195EB                 db    ? ;
.bss:004195EC                 db    ? ;
.bss:004195ED                 db    ? ;
.bss:004195EE                 db    ? ;
.bss:004195EF                 db    ? ;
.bss:004195F0                 db    ? ;
.bss:004195F1                 db    ? ;
.bss:004195F2                 db    ? ;
.bss:004195F3                 db    ? ;
.bss:004195F4                 db    ? ;
.bss:004195F5                 db    ? ;
.bss:004195F6                 db    ? ;
.bss:004195F7                 db    ? ;
.bss:004195F8                 db    ? ;
.bss:004195F9                 db    ? ;
.bss:004195FA                 db    ? ;
.bss:004195FB                 db    ? ;
.bss:004195FC                 db    ? ;
.bss:004195FD                 db    ? ;
.bss:004195FE                 db    ? ;
.bss:004195FF                 db    ? ;
.bss:00419600                 db    ? ;
.bss:00419601                 db    ? ;
.bss:00419602                 db    ? ;
.bss:00419603                 db    ? ;
.bss:00419604                 db    ? ;
.bss:00419605                 db    ? ;
.bss:00419606                 db    ? ;
.bss:00419607                 db    ? ;
.bss:00419608                 db    ? ;
.bss:00419609                 db    ? ;
.bss:0041960A                 db    ? ;
.bss:0041960B                 db    ? ;
.bss:0041960C                 db    ? ;
.bss:0041960D                 db    ? ;
.bss:0041960E                 db    ? ;
.bss:0041960F                 db    ? ;
.bss:00419610                 db    ? ;
.bss:00419611                 db    ? ;
.bss:00419612                 db    ? ;
.bss:00419613                 db    ? ;
.bss:00419614                 db    ? ;
.bss:00419615                 db    ? ;
.bss:00419616                 db    ? ;
.bss:00419617                 db    ? ;
.bss:00419618                 db    ? ;
.bss:00419619                 db    ? ;
.bss:0041961A                 db    ? ;
.bss:0041961B                 db    ? ;
.bss:0041961C                 db    ? ;
.bss:0041961D                 db    ? ;
.bss:0041961E                 db    ? ;
.bss:0041961F                 db    ? ;
.bss:00419620                 db    ? ;
.bss:00419621                 db    ? ;
.bss:00419622                 db    ? ;
.bss:00419623                 db    ? ;
.bss:00419624                 db    ? ;
.bss:00419625                 db    ? ;
.bss:00419626                 db    ? ;
.bss:00419627                 db    ? ;
.bss:00419628                 db    ? ;
.bss:00419629                 db    ? ;
.bss:0041962A                 db    ? ;
.bss:0041962B                 db    ? ;
.bss:0041962C                 db    ? ;
.bss:0041962D                 db    ? ;
.bss:0041962E                 db    ? ;
.bss:0041962F                 db    ? ;
.bss:00419630                 db    ? ;
.bss:00419631                 db    ? ;
.bss:00419632                 db    ? ;
.bss:00419633                 db    ? ;
.bss:00419634                 db    ? ;
.bss:00419635                 db    ? ;
.bss:00419636                 db    ? ;
.bss:00419637                 db    ? ;
.bss:00419638                 db    ? ;
.bss:00419639                 db    ? ;
.bss:0041963A                 db    ? ;
.bss:0041963B                 db    ? ;
.bss:0041963C                 db    ? ;
.bss:0041963D                 db    ? ;
.bss:0041963E                 db    ? ;
.bss:0041963F                 db    ? ;
.bss:00419640                 db    ? ;
.bss:00419641                 db    ? ;
.bss:00419642                 db    ? ;
.bss:00419643                 db    ? ;
.bss:00419644                 db    ? ;
.bss:00419645                 db    ? ;
.bss:00419646                 db    ? ;
.bss:00419647                 db    ? ;
.bss:00419648                 db    ? ;
.bss:00419649                 db    ? ;
.bss:0041964A                 db    ? ;
.bss:0041964B                 db    ? ;
.bss:0041964C                 db    ? ;
.bss:0041964D                 db    ? ;
.bss:0041964E                 db    ? ;
.bss:0041964F                 db    ? ;
.bss:00419650                 db    ? ;
.bss:00419651                 db    ? ;
.bss:00419652                 db    ? ;
.bss:00419653                 db    ? ;
.bss:00419654                 db    ? ;
.bss:00419655                 db    ? ;
.bss:00419656                 db    ? ;
.bss:00419657                 db    ? ;
.bss:00419658                 db    ? ;
.bss:00419659                 db    ? ;
.bss:0041965A                 db    ? ;
.bss:0041965B                 db    ? ;
.bss:0041965C                 db    ? ;
.bss:0041965D                 db    ? ;
.bss:0041965E                 db    ? ;
.bss:0041965F                 db    ? ;
.bss:00419660                 db    ? ;
.bss:00419661                 db    ? ;
.bss:00419662                 db    ? ;
.bss:00419663                 db    ? ;
.bss:00419664                 db    ? ;
.bss:00419665                 db    ? ;
.bss:00419666                 db    ? ;
.bss:00419667                 db    ? ;
.bss:00419668                 db    ? ;
.bss:00419669                 db    ? ;
.bss:0041966A                 db    ? ;
.bss:0041966B                 db    ? ;
.bss:0041966C                 db    ? ;
.bss:0041966D                 db    ? ;
.bss:0041966E                 db    ? ;
.bss:0041966F                 db    ? ;
.bss:00419670                 db    ? ;
.bss:00419671                 db    ? ;
.bss:00419672                 db    ? ;
.bss:00419673                 db    ? ;
.bss:00419674                 db    ? ;
.bss:00419675                 db    ? ;
.bss:00419676                 db    ? ;
.bss:00419677                 db    ? ;
.bss:00419678                 db    ? ;
.bss:00419679                 db    ? ;
.bss:0041967A                 db    ? ;
.bss:0041967B                 db    ? ;
.bss:0041967C                 db    ? ;
.bss:0041967D                 db    ? ;
.bss:0041967E                 db    ? ;
.bss:0041967F                 db    ? ;
.bss:00419680 dword_419680    dd ?                    ; DATA XREF: sub_414E80+6E↑r
.bss:00419680                                         ; sub_414E80+9A↑r ...
.bss:00419684 dword_419684    dd ?                    ; DATA XREF: sub_414E80:loc_414EE8↑r
.bss:00419684                                         ; sub_414E80+A0↑r ...
.bss:00419688                 align 10h
.bss:00419690 dword_419690    dd ?                    ; DATA XREF: sub_415390↑r
.bss:00419690                                         ; .text:loc_4154C2↑w
.bss:00419694                 align 10h
.bss:004196A0 dword_4196A0    dd ?                    ; DATA XREF: sub_401FB0+41↑w
.bss:004196A0                                         ; sub_401FB0+14B↑r ...
.bss:004196A4                 align 20h
.bss:004196C0 ; char dword_4196C0[]
.bss:004196C0 dword_4196C0    dd ?                    ; DATA XREF: sub_401FB0+12B↑r
.bss:004196C0                                         ; sub_401FB0+18A↑r ...
.bss:004196C4                 align 10h
.bss:004196D0 dword_4196D0    dd ?                    ; DATA XREF: .text:0040A350↑r
.bss:004196D0                                         ; .text:0040A359↑w ...
.bss:004196D4                 align 10h
.bss:004196E0 dword_4196E0    dd ?                    ; CODE XREF: sub_40E144+63↑p
.bss:004196E0                                         ; DATA XREF: sub_40E040+1E↑r ...
.bss:004196E4                 align 10h
.bss:004196F0 dword_4196F0    dd ?                    ; DATA XREF: sub_40E040+4E↑w
.bss:004196F0                                         ; sub_40E144+AB↑w
.bss:004196F4                 db    ? ;
.bss:004196F5                 db    ? ;
.bss:004196F6                 db    ? ;
.bss:004196F7                 db    ? ;
.bss:004196F8                 db    ? ;
.bss:004196F9                 db    ? ;
.bss:004196FA                 db    ? ;
.bss:004196FB                 db    ? ;
.bss:004196FC                 db    ? ;
.bss:004196FD                 db    ? ;
.bss:004196FE                 db    ? ;
.bss:004196FF                 db    ? ;
.bss:00419700                 db    ? ;
.bss:00419701                 db    ? ;
.bss:00419702                 db    ? ;
.bss:00419703                 db    ? ;
.bss:00419704                 db    ? ;
.bss:00419705                 db    ? ;
.bss:00419706                 db    ? ;
.bss:00419707                 db    ? ;
.bss:00419708                 db    ? ;
.bss:00419709                 db    ? ;
.bss:0041970A                 db    ? ;
.bss:0041970B                 db    ? ;
.bss:0041970C                 db    ? ;
.bss:0041970D                 db    ? ;
.bss:0041970E                 db    ? ;
.bss:0041970F                 db    ? ;
.bss:00419710                 db    ? ;
.bss:00419711                 db    ? ;
.bss:00419712                 db    ? ;
.bss:00419713                 db    ? ;
.bss:00419714                 db    ? ;
.bss:00419715                 db    ? ;
.bss:00419716                 db    ? ;
.bss:00419717                 db    ? ;
.bss:00419718                 db    ? ;
.bss:00419719                 db    ? ;
.bss:0041971A                 db    ? ;
.bss:0041971B                 db    ? ;
.bss:0041971C                 db    ? ;
.bss:0041971D                 db    ? ;
.bss:0041971E                 db    ? ;
.bss:0041971F                 db    ? ;
.bss:00419720 dword_419720    dd ?                    ; DATA XREF: sub_40E144+13↑r
.bss:00419724                 align 1000h
.bss:00419724 _bss            ends
.bss:00419724
.idata:0041A000 ; Section 4. (virtual address 0001A000)
.idata:0041A000 ; Virtual size                  : 00000EB8 (   3768.)
.idata:0041A000 ; Section size in file          : 00001000 (   4096.)
.idata:0041A000 ; Offset to raw data for section: 00017000
.idata:0041A000 ; Flags C0000040: Data Readable Writable
.idata:0041A000 ; Alignment     : default
.idata:0041A000 ; ===========================================================================
.idata:0041A000
.idata:0041A000 ; Segment type: Externs
.idata:0041A000 ; _idata
.idata:0041A000
.idata:0041A001
.idata:0041A2D0 ;
.idata:0041A2D0 ; Imports from libintl3.dll
.idata:0041A2D0 ;
.idata:0041A2D0                 extrn libintl_bindtextdomain:dword
.idata:0041A2D0                                         ; CODE XREF: sub_401FB0+6A↑p
.idata:0041A2D0                                         ; DATA XREF: sub_401FB0+6A↑r ...
.idata:0041A2D4                 extrn libintl_gettext:dword
.idata:0041A2D4                                         ; CODE XREF: sub_401FB0+13F↑p
.idata:0041A2D4                                         ; sub_401FB0+17C↑p ...
.idata:0041A2D8                 extrn libintl_textdomain:dword
.idata:0041A2D8                                         ; CODE XREF: sub_401FB0+77↑p
.idata:0041A2D8                                         ; DATA XREF: sub_401FB0+77↑r ...
.idata:0041A2DC
.idata:0041A2E4 ;
.idata:0041A2E4 ; Imports from ADVAPI32.DLL
.idata:0041A2E4 ;
.idata:0041A2E4 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:0041A2E4                 extrn __imp_RegCloseKey:dword
.idata:0041A2E4                                         ; DATA XREF: RegCloseKey↑r
.idata:0041A2E8 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:0041A2E8                 extrn __imp_RegOpenKeyExA:dword
.idata:0041A2E8                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:0041A2EC ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:0041A2EC                 extrn __imp_RegQueryValueExA:dword
.idata:0041A2EC                                         ; DATA XREF: RegQueryValueExA↑r
.idata:0041A2F0
.idata:0041A2F8 ;
.idata:0041A2F8 ; Imports from KERNEL32.dll
.idata:0041A2F8 ;
.idata:0041A2F8 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:0041A2F8                 extrn __imp_AreFileApisANSI:dword
.idata:0041A2F8                                         ; DATA XREF: AreFileApisANSI↑r
.idata:0041A2FC ; BOOL (__stdcall *BackupWrite)(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext)
.idata:0041A2FC                 extrn __imp_BackupWrite:dword
.idata:0041A2FC                                         ; DATA XREF: BackupWrite↑r
.idata:0041A300 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:0041A300                 extrn __imp_CloseHandle:dword
.idata:0041A300                                         ; DATA XREF: CloseHandle↑r
.idata:0041A304 ; BOOL (__stdcall *CopyFileA)(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
.idata:0041A304                 extrn __imp_CopyFileA:dword
.idata:0041A304                                         ; DATA XREF: CopyFileA↑r
.idata:0041A308 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:0041A308                 extrn __imp_CreateDirectoryA:dword
.idata:0041A308                                         ; DATA XREF: CreateDirectoryA↑r
.idata:0041A30C ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:0041A30C                 extrn __imp_CreateFileA:dword
.idata:0041A30C                                         ; DATA XREF: CreateFileA↑r
.idata:0041A310 ; BOOL (__stdcall *DeleteFileA)(LPCSTR lpFileName)
.idata:0041A310                 extrn __imp_DeleteFileA:dword
.idata:0041A310                                         ; DATA XREF: DeleteFileA↑r
.idata:0041A314 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:0041A314                 extrn __imp_DeviceIoControl:dword
.idata:0041A314                                         ; DATA XREF: DeviceIoControl↑r
.idata:0041A318 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0041A318                 extrn __imp_ExitProcess:dword
.idata:0041A318                                         ; DATA XREF: ExitProcess↑r
.idata:0041A31C ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:0041A31C                 extrn __imp_FindClose:dword
.idata:0041A31C                                         ; DATA XREF: FindClose↑r
.idata:0041A320 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041A320                 extrn __imp_FindFirstFileA:dword
.idata:0041A320                                         ; DATA XREF: FindFirstFileA↑r
.idata:0041A324 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041A324                 extrn __imp_FindNextFileA:dword
.idata:0041A324                                         ; DATA XREF: FindNextFileA↑r
.idata:0041A328 ; DWORD (__stdcall *FormatMessageA)(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
.idata:0041A328                 extrn __imp_FormatMessageA:dword
.idata:0041A328                                         ; DATA XREF: FormatMessageA↑r
.idata:0041A32C ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:0041A32C                 extrn __imp_FreeLibrary:dword
.idata:0041A32C                                         ; DATA XREF: FreeLibrary↑r
.idata:0041A330 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041A330                 extrn __imp_GetCurrentDirectoryA:dword
.idata:0041A330                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0041A334 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0041A334                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0041A334                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041A338 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041A338                 extrn __imp_GetDriveTypeA:dword
.idata:0041A338                                         ; DATA XREF: GetDriveTypeA↑r
.idata:0041A33C ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:0041A33C                 extrn __imp_GetFileAttributesA:dword
.idata:0041A33C                                         ; DATA XREF: GetFileAttributesA↑r
.idata:0041A340 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:0041A340                 extrn __imp_GetFileInformationByHandle:dword
.idata:0041A340                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041A344 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041A344                 extrn __imp_GetFileSize:dword
.idata:0041A344                                         ; DATA XREF: GetFileSize↑r
.idata:0041A348 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041A348                 extrn __imp_GetFileType:dword
.idata:0041A348                                         ; DATA XREF: GetFileType↑r
.idata:0041A34C ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:0041A34C                 extrn __imp_GetFullPathNameA:dword
.idata:0041A34C                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0041A350 ; DWORD (__stdcall *GetLastError)()
.idata:0041A350                 extrn __imp_GetLastError:dword
.idata:0041A350                                         ; DATA XREF: GetLastError↑r
.idata:0041A354 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041A354                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041A354                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041A358 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041A358                 extrn __imp_GetModuleFileNameA:dword
.idata:0041A358                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:0041A35C ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0041A35C                 extrn __imp_GetModuleHandleA:dword
.idata:0041A35C                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0041A360 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0041A360                 extrn __imp_GetProcAddress:dword
.idata:0041A360                                         ; DATA XREF: GetProcAddress↑r
.idata:0041A364 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041A364                 extrn __imp_GetProcessHeap:dword
.idata:0041A364                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041A368 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041A368                 extrn __imp_GetShortPathNameA:dword
.idata:0041A368                                         ; DATA XREF: GetShortPathNameA↑r
.idata:0041A36C ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:0041A36C                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:0041A36C                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0041A370 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0041A370                 extrn __imp_GetTimeZoneInformation:dword
.idata:0041A370                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041A374 ; DWORD (__stdcall *GetVersion)()
.idata:0041A374                 extrn __imp_GetVersion:dword
.idata:0041A374                                         ; DATA XREF: GetVersion↑r
.idata:0041A378 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0041A378                 extrn __imp_GetVersionExA:dword
.idata:0041A378                                         ; DATA XREF: GetVersionExA↑r
.idata:0041A37C ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:0041A37C                 extrn __imp_GetVolumeInformationA:dword
.idata:0041A37C                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0041A380 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041A380                 extrn __imp_HeapAlloc:dword
.idata:0041A380                                         ; DATA XREF: HeapAlloc↑r
.idata:0041A384 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041A384                 extrn __imp_HeapFree:dword
.idata:0041A384                                         ; DATA XREF: HeapFree↑r
.idata:0041A388 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041A388                 extrn __imp_LoadLibraryA:dword
.idata:0041A388                                         ; DATA XREF: LoadLibraryA↑r
.idata:0041A38C ; HLOCAL (__stdcall *LocalFree)(HLOCAL hMem)
.idata:0041A38C                 extrn __imp_LocalFree:dword
.idata:0041A38C                                         ; DATA XREF: LocalFree↑r
.idata:0041A390 ; BOOL (__stdcall *MoveFileA)(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.idata:0041A390                 extrn __imp_MoveFileA:dword
.idata:0041A390                                         ; DATA XREF: MoveFileA↑r
.idata:0041A394 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:0041A394                 extrn __imp_MultiByteToWideChar:dword
.idata:0041A394                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0041A398 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0041A398                 extrn __imp_PeekNamedPipe:dword
.idata:0041A398                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041A39C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041A39C                 extrn __imp_SetErrorMode:dword
.idata:0041A39C                                         ; DATA XREF: SetErrorMode↑r
.idata:0041A3A0 ; BOOL (__stdcall *SetFileAttributesA)(LPCSTR lpFileName, DWORD dwFileAttributes)
.idata:0041A3A0                 extrn __imp_SetFileAttributesA:dword
.idata:0041A3A0                                         ; DATA XREF: SetFileAttributesA↑r
.idata:0041A3A4 ; void (__stdcall *SetLastError)(DWORD dwErrCode)
.idata:0041A3A4                 extrn __imp_SetLastError:dword
.idata:0041A3A4                                         ; DATA XREF: SetLastError↑r
.idata:0041A3A8 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0041A3A8                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0041A3A8                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0041A3AC ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:0041A3AC                 extrn __imp_UnlockFile:dword
.idata:0041A3AC                                         ; DATA XREF: UnlockFile↑r
.idata:0041A3B0 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041A3B0                 extrn __imp_lstrcmpiA:dword
.idata:0041A3B0                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041A3B4 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041A3B4                 extrn __imp_lstrcpyA:dword
.idata:0041A3B4                                         ; DATA XREF: lstrcpyA↑r
.idata:0041A3B8
.idata:0041A3C0 ;
.idata:0041A3C0 ; Imports from msvcrt.dll
.idata:0041A3C0 ;
.idata:0041A3C0 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041A3C0                 extrn __imp__chmod:dword
.idata:0041A3C0                                         ; DATA XREF: _chmod↑r
.idata:0041A3C4 ; int (__cdecl *_getpid)()
.idata:0041A3C4                 extrn __imp__getpid:dword
.idata:0041A3C4                                         ; DATA XREF: _getpid↑r
.idata:0041A3C8 ; char *(__cdecl *_strdup)(const char *String)
.idata:0041A3C8                 extrn __imp__strdup:dword
.idata:0041A3C8                                         ; DATA XREF: _strdup↑r
.idata:0041A3CC ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:0041A3CC                 extrn __imp__stricmp:dword
.idata:0041A3CC                                         ; DATA XREF: _stricmp↑r
.idata:0041A3D0
.idata:0041A3D8 ;
.idata:0041A3D8 ; Imports from MSVCP60.DLL
.idata:0041A3D8 ;
.idata:0041A3D8 ; wint_t (__cdecl *btowc)(int Ch)
.idata:0041A3D8                 extrn __imp_btowc:dword ; DATA XREF: btowc↑r
.idata:0041A3DC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0041A3DC                 extrn __imp_mbrtowc:dword
.idata:0041A3DC                                         ; DATA XREF: mbrtowc↑r
.idata:0041A3E0 ; wctype_t (__cdecl *wctype)(const char *name)
.idata:0041A3E0                 extrn __imp_wctype:dword
.idata:0041A3E0                                         ; DATA XREF: wctype↑r
.idata:0041A3E4
.idata:0041A3EC ;
.idata:0041A3EC ; Imports from msvcrt.dll
.idata:0041A3EC ;
.idata:0041A3EC                 extrn __imp___getmainargs:dword
.idata:0041A3EC                                         ; DATA XREF: __getmainargs↑r
.idata:0041A3F0 ; int _mb_cur_max
.idata:0041A3F0                 extrn __mb_cur_max:dword
.idata:0041A3F0                                         ; DATA XREF: sub_405570+49↑r
.idata:0041A3F0                                         ; sub_405F70+7↑r ...
.idata:0041A3F4 ; char ***(__cdecl *__p__environ)()
.idata:0041A3F4                 extrn __imp___p__environ:dword
.idata:0041A3F4                                         ; DATA XREF: __p__environ↑r
.idata:0041A3F8 ; int *(__cdecl *__p__fmode)()
.idata:0041A3F8                 extrn __imp___p__fmode:dword
.idata:0041A3F8                                         ; DATA XREF: __p__fmode↑r
.idata:0041A3FC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0041A3FC                 extrn __set_app_type:dword
.idata:0041A3FC                                         ; CODE XREF: start+D↑p
.idata:0041A3FC                                         ; .text:0040102D↑p
.idata:0041A3FC                                         ; DATA XREF: ...
.idata:0041A400                 extrn __imp__assert:dword
.idata:0041A400                                         ; DATA XREF: _assert↑r
.idata:0041A404 ; void (__cdecl *_cexit)()
.idata:0041A404                 extrn __imp__cexit:dword
.idata:0041A404                                         ; DATA XREF: _cexit↑r
.idata:0041A408 ; int (__cdecl *_chmod_0)(const char *FileName, int AccessMode)
.idata:0041A408                 extrn __imp__chmod_0:dword
.idata:0041A408                                         ; DATA XREF: _chmod_0↑r
.idata:0041A40C ; int (__cdecl *_close)(int FileHandle)
.idata:0041A40C                 extrn __imp__close:dword
.idata:0041A40C                                         ; DATA XREF: _close↑r
.idata:0041A410 ; int *(__cdecl *_errno)()
.idata:0041A410                 extrn __imp__errno:dword
.idata:0041A410                                         ; DATA XREF: _errno↑r
.idata:0041A414 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:0041A414                 extrn __imp__fdopen:dword
.idata:0041A414                                         ; DATA XREF: _fdopen↑r
.idata:0041A418 ; int (__cdecl *_filbuf)(FILE *File)
.idata:0041A418                 extrn __imp__filbuf:dword
.idata:0041A418                                         ; DATA XREF: _filbuf↑r
.idata:0041A41C ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:0041A41C                 extrn __imp__filelengthi64:dword
.idata:0041A41C                                         ; DATA XREF: _filelengthi64↑r
.idata:0041A420 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0041A420                 extrn __imp__flsbuf:dword
.idata:0041A420                                         ; DATA XREF: _flsbuf↑r
.idata:0041A424 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:0041A424                 extrn __imp__get_osfhandle:dword
.idata:0041A424                                         ; DATA XREF: _get_osfhandle↑r
.idata:0041A428 ; FILE iob[]
.idata:0041A428                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0041A428                                         ; sub_401080+75↑r ...
.idata:0041A42C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0041A42C                 extrn __imp__isctype:dword
.idata:0041A42C                                         ; DATA XREF: _isctype↑r
.idata:0041A430 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0041A430                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0041A430                                         ; DATA XREF: .text:0040106C↑r
.idata:0041A434 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0041A434                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0041A438 ; const unsigned __int16 *pctype
.idata:0041A438                 extrn _pctype:dword     ; DATA XREF: sub_405570:loc_4055E7↑r
.idata:0041A438                                         ; sub_405F70:loc_406664↑r ...
.idata:0041A43C ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041A43C                 extrn __imp__setmode:dword
.idata:0041A43C                                         ; DATA XREF: _setmode↑r
.idata:0041A440 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:0041A440                 extrn __imp__stricmp_0:dword
.idata:0041A440                                         ; DATA XREF: _stricmp_0↑r
.idata:0041A444 ; void (__cdecl __noreturn *abort)()
.idata:0041A444                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0041A448 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0041A448                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0041A448                                         ; DATA XREF: sub_401040+C↑r
.idata:0041A44C ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0041A44C                 extrn __imp_calloc:dword
.idata:0041A44C                                         ; DATA XREF: calloc↑r
.idata:0041A450 ; void (__cdecl __noreturn *exit)(int Code)
.idata:0041A450                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041A454 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041A454                 extrn __imp_fclose:dword
.idata:0041A454                                         ; DATA XREF: fclose↑r
.idata:0041A458 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0041A458                 extrn __imp_fflush:dword
.idata:0041A458                                         ; DATA XREF: fflush↑r
.idata:0041A45C ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041A45C                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0041A460 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0041A460                 extrn __imp_fprintf:dword
.idata:0041A460                                         ; DATA XREF: fprintf↑r
.idata:0041A464 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041A464                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0041A468 ; void (__cdecl *free)(void *Block)
.idata:0041A468                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041A46C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041A46C                 extrn __imp_getenv:dword
.idata:0041A46C                                         ; DATA XREF: getenv↑r
.idata:0041A470 ; int (__cdecl *isalpha)(int C)
.idata:0041A470                 extrn __imp_isalpha:dword
.idata:0041A470                                         ; DATA XREF: isalpha↑r
.idata:0041A474 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041A474                 extrn __imp_iswctype:dword
.idata:0041A474                                         ; DATA XREF: iswctype↑r
.idata:0041A478 ; void *(__cdecl *malloc)(size_t Size)
.idata:0041A478                 extrn __imp_malloc:dword
.idata:0041A478                                         ; DATA XREF: malloc↑r
.idata:0041A47C ; size_t (__cdecl *mbstowcs)(wchar_t *Dest, const char *Source, size_t MaxCount)
.idata:0041A47C                 extrn __imp_mbstowcs:dword
.idata:0041A47C                                         ; DATA XREF: mbstowcs↑r
.idata:0041A480 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041A480                 extrn __imp_memcpy:dword
.idata:0041A480                                         ; DATA XREF: memcpy↑r
.idata:0041A484 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041A484                 extrn __imp_memset:dword
.idata:0041A484                                         ; DATA XREF: memset↑r
.idata:0041A488 ; int (*printf)(const char *const Format, ...)
.idata:0041A488                 extrn __imp_printf:dword
.idata:0041A488                                         ; DATA XREF: printf↑r
.idata:0041A48C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0041A48C                 extrn __imp_realloc:dword
.idata:0041A48C                                         ; DATA XREF: realloc↑r
.idata:0041A490 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0041A490                 extrn __imp_setlocale:dword
.idata:0041A490                                         ; DATA XREF: setlocale↑r
.idata:0041A494 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041A494                 extrn __imp_signal:dword
.idata:0041A494                                         ; DATA XREF: signal↑r
.idata:0041A498 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0041A498                 extrn __imp_sprintf:dword
.idata:0041A498                                         ; DATA XREF: sprintf↑r
.idata:0041A49C ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0041A49C                 extrn __imp_sscanf:dword
.idata:0041A49C                                         ; DATA XREF: sscanf↑r
.idata:0041A4A0 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:0041A4A0                 extrn __imp_strcat:dword
.idata:0041A4A0                                         ; DATA XREF: strcat↑r
.idata:0041A4A4 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041A4A4                 extrn __imp_strchr:dword
.idata:0041A4A4                                         ; DATA XREF: strchr↑r
.idata:0041A4A8 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0041A4A8                 extrn __imp_strcmp:dword
.idata:0041A4A8                                         ; DATA XREF: strcmp↑r
.idata:0041A4AC ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0041A4AC                 extrn __imp_strcpy:dword
.idata:0041A4AC                                         ; DATA XREF: strcpy↑r
.idata:0041A4B0 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0041A4B0                 extrn __imp_strerror:dword
.idata:0041A4B0                                         ; DATA XREF: strerror↑r
.idata:0041A4B4 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041A4B4                 extrn __imp_strlen:dword
.idata:0041A4B4                                         ; DATA XREF: strlen↑r
.idata:0041A4B8 ; char *(__cdecl *strncat)(char *Destination, const char *Source, size_t Count)
.idata:0041A4B8                 extrn __imp_strncat:dword
.idata:0041A4B8                                         ; DATA XREF: strncat↑r
.idata:0041A4BC ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0041A4BC                 extrn __imp_strncmp:dword
.idata:0041A4BC                                         ; DATA XREF: strncmp↑r
.idata:0041A4C0 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0041A4C0                 extrn __imp_strncpy:dword
.idata:0041A4C0                                         ; DATA XREF: strncpy↑r
.idata:0041A4C4 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041A4C4                 extrn __imp_strpbrk:dword
.idata:0041A4C4                                         ; DATA XREF: strpbrk↑r
.idata:0041A4C8 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:0041A4C8                 extrn __imp_strrchr:dword
.idata:0041A4C8                                         ; DATA XREF: strrchr↑r
.idata:0041A4CC ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:0041A4CC                 extrn __imp_strspn:dword
.idata:0041A4CC                                         ; DATA XREF: strspn↑r
.idata:0041A4D0 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0041A4D0                 extrn __imp_strstr:dword
.idata:0041A4D0                                         ; DATA XREF: strstr↑r
.idata:0041A4D4 ; int (__cdecl *tolower)(int C)
.idata:0041A4D4                 extrn __imp_tolower:dword
.idata:0041A4D4                                         ; DATA XREF: tolower↑r
.idata:0041A4D8 ; int (__cdecl *toupper)(int C)
.idata:0041A4D8                 extrn __imp_toupper:dword
.idata:0041A4D8                                         ; DATA XREF: toupper↑r
.idata:0041A4DC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041A4DC                 extrn __imp_vfprintf:dword
.idata:0041A4DC                                         ; DATA XREF: vfprintf↑r
.idata:0041A4E0
.idata:0041A4E8 ;
.idata:0041A4E8 ; Imports from OLE32.dll
.idata:0041A4E8 ;
.idata:0041A4E8 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:0041A4E8                 extrn __imp_CoCreateInstance:dword
.idata:0041A4E8                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041A4EC ; void (__stdcall *CoUninitialize)()
.idata:0041A4EC                 extrn __imp_CoUninitialize:dword
.idata:0041A4EC                                         ; DATA XREF: CoUninitialize↑r
.idata:0041A4F0 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:0041A4F0                 extrn __imp_OleInitialize:dword
.idata:0041A4F0                                         ; DATA XREF: OleInitialize↑r
.idata:0041A4F4
.idata:0041A4F4
.idata:0041A4F4
.idata:0041A4F4                 end start
